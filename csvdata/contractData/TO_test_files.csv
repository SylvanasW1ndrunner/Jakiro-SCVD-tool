file,contract,code,label,graph
0x6c1bcb34142bffd35f57db626e0ac427af616a4d.sol,EnjinBuyer,contract EnjinBuyer { mapping (address => uint256) public balances; mapping (address => uint256) public balances_after_buy; bool public bought_tokens; bool public token_set; bool public refunded; uint256 public contract_eth_value; bool public kill_switch; bytes32 password_hash = 0x8bf0720c6e610aace867eba51b03ab8ca908b665898b10faddc95a96e829539d; address public developer = 0x0639C169D9265Ca4B4DEce693764CdA8ea5F3882; address public sale = 0xc4740f71323129669424d1Ae06c42AEE99da30e2; ERC20 public token; uint256 public eth_minimum = 3235 ether; function set_token(address _token) { require(msg.sender == developer); token = ERC20(_token); token_set = true; },1,"subgraph cluster_503_EnjinBuyer {
label=""EnjinBuyer"";
""503_set_token"" [label=""set_token""];
""503_fallback"" [label=""fallback""];
""503_purchase_tokens"" [label=""purchase_tokens""];
""503_activate_kill_switch"" [label=""activate_kill_switch""];
""503_set_refunded"" [label=""set_refunded""];
""503_withdraw"" [label=""withdraw""];
""503_personal_withdraw"" [label=""personal_withdraw""];
}
"
0x0033fb5561719b8b697b604466d6d39308c58191.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 500000000; uint256 public buyPrice = 2000; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public { }",1,"subgraph cluster_627_EncryptedToken {
label=""EncryptedToken"";
""627_fallback"" [label=""fallback""];
""627_balanceOfa"" [label=""balanceOfa""];
""627_mintToken"" [label=""mintToken""];
""627_freezeAccount"" [label=""freezeAccount""];
""627_setPrices"" [label=""setPrices""];
""627_selfdestructs"" [label=""selfdestructs""];
""627_getEth"" [label=""getEth""];
""627__transfer"" [label=""_transfer""];
""627_buy"" [label=""buy""];
""627_EncryptedToken"" [label=""EncryptedToken""];
""627_setPrices"" -> ""627_onlyOwner"";
""627_buy"" -> ""627__transfer"";
""627_fallback"" -> ""627__transfer"";
""627_EncryptedToken"" -> ""627_TokenERC20"";
""627_mintToken"" -> ""627_onlyOwner"";
""627_freezeAccount"" -> ""627_onlyOwner"";
}
"
0x1847825ea569501ca50dee126d31ea95f6c62a87.sol,LinCrowdSale,"contract LinCrowdSale is LinTokenMint, WhitelistedCrowdsale { uint constant Month = 60*60*24*30; uint constant SixMonth = 6 * Month; uint constant Year = 12 * Month; uint public StartTime = now; uint public EndTime = StartTime + SixMonth; uint public PrivateSaleEndTime = StartTime.add(Month); uint public PreSaleEndTime = PrivateSaleEndTime.add(Month); bool public SoftCapReached = false; bool public HardCapReached = false; bool public SaleClosed = false; bool private rentrancy_lock = false; uint public constant Private_rate = 2000; uint public constant Pre_rate = 1500; uint public constant Public = 1200; uint public MinInvestMent = 2 * (10 ** decimals); uint public HardCap = 500000000 * (10 ** decimals); uint public SoftCap = 10000000 * (10 ** decimals); uint public TotalAmountETH; uint public SaleAmountLIN; uint public RefundAmount; uint public InvestorNum; event SuccessCoreAccount(uint256 InvestorNum); event Burn(address burner, uint256 value); event SuccessInvestor(address RequestAddress, uint256 amount); event SuccessSoftCap(uint256 SaleAmountLin, uint256 time); event SuccessHardCap(uint256 SaleAmountLin, uint256 time); event SucessWithdraw(address who, uint256 AmountEth, uint256 time); event SuccessEthToOwner(address owner, uint256 AmountEth, uint256 time); event linTokenToInvestors(address InverstorAddress, uint256 Amount, uint256 now); event linTokenToCore(address CoreAddress, uint256 Amount, uint256 now); event FailsafeWithdrawal(address InverstorAddress, uint256 Amount, uint256 now); event FaillinTokenToInvestors(address InverstorAddress, uint256 Amount, uint256 now, uint256 ReleaseTime); event FaillinTokenToCore(address CoreAddress, uint256 Amount, uint256 now, uint256 ReleaseTime); event FailEthToOwner(address who, uint256 _amount, uint256 now); event safeWithdrawalTry(address who); modifier beforeDeadline() { require (now < EndTime); _; }",1,"subgraph cluster_1660_LinCrowdSale {
label=""LinCrowdSale"";
""1660_CheckHardCap"" [label=""CheckHardCap""];
""1660_LinTokenToInvestors"" [label=""LinTokenToInvestors""];
""1660_safeWithdrawal"" [label=""safeWithdrawal""];
""1660_LinTokenToCore"" [label=""LinTokenToCore""];
""1660_fallback"" [label=""fallback""];
""1660_CheckSoftCap"" [label=""CheckSoftCap""];
""1660_transferEthToOwner"" [label=""transferEthToOwner""];
""1660_constructor"" [label=""constructor""];
""1660_burn"" [label=""burn""];
""1660_safeWithdrawal"" -> ""1660_afterDeadline"";
""1660_fallback"" -> ""1660_isWhitelisted"";
""1660_safeWithdrawal"" -> ""1660_nonReentrant"";
""1660_burn"" -> ""1660_afterDeadline"";
""1660_transferEthToOwner"" -> ""1660_afterDeadline"";
""1660_transferEthToOwner"" -> ""1660_nonReentrant"";
""1660_transferEthToOwner"" -> ""1660_onlyOwner"";
""1660_LinTokenToCore"" -> ""1660_nonReentrant"";
""1660_burn"" -> ""1660_nonReentrant"";
""1660_burn"" -> ""1660_onlyOwner"";
""1660_fallback"" -> ""1660_CheckHardCap"";
""1660_fallback"" -> ""1660_afterStartTime"";
""1660_fallback"" -> ""1660_CheckSoftCap"";
""1660_LinTokenToInvestors"" -> ""1660_afterDeadline"";
""1660_fallback"" -> ""1660_whenNotPaused"";
""1660_LinTokenToInvestors"" -> ""1660_nonReentrant"";
""1660_LinTokenToCore"" -> ""1660_afterDeadline"";
""1660_LinTokenToCore"" -> ""1660_onlyOwner"";
""1660_fallback"" -> ""1660_beforeDeadline"";
""1660_LinTokenToInvestors"" -> ""1660_onlyOwner"";
""1660_fallback"" -> ""1660_nonReentrant"";
""1660_fallback"" -> ""1660_saleNotClosed"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllRefundEscrow,contract ClinicAllRefundEscrow is RefundEscrow { using Math for uint256; struct RefundeeRecord { bool isRefunded; uint256 index; },1,"subgraph cluster_2170_ClinicAllRefundEscrow {
label=""ClinicAllRefundEscrow"";
""2170_deposit"" [label=""deposit""];
""2170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""2170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""2170_withdrawChunk"" [label=""withdrawChunk""];
""2170_withdraw"" [label=""withdraw""];
""2170_close"" [label=""close""];
""2170_removeRefundeeByIndex"" [label=""removeRefundeeByIndex""];
""2170_refundeesListLength"" [label=""refundeesListLength""];
""2170_withdrawEverything"" [label=""withdrawEverything""];
""2170_depositsOf"" [label=""depositsOf""];
""2170_beneficiaryDepositsOf"" [label=""beneficiaryDepositsOf""];
""2170_constructor"" [label=""constructor""];
""2170_depositFunds"" [label=""depositFunds""];
""2170_manualRefund"" [label=""manualRefund""];
""2170_withdrawChunk"" -> ""2170_removeRefundeeByIndex"";
""2170_manualRefund"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_onlyOwner"";
""2170_close"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawChunk"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawAll"" -> ""2170_onlyOwner"";
""2170_constructor"" -> ""2170_constructor"";
""2170_close"" -> ""2170_close"";
""2170_manualRefund"" -> ""2170_depositsOf"";
""2170_manualRefund"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_withdrawChunk"";
""2170_depositFunds"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_depositsOf"";
""2170_refundeesListLength"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_depositsOf"";
}
"
0xef511cd832613f77a6c6cc8ab5ce6a8b4181c9ba.sol,ICOBuyer,"contract ICOBuyer { address public developer = 0xF23B127Ff5a6a8b60CC4cbF937e5683315894DDA; address public sale = 0x0; ERC20 public token; function set_addresses(address _sale, address _token) { require(msg.sender == developer); sale = _sale; token = ERC20(_token); }",1,"subgraph cluster_206_ICOBuyer {
label=""ICOBuyer"";
""206_set_addresses"" [label=""set_addresses""];
""206_withdrawToken"" [label=""withdrawToken""];
""206_fallback"" [label=""fallback""];
""206_buy"" [label=""buy""];
""206_withdrawETH"" [label=""withdrawETH""];
""206_buyWithAddress"" [label=""buyWithAddress""];
""206_buyWithFunction"" [label=""buyWithFunction""];
""206_buyWithAddressAndFunction"" [label=""buyWithAddressAndFunction""];
}
"
0x92dee36a50f66c603e15b9ac07338ec0046f902f.sol,IRideLiquidityPool,contract IRideLiquidityPool { Token public tokenReward; address public creator; address public owner = 0xBeDF65990326Ed2236C5A17432d9a30dbA3aBFEe; uint256 public price; uint256 public startDate; modifier isCreator() { require(msg.sender == creator); _; },1,"subgraph cluster_184_IRideLiquidityPool {
label=""IRideLiquidityPool"";
""184_setPrice"" [label=""setPrice""];
""184_setStartDate"" [label=""setStartDate""];
""184_setCreator"" [label=""setCreator""];
""184_IRideLiquidityPool"" [label=""IRideLiquidityPool""];
""184_setToken"" [label=""setToken""];
""184_fallback"" [label=""fallback""];
""184_kill"" [label=""kill""];
""184_setOwner"" [label=""setOwner""];
""184_setPrice"" -> ""184_isCreator"";
""184_setToken"" -> ""184_isCreator"";
""184_setStartDate"" -> ""184_isCreator"";
""184_setOwner"" -> ""184_isCreator"";
""184_kill"" -> ""184_isCreator"";
""184_setCreator"" -> ""184_isCreator"";
}
"
0xd1632efa392925089785b43410c529f8959a8d9a.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1092_MiniMeToken {
label=""MiniMeToken"";
""1092_balanceOf"" [label=""balanceOf""];
""1092_approveAndCall"" [label=""approveAndCall""];
""1092_enableTransfers"" [label=""enableTransfers""];
""1092_allowance"" [label=""allowance""];
""1092_approve"" [label=""approve""];
""1092_fallback"" [label=""fallback""];
""1092_MiniMeToken"" [label=""MiniMeToken""];
""1092_claimTokens"" [label=""claimTokens""];
""1092_getValueAt"" [label=""getValueAt""];
""1092_transferFrom"" [label=""transferFrom""];
""1092_balanceOfAt"" [label=""balanceOfAt""];
""1092_totalSupply"" [label=""totalSupply""];
""1092_min"" [label=""min""];
""1092_isContract"" [label=""isContract""];
""1092_generateTokens"" [label=""generateTokens""];
""1092_updateValueAtNow"" [label=""updateValueAtNow""];
""1092_totalSupplyAt"" [label=""totalSupplyAt""];
""1092_createCloneToken"" [label=""createCloneToken""];
""1092_transfer"" [label=""transfer""];
""1092_destroyTokens"" [label=""destroyTokens""];
""1092_doTransfer"" [label=""doTransfer""];
""1092_doTransfer"" -> ""1092_updateValueAtNow"";
""1092_doTransfer"" -> ""1092_balanceOfAt"";
""1092_totalSupplyAt"" -> ""1092_getValueAt"";
""1092_doTransfer"" -> ""1092_isContract"";
""1092_generateTokens"" -> ""1092_totalSupply"";
""1092_generateTokens"" -> ""1092_balanceOf"";
""1092_balanceOfAt"" -> ""1092_min"";
""1092_balanceOf"" -> ""1092_balanceOfAt"";
""1092_destroyTokens"" -> ""1092_onlyController"";
""1092_destroyTokens"" -> ""1092_updateValueAtNow"";
""1092_totalSupplyAt"" -> ""1092_min"";
""1092_destroyTokens"" -> ""1092_totalSupply"";
""1092_transfer"" -> ""1092_doTransfer"";
""1092_destroyTokens"" -> ""1092_balanceOf"";
""1092_approve"" -> ""1092_isContract"";
""1092_totalSupply"" -> ""1092_totalSupplyAt"";
""1092_generateTokens"" -> ""1092_updateValueAtNow"";
""1092_transferFrom"" -> ""1092_doTransfer"";
""1092_enableTransfers"" -> ""1092_onlyController"";
""1092_generateTokens"" -> ""1092_onlyController"";
""1092_claimTokens"" -> ""1092_onlyController"";
""1092_approveAndCall"" -> ""1092_approve"";
""1092_balanceOfAt"" -> ""1092_getValueAt"";
""1092_fallback"" -> ""1092_isContract"";
}
"
0x27a8e297fefa4f15e856aea59ba9336e0dbf3c74.sol,GIGA,contract GIGA { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_GIGA {
label=""GIGA"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_fallback"" [label=""fallback""];
""132_Start_giga"" [label=""Start_giga""];
""132_StopGame"" [label=""StopGame""];
""132_Try"" [label=""Try""];
""132_newQuestioner"" [label=""newQuestioner""];
}
"
0x35d76c3db8e826907d2a977500b54b3914ecc020.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_784_RefundVault {
label=""RefundVault"";
""784_refund"" [label=""refund""];
""784_RefundVault"" [label=""RefundVault""];
""784_enableRefunds"" [label=""enableRefunds""];
""784_deposit"" [label=""deposit""];
""784_close"" [label=""close""];
""784_enableRefunds"" -> ""784_onlyOwner"";
""784_close"" -> ""784_onlyOwner"";
""784_deposit"" -> ""784_onlyOwner"";
}
"
0x1bd4e709a076fb71ea1014293a739f2b19ca565d.sol,Labtorum,"contract Labtorum is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 50 * 1 days; uint public presaledeadline = now + 15 * 1 days; uint256 public totalSupply = 3000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 500; uint256 public tokensPerEth = 300000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1182_Labtorum {
label=""Labtorum"";
""1182_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1182_getTokens"" [label=""getTokens""];
""1182_finishDistribution"" [label=""finishDistribution""];
""1182_distr"" [label=""distr""];
""1182_withdrawAll"" [label=""withdrawAll""];
""1182_transferOwnership"" [label=""transferOwnership""];
""1182_transferFrom"" [label=""transferFrom""];
""1182_getTokenBalance"" [label=""getTokenBalance""];
""1182_balanceOf"" [label=""balanceOf""];
""1182_transfer"" [label=""transfer""];
""1182_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1182_allowance"" [label=""allowance""];
""1182_fallback"" [label=""fallback""];
""1182_Distribute"" [label=""Distribute""];
""1182_approve"" [label=""approve""];
""1182_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1182_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1182_burn"" [label=""burn""];
""1182_withdraw"" [label=""withdraw""];
""1182_Distribute"" -> ""1182_onlyOwner"";
""1182_fallback"" -> ""1182_getTokens"";
""1182_DistributeAirdropMultiple"" -> ""1182_onlyOwner"";
""1182_DistributeAirdropMultiple"" -> ""1182_Distribute"";
""1182_DistributeAirdrop"" -> ""1182_onlyOwner"";
""1182_transferOwnership"" -> ""1182_onlyOwner"";
""1182_withdrawAll"" -> ""1182_onlyOwner"";
""1182_updateTokensPerEth"" -> ""1182_onlyOwner"";
""1182_finishDistribution"" -> ""1182_canDistr"";
""1182_withdraw"" -> ""1182_onlyOwner"";
""1182_finishDistribution"" -> ""1182_onlyOwner"";
""1182_distr"" -> ""1182_canDistr"";
""1182_transferFrom"" -> ""1182_onlyPayloadSize"";
""1182_getTokens"" -> ""1182_canDistr"";
""1182_DistributeAirdrop"" -> ""1182_Distribute"";
""1182_getTokens"" -> ""1182_distr"";
""1182_transfer"" -> ""1182_onlyPayloadSize"";
""1182_burn"" -> ""1182_onlyOwner"";
""1182_withdrawForeignTokens"" -> ""1182_onlyOwner"";
}
"
0x1bb0a576936bce5d983e676073ac48ba49f12e05.sol,PullPayment,"contract PullPayment { using SafeMath for uint; mapping(address => uint) public payments; event LogRefundETH(address to, uint value); function asyncSend(address dest, uint amount) internal { payments[dest] = payments[dest].add(amount); }",1,"subgraph cluster_417_PullPayment {
label=""PullPayment"";
""417_withdrawPayments"" [label=""withdrawPayments""];
""417_asyncSend"" [label=""asyncSend""];
}
"
0x447b4ccab1b370afbe5ae2e68c0b700be913a585.sol,AgileCycle,contract AgileCycle { using SafeMath for uint; address public operator; address public juryOperator; uint public promisedTokens; uint public raisedEther; bool public tokenReleaseAtStart; address public icoAddress; address public arbitrationAddress; bool public roundFailedToStart; address public projectWallet; address public juryOnlineWallet; struct Milestone { uint etherAmount; uint tokenAmount; uint startTime; uint finishTime; uint duration; string description; string result; },1,"subgraph cluster_3174_AgileCycle {
label=""AgileCycle"";
""3174_currentMilestone"" [label=""currentMilestone""];
""3174_assignPartition"" [label=""assignPartition""];
""3174_withdrawToken"" [label=""withdrawToken""];
""3174_finishedTimeStamp"" [label=""finishedTimeStamp""];
""3174_approveCycle"" [label=""approveCycle""];
""3174_sealTimestamp"" [label=""sealTimestamp""];
""3174_milestonesLength"" [label=""milestonesLength""];
""3174_editMilestone"" [label=""editMilestone""];
""3174_addMilestonesAndSeal"" [label=""addMilestonesAndSeal""];
""3174_payCommission"" [label=""payCommission""];
""3174_seal"" [label=""seal""];
""3174_addMilestone"" [label=""addMilestone""];
""3174_failSafe"" [label=""failSafe""];
""3174_startMilestone"" [label=""startMilestone""];
""3174_setToken"" [label=""setToken""];
""3174_disputeOpened"" [label=""disputeOpened""];
""3174_offerAccepted"" [label=""offerAccepted""];
""3174_promisedTokens"" [label=""promisedTokens""];
""3174_finishMilestone"" [label=""finishMilestone""];
""3174_withdrawEther"" [label=""withdrawEther""];
""3174_constructor"" [label=""constructor""];
""3174_investorExists"" [label=""investorExists""];
""3174_verdictExecuted"" [label=""verdictExecuted""];
""3174_addMilestone"" -> ""3174_only"";
""3174_startMilestone"" -> ""3174_payCommission"";
""3174_disputeOpened"" -> ""3174_only"";
""3174_startMilestone"" -> ""3174_sealed"";
""3174_setToken"" -> ""3174_only"";
""3174_offerAccepted"" -> ""3174_assignPartition"";
""3174_seal"" -> ""3174_only"";
""3174_addMilestonesAndSeal"" -> ""3174_only"";
""3174_addMilestonesAndSeal"" -> ""3174_notSealed"";
""3174_startMilestone"" -> ""3174_only"";
""3174_editMilestone"" -> ""3174_only"";
""3174_finishMilestone"" -> ""3174_only"";
""3174_seal"" -> ""3174_notSealed"";
""3174_verdictExecuted"" -> ""3174_only"";
""3174_addMilestone"" -> ""3174_notSealed"";
""3174_editMilestone"" -> ""3174_notSealed"";
""3174_offerAccepted"" -> ""3174_only"";
}
"
0x70bf9df6967dc96156e76cc43b928a7ef02e159a.sol,X_GAME,contract X_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_X_GAME {
label=""X_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_StopGame"" [label=""StopGame""];
}
"
0xe01ba6c593003b0edcd43b7839a7c36b00a44dfc.sol,SBITokenCrowdsale,"contract SBITokenCrowdsale is Owned, CrowdsaleParameters { using SafeMath for uint256; string public name = ; SBIToken private token; address public bank; address saleWalletAddress; uint private tokenMultiplier = 10; uint public totalCollected = 0; uint public saleStartTimestamp; uint public saleStopTimestamp; uint public saleGoal; bool public goalReached = false; uint public preicoTokensPerEth = 27314; uint public tokensPerEth = 10500; mapping (address => uint256) private investmentRecords; address crowdsaleAddress = this; uint256 public constant saleStartDate = 1530403200; uint256 public constant saleEndDate = 1535759940; uint256 public constant preSaleStartDate = 1529020800; uint256 public constant preSaleEndDate = 1530403140; uint public preSaleAmount = 5800000; event TokenSale(address indexed tokenReceiver, uint indexed etherAmount, uint indexed tokenAmount, uint tokensPerEther); event FundTransfer(address indexed from, address indexed to, uint indexed amount); function SBITokenCrowdsale(address _tokenAddress, address _bankAddress) public { token = SBIToken(_tokenAddress); bank = _bankAddress; tokenMultiplier = tokenMultiplier ** token.decimals(); saleWalletAddress = generalSaleWallet.addr; saleGoal = generalSaleWallet.amount; }",1,"subgraph cluster_1145_SBITokenCrowdsale {
label=""SBITokenCrowdsale"";
""1145_processPayment"" [label=""processPayment""];
""1145_SBITokenCrowdsale"" [label=""SBITokenCrowdsale""];
""1145_isICOActive"" [label=""isICOActive""];
""1145_fallback"" [label=""fallback""];
""1145_setTokenRate"" [label=""setTokenRate""];
""1145_safeWithdrawal"" [label=""safeWithdrawal""];
""1145_kill"" [label=""kill""];
""1145_processPayment"" -> ""1145_isICOActive"";
""1145_kill"" -> ""1145_onlyOwner"";
""1145_fallback"" -> ""1145_processPayment"";
""1145_safeWithdrawal"" -> ""1145_onlyOwner"";
""1145_kill"" -> ""1145_isICOActive"";
""1145_setTokenRate"" -> ""1145_onlyOwner"";
}
"
0xeafd8b734e32aec64c4b445e9da401427ef63a3a.sol,CryptoBossWannaCry,contract CryptoBossWannaCry is PullPayment{ bool init = false; address public administrator; uint256 public bossRoundNumber; uint256 private randNonce; uint256 constant public BOSS_HP_DEFAULT = 100000; uint256 public HALF_TIME_ATK_BOSS = 0; uint256 constant public VIRUS_MINING_PERIOD = 86400; uint256 public BOSS_DEF_DEFFAULT = 0; CryptoEngineerInterface public EngineerContract; CryptoMiningWarInterface public MiningwarContract; mapping(address => PlayerData) public players; mapping(uint256 => BossData) public bossData; struct PlayerData { uint256 currentBossRoundNumber; uint256 lastBossRoundNumber; uint256 win; uint256 share; uint256 dame; uint256 nextTimeAtk; },1,"subgraph cluster_1110_CryptoBossWannaCry {
label=""CryptoBossWannaCry"";
""1110_upgrade"" [label=""upgrade""];
""1110_fallback"" [label=""fallback""];
""1110_atkBoss"" [label=""atkBoss""];
""1110_startNewBoss"" [label=""startNewBoss""];
""1110_calculateShareETH"" [label=""calculateShareETH""];
""1110_isContractMiniGame"" [label=""isContractMiniGame""];
""1110_devFee"" [label=""devFee""];
""1110_randomNumber"" [label=""randomNumber""];
""1110_setDefenceBoss"" [label=""setDefenceBoss""];
""1110_setHalfTimeAtkBoss"" [label=""setHalfTimeAtkBoss""];
""1110_startGame"" [label=""startGame""];
""1110_getEngineerCurrentVirus"" [label=""getEngineerCurrentVirus""];
""1110_updateShareETH"" [label=""updateShareETH""];
""1110_constructor"" [label=""constructor""];
""1110_getEngineerPrizePool"" [label=""getEngineerPrizePool""];
""1110_withdrawReward"" [label=""withdrawReward""];
""1110_endAtkBoss"" [label=""endAtkBoss""];
""1110_setupMiniGame"" [label=""setupMiniGame""];
""1110_atkBoss"" -> ""1110_updateShareETH"";
""1110_atkBoss"" -> ""1110_endAtkBoss"";
""1110_withdrawReward"" -> ""1110_disableContract"";
""1110_withdrawReward"" -> ""1110_updateShareETH"";
""1110_atkBoss"" -> ""1110_randomNumber"";
""1110_atkBoss"" -> ""1110_getEngineerCurrentVirus"";
""1110_startGame"" -> ""1110_isAdministrator"";
""1110_setDefenceBoss"" -> ""1110_isAdministrator"";
""1110_startNewBoss"" -> ""1110_getEngineerPrizePool"";
""1110_startGame"" -> ""1110_startNewBoss"";
""1110_updateShareETH"" -> ""1110_calculateShareETH"";
""1110_endAtkBoss"" -> ""1110_startNewBoss"";
""1110_atkBoss"" -> ""1110_disableContract"";
""1110_setHalfTimeAtkBoss"" -> ""1110_isAdministrator"";
}
"
0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol,Token,"contract Token is ERC20, Stoppable { bytes32 public symbol; string public name; uint256 public decimals = 18; TokenLogic public logic; function Token(string name_, bytes32 symbol_) { name = name_; symbol = symbol_; }",1,"subgraph cluster_1370_Token {
label=""Token"";
""1370_payout"" [label=""payout""];
""1370_totalSupply"" [label=""totalSupply""];
""1370_setLogic"" [label=""setLogic""];
""1370_mint"" [label=""mint""];
""1370_transferEth"" [label=""transferEth""];
""1370_setSymbol"" [label=""setSymbol""];
""1370_setOwner"" [label=""setOwner""];
""1370_fallback"" [label=""fallback""];
""1370_setName"" [label=""setName""];
""1370_balanceOf"" [label=""balanceOf""];
""1370_burn"" [label=""burn""];
""1370_approve"" [label=""approve""];
""1370_transferFrom"" [label=""transferFrom""];
""1370_push"" [label=""push""];
""1370_transfer"" [label=""transfer""];
""1370_Token"" [label=""Token""];
""1370_allowance"" [label=""allowance""];
""1370_pull"" [label=""pull""];
""1370_triggerTansferEvent"" [label=""triggerTansferEvent""];
""1370_burn"" -> ""1370_auth"";
""1370_burn"" -> ""1370_note"";
""1370_transfer"" -> ""1370_note"";
""1370_pull"" -> ""1370_transferFrom"";
""1370_transfer"" -> ""1370_stoppable"";
""1370_setName"" -> ""1370_auth"";
""1370_mint"" -> ""1370_stoppable"";
""1370_mint"" -> ""1370_auth"";
""1370_setOwner"" -> ""1370_auth"";
""1370_burn"" -> ""1370_stoppable"";
""1370_approve"" -> ""1370_note"";
""1370_push"" -> ""1370_transfer"";
""1370_setOwner"" -> ""1370_setOwner"";
""1370_approve"" -> ""1370_stoppable"";
""1370_setSymbol"" -> ""1370_auth"";
""1370_mint"" -> ""1370_note"";
""1370_transferFrom"" -> ""1370_stoppable"";
""1370_payout"" -> ""1370_auth"";
""1370_transferFrom"" -> ""1370_note"";
""1370_setLogic"" -> ""1370_auth"";
""1370_setLogic"" -> ""1370_note"";
""1370_setOwner"" -> ""1370_balanceOf"";
}
"
0x7275f61c3abfba3596ae71f7128bdc3b0fc01fa9.sol,SignalsSociety,"contract SignalsSociety is Ownable, Memberships { event Deposited(address account, uint amount, uint balance, uint timestamp); event MembershipPaid(address account, Membership membership, uint timestamp); mapping (address => uint) public balances; function withdraw(address user) public { require(user == msg.sender); uint amount = balances[user]; balances[user] = 0; user.transfer(amount); }",1,"subgraph cluster_289_SignalsSociety {
label=""SignalsSociety"";
""289_fallback"" [label=""fallback""];
""289_deposit"" [label=""deposit""];
""289_withdraw"" [label=""withdraw""];
""289_acceptMembership"" [label=""acceptMembership""];
""289_fallback"" -> ""289_deposit"";
""289_acceptMembership"" -> ""289_onlyBot"";
""289_acceptMembership"" -> ""289_getMembershipPrice"";
}
"
0x03347abb58cc3071fdbba7f7bd7cca03c8e04229.sol,CompanyShare,contract CompanyShare { using SafeMath for *; mapping (address => uint256) public pIDxAddr_; mapping (uint256 => CompanySharedatasets.Player) public team_; modifier isHuman() { address _addr = msg.sender; uint256 _codeLength; assembly {_codeLength := extcodesize(_addr)},1,"subgraph cluster_371_CompanyShare {
label=""CompanyShare"";
""371_withdraw"" [label=""withdraw""];
""371_constructor"" [label=""constructor""];
""371_getGen"" [label=""getGen""];
""371_withdrawEarnings"" [label=""withdrawEarnings""];
""371_giveGen"" [label=""giveGen""];
""371_fallback"" [label=""fallback""];
""371_destroy"" [label=""destroy""];
""371_deposit"" [label=""deposit""];
""371_fallback"" -> ""371_giveGen"";
""371_withdraw"" -> ""371_isHuman"";
""371_withdraw"" -> ""371_withdrawEarnings"";
""371_deposit"" -> ""371_giveGen"";
}
"
0x0de197dc289d680e734ccab866d529505b2638db.sol,CryptoMiningWar,contract CryptoMiningWar is PullPayment { bool public initialized = false; uint256 public roundNumber = 0; uint256 public deadline; uint256 public CRTSTAL_MINING_PERIOD = 86400; uint256 public HALF_TIME = 8 hours; uint256 public ROUND_TIME = 86400 * 7; uint256 public prizePool = 0; uint256 BASE_PRICE = 0.005 ether; uint256 RANK_LIST_LIMIT = 10000; uint256 MINIMUM_LIMIT_SELL = 5000000; uint256 randNonce = 0; mapping(uint256 => MinerData) private minerData; uint256 private numberOfMiners; mapping(address => PlayerData) private players; uint256 private numberOfBoosts; mapping(uint256 => BoostData) private boostData; uint256 private numberOfOrders; mapping(uint256 => BuyOrderData) private buyOrderData; mapping(uint256 => SellOrderData) private sellOrderData; uint256 private numberOfRank; address[21] rankList; address public sponsor; uint256 public sponsorLevel; address public administrator; struct PlayerData { uint256 roundNumber; mapping(uint256 => uint256) minerCount; uint256 hashrate; uint256 crystals; uint256 lastUpdateTime; uint256 referral_count; uint256 noQuest; },1,"subgraph cluster_3300_CryptoMiningWar {
label=""CryptoMiningWar"";
""3300_getBalance"" [label=""getBalance""];
""3300_sellCrystal"" [label=""sellCrystal""];
""3300_updateHashrate"" [label=""updateHashrate""];
""3300_quickSort"" [label=""quickSort""];
""3300_getBuyDemand"" [label=""getBuyDemand""];
""3300_getCurrentLevel"" [label=""getCurrentLevel""];
""3300_updateRankList"" [label=""updateRankList""];
""3300_becomeSponsor"" [label=""becomeSponsor""];
""3300_startGame"" [label=""startGame""];
""3300_updateCrytal"" [label=""updateCrytal""];
""3300_getFreeMiner"" [label=""getFreeMiner""];
""3300_getRankList"" [label=""getRankList""];
""3300_getLowestUnitPriceIdxFromBuy"" [label=""getLowestUnitPriceIdxFromBuy""];
""3300_buyCrystal"" [label=""buyCrystal""];
""3300_getPlayerData"" [label=""getPlayerData""];
""3300_sellCrystalDemand"" [label=""sellCrystalDemand""];
""3300_withdrawBuyDemand"" [label=""withdrawBuyDemand""];
""3300_getSponsorFee"" [label=""getSponsorFee""];
""3300_getBoosterPrice"" [label=""getBoosterPrice""];
""3300_inRankList"" [label=""inRankList""];
""3300_addReferralHashrate"" [label=""addReferralHashrate""];
""3300_lottery"" [label=""lottery""];
""3300_devFee"" [label=""devFee""];
""3300_getHashratePerDay"" [label=""getHashratePerDay""];
""3300_getCurrentPrice"" [label=""getCurrentPrice""];
""3300_hasBooster"" [label=""hasBooster""];
""3300_doQuest"" [label=""doQuest""];
""3300_initData"" [label=""initData""];
""3300_buyMiner"" [label=""buyMiner""];
""3300_getBoosterData"" [label=""getBoosterData""];
""3300_buyCrystalDemand"" [label=""buyCrystalDemand""];
""3300_constructor"" [label=""constructor""];
""3300_getHighestUnitPriceIdxFromSell"" [label=""getHighestUnitPriceIdxFromSell""];
""3300_startNewRound"" [label=""startNewRound""];
""3300_getSellDemand"" [label=""getSellDemand""];
""3300_upgrade"" [label=""upgrade""];
""3300_getRandomNumber"" [label=""getRandomNumber""];
""3300_buyBooster"" [label=""buyBooster""];
""3300_fallback"" [label=""fallback""];
""3300_withdrawSellDemand"" [label=""withdrawSellDemand""];
""3300_withdrawBuyDemand"" -> ""3300_isNotOver"";
""3300_buyMiner"" -> ""3300_updateCrytal"";
""3300_sellCrystal"" -> ""3300_devFee"";
""3300_lottery"" -> ""3300_asyncSend"";
""3300_getPlayerData"" -> ""3300_hasBooster"";
""3300_buyBooster"" -> ""3300_isNotOver"";
""3300_sellCrystal"" -> ""3300_isCurrentRound"";
""3300_doQuest"" -> ""3300_isCurrentRound"";
""3300_buyCrystalDemand"" -> ""3300_getLowestUnitPriceIdxFromBuy"";
""3300_getHashratePerDay"" -> ""3300_addReferralHashrate"";
""3300_lottery"" -> ""3300_startNewRound"";
""3300_withdrawSellDemand"" -> ""3300_isNotOver"";
""3300_buyBooster"" -> ""3300_getCurrentLevel"";
""3300_updateRankList"" -> ""3300_quickSort"";
""3300_buyMiner"" -> ""3300_isNotOver"";
""3300_sellCrystalDemand"" -> ""3300_limitSell"";
""3300_buyCrystalDemand"" -> ""3300_asyncSend"";
""3300_startGame"" -> ""3300_startNewRound"";
""3300_sellCrystalDemand"" -> ""3300_isCurrentRound"";
""3300_becomeSponsor"" -> ""3300_getCurrentPrice"";
""3300_sellCrystal"" -> ""3300_asyncSend"";
""3300_buyMiner"" -> ""3300_isCurrentRound"";
""3300_sellCrystalDemand"" -> ""3300_isNotOver"";
""3300_getSponsorFee"" -> ""3300_getCurrentPrice"";
""3300_getBoosterData"" -> ""3300_getBoosterPrice"";
""3300_getFreeMiner"" -> ""3300_disableContract"";
""3300_getFreeMiner"" -> ""3300_isNotOver"";
""3300_getBoosterPrice"" -> ""3300_getCurrentPrice"";
""3300_buyBooster"" -> ""3300_updateCrytal"";
""3300_getHashratePerDay"" -> ""3300_hasBooster"";
""3300_getBoosterPrice"" -> ""3300_getCurrentLevel"";
""3300_withdrawBuyDemand"" -> ""3300_isCurrentRound"";
""3300_doQuest"" -> ""3300_disableContract"";
""3300_buyCrystalDemand"" -> ""3300_isNotOver"";
""3300_buyBooster"" -> ""3300_isCurrentRound"";
""3300_lottery"" -> ""3300_disableContract"";
""3300_updateRankList"" -> ""3300_inRankList"";
""3300_getPlayerData"" -> ""3300_addReferralHashrate"";
""3300_sellCrystal"" -> ""3300_isNotOver"";
""3300_buyCrystalDemand"" -> ""3300_isCurrentRound"";
""3300_withdrawSellDemand"" -> ""3300_isCurrentRound"";
""3300_buyMiner"" -> ""3300_updateHashrate"";
""3300_becomeSponsor"" -> ""3300_getSponsorFee"";
""3300_updateHashrate"" -> ""3300_updateRankList"";
""3300_quickSort"" -> ""3300_quickSort"";
""3300_buyBooster"" -> ""3300_devFee"";
""3300_buyBooster"" -> ""3300_getBoosterPrice"";
""3300_sellCrystal"" -> ""3300_updateCrytal"";
""3300_startNewRound"" -> ""3300_initData"";
""3300_doQuest"" -> ""3300_getRandomNumber"";
""3300_buyCrystal"" -> ""3300_asyncSend"";
""3300_becomeSponsor"" -> ""3300_isNotOver"";
""3300_sellCrystalDemand"" -> ""3300_getHighestUnitPriceIdxFromSell"";
""3300_sellCrystal"" -> ""3300_limitSell"";
""3300_sellCrystalDemand"" -> ""3300_updateCrytal"";
""3300_withdrawBuyDemand"" -> ""3300_asyncSend"";
""3300_updateCrytal"" -> ""3300_getHashratePerDay"";
""3300_becomeSponsor"" -> ""3300_asyncSend"";
""3300_buyCrystal"" -> ""3300_devFee"";
""3300_buyCrystal"" -> ""3300_isCurrentRound"";
""3300_buyCrystal"" -> ""3300_isNotOver"";
""3300_buyBooster"" -> ""3300_asyncSend"";
""3300_doQuest"" -> ""3300_isNotOver"";
}
"
0x5cac5ac21b93095490f736205df600fb4449aee1.sol,FazBitsCrowdsale,"contract FazBitsCrowdsale { uint public amountRaised; uint public resAmount; uint public soldTokens; mapping(address => uint256) public balanceOf; event GoalReached(address beneficiary, uint amountRaised); event FundTransfer(address backer, uint amount, bool isContribution); bool public crowdsaleClosed = false; bool public minimumTargetReached = false; address public beneficiary = 0x89464d51Af1C6edb2E116c28798C9A06e574d299; uint public price = 0.0015 ether; uint public minimumTarget = 100 * price; uint public maximumTarget = 250000 * price; uint public deadline = now + 10080 * 1 minutes; token public tokenReward = token(0xD8a19038Ca6d75227Ad5a5d7ec335a111ad6E141); function () payable { if (crowdsaleClosed || (maximumTarget - amountRaised) < msg.value) throw; uint amount = msg.value; balanceOf[msg.sender] += amount; amountRaised += amount; resAmount += amount; soldTokens += amount / price; tokenReward.transfer(msg.sender, amount / price); FundTransfer(msg.sender, amount, true); if (amountRaised >= minimumTarget && !minimumTargetReached) { minimumTargetReached = true; GoalReached(beneficiary, minimumTarget); }",1,"subgraph cluster_348_FazBitsCrowdsale {
label=""FazBitsCrowdsale"";
""348_returnTokens"" [label=""returnTokens""];
""348_safeWithdrawal"" [label=""safeWithdrawal""];
""348_fallback"" [label=""fallback""];
""348_closeCrowdsale"" [label=""closeCrowdsale""];
""348_devResWithdrawal"" [label=""devResWithdrawal""];
""348_checkTargetReached"" [label=""checkTargetReached""];
""348_devWithdrawal"" [label=""devWithdrawal""];
""348_safeWithdrawal"" -> ""348_afterDeadline"";
""348_checkTargetReached"" -> ""348_afterDeadline"";
""348_returnTokens"" -> ""348_afterDeadline"";
}
"
0xf2d54d17d3dc3810a0d62042a0b381df122ed162.sol,BeercoinICO,"contract BeercoinICO is GuardedBeercoinICO { Beercoin internal beercoin = Beercoin(0x7367A68039d4704f30BfBF6d948020C3B07DFC59); uint public constant price = 0.000006 ether; uint public constant softCap = 48 ether; uint public constant begin = 1526637600; uint public constant end = 1530395999; event FundTransfer(address backer, uint amount, bool isContribution); mapping(address => uint256) public balanceOf; uint public soldBeercoins = 0; uint public raisedEther = 0 ether; bool public paused = false; modifier isOpen { require(now >= begin && now <= end && !paused); _; }",1,"subgraph cluster_483_BeercoinICO {
label=""BeercoinICO"";
""483_withdraw"" [label=""withdraw""];
""483_transfer"" [label=""transfer""];
""483_pause"" [label=""pause""];
""483_resume"" [label=""resume""];
""483_fallback"" [label=""fallback""];
""483_claimFunds"" [label=""claimFunds""];
""483_claimBeercoins"" [label=""claimBeercoins""];
""483_fallback"" -> ""483_isOpen"";
""483_resume"" -> ""483_onlyOwner"";
""483_claimFunds"" -> ""483_goalReached"";
""483_transfer"" -> ""483_isOpen"";
""483_pause"" -> ""483_onlyOwner"";
""483_transfer"" -> ""483_onlyOwner"";
""483_claimFunds"" -> ""483_onlyOwner"";
""483_withdraw"" -> ""483_goalNotReached"";
""483_claimBeercoins"" -> ""483_onlyOwner"";
}
"
0xf17a9ad24372faaa27f0bb684e13413a3de84c4b.sol,SmokeCoinV_2,"contract SmokeCoinV_2 is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 200 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 150 * 1 days; uint256 public totalSupply = 754654e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 22220000000; uint public target0drop = 4222; uint public progress0drop = 0; address multisig = 0xb7Ef2B8514A27bf63e8F5397Fd6DBDCa95809883; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_SmokeCoinV_2 {
label=""SmokeCoinV_2"";
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_getTokens"" [label=""getTokens""];
""1263_transfer"" [label=""transfer""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_burn"" [label=""burn""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_constructor"" [label=""constructor""];
""1263_Distribute"" [label=""Distribute""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_approve"" [label=""approve""];
""1263_fallback"" [label=""fallback""];
""1263_allowance"" [label=""allowance""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_withdraw"" [label=""withdraw""];
""1263_add"" [label=""add""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_distr"" [label=""distr""];
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_getTokens"" -> ""1263_distr"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_constructor"" -> ""1263_distr"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
}
"
0x36cce24d6314445c11beb80f99f9f14b5ea9ecc2.sol,LynchpinPrivateICO,contract LynchpinPrivateICO is Ownable(0x1788A2Fe89a3Bfa58DB57aabbf1Ffa08ADED6cba) { using SafeMath for uint256; LynchpinToken public lynT = LynchpinToken(0xB0B1685f55843D03739c7D9b0A230F1B7DcF03D5); address public beneficiary = 0x1788A2Fe89a3Bfa58DB57aabbf1Ffa08ADED6cba; uint256 public tokeninOneEther; uint256 public maxTokensToSell = 2000000 * 10**18; uint256 public tokenSold; bool crowdsaleClosed = false; uint256 LOCK_PERIOD_START = 1556668800; uint256 LOCK_PERIOD_9_MONTH = 1580515200; uint256 LOCK_PERIOD_10_MONTH = 1583020800; uint256 LOCK_PERIOD_11_MONTH = 1585699200; uint256 LOCK_PERIOD_END = 1588291200; mapping(address => uint256) public tokensOwed; mapping(address => uint256) public ethContribution; mapping(address => bool) public isWhitelisted; event LogAddedToWhitelist(address indexed _contributor); event LogTokenRateUpdated(uint256 _newRate); event LogSaleClosed(); constructor(uint256 _tokeninOneEther) public { require (_tokeninOneEther > 0); isWhitelisted[owner] = true; tokeninOneEther = _tokeninOneEther; emit LogTokenRateUpdated(_tokeninOneEther); },1,"subgraph cluster_831_LynchpinPrivateICO {
label=""LynchpinPrivateICO"";
""831_withdrawMyTokens"" [label=""withdrawMyTokens""];
""831_constructor"" [label=""constructor""];
""831_fallback"" [label=""fallback""];
""831_closeSale"" [label=""closeSale""];
""831_updateTokenRate"" [label=""updateTokenRate""];
""831_addContributor"" [label=""addContributor""];
""831_withdrawPenaltyTokens"" [label=""withdrawPenaltyTokens""];
""831_addContributor"" -> ""831_onlyOwner"";
""831_withdrawPenaltyTokens"" -> ""831_onlyOwner"";
""831_closeSale"" -> ""831_onlyOwner"";
""831_updateTokenRate"" -> ""831_onlyOwner"";
}
"
0xe34cae5cdc42afd4c68727a936908918b5faa675.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1100_MiniMeToken {
label=""MiniMeToken"";
""1100_generateTokens"" [label=""generateTokens""];
""1100_approveAndCall"" [label=""approveAndCall""];
""1100_destroyTokens"" [label=""destroyTokens""];
""1100_balanceOf"" [label=""balanceOf""];
""1100_allowance"" [label=""allowance""];
""1100_transfer"" [label=""transfer""];
""1100_MiniMeToken"" [label=""MiniMeToken""];
""1100_balanceOfAt"" [label=""balanceOfAt""];
""1100_updateValueAtNow"" [label=""updateValueAtNow""];
""1100_claimTokens"" [label=""claimTokens""];
""1100_isContract"" [label=""isContract""];
""1100_transferFrom"" [label=""transferFrom""];
""1100_getValueAt"" [label=""getValueAt""];
""1100_doTransfer"" [label=""doTransfer""];
""1100_totalSupply"" [label=""totalSupply""];
""1100_approve"" [label=""approve""];
""1100_totalSupplyAt"" [label=""totalSupplyAt""];
""1100_enableTransfers"" [label=""enableTransfers""];
""1100_min"" [label=""min""];
""1100_fallback"" [label=""fallback""];
""1100_createCloneToken"" [label=""createCloneToken""];
""1100_transfer"" -> ""1100_doTransfer"";
""1100_enableTransfers"" -> ""1100_onlyController"";
""1100_balanceOfAt"" -> ""1100_min"";
""1100_generateTokens"" -> ""1100_onlyController"";
""1100_generateTokens"" -> ""1100_updateValueAtNow"";
""1100_destroyTokens"" -> ""1100_balanceOf"";
""1100_destroyTokens"" -> ""1100_updateValueAtNow"";
""1100_doTransfer"" -> ""1100_updateValueAtNow"";
""1100_totalSupplyAt"" -> ""1100_getValueAt"";
""1100_totalSupplyAt"" -> ""1100_min"";
""1100_generateTokens"" -> ""1100_balanceOf"";
""1100_approveAndCall"" -> ""1100_approve"";
""1100_fallback"" -> ""1100_isContract"";
""1100_approve"" -> ""1100_isContract"";
""1100_transferFrom"" -> ""1100_doTransfer"";
""1100_totalSupply"" -> ""1100_totalSupplyAt"";
""1100_claimTokens"" -> ""1100_onlyController"";
""1100_doTransfer"" -> ""1100_isContract"";
""1100_balanceOfAt"" -> ""1100_getValueAt"";
""1100_destroyTokens"" -> ""1100_totalSupply"";
""1100_balanceOf"" -> ""1100_balanceOfAt"";
""1100_destroyTokens"" -> ""1100_onlyController"";
""1100_generateTokens"" -> ""1100_totalSupply"";
""1100_doTransfer"" -> ""1100_balanceOfAt"";
}
"
0x708a64eba17df26cd7085c494b725160ba1a6b7d.sol,ConditionalEscrow,contract ConditionalEscrow is Escrow { function withdrawalAllowed(address _payee) public view returns (bool); function withdraw(address _payee) public { require(withdrawalAllowed(_payee)); super.withdraw(_payee); },1,"subgraph cluster_2092_ConditionalEscrow {
label=""ConditionalEscrow"";
""2092_withdrawalAllowed"" [label=""withdrawalAllowed""];
""2092_withdraw"" [label=""withdraw""];
""2092_withdraw"" -> ""2092_withdraw"";
""2092_withdraw"" -> ""2092_withdrawalAllowed"";
}
"
0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_2222_RefundVault {
label=""RefundVault"";
""2222_refund"" [label=""refund""];
""2222_enableRefunds"" [label=""enableRefunds""];
""2222_deposit"" [label=""deposit""];
""2222_close"" [label=""close""];
""2222_RefundVault"" [label=""RefundVault""];
""2222_deposit"" -> ""2222_onlyOwner"";
""2222_close"" -> ""2222_onlyOwner"";
""2222_enableRefunds"" -> ""2222_onlyOwner"";
}
"
0x6b9c8c4e246f43cac225a64aee0c50434e61d7a4.sol,Equio,"contract Equio { mapping (address => uint256) public balances; bool public bought_tokens; uint256 public time_bought; uint256 public contract_eth_value; bool public kill_switch; address public creator; string name; address public sale; ERC20 public token; bytes32 password_hash; uint256 earliest_buy_block; uint256 earliest_buy_time; function Equio( string _name, address _sale, address _token, bytes32 _password_hash, uint256 _earliest_buy_block, uint256 _earliest_buy_time ) payable { creator = msg.sender; name = _name; sale = _sale; token = ERC20(_token); password_hash = _password_hash; earliest_buy_block = _earliest_buy_block; earliest_buy_time = _earliest_buy_time; }",1,"subgraph cluster_332_EquioGenesis {
label=""EquioGenesis"";
""332_generate"" [label=""generate""];
}
"
0xf3cb4203e10f205c6bc91d8b0974eee520af6412.sol,D_Quiz,contract D_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_D_Quiz {
label=""D_Quiz"";
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x64d581770b541b5609140232fc12f47bbe0fe6bc.sol,MonetoSale,"contract MonetoSale { Moneto public token; address public beneficiary; address public alfatokenteam; uint public alfatokenFee; uint public amountRaised; uint public tokenSold; uint public constant PRE_SALE_START = 1523952000; uint public constant PRE_SALE_END = 1526543999; uint public constant SALE_START = 1528617600; uint public constant SALE_END = 1531209599; uint public constant PRE_SALE_MAX_CAP = 2531250 * 10**18; uint public constant SALE_MAX_CAP = 300312502 * 10**17; uint public constant SALE_MIN_CAP = 2500 ether; uint public constant PRE_SALE_PRICE = 1250; uint public constant SALE_PRICE = 1000; uint public constant PRE_SALE_MIN_BUY = 10 * 10**18; uint public constant SALE_MIN_BUY = 1 * 10**18; uint public constant PRE_SALE_1WEEK_BONUS = 35; uint public constant PRE_SALE_2WEEK_BONUS = 15; uint public constant PRE_SALE_3WEEK_BONUS = 5; uint public constant PRE_SALE_4WEEK_BONUS = 0; uint public constant SALE_1WEEK_BONUS = 10; uint public constant SALE_2WEEK_BONUS = 7; uint public constant SALE_3WEEK_BONUS = 5; uint public constant SALE_4WEEK_BONUS = 3; mapping (address => uint) public icoBuyers; Stages public stage; enum Stages { Deployed, Ready, Ended, Canceled }",1,"subgraph cluster_1216_MonetoSale {
label=""MonetoSale"";
""1216_endSale"" [label=""endSale""];
""1216_transferEther"" [label=""transferEther""];
""1216_takeEtherBack"" [label=""takeEtherBack""];
""1216_cancelSale"" [label=""cancelSale""];
""1216_setup"" [label=""setup""];
""1216_getPrice"" [label=""getPrice""];
""1216_fallback"" [label=""fallback""];
""1216_proxyTakeEtherBack"" [label=""proxyTakeEtherBack""];
""1216_getMinimumAmount"" [label=""getMinimumAmount""];
""1216_getBonus"" [label=""getBonus""];
""1216_MonetoSale"" [label=""MonetoSale""];
""1216_transferFee"" [label=""transferFee""];
""1216_setup"" -> ""1216_isOwner"";
""1216_proxyTakeEtherBack"" -> ""1216_atStage"";
""1216_takeEtherBack"" -> ""1216_atStage"";
""1216_setup"" -> ""1216_atStage"";
""1216_transferEther"" -> ""1216_isOwner"";
""1216_fallback"" -> ""1216_getMinimumAmount"";
""1216_fallback"" -> ""1216_atStage"";
""1216_takeEtherBack"" -> ""1216_proxyTakeEtherBack"";
""1216_endSale"" -> ""1216_isOwner"";
""1216_fallback"" -> ""1216_getPrice"";
""1216_fallback"" -> ""1216_getBonus"";
}
"
0xd0d6b03cb90ec013c6a00ff60e30c3a350c1df94.sol,NamiMultiSigWallet,"contract NamiMultiSigWallet { uint constant public MAX_OWNER_COUNT = 50; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1149_NamiMultiSigWallet {
label=""NamiMultiSigWallet"";
""1149_confirmTransaction"" [label=""confirmTransaction""];
""1149_isOwner"" [label=""isOwner""];
""1149_changeRequirement"" [label=""changeRequirement""];
""1149_executeTransaction"" [label=""executeTransaction""];
""1149_isConfirmed"" [label=""isConfirmed""];
""1149_addOwner"" [label=""addOwner""];
""1149_removeOwner"" [label=""removeOwner""];
""1149_fallback"" [label=""fallback""];
""1149_getTransactionCount"" [label=""getTransactionCount""];
""1149_revokeConfirmation"" [label=""revokeConfirmation""];
""1149_getConfirmations"" [label=""getConfirmations""];
""1149_getOwners"" [label=""getOwners""];
""1149_submitTransaction"" [label=""submitTransaction""];
""1149_constructor"" [label=""constructor""];
""1149_getConfirmationCount"" [label=""getConfirmationCount""];
""1149_getTransactionIds"" [label=""getTransactionIds""];
""1149_addTransaction"" [label=""addTransaction""];
""1149_replaceOwner"" [label=""replaceOwner""];
""1149_revokeConfirmation"" -> ""1149_notExecuted"";
""1149_submitTransaction"" -> ""1149_confirmTransaction"";
""1149_executeTransaction"" -> ""1149_isConfirmed"";
""1149_replaceOwner"" -> ""1149_ownerExists"";
""1149_revokeConfirmation"" -> ""1149_confirmed"";
""1149_executeTransaction"" -> ""1149_notExecuted"";
""1149_changeRequirement"" -> ""1149_onlyWallet"";
""1149_revokeConfirmation"" -> ""1149_ownerExists"";
""1149_confirmTransaction"" -> ""1149_ownerExists"";
""1149_addTransaction"" -> ""1149_notNull"";
""1149_confirmTransaction"" -> ""1149_transactionExists"";
""1149_addOwner"" -> ""1149_validRequirement"";
""1149_addOwner"" -> ""1149_onlyWallet"";
""1149_confirmTransaction"" -> ""1149_notConfirmed"";
""1149_changeRequirement"" -> ""1149_validRequirement"";
""1149_addOwner"" -> ""1149_ownerDoesNotExist"";
""1149_removeOwner"" -> ""1149_changeRequirement"";
""1149_removeOwner"" -> ""1149_onlyWallet"";
""1149_constructor"" -> ""1149_validRequirement"";
""1149_replaceOwner"" -> ""1149_onlyWallet"";
""1149_addOwner"" -> ""1149_notNull"";
""1149_submitTransaction"" -> ""1149_addTransaction"";
""1149_confirmTransaction"" -> ""1149_executeTransaction"";
""1149_replaceOwner"" -> ""1149_ownerDoesNotExist"";
""1149_removeOwner"" -> ""1149_ownerExists"";
}
"
0x707f0612cbbfa02284e02b0010b4f859bb7308ec.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_3237_DistributorRefundVault {
label=""DistributorRefundVault"";
""3237_DistributorRefundVault"" [label=""DistributorRefundVault""];
""3237_close"" [label=""close""];
""3237_taxValue"" [label=""taxValue""];
""3237_close"" -> ""3237_onlyOwner"";
""3237_DistributorRefundVault"" -> ""3237_RefundVault"";
}
"
0x1d86a854da490ff74dedc7abe281fb468f8c19ee.sol,MultiVesting,"contract MultiVesting is Ownable, Destroyable { using SafeMath for uint256; struct Beneficiary { string description; uint256 vested; uint256 released; uint256 start; uint256 cliff; uint256 duration; bool revoked; bool revocable; bool isBeneficiary; }",1,"subgraph cluster_903_MultiVesting {
label=""MultiVesting"";
""903_vestedAmount"" [label=""vestedAmount""];
""903_Balance"" [label=""Balance""];
""903_MultiVesting"" [label=""MultiVesting""];
""903_destroyBeneficiary"" [label=""destroyBeneficiary""];
""903_releasableAmount"" [label=""releasableAmount""];
""903_flushEth"" [label=""flushEth""];
""903_beneficiariesLength"" [label=""beneficiariesLength""];
""903_revoke"" [label=""revoke""];
""903_releaseTo"" [label=""releaseTo""];
""903_destroy"" [label=""destroy""];
""903_addBeneficiary"" [label=""addBeneficiary""];
""903_release"" [label=""release""];
""903_clearAll"" [label=""clearAll""];
""903_fallback"" [label=""fallback""];
""903_release"" -> ""903_release"";
""903_clearAll"" -> ""903_onlyOwner"";
""903_addBeneficiary"" -> ""903_onlyOwner"";
""903_destroy"" -> ""903_onlyOwner"";
""903_release"" -> ""903_releasableAmount"";
""903_fallback"" -> ""903_release"";
""903_releasableAmount"" -> ""903_vestedAmount"";
""903_flushEth"" -> ""903_onlyOwner"";
""903_releaseTo"" -> ""903_onlyOwner"";
""903_release"" -> ""903_isBeneficiary"";
""903_revoke"" -> ""903_releasableAmount"";
""903_addBeneficiary"" -> ""903_isNotBeneficiary"";
""903_destroyBeneficiary"" -> ""903_onlyOwner"";
""903_releaseTo"" -> ""903_release"";
""903_revoke"" -> ""903_onlyOwner"";
}
"
0x5a779aaeb53d2cba1755442c38dd6721c0cb31d0.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_335_RefundVault {
label=""RefundVault"";
""335_RefundVault"" [label=""RefundVault""];
""335_deposit"" [label=""deposit""];
""335_enableRefunds"" [label=""enableRefunds""];
""335_refund"" [label=""refund""];
""335_close"" [label=""close""];
""335_close"" -> ""335_onlyOwner"";
""335_enableRefunds"" -> ""335_onlyOwner"";
""335_deposit"" -> ""335_onlyOwner"";
}
"
0xee7477b1c42d173c0791cecf2592f6a8a4c16b0a.sol,BiddingBase,"contract BiddingBase is Pausable { uint40 public minTime = 60*10; uint public minBid = 50 finney - 1 szabo; address public operatorAddress; mapping(address => uint) public pendingReturns; uint public totalReturns; event Withdraw(address indexed bidder, uint256 value); function withdraw() public { uint amount = pendingReturns[msg.sender]; require (amount > 0); totalReturns -= amount; pendingReturns[msg.sender] -= amount; msg.sender.transfer(amount); emit Withdraw(msg.sender, amount); }",1,"subgraph cluster_277_BiddingBase {
label=""BiddingBase"";
""277_isContract"" [label=""isContract""];
""277_destroyContract"" [label=""destroyContract""];
""277_withdraw"" [label=""withdraw""];
""277_withdrawEthFromBalance"" [label=""withdrawEthFromBalance""];
""277_setOperator"" [label=""setOperator""];
""277_setMinTime"" [label=""setMinTime""];
""277_setMinBid"" [label=""setMinBid""];
""277_setOperator"" -> ""277_onlyOwner"";
""277_setMinBid"" -> ""277_onlyOwner"";
""277_destroyContract"" -> ""277_onlyOwner"";
""277_setMinTime"" -> ""277_onlyOwner"";
""277_withdrawEthFromBalance"" -> ""277_onlyOwner"";
}
"
0x46822ac3bc32db7ebd9845da3fe0886f824e9edf.sol,EBSCSale,"contract EBSCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 6000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; EBSCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1561_EBSCSale {
label=""EBSCSale"";
""1561_checkFundingCap"" [label=""checkFundingCap""];
""1561_checkFundingGoal"" [label=""checkFundingGoal""];
""1561_terminate"" [label=""terminate""];
""1561_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1561_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1561_convertToMiniEbsc"" [label=""convertToMiniEbsc""];
""1561_EBSCSale"" [label=""EBSCSale""];
""1561_changeStartTime"" [label=""changeStartTime""];
""1561_changeEndTime"" [label=""changeEndTime""];
""1561_fallback"" [label=""fallback""];
""1561_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1561_safeWithdrawal"" [label=""safeWithdrawal""];
""1561_setRate"" [label=""setRate""];
""1561_currentTime"" [label=""currentTime""];
""1561_fallback"" -> ""1561_afterStartTime"";
""1561_changeStartTime"" -> ""1561_onlyOwner"";
""1561_ownerAllocateTokens"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_nonReentrant"";
""1561_changeEndTime"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_beforeDeadline"";
""1561_ownerUnlockFund"" -> ""1561_onlyOwner"";
""1561_terminate"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_checkFundingCap"";
""1561_ownerUnlockFund"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_whenNotPaused"";
""1561_safeWithdrawal"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_checkFundingGoal"";
""1561_setRate"" -> ""1561_onlyOwner"";
""1561_EBSCSale"" -> ""1561_setRate"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingGoal"";
""1561_ownerAllocateTokens"" -> ""1561_onlyOwner"";
""1561_safeWithdrawal"" -> ""1561_nonReentrant"";
""1561_ownerSafeWithdrawal"" -> ""1561_onlyOwner"";
""1561_ownerSafeWithdrawal"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_saleNotClosed"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingCap"";
}
"
0x1fbf025ad94dde79f88732f79966a9a435f2772f.sol,BLITZQUIZ,contract BLITZQUIZ { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_BLITZQUIZ {
label=""BLITZQUIZ"";
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
}
"
0x40ef62929748b3e045fd2036322880ef486e4454.sol,IQ_GAME,contract IQ_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_IQ_GAME {
label=""IQ_GAME"";
""118_StopGame"" [label=""StopGame""];
""118_Play"" [label=""Play""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_fallback"" [label=""fallback""];
}
"
0x70785fec3fad3a3f855d939b74be05fca3ee9d7b.sol,f_game,contract f_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_f_game {
label=""f_game"";
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_constructor"" [label=""constructor""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x03eff7f353aeebea3ac5f23a6e9e844581ff5ef8.sol,PLAY_iQuiz,contract PLAY_iQuiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_PLAY_iQuiz {
label=""PLAY_iQuiz"";
""148_constructor"" [label=""constructor""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xdf4b22695eeb4a7a1cf9a42162285ce782b8427a.sol,Token,contract Token is TokenI { using SafeMath for uint256; string public techProvider = ; address public owner; struct FreezeInfo { address user; uint256 amount; },1,"subgraph cluster_1186_Token {
label=""Token"";
""1186_enableTransfers"" [label=""enableTransfers""];
""1186_balanceOf"" [label=""balanceOf""];
""1186_transfer"" [label=""transfer""];
""1186_transferMulti"" [label=""transferMulti""];
""1186_unFreeze"" [label=""unFreeze""];
""1186_destroyTokens"" [label=""destroyTokens""];
""1186_isContract"" [label=""isContract""];
""1186_freeze"" [label=""freeze""];
""1186_approve"" [label=""approve""];
""1186_generateTokens"" [label=""generateTokens""];
""1186_transferFrom"" [label=""transferFrom""];
""1186_approveAndCall"" [label=""approveAndCall""];
""1186_Token"" [label=""Token""];
""1186_claimTokens"" [label=""claimTokens""];
""1186_fallback"" [label=""fallback""];
""1186_changeOwner"" [label=""changeOwner""];
""1186_approveAndCall"" -> ""1186_approve"";
""1186_changeOwner"" -> ""1186_onlyOwner"";
""1186_approve"" -> ""1186_moreThanZero"";
""1186_claimTokens"" -> ""1186_onlyController"";
""1186_fallback"" -> ""1186_isContract"";
""1186_freeze"" -> ""1186_moreThanZero"";
""1186_transfer"" -> ""1186_realUser"";
""1186_transferFrom"" -> ""1186_realUser"";
""1186_transferFrom"" -> ""1186_moreThanZero"";
""1186_unFreeze"" -> ""1186_onlyOwner"";
""1186_destroyTokens"" -> ""1186_onlyOwner"";
""1186_transfer"" -> ""1186_moreThanZero"";
""1186_generateTokens"" -> ""1186_onlyController"";
""1186_enableTransfers"" -> ""1186_onlyOwner"";
""1186_freeze"" -> ""1186_onlyController"";
}
"
0x70fa6e7cf0ecf0e97415f3abbbc8eb67e0c2c588.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MyAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_657_MyAdvancedToken {
label=""MyAdvancedToken"";
""657_freezeAccount"" [label=""freezeAccount""];
""657_sell"" [label=""sell""];
""657_getEth"" [label=""getEth""];
""657_MyAdvancedToken"" [label=""MyAdvancedToken""];
""657_mintToken"" [label=""mintToken""];
""657__transfer"" [label=""_transfer""];
""657_setPrices"" [label=""setPrices""];
""657_buy"" [label=""buy""];
""657_selfdestructs"" [label=""selfdestructs""];
""657_fallback"" [label=""fallback""];
""657_mintToken"" -> ""657_onlyOwner"";
""657_buy"" -> ""657__transfer"";
""657_MyAdvancedToken"" -> ""657_TokenERC20"";
""657_fallback"" -> ""657__transfer"";
""657_sell"" -> ""657__transfer"";
""657_setPrices"" -> ""657_onlyOwner"";
""657_freezeAccount"" -> ""657_onlyOwner"";
}
"
0x791af5fcb5198c9f469d66b934864dab43d7f044.sol,Verus,"contract Verus is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 1000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 200000e18; uint public target0drop = 5000; uint public progress0drop = 0; address multisig = 0xCC1967c9EF99848803bc744e881eF84F59CE2b34 ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Verus {
label=""Verus"";
""1261_add"" [label=""add""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_burn"" [label=""burn""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_constructor"" [label=""constructor""];
""1261_getTokens"" [label=""getTokens""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_approve"" [label=""approve""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_fallback"" [label=""fallback""];
""1261_withdraw"" [label=""withdraw""];
""1261_allowance"" [label=""allowance""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_distr"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_fallback"" -> ""1261_getTokens"";
}
"
0xd16dfe7a7f447b00122a01efd5acb99a7aee7c04.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 300000000; uint256 public buyPrice = 2000; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public { }",1,"subgraph cluster_636_EncryptedToken {
label=""EncryptedToken"";
""636_getEth"" [label=""getEth""];
""636_selfdestructs"" [label=""selfdestructs""];
""636_mintToken"" [label=""mintToken""];
""636_fallback"" [label=""fallback""];
""636_freezeAccount"" [label=""freezeAccount""];
""636_buy"" [label=""buy""];
""636__transfer"" [label=""_transfer""];
""636_setPrices"" [label=""setPrices""];
""636_EncryptedToken"" [label=""EncryptedToken""];
""636_balanceOfa"" [label=""balanceOfa""];
""636_freezeAccount"" -> ""636_onlyOwner"";
""636_selfdestructs"" -> ""636_onlyOwner"";
""636_mintToken"" -> ""636_onlyOwner"";
""636_buy"" -> ""636__transfer"";
""636_setPrices"" -> ""636_onlyOwner"";
""636_EncryptedToken"" -> ""636_TokenERC20"";
""636_fallback"" -> ""636__transfer"";
}
"
0x75cb629408d1ea387df0a1f755e0bc371a5fa036.sol,GoodLuckCasino,"contract GoodLuckCasino is Ownable{ using SafeMath for uint; event LOG_Deposit(bytes32 userID, address walletAddr, uint amount); event LOG_Withdraw(address user, uint amount); event LOG_Bankroll(address sender, uint value); event LOG_OwnerWithdraw(address _to, uint _val); event LOG_ContractStopped(); event LOG_ContractResumed(); bool public isStopped; mapping (bytes32 => uint[]) depositList; modifier onlyIfNotStopped { require(!isStopped); _; }",1,"subgraph cluster_429_GoodLuckCasino {
label=""GoodLuckCasino"";
""429_userWithdraw"" [label=""userWithdraw""];
""429_bankroll"" [label=""bankroll""];
""429_ownerWithdraw"" [label=""ownerWithdraw""];
""429_getUserDeposit"" [label=""getUserDeposit""];
""429_resumeContract"" [label=""resumeContract""];
""429_stopContract"" [label=""stopContract""];
""429_userDeposit"" [label=""userDeposit""];
""429_constructor"" [label=""constructor""];
""429_fallback"" [label=""fallback""];
""429_getUserDepositList"" [label=""getUserDepositList""];
""429_ownerWithdraw"" -> ""429_onlyOwner"";
""429_userWithdraw"" -> ""429_onlyOwner"";
""429_stopContract"" -> ""429_onlyIfNotStopped"";
""429_userWithdraw"" -> ""429_onlyIfNotStopped"";
""429_bankroll"" -> ""429_onlyOwner"";
""429_stopContract"" -> ""429_onlyOwner"";
""429_resumeContract"" -> ""429_onlyIfStopped"";
""429_userDeposit"" -> ""429_onlyIfNotStopped"";
""429_resumeContract"" -> ""429_onlyOwner"";
}
"
0x219e0b7c4868add72a913eef492c228cd1f45cdd.sol,Firextoken,"contract Firextoken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 200 * 1 days; uint public round2 = now + 75 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 12000000000000000; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 1104000000000; uint public target0drop = 4500; uint public progress0drop = 0; address multisig = 0x0A8961D531805c7ABB4442123c1b08064dA705Ac; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_Firextoken {
label=""Firextoken"";
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_add"" [label=""add""];
""1263_Distribute"" [label=""Distribute""];
""1263_constructor"" [label=""constructor""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_fallback"" [label=""fallback""];
""1263_distr"" [label=""distr""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_transfer"" [label=""transfer""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_burn"" [label=""burn""];
""1263_getTokens"" [label=""getTokens""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_approve"" [label=""approve""];
""1263_withdraw"" [label=""withdraw""];
""1263_allowance"" [label=""allowance""];
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_distr"";
""1263_distr"" -> ""1263_canDistr"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_constructor"" -> ""1263_distr"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_getTokens"" -> ""1263_canDistr"";
}
"
0xf2f13b50e63454a5ce255f8355285561c13bb3cc.sol,BNCXCrowdsale,"contract BNCXCrowdsale { Token public tokenReward; address public creator; address public owner = 0x516A2F56A6a8f9A34AbF86C877d0252dC94AAA69; uint256 public startDate; uint256 public endDate; event FundTransfer(address backer, uint amount); constructor() public { creator = msg.sender; startDate = 1544832000; endDate = 1521331200; tokenReward = Token(0x5129bdfF6B065ce57cC7E7349bA681a0aC1D00cd); }",1,"subgraph cluster_273_BNCXCrowdsale {
label=""BNCXCrowdsale"";
""273_setEndtDate"" [label=""setEndtDate""];
""273_kill"" [label=""kill""];
""273_fallback"" [label=""fallback""];
""273_setOwner"" [label=""setOwner""];
""273_setCreator"" [label=""setCreator""];
""273_sendToken"" [label=""sendToken""];
""273_constructor"" [label=""constructor""];
""273_setToken"" [label=""setToken""];
""273_setStartDate"" [label=""setStartDate""];
}
"
0xe3ac32bbf9e3661c3aff4ee2f80706abaf7c7ea6.sol,Dividend,contract Dividend { struct Record { uint balance; uint shares; uint index; },1,"subgraph cluster_301_Dividend {
label=""Dividend"";
""301_Dividend"" [label=""Dividend""];
""301_invest"" [label=""invest""];
""301_withdraw"" [label=""withdraw""];
""301_investorCount"" [label=""investorCount""];
""301_fallback"" [label=""fallback""];
""301_allocateShares"" [label=""allocateShares""];
""301_Dividend"" -> ""301_allocateShares"";
""301_fallback"" -> ""301_withdraw"";
""301_fallback"" -> ""301_invest"";
""301_invest"" -> ""301_allocateShares"";
}
"
0x184c8624d79f41eff9b3a702737ee86eeef80e67.sol,EthMonsters,contract EthMonsters { address public owner; event BuyMonsterEvent( uint price ); uint public typesNumber = 0; uint public monstersNumber = 0; mapping (address => uint) public userMonstersCount; mapping (address => uint) goodContracts; monster[] public monsters; mapping (uint => address) public monsterToOwner; mapping (address => uint) public userBalance; mapping (address => uint[]) public userToMonsters; uint public contractFees = 0; monsterType[] public types; constructor() public { owner = msg.sender; },1,"subgraph cluster_873_EthMonsters {
label=""EthMonsters"";
""873_addNewType"" [label=""addNewType""];
""873_random"" [label=""random""];
""873_buyMonster"" [label=""buyMonster""];
""873_getType"" [label=""getType""];
""873_getMonster"" [label=""getMonster""];
""873_transferMonster"" [label=""transferMonster""];
""873_sendEarnings"" [label=""sendEarnings""];
""873_addGoodContract"" [label=""addGoodContract""];
""873_addExpToMonster"" [label=""addExpToMonster""];
""873_withdraw"" [label=""withdraw""];
""873_constructor"" [label=""constructor""];
""873_changeMonsterName"" [label=""changeMonsterName""];
""873_withdrawFees"" [label=""withdrawFees""];
""873_removeGoodContract"" [label=""removeGoodContract""];
""873_createMonster"" [label=""createMonster""];
""873_getUserMonster"" [label=""getUserMonster""];
""873_getUserMonstersCount"" [label=""getUserMonstersCount""];
""873_hatchEgg"" [label=""hatchEgg""];
""873_buyMonster"" -> ""873_random"";
""873_removeGoodContract"" -> ""873_onlyOwner"";
""873_changeMonsterName"" -> ""873_allowedContract"";
""873_buyMonster"" -> ""873_createMonster"";
""873_addExpToMonster"" -> ""873_allowedContract"";
""873_hatchEgg"" -> ""873_allowedContract"";
""873_transferMonster"" -> ""873_allowedContract"";
""873_addGoodContract"" -> ""873_onlyOwner"";
""873_withdrawFees"" -> ""873_onlyOwner"";
""873_buyMonster"" -> ""873_sendEarnings"";
""873_addNewType"" -> ""873_onlyOwner"";
}
"
0x05b04cb2c29691d3f9ce74e6aa3c69548da3bee2.sol,EtherStateEquivalentToken,contract EtherStateEquivalentToken { address public owner; mapping (address => uint256) public tokenBalance; mapping (address => uint256) public refBalance; uint256 public tokenPrice = 0.0004 ether; uint256 public tokenSupply = 0; uint256 constant public softCap = 2500000 ether; uint256 constant public hardCap = 10000000 ether; uint256 public start; uint256 public softCapMoment = 0; uint256 public softCapPeriod = 1483300; uint256 public hardCapPeriod = softCapPeriod; uint256 public investedTotal = 0; bool public softCapReached = false; modifier onlyOwner { require(msg.sender == owner); _; },1,"subgraph cluster_614_EtherStateEquivalentToken {
label=""EtherStateEquivalentToken"";
""614_constructor"" [label=""constructor""];
""614_transfer"" [label=""transfer""];
""614_invest"" [label=""invest""];
""614_deinvest"" [label=""deinvest""];
""614_fallback"" [label=""fallback""];
""614_withdraw"" [label=""withdraw""];
""614_withdrawAmountTo"" [label=""withdrawAmountTo""];
""614_buy"" [label=""buy""];
""614_withdrawAmount"" [label=""withdrawAmount""];
""614_goESM"" [label=""goESM""];
""614_fallback"" -> ""614_invest"";
""614_buy"" -> ""614_invest"";
""614_deinvest"" -> ""614_softCapFailed"";
}
"
0x50ec4b1f8434020e2d896c9cfb8a20d63af6136d.sol,Snip3D,contract Snip3D is Owned { using SafeMath for uint; uint public _totalSupply; mapping(address => uint256)public balances; mapping(address => uint256)public bullets; mapping(uint256 => address)public formation; uint256 public nextFormation; mapping(address => uint256)public lastMove; mapping(uint256 => address) public RefundWaitingLine; uint256 public NextInLine; uint256 public NextAtLineEnd; uint256 public Refundpot; uint256 public blocksBeforeSemiRandomShoot = 10; uint256 public blocksBeforeTargetShoot = 40; constructor() public { },1,"subgraph cluster_957_Snip3D {
label=""Snip3D"";
""957_fetchdivs"" [label=""fetchdivs""];
""957_constructor"" [label=""constructor""];
""957_Payoutnextrefund"" [label=""Payoutnextrefund""];
""957_P3DDivstocontract"" [label=""P3DDivstocontract""];
""957_amountofp3d"" [label=""amountofp3d""];
""957_shootTarget"" [label=""shootTarget""];
""957_disburse"" [label=""disburse""];
""957_die"" [label=""die""];
""957_dividendsOwing"" [label=""dividendsOwing""];
""957_changevanity"" [label=""changevanity""];
""957_shootSemiRandom"" [label=""shootSemiRandom""];
""957_sendInSoldier"" [label=""sendInSoldier""];
""957_harvestabledivs"" [label=""harvestabledivs""];
""957_fallback"" [label=""fallback""];
""957_sendInSoldier"" -> ""957_updateAccount"";
""957_shootTarget"" -> ""957_isAlive"";
""957_die"" -> ""957_onlyOwner"";
""957_shootSemiRandom"" -> ""957_fetchdivs"";
""957_P3DDivstocontract"" -> ""957_harvestabledivs"";
""957_shootTarget"" -> ""957_harvestabledivs"";
""957_fetchdivs"" -> ""957_updateAccount"";
""957_shootSemiRandom"" -> ""957_isAlive"";
""957_shootTarget"" -> ""957_fetchdivs"";
}
"
0xd37a7e9d4681da273e13d652ed9a789274d32bd7.sol,LUPXSale,"contract LUPXSale { IERC20Token public tokenContract ; address owner ; uint256 public tokensSold ; uint256 public LUPXPrice ; event sold(address buyer, uint256 amount) ; event priceAdjusted(uint256 oldPrice, uint256 newPrice) ; event endOfSale(uint256 timeStamp) ; constructor(IERC20Token _tokenContract, uint256 LUPXperETH) public { owner = msg.sender ; tokenContract = _tokenContract ; LUPXPrice = LUPXperETH ; }",1,"subgraph cluster_241_LUPXSale {
label=""LUPXSale"";
""241_fallback"" [label=""fallback""];
""241_endLUPXSale"" [label=""endLUPXSale""];
""241_constructor"" [label=""constructor""];
""241_safeMultiply"" [label=""safeMultiply""];
""241_withdrawETH"" [label=""withdrawETH""];
""241_withdrawETH"" -> ""241_onlyOwner"";
""241_endLUPXSale"" -> ""241_onlyOwner"";
""241_fallback"" -> ""241_safeMultiply"";
}
"
0xd7b45e0cdae4c65ef2c7e19152eeb3074e20f98f.sol,Owned,contract Owned { address internal _owner; function Owned() public { _owner = msg.sender; },1,"subgraph cluster_164_Owned {
label=""Owned"";
""164_Owned"" [label=""Owned""];
""164_kill"" [label=""kill""];
""164_fallback"" [label=""fallback""];
""164_harvest"" [label=""harvest""];
""164_kill"" -> ""164_onlyOwner"";
""164_harvest"" -> ""164_onlyOwner"";
}
"
0x714c1ef3854591d4118bd6887d4740bc4d5f5412.sol,KaasyToken,"contract KaasyToken is ERC20Interface, Pausable, SafeMath { string public symbol = ; string public name = ; uint8 public decimals = 18; uint public _totalSupply; uint public startDate; uint public bonusEnd20; uint public bonusEnd10; uint public bonusEnd05; uint public endDate; uint public tradingDate; uint public exchangeRate = 25000; uint256 public maxSupply; uint256 public soldSupply; uint256 public maxSellable; uint8 private teamWOVestingPercentage = 5; uint256 public minAmountETH; uint256 public maxAmountETH; address public currentRunningAddress; mapping(address => uint256) balances; mapping(address => uint256) ethDeposits; mapping(address => bool) kycAddressState; mapping(address => mapping(address => uint256)) allowed; mapping(address => uint256) burnedBalances; event MintingFinished(uint indexed moment); bool isMintingFinished = false; event OwnBlockchainLaunched(uint indexed moment); event TokensBurned(address indexed exOwner, uint256 indexed amount, uint indexed moment); bool isOwnBlockchainLaunched = false; uint momentOwnBlockchainLaunched = 0; uint8 public versionIndex = 1; address addrUniversity; address addrEarlySkills; address addrHackathons; address addrLegal; address addrMarketing; constructor() public { maxSupply = 500000000 * (10 ** 18); maxSellable = maxSupply * 60 / 100; currentRunningAddress = address(this); soldSupply = 0; startDate = 1535760000; bonusEnd20 = 1536969600; bonusEnd10 = 1538179200; bonusEnd05 = 1539388800; endDate = 1542240000; tradingDate = 1543536000; minAmountETH = safeDiv(1 ether, 10); maxAmountETH = safeMul(1 ether, 5000); uint256 teamAmount = maxSupply * 150 / 1000; balances[address(this)] = teamAmount * (100 - teamWOVestingPercentage) / 100; emit Transfer(address(0), address(this), balances[address(this)]); balances[owner] = teamAmount * teamWOVestingPercentage / 100; kycAddressState[owner] = true; emit Transfer(address(0), owner, balances[owner]); addrUniversity = 0x20D9846AB6c348AfF24e762150aBfa15D99e4Af5; balances[addrUniversity] = maxSupply * 50 / 1000; kycAddressState[addrUniversity] = true; emit Transfer(address(0), addrUniversity, balances[addrUniversity]); addrEarlySkills = 0x3CF15B214734bB3C9040f18033440a35d18746Ca; balances[addrEarlySkills] = maxSupply * 50 / 1000; kycAddressState[addrEarlySkills] = true; emit Transfer(address(0), addrEarlySkills, balances[addrEarlySkills]); addrHackathons = 0x3ACEB78ff4B064aEE870dcb844cCa43FC6DcBe7d; balances[addrHackathons] = maxSupply * 45 / 1000; kycAddressState[addrHackathons] = true; emit Transfer(address(0), addrHackathons, balances[addrHackathons]); addrLegal = 0x65e1af8d76af6d1d3E47F14014F3105286FFBcF2; balances[addrLegal] = maxSupply * 30 / 1000; kycAddressState[addrLegal] = true; emit Transfer(address(0), addrLegal, balances[addrLegal]); addrMarketing = 0x3d7Db960837aF96C457bdB481C3De7cE80366b2c; balances[addrMarketing] = maxSupply * 75 / 1000; kycAddressState[addrMarketing] = true; emit Transfer(address(0), addrMarketing, balances[addrMarketing]); _totalSupply = maxSupply * 40 / 100; }",1,"subgraph cluster_1893_KaasyToken {
label=""KaasyToken"";
""1893_SetNewBlockchainEnabled"" [label=""SetNewBlockchainEnabled""];
""1893_depositsOf"" [label=""depositsOf""];
""1893_fallback"" [label=""fallback""];
""1893_circulatingSupply"" [label=""circulatingSupply""];
""1893_symbol"" [label=""symbol""];
""1893_getExchangeRate"" [label=""getExchangeRate""];
""1893_transfer"" [label=""transfer""];
""1893_transferAllERC20Token"" [label=""transferAllERC20Token""];
""1893_burnedBalanceOf"" [label=""burnedBalanceOf""];
""1893_approveAndCall"" [label=""approveAndCall""];
""1893_name"" [label=""name""];
""1893_BurnMyTokensAndSetAmountForNewBlockchain"" [label=""BurnMyTokensAndSetAmountForNewBlockchain""];
""1893_decimals"" [label=""decimals""];
""1893_transferFrom"" [label=""transferFrom""];
""1893_updateExchangeRate"" [label=""updateExchangeRate""];
""1893_BurnTokensAndSetAmountForNewBlockchain"" [label=""BurnTokensAndSetAmountForNewBlockchain""];
""1893_transferVestingMonthlyAmount"" [label=""transferVestingMonthlyAmount""];
""1893_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""1893_getAmountToIssue"" [label=""getAmountToIssue""];
""1893_exchangeEthToEur"" [label=""exchangeEthToEur""];
""1893_allowance"" [label=""allowance""];
""1893_approve"" [label=""approve""];
""1893_internalFinishMinting"" [label=""internalFinishMinting""];
""1893_finishMinting"" [label=""finishMinting""];
""1893_setAddressKYC"" [label=""setAddressKYC""];
""1893_exchangeEurToEth"" [label=""exchangeEurToEth""];
""1893_updateEndDate"" [label=""updateEndDate""];
""1893_updateTokenNameSymbolAddress"" [label=""updateTokenNameSymbolAddress""];
""1893_balanceOf"" [label=""balanceOf""];
""1893_getAddressKYCState"" [label=""getAddressKYCState""];
""1893_constructor"" [label=""constructor""];
""1893_totalSupply"" [label=""totalSupply""];
""1893_transferFrom"" -> ""1893_finishMinting"";
""1893_BurnTokensAndSetAmountForNewBlockchain"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_exchangeEthToEur"" -> ""1893_safeMul"";
""1893_getAmountToIssue"" -> ""1893_exchangeEthToEur"";
""1893_transferFrom"" -> ""1893_whenNotPaused"";
""1893_SetNewBlockchainEnabled"" -> ""1893_onlyOwner"";
""1893_finishMinting"" -> ""1893_internalFinishMinting"";
""1893_BurnTokensAndSetAmountForNewBlockchain"" -> ""1893_safeAdd"";
""1893_fallback"" -> ""1893_finishMinting"";
""1893_transferVestingMonthlyAmount"" -> ""1893_onlyOwner"";
""1893_transferAllERC20Token"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_transfer"" -> ""1893_safeSub"";
""1893_approveAndCall"" -> ""1893_whenNotPaused"";
""1893_updateTokenNameSymbolAddress"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_exchangeEurToEth"" -> ""1893_safeDiv"";
""1893_setAddressKYC"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_exchangeEurToEth"" -> ""1893_safeMul"";
""1893_transfer"" -> ""1893_whenNotPaused"";
""1893_fallback"" -> ""1893_whenNotPaused"";
""1893_fallback"" -> ""1893_getAmountToIssue"";
""1893_transferFrom"" -> ""1893_safeAdd"";
""1893_updateTokenNameSymbolAddress"" -> ""1893_whenPaused"";
""1893_transfer"" -> ""1893_finishMinting"";
""1893_exchangeEthToEur"" -> ""1893_safeDiv"";
""1893_transferVestingMonthlyAmount"" -> ""1893_transferFrom"";
""1893_constructor"" -> ""1893_safeMul"";
""1893_updateExchangeRate"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_updateEndDate"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_transfer"" -> ""1893_safeAdd"";
""1893_fallback"" -> ""1893_safeAdd"";
""1893_BurnMyTokensAndSetAmountForNewBlockchain"" -> ""1893_safeAdd"";
""1893_transferAnyERC20Token"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_transferFrom"" -> ""1893_safeSub"";
""1893_constructor"" -> ""1893_safeDiv"";
}
"
0x33d1a1a2d781d395eace70e69423c594e52f1a8b.sol,MultiOwner,"contract MultiOwner { event OwnerAdded(address newOwner); event OwnerRemoved(address oldOwner); event RequirementChanged(uint256 newRequirement); uint256 public ownerRequired; mapping (address => bool) public isOwner; mapping (address => bool) public RequireDispose; address[] owners; function MultiOwner(address[] _owners, uint256 _required) public { ownerRequired = _required; isOwner[msg.sender] = true; owners.push(msg.sender); for (uint256 i = 0; i < _owners.length; ++i){ require(!isOwner[_owners[i]]); isOwner[_owners[i]] = true; owners.push(_owners[i]); }",1,"subgraph cluster_488_MultiOwner {
label=""MultiOwner"";
""488_removeOwner"" [label=""removeOwner""];
""488_MultiOwner"" [label=""MultiOwner""];
""488_addOwner"" [label=""addOwner""];
""488_changeRequirement"" [label=""changeRequirement""];
""488_numberOwners"" [label=""numberOwners""];
""488_kill"" [label=""kill""];
""488_ConfirmDispose"" [label=""ConfirmDispose""];
""488_changeRequirement"" -> ""488_onlyOwner"";
""488_kill"" -> ""488_ConfirmDispose"";
""488_removeOwner"" -> ""488_onlyOwner"";
""488_ConfirmDispose"" -> ""488_onlyOwner"";
""488_kill"" -> ""488_onlyOwner"";
""488_addOwner"" -> ""488_onlyOwner"";
""488_removeOwner"" -> ""488_ownerExists"";
""488_addOwner"" -> ""488_ownerDoesNotExist"";
}
"
0x27369e8f43f44c26853a46da7e6cb52d203b59ce.sol,AgileCycleWithAssistance,contract AgileCycleWithAssistance { using SafeMath for uint; address public operator; address public juryOperator; uint public promisedTokens; uint public raisedEther; bool public tokenReleaseAtStart; address public icoAddress; address public arbitrationAddress; bool public roundFailedToStart; address public projectWallet; address public juryOnlineWallet; struct Milestone { uint etherAmount; uint tokenAmount; uint startTime; uint finishTime; uint duration; string description; string result; },1,"subgraph cluster_3191_AgileCycleWithAssistance {
label=""AgileCycleWithAssistance"";
""3191_addMilestone"" [label=""addMilestone""];
""3191_promisedTokens"" [label=""promisedTokens""];
""3191_editMilestone"" [label=""editMilestone""];
""3191_milestonesLength"" [label=""milestonesLength""];
""3191_investorExists"" [label=""investorExists""];
""3191_addMilestonesAndSeal"" [label=""addMilestonesAndSeal""];
""3191_failSafe"" [label=""failSafe""];
""3191_assignPartition"" [label=""assignPartition""];
""3191_finishedTimeStamp"" [label=""finishedTimeStamp""];
""3191_verdictExecuted"" [label=""verdictExecuted""];
""3191_constructor"" [label=""constructor""];
""3191_offerAccepted"" [label=""offerAccepted""];
""3191_disputeOpened"" [label=""disputeOpened""];
""3191_setToken"" [label=""setToken""];
""3191_payCommission"" [label=""payCommission""];
""3191_finishMilestone"" [label=""finishMilestone""];
""3191_startMilestone"" [label=""startMilestone""];
""3191_withdrawEther"" [label=""withdrawEther""];
""3191_seal"" [label=""seal""];
""3191_approveCycle"" [label=""approveCycle""];
""3191_withdrawToken"" [label=""withdrawToken""];
""3191_sealTimestamp"" [label=""sealTimestamp""];
""3191_currentMilestone"" [label=""currentMilestone""];
""3191_disputeOpened"" -> ""3191_only"";
""3191_seal"" -> ""3191_notSealed"";
""3191_finishMilestone"" -> ""3191_onlyAdmin"";
""3191_setToken"" -> ""3191_onlyAdmin"";
""3191_startMilestone"" -> ""3191_sealed"";
""3191_editMilestone"" -> ""3191_onlyAdmin"";
""3191_addMilestone"" -> ""3191_onlyAdmin"";
""3191_addMilestone"" -> ""3191_notSealed"";
""3191_verdictExecuted"" -> ""3191_only"";
""3191_startMilestone"" -> ""3191_payCommission"";
""3191_offerAccepted"" -> ""3191_only"";
""3191_startMilestone"" -> ""3191_onlyAdmin"";
""3191_addMilestonesAndSeal"" -> ""3191_onlyAdmin"";
""3191_offerAccepted"" -> ""3191_assignPartition"";
""3191_seal"" -> ""3191_onlyAdmin"";
""3191_editMilestone"" -> ""3191_notSealed"";
""3191_addMilestonesAndSeal"" -> ""3191_notSealed"";
}
"
0x6d84769b1e287a27f282a938c8110b22714dbf78.sol,ABIO_preICO,"contract ABIO_preICO is ABIO_BaseICO{ address ICOAddress; ABIO_ICO ICO; uint finalDeadline; constructor(address _abioAddress, uint _lenInMins, uint _minWeiInvestment, address _treasury, uint _priceInWei, uint _goalInWei){ treasury = _treasury; abioToken = ABIO_Token(_abioAddress); weiPerABIO = _priceInWei; fundingGoal = _goalInWei; minInvestment = _minWeiInvestment; startDate = now; length = _lenInMins * 1 minutes; }",1,"subgraph cluster_638_ABIO_preICO {
label=""ABIO_preICO"";
""638_supplyICOContract"" [label=""supplyICOContract""];
""638_constructor"" [label=""constructor""];
""638_goalReached"" [label=""goalReached""];
""638_extGoalReached"" [label=""extGoalReached""];
""638_safeWithdrawal"" [label=""safeWithdrawal""];
""638_extGoalReached"" -> ""638_goalReached"";
""638_supplyICOContract"" -> ""638_onlyOwner"";
""638_safeWithdrawal"" -> ""638_afterDeadline"";
""638_safeWithdrawal"" -> ""638_stopOnPause"";
""638_extGoalReached"" -> ""638_afterDeadline"";
""638_supplyICOContract"" -> ""638_goalReached"";
}
"
0xb39673a1f27ea2da6fd299368fe9fdbae4bc408f.sol,a_game,contract a_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_a_game {
label=""a_game"";
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x78a73b6cbc5d183ce56e786f6e905cadec63547b.sol,FabricTokenFundraiser,"contract FabricTokenFundraiser is FabricToken, FabricTokenFundraiserConfig, Whitelist { bool public finalized = false; address public beneficiary; uint public conversionRate; uint public startDate; uint public endDate; uint public hardCap; FabricTokenSafe public fabricTokenSafe; uint internal minimumContribution; uint internal individualLimit; uint private tokensSold; bool private partnerTokensClaimed = false; event FundsReceived(address indexed _address, uint _ethers, uint _tokens, uint _newTotalSupply, uint _conversionRate); event BeneficiaryChange(address _beneficiary); event ConversionRateChange(uint _conversionRate); event Finalized(address _beneficiary, uint _ethers, uint _totalSupply); function FabricTokenFundraiser(address _beneficiary) public FabricToken(0) Whitelist(msg.sender) { require(_beneficiary != 0); beneficiary = _beneficiary; conversionRate = CONVERSION_RATE; startDate = START_DATE; endDate = END_DATE; hardCap = TOKENS_HARD_CAP; tokensSold = 0; minimumContribution = MIN_CONTRIBUTION; individualLimit = INDIVIDUAL_ETHER_LIMIT * CONVERSION_RATE; fabricTokenSafe = new FabricTokenSafe(this); freeze(); }",1,"subgraph cluster_1539_FabricTokenFundraiser {
label=""FabricTokenFundraiser"";
""1539_FabricTokenFundraiser"" [label=""FabricTokenFundraiser""];
""1539_claimPartnerTokens"" [label=""claimPartnerTokens""];
""1539_setConversionRate"" [label=""setConversionRate""];
""1539_setBeneficiary"" [label=""setBeneficiary""];
""1539_finalize"" [label=""finalize""];
""1539_buyTokens"" [label=""buyTokens""];
""1539_fallback"" [label=""fallback""];
""1539_setBeneficiary"" -> ""1539_onlyOwner"";
""1539_fallback"" -> ""1539_buyTokens"";
""1539_finalize"" -> ""1539_unfreeze"";
""1539_FabricTokenFundraiser"" -> ""1539_Whitelist"";
""1539_FabricTokenFundraiser"" -> ""1539_FabricToken"";
""1539_finalize"" -> ""1539_onlyOwner"";
""1539_setConversionRate"" -> ""1539_onlyOwner"";
""1539_buyTokens"" -> ""1539_onlyWhitelisted"";
""1539_FabricTokenFundraiser"" -> ""1539_freeze"";
}
"
0x41b8d6336bdab8991ad1c48e3579d0693db17e79.sol,MNY,"contract MNY { string public name = ; uint8 public decimals = 18; string public symbol = ; address public _owner; address public _dev = 0xC96CfB18C39DC02FBa229B6EA698b1AD5576DF4c; address public _devFeesAddr; uint256 public _tokePerEth = 4877000000000000000000; bool public _coldStorage = true; bool public _receiveEth = true; bool _feesEnabled = false; bool _payFees = false; uint256 _fees; uint256 _lifeVal = 0; uint256 _feeLimit = 0; uint256 _devFees = 0; uint256 public _totalSupply = 1000000928 * 1 ether; uint256 public _frozenTokens = 0; event Transfer(address indexed _from, address indexed _to, uint _value); event Exchanged(address indexed _from, address indexed _to, uint _value); mapping (address => uint256) public balances; mapping (address => bool) public exchangePartners; mapping (address => uint256) public exchangeRates; function MNY() { _owner = msg.sender; preMine(); }",1,"subgraph cluster_1157_MNY {
label=""MNY"";
""1157_getBalance"" [label=""getBalance""];
""1157_transfer"" [label=""transfer""];
""1157_changePayRate"" [label=""changePayRate""];
""1157_changeDev"" [label=""changeDev""];
""1157_updateFeeAmount"" [label=""updateFeeAmount""];
""1157_exchange"" [label=""exchange""];
""1157_addExchangePartnerAddressAndRate"" [label=""addExchangePartnerAddressAndRate""];
""1157_safeWithdrawal"" [label=""safeWithdrawal""];
""1157_toggleReceiveEth"" [label=""toggleReceiveEth""];
""1157_mul"" [label=""mul""];
""1157_fallback"" [label=""fallback""];
""1157_payFeesToggle"" [label=""payFeesToggle""];
""1157_removeExchangePartnerTargetAddress"" [label=""removeExchangePartnerTargetAddress""];
""1157_sub"" [label=""sub""];
""1157_totalSupply"" [label=""totalSupply""];
""1157_defrostFrozenTokens"" [label=""defrostFrozenTokens""];
""1157_updateTokenBalance"" [label=""updateTokenBalance""];
""1157_preMine"" [label=""preMine""];
""1157_add"" [label=""add""];
""1157_changeOwner"" [label=""changeOwner""];
""1157_getLifeVal"" [label=""getLifeVal""];
""1157_canExchange"" [label=""canExchange""];
""1157_changeDevFeesAddr"" [label=""changeDevFeesAddr""];
""1157_exchangeTokensFromOtherContract"" [label=""exchangeTokensFromOtherContract""];
""1157_addExchangePartnerTargetAddress"" [label=""addExchangePartnerTargetAddress""];
""1157_balanceOf"" [label=""balanceOf""];
""1157_withdrawDevFees"" [label=""withdrawDevFees""];
""1157_div"" [label=""div""];
""1157_requestTokensFromOtherContract"" [label=""requestTokensFromOtherContract""];
""1157_MNY"" [label=""MNY""];
""1157_toggleFreezeTokensFlag"" [label=""toggleFreezeTokensFlag""];
""1157_contractExchangeRate"" [label=""contractExchangeRate""];
""1157_exchangeTokensFromOtherContract"" -> ""1157_mul"";
""1157_fallback"" -> ""1157_div"";
""1157_transfer"" -> ""1157_balanceOf"";
""1157_exchangeTokensFromOtherContract"" -> ""1157_sub"";
""1157_exchangeTokensFromOtherContract"" -> ""1157_add"";
""1157_transfer"" -> ""1157_add"";
""1157_MNY"" -> ""1157_preMine"";
""1157_defrostFrozenTokens"" -> ""1157_add"";
""1157_fallback"" -> ""1157_sub"";
""1157_fallback"" -> ""1157_add"";
""1157_fallback"" -> ""1157_mul"";
""1157_exchange"" -> ""1157_add"";
""1157_exchange"" -> ""1157_balanceOf"";
""1157_transfer"" -> ""1157_sub"";
""1157_exchange"" -> ""1157_sub"";
""1157_exchange"" -> ""1157_requestTokensFromOtherContract"";
}
"
0x2066a2e0cd7f19589f582e2fc9af9669cc9e02f1.sol,SetherToken,"contract SetherToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function SetherToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_SetherToken {
label=""SetherToken"";
""401_SetherToken"" [label=""SetherToken""];
""401_transfer"" [label=""transfer""];
""401_fallback"" [label=""fallback""];
""401_mintTo"" [label=""mintTo""];
""401_totalSupply"" [label=""totalSupply""];
""401_approve"" [label=""approve""];
""401_changeOwner"" [label=""changeOwner""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_killContract"" [label=""killContract""];
""401_transferFrom"" [label=""transferFrom""];
""401_balanceOf"" [label=""balanceOf""];
}
"
0xf2861ad8dd602269c21eddd4d18255903cca47c7.sol,ZethrMultiSigWallet,"contract ZethrMultiSigWallet is ERC223Receiving { using SafeMath for uint; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event WhiteListAddition(address indexed contractAddress); event WhiteListRemoval(address indexed contractAddress); event RequirementChange(uint required); event BankrollInvest(uint amountReceived); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; bool internal reEntered = false; uint constant public MAX_OWNER_COUNT = 15; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1272_ZethrMultiSigWallet {
label=""ZethrMultiSigWallet"";
""1272_isConfirmed"" [label=""isConfirmed""];
""1272_confirmTransaction"" [label=""confirmTransaction""];
""1272_replaceOwner"" [label=""replaceOwner""];
""1272_revokeConfirmation"" [label=""revokeConfirmation""];
""1272_addTransaction"" [label=""addTransaction""];
""1272_getConfirmations"" [label=""getConfirmations""];
""1272_fallback"" [label=""fallback""];
""1272_getTransactionIds"" [label=""getTransactionIds""];
""1272_constructor"" [label=""constructor""];
""1272_executeTransaction"" [label=""executeTransaction""];
""1272_getConfirmationCount"" [label=""getConfirmationCount""];
""1272_submitTransaction"" [label=""submitTransaction""];
""1272_getOwners"" [label=""getOwners""];
""1272_tokenFallback"" [label=""tokenFallback""];
""1272_removeOwner"" [label=""removeOwner""];
""1272_addOwner"" [label=""addOwner""];
""1272_changeRequirement"" [label=""changeRequirement""];
""1272_getTransactionCount"" [label=""getTransactionCount""];
""1272_addOwner"" -> ""1272_validRequirement"";
""1272_addOwner"" -> ""1272_onlyWallet"";
""1272_addOwner"" -> ""1272_notNull"";
""1272_removeOwner"" -> ""1272_changeRequirement"";
""1272_submitTransaction"" -> ""1272_confirmTransaction"";
""1272_revokeConfirmation"" -> ""1272_ownerExists"";
""1272_changeRequirement"" -> ""1272_validRequirement"";
""1272_executeTransaction"" -> ""1272_notExecuted"";
""1272_removeOwner"" -> ""1272_validRequirement"";
""1272_replaceOwner"" -> ""1272_ownerDoesNotExist"";
""1272_addOwner"" -> ""1272_ownerDoesNotExist"";
""1272_revokeConfirmation"" -> ""1272_notExecuted"";
""1272_changeRequirement"" -> ""1272_onlyWallet"";
""1272_replaceOwner"" -> ""1272_onlyWallet"";
""1272_revokeConfirmation"" -> ""1272_confirmed"";
""1272_submitTransaction"" -> ""1272_addTransaction"";
""1272_confirmTransaction"" -> ""1272_ownerExists"";
""1272_confirmTransaction"" -> ""1272_notConfirmed"";
""1272_addTransaction"" -> ""1272_notNull"";
""1272_confirmTransaction"" -> ""1272_executeTransaction"";
""1272_removeOwner"" -> ""1272_ownerExists"";
""1272_removeOwner"" -> ""1272_onlyWallet"";
""1272_confirmTransaction"" -> ""1272_transactionExists"";
""1272_executeTransaction"" -> ""1272_isConfirmed"";
""1272_replaceOwner"" -> ""1272_ownerExists"";
""1272_constructor"" -> ""1272_validRequirement"";
}
"
0x78c2a1e91b52bca4130b6ed9edd9fbcfd4671c37.sol,WhaleGiveaway1,contract WhaleGiveaway1 { address public Owner = msg.sender; uint constant public minEligibility = 0.999001 ether; function() public payable { },1,"subgraph cluster_93_WhaleGiveaway1 {
label=""WhaleGiveaway1"";
""93_fallback"" [label=""fallback""];
""93_Command"" [label=""Command""];
""93_withdraw"" [label=""withdraw""];
""93_redeem"" [label=""redeem""];
}
"
0xeef93ec835c7921038d55ee096671a94e961709b.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1447_RefundVault {
label=""RefundVault"";
""1447_deposit"" [label=""deposit""];
""1447_enableRefunds"" [label=""enableRefunds""];
""1447_setWallet"" [label=""setWallet""];
""1447_RefundVault"" [label=""RefundVault""];
""1447_close"" [label=""close""];
""1447_refund"" [label=""refund""];
""1447_deposit"" -> ""1447_onlyOwner"";
""1447_enableRefunds"" -> ""1447_onlyOwner"";
""1447_close"" -> ""1447_onlyOwner"";
""1447_setWallet"" -> ""1447_onlyOwner"";
}
"
0xf3cb4203e10f205c6bc91d8b0974eee520af6412.sol,D_Quiz,contract D_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_D_Quiz {
label=""D_Quiz"";
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x345ab5e5f971dbdbc92af2779ce7a8bbf1819e59.sol,TwentyDollars,contract TwentyDollars { struct Bid { address owner; uint256 amount; },1,"subgraph cluster_262_TwentyDollars {
label=""TwentyDollars"";
""262_winnerWithdraw"" [label=""winnerWithdraw""];
""262_biddingClosed"" [label=""biddingClosed""];
""262_ownerWithdraw"" [label=""ownerWithdraw""];
""262_getMyBalance"" [label=""getMyBalance""];
""262_constructor"" [label=""constructor""];
""262_getContractBalance"" [label=""getContractBalance""];
""262_bid"" [label=""bid""];
""262_withdraw"" [label=""withdraw""];
""262_fallback"" [label=""fallback""];
""262_ownerWithdraw"" -> ""262_onlyOwner"";
""262_winnerWithdraw"" -> ""262_onlyHighestBidder"";
""262_bid"" -> ""262_onlyBiddingOpen"";
""262_ownerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_winnerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_ownerWithdraw"" -> ""262_getContractBalance"";
""262_fallback"" -> ""262_bid"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,HelloGoldSale,"contract HelloGoldSale is Pausable, SafeMath { uint256 public decimals = 8; uint256 public startDate = 1503892800; uint256 public endDate = 1504497600; uint256 tranchePeriod = 1 weeks; HelloGoldToken token; uint256 constant MaxCoinsR1 = 80 * 10**6 * 10**8; uint256 public coinsRemaining = 80 * 10**6 * 10**8; uint256 coinsPerTier = 16 * 10**6 * 10**8; uint256 public coinsLeftInTier = 16 * 10**6 * 10**8; uint256 public minimumCap = 0; uint256 numTiers = 5; uint16 public tierNo; uint256 public preallocCoins; uint256 public purchasedCoins; uint256 public ethRaised; uint256 public personalMax = 10 ether; uint256 public contributors; address public cs; address public multiSig; address public HGT_Reserve; struct csAction { bool passedKYC; bool blocked; }",1,"subgraph cluster_3276_HelloGoldSale {
label=""HelloGoldSale"";
""3276_coinAddress"" [label=""coinAddress""];
""3276_when"" [label=""when""];
""3276_setHgtRates"" [label=""setHgtRates""];
""3276_funding"" [label=""funding""];
""3276_block"" [label=""block""];
""3276_success"" [label=""success""];
""3276_fallback"" [label=""fallback""];
""3276_HelloGoldSale"" [label=""HelloGoldSale""];
""3276_createTokens"" [label=""createTokens""];
""3276_withdraw"" [label=""withdraw""];
""3276_allocatedTokens"" [label=""allocatedTokens""];
""3276_approve"" [label=""approve""];
""3276_setPeriod"" [label=""setPeriod""];
""3276_linkCoin"" [label=""linkCoin""];
""3276_complete"" [label=""complete""];
""3276_newCs"" [label=""newCs""];
""3276_failed"" [label=""failed""];
""3276_unblock"" [label=""unblock""];
""3276_setStart"" [label=""setStart""];
""3276_createTokens"" -> ""3276_funding"";
""3276_allocatedTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_success"";
""3276_allocatedTokens"" -> ""3276_safeAdd"";
""3276_createTokens"" -> ""3276_safeDiv"";
""3276_fallback"" -> ""3276_createTokens"";
""3276_linkCoin"" -> ""3276_onlyOwner"";
""3276_approve"" -> ""3276_MustBeCs"";
""3276_unblock"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_min256"";
""3276_setHgtRates"" -> ""3276_onlyOwner"";
""3276_allocatedTokens"" -> ""3276_onlyOwner"";
""3276_withdraw"" -> ""3276_failed"";
""3276_newCs"" -> ""3276_onlyOwner"";
""3276_setPeriod"" -> ""3276_funding"";
""3276_setStart"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeAdd"";
""3276_fallback"" -> ""3276_whenNotPaused"";
""3276_setPeriod"" -> ""3276_onlyOwner"";
""3276_block"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeMul"";
""3276_fallback"" -> ""3276_MustBeEnabled"";
}
"
0x40da24a66f729d0bd0453681c5a6506bdc2a7a6a.sol,CrwdToken,"contract CrwdToken is StandardToken { enum States { Initial, ValuationSet, Ico, Underfunded, Operational, Paused }",1,"subgraph cluster_1496_CrwdToken {
label=""CrwdToken"";
""1496_transfer"" [label=""transfer""];
""1496_transferFrom"" [label=""transferFrom""];
""1496_issueTokensToUser"" [label=""issueTokensToUser""];
""1496_rescueToken"" [label=""rescueToken""];
""1496_addBonus"" [label=""addBonus""];
""1496_CrwdToken"" [label=""CrwdToken""];
""1496_balanceOf"" [label=""balanceOf""];
""1496_pause"" [label=""pause""];
""1496_resumeICO"" [label=""resumeICO""];
""1496_fallback"" [label=""fallback""];
""1496_abort"" [label=""abort""];
""1496_moveToState"" [label=""moveToState""];
""1496_setBonusPhase"" [label=""setBonusPhase""];
""1496_burnAndFinish"" [label=""burnAndFinish""];
""1496_anyoneEndICO"" [label=""anyoneEndICO""];
""1496_endICO"" [label=""endICO""];
""1496_startICO"" [label=""startICO""];
""1496_addPresaleAmount"" [label=""addPresaleAmount""];
""1496_addToWhitelist"" [label=""addToWhitelist""];
""1496_requestPayout"" [label=""requestPayout""];
""1496_getPhaseBonus"" [label=""getPhaseBonus""];
""1496_requestRefund"" [label=""requestRefund""];
""1496_updateEthICOThresholds"" [label=""updateEthICOThresholds""];
""1496_issuePercentToReserve"" [label=""issuePercentToReserve""];
""1496_transfer"" -> ""1496_transfer"";
""1496_addPresaleAmount"" -> ""1496_issueTokensToUser"";
""1496_anyoneEndICO"" -> ""1496_burnAndFinish"";
""1496_transfer"" -> ""1496_requireState"";
""1496_updateEthICOThresholds"" -> ""1496_onlyStateControl"";
""1496_pause"" -> ""1496_moveToState"";
""1496_anyoneEndICO"" -> ""1496_requireState"";
""1496_transferFrom"" -> ""1496_transferFrom"";
""1496_resumeICO"" -> ""1496_onlyStateControl"";
""1496_transferFrom"" -> ""1496_requireState"";
""1496_abort"" -> ""1496_moveToState"";
""1496_rescueToken"" -> ""1496_onlyTokenAssignmentControl"";
""1496_rescueToken"" -> ""1496_requireState"";
""1496_fallback"" -> ""1496_requireState"";
""1496_abort"" -> ""1496_requireState"";
""1496_CrwdToken"" -> ""1496_moveToState"";
""1496_endICO"" -> ""1496_burnAndFinish"";
""1496_anyoneEndICO"" -> ""1496_moveToState"";
""1496_fallback"" -> ""1496_addBonus"";
""1496_requestPayout"" -> ""1496_requireState"";
""1496_endICO"" -> ""1496_moveToState"";
""1496_pause"" -> ""1496_requireState"";
""1496_addPresaleAmount"" -> ""1496_onlyTokenAssignmentControl"";
""1496_requestPayout"" -> ""1496_onlyWithdraw"";
""1496_addBonus"" -> ""1496_getPhaseBonus"";
""1496_resumeICO"" -> ""1496_moveToState"";
""1496_resumeICO"" -> ""1496_requireState"";
""1496_startICO"" -> ""1496_onlyStateControl"";
""1496_setBonusPhase"" -> ""1496_onlyStateControl"";
""1496_startICO"" -> ""1496_moveToState"";
""1496_endICO"" -> ""1496_onlyStateControl"";
""1496_burnAndFinish"" -> ""1496_issuePercentToReserve"";
""1496_pause"" -> ""1496_onlyStateControl"";
""1496_abort"" -> ""1496_onlyStateControl"";
""1496_startICO"" -> ""1496_requireState"";
""1496_updateEthICOThresholds"" -> ""1496_moveToState"";
""1496_addToWhitelist"" -> ""1496_onlyWhitelist"";
""1496_endICO"" -> ""1496_requireState"";
""1496_fallback"" -> ""1496_issueTokensToUser"";
""1496_requestRefund"" -> ""1496_requireState"";
}
"
0xe159ab639cd6d5d8c83bcda4bd114480c9ce197b.sol,En_GAME,contract En_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_En_GAME {
label=""En_GAME"";
""148_New"" [label=""New""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Try"" [label=""Try""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,FlowerCore,"contract FlowerCore is FlowerAuction, Ownable { uint256 public constant PROMO_CREATION_LIMIT = 5000; uint256 public constant GEN0_CREATION_LIMIT = 45000; uint256 public constant GEN0_STARTING_PRICE = 10 finney; uint256 public constant GEN0_AUCTION_DURATION = 1 days; uint256 public promoCreatedCount; uint256 public gen0CreatedCount; constructor() public { stopped = true; rootAddress = msg.sender; adminAddress = msg.sender; _createFlower(0, 0, 0, uint256(-1), address(0)); }",1,"subgraph cluster_4300_FlowerCore {
label=""FlowerCore"";
""4300__computeNextGen0Price"" [label=""_computeNextGen0Price""];
""4300_getFlower"" [label=""getFlower""];
""4300_createPromoFlower"" [label=""createPromoFlower""];
""4300_unstop"" [label=""unstop""];
""4300_createGen0Auction"" [label=""createGen0Auction""];
""4300_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""4300_withdrawBalance"" [label=""withdrawBalance""];
""4300_setGiftHolderAddress"" [label=""setGiftHolderAddress""];
""4300_constructor"" [label=""constructor""];
""4300_createPromoFlower"" -> ""4300_onlyAdministrator"";
""4300_withdrawBalance"" -> ""4300_onlyAdministrator"";
""4300_setGen0SellerAddress"" -> ""4300_onlyAdministrator"";
""4300_createGen0Auction"" -> ""4300_onlyAdministrator"";
""4300_unstop"" -> ""4300_whenStopped"";
""4300_setGiftHolderAddress"" -> ""4300_onlyAdministrator"";
""4300_unstop"" -> ""4300_onlyAdministrator"";
""4300_constructor"" -> ""4300__createFlower"";
""4300_unstop"" -> ""4300_setStart"";
""4300_createGen0Auction"" -> ""4300__createFlower"";
""4300_createGen0Auction"" -> ""4300__computeNextGen0Price"";
""4300_createPromoFlower"" -> ""4300__createFlower"";
}
"
0x8cd06b5c327b0e277a7f6b08b9acea4d8ee36180.sol,JungleScratch,contract JungleScratch is Owned { using SafeMath for uint; uint public LimitBottom = 0.02 ether; uint public LimitTop = 0.1 ether; address public Drawer; struct Game { bytes32 SecretKey_P; bool isPlay; bool isPay; uint Result; uint Time; address Buyer; uint value; },1,"subgraph cluster_1109_JungleScratch {
label=""JungleScratch"";
""1109_fallback"" [label=""fallback""];
""1109_changeLimit"" [label=""changeLimit""];
""1109_changeDrawer"" [label=""changeDrawer""];
""1109_getTicketTime"" [label=""getTicketTime""];
""1109_submit"" [label=""submit""];
""1109_withdraw"" [label=""withdraw""];
""1109_getisPlay"" [label=""getisPlay""];
""1109_award"" [label=""award""];
""1109_chargeOwe"" [label=""chargeOwe""];
""1109_JungleScratch"" [label=""JungleScratch""];
""1109_withdraw"" -> ""1109_onlyOwner"";
""1109_changeDrawer"" -> ""1109_onlyOwner"";
""1109_changeLimit"" -> ""1109_onlyOwner"";
}
"
0xf2eefee3c99cdb30c11d57b487a16690e813309b.sol,SlotMachine,"contract SlotMachine { address public slotMachineFunds; uint256 public coinPrice = 0.1 ether; address owner; event Rolled(address sender, uint rand1, uint rand2, uint rand3); mapping (address => uint) pendingWithdrawals; modifier onlyOwner() { require(owner == msg.sender); _; }",1,"subgraph cluster_359_SlotMachine {
label=""SlotMachine"";
""359_cashout"" [label=""cashout""];
""359_fallback"" [label=""fallback""];
""359_contractBalance"" [label=""contractBalance""];
""359_constructor"" [label=""constructor""];
""359_addEther"" [label=""addEther""];
""359_withdraw"" [label=""withdraw""];
""359_balanceOf"" [label=""balanceOf""];
""359_setCoinPrice"" [label=""setCoinPrice""];
""359_calculatePrize"" [label=""calculatePrize""];
""359_killContract"" [label=""killContract""];
""359_randomGen"" [label=""randomGen""];
""359_oneRoll"" [label=""oneRoll""];
""359_oneRoll"" -> ""359_calculatePrize"";
""359_fallback"" -> ""359_onlyOwner"";
""359_setCoinPrice"" -> ""359_onlyOwner"";
""359_oneRoll"" -> ""359_randomGen"";
""359_killContract"" -> ""359_onlyOwner"";
""359_cashout"" -> ""359_onlyOwner"";
}
"
0x6b1dce414d998a28bd90f201a87f8e1bbf2f0aad.sol,fast_game,contract fast_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_fast_game {
label=""fast_game"";
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x33b44a1d150f3feaa40503ad20a75634adc39b18.sol,TimeCapsule,contract TimeCapsule is Ownable { address public Owner; mapping (address=>uint) public deposits; uint public openDate; function initCapsule(uint open) { Owner = msg.sender; openDate = open; },1,"subgraph cluster_130_TimeCapsule {
label=""TimeCapsule"";
""130_deposit"" [label=""deposit""];
""130_initCapsule"" [label=""initCapsule""];
""130_kill"" [label=""kill""];
""130_withdraw"" [label=""withdraw""];
""130_fallback"" [label=""fallback""];
""130_withdraw"" -> ""130_isOwner"";
""130_kill"" -> ""130_isOwner"";
""130_fallback"" -> ""130_deposit"";
}
"
0x9311f7ee5f48a807d598cdd68f43cd4e73ffa747.sol,GTO,contract GTO is ERC20Interface { uint8 public constant decimals = 5; string public constant symbol = ; string public constant name = ; bool public _selling = false; uint256 public _totalSupply = 10 ** 14; uint256 public _originalBuyPrice = 45 * 10**7; address public owner; mapping(address => uint256) private balances; mapping(address => mapping (address => uint256)) private allowed; mapping(address => bool) private approvedInvestorList; mapping(address => uint256) private deposit; address[] private buyers; uint8 public _icoPercent = 10; uint256 public _icoSupply = _totalSupply * _icoPercent / 100; uint256 public _minimumBuy = 3 * 10 ** 17; uint256 public _maximumBuy = 30 * 10 ** 18; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_778_GTO {
label=""GTO"";
""778_totalSupply"" [label=""totalSupply""];
""778_setMaximumBuy"" [label=""setMaximumBuy""];
""778_setIcoPercent"" [label=""setIcoPercent""];
""778_turnOnSale"" [label=""turnOnSale""];
""778_allowance"" [label=""allowance""];
""778_withdraw"" [label=""withdraw""];
""778_balanceOf"" [label=""balanceOf""];
""778_fallback"" [label=""fallback""];
""778_transfer"" [label=""transfer""];
""778_getBuyers"" [label=""getBuyers""];
""778_removeInvestorList"" [label=""removeInvestorList""];
""778_buyGifto"" [label=""buyGifto""];
""778_approve"" [label=""approve""];
""778_turnOffSale"" [label=""turnOffSale""];
""778_deliveryToken"" [label=""deliveryToken""];
""778_setBuyPrice"" [label=""setBuyPrice""];
""778_getDeposit"" [label=""getDeposit""];
""778_transferFrom"" [label=""transferFrom""];
""778_isApprovedInvestor"" [label=""isApprovedInvestor""];
""778_addInvestorList"" [label=""addInvestorList""];
""778_GTO"" [label=""GTO""];
""778_fallback"" -> ""778_buyGifto"";
""778_setIcoPercent"" -> ""778_onlyOwner"";
""778_buyGifto"" -> ""778_onSale"";
""778_addInvestorList"" -> ""778_onlyOwner"";
""778_deliveryToken"" -> ""778_onlyOwner"";
""778_removeInvestorList"" -> ""778_onlyOwner"";
""778_withdraw"" -> ""778_onlyOwner"";
""778_setBuyPrice"" -> ""778_onlyOwner"";
""778_deliveryToken"" -> ""778_validRange"";
""778_turnOffSale"" -> ""778_onlyOwner"";
""778_setMaximumBuy"" -> ""778_onlyOwner"";
""778_buyGifto"" -> ""778_validValue"";
""778_turnOnSale"" -> ""778_onlyOwner"";
""778_buyGifto"" -> ""778_validInvestor"";
}
"
0x6dbb4e882f967432fc0f9200e9ca577c916d8a68.sol,Bussiness,contract Bussiness is Ownable { IERC721 public erc721Address = IERC721(0x06012c8cf97bead5deae237070f9587f8e7a266d); ERC20BasicInterface public usdtToken = ERC20BasicInterface(0xdAC17F958D2ee523a2206206994597C13D831ec7); uint256 public ETHFee = 2; uint256 public HBWALLETFee = 1; uint256 public balance = address(this).balance; constructor() public {},1,"subgraph cluster_687_Bussiness {
label=""Bussiness"";
""687_buyByUsdt"" [label=""buyByUsdt""];
""687_setPrice"" [label=""setPrice""];
""687_getPrice"" [label=""getPrice""];
""687_ownerOf"" [label=""ownerOf""];
""687_constructor"" [label=""constructor""];
""687_resetPrice"" [label=""resetPrice""];
""687_setFee"" [label=""setFee""];
""687_withdraw"" [label=""withdraw""];
""687_setPriceFeeEth"" [label=""setPriceFeeEth""];
""687_removePrice"" [label=""removePrice""];
""687_buy"" [label=""buy""];
""687_buyByUsdt"" -> ""687_resetPrice"";
""687_setFee"" -> ""687_onlyOwner"";
""687_withdraw"" -> ""687_onlyOwner"";
""687_buy"" -> ""687_resetPrice"";
""687_getPrice"" -> ""687_resetPrice"";
""687_removePrice"" -> ""687_resetPrice"";
}
"
0xf099c6ecb16575393b3ba6ac57b4ead943353a52.sol,BuddhaTower,"contract BuddhaTower { event onBuy ( address indexed buyerAddress, uint256 amount, uint256 currentHeight ); event onSplit( uint round, uint luckyNumber, address luckyPlayer ); event onTimeup( uint round, address lastBuyer ); event onQualifySuccess( address applier ); struct RoundData { uint256 maxHeight; uint256 lotteryPool; uint256 peakPool; uint256 tokenPot; uint[][] buyinfo; address[] buyAddress; uint256 startTime; uint256 endTime; address[] lotteryWinners; address finalWinner; }",1,"subgraph cluster_1969_BuddhaTower {
label=""BuddhaTower"";
""1969_wipeAll"" [label=""wipeAll""];
""1969_emergencyStart"" [label=""emergencyStart""];
""1969_splitLottery"" [label=""splitLottery""];
""1969_getQualified"" [label=""getQualified""];
""1969_constructor"" [label=""constructor""];
""1969_getLotteryWinner"" [label=""getLotteryWinner""];
""1969_endTime"" [label=""endTime""];
""1969_emergencyClose"" [label=""emergencyClose""];
""1969_activate"" [label=""activate""];
""1969_getLotteryWinnerLength"" [label=""getLotteryWinnerLength""];
""1969_getBuyInfoLength"" [label=""getBuyInfoLength""];
""1969_takeDevCut"" [label=""takeDevCut""];
""1969_buy"" [label=""buy""];
""1969_moveFromBanlist"" [label=""moveFromBanlist""];
""1969_getBuyAddress"" [label=""getBuyAddress""];
""1969_deposit"" [label=""deposit""];
""1969_getBuyInfo"" [label=""getBuyInfo""];
""1969_withdrawEth"" [label=""withdrawEth""];
""1969_addToBanlist"" [label=""addToBanlist""];
""1969_emergencyClose"" -> ""1969_onlyOwner"";
""1969_wipeAll"" -> ""1969_onlyOwner"";
""1969_withdrawEth"" -> ""1969_isBaned"";
""1969_deposit"" -> ""1969_buy"";
""1969_moveFromBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_endTime"";
""1969_deposit"" -> ""1969_isHuman"";
""1969_deposit"" -> ""1969_isBaned"";
""1969_emergencyStart"" -> ""1969_onlyOwner"";
""1969_deposit"" -> ""1969_isActive"";
""1969_withdrawEth"" -> ""1969_isHuman"";
""1969_constructor"" -> ""1969_activate"";
""1969_deposit"" -> ""1969_isWithinLimits"";
""1969_addToBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_splitLottery"";
""1969_activate"" -> ""1969_onlyOwner"";
""1969_takeDevCut"" -> ""1969_onlyOwner"";
}
"
0x20461ad484795e3db0a18a825b34f55768f77819.sol,FF_Game,contract FF_Game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_FF_Game {
label=""FF_Game"";
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x72636c350431895fc6ee718b92bcc5b4fbd70304.sol,preSale3,contract preSale3 is Ownable { using SafeMath for uint; AgroTechFarmToken public token; bool public preSale3Finished = false; string public constant name = ; address public multisig; address public preSale = 0x02Dcc61022771015b1408323D29C790066CBe2e4; address public preSale1 = 0xfafbb19945fc2d79828e4c5813a619d5683074ba; address public preSale2 = 0x62451D37Ca2EC1f0499996Bc3C7e2BAF258E9729; uint public rate; uint public start; uint public end; uint public hardcap; address public restricted; uint public restrictedPercent; function preSale3() public { token = AgroTechFarmToken(0xa55ffAeA5c8cf32B550F663bf17d4F7b739534ff); multisig = 0x227917ac3C1F192874d43031cF4D40fd40Ae6127; rate = 83333333333000000000; start = 1520640000; end = 1522047600; hardcap = 500000000000000000000; restricted = 0xbcCd749ecCCee5B4898d0E38D2a536fa84Ea9Ef6; restrictedPercent = 35; },1,"subgraph cluster_731_preSale3 {
label=""preSale3"";
""731_fallback"" [label=""fallback""];
""731_finishPreSale3"" [label=""finishPreSale3""];
""731_preSale3"" [label=""preSale3""];
""731_createTokens"" [label=""createTokens""];
""731_balancePreSale3"" [label=""balancePreSale3""];
""731_finishPreSale3"" -> ""731_onlyOwner"";
""731_fallback"" -> ""731_createTokens"";
""731_createTokens"" -> ""731_isUnderHardCap"";
""731_createTokens"" -> ""731_saleIsOn"";
}
"
0x00f9f4f3ced5d4f6aedea8a92414206557df7167.sol,SNL,"contract SNL is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 500000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function SNL() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_SNL {
label=""SNL"";
""706__transfer"" [label=""_transfer""];
""706_SNL"" [label=""SNL""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x1807cf924199c0f8a85b73c15b5c0349aa3844e5.sol,PublickOffering,contract PublickOffering is Authority { struct investorInfo{ address investor; uint256 amount; uint utime; bool hadback; },1,"subgraph cluster_296_PublickOffering {
label=""PublickOffering"";
""296_PublickOffering"" [label=""PublickOffering""];
""296_fallback"" [label=""fallback""];
""296_drawETH"" [label=""drawETH""];
""296_backETH"" [label=""backETH""];
""296_drawETH"" -> ""296_alloweDrawEth"";
""296_drawETH"" -> ""296_onlyBeneficiary"";
""296_backETH"" -> ""296_onlyBeneficiary"";
}
"
0xeba4ce0d799fe901f3af52c0e0f088d026b11c81.sol,CFNDCrowdsale,contract CFNDCrowdsale { Token public tokenReward; address public creator; address public owner = 0x56D215183E48881f10D1FaEb9325cf02171B16B7; uint256 private price; modifier isCreator() { require(msg.sender == creator); _; },1,"subgraph cluster_252_CFNDCrowdsale {
label=""CFNDCrowdsale"";
""252_setPrice"" [label=""setPrice""];
""252_kill"" [label=""kill""];
""252_sendToken"" [label=""sendToken""];
""252_CFNDCrowdsale"" [label=""CFNDCrowdsale""];
""252_setToken"" [label=""setToken""];
""252_setOwner"" [label=""setOwner""];
""252_fallback"" [label=""fallback""];
""252_setCreator"" [label=""setCreator""];
""252_kill"" -> ""252_isCreator"";
""252_setOwner"" -> ""252_isCreator"";
""252_setCreator"" -> ""252_isCreator"";
""252_setPrice"" -> ""252_isCreator"";
""252_setToken"" -> ""252_isCreator"";
""252_sendToken"" -> ""252_isCreator"";
}
"
0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol,WorldCupWinner,"contract WorldCupWinner { using SafeMath for uint256; event BuyWinner(address indexed buyer, uint256 indexed traddingTime, uint256 first, uint256 second, uint256 three, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice); event BuyWinnerList(uint256 indexed first, uint256 indexed second, uint256 indexed third,address buyer, uint256 traddingTime, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice); event BuyWinnerTwo(address indexed buyer, uint256 indexed first, uint256 indexed gameid,uint256 traddingTime, uint256 buyType,uint256 buyPrice,uint buyTotal); event ShareBonus(address indexed buyer, uint256 indexed traddingTime, uint256 indexed buyerType, uint256 gameID, uint256 remainingAmount); address public owner; uint[] _teamIDs; struct Game{ uint256 _bouns; uint[] _teams; uint256[] _teamPrice; uint _playType; bool _stop; uint256 _beginTime; }",1,"subgraph cluster_746_WorldCupWinner {
label=""WorldCupWinner"";
""746_buy"" [label=""buy""];
""746_getListTeam"" [label=""getListTeam""];
""746_buyTwo"" [label=""buyTwo""];
""746_getPool"" [label=""getPool""];
""746_constructor"" [label=""constructor""];
""746_setTeamStatus"" [label=""setTeamStatus""];
""746_batchShareAmount"" [label=""batchShareAmount""];
""746_getBonusPoolTotal"" [label=""getBonusPoolTotal""];
""746_destroy"" [label=""destroy""];
""746_createGame"" [label=""createGame""];
""746_shareAmount"" [label=""shareAmount""];
""746_setTeamPrice"" [label=""setTeamPrice""];
""746_getListTeamByPlayType"" [label=""getListTeamByPlayType""];
""746_batchShareAmount"" -> ""746_onlyOwner"";
""746_setTeamPrice"" -> ""746_onlyOwner"";
""746_shareAmount"" -> ""746_onlyOwner"";
""746_destroy"" -> ""746_onlyOwner"";
""746_setTeamStatus"" -> ""746_onlyOwner"";
""746_createGame"" -> ""746_onlyOwner"";
}
"
0x6947335452cb7a452fc337c28cb0d597806c7672.sol,SmartWeddingContract,"contract SmartWeddingContract { event WrittenContractProposed(uint timestamp, string ipfsHash, address wallet); event Signed(uint timestamp, address wallet); event ContractSigned(uint timestamp); event AssetProposed(uint timestamp, string asset, address wallet); event AssetAddApproved(uint timestamp, string asset, address wallet); event AssetAdded(uint timestamp, string asset); event AssetRemoveApproved(uint timestamp, string asset, address wallet); event AssetRemoved(uint timestamp, string asset); event DivorceApproved(uint timestamp, address wallet); event Divorced(uint timestamp); event FundsSent(uint timestamp, address wallet, uint amount); event FundsReceived(uint timestamp, address wallet, uint amount); bool public signed = false; bool public divorced = false; mapping (address => bool) private hasSigned; mapping (address => bool) private hasDivorced; address public husbandAddress; address public wifeAddress; string public writtenContractIpfsHash; struct Asset { string data; uint husbandAllocation; uint wifeAllocation; bool added; bool removed; mapping (address => bool) hasApprovedAdd; mapping (address => bool) hasApprovedRemove; }",1,"subgraph cluster_823_SmartWeddingContract {
label=""SmartWeddingContract"";
""823_pay"" [label=""pay""];
""823_constructor"" [label=""constructor""];
""823_fallback"" [label=""fallback""];
""823_signContract"" [label=""signContract""];
""823_removeAsset"" [label=""removeAsset""];
""823_approveAsset"" [label=""approveAsset""];
""823_divorce"" [label=""divorce""];
""823_proposeWrittenContract"" [label=""proposeWrittenContract""];
""823_isSameString"" [label=""isSameString""];
""823_proposeAsset"" [label=""proposeAsset""];
""823_getAssetIds"" [label=""getAssetIds""];
""823_proposeAsset"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_isNotDivorced"";
""823_signContract"" -> ""823_isSameString"";
""823_fallback"" -> ""823_isNotDivorced"";
""823_proposeWrittenContract"" -> ""823_onlySpouse"";
""823_pay"" -> ""823_onlySpouse"";
""823_proposeAsset"" -> ""823_isNotDivorced"";
""823_pay"" -> ""823_isNotDivorced"";
""823_proposeAsset"" -> ""823_isSameString"";
""823_fallback"" -> ""823_isSigned"";
""823_approveAsset"" -> ""823_isNotDivorced"";
""823_approveAsset"" -> ""823_isSigned"";
""823_approveAsset"" -> ""823_onlySpouse"";
""823_proposeAsset"" -> ""823_isSigned"";
""823_signContract"" -> ""823_onlySpouse"";
""823_divorce"" -> ""823_isSigned"";
""823_pay"" -> ""823_isSigned"";
""823_divorce"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_isSigned"";
""823_divorce"" -> ""823_isNotDivorced"";
}
"
0x89b5eaec2702ab0ff33ca397b3e66c7d925d5144.sol,Soccer,"contract Soccer { using SafeMath for uint256; event Birth(uint256 tokenId, uint256 startPrice); event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner); event Transfer(address indexed from, address indexed to, uint256 tokenId); event Approval(address indexed owner, address indexed approved, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; struct Token { address owner; uint256 price; }",1,"subgraph cluster_1466_Soccer {
label=""Soccer"";
""1466__handle"" [label=""_handle""];
""1466_getInitialPriceOfToken"" [label=""getInitialPriceOfToken""];
""1466_symbol"" [label=""symbol""];
""1466__approved"" [label=""_approved""];
""1466_transfer"" [label=""transfer""];
""1466_unlockPriceChange"" [label=""unlockPriceChange""];
""1466_setCOO"" [label=""setCOO""];
""1466_Soccer"" [label=""Soccer""];
""1466__owns"" [label=""_owns""];
""1466_changePrice"" [label=""changePrice""];
""1466_ownerOf"" [label=""ownerOf""];
""1466__addressNotNull"" [label=""_addressNotNull""];
""1466__transfer"" [label=""_transfer""];
""1466_lockPriceChange"" [label=""lockPriceChange""];
""1466_getNextPrice"" [label=""getNextPrice""];
""1466_isContract"" [label=""isContract""];
""1466_getTotalSupply"" [label=""getTotalSupply""];
""1466_payout"" [label=""payout""];
""1466_takeOwnership"" [label=""takeOwnership""];
""1466_setCEO"" [label=""setCEO""];
""1466_buyToken"" [label=""buyToken""];
""1466_createPromoCollectible"" [label=""createPromoCollectible""];
""1466_approve"" [label=""approve""];
""1466__payout"" [label=""_payout""];
""1466_priceOf"" [label=""priceOf""];
""1466_name"" [label=""name""];
""1466_tokensOfOwner"" [label=""tokensOfOwner""];
""1466_balanceOf"" [label=""balanceOf""];
""1466_implementsERC721"" [label=""implementsERC721""];
""1466_transferFrom"" [label=""transferFrom""];
""1466__addLastOwner"" [label=""_addLastOwner""];
""1466_getToken"" [label=""getToken""];
""1466_buyToken"" -> ""1466__handle"";
""1466_buyToken"" -> ""1466_isContract"";
""1466_getToken"" -> ""1466_getInitialPriceOfToken"";
""1466_takeOwnership"" -> ""1466__approved"";
""1466_tokensOfOwner"" -> ""1466_getTotalSupply"";
""1466_changePrice"" -> ""1466__owns"";
""1466_createPromoCollectible"" -> ""1466_getInitialPriceOfToken"";
""1466_createPromoCollectible"" -> ""1466__transfer"";
""1466_takeOwnership"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__transfer"";
""1466_createPromoCollectible"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466__addLastOwner"";
""1466_payout"" -> ""1466__payout"";
""1466_setCOO"" -> ""1466_onlyCEO"";
""1466_priceOf"" -> ""1466_getInitialPriceOfToken"";
""1466_setCEO"" -> ""1466_onlyCEO"";
""1466_unlockPriceChange"" -> ""1466_onlyCLevel"";
""1466_transferFrom"" -> ""1466__owns"";
""1466_lockPriceChange"" -> ""1466_onlyCLevel"";
""1466_payout"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466_getNextPrice"";
""1466_transferFrom"" -> ""1466__addressNotNull"";
""1466_transferFrom"" -> ""1466__approved"";
""1466_transfer"" -> ""1466__owns"";
""1466_takeOwnership"" -> ""1466__transfer"";
""1466_approve"" -> ""1466__owns"";
""1466_transferFrom"" -> ""1466__transfer"";
""1466_tokensOfOwner"" -> ""1466_balanceOf"";
""1466_getToken"" -> ""1466_getNextPrice"";
""1466_buyToken"" -> ""1466_getInitialPriceOfToken"";
}
"
0x56a4d4e31c09558f6a1619dfb857a482b3bb2fb6.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private admin = msg.sender; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },1,"subgraph cluster_1210_PlayerBook {
label=""PlayerBook"";
""1210_getPlayerID"" [label=""getPlayerID""];
""1210_addGame"" [label=""addGame""];
""1210_setRegistrationFee"" [label=""setRegistrationFee""];
""1210_getPlayerLAff"" [label=""getPlayerLAff""];
""1210_useMyOldName"" [label=""useMyOldName""];
""1210_registerNameXaddr"" [label=""registerNameXaddr""];
""1210_registerNameXnameFromDapp"" [label=""registerNameXnameFromDapp""];
""1210_getNameFee"" [label=""getNameFee""];
""1210_registerNameXIDFromDapp"" [label=""registerNameXIDFromDapp""];
""1210_registerNameXaddrFromDapp"" [label=""registerNameXaddrFromDapp""];
""1210_constructor"" [label=""constructor""];
""1210_getPlayerName"" [label=""getPlayerName""];
""1210_getPlayerAddr"" [label=""getPlayerAddr""];
""1210_registerNameCore"" [label=""registerNameCore""];
""1210_addMeToGame"" [label=""addMeToGame""];
""1210_determinePID"" [label=""determinePID""];
""1210_addMeToAllGames"" [label=""addMeToAllGames""];
""1210_registerNameXID"" [label=""registerNameXID""];
""1210_checkIfNameValid"" [label=""checkIfNameValid""];
""1210_registerNameXname"" [label=""registerNameXname""];
""1210_getPlayerID"" -> ""1210_isRegisteredGame"";
""1210_registerNameXnameFromDapp"" -> ""1210_registerNameCore"";
""1210_registerNameXID"" -> ""1210_registerNameCore"";
""1210_registerNameXaddrFromDapp"" -> ""1210_determinePID"";
""1210_registerNameXaddr"" -> ""1210_registerNameCore"";
""1210_registerNameXIDFromDapp"" -> ""1210_determinePID"";
""1210_registerNameXaddrFromDapp"" -> ""1210_isRegisteredGame"";
""1210_registerNameXaddr"" -> ""1210_determinePID"";
""1210_registerNameXaddrFromDapp"" -> ""1210_registerNameCore"";
""1210_registerNameXIDFromDapp"" -> ""1210_registerNameCore"";
""1210_registerNameXIDFromDapp"" -> ""1210_isRegisteredGame"";
""1210_addMeToGame"" -> ""1210_isHuman"";
""1210_getPlayerID"" -> ""1210_determinePID"";
""1210_registerNameXname"" -> ""1210_registerNameCore"";
""1210_registerNameXID"" -> ""1210_determinePID"";
""1210_registerNameXname"" -> ""1210_isHuman"";
""1210_registerNameXnameFromDapp"" -> ""1210_determinePID"";
""1210_useMyOldName"" -> ""1210_isHuman"";
""1210_addMeToAllGames"" -> ""1210_isHuman"";
""1210_registerNameXnameFromDapp"" -> ""1210_isRegisteredGame"";
""1210_setRegistrationFee"" -> ""1210_onlyAdmin"";
""1210_addGame"" -> ""1210_onlyAdmin"";
""1210_registerNameXID"" -> ""1210_isHuman"";
""1210_registerNameXaddr"" -> ""1210_isHuman"";
""1210_registerNameXname"" -> ""1210_determinePID"";
}
"
0x1b85440d66a5903deabb24807d739019ff1741e6.sol,Subrosa,"contract Subrosa { using SafeMath for uint256; event Deposit(address _from, uint256 _amount); event WithDraw(address _to, uint256 _amount); address public owner; address public contractAddress; modifier onlyOwner() { require (msg.sender == owner); _; }",1,"subgraph cluster_201_Subrosa {
label=""Subrosa"";
""201_getBalance"" [label=""getBalance""];
""201_withDraw"" [label=""withDraw""];
""201_withDrawAmount"" [label=""withDrawAmount""];
""201_fallback"" [label=""fallback""];
""201_Subrosa"" [label=""Subrosa""];
""201_withDrawAmount"" -> ""201_onlyOwner"";
""201_withDraw"" -> ""201_onlyOwner"";
}
"
0x728781e75735dc0962df3a51d7ef47e798a7107e.sol,WolkExchange,"contract WolkExchange is WolkProtocol, WolkTGE { uint256 public maxPerExchangeBP = 50; address public exchangeFormula; bool public exchangeIsRunning = false; modifier isExchangable { require(exchangeIsRunning && allSaleCompleted); _; }",1,"subgraph cluster_2452_WolkExchange {
label=""WolkExchange"";
""2452_sellWolk"" [label=""sellWolk""];
""2452_updateExchangeStatus"" [label=""updateExchangeStatus""];
""2452_purchaseWolk"" [label=""purchaseWolk""];
""2452_estLiquidationCap"" [label=""estLiquidationCap""];
""2452_sellWolkEstimate"" [label=""sellWolkEstimate""];
""2452_setMaxPerExchange"" [label=""setMaxPerExchange""];
""2452_fallback"" [label=""fallback""];
""2452_purchaseWolkEstimate"" [label=""purchaseWolkEstimate""];
""2452_setExchangeFormula"" [label=""setExchangeFormula""];
""2452_setExchangeFormula"" -> ""2452_sellWolkEstimate"";
""2452_updateExchangeStatus"" -> ""2452_onlyOwner"";
""2452_estLiquidationCap"" -> ""2452_safeMul"";
""2452_sellWolk"" -> ""2452_safeSub"";
""2452_sellWolk"" -> ""2452_isExchangable"";
""2452_purchaseWolk"" -> ""2452_safeAdd"";
""2452_purchaseWolk"" -> ""2452_purchaseWolkEstimate"";
""2452_updateExchangeStatus"" -> ""2452_purchaseWolkEstimate"";
""2452_updateExchangeStatus"" -> ""2452_sellWolkEstimate"";
""2452_sellWolk"" -> ""2452_sellWolkEstimate"";
""2452_estLiquidationCap"" -> ""2452_safeDiv"";
""2452_setMaxPerExchange"" -> ""2452_onlyOwner"";
""2452_setExchangeFormula"" -> ""2452_onlyOwner"";
""2452_purchaseWolk"" -> ""2452_isExchangable"";
""2452_sellWolk"" -> ""2452_estLiquidationCap"";
""2452_setExchangeFormula"" -> ""2452_purchaseWolkEstimate"";
}
"
0x6d54549975e0fef50cd954491a6abee84c6f4e61.sol,QuizTest,contract QuizTest { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_131_QuizTest {
label=""QuizTest"";
""131_NewQuestion"" [label=""NewQuestion""];
""131_Try"" [label=""Try""];
""131_StopGame"" [label=""StopGame""];
""131_newQuestioner"" [label=""newQuestioner""];
""131_start_quiz_game"" [label=""start_quiz_game""];
""131_fallback"" [label=""fallback""];
""131_StopGame"" -> ""131_onlyQuestionSender"";
""131_newQuestioner"" -> ""131_onlyQuestionSender"";
""131_NewQuestion"" -> ""131_onlyQuestionSender"";
}
"
0x7271f8fdd7693dca37b40403080abe89ae740168.sol,Game,contract Game { address constant private PROMO = 0x51A2BF880F4db7713E95498833308ffE4D61d080; uint constant public PROMO_PERCENT = 15; uint constant public MULTIPLIER = 120; uint constant public MAX_DEPOSIT = 1 ether; uint constant public MIN_DEPOSIT = 0.01 ether; uint constant public LAST_DEPOSIT_PERCENT = 5; LastDeposit public last; struct Deposit { address depositor; uint128 deposit; uint128 expect; },1,"subgraph cluster_474_Game {
label=""Game"";
""474_pay"" [label=""pay""];
""474_getDeposit"" [label=""getDeposit""];
""474_getDepositsCount"" [label=""getDepositsCount""];
""474_getDeposits"" [label=""getDeposits""];
""474_getQueueLength"" [label=""getQueueLength""];
""474_fallback"" [label=""fallback""];
""474_fallback"" -> ""474_pay"";
""474_getDeposits"" -> ""474_getDepositsCount"";
}
"
0x2aaefbac989f8951436c36474c304af7bf31bb26.sol,Administration,"contract Administration is SafeMath{ event Pause(); event Unpause(); event PriceRaise(); event PriceStop(); address public CEOAddress; address public CTOAddress; uint oneEth = 1 ether; uint public feeUnit = 1 finney; uint public preSaleDurance = 45 days; bool public paused = false; bool public pricePause = true; uint public startTime; uint public endTime; uint[3] raiseIndex = [ 3, 7, 5 ]; uint[3] rewardPercent = [ 15, 25, 30 ]; modifier onlyCEO() { require(msg.sender == CEOAddress); _; }",1,"subgraph cluster_486_Administration {
label=""Administration"";
""486_computePrice"" [label=""computePrice""];
""486_unPausePriceRaise"" [label=""unPausePriceRaise""];
""486_setPreSaleDurance"" [label=""setPreSaleDurance""];
""486_pausePriceRaise"" [label=""pausePriceRaise""];
""486_pause"" [label=""pause""];
""486_setCTO"" [label=""setCTO""];
""486__random"" [label=""_random""];
""486_unpause"" [label=""unpause""];
""486_withdrawBalance"" [label=""withdrawBalance""];
""486_setFeeUnit"" [label=""setFeeUnit""];
""486_WhoIsTheContractMaster"" [label=""WhoIsTheContractMaster""];
""486_withdrawBalanceAll"" [label=""withdrawBalanceAll""];
""486__computePrice"" [label=""_computePrice""];
""486_computePrice"" -> ""486__computePrice"";
""486_unpause"" -> ""486_whenPaused"";
""486_setCTO"" -> ""486_onlyCEO"";
""486_unpause"" -> ""486_onlyCEO"";
""486_setFeeUnit"" -> ""486_onlyCEO"";
""486_pause"" -> ""486_whenNotPaused"";
""486_unPausePriceRaise"" -> ""486_onlyCEO"";
""486__computePrice"" -> ""486_safeSub"";
""486_pausePriceRaise"" -> ""486_onlyCEO"";
""486_pause"" -> ""486_onlyCEO"";
""486_computePrice"" -> ""486_safeSub"";
""486_withdrawBalanceAll"" -> ""486_onlyAdmin"";
""486_withdrawBalance"" -> ""486_onlyAdmin"";
""486_setPreSaleDurance"" -> ""486_onlyCEO"";
}
"
0x75cb629408d1ea387df0a1f755e0bc371a5fa036.sol,GoodLuckCasino,"contract GoodLuckCasino is Ownable{ using SafeMath for uint; event LOG_Deposit(bytes32 userID, address walletAddr, uint amount); event LOG_Withdraw(address user, uint amount); event LOG_Bankroll(address sender, uint value); event LOG_OwnerWithdraw(address _to, uint _val); event LOG_ContractStopped(); event LOG_ContractResumed(); bool public isStopped; mapping (bytes32 => uint[]) depositList; modifier onlyIfNotStopped { require(!isStopped); _; }",1,"subgraph cluster_429_GoodLuckCasino {
label=""GoodLuckCasino"";
""429_userWithdraw"" [label=""userWithdraw""];
""429_bankroll"" [label=""bankroll""];
""429_ownerWithdraw"" [label=""ownerWithdraw""];
""429_getUserDeposit"" [label=""getUserDeposit""];
""429_resumeContract"" [label=""resumeContract""];
""429_stopContract"" [label=""stopContract""];
""429_userDeposit"" [label=""userDeposit""];
""429_constructor"" [label=""constructor""];
""429_fallback"" [label=""fallback""];
""429_getUserDepositList"" [label=""getUserDepositList""];
""429_ownerWithdraw"" -> ""429_onlyOwner"";
""429_userWithdraw"" -> ""429_onlyOwner"";
""429_stopContract"" -> ""429_onlyIfNotStopped"";
""429_userWithdraw"" -> ""429_onlyIfNotStopped"";
""429_bankroll"" -> ""429_onlyOwner"";
""429_stopContract"" -> ""429_onlyOwner"";
""429_resumeContract"" -> ""429_onlyIfStopped"";
""429_userDeposit"" -> ""429_onlyIfNotStopped"";
""429_resumeContract"" -> ""429_onlyOwner"";
}
"
0xf0cc17aa0ce1c6595e56c9c60b19c1c546ade50d.sol,Vault,"contract Vault is TokenVault { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event OpenDate(uint date); mapping (address => uint) public Deposits; uint minDeposit; bool Locked; uint Date; function init() payable open { Owner = msg.sender; minDeposit = 0.5 ether; Locked = false; deposit(); }",1,"subgraph cluster_115_TokenVault {
label=""TokenVault"";
""115_withdrawToken"" [label=""withdrawToken""];
""115_withdrawTokenTo"" [label=""withdrawTokenTo""];
""115_emtpyTo"" [label=""emtpyTo""];
""115_emtpyTo"" -> ""115_withdrawTokenTo"";
""115_withdrawToken"" -> ""115_withdrawTokenTo"";
""115_withdrawTokenTo"" -> ""115_onlyOwner"";
}
"
0x8668ef4534ec8716dede42807084a526ff4904e2.sol,BatchTransferContract,contract BatchTransferContract { using SafeMath for uint; using Math for uint; address public owner; function BatchTransferContract(address _owner) public { owner = _owner; },1,"subgraph cluster_309_BatchTransferContract {
label=""BatchTransferContract"";
""309_BatchTransferContract"" [label=""BatchTransferContract""];
""309_batchRefund"" [label=""batchRefund""];
""309_drain"" [label=""drain""];
""309_fallback"" [label=""fallback""];
}
"
0x515c5f699ba46bb43f720914b5615e00aa160871.sol,MultiSigWallet,"contract MultiSigWallet { uint constant public MAX_OWNER_COUNT = 50; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_962_MultiSigWallet {
label=""MultiSigWallet"";
""962_submitTransaction"" [label=""submitTransaction""];
""962_removeOwner"" [label=""removeOwner""];
""962_getConfirmationCount"" [label=""getConfirmationCount""];
""962_addOwner"" [label=""addOwner""];
""962_MultiSigWallet"" [label=""MultiSigWallet""];
""962_revokeConfirmation"" [label=""revokeConfirmation""];
""962_getOwners"" [label=""getOwners""];
""962_confirmTransaction"" [label=""confirmTransaction""];
""962_isConfirmed"" [label=""isConfirmed""];
""962_fallback"" [label=""fallback""];
""962_addTransaction"" [label=""addTransaction""];
""962_getConfirmations"" [label=""getConfirmations""];
""962_replaceOwner"" [label=""replaceOwner""];
""962_executeTransaction"" [label=""executeTransaction""];
""962_getTransactionCount"" [label=""getTransactionCount""];
""962_getTransactionIds"" [label=""getTransactionIds""];
""962_changeRequirement"" [label=""changeRequirement""];
""962_submitTransaction"" -> ""962_addTransaction"";
""962_removeOwner"" -> ""962_onlyWallet"";
""962_changeRequirement"" -> ""962_validRequirement"";
""962_confirmTransaction"" -> ""962_ownerExists"";
""962_replaceOwner"" -> ""962_ownerExists"";
""962_confirmTransaction"" -> ""962_notConfirmed"";
""962_addOwner"" -> ""962_ownerDoesNotExist"";
""962_removeOwner"" -> ""962_changeRequirement"";
""962_changeRequirement"" -> ""962_onlyWallet"";
""962_revokeConfirmation"" -> ""962_confirmed"";
""962_confirmTransaction"" -> ""962_transactionExists"";
""962_addTransaction"" -> ""962_notNull"";
""962_replaceOwner"" -> ""962_ownerDoesNotExist"";
""962_executeTransaction"" -> ""962_notExecuted"";
""962_addOwner"" -> ""962_validRequirement"";
""962_addOwner"" -> ""962_notNull"";
""962_confirmTransaction"" -> ""962_executeTransaction"";
""962_replaceOwner"" -> ""962_onlyWallet"";
""962_revokeConfirmation"" -> ""962_notExecuted"";
""962_submitTransaction"" -> ""962_confirmTransaction"";
""962_addOwner"" -> ""962_onlyWallet"";
""962_removeOwner"" -> ""962_ownerExists"";
""962_executeTransaction"" -> ""962_isConfirmed"";
""962_MultiSigWallet"" -> ""962_validRequirement"";
""962_revokeConfirmation"" -> ""962_ownerExists"";
}
"
0x0e915b35cc269b2dfc8bbd8e4a88ed4884a53efc.sol,CrowdSale,"contract CrowdSale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public startTime; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool public crowdsaleClosed = false ; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); event CrowdsaleClose(uint totalAmountRaised, bool fundingGoalReached); function CrowdSale( address ifSuccessfulSendTo, uint fundingGoalInEthers, uint startTimeInSeconds, uint durationInMinutes, uint szaboCostOfEachToken, address addressOfTokenUsedAsReward ) public { beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; startTime = startTimeInSeconds; deadline = startTimeInSeconds + durationInMinutes * 1 minutes; price = szaboCostOfEachToken * 1 finney; tokenReward = token(addressOfTokenUsedAsReward); }",1,"subgraph cluster_344_CrowdSale {
label=""CrowdSale"";
""344_safeWithdrawal"" [label=""safeWithdrawal""];
""344_CrowdSale"" [label=""CrowdSale""];
""344_closeCrowdsale"" [label=""closeCrowdsale""];
""344_checkGoalReached"" [label=""checkGoalReached""];
""344_purchase"" [label=""purchase""];
""344_shiftSalePurchase"" [label=""shiftSalePurchase""];
""344_fallback"" [label=""fallback""];
""344_closeCrowdsale"" -> ""344_isOwner"";
""344_safeWithdrawal"" -> ""344_isClosed"";
""344_fallback"" -> ""344_isOpen"";
""344_safeWithdrawal"" -> ""344_afterDeadline"";
""344_shiftSalePurchase"" -> ""344_purchase"";
""344_fallback"" -> ""344_purchase"";
""344_purchase"" -> ""344_checkGoalReached"";
""344_fallback"" -> ""344_afterStart"";
}
"
0xbcdc85a62e5f29930a43cc20d15fe96786873084.sol,ENJOY,contract ENJOY { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ENJOY {
label=""ENJOY"";
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x559cc6564ef51bd1ad9fbe752c9455cb6fb7feb1.sol,GuessNumber,contract GuessNumber { uint256 private randomNumber = uint256( keccak256(now) ) % 10 + 1; uint256 public lastPlayed; uint256 public minBet = 0.1 ether; address owner; struct GuessHistory { address player; uint256 number; },1,"subgraph cluster_122_GuessNumber {
label=""GuessNumber"";
""122_fallback"" [label=""fallback""];
""122_GuessNumber"" [label=""GuessNumber""];
""122_changeMinBet"" [label=""changeMinBet""];
""122_kill"" [label=""kill""];
""122_guessNumber"" [label=""guessNumber""];
""122_kill"" -> ""122_onlyOwner"";
""122_changeMinBet"" -> ""122_onlyOwner"";
}
"
0x0254ffd95dd7c8e27d4c7a32e24464196efcc852.sol,BEATA,"contract BEATA is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 10; uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function BEATA() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_BEATA {
label=""BEATA"";
""706__transfer"" [label=""_transfer""];
""706_BEATA"" [label=""BEATA""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x70bf9df6967dc96156e76cc43b928a7ef02e159a.sol,X_GAME,contract X_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_X_GAME {
label=""X_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_StopGame"" [label=""StopGame""];
}
"
0xd745a7883a6bd19389b6b9dc8580c2ff873f0cd1.sol,Earthpayment,"contract Earthpayment is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 7; uint256 public constant INITIAL_SUPPLY = 21000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function Earthpayment() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_Earthpayment {
label=""Earthpayment"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_Earthpayment"" [label=""Earthpayment""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x71a42fd60323204912468cd32a8283ed5d45a28f.sol,Slugroad,"contract Slugroad { using SafeMath for uint; event WithdrewBalance (address indexed player, uint eth); event BoughtSlug (address indexed player, uint eth, uint slug); event SkippedAhead (address indexed player, uint eth, uint slug); event TradedMile (address indexed player, uint eth, uint mile); event BecameDriver (address indexed player, uint eth); event TookWheel (address indexed player, uint eth); event ThrewSlug (address indexed player); event JumpedOut (address indexed player, uint eth); event TimeWarped (address indexed player, uint indexed loop, uint eth); event NewLoop (address indexed player, uint indexed loop); event PaidThrone (address indexed player, uint eth); event BoostedPot (address indexed player, uint eth); uint256 constant public RACE_TIMER_START = 604800; uint256 constant public HYPERSPEED_LENGTH = 3600; uint256 constant public THROW_SLUG_REQ = 200; uint256 constant public DRIVER_TIMER_BOOST = 360; uint256 constant public SLUG_COST_FLOOR = 0.000025 ether; uint256 constant public DIV_SLUG_COST = 10000; uint256 constant public TOKEN_MAX_BUY = 1 ether; uint256 constant public MIN_SPEED = 100; uint256 constant public MAX_SPEED = 1000; uint256 constant public ACCEL_FACTOR = 672; uint256 constant public MILE_REQ = 6000; address constant public SNAILTHRONE = 0x261d650a521103428C6827a11fc0CBCe96D74DBc; address public starter; bool public gameStarted; uint256 public loop; uint256 public timer; address public driver; bool public hyperSpeed = false; uint256 public lastHijack; uint256 public loopChest; uint256 public slugBank; uint256 public thronePot; uint256 public divPerSlug; uint256 public maxSlug; mapping (address => uint256) public slugNest; mapping (address => uint256) public playerBalance; mapping (address => uint256) public claimedDiv; mapping (address => uint256) public mile; constructor() public { starter = msg.sender; gameStarted = false; }",1,"subgraph cluster_1334_Slugroad {
label=""Slugroad"";
""1334_BecomeDriver"" [label=""BecomeDriver""];
""1334_ComputeSlugCost"" [label=""ComputeSlugCost""];
""1334_TradeMile"" [label=""TradeMile""];
""1334_StartRace"" [label=""StartRace""];
""1334_ComputeDiv"" [label=""ComputeDiv""];
""1334_ComputeMileDriven"" [label=""ComputeMileDriven""];
""1334_PotSplit"" [label=""PotSplit""];
""1334_PayThrone"" [label=""PayThrone""];
""1334_ComputeHyperReward"" [label=""ComputeHyperReward""];
""1334_GetBalance"" [label=""GetBalance""];
""1334_ComputeSpeed"" [label=""ComputeSpeed""];
""1334_TimeWarp"" [label=""TimeWarp""];
""1334_WithdrawBalance"" [label=""WithdrawBalance""];
""1334_GetMile"" [label=""GetMile""];
""1334_BuySlug"" [label=""BuySlug""];
""1334_fallback"" [label=""fallback""];
""1334_ComputeMileReward"" [label=""ComputeMileReward""];
""1334_ThrowSlug"" [label=""ThrowSlug""];
""1334_SkipAhead"" [label=""SkipAhead""];
""1334_GetNest"" [label=""GetNest""];
""1334_constructor"" [label=""constructor""];
""1334_ComputeBuy"" [label=""ComputeBuy""];
""1334_ClaimDiv"" [label=""ClaimDiv""];
""1334_JumpOut"" [label=""JumpOut""];
""1334_SkipAhead"" -> ""1334_BecomeDriver"";
""1334_JumpOut"" -> ""1334_ComputeHyperReward"";
""1334_ThrowSlug"" -> ""1334_ClaimDiv"";
""1334_JumpOut"" -> ""1334_ComputeMileDriven"";
""1334_BecomeDriver"" -> ""1334_ComputeMileDriven"";
""1334_TradeMile"" -> ""1334_ComputeMileReward"";
""1334_StartRace"" -> ""1334_BuySlug"";
""1334_TimeWarp"" -> ""1334_ComputeMileDriven"";
""1334_BuySlug"" -> ""1334_BecomeDriver"";
""1334_SkipAhead"" -> ""1334_ComputeBuy"";
""1334_BuySlug"" -> ""1334_ComputeBuy"";
""1334_ComputeBuy"" -> ""1334_ComputeSlugCost"";
""1334_ClaimDiv"" -> ""1334_ComputeDiv"";
""1334_ComputeMileDriven"" -> ""1334_ComputeSpeed"";
""1334_WithdrawBalance"" -> ""1334_ClaimDiv"";
""1334_ThrowSlug"" -> ""1334_BecomeDriver"";
""1334_SkipAhead"" -> ""1334_ClaimDiv"";
""1334_BuySlug"" -> ""1334_PotSplit"";
""1334_SkipAhead"" -> ""1334_PotSplit"";
}
"
0xd7afbf5141a7f1d6b0473175f7a6b0a7954ed3d2.sol,CryptoEngineer,contract CryptoEngineer is PullPayment{ address public administrator; uint256 public prizePool = 0; uint256 public numberOfEngineer = 8; uint256 public numberOfBoosts = 5; address public gameSponsor; uint256 public gameSponsorPrice = 0.32 ether; uint256 public VIRUS_MINING_PERIOD = 86400; uint256 public CRTSTAL_MINING_PERIOD = 86400; uint256 public BASE_PRICE = 0.01 ether; address public miningWarAddress; CryptoMiningWarInterface public MiningWar; mapping(address => Player) public players; mapping(uint256 => BoostData) public boostData; mapping(uint256 => EngineerData) public engineers; mapping(address => bool) public miniGames; struct Player { mapping(uint256 => uint256) engineersCount; uint256 virusNumber; uint256 research; uint256 lastUpdateTime; bool endLoadOldData; },1,"subgraph cluster_1963_CryptoEngineer {
label=""CryptoEngineer"";
""1963_buyBooster"" [label=""buyBooster""];
""1963_buyEngineer"" [label=""buyEngineer""];
""1963_hasBooster"" [label=""hasBooster""];
""1963_addVirus"" [label=""addVirus""];
""1963_setPlayerEngineersCount"" [label=""setPlayerEngineersCount""];
""1963_initBoostData"" [label=""initBoostData""];
""1963_devFee"" [label=""devFee""];
""1963_setGameSponsorInfo"" [label=""setGameSponsorInfo""];
""1963_getBoosterData"" [label=""getBoosterData""];
""1963_isEngineerContract"" [label=""isEngineerContract""];
""1963_becomeGameSponsor"" [label=""becomeGameSponsor""];
""1963_upgrade"" [label=""upgrade""];
""1963_setPlayerLastUpdateTime"" [label=""setPlayerLastUpdateTime""];
""1963_claimPrizePool"" [label=""claimPrizePool""];
""1963_updateVirus"" [label=""updateVirus""];
""1963_setBoostData"" [label=""setBoostData""];
""1963_addEngineer"" [label=""addEngineer""];
""1963_calCurrentCrystals"" [label=""calCurrentCrystals""];
""1963_calCurrentVirus"" [label=""calCurrentVirus""];
""1963_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1963_isContractMiniGame"" [label=""isContractMiniGame""];
""1963_addPrizePool"" [label=""addPrizePool""];
""1963_addMiningWarPrizePool"" [label=""addMiningWarPrizePool""];
""1963_getResearchPerDay"" [label=""getResearchPerDay""];
""1963_subVirus"" [label=""subVirus""];
""1963_setPlayerResearch"" [label=""setPlayerResearch""];
""1963_getPlayerData"" [label=""getPlayerData""];
""1963_initEngineer"" [label=""initEngineer""];
""1963_distributedToOwner"" [label=""distributedToOwner""];
""1963_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1963_subResearch"" [label=""subResearch""];
""1963_setupMiniGame"" [label=""setupMiniGame""];
""1963_constructor"" [label=""constructor""];
""1963_setContractsMiniGame"" [label=""setContractsMiniGame""];
""1963_updateResearch"" [label=""updateResearch""];
""1963_addResearch"" [label=""addResearch""];
""1963_fallback"" [label=""fallback""];
""1963_setPlayerVirusNumber"" [label=""setPlayerVirusNumber""];
""1963_getResearchPerDay"" -> ""1963_hasBooster"";
""1963_buyEngineer"" -> ""1963_devFee"";
""1963_buyEngineer"" -> ""1963_updateResearch"";
""1963_becomeGameSponsor"" -> ""1963_addPrizePool"";
""1963_setGameSponsorInfo"" -> ""1963_onlyContractsMiniGame"";
""1963_fallback"" -> ""1963_addPrizePool"";
""1963_buyBooster"" -> ""1963_distributedToOwner"";
""1963_setContractsMiniGame"" -> ""1963_isAdministrator"";
""1963_setBoostData"" -> ""1963_onlyContractsMiniGame"";
""1963_buyEngineer"" -> ""1963_addPrizePool"";
""1963_buyEngineer"" -> ""1963_distributedToOwner"";
""1963_addEngineer"" -> ""1963_isAdministrator"";
""1963_addResearch"" -> ""1963_updateVirus"";
""1963_setPlayerEngineersCount"" -> ""1963_onlyContractsMiniGame"";
""1963_setPlayerLastUpdateTime"" -> ""1963_onlyContractsMiniGame"";
""1963_becomeGameSponsor"" -> ""1963_disableContract"";
""1963_upgrade"" -> ""1963_isAdministrator"";
""1963_addResearch"" -> ""1963_onlyContractsMiniGame"";
""1963_updateVirus"" -> ""1963_calCurrentVirus"";
""1963_subVirus"" -> ""1963_updateVirus"";
""1963_getPlayerData"" -> ""1963_getResearchPerDay"";
""1963_setMiningWarInterface"" -> ""1963_isAdministrator"";
""1963_addEngineer"" -> ""1963_updateVirus"";
""1963_buyBooster"" -> ""1963_addMiningWarPrizePool"";
""1963_buyBooster"" -> ""1963_addPrizePool"";
""1963_buyEngineer"" -> ""1963_updateVirus"";
""1963_constructor"" -> ""1963_initEngineer"";
""1963_removeContractMiniGame"" -> ""1963_isAdministrator"";
""1963_constructor"" -> ""1963_setMiningWarInterface"";
""1963_calCurrentVirus"" -> ""1963_getResearchPerDay"";
""1963_claimPrizePool"" -> ""1963_onlyContractsMiniGame"";
""1963_buyEngineer"" -> ""1963_disableContract"";
""1963_getPlayerData"" -> ""1963_calCurrentVirus"";
""1963_subVirus"" -> ""1963_onlyContractsMiniGame"";
""1963_subResearch"" -> ""1963_onlyContractsMiniGame"";
""1963_addVirus"" -> ""1963_onlyContractsMiniGame"";
""1963_subResearch"" -> ""1963_updateVirus"";
""1963_buyBooster"" -> ""1963_devFee"";
""1963_buyBooster"" -> ""1963_updateVirus"";
""1963_setPlayerResearch"" -> ""1963_onlyContractsMiniGame"";
""1963_setPlayerVirusNumber"" -> ""1963_onlyContractsMiniGame"";
""1963_addEngineer"" -> ""1963_updateResearch"";
""1963_buyEngineer"" -> ""1963_addMiningWarPrizePool"";
""1963_constructor"" -> ""1963_initBoostData"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllRefundEscrow,contract ClinicAllRefundEscrow is RefundEscrow { using Math for uint256; struct RefundeeRecord { bool isRefunded; uint256 index; },1,"subgraph cluster_2170_ClinicAllRefundEscrow {
label=""ClinicAllRefundEscrow"";
""2170_deposit"" [label=""deposit""];
""2170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""2170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""2170_withdrawChunk"" [label=""withdrawChunk""];
""2170_withdraw"" [label=""withdraw""];
""2170_close"" [label=""close""];
""2170_removeRefundeeByIndex"" [label=""removeRefundeeByIndex""];
""2170_refundeesListLength"" [label=""refundeesListLength""];
""2170_withdrawEverything"" [label=""withdrawEverything""];
""2170_depositsOf"" [label=""depositsOf""];
""2170_beneficiaryDepositsOf"" [label=""beneficiaryDepositsOf""];
""2170_constructor"" [label=""constructor""];
""2170_depositFunds"" [label=""depositFunds""];
""2170_manualRefund"" [label=""manualRefund""];
""2170_withdrawChunk"" -> ""2170_removeRefundeeByIndex"";
""2170_manualRefund"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_onlyOwner"";
""2170_close"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawChunk"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawAll"" -> ""2170_onlyOwner"";
""2170_constructor"" -> ""2170_constructor"";
""2170_close"" -> ""2170_close"";
""2170_manualRefund"" -> ""2170_depositsOf"";
""2170_manualRefund"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_withdrawChunk"";
""2170_depositFunds"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_depositsOf"";
""2170_refundeesListLength"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_depositsOf"";
}
"
0x1e85407e080a5e6d20a3a95fcdddfc32146fc8e5.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1223_MiniMeToken {
label=""MiniMeToken"";
""1223_approve"" [label=""approve""];
""1223_createCloneToken"" [label=""createCloneToken""];
""1223_doApprove"" [label=""doApprove""];
""1223_isContract"" [label=""isContract""];
""1223_doTransfer"" [label=""doTransfer""];
""1223_destroyTokens"" [label=""destroyTokens""];
""1223_totalSupplyAt"" [label=""totalSupplyAt""];
""1223_constructor"" [label=""constructor""];
""1223_balanceOf"" [label=""balanceOf""];
""1223_updateValueAtNow"" [label=""updateValueAtNow""];
""1223_generateTokens"" [label=""generateTokens""];
""1223_balanceOfAt"" [label=""balanceOfAt""];
""1223_min"" [label=""min""];
""1223_claimTokens"" [label=""claimTokens""];
""1223_approveAndCall"" [label=""approveAndCall""];
""1223_transfer"" [label=""transfer""];
""1223_enableTransfers"" [label=""enableTransfers""];
""1223_allowance"" [label=""allowance""];
""1223_fallback"" [label=""fallback""];
""1223_transferFrom"" [label=""transferFrom""];
""1223_getValueAt"" [label=""getValueAt""];
""1223_totalSupply"" [label=""totalSupply""];
""1223_balanceOf"" -> ""1223_balanceOfAt"";
""1223_destroyTokens"" -> ""1223_updateValueAtNow"";
""1223_enableTransfers"" -> ""1223_onlyController"";
""1223_fallback"" -> ""1223_isContract"";
""1223_approveAndCall"" -> ""1223_approve"";
""1223_totalSupply"" -> ""1223_totalSupplyAt"";
""1223_destroyTokens"" -> ""1223_onlyController"";
""1223_claimTokens"" -> ""1223_onlyController"";
""1223_generateTokens"" -> ""1223_updateValueAtNow"";
""1223_doTransfer"" -> ""1223_balanceOfAt"";
""1223_destroyTokens"" -> ""1223_balanceOf"";
""1223_balanceOfAt"" -> ""1223_min"";
""1223_totalSupplyAt"" -> ""1223_min"";
""1223_doTransfer"" -> ""1223_isContract"";
""1223_transfer"" -> ""1223_doTransfer"";
""1223_generateTokens"" -> ""1223_balanceOf"";
""1223_generateTokens"" -> ""1223_totalSupply"";
""1223_destroyTokens"" -> ""1223_totalSupply"";
""1223_generateTokens"" -> ""1223_onlyController"";
""1223_doApprove"" -> ""1223_isContract"";
""1223_balanceOfAt"" -> ""1223_getValueAt"";
""1223_approve"" -> ""1223_doApprove"";
""1223_doTransfer"" -> ""1223_updateValueAtNow"";
""1223_transferFrom"" -> ""1223_doTransfer"";
""1223_totalSupplyAt"" -> ""1223_getValueAt"";
}
"
0x5094f35a78dbe896c4f357bf9165448be40309de.sol,Preallocation,"contract Preallocation is Ownable { using SafeMath for uint; address public investor; uint public maxBalance; enum States { Pending, Success, Fail }",1,"subgraph cluster_346_Preallocation {
label=""Preallocation"";
""346_setFailed"" [label=""setFailed""];
""346_buyTokens"" [label=""buyTokens""];
""346_setInvestor"" [label=""setInvestor""];
""346_Preallocation"" [label=""Preallocation""];
""346_withdraw"" [label=""withdraw""];
""346_fallback"" [label=""fallback""];
""346_stateIs"" [label=""stateIs""];
""346_setFailed"" -> ""346_onlyOwner"";
""346_withdraw"" -> ""346_notState"";
""346_setInvestor"" -> ""346_onlyOwner"";
""346_buyTokens"" -> ""346_onlyOwner"";
""346_withdraw"" -> ""346_onlyOwner"";
}
"
0x184b8e35fea87e75498705ea96f2326db8ee2470.sol,AirDrop,contract AirDrop is Ownable { Token public tokenInstance; constructor(address _tokenAddress) public { tokenInstance = Token(_tokenAddress); },1,"subgraph cluster_233_AirDrop {
label=""AirDrop"";
""233_doAirDrop"" [label=""doAirDrop""];
""233_transferEthToOnwer"" [label=""transferEthToOnwer""];
""233_constructor"" [label=""constructor""];
""233_fallback"" [label=""fallback""];
""233_sendBatch"" [label=""sendBatch""];
""233_kill"" [label=""kill""];
""233_transferEthToOnwer"" -> ""233_onlyOwner"";
""233_doAirDrop"" -> ""233_onlyOwner"";
""233_kill"" -> ""233_onlyOwner"";
""233_sendBatch"" -> ""233_onlyOwner"";
}
"
0x522055cdfabaed68f1fc579f18cd7a8a6e0ab79a.sol,AceDice,contract AceDice is usingOraclize { uint constant HOUSE_EDGE_PERCENT = 2; uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0004 ether; uint constant MIN_JACKPOT_BET = 0.1 ether; uint constant JACKPOT_MODULO = 1000; uint constant JACKPOT_FEE = 0.001 ether; uint constant MIN_BET = 0.01 ether; uint constant MAX_AMOUNT = 300000 ether; uint constant MAX_MASK_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO; uint constant BET_EXPIRATION_BLOCKS = 250; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; address public owner; address private nextOwner; uint public maxProfit; address public secretSigner; uint128 public jackpotSize; uint64 public oraclizeGasLimit; uint public oraclizeGasPrice; uint public todaysRewardSize; uint128 public lockedInBets; struct Bet { uint amount; uint8 rollUnder; uint40 placeBlockNumber; uint40 mask; address gambler; address inviter; },1,"subgraph cluster_7468_AceDice {
label=""AceDice"";
""7468_fallback"" [label=""fallback""];
""7468_setNickName"" [label=""setNickName""];
""7468_refundBet"" [label=""refundBet""];
""7468_getSecretSigner"" [label=""getSecretSigner""];
""7468_payTodayReward"" [label=""payTodayReward""];
""7468_setMaxProfit"" [label=""setMaxProfit""];
""7468_setAvatarIndex"" [label=""setAvatarIndex""];
""7468_increaseJackpot"" [label=""increaseJackpot""];
""7468_kill"" [label=""kill""];
""7468_placeBetWithInviter"" [label=""placeBetWithInviter""];
""7468___callback"" [label=""__callback""];
""7468_acceptNextOwner"" [label=""acceptNextOwner""];
""7468_setCroupier"" [label=""setCroupier""];
""7468_getMyAccuAmount"" [label=""getMyAccuAmount""];
""7468_setOraclizeGasLimit"" [label=""setOraclizeGasLimit""];
""7468_setSecretSigner"" [label=""setSecretSigner""];
""7468_setOraclizeGasPrice"" [label=""setOraclizeGasPrice""];
""7468_approveNextOwner"" [label=""approveNextOwner""];
""7468_sendFunds"" [label=""sendFunds""];
""7468_getDiceWinAmount"" [label=""getDiceWinAmount""];
""7468_thisBalance"" [label=""thisBalance""];
""7468_getProfile"" [label=""getProfile""];
""7468_applyVIPLevel"" [label=""applyVIPLevel""];
""7468_constructor"" [label=""constructor""];
""7468_settleBetCommon"" [label=""settleBetCommon""];
""7468_placeBet"" [label=""placeBet""];
""7468_withdrawFunds"" [label=""withdrawFunds""];
""7468___callback"" -> ""7468_parseInt"";
""7468_settleBetCommon"" -> ""7468_applyVIPLevel"";
""7468_placeBet"" -> ""7468_getDiceWinAmount"";
""7468_placeBetWithInviter"" -> ""7468_getDiceWinAmount"";
""7468_setOraclizeGasPrice"" -> ""7468_onlyOwner"";
""7468_setOraclizeGasLimit"" -> ""7468_onlyOwner"";
""7468___callback"" -> ""7468_onlyOraclize"";
""7468_setSecretSigner"" -> ""7468_onlyOwner"";
""7468_refundBet"" -> ""7468_sendFunds"";
""7468_approveNextOwner"" -> ""7468_onlyOwner"";
""7468_settleBetCommon"" -> ""7468_getDiceWinAmount"";
""7468_increaseJackpot"" -> ""7468_onlyOwner"";
""7468_setMaxProfit"" -> ""7468_onlyOwner"";
""7468_kill"" -> ""7468_onlyOwner"";
""7468_placeBet"" -> ""7468_oraclize_query"";
""7468_constructor"" -> ""7468_oraclize_setCustomGasPrice"";
""7468_constructor"" -> ""7468_oraclize_setNetwork"";
""7468_payTodayReward"" -> ""7468_onlyOwner"";
""7468_setOraclizeGasPrice"" -> ""7468_oraclize_setCustomGasPrice"";
""7468_withdrawFunds"" -> ""7468_onlyOwner"";
""7468_getSecretSigner"" -> ""7468_onlyOwner"";
""7468_settleBetCommon"" -> ""7468_sendFunds"";
""7468___callback"" -> ""7468_settleBetCommon"";
""7468_setCroupier"" -> ""7468_onlyOwner"";
""7468_withdrawFunds"" -> ""7468_sendFunds"";
""7468_placeBetWithInviter"" -> ""7468_oraclize_query"";
""7468_refundBet"" -> ""7468_getDiceWinAmount"";
}
"
0xdcb5410ef70f59a5a2839fc6d4d0b2ca981f5e2d.sol,CoinMmc,"contract CoinMmc { address public admin_address = 0x64b33dB1Cc804e7CA51D9c21F132567923D7BA00; address public account_address = 0x64b33dB1Cc804e7CA51D9c21F132567923D7BA00; mapping(address => uint256) balances; string public name = ; string public symbol = ; uint8 public decimals = 2; uint256 initSupply = 1000000000000; uint256 public totalSupply = 0; constructor() payable public { totalSupply = mul(initSupply, 10**uint256(decimals)); balances[account_address] = totalSupply; _add_lock_account(0x6efB62605A66E32582c37b835F81Bc91A6a8fb2e, mul(80000000000,10**uint256(decimals)), 1596815160); _add_lock_account(0x0ba46c0fC6a5C206855cEf215222e347E1559eDf, mul(120000000000,10**uint256(decimals)), 1596815160); _add_lock_account(0xE269695D497387DfEAFE12b0b3B54441683F63C8, mul(100000000000,10**uint256(decimals)), 1628351160); }",1,"subgraph cluster_1187_CoinMmc {
label=""CoinMmc"";
""1187_transfer"" [label=""transfer""];
""1187_constructor"" [label=""constructor""];
""1187_increaseApproval"" [label=""increaseApproval""];
""1187_div"" [label=""div""];
""1187_sub"" [label=""sub""];
""1187_allowance"" [label=""allowance""];
""1187_fallback"" [label=""fallback""];
""1187_withDraw"" [label=""withDraw""];
""1187_burn"" [label=""burn""];
""1187_setAdmin"" [label=""setAdmin""];
""1187_add"" [label=""add""];
""1187_setAirDrop"" [label=""setAirDrop""];
""1187_balanceOf"" [label=""balanceOf""];
""1187__add_lock_account"" [label=""_add_lock_account""];
""1187_buyTokens"" [label=""buyTokens""];
""1187_transferFrom"" [label=""transferFrom""];
""1187_mul"" [label=""mul""];
""1187_setDirectDrop"" [label=""setDirectDrop""];
""1187_decreaseApproval"" [label=""decreaseApproval""];
""1187__burn"" [label=""_burn""];
""1187_airDrop"" [label=""airDrop""];
""1187_approve"" [label=""approve""];
""1187_airDrop"" -> ""1187_add"";
""1187_constructor"" -> ""1187_mul"";
""1187_constructor"" -> ""1187__add_lock_account"";
""1187_buyTokens"" -> ""1187_mul"";
""1187_setAdmin"" -> ""1187_admin_only"";
""1187__burn"" -> ""1187_sub"";
""1187_setAirDrop"" -> ""1187_admin_only"";
""1187_buyTokens"" -> ""1187_div"";
""1187_increaseApproval"" -> ""1187_add"";
""1187_buyTokens"" -> ""1187_sub"";
""1187_buyTokens"" -> ""1187_add"";
""1187_airDrop"" -> ""1187_mul"";
""1187_decreaseApproval"" -> ""1187_sub"";
""1187_transferFrom"" -> ""1187_add"";
""1187_airDrop"" -> ""1187_sub"";
""1187_burn"" -> ""1187__burn"";
""1187_fallback"" -> ""1187_buyTokens"";
""1187_transfer"" -> ""1187_sub"";
""1187_fallback"" -> ""1187_airDrop"";
""1187_setDirectDrop"" -> ""1187_admin_only"";
""1187_transferFrom"" -> ""1187_sub"";
""1187_transfer"" -> ""1187_add"";
}
"
0xdccedb215833b58c8c624abe5b5c715844248816.sol,QuiZ_blIZ,contract QuiZ_blIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_QuiZ_blIZ {
label=""QuiZ_blIZ"";
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_New"" [label=""New""];
""148_Start"" [label=""Start""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_2222_RefundVault {
label=""RefundVault"";
""2222_refund"" [label=""refund""];
""2222_enableRefunds"" [label=""enableRefunds""];
""2222_deposit"" [label=""deposit""];
""2222_close"" [label=""close""];
""2222_RefundVault"" [label=""RefundVault""];
""2222_deposit"" -> ""2222_onlyOwner"";
""2222_close"" -> ""2222_onlyOwner"";
""2222_enableRefunds"" -> ""2222_onlyOwner"";
}
"
0xa4fd4ba726139d42d7b7cf18a064600cafac4f97.sol,TFTOKEN,"contract TFTOKEN is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 3; uint256 public constant INITIAL_SUPPLY = 70000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function TFTOKEN() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_TFTOKEN {
label=""TFTOKEN"";
""706_TFTOKEN"" [label=""TFTOKEN""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x72ebd62060f78d91dc4bc33e8d88f39307365f87.sol,SEA,"contract SEA { using SafeMath for uint256; string public name; string public symbol; uint256 public decimals; uint256 public totalSupply; address public owner; uint256 public basisPointsRate = 0; uint256 public maximumFee = 0; uint256 public minimumFee = 0; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezes; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed _from, address indexed _to, uint256 _value); event CollectFee(address indexed _from, address indexed _owner, uint256 fee); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Params(address indexed _owner, uint256 feeBasisPoints, uint256 minFee, uint256 maxFee); event Freeze(address indexed to, uint256 value); event Unfreeze(address indexed to, uint256 value); event Withdraw(address indexed to, uint256 value); constructor(uint256 initialSupply, uint8 decimalUnits, string tokenName, string tokenSymbol) public { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; owner = msg.sender; }",1,"subgraph cluster_827_SEA {
label=""SEA"";
""827_calFee"" [label=""calFee""];
""827_withdrawEther"" [label=""withdrawEther""];
""827_transferFrom"" [label=""transferFrom""];
""827_fallback"" [label=""fallback""];
""827_destructor"" [label=""destructor""];
""827_setParams"" [label=""setParams""];
""827_constructor"" [label=""constructor""];
""827_approve"" [label=""approve""];
""827_transfer"" [label=""transfer""];
""827_unfreeze"" [label=""unfreeze""];
""827_freeze"" [label=""freeze""];
""827_transferFrom"" -> ""827_calFee"";
""827_transfer"" -> ""827_calFee"";
}
"
0x4c0fbe1bb46612915e7967d2c3213cd4d87257ad.sol,ApisCrowdSale,contract ApisCrowdSale is Ownable { uint8 public constant decimals = 18; uint256 public fundingGoal; uint256 public fundingGoalCurrent; uint256 public priceOfApisPerFund; uint public startTime; uint public endTime; bool closed = false; SaleStatus public saleStatus; ApisToken internal tokenReward; WhiteList internal whiteList; mapping (address => Property) public fundersProperty; struct Property { uint256 reservedFunds; uint256 paidFunds; uint256 reservedApis; uint256 withdrawedApis; uint purchaseTime; },1,"subgraph cluster_2106_ApisCrowdSale {
label=""ApisCrowdSale"";
""2106_ApisCrowdSale"" [label=""ApisCrowdSale""];
""2106_claimMyApis"" [label=""claimMyApis""];
""2106_closeSale"" [label=""closeSale""];
""2106_whiteListOf"" [label=""whiteListOf""];
""2106_claimApis"" [label=""claimApis""];
""2106_isOpened"" [label=""isOpened""];
""2106_refundByOwner"" [label=""refundByOwner""];
""2106_isClaimable"" [label=""isClaimable""];
""2106_withdrawalFunds"" [label=""withdrawalFunds""];
""2106_fallback"" [label=""fallback""];
""2106_setCurrentFundingGoal"" [label=""setCurrentFundingGoal""];
""2106_buyToken"" [label=""buyToken""];
""2106_withdrawal"" [label=""withdrawal""];
""2106_setPriceOfApis"" [label=""setPriceOfApis""];
""2106_balanceOf"" [label=""balanceOf""];
""2106_closeSale"" -> ""2106_onlyOwner"";
""2106_buyToken"" -> ""2106_onSale"";
""2106_claimMyApis"" -> ""2106_claimable"";
""2106_setPriceOfApis"" -> ""2106_onlyOwner"";
""2106_buyToken"" -> ""2106_withdrawal"";
""2106_claimApis"" -> ""2106_withdrawal"";
""2106_withdrawalFunds"" -> ""2106_onlyOwner"";
""2106_claimMyApis"" -> ""2106_withdrawal"";
""2106_fallback"" -> ""2106_onSale"";
""2106_refundByOwner"" -> ""2106_onlyOwner"";
""2106_fallback"" -> ""2106_buyToken"";
""2106_setCurrentFundingGoal"" -> ""2106_onlyOwner"";
}
"
0x1860b26155ce3319ace6d1a7ad3a363b58bc97c5.sol,MatchBetting,contract MatchBetting { using SafeMath for uint256; struct Team { string name; mapping(address => uint) bettingContribution; mapping(address => uint) ledgerBettingContribution; uint totalAmount; uint totalParticipants; },1,"subgraph cluster_835_MatchBetting {
label=""MatchBetting"";
""835_placeBet"" [label=""placeBet""];
""835_getEther"" [label=""getEther""];
""835_compareStrings"" [label=""compareStrings""];
""835_setMatchOutcome"" [label=""setMatchOutcome""];
""835_getBetters"" [label=""getBetters""];
""835_getMatchInfo"" [label=""getMatchInfo""];
""835_ledgerUserBetContribution"" [label=""ledgerUserBetContribution""];
""835_setStopMatchBetting"" [label=""setStopMatchBetting""];
""835_MatchBetting"" [label=""MatchBetting""];
""835_userBetContribution"" [label=""userBetContribution""];
""835_setMatchOutcome"" -> ""835_onlyOwner"";
""835_setMatchOutcome"" -> ""835_compareStrings"";
""835_setStopMatchBetting"" -> ""835_onlyOwner"";
}
"
0x6e5dce687b949b52dad8bb1cc467d0205cb4b6e3.sol,CAC,"contract CAC is StandardToken, BurnableToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 50000000000 * (10 ** uint256(decimals)); mapping(address => uint256) public balanceLocked; mapping(address => uint256) public lockAtTime; uint public amountRaised; uint256 public buyPrice = 250000; bool public crowdsaleClosed; bool public transferEnabled = true; function CAC() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_1239_CAC {
label=""CAC"";
""1239_enableTransfer"" [label=""enableTransfer""];
""1239_getFreeBalances"" [label=""getFreeBalances""];
""1239_setPrices"" [label=""setPrices""];
""1239_lockAddress"" [label=""lockAddress""];
""1239_checkLocked"" [label=""checkLocked""];
""1239_CAC"" [label=""CAC""];
""1239__transfer"" [label=""_transfer""];
""1239_transferEx"" [label=""transferEx""];
""1239_transfer"" [label=""transfer""];
""1239_batchTransfer"" [label=""batchTransfer""];
""1239_unlockAddress"" [label=""unlockAddress""];
""1239__lock"" [label=""_lock""];
""1239_safeWithdrawal"" [label=""safeWithdrawal""];
""1239_transferFrom"" [label=""transferFrom""];
""1239_fallback"" [label=""fallback""];
""1239_transferFrom"" -> ""1239_transferFrom"";
""1239_setPrices"" -> ""1239_onlyOwner"";
""1239_transfer"" -> ""1239_transfer"";
""1239_lockAddress"" -> ""1239_onlyOwner"";
""1239_batchTransfer"" -> ""1239_onlyOwner"";
""1239_transferEx"" -> ""1239_onlyOwner"";
""1239_transfer"" -> ""1239_checkLocked"";
""1239_transferEx"" -> ""1239_transfer"";
""1239_fallback"" -> ""1239__transfer"";
""1239_safeWithdrawal"" -> ""1239_onlyOwner"";
""1239__transfer"" -> ""1239__lock"";
""1239_transferFrom"" -> ""1239_checkLocked"";
""1239_enableTransfer"" -> ""1239_onlyOwner"";
""1239_unlockAddress"" -> ""1239_onlyOwner"";
""1239_lockAddress"" -> ""1239__lock"";
}
"
0x07c206f253605a9ac4e21a9cf99d7841e8636468.sol,RYCSale,"contract RYCSale { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; address public owner; uint public amountRaised; uint public refundAmount; uint public rate = 5000; uint public constant LOW_RANGE_RATE = 1; uint public constant HIGH_RANGE_RATE = 30000; bool private rentrancy_lock = false; bool public paused = false; RYCToken public tokenReward; mapping(address => uint256) public balanceOf; mapping(address => uint256) public contributions; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); event Pause(); event Unpause(); modifier beforeDeadline() {require (currentTime() < endTime); _;}",1,"subgraph cluster_1603_RYCSale {
label=""RYCSale"";
""1603_unpause"" [label=""unpause""];
""1603_setRate"" [label=""setRate""];
""1603_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1603_checkFundingGoal"" [label=""checkFundingGoal""];
""1603_convertToMiniRYC"" [label=""convertToMiniRYC""];
""1603_changeStartTime"" [label=""changeStartTime""];
""1603_fallback"" [label=""fallback""];
""1603_pause"" [label=""pause""];
""1603_checkFundingCap"" [label=""checkFundingCap""];
""1603_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1603_constructor"" [label=""constructor""];
""1603_changeEndTime"" [label=""changeEndTime""];
""1603_terminate"" [label=""terminate""];
""1603_safeWithdrawal"" [label=""safeWithdrawal""];
""1603_currentTime"" [label=""currentTime""];
""1603_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1603_changeEndTime"" -> ""1603_onlyOwner"";
""1603_fallback"" -> ""1603_checkFundingCap"";
""1603_changeStartTime"" -> ""1603_onlyOwner"";
""1603_ownerSafeWithdrawal"" -> ""1603_onlyOwner"";
""1603_ownerAllocateTokens"" -> ""1603_checkFundingCap"";
""1603_unpause"" -> ""1603_onlyOwner"";
""1603_fallback"" -> ""1603_saleNotClosed"";
""1603_unpause"" -> ""1603_whenPaused"";
""1603_pause"" -> ""1603_whenNotPaused"";
""1603_setRate"" -> ""1603_onlyOwner"";
""1603_fallback"" -> ""1603_afterStartTime"";
""1603_ownerSafeWithdrawal"" -> ""1603_nonReentrant"";
""1603_ownerAllocateTokens"" -> ""1603_onlyOwner"";
""1603_fallback"" -> ""1603_nonReentrant"";
""1603_terminate"" -> ""1603_onlyOwner"";
""1603_ownerAllocateTokens"" -> ""1603_checkFundingGoal"";
""1603_pause"" -> ""1603_onlyOwner"";
""1603_safeWithdrawal"" -> ""1603_afterDeadline"";
""1603_fallback"" -> ""1603_beforeDeadline"";
""1603_ownerUnlockFund"" -> ""1603_afterDeadline"";
""1603_safeWithdrawal"" -> ""1603_nonReentrant"";
""1603_fallback"" -> ""1603_checkFundingGoal"";
""1603_fallback"" -> ""1603_whenNotPaused"";
""1603_ownerUnlockFund"" -> ""1603_onlyOwner"";
""1603_ownerAllocateTokens"" -> ""1603_nonReentrant"";
}
"
0xee53ca3ae3d296c0f2a128138d12a0a3a60fa1f5.sol,ZethrShell,contract ZethrShell is ZethrBankrollBridge { function WithdrawToBankroll() public { address(UsedBankrollAddresses[0]).transfer(address(this).balance); },1,"subgraph cluster_240_ZethrShell {
label=""ZethrShell"";
""240_WithdrawAndTransferToBankroll"" [label=""WithdrawAndTransferToBankroll""];
""240_WithdrawToBankroll"" [label=""WithdrawToBankroll""];
""240_WithdrawAndTransferToBankroll"" -> ""240_WithdrawToBankroll"";
}
"
0xf165c0df0b759e93e6166aecb667c7ec2a300525.sol,TokenICOGAT,contract TokenICOGAT is StandarTokentokenGAT{ address owner = msg.sender; function name() constant returns (string) { return ; },1,"subgraph cluster_854_TokenICOGAT {
label=""TokenICOGAT"";
""854_bonusCalculate"" [label=""bonusCalculate""];
""854_withdrawEtherHomeExternal"" [label=""withdrawEtherHomeExternal""];
""854_disablePurchasing"" [label=""disablePurchasing""];
""854_fallback"" [label=""fallback""];
""854_getStats"" [label=""getStats""];
""854_symbol"" [label=""symbol""];
""854_enablePurchasing"" [label=""enablePurchasing""];
""854_TokenICOGAT"" [label=""TokenICOGAT""];
""854_refund"" [label=""refund""];
""854_sendSurplusTokens"" [label=""sendSurplusTokens""];
""854_name"" [label=""name""];
""854_withdrawEtherHomeLocal"" [label=""withdrawEtherHomeLocal""];
""854_fallback"" -> ""854_bonusCalculate"";
}
"
0x264979ffd35d608e69b69681f4bbcba9877e6c4a.sol,qz_game,contract qz_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_127_qz_game {
label=""qz_game"";
""127_StopGame"" [label=""StopGame""];
""127_fallback"" [label=""fallback""];
""127_newQuestioner"" [label=""newQuestioner""];
""127_start_qz_game"" [label=""start_qz_game""];
""127_NewQuestion"" [label=""NewQuestion""];
""127_Try"" [label=""Try""];
""127_newQuestioner"" -> ""127_onlyQuestionSender"";
""127_StopGame"" -> ""127_onlyQuestionSender"";
""127_NewQuestion"" -> ""127_onlyQuestionSender"";
}
"
0xeee95f7af91b4611c0a707a0012e3ba06f7ca8d9.sol,quiz_game,contract quiz_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_quiz_game {
label=""quiz_game"";
""143_Activate"" [label=""Activate""];
""143_Try"" [label=""Try""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_StopGame"" [label=""StopGame""];
""143_fallback"" [label=""fallback""];
""143_newQuestioner"" [label=""newQuestioner""];
}
"
0xf0344800bd3ffa687e4d780357961b28995a5f46.sol,QUIZ_GAME,contract QUIZ_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_QUIZ_GAME {
label=""QUIZ_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_StartGame"" [label=""StartGame""];
}
"
0x447b4ccab1b370afbe5ae2e68c0b700be913a585.sol,AgileCycle,contract AgileCycle { using SafeMath for uint; address public operator; address public juryOperator; uint public promisedTokens; uint public raisedEther; bool public tokenReleaseAtStart; address public icoAddress; address public arbitrationAddress; bool public roundFailedToStart; address public projectWallet; address public juryOnlineWallet; struct Milestone { uint etherAmount; uint tokenAmount; uint startTime; uint finishTime; uint duration; string description; string result; },1,"subgraph cluster_3174_AgileCycle {
label=""AgileCycle"";
""3174_currentMilestone"" [label=""currentMilestone""];
""3174_assignPartition"" [label=""assignPartition""];
""3174_withdrawToken"" [label=""withdrawToken""];
""3174_finishedTimeStamp"" [label=""finishedTimeStamp""];
""3174_approveCycle"" [label=""approveCycle""];
""3174_sealTimestamp"" [label=""sealTimestamp""];
""3174_milestonesLength"" [label=""milestonesLength""];
""3174_editMilestone"" [label=""editMilestone""];
""3174_addMilestonesAndSeal"" [label=""addMilestonesAndSeal""];
""3174_payCommission"" [label=""payCommission""];
""3174_seal"" [label=""seal""];
""3174_addMilestone"" [label=""addMilestone""];
""3174_failSafe"" [label=""failSafe""];
""3174_startMilestone"" [label=""startMilestone""];
""3174_setToken"" [label=""setToken""];
""3174_disputeOpened"" [label=""disputeOpened""];
""3174_offerAccepted"" [label=""offerAccepted""];
""3174_promisedTokens"" [label=""promisedTokens""];
""3174_finishMilestone"" [label=""finishMilestone""];
""3174_withdrawEther"" [label=""withdrawEther""];
""3174_constructor"" [label=""constructor""];
""3174_investorExists"" [label=""investorExists""];
""3174_verdictExecuted"" [label=""verdictExecuted""];
""3174_addMilestone"" -> ""3174_only"";
""3174_startMilestone"" -> ""3174_payCommission"";
""3174_disputeOpened"" -> ""3174_only"";
""3174_startMilestone"" -> ""3174_sealed"";
""3174_setToken"" -> ""3174_only"";
""3174_offerAccepted"" -> ""3174_assignPartition"";
""3174_seal"" -> ""3174_only"";
""3174_addMilestonesAndSeal"" -> ""3174_only"";
""3174_addMilestonesAndSeal"" -> ""3174_notSealed"";
""3174_startMilestone"" -> ""3174_only"";
""3174_editMilestone"" -> ""3174_only"";
""3174_finishMilestone"" -> ""3174_only"";
""3174_seal"" -> ""3174_notSealed"";
""3174_verdictExecuted"" -> ""3174_only"";
""3174_addMilestone"" -> ""3174_notSealed"";
""3174_editMilestone"" -> ""3174_notSealed"";
""3174_offerAccepted"" -> ""3174_only"";
}
"
0xd2df59cfcd5086264532936afde48a5312ce96bb.sol,Auction,"contract Auction is Ownable { using SafeMath for uint256; event bidPlaced(uint bid, address _address); event etherTransfered(uint amount, address _address); string _itemName; address _highestBidder; uint _highestBid; uint _minStep; uint _end; uint _start; constructor() public { _itemName = ; _highestBid = 0; _highestBidder = address(this); _end = 1540339140; _start = _end - 3 days; _minStep = 10000000000000000; }",1,"subgraph cluster_427_Auction {
label=""Auction"";
""427_queryBid"" [label=""queryBid""];
""427_constructor"" [label=""constructor""];
""427_queryBalance"" [label=""queryBalance""];
""427_weiToOwner"" [label=""weiToOwner""];
""427_placeBid"" [label=""placeBid""];
""427_weiToOwner"" -> ""427_contract_onlyOwner"";
}
"
0x3a37dcda0503f92626c082540dfbc9d95104ab96.sol,EthernautsLogic,contract EthernautsLogic is EthernautsOwnership { address public newContractAddress; function EthernautsLogic() public { ceoAddress = msg.sender; ctoAddress = msg.sender; cooAddress = msg.sender; oracleAddress = msg.sender; paused = true; },1,"subgraph cluster_1987_EthernautsLogic {
label=""EthernautsLogic"";
""1987_withdrawBalances"" [label=""withdrawBalances""];
""1987_EthernautsLogic"" [label=""EthernautsLogic""];
""1987_unpause"" [label=""unpause""];
""1987_getBalance"" [label=""getBalance""];
""1987_setNewAddress"" [label=""setNewAddress""];
""1987_setEthernautsStorageContract"" [label=""setEthernautsStorageContract""];
""1987_unpause"" -> ""1987_whenPaused"";
""1987_unpause"" -> ""1987_unpause"";
""1987_unpause"" -> ""1987_onlyCEO"";
""1987_withdrawBalances"" -> ""1987_onlyCLevel"";
""1987_getBalance"" -> ""1987_onlyCLevel"";
""1987_setNewAddress"" -> ""1987_onlyCTO"";
""1987_setEthernautsStorageContract"" -> ""1987_onlyCLevel"";
""1987_setNewAddress"" -> ""1987_whenPaused"";
""1987_setEthernautsStorageContract"" -> ""1987_whenPaused"";
}
"
0x00676065a7854163c6a4d5f474496514d03e31c4.sol,CrystalDeposit,contract CrystalDeposit { using SafeMath for uint256; address public administrator; uint256 public HALF_TIME = 48 hours; uint256 public MIN_TIME_WITH_DEADLINE = 12 hours; uint256 public round = 0; CryptoEngineerInterface public Engineer; CryptoMiningWarInterface public MiningWar; address miningWarAddress; uint256 miningWarDeadline; uint256 constant private CRTSTAL_MINING_PERIOD = 86400; mapping(uint256 => Game) public games; mapping(address => Player) public players; mapping(address => bool) public miniGames; struct Game { uint256 round; uint256 crystals; uint256 prizePool; uint256 startTime; uint256 endTime; bool ended; },1,"subgraph cluster_1066_CrystalDeposit {
label=""CrystalDeposit"";
""1066_endRound"" [label=""endRound""];
""1066_upgrade"" [label=""upgrade""];
""1066_startRound"" [label=""startRound""];
""1066_getData"" [label=""getData""];
""1066_setupMiniGame"" [label=""setupMiniGame""];
""1066_calculateReward"" [label=""calculateReward""];
""1066_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1066_getPlayerData"" [label=""getPlayerData""];
""1066_setEngineerInterface"" [label=""setEngineerInterface""];
""1066_constructor"" [label=""constructor""];
""1066_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1066_startGame"" [label=""startGame""];
""1066_getCurrentGame"" [label=""getCurrentGame""];
""1066_updateReward"" [label=""updateReward""];
""1066_isDepositContract"" [label=""isDepositContract""];
""1066_share"" [label=""share""];
""1066_fallback"" [label=""fallback""];
""1066_getEngineerPrizePool"" [label=""getEngineerPrizePool""];
""1066_setContractsMiniGame"" [label=""setContractsMiniGame""];
""1066_withdrawReward"" [label=""withdrawReward""];
""1066_isContractMiniGame"" [label=""isContractMiniGame""];
""1066_getCurrentReward"" [label=""getCurrentReward""];
""1066_setContractsMiniGame"" -> ""1066_isAdministrator"";
""1066_withdrawReward"" -> ""1066_endRound"";
""1066_endRound"" -> ""1066_startRound"";
""1066_startGame"" -> ""1066_startRound"";
""1066_getData"" -> ""1066_getCurrentGame"";
""1066_withdrawReward"" -> ""1066_updateReward"";
""1066_upgrade"" -> ""1066_isAdministrator"";
""1066_setMiningWarInterface"" -> ""1066_isAdministrator"";
""1066_updateReward"" -> ""1066_calculateReward"";
""1066_share"" -> ""1066_updateReward"";
""1066_startRound"" -> ""1066_getEngineerPrizePool"";
""1066_setEngineerInterface"" -> ""1066_isAdministrator"";
""1066_getCurrentReward"" -> ""1066_calculateReward"";
""1066_share"" -> ""1066_endRound"";
""1066_share"" -> ""1066_disableContract"";
""1066_getData"" -> ""1066_getPlayerData"";
""1066_startGame"" -> ""1066_isAdministrator"";
""1066_constructor"" -> ""1066_setMiningWarInterface"";
""1066_getPlayerData"" -> ""1066_calculateReward"";
""1066_constructor"" -> ""1066_setEngineerInterface"";
""1066_removeContractMiniGame"" -> ""1066_isAdministrator"";
}
"
0xeebf279ee18d7d7fc11cb945975db1a38eb94058.sol,MMOToken,contract MMOToken is ERC20 { using SafeMath for uint256; address public owner; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public name = ; string public constant symbol = ; uint public constant decimals = 18; bool public stopped; modifier stoppable { assert(!stopped); _; },1,"subgraph cluster_657_MMOToken {
label=""MMOToken"";
""657_transferFrom"" [label=""transferFrom""];
""657_stop"" [label=""stop""];
""657_withdraw"" [label=""withdraw""];
""657_approve"" [label=""approve""];
""657_start"" [label=""start""];
""657_kill"" [label=""kill""];
""657_transfer"" [label=""transfer""];
""657_fallback"" [label=""fallback""];
""657_transferOwnership"" [label=""transferOwnership""];
""657_lockTime"" [label=""lockTime""];
""657_allowance"" [label=""allowance""];
""657_MMOToken"" [label=""MMOToken""];
""657_setName"" [label=""setName""];
""657_balanceOf"" [label=""balanceOf""];
""657_lockOf"" [label=""lockOf""];
""657_transfer"" -> ""657_stoppable"";
""657_withdraw"" -> ""657_onlyOwner"";
""657_approve"" -> ""657_lock"";
""657_transferOwnership"" -> ""657_onlyOwner"";
""657_kill"" -> ""657_onlyOwner"";
""657_setName"" -> ""657_onlyOwner"";
""657_stop"" -> ""657_onlyOwner"";
""657_transfer"" -> ""657_lock"";
""657_transferFrom"" -> ""657_lock"";
""657_transferFrom"" -> ""657_stoppable"";
""657_approve"" -> ""657_stoppable"";
""657_lockTime"" -> ""657_onlyOwner"";
""657_start"" -> ""657_onlyOwner"";
}
"
0x219014ef0fdf1b9b0d4e9e453e021573b7082bed.sol,ItemToken,"contract ItemToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function ItemToken () public { owner = msg.sender; admins[owner] = true; }",1,"subgraph cluster_1272_ItemToken {
label=""ItemToken"";
""1272_approvedFor"" [label=""approvedFor""];
""1272_setItemRegistry"" [label=""setItemRegistry""];
""1272_addAdmin"" [label=""addAdmin""];
""1272_calculateDevCut"" [label=""calculateDevCut""];
""1272_tokenExists"" [label=""tokenExists""];
""1272_calculateNextPrice"" [label=""calculateNextPrice""];
""1272_listMultipleItems"" [label=""listMultipleItems""];
""1272_withdrawAll"" [label=""withdrawAll""];
""1272_totalSupply"" [label=""totalSupply""];
""1272_enableERC721"" [label=""enableERC721""];
""1272_withdrawAmount"" [label=""withdrawAmount""];
""1272_isContract"" [label=""isContract""];
""1272_approve"" [label=""approve""];
""1272_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1272_tokensOf"" [label=""tokensOf""];
""1272_ItemToken"" [label=""ItemToken""];
""1272_transfer"" [label=""transfer""];
""1272_implementsERC721"" [label=""implementsERC721""];
""1272_removeAdmin"" [label=""removeAdmin""];
""1272_buy"" [label=""buy""];
""1272_balanceOf"" [label=""balanceOf""];
""1272_allOf"" [label=""allOf""];
""1272_name"" [label=""name""];
""1272_symbol"" [label=""symbol""];
""1272_priceOf"" [label=""priceOf""];
""1272_setOwner"" [label=""setOwner""];
""1272_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1272_isAdmin"" [label=""isAdmin""];
""1272__transfer"" [label=""_transfer""];
""1272_listItem"" [label=""listItem""];
""1272_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1272_ownerOf"" [label=""ownerOf""];
""1272_transferFrom"" [label=""transferFrom""];
""1272_nextPriceOf"" [label=""nextPriceOf""];
""1272_startingPriceOf"" [label=""startingPriceOf""];
""1272_buy"" -> ""1272__transfer"";
""1272_setItemRegistry"" -> ""1272_onlyOwner"";
""1272_allOf"" -> ""1272_startingPriceOf"";
""1272__transfer"" -> ""1272_ownerOf"";
""1272_transferFrom"" -> ""1272_onlyERC721"";
""1272_removeAdmin"" -> ""1272_onlyOwner"";
""1272_transferFrom"" -> ""1272__transfer"";
""1272_approve"" -> ""1272_tokenExists"";
""1272_setOwner"" -> ""1272_onlyOwner"";
""1272_nextPriceOf"" -> ""1272_calculateNextPrice"";
""1272_allOf"" -> ""1272_nextPriceOf"";
""1272_approve"" -> ""1272_ownerOf"";
""1272_approve"" -> ""1272_onlyERC721"";
""1272_listItemFromRegistry"" -> ""1272_listItem"";
""1272_balanceOf"" -> ""1272_ownerOf"";
""1272_allOf"" -> ""1272_priceOf"";
""1272_tokensOf"" -> ""1272_balanceOf"";
""1272_withdrawAll"" -> ""1272_onlyOwner"";
""1272_buy"" -> ""1272_isContract"";
""1272_buy"" -> ""1272_priceOf"";
""1272_buy"" -> ""1272_ownerOf"";
""1272_enableERC721"" -> ""1272_onlyOwner"";
""1272_tokenExists"" -> ""1272_priceOf"";
""1272_buy"" -> ""1272_calculateDevCut"";
""1272_transfer"" -> ""1272_onlyERC721"";
""1272_populateFromItemRegistry"" -> ""1272_onlyOwner"";
""1272_nextPriceOf"" -> ""1272_priceOf"";
""1272_populateFromItemRegistry"" -> ""1272_listItemFromRegistry"";
""1272_listItemFromRegistry"" -> ""1272_onlyOwner"";
""1272_tokensOf"" -> ""1272_ownerOf"";
""1272_buy"" -> ""1272_nextPriceOf"";
""1272_withdrawAmount"" -> ""1272_onlyOwner"";
""1272_transferFrom"" -> ""1272_approvedFor"";
""1272__transfer"" -> ""1272_tokenExists"";
""1272_listMultipleItems"" -> ""1272_onlyAdmins"";
""1272_listMultipleItems"" -> ""1272_listItem"";
""1272_allOf"" -> ""1272_ownerOf"";
""1272_addAdmin"" -> ""1272_onlyOwner"";
""1272_transfer"" -> ""1272__transfer"";
""1272_transfer"" -> ""1272_ownerOf"";
""1272_listItem"" -> ""1272_onlyAdmins"";
}
"
0xf099c6ecb16575393b3ba6ac57b4ead943353a52.sol,BuddhaTower,"contract BuddhaTower { event onBuy ( address indexed buyerAddress, uint256 amount, uint256 currentHeight ); event onSplit( uint round, uint luckyNumber, address luckyPlayer ); event onTimeup( uint round, address lastBuyer ); event onQualifySuccess( address applier ); struct RoundData { uint256 maxHeight; uint256 lotteryPool; uint256 peakPool; uint256 tokenPot; uint[][] buyinfo; address[] buyAddress; uint256 startTime; uint256 endTime; address[] lotteryWinners; address finalWinner; }",1,"subgraph cluster_1969_BuddhaTower {
label=""BuddhaTower"";
""1969_wipeAll"" [label=""wipeAll""];
""1969_emergencyStart"" [label=""emergencyStart""];
""1969_splitLottery"" [label=""splitLottery""];
""1969_getQualified"" [label=""getQualified""];
""1969_constructor"" [label=""constructor""];
""1969_getLotteryWinner"" [label=""getLotteryWinner""];
""1969_endTime"" [label=""endTime""];
""1969_emergencyClose"" [label=""emergencyClose""];
""1969_activate"" [label=""activate""];
""1969_getLotteryWinnerLength"" [label=""getLotteryWinnerLength""];
""1969_getBuyInfoLength"" [label=""getBuyInfoLength""];
""1969_takeDevCut"" [label=""takeDevCut""];
""1969_buy"" [label=""buy""];
""1969_moveFromBanlist"" [label=""moveFromBanlist""];
""1969_getBuyAddress"" [label=""getBuyAddress""];
""1969_deposit"" [label=""deposit""];
""1969_getBuyInfo"" [label=""getBuyInfo""];
""1969_withdrawEth"" [label=""withdrawEth""];
""1969_addToBanlist"" [label=""addToBanlist""];
""1969_emergencyClose"" -> ""1969_onlyOwner"";
""1969_wipeAll"" -> ""1969_onlyOwner"";
""1969_withdrawEth"" -> ""1969_isBaned"";
""1969_deposit"" -> ""1969_buy"";
""1969_moveFromBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_endTime"";
""1969_deposit"" -> ""1969_isHuman"";
""1969_deposit"" -> ""1969_isBaned"";
""1969_emergencyStart"" -> ""1969_onlyOwner"";
""1969_deposit"" -> ""1969_isActive"";
""1969_withdrawEth"" -> ""1969_isHuman"";
""1969_constructor"" -> ""1969_activate"";
""1969_deposit"" -> ""1969_isWithinLimits"";
""1969_addToBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_splitLottery"";
""1969_activate"" -> ""1969_onlyOwner"";
""1969_takeDevCut"" -> ""1969_onlyOwner"";
}
"
0x288d045357ac63438278af0b5b84d677713e7c30.sol,MerchantWallet,"contract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted { string constant VERSION = ; address public merchantAccount; address public merchantFundAddress; bytes32 public merchantIdHash; mapping (string=>string) profileMap; mapping (string=>string) paymentSettingsMap; mapping (string=>uint32) compositeReputationMap; uint8 public constant REPUTATION_DECIMALS = 4; modifier onlyMerchant() { require(msg.sender == merchantAccount); _; }",1,"subgraph cluster_1312_MerchantWallet {
label=""MerchantWallet"";
""1312_doWithdrawal"" [label=""doWithdrawal""];
""1312_compositeReputation"" [label=""compositeReputation""];
""1312_fallback"" [label=""fallback""];
""1312_constructor"" [label=""constructor""];
""1312_withdrawToExchange"" [label=""withdrawToExchange""];
""1312_paymentSettings"" [label=""paymentSettings""];
""1312_setProfile"" [label=""setProfile""];
""1312_merchantIdHash"" [label=""merchantIdHash""];
""1312_setCompositeReputation"" [label=""setCompositeReputation""];
""1312_changeMerchantAccount"" [label=""changeMerchantAccount""];
""1312_withdrawTo"" [label=""withdrawTo""];
""1312_changeFundAddress"" [label=""changeFundAddress""];
""1312_merchantFundAddress"" [label=""merchantFundAddress""];
""1312_withdraw"" [label=""withdraw""];
""1312_setPaymentSettings"" [label=""setPaymentSettings""];
""1312_withdrawAllToExchange"" [label=""withdrawAllToExchange""];
""1312_profile"" [label=""profile""];
""1312_withdrawAllTokensToExchange"" [label=""withdrawAllTokensToExchange""];
""1312_setProfile"" -> ""1312_onlyOwner"";
""1312_withdrawTo"" -> ""1312_whenNotPaused"";
""1312_withdrawAllTokensToExchange"" -> ""1312_onlyMerchantOrMonetha"";
""1312_withdrawAllToExchange"" -> ""1312_onlyMerchantOrMonetha"";
""1312_constructor"" -> ""1312_isEOA"";
""1312_withdraw"" -> ""1312_onlyMerchant"";
""1312_setCompositeReputation"" -> ""1312_onlyMonetha"";
""1312_setPaymentSettings"" -> ""1312_onlyOwner"";
""1312_withdrawTo"" -> ""1312_doWithdrawal"";
""1312_changeFundAddress"" -> ""1312_isEOA"";
""1312_withdrawToExchange"" -> ""1312_onlyMerchantOrMonetha"";
""1312_withdrawAllToExchange"" -> ""1312_whenNotPaused"";
""1312_changeMerchantAccount"" -> ""1312_onlyMerchant"";
""1312_withdrawTo"" -> ""1312_onlyMerchant"";
""1312_withdrawToExchange"" -> ""1312_whenNotPaused"";
""1312_withdrawToExchange"" -> ""1312_doWithdrawal"";
""1312_withdrawAllToExchange"" -> ""1312_doWithdrawal"";
""1312_withdrawAllTokensToExchange"" -> ""1312_whenNotPaused"";
""1312_changeFundAddress"" -> ""1312_onlyMerchant"";
""1312_withdraw"" -> ""1312_withdrawTo"";
""1312_changeMerchantAccount"" -> ""1312_whenNotPaused"";
}
"
0x51e4e00e3e019e58fc0b8cc8c6490a2d28efbf44.sol,SanityPools,contract SanityPools is Controller { mapping (uint256 => mapping (address => uint256)) balances; Pool[100] pools; uint256 index_active = 0; uint256 public week_in_blocs = 39529; modifier validIndex(uint256 _index){ require(_index <= index_active); _; },1,"subgraph cluster_549_SanityPools {
label=""SanityPools"";
""549_setToken"" [label=""setToken""];
""549_setSale"" [label=""setSale""];
""549_buyTokens"" [label=""buyTokens""];
""549_refund"" [label=""refund""];
""549_change_delay"" [label=""change_delay""];
""549_emergency_withdraw"" [label=""emergency_withdraw""];
""549_contribute"" [label=""contribute""];
""549_createPool"" [label=""createPool""];
""549_getPoolName"" [label=""getPoolName""];
""549_withdraw"" [label=""withdraw""];
""549_setSale"" -> ""549_onlyOwner"";
""549_refund"" -> ""549_validIndex"";
""549_change_delay"" -> ""549_onlyOwner"";
""549_setToken"" -> ""549_validIndex"";
""549_buyTokens"" -> ""549_onlyOwner"";
""549_emergency_withdraw"" -> ""549_validIndex"";
""549_createPool"" -> ""549_onlyOwner"";
""549_setSale"" -> ""549_validIndex"";
""549_emergency_withdraw"" -> ""549_onlyOwner"";
""549_setToken"" -> ""549_onlyOwner"";
""549_contribute"" -> ""549_validIndex"";
""549_withdraw"" -> ""549_validIndex"";
""549_buyTokens"" -> ""549_validIndex"";
""549_getPoolName"" -> ""549_validIndex"";
}
"
0x32fcdefa047d8edeea0c21a50179b18181074c60.sol,CryptoSanguoToken,"contract CryptoSanguoToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256 private min_value = 0.01 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function CryptoSanguoToken () public { owner = msg.sender; admins[owner] = true; issueCard(1, 7, 5); }",1,"subgraph cluster_1362_CryptoSanguoToken {
label=""CryptoSanguoToken"";
""1362_enableERC721"" [label=""enableERC721""];
""1362_totalSupply"" [label=""totalSupply""];
""1362_name"" [label=""name""];
""1362_transfer"" [label=""transfer""];
""1362_transferFrom"" [label=""transferFrom""];
""1362_CryptoSanguoToken"" [label=""CryptoSanguoToken""];
""1362_listItem"" [label=""listItem""];
""1362_tokensOf"" [label=""tokensOf""];
""1362_issueCard"" [label=""issueCard""];
""1362_setOwner"" [label=""setOwner""];
""1362_ownerOf"" [label=""ownerOf""];
""1362_balanceOf"" [label=""balanceOf""];
""1362_removeAdmin"" [label=""removeAdmin""];
""1362_approve"" [label=""approve""];
""1362_buy"" [label=""buy""];
""1362_startingPriceOf"" [label=""startingPriceOf""];
""1362_implementsERC721"" [label=""implementsERC721""];
""1362_changePrice"" [label=""changePrice""];
""1362_nextPriceOf"" [label=""nextPriceOf""];
""1362_setItemRegistry"" [label=""setItemRegistry""];
""1362_symbol"" [label=""symbol""];
""1362__transfer"" [label=""_transfer""];
""1362_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1362_isAdmin"" [label=""isAdmin""];
""1362_tokenExists"" [label=""tokenExists""];
""1362_withdrawAmount"" [label=""withdrawAmount""];
""1362_approvedFor"" [label=""approvedFor""];
""1362_listMultipleItems"" [label=""listMultipleItems""];
""1362_priceOf"" [label=""priceOf""];
""1362_allOf"" [label=""allOf""];
""1362_calculateNextPrice"" [label=""calculateNextPrice""];
""1362_addAdmin"" [label=""addAdmin""];
""1362_isContract"" [label=""isContract""];
""1362_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1362_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1362_withdrawAll"" [label=""withdrawAll""];
""1362_calculateDevCut"" [label=""calculateDevCut""];
""1362__transfer"" -> ""1362_ownerOf"";
""1362_transferFrom"" -> ""1362_approvedFor"";
""1362_withdrawAll"" -> ""1362_onlyOwner"";
""1362_tokensOf"" -> ""1362_balanceOf"";
""1362_CryptoSanguoToken"" -> ""1362_issueCard"";
""1362_listMultipleItems"" -> ""1362_listItem"";
""1362_approve"" -> ""1362_ownerOf"";
""1362_listItemFromRegistry"" -> ""1362_onlyOwner"";
""1362_changePrice"" -> ""1362_onlyAdmins"";
""1362_buy"" -> ""1362_calculateDevCut"";
""1362_allOf"" -> ""1362_nextPriceOf"";
""1362_buy"" -> ""1362__transfer"";
""1362_buy"" -> ""1362_ownerOf"";
""1362_transferFrom"" -> ""1362__transfer"";
""1362_allOf"" -> ""1362_ownerOf"";
""1362_tokenExists"" -> ""1362_priceOf"";
""1362_withdrawAmount"" -> ""1362_onlyOwner"";
""1362_transfer"" -> ""1362__transfer"";
""1362_allOf"" -> ""1362_startingPriceOf"";
""1362_approve"" -> ""1362_tokenExists"";
""1362__transfer"" -> ""1362_tokenExists"";
""1362_buy"" -> ""1362_priceOf"";
""1362_allOf"" -> ""1362_priceOf"";
""1362_listMultipleItems"" -> ""1362_onlyAdmins"";
""1362_addAdmin"" -> ""1362_onlyOwner"";
""1362_listItem"" -> ""1362_onlyAdmins"";
""1362_nextPriceOf"" -> ""1362_calculateNextPrice"";
""1362_nextPriceOf"" -> ""1362_priceOf"";
""1362_removeAdmin"" -> ""1362_onlyOwner"";
""1362_enableERC721"" -> ""1362_onlyOwner"";
""1362_populateFromItemRegistry"" -> ""1362_onlyOwner"";
""1362_buy"" -> ""1362_nextPriceOf"";
""1362_setOwner"" -> ""1362_onlyOwner"";
""1362_populateFromItemRegistry"" -> ""1362_listItemFromRegistry"";
""1362_setItemRegistry"" -> ""1362_onlyOwner"";
""1362_listItemFromRegistry"" -> ""1362_listItem"";
""1362_transferFrom"" -> ""1362_onlyERC721"";
""1362_transfer"" -> ""1362_ownerOf"";
""1362_transfer"" -> ""1362_onlyERC721"";
""1362_tokensOf"" -> ""1362_ownerOf"";
""1362_approve"" -> ""1362_onlyERC721"";
""1362_buy"" -> ""1362_isContract"";
""1362_balanceOf"" -> ""1362_ownerOf"";
""1362_issueCard"" -> ""1362_onlyAdmins"";
}
"
0x8cd06b5c327b0e277a7f6b08b9acea4d8ee36180.sol,JungleScratch,contract JungleScratch is Owned { using SafeMath for uint; uint public LimitBottom = 0.02 ether; uint public LimitTop = 0.1 ether; address public Drawer; struct Game { bytes32 SecretKey_P; bool isPlay; bool isPay; uint Result; uint Time; address Buyer; uint value; },1,"subgraph cluster_1109_JungleScratch {
label=""JungleScratch"";
""1109_fallback"" [label=""fallback""];
""1109_changeLimit"" [label=""changeLimit""];
""1109_changeDrawer"" [label=""changeDrawer""];
""1109_getTicketTime"" [label=""getTicketTime""];
""1109_submit"" [label=""submit""];
""1109_withdraw"" [label=""withdraw""];
""1109_getisPlay"" [label=""getisPlay""];
""1109_award"" [label=""award""];
""1109_chargeOwe"" [label=""chargeOwe""];
""1109_JungleScratch"" [label=""JungleScratch""];
""1109_withdraw"" -> ""1109_onlyOwner"";
""1109_changeDrawer"" -> ""1109_onlyOwner"";
""1109_changeLimit"" -> ""1109_onlyOwner"";
}
"
0x86c6a7ee4ec24d25456580d81f7e8f486186ec91.sol,Coin,"contract Coin { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public _totalSupply = 0; uint256 public _maxSupply = 33000000000000000000000; uint256 public price = 2000; bool private workingState = true; bool private transferAllowed = true; bool private generationState = true; address public owner; address private cur_coin; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) private etherClients; event FundsGot(address indexed _sender, uint256 _value); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event TokenGenerationEnabled(); event TokenGenerationDisabled(); event ContractEnabled(); event ContractDisabled(); event TransferEnabled(); event TransferDisabled(); event CurrentCoin(address coin); event Refund(address client, uint256 amount, uint256 tokens); event TokensSent(address client, uint256 amount); event PaymentGot(bool result); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_851_Coin {
label=""Coin"";
""851_refund"" [label=""refund""];
""851_allowance"" [label=""allowance""];
""851_kill"" [label=""kill""];
""851_disableGeneration"" [label=""disableGeneration""];
""851_fallback"" [label=""fallback""];
""851_transfer"" [label=""transfer""];
""851_tokenGenerationState"" [label=""tokenGenerationState""];
""851_transferFrom"" [label=""transferFrom""];
""851_setCurrentCoin"" [label=""setCurrentCoin""];
""851_balanceOf"" [label=""balanceOf""];
""851_contractState"" [label=""contractState""];
""851_approve"" [label=""approve""];
""851_enableContract"" [label=""enableContract""];
""851_disableTransfer"" [label=""disableTransfer""];
""851_Coin"" [label=""Coin""];
""851_totalSupply"" [label=""totalSupply""];
""851_generateTokens"" [label=""generateTokens""];
""851_transferState"" [label=""transferState""];
""851_setPrice"" [label=""setPrice""];
""851_disableContract"" [label=""disableContract""];
""851_enableGeneration"" [label=""enableGeneration""];
""851_setMaxSupply"" [label=""setMaxSupply""];
""851_enableTransfer"" [label=""enableTransfer""];
""851_Coin"" -> ""851_enableContract"";
""851_balanceOf"" -> ""851_workingFlag"";
""851_setMaxSupply"" -> ""851_onlyOwner"";
""851_enableContract"" -> ""851_onlyOwner"";
""851_disableContract"" -> ""851_onlyOwner"";
""851_setCurrentCoin"" -> ""851_workingFlag"";
""851_refund"" -> ""851_ownerAndCoin"";
""851_generateTokens"" -> ""851_ownerAndCoin"";
""851_enableTransfer"" -> ""851_onlyOwner"";
""851_transferFrom"" -> ""851_workingFlag"";
""851_disableTransfer"" -> ""851_onlyOwner"";
""851_setPrice"" -> ""851_onlyOwner"";
""851_setCurrentCoin"" -> ""851_onlyOwner"";
""851_refund"" -> ""851_workingFlag"";
""851_disableGeneration"" -> ""851_onlyOwner"";
""851_generateTokens"" -> ""851_workingFlag"";
""851_totalSupply"" -> ""851_workingFlag"";
""851_enableGeneration"" -> ""851_onlyOwner"";
""851_transfer"" -> ""851_workingFlag"";
""851_generateTokens"" -> ""851_transferFrom"";
""851_fallback"" -> ""851_workingFlag"";
""851_kill"" -> ""851_onlyOwner"";
}
"
0x92949bd74c4d21852a3d9f7dfb841fad2833302b.sol,basisneuro,"contract basisneuro is ERC20Interface { string public name = ""http: uint8 public decimals = 18; string public symbol = ""http: uint256 public stdBalance; mapping (address => uint256) public bonus; address public owner; bool public JUSTed; event Message(string message); function JUST() public { owner = msg.sender; totalSupply = 1337 * 1e18; stdBalance = 232 * 1e18; JUSTed = true; }",1,"subgraph cluster_316_basisneuro {
label=""basisneuro"";
""316_approve"" [label=""approve""];
""316_fallback"" [label=""fallback""];
""316_UNJUST"" [label=""UNJUST""];
""316_JUST"" [label=""JUST""];
""316_transferFrom"" [label=""transferFrom""];
""316_rescueTokens"" [label=""rescueTokens""];
""316_balanceOf"" [label=""balanceOf""];
""316_transfer"" [label=""transfer""];
""316_allowance"" [label=""allowance""];
}
"
0x36fc9fff1bf5b08ed2c472d6370dc62fa3016ffa.sol,quizgame,contract quizgame { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_quizgame {
label=""quizgame"";
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x70052a651eec65f98925e845820a0aa5749b033d.sol,ATxAssetProxy,"contract ATxAssetProxy is ERC20, Object, ServiceAllowance { using SafeMath for uint; event UpgradeProposal(address newVersion); address latestVersion; Platform public platform; bytes32 public smbl; string public name; modifier onlyPlatform() { if (msg.sender == address(platform)) { _; }",1,"subgraph cluster_1309_ATxAssetProxy {
label=""ATxAssetProxy"";
""1309_init"" [label=""init""];
""1309_approve"" [label=""approve""];
""1309_proposeUpgrade"" [label=""proposeUpgrade""];
""1309_decimals"" [label=""decimals""];
""1309_fallback"" [label=""fallback""];
""1309_stringToBytes32"" [label=""stringToBytes32""];
""1309_totalSupply"" [label=""totalSupply""];
""1309__getAsset"" [label=""_getAsset""];
""1309_transfer"" [label=""transfer""];
""1309___transferWithReference"" [label=""__transferWithReference""];
""1309_allowance"" [label=""allowance""];
""1309_transferWithReference"" [label=""transferWithReference""];
""1309_emitTransfer"" [label=""emitTransfer""];
""1309___approve"" [label=""__approve""];
""1309_platform"" [label=""platform""];
""1309_emitApprove"" [label=""emitApprove""];
""1309_isTransferAllowed"" [label=""isTransferAllowed""];
""1309___transferFromWithReference"" [label=""__transferFromWithReference""];
""1309_smbl"" [label=""smbl""];
""1309_transferFrom"" [label=""transferFrom""];
""1309__transferWithReference"" [label=""_transferWithReference""];
""1309_balanceOf"" [label=""balanceOf""];
""1309_getLatestVersion"" [label=""getLatestVersion""];
""1309_transferFrom"" -> ""1309__getAsset"";
""1309_approve"" -> ""1309__getAsset"";
""1309__getAsset"" -> ""1309_getLatestVersion"";
""1309_transferWithReference"" -> ""1309__transferWithReference"";
""1309_emitTransfer"" -> ""1309_onlyPlatform"";
""1309_proposeUpgrade"" -> ""1309_onlyAssetOwner"";
""1309___transferWithReference"" -> ""1309_onlyAccess"";
""1309_init"" -> ""1309_stringToBytes32"";
""1309___approve"" -> ""1309_onlyAccess"";
""1309_fallback"" -> ""1309__getAsset"";
""1309_emitApprove"" -> ""1309_onlyPlatform"";
""1309___transferFromWithReference"" -> ""1309_onlyAccess"";
""1309__transferWithReference"" -> ""1309__getAsset"";
""1309_transfer"" -> ""1309__transferWithReference"";
}
"
0xef02c45c5913629dd12e7a9446455049775eec32.sol,RuletkaIo,"contract RuletkaIo { event partyOver(uint256 roomId, address victim, address[] winners); event newPlayer(uint256 roomId, address player); event fullRoom(uint256 roomId); event roomRefunded(uint256 _roomId, address[] refundedPlayers); address CTO; address CEO; Room[] private allRooms; function () public payable {}",1,"subgraph cluster_648_RuletkaIo {
label=""RuletkaIo"";
""648_enter"" [label=""enter""];
""648_payout"" [label=""payout""];
""648_setCEO"" [label=""setCEO""];
""648_getRoom"" [label=""getRoom""];
""648_fallback"" [label=""fallback""];
""648_random"" [label=""random""];
""648_distributeFunds"" [label=""distributeFunds""];
""648_setCTO"" [label=""setCTO""];
""648_enterWithReferral"" [label=""enterWithReferral""];
""648_refundPlayersInRoom"" [label=""refundPlayersInRoom""];
""648_createRoom"" [label=""createRoom""];
""648_RuletkaIo"" [label=""RuletkaIo""];
""648__payout"" [label=""_payout""];
""648_executeRoom"" [label=""executeRoom""];
""648_setCTO"" -> ""648_onlyCTO"";
""648_executeRoom"" -> ""648_random"";
""648_payout"" -> ""648_onlyCTO"";
""648_payout"" -> ""648__payout"";
""648_refundPlayersInRoom"" -> ""648_onlyCTO"";
""648_createRoom"" -> ""648_onlyCTO"";
""648_executeRoom"" -> ""648_distributeFunds"";
""648_enter"" -> ""648_executeRoom"";
""648_enterWithReferral"" -> ""648_executeRoom"";
""648_setCEO"" -> ""648_onlyCTO"";
}
"
0xa5dc0165b798779ac80acc84c4da4ee77b79843f.sol,EosPizzaSliceDonationraiser,"contract EosPizzaSliceDonationraiser is EosPizzaSlice, EosPizzaSliceDonationraiserConfig, Whitelist { bool public finalized = false; address public beneficiary; uint public conversionRate; uint public startDate; uint public endDate; uint public hardCap; EosPizzaSliceSafe public eosPizzaSliceSafe; uint internal minimumContribution; uint internal individualLimit; uint private tokensSold; event FundsReceived(address indexed _address, uint _ethers, uint _tokens, uint _newTotalSupply, uint _conversionRate); event BeneficiaryChange(address _beneficiary); event ConversionRateChange(uint _conversionRate); event Finalized(address _beneficiary, uint _ethers, uint _totalSupply); function EosPizzaSliceDonationraiser(address _beneficiary) public EosPizzaSlice(0) Whitelist(msg.sender) { require(_beneficiary != 0); beneficiary = _beneficiary; conversionRate = CONVERSION_RATE; startDate = START_DATE; endDate = END_DATE; hardCap = TOKENS_HARD_CAP; tokensSold = 0; minimumContribution = MIN_CONTRIBUTION; individualLimit = INDIVIDUAL_ETHER_LIMIT * CONVERSION_RATE; eosPizzaSliceSafe = new EosPizzaSliceSafe(this); }",1,"subgraph cluster_1436_EosPizzaSliceDonationraiser {
label=""EosPizzaSliceDonationraiser"";
""1436_fallback"" [label=""fallback""];
""1436_finalize"" [label=""finalize""];
""1436_collect"" [label=""collect""];
""1436_setConversionRate"" [label=""setConversionRate""];
""1436_EosPizzaSliceDonationraiser"" [label=""EosPizzaSliceDonationraiser""];
""1436_setBeneficiary"" [label=""setBeneficiary""];
""1436_buyTokens"" [label=""buyTokens""];
""1436_fallback"" -> ""1436_buyTokens"";
""1436_collect"" -> ""1436_onlyOwner"";
""1436_EosPizzaSliceDonationraiser"" -> ""1436_EosPizzaSlice"";
""1436_EosPizzaSliceDonationraiser"" -> ""1436_Whitelist"";
""1436_setBeneficiary"" -> ""1436_onlyOwner"";
""1436_finalize"" -> ""1436_onlyOwner"";
""1436_finalize"" -> ""1436_unfreeze"";
""1436_setConversionRate"" -> ""1436_onlyOwner"";
}
"
0xc55e5e72911fab07ef912c58e6dc168d73348820.sol,EtherCup,"contract EtherCup is Ownable { using SafeMath for uint256; event NewPlayer(uint tokenId, string name); event TokenSold(uint256 tokenId, uint256 oldPrice, address prevOwner, address winner, string name); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); uint256 private price = 0.01 ether; uint256 private priceLimitOne = 0.05 ether; uint256 private priceLimitTwo = 0.5 ether; uint256 private priceLimitThree = 2 ether; uint256 private priceLimitFour = 5 ether; mapping (uint => address) public playerToOwner; mapping (address => uint) ownerPlayerCount; mapping (uint256 => uint256) public playerToPrice; mapping (uint => address) playerApprovals; address public ceoAddress; struct Player { string name; }",1,"subgraph cluster_755_EtherCup {
label=""EtherCup"";
""755_setCEO"" [label=""setCEO""];
""755_ownerOf"" [label=""ownerOf""];
""755__transfer"" [label=""_transfer""];
""755_balanceOf"" [label=""balanceOf""];
""755_purchase"" [label=""purchase""];
""755_calculateDevCut"" [label=""calculateDevCut""];
""755_priceOf"" [label=""priceOf""];
""755_nextPriceOf"" [label=""nextPriceOf""];
""755_calculateNextPrice"" [label=""calculateNextPrice""];
""755_totalSupply"" [label=""totalSupply""];
""755_transfer"" [label=""transfer""];
""755_tokensOfOwner"" [label=""tokensOfOwner""];
""755__createPlayer"" [label=""_createPlayer""];
""755_createNewPlayer"" [label=""createNewPlayer""];
""755_constructor"" [label=""constructor""];
""755_priceOfMultiple"" [label=""priceOfMultiple""];
""755_withdrawAll"" [label=""withdrawAll""];
""755_approve"" [label=""approve""];
""755_showDevCut"" [label=""showDevCut""];
""755_withdrawAmount"" [label=""withdrawAmount""];
""755_transfer"" -> ""755_onlyOwnerOf"";
""755_priceOfMultiple"" -> ""755_priceOf"";
""755_tokensOfOwner"" -> ""755_totalSupply"";
""755_showDevCut"" -> ""755_onlyCEO"";
""755_withdrawAmount"" -> ""755_onlyCEO"";
""755_nextPriceOf"" -> ""755_calculateNextPrice"";
""755_setCEO"" -> ""755_onlyCEO"";
""755_approve"" -> ""755_onlyOwnerOf"";
""755_purchase"" -> ""755_calculateDevCut"";
""755_transfer"" -> ""755__transfer"";
""755_nextPriceOf"" -> ""755_priceOf"";
""755_createNewPlayer"" -> ""755_onlyCEO"";
""755_createNewPlayer"" -> ""755__createPlayer"";
""755_tokensOfOwner"" -> ""755_balanceOf"";
""755_withdrawAll"" -> ""755_onlyCEO"";
""755_purchase"" -> ""755_nextPriceOf"";
""755_purchase"" -> ""755__transfer"";
}
"
0x58a2263f77e1b23a74a3d99b9d01506da308800b.sol,NetworkTokenPayment,"contract NetworkTokenPayment is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 55 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 45 * 1 days; uint256 public totalSupply = 100000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth =10000e8; uint public target0drop = 10000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_NetworkTokenPayment {
label=""NetworkTokenPayment"";
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" [label=""getTokens""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_withdraw"" [label=""withdraw""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transfer"" [label=""transfer""];
""1253_approve"" [label=""approve""];
""1253_Distribute"" [label=""Distribute""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_constructor"" [label=""constructor""];
""1253_fallback"" [label=""fallback""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_add"" [label=""add""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_allowance"" [label=""allowance""];
""1253_burn"" [label=""burn""];
""1253_distr"" [label=""distr""];
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
}
"
0x183891e9cfaee0c9e2dbcdfefe1505626c696951.sol,Withdrawal,"contract Withdrawal is Ownable { address public withdrawWallet; event WithdrawLog(uint256 value); constructor(address _withdrawWallet) public { require(_withdrawWallet != address(0), ); withdrawWallet = _withdrawWallet; }",1,"subgraph cluster_658_Withdrawal {
label=""Withdrawal"";
""658_withdraw"" [label=""withdraw""];
""658_constructor"" [label=""constructor""];
""658_withdrawAll"" [label=""withdrawAll""];
""658_withdraw"" -> ""658_onlyOwner"";
""658_withdrawAll"" -> ""658_onlyOwner"";
}
"
0xedde8f9b753ae899794f09756e11999cf54c82c5.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 1000000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_setPrices"" [label=""setPrices""];
""612__transfer"" [label=""_transfer""];
""612_selfdestructs"" [label=""selfdestructs""];
""612_mintToken"" [label=""mintToken""];
""612_fallback"" [label=""fallback""];
""612_freezeAccount"" [label=""freezeAccount""];
""612_buy"" [label=""buy""];
""612_selfdestructs"" -> ""612_onlyOwner"";
""612_fallback"" -> ""612__transfer"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_buy"" -> ""612__transfer"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_mintToken"" -> ""612_onlyOwner"";
}
"
0x1b5c8afd9739c3d2af5a4859dec0482a6df7667d.sol,HomesCoin,"contract HomesCoin is ERC20Interface { string public symbol; string public name; uint8 public decimals; uint _totalSupply; uint price; address owner; mapping(address => uint) public balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000 * 10**uint(decimals); owner = msg.sender; balances[owner] = _totalSupply; price=100; emit Transfer(owner, address(0), _totalSupply); }",1,"subgraph cluster_902_HomesCoin {
label=""HomesCoin"";
""902_mint"" [label=""mint""];
""902_totalSupply"" [label=""totalSupply""];
""902_allowance"" [label=""allowance""];
""902_burn"" [label=""burn""];
""902_approve"" [label=""approve""];
""902_fallback"" [label=""fallback""];
""902_buy"" [label=""buy""];
""902_resetHouseParams"" [label=""resetHouseParams""];
""902_transfer"" [label=""transfer""];
""902_constructor"" [label=""constructor""];
""902_makeEvent"" [label=""makeEvent""];
""902_addHouse"" [label=""addHouse""];
""902_destroy"" [label=""destroy""];
""902_collect"" [label=""collect""];
""902_balanceOf"" [label=""balanceOf""];
""902_sell"" [label=""sell""];
""902_setPrice"" [label=""setPrice""];
""902_transferFrom"" [label=""transferFrom""];
}
"
0x74028170d74751878228cda221fd0ac42a830921.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 580000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_freezeAccount"" [label=""freezeAccount""];
""612_mintToken"" [label=""mintToken""];
""612_fallback"" [label=""fallback""];
""612_setPrices"" [label=""setPrices""];
""612__transfer"" [label=""_transfer""];
""612_buy"" [label=""buy""];
""612_selfdestructs"" [label=""selfdestructs""];
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
""612_buy"" -> ""612__transfer"";
""612_selfdestructs"" -> ""612_onlyOwner"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_fallback"" -> ""612__transfer"";
""612_mintToken"" -> ""612_onlyOwner"";
}
"
0x184c8624d79f41eff9b3a702737ee86eeef80e67.sol,EthMonsters,contract EthMonsters { address public owner; event BuyMonsterEvent( uint price ); uint public typesNumber = 0; uint public monstersNumber = 0; mapping (address => uint) public userMonstersCount; mapping (address => uint) goodContracts; monster[] public monsters; mapping (uint => address) public monsterToOwner; mapping (address => uint) public userBalance; mapping (address => uint[]) public userToMonsters; uint public contractFees = 0; monsterType[] public types; constructor() public { owner = msg.sender; },1,"subgraph cluster_873_EthMonsters {
label=""EthMonsters"";
""873_addNewType"" [label=""addNewType""];
""873_random"" [label=""random""];
""873_buyMonster"" [label=""buyMonster""];
""873_getType"" [label=""getType""];
""873_getMonster"" [label=""getMonster""];
""873_transferMonster"" [label=""transferMonster""];
""873_sendEarnings"" [label=""sendEarnings""];
""873_addGoodContract"" [label=""addGoodContract""];
""873_addExpToMonster"" [label=""addExpToMonster""];
""873_withdraw"" [label=""withdraw""];
""873_constructor"" [label=""constructor""];
""873_changeMonsterName"" [label=""changeMonsterName""];
""873_withdrawFees"" [label=""withdrawFees""];
""873_removeGoodContract"" [label=""removeGoodContract""];
""873_createMonster"" [label=""createMonster""];
""873_getUserMonster"" [label=""getUserMonster""];
""873_getUserMonstersCount"" [label=""getUserMonstersCount""];
""873_hatchEgg"" [label=""hatchEgg""];
""873_buyMonster"" -> ""873_random"";
""873_removeGoodContract"" -> ""873_onlyOwner"";
""873_changeMonsterName"" -> ""873_allowedContract"";
""873_buyMonster"" -> ""873_createMonster"";
""873_addExpToMonster"" -> ""873_allowedContract"";
""873_hatchEgg"" -> ""873_allowedContract"";
""873_transferMonster"" -> ""873_allowedContract"";
""873_addGoodContract"" -> ""873_onlyOwner"";
""873_withdrawFees"" -> ""873_onlyOwner"";
""873_buyMonster"" -> ""873_sendEarnings"";
""873_addNewType"" -> ""873_onlyOwner"";
}
"
0x1f58af89d12d4a60647f99a9fc71dd0367b56df4.sol,BurnupGameFinance,"contract BurnupGameFinance is BurnupGameOwnership, PullPayment { BurnupHoldingCore burnupHolding; function BurnupGameFinance(address burnupHoldingAddress) public { burnupHolding = BurnupHoldingCore(burnupHoldingAddress); }",1,"subgraph cluster_1783_BurnupGameFinance {
label=""BurnupGameFinance"";
""1783_nextBuyoutPrice"" [label=""nextBuyoutPrice""];
""1783__sendFunds"" [label=""_sendFunds""];
""1783__assignBuyoutProceeds"" [label=""_assignBuyoutProceeds""];
""1783_BurnupGameFinance"" [label=""BurnupGameFinance""];
""1783__claimedSurroundingTiles"" [label=""_claimedSurroundingTiles""];
""1783__calculateAndAssignBuyoutProceeds"" [label=""_calculateAndAssignBuyoutProceeds""];
""1783__claimedSurroundingTiles"" -> ""1783_coordinateToIdentifier"";
""1783__claimedSurroundingTiles"" -> ""1783_identifierToCoordinate"";
""1783__sendFunds"" -> ""1783_asyncSend"";
""1783__assignBuyoutProceeds"" -> ""1783__sendFunds"";
""1783__calculateAndAssignBuyoutProceeds"" -> ""1783__assignBuyoutProceeds"";
}
"
0xd0d932c9f78583d297e487a7965223d0fe1008c8.sol,CSC,"contract CSC { mapping (address => uint256) private balances; mapping (address => uint256[2]) private lockedBalances; string public name; uint8 public decimals; string public symbol; uint256 public totalSupply; address public owner; event Transfer(address indexed _from, address indexed _to, uint256 _value); constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, address _owner, address[] _lockedAddress, uint256[] _lockedBalances, uint256[] _lockedTimes ) public { balances[_owner] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; owner = _owner; for(uint i = 0;i < _lockedAddress.length;i++){ lockedBalances[_lockedAddress[i]][0] = _lockedBalances[i]; lockedBalances[_lockedAddress[i]][1] = _lockedTimes[i]; }",1,"subgraph cluster_342_CSC {
label=""CSC"";
""342_makeCoin"" [label=""makeCoin""];
""342_withdrawTo"" [label=""withdrawTo""];
""342_transfer"" [label=""transfer""];
""342_constructor"" [label=""constructor""];
""342_balanceOf"" [label=""balanceOf""];
""342_withdraw"" [label=""withdraw""];
""342_burnFrom"" [label=""burnFrom""];
}
"
0x4176f0f2b7c95486a5ae06e3d1b29201a42e7630.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1026_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1026_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1026_constructor"" [label=""constructor""];
""1026_depositToken"" [label=""depositToken""];
""1026_tokenFallback"" [label=""tokenFallback""];
""1026_depositEther"" [label=""depositEther""];
""1026_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1026_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1026_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1026_distributeTokenToAddressesAndAmounts"" -> ""1026_onlyOwner"";
""1026_distributeWithTransferFrom"" -> ""1026_onlyOwner"";
""1026_approveToPullOutTokens"" -> ""1026_onlyOwner"";
""1026_depositEther"" -> ""1026_whenNotPaused"";
""1026_tokenFallback"" -> ""1026_whenNotPaused"";
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1026_onlyOwner"";
""1026_distributeTokenToAddress"" -> ""1026_onlyOwner"";
""1026_depositToken"" -> ""1026_whenNotPaused"";
}
"
0x50a667b73223bc612bcc43200120b5c46ee6b4e9.sol,RC,"contract RC is ICOEngineInterface, KYCBase { using SafeMath for uint256; TokenSale tokenSaleContract; uint256 public startTime; uint256 public endTime; uint256 public etherMinimum; uint256 public soldTokens; uint256 public remainingTokens; uint256 public oneTokenInFiatWei; mapping(address => uint256) public etherUser; mapping(address => uint256) public pendingTokenUser; mapping(address => uint256) public tokenUser; uint256[] public tokenThreshold; uint256[] public bonusThreshold; function RC(address _tokenSaleContract, uint256 _oneTokenInFiatWei, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) { require ( _tokenSaleContract != 0 ); require ( _oneTokenInFiatWei != 0 ); require( _remainingTokens != 0 ); require ( _tokenThreshold.length != 0 ); require ( _tokenThreshold.length == _bonusThreshold.length ); bonusThreshold = _bonusThreshold; tokenThreshold = _tokenThreshold; tokenSaleContract = TokenSale(_tokenSaleContract); tokenSaleContract.addMeByRC(); soldTokens = 0; remainingTokens = _remainingTokens; oneTokenInFiatWei = _oneTokenInFiatWei; etherMinimum = _etherMinimum; setTimeRC( _startTime, _endTime ); }",1,"subgraph cluster_1999_RCpro {
label=""RCpro"";
""1999_changeMinimum"" [label=""changeMinimum""];
""1999_totalTokens"" [label=""totalTokens""];
""1999_price"" [label=""price""];
""1999_userBalance"" [label=""userBalance""];
""1999_claimTokenBonus"" [label=""claimTokenBonus""];
""1999_startTime"" [label=""startTime""];
""1999_ended"" [label=""ended""];
""1999_fallback"" [label=""fallback""];
""1999_endTime"" [label=""endTime""];
""1999_giveToken"" [label=""giveToken""];
""1999_releaseTokensTo"" [label=""releaseTokensTo""];
""1999_withdraw"" [label=""withdraw""];
""1999_takeEther"" [label=""takeEther""];
""1999_refundEther"" [label=""refundEther""];
""1999_setTime"" [label=""setTime""];
""1999_setTimeRC"" [label=""setTimeRC""];
""1999_remainingTokens"" [label=""remainingTokens""];
""1999_started"" [label=""started""];
""1999_RCpro"" [label=""RCpro""];
""1999_RCpro"" -> ""1999_KYCBase"";
""1999_releaseTokensTo"" -> ""1999_takeEther"";
""1999_refundEther"" -> ""1999_onlyTokenSaleOwner"";
""1999_releaseTokensTo"" -> ""1999_giveToken"";
""1999_fallback"" -> ""1999_claimTokenBonus"";
""1999_changeMinimum"" -> ""1999_onlyTokenSaleOwner"";
""1999_fallback"" -> ""1999_takeEther"";
""1999_setTime"" -> ""1999_onlyTokenSaleOwner"";
""1999_withdraw"" -> ""1999_onlyTokenSaleOwner"";
""1999_RCpro"" -> ""1999_setTimeRC"";
}
"
0xaa3fbfaf03cd50e6a44d27d10eb14333d1c02e52.sol,ETH_GAME,contract ETH_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETH_GAME {
label=""ETH_GAME"";
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xf122d58b7a4083f103b7336ab05b78d7c6a02a37.sol,PresalePool,contract PresalePool { using SafeMath for uint; uint8 public contractStage = 1; address public owner; uint constant public contributionMin = 100000000000000000; uint public maxContractBalance; uint public feePct; address public receiverAddress; uint public finalBalance; uint[] public ethRefundAmount; address public activeToken; struct Contributor { uint ethRefund; uint balance; mapping (address => uint) tokensClaimed; },1,"subgraph cluster_1116_PresalePool {
label=""PresalePool"";
""1116_checkPoolBalance"" [label=""checkPoolBalance""];
""1116_withdraw"" [label=""withdraw""];
""1116_enableTokenWithdrawals"" [label=""enableTokenWithdrawals""];
""1116__toPct"" [label=""_toPct""];
""1116_checkAvailableTokens"" [label=""checkAvailableTokens""];
""1116__applyPct"" [label=""_applyPct""];
""1116__withdraw"" [label=""_withdraw""];
""1116_PresalePool"" [label=""PresalePool""];
""1116_submitPool"" [label=""submitPool""];
""1116__ethRefund"" [label=""_ethRefund""];
""1116_tokenFallback"" [label=""tokenFallback""];
""1116_fallback"" [label=""fallback""];
""1116__ethDeposit"" [label=""_ethDeposit""];
""1116_withdrawFor"" [label=""withdrawFor""];
""1116_modifyMaxContractBalance"" [label=""modifyMaxContractBalance""];
""1116_checkContributorBalance"" [label=""checkContributorBalance""];
""1116_reopenContributions"" [label=""reopenContributions""];
""1116_closeContributions"" [label=""closeContributions""];
""1116_checkAvailableTokens"" -> ""1116__applyPct"";
""1116_enableTokenWithdrawals"" -> ""1116__toPct"";
""1116_fallback"" -> ""1116__ethRefund"";
""1116_withdraw"" -> ""1116__withdraw"";
""1116_enableTokenWithdrawals"" -> ""1116_onlyOwner"";
""1116_submitPool"" -> ""1116_onlyOwner"";
""1116_withdrawFor"" -> ""1116_onlyOwner"";
""1116_modifyMaxContractBalance"" -> ""1116_onlyOwner"";
""1116__withdraw"" -> ""1116__toPct"";
""1116_withdrawFor"" -> ""1116__withdraw"";
""1116_enableTokenWithdrawals"" -> ""1116_noReentrancy"";
""1116__withdraw"" -> ""1116__applyPct"";
""1116_submitPool"" -> ""1116_noReentrancy"";
""1116_PresalePool"" -> ""1116__toPct"";
""1116_enableTokenWithdrawals"" -> ""1116__applyPct"";
""1116_fallback"" -> ""1116__ethDeposit"";
""1116_closeContributions"" -> ""1116_onlyOwner"";
""1116_reopenContributions"" -> ""1116_onlyOwner"";
}
"
0xeef93ec835c7921038d55ee096671a94e961709b.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1447_RefundVault {
label=""RefundVault"";
""1447_deposit"" [label=""deposit""];
""1447_enableRefunds"" [label=""enableRefunds""];
""1447_setWallet"" [label=""setWallet""];
""1447_RefundVault"" [label=""RefundVault""];
""1447_close"" [label=""close""];
""1447_refund"" [label=""refund""];
""1447_deposit"" -> ""1447_onlyOwner"";
""1447_enableRefunds"" -> ""1447_onlyOwner"";
""1447_close"" -> ""1447_onlyOwner"";
""1447_setWallet"" -> ""1447_onlyOwner"";
}
"
0xd1ceeeef70c61da45800bd81be3352160ad72f2a.sol,Dice2Win,"contract Dice2Win { uint256 constant JACKPOT_MODULO = 1000; uint256 constant HOUSE_EDGE_PERCENT = 2; uint256 constant JACKPOT_FEE_PERCENT = 50; uint256 constant MIN_BET = 0.02 ether; uint256 constant MIN_JACKPOT_BET = 0.1 ether; uint256 constant BLOCK_DELAY = 2; uint256 constant BET_EXPIRATION_BLOCKS = 100; address public owner; address public nextOwner; uint256 public maxBetCoinDice; uint256 public maxBetDoubleDice; uint128 public jackpotSize; uint128 public lockedInBets; enum GameId { CoinFlip, SingleDice, DoubleDice, MaxGameId }",1,"subgraph cluster_833_Dice2Win {
label=""Dice2Win"";
""833_refundBet"" [label=""refundBet""];
""833_getDiceWinAmount"" [label=""getDiceWinAmount""];
""833_changeMaxBetDoubleDice"" [label=""changeMaxBetDoubleDice""];
""833_approveNextOwner"" [label=""approveNextOwner""];
""833_sendFunds"" [label=""sendFunds""];
""833_changeMaxBetCoinDice"" [label=""changeMaxBetCoinDice""];
""833_getRollUnder"" [label=""getRollUnder""];
""833_getMaxBet"" [label=""getMaxBet""];
""833_constructor"" [label=""constructor""];
""833_getRollModulo"" [label=""getRollModulo""];
""833_placeBet"" [label=""placeBet""];
""833_acceptNextOwner"" [label=""acceptNextOwner""];
""833_getJackpotFee"" [label=""getJackpotFee""];
""833_settleBet"" [label=""settleBet""];
""833_kill"" [label=""kill""];
""833_withdrawFunds"" [label=""withdrawFunds""];
""833_fallback"" [label=""fallback""];
""833_increaseJackpot"" [label=""increaseJackpot""];
""833_placeBet"" -> ""833_getMaxBet"";
""833_settleBet"" -> ""833_getRollUnder"";
""833_placeBet"" -> ""833_getRollModulo"";
""833_settleBet"" -> ""833_getDiceWinAmount"";
""833_changeMaxBetDoubleDice"" -> ""833_onlyOwner"";
""833_withdrawFunds"" -> ""833_sendFunds"";
""833_settleBet"" -> ""833_getRollModulo"";
""833_increaseJackpot"" -> ""833_onlyOwner"";
""833_withdrawFunds"" -> ""833_onlyOwner"";
""833_placeBet"" -> ""833_getDiceWinAmount"";
""833_placeBet"" -> ""833_getJackpotFee"";
""833_approveNextOwner"" -> ""833_onlyOwner"";
""833_refundBet"" -> ""833_getRollUnder"";
""833_changeMaxBetCoinDice"" -> ""833_onlyOwner"";
""833_placeBet"" -> ""833_getRollUnder"";
""833_settleBet"" -> ""833_sendFunds"";
""833_kill"" -> ""833_onlyOwner"";
""833_refundBet"" -> ""833_getDiceWinAmount"";
""833_refundBet"" -> ""833_sendFunds"";
""833_refundBet"" -> ""833_getRollModulo"";
}
"
0x1eb0d4794d4067ed004c9d55ff6eb50620b27c58.sol,ProspectorsCrowdsale,"contract ProspectorsCrowdsale is Owned, DSMath { ProspectorsGoldToken public token; address public dev_multisig; uint public total_raised; uint public contributors_count = 0; uint public constant start_time = 1502377200; uint public constant end_time = 1505055600; uint public constant bonus_amount = 10000000 * 10**18; uint public constant start_amount = 60000000 * 10**18; uint public constant price = 0.0005 * 10**18; uint public constant bonus_price = 0.0004 * 10**18; uint public constant goal = 2000 ether; bool private closed = false; mapping(address => uint) funded; modifier in_time { if (time() < start_time || time() > end_time) revert(); _; }",1,"subgraph cluster_1077_ProspectorsCrowdsale {
label=""ProspectorsCrowdsale"";
""1077_my_token_balance"" [label=""my_token_balance""];
""1077_available_with_bonus"" [label=""available_with_bonus""];
""1077_refund"" [label=""refund""];
""1077_participate"" [label=""participate""];
""1077_is_success"" [label=""is_success""];
""1077_time"" [label=""time""];
""1077_available_without_bonus"" [label=""available_without_bonus""];
""1077_init"" [label=""init""];
""1077_closeCrowdsale"" [label=""closeCrowdsale""];
""1077_collect"" [label=""collect""];
""1077_destroy"" [label=""destroy""];
""1077_fallback"" [label=""fallback""];
""1077_min_balance_for_bonus"" [label=""min_balance_for_bonus""];
""1077_participate"" -> ""1077_add"";
""1077_fallback"" -> ""1077_participate"";
""1077_participate"" -> ""1077_in_time"";
""1077_participate"" -> ""1077_sub"";
""1077_destroy"" -> ""1077_onlyOwner"";
""1077_participate"" -> ""1077_wdiv"";
""1077_init"" -> ""1077_onlyOwner"";
""1077_participate"" -> ""1077_has_value"";
""1077_participate"" -> ""1077_min"";
""1077_closeCrowdsale"" -> ""1077_my_token_balance"";
""1077_destroy"" -> ""1077_time"";
""1077_participate"" -> ""1077_wmul"";
""1077_participate"" -> ""1077_available_with_bonus"";
""1077_available_without_bonus"" -> ""1077_my_token_balance"";
""1077_closeCrowdsale"" -> ""1077_time"";
""1077_available_with_bonus"" -> ""1077_my_token_balance"";
""1077_participate"" -> ""1077_my_token_balance"";
""1077_participate"" -> ""1077_cast"";
""1077_available_with_bonus"" -> ""1077_min_balance_for_bonus"";
""1077_closeCrowdsale"" -> ""1077_is_success"";
""1077_participate"" -> ""1077_hadd"";
""1077_available_without_bonus"" -> ""1077_min_balance_for_bonus"";
""1077_available_without_bonus"" -> ""1077_min"";
""1077_participate"" -> ""1077_available_without_bonus"";
}
"
0x4b368266adb3e159affe3f6fe85b8e0f789323c2.sol,TTS,contract TTS is Token { string public name; string public symbol; uint32 internal rate; uint32 internal consume; uint256 internal totalConsume; uint256 internal bigJackpot; uint256 internal smallJackpot; uint256 public consumeRule; address internal owner; modifier onlyOwner(){ require (msg.sender==owner); _; },1,"subgraph cluster_958_TTS {
label=""TTS"";
""958_balanceOf"" [label=""balanceOf""];
""958_transfer"" [label=""transfer""];
""958_approve"" [label=""approve""];
""958_TTS"" [label=""TTS""];
""958_getBalance"" [label=""getBalance""];
""958_getEth"" [label=""getEth""];
""958_getRate"" [label=""getRate""];
""958_setRate"" [label=""setRate""];
""958_trashOf"" [label=""trashOf""];
""958_inTrash"" [label=""inTrash""];
""958_smallCheckOut"" [label=""smallCheckOut""];
""958_getBigJackpot"" [label=""getBigJackpot""];
""958_getTotalConsume"" [label=""getTotalConsume""];
""958_fallback"" [label=""fallback""];
""958_tickets"" [label=""tickets""];
""958_transferFrom"" [label=""transferFrom""];
""958_getConsume"" [label=""getConsume""];
""958_sendAll"" [label=""sendAll""];
""958_allowance"" [label=""allowance""];
""958_ticketConsume"" [label=""ticketConsume""];
""958_setJackpot"" [label=""setJackpot""];
""958_bigCheckOut"" [label=""bigCheckOut""];
""958_getSmallJackpot"" [label=""getSmallJackpot""];
""958_getEth"" -> ""958_onlyOwner"";
""958_smallCheckOut"" -> ""958_onlyOwner"";
""958_bigCheckOut"" -> ""958_onlyOwner"";
""958_ticketConsume"" -> ""958_setJackpot"";
""958_sendAll"" -> ""958_onlyOwner"";
""958_setRate"" -> ""958_onlyOwner"";
}
"
0xee1f0f9731ee93736e219598e6aa441ad36ffc61.sol,ENIGMA,contract ENIGMA { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_ENIGMA {
label=""ENIGMA"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_Try"" [label=""Try""];
""132_StopGame"" [label=""StopGame""];
""132_set_game"" [label=""set_game""];
""132_fallback"" [label=""fallback""];
}
"
0xaab606817809841e8b1168be8779eeaf6744ef64.sol,DividendToken,"contract DividendToken is StandardToken, Ownable { using SafeMath for uint256; uint256 public claimTimeout = 20 days; uint256 public dividendCycleTime = 350 days; uint256 public currentDividend; mapping(address => uint256) unclaimedDividend; mapping(address => uint256) public lastUpdate; uint256 public lastDividendIncreaseDate; mapping(address => bool) public isTreasurer; uint256 public dividendEndTime = 0; event Payin(address _owner, uint256 _value, uint256 _endTime); event Payout(address _tokenHolder, uint256 _value); event Reclaimed(uint256 remainingBalance, uint256 _endTime, uint256 _now); event ChangedTreasurer(address treasurer, bool active); constructor() public { isTreasurer[owner] = true; }",1,"subgraph cluster_1282_DividendToken {
label=""DividendToken"";
""1282_transfer"" [label=""transfer""];
""1282_fallback"" [label=""fallback""];
""1282_getClaimableDividend"" [label=""getClaimableDividend""];
""1282_updateDividend"" [label=""updateDividend""];
""1282_claimDividend"" [label=""claimDividend""];
""1282_transferDividend"" [label=""transferDividend""];
""1282_requestUnclaimed"" [label=""requestUnclaimed""];
""1282_constructor"" [label=""constructor""];
""1282_setTreasurer"" [label=""setTreasurer""];
""1282_transferFrom"" [label=""transferFrom""];
""1282_calcDividend"" [label=""calcDividend""];
""1282_getClaimableDividend"" -> ""1282_calcDividend"";
""1282_transferDividend"" -> ""1282_updateDividend"";
""1282_requestUnclaimed"" -> ""1282_onlyOwner"";
""1282_transfer"" -> ""1282_transferDividend"";
""1282_claimDividend"" -> ""1282_updateDividend"";
""1282_transfer"" -> ""1282_transfer"";
""1282_setTreasurer"" -> ""1282_onlyOwner"";
""1282_transferFrom"" -> ""1282_transferDividend"";
""1282_transferDividend"" -> ""1282_balanceOf"";
""1282_calcDividend"" -> ""1282_balanceOf"";
""1282_updateDividend"" -> ""1282_calcDividend"";
""1282_transferFrom"" -> ""1282_transferFrom"";
}
"
0x70d28b8d6c19f3074a3edf3033f0defa7a4ce4df.sol,AceDice,contract AceDice { uint constant HOUSE_EDGE_PERCENT = 2; uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0004 ether; uint constant MIN_JACKPOT_BET = 0.1 ether; uint constant JACKPOT_MODULO = 1000; uint constant JACKPOT_FEE = 0.001 ether; uint constant MIN_BET = 0.01 ether; uint constant MAX_AMOUNT = 300000 ether; uint constant MAX_MASK_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO; uint constant BET_EXPIRATION_BLOCKS = 250; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; address public owner; address private nextOwner; uint public maxProfit; address public secretSigner; uint128 public jackpotSize; uint public todaysRewardSize; uint128 public lockedInBets; struct Bet { uint amount; uint8 rollUnder; uint40 placeBlockNumber; uint40 mask; address gambler; address inviter; },1,"subgraph cluster_2036_AceDice {
label=""AceDice"";
""2036_thisBalance"" [label=""thisBalance""];
""2036_settleBet"" [label=""settleBet""];
""2036_constructor"" [label=""constructor""];
""2036_withdrawFunds"" [label=""withdrawFunds""];
""2036_settleBetCommon"" [label=""settleBetCommon""];
""2036_settleBetUncleMerkleProof"" [label=""settleBetUncleMerkleProof""];
""2036_setSecretSigner"" [label=""setSecretSigner""];
""2036_requireCorrectReceipt"" [label=""requireCorrectReceipt""];
""2036_approveNextOwner"" [label=""approveNextOwner""];
""2036_getProfile"" [label=""getProfile""];
""2036_getSecretSigner"" [label=""getSecretSigner""];
""2036_payTodayReward"" [label=""payTodayReward""];
""2036_getMyAccuAmount"" [label=""getMyAccuAmount""];
""2036_placeBetWithInviter"" [label=""placeBetWithInviter""];
""2036_verifyMerkleProof"" [label=""verifyMerkleProof""];
""2036_acceptNextOwner"" [label=""acceptNextOwner""];
""2036_encodePacketCommit"" [label=""encodePacketCommit""];
""2036_setAvatarIndex"" [label=""setAvatarIndex""];
""2036_applyVIPLevel"" [label=""applyVIPLevel""];
""2036_placeBet"" [label=""placeBet""];
""2036_memcpy"" [label=""memcpy""];
""2036_setMaxProfit"" [label=""setMaxProfit""];
""2036_refundBet"" [label=""refundBet""];
""2036_setNickName"" [label=""setNickName""];
""2036_setCroupier"" [label=""setCroupier""];
""2036_kill"" [label=""kill""];
""2036_increaseJackpot"" [label=""increaseJackpot""];
""2036_sendFunds"" [label=""sendFunds""];
""2036_verifyCommit"" [label=""verifyCommit""];
""2036_fallback"" [label=""fallback""];
""2036_getDiceWinAmount"" [label=""getDiceWinAmount""];
""2036_placeBet"" -> ""2036_getDiceWinAmount"";
""2036_settleBetUncleMerkleProof"" -> ""2036_verifyMerkleProof"";
""2036_placeBet"" -> ""2036_verifyCommit"";
""2036_setSecretSigner"" -> ""2036_onlyOwner"";
""2036_settleBetUncleMerkleProof"" -> ""2036_requireCorrectReceipt"";
""2036_setMaxProfit"" -> ""2036_onlyOwner"";
""2036_verifyMerkleProof"" -> ""2036_memcpy"";
""2036_payTodayReward"" -> ""2036_onlyOwner"";
""2036_settleBetCommon"" -> ""2036_applyVIPLevel"";
""2036_increaseJackpot"" -> ""2036_onlyOwner"";
""2036_refundBet"" -> ""2036_sendFunds"";
""2036_settleBetCommon"" -> ""2036_getDiceWinAmount"";
""2036_verifyCommit"" -> ""2036_encodePacketCommit"";
""2036_settleBetCommon"" -> ""2036_sendFunds"";
""2036_approveNextOwner"" -> ""2036_onlyOwner"";
""2036_settleBetUncleMerkleProof"" -> ""2036_settleBetCommon"";
""2036_withdrawFunds"" -> ""2036_sendFunds"";
""2036_settleBetUncleMerkleProof"" -> ""2036_onlyCroupier"";
""2036_placeBetWithInviter"" -> ""2036_getDiceWinAmount"";
""2036_settleBet"" -> ""2036_settleBetCommon"";
""2036_getSecretSigner"" -> ""2036_onlyOwner"";
""2036_withdrawFunds"" -> ""2036_onlyOwner"";
""2036_refundBet"" -> ""2036_getDiceWinAmount"";
""2036_kill"" -> ""2036_onlyOwner"";
""2036_settleBet"" -> ""2036_onlyCroupier"";
""2036_placeBetWithInviter"" -> ""2036_verifyCommit"";
""2036_setCroupier"" -> ""2036_onlyOwner"";
}
"
0x553e3e5ba03e862c93c7834b80ca800018ba4736.sol,SamsungCryptoPayments,"contract SamsungCryptoPayments is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 2000000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e1; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0xf228A325c92d4002A159eb52Bf6A9C509C039CCA; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_SamsungCryptoPayments {
label=""SamsungCryptoPayments"";
""1261_transfer"" [label=""transfer""];
""1261_approve"" [label=""approve""];
""1261_allowance"" [label=""allowance""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_constructor"" [label=""constructor""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_add"" [label=""add""];
""1261_getTokens"" [label=""getTokens""];
""1261_distr"" [label=""distr""];
""1261_withdraw"" [label=""withdraw""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_burn"" [label=""burn""];
""1261_fallback"" [label=""fallback""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_Distribute"" [label=""Distribute""];
""1261_distr"" -> ""1261_canDistr"";
""1261_constructor"" -> ""1261_distr"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_getTokens"" -> ""1261_distr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
}
"
0xd7faef6fd3d3e22037619a756221e38f7f2c9c62.sol,Blogger,contract Blogger { address public author; uint public donationCount; uint public withdrawalDate; struct Donate { address funder; uint value; },1,"subgraph cluster_232_Blogger {
label=""Blogger"";
""232_withdraw"" [label=""withdraw""];
""232_constructor"" [label=""constructor""];
""232_requestRefund"" [label=""requestRefund""];
""232_donate"" [label=""donate""];
""232_getContractValue"" [label=""getContractValue""];
""232_getSummary"" [label=""getSummary""];
""232_withdraw"" -> ""232_restricted"";
}
"
0xbf008cb93c2b19c3ae0db4149bcfa465b2ea0888.sol,GameTable,contract GameTable { using SafeMath for uint; struct Player { address addr; uint amount; uint profit; },1,"subgraph cluster_1183_GameTable {
label=""GameTable"";
""1183_getPlayerAmount"" [label=""getPlayerAmount""];
""1183_GameTable"" [label=""GameTable""];
""1183_getOptionInfo"" [label=""getOptionInfo""];
""1183_kill"" [label=""kill""];
""1183_newGame"" [label=""newGame""];
""1183_getGameNum"" [label=""getGameNum""];
""1183_setWinner"" [label=""setWinner""];
""1183_getGameInfo"" [label=""getGameInfo""];
""1183_getPlayerPlayInfo"" [label=""getPlayerPlayInfo""];
""1183_contribute"" [label=""contribute""];
""1183_newOption"" [label=""newOption""];
""1183_safeWithdrawal"" [label=""safeWithdrawal""];
""1183_getGameWinner"" [label=""getGameWinner""];
""1183_setWinner"" -> ""1183_safeWithdrawal"";
}
"
0x383ece94bfdbdefe651aa2cba51e7fca2773b788.sol,PreSale,"contract PreSale is Ownable, ReentrancyGuard { using SafeMath for uint256; RicoToken public token; address tokenContractAddress; uint256 public startTime; uint256 public endTime; address public wallet; uint256 public rate; uint256 public minimumInvest; uint256 public softCap; uint256 public hardCap; mapping(address => uint) public balances; uint256 public weiRaised; uint256 bonusPercent; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function PreSale( uint256 _startTime, uint256 _period, address _wallet, address _token, uint256 _minimumInvest) public { require(_period != 0); require(_token != address(0)); startTime = _startTime; endTime = startTime + _period * 1 days; wallet = _wallet; token = RicoToken(_token); tokenContractAddress = _token; minimumInvest = _minimumInvest; rate = 6667; softCap = 150 * 1 ether; hardCap = 1500 * 1 ether; bonusPercent = 50; }",1,"subgraph cluster_1352_PreSale {
label=""PreSale"";
""1352_changeTokenOwner"" [label=""changeTokenOwner""];
""1352_getTokenAmount"" [label=""getTokenAmount""];
""1352_fallback"" [label=""fallback""];
""1352_forwardFunds"" [label=""forwardFunds""];
""1352_refund"" [label=""refund""];
""1352_finishPreSale"" [label=""finishPreSale""];
""1352_PreSale"" [label=""PreSale""];
""1352_hasEnded"" [label=""hasEnded""];
""1352_buyTokens"" [label=""buyTokens""];
""1352_buyTokens"" -> ""1352_getTokenAmount"";
""1352_changeTokenOwner"" -> ""1352_onlyOwner"";
""1352_fallback"" -> ""1352_buyTokens"";
""1352_buyTokens"" -> ""1352_saleIsOn"";
""1352_buyTokens"" -> ""1352_nonReentrant"";
""1352_finishPreSale"" -> ""1352_forwardFunds"";
""1352_refund"" -> ""1352_refundAllowed"";
""1352_finishPreSale"" -> ""1352_onlyOwner"";
""1352_buyTokens"" -> ""1352_isUnderHardCap"";
}
"
0xedbc41b7d0330860be1dd8d682b2e868ae6da6e4.sol,TokenERC20,"contract TokenERC20 is Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 18; uint256 public totalSupply; uint256 public currentTotalSupply = 0; uint256 public airdrop; uint256 public startBalance; uint256 public buyPrice ; mapping(address => bool) touched; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) internal allowed; mapping(address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Burn(address indexed burner, uint256 value); constructor( uint256 initialSupply ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_909_TokenERC20 {
label=""TokenERC20"";
""909_selfdestructs"" [label=""selfdestructs""];
""909_balanceOf"" [label=""balanceOf""];
""909_totalSupply"" [label=""totalSupply""];
""909_transferFrom"" [label=""transferFrom""];
""909_constructor"" [label=""constructor""];
""909_getBalance"" [label=""getBalance""];
""909_increaseApproval"" [label=""increaseApproval""];
""909_setPrices"" [label=""setPrices""];
""909_fallback"" [label=""fallback""];
""909_modifyairdrop"" [label=""modifyairdrop""];
""909_allowance"" [label=""allowance""];
""909__burn"" [label=""_burn""];
""909_getEth"" [label=""getEth""];
""909_burn"" [label=""burn""];
""909_freezeAccount"" [label=""freezeAccount""];
""909_decreaseApproval"" [label=""decreaseApproval""];
""909_approve"" [label=""approve""];
""909_transfer"" [label=""transfer""];
""909_mintToken"" [label=""mintToken""];
""909_modifyairdrop"" -> ""909_onlyOwner"";
""909_balanceOf"" -> ""909_getBalance"";
""909_freezeAccount"" -> ""909_onlyOwner"";
""909_selfdestructs"" -> ""909_onlyOwner"";
""909_setPrices"" -> ""909_onlyOwner"";
""909_getEth"" -> ""909_onlyOwner"";
""909_burn"" -> ""909__burn"";
""909_mintToken"" -> ""909_onlyOwner"";
}
"
0x4c4757b23526ba13876f8ef3efe973618266e3e8.sol,UZMINI_KO,contract UZMINI_KO { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_UZMINI_KO {
label=""UZMINI_KO"";
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
}
"
0xd3efa0d59dccd79a8f2011f5adf527e78f1f68b4.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 10000000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_selfdestructs"" [label=""selfdestructs""];
""612__transfer"" [label=""_transfer""];
""612_freezeAccount"" [label=""freezeAccount""];
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_mintToken"" [label=""mintToken""];
""612_buy"" [label=""buy""];
""612_fallback"" [label=""fallback""];
""612_setPrices"" [label=""setPrices""];
""612_selfdestructs"" -> ""612_onlyOwner"";
""612_fallback"" -> ""612__transfer"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_buy"" -> ""612__transfer"";
""612_mintToken"" -> ""612_onlyOwner"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
}
"
0xf3391a78b4d53b2a600ad9e663ae00f6d5bb41a4.sol,MillenniumNetwork,"contract MillenniumNetwork is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 330000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 1000000e8; uint public target0drop = 4000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_MillenniumNetwork {
label=""MillenniumNetwork"";
""1253_constructor"" [label=""constructor""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_distr"" [label=""distr""];
""1253_getTokens"" [label=""getTokens""];
""1253_fallback"" [label=""fallback""];
""1253_approve"" [label=""approve""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_withdraw"" [label=""withdraw""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_add"" [label=""add""];
""1253_transfer"" [label=""transfer""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_Distribute"" [label=""Distribute""];
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_distr"" -> ""1253_canDistr"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
}
"
0xee68907c93b57d57a1c4d60940ff1b310e18e467.sol,ICOBuyer,"contract ICOBuyer is Ownable { event EtherReceived(address indexed _contributor, uint256 _amount); event EtherWithdrawn(uint256 _amount); event TokensWithdrawn(uint256 _balance); event ICOPurchased(uint256 _amount); event ICOStartBlockChanged(uint256 _icoStartBlock); event ExecutorChanged(address _executor); event CrowdSaleChanged(address _crowdSale); event TokenChanged(address _token); event PurchaseCapChanged(uint256 _purchaseCap); uint256 public icoStartBlock; address public crowdSale; address public executor; uint256 public purchaseCap; modifier onlyExecutorOrOwner() { require((msg.sender == executor) || (msg.sender == owner)); _; }",1,"subgraph cluster_424_ICOBuyer {
label=""ICOBuyer"";
""424_withdrawEther"" [label=""withdrawEther""];
""424_ICOBuyer"" [label=""ICOBuyer""];
""424_withdrawTokens"" [label=""withdrawTokens""];
""424_changeCrowdSale"" [label=""changeCrowdSale""];
""424_changeExecutor"" [label=""changeExecutor""];
""424_fallback"" [label=""fallback""];
""424_getBlockNumber"" [label=""getBlockNumber""];
""424_buyICO"" [label=""buyICO""];
""424_changeICOStartBlock"" [label=""changeICOStartBlock""];
""424_changePurchaseCap"" [label=""changePurchaseCap""];
""424_changeICOStartBlock"" -> ""424_onlyOwner"";
""424_changePurchaseCap"" -> ""424_onlyOwner"";
""424_changeCrowdSale"" -> ""424_onlyOwner"";
""424_changeExecutor"" -> ""424_onlyOwner"";
""424_buyICO"" -> ""424_getBlockNumber"";
""424_withdrawTokens"" -> ""424_onlyOwner"";
""424_withdrawEther"" -> ""424_onlyOwner"";
""424_buyICO"" -> ""424_onlyExecutorOrOwner"";
}
"
0x44cf74e16bd4dfcf38cec1236f5cb7e92a4f9edf.sol,BC_GAME,contract BC_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_BC_GAME {
label=""BC_GAME"";
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x6de3cc59152e19f108378984f45e20a34c9f6338.sol,EtherSpin,"contract EtherSpin is usingOraclize, SafeMath { address public owner; uint public betCount; uint public minBet; uint public maxBet; uint public edgeRange; uint public payoutMultiplier; uint public gasLimit; uint public standardFee; uint public minimumNumber; uint public totalPlayerWinnings; uint public totalHouseWinnings; mapping (bytes32 => address) playerAddy; mapping (bytes32 => uint) playerBetSize; mapping (bytes32 => bool) playerHiLo; event LogBet(address indexed playerAddy, bool indexed HiLo, uint ActualRNGNumber, uint betSizing, bool WinLossResult); event LogErr(uint errcode); modifier onlyOwner { if (msg.sender != owner) throw; _; }",1,"subgraph cluster_6368_EtherSpin {
label=""EtherSpin"";
""6368_ownerSetEdgeRangeAndPayout"" [label=""ownerSetEdgeRangeAndPayout""];
""6368_ownerTransferEther"" [label=""ownerTransferEther""];
""6368___callback"" [label=""__callback""];
""6368_ownerSetGasLimit"" [label=""ownerSetGasLimit""];
""6368_ownerKillContract"" [label=""ownerKillContract""];
""6368_roll"" [label=""roll""];
""6368_ownerSetLimits"" [label=""ownerSetLimits""];
""6368_ownerDeposit"" [label=""ownerDeposit""];
""6368_fallback"" [label=""fallback""];
""6368_EtherSpin"" [label=""EtherSpin""];
""6368_rollLo"" [label=""rollLo""];
""6368_ownerSetStandardFee"" [label=""ownerSetStandardFee""];
""6368_ownerTransferEther"" -> ""6368_onlyOwner"";
""6368_EtherSpin"" -> ""6368_ownerSetGasLimit"";
""6368___callback"" -> ""6368_oraclize_randomDS_proofVerify__returnCode"";
""6368_ownerSetEdgeRangeAndPayout"" -> ""6368_onlyOwner"";
""6368_ownerSetStandardFee"" -> ""6368_onlyOwner"";
""6368_fallback"" -> ""6368_roll"";
""6368_ownerSetGasLimit"" -> ""6368_onlyOwner"";
""6368_ownerKillContract"" -> ""6368_onlyOwner"";
""6368_EtherSpin"" -> ""6368_ownerSetEdgeRangeAndPayout"";
""6368_EtherSpin"" -> ""6368_oraclize_setProof"";
""6368_roll"" -> ""6368_oraclize_newRandomDSQuery"";
""6368___callback"" -> ""6368_add"";
""6368_rollLo"" -> ""6368_oraclize_newRandomDSQuery"";
""6368_ownerSetLimits"" -> ""6368_onlyOwner"";
""6368_EtherSpin"" -> ""6368_ownerSetLimits"";
""6368_EtherSpin"" -> ""6368_ownerSetStandardFee"";
""6368___callback"" -> ""6368_onlyOraclize"";
}
"
0xedebe7749b91a475918750842256f23fbe8e3029.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private admin = msg.sender; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },1,"subgraph cluster_1164_PlayerBook {
label=""PlayerBook"";
""1164_getNameFee"" [label=""getNameFee""];
""1164_constructor"" [label=""constructor""];
""1164_addGame"" [label=""addGame""];
""1164_checkIfNameValid"" [label=""checkIfNameValid""];
""1164_setRegistrationFee"" [label=""setRegistrationFee""];
""1164_getPlayerName"" [label=""getPlayerName""];
""1164_determinePID"" [label=""determinePID""];
""1164_registerNameXaddr"" [label=""registerNameXaddr""];
""1164_registerNameCore"" [label=""registerNameCore""];
""1164_registerNameXIDFromDapp"" [label=""registerNameXIDFromDapp""];
""1164_getPlayerAddr"" [label=""getPlayerAddr""];
""1164_registerNameXID"" [label=""registerNameXID""];
""1164_registerNameXname"" [label=""registerNameXname""];
""1164_getPlayerLAff"" [label=""getPlayerLAff""];
""1164_registerNameXnameFromDapp"" [label=""registerNameXnameFromDapp""];
""1164_registerNameXaddrFromDapp"" [label=""registerNameXaddrFromDapp""];
""1164_useMyOldName"" [label=""useMyOldName""];
""1164_getPlayerID"" [label=""getPlayerID""];
""1164_addMeToGame"" [label=""addMeToGame""];
""1164_getPlayerID"" -> ""1164_determinePID"";
""1164_registerNameXaddr"" -> ""1164_isHuman"";
""1164_registerNameXnameFromDapp"" -> ""1164_determinePID"";
""1164_registerNameXIDFromDapp"" -> ""1164_determinePID"";
""1164_registerNameXIDFromDapp"" -> ""1164_isRegisteredGame"";
""1164_registerNameXaddrFromDapp"" -> ""1164_registerNameCore"";
""1164_registerNameXaddrFromDapp"" -> ""1164_determinePID"";
""1164_setRegistrationFee"" -> ""1164_onlyAdmin"";
""1164_registerNameXname"" -> ""1164_determinePID"";
""1164_registerNameXID"" -> ""1164_determinePID"";
""1164_registerNameXnameFromDapp"" -> ""1164_isRegisteredGame"";
""1164_useMyOldName"" -> ""1164_isHuman"";
""1164_registerNameXaddrFromDapp"" -> ""1164_isRegisteredGame"";
""1164_addMeToGame"" -> ""1164_isHuman"";
""1164_registerNameXID"" -> ""1164_isHuman"";
""1164_registerNameXID"" -> ""1164_registerNameCore"";
""1164_registerNameXaddr"" -> ""1164_registerNameCore"";
""1164_registerNameXname"" -> ""1164_registerNameCore"";
""1164_registerNameXnameFromDapp"" -> ""1164_registerNameCore"";
""1164_addGame"" -> ""1164_onlyAdmin"";
""1164_getPlayerID"" -> ""1164_isRegisteredGame"";
""1164_registerNameXaddr"" -> ""1164_determinePID"";
""1164_registerNameXname"" -> ""1164_isHuman"";
""1164_registerNameXIDFromDapp"" -> ""1164_registerNameCore"";
}
"
0x0180ec945191fda23c52b1d05eec64a2e3f68781.sol,BnsPresale,"contract BnsPresale { string public constant VERSION = ; uint public constant PRESALE_START = 4465500; uint public constant PRESALE_END = 4466550; uint public constant WITHDRAWAL_END = 4469000; address public constant OWNER = 0xcEAfe38b8d3802789A2A2cc45EA5d08bE8EA3b49; uint public constant MIN_TOTAL_AMOUNT_TO_RECEIVE_ETH = 0; uint public constant MAX_TOTAL_AMOUNT_TO_RECEIVE_ETH = 1; uint public constant MIN_ACCEPTED_AMOUNT_FINNEY = 1; string[5] private stateNames = [, , , , ]; enum State { BEFORE_START, PRESALE_RUNNING, WITHDRAWAL_RUNNING, REFUND_RUNNING, CLOSED }",1,"subgraph cluster_489_BnsPresale {
label=""BnsPresale"";
""489_withdrawFunds"" [label=""withdrawFunds""];
""489_sendRefund"" [label=""sendRefund""];
""489_currentState"" [label=""currentState""];
""489_receiveFunds"" [label=""receiveFunds""];
""489_stop"" [label=""stop""];
""489_refund"" [label=""refund""];
""489_BnsPresale"" [label=""BnsPresale""];
""489_state"" [label=""state""];
""489_fallback"" [label=""fallback""];
""489_min"" [label=""min""];
""489_abort"" [label=""abort""];
""489_sendRefund"" -> ""489_tokenHoldersOnly"";
""489_refund"" -> ""489_noReentrancy"";
""489_stop"" -> ""489_onlyOwner"";
""489_state"" -> ""489_currentState"";
""489_fallback"" -> ""489_sendRefund"";
""489_refund"" -> ""489_sendRefund"";
""489_withdrawFunds"" -> ""489_onlyOwner"";
""489_abort"" -> ""489_onlyOwner"";
""489_withdrawFunds"" -> ""489_noReentrancy"";
""489_BnsPresale"" -> ""489_validSetupOnly"";
""489_fallback"" -> ""489_currentState"";
""489_sendRefund"" -> ""489_min"";
""489_fallback"" -> ""489_receiveFunds"";
""489_refund"" -> ""489_inState"";
""489_receiveFunds"" -> ""489_notTooSmallAmountOnly"";
""489_stop"" -> ""489_inState"";
""489_fallback"" -> ""489_noReentrancy"";
""489_abort"" -> ""489_inStateBefore"";
}
"
0x3395465cb04b8ebd2ae2647cf37bcb2384d71d49.sol,Base,contract Base { using SafeMath for uint256; uint public createTime = now; address public owner; modifier onlyOwner { require(msg.sender == owner); _; },1,"subgraph cluster_274_Base {
label=""Base"";
""274_setLock"" [label=""setLock""];
""274_userRefund"" [label=""userRefund""];
""274_lock"" [label=""lock""];
""274_unLock"" [label=""unLock""];
""274__userRefund"" [label=""_userRefund""];
""274_setOwner"" [label=""setOwner""];
""274_getEventId"" [label=""getEventId""];
""274__userRefund"" -> ""274_lock"";
""274_setOwner"" -> ""274_onlyOwner"";
""274__userRefund"" -> ""274_unLock"";
""274_userRefund"" -> ""274__userRefund"";
""274_setLock"" -> ""274_onlyOwner"";
}
"
0x5085c5356129ee11bffb523e3166d7153ac13c75.sol,Casino,"contract Casino is Ownable, HouseAdmin { using SafeMath for uint; uint constant HOUSE_EDGE_PERCENT = 1; uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0003 ether; uint constant BET_AMOUNT_MIN = 0.01 ether; uint constant BET_AMOUNT_MAX = 1000 ether; uint constant BET_EXPIRATION_BLOCKS = 250; uint constant MAX_MASKABLE_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASKABLE_MODULO; uint constant POPCOUNT_MULT = 0x0000000000002000000000100000000008000000000400000000020000000001; uint constant POPCOUNT_MASK = 0x0001041041041041041041041041041041041041041041041041041041041041; uint constant POPCOUNT_MODULO = 0x3F; uint public bankFund; struct Bet { uint8 modulo; uint64 choice; uint amount; uint winAmount; uint placeBlockNumber; bool isActive; address player; }",1,"subgraph cluster_960_Casino {
label=""Casino"";
""960_closeBet"" [label=""closeBet""];
""960_getAvailableBalance"" [label=""getAvailableBalance""];
""960_recharge"" [label=""recharge""];
""960_constructor"" [label=""constructor""];
""960_placeBet"" [label=""placeBet""];
""960_withdraw"" [label=""withdraw""];
""960_refundBet"" [label=""refundBet""];
""960_closeBet"" -> ""960_onlyCroupier"";
""960_withdraw"" -> ""960_onlyOwner"";
""960_refundBet"" -> ""960_onlyCroupier"";
}
"
0x84cd9cf60bcb44f7bab8b75e6f03614c2c3b22b7.sol,ESmart,contract ESmart { uint constant public INVESTMENT = 0.05 ether; uint constant private START_TIME = 1541435400; address constant private TECH = 0x9A5B6966379a61388068bb765c518E5bC4D9B509; address constant private PROMO = 0xD6104cEca65db37925541A800870aEe09C8Fd78D; address constant private LAST_FUND = 0x357b9046f99eEC7E705980F328F00BAab4b3b6Be; uint constant public JACKPOT_PERCENT = 1; uint constant public TECH_PERCENT = 7; uint constant public PROMO_PERCENT = 13; uint constant public LAST_FUND_PERCENT = 10; uint constant public MAX_IDLE_TIME = 10 minutes; uint constant public NEXT_ROUND_TIME = 30 minutes; uint constant public MULTIPLIER = 120; struct Deposit { address depositor; uint128 deposit; uint128 expect; },1,"subgraph cluster_779_ESmart {
label=""ESmart"";
""779_getQueueLength"" [label=""getQueueLength""];
""779_getDeposits"" [label=""getDeposits""];
""779_proceedToNewStage"" [label=""proceedToNewStage""];
""779_pay"" [label=""pay""];
""779_addDeposit"" [label=""addDeposit""];
""779_getStartTime"" [label=""getStartTime""];
""779_getDeposit"" [label=""getDeposit""];
""779_checkAndUpdateStage"" [label=""checkAndUpdateStage""];
""779_withdrawPrize"" [label=""withdrawPrize""];
""779_getDepositsCount"" [label=""getDepositsCount""];
""779_getStageStartTime"" [label=""getStageStartTime""];
""779_push"" [label=""push""];
""779_fallback"" [label=""fallback""];
""779_getCurrentStageByTime"" [label=""getCurrentStageByTime""];
""779_fallback"" -> ""779_pay"";
""779_getStartTime"" -> ""779_getStageStartTime"";
""779_withdrawPrize"" -> ""779_getCurrentStageByTime"";
""779_fallback"" -> ""779_checkAndUpdateStage"";
""779_fallback"" -> ""779_withdrawPrize"";
""779_fallback"" -> ""779_addDeposit"";
""779_checkAndUpdateStage"" -> ""779_getCurrentStageByTime"";
""779_getDeposits"" -> ""779_getDepositsCount"";
""779_checkAndUpdateStage"" -> ""779_proceedToNewStage"";
""779_fallback"" -> ""779_getStartTime"";
""779_getStartTime"" -> ""779_getCurrentStageByTime"";
""779_proceedToNewStage"" -> ""779_getStageStartTime"";
""779_addDeposit"" -> ""779_push"";
}
"
0x86e4dc25259ee2191cd8ae40e1865b9f0319646c.sol,CryptoRomeControl,"contract CryptoRomeControl { event ContractUpgrade(address newContract); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); address public ownerPrimary; address public ownerSecondary; address public ownerWallet; address public cryptoRomeWallet; mapping(address => uint8) public otherOperators; address public improvementContract; bool public paused = false; constructor() public { ownerPrimary = msg.sender; ownerSecondary = msg.sender; ownerWallet = msg.sender; cryptoRomeWallet = msg.sender; }",1,"subgraph cluster_2408_CryptoRomeControl {
label=""CryptoRomeControl"";
""2408_setOtherOperator"" [label=""setOtherOperator""];
""2408_transferCryptoRomeWalletOwnership"" [label=""transferCryptoRomeWalletOwnership""];
""2408_setSecondaryOwner"" [label=""setSecondaryOwner""];
""2408_transferOwnerWalletOwnership"" [label=""transferOwnerWalletOwnership""];
""2408_withdrawBalance"" [label=""withdrawBalance""];
""2408_pause"" [label=""pause""];
""2408_setImprovementContract"" [label=""setImprovementContract""];
""2408_setPrimaryOwner"" [label=""setPrimaryOwner""];
""2408_unpause"" [label=""unpause""];
""2408_constructor"" [label=""constructor""];
""2408_pause"" -> ""2408_whenNotPaused"";
""2408_setSecondaryOwner"" -> ""2408_onlyOwner"";
""2408_unpause"" -> ""2408_onlyOwner"";
""2408_setOtherOperator"" -> ""2408_onlyOwner"";
""2408_setImprovementContract"" -> ""2408_onlyOwner"";
""2408_setPrimaryOwner"" -> ""2408_onlyOwner"";
""2408_withdrawBalance"" -> ""2408_onlyOwner"";
""2408_unpause"" -> ""2408_whenPaused"";
""2408_transferOwnerWalletOwnership"" -> ""2408_onlyOwner"";
""2408_pause"" -> ""2408_onlyOwner"";
""2408_transferCryptoRomeWalletOwnership"" -> ""2408_onlyOwner"";
}
"
0x3a966ffa8451cbf3769b7d1f94d5b47da254edb0.sol,Play0x_LottoBall,contract Play0x_LottoBall { using SafeMath for uint256; using SafeMath for uint128; using SafeMath for uint40; using SafeMath for uint8; uint public jackpotSize; uint public tokenJackpotSize; uint public MIN_BET; uint public MAX_BET; uint public MAX_AMOUNT; uint public maxProfit; uint public maxTokenProfit; uint8 public platformFeePercentage = 15; uint8 public jackpotFeePercentage = 5; uint8 public ERC20rewardMultiple = 5; uint constant BetExpirationBlocks = 250; uint public lockedInBets; uint public lockedTokenInBets; bytes32 bitComparisonMask = 0xF; address public owner; address private nextOwner; address public manager; address private nextManager; address[] public secretSignerList; address public ERC20ContractAddres; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Bet { uint amount; uint40 placeBlockNumber; address gambler; },1,"subgraph cluster_3084_Play0x_LottoBall {
label=""Play0x_LottoBall"";
""3084_setMaxProfit"" [label=""setMaxProfit""];
""3084_getJackpotWinBonus"" [label=""getJackpotWinBonus""];
""3084_sendFunds"" [label=""sendFunds""];
""3084_sendTokenFundsToManager"" [label=""sendTokenFundsToManager""];
""3084_updateMAX_AMOUNT"" [label=""updateMAX_AMOUNT""];
""3084_approveNextOwner"" [label=""approveNextOwner""];
""3084_getBonusPercentageByMachineMode"" [label=""getBonusPercentageByMachineMode""];
""3084_withdrawAlltokenFunds"" [label=""withdrawAlltokenFunds""];
""3084_updateBitComparisonMask"" [label=""updateBitComparisonMask""];
""3084_settleBetVerifi"" [label=""settleBetVerifi""];
""3084_withdrawToken"" [label=""withdrawToken""];
""3084_getPossibleWinAmount"" [label=""getPossibleWinAmount""];
""3084_setTokenAddress"" [label=""setTokenAddress""];
""3084_withdrawFunds"" [label=""withdrawFunds""];
""3084_updateJackpotFeePercentage"" [label=""updateJackpotFeePercentage""];
""3084_updatePlatformFeePercentage"" [label=""updatePlatformFeePercentage""];
""3084_refundBet"" [label=""refundBet""];
""3084_updateERC20rewardMultiple"" [label=""updateERC20rewardMultiple""];
""3084_updateMIN_BET"" [label=""updateMIN_BET""];
""3084_settleBet"" [label=""settleBet""];
""3084_clearProcessedBet"" [label=""clearProcessedBet""];
""3084_getContractInformation"" [label=""getContractInformation""];
""3084_withdrawAllFunds"" [label=""withdrawAllFunds""];
""3084_refundTokenBet"" [label=""refundTokenBet""];
""3084_updateWithdrawalModeByIndex"" [label=""updateWithdrawalModeByIndex""];
""3084_setSecretSignerByIndex"" [label=""setSecretSignerByIndex""];
""3084_runRotateTime"" [label=""runRotateTime""];
""3084_getContractAddress"" [label=""getContractAddress""];
""3084_initialParameter"" [label=""initialParameter""];
""3084_setSecretSignerList"" [label=""setSecretSignerList""];
""3084_fallback"" [label=""fallback""];
""3084_placeTokenBet"" [label=""placeTokenBet""];
""3084_sendFundsToOwner"" [label=""sendFundsToOwner""];
""3084_constructor"" [label=""constructor""];
""3084_acceptNextOwner"" [label=""acceptNextOwner""];
""3084_updateWithdrawalMode"" [label=""updateWithdrawalMode""];
""3084_sendFundsToManager"" [label=""sendFundsToManager""];
""3084_kill"" [label=""kill""];
""3084_acceptNextManager"" [label=""acceptNextManager""];
""3084_clearStorage"" [label=""clearStorage""];
""3084_updateMAX_BET"" [label=""updateMAX_BET""];
""3084_placeBet"" [label=""placeBet""];
""3084_approveNextManager"" [label=""approveNextManager""];
""3084_withdrawToken"" -> ""3084_onlyOwner"";
""3084_updateBitComparisonMask"" -> ""3084_onlyOwner"";
""3084_clearStorage"" -> ""3084_clearProcessedBet"";
""3084_withdrawAllFunds"" -> ""3084_onlyOwner"";
""3084_sendFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getPossibleWinAmount"";
""3084_updateJackpotFeePercentage"" -> ""3084_onlyOwner"";
""3084_setMaxProfit"" -> ""3084_onlyOwner"";
""3084_withdrawAlltokenFunds"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_sendFunds"";
""3084_setTokenAddress"" -> ""3084_onlyManager"";
""3084_updateWithdrawalModeByIndex"" -> ""3084_onlyManager"";
""3084_updateERC20rewardMultiple"" -> ""3084_onlyManager"";
""3084_updateMIN_BET"" -> ""3084_onlyManager"";
""3084_initialParameter"" -> ""3084_onlyOwner"";
""3084_setSecretSignerByIndex"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_onlyOwner"";
""3084_approveNextManager"" -> ""3084_onlyManager"";
""3084_setSecretSignerList"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_sendFunds"";
""3084_refundBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_sendTokenFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_kill"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_runRotateTime"";
""3084_sendFundsToOwner"" -> ""3084_onlyOwner"";
""3084_approveNextOwner"" -> ""3084_onlyOwner"";
""3084_updateMAX_AMOUNT"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_getPossibleWinAmount"";
""3084_updatePlatformFeePercentage"" -> ""3084_onlyOwner"";
""3084_settleBetVerifi"" -> ""3084_runRotateTime"";
""3084_updateWithdrawalMode"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_sendFunds"";
""3084_runRotateTime"" -> ""3084_getJackpotWinBonus"";
""3084_updateMAX_BET"" -> ""3084_onlyManager"";
}
"
0x5bf5436b367de54860d1b0be31203349a4d5caa7.sol,CryptoCarAuction,"contract CryptoCarAuction is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 45000000000000000000000000; uint256 public totalDistributed = 100000000000000000000000; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 2600000000000000000000; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_962_CryptoCarAuction {
label=""CryptoCarAuction"";
""962_getTokens"" [label=""getTokens""];
""962_updateTokensPerEth"" [label=""updateTokensPerEth""];
""962_constructor"" [label=""constructor""];
""962_transferFrom"" [label=""transferFrom""];
""962_transferOwnership"" [label=""transferOwnership""];
""962_burn"" [label=""burn""];
""962_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""962_doAirdrop"" [label=""doAirdrop""];
""962_finishDistribution"" [label=""finishDistribution""];
""962_getasall"" [label=""getasall""];
""962_balanceOf"" [label=""balanceOf""];
""962_approve"" [label=""approve""];
""962_distr"" [label=""distr""];
""962_allowance"" [label=""allowance""];
""962_getTokenBalance"" [label=""getTokenBalance""];
""962_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""962_fallback"" [label=""fallback""];
""962_transfer"" [label=""transfer""];
""962_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""962_getas"" [label=""getas""];
""962_fallback"" -> ""962_getTokens"";
""962_updateTokensPerEth"" -> ""962_onlyOwner"";
""962_adminClaimAirdrop"" -> ""962_onlyOwner"";
""962_getTokens"" -> ""962_distr"";
""962_burn"" -> ""962_onlyOwner"";
""962_getTokens"" -> ""962_canDistr"";
""962_transferOwnership"" -> ""962_onlyOwner"";
""962_getasall"" -> ""962_onlyOwner"";
""962_distr"" -> ""962_canDistr"";
""962_transfer"" -> ""962_onlyPayloadSize"";
""962_getas"" -> ""962_onlyOwner"";
""962_finishDistribution"" -> ""962_onlyOwner"";
""962_adminClaimAirdropMultiple"" -> ""962_onlyOwner"";
""962_adminClaimAirdrop"" -> ""962_doAirdrop"";
""962_finishDistribution"" -> ""962_canDistr"";
""962_adminClaimAirdropMultiple"" -> ""962_doAirdrop"";
""962_transferFrom"" -> ""962_onlyPayloadSize"";
""962_constructor"" -> ""962_distr"";
""962_withdrawForeignTokens"" -> ""962_onlyOwner"";
}
"
0x0dcfdb9f5496ed7f62dd0ac019c7daf184a66aef.sol,LVRCrowdsale,"contract LVRCrowdsale { Token public tokenReward; address public creator; address public owner = 0xC9167F51CDEa635634E6d92D25664379dde36484; uint256 public price; uint256 public startDate; uint256 public endDate; event FundTransfer(address backer, uint amount, bool isContribution); function LVRCrowdsale() public { creator = msg.sender; startDate = 1522839600; endDate = 1525431600; price = 1000; tokenReward = Token(0x7095E151aBD19e8C99abdfB4568F675f747f97F6); }",1,"subgraph cluster_285_LVRCrowdsale {
label=""LVRCrowdsale"";
""285_kill"" [label=""kill""];
""285_setOwner"" [label=""setOwner""];
""285_fallback"" [label=""fallback""];
""285_setCreator"" [label=""setCreator""];
""285_setStartDate"" [label=""setStartDate""];
""285_setEndtDate"" [label=""setEndtDate""];
""285_setPrice"" [label=""setPrice""];
""285_setToken"" [label=""setToken""];
""285_LVRCrowdsale"" [label=""LVRCrowdsale""];
}
"
0x7012ef33dcc79a7341ba05cf2c5699eaaa5e0d7d.sol,Transaction,contract Transaction is Ownable { struct TransactionNeoPlace { uint id; address seller; address buyer; bytes16 itemId; bytes8 typeItem; string location; string pictureHash; bytes16 receiptHash; string comment; bytes8 status; uint256 _price; },1,"subgraph cluster_738_Transaction {
label=""Transaction"";
""738_stringToBytes8"" [label=""stringToBytes8""];
""738_getPurchases"" [label=""getPurchases""];
""738_getSales"" [label=""getSales""];
""738_sendAmount"" [label=""sendAmount""];
""738_unlockFunds"" [label=""unlockFunds""];
""738_kill"" [label=""kill""];
""738_getNumberOfTransactions"" [label=""getNumberOfTransactions""];
""738_sendAdditionalFunds"" [label=""sendAdditionalFunds""];
""738_buyItem"" [label=""buyItem""];
""738_unlockFunds"" -> ""738_stringToBytes8"";
""738_kill"" -> ""738_onlyOwner"";
""738_sendAdditionalFunds"" -> ""738_stringToBytes8"";
}
"
0x53fedbfc3f34bcda66f7dbbff52c907e7707bbff.sol,BeezGold,"contract BeezGold is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 165 * 1 days; uint public round2 = now + 130 * 1 days; uint public round1 = now + 35 * 1 days; uint256 public totalSupply = 70000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 25700e8; uint public target0drop = 0; uint public progress0drop = 0; address multisig = 0x654186811320885fC24C318E70a119A43279c1BE; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_BeezGold {
label=""BeezGold"";
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_allowance"" [label=""allowance""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_Distribute"" [label=""Distribute""];
""1263_withdraw"" [label=""withdraw""];
""1263_add"" [label=""add""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_distr"" [label=""distr""];
""1263_getTokens"" [label=""getTokens""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_constructor"" [label=""constructor""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_fallback"" [label=""fallback""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_transfer"" [label=""transfer""];
""1263_burn"" [label=""burn""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_approve"" [label=""approve""];
""1263_add"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_constructor"" -> ""1263_distr"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_getTokens"" -> ""1263_distr"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
}
"
0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol,TydoPreIco,contract TydoPreIco is Owned { using SafeMath for uint256; uint256 public constant COINS_PER_ETH = 12000; uint256 public constant bonus = 25; mapping (address => uint256) public balances; mapping (address => uint256) ethBalances; uint256 public ethCollected; uint256 public tokenSold; uint256 constant tokenDecMult = 1 ether; uint8 public state = 0; AbstractERC20 public token; event SaleStart(); event SaleClosedSuccess(uint256 _tokenSold); event SaleClosedFail(uint256 _tokenSold); constructor(address _coinToken) Owned() public { token = AbstractERC20(_coinToken); },1,"subgraph cluster_656_TydoPreIco {
label=""TydoPreIco"";
""656_withdrawTokens"" [label=""withdrawTokens""];
""656_closeSuccess"" [label=""closeSuccess""];
""656_addBonus"" [label=""addBonus""];
""656_open"" [label=""open""];
""656_fallback"" [label=""fallback""];
""656_canBuy"" [label=""canBuy""];
""656_refund"" [label=""refund""];
""656_constructor"" [label=""constructor""];
""656_tokensLeft"" [label=""tokensLeft""];
""656_buy"" [label=""buy""];
""656_withdraw"" [label=""withdraw""];
""656_closeFail"" [label=""closeFail""];
""656_withdraw"" -> ""656_ownerOnly"";
""656_constructor"" -> ""656_constructor"";
""656_fallback"" -> ""656_withdrawTokens"";
""656_buy"" -> ""656_canBuy"";
""656_fallback"" -> ""656_buy"";
""656_open"" -> ""656_ownerOnly"";
""656_fallback"" -> ""656_refund"";
""656_closeFail"" -> ""656_ownerOnly"";
""656_closeSuccess"" -> ""656_ownerOnly"";
""656_buy"" -> ""656_addBonus"";
}
"
0x0d11511ab22ec6e7a87f439a663862f1ec6d4a4b.sol,SMCT,"contract SMCT is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function SMCT() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_SMCT {
label=""SMCT"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_SMCT"" [label=""SMCT""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x0091e27b9ef50427ad431be70dc441f9f6639d78.sol,COE,"contract COE { string public name = ; uint8 public decimals = 18; string public symbol = ; address public _owner; address public _dev = 0xC96CfB18C39DC02FBa229B6EA698b1AD5576DF4c; address public _devFeesAddr; uint256 public _tokePerEth = 177000000000000000; bool public _coldStorage = true; bool public _receiveEth = true; bool _feesEnabled = false; bool _payFees = false; uint256 _fees; uint256 _lifeVal = 0; uint256 _feeLimit = 0; uint256 _devFees = 0; uint256 public _totalSupply = 100000 * 1 ether; uint256 public _circulatingSupply = 0; uint256 public _frozenTokens = 0; event Transfer(address indexed _from, address indexed _to, uint _value); event Exchanged(address indexed _from, address indexed _to, uint _value); mapping (address => uint256) public balances; mapping (address => bool) public exchangePartners; mapping (address => uint256) public exchangeRates; function COE() { _owner = msg.sender; preMine(); }",1,"subgraph cluster_1189_COE {
label=""COE"";
""1189_canExchange"" [label=""canExchange""];
""1189_exchange"" [label=""exchange""];
""1189_changeDevFeesAddr"" [label=""changeDevFeesAddr""];
""1189_mul"" [label=""mul""];
""1189_preMine"" [label=""preMine""];
""1189_changeDev"" [label=""changeDev""];
""1189_exchangeTokensFromOtherContract"" [label=""exchangeTokensFromOtherContract""];
""1189_balanceOf"" [label=""balanceOf""];
""1189_getBalance"" [label=""getBalance""];
""1189_updateFeeAmount"" [label=""updateFeeAmount""];
""1189_requestTokensFromOtherContract"" [label=""requestTokensFromOtherContract""];
""1189_totalSupply"" [label=""totalSupply""];
""1189_toggleReceiveEth"" [label=""toggleReceiveEth""];
""1189_payFeesToggle"" [label=""payFeesToggle""];
""1189_withdrawDevFees"" [label=""withdrawDevFees""];
""1189_add"" [label=""add""];
""1189_changeOwner"" [label=""changeOwner""];
""1189_getLifeVal"" [label=""getLifeVal""];
""1189_contractExchangeRate"" [label=""contractExchangeRate""];
""1189_COE"" [label=""COE""];
""1189_addExchangePartnerAddressAndRate"" [label=""addExchangePartnerAddressAndRate""];
""1189_removeExchangePartnerTargetAddress"" [label=""removeExchangePartnerTargetAddress""];
""1189_defrostFrozenTokens"" [label=""defrostFrozenTokens""];
""1189_getCirculatingSupply"" [label=""getCirculatingSupply""];
""1189_transfer"" [label=""transfer""];
""1189_div"" [label=""div""];
""1189_safeWithdrawal"" [label=""safeWithdrawal""];
""1189_addExchangePartnerTargetAddress"" [label=""addExchangePartnerTargetAddress""];
""1189_changePayRate"" [label=""changePayRate""];
""1189_fallback"" [label=""fallback""];
""1189_sub"" [label=""sub""];
""1189_toggleFreezeTokensFlag"" [label=""toggleFreezeTokensFlag""];
""1189_transfer"" -> ""1189_add"";
""1189_transfer"" -> ""1189_balanceOf"";
""1189_exchangeTokensFromOtherContract"" -> ""1189_add"";
""1189_exchange"" -> ""1189_requestTokensFromOtherContract"";
""1189_transfer"" -> ""1189_exchange"";
""1189_safeWithdrawal"" -> ""1189_mul"";
""1189_fallback"" -> ""1189_mul"";
""1189_fallback"" -> ""1189_div"";
""1189_preMine"" -> ""1189_sub"";
""1189_exchangeTokensFromOtherContract"" -> ""1189_mul"";
""1189_COE"" -> ""1189_preMine"";
""1189_fallback"" -> ""1189_sub"";
""1189_exchangeTokensFromOtherContract"" -> ""1189_sub"";
""1189_exchange"" -> ""1189_add"";
""1189_exchange"" -> ""1189_balanceOf"";
""1189_defrostFrozenTokens"" -> ""1189_add"";
""1189_exchange"" -> ""1189_sub"";
""1189_transfer"" -> ""1189_sub"";
""1189_fallback"" -> ""1189_add"";
""1189_preMine"" -> ""1189_add"";
}
"
0x0dc11b7ed751594906bce3a7091952b30528ee7e.sol,DickMeasurementContest,contract DickMeasurementContest { uint lastBlock; address owner; modifier onlyowner { require (msg.sender == owner); _; },1,"subgraph cluster_90_DickMeasurementContest {
label=""DickMeasurementContest"";
""90_withdraw"" [label=""withdraw""];
""90_mineIsBigger"" [label=""mineIsBigger""];
""90_kill"" [label=""kill""];
""90_fallback"" [label=""fallback""];
""90_DickMeasurementContest"" [label=""DickMeasurementContest""];
""90_kill"" -> ""90_onlyowner"";
""90_withdraw"" -> ""90_onlyowner"";
}
"
0x5c529eda84ef12dba15aa1a12fefafeb8dee4ea7.sol,GarudaCoin,"contract GarudaCoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 900000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 1000000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0xe9E9252A68b475E20Fb23550D64A22A8A3329eB4; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_GarudaCoin {
label=""GarudaCoin"";
""1261_getTokens"" [label=""getTokens""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_withdraw"" [label=""withdraw""];
""1261_constructor"" [label=""constructor""];
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_burn"" [label=""burn""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_Distribute"" [label=""Distribute""];
""1261_distr"" [label=""distr""];
""1261_transfer"" [label=""transfer""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_add"" [label=""add""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_allowance"" [label=""allowance""];
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_constructor"" -> ""1261_distr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
}
"
0x36cce24d6314445c11beb80f99f9f14b5ea9ecc2.sol,LynchpinPrivateICO,contract LynchpinPrivateICO is Ownable(0x1788A2Fe89a3Bfa58DB57aabbf1Ffa08ADED6cba) { using SafeMath for uint256; LynchpinToken public lynT = LynchpinToken(0xB0B1685f55843D03739c7D9b0A230F1B7DcF03D5); address public beneficiary = 0x1788A2Fe89a3Bfa58DB57aabbf1Ffa08ADED6cba; uint256 public tokeninOneEther; uint256 public maxTokensToSell = 2000000 * 10**18; uint256 public tokenSold; bool crowdsaleClosed = false; uint256 LOCK_PERIOD_START = 1556668800; uint256 LOCK_PERIOD_9_MONTH = 1580515200; uint256 LOCK_PERIOD_10_MONTH = 1583020800; uint256 LOCK_PERIOD_11_MONTH = 1585699200; uint256 LOCK_PERIOD_END = 1588291200; mapping(address => uint256) public tokensOwed; mapping(address => uint256) public ethContribution; mapping(address => bool) public isWhitelisted; event LogAddedToWhitelist(address indexed _contributor); event LogTokenRateUpdated(uint256 _newRate); event LogSaleClosed(); constructor(uint256 _tokeninOneEther) public { require (_tokeninOneEther > 0); isWhitelisted[owner] = true; tokeninOneEther = _tokeninOneEther; emit LogTokenRateUpdated(_tokeninOneEther); },1,"subgraph cluster_831_LynchpinPrivateICO {
label=""LynchpinPrivateICO"";
""831_withdrawMyTokens"" [label=""withdrawMyTokens""];
""831_constructor"" [label=""constructor""];
""831_fallback"" [label=""fallback""];
""831_closeSale"" [label=""closeSale""];
""831_updateTokenRate"" [label=""updateTokenRate""];
""831_addContributor"" [label=""addContributor""];
""831_withdrawPenaltyTokens"" [label=""withdrawPenaltyTokens""];
""831_addContributor"" -> ""831_onlyOwner"";
""831_withdrawPenaltyTokens"" -> ""831_onlyOwner"";
""831_closeSale"" -> ""831_onlyOwner"";
""831_updateTokenRate"" -> ""831_onlyOwner"";
}
"
0x7241496a3fad5b8fd93b647399f57d7c835d2385.sol,TFTOKEN,"contract TFTOKEN is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 88000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function TFTOKEN() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_TFTOKEN {
label=""TFTOKEN"";
""706_TFTOKEN"" [label=""TFTOKEN""];
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x39f89421c5bf8bb0d855c0216b00b45e3733b515.sol,DINOSale,"contract DINOSale is BaseDINOSale { using SafeMath for uint256; DINOToken public tokenReward; constructor( address ifSuccessfulSendTo, uint fundingGoalInEthers, uint fundingCapInEthers, uint minimumContribution, uint start, uint end, uint rateDINOToEther, address addressOfTokenUsedAsReward ) public { require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this), ); require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this), ); require(fundingGoalInEthers <= fundingCapInEthers, ); require(end > 0, ); beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; fundingCap = fundingCapInEthers * 1 ether; minContribution = minimumContribution * 1 ether; startTime = start; endTime = end; rate = rateDINOToEther; withdrawRate = rateDINOToEther; tokenReward = DINOToken(addressOfTokenUsedAsReward); }",1,"subgraph cluster_1796_DINOSale {
label=""DINOSale"";
""1796_fallback"" [label=""fallback""];
""1796_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1796_owner"" [label=""owner""];
""1796_withdrawToken"" [label=""withdrawToken""];
""1796_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1796_convertToMini"" [label=""convertToMini""];
""1796_safeWithdrawal"" [label=""safeWithdrawal""];
""1796_constructor"" [label=""constructor""];
""1796_fallback"" -> ""1796_checkFundingCap"";
""1796_ownerAllocateTokens"" -> ""1796_onlyOwner"";
""1796_withdrawToken"" -> ""1796_convertToMini"";
""1796_safeWithdrawal"" -> ""1796_afterDeadline"";
""1796_fallback"" -> ""1796_afterStartTime"";
""1796_fallback"" -> ""1796_saleNotClosed"";
""1796_fallback"" -> ""1796_beforeDeadline"";
""1796_fallback"" -> ""1796_checkFundingGoal"";
""1796_ownerAllocateTokens"" -> ""1796_checkFundingGoal"";
""1796_fallback"" -> ""1796_whenNotPaused"";
""1796_ownerAllocateTokens"" -> ""1796_checkFundingCap"";
""1796_safeWithdrawal"" -> ""1796_nonReentrant"";
""1796_fallback"" -> ""1796_nonReentrant"";
""1796_ownerAllocateTokens"" -> ""1796_nonReentrant"";
""1796_ownerSafeWithdrawal"" -> ""1796_nonReentrant"";
""1796_ownerSafeWithdrawal"" -> ""1796_onlyOwner"";
}
"
0xece7814a9691a94e7f3d9354155e21cfb291e13b.sol,AlmightyKeyChain,"contract AlmightyKeyChain is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function AlmightyKeyChain() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_AlmightyKeyChain {
label=""AlmightyKeyChain"";
""706_AlmightyKeyChain"" [label=""AlmightyKeyChain""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0xf2b89f45cc4ebbf11a36bdb4a4b24eada8dd30a7.sol,AirDrop,contract AirDrop is Ownable { Token public tokenInstance; function AirDrop(address _tokenAddress){ tokenInstance = Token(_tokenAddress); },1,"subgraph cluster_188_AirDrop {
label=""AirDrop"";
""188_transferEthToOnwer"" [label=""transferEthToOnwer""];
""188_AirDrop"" [label=""AirDrop""];
""188_doAirDrop"" [label=""doAirDrop""];
""188_fallback"" [label=""fallback""];
""188_kill"" [label=""kill""];
""188_transferEthToOnwer"" -> ""188_onlyOwner"";
""188_doAirDrop"" -> ""188_onlyOwner"";
""188_kill"" -> ""188_onlyOwner"";
}
"
0xd37a7e9d4681da273e13d652ed9a789274d32bd7.sol,LUPXSale,"contract LUPXSale { IERC20Token public tokenContract ; address owner ; uint256 public tokensSold ; uint256 public LUPXPrice ; event sold(address buyer, uint256 amount) ; event priceAdjusted(uint256 oldPrice, uint256 newPrice) ; event endOfSale(uint256 timeStamp) ; constructor(IERC20Token _tokenContract, uint256 LUPXperETH) public { owner = msg.sender ; tokenContract = _tokenContract ; LUPXPrice = LUPXperETH ; }",1,"subgraph cluster_241_LUPXSale {
label=""LUPXSale"";
""241_fallback"" [label=""fallback""];
""241_endLUPXSale"" [label=""endLUPXSale""];
""241_constructor"" [label=""constructor""];
""241_safeMultiply"" [label=""safeMultiply""];
""241_withdrawETH"" [label=""withdrawETH""];
""241_withdrawETH"" -> ""241_onlyOwner"";
""241_endLUPXSale"" -> ""241_onlyOwner"";
""241_fallback"" -> ""241_safeMultiply"";
}
"
0xdf4b22695eeb4a7a1cf9a42162285ce782b8427a.sol,Token,contract Token is TokenI { using SafeMath for uint256; string public techProvider = ; address public owner; struct FreezeInfo { address user; uint256 amount; },1,"subgraph cluster_1186_Token {
label=""Token"";
""1186_enableTransfers"" [label=""enableTransfers""];
""1186_balanceOf"" [label=""balanceOf""];
""1186_transfer"" [label=""transfer""];
""1186_transferMulti"" [label=""transferMulti""];
""1186_unFreeze"" [label=""unFreeze""];
""1186_destroyTokens"" [label=""destroyTokens""];
""1186_isContract"" [label=""isContract""];
""1186_freeze"" [label=""freeze""];
""1186_approve"" [label=""approve""];
""1186_generateTokens"" [label=""generateTokens""];
""1186_transferFrom"" [label=""transferFrom""];
""1186_approveAndCall"" [label=""approveAndCall""];
""1186_Token"" [label=""Token""];
""1186_claimTokens"" [label=""claimTokens""];
""1186_fallback"" [label=""fallback""];
""1186_changeOwner"" [label=""changeOwner""];
""1186_approveAndCall"" -> ""1186_approve"";
""1186_changeOwner"" -> ""1186_onlyOwner"";
""1186_approve"" -> ""1186_moreThanZero"";
""1186_claimTokens"" -> ""1186_onlyController"";
""1186_fallback"" -> ""1186_isContract"";
""1186_freeze"" -> ""1186_moreThanZero"";
""1186_transfer"" -> ""1186_realUser"";
""1186_transferFrom"" -> ""1186_realUser"";
""1186_transferFrom"" -> ""1186_moreThanZero"";
""1186_unFreeze"" -> ""1186_onlyOwner"";
""1186_destroyTokens"" -> ""1186_onlyOwner"";
""1186_transfer"" -> ""1186_moreThanZero"";
""1186_generateTokens"" -> ""1186_onlyController"";
""1186_enableTransfers"" -> ""1186_onlyOwner"";
""1186_freeze"" -> ""1186_onlyController"";
}
"
0x91f2203f273677e68d47786b62efbd9497594698.sol,Simpl_Quiz,contract Simpl_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Simpl_Quiz {
label=""Simpl_Quiz"";
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_470_RefundVault {
label=""RefundVault"";
""470_deposit"" [label=""deposit""];
""470_RefundVault"" [label=""RefundVault""];
""470_refund"" [label=""refund""];
""470_enableRefunds"" [label=""enableRefunds""];
""470_close"" [label=""close""];
""470_enableRefunds"" -> ""470_onlyOwner"";
""470_deposit"" -> ""470_onlyOwner"";
""470_close"" -> ""470_onlyOwner"";
}
"
0x2f5c8d7259b48078c0b6c0a7cf6269e3817680e5.sol,Refund,contract Refund is Ownable{ using SafeMath for uint256; tokenInterface public xcc; mapping (address => uint256) public refunds; constructor(address _xcc) public { xcc = tokenInterface(_xcc); },1,"subgraph cluster_383_Refund {
label=""Refund"";
""383_constructor"" [label=""constructor""];
""383_withdraw"" [label=""withdraw""];
""383_withdrawTokens"" [label=""withdrawTokens""];
""383_cancelRefund"" [label=""cancelRefund""];
""383_fallback"" [label=""fallback""];
""383_setRefund"" [label=""setRefund""];
""383_withdraw"" -> ""383_onlyOwner"";
""383_withdrawTokens"" -> ""383_onlyOwner"";
""383_cancelRefund"" -> ""383_onlyOwner"";
""383_setRefund"" -> ""383_onlyOwner"";
}
"
0x0033fb5561719b8b697b604466d6d39308c58191.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 500000000; uint256 public buyPrice = 2000; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public { }",1,"subgraph cluster_627_EncryptedToken {
label=""EncryptedToken"";
""627_fallback"" [label=""fallback""];
""627_balanceOfa"" [label=""balanceOfa""];
""627_mintToken"" [label=""mintToken""];
""627_freezeAccount"" [label=""freezeAccount""];
""627_setPrices"" [label=""setPrices""];
""627_selfdestructs"" [label=""selfdestructs""];
""627_getEth"" [label=""getEth""];
""627__transfer"" [label=""_transfer""];
""627_buy"" [label=""buy""];
""627_EncryptedToken"" [label=""EncryptedToken""];
""627_setPrices"" -> ""627_onlyOwner"";
""627_buy"" -> ""627__transfer"";
""627_fallback"" -> ""627__transfer"";
""627_EncryptedToken"" -> ""627_TokenERC20"";
""627_mintToken"" -> ""627_onlyOwner"";
""627_freezeAccount"" -> ""627_onlyOwner"";
}
"
0xdc99adde3a358e5ff62fff3f26b2296f8cca2306.sol,TokenFactoryCN,"contract TokenFactoryCN is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 900000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function TokenFactoryCN() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_TokenFactoryCN {
label=""TokenFactoryCN"";
""706_TokenFactoryCN"" [label=""TokenFactoryCN""];
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x36995d4e1ab6ee76aa55f16736fc85ec6e7b6c1d.sol,HardcodedCrowdsale,"contract HardcodedCrowdsale { using SafeMath for uint256; enum ICOStateEnum {NotStarted, Started, Refunded, Successful}",1,"subgraph cluster_1142_HardcodedCrowdsale {
label=""HardcodedCrowdsale"";
""1142_refundICO"" [label=""refundICO""];
""1142_HardcodedCrowdsale"" [label=""HardcodedCrowdsale""];
""1142_cleanup"" [label=""cleanup""];
""1142_fallback"" [label=""fallback""];
""1142_transitionState"" [label=""transitionState""];
""1142_finalize"" [label=""finalize""];
""1142_withdrawFunds"" [label=""withdrawFunds""];
""1142_getBonusMultipierInPercents"" [label=""getBonusMultipierInPercents""];
""1142_ICOBuy"" [label=""ICOBuy""];
""1142_totalSupply"" [label=""totalSupply""];
""1142_balanceOf"" [label=""balanceOf""];
""1142_setNameAndTicker"" [label=""setNameAndTicker""];
""1142_recoverLeftoversICO"" [label=""recoverLeftoversICO""];
""1142_advanceState"" [label=""advanceState""];
""1142_calculateAmountBoughtICO"" [label=""calculateAmountBoughtICO""];
""1142_getWeekBonus"" [label=""getWeekBonus""];
""1142_transferOwnership"" [label=""transferOwnership""];
""1142_setHalt"" [label=""setHalt""];
""1142_setLedger"" [label=""setLedger""];
""1142_manualSendTokens"" [label=""manualSendTokens""];
""1142_calculateAmountBoughtICO"" -> ""1142_getWeekBonus"";
""1142_fallback"" -> ""1142_stateTransition"";
""1142_setHalt"" -> ""1142_onlyOwner"";
""1142_setLedger"" -> ""1142_onlyOwner"";
""1142_withdrawFunds"" -> ""1142_onlyOwner"";
""1142_recoverLeftoversICO"" -> ""1142_notHalted"";
""1142_ICOBuy"" -> ""1142_getBonusMultipierInPercents"";
""1142_ICOBuy"" -> ""1142_balanceOf"";
""1142_ICOBuy"" -> ""1142_notHalted"";
""1142_advanceState"" -> ""1142_transitionState"";
""1142_fallback"" -> ""1142_notHalted"";
""1142_cleanup"" -> ""1142_onlyOwner"";
""1142_refundICO"" -> ""1142_notHalted"";
""1142_ICOBuy"" -> ""1142_calculateAmountBoughtICO"";
""1142_transferOwnership"" -> ""1142_onlyOwner"";
""1142_refundICO"" -> ""1142_stateTransition"";
""1142_manualSendTokens"" -> ""1142_onlyOwner"";
""1142_finalize"" -> ""1142_stateTransition"";
""1142_recoverLeftoversICO"" -> ""1142_stateTransition"";
""1142_fallback"" -> ""1142_ICOBuy"";
""1142_setNameAndTicker"" -> ""1142_onlyOwner"";
}
"
0xd54920cedf704b87342fa26d5773efabf9037a77.sol,CryptoStars,contract CryptoStars { address owner; string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public initialPrice; uint256 public transferPrice; uint256 public MaxStarIndexAvailable; uint256 public MinStarIndexAvailable; uint public nextStarIndexToAssign = 0; uint public starsRemainingToAssign = 0; uint public numberOfStarsToReserve; uint public numberOfStarsReserved = 0; mapping (uint => address) public starIndexToAddress; mapping (uint => string) public starIndexToSTRZName; mapping (uint => string) public starIndexToSTRZMasterName; mapping (address => uint256) public balanceOf; struct Offer { bool isForSale; uint starIndex; address seller; uint minValue; address onlySellTo; },1,"subgraph cluster_1592_CryptoStars {
label=""CryptoStars"";
""1592_setGivenName"" [label=""setGivenName""];
""1592_offerStarForSale"" [label=""offerStarForSale""];
""1592_buyStar"" [label=""buyStar""];
""1592_setStarInitialPrice"" [label=""setStarInitialPrice""];
""1592_reserveStarsForOwner"" [label=""reserveStarsForOwner""];
""1592_offerStarForSaleToAddress"" [label=""offerStarForSaleToAddress""];
""1592_CryptoStars"" [label=""CryptoStars""];
""1592_setTransferPrice"" [label=""setTransferPrice""];
""1592_acceptBidForStar"" [label=""acceptBidForStar""];
""1592_getStar"" [label=""getStar""];
""1592_getMinMax"" [label=""getMinMax""];
""1592_buyStarInitial"" [label=""buyStarInitial""];
""1592_withdraw"" [label=""withdraw""];
""1592_setMinMax"" [label=""setMinMax""];
""1592_setMasterName"" [label=""setMasterName""];
""1592_starNoLongerForSale"" [label=""starNoLongerForSale""];
""1592_transferStar"" [label=""transferStar""];
""1592_withdrawBidForStar"" [label=""withdrawBidForStar""];
""1592_withdrawPartial"" [label=""withdrawPartial""];
""1592_enterBidForStar"" [label=""enterBidForStar""];
""1592_buyStar"" -> ""1592_starNoLongerForSale"";
}
"
0x1ed81e904acfa95ca1ffe224ee7aa89f2bf5ef9c.sol,En_GAME,contract En_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_En_GAME {
label=""En_GAME"";
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Try"" [label=""Try""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x1f0d1de1558582ad6f13763f477119a1455502af.sol,Exchange,contract Exchange is ContractReceiver { using SafeMath for uint256; using BytesLib for bytes; struct Order { address owner; bool active; address sellToken; address buyToken; address ring; uint256 amount; uint256 priceMul; uint256 priceDiv; },1,"subgraph cluster_1781_Exchange {
label=""Exchange"";
""1781_pullTokens"" [label=""pullTokens""];
""1781__topUpTradeMining"" [label=""_topUpTradeMining""];
""1781_fallback"" [label=""fallback""];
""1781_getBuyTokenAmount"" [label=""getBuyTokenAmount""];
""1781_sellEtherWithRing"" [label=""sellEtherWithRing""];
""1781_getBalance"" [label=""getBalance""];
""1781__executeTokenSwap"" [label=""_executeTokenSwap""];
""1781_buyOrderWithEth"" [label=""buyOrderWithEth""];
""1781__executeSellOrder"" [label=""_executeSellOrder""];
""1781_tokenFallback"" [label=""tokenFallback""];
""1781__executeOrder"" [label=""_executeOrder""];
""1781_sellERC20Token"" [label=""sellERC20Token""];
""1781_changeTradeMiningPrice"" [label=""changeTradeMiningPrice""];
""1781_sendTokensTo"" [label=""sendTokensTo""];
""1781_sellEther"" [label=""sellEther""];
""1781_Exchange"" [label=""Exchange""];
""1781_withdrawTradeMining"" [label=""withdrawTradeMining""];
""1781_buyOrderWithERC20Token"" [label=""buyOrderWithERC20Token""];
""1781_remainingAmount"" [label=""remainingAmount""];
""1781_calcFees"" [label=""calcFees""];
""1781_isOrderActive"" [label=""isOrderActive""];
""1781__tradeMiningAndFees"" [label=""_tradeMiningAndFees""];
""1781_tradeMiningAmount"" [label=""tradeMiningAmount""];
""1781_sellERC20TokenWithRing"" [label=""sellERC20TokenWithRing""];
""1781__executeBuyOrder"" [label=""_executeBuyOrder""];
""1781_cancelOrder"" [label=""cancelOrder""];
""1781__newOrder"" [label=""_newOrder""];
""1781__executeTokenSwap"" -> ""1781_sendTokensTo"";
""1781__tradeMiningAndFees"" -> ""1781_sendTokensTo"";
""1781_sellERC20Token"" -> ""1781__newOrder"";
""1781__executeBuyOrder"" -> ""1781_sendTokensTo"";
""1781_tokenFallback"" -> ""1781__newOrder"";
""1781_withdrawTradeMining"" -> ""1781_sendTokensTo"";
""1781__executeSellOrder"" -> ""1781_sendTokensTo"";
""1781_sellERC20TokenWithRing"" -> ""1781__newOrder"";
""1781_cancelOrder"" -> ""1781_sendTokensTo"";
""1781_sellERC20TokenWithRing"" -> ""1781_pullTokens"";
""1781_sellEther"" -> ""1781__newOrder"";
""1781_buyOrderWithEth"" -> ""1781__executeOrder"";
""1781_sellEtherWithRing"" -> ""1781__newOrder"";
""1781_buyOrderWithERC20Token"" -> ""1781__executeOrder"";
""1781__executeOrder"" -> ""1781__tradeMiningAndFees"";
""1781_sellERC20Token"" -> ""1781_pullTokens"";
""1781__executeOrder"" -> ""1781__executeBuyOrder"";
""1781_tokenFallback"" -> ""1781__topUpTradeMining"";
""1781__executeOrder"" -> ""1781__executeTokenSwap"";
""1781_buyOrderWithERC20Token"" -> ""1781_pullTokens"";
""1781__executeOrder"" -> ""1781__executeSellOrder"";
""1781_tokenFallback"" -> ""1781__executeOrder"";
}
"
0x945f171de4ea81a213dcc7a1e8c4f6feb3b4b806.sol,ECP_Token,"contract ECP_Token { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public remaining; address public owner; uint public icoStatus; address public benAddress; address public bkaddress; uint public allowTransferToken; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event TokenTransferEvent(address indexed from, address indexed to, uint256 value, string typex); function ECP_Token() public { totalSupply = 15000000000000000000000000000; owner = msg.sender; balanceOf[owner] = totalSupply; name = ; symbol = ; decimals = 18; remaining = totalSupply; icoStatus = 1; benAddress = 0xe4a7a715bE044186a3ac5C60c7Df7dD1215f7419; bkaddress = 0x44e00602e4B8F546f76983de2489d636CB443722; allowTransferToken = 1; }",1,"subgraph cluster_745_ECP_Token {
label=""ECP_Token"";
""745_withdraw_all"" [label=""withdraw_all""];
""745_freezeAccount"" [label=""freezeAccount""];
""745_withdraw"" [label=""withdraw""];
""745_transferOwnership"" [label=""transferOwnership""];
""745_sendTokenToSingleAccount"" [label=""sendTokenToSingleAccount""];
""745__transfer"" [label=""_transfer""];
""745_burn"" [label=""burn""];
""745_sendToMultipleAccount"" [label=""sendToMultipleAccount""];
""745_approveAndCall"" [label=""approveAndCall""];
""745_approve"" [label=""approve""];
""745_adm_trasfer"" [label=""adm_trasfer""];
""745_changeIcoStatus"" [label=""changeIcoStatus""];
""745_fallback"" [label=""fallback""];
""745_setTransferStatus"" [label=""setTransferStatus""];
""745_totalSupply"" [label=""totalSupply""];
""745_transferFrom"" [label=""transferFrom""];
""745_balanceOf"" [label=""balanceOf""];
""745_burnFrom"" [label=""burnFrom""];
""745_transfer"" [label=""transfer""];
""745_mintToken"" [label=""mintToken""];
""745_ECP_Token"" [label=""ECP_Token""];
""745_transfer"" -> ""745__transfer"";
""745_adm_trasfer"" -> ""745_onlyOwner"";
""745_transferFrom"" -> ""745__transfer"";
""745_withdraw_all"" -> ""745_onlyOwner"";
""745_setTransferStatus"" -> ""745_onlyOwner"";
""745_freezeAccount"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745__transfer"";
""745_sendToMultipleAccount"" -> ""745_onlyOwner"";
""745_mintToken"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745_onlyOwner"";
""745_transferOwnership"" -> ""745_onlyOwner"";
""745_sendToMultipleAccount"" -> ""745__transfer"";
""745_approveAndCall"" -> ""745_approve"";
""745_adm_trasfer"" -> ""745__transfer"";
""745_withdraw"" -> ""745_onlyOwner"";
""745_changeIcoStatus"" -> ""745_onlyOwner"";
}
"
0xead7adf1bf0df9f03b15429d82ea1f70ebd619f1.sol,Crowdsale,"contract Crowdsale is owned { address public beneficiary; uint256 public preICOLimit; uint256 public totalLimit; uint256 public pricePreICO; uint256 public priceICO; bool preICOClosed = false; bool ICOClosed = false; bool preICOWithdrawn = false; bool ICOWithdrawn = false; bool public preICOActive = false; bool public ICOActive = false; uint256 public preICORaised; uint256 public ICORaised; uint256 public totalRaised; token public tokenReward; event FundTransfer(address backer, uint256 amount, bool isContribution); mapping(address => uint256) public balanceOf; function Crowdsale() { preICOLimit = 5000000 * 1 ether; totalLimit = 45000000 * 1 ether; pricePreICO = 375; priceICO = 250; }",1,"subgraph cluster_402_Crowdsale {
label=""Crowdsale"";
""402_startICO"" [label=""startICO""];
""402_fallback"" [label=""fallback""];
""402_startPreICO"" [label=""startPreICO""];
""402_init"" [label=""init""];
""402_withdrawFunds"" [label=""withdrawFunds""];
""402_Crowdsale"" [label=""Crowdsale""];
""402_stopPreICO"" [label=""stopPreICO""];
""402_stopICO"" [label=""stopICO""];
""402_startICO"" -> ""402_onlyOwner"";
""402_init"" -> ""402_onlyOwner"";
""402_stopPreICO"" -> ""402_onlyOwner"";
""402_withdrawFunds"" -> ""402_onlyOwner"";
""402_stopICO"" -> ""402_onlyOwner"";
""402_startPreICO"" -> ""402_onlyOwner"";
}
"
0x3686986e559f257cfaccb44f17af5b245e45814f.sol,ZEROtoken,contract ZEROtoken { address owner = msg.sender; bool public purchasingAllowed = false; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalContribution = 0; uint256 public totalSupply = 0; function name() constant returns (string) { return ; },1,"subgraph cluster_524_ZEROtoken {
label=""ZEROtoken"";
""524_balanceOf"" [label=""balanceOf""];
""524_transferFrom"" [label=""transferFrom""];
""524_fallback"" [label=""fallback""];
""524_transfer"" [label=""transfer""];
""524_getStats"" [label=""getStats""];
""524_approve"" [label=""approve""];
""524_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""524_decimals"" [label=""decimals""];
""524_disablePurchasing"" [label=""disablePurchasing""];
""524_enablePurchasing"" [label=""enablePurchasing""];
""524_allowance"" [label=""allowance""];
""524_kill"" [label=""kill""];
""524_name"" [label=""name""];
""524_symbol"" [label=""symbol""];
}
"
0xec987914ade432ce9806f418787a4ed0b0e77000.sol,LuckyDice,"contract LuckyDice is DSSafeAddSub { modifier betIsValid(uint _betSize, uint minRollLimit, uint maxRollLimit) { if (_betSize < minBet || maxRollLimit < minNumber || minRollLimit > maxNumber || maxRollLimit - 1 <= minRollLimit) throw; _; }",1,"subgraph cluster_1265_LuckyDice {
label=""LuckyDice"";
""1265_ownerSetMaxProfit"" [label=""ownerSetMaxProfit""];
""1265_ownerTransferEther"" [label=""ownerTransferEther""];
""1265_ownerRefundPlayer"" [label=""ownerRefundPlayer""];
""1265_ownerSetCasino"" [label=""ownerSetCasino""];
""1265_playerMakeBet"" [label=""playerMakeBet""];
""1265_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""1265_getToJackpot"" [label=""getToJackpot""];
""1265_playerWithdrawPendingTransactions"" [label=""playerWithdrawPendingTransactions""];
""1265_withdraw"" [label=""withdraw""];
""1265_ownerSetJpMinBet"" [label=""ownerSetJpMinBet""];
""1265_playerGetPendingTxByAddress"" [label=""playerGetPendingTxByAddress""];
""1265_getFullProfit"" [label=""getFullProfit""];
""1265_LuckyDice"" [label=""LuckyDice""];
""1265_ownerChangeOwner"" [label=""ownerChangeOwner""];
""1265_ownerSetHouseEdge"" [label=""ownerSetHouseEdge""];
""1265_ownerkill"" [label=""ownerkill""];
""1265_ownerSetMinBet"" [label=""ownerSetMinBet""];
""1265_ownerPausePayouts"" [label=""ownerPausePayouts""];
""1265_ownerPauseGame"" [label=""ownerPauseGame""];
""1265_getProfit"" [label=""getProfit""];
""1265_fallback"" [label=""fallback""];
""1265_ownerTransferEther"" -> ""1265_safeSub"";
""1265_playerMakeBet"" -> ""1265_getProfit"";
""1265_playerMakeBet"" -> ""1265_gameIsActive"";
""1265_playerMakeBet"" -> ""1265_getFullProfit"";
""1265_fallback"" -> ""1265_safeAdd"";
""1265_playerMakeBet"" -> ""1265_getToJackpot"";
""1265_ownerSetMinBet"" -> ""1265_onlyOwner"";
""1265_playerMakeBet"" -> ""1265_safeSub"";
""1265_withdraw"" -> ""1265_payoutsAreActive"";
""1265_ownerRefundPlayer"" -> ""1265_safeSub"";
""1265_getFullProfit"" -> ""1265_safeSub"";
""1265_ownerSetMaxProfit"" -> ""1265_onlyOwner"";
""1265_ownerPausePayouts"" -> ""1265_onlyOwner"";
""1265_ownerSetJpMinBet"" -> ""1265_onlyOwner"";
""1265_withdraw"" -> ""1265_safeSub"";
""1265_ownerUpdateContractBalance"" -> ""1265_onlyOwner"";
""1265_LuckyDice"" -> ""1265_ownerSetHouseEdge"";
""1265_withdraw"" -> ""1265_safeAdd"";
""1265_playerMakeBet"" -> ""1265_safeAdd"";
""1265_fallback"" -> ""1265_onlyOwner"";
""1265_ownerSetCasino"" -> ""1265_onlyOwner"";
""1265_ownerkill"" -> ""1265_onlyOwner"";
""1265_LuckyDice"" -> ""1265_ownerSetMinBet"";
""1265_ownerRefundPlayer"" -> ""1265_onlyOwner"";
""1265_playerWithdrawPendingTransactions"" -> ""1265_payoutsAreActive"";
""1265_ownerTransferEther"" -> ""1265_onlyOwner"";
""1265_ownerPauseGame"" -> ""1265_onlyOwner"";
""1265_ownerSetHouseEdge"" -> ""1265_onlyOwner"";
""1265_playerMakeBet"" -> ""1265_betIsValid"";
""1265_ownerChangeOwner"" -> ""1265_onlyOwner"";
""1265_LuckyDice"" -> ""1265_ownerSetMaxProfit"";
}
"
0x4b5da69c6289bd71d643710d0a63bd4867808451.sol,CoolPandaToken,"contract CoolPandaToken is ERC20, Lockable { using SafeMath for uint256; uint256 public decimals = 18; address public fundWallet = 0x071961b88F848D09C3d988E8814F38cbAE755C44; uint256 public tokenPrice; function balanceOf(address _addr) external view returns (uint256) { return balances[_addr]; }",1,"subgraph cluster_642_CoolPandaToken {
label=""CoolPandaToken"";
""642_allowance"" [label=""allowance""];
""642_transferEth"" [label=""transferEth""];
""642_approveAndCall"" [label=""approveAndCall""];
""642_setTokenPrice"" [label=""setTokenPrice""];
""642_transfer"" [label=""transfer""];
""642_approve"" [label=""approve""];
""642_balanceOf"" [label=""balanceOf""];
""642_transferFrom"" [label=""transferFrom""];
""642_setFundWallet"" [label=""setFundWallet""];
""642_transfer"" -> ""642_isTokenTransfer"";
""642_transferEth"" -> ""642_onlyOwner"";
""642_approveAndCall"" -> ""642_approve"";
""642_setTokenPrice"" -> ""642_onlyOwner"";
""642_setFundWallet"" -> ""642_onlyOwner"";
""642_approveAndCall"" -> ""642_isTokenTransfer"";
""642_transferFrom"" -> ""642_isTokenTransfer"";
""642_approve"" -> ""642_isTokenTransfer"";
}
"
0xeece3bfd3c83715f1f801dfa6b735ac9093c5bc3.sol,SecuritySale,"contract SecuritySale is Ownable { bool public live; IInvestorList public investorList; event SaleLive(bool liveness); event EtherIn(address from, uint amount); event StartSale(); event EndSale(); constructor() public { live = false; }",1,"subgraph cluster_406_ISecuritySale {
label=""ISecuritySale"";
""406_setLive"" [label=""setLive""];
""406_setInvestorList"" [label=""setInvestorList""];
}
"
0xf331f7887d31714dce936d9a9846e6afbe82e0a0.sol,Ico,"contract Ico is Owned { enum State { Runned, Paused, Finished, Expired, Failed }",1,"subgraph cluster_1825_Ico {
label=""Ico"";
""1825_isRunningIco"" [label=""isRunningIco""];
""1825_isRunningPreIco"" [label=""isRunningPreIco""];
""1825_continueIco"" [label=""continueIco""];
""1825_isActive"" [label=""isActive""];
""1825_endIco"" [label=""endIco""];
""1825_getEthereum"" [label=""getEthereum""];
""1825_getEthereumFromPreIco"" [label=""getEthereumFromPreIco""];
""1825_pauseIco"" [label=""pauseIco""];
""1825_Ico"" [label=""Ico""];
""1825_fallback"" [label=""fallback""];
""1825_endIco"" -> ""1825_onlyOwner"";
""1825_getEthereum"" -> ""1825_onlyOwner"";
""1825_fallback"" -> ""1825_isRunningPreIco"";
""1825_continueIco"" -> ""1825_onlyOwner"";
""1825_pauseIco"" -> ""1825_onlyOwner"";
""1825_fallback"" -> ""1825_isRunningIco"";
""1825_getEthereumFromPreIco"" -> ""1825_onlyOwner"";
}
"
0x6f59c5e4a98bbeca595cd8f44d4ae6c1f055edbc.sol,PiperToken,"contract PiperToken is ERC223, SafeMath { mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 0; uint256 exchange = 1000000; uint256 endICO = 0; address admin; constructor() public { balances[msg.sender]=1000000000000000000000000; admin = msg.sender; endICO=block.timestamp+(60*60*24*31); }",1,"subgraph cluster_698_PiperToken {
label=""PiperToken"";
""698_symbol"" [label=""symbol""];
""698_name"" [label=""name""];
""698_transfer"" [label=""transfer""];
""698_getCurrentTime"" [label=""getCurrentTime""];
""698_transferToAddress"" [label=""transferToAddress""];
""698_balanceOf"" [label=""balanceOf""];
""698_fallback"" [label=""fallback""];
""698_isContract"" [label=""isContract""];
""698_getEndICO"" [label=""getEndICO""];
""698_totalSupply"" [label=""totalSupply""];
""698_decimals"" [label=""decimals""];
""698_constructor"" [label=""constructor""];
""698_transferToContract"" [label=""transferToContract""];
""698_transfer"" -> ""698_transferToContract"";
""698_transferToAddress"" -> ""698_safeSub"";
""698_transferToContract"" -> ""698_balanceOf"";
""698_transfer"" -> ""698_safeAdd"";
""698_transferToAddress"" -> ""698_safeAdd"";
""698_transferToAddress"" -> ""698_balanceOf"";
""698_transfer"" -> ""698_isContract"";
""698_fallback"" -> ""698_safeAdd"";
""698_transfer"" -> ""698_balanceOf"";
""698_transferToContract"" -> ""698_safeAdd"";
""698_transfer"" -> ""698_transferToAddress"";
""698_transferToContract"" -> ""698_safeSub"";
""698_fallback"" -> ""698_safeMul"";
""698_transfer"" -> ""698_safeSub"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllRefundEscrow,contract ClinicAllRefundEscrow is RefundEscrow { using Math for uint256; struct RefundeeRecord { bool isRefunded; uint256 index; },1,"subgraph cluster_2170_ClinicAllRefundEscrow {
label=""ClinicAllRefundEscrow"";
""2170_deposit"" [label=""deposit""];
""2170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""2170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""2170_withdrawChunk"" [label=""withdrawChunk""];
""2170_withdraw"" [label=""withdraw""];
""2170_close"" [label=""close""];
""2170_removeRefundeeByIndex"" [label=""removeRefundeeByIndex""];
""2170_refundeesListLength"" [label=""refundeesListLength""];
""2170_withdrawEverything"" [label=""withdrawEverything""];
""2170_depositsOf"" [label=""depositsOf""];
""2170_beneficiaryDepositsOf"" [label=""beneficiaryDepositsOf""];
""2170_constructor"" [label=""constructor""];
""2170_depositFunds"" [label=""depositFunds""];
""2170_manualRefund"" [label=""manualRefund""];
""2170_withdrawChunk"" -> ""2170_removeRefundeeByIndex"";
""2170_manualRefund"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_onlyOwner"";
""2170_close"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawChunk"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawAll"" -> ""2170_onlyOwner"";
""2170_constructor"" -> ""2170_constructor"";
""2170_close"" -> ""2170_close"";
""2170_manualRefund"" -> ""2170_depositsOf"";
""2170_manualRefund"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_withdrawChunk"";
""2170_depositFunds"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_depositsOf"";
""2170_refundeesListLength"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_depositsOf"";
}
"
0x1807cf924199c0f8a85b73c15b5c0349aa3844e5.sol,PublickOffering,contract PublickOffering is Authority { struct investorInfo{ address investor; uint256 amount; uint utime; bool hadback; },1,"subgraph cluster_296_PublickOffering {
label=""PublickOffering"";
""296_PublickOffering"" [label=""PublickOffering""];
""296_fallback"" [label=""fallback""];
""296_drawETH"" [label=""drawETH""];
""296_backETH"" [label=""backETH""];
""296_drawETH"" -> ""296_alloweDrawEth"";
""296_drawETH"" -> ""296_onlyBeneficiary"";
""296_backETH"" -> ""296_onlyBeneficiary"";
}
"
0x375fe03d186747e455e4ebbc235e9df083c7fe92.sol,QUEST_X,contract QUEST_X { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_QUEST_X {
label=""QUEST_X"";
""148_Try"" [label=""Try""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x00f90986cdd79744409f8a3c7747064afa4473b5.sol,SmartBillions,contract SmartBillions is StandardToken { string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; struct Wallet { uint208 balance; uint16 lastDividendPeriod; uint32 nextWithdrawBlock; },1,"subgraph cluster_2699_SmartBillions {
label=""SmartBillions"";
""2699_invest"" [label=""invest""];
""2699_setInvestStart"" [label=""setInvestStart""];
""2699_setBetMax"" [label=""setBetMax""];
""2699_calcHashes"" [label=""calcHashes""];
""2699_SmartBillions"" [label=""SmartBillions""];
""2699_getHash"" [label=""getHash""];
""2699_putHash"" [label=""putHash""];
""2699_fallback"" [label=""fallback""];
""2699_dividendsBlocks"" [label=""dividendsBlocks""];
""2699_betBlockNumberOf"" [label=""betBlockNumberOf""];
""2699_betHashOf"" [label=""betHashOf""];
""2699_addHashes128"" [label=""addHashes128""];
""2699_playRandom"" [label=""playRandom""];
""2699_disinvest"" [label=""disinvest""];
""2699_play"" [label=""play""];
""2699_walletPeriodOf"" [label=""walletPeriodOf""];
""2699_walletBlockOf"" [label=""walletBlockOf""];
""2699_changeOwner"" [label=""changeOwner""];
""2699_changeAnimator"" [label=""changeAnimator""];
""2699_betPrize"" [label=""betPrize""];
""2699_betValueOf"" [label=""betValueOf""];
""2699_coldStore"" [label=""coldStore""];
""2699_putHashes"" [label=""putHashes""];
""2699_playSystem"" [label=""playSystem""];
""2699_commitDividend"" [label=""commitDividend""];
""2699_betOf"" [label=""betOf""];
""2699_hotStore"" [label=""hotStore""];
""2699_hashesLength"" [label=""hashesLength""];
""2699_houseKeeping"" [label=""houseKeeping""];
""2699_pay"" [label=""pay""];
""2699_payDividends"" [label=""payDividends""];
""2699_won"" [label=""won""];
""2699_resetBet"" [label=""resetBet""];
""2699_payWallet"" [label=""payWallet""];
""2699_addHashes"" [label=""addHashes""];
""2699_walletBalanceOf"" [label=""walletBalanceOf""];
""2699_investDirect"" [label=""investDirect""];
""2699_resetBet"" -> ""2699_onlyOwner"";
""2699_putHash"" -> ""2699_calcHashes"";
""2699_betOf"" -> ""2699_getHash"";
""2699_disinvest"" -> ""2699_commitDividend"";
""2699_fallback"" -> ""2699_commitDividend"";
""2699_playSystem"" -> ""2699_won"";
""2699_payDividends"" -> ""2699_commitDividend"";
""2699_payDividends"" -> ""2699_payWallet"";
""2699_won"" -> ""2699_pay"";
""2699_changeAnimator"" -> ""2699_commitDividend"";
""2699_changeAnimator"" -> ""2699_onlyAnimator"";
""2699_disinvest"" -> ""2699_payWallet"";
""2699_won"" -> ""2699_betPrize"";
""2699_fallback"" -> ""2699_play"";
""2699_investDirect"" -> ""2699_invest"";
""2699_addHashes128"" -> ""2699_addHashes"";
""2699_coldStore"" -> ""2699_onlyOwner"";
""2699_won"" -> ""2699_getHash"";
""2699_hotStore"" -> ""2699_houseKeeping"";
""2699_pay"" -> ""2699_houseKeeping"";
""2699_changeOwner"" -> ""2699_onlyOwner"";
""2699_won"" -> ""2699_payWallet"";
""2699_setBetMax"" -> ""2699_onlyOwner"";
""2699_putHashes"" -> ""2699_putHash"";
""2699_setInvestStart"" -> ""2699_onlyOwner"";
""2699_coldStore"" -> ""2699_houseKeeping"";
""2699_playSystem"" -> ""2699_putHash"";
""2699_play"" -> ""2699_playSystem"";
""2699_fallback"" -> ""2699_won"";
""2699_payWallet"" -> ""2699_pay"";
""2699_playRandom"" -> ""2699_playSystem"";
""2699_betOf"" -> ""2699_betPrize"";
""2699_changeOwner"" -> ""2699_commitDividend"";
}
"
0x3a966ffa8451cbf3769b7d1f94d5b47da254edb0.sol,Play0x_LottoBall,contract Play0x_LottoBall { using SafeMath for uint256; using SafeMath for uint128; using SafeMath for uint40; using SafeMath for uint8; uint public jackpotSize; uint public tokenJackpotSize; uint public MIN_BET; uint public MAX_BET; uint public MAX_AMOUNT; uint public maxProfit; uint public maxTokenProfit; uint8 public platformFeePercentage = 15; uint8 public jackpotFeePercentage = 5; uint8 public ERC20rewardMultiple = 5; uint constant BetExpirationBlocks = 250; uint public lockedInBets; uint public lockedTokenInBets; bytes32 bitComparisonMask = 0xF; address public owner; address private nextOwner; address public manager; address private nextManager; address[] public secretSignerList; address public ERC20ContractAddres; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Bet { uint amount; uint40 placeBlockNumber; address gambler; },1,"subgraph cluster_3084_Play0x_LottoBall {
label=""Play0x_LottoBall"";
""3084_setMaxProfit"" [label=""setMaxProfit""];
""3084_getJackpotWinBonus"" [label=""getJackpotWinBonus""];
""3084_sendFunds"" [label=""sendFunds""];
""3084_sendTokenFundsToManager"" [label=""sendTokenFundsToManager""];
""3084_updateMAX_AMOUNT"" [label=""updateMAX_AMOUNT""];
""3084_approveNextOwner"" [label=""approveNextOwner""];
""3084_getBonusPercentageByMachineMode"" [label=""getBonusPercentageByMachineMode""];
""3084_withdrawAlltokenFunds"" [label=""withdrawAlltokenFunds""];
""3084_updateBitComparisonMask"" [label=""updateBitComparisonMask""];
""3084_settleBetVerifi"" [label=""settleBetVerifi""];
""3084_withdrawToken"" [label=""withdrawToken""];
""3084_getPossibleWinAmount"" [label=""getPossibleWinAmount""];
""3084_setTokenAddress"" [label=""setTokenAddress""];
""3084_withdrawFunds"" [label=""withdrawFunds""];
""3084_updateJackpotFeePercentage"" [label=""updateJackpotFeePercentage""];
""3084_updatePlatformFeePercentage"" [label=""updatePlatformFeePercentage""];
""3084_refundBet"" [label=""refundBet""];
""3084_updateERC20rewardMultiple"" [label=""updateERC20rewardMultiple""];
""3084_updateMIN_BET"" [label=""updateMIN_BET""];
""3084_settleBet"" [label=""settleBet""];
""3084_clearProcessedBet"" [label=""clearProcessedBet""];
""3084_getContractInformation"" [label=""getContractInformation""];
""3084_withdrawAllFunds"" [label=""withdrawAllFunds""];
""3084_refundTokenBet"" [label=""refundTokenBet""];
""3084_updateWithdrawalModeByIndex"" [label=""updateWithdrawalModeByIndex""];
""3084_setSecretSignerByIndex"" [label=""setSecretSignerByIndex""];
""3084_runRotateTime"" [label=""runRotateTime""];
""3084_getContractAddress"" [label=""getContractAddress""];
""3084_initialParameter"" [label=""initialParameter""];
""3084_setSecretSignerList"" [label=""setSecretSignerList""];
""3084_fallback"" [label=""fallback""];
""3084_placeTokenBet"" [label=""placeTokenBet""];
""3084_sendFundsToOwner"" [label=""sendFundsToOwner""];
""3084_constructor"" [label=""constructor""];
""3084_acceptNextOwner"" [label=""acceptNextOwner""];
""3084_updateWithdrawalMode"" [label=""updateWithdrawalMode""];
""3084_sendFundsToManager"" [label=""sendFundsToManager""];
""3084_kill"" [label=""kill""];
""3084_acceptNextManager"" [label=""acceptNextManager""];
""3084_clearStorage"" [label=""clearStorage""];
""3084_updateMAX_BET"" [label=""updateMAX_BET""];
""3084_placeBet"" [label=""placeBet""];
""3084_approveNextManager"" [label=""approveNextManager""];
""3084_withdrawToken"" -> ""3084_onlyOwner"";
""3084_updateBitComparisonMask"" -> ""3084_onlyOwner"";
""3084_clearStorage"" -> ""3084_clearProcessedBet"";
""3084_withdrawAllFunds"" -> ""3084_onlyOwner"";
""3084_sendFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getPossibleWinAmount"";
""3084_updateJackpotFeePercentage"" -> ""3084_onlyOwner"";
""3084_setMaxProfit"" -> ""3084_onlyOwner"";
""3084_withdrawAlltokenFunds"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_sendFunds"";
""3084_setTokenAddress"" -> ""3084_onlyManager"";
""3084_updateWithdrawalModeByIndex"" -> ""3084_onlyManager"";
""3084_updateERC20rewardMultiple"" -> ""3084_onlyManager"";
""3084_updateMIN_BET"" -> ""3084_onlyManager"";
""3084_initialParameter"" -> ""3084_onlyOwner"";
""3084_setSecretSignerByIndex"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_onlyOwner"";
""3084_approveNextManager"" -> ""3084_onlyManager"";
""3084_setSecretSignerList"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_sendFunds"";
""3084_refundBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_sendTokenFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_kill"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_runRotateTime"";
""3084_sendFundsToOwner"" -> ""3084_onlyOwner"";
""3084_approveNextOwner"" -> ""3084_onlyOwner"";
""3084_updateMAX_AMOUNT"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_getPossibleWinAmount"";
""3084_updatePlatformFeePercentage"" -> ""3084_onlyOwner"";
""3084_settleBetVerifi"" -> ""3084_runRotateTime"";
""3084_updateWithdrawalMode"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_sendFunds"";
""3084_runRotateTime"" -> ""3084_getJackpotWinBonus"";
""3084_updateMAX_BET"" -> ""3084_onlyManager"";
}
"
0x548d32216d01617452892ea360bfce9ce8dc9729.sol,ChemistryCore,"contract ChemistryCore is ContractOfSale { function ChemistryCore() public { owner = msg.sender; authorized[msg.sender] = true; _createElement(, 2 ** 255); }",1,"subgraph cluster_1804_ChemistryCore {
label=""ChemistryCore"";
""1804_getElementView"" [label=""getElementView""];
""1804_getElementsFromIndex"" [label=""getElementsFromIndex""];
""1804_getElements"" [label=""getElements""];
""1804_fallback"" [label=""fallback""];
""1804_withdrawAmount"" [label=""withdrawAmount""];
""1804_withdrawAll"" [label=""withdrawAll""];
""1804_getElement"" [label=""getElement""];
""1804_ChemistryCore"" [label=""ChemistryCore""];
""1804_getElementOwners"" [label=""getElementOwners""];
""1804_getElementInfoView"" [label=""getElementInfoView""];
""1804_addElement"" [label=""addElement""];
""1804_getElementInfo"" [label=""getElementInfo""];
""1804__bytes32ToString"" [label=""_bytes32ToString""];
""1804_addElements"" [label=""addElements""];
""1804_getElementInfo"" -> ""1804_calculateNextPrice"";
""1804_withdrawAmount"" -> ""1804_onlyOwner"";
""1804_addElements"" -> ""1804_onlyAuthorized"";
""1804_addElement"" -> ""1804__createElement"";
""1804_getElementInfoView"" -> ""1804__bytes32ToString"";
""1804_getElementView"" -> ""1804__bytes32ToString"";
""1804_addElement"" -> ""1804_onlyAuthorized"";
""1804_addElements"" -> ""1804__createElement"";
""1804_getElementInfoView"" -> ""1804_calculateNextPrice"";
""1804_ChemistryCore"" -> ""1804__createElement"";
""1804_withdrawAll"" -> ""1804_onlyOwner"";
}
"
0xedde8f9b753ae899794f09756e11999cf54c82c5.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 1000000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_setPrices"" [label=""setPrices""];
""612__transfer"" [label=""_transfer""];
""612_selfdestructs"" [label=""selfdestructs""];
""612_mintToken"" [label=""mintToken""];
""612_fallback"" [label=""fallback""];
""612_freezeAccount"" [label=""freezeAccount""];
""612_buy"" [label=""buy""];
""612_selfdestructs"" -> ""612_onlyOwner"";
""612_fallback"" -> ""612__transfer"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_buy"" -> ""612__transfer"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_mintToken"" -> ""612_onlyOwner"";
}
"
0xa44fb3aa5c8465512b806145a8f9b60e74f3f851.sol,PITSTOP,"contract PITSTOP is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 10000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth =10000000e18; uint public target0drop = 500; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_PITSTOP {
label=""PITSTOP"";
""1253_distr"" [label=""distr""];
""1253_getTokens"" [label=""getTokens""];
""1253_constructor"" [label=""constructor""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_approve"" [label=""approve""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_Distribute"" [label=""Distribute""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_transfer"" [label=""transfer""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_add"" [label=""add""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_withdraw"" [label=""withdraw""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_burn"" -> ""1253_onlyOwner"";
}
"
0x361f5a02be315ed1241d8c2997d1fc35aaa27596.sol,DinarETHCrypto,"contract DinarETHCrypto is ERC20Interface, DinarETHInterface { using SafeMath for uint256; string public symbol = ; string public name = ; string public goldCertVerifier = ""https: uint8 public constant decimals = 8; uint256 public constant DNARtoGoldXchgRate = 10000000; uint256 public constant _totalSupply = 9900000000000000; address public owner; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; modifier onlyOwner() { require(msg.sender == owner); _; }",1,"subgraph cluster_699_DinarETHCrypto {
label=""DinarETHCrypto"";
""699_approve"" [label=""approve""];
""699_transferFrom"" [label=""transferFrom""];
""699_setGoldCertVerifier"" [label=""setGoldCertVerifier""];
""699_allowance"" [label=""allowance""];
""699_send"" [label=""send""];
""699_sendFrom"" [label=""sendFrom""];
""699_changeNameSymbol"" [label=""changeNameSymbol""];
""699_increaseApproval"" [label=""increaseApproval""];
""699_transfer"" [label=""transfer""];
""699_DinarETHCrypto"" [label=""DinarETHCrypto""];
""699_decreaseApproval"" [label=""decreaseApproval""];
""699_getGoldXchgRate"" [label=""getGoldXchgRate""];
""699_fallback"" [label=""fallback""];
""699_balanceOf"" [label=""balanceOf""];
""699_transferOwnership"" [label=""transferOwnership""];
""699_totalSupply"" [label=""totalSupply""];
""699_send"" -> ""699_notThisContract"";
""699_send"" -> ""699_transfer"";
""699_transferOwnership"" -> ""699_onlyOwner"";
""699_sendFrom"" -> ""699_transferFrom"";
""699_setGoldCertVerifier"" -> ""699_onlyOwner"";
""699_changeNameSymbol"" -> ""699_onlyOwner"";
""699_sendFrom"" -> ""699_notThisContract"";
""699_transfer"" -> ""699_notThisContract"";
""699_transferFrom"" -> ""699_notThisContract"";
}
"
0x70bf9df6967dc96156e76cc43b928a7ef02e159a.sol,X_GAME,contract X_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_X_GAME {
label=""X_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_StopGame"" [label=""StopGame""];
}
"
0xeca7f8aa63d1d28fafda5fdf021388b5d7166dee.sol,TryToPlay,contract TryToPlay { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_128_TryToPlay {
label=""TryToPlay"";
""128_newQuestioner"" [label=""newQuestioner""];
""128_NewQuestion"" [label=""NewQuestion""];
""128_StartTryToPlay"" [label=""StartTryToPlay""];
""128_fallback"" [label=""fallback""];
""128_StopGame"" [label=""StopGame""];
""128_Try"" [label=""Try""];
}
"
0x29c690419841e126b74981e4709e43916ac80f64.sol,QQ_game,contract QQ_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_QQ_game {
label=""QQ_game"";
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x4cf6e4b46d58d17bc51c6752381ae7d4149b04eb.sol,OXO,contract OXO is Token { string public name; string public symbol; uint32 internal rate; uint32 internal consume; uint256 internal totalConsume; uint256 internal bigJackpot; uint256 internal smallJackpot; uint256 public consumeRule; address internal owner; modifier onlyOwner(){ require (msg.sender==owner); _; },1,"subgraph cluster_964_OXO {
label=""OXO"";
""964_getBalance"" [label=""getBalance""];
""964_sendTransfer"" [label=""sendTransfer""];
""964_balanceOf"" [label=""balanceOf""];
""964_getSmallJackpot"" [label=""getSmallJackpot""];
""964_ticketConsume"" [label=""ticketConsume""];
""964_trashOf"" [label=""trashOf""];
""964_transferFrom"" [label=""transferFrom""];
""964_approve"" [label=""approve""];
""964_smallCheckOut"" [label=""smallCheckOut""];
""964_getBigJackpot"" [label=""getBigJackpot""];
""964_fallback"" [label=""fallback""];
""964_setJackpot"" [label=""setJackpot""];
""964_getEth"" [label=""getEth""];
""964_getRate"" [label=""getRate""];
""964_getConsume"" [label=""getConsume""];
""964_sendAll"" [label=""sendAll""];
""964_inTrash"" [label=""inTrash""];
""964_transfer"" [label=""transfer""];
""964_allowance"" [label=""allowance""];
""964_bigCheckOut"" [label=""bigCheckOut""];
""964_tickets"" [label=""tickets""];
""964_getTotalConsume"" [label=""getTotalConsume""];
""964_OXO"" [label=""OXO""];
""964_sendAll"" -> ""964_onlyOwner"";
""964_smallCheckOut"" -> ""964_onlyOwner"";
""964_bigCheckOut"" -> ""964_onlyOwner"";
""964_ticketConsume"" -> ""964_setJackpot"";
""964_getEth"" -> ""964_onlyOwner"";
""964_sendTransfer"" -> ""964_onlyOwner"";
""964_tickets"" -> ""964_setJackpot"";
}
"
0x479cbe1f6a7fa4d7e304ae983803c46e85ced870.sol,Slaughter3D,contract Slaughter3D { using SafeMath for uint; struct Stage { uint8 numberOfPlayers; uint256 blocknumber; bool finalized; mapping (uint8 => address) slotXplayer; mapping (address => bool) players; mapping (uint8 => address) setMN; },1,"subgraph cluster_1021_Slaughter3D {
label=""Slaughter3D"";
""1021_jackpotinfo"" [label=""jackpotinfo""];
""1021_previousstageloser"" [label=""previousstageloser""];
""1021_tryFinalizeStage"" [label=""tryFinalizeStage""];
""1021_acceptOffer"" [label=""acceptOffer""];
""1021_invalidateStage"" [label=""invalidateStage""];
""1021_fallback"" [label=""fallback""];
""1021_previousstageplayer1"" [label=""previousstageplayer1""];
""1021_currentstageplayer1"" [label=""currentstageplayer1""];
""1021_nextonetogetpaid"" [label=""nextonetogetpaid""];
""1021_playervanity"" [label=""playervanity""];
""1021_currentstageplayer2"" [label=""currentstageplayer2""];
""1021_contractownsthismanyP3D"" [label=""contractownsthismanyP3D""];
""1021_allocateSurvivorWinnings"" [label=""allocateSurvivorWinnings""];
""1021_Payoutnextrefund"" [label=""Payoutnextrefund""];
""1021_withdraw"" [label=""withdraw""];
""1021_offerAsSacrifice"" [label=""offerAsSacrifice""];
""1021_DonateToLosers"" [label=""DonateToLosers""];
""1021_currentPlayers"" [label=""currentPlayers""];
""1021_Expand"" [label=""Expand""];
""1021_constructor"" [label=""constructor""];
""1021_previousstageplayer2"" [label=""previousstageplayer2""];
""1021_offerAsSacrificeFromVault"" [label=""offerAsSacrificeFromVault""];
""1021_myEarnings"" [label=""myEarnings""];
""1021_changevanity"" [label=""changevanity""];
""1021_DivsToRefundpot"" [label=""DivsToRefundpot""];
""1021_checkstatus"" [label=""checkstatus""];
""1021_offerAsSacrificeFromVault"" -> ""1021_canPayFromVault"";
""1021_offerAsSacrifice"" -> ""1021_prepareStage"";
""1021_withdraw"" -> ""1021_tryFinalizeStage"";
""1021_offerAsSacrificeFromVault"" -> ""1021_isNewToStage"";
""1021_offerAsSacrificeFromVault"" -> ""1021_acceptOffer"";
""1021_offerAsSacrificeFromVault"" -> ""1021_prepareStage"";
""1021_tryFinalizeStage"" -> ""1021_invalidateStage"";
""1021_withdraw"" -> ""1021_hasEarnings"";
""1021_offerAsSacrificeFromVault"" -> ""1021_tryFinalizeStage"";
""1021_tryFinalizeStage"" -> ""1021_allocateSurvivorWinnings"";
""1021_offerAsSacrifice"" -> ""1021_isValidOffer"";
""1021_offerAsSacrifice"" -> ""1021_tryFinalizeStage"";
""1021_offerAsSacrifice"" -> ""1021_isNewToStage"";
""1021_offerAsSacrifice"" -> ""1021_acceptOffer"";
""1021_myEarnings"" -> ""1021_hasEarnings"";
}
"
0x5576250692275701efde5eeb51596e2d9460790b.sol,UserDataManager,contract UserDataManager { using NameFilter for string; address private admin = msg.sender; uint256 public registrationFee_ = 0; mapping(uint256 => UserDataManagerReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; struct Player { address addr; bytes32 name; uint256 laff; },1,"subgraph cluster_13_UserDataManagerReceiverInterface {
label=""UserDataManagerReceiverInterface"";
""13_receivePlayerInfo"" [label=""receivePlayerInfo""];
}
"
0x56e0dc284a913f7c1198c83f7c69bfec36d31eed.sol,NKYS,"contract NKYS is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 40 * 1 days; uint public round2 = now + 30 * 1 days; uint public round1 = now + 20 * 1 days; uint256 public totalSupply = 7000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 15000000e8; uint public target0drop = 35000; uint public progress0drop = 0; address multisig = 0xa30526D832d9A07596576c8D9de61BfEcCf08499; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_NKYS {
label=""NKYS"";
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_distr"" [label=""distr""];
""1263_withdraw"" [label=""withdraw""];
""1263_add"" [label=""add""];
""1263_fallback"" [label=""fallback""];
""1263_transfer"" [label=""transfer""];
""1263_getTokens"" [label=""getTokens""];
""1263_approve"" [label=""approve""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_constructor"" [label=""constructor""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_allowance"" [label=""allowance""];
""1263_burn"" [label=""burn""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_Distribute"" [label=""Distribute""];
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_getTokens"" -> ""1263_distr"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_constructor"" -> ""1263_distr"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
}
"
0x0114289efe38186b732d12c07a1ce4341e266513.sol,PreICO,"contract PreICO is ReentrancyGuard, Ownable, Stateful { using SafeMath for uint256; DLH public token; address public wallet; uint256 public startPreICOTime; uint256 public endPreICOTime; uint256 public rate; uint256 public priceUSD; uint256 public centRaised; uint256 public minimumInvest; uint256 public softCapPreSale; uint256 public hardCapPreSale; uint256 public hardCapPrivate; address public oracle; address public manager; mapping(address => uint) public balances; mapping(address => uint) public balancesInCent; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function PreICO( address _wallet, address _token, uint256 _priceUSD, uint256 _minimumInvest) public { require(_priceUSD != 0); require(_wallet != address(0)); require(_token != address(0)); priceUSD = _priceUSD; rate = 250000000000000000; wallet = _wallet; token = DLH(_token); hardCapPrivate = 40000000; minimumInvest = _minimumInvest; }",1,"subgraph cluster_1322_PreICO {
label=""PreICO"";
""1322_finishPreSale"" [label=""finishPreSale""];
""1322_forwardFunds"" [label=""forwardFunds""];
""1322_manualTransfer"" [label=""manualTransfer""];
""1322_hasEnded"" [label=""hasEnded""];
""1322_PreICO"" [label=""PreICO""];
""1322_refund"" [label=""refund""];
""1322_setOracle"" [label=""setOracle""];
""1322_setManager"" [label=""setManager""];
""1322_changePriceUSD"" [label=""changePriceUSD""];
""1322_getTokenAmount"" [label=""getTokenAmount""];
""1322_startPreSale"" [label=""startPreSale""];
""1322_fallback"" [label=""fallback""];
""1322_buyTokens"" [label=""buyTokens""];
""1322_buyTokens"" -> ""1322_forwardFunds"";
""1322_finishPreSale"" -> ""1322_setState"";
""1322_refund"" -> ""1322_refundAllowed"";
""1322_finishPreSale"" -> ""1322_forwardFunds"";
""1322_manualTransfer"" -> ""1322_saleIsOn"";
""1322_manualTransfer"" -> ""1322_getTokenAmount"";
""1322_startPreSale"" -> ""1322_setState"";
""1322_startPreSale"" -> ""1322_onlyOwner"";
""1322_fallback"" -> ""1322_buyTokens"";
""1322_buyTokens"" -> ""1322_isUnderHardCap"";
""1322_changePriceUSD"" -> ""1322_onlyOracle"";
""1322_finishPreSale"" -> ""1322_onlyOwner"";
""1322_manualTransfer"" -> ""1322_isUnderHardCap"";
""1322_manualTransfer"" -> ""1322_onlyOwnerOrManager"";
""1322_buyTokens"" -> ""1322_getTokenAmount"";
""1322_setManager"" -> ""1322_onlyOwner"";
""1322_setOracle"" -> ""1322_onlyOwner"";
""1322_buyTokens"" -> ""1322_nonReentrant"";
""1322_buyTokens"" -> ""1322_saleIsOn"";
""1322_refund"" -> ""1322_nonReentrant"";
}
"
0xb42359b3aee091fd4a2fb798bf6a8839c7902ed3.sol,ButterCoin,"contract ButterCoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 370 * 1 days; uint public round2 = now + 320 * 1 days; uint public round1 = now + 220 * 1 days; uint256 public totalSupply = 5000000000000000000000000000; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 10000000000000; uint public target0drop = 10; uint public progress0drop = 0; address multisig = 0x686E275CE6Fe968d1064C102613E6c23c78DC58a ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_ButterCoin {
label=""ButterCoin"";
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_add"" [label=""add""];
""1261_Distribute"" [label=""Distribute""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_allowance"" [label=""allowance""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_constructor"" [label=""constructor""];
""1261_transfer"" [label=""transfer""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_burn"" [label=""burn""];
""1261_distr"" [label=""distr""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
}
"
0xaa8722fb1c9eec9b6c32a90dbe9aa4c9eff19f55.sol,OrganicumOrders,contract OrganicumOrders { struct order { uint256 balance; uint256 tokens; },1,"subgraph cluster_563_OrganicumOrders {
label=""OrganicumOrders"";
""563_fallback"" [label=""fallback""];
""563_vote"" [label=""vote""];
""563_OrganicumOrders"" [label=""OrganicumOrders""];
""563_changeEtherCost"" [label=""changeEtherCost""];
""563_refund"" [label=""refund""];
""563_takeInvest"" [label=""takeInvest""];
""563_orderFor"" [label=""orderFor""];
""563_getPrice"" [label=""getPrice""];
""563_changeOwner"" [label=""changeOwner""];
""563_takeInvest"" -> ""563_isOwner"";
""563_changeEtherCost"" -> ""563_isOwner"";
""563_orderFor"" -> ""563_getPrice"";
""563_fallback"" -> ""563_getPrice"";
""563_changeOwner"" -> ""563_isOwner"";
}
"
0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol,Token,"contract Token is ERC20, Stoppable { bytes32 public symbol; string public name; uint256 public decimals = 18; TokenLogic public logic; function Token(string name_, bytes32 symbol_) { name = name_; symbol = symbol_; }",1,"subgraph cluster_1370_Token {
label=""Token"";
""1370_payout"" [label=""payout""];
""1370_totalSupply"" [label=""totalSupply""];
""1370_setLogic"" [label=""setLogic""];
""1370_mint"" [label=""mint""];
""1370_transferEth"" [label=""transferEth""];
""1370_setSymbol"" [label=""setSymbol""];
""1370_setOwner"" [label=""setOwner""];
""1370_fallback"" [label=""fallback""];
""1370_setName"" [label=""setName""];
""1370_balanceOf"" [label=""balanceOf""];
""1370_burn"" [label=""burn""];
""1370_approve"" [label=""approve""];
""1370_transferFrom"" [label=""transferFrom""];
""1370_push"" [label=""push""];
""1370_transfer"" [label=""transfer""];
""1370_Token"" [label=""Token""];
""1370_allowance"" [label=""allowance""];
""1370_pull"" [label=""pull""];
""1370_triggerTansferEvent"" [label=""triggerTansferEvent""];
""1370_burn"" -> ""1370_auth"";
""1370_burn"" -> ""1370_note"";
""1370_transfer"" -> ""1370_note"";
""1370_pull"" -> ""1370_transferFrom"";
""1370_transfer"" -> ""1370_stoppable"";
""1370_setName"" -> ""1370_auth"";
""1370_mint"" -> ""1370_stoppable"";
""1370_mint"" -> ""1370_auth"";
""1370_setOwner"" -> ""1370_auth"";
""1370_burn"" -> ""1370_stoppable"";
""1370_approve"" -> ""1370_note"";
""1370_push"" -> ""1370_transfer"";
""1370_setOwner"" -> ""1370_setOwner"";
""1370_approve"" -> ""1370_stoppable"";
""1370_setSymbol"" -> ""1370_auth"";
""1370_mint"" -> ""1370_note"";
""1370_transferFrom"" -> ""1370_stoppable"";
""1370_payout"" -> ""1370_auth"";
""1370_transferFrom"" -> ""1370_note"";
""1370_setLogic"" -> ""1370_auth"";
""1370_setLogic"" -> ""1370_note"";
""1370_setOwner"" -> ""1370_balanceOf"";
}
"
0x379f2596d4c4a417ef1023b81c8b9ff5419b13d4.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 10000000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_setPrices"" [label=""setPrices""];
""612_freezeAccount"" [label=""freezeAccount""];
""612_mintToken"" [label=""mintToken""];
""612__transfer"" [label=""_transfer""];
""612_buy"" [label=""buy""];
""612_fallback"" [label=""fallback""];
""612_selfdestructs"" [label=""selfdestructs""];
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_buy"" -> ""612__transfer"";
""612_fallback"" -> ""612__transfer"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_mintToken"" -> ""612_onlyOwner"";
""612_selfdestructs"" -> ""612_onlyOwner"";
}
"
0x5b39afa22a9debd9247bf84b68a79b8736c2ba4e.sol,Quiz,contract Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_Quiz {
label=""Quiz"";
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_Try"" [label=""Try""];
""118_Start_quiz_g"" [label=""Start_quiz_g""];
}
"
0xefcc5dcaba4a93046b5f5c24c1281c685154214c.sol,CrypteloPreSale,"contract CrypteloPreSale { using SafeMath for uint256; mapping (address => bool) private owners; mapping (address => uint) private WhiteListed; mapping (address => uint256) private vestedTokens; mapping (address => uint256) private dateInvested; mapping (address => uint256) private firstDeadline; uint private firstGminimumWeiAmount = 100000000000000000; uint private secondGminimumWeiAmount = 40000000000000000000; uint public weiHardCap = 3625000000000000000000; uint public weiRaised = 0; uint private weiLeft = weiHardCap; uint private CRLTotal = 9062500000000000; uint private CRLToSell = CRLTotal.div(2); uint private totalVesting = 0; uint private totalCRLDistributed = 0; uint private CRLLeft = CRLTotal; uint public CRLperEther = 1250000000000; uint public CRLperMicroEther = CRLperEther.div(1000000); address public CrypteloERC20Address = 0x7123027d76a5135e66b3a365efaba2b55de18a62; address private forwardFundsWallet = 0xd6c56d07665D44159246517Bb4B2aC9bBeb040cf; uint firstTimeOffset = 1 years; event eRefund(address _addr, uint _weiAmount, string where); event eTokensToSend(address _addr, uint _CRLTokens); event eSendTokens(address _addr, uint _amount); function CrypteloPreSale(){ owners[msg.sender] = true; }",1,"subgraph cluster_573_CrypteloPreSale {
label=""CrypteloPreSale"";
""573_forwardFunds"" [label=""forwardFunds""];
""573_fallback"" [label=""fallback""];
""573_getTotalVesting"" [label=""getTotalVesting""];
""573_withdrawDistributionCRL"" [label=""withdrawDistributionCRL""];
""573_addWhiteList"" [label=""addWhiteList""];
""573_claimTokens"" [label=""claimTokens""];
""573_CrypteloPreSale"" [label=""CrypteloPreSale""];
""573_isWhiteList"" [label=""isWhiteList""];
""573_removeWhiteList"" [label=""removeWhiteList""];
""573_checkMyTokens"" [label=""checkMyTokens""];
""573_withdrawAllEther"" [label=""withdrawAllEther""];
""573_getTotalDistributed"" [label=""getTotalDistributed""];
""573_refund"" [label=""refund""];
""573_sendTokens"" [label=""sendTokens""];
""573_vestTokens"" [label=""vestTokens""];
""573_checkMyVestingPeriod"" [label=""checkMyVestingPeriod""];
""573_fallback"" -> ""573_sendTokens"";
""573_fallback"" -> ""573_refund"";
""573_fallback"" -> ""573_forwardFunds"";
""573_withdrawDistributionCRL"" -> ""573_sendTokens"";
""573_fallback"" -> ""573_vestTokens"";
""573_claimTokens"" -> ""573_sendTokens"";
}
"
0x56b7f2a2d6f70d88b991e6c7b8005e0a13a9b379.sol,CryptoCurrencyExchange,"contract CryptoCurrencyExchange is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 3000000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function CryptoCurrencyExchange() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_CryptoCurrencyExchange {
label=""CryptoCurrencyExchange"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_CryptoCurrencyExchange"" [label=""CryptoCurrencyExchange""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x03a897c8d7d21688ae0a49ea087836b2667c2cc8.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1308_RefundVault {
label=""RefundVault"";
""1308_close"" [label=""close""];
""1308_enableRefunds"" [label=""enableRefunds""];
""1308_refund"" [label=""refund""];
""1308_deposit"" [label=""deposit""];
""1308_constructor"" [label=""constructor""];
""1308_deposit"" -> ""1308_onlyOwner"";
""1308_close"" -> ""1308_onlyOwner"";
""1308_enableRefunds"" -> ""1308_onlyOwner"";
}
"
0xa2038ce672658f492fcd9e4fdaa1a3c530011a8a.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_630_RefundVault {
label=""RefundVault"";
""630_close"" [label=""close""];
""630_deposit"" [label=""deposit""];
""630_refund"" [label=""refund""];
""630_RefundVault"" [label=""RefundVault""];
""630_enableRefunds"" [label=""enableRefunds""];
""630_close"" -> ""630_onlyOwner"";
""630_deposit"" -> ""630_onlyOwner"";
""630_enableRefunds"" -> ""630_onlyOwner"";
}
"
0x6f3d1879cd84fa1a7eec7fe936af6a84b67f4567.sol,ERC721dAppCaps,"contract ERC721dAppCaps is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721, Ownable, Fallback { event BoughtToken(address indexed buyer, uint256 tokenId); string public constant company = ; string public constant contact = ""https: string public constant author = ; uint8 constant TITLE_MAX_LENGTH = 64; uint256 constant DESCRIPTION_MAX_LENGTH = 100000; uint256 currentPrice = 0; mapping(uint256 => uint256) tokenTypes; mapping(uint256 => string) tokenTitles; mapping(uint256 => string) tokenDescriptions; mapping(uint256 => string) specialQualities; mapping(uint256 => string) tokenClasses; mapping(uint256 => string) iptcKeywords; constructor(string _name, string _symbol) public { name_ = _name; symbol_ = _symbol; _registerInterface(InterfaceId_ERC721Enumerable); _registerInterface(InterfaceId_ERC721Metadata); }",1,"subgraph cluster_1671_ERC721dAppCaps {
label=""ERC721dAppCaps"";
""1671_setCurrentPrice"" [label=""setCurrentPrice""];
""1671_removeTokenFrom"" [label=""removeTokenFrom""];
""1671_tokenURI"" [label=""tokenURI""];
""1671_symbol"" [label=""symbol""];
""1671__mint"" [label=""_mint""];
""1671_tokenOfOwnerByIndex"" [label=""tokenOfOwnerByIndex""];
""1671_totalSupply"" [label=""totalSupply""];
""1671_constructor"" [label=""constructor""];
""1671_kill"" [label=""kill""];
""1671_myTokens"" [label=""myTokens""];
""1671_viewTokenMeta"" [label=""viewTokenMeta""];
""1671_getCurrentPrice"" [label=""getCurrentPrice""];
""1671_name"" [label=""name""];
""1671_buyToken"" [label=""buyToken""];
""1671_tokenByIndex"" [label=""tokenByIndex""];
""1671__setTokenURI"" [label=""_setTokenURI""];
""1671_addTokenTo"" [label=""addTokenTo""];
""1671_tokenByIndex"" -> ""1671_totalSupply"";
""1671_buyToken"" -> ""1671__mint"";
""1671_removeTokenFrom"" -> ""1671_removeTokenFrom"";
""1671__setTokenURI"" -> ""1671_onlyOwner"";
""1671_addTokenTo"" -> ""1671_addTokenTo"";
""1671_tokenURI"" -> ""1671_exists"";
""1671__setTokenURI"" -> ""1671_exists"";
""1671_constructor"" -> ""1671__registerInterface"";
""1671_setCurrentPrice"" -> ""1671_onlyOwner"";
""1671_tokenOfOwnerByIndex"" -> ""1671_balanceOf"";
""1671__mint"" -> ""1671__mint"";
""1671_buyToken"" -> ""1671_onlyOwner"";
}
"
0xd7faef6fd3d3e22037619a756221e38f7f2c9c62.sol,Blogger,contract Blogger { address public author; uint public donationCount; uint public withdrawalDate; struct Donate { address funder; uint value; },1,"subgraph cluster_232_Blogger {
label=""Blogger"";
""232_withdraw"" [label=""withdraw""];
""232_constructor"" [label=""constructor""];
""232_requestRefund"" [label=""requestRefund""];
""232_donate"" [label=""donate""];
""232_getContractValue"" [label=""getContractValue""];
""232_getSummary"" [label=""getSummary""];
""232_withdraw"" -> ""232_restricted"";
}
"
0x50ec4b1f8434020e2d896c9cfb8a20d63af6136d.sol,Snip3D,contract Snip3D is Owned { using SafeMath for uint; uint public _totalSupply; mapping(address => uint256)public balances; mapping(address => uint256)public bullets; mapping(uint256 => address)public formation; uint256 public nextFormation; mapping(address => uint256)public lastMove; mapping(uint256 => address) public RefundWaitingLine; uint256 public NextInLine; uint256 public NextAtLineEnd; uint256 public Refundpot; uint256 public blocksBeforeSemiRandomShoot = 10; uint256 public blocksBeforeTargetShoot = 40; constructor() public { },1,"subgraph cluster_957_Snip3D {
label=""Snip3D"";
""957_fetchdivs"" [label=""fetchdivs""];
""957_constructor"" [label=""constructor""];
""957_Payoutnextrefund"" [label=""Payoutnextrefund""];
""957_P3DDivstocontract"" [label=""P3DDivstocontract""];
""957_amountofp3d"" [label=""amountofp3d""];
""957_shootTarget"" [label=""shootTarget""];
""957_disburse"" [label=""disburse""];
""957_die"" [label=""die""];
""957_dividendsOwing"" [label=""dividendsOwing""];
""957_changevanity"" [label=""changevanity""];
""957_shootSemiRandom"" [label=""shootSemiRandom""];
""957_sendInSoldier"" [label=""sendInSoldier""];
""957_harvestabledivs"" [label=""harvestabledivs""];
""957_fallback"" [label=""fallback""];
""957_sendInSoldier"" -> ""957_updateAccount"";
""957_shootTarget"" -> ""957_isAlive"";
""957_die"" -> ""957_onlyOwner"";
""957_shootSemiRandom"" -> ""957_fetchdivs"";
""957_P3DDivstocontract"" -> ""957_harvestabledivs"";
""957_shootTarget"" -> ""957_harvestabledivs"";
""957_fetchdivs"" -> ""957_updateAccount"";
""957_shootSemiRandom"" -> ""957_isAlive"";
""957_shootTarget"" -> ""957_fetchdivs"";
}
"
0x46d1ebf7bb93044e078e0496e4661ec772607d9d.sol,TTCSale,"contract TTCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 30000; bool private rentrancy_lock = false; TTCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1578_TTCSale {
label=""TTCSale"";
""1578_checkFundingGoal"" [label=""checkFundingGoal""];
""1578_changeEndTime"" [label=""changeEndTime""];
""1578_checkFundingCap"" [label=""checkFundingCap""];
""1578_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1578_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1578_changeStartTime"" [label=""changeStartTime""];
""1578_terminate"" [label=""terminate""];
""1578_convertToMiniTtc"" [label=""convertToMiniTtc""];
""1578_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1578_currentTime"" [label=""currentTime""];
""1578_safeWithdrawal"" [label=""safeWithdrawal""];
""1578_TTCSale"" [label=""TTCSale""];
""1578_fallback"" [label=""fallback""];
""1578_setRate"" [label=""setRate""];
""1578_terminate"" -> ""1578_onlyOwner"";
""1578_fallback"" -> ""1578_checkFundingCap"";
""1578_ownerAllocateTokens"" -> ""1578_nonReentrant"";
""1578_ownerSafeWithdrawal"" -> ""1578_nonReentrant"";
""1578_ownerUnlockFund"" -> ""1578_afterDeadline"";
""1578_ownerAllocateTokens"" -> ""1578_onlyOwner"";
""1578_fallback"" -> ""1578_checkFundingGoal"";
""1578_fallback"" -> ""1578_afterStartTime"";
""1578_fallback"" -> ""1578_beforeDeadline"";
""1578_fallback"" -> ""1578_nonReentrant"";
""1578_ownerAllocateTokens"" -> ""1578_checkFundingCap"";
""1578_safeWithdrawal"" -> ""1578_nonReentrant"";
""1578_changeStartTime"" -> ""1578_onlyOwner"";
""1578_fallback"" -> ""1578_whenNotPaused"";
""1578_fallback"" -> ""1578_saleNotClosed"";
""1578_ownerAllocateTokens"" -> ""1578_checkFundingGoal"";
""1578_TTCSale"" -> ""1578_setRate"";
""1578_safeWithdrawal"" -> ""1578_afterDeadline"";
""1578_ownerUnlockFund"" -> ""1578_onlyOwner"";
""1578_changeEndTime"" -> ""1578_onlyOwner"";
""1578_ownerSafeWithdrawal"" -> ""1578_onlyOwner"";
""1578_setRate"" -> ""1578_onlyOwner"";
}
"
0xec6ce30daf8195a65c83a29025bd334bc9481ca0.sol,ZeroFeeXchange,"contract ZeroFeeXchange is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 33 * 1 days; uint public round2 = now + 20 * 1 days; uint public round1 = now + 15 * 1 days; uint256 public totalSupply = 21000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 60000e18; uint public target0drop = 200; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_ZeroFeeXchange {
label=""ZeroFeeXchange"";
""1253_Implt"" [label=""Implt""];
""1253_distr"" [label=""distr""];
""1253_burn"" [label=""burn""];
""1253_constructor"" [label=""constructor""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_Distribute"" [label=""Distribute""];
""1253_transfer"" [label=""transfer""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" [label=""getTokens""];
""1253_approve"" [label=""approve""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_ImplAll"" [label=""ImplAll""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_fallback"" [label=""fallback""];
""1253_allowance"" [label=""allowance""];
""1253_add"" [label=""add""];
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_ImplAll"" -> ""1253_onlyOwner"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_constructor"" -> ""1253_distr"";
""1253_Implt"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
}
"
0xe1dbbce4570b815b6ce3434bb3097dc9f453c565.sol,MobiusRED,"contract MobiusRED is DSMath, DSAuth { string public ipfsHash; string public ipfsHashType = ; MobiusRedToken public token; bool public upgraded; address public nextVersion; uint public totalSharesSold; uint public totalEarningsGenerated; uint public totalDividendsPaid; uint public totalJackpotsWon; uint public constant DEV_FRACTION = WAD / 20; uint public constant DEV_DIVISOR = 20; uint public constant RETURNS_FRACTION = 65 * 10**16; uint public constant REFERRAL_FRACTION = 1 * 10**16; uint public constant JACKPOT_SEED_FRACTION = WAD / 20; uint public constant JACKPOT_FRACTION = 15 * 10**16; uint public constant AIRDROP_FRACTION = WAD / 100; uint public constant DIVIDENDS_FRACTION = 9 * 10**16; uint public constant STARTING_SHARE_PRICE = 1 finney; uint public constant PRICE_INCREASE_PERIOD = 1 hours; uint public constant HARD_DEADLINE_DURATION = 10 days; uint public constant SOFT_DEADLINE_DURATION = 1 days; uint public constant TIME_PER_SHARE = 5 minutes; uint public jackpotSeed; uint public devBalance; uint public raisedICO; uint public unclaimedReturns; uint public constant MULTIPLIER = RAY; struct Investor { uint lastCumulativeReturnsPoints; uint shares; }",1,"subgraph cluster_2284_MobiusRED {
label=""MobiusRED"";
""2284_fallback"" [label=""fallback""];
""2284_constructor"" [label=""constructor""];
""2284__outstandingReturns"" [label=""_outstandingReturns""];
""2284_buyShares"" [label=""buyShares""];
""2284__airDrop"" [label=""_airDrop""];
""2284__purchase"" [label=""_purchase""];
""2284_upgrade"" [label=""upgrade""];
""2284__updateReturns"" [label=""_updateReturns""];
""2284_withdrawDevShare"" [label=""withdrawDevShare""];
""2284_updateMyReturns"" [label=""updateMyReturns""];
""2284__finalizeRound"" [label=""_finalizeRound""];
""2284__issueShares"" [label=""_issueShares""];
""2284_finalizeLastRound"" [label=""finalizeLastRound""];
""2284__splitRevenue"" [label=""_splitRevenue""];
""2284_finalizeAndRestart"" [label=""finalizeAndRestart""];
""2284_totalsInfo"" [label=""totalsInfo""];
""2284__disburseReturns"" [label=""_disburseReturns""];
""2284_reinvestReturns"" [label=""reinvestReturns""];
""2284_startNewRound"" [label=""startNewRound""];
""2284_setIPFSHash"" [label=""setIPFSHash""];
""2284_hasReturns"" [label=""hasReturns""];
""2284_roundInfo"" [label=""roundInfo""];
""2284_withdrawReturns"" [label=""withdrawReturns""];
""2284_investorInfo"" [label=""investorInfo""];
""2284_estimateReturns"" [label=""estimateReturns""];
""2284__outstandingReturns"" -> ""2284_mul"";
""2284__finalizeRound"" -> ""2284_add"";
""2284_finalizeAndRestart"" -> ""2284_startNewRound"";
""2284__finalizeRound"" -> ""2284_wmul"";
""2284__purchase"" -> ""2284_add"";
""2284__issueShares"" -> ""2284_add"";
""2284_reinvestReturns"" -> ""2284_min"";
""2284_upgrade"" -> ""2284_auth"";
""2284_roundInfo"" -> ""2284_wmul"";
""2284_fallback"" -> ""2284_buyShares"";
""2284_withdrawDevShare"" -> ""2284_auth"";
""2284_reinvestReturns"" -> ""2284_reinvestReturns"";
""2284__outstandingReturns"" -> ""2284_sub"";
""2284__disburseReturns"" -> ""2284_wdiv"";
""2284_reinvestReturns"" -> ""2284__purchase"";
""2284_finalizeLastRound"" -> ""2284__finalizeRound"";
""2284_buyShares"" -> ""2284__purchase"";
""2284__splitRevenue"" -> ""2284_wmul"";
""2284__issueShares"" -> ""2284_wdiv"";
""2284__updateReturns"" -> ""2284_add"";
""2284_withdrawReturns"" -> ""2284__updateReturns"";
""2284_investorInfo"" -> ""2284_estimateReturns"";
""2284__splitRevenue"" -> ""2284__disburseReturns"";
""2284_reinvestReturns"" -> ""2284__updateReturns"";
""2284__updateReturns"" -> ""2284__outstandingReturns"";
""2284__disburseReturns"" -> ""2284_add"";
""2284__airDrop"" -> ""2284_add"";
""2284_reinvestReturns"" -> ""2284_sub"";
""2284_totalsInfo"" -> ""2284_wmul"";
""2284_setIPFSHash"" -> ""2284_auth"";
""2284__purchase"" -> ""2284_mul"";
""2284_finalizeAndRestart"" -> ""2284_finalizeLastRound"";
""2284__purchase"" -> ""2284__issueShares"";
""2284__purchase"" -> ""2284__updateReturns"";
""2284_withdrawReturns"" -> ""2284_sub"";
""2284__purchase"" -> ""2284_min"";
""2284__purchase"" -> ""2284__airDrop"";
""2284__issueShares"" -> ""2284_mul"";
""2284_estimateReturns"" -> ""2284__outstandingReturns"";
""2284__purchase"" -> ""2284__splitRevenue"";
""2284__splitRevenue"" -> ""2284_add"";
""2284_estimateReturns"" -> ""2284_hasReturns"";
""2284_withdrawReturns"" -> ""2284_hasReturns"";
""2284_updateMyReturns"" -> ""2284__updateReturns"";
""2284_startNewRound"" -> ""2284__purchase"";
""2284__disburseReturns"" -> ""2284_mul"";
}
"
0xee58ee0b1519bb47801812a3a9c83ab600c63d81.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_645_SafeDestructible {
label=""SafeDestructible"";
""645_destroy"" [label=""destroy""];
""645_destroy"" -> ""645_onlyOwner"";
}
"
0xeb62b8c5c4f0f5d59a7f060554c13e8f38f4de9f.sol,HODL,contract HODL { address hodl = msg.sender; function() external payable {},1,"subgraph cluster_47_HODL {
label=""HODL"";
""47_get"" [label=""get""];
""47_end"" [label=""end""];
""47_fallback"" [label=""fallback""];
}
"
0x6de3cc59152e19f108378984f45e20a34c9f6338.sol,EtherSpin,"contract EtherSpin is usingOraclize, SafeMath { address public owner; uint public betCount; uint public minBet; uint public maxBet; uint public edgeRange; uint public payoutMultiplier; uint public gasLimit; uint public standardFee; uint public minimumNumber; uint public totalPlayerWinnings; uint public totalHouseWinnings; mapping (bytes32 => address) playerAddy; mapping (bytes32 => uint) playerBetSize; mapping (bytes32 => bool) playerHiLo; event LogBet(address indexed playerAddy, bool indexed HiLo, uint ActualRNGNumber, uint betSizing, bool WinLossResult); event LogErr(uint errcode); modifier onlyOwner { if (msg.sender != owner) throw; _; }",1,"subgraph cluster_6368_EtherSpin {
label=""EtherSpin"";
""6368_ownerSetEdgeRangeAndPayout"" [label=""ownerSetEdgeRangeAndPayout""];
""6368_ownerTransferEther"" [label=""ownerTransferEther""];
""6368___callback"" [label=""__callback""];
""6368_ownerSetGasLimit"" [label=""ownerSetGasLimit""];
""6368_ownerKillContract"" [label=""ownerKillContract""];
""6368_roll"" [label=""roll""];
""6368_ownerSetLimits"" [label=""ownerSetLimits""];
""6368_ownerDeposit"" [label=""ownerDeposit""];
""6368_fallback"" [label=""fallback""];
""6368_EtherSpin"" [label=""EtherSpin""];
""6368_rollLo"" [label=""rollLo""];
""6368_ownerSetStandardFee"" [label=""ownerSetStandardFee""];
""6368_ownerTransferEther"" -> ""6368_onlyOwner"";
""6368_EtherSpin"" -> ""6368_ownerSetGasLimit"";
""6368___callback"" -> ""6368_oraclize_randomDS_proofVerify__returnCode"";
""6368_ownerSetEdgeRangeAndPayout"" -> ""6368_onlyOwner"";
""6368_ownerSetStandardFee"" -> ""6368_onlyOwner"";
""6368_fallback"" -> ""6368_roll"";
""6368_ownerSetGasLimit"" -> ""6368_onlyOwner"";
""6368_ownerKillContract"" -> ""6368_onlyOwner"";
""6368_EtherSpin"" -> ""6368_ownerSetEdgeRangeAndPayout"";
""6368_EtherSpin"" -> ""6368_oraclize_setProof"";
""6368_roll"" -> ""6368_oraclize_newRandomDSQuery"";
""6368___callback"" -> ""6368_add"";
""6368_rollLo"" -> ""6368_oraclize_newRandomDSQuery"";
""6368_ownerSetLimits"" -> ""6368_onlyOwner"";
""6368_EtherSpin"" -> ""6368_ownerSetLimits"";
""6368_EtherSpin"" -> ""6368_ownerSetStandardFee"";
""6368___callback"" -> ""6368_onlyOraclize"";
}
"
0x6c602f1798a453f90f249e208e2b64c7c09226f7.sol,Mentoring,"contract Mentoring is Ownable, ReentrancyGuard, CanReclaimToken { using SafeMath for uint256; event BecomeMentor(uint256 indexed mentorId); event BreakMentoring(uint256 indexed mentorId); event ChangeLevelPrice(uint256 indexed mentorId, uint256 newLevelPrice); event Income(address source, uint256 amount); event StartLecture(uint256 indexed lectureId, uint256 indexed mentorId, uint256 indexed studentId, uint256 mentorLevel, uint256 studentLevel, uint256 levelUp, uint256 levelPrice, uint256 startedAt, uint256 endsAt); struct Lecture { uint256 mentorId; uint256 studentId; uint256 mentorLevel; uint256 studentLevel; uint256 levelUp; uint256 levelPrice; uint256 startedAt; uint256 endsAt; }",1,"subgraph cluster_1365_Mentoring {
label=""Mentoring"";
""1365_changeLevelPrice"" [label=""changeLevelPrice""];
""1365_getLastLecture"" [label=""getLastLecture""];
""1365_getLastLectureIdAsStudent"" [label=""getLastLectureIdAsStudent""];
""1365_getLastLectureIdAsMentor"" [label=""getLastLectureIdAsMentor""];
""1365_startLecture"" [label=""startLecture""];
""1365_inLecture"" [label=""inLecture""];
""1365_setFee"" [label=""setFee""];
""1365_lectureExists"" [label=""lectureExists""];
""1365_getMentor"" [label=""getMentor""];
""1365_calcCost"" [label=""calcCost""];
""1365_isMentor"" [label=""isMentor""];
""1365_breakMentoring"" [label=""breakMentoring""];
""1365_inMentoring"" [label=""inMentoring""];
""1365_setLevelUpTime"" [label=""setLevelUpTime""];
""1365_becomeMentor"" [label=""becomeMentor""];
""1365__distributePayment"" [label=""_distributePayment""];
""1365_inStudying"" [label=""inStudying""];
""1365__calcLevelIncrease"" [label=""_calcLevelIncrease""];
""1365_isRaceSuitable"" [label=""isRaceSuitable""];
""1365__getPercent"" [label=""_getPercent""];
""1365_fallback"" [label=""fallback""];
""1365__flushBalance"" [label=""_flushBalance""];
""1365_getLecture"" [label=""getLecture""];
""1365_constructor"" [label=""constructor""];
""1365_startLecture"" -> ""1365_isMentor"";
""1365_setFee"" -> ""1365_onlyOwner"";
""1365_fallback"" -> ""1365__flushBalance"";
""1365_startLecture"" -> ""1365__calcLevelIncrease"";
""1365_changeLevelPrice"" -> ""1365_isMentor"";
""1365_calcCost"" -> ""1365__calcLevelIncrease"";
""1365_startLecture"" -> ""1365_onlyOwnerOf"";
""1365__distributePayment"" -> ""1365__getPercent"";
""1365_getMentor"" -> ""1365_isMentor"";
""1365_inLecture"" -> ""1365_inMentoring"";
""1365_setLevelUpTime"" -> ""1365_onlyOwner"";
""1365_startLecture"" -> ""1365__flushBalance"";
""1365_getLastLecture"" -> ""1365_lectureExists"";
""1365_breakMentoring"" -> ""1365_onlyOwnerOf"";
""1365_getLastLecture"" -> ""1365_getLastLectureIdAsStudent"";
""1365_getLecture"" -> ""1365_lectureExists"";
""1365_inMentoring"" -> ""1365_getLastLectureIdAsMentor"";
""1365_inStudying"" -> ""1365_getLastLectureIdAsStudent"";
""1365_startLecture"" -> ""1365_isRaceSuitable"";
""1365_changeLevelPrice"" -> ""1365_onlyOwnerOf"";
""1365_getLastLecture"" -> ""1365_getLastLectureIdAsMentor"";
""1365_inLecture"" -> ""1365_inStudying"";
""1365_becomeMentor"" -> ""1365_onlyOwnerOf"";
""1365_startLecture"" -> ""1365__distributePayment"";
}
"
0x0595d187cac88f04466371eff3a6b6d1b12fb013.sol,GIFT_1_ETH,contract GIFT_1_ETH { function GetGift(bytes pass) external payable { if(hashPass == keccak256(pass) && now>giftTime) { msg.sender.transfer(this.balance); },1,"subgraph cluster_164_GIFT_1_ETH {
label=""GIFT_1_ETH"";
""164_GetHash"" [label=""GetHash""];
""164_SetPass"" [label=""SetPass""];
""164_GetGift"" [label=""GetGift""];
""164_fallback"" [label=""fallback""];
""164_SetGiftTime"" [label=""SetGiftTime""];
""164_SetReciver"" [label=""SetReciver""];
""164_PassHasBeenSet"" [label=""PassHasBeenSet""];
}
"
0xcdcbb474268703da1b6744c540500e8a2a39e8dc.sol,knf,"contract knf is StandardToken { string public name; string public symbol; mapping(address => uint256) airdroped; uint8 public decimals; uint256 DropedThisWeek; string constant public version = ; uint256 lastWeek; uint256 decimate; uint256 weekly_limit; uint256 air_drop; address control; address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); function availableSupply() public view returns (uint256) { return balances[owner]; }",1,"subgraph cluster_1094_knf {
label=""knf"";
""1094_transfer"" [label=""transfer""];
""1094_transferOwnership"" [label=""transferOwnership""];
""1094_availableSupply"" [label=""availableSupply""];
""1094_changeName"" [label=""changeName""];
""1094_thisweek"" [label=""thisweek""];
""1094_cleanup"" [label=""cleanup""];
""1094_transferFrom"" [label=""transferFrom""];
""1094_balanceOf"" [label=""balanceOf""];
""1094_RecordTransfer"" [label=""RecordTransfer""];
""1094_transferControl"" [label=""transferControl""];
""1094_transfererc20"" [label=""transfererc20""];
""1094_transferBalance"" [label=""transferBalance""];
""1094_knf"" [label=""knf""];
""1094_Award"" [label=""Award""];
""1094_availableAirdrop"" [label=""availableAirdrop""];
""1094_fallback"" [label=""fallback""];
""1094_balanceOf"" -> ""1094_availableAirdrop"";
""1094_transfererc20"" -> ""1094_onlyControl"";
""1094_RecordTransfer"" -> ""1094_thisweek"";
""1094_transfer"" -> ""1094_RecordTransfer"";
""1094_changeName"" -> ""1094_onlyControl"";
""1094_transferControl"" -> ""1094_onlyControl"";
""1094_availableAirdrop"" -> ""1094_thisweek"";
""1094_transfer"" -> ""1094_availableAirdrop"";
""1094_transferFrom"" -> ""1094_availableAirdrop"";
""1094_cleanup"" -> ""1094_onlyControl"";
""1094_Award"" -> ""1094_RecordTransfer"";
""1094_Award"" -> ""1094_onlyControl"";
""1094_transferBalance"" -> ""1094_onlyControl"";
""1094_knf"" -> ""1094_RecordTransfer"";
""1094_transferOwnership"" -> ""1094_onlyControl"";
""1094_transferFrom"" -> ""1094_RecordTransfer"";
}
"
0x55654a38372617aedd583009f76e28700e48fdad.sol,CarnieGamesBlackBox,contract CarnieGamesBlackBox { address public Owner = msg.sender; bytes32 public key = keccak256(block.timestamp); function() public payable{},1,"subgraph cluster_81_CarnieGamesBlackBox {
label=""CarnieGamesBlackBox"";
""81_GetHash"" [label=""GetHash""];
""81_Withdraw"" [label=""Withdraw""];
""81_OpenBox"" [label=""OpenBox""];
""81_fallback"" [label=""fallback""];
}
"
0xa23a42b2bb161b0ab7bbcbd72bea54952e5299fc.sol,zeepay,"contract zeepay is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 1000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 10000; uint256 public tokensPerEth = 15000000e8; uint public target0drop = 1000; uint public progress0drop = 0; address multisig = 0x3c93bcB8dc2b78570B343dB9c6F56397Fe77164b ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_zeepay {
label=""zeepay"";
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_allowance"" [label=""allowance""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdraw"" [label=""withdraw""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_Distribute"" [label=""Distribute""];
""1261_constructor"" [label=""constructor""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_distr"" [label=""distr""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_add"" [label=""add""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_fallback"" [label=""fallback""];
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_add"" -> ""1261_onlyOwner"";
}
"
0x8d46facfb889740a345755e624942257dc87b5ac.sol,UpgradeableToken,"contract UpgradeableToken is Owner, Token { address public migrationAgent; event Upgrade(address indexed from, address indexed to, uint256 value); event UpgradeAgentSet(address agent); function migrate() public { require(migrationAgent != 0); uint value = balances[msg.sender]; balances[msg.sender] = balances[msg.sender].sub(value); totalSupply = totalSupply.sub(value); MigrationAgent(migrationAgent).migrateFrom(msg.sender, value); emit Upgrade(msg.sender, migrationAgent, value); }",1,"subgraph cluster_1017_UpgradeableToken {
label=""UpgradeableToken"";
""1017_fallback"" [label=""fallback""];
""1017_setMigrationAgent"" [label=""setMigrationAgent""];
""1017_migrate"" [label=""migrate""];
""1017_setMigrationAgent"" -> ""1017_onlyOwner"";
""1017_fallback"" -> ""1017_migrate"";
}
"
0x5ab883cfde389e09c623c049939d7553f312ac43.sol,Core,"contract Core is Control { function random(uint256 _min, uint256 _max) public constant returns(uint256) { return uint256(sha3(block.blockhash(block.number - 1))) % (_min + _max) - _min; }",1,"subgraph cluster_978_Core {
label=""Core"";
""978_getAgentsNum"" [label=""getAgentsNum""];
""978_getOverBalanceWEIInfo"" [label=""getOverBalanceWEIInfo""];
""978_withdrawOverBalanceWEI"" [label=""withdrawOverBalanceWEI""];
""978_getAgentBetsSum"" [label=""getAgentBetsSum""];
""978_random"" [label=""random""];
""978__play"" [label=""_play""];
""978_changeGameSettings"" [label=""changeGameSettings""];
""978_withdrawCommissionBalanceWEI"" [label=""withdrawCommissionBalanceWEI""];
""978_bet"" [label=""bet""];
""978_playForcibly"" [label=""playForcibly""];
""978_getBankBalanceWEIInfo"" [label=""getBankBalanceWEIInfo""];
""978_getCommissionBalanceWEIInfo"" [label=""getCommissionBalanceWEIInfo""];
""978_Core"" [label=""Core""];
""978_getAgentBankBalanceWEI"" [label=""getAgentBankBalanceWEI""];
""978_getAgentId"" [label=""getAgentId""];
""978_getAgentAdress"" [label=""getAgentAdress""];
""978_getPositionBetAgent"" [label=""getPositionBetAgent""];
""978_playForcibly"" -> ""978_onlyRun"";
""978_playForcibly"" -> ""978__play"";
""978_playForcibly"" -> ""978_onlyADM"";
""978_bet"" -> ""978__play"";
""978_bet"" -> ""978_getAgentBetsSum"";
""978_changeGameSettings"" -> ""978_onlyADM"";
""978_bet"" -> ""978_getAgentBankBalanceWEI"";
""978_getCommissionBalanceWEIInfo"" -> ""978_onlyADM"";
""978_withdrawCommissionBalanceWEI"" -> ""978_onlyADM"";
""978_bet"" -> ""978_onlyRun"";
""978__play"" -> ""978_random"";
""978_getBankBalanceWEIInfo"" -> ""978_onlyADM"";
""978_getOverBalanceWEIInfo"" -> ""978_onlyADM"";
""978__play"" -> ""978_getAgentBankBalanceWEI"";
""978__play"" -> ""978_getAgentAdress"";
""978_withdrawOverBalanceWEI"" -> ""978_onlyADM"";
""978_bet"" -> ""978_getAgentId"";
""978__play"" -> ""978_getAgentBetsSum"";
}
"
0xd0306dd978c2deced267a29b25290f353149450a.sol,Slaughter3D,contract Slaughter3D is Owned { using SafeMath for uint; struct Stage { uint8 numberOfPlayers; uint256 blocknumber; bool finalized; mapping (uint8 => address) slotXplayer; mapping (address => bool) players; mapping (uint8 => address) setMN; },1,"subgraph cluster_1314_Slaughter3D {
label=""Slaughter3D"";
""1314_currentstageplayer1"" [label=""currentstageplayer1""];
""1314_dividendsOwing"" [label=""dividendsOwing""];
""1314_offerAsSacrificeFromVaultForce"" [label=""offerAsSacrificeFromVaultForce""];
""1314_checkstatus"" [label=""checkstatus""];
""1314_contractownsthismanyP3D"" [label=""contractownsthismanyP3D""];
""1314_withdraw"" [label=""withdraw""];
""1314_myEarnings"" [label=""myEarnings""];
""1314_offerAsSacrificeFromVault"" [label=""offerAsSacrificeFromVault""];
""1314_allocateSurvivorWinnings"" [label=""allocateSurvivorWinnings""];
""1314_DivsToRefundpot"" [label=""DivsToRefundpot""];
""1314_DonateToLosers"" [label=""DonateToLosers""];
""1314_nextonetogetpaid"" [label=""nextonetogetpaid""];
""1314_previousstageplayer2"" [label=""previousstageplayer2""];
""1314_disburse"" [label=""disburse""];
""1314_acceptOffer"" [label=""acceptOffer""];
""1314_currentstageplayer2"" [label=""currentstageplayer2""];
""1314_invalidateStage"" [label=""invalidateStage""];
""1314_legacyStart"" [label=""legacyStart""];
""1314_currentPlayers"" [label=""currentPlayers""];
""1314_Payoutnextrefund"" [label=""Payoutnextrefund""];
""1314_fallback"" [label=""fallback""];
""1314_offerAsSacrifice"" [label=""offerAsSacrifice""];
""1314_tryFinalizeStage"" [label=""tryFinalizeStage""];
""1314_previousstageplayer1"" [label=""previousstageplayer1""];
""1314_previousstageloser"" [label=""previousstageloser""];
""1314_constructor"" [label=""constructor""];
""1314_fetchdivs"" [label=""fetchdivs""];
""1314_offerAsSacrifice"" -> ""1314_tryFinalizeStage"";
""1314_tryFinalizeStage"" -> ""1314_fetchdivs"";
""1314_offerAsSacrificeFromVault"" -> ""1314_acceptOffer"";
""1314_offerAsSacrifice"" -> ""1314_acceptOffer"";
""1314_fetchdivs"" -> ""1314_updateAccount"";
""1314_offerAsSacrificeFromVault"" -> ""1314_isNewToStage"";
""1314_offerAsSacrifice"" -> ""1314_prepareStage"";
""1314_myEarnings"" -> ""1314_hasEarnings"";
""1314_offerAsSacrificeFromVault"" -> ""1314_canPayFromVault"";
""1314_offerAsSacrifice"" -> ""1314_isValidOffer"";
""1314_withdraw"" -> ""1314_hasEarnings"";
""1314_offerAsSacrificeFromVaultForce"" -> ""1314_tryFinalizeStage"";
""1314_offerAsSacrificeFromVault"" -> ""1314_tryFinalizeStage"";
""1314_offerAsSacrifice"" -> ""1314_isNewToStage"";
""1314_legacyStart"" -> ""1314_onlyOwner"";
""1314_offerAsSacrificeFromVault"" -> ""1314_prepareStage"";
""1314_withdraw"" -> ""1314_tryFinalizeStage"";
""1314_tryFinalizeStage"" -> ""1314_allocateSurvivorWinnings"";
""1314_offerAsSacrificeFromVaultForce"" -> ""1314_prepareStage"";
""1314_tryFinalizeStage"" -> ""1314_invalidateStage"";
}
"
0x55654a38372617aedd583009f76e28700e48fdad.sol,CarnieGamesBlackBox,contract CarnieGamesBlackBox { address public Owner = msg.sender; bytes32 public key = keccak256(block.timestamp); function() public payable{},1,"subgraph cluster_81_CarnieGamesBlackBox {
label=""CarnieGamesBlackBox"";
""81_GetHash"" [label=""GetHash""];
""81_Withdraw"" [label=""Withdraw""];
""81_OpenBox"" [label=""OpenBox""];
""81_fallback"" [label=""fallback""];
}
"
0x333b20d643b58263e1558de655fda9cf7d07c401.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1002_RefundVault {
label=""RefundVault"";
""1002_deposit"" [label=""deposit""];
""1002_refund"" [label=""refund""];
""1002_RefundVault"" [label=""RefundVault""];
""1002_enableRefunds"" [label=""enableRefunds""];
""1002_close"" [label=""close""];
""1002_close"" -> ""1002_onlyOwner"";
""1002_enableRefunds"" -> ""1002_onlyOwner"";
""1002_deposit"" -> ""1002_onlyOwner"";
}
"
0x50f37df80a4e804a03275b21f83ebf5d5a668d39.sol,AuctionPotato,"contract AuctionPotato is Ownable { using SafeMath for uint256; string name; uint public startTime; uint public endTime; uint auctionDuration; uint public potato; uint oldPotato; uint oldHighestBindingBid; bool public canceled; uint public highestBindingBid; address public highestBidder; bool blockerPay; bool blockerWithdraw; mapping(address => uint256) public fundsByBidder; bool ownerHasWithdrawn; event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid); event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount); event LogCanceled(); event Withdraw(address owner, uint amount); constructor() public { blockerWithdraw = false; blockerPay = false; highestBindingBid = 3000000000000000; potato = 0; auctionDuration = 3 hours; startTime = 1546794000; endTime = startTime + auctionDuration; name = ; }",1,"subgraph cluster_620_AuctionPotato {
label=""AuctionPotato"";
""620_withdraw"" [label=""withdraw""];
""620_nextNextBid"" [label=""nextNextBid""];
""620_setStartTime"" [label=""setStartTime""];
""620_nextBid"" [label=""nextBid""];
""620_queryAuction"" [label=""queryAuction""];
""620_constructor"" [label=""constructor""];
""620_balance"" [label=""balance""];
""620_cancelAuction"" [label=""cancelAuction""];
""620_placeBid"" [label=""placeBid""];
""620_withdraw"" -> ""620_onlyOwner"";
""620_cancelAuction"" -> ""620_onlyBeforeEnd"";
""620_placeBid"" -> ""620_onlyAfterStart"";
""620_queryAuction"" -> ""620_nextBid"";
""620_cancelAuction"" -> ""620_onlyNotCanceled"";
""620_placeBid"" -> ""620_onlyNotCanceled"";
""620_setStartTime"" -> ""620_onlyOwner"";
""620_cancelAuction"" -> ""620_onlyOwner"";
""620_placeBid"" -> ""620_onlyBeforeEnd"";
}
"
0x7012ef33dcc79a7341ba05cf2c5699eaaa5e0d7d.sol,Transaction,contract Transaction is Ownable { struct TransactionNeoPlace { uint id; address seller; address buyer; bytes16 itemId; bytes8 typeItem; string location; string pictureHash; bytes16 receiptHash; string comment; bytes8 status; uint256 _price; },1,"subgraph cluster_738_Transaction {
label=""Transaction"";
""738_stringToBytes8"" [label=""stringToBytes8""];
""738_getPurchases"" [label=""getPurchases""];
""738_getSales"" [label=""getSales""];
""738_sendAmount"" [label=""sendAmount""];
""738_unlockFunds"" [label=""unlockFunds""];
""738_kill"" [label=""kill""];
""738_getNumberOfTransactions"" [label=""getNumberOfTransactions""];
""738_sendAdditionalFunds"" [label=""sendAdditionalFunds""];
""738_buyItem"" [label=""buyItem""];
""738_unlockFunds"" -> ""738_stringToBytes8"";
""738_kill"" -> ""738_onlyOwner"";
""738_sendAdditionalFunds"" -> ""738_stringToBytes8"";
}
"
0x0e6f6ed4581d25944d8c6a595b9f50e11431b754.sol,PaymentHolder,contract PaymentHolder is Ownable { modifier onlyAllowed() { require(allowed[msg.sender]); _; },1,"subgraph cluster_1744_PaymentHolder {
label=""PaymentHolder"";
""1744_prohibit"" [label=""prohibit""];
""1744_update"" [label=""update""];
""1744_setUpdater"" [label=""setUpdater""];
""1744_withdrawEth"" [label=""withdrawEth""];
""1744_migrate"" [label=""migrate""];
""1744_depositEth"" [label=""depositEth""];
""1744_withdrawToken"" [label=""withdrawToken""];
""1744_allow"" [label=""allow""];
""1744_setUpdater"" -> ""1744_onlyOwner"";
""1744_depositEth"" -> ""1744_onlyAllowed"";
""1744_withdrawEth"" -> ""1744_onlyAllowed"";
""1744_withdrawToken"" -> ""1744_onlyAllowed"";
""1744_update"" -> ""1744_onlyUpdater"";
""1744_prohibit"" -> ""1744_onlyOwner"";
""1744_migrate"" -> ""1744_onlyOwner"";
""1744_allow"" -> ""1744_onlyOwner"";
}
"
0xefe17f088be79ba802b60ea84ebafb255ea18aa4.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_249_AccessService {
label=""AccessService"";
""249_setService"" [label=""setService""];
""249_setFinance"" [label=""setFinance""];
""249_withdraw"" [label=""withdraw""];
}
"
0xeb156f1722c1357518fe2599bd8362fb19a56757.sol,Lucky_2020,"contract Lucky_2020 is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; uint public deadline = now + 1000 * 1 days; uint public round2 = now + 500 * 1 days; uint public round1 = now + 500 * 1 days; uint256 public totalSupply = 2020000000000e0; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 2020000000000e0; uint public target0drop = 0; uint public progress0drop = 0; address multisig = 0xf72a54D87E7d787167c39c7BCe4680E40253B69b; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1288_Lucky_2020 {
label=""Lucky_2020"";
""1288_balanceOf"" [label=""balanceOf""];
""1288_allowance"" [label=""allowance""];
""1288_getTokens"" [label=""getTokens""];
""1288_distr"" [label=""distr""];
""1288_add"" [label=""add""];
""1288_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1288_withdraw"" [label=""withdraw""];
""1288_burn"" [label=""burn""];
""1288_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1288_withdrawAll"" [label=""withdrawAll""];
""1288_getTokenBalance"" [label=""getTokenBalance""];
""1288_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1288_transferOwnership"" [label=""transferOwnership""];
""1288_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1288_finishDistribution"" [label=""finishDistribution""];
""1288_transfer"" [label=""transfer""];
""1288_constructor"" [label=""constructor""];
""1288_fallback"" [label=""fallback""];
""1288_approve"" [label=""approve""];
""1288_Distribute"" [label=""Distribute""];
""1288_transferFrom"" [label=""transferFrom""];
""1288_DistributeAirdrop"" -> ""1288_Distribute"";
""1288_transferOwnership"" -> ""1288_onlyOwner"";
""1288_finishDistribution"" -> ""1288_canDistr"";
""1288_withdrawAll"" -> ""1288_onlyOwner"";
""1288_finishDistribution"" -> ""1288_onlyOwner"";
""1288_transferFrom"" -> ""1288_onlyPayloadSize"";
""1288_fallback"" -> ""1288_getTokens"";
""1288_burn"" -> ""1288_onlyOwner"";
""1288_withdraw"" -> ""1288_onlyOwner"";
""1288_constructor"" -> ""1288_distr"";
""1288_Distribute"" -> ""1288_onlyOwner"";
""1288_DistributeAirdropMultiple"" -> ""1288_Distribute"";
""1288_getTokens"" -> ""1288_canDistr"";
""1288_getTokens"" -> ""1288_distr"";
""1288_updateTokensPerEth"" -> ""1288_onlyOwner"";
""1288_DistributeAirdropMultiple"" -> ""1288_onlyOwner"";
""1288_add"" -> ""1288_onlyOwner"";
""1288_transfer"" -> ""1288_onlyPayloadSize"";
""1288_DistributeAirdrop"" -> ""1288_onlyOwner"";
""1288_withdrawForeignTokens"" -> ""1288_onlyOwner"";
""1288_distr"" -> ""1288_canDistr"";
}
"
0x6c4fe5b5b3f8a60fd5d036940afef65c73e4d2ae.sol,MCFitCrowdsale,"contract MCFitCrowdsale is Ownable, Crowdsale, MintableToken { using SafeMath for uint256; enum State {Active, Closed}",1,"subgraph cluster_1523_MCFitCrowdsale {
label=""MCFitCrowdsale"";
""1523_MCFitCrowdsale"" [label=""MCFitCrowdsale""];
""1523_fallback"" [label=""fallback""];
""1523_getDeposited"" [label=""getDeposited""];
""1523_buyTokens"" [label=""buyTokens""];
""1523_getTotalAmountOfTokens"" [label=""getTotalAmountOfTokens""];
""1523_deposit"" [label=""deposit""];
""1523_removeContract"" [label=""removeContract""];
""1523_mintToSpecialFund"" [label=""mintToSpecialFund""];
""1523_close"" [label=""close""];
""1523_changeRateUSD"" [label=""changeRateUSD""];
""1523_changeCheckDate"" [label=""changeCheckDate""];
""1523_changeCheckDate"" -> ""1523_onlyOwner"";
""1523_buyTokens"" -> ""1523_deposit"";
""1523_MCFitCrowdsale"" -> ""1523_Crowdsale"";
""1523_close"" -> ""1523_finishMinting"";
""1523_changeRateUSD"" -> ""1523_onlyOwner"";
""1523_buyTokens"" -> ""1523_mint"";
""1523_close"" -> ""1523_hasEnded"";
""1523_close"" -> ""1523_onlyOwner"";
""1523_fallback"" -> ""1523_buyTokens"";
""1523_buyTokens"" -> ""1523_getTotalAmountOfTokens"";
""1523_close"" -> ""1523_finalize"";
""1523_MCFitCrowdsale"" -> ""1523_mintToSpecialFund"";
""1523_mintToSpecialFund"" -> ""1523_onlyOwner"";
""1523_removeContract"" -> ""1523_onlyOwner"";
}
"
0x000000002bb43c83ece652d161ad0fa862129a2c.sol,AccountRegistry,"contract AccountRegistry is AccountRegistryInterface, TokenRescue { uint256 constant public registrationDeposit = 1 finney; uint256 constant public proposalCensorshipFee = 50 finney; address constant public burn = 0x000000003Ffc15cd9eA076d7ec40B8f516367Ca1; Vote public constant token = Vote(0x000000002647e16d9BaB9e46604D75591D289277); uint8 constant UNCONTACTED = 0; uint8 constant PROPOSER = 1; uint8 constant VOTER = 2; uint8 constant PENDING_PROPOSAL = 4; uint8 constant PROPOSAL = 8; uint8 constant PENDING_CABAL = 16; uint8 constant CABAL = 32; uint8 constant BOARD = 64; struct Account { uint256 lastAccess; uint8 membership; address appointer; address denouncer; address voucher; address devoucher; }",1,"subgraph cluster_103_AccountRegistryInterface {
label=""AccountRegistryInterface"";
""103_canVoteOnProposal"" [label=""canVoteOnProposal""];
}
"
0x549b38e8e5fb1ba4acd4187d8b7c8a04deb53206.sol,LotteryAdmin,"contract LotteryAdmin { address public owner; address public admin; address public proposedOwner; address public ethereumLottery; uint public dailyAdminAllowance; uint public lastAllowancePaymentTimestamp; uint public nextProfile; event Deposit(address indexed _from, uint _value); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_282_LotteryAdmin {
label=""LotteryAdmin"";
""282_setLottery"" [label=""setLottery""];
""282_destruct"" [label=""destruct""];
""282_proposeOwner"" [label=""proposeOwner""];
""282_setConfiguration"" [label=""setConfiguration""];
""282_withdraw"" [label=""withdraw""];
""282_allowsAllowance"" [label=""allowsAllowance""];
""282_acceptOwnership"" [label=""acceptOwnership""];
""282_requestAllowance"" [label=""requestAllowance""];
""282_needsInitialization"" [label=""needsInitialization""];
""282_setAdmin"" [label=""setAdmin""];
""282_fallback"" [label=""fallback""];
""282_initLottery"" [label=""initLottery""];
""282_LotteryAdmin"" [label=""LotteryAdmin""];
""282_requestAllowance"" -> ""282_allowsAllowance"";
""282_setConfiguration"" -> ""282_onlyOwner"";
""282_withdraw"" -> ""282_onlyOwner"";
""282_destruct"" -> ""282_onlyOwner"";
""282_setLottery"" -> ""282_onlyOwner"";
""282_requestAllowance"" -> ""282_onlyAdminOrOwner"";
""282_proposeOwner"" -> ""282_onlyOwner"";
""282_setAdmin"" -> ""282_onlyOwner"";
""282_initLottery"" -> ""282_onlyAdminOrOwner"";
}
"
0x5838f878000fe44b6f6c677bbf839e12f097c147.sol,Q_GAME,contract Q_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_Q_GAME {
label=""Q_GAME"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_set_game"" [label=""set_game""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_Try"" [label=""Try""];
}
"
0x46822ac3bc32db7ebd9845da3fe0886f824e9edf.sol,EBSCSale,"contract EBSCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 6000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; EBSCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1561_EBSCSale {
label=""EBSCSale"";
""1561_checkFundingCap"" [label=""checkFundingCap""];
""1561_checkFundingGoal"" [label=""checkFundingGoal""];
""1561_terminate"" [label=""terminate""];
""1561_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1561_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1561_convertToMiniEbsc"" [label=""convertToMiniEbsc""];
""1561_EBSCSale"" [label=""EBSCSale""];
""1561_changeStartTime"" [label=""changeStartTime""];
""1561_changeEndTime"" [label=""changeEndTime""];
""1561_fallback"" [label=""fallback""];
""1561_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1561_safeWithdrawal"" [label=""safeWithdrawal""];
""1561_setRate"" [label=""setRate""];
""1561_currentTime"" [label=""currentTime""];
""1561_fallback"" -> ""1561_afterStartTime"";
""1561_changeStartTime"" -> ""1561_onlyOwner"";
""1561_ownerAllocateTokens"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_nonReentrant"";
""1561_changeEndTime"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_beforeDeadline"";
""1561_ownerUnlockFund"" -> ""1561_onlyOwner"";
""1561_terminate"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_checkFundingCap"";
""1561_ownerUnlockFund"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_whenNotPaused"";
""1561_safeWithdrawal"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_checkFundingGoal"";
""1561_setRate"" -> ""1561_onlyOwner"";
""1561_EBSCSale"" -> ""1561_setRate"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingGoal"";
""1561_ownerAllocateTokens"" -> ""1561_onlyOwner"";
""1561_safeWithdrawal"" -> ""1561_nonReentrant"";
""1561_ownerSafeWithdrawal"" -> ""1561_onlyOwner"";
""1561_ownerSafeWithdrawal"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_saleNotClosed"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingCap"";
}
"
0xd7f4aea7c2b8d633d88c449eab91d7d5ef89427e.sol,EDAX,"contract EDAX is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 500000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 1000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0x15CA3e11C9887FAC531FC8a2C95394F2c84E654a; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_EDAX {
label=""EDAX"";
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_burn"" [label=""burn""];
""1261_approve"" [label=""approve""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_transfer"" [label=""transfer""];
""1261_distr"" [label=""distr""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_allowance"" [label=""allowance""];
""1261_add"" [label=""add""];
""1261_constructor"" [label=""constructor""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_fallback"" [label=""fallback""];
""1261_withdraw"" [label=""withdraw""];
""1261_Distribute"" [label=""Distribute""];
""1261_getTokens"" -> ""1261_distr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_distr"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
}
"
0x6bd26bb09c992e09d2156b48f723e56e52eead9c.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1282_MiniMeToken {
label=""MiniMeToken"";
""1282_doTransfer"" [label=""doTransfer""];
""1282_isContract"" [label=""isContract""];
""1282_fallback"" [label=""fallback""];
""1282_destroyTokens"" [label=""destroyTokens""];
""1282_balanceOf"" [label=""balanceOf""];
""1282_updateValueAtNow"" [label=""updateValueAtNow""];
""1282_approveAndCall"" [label=""approveAndCall""];
""1282_getValueAt"" [label=""getValueAt""];
""1282_createCloneToken"" [label=""createCloneToken""];
""1282_transfer"" [label=""transfer""];
""1282_generateTokens"" [label=""generateTokens""];
""1282_approve"" [label=""approve""];
""1282_MiniMeToken"" [label=""MiniMeToken""];
""1282_allowance"" [label=""allowance""];
""1282_balanceOfAt"" [label=""balanceOfAt""];
""1282_transferFrom"" [label=""transferFrom""];
""1282_claimTokens"" [label=""claimTokens""];
""1282_min"" [label=""min""];
""1282_totalSupplyAt"" [label=""totalSupplyAt""];
""1282_totalSupply"" [label=""totalSupply""];
""1282_enableTransfers"" [label=""enableTransfers""];
""1282_balanceOfAt"" -> ""1282_getValueAt"";
""1282_destroyTokens"" -> ""1282_totalSupply"";
""1282_totalSupplyAt"" -> ""1282_min"";
""1282_generateTokens"" -> ""1282_updateValueAtNow"";
""1282_enableTransfers"" -> ""1282_onlyController"";
""1282_destroyTokens"" -> ""1282_onlyController"";
""1282_approve"" -> ""1282_isContract"";
""1282_totalSupply"" -> ""1282_totalSupplyAt"";
""1282_fallback"" -> ""1282_isContract"";
""1282_balanceOfAt"" -> ""1282_min"";
""1282_doTransfer"" -> ""1282_isContract"";
""1282_transfer"" -> ""1282_doTransfer"";
""1282_totalSupplyAt"" -> ""1282_getValueAt"";
""1282_generateTokens"" -> ""1282_onlyController"";
""1282_doTransfer"" -> ""1282_balanceOfAt"";
""1282_destroyTokens"" -> ""1282_balanceOf"";
""1282_destroyTokens"" -> ""1282_updateValueAtNow"";
""1282_approveAndCall"" -> ""1282_approve"";
""1282_transferFrom"" -> ""1282_doTransfer"";
""1282_doTransfer"" -> ""1282_updateValueAtNow"";
""1282_balanceOf"" -> ""1282_balanceOfAt"";
""1282_generateTokens"" -> ""1282_totalSupply"";
""1282_generateTokens"" -> ""1282_balanceOf"";
""1282_claimTokens"" -> ""1282_onlyController"";
}
"
0xe3dd9bb9022c805660a2cd5914f89e92014229c1.sol,go_to_play,contract go_to_play { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_go_to_play {
label=""go_to_play"";
""143_StopGame"" [label=""StopGame""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_Activate"" [label=""Activate""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
""143_fallback"" [label=""fallback""];
}
"
0xcdf35c3fe4ccfacb3b1bbedfe71ca3a5ff6f2db1.sol,GenericCrowdsale,"contract GenericCrowdsale is Ownable { using SafeMath for uint256; enum State { Initialized, PreIco, PreIcoFinished, Ico, IcoFinished}",1,"subgraph cluster_2437_GenericCrowdsale {
label=""GenericCrowdsale"";
""2437_sendDevTokens"" [label=""sendDevTokens""];
""2437_sendAdvisorsTokens"" [label=""sendAdvisorsTokens""];
""2437_withdrawFunding"" [label=""withdrawFunding""];
""2437_finishTime"" [label=""finishTime""];
""2437_fallback"" [label=""fallback""];
""2437_preIco"" [label=""preIco""];
""2437_ico"" [label=""ico""];
""2437_checkGoals"" [label=""checkGoals""];
""2437_tokenFallback"" [label=""tokenFallback""];
""2437_claimRefund"" [label=""claimRefund""];
""2437_finishSale"" [label=""finishSale""];
""2437_getTime"" [label=""getTime""];
""2437_foreignPurchase"" [label=""foreignPurchase""];
""2437_initDiscounts"" [label=""initDiscounts""];
""2437_emergencyUnpause"" [label=""emergencyUnpause""];
""2437_emergencyPause"" [label=""emergencyPause""];
""2437_buyTokens"" [label=""buyTokens""];
""2437_successed"" [label=""successed""];
""2437_getDiscountOf"" [label=""getDiscountOf""];
""2437_GenericCrowdsale"" [label=""GenericCrowdsale""];
""2437_ceilTokens"" [label=""ceilTokens""];
""2437_withdrawFunding"" -> ""2437_onlyOwner"";
""2437_fallback"" -> ""2437_checkGoals"";
""2437_buyTokens"" -> ""2437_getDiscountOf"";
""2437_foreignPurchase"" -> ""2437_onlyOwner"";
""2437_foreignPurchase"" -> ""2437_buyTokens"";
""2437_emergencyPause"" -> ""2437_onlyOwner"";
""2437_buyTokens"" -> ""2437_getTime"";
""2437_fallback"" -> ""2437_sellActive"";
""2437_ico"" -> ""2437_onlyOwner"";
""2437_ico"" -> ""2437_initDiscounts"";
""2437_preIco"" -> ""2437_initDiscounts"";
""2437_withdrawFunding"" -> ""2437_successed"";
""2437_foreignPurchase"" -> ""2437_sellActive"";
""2437_sendDevTokens"" -> ""2437_onlyOwner"";
""2437_foreignPurchase"" -> ""2437_checkGoals"";
""2437_fallback"" -> ""2437_buyTokens"";
""2437_sendAdvisorsTokens"" -> ""2437_onlyOwner"";
""2437_sendAdvisorsTokens"" -> ""2437_successed"";
""2437_claimRefund"" -> ""2437_goalNotReached"";
""2437_buyTokens"" -> ""2437_ceilTokens"";
""2437_preIco"" -> ""2437_onlyOwner"";
""2437_finishSale"" -> ""2437_onlyOwner"";
""2437_emergencyUnpause"" -> ""2437_onlyOwner"";
""2437_sendDevTokens"" -> ""2437_successed"";
}
"
0xf1171e1e8df34ab97832342c7cbf04d9121a1ac3.sol,CSportsContest,"contract CSportsContest is CSportsAuth, CSportsContestBase { enum ContestStatus { Invalid, Active, Scoring, Paying, Paid, Canceled }",1,"subgraph cluster_3016_CSportsContest {
label=""CSportsContest"";
""3016__computeCut"" [label=""_computeCut""];
""3016_cancelContest"" [label=""cancelContest""];
""3016_setTeamContractAddress"" [label=""setTeamContractAddress""];
""3016_getContest"" [label=""getContest""];
""3016_getContestTeamCount"" [label=""getContestTeamCount""];
""3016_numWinnersToPay"" [label=""numWinnersToPay""];
""3016_unpause"" [label=""unpause""];
""3016_getIndexForTeamId"" [label=""getIndexForTeamId""];
""3016_payWinners"" [label=""payWinners""];
""3016_prepareToScore"" [label=""prepareToScore""];
""3016_releaseTeams"" [label=""releaseTeams""];
""3016_pause"" [label=""pause""];
""3016_scoreTeams"" [label=""scoreTeams""];
""3016_authorizedFundsAvailable"" [label=""authorizedFundsAvailable""];
""3016_exitContest"" [label=""exitContest""];
""3016_createContest"" [label=""createContest""];
""3016_closeContest"" [label=""closeContest""];
""3016_prepareToPayWinners"" [label=""prepareToPayWinners""];
""3016_getContestTeam"" [label=""getContestTeam""];
""3016_constructor"" [label=""constructor""];
""3016__authorizePayment"" [label=""_authorizePayment""];
""3016_getWinningPosition"" [label=""getWinningPosition""];
""3016_enterContest"" [label=""enterContest""];
""3016_getTotalAuthorizedForPayment"" [label=""getTotalAuthorizedForPayment""];
""3016_updateContestTeam"" [label=""updateContestTeam""];
""3016_transferApprovedFunds"" [label=""transferApprovedFunds""];
""3016_updateContestTeam"" -> ""3016_whenNotPaused"";
""3016_createContest"" -> ""3016_whenNotPaused"";
""3016_unpause"" -> ""3016_whenPaused"";
""3016_exitContest"" -> ""3016__authorizePayment"";
""3016_closeContest"" -> ""3016__authorizePayment"";
""3016_pause"" -> ""3016_onlyCLevel"";
""3016_enterContest"" -> ""3016_whenNotPaused"";
""3016_unpause"" -> ""3016_onlyCEO"";
""3016_releaseTeams"" -> ""3016__authorizePayment"";
""3016_payWinners"" -> ""3016__authorizePayment"";
""3016_setTeamContractAddress"" -> ""3016_onlyCEO"";
""3016_cancelContest"" -> ""3016__authorizePayment"";
""3016_pause"" -> ""3016_whenNotPaused"";
""3016_closeContest"" -> ""3016__computeCut"";
}
"
0x6f91e584f4c150951386b133e21aa769c8b7d060.sol,BigbomTokenSale,"contract BigbomTokenSale { address public admin; address public bigbomMultiSigWallet; BigbomToken public token; uint public raisedWei; bool public haltSale; uint public openSaleStartTime; uint public openSaleEndTime; BigbomContributorWhiteList public list; mapping(address=>uint) public participated; using SafeMath for uint; function BigbomTokenSale( address _admin, address _bigbomMultiSigWallet, BigbomContributorWhiteList _whilteListContract, uint _publicSaleStartTime, uint _publicSaleEndTime, BigbomToken _token) public { require (_publicSaleStartTime < _publicSaleEndTime); require (_admin != address(0x0)); require (_bigbomMultiSigWallet != address(0x0)); require (_whilteListContract != address(0x0)); require (_token != address(0x0)); admin = _admin; bigbomMultiSigWallet = _bigbomMultiSigWallet; list = _whilteListContract; openSaleStartTime = _publicSaleStartTime; openSaleEndTime = _publicSaleEndTime; token = _token; }",1,"subgraph cluster_2101_BigbomTokenSale {
label=""BigbomTokenSale"";
""2101_checkMaxCap"" [label=""checkMaxCap""];
""2101_debugBuy"" [label=""debugBuy""];
""2101_getBonus"" [label=""getBonus""];
""2101_saleStarted"" [label=""saleStarted""];
""2101_fallback"" [label=""fallback""];
""2101_contributorMinCap"" [label=""contributorMinCap""];
""2101_BigbomTokenSale"" [label=""BigbomTokenSale""];
""2101_finalizeSale"" [label=""finalizeSale""];
""2101_saleEnded"" [label=""saleEnded""];
""2101_setHaltSale"" [label=""setHaltSale""];
""2101_contributorMaxCap"" [label=""contributorMaxCap""];
""2101_sendETHToMultiSig"" [label=""sendETHToMultiSig""];
""2101_emergencyDrain"" [label=""emergencyDrain""];
""2101_buy"" [label=""buy""];
""2101_buy"" -> ""2101_saleStarted"";
""2101_fallback"" -> ""2101_buy"";
""2101_buy"" -> ""2101_contributorMinCap"";
""2101_emergencyDrain"" -> ""2101_saleEnded"";
""2101_finalizeSale"" -> ""2101_saleEnded"";
""2101_buy"" -> ""2101_checkMaxCap"";
""2101_debugBuy"" -> ""2101_sendETHToMultiSig"";
""2101_checkMaxCap"" -> ""2101_contributorMaxCap"";
""2101_emergencyDrain"" -> ""2101_sendETHToMultiSig"";
""2101_buy"" -> ""2101_sendETHToMultiSig"";
""2101_buy"" -> ""2101_getBonus"";
""2101_buy"" -> ""2101_saleEnded"";
}
"
0xbf2000b42c1ba2eb9e5163a0b7e2fe987ed124b4.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_processTransaction"" [label=""processTransaction""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_pullBalance"" [label=""pullBalance""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_fallback"" -> ""928_refundTransaction"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_processTransaction"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
}
"
0xc80205befdb86a1891019969001e90b064d5735a.sol,MILO,"contract MILO is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 950000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 100000000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0xCf7Ac628f8A0fa38059BF77b0134efaD8bF329A3; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_MILO {
label=""MILO"";
""1261_burn"" [label=""burn""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_add"" [label=""add""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_constructor"" [label=""constructor""];
""1261_Distribute"" [label=""Distribute""];
""1261_getTokens"" [label=""getTokens""];
""1261_distr"" [label=""distr""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_transfer"" [label=""transfer""];
""1261_withdraw"" [label=""withdraw""];
""1261_allowance"" [label=""allowance""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_getTokens"" -> ""1261_distr"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
}
"
0x217aff4ee5bc1dfcabd8d5c3a36e0b430b02ab9d.sol,ETher_game,contract ETher_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETher_game {
label=""ETher_game"";
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x8d46facfb889740a345755e624942257dc87b5ac.sol,Mortal,contract Mortal is Owner { function close() external onlyOwner { selfdestruct(owner); },1,"subgraph cluster_106_Mortal {
label=""Mortal"";
""106_close"" [label=""close""];
""106_close"" -> ""106_onlyOwner"";
}
"
0x025dce2d39a46296766db7cac8c322e8f59cd5d9.sol,EthToSmthSwaps,contract EthToSmthSwaps { using SafeMath for uint; address public owner; address public ratingContractAddress; uint256 SafeTime = 1 hours; struct Swap { bytes32 secret; bytes20 secretHash; uint256 createdAt; uint256 balance; },1,"subgraph cluster_679_EthToSmthSwaps {
label=""EthToSmthSwaps"";
""679_withdr"" [label=""withdr""];
""679_withdraw"" [label=""withdraw""];
""679_getSecret"" [label=""getSecret""];
""679_close"" [label=""close""];
""679_abort"" [label=""abort""];
""679_checkSign"" [label=""checkSign""];
""679_clean"" [label=""clean""];
""679_getBalance"" [label=""getBalance""];
""679_sign"" [label=""sign""];
""679_setReputationAddress"" [label=""setReputationAddress""];
""679_createSwap"" [label=""createSwap""];
""679_refund"" [label=""refund""];
""679_constructor"" [label=""constructor""];
""679_abort"" -> ""679_clean"";
""679_refund"" -> ""679_clean"";
""679_close"" -> ""679_clean"";
}
"
0x6d074dfa6111404ee8be2c9f024e32c9fffda1b7.sol,CrowdsaleToken,"contract CrowdsaleToken is StandardToken, Configurable, Ownable { enum Stages { none, icoStart, icoEnd }",1,"subgraph cluster_852_CrowdsaleToken {
label=""CrowdsaleToken"";
""852_startIco"" [label=""startIco""];
""852_endIco"" [label=""endIco""];
""852_constructor"" [label=""constructor""];
""852_finalizeIco"" [label=""finalizeIco""];
""852_fallback"" [label=""fallback""];
""852_startIco"" -> ""852_onlyOwner"";
""852_finalizeIco"" -> ""852_onlyOwner"";
""852_finalizeIco"" -> ""852_endIco"";
}
"
0x32e78bdc108565c3f3811a8dc00da797b6c96dfe.sol,AddressWarsBeta,"contract AddressWarsBeta { address public dev; uint256 constant devTax = 2; uint256 constant enlistingFee = 0; uint256 constant wageringFee = 0; uint256 constant CLAIM_LIMIT = 10; uint256 constant MAX_UNIQUE_CARDS_PER_ADDRESS = 8; uint256 private _seed; enum TYPE { NORMAL, FIRE, WATER, NATURE }",1,"subgraph cluster_4886_AddressWarsBeta {
label=""AddressWarsBeta"";
""4886_wagerCardForAmount"" [label=""wagerCardForAmount""];
""4886_generateCardsFromClaimForOpponent"" [label=""generateCardsFromClaimForOpponent""];
""4886_getAllCardsAddress"" [label=""getAllCardsAddress""];
""4886_withdrawAll"" [label=""withdrawAll""];
""4886_ownerHasCard"" [label=""ownerHasCard""];
""4886_getAllCardsAttack"" [label=""getAllCardsAttack""];
""4886_getAllCardsType"" [label=""getAllCardsType""];
""4886_cancelWagerOfCard"" [label=""cancelWagerOfCard""];
""4886_cardAddressExists"" [label=""cardAddressExists""];
""4886_tmpShuffleSeed"" [label=""tmpShuffleSeed""];
""4886_transferCardTo"" [label=""transferCardTo""];
""4886_tmpQuerySeed"" [label=""tmpQuerySeed""];
""4886_ownerCountOfCard"" [label=""ownerCountOfCard""];
""4886_getAllCardsModifierSecondaryVal"" [label=""getAllCardsModifierSecondaryVal""];
""4886_getAllOwnersClaimPriceOfCard"" [label=""getAllOwnersClaimPriceOfCard""];
""4886_ownerCanClaimCard"" [label=""ownerCanClaimCard""];
""4886_getCard"" [label=""getCard""];
""4886_calculateAdjustedFiguresForBattle"" [label=""calculateAdjustedFiguresForBattle""];
""4886_getAllCardAddressesOfOwner"" [label=""getAllCardAddressesOfOwner""];
""4886_getBalanceOfSender"" [label=""getBalanceOfSender""];
""4886_getAllCardsModifierPrimaryVal"" [label=""getAllCardsModifierPrimaryVal""];
""4886_getTotalUniqueCards"" [label=""getTotalUniqueCards""];
""4886_getAllCardsModifier"" [label=""getAllCardsModifier""];
""4886_getAllCardsClaimContender"" [label=""getAllCardsClaimContender""];
""4886_shuffleSeed"" [label=""shuffleSeed""];
""4886_getAllCardAddressesPriceOfOwner"" [label=""getAllCardAddressesPriceOfOwner""];
""4886_transferCard"" [label=""transferCard""];
""4886_getCardIndexOfOwner"" [label=""getCardIndexOfOwner""];
""4886_getAllOwnersOfCard"" [label=""getAllOwnersOfCard""];
""4886_getAllCardAddressesCountOfOwner"" [label=""getAllCardAddressesCountOfOwner""];
""4886_cumulativeIndexOf"" [label=""cumulativeIndexOf""];
""4886_AddressWarsBeta"" [label=""AddressWarsBeta""];
""4886_getCheapestCardWager"" [label=""getCheapestCardWager""];
""4886_getAllCardsLowestPrice"" [label=""getAllCardsLowestPrice""];
""4886_getAllCardsDefence"" [label=""getAllCardsDefence""];
""4886_getAllCardsForClaim"" [label=""getAllCardsForClaim""];
""4886_indexOfCardAddress"" [label=""indexOfCardAddress""];
""4886_getAllCardsClaimed"" [label=""getAllCardsClaimed""];
""4886_enlist"" [label=""enlist""];
""4886_attemptToClaimCard"" [label=""attemptToClaimCard""];
""4886_withdrawAmount"" [label=""withdrawAmount""];
""4886_getOwnerOfCardsCheapestWager"" [label=""getOwnerOfCardsCheapestWager""];
""4886_updateCardStatistics"" [label=""updateCardStatistics""];
""4886_ownerHasCardSimple"" [label=""ownerHasCardSimple""];
""4886_querySeed"" [label=""querySeed""];
""4886_getCardIndexOfOwner"" -> ""4886_ownerHasCardSimple"";
""4886_getAllOwnersClaimPriceOfCard"" -> ""4886_cardAddressExists"";
""4886_indexOfCardAddress"" -> ""4886_cardAddressExists"";
""4886_transferCard"" -> ""4886_cardAddressExists"";
""4886_AddressWarsBeta"" -> ""4886_shuffleSeed"";
""4886_getCheapestCardWager"" -> ""4886_cardAddressExists"";
""4886_cancelWagerOfCard"" -> ""4886_getOwnerOfCardsCheapestWager"";
""4886_shuffleSeed"" -> ""4886_tmpShuffleSeed"";
""4886_querySeed"" -> ""4886_tmpQuerySeed"";
""4886_generateCardsFromClaimForOpponent"" -> ""4886_ownerHasCardSimple"";
""4886_transferCard"" -> ""4886_ownerHasCardSimple"";
""4886_updateCardStatistics"" -> ""4886_getCheapestCardWager"";
""4886_getAllCardAddressesPriceOfOwner"" -> ""4886_cardAddressExists"";
""4886_ownerCanClaimCard"" -> ""4886_ownerHasCardSimple"";
""4886_attemptToClaimCard"" -> ""4886_generateCardsFromClaimForOpponent"";
""4886_ownerHasCard"" -> ""4886_ownerCountOfCard"";
""4886_enlist"" -> ""4886_tmpQuerySeed"";
""4886_generateCardsFromClaimForOpponent"" -> ""4886_cardAddressExists"";
""4886_getAllCardAddressesCountOfOwner"" -> ""4886_cardAddressExists"";
""4886_attemptToClaimCard"" -> ""4886_transferCard"";
""4886_cancelWagerOfCard"" -> ""4886_updateCardStatistics"";
""4886_ownerCanClaimCard"" -> ""4886_cardAddressExists"";
""4886_wagerCardForAmount"" -> ""4886_updateCardStatistics"";
""4886_attemptToClaimCard"" -> ""4886_ownerCanClaimCard"";
""4886_getAllOwnersOfCard"" -> ""4886_cardAddressExists"";
""4886_getAllCardAddressesPriceOfOwner"" -> ""4886_getOwnerOfCardsCheapestWager"";
""4886_generateCardsFromClaimForOpponent"" -> ""4886_tmpQuerySeed"";
""4886_wagerCardForAmount"" -> ""4886_cardAddressExists"";
""4886_cancelWagerOfCard"" -> ""4886_cardAddressExists"";
""4886_enlist"" -> ""4886_cardAddressExists"";
""4886_attemptToClaimCard"" -> ""4886_updateCardStatistics"";
""4886_transferCardTo"" -> ""4886_transferCard"";
""4886_getCard"" -> ""4886_cardAddressExists"";
""4886_transferCard"" -> ""4886_getCardIndexOfOwner"";
""4886_getAllCardAddressesOfOwner"" -> ""4886_cardAddressExists"";
""4886_tmpQuerySeed"" -> ""4886_tmpShuffleSeed"";
""4886_getOwnerOfCardsCheapestWager"" -> ""4886_ownerHasCard"";
""4886_enlist"" -> ""4886_cumulativeIndexOf"";
""4886_attemptToClaimCard"" -> ""4886_calculateAdjustedFiguresForBattle"";
""4886_generateCardsFromClaimForOpponent"" -> ""4886_tmpShuffleSeed"";
""4886_ownerHasCard"" -> ""4886_cardAddressExists"";
""4886_ownerCanClaimCard"" -> ""4886_getCheapestCardWager"";
""4886_ownerCountOfCard"" -> ""4886_cardAddressExists"";
""4886_ownerHasCardSimple"" -> ""4886_ownerHasCard"";
""4886_enlist"" -> ""4886_tmpShuffleSeed"";
""4886_getCardIndexOfOwner"" -> ""4886_cardAddressExists"";
""4886_transferCard"" -> ""4886_getOwnerOfCardsCheapestWager"";
""4886_getAllCardAddressesCountOfOwner"" -> ""4886_ownerCountOfCard"";
""4886_wagerCardForAmount"" -> ""4886_getOwnerOfCardsCheapestWager"";
}
"
0x1cf6949f4b661018b3195f3ff98effe12f587263.sol,AtlantToken,"contract AtlantToken { string public name = ; string public symbol = ; uint8 public constant decimals = 8; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function AtlantToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_AtlantToken {
label=""AtlantToken"";
""401_transfer"" [label=""transfer""];
""401_transferFrom"" [label=""transferFrom""];
""401_totalSupply"" [label=""totalSupply""];
""401_AtlantToken"" [label=""AtlantToken""];
""401_killContract"" [label=""killContract""];
""401_fallback"" [label=""fallback""];
""401_balanceOf"" [label=""balanceOf""];
""401_mintTo"" [label=""mintTo""];
""401_changeOwner"" [label=""changeOwner""];
""401_approve"" [label=""approve""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
}
"
0x44f12955189e3f01be5daf1dd9002ee4d774f42b.sol,AfterSchoolCrowdsaleToken,"contract AfterSchoolCrowdsaleToken is StandardToken, Ownable { string public standard = ; string public name = ; string public symbol = ; uint public decimals = 18; address public multisig = 0x8Dab59292A76114776B4933aD6F1246Bf647aB90; uint PRICE = 5800; struct ContributorData { uint contributionAmount; uint tokensIssued; }",1,"subgraph cluster_1460_AfterSchoolCrowdsaleToken {
label=""AfterSchoolCrowdsaleToken"";
""1460_setMultisigAddress"" [label=""setMultisigAddress""];
""1460_AfterSchoolCrowdsaleToken"" [label=""AfterSchoolCrowdsaleToken""];
""1460_getPrice"" [label=""getPrice""];
""1460_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""1460_fallback"" [label=""fallback""];
""1460_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""1460_calculateEthToAfterschool"" [label=""calculateEthToAfterschool""];
""1460_createTokens"" [label=""createTokens""];
""1460_transferToContributor"" [label=""transferToContributor""];
""1460_getAmountBonus"" [label=""getAmountBonus""];
""1460_getStageBonus"" [label=""getStageBonus""];
""1460_refundTransaction"" [label=""refundTransaction""];
""1460_calculateEthToAfterschool"" -> ""1460_getStageBonus"";
""1460_setMultisigAddress"" -> ""1460_onlyOwner"";
""1460_createTokens"" -> ""1460_transferToContributor"";
""1460_calculateEthToAfterschool"" -> ""1460_getPrice"";
""1460_fallback"" -> ""1460_refundTransaction"";
""1460_fallback"" -> ""1460_checkCrowdsaleState"";
""1460_calculateEthToAfterschool"" -> ""1460_getAmountBonus"";
""1460_fallback"" -> ""1460_createTokens"";
""1460_createTokens"" -> ""1460_calculateEthToAfterschool"";
""1460_batchReturnEthIfFailed"" -> ""1460_onlyOwner"";
}
"
0xd88577ed936819807612c0d4a17ade05adcdf1d3.sol,ZTRTokenSale,contract ZTRTokenSale { using SafeMath for uint; mapping (address => uint) public balanceOf; mapping (address => uint) public ethBalance; address public owner; address ZTRTokenContract; uint public fundingGoal; uint public fundingMax; uint public amountRaised; uint public start; uint public duration; uint public deadline; uint public unlockTime; uint public ZTR_ETH_initial_price; uint public ZTR_ETH_extra_price; uint public remaining; modifier admin { if (msg.sender == owner) _; },1,"subgraph cluster_544_ZTRTokenSale {
label=""ZTRTokenSale"";
""544_fallback"" [label=""fallback""];
""544_withdrawBeneficiary"" [label=""withdrawBeneficiary""];
""544_setStart"" [label=""setStart""];
""544_withdraw"" [label=""withdraw""];
""544_setDeadline"" [label=""setDeadline""];
""544_ZTRTokenSale"" [label=""ZTRTokenSale""];
""544_suicide"" [label=""suicide""];
""544_withdrawBeneficiary"" -> ""544_afterDeadline"";
""544_withdraw"" -> ""544_afterDeadline"";
""544_suicide"" -> ""544_afterUnlock"";
""544_setDeadline"" -> ""544_admin"";
""544_withdrawBeneficiary"" -> ""544_admin"";
""544_setStart"" -> ""544_admin"";
}
"
0x0002325fcaaac6ebf1254a626589147bde1a2394.sol,HorseyPilot,"contract HorseyPilot { using SafeMath for uint256; event NewProposal(uint8 methodId, uint parameter, address proposer); event ProposalPassed(uint8 methodId, uint parameter, address proposer); uint8 constant votingThreshold = 2; uint256 constant proposalLife = 7 days; uint256 constant proposalCooldown = 1 days; uint256 cooldownStart; address public jokerAddress; address public knightAddress; address public paladinAddress; address[3] public voters; uint8 constant public knightEquity = 40; uint8 constant public paladinEquity = 10; address public exchangeAddress; address public tokenAddress; mapping(address => uint) internal _cBalance; struct Proposal{ address proposer; uint256 timestamp; uint256 parameter; uint8 methodId; address[] yay; address[] nay; }",1,"subgraph cluster_3096_HorseyPilot {
label=""HorseyPilot"";
""3096_transferKnightOwnership"" [label=""transferKnightOwnership""];
""3096__updateDistribution"" [label=""_updateDistribution""];
""3096_voteOnProposal"" [label=""voteOnProposal""];
""3096_constructor"" [label=""constructor""];
""3096_withdrawCeo"" [label=""withdrawCeo""];
""3096_transferJokerOwnership"" [label=""transferJokerOwnership""];
""3096_transferPaladinOwnership"" [label=""transferPaladinOwnership""];
""3096_deployChildren"" [label=""deployChildren""];
""3096_syncFunds"" [label=""syncFunds""];
""3096_getNobleBalance"" [label=""getNobleBalance""];
""3096_makeProposal"" [label=""makeProposal""];
""3096__moveBalance"" [label=""_moveBalance""];
""3096__doProposal"" [label=""_doProposal""];
""3096_transferKnightOwnership"" -> ""3096_validAddress"";
""3096_makeProposal"" -> ""3096_proposalAvailable"";
""3096_makeProposal"" -> ""3096_cooledDown"";
""3096_transferPaladinOwnership"" -> ""3096_validAddress"";
""3096_voteOnProposal"" -> ""3096__doProposal"";
""3096_transferJokerOwnership"" -> ""3096_validAddress"";
""3096_withdrawCeo"" -> ""3096_onlyCLevelAccess"";
""3096_getNobleBalance"" -> ""3096_onlyCLevelAccess"";
""3096_voteOnProposal"" -> ""3096_onlyVoters"";
""3096_voteOnProposal"" -> ""3096_notVoted"";
""3096_makeProposal"" -> ""3096_onlyCLevelAccess"";
""3096_withdrawCeo"" -> ""3096_validAddress"";
""3096_transferPaladinOwnership"" -> ""3096__moveBalance"";
""3096_withdrawCeo"" -> ""3096__updateDistribution"";
""3096__moveBalance"" -> ""3096_validAddress"";
""3096_transferJokerOwnership"" -> ""3096__moveBalance"";
""3096_transferKnightOwnership"" -> ""3096__moveBalance"";
""3096_voteOnProposal"" -> ""3096_proposalPending"";
}
"
0x009ef15c147ff4c0eb373e1abd2f4d184e5cb916.sol,CampaignContract,contract CampaignContract { using SafeMath for uint256; address internal owner; uint256 public minUSD; uint256 public maxUSD; uint256 public maxContribution; uint256 public minContribution; struct KYCObject { bytes32 phone; bytes32 name; bytes32 occupation; bytes32 addressOne; bytes32 addressTwo; },1,"subgraph cluster_1022_CampaignContract {
label=""CampaignContract"";
""1022_getName"" [label=""getName""];
""1022_retrieveAssets"" [label=""retrieveAssets""];
""1022_changeOwner"" [label=""changeOwner""];
""1022_getAmountContributed"" [label=""getAmountContributed""];
""1022_getAddressTwo"" [label=""getAddressTwo""];
""1022_acceptContribution"" [label=""acceptContribution""];
""1022_getOccupation"" [label=""getOccupation""];
""1022_CampaignContract"" [label=""CampaignContract""];
""1022_getAmountAttempted"" [label=""getAmountAttempted""];
""1022_getPhone"" [label=""getPhone""];
""1022_getPotentialAmount"" [label=""getPotentialAmount""];
""1022_killContract"" [label=""killContract""];
""1022_rejectContribution"" [label=""rejectContribution""];
""1022_getAddressOne"" [label=""getAddressOne""];
""1022_withdrawToWallet"" [label=""withdrawToWallet""];
""1022_contribute"" [label=""contribute""];
""1022_resetKYC"" [label=""resetKYC""];
""1022_verifyKYC"" [label=""verifyKYC""];
""1022_withdrawContribution"" [label=""withdrawContribution""];
""1022_changeLimits"" [label=""changeLimits""];
""1022_retrieveAssets"" -> ""1022_onlyOwner"";
""1022_changeLimits"" -> ""1022_onlyOwner"";
""1022_rejectContribution"" -> ""1022_onlyOwner"";
""1022_withdrawToWallet"" -> ""1022_onlyOwner"";
""1022_acceptContribution"" -> ""1022_onlyOwner"";
""1022_killContract"" -> ""1022_onlyOwner"";
""1022_resetKYC"" -> ""1022_hasKYCInfo"";
""1022_resetKYC"" -> ""1022_onlyOwner"";
""1022_acceptContribution"" -> ""1022_hasKYCInfo"";
""1022_withdrawContribution"" -> ""1022_hasKYCInfo"";
""1022_contribute"" -> ""1022_hasKYCInfo"";
""1022_changeOwner"" -> ""1022_onlyOwner"";
}
"
0x0dcb6d4a156206da89177aa53c891e5a87d9da45.sol,ALFA_Quiz,contract ALFA_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ALFA_Quiz {
label=""ALFA_Quiz"";
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x35b5abaedeed12c63e04029120fa6bb084342b4d.sol,BLITZ_GAME,contract BLITZ_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_BLITZ_GAME {
label=""BLITZ_GAME"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_set_game"" [label=""set_game""];
""132_Try"" [label=""Try""];
}
"
0x70bf9df6967dc96156e76cc43b928a7ef02e159a.sol,X_GAME,contract X_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_X_GAME {
label=""X_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_StopGame"" [label=""StopGame""];
}
"
0x0838524d3ba16e7f9433ab7f914847f1d38b53e8.sol,RTDAirDrop,"contract RTDAirDrop is owned { address public token_address; string public detail; string public website; event AirDropCoin(address target, uint256 amount); constructor() public { owner = msg.sender; }",1,"subgraph cluster_136_RTDAirDrop {
label=""RTDAirDrop"";
""136_fallback"" [label=""fallback""];
""136_setDetail"" [label=""setDetail""];
""136_setWebsite"" [label=""setWebsite""];
""136_constructor"" [label=""constructor""];
""136_setToken"" [label=""setToken""];
""136_airDrop"" [label=""airDrop""];
""136_withdrawEther"" [label=""withdrawEther""];
""136_setDetail"" -> ""136_onlyOwner"";
""136_withdrawEther"" -> ""136_onlyOwner"";
""136_airDrop"" -> ""136_onlyOwner"";
""136_setToken"" -> ""136_onlyOwner"";
""136_setWebsite"" -> ""136_onlyOwner"";
}
"
0x72f1295238a6a0d95631ad9f81b829c486861057.sol,Simpl_quiz,contract Simpl_quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Simpl_quiz {
label=""Simpl_quiz"";
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x9adc8a707ee86497461472c4055e039d99e70d6d.sol,Iou_Token,"contract Iou_Token is ERC20Interface { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public constant maxTokens = 800*10**6*10**18; uint256 public constant ownerSupply = maxTokens*30/100; uint256 _totalSupply = ownerSupply; uint256 public constant token_price = 10**18*1/800; uint256 public pre_ico_start = 1528416000; uint256 public ico_start = 1531008000; uint256 public ico_finish = 1541635200; uint public constant minValuePre = 10**18*1/1000000; uint public constant minValue = 10**18*1/1000000; uint public constant maxValue = 3000*10**18; uint public coef = 102; using SafeMath for uint; address public owner; address public moderator; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; mapping(address => uint256) public orders_sell_amount; mapping(address => uint256) public orders_sell_price; address[] public orders_sell_list; event Order_sell(address indexed _owner, uint256 _max_amount, uint256 _price); event Order_execute(address indexed _from, address indexed _to, uint256 _amount, uint256 _price); modifier onlyOwner() { if (msg.sender != owner) { throw; }",1,"subgraph cluster_1550_Iou_Token {
label=""Iou_Token"";
""1550_balanceOf"" [label=""balanceOf""];
""1550_transferFrom"" [label=""transferFrom""];
""1550_get_orders_sell_amount"" [label=""get_orders_sell_amount""];
""1550_approve"" [label=""approve""];
""1550_orders_sell_total"" [label=""orders_sell_total""];
""1550_order_sell"" [label=""order_sell""];
""1550_changeModerator"" [label=""changeModerator""];
""1550_fallback"" [label=""fallback""];
""1550_change_pre_ico_start"" [label=""change_pre_ico_start""];
""1550_change_coef"" [label=""change_coef""];
""1550_change_ico_start"" [label=""change_ico_start""];
""1550_totalSupply"" [label=""totalSupply""];
""1550_withdraw"" [label=""withdraw""];
""1550_order_buy"" [label=""order_buy""];
""1550_changeOwner"" [label=""changeOwner""];
""1550_tokens_buy"" [label=""tokens_buy""];
""1550_transfer"" [label=""transfer""];
""1550_allowance"" [label=""allowance""];
""1550_change_ico_finish"" [label=""change_ico_finish""];
""1550_Iou_Token"" [label=""Iou_Token""];
""1550_order_buy"" -> ""1550_get_orders_sell_amount"";
""1550_change_ico_start"" -> ""1550_onlyModerator"";
""1550_fallback"" -> ""1550_tokens_buy"";
""1550_change_coef"" -> ""1550_onlyOwner"";
""1550_withdraw"" -> ""1550_onlyOwner"";
""1550_get_orders_sell_amount"" -> ""1550_balanceOf"";
""1550_changeModerator"" -> ""1550_onlyOwner"";
""1550_change_ico_finish"" -> ""1550_onlyModerator"";
""1550_change_pre_ico_start"" -> ""1550_onlyModerator"";
""1550_changeOwner"" -> ""1550_onlyOwner"";
}
"
0x01d28329619796bae733e849696f80a764422700.sol,Token,contract Token is TokenI { using SafeMath for uint256; address public owner; uint256 public maximumToken = 10 * 10**8 * 10**18; struct FreezeInfo { address user; uint256 amount; },1,"subgraph cluster_1057_Token {
label=""Token"";
""1057_transferFrom"" [label=""transferFrom""];
""1057_enableTransfers"" [label=""enableTransfers""];
""1057_changeOwner"" [label=""changeOwner""];
""1057_approveAndCall"" [label=""approveAndCall""];
""1057_unFreeze"" [label=""unFreeze""];
""1057_fallback"" [label=""fallback""];
""1057_transfer"" [label=""transfer""];
""1057_claimTokens"" [label=""claimTokens""];
""1057_generateTokens"" [label=""generateTokens""];
""1057_freeze"" [label=""freeze""];
""1057_balanceOf"" [label=""balanceOf""];
""1057_Token"" [label=""Token""];
""1057_approve"" [label=""approve""];
""1057_isContract"" [label=""isContract""];
""1057_destroyTokens"" [label=""destroyTokens""];
""1057_fallback"" -> ""1057_isContract"";
""1057_transfer"" -> ""1057_moreThanZero"";
""1057_transferFrom"" -> ""1057_realUser"";
""1057_freeze"" -> ""1057_moreThanZero"";
""1057_approve"" -> ""1057_moreThanZero"";
""1057_freeze"" -> ""1057_onlyController"";
""1057_generateTokens"" -> ""1057_onlyController"";
""1057_enableTransfers"" -> ""1057_onlyController"";
""1057_approveAndCall"" -> ""1057_approve"";
""1057_claimTokens"" -> ""1057_onlyController"";
""1057_unFreeze"" -> ""1057_onlyController"";
""1057_transfer"" -> ""1057_realUser"";
""1057_destroyTokens"" -> ""1057_onlyController"";
""1057_transferFrom"" -> ""1057_moreThanZero"";
""1057_changeOwner"" -> ""1057_onlyOwner"";
}
"
0xd871a7ce9bcf9cfbefbca3ede0ce53ba1787dfc9.sol,try_to_play,contract try_to_play { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_try_to_play {
label=""try_to_play"";
""143_NewQuestion"" [label=""NewQuestion""];
""143_fallback"" [label=""fallback""];
""143_StopGame"" [label=""StopGame""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
""143_ActivateContract"" [label=""ActivateContract""];
}
"
0x6a3cfb5aeefb9138a28b28f3852a8fee81216df3.sol,RxEALSaleContract,"contract RxEALSaleContract { using SafeMath for uint256; RxEALTokenContract public token; uint256 public startTime = 1520856000; uint256 public endTime = 1523448000; address public wallet1 = 0x56E4e5d451dF045827e214FE10bBF99D730d9683; address public wallet2 = 0x8C0988711E60CfF153359Ab6CFC8d45565C6ce79; address public wallet3 = 0x0EdF5c34ddE2573f162CcfEede99EeC6aCF1c2CB; address public wallet4 = 0xcBdC5eE000f77f3bCc0eFeF0dc47d38911CBD45B; uint256 public tier_rate_1 = 1800; uint256 public tier_cap_1 = 4800000; uint256 public tier_rate_2 = 1440; uint256 public tier_cap_2 = 14400000; uint256 public tier_rate_3 = 1320; uint256 public tier_cap_3 = 14400000; uint256 public tier_rate_4 = 1200; uint256 public tier_cap_4 = 14400000; uint256 public hard_cap; uint8 public current_tier = 1; uint256 public weiRaised; uint256 public soldTokens; uint256 public current_tier_sold_tokens; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 tokens); function RxEALSaleContract() { token = RxEALTokenContract(0xD6682Db9106e0cfB530B697cA0EcDC8F5597CD15); tier_cap_1 = tier_cap_1 * (10 ** token.decimals()); tier_cap_2 = tier_cap_2 * (10 ** token.decimals()); tier_cap_3 = tier_cap_3 * (10 ** token.decimals()); tier_cap_4 = tier_cap_4 * (10 ** token.decimals()); hard_cap = tier_cap_1 + tier_cap_2 + tier_cap_3 + tier_cap_4; }",1,"subgraph cluster_1190_RxEALSaleContract {
label=""RxEALSaleContract"";
""1190_validPurchase"" [label=""validPurchase""];
""1190_fallback"" [label=""fallback""];
""1190_RxEALSaleContract"" [label=""RxEALSaleContract""];
""1190_tier_action"" [label=""tier_action""];
""1190_forwardFunds"" [label=""forwardFunds""];
""1190_hasEnded"" [label=""hasEnded""];
""1190_buyTokens"" [label=""buyTokens""];
""1190_fallback"" -> ""1190_buyTokens"";
""1190_buyTokens"" -> ""1190_forwardFunds"";
""1190_buyTokens"" -> ""1190_tier_action"";
""1190_buyTokens"" -> ""1190_validPurchase"";
}
"
0x65171746deb1d6eee256455f77c350eceda34ae2.sol,AgroNest,"contract AgroNest is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 10000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 10000000e18; uint public target0drop = 1000; uint public progress0drop = 0; address multisig = 0x37351E066e89621B0356b970be2C7e3CAE979a9D ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_AgroNest {
label=""AgroNest"";
""1261_distr"" [label=""distr""];
""1261_fallback"" [label=""fallback""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_withdraw"" [label=""withdraw""];
""1261_constructor"" [label=""constructor""];
""1261_Distribute"" [label=""Distribute""];
""1261_allowance"" [label=""allowance""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_add"" [label=""add""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_getTokens"" [label=""getTokens""];
""1261_approve"" [label=""approve""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_transfer"" [label=""transfer""];
""1261_burn"" [label=""burn""];
""1261_constructor"" -> ""1261_distr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_getTokens"" -> ""1261_distr"";
}
"
0x87cdabc87128476d84462eb9c5a67a7acfa7889e.sol,RefundEscrow,"contract RefundEscrow is Ownable, ConditionalEscrow { enum State { Active, Refunding, Closed }",1,"subgraph cluster_512_RefundEscrow {
label=""RefundEscrow"";
""512_beneficiaryWithdraw"" [label=""beneficiaryWithdraw""];
""512_close"" [label=""close""];
""512_deposit"" [label=""deposit""];
""512_enableRefunds"" [label=""enableRefunds""];
""512_constructor"" [label=""constructor""];
""512_withdrawalAllowed"" [label=""withdrawalAllowed""];
""512_enableRefunds"" -> ""512_onlyOwner"";
""512_deposit"" -> ""512_deposit"";
""512_close"" -> ""512_onlyOwner"";
}
"
0x35d76c3db8e826907d2a977500b54b3914ecc020.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_784_RefundVault {
label=""RefundVault"";
""784_refund"" [label=""refund""];
""784_RefundVault"" [label=""RefundVault""];
""784_enableRefunds"" [label=""enableRefunds""];
""784_deposit"" [label=""deposit""];
""784_close"" [label=""close""];
""784_enableRefunds"" -> ""784_onlyOwner"";
""784_close"" -> ""784_onlyOwner"";
""784_deposit"" -> ""784_onlyOwner"";
}
"
0x7275f61c3abfba3596ae71f7128bdc3b0fc01fa9.sol,Ownable,contract Ownable { address public owner; address public bot; function Ownable() public { owner = msg.sender; },1,"subgraph cluster_78_Ownable {
label=""Ownable"";
""78_kill"" [label=""kill""];
""78_changeBot"" [label=""changeBot""];
""78_Ownable"" [label=""Ownable""];
""78_changeOwner"" [label=""changeOwner""];
""78_changeOwner"" -> ""78_onlyOwner"";
""78_kill"" -> ""78_onlyOwner"";
""78_changeBot"" -> ""78_onlyOwner"";
}
"
0xece0429a5130ebe0616363939067eefca4fbaceb.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1095_MiniMeToken {
label=""MiniMeToken"";
""1095_balanceOfAt"" [label=""balanceOfAt""];
""1095_MiniMeToken"" [label=""MiniMeToken""];
""1095_destroyTokens"" [label=""destroyTokens""];
""1095_isContract"" [label=""isContract""];
""1095_fallback"" [label=""fallback""];
""1095_totalSupplyAt"" [label=""totalSupplyAt""];
""1095_createCloneToken"" [label=""createCloneToken""];
""1095_getValueAt"" [label=""getValueAt""];
""1095_allowance"" [label=""allowance""];
""1095_transferFrom"" [label=""transferFrom""];
""1095_enableTransfers"" [label=""enableTransfers""];
""1095_doTransfer"" [label=""doTransfer""];
""1095_transfer"" [label=""transfer""];
""1095_approve"" [label=""approve""];
""1095_min"" [label=""min""];
""1095_approveAndCall"" [label=""approveAndCall""];
""1095_balanceOf"" [label=""balanceOf""];
""1095_generateTokens"" [label=""generateTokens""];
""1095_claimTokens"" [label=""claimTokens""];
""1095_totalSupply"" [label=""totalSupply""];
""1095_updateValueAtNow"" [label=""updateValueAtNow""];
""1095_generateTokens"" -> ""1095_totalSupply"";
""1095_approve"" -> ""1095_isContract"";
""1095_transferFrom"" -> ""1095_doTransfer"";
""1095_transfer"" -> ""1095_doTransfer"";
""1095_balanceOfAt"" -> ""1095_getValueAt"";
""1095_totalSupplyAt"" -> ""1095_getValueAt"";
""1095_claimTokens"" -> ""1095_onlyController"";
""1095_approveAndCall"" -> ""1095_approve"";
""1095_doTransfer"" -> ""1095_balanceOfAt"";
""1095_destroyTokens"" -> ""1095_onlyController"";
""1095_totalSupply"" -> ""1095_totalSupplyAt"";
""1095_doTransfer"" -> ""1095_isContract"";
""1095_destroyTokens"" -> ""1095_totalSupply"";
""1095_fallback"" -> ""1095_isContract"";
""1095_generateTokens"" -> ""1095_onlyController"";
""1095_totalSupplyAt"" -> ""1095_min"";
""1095_generateTokens"" -> ""1095_updateValueAtNow"";
""1095_generateTokens"" -> ""1095_balanceOf"";
""1095_balanceOfAt"" -> ""1095_min"";
""1095_destroyTokens"" -> ""1095_updateValueAtNow"";
""1095_enableTransfers"" -> ""1095_onlyController"";
""1095_doTransfer"" -> ""1095_updateValueAtNow"";
""1095_destroyTokens"" -> ""1095_balanceOf"";
""1095_balanceOf"" -> ""1095_balanceOfAt"";
}
"
0x347925b22d0217a4797f470faa2afebbdb150b7a.sol,Nanotechnology,"contract Nanotechnology is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 860000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 2000000e1; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0x5F6557aF8922D4031Ae506d2F02595039D16Ab5a; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Nanotechnology {
label=""Nanotechnology"";
""1261_withdraw"" [label=""withdraw""];
""1261_distr"" [label=""distr""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_add"" [label=""add""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_constructor"" [label=""constructor""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_transfer"" [label=""transfer""];
""1261_getTokens"" [label=""getTokens""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_burn"" [label=""burn""];
""1261_Distribute"" [label=""Distribute""];
""1261_allowance"" [label=""allowance""];
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_add"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
}
"
0xf0a0116885943f5466cb50ed8cf50b15b3d45801.sol,EthercraftFarm,"contract EthercraftFarm is Ownable, ReentrancyGuard, Destructible, TokenDestructible, Pausable { using SafeMath for uint8; using SafeMath for uint256; event Prepped(address indexed shop, address indexed object, uint256 iterations); event Reapped(address indexed object, uint256 balance); mapping (address => mapping (address => uint256)) public balanceOfToken; mapping (address => uint256) public totalOfToken; function() payable public { }",1,"subgraph cluster_687_EthercraftFarm {
label=""EthercraftFarm"";
""687_totalOfToken"" [label=""totalOfToken""];
""687_prep"" [label=""prep""];
""687_fallback"" [label=""fallback""];
""687_reap"" [label=""reap""];
""687_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""687_prep"" -> ""687_whenNotPaused"";
""687_prep"" -> ""687_nonReentrant"";
""687_reap"" -> ""687_nonReentrant"";
""687_transferAnyERC20Token"" -> ""687_onlyOwner"";
}
"
0xf17a9ad24372faaa27f0bb684e13413a3de84c4b.sol,SmokeCoinV_2,"contract SmokeCoinV_2 is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 200 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 150 * 1 days; uint256 public totalSupply = 754654e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 22220000000; uint public target0drop = 4222; uint public progress0drop = 0; address multisig = 0xb7Ef2B8514A27bf63e8F5397Fd6DBDCa95809883; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_SmokeCoinV_2 {
label=""SmokeCoinV_2"";
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_getTokens"" [label=""getTokens""];
""1263_transfer"" [label=""transfer""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_burn"" [label=""burn""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_constructor"" [label=""constructor""];
""1263_Distribute"" [label=""Distribute""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_approve"" [label=""approve""];
""1263_fallback"" [label=""fallback""];
""1263_allowance"" [label=""allowance""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_withdraw"" [label=""withdraw""];
""1263_add"" [label=""add""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_distr"" [label=""distr""];
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_getTokens"" -> ""1263_distr"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_constructor"" -> ""1263_distr"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
}
"
0x1c3bed5bd4b0e6a8389efd0d2876f948a907ab5b.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1092_MiniMeToken {
label=""MiniMeToken"";
""1092_balanceOfAt"" [label=""balanceOfAt""];
""1092_allowance"" [label=""allowance""];
""1092_generateTokens"" [label=""generateTokens""];
""1092_transfer"" [label=""transfer""];
""1092_getValueAt"" [label=""getValueAt""];
""1092_approve"" [label=""approve""];
""1092_createCloneToken"" [label=""createCloneToken""];
""1092_min"" [label=""min""];
""1092_transferFrom"" [label=""transferFrom""];
""1092_totalSupply"" [label=""totalSupply""];
""1092_isContract"" [label=""isContract""];
""1092_claimTokens"" [label=""claimTokens""];
""1092_balanceOf"" [label=""balanceOf""];
""1092_MiniMeToken"" [label=""MiniMeToken""];
""1092_totalSupplyAt"" [label=""totalSupplyAt""];
""1092_fallback"" [label=""fallback""];
""1092_approveAndCall"" [label=""approveAndCall""];
""1092_enableTransfers"" [label=""enableTransfers""];
""1092_updateValueAtNow"" [label=""updateValueAtNow""];
""1092_destroyTokens"" [label=""destroyTokens""];
""1092_doTransfer"" [label=""doTransfer""];
""1092_destroyTokens"" -> ""1092_totalSupply"";
""1092_approve"" -> ""1092_isContract"";
""1092_balanceOfAt"" -> ""1092_min"";
""1092_doTransfer"" -> ""1092_isContract"";
""1092_generateTokens"" -> ""1092_onlyController"";
""1092_generateTokens"" -> ""1092_updateValueAtNow"";
""1092_doTransfer"" -> ""1092_updateValueAtNow"";
""1092_totalSupplyAt"" -> ""1092_getValueAt"";
""1092_enableTransfers"" -> ""1092_onlyController"";
""1092_destroyTokens"" -> ""1092_updateValueAtNow"";
""1092_totalSupply"" -> ""1092_totalSupplyAt"";
""1092_transferFrom"" -> ""1092_doTransfer"";
""1092_claimTokens"" -> ""1092_onlyController"";
""1092_balanceOf"" -> ""1092_balanceOfAt"";
""1092_generateTokens"" -> ""1092_balanceOf"";
""1092_doTransfer"" -> ""1092_balanceOfAt"";
""1092_approveAndCall"" -> ""1092_approve"";
""1092_destroyTokens"" -> ""1092_balanceOf"";
""1092_fallback"" -> ""1092_isContract"";
""1092_transfer"" -> ""1092_doTransfer"";
""1092_destroyTokens"" -> ""1092_onlyController"";
""1092_generateTokens"" -> ""1092_totalSupply"";
""1092_balanceOfAt"" -> ""1092_getValueAt"";
""1092_totalSupplyAt"" -> ""1092_min"";
}
"
0x01d28329619796bae733e849696f80a764422700.sol,Token,contract Token is TokenI { using SafeMath for uint256; address public owner; uint256 public maximumToken = 10 * 10**8 * 10**18; struct FreezeInfo { address user; uint256 amount; },1,"subgraph cluster_1057_Token {
label=""Token"";
""1057_transferFrom"" [label=""transferFrom""];
""1057_enableTransfers"" [label=""enableTransfers""];
""1057_changeOwner"" [label=""changeOwner""];
""1057_approveAndCall"" [label=""approveAndCall""];
""1057_unFreeze"" [label=""unFreeze""];
""1057_fallback"" [label=""fallback""];
""1057_transfer"" [label=""transfer""];
""1057_claimTokens"" [label=""claimTokens""];
""1057_generateTokens"" [label=""generateTokens""];
""1057_freeze"" [label=""freeze""];
""1057_balanceOf"" [label=""balanceOf""];
""1057_Token"" [label=""Token""];
""1057_approve"" [label=""approve""];
""1057_isContract"" [label=""isContract""];
""1057_destroyTokens"" [label=""destroyTokens""];
""1057_fallback"" -> ""1057_isContract"";
""1057_transfer"" -> ""1057_moreThanZero"";
""1057_transferFrom"" -> ""1057_realUser"";
""1057_freeze"" -> ""1057_moreThanZero"";
""1057_approve"" -> ""1057_moreThanZero"";
""1057_freeze"" -> ""1057_onlyController"";
""1057_generateTokens"" -> ""1057_onlyController"";
""1057_enableTransfers"" -> ""1057_onlyController"";
""1057_approveAndCall"" -> ""1057_approve"";
""1057_claimTokens"" -> ""1057_onlyController"";
""1057_unFreeze"" -> ""1057_onlyController"";
""1057_transfer"" -> ""1057_realUser"";
""1057_destroyTokens"" -> ""1057_onlyController"";
""1057_transferFrom"" -> ""1057_moreThanZero"";
""1057_changeOwner"" -> ""1057_onlyOwner"";
}
"
0x0dd88f1d1cbc9bcdda5ddd9e9fc86e8183f8f3b9.sol,XenoxCoin,"contract XenoxCoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 100000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000e18; uint public target0drop = 1000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event DistrRestarted(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1274_XenoxCoin {
label=""XenoxCoin"";
""1274_transferOwnership"" [label=""transferOwnership""];
""1274_getTokens"" [label=""getTokens""];
""1274_finishDistribution"" [label=""finishDistribution""];
""1274_reDistribution"" [label=""reDistribution""];
""1274_constructor"" [label=""constructor""];
""1274_withdraw"" [label=""withdraw""];
""1274_allowance"" [label=""allowance""];
""1274_balanceOf"" [label=""balanceOf""];
""1274_getTokenBalance"" [label=""getTokenBalance""];
""1274_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1274_transfer"" [label=""transfer""];
""1274_approve"" [label=""approve""];
""1274_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1274_Distribute"" [label=""Distribute""];
""1274_withdrawAll"" [label=""withdrawAll""];
""1274_burn"" [label=""burn""];
""1274_add"" [label=""add""];
""1274_distr"" [label=""distr""];
""1274_fallback"" [label=""fallback""];
""1274_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1274_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1274_transferFrom"" [label=""transferFrom""];
""1274_finishDistribution"" -> ""1274_onlyOwner"";
""1274_distr"" -> ""1274_canDistr"";
""1274_burn"" -> ""1274_onlyOwner"";
""1274_withdrawForeignTokens"" -> ""1274_onlyOwner"";
""1274_updateTokensPerEth"" -> ""1274_onlyOwner"";
""1274_constructor"" -> ""1274_distr"";
""1274_transferOwnership"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_canDistr"";
""1274_withdrawAll"" -> ""1274_onlyOwner"";
""1274_Distribute"" -> ""1274_onlyOwner"";
""1274_fallback"" -> ""1274_getTokens"";
""1274_getTokens"" -> ""1274_distr"";
""1274_DistributeAirdrop"" -> ""1274_onlyOwner"";
""1274_transfer"" -> ""1274_onlyPayloadSize"";
""1274_DistributeAirdropMultiple"" -> ""1274_Distribute"";
""1274_finishDistribution"" -> ""1274_canDistr"";
""1274_reDistribution"" -> ""1274_onlyOwner"";
""1274_withdraw"" -> ""1274_onlyOwner"";
""1274_add"" -> ""1274_onlyOwner"";
""1274_transferFrom"" -> ""1274_onlyPayloadSize"";
""1274_DistributeAirdropMultiple"" -> ""1274_onlyOwner"";
""1274_DistributeAirdrop"" -> ""1274_Distribute"";
""1274_reDistribution"" -> ""1274_canDistr"";
}
"
0xd3a97d46fd0c28a5a035a4e0813afe7c2c1376bd.sol,InterCrypto,"contract InterCrypto is Ownable, myUsingOracalize { struct Transaction { address returnAddress; uint amount; }",1,"subgraph cluster_1446_InterCrypto {
label=""InterCrypto"";
""1446___callback"" [label=""__callback""];
""1446_kill"" [label=""kill""];
""1446_nibbleToChar"" [label=""nibbleToChar""];
""1446_InterCrypto"" [label=""InterCrypto""];
""1446_recover"" [label=""recover""];
""1446_concatBytes"" [label=""concatBytes""];
""1446_fallback"" [label=""fallback""];
""1446_cancelTransaction"" [label=""cancelTransaction""];
""1446_sendToOtherBlockchain1"" [label=""sendToOtherBlockchain1""];
""1446_getInterCryptoPrice"" [label=""getInterCryptoPrice""];
""1446_engine"" [label=""engine""];
""1446_sendToOtherBlockchain2"" [label=""sendToOtherBlockchain2""];
""1446_isValidateParameter"" [label=""isValidateParameter""];
""1446_createShapeShiftTransactionPost"" [label=""createShapeShiftTransactionPost""];
""1446_addressToBytes"" [label=""addressToBytes""];
""1446_createShapeShiftTransactionPost"" -> ""1446_addressToBytes"";
""1446_engine"" -> ""1446_oraclize_query"";
""1446_engine"" -> ""1446_getInterCryptoPrice"";
""1446_sendToOtherBlockchain1"" -> ""1446_engine"";
""1446_createShapeShiftTransactionPost"" -> ""1446_concatBytes"";
""1446___callback"" -> ""1446_parseAddr"";
""1446_addressToBytes"" -> ""1446_nibbleToChar"";
""1446_sendToOtherBlockchain2"" -> ""1446_engine"";
""1446_engine"" -> ""1446_isValidateParameter"";
""1446_getInterCryptoPrice"" -> ""1446_oraclize_getPrice"";
""1446_kill"" -> ""1446_onlyOwner"";
""1446_engine"" -> ""1446_createShapeShiftTransactionPost"";
}
"
0xee58ee0b1519bb47801812a3a9c83ab600c63d81.sol,MerchantWallet,"contract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted { string constant VERSION = ; address public merchantAccount; address public merchantFundAddress; bytes32 public merchantIdHash; mapping (string=>string) profileMap; mapping (string=>string) paymentSettingsMap; mapping (string=>uint32) compositeReputationMap; uint8 public constant REPUTATION_DECIMALS = 4; modifier onlyMerchant() { require(msg.sender == merchantAccount); _; }",1,"subgraph cluster_996_MerchantWallet {
label=""MerchantWallet"";
""996_profile"" [label=""profile""];
""996_merchantIdHash"" [label=""merchantIdHash""];
""996_withdrawTo"" [label=""withdrawTo""];
""996_withdrawAllToExchange"" [label=""withdrawAllToExchange""];
""996_setCompositeReputation"" [label=""setCompositeReputation""];
""996_withdrawToExchange"" [label=""withdrawToExchange""];
""996_compositeReputation"" [label=""compositeReputation""];
""996_merchantFundAddress"" [label=""merchantFundAddress""];
""996_setPaymentSettings"" [label=""setPaymentSettings""];
""996_setProfile"" [label=""setProfile""];
""996_changeFundAddress"" [label=""changeFundAddress""];
""996_fallback"" [label=""fallback""];
""996_MerchantWallet"" [label=""MerchantWallet""];
""996_doWithdrawal"" [label=""doWithdrawal""];
""996_withdraw"" [label=""withdraw""];
""996_changeMerchantAccount"" [label=""changeMerchantAccount""];
""996_paymentSettings"" [label=""paymentSettings""];
""996_withdrawAllToExchange"" -> ""996_whenNotPaused"";
""996_changeFundAddress"" -> ""996_isEOA"";
""996_changeMerchantAccount"" -> ""996_whenNotPaused"";
""996_withdrawTo"" -> ""996_whenNotPaused"";
""996_withdraw"" -> ""996_onlyMerchant"";
""996_setPaymentSettings"" -> ""996_onlyOwner"";
""996_withdrawToExchange"" -> ""996_doWithdrawal"";
""996_changeFundAddress"" -> ""996_onlyMerchant"";
""996_setProfile"" -> ""996_onlyOwner"";
""996_withdrawTo"" -> ""996_onlyMerchant"";
""996_setCompositeReputation"" -> ""996_onlyMonetha"";
""996_withdrawAllToExchange"" -> ""996_onlyMerchantOrMonetha"";
""996_withdraw"" -> ""996_withdrawTo"";
""996_MerchantWallet"" -> ""996_isEOA"";
""996_withdrawAllToExchange"" -> ""996_doWithdrawal"";
""996_withdrawToExchange"" -> ""996_whenNotPaused"";
""996_changeMerchantAccount"" -> ""996_onlyMerchant"";
""996_withdrawTo"" -> ""996_doWithdrawal"";
""996_withdrawToExchange"" -> ""996_onlyMerchantOrMonetha"";
}
"
0x0232ba609782cea145ec3663f52cf7aeb4ac773c.sol,Withdrawable,"contract Withdrawable is PermissionGroups { event TokenWithdraw(ERC20 token, uint amount, address sendTo); function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin { require(token.transfer(sendTo, amount)); TokenWithdraw(token, amount, sendTo); }",1,"subgraph cluster_856_Withdrawable {
label=""Withdrawable"";
""856_withdrawEther"" [label=""withdrawEther""];
""856_withdrawToken"" [label=""withdrawToken""];
""856_withdrawToken"" -> ""856_onlyAdmin"";
""856_withdrawEther"" -> ""856_onlyAdmin"";
}
"
0x5085c5356129ee11bffb523e3166d7153ac13c75.sol,Casino,"contract Casino is Ownable, HouseAdmin { using SafeMath for uint; uint constant HOUSE_EDGE_PERCENT = 1; uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0003 ether; uint constant BET_AMOUNT_MIN = 0.01 ether; uint constant BET_AMOUNT_MAX = 1000 ether; uint constant BET_EXPIRATION_BLOCKS = 250; uint constant MAX_MASKABLE_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASKABLE_MODULO; uint constant POPCOUNT_MULT = 0x0000000000002000000000100000000008000000000400000000020000000001; uint constant POPCOUNT_MASK = 0x0001041041041041041041041041041041041041041041041041041041041041; uint constant POPCOUNT_MODULO = 0x3F; uint public bankFund; struct Bet { uint8 modulo; uint64 choice; uint amount; uint winAmount; uint placeBlockNumber; bool isActive; address player; }",1,"subgraph cluster_960_Casino {
label=""Casino"";
""960_closeBet"" [label=""closeBet""];
""960_getAvailableBalance"" [label=""getAvailableBalance""];
""960_recharge"" [label=""recharge""];
""960_constructor"" [label=""constructor""];
""960_placeBet"" [label=""placeBet""];
""960_withdraw"" [label=""withdraw""];
""960_refundBet"" [label=""refundBet""];
""960_closeBet"" -> ""960_onlyCroupier"";
""960_withdraw"" -> ""960_onlyOwner"";
""960_refundBet"" -> ""960_onlyCroupier"";
}
"
0x70d0907b064ab5c86849d391124f62ce9bcbf597.sol,Fastbitcoin,"contract Fastbitcoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 99 * 1 days; uint public round2 = now + 15 * 1 days; uint public round1 = now + 5 * 1 days; uint256 public totalSupply = 100000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 10000; uint256 public tokensPerEth = 2500000e8; uint public target0drop = 4000; uint public progress0drop = 0; address multisig = 0x25CB79CB502E58697C47e8cD29411fc4250879a6; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Fastbitcoin {
label=""Fastbitcoin"";
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_constructor"" [label=""constructor""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_approve"" [label=""approve""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_allowance"" [label=""allowance""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokens"" [label=""getTokens""];
""1261_add"" [label=""add""];
""1261_fallback"" [label=""fallback""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_transfer"" [label=""transfer""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_burn"" [label=""burn""];
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
}
"
0x496676b297799eeb9446b9d808c6051d33c6cb58.sol,the_game,contract the_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_the_game {
label=""the_game"";
""143_Try"" [label=""Try""];
""143_StopGame"" [label=""StopGame""];
""143_fallback"" [label=""fallback""];
""143_Activate"" [label=""Activate""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_newQuestioner"" [label=""newQuestioner""];
}
"
0x549b38e8e5fb1ba4acd4187d8b7c8a04deb53206.sol,LotteryAdmin,"contract LotteryAdmin { address public owner; address public admin; address public proposedOwner; address public ethereumLottery; uint public dailyAdminAllowance; uint public lastAllowancePaymentTimestamp; uint public nextProfile; event Deposit(address indexed _from, uint _value); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_282_LotteryAdmin {
label=""LotteryAdmin"";
""282_setLottery"" [label=""setLottery""];
""282_destruct"" [label=""destruct""];
""282_proposeOwner"" [label=""proposeOwner""];
""282_setConfiguration"" [label=""setConfiguration""];
""282_withdraw"" [label=""withdraw""];
""282_allowsAllowance"" [label=""allowsAllowance""];
""282_acceptOwnership"" [label=""acceptOwnership""];
""282_requestAllowance"" [label=""requestAllowance""];
""282_needsInitialization"" [label=""needsInitialization""];
""282_setAdmin"" [label=""setAdmin""];
""282_fallback"" [label=""fallback""];
""282_initLottery"" [label=""initLottery""];
""282_LotteryAdmin"" [label=""LotteryAdmin""];
""282_requestAllowance"" -> ""282_allowsAllowance"";
""282_setConfiguration"" -> ""282_onlyOwner"";
""282_withdraw"" -> ""282_onlyOwner"";
""282_destruct"" -> ""282_onlyOwner"";
""282_setLottery"" -> ""282_onlyOwner"";
""282_requestAllowance"" -> ""282_onlyAdminOrOwner"";
""282_proposeOwner"" -> ""282_onlyOwner"";
""282_setAdmin"" -> ""282_onlyOwner"";
""282_initLottery"" -> ""282_onlyAdminOrOwner"";
}
"
0x35bab7165a301e99c75c3e59b48817856b4d5e5c.sol,Bet,"contract Bet is Ownable, DataCenterBridge { using SafeMath for uint; event LogDistributeReward(address addr, uint reward, uint index); event LogGameResult(bytes32 indexed category, bytes32 indexed gameId, uint leftPts, uint rightPts); event LogParticipant(address addr, uint choice, uint betAmount); event LogRefund(address addr, uint betAmount); event LogBetClosed(bool isRefund, uint timestamp); event LogDealerWithdraw(address addr, uint withdrawAmount); struct BetInfo { bytes32 category; bytes32 gameId; uint8 spread; uint8 flag; uint16 leftOdds; uint16 middleOdds; uint16 rightOdds; uint minimumBet; uint startTime; uint deposit; address dealer; }",1,"subgraph cluster_1524_BetCenter {
label=""BetCenter"";
""1524_createBet"" [label=""createBet""];
""1524_fallback"" [label=""fallback""];
""1524_getBetsByCategory"" [label=""getBetsByCategory""];
""1524_getGameIdsByCategory"" [label=""getGameIdsByCategory""];
}
"
0xe3ec74dbce6ee1d8680e38714b67ab5535c95bdb.sol,try_it,contract try_it { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_try_it {
label=""try_it"";
""143_StopGame"" [label=""StopGame""];
""143_Activate"" [label=""Activate""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
""143_fallback"" [label=""fallback""];
""143_NewQuestion"" [label=""NewQuestion""];
}
"
0x56cd53067e5acd557dbbfb4c66580dfb9722962a.sol,CryptoMoviesToken,"contract CryptoMoviesToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; uint256 private firstStepLimit = 1.2 ether; uint256 private secondStepLimit = 5 ether; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",1,"subgraph cluster_975_CryptoMoviesToken {
label=""CryptoMoviesToken"";
""975_transfer"" [label=""transfer""];
""975_createContractMovie"" [label=""createContractMovie""];
""975_getMovie"" [label=""getMovie""];
""975_name"" [label=""name""];
""975_transferFrom"" [label=""transferFrom""];
""975__transfer"" [label=""_transfer""];
""975__createMovie"" [label=""_createMovie""];
""975_payout"" [label=""payout""];
""975__payout"" [label=""_payout""];
""975_takeOwnership"" [label=""takeOwnership""];
""975_balanceOf"" [label=""balanceOf""];
""975__owns"" [label=""_owns""];
""975__approved"" [label=""_approved""];
""975_symbol"" [label=""symbol""];
""975__addressNotNull"" [label=""_addressNotNull""];
""975_purchase"" [label=""purchase""];
""975_approve"" [label=""approve""];
""975_setCEO"" [label=""setCEO""];
""975_setCOO"" [label=""setCOO""];
""975_ownerOf"" [label=""ownerOf""];
""975_implementsERC721"" [label=""implementsERC721""];
""975_totalSupply"" [label=""totalSupply""];
""975_tokensOfOwner"" [label=""tokensOfOwner""];
""975_createPromoMovie"" [label=""createPromoMovie""];
""975_priceOf"" [label=""priceOf""];
""975_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""975_transfer"" -> ""975__addressNotNull"";
""975_tokensOfOwner"" -> ""975_totalSupply"";
""975__createMovie"" -> ""975__transfer"";
""975_createPromoMovie"" -> ""975__createMovie"";
""975_payout"" -> ""975__payout"";
""975_transfer"" -> ""975__transfer"";
""975_transferFrom"" -> ""975__addressNotNull"";
""975_takeOwnership"" -> ""975__approved"";
""975_approve"" -> ""975__owns"";
""975_transferFrom"" -> ""975__transfer"";
""975_createContractMovie"" -> ""975__createMovie"";
""975_purchase"" -> ""975__transfer"";
""975_createPromoMovie"" -> ""975_onlyCOO"";
""975_setCEO"" -> ""975_onlyCEO"";
""975_transfer"" -> ""975__owns"";
""975_transferFrom"" -> ""975__owns"";
""975_setCOO"" -> ""975_onlyCEO"";
""975_createContractMovie"" -> ""975_onlyCOO"";
""975_transferFrom"" -> ""975__approved"";
""975_takeOwnership"" -> ""975__transfer"";
""975_payout"" -> ""975_onlyCLevel"";
""975_tokensOfOwner"" -> ""975_balanceOf"";
""975_takeOwnership"" -> ""975__addressNotNull"";
""975_purchase"" -> ""975__addressNotNull"";
}
"
0x2920e0b7d86ab76aa09bcddffedef081faaf6e2c.sol,BloomToken,"contract BloomToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function BloomToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_BloomToken {
label=""BloomToken"";
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_mintTo"" [label=""mintTo""];
""401_changeOwner"" [label=""changeOwner""];
""401_balanceOf"" [label=""balanceOf""];
""401_totalSupply"" [label=""totalSupply""];
""401_transfer"" [label=""transfer""];
""401_BloomToken"" [label=""BloomToken""];
""401_approve"" [label=""approve""];
""401_killContract"" [label=""killContract""];
""401_fallback"" [label=""fallback""];
""401_transferFrom"" [label=""transferFrom""];
}
"
0x9c4d051974cdf3deb4d504ec24eac42b5e4e8847.sol,omexchange,"contract omexchange is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 5000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 10000; uint256 public tokensPerEth = 9500000e8; uint public target0drop = 800; uint public progress0drop = 0; address multisig = 0x25801F00B4138a981FA93771a86Fb50a8c94C809 ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_omexchange {
label=""omexchange"";
""1261_add"" [label=""add""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_Distribute"" [label=""Distribute""];
""1261_getTokens"" [label=""getTokens""];
""1261_transfer"" [label=""transfer""];
""1261_withdraw"" [label=""withdraw""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_distr"" [label=""distr""];
""1261_burn"" [label=""burn""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_constructor"" [label=""constructor""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_allowance"" [label=""allowance""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_distr"";
""1261_constructor"" -> ""1261_distr"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
}
"
0x0e2354b2ea4a6312009b228d5171bf6a02c51150.sol,THE_GAME,contract THE_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_THE_GAME {
label=""THE_GAME"";
""143_NewQuestion"" [label=""NewQuestion""];
""143_StopGame"" [label=""StopGame""];
""143_fallback"" [label=""fallback""];
""143_Try"" [label=""Try""];
""143_ActivateContract"" [label=""ActivateContract""];
""143_newQuestioner"" [label=""newQuestioner""];
}
"
0x3a858b6aa825c23621e339677a5016cfc4ff8b12.sol,Enigma_X,contract Enigma_X { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Enigma_X {
label=""Enigma_X"";
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_New"" [label=""New""];
""148_Start"" [label=""Start""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x00416b9d728069edb0ceb04bc2b203fa7336d1f1.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_processTransaction"" [label=""processTransaction""];
""928_pullBalance"" [label=""pullBalance""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_refundTransaction"";
""928_fallback"" -> ""928_processTransaction"";
}
"
0x3639d5dc956e35540fbd1de691870fb1318d6783.sol,SNTGiveaway,"contract SNTGiveaway is Controlled { mapping(address => bool) public sentToAddress; mapping(bytes5 => bool) public codeUsed; ERC20Token public SNT; uint public ethAmount; uint public sntAmount; bytes32 public root; event AddressFunded(address dest, bytes5 code, uint ethAmount, uint sntAmount); constructor(address _sntAddress, uint _ethAmount, uint _sntAmount, bytes32 _root) public { SNT = ERC20Token(_sntAddress); ethAmount = _ethAmount; sntAmount = _sntAmount; root = _root; }",1,"subgraph cluster_506_SNTGiveaway {
label=""SNTGiveaway"";
""506_updateSettings"" [label=""updateSettings""];
""506_constructor"" [label=""constructor""];
""506_processRequest"" [label=""processRequest""];
""506_manualSend"" [label=""manualSend""];
""506_retrieveFunds"" [label=""retrieveFunds""];
""506_validRequest"" [label=""validRequest""];
""506_fallback"" [label=""fallback""];
""506_boom"" [label=""boom""];
""506_processRequest"" -> ""506_onlyController"";
""506_manualSend"" -> ""506_onlyController"";
""506_boom"" -> ""506_onlyController"";
""506_updateSettings"" -> ""506_onlyController"";
""506_retrieveFunds"" -> ""506_onlyController"";
}
"
0xedebe7749b91a475918750842256f23fbe8e3029.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private admin = msg.sender; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },1,"subgraph cluster_1164_PlayerBook {
label=""PlayerBook"";
""1164_getNameFee"" [label=""getNameFee""];
""1164_constructor"" [label=""constructor""];
""1164_addGame"" [label=""addGame""];
""1164_checkIfNameValid"" [label=""checkIfNameValid""];
""1164_setRegistrationFee"" [label=""setRegistrationFee""];
""1164_getPlayerName"" [label=""getPlayerName""];
""1164_determinePID"" [label=""determinePID""];
""1164_registerNameXaddr"" [label=""registerNameXaddr""];
""1164_registerNameCore"" [label=""registerNameCore""];
""1164_registerNameXIDFromDapp"" [label=""registerNameXIDFromDapp""];
""1164_getPlayerAddr"" [label=""getPlayerAddr""];
""1164_registerNameXID"" [label=""registerNameXID""];
""1164_registerNameXname"" [label=""registerNameXname""];
""1164_getPlayerLAff"" [label=""getPlayerLAff""];
""1164_registerNameXnameFromDapp"" [label=""registerNameXnameFromDapp""];
""1164_registerNameXaddrFromDapp"" [label=""registerNameXaddrFromDapp""];
""1164_useMyOldName"" [label=""useMyOldName""];
""1164_getPlayerID"" [label=""getPlayerID""];
""1164_addMeToGame"" [label=""addMeToGame""];
""1164_getPlayerID"" -> ""1164_determinePID"";
""1164_registerNameXaddr"" -> ""1164_isHuman"";
""1164_registerNameXnameFromDapp"" -> ""1164_determinePID"";
""1164_registerNameXIDFromDapp"" -> ""1164_determinePID"";
""1164_registerNameXIDFromDapp"" -> ""1164_isRegisteredGame"";
""1164_registerNameXaddrFromDapp"" -> ""1164_registerNameCore"";
""1164_registerNameXaddrFromDapp"" -> ""1164_determinePID"";
""1164_setRegistrationFee"" -> ""1164_onlyAdmin"";
""1164_registerNameXname"" -> ""1164_determinePID"";
""1164_registerNameXID"" -> ""1164_determinePID"";
""1164_registerNameXnameFromDapp"" -> ""1164_isRegisteredGame"";
""1164_useMyOldName"" -> ""1164_isHuman"";
""1164_registerNameXaddrFromDapp"" -> ""1164_isRegisteredGame"";
""1164_addMeToGame"" -> ""1164_isHuman"";
""1164_registerNameXID"" -> ""1164_isHuman"";
""1164_registerNameXID"" -> ""1164_registerNameCore"";
""1164_registerNameXaddr"" -> ""1164_registerNameCore"";
""1164_registerNameXname"" -> ""1164_registerNameCore"";
""1164_registerNameXnameFromDapp"" -> ""1164_registerNameCore"";
""1164_addGame"" -> ""1164_onlyAdmin"";
""1164_getPlayerID"" -> ""1164_isRegisteredGame"";
""1164_registerNameXaddr"" -> ""1164_determinePID"";
""1164_registerNameXname"" -> ""1164_isHuman"";
""1164_registerNameXIDFromDapp"" -> ""1164_registerNameCore"";
}
"
0x93143d3e34a50aebab466368c3455fd858f77ad3.sol,FourOutOfFive,contract FourOutOfFive { struct GroupData { uint groupId; address[] participants; uint timestamp; uint betSize; uint rewardSize; uint8 rewardsAvailable; address[] rewardedParticipants; bool completed; },1,"subgraph cluster_670_FourOutOfFive {
label=""FourOutOfFive"";
""670__getContactOwnerBalance"" [label=""_getContactOwnerBalance""];
""670_withdrawOwnerMaxPossibleSafe"" [label=""withdrawOwnerMaxPossibleSafe""];
""670_placeBet"" [label=""placeBet""];
""670__getGroupRewardSize"" [label=""_getGroupRewardSize""];
""670_setMaxAndMinBet"" [label=""setMaxAndMinBet""];
""670__getGroupParticipants"" [label=""_getGroupParticipants""];
""670__getGroupIds"" [label=""_getGroupIds""];
""670_constructor"" [label=""constructor""];
""670__getGroupComplete"" [label=""_getGroupComplete""];
""670__getMaxWithdraw"" [label=""_getMaxWithdraw""];
""670__getGroupRewardedParticipants"" [label=""_getGroupRewardedParticipants""];
""670__getContactBalance"" [label=""_getContactBalance""];
""670_claimReward"" [label=""claimReward""];
""670__getMaxPossibleWithdraw"" [label=""_getMaxPossibleWithdraw""];
""670__getGroupRewardsAvailable"" [label=""_getGroupRewardsAvailable""];
""670_constructor"" -> ""670_setMaxAndMinBet"";
""670_withdrawOwnerMaxPossibleSafe"" -> ""670_onlyOwner"";
""670_setMaxAndMinBet"" -> ""670_onlyOwner"";
}
"
0xf1a3dc9de80f17a22b43acecaae62f5480063111.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1047_RefundVault {
label=""RefundVault"";
""1047_close"" [label=""close""];
""1047_refund"" [label=""refund""];
""1047_enableRefunds"" [label=""enableRefunds""];
""1047_RefundVault"" [label=""RefundVault""];
""1047_deposit"" [label=""deposit""];
""1047_close"" -> ""1047_onlyOwner"";
""1047_deposit"" -> ""1047_onlyOwner"";
""1047_enableRefunds"" -> ""1047_onlyOwner"";
}
"
0x279f9f9b73bfdbe14e4912a6d5f7442ecdf97b37.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_239_Destructible {
label=""Destructible"";
""239_destroy"" [label=""destroy""];
""239_destroyAndSend"" [label=""destroyAndSend""];
""239_Destructible"" [label=""Destructible""];
""239_destroy"" -> ""239_onlyOwner"";
""239_destroyAndSend"" -> ""239_onlyOwner"";
}
"
0xd587cb111d3e506ffafdf4b1c5d19008086c4e5a.sol,IartistChain,"contract IartistChain is owned, TokenERC20 { uint256 INITIAL_SUPPLY =500000000; uint256 public buyPrice = 1; event FrozenFunds(address target, bool frozen); function IartistChain(uint256 initialSupply, string tokenName, string tokenSymbol) TokenERC20(INITIAL_SUPPLY, , ) payable { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_572_IartistChain {
label=""IartistChain"";
""572__transfer"" [label=""_transfer""];
""572_IartistChain"" [label=""IartistChain""];
""572_selfdestructs"" [label=""selfdestructs""];
""572_fallback"" [label=""fallback""];
""572_setPrices"" [label=""setPrices""];
""572_buy"" [label=""buy""];
""572_buy"" -> ""572__transfer"";
""572_selfdestructs"" -> ""572_onlyOwner"";
""572_IartistChain"" -> ""572_TokenERC20"";
""572_setPrices"" -> ""572_onlyOwner"";
""572_fallback"" -> ""572__transfer"";
}
"
0xc780b0272bbe7caedb6b47157d88ce51b324da58.sol,CashFlow,"contract CashFlow { address public depositAddress = 0xbb02b2754386f0c76a2ad7f70ca4b272d29372f2; address public owner; modifier onlyOwner { require(owner == msg.sender, ); _; }",1,"subgraph cluster_97_CashFlow {
label=""CashFlow"";
""97_withdraw"" [label=""withdraw""];
""97_constructor"" [label=""constructor""];
""97_ownerkill"" [label=""ownerkill""];
""97_setOwner"" [label=""setOwner""];
""97_fallback"" [label=""fallback""];
""97_setDepositAddress"" [label=""setDepositAddress""];
""97_setDepositAddress"" -> ""97_onlyOwner"";
""97_setOwner"" -> ""97_onlyOwner"";
""97_withdraw"" -> ""97_onlyOwner"";
""97_ownerkill"" -> ""97_onlyOwner"";
}
"
0x7275f61c3abfba3596ae71f7128bdc3b0fc01fa9.sol,Ownable,contract Ownable { address public owner; address public bot; function Ownable() public { owner = msg.sender; },1,"subgraph cluster_78_Ownable {
label=""Ownable"";
""78_kill"" [label=""kill""];
""78_changeBot"" [label=""changeBot""];
""78_Ownable"" [label=""Ownable""];
""78_changeOwner"" [label=""changeOwner""];
""78_changeOwner"" -> ""78_onlyOwner"";
""78_kill"" -> ""78_onlyOwner"";
""78_changeBot"" -> ""78_onlyOwner"";
}
"
0x50f37df80a4e804a03275b21f83ebf5d5a668d39.sol,AuctionPotato,"contract AuctionPotato is Ownable { using SafeMath for uint256; string name; uint public startTime; uint public endTime; uint auctionDuration; uint public potato; uint oldPotato; uint oldHighestBindingBid; bool public canceled; uint public highestBindingBid; address public highestBidder; bool blockerPay; bool blockerWithdraw; mapping(address => uint256) public fundsByBidder; bool ownerHasWithdrawn; event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid); event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount); event LogCanceled(); event Withdraw(address owner, uint amount); constructor() public { blockerWithdraw = false; blockerPay = false; highestBindingBid = 3000000000000000; potato = 0; auctionDuration = 3 hours; startTime = 1546794000; endTime = startTime + auctionDuration; name = ; }",1,"subgraph cluster_620_AuctionPotato {
label=""AuctionPotato"";
""620_withdraw"" [label=""withdraw""];
""620_nextNextBid"" [label=""nextNextBid""];
""620_setStartTime"" [label=""setStartTime""];
""620_nextBid"" [label=""nextBid""];
""620_queryAuction"" [label=""queryAuction""];
""620_constructor"" [label=""constructor""];
""620_balance"" [label=""balance""];
""620_cancelAuction"" [label=""cancelAuction""];
""620_placeBid"" [label=""placeBid""];
""620_withdraw"" -> ""620_onlyOwner"";
""620_cancelAuction"" -> ""620_onlyBeforeEnd"";
""620_placeBid"" -> ""620_onlyAfterStart"";
""620_queryAuction"" -> ""620_nextBid"";
""620_cancelAuction"" -> ""620_onlyNotCanceled"";
""620_placeBid"" -> ""620_onlyNotCanceled"";
""620_setStartTime"" -> ""620_onlyOwner"";
""620_cancelAuction"" -> ""620_onlyOwner"";
""620_placeBid"" -> ""620_onlyBeforeEnd"";
}
"
0xf3f3dd2b5d9f3de1b1ceb6ad84683bf31adf29d1.sol,SAFE_GIFT,contract SAFE_GIFT { function GetGift(bytes pass) external payable { if(hashPass == keccak256(pass) && now>giftTime) { msg.sender.transfer(this.balance); },1,"subgraph cluster_164_SAFE_GIFT {
label=""SAFE_GIFT"";
""164_GetGift"" [label=""GetGift""];
""164_SetGiftTime"" [label=""SetGiftTime""];
""164_SetPass"" [label=""SetPass""];
""164_fallback"" [label=""fallback""];
""164_GetHash"" [label=""GetHash""];
""164_PassHasBeenSet"" [label=""PassHasBeenSet""];
""164_SetReciver"" [label=""SetReciver""];
}
"
0x2066a2e0cd7f19589f582e2fc9af9669cc9e02f1.sol,SetherToken,"contract SetherToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function SetherToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_SetherToken {
label=""SetherToken"";
""401_SetherToken"" [label=""SetherToken""];
""401_transfer"" [label=""transfer""];
""401_fallback"" [label=""fallback""];
""401_mintTo"" [label=""mintTo""];
""401_totalSupply"" [label=""totalSupply""];
""401_approve"" [label=""approve""];
""401_changeOwner"" [label=""changeOwner""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_killContract"" [label=""killContract""];
""401_transferFrom"" [label=""transferFrom""];
""401_balanceOf"" [label=""balanceOf""];
}
"
0xc80205befdb86a1891019969001e90b064d5735a.sol,MILO,"contract MILO is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 950000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 100000000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0xCf7Ac628f8A0fa38059BF77b0134efaD8bF329A3; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_MILO {
label=""MILO"";
""1261_burn"" [label=""burn""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_add"" [label=""add""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_constructor"" [label=""constructor""];
""1261_Distribute"" [label=""Distribute""];
""1261_getTokens"" [label=""getTokens""];
""1261_distr"" [label=""distr""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_transfer"" [label=""transfer""];
""1261_withdraw"" [label=""withdraw""];
""1261_allowance"" [label=""allowance""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_getTokens"" -> ""1261_distr"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,FlowerCore,"contract FlowerCore is FlowerAuction, Ownable { uint256 public constant PROMO_CREATION_LIMIT = 5000; uint256 public constant GEN0_CREATION_LIMIT = 45000; uint256 public constant GEN0_STARTING_PRICE = 10 finney; uint256 public constant GEN0_AUCTION_DURATION = 1 days; uint256 public promoCreatedCount; uint256 public gen0CreatedCount; constructor() public { stopped = true; rootAddress = msg.sender; adminAddress = msg.sender; _createFlower(0, 0, 0, uint256(-1), address(0)); }",1,"subgraph cluster_4300_FlowerCore {
label=""FlowerCore"";
""4300__computeNextGen0Price"" [label=""_computeNextGen0Price""];
""4300_getFlower"" [label=""getFlower""];
""4300_createPromoFlower"" [label=""createPromoFlower""];
""4300_unstop"" [label=""unstop""];
""4300_createGen0Auction"" [label=""createGen0Auction""];
""4300_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""4300_withdrawBalance"" [label=""withdrawBalance""];
""4300_setGiftHolderAddress"" [label=""setGiftHolderAddress""];
""4300_constructor"" [label=""constructor""];
""4300_createPromoFlower"" -> ""4300_onlyAdministrator"";
""4300_withdrawBalance"" -> ""4300_onlyAdministrator"";
""4300_setGen0SellerAddress"" -> ""4300_onlyAdministrator"";
""4300_createGen0Auction"" -> ""4300_onlyAdministrator"";
""4300_unstop"" -> ""4300_whenStopped"";
""4300_setGiftHolderAddress"" -> ""4300_onlyAdministrator"";
""4300_unstop"" -> ""4300_onlyAdministrator"";
""4300_constructor"" -> ""4300__createFlower"";
""4300_unstop"" -> ""4300_setStart"";
""4300_createGen0Auction"" -> ""4300__createFlower"";
""4300_createGen0Auction"" -> ""4300__computeNextGen0Price"";
""4300_createPromoFlower"" -> ""4300__createFlower"";
}
"
0xde745420248e0dde0cf774b5db8d59c96982b3a2.sol,Payout,contract Payout { ERC20Basic HorseToken; address payoutPoolAddress; address owner; address dev; address devTokensVestingAddress; bool payoutPaused; bool payoutSetup; uint256 public payoutPoolAmount; mapping(address => bool) public hasClaimed; constructor() public { HorseToken = ERC20Basic(0x5B0751713b2527d7f002c0c4e2a37e1219610A6B); payoutPoolAddress = address(0xf783A81F046448c38f3c863885D9e99D10209779); dev = address(0x1F92771237Bd5eae04e91B4B6F1d1a78D41565a2); devTokensVestingAddress = address(0x44935883932b0260C6B1018Cf6436650BD52a257); owner = msg.sender; },1,"subgraph cluster_297_Payout {
label=""Payout"";
""297_constructor"" [label=""constructor""];
""297_getTokenBalance"" [label=""getTokenBalance""];
""297_claim"" [label=""claim""];
""297_payoutControlSwitch"" [label=""payoutControlSwitch""];
""297_setupPayout"" [label=""setupPayout""];
""297_extractFund"" [label=""extractFund""];
""297_getRewardEstimate"" [label=""getRewardEstimate""];
""297_claim"" -> ""297_isPayoutSetup"";
""297_claim"" -> ""297_getRewardEstimate"";
""297_payoutControlSwitch"" -> ""297_onlyOwner"";
""297_getRewardEstimate"" -> ""297_isPayoutSetup"";
""297_claim"" -> ""297_isPayoutPaused"";
""297_getRewardEstimate"" -> ""297_getTokenBalance"";
""297_extractFund"" -> ""297_onlyOwner"";
""297_claim"" -> ""297_hasNotClaimed"";
}
"
0xd029de67c3f46d046c635f60efeb41d5b92a74ae.sol,Owned,contract Owned { address public contractOwner; address public pendingContractOwner; function Owned() { contractOwner = msg.sender; },1,"subgraph cluster_82_Owned {
label=""Owned"";
""82_changeContractOwnership"" [label=""changeContractOwnership""];
""82_claimContractOwnership"" [label=""claimContractOwnership""];
""82_destroy"" [label=""destroy""];
""82_Owned"" [label=""Owned""];
""82_destroy"" -> ""82_onlyContractOwner"";
""82_changeContractOwnership"" -> ""82_onlyContractOwner"";
}
"
0x479cbe1f6a7fa4d7e304ae983803c46e85ced870.sol,Slaughter3D,contract Slaughter3D { using SafeMath for uint; struct Stage { uint8 numberOfPlayers; uint256 blocknumber; bool finalized; mapping (uint8 => address) slotXplayer; mapping (address => bool) players; mapping (uint8 => address) setMN; },1,"subgraph cluster_1021_Slaughter3D {
label=""Slaughter3D"";
""1021_jackpotinfo"" [label=""jackpotinfo""];
""1021_previousstageloser"" [label=""previousstageloser""];
""1021_tryFinalizeStage"" [label=""tryFinalizeStage""];
""1021_acceptOffer"" [label=""acceptOffer""];
""1021_invalidateStage"" [label=""invalidateStage""];
""1021_fallback"" [label=""fallback""];
""1021_previousstageplayer1"" [label=""previousstageplayer1""];
""1021_currentstageplayer1"" [label=""currentstageplayer1""];
""1021_nextonetogetpaid"" [label=""nextonetogetpaid""];
""1021_playervanity"" [label=""playervanity""];
""1021_currentstageplayer2"" [label=""currentstageplayer2""];
""1021_contractownsthismanyP3D"" [label=""contractownsthismanyP3D""];
""1021_allocateSurvivorWinnings"" [label=""allocateSurvivorWinnings""];
""1021_Payoutnextrefund"" [label=""Payoutnextrefund""];
""1021_withdraw"" [label=""withdraw""];
""1021_offerAsSacrifice"" [label=""offerAsSacrifice""];
""1021_DonateToLosers"" [label=""DonateToLosers""];
""1021_currentPlayers"" [label=""currentPlayers""];
""1021_Expand"" [label=""Expand""];
""1021_constructor"" [label=""constructor""];
""1021_previousstageplayer2"" [label=""previousstageplayer2""];
""1021_offerAsSacrificeFromVault"" [label=""offerAsSacrificeFromVault""];
""1021_myEarnings"" [label=""myEarnings""];
""1021_changevanity"" [label=""changevanity""];
""1021_DivsToRefundpot"" [label=""DivsToRefundpot""];
""1021_checkstatus"" [label=""checkstatus""];
""1021_offerAsSacrificeFromVault"" -> ""1021_canPayFromVault"";
""1021_offerAsSacrifice"" -> ""1021_prepareStage"";
""1021_withdraw"" -> ""1021_tryFinalizeStage"";
""1021_offerAsSacrificeFromVault"" -> ""1021_isNewToStage"";
""1021_offerAsSacrificeFromVault"" -> ""1021_acceptOffer"";
""1021_offerAsSacrificeFromVault"" -> ""1021_prepareStage"";
""1021_tryFinalizeStage"" -> ""1021_invalidateStage"";
""1021_withdraw"" -> ""1021_hasEarnings"";
""1021_offerAsSacrificeFromVault"" -> ""1021_tryFinalizeStage"";
""1021_tryFinalizeStage"" -> ""1021_allocateSurvivorWinnings"";
""1021_offerAsSacrifice"" -> ""1021_isValidOffer"";
""1021_offerAsSacrifice"" -> ""1021_tryFinalizeStage"";
""1021_offerAsSacrifice"" -> ""1021_isNewToStage"";
""1021_offerAsSacrifice"" -> ""1021_acceptOffer"";
""1021_myEarnings"" -> ""1021_hasEarnings"";
}
"
0x5b39afa22a9debd9247bf84b68a79b8736c2ba4e.sol,Quiz,contract Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_Quiz {
label=""Quiz"";
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_Try"" [label=""Try""];
""118_Start_quiz_g"" [label=""Start_quiz_g""];
}
"
0x3f96c0e80b82458c1a96a3b7d7d2297f55df4965.sol,Treethereum,contract Treethereum { uint timeout; mapping (address => address) inviter; function bytesToAddr (bytes b) constant returns (address) { uint result = 0; for (uint i = b.length-1; i+1 > 0; i--) { uint c = uint(b[i]); uint to_inc = c * ( 16 ** ((b.length - i-1) * 2)); result += to_inc; },1,"subgraph cluster_217_Treethereum {
label=""Treethereum"";
""217_addrecruit"" [label=""addrecruit""];
""217_fallback"" [label=""fallback""];
""217_bytesToAddr"" [label=""bytesToAddr""];
""217_fallback"" -> ""217_bytesToAddr"";
""217_fallback"" -> ""217_addrecruit"";
}
"
0xcf377dfd654676940e2b5a87cf2673def25aeaed.sol,GreenEthereusPromo,"contract GreenEthereusPromo { string public constant name = ; string public constant symbol = ; event Transfer(address indexed from, address indexed to, uint256 value); address owner; uint public index; constructor() public { owner = msg.sender; }",1,"subgraph cluster_149_GreenEthereusPromo {
label=""GreenEthereusPromo"";
""149_fallback"" [label=""fallback""];
""149_resetIndex"" [label=""resetIndex""];
""149_withdrawBalance"" [label=""withdrawBalance""];
""149_constructor"" [label=""constructor""];
""149_massSending"" [label=""massSending""];
""149_transferOwnership"" [label=""transferOwnership""];
""149_transferOwnership"" -> ""149_onlyOwner"";
""149_resetIndex"" -> ""149_onlyOwner"";
""149_withdrawBalance"" -> ""149_onlyOwner"";
""149_massSending"" -> ""149_onlyOwner"";
}
"
0xd16dfe7a7f447b00122a01efd5acb99a7aee7c04.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 300000000; uint256 public buyPrice = 2000; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public { }",1,"subgraph cluster_636_EncryptedToken {
label=""EncryptedToken"";
""636_getEth"" [label=""getEth""];
""636_selfdestructs"" [label=""selfdestructs""];
""636_mintToken"" [label=""mintToken""];
""636_fallback"" [label=""fallback""];
""636_freezeAccount"" [label=""freezeAccount""];
""636_buy"" [label=""buy""];
""636__transfer"" [label=""_transfer""];
""636_setPrices"" [label=""setPrices""];
""636_EncryptedToken"" [label=""EncryptedToken""];
""636_balanceOfa"" [label=""balanceOfa""];
""636_freezeAccount"" -> ""636_onlyOwner"";
""636_selfdestructs"" -> ""636_onlyOwner"";
""636_mintToken"" -> ""636_onlyOwner"";
""636_buy"" -> ""636__transfer"";
""636_setPrices"" -> ""636_onlyOwner"";
""636_EncryptedToken"" -> ""636_TokenERC20"";
""636_fallback"" -> ""636__transfer"";
}
"
0xa2201234a4652a704f5539058ccb9ab6ebcd486b.sol,MultiSigWallet,"contract MultiSigWallet { uint constant public MAX_OWNER_COUNT = 5; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1014_MultiSigWallet {
label=""MultiSigWallet"";
""1014_addOwner"" [label=""addOwner""];
""1014_getTransactionIds"" [label=""getTransactionIds""];
""1014_addTransaction"" [label=""addTransaction""];
""1014_revokeConfirmation"" [label=""revokeConfirmation""];
""1014_confirmTransaction"" [label=""confirmTransaction""];
""1014_getConfirmationCount"" [label=""getConfirmationCount""];
""1014_getConfirmations"" [label=""getConfirmations""];
""1014_getOwners"" [label=""getOwners""];
""1014_removeOwner"" [label=""removeOwner""];
""1014_changeRequirement"" [label=""changeRequirement""];
""1014_getTransactionCount"" [label=""getTransactionCount""];
""1014_submitTransaction"" [label=""submitTransaction""];
""1014_executeTransaction"" [label=""executeTransaction""];
""1014_isConfirmed"" [label=""isConfirmed""];
""1014_replaceOwner"" [label=""replaceOwner""];
""1014_fallback"" [label=""fallback""];
""1014_MultiSigWallet"" [label=""MultiSigWallet""];
""1014_revokeConfirmation"" -> ""1014_notExecuted"";
""1014_confirmTransaction"" -> ""1014_ownerExists"";
""1014_confirmTransaction"" -> ""1014_transactionExists"";
""1014_confirmTransaction"" -> ""1014_executeTransaction"";
""1014_removeOwner"" -> ""1014_ownerExists"";
""1014_addOwner"" -> ""1014_validRequirement"";
""1014_replaceOwner"" -> ""1014_ownerExists"";
""1014_removeOwner"" -> ""1014_onlyWallet"";
""1014_executeTransaction"" -> ""1014_notExecuted"";
""1014_revokeConfirmation"" -> ""1014_ownerExists"";
""1014_submitTransaction"" -> ""1014_confirmTransaction"";
""1014_replaceOwner"" -> ""1014_ownerDoesNotExist"";
""1014_revokeConfirmation"" -> ""1014_confirmed"";
""1014_changeRequirement"" -> ""1014_onlyWallet"";
""1014_confirmTransaction"" -> ""1014_notConfirmed"";
""1014_removeOwner"" -> ""1014_changeRequirement"";
""1014_executeTransaction"" -> ""1014_isConfirmed"";
""1014_addTransaction"" -> ""1014_notNull"";
""1014_addOwner"" -> ""1014_notNull"";
""1014_submitTransaction"" -> ""1014_addTransaction"";
""1014_addOwner"" -> ""1014_onlyWallet"";
""1014_changeRequirement"" -> ""1014_validRequirement"";
""1014_replaceOwner"" -> ""1014_onlyWallet"";
""1014_addOwner"" -> ""1014_ownerDoesNotExist"";
}
"
0x8d40e75ed0bcc4ca13aa4113738898f9779858be.sol,STEShop,"contract STEShop is Ownable { ERC20 public tokenAddress; uint256 public currentPrice; uint256 public minPrice; uint256 public maxPrice; uint256 public tokensForSale; uint256 public unsoldAmount; address[2] internal foundersAddresses = [ 0x2f072F00328B6176257C21E64925760990561001, 0x2640d4b3baF3F6CF9bB5732Fe37fE1a9735a32CE ]; constructor () public { tokensForSale = 979915263825780; unsoldAmount = tokensForSale; minPrice = 4000000; currentPrice = 4000000; maxPrice = 100000000; }",1,"subgraph cluster_589_STEShop {
label=""STEShop"";
""589_setTokenAddress"" [label=""setTokenAddress""];
""589_setMaxPrice"" [label=""setMaxPrice""];
""589_setTokensForSale"" [label=""setTokensForSale""];
""589_withdrawToFounders"" [label=""withdrawToFounders""];
""589_setMinPrice"" [label=""setMinPrice""];
""589_fallback"" [label=""fallback""];
""589_setUnsoldAmount"" [label=""setUnsoldAmount""];
""589_constructor"" [label=""constructor""];
""589_setCurentPrice"" [label=""setCurentPrice""];
""589_setTokensForSale"" -> ""589_onlyOwner"";
""589_setMaxPrice"" -> ""589_onlyOwner"";
""589_setUnsoldAmount"" -> ""589_onlyOwner"";
""589_setCurentPrice"" -> ""589_onlyOwner"";
""589_setMinPrice"" -> ""589_onlyOwner"";
""589_withdrawToFounders"" -> ""589_onlyOwner"";
""589_setTokenAddress"" -> ""589_onlyOwner"";
}
"
0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol,TydoPreIco,contract TydoPreIco is Owned { using SafeMath for uint256; uint256 public constant COINS_PER_ETH = 12000; uint256 public constant bonus = 25; mapping (address => uint256) public balances; mapping (address => uint256) ethBalances; uint256 public ethCollected; uint256 public tokenSold; uint256 constant tokenDecMult = 1 ether; uint8 public state = 0; AbstractERC20 public token; event SaleStart(); event SaleClosedSuccess(uint256 _tokenSold); event SaleClosedFail(uint256 _tokenSold); constructor(address _coinToken) Owned() public { token = AbstractERC20(_coinToken); },1,"subgraph cluster_656_TydoPreIco {
label=""TydoPreIco"";
""656_withdrawTokens"" [label=""withdrawTokens""];
""656_closeSuccess"" [label=""closeSuccess""];
""656_addBonus"" [label=""addBonus""];
""656_open"" [label=""open""];
""656_fallback"" [label=""fallback""];
""656_canBuy"" [label=""canBuy""];
""656_refund"" [label=""refund""];
""656_constructor"" [label=""constructor""];
""656_tokensLeft"" [label=""tokensLeft""];
""656_buy"" [label=""buy""];
""656_withdraw"" [label=""withdraw""];
""656_closeFail"" [label=""closeFail""];
""656_withdraw"" -> ""656_ownerOnly"";
""656_constructor"" -> ""656_constructor"";
""656_fallback"" -> ""656_withdrawTokens"";
""656_buy"" -> ""656_canBuy"";
""656_fallback"" -> ""656_buy"";
""656_open"" -> ""656_ownerOnly"";
""656_fallback"" -> ""656_refund"";
""656_closeFail"" -> ""656_ownerOnly"";
""656_closeSuccess"" -> ""656_ownerOnly"";
""656_buy"" -> ""656_addBonus"";
}
"
0xed29ff5874fa64dcf47ed7dacb770857a5d164fb.sol,Vault,"contract Vault is TokenVault { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event OpenDate(uint date); mapping (address => uint) public Deposits; uint minDeposit; bool Locked; uint Date; function initVault() payable open { Owner = msg.sender; minDeposit = 0.25 ether; Locked = false; deposit(); }",1,"subgraph cluster_115_TokenVault {
label=""TokenVault"";
""115_withdrawTokenTo"" [label=""withdrawTokenTo""];
""115_withdrawToken"" [label=""withdrawToken""];
""115_emtpyTo"" [label=""emtpyTo""];
""115_withdrawToken"" -> ""115_withdrawTokenTo"";
""115_withdrawTokenTo"" -> ""115_onlyOwner"";
""115_emtpyTo"" -> ""115_withdrawTokenTo"";
}
"
0x36fc9fff1bf5b08ed2c472d6370dc62fa3016ffa.sol,quizgame,contract quizgame { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_quizgame {
label=""quizgame"";
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xed29ff5874fa64dcf47ed7dacb770857a5d164fb.sol,Vault,"contract Vault is TokenVault { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event OpenDate(uint date); mapping (address => uint) public Deposits; uint minDeposit; bool Locked; uint Date; function initVault() payable open { Owner = msg.sender; minDeposit = 0.25 ether; Locked = false; deposit(); }",1,"subgraph cluster_115_TokenVault {
label=""TokenVault"";
""115_withdrawTokenTo"" [label=""withdrawTokenTo""];
""115_withdrawToken"" [label=""withdrawToken""];
""115_emtpyTo"" [label=""emtpyTo""];
""115_withdrawToken"" -> ""115_withdrawTokenTo"";
""115_withdrawTokenTo"" -> ""115_onlyOwner"";
""115_emtpyTo"" -> ""115_withdrawTokenTo"";
}
"
0x553e3e5ba03e862c93c7834b80ca800018ba4736.sol,SamsungCryptoPayments,"contract SamsungCryptoPayments is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 2000000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e1; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0xf228A325c92d4002A159eb52Bf6A9C509C039CCA; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_SamsungCryptoPayments {
label=""SamsungCryptoPayments"";
""1261_transfer"" [label=""transfer""];
""1261_approve"" [label=""approve""];
""1261_allowance"" [label=""allowance""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_constructor"" [label=""constructor""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_add"" [label=""add""];
""1261_getTokens"" [label=""getTokens""];
""1261_distr"" [label=""distr""];
""1261_withdraw"" [label=""withdraw""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_burn"" [label=""burn""];
""1261_fallback"" [label=""fallback""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_Distribute"" [label=""Distribute""];
""1261_distr"" -> ""1261_canDistr"";
""1261_constructor"" -> ""1261_distr"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_getTokens"" -> ""1261_distr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
}
"
0x0dcfdb9f5496ed7f62dd0ac019c7daf184a66aef.sol,LVRCrowdsale,"contract LVRCrowdsale { Token public tokenReward; address public creator; address public owner = 0xC9167F51CDEa635634E6d92D25664379dde36484; uint256 public price; uint256 public startDate; uint256 public endDate; event FundTransfer(address backer, uint amount, bool isContribution); function LVRCrowdsale() public { creator = msg.sender; startDate = 1522839600; endDate = 1525431600; price = 1000; tokenReward = Token(0x7095E151aBD19e8C99abdfB4568F675f747f97F6); }",1,"subgraph cluster_285_LVRCrowdsale {
label=""LVRCrowdsale"";
""285_kill"" [label=""kill""];
""285_setOwner"" [label=""setOwner""];
""285_fallback"" [label=""fallback""];
""285_setCreator"" [label=""setCreator""];
""285_setStartDate"" [label=""setStartDate""];
""285_setEndtDate"" [label=""setEndtDate""];
""285_setPrice"" [label=""setPrice""];
""285_setToken"" [label=""setToken""];
""285_LVRCrowdsale"" [label=""LVRCrowdsale""];
}
"
0x0d9a437282ba395664ed7d26df2377659a7e16af.sol,SaleTracker,"contract SaleTracker is Pausable { using SafeMath for uint256; event PurchaseMade (address indexed _from, bytes8 _paymentCode, uint256 _value); mapping(address => uint256) public purchases; address[] public purchaserAddresses; bool public enforceAddressMatch; function SaleTracker(bool _enforceAddressMatch) { enforceAddressMatch = _enforceAddressMatch; pause(); }",1,"subgraph cluster_359_SaleTracker {
label=""SaleTracker"";
""359_getPurchaserAddressCount"" [label=""getPurchaserAddressCount""];
""359_setEnforceAddressMatch"" [label=""setEnforceAddressMatch""];
""359_SaleTracker"" [label=""SaleTracker""];
""359_sweep"" [label=""sweep""];
""359_purchase"" [label=""purchase""];
""359_setEnforceAddressMatch"" -> ""359_onlyOwner"";
""359_SaleTracker"" -> ""359_pause"";
""359_sweep"" -> ""359_onlyOwner"";
""359_purchase"" -> ""359_whenNotPaused"";
}
"
0xf17a9ad24372faaa27f0bb684e13413a3de84c4b.sol,SmokeCoinV_2,"contract SmokeCoinV_2 is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 200 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 150 * 1 days; uint256 public totalSupply = 754654e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 22220000000; uint public target0drop = 4222; uint public progress0drop = 0; address multisig = 0xb7Ef2B8514A27bf63e8F5397Fd6DBDCa95809883; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_SmokeCoinV_2 {
label=""SmokeCoinV_2"";
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_getTokens"" [label=""getTokens""];
""1263_transfer"" [label=""transfer""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_burn"" [label=""burn""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_constructor"" [label=""constructor""];
""1263_Distribute"" [label=""Distribute""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_approve"" [label=""approve""];
""1263_fallback"" [label=""fallback""];
""1263_allowance"" [label=""allowance""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_withdraw"" [label=""withdraw""];
""1263_add"" [label=""add""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_distr"" [label=""distr""];
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_getTokens"" -> ""1263_distr"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_constructor"" -> ""1263_distr"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
}
"
0x403860568bcd726ec403f8a1ca67f374e842f16c.sol,CrowdCoinICO,"contract CrowdCoinICO is Owned, DSMath, CrowdCoinSaleBonus, CrowdCoinManualSell { uint public total_raised; uint public start_time = 0; uint public end_time = 0; uint public constant goal = 350 ether; uint256 public constant default_price = 0.005 * 10**18; mapping (uint => uint256) public price; mapping(address => uint) funded; modifier in_time { if (time() < start_time || time() > end_time) revert(); _; }",1,"subgraph cluster_1967_CrowdCoinICO {
label=""CrowdCoinICO"";
""1967_time"" [label=""time""];
""1967_refund"" [label=""refund""];
""1967_init"" [label=""init""];
""1967_fallback"" [label=""fallback""];
""1967_get_current_price"" [label=""get_current_price""];
""1967_collect"" [label=""collect""];
""1967_current_week"" [label=""current_week""];
""1967_successfully_closed"" [label=""successfully_closed""];
""1967_CrowdCoinICO"" [label=""CrowdCoinICO""];
""1967_fallback"" -> ""1967_min"";
""1967_successfully_closed"" -> ""1967_my_token_balance"";
""1967_successfully_closed"" -> ""1967_time"";
""1967_fallback"" -> ""1967_cast"";
""1967_fallback"" -> ""1967_has_value"";
""1967_init"" -> ""1967_onlyOwner"";
""1967_fallback"" -> ""1967_get_bonus"";
""1967_fallback"" -> ""1967_wadd"";
""1967_fallback"" -> ""1967_my_token_balance"";
""1967_current_week"" -> ""1967_sub"";
""1967_fallback"" -> ""1967_get_current_price"";
""1967_refund"" -> ""1967_time"";
""1967_fallback"" -> ""1967_add"";
""1967_fallback"" -> ""1967_in_time"";
""1967_get_current_price"" -> ""1967_current_week"";
""1967_fallback"" -> ""1967_wdiv"";
}
"
0x889a32263d237872b4f7985ead9c29ebfe8b464d.sol,CaviarToken,"contract CaviarToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function CaviarToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_CaviarToken {
label=""CaviarToken"";
""401_fallback"" [label=""fallback""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_CaviarToken"" [label=""CaviarToken""];
""401_totalSupply"" [label=""totalSupply""];
""401_mintTo"" [label=""mintTo""];
""401_transferFrom"" [label=""transferFrom""];
""401_balanceOf"" [label=""balanceOf""];
""401_transfer"" [label=""transfer""];
""401_killContract"" [label=""killContract""];
""401_approve"" [label=""approve""];
""401_changeOwner"" [label=""changeOwner""];
}
"
0x887e1988f7d697df22aea1207a5e1831ad3065ef.sol,Manageable,"contract Manageable is Ownable { address public manager; bool public contractLock; event ManagerTransferred(address indexed previousManager, address indexed newManager); event ContractLockChanged(address admin, bool state); function Manageable() public { manager = msg.sender; contractLock = false; }",1,"subgraph cluster_410_Manageable {
label=""Manageable"";
""410_withdrawFunds"" [label=""withdrawFunds""];
""410_Manageable"" [label=""Manageable""];
""410_setContractLock"" [label=""setContractLock""];
""410_transferManager"" [label=""transferManager""];
""410_payout"" [label=""payout""];
""410_transferManager"" -> ""410_onlyAdmin"";
""410_setContractLock"" -> ""410_onlyAdmin"";
""410_payout"" -> ""410_onlyOwner"";
""410_withdrawFunds"" -> ""410_onlyOwner"";
}
"
0xa1d38ef843553322a338cdd7d6134565ffba97ab.sol,LEVT,"contract LEVT is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 22222222222e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 11111111e8; uint256 public totalDonation; uint public target0drop = 400000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1061_LEVT {
label=""LEVT"";
""1061_balanceOf"" [label=""balanceOf""];
""1061_fallback"" [label=""fallback""];
""1061_transfer"" [label=""transfer""];
""1061_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1061_getTokens"" [label=""getTokens""];
""1061_approve"" [label=""approve""];
""1061_getTokenBalance"" [label=""getTokenBalance""];
""1061_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1061_allowance"" [label=""allowance""];
""1061_burn"" [label=""burn""];
""1061_withdraw"" [label=""withdraw""];
""1061_withdrawAll"" [label=""withdrawAll""];
""1061_distr"" [label=""distr""];
""1061_transferOwnership"" [label=""transferOwnership""];
""1061_Distribute"" [label=""Distribute""];
""1061_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1061_constructor"" [label=""constructor""];
""1061_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1061_finishDistribution"" [label=""finishDistribution""];
""1061_totalDonationnETH"" [label=""totalDonationnETH""];
""1061_transferFrom"" [label=""transferFrom""];
""1061_DistributeAirdrop"" -> ""1061_onlyOwner"";
""1061_DistributeAirdropMultiple"" -> ""1061_Distribute"";
""1061_burn"" -> ""1061_onlyOwner"";
""1061_getTokens"" -> ""1061_canDistr"";
""1061_getTokens"" -> ""1061_distr"";
""1061_withdrawForeignTokens"" -> ""1061_onlyOwner"";
""1061_transferFrom"" -> ""1061_onlyPayloadSize"";
""1061_Distribute"" -> ""1061_onlyOwner"";
""1061_transfer"" -> ""1061_onlyPayloadSize"";
""1061_distr"" -> ""1061_canDistr"";
""1061_DistributeAirdropMultiple"" -> ""1061_onlyOwner"";
""1061_finishDistribution"" -> ""1061_onlyOwner"";
""1061_updateTokensPerEth"" -> ""1061_onlyOwner"";
""1061_withdrawAll"" -> ""1061_onlyOwner"";
""1061_finishDistribution"" -> ""1061_canDistr"";
""1061_transferOwnership"" -> ""1061_onlyOwner"";
""1061_DistributeAirdrop"" -> ""1061_Distribute"";
""1061_withdraw"" -> ""1061_onlyOwner"";
""1061_constructor"" -> ""1061_distr"";
""1061_fallback"" -> ""1061_getTokens"";
}
"
0x1fdedef5c2da1ed9db44d80003a9592dfa18163c.sol,Syndicate,contract Syndicate is Ownable{ uint256 public numberSyndicateMembers; uint256 public totalSyndicateShares = 20000; uint256 public playersShareAllocation = 5000; uint256 public availableBuyInShares = 5000; uint256 public minimumBuyIn = 10; uint256 public buyInSharePrice = 1000000000000000; uint256 public shareCycleSessionSize = 1000; uint256 public shareCycleIndex = 0; uint256 public shareCycle = 1; uint256 public currentSyndicateValue = 0; uint256 public precision = 1000000000000000; uint256 public maxCyclePlayersConsidered = 100; address[] public cyclePlayers; uint256 public numberOfCyclePlayers = 0; struct somePlayer { uint256 playCount; uint256 profitShare; uint256 shareCycle; uint256 winnings; },1,"subgraph cluster_869_Syndicate {
label=""Syndicate"";
""869_roundIt"" [label=""roundIt""];
""869_claimPlayerWinnings"" [label=""claimPlayerWinnings""];
""869_playerStatus"" [label=""playerStatus""];
""869_setShareCycleSessionSize"" [label=""setShareCycleSessionSize""];
""869_insertCyclePlayer"" [label=""insertCyclePlayer""];
""869_addMember"" [label=""addMember""];
""869_allocateWinnings"" [label=""allocateWinnings""];
""869_updatePlayCount"" [label=""updatePlayCount""];
""869_Syndicate"" [label=""Syndicate""];
""869_setMaxCyclePlayersConsidered"" [label=""setMaxCyclePlayersConsidered""];
""869_claimPlayerProfit"" [label=""claimPlayerProfit""];
""869_buyIntoSyndicate"" [label=""buyIntoSyndicate""];
""869_memberShareCount"" [label=""memberShareCount""];
""869_min"" [label=""min""];
""869_allocateShares"" [label=""allocateShares""];
""869_distributeProfit"" [label=""distributeProfit""];
""869_memberProfitShare"" [label=""memberProfitShare""];
""869_claimProfit"" [label=""claimProfit""];
""869_setMaxCyclePlayersConsidered"" -> ""869_onlyOwner"";
""869_distributeProfit"" -> ""869_min"";
""869_buyIntoSyndicate"" -> ""869_addMember"";
""869_allocateShares"" -> ""869_addMember"";
""869_distributeProfit"" -> ""869_roundIt"";
""869_setShareCycleSessionSize"" -> ""869_onlyOwner"";
""869_updatePlayCount"" -> ""869_insertCyclePlayer"";
""869_allocateShares"" -> ""869_onlyOwner"";
}
"
0xa2e59b1c5e64130d06f08a99cd5eda8af9c68b8a.sol,Broker,"contract Broker is Administration { event BrokerRegistered(uint indexed brokerId, address indexed broker); event AppendSubBroker(uint indexed brokerId, uint indexed subBrokerId, address indexed subBroker); event BrokerTransfer(address indexed newBroker, uint indexed brokerId, uint indexed subBrokerId); event BrokerFeeDistrubution(address indexed vipBroker, uint indexed vipShare, address indexed broker, uint share); event BrokerFeeClaim(address indexed broker, uint indexed fee); mapping (uint => address[]) BrokerIdToBrokers; mapping (uint => uint) BrokerIdToSpots; mapping (address => uint) BrokerIncoming; uint public vipBrokerFee = 5 ether; uint public brokerFee = 1.5 ether; uint public vipBrokerNum = 1000; uint public subBrokerNum = 5; function _brokerFeeDistribute(uint _price, uint _type, uint _brokerId, uint _subBrokerId) internal { address vipBroker = getBrokerAddress(_brokerId, 0); address broker = getBrokerAddress(_brokerId, _subBrokerId); require(vipBroker != address(0) && broker != address(0)); uint totalShare = _price*rewardPercent[_type]/100; BrokerIncoming[vipBroker] = BrokerIncoming[vipBroker] + totalShare*15/100; BrokerIncoming[broker] = BrokerIncoming[broker] + totalShare*85/100; emit BrokerFeeDistrubution(vipBroker, totalShare*15/100, broker, totalShare*85/100); }",1,"subgraph cluster_911_Broker {
label=""Broker"";
""911_claimBrokerFee"" [label=""claimBrokerFee""];
""911_getBrokerIncoming"" [label=""getBrokerIncoming""];
""911_getBrokerInfo"" [label=""getBrokerInfo""];
""911_registerBroker"" [label=""registerBroker""];
""911_assignSubBroker"" [label=""assignSubBroker""];
""911__brokerFeeDistribute"" [label=""_brokerFeeDistribute""];
""911_getBrokerAddress"" [label=""getBrokerAddress""];
""911_transferBroker"" [label=""transferBroker""];
""911_getVipBrokerNum"" [label=""getVipBrokerNum""];
""911_transferBroker"" -> ""911_whenNotPaused"";
""911__brokerFeeDistribute"" -> ""911_getBrokerAddress"";
""911_claimBrokerFee"" -> ""911_whenNotPaused"";
""911_getVipBrokerNum"" -> ""911_safeSub"";
}
"
0x4cdee773fd90f91e98b7d33db5c12376deee3b08.sol,NEBC,"contract NEBC is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 390000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function NEBC() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_NEBC {
label=""NEBC"";
""706_NEBC"" [label=""NEBC""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x1a7208627ffe43a69f13f3c393a41712fa4a7831.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_369_AccessService {
label=""AccessService"";
""369_withdraw"" [label=""withdraw""];
""369_setService"" [label=""setService""];
""369_setFinance"" [label=""setFinance""];
}
"
0xd6aca5b766853f7879d153fdb7567be356dd46ec.sol,ExeniumToken,"contract ExeniumToken is FrozenToken { string public name = ; string public symbol = ; uint8 public decimals = 8; string public version = ; string public publisher = ""https: string public description = ; bool public acceptAdminWithdraw = false; bool public acceptDonate = true; event InfoChanged(address indexed sender, string version, string publisher, string description); event Withdraw(address indexed sender, address indexed wallet, uint256 amount); event WithdrawTokens(address indexed sender, address indexed wallet, address indexed token, uint256 amount); event Donate(address indexed sender, uint256 value); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); function ExeniumToken() public {}",1,"subgraph cluster_2235_ExeniumToken {
label=""ExeniumToken"";
""2235_ExeniumToken"" [label=""ExeniumToken""];
""2235_setupInfo"" [label=""setupInfo""];
""2235_fallback"" [label=""fallback""];
""2235_balanceToken"" [label=""balanceToken""];
""2235_donate"" [label=""donate""];
""2235_withdrawAmount"" [label=""withdrawAmount""];
""2235_updAcceptAdminWithdraw"" [label=""updAcceptAdminWithdraw""];
""2235_withdraw"" [label=""withdraw""];
""2235_updAcceptDonate"" [label=""updAcceptDonate""];
""2235_withdrawTokens"" [label=""withdrawTokens""];
""2235_fallback"" -> ""2235_donate"";
""2235_balanceToken"" -> ""2235_validAddress"";
""2235_withdrawAmount"" -> ""2235_greaterThanZero"";
""2235_withdrawAmount"" -> ""2235_authLevel"";
""2235_setupInfo"" -> ""2235_notEmpty"";
""2235_withdraw"" -> ""2235_withdrawAmount"";
""2235_updAcceptAdminWithdraw"" -> ""2235_onlyOwner"";
""2235_donate"" -> ""2235_greaterThanZero"";
""2235_withdrawTokens"" -> ""2235_validAddress"";
""2235_updAcceptDonate"" -> ""2235_authLevel"";
""2235_withdrawTokens"" -> ""2235_authLevel"";
""2235_withdrawAmount"" -> ""2235_validBalanceThis"";
""2235_setupInfo"" -> ""2235_authLevel"";
""2235_withdrawTokens"" -> ""2235_greaterThanZero"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,ClockAuction,"contract ClockAuction is Pausable, ClockAuctionBase { bytes4 constant InterfaceSignature_ERC721 = bytes4(0x80ac58cd); constructor(address _nftAddress, uint256 _cut) public { require(_cut <= 10000); ownerCut = _cut; ERC721Token candidateContract = ERC721Token(_nftAddress); require(candidateContract.supportsInterface(InterfaceSignature_ERC721)); nonFungibleContract = candidateContract; }",1,"subgraph cluster_2307_ClockAuctionBase {
label=""ClockAuctionBase"";
""2307__transfer"" [label=""_transfer""];
""2307__computeCut"" [label=""_computeCut""];
""2307__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""2307__escrow"" [label=""_escrow""];
""2307__cancelAuction"" [label=""_cancelAuction""];
""2307__isOnAuction"" [label=""_isOnAuction""];
""2307__currentPrice"" [label=""_currentPrice""];
""2307__bid"" [label=""_bid""];
""2307__addAuction"" [label=""_addAuction""];
""2307__removeAuction"" [label=""_removeAuction""];
""2307_isOwnerOf"" [label=""isOwnerOf""];
""2307__bid"" -> ""2307__computeCut"";
""2307__cancelAuction"" -> ""2307__removeAuction"";
""2307__currentPrice"" -> ""2307__computeCurrentPrice"";
""2307__bid"" -> ""2307__isOnAuction"";
""2307__bid"" -> ""2307__currentPrice"";
""2307__cancelAuction"" -> ""2307__transfer"";
""2307__bid"" -> ""2307__removeAuction"";
}
"
0x6c940a8d477922f1cffe012449321098e06db3f7.sol,CryptoGain,contract CryptoGain { using SafeMath for uint256; struct Bid { address player; uint8 slot_from; uint8 slot_to; },1,"subgraph cluster_649_CryptoGain {
label=""CryptoGain"";
""649_set_admin"" [label=""set_admin""];
""649_is_slot_in_bid"" [label=""is_slot_in_bid""];
""649_destruct"" [label=""destruct""];
""649_CryptoGain"" [label=""CryptoGain""];
""649_fallback"" [label=""fallback""];
""649_run"" [label=""run""];
""649_get_foreign_balance"" [label=""get_foreign_balance""];
""649_playout"" [label=""playout""];
""649_bid"" [label=""bid""];
""649_restart"" [label=""restart""];
""649_search_winner_bid_address"" [label=""search_winner_bid_address""];
""649_reset"" [label=""reset""];
""649_withdraw"" [label=""withdraw""];
""649_remove_exceed"" [label=""remove_exceed""];
""649_get_balance"" [label=""get_balance""];
""649_search_winner_bid_address"" -> ""649_is_slot_in_bid"";
""649_reset"" -> ""649_onlyOwner"";
""649_run"" -> ""649_playout"";
""649_reset"" -> ""649_restart"";
""649_fallback"" -> ""649_run"";
""649_bid"" -> ""649_remove_exceed"";
""649_run"" -> ""649_onlyAlive"";
""649_run"" -> ""649_bid"";
""649_run"" -> ""649_remove_exceed"";
""649_playout"" -> ""649_search_winner_bid_address"";
""649_destruct"" -> ""649_onlyOwner"";
""649_set_admin"" -> ""649_onlyOwner"";
""649_playout"" -> ""649_restart"";
""649_withdraw"" -> ""649_onlyAlive"";
}
"
0x1fe3825a3012e581843a483df1452fc2fa4f0bad.sol,JcashRegistrar,"contract JcashRegistrar is CommonModifiers, Ownable, Manageable, Pausable, JNTPayableService, JcashRegistrarInterface { mapping (bytes32 => bool) processedTxs; event ReceiveEthEvent(address indexed from, uint256 value); event RefundEthEvent(bytes32 txhash, address indexed to, uint256 value); event TransferEthEvent(bytes32 txhash, address indexed to, uint256 value); event RefundTokenEvent(bytes32 txhash, address indexed tokenaddress, address indexed to, uint256 value); event TransferTokenEvent(bytes32 txhash, address indexed tokenaddress, address indexed to, uint256 value); event ReplenishEthEvent(address indexed from, uint256 value); event WithdrawEthEvent(address indexed to, uint256 value); event WithdrawTokenEvent(address indexed tokenaddress, address indexed to, uint256 value); event PauseEvent(); event UnpauseEvent(); modifier onlyPayloadSize(uint256 size) { require(msg.data.length == (size + 4)); _; }",1,"subgraph cluster_1985_JcashRegistrar {
label=""JcashRegistrar"";
""1985_withdrawToken"" [label=""withdrawToken""];
""1985_transferToken"" [label=""transferToken""];
""1985_refundToken"" [label=""refundToken""];
""1985_fallback"" [label=""fallback""];
""1985_isProcessedTx"" [label=""isProcessedTx""];
""1985_withdrawEth"" [label=""withdrawEth""];
""1985_refundEth"" [label=""refundEth""];
""1985_transferEth"" [label=""transferEth""];
""1985_transferToken"" -> ""1985_initChargeJNT"";
""1985_transferToken"" -> ""1985_onlyAllowedManager"";
""1985_transferToken"" -> ""1985_whenContractNotPaused"";
""1985_fallback"" -> ""1985_getPaused"";
""1985_refundToken"" -> ""1985_onlyPayloadSize"";
""1985_refundEth"" -> ""1985_whenContractNotPaused"";
""1985_refundEth"" -> ""1985_onlyPayloadSize"";
""1985_withdrawToken"" -> ""1985_onlyPayloadSize"";
""1985_withdrawEth"" -> ""1985_onlyAllowedManager"";
""1985_transferToken"" -> ""1985_onlyPayloadSize"";
""1985_fallback"" -> ""1985_isManagerAllowed"";
""1985_refundToken"" -> ""1985_onlyAllowedManager"";
""1985_transferToken"" -> ""1985_getActionPrice"";
""1985_isProcessedTx"" -> ""1985_onlyPayloadSize"";
""1985_withdrawEth"" -> ""1985_onlyPayloadSize"";
""1985_transferEth"" -> ""1985_onlyAllowedManager"";
""1985_transferEth"" -> ""1985_getActionPrice"";
""1985_refundToken"" -> ""1985_whenContractNotPaused"";
""1985_refundEth"" -> ""1985_onlyAllowedManager"";
""1985_transferEth"" -> ""1985_whenContractNotPaused"";
""1985_withdrawToken"" -> ""1985_onlyAllowedManager"";
""1985_transferEth"" -> ""1985_initChargeJNT"";
""1985_transferEth"" -> ""1985_onlyPayloadSize"";
}
"
0x2d92102bf50c111d59b93f7a10bafd13e770ed61.sol,Ownable,"contract Ownable { address public owner; event OwnershipRenounced(address indexed previousOwner); event OwnershipTransferred( address indexed previousOwner, address indexed newOwner ); constructor() public { owner = msg.sender; }",1,"subgraph cluster_95_Ownable {
label=""Ownable"";
""95_kill"" [label=""kill""];
""95__transferOwnership"" [label=""_transferOwnership""];
""95_constructor"" [label=""constructor""];
""95_transferOwnership"" [label=""transferOwnership""];
""95_renounceOwnership"" [label=""renounceOwnership""];
""95_renounceOwnership"" -> ""95_onlyOwner"";
""95_transferOwnership"" -> ""95__transferOwnership"";
""95_kill"" -> ""95_onlyOwner"";
""95_transferOwnership"" -> ""95_onlyOwner"";
}
"
0x93143d3e34a50aebab466368c3455fd858f77ad3.sol,FourOutOfFive,contract FourOutOfFive { struct GroupData { uint groupId; address[] participants; uint timestamp; uint betSize; uint rewardSize; uint8 rewardsAvailable; address[] rewardedParticipants; bool completed; },1,"subgraph cluster_670_FourOutOfFive {
label=""FourOutOfFive"";
""670__getContactOwnerBalance"" [label=""_getContactOwnerBalance""];
""670_withdrawOwnerMaxPossibleSafe"" [label=""withdrawOwnerMaxPossibleSafe""];
""670_placeBet"" [label=""placeBet""];
""670__getGroupRewardSize"" [label=""_getGroupRewardSize""];
""670_setMaxAndMinBet"" [label=""setMaxAndMinBet""];
""670__getGroupParticipants"" [label=""_getGroupParticipants""];
""670__getGroupIds"" [label=""_getGroupIds""];
""670_constructor"" [label=""constructor""];
""670__getGroupComplete"" [label=""_getGroupComplete""];
""670__getMaxWithdraw"" [label=""_getMaxWithdraw""];
""670__getGroupRewardedParticipants"" [label=""_getGroupRewardedParticipants""];
""670__getContactBalance"" [label=""_getContactBalance""];
""670_claimReward"" [label=""claimReward""];
""670__getMaxPossibleWithdraw"" [label=""_getMaxPossibleWithdraw""];
""670__getGroupRewardsAvailable"" [label=""_getGroupRewardsAvailable""];
""670_constructor"" -> ""670_setMaxAndMinBet"";
""670_withdrawOwnerMaxPossibleSafe"" -> ""670_onlyOwner"";
""670_setMaxAndMinBet"" -> ""670_onlyOwner"";
}
"
0x035611f47a13f3603109152952f0034c674959ba.sol,ReservationFund,"contract ReservationFund is ICrowdsaleReservationFund, Ownable, SafeMath { bool public crowdsaleFinished = false; mapping(address => uint256) contributions; mapping(address => uint256) tokensToIssue; mapping(address => uint256) bonusTokensToIssue; ISimpleCrowdsale public crowdsale; event RefundPayment(address contributor, uint256 etherAmount); event TransferToFund(address contributor, uint256 etherAmount); event FinishCrowdsale(); function ReservationFund(address _owner) public Ownable(_owner) { }",1,"subgraph cluster_558_ReservationFund {
label=""ReservationFund"";
""558_onCrowdsaleEnd"" [label=""onCrowdsaleEnd""];
""558_contributionsOf"" [label=""contributionsOf""];
""558_ReservationFund"" [label=""ReservationFund""];
""558_completeContribution"" [label=""completeContribution""];
""558_refundPayment"" [label=""refundPayment""];
""558_processContribution"" [label=""processContribution""];
""558_setCrowdsaleAddress"" [label=""setCrowdsaleAddress""];
""558_canCompleteContribution"" [label=""canCompleteContribution""];
""558_setCrowdsaleAddress"" -> ""558_onlyOwner"";
""558_ReservationFund"" -> ""558_Ownable"";
""558_onCrowdsaleEnd"" -> ""558_onlyCrowdsale"";
""558_processContribution"" -> ""558_safeAdd"";
""558_processContribution"" -> ""558_onlyCrowdsale"";
}
"
0x33dcb440beb0c640fa75ac297bc2e048e6853844.sol,Bonds,contract Bonds { uint ACTIVATION_TIME = 1539302400; modifier onlyOwner(){ require(msg.sender == dev); _; },1,"subgraph cluster_1302_Bonds {
label=""Bonds"";
""1302_extDistributeBondFund"" [label=""extDistributeBondFund""];
""1302_getMyBalance"" [label=""getMyBalance""];
""1302_buy"" [label=""buy""];
""1302_distributeYield"" [label=""distributeYield""];
""1302_withdrawPart"" [label=""withdrawPart""];
""1302_setAllowReferral"" [label=""setAllowReferral""];
""1302_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""1302_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1302_setMaxbonds"" [label=""setMaxbonds""];
""1302_gettotalBondDivs"" [label=""gettotalBondDivs""];
""1302_getBondOwner"" [label=""getBondOwner""];
""1302_constructor"" [label=""constructor""];
""1302_setAutoNewbond"" [label=""setAutoNewbond""];
""1302_setInitialPrice"" [label=""setInitialPrice""];
""1302_addTotalBondValue"" [label=""addTotalBondValue""];
""1302_setBondPrice"" [label=""setBondPrice""];
""1302_addNewbond"" [label=""addNewbond""];
""1302_distributeBondFund"" [label=""distributeBondFund""];
""1302_setSymbol"" [label=""setSymbol""];
""1302_fallback"" [label=""fallback""];
""1302_transfer"" [label=""transfer""];
""1302_getTotalBondValue"" [label=""getTotalBondValue""];
""1302_getOwnerBalance"" [label=""getOwnerBalance""];
""1302_getBondPrice"" [label=""getBondPrice""];
""1302_getNextAvailableBond"" [label=""getNextAvailableBond""];
""1302_getBondDivShare"" [label=""getBondDivShare""];
""1302_withdraw"" [label=""withdraw""];
""1302_setName"" [label=""setName""];
""1302_setSymbol"" -> ""1302_onlyOwner"";
""1302_buy"" -> ""1302_addTotalBondValue"";
""1302_setBondPrice"" -> ""1302_onlyOwner"";
""1302_setAllowReferral"" -> ""1302_onlyOwner"";
""1302_setAutoNewbond"" -> ""1302_onlyOwner"";
""1302_setMaxbonds"" -> ""1302_onlyOwner"";
""1302_buy"" -> ""1302_distributeYield"";
""1302_buy"" -> ""1302_distributeBondFund"";
""1302_addNewbond"" -> ""1302_onlyOwner"";
""1302_extDistributeBondFund"" -> ""1302_onlyOwner"";
""1302_setName"" -> ""1302_onlyOwner"";
""1302_buy"" -> ""1302_isActivated"";
""1302_setInitialPrice"" -> ""1302_onlyOwner"";
""1302_withdrawPart"" -> ""1302_onlyOwner"";
""1302_addNewbond"" -> ""1302_addTotalBondValue"";
}
"
0x52b5a68d069a6c9b2f36f279e9d936557fe8d29c.sol,BridgeX_Network,"contract BridgeX_Network is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 25000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 15000000e8; uint public target0drop = 2000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_BridgeX_Network {
label=""BridgeX_Network"";
""1253_balanceOf"" [label=""balanceOf""];
""1253_approve"" [label=""approve""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_Distribute"" [label=""Distribute""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_fallback"" [label=""fallback""];
""1253_constructor"" [label=""constructor""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_getTokens"" [label=""getTokens""];
""1253_burn"" [label=""burn""];
""1253_transfer"" [label=""transfer""];
""1253_withdraw"" [label=""withdraw""];
""1253_add"" [label=""add""];
""1253_distr"" [label=""distr""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_allowance"" [label=""allowance""];
""1253_add"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_constructor"" -> ""1253_distr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
}
"
0xd359e3f53b5d4e11b8b11dc0772448f380accf3c.sol,Manageable,"contract Manageable is Ownable { address public manager; bool public contractLock; event ManagerTransferred(address indexed previousManager, address indexed newManager); event ContractLockChanged(address admin, bool state); function Manageable() public { manager = msg.sender; contractLock = false; }",1,"subgraph cluster_410_Manageable {
label=""Manageable"";
""410_payout"" [label=""payout""];
""410_Manageable"" [label=""Manageable""];
""410_transferManager"" [label=""transferManager""];
""410_withdrawFunds"" [label=""withdrawFunds""];
""410_setContractLock"" [label=""setContractLock""];
""410_withdrawFunds"" -> ""410_onlyOwner"";
""410_setContractLock"" -> ""410_onlyAdmin"";
""410_transferManager"" -> ""410_onlyAdmin"";
""410_payout"" -> ""410_onlyOwner"";
}
"
0xd74186459dd2e4aaff9330129ba68331761f38ae.sol,alfa_QUIZ,contract alfa_QUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_alfa_QUIZ {
label=""alfa_QUIZ"";
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x000621424c60951cb69e9d75d64b79813846d498.sol,HasNoEther,contract HasNoEther is Ownable { function HasNoEther() payable { require(msg.value == 0); },1,"subgraph cluster_197_HasNoEther {
label=""HasNoEther"";
""197_HasNoEther"" [label=""HasNoEther""];
""197_reclaimEther"" [label=""reclaimEther""];
""197_fallback"" [label=""fallback""];
""197_reclaimEther"" -> ""197_onlyOwner"";
}
"
0x46cefba4dd7512b2449e1ac4b730bfb7f77d1407.sol,DecentralizedExchangeHotPotato,contract DecentralizedExchangeHotPotato { address private owner; mapping (address => bool) private admins; struct Order { address creator; address owner; address issuer; uint256 tokenId; uint256 price; uint256 startTime; uint256 endTime; },1,"subgraph cluster_515_DecentralizedExchangeHotPotato {
label=""DecentralizedExchangeHotPotato"";
""515_put"" [label=""put""];
""515_isContract"" [label=""isContract""];
""515_totalOrder"" [label=""totalOrder""];
""515_allOf"" [label=""allOf""];
""515_withdrawAmount"" [label=""withdrawAmount""];
""515_DecentralizedExchangeHotPotato"" [label=""DecentralizedExchangeHotPotato""];
""515_withdrawAll"" [label=""withdrawAll""];
""515_removeAdmin"" [label=""removeAdmin""];
""515_revoke"" [label=""revoke""];
""515_getNextPrice"" [label=""getNextPrice""];
""515_addAdmin"" [label=""addAdmin""];
""515_buy"" [label=""buy""];
""515_isAdmin"" [label=""isAdmin""];
""515_name"" [label=""name""];
""515_setOwner"" [label=""setOwner""];
""515_removeAdmin"" -> ""515_onlyOwner"";
""515_withdrawAmount"" -> ""515_onlyAdmins"";
""515_setOwner"" -> ""515_onlyOwner"";
""515_buy"" -> ""515_isContract"";
""515_withdrawAll"" -> ""515_onlyAdmins"";
""515_buy"" -> ""515_getNextPrice"";
""515_addAdmin"" -> ""515_onlyOwner"";
}
"
0x6bd33d49d48f76abcd96652e5347e398aa3fda96.sol,BancorBuyer,contract BancorBuyer { mapping (address => uint) public balances; uint public reward; bool public bought_tokens; uint public time_bought; address sale = 0xBbc79794599b19274850492394004087cBf89710; address token = 0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C; address developer = 0x4e6A1c57CdBfd97e8efe831f8f4418b1F2A09e6e; function withdraw(){ uint amount = balances[msg.sender]; balances[msg.sender] = 0; msg.sender.transfer(amount); },1,"subgraph cluster_189_BancorBuyer {
label=""BancorBuyer"";
""189_withdraw"" [label=""withdraw""];
""189_buy"" [label=""buy""];
""189_default_helper"" [label=""default_helper""];
""189_fallback"" [label=""fallback""];
""189_add_reward"" [label=""add_reward""];
""189_fallback"" -> ""189_default_helper"";
}
"
0xd2df59cfcd5086264532936afde48a5312ce96bb.sol,Auction,"contract Auction is Ownable { using SafeMath for uint256; event bidPlaced(uint bid, address _address); event etherTransfered(uint amount, address _address); string _itemName; address _highestBidder; uint _highestBid; uint _minStep; uint _end; uint _start; constructor() public { _itemName = ; _highestBid = 0; _highestBidder = address(this); _end = 1540339140; _start = _end - 3 days; _minStep = 10000000000000000; }",1,"subgraph cluster_427_Auction {
label=""Auction"";
""427_queryBid"" [label=""queryBid""];
""427_constructor"" [label=""constructor""];
""427_queryBalance"" [label=""queryBalance""];
""427_weiToOwner"" [label=""weiToOwner""];
""427_placeBid"" [label=""placeBid""];
""427_weiToOwner"" -> ""427_contract_onlyOwner"";
}
"
0x000621424c60951cb69e9d75d64b79813846d498.sol,Destructible,contract Destructible is Ownable { function Destructible() payable { },1,"subgraph cluster_165_Destructible {
label=""Destructible"";
""165_Destructible"" [label=""Destructible""];
""165_destroy"" [label=""destroy""];
""165_destroyAndSend"" [label=""destroyAndSend""];
""165_destroy"" -> ""165_onlyOwner"";
""165_destroyAndSend"" -> ""165_onlyOwner"";
}
"
0xf2b89f45cc4ebbf11a36bdb4a4b24eada8dd30a7.sol,AirDrop,contract AirDrop is Ownable { Token public tokenInstance; function AirDrop(address _tokenAddress){ tokenInstance = Token(_tokenAddress); },1,"subgraph cluster_188_AirDrop {
label=""AirDrop"";
""188_transferEthToOnwer"" [label=""transferEthToOnwer""];
""188_AirDrop"" [label=""AirDrop""];
""188_doAirDrop"" [label=""doAirDrop""];
""188_fallback"" [label=""fallback""];
""188_kill"" [label=""kill""];
""188_transferEthToOnwer"" -> ""188_onlyOwner"";
""188_doAirDrop"" -> ""188_onlyOwner"";
""188_kill"" -> ""188_onlyOwner"";
}
"
0x5ae96153d99dfdd7a6b471451afe0f564e10b934.sol,CommonSale,contract CommonSale is StagedCrowdsale { address public multisigWallet; address public foundersTokensWallet; address public bountyTokensWallet; uint public foundersTokensPercent; uint public bountyTokensPercent; uint public price; uint public percentRate = 100; uint public softcap; bool public refundOn = false; bool public isSoftcapOn = false; mapping (address => uint) balances; CommonSale public nextSale; MintableToken public token; function setSoftcap(uint newSoftcap) onlyOwner { isSoftcapOn = true; softcap = newSoftcap; },1,"subgraph cluster_1467_CommonSale {
label=""CommonSale"";
""1467_setNextSale"" [label=""setNextSale""];
""1467_finishMinting"" [label=""finishMinting""];
""1467_fallback"" [label=""fallback""];
""1467_createTokens"" [label=""createTokens""];
""1467_setSoftcap"" [label=""setSoftcap""];
""1467_setBountyTokensPercent"" [label=""setBountyTokensPercent""];
""1467_refund"" [label=""refund""];
""1467_setToken"" [label=""setToken""];
""1467_setFoundersTokensPercent"" [label=""setFoundersTokensPercent""];
""1467_retrieveTokens"" [label=""retrieveTokens""];
""1467_setBountyTokensWallet"" [label=""setBountyTokensWallet""];
""1467_setFoundersTokensWallet"" [label=""setFoundersTokensWallet""];
""1467_setPrice"" [label=""setPrice""];
""1467_setMultisigWallet"" [label=""setMultisigWallet""];
""1467_setPercentRate"" [label=""setPercentRate""];
""1467_createTokens"" -> ""1467_whenNotPaused"";
""1467_createTokens"" -> ""1467_saleIsOn"";
""1467_createTokens"" -> ""1467_currentMilestone"";
""1467_setBountyTokensWallet"" -> ""1467_onlyOwner"";
""1467_setFoundersTokensPercent"" -> ""1467_onlyOwner"";
""1467_setPercentRate"" -> ""1467_onlyOwner"";
""1467_setSoftcap"" -> ""1467_onlyOwner"";
""1467_setMultisigWallet"" -> ""1467_onlyOwner"";
""1467_retrieveTokens"" -> ""1467_onlyOwner"";
""1467_setToken"" -> ""1467_onlyOwner"";
""1467_setPrice"" -> ""1467_onlyOwner"";
""1467_finishMinting"" -> ""1467_whenNotPaused"";
""1467_fallback"" -> ""1467_createTokens"";
""1467_createTokens"" -> ""1467_isUnderHardCap"";
""1467_finishMinting"" -> ""1467_onlyOwner"";
""1467_setBountyTokensPercent"" -> ""1467_onlyOwner"";
""1467_refund"" -> ""1467_whenNotPaused"";
""1467_setNextSale"" -> ""1467_onlyOwner"";
""1467_setFoundersTokensWallet"" -> ""1467_onlyOwner"";
}
"
0x1ff54baa4cfca0826e125e6e1e312a53748c2637.sol,LimeEyes,contract LimeEyes { address private _dev; struct Artwork { string _title; address _owner; bool _visible; uint256 _basePrice; uint256 _purchases; address[] _shareholders; mapping (address => bool) _hasShares; mapping (address => uint256) _shares; },1,"subgraph cluster_826_LimeEyes {
label=""LimeEyes"";
""826_getArtwork"" [label=""getArtwork""];
""826_stringToBytes32"" [label=""stringToBytes32""];
""826_purchaseSharesOfArtwork"" [label=""purchaseSharesOfArtwork""];
""826__exists"" [label=""_exists""];
""826_getAllShareholdersOfArtwork"" [label=""getAllShareholdersOfArtwork""];
""826_renameArtwork"" [label=""renameArtwork""];
""826_LimeEyes"" [label=""LimeEyes""];
""826_withdrawAmount"" [label=""withdrawAmount""];
""826_toggleArtworkVisibility"" [label=""toggleArtworkVisibility""];
""826_createArtwork"" [label=""createArtwork""];
""826_getAllArtworks"" [label=""getAllArtworks""];
""826_withdrawAll"" [label=""withdrawAll""];
""826_createArtwork"" -> ""826_onlyDev"";
""826_withdrawAll"" -> ""826_onlyDev"";
""826_renameArtwork"" -> ""826__exists"";
""826_purchaseSharesOfArtwork"" -> ""826__exists"";
""826_purchaseSharesOfArtwork"" -> ""826_getArtwork"";
""826_renameArtwork"" -> ""826_onlyDev"";
""826_withdrawAmount"" -> ""826_onlyDev"";
""826_getArtwork"" -> ""826__exists"";
""826_getAllArtworks"" -> ""826_getArtwork"";
""826_toggleArtworkVisibility"" -> ""826_onlyDev"";
""826_getAllShareholdersOfArtwork"" -> ""826__exists"";
""826_getAllArtworks"" -> ""826_stringToBytes32"";
""826_toggleArtworkVisibility"" -> ""826__exists"";
}
"
0x41a322b28d0ff354040e2cbc676f0320d8c8850d.sol,SupeRare,"contract SupeRare is ERC721Token, Ownable, ERC721Metadata { using SafeMath for uint256; uint256 public maintainerPercentage = 30; uint256 public creatorPercentage = 100; mapping(uint256 => address) private tokenBidder; mapping(uint256 => uint256) private tokenCurrentBid; mapping(uint256 => uint256) private tokenSalePrice; mapping(uint256 => address) private tokenCreator; mapping(uint256 => string) private tokenToURI; mapping(string => uint256) private uriOriginalToken; mapping(uint256 => bool) private tokenSold; mapping(address => bool) private creatorWhitelist; event WhitelistCreator(address indexed _creator); event Bid(address indexed _bidder, uint256 indexed _amount, uint256 indexed _tokenId); event AcceptBid(address indexed _bidder, address indexed _seller, uint256 _amount, uint256 indexed _tokenId); event CancelBid(address indexed _bidder, uint256 indexed _amount, uint256 indexed _tokenId); event Sold(address indexed _buyer, address indexed _seller, uint256 _amount, uint256 indexed _tokenId); event SalePriceSet(uint256 indexed _tokenId, uint256 indexed _price); modifier uniqueURI(string _uri) { require(uriOriginalToken[_uri] == 0); _; }",1,"subgraph cluster_1587_SupeRare {
label=""SupeRare"";
""1587_acceptBid"" [label=""acceptBid""];
""1587_returnCurrentBid"" [label=""returnCurrentBid""];
""1587_cancelBid"" [label=""cancelBid""];
""1587_buy"" [label=""buy""];
""1587_salePriceOfToken"" [label=""salePriceOfToken""];
""1587_symbol"" [label=""symbol""];
""1587_setSalePrice"" [label=""setSalePrice""];
""1587_transfer"" [label=""transfer""];
""1587_currentBidDetailsOfToken"" [label=""currentBidDetailsOfToken""];
""1587_clearBid"" [label=""clearBid""];
""1587_addNewToken"" [label=""addNewToken""];
""1587_payout"" [label=""payout""];
""1587_isWhitelisted"" [label=""isWhitelisted""];
""1587_isGreaterBid"" [label=""isGreaterBid""];
""1587_createToken"" [label=""createToken""];
""1587_addNewTokenWithEditions"" [label=""addNewTokenWithEditions""];
""1587_creatorOfToken"" [label=""creatorOfToken""];
""1587_tokenURI"" [label=""tokenURI""];
""1587_approve"" [label=""approve""];
""1587_bid"" [label=""bid""];
""1587_name"" [label=""name""];
""1587_whitelistCreator"" [label=""whitelistCreator""];
""1587_originalTokenOfUri"" [label=""originalTokenOfUri""];
""1587_setMaintainerPercentage"" [label=""setMaintainerPercentage""];
""1587_setCreatorPercentage"" [label=""setCreatorPercentage""];
""1587_setCreatorPercentage"" -> ""1587_onlyOwner"";
""1587_createToken"" -> ""1587_totalSupply"";
""1587_transfer"" -> ""1587_clearApprovalAndTransfer"";
""1587_addNewTokenWithEditions"" -> ""1587_onlyCreator"";
""1587_whitelistCreator"" -> ""1587_onlyOwner"";
""1587_tokenURI"" -> ""1587_ownerOf"";
""1587_bid"" -> ""1587_returnCurrentBid"";
""1587_setSalePrice"" -> ""1587_onlyOwnerOf"";
""1587_originalTokenOfUri"" -> ""1587_ownerOf"";
""1587_addNewToken"" -> ""1587_createToken"";
""1587_buy"" -> ""1587_clearBid"";
""1587_acceptBid"" -> ""1587_clearBid"";
""1587_acceptBid"" -> ""1587_ownerOf"";
""1587_cancelBid"" -> ""1587_clearBid"";
""1587_buy"" -> ""1587_ownerOf"";
""1587_bid"" -> ""1587_isGreaterBid"";
""1587_createToken"" -> ""1587__mint"";
""1587_acceptBid"" -> ""1587_onlyOwnerOf"";
""1587_addNewToken"" -> ""1587_uniqueURI"";
""1587_bid"" -> ""1587_notOwnerOf"";
""1587_buy"" -> ""1587_returnCurrentBid"";
""1587_acceptBid"" -> ""1587_payout"";
""1587_addNewTokenWithEditions"" -> ""1587_uniqueURI"";
""1587_buy"" -> ""1587_payout"";
""1587_setMaintainerPercentage"" -> ""1587_onlyOwner"";
""1587_addNewTokenWithEditions"" -> ""1587_createToken"";
""1587_addNewToken"" -> ""1587_onlyCreator"";
""1587_buy"" -> ""1587_notOwnerOf"";
""1587_acceptBid"" -> ""1587_clearApprovalAndTransfer"";
""1587_buy"" -> ""1587_clearApprovalAndTransfer"";
""1587_transfer"" -> ""1587_onlyOwnerOf"";
}
"
0x3a858b6aa825c23621e339677a5016cfc4ff8b12.sol,Enigma_X,contract Enigma_X { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Enigma_X {
label=""Enigma_X"";
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_New"" [label=""New""];
""148_Start"" [label=""Start""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x18b67380942d56c09001a3764ce1aa9e64644433.sol,TokenERC20,"contract TokenERC20 is Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 18; uint256 public totalSupply; uint256 public currentTotalSupply = 0; uint256 public airdrop; uint256 public startBalance; uint256 public buyPrice ; mapping(address => bool) touched; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) internal allowed; mapping(address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Burn(address indexed burner, uint256 value); constructor( uint256 initialSupply ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_909_TokenERC20 {
label=""TokenERC20"";
""909_selfdestructs"" [label=""selfdestructs""];
""909_increaseApproval"" [label=""increaseApproval""];
""909_allowance"" [label=""allowance""];
""909_mintToken"" [label=""mintToken""];
""909_getBalance"" [label=""getBalance""];
""909_burn"" [label=""burn""];
""909_decreaseApproval"" [label=""decreaseApproval""];
""909_modifyairdrop"" [label=""modifyairdrop""];
""909_freezeAccount"" [label=""freezeAccount""];
""909_setPrices"" [label=""setPrices""];
""909_getEth"" [label=""getEth""];
""909__burn"" [label=""_burn""];
""909_approve"" [label=""approve""];
""909_transferFrom"" [label=""transferFrom""];
""909_constructor"" [label=""constructor""];
""909_balanceOf"" [label=""balanceOf""];
""909_totalSupply"" [label=""totalSupply""];
""909_fallback"" [label=""fallback""];
""909_transfer"" [label=""transfer""];
""909_getEth"" -> ""909_onlyOwner"";
""909_modifyairdrop"" -> ""909_onlyOwner"";
""909_balanceOf"" -> ""909_getBalance"";
""909_selfdestructs"" -> ""909_onlyOwner"";
""909_burn"" -> ""909__burn"";
""909_freezeAccount"" -> ""909_onlyOwner"";
""909_setPrices"" -> ""909_onlyOwner"";
""909_mintToken"" -> ""909_onlyOwner"";
}
"
0xeece3bfd3c83715f1f801dfa6b735ac9093c5bc3.sol,SecuritySale,"contract SecuritySale is Ownable { bool public live; IInvestorList public investorList; event SaleLive(bool liveness); event EtherIn(address from, uint amount); event StartSale(); event EndSale(); constructor() public { live = false; }",1,"subgraph cluster_406_ISecuritySale {
label=""ISecuritySale"";
""406_setLive"" [label=""setLive""];
""406_setInvestorList"" [label=""setInvestorList""];
}
"
0x5576250692275701efde5eeb51596e2d9460790b.sol,UserDataManager,contract UserDataManager { using NameFilter for string; address private admin = msg.sender; uint256 public registrationFee_ = 0; mapping(uint256 => UserDataManagerReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; struct Player { address addr; bytes32 name; uint256 laff; },1,"subgraph cluster_13_UserDataManagerReceiverInterface {
label=""UserDataManagerReceiverInterface"";
""13_receivePlayerInfo"" [label=""receivePlayerInfo""];
}
"
0x32fcdefa047d8edeea0c21a50179b18181074c60.sol,CryptoSanguoToken,"contract CryptoSanguoToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256 private min_value = 0.01 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function CryptoSanguoToken () public { owner = msg.sender; admins[owner] = true; issueCard(1, 7, 5); }",1,"subgraph cluster_1362_CryptoSanguoToken {
label=""CryptoSanguoToken"";
""1362_enableERC721"" [label=""enableERC721""];
""1362_totalSupply"" [label=""totalSupply""];
""1362_name"" [label=""name""];
""1362_transfer"" [label=""transfer""];
""1362_transferFrom"" [label=""transferFrom""];
""1362_CryptoSanguoToken"" [label=""CryptoSanguoToken""];
""1362_listItem"" [label=""listItem""];
""1362_tokensOf"" [label=""tokensOf""];
""1362_issueCard"" [label=""issueCard""];
""1362_setOwner"" [label=""setOwner""];
""1362_ownerOf"" [label=""ownerOf""];
""1362_balanceOf"" [label=""balanceOf""];
""1362_removeAdmin"" [label=""removeAdmin""];
""1362_approve"" [label=""approve""];
""1362_buy"" [label=""buy""];
""1362_startingPriceOf"" [label=""startingPriceOf""];
""1362_implementsERC721"" [label=""implementsERC721""];
""1362_changePrice"" [label=""changePrice""];
""1362_nextPriceOf"" [label=""nextPriceOf""];
""1362_setItemRegistry"" [label=""setItemRegistry""];
""1362_symbol"" [label=""symbol""];
""1362__transfer"" [label=""_transfer""];
""1362_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1362_isAdmin"" [label=""isAdmin""];
""1362_tokenExists"" [label=""tokenExists""];
""1362_withdrawAmount"" [label=""withdrawAmount""];
""1362_approvedFor"" [label=""approvedFor""];
""1362_listMultipleItems"" [label=""listMultipleItems""];
""1362_priceOf"" [label=""priceOf""];
""1362_allOf"" [label=""allOf""];
""1362_calculateNextPrice"" [label=""calculateNextPrice""];
""1362_addAdmin"" [label=""addAdmin""];
""1362_isContract"" [label=""isContract""];
""1362_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1362_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1362_withdrawAll"" [label=""withdrawAll""];
""1362_calculateDevCut"" [label=""calculateDevCut""];
""1362__transfer"" -> ""1362_ownerOf"";
""1362_transferFrom"" -> ""1362_approvedFor"";
""1362_withdrawAll"" -> ""1362_onlyOwner"";
""1362_tokensOf"" -> ""1362_balanceOf"";
""1362_CryptoSanguoToken"" -> ""1362_issueCard"";
""1362_listMultipleItems"" -> ""1362_listItem"";
""1362_approve"" -> ""1362_ownerOf"";
""1362_listItemFromRegistry"" -> ""1362_onlyOwner"";
""1362_changePrice"" -> ""1362_onlyAdmins"";
""1362_buy"" -> ""1362_calculateDevCut"";
""1362_allOf"" -> ""1362_nextPriceOf"";
""1362_buy"" -> ""1362__transfer"";
""1362_buy"" -> ""1362_ownerOf"";
""1362_transferFrom"" -> ""1362__transfer"";
""1362_allOf"" -> ""1362_ownerOf"";
""1362_tokenExists"" -> ""1362_priceOf"";
""1362_withdrawAmount"" -> ""1362_onlyOwner"";
""1362_transfer"" -> ""1362__transfer"";
""1362_allOf"" -> ""1362_startingPriceOf"";
""1362_approve"" -> ""1362_tokenExists"";
""1362__transfer"" -> ""1362_tokenExists"";
""1362_buy"" -> ""1362_priceOf"";
""1362_allOf"" -> ""1362_priceOf"";
""1362_listMultipleItems"" -> ""1362_onlyAdmins"";
""1362_addAdmin"" -> ""1362_onlyOwner"";
""1362_listItem"" -> ""1362_onlyAdmins"";
""1362_nextPriceOf"" -> ""1362_calculateNextPrice"";
""1362_nextPriceOf"" -> ""1362_priceOf"";
""1362_removeAdmin"" -> ""1362_onlyOwner"";
""1362_enableERC721"" -> ""1362_onlyOwner"";
""1362_populateFromItemRegistry"" -> ""1362_onlyOwner"";
""1362_buy"" -> ""1362_nextPriceOf"";
""1362_setOwner"" -> ""1362_onlyOwner"";
""1362_populateFromItemRegistry"" -> ""1362_listItemFromRegistry"";
""1362_setItemRegistry"" -> ""1362_onlyOwner"";
""1362_listItemFromRegistry"" -> ""1362_listItem"";
""1362_transferFrom"" -> ""1362_onlyERC721"";
""1362_transfer"" -> ""1362_ownerOf"";
""1362_transfer"" -> ""1362_onlyERC721"";
""1362_tokensOf"" -> ""1362_ownerOf"";
""1362_approve"" -> ""1362_onlyERC721"";
""1362_buy"" -> ""1362_isContract"";
""1362_balanceOf"" -> ""1362_ownerOf"";
""1362_issueCard"" -> ""1362_onlyAdmins"";
}
"
0x6fdfce60998725f4cfb4cc57505a3abdbb6d0646.sol,SelfKeyToken,"contract SelfKeyToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function SelfKeyToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_SelfKeyToken {
label=""SelfKeyToken"";
""401_balanceOf"" [label=""balanceOf""];
""401_approve"" [label=""approve""];
""401_transferFrom"" [label=""transferFrom""];
""401_mintTo"" [label=""mintTo""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_totalSupply"" [label=""totalSupply""];
""401_transfer"" [label=""transfer""];
""401_changeOwner"" [label=""changeOwner""];
""401_SelfKeyToken"" [label=""SelfKeyToken""];
""401_fallback"" [label=""fallback""];
""401_killContract"" [label=""killContract""];
}
"
0x00416b9d728069edb0ceb04bc2b203fa7336d1f1.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_processTransaction"" [label=""processTransaction""];
""928_pullBalance"" [label=""pullBalance""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_refundTransaction"";
""928_fallback"" -> ""928_processTransaction"";
}
"
0x1ac68e35dbd49a7250fa1b1ceb9dbd3110edaf50.sol,VikkyToken,"contract VikkyToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public airdropClaimed; mapping (address => bool) public refundClaimed; mapping (address => bool) public locked; mapping(address => uint) public icoEtherContributed; mapping(address => uint) public icoTokensReceived; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint constant E18 = 10**18; uint constant E6 = 10**6; uint public totalSupply = 1000 * E6 * E18; uint public totalDistributed = 220 * E6 * E18; uint public totalRemaining = totalSupply.sub(totalDistributed); uint public tokensPerEth = 20000 * E18; uint public tokensAirdrop = 266 * E18; uint public tokensClaimedAirdrop = 0; uint public totalDistributedAirdrop = 20 * E6 * E18; uint public constant MIN_CONTRIBUTION = 1 ether / 100; uint public constant MIN_CONTRIBUTION_PRESALE = 1 ether; uint public constant MAX_CONTRIBUTION = 100 ether; uint public constant MIN_FUNDING_GOAL = 5000 ether; uint public constant DATE_PRESALE_START = 1523862000; uint public constant DATE_PRESALE_END = 1524466800; uint public constant DATE_ICO_START = 1524466860; uint public constant DATE_ICO_END = 1530342000; uint public constant BONUS_PRESALE = 30; uint public constant BONUS_ICO_ROUND1 = 20; uint public constant BONUS_ICO_ROUND2 = 10; uint public constant BONUS_ICO_ROUND3 = 5; event TokensPerEthUpdated(uint _tokensPerEth); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Refund(address indexed _owner, uint _amount, uint _tokens); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event Burn(address indexed burner, uint256 value); event LockRemoved(address indexed _participant); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1633_VikkyToken {
label=""VikkyToken"";
""1633_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1633_finishDistribution"" [label=""finishDistribution""];
""1633_approve"" [label=""approve""];
""1633_balanceOf"" [label=""balanceOf""];
""1633_removeLock"" [label=""removeLock""];
""1633_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""1633_icoThresholdReached"" [label=""icoThresholdReached""];
""1633_systemClaimAirdropMultiple"" [label=""systemClaimAirdropMultiple""];
""1633_allowance"" [label=""allowance""];
""1633_distr"" [label=""distr""];
""1633_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""1633_transfer"" [label=""transfer""];
""1633_atNow"" [label=""atNow""];
""1633_buyTokens"" [label=""buyTokens""];
""1633_reclaimFund"" [label=""reclaimFund""];
""1633_reclaimFundMultiple"" [label=""reclaimFundMultiple""];
""1633_doAirdrop"" [label=""doAirdrop""];
""1633_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1633_getTokenBalance"" [label=""getTokenBalance""];
""1633_distribution"" [label=""distribution""];
""1633_removeLockMultiple"" [label=""removeLockMultiple""];
""1633_transferFrom"" [label=""transferFrom""];
""1633_distributeAmounts"" [label=""distributeAmounts""];
""1633_VikkyToken"" [label=""VikkyToken""];
""1633_fallback"" [label=""fallback""];
""1633_transferOwnership"" [label=""transferOwnership""];
""1633_withdraw"" [label=""withdraw""];
""1633_burn"" [label=""burn""];
""1633_reclaimFund"" -> ""1633_atNow"";
""1633_removeLockMultiple"" -> ""1633_removeLock"";
""1633_distribution"" -> ""1633_distr"";
""1633_withdraw"" -> ""1633_onlyOwner"";
""1633_distributeAmounts"" -> ""1633_distr"";
""1633_distr"" -> ""1633_canDistr"";
""1633_adminClaimAirdropMultiple"" -> ""1633_doAirdrop"";
""1633_finishDistribution"" -> ""1633_onlyOwner"";
""1633_transferOwnership"" -> ""1633_onlyOwner"";
""1633_fallback"" -> ""1633_buyTokens"";
""1633_buyTokens"" -> ""1633_distr"";
""1633_transfer"" -> ""1633_onlyPayloadSize"";
""1633_systemClaimAirdropMultiple"" -> ""1633_doAirdrop"";
""1633_distribution"" -> ""1633_onlyOwner"";
""1633_VikkyToken"" -> ""1633_distr"";
""1633_updateTokensPerEth"" -> ""1633_atNow"";
""1633_transferFrom"" -> ""1633_onlyPayloadSize"";
""1633_reclaimFundMultiple"" -> ""1633_reclaimFund"";
""1633_withdrawForeignTokens"" -> ""1633_onlyOwner"";
""1633_reclaimFund"" -> ""1633_icoThresholdReached"";
""1633_finishDistribution"" -> ""1633_canDistr"";
""1633_distribution"" -> ""1633_canDistr"";
""1633_buyTokens"" -> ""1633_atNow"";
""1633_distributeAmounts"" -> ""1633_onlyOwner"";
""1633_buyTokens"" -> ""1633_canDistr"";
""1633_adminClaimAirdrop"" -> ""1633_doAirdrop"";
""1633_burn"" -> ""1633_onlyOwner"";
""1633_updateTokensPerEth"" -> ""1633_onlyOwner"";
""1633_distributeAmounts"" -> ""1633_canDistr"";
}
"
0xee68907c93b57d57a1c4d60940ff1b310e18e467.sol,ICOBuyer,"contract ICOBuyer is Ownable { event EtherReceived(address indexed _contributor, uint256 _amount); event EtherWithdrawn(uint256 _amount); event TokensWithdrawn(uint256 _balance); event ICOPurchased(uint256 _amount); event ICOStartBlockChanged(uint256 _icoStartBlock); event ExecutorChanged(address _executor); event CrowdSaleChanged(address _crowdSale); event TokenChanged(address _token); event PurchaseCapChanged(uint256 _purchaseCap); uint256 public icoStartBlock; address public crowdSale; address public executor; uint256 public purchaseCap; modifier onlyExecutorOrOwner() { require((msg.sender == executor) || (msg.sender == owner)); _; }",1,"subgraph cluster_424_ICOBuyer {
label=""ICOBuyer"";
""424_withdrawEther"" [label=""withdrawEther""];
""424_ICOBuyer"" [label=""ICOBuyer""];
""424_withdrawTokens"" [label=""withdrawTokens""];
""424_changeCrowdSale"" [label=""changeCrowdSale""];
""424_changeExecutor"" [label=""changeExecutor""];
""424_fallback"" [label=""fallback""];
""424_getBlockNumber"" [label=""getBlockNumber""];
""424_buyICO"" [label=""buyICO""];
""424_changeICOStartBlock"" [label=""changeICOStartBlock""];
""424_changePurchaseCap"" [label=""changePurchaseCap""];
""424_changeICOStartBlock"" -> ""424_onlyOwner"";
""424_changePurchaseCap"" -> ""424_onlyOwner"";
""424_changeCrowdSale"" -> ""424_onlyOwner"";
""424_changeExecutor"" -> ""424_onlyOwner"";
""424_buyICO"" -> ""424_getBlockNumber"";
""424_withdrawTokens"" -> ""424_onlyOwner"";
""424_withdrawEther"" -> ""424_onlyOwner"";
""424_buyICO"" -> ""424_onlyExecutorOrOwner"";
}
"
0x722baa20d3b42fc1ec0b63fb84ba3fda47da4a26.sol,Presale,"contract Presale is AccessService, Random { ELHeroToken tokenContract; mapping (uint16 => uint16) public cardPresaleCounter; mapping (address => uint16[]) OwnerToPresale; uint256 public jackpotBalance; event CardPreSelled(address indexed buyer, uint16 protoId); event Jackpot(address indexed _winner, uint256 _value, uint16 _type); constructor(address _nftAddr) public { addrAdmin = msg.sender; addrService = msg.sender; addrFinance = msg.sender; tokenContract = ELHeroToken(_nftAddr); cardPresaleCounter[1] = 20; cardPresaleCounter[2] = 20; cardPresaleCounter[3] = 20; cardPresaleCounter[4] = 20; cardPresaleCounter[5] = 20; cardPresaleCounter[6] = 20; cardPresaleCounter[7] = 20; cardPresaleCounter[8] = 20; cardPresaleCounter[9] = 20; cardPresaleCounter[10] = 20; cardPresaleCounter[11] = 20; cardPresaleCounter[12] = 20; cardPresaleCounter[13] = 20; cardPresaleCounter[14] = 20; cardPresaleCounter[15] = 20; cardPresaleCounter[16] = 20; cardPresaleCounter[17] = 20; cardPresaleCounter[18] = 20; cardPresaleCounter[19] = 20; cardPresaleCounter[20] = 20; cardPresaleCounter[21] = 20; cardPresaleCounter[22] = 20; cardPresaleCounter[23] = 20; cardPresaleCounter[24] = 20; cardPresaleCounter[25] = 20; }",1,"subgraph cluster_2545_Presale {
label=""Presale"";
""2545_withdraw"" [label=""withdraw""];
""2545_getBuyArray"" [label=""getBuyArray""];
""2545_cardPresale"" [label=""cardPresale""];
""2545_getCardCanPresaleCount"" [label=""getCardCanPresaleCount""];
""2545_constructor"" [label=""constructor""];
""2545_fallback"" [label=""fallback""];
""2545_setELHeroTokenAddr"" [label=""setELHeroTokenAddr""];
""2545_eventPirze"" [label=""eventPirze""];
""2545_getBuyCount"" [label=""getBuyCount""];
""2545_setELHeroTokenAddr"" -> ""2545_onlyAdmin"";
""2545_cardPresale"" -> ""2545_whenNotPaused"";
""2545_cardPresale"" -> ""2545__rand"";
""2545_eventPirze"" -> ""2545_onlyAdmin"";
}
"
0x7638a5f444eab0281ca1abff2c8029cbb806a566.sol,XOXOCoin,"contract XOXOCoin is ERC20 { using SafeMath for uint256; address owner1 = msg.sender; address owner2; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) times; mapping (address => mapping (uint256 => uint256)) dorpnum; mapping (address => mapping (uint256 => uint256)) dorptime; mapping (address => mapping (uint256 => uint256)) freeday; mapping (address => bool) public frozenAccount; mapping (address => bool) public airlist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 _Rate = 10 ** decimals; uint256 public totalSupply = 200000000 * _Rate; uint256 public totalDistributed = 0; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value; uint256 public _per = 1; bool public distributionClosed = true; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event FrozenFunds(address target, bool frozen); event Distr(address indexed to, uint256 amount); event DistrClosed(bool Closed); modifier onlyOwner() { require(msg.sender == owner1 || msg.sender == owner2); _; }",1,"subgraph cluster_1210_XOXOCoin {
label=""XOXOCoin"";
""1210_Set_per"" [label=""Set_per""];
""1210_getTokens"" [label=""getTokens""];
""1210_transfer"" [label=""transfer""];
""1210_freezeAccount"" [label=""freezeAccount""];
""1210_fallback"" [label=""fallback""];
""1210_closeDistribution"" [label=""closeDistribution""];
""1210_XOXOCoin"" [label=""XOXOCoin""];
""1210_transferFrom"" [label=""transferFrom""];
""1210_lockOf"" [label=""lockOf""];
""1210_freeze"" [label=""freeze""];
""1210_distr"" [label=""distr""];
""1210_nowInSeconds"" [label=""nowInSeconds""];
""1210_allowance"" [label=""allowance""];
""1210_transferOwnership"" [label=""transferOwnership""];
""1210_distribute"" [label=""distribute""];
""1210_approve"" [label=""approve""];
""1210_withdraw"" [label=""withdraw""];
""1210_balanceOf"" [label=""balanceOf""];
""1210_closeDistribution"" -> ""1210_onlyOwner"";
""1210_distribute"" -> ""1210_onlyOwner"";
""1210_transfer"" -> ""1210_lockOf"";
""1210_transferFrom"" -> ""1210_lockOf"";
""1210_transfer"" -> ""1210_onlyPayloadSize"";
""1210_transferOwnership"" -> ""1210_onlyOwner"";
""1210_freeze"" -> ""1210_onlyOwner"";
""1210_withdraw"" -> ""1210_onlyOwner"";
""1210_transferFrom"" -> ""1210_onlyPayloadSize"";
""1210_Set_per"" -> ""1210_onlyOwner"";
""1210_distribute"" -> ""1210_distr"";
""1210_fallback"" -> ""1210_getTokens"";
""1210_freeze"" -> ""1210_freezeAccount"";
}
"
0x33ac37240f71629294de98e0b51f904fda17a366.sol,enigma,contract enigma { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_enigma {
label=""enigma"";
""143_fallback"" [label=""fallback""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_StopGame"" [label=""StopGame""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_Activate"" [label=""Activate""];
""143_Try"" [label=""Try""];
}
"
0x39e568276531f17da3c76d54400cfd8300201652.sol,CSC,"contract CSC { mapping (address => uint256) private balances; mapping (address => uint256[2]) private lockedBalances; string public name; uint8 public decimals; string public symbol; uint256 public totalSupply; address public owner; uint256 private icoLockUntil = 1543593540; event Transfer(address indexed _from, address indexed _to, uint256 _value); constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, address _owner, address[] _lockedAddress, uint256[] _lockedBalances, uint256[] _lockedTimes ) public { balances[_owner] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; owner = _owner; for(uint i = 0;i < _lockedAddress.length;i++){ lockedBalances[_lockedAddress[i]][0] = _lockedBalances[i]; lockedBalances[_lockedAddress[i]][1] = _lockedTimes[i]; }",1,"subgraph cluster_373_CSC {
label=""CSC"";
""373_balanceOf"" [label=""balanceOf""];
""373_withdraw"" [label=""withdraw""];
""373_burnFrom"" [label=""burnFrom""];
""373_setIcoLockUntil"" [label=""setIcoLockUntil""];
""373_transfer"" [label=""transfer""];
""373_withdrawTo"" [label=""withdrawTo""];
""373_constructor"" [label=""constructor""];
""373_makeCoin"" [label=""makeCoin""];
}
"
0x70052a651eec65f98925e845820a0aa5749b033d.sol,ATxBuyback,"contract ATxBuyback is Object, ATxBuybackInterface, ServiceAllowance { using SafeMath for uint; struct FeeData { uint feeValue; uint feeDecimals; }",1,"subgraph cluster_1767_ATxBuyback {
label=""ATxBuyback"";
""1767_tokenFallback"" [label=""tokenFallback""];
""1767_withdrawAllEth"" [label=""withdrawAllEth""];
""1767_fallback"" [label=""fallback""];
""1767_getRdFee"" [label=""getRdFee""];
""1767__takeRdFee"" [label=""_takeRdFee""];
""1767_setPrice"" [label=""setPrice""];
""1767_isTransferAllowed"" [label=""isTransferAllowed""];
""1767_setRdFee"" [label=""setRdFee""];
""1767_ATxBuyback"" [label=""ATxBuyback""];
""1767_setRdCollectorAddress"" [label=""setRdCollectorAddress""];
""1767_setActive"" [label=""setActive""];
""1767__validFee"" [label=""_validFee""];
""1767_withdrawAllEth"" -> ""1767_onlyContractOwner"";
""1767_setActive"" -> ""1767_onlyContractOwner"";
""1767_tokenFallback"" -> ""1767__takeRdFee"";
""1767_setPrice"" -> ""1767_onlyContractOwner"";
""1767_isTransferAllowed"" -> ""1767_onlyActive"";
""1767_setRdCollectorAddress"" -> ""1767_onlyContractOwner"";
""1767__takeRdFee"" -> ""1767__validFee"";
""1767_setRdFee"" -> ""1767_onlyContractOwner"";
""1767_setRdFee"" -> ""1767__validFee"";
}
"
0xf051a2f404435d3413337aae24171342fddc8571.sol,FoxicoPool,"contract FoxicoPool is Ownable { using SafeMath for uint256; mapping (address => uint256) public deposited; mapping (address => uint256) public claimed; uint256 public startTime; uint256 public endTime; address public wallet; bool public refundEnabled; event Refunded(address indexed beneficiary, uint256 weiAmount); event AddDeposit(address indexed beneficiary, uint256 value); function setStartTime(uint256 _startTime) public onlyOwner{ startTime = _startTime; }",1,"subgraph cluster_477_FoxicoPool {
label=""FoxicoPool"";
""477_deposit"" [label=""deposit""];
""477_FoxicoPool"" [label=""FoxicoPool""];
""477_setRefundEnabled"" [label=""setRefundEnabled""];
""477_setWallet"" [label=""setWallet""];
""477_refundFunds"" [label=""refundFunds""];
""477_fallback"" [label=""fallback""];
""477_setStartTime"" [label=""setStartTime""];
""477_addFunds"" [label=""addFunds""];
""477_validPurchase"" [label=""validPurchase""];
""477_forwardFunds"" [label=""forwardFunds""];
""477_refundWallet"" [label=""refundWallet""];
""477_setEndTime"" [label=""setEndTime""];
""477_claimRefund"" [label=""claimRefund""];
""477_setWallet"" -> ""477_onlyOwner"";
""477_deposit"" -> ""477_validPurchase"";
""477_setEndTime"" -> ""477_onlyOwner"";
""477_fallback"" -> ""477_deposit"";
""477_claimRefund"" -> ""477_refundFunds"";
""477_forwardFunds"" -> ""477_onlyOwner"";
""477_addFunds"" -> ""477_onlyOwner"";
""477_refundWallet"" -> ""477_refundFunds"";
""477_setStartTime"" -> ""477_onlyOwner"";
""477_setRefundEnabled"" -> ""477_onlyOwner"";
""477_refundWallet"" -> ""477_onlyOwner"";
}
"
0xeed618c15d12c635c3c319aee7bded2e2879aea0.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private _owner; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },1,"subgraph cluster_20_PlayerBookReceiverInterface {
label=""PlayerBookReceiverInterface"";
""20_receivePlayerInfo"" [label=""receivePlayerInfo""];
""20_receivePlayerNameList"" [label=""receivePlayerNameList""];
}
"
0x86e4dc25259ee2191cd8ae40e1865b9f0319646c.sol,CryptoRomeLandDistribution,"contract CryptoRomeLandDistribution is CryptoRomeControl { using SafeMath for uint256; address public newContractAddress; CryptoRomeLandComposableNFT public cryptoRomeLandNFTContract; ImprovementGeneration public improvementGenContract; uint256 public villageInventoryPrice; uint256 public numImprovementsPerVillage; uint256 constant public LOWEST_VILLAGE_INVENTORY_PRICE = 100000000000000000; constructor (address _cryptoRomeLandNFTContractAddress, address _improvementGenContractAddress) public { require (_cryptoRomeLandNFTContractAddress != address(0)); require (_improvementGenContractAddress != address(0)); paused = true; cryptoRomeLandNFTContract = CryptoRomeLandComposableNFT(_cryptoRomeLandNFTContractAddress); improvementGenContract = ImprovementGeneration(_improvementGenContractAddress); villageInventoryPrice = LOWEST_VILLAGE_INVENTORY_PRICE; numImprovementsPerVillage = 3; }",1,"subgraph cluster_3912_CryptoRomeLandDistribution {
label=""CryptoRomeLandDistribution"";
""3912_setNumImprovementsPerVillage"" [label=""setNumImprovementsPerVillage""];
""3912_batchIssueLand"" [label=""batchIssueLand""];
""3912_createLand"" [label=""createLand""];
""3912_batchCreateVillages"" [label=""batchCreateVillages""];
""3912_purchaseFromVillageInventory"" [label=""purchaseFromVillageInventory""];
""3912_setNewAddress"" [label=""setNewAddress""];
""3912_batchIssueVillages"" [label=""batchIssueVillages""];
""3912_computeFee"" [label=""computeFee""];
""3912_setCryptoRomeLandNFTContract"" [label=""setCryptoRomeLandNFTContract""];
""3912_constructor"" [label=""constructor""];
""3912_setVillageInventoryPrice"" [label=""setVillageInventoryPrice""];
""3912_issueVillageWithImprovementsForPromo"" [label=""issueVillageWithImprovementsForPromo""];
""3912_batchTransferTo"" [label=""batchTransferTo""];
""3912__createLandWithImprovements"" [label=""_createLandWithImprovements""];
""3912__createVillageWithImprovements"" [label=""_createVillageWithImprovements""];
""3912_transferTo"" [label=""transferTo""];
""3912_batchCreateLand"" [label=""batchCreateLand""];
""3912__createVillageWithImprovementsFromInv"" [label=""_createVillageWithImprovementsFromInv""];
""3912_issueLand"" [label=""issueLand""];
""3912_setImprovementGenContract"" [label=""setImprovementGenContract""];
""3912_createLand"" -> ""3912__createLandWithImprovements"";
""3912_setNewAddress"" -> ""3912_onlyOwner"";
""3912_purchaseFromVillageInventory"" -> ""3912__createVillageWithImprovementsFromInv"";
""3912_setImprovementGenContract"" -> ""3912_onlyOwner"";
""3912_issueLand"" -> ""3912_onlyOwner"";
""3912_transferTo"" -> ""3912_onlyOwner"";
""3912_batchIssueVillages"" -> ""3912_onlyOwner"";
""3912__createLandWithImprovements"" -> ""3912__createVillageWithImprovements"";
""3912_createLand"" -> ""3912_onlyOwner"";
""3912_batchCreateVillages"" -> ""3912__createVillageWithImprovements"";
""3912_purchaseFromVillageInventory"" -> ""3912_whenNotPaused"";
""3912__createLandWithImprovements"" -> ""3912__createLandWithImprovements"";
""3912_batchCreateVillages"" -> ""3912_onlyOwner"";
""3912_issueLand"" -> ""3912__createLandWithImprovements"";
""3912_setCryptoRomeLandNFTContract"" -> ""3912_onlyOwner"";
""3912_batchIssueLand"" -> ""3912_issueLand"";
""3912_batchTransferTo"" -> ""3912_onlyOwner"";
""3912_purchaseFromVillageInventory"" -> ""3912_computeFee"";
""3912_issueVillageWithImprovementsForPromo"" -> ""3912_onlyOwner"";
""3912_batchIssueLand"" -> ""3912_onlyOwner"";
""3912_setVillageInventoryPrice"" -> ""3912_onlyOwner"";
""3912_batchIssueVillages"" -> ""3912__createVillageWithImprovements"";
""3912_batchCreateLand"" -> ""3912_onlyOwner"";
""3912_batchCreateLand"" -> ""3912__createLandWithImprovements"";
""3912_setNumImprovementsPerVillage"" -> ""3912_onlyOwner"";
}
"
0x261ace754fba8af93e1fecdff13640540402940f.sol,Phila_Token,"contract Phila_Token is ERC20Interface, Owned { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 0; uint private constant _totalSupply = 10000000; address public vaultAddress; bool public fundingEnabled; uint public totalCollected; uint public tokenPrice; mapping(address => uint) balances; constructor() public { balances[this] = _totalSupply; emit Transfer(address(0), this, _totalSupply); }",1,"subgraph cluster_499_Phila_Token {
label=""Phila_Token"";
""499_transfer"" [label=""transfer""];
""499_approve"" [label=""approve""];
""499_constructor"" [label=""constructor""];
""499_fallback"" [label=""fallback""];
""499_balanceOf"" [label=""balanceOf""];
""499_transferFrom"" [label=""transferFrom""];
""499_totalSupply"" [label=""totalSupply""];
""499_allowance"" [label=""allowance""];
""499_setVaultAddress"" [label=""setVaultAddress""];
""499_claimTokens"" [label=""claimTokens""];
""499_setFundingEnabled"" [label=""setFundingEnabled""];
""499_updateTokenPrice"" [label=""updateTokenPrice""];
""499_updateTokenPrice"" -> ""499_onlyOwner"";
""499_claimTokens"" -> ""499_onlyOwner"";
""499_setVaultAddress"" -> ""499_onlyOwner"";
""499_setFundingEnabled"" -> ""499_onlyOwner"";
}
"
0xf030b8fbe57c4498298449fc78a0f7054a5ef76d.sol,ArkToken,"contract ArkToken is ERC721, Ownable { using SafeMath for uint256; uint256 private totalTokens; uint256 public developerCut; mapping (uint256 => Animal) public arkData; mapping (uint256 => address) private tokenOwner; mapping (uint256 => uint256) public babies; mapping (uint256 => uint256[2]) public babyMommas; mapping (uint256 => uint256) public mates; mapping (uint256 => uint256) public babyMakinPrice; mapping (uint256 => address) private tokenApprovals; mapping (address => uint256[]) private ownedTokens; mapping(uint256 => uint256) private ownedTokensIndex; mapping (address => uint256) public birtherBalances; event Purchase(uint256 indexed _tokenId, address indexed _buyer, address indexed _seller, uint256 _purchasePrice); event Birth(address indexed _birther, uint256 indexed _mom, uint256 _dad, uint256 indexed _baby); uint256 private firstCap = 0.5 ether; uint256 private secondCap = 1.0 ether; uint256 private thirdCap = 1.5 ether; uint256 private finalCap = 3.0 ether; struct Animal { uint256 price; uint256 lastPrice; address owner; address birther; uint256 birtherPct; uint8 gender; }",1,"subgraph cluster_1673_ArkToken {
label=""ArkToken"";
""1673_createToken"" [label=""createToken""];
""1673_clearApproval"" [label=""clearApproval""];
""1673_transfer"" [label=""transfer""];
""1673_getBabyMommas"" [label=""getBabyMommas""];
""1673_approve"" [label=""approve""];
""1673_checkBalance"" [label=""checkBalance""];
""1673_clearApprovalAndTransfer"" [label=""clearApprovalAndTransfer""];
""1673_buyToken"" [label=""buyToken""];
""1673_isApprovedFor"" [label=""isApprovedFor""];
""1673_transferToken"" [label=""transferToken""];
""1673_removeToken"" [label=""removeToken""];
""1673_tokenExists"" [label=""tokenExists""];
""1673_createBabies"" [label=""createBabies""];
""1673_getArkData"" [label=""getArkData""];
""1673_withdrawBalance"" [label=""withdrawBalance""];
""1673_balanceOf"" [label=""balanceOf""];
""1673_name"" [label=""name""];
""1673_totalSupply"" [label=""totalSupply""];
""1673_checkBirth"" [label=""checkBirth""];
""1673_getNextPrice"" [label=""getNextPrice""];
""1673__mint"" [label=""_mint""];
""1673_createMultiple"" [label=""createMultiple""];
""1673_takeOwnership"" [label=""takeOwnership""];
""1673_getBabyMakinPrice"" [label=""getBabyMakinPrice""];
""1673_approvedFor"" [label=""approvedFor""];
""1673_addToken"" [label=""addToken""];
""1673_createBaby"" [label=""createBaby""];
""1673_withdraw"" [label=""withdraw""];
""1673_getBirthCut"" [label=""getBirthCut""];
""1673_symbol"" [label=""symbol""];
""1673_tokensOf"" [label=""tokensOf""];
""1673_ownerOf"" [label=""ownerOf""];
""1673_autoBirth"" [label=""autoBirth""];
""1673_checkBirth"" -> ""1673_autoBirth"";
""1673_removeToken"" -> ""1673_balanceOf"";
""1673_takeOwnership"" -> ""1673_clearApprovalAndTransfer"";
""1673_createToken"" -> ""1673_onlyAdmin"";
""1673_createMultiple"" -> ""1673_createToken"";
""1673_transferToken"" -> ""1673_addToken"";
""1673_transferToken"" -> ""1673_clearApproval"";
""1673_isApprovedFor"" -> ""1673_approvedFor"";
""1673_createBabies"" -> ""1673_createBaby"";
""1673_approve"" -> ""1673_ownerOf"";
""1673_takeOwnership"" -> ""1673_isApprovedFor"";
""1673_transfer"" -> ""1673_onlyOwnerOf"";
""1673_autoBirth"" -> ""1673_transferToken"";
""1673_addToken"" -> ""1673_balanceOf"";
""1673_buyToken"" -> ""1673_isNotContract"";
""1673_createBaby"" -> ""1673_onlyAdmin"";
""1673_buyToken"" -> ""1673_getNextPrice"";
""1673_transferToken"" -> ""1673_removeToken"";
""1673_clearApprovalAndTransfer"" -> ""1673_ownerOf"";
""1673_createToken"" -> ""1673__mint"";
""1673_approve"" -> ""1673_approvedFor"";
""1673_approve"" -> ""1673_onlyOwnerOf"";
""1673_createMultiple"" -> ""1673_onlyAdmin"";
""1673_createBabies"" -> ""1673_onlyAdmin"";
""1673_removeToken"" -> ""1673_ownerOf"";
""1673_transferToken"" -> ""1673_tokenExists"";
""1673_getArkData"" -> ""1673_getNextPrice"";
""1673_clearApprovalAndTransfer"" -> ""1673_isNotContract"";
""1673_transfer"" -> ""1673_clearApprovalAndTransfer"";
""1673_clearApprovalAndTransfer"" -> ""1673_addToken"";
""1673__mint"" -> ""1673_addToken"";
""1673_buyToken"" -> ""1673_transferToken"";
""1673_withdraw"" -> ""1673_onlyAdmin"";
""1673_clearApproval"" -> ""1673_ownerOf"";
""1673_takeOwnership"" -> ""1673_ownerOf"";
""1673_clearApprovalAndTransfer"" -> ""1673_removeToken"";
""1673_clearApprovalAndTransfer"" -> ""1673_clearApproval"";
""1673_buyToken"" -> ""1673_checkBirth"";
}
"
0xe01ba6c593003b0edcd43b7839a7c36b00a44dfc.sol,SBITokenCrowdsale,"contract SBITokenCrowdsale is Owned, CrowdsaleParameters { using SafeMath for uint256; string public name = ; SBIToken private token; address public bank; address saleWalletAddress; uint private tokenMultiplier = 10; uint public totalCollected = 0; uint public saleStartTimestamp; uint public saleStopTimestamp; uint public saleGoal; bool public goalReached = false; uint public preicoTokensPerEth = 27314; uint public tokensPerEth = 10500; mapping (address => uint256) private investmentRecords; address crowdsaleAddress = this; uint256 public constant saleStartDate = 1530403200; uint256 public constant saleEndDate = 1535759940; uint256 public constant preSaleStartDate = 1529020800; uint256 public constant preSaleEndDate = 1530403140; uint public preSaleAmount = 5800000; event TokenSale(address indexed tokenReceiver, uint indexed etherAmount, uint indexed tokenAmount, uint tokensPerEther); event FundTransfer(address indexed from, address indexed to, uint indexed amount); function SBITokenCrowdsale(address _tokenAddress, address _bankAddress) public { token = SBIToken(_tokenAddress); bank = _bankAddress; tokenMultiplier = tokenMultiplier ** token.decimals(); saleWalletAddress = generalSaleWallet.addr; saleGoal = generalSaleWallet.amount; }",1,"subgraph cluster_1145_SBITokenCrowdsale {
label=""SBITokenCrowdsale"";
""1145_processPayment"" [label=""processPayment""];
""1145_SBITokenCrowdsale"" [label=""SBITokenCrowdsale""];
""1145_isICOActive"" [label=""isICOActive""];
""1145_fallback"" [label=""fallback""];
""1145_setTokenRate"" [label=""setTokenRate""];
""1145_safeWithdrawal"" [label=""safeWithdrawal""];
""1145_kill"" [label=""kill""];
""1145_processPayment"" -> ""1145_isICOActive"";
""1145_kill"" -> ""1145_onlyOwner"";
""1145_fallback"" -> ""1145_processPayment"";
""1145_safeWithdrawal"" -> ""1145_onlyOwner"";
""1145_kill"" -> ""1145_isICOActive"";
""1145_setTokenRate"" -> ""1145_onlyOwner"";
}
"
0xed616b87b2b441e4a36d23f27a660ea0f0faccbd.sol,Destructible,contract Destructible is Ownable { function Destructible() payable { },1,"subgraph cluster_234_Destructible {
label=""Destructible"";
""234_destroy"" [label=""destroy""];
""234_destroyAndSend"" [label=""destroyAndSend""];
""234_Destructible"" [label=""Destructible""];
""234_destroy"" -> ""234_onlyOwner"";
""234_destroyAndSend"" -> ""234_onlyOwner"";
}
"
0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_470_RefundVault {
label=""RefundVault"";
""470_deposit"" [label=""deposit""];
""470_RefundVault"" [label=""RefundVault""];
""470_refund"" [label=""refund""];
""470_enableRefunds"" [label=""enableRefunds""];
""470_close"" [label=""close""];
""470_enableRefunds"" -> ""470_onlyOwner"";
""470_deposit"" -> ""470_onlyOwner"";
""470_close"" -> ""470_onlyOwner"";
}
"
0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_183_Destructible {
label=""Destructible"";
""183_Destructible"" [label=""Destructible""];
""183_destroy"" [label=""destroy""];
""183_destroyAndSend"" [label=""destroyAndSend""];
""183_destroyAndSend"" -> ""183_onlyOwner"";
""183_destroy"" -> ""183_onlyOwner"";
}
"
0x929e488770ae5218cf4bb5387a390bd36b2135dd.sol,QUIZ_QUIZ,contract QUIZ_QUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_QUIZ_QUIZ {
label=""QUIZ_QUIZ"";
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_New"" [label=""New""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_fallback"" [label=""fallback""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x36ed5fbd27abf98f7081f1692ce48abab37db172.sol,Quiz_BliZ,contract Quiz_BliZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Quiz_BliZ {
label=""Quiz_BliZ"";
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0xf099c6ecb16575393b3ba6ac57b4ead943353a52.sol,BuddhaTower,"contract BuddhaTower { event onBuy ( address indexed buyerAddress, uint256 amount, uint256 currentHeight ); event onSplit( uint round, uint luckyNumber, address luckyPlayer ); event onTimeup( uint round, address lastBuyer ); event onQualifySuccess( address applier ); struct RoundData { uint256 maxHeight; uint256 lotteryPool; uint256 peakPool; uint256 tokenPot; uint[][] buyinfo; address[] buyAddress; uint256 startTime; uint256 endTime; address[] lotteryWinners; address finalWinner; }",1,"subgraph cluster_1969_BuddhaTower {
label=""BuddhaTower"";
""1969_wipeAll"" [label=""wipeAll""];
""1969_emergencyStart"" [label=""emergencyStart""];
""1969_splitLottery"" [label=""splitLottery""];
""1969_getQualified"" [label=""getQualified""];
""1969_constructor"" [label=""constructor""];
""1969_getLotteryWinner"" [label=""getLotteryWinner""];
""1969_endTime"" [label=""endTime""];
""1969_emergencyClose"" [label=""emergencyClose""];
""1969_activate"" [label=""activate""];
""1969_getLotteryWinnerLength"" [label=""getLotteryWinnerLength""];
""1969_getBuyInfoLength"" [label=""getBuyInfoLength""];
""1969_takeDevCut"" [label=""takeDevCut""];
""1969_buy"" [label=""buy""];
""1969_moveFromBanlist"" [label=""moveFromBanlist""];
""1969_getBuyAddress"" [label=""getBuyAddress""];
""1969_deposit"" [label=""deposit""];
""1969_getBuyInfo"" [label=""getBuyInfo""];
""1969_withdrawEth"" [label=""withdrawEth""];
""1969_addToBanlist"" [label=""addToBanlist""];
""1969_emergencyClose"" -> ""1969_onlyOwner"";
""1969_wipeAll"" -> ""1969_onlyOwner"";
""1969_withdrawEth"" -> ""1969_isBaned"";
""1969_deposit"" -> ""1969_buy"";
""1969_moveFromBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_endTime"";
""1969_deposit"" -> ""1969_isHuman"";
""1969_deposit"" -> ""1969_isBaned"";
""1969_emergencyStart"" -> ""1969_onlyOwner"";
""1969_deposit"" -> ""1969_isActive"";
""1969_withdrawEth"" -> ""1969_isHuman"";
""1969_constructor"" -> ""1969_activate"";
""1969_deposit"" -> ""1969_isWithinLimits"";
""1969_addToBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_splitLottery"";
""1969_activate"" -> ""1969_onlyOwner"";
""1969_takeDevCut"" -> ""1969_onlyOwner"";
}
"
0x7562eacac20093065c37ec6111baae15f152958c.sol,AICrypto,"contract AICrypto is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function AICrypto() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_AICrypto {
label=""AICrypto"";
""706_AICrypto"" [label=""AICrypto""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0xd871a7ce9bcf9cfbefbca3ede0ce53ba1787dfc9.sol,try_to_play,contract try_to_play { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_try_to_play {
label=""try_to_play"";
""143_NewQuestion"" [label=""NewQuestion""];
""143_fallback"" [label=""fallback""];
""143_StopGame"" [label=""StopGame""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
""143_ActivateContract"" [label=""ActivateContract""];
}
"
0x708a64eba17df26cd7085c494b725160ba1a6b7d.sol,RefundEscrow,"contract RefundEscrow is Ownable, ConditionalEscrow { enum State {Active, Refunding, Closed}",1,"subgraph cluster_2226_RefundEscrow {
label=""RefundEscrow"";
""2226_beneficiaryWithdraw"" [label=""beneficiaryWithdraw""];
""2226_withdrawalAllowed"" [label=""withdrawalAllowed""];
""2226_close"" [label=""close""];
""2226_deposit"" [label=""deposit""];
""2226_constructor"" [label=""constructor""];
""2226_enableRefunds"" [label=""enableRefunds""];
""2226_enableRefunds"" -> ""2226_onlyOwner"";
""2226_deposit"" -> ""2226_deposit"";
""2226_close"" -> ""2226_onlyOwner"";
}
"
0x6f5c1ed62a4fa41cfc332d81fafd3cd38aacbd85.sol,Vault,"contract Vault is TokenVault { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event OpenDate(uint date); mapping (address => uint) public Deposits; uint minDeposit; bool Locked; uint Date; function initVault() payable open { Owner = msg.sender; minDeposit = 0.25 ether; Locked = false; deposit(); }",1,"subgraph cluster_115_TokenVault {
label=""TokenVault"";
""115_withdrawToken"" [label=""withdrawToken""];
""115_emtpyTo"" [label=""emtpyTo""];
""115_withdrawTokenTo"" [label=""withdrawTokenTo""];
""115_withdrawTokenTo"" -> ""115_onlyOwner"";
""115_emtpyTo"" -> ""115_withdrawTokenTo"";
""115_withdrawToken"" -> ""115_withdrawTokenTo"";
}
"
0x7229bb50da9c01b28b9f1aace7711605d88afbd3.sol,OysterPrePearl,"contract OysterPrePearl { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 0; uint256 public funds = 0; address public owner; address public partner; bool public saleClosed = false; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function OysterPrePearl() public { owner = msg.sender; partner = 0x0524Fe637b77A6F5f0b3a024f7fD9Fe1E688A291; }",1,"subgraph cluster_522_OysterPrePearl {
label=""OysterPrePearl"";
""522_fallback"" [label=""fallback""];
""522_OysterPrePearl"" [label=""OysterPrePearl""];
""522_transfer"" [label=""transfer""];
""522__transfer"" [label=""_transfer""];
""522_openSale"" [label=""openSale""];
""522_approve"" [label=""approve""];
""522_closeSale"" [label=""closeSale""];
""522_burnFrom"" [label=""burnFrom""];
""522_transferFrom"" [label=""transferFrom""];
""522_approveAndCall"" [label=""approveAndCall""];
""522_burn"" [label=""burn""];
""522_withdrawFunds"" [label=""withdrawFunds""];
""522_openSale"" -> ""522_onlyOwner"";
""522_withdrawFunds"" -> ""522_onlyAuth"";
""522_transfer"" -> ""522__transfer"";
""522_transferFrom"" -> ""522__transfer"";
""522_closeSale"" -> ""522_onlyOwner"";
""522_approveAndCall"" -> ""522_approve"";
}
"
0xeb71e963645f1e76f233f70e1b0815e8f089bbc8.sol,SimplePHXExchange,contract SimplePHXExchange { uint public ScaleFactor = 10 ** 18; address[] public tknOfferors; mapping(address => uint256) public tknAddrNdx; mapping(address => uint256) public tknTokensOffered; mapping(address => uint256) public tknPricePerToken; address[] public ethOfferors; mapping(address => uint256) public ethAddrNdx; mapping(address => uint256) public ethEtherOffered; mapping(address => uint256) public ethPricePerToken; ERC20Token public phxCoin; function SimplePHXExchange() public { phxCoin = ERC20Token(0x14b759A158879B133710f4059d32565b4a66140C); tknOfferors.push(0x0); ethOfferors.push(0x0); },1,"subgraph cluster_657_SimplePHXExchange {
label=""SimplePHXExchange"";
""657_getTknOfferor"" [label=""getTknOfferor""];
""657_cancelTknOffer"" [label=""cancelTknOffer""];
""657_buyEth"" [label=""buyEth""];
""657_getNumEthOfferors"" [label=""getNumEthOfferors""];
""657__cancelTknOffer"" [label=""_cancelTknOffer""];
""657_getEthOfferPrice"" [label=""getEthOfferPrice""];
""657_SimplePHXExchange"" [label=""SimplePHXExchange""];
""657_cancelEthOffer"" [label=""cancelEthOffer""];
""657_updateTknPrice"" [label=""updateTknPrice""];
""657_getEthOfferor"" [label=""getEthOfferor""];
""657__cancelEthOffer"" [label=""_cancelEthOffer""];
""657_getTknOfferPrice"" [label=""getTknOfferPrice""];
""657_buyTkn"" [label=""buyTkn""];
""657_offerTkn"" [label=""offerTkn""];
""657_getEthOfferAmount"" [label=""getEthOfferAmount""];
""657_offerEth"" [label=""offerEth""];
""657_getNumTknOfferors"" [label=""getNumTknOfferors""];
""657_getTknOfferAmount"" [label=""getTknOfferAmount""];
""657_updateEthPrice"" [label=""updateEthPrice""];
""657__humanSender"" [label=""_humanSender""];
""657_offerEth"" -> ""657__humanSender"";
""657_cancelEthOffer"" -> ""657__cancelEthOffer"";
""657_buyEth"" -> ""657__humanSender"";
""657_offerTkn"" -> ""657__humanSender"";
""657_buyTkn"" -> ""657__humanSender"";
""657_cancelTknOffer"" -> ""657__cancelTknOffer"";
""657_buyEth"" -> ""657__cancelEthOffer"";
""657_buyTkn"" -> ""657__cancelTknOffer"";
}
"
0x50a667b73223bc612bcc43200120b5c46ee6b4e9.sol,RC,"contract RC is ICOEngineInterface, KYCBase { using SafeMath for uint256; TokenSale tokenSaleContract; uint256 public startTime; uint256 public endTime; uint256 public etherMinimum; uint256 public soldTokens; uint256 public remainingTokens; uint256 public oneTokenInFiatWei; mapping(address => uint256) public etherUser; mapping(address => uint256) public pendingTokenUser; mapping(address => uint256) public tokenUser; uint256[] public tokenThreshold; uint256[] public bonusThreshold; function RC(address _tokenSaleContract, uint256 _oneTokenInFiatWei, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) { require ( _tokenSaleContract != 0 ); require ( _oneTokenInFiatWei != 0 ); require( _remainingTokens != 0 ); require ( _tokenThreshold.length != 0 ); require ( _tokenThreshold.length == _bonusThreshold.length ); bonusThreshold = _bonusThreshold; tokenThreshold = _tokenThreshold; tokenSaleContract = TokenSale(_tokenSaleContract); tokenSaleContract.addMeByRC(); soldTokens = 0; remainingTokens = _remainingTokens; oneTokenInFiatWei = _oneTokenInFiatWei; etherMinimum = _etherMinimum; setTimeRC( _startTime, _endTime ); }",1,"subgraph cluster_1999_RCpro {
label=""RCpro"";
""1999_changeMinimum"" [label=""changeMinimum""];
""1999_totalTokens"" [label=""totalTokens""];
""1999_price"" [label=""price""];
""1999_userBalance"" [label=""userBalance""];
""1999_claimTokenBonus"" [label=""claimTokenBonus""];
""1999_startTime"" [label=""startTime""];
""1999_ended"" [label=""ended""];
""1999_fallback"" [label=""fallback""];
""1999_endTime"" [label=""endTime""];
""1999_giveToken"" [label=""giveToken""];
""1999_releaseTokensTo"" [label=""releaseTokensTo""];
""1999_withdraw"" [label=""withdraw""];
""1999_takeEther"" [label=""takeEther""];
""1999_refundEther"" [label=""refundEther""];
""1999_setTime"" [label=""setTime""];
""1999_setTimeRC"" [label=""setTimeRC""];
""1999_remainingTokens"" [label=""remainingTokens""];
""1999_started"" [label=""started""];
""1999_RCpro"" [label=""RCpro""];
""1999_RCpro"" -> ""1999_KYCBase"";
""1999_releaseTokensTo"" -> ""1999_takeEther"";
""1999_refundEther"" -> ""1999_onlyTokenSaleOwner"";
""1999_releaseTokensTo"" -> ""1999_giveToken"";
""1999_fallback"" -> ""1999_claimTokenBonus"";
""1999_changeMinimum"" -> ""1999_onlyTokenSaleOwner"";
""1999_fallback"" -> ""1999_takeEther"";
""1999_setTime"" -> ""1999_onlyTokenSaleOwner"";
""1999_withdraw"" -> ""1999_onlyTokenSaleOwner"";
""1999_RCpro"" -> ""1999_setTimeRC"";
}
"
0x887834d3b8d450b6bab109c252df3da286d73ce4.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1161_MiniMeToken {
label=""MiniMeToken"";
""1161_approveAndCall"" [label=""approveAndCall""];
""1161_totalSupply"" [label=""totalSupply""];
""1161_balanceOf"" [label=""balanceOf""];
""1161_updateValueAtNow"" [label=""updateValueAtNow""];
""1161_min"" [label=""min""];
""1161_createCloneToken"" [label=""createCloneToken""];
""1161_totalSupplyAt"" [label=""totalSupplyAt""];
""1161_enableTransfers"" [label=""enableTransfers""];
""1161_isContract"" [label=""isContract""];
""1161_balanceOfAt"" [label=""balanceOfAt""];
""1161_destroyTokens"" [label=""destroyTokens""];
""1161_getValueAt"" [label=""getValueAt""];
""1161_allowance"" [label=""allowance""];
""1161_MiniMeToken"" [label=""MiniMeToken""];
""1161_transferFrom"" [label=""transferFrom""];
""1161_fallback"" [label=""fallback""];
""1161_doTransfer"" [label=""doTransfer""];
""1161_claimTokens"" [label=""claimTokens""];
""1161_getBlockNumber"" [label=""getBlockNumber""];
""1161_transfer"" [label=""transfer""];
""1161_generateTokens"" [label=""generateTokens""];
""1161_approve"" [label=""approve""];
""1161_totalSupply"" -> ""1161_totalSupplyAt"";
""1161_destroyTokens"" -> ""1161_onlyController"";
""1161_balanceOfAt"" -> ""1161_min"";
""1161_generateTokens"" -> ""1161_balanceOf"";
""1161_MiniMeToken"" -> ""1161_getBlockNumber"";
""1161_doTransfer"" -> ""1161_isContract"";
""1161_generateTokens"" -> ""1161_onlyController"";
""1161_totalSupplyAt"" -> ""1161_getValueAt"";
""1161_balanceOf"" -> ""1161_balanceOfAt"";
""1161_generateTokens"" -> ""1161_updateValueAtNow"";
""1161_enableTransfers"" -> ""1161_onlyController"";
""1161_generateTokens"" -> ""1161_getValueAt"";
""1161_doTransfer"" -> ""1161_updateValueAtNow"";
""1161_destroyTokens"" -> ""1161_updateValueAtNow"";
""1161_destroyTokens"" -> ""1161_getBlockNumber"";
""1161_doTransfer"" -> ""1161_getBlockNumber"";
""1161_approve"" -> ""1161_isContract"";
""1161_totalSupplyAt"" -> ""1161_min"";
""1161_balanceOfAt"" -> ""1161_getValueAt"";
""1161_totalSupply"" -> ""1161_getBlockNumber"";
""1161_destroyTokens"" -> ""1161_balanceOf"";
""1161_transferFrom"" -> ""1161_doTransfer"";
""1161_balanceOf"" -> ""1161_getBlockNumber"";
""1161_doTransfer"" -> ""1161_balanceOfAt"";
""1161_destroyTokens"" -> ""1161_getValueAt"";
""1161_generateTokens"" -> ""1161_getBlockNumber"";
""1161_claimTokens"" -> ""1161_onlyController"";
""1161_createCloneToken"" -> ""1161_getBlockNumber"";
""1161_fallback"" -> ""1161_isContract"";
""1161_updateValueAtNow"" -> ""1161_getBlockNumber"";
""1161_transfer"" -> ""1161_doTransfer"";
""1161_approveAndCall"" -> ""1161_approve"";
}
"
0xa2388330bcb4b3d5f6395a3f5999fecb73960af3.sol,BTRCTOKEN,"contract BTRCTOKEN { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public constant _maxSupply = 33000000000000000000000000; uint256 public _totalSupply = 0; uint256 private price = 2500; bool public workingState = true; bool public transferAllowed = true; bool private generationState = true; address private owner; address private cur_coin; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) private etherClients; event FundsGot(address indexed _sender, uint256 _value); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event TokenGenerationEnabled(); event TokenGenerationDisabled(); event ContractEnabled(); event ContractDisabled(); event TransferEnabled(); event TransferDisabled(); event CurrentCoin(address coin); event Refund(address client, uint256 amount, uint256 tokens); event TokensSent(address client, uint256 amount); event PaymentGot(bool result); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_904_BTRCTOKEN {
label=""BTRCTOKEN"";
""904_transfer"" [label=""transfer""];
""904_balanceOf"" [label=""balanceOf""];
""904_totalSupply"" [label=""totalSupply""];
""904_fallback"" [label=""fallback""];
""904_transferFrom"" [label=""transferFrom""];
""904_enableContract"" [label=""enableContract""];
""904_disableContract"" [label=""disableContract""];
""904_setCurrentCoin"" [label=""setCurrentCoin""];
""904_disableTransfer"" [label=""disableTransfer""];
""904_BTRCTOKEN"" [label=""BTRCTOKEN""];
""904_allowance"" [label=""allowance""];
""904_contractState"" [label=""contractState""];
""904_getPrice"" [label=""getPrice""];
""904_generateTokens"" [label=""generateTokens""];
""904_refund"" [label=""refund""];
""904_transferState"" [label=""transferState""];
""904_disableGeneration"" [label=""disableGeneration""];
""904_enableGeneration"" [label=""enableGeneration""];
""904_approve"" [label=""approve""];
""904_setPrice"" [label=""setPrice""];
""904_enableTransfer"" [label=""enableTransfer""];
""904_kill"" [label=""kill""];
""904_tokenGenerationState"" [label=""tokenGenerationState""];
""904_balanceOf"" -> ""904_workingFlag"";
""904_enableTransfer"" -> ""904_onlyOwner"";
""904_BTRCTOKEN"" -> ""904_enableContract"";
""904_setCurrentCoin"" -> ""904_onlyOwner"";
""904_refund"" -> ""904_ownerAndCoin"";
""904_disableGeneration"" -> ""904_onlyOwner"";
""904_setPrice"" -> ""904_onlyOwner"";
""904_setCurrentCoin"" -> ""904_workingFlag"";
""904_generateTokens"" -> ""904_transferFrom"";
""904_fallback"" -> ""904_workingFlag"";
""904_totalSupply"" -> ""904_workingFlag"";
""904_disableTransfer"" -> ""904_onlyOwner"";
""904_transfer"" -> ""904_workingFlag"";
""904_disableContract"" -> ""904_onlyOwner"";
""904_refund"" -> ""904_workingFlag"";
""904_transferFrom"" -> ""904_workingFlag"";
""904_generateTokens"" -> ""904_producibleFlag"";
""904_kill"" -> ""904_onlyOwner"";
""904_generateTokens"" -> ""904_workingFlag"";
""904_enableGeneration"" -> ""904_onlyOwner"";
""904_generateTokens"" -> ""904_ownerAndCoin"";
""904_enableContract"" -> ""904_onlyOwner"";
}
"
0x37e3efe76ee6cec50559bc07565eaf36ddc05467.sol,ControlledToken,"contract ControlledToken is ERC20, Controlled { uint256 constant MAX_UINT256 = 2**256 - 1; event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount); string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public totalSupply; function ControlledToken( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_627_ControlledToken {
label=""ControlledToken"";
""627_allowance"" [label=""allowance""];
""627_isContract"" [label=""isContract""];
""627_generateTokens"" [label=""generateTokens""];
""627_controller"" [label=""controller""];
""627_approve"" [label=""approve""];
""627_claimTokens"" [label=""claimTokens""];
""627_ControlledToken"" [label=""ControlledToken""];
""627_transferFrom"" [label=""transferFrom""];
""627_balanceOf"" [label=""balanceOf""];
""627_fallback"" [label=""fallback""];
""627_destroyTokens"" [label=""destroyTokens""];
""627_transfer"" [label=""transfer""];
""627_transfer"" -> ""627_isContract"";
""627_transferFrom"" -> ""627_isContract"";
""627_destroyTokens"" -> ""627_onlyController"";
""627_destroyTokens"" -> ""627_balanceOf"";
""627_claimTokens"" -> ""627_onlyController"";
""627_fallback"" -> ""627_isContract"";
""627_approve"" -> ""627_isContract"";
""627_generateTokens"" -> ""627_onlyController"";
""627_generateTokens"" -> ""627_balanceOf"";
}
"
0x67d9be79f2f13b7d3c9684d3782bc646f5ba6d63.sol,MilinfinityToken,"contract MilinfinityToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 230000000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 500; uint256 public tokensPerEth = 300000000e1; uint public target0drop = 20000; uint public progress0drop = 0; address multisig = 0x88A97d97413a6c2290f748D34aa204619d96b1a1; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_MilinfinityToken {
label=""MilinfinityToken"";
""1261_getTokens"" [label=""getTokens""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_allowance"" [label=""allowance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_distr"" [label=""distr""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_fallback"" [label=""fallback""];
""1261_add"" [label=""add""];
""1261_Distribute"" [label=""Distribute""];
""1261_constructor"" [label=""constructor""];
""1261_transfer"" [label=""transfer""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_getTokens"" -> ""1261_canDistr"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
}
"
0xd0792ac0de7ef31197c5f452b21a34389ecc725f.sol,CryptoWaterMargin,"contract CryptoWaterMargin is ERC721{ using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function CryptoWaterMargin () public { owner = msg.sender; admins[owner] = true; issueCard(1, 6, 0.1 ether); }",1,"subgraph cluster_1354_CryptoWaterMargin {
label=""CryptoWaterMargin"";
""1354_nextPriceOf"" [label=""nextPriceOf""];
""1354_withdrawAll"" [label=""withdrawAll""];
""1354_approve"" [label=""approve""];
""1354_balanceOf"" [label=""balanceOf""];
""1354_removeAdmin"" [label=""removeAdmin""];
""1354_totalSupply"" [label=""totalSupply""];
""1354_changePrice"" [label=""changePrice""];
""1354_listItem"" [label=""listItem""];
""1354_setOwner"" [label=""setOwner""];
""1354_calculateNextPrice"" [label=""calculateNextPrice""];
""1354_issueCard"" [label=""issueCard""];
""1354_approvedFor"" [label=""approvedFor""];
""1354_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1354_allOf"" [label=""allOf""];
""1354_withdrawAmount"" [label=""withdrawAmount""];
""1354_name"" [label=""name""];
""1354__transfer"" [label=""_transfer""];
""1354_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1354_priceOf"" [label=""priceOf""];
""1354_symbol"" [label=""symbol""];
""1354_listMultipleItems"" [label=""listMultipleItems""];
""1354_transfer"" [label=""transfer""];
""1354_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1354_ownerOf"" [label=""ownerOf""];
""1354_transferFrom"" [label=""transferFrom""];
""1354_tokensOf"" [label=""tokensOf""];
""1354_setItemRegistry"" [label=""setItemRegistry""];
""1354_CryptoWaterMargin"" [label=""CryptoWaterMargin""];
""1354_calculateDevCut"" [label=""calculateDevCut""];
""1354_isAdmin"" [label=""isAdmin""];
""1354_buy"" [label=""buy""];
""1354_addAdmin"" [label=""addAdmin""];
""1354_isContract"" [label=""isContract""];
""1354_tokenExists"" [label=""tokenExists""];
""1354_populateFromItemRegistry"" -> ""1354_onlyOwner"";
""1354_allOf"" -> ""1354_ownerOf"";
""1354_approve"" -> ""1354_tokenExists"";
""1354_setItemRegistry"" -> ""1354_onlyOwner"";
""1354_allOf"" -> ""1354_nextPriceOf"";
""1354_tokenExists"" -> ""1354_priceOf"";
""1354__transfer"" -> ""1354_tokenExists"";
""1354_transfer"" -> ""1354__transfer"";
""1354_transferFrom"" -> ""1354_approvedFor"";
""1354__transfer"" -> ""1354_ownerOf"";
""1354_listMultipleItems"" -> ""1354_listItem"";
""1354_transfer"" -> ""1354_ownerOf"";
""1354_balanceOf"" -> ""1354_ownerOf"";
""1354_populateFromItemRegistry"" -> ""1354_listItemFromRegistry"";
""1354_removeAdmin"" -> ""1354_onlyOwner"";
""1354_buy"" -> ""1354_ownerOf"";
""1354_transferFrom"" -> ""1354__transfer"";
""1354_listItemFromRegistry"" -> ""1354_listItem"";
""1354_approve"" -> ""1354_ownerOf"";
""1354_setOwner"" -> ""1354_onlyOwner"";
""1354_nextPriceOf"" -> ""1354_priceOf"";
""1354_tokensOf"" -> ""1354_ownerOf"";
""1354_issueCard"" -> ""1354_onlyAdmins"";
""1354_listMultipleItems"" -> ""1354_onlyAdmins"";
""1354_withdrawAll"" -> ""1354_onlyAdmins"";
""1354_addAdmin"" -> ""1354_onlyOwner"";
""1354_withdrawAmount"" -> ""1354_onlyAdmins"";
""1354_allOf"" -> ""1354_priceOf"";
""1354_buy"" -> ""1354_priceOf"";
""1354_changePrice"" -> ""1354_onlyAdmins"";
""1354_buy"" -> ""1354_calculateDevCut"";
""1354_buy"" -> ""1354_nextPriceOf"";
""1354_buy"" -> ""1354_isContract"";
""1354_listItemFromRegistry"" -> ""1354_onlyOwner"";
""1354_listItem"" -> ""1354_onlyAdmins"";
""1354_nextPriceOf"" -> ""1354_calculateNextPrice"";
""1354_buy"" -> ""1354__transfer"";
""1354_CryptoWaterMargin"" -> ""1354_issueCard"";
""1354_tokensOf"" -> ""1354_balanceOf"";
}
"
0xc7db6a0e78efb4d64bb06359faf83420f04cfb52.sol,play_IQUIZ,contract play_IQUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.00001 ether) { msg.sender.transfer(this.balance); question = ; },1,"subgraph cluster_119_play_IQUIZ {
label=""play_IQUIZ"";
""119_fallback"" [label=""fallback""];
""119_Start"" [label=""Start""];
""119_constructor"" [label=""constructor""];
""119_Try"" [label=""Try""];
""119_New"" [label=""New""];
""119_Stop"" [label=""Stop""];
""119_New"" -> ""119_isAdmin"";
""119_Start"" -> ""119_isAdmin"";
""119_Stop"" -> ""119_isAdmin"";
}
"
0xa21c9a3ae47103b1fd1dfa04766c4d00c19e1ff6.sol,CryptoOscarsToken,"contract CryptoOscarsToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",1,"subgraph cluster_930_CryptoOscarsToken {
label=""CryptoOscarsToken"";
""930_approve"" [label=""approve""];
""930_balanceOf"" [label=""balanceOf""];
""930_transfer"" [label=""transfer""];
""930_ownerOf"" [label=""ownerOf""];
""930_payout"" [label=""payout""];
""930_takeOwnership"" [label=""takeOwnership""];
""930_totalSupply"" [label=""totalSupply""];
""930__createMovie"" [label=""_createMovie""];
""930_setCOO"" [label=""setCOO""];
""930_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""930_setCEO"" [label=""setCEO""];
""930__payout"" [label=""_payout""];
""930_tokensOfOwner"" [label=""tokensOfOwner""];
""930__addressNotNull"" [label=""_addressNotNull""];
""930_priceOf"" [label=""priceOf""];
""930_createContractMovie"" [label=""createContractMovie""];
""930__transfer"" [label=""_transfer""];
""930_name"" [label=""name""];
""930_purchase"" [label=""purchase""];
""930__approved"" [label=""_approved""];
""930_createPromoMovie"" [label=""createPromoMovie""];
""930_symbol"" [label=""symbol""];
""930__owns"" [label=""_owns""];
""930_transferFrom"" [label=""transferFrom""];
""930_getMovie"" [label=""getMovie""];
""930_implementsERC721"" [label=""implementsERC721""];
""930_transferFrom"" -> ""930__addressNotNull"";
""930_takeOwnership"" -> ""930__approved"";
""930_transferFrom"" -> ""930__approved"";
""930_createContractMovie"" -> ""930_onlyCOO"";
""930_setCEO"" -> ""930_onlyCEO"";
""930_purchase"" -> ""930__transfer"";
""930_purchase"" -> ""930__addressNotNull"";
""930_payout"" -> ""930_onlyCLevel"";
""930__createMovie"" -> ""930__transfer"";
""930_payout"" -> ""930__payout"";
""930_createContractMovie"" -> ""930__createMovie"";
""930_createPromoMovie"" -> ""930_onlyCOO"";
""930_tokensOfOwner"" -> ""930_balanceOf"";
""930_createPromoMovie"" -> ""930__createMovie"";
""930_takeOwnership"" -> ""930__addressNotNull"";
""930_setCOO"" -> ""930_onlyCEO"";
""930_transferFrom"" -> ""930__transfer"";
""930_transferFrom"" -> ""930__owns"";
""930_tokensOfOwner"" -> ""930_totalSupply"";
""930_transfer"" -> ""930__owns"";
""930_takeOwnership"" -> ""930__transfer"";
""930_approve"" -> ""930__owns"";
""930_transfer"" -> ""930__addressNotNull"";
""930_transfer"" -> ""930__transfer"";
}
"
0x42fbfb1d1994a99de3bc52c2172d8370cd3d6671.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_571_Destructible {
label=""Destructible"";
""571_destroyAndSend"" [label=""destroyAndSend""];
""571_destroy"" [label=""destroy""];
""571_Destructible"" [label=""Destructible""];
""571_destroyAndSend"" -> ""571_onlyOwner"";
""571_destroy"" -> ""571_onlyOwner"";
}
"
0x1fbf025ad94dde79f88732f79966a9a435f2772f.sol,BLITZQUIZ,contract BLITZQUIZ { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_BLITZQUIZ {
label=""BLITZQUIZ"";
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
}
"
0xef86db910c71ffa3c80233bc9108dc51ad1e008a.sol,CommonWallet,"contract CommonWallet { mapping(address => mapping (address => uint256)) public tokenBalance; mapping(address => uint) etherBalance; address owner = msg.sender; function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) { uint256 z = _x + _y; assert(z >= _x); return z; }",1,"subgraph cluster_387_CommonWallet {
label=""CommonWallet"";
""387_sendTokenTo"" [label=""sendTokenTo""];
""387_wdEther"" [label=""wdEther""];
""387_safeAdd"" [label=""safeAdd""];
""387_wdToken"" [label=""wdToken""];
""387_sendEtherTo"" [label=""sendEtherTo""];
""387_depoEther"" [label=""depoEther""];
""387_getEtherBalance"" [label=""getEtherBalance""];
""387_safeSub"" [label=""safeSub""];
""387_depoToken"" [label=""depoToken""];
""387_getTokenBalance"" [label=""getTokenBalance""];
""387_sendEtherTo"" -> ""387_safeSub"";
""387_wdEther"" -> ""387_safeSub"";
""387_wdToken"" -> ""387_safeSub"";
""387_depoToken"" -> ""387_safeAdd"";
""387_sendTokenTo"" -> ""387_safeSub"";
}
"
0xaa3fbfaf03cd50e6a44d27d10eb14333d1c02e52.sol,ETH_GAME,contract ETH_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETH_GAME {
label=""ETH_GAME"";
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,RefundEscrow,"contract RefundEscrow is Ownable, ConditionalEscrow { enum State { Active, Refunding, Closed }",1,"subgraph cluster_1492_RefundEscrow {
label=""RefundEscrow"";
""1492_withdrawalAllowed"" [label=""withdrawalAllowed""];
""1492_constructor"" [label=""constructor""];
""1492_deposit"" [label=""deposit""];
""1492_enableRefunds"" [label=""enableRefunds""];
""1492_close"" [label=""close""];
""1492_beneficiaryWithdraw"" [label=""beneficiaryWithdraw""];
""1492_deposit"" -> ""1492_deposit"";
""1492_close"" -> ""1492_onlyOwner"";
""1492_enableRefunds"" -> ""1492_onlyOwner"";
}
"
0x5b8aeecf9958a76054dae8bdc98b44ff9007d4ef.sol,SRNMagicBox,"contract SRNMagicBox is ServerControl, TokenReceiver { GirlOps girlOps; GenesFactory genesFactory; SRNG SRNGInstance; string public name; uint public keyRequired; address public keyAddress; address public prizePoolAddress; uint public boxPrice; uint[] public prizeIndex; uint[] public prizeRange; uint[] public NCards; uint[] public RCards; uint[] public SRCards; uint[] public SSRCards; event SendGirlFail(address _to, uint _type); constructor(string _name, address _girlAddress, address _SRNGAddress, address _genesFactoryAddress, address _prizePoolAddress, address _keyAddress, uint _keyRequired, uint _boxPrice) public { name = _name; girlOps = GirlOps(_girlAddress); SRNGInstance = SRNG(_SRNGAddress); genesFactory = GenesFactory(_genesFactoryAddress); prizePoolAddress = _prizePoolAddress; keyAddress = _keyAddress; keyRequired = _keyRequired; boxPrice = _boxPrice; }",1,"subgraph cluster_4530_SRNMagicBox {
label=""SRNMagicBox"";
""4530_getPrizeIndex"" [label=""getPrizeIndex""];
""4530__sendGirl"" [label=""_sendGirl""];
""4530__openBox"" [label=""_openBox""];
""4530_setupKeyRequired"" [label=""setupKeyRequired""];
""4530_setSRNG"" [label=""setSRNG""];
""4530_setGenesFactory"" [label=""setGenesFactory""];
""4530_getSSRCardsNumber"" [label=""getSSRCardsNumber""];
""4530_getRCardsNumber"" [label=""getRCardsNumber""];
""4530_setGirls"" [label=""setGirls""];
""4530_setGirlByRarity"" [label=""setGirlByRarity""];
""4530_getSRCardsNumber"" [label=""getSRCardsNumber""];
""4530_withDrawToken"" [label=""withDrawToken""];
""4530_setupPrize"" [label=""setupPrize""];
""4530_setGirlOps"" [label=""setGirlOps""];
""4530_setKeyAddress"" [label=""setKeyAddress""];
""4530_constructor"" [label=""constructor""];
""4530_setPrizePoolAddress"" [label=""setPrizePoolAddress""];
""4530_receiveApproval"" [label=""receiveApproval""];
""4530_withDrawBalance"" [label=""withDrawBalance""];
""4530_getNCardsNumber"" [label=""getNCardsNumber""];
""4530_canOpen"" [label=""canOpen""];
""4530_fallback"" [label=""fallback""];
""4530_setupBoxPrice"" [label=""setupBoxPrice""];
""4530_setKeyAddress"" -> ""4530_onlyOwner"";
""4530_setupBoxPrice"" -> ""4530_onlyOwner"";
""4530_fallback"" -> ""4530__openBox"";
""4530_setGirlOps"" -> ""4530_onlyOwner"";
""4530_setGirls"" -> ""4530_onlyOwner"";
""4530_setupPrize"" -> ""4530_onlyOwner"";
""4530_setGirlByRarity"" -> ""4530_onlyOwner"";
""4530__openBox"" -> ""4530_getPrizeIndex"";
""4530_receiveApproval"" -> ""4530__openBox"";
""4530_withDrawToken"" -> ""4530_onlyCFO"";
""4530_setupKeyRequired"" -> ""4530_onlyOwner"";
""4530_setGenesFactory"" -> ""4530_onlyOwner"";
""4530_setSRNG"" -> ""4530_onlyOwner"";
""4530_withDrawBalance"" -> ""4530_onlyCFO"";
""4530__openBox"" -> ""4530__sendGirl"";
""4530_setPrizePoolAddress"" -> ""4530_onlyOwner"";
}
"
0x01bbef7b099128a2675d619567ab449ec9a04fe1.sol,ether_game,contract ether_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ether_game {
label=""ether_game"";
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xc801e2ca666fdfcb43cf29b972d7f3731436e4a1.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MyAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_669_MyAdvancedToken {
label=""MyAdvancedToken"";
""669_sell"" [label=""sell""];
""669_MyAdvancedToken"" [label=""MyAdvancedToken""];
""669_getEth"" [label=""getEth""];
""669_newinitialSupply"" [label=""newinitialSupply""];
""669_freezeAccount"" [label=""freezeAccount""];
""669_mintToken"" [label=""mintToken""];
""669_buy"" [label=""buy""];
""669_fallback"" [label=""fallback""];
""669_selfdestructs"" [label=""selfdestructs""];
""669__transfer"" [label=""_transfer""];
""669_setPrices"" [label=""setPrices""];
""669_MyAdvancedToken"" -> ""669_TokenERC20"";
""669_mintToken"" -> ""669_onlyOwner"";
""669_freezeAccount"" -> ""669_onlyOwner"";
""669_sell"" -> ""669__transfer"";
""669_fallback"" -> ""669__transfer"";
""669_setPrices"" -> ""669_onlyOwner"";
""669_buy"" -> ""669__transfer"";
""669_newinitialSupply"" -> ""669_onlyOwner"";
}
"
0x723aaf922709819c25344b81901dd8a9c84c0b89.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State {Active, Refunding, Closed}",1,"subgraph cluster_402_RefundVault {
label=""RefundVault"";
""402_enableRefunds"" [label=""enableRefunds""];
""402_deposit"" [label=""deposit""];
""402_close"" [label=""close""];
""402_RefundVault"" [label=""RefundVault""];
""402_refund"" [label=""refund""];
""402_refund"" -> ""402_onlyOwner"";
""402_enableRefunds"" -> ""402_onlyOwner"";
""402_close"" -> ""402_onlyOwner"";
""402_deposit"" -> ""402_onlyOwner"";
}
"
0xe34cae5cdc42afd4c68727a936908918b5faa675.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1100_MiniMeToken {
label=""MiniMeToken"";
""1100_generateTokens"" [label=""generateTokens""];
""1100_approveAndCall"" [label=""approveAndCall""];
""1100_destroyTokens"" [label=""destroyTokens""];
""1100_balanceOf"" [label=""balanceOf""];
""1100_allowance"" [label=""allowance""];
""1100_transfer"" [label=""transfer""];
""1100_MiniMeToken"" [label=""MiniMeToken""];
""1100_balanceOfAt"" [label=""balanceOfAt""];
""1100_updateValueAtNow"" [label=""updateValueAtNow""];
""1100_claimTokens"" [label=""claimTokens""];
""1100_isContract"" [label=""isContract""];
""1100_transferFrom"" [label=""transferFrom""];
""1100_getValueAt"" [label=""getValueAt""];
""1100_doTransfer"" [label=""doTransfer""];
""1100_totalSupply"" [label=""totalSupply""];
""1100_approve"" [label=""approve""];
""1100_totalSupplyAt"" [label=""totalSupplyAt""];
""1100_enableTransfers"" [label=""enableTransfers""];
""1100_min"" [label=""min""];
""1100_fallback"" [label=""fallback""];
""1100_createCloneToken"" [label=""createCloneToken""];
""1100_transfer"" -> ""1100_doTransfer"";
""1100_enableTransfers"" -> ""1100_onlyController"";
""1100_balanceOfAt"" -> ""1100_min"";
""1100_generateTokens"" -> ""1100_onlyController"";
""1100_generateTokens"" -> ""1100_updateValueAtNow"";
""1100_destroyTokens"" -> ""1100_balanceOf"";
""1100_destroyTokens"" -> ""1100_updateValueAtNow"";
""1100_doTransfer"" -> ""1100_updateValueAtNow"";
""1100_totalSupplyAt"" -> ""1100_getValueAt"";
""1100_totalSupplyAt"" -> ""1100_min"";
""1100_generateTokens"" -> ""1100_balanceOf"";
""1100_approveAndCall"" -> ""1100_approve"";
""1100_fallback"" -> ""1100_isContract"";
""1100_approve"" -> ""1100_isContract"";
""1100_transferFrom"" -> ""1100_doTransfer"";
""1100_totalSupply"" -> ""1100_totalSupplyAt"";
""1100_claimTokens"" -> ""1100_onlyController"";
""1100_doTransfer"" -> ""1100_isContract"";
""1100_balanceOfAt"" -> ""1100_getValueAt"";
""1100_destroyTokens"" -> ""1100_totalSupply"";
""1100_balanceOf"" -> ""1100_balanceOfAt"";
""1100_destroyTokens"" -> ""1100_onlyController"";
""1100_generateTokens"" -> ""1100_totalSupply"";
""1100_doTransfer"" -> ""1100_balanceOfAt"";
}
"
0x6bd26bb09c992e09d2156b48f723e56e52eead9c.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1282_MiniMeToken {
label=""MiniMeToken"";
""1282_doTransfer"" [label=""doTransfer""];
""1282_isContract"" [label=""isContract""];
""1282_fallback"" [label=""fallback""];
""1282_destroyTokens"" [label=""destroyTokens""];
""1282_balanceOf"" [label=""balanceOf""];
""1282_updateValueAtNow"" [label=""updateValueAtNow""];
""1282_approveAndCall"" [label=""approveAndCall""];
""1282_getValueAt"" [label=""getValueAt""];
""1282_createCloneToken"" [label=""createCloneToken""];
""1282_transfer"" [label=""transfer""];
""1282_generateTokens"" [label=""generateTokens""];
""1282_approve"" [label=""approve""];
""1282_MiniMeToken"" [label=""MiniMeToken""];
""1282_allowance"" [label=""allowance""];
""1282_balanceOfAt"" [label=""balanceOfAt""];
""1282_transferFrom"" [label=""transferFrom""];
""1282_claimTokens"" [label=""claimTokens""];
""1282_min"" [label=""min""];
""1282_totalSupplyAt"" [label=""totalSupplyAt""];
""1282_totalSupply"" [label=""totalSupply""];
""1282_enableTransfers"" [label=""enableTransfers""];
""1282_balanceOfAt"" -> ""1282_getValueAt"";
""1282_destroyTokens"" -> ""1282_totalSupply"";
""1282_totalSupplyAt"" -> ""1282_min"";
""1282_generateTokens"" -> ""1282_updateValueAtNow"";
""1282_enableTransfers"" -> ""1282_onlyController"";
""1282_destroyTokens"" -> ""1282_onlyController"";
""1282_approve"" -> ""1282_isContract"";
""1282_totalSupply"" -> ""1282_totalSupplyAt"";
""1282_fallback"" -> ""1282_isContract"";
""1282_balanceOfAt"" -> ""1282_min"";
""1282_doTransfer"" -> ""1282_isContract"";
""1282_transfer"" -> ""1282_doTransfer"";
""1282_totalSupplyAt"" -> ""1282_getValueAt"";
""1282_generateTokens"" -> ""1282_onlyController"";
""1282_doTransfer"" -> ""1282_balanceOfAt"";
""1282_destroyTokens"" -> ""1282_balanceOf"";
""1282_destroyTokens"" -> ""1282_updateValueAtNow"";
""1282_approveAndCall"" -> ""1282_approve"";
""1282_transferFrom"" -> ""1282_doTransfer"";
""1282_doTransfer"" -> ""1282_updateValueAtNow"";
""1282_balanceOf"" -> ""1282_balanceOfAt"";
""1282_generateTokens"" -> ""1282_totalSupply"";
""1282_generateTokens"" -> ""1282_balanceOf"";
""1282_claimTokens"" -> ""1282_onlyController"";
}
"
0xee53ca3ae3d296c0f2a128138d12a0a3a60fa1f5.sol,ZethrShell,contract ZethrShell is ZethrBankrollBridge { function WithdrawToBankroll() public { address(UsedBankrollAddresses[0]).transfer(address(this).balance); },1,"subgraph cluster_240_ZethrShell {
label=""ZethrShell"";
""240_WithdrawAndTransferToBankroll"" [label=""WithdrawAndTransferToBankroll""];
""240_WithdrawToBankroll"" [label=""WithdrawToBankroll""];
""240_WithdrawAndTransferToBankroll"" -> ""240_WithdrawToBankroll"";
}
"
0x483a816f1672e276416d7e18e905226f15c7e698.sol,eth_GAME,contract eth_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_eth_GAME {
label=""eth_GAME"";
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_New"" [label=""New""];
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x28e0d54349c00607505aadc713147140fb60ea12.sol,TheQuizGame,contract TheQuizGame { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_128_TheQuizGame {
label=""TheQuizGame"";
""128_StartTheGame"" [label=""StartTheGame""];
""128_NewQuestion"" [label=""NewQuestion""];
""128_Try"" [label=""Try""];
""128_StopGame"" [label=""StopGame""];
""128_newQuestioner"" [label=""newQuestioner""];
""128_fallback"" [label=""fallback""];
}
"
0x0174312e4aef436606ffdeb4d05d22fb68f36ba0.sol,LatiumSeller,contract LatiumSeller { address private constant _latiumAddress = 0xBb31037f997553BEc50510a635d231A35F8EC640; Latium private constant _latium = Latium(_latiumAddress); uint256 private _etherAmount = 0; uint256 private constant _tokenPrice = 10 finney; uint256 private _minimumPurchase = 10 * 10 ** uint256(_latium.decimals()); address public owner; function LatiumSeller() { owner = msg.sender; },1,"subgraph cluster_342_LatiumSeller {
label=""LatiumSeller"";
""342_fallback"" [label=""fallback""];
""342_withdrawLatium"" [label=""withdrawLatium""];
""342_LatiumSeller"" [label=""LatiumSeller""];
""342__tokensToSell"" [label=""_tokensToSell""];
""342_minimumPurchase"" [label=""minimumPurchase""];
""342_tokenPrice"" [label=""tokenPrice""];
""342_withdrawEther"" [label=""withdrawEther""];
""342_withdrawLatium"" -> ""342__tokensToSell"";
""342_withdrawEther"" -> ""342_onlyOwner"";
""342_fallback"" -> ""342__tokensToSell"";
""342_withdrawLatium"" -> ""342_onlyOwner"";
}
"
0x64d581770b541b5609140232fc12f47bbe0fe6bc.sol,MonetoSale,"contract MonetoSale { Moneto public token; address public beneficiary; address public alfatokenteam; uint public alfatokenFee; uint public amountRaised; uint public tokenSold; uint public constant PRE_SALE_START = 1523952000; uint public constant PRE_SALE_END = 1526543999; uint public constant SALE_START = 1528617600; uint public constant SALE_END = 1531209599; uint public constant PRE_SALE_MAX_CAP = 2531250 * 10**18; uint public constant SALE_MAX_CAP = 300312502 * 10**17; uint public constant SALE_MIN_CAP = 2500 ether; uint public constant PRE_SALE_PRICE = 1250; uint public constant SALE_PRICE = 1000; uint public constant PRE_SALE_MIN_BUY = 10 * 10**18; uint public constant SALE_MIN_BUY = 1 * 10**18; uint public constant PRE_SALE_1WEEK_BONUS = 35; uint public constant PRE_SALE_2WEEK_BONUS = 15; uint public constant PRE_SALE_3WEEK_BONUS = 5; uint public constant PRE_SALE_4WEEK_BONUS = 0; uint public constant SALE_1WEEK_BONUS = 10; uint public constant SALE_2WEEK_BONUS = 7; uint public constant SALE_3WEEK_BONUS = 5; uint public constant SALE_4WEEK_BONUS = 3; mapping (address => uint) public icoBuyers; Stages public stage; enum Stages { Deployed, Ready, Ended, Canceled }",1,"subgraph cluster_1216_MonetoSale {
label=""MonetoSale"";
""1216_endSale"" [label=""endSale""];
""1216_transferEther"" [label=""transferEther""];
""1216_takeEtherBack"" [label=""takeEtherBack""];
""1216_cancelSale"" [label=""cancelSale""];
""1216_setup"" [label=""setup""];
""1216_getPrice"" [label=""getPrice""];
""1216_fallback"" [label=""fallback""];
""1216_proxyTakeEtherBack"" [label=""proxyTakeEtherBack""];
""1216_getMinimumAmount"" [label=""getMinimumAmount""];
""1216_getBonus"" [label=""getBonus""];
""1216_MonetoSale"" [label=""MonetoSale""];
""1216_transferFee"" [label=""transferFee""];
""1216_setup"" -> ""1216_isOwner"";
""1216_proxyTakeEtherBack"" -> ""1216_atStage"";
""1216_takeEtherBack"" -> ""1216_atStage"";
""1216_setup"" -> ""1216_atStage"";
""1216_transferEther"" -> ""1216_isOwner"";
""1216_fallback"" -> ""1216_getMinimumAmount"";
""1216_fallback"" -> ""1216_atStage"";
""1216_takeEtherBack"" -> ""1216_proxyTakeEtherBack"";
""1216_endSale"" -> ""1216_isOwner"";
""1216_fallback"" -> ""1216_getPrice"";
""1216_fallback"" -> ""1216_getBonus"";
}
"
0x6f4e647f553397dc999382ad3a9c5336c5de27aa.sol,YouCollectBase,"contract YouCollectBase is Owned { using SafeMath for uint256; string public constant NAME = ; string public constant SYMBOL = ; uint8 public constant DECIMALS = 18; uint256 public totalSupply; uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function name() public pure returns (string) { return NAME; }",1,"subgraph cluster_609_YouCollectBase {
label=""YouCollectBase"";
""609_transfer"" [label=""transfer""];
""609_decimals"" [label=""decimals""];
""609_name"" [label=""name""];
""609_approve"" [label=""approve""];
""609_payout"" [label=""payout""];
""609_approveAndCall"" [label=""approveAndCall""];
""609__payout"" [label=""_payout""];
""609_balanceOf"" [label=""balanceOf""];
""609_transferFrom"" [label=""transferFrom""];
""609_allowance"" [label=""allowance""];
""609_symbol"" [label=""symbol""];
""609_payout"" -> ""609__payout"";
""609_payout"" -> ""609_onlyCLevel"";
}
"
0x6bd26bb09c992e09d2156b48f723e56e52eead9c.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1282_MiniMeToken {
label=""MiniMeToken"";
""1282_doTransfer"" [label=""doTransfer""];
""1282_isContract"" [label=""isContract""];
""1282_fallback"" [label=""fallback""];
""1282_destroyTokens"" [label=""destroyTokens""];
""1282_balanceOf"" [label=""balanceOf""];
""1282_updateValueAtNow"" [label=""updateValueAtNow""];
""1282_approveAndCall"" [label=""approveAndCall""];
""1282_getValueAt"" [label=""getValueAt""];
""1282_createCloneToken"" [label=""createCloneToken""];
""1282_transfer"" [label=""transfer""];
""1282_generateTokens"" [label=""generateTokens""];
""1282_approve"" [label=""approve""];
""1282_MiniMeToken"" [label=""MiniMeToken""];
""1282_allowance"" [label=""allowance""];
""1282_balanceOfAt"" [label=""balanceOfAt""];
""1282_transferFrom"" [label=""transferFrom""];
""1282_claimTokens"" [label=""claimTokens""];
""1282_min"" [label=""min""];
""1282_totalSupplyAt"" [label=""totalSupplyAt""];
""1282_totalSupply"" [label=""totalSupply""];
""1282_enableTransfers"" [label=""enableTransfers""];
""1282_balanceOfAt"" -> ""1282_getValueAt"";
""1282_destroyTokens"" -> ""1282_totalSupply"";
""1282_totalSupplyAt"" -> ""1282_min"";
""1282_generateTokens"" -> ""1282_updateValueAtNow"";
""1282_enableTransfers"" -> ""1282_onlyController"";
""1282_destroyTokens"" -> ""1282_onlyController"";
""1282_approve"" -> ""1282_isContract"";
""1282_totalSupply"" -> ""1282_totalSupplyAt"";
""1282_fallback"" -> ""1282_isContract"";
""1282_balanceOfAt"" -> ""1282_min"";
""1282_doTransfer"" -> ""1282_isContract"";
""1282_transfer"" -> ""1282_doTransfer"";
""1282_totalSupplyAt"" -> ""1282_getValueAt"";
""1282_generateTokens"" -> ""1282_onlyController"";
""1282_doTransfer"" -> ""1282_balanceOfAt"";
""1282_destroyTokens"" -> ""1282_balanceOf"";
""1282_destroyTokens"" -> ""1282_updateValueAtNow"";
""1282_approveAndCall"" -> ""1282_approve"";
""1282_transferFrom"" -> ""1282_doTransfer"";
""1282_doTransfer"" -> ""1282_updateValueAtNow"";
""1282_balanceOf"" -> ""1282_balanceOfAt"";
""1282_generateTokens"" -> ""1282_totalSupply"";
""1282_generateTokens"" -> ""1282_balanceOf"";
""1282_claimTokens"" -> ""1282_onlyController"";
}
"
0xa23a42b2bb161b0ab7bbcbd72bea54952e5299fc.sol,zeepay,"contract zeepay is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 1000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 10000; uint256 public tokensPerEth = 15000000e8; uint public target0drop = 1000; uint public progress0drop = 0; address multisig = 0x3c93bcB8dc2b78570B343dB9c6F56397Fe77164b ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_zeepay {
label=""zeepay"";
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_allowance"" [label=""allowance""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdraw"" [label=""withdraw""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_Distribute"" [label=""Distribute""];
""1261_constructor"" [label=""constructor""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_distr"" [label=""distr""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_add"" [label=""add""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_fallback"" [label=""fallback""];
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_add"" -> ""1261_onlyOwner"";
}
"
0x33dcb440beb0c640fa75ac297bc2e048e6853844.sol,Bonds,contract Bonds { uint ACTIVATION_TIME = 1539302400; modifier onlyOwner(){ require(msg.sender == dev); _; },1,"subgraph cluster_1302_Bonds {
label=""Bonds"";
""1302_extDistributeBondFund"" [label=""extDistributeBondFund""];
""1302_getMyBalance"" [label=""getMyBalance""];
""1302_buy"" [label=""buy""];
""1302_distributeYield"" [label=""distributeYield""];
""1302_withdrawPart"" [label=""withdrawPart""];
""1302_setAllowReferral"" [label=""setAllowReferral""];
""1302_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""1302_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1302_setMaxbonds"" [label=""setMaxbonds""];
""1302_gettotalBondDivs"" [label=""gettotalBondDivs""];
""1302_getBondOwner"" [label=""getBondOwner""];
""1302_constructor"" [label=""constructor""];
""1302_setAutoNewbond"" [label=""setAutoNewbond""];
""1302_setInitialPrice"" [label=""setInitialPrice""];
""1302_addTotalBondValue"" [label=""addTotalBondValue""];
""1302_setBondPrice"" [label=""setBondPrice""];
""1302_addNewbond"" [label=""addNewbond""];
""1302_distributeBondFund"" [label=""distributeBondFund""];
""1302_setSymbol"" [label=""setSymbol""];
""1302_fallback"" [label=""fallback""];
""1302_transfer"" [label=""transfer""];
""1302_getTotalBondValue"" [label=""getTotalBondValue""];
""1302_getOwnerBalance"" [label=""getOwnerBalance""];
""1302_getBondPrice"" [label=""getBondPrice""];
""1302_getNextAvailableBond"" [label=""getNextAvailableBond""];
""1302_getBondDivShare"" [label=""getBondDivShare""];
""1302_withdraw"" [label=""withdraw""];
""1302_setName"" [label=""setName""];
""1302_setSymbol"" -> ""1302_onlyOwner"";
""1302_buy"" -> ""1302_addTotalBondValue"";
""1302_setBondPrice"" -> ""1302_onlyOwner"";
""1302_setAllowReferral"" -> ""1302_onlyOwner"";
""1302_setAutoNewbond"" -> ""1302_onlyOwner"";
""1302_setMaxbonds"" -> ""1302_onlyOwner"";
""1302_buy"" -> ""1302_distributeYield"";
""1302_buy"" -> ""1302_distributeBondFund"";
""1302_addNewbond"" -> ""1302_onlyOwner"";
""1302_extDistributeBondFund"" -> ""1302_onlyOwner"";
""1302_setName"" -> ""1302_onlyOwner"";
""1302_buy"" -> ""1302_isActivated"";
""1302_setInitialPrice"" -> ""1302_onlyOwner"";
""1302_withdrawPart"" -> ""1302_onlyOwner"";
""1302_addNewbond"" -> ""1302_addTotalBondValue"";
}
"
0x549b38e8e5fb1ba4acd4187d8b7c8a04deb53206.sol,LotteryAdmin,"contract LotteryAdmin { address public owner; address public admin; address public proposedOwner; address public ethereumLottery; uint public dailyAdminAllowance; uint public lastAllowancePaymentTimestamp; uint public nextProfile; event Deposit(address indexed _from, uint _value); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_282_LotteryAdmin {
label=""LotteryAdmin"";
""282_setLottery"" [label=""setLottery""];
""282_destruct"" [label=""destruct""];
""282_proposeOwner"" [label=""proposeOwner""];
""282_setConfiguration"" [label=""setConfiguration""];
""282_withdraw"" [label=""withdraw""];
""282_allowsAllowance"" [label=""allowsAllowance""];
""282_acceptOwnership"" [label=""acceptOwnership""];
""282_requestAllowance"" [label=""requestAllowance""];
""282_needsInitialization"" [label=""needsInitialization""];
""282_setAdmin"" [label=""setAdmin""];
""282_fallback"" [label=""fallback""];
""282_initLottery"" [label=""initLottery""];
""282_LotteryAdmin"" [label=""LotteryAdmin""];
""282_requestAllowance"" -> ""282_allowsAllowance"";
""282_setConfiguration"" -> ""282_onlyOwner"";
""282_withdraw"" -> ""282_onlyOwner"";
""282_destruct"" -> ""282_onlyOwner"";
""282_setLottery"" -> ""282_onlyOwner"";
""282_requestAllowance"" -> ""282_onlyAdminOrOwner"";
""282_proposeOwner"" -> ""282_onlyOwner"";
""282_setAdmin"" -> ""282_onlyOwner"";
""282_initLottery"" -> ""282_onlyAdminOrOwner"";
}
"
0xeafd8b734e32aec64c4b445e9da401427ef63a3a.sol,PullPayment,contract PullPayment { using SafeMath for uint256; mapping(address => uint256) public payments; uint256 public totalPayments; function withdrawPayments() public { address payee = msg.sender; uint256 payment = payments[payee]; require(payment != 0); require(address(this).balance >= payment); totalPayments = totalPayments.sub(payment); payments[payee] = 0; payee.transfer(payment); },1,"subgraph cluster_199_PullPayment {
label=""PullPayment"";
""199_withdrawPayments"" [label=""withdrawPayments""];
""199_asyncSend"" [label=""asyncSend""];
}
"
0x013620bf5142f9d8487e92c1d514c38e1b086613.sol,Etherumble,contract Etherumble { struct PlayerBets { address addPlayer; uint amount; },1,"subgraph cluster_384_Etherumble {
label=""Etherumble"";
""384_callback"" [label=""callback""];
""384_getPlayerAddress"" [label=""getPlayerAddress""];
""384_Lottery"" [label=""Lottery""];
""384_getPlayerBet"" [label=""getPlayerBet""];
""384_getLastWinnerTicket"" [label=""getLastWinnerTicket""];
""384_fallback"" [label=""fallback""];
""384_getActivePlayers"" [label=""getActivePlayers""];
""384_withrawFee"" [label=""withrawFee""];
""384_getLastWinner"" [label=""getLastWinner""];
""384_withrawWin"" [label=""withrawWin""];
""384_getTotalGames"" [label=""getTotalGames""];
""384_endLottery"" [label=""endLottery""];
""384_getEndBlock"" [label=""getEndBlock""];
""384_destroykill"" [label=""destroykill""];
""384_checkinter"" [label=""checkinter""];
""384_withrawFee"" -> ""384_isOwner"";
""384_endLottery"" -> ""384_withrawWin"";
""384_destroykill"" -> ""384_isOwner"";
""384_fallback"" -> ""384_hasValue"";
""384_callback"" -> ""384_endLottery"";
""384_checkinter"" -> ""384_endLottery"";
""384_callback"" -> ""384_isOwner"";
""384_fallback"" -> ""384_checkinter"";
}
"
0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol,WorldCupWinner,"contract WorldCupWinner { using SafeMath for uint256; event BuyWinner(address indexed buyer, uint256 indexed traddingTime, uint256 first, uint256 second, uint256 three, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice); event BuyWinnerList(uint256 indexed first, uint256 indexed second, uint256 indexed third,address buyer, uint256 traddingTime, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice); event BuyWinnerTwo(address indexed buyer, uint256 indexed first, uint256 indexed gameid,uint256 traddingTime, uint256 buyType,uint256 buyPrice,uint buyTotal); event ShareBonus(address indexed buyer, uint256 indexed traddingTime, uint256 indexed buyerType, uint256 gameID, uint256 remainingAmount); address public owner; uint[] _teamIDs; struct Game{ uint256 _bouns; uint[] _teams; uint256[] _teamPrice; uint _playType; bool _stop; uint256 _beginTime; }",1,"subgraph cluster_746_WorldCupWinner {
label=""WorldCupWinner"";
""746_buy"" [label=""buy""];
""746_getListTeam"" [label=""getListTeam""];
""746_buyTwo"" [label=""buyTwo""];
""746_getPool"" [label=""getPool""];
""746_constructor"" [label=""constructor""];
""746_setTeamStatus"" [label=""setTeamStatus""];
""746_batchShareAmount"" [label=""batchShareAmount""];
""746_getBonusPoolTotal"" [label=""getBonusPoolTotal""];
""746_destroy"" [label=""destroy""];
""746_createGame"" [label=""createGame""];
""746_shareAmount"" [label=""shareAmount""];
""746_setTeamPrice"" [label=""setTeamPrice""];
""746_getListTeamByPlayType"" [label=""getListTeamByPlayType""];
""746_batchShareAmount"" -> ""746_onlyOwner"";
""746_setTeamPrice"" -> ""746_onlyOwner"";
""746_shareAmount"" -> ""746_onlyOwner"";
""746_destroy"" -> ""746_onlyOwner"";
""746_setTeamStatus"" -> ""746_onlyOwner"";
""746_createGame"" -> ""746_onlyOwner"";
}
"
0x28a9824cc26361fe97417a60d5bd1225853db46d.sol,TTS,contract TTS is Token { string public name; string public symbol; uint32 internal rate; uint32 internal consume; uint256 internal totalConsume; uint256 internal bigJackpot; uint256 internal smallJackpot; uint256 public consumeRule; address internal owner; modifier onlyOwner(){ require (msg.sender==owner); _; },1,"subgraph cluster_964_TTS {
label=""TTS"";
""964_getRate"" [label=""getRate""];
""964_smallCheckOut"" [label=""smallCheckOut""];
""964_getTotalConsume"" [label=""getTotalConsume""];
""964_setJackpot"" [label=""setJackpot""];
""964_transferFrom"" [label=""transferFrom""];
""964_approve"" [label=""approve""];
""964_getBigJackpot"" [label=""getBigJackpot""];
""964_getConsume"" [label=""getConsume""];
""964_allowance"" [label=""allowance""];
""964_transfer"" [label=""transfer""];
""964_bigCheckOut"" [label=""bigCheckOut""];
""964_tickets"" [label=""tickets""];
""964_TTS"" [label=""TTS""];
""964_ticketConsume"" [label=""ticketConsume""];
""964_sendAll"" [label=""sendAll""];
""964_balanceOf"" [label=""balanceOf""];
""964_getEth"" [label=""getEth""];
""964_trashOf"" [label=""trashOf""];
""964_getSmallJackpot"" [label=""getSmallJackpot""];
""964_getBalance"" [label=""getBalance""];
""964_fallback"" [label=""fallback""];
""964_sendTransfer"" [label=""sendTransfer""];
""964_inTrash"" [label=""inTrash""];
""964_sendTransfer"" -> ""964_onlyOwner"";
""964_getEth"" -> ""964_onlyOwner"";
""964_bigCheckOut"" -> ""964_onlyOwner"";
""964_tickets"" -> ""964_setJackpot"";
""964_ticketConsume"" -> ""964_setJackpot"";
""964_sendAll"" -> ""964_onlyOwner"";
""964_smallCheckOut"" -> ""964_onlyOwner"";
}
"
0x26bf81f017a7149576dc5d82323172fcae9fd469.sol,PhxGo,"contract PhxGo is Ownable{ using SafeMath for uint; event LogTokenMultiSent(address token,uint256 total); event LogGetToken(address token, address receiver, uint256 balance); address public receiverAddress; uint public txFee = 0.01 ether; uint public VIPFee = 1 ether; mapping(address => bool) public vipList; function getBalance(address _tokenAddress) onlyOwner public { address _receiverAddress = getReceiverAddress(); if(_tokenAddress == address(0)){ require(_receiverAddress.send(address(this).balance)); return; }",1,"subgraph cluster_1228_PhxGo {
label=""PhxGo"";
""1228_registerVIP"" [label=""registerVIP""];
""1228_multisendToken"" [label=""multisendToken""];
""1228_mutiSendCoinWithSameValue"" [label=""mutiSendCoinWithSameValue""];
""1228_setReceiverAddress"" [label=""setReceiverAddress""];
""1228_drop"" [label=""drop""];
""1228_removeFromVIPList"" [label=""removeFromVIPList""];
""1228_setTxFee"" [label=""setTxFee""];
""1228_ethSendSameValue"" [label=""ethSendSameValue""];
""1228_addToVIPList"" [label=""addToVIPList""];
""1228_ethSendDifferentValue"" [label=""ethSendDifferentValue""];
""1228_getReceiverAddress"" [label=""getReceiverAddress""];
""1228_mutiSendCoinWithDifferentValue"" [label=""mutiSendCoinWithDifferentValue""];
""1228_coinSendDifferentValue"" [label=""coinSendDifferentValue""];
""1228_sendEth"" [label=""sendEth""];
""1228_mutiSendETHWithDifferentValue"" [label=""mutiSendETHWithDifferentValue""];
""1228_setVIPFee"" [label=""setVIPFee""];
""1228_mutiSendETHWithSameValue"" [label=""mutiSendETHWithSameValue""];
""1228_multisend"" [label=""multisend""];
""1228_coinSendSameValue"" [label=""coinSendSameValue""];
""1228_isVIP"" [label=""isVIP""];
""1228_getBalance"" [label=""getBalance""];
""1228_mutiSendCoinWithDifferentValue"" -> ""1228_coinSendDifferentValue"";
""1228_drop"" -> ""1228_coinSendSameValue"";
""1228_ethSendDifferentValue"" -> ""1228_isVIP"";
""1228_multisend"" -> ""1228_ethSendDifferentValue"";
""1228_removeFromVIPList"" -> ""1228_onlyOwner"";
""1228_mutiSendCoinWithSameValue"" -> ""1228_coinSendSameValue"";
""1228_coinSendSameValue"" -> ""1228_isVIP"";
""1228_setTxFee"" -> ""1228_onlyOwner"";
""1228_getBalance"" -> ""1228_onlyOwner"";
""1228_setVIPFee"" -> ""1228_onlyOwner"";
""1228_ethSendSameValue"" -> ""1228_isVIP"";
""1228_multisendToken"" -> ""1228_coinSendDifferentValue"";
""1228_mutiSendETHWithSameValue"" -> ""1228_ethSendSameValue"";
""1228_mutiSendETHWithDifferentValue"" -> ""1228_ethSendDifferentValue"";
""1228_coinSendDifferentValue"" -> ""1228_isVIP"";
""1228_registerVIP"" -> ""1228_getReceiverAddress"";
""1228_getBalance"" -> ""1228_getReceiverAddress"";
""1228_setReceiverAddress"" -> ""1228_onlyOwner"";
""1228_sendEth"" -> ""1228_ethSendSameValue"";
""1228_addToVIPList"" -> ""1228_onlyOwner"";
}
"
0xf1171e1e8df34ab97832342c7cbf04d9121a1ac3.sol,CSportsAuth,contract CSportsAuth is CSportsConstants { event ContractUpgrade(address newContract); address public ceoAddress; address public cfoAddress; address public cooAddress; address public commissionerAddress; bool public paused = false; bool public isDevelopment = true; modifier onlyUnderDevelopment() { require(isDevelopment == true); _; },1,"subgraph cluster_344_CSportsAuth {
label=""CSportsAuth"";
""344_withdrawBalance"" [label=""withdrawBalance""];
""344_setCOO"" [label=""setCOO""];
""344_unpause"" [label=""unpause""];
""344_setCommissioner"" [label=""setCommissioner""];
""344_setCEO"" [label=""setCEO""];
""344_pause"" [label=""pause""];
""344_setCLevelAddresses"" [label=""setCLevelAddresses""];
""344_setCFO"" [label=""setCFO""];
""344_setProduction"" [label=""setProduction""];
""344_unpause"" -> ""344_onlyCEO"";
""344_setCOO"" -> ""344_onlyCEO"";
""344_withdrawBalance"" -> ""344_onlyCFO"";
""344_unpause"" -> ""344_whenPaused"";
""344_pause"" -> ""344_whenNotPaused"";
""344_setProduction"" -> ""344_onlyCEO"";
""344_pause"" -> ""344_onlyCLevel"";
""344_setCommissioner"" -> ""344_onlyCEO"";
""344_setProduction"" -> ""344_onlyUnderDevelopment"";
""344_setCFO"" -> ""344_onlyCEO"";
""344_setCEO"" -> ""344_onlyCEO"";
""344_setCLevelAddresses"" -> ""344_onlyCEO"";
}
"
0x38c83b225eb17d44f33f8bb3bdc23d86733838db.sol,try_to_play,contract try_to_play { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_127_try_to_play {
label=""try_to_play"";
""127_start_try_to_play"" [label=""start_try_to_play""];
""127_Try"" [label=""Try""];
""127_StopGame"" [label=""StopGame""];
""127_NewQuestion"" [label=""NewQuestion""];
""127_fallback"" [label=""fallback""];
""127_newQuestioner"" [label=""newQuestioner""];
""127_NewQuestion"" -> ""127_onlyQuestionSender"";
""127_StopGame"" -> ""127_onlyQuestionSender"";
""127_newQuestioner"" -> ""127_onlyQuestionSender"";
}
"
0xed710216da4b1416a78768790ca9aa3633ca110f.sol,PLAY_AND_GAIN,"contract PLAY_AND_GAIN { string public question; address questionSender; bytes32 responseHash; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_PLAY_AND_GAIN {
label=""PLAY_AND_GAIN"";
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
}
"
0xf070aaa3149c73626d543e02d4c8826c1762ea71.sol,LUX,"contract LUX is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 80 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 45 * 1 days; uint256 public totalSupply = 800000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000e8; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0x6066C5C29Fedb817B2fBF494b771163254d62295; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1288_LUX {
label=""LUX"";
""1288_Distribute"" [label=""Distribute""];
""1288_transferOwnership"" [label=""transferOwnership""];
""1288_transfer"" [label=""transfer""];
""1288_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1288_allowance"" [label=""allowance""];
""1288_transferFrom"" [label=""transferFrom""];
""1288_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1288_distr"" [label=""distr""];
""1288_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1288_approve"" [label=""approve""];
""1288_withdraw"" [label=""withdraw""];
""1288_add"" [label=""add""];
""1288_getTokenBalance"" [label=""getTokenBalance""];
""1288_finishDistribution"" [label=""finishDistribution""];
""1288_constructor"" [label=""constructor""];
""1288_burn"" [label=""burn""];
""1288_getTokens"" [label=""getTokens""];
""1288_balanceOf"" [label=""balanceOf""];
""1288_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1288_withdrawAll"" [label=""withdrawAll""];
""1288_fallback"" [label=""fallback""];
""1288_transferFrom"" -> ""1288_onlyPayloadSize"";
""1288_updateTokensPerEth"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_canDistr"";
""1288_finishDistribution"" -> ""1288_onlyOwner"";
""1288_DistributeAirdropMultiple"" -> ""1288_onlyOwner"";
""1288_burn"" -> ""1288_onlyOwner"";
""1288_add"" -> ""1288_onlyOwner"";
""1288_transferOwnership"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_distr"";
""1288_DistributeAirdrop"" -> ""1288_onlyOwner"";
""1288_withdraw"" -> ""1288_onlyOwner"";
""1288_distr"" -> ""1288_canDistr"";
""1288_DistributeAirdrop"" -> ""1288_Distribute"";
""1288_withdrawAll"" -> ""1288_onlyOwner"";
""1288_fallback"" -> ""1288_getTokens"";
""1288_Distribute"" -> ""1288_onlyOwner"";
""1288_transfer"" -> ""1288_onlyPayloadSize"";
""1288_DistributeAirdropMultiple"" -> ""1288_Distribute"";
""1288_constructor"" -> ""1288_distr"";
""1288_finishDistribution"" -> ""1288_canDistr"";
""1288_withdrawForeignTokens"" -> ""1288_onlyOwner"";
}
"
0x264979ffd35d608e69b69681f4bbcba9877e6c4a.sol,qz_game,contract qz_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_127_qz_game {
label=""qz_game"";
""127_StopGame"" [label=""StopGame""];
""127_fallback"" [label=""fallback""];
""127_newQuestioner"" [label=""newQuestioner""];
""127_start_qz_game"" [label=""start_qz_game""];
""127_NewQuestion"" [label=""NewQuestion""];
""127_Try"" [label=""Try""];
""127_newQuestioner"" -> ""127_onlyQuestionSender"";
""127_StopGame"" -> ""127_onlyQuestionSender"";
""127_NewQuestion"" -> ""127_onlyQuestionSender"";
}
"
0xbf008cb93c2b19c3ae0db4149bcfa465b2ea0888.sol,GameTable,contract GameTable { using SafeMath for uint; struct Player { address addr; uint amount; uint profit; },1,"subgraph cluster_1183_GameTable {
label=""GameTable"";
""1183_getPlayerAmount"" [label=""getPlayerAmount""];
""1183_GameTable"" [label=""GameTable""];
""1183_getOptionInfo"" [label=""getOptionInfo""];
""1183_kill"" [label=""kill""];
""1183_newGame"" [label=""newGame""];
""1183_getGameNum"" [label=""getGameNum""];
""1183_setWinner"" [label=""setWinner""];
""1183_getGameInfo"" [label=""getGameInfo""];
""1183_getPlayerPlayInfo"" [label=""getPlayerPlayInfo""];
""1183_contribute"" [label=""contribute""];
""1183_newOption"" [label=""newOption""];
""1183_safeWithdrawal"" [label=""safeWithdrawal""];
""1183_getGameWinner"" [label=""getGameWinner""];
""1183_setWinner"" -> ""1183_safeWithdrawal"";
}
"
0xdc8a6ef9a8a4114773e806dc24bb8e7b6f3d92eb.sol,PullPayment,contract PullPayment { using SafeMath for uint256; mapping(address => uint256) public payments; uint256 public totalPayments; function withdrawPayments() public { address payee = msg.sender; uint256 payment = payments[payee]; require(payment != 0); require(address(this).balance >= payment); totalPayments = totalPayments.sub(payment); payments[payee] = 0; payee.transfer(payment); },1,"subgraph cluster_199_PullPayment {
label=""PullPayment"";
""199_asyncSend"" [label=""asyncSend""];
""199_withdrawPayments"" [label=""withdrawPayments""];
}
"
0x0e2354b2ea4a6312009b228d5171bf6a02c51150.sol,THE_GAME,contract THE_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_THE_GAME {
label=""THE_GAME"";
""143_NewQuestion"" [label=""NewQuestion""];
""143_StopGame"" [label=""StopGame""];
""143_fallback"" [label=""fallback""];
""143_Try"" [label=""Try""];
""143_ActivateContract"" [label=""ActivateContract""];
""143_newQuestioner"" [label=""newQuestioner""];
}
"
0xdb209c97e0de799bbf14e3377307780ddc26be4e.sol,DarkPay,"contract DarkPay is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 365 * 1 days; uint public round1 = now + 364 * 1 days; uint256 public totalSupply = 1000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 16000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0x024bf21EDAd749461Bf2E0830bC1F7b282bcea7C; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_DarkPay {
label=""DarkPay"";
""1261_transfer"" [label=""transfer""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_add"" [label=""add""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_burn"" [label=""burn""];
""1261_constructor"" [label=""constructor""];
""1261_distr"" [label=""distr""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_allowance"" [label=""allowance""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_approve"" [label=""approve""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
}
"
0x01e53a2e7122a63845b1c329d4fce8124dda5b06.sol,Loan,contract Loan is Base { struct Creditor { uint Time; uint Invested; },1,"subgraph cluster_496_Loan {
label=""Loan"";
""496_SetPrcntRate"" [label=""SetPrcntRate""];
""496_Wthdraw"" [label=""Wthdraw""];
""496_StartRefound"" [label=""StartRefound""];
""496_initLoan"" [label=""initLoan""];
""496_InvestFund"" [label=""InvestFund""];
""496_CheckProfit"" [label=""CheckProfit""];
""496_ToLend"" [label=""ToLend""];
""496_WithdrawToInvestor"" [label=""WithdrawToInvestor""];
""496_fallback"" [label=""fallback""];
""496_SetScndOwner"" [label=""SetScndOwner""];
""496_SetThrdOwner"" [label=""SetThrdOwner""];
""496_TakeBack"" [label=""TakeBack""];
""496_isOwner"" [label=""isOwner""];
""496_WithdrawToInvestor"" -> ""496_isOwner"";
""496_fallback"" -> ""496_InvestFund"";
""496_TakeBack"" -> ""496_CheckProfit"";
}
"
0x7271f8fdd7693dca37b40403080abe89ae740168.sol,Game,contract Game { address constant private PROMO = 0x51A2BF880F4db7713E95498833308ffE4D61d080; uint constant public PROMO_PERCENT = 15; uint constant public MULTIPLIER = 120; uint constant public MAX_DEPOSIT = 1 ether; uint constant public MIN_DEPOSIT = 0.01 ether; uint constant public LAST_DEPOSIT_PERCENT = 5; LastDeposit public last; struct Deposit { address depositor; uint128 deposit; uint128 expect; },1,"subgraph cluster_474_Game {
label=""Game"";
""474_pay"" [label=""pay""];
""474_getDeposit"" [label=""getDeposit""];
""474_getDepositsCount"" [label=""getDepositsCount""];
""474_getDeposits"" [label=""getDeposits""];
""474_getQueueLength"" [label=""getQueueLength""];
""474_fallback"" [label=""fallback""];
""474_fallback"" -> ""474_pay"";
""474_getDeposits"" -> ""474_getDepositsCount"";
}
"
0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_2222_RefundVault {
label=""RefundVault"";
""2222_refund"" [label=""refund""];
""2222_enableRefunds"" [label=""enableRefunds""];
""2222_deposit"" [label=""deposit""];
""2222_close"" [label=""close""];
""2222_RefundVault"" [label=""RefundVault""];
""2222_deposit"" -> ""2222_onlyOwner"";
""2222_close"" -> ""2222_onlyOwner"";
""2222_enableRefunds"" -> ""2222_onlyOwner"";
}
"
0x3008a6c26e54399fd0ece8fd2e5e06b3d807509c.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_369_AccessService {
label=""AccessService"";
""369_setFinance"" [label=""setFinance""];
""369_withdraw"" [label=""withdraw""];
""369_setService"" [label=""setService""];
}
"
0x345ab5e5f971dbdbc92af2779ce7a8bbf1819e59.sol,TwentyDollars,contract TwentyDollars { struct Bid { address owner; uint256 amount; },1,"subgraph cluster_262_TwentyDollars {
label=""TwentyDollars"";
""262_winnerWithdraw"" [label=""winnerWithdraw""];
""262_biddingClosed"" [label=""biddingClosed""];
""262_ownerWithdraw"" [label=""ownerWithdraw""];
""262_getMyBalance"" [label=""getMyBalance""];
""262_constructor"" [label=""constructor""];
""262_getContractBalance"" [label=""getContractBalance""];
""262_bid"" [label=""bid""];
""262_withdraw"" [label=""withdraw""];
""262_fallback"" [label=""fallback""];
""262_ownerWithdraw"" -> ""262_onlyOwner"";
""262_winnerWithdraw"" -> ""262_onlyHighestBidder"";
""262_bid"" -> ""262_onlyBiddingOpen"";
""262_ownerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_winnerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_ownerWithdraw"" -> ""262_getContractBalance"";
""262_fallback"" -> ""262_bid"";
}
"
0xe386b139ed3715ca4b18fd52671bdcea1cdfe4b1.sol,Crowdsale,"contract Crowdsale is Owned, Stateful { uint public etherPriceUSDWEI; address public beneficiary; uint public totalLimitUSDWEI; uint public minimalSuccessUSDWEI; uint public collectedUSDWEI; uint public crowdsaleStartTime; uint public crowdsaleFinishTime; struct Investor { uint amountTokens; uint amountWei; }",1,"subgraph cluster_1286_Crowdsale {
label=""Crowdsale"";
""1286_getTokenPriceUSDWEI"" [label=""getTokenPriceUSDWEI""];
""1286_returnInvestmentsTo"" [label=""returnInvestmentsTo""];
""1286_setEtherPriceUSDWEI"" [label=""setEtherPriceUSDWEI""];
""1286_fallback"" [label=""fallback""];
""1286_returnInvestmentsToInternal"" [label=""returnInvestmentsToInternal""];
""1286_emitAdditionalTokens"" [label=""emitAdditionalTokens""];
""1286_withdrawFunds"" [label=""withdrawFunds""];
""1286_emitTokensFor"" [label=""emitTokensFor""];
""1286_finishPrivateSaleAndStartPreSale"" [label=""finishPrivateSaleAndStartPreSale""];
""1286_returnInvestments"" [label=""returnInvestments""];
""1286_startPrivateSale"" [label=""startPrivateSale""];
""1286_withdrawBack"" [label=""withdrawBack""];
""1286_startSale"" [label=""startSale""];
""1286_Crowdsale"" [label=""Crowdsale""];
""1286_burnTokens"" [label=""burnTokens""];
""1286_depositUSD"" [label=""depositUSD""];
""1286_emitTokens"" [label=""emitTokens""];
""1286_completeSale"" [label=""completeSale""];
""1286_finishPreSale"" [label=""finishPreSale""];
""1286_depositBTC"" [label=""depositBTC""];
""1286_setBeneficiary"" [label=""setBeneficiary""];
""1286_failSale"" [label=""failSale""];
""1286_startSale"" -> ""1286_setState"";
""1286_startSale"" -> ""1286_onlyOwner"";
""1286_finishPrivateSaleAndStartPreSale"" -> ""1286_setState"";
""1286_startPrivateSale"" -> ""1286_setState"";
""1286_setBeneficiary"" -> ""1286_onlyOwner"";
""1286_depositBTC"" -> ""1286_emitTokensFor"";
""1286_depositBTC"" -> ""1286_limitNotExceeded"";
""1286_emitTokensFor"" -> ""1286_emitTokens"";
""1286_fallback"" -> ""1286_emitTokensFor"";
""1286_withdrawFunds"" -> ""1286_onlyOwner"";
""1286_depositBTC"" -> ""1286_onlyOwnerOrBtcOracle"";
""1286_failSale"" -> ""1286_setState"";
""1286_completeSale"" -> ""1286_onlyOwner"";
""1286_startPrivateSale"" -> ""1286_onlyOwner"";
""1286_withdrawBack"" -> ""1286_saleFailedState"";
""1286_completeSale"" -> ""1286_emitAdditionalTokens"";
""1286_returnInvestmentsTo"" -> ""1286_saleFailedState"";
""1286_fallback"" -> ""1286_crowdsaleState"";
""1286_finishPreSale"" -> ""1286_setState"";
""1286_finishPrivateSaleAndStartPreSale"" -> ""1286_onlyOwner"";
""1286_failSale"" -> ""1286_burnTokens"";
""1286_Crowdsale"" -> ""1286_Owned"";
""1286_returnInvestments"" -> ""1286_saleFailedState"";
""1286_setEtherPriceUSDWEI"" -> ""1286_onlyOwnerOrOracle"";
""1286_withdrawBack"" -> ""1286_returnInvestmentsToInternal"";
""1286_fallback"" -> ""1286_limitNotExceeded"";
""1286_depositBTC"" -> ""1286_crowdsaleState"";
""1286_depositUSD"" -> ""1286_limitNotExceeded"";
""1286_depositUSD"" -> ""1286_getTokenPriceUSDWEI"";
""1286_completeSale"" -> ""1286_setState"";
""1286_depositUSD"" -> ""1286_emitTokensFor"";
""1286_fallback"" -> ""1286_getTokenPriceUSDWEI"";
""1286_depositUSD"" -> ""1286_onlyOwner"";
""1286_depositBTC"" -> ""1286_getTokenPriceUSDWEI"";
""1286_finishPreSale"" -> ""1286_onlyOwner"";
""1286_depositUSD"" -> ""1286_crowdsaleState"";
""1286_returnInvestments"" -> ""1286_returnInvestmentsToInternal"";
""1286_returnInvestmentsTo"" -> ""1286_returnInvestmentsToInternal"";
}
"
0xaa652d53909b01c5a6b8e7cd814f9adea18c08f7.sol,TCRSale,"contract TCRSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; TCRToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1585_TCRSale {
label=""TCRSale"";
""1585_convertToMiniTcr"" [label=""convertToMiniTcr""];
""1585_terminate"" [label=""terminate""];
""1585_changeEndTime"" [label=""changeEndTime""];
""1585_safeWithdrawal"" [label=""safeWithdrawal""];
""1585_setRate"" [label=""setRate""];
""1585_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1585_changeStartTime"" [label=""changeStartTime""];
""1585_checkFundingGoal"" [label=""checkFundingGoal""];
""1585_checkFundingCap"" [label=""checkFundingCap""];
""1585_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1585_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1585_TCRSale"" [label=""TCRSale""];
""1585_fallback"" [label=""fallback""];
""1585_currentTime"" [label=""currentTime""];
""1585_fallback"" -> ""1585_whenNotPaused"";
""1585_ownerAllocateTokens"" -> ""1585_checkFundingGoal"";
""1585_fallback"" -> ""1585_beforeDeadline"";
""1585_fallback"" -> ""1585_checkFundingCap"";
""1585_ownerUnlockFund"" -> ""1585_onlyOwner"";
""1585_ownerSafeWithdrawal"" -> ""1585_onlyOwner"";
""1585_fallback"" -> ""1585_nonReentrant"";
""1585_ownerAllocateTokens"" -> ""1585_nonReentrant"";
""1585_ownerAllocateTokens"" -> ""1585_onlyOwner"";
""1585_setRate"" -> ""1585_onlyOwner"";
""1585_TCRSale"" -> ""1585_setRate"";
""1585_changeEndTime"" -> ""1585_onlyOwner"";
""1585_safeWithdrawal"" -> ""1585_afterDeadline"";
""1585_ownerAllocateTokens"" -> ""1585_checkFundingCap"";
""1585_fallback"" -> ""1585_checkFundingGoal"";
""1585_terminate"" -> ""1585_onlyOwner"";
""1585_ownerUnlockFund"" -> ""1585_afterDeadline"";
""1585_fallback"" -> ""1585_afterStartTime"";
""1585_changeStartTime"" -> ""1585_onlyOwner"";
""1585_safeWithdrawal"" -> ""1585_nonReentrant"";
""1585_ownerSafeWithdrawal"" -> ""1585_nonReentrant"";
""1585_fallback"" -> ""1585_saleNotClosed"";
}
"
0xcf91d43b85a5c53d85c567d4eed972965335aeea.sol,Slaughter3D,contract Slaughter3D is Owned { using SafeMath for uint; Snip3DInterface constant Snip3Dcontract_ = Snip3DInterface(0xb172BB8BAae74F27Ade3211E0c145388d3b4f8d8); function harvestableBalance() view public returns(uint256) { return ( address(this).balance) ; },1,"subgraph cluster_263_Slaughter3D {
label=""Slaughter3D"";
""263_fetchBalance"" [label=""fetchBalance""];
""263_validate"" [label=""validate""];
""263_fallback"" [label=""fallback""];
""263_fetchvault"" [label=""fetchvault""];
""263_harvestableBalance"" [label=""harvestableBalance""];
""263_sacUp"" [label=""sacUp""];
""263_unfetchedVault"" [label=""unfetchedVault""];
""263_fetchBalance"" -> ""263_onlyOwner"";
""263_sacUp"" -> ""263_onlyOwner"";
""263_validate"" -> ""263_onlyOwner"";
}
"
0xf3391a78b4d53b2a600ad9e663ae00f6d5bb41a4.sol,MillenniumNetwork,"contract MillenniumNetwork is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 330000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 1000000e8; uint public target0drop = 4000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_MillenniumNetwork {
label=""MillenniumNetwork"";
""1253_constructor"" [label=""constructor""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_distr"" [label=""distr""];
""1253_getTokens"" [label=""getTokens""];
""1253_fallback"" [label=""fallback""];
""1253_approve"" [label=""approve""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_withdraw"" [label=""withdraw""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_add"" [label=""add""];
""1253_transfer"" [label=""transfer""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_Distribute"" [label=""Distribute""];
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_distr"" -> ""1253_canDistr"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
}
"
0x1e200a9af1ab6a0d74cd44c489bf65744bc7d961.sol,BountyBG,"contract BountyBG { address public owner; uint256 public bountyCount = 0; uint256 public minBounty = 10 finney; uint256 public bountyFee = 2 finney; uint256 public bountyFeeCount = 0; uint256 public bountyBeneficiariesCount = 2; uint256 public bountyDuration = 30 hours; mapping(uint256 => Bounty) bountyAt; event BountyStatus(string _msg, uint256 _id, address _from, uint256 _amount); event RewardStatus(string _msg, uint256 _id, address _to, uint256 _amount); event ErrorStatus(string _msg, uint256 _id, address _to, uint256 _amount); struct Bounty { uint256 id; address owner; uint256 bounty; uint256 remainingBounty; uint256 startTime; uint256 endTime; bool ended; bool retracted; }",1,"subgraph cluster_551_BountyBG {
label=""BountyBG"";
""551_rewardUser"" [label=""rewardUser""];
""551_getBounty"" [label=""getBounty""];
""551_withdrawFee"" [label=""withdrawFee""];
""551_setMinBounty"" [label=""setMinBounty""];
""551_rewardUsers"" [label=""rewardUsers""];
""551_createBounty"" [label=""createBounty""];
""551_BountyBG"" [label=""BountyBG""];
""551_cancelBounty"" [label=""cancelBounty""];
""551_setBountyDuration"" [label=""setBountyDuration""];
""551_setBountyBeneficiariesCount"" [label=""setBountyBeneficiariesCount""];
""551_getBalance"" [label=""getBalance""];
""551_setBountyDuration"" -> ""551_onlyOwner"";
""551_rewardUser"" -> ""551_onlyOwner"";
""551_withdrawFee"" -> ""551_onlyOwner"";
""551_setMinBounty"" -> ""551_onlyOwner"";
""551_setBountyBeneficiariesCount"" -> ""551_onlyOwner"";
""551_rewardUsers"" -> ""551_onlyOwner"";
}
"
0xce51f6cac9fb2695d944f2d5e2699d68aa7b656e.sol,Locksmith,"contract Locksmith is owned, logger, helper { uint public nonce; uint public m_proofs; bool public didProve; bytes32 public lock; string public protocol = ; struct proof { address prover; address receiver; string key; bytes32 lock; }",1,"subgraph cluster_605_Locksmith {
label=""Locksmith"";
""605_kill"" [label=""kill""];
""605_fallback"" [label=""fallback""];
""605_logEvent"" [label=""logEvent""];
""605_unlock"" [label=""unlock""];
""605_Locksmith"" [label=""Locksmith""];
""605_sendTo"" [label=""sendTo""];
""605_setLock"" [label=""setLock""];
""605_setLock"" -> ""605_onlyOwner"";
""605_sendTo"" -> ""605_onlyOwner"";
""605_unlock"" -> ""605_logEvent"";
""605_kill"" -> ""605_onlyOwner"";
""605_sendTo"" -> ""605_logEvent"";
""605_setLock"" -> ""605_logEvent"";
}
"
0x4933dea7ea497a87d41acc5d8048ac2d8e6cedfb.sol,OrganizeFunds,contract OrganizeFunds { struct ActivityAccount { uint credited; uint balance; uint pctx10; address addr; string name; },1,"subgraph cluster_518_OrganizeFunds {
label=""OrganizeFunds"";
""518_fallback"" [label=""fallback""];
""518_hariKari"" [label=""hariKari""];
""518_setName"" [label=""setName""];
""518_addActivityAccount"" [label=""addActivityAccount""];
""518_setWitdrawGas"" [label=""setWitdrawGas""];
""518_getActivityAccountInfo"" [label=""getActivityAccountInfo""];
""518_reset"" [label=""reset""];
""518_getTotalPctx10"" [label=""getTotalPctx10""];
""518_distribute"" [label=""distribute""];
""518_withdraw"" [label=""withdraw""];
""518_lock"" [label=""lock""];
""518_OrganizeFunds"" [label=""OrganizeFunds""];
""518_lock"" -> ""518_ownerOnly"";
""518_setWitdrawGas"" -> ""518_ownerOnly"";
""518_addActivityAccount"" -> ""518_ownerOnly"";
""518_hariKari"" -> ""518_unlockedOnly"";
""518_reset"" -> ""518_unlockedOnly"";
""518_addActivityAccount"" -> ""518_unlockedOnly"";
""518_setName"" -> ""518_ownerOnly"";
""518_reset"" -> ""518_ownerOnly"";
""518_hariKari"" -> ""518_ownerOnly"";
}
"
0x6947335452cb7a452fc337c28cb0d597806c7672.sol,SmartWeddingContract,"contract SmartWeddingContract { event WrittenContractProposed(uint timestamp, string ipfsHash, address wallet); event Signed(uint timestamp, address wallet); event ContractSigned(uint timestamp); event AssetProposed(uint timestamp, string asset, address wallet); event AssetAddApproved(uint timestamp, string asset, address wallet); event AssetAdded(uint timestamp, string asset); event AssetRemoveApproved(uint timestamp, string asset, address wallet); event AssetRemoved(uint timestamp, string asset); event DivorceApproved(uint timestamp, address wallet); event Divorced(uint timestamp); event FundsSent(uint timestamp, address wallet, uint amount); event FundsReceived(uint timestamp, address wallet, uint amount); bool public signed = false; bool public divorced = false; mapping (address => bool) private hasSigned; mapping (address => bool) private hasDivorced; address public husbandAddress; address public wifeAddress; string public writtenContractIpfsHash; struct Asset { string data; uint husbandAllocation; uint wifeAllocation; bool added; bool removed; mapping (address => bool) hasApprovedAdd; mapping (address => bool) hasApprovedRemove; }",1,"subgraph cluster_823_SmartWeddingContract {
label=""SmartWeddingContract"";
""823_pay"" [label=""pay""];
""823_constructor"" [label=""constructor""];
""823_fallback"" [label=""fallback""];
""823_signContract"" [label=""signContract""];
""823_removeAsset"" [label=""removeAsset""];
""823_approveAsset"" [label=""approveAsset""];
""823_divorce"" [label=""divorce""];
""823_proposeWrittenContract"" [label=""proposeWrittenContract""];
""823_isSameString"" [label=""isSameString""];
""823_proposeAsset"" [label=""proposeAsset""];
""823_getAssetIds"" [label=""getAssetIds""];
""823_proposeAsset"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_isNotDivorced"";
""823_signContract"" -> ""823_isSameString"";
""823_fallback"" -> ""823_isNotDivorced"";
""823_proposeWrittenContract"" -> ""823_onlySpouse"";
""823_pay"" -> ""823_onlySpouse"";
""823_proposeAsset"" -> ""823_isNotDivorced"";
""823_pay"" -> ""823_isNotDivorced"";
""823_proposeAsset"" -> ""823_isSameString"";
""823_fallback"" -> ""823_isSigned"";
""823_approveAsset"" -> ""823_isNotDivorced"";
""823_approveAsset"" -> ""823_isSigned"";
""823_approveAsset"" -> ""823_onlySpouse"";
""823_proposeAsset"" -> ""823_isSigned"";
""823_signContract"" -> ""823_onlySpouse"";
""823_divorce"" -> ""823_isSigned"";
""823_pay"" -> ""823_isSigned"";
""823_divorce"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_isSigned"";
""823_divorce"" -> ""823_isNotDivorced"";
}
"
0xd39ff379cb1f4d6f2aade581c039c15db2cb28f8.sol,BackMeApp,contract BackMeApp { address public owner; uint256 public minEsteemAmount; bool public isShutDown; struct EtherBox { bytes32 label; address owner; uint256 expiration; string ownerUrl; },1,"subgraph cluster_437_BackMeApp {
label=""BackMeApp"";
""437_esteem"" [label=""esteem""];
""437_setMinEsteemAmount"" [label=""setMinEsteemAmount""];
""437_getEtherBoxes"" [label=""getEtherBoxes""];
""437_constructor"" [label=""constructor""];
""437_deleteEtherBox"" [label=""deleteEtherBox""];
""437_publishEtherBox"" [label=""publishEtherBox""];
""437_toggleFactoryPower"" [label=""toggleFactoryPower""];
""437_destroyFactory"" [label=""destroyFactory""];
""437_isExpired"" [label=""isExpired""];
""437_publishEtherBox"" -> ""437_onlyWhenRunning"";
""437_toggleFactoryPower"" -> ""437_onlyOwner"";
""437_destroyFactory"" -> ""437_onlyOwner"";
""437_setMinEsteemAmount"" -> ""437_onlyOwner"";
}
"
0x006ff3494c04680cfbf39b0396054486f3f6ad32.sol,PLAY_NOW,contract PLAY_NOW { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>=1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_PLAY_NOW {
label=""PLAY_NOW"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_Try"" [label=""Try""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_SetupPlay"" [label=""SetupPlay""];
""132_newQuestioner"" [label=""newQuestioner""];
}
"
0x1767856bc75cf070de5e6ba3d0c718440f008c66.sol,TimeCapsuleEvent,"contract TimeCapsuleEvent is Ownable { address public Owner; mapping (address=>uint) public deposits; uint public openDate; event Initialized(address indexed owner, uint openOn); function initCapsule(uint open) { Owner = msg.sender; openDate = open; Initialized(Owner, openDate); }",1,"subgraph cluster_181_TimeCapsuleEvent {
label=""TimeCapsuleEvent"";
""181_withdraw"" [label=""withdraw""];
""181_fallback"" [label=""fallback""];
""181_kill"" [label=""kill""];
""181_deposit"" [label=""deposit""];
""181_initCapsule"" [label=""initCapsule""];
""181_kill"" -> ""181_onlyOwner"";
""181_withdraw"" -> ""181_onlyOwner"";
""181_fallback"" -> ""181_deposit"";
}
"
0x325f89386b72087530440e0bceb8490d78b47f21.sol,EtherStore,contract EtherStore is Managable{ bool public WrapperisEnabled; address public EtherWrapper; modifier WrapperEnabled{ require(WrapperisEnabled); _; },1,"subgraph cluster_1412_EtherStore {
label=""EtherStore"";
""1412_deposit"" [label=""deposit""];
""1412_deployWrapper"" [label=""deployWrapper""];
""1412_withdrawTo"" [label=""withdrawTo""];
""1412_depositTo"" [label=""depositTo""];
""1412_EtherStore"" [label=""EtherStore""];
""1412_setupWrapper"" [label=""setupWrapper""];
""1412_fallback"" [label=""fallback""];
""1412_withdraw"" [label=""withdraw""];
""1412_changeWrapper"" [label=""changeWrapper""];
""1412_deployWrapper"" -> ""1412_PreWrapper"";
""1412_changeWrapper"" -> ""1412_WrapperEnabled"";
""1412_EtherStore"" -> ""1412_Managable"";
""1412_fallback"" -> ""1412_deposit"";
""1412_withdrawTo"" -> ""1412_WrapperEnabled"";
""1412_withdraw"" -> ""1412_WrapperEnabled"";
""1412_setupWrapper"" -> ""1412_onlyAdmin"";
""1412_deployWrapper"" -> ""1412_onlyAdmin"";
""1412_deposit"" -> ""1412_WrapperEnabled"";
""1412_changeWrapper"" -> ""1412_onlyAdmin"";
""1412_depositTo"" -> ""1412_WrapperEnabled"";
""1412_setupWrapper"" -> ""1412_PreWrapper"";
}
"
0x8cd06b5c327b0e277a7f6b08b9acea4d8ee36180.sol,JungleScratch,contract JungleScratch is Owned { using SafeMath for uint; uint public LimitBottom = 0.02 ether; uint public LimitTop = 0.1 ether; address public Drawer; struct Game { bytes32 SecretKey_P; bool isPlay; bool isPay; uint Result; uint Time; address Buyer; uint value; },1,"subgraph cluster_1109_JungleScratch {
label=""JungleScratch"";
""1109_fallback"" [label=""fallback""];
""1109_changeLimit"" [label=""changeLimit""];
""1109_changeDrawer"" [label=""changeDrawer""];
""1109_getTicketTime"" [label=""getTicketTime""];
""1109_submit"" [label=""submit""];
""1109_withdraw"" [label=""withdraw""];
""1109_getisPlay"" [label=""getisPlay""];
""1109_award"" [label=""award""];
""1109_chargeOwe"" [label=""chargeOwe""];
""1109_JungleScratch"" [label=""JungleScratch""];
""1109_withdraw"" -> ""1109_onlyOwner"";
""1109_changeDrawer"" -> ""1109_onlyOwner"";
""1109_changeLimit"" -> ""1109_onlyOwner"";
}
"
0x83d3abc4e75885db350ace57f99c3a3e00286fe8.sol,BetaCoin,"contract BetaCoin is ERC20 { using SafeMath for uint256; address owner1 = msg.sender; address owner2; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) times; mapping (address => mapping (uint256 => uint256)) dorpnum; mapping (address => mapping (uint256 => uint256)) dorptime; mapping (address => mapping (uint256 => uint256)) freeday; mapping (address => bool) public frozenAccount; mapping (address => bool) public airlist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 _Rate = 10 ** decimals; uint256 public totalSupply = 10000000000 * _Rate; uint256 public totalDistributed = 0; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 200 * _Rate; uint256 public _per = 1; bool public distributionClosed = true; bool key; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event FrozenFunds(address target, bool frozen); event Distr(address indexed to, uint256 amount); event DistrClosed(bool Closed); modifier onlyOwner() { require(msg.sender == owner1 || msg.sender == owner2); _; }",1,"subgraph cluster_1230_BetaCoin {
label=""BetaCoin"";
""1230_approve"" [label=""approve""];
""1230_closeDistribution"" [label=""closeDistribution""];
""1230_freezeAccount"" [label=""freezeAccount""];
""1230_balanceOf"" [label=""balanceOf""];
""1230_BetaCoin"" [label=""BetaCoin""];
""1230_fallback"" [label=""fallback""];
""1230_Set_per"" [label=""Set_per""];
""1230_freeze"" [label=""freeze""];
""1230_distr"" [label=""distr""];
""1230_getTokens"" [label=""getTokens""];
""1230_transfer"" [label=""transfer""];
""1230_distribute"" [label=""distribute""];
""1230_transferOwnership"" [label=""transferOwnership""];
""1230_nowInSeconds"" [label=""nowInSeconds""];
""1230_withdraw"" [label=""withdraw""];
""1230_allowance"" [label=""allowance""];
""1230_transferFrom"" [label=""transferFrom""];
""1230_lockOf"" [label=""lockOf""];
""1230_distribute"" -> ""1230_distr"";
""1230_closeDistribution"" -> ""1230_onlyOwner"";
""1230_transferOwnership"" -> ""1230_onlyOwner"";
""1230_transferFrom"" -> ""1230_onlyPayloadSize"";
""1230_freeze"" -> ""1230_freezeAccount"";
""1230_transferFrom"" -> ""1230_lockOf"";
""1230_transfer"" -> ""1230_onlyPayloadSize"";
""1230_transfer"" -> ""1230_lockOf"";
""1230_fallback"" -> ""1230_getTokens"";
""1230_withdraw"" -> ""1230_onlyOwner"";
""1230_distribute"" -> ""1230_onlyOwner"";
""1230_freeze"" -> ""1230_onlyOwner"";
""1230_Set_per"" -> ""1230_onlyOwner"";
}
"
0x6ace03f517ae15f1a8d1b6811d23f7aa8c295be0.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_342_RefundVault {
label=""RefundVault"";
""342_enableRefunds"" [label=""enableRefunds""];
""342_refund"" [label=""refund""];
""342_constructor"" [label=""constructor""];
""342_close"" [label=""close""];
""342_deposit"" [label=""deposit""];
""342_enableRefunds"" -> ""342_onlyOwner"";
""342_deposit"" -> ""342_onlyOwner"";
""342_close"" -> ""342_onlyOwner"";
}
"
0xb387be1e10d56bd7c6849b7be9d6aad564854d72.sol,Alfa_quiZ,contract Alfa_quiZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Alfa_quiZ {
label=""Alfa_quiZ"";
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x78c2a1e91b52bca4130b6ed9edd9fbcfd4671c37.sol,WhaleGiveaway1,contract WhaleGiveaway1 { address public Owner = msg.sender; uint constant public minEligibility = 0.999001 ether; function() public payable { },1,"subgraph cluster_93_WhaleGiveaway1 {
label=""WhaleGiveaway1"";
""93_fallback"" [label=""fallback""];
""93_Command"" [label=""Command""];
""93_withdraw"" [label=""withdraw""];
""93_redeem"" [label=""redeem""];
}
"
0x1bee0ba6c6dee64b3ea062ba2f779e0e8ff4d733.sol,SIMPLECOIN,"contract SIMPLECOIN is StandardToken, Ownable { using SafeMath for uint; string public name = ; string public symbol = ; uint public decimals = 18; uint public constant WEI = 1000000000000000000; uint public constant INITIAL_SUPPLY = 500000000 * WEI; uint public constant ICO_START_TIME = 1507572447; uint public constant PRICE = 600; uint public constant _ONE = 1 * WEI; uint public constant _FIFTY = 50 * WEI; uint public constant _HUNDRED = 100 * WEI; uint public constant _FIVEHUNDRED = 500 * WEI; uint public constant _THOUSAND = 1000 * WEI; uint public constant _FIVETHOUSAND = 5000 * WEI; address public TEAM_WALLET = 0x08FB9bF8645c5f1B2540436C6352dA23eE843b50; address public ICO_ADDRESS = 0x1c01C01C01C01c01C01c01c01c01C01c01c01c01; uint public current_supply = 0; uint public ico_starting_supply = 0; bool public preMarketingSharesDistributed = false; bool public isPreICOPrivateOpened = false; bool public isPreICOPrivateClosed = false; bool public isPreICOPublicOpened = false; bool public isPreICOPublicClosed = false; bool public isICOOpened = false; bool public isICOClosed = false; event PreICOPrivateOpened(); event PreICOPrivateClosed(); event PreICOPublicOpened(); event PreICOPublicClosed(); event ICOOpened(); event ICOClosed(); event SupplyChanged(uint supply, uint old_supply); event SMPAcquired(address account, uint amount_in_wei, uint amount_in_rkc); function SIMPLECOIN() { distributeMarketingShares(); }",1,"subgraph cluster_1524_SIMPLECOIN {
label=""SIMPLECOIN"";
""1524_SIMPLECOIN"" [label=""SIMPLECOIN""];
""1524_closePreICOPrivate"" [label=""closePreICOPrivate""];
""1524_openPreICOPrivate"" [label=""openPreICOPrivate""];
""1524_openICO"" [label=""openICO""];
""1524_getBalance"" [label=""getBalance""];
""1524_transfer"" [label=""transfer""];
""1524_pullEtherFromContractAfterPreICOPublic"" [label=""pullEtherFromContractAfterPreICOPublic""];
""1524_transferFrom"" [label=""transferFrom""];
""1524_closeICO"" [label=""closeICO""];
""1524_getSMPTokensAmountPerWei"" [label=""getSMPTokensAmountPerWei""];
""1524_buy"" [label=""buy""];
""1524_fallback"" [label=""fallback""];
""1524_getSupply"" [label=""getSupply""];
""1524_getPriceSMPTokensPerWei"" [label=""getPriceSMPTokensPerWei""];
""1524_distributeMarketingShares"" [label=""distributeMarketingShares""];
""1524_pullEtherFromContractAfterPreICOPrivate"" [label=""pullEtherFromContractAfterPreICOPrivate""];
""1524_closePreICOPublic"" [label=""closePreICOPublic""];
""1524_openPreICOPublic"" [label=""openPreICOPublic""];
""1524_getSMPTokensAmountPerEthInternal"" [label=""getSMPTokensAmountPerEthInternal""];
""1524_pullEtherFromContractAfterICO"" [label=""pullEtherFromContractAfterICO""];
""1524_getSMPTokensLeftForICO"" [label=""getSMPTokensLeftForICO""];
""1524_getSMPTokensBoughtInICO"" [label=""getSMPTokensBoughtInICO""];
""1524_pullEtherFromContractAfterPreICOPrivate"" -> ""1524_onlyOwner"";
""1524_openPreICOPrivate"" -> ""1524_onlyOwner"";
""1524_getSMPTokensAmountPerWei"" -> ""1524_getSMPTokensAmountPerEthInternal"";
""1524_transferFrom"" -> ""1524_allowedPayments"";
""1524_closePreICOPrivate"" -> ""1524_onlyOwner"";
""1524_SIMPLECOIN"" -> ""1524_distributeMarketingShares"";
""1524_buy"" -> ""1524_getSMPTokensAmountPerEthInternal"";
""1524_transfer"" -> ""1524_allowedPayments"";
""1524_distributeMarketingShares"" -> ""1524_onlyOwner"";
""1524_closePreICOPublic"" -> ""1524_onlyOwner"";
""1524_pullEtherFromContractAfterICO"" -> ""1524_onlyOwner"";
""1524_transferFrom"" -> ""1524_transferFrom"";
""1524_getSMPTokensBoughtInICO"" -> ""1524_getSMPTokensLeftForICO"";
""1524_pullEtherFromContractAfterPreICOPublic"" -> ""1524_onlyOwner"";
""1524_openICO"" -> ""1524_onlyOwner"";
""1524_closeICO"" -> ""1524_onlyOwner"";
""1524_transfer"" -> ""1524_transfer"";
""1524_openPreICOPublic"" -> ""1524_onlyOwner"";
""1524_transfer"" -> ""1524_onlyPayloadSize"";
""1524_fallback"" -> ""1524_buy"";
}
"
0x7fceafdefc16b0f703a43ffb0451ddd2a7cbd6dc.sol,alfa_Quiz,contract alfa_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_147_alfa_Quiz {
label=""alfa_Quiz"";
""147_Start"" [label=""Start""];
""147_Try"" [label=""Try""];
""147_Stop"" [label=""Stop""];
""147_fallback"" [label=""fallback""];
""147_constructor"" [label=""constructor""];
""147_New"" [label=""New""];
""147_New"" -> ""147_isAdmin"";
""147_Start"" -> ""147_isAdmin"";
""147_Stop"" -> ""147_isAdmin"";
}
"
0x2aaefbac989f8951436c36474c304af7bf31bb26.sol,Broker,"contract Broker is Administration { event BrokerRegistered(uint indexed brokerId, address indexed broker); event AppendSubBroker(uint indexed brokerId, uint indexed subBrokerId, address indexed subBroker); event BrokerTransfer(address indexed newBroker, uint indexed brokerId, uint indexed subBrokerId); event BrokerFeeDistrubution(uint brokerId, address indexed vipBroker, uint indexed vipShare, uint subBrokerId, address indexed broker, uint share); event BrokerFeeClaim(address indexed broker, uint indexed fee); mapping (uint => address[]) BrokerIdToBrokers; mapping (uint => uint) BrokerIdToSpots; mapping (address => uint) BrokerIncoming; mapping (address => bool) UserToIfBroker; uint public vipBrokerFee = 5 ether; uint public brokerFee = 1.5 ether; uint public vipBrokerNum = 1000; uint public subBrokerNum = 5; function _brokerFeeDistribute(uint _price, uint _type, uint _brokerId, uint _subBrokerId) internal { address vipBroker = getBrokerAddress(_brokerId, 0); address broker = getBrokerAddress(_brokerId, _subBrokerId); require(vipBroker != address(0) && broker != address(0)); uint totalShare = _price*rewardPercent[_type]/100; BrokerIncoming[vipBroker] = BrokerIncoming[vipBroker] + totalShare*15/100; BrokerIncoming[broker] = BrokerIncoming[broker] + totalShare*85/100; emit BrokerFeeDistrubution(_brokerId, vipBroker, totalShare*15/100, _subBrokerId, broker, totalShare*85/100); }",1,"subgraph cluster_967_Broker {
label=""Broker"";
""967_transferBroker"" [label=""transferBroker""];
""967__brokerFeeDistribute"" [label=""_brokerFeeDistribute""];
""967_assignSubBroker"" [label=""assignSubBroker""];
""967_getBrokerAddress"" [label=""getBrokerAddress""];
""967_getVipBrokerNum"" [label=""getVipBrokerNum""];
""967_getBrokerInfo"" [label=""getBrokerInfo""];
""967_getBrokerIncoming"" [label=""getBrokerIncoming""];
""967_claimBrokerFee"" [label=""claimBrokerFee""];
""967_registerBroker"" [label=""registerBroker""];
""967_claimBrokerFee"" -> ""967_whenNotPaused"";
""967_transferBroker"" -> ""967_whenNotPaused"";
""967_getVipBrokerNum"" -> ""967_safeSub"";
""967__brokerFeeDistribute"" -> ""967_getBrokerAddress"";
}
"
0x1f4215fe007ee5b170391241656a28a8bd13826e.sol,VVToken,"contract VVToken is MultiOwner{ event SubmitTransaction(bytes32 transactionHash); event Confirmation(address sender, bytes32 transactionHash); event Execution(bytes32 transactionHash); event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event FeePaid(address indexed from, address indexed to, uint256 value); event VoidAccount(address indexed from, address indexed to, uint256 value); event Bonus(uint256 value); event Burn(uint256 value); string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 3000000000 * 10 ** uint256(decimals); uint256 public EthPerToken = 300000; uint256 public ChargeFee = 2; mapping(address => uint256) public balanceOf; mapping(address => bool) public frozenAccount; mapping (bytes32 => mapping (address => bool)) public Confirmations; mapping (bytes32 => Transaction) public Transactions; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1242_VVToken {
label=""VVToken"";
""1242__transfer"" [label=""_transfer""];
""1242_isConfirmed"" [label=""isConfirmed""];
""1242__collect_fee"" [label=""_collect_fee""];
""1242_executeTransaction"" [label=""executeTransaction""];
""1242_transferFrom"" [label=""transferFrom""];
""1242_setPrices"" [label=""setPrices""];
""1242_addConfirmation"" [label=""addConfirmation""];
""1242_confirmTransaction"" [label=""confirmTransaction""];
""1242_burn"" [label=""burn""];
""1242_AccountVoid"" [label=""AccountVoid""];
""1242_freezeAccount"" [label=""freezeAccount""];
""1242_bonus"" [label=""bonus""];
""1242_remainBalanced"" [label=""remainBalanced""];
""1242_VVToken"" [label=""VVToken""];
""1242_fallback"" [label=""fallback""];
""1242_execute"" [label=""execute""];
""1242_confirmationCount"" [label=""confirmationCount""];
""1242_addTransaction"" [label=""addTransaction""];
""1242_transfer"" [label=""transfer""];
""1242_setFee"" [label=""setFee""];
""1242_addConfirmation"" -> ""1242_onlyOwner"";
""1242_executeTransaction"" -> ""1242_isConfirmed"";
""1242_fallback"" -> ""1242__transfer"";
""1242_executeTransaction"" -> ""1242_notExecuted"";
""1242_transfer"" -> ""1242__transfer"";
""1242_execute"" -> ""1242_notNull"";
""1242_execute"" -> ""1242_onlyOwner"";
""1242_AccountVoid"" -> ""1242_onlyOwner"";
""1242_confirmTransaction"" -> ""1242_executeTransaction"";
""1242_addTransaction"" -> ""1242_notNull"";
""1242_setFee"" -> ""1242_onlyOwner"";
""1242_transferFrom"" -> ""1242__transfer"";
""1242_transferFrom"" -> ""1242__collect_fee"";
""1242_execute"" -> ""1242_confirmTransaction"";
""1242_bonus"" -> ""1242_onlyOwner"";
""1242_addConfirmation"" -> ""1242_notConfirmed"";
""1242_confirmTransaction"" -> ""1242_addConfirmation"";
""1242_transferFrom"" -> ""1242_onlyOwner"";
""1242_setPrices"" -> ""1242_onlyOwner"";
""1242_execute"" -> ""1242_addTransaction"";
""1242_confirmTransaction"" -> ""1242_onlyOwner"";
""1242_burn"" -> ""1242_onlyOwner"";
""1242_freezeAccount"" -> ""1242_onlyOwner"";
""1242_VVToken"" -> ""1242_MultiOwner"";
}
"
0x777777764382a3ae5e7631570583893bfdea7e05.sol,Destructible,contract Destructible is Ownable { function Destructible() payable public { },1,"subgraph cluster_177_Destructible {
label=""Destructible"";
""177_destroy"" [label=""destroy""];
""177_destroyAndSend"" [label=""destroyAndSend""];
""177_Destructible"" [label=""Destructible""];
""177_destroy"" -> ""177_onlyOwner"";
""177_destroyAndSend"" -> ""177_onlyOwner"";
}
"
0xee7477b1c42d173c0791cecf2592f6a8a4c16b0a.sol,BiddingBase,"contract BiddingBase is Pausable { uint40 public minTime = 60*10; uint public minBid = 50 finney - 1 szabo; address public operatorAddress; mapping(address => uint) public pendingReturns; uint public totalReturns; event Withdraw(address indexed bidder, uint256 value); function withdraw() public { uint amount = pendingReturns[msg.sender]; require (amount > 0); totalReturns -= amount; pendingReturns[msg.sender] -= amount; msg.sender.transfer(amount); emit Withdraw(msg.sender, amount); }",1,"subgraph cluster_277_BiddingBase {
label=""BiddingBase"";
""277_isContract"" [label=""isContract""];
""277_destroyContract"" [label=""destroyContract""];
""277_withdraw"" [label=""withdraw""];
""277_withdrawEthFromBalance"" [label=""withdrawEthFromBalance""];
""277_setOperator"" [label=""setOperator""];
""277_setMinTime"" [label=""setMinTime""];
""277_setMinBid"" [label=""setMinBid""];
""277_setOperator"" -> ""277_onlyOwner"";
""277_setMinBid"" -> ""277_onlyOwner"";
""277_destroyContract"" -> ""277_onlyOwner"";
""277_setMinTime"" -> ""277_onlyOwner"";
""277_withdrawEthFromBalance"" -> ""277_onlyOwner"";
}
"
0x35bab7165a301e99c75c3e59b48817856b4d5e5c.sol,Bet,"contract Bet is Ownable, DataCenterBridge { using SafeMath for uint; event LogDistributeReward(address addr, uint reward, uint index); event LogGameResult(bytes32 indexed category, bytes32 indexed gameId, uint leftPts, uint rightPts); event LogParticipant(address addr, uint choice, uint betAmount); event LogRefund(address addr, uint betAmount); event LogBetClosed(bool isRefund, uint timestamp); event LogDealerWithdraw(address addr, uint withdrawAmount); struct BetInfo { bytes32 category; bytes32 gameId; uint8 spread; uint8 flag; uint16 leftOdds; uint16 middleOdds; uint16 rightOdds; uint minimumBet; uint startTime; uint deposit; address dealer; }",1,"subgraph cluster_1524_BetCenter {
label=""BetCenter"";
""1524_createBet"" [label=""createBet""];
""1524_fallback"" [label=""fallback""];
""1524_getBetsByCategory"" [label=""getBetsByCategory""];
""1524_getGameIdsByCategory"" [label=""getGameIdsByCategory""];
}
"
0x4ee1ba168551379fd8a59e2e918ff9ee109a6abf.sol,PlayerBook,"contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private owner; TeamDreamHubInterface public TeamDreamHub_; TeamDreamInterface public TeamDream_; MSFun.Data private msData; function multiSigDev(bytes32 _whatFunction) private returns (bool) {return(MSFun.multiSig(msData, TeamDream_.requiredDevSignatures(), _whatFunction));}",1,"subgraph cluster_1675_PlayerBook {
label=""PlayerBook"";
""1675_addMeToAllGames"" [label=""addMeToAllGames""];
""1675_registerNameXID"" [label=""registerNameXID""];
""1675_checkSignersByName"" [label=""checkSignersByName""];
""1675_setRegistrationFee"" [label=""setRegistrationFee""];
""1675_getPlayerLAff"" [label=""getPlayerLAff""];
""1675_checkSignersByAddress"" [label=""checkSignersByAddress""];
""1675_multiSigDev"" [label=""multiSigDev""];
""1675_deleteProposal"" [label=""deleteProposal""];
""1675_registerNameCore"" [label=""registerNameCore""];
""1675_useMyOldName"" [label=""useMyOldName""];
""1675_deleteAnyProposal"" [label=""deleteAnyProposal""];
""1675_registerNameXaddrFromDapp"" [label=""registerNameXaddrFromDapp""];
""1675_registerNameXnameFromDapp"" [label=""registerNameXnameFromDapp""];
""1675_registerNameXaddr"" [label=""registerNameXaddr""];
""1675_getPlayerID"" [label=""getPlayerID""];
""1675_checkData"" [label=""checkData""];
""1675_registerNameXname"" [label=""registerNameXname""];
""1675_checkIfNameValid"" [label=""checkIfNameValid""];
""1675_getNameFee"" [label=""getNameFee""];
""1675_addMeToGame"" [label=""addMeToGame""];
""1675_addGame"" [label=""addGame""];
""1675_determinePID"" [label=""determinePID""];
""1675_getPlayerAddr"" [label=""getPlayerAddr""];
""1675_constructor"" [label=""constructor""];
""1675_getPlayerName"" [label=""getPlayerName""];
""1675_registerNameXIDFromDapp"" [label=""registerNameXIDFromDapp""];
""1675_registerNameXID"" -> ""1675_isHuman"";
""1675_registerNameXIDFromDapp"" -> ""1675_isRegisteredGame"";
""1675_registerNameXID"" -> ""1675_registerNameCore"";
""1675_checkSignersByName"" -> ""1675_onlyDevs"";
""1675_checkSignersByAddress"" -> ""1675_onlyDevs"";
""1675_registerNameXIDFromDapp"" -> ""1675_registerNameCore"";
""1675_registerNameXaddrFromDapp"" -> ""1675_determinePID"";
""1675_addGame"" -> ""1675_multiSigDev"";
""1675_registerNameXname"" -> ""1675_isHuman"";
""1675_addGame"" -> ""1675_deleteProposal"";
""1675_setRegistrationFee"" -> ""1675_deleteProposal"";
""1675_addGame"" -> ""1675_onlyDevs"";
""1675_registerNameXnameFromDapp"" -> ""1675_isRegisteredGame"";
""1675_useMyOldName"" -> ""1675_isHuman"";
""1675_getPlayerID"" -> ""1675_isRegisteredGame"";
""1675_addMeToAllGames"" -> ""1675_isHuman"";
""1675_registerNameXnameFromDapp"" -> ""1675_registerNameCore"";
""1675_registerNameXname"" -> ""1675_determinePID"";
""1675_addMeToGame"" -> ""1675_isHuman"";
""1675_registerNameXaddr"" -> ""1675_registerNameCore"";
""1675_registerNameXnameFromDapp"" -> ""1675_determinePID"";
""1675_checkData"" -> ""1675_onlyDevs"";
""1675_registerNameXaddr"" -> ""1675_isHuman"";
""1675_setRegistrationFee"" -> ""1675_multiSigDev"";
""1675_setRegistrationFee"" -> ""1675_onlyDevs"";
""1675_registerNameXID"" -> ""1675_determinePID"";
""1675_registerNameXaddr"" -> ""1675_determinePID"";
""1675_registerNameXaddrFromDapp"" -> ""1675_registerNameCore"";
""1675_deleteAnyProposal"" -> ""1675_onlyDevs"";
""1675_registerNameXaddrFromDapp"" -> ""1675_isRegisteredGame"";
""1675_registerNameXname"" -> ""1675_registerNameCore"";
""1675_registerNameXIDFromDapp"" -> ""1675_determinePID"";
""1675_getPlayerID"" -> ""1675_determinePID"";
}
"
0x56b7f2a2d6f70d88b991e6c7b8005e0a13a9b379.sol,CryptoCurrencyExchange,"contract CryptoCurrencyExchange is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 3000000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function CryptoCurrencyExchange() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_CryptoCurrencyExchange {
label=""CryptoCurrencyExchange"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_CryptoCurrencyExchange"" [label=""CryptoCurrencyExchange""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x6bfe93d41c21dc9b72ac5785c12aa400bf205b31.sol,Zedd,"contract Zedd is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 12; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 300000000e12; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 50000e12; address multisig = 0x478E1dD0fb8aE01bE6F23a052CCAdd3037FF0c9F ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1152_Zedd {
label=""Zedd"";
""1152_Distribute"" [label=""Distribute""];
""1152_fallback"" [label=""fallback""];
""1152_transfer"" [label=""transfer""];
""1152_balanceOf"" [label=""balanceOf""];
""1152_constructor"" [label=""constructor""];
""1152_transferOwnership"" [label=""transferOwnership""];
""1152_allowance"" [label=""allowance""];
""1152_burn"" [label=""burn""];
""1152_transferFrom"" [label=""transferFrom""];
""1152_withdraw"" [label=""withdraw""];
""1152_finishDistribution"" [label=""finishDistribution""];
""1152_getTokenBalance"" [label=""getTokenBalance""];
""1152_distr"" [label=""distr""];
""1152_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1152_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1152_add"" [label=""add""];
""1152_approve"" [label=""approve""];
""1152_withdrawAll"" [label=""withdrawAll""];
""1152_getTokens"" [label=""getTokens""];
""1152_Distribute"" -> ""1152_onlyOwner"";
""1152_transferOwnership"" -> ""1152_onlyOwner"";
""1152_getTokens"" -> ""1152_distr"";
""1152_distr"" -> ""1152_canDistr"";
""1152_getTokens"" -> ""1152_canDistr"";
""1152_transfer"" -> ""1152_onlyPayloadSize"";
""1152_updateTokensPerEth"" -> ""1152_onlyOwner"";
""1152_finishDistribution"" -> ""1152_onlyOwner"";
""1152_add"" -> ""1152_onlyOwner"";
""1152_constructor"" -> ""1152_distr"";
""1152_burn"" -> ""1152_onlyOwner"";
""1152_withdrawForeignTokens"" -> ""1152_onlyOwner"";
""1152_withdrawAll"" -> ""1152_onlyOwner"";
""1152_finishDistribution"" -> ""1152_canDistr"";
""1152_withdraw"" -> ""1152_onlyOwner"";
""1152_transferFrom"" -> ""1152_onlyPayloadSize"";
""1152_fallback"" -> ""1152_getTokens"";
}
"
0x5c3536c7cd64c3bcb6ea01c00c2919bcd5053aba.sol,BlastBox,"contract BlastBox is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 10; uint public deadline = now + 15 * 1 days; uint public round2 = now + 15 * 1 days; uint public round1 = now + 1 * 1 days; uint256 public totalSupply = 275000e10; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 5000e10; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0x9d4C38355d267C567ca431BCb8585cC010aF1ED0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_BlastBox {
label=""BlastBox"";
""1263_withdraw"" [label=""withdraw""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_add"" [label=""add""];
""1263_approve"" [label=""approve""];
""1263_distr"" [label=""distr""];
""1263_burn"" [label=""burn""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_transfer"" [label=""transfer""];
""1263_fallback"" [label=""fallback""];
""1263_getTokens"" [label=""getTokens""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_Distribute"" [label=""Distribute""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_constructor"" [label=""constructor""];
""1263_allowance"" [label=""allowance""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_constructor"" -> ""1263_distr"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_distr"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_distr"" -> ""1263_canDistr"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
}
"
0xee58ee0b1519bb47801812a3a9c83ab600c63d81.sol,PrivatePaymentProcessor,"contract PrivatePaymentProcessor is Pausable, Destructible, Contactable, Restricted { using SafeMath for uint256; string constant VERSION = ; event OrderPaidInEther( uint indexed _orderId, address indexed _originAddress, uint _price, uint _monethaFee ); event OrderPaidInToken( uint indexed _orderId, address indexed _originAddress, address indexed _tokenAddress, uint _price, uint _monethaFee ); event PaymentsProcessed( address indexed _merchantAddress, uint _amount, uint _fee ); event PaymentRefunding( uint indexed _orderId, address indexed _clientAddress, uint _amount, string _refundReason ); event PaymentWithdrawn( uint indexed _orderId, address indexed _clientAddress, uint amount ); MonethaGateway public monethaGateway; MerchantWallet public merchantWallet; bytes32 public merchantIdHash; enum WithdrawState {Null, Pending, Withdrawn}",1,"subgraph cluster_1609_PrivatePaymentProcessor {
label=""PrivatePaymentProcessor"";
""1609_withdrawRefund"" [label=""withdrawRefund""];
""1609_withdrawTokenRefund"" [label=""withdrawTokenRefund""];
""1609_payForOrder"" [label=""payForOrder""];
""1609_PrivatePaymentProcessor"" [label=""PrivatePaymentProcessor""];
""1609_payForOrderInTokens"" [label=""payForOrderInTokens""];
""1609_refundTokenPayment"" [label=""refundTokenPayment""];
""1609_refundPayment"" [label=""refundPayment""];
""1609_setMonethaGateway"" [label=""setMonethaGateway""];
""1609_setMerchantWallet"" [label=""setMerchantWallet""];
""1609_withdrawRefund"" -> ""1609_whenNotPaused"";
""1609_withdrawTokenRefund"" -> ""1609_whenNotPaused"";
""1609_PrivatePaymentProcessor"" -> ""1609_setMonethaGateway"";
""1609_refundPayment"" -> ""1609_onlyMonetha"";
""1609_PrivatePaymentProcessor"" -> ""1609_setMerchantWallet"";
""1609_payForOrderInTokens"" -> ""1609_whenNotPaused"";
""1609_payForOrder"" -> ""1609_whenNotPaused"";
""1609_setMerchantWallet"" -> ""1609_onlyOwner"";
""1609_refundTokenPayment"" -> ""1609_whenNotPaused"";
""1609_refundPayment"" -> ""1609_whenNotPaused"";
""1609_setMonethaGateway"" -> ""1609_onlyOwner"";
""1609_refundTokenPayment"" -> ""1609_onlyMonetha"";
}
"
0x2628e13a3cbdc52ed96b4b8d6b1041d3ef3a409e.sol,Participant,"contract Participant { address constant smartolution = 0xe0ae35fe7Df8b86eF08557b535B89bB6cb036C23; address public owner; uint public daily; constructor(address _owner, uint _daily) public { owner = _owner; daily = _daily; }",1,"subgraph cluster_406_Participant {
label=""Participant"";
""406_constructor"" [label=""constructor""];
""406_daily"" [label=""daily""];
""406_processPayment"" [label=""processPayment""];
""406_fallback"" [label=""fallback""];
}
"
0xeaac4254f43b1802a32c2b2eeb0241ddc39eb561.sol,Hanabira,"contract Hanabira is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 5000000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 5000000000e8; uint public target0drop = 70000; uint public progress0drop = 0; address multisig = 0x587aF154ddFB78fe97B7F02FC17D4Eca338AF325; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Hanabira {
label=""Hanabira"";
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_fallback"" [label=""fallback""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_transfer"" [label=""transfer""];
""1261_burn"" [label=""burn""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_constructor"" [label=""constructor""];
""1261_Distribute"" [label=""Distribute""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_add"" [label=""add""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_distr"" [label=""distr""];
""1261_allowance"" [label=""allowance""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_approve"" [label=""approve""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_constructor"" -> ""1261_distr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
}
"
0x287fc5e0c7055660b2d05b4718a049141bb7e1ee.sol,Bqt_Token,"contract Bqt_Token is ERC20Interface { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public constant maxTokens = 800*10**6*10**18; uint256 public constant ownerSupply = maxTokens*51/100; uint256 _totalSupply = ownerSupply; uint256 public constant token_price = 10**18*1/800; uint256 public pre_ico_start = 1531872000; uint256 public ico_start = 1533081600; uint256 public ico_finish = 1540944000; uint public constant minValuePre = 10**18*1/1000000; uint public constant minValue = 10**18*1/1000000; uint public constant maxValue = 3000*10**18; uint8 public constant exchange_coefficient = 102; using SafeMath for uint; address public owner; address public moderator; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; mapping(address => uint256) public orders_sell_amount; mapping(address => uint256) public orders_sell_price; address[] public orders_sell_list; event Order_sell(address indexed _owner, uint256 _max_amount, uint256 _price); event Order_execute(address indexed _from, address indexed _to, uint256 _amount, uint256 _price); modifier onlyOwner() { if (msg.sender != owner) { throw; }",1,"subgraph cluster_1525_Bqt_Token {
label=""Bqt_Token"";
""1525_withdraw"" [label=""withdraw""];
""1525_change_pre_ico_start"" [label=""change_pre_ico_start""];
""1525_fallback"" [label=""fallback""];
""1525_change_ico_finish"" [label=""change_ico_finish""];
""1525_orders_sell_total"" [label=""orders_sell_total""];
""1525_allowance"" [label=""allowance""];
""1525_totalSupply"" [label=""totalSupply""];
""1525_get_orders_sell_amount"" [label=""get_orders_sell_amount""];
""1525_order_buy"" [label=""order_buy""];
""1525_changeOwner"" [label=""changeOwner""];
""1525_transfer"" [label=""transfer""];
""1525_changeModerator"" [label=""changeModerator""];
""1525_order_sell"" [label=""order_sell""];
""1525_Bqt_Token"" [label=""Bqt_Token""];
""1525_balanceOf"" [label=""balanceOf""];
""1525_change_ico_start"" [label=""change_ico_start""];
""1525_transferFrom"" [label=""transferFrom""];
""1525_approve"" [label=""approve""];
""1525_tokens_buy"" [label=""tokens_buy""];
""1525_get_orders_sell_amount"" -> ""1525_balanceOf"";
""1525_changeModerator"" -> ""1525_onlyOwner"";
""1525_change_ico_start"" -> ""1525_onlyModerator"";
""1525_order_buy"" -> ""1525_get_orders_sell_amount"";
""1525_fallback"" -> ""1525_tokens_buy"";
""1525_change_pre_ico_start"" -> ""1525_onlyModerator"";
""1525_changeOwner"" -> ""1525_onlyOwner"";
""1525_withdraw"" -> ""1525_onlyOwner"";
""1525_change_ico_finish"" -> ""1525_onlyModerator"";
}
"
0x0cfa149c0a843e1f8d9bc5c6e6bebf901845cebe.sol,ENVELOPE,contract ENVELOPE { bytes32 public hashPass; bool closed = false; address sender; uint unlockTime; function GetHash(bytes pass) public pure returns (bytes32) {return keccak256(pass);},1,"subgraph cluster_150_ENVELOPE {
label=""ENVELOPE"";
""150_GetHash"" [label=""GetHash""];
""150_fallback"" [label=""fallback""];
""150_SetPass"" [label=""SetPass""];
""150_SetGiftTime"" [label=""SetGiftTime""];
""150_GetGift"" [label=""GetGift""];
""150_PassHasBeenSet"" [label=""PassHasBeenSet""];
""150_Revoce"" [label=""Revoce""];
""150_GetGift"" -> ""150_canOpen"";
""150_Revoce"" -> ""150_canOpen"";
}
"
0xf1171e1e8df34ab97832342c7cbf04d9121a1ac3.sol,CSportsAuth,contract CSportsAuth is CSportsConstants { event ContractUpgrade(address newContract); address public ceoAddress; address public cfoAddress; address public cooAddress; address public commissionerAddress; bool public paused = false; bool public isDevelopment = true; modifier onlyUnderDevelopment() { require(isDevelopment == true); _; },1,"subgraph cluster_344_CSportsAuth {
label=""CSportsAuth"";
""344_withdrawBalance"" [label=""withdrawBalance""];
""344_setCOO"" [label=""setCOO""];
""344_unpause"" [label=""unpause""];
""344_setCommissioner"" [label=""setCommissioner""];
""344_setCEO"" [label=""setCEO""];
""344_pause"" [label=""pause""];
""344_setCLevelAddresses"" [label=""setCLevelAddresses""];
""344_setCFO"" [label=""setCFO""];
""344_setProduction"" [label=""setProduction""];
""344_unpause"" -> ""344_onlyCEO"";
""344_setCOO"" -> ""344_onlyCEO"";
""344_withdrawBalance"" -> ""344_onlyCFO"";
""344_unpause"" -> ""344_whenPaused"";
""344_pause"" -> ""344_whenNotPaused"";
""344_setProduction"" -> ""344_onlyCEO"";
""344_pause"" -> ""344_onlyCLevel"";
""344_setCommissioner"" -> ""344_onlyCEO"";
""344_setProduction"" -> ""344_onlyUnderDevelopment"";
""344_setCFO"" -> ""344_onlyCEO"";
""344_setCEO"" -> ""344_onlyCEO"";
""344_setCLevelAddresses"" -> ""344_onlyCEO"";
}
"
0xdcb5410ef70f59a5a2839fc6d4d0b2ca981f5e2d.sol,CoinMmc,"contract CoinMmc { address public admin_address = 0x64b33dB1Cc804e7CA51D9c21F132567923D7BA00; address public account_address = 0x64b33dB1Cc804e7CA51D9c21F132567923D7BA00; mapping(address => uint256) balances; string public name = ; string public symbol = ; uint8 public decimals = 2; uint256 initSupply = 1000000000000; uint256 public totalSupply = 0; constructor() payable public { totalSupply = mul(initSupply, 10**uint256(decimals)); balances[account_address] = totalSupply; _add_lock_account(0x6efB62605A66E32582c37b835F81Bc91A6a8fb2e, mul(80000000000,10**uint256(decimals)), 1596815160); _add_lock_account(0x0ba46c0fC6a5C206855cEf215222e347E1559eDf, mul(120000000000,10**uint256(decimals)), 1596815160); _add_lock_account(0xE269695D497387DfEAFE12b0b3B54441683F63C8, mul(100000000000,10**uint256(decimals)), 1628351160); }",1,"subgraph cluster_1187_CoinMmc {
label=""CoinMmc"";
""1187_transfer"" [label=""transfer""];
""1187_constructor"" [label=""constructor""];
""1187_increaseApproval"" [label=""increaseApproval""];
""1187_div"" [label=""div""];
""1187_sub"" [label=""sub""];
""1187_allowance"" [label=""allowance""];
""1187_fallback"" [label=""fallback""];
""1187_withDraw"" [label=""withDraw""];
""1187_burn"" [label=""burn""];
""1187_setAdmin"" [label=""setAdmin""];
""1187_add"" [label=""add""];
""1187_setAirDrop"" [label=""setAirDrop""];
""1187_balanceOf"" [label=""balanceOf""];
""1187__add_lock_account"" [label=""_add_lock_account""];
""1187_buyTokens"" [label=""buyTokens""];
""1187_transferFrom"" [label=""transferFrom""];
""1187_mul"" [label=""mul""];
""1187_setDirectDrop"" [label=""setDirectDrop""];
""1187_decreaseApproval"" [label=""decreaseApproval""];
""1187__burn"" [label=""_burn""];
""1187_airDrop"" [label=""airDrop""];
""1187_approve"" [label=""approve""];
""1187_airDrop"" -> ""1187_add"";
""1187_constructor"" -> ""1187_mul"";
""1187_constructor"" -> ""1187__add_lock_account"";
""1187_buyTokens"" -> ""1187_mul"";
""1187_setAdmin"" -> ""1187_admin_only"";
""1187__burn"" -> ""1187_sub"";
""1187_setAirDrop"" -> ""1187_admin_only"";
""1187_buyTokens"" -> ""1187_div"";
""1187_increaseApproval"" -> ""1187_add"";
""1187_buyTokens"" -> ""1187_sub"";
""1187_buyTokens"" -> ""1187_add"";
""1187_airDrop"" -> ""1187_mul"";
""1187_decreaseApproval"" -> ""1187_sub"";
""1187_transferFrom"" -> ""1187_add"";
""1187_airDrop"" -> ""1187_sub"";
""1187_burn"" -> ""1187__burn"";
""1187_fallback"" -> ""1187_buyTokens"";
""1187_transfer"" -> ""1187_sub"";
""1187_fallback"" -> ""1187_airDrop"";
""1187_setDirectDrop"" -> ""1187_admin_only"";
""1187_transferFrom"" -> ""1187_sub"";
""1187_transfer"" -> ""1187_add"";
}
"
0x2cf02304f36effd519be79850d21335684c6073e.sol,AccEthRegCenter,contract AccEthRegCenter is Ownable { struct User { address useraddress; uint useramount; bool lastTransfer; },1,"subgraph cluster_412_AccEthRegCenter {
label=""AccEthRegCenter"";
""412_SetAmount"" [label=""SetAmount""];
""412_transfer"" [label=""transfer""];
""412_fallback"" [label=""fallback""];
""412_transfertoacc"" [label=""transfertoacc""];
""412_GetUser"" [label=""GetUser""];
""412_ResetAllAmount"" [label=""ResetAllAmount""];
""412_AddUser"" [label=""AddUser""];
""412_TransferToAllAccounts"" [label=""TransferToAllAccounts""];
""412_SetAddress"" [label=""SetAddress""];
""412_SetAddress"" -> ""412_onlyOwner"";
""412_transfer"" -> ""412_onlyOwner"";
""412_SetAmount"" -> ""412_onlyOwner"";
""412_TransferToAllAccounts"" -> ""412_onlyOwner"";
""412_AddUser"" -> ""412_onlyOwner"";
""412_transfertoacc"" -> ""412_onlyOwner"";
""412_ResetAllAmount"" -> ""412_onlyOwner"";
}
"
0x7909209a3d78a66f6d71885f10b6ea7c6c58177b.sol,Try_Me,contract Try_Me { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_Try_Me {
label=""Try_Me"";
""118_start_round"" [label=""start_round""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_Try"" [label=""Try""];
}
"
0xec9a75a532311b6102d91d439e1db055dc9414d9.sol,PD88,contract PD88 is Owned { modifier isHuman() { address _addr = msg.sender; require (_addr == tx.origin); uint256 _codeLength; assembly {_codeLength := extcodesize(_addr)},1,"subgraph cluster_1409_PD88 {
label=""PD88"";
""1409_getFullround"" [label=""getFullround""];
""1409_luckyBuy"" [label=""luckyBuy""];
""1409_withdraw"" [label=""withdraw""];
""1409_updateTimer"" [label=""updateTimer""];
""1409_win"" [label=""win""];
""1409_withdrawOwner"" [label=""withdrawOwner""];
""1409_getDonationPrice"" [label=""getDonationPrice""];
""1409_reducetime"" [label=""reducetime""];
""1409_getTimeLeft"" [label=""getTimeLeft""];
""1409_buyDonation"" [label=""buyDonation""];
""1409_getMyRevenue"" [label=""getMyRevenue""];
""1409_buyDonation"" -> ""1409_isHuman"";
""1409_buyDonation"" -> ""1409_updateTimer"";
""1409_win"" -> ""1409_isHuman"";
""1409_withdrawOwner"" -> ""1409_onlyOwner"";
""1409_buyDonation"" -> ""1409_luckyBuy"";
""1409_getFullround"" -> ""1409_getMyRevenue"";
""1409_withdraw"" -> ""1409_isHuman"";
""1409_reducetime"" -> ""1409_isHuman"";
""1409_withdraw"" -> ""1409_getMyRevenue"";
}
"
0xb429ecbd7cda1cb82cbe0ae9044310d2f74de67c.sol,SmzTradingContract,contract SmzTradingContract { address public constant RECEIVER_ADDRESS = 0xf3eB3CA356c111ECb418D457e55A3A3D185faf61; uint256 public constant ACCEPTED_AMOUNT = 3 ether; uint256 public RECEIVER_PAYOUT_THRESHOLD = 100 ether; address public constant END_ADDRESS = 0x3559e34004b944906Bc727a40d7568a98bDc42d3; uint256 public constant END_AMOUNT = 0.39 ether; bool public ended = false; mapping(address => bool) public addressesAllowed; mapping(address => bool) public addressesDeposited; address public manager; function SmzTradingContract() public { manager = msg.sender; },1,"subgraph cluster_248_SmzTradingContract {
label=""SmzTradingContract"";
""248_removeMultipleAllowedAddresses"" [label=""removeMultipleAllowedAddresses""];
""248_SmzTradingContract"" [label=""SmzTradingContract""];
""248_addAllowedAddress"" [label=""addAllowedAddress""];
""248_removeAllowedAddress"" [label=""removeAllowedAddress""];
""248_addMultipleAllowedAddresses"" [label=""addMultipleAllowedAddresses""];
""248_fallback"" [label=""fallback""];
""248_setManager"" [label=""setManager""];
}
"
0x28e0d54349c00607505aadc713147140fb60ea12.sol,TheQuizGame,contract TheQuizGame { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_128_TheQuizGame {
label=""TheQuizGame"";
""128_StartTheGame"" [label=""StartTheGame""];
""128_NewQuestion"" [label=""NewQuestion""];
""128_Try"" [label=""Try""];
""128_StopGame"" [label=""StopGame""];
""128_newQuestioner"" [label=""newQuestioner""];
""128_fallback"" [label=""fallback""];
}
"
0xbd6a3418cb51418c94cc11d2d49012a2b79e10fe.sol,WeaponSales,"contract WeaponSales is WeaponToken { event Purchase(address indexed owner, uint256 unitPrice, uint32 amount); function buyWeapon(uint256 _weaponId) public payable returns (uint256 id) { id = _generateWeapon(msg.sender, _weaponId); Transfer(address(0), msg.sender, id); Purchase(msg.sender, weaponModels[_weaponId].price, 1); }",1,"subgraph cluster_966_WeaponSales {
label=""WeaponSales"";
""966_withdrawBalance"" [label=""withdrawBalance""];
""966_buyWeapon"" [label=""buyWeapon""];
""966_withdrawBalance"" -> ""966_onlyOwner"";
""966_buyWeapon"" -> ""966__generateWeapon"";
}
"
0x4c60e311d8fba04e313f7e7b3dec61b3028726d1.sol,EtherWorldCup,"contract EtherWorldCup { using SafeMath for uint; address internal constant administrator = 0x4F4eBF556CFDc21c3424F85ff6572C77c514Fcae; address internal constant givethAddress = 0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc; string name = ; string symbol = ; mapping (string => int8) worldCupGameID; mapping (int8 => bool) gameFinished; mapping (int8 => uint) gameLocked; mapping (int8 => string) gameResult; int8 internal latestGameFinished; uint internal prizePool; uint internal givethPool; int registeredPlayers; mapping (address => bool) playerRegistered; mapping (address => mapping (int8 => bool)) playerMadePrediction; mapping (address => mapping (int8 => string)) playerPredictions; mapping (address => int8[64]) playerPointArray; mapping (address => int8) playerGamesScored; mapping (address => uint) playerStreak; address[] playerList; event Registration( address _player ); event PlayerLoggedPrediction( address _player, int _gameID, string _prediction ); event PlayerUpdatedScore( address _player, int _lastGamePlayed ); event Comparison( address _player, uint _gameID, string _myGuess, string _result, bool _correct ); event StartAutoScoring( address _player ); event StartScoring( address _player, uint _gameID ); event DidNotPredict( address _player, uint _gameID ); event RipcordRefund( address _player ); constructor () public { worldCupGameID[] = 1; gameLocked[1] = 1528988400; worldCupGameID[] = 2; worldCupGameID[] = 3; worldCupGameID[] = 4; gameLocked[2] = 1529064000; gameLocked[3] = 1529074800; gameLocked[4] = 1529085600; worldCupGameID[] = 5; worldCupGameID[] = 6; worldCupGameID[] = 7; worldCupGameID[] = 8; gameLocked[5] = 1529143200; gameLocked[6] = 1529154000; gameLocked[7] = 1529164800; gameLocked[8] = 1529175600; worldCupGameID[] = 9; worldCupGameID[] = 10; worldCupGameID[] = 11; gameLocked[9] = 1529236800; gameLocked[10] = 1529247600; gameLocked[11] = 1529258400; worldCupGameID[] = 12; worldCupGameID[] = 13; worldCupGameID[] = 14; gameLocked[12] = 1529323200; gameLocked[13] = 1529334000; gameLocked[14] = 1529344800; worldCupGameID[] = 15; worldCupGameID[] = 16; worldCupGameID[] = 17; gameLocked[15] = 1529409600; gameLocked[16] = 1529420400; gameLocked[17] = 1529431200; worldCupGameID[] = 18; worldCupGameID[] = 19; worldCupGameID[] = 20; gameLocked[18] = 1529496000; gameLocked[19] = 1529506800; gameLocked[20] = 1529517600; worldCupGameID[] = 21; worldCupGameID[] = 22; worldCupGameID[] = 23; gameLocked[21] = 1529582400; gameLocked[22] = 1529593200; gameLocked[23] = 1529604000; worldCupGameID[] = 24; worldCupGameID[] = 25; worldCupGameID[] = 26; gameLocked[24] = 1529668800; gameLocked[25] = 1529679600; gameLocked[26] = 1529690400; worldCupGameID[] = 27; worldCupGameID[] = 28; worldCupGameID[] = 29; gameLocked[27] = 1529755200; gameLocked[28] = 1529766000; gameLocked[29] = 1529776800; worldCupGameID[] = 30; worldCupGameID[] = 31; worldCupGameID[] = 32; gameLocked[30] = 1529841600; gameLocked[31] = 1529852400; gameLocked[32] = 1529863200; worldCupGameID[] = 33; worldCupGameID[] = 34; worldCupGameID[] = 35; worldCupGameID[] = 36; gameLocked[33] = 1529935200; gameLocked[34] = 1529935200; gameLocked[35] = 1529949600; gameLocked[36] = 1529949600; worldCupGameID[] = 37; worldCupGameID[] = 38; worldCupGameID[] = 39; worldCupGameID[] = 40; gameLocked[37] = 1530021600; gameLocked[38] = 1530021600; gameLocked[39] = 1530036000; gameLocked[40] = 1530036000; worldCupGameID[] = 41; worldCupGameID[] = 42; worldCupGameID[] = 43; worldCupGameID[] = 44; gameLocked[41] = 1530108000; gameLocked[42] = 1530108000; gameLocked[43] = 1530122400; gameLocked[44] = 1530122400; worldCupGameID[] = 45; worldCupGameID[] = 46; worldCupGameID[] = 47; worldCupGameID[] = 48; gameLocked[45] = 1530194400; gameLocked[46] = 1530194400; gameLocked[47] = 1530208800; gameLocked[48] = 1530208800; worldCupGameID[] = 49; worldCupGameID[] = 50; gameLocked[49] = 1530367200; gameLocked[50] = 1530381600; worldCupGameID[] = 51; worldCupGameID[] = 52; gameLocked[51] = 1530453600; gameLocked[52] = 1530468000; worldCupGameID[] = 53; worldCupGameID[] = 54; gameLocked[53] = 1530540000; gameLocked[54] = 1530554400; worldCupGameID[] = 55; worldCupGameID[] = 56; gameLocked[55] = 1530626400; gameLocked[56] = 1530640800; worldCupGameID[] = 57; worldCupGameID[] = 58; gameLocked[57] = 1530885600; gameLocked[58] = 1530900000; worldCupGameID[] = 59; worldCupGameID[] = 60; gameLocked[59] = 1530972000; gameLocked[60] = 1530986400; worldCupGameID[] = 61; gameLocked[61] = 1531245600; worldCupGameID[] = 62; gameLocked[62] = 1531332000; worldCupGameID[] = 63; gameLocked[63] = 1531576800; worldCupGameID[] = 64; gameLocked[64] = 1531666800; latestGameFinished = 0; }",1,"subgraph cluster_1938_EtherWorldCup {
label=""EtherWorldCup"";
""1938_pullRipCord"" [label=""pullRipCord""];
""1938_equalStrings"" [label=""equalStrings""];
""1938_calculateScore"" [label=""calculateScore""];
""1938_gameResultsLogged"" [label=""gameResultsLogged""];
""1938_addNewGame"" [label=""addNewGame""];
""1938_viewScore"" [label=""viewScore""];
""1938_playerGuess"" [label=""playerGuess""];
""1938_playerLastScoredGame"" [label=""playerLastScoredGame""];
""1938_compare"" [label=""compare""];
""1938_concludeTournament"" [label=""concludeTournament""];
""1938_playerIsRegistered"" [label=""playerIsRegistered""];
""1938_makePrediction"" [label=""makePrediction""];
""1938_countParticipants"" [label=""countParticipants""];
""1938_constructor"" [label=""constructor""];
""1938__isCorrectBuyin"" [label=""_isCorrectBuyin""];
""1938_updateAllScores"" [label=""updateAllScores""];
""1938_correctResult"" [label=""correctResult""];
""1938_logResult"" [label=""logResult""];
""1938_showPlayerScores"" [label=""showPlayerScores""];
""1938_register"" [label=""register""];
""1938_updateScore"" [label=""updateScore""];
""1938_logResult"" -> ""1938_equalStrings"";
""1938_makePrediction"" -> ""1938_equalStrings"";
""1938_updateAllScores"" -> ""1938_updateScore"";
""1938_equalStrings"" -> ""1938_compare"";
""1938_viewScore"" -> ""1938_equalStrings"";
""1938_updateScore"" -> ""1938_equalStrings"";
""1938_logResult"" -> ""1938_isAdministrator"";
""1938_concludeTournament"" -> ""1938_playerIsRegistered"";
""1938_addNewGame"" -> ""1938_isAdministrator"";
""1938_pullRipCord"" -> ""1938_isAdministrator"";
""1938_concludeTournament"" -> ""1938_isAdministrator"";
""1938_register"" -> ""1938__isCorrectBuyin"";
}
"
0x333b20d643b58263e1558de655fda9cf7d07c401.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1002_RefundVault {
label=""RefundVault"";
""1002_deposit"" [label=""deposit""];
""1002_refund"" [label=""refund""];
""1002_RefundVault"" [label=""RefundVault""];
""1002_enableRefunds"" [label=""enableRefunds""];
""1002_close"" [label=""close""];
""1002_close"" -> ""1002_onlyOwner"";
""1002_enableRefunds"" -> ""1002_onlyOwner"";
""1002_deposit"" -> ""1002_onlyOwner"";
}
"
0x5c8951c94b059900d05b10d592b44c78574196c5.sol,EtherCityToken,"contract EtherCityToken is ERC721 { event CityCreated(uint256 tokenId, string name, string country, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name, string country); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.005 ether; uint256 private secondStepLimit = 0.055 ether; uint256 private thirdStepLimit = 0.5 ether; uint256 private fourthStepLimit = 10.0 ether; mapping (uint256 => address) public cityIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public cityIndexToApproved; mapping (uint256 => uint256) private cityIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct City { string name; string country; }",1,"subgraph cluster_1081_EtherCityToken {
label=""EtherCityToken"";
""1081__approved"" [label=""_approved""];
""1081_totalSupply"" [label=""totalSupply""];
""1081_takeOwnership"" [label=""takeOwnership""];
""1081__createCity"" [label=""_createCity""];
""1081_setCOO"" [label=""setCOO""];
""1081__transfer"" [label=""_transfer""];
""1081_transferFrom"" [label=""transferFrom""];
""1081_payout"" [label=""payout""];
""1081_name"" [label=""name""];
""1081__addressNotNull"" [label=""_addressNotNull""];
""1081_balanceOf"" [label=""balanceOf""];
""1081_symbol"" [label=""symbol""];
""1081__withdrawFunds"" [label=""_withdrawFunds""];
""1081__payout"" [label=""_payout""];
""1081_setCEO"" [label=""setCEO""];
""1081_createContractCity"" [label=""createContractCity""];
""1081_EtherCityToken"" [label=""EtherCityToken""];
""1081_implementsERC721"" [label=""implementsERC721""];
""1081_createPromoCity"" [label=""createPromoCity""];
""1081_tokensOfOwner"" [label=""tokensOfOwner""];
""1081_purchase"" [label=""purchase""];
""1081_priceOf"" [label=""priceOf""];
""1081_approve"" [label=""approve""];
""1081_getCity"" [label=""getCity""];
""1081_transfer"" [label=""transfer""];
""1081__owns"" [label=""_owns""];
""1081_ownerOf"" [label=""ownerOf""];
""1081_transfer"" -> ""1081__owns"";
""1081_setCEO"" -> ""1081_onlyCEO"";
""1081_takeOwnership"" -> ""1081__approved"";
""1081_transfer"" -> ""1081__transfer"";
""1081_payout"" -> ""1081__payout"";
""1081_createPromoCity"" -> ""1081__createCity"";
""1081_createPromoCity"" -> ""1081_onlyCOO"";
""1081_tokensOfOwner"" -> ""1081_balanceOf"";
""1081_takeOwnership"" -> ""1081__transfer"";
""1081_setCOO"" -> ""1081_onlyCEO"";
""1081_transferFrom"" -> ""1081__transfer"";
""1081_createContractCity"" -> ""1081_onlyCOO"";
""1081_transfer"" -> ""1081__addressNotNull"";
""1081_transferFrom"" -> ""1081__approved"";
""1081_purchase"" -> ""1081__transfer"";
""1081__createCity"" -> ""1081__transfer"";
""1081_approve"" -> ""1081__owns"";
""1081_payout"" -> ""1081_onlyCLevel"";
""1081_createContractCity"" -> ""1081__createCity"";
""1081_purchase"" -> ""1081__addressNotNull"";
""1081_transferFrom"" -> ""1081__owns"";
""1081_transferFrom"" -> ""1081__addressNotNull"";
""1081_tokensOfOwner"" -> ""1081_totalSupply"";
""1081_takeOwnership"" -> ""1081__addressNotNull"";
}
"
0xf2d54d17d3dc3810a0d62042a0b381df122ed162.sol,BeercoinICO,"contract BeercoinICO is GuardedBeercoinICO { Beercoin internal beercoin = Beercoin(0x7367A68039d4704f30BfBF6d948020C3B07DFC59); uint public constant price = 0.000006 ether; uint public constant softCap = 48 ether; uint public constant begin = 1526637600; uint public constant end = 1530395999; event FundTransfer(address backer, uint amount, bool isContribution); mapping(address => uint256) public balanceOf; uint public soldBeercoins = 0; uint public raisedEther = 0 ether; bool public paused = false; modifier isOpen { require(now >= begin && now <= end && !paused); _; }",1,"subgraph cluster_483_BeercoinICO {
label=""BeercoinICO"";
""483_withdraw"" [label=""withdraw""];
""483_transfer"" [label=""transfer""];
""483_pause"" [label=""pause""];
""483_resume"" [label=""resume""];
""483_fallback"" [label=""fallback""];
""483_claimFunds"" [label=""claimFunds""];
""483_claimBeercoins"" [label=""claimBeercoins""];
""483_fallback"" -> ""483_isOpen"";
""483_resume"" -> ""483_onlyOwner"";
""483_claimFunds"" -> ""483_goalReached"";
""483_transfer"" -> ""483_isOpen"";
""483_pause"" -> ""483_onlyOwner"";
""483_transfer"" -> ""483_onlyOwner"";
""483_claimFunds"" -> ""483_onlyOwner"";
""483_withdraw"" -> ""483_goalNotReached"";
""483_claimBeercoins"" -> ""483_onlyOwner"";
}
"
0xec7ba2ff3c46b9417d34ca9941ae2f62268c5add.sol,AllYours,contract AllYours { address private _platformAddress = 0xbE9C1088FEEB8B48A96Da0231062eA757D0a9613; uint private _totalEth = 0.06 ether; uint128 private _oneceEth = 0.02 ether; uint256 private _period = 1; address private _owner; constructor() public{ _owner = msg.sender; },1,"subgraph cluster_765_AllYours {
label=""AllYours"";
""765_draw"" [label=""draw""];
""765_fallback"" [label=""fallback""];
""765_getHistory"" [label=""getHistory""];
""765_kill"" [label=""kill""];
""765_getPeriod"" [label=""getPeriod""];
""765_clear"" [label=""clear""];
""765_addressToString"" [label=""addressToString""];
""765_strConcat"" [label=""strConcat""];
""765_getCurrentJoinPersonNumber"" [label=""getCurrentJoinPersonNumber""];
""765_uint2str"" [label=""uint2str""];
""765_toBytes"" [label=""toBytes""];
""765_constructor"" [label=""constructor""];
""765_getCurrentBalance"" [label=""getCurrentBalance""];
""765_fallback"" -> ""765_uint2str"";
""765_fallback"" -> ""765_strConcat"";
""765_fallback"" -> ""765_draw"";
""765_fallback"" -> ""765_clear"";
""765_fallback"" -> ""765_addressToString"";
""765_draw"" -> ""765_toBytes"";
}
"
0xcf377dfd654676940e2b5a87cf2673def25aeaed.sol,GreenEthereusPromo,"contract GreenEthereusPromo { string public constant name = ; string public constant symbol = ; event Transfer(address indexed from, address indexed to, uint256 value); address owner; uint public index; constructor() public { owner = msg.sender; }",1,"subgraph cluster_149_GreenEthereusPromo {
label=""GreenEthereusPromo"";
""149_fallback"" [label=""fallback""];
""149_resetIndex"" [label=""resetIndex""];
""149_withdrawBalance"" [label=""withdrawBalance""];
""149_constructor"" [label=""constructor""];
""149_massSending"" [label=""massSending""];
""149_transferOwnership"" [label=""transferOwnership""];
""149_transferOwnership"" -> ""149_onlyOwner"";
""149_resetIndex"" -> ""149_onlyOwner"";
""149_withdrawBalance"" -> ""149_onlyOwner"";
""149_massSending"" -> ""149_onlyOwner"";
}
"
0x4176f0f2b7c95486a5ae06e3d1b29201a42e7630.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1026_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1026_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1026_constructor"" [label=""constructor""];
""1026_depositToken"" [label=""depositToken""];
""1026_tokenFallback"" [label=""tokenFallback""];
""1026_depositEther"" [label=""depositEther""];
""1026_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1026_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1026_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1026_distributeTokenToAddressesAndAmounts"" -> ""1026_onlyOwner"";
""1026_distributeWithTransferFrom"" -> ""1026_onlyOwner"";
""1026_approveToPullOutTokens"" -> ""1026_onlyOwner"";
""1026_depositEther"" -> ""1026_whenNotPaused"";
""1026_tokenFallback"" -> ""1026_whenNotPaused"";
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1026_onlyOwner"";
""1026_distributeTokenToAddress"" -> ""1026_onlyOwner"";
""1026_depositToken"" -> ""1026_whenNotPaused"";
}
"
0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol,TwoCoinsOneMoonGame,contract TwoCoinsOneMoonGame { struct Bettor { address account; uint256 amount; },1,"subgraph cluster_536_TwoCoinsOneMoonGame {
label=""TwoCoinsOneMoonGame"";
""536_getBetAmount"" [label=""getBetAmount""];
""536_constructor"" [label=""constructor""];
""536_addEvent"" [label=""addEvent""];
""536_depositBalance"" [label=""depositBalance""];
""536_putMessage"" [label=""putMessage""];
""536_checkMoon"" [label=""checkMoon""];
""536_withdraw"" [label=""withdraw""];
""536_betRedCoin"" [label=""betRedCoin""];
""536_betBlueCoin"" [label=""betBlueCoin""];
""536_burstBubble"" [label=""burstBubble""];
""536_checkMoon"" -> ""536_addEvent"";
""536_betBlueCoin"" -> ""536_getBetAmount"";
""536_burstBubble"" -> ""536_depositBalance"";
""536_burstBubble"" -> ""536_addEvent"";
""536_betRedCoin"" -> ""536_checkMoon"";
""536_checkMoon"" -> ""536_burstBubble"";
""536_betBlueCoin"" -> ""536_checkMoon"";
""536_betRedCoin"" -> ""536_getBetAmount"";
}
"
0x1fdedef5c2da1ed9db44d80003a9592dfa18163c.sol,Syndicate,contract Syndicate is Ownable{ uint256 public numberSyndicateMembers; uint256 public totalSyndicateShares = 20000; uint256 public playersShareAllocation = 5000; uint256 public availableBuyInShares = 5000; uint256 public minimumBuyIn = 10; uint256 public buyInSharePrice = 1000000000000000; uint256 public shareCycleSessionSize = 1000; uint256 public shareCycleIndex = 0; uint256 public shareCycle = 1; uint256 public currentSyndicateValue = 0; uint256 public precision = 1000000000000000; uint256 public maxCyclePlayersConsidered = 100; address[] public cyclePlayers; uint256 public numberOfCyclePlayers = 0; struct somePlayer { uint256 playCount; uint256 profitShare; uint256 shareCycle; uint256 winnings; },1,"subgraph cluster_869_Syndicate {
label=""Syndicate"";
""869_roundIt"" [label=""roundIt""];
""869_claimPlayerWinnings"" [label=""claimPlayerWinnings""];
""869_playerStatus"" [label=""playerStatus""];
""869_setShareCycleSessionSize"" [label=""setShareCycleSessionSize""];
""869_insertCyclePlayer"" [label=""insertCyclePlayer""];
""869_addMember"" [label=""addMember""];
""869_allocateWinnings"" [label=""allocateWinnings""];
""869_updatePlayCount"" [label=""updatePlayCount""];
""869_Syndicate"" [label=""Syndicate""];
""869_setMaxCyclePlayersConsidered"" [label=""setMaxCyclePlayersConsidered""];
""869_claimPlayerProfit"" [label=""claimPlayerProfit""];
""869_buyIntoSyndicate"" [label=""buyIntoSyndicate""];
""869_memberShareCount"" [label=""memberShareCount""];
""869_min"" [label=""min""];
""869_allocateShares"" [label=""allocateShares""];
""869_distributeProfit"" [label=""distributeProfit""];
""869_memberProfitShare"" [label=""memberProfitShare""];
""869_claimProfit"" [label=""claimProfit""];
""869_setMaxCyclePlayersConsidered"" -> ""869_onlyOwner"";
""869_distributeProfit"" -> ""869_min"";
""869_buyIntoSyndicate"" -> ""869_addMember"";
""869_allocateShares"" -> ""869_addMember"";
""869_distributeProfit"" -> ""869_roundIt"";
""869_setShareCycleSessionSize"" -> ""869_onlyOwner"";
""869_updatePlayCount"" -> ""869_insertCyclePlayer"";
""869_allocateShares"" -> ""869_onlyOwner"";
}
"
0xf2017c92b068935bf56fea38f9d2c01f184ef14c.sol,WorldToken,"contract WorldToken is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 268000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function WorldToken() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_WorldToken {
label=""WorldToken"";
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706__transfer"" [label=""_transfer""];
""706_WorldToken"" [label=""WorldToken""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x44cf74e16bd4dfcf38cec1236f5cb7e92a4f9edf.sol,BC_GAME,contract BC_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_BC_GAME {
label=""BC_GAME"";
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x70fa6e7cf0ecf0e97415f3abbbc8eb67e0c2c588.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MyAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_657_MyAdvancedToken {
label=""MyAdvancedToken"";
""657_freezeAccount"" [label=""freezeAccount""];
""657_sell"" [label=""sell""];
""657_getEth"" [label=""getEth""];
""657_MyAdvancedToken"" [label=""MyAdvancedToken""];
""657_mintToken"" [label=""mintToken""];
""657__transfer"" [label=""_transfer""];
""657_setPrices"" [label=""setPrices""];
""657_buy"" [label=""buy""];
""657_selfdestructs"" [label=""selfdestructs""];
""657_fallback"" [label=""fallback""];
""657_mintToken"" -> ""657_onlyOwner"";
""657_buy"" -> ""657__transfer"";
""657_MyAdvancedToken"" -> ""657_TokenERC20"";
""657_fallback"" -> ""657__transfer"";
""657_sell"" -> ""657__transfer"";
""657_setPrices"" -> ""657_onlyOwner"";
""657_freezeAccount"" -> ""657_onlyOwner"";
}
"
0x5838f878000fe44b6f6c677bbf839e12f097c147.sol,Q_GAME,contract Q_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_Q_GAME {
label=""Q_GAME"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_set_game"" [label=""set_game""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_Try"" [label=""Try""];
}
"
0x1b332629b45136a3614fafcd927c8ea31d7cd717.sol,Bandit,"contract Bandit is usingOraclize, DSSafeAddSub { function () public payable {}",1,"subgraph cluster_8793_Bandit {
label=""Bandit"";
""8793_playerGetPendingTxByAddress"" [label=""playerGetPendingTxByAddress""];
""8793_playerPull"" [label=""playerPull""];
""8793_ownerSetMaxBet"" [label=""ownerSetMaxBet""];
""8793_ownerRefundPlayer"" [label=""ownerRefundPlayer""];
""8793_fallback"" [label=""fallback""];
""8793_ownerSetMinBet"" [label=""ownerSetMinBet""];
""8793_ownerPauseGame"" [label=""ownerPauseGame""];
""8793_ownerkill"" [label=""ownerkill""];
""8793_ownerChangeOwner"" [label=""ownerChangeOwner""];
""8793_playerWithdrawPendingTransactions"" [label=""playerWithdrawPendingTransactions""];
""8793_ownerSetOraclizeSafeGas"" [label=""ownerSetOraclizeSafeGas""];
""8793_withdrawBalance"" [label=""withdrawBalance""];
""8793_Bandit"" [label=""Bandit""];
""8793___callback"" [label=""__callback""];
""8793_Bandit"" -> ""8793_ownerSetMinBet"";
""8793_playerPull"" -> ""8793_uint2str"";
""8793_withdrawBalance"" -> ""8793_onlyOwner"";
""8793_ownerPauseGame"" -> ""8793_onlyOwner"";
""8793___callback"" -> ""8793_parseInt"";
""8793_playerPull"" -> ""8793_betIsValid"";
""8793_ownerkill"" -> ""8793_onlyOwner"";
""8793_ownerSetMaxBet"" -> ""8793_onlyOwner"";
""8793_playerPull"" -> ""8793_gameIsActive"";
""8793_Bandit"" -> ""8793_ownerSetMaxBet"";
""8793_Bandit"" -> ""8793_oraclize_setCustomGasPrice"";
""8793_ownerSetOraclizeSafeGas"" -> ""8793_onlyOwner"";
""8793_ownerRefundPlayer"" -> ""8793_onlyOwner"";
""8793_ownerSetMinBet"" -> ""8793_onlyOwner"";
""8793_ownerChangeOwner"" -> ""8793_onlyOwner"";
""8793_Bandit"" -> ""8793_oraclize_setProof"";
""8793___callback"" -> ""8793_onlyOraclize"";
""8793___callback"" -> ""8793_safeAdd"";
""8793_playerPull"" -> ""8793_oraclize_query"";
}
"
0x3688587725ed6dda84bcd25aeeb04997415da50a.sol,BFreeContract,"contract BFreeContract is ERC20Interface, owned{ string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; uint256 public _totalSupply = 2240000; uint256 public icoMin = 300000; uint256 public preIcoLimit = 600000; uint256 public countHolders = 0; uint256 public amountOfInvestments = 0; uint256 preICOprice; uint256 ICOprice; uint256 public currentTokenPrice; uint256 public sellPrice; bool public preIcoIsRunning; bool public minimalGoalReached; bool public icoIsClosed; bool icoExitIsPossible; mapping (address => uint256) public tokenBalanceOf; mapping(address => mapping (address => uint256)) allowed; mapping(address => bool) frozenAccount; event FrozenFunds(address initiator, address account, string status); event BonusChanged(uint8 bonusOld, uint8 bonusNew); event minGoalReached(uint256 minIcoAmount, string notice); event preIcoEnded(uint256 preIcoAmount, string notice); event priceUpdated(uint256 oldPrice, uint256 newPrice, string notice); event withdrawed(address _to, uint256 summe, string notice); event deposited(address _from, uint256 summe, string notice); event orderToTransfer(address initiator, address _from, address _to, uint256 summe, string notice); event tokenCreated(address _creator, uint256 summe, string notice); event tokenDestroyed(address _destroyer, uint256 summe, string notice); event icoStatusUpdated(address _initiator, string status); function BFreeContract() { preIcoIsRunning = true; minimalGoalReached = false; icoExitIsPossible = false; icoIsClosed = false; tokenBalanceOf[this] += _totalSupply; allowed[this][owner] = _totalSupply; allowed[this][supervisor] = _totalSupply; currentTokenPrice = 0.024340770791075100 * 1 ether; preICOprice = 0.024340770791075100 * 1 ether; ICOprice = 0.040567951318458400 * 1 ether; sellPrice = 0; updatePrices(); }",1,"subgraph cluster_1780_BFreeContract {
label=""BFreeContract"";
""1780_destroyToken"" [label=""destroyToken""];
""1780_buyToken"" [label=""buyToken""];
""1780_sellMaximumPossibleAmountOfTokens"" [label=""sellMaximumPossibleAmountOfTokens""];
""1780_setSellPrice"" [label=""setSellPrice""];
""1780_calculateTheEndPrice"" [label=""calculateTheEndPrice""];
""1780_transferOwnership"" [label=""transferOwnership""];
""1780_setPreICOPrice"" [label=""setPreICOPrice""];
""1780_balanceOf"" [label=""balanceOf""];
""1780_freezeAccount"" [label=""freezeAccount""];
""1780_checkMinimalGoal"" [label=""checkMinimalGoal""];
""1780_allowIcoExit"" [label=""allowIcoExit""];
""1780_approve"" [label=""approve""];
""1780_checkPreIcoStatus"" [label=""checkPreIcoStatus""];
""1780__transfer"" [label=""_transfer""];
""1780_fallback"" [label=""fallback""];
""1780_buy"" [label=""buy""];
""1780_exitThisIcoForHalfOfTokenPrice"" [label=""exitThisIcoForHalfOfTokenPrice""];
""1780_getAllMyTokensForAllEtherOnContract"" [label=""getAllMyTokensForAllEtherOnContract""];
""1780_withdraw"" [label=""withdraw""];
""1780_collect"" [label=""collect""];
""1780_setICOPrice"" [label=""setICOPrice""];
""1780_sell"" [label=""sell""];
""1780_setPrices"" [label=""setPrices""];
""1780_updatePrices"" [label=""updatePrices""];
""1780_BFreeContract"" [label=""BFreeContract""];
""1780_deposit"" [label=""deposit""];
""1780_mintToken"" [label=""mintToken""];
""1780_stopThisIco"" [label=""stopThisIco""];
""1780_checkFrozenAccounts"" [label=""checkFrozenAccounts""];
""1780_transfer"" [label=""transfer""];
""1780_allowance"" [label=""allowance""];
""1780_transferFrom"" [label=""transferFrom""];
""1780_totalSupply"" [label=""totalSupply""];
""1780_destroyToken"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780_checkMinimalGoal"";
""1780_sell"" -> ""1780__transfer"";
""1780_setSellPrice"" -> ""1780_isOwner"";
""1780_exitThisIcoForHalfOfTokenPrice"" -> ""1780__transfer"";
""1780_transferFrom"" -> ""1780__transfer"";
""1780_collect"" -> ""1780_isOwner"";
""1780_fallback"" -> ""1780_buyToken"";
""1780_sellMaximumPossibleAmountOfTokens"" -> ""1780_sell"";
""1780_transferOwnership"" -> ""1780_isOwner"";
""1780_setPrices"" -> ""1780_isOwner"";
""1780_deposit"" -> ""1780_isOwner"";
""1780_setPreICOPrice"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_updatePrices"";
""1780_BFreeContract"" -> ""1780_updatePrices"";
""1780_buy"" -> ""1780_buyToken"";
""1780_buyToken"" -> ""1780_updatePrices"";
""1780_setPreICOPrice"" -> ""1780_isOwner"";
""1780_transfer"" -> ""1780__transfer"";
""1780_stopThisIco"" -> ""1780_isOwner"";
""1780_collect"" -> ""1780_withdraw"";
""1780_withdraw"" -> ""1780_isOwner"";
""1780_allowIcoExit"" -> ""1780_isOwner"";
""1780_freezeAccount"" -> ""1780_isOwner"";
""1780_mintToken"" -> ""1780_isOwner"";
""1780_getAllMyTokensForAllEtherOnContract"" -> ""1780__transfer"";
""1780_setPrices"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780__transfer"";
""1780_updatePrices"" -> ""1780_checkPreIcoStatus"";
}
"
0x18da8521c333aed9de8f512e847734cb7be42e38.sol,Crowdsale,"contract Crowdsale is Pausable, PullPayment { using SafeMath for uint; struct Backer { uint weiReceived; uint coinSent; }",1,"subgraph cluster_1189_Crowdsale {
label=""Crowdsale"";
""1189_setMultisig"" [label=""setMultisig""];
""1189_drain"" [label=""drain""];
""1189_receiveETH"" [label=""receiveETH""];
""1189_finalize"" [label=""finalize""];
""1189_getRemainCoins"" [label=""getRemainCoins""];
""1189_backProjectXOwner"" [label=""backProjectXOwner""];
""1189_refund"" [label=""refund""];
""1189_Crowdsale"" [label=""Crowdsale""];
""1189_bonus"" [label=""bonus""];
""1189_start"" [label=""start""];
""1189_fallback"" [label=""fallback""];
""1189_finalize"" -> ""1189_onlyOwner"";
""1189_drain"" -> ""1189_onlyOwner"";
""1189_receiveETH"" -> ""1189_bonus"";
""1189_getRemainCoins"" -> ""1189_bonus"";
""1189_backProjectXOwner"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_stopInEmergency"";
""1189_setMultisig"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_receiveETH"";
""1189_start"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_respectTimeFrame"";
""1189_getRemainCoins"" -> ""1189_onlyOwner"";
""1189_refund"" -> ""1189_asyncSend"";
""1189_refund"" -> ""1189_minCapNotReached"";
}
"
0x72f1295238a6a0d95631ad9f81b829c486861057.sol,Simpl_quiz,contract Simpl_quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Simpl_quiz {
label=""Simpl_quiz"";
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x25d3b1550e518ba8d7581cad811285e005902faa.sol,SheetMusic,"contract SheetMusic is OwnableContract { enum NoteLength { WHOLE_NOTE, DOTTED_HALF_NOTE, HALF_NOTE, DOTTED_QUARTER_NOTE, QUARTER_NOTE, DOTTED_EIGHTH_NOTE, EIGHTH_NOTE, DOTTED_SIXTEENTH_NOTE, SIXTEENTH_NOTE }",1,"subgraph cluster_638_SheetMusic {
label=""SheetMusic"";
""638_setMilestone"" [label=""setMilestone""];
""638_setMinDonation"" [label=""setMinDonation""];
""638_donate"" [label=""donate""];
""638_getDonatee"" [label=""getDonatee""];
""638_fallback"" [label=""fallback""];
""638_createBeat"" [label=""createBeat""];
""638_createPassage"" [label=""createPassage""];
""638_checkGoal"" [label=""checkGoal""];
""638_splice"" [label=""splice""];
""638_getBeat"" [label=""getBeat""];
""638_checkMidiNoteValue"" [label=""checkMidiNoteValue""];
""638_getNumberOfBeats"" [label=""getNumberOfBeats""];
""638_SheetMusic"" [label=""SheetMusic""];
""638_getTotalDonated"" [label=""getTotalDonated""];
""638_checkMidiNotesValue"" [label=""checkMidiNotesValue""];
""638_transferMilestone"" [label=""transferMilestone""];
""638_getDonationStats"" [label=""getDonationStats""];
""638_createBeat"" -> ""638_checkMidiNotesValue"";
""638_setMinDonation"" -> ""638_onlyOwner"";
""638_fallback"" -> ""638_checkGoal"";
""638_checkGoal"" -> ""638_transferMilestone"";
""638_createBeat"" -> ""638_checkGoal"";
""638_donate"" -> ""638_checkGoal"";
""638_setMilestone"" -> ""638_onlyOwner"";
""638_createPassage"" -> ""638_checkGoal"";
""638_createPassage"" -> ""638_splice"";
""638_checkMidiNotesValue"" -> ""638_checkMidiNoteValue"";
""638_createPassage"" -> ""638_checkMidiNotesValue"";
}
"
0xe1dbbce4570b815b6ce3434bb3097dc9f453c565.sol,MobiusRED,"contract MobiusRED is DSMath, DSAuth { string public ipfsHash; string public ipfsHashType = ; MobiusRedToken public token; bool public upgraded; address public nextVersion; uint public totalSharesSold; uint public totalEarningsGenerated; uint public totalDividendsPaid; uint public totalJackpotsWon; uint public constant DEV_FRACTION = WAD / 20; uint public constant DEV_DIVISOR = 20; uint public constant RETURNS_FRACTION = 65 * 10**16; uint public constant REFERRAL_FRACTION = 1 * 10**16; uint public constant JACKPOT_SEED_FRACTION = WAD / 20; uint public constant JACKPOT_FRACTION = 15 * 10**16; uint public constant AIRDROP_FRACTION = WAD / 100; uint public constant DIVIDENDS_FRACTION = 9 * 10**16; uint public constant STARTING_SHARE_PRICE = 1 finney; uint public constant PRICE_INCREASE_PERIOD = 1 hours; uint public constant HARD_DEADLINE_DURATION = 10 days; uint public constant SOFT_DEADLINE_DURATION = 1 days; uint public constant TIME_PER_SHARE = 5 minutes; uint public jackpotSeed; uint public devBalance; uint public raisedICO; uint public unclaimedReturns; uint public constant MULTIPLIER = RAY; struct Investor { uint lastCumulativeReturnsPoints; uint shares; }",1,"subgraph cluster_2284_MobiusRED {
label=""MobiusRED"";
""2284_fallback"" [label=""fallback""];
""2284_constructor"" [label=""constructor""];
""2284__outstandingReturns"" [label=""_outstandingReturns""];
""2284_buyShares"" [label=""buyShares""];
""2284__airDrop"" [label=""_airDrop""];
""2284__purchase"" [label=""_purchase""];
""2284_upgrade"" [label=""upgrade""];
""2284__updateReturns"" [label=""_updateReturns""];
""2284_withdrawDevShare"" [label=""withdrawDevShare""];
""2284_updateMyReturns"" [label=""updateMyReturns""];
""2284__finalizeRound"" [label=""_finalizeRound""];
""2284__issueShares"" [label=""_issueShares""];
""2284_finalizeLastRound"" [label=""finalizeLastRound""];
""2284__splitRevenue"" [label=""_splitRevenue""];
""2284_finalizeAndRestart"" [label=""finalizeAndRestart""];
""2284_totalsInfo"" [label=""totalsInfo""];
""2284__disburseReturns"" [label=""_disburseReturns""];
""2284_reinvestReturns"" [label=""reinvestReturns""];
""2284_startNewRound"" [label=""startNewRound""];
""2284_setIPFSHash"" [label=""setIPFSHash""];
""2284_hasReturns"" [label=""hasReturns""];
""2284_roundInfo"" [label=""roundInfo""];
""2284_withdrawReturns"" [label=""withdrawReturns""];
""2284_investorInfo"" [label=""investorInfo""];
""2284_estimateReturns"" [label=""estimateReturns""];
""2284__outstandingReturns"" -> ""2284_mul"";
""2284__finalizeRound"" -> ""2284_add"";
""2284_finalizeAndRestart"" -> ""2284_startNewRound"";
""2284__finalizeRound"" -> ""2284_wmul"";
""2284__purchase"" -> ""2284_add"";
""2284__issueShares"" -> ""2284_add"";
""2284_reinvestReturns"" -> ""2284_min"";
""2284_upgrade"" -> ""2284_auth"";
""2284_roundInfo"" -> ""2284_wmul"";
""2284_fallback"" -> ""2284_buyShares"";
""2284_withdrawDevShare"" -> ""2284_auth"";
""2284_reinvestReturns"" -> ""2284_reinvestReturns"";
""2284__outstandingReturns"" -> ""2284_sub"";
""2284__disburseReturns"" -> ""2284_wdiv"";
""2284_reinvestReturns"" -> ""2284__purchase"";
""2284_finalizeLastRound"" -> ""2284__finalizeRound"";
""2284_buyShares"" -> ""2284__purchase"";
""2284__splitRevenue"" -> ""2284_wmul"";
""2284__issueShares"" -> ""2284_wdiv"";
""2284__updateReturns"" -> ""2284_add"";
""2284_withdrawReturns"" -> ""2284__updateReturns"";
""2284_investorInfo"" -> ""2284_estimateReturns"";
""2284__splitRevenue"" -> ""2284__disburseReturns"";
""2284_reinvestReturns"" -> ""2284__updateReturns"";
""2284__updateReturns"" -> ""2284__outstandingReturns"";
""2284__disburseReturns"" -> ""2284_add"";
""2284__airDrop"" -> ""2284_add"";
""2284_reinvestReturns"" -> ""2284_sub"";
""2284_totalsInfo"" -> ""2284_wmul"";
""2284_setIPFSHash"" -> ""2284_auth"";
""2284__purchase"" -> ""2284_mul"";
""2284_finalizeAndRestart"" -> ""2284_finalizeLastRound"";
""2284__purchase"" -> ""2284__issueShares"";
""2284__purchase"" -> ""2284__updateReturns"";
""2284_withdrawReturns"" -> ""2284_sub"";
""2284__purchase"" -> ""2284_min"";
""2284__purchase"" -> ""2284__airDrop"";
""2284__issueShares"" -> ""2284_mul"";
""2284_estimateReturns"" -> ""2284__outstandingReturns"";
""2284__purchase"" -> ""2284__splitRevenue"";
""2284__splitRevenue"" -> ""2284_add"";
""2284_estimateReturns"" -> ""2284_hasReturns"";
""2284_withdrawReturns"" -> ""2284_hasReturns"";
""2284_updateMyReturns"" -> ""2284__updateReturns"";
""2284_startNewRound"" -> ""2284__purchase"";
""2284__disburseReturns"" -> ""2284_mul"";
}
"
0x873e4037cfacfaa6837c913604c2de51f2b179d0.sol,IRideSale,contract IRideSale { Token public tokenReward; address public creator; address public owner = 0xBeDF65990326Ed2236C5A17432d9a30dbA3aBFEe; uint256 public price; uint256 public startDate; uint256 public endDate; modifier isCreator() { require(msg.sender == creator); _; },1,"subgraph cluster_220_IRideSale {
label=""IRideSale"";
""220_fallback"" [label=""fallback""];
""220_setStartDate"" [label=""setStartDate""];
""220_constructor"" [label=""constructor""];
""220_kill"" [label=""kill""];
""220_setPrice"" [label=""setPrice""];
""220_setCreator"" [label=""setCreator""];
""220_setEndtDate"" [label=""setEndtDate""];
""220_setOwner"" [label=""setOwner""];
""220_setToken"" [label=""setToken""];
""220_setEndtDate"" -> ""220_isCreator"";
""220_setCreator"" -> ""220_isCreator"";
""220_kill"" -> ""220_isCreator"";
""220_setOwner"" -> ""220_isCreator"";
""220_setPrice"" -> ""220_isCreator"";
""220_setToken"" -> ""220_isCreator"";
""220_setStartDate"" -> ""220_isCreator"";
}
"
0x1fdedef5c2da1ed9db44d80003a9592dfa18163c.sol,Syndicate,contract Syndicate is Ownable{ uint256 public numberSyndicateMembers; uint256 public totalSyndicateShares = 20000; uint256 public playersShareAllocation = 5000; uint256 public availableBuyInShares = 5000; uint256 public minimumBuyIn = 10; uint256 public buyInSharePrice = 1000000000000000; uint256 public shareCycleSessionSize = 1000; uint256 public shareCycleIndex = 0; uint256 public shareCycle = 1; uint256 public currentSyndicateValue = 0; uint256 public precision = 1000000000000000; uint256 public maxCyclePlayersConsidered = 100; address[] public cyclePlayers; uint256 public numberOfCyclePlayers = 0; struct somePlayer { uint256 playCount; uint256 profitShare; uint256 shareCycle; uint256 winnings; },1,"subgraph cluster_869_Syndicate {
label=""Syndicate"";
""869_roundIt"" [label=""roundIt""];
""869_claimPlayerWinnings"" [label=""claimPlayerWinnings""];
""869_playerStatus"" [label=""playerStatus""];
""869_setShareCycleSessionSize"" [label=""setShareCycleSessionSize""];
""869_insertCyclePlayer"" [label=""insertCyclePlayer""];
""869_addMember"" [label=""addMember""];
""869_allocateWinnings"" [label=""allocateWinnings""];
""869_updatePlayCount"" [label=""updatePlayCount""];
""869_Syndicate"" [label=""Syndicate""];
""869_setMaxCyclePlayersConsidered"" [label=""setMaxCyclePlayersConsidered""];
""869_claimPlayerProfit"" [label=""claimPlayerProfit""];
""869_buyIntoSyndicate"" [label=""buyIntoSyndicate""];
""869_memberShareCount"" [label=""memberShareCount""];
""869_min"" [label=""min""];
""869_allocateShares"" [label=""allocateShares""];
""869_distributeProfit"" [label=""distributeProfit""];
""869_memberProfitShare"" [label=""memberProfitShare""];
""869_claimProfit"" [label=""claimProfit""];
""869_setMaxCyclePlayersConsidered"" -> ""869_onlyOwner"";
""869_distributeProfit"" -> ""869_min"";
""869_buyIntoSyndicate"" -> ""869_addMember"";
""869_allocateShares"" -> ""869_addMember"";
""869_distributeProfit"" -> ""869_roundIt"";
""869_setShareCycleSessionSize"" -> ""869_onlyOwner"";
""869_updatePlayCount"" -> ""869_insertCyclePlayer"";
""869_allocateShares"" -> ""869_onlyOwner"";
}
"
0x1c3bed5bd4b0e6a8389efd0d2876f948a907ab5b.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1092_MiniMeToken {
label=""MiniMeToken"";
""1092_balanceOfAt"" [label=""balanceOfAt""];
""1092_allowance"" [label=""allowance""];
""1092_generateTokens"" [label=""generateTokens""];
""1092_transfer"" [label=""transfer""];
""1092_getValueAt"" [label=""getValueAt""];
""1092_approve"" [label=""approve""];
""1092_createCloneToken"" [label=""createCloneToken""];
""1092_min"" [label=""min""];
""1092_transferFrom"" [label=""transferFrom""];
""1092_totalSupply"" [label=""totalSupply""];
""1092_isContract"" [label=""isContract""];
""1092_claimTokens"" [label=""claimTokens""];
""1092_balanceOf"" [label=""balanceOf""];
""1092_MiniMeToken"" [label=""MiniMeToken""];
""1092_totalSupplyAt"" [label=""totalSupplyAt""];
""1092_fallback"" [label=""fallback""];
""1092_approveAndCall"" [label=""approveAndCall""];
""1092_enableTransfers"" [label=""enableTransfers""];
""1092_updateValueAtNow"" [label=""updateValueAtNow""];
""1092_destroyTokens"" [label=""destroyTokens""];
""1092_doTransfer"" [label=""doTransfer""];
""1092_destroyTokens"" -> ""1092_totalSupply"";
""1092_approve"" -> ""1092_isContract"";
""1092_balanceOfAt"" -> ""1092_min"";
""1092_doTransfer"" -> ""1092_isContract"";
""1092_generateTokens"" -> ""1092_onlyController"";
""1092_generateTokens"" -> ""1092_updateValueAtNow"";
""1092_doTransfer"" -> ""1092_updateValueAtNow"";
""1092_totalSupplyAt"" -> ""1092_getValueAt"";
""1092_enableTransfers"" -> ""1092_onlyController"";
""1092_destroyTokens"" -> ""1092_updateValueAtNow"";
""1092_totalSupply"" -> ""1092_totalSupplyAt"";
""1092_transferFrom"" -> ""1092_doTransfer"";
""1092_claimTokens"" -> ""1092_onlyController"";
""1092_balanceOf"" -> ""1092_balanceOfAt"";
""1092_generateTokens"" -> ""1092_balanceOf"";
""1092_doTransfer"" -> ""1092_balanceOfAt"";
""1092_approveAndCall"" -> ""1092_approve"";
""1092_destroyTokens"" -> ""1092_balanceOf"";
""1092_fallback"" -> ""1092_isContract"";
""1092_transfer"" -> ""1092_doTransfer"";
""1092_destroyTokens"" -> ""1092_onlyController"";
""1092_generateTokens"" -> ""1092_totalSupply"";
""1092_balanceOfAt"" -> ""1092_getValueAt"";
""1092_totalSupplyAt"" -> ""1092_min"";
}
"
0x26b5962250b779ab0f33970738a46fcfb00a70b9.sol,NewLottery,"contract NewLottery is Owned { uint256 private maxTickets; uint256 public minimumBounty; uint256 public ticketPrice; uint256 public lottoIndex; uint256 lastTicketTime; uint8 _direction; uint256 numtickets; uint256 totalBounty; address owner; event NewTicket(address indexed fromAddress, bool success); event LottoComplete(address indexed fromAddress, uint indexed lottoIndex, uint256 reward); function LottoCount() public payable { owner = msg.sender; ticketPrice = 0.101 * 10**18; minimumBounty = 1 * 10**18; maxTickets = 10; _direction = 0; lottoIndex = 1; lastTicketTime = 0; numtickets = 0; totalBounty = msg.value; require(totalBounty >= minimumBounty); }",1,"subgraph cluster_354_NewLottery {
label=""NewLottery"";
""354_getLastTicketTime"" [label=""getLastTicketTime""];
""354_getBalance"" [label=""getBalance""];
""354_shutdown"" [label=""shutdown""];
""354_withdraw"" [label=""withdraw""];
""354_LottoCount"" [label=""LottoCount""];
""354_PayWinner"" [label=""PayWinner""];
""354_AddTicket"" [label=""AddTicket""];
""354_withdraw"" -> ""354_onlyOwner"";
""354_shutdown"" -> ""354_onlyOwner"";
""354_AddTicket"" -> ""354_PayWinner"";
}
"
0x3688587725ed6dda84bcd25aeeb04997415da50a.sol,BFreeContract,"contract BFreeContract is ERC20Interface, owned{ string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; uint256 public _totalSupply = 2240000; uint256 public icoMin = 300000; uint256 public preIcoLimit = 600000; uint256 public countHolders = 0; uint256 public amountOfInvestments = 0; uint256 preICOprice; uint256 ICOprice; uint256 public currentTokenPrice; uint256 public sellPrice; bool public preIcoIsRunning; bool public minimalGoalReached; bool public icoIsClosed; bool icoExitIsPossible; mapping (address => uint256) public tokenBalanceOf; mapping(address => mapping (address => uint256)) allowed; mapping(address => bool) frozenAccount; event FrozenFunds(address initiator, address account, string status); event BonusChanged(uint8 bonusOld, uint8 bonusNew); event minGoalReached(uint256 minIcoAmount, string notice); event preIcoEnded(uint256 preIcoAmount, string notice); event priceUpdated(uint256 oldPrice, uint256 newPrice, string notice); event withdrawed(address _to, uint256 summe, string notice); event deposited(address _from, uint256 summe, string notice); event orderToTransfer(address initiator, address _from, address _to, uint256 summe, string notice); event tokenCreated(address _creator, uint256 summe, string notice); event tokenDestroyed(address _destroyer, uint256 summe, string notice); event icoStatusUpdated(address _initiator, string status); function BFreeContract() { preIcoIsRunning = true; minimalGoalReached = false; icoExitIsPossible = false; icoIsClosed = false; tokenBalanceOf[this] += _totalSupply; allowed[this][owner] = _totalSupply; allowed[this][supervisor] = _totalSupply; currentTokenPrice = 0.024340770791075100 * 1 ether; preICOprice = 0.024340770791075100 * 1 ether; ICOprice = 0.040567951318458400 * 1 ether; sellPrice = 0; updatePrices(); }",1,"subgraph cluster_1780_BFreeContract {
label=""BFreeContract"";
""1780_destroyToken"" [label=""destroyToken""];
""1780_buyToken"" [label=""buyToken""];
""1780_sellMaximumPossibleAmountOfTokens"" [label=""sellMaximumPossibleAmountOfTokens""];
""1780_setSellPrice"" [label=""setSellPrice""];
""1780_calculateTheEndPrice"" [label=""calculateTheEndPrice""];
""1780_transferOwnership"" [label=""transferOwnership""];
""1780_setPreICOPrice"" [label=""setPreICOPrice""];
""1780_balanceOf"" [label=""balanceOf""];
""1780_freezeAccount"" [label=""freezeAccount""];
""1780_checkMinimalGoal"" [label=""checkMinimalGoal""];
""1780_allowIcoExit"" [label=""allowIcoExit""];
""1780_approve"" [label=""approve""];
""1780_checkPreIcoStatus"" [label=""checkPreIcoStatus""];
""1780__transfer"" [label=""_transfer""];
""1780_fallback"" [label=""fallback""];
""1780_buy"" [label=""buy""];
""1780_exitThisIcoForHalfOfTokenPrice"" [label=""exitThisIcoForHalfOfTokenPrice""];
""1780_getAllMyTokensForAllEtherOnContract"" [label=""getAllMyTokensForAllEtherOnContract""];
""1780_withdraw"" [label=""withdraw""];
""1780_collect"" [label=""collect""];
""1780_setICOPrice"" [label=""setICOPrice""];
""1780_sell"" [label=""sell""];
""1780_setPrices"" [label=""setPrices""];
""1780_updatePrices"" [label=""updatePrices""];
""1780_BFreeContract"" [label=""BFreeContract""];
""1780_deposit"" [label=""deposit""];
""1780_mintToken"" [label=""mintToken""];
""1780_stopThisIco"" [label=""stopThisIco""];
""1780_checkFrozenAccounts"" [label=""checkFrozenAccounts""];
""1780_transfer"" [label=""transfer""];
""1780_allowance"" [label=""allowance""];
""1780_transferFrom"" [label=""transferFrom""];
""1780_totalSupply"" [label=""totalSupply""];
""1780_destroyToken"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780_checkMinimalGoal"";
""1780_sell"" -> ""1780__transfer"";
""1780_setSellPrice"" -> ""1780_isOwner"";
""1780_exitThisIcoForHalfOfTokenPrice"" -> ""1780__transfer"";
""1780_transferFrom"" -> ""1780__transfer"";
""1780_collect"" -> ""1780_isOwner"";
""1780_fallback"" -> ""1780_buyToken"";
""1780_sellMaximumPossibleAmountOfTokens"" -> ""1780_sell"";
""1780_transferOwnership"" -> ""1780_isOwner"";
""1780_setPrices"" -> ""1780_isOwner"";
""1780_deposit"" -> ""1780_isOwner"";
""1780_setPreICOPrice"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_updatePrices"";
""1780_BFreeContract"" -> ""1780_updatePrices"";
""1780_buy"" -> ""1780_buyToken"";
""1780_buyToken"" -> ""1780_updatePrices"";
""1780_setPreICOPrice"" -> ""1780_isOwner"";
""1780_transfer"" -> ""1780__transfer"";
""1780_stopThisIco"" -> ""1780_isOwner"";
""1780_collect"" -> ""1780_withdraw"";
""1780_withdraw"" -> ""1780_isOwner"";
""1780_allowIcoExit"" -> ""1780_isOwner"";
""1780_freezeAccount"" -> ""1780_isOwner"";
""1780_mintToken"" -> ""1780_isOwner"";
""1780_getAllMyTokensForAllEtherOnContract"" -> ""1780__transfer"";
""1780_setPrices"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780__transfer"";
""1780_updatePrices"" -> ""1780_checkPreIcoStatus"";
}
"
0x1f313e1015d362a50a16a479f857637bbb36a353.sol,LineOfTransfers,"contract LineOfTransfers { address[] public accounts; uint[] public values; uint public transferPointer = 0; address public owner; event Transfer(address to, uint amount); modifier hasBalance(uint index) { require(this.balance >= values[index]); _; }",1,"subgraph cluster_203_LineOfTransfers {
label=""LineOfTransfers"";
""203_getBalance"" [label=""getBalance""];
""203_LineOfTransfers"" [label=""LineOfTransfers""];
""203_terminate"" [label=""terminate""];
""203_addData"" [label=""addData""];
""203_fallback"" [label=""fallback""];
""203_transferTo"" [label=""transferTo""];
""203_makeTransfer"" [label=""makeTransfer""];
""203_transferTo"" -> ""203_existingIndex"";
""203_makeTransfer"" -> ""203_transferTo"";
""203_terminate"" -> ""203_onlyOwner"";
""203_addData"" -> ""203_onlyOwner"";
""203_transferTo"" -> ""203_hasBalance"";
}
"
0x5bf5436b367de54860d1b0be31203349a4d5caa7.sol,CryptoCarAuction,"contract CryptoCarAuction is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 45000000000000000000000000; uint256 public totalDistributed = 100000000000000000000000; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 2600000000000000000000; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_962_CryptoCarAuction {
label=""CryptoCarAuction"";
""962_getTokens"" [label=""getTokens""];
""962_updateTokensPerEth"" [label=""updateTokensPerEth""];
""962_constructor"" [label=""constructor""];
""962_transferFrom"" [label=""transferFrom""];
""962_transferOwnership"" [label=""transferOwnership""];
""962_burn"" [label=""burn""];
""962_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""962_doAirdrop"" [label=""doAirdrop""];
""962_finishDistribution"" [label=""finishDistribution""];
""962_getasall"" [label=""getasall""];
""962_balanceOf"" [label=""balanceOf""];
""962_approve"" [label=""approve""];
""962_distr"" [label=""distr""];
""962_allowance"" [label=""allowance""];
""962_getTokenBalance"" [label=""getTokenBalance""];
""962_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""962_fallback"" [label=""fallback""];
""962_transfer"" [label=""transfer""];
""962_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""962_getas"" [label=""getas""];
""962_fallback"" -> ""962_getTokens"";
""962_updateTokensPerEth"" -> ""962_onlyOwner"";
""962_adminClaimAirdrop"" -> ""962_onlyOwner"";
""962_getTokens"" -> ""962_distr"";
""962_burn"" -> ""962_onlyOwner"";
""962_getTokens"" -> ""962_canDistr"";
""962_transferOwnership"" -> ""962_onlyOwner"";
""962_getasall"" -> ""962_onlyOwner"";
""962_distr"" -> ""962_canDistr"";
""962_transfer"" -> ""962_onlyPayloadSize"";
""962_getas"" -> ""962_onlyOwner"";
""962_finishDistribution"" -> ""962_onlyOwner"";
""962_adminClaimAirdropMultiple"" -> ""962_onlyOwner"";
""962_adminClaimAirdrop"" -> ""962_doAirdrop"";
""962_finishDistribution"" -> ""962_canDistr"";
""962_adminClaimAirdropMultiple"" -> ""962_doAirdrop"";
""962_transferFrom"" -> ""962_onlyPayloadSize"";
""962_constructor"" -> ""962_distr"";
""962_withdrawForeignTokens"" -> ""962_onlyOwner"";
}
"
0xce51f6cac9fb2695d944f2d5e2699d68aa7b656e.sol,Locksmith,"contract Locksmith is owned, logger, helper { uint public nonce; uint public m_proofs; bool public didProve; bytes32 public lock; string public protocol = ; struct proof { address prover; address receiver; string key; bytes32 lock; }",1,"subgraph cluster_605_Locksmith {
label=""Locksmith"";
""605_kill"" [label=""kill""];
""605_fallback"" [label=""fallback""];
""605_logEvent"" [label=""logEvent""];
""605_unlock"" [label=""unlock""];
""605_Locksmith"" [label=""Locksmith""];
""605_sendTo"" [label=""sendTo""];
""605_setLock"" [label=""setLock""];
""605_setLock"" -> ""605_onlyOwner"";
""605_sendTo"" -> ""605_onlyOwner"";
""605_unlock"" -> ""605_logEvent"";
""605_kill"" -> ""605_onlyOwner"";
""605_sendTo"" -> ""605_logEvent"";
""605_setLock"" -> ""605_logEvent"";
}
"
0x46822ac3bc32db7ebd9845da3fe0886f824e9edf.sol,EBSCSale,"contract EBSCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 6000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; EBSCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1561_EBSCSale {
label=""EBSCSale"";
""1561_checkFundingCap"" [label=""checkFundingCap""];
""1561_checkFundingGoal"" [label=""checkFundingGoal""];
""1561_terminate"" [label=""terminate""];
""1561_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1561_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1561_convertToMiniEbsc"" [label=""convertToMiniEbsc""];
""1561_EBSCSale"" [label=""EBSCSale""];
""1561_changeStartTime"" [label=""changeStartTime""];
""1561_changeEndTime"" [label=""changeEndTime""];
""1561_fallback"" [label=""fallback""];
""1561_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1561_safeWithdrawal"" [label=""safeWithdrawal""];
""1561_setRate"" [label=""setRate""];
""1561_currentTime"" [label=""currentTime""];
""1561_fallback"" -> ""1561_afterStartTime"";
""1561_changeStartTime"" -> ""1561_onlyOwner"";
""1561_ownerAllocateTokens"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_nonReentrant"";
""1561_changeEndTime"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_beforeDeadline"";
""1561_ownerUnlockFund"" -> ""1561_onlyOwner"";
""1561_terminate"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_checkFundingCap"";
""1561_ownerUnlockFund"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_whenNotPaused"";
""1561_safeWithdrawal"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_checkFundingGoal"";
""1561_setRate"" -> ""1561_onlyOwner"";
""1561_EBSCSale"" -> ""1561_setRate"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingGoal"";
""1561_ownerAllocateTokens"" -> ""1561_onlyOwner"";
""1561_safeWithdrawal"" -> ""1561_nonReentrant"";
""1561_ownerSafeWithdrawal"" -> ""1561_onlyOwner"";
""1561_ownerSafeWithdrawal"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_saleNotClosed"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingCap"";
}
"
0x548d32216d01617452892ea360bfce9ce8dc9729.sol,ChemistryCore,"contract ChemistryCore is ContractOfSale { function ChemistryCore() public { owner = msg.sender; authorized[msg.sender] = true; _createElement(, 2 ** 255); }",1,"subgraph cluster_1804_ChemistryCore {
label=""ChemistryCore"";
""1804_getElementView"" [label=""getElementView""];
""1804_getElementsFromIndex"" [label=""getElementsFromIndex""];
""1804_getElements"" [label=""getElements""];
""1804_fallback"" [label=""fallback""];
""1804_withdrawAmount"" [label=""withdrawAmount""];
""1804_withdrawAll"" [label=""withdrawAll""];
""1804_getElement"" [label=""getElement""];
""1804_ChemistryCore"" [label=""ChemistryCore""];
""1804_getElementOwners"" [label=""getElementOwners""];
""1804_getElementInfoView"" [label=""getElementInfoView""];
""1804_addElement"" [label=""addElement""];
""1804_getElementInfo"" [label=""getElementInfo""];
""1804__bytes32ToString"" [label=""_bytes32ToString""];
""1804_addElements"" [label=""addElements""];
""1804_getElementInfo"" -> ""1804_calculateNextPrice"";
""1804_withdrawAmount"" -> ""1804_onlyOwner"";
""1804_addElements"" -> ""1804_onlyAuthorized"";
""1804_addElement"" -> ""1804__createElement"";
""1804_getElementInfoView"" -> ""1804__bytes32ToString"";
""1804_getElementView"" -> ""1804__bytes32ToString"";
""1804_addElement"" -> ""1804_onlyAuthorized"";
""1804_addElements"" -> ""1804__createElement"";
""1804_getElementInfoView"" -> ""1804_calculateNextPrice"";
""1804_ChemistryCore"" -> ""1804__createElement"";
""1804_withdrawAll"" -> ""1804_onlyOwner"";
}
"
0xec91fcca41e8ab83dd5bc2bbcc2ffb71e314ba25.sol,TaolCash,"contract TaolCash is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 90 * 1 days; uint public round2 = now + 60 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 1000000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth =1000000000e18; uint public target0drop = 5000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_TaolCash {
label=""TaolCash"";
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_distr"" [label=""distr""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_approve"" [label=""approve""];
""1253_burn"" [label=""burn""];
""1253_add"" [label=""add""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_allowance"" [label=""allowance""];
""1253_constructor"" [label=""constructor""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_transfer"" [label=""transfer""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_Distribute"" [label=""Distribute""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_fallback"" [label=""fallback""];
""1253_getTokens"" [label=""getTokens""];
""1253_withdraw"" [label=""withdraw""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_constructor"" -> ""1253_distr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
}
"
0x18da8521c333aed9de8f512e847734cb7be42e38.sol,Crowdsale,"contract Crowdsale is Pausable, PullPayment { using SafeMath for uint; struct Backer { uint weiReceived; uint coinSent; }",1,"subgraph cluster_1189_Crowdsale {
label=""Crowdsale"";
""1189_setMultisig"" [label=""setMultisig""];
""1189_drain"" [label=""drain""];
""1189_receiveETH"" [label=""receiveETH""];
""1189_finalize"" [label=""finalize""];
""1189_getRemainCoins"" [label=""getRemainCoins""];
""1189_backProjectXOwner"" [label=""backProjectXOwner""];
""1189_refund"" [label=""refund""];
""1189_Crowdsale"" [label=""Crowdsale""];
""1189_bonus"" [label=""bonus""];
""1189_start"" [label=""start""];
""1189_fallback"" [label=""fallback""];
""1189_finalize"" -> ""1189_onlyOwner"";
""1189_drain"" -> ""1189_onlyOwner"";
""1189_receiveETH"" -> ""1189_bonus"";
""1189_getRemainCoins"" -> ""1189_bonus"";
""1189_backProjectXOwner"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_stopInEmergency"";
""1189_setMultisig"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_receiveETH"";
""1189_start"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_respectTimeFrame"";
""1189_getRemainCoins"" -> ""1189_onlyOwner"";
""1189_refund"" -> ""1189_asyncSend"";
""1189_refund"" -> ""1189_minCapNotReached"";
}
"
0xf5587929c51017cfa8d0ead672fcc6b39f1496b0.sol,RippleCredit,"contract RippleCredit is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 500000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000e8; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0xFF84C3EAB550CBAb11725CA50F5bee01d9670fD9; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1288_RippleCredit {
label=""RippleCredit"";
""1288_balanceOf"" [label=""balanceOf""];
""1288_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1288_transfer"" [label=""transfer""];
""1288_getTokenBalance"" [label=""getTokenBalance""];
""1288_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1288_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1288_burn"" [label=""burn""];
""1288_Distribute"" [label=""Distribute""];
""1288_distr"" [label=""distr""];
""1288_getTokens"" [label=""getTokens""];
""1288_transferFrom"" [label=""transferFrom""];
""1288_constructor"" [label=""constructor""];
""1288_fallback"" [label=""fallback""];
""1288_add"" [label=""add""];
""1288_withdraw"" [label=""withdraw""];
""1288_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1288_transferOwnership"" [label=""transferOwnership""];
""1288_approve"" [label=""approve""];
""1288_finishDistribution"" [label=""finishDistribution""];
""1288_withdrawAll"" [label=""withdrawAll""];
""1288_allowance"" [label=""allowance""];
""1288_burn"" -> ""1288_onlyOwner"";
""1288_add"" -> ""1288_onlyOwner"";
""1288_distr"" -> ""1288_canDistr"";
""1288_withdrawAll"" -> ""1288_onlyOwner"";
""1288_withdraw"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_distr"";
""1288_transfer"" -> ""1288_onlyPayloadSize"";
""1288_DistributeAirdrop"" -> ""1288_Distribute"";
""1288_finishDistribution"" -> ""1288_onlyOwner"";
""1288_transferFrom"" -> ""1288_onlyPayloadSize"";
""1288_fallback"" -> ""1288_getTokens"";
""1288_transferOwnership"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_canDistr"";
""1288_withdrawForeignTokens"" -> ""1288_onlyOwner"";
""1288_finishDistribution"" -> ""1288_canDistr"";
""1288_DistributeAirdropMultiple"" -> ""1288_onlyOwner"";
""1288_DistributeAirdropMultiple"" -> ""1288_Distribute"";
""1288_updateTokensPerEth"" -> ""1288_onlyOwner"";
""1288_Distribute"" -> ""1288_onlyOwner"";
""1288_DistributeAirdrop"" -> ""1288_onlyOwner"";
""1288_constructor"" -> ""1288_distr"";
}
"
0x330bebabc9a2a4136e3d1cb38ca521f5a95aec2e.sol,KoreaShow,"contract KoreaShow is TokenController, Controlled { using SafeMath for uint256; uint256 public startFundingTime; uint256 public endFundingTime; uint256 constant public maximumFunding = 100 ether; uint256 public tokensPerEther = 31000; uint256 constant oneDay = 86400; uint256 public totalCollected = 0; bool public paused; string public techProvider = ; Token public tokenContract; bool public finalized = false; bool public allowChange = true; bool private transfersEnabled = true; address private vaultAddress; bool private initialed = false; event Payment(address indexed _sender, uint256 _ethAmount, uint256 _tokenAmount); function KoreaShow( uint _startFundingTime, uint _endFundingTime, address _vaultAddress, address _tokenAddress ) public { require(_endFundingTime > now); require(_endFundingTime >= _startFundingTime); require(_vaultAddress != 0); require(_tokenAddress != 0); require(!initialed); startFundingTime = _startFundingTime; endFundingTime = _endFundingTime; vaultAddress = _vaultAddress; tokenContract = Token(_tokenAddress); paused = false; initialed = true; }",1,"subgraph cluster_1713_KoreaShow {
label=""KoreaShow"";
""1713_pauseContribution"" [label=""pauseContribution""];
""1713_claimTokens"" [label=""claimTokens""];
""1713_KoreaShow"" [label=""KoreaShow""];
""1713_fallback"" [label=""fallback""];
""1713_changeToken"" [label=""changeToken""];
""1713_allowTransfersEnabled"" [label=""allowTransfersEnabled""];
""1713_proxyPayment"" [label=""proxyPayment""];
""1713_doPayment"" [label=""doPayment""];
""1713_finalizeSale"" [label=""finalizeSale""];
""1713_resumeContribution"" [label=""resumeContribution""];
""1713_setTime"" [label=""setTime""];
""1713_isContract"" [label=""isContract""];
""1713_onApprove"" [label=""onApprove""];
""1713_onTransfer"" [label=""onTransfer""];
""1713_changeTokenController"" [label=""changeTokenController""];
""1713_changeTokensPerEther"" [label=""changeTokensPerEther""];
""1713_setTime"" -> ""1713_onlyController"";
""1713_proxyPayment"" -> ""1713_notPaused"";
""1713_claimTokens"" -> ""1713_onlyController"";
""1713_changeToken"" -> ""1713_onlyController"";
""1713_pauseContribution"" -> ""1713_onlyController"";
""1713_changeTokenController"" -> ""1713_onlyController"";
""1713_fallback"" -> ""1713_notPaused"";
""1713_changeTokensPerEther"" -> ""1713_onlyController"";
""1713_proxyPayment"" -> ""1713_doPayment"";
""1713_resumeContribution"" -> ""1713_onlyController"";
""1713_finalizeSale"" -> ""1713_onlyController"";
""1713_fallback"" -> ""1713_doPayment"";
""1713_allowTransfersEnabled"" -> ""1713_onlyController"";
}
"
0xebcf88fb2783bbb75b12df3f33627efa894afea4.sol,SPACEDICE,"contract SPACEDICE is Mortal, usingNRE{ uint minBet = 1000000000000000; event Roll(bool _won, uint256 _dice1, uint256 _dice2, uint256 _roll1, uint256 _roll2, uint _amount); constructor() payable public {}",1,"subgraph cluster_372_SPACEDICE {
label=""SPACEDICE"";
""372_checkContractBalance"" [label=""checkContractBalance""];
""372_collect"" [label=""collect""];
""372_constructor"" [label=""constructor""];
""372_fallback"" [label=""fallback""];
""372_bet"" [label=""bet""];
""372_collect"" -> ""372_onlyOwner"";
""372_bet"" -> ""372_ra"";
""372_bet"" -> ""372_rx"";
}
"
0x402cd1fa4ba4296f5503d1e86214b77ec7cfe840.sol,Crowdsale,"contract Crowdsale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; uint public starttime; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); function Crowdsale( address ifSuccessfulSendTo, uint fundingGoalInEthers, uint durationInMinutes, uint weiCostOfEachToken, address addressOfTokenUsedAsReward ) public { beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; deadline = now + durationInMinutes * 1 minutes; price = weiCostOfEachToken; tokenReward = token(addressOfTokenUsedAsReward); starttime = now; }",1,"subgraph cluster_360_Crowdsale {
label=""Crowdsale"";
""360_fallback"" [label=""fallback""];
""360_Crowdsale"" [label=""Crowdsale""];
""360_checkGoalReached"" [label=""checkGoalReached""];
""360_safeWithdrawal"" [label=""safeWithdrawal""];
""360_safeWithdrawal"" -> ""360_afterDeadline"";
""360_checkGoalReached"" -> ""360_afterDeadline"";
}
"
0x7287bef78619e10c32a1eee82046fa3c4a29f17d.sol,CryptoPornSmartContract,"contract CryptoPornSmartContract is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address newOwner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.01 ether; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public personIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public personIndexToApproved; address public ceoAddress; address[4] public cooAddresses; struct Person { string name; uint256 sellingPrice; }",1,"subgraph cluster_972_CryptoPornSmartContract {
label=""CryptoPornSmartContract"";
""972_takeOwnership"" [label=""takeOwnership""];
""972_getPerson"" [label=""getPerson""];
""972_transferFrom"" [label=""transferFrom""];
""972__transfer"" [label=""_transfer""];
""972_symbol"" [label=""symbol""];
""972_balanceOf"" [label=""balanceOf""];
""972_name"" [label=""name""];
""972_setCOO"" [label=""setCOO""];
""972_CryptoPornSmartContract"" [label=""CryptoPornSmartContract""];
""972_createNewPerson"" [label=""createNewPerson""];
""972_approve"" [label=""approve""];
""972__owns"" [label=""_owns""];
""972_payout"" [label=""payout""];
""972__createPerson"" [label=""_createPerson""];
""972_priceOf"" [label=""priceOf""];
""972_transfer"" [label=""transfer""];
""972_totalSupply"" [label=""totalSupply""];
""972__payout"" [label=""_payout""];
""972_purchase"" [label=""purchase""];
""972_ownerOf"" [label=""ownerOf""];
""972_implementsERC721"" [label=""implementsERC721""];
""972__approved"" [label=""_approved""];
""972_tokensOfOwner"" [label=""tokensOfOwner""];
""972__addressNotNull"" [label=""_addressNotNull""];
""972_takeOwnership"" -> ""972__addressNotNull"";
""972_payout"" -> ""972__payout"";
""972_approve"" -> ""972__owns"";
""972_transfer"" -> ""972__addressNotNull"";
""972_transferFrom"" -> ""972__owns"";
""972_purchase"" -> ""972__transfer"";
""972_createNewPerson"" -> ""972__createPerson"";
""972_createNewPerson"" -> ""972_onlyCLevel"";
""972_tokensOfOwner"" -> ""972_balanceOf"";
""972__transfer"" -> ""972__addressNotNull"";
""972_transfer"" -> ""972__owns"";
""972_transferFrom"" -> ""972__addressNotNull"";
""972_takeOwnership"" -> ""972__transfer"";
""972__createPerson"" -> ""972__transfer"";
""972_transferFrom"" -> ""972__transfer"";
""972_payout"" -> ""972_onlyCLevel"";
""972_purchase"" -> ""972__addressNotNull"";
""972_takeOwnership"" -> ""972__approved"";
""972_tokensOfOwner"" -> ""972_totalSupply"";
""972_transferFrom"" -> ""972__approved"";
""972_setCOO"" -> ""972_onlyCEO"";
""972_createNewPerson"" -> ""972__addressNotNull"";
""972_transfer"" -> ""972__transfer"";
}
"
0x6c1bcb34142bffd35f57db626e0ac427af616a4d.sol,EnjinBuyer,contract EnjinBuyer { mapping (address => uint256) public balances; mapping (address => uint256) public balances_after_buy; bool public bought_tokens; bool public token_set; bool public refunded; uint256 public contract_eth_value; bool public kill_switch; bytes32 password_hash = 0x8bf0720c6e610aace867eba51b03ab8ca908b665898b10faddc95a96e829539d; address public developer = 0x0639C169D9265Ca4B4DEce693764CdA8ea5F3882; address public sale = 0xc4740f71323129669424d1Ae06c42AEE99da30e2; ERC20 public token; uint256 public eth_minimum = 3235 ether; function set_token(address _token) { require(msg.sender == developer); token = ERC20(_token); token_set = true; },1,"subgraph cluster_503_EnjinBuyer {
label=""EnjinBuyer"";
""503_set_token"" [label=""set_token""];
""503_fallback"" [label=""fallback""];
""503_purchase_tokens"" [label=""purchase_tokens""];
""503_activate_kill_switch"" [label=""activate_kill_switch""];
""503_set_refunded"" [label=""set_refunded""];
""503_withdraw"" [label=""withdraw""];
""503_personal_withdraw"" [label=""personal_withdraw""];
}
"
0xeef93ec835c7921038d55ee096671a94e961709b.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1447_RefundVault {
label=""RefundVault"";
""1447_deposit"" [label=""deposit""];
""1447_enableRefunds"" [label=""enableRefunds""];
""1447_setWallet"" [label=""setWallet""];
""1447_RefundVault"" [label=""RefundVault""];
""1447_close"" [label=""close""];
""1447_refund"" [label=""refund""];
""1447_deposit"" -> ""1447_onlyOwner"";
""1447_enableRefunds"" -> ""1447_onlyOwner"";
""1447_close"" -> ""1447_onlyOwner"";
""1447_setWallet"" -> ""1447_onlyOwner"";
}
"
0xc849a5fff9befa297d1c3a772bafac9f3c9004ec.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1018_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1018_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1018_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1018_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1018_constructor"" [label=""constructor""];
""1018_tokenFallback"" [label=""tokenFallback""];
""1018_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1018_depositToken"" [label=""depositToken""];
""1018_depositEther"" [label=""depositEther""];
""1018_approveToPullOutTokens"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmounts"" -> ""1018_onlyOwner"";
""1018_distributeWithTransferFrom"" -> ""1018_onlyOwner"";
""1018_tokenFallback"" -> ""1018_whenNotPaused"";
""1018_depositEther"" -> ""1018_whenNotPaused"";
""1018_depositToken"" -> ""1018_whenNotPaused"";
""1018_distributeTokenToAddress"" -> ""1018_onlyOwner"";
}
"
0xc4aad17558fa95c8937d0856b2dad74c1a7a095f.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_335_RefundVault {
label=""RefundVault"";
""335_RefundVault"" [label=""RefundVault""];
""335_enableRefunds"" [label=""enableRefunds""];
""335_close"" [label=""close""];
""335_deposit"" [label=""deposit""];
""335_refund"" [label=""refund""];
""335_deposit"" -> ""335_onlyOwner"";
""335_enableRefunds"" -> ""335_onlyOwner"";
""335_close"" -> ""335_onlyOwner"";
}
"
0x5592a2704ba651f8af4cb6f330415f9877483ad2.sol,NamiMultiSigWallet,"contract NamiMultiSigWallet { uint constant public MAX_OWNER_COUNT = 50; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_988_NamiMultiSigWallet {
label=""NamiMultiSigWallet"";
""988_getTransactionCount"" [label=""getTransactionCount""];
""988_confirmTransaction"" [label=""confirmTransaction""];
""988_isOwner"" [label=""isOwner""];
""988_changeRequirement"" [label=""changeRequirement""];
""988_getConfirmations"" [label=""getConfirmations""];
""988_constructor"" [label=""constructor""];
""988_getOwners"" [label=""getOwners""];
""988_addOwner"" [label=""addOwner""];
""988_addTransaction"" [label=""addTransaction""];
""988_getConfirmationCount"" [label=""getConfirmationCount""];
""988_replaceOwner"" [label=""replaceOwner""];
""988_fallback"" [label=""fallback""];
""988_getTransactionIds"" [label=""getTransactionIds""];
""988_submitTransaction"" [label=""submitTransaction""];
""988_executeTransaction"" [label=""executeTransaction""];
""988_removeOwner"" [label=""removeOwner""];
""988_isConfirmed"" [label=""isConfirmed""];
""988_revokeConfirmation"" [label=""revokeConfirmation""];
""988_addTransaction"" -> ""988_notNull"";
""988_constructor"" -> ""988_validRequirement"";
""988_addOwner"" -> ""988_validRequirement"";
""988_replaceOwner"" -> ""988_ownerDoesNotExist"";
""988_addOwner"" -> ""988_onlyWallet"";
""988_submitTransaction"" -> ""988_addTransaction"";
""988_addOwner"" -> ""988_notNull"";
""988_replaceOwner"" -> ""988_onlyWallet"";
""988_confirmTransaction"" -> ""988_ownerExists"";
""988_revokeConfirmation"" -> ""988_ownerExists"";
""988_executeTransaction"" -> ""988_notExecuted"";
""988_removeOwner"" -> ""988_changeRequirement"";
""988_changeRequirement"" -> ""988_validRequirement"";
""988_removeOwner"" -> ""988_onlyWallet"";
""988_confirmTransaction"" -> ""988_notConfirmed"";
""988_removeOwner"" -> ""988_ownerExists"";
""988_changeRequirement"" -> ""988_onlyWallet"";
""988_confirmTransaction"" -> ""988_executeTransaction"";
""988_addOwner"" -> ""988_ownerDoesNotExist"";
""988_revokeConfirmation"" -> ""988_confirmed"";
""988_submitTransaction"" -> ""988_confirmTransaction"";
""988_confirmTransaction"" -> ""988_transactionExists"";
""988_replaceOwner"" -> ""988_ownerExists"";
""988_revokeConfirmation"" -> ""988_notExecuted"";
""988_executeTransaction"" -> ""988_isConfirmed"";
}
"
0x728781e75735dc0962df3a51d7ef47e798a7107e.sol,WolkTGE,"contract WolkTGE is Wolk { mapping (address => uint256) contribution; mapping (address => uint256) presaleLimit; mapping (address => bool) presaleContributor; uint256 public constant tokenGenerationMin = 50 * 10**6 * 10**decimals; uint256 public constant tokenGenerationMax = 150 * 10**6 * 10**decimals; uint256 public presale_start_block; uint256 public start_block; uint256 public end_block; function wolkGenesis(uint256 _presaleStartBlock, uint256 _startBlock, uint256 _endBlock, address _wolkWallet, address _wolkSale) onlyOwner returns (bool success){ require((totalTokens < 1) && (block.number <= _startBlock) && (_endBlock > _startBlock) && (_startBlock > _presaleStartBlock)); presale_start_block = _presaleStartBlock; start_block = _startBlock; end_block = _endBlock; multisigWallet = _wolkWallet; wolkSale = _wolkSale; settlers[msg.sender] = true; return true; }",1,"subgraph cluster_1265_WolkTGE {
label=""WolkTGE"";
""1265_finalize"" [label=""finalize""];
""1265_removeParticipant"" [label=""removeParticipant""];
""1265_addParticipant"" [label=""addParticipant""];
""1265_tokenGenerationEvent"" [label=""tokenGenerationEvent""];
""1265_wolkGenesis"" [label=""wolkGenesis""];
""1265_refund"" [label=""refund""];
""1265_finalizeOpenSale"" [label=""finalizeOpenSale""];
""1265_participantBalance"" [label=""participantBalance""];
""1265_finalizeOpenSale"" -> ""1265_safeMul"";
""1265_finalize"" -> ""1265_safeAdd"";
""1265_finalizeOpenSale"" -> ""1265_safeDiv"";
""1265_finalize"" -> ""1265_safeMul"";
""1265_refund"" -> ""1265_safeSub"";
""1265_finalizeOpenSale"" -> ""1265_onlyOwner"";
""1265_finalize"" -> ""1265_onlyWolk"";
""1265_wolkGenesis"" -> ""1265_onlyOwner"";
""1265_removeParticipant"" -> ""1265_onlyOwner"";
""1265_tokenGenerationEvent"" -> ""1265_safeSub"";
""1265_addParticipant"" -> ""1265_onlyOwner"";
""1265_finalizeOpenSale"" -> ""1265_safeSub"";
""1265_addParticipant"" -> ""1265_safeMul"";
""1265_finalize"" -> ""1265_safeDiv"";
""1265_tokenGenerationEvent"" -> ""1265_safeMul"";
""1265_tokenGenerationEvent"" -> ""1265_safeAdd"";
}
"
0x67d9be79f2f13b7d3c9684d3782bc646f5ba6d63.sol,MilinfinityToken,"contract MilinfinityToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 230000000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 500; uint256 public tokensPerEth = 300000000e1; uint public target0drop = 20000; uint public progress0drop = 0; address multisig = 0x88A97d97413a6c2290f748D34aa204619d96b1a1; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_MilinfinityToken {
label=""MilinfinityToken"";
""1261_getTokens"" [label=""getTokens""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_allowance"" [label=""allowance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_distr"" [label=""distr""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_fallback"" [label=""fallback""];
""1261_add"" [label=""add""];
""1261_Distribute"" [label=""Distribute""];
""1261_constructor"" [label=""constructor""];
""1261_transfer"" [label=""transfer""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_getTokens"" -> ""1261_canDistr"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
}
"
0x9214ec02cb71cba0ada6896b8da260736a67ab10.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1092_MiniMeToken {
label=""MiniMeToken"";
""1092_getValueAt"" [label=""getValueAt""];
""1092_totalSupply"" [label=""totalSupply""];
""1092_claimTokens"" [label=""claimTokens""];
""1092_MiniMeToken"" [label=""MiniMeToken""];
""1092_isContract"" [label=""isContract""];
""1092_enableTransfers"" [label=""enableTransfers""];
""1092_generateTokens"" [label=""generateTokens""];
""1092_balanceOfAt"" [label=""balanceOfAt""];
""1092_totalSupplyAt"" [label=""totalSupplyAt""];
""1092_allowance"" [label=""allowance""];
""1092_approveAndCall"" [label=""approveAndCall""];
""1092_transfer"" [label=""transfer""];
""1092_approve"" [label=""approve""];
""1092_fallback"" [label=""fallback""];
""1092_balanceOf"" [label=""balanceOf""];
""1092_updateValueAtNow"" [label=""updateValueAtNow""];
""1092_destroyTokens"" [label=""destroyTokens""];
""1092_doTransfer"" [label=""doTransfer""];
""1092_createCloneToken"" [label=""createCloneToken""];
""1092_transferFrom"" [label=""transferFrom""];
""1092_min"" [label=""min""];
""1092_doTransfer"" -> ""1092_updateValueAtNow"";
""1092_totalSupply"" -> ""1092_totalSupplyAt"";
""1092_transfer"" -> ""1092_doTransfer"";
""1092_generateTokens"" -> ""1092_onlyController"";
""1092_destroyTokens"" -> ""1092_updateValueAtNow"";
""1092_fallback"" -> ""1092_isContract"";
""1092_approveAndCall"" -> ""1092_approve"";
""1092_doTransfer"" -> ""1092_isContract"";
""1092_claimTokens"" -> ""1092_onlyController"";
""1092_generateTokens"" -> ""1092_updateValueAtNow"";
""1092_generateTokens"" -> ""1092_totalSupply"";
""1092_transferFrom"" -> ""1092_doTransfer"";
""1092_destroyTokens"" -> ""1092_totalSupply"";
""1092_generateTokens"" -> ""1092_balanceOf"";
""1092_doTransfer"" -> ""1092_balanceOfAt"";
""1092_balanceOfAt"" -> ""1092_min"";
""1092_enableTransfers"" -> ""1092_onlyController"";
""1092_destroyTokens"" -> ""1092_onlyController"";
""1092_totalSupplyAt"" -> ""1092_min"";
""1092_destroyTokens"" -> ""1092_balanceOf"";
""1092_balanceOf"" -> ""1092_balanceOfAt"";
""1092_balanceOfAt"" -> ""1092_getValueAt"";
""1092_totalSupplyAt"" -> ""1092_getValueAt"";
""1092_approve"" -> ""1092_isContract"";
}
"
0x217aff4ee5bc1dfcabd8d5c3a36e0b430b02ab9d.sol,ETher_game,contract ETher_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETher_game {
label=""ETher_game"";
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0xa44fb3aa5c8465512b806145a8f9b60e74f3f851.sol,PITSTOP,"contract PITSTOP is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 10000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth =10000000e18; uint public target0drop = 500; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_PITSTOP {
label=""PITSTOP"";
""1253_distr"" [label=""distr""];
""1253_getTokens"" [label=""getTokens""];
""1253_constructor"" [label=""constructor""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_approve"" [label=""approve""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_Distribute"" [label=""Distribute""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_transfer"" [label=""transfer""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_add"" [label=""add""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_withdraw"" [label=""withdraw""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_burn"" -> ""1253_onlyOwner"";
}
"
0x55914aad05640d89448a7803a03ed0eabcbc6a22.sol,EthereumCrystal,"contract EthereumCrystal is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 75000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000000e8; uint public target0drop = 200000; uint public progress0drop = 0; address multisig = 0xF4ea201ba0c2ca99E8942f047a5220bc98286763; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_EthereumCrystal {
label=""EthereumCrystal"";
""1263_transferFrom"" [label=""transferFrom""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_transfer"" [label=""transfer""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_distr"" [label=""distr""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_constructor"" [label=""constructor""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_allowance"" [label=""allowance""];
""1263_getTokens"" [label=""getTokens""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_add"" [label=""add""];
""1263_approve"" [label=""approve""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_Distribute"" [label=""Distribute""];
""1263_fallback"" [label=""fallback""];
""1263_burn"" [label=""burn""];
""1263_withdraw"" [label=""withdraw""];
""1263_getTokens"" -> ""1263_canDistr"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_distr"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_constructor"" -> ""1263_distr"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_distr"" -> ""1263_canDistr"";
}
"
0xf5587929c51017cfa8d0ead672fcc6b39f1496b0.sol,RippleCredit,"contract RippleCredit is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 500000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000e8; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0xFF84C3EAB550CBAb11725CA50F5bee01d9670fD9; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1288_RippleCredit {
label=""RippleCredit"";
""1288_balanceOf"" [label=""balanceOf""];
""1288_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1288_transfer"" [label=""transfer""];
""1288_getTokenBalance"" [label=""getTokenBalance""];
""1288_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1288_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1288_burn"" [label=""burn""];
""1288_Distribute"" [label=""Distribute""];
""1288_distr"" [label=""distr""];
""1288_getTokens"" [label=""getTokens""];
""1288_transferFrom"" [label=""transferFrom""];
""1288_constructor"" [label=""constructor""];
""1288_fallback"" [label=""fallback""];
""1288_add"" [label=""add""];
""1288_withdraw"" [label=""withdraw""];
""1288_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1288_transferOwnership"" [label=""transferOwnership""];
""1288_approve"" [label=""approve""];
""1288_finishDistribution"" [label=""finishDistribution""];
""1288_withdrawAll"" [label=""withdrawAll""];
""1288_allowance"" [label=""allowance""];
""1288_burn"" -> ""1288_onlyOwner"";
""1288_add"" -> ""1288_onlyOwner"";
""1288_distr"" -> ""1288_canDistr"";
""1288_withdrawAll"" -> ""1288_onlyOwner"";
""1288_withdraw"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_distr"";
""1288_transfer"" -> ""1288_onlyPayloadSize"";
""1288_DistributeAirdrop"" -> ""1288_Distribute"";
""1288_finishDistribution"" -> ""1288_onlyOwner"";
""1288_transferFrom"" -> ""1288_onlyPayloadSize"";
""1288_fallback"" -> ""1288_getTokens"";
""1288_transferOwnership"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_canDistr"";
""1288_withdrawForeignTokens"" -> ""1288_onlyOwner"";
""1288_finishDistribution"" -> ""1288_canDistr"";
""1288_DistributeAirdropMultiple"" -> ""1288_onlyOwner"";
""1288_DistributeAirdropMultiple"" -> ""1288_Distribute"";
""1288_updateTokensPerEth"" -> ""1288_onlyOwner"";
""1288_Distribute"" -> ""1288_onlyOwner"";
""1288_DistributeAirdrop"" -> ""1288_onlyOwner"";
""1288_constructor"" -> ""1288_distr"";
}
"
0xaab606817809841e8b1168be8779eeaf6744ef64.sol,DividendToken,"contract DividendToken is StandardToken, Ownable { using SafeMath for uint256; uint256 public claimTimeout = 20 days; uint256 public dividendCycleTime = 350 days; uint256 public currentDividend; mapping(address => uint256) unclaimedDividend; mapping(address => uint256) public lastUpdate; uint256 public lastDividendIncreaseDate; mapping(address => bool) public isTreasurer; uint256 public dividendEndTime = 0; event Payin(address _owner, uint256 _value, uint256 _endTime); event Payout(address _tokenHolder, uint256 _value); event Reclaimed(uint256 remainingBalance, uint256 _endTime, uint256 _now); event ChangedTreasurer(address treasurer, bool active); constructor() public { isTreasurer[owner] = true; }",1,"subgraph cluster_1282_DividendToken {
label=""DividendToken"";
""1282_transfer"" [label=""transfer""];
""1282_fallback"" [label=""fallback""];
""1282_getClaimableDividend"" [label=""getClaimableDividend""];
""1282_updateDividend"" [label=""updateDividend""];
""1282_claimDividend"" [label=""claimDividend""];
""1282_transferDividend"" [label=""transferDividend""];
""1282_requestUnclaimed"" [label=""requestUnclaimed""];
""1282_constructor"" [label=""constructor""];
""1282_setTreasurer"" [label=""setTreasurer""];
""1282_transferFrom"" [label=""transferFrom""];
""1282_calcDividend"" [label=""calcDividend""];
""1282_getClaimableDividend"" -> ""1282_calcDividend"";
""1282_transferDividend"" -> ""1282_updateDividend"";
""1282_requestUnclaimed"" -> ""1282_onlyOwner"";
""1282_transfer"" -> ""1282_transferDividend"";
""1282_claimDividend"" -> ""1282_updateDividend"";
""1282_transfer"" -> ""1282_transfer"";
""1282_setTreasurer"" -> ""1282_onlyOwner"";
""1282_transferFrom"" -> ""1282_transferDividend"";
""1282_transferDividend"" -> ""1282_balanceOf"";
""1282_calcDividend"" -> ""1282_balanceOf"";
""1282_updateDividend"" -> ""1282_calcDividend"";
""1282_transferFrom"" -> ""1282_transferFrom"";
}
"
0xf0344800bd3ffa687e4d780357961b28995a5f46.sol,QUIZ_GAME,contract QUIZ_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_QUIZ_GAME {
label=""QUIZ_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_StartGame"" [label=""StartGame""];
}
"
0x692b856117039d424cfac420f93ab2451f3c9eb5.sol,RunAway,contract RunAway { using SafeMath for uint256; using SafeMathInt for int256; modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_2263_RunAway {
label=""RunAway"";
""2263_setSymbol"" [label=""setSymbol""];
""2263_purchaseTokens"" [label=""purchaseTokens""];
""2263_withdrawComm1"" [label=""withdrawComm1""];
""2263_transfer"" [label=""transfer""];
""2263_setAdministrator"" [label=""setAdministrator""];
""2263_sell"" [label=""sell""];
""2263_setName"" [label=""setName""];
""2263_constructor"" [label=""constructor""];
""2263_myDividends"" [label=""myDividends""];
""2263_withdraw"" [label=""withdraw""];
""2263_dividendsOf"" [label=""dividendsOf""];
""2263_withdrawComm2"" [label=""withdrawComm2""];
""2263_totalSupply"" [label=""totalSupply""];
""2263_roundPayoutsTo"" [label=""roundPayoutsTo""];
""2263_roundDividends"" [label=""roundDividends""];
""2263_roundNetBuySum"" [label=""roundNetBuySum""];
""2263_roundProfitPerShare"" [label=""roundProfitPerShare""];
""2263_startNextRound"" [label=""startNextRound""];
""2263_ethereumToTokens_"" [label=""ethereumToTokens_""];
""2263_roundUserNetBuy"" [label=""roundUserNetBuy""];
""2263_balanceOf"" [label=""balanceOf""];
""2263_disableInitialStage"" [label=""disableInitialStage""];
""2263_sqrt"" [label=""sqrt""];
""2263_totalEthereumBalance"" [label=""totalEthereumBalance""];
""2263_sellPrice"" [label=""sellPrice""];
""2263_endCurrentRound"" [label=""endCurrentRound""];
""2263_roundEndTime"" [label=""roundEndTime""];
""2263_roundEnded"" [label=""roundEnded""];
""2263_reinvest"" [label=""reinvest""];
""2263_taxDividends"" [label=""taxDividends""];
""2263_calculateTokensReceived"" [label=""calculateTokensReceived""];
""2263_exit"" [label=""exit""];
""2263_roundTotalPayouts"" [label=""roundTotalPayouts""];
""2263_buy"" [label=""buy""];
""2263_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""2263_estimateDividends"" [label=""estimateDividends""];
""2263_fallback"" [label=""fallback""];
""2263_activate"" [label=""activate""];
""2263_transferExpiredDividends"" [label=""transferExpiredDividends""];
""2263_acquireDividends"" [label=""acquireDividends""];
""2263_tokensToEthereum_"" [label=""tokensToEthereum_""];
""2263_myTokens"" [label=""myTokens""];
""2263_buyPrice"" [label=""buyPrice""];
""2263_roundStartTime"" [label=""roundStartTime""];
""2263_setSymbol"" -> ""2263_onlyAdministrator"";
""2263_exit"" -> ""2263_onlyHuman"";
""2263_purchaseTokens"" -> ""2263_isActivated"";
""2263_withdrawComm2"" -> ""2263_onlyComm2"";
""2263_sellPrice"" -> ""2263_tokensToEthereum_"";
""2263_withdrawComm1"" -> ""2263_onlyComm1"";
""2263_withdrawComm1"" -> ""2263_isActivated"";
""2263_fallback"" -> ""2263_purchaseTokens"";
""2263_transfer"" -> ""2263_taxDividends"";
""2263_exit"" -> ""2263_acquireDividends"";
""2263_exit"" -> ""2263_sell"";
""2263_transfer"" -> ""2263_checkRoundStatus"";
""2263_sell"" -> ""2263_onlyBagholders"";
""2263_transfer"" -> ""2263_tokensToEthereum_"";
""2263_activate"" -> ""2263_onlyAdministrator"";
""2263_withdrawComm2"" -> ""2263_checkRoundStatus"";
""2263_purchaseTokens"" -> ""2263_checkRoundStatus"";
""2263_ethereumToTokens_"" -> ""2263_sqrt"";
""2263_sell"" -> ""2263_taxDividends"";
""2263_acquireDividends"" -> ""2263_onlyHuman"";
""2263_acquireDividends"" -> ""2263_myDividends"";
""2263_calculateTokensReceived"" -> ""2263_ethereumToTokens_"";
""2263_sell"" -> ""2263_onlyHuman"";
""2263_reinvest"" -> ""2263_onlyHuman"";
""2263_reinvest"" -> ""2263_purchaseTokens"";
""2263_sell"" -> ""2263_isActivated"";
""2263_purchaseTokens"" -> ""2263_onlyHuman"";
""2263_transfer"" -> ""2263_onlyBagholders"";
""2263_transfer"" -> ""2263_onlyHuman"";
""2263_withdraw"" -> ""2263_onlyHuman"";
""2263_setAdministrator"" -> ""2263_onlyAdministrator"";
""2263_exit"" -> ""2263_withdraw"";
""2263_calculateEthereumReceived"" -> ""2263_tokensToEthereum_"";
""2263_reinvest"" -> ""2263_isActivated"";
""2263_transferExpiredDividends"" -> ""2263_checkRoundStatus"";
""2263_myTokens"" -> ""2263_balanceOf"";
""2263_buyPrice"" -> ""2263_tokensToEthereum_"";
""2263_acquireDividends"" -> ""2263_isActivated"";
""2263_withdrawComm2"" -> ""2263_isActivated"";
""2263_transferExpiredDividends"" -> ""2263_onlyHuman"";
""2263_exit"" -> ""2263_checkRoundStatus"";
""2263_sell"" -> ""2263_checkRoundStatus"";
""2263_disableInitialStage"" -> ""2263_onlyAdministrator"";
""2263_purchaseTokens"" -> ""2263_antiEarlyWhale"";
""2263_transfer"" -> ""2263_isActivated"";
""2263_reinvest"" -> ""2263_checkRoundStatus"";
""2263_withdrawComm2"" -> ""2263_onlyHuman"";
""2263_buy"" -> ""2263_purchaseTokens"";
""2263_setName"" -> ""2263_onlyAdministrator"";
""2263_myDividends"" -> ""2263_dividendsOf"";
""2263_exit"" -> ""2263_isActivated"";
""2263_withdraw"" -> ""2263_isActivated"";
""2263_purchaseTokens"" -> ""2263_ethereumToTokens_"";
""2263_acquireDividends"" -> ""2263_checkRoundStatus"";
""2263_withdraw"" -> ""2263_checkRoundStatus"";
""2263_withdrawComm1"" -> ""2263_checkRoundStatus"";
""2263_sell"" -> ""2263_tokensToEthereum_"";
""2263_transferExpiredDividends"" -> ""2263_isActivated"";
""2263_withdrawComm1"" -> ""2263_onlyHuman"";
}
"
0xd74ac22ffc06d6f96cb41eef4e0fdb836889c3ff.sol,AHF_PreSale,contract AHF_PreSale is Owned { ERC20Interface public tokenContract; address public vaultAddress; bool public fundingEnabled; uint public totalCollected; uint public tokenPrice; function setTokenAddress(address _tokenAddress) public onlyOwner { tokenContract = ERC20Interface(_tokenAddress); return; },1,"subgraph cluster_314_AHF_PreSale {
label=""AHF_PreSale"";
""314_setTokenAddress"" [label=""setTokenAddress""];
""314_updateTokenPrice"" [label=""updateTokenPrice""];
""314_fallback"" [label=""fallback""];
""314_claimTokens"" [label=""claimTokens""];
""314_setFundingEnabled"" [label=""setFundingEnabled""];
""314_setVaultAddress"" [label=""setVaultAddress""];
""314_setFundingEnabled"" -> ""314_onlyOwner"";
""314_claimTokens"" -> ""314_onlyOwner"";
""314_updateTokenPrice"" -> ""314_onlyOwner"";
""314_setVaultAddress"" -> ""314_onlyOwner"";
""314_setTokenAddress"" -> ""314_onlyOwner"";
}
"
0xed2725cdfc48a24aa71d9b9621d431db0705a55a.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1280_MiniMeTokenFactory {
label=""MiniMeTokenFactory"";
""1280_createCloneToken"" [label=""createCloneToken""];
}
"
0x21ae174c592cbb476819344a895d0e9219f5cc79.sol,BO3KMain,"contract BO3KMain is modularLong { using SafeMath for *; using BO3KCalcLong for uint256; address constant public Admin = 0x3ac98F5Ea4946f58439d551E20Ed12091AF0F597; uint256 constant public LEADER_FEE = 0.03 ether; uint256 private adminFee = 0; uint256 private adminRevenue = 0; uint256 private winTeamValue = 0; uint private winTeamID = 0; string constant public name = ; string constant public symbol = ; uint256 constant private DISCOUNT_PROB = 200; uint256 constant private DISCOUNT_VALUE_5PER_OFF = 50; uint256 constant private DISCOUNT_VALUE_10PER_OFF = 100; uint256 constant private DISCOUNT_VALUE_15PER_OFF = 150; uint256 constant private DENOMINATOR = 1000; uint256 constant private _nextRoundSettingTime = 1 hours; uint256 constant private _flagBuyingInterval = 30 seconds; uint256 constant private _maxDuration = 24 hours; uint256 constant private _officerCommission = 150; bool _activated = false; bool mutex = false; uint256 public roundID; uint public _teamID; BO3Kdatasets.PotSplit potSplit; BO3Kdatasets.FlagInfo Flag; mapping (uint256 => BO3Kdatasets.Team) team; mapping (uint256 => mapping (uint256 => BO3Kdatasets.TeamData) ) teamData; mapping (uint256 => BO3Kdatasets.Round) round; mapping (uint256 => mapping (address => BO3Kdatasets.Player) ) player; mapping (address => uint256) playerFlags; constructor () public { team[1] = BO3Kdatasets.Team(0, 500, 250, 150, 50, 50, 0, 0 ); team[2] = BO3Kdatasets.Team(1, 250, 500, 150, 50, 50, 0, 0 ); team[3] = BO3Kdatasets.Team(2, 375, 375, 150, 50, 50, 0, 0 ); potSplit = BO3Kdatasets.PotSplit(450, 450, 50, 50); Flag = BO3Kdatasets.FlagInfo( 10000000000000000, now ); }",1,"subgraph cluster_2291_BO3KMain {
label=""BO3KMain"";
""2291_buyCore"" [label=""buyCore""];
""2291_getTime"" [label=""getTime""];
""2291_random"" [label=""random""];
""2291_getFlagPriceByFlags"" [label=""getFlagPriceByFlags""];
""2291_getGeneral"" [label=""getGeneral""];
""2291_getAllWithdrawableRevenue"" [label=""getAllWithdrawableRevenue""];
""2291_buyFlag"" [label=""buyFlag""];
""2291_getRoundData"" [label=""getRoundData""];
""2291_getDistributedETH"" [label=""getDistributedETH""];
""2291_getFlagPrice"" [label=""getFlagPrice""];
""2291_getFlagRevenue"" [label=""getFlagRevenue""];
""2291_withdrawAdminRevenue"" [label=""withdrawAdminRevenue""];
""2291_getAllRevenue"" [label=""getAllRevenue""];
""2291_getTotalFlagAmount"" [label=""getTotalFlagAmount""];
""2291_getPot"" [label=""getPot""];
""2291_activate"" [label=""activate""];
""2291_getTeamData"" [label=""getTeamData""];
""2291_isLegalTime"" [label=""isLegalTime""];
""2291_getTeamBonus"" [label=""getTeamBonus""];
""2291_getPlayerFlagAmount"" [label=""getPlayerFlagAmount""];
""2291_getUpdatedTime"" [label=""getUpdatedTime""];
""2291_getBonus"" [label=""getBonus""];
""2291_withdraw"" [label=""withdraw""];
""2291_getTeam"" [label=""getTeam""];
""2291_getTotalEth"" [label=""getTotalEth""];
""2291_getGeneralProfit"" [label=""getGeneralProfit""];
""2291_getAdminRevenue"" [label=""getAdminRevenue""];
""2291_getIsActive"" [label=""getIsActive""];
""2291_getRemainTime"" [label=""getRemainTime""];
""2291_updateTimer"" [label=""updateTimer""];
""2291_constructor"" [label=""constructor""];
""2291_endRound"" [label=""endRound""];
""2291_becomeGeneral"" [label=""becomeGeneral""];
""2291_withdraw"" -> ""2291_getFlagRevenue"";
""2291_buyCore"" -> ""2291_random"";
""2291_getAllRevenue"" -> ""2291_getTeamBonus"";
""2291_buyFlag"" -> ""2291_isWithinLimits"";
""2291_withdraw"" -> ""2291_isLegalTime"";
""2291_buyFlag"" -> ""2291_isLegalTime"";
""2291_buyFlag"" -> ""2291_isActivated"";
""2291_buyFlag"" -> ""2291_isHuman"";
""2291_getAllWithdrawableRevenue"" -> ""2291_getFlagRevenue"";
""2291_buyFlag"" -> ""2291_buyCore"";
""2291_buyCore"" -> ""2291_isWithinLimits"";
""2291_getTime"" -> ""2291_isLegalTime"";
""2291_withdraw"" -> ""2291_isHuman"";
""2291_getAllWithdrawableRevenue"" -> ""2291_isLegalTime"";
""2291_buyFlag"" -> ""2291_updateTimer"";
""2291_withdraw"" -> ""2291_getTeamBonus"";
""2291_getRemainTime"" -> ""2291_isActivated"";
""2291_getFlagPrice"" -> ""2291_isLegalTime"";
""2291_withdraw"" -> ""2291_isActivated"";
""2291_buyFlag"" -> ""2291_endRound"";
""2291_getTeamBonus"" -> ""2291_isLegalTime"";
""2291_getAllWithdrawableRevenue"" -> ""2291_getTeamBonus"";
""2291_endRound"" -> ""2291_isActivated"";
""2291_getAllRevenue"" -> ""2291_getFlagRevenue"";
""2291_buyCore"" -> ""2291_isActivated"";
""2291_endRound"" -> ""2291_isLegalTime"";
}
"
0x845bfe096fbe3eabe473edc3953d8af1b19bbbc7.sol,IndTokenPayment,"contract IndTokenPayment is Ownable, ReentrancyGuard { IERC20Token[] public path; address public destinationWallet; uint256 public minConversionRate; IContractRegistry public bancorRegistry; bytes32 public constant BANCOR_NETWORK = ; event conversionSucceded(address from,uint256 fromTokenVal,address dest,uint256 destTokenVal); constructor(IERC20Token[] _path, address destWalletAddr, address bancorRegistryAddr, uint256 minConvRate){ path = _path; bancorRegistry = IContractRegistry(bancorRegistryAddr); destinationWallet = destWalletAddr; minConversionRate = minConvRate; }",1,"subgraph cluster_543_IndTokenPayment {
label=""IndTokenPayment"";
""543_constructor"" [label=""constructor""];
""543_convertToInd"" [label=""convertToInd""];
""543_withdrawToken"" [label=""withdrawToken""];
""543_setConversionPath"" [label=""setConversionPath""];
""543_withdrawEther"" [label=""withdrawEther""];
""543_getBancorContractAddress"" [label=""getBancorContractAddress""];
""543_fallback"" [label=""fallback""];
""543_setBancorRegistry"" [label=""setBancorRegistry""];
""543_setDestinationWallet"" [label=""setDestinationWallet""];
""543_setMinConversionRate"" [label=""setMinConversionRate""];
""543_withdrawEther"" -> ""543_onlyOwner"";
""543_fallback"" -> ""543_convertToInd"";
""543_setMinConversionRate"" -> ""543_onlyOwner"";
""543_setDestinationWallet"" -> ""543_onlyOwner"";
""543_setConversionPath"" -> ""543_onlyOwner"";
""543_convertToInd"" -> ""543_nonReentrant"";
""543_withdrawToken"" -> ""543_onlyOwner"";
""543_setBancorRegistry"" -> ""543_onlyOwner"";
""543_withdrawToken"" -> ""543_nonReentrant"";
""543_withdrawEther"" -> ""543_nonReentrant"";
}
"
0xdb1c55f6926e7d847ddf8678905ad871a68199d2.sol,FreeEth,contract FreeEth { address public Owner = msg.sender; function() public payable{},1,"subgraph cluster_90_FreeEth {
label=""FreeEth"";
""90_Command"" [label=""Command""];
""90_GetFreebie"" [label=""GetFreebie""];
""90_withdraw"" [label=""withdraw""];
""90_fallback"" [label=""fallback""];
}
"
0x38e308c4ac50fd6c31c5f53d7b25f25116d80a3a.sol,ScriniumPresale,"contract ScriniumPresale { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function ScriniumPresale() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_ScriniumPresale {
label=""ScriniumPresale"";
""401_ScriniumPresale"" [label=""ScriniumPresale""];
""401_balanceOf"" [label=""balanceOf""];
""401_killContract"" [label=""killContract""];
""401_transfer"" [label=""transfer""];
""401_changeOwner"" [label=""changeOwner""];
""401_approve"" [label=""approve""];
""401_transferFrom"" [label=""transferFrom""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_totalSupply"" [label=""totalSupply""];
""401_fallback"" [label=""fallback""];
""401_mintTo"" [label=""mintTo""];
}
"
0x5c15d6ac5db1a093ad57c383ffe11bde48b8241e.sol,PerfectCoinControl,contract PerfectCoinControl is PerfectCoin { function PerfectCoinControl() payable PerfectCoin() public {},1,"subgraph cluster_447_PerfectCoinControl {
label=""PerfectCoinControl"";
""447_killMe"" [label=""killMe""];
""447_withdraw"" [label=""withdraw""];
""447_PerfectCoinControl"" [label=""PerfectCoinControl""];
""447_killMe"" -> ""447_onlyOwner"";
""447_withdraw"" -> ""447_onlyOwner"";
""447_PerfectCoinControl"" -> ""447_PerfectCoin"";
}
"
0x5aeb706c39a76c31fa89bf726de1a6f7d6bc1a51.sol,EtherColor,"contract EtherColor is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private firstStepLimit = 0.05 ether; uint256 private secondStepLimit = 0.5 ether; mapping (uint256 => address) public colorIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public colorIndexToApproved; mapping (uint256 => uint256) private colorIndexToPrice; mapping (uint256 => uint256) private colorIndexToPreviousPrice; mapping (uint256 => address[5]) private colorIndexToPreviousOwners; address public ceoAddress; address public cooAddress; struct Color { string name; }",1,"subgraph cluster_1160_EtherColor {
label=""EtherColor"";
""1160_totalSupply"" [label=""totalSupply""];
""1160_getColor"" [label=""getColor""];
""1160_ownerOf"" [label=""ownerOf""];
""1160_purchase"" [label=""purchase""];
""1160_transferFrom"" [label=""transferFrom""];
""1160_payout"" [label=""payout""];
""1160_createContractColor"" [label=""createContractColor""];
""1160_setCOO"" [label=""setCOO""];
""1160_name"" [label=""name""];
""1160__payout"" [label=""_payout""];
""1160_EtherColor"" [label=""EtherColor""];
""1160__owns"" [label=""_owns""];
""1160_symbol"" [label=""symbol""];
""1160__transfer"" [label=""_transfer""];
""1160_implementsERC721"" [label=""implementsERC721""];
""1160_setCEO"" [label=""setCEO""];
""1160_balanceOf"" [label=""balanceOf""];
""1160_approve"" [label=""approve""];
""1160__approved"" [label=""_approved""];
""1160_tokensOfOwner"" [label=""tokensOfOwner""];
""1160__createColor"" [label=""_createColor""];
""1160_takeOwnership"" [label=""takeOwnership""];
""1160_priceOf"" [label=""priceOf""];
""1160_transfer"" [label=""transfer""];
""1160__addressNotNull"" [label=""_addressNotNull""];
""1160_takeOwnership"" -> ""1160__addressNotNull"";
""1160_transfer"" -> ""1160__owns"";
""1160_createContractColor"" -> ""1160_onlyCOO"";
""1160_takeOwnership"" -> ""1160__approved"";
""1160_transferFrom"" -> ""1160__transfer"";
""1160_transfer"" -> ""1160__addressNotNull"";
""1160_payout"" -> ""1160__payout"";
""1160_approve"" -> ""1160__owns"";
""1160_tokensOfOwner"" -> ""1160_balanceOf"";
""1160_transferFrom"" -> ""1160__owns"";
""1160__createColor"" -> ""1160__transfer"";
""1160_takeOwnership"" -> ""1160__transfer"";
""1160_setCOO"" -> ""1160_onlyCEO"";
""1160_tokensOfOwner"" -> ""1160_totalSupply"";
""1160_payout"" -> ""1160_onlyCLevel"";
""1160_createContractColor"" -> ""1160__createColor"";
""1160_purchase"" -> ""1160__addressNotNull"";
""1160_purchase"" -> ""1160__transfer"";
""1160_transferFrom"" -> ""1160__approved"";
""1160_transfer"" -> ""1160__transfer"";
""1160_transferFrom"" -> ""1160__addressNotNull"";
""1160_setCEO"" -> ""1160_onlyCEO"";
}
"
0x5b5a39a9a08725aca0f699e5cc9f6e81f95ff6d8.sol,SPACEDICE,"contract SPACEDICE is Mortal, usingNRE{ uint minBet = 1000000000000000; event Roll(bool _won, uint256 _dice1, uint256 _dice2, uint256 _roll1, uint256 _roll2, uint _amount); constructor() payable public {}",1,"subgraph cluster_376_SPACEDICE {
label=""SPACEDICE"";
""376_collect"" [label=""collect""];
""376_checkContractBalance"" [label=""checkContractBalance""];
""376_fallback"" [label=""fallback""];
""376_constructor"" [label=""constructor""];
""376_bet"" [label=""bet""];
""376_collect"" -> ""376_onlyOwner"";
""376_bet"" -> ""376_ra"";
""376_bet"" -> ""376_rx"";
}
"
0x6c1bcb34142bffd35f57db626e0ac427af616a4d.sol,EnjinBuyer,contract EnjinBuyer { mapping (address => uint256) public balances; mapping (address => uint256) public balances_after_buy; bool public bought_tokens; bool public token_set; bool public refunded; uint256 public contract_eth_value; bool public kill_switch; bytes32 password_hash = 0x8bf0720c6e610aace867eba51b03ab8ca908b665898b10faddc95a96e829539d; address public developer = 0x0639C169D9265Ca4B4DEce693764CdA8ea5F3882; address public sale = 0xc4740f71323129669424d1Ae06c42AEE99da30e2; ERC20 public token; uint256 public eth_minimum = 3235 ether; function set_token(address _token) { require(msg.sender == developer); token = ERC20(_token); token_set = true; },1,"subgraph cluster_503_EnjinBuyer {
label=""EnjinBuyer"";
""503_set_token"" [label=""set_token""];
""503_fallback"" [label=""fallback""];
""503_purchase_tokens"" [label=""purchase_tokens""];
""503_activate_kill_switch"" [label=""activate_kill_switch""];
""503_set_refunded"" [label=""set_refunded""];
""503_withdraw"" [label=""withdraw""];
""503_personal_withdraw"" [label=""personal_withdraw""];
}
"
0x70f187ea2ebcf5b94aa7819f41c92f9a9dc4c200.sol,LifePasswordAI,"contract LifePasswordAI is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 8; uint256 public constant INITIAL_SUPPLY = 680000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function LifePasswordAI() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_LifePasswordAI {
label=""LifePasswordAI"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_LifePasswordAI"" [label=""LifePasswordAI""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x8d4b2cffe2dcbbf06eaa5920401db86ca5fb8177.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1199_RefundVault {
label=""RefundVault"";
""1199_RefundVault"" [label=""RefundVault""];
""1199_refund"" [label=""refund""];
""1199_close"" [label=""close""];
""1199_enableRefunds"" [label=""enableRefunds""];
""1199_deposit"" [label=""deposit""];
""1199_enableRefunds"" -> ""1199_onlyOwner"";
""1199_deposit"" -> ""1199_onlyOwner"";
""1199_close"" -> ""1199_onlyOwner"";
}
"
0x720608228bda773fe22e816ee72463040f11c19e.sol,Presale,"contract Presale is CommonCrowdsale { uint public devLimit; uint public softcap; bool public refundOn; bool public softcapAchieved; bool public devWithdrawn; address public devWallet; address public nextSaleAgent; mapping (address => uint) public balances; function Presale() public { minInvestedLimit = 10000000000000000; price = 1000000000000000000000; bountyTokensPercent = 3; advisorsTokensPercent = 1; devTokensPercent = 4; foundersTokensPercent = 10; softcap = 20000000000000000000; hardcap = 63000000000000000000000; addBonus(7,42); addBonus(7,25); addBonus(7,11); start = 1513774800; end = 1516885200; devLimit = 7000000000000000000; wallet = 0x72EcAEB966176c50CfFc0Db53E4A2D3DbC0d538B; devWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770; bountyTokensWallet = 0x7E513B54e3a45B60d6f92c6CECE10C68977EEA8c; foundersTokensWallet = 0x4227859C5A9Bb4391Cc4735Aa655e980a3DD4380; advisorsTokensWallet = 0x6e740ef8618A7d822238F867c622373Df8B54a22; devTokensWallet = 0xCaDca9387E12F55997F46870DA28F0af1626A6d4; }",1,"subgraph cluster_1684_Presale {
label=""Presale"";
""1684_setSoftcap"" [label=""setSoftcap""];
""1684_setNextSaleAgent"" [label=""setNextSaleAgent""];
""1684_refund"" [label=""refund""];
""1684_createTokens"" [label=""createTokens""];
""1684_withdrawDev"" [label=""withdrawDev""];
""1684_setDevLimit"" [label=""setDevLimit""];
""1684_withdraw"" [label=""withdraw""];
""1684_Presale"" [label=""Presale""];
""1684_finishMinting"" [label=""finishMinting""];
""1684_setDevWallet"" [label=""setDevWallet""];
""1684_createTokens"" -> ""1684_calculateAndTransferTokens"";
""1684_setDevWallet"" -> ""1684_notLocked"";
""1684_setDevLimit"" -> ""1684_notLocked"";
""1684_setDevLimit"" -> ""1684_onlyOwner"";
""1684_setSoftcap"" -> ""1684_onlyOwner"";
""1684_setNextSaleAgent"" -> ""1684_onlyOwner"";
""1684_finishMinting"" -> ""1684_mintExtendedTokens"";
""1684_finishMinting"" -> ""1684_onlyOwner"";
""1684_Presale"" -> ""1684_addBonus"";
""1684_setDevWallet"" -> ""1684_onlyOwner"";
""1684_createTokens"" -> ""1684_saleIsOn"";
""1684_withdraw"" -> ""1684_withdrawDev"";
}
"
0x5c15d6ac5db1a093ad57c383ffe11bde48b8241e.sol,PerfectCoinControl,contract PerfectCoinControl is PerfectCoin { function PerfectCoinControl() payable PerfectCoin() public {},1,"subgraph cluster_447_PerfectCoinControl {
label=""PerfectCoinControl"";
""447_killMe"" [label=""killMe""];
""447_withdraw"" [label=""withdraw""];
""447_PerfectCoinControl"" [label=""PerfectCoinControl""];
""447_killMe"" -> ""447_onlyOwner"";
""447_withdraw"" -> ""447_onlyOwner"";
""447_PerfectCoinControl"" -> ""447_PerfectCoin"";
}
"
0x45afe0ff6a92bc9f346fc440a9d2a881d42094ff.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_1042_Destructible {
label=""Destructible"";
""1042_Destructible"" [label=""Destructible""];
""1042_destroy"" [label=""destroy""];
""1042_destroyAndSend"" [label=""destroyAndSend""];
""1042_destroy"" -> ""1042_onlyOwner"";
""1042_destroyAndSend"" -> ""1042_onlyOwner"";
}
"
0x7609a798cf9e86622364326f5d1e523a030e19b4.sol,XenoxToken,"contract XenoxToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 100000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000e18; uint public target0drop = 1000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event DistrRestarted(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1274_XenoxToken {
label=""XenoxToken"";
""1274_withdrawAll"" [label=""withdrawAll""];
""1274_withdraw"" [label=""withdraw""];
""1274_distr"" [label=""distr""];
""1274_transferOwnership"" [label=""transferOwnership""];
""1274_transfer"" [label=""transfer""];
""1274_getTokens"" [label=""getTokens""];
""1274_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1274_getTokenBalance"" [label=""getTokenBalance""];
""1274_approve"" [label=""approve""];
""1274_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1274_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1274_add"" [label=""add""];
""1274_fallback"" [label=""fallback""];
""1274_finishDistribution"" [label=""finishDistribution""];
""1274_constructor"" [label=""constructor""];
""1274_reDistribution"" [label=""reDistribution""];
""1274_balanceOf"" [label=""balanceOf""];
""1274_Distribute"" [label=""Distribute""];
""1274_transferFrom"" [label=""transferFrom""];
""1274_burn"" [label=""burn""];
""1274_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1274_allowance"" [label=""allowance""];
""1274_updateTokensPerEth"" -> ""1274_onlyOwner"";
""1274_transferFrom"" -> ""1274_onlyPayloadSize"";
""1274_reDistribution"" -> ""1274_canDistr"";
""1274_DistributeAirdropMultiple"" -> ""1274_onlyOwner"";
""1274_distr"" -> ""1274_canDistr"";
""1274_DistributeAirdrop"" -> ""1274_onlyOwner"";
""1274_add"" -> ""1274_onlyOwner"";
""1274_constructor"" -> ""1274_distr"";
""1274_transfer"" -> ""1274_onlyPayloadSize"";
""1274_fallback"" -> ""1274_getTokens"";
""1274_finishDistribution"" -> ""1274_onlyOwner"";
""1274_withdrawForeignTokens"" -> ""1274_onlyOwner"";
""1274_withdrawAll"" -> ""1274_onlyOwner"";
""1274_burn"" -> ""1274_onlyOwner"";
""1274_finishDistribution"" -> ""1274_canDistr"";
""1274_DistributeAirdropMultiple"" -> ""1274_Distribute"";
""1274_Distribute"" -> ""1274_onlyOwner"";
""1274_withdraw"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_canDistr"";
""1274_reDistribution"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_distr"";
""1274_DistributeAirdrop"" -> ""1274_Distribute"";
""1274_transferOwnership"" -> ""1274_onlyOwner"";
}
"
0xef5eb9a12981bfbcdc5648ad7852f298c091cbc5.sol,Exash,"contract Exash is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e8; uint public target0drop = 30000; uint public progress0drop = 0; address multisig = 0xCf7Ac628f8A0fa38059BF77b0134efaD8bF329A3; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Exash {
label=""Exash"";
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_Distribute"" [label=""Distribute""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_constructor"" [label=""constructor""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transfer"" [label=""transfer""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokens"" [label=""getTokens""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_add"" [label=""add""];
""1261_distr"" [label=""distr""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_allowance"" [label=""allowance""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
}
"
0x5149474fd339e95271304b5b28f6e456a24c0e25.sol,MNSPAY,"contract MNSPAY is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 210000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function MNSPAY() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_MNSPAY {
label=""MNSPAY"";
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706__transfer"" [label=""_transfer""];
""706_MNSPAY"" [label=""MNSPAY""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x006ff3494c04680cfbf39b0396054486f3f6ad32.sol,PLAY_NOW,contract PLAY_NOW { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>=1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_PLAY_NOW {
label=""PLAY_NOW"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_Try"" [label=""Try""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_SetupPlay"" [label=""SetupPlay""];
""132_newQuestioner"" [label=""newQuestioner""];
}
"
0x2992221bc5f79681635c2b490cca47cac0a2bd7c.sol,try_me,contract try_me { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_try_me {
label=""try_me"";
""143_StopGame"" [label=""StopGame""];
""143_ActivateContract"" [label=""ActivateContract""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_fallback"" [label=""fallback""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
}
"
0xc849a5fff9befa297d1c3a772bafac9f3c9004ec.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1018_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1018_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1018_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1018_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1018_constructor"" [label=""constructor""];
""1018_tokenFallback"" [label=""tokenFallback""];
""1018_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1018_depositToken"" [label=""depositToken""];
""1018_depositEther"" [label=""depositEther""];
""1018_approveToPullOutTokens"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmounts"" -> ""1018_onlyOwner"";
""1018_distributeWithTransferFrom"" -> ""1018_onlyOwner"";
""1018_tokenFallback"" -> ""1018_whenNotPaused"";
""1018_depositEther"" -> ""1018_whenNotPaused"";
""1018_depositToken"" -> ""1018_whenNotPaused"";
""1018_distributeTokenToAddress"" -> ""1018_onlyOwner"";
}
"
0xeb62b8c5c4f0f5d59a7f060554c13e8f38f4de9f.sol,HODL,contract HODL { address hodl = msg.sender; function() external payable {},1,"subgraph cluster_47_HODL {
label=""HODL"";
""47_get"" [label=""get""];
""47_end"" [label=""end""];
""47_fallback"" [label=""fallback""];
}
"
0xecec76db2f65a2669437b2bca5703c7e07b8d12a.sol,play_with_me,contract play_with_me { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_play_with_me {
label=""play_with_me"";
""143_NewQuestion"" [label=""NewQuestion""];
""143_fallback"" [label=""fallback""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Activate"" [label=""Activate""];
""143_StopGame"" [label=""StopGame""];
""143_Try"" [label=""Try""];
}
"
0x56609c7dcb32cbedf7c5896cbb29b227bf4ec6a1.sol,EFTCrowdsale,contract EFTCrowdsale { Token public tokenReward; address public creator; address public owner = 0x515C1c5bA34880Bc00937B4a483E026b0956B364; uint256 public price; uint256 public startDate; uint256 public endDate; modifier isCreator() { require(msg.sender == creator); _; },1,"subgraph cluster_301_EFTCrowdsale {
label=""EFTCrowdsale"";
""301_setPrice"" [label=""setPrice""];
""301_setOwner"" [label=""setOwner""];
""301_setStartDate"" [label=""setStartDate""];
""301_EFTCrowdsale"" [label=""EFTCrowdsale""];
""301_setCreator"" [label=""setCreator""];
""301_setEndtDate"" [label=""setEndtDate""];
""301_kill"" [label=""kill""];
""301_fallback"" [label=""fallback""];
""301_setToken"" [label=""setToken""];
""301_sendToken"" [label=""sendToken""];
""301_setPrice"" -> ""301_isCreator"";
""301_sendToken"" -> ""301_isCreator"";
""301_setEndtDate"" -> ""301_isCreator"";
""301_setOwner"" -> ""301_isCreator"";
""301_setCreator"" -> ""301_isCreator"";
""301_setStartDate"" -> ""301_isCreator"";
""301_kill"" -> ""301_isCreator"";
""301_setToken"" -> ""301_isCreator"";
}
"
0x2ada0cddb716033e52c3d591ad12a59103230e52.sol,SGEICO,contract SGEICO { Token public tokenReward; address public creator; address public owner = 0x8dfFcCE1d47C6325340712AB1B8fD7328075730C; uint256 public price; uint256 public startDate; uint256 public endDate; modifier isCreator() { require(msg.sender == creator); _; },1,"subgraph cluster_218_SGEICO {
label=""SGEICO"";
""218_fallback"" [label=""fallback""];
""218_setStartDate"" [label=""setStartDate""];
""218_kill"" [label=""kill""];
""218_setToken"" [label=""setToken""];
""218_setPrice"" [label=""setPrice""];
""218_setOwner"" [label=""setOwner""];
""218_setCreator"" [label=""setCreator""];
""218_setEndtDate"" [label=""setEndtDate""];
""218_constructor"" [label=""constructor""];
""218_setStartDate"" -> ""218_isCreator"";
""218_setOwner"" -> ""218_isCreator"";
""218_setCreator"" -> ""218_isCreator"";
""218_setToken"" -> ""218_isCreator"";
""218_kill"" -> ""218_isCreator"";
""218_setEndtDate"" -> ""218_isCreator"";
""218_setPrice"" -> ""218_isCreator"";
}
"
0xf4f5271c9d6f23cc00f93625b502f88d289a1607.sol,WithdrawConfirmation,"contract WithdrawConfirmation is Owned { event Confirmation(address indexed sender, uint indexed withdrawId); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event WithdrawCreated(address indexed destination, uint indexed value, uint indexed id); event Execution(uint indexed withdrawId); event ExecutionFailure(uint indexed withdrawId); mapping(address => bool) public isOwner; mapping(uint => Withdraw) public withdraws; mapping(uint => mapping(address => bool)) public confirmations; address[] public owners; uint public withdrawCount; struct Withdraw { address destination; uint value; bool executed; }",1,"subgraph cluster_657_WithdrawConfirmation {
label=""WithdrawConfirmation"";
""657_createWithdraw"" [label=""createWithdraw""];
""657_constructor"" [label=""constructor""];
""657_addOwner"" [label=""addOwner""];
""657_removeOwner"" [label=""removeOwner""];
""657_executeWithdraw"" [label=""executeWithdraw""];
""657_isConfirmed"" [label=""isConfirmed""];
""657_confirmWithdraw"" [label=""confirmWithdraw""];
""657_createWithdraw"" -> ""657_notNull"";
""657_executeWithdraw"" -> ""657_confirmed"";
""657_confirmWithdraw"" -> ""657_executeWithdraw"";
""657_createWithdraw"" -> ""657_ownerExists"";
""657_confirmWithdraw"" -> ""657_notConfirmed"";
""657_removeOwner"" -> ""657_ownerExists"";
""657_createWithdraw"" -> ""657_executeWithdraw"";
""657_confirmWithdraw"" -> ""657_withdrawExists"";
""657_executeWithdraw"" -> ""657_isConfirmed"";
""657_executeWithdraw"" -> ""657_notExecuted"";
""657_addOwner"" -> ""657_hasPermission"";
""657_confirmWithdraw"" -> ""657_ownerExists"";
""657_executeWithdraw"" -> ""657_ownerExists"";
""657_removeOwner"" -> ""657_hasPermission"";
""657_addOwner"" -> ""657_ownerDoesNotExist"";
}
"
0xd1ceeeef70c61da45800bd81be3352160ad72f2a.sol,Dice2Win,"contract Dice2Win { uint256 constant JACKPOT_MODULO = 1000; uint256 constant HOUSE_EDGE_PERCENT = 2; uint256 constant JACKPOT_FEE_PERCENT = 50; uint256 constant MIN_BET = 0.02 ether; uint256 constant MIN_JACKPOT_BET = 0.1 ether; uint256 constant BLOCK_DELAY = 2; uint256 constant BET_EXPIRATION_BLOCKS = 100; address public owner; address public nextOwner; uint256 public maxBetCoinDice; uint256 public maxBetDoubleDice; uint128 public jackpotSize; uint128 public lockedInBets; enum GameId { CoinFlip, SingleDice, DoubleDice, MaxGameId }",1,"subgraph cluster_833_Dice2Win {
label=""Dice2Win"";
""833_refundBet"" [label=""refundBet""];
""833_getDiceWinAmount"" [label=""getDiceWinAmount""];
""833_changeMaxBetDoubleDice"" [label=""changeMaxBetDoubleDice""];
""833_approveNextOwner"" [label=""approveNextOwner""];
""833_sendFunds"" [label=""sendFunds""];
""833_changeMaxBetCoinDice"" [label=""changeMaxBetCoinDice""];
""833_getRollUnder"" [label=""getRollUnder""];
""833_getMaxBet"" [label=""getMaxBet""];
""833_constructor"" [label=""constructor""];
""833_getRollModulo"" [label=""getRollModulo""];
""833_placeBet"" [label=""placeBet""];
""833_acceptNextOwner"" [label=""acceptNextOwner""];
""833_getJackpotFee"" [label=""getJackpotFee""];
""833_settleBet"" [label=""settleBet""];
""833_kill"" [label=""kill""];
""833_withdrawFunds"" [label=""withdrawFunds""];
""833_fallback"" [label=""fallback""];
""833_increaseJackpot"" [label=""increaseJackpot""];
""833_placeBet"" -> ""833_getMaxBet"";
""833_settleBet"" -> ""833_getRollUnder"";
""833_placeBet"" -> ""833_getRollModulo"";
""833_settleBet"" -> ""833_getDiceWinAmount"";
""833_changeMaxBetDoubleDice"" -> ""833_onlyOwner"";
""833_withdrawFunds"" -> ""833_sendFunds"";
""833_settleBet"" -> ""833_getRollModulo"";
""833_increaseJackpot"" -> ""833_onlyOwner"";
""833_withdrawFunds"" -> ""833_onlyOwner"";
""833_placeBet"" -> ""833_getDiceWinAmount"";
""833_placeBet"" -> ""833_getJackpotFee"";
""833_approveNextOwner"" -> ""833_onlyOwner"";
""833_refundBet"" -> ""833_getRollUnder"";
""833_changeMaxBetCoinDice"" -> ""833_onlyOwner"";
""833_placeBet"" -> ""833_getRollUnder"";
""833_settleBet"" -> ""833_sendFunds"";
""833_kill"" -> ""833_onlyOwner"";
""833_refundBet"" -> ""833_getDiceWinAmount"";
""833_refundBet"" -> ""833_sendFunds"";
""833_refundBet"" -> ""833_getRollModulo"";
}
"
0x55ae5792903b179915e10065e26610435832a3f7.sol,CofounditICO,"contract CofounditICO is owned{ uint256 public startBlock; uint256 public endBlock; uint256 public minEthToRaise; uint256 public maxEthToRaise; uint256 public totalEthRaised; address public multisigAddress; uint256 public icoSupply; uint256 public strategicReserveSupply; uint256 public cashilaTokenSupply; uint256 public iconomiTokenSupply; uint256 public coreTeamTokenSupply; ICofounditToken cofounditTokenContract; mapping (address => bool) presaleContributorAllowance; uint256 nextFreeParticipantIndex; mapping (uint => address) participantIndex; mapping (address => uint256) participantContribution; uint256 usedIcoSupply; uint256 usedStrategicReserveSupply; uint256 usedCashilaTokenSupply; uint256 usedIconomiTokenSupply; uint256 usedCoreTeamTokenSupply; bool icoHasStarted; bool minTresholdReached; bool icoHasSucessfulyEnded; uint256 lastEthReturnIndex; mapping (address => bool) hasClaimedEthWhenFail; uint256 lastCfiIssuanceIndex; string icoStartedMessage = ; string icoMinTresholdReachedMessage = ; string icoEndedSuccessfulyMessage = ; string icoEndedSuccessfulyWithCapMessage = ; string icoFailedMessage = ; event ICOStarted(uint256 _blockNumber, string _message); event ICOMinTresholdReached(uint256 _blockNumber, string _message); event ICOEndedSuccessfuly(uint256 _blockNumber, uint256 _amountRaised, string _message); event ICOFailed(uint256 _blockNumber, uint256 _ammountRaised, string _message); event ErrorSendingETH(address _from, uint256 _amount); function CofounditICO(uint256 _startBlock, uint256 _endBlock, address _multisigAddress) { startBlock = _startBlock; endBlock = _endBlock; minEthToRaise = 4525 * 10**18; maxEthToRaise = 56565 * 10**18; multisigAddress = _multisigAddress; icoSupply = 125000000 * 10**18; strategicReserveSupply = 125000000 * 10**18; cashilaTokenSupply = 100000000 * 10**18; iconomiTokenSupply = 50000000 * 10**18; coreTeamTokenSupply = 100000000 * 10**18; }",1,"subgraph cluster_976_CofounditICO {
label=""CofounditICO"";
""976_claimEthIfFailed"" [label=""claimEthIfFailed""];
""976_fallback"" [label=""fallback""];
""976_batchIssueTokens"" [label=""batchIssueTokens""];
""976_withdrawEth"" [label=""withdrawEth""];
""976_icoInProgress"" [label=""icoInProgress""];
""976_participantContributionInEth"" [label=""participantContributionInEth""];
""976_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""976_removePresaleContributor"" [label=""removePresaleContributor""];
""976_getCofounditTokenAddress"" [label=""getCofounditTokenAddress""];
""976_CofounditICO"" [label=""CofounditICO""];
""976_getCfiEstimation"" [label=""getCfiEstimation""];
""976_claimReservedTokens"" [label=""claimReservedTokens""];
""976_addPresaleContributors"" [label=""addPresaleContributors""];
""976_isAddressAllowedInPresale"" [label=""isAddressAllowedInPresale""];
""976_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""976_setTokenContract"" [label=""setTokenContract""];
""976_changeMultisigAddress"" [label=""changeMultisigAddress""];
""976_claimReservedTokens"" -> ""976_onlyOwner"";
""976_removePresaleContributor"" -> ""976_onlyOwner"";
""976_withdrawRemainingBalanceForManualRecovery"" -> ""976_onlyOwner"";
""976_addPresaleContributors"" -> ""976_onlyOwner"";
""976_changeMultisigAddress"" -> ""976_onlyOwner"";
""976_withdrawEth"" -> ""976_onlyOwner"";
""976_batchIssueTokens"" -> ""976_onlyOwner"";
""976_batchReturnEthIfFailed"" -> ""976_onlyOwner"";
""976_setTokenContract"" -> ""976_onlyOwner"";
}
"
0x70ab487ec48b4b9571d346348da0f10737d48a54.sol,PredictionHandshake,contract PredictionHandshake { struct Market { address creator; uint fee; bytes32 source; uint closingTime; uint reportTime; uint disputeTime; uint state; uint outcome; uint totalMatchedStake; uint totalOpenStake; uint disputeMatchedStake; bool resolved; mapping(uint => uint) outcomeMatchedStake; mapping(address => mapping(uint => Order)) open; mapping(address => mapping(uint => Order)) matched; mapping(address => bool) disputed; },1,"subgraph cluster_2253_PredictionHandshake {
label=""PredictionHandshake"";
""2253__createMarket"" [label=""_createMarket""];
""2253_report"" [label=""report""];
""2253_disputeTestDrive"" [label=""disputeTestDrive""];
""2253_shake"" [label=""shake""];
""2253__shake"" [label=""_shake""];
""2253_collectTestDrive"" [label=""collectTestDrive""];
""2253_createMarketForShurikenUser"" [label=""createMarketForShurikenUser""];
""2253__collect"" [label=""_collect""];
""2253__dispute"" [label=""_dispute""];
""2253_initTestDrive"" [label=""initTestDrive""];
""2253_collect"" [label=""collect""];
""2253_resolve"" [label=""resolve""];
""2253_uninitTestDrive"" [label=""uninitTestDrive""];
""2253_getMatchedData"" [label=""getMatchedData""];
""2253_constructor"" [label=""constructor""];
""2253_uninit"" [label=""uninit""];
""2253_withdrawTrial"" [label=""withdrawTrial""];
""2253_dispute"" [label=""dispute""];
""2253_getOpenData"" [label=""getOpenData""];
""2253_init"" [label=""init""];
""2253_shakeTestDrive"" [label=""shakeTestDrive""];
""2253_refund"" [label=""refund""];
""2253__init"" [label=""_init""];
""2253_createMarket"" [label=""createMarket""];
""2253_withdrawTrial"" -> ""2253_onlyRoot"";
""2253_dispute"" -> ""2253_onlyPredictor"";
""2253_dispute"" -> ""2253__dispute"";
""2253_collectTestDrive"" -> ""2253__collect"";
""2253_shakeTestDrive"" -> ""2253_onlyRoot"";
""2253_collect"" -> ""2253__collect"";
""2253_resolve"" -> ""2253_onlyRoot"";
""2253_createMarket"" -> ""2253__createMarket"";
""2253_collectTestDrive"" -> ""2253_onlyRoot"";
""2253_getOpenData"" -> ""2253_onlyRoot"";
""2253_init"" -> ""2253__init"";
""2253_refund"" -> ""2253_onlyPredictor"";
""2253_shakeTestDrive"" -> ""2253__shake"";
""2253_disputeTestDrive"" -> ""2253_onlyRoot"";
""2253_uninit"" -> ""2253_onlyPredictor"";
""2253_getMatchedData"" -> ""2253_onlyRoot"";
""2253_createMarketForShurikenUser"" -> ""2253__createMarket"";
""2253_disputeTestDrive"" -> ""2253__dispute"";
""2253_initTestDrive"" -> ""2253_onlyRoot"";
""2253_createMarketForShurikenUser"" -> ""2253_onlyRoot"";
""2253_uninitTestDrive"" -> ""2253_onlyRoot"";
""2253_shake"" -> ""2253__shake"";
""2253_initTestDrive"" -> ""2253__init"";
""2253_collect"" -> ""2253_onlyPredictor"";
}
"
0xda830afa460526071d3d149e898fead664f0a4bb.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1315_MiniMeToken {
label=""MiniMeToken"";
""1315_allowance"" [label=""allowance""];
""1315_doTransfer"" [label=""doTransfer""];
""1315_updateValueAtNow"" [label=""updateValueAtNow""];
""1315_fallback"" [label=""fallback""];
""1315_isContract"" [label=""isContract""];
""1315_transferFrom"" [label=""transferFrom""];
""1315_approveAndCall"" [label=""approveAndCall""];
""1315_transfer"" [label=""transfer""];
""1315_MiniMeToken"" [label=""MiniMeToken""];
""1315_approve"" [label=""approve""];
""1315_getValueAt"" [label=""getValueAt""];
""1315_balanceOfAt"" [label=""balanceOfAt""];
""1315_balanceOf"" [label=""balanceOf""];
""1315_createCloneToken"" [label=""createCloneToken""];
""1315_destroyTokens"" [label=""destroyTokens""];
""1315_claimTokens"" [label=""claimTokens""];
""1315_totalSupply"" [label=""totalSupply""];
""1315_generateTokens"" [label=""generateTokens""];
""1315_min"" [label=""min""];
""1315_enableTransfers"" [label=""enableTransfers""];
""1315_totalSupplyAt"" [label=""totalSupplyAt""];
""1315_balanceOfAt"" -> ""1315_min"";
""1315_totalSupply"" -> ""1315_totalSupplyAt"";
""1315_generateTokens"" -> ""1315_balanceOf"";
""1315_doTransfer"" -> ""1315_isContract"";
""1315_approveAndCall"" -> ""1315_approve"";
""1315_totalSupplyAt"" -> ""1315_getValueAt"";
""1315_doTransfer"" -> ""1315_updateValueAtNow"";
""1315_generateTokens"" -> ""1315_onlyController"";
""1315_generateTokens"" -> ""1315_totalSupply"";
""1315_generateTokens"" -> ""1315_updateValueAtNow"";
""1315_balanceOf"" -> ""1315_balanceOfAt"";
""1315_enableTransfers"" -> ""1315_onlyController"";
""1315_destroyTokens"" -> ""1315_totalSupply"";
""1315_transfer"" -> ""1315_doTransfer"";
""1315_doTransfer"" -> ""1315_balanceOfAt"";
""1315_destroyTokens"" -> ""1315_onlyController"";
""1315_fallback"" -> ""1315_isContract"";
""1315_approve"" -> ""1315_isContract"";
""1315_balanceOfAt"" -> ""1315_getValueAt"";
""1315_transferFrom"" -> ""1315_doTransfer"";
""1315_destroyTokens"" -> ""1315_balanceOf"";
""1315_totalSupplyAt"" -> ""1315_min"";
""1315_claimTokens"" -> ""1315_onlyController"";
""1315_destroyTokens"" -> ""1315_updateValueAtNow"";
}
"
0x50a667b73223bc612bcc43200120b5c46ee6b4e9.sol,RCpro,"contract RCpro is ICOEngineInterface, KYCBase { using SafeMath for uint256; TokenSale tokenSaleContract; uint256 public startTime; uint256 public endTime; uint256 public etherMinimum; uint256 public soldTokens; uint256 public remainingTokens; uint256[] public oneTokenInFiatWei; uint256[] public sendThreshold; mapping(address => uint256) public etherUser; mapping(address => uint256) public pendingTokenUser; mapping(address => uint256) public tokenUser; uint256[] public tokenThreshold; uint256[] public bonusThreshold; function RCpro(address _tokenSaleContract, uint256[] _oneTokenInFiatWei, uint256[] _sendThreshold, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) { require ( _tokenSaleContract != 0 ); require ( _oneTokenInFiatWei[0] != 0 ); require ( _oneTokenInFiatWei.length == _sendThreshold.length ); require( _remainingTokens != 0 ); require ( _tokenThreshold.length != 0 ); require ( _tokenThreshold.length == _bonusThreshold.length ); bonusThreshold = _bonusThreshold; tokenThreshold = _tokenThreshold; tokenSaleContract = TokenSale(_tokenSaleContract); tokenSaleContract.addMeByRC(); soldTokens = 0; remainingTokens = _remainingTokens; oneTokenInFiatWei = _oneTokenInFiatWei; sendThreshold = _sendThreshold; etherMinimum = _etherMinimum; setTimeRC( _startTime, _endTime ); }",1,"subgraph cluster_1999_RCpro {
label=""RCpro"";
""1999_changeMinimum"" [label=""changeMinimum""];
""1999_totalTokens"" [label=""totalTokens""];
""1999_price"" [label=""price""];
""1999_userBalance"" [label=""userBalance""];
""1999_claimTokenBonus"" [label=""claimTokenBonus""];
""1999_startTime"" [label=""startTime""];
""1999_ended"" [label=""ended""];
""1999_fallback"" [label=""fallback""];
""1999_endTime"" [label=""endTime""];
""1999_giveToken"" [label=""giveToken""];
""1999_releaseTokensTo"" [label=""releaseTokensTo""];
""1999_withdraw"" [label=""withdraw""];
""1999_takeEther"" [label=""takeEther""];
""1999_refundEther"" [label=""refundEther""];
""1999_setTime"" [label=""setTime""];
""1999_setTimeRC"" [label=""setTimeRC""];
""1999_remainingTokens"" [label=""remainingTokens""];
""1999_started"" [label=""started""];
""1999_RCpro"" [label=""RCpro""];
""1999_RCpro"" -> ""1999_KYCBase"";
""1999_releaseTokensTo"" -> ""1999_takeEther"";
""1999_refundEther"" -> ""1999_onlyTokenSaleOwner"";
""1999_releaseTokensTo"" -> ""1999_giveToken"";
""1999_fallback"" -> ""1999_claimTokenBonus"";
""1999_changeMinimum"" -> ""1999_onlyTokenSaleOwner"";
""1999_fallback"" -> ""1999_takeEther"";
""1999_setTime"" -> ""1999_onlyTokenSaleOwner"";
""1999_withdraw"" -> ""1999_onlyTokenSaleOwner"";
""1999_RCpro"" -> ""1999_setTimeRC"";
}
"
0x39de38ba63d172b962db2fc2ee5e4376287c50bf.sol,ImmlaIco,"contract ImmlaIco is SafeMath { ImmlaToken public immlaToken; AbstractToken public preIcoToken; address public escrow; address public icoManager; address public tokenImporter = 0x0; address public founder1; address public founder2; address public founder3; address public team; address public bountyOwner; uint public constant teamsReward = 38548226701232220000000000; uint public constant bountyOwnersTokens = 9361712198870680000000000; uint constant BASE = 1000000000000000000; uint public constant defaultIcoStart = 1505422800; uint public icoStart = defaultIcoStart; uint public constant defaultIcoDeadline = 1508101200; uint public icoDeadline = defaultIcoDeadline; uint public constant defaultFoundersRewardTime = 1521061200; uint public foundersRewardTime = defaultFoundersRewardTime; uint public constant minIcoTokenLimit = 18000000 * BASE; uint public constant maxIcoTokenLimit = 434477177 * BASE; uint public importedTokens = 0; uint public soldTokensOnIco = 0; uint public constant soldTokensOnPreIco = 13232941687168431951684000; uint tokenPrice1 = 3640; uint tokenSupply1 = 170053520 * BASE; uint tokenPrice2 = 3549; uint tokenSupply2 = 103725856 * BASE; uint tokenPrice3 = 3458; uint tokenSupply3 = 100319718 * BASE; uint tokenPrice4 = 3367; uint tokenSupply4 = 60378083 * BASE; uint[] public tokenPrices; uint[] public tokenSupplies; bool public initialized = false; bool public migrated = false; bool public sentTokensToFounders = false; bool public icoStoppedManually = false; mapping (address => uint) public balances; event BuyTokens(address buyer, uint value, uint amount); event WithdrawEther(); event StopIcoManually(); event SendTokensToFounders(uint founder1Reward, uint founder2Reward, uint founder3Reward); event ReturnFundsFor(address account); modifier whenInitialized() { require(initialized); _; }",1,"subgraph cluster_1538_ImmlaIco {
label=""ImmlaIco"";
""1538_countTokens"" [label=""countTokens""];
""1538_setNewTokenImporter"" [label=""setNewTokenImporter""];
""1538_fallback"" [label=""fallback""];
""1538_removeTokens"" [label=""removeTokens""];
""1538_stopIco"" [label=""stopIco""];
""1538_ImmlaIco"" [label=""ImmlaIco""];
""1538_setNewManager"" [label=""setNewManager""];
""1538_buyTokens"" [label=""buyTokens""];
""1538_setStateMigrated"" [label=""setStateMigrated""];
""1538_sendTokensToFounders"" [label=""sendTokensToFounders""];
""1538_importTokens"" [label=""importTokens""];
""1538_burnTokens"" [label=""burnTokens""];
""1538_returnFundsFor"" [label=""returnFundsFor""];
""1538_withdrawEther"" [label=""withdrawEther""];
""1538_init"" [label=""init""];
""1538_importTokens"" -> ""1538_add"";
""1538_removeTokens"" -> ""1538_sub"";
""1538_buyTokens"" -> ""1538_add"";
""1538_init"" -> ""1538_onlyManager"";
""1538_withdrawEther"" -> ""1538_onGoalAchievedOrDeadline"";
""1538_sendTokensToFounders"" -> ""1538_add"";
""1538_sendTokensToFounders"" -> ""1538_whenInitialized"";
""1538_returnFundsFor"" -> ""1538_onGoalAchievedOrDeadline"";
""1538_fallback"" -> ""1538_onIcoRunning"";
""1538_sendTokensToFounders"" -> ""1538_onlyManager"";
""1538_buyTokens"" -> ""1538_countTokens"";
""1538_setStateMigrated"" -> ""1538_onlyManager"";
""1538_stopIco"" -> ""1538_onlyManager"";
""1538_sendTokensToFounders"" -> ""1538_mulByFraction"";
""1538_burnTokens"" -> ""1538_notMigrated"";
""1538_countTokens"" -> ""1538_div"";
""1538_countTokens"" -> ""1538_sub"";
""1538_buyTokens"" -> ""1538_removeTokens"";
""1538_setNewManager"" -> ""1538_onlyManager"";
""1538_setNewTokenImporter"" -> ""1538_onlyManager"";
""1538_countTokens"" -> ""1538_add"";
""1538_fallback"" -> ""1538_buyTokens"";
""1538_burnTokens"" -> ""1538_onlyManager"";
""1538_withdrawEther"" -> ""1538_returnFundsFor"";
}
"
0x4c7c98c4d64c29ef8103b005eeccf5145cfdf8c1.sol,Savings,"contract Savings is Ownable { address public Owner; mapping (address => uint) public deposits; uint public openDate; event Initialized(address indexed Owner, uint OpenDate); event Deposit(address indexed Depositor, uint Amount); event Withdrawal(address indexed Withdrawer, uint Amount); function init(uint open) payable { Owner = msg.sender; openDate = open; Initialized(Owner, open); }",1,"subgraph cluster_162_Savings {
label=""Savings"";
""162_init"" [label=""init""];
""162_kill"" [label=""kill""];
""162_fallback"" [label=""fallback""];
""162_deposit"" [label=""deposit""];
""162_withdraw"" [label=""withdraw""];
""162_fallback"" -> ""162_deposit"";
""162_kill"" -> ""162_isOwner"";
""162_withdraw"" -> ""162_isOwner"";
}
"
0xd587cb111d3e506ffafdf4b1c5d19008086c4e5a.sol,IartistChain,"contract IartistChain is owned, TokenERC20 { uint256 INITIAL_SUPPLY =500000000; uint256 public buyPrice = 1; event FrozenFunds(address target, bool frozen); function IartistChain(uint256 initialSupply, string tokenName, string tokenSymbol) TokenERC20(INITIAL_SUPPLY, , ) payable { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_572_IartistChain {
label=""IartistChain"";
""572__transfer"" [label=""_transfer""];
""572_IartistChain"" [label=""IartistChain""];
""572_selfdestructs"" [label=""selfdestructs""];
""572_fallback"" [label=""fallback""];
""572_setPrices"" [label=""setPrices""];
""572_buy"" [label=""buy""];
""572_buy"" -> ""572__transfer"";
""572_selfdestructs"" -> ""572_onlyOwner"";
""572_IartistChain"" -> ""572_TokenERC20"";
""572_setPrices"" -> ""572_onlyOwner"";
""572_fallback"" -> ""572__transfer"";
}
"
0xbf2000b42c1ba2eb9e5163a0b7e2fe987ed124b4.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_processTransaction"" [label=""processTransaction""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_pullBalance"" [label=""pullBalance""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_fallback"" -> ""928_refundTransaction"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_processTransaction"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
}
"
0xef5eb9a12981bfbcdc5648ad7852f298c091cbc5.sol,Exash,"contract Exash is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e8; uint public target0drop = 30000; uint public progress0drop = 0; address multisig = 0xCf7Ac628f8A0fa38059BF77b0134efaD8bF329A3; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Exash {
label=""Exash"";
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_Distribute"" [label=""Distribute""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_constructor"" [label=""constructor""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transfer"" [label=""transfer""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokens"" [label=""getTokens""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_add"" [label=""add""];
""1261_distr"" [label=""distr""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_allowance"" [label=""allowance""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,HelloGoldSale,"contract HelloGoldSale is Pausable, SafeMath { uint256 public decimals = 8; uint256 public startDate = 1503892800; uint256 public endDate = 1504497600; uint256 tranchePeriod = 1 weeks; HelloGoldToken token; uint256 constant MaxCoinsR1 = 80 * 10**6 * 10**8; uint256 public coinsRemaining = 80 * 10**6 * 10**8; uint256 coinsPerTier = 16 * 10**6 * 10**8; uint256 public coinsLeftInTier = 16 * 10**6 * 10**8; uint256 public minimumCap = 0; uint256 numTiers = 5; uint16 public tierNo; uint256 public preallocCoins; uint256 public purchasedCoins; uint256 public ethRaised; uint256 public personalMax = 10 ether; uint256 public contributors; address public cs; address public multiSig; address public HGT_Reserve; struct csAction { bool passedKYC; bool blocked; }",1,"subgraph cluster_3276_HelloGoldSale {
label=""HelloGoldSale"";
""3276_coinAddress"" [label=""coinAddress""];
""3276_when"" [label=""when""];
""3276_setHgtRates"" [label=""setHgtRates""];
""3276_funding"" [label=""funding""];
""3276_block"" [label=""block""];
""3276_success"" [label=""success""];
""3276_fallback"" [label=""fallback""];
""3276_HelloGoldSale"" [label=""HelloGoldSale""];
""3276_createTokens"" [label=""createTokens""];
""3276_withdraw"" [label=""withdraw""];
""3276_allocatedTokens"" [label=""allocatedTokens""];
""3276_approve"" [label=""approve""];
""3276_setPeriod"" [label=""setPeriod""];
""3276_linkCoin"" [label=""linkCoin""];
""3276_complete"" [label=""complete""];
""3276_newCs"" [label=""newCs""];
""3276_failed"" [label=""failed""];
""3276_unblock"" [label=""unblock""];
""3276_setStart"" [label=""setStart""];
""3276_createTokens"" -> ""3276_funding"";
""3276_allocatedTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_success"";
""3276_allocatedTokens"" -> ""3276_safeAdd"";
""3276_createTokens"" -> ""3276_safeDiv"";
""3276_fallback"" -> ""3276_createTokens"";
""3276_linkCoin"" -> ""3276_onlyOwner"";
""3276_approve"" -> ""3276_MustBeCs"";
""3276_unblock"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_min256"";
""3276_setHgtRates"" -> ""3276_onlyOwner"";
""3276_allocatedTokens"" -> ""3276_onlyOwner"";
""3276_withdraw"" -> ""3276_failed"";
""3276_newCs"" -> ""3276_onlyOwner"";
""3276_setPeriod"" -> ""3276_funding"";
""3276_setStart"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeAdd"";
""3276_fallback"" -> ""3276_whenNotPaused"";
""3276_setPeriod"" -> ""3276_onlyOwner"";
""3276_block"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeMul"";
""3276_fallback"" -> ""3276_MustBeEnabled"";
}
"
0x54d445898cbafb7cf48597e495251183207767ae.sol,FasterProfit,contract FasterProfit { address constant private PROMO = 0xA93c13B3E3561e5e2A1a20239486D03A16d1Fc4b; uint constant public MULTIPLIER = 110; uint constant public MAX_DEPOSIT = 1 ether; uint public currentReceiverIndex = 0; uint public MIN_DEPOSIT = 0.01 ether; uint public txnCount = 0; uint private PROMO_PERCENT = 0; uint constant public LAST_DEPOSIT_PERCENT = 20; LastDeposit public last; struct Deposit { address depositor; uint128 deposit; uint128 expect; },1,"subgraph cluster_598_FasterProfit {
label=""FasterProfit"";
""598_fallback"" [label=""fallback""];
""598_getDepositsCount"" [label=""getDepositsCount""];
""598_getDeposit"" [label=""getDeposit""];
""598_pay"" [label=""pay""];
""598_getDeposits"" [label=""getDeposits""];
""598_getQueueLength"" [label=""getQueueLength""];
""598_fallback"" -> ""598_pay"";
""598_getDeposits"" -> ""598_getDepositsCount"";
}
"
0x3008a6c26e54399fd0ece8fd2e5e06b3d807509c.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_369_AccessService {
label=""AccessService"";
""369_setFinance"" [label=""setFinance""];
""369_withdraw"" [label=""withdraw""];
""369_setService"" [label=""setService""];
}
"
0x5a757fb240ac70dbead4f9e1508f24a91da70ee5.sol,SilentToken,"contract SilentToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 30 * 1 days; uint public round1 = now + 20 * 1 days; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e8; uint public target0drop = 2500; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event DistrRestarted(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1274_SilentToken {
label=""SilentToken"";
""1274_transfer"" [label=""transfer""];
""1274_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1274_fallback"" [label=""fallback""];
""1274_finishDistribution"" [label=""finishDistribution""];
""1274_withdraw"" [label=""withdraw""];
""1274_transferOwnership"" [label=""transferOwnership""];
""1274_getTokens"" [label=""getTokens""];
""1274_reDistribution"" [label=""reDistribution""];
""1274_transferFrom"" [label=""transferFrom""];
""1274_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1274_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1274_approve"" [label=""approve""];
""1274_balanceOf"" [label=""balanceOf""];
""1274_distr"" [label=""distr""];
""1274_constructor"" [label=""constructor""];
""1274_burn"" [label=""burn""];
""1274_Distribute"" [label=""Distribute""];
""1274_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1274_add"" [label=""add""];
""1274_allowance"" [label=""allowance""];
""1274_getTokenBalance"" [label=""getTokenBalance""];
""1274_withdrawAll"" [label=""withdrawAll""];
""1274_getTokens"" -> ""1274_distr"";
""1274_fallback"" -> ""1274_getTokens"";
""1274_finishDistribution"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_canDistr"";
""1274_withdrawAll"" -> ""1274_onlyOwner"";
""1274_add"" -> ""1274_onlyOwner"";
""1274_DistributeAirdropMultiple"" -> ""1274_Distribute"";
""1274_DistributeAirdropMultiple"" -> ""1274_onlyOwner"";
""1274_burn"" -> ""1274_onlyOwner"";
""1274_transferFrom"" -> ""1274_onlyPayloadSize"";
""1274_DistributeAirdrop"" -> ""1274_onlyOwner"";
""1274_transfer"" -> ""1274_onlyPayloadSize"";
""1274_finishDistribution"" -> ""1274_canDistr"";
""1274_reDistribution"" -> ""1274_onlyOwner"";
""1274_DistributeAirdrop"" -> ""1274_Distribute"";
""1274_transferOwnership"" -> ""1274_onlyOwner"";
""1274_withdrawForeignTokens"" -> ""1274_onlyOwner"";
""1274_constructor"" -> ""1274_distr"";
""1274_Distribute"" -> ""1274_onlyOwner"";
""1274_reDistribution"" -> ""1274_canDistr"";
""1274_distr"" -> ""1274_canDistr"";
""1274_withdraw"" -> ""1274_onlyOwner"";
""1274_updateTokensPerEth"" -> ""1274_onlyOwner"";
}
"
0x27369e8f43f44c26853a46da7e6cb52d203b59ce.sol,AgileCycleWithAssistance,contract AgileCycleWithAssistance { using SafeMath for uint; address public operator; address public juryOperator; uint public promisedTokens; uint public raisedEther; bool public tokenReleaseAtStart; address public icoAddress; address public arbitrationAddress; bool public roundFailedToStart; address public projectWallet; address public juryOnlineWallet; struct Milestone { uint etherAmount; uint tokenAmount; uint startTime; uint finishTime; uint duration; string description; string result; },1,"subgraph cluster_3191_AgileCycleWithAssistance {
label=""AgileCycleWithAssistance"";
""3191_addMilestone"" [label=""addMilestone""];
""3191_promisedTokens"" [label=""promisedTokens""];
""3191_editMilestone"" [label=""editMilestone""];
""3191_milestonesLength"" [label=""milestonesLength""];
""3191_investorExists"" [label=""investorExists""];
""3191_addMilestonesAndSeal"" [label=""addMilestonesAndSeal""];
""3191_failSafe"" [label=""failSafe""];
""3191_assignPartition"" [label=""assignPartition""];
""3191_finishedTimeStamp"" [label=""finishedTimeStamp""];
""3191_verdictExecuted"" [label=""verdictExecuted""];
""3191_constructor"" [label=""constructor""];
""3191_offerAccepted"" [label=""offerAccepted""];
""3191_disputeOpened"" [label=""disputeOpened""];
""3191_setToken"" [label=""setToken""];
""3191_payCommission"" [label=""payCommission""];
""3191_finishMilestone"" [label=""finishMilestone""];
""3191_startMilestone"" [label=""startMilestone""];
""3191_withdrawEther"" [label=""withdrawEther""];
""3191_seal"" [label=""seal""];
""3191_approveCycle"" [label=""approveCycle""];
""3191_withdrawToken"" [label=""withdrawToken""];
""3191_sealTimestamp"" [label=""sealTimestamp""];
""3191_currentMilestone"" [label=""currentMilestone""];
""3191_disputeOpened"" -> ""3191_only"";
""3191_seal"" -> ""3191_notSealed"";
""3191_finishMilestone"" -> ""3191_onlyAdmin"";
""3191_setToken"" -> ""3191_onlyAdmin"";
""3191_startMilestone"" -> ""3191_sealed"";
""3191_editMilestone"" -> ""3191_onlyAdmin"";
""3191_addMilestone"" -> ""3191_onlyAdmin"";
""3191_addMilestone"" -> ""3191_notSealed"";
""3191_verdictExecuted"" -> ""3191_only"";
""3191_startMilestone"" -> ""3191_payCommission"";
""3191_offerAccepted"" -> ""3191_only"";
""3191_startMilestone"" -> ""3191_onlyAdmin"";
""3191_addMilestonesAndSeal"" -> ""3191_onlyAdmin"";
""3191_offerAccepted"" -> ""3191_assignPartition"";
""3191_seal"" -> ""3191_onlyAdmin"";
""3191_editMilestone"" -> ""3191_notSealed"";
""3191_addMilestonesAndSeal"" -> ""3191_notSealed"";
}
"
0x889a32263d237872b4f7985ead9c29ebfe8b464d.sol,CaviarToken,"contract CaviarToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function CaviarToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_CaviarToken {
label=""CaviarToken"";
""401_fallback"" [label=""fallback""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_CaviarToken"" [label=""CaviarToken""];
""401_totalSupply"" [label=""totalSupply""];
""401_mintTo"" [label=""mintTo""];
""401_transferFrom"" [label=""transferFrom""];
""401_balanceOf"" [label=""balanceOf""];
""401_transfer"" [label=""transfer""];
""401_killContract"" [label=""killContract""];
""401_approve"" [label=""approve""];
""401_changeOwner"" [label=""changeOwner""];
}
"
0xd64ad4eefaacb96a0865687cfeef4c4a2cfbfef2.sol,Lotthereum,"contract Lotthereum is Mortal, SafeMath { Game[] private games; mapping (address => uint) private balances; struct Game { uint id; uint pointer; uint maxNumberOfBets; uint minAmountByBet; uint prize; uint currentRound; Round[] rounds; }",1,"subgraph cluster_1217_Lotthereum {
label=""Lotthereum"";
""1217_getGames"" [label=""getGames""];
""1217_closeRound"" [label=""closeRound""];
""1217_getRoundBetNumber"" [label=""getRoundBetNumber""];
""1217_getGamePrize"" [label=""getGamePrize""];
""1217_createGame"" [label=""createGame""];
""1217_createGameRound"" [label=""createGameRound""];
""1217_getNumber"" [label=""getNumber""];
""1217_getRoundNumber"" [label=""getRoundNumber""];
""1217_getRoundPointer"" [label=""getRoundPointer""];
""1217_getPointer"" [label=""getPointer""];
""1217_getGameMaxNumberOfBets"" [label=""getGameMaxNumberOfBets""];
""1217_getGameRoundOpen"" [label=""getGameRoundOpen""];
""1217_placeBet"" [label=""placeBet""];
""1217_fallback"" [label=""fallback""];
""1217_getGameCurrentRoundId"" [label=""getGameCurrentRoundId""];
""1217_getRoundNumberOfBets"" [label=""getRoundNumberOfBets""];
""1217_withdraw"" [label=""withdraw""];
""1217_getGameMinAmountByBet"" [label=""getGameMinAmountByBet""];
""1217_getBalance"" [label=""getBalance""];
""1217_getRoundBetOrigin"" [label=""getRoundBetOrigin""];
""1217_getBlockHash"" [label=""getBlockHash""];
""1217_getRoundBetAmount"" [label=""getRoundBetAmount""];
""1217_payout"" [label=""payout""];
""1217_closeRound"" -> ""1217_payout"";
""1217_withdraw"" -> ""1217_getBalance"";
""1217_closeRound"" -> ""1217_getNumber"";
""1217_createGame"" -> ""1217_createGameRound"";
""1217_payout"" -> ""1217_divide"";
""1217_closeRound"" -> ""1217_getBlockHash"";
""1217_placeBet"" -> ""1217_closeRound"";
""1217_closeRound"" -> ""1217_createGameRound"";
""1217_createGame"" -> ""1217_onlyowner"";
""1217_payout"" -> ""1217_add"";
}
"
0xf2eefee3c99cdb30c11d57b487a16690e813309b.sol,SlotMachine,"contract SlotMachine { address public slotMachineFunds; uint256 public coinPrice = 0.1 ether; address owner; event Rolled(address sender, uint rand1, uint rand2, uint rand3); mapping (address => uint) pendingWithdrawals; modifier onlyOwner() { require(owner == msg.sender); _; }",1,"subgraph cluster_359_SlotMachine {
label=""SlotMachine"";
""359_cashout"" [label=""cashout""];
""359_fallback"" [label=""fallback""];
""359_contractBalance"" [label=""contractBalance""];
""359_constructor"" [label=""constructor""];
""359_addEther"" [label=""addEther""];
""359_withdraw"" [label=""withdraw""];
""359_balanceOf"" [label=""balanceOf""];
""359_setCoinPrice"" [label=""setCoinPrice""];
""359_calculatePrize"" [label=""calculatePrize""];
""359_killContract"" [label=""killContract""];
""359_randomGen"" [label=""randomGen""];
""359_oneRoll"" [label=""oneRoll""];
""359_oneRoll"" -> ""359_calculatePrize"";
""359_fallback"" -> ""359_onlyOwner"";
""359_setCoinPrice"" -> ""359_onlyOwner"";
""359_oneRoll"" -> ""359_randomGen"";
""359_killContract"" -> ""359_onlyOwner"";
""359_cashout"" -> ""359_onlyOwner"";
}
"
0x588f4ee97a2085c95420a45684a898d4b5906ba1.sol,SPAM,contract SPAM is ERC20Interface { string public name = ; uint8 public decimals = 18; string public symbol = ; uint256 public stdBalance; mapping (address => uint256) public bonus; address public owner; bool public SPAMed; event Message(string message); function SPAM() public { owner = msg.sender; totalSupply = 9999 * 1e18; stdBalance = 9999 * 1e18; SPAMed = true; },1,"subgraph cluster_316_SPAM {
label=""SPAM"";
""316_rescueTokens"" [label=""rescueTokens""];
""316_UNSPAM"" [label=""UNSPAM""];
""316_approve"" [label=""approve""];
""316_balanceOf"" [label=""balanceOf""];
""316_transferFrom"" [label=""transferFrom""];
""316_fallback"" [label=""fallback""];
""316_allowance"" [label=""allowance""];
""316_SPAM"" [label=""SPAM""];
""316_transfer"" [label=""transfer""];
}
"
0x704079e823e42a936bbaac5163434c2515473836.sol,CONUNDRUM,"contract CONUNDRUM { string public question; address questionSender; bytes32 responseHash; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_CONUNDRUM {
label=""CONUNDRUM"";
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_StopGame"" [label=""StopGame""];
""118_NewQuestion"" [label=""NewQuestion""];
}
"
0x33b44a1d150f3feaa40503ad20a75634adc39b18.sol,TimeCapsule,contract TimeCapsule is Ownable { address public Owner; mapping (address=>uint) public deposits; uint public openDate; function initCapsule(uint open) { Owner = msg.sender; openDate = open; },1,"subgraph cluster_130_TimeCapsule {
label=""TimeCapsule"";
""130_deposit"" [label=""deposit""];
""130_initCapsule"" [label=""initCapsule""];
""130_kill"" [label=""kill""];
""130_withdraw"" [label=""withdraw""];
""130_fallback"" [label=""fallback""];
""130_withdraw"" -> ""130_isOwner"";
""130_kill"" -> ""130_isOwner"";
""130_fallback"" -> ""130_deposit"";
}
"
0xf1add8bf553d0066be17768d6816f3730c476237.sol,EasySmartolution,"contract EasySmartolution { address constant smartolution = 0xe0ae35fe7Df8b86eF08557b535B89bB6cb036C23; event ParticipantAdded(address _sender); event ParticipantRemoved(address _sender); event ReferrerAdded(address _contract, address _sender); mapping (address => address) public participants; mapping (address => bool) public referrers; address private processing; constructor(address _processing) public { processing = _processing; }",1,"subgraph cluster_426_EasySmartolutionRef {
label=""EasySmartolutionRef"";
""426_setReferrer"" [label=""setReferrer""];
""426_constructor"" [label=""constructor""];
""426_setSmartolution"" [label=""setSmartolution""];
""426_fallback"" [label=""fallback""];
}
"
0x0e0a86c97a07856d68bf3387aeb9430dbab93245.sol,InterbetCore,contract InterbetCore { uint constant oddsDecimals = 2; uint constant feeRateDecimals = 1; uint public minMakerBetFund = 100 * 1 finney; uint public maxAllowedTakerBetsPerMakerBet = 100; uint public minAllowedStakeInPercentage = 1; address private owner; mapping(address => bool) private admins; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_2196_InterbetCore {
label=""InterbetCore"";
""2196_isAdmin"" [label=""isAdmin""];
""2196_fallback"" [label=""fallback""];
""2196_addFund"" [label=""addFund""];
""2196_constructor"" [label=""constructor""];
""2196_changeOwner"" [label=""changeOwner""];
""2196_updateOdds"" [label=""updateOdds""];
""2196_makeBet"" [label=""makeBet""];
""2196_getMakerBetDetails"" [label=""getMakerBetDetails""];
""2196_add"" [label=""add""];
""2196_withdraw"" [label=""withdraw""];
""2196_changeMinMakerBetFund"" [label=""changeMinMakerBetFund""];
""2196_payVerifier"" [label=""payVerifier""];
""2196_updateVerifier"" [label=""updateVerifier""];
""2196_sub"" [label=""sub""];
""2196_getMakerBetBasicInfo"" [label=""getMakerBetBasicInfo""];
""2196_getOwner"" [label=""getOwner""];
""2196_takeBet"" [label=""takeBet""];
""2196_payTaker"" [label=""payTaker""];
""2196_removeAdmin"" [label=""removeAdmin""];
""2196_pauseBet"" [label=""pauseBet""];
""2196_payMaker"" [label=""payMaker""];
""2196_closeBet"" [label=""closeBet""];
""2196_getTakerBet"" [label=""getTakerBet""];
""2196_mul"" [label=""mul""];
""2196_getVerifier"" [label=""getVerifier""];
""2196_settleBet"" [label=""settleBet""];
""2196_reopenBet"" [label=""reopenBet""];
""2196_addAdmin"" [label=""addAdmin""];
""2196_changeTakerBetConstraints"" [label=""changeTakerBetConstraints""];
""2196_payMaker"" -> ""2196_sub"";
""2196_payVerifier"" -> ""2196_add"";
""2196_payTaker"" -> ""2196_sub"";
""2196_withdraw"" -> ""2196_payTaker"";
""2196_settleBet"" -> ""2196_payMaker"";
""2196_changeOwner"" -> ""2196_onlyOwner"";
""2196_changeMinMakerBetFund"" -> ""2196_mul"";
""2196_payMaker"" -> ""2196_mul"";
""2196_closeBet"" -> ""2196_add"";
""2196_payVerifier"" -> ""2196_mul"";
""2196_settleBet"" -> ""2196_payVerifier"";
""2196_withdraw"" -> ""2196_payVerifier"";
""2196_changeTakerBetConstraints"" -> ""2196_onlyAdmin"";
""2196_closeBet"" -> ""2196_sub"";
""2196_takeBet"" -> ""2196_sub"";
""2196_removeAdmin"" -> ""2196_onlyOwner"";
""2196_payTaker"" -> ""2196_add"";
""2196_addFund"" -> ""2196_add"";
""2196_changeMinMakerBetFund"" -> ""2196_onlyAdmin"";
""2196_payTaker"" -> ""2196_mul"";
""2196_payMaker"" -> ""2196_add"";
""2196_makeBet"" -> ""2196_sub"";
""2196_addAdmin"" -> ""2196_onlyOwner"";
""2196_withdraw"" -> ""2196_payMaker"";
""2196_takeBet"" -> ""2196_add"";
""2196_takeBet"" -> ""2196_mul"";
}
"
0x6dbb4e882f967432fc0f9200e9ca577c916d8a68.sol,Bussiness,contract Bussiness is Ownable { IERC721 public erc721Address = IERC721(0x06012c8cf97bead5deae237070f9587f8e7a266d); ERC20BasicInterface public usdtToken = ERC20BasicInterface(0xdAC17F958D2ee523a2206206994597C13D831ec7); uint256 public ETHFee = 2; uint256 public HBWALLETFee = 1; uint256 public balance = address(this).balance; constructor() public {},1,"subgraph cluster_687_Bussiness {
label=""Bussiness"";
""687_buyByUsdt"" [label=""buyByUsdt""];
""687_setPrice"" [label=""setPrice""];
""687_getPrice"" [label=""getPrice""];
""687_ownerOf"" [label=""ownerOf""];
""687_constructor"" [label=""constructor""];
""687_resetPrice"" [label=""resetPrice""];
""687_setFee"" [label=""setFee""];
""687_withdraw"" [label=""withdraw""];
""687_setPriceFeeEth"" [label=""setPriceFeeEth""];
""687_removePrice"" [label=""removePrice""];
""687_buy"" [label=""buy""];
""687_buyByUsdt"" -> ""687_resetPrice"";
""687_setFee"" -> ""687_onlyOwner"";
""687_withdraw"" -> ""687_onlyOwner"";
""687_buy"" -> ""687_resetPrice"";
""687_getPrice"" -> ""687_resetPrice"";
""687_removePrice"" -> ""687_resetPrice"";
}
"
0x4ee1d7720a04072142b2efc9d2c7d5d77ad63939.sol,ARXpresale,"contract ARXpresale is owned, safeMath { address public admin = owner; ERC20Interface public tokenReward; address public foundationWallet; address public beneficiaryWallet; uint256 public tokensPerEthPrice; uint256 public amountRaisedInWei; uint256 public fundingMinCapInWei; uint256 public fundingMaxCapInWei; uint256 public fundingRemainingAvailableInEth; string public currentStatus = ; uint256 public fundingStartBlock; uint256 public fundingEndBlock; bool public isPresaleClosed = false; bool public isPresaleSetup = false; event Buy(address indexed _sender, uint256 _eth, uint256 _ARX); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Refund(address indexed _refunder, uint256 _value); event Burn(address _from, uint256 _value); mapping(address => uint256) balances; mapping(address => uint256) fundValue; function ARXpresale() onlyOwner { admin = msg.sender; currentStatus = ; }",1,"subgraph cluster_920_ARXpresale {
label=""ARXpresale"";
""920_beneficiaryMultiSigWithdraw"" [label=""beneficiaryMultiSigWithdraw""];
""920_checkGoalandPrice"" [label=""checkGoalandPrice""];
""920_refund"" [label=""refund""];
""920_fallback"" [label=""fallback""];
""920_updateStatus"" [label=""updateStatus""];
""920_BuyARXtokens"" [label=""BuyARXtokens""];
""920_withdrawRemainingTokens"" [label=""withdrawRemainingTokens""];
""920_ARXpresale"" [label=""ARXpresale""];
""920_Setuppresale"" [label=""Setuppresale""];
""920_setPrice"" [label=""setPrice""];
""920_BuyARXtokens"" -> ""920_setPrice"";
""920_BuyARXtokens"" -> ""920_safeSub"";
""920_Setuppresale"" -> ""920_safeDiv"";
""920_BuyARXtokens"" -> ""920_safeMul"";
""920_BuyARXtokens"" -> ""920_safeAdd"";
""920_checkGoalandPrice"" -> ""920_setPrice"";
""920_Setuppresale"" -> ""920_onlyOwner"";
""920_BuyARXtokens"" -> ""920_safeDiv"";
""920_ARXpresale"" -> ""920_onlyOwner"";
""920_checkGoalandPrice"" -> ""920_onlyOwner"";
""920_fallback"" -> ""920_BuyARXtokens"";
""920_updateStatus"" -> ""920_onlyOwner"";
""920_Setuppresale"" -> ""920_setPrice"";
""920_beneficiaryMultiSigWithdraw"" -> ""920_onlyOwner"";
""920_withdrawRemainingTokens"" -> ""920_onlyOwner"";
}
"
0xa181b8c9f6b43b8252c6c9826cf5feba362b542e.sol,CryptoStamps,"contract CryptoStamps is ERC721 { event stampBirth(uint256 tokenId, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private firstStepLimit = 1.28 ether; mapping (uint256 => address) public stampIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public stampIndexToApproved; mapping (uint256 => uint256) private stampIndexToPrice; mapping(uint256 => uint256) public stampIndextotransactions; uint256 public totaletherstransacted; uint256 public totaltransactions; uint256 public stampCreatedCount; mapping (uint256 => bool) public stampIndextodissolved; mapping (uint256 => address) public dissolvedIndexToApproved; struct Stamp { uint256 birthtime; }",1,"subgraph cluster_1375_CryptoStamps {
label=""CryptoStamps"";
""1375_transferFrom"" [label=""transferFrom""];
""1375_implementsERC721"" [label=""implementsERC721""];
""1375_priceOf"" [label=""priceOf""];
""1375_name"" [label=""name""];
""1375_transfer"" [label=""transfer""];
""1375_symbol"" [label=""symbol""];
""1375_getStamp"" [label=""getStamp""];
""1375_setnumber"" [label=""setnumber""];
""1375_takeOwnership"" [label=""takeOwnership""];
""1375_setcut"" [label=""setcut""];
""1375_setdissolveaddress"" [label=""setdissolveaddress""];
""1375_nextpriceOf"" [label=""nextpriceOf""];
""1375_approve"" [label=""approve""];
""1375_dissolve"" [label=""dissolve""];
""1375_pausecontract"" [label=""pausecontract""];
""1375_controlstampdissolution"" [label=""controlstampdissolution""];
""1375_payout"" [label=""payout""];
""1375_setCOO"" [label=""setCOO""];
""1375_CryptoStamps"" [label=""CryptoStamps""];
""1375__createStamp"" [label=""_createStamp""];
""1375_setCEO"" [label=""setCEO""];
""1375_createStamp"" [label=""createStamp""];
""1375_transferdissolvedFrom"" [label=""transferdissolvedFrom""];
""1375_setdissolvedcontract"" [label=""setdissolvedcontract""];
""1375__owns"" [label=""_owns""];
""1375__transfer"" [label=""_transfer""];
""1375_totalSupply"" [label=""totalSupply""];
""1375_ownerOf"" [label=""ownerOf""];
""1375_unpausecontract"" [label=""unpausecontract""];
""1375_balanceOf"" [label=""balanceOf""];
""1375_purchase"" [label=""purchase""];
""1375_tokensOfOwner"" [label=""tokensOfOwner""];
""1375__addressNotNull"" [label=""_addressNotNull""];
""1375__transferdissolved"" [label=""_transferdissolved""];
""1375__payout"" [label=""_payout""];
""1375_setdissolveprice"" [label=""setdissolveprice""];
""1375__approved"" [label=""_approved""];
""1375_transfer"" -> ""1375__transfer"";
""1375_setdissolveprice"" -> ""1375_onlyCEO"";
""1375_dissolve"" -> ""1375_approve"";
""1375_transferFrom"" -> ""1375__transfer"";
""1375_setcut"" -> ""1375_onlyCEO"";
""1375_transferdissolvedFrom"" -> ""1375__addressNotNull"";
""1375_setdissolveaddress"" -> ""1375_onlyCEO"";
""1375_takeOwnership"" -> ""1375__transfer"";
""1375_takeOwnership"" -> ""1375__addressNotNull"";
""1375_setnumber"" -> ""1375_onlyCEO"";
""1375_tokensOfOwner"" -> ""1375_balanceOf"";
""1375_approve"" -> ""1375__owns"";
""1375_dissolve"" -> ""1375_transfer"";
""1375_purchase"" -> ""1375__transfer"";
""1375_transferdissolvedFrom"" -> ""1375__transferdissolved"";
""1375_tokensOfOwner"" -> ""1375_totalSupply"";
""1375_pausecontract"" -> ""1375_onlyCLevel"";
""1375_controlstampdissolution"" -> ""1375_onlyCEO"";
""1375_setCOO"" -> ""1375_onlyCEO"";
""1375_setdissolvedcontract"" -> ""1375_onlyCEO"";
""1375_transfer"" -> ""1375__owns"";
""1375_unpausecontract"" -> ""1375_onlyCEO"";
""1375_takeOwnership"" -> ""1375__approved"";
""1375_dissolve"" -> ""1375_priceOf"";
""1375_purchase"" -> ""1375__addressNotNull"";
""1375_transferFrom"" -> ""1375__addressNotNull"";
""1375_transferFrom"" -> ""1375__owns"";
""1375_transferdissolvedFrom"" -> ""1375__owns"";
""1375_transferFrom"" -> ""1375__approved"";
""1375_payout"" -> ""1375__payout"";
""1375_createStamp"" -> ""1375__createStamp"";
""1375_createStamp"" -> ""1375_onlyCOO"";
""1375_setCEO"" -> ""1375_onlyCEO"";
""1375__createStamp"" -> ""1375__transfer"";
""1375_payout"" -> ""1375_onlyCLevel"";
""1375_dissolve"" -> ""1375__createStamp"";
""1375_transfer"" -> ""1375__addressNotNull"";
}
"
0x6e776e93291620dac8f3dde4a0b98c42a5359293.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1209_RefundVault {
label=""RefundVault"";
""1209_enableRefunds"" [label=""enableRefunds""];
""1209_RefundVault"" [label=""RefundVault""];
""1209_refund"" [label=""refund""];
""1209_close"" [label=""close""];
""1209_deposit"" [label=""deposit""];
""1209_enableRefunds"" -> ""1209_onlyOwner"";
""1209_close"" -> ""1209_onlyOwner"";
""1209_deposit"" -> ""1209_onlyOwner"";
}
"
0x72ebd62060f78d91dc4bc33e8d88f39307365f87.sol,SEA,"contract SEA { using SafeMath for uint256; string public name; string public symbol; uint256 public decimals; uint256 public totalSupply; address public owner; uint256 public basisPointsRate = 0; uint256 public maximumFee = 0; uint256 public minimumFee = 0; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezes; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed _from, address indexed _to, uint256 _value); event CollectFee(address indexed _from, address indexed _owner, uint256 fee); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Params(address indexed _owner, uint256 feeBasisPoints, uint256 minFee, uint256 maxFee); event Freeze(address indexed to, uint256 value); event Unfreeze(address indexed to, uint256 value); event Withdraw(address indexed to, uint256 value); constructor(uint256 initialSupply, uint8 decimalUnits, string tokenName, string tokenSymbol) public { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; owner = msg.sender; }",1,"subgraph cluster_827_SEA {
label=""SEA"";
""827_calFee"" [label=""calFee""];
""827_withdrawEther"" [label=""withdrawEther""];
""827_transferFrom"" [label=""transferFrom""];
""827_fallback"" [label=""fallback""];
""827_destructor"" [label=""destructor""];
""827_setParams"" [label=""setParams""];
""827_constructor"" [label=""constructor""];
""827_approve"" [label=""approve""];
""827_transfer"" [label=""transfer""];
""827_unfreeze"" [label=""unfreeze""];
""827_freeze"" [label=""freeze""];
""827_transferFrom"" -> ""827_calFee"";
""827_transfer"" -> ""827_calFee"";
}
"
0xd37df7051977462c84d2a89cd78a0a91ff85d645.sol,MultiSigWallet,"contract MultiSigWallet { event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); uint constant public MAX_OWNER_COUNT = 50; mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1004_MultiSigWallet {
label=""MultiSigWallet"";
""1004_getTransactionCount"" [label=""getTransactionCount""];
""1004_replaceOwner"" [label=""replaceOwner""];
""1004_fallback"" [label=""fallback""];
""1004_addTransaction"" [label=""addTransaction""];
""1004_confirmTransaction"" [label=""confirmTransaction""];
""1004_external_call"" [label=""external_call""];
""1004_getTransactionIds"" [label=""getTransactionIds""];
""1004_revokeConfirmation"" [label=""revokeConfirmation""];
""1004_MultiSigWallet"" [label=""MultiSigWallet""];
""1004_getConfirmationCount"" [label=""getConfirmationCount""];
""1004_addOwner"" [label=""addOwner""];
""1004_getConfirmations"" [label=""getConfirmations""];
""1004_getOwners"" [label=""getOwners""];
""1004_executeTransaction"" [label=""executeTransaction""];
""1004_isConfirmed"" [label=""isConfirmed""];
""1004_submitTransaction"" [label=""submitTransaction""];
""1004_removeOwner"" [label=""removeOwner""];
""1004_changeRequirement"" [label=""changeRequirement""];
""1004_executeTransaction"" -> ""1004_external_call"";
""1004_addOwner"" -> ""1004_ownerDoesNotExist"";
""1004_confirmTransaction"" -> ""1004_executeTransaction"";
""1004_addTransaction"" -> ""1004_notNull"";
""1004_removeOwner"" -> ""1004_changeRequirement"";
""1004_replaceOwner"" -> ""1004_ownerDoesNotExist"";
""1004_changeRequirement"" -> ""1004_validRequirement"";
""1004_submitTransaction"" -> ""1004_confirmTransaction"";
""1004_revokeConfirmation"" -> ""1004_notExecuted"";
""1004_executeTransaction"" -> ""1004_notExecuted"";
""1004_MultiSigWallet"" -> ""1004_validRequirement"";
""1004_executeTransaction"" -> ""1004_isConfirmed"";
""1004_executeTransaction"" -> ""1004_ownerExists"";
""1004_confirmTransaction"" -> ""1004_notConfirmed"";
""1004_changeRequirement"" -> ""1004_onlyWallet"";
""1004_executeTransaction"" -> ""1004_confirmed"";
""1004_confirmTransaction"" -> ""1004_transactionExists"";
""1004_removeOwner"" -> ""1004_onlyWallet"";
""1004_revokeConfirmation"" -> ""1004_confirmed"";
""1004_addOwner"" -> ""1004_notNull"";
""1004_revokeConfirmation"" -> ""1004_ownerExists"";
""1004_addOwner"" -> ""1004_validRequirement"";
""1004_confirmTransaction"" -> ""1004_ownerExists"";
""1004_submitTransaction"" -> ""1004_addTransaction"";
""1004_removeOwner"" -> ""1004_ownerExists"";
""1004_addOwner"" -> ""1004_onlyWallet"";
""1004_replaceOwner"" -> ""1004_onlyWallet"";
""1004_replaceOwner"" -> ""1004_ownerExists"";
}
"
0x845bfe096fbe3eabe473edc3953d8af1b19bbbc7.sol,IndTokenPayment,"contract IndTokenPayment is Ownable, ReentrancyGuard { IERC20Token[] public path; address public destinationWallet; uint256 public minConversionRate; IContractRegistry public bancorRegistry; bytes32 public constant BANCOR_NETWORK = ; event conversionSucceded(address from,uint256 fromTokenVal,address dest,uint256 destTokenVal); constructor(IERC20Token[] _path, address destWalletAddr, address bancorRegistryAddr, uint256 minConvRate){ path = _path; bancorRegistry = IContractRegistry(bancorRegistryAddr); destinationWallet = destWalletAddr; minConversionRate = minConvRate; }",1,"subgraph cluster_543_IndTokenPayment {
label=""IndTokenPayment"";
""543_constructor"" [label=""constructor""];
""543_convertToInd"" [label=""convertToInd""];
""543_withdrawToken"" [label=""withdrawToken""];
""543_setConversionPath"" [label=""setConversionPath""];
""543_withdrawEther"" [label=""withdrawEther""];
""543_getBancorContractAddress"" [label=""getBancorContractAddress""];
""543_fallback"" [label=""fallback""];
""543_setBancorRegistry"" [label=""setBancorRegistry""];
""543_setDestinationWallet"" [label=""setDestinationWallet""];
""543_setMinConversionRate"" [label=""setMinConversionRate""];
""543_withdrawEther"" -> ""543_onlyOwner"";
""543_fallback"" -> ""543_convertToInd"";
""543_setMinConversionRate"" -> ""543_onlyOwner"";
""543_setDestinationWallet"" -> ""543_onlyOwner"";
""543_setConversionPath"" -> ""543_onlyOwner"";
""543_convertToInd"" -> ""543_nonReentrant"";
""543_withdrawToken"" -> ""543_onlyOwner"";
""543_setBancorRegistry"" -> ""543_onlyOwner"";
""543_withdrawToken"" -> ""543_nonReentrant"";
""543_withdrawEther"" -> ""543_nonReentrant"";
}
"
0x1d9be4a5681374c54b1821d0beac3a678ad128a4.sol,StorageController,"contract StorageController is SafeMath, CreatorEnabled, StringMover { Storage public stor; IMNTP public mntpToken; IGold public goldToken; IGoldIssueBurnFee public goldIssueBurnFee; address public managerAddress = 0x0; event TokenBuyRequest(address _from, string _userId, uint _reference, uint _amount, uint indexed _index); event TokenSellRequest(address _from, string _userId, uint _reference, uint _amount, uint indexed _index); event RequestCancelled(uint indexed _index); event RequestProcessed(uint indexed _index); event RequestFailed(uint indexed _index); modifier onlyManagerOrCreator() { require(msg.sender == managerAddress || msg.sender == creator); _; }",1,"subgraph cluster_2767_StorageController {
label=""StorageController"";
""2767_isHotWallet"" [label=""isHotWallet""];
""2767_processRequest"" [label=""processRequest""];
""2767_getDocCount"" [label=""getDocCount""];
""2767_getRequestBaseInfo"" [label=""getRequestBaseInfo""];
""2767_addSellTokensRequest"" [label=""addSellTokensRequest""];
""2767_processSellRequest"" [label=""processSellRequest""];
""2767_fallback"" [label=""fallback""];
""2767_setHotWalletAddress"" [label=""setHotWalletAddress""];
""2767_getRequest"" [label=""getRequest""];
""2767_addGoldTransaction"" [label=""addGoldTransaction""];
""2767_cancelRequest"" [label=""cancelRequest""];
""2767_changeGoldIssueBurnFeeContract"" [label=""changeGoldIssueBurnFeeContract""];
""2767_getAllGoldTransactionsCount"" [label=""getAllGoldTransactionsCount""];
""2767_StorageController"" [label=""StorageController""];
""2767_getHotWalletAddress"" [label=""getHotWalletAddress""];
""2767_processBuyRequestFiat"" [label=""processBuyRequestFiat""];
""2767_processBuyRequest"" [label=""processBuyRequest""];
""2767_getUserHotGoldBalance"" [label=""getUserHotGoldBalance""];
""2767_transferGoldFromHotWallet"" [label=""transferGoldFromHotWallet""];
""2767_getRequestsCount"" [label=""getRequestsCount""];
""2767_issueGoldTokens"" [label=""issueGoldTokens""];
""2767_setManagerAddress"" [label=""setManagerAddress""];
""2767_withdrawEth"" [label=""withdrawEth""];
""2767_getDoc"" [label=""getDoc""];
""2767_processSellRequestFiat"" [label=""processSellRequestFiat""];
""2767_addBuyTokensRequest"" [label=""addBuyTokensRequest""];
""2767_getGoldTransaction"" [label=""getGoldTransaction""];
""2767_processInternalRequest"" [label=""processInternalRequest""];
""2767_addDoc"" [label=""addDoc""];
""2767_getGoldTransactionsCount"" [label=""getGoldTransactionsCount""];
""2767_burnGoldTokens"" [label=""burnGoldTokens""];
""2767_withdrawTokens"" [label=""withdrawTokens""];
""2767_changeController"" [label=""changeController""];
""2767_processInternalRequest"" -> ""2767_getHotWalletAddress"";
""2767_transferGoldFromHotWallet"" -> ""2767_getUserHotGoldBalance"";
""2767_processSellRequest"" -> ""2767_issueGoldTokens"";
""2767_processInternalRequest"" -> ""2767_processBuyRequest"";
""2767_changeGoldIssueBurnFeeContract"" -> ""2767_onlyCreator"";
""2767_addGoldTransaction"" -> ""2767_onlyManagerOrCreator"";
""2767_processSellRequestFiat"" -> ""2767_getRequest"";
""2767_processSellRequest"" -> ""2767_safeSub"";
""2767_processSellRequestFiat"" -> ""2767_safeSub"";
""2767_transferGoldFromHotWallet"" -> ""2767_addGoldTransaction"";
""2767_withdrawEth"" -> ""2767_onlyManagerOrCreator"";
""2767_processBuyRequest"" -> ""2767_addGoldTransaction"";
""2767_processSellRequestFiat"" -> ""2767_onlyManagerOrCreator"";
""2767_processRequest"" -> ""2767_onlyManagerOrCreator"";
""2767_processRequest"" -> ""2767_processBuyRequest"";
""2767_transferGoldFromHotWallet"" -> ""2767_getHotWalletAddress"";
""2767_processRequest"" -> ""2767_getRequest"";
""2767_processInternalRequest"" -> ""2767_processSellRequest"";
""2767_addSellTokensRequest"" -> ""2767_burnGoldTokens"";
""2767_getRequest"" -> ""2767_bytes32ToString"";
""2767_transferGoldFromHotWallet"" -> ""2767_onlyManagerOrCreator"";
""2767_processBuyRequest"" -> ""2767_safeDiv"";
""2767_processSellRequest"" -> ""2767_isHotWallet"";
""2767_withdrawTokens"" -> ""2767_issueGoldTokens"";
""2767_setHotWalletAddress"" -> ""2767_onlyCreator"";
""2767_processBuyRequestFiat"" -> ""2767_onlyManagerOrCreator"";
""2767_cancelRequest"" -> ""2767_getRequest"";
""2767_processSellRequest"" -> ""2767_addGoldTransaction"";
""2767_addDoc"" -> ""2767_onlyManagerOrCreator"";
""2767_processRequest"" -> ""2767_processSellRequest"";
""2767_processBuyRequestFiat"" -> ""2767_processBuyRequest"";
""2767_isHotWallet"" -> ""2767_getHotWalletAddress"";
""2767_setManagerAddress"" -> ""2767_onlyCreator"";
""2767_processInternalRequest"" -> ""2767_onlyManagerOrCreator"";
""2767_withdrawTokens"" -> ""2767_onlyManagerOrCreator"";
""2767_processBuyRequest"" -> ""2767_isHotWallet"";
""2767_processBuyRequest"" -> ""2767_safeSub"";
""2767_processRequest"" -> ""2767_getRequestsCount"";
""2767_processSellRequest"" -> ""2767_safeMul"";
""2767_processSellRequestFiat"" -> ""2767_getRequestsCount"";
""2767_getDoc"" -> ""2767_bytes64ToString"";
""2767_processBuyRequest"" -> ""2767_issueGoldTokens"";
""2767_cancelRequest"" -> ""2767_onlyManagerOrCreator"";
""2767_withdrawTokens"" -> ""2767_burnGoldTokens"";
""2767_changeController"" -> ""2767_onlyCreator"";
}
"
0x86c6a7ee4ec24d25456580d81f7e8f486186ec91.sol,Coin,"contract Coin { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public _totalSupply = 0; uint256 public _maxSupply = 33000000000000000000000; uint256 public price = 2000; bool private workingState = true; bool private transferAllowed = true; bool private generationState = true; address public owner; address private cur_coin; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) private etherClients; event FundsGot(address indexed _sender, uint256 _value); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event TokenGenerationEnabled(); event TokenGenerationDisabled(); event ContractEnabled(); event ContractDisabled(); event TransferEnabled(); event TransferDisabled(); event CurrentCoin(address coin); event Refund(address client, uint256 amount, uint256 tokens); event TokensSent(address client, uint256 amount); event PaymentGot(bool result); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_851_Coin {
label=""Coin"";
""851_refund"" [label=""refund""];
""851_allowance"" [label=""allowance""];
""851_kill"" [label=""kill""];
""851_disableGeneration"" [label=""disableGeneration""];
""851_fallback"" [label=""fallback""];
""851_transfer"" [label=""transfer""];
""851_tokenGenerationState"" [label=""tokenGenerationState""];
""851_transferFrom"" [label=""transferFrom""];
""851_setCurrentCoin"" [label=""setCurrentCoin""];
""851_balanceOf"" [label=""balanceOf""];
""851_contractState"" [label=""contractState""];
""851_approve"" [label=""approve""];
""851_enableContract"" [label=""enableContract""];
""851_disableTransfer"" [label=""disableTransfer""];
""851_Coin"" [label=""Coin""];
""851_totalSupply"" [label=""totalSupply""];
""851_generateTokens"" [label=""generateTokens""];
""851_transferState"" [label=""transferState""];
""851_setPrice"" [label=""setPrice""];
""851_disableContract"" [label=""disableContract""];
""851_enableGeneration"" [label=""enableGeneration""];
""851_setMaxSupply"" [label=""setMaxSupply""];
""851_enableTransfer"" [label=""enableTransfer""];
""851_Coin"" -> ""851_enableContract"";
""851_balanceOf"" -> ""851_workingFlag"";
""851_setMaxSupply"" -> ""851_onlyOwner"";
""851_enableContract"" -> ""851_onlyOwner"";
""851_disableContract"" -> ""851_onlyOwner"";
""851_setCurrentCoin"" -> ""851_workingFlag"";
""851_refund"" -> ""851_ownerAndCoin"";
""851_generateTokens"" -> ""851_ownerAndCoin"";
""851_enableTransfer"" -> ""851_onlyOwner"";
""851_transferFrom"" -> ""851_workingFlag"";
""851_disableTransfer"" -> ""851_onlyOwner"";
""851_setPrice"" -> ""851_onlyOwner"";
""851_setCurrentCoin"" -> ""851_onlyOwner"";
""851_refund"" -> ""851_workingFlag"";
""851_disableGeneration"" -> ""851_onlyOwner"";
""851_generateTokens"" -> ""851_workingFlag"";
""851_totalSupply"" -> ""851_workingFlag"";
""851_enableGeneration"" -> ""851_onlyOwner"";
""851_transfer"" -> ""851_workingFlag"";
""851_generateTokens"" -> ""851_transferFrom"";
""851_fallback"" -> ""851_workingFlag"";
""851_kill"" -> ""851_onlyOwner"";
}
"
0xdb09aba26e7a54f95951defc0a56b7f11a5ef023.sol,Presale,"contract Presale is Haltable { using SafeMath for uint256; Token public token; uint256 constant public startTime = 1511892000; uint256 constant public endTime = 1513641600; uint256 constant public tokenCap = uint256(8*1e6*1e8); address public withdrawAddress; uint256 public default_rate = 2500000; uint256 public weiRaised; uint256 public tokenSold; bool public initiated = false; bool public finalized = false; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); mapping (address => uint256) purchasedTokens; mapping (address => uint256) receivedFunds; enum State{Unknown, Prepairing, PreFunding, Funding, Success, Failure, Finalized, Refunding}",1,"subgraph cluster_1264_Presale {
label=""Presale"";
""1264_manualWithdrawal"" [label=""manualWithdrawal""];
""1264_rate"" [label=""rate""];
""1264_getReceivedFunds"" [label=""getReceivedFunds""];
""1264_fallback"" [label=""fallback""];
""1264_finalize"" [label=""finalize""];
""1264_emergencyTokenWithdrawal"" [label=""emergencyTokenWithdrawal""];
""1264_initiate"" [label=""initiate""];
""1264_claim"" [label=""claim""];
""1264_claimTokens"" [label=""claimTokens""];
""1264_validPurchase"" [label=""validPurchase""];
""1264_buyTokens"" [label=""buyTokens""];
""1264_refund"" [label=""refund""];
""1264_Presale"" [label=""Presale""];
""1264_delegatedRefund"" [label=""delegatedRefund""];
""1264_withdraw"" [label=""withdraw""];
""1264_getState"" [label=""getState""];
""1264_getPurchasedTokens"" [label=""getPurchasedTokens""];
""1264_emergencyWithdrawal"" [label=""emergencyWithdrawal""];
""1264_emergencyWithdrawal"" -> ""1264_onlyInEmergency"";
""1264_initiate"" -> ""1264_onlyOwner"";
""1264_emergencyWithdrawal"" -> ""1264_onlyOwner"";
""1264_refund"" -> ""1264_inState"";
""1264_claim"" -> ""1264_claimTokens"";
""1264_withdraw"" -> ""1264_onlyOwner"";
""1264_manualWithdrawal"" -> ""1264_inState"";
""1264_delegatedRefund"" -> ""1264_inState"";
""1264_manualWithdrawal"" -> ""1264_stopInEmergency"";
""1264_withdraw"" -> ""1264_stopInEmergency"";
""1264_withdraw"" -> ""1264_inState"";
""1264_claimTokens"" -> ""1264_stopInEmergency"";
""1264_manualWithdrawal"" -> ""1264_onlyOwner"";
""1264_emergencyTokenWithdrawal"" -> ""1264_onlyOwner"";
""1264_refund"" -> ""1264_delegatedRefund"";
""1264_buyTokens"" -> ""1264_validPurchase"";
""1264_refund"" -> ""1264_stopInEmergency"";
""1264_buyTokens"" -> ""1264_rate"";
""1264_emergencyTokenWithdrawal"" -> ""1264_onlyInEmergency"";
""1264_fallback"" -> ""1264_stopInEmergency"";
""1264_finalize"" -> ""1264_inState"";
""1264_finalize"" -> ""1264_onlyOwner"";
""1264_delegatedRefund"" -> ""1264_stopInEmergency"";
""1264_finalize"" -> ""1264_stopInEmergency"";
""1264_claimTokens"" -> ""1264_inState"";
""1264_fallback"" -> ""1264_buyTokens"";
""1264_buyTokens"" -> ""1264_inState"";
""1264_claim"" -> ""1264_stopInEmergency"";
""1264_claim"" -> ""1264_inState"";
""1264_buyTokens"" -> ""1264_stopInEmergency"";
}
"
0x46d1ebf7bb93044e078e0496e4661ec772607d9d.sol,TTCSale,"contract TTCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 30000; bool private rentrancy_lock = false; TTCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1578_TTCSale {
label=""TTCSale"";
""1578_checkFundingGoal"" [label=""checkFundingGoal""];
""1578_changeEndTime"" [label=""changeEndTime""];
""1578_checkFundingCap"" [label=""checkFundingCap""];
""1578_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1578_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1578_changeStartTime"" [label=""changeStartTime""];
""1578_terminate"" [label=""terminate""];
""1578_convertToMiniTtc"" [label=""convertToMiniTtc""];
""1578_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1578_currentTime"" [label=""currentTime""];
""1578_safeWithdrawal"" [label=""safeWithdrawal""];
""1578_TTCSale"" [label=""TTCSale""];
""1578_fallback"" [label=""fallback""];
""1578_setRate"" [label=""setRate""];
""1578_terminate"" -> ""1578_onlyOwner"";
""1578_fallback"" -> ""1578_checkFundingCap"";
""1578_ownerAllocateTokens"" -> ""1578_nonReentrant"";
""1578_ownerSafeWithdrawal"" -> ""1578_nonReentrant"";
""1578_ownerUnlockFund"" -> ""1578_afterDeadline"";
""1578_ownerAllocateTokens"" -> ""1578_onlyOwner"";
""1578_fallback"" -> ""1578_checkFundingGoal"";
""1578_fallback"" -> ""1578_afterStartTime"";
""1578_fallback"" -> ""1578_beforeDeadline"";
""1578_fallback"" -> ""1578_nonReentrant"";
""1578_ownerAllocateTokens"" -> ""1578_checkFundingCap"";
""1578_safeWithdrawal"" -> ""1578_nonReentrant"";
""1578_changeStartTime"" -> ""1578_onlyOwner"";
""1578_fallback"" -> ""1578_whenNotPaused"";
""1578_fallback"" -> ""1578_saleNotClosed"";
""1578_ownerAllocateTokens"" -> ""1578_checkFundingGoal"";
""1578_TTCSale"" -> ""1578_setRate"";
""1578_safeWithdrawal"" -> ""1578_afterDeadline"";
""1578_ownerUnlockFund"" -> ""1578_onlyOwner"";
""1578_changeEndTime"" -> ""1578_onlyOwner"";
""1578_ownerSafeWithdrawal"" -> ""1578_onlyOwner"";
""1578_setRate"" -> ""1578_onlyOwner"";
}
"
0x533ec971484b1014215422010978e892eacac430.sol,MortifyAsset,"contract MortifyAsset is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 100 * 1 days; uint public round2 = now + 95 * 1 days; uint public round1 = now + 70 * 1 days; uint256 public totalSupply = 25000000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000000000e18; uint public target0drop = 1; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_MortifyAsset {
label=""MortifyAsset"";
""1253_withdraw"" [label=""withdraw""];
""1253_transfer"" [label=""transfer""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" [label=""getTokens""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_constructor"" [label=""constructor""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_Distribute"" [label=""Distribute""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_add"" [label=""add""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_approve"" [label=""approve""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_distr"" [label=""distr""];
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_constructor"" -> ""1253_distr"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_distr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
}
"
0x93143d3e34a50aebab466368c3455fd858f77ad3.sol,FourOutOfFive,contract FourOutOfFive { struct GroupData { uint groupId; address[] participants; uint timestamp; uint betSize; uint rewardSize; uint8 rewardsAvailable; address[] rewardedParticipants; bool completed; },1,"subgraph cluster_670_FourOutOfFive {
label=""FourOutOfFive"";
""670__getContactOwnerBalance"" [label=""_getContactOwnerBalance""];
""670_withdrawOwnerMaxPossibleSafe"" [label=""withdrawOwnerMaxPossibleSafe""];
""670_placeBet"" [label=""placeBet""];
""670__getGroupRewardSize"" [label=""_getGroupRewardSize""];
""670_setMaxAndMinBet"" [label=""setMaxAndMinBet""];
""670__getGroupParticipants"" [label=""_getGroupParticipants""];
""670__getGroupIds"" [label=""_getGroupIds""];
""670_constructor"" [label=""constructor""];
""670__getGroupComplete"" [label=""_getGroupComplete""];
""670__getMaxWithdraw"" [label=""_getMaxWithdraw""];
""670__getGroupRewardedParticipants"" [label=""_getGroupRewardedParticipants""];
""670__getContactBalance"" [label=""_getContactBalance""];
""670_claimReward"" [label=""claimReward""];
""670__getMaxPossibleWithdraw"" [label=""_getMaxPossibleWithdraw""];
""670__getGroupRewardsAvailable"" [label=""_getGroupRewardsAvailable""];
""670_constructor"" -> ""670_setMaxAndMinBet"";
""670_withdrawOwnerMaxPossibleSafe"" -> ""670_onlyOwner"";
""670_setMaxAndMinBet"" -> ""670_onlyOwner"";
}
"
0xd64e5b228561225b437dc38b81891c15fe98cfee.sol,NYXAccount,"contract NYXAccount { bytes32 emergencyHash; address authority; address public owner; bytes32 resqueHash; bytes32 keywordHash; bytes32[10] photoHashes; uint resqueRequestTime; uint authorityRequestTime; uint lastExpenseTime; bool public lastChanceEnabled = false; bool lastChanceUseResqueAccountAddress = true; event NYXDecentralizedIdentificationRequest(string swarmLinkPhoto, string swarmLinkVideo); enum Stages { Normal, ResqueRequested, AuthorityRequested }",1,"subgraph cluster_412_NYXAccount {
label=""NYXAccount"";
""412_fallback"" [label=""fallback""];
""412_transferByOwner"" [label=""transferByOwner""];
""412_NYXAccount"" [label=""NYXAccount""];
""412_withdrawByEmergency"" [label=""withdrawByEmergency""];
""412_lastChance"" [label=""lastChance""];
""412_toggleLastChance"" [label=""toggleLastChance""];
""412_withdrawByResque"" [label=""withdrawByResque""];
""412_setEmergencyAccount"" [label=""setEmergencyAccount""];
""412_toggleLastChance"" -> ""412_onlyByOwner"";
""412_withdrawByResque"" -> ""412_onlyByResque"";
""412_withdrawByEmergency"" -> ""412_onlyByEmergency"";
""412_transferByOwner"" -> ""412_onlyByOwner"";
""412_setEmergencyAccount"" -> ""412_onlyByAuthority"";
}
"
0x5a8658de344972fc8b6b6a01cd87a64bc7420a38.sol,EPXCrowdsale,"contract EPXCrowdsale is owned, safeMath { address public admin = owner; StandardToken public tokenReward; uint256 private initialTokenSupply; uint256 private tokensRemaining; address private beneficiaryWallet; uint256 public amountRaisedInWei; uint256 public fundingMinCapInWei; string public CurrentStatus = ; uint256 public fundingStartBlock; uint256 public fundingEndBlock; bool public isCrowdSaleClosed = false; bool private areFundsReleasedToBeneficiary = false; bool public isCrowdSaleSetup = false; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Buy(address indexed _sender, uint256 _eth, uint256 _EPX); event Refund(address indexed _refunder, uint256 _value); event Burn(address _from, uint256 _value); mapping(address => uint256) balancesArray; mapping(address => uint256) usersEPXfundValue; function EPXCrowdsale() public onlyOwner { admin = msg.sender; CurrentStatus = ; }",1,"subgraph cluster_792_EPXCrowdsale {
label=""EPXCrowdsale"";
""792_checkGoalReached"" [label=""checkGoalReached""];
""792_beneficiaryMultiSigWithdraw"" [label=""beneficiaryMultiSigWithdraw""];
""792_fallback"" [label=""fallback""];
""792_refund"" [label=""refund""];
""792_SetupCrowdsale"" [label=""SetupCrowdsale""];
""792_initialEPXSupply"" [label=""initialEPXSupply""];
""792_checkPrice"" [label=""checkPrice""];
""792_EPXCrowdsale"" [label=""EPXCrowdsale""];
""792_remainingEPXSupply"" [label=""remainingEPXSupply""];
""792_remainingEPXSupply"" -> ""792_safeDiv"";
""792_fallback"" -> ""792_safeSub"";
""792_EPXCrowdsale"" -> ""792_onlyOwner"";
""792_checkGoalReached"" -> ""792_onlyOwner"";
""792_fallback"" -> ""792_safeMul"";
""792_initialEPXSupply"" -> ""792_safeDiv"";
""792_fallback"" -> ""792_checkPrice"";
""792_fallback"" -> ""792_safeAdd"";
""792_beneficiaryMultiSigWithdraw"" -> ""792_onlyOwner"";
""792_SetupCrowdsale"" -> ""792_onlyOwner"";
}
"
0x45afe0ff6a92bc9f346fc440a9d2a881d42094ff.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_1042_Destructible {
label=""Destructible"";
""1042_Destructible"" [label=""Destructible""];
""1042_destroy"" [label=""destroy""];
""1042_destroyAndSend"" [label=""destroyAndSend""];
""1042_destroy"" -> ""1042_onlyOwner"";
""1042_destroyAndSend"" -> ""1042_onlyOwner"";
}
"
0x4c747b6ac42118186d83dac6a2e3994284711334.sol,Allfa_QUiZ,contract Allfa_QUiZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Allfa_QUiZ {
label=""Allfa_QUiZ"";
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x7fceafdefc16b0f703a43ffb0451ddd2a7cbd6dc.sol,alfa_Quiz,contract alfa_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_147_alfa_Quiz {
label=""alfa_Quiz"";
""147_Start"" [label=""Start""];
""147_Try"" [label=""Try""];
""147_Stop"" [label=""Stop""];
""147_fallback"" [label=""fallback""];
""147_constructor"" [label=""constructor""];
""147_New"" [label=""New""];
""147_New"" -> ""147_isAdmin"";
""147_Start"" -> ""147_isAdmin"";
""147_Stop"" -> ""147_isAdmin"";
}
"
0x791af5fcb5198c9f469d66b934864dab43d7f044.sol,Verus,"contract Verus is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 1000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 200000e18; uint public target0drop = 5000; uint public progress0drop = 0; address multisig = 0xCC1967c9EF99848803bc744e881eF84F59CE2b34 ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Verus {
label=""Verus"";
""1261_add"" [label=""add""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_burn"" [label=""burn""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_constructor"" [label=""constructor""];
""1261_getTokens"" [label=""getTokens""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_approve"" [label=""approve""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_fallback"" [label=""fallback""];
""1261_withdraw"" [label=""withdraw""];
""1261_allowance"" [label=""allowance""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_distr"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_fallback"" -> ""1261_getTokens"";
}
"
0x402cd1fa4ba4296f5503d1e86214b77ec7cfe840.sol,Crowdsale,"contract Crowdsale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; uint public starttime; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); function Crowdsale( address ifSuccessfulSendTo, uint fundingGoalInEthers, uint durationInMinutes, uint weiCostOfEachToken, address addressOfTokenUsedAsReward ) public { beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; deadline = now + durationInMinutes * 1 minutes; price = weiCostOfEachToken; tokenReward = token(addressOfTokenUsedAsReward); starttime = now; }",1,"subgraph cluster_360_Crowdsale {
label=""Crowdsale"";
""360_fallback"" [label=""fallback""];
""360_Crowdsale"" [label=""Crowdsale""];
""360_checkGoalReached"" [label=""checkGoalReached""];
""360_safeWithdrawal"" [label=""safeWithdrawal""];
""360_safeWithdrawal"" -> ""360_afterDeadline"";
""360_checkGoalReached"" -> ""360_afterDeadline"";
}
"
0xeb0335a35d10cab0c0d615d999d657a50cfd44f0.sol,asssderf,"contract asssderf { event Hodl(address indexed hodler, uint indexed amount); event Party(address indexed hodler, uint indexed amount); mapping (address => uint) public hodlers; uint constant partyTime = 1546508000; function() payable { hodlers[msg.sender] += msg.value; Hodl(msg.sender, msg.value); if (msg.value == 0) { require (block.timestamp > partyTime && hodlers[msg.sender] > 0); uint value = hodlers[msg.sender]; hodlers[msg.sender] = 0; msg.sender.transfer(value); Party(msg.sender, value); }",1,"subgraph cluster_88_asssderf {
label=""asssderf"";
""88_fallback"" [label=""fallback""];
}
"
0xf11e1de7d9876a10b0742da19232f42456ead843.sol,DXEACoin,"contract DXEACoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 13 * 1 days; uint public round2 = now + 8 * 1 days; uint public round1 = now + 19 * 1 days; uint256 public totalSupply = 15000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 15500000e8; uint public target0drop = 30000; uint public progress0drop = 0; address multisig = 0x24aD8dC3119672F5a50C2ed25Fd4708FEe589281; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1446_DXEACoin {
label=""DXEACoin"";
""1446_transferFrom"" [label=""transferFrom""];
""1446_getTokenBalance"" [label=""getTokenBalance""];
""1446_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1446_approve"" [label=""approve""];
""1446_finishDistribution"" [label=""finishDistribution""];
""1446_withdrawAll"" [label=""withdrawAll""];
""1446_burn"" [label=""burn""];
""1446_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1446_transferOwnership"" [label=""transferOwnership""];
""1446_distr"" [label=""distr""];
""1446_withdraw"" [label=""withdraw""];
""1446_transfer"" [label=""transfer""];
""1446_constructor"" [label=""constructor""];
""1446_getTokens"" [label=""getTokens""];
""1446_allowance"" [label=""allowance""];
""1446_add"" [label=""add""];
""1446_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1446_Distribute"" [label=""Distribute""];
""1446_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1446_balanceOf"" [label=""balanceOf""];
""1446_fallback"" [label=""fallback""];
""1446_DistributeAirdropMultiple"" -> ""1446_onlyOwner"";
""1446_Distribute"" -> ""1446_onlyOwner"";
""1446_finishDistribution"" -> ""1446_onlyOwner"";
""1446_getTokens"" -> ""1446_distr"";
""1446_withdrawAll"" -> ""1446_onlyOwner"";
""1446_withdraw"" -> ""1446_onlyOwner"";
""1446_distr"" -> ""1446_canDistr"";
""1446_DistributeAirdrop"" -> ""1446_Distribute"";
""1446_burn"" -> ""1446_onlyOwner"";
""1446_DistributeAirdropMultiple"" -> ""1446_Distribute"";
""1446_transferOwnership"" -> ""1446_onlyOwner"";
""1446_fallback"" -> ""1446_getTokens"";
""1446_updateTokensPerEth"" -> ""1446_onlyOwner"";
""1446_withdrawForeignTokens"" -> ""1446_onlyOwner"";
""1446_transferFrom"" -> ""1446_onlyPayloadSize"";
""1446_constructor"" -> ""1446_distr"";
""1446_transfer"" -> ""1446_onlyPayloadSize"";
""1446_getTokens"" -> ""1446_canDistr"";
""1446_add"" -> ""1446_onlyOwner"";
""1446_finishDistribution"" -> ""1446_canDistr"";
""1446_DistributeAirdrop"" -> ""1446_onlyOwner"";
}
"
0x2f5c8d7259b48078c0b6c0a7cf6269e3817680e5.sol,Refund,contract Refund is Ownable{ using SafeMath for uint256; tokenInterface public xcc; mapping (address => uint256) public refunds; constructor(address _xcc) public { xcc = tokenInterface(_xcc); },1,"subgraph cluster_383_Refund {
label=""Refund"";
""383_constructor"" [label=""constructor""];
""383_withdraw"" [label=""withdraw""];
""383_withdrawTokens"" [label=""withdrawTokens""];
""383_cancelRefund"" [label=""cancelRefund""];
""383_fallback"" [label=""fallback""];
""383_setRefund"" [label=""setRefund""];
""383_withdraw"" -> ""383_onlyOwner"";
""383_withdrawTokens"" -> ""383_onlyOwner"";
""383_cancelRefund"" -> ""383_onlyOwner"";
""383_setRefund"" -> ""383_onlyOwner"";
}
"
0xf1171e1e8df34ab97832342c7cbf04d9121a1ac3.sol,CSportsAuth,contract CSportsAuth is CSportsConstants { event ContractUpgrade(address newContract); address public ceoAddress; address public cfoAddress; address public cooAddress; address public commissionerAddress; bool public paused = false; bool public isDevelopment = true; modifier onlyUnderDevelopment() { require(isDevelopment == true); _; },1,"subgraph cluster_344_CSportsAuth {
label=""CSportsAuth"";
""344_withdrawBalance"" [label=""withdrawBalance""];
""344_setCOO"" [label=""setCOO""];
""344_unpause"" [label=""unpause""];
""344_setCommissioner"" [label=""setCommissioner""];
""344_setCEO"" [label=""setCEO""];
""344_pause"" [label=""pause""];
""344_setCLevelAddresses"" [label=""setCLevelAddresses""];
""344_setCFO"" [label=""setCFO""];
""344_setProduction"" [label=""setProduction""];
""344_unpause"" -> ""344_onlyCEO"";
""344_setCOO"" -> ""344_onlyCEO"";
""344_withdrawBalance"" -> ""344_onlyCFO"";
""344_unpause"" -> ""344_whenPaused"";
""344_pause"" -> ""344_whenNotPaused"";
""344_setProduction"" -> ""344_onlyCEO"";
""344_pause"" -> ""344_onlyCLevel"";
""344_setCommissioner"" -> ""344_onlyCEO"";
""344_setProduction"" -> ""344_onlyUnderDevelopment"";
""344_setCFO"" -> ""344_onlyCEO"";
""344_setCEO"" -> ""344_onlyCEO"";
""344_setCLevelAddresses"" -> ""344_onlyCEO"";
}
"
0x264979ffd35d608e69b69681f4bbcba9877e6c4a.sol,qz_game,contract qz_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_127_qz_game {
label=""qz_game"";
""127_StopGame"" [label=""StopGame""];
""127_fallback"" [label=""fallback""];
""127_newQuestioner"" [label=""newQuestioner""];
""127_start_qz_game"" [label=""start_qz_game""];
""127_NewQuestion"" [label=""NewQuestion""];
""127_Try"" [label=""Try""];
""127_newQuestioner"" -> ""127_onlyQuestionSender"";
""127_StopGame"" -> ""127_onlyQuestionSender"";
""127_NewQuestion"" -> ""127_onlyQuestionSender"";
}
"
0x26b5bf54e03bb6d42c27ef4364f72a2bf1eff3d2.sol,CryptoBeauty,"contract CryptoBeauty is AccessControl, ERC721 { event Creation(uint256 tokenId, string name, address owner); event Purchase(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address owner, uint256 charityId); event PriceChange(uint256 tokenId, uint256 price); event Charity(uint256 charityId, address charity); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.005 ether; uint256 private increaseLimit1 = 0.5 ether; uint256 private increaseLimit2 = 50.0 ether; uint256 private increaseLimit3 = 100.0 ether; bool charityEnabled; struct Beauty { string name; uint256 price; uint256 maxPrice; }",1,"subgraph cluster_1100_CryptoBeauty {
label=""CryptoBeauty"";
""1100_balanceOf"" [label=""balanceOf""];
""1100_implementsERC721"" [label=""implementsERC721""];
""1100_CryptoBeauty"" [label=""CryptoBeauty""];
""1100_purchase"" [label=""purchase""];
""1100_newBeauty"" [label=""newBeauty""];
""1100_disableCharity"" [label=""disableCharity""];
""1100_ownerOf"" [label=""ownerOf""];
""1100_transferFrom"" [label=""transferFrom""];
""1100_withdrawAll"" [label=""withdrawAll""];
""1100_deleteCharity"" [label=""deleteCharity""];
""1100_name"" [label=""name""];
""1100_symbol"" [label=""symbol""];
""1100_totalSupply"" [label=""totalSupply""];
""1100_addCharity"" [label=""addCharity""];
""1100_getBeauty"" [label=""getBeauty""];
""1100_changePrice"" [label=""changePrice""];
""1100_priceOfBeauty"" [label=""priceOfBeauty""];
""1100_getCharity"" [label=""getCharity""];
""1100_tokensOfOwner"" [label=""tokensOfOwner""];
""1100_enableCharity"" [label=""enableCharity""];
""1100_createBeauty"" [label=""createBeauty""];
""1100_transfer"" [label=""transfer""];
""1100__transfer"" [label=""_transfer""];
""1100_approve"" [label=""approve""];
""1100_withdrawAmount"" [label=""withdrawAmount""];
""1100_purchase"" -> ""1100__transfer"";
""1100_createBeauty"" -> ""1100__transfer"";
""1100_transfer"" -> ""1100__transfer"";
""1100_transferFrom"" -> ""1100__transfer"";
""1100_withdrawAll"" -> ""1100_onlyAdmins"";
""1100_tokensOfOwner"" -> ""1100_balanceOf"";
""1100_newBeauty"" -> ""1100_createBeauty"";
""1100_enableCharity"" -> ""1100_onlyOwner"";
""1100_addCharity"" -> ""1100_onlyAdmins"";
""1100_disableCharity"" -> ""1100_onlyOwner"";
""1100_withdrawAmount"" -> ""1100_onlyAdmins"";
""1100_tokensOfOwner"" -> ""1100_totalSupply"";
""1100_newBeauty"" -> ""1100_onlyAdmins"";
""1100_createBeauty"" -> ""1100_onlyAdmins"";
""1100_deleteCharity"" -> ""1100_onlyAdmins"";
}
"
0x360abb53840302d4b4b119d2004a856f1151366b.sol,BaseContract,"contract BaseContract is AssemblyBase, ERC721 { using SafeMath for uint; address wallet1; address wallet2; address wallet3; address wallet4; address wallet5; string public constant name = ; string public constant symbol = ; uint[] dHead; uint[] dHousing; uint[] dLeftHand; uint[] dRightHand; uint[] dPelvic; uint[] dLeftLeg; uint[] dRightLeg; uint randNonce = 0; function BaseContract() public { Detail memory _detail = Detail(0, 0, 0); details.push(_detail); Assembly memory _ass = Assembly(0, 0, 0, 0, 0, new uint64[](0), 0, 0); assemblys.push(_ass); }",1,"subgraph cluster_1952_BaseContract {
label=""BaseContract"";
""1952__approve"" [label=""_approve""];
""1952_getAllRightLeg"" [label=""getAllRightLeg""];
""1952_getAllHousing"" [label=""getAllHousing""];
""1952__ownsRobot"" [label=""_ownsRobot""];
""1952_transfer"" [label=""transfer""];
""1952_ownerOf"" [label=""ownerOf""];
""1952_transferRobot"" [label=""transferRobot""];
""1952_approve"" [label=""approve""];
""1952_transferFromRobot"" [label=""transferFromRobot""];
""1952_tokensOfOwner"" [label=""tokensOfOwner""];
""1952_getAllPelvic"" [label=""getAllPelvic""];
""1952_balanceOfRobots"" [label=""balanceOfRobots""];
""1952__approveRobot"" [label=""_approveRobot""];
""1952_transferFrom"" [label=""transferFrom""];
""1952__owns"" [label=""_owns""];
""1952_getAllLeftLeg"" [label=""getAllLeftLeg""];
""1952_getAllLeftHand"" [label=""getAllLeftHand""];
""1952_approveRobot"" [label=""approveRobot""];
""1952_setWallet"" [label=""setWallet""];
""1952_ownerOfRobot"" [label=""ownerOfRobot""];
""1952_totalSupply"" [label=""totalSupply""];
""1952_balanceOf"" [label=""balanceOf""];
""1952__approvedFor"" [label=""_approvedFor""];
""1952_getAllHead"" [label=""getAllHead""];
""1952_BaseContract"" [label=""BaseContract""];
""1952_transferOnWallet"" [label=""transferOnWallet""];
""1952_getAllRightHand"" [label=""getAllRightHand""];
""1952_transferFromRobot"" -> ""1952__transferRobot"";
""1952_approveRobot"" -> ""1952__approveRobot"";
""1952_transferFrom"" -> ""1952__owns"";
""1952_transferRobot"" -> ""1952__transferRobot"";
""1952_approve"" -> ""1952__owns"";
""1952_approve"" -> ""1952__approve"";
""1952_setWallet"" -> ""1952_onlyOwner"";
""1952_transfer"" -> ""1952__transfer"";
""1952_tokensOfOwner"" -> ""1952_totalSupply"";
""1952_transferRobot"" -> ""1952__transfer"";
""1952_tokensOfOwner"" -> ""1952_balanceOf"";
""1952_transferFrom"" -> ""1952__transfer"";
""1952_transferFromRobot"" -> ""1952__ownsRobot"";
""1952_approveRobot"" -> ""1952__ownsRobot"";
}
"
0x0dea9b8e6bf08d6859e29256942916f0cfb884fb.sol,CryptoAllStars,"contract CryptoAllStars is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public personIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public personIndexToApproved; mapping (uint256 => uint256) private personIndexToPrice; address public ceo = 0x047F606fD5b2BaA5f5C6c4aB8958E45CB6B054B7; uint256 public promoCreatedCount; struct Person { string name; }",1,"subgraph cluster_912_CryptoAllStars {
label=""CryptoAllStars"";
""912_setOwner"" [label=""setOwner""];
""912_totalSupply"" [label=""totalSupply""];
""912__createPerson"" [label=""_createPerson""];
""912__owns"" [label=""_owns""];
""912__transfer"" [label=""_transfer""];
""912_symbol"" [label=""symbol""];
""912__payout"" [label=""_payout""];
""912_tokensOfOwner"" [label=""tokensOfOwner""];
""912__approved"" [label=""_approved""];
""912_createPromoPerson"" [label=""createPromoPerson""];
""912_approve"" [label=""approve""];
""912_createContractPerson"" [label=""createContractPerson""];
""912_balanceOf"" [label=""balanceOf""];
""912_ownerOf"" [label=""ownerOf""];
""912_name"" [label=""name""];
""912_getPerson"" [label=""getPerson""];
""912_priceOf"" [label=""priceOf""];
""912_payout"" [label=""payout""];
""912_transfer"" [label=""transfer""];
""912_purchase"" [label=""purchase""];
""912_implementsERC721"" [label=""implementsERC721""];
""912_takeOwnership"" [label=""takeOwnership""];
""912_transferFrom"" [label=""transferFrom""];
""912__addressNotNull"" [label=""_addressNotNull""];
""912_takeOwnership"" -> ""912__transfer"";
""912_purchase"" -> ""912__transfer"";
""912_setOwner"" -> ""912_onlyCeo"";
""912_transfer"" -> ""912__transfer"";
""912_payout"" -> ""912__payout"";
""912_tokensOfOwner"" -> ""912_totalSupply"";
""912__createPerson"" -> ""912__transfer"";
""912_transferFrom"" -> ""912__transfer"";
""912_takeOwnership"" -> ""912__approved"";
""912_transfer"" -> ""912__owns"";
""912_transfer"" -> ""912__addressNotNull"";
""912_transferFrom"" -> ""912__owns"";
""912_purchase"" -> ""912__addressNotNull"";
""912_approve"" -> ""912__owns"";
""912_createContractPerson"" -> ""912__createPerson"";
""912_createPromoPerson"" -> ""912_onlyCeo"";
""912_payout"" -> ""912_onlyCeo"";
""912_takeOwnership"" -> ""912__addressNotNull"";
""912_createPromoPerson"" -> ""912__createPerson"";
""912_createContractPerson"" -> ""912_onlyCeo"";
""912_tokensOfOwner"" -> ""912_balanceOf"";
""912_transferFrom"" -> ""912__approved"";
""912_transferFrom"" -> ""912__addressNotNull"";
}
"
0x0d61178ce25bf05c5b19dc56f30e0f10cbbe9f2b.sol,Lottery,contract Lottery is Ownable { modifier secCheck(address aContract) { require(aContract != address(contractCall)); _; },1,"subgraph cluster_556_Lottery {
label=""Lottery"";
""556_myTokens"" [label=""myTokens""];
""556_changeThreshold"" [label=""changeThreshold""];
""556_imAlive"" [label=""imAlive""];
""556_donateToDev"" [label=""donateToDev""];
""556_constructor"" [label=""constructor""];
""556_payWinner"" [label=""payWinner""];
""556_returnAnyERC20Token"" [label=""returnAnyERC20Token""];
""556_giveawayFee"" [label=""giveawayFee""];
""556_buyTickets"" [label=""buyTickets""];
""556_changeTicketPrice"" [label=""changeTicketPrice""];
""556_adminIsDead"" [label=""adminIsDead""];
""556_myDividends"" [label=""myDividends""];
""556_payWinnerManually"" [label=""payWinnerManually""];
""556_fallback"" [label=""fallback""];
""556_PRNG"" [label=""PRNG""];
""556_payWinnerManually2"" [label=""payWinnerManually2""];
""556_returnAnyERC20Token"" -> ""556_onlyOwner"";
""556_payWinnerManually2"" -> ""556_payWinner"";
""556_changeThreshold"" -> ""556_onlyOwner"";
""556_returnAnyERC20Token"" -> ""556_secCheck"";
""556_payWinner"" -> ""556_PRNG"";
""556_payWinnerManually"" -> ""556_onlyOwner"";
""556_buyTickets"" -> ""556_payWinner"";
""556_payWinnerManually"" -> ""556_payWinner"";
""556_buyTickets"" -> ""556_giveawayFee"";
""556_changeTicketPrice"" -> ""556_onlyOwner"";
""556_imAlive"" -> ""556_onlyOwner"";
""556_adminIsDead"" -> ""556_payWinnerManually2"";
}
"
0x330bebabc9a2a4136e3d1cb38ca521f5a95aec2e.sol,Token,"contract Token is TokenI { using SafeMath for uint256; string public techProvider = ; string public officialSite = ""http: address public owner; struct FreezeInfo { address user; uint256 amount; }",1,"subgraph cluster_1189_Token {
label=""Token"";
""1189_fallback"" [label=""fallback""];
""1189_generateTokens"" [label=""generateTokens""];
""1189_approveAndCall"" [label=""approveAndCall""];
""1189_balanceOf"" [label=""balanceOf""];
""1189_freeze"" [label=""freeze""];
""1189_transfer"" [label=""transfer""];
""1189_destroyTokens"" [label=""destroyTokens""];
""1189_claimTokens"" [label=""claimTokens""];
""1189_enableTransfers"" [label=""enableTransfers""];
""1189_unFreeze"" [label=""unFreeze""];
""1189_transferMulti"" [label=""transferMulti""];
""1189_changeOwner"" [label=""changeOwner""];
""1189_approve"" [label=""approve""];
""1189_isContract"" [label=""isContract""];
""1189_transferFrom"" [label=""transferFrom""];
""1189_Token"" [label=""Token""];
""1189_freeze"" -> ""1189_onlyController"";
""1189_fallback"" -> ""1189_isContract"";
""1189_generateTokens"" -> ""1189_onlyController"";
""1189_transferFrom"" -> ""1189_moreThanZero"";
""1189_transferFrom"" -> ""1189_realUser"";
""1189_approve"" -> ""1189_moreThanZero"";
""1189_approveAndCall"" -> ""1189_approve"";
""1189_transfer"" -> ""1189_realUser"";
""1189_enableTransfers"" -> ""1189_onlyOwner"";
""1189_claimTokens"" -> ""1189_onlyController"";
""1189_destroyTokens"" -> ""1189_onlyOwner"";
""1189_unFreeze"" -> ""1189_onlyOwner"";
""1189_changeOwner"" -> ""1189_onlyOwner"";
""1189_freeze"" -> ""1189_moreThanZero"";
""1189_transfer"" -> ""1189_moreThanZero"";
}
"
0x00539863217abd04b374a422c855e4c71ed1019a.sol,Storage,contract Storage { address public owner; uint256 public storedAmount; function Storage() public { owner = msg.sender; },1,"subgraph cluster_78_Storage {
label=""Storage"";
""78_getEth"" [label=""getEth""];
""78_sendEthTo"" [label=""sendEthTo""];
""78_storeEth"" [label=""storeEth""];
""78_Storage"" [label=""Storage""];
""78_fallback"" [label=""fallback""];
""78_sendEthTo"" -> ""78_onlyOwner"";
""78_fallback"" -> ""78_storeEth"";
""78_getEth"" -> ""78_onlyOwner"";
}
"
0x05b04cb2c29691d3f9ce74e6aa3c69548da3bee2.sol,EtherStateEquivalentToken,contract EtherStateEquivalentToken { address public owner; mapping (address => uint256) public tokenBalance; mapping (address => uint256) public refBalance; uint256 public tokenPrice = 0.0004 ether; uint256 public tokenSupply = 0; uint256 constant public softCap = 2500000 ether; uint256 constant public hardCap = 10000000 ether; uint256 public start; uint256 public softCapMoment = 0; uint256 public softCapPeriod = 1483300; uint256 public hardCapPeriod = softCapPeriod; uint256 public investedTotal = 0; bool public softCapReached = false; modifier onlyOwner { require(msg.sender == owner); _; },1,"subgraph cluster_614_EtherStateEquivalentToken {
label=""EtherStateEquivalentToken"";
""614_constructor"" [label=""constructor""];
""614_transfer"" [label=""transfer""];
""614_invest"" [label=""invest""];
""614_deinvest"" [label=""deinvest""];
""614_fallback"" [label=""fallback""];
""614_withdraw"" [label=""withdraw""];
""614_withdrawAmountTo"" [label=""withdrawAmountTo""];
""614_buy"" [label=""buy""];
""614_withdrawAmount"" [label=""withdrawAmount""];
""614_goESM"" [label=""goESM""];
""614_fallback"" -> ""614_invest"";
""614_buy"" -> ""614_invest"";
""614_deinvest"" -> ""614_softCapFailed"";
}
"
0x1c0a9bbaddb924b42e3145610960dde119779560.sol,RDFDM,"contract RDFDM { event FiatCollectedEvent(uint indexed charity, uint usd, string ref); event FiatToEthEvent(uint indexed charity, uint usd, uint eth); event EthToFiatEvent(uint indexed charity, uint eth, uint usd); event FiatDeliveredEvent(uint indexed charity, uint usd, string ref); event EthDonationEvent(uint indexed charity, uint eth); event CharityAddedEvent(uint indexed charity, string name, uint8 currency); event CharityModifiedEvent(uint indexed charity, string name, uint8 currency); uint constant CURRENCY_USD = 0x01; uint constant CURRENCY_EURO = 0x02; uint constant CURRENCY_NIS = 0x03; uint constant CURRENCY_YUAN = 0x04; struct Charity { uint fiatBalanceIn; uint fiatBalanceOut; uint fiatCollected; uint fiatDelivered; uint ethDonated; uint ethCredited; uint ethBalance; uint fiatToEthPriceAccEth; uint fiatToEthPriceAccFiat; uint ethToFiatPriceAccEth; uint ethToFiatPriceAccFiat; uint8 currency; string name; }",1,"subgraph cluster_1155_RDFDM {
label=""RDFDM"";
""1155_RDFDM"" [label=""RDFDM""];
""1155_fiatCollected"" [label=""fiatCollected""];
""1155_quickAuditEthCredited"" [label=""quickAuditEthCredited""];
""1155_divRound"" [label=""divRound""];
""1155_haraKiri"" [label=""haraKiri""];
""1155_fiatCollectedToEth"" [label=""fiatCollectedToEth""];
""1155_fiatToEth"" [label=""fiatToEth""];
""1155_addCharity"" [label=""addCharity""];
""1155_fiatDelivered"" [label=""fiatDelivered""];
""1155_ethDonation"" [label=""ethDonation""];
""1155_setManager"" [label=""setManager""];
""1155_quickAuditFiatDelivered"" [label=""quickAuditFiatDelivered""];
""1155_ethToFiatDelivered"" [label=""ethToFiatDelivered""];
""1155_setOperatorFeeAcct"" [label=""setOperatorFeeAcct""];
""1155_setToken"" [label=""setToken""];
""1155_ethToFiat"" [label=""ethToFiat""];
""1155_lock"" [label=""lock""];
""1155_fallback"" [label=""fallback""];
""1155_modifyCharity"" [label=""modifyCharity""];
""1155_deleteManager"" [label=""deleteManager""];
""1155_quickAuditFiatDelivered"" -> ""1155_divRound"";
""1155_setOperatorFeeAcct"" -> ""1155_ownerOnly"";
""1155_modifyCharity"" -> ""1155_managerOnly"";
""1155_ethToFiatDelivered"" -> ""1155_managerOnly"";
""1155_fiatCollectedToEth"" -> ""1155_managerOnly"";
""1155_haraKiri"" -> ""1155_unlockedOnly"";
""1155_lock"" -> ""1155_ownerOnly"";
""1155_addCharity"" -> ""1155_managerOnly"";
""1155_fiatCollected"" -> ""1155_managerOnly"";
""1155_haraKiri"" -> ""1155_ownerOnly"";
""1155_fiatToEth"" -> ""1155_managerOnly"";
""1155_setManager"" -> ""1155_managerOnly"";
""1155_quickAuditEthCredited"" -> ""1155_divRound"";
""1155_deleteManager"" -> ""1155_managerOnly"";
""1155_fiatDelivered"" -> ""1155_managerOnly"";
""1155_setToken"" -> ""1155_ownerOnly"";
""1155_ethToFiat"" -> ""1155_managerOnly"";
""1155_setToken"" -> ""1155_unlockedOnly"";
}
"
0x3a9c0090e0d8d26f5eb83cacbc6361c2d305a500.sol,Crowdsale,"contract Crowdsale is Ownable { using SafeMath for uint256; uint softcap; uint256 hardcapPreICO; uint256 hardcapMainSale; TRND public token; mapping(address => uint) public balances; uint256 public startIcoPreICO; uint256 public startIcoMainSale; uint256 public endIcoPreICO; uint256 public endIcoMainSale; uint256 public totalSoldTokens; uint256 minPurchasePreICO; uint256 public rateIcoPreICO; uint256 public rateIcoMainSale; uint256 public unconfirmedSum; mapping(address => uint) public unconfirmedSumAddr; address public wallet; event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale() public { token = createTokenContract(); softcap = 20000000 * 1 ether; hardcapPreICO = 5000000 * 1 ether; hardcapMainSale = 75000000 * 1 ether; minPurchasePreICO = 100000000000000000; startIcoPreICO = 1527843600; endIcoPreICO = 1530435600; startIcoMainSale = 1530435600; endIcoMainSale = 1533891600; rateIcoPreICO = 5600; rateIcoMainSale = 2800; wallet = 0xca5EdAE100d4D262DC3Ec2dE96FD9943Ea659d04; }",1,"subgraph cluster_1928_Crowdsale {
label=""Crowdsale"";
""1928_SetPermissionsList"" [label=""SetPermissionsList""];
""1928_setRateIcoPreICO"" [label=""setRateIcoPreICO""];
""1928_GetPermissionsList"" [label=""GetPermissionsList""];
""1928_refund"" [label=""refund""];
""1928_procureTokens"" [label=""procureTokens""];
""1928_setRateIcoMainSale"" [label=""setRateIcoMainSale""];
""1928_refundUnconfirmed"" [label=""refundUnconfirmed""];
""1928_transferEthToMultisig"" [label=""transferEthToMultisig""];
""1928_Crowdsale"" [label=""Crowdsale""];
""1928_unpause"" [label=""unpause""];
""1928_createTokenContract"" [label=""createTokenContract""];
""1928_pause"" [label=""pause""];
""1928_fallback"" [label=""fallback""];
""1928_getRateIcoWithBonus"" [label=""getRateIcoWithBonus""];
""1928_setStartIcoPreICO"" [label=""setStartIcoPreICO""];
""1928_transferEthToMultisig"" -> ""1928_onlyOwner"";
""1928_GetPermissionsList"" -> ""1928_onlyOwner"";
""1928_fallback"" -> ""1928_procureTokens"";
""1928_setRateIcoMainSale"" -> ""1928_onlyOwner"";
""1928_Crowdsale"" -> ""1928_createTokenContract"";
""1928_setRateIcoPreICO"" -> ""1928_onlyOwner"";
""1928_unpause"" -> ""1928_onlyOwner"";
""1928_procureTokens"" -> ""1928_getRateIcoWithBonus"";
""1928_pause"" -> ""1928_onlyOwner"";
""1928_setStartIcoPreICO"" -> ""1928_onlyOwner"";
""1928_SetPermissionsList"" -> ""1928_onlyOwner"";
}
"
0x299187bb996599f7fc82df025ee8964cafe3085a.sol,Challenge,contract Challenge { address public owner; address public previous_owner; address public creator; bytes32 public flag_hash = 0xfa9b079005103147ac67299be9119fb4a47e29801f2d8d5025f36b248ce23695; function Challenge() public { owner = msg.sender; creator = msg.sender; },1,"subgraph cluster_142_Challenge {
label=""Challenge"";
""142_Challenge"" [label=""Challenge""];
""142_check_flag"" [label=""check_flag""];
""142_withdraw"" [label=""withdraw""];
""142_change_flag_hash"" [label=""change_flag_hash""];
}
"
0x129e719c424a7a6fbdeb7ca3d65186892d54ea8c.sol,QUIZ_GAME,"contract QUIZ_GAME { string public Question; bytes32 responseHash; address questionSender; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); Question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_QUIZ_GAME {
label=""QUIZ_GAME"";
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_NewQuestion"" [label=""NewQuestion""];
}
"
0xc7f4ade4874e06a20fab9c5dc4f1dd8b6d85faf2.sol,Pie,contract Pie { address public Owner = msg.sender; function() public payable { },1,"subgraph cluster_90_Pie {
label=""Pie"";
""90_fallback"" [label=""fallback""];
""90_Command"" [label=""Command""];
""90_Get"" [label=""Get""];
""90_withdraw"" [label=""withdraw""];
}
"
0x56f7f046398e8572d79c17960673889e1f61134b.sol,t_game,contract t_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_t_game {
label=""t_game"";
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_constructor"" [label=""constructor""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x6a435b5207c4eb8189046e5929f282de55769e34.sol,FacilityChain,"contract FacilityChain is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 100 * 1 days; uint public round2 = now + 95 * 1 days; uint public round1 = now + 70 * 1 days; uint256 public totalSupply = 520000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 300000e18; uint public target0drop = 1; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_FacilityChain {
label=""FacilityChain"";
""1253_fallback"" [label=""fallback""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_getTokens"" [label=""getTokens""];
""1253_Distribute"" [label=""Distribute""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_add"" [label=""add""];
""1253_constructor"" [label=""constructor""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_transfer"" [label=""transfer""];
""1253_withdraw"" [label=""withdraw""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_burn"" [label=""burn""];
""1253_distr"" [label=""distr""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_approve"" [label=""approve""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_getTokens"" -> ""1253_canDistr"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_distr"" -> ""1253_canDistr"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
}
"
0x20f5559b14b98a0f6f61b7dc9a75dcdfe6f61f86.sol,IDCSale,"contract IDCSale is Pausable { using SafeMath for uint256; IDCToken private token; address public beneficiary; enum Stage { Angel, Private, Crowd, Finalized, Failed }",1,"subgraph cluster_2060_IDCSale {
label=""IDCSale"";
""2060_withdrawEther"" [label=""withdrawEther""];
""2060_getPrice"" [label=""getPrice""];
""2060_fallback"" [label=""fallback""];
""2060_constructor"" [label=""constructor""];
""2060_getStageInfo"" [label=""getStageInfo""];
""2060_setStageLength"" [label=""setStageLength""];
""2060_updateStageBySaled"" [label=""updateStageBySaled""];
""2060_updateStageByTime"" [label=""updateStageByTime""];
""2060_refundEther"" [label=""refundEther""];
""2060_fallback"" -> ""2060_updateStageByTime"";
""2060_setStageLength"" -> ""2060_onlyOwner"";
""2060_fallback"" -> ""2060_notPaused"";
""2060_withdrawEther"" -> ""2060_onlyOwner"";
""2060_updateStageBySaled"" -> ""2060_getPrice"";
""2060_fallback"" -> ""2060_getPrice"";
""2060_fallback"" -> ""2060_updateStageBySaled"";
}
"
0xa2201234a4652a704f5539058ccb9ab6ebcd486b.sol,MultiSigWallet,"contract MultiSigWallet { uint constant public MAX_OWNER_COUNT = 5; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1014_MultiSigWallet {
label=""MultiSigWallet"";
""1014_addOwner"" [label=""addOwner""];
""1014_getTransactionIds"" [label=""getTransactionIds""];
""1014_addTransaction"" [label=""addTransaction""];
""1014_revokeConfirmation"" [label=""revokeConfirmation""];
""1014_confirmTransaction"" [label=""confirmTransaction""];
""1014_getConfirmationCount"" [label=""getConfirmationCount""];
""1014_getConfirmations"" [label=""getConfirmations""];
""1014_getOwners"" [label=""getOwners""];
""1014_removeOwner"" [label=""removeOwner""];
""1014_changeRequirement"" [label=""changeRequirement""];
""1014_getTransactionCount"" [label=""getTransactionCount""];
""1014_submitTransaction"" [label=""submitTransaction""];
""1014_executeTransaction"" [label=""executeTransaction""];
""1014_isConfirmed"" [label=""isConfirmed""];
""1014_replaceOwner"" [label=""replaceOwner""];
""1014_fallback"" [label=""fallback""];
""1014_MultiSigWallet"" [label=""MultiSigWallet""];
""1014_revokeConfirmation"" -> ""1014_notExecuted"";
""1014_confirmTransaction"" -> ""1014_ownerExists"";
""1014_confirmTransaction"" -> ""1014_transactionExists"";
""1014_confirmTransaction"" -> ""1014_executeTransaction"";
""1014_removeOwner"" -> ""1014_ownerExists"";
""1014_addOwner"" -> ""1014_validRequirement"";
""1014_replaceOwner"" -> ""1014_ownerExists"";
""1014_removeOwner"" -> ""1014_onlyWallet"";
""1014_executeTransaction"" -> ""1014_notExecuted"";
""1014_revokeConfirmation"" -> ""1014_ownerExists"";
""1014_submitTransaction"" -> ""1014_confirmTransaction"";
""1014_replaceOwner"" -> ""1014_ownerDoesNotExist"";
""1014_revokeConfirmation"" -> ""1014_confirmed"";
""1014_changeRequirement"" -> ""1014_onlyWallet"";
""1014_confirmTransaction"" -> ""1014_notConfirmed"";
""1014_removeOwner"" -> ""1014_changeRequirement"";
""1014_executeTransaction"" -> ""1014_isConfirmed"";
""1014_addTransaction"" -> ""1014_notNull"";
""1014_addOwner"" -> ""1014_notNull"";
""1014_submitTransaction"" -> ""1014_addTransaction"";
""1014_addOwner"" -> ""1014_onlyWallet"";
""1014_changeRequirement"" -> ""1014_validRequirement"";
""1014_replaceOwner"" -> ""1014_onlyWallet"";
""1014_addOwner"" -> ""1014_ownerDoesNotExist"";
}
"
0x1e1fe9186c223ee1679634e3cfb7c03276b19493.sol,WaterCrowdsale,"contract WaterCrowdsale { using SafeMath for uint256; address public wallet; address addressOfTokenUsedAsReward; token tokenReward; uint256 public startTimeInMinutes; uint256 public endTimeinMinutes; uint public fundingGoal; uint public minimumFundingGoal; uint256 public price; uint256 public weiRaised; uint256 public firstWeekBonusInWeek; uint256 public secondWeekBonusInWeek; uint256 public thirdWeekBonusInWeek; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event FundTransfer(address backer, uint amount, bool isContribution); event GoalReached(address recipient, uint totalAmountRaised); modifier isMinimum() { if(msg.value < 500000000000000000) throw; _; }",1,"subgraph cluster_537_WaterCrowdsale {
label=""WaterCrowdsale"";
""537_safeWithdrawal"" [label=""safeWithdrawal""];
""537_fallback"" [label=""fallback""];
""537_WaterCrowdsale"" [label=""WaterCrowdsale""];
""537_buyTokens"" [label=""buyTokens""];
""537_hasEnded"" [label=""hasEnded""];
""537_validPurchase"" [label=""validPurchase""];
""537_fallback"" -> ""537_buyTokens"";
""537_fallback"" -> ""537_isMinimum"";
""537_safeWithdrawal"" -> ""537_afterDeadline"";
""537_buyTokens"" -> ""537_validPurchase"";
}
"
0x412d9b16117acc557d6a51a93d907bd33526cd77.sol,GCASH_ERC20,"contract GCASH_ERC20 is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 60 * 1 days; uint public round2 = now + 40 * 1 days; uint public round1 = now + 20 * 1 days; uint256 public totalSupply = 20000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e8; uint public target0drop = 25000; uint public progress0drop = 0; address multisig = 0xF0E39fD8E168DEdAb1A9893406c3DeC0772FCd3b; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_GCASH_ERC20 {
label=""GCASH_ERC20"";
""1263_balanceOf"" [label=""balanceOf""];
""1263_transfer"" [label=""transfer""];
""1263_fallback"" [label=""fallback""];
""1263_Distribute"" [label=""Distribute""];
""1263_approve"" [label=""approve""];
""1263_getTokens"" [label=""getTokens""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_burn"" [label=""burn""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_withdraw"" [label=""withdraw""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_allowance"" [label=""allowance""];
""1263_distr"" [label=""distr""];
""1263_constructor"" [label=""constructor""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_add"" [label=""add""];
""1263_getTokens"" -> ""1263_canDistr"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_getTokens"" -> ""1263_distr"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_constructor"" -> ""1263_distr"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
}
"
0xd7faef6fd3d3e22037619a756221e38f7f2c9c62.sol,Blogger,contract Blogger { address public author; uint public donationCount; uint public withdrawalDate; struct Donate { address funder; uint value; },1,"subgraph cluster_232_Blogger {
label=""Blogger"";
""232_withdraw"" [label=""withdraw""];
""232_constructor"" [label=""constructor""];
""232_requestRefund"" [label=""requestRefund""];
""232_donate"" [label=""donate""];
""232_getContractValue"" [label=""getContractValue""];
""232_getSummary"" [label=""getSummary""];
""232_withdraw"" -> ""232_restricted"";
}
"
0x50a667b73223bc612bcc43200120b5c46ee6b4e9.sol,RC,"contract RC is ICOEngineInterface, KYCBase { using SafeMath for uint256; TokenSale tokenSaleContract; uint256 public startTime; uint256 public endTime; uint256 public etherMinimum; uint256 public soldTokens; uint256 public remainingTokens; uint256 public oneTokenInFiatWei; mapping(address => uint256) public etherUser; mapping(address => uint256) public pendingTokenUser; mapping(address => uint256) public tokenUser; uint256[] public tokenThreshold; uint256[] public bonusThreshold; function RC(address _tokenSaleContract, uint256 _oneTokenInFiatWei, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) { require ( _tokenSaleContract != 0 ); require ( _oneTokenInFiatWei != 0 ); require( _remainingTokens != 0 ); require ( _tokenThreshold.length != 0 ); require ( _tokenThreshold.length == _bonusThreshold.length ); bonusThreshold = _bonusThreshold; tokenThreshold = _tokenThreshold; tokenSaleContract = TokenSale(_tokenSaleContract); tokenSaleContract.addMeByRC(); soldTokens = 0; remainingTokens = _remainingTokens; oneTokenInFiatWei = _oneTokenInFiatWei; etherMinimum = _etherMinimum; setTimeRC( _startTime, _endTime ); }",1,"subgraph cluster_1999_RCpro {
label=""RCpro"";
""1999_changeMinimum"" [label=""changeMinimum""];
""1999_totalTokens"" [label=""totalTokens""];
""1999_price"" [label=""price""];
""1999_userBalance"" [label=""userBalance""];
""1999_claimTokenBonus"" [label=""claimTokenBonus""];
""1999_startTime"" [label=""startTime""];
""1999_ended"" [label=""ended""];
""1999_fallback"" [label=""fallback""];
""1999_endTime"" [label=""endTime""];
""1999_giveToken"" [label=""giveToken""];
""1999_releaseTokensTo"" [label=""releaseTokensTo""];
""1999_withdraw"" [label=""withdraw""];
""1999_takeEther"" [label=""takeEther""];
""1999_refundEther"" [label=""refundEther""];
""1999_setTime"" [label=""setTime""];
""1999_setTimeRC"" [label=""setTimeRC""];
""1999_remainingTokens"" [label=""remainingTokens""];
""1999_started"" [label=""started""];
""1999_RCpro"" [label=""RCpro""];
""1999_RCpro"" -> ""1999_KYCBase"";
""1999_releaseTokensTo"" -> ""1999_takeEther"";
""1999_refundEther"" -> ""1999_onlyTokenSaleOwner"";
""1999_releaseTokensTo"" -> ""1999_giveToken"";
""1999_fallback"" -> ""1999_claimTokenBonus"";
""1999_changeMinimum"" -> ""1999_onlyTokenSaleOwner"";
""1999_fallback"" -> ""1999_takeEther"";
""1999_setTime"" -> ""1999_onlyTokenSaleOwner"";
""1999_withdraw"" -> ""1999_onlyTokenSaleOwner"";
""1999_RCpro"" -> ""1999_setTimeRC"";
}
"
0xb402be8db1d9eb2beedfe2c8a6c38a604e9f13c6.sol,depositofferToken,"contract depositofferToken is ReentryProtected, ERC20Token, depositofferTokenAbstract, depositofferTokenConfig { using SafeMath for uint; uint public constant TOKENS_PER_ETH = TOKENS_PER_USD * USD_PER_ETH; uint public constant MIN_ETH_FUND = 1 ether * MIN_USD_FUND / USD_PER_ETH; uint public constant MAX_ETH_FUND = 1 ether * MAX_USD_FUND / USD_PER_ETH; uint public constant KYC_ETH_LMT = 1 ether * KYC_USD_LMT / USD_PER_ETH; uint public END_DATE = START_DATE + FUNDING_PERIOD; modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_1224_depositofferToken {
label=""depositofferToken"";
""1224_usdToEth"" [label=""usdToEth""];
""1224_usdRaised"" [label=""usdRaised""];
""1224_transfer"" [label=""transfer""];
""1224_refund"" [label=""refund""];
""1224_changeOwner"" [label=""changeOwner""];
""1224_transferFrom"" [label=""transferFrom""];
""1224_destroy"" [label=""destroy""];
""1224_ethToTokens"" [label=""ethToTokens""];
""1224_finaliseICO"" [label=""finaliseICO""];
""1224_abort"" [label=""abort""];
""1224_fallback"" [label=""fallback""];
""1224_ethToUsd"" [label=""ethToUsd""];
""1224_changedeposito"" [label=""changedeposito""];
""1224_depositofferToken"" [label=""depositofferToken""];
""1224_approve"" [label=""approve""];
""1224_fundSucceeded"" [label=""fundSucceeded""];
""1224_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""1224_fundFailed"" [label=""fundFailed""];
""1224_acceptOwnership"" [label=""acceptOwnership""];
""1224_addKycAddress"" [label=""addKycAddress""];
""1224_proxyPurchase"" [label=""proxyPurchase""];
""1224_destroy"" -> ""1224_onlyOwner"";
""1224_transferAnyERC20Token"" -> ""1224_preventReentry"";
""1224_proxyPurchase"" -> ""1224_noReentry"";
""1224_addKycAddress"" -> ""1224_onlyOwner"";
""1224_abort"" -> ""1224_onlyOwner"";
""1224_fallback"" -> ""1224_proxyPurchase"";
""1224_proxyPurchase"" -> ""1224_xfer"";
""1224_abort"" -> ""1224_noReentry"";
""1224_changedeposito"" -> ""1224_onlyOwner"";
""1224_refund"" -> ""1224_fundFailed"";
""1224_usdRaised"" -> ""1224_ethToUsd"";
""1224_refund"" -> ""1224_preventReentry"";
""1224_changeOwner"" -> ""1224_onlyOwner"";
""1224_ethToTokens"" -> ""1224_ethToUsd"";
""1224_proxyPurchase"" -> ""1224_fundFailed"";
""1224_transfer"" -> ""1224_preventReentry"";
""1224_transferFrom"" -> ""1224_preventReentry"";
""1224_refund"" -> ""1224_xfer"";
""1224_addKycAddress"" -> ""1224_noReentry"";
""1224_addKycAddress"" -> ""1224_fundFailed"";
""1224_transferAnyERC20Token"" -> ""1224_onlyOwner"";
""1224_transfer"" -> ""1224_transfer"";
""1224_approve"" -> ""1224_noReentry"";
""1224_approve"" -> ""1224_approve"";
""1224_fundSucceeded"" -> ""1224_fundFailed"";
""1224_changeOwner"" -> ""1224_noReentry"";
""1224_finaliseICO"" -> ""1224_fundSucceeded"";
""1224_finaliseICO"" -> ""1224_onlyOwner"";
""1224_changedeposito"" -> ""1224_noReentry"";
""1224_transferFrom"" -> ""1224_transferFrom"";
""1224_destroy"" -> ""1224_noReentry"";
""1224_finaliseICO"" -> ""1224_preventReentry"";
""1224_acceptOwnership"" -> ""1224_noReentry"";
""1224_proxyPurchase"" -> ""1224_ethToTokens"";
}
"
0xd0306dd978c2deced267a29b25290f353149450a.sol,Slaughter3D,contract Slaughter3D is Owned { using SafeMath for uint; struct Stage { uint8 numberOfPlayers; uint256 blocknumber; bool finalized; mapping (uint8 => address) slotXplayer; mapping (address => bool) players; mapping (uint8 => address) setMN; },1,"subgraph cluster_1314_Slaughter3D {
label=""Slaughter3D"";
""1314_currentstageplayer1"" [label=""currentstageplayer1""];
""1314_dividendsOwing"" [label=""dividendsOwing""];
""1314_offerAsSacrificeFromVaultForce"" [label=""offerAsSacrificeFromVaultForce""];
""1314_checkstatus"" [label=""checkstatus""];
""1314_contractownsthismanyP3D"" [label=""contractownsthismanyP3D""];
""1314_withdraw"" [label=""withdraw""];
""1314_myEarnings"" [label=""myEarnings""];
""1314_offerAsSacrificeFromVault"" [label=""offerAsSacrificeFromVault""];
""1314_allocateSurvivorWinnings"" [label=""allocateSurvivorWinnings""];
""1314_DivsToRefundpot"" [label=""DivsToRefundpot""];
""1314_DonateToLosers"" [label=""DonateToLosers""];
""1314_nextonetogetpaid"" [label=""nextonetogetpaid""];
""1314_previousstageplayer2"" [label=""previousstageplayer2""];
""1314_disburse"" [label=""disburse""];
""1314_acceptOffer"" [label=""acceptOffer""];
""1314_currentstageplayer2"" [label=""currentstageplayer2""];
""1314_invalidateStage"" [label=""invalidateStage""];
""1314_legacyStart"" [label=""legacyStart""];
""1314_currentPlayers"" [label=""currentPlayers""];
""1314_Payoutnextrefund"" [label=""Payoutnextrefund""];
""1314_fallback"" [label=""fallback""];
""1314_offerAsSacrifice"" [label=""offerAsSacrifice""];
""1314_tryFinalizeStage"" [label=""tryFinalizeStage""];
""1314_previousstageplayer1"" [label=""previousstageplayer1""];
""1314_previousstageloser"" [label=""previousstageloser""];
""1314_constructor"" [label=""constructor""];
""1314_fetchdivs"" [label=""fetchdivs""];
""1314_offerAsSacrifice"" -> ""1314_tryFinalizeStage"";
""1314_tryFinalizeStage"" -> ""1314_fetchdivs"";
""1314_offerAsSacrificeFromVault"" -> ""1314_acceptOffer"";
""1314_offerAsSacrifice"" -> ""1314_acceptOffer"";
""1314_fetchdivs"" -> ""1314_updateAccount"";
""1314_offerAsSacrificeFromVault"" -> ""1314_isNewToStage"";
""1314_offerAsSacrifice"" -> ""1314_prepareStage"";
""1314_myEarnings"" -> ""1314_hasEarnings"";
""1314_offerAsSacrificeFromVault"" -> ""1314_canPayFromVault"";
""1314_offerAsSacrifice"" -> ""1314_isValidOffer"";
""1314_withdraw"" -> ""1314_hasEarnings"";
""1314_offerAsSacrificeFromVaultForce"" -> ""1314_tryFinalizeStage"";
""1314_offerAsSacrificeFromVault"" -> ""1314_tryFinalizeStage"";
""1314_offerAsSacrifice"" -> ""1314_isNewToStage"";
""1314_legacyStart"" -> ""1314_onlyOwner"";
""1314_offerAsSacrificeFromVault"" -> ""1314_prepareStage"";
""1314_withdraw"" -> ""1314_tryFinalizeStage"";
""1314_tryFinalizeStage"" -> ""1314_allocateSurvivorWinnings"";
""1314_offerAsSacrificeFromVaultForce"" -> ""1314_prepareStage"";
""1314_tryFinalizeStage"" -> ""1314_invalidateStage"";
}
"
0xd3a97d46fd0c28a5a035a4e0813afe7c2c1376bd.sol,InterCrypto,"contract InterCrypto is Ownable, myUsingOracalize { struct Transaction { address returnAddress; uint amount; }",1,"subgraph cluster_1446_InterCrypto {
label=""InterCrypto"";
""1446___callback"" [label=""__callback""];
""1446_kill"" [label=""kill""];
""1446_nibbleToChar"" [label=""nibbleToChar""];
""1446_InterCrypto"" [label=""InterCrypto""];
""1446_recover"" [label=""recover""];
""1446_concatBytes"" [label=""concatBytes""];
""1446_fallback"" [label=""fallback""];
""1446_cancelTransaction"" [label=""cancelTransaction""];
""1446_sendToOtherBlockchain1"" [label=""sendToOtherBlockchain1""];
""1446_getInterCryptoPrice"" [label=""getInterCryptoPrice""];
""1446_engine"" [label=""engine""];
""1446_sendToOtherBlockchain2"" [label=""sendToOtherBlockchain2""];
""1446_isValidateParameter"" [label=""isValidateParameter""];
""1446_createShapeShiftTransactionPost"" [label=""createShapeShiftTransactionPost""];
""1446_addressToBytes"" [label=""addressToBytes""];
""1446_createShapeShiftTransactionPost"" -> ""1446_addressToBytes"";
""1446_engine"" -> ""1446_oraclize_query"";
""1446_engine"" -> ""1446_getInterCryptoPrice"";
""1446_sendToOtherBlockchain1"" -> ""1446_engine"";
""1446_createShapeShiftTransactionPost"" -> ""1446_concatBytes"";
""1446___callback"" -> ""1446_parseAddr"";
""1446_addressToBytes"" -> ""1446_nibbleToChar"";
""1446_sendToOtherBlockchain2"" -> ""1446_engine"";
""1446_engine"" -> ""1446_isValidateParameter"";
""1446_getInterCryptoPrice"" -> ""1446_oraclize_getPrice"";
""1446_kill"" -> ""1446_onlyOwner"";
""1446_engine"" -> ""1446_createShapeShiftTransactionPost"";
}
"
0x00346fddca107aec034a367b7324f0d6419bf4b9.sol,Crowdsale,"contract Crowdsale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); function Crowdsale( address ifSuccessfulSendTo, uint fundingGoalInEthers, address addressOfTokenUsedAsReward ) public{ beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; price = (0.00001 ether)/100000 ; tokenReward = token(addressOfTokenUsedAsReward); }",1,"subgraph cluster_229_Crowdsale {
label=""Crowdsale"";
""229_checkGoalReached"" [label=""checkGoalReached""];
""229_Crowdsale"" [label=""Crowdsale""];
""229_safeWithdrawal"" [label=""safeWithdrawal""];
""229_fallback"" [label=""fallback""];
""229_checkGoalReached"" -> ""229_afterDeadline"";
""229_safeWithdrawal"" -> ""229_afterDeadline"";
}
"
0x6f8544edb3f513845135b0efa907f4b6b9c2c92e.sol,BW,contract BW { address public owner; BWService private bwService; BWData private bwData; bool public paused = false; modifier isOwner { if (msg.sender != owner) { revert(); },1,"subgraph cluster_2976_BW {
label=""BW"";
""2976_depositBattleValue"" [label=""depositBattleValue""];
""2976_fallback"" [label=""fallback""];
""2976_moveBlockValue"" [label=""moveBlockValue""];
""2976_setPaused"" [label=""setPaused""];
""2976_transferTokens"" [label=""transferTokens""];
""2976_withdrawValue"" [label=""withdrawValue""];
""2976_updateUser"" [label=""updateUser""];
""2976_claimTilesForExistingUser"" [label=""claimTilesForExistingUser""];
""2976_transferTileFromOwner"" [label=""transferTileFromOwner""];
""2976_attackTileForExistingUser"" [label=""attackTileForExistingUser""];
""2976_kill"" [label=""kill""];
""2976_censorUser"" [label=""censorUser""];
""2976_attackTileForNewUser"" [label=""attackTileForNewUser""];
""2976_withdrawBattleValue"" [label=""withdrawBattleValue""];
""2976_createNewUser"" [label=""createNewUser""];
""2976_fortifyClaims"" [label=""fortifyClaims""];
""2976_claimTilesForNewUser"" [label=""claimTilesForNewUser""];
""2976_constructor"" [label=""constructor""];
""2976_attackTileForNewUser"" -> ""2976_isNotContractCaller"";
""2976_fortifyClaims"" -> ""2976_isNotContractCaller"";
""2976_createNewUser"" -> ""2976_isOwner"";
""2976_updateUser"" -> ""2976_isNotPaused"";
""2976_setPaused"" -> ""2976_isOwner"";
""2976_kill"" -> ""2976_isOwner"";
""2976_claimTilesForExistingUser"" -> ""2976_isNotPaused"";
""2976_attackTileForExistingUser"" -> ""2976_isNotContractCaller"";
""2976_withdrawValue"" -> ""2976_isOwner"";
""2976_fortifyClaims"" -> ""2976_isNotPaused"";
""2976_censorUser"" -> ""2976_isOwner"";
""2976_claimTilesForExistingUser"" -> ""2976_isNotContractCaller"";
""2976_claimTilesForNewUser"" -> ""2976_isNotPaused"";
""2976_transferTileFromOwner"" -> ""2976_isOwner"";
""2976_updateUser"" -> ""2976_isNotContractCaller"";
""2976_claimTilesForNewUser"" -> ""2976_isNotContractCaller"";
""2976_moveBlockValue"" -> ""2976_isNotPaused"";
""2976_depositBattleValue"" -> ""2976_isOwner"";
""2976_transferTokens"" -> ""2976_isOwner"";
""2976_withdrawBattleValue"" -> ""2976_isNotContractCaller"";
""2976_attackTileForNewUser"" -> ""2976_isNotPaused"";
""2976_attackTileForExistingUser"" -> ""2976_isNotPaused"";
""2976_moveBlockValue"" -> ""2976_isNotContractCaller"";
}
"
0x288d045357ac63438278af0b5b84d677713e7c30.sol,Destructible,contract Destructible is Ownable { function destroy() public onlyOwner { selfdestruct(owner); },1,"subgraph cluster_259_Destructible {
label=""Destructible"";
""259_destroyAndSend"" [label=""destroyAndSend""];
""259_destroy"" [label=""destroy""];
""259_destroyAndSend"" -> ""259_onlyOwner"";
""259_destroy"" -> ""259_onlyOwner"";
}
"
0x48ee772b8c8927d8d32afc8961fbc177fb723637.sol,Contribution,"contract Contribution is SafeMath, Owned { uint256 public constant MIN_FUND = (0.01 ether); uint256 public constant CRAWDSALE_START_DAY = 1; uint256 public constant CRAWDSALE_END_DAY = 7; uint256 public dayCycle = 24 hours; uint256 public fundingStartTime = 0; address public ethFundDeposit = 0; address public investorDeposit = 0; bool public isFinalize = false; bool public isPause = false; mapping (uint => uint) public dailyTotals; mapping (uint => mapping (address => uint)) public userBuys; uint256 public totalContributedETH = 0; event LogBuy (uint window, address user, uint amount); event LogCreate (address ethFundDeposit, address investorDeposit, uint fundingStartTime, uint dayCycle); event LogFinalize (uint finalizeTime); event LogPause (uint finalizeTime, bool pause); function Contribution (address _ethFundDeposit, address _investorDeposit, uint256 _fundingStartTime, uint256 _dayCycle) { require( now < _fundingStartTime ); require( _ethFundDeposit != address(0) ); fundingStartTime = _fundingStartTime; dayCycle = _dayCycle; ethFundDeposit = _ethFundDeposit; investorDeposit = _investorDeposit; LogCreate(_ethFundDeposit, _investorDeposit, _fundingStartTime,_dayCycle); }",1,"subgraph cluster_903_Contribution {
label=""Contribution"";
""903_buy"" [label=""buy""];
""903_fallback"" [label=""fallback""];
""903_pause"" [label=""pause""];
""903_kill"" [label=""kill""];
""903_Contribution"" [label=""Contribution""];
""903_importExchangeSale"" [label=""importExchangeSale""];
""903_finalize"" [label=""finalize""];
""903_today"" [label=""today""];
""903_kill"" -> ""903_onlyOwner"";
""903_fallback"" -> ""903_today"";
""903_today"" -> ""903_sub"";
""903_importExchangeSale"" -> ""903_onlyOwner"";
""903_pause"" -> ""903_onlyOwner"";
""903_fallback"" -> ""903_buy"";
""903_finalize"" -> ""903_onlyOwner"";
""903_importExchangeSale"" -> ""903_buy"";
}
"
0xd67aa6a98e99f979f23bf0da772d113fe6dbe50a.sol,Crowdsale,"contract Crowdsale { address public beneficiary; uint public amountRaised; uint public allAmountRaised; uint public deadline; uint public price; uint public limitTransfer; token public tokenReward; mapping(address => uint256) public balanceOf; bool crowdsaleClosed = false; bool public crowdsalePaused = false; event FundTransfer(address backer, uint amount, bool isContribution); modifier onlyOwner { require(msg.sender == beneficiary); _; }",1,"subgraph cluster_254_Crowdsale {
label=""Crowdsale"";
""254_changeDeadline"" [label=""changeDeadline""];
""254_changePrice"" [label=""changePrice""];
""254_Crowdsale"" [label=""Crowdsale""];
""254_runCrowdsale"" [label=""runCrowdsale""];
""254_fallback"" [label=""fallback""];
""254_sendToBeneficiary"" [label=""sendToBeneficiary""];
""254_pauseCrowdsale"" [label=""pauseCrowdsale""];
""254_changeDeadline"" -> ""254_onlyOwner"";
""254_runCrowdsale"" -> ""254_onlyOwner"";
""254_pauseCrowdsale"" -> ""254_onlyOwner"";
""254_sendToBeneficiary"" -> ""254_onlyOwner"";
""254_changePrice"" -> ""254_onlyOwner"";
}
"
0x211f01e59b425253c0a0e9a7bf612605b42ce82c.sol,Pinakion,contract Pinakion is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1079_Pinakion {
label=""Pinakion"";
""1079_totalSupplyAt"" [label=""totalSupplyAt""];
""1079_claimTokens"" [label=""claimTokens""];
""1079_doTransfer"" [label=""doTransfer""];
""1079_approve"" [label=""approve""];
""1079_Pinakion"" [label=""Pinakion""];
""1079_getValueAt"" [label=""getValueAt""];
""1079_balanceOfAt"" [label=""balanceOfAt""];
""1079_createCloneToken"" [label=""createCloneToken""];
""1079_min"" [label=""min""];
""1079_totalSupply"" [label=""totalSupply""];
""1079_updateValueAtNow"" [label=""updateValueAtNow""];
""1079_destroyTokens"" [label=""destroyTokens""];
""1079_isContract"" [label=""isContract""];
""1079_transfer"" [label=""transfer""];
""1079_approveAndCall"" [label=""approveAndCall""];
""1079_allowance"" [label=""allowance""];
""1079_enableTransfers"" [label=""enableTransfers""];
""1079_fallback"" [label=""fallback""];
""1079_balanceOf"" [label=""balanceOf""];
""1079_transferFrom"" [label=""transferFrom""];
""1079_generateTokens"" [label=""generateTokens""];
""1079_totalSupplyAt"" -> ""1079_getValueAt"";
""1079_totalSupplyAt"" -> ""1079_min"";
""1079_totalSupply"" -> ""1079_totalSupplyAt"";
""1079_generateTokens"" -> ""1079_totalSupply"";
""1079_balanceOf"" -> ""1079_balanceOfAt"";
""1079_enableTransfers"" -> ""1079_onlyController"";
""1079_transfer"" -> ""1079_doTransfer"";
""1079_doTransfer"" -> ""1079_updateValueAtNow"";
""1079_destroyTokens"" -> ""1079_onlyController"";
""1079_balanceOfAt"" -> ""1079_min"";
""1079_generateTokens"" -> ""1079_onlyController"";
""1079_doTransfer"" -> ""1079_isContract"";
""1079_transferFrom"" -> ""1079_doTransfer"";
""1079_balanceOfAt"" -> ""1079_getValueAt"";
""1079_approve"" -> ""1079_isContract"";
""1079_destroyTokens"" -> ""1079_totalSupply"";
""1079_approveAndCall"" -> ""1079_approve"";
""1079_doTransfer"" -> ""1079_balanceOfAt"";
""1079_fallback"" -> ""1079_isContract"";
""1079_destroyTokens"" -> ""1079_balanceOf"";
""1079_destroyTokens"" -> ""1079_updateValueAtNow"";
""1079_generateTokens"" -> ""1079_balanceOf"";
""1079_generateTokens"" -> ""1079_updateValueAtNow"";
""1079_claimTokens"" -> ""1079_onlyController"";
}
"
0x75cb629408d1ea387df0a1f755e0bc371a5fa036.sol,GoodLuckCasino,"contract GoodLuckCasino is Ownable{ using SafeMath for uint; event LOG_Deposit(bytes32 userID, address walletAddr, uint amount); event LOG_Withdraw(address user, uint amount); event LOG_Bankroll(address sender, uint value); event LOG_OwnerWithdraw(address _to, uint _val); event LOG_ContractStopped(); event LOG_ContractResumed(); bool public isStopped; mapping (bytes32 => uint[]) depositList; modifier onlyIfNotStopped { require(!isStopped); _; }",1,"subgraph cluster_429_GoodLuckCasino {
label=""GoodLuckCasino"";
""429_userWithdraw"" [label=""userWithdraw""];
""429_bankroll"" [label=""bankroll""];
""429_ownerWithdraw"" [label=""ownerWithdraw""];
""429_getUserDeposit"" [label=""getUserDeposit""];
""429_resumeContract"" [label=""resumeContract""];
""429_stopContract"" [label=""stopContract""];
""429_userDeposit"" [label=""userDeposit""];
""429_constructor"" [label=""constructor""];
""429_fallback"" [label=""fallback""];
""429_getUserDepositList"" [label=""getUserDepositList""];
""429_ownerWithdraw"" -> ""429_onlyOwner"";
""429_userWithdraw"" -> ""429_onlyOwner"";
""429_stopContract"" -> ""429_onlyIfNotStopped"";
""429_userWithdraw"" -> ""429_onlyIfNotStopped"";
""429_bankroll"" -> ""429_onlyOwner"";
""429_stopContract"" -> ""429_onlyOwner"";
""429_resumeContract"" -> ""429_onlyIfStopped"";
""429_userDeposit"" -> ""429_onlyIfNotStopped"";
""429_resumeContract"" -> ""429_onlyOwner"";
}
"
0xecfeb4a1bb01e0a9530b40fd6bbe3954529393ec.sol,EnJoy,contract EnJoy { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_EnJoy {
label=""EnJoy"";
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0xec7ba2ff3c46b9417d34ca9941ae2f62268c5add.sol,AllYours,contract AllYours { address private _platformAddress = 0xbE9C1088FEEB8B48A96Da0231062eA757D0a9613; uint private _totalEth = 0.06 ether; uint128 private _oneceEth = 0.02 ether; uint256 private _period = 1; address private _owner; constructor() public{ _owner = msg.sender; },1,"subgraph cluster_765_AllYours {
label=""AllYours"";
""765_draw"" [label=""draw""];
""765_fallback"" [label=""fallback""];
""765_getHistory"" [label=""getHistory""];
""765_kill"" [label=""kill""];
""765_getPeriod"" [label=""getPeriod""];
""765_clear"" [label=""clear""];
""765_addressToString"" [label=""addressToString""];
""765_strConcat"" [label=""strConcat""];
""765_getCurrentJoinPersonNumber"" [label=""getCurrentJoinPersonNumber""];
""765_uint2str"" [label=""uint2str""];
""765_toBytes"" [label=""toBytes""];
""765_constructor"" [label=""constructor""];
""765_getCurrentBalance"" [label=""getCurrentBalance""];
""765_fallback"" -> ""765_uint2str"";
""765_fallback"" -> ""765_strConcat"";
""765_fallback"" -> ""765_draw"";
""765_fallback"" -> ""765_clear"";
""765_fallback"" -> ""765_addressToString"";
""765_draw"" -> ""765_toBytes"";
}
"
0xd64ad4eefaacb96a0865687cfeef4c4a2cfbfef2.sol,Mortal,contract Mortal is Owned { function kill() { if (msg.sender == owner) selfdestruct(owner); },1,"subgraph cluster_228_Mortal {
label=""Mortal"";
""228_kill"" [label=""kill""];
}
"
0x00416b9d728069edb0ceb04bc2b203fa7336d1f1.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_processTransaction"" [label=""processTransaction""];
""928_pullBalance"" [label=""pullBalance""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_refundTransaction"";
""928_fallback"" -> ""928_processTransaction"";
}
"
0x83e969a451253f1026e388ba2e3eef6aaa4cbca4.sol,MultiSigWallet,"contract MultiSigWallet { event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); uint constant public MAX_OWNER_COUNT = 50; mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1004_MultiSigWallet {
label=""MultiSigWallet"";
""1004_removeOwner"" [label=""removeOwner""];
""1004_MultiSigWallet"" [label=""MultiSigWallet""];
""1004_getConfirmations"" [label=""getConfirmations""];
""1004_getConfirmationCount"" [label=""getConfirmationCount""];
""1004_fallback"" [label=""fallback""];
""1004_getTransactionCount"" [label=""getTransactionCount""];
""1004_addOwner"" [label=""addOwner""];
""1004_executeTransaction"" [label=""executeTransaction""];
""1004_replaceOwner"" [label=""replaceOwner""];
""1004_external_call"" [label=""external_call""];
""1004_changeRequirement"" [label=""changeRequirement""];
""1004_isConfirmed"" [label=""isConfirmed""];
""1004_addTransaction"" [label=""addTransaction""];
""1004_confirmTransaction"" [label=""confirmTransaction""];
""1004_revokeConfirmation"" [label=""revokeConfirmation""];
""1004_submitTransaction"" [label=""submitTransaction""];
""1004_getTransactionIds"" [label=""getTransactionIds""];
""1004_getOwners"" [label=""getOwners""];
""1004_addOwner"" -> ""1004_validRequirement"";
""1004_executeTransaction"" -> ""1004_external_call"";
""1004_confirmTransaction"" -> ""1004_notConfirmed"";
""1004_revokeConfirmation"" -> ""1004_confirmed"";
""1004_executeTransaction"" -> ""1004_notExecuted"";
""1004_replaceOwner"" -> ""1004_onlyWallet"";
""1004_removeOwner"" -> ""1004_changeRequirement"";
""1004_executeTransaction"" -> ""1004_confirmed"";
""1004_changeRequirement"" -> ""1004_validRequirement"";
""1004_revokeConfirmation"" -> ""1004_notExecuted"";
""1004_addTransaction"" -> ""1004_notNull"";
""1004_submitTransaction"" -> ""1004_confirmTransaction"";
""1004_addOwner"" -> ""1004_onlyWallet"";
""1004_removeOwner"" -> ""1004_ownerExists"";
""1004_MultiSigWallet"" -> ""1004_validRequirement"";
""1004_submitTransaction"" -> ""1004_addTransaction"";
""1004_removeOwner"" -> ""1004_onlyWallet"";
""1004_confirmTransaction"" -> ""1004_executeTransaction"";
""1004_confirmTransaction"" -> ""1004_ownerExists"";
""1004_confirmTransaction"" -> ""1004_transactionExists"";
""1004_revokeConfirmation"" -> ""1004_ownerExists"";
""1004_replaceOwner"" -> ""1004_ownerDoesNotExist"";
""1004_addOwner"" -> ""1004_ownerDoesNotExist"";
""1004_executeTransaction"" -> ""1004_ownerExists"";
""1004_addOwner"" -> ""1004_notNull"";
""1004_executeTransaction"" -> ""1004_isConfirmed"";
""1004_changeRequirement"" -> ""1004_onlyWallet"";
""1004_replaceOwner"" -> ""1004_ownerExists"";
}
"
0x025dce2d39a46296766db7cac8c322e8f59cd5d9.sol,EthToSmthSwaps,contract EthToSmthSwaps { using SafeMath for uint; address public owner; address public ratingContractAddress; uint256 SafeTime = 1 hours; struct Swap { bytes32 secret; bytes20 secretHash; uint256 createdAt; uint256 balance; },1,"subgraph cluster_679_EthToSmthSwaps {
label=""EthToSmthSwaps"";
""679_withdr"" [label=""withdr""];
""679_withdraw"" [label=""withdraw""];
""679_getSecret"" [label=""getSecret""];
""679_close"" [label=""close""];
""679_abort"" [label=""abort""];
""679_checkSign"" [label=""checkSign""];
""679_clean"" [label=""clean""];
""679_getBalance"" [label=""getBalance""];
""679_sign"" [label=""sign""];
""679_setReputationAddress"" [label=""setReputationAddress""];
""679_createSwap"" [label=""createSwap""];
""679_refund"" [label=""refund""];
""679_constructor"" [label=""constructor""];
""679_abort"" -> ""679_clean"";
""679_refund"" -> ""679_clean"";
""679_close"" -> ""679_clean"";
}
"
0xc55a13e36d93371a5b036a21d913a31cd2804ba4.sol,NoteOfExchange,"contract NoteOfExchange is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; mapping (address => bool) public joinOnce; mapping (address => uint256) public frozenAccount; string internal name_ = ; string internal symbol_ = ; uint8 internal decimals_ = 8; uint256 internal totalSupply_ = 200000000e8; uint256 internal transGain=1; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 100000e8; uint256 public airdropBy0Eth = 1000e8; uint256 public officialHold = totalSupply_.mul(15).div(100); uint256 public minContribution = 1 ether / 10; bool internal distributionFinished = false; bool internal EthGetFinished = false; bool internal airdropBy0EthFinished = false; bool internal transferGainFinished = true; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event LockedFunds(address indexed target, uint256 locktime); modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1142_NoteOfExchange {
label=""NoteOfExchange"";
""1142_withdrawOtherTokens"" [label=""withdrawOtherTokens""];
""1142_startTransferGet"" [label=""startTransferGet""];
""1142_withdraw"" [label=""withdraw""];
""1142_balanceOf"" [label=""balanceOf""];
""1142_transferFrom"" [label=""transferFrom""];
""1142_getTokens"" [label=""getTokens""];
""1142_constructor"" [label=""constructor""];
""1142_startAirdropBy0Eth"" [label=""startAirdropBy0Eth""];
""1142_transferOwnership"" [label=""transferOwnership""];
""1142_name"" [label=""name""];
""1142_selfLockFunds"" [label=""selfLockFunds""];
""1142_startDistribution"" [label=""startDistribution""];
""1142_finishEthGet"" [label=""finishEthGet""];
""1142_totalSupply"" [label=""totalSupply""];
""1142_approve"" [label=""approve""];
""1142_allowance"" [label=""allowance""];
""1142_symbol"" [label=""symbol""];
""1142_updateParameter"" [label=""updateParameter""];
""1142_transfer"" [label=""transfer""];
""1142_finishAirdropBy0Eth"" [label=""finishAirdropBy0Eth""];
""1142_finishTransferGet"" [label=""finishTransferGet""];
""1142_fallback"" [label=""fallback""];
""1142_decimals"" [label=""decimals""];
""1142_burnFromAddress"" [label=""burnFromAddress""];
""1142_startEthGet"" [label=""startEthGet""];
""1142_burnFromTotal"" [label=""burnFromTotal""];
""1142_finishDistribution"" [label=""finishDistribution""];
""1142_distr"" [label=""distr""];
""1142_transfer"" -> ""1142_distr"";
""1142_transferOwnership"" -> ""1142_onlyOwner"";
""1142_finishAirdropBy0Eth"" -> ""1142_onlyOwner"";
""1142_finishEthGet"" -> ""1142_onlyOwner"";
""1142_getTokens"" -> ""1142_canDistr"";
""1142_distr"" -> ""1142_canDistr"";
""1142_fallback"" -> ""1142_getTokens"";
""1142_finishDistribution"" -> ""1142_onlyOwner"";
""1142_finishTransferGet"" -> ""1142_onlyOwner"";
""1142_startTransferGet"" -> ""1142_onlyOwner"";
""1142_startDistribution"" -> ""1142_onlyOwner"";
""1142_withdrawOtherTokens"" -> ""1142_onlyOwner"";
""1142_getTokens"" -> ""1142_distr"";
""1142_burnFromTotal"" -> ""1142_onlyOwner"";
""1142_constructor"" -> ""1142_distr"";
""1142_updateParameter"" -> ""1142_onlyOwner"";
""1142_withdraw"" -> ""1142_onlyOwner"";
""1142_startEthGet"" -> ""1142_onlyOwner"";
""1142_startAirdropBy0Eth"" -> ""1142_onlyOwner"";
""1142_transferFrom"" -> ""1142_onlyPayloadSize"";
""1142_burnFromAddress"" -> ""1142_onlyOwner"";
""1142_transfer"" -> ""1142_onlyPayloadSize"";
}
"
0x000621424c60951cb69e9d75d64b79813846d498.sol,HasNoEther,contract HasNoEther is Ownable { function HasNoEther() payable { require(msg.value == 0); },1,"subgraph cluster_197_HasNoEther {
label=""HasNoEther"";
""197_HasNoEther"" [label=""HasNoEther""];
""197_reclaimEther"" [label=""reclaimEther""];
""197_fallback"" [label=""fallback""];
""197_reclaimEther"" -> ""197_onlyOwner"";
}
"
0xd41d48be0a81690a785bf1df336163f7b78eadca.sol,Crypland,contract Crypland { struct Element {uint worth; uint level; uint cooldown;},1,"subgraph cluster_1579_Crypland {
label=""Crypland"";
""1579_publicGetElement"" [label=""publicGetElement""];
""1579_ownerWithdraw"" [label=""ownerWithdraw""];
""1579_calcAssetBuyPrice"" [label=""calcAssetBuyPrice""];
""1579_userAssignElement"" [label=""userAssignElement""];
""1579_calcElementCooldown"" [label=""calcElementCooldown""];
""1579_calcAssetWorthIndex"" [label=""calcAssetWorthIndex""];
""1579_ownerDestroy"" [label=""ownerDestroy""];
""1579_ownerUnpause"" [label=""ownerUnpause""];
""1579_publicGetElementOffer"" [label=""publicGetElementOffer""];
""1579_userOfferCancelElement"" [label=""userOfferCancelElement""];
""1579_userOfferAcceptElement"" [label=""userOfferAcceptElement""];
""1579_userUpgradeElement"" [label=""userUpgradeElement""];
""1579_calcElementCurrentPrice"" [label=""calcElementCurrentPrice""];
""1579_calcAssetMax"" [label=""calcAssetMax""];
""1579_ownerPause"" [label=""ownerPause""];
""1579_publicGetAsset"" [label=""publicGetAsset""];
""1579_calcAssetUpgradePrice"" [label=""calcAssetUpgradePrice""];
""1579_calcAssetAssigned"" [label=""calcAssetAssigned""];
""1579_userOfferSubmitElement"" [label=""userOfferSubmitElement""];
""1579_calcElementWorth"" [label=""calcElementWorth""];
""1579_Crypland"" [label=""Crypland""];
""1579_ownerDestroy"" -> ""1579_whenOwner"";
""1579_publicGetAsset"" -> ""1579_calcAssetWorthIndex"";
""1579_userOfferCancelElement"" -> ""1579_whenElementHolder"";
""1579_userUpgradeElement"" -> ""1579_calcElementWorth"";
""1579_userAssignElement"" -> ""1579_calcAssetMax"";
""1579_userAssignElement"" -> ""1579_whenNotPaused"";
""1579_ownerPause"" -> ""1579_whenNotPaused"";
""1579_userUpgradeElement"" -> ""1579_calcAssetUpgradePrice"";
""1579_publicGetAsset"" -> ""1579_calcAssetMax"";
""1579_userOfferCancelElement"" -> ""1579_whenNotPaused"";
""1579_userOfferAcceptElement"" -> ""1579_whenNotPaused"";
""1579_ownerUnpause"" -> ""1579_whenOwner"";
""1579_userOfferAcceptElement"" -> ""1579_whenNotElementHolder"";
""1579_userOfferAcceptElement"" -> ""1579_calcElementWorth"";
""1579_userAssignElement"" -> ""1579_calcAssetAssigned"";
""1579_ownerPause"" -> ""1579_whenOwner"";
""1579_userAssignElement"" -> ""1579_calcAssetBuyPrice"";
""1579_userUpgradeElement"" -> ""1579_whenElementHolder"";
""1579_calcAssetUpgradePrice"" -> ""1579_calcAssetWorthIndex"";
""1579_publicGetElement"" -> ""1579_calcElementWorth"";
""1579_ownerUnpause"" -> ""1579_whenPaused"";
""1579_userOfferSubmitElement"" -> ""1579_whenNotPaused"";
""1579_publicGetElement"" -> ""1579_calcElementCooldown"";
""1579_userOfferSubmitElement"" -> ""1579_whenElementHolder"";
""1579_userOfferAcceptElement"" -> ""1579_calcElementCurrentPrice"";
""1579_publicGetAsset"" -> ""1579_calcAssetAssigned"";
""1579_publicGetElement"" -> ""1579_calcElementCurrentPrice"";
""1579_publicGetAsset"" -> ""1579_calcAssetUpgradePrice"";
""1579_ownerWithdraw"" -> ""1579_whenOwner"";
""1579_calcElementWorth"" -> ""1579_calcAssetWorthIndex"";
""1579_publicGetAsset"" -> ""1579_calcAssetBuyPrice"";
""1579_userUpgradeElement"" -> ""1579_whenNotPaused"";
}
"
0xcf91d43b85a5c53d85c567d4eed972965335aeea.sol,Slaughter3D,contract Slaughter3D is Owned { using SafeMath for uint; Snip3DInterface constant Snip3Dcontract_ = Snip3DInterface(0xb172BB8BAae74F27Ade3211E0c145388d3b4f8d8); function harvestableBalance() view public returns(uint256) { return ( address(this).balance) ; },1,"subgraph cluster_263_Slaughter3D {
label=""Slaughter3D"";
""263_fetchBalance"" [label=""fetchBalance""];
""263_validate"" [label=""validate""];
""263_fallback"" [label=""fallback""];
""263_fetchvault"" [label=""fetchvault""];
""263_harvestableBalance"" [label=""harvestableBalance""];
""263_sacUp"" [label=""sacUp""];
""263_unfetchedVault"" [label=""unfetchedVault""];
""263_fetchBalance"" -> ""263_onlyOwner"";
""263_sacUp"" -> ""263_onlyOwner"";
""263_validate"" -> ""263_onlyOwner"";
}
"
0x1ca6a09e02480be25c10284372cd21fde7d35a79.sol,ExhibationLinkingCoin,contract ExhibationLinkingCoin is ERC20Interface { function totalSupply()public constant returns (uint) { return totalEXLCSupply; },1,"subgraph cluster_1901_ExhibationLinkingCoin {
label=""ExhibationLinkingCoin"";
""1901_allowance"" [label=""allowance""];
""1901_sendMarketByOwner"" [label=""sendMarketByOwner""];
""1901_fallback"" [label=""fallback""];
""1901_transfer"" [label=""transfer""];
""1901_safeToNextIdx"" [label=""safeToNextIdx""];
""1901_sendMinerByOwner"" [label=""sendMinerByOwner""];
""1901_TryUnLockBalance"" [label=""TryUnLockBalance""];
""1901_StartIco"" [label=""StartIco""];
""1901_miningEveryDay"" [label=""miningEveryDay""];
""1901_sendCreatorByOwner"" [label=""sendCreatorByOwner""];
""1901_changeAutherOwner"" [label=""changeAutherOwner""];
""1901_sendJigouByOwner"" [label=""sendJigouByOwner""];
""1901_destruct"" [label=""destruct""];
""1901_StopIco"" [label=""StopIco""];
""1901_transferFrom"" [label=""transferFrom""];
""1901_balanceOf"" [label=""balanceOf""];
""1901_setOperater"" [label=""setOperater""];
""1901_totalSupply"" [label=""totalSupply""];
""1901_sendBussinessByOwner"" [label=""sendBussinessByOwner""];
""1901_constructor"" [label=""constructor""];
""1901_QueryUnlockTime"" [label=""QueryUnlockTime""];
""1901_Save"" [label=""Save""];
""1901_sendICOByOwner"" [label=""sendICOByOwner""];
""1901_approve"" [label=""approve""];
""1901_sendICOByOwner"" -> ""1901_safeToNextIdx"";
""1901_sendJigouByOwner"" -> ""1901_safeToNextIdx"";
""1901_sendMinerByOwner"" -> ""1901_safeToNextIdx"";
""1901_transferFrom"" -> ""1901_TryUnLockBalance"";
""1901_sendCreatorByOwner"" -> ""1901_safeToNextIdx"";
""1901_sendMarketByOwner"" -> ""1901_safeToNextIdx"";
""1901_fallback"" -> ""1901_safeToNextIdx"";
""1901_sendBussinessByOwner"" -> ""1901_safeToNextIdx"";
""1901_transfer"" -> ""1901_TryUnLockBalance"";
}
"
0x3ac0d29eaf16eb423e07387274a05a1e16a8472b.sol,LuckyNumber,"contract LuckyNumber { address owner; uint winningNumber = uint(keccak256(now, owner)) % 10; function LuckyNumber() public { owner = msg.sender; }",1,"subgraph cluster_106_LuckyNumber {
label=""LuckyNumber"";
""106_kill"" [label=""kill""];
""106_LuckyNumber"" [label=""LuckyNumber""];
""106_getOwner"" [label=""getOwner""];
""106_takeAGuess"" [label=""takeAGuess""];
""106_fallback"" [label=""fallback""];
""106_addBalance"" [label=""addBalance""];
""106_getBalance"" [label=""getBalance""];
}
"
0xc398891b43f1b91158dca87c63a88b80d000c248.sol,IBIT,"contract IBIT is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 45 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 950000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 1000021e8; uint public target0drop = 5000000; uint public progress0drop = 0; address multisig = 0x723D0666908ADdc626C29407F0B5e7C0881b5185; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_IBIT {
label=""IBIT"";
""1261_add"" [label=""add""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_constructor"" [label=""constructor""];
""1261_fallback"" [label=""fallback""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_approve"" [label=""approve""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_allowance"" [label=""allowance""];
""1261_burn"" [label=""burn""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdraw"" [label=""withdraw""];
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_distr"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
}
"
0x18aaad578e74913df4255c126f2a0bd9e3399ec7.sol,test_contract,contract test_contract { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_test_contract {
label=""test_contract"";
""143_fallback"" [label=""fallback""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_StopGame"" [label=""StopGame""];
""143_ActivateContract"" [label=""ActivateContract""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
}
"
0xecfeb4a1bb01e0a9530b40fd6bbe3954529393ec.sol,EnJoy,contract EnJoy { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_EnJoy {
label=""EnJoy"";
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x376cbf6b8b7583f52192009e0cee250855ca9ea5.sol,TTCSale,"contract TTCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 30000; bool private rentrancy_lock = false; TTCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1575_TTCSale {
label=""TTCSale"";
""1575_checkFundingGoal"" [label=""checkFundingGoal""];
""1575_changeStartTime"" [label=""changeStartTime""];
""1575_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1575_fallback"" [label=""fallback""];
""1575_setRate"" [label=""setRate""];
""1575_currentTime"" [label=""currentTime""];
""1575_terminate"" [label=""terminate""];
""1575_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1575_checkFundingCap"" [label=""checkFundingCap""];
""1575_TTCSale"" [label=""TTCSale""];
""1575_safeWithdrawal"" [label=""safeWithdrawal""];
""1575_changeEndTime"" [label=""changeEndTime""];
""1575_convertToMiniTtc"" [label=""convertToMiniTtc""];
""1575_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1575_fallback"" -> ""1575_whenNotPaused"";
""1575_ownerAllocateTokens"" -> ""1575_checkFundingGoal"";
""1575_changeEndTime"" -> ""1575_onlyOwner"";
""1575_fallback"" -> ""1575_saleNotClosed"";
""1575_terminate"" -> ""1575_onlyOwner"";
""1575_fallback"" -> ""1575_checkFundingGoal"";
""1575_ownerUnlockFund"" -> ""1575_onlyOwner"";
""1575_ownerSafeWithdrawal"" -> ""1575_nonReentrant"";
""1575_changeStartTime"" -> ""1575_onlyOwner"";
""1575_ownerSafeWithdrawal"" -> ""1575_onlyOwner"";
""1575_fallback"" -> ""1575_checkFundingCap"";
""1575_fallback"" -> ""1575_beforeDeadline"";
""1575_ownerAllocateTokens"" -> ""1575_onlyOwner"";
""1575_ownerAllocateTokens"" -> ""1575_nonReentrant"";
""1575_fallback"" -> ""1575_afterStartTime"";
""1575_ownerAllocateTokens"" -> ""1575_checkFundingCap"";
""1575_fallback"" -> ""1575_nonReentrant"";
""1575_ownerUnlockFund"" -> ""1575_afterDeadline"";
""1575_TTCSale"" -> ""1575_setRate"";
""1575_safeWithdrawal"" -> ""1575_afterDeadline"";
""1575_setRate"" -> ""1575_onlyOwner"";
""1575_safeWithdrawal"" -> ""1575_nonReentrant"";
}
"
0x9b2f30c69f31559c99a04dcdfa19de1b1cf9d265.sol,Destructible,contract Destructible is Ownable { constructor() public payable { },1,"subgraph cluster_238_Destructible {
label=""Destructible"";
""238_destroyAndSend"" [label=""destroyAndSend""];
""238_destroy"" [label=""destroy""];
""238_constructor"" [label=""constructor""];
""238_destroyAndSend"" -> ""238_onlyOwner"";
""238_destroy"" -> ""238_onlyOwner"";
}
"
0xc710772a16fd040ed9c63de0679a57410981e3fc.sol,EthVault,"contract EthVault is TokenVault { string public constant version = ; event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event OpenDate(uint date); mapping (address => uint) public Deposits; uint minDeposit; bool Locked; uint Date; function init() payable open { Owner = msg.sender; minDeposit = 0.25 ether; Locked = false; deposit(); }",1,"subgraph cluster_350_EthVault {
label=""EthVault"";
""350_MinimumDeposit"" [label=""MinimumDeposit""];
""350_lock"" [label=""lock""];
""350_fallback"" [label=""fallback""];
""350_withdraw"" [label=""withdraw""];
""350_getOwner"" [label=""getOwner""];
""350_deposit"" [label=""deposit""];
""350_kill"" [label=""kill""];
""350_init"" [label=""init""];
""350_WithdrawEnabled"" [label=""WithdrawEnabled""];
""350_ReleaseDate"" [label=""ReleaseDate""];
""350_setRelease"" [label=""setRelease""];
""350_fallback"" -> ""350_deposit"";
""350_deposit"" -> ""350_MinimumDeposit"";
""350_init"" -> ""350_open"";
""350_init"" -> ""350_deposit"";
""350_withdraw"" -> ""350_onlyOwner"";
""350_withdraw"" -> ""350_WithdrawEnabled"";
}
"
0x269b4c23ddab676e2869ae72cd6ae4f24bdfea45.sol,IRBPreRefundVault,"contract IRBPreRefundVault is Ownable { using SafeMath for uint256; enum State {Active, Refunding, Closed}",1,"subgraph cluster_1155_IRBPreRefundVault {
label=""IRBPreRefundVault"";
""1155_kill"" [label=""kill""];
""1155_IRBPreRefundVault"" [label=""IRBPreRefundVault""];
""1155_refund"" [label=""refund""];
""1155_withdraw"" [label=""withdraw""];
""1155_close"" [label=""close""];
""1155_deposit"" [label=""deposit""];
""1155_enableRefunds"" [label=""enableRefunds""];
""1155_setPreCrowdsaleAddress"" [label=""setPreCrowdsaleAddress""];
""1155_setPreCrowdsaleAddress"" -> ""1155_onlyOwner"";
""1155_enableRefunds"" -> ""1155_onlyCrowdsaleContract"";
""1155_close"" -> ""1155_onlyCrowdsaleContract"";
""1155_withdraw"" -> ""1155_onlyCrowdsaleContract"";
""1155_kill"" -> ""1155_onlyOwner"";
""1155_deposit"" -> ""1155_onlyCrowdsaleContract"";
}
"
0x17478cc05e51da20a27bbdf66fbe4a16aae81842.sol,AuctionPotato,"contract AuctionPotato { using SafeMath for uint256; address public owner; uint public startTime; uint public endTime; string public infoUrl; string name; bool started; uint public potato; uint oldPotato; uint oldHighestBindingBid; address creatureOwner; address creature_newOwner; event CreatureOwnershipTransferred(address indexed _from, address indexed _to); bool public canceled; uint public highestBindingBid; address public highestBidder; bool blockerPay; bool blockerWithdraw; mapping(address => uint256) public fundsByBidder; bool ownerHasWithdrawn; event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid); event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount); event LogCanceled(); constructor() public { blockerWithdraw = false; blockerPay = false; owner = msg.sender; creatureOwner = owner; highestBindingBid = 2000000000000000; potato = 0; started = false; name = ; infoUrl = ""https: }",1,"subgraph cluster_771_AuctionPotato {
label=""AuctionPotato"";
""771_getHighestBid"" [label=""getHighestBid""];
""771_acceptCreatureOwnership"" [label=""acceptCreatureOwnership""];
""771_timeLeft"" [label=""timeLeft""];
""771_nextNextBid"" [label=""nextNextBid""];
""771_placeBid"" [label=""placeBid""];
""771_nextBid"" [label=""nextBid""];
""771_ownerCanWithdraw"" [label=""ownerCanWithdraw""];
""771_constructor"" [label=""constructor""];
""771_fuelContract"" [label=""fuelContract""];
""771_cancelAuction"" [label=""cancelAuction""];
""771_balance"" [label=""balance""];
""771_auctionName"" [label=""auctionName""];
""771_withdraw"" [label=""withdraw""];
""771_queryCreatureOwner"" [label=""queryCreatureOwner""];
""771_startAuction"" [label=""startAuction""];
""771_isStarted"" [label=""isStarted""];
""771_transferCreatureOwnership"" [label=""transferCreatureOwnership""];
""771_cancelAuction"" -> ""771_onlyNotCanceled"";
""771_cancelAuction"" -> ""771_onlyBeforeEnd"";
""771_placeBid"" -> ""771_onlyBeforeEnd"";
""771_placeBid"" -> ""771_onlyNotOwner"";
""771_placeBid"" -> ""771_onlyAfterStart"";
""771_cancelAuction"" -> ""771_onlyOwner"";
""771_fuelContract"" -> ""771_onlyOwner"";
""771_placeBid"" -> ""771_onlyNotCanceled"";
""771_startAuction"" -> ""771_onlyOwner"";
}
"
0x945f171de4ea81a213dcc7a1e8c4f6feb3b4b806.sol,ECP_Token,"contract ECP_Token { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public remaining; address public owner; uint public icoStatus; address public benAddress; address public bkaddress; uint public allowTransferToken; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event TokenTransferEvent(address indexed from, address indexed to, uint256 value, string typex); function ECP_Token() public { totalSupply = 15000000000000000000000000000; owner = msg.sender; balanceOf[owner] = totalSupply; name = ; symbol = ; decimals = 18; remaining = totalSupply; icoStatus = 1; benAddress = 0xe4a7a715bE044186a3ac5C60c7Df7dD1215f7419; bkaddress = 0x44e00602e4B8F546f76983de2489d636CB443722; allowTransferToken = 1; }",1,"subgraph cluster_745_ECP_Token {
label=""ECP_Token"";
""745_withdraw_all"" [label=""withdraw_all""];
""745_freezeAccount"" [label=""freezeAccount""];
""745_withdraw"" [label=""withdraw""];
""745_transferOwnership"" [label=""transferOwnership""];
""745_sendTokenToSingleAccount"" [label=""sendTokenToSingleAccount""];
""745__transfer"" [label=""_transfer""];
""745_burn"" [label=""burn""];
""745_sendToMultipleAccount"" [label=""sendToMultipleAccount""];
""745_approveAndCall"" [label=""approveAndCall""];
""745_approve"" [label=""approve""];
""745_adm_trasfer"" [label=""adm_trasfer""];
""745_changeIcoStatus"" [label=""changeIcoStatus""];
""745_fallback"" [label=""fallback""];
""745_setTransferStatus"" [label=""setTransferStatus""];
""745_totalSupply"" [label=""totalSupply""];
""745_transferFrom"" [label=""transferFrom""];
""745_balanceOf"" [label=""balanceOf""];
""745_burnFrom"" [label=""burnFrom""];
""745_transfer"" [label=""transfer""];
""745_mintToken"" [label=""mintToken""];
""745_ECP_Token"" [label=""ECP_Token""];
""745_transfer"" -> ""745__transfer"";
""745_adm_trasfer"" -> ""745_onlyOwner"";
""745_transferFrom"" -> ""745__transfer"";
""745_withdraw_all"" -> ""745_onlyOwner"";
""745_setTransferStatus"" -> ""745_onlyOwner"";
""745_freezeAccount"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745__transfer"";
""745_sendToMultipleAccount"" -> ""745_onlyOwner"";
""745_mintToken"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745_onlyOwner"";
""745_transferOwnership"" -> ""745_onlyOwner"";
""745_sendToMultipleAccount"" -> ""745__transfer"";
""745_approveAndCall"" -> ""745_approve"";
""745_adm_trasfer"" -> ""745__transfer"";
""745_withdraw"" -> ""745_onlyOwner"";
""745_changeIcoStatus"" -> ""745_onlyOwner"";
}
"
0x50a667b73223bc612bcc43200120b5c46ee6b4e9.sol,RCpro,"contract RCpro is ICOEngineInterface, KYCBase { using SafeMath for uint256; TokenSale tokenSaleContract; uint256 public startTime; uint256 public endTime; uint256 public etherMinimum; uint256 public soldTokens; uint256 public remainingTokens; uint256[] public oneTokenInFiatWei; uint256[] public sendThreshold; mapping(address => uint256) public etherUser; mapping(address => uint256) public pendingTokenUser; mapping(address => uint256) public tokenUser; uint256[] public tokenThreshold; uint256[] public bonusThreshold; function RCpro(address _tokenSaleContract, uint256[] _oneTokenInFiatWei, uint256[] _sendThreshold, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) { require ( _tokenSaleContract != 0 ); require ( _oneTokenInFiatWei[0] != 0 ); require ( _oneTokenInFiatWei.length == _sendThreshold.length ); require( _remainingTokens != 0 ); require ( _tokenThreshold.length != 0 ); require ( _tokenThreshold.length == _bonusThreshold.length ); bonusThreshold = _bonusThreshold; tokenThreshold = _tokenThreshold; tokenSaleContract = TokenSale(_tokenSaleContract); tokenSaleContract.addMeByRC(); soldTokens = 0; remainingTokens = _remainingTokens; oneTokenInFiatWei = _oneTokenInFiatWei; sendThreshold = _sendThreshold; etherMinimum = _etherMinimum; setTimeRC( _startTime, _endTime ); }",1,"subgraph cluster_1999_RCpro {
label=""RCpro"";
""1999_changeMinimum"" [label=""changeMinimum""];
""1999_totalTokens"" [label=""totalTokens""];
""1999_price"" [label=""price""];
""1999_userBalance"" [label=""userBalance""];
""1999_claimTokenBonus"" [label=""claimTokenBonus""];
""1999_startTime"" [label=""startTime""];
""1999_ended"" [label=""ended""];
""1999_fallback"" [label=""fallback""];
""1999_endTime"" [label=""endTime""];
""1999_giveToken"" [label=""giveToken""];
""1999_releaseTokensTo"" [label=""releaseTokensTo""];
""1999_withdraw"" [label=""withdraw""];
""1999_takeEther"" [label=""takeEther""];
""1999_refundEther"" [label=""refundEther""];
""1999_setTime"" [label=""setTime""];
""1999_setTimeRC"" [label=""setTimeRC""];
""1999_remainingTokens"" [label=""remainingTokens""];
""1999_started"" [label=""started""];
""1999_RCpro"" [label=""RCpro""];
""1999_RCpro"" -> ""1999_KYCBase"";
""1999_releaseTokensTo"" -> ""1999_takeEther"";
""1999_refundEther"" -> ""1999_onlyTokenSaleOwner"";
""1999_releaseTokensTo"" -> ""1999_giveToken"";
""1999_fallback"" -> ""1999_claimTokenBonus"";
""1999_changeMinimum"" -> ""1999_onlyTokenSaleOwner"";
""1999_fallback"" -> ""1999_takeEther"";
""1999_setTime"" -> ""1999_onlyTokenSaleOwner"";
""1999_withdraw"" -> ""1999_onlyTokenSaleOwner"";
""1999_RCpro"" -> ""1999_setTimeRC"";
}
"
0xf29a03e88c425116c979892d475f5cddf1f742ce.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; address public owner; uint256 public amountRaised; uint256 public amountRaisedPhase; uint256 public price; token public tokenReward; mapping(address => uint256) public balanceOf; event FundTransfer(address backer, uint amount, bool isContribution); modifier onlyOwner() { require(msg.sender == owner); _; }",1,"subgraph cluster_270_Crowdsale {
label=""Crowdsale"";
""270_fallback"" [label=""fallback""];
""270_Crowdsale"" [label=""Crowdsale""];
""270_destroy"" [label=""destroy""];
""270_destroyAndSend"" [label=""destroyAndSend""];
""270_safeWithdrawal"" [label=""safeWithdrawal""];
""270_destroyAndSend"" -> ""270_onlyOwner"";
""270_destroy"" -> ""270_onlyOwner"";
""270_safeWithdrawal"" -> ""270_onlyOwner"";
}
"
0x0460dcb54214fdf68302b4c733ad7ed827dd6592.sol,evequiz,contract evequiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_evequiz {
label=""evequiz"";
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_New"" [label=""New""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x733237b46b1fd6bd3266c9b6daae1c018a9d9493.sol,TFTOKEN,"contract TFTOKEN is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 8; uint256 public constant INITIAL_SUPPLY = 65000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function TFTOKEN() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_TFTOKEN {
label=""TFTOKEN"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_TFTOKEN"" [label=""TFTOKEN""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x029606e5ec44cad1346d6a1273a53b971fa93ad6.sol,Owned,contract Owned { address private Owner; function Owned() public{ Owner = msg.sender; },1,"subgraph cluster_150_Owned {
label=""Owned"";
""150_Terminate"" [label=""Terminate""];
""150_TransferOwner"" [label=""TransferOwner""];
""150_Owned"" [label=""Owned""];
""150_IsOwner"" [label=""IsOwner""];
""150_Terminate"" -> ""150_onlyOwner"";
""150_TransferOwner"" -> ""150_onlyOwner"";
}
"
0x1d91b86e5c7b5e85a61eaaea9762958747712826.sol,Token,contract Token is TokenI { using SafeMath for uint256; address public owner; struct FreezeInfo { address user; uint256 amount; },1,"subgraph cluster_229_TokenController {
label=""TokenController"";
""229_onTransfer"" [label=""onTransfer""];
""229_onApprove"" [label=""onApprove""];
""229_proxyPayment"" [label=""proxyPayment""];
}
"
0x50a667b73223bc612bcc43200120b5c46ee6b4e9.sol,RCpro,"contract RCpro is ICOEngineInterface, KYCBase { using SafeMath for uint256; TokenSale tokenSaleContract; uint256 public startTime; uint256 public endTime; uint256 public etherMinimum; uint256 public soldTokens; uint256 public remainingTokens; uint256[] public oneTokenInFiatWei; uint256[] public sendThreshold; mapping(address => uint256) public etherUser; mapping(address => uint256) public pendingTokenUser; mapping(address => uint256) public tokenUser; uint256[] public tokenThreshold; uint256[] public bonusThreshold; function RCpro(address _tokenSaleContract, uint256[] _oneTokenInFiatWei, uint256[] _sendThreshold, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) { require ( _tokenSaleContract != 0 ); require ( _oneTokenInFiatWei[0] != 0 ); require ( _oneTokenInFiatWei.length == _sendThreshold.length ); require( _remainingTokens != 0 ); require ( _tokenThreshold.length != 0 ); require ( _tokenThreshold.length == _bonusThreshold.length ); bonusThreshold = _bonusThreshold; tokenThreshold = _tokenThreshold; tokenSaleContract = TokenSale(_tokenSaleContract); tokenSaleContract.addMeByRC(); soldTokens = 0; remainingTokens = _remainingTokens; oneTokenInFiatWei = _oneTokenInFiatWei; sendThreshold = _sendThreshold; etherMinimum = _etherMinimum; setTimeRC( _startTime, _endTime ); }",1,"subgraph cluster_1999_RCpro {
label=""RCpro"";
""1999_changeMinimum"" [label=""changeMinimum""];
""1999_totalTokens"" [label=""totalTokens""];
""1999_price"" [label=""price""];
""1999_userBalance"" [label=""userBalance""];
""1999_claimTokenBonus"" [label=""claimTokenBonus""];
""1999_startTime"" [label=""startTime""];
""1999_ended"" [label=""ended""];
""1999_fallback"" [label=""fallback""];
""1999_endTime"" [label=""endTime""];
""1999_giveToken"" [label=""giveToken""];
""1999_releaseTokensTo"" [label=""releaseTokensTo""];
""1999_withdraw"" [label=""withdraw""];
""1999_takeEther"" [label=""takeEther""];
""1999_refundEther"" [label=""refundEther""];
""1999_setTime"" [label=""setTime""];
""1999_setTimeRC"" [label=""setTimeRC""];
""1999_remainingTokens"" [label=""remainingTokens""];
""1999_started"" [label=""started""];
""1999_RCpro"" [label=""RCpro""];
""1999_RCpro"" -> ""1999_KYCBase"";
""1999_releaseTokensTo"" -> ""1999_takeEther"";
""1999_refundEther"" -> ""1999_onlyTokenSaleOwner"";
""1999_releaseTokensTo"" -> ""1999_giveToken"";
""1999_fallback"" -> ""1999_claimTokenBonus"";
""1999_changeMinimum"" -> ""1999_onlyTokenSaleOwner"";
""1999_fallback"" -> ""1999_takeEther"";
""1999_setTime"" -> ""1999_onlyTokenSaleOwner"";
""1999_withdraw"" -> ""1999_onlyTokenSaleOwner"";
""1999_RCpro"" -> ""1999_setTimeRC"";
}
"
0x6f84faf2ce621f5a4ba161f055a56daffbf78b04.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_817_Destructible {
label=""Destructible"";
""817_destroy"" [label=""destroy""];
""817_destroyAndSend"" [label=""destroyAndSend""];
""817_Destructible"" [label=""Destructible""];
""817_destroyAndSend"" -> ""817_onlyOwner"";
""817_destroy"" -> ""817_onlyOwner"";
}
"
0x2736d225f85740f42d17987100dc8d58e9e16252.sol,ServerRegistry,"contract ServerRegistry { event LogServerRegistered(string url, uint props, address owner, uint deposit); event LogServerUnregisterRequested(string url, address owner, address caller); event LogServerUnregisterCanceled(string url, address owner); event LogServerConvicted(string url, address owner); event LogServerRemoved(string url, address owner); struct In3Server { string url; address owner; uint deposit; uint props; uint128 unregisterTime; uint128 unregisterDeposit; address unregisterCaller; }",1,"subgraph cluster_663_ServerRegistry {
label=""ServerRegistry"";
""663_updateServer"" [label=""updateServer""];
""663_convict"" [label=""convict""];
""663_checkLimits"" [label=""checkLimits""];
""663_requestUnregisteringServer"" [label=""requestUnregisteringServer""];
""663_totalServers"" [label=""totalServers""];
""663_cancelUnregisteringServer"" [label=""cancelUnregisteringServer""];
""663_calcUnregisterDeposit"" [label=""calcUnregisterDeposit""];
""663_confirmUnregisteringServer"" [label=""confirmUnregisteringServer""];
""663_registerServer"" [label=""registerServer""];
""663_removeServer"" [label=""removeServer""];
""663_requestUnregisteringServer"" -> ""663_calcUnregisterDeposit"";
""663_confirmUnregisteringServer"" -> ""663_removeServer"";
""663_registerServer"" -> ""663_checkLimits"";
""663_updateServer"" -> ""663_checkLimits"";
""663_convict"" -> ""663_removeServer"";
}
"
0x32ceb540334300bcd53836a25a4bd64d607babd8.sol,BetGame,contract BetGame is DSStop { using SafeMath for uint256; struct Bet { address player; bytes32 secretHash; uint256 amount; uint roundId; bool isRevealed; uint nonce; bool guessOdd; bytes32 secret; },1,"subgraph cluster_1932_BetGame {
label=""BetGame"";
""1932_BetGame"" [label=""BetGame""];
""1932_getBlockNumber"" [label=""getBlockNumber""];
""1932_onTokenTransfer"" [label=""onTokenTransfer""];
""1932_startRoundWithFirstBet"" [label=""startRoundWithFirstBet""];
""1932_getJackpotResults"" [label=""getJackpotResults""];
""1932_claimTokens"" [label=""claimTokens""];
""1932_receiveToken"" [label=""receiveToken""];
""1932_withdraw"" [label=""withdraw""];
""1932_claimFromPool"" [label=""claimFromPool""];
""1932_betRevealed"" [label=""betRevealed""];
""1932_getBetSizeAtRound"" [label=""getBetSizeAtRound""];
""1932_addRound"" [label=""addRound""];
""1932_revealBet"" [label=""revealBet""];
""1932_finalizeRewardForBet"" [label=""finalizeRewardForBet""];
""1932_getBetIdAtRound"" [label=""getBetIdAtRound""];
""1932_tokenFallback"" [label=""tokenFallback""];
""1932_finalizeRound"" [label=""finalizeRound""];
""1932_calculateSecretHash"" [label=""calculateSecretHash""];
""1932_betWithRound"" [label=""betWithRound""];
""1932_finalizeRewardForRound"" [label=""finalizeRewardForRound""];
""1932_isPlayerInRound"" [label=""isPlayerInRound""];
""1932_getBetIds"" [label=""getBetIds""];
""1932_addBet"" [label=""addBet""];
""1932_startRoundWithFirstBet"" -> ""1932_addBet"";
""1932_finalizeRewardForRound"" -> ""1932_finalizeRewardForBet"";
""1932_claimFromPool"" -> ""1932_auth"";
""1932_startRoundWithFirstBet"" -> ""1932_addRound"";
""1932_betWithRound"" -> ""1932_isPlayerInRound"";
""1932_betWithRound"" -> ""1932_getBlockNumber"";
""1932_finalizeRound"" -> ""1932_finalizeRewardForRound"";
""1932_betWithRound"" -> ""1932_tokenPayable"";
""1932_addBet"" -> ""1932_notNull"";
""1932_finalizeRewardForRound"" -> ""1932_getJackpotResults"";
""1932_finalizeRound"" -> ""1932_getBlockNumber"";
""1932_addRound"" -> ""1932_getBlockNumber"";
""1932_startRoundWithFirstBet"" -> ""1932_tokenPayable"";
""1932_finalizeRound"" -> ""1932_betRevealed"";
""1932_claimTokens"" -> ""1932_auth"";
""1932_betWithRound"" -> ""1932_addBet"";
}
"
0x8b548505babfd983fc45210499b44e340bb85d76.sol,Hedgely,"contract Hedgely is Ownable, Syndicate { address[] private players; mapping(address => bool) private activePlayers; uint256 numPlayers = 0; mapping(address => uint256 [10] ) private playerPortfolio; uint256 public totalHedgelyWinnings; uint256 public totalHedgelyInvested; uint256[10] private marketOptions; uint256 public totalInvested; uint256 private seedInvestment; uint256 public numberOfInvestments; uint256 public numberWinner; uint256 public startingBlock; uint256 public endingBlock; uint256 public sessionBlockSize; uint256 public sessionNumber; uint256 public currentLowest; uint256 public currentLowestCount; uint256 public precision = 1000000000000000; uint256 public minimumStake = 1 finney; event Invest( address _from, uint256 _option, uint256 _value, uint256[10] _marketOptions, uint _blockNumber ); event EndSession( uint256 _sessionNumber, uint256 _winningOption, uint256[10] _marketOptions, uint256 _blockNumber ); event StartSession( uint256 _sessionNumber, uint256 _sessionBlockSize, uint256[10] _marketOptions, uint256 _blockNumber ); bool locked; modifier noReentrancy() { require(!locked); locked = true; _; locked = false; }",1,"subgraph cluster_1163_Hedgely {
label=""Hedgely"";
""1163_rand"" [label=""rand""];
""1163_random"" [label=""random""];
""1163_Hedgely"" [label=""Hedgely""];
""1163_distributeWinnings"" [label=""distributeWinnings""];
""1163_withdraw"" [label=""withdraw""];
""1163_getPlayerPortfolio"" [label=""getPlayerPortfolio""];
""1163_numberOfInvestors"" [label=""numberOfInvestors""];
""1163_getMarketOptions"" [label=""getMarketOptions""];
""1163_resetMarket"" [label=""resetMarket""];
""1163_fallback"" [label=""fallback""];
""1163_findCurrentLowest"" [label=""findCurrentLowest""];
""1163_kill"" [label=""kill""];
""1163_insertPlayer"" [label=""insertPlayer""];
""1163_roundIt"" [label=""roundIt""];
""1163_setsessionBlockSize"" [label=""setsessionBlockSize""];
""1163_invest"" [label=""invest""];
""1163_resetMarket"" -> ""1163_findCurrentLowest"";
""1163_distributeWinnings"" -> ""1163_resetMarket"";
""1163_resetMarket"" -> ""1163_insertPlayer"";
""1163_setsessionBlockSize"" -> ""1163_onlyOwner"";
""1163_invest"" -> ""1163_distributeWinnings"";
""1163_invest"" -> ""1163_noReentrancy"";
""1163_invest"" -> ""1163_roundIt"";
""1163_kill"" -> ""1163_onlyOwner"";
""1163_resetMarket"" -> ""1163_rand"";
""1163_invest"" -> ""1163_findCurrentLowest"";
""1163_rand"" -> ""1163_random"";
""1163_distributeWinnings"" -> ""1163_distributeProfit"";
""1163_withdraw"" -> ""1163_onlyOwner"";
""1163_Hedgely"" -> ""1163_resetMarket"";
""1163_invest"" -> ""1163_allocateEarlyPlayerShare"";
""1163_invest"" -> ""1163_insertPlayer"";
}
"
0x0254ffd95dd7c8e27d4c7a32e24464196efcc852.sol,BEATA,"contract BEATA is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 10; uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function BEATA() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_BEATA {
label=""BEATA"";
""706__transfer"" [label=""_transfer""];
""706_BEATA"" [label=""BEATA""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0xc5005344d52758ee2264be257a198b50f884711b.sol,illume,"contract illume is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 50 * 1 days; uint public round2 = now + 40 * 1 days; uint public round1 = now + 20 * 1 days; uint256 public totalSupply = 10000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth =20000000e18; uint public target0drop = 5000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_illume {
label=""illume"";
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_getTokens"" [label=""getTokens""];
""1253_fallback"" [label=""fallback""];
""1253_allowance"" [label=""allowance""];
""1253_transfer"" [label=""transfer""];
""1253_distr"" [label=""distr""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_burn"" [label=""burn""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_approve"" [label=""approve""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_Distribute"" [label=""Distribute""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_constructor"" [label=""constructor""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_add"" [label=""add""];
""1253_withdraw"" [label=""withdraw""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" -> ""1253_canDistr"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_getTokens"" -> ""1253_distr"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_distr"" -> ""1253_canDistr"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
}
"
0x533ec971484b1014215422010978e892eacac430.sol,MortifyAsset,"contract MortifyAsset is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 100 * 1 days; uint public round2 = now + 95 * 1 days; uint public round1 = now + 70 * 1 days; uint256 public totalSupply = 25000000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000000000e18; uint public target0drop = 1; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_MortifyAsset {
label=""MortifyAsset"";
""1253_withdraw"" [label=""withdraw""];
""1253_transfer"" [label=""transfer""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" [label=""getTokens""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_constructor"" [label=""constructor""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_Distribute"" [label=""Distribute""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_add"" [label=""add""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_approve"" [label=""approve""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_distr"" [label=""distr""];
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_constructor"" -> ""1253_distr"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_distr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
}
"
0x5b2028602af2693d50b4157f4acf84d632ec8208.sol,Savings,"contract Savings is Ownable { address public Owner; mapping (address => uint) public deposits; uint public openDate; event Initialized(uint OpenDate); event Deposit(address indexed Depositor, uint Amount); event Withdrawal(address indexed Withdrawer, uint Amount); function init(uint open) payable { Owner = msg.sender; openDate = open; Initialized(open); }",1,"subgraph cluster_164_Savings {
label=""Savings"";
""164_kill"" [label=""kill""];
""164_fallback"" [label=""fallback""];
""164_withdraw"" [label=""withdraw""];
""164_init"" [label=""init""];
""164_deposit"" [label=""deposit""];
""164_withdraw"" -> ""164_isOwner"";
""164_fallback"" -> ""164_deposit"";
""164_kill"" -> ""164_isOwner"";
}
"
0xecbd0854075009d23360c62da07047efc2312144.sol,Crowdsale,"contract Crowdsale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); function Crowdsale () public { beneficiary = 0x1e19E36928bA65184669d8A7e7A37d8B061B9022; fundingGoal = 0.0022 * 1 ether; deadline = now + 40 * 1 minutes; price = 0.00058 * 1 ether; tokenReward = token(0xe8EF8d9d9Ff515720A62d2E2f14f3b5b677C6670); }",1,"subgraph cluster_230_Crowdsale {
label=""Crowdsale"";
""230_safeWithdrawal"" [label=""safeWithdrawal""];
""230_Crowdsale"" [label=""Crowdsale""];
""230_fallback"" [label=""fallback""];
""230_checkGoalReached"" [label=""checkGoalReached""];
""230_safeWithdrawal"" -> ""230_afterDeadline"";
""230_checkGoalReached"" -> ""230_afterDeadline"";
}
"
0xead7adf1bf0df9f03b15429d82ea1f70ebd619f1.sol,Crowdsale,"contract Crowdsale is owned { address public beneficiary; uint256 public preICOLimit; uint256 public totalLimit; uint256 public pricePreICO; uint256 public priceICO; bool preICOClosed = false; bool ICOClosed = false; bool preICOWithdrawn = false; bool ICOWithdrawn = false; bool public preICOActive = false; bool public ICOActive = false; uint256 public preICORaised; uint256 public ICORaised; uint256 public totalRaised; token public tokenReward; event FundTransfer(address backer, uint256 amount, bool isContribution); mapping(address => uint256) public balanceOf; function Crowdsale() { preICOLimit = 5000000 * 1 ether; totalLimit = 45000000 * 1 ether; pricePreICO = 375; priceICO = 250; }",1,"subgraph cluster_402_Crowdsale {
label=""Crowdsale"";
""402_startICO"" [label=""startICO""];
""402_fallback"" [label=""fallback""];
""402_startPreICO"" [label=""startPreICO""];
""402_init"" [label=""init""];
""402_withdrawFunds"" [label=""withdrawFunds""];
""402_Crowdsale"" [label=""Crowdsale""];
""402_stopPreICO"" [label=""stopPreICO""];
""402_stopICO"" [label=""stopICO""];
""402_startICO"" -> ""402_onlyOwner"";
""402_init"" -> ""402_onlyOwner"";
""402_stopPreICO"" -> ""402_onlyOwner"";
""402_withdrawFunds"" -> ""402_onlyOwner"";
""402_stopICO"" -> ""402_onlyOwner"";
""402_startPreICO"" -> ""402_onlyOwner"";
}
"
0xeece3bfd3c83715f1f801dfa6b735ac9093c5bc3.sol,SecuritySale,"contract SecuritySale is Ownable { bool public live; IInvestorList public investorList; event SaleLive(bool liveness); event EtherIn(address from, uint amount); event StartSale(); event EndSale(); constructor() public { live = false; }",1,"subgraph cluster_406_ISecuritySale {
label=""ISecuritySale"";
""406_setLive"" [label=""setLive""];
""406_setInvestorList"" [label=""setInvestorList""];
}
"
0x3ac86159fad58c90aaea1c61974d69d4f8ce8e77.sol,Crowdsale,contract Crowdsale is Ownable { using SafeMath for uint256; SingleTokenCoin public token; WrapperOraclize private wrapper = WrapperOraclize(0xfC484c66daE464CC6055d7a4782Ec8761dc9842F); uint256 private angel_sale_start; uint256 private angel_sale_finish; uint256 private pre_sale_start; uint256 private pre_sale_finish; uint256 private public_sale_start; uint256 private public_sale_finish; bool private isAngel; bool private isPreSale; bool private isPublic; uint256 private angel_rate; uint256 private public_rate; uint256 private decimals; uint256 private totalETH; address public coreTeamAddr; address public itDevAddr; address public futDevAddr; address public commFoundAddr; address public socWarefareAddr; address public marketingAddr; address public unsoldAddr; address public collectAddr; bool public mintingFinished = false; mapping(address => uint256) private founding_buyers_token; mapping(address => uint256) private angel_buyers_eth; mapping(address => uint256) private angel_buyers_token; mapping(address => uint256) private pre_sale_buyers_eth; mapping(address => uint256) private pre_sale_buyers_token; mapping(address => uint256) private pe_buyers_token; mapping(address => uint256) private public_buyers_eth; mapping(address => uint256) private public_buyers_token; address[] private founding_investors; address[] private pre_sale_investors; address[] private angel_investors; address[] private pe_investors; address[] private public_investors; uint256 private soldTokens; uint256 private maxcup; uint256 private totalAmount; uint256 private foundingAmount; uint256 private angelAmount; uint256 private preSaleAmount; uint256 private PEInvestorAmount; uint256 private publicSaleAmount; uint256 private coreTeamAmount; uint256 private coreTeamAuto; uint256 private coreTeamManual; uint256 private itDevAmount; uint256 private futDevAmount; uint256 private commFoundAmount; uint256 private socWarefareAmount; uint256 private marketingAmount; uint256 private angel_sale_sold; uint256 private pre_sale_sold; uint256 private public_sale_sold; uint256 private founding_sold; uint256 private peInvestors_sold; uint256 private angel_sale_totalETH; uint256 private pre_sale_totalETH; uint256 private public_sale_totalETH; uint256 private firstPhaseAmount; uint256 private secondPhaseAmount; uint256 private thirdPhaseAmount; uint256 private fourPhaseAmount; uint256 private firstPhaseDiscount; uint256 private secondPhaseDiscount; uint256 private thirdPhaseDiscount; uint256 private fourPhaseDiscount; uint256 private currentPhase; bool private moveTokens; bool withdrowTokensComplete = false; function Crowdsale(address token_addr) { token = SingleTokenCoin(token_addr); public_rate = 3546099290780141; angel_rate = 20; decimals = 35460992907801; angel_sale_start = now - 3 days; angel_sale_finish = 1510488000; pre_sale_start = 1510491600; pre_sale_finish = 1512561600; public_sale_start = 1512565200; public_sale_finish = public_sale_start + 14 days; moveTokens = false; isAngel = true; isPreSale = false; isPublic = false; currentPhase = 1; founding_sold = 0; peInvestors_sold = 0; angel_sale_sold = 0; pre_sale_sold = 0; public_sale_sold = 0; angel_sale_totalETH = 0; pre_sale_totalETH = 0; public_sale_totalETH = 0; firstPhaseAmount = 18750000E18; secondPhaseAmount = 37500000E18; thirdPhaseAmount = 56250000E18; fourPhaseAmount = 75000000E18; firstPhaseDiscount = 30; secondPhaseDiscount = 40; thirdPhaseDiscount = 50; fourPhaseDiscount = 60; totalAmount = 500000000E18; foundingAmount = 10000000E18; angelAmount = 25000000E18; preSaleAmount = 75000000E18; PEInvestorAmount = 50000000E18; publicSaleAmount = 100000000E18; coreTeamAmount = 100000000E18; coreTeamAuto = 60000000E18; coreTeamManual = 40000000E18; itDevAmount = 50000000E18; futDevAmount = 50000000E18; commFoundAmount = 15000000E18; socWarefareAmount = 10000000E18; marketingAmount = 15000000E18; mintingFinished = false; coreTeamAddr = 0xB0A3A845cfA5e2baCD3925Af85c59dE4D32D874f; itDevAddr = 0x61528ffdCd4BC26c81c88423018780b399Fbb8e7; futDevAddr = 0xA1f9C3F137496e6b8bA4445d15b0986CaA22FDe3; commFoundAddr = 0xC30a0E7FFad754A9AD2A1C1cFeB10e05f7C7aB6A; socWarefareAddr = 0xd5d692C89C83313579d02C94F4faE600fe30D1d9; marketingAddr = 0x5490510072b929273F65dba4B72c96cd45A99b5A; unsoldAddr = 0x18051b5b0F1FDb4D44eACF2FA49f19bB80105Fc1; collectAddr = 0xB338121B8e5dA0900a6E8580321293f3CF52E58D; },1,"subgraph cluster_2629_Crowdsale {
label=""Crowdsale"";
""2629_withdrowTokens"" [label=""withdrowTokens""];
""2629_getFinishStatus"" [label=""getFinishStatus""];
""2629_removeFreeze"" [label=""removeFreeze""];
""2629_getFinishDates"" [label=""getFinishDates""];
""2629_getTotalETH"" [label=""getTotalETH""];
""2629_finishMinting"" [label=""finishMinting""];
""2629_saveInfoAboutInvestors"" [label=""saveInfoAboutInvestors""];
""2629_getStartDates"" [label=""getStartDates""];
""2629_getWrapperData"" [label=""getWrapperData""];
""2629_sendToAddress"" [label=""sendToAddress""];
""2629_setTransferOwnership"" [label=""setTransferOwnership""];
""2629_getInvestorsCount"" [label=""getInvestorsCount""];
""2629_calculatePrice"" [label=""calculatePrice""];
""2629_calculateRate"" [label=""calculateRate""];
""2629_getCurrentPrice"" [label=""getCurrentPrice""];
""2629_getInvestorByIndex"" [label=""getInvestorByIndex""];
""2629_withdrowETH"" [label=""withdrowETH""];
""2629_setAngelDate"" [label=""setAngelDate""];
""2629_getOwner"" [label=""getOwner""];
""2629_fallback"" [label=""fallback""];
""2629_setFreeze"" [label=""setFreeze""];
""2629_getSoldToken"" [label=""getSoldToken""];
""2629_mint"" [label=""mint""];
""2629_setPublicSaleFinishDate"" [label=""setPublicSaleFinishDate""];
""2629_getBalanceContract"" [label=""getBalanceContract""];
""2629_getContractAddress"" [label=""getContractAddress""];
""2629_setPublicSaleDate"" [label=""setPublicSaleDate""];
""2629_moveUnsold"" [label=""moveUnsold""];
""2629_refund"" [label=""refund""];
""2629_sendOracleData"" [label=""sendOracleData""];
""2629_Crowdsale"" [label=""Crowdsale""];
""2629_getTotalToken"" [label=""getTotalToken""];
""2629_getInvestorsTokens"" [label=""getInvestorsTokens""];
""2629_getLeftToken"" [label=""getLeftToken""];
""2629_newTransferManualTokensnewTransfer"" [label=""newTransferManualTokensnewTransfer""];
""2629_setPreSaleDate"" [label=""setPreSaleDate""];
""2629_calculateMinorRefund"" [label=""calculateMinorRefund""];
""2629_setPreSaleFinishDate"" [label=""setPreSaleFinishDate""];
""2629_bytesToUInt"" [label=""bytesToUInt""];
""2629_setAngelFinishDate"" [label=""setAngelFinishDate""];
""2629_finishMinting"" -> ""2629_onlyOwner"";
""2629_setPublicSaleFinishDate"" -> ""2629_onlyOwner"";
""2629_mint"" -> ""2629_isICOFinished"";
""2629_sendToAddress"" -> ""2629_onlyOwner"";
""2629_calculateRate"" -> ""2629_getWrapperData"";
""2629_sendToAddress"" -> ""2629_canMint"";
""2629_setPreSaleDate"" -> ""2629_onlyOwner"";
""2629_setAngelFinishDate"" -> ""2629_onlyOwner"";
""2629_fallback"" -> ""2629_mint"";
""2629_getCurrentPrice"" -> ""2629_calculatePrice"";
""2629_mint"" -> ""2629_isAnyStage"";
""2629_mint"" -> ""2629_saveInfoAboutInvestors"";
""2629_mint"" -> ""2629_refund"";
""2629_mint"" -> ""2629_calculatePrice"";
""2629_setAngelDate"" -> ""2629_onlyOwner"";
""2629_mint"" -> ""2629_canMint"";
""2629_getCurrentPrice"" -> ""2629_calculateRate"";
""2629_mint"" -> ""2629_calculateMinorRefund"";
""2629_setTransferOwnership"" -> ""2629_onlyOwner"";
""2629_withdrowTokens"" -> ""2629_onlyOwner"";
""2629_withdrowETH"" -> ""2629_onlyOwner"";
""2629_moveUnsold"" -> ""2629_onlyOwner"";
""2629_newTransferManualTokensnewTransfer"" -> ""2629_onlyOwner"";
""2629_setPublicSaleDate"" -> ""2629_onlyOwner"";
""2629_setTransferOwnership"" -> ""2629_transferOwnership"";
""2629_setFreeze"" -> ""2629_onlyOwner"";
""2629_removeFreeze"" -> ""2629_onlyOwner"";
""2629_calculateRate"" -> ""2629_bytesToUInt"";
""2629_mint"" -> ""2629_calculateRate"";
""2629_setPreSaleFinishDate"" -> ""2629_onlyOwner"";
}
"
0x2af8b34f04e93c79ee3a1f300a019f29869d896a.sol,SiliconValleyToken,"contract SiliconValleyToken is FrozenToken { string public name = ; string public symbol = ; uint8 public decimals = 18; string public version = ; string public publisher = ""https: string public description = ; bool public acceptAdminWithdraw = false; bool public acceptDonate = true; event InfoChanged(address indexed sender, string version, string publisher, string description); event Withdraw(address indexed sender, address indexed wallet, uint256 amount); event WithdrawTokens(address indexed sender, address indexed wallet, address indexed token, uint256 amount); event Donate(address indexed sender, uint256 value); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); function SiliconValleyToken() public {}",1,"subgraph cluster_2239_SiliconValleyToken {
label=""SiliconValleyToken"";
""2239_fallback"" [label=""fallback""];
""2239_withdrawTokens"" [label=""withdrawTokens""];
""2239_setupInfo"" [label=""setupInfo""];
""2239_withdrawAmount"" [label=""withdrawAmount""];
""2239_withdraw"" [label=""withdraw""];
""2239_balanceToken"" [label=""balanceToken""];
""2239_donate"" [label=""donate""];
""2239_updAcceptAdminWithdraw"" [label=""updAcceptAdminWithdraw""];
""2239_updAcceptDonate"" [label=""updAcceptDonate""];
""2239_SiliconValleyToken"" [label=""SiliconValleyToken""];
""2239_balanceToken"" -> ""2239_validAddress"";
""2239_withdrawTokens"" -> ""2239_validAddress"";
""2239_updAcceptAdminWithdraw"" -> ""2239_onlyOwner"";
""2239_withdrawTokens"" -> ""2239_greaterThanZero"";
""2239_withdrawAmount"" -> ""2239_validBalanceThis"";
""2239_updAcceptDonate"" -> ""2239_authLevel"";
""2239_withdraw"" -> ""2239_withdrawAmount"";
""2239_setupInfo"" -> ""2239_notEmpty"";
""2239_withdrawTokens"" -> ""2239_authLevel"";
""2239_withdrawAmount"" -> ""2239_authLevel"";
""2239_donate"" -> ""2239_greaterThanZero"";
""2239_fallback"" -> ""2239_donate"";
""2239_withdrawAmount"" -> ""2239_greaterThanZero"";
""2239_setupInfo"" -> ""2239_authLevel"";
}
"
0x4bfed6f4fd57a1709b469e1a8918c6921e82a4f9.sol,ALFA_QUIZ,contract ALFA_QUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ALFA_QUIZ {
label=""ALFA_QUIZ"";
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x379f2596d4c4a417ef1023b81c8b9ff5419b13d4.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 10000000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_setPrices"" [label=""setPrices""];
""612_freezeAccount"" [label=""freezeAccount""];
""612_mintToken"" [label=""mintToken""];
""612__transfer"" [label=""_transfer""];
""612_buy"" [label=""buy""];
""612_fallback"" [label=""fallback""];
""612_selfdestructs"" [label=""selfdestructs""];
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_buy"" -> ""612__transfer"";
""612_fallback"" -> ""612__transfer"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_mintToken"" -> ""612_onlyOwner"";
""612_selfdestructs"" -> ""612_onlyOwner"";
}
"
0xef078a64e1593afee09912d18097bc49fa74c7a9.sol,ETHER_Game,contract ETHER_Game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETHER_Game {
label=""ETHER_Game"";
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x46c9f93c3249c430c6ca19f02240ef9e038ba9d1.sol,FundForwarder,"contract FundForwarder is Escapable { Campaign public beneficiary; function FundForwarder( Campaign _beneficiary, address _escapeHatchCaller, address _escapeHatchDestination ) Escapable(_escapeHatchCaller, _escapeHatchDestination) { beneficiary = _beneficiary; }",1,"subgraph cluster_437_FundForwarder {
label=""FundForwarder"";
""437_fallback"" [label=""fallback""];
""437_FundForwarder"" [label=""FundForwarder""];
""437_FundForwarder"" -> ""437_Escapable"";
}
"
0x4d3b775a793aa40e52e5ebd76d1904318fcf4989.sol,TokenERC20,contract TokenERC20 is Ownable{ token public tokenReward = token(0x778E763C4a09c74b2de221b4D3c92d8c7f27a038); uint256 public bili = 7500; uint256 public endtime = 1540051199; uint256 public amount; address public addr = 0x2aCf431877107176c88B6300830C6b696d744344; address public addr2 = 0x6090275ca0AD1b36e651bCd3C696622b96a25cFF; function TokenERC20( ) public { },1,"subgraph cluster_176_TokenERC20 {
label=""TokenERC20"";
""176_setbili"" [label=""setbili""];
""176_fallback"" [label=""fallback""];
""176_TokenERC20"" [label=""TokenERC20""];
""176_setbili"" -> ""176_onlyOwner"";
}
"
0x410af23334e26aa13c1f3e630bae006bdd313264.sol,ClearToken,"contract ClearToken is StandardToken { enum States { Initial, ValuationSet, Ico, Underfunded, Operational, Paused }",1,"subgraph cluster_1608_ClearToken {
label=""ClearToken"";
""1608_ClearToken"" [label=""ClearToken""];
""1608_rescueToken"" [label=""rescueToken""];
""1608_issueTokensToUser"" [label=""issueTokensToUser""];
""1608_updateEthICOVariables"" [label=""updateEthICOVariables""];
""1608_endICO"" [label=""endICO""];
""1608_resumeICO"" [label=""resumeICO""];
""1608_startICO"" [label=""startICO""];
""1608_moveToState"" [label=""moveToState""];
""1608_requestRefund"" [label=""requestRefund""];
""1608_abort"" [label=""abort""];
""1608_anyoneEndICO"" [label=""anyoneEndICO""];
""1608_addPresaleAmount"" [label=""addPresaleAmount""];
""1608_updateETHNZD"" [label=""updateETHNZD""];
""1608_fallback"" [label=""fallback""];
""1608_addToWhitelist"" [label=""addToWhitelist""];
""1608_finishMinting"" [label=""finishMinting""];
""1608_transfer"" [label=""transfer""];
""1608_requestPayout"" [label=""requestPayout""];
""1608_balanceOf"" [label=""balanceOf""];
""1608_pause"" [label=""pause""];
""1608_calcBonus"" [label=""calcBonus""];
""1608_transferFrom"" [label=""transferFrom""];
""1608_endICO"" -> ""1608_onlyStateControl"";
""1608_ClearToken"" -> ""1608_moveToState"";
""1608_addToWhitelist"" -> ""1608_onlyWhitelist"";
""1608_requestPayout"" -> ""1608_requireState"";
""1608_updateEthICOVariables"" -> ""1608_moveToState"";
""1608_resumeICO"" -> ""1608_onlyStateControl"";
""1608_updateETHNZD"" -> ""1608_onlyTokenAssignmentControl"";
""1608_anyoneEndICO"" -> ""1608_moveToState"";
""1608_rescueToken"" -> ""1608_requireState"";
""1608_endICO"" -> ""1608_finishMinting"";
""1608_anyoneEndICO"" -> ""1608_requireState"";
""1608_transferFrom"" -> ""1608_transferFrom"";
""1608_requestPayout"" -> ""1608_onlyWithdraw"";
""1608_abort"" -> ""1608_onlyStateControl"";
""1608_anyoneEndICO"" -> ""1608_finishMinting"";
""1608_abort"" -> ""1608_requireState"";
""1608_updateEthICOVariables"" -> ""1608_onlyStateControl"";
""1608_abort"" -> ""1608_moveToState"";
""1608_addPresaleAmount"" -> ""1608_onlyTokenAssignmentControl"";
""1608_transfer"" -> ""1608_transfer"";
""1608_resumeICO"" -> ""1608_requireState"";
""1608_addPresaleAmount"" -> ""1608_issueTokensToUser"";
""1608_transfer"" -> ""1608_requireState"";
""1608_rescueToken"" -> ""1608_onlyTokenAssignmentControl"";
""1608_pause"" -> ""1608_moveToState"";
""1608_endICO"" -> ""1608_moveToState"";
""1608_pause"" -> ""1608_onlyStateControl"";
""1608_startICO"" -> ""1608_moveToState"";
""1608_transferFrom"" -> ""1608_requireState"";
""1608_fallback"" -> ""1608_calcBonus"";
""1608_pause"" -> ""1608_requireState"";
""1608_startICO"" -> ""1608_requireState"";
""1608_endICO"" -> ""1608_requireState"";
""1608_resumeICO"" -> ""1608_moveToState"";
""1608_updateETHNZD"" -> ""1608_requireState"";
""1608_fallback"" -> ""1608_issueTokensToUser"";
""1608_fallback"" -> ""1608_requireState"";
""1608_startICO"" -> ""1608_onlyStateControl"";
""1608_requestRefund"" -> ""1608_requireState"";
}
"
0x299187bb996599f7fc82df025ee8964cafe3085a.sol,Challenge,contract Challenge { address public owner; address public previous_owner; address public creator; bytes32 public flag_hash = 0xfa9b079005103147ac67299be9119fb4a47e29801f2d8d5025f36b248ce23695; function Challenge() public { owner = msg.sender; creator = msg.sender; },1,"subgraph cluster_142_Challenge {
label=""Challenge"";
""142_Challenge"" [label=""Challenge""];
""142_check_flag"" [label=""check_flag""];
""142_withdraw"" [label=""withdraw""];
""142_change_flag_hash"" [label=""change_flag_hash""];
}
"
0x365ec7b439abcc8a3a2c4289f0868a4adcd996e9.sol,EtherRacingCore,"contract EtherRacingCore is Ownable, Pausable { uint64 _seed = 0; function random(uint64 upper) internal returns (uint64) { _seed = uint64(keccak256(keccak256(block.blockhash(block.number), _seed), now)); return _seed % upper; }",1,"subgraph cluster_1857_EtherRacingCore {
label=""EtherRacingCore"";
""1857_bid"" [label=""bid""];
""1857_EtherRacingCore"" [label=""EtherRacingCore""];
""1857_getCarProductEarning"" [label=""getCarProductEarning""];
""1857_addAuction"" [label=""addAuction""];
""1857_getCarProductName"" [label=""getCarProductName""];
""1857_getPlayerBalance"" [label=""getPlayerBalance""];
""1857_getCarProduct"" [label=""getCarProduct""];
""1857_cancelAuction"" [label=""cancelAuction""];
""1857_cashOutCar"" [label=""cashOutCar""];
""1857_getCarDetails"" [label=""getCarDetails""];
""1857_getCarProductCurrentPrice"" [label=""getCarProductCurrentPrice""];
""1857_addCarInit"" [label=""addCarInit""];
""1857_CompleteInit"" [label=""CompleteInit""];
""1857_getCarCurrentPriceAuction"" [label=""getCarCurrentPriceAuction""];
""1857_getCarAuctionID"" [label=""getCarAuctionID""];
""1857_getCarSelling"" [label=""getCarSelling""];
""1857_getCarEarning"" [label=""getCarEarning""];
""1857_getCarCount"" [label=""getCarCount""];
""1857_setUpgradeAddress"" [label=""setUpgradeAddress""];
""1857_cashOut"" [label=""cashOut""];
""1857_getCarOwner"" [label=""getCarOwner""];
""1857_buyCar"" [label=""buyCar""];
""1857_random"" [label=""random""];
""1857_addCarProduct"" [label=""addCarProduct""];
""1857_levelUpCar"" [label=""levelUpCar""];
""1857_endSaleCarProduct"" [label=""endSaleCarProduct""];
""1857__transfer"" [label=""_transfer""];
""1857_upgradeCar"" [label=""upgradeCar""];
""1857__transferAction"" [label=""_transferAction""];
""1857_getCarProductCount"" [label=""getCarProductCount""];
""1857_cashOutCar"" -> ""1857_whenNotPaused"";
""1857_getCarCurrentPriceAuction"" -> ""1857_getCarSelling"";
""1857__transferAction"" -> ""1857_whenNotPaused"";
""1857_cancelAuction"" -> ""1857_whenNotPaused"";
""1857_setUpgradeAddress"" -> ""1857_onlyMaster"";
""1857_buyCar"" -> ""1857_random"";
""1857_addCarInit"" -> ""1857_onlyMaster"";
""1857_EtherRacingCore"" -> ""1857_addCarProduct"";
""1857_addAuction"" -> ""1857_whenNotPaused"";
""1857_bid"" -> ""1857_getCarCurrentPriceAuction"";
""1857_upgradeCar"" -> ""1857_whenNotPaused"";
""1857_cashOutCar"" -> ""1857_getCarEarning"";
""1857_addCarProduct"" -> ""1857_onlyMaster"";
""1857_CompleteInit"" -> ""1857_onlyMaster"";
""1857__transfer"" -> ""1857_whenNotPaused"";
""1857_bid"" -> ""1857_whenNotPaused"";
""1857_cashOut"" -> ""1857_whenNotPaused"";
""1857_endSaleCarProduct"" -> ""1857_onlyMaster"";
""1857_levelUpCar"" -> ""1857_onlyMaster"";
}
"
0xf28460e6c571f1d1e481c81dd84973f9b00e1b7b.sol,KpopItem,contract KpopItem is ERC721 { address public author; address public coauthor; address public manufacturer; string public constant NAME = ; string public constant SYMBOL = ; uint public GROWTH_BUMP = 0.4 ether; uint public MIN_STARTING_PRICE = 0.001 ether; uint public PRICE_INCREASE_SCALE = 120; uint public DIVIDEND = 3; address public KPOP_CELEB_CONTRACT_ADDRESS = 0x0; address public KPOP_ARENA_CONTRACT_ADDRESS = 0x0; struct Item { string name; },1,"subgraph cluster_1238_KpopItem {
label=""KpopItem"";
""1238_withdraw"" [label=""withdraw""];
""1238_KpopItem"" [label=""KpopItem""];
""1238_setGrowthBump"" [label=""setGrowthBump""];
""1238_setCoAuthor"" [label=""setCoAuthor""];
""1238_transferToWinner"" [label=""transferToWinner""];
""1238_approve"" [label=""approve""];
""1238_setDividend"" [label=""setDividend""];
""1238_getItem"" [label=""getItem""];
""1238_setKpopArenaContractAddress"" [label=""setKpopArenaContractAddress""];
""1238_transfer"" [label=""transfer""];
""1238_balanceOf"" [label=""balanceOf""];
""1238_buy"" [label=""buy""];
""1238_isApproved"" [label=""isApproved""];
""1238_setKpopCelebContractAddress"" [label=""setKpopCelebContractAddress""];
""1238_updateItem"" [label=""updateItem""];
""1238__transfer"" [label=""_transfer""];
""1238_setPriceIncreaseScale"" [label=""setPriceIncreaseScale""];
""1238_ownerOf"" [label=""ownerOf""];
""1238_celebOf"" [label=""celebOf""];
""1238_takeOwnership"" [label=""takeOwnership""];
""1238_setMinStartingPrice"" [label=""setMinStartingPrice""];
""1238_withdrawAll"" [label=""withdrawAll""];
""1238_totalSupply"" [label=""totalSupply""];
""1238_transferFrom"" [label=""transferFrom""];
""1238_createItem"" [label=""createItem""];
""1238_isNullAddress"" [label=""isNullAddress""];
""1238_implementsERC721"" [label=""implementsERC721""];
""1238_setManufacturer"" [label=""setManufacturer""];
""1238_transferToWinner"" -> ""1238_ownerOf"";
""1238_setMinStartingPrice"" -> ""1238_onlyAuthors"";
""1238_setManufacturer"" -> ""1238_onlyAuthors"";
""1238_approve"" -> ""1238_ownerOf"";
""1238_buy"" -> ""1238_celebOf"";
""1238_transferToWinner"" -> ""1238_isNullAddress"";
""1238_transferFrom"" -> ""1238_isNullAddress"";
""1238_buy"" -> ""1238_ownerOf"";
""1238_buy"" -> ""1238_isNullAddress"";
""1238_withdraw"" -> ""1238_isNullAddress"";
""1238_transfer"" -> ""1238__transfer"";
""1238_takeOwnership"" -> ""1238__transfer"";
""1238_withdraw"" -> ""1238_onlyAuthors"";
""1238_takeOwnership"" -> ""1238_isApproved"";
""1238_withdrawAll"" -> ""1238_onlyAuthors"";
""1238_setDividend"" -> ""1238_onlyAuthors"";
""1238_setManufacturer"" -> ""1238_isNullAddress"";
""1238_setKpopCelebContractAddress"" -> ""1238_onlyAuthors"";
""1238__transfer"" -> ""1238_ownerOf"";
""1238_updateItem"" -> ""1238_totalSupply"";
""1238__transfer"" -> ""1238_isNullAddress"";
""1238_setKpopArenaContractAddress"" -> ""1238_onlyAuthors"";
""1238_getItem"" -> ""1238_celebOf"";
""1238_setGrowthBump"" -> ""1238_onlyAuthors"";
""1238_transferToWinner"" -> ""1238_onlyArena"";
""1238_takeOwnership"" -> ""1238_isNullAddress"";
""1238_updateItem"" -> ""1238_onlyAuthors"";
""1238__transfer"" -> ""1238_balanceOf"";
""1238_setCoAuthor"" -> ""1238_isNullAddress"";
""1238_buy"" -> ""1238__transfer"";
""1238_transferFrom"" -> ""1238__transfer"";
""1238_createItem"" -> ""1238_onlyManufacturer"";
""1238_transferFrom"" -> ""1238_ownerOf"";
""1238_transferFrom"" -> ""1238_isApproved"";
""1238_setCoAuthor"" -> ""1238_onlyAuthor"";
""1238_transferToWinner"" -> ""1238__transfer"";
""1238_setPriceIncreaseScale"" -> ""1238_onlyAuthors"";
}
"
0x4209f9bbb4e4dd48dbd84701fcaaab1d492b5a05.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_369_AccessService {
label=""AccessService"";
""369_setFinance"" [label=""setFinance""];
""369_setService"" [label=""setService""];
""369_withdraw"" [label=""withdraw""];
}
"
0x1847825ea569501ca50dee126d31ea95f6c62a87.sol,LinCrowdSale,"contract LinCrowdSale is LinTokenMint, WhitelistedCrowdsale { uint constant Month = 60*60*24*30; uint constant SixMonth = 6 * Month; uint constant Year = 12 * Month; uint public StartTime = now; uint public EndTime = StartTime + SixMonth; uint public PrivateSaleEndTime = StartTime.add(Month); uint public PreSaleEndTime = PrivateSaleEndTime.add(Month); bool public SoftCapReached = false; bool public HardCapReached = false; bool public SaleClosed = false; bool private rentrancy_lock = false; uint public constant Private_rate = 2000; uint public constant Pre_rate = 1500; uint public constant Public = 1200; uint public MinInvestMent = 2 * (10 ** decimals); uint public HardCap = 500000000 * (10 ** decimals); uint public SoftCap = 10000000 * (10 ** decimals); uint public TotalAmountETH; uint public SaleAmountLIN; uint public RefundAmount; uint public InvestorNum; event SuccessCoreAccount(uint256 InvestorNum); event Burn(address burner, uint256 value); event SuccessInvestor(address RequestAddress, uint256 amount); event SuccessSoftCap(uint256 SaleAmountLin, uint256 time); event SuccessHardCap(uint256 SaleAmountLin, uint256 time); event SucessWithdraw(address who, uint256 AmountEth, uint256 time); event SuccessEthToOwner(address owner, uint256 AmountEth, uint256 time); event linTokenToInvestors(address InverstorAddress, uint256 Amount, uint256 now); event linTokenToCore(address CoreAddress, uint256 Amount, uint256 now); event FailsafeWithdrawal(address InverstorAddress, uint256 Amount, uint256 now); event FaillinTokenToInvestors(address InverstorAddress, uint256 Amount, uint256 now, uint256 ReleaseTime); event FaillinTokenToCore(address CoreAddress, uint256 Amount, uint256 now, uint256 ReleaseTime); event FailEthToOwner(address who, uint256 _amount, uint256 now); event safeWithdrawalTry(address who); modifier beforeDeadline() { require (now < EndTime); _; }",1,"subgraph cluster_1660_LinCrowdSale {
label=""LinCrowdSale"";
""1660_CheckHardCap"" [label=""CheckHardCap""];
""1660_LinTokenToInvestors"" [label=""LinTokenToInvestors""];
""1660_safeWithdrawal"" [label=""safeWithdrawal""];
""1660_LinTokenToCore"" [label=""LinTokenToCore""];
""1660_fallback"" [label=""fallback""];
""1660_CheckSoftCap"" [label=""CheckSoftCap""];
""1660_transferEthToOwner"" [label=""transferEthToOwner""];
""1660_constructor"" [label=""constructor""];
""1660_burn"" [label=""burn""];
""1660_safeWithdrawal"" -> ""1660_afterDeadline"";
""1660_fallback"" -> ""1660_isWhitelisted"";
""1660_safeWithdrawal"" -> ""1660_nonReentrant"";
""1660_burn"" -> ""1660_afterDeadline"";
""1660_transferEthToOwner"" -> ""1660_afterDeadline"";
""1660_transferEthToOwner"" -> ""1660_nonReentrant"";
""1660_transferEthToOwner"" -> ""1660_onlyOwner"";
""1660_LinTokenToCore"" -> ""1660_nonReentrant"";
""1660_burn"" -> ""1660_nonReentrant"";
""1660_burn"" -> ""1660_onlyOwner"";
""1660_fallback"" -> ""1660_CheckHardCap"";
""1660_fallback"" -> ""1660_afterStartTime"";
""1660_fallback"" -> ""1660_CheckSoftCap"";
""1660_LinTokenToInvestors"" -> ""1660_afterDeadline"";
""1660_fallback"" -> ""1660_whenNotPaused"";
""1660_LinTokenToInvestors"" -> ""1660_nonReentrant"";
""1660_LinTokenToCore"" -> ""1660_afterDeadline"";
""1660_LinTokenToCore"" -> ""1660_onlyOwner"";
""1660_fallback"" -> ""1660_beforeDeadline"";
""1660_LinTokenToInvestors"" -> ""1660_onlyOwner"";
""1660_fallback"" -> ""1660_nonReentrant"";
""1660_fallback"" -> ""1660_saleNotClosed"";
}
"
0x009ef15c147ff4c0eb373e1abd2f4d184e5cb916.sol,CampaignContract,contract CampaignContract { using SafeMath for uint256; address internal owner; uint256 public minUSD; uint256 public maxUSD; uint256 public maxContribution; uint256 public minContribution; struct KYCObject { bytes32 phone; bytes32 name; bytes32 occupation; bytes32 addressOne; bytes32 addressTwo; },1,"subgraph cluster_1022_CampaignContract {
label=""CampaignContract"";
""1022_getName"" [label=""getName""];
""1022_retrieveAssets"" [label=""retrieveAssets""];
""1022_changeOwner"" [label=""changeOwner""];
""1022_getAmountContributed"" [label=""getAmountContributed""];
""1022_getAddressTwo"" [label=""getAddressTwo""];
""1022_acceptContribution"" [label=""acceptContribution""];
""1022_getOccupation"" [label=""getOccupation""];
""1022_CampaignContract"" [label=""CampaignContract""];
""1022_getAmountAttempted"" [label=""getAmountAttempted""];
""1022_getPhone"" [label=""getPhone""];
""1022_getPotentialAmount"" [label=""getPotentialAmount""];
""1022_killContract"" [label=""killContract""];
""1022_rejectContribution"" [label=""rejectContribution""];
""1022_getAddressOne"" [label=""getAddressOne""];
""1022_withdrawToWallet"" [label=""withdrawToWallet""];
""1022_contribute"" [label=""contribute""];
""1022_resetKYC"" [label=""resetKYC""];
""1022_verifyKYC"" [label=""verifyKYC""];
""1022_withdrawContribution"" [label=""withdrawContribution""];
""1022_changeLimits"" [label=""changeLimits""];
""1022_retrieveAssets"" -> ""1022_onlyOwner"";
""1022_changeLimits"" -> ""1022_onlyOwner"";
""1022_rejectContribution"" -> ""1022_onlyOwner"";
""1022_withdrawToWallet"" -> ""1022_onlyOwner"";
""1022_acceptContribution"" -> ""1022_onlyOwner"";
""1022_killContract"" -> ""1022_onlyOwner"";
""1022_resetKYC"" -> ""1022_hasKYCInfo"";
""1022_resetKYC"" -> ""1022_onlyOwner"";
""1022_acceptContribution"" -> ""1022_hasKYCInfo"";
""1022_withdrawContribution"" -> ""1022_hasKYCInfo"";
""1022_contribute"" -> ""1022_hasKYCInfo"";
""1022_changeOwner"" -> ""1022_onlyOwner"";
}
"
0x2d04c7051112c47ee74a41c723f791b499aa6b1a.sol,YHToken,"contract YHToken is StandardBurnableToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 constant private kAutoCombineBonusesCount = 50; struct Bonus { uint256 payment; uint256 currentTotalSupply; }",1,"subgraph cluster_1875_YHToken {
label=""YHToken"";
""1875_getUserInfos"" [label=""getUserInfos""];
""1875_computeRoundBonuses"" [label=""computeRoundBonuses""];
""1875_withdrawForBet"" [label=""withdrawForBet""];
""1875__burn"" [label=""_burn""];
""1875_balanceSnapshot"" [label=""balanceSnapshot""];
""1875_mint"" [label=""mint""];
""1875_balanceOf"" [label=""balanceOf""];
""1875_transferFrom"" [label=""transferFrom""];
""1875_transfer"" [label=""transfer""];
""1875_getBalanceSnapshot"" [label=""getBalanceSnapshot""];
""1875_transferExtraEarnings"" [label=""transferExtraEarnings""];
""1875_mintToFounder"" [label=""mintToFounder""];
""1875_mintToNormal"" [label=""mintToNormal""];
""1875_combineBonuses"" [label=""combineBonuses""];
""1875_withdraw"" [label=""withdraw""];
""1875_checkLastMint"" [label=""checkLastMint""];
""1875_getEarnings"" [label=""getEarnings""];
""1875_computeSnapshotBonuses"" [label=""computeSnapshotBonuses""];
""1875_unused"" [label=""unused""];
""1875_transferBonusEarnings"" [label=""transferBonusEarnings""];
""1875_constructor"" [label=""constructor""];
""1875_start"" [label=""start""];
""1875_start"" -> ""1875_onlyOwner"";
""1875_getEarnings"" -> ""1875_computeSnapshotBonuses"";
""1875__burn"" -> ""1875_balanceSnapshot"";
""1875_balanceSnapshot"" -> ""1875_balanceSnapshot"";
""1875_transferFrom"" -> ""1875_balanceSnapshot"";
""1875_transfer"" -> ""1875_checkLastMint"";
""1875__burn"" -> ""1875__burn"";
""1875_withdraw"" -> ""1875_combineBonuses"";
""1875_getUserInfos"" -> ""1875_balanceOf"";
""1875_mint"" -> ""1875_balanceSnapshot"";
""1875_combineBonuses"" -> ""1875_computeSnapshotBonuses"";
""1875_mintToNormal"" -> ""1875_mint"";
""1875__burn"" -> ""1875_checkLastMint"";
""1875_balanceOf"" -> ""1875_unused"";
""1875_mintToFounder"" -> ""1875_checkLastMint"";
""1875_transferFrom"" -> ""1875_checkLastMint"";
""1875_withdrawForBet"" -> ""1875_combineBonuses"";
""1875_mintToFounder"" -> ""1875_mint"";
""1875_transferFrom"" -> ""1875_transferFrom"";
""1875_getUserInfos"" -> ""1875_getEarnings"";
""1875_balanceSnapshot"" -> ""1875_computeRoundBonuses"";
""1875_withdrawForBet"" -> ""1875_isLottery"";
""1875_mintToFounder"" -> ""1875_isLottery"";
""1875_computeSnapshotBonuses"" -> ""1875_computeRoundBonuses"";
""1875_getEarnings"" -> ""1875_computeRoundBonuses"";
""1875_transfer"" -> ""1875_transfer"";
""1875_combineBonuses"" -> ""1875_checkLastMint"";
""1875_mintToNormal"" -> ""1875_isLottery"";
""1875_transfer"" -> ""1875_balanceSnapshot"";
}
"
0xfef5497bc53a69875e02ae5b14eeff668f09a729.sol,Infinity,"contract Infinity { using SafeMath for uint256; string public name = ; string public symbol = ; uint256 public initAmount; uint256 public amountProportion; uint256 public dividend; uint256 public jackpot; uint256 public jackpotProportion; uint256 public scientists; uint256 public promotionRatio; uint256 public duration; bool public activated = false; address public developerAddr; uint256 public rId; uint256 public sId; mapping (uint256 => Indatasets.Round) public round; mapping (uint256 => mapping (uint256 => Indatasets.Stage)) public stage; mapping (address => Indatasets.Player) public player; mapping (uint256 => mapping (address => uint256)) public playerRoundAmount; mapping (uint256 => mapping (address => uint256)) public playerRoundSid; mapping (uint256 => mapping (address => uint256)) public playerRoundwithdrawAmountFlag; mapping (uint256 => mapping (uint256 => mapping (address => uint256))) public playerStageAmount; mapping (uint256 => mapping (uint256 => mapping (address => uint256))) public playerStageAccAmount; uint256[] amountLimit = [0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]; constructor() public { developerAddr = msg.sender; }",1,"subgraph cluster_2138_Infinity {
label=""Infinity"";
""2138_getPlayerDividendByRound"" [label=""getPlayerDividendByRound""];
""2138_getPlayerDividendByStage"" [label=""getPlayerDividendByStage""];
""2138_buyPlayerDataRecord"" [label=""buyPlayerDataRecord""];
""2138_getPlayerJackpot"" [label=""getPlayerJackpot""];
""2138_buyRoundDataRecord"" [label=""buyRoundDataRecord""];
""2138_fallback"" [label=""fallback""];
""2138_withdraw"" [label=""withdraw""];
""2138_getPersonalStatus"" [label=""getPersonalStatus""];
""2138_buy"" [label=""buy""];
""2138_activate"" [label=""activate""];
""2138_initStage"" [label=""initStage""];
""2138_promotionDataRecord"" [label=""promotionDataRecord""];
""2138_constructor"" [label=""constructor""];
""2138_endStage"" [label=""endStage""];
""2138_limitAmount"" [label=""limitAmount""];
""2138_getPlayerDividend"" [label=""getPlayerDividend""];
""2138_buyAnalysis"" [label=""buyAnalysis""];
""2138_getValueInfo"" [label=""getValueInfo""];
""2138_getHeadInfo"" [label=""getHeadInfo""];
""2138_endRound"" [label=""endRound""];
""2138_buyStageDataRecord"" [label=""buyStageDataRecord""];
""2138_withdraw"" -> ""2138_getPlayerDividendByStage"";
""2138_buy"" -> ""2138_senderVerify"";
""2138_buyAnalysis"" -> ""2138_buyPlayerDataRecord"";
""2138_fallback"" -> ""2138_buyAnalysis"";
""2138_getValueInfo"" -> ""2138_getPlayerDividend"";
""2138_buyStageDataRecord"" -> ""2138_stageVerify"";
""2138_buyAnalysis"" -> ""2138_promotionDataRecord"";
""2138_fallback"" -> ""2138_senderVerify"";
""2138_buy"" -> ""2138_buyAnalysis"";
""2138_getPlayerDividendByStage"" -> ""2138_getPlayerJackpot"";
""2138_getPlayerDividend"" -> ""2138_getPlayerDividendByRound"";
""2138_fallback"" -> ""2138_amountVerify"";
""2138_buyAnalysis"" -> ""2138_buyRoundDataRecord"";
""2138_fallback"" -> ""2138_isActivated"";
""2138_withdraw"" -> ""2138_playerVerify"";
""2138_buyAnalysis"" -> ""2138_limitAmount"";
""2138_withdraw"" -> ""2138_isActivated"";
""2138_buy"" -> ""2138_isActivated"";
""2138_buy"" -> ""2138_amountVerify"";
""2138_withdraw"" -> ""2138_senderVerify"";
""2138_getPersonalStatus"" -> ""2138_getPlayerDividendByRound"";
""2138_getPlayerDividendByRound"" -> ""2138_getPlayerJackpot"";
""2138_buyAnalysis"" -> ""2138_initStage"";
""2138_activate"" -> ""2138_initStage"";
""2138_buyAnalysis"" -> ""2138_endStage"";
""2138_buyAnalysis"" -> ""2138_endRound"";
""2138_buyAnalysis"" -> ""2138_buyStageDataRecord"";
}
"
0xd7f4aea7c2b8d633d88c449eab91d7d5ef89427e.sol,EDAX,"contract EDAX is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 500000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 1000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0x15CA3e11C9887FAC531FC8a2C95394F2c84E654a; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_EDAX {
label=""EDAX"";
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_burn"" [label=""burn""];
""1261_approve"" [label=""approve""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_transfer"" [label=""transfer""];
""1261_distr"" [label=""distr""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_allowance"" [label=""allowance""];
""1261_add"" [label=""add""];
""1261_constructor"" [label=""constructor""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_fallback"" [label=""fallback""];
""1261_withdraw"" [label=""withdraw""];
""1261_Distribute"" [label=""Distribute""];
""1261_getTokens"" -> ""1261_distr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_distr"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
}
"
0xef078a64e1593afee09912d18097bc49fa74c7a9.sol,ETHER_Game,contract ETHER_Game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETHER_Game {
label=""ETHER_Game"";
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x41104edb2cefbb66cc28b17d507f0b4ba559f455.sol,CrowdsaleToken,"contract CrowdsaleToken is StandardToken, Configurable, Ownable { enum Stages { none, icoStart, icoEnd }",1,"subgraph cluster_852_CrowdsaleToken {
label=""CrowdsaleToken"";
""852_constructor"" [label=""constructor""];
""852_fallback"" [label=""fallback""];
""852_startIco"" [label=""startIco""];
""852_finalizeIco"" [label=""finalizeIco""];
""852_endIco"" [label=""endIco""];
""852_finalizeIco"" -> ""852_endIco"";
""852_startIco"" -> ""852_onlyOwner"";
""852_finalizeIco"" -> ""852_onlyOwner"";
}
"
0x297ac8bc7540bc241f065fcc22c570b40170b573.sol,TraceTokenSale,"contract TraceTokenSale is Ownable{ using SafeMath for uint256; TraceToken public token; uint256 public constant TOTAL_NUM_TOKENS = 5e26; uint256 public constant tokensForSale = 25e25; uint256 public totalEthers = 0; uint256 public constant softCap = 3984.064 ether; uint256 public constant hardCap = 17928.287 ether; uint256 public constant presaleLimit = 7968.127 ether; bool public presaleLimitReached = false; uint256 public constant min_investment_eth = 0.5 ether; uint256 public constant max_investment_eth = 398.4064 ether; uint256 public constant min_investment_presale_eth = 5 ether; bool public refundAllowed = false; bool public paused = false; uint256 public constant bountyReward = 1e25; uint256 public constant preicoAndAdvisors = 4e25; uint256 public constant liquidityPool = 25e24; uint256 public constant futureDevelopment = 1e26; uint256 public constant teamAndFounders = 75e24; uint256 public leftOverTokens = 0; uint256[8] public founderAmounts = [uint256(teamAndFounders.div(8)),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8)]; uint256[2] public preicoAndAdvisorsAmounts = [ uint256(preicoAndAdvisors.mul(2).div(5)),preicoAndAdvisors.mul(2).div(5)]; address public wallet; address public teamAndFoundersWallet; address public advisorsAndPreICO; uint256 public constant token_per_wei = 12550; uint256 public startTime; uint256 public endTime; uint256 private constant weekInSeconds = 86400 * 7; mapping(address => uint256) public whitelist; mapping(address => uint256) public etherBalances; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event Whitelist(address indexed beneficiary, uint256 value); event SoftCapReached(); event Finalized(); function TraceTokenSale(uint256 _startTime, address traceTokenAddress, address _wallet, address _teamAndFoundersWallet, address _advisorsAndPreICO) public { require(_startTime >= now); require(_wallet != 0x0); require(_teamAndFoundersWallet != 0x0); require(_advisorsAndPreICO != 0x0); token = TraceToken(traceTokenAddress); wallet = _wallet; teamAndFoundersWallet = _teamAndFoundersWallet; advisorsAndPreICO = _advisorsAndPreICO; startTime = _startTime; endTime = _startTime + 4 * weekInSeconds; }",1,"subgraph cluster_1968_TraceTokenSale {
label=""TraceTokenSale"";
""1968_balanceOf"" [label=""balanceOf""];
""1968_withdrawTokensToAdvisors"" [label=""withdrawTokensToAdvisors""];
""1968_validPurchase"" [label=""validPurchase""];
""1968_hasEnded"" [label=""hasEnded""];
""1968_addWhitelists"" [label=""addWhitelists""];
""1968_pauseSale"" [label=""pauseSale""];
""1968_fallback"" [label=""fallback""];
""1968_hardCapReached"" [label=""hardCapReached""];
""1968_checkWhitelist"" [label=""checkWhitelist""];
""1968_finishCrowdsale"" [label=""finishCrowdsale""];
""1968_withdrawTokenToFounders"" [label=""withdrawTokenToFounders""];
""1968_calcAmount"" [label=""calcAmount""];
""1968_unpauseSale"" [label=""unpauseSale""];
""1968_hasStarted"" [label=""hasStarted""];
""1968_refund"" [label=""refund""];
""1968_addWhitelist"" [label=""addWhitelist""];
""1968_TraceTokenSale"" [label=""TraceTokenSale""];
""1968_isPaused"" [label=""isPaused""];
""1968_softCapReached"" [label=""softCapReached""];
""1968_withdraw"" [label=""withdraw""];
""1968_buyTokens"" [label=""buyTokens""];
""1968_refund"" -> ""1968_softCapReached"";
""1968_addWhitelist"" -> ""1968_hasEnded"";
""1968_withdrawTokensToAdvisors"" -> ""1968_onlyOwner"";
""1968_addWhitelists"" -> ""1968_addWhitelist"";
""1968_unpauseSale"" -> ""1968_onlyOwner"";
""1968_buyTokens"" -> ""1968_checkWhitelist"";
""1968_buyTokens"" -> ""1968_isPaused"";
""1968_fallback"" -> ""1968_buyTokens"";
""1968_withdraw"" -> ""1968_softCapReached"";
""1968_refund"" -> ""1968_hasEnded"";
""1968_buyTokens"" -> ""1968_hasEnded"";
""1968_withdrawTokensToAdvisors"" -> ""1968_softCapReached"";
""1968_withdrawTokenToFounders"" -> ""1968_hasEnded"";
""1968_finishCrowdsale"" -> ""1968_onlyOwner"";
""1968_finishCrowdsale"" -> ""1968_hasEnded"";
""1968_addWhitelist"" -> ""1968_onlyOwner"";
""1968_addWhitelists"" -> ""1968_onlyOwner"";
""1968_withdrawTokenToFounders"" -> ""1968_onlyOwner"";
""1968_withdrawTokenToFounders"" -> ""1968_softCapReached"";
""1968_buyTokens"" -> ""1968_validPurchase"";
""1968_addWhitelists"" -> ""1968_hasEnded"";
""1968_finishCrowdsale"" -> ""1968_softCapReached"";
""1968_pauseSale"" -> ""1968_onlyOwner"";
""1968_finishCrowdsale"" -> ""1968_hardCapReached"";
""1968_buyTokens"" -> ""1968_calcAmount"";
""1968_withdraw"" -> ""1968_onlyOwner"";
""1968_withdrawTokensToAdvisors"" -> ""1968_hasEnded"";
}
"
0xb42ce9d2a22061b7d5e569753f92edbaa2dad37b.sol,Exchanger,"contract Exchanger is Administered { bool public enabled = false; ITradeableAsset public tokenContract; IYeekFormula public formulaContract; uint32 public weight; constructor(address _token, uint32 _weight, address _formulaContract) { require (_weight > 0 && weight <= 1000000); weight = _weight; tokenContract = ITradeableAsset(_token); formulaContract = IYeekFormula(_formulaContract); }",1,"subgraph cluster_567_Exchanger {
label=""Exchanger"";
""567_depositTokens"" [label=""depositTokens""];
""567_buy"" [label=""buy""];
""567_withdrawEther"" [label=""withdrawEther""];
""567_constructor"" [label=""constructor""];
""567_getPurchasePrice"" [label=""getPurchasePrice""];
""567_enable"" [label=""enable""];
""567_sell"" [label=""sell""];
""567_depositEther"" [label=""depositEther""];
""567_getReserveBalances"" [label=""getReserveBalances""];
""567_disable"" [label=""disable""];
""567_withdrawTokens"" [label=""withdrawTokens""];
""567_getQuotePrice"" [label=""getQuotePrice""];
""567_getSalePrice"" [label=""getSalePrice""];
""567_setReserveWeight"" [label=""setReserveWeight""];
""567_setReserveWeight"" -> ""567_onlyAdmin"";
""567_depositEther"" -> ""567_onlyOwner"";
""567_withdrawTokens"" -> ""567_onlyOwner"";
""567_withdrawEther"" -> ""567_onlyOwner"";
""567_depositTokens"" -> ""567_onlyOwner"";
""567_enable"" -> ""567_onlyAdmin"";
""567_disable"" -> ""567_onlyAdmin"";
}
"
0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol,AuctionContract,"contract AuctionContract { using SafeMath for uint; event BetPlacedEvent(address bidderAddress, uint amount); event RefundEvent(address bidderAddress, uint amount); event CreateAuctionContractEvent(address bidderAddress, uint amount); uint public auctionSlideSize = 30; uint public auctionCloseBlock; uint public closeAuctionAfterNBlocks; uint public bettingStep; mapping (address => uint) public bettingMap; address public firstBidder; address public secondBidder; address public winner; uint public biggestBet; uint public prize; address public firstBetContract; address public secondBetContract; uint public minimalPrize = 10000000000000000; uint public minimaBetStep = 10000000000000000; address public auctioneerAddress; bool public isActive; constructor (uint _closeAuctionAfterNBlocks, address _auctioneerAddress) payable public{ assert(msg.value >= minimalPrize); prize = msg.value; auctioneerAddress = _auctioneerAddress; closeAuctionAfterNBlocks = _closeAuctionAfterNBlocks; auctionCloseBlock = block.number.add(_closeAuctionAfterNBlocks); bettingStep = 0; biggestBet = 0; isActive = true; emit CreateAuctionContractEvent(this, prize); }",1,"subgraph cluster_565_AuctionContract {
label=""AuctionContract"";
""565_constructor"" [label=""constructor""];
""565_askForRefund"" [label=""askForRefund""];
""565_fallback"" [label=""fallback""];
""565_closeAuction"" [label=""closeAuction""];
}
"
0x4c7c98c4d64c29ef8103b005eeccf5145cfdf8c1.sol,Savings,"contract Savings is Ownable { address public Owner; mapping (address => uint) public deposits; uint public openDate; event Initialized(address indexed Owner, uint OpenDate); event Deposit(address indexed Depositor, uint Amount); event Withdrawal(address indexed Withdrawer, uint Amount); function init(uint open) payable { Owner = msg.sender; openDate = open; Initialized(Owner, open); }",1,"subgraph cluster_162_Savings {
label=""Savings"";
""162_init"" [label=""init""];
""162_kill"" [label=""kill""];
""162_fallback"" [label=""fallback""];
""162_deposit"" [label=""deposit""];
""162_withdraw"" [label=""withdraw""];
""162_fallback"" -> ""162_deposit"";
""162_kill"" -> ""162_isOwner"";
""162_withdraw"" -> ""162_isOwner"";
}
"
0x468b9ec0747e3da866a06a10cff67d4f49ad9765.sol,ProofOfLongHodlV2,"contract ProofOfLongHodlV2 { using SafeMath for uint256; event Deposit(address user, uint amount); event Withdraw(address user, uint amount); event Claim(address user, uint dividends); event Reinvest(address user, uint dividends); address owner; mapping(address => bool) preauthorized; bool gameStarted = true; uint constant depositTaxDivisor = 25; uint constant withdrawalTaxDivisor = 25; uint constant lotteryFee = 25; uint constant weeklyLotteryFee = 1; mapping(address => uint) public investment; mapping(address => uint) public stake; uint public totalStake; uint stakeValue; mapping(address => uint) dividendCredit; mapping(address => uint) dividendDebit; function ProofOfLongHodlV2() public { owner = msg.sender; preauthorized[owner] = true; }",1,"subgraph cluster_943_ProofOfLongHodlV2 {
label=""ProofOfLongHodlV2"";
""943_preauthorize"" [label=""preauthorize""];
""943_deposit"" [label=""deposit""];
""943_getLotteryData"" [label=""getLotteryData""];
""943_closeGame"" [label=""closeGame""];
""943_reinvest"" [label=""reinvest""];
""943_withdraw"" [label=""withdraw""];
""943_startGame"" [label=""startGame""];
""943_claim"" [label=""claim""];
""943_sqrt"" [label=""sqrt""];
""943_checkIfEligable"" [label=""checkIfEligable""];
""943_depositHelper"" [label=""depositHelper""];
""943_min"" [label=""min""];
""943_ProofOfLongHodlV2"" [label=""ProofOfLongHodlV2""];
""943_rand"" [label=""rand""];
""943_claimHelper"" [label=""claimHelper""];
""943_lotteryParticipants"" [label=""lotteryParticipants""];
""943_dividendsForUser"" [label=""dividendsForUser""];
""943_withdraw"" -> ""943_min"";
""943_depositHelper"" -> ""943_sqrt"";
""943_deposit"" -> ""943_depositHelper"";
""943_withdraw"" -> ""943_rand"";
""943_reinvest"" -> ""943_depositHelper"";
""943_claim"" -> ""943_claimHelper"";
""943_closeGame"" -> ""943_onlyOwner"";
""943_reinvest"" -> ""943_claimHelper"";
}
"
0x7982a79ee90eb3682dcee66e47ba79c1cba44062.sol,FlowerCore,contract FlowerCore is FlowerMinting { address public newContractAddress; function setGen0SellerAddress(address _newAddress) external onlyAdministrator { gen0SellerAddress = _newAddress; saleAuction.setGen0SellerAddress(_newAddress); },1,"subgraph cluster_3573_FlowerCore {
label=""FlowerCore"";
""3573_constructor"" [label=""constructor""];
""3573_getContractBalance"" [label=""getContractBalance""];
""3573_setNewAddress"" [label=""setNewAddress""];
""3573_withdrawBalance"" [label=""withdrawBalance""];
""3573_getFlower"" [label=""getFlower""];
""3573_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""3573_unstop"" [label=""unstop""];
""3573_setNewAddress"" -> ""3573_whenStopped"";
""3573_unstop"" -> ""3573_setStart"";
""3573_setNewAddress"" -> ""3573_onlyAdministrator"";
""3573_withdrawBalance"" -> ""3573_onlyAdministrator"";
""3573_unstop"" -> ""3573_whenStopped"";
""3573_constructor"" -> ""3573__createFlower"";
""3573_setGen0SellerAddress"" -> ""3573_onlyAdministrator"";
""3573_unstop"" -> ""3573_onlyAdministrator"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,HelloGoldSale,"contract HelloGoldSale is Pausable, SafeMath { uint256 public decimals = 8; uint256 public startDate = 1503892800; uint256 public endDate = 1504497600; uint256 tranchePeriod = 1 weeks; HelloGoldToken token; uint256 constant MaxCoinsR1 = 80 * 10**6 * 10**8; uint256 public coinsRemaining = 80 * 10**6 * 10**8; uint256 coinsPerTier = 16 * 10**6 * 10**8; uint256 public coinsLeftInTier = 16 * 10**6 * 10**8; uint256 public minimumCap = 0; uint256 numTiers = 5; uint16 public tierNo; uint256 public preallocCoins; uint256 public purchasedCoins; uint256 public ethRaised; uint256 public personalMax = 10 ether; uint256 public contributors; address public cs; address public multiSig; address public HGT_Reserve; struct csAction { bool passedKYC; bool blocked; }",1,"subgraph cluster_3276_HelloGoldSale {
label=""HelloGoldSale"";
""3276_coinAddress"" [label=""coinAddress""];
""3276_when"" [label=""when""];
""3276_setHgtRates"" [label=""setHgtRates""];
""3276_funding"" [label=""funding""];
""3276_block"" [label=""block""];
""3276_success"" [label=""success""];
""3276_fallback"" [label=""fallback""];
""3276_HelloGoldSale"" [label=""HelloGoldSale""];
""3276_createTokens"" [label=""createTokens""];
""3276_withdraw"" [label=""withdraw""];
""3276_allocatedTokens"" [label=""allocatedTokens""];
""3276_approve"" [label=""approve""];
""3276_setPeriod"" [label=""setPeriod""];
""3276_linkCoin"" [label=""linkCoin""];
""3276_complete"" [label=""complete""];
""3276_newCs"" [label=""newCs""];
""3276_failed"" [label=""failed""];
""3276_unblock"" [label=""unblock""];
""3276_setStart"" [label=""setStart""];
""3276_createTokens"" -> ""3276_funding"";
""3276_allocatedTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_success"";
""3276_allocatedTokens"" -> ""3276_safeAdd"";
""3276_createTokens"" -> ""3276_safeDiv"";
""3276_fallback"" -> ""3276_createTokens"";
""3276_linkCoin"" -> ""3276_onlyOwner"";
""3276_approve"" -> ""3276_MustBeCs"";
""3276_unblock"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_min256"";
""3276_setHgtRates"" -> ""3276_onlyOwner"";
""3276_allocatedTokens"" -> ""3276_onlyOwner"";
""3276_withdraw"" -> ""3276_failed"";
""3276_newCs"" -> ""3276_onlyOwner"";
""3276_setPeriod"" -> ""3276_funding"";
""3276_setStart"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeAdd"";
""3276_fallback"" -> ""3276_whenNotPaused"";
""3276_setPeriod"" -> ""3276_onlyOwner"";
""3276_block"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeMul"";
""3276_fallback"" -> ""3276_MustBeEnabled"";
}
"
0x4ee1d7720a04072142b2efc9d2c7d5d77ad63939.sol,ARXpresale,"contract ARXpresale is owned, safeMath { address public admin = owner; ERC20Interface public tokenReward; address public foundationWallet; address public beneficiaryWallet; uint256 public tokensPerEthPrice; uint256 public amountRaisedInWei; uint256 public fundingMinCapInWei; uint256 public fundingMaxCapInWei; uint256 public fundingRemainingAvailableInEth; string public currentStatus = ; uint256 public fundingStartBlock; uint256 public fundingEndBlock; bool public isPresaleClosed = false; bool public isPresaleSetup = false; event Buy(address indexed _sender, uint256 _eth, uint256 _ARX); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Refund(address indexed _refunder, uint256 _value); event Burn(address _from, uint256 _value); mapping(address => uint256) balances; mapping(address => uint256) fundValue; function ARXpresale() onlyOwner { admin = msg.sender; currentStatus = ; }",1,"subgraph cluster_920_ARXpresale {
label=""ARXpresale"";
""920_beneficiaryMultiSigWithdraw"" [label=""beneficiaryMultiSigWithdraw""];
""920_checkGoalandPrice"" [label=""checkGoalandPrice""];
""920_refund"" [label=""refund""];
""920_fallback"" [label=""fallback""];
""920_updateStatus"" [label=""updateStatus""];
""920_BuyARXtokens"" [label=""BuyARXtokens""];
""920_withdrawRemainingTokens"" [label=""withdrawRemainingTokens""];
""920_ARXpresale"" [label=""ARXpresale""];
""920_Setuppresale"" [label=""Setuppresale""];
""920_setPrice"" [label=""setPrice""];
""920_BuyARXtokens"" -> ""920_setPrice"";
""920_BuyARXtokens"" -> ""920_safeSub"";
""920_Setuppresale"" -> ""920_safeDiv"";
""920_BuyARXtokens"" -> ""920_safeMul"";
""920_BuyARXtokens"" -> ""920_safeAdd"";
""920_checkGoalandPrice"" -> ""920_setPrice"";
""920_Setuppresale"" -> ""920_onlyOwner"";
""920_BuyARXtokens"" -> ""920_safeDiv"";
""920_ARXpresale"" -> ""920_onlyOwner"";
""920_checkGoalandPrice"" -> ""920_onlyOwner"";
""920_fallback"" -> ""920_BuyARXtokens"";
""920_updateStatus"" -> ""920_onlyOwner"";
""920_Setuppresale"" -> ""920_setPrice"";
""920_beneficiaryMultiSigWithdraw"" -> ""920_onlyOwner"";
""920_withdrawRemainingTokens"" -> ""920_onlyOwner"";
}
"
0xa2038ce672658f492fcd9e4fdaa1a3c530011a8a.sol,MultiHolderVault,"contract MultiHolderVault is HolderBase, RefundVault { using SafeMath for uint256; function MultiHolderVault(address _wallet, uint256 _ratioCoeff) public HolderBase(_ratioCoeff) RefundVault(_wallet) {}",1,"subgraph cluster_679_MultiHolderVault {
label=""MultiHolderVault"";
""679_MultiHolderVault"" [label=""MultiHolderVault""];
""679_close"" [label=""close""];
""679_close"" -> ""679_close"";
""679_MultiHolderVault"" -> ""679_HolderBase"";
""679_close"" -> ""679_distribute"";
""679_close"" -> ""679_onlyOwner"";
""679_MultiHolderVault"" -> ""679_RefundVault"";
}
"
0x720608228bda773fe22e816ee72463040f11c19e.sol,Presale,"contract Presale is CommonCrowdsale { uint public devLimit; uint public softcap; bool public refundOn; bool public softcapAchieved; bool public devWithdrawn; address public devWallet; address public nextSaleAgent; mapping (address => uint) public balances; function Presale() public { minInvestedLimit = 10000000000000000; price = 1000000000000000000000; bountyTokensPercent = 3; advisorsTokensPercent = 1; devTokensPercent = 4; foundersTokensPercent = 10; softcap = 20000000000000000000; hardcap = 63000000000000000000000; addBonus(7,42); addBonus(7,25); addBonus(7,11); start = 1513774800; end = 1516885200; devLimit = 7000000000000000000; wallet = 0x72EcAEB966176c50CfFc0Db53E4A2D3DbC0d538B; devWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770; bountyTokensWallet = 0x7E513B54e3a45B60d6f92c6CECE10C68977EEA8c; foundersTokensWallet = 0x4227859C5A9Bb4391Cc4735Aa655e980a3DD4380; advisorsTokensWallet = 0x6e740ef8618A7d822238F867c622373Df8B54a22; devTokensWallet = 0xCaDca9387E12F55997F46870DA28F0af1626A6d4; }",1,"subgraph cluster_1684_Presale {
label=""Presale"";
""1684_setSoftcap"" [label=""setSoftcap""];
""1684_setNextSaleAgent"" [label=""setNextSaleAgent""];
""1684_refund"" [label=""refund""];
""1684_createTokens"" [label=""createTokens""];
""1684_withdrawDev"" [label=""withdrawDev""];
""1684_setDevLimit"" [label=""setDevLimit""];
""1684_withdraw"" [label=""withdraw""];
""1684_Presale"" [label=""Presale""];
""1684_finishMinting"" [label=""finishMinting""];
""1684_setDevWallet"" [label=""setDevWallet""];
""1684_createTokens"" -> ""1684_calculateAndTransferTokens"";
""1684_setDevWallet"" -> ""1684_notLocked"";
""1684_setDevLimit"" -> ""1684_notLocked"";
""1684_setDevLimit"" -> ""1684_onlyOwner"";
""1684_setSoftcap"" -> ""1684_onlyOwner"";
""1684_setNextSaleAgent"" -> ""1684_onlyOwner"";
""1684_finishMinting"" -> ""1684_mintExtendedTokens"";
""1684_finishMinting"" -> ""1684_onlyOwner"";
""1684_Presale"" -> ""1684_addBonus"";
""1684_setDevWallet"" -> ""1684_onlyOwner"";
""1684_createTokens"" -> ""1684_saleIsOn"";
""1684_withdraw"" -> ""1684_withdrawDev"";
}
"
0x93143d3e34a50aebab466368c3455fd858f77ad3.sol,FourOutOfFive,contract FourOutOfFive { struct GroupData { uint groupId; address[] participants; uint timestamp; uint betSize; uint rewardSize; uint8 rewardsAvailable; address[] rewardedParticipants; bool completed; },1,"subgraph cluster_670_FourOutOfFive {
label=""FourOutOfFive"";
""670__getContactOwnerBalance"" [label=""_getContactOwnerBalance""];
""670_withdrawOwnerMaxPossibleSafe"" [label=""withdrawOwnerMaxPossibleSafe""];
""670_placeBet"" [label=""placeBet""];
""670__getGroupRewardSize"" [label=""_getGroupRewardSize""];
""670_setMaxAndMinBet"" [label=""setMaxAndMinBet""];
""670__getGroupParticipants"" [label=""_getGroupParticipants""];
""670__getGroupIds"" [label=""_getGroupIds""];
""670_constructor"" [label=""constructor""];
""670__getGroupComplete"" [label=""_getGroupComplete""];
""670__getMaxWithdraw"" [label=""_getMaxWithdraw""];
""670__getGroupRewardedParticipants"" [label=""_getGroupRewardedParticipants""];
""670__getContactBalance"" [label=""_getContactBalance""];
""670_claimReward"" [label=""claimReward""];
""670__getMaxPossibleWithdraw"" [label=""_getMaxPossibleWithdraw""];
""670__getGroupRewardsAvailable"" [label=""_getGroupRewardsAvailable""];
""670_constructor"" -> ""670_setMaxAndMinBet"";
""670_withdrawOwnerMaxPossibleSafe"" -> ""670_onlyOwner"";
""670_setMaxAndMinBet"" -> ""670_onlyOwner"";
}
"
0x39f89421c5bf8bb0d855c0216b00b45e3733b515.sol,DINOSale,"contract DINOSale is BaseDINOSale { using SafeMath for uint256; DINOToken public tokenReward; constructor( address ifSuccessfulSendTo, uint fundingGoalInEthers, uint fundingCapInEthers, uint minimumContribution, uint start, uint end, uint rateDINOToEther, address addressOfTokenUsedAsReward ) public { require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this), ); require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this), ); require(fundingGoalInEthers <= fundingCapInEthers, ); require(end > 0, ); beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; fundingCap = fundingCapInEthers * 1 ether; minContribution = minimumContribution * 1 ether; startTime = start; endTime = end; rate = rateDINOToEther; withdrawRate = rateDINOToEther; tokenReward = DINOToken(addressOfTokenUsedAsReward); }",1,"subgraph cluster_1796_DINOSale {
label=""DINOSale"";
""1796_fallback"" [label=""fallback""];
""1796_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1796_owner"" [label=""owner""];
""1796_withdrawToken"" [label=""withdrawToken""];
""1796_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1796_convertToMini"" [label=""convertToMini""];
""1796_safeWithdrawal"" [label=""safeWithdrawal""];
""1796_constructor"" [label=""constructor""];
""1796_fallback"" -> ""1796_checkFundingCap"";
""1796_ownerAllocateTokens"" -> ""1796_onlyOwner"";
""1796_withdrawToken"" -> ""1796_convertToMini"";
""1796_safeWithdrawal"" -> ""1796_afterDeadline"";
""1796_fallback"" -> ""1796_afterStartTime"";
""1796_fallback"" -> ""1796_saleNotClosed"";
""1796_fallback"" -> ""1796_beforeDeadline"";
""1796_fallback"" -> ""1796_checkFundingGoal"";
""1796_ownerAllocateTokens"" -> ""1796_checkFundingGoal"";
""1796_fallback"" -> ""1796_whenNotPaused"";
""1796_ownerAllocateTokens"" -> ""1796_checkFundingCap"";
""1796_safeWithdrawal"" -> ""1796_nonReentrant"";
""1796_fallback"" -> ""1796_nonReentrant"";
""1796_ownerAllocateTokens"" -> ""1796_nonReentrant"";
""1796_ownerSafeWithdrawal"" -> ""1796_nonReentrant"";
""1796_ownerSafeWithdrawal"" -> ""1796_onlyOwner"";
}
"
0xb42ce9d2a22061b7d5e569753f92edbaa2dad37b.sol,Exchanger,"contract Exchanger is Administered { bool public enabled = false; ITradeableAsset public tokenContract; IYeekFormula public formulaContract; uint32 public weight; constructor(address _token, uint32 _weight, address _formulaContract) { require (_weight > 0 && weight <= 1000000); weight = _weight; tokenContract = ITradeableAsset(_token); formulaContract = IYeekFormula(_formulaContract); }",1,"subgraph cluster_567_Exchanger {
label=""Exchanger"";
""567_depositTokens"" [label=""depositTokens""];
""567_buy"" [label=""buy""];
""567_withdrawEther"" [label=""withdrawEther""];
""567_constructor"" [label=""constructor""];
""567_getPurchasePrice"" [label=""getPurchasePrice""];
""567_enable"" [label=""enable""];
""567_sell"" [label=""sell""];
""567_depositEther"" [label=""depositEther""];
""567_getReserveBalances"" [label=""getReserveBalances""];
""567_disable"" [label=""disable""];
""567_withdrawTokens"" [label=""withdrawTokens""];
""567_getQuotePrice"" [label=""getQuotePrice""];
""567_getSalePrice"" [label=""getSalePrice""];
""567_setReserveWeight"" [label=""setReserveWeight""];
""567_setReserveWeight"" -> ""567_onlyAdmin"";
""567_depositEther"" -> ""567_onlyOwner"";
""567_withdrawTokens"" -> ""567_onlyOwner"";
""567_withdrawEther"" -> ""567_onlyOwner"";
""567_depositTokens"" -> ""567_onlyOwner"";
""567_enable"" -> ""567_onlyAdmin"";
""567_disable"" -> ""567_onlyAdmin"";
}
"
0x7777777189c4e413bbe6ea9df6c2b4f34f53cdd3.sol,Destructible,contract Destructible is Ownable { function Destructible() payable public { },1,"subgraph cluster_177_Destructible {
label=""Destructible"";
""177_destroy"" [label=""destroy""];
""177_Destructible"" [label=""Destructible""];
""177_destroyAndSend"" [label=""destroyAndSend""];
""177_destroyAndSend"" -> ""177_onlyOwner"";
""177_destroy"" -> ""177_onlyOwner"";
}
"
0xeb36a7650ef32f0643d39cf5b7fcefd4319febb9.sol,Cycle,contract Cycle { using SafeMath for uint; address public juryOperator; address public operator; address public icoAddress; address public juryOnlineWallet; address public projectWallet; address public arbitrationAddress; Token public token; address public jotter; bool public saveMe; struct Milestone { uint etherAmount; uint tokenAmount; uint startTime; uint finishTime; uint duration; string description; string result; },1,"subgraph cluster_2650_Cycle {
label=""Cycle"";
""2650_disputeOpened"" [label=""disputeOpened""];
""2650_withdrawOffer"" [label=""withdrawOffer""];
""2650_isDisputing"" [label=""isDisputing""];
""2650_startMilestone"" [label=""startMilestone""];
""2650_withdrawToken"" [label=""withdrawToken""];
""2650_constructor"" [label=""constructor""];
""2650_editMilestone"" [label=""editMilestone""];
""2650_withdrawEther"" [label=""withdrawEther""];
""2650_acceptOffer"" [label=""acceptOffer""];
""2650_activate"" [label=""activate""];
""2650_setCurrentFundingRound"" [label=""setCurrentFundingRound""];
""2650_seal"" [label=""seal""];
""2650_assignPartition"" [label=""assignPartition""];
""2650_failSafe"" [label=""failSafe""];
""2650_verdictExecuted"" [label=""verdictExecuted""];
""2650_fallback"" [label=""fallback""];
""2650_addRoundPrice"" [label=""addRoundPrice""];
""2650_milestonesLength"" [label=""milestonesLength""];
""2650_investorExists"" [label=""investorExists""];
""2650_addMilestone"" [label=""addMilestone""];
""2650_finishMilestone"" [label=""finishMilestone""];
""2650_payCommission"" [label=""payCommission""];
""2650_setRate"" [label=""setRate""];
""2650_setJotter"" [label=""setJotter""];
""2650_currentMilestone"" [label=""currentMilestone""];
""2650_acceptOffer"" -> ""2650_sealed"";
""2650_startMilestone"" -> ""2650_payCommission"";
""2650_seal"" -> ""2650_notSealed"";
""2650_addMilestone"" -> ""2650_notSealed"";
""2650_startMilestone"" -> ""2650_sealed"";
""2650_seal"" -> ""2650_onlyOperator"";
""2650_failSafe"" -> ""2650_onlyAdmin"";
""2650_startMilestone"" -> ""2650_onlyOperator"";
""2650_activate"" -> ""2650_notSealed"";
""2650_setCurrentFundingRound"" -> ""2650_onlyOperator"";
""2650_setRate"" -> ""2650_onlyOperator"";
""2650_finishMilestone"" -> ""2650_onlyOperator"";
""2650_acceptOffer"" -> ""2650_assignPartition"";
""2650_addMilestone"" -> ""2650_onlyOperator"";
""2650_editMilestone"" -> ""2650_onlyOperator"";
""2650_acceptOffer"" -> ""2650_onlyOperator"";
""2650_activate"" -> ""2650_onlyAdmin"";
""2650_editMilestone"" -> ""2650_notSealed"";
""2650_addRoundPrice"" -> ""2650_onlyOperator"";
}
"
0xf2b89f45cc4ebbf11a36bdb4a4b24eada8dd30a7.sol,AirDrop,contract AirDrop is Ownable { Token public tokenInstance; function AirDrop(address _tokenAddress){ tokenInstance = Token(_tokenAddress); },1,"subgraph cluster_188_AirDrop {
label=""AirDrop"";
""188_transferEthToOnwer"" [label=""transferEthToOnwer""];
""188_AirDrop"" [label=""AirDrop""];
""188_doAirDrop"" [label=""doAirDrop""];
""188_fallback"" [label=""fallback""];
""188_kill"" [label=""kill""];
""188_transferEthToOnwer"" -> ""188_onlyOwner"";
""188_doAirDrop"" -> ""188_onlyOwner"";
""188_kill"" -> ""188_onlyOwner"";
}
"
0x0e752b742f744fdc2d93774da44c37b72c3e6952.sol,CraftyCrowdsale,"contract CraftyCrowdsale is Pausable { using SafeMath for uint256; mapping(address => uint256) received; MintableToken public token; uint256 public preSaleStart; uint256 public preSaleEnd; uint256 public saleStart; uint256 public saleEnd; uint256 public issuedTokens = 0; uint256 public constant hardCap = 5000000000 * 10**8; uint256 constant teamCap = 1450000000 * 10**8; uint256 constant advisorCap = 450000000 * 10**8; uint256 constant bountyCap = 100000000 * 10**8; uint256 constant fundCap = 3000000000 * 10**8; uint256 constant lockTime = 180 days; address public etherWallet; address public teamWallet; address public advisorWallet; address public fundWallet; address public bountyWallet; TokenTimelock teamTokens; uint256 public rate; enum State { BEFORE_START, SALE, REFUND, CLOSED }",1,"subgraph cluster_1475_CraftyCrowdsale {
label=""CraftyCrowdsale"";
""1475_releaseTeamTokens"" [label=""releaseTeamTokens""];
""1475_setWallets"" [label=""setWallets""];
""1475_setRate"" [label=""setRate""];
""1475_enableRefund"" [label=""enableRefund""];
""1475_receivedFrom"" [label=""receivedFrom""];
""1475_getRate"" [label=""getRate""];
""1475_generateTokens"" [label=""generateTokens""];
""1475_claimRefund"" [label=""claimRefund""];
""1475_reclaimEther"" [label=""reclaimEther""];
""1475_buyTokens"" [label=""buyTokens""];
""1475_CraftyCrowdsale"" [label=""CraftyCrowdsale""];
""1475_fallback"" [label=""fallback""];
""1475_finishCrowdsale"" [label=""finishCrowdsale""];
""1475_finishCrowdsale"" -> ""1475_inState"";
""1475_setWallets"" -> ""1475_inState"";
""1475_buyTokens"" -> ""1475_whenNotPaused"";
""1475_setRate"" -> ""1475_onlyOwner"";
""1475_claimRefund"" -> ""1475_whenNotPaused"";
""1475_buyTokens"" -> ""1475_saleIsOn"";
""1475_buyTokens"" -> ""1475_getRate"";
""1475_enableRefund"" -> ""1475_inState"";
""1475_enableRefund"" -> ""1475_onlyOwner"";
""1475_setRate"" -> ""1475_beforeSale"";
""1475_claimRefund"" -> ""1475_inState"";
""1475_reclaimEther"" -> ""1475_onlyOwner"";
""1475_finishCrowdsale"" -> ""1475_onlyOwner"";
""1475_generateTokens"" -> ""1475_onlyOwner"";
""1475_setWallets"" -> ""1475_onlyOwner"";
""1475_fallback"" -> ""1475_buyTokens"";
}
"
0xc0a1f89bbcaddab4b736e786b6b16c67bc92ed35.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1152_MiniMeToken {
label=""MiniMeToken"";
""1152_destroyTokens"" [label=""destroyTokens""];
""1152_totalSupplyAt"" [label=""totalSupplyAt""];
""1152_MiniMeToken"" [label=""MiniMeToken""];
""1152_claimTokens"" [label=""claimTokens""];
""1152_controller"" [label=""controller""];
""1152_createCloneToken"" [label=""createCloneToken""];
""1152_generateTokens"" [label=""generateTokens""];
""1152_allowance"" [label=""allowance""];
""1152_balanceOf"" [label=""balanceOf""];
""1152_min"" [label=""min""];
""1152_balanceOfAt"" [label=""balanceOfAt""];
""1152_fallback"" [label=""fallback""];
""1152_updateValueAtNow"" [label=""updateValueAtNow""];
""1152_transferFrom"" [label=""transferFrom""];
""1152_totalSupply"" [label=""totalSupply""];
""1152_getValueAt"" [label=""getValueAt""];
""1152_doTransfer"" [label=""doTransfer""];
""1152_transfer"" [label=""transfer""];
""1152_isContract"" [label=""isContract""];
""1152_enableTransfers"" [label=""enableTransfers""];
""1152_approveAndCall"" [label=""approveAndCall""];
""1152_approve"" [label=""approve""];
""1152_transferFrom"" -> ""1152_doTransfer"";
""1152_doTransfer"" -> ""1152_isContract"";
""1152_destroyTokens"" -> ""1152_updateValueAtNow"";
""1152_generateTokens"" -> ""1152_onlyController"";
""1152_totalSupply"" -> ""1152_totalSupplyAt"";
""1152_balanceOfAt"" -> ""1152_min"";
""1152_doTransfer"" -> ""1152_balanceOfAt"";
""1152_totalSupplyAt"" -> ""1152_min"";
""1152_generateTokens"" -> ""1152_balanceOf"";
""1152_enableTransfers"" -> ""1152_onlyController"";
""1152_generateTokens"" -> ""1152_updateValueAtNow"";
""1152_destroyTokens"" -> ""1152_balanceOf"";
""1152_destroyTokens"" -> ""1152_getValueAt"";
""1152_fallback"" -> ""1152_isContract"";
""1152_destroyTokens"" -> ""1152_onlyController"";
""1152_balanceOfAt"" -> ""1152_getValueAt"";
""1152_totalSupplyAt"" -> ""1152_getValueAt"";
""1152_doTransfer"" -> ""1152_updateValueAtNow"";
""1152_transfer"" -> ""1152_doTransfer"";
""1152_claimTokens"" -> ""1152_onlyController"";
""1152_approve"" -> ""1152_isContract"";
""1152_balanceOf"" -> ""1152_balanceOfAt"";
""1152_approveAndCall"" -> ""1152_approve"";
""1152_generateTokens"" -> ""1152_getValueAt"";
}
"
0xd54920cedf704b87342fa26d5773efabf9037a77.sol,CryptoStars,contract CryptoStars { address owner; string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public initialPrice; uint256 public transferPrice; uint256 public MaxStarIndexAvailable; uint256 public MinStarIndexAvailable; uint public nextStarIndexToAssign = 0; uint public starsRemainingToAssign = 0; uint public numberOfStarsToReserve; uint public numberOfStarsReserved = 0; mapping (uint => address) public starIndexToAddress; mapping (uint => string) public starIndexToSTRZName; mapping (uint => string) public starIndexToSTRZMasterName; mapping (address => uint256) public balanceOf; struct Offer { bool isForSale; uint starIndex; address seller; uint minValue; address onlySellTo; },1,"subgraph cluster_1592_CryptoStars {
label=""CryptoStars"";
""1592_setGivenName"" [label=""setGivenName""];
""1592_offerStarForSale"" [label=""offerStarForSale""];
""1592_buyStar"" [label=""buyStar""];
""1592_setStarInitialPrice"" [label=""setStarInitialPrice""];
""1592_reserveStarsForOwner"" [label=""reserveStarsForOwner""];
""1592_offerStarForSaleToAddress"" [label=""offerStarForSaleToAddress""];
""1592_CryptoStars"" [label=""CryptoStars""];
""1592_setTransferPrice"" [label=""setTransferPrice""];
""1592_acceptBidForStar"" [label=""acceptBidForStar""];
""1592_getStar"" [label=""getStar""];
""1592_getMinMax"" [label=""getMinMax""];
""1592_buyStarInitial"" [label=""buyStarInitial""];
""1592_withdraw"" [label=""withdraw""];
""1592_setMinMax"" [label=""setMinMax""];
""1592_setMasterName"" [label=""setMasterName""];
""1592_starNoLongerForSale"" [label=""starNoLongerForSale""];
""1592_transferStar"" [label=""transferStar""];
""1592_withdrawBidForStar"" [label=""withdrawBidForStar""];
""1592_withdrawPartial"" [label=""withdrawPartial""];
""1592_enterBidForStar"" [label=""enterBidForStar""];
""1592_buyStar"" -> ""1592_starNoLongerForSale"";
}
"
0x1b5c8afd9739c3d2af5a4859dec0482a6df7667d.sol,HomesCoin,"contract HomesCoin is ERC20Interface { string public symbol; string public name; uint8 public decimals; uint _totalSupply; uint price; address owner; mapping(address => uint) public balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000 * 10**uint(decimals); owner = msg.sender; balances[owner] = _totalSupply; price=100; emit Transfer(owner, address(0), _totalSupply); }",1,"subgraph cluster_902_HomesCoin {
label=""HomesCoin"";
""902_mint"" [label=""mint""];
""902_totalSupply"" [label=""totalSupply""];
""902_allowance"" [label=""allowance""];
""902_burn"" [label=""burn""];
""902_approve"" [label=""approve""];
""902_fallback"" [label=""fallback""];
""902_buy"" [label=""buy""];
""902_resetHouseParams"" [label=""resetHouseParams""];
""902_transfer"" [label=""transfer""];
""902_constructor"" [label=""constructor""];
""902_makeEvent"" [label=""makeEvent""];
""902_addHouse"" [label=""addHouse""];
""902_destroy"" [label=""destroy""];
""902_collect"" [label=""collect""];
""902_balanceOf"" [label=""balanceOf""];
""902_sell"" [label=""sell""];
""902_setPrice"" [label=""setPrice""];
""902_transferFrom"" [label=""transferFrom""];
}
"
0x3688587725ed6dda84bcd25aeeb04997415da50a.sol,BFreeContract,"contract BFreeContract is ERC20Interface, owned{ string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; uint256 public _totalSupply = 2240000; uint256 public icoMin = 300000; uint256 public preIcoLimit = 600000; uint256 public countHolders = 0; uint256 public amountOfInvestments = 0; uint256 preICOprice; uint256 ICOprice; uint256 public currentTokenPrice; uint256 public sellPrice; bool public preIcoIsRunning; bool public minimalGoalReached; bool public icoIsClosed; bool icoExitIsPossible; mapping (address => uint256) public tokenBalanceOf; mapping(address => mapping (address => uint256)) allowed; mapping(address => bool) frozenAccount; event FrozenFunds(address initiator, address account, string status); event BonusChanged(uint8 bonusOld, uint8 bonusNew); event minGoalReached(uint256 minIcoAmount, string notice); event preIcoEnded(uint256 preIcoAmount, string notice); event priceUpdated(uint256 oldPrice, uint256 newPrice, string notice); event withdrawed(address _to, uint256 summe, string notice); event deposited(address _from, uint256 summe, string notice); event orderToTransfer(address initiator, address _from, address _to, uint256 summe, string notice); event tokenCreated(address _creator, uint256 summe, string notice); event tokenDestroyed(address _destroyer, uint256 summe, string notice); event icoStatusUpdated(address _initiator, string status); function BFreeContract() { preIcoIsRunning = true; minimalGoalReached = false; icoExitIsPossible = false; icoIsClosed = false; tokenBalanceOf[this] += _totalSupply; allowed[this][owner] = _totalSupply; allowed[this][supervisor] = _totalSupply; currentTokenPrice = 0.024340770791075100 * 1 ether; preICOprice = 0.024340770791075100 * 1 ether; ICOprice = 0.040567951318458400 * 1 ether; sellPrice = 0; updatePrices(); }",1,"subgraph cluster_1780_BFreeContract {
label=""BFreeContract"";
""1780_destroyToken"" [label=""destroyToken""];
""1780_buyToken"" [label=""buyToken""];
""1780_sellMaximumPossibleAmountOfTokens"" [label=""sellMaximumPossibleAmountOfTokens""];
""1780_setSellPrice"" [label=""setSellPrice""];
""1780_calculateTheEndPrice"" [label=""calculateTheEndPrice""];
""1780_transferOwnership"" [label=""transferOwnership""];
""1780_setPreICOPrice"" [label=""setPreICOPrice""];
""1780_balanceOf"" [label=""balanceOf""];
""1780_freezeAccount"" [label=""freezeAccount""];
""1780_checkMinimalGoal"" [label=""checkMinimalGoal""];
""1780_allowIcoExit"" [label=""allowIcoExit""];
""1780_approve"" [label=""approve""];
""1780_checkPreIcoStatus"" [label=""checkPreIcoStatus""];
""1780__transfer"" [label=""_transfer""];
""1780_fallback"" [label=""fallback""];
""1780_buy"" [label=""buy""];
""1780_exitThisIcoForHalfOfTokenPrice"" [label=""exitThisIcoForHalfOfTokenPrice""];
""1780_getAllMyTokensForAllEtherOnContract"" [label=""getAllMyTokensForAllEtherOnContract""];
""1780_withdraw"" [label=""withdraw""];
""1780_collect"" [label=""collect""];
""1780_setICOPrice"" [label=""setICOPrice""];
""1780_sell"" [label=""sell""];
""1780_setPrices"" [label=""setPrices""];
""1780_updatePrices"" [label=""updatePrices""];
""1780_BFreeContract"" [label=""BFreeContract""];
""1780_deposit"" [label=""deposit""];
""1780_mintToken"" [label=""mintToken""];
""1780_stopThisIco"" [label=""stopThisIco""];
""1780_checkFrozenAccounts"" [label=""checkFrozenAccounts""];
""1780_transfer"" [label=""transfer""];
""1780_allowance"" [label=""allowance""];
""1780_transferFrom"" [label=""transferFrom""];
""1780_totalSupply"" [label=""totalSupply""];
""1780_destroyToken"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780_checkMinimalGoal"";
""1780_sell"" -> ""1780__transfer"";
""1780_setSellPrice"" -> ""1780_isOwner"";
""1780_exitThisIcoForHalfOfTokenPrice"" -> ""1780__transfer"";
""1780_transferFrom"" -> ""1780__transfer"";
""1780_collect"" -> ""1780_isOwner"";
""1780_fallback"" -> ""1780_buyToken"";
""1780_sellMaximumPossibleAmountOfTokens"" -> ""1780_sell"";
""1780_transferOwnership"" -> ""1780_isOwner"";
""1780_setPrices"" -> ""1780_isOwner"";
""1780_deposit"" -> ""1780_isOwner"";
""1780_setPreICOPrice"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_updatePrices"";
""1780_BFreeContract"" -> ""1780_updatePrices"";
""1780_buy"" -> ""1780_buyToken"";
""1780_buyToken"" -> ""1780_updatePrices"";
""1780_setPreICOPrice"" -> ""1780_isOwner"";
""1780_transfer"" -> ""1780__transfer"";
""1780_stopThisIco"" -> ""1780_isOwner"";
""1780_collect"" -> ""1780_withdraw"";
""1780_withdraw"" -> ""1780_isOwner"";
""1780_allowIcoExit"" -> ""1780_isOwner"";
""1780_freezeAccount"" -> ""1780_isOwner"";
""1780_mintToken"" -> ""1780_isOwner"";
""1780_getAllMyTokensForAllEtherOnContract"" -> ""1780__transfer"";
""1780_setPrices"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780__transfer"";
""1780_updatePrices"" -> ""1780_checkPreIcoStatus"";
}
"
0x4c4757b23526ba13876f8ef3efe973618266e3e8.sol,UZMINI_KO,contract UZMINI_KO { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_UZMINI_KO {
label=""UZMINI_KO"";
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
}
"
0xda11e959bcaaba5f88dbf4d866e270c78bc84b76.sol,EBP,"contract EBP is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 20000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 15000000e8; uint public target0drop = 2000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_EBP {
label=""EBP"";
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_Distribute"" [label=""Distribute""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_add"" [label=""add""];
""1253_getTokens"" [label=""getTokens""];
""1253_constructor"" [label=""constructor""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_transfer"" [label=""transfer""];
""1253_approve"" [label=""approve""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_distr"" [label=""distr""];
""1253_withdraw"" [label=""withdraw""];
""1253_getTokens"" -> ""1253_canDistr"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
}
"
0x32d782c283924f1e40b2a839b8121564b7b9142e.sol,SUPER_Q,contract SUPER_Q { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_SUPER_Q {
label=""SUPER_Q"";
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xd5670cdb0d6e6d9eedfdbaceb97d5774466f0b23.sol,YouCollectBase,"contract YouCollectBase is Owned { using SafeMath for uint256; event RedButton(uint value, uint totalSupply); function payout(address _to) public onlyCLevel { _payout(_to, this.balance); }",1,"subgraph cluster_664_YouCollectBase {
label=""YouCollectBase"";
""664_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""664_payout"" [label=""payout""];
""664__payout"" [label=""_payout""];
""664_payout"" -> ""664__payout"";
""664_payout"" -> ""664_onlyCLevel"";
""664_transferAnyERC20Token"" -> ""664_onlyCEO"";
}
"
0x58a2263f77e1b23a74a3d99b9d01506da308800b.sol,NetworkTokenPayment,"contract NetworkTokenPayment is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 55 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 45 * 1 days; uint256 public totalSupply = 100000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth =10000e8; uint public target0drop = 10000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_NetworkTokenPayment {
label=""NetworkTokenPayment"";
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" [label=""getTokens""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_withdraw"" [label=""withdraw""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transfer"" [label=""transfer""];
""1253_approve"" [label=""approve""];
""1253_Distribute"" [label=""Distribute""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_constructor"" [label=""constructor""];
""1253_fallback"" [label=""fallback""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_add"" [label=""add""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_allowance"" [label=""allowance""];
""1253_burn"" [label=""burn""];
""1253_distr"" [label=""distr""];
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
}
"
0x6947335452cb7a452fc337c28cb0d597806c7672.sol,SmartWeddingContract,"contract SmartWeddingContract { event WrittenContractProposed(uint timestamp, string ipfsHash, address wallet); event Signed(uint timestamp, address wallet); event ContractSigned(uint timestamp); event AssetProposed(uint timestamp, string asset, address wallet); event AssetAddApproved(uint timestamp, string asset, address wallet); event AssetAdded(uint timestamp, string asset); event AssetRemoveApproved(uint timestamp, string asset, address wallet); event AssetRemoved(uint timestamp, string asset); event DivorceApproved(uint timestamp, address wallet); event Divorced(uint timestamp); event FundsSent(uint timestamp, address wallet, uint amount); event FundsReceived(uint timestamp, address wallet, uint amount); bool public signed = false; bool public divorced = false; mapping (address => bool) private hasSigned; mapping (address => bool) private hasDivorced; address public husbandAddress; address public wifeAddress; string public writtenContractIpfsHash; struct Asset { string data; uint husbandAllocation; uint wifeAllocation; bool added; bool removed; mapping (address => bool) hasApprovedAdd; mapping (address => bool) hasApprovedRemove; }",1,"subgraph cluster_823_SmartWeddingContract {
label=""SmartWeddingContract"";
""823_pay"" [label=""pay""];
""823_constructor"" [label=""constructor""];
""823_fallback"" [label=""fallback""];
""823_signContract"" [label=""signContract""];
""823_removeAsset"" [label=""removeAsset""];
""823_approveAsset"" [label=""approveAsset""];
""823_divorce"" [label=""divorce""];
""823_proposeWrittenContract"" [label=""proposeWrittenContract""];
""823_isSameString"" [label=""isSameString""];
""823_proposeAsset"" [label=""proposeAsset""];
""823_getAssetIds"" [label=""getAssetIds""];
""823_proposeAsset"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_isNotDivorced"";
""823_signContract"" -> ""823_isSameString"";
""823_fallback"" -> ""823_isNotDivorced"";
""823_proposeWrittenContract"" -> ""823_onlySpouse"";
""823_pay"" -> ""823_onlySpouse"";
""823_proposeAsset"" -> ""823_isNotDivorced"";
""823_pay"" -> ""823_isNotDivorced"";
""823_proposeAsset"" -> ""823_isSameString"";
""823_fallback"" -> ""823_isSigned"";
""823_approveAsset"" -> ""823_isNotDivorced"";
""823_approveAsset"" -> ""823_isSigned"";
""823_approveAsset"" -> ""823_onlySpouse"";
""823_proposeAsset"" -> ""823_isSigned"";
""823_signContract"" -> ""823_onlySpouse"";
""823_divorce"" -> ""823_isSigned"";
""823_pay"" -> ""823_isSigned"";
""823_divorce"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_isSigned"";
""823_divorce"" -> ""823_isNotDivorced"";
}
"
0xc3a684140448995f6abeb361c56110207da04d57.sol,SignalsSociety,"contract SignalsSociety is Ownable, Memberships { event Deposited(address account, uint amount, uint balance, uint timestamp); event MembershipPaid(address account, Membership membership, uint timestamp); mapping (address => uint) public balances; function deposit(address account, uint amount) public { balances[account] += amount; Deposited(account, amount, balances[account], now); }",1,"subgraph cluster_258_SignalsSociety {
label=""SignalsSociety"";
""258_acceptMembership"" [label=""acceptMembership""];
""258_deposit"" [label=""deposit""];
""258_fallback"" [label=""fallback""];
""258_acceptMembership"" -> ""258_getMembershipPrice"";
""258_acceptMembership"" -> ""258_onlyBot"";
""258_fallback"" -> ""258_deposit"";
}
"
0xa1f1fc153936a3880412743d1b180fa65b63eece.sol,DONC,"contract DONC is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 40 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 199000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 18000e8; uint public target0drop = 30000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1255_DONC {
label=""DONC"";
""1255_constructor"" [label=""constructor""];
""1255_approve"" [label=""approve""];
""1255_withdrawAll"" [label=""withdrawAll""];
""1255_transferOwnership"" [label=""transferOwnership""];
""1255_getTokens"" [label=""getTokens""];
""1255_getTokenBalance"" [label=""getTokenBalance""];
""1255_withdraw"" [label=""withdraw""];
""1255_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1255_burn"" [label=""burn""];
""1255_balanceOf"" [label=""balanceOf""];
""1255_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1255_Distribute"" [label=""Distribute""];
""1255_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1255_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1255_transferFrom"" [label=""transferFrom""];
""1255_fallback"" [label=""fallback""];
""1255_transfer"" [label=""transfer""];
""1255_distr"" [label=""distr""];
""1255_allowance"" [label=""allowance""];
""1255_finishDistribution"" [label=""finishDistribution""];
""1255_add"" [label=""add""];
""1255_DistributeAirdrop"" -> ""1255_onlyOwner"";
""1255_add"" -> ""1255_onlyOwner"";
""1255_DistributeAirdropMultiple"" -> ""1255_Distribute"";
""1255_getTokens"" -> ""1255_canDistr"";
""1255_transferFrom"" -> ""1255_onlyPayloadSize"";
""1255_finishDistribution"" -> ""1255_onlyOwner"";
""1255_DistributeAirdrop"" -> ""1255_Distribute"";
""1255_finishDistribution"" -> ""1255_canDistr"";
""1255_transferOwnership"" -> ""1255_onlyOwner"";
""1255_withdrawAll"" -> ""1255_onlyOwner"";
""1255_withdraw"" -> ""1255_onlyOwner"";
""1255_getTokens"" -> ""1255_distr"";
""1255_Distribute"" -> ""1255_onlyOwner"";
""1255_distr"" -> ""1255_canDistr"";
""1255_constructor"" -> ""1255_distr"";
""1255_burn"" -> ""1255_onlyOwner"";
""1255_updateTokensPerEth"" -> ""1255_onlyOwner"";
""1255_transfer"" -> ""1255_onlyPayloadSize"";
""1255_DistributeAirdropMultiple"" -> ""1255_onlyOwner"";
""1255_withdrawForeignTokens"" -> ""1255_onlyOwner"";
""1255_fallback"" -> ""1255_getTokens"";
}
"
0x1f4215fe007ee5b170391241656a28a8bd13826e.sol,MultiOwner,"contract MultiOwner { event OwnerAdded(address newOwner); event OwnerRemoved(address oldOwner); event RequirementChanged(uint256 newRequirement); uint256 public ownerRequired; mapping (address => bool) public isOwner; mapping (address => bool) public RequireDispose; address[] owners; function MultiOwner(address[] _owners, uint256 _required) public { ownerRequired = _required; isOwner[msg.sender] = true; owners.push(msg.sender); for (uint256 i = 0; i < _owners.length; ++i){ require(!isOwner[_owners[i]]); isOwner[_owners[i]] = true; owners.push(_owners[i]); }",1,"subgraph cluster_327_MultiOwner {
label=""MultiOwner"";
""327_addOwner"" [label=""addOwner""];
""327_removeOwner"" [label=""removeOwner""];
""327_numberOwners"" [label=""numberOwners""];
""327_ConfirmDispose"" [label=""ConfirmDispose""];
""327_MultiOwner"" [label=""MultiOwner""];
""327_kill"" [label=""kill""];
""327_changeRequirement"" [label=""changeRequirement""];
""327_addOwner"" -> ""327_onlyOwner"";
""327_changeRequirement"" -> ""327_onlyOwner"";
""327_removeOwner"" -> ""327_ownerExists"";
""327_addOwner"" -> ""327_ownerDoesNotExist"";
""327_kill"" -> ""327_onlyOwner"";
""327_removeOwner"" -> ""327_onlyOwner"";
""327_ConfirmDispose"" -> ""327_onlyOwner"";
""327_kill"" -> ""327_ConfirmDispose"";
}
"
0x297ac8bc7540bc241f065fcc22c570b40170b573.sol,TraceTokenSale,"contract TraceTokenSale is Ownable{ using SafeMath for uint256; TraceToken public token; uint256 public constant TOTAL_NUM_TOKENS = 5e26; uint256 public constant tokensForSale = 25e25; uint256 public totalEthers = 0; uint256 public constant softCap = 3984.064 ether; uint256 public constant hardCap = 17928.287 ether; uint256 public constant presaleLimit = 7968.127 ether; bool public presaleLimitReached = false; uint256 public constant min_investment_eth = 0.5 ether; uint256 public constant max_investment_eth = 398.4064 ether; uint256 public constant min_investment_presale_eth = 5 ether; bool public refundAllowed = false; bool public paused = false; uint256 public constant bountyReward = 1e25; uint256 public constant preicoAndAdvisors = 4e25; uint256 public constant liquidityPool = 25e24; uint256 public constant futureDevelopment = 1e26; uint256 public constant teamAndFounders = 75e24; uint256 public leftOverTokens = 0; uint256[8] public founderAmounts = [uint256(teamAndFounders.div(8)),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8)]; uint256[2] public preicoAndAdvisorsAmounts = [ uint256(preicoAndAdvisors.mul(2).div(5)),preicoAndAdvisors.mul(2).div(5)]; address public wallet; address public teamAndFoundersWallet; address public advisorsAndPreICO; uint256 public constant token_per_wei = 12550; uint256 public startTime; uint256 public endTime; uint256 private constant weekInSeconds = 86400 * 7; mapping(address => uint256) public whitelist; mapping(address => uint256) public etherBalances; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event Whitelist(address indexed beneficiary, uint256 value); event SoftCapReached(); event Finalized(); function TraceTokenSale(uint256 _startTime, address traceTokenAddress, address _wallet, address _teamAndFoundersWallet, address _advisorsAndPreICO) public { require(_startTime >= now); require(_wallet != 0x0); require(_teamAndFoundersWallet != 0x0); require(_advisorsAndPreICO != 0x0); token = TraceToken(traceTokenAddress); wallet = _wallet; teamAndFoundersWallet = _teamAndFoundersWallet; advisorsAndPreICO = _advisorsAndPreICO; startTime = _startTime; endTime = _startTime + 4 * weekInSeconds; }",1,"subgraph cluster_1968_TraceTokenSale {
label=""TraceTokenSale"";
""1968_balanceOf"" [label=""balanceOf""];
""1968_withdrawTokensToAdvisors"" [label=""withdrawTokensToAdvisors""];
""1968_validPurchase"" [label=""validPurchase""];
""1968_hasEnded"" [label=""hasEnded""];
""1968_addWhitelists"" [label=""addWhitelists""];
""1968_pauseSale"" [label=""pauseSale""];
""1968_fallback"" [label=""fallback""];
""1968_hardCapReached"" [label=""hardCapReached""];
""1968_checkWhitelist"" [label=""checkWhitelist""];
""1968_finishCrowdsale"" [label=""finishCrowdsale""];
""1968_withdrawTokenToFounders"" [label=""withdrawTokenToFounders""];
""1968_calcAmount"" [label=""calcAmount""];
""1968_unpauseSale"" [label=""unpauseSale""];
""1968_hasStarted"" [label=""hasStarted""];
""1968_refund"" [label=""refund""];
""1968_addWhitelist"" [label=""addWhitelist""];
""1968_TraceTokenSale"" [label=""TraceTokenSale""];
""1968_isPaused"" [label=""isPaused""];
""1968_softCapReached"" [label=""softCapReached""];
""1968_withdraw"" [label=""withdraw""];
""1968_buyTokens"" [label=""buyTokens""];
""1968_refund"" -> ""1968_softCapReached"";
""1968_addWhitelist"" -> ""1968_hasEnded"";
""1968_withdrawTokensToAdvisors"" -> ""1968_onlyOwner"";
""1968_addWhitelists"" -> ""1968_addWhitelist"";
""1968_unpauseSale"" -> ""1968_onlyOwner"";
""1968_buyTokens"" -> ""1968_checkWhitelist"";
""1968_buyTokens"" -> ""1968_isPaused"";
""1968_fallback"" -> ""1968_buyTokens"";
""1968_withdraw"" -> ""1968_softCapReached"";
""1968_refund"" -> ""1968_hasEnded"";
""1968_buyTokens"" -> ""1968_hasEnded"";
""1968_withdrawTokensToAdvisors"" -> ""1968_softCapReached"";
""1968_withdrawTokenToFounders"" -> ""1968_hasEnded"";
""1968_finishCrowdsale"" -> ""1968_onlyOwner"";
""1968_finishCrowdsale"" -> ""1968_hasEnded"";
""1968_addWhitelist"" -> ""1968_onlyOwner"";
""1968_addWhitelists"" -> ""1968_onlyOwner"";
""1968_withdrawTokenToFounders"" -> ""1968_onlyOwner"";
""1968_withdrawTokenToFounders"" -> ""1968_softCapReached"";
""1968_buyTokens"" -> ""1968_validPurchase"";
""1968_addWhitelists"" -> ""1968_hasEnded"";
""1968_finishCrowdsale"" -> ""1968_softCapReached"";
""1968_pauseSale"" -> ""1968_onlyOwner"";
""1968_finishCrowdsale"" -> ""1968_hardCapReached"";
""1968_buyTokens"" -> ""1968_calcAmount"";
""1968_withdraw"" -> ""1968_onlyOwner"";
""1968_withdrawTokensToAdvisors"" -> ""1968_hasEnded"";
}
"
0xb387be1e10d56bd7c6849b7be9d6aad564854d72.sol,Alfa_quiZ,contract Alfa_quiZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Alfa_quiZ {
label=""Alfa_quiZ"";
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0xeed618c15d12c635c3c319aee7bded2e2879aea0.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private _owner; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },1,"subgraph cluster_20_PlayerBookReceiverInterface {
label=""PlayerBookReceiverInterface"";
""20_receivePlayerInfo"" [label=""receivePlayerInfo""];
""20_receivePlayerNameList"" [label=""receivePlayerNameList""];
}
"
0x5bcbb71ef20825120774e35cba72f1a15a9d27ba.sol,ENIGMA,contract ENIGMA { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ENIGMA {
label=""ENIGMA"";
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_Stop"" [label=""Stop""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x330ac216a5a8ccd493f3b9e33a524be3c7124217.sol,Bonds,contract Bonds { modifier onlyOwner(){ require(msg.sender == dev); _; },1,"subgraph cluster_1287_Bonds {
label=""Bonds"";
""1287_getBondPrice"" [label=""getBondPrice""];
""1287_setInitialPrice"" [label=""setInitialPrice""];
""1287_getTotalBondValue"" [label=""getTotalBondValue""];
""1287_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1287_extDistributeBondFund"" [label=""extDistributeBondFund""];
""1287_setAllowReferral"" [label=""setAllowReferral""];
""1287_distributeYield"" [label=""distributeYield""];
""1287_withdraw"" [label=""withdraw""];
""1287_buy"" [label=""buy""];
""1287_fallback"" [label=""fallback""];
""1287_getMyBalance"" [label=""getMyBalance""];
""1287_getBondOwner"" [label=""getBondOwner""];
""1287_setMaxbonds"" [label=""setMaxbonds""];
""1287_getBondDivShare"" [label=""getBondDivShare""];
""1287_distributeBondFund"" [label=""distributeBondFund""];
""1287_transfer"" [label=""transfer""];
""1287_setName"" [label=""setName""];
""1287_setSymbol"" [label=""setSymbol""];
""1287_addNewbond"" [label=""addNewbond""];
""1287_setAutoNewbond"" [label=""setAutoNewbond""];
""1287_getNextAvailableBond"" [label=""getNextAvailableBond""];
""1287_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""1287_constructor"" [label=""constructor""];
""1287_getOwnerBalance"" [label=""getOwnerBalance""];
""1287_setBondPrice"" [label=""setBondPrice""];
""1287_addTotalBondValue"" [label=""addTotalBondValue""];
""1287_gettotalBondDivs"" [label=""gettotalBondDivs""];
""1287_withdrawPart"" [label=""withdrawPart""];
""1287_setInitialPrice"" -> ""1287_onlyOwner"";
""1287_addNewbond"" -> ""1287_onlyOwner"";
""1287_setName"" -> ""1287_onlyOwner"";
""1287_buy"" -> ""1287_addTotalBondValue"";
""1287_setBondPrice"" -> ""1287_onlyOwner"";
""1287_buy"" -> ""1287_distributeBondFund"";
""1287_setAllowReferral"" -> ""1287_onlyOwner"";
""1287_withdrawPart"" -> ""1287_onlyOwner"";
""1287_extDistributeBondFund"" -> ""1287_onlyOwner"";
""1287_addNewbond"" -> ""1287_addTotalBondValue"";
""1287_buy"" -> ""1287_distributeYield"";
""1287_setMaxbonds"" -> ""1287_onlyOwner"";
""1287_setSymbol"" -> ""1287_onlyOwner"";
""1287_setAutoNewbond"" -> ""1287_onlyOwner"";
}
"
0x1d9be4a5681374c54b1821d0beac3a678ad128a4.sol,StorageController,"contract StorageController is SafeMath, CreatorEnabled, StringMover { Storage public stor; IMNTP public mntpToken; IGold public goldToken; IGoldIssueBurnFee public goldIssueBurnFee; address public managerAddress = 0x0; event TokenBuyRequest(address _from, string _userId, uint _reference, uint _amount, uint indexed _index); event TokenSellRequest(address _from, string _userId, uint _reference, uint _amount, uint indexed _index); event RequestCancelled(uint indexed _index); event RequestProcessed(uint indexed _index); event RequestFailed(uint indexed _index); modifier onlyManagerOrCreator() { require(msg.sender == managerAddress || msg.sender == creator); _; }",1,"subgraph cluster_2767_StorageController {
label=""StorageController"";
""2767_isHotWallet"" [label=""isHotWallet""];
""2767_processRequest"" [label=""processRequest""];
""2767_getDocCount"" [label=""getDocCount""];
""2767_getRequestBaseInfo"" [label=""getRequestBaseInfo""];
""2767_addSellTokensRequest"" [label=""addSellTokensRequest""];
""2767_processSellRequest"" [label=""processSellRequest""];
""2767_fallback"" [label=""fallback""];
""2767_setHotWalletAddress"" [label=""setHotWalletAddress""];
""2767_getRequest"" [label=""getRequest""];
""2767_addGoldTransaction"" [label=""addGoldTransaction""];
""2767_cancelRequest"" [label=""cancelRequest""];
""2767_changeGoldIssueBurnFeeContract"" [label=""changeGoldIssueBurnFeeContract""];
""2767_getAllGoldTransactionsCount"" [label=""getAllGoldTransactionsCount""];
""2767_StorageController"" [label=""StorageController""];
""2767_getHotWalletAddress"" [label=""getHotWalletAddress""];
""2767_processBuyRequestFiat"" [label=""processBuyRequestFiat""];
""2767_processBuyRequest"" [label=""processBuyRequest""];
""2767_getUserHotGoldBalance"" [label=""getUserHotGoldBalance""];
""2767_transferGoldFromHotWallet"" [label=""transferGoldFromHotWallet""];
""2767_getRequestsCount"" [label=""getRequestsCount""];
""2767_issueGoldTokens"" [label=""issueGoldTokens""];
""2767_setManagerAddress"" [label=""setManagerAddress""];
""2767_withdrawEth"" [label=""withdrawEth""];
""2767_getDoc"" [label=""getDoc""];
""2767_processSellRequestFiat"" [label=""processSellRequestFiat""];
""2767_addBuyTokensRequest"" [label=""addBuyTokensRequest""];
""2767_getGoldTransaction"" [label=""getGoldTransaction""];
""2767_processInternalRequest"" [label=""processInternalRequest""];
""2767_addDoc"" [label=""addDoc""];
""2767_getGoldTransactionsCount"" [label=""getGoldTransactionsCount""];
""2767_burnGoldTokens"" [label=""burnGoldTokens""];
""2767_withdrawTokens"" [label=""withdrawTokens""];
""2767_changeController"" [label=""changeController""];
""2767_processInternalRequest"" -> ""2767_getHotWalletAddress"";
""2767_transferGoldFromHotWallet"" -> ""2767_getUserHotGoldBalance"";
""2767_processSellRequest"" -> ""2767_issueGoldTokens"";
""2767_processInternalRequest"" -> ""2767_processBuyRequest"";
""2767_changeGoldIssueBurnFeeContract"" -> ""2767_onlyCreator"";
""2767_addGoldTransaction"" -> ""2767_onlyManagerOrCreator"";
""2767_processSellRequestFiat"" -> ""2767_getRequest"";
""2767_processSellRequest"" -> ""2767_safeSub"";
""2767_processSellRequestFiat"" -> ""2767_safeSub"";
""2767_transferGoldFromHotWallet"" -> ""2767_addGoldTransaction"";
""2767_withdrawEth"" -> ""2767_onlyManagerOrCreator"";
""2767_processBuyRequest"" -> ""2767_addGoldTransaction"";
""2767_processSellRequestFiat"" -> ""2767_onlyManagerOrCreator"";
""2767_processRequest"" -> ""2767_onlyManagerOrCreator"";
""2767_processRequest"" -> ""2767_processBuyRequest"";
""2767_transferGoldFromHotWallet"" -> ""2767_getHotWalletAddress"";
""2767_processRequest"" -> ""2767_getRequest"";
""2767_processInternalRequest"" -> ""2767_processSellRequest"";
""2767_addSellTokensRequest"" -> ""2767_burnGoldTokens"";
""2767_getRequest"" -> ""2767_bytes32ToString"";
""2767_transferGoldFromHotWallet"" -> ""2767_onlyManagerOrCreator"";
""2767_processBuyRequest"" -> ""2767_safeDiv"";
""2767_processSellRequest"" -> ""2767_isHotWallet"";
""2767_withdrawTokens"" -> ""2767_issueGoldTokens"";
""2767_setHotWalletAddress"" -> ""2767_onlyCreator"";
""2767_processBuyRequestFiat"" -> ""2767_onlyManagerOrCreator"";
""2767_cancelRequest"" -> ""2767_getRequest"";
""2767_processSellRequest"" -> ""2767_addGoldTransaction"";
""2767_addDoc"" -> ""2767_onlyManagerOrCreator"";
""2767_processRequest"" -> ""2767_processSellRequest"";
""2767_processBuyRequestFiat"" -> ""2767_processBuyRequest"";
""2767_isHotWallet"" -> ""2767_getHotWalletAddress"";
""2767_setManagerAddress"" -> ""2767_onlyCreator"";
""2767_processInternalRequest"" -> ""2767_onlyManagerOrCreator"";
""2767_withdrawTokens"" -> ""2767_onlyManagerOrCreator"";
""2767_processBuyRequest"" -> ""2767_isHotWallet"";
""2767_processBuyRequest"" -> ""2767_safeSub"";
""2767_processRequest"" -> ""2767_getRequestsCount"";
""2767_processSellRequest"" -> ""2767_safeMul"";
""2767_processSellRequestFiat"" -> ""2767_getRequestsCount"";
""2767_getDoc"" -> ""2767_bytes64ToString"";
""2767_processBuyRequest"" -> ""2767_issueGoldTokens"";
""2767_cancelRequest"" -> ""2767_onlyManagerOrCreator"";
""2767_withdrawTokens"" -> ""2767_burnGoldTokens"";
""2767_changeController"" -> ""2767_onlyCreator"";
}
"
0xe3ec74dbce6ee1d8680e38714b67ab5535c95bdb.sol,try_it,contract try_it { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_try_it {
label=""try_it"";
""143_StopGame"" [label=""StopGame""];
""143_Activate"" [label=""Activate""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
""143_fallback"" [label=""fallback""];
""143_NewQuestion"" [label=""NewQuestion""];
}
"
0xf2f13b50e63454a5ce255f8355285561c13bb3cc.sol,BNCXCrowdsale,"contract BNCXCrowdsale { Token public tokenReward; address public creator; address public owner = 0x516A2F56A6a8f9A34AbF86C877d0252dC94AAA69; uint256 public startDate; uint256 public endDate; event FundTransfer(address backer, uint amount); constructor() public { creator = msg.sender; startDate = 1544832000; endDate = 1521331200; tokenReward = Token(0x5129bdfF6B065ce57cC7E7349bA681a0aC1D00cd); }",1,"subgraph cluster_273_BNCXCrowdsale {
label=""BNCXCrowdsale"";
""273_setEndtDate"" [label=""setEndtDate""];
""273_kill"" [label=""kill""];
""273_fallback"" [label=""fallback""];
""273_setOwner"" [label=""setOwner""];
""273_setCreator"" [label=""setCreator""];
""273_sendToken"" [label=""sendToken""];
""273_constructor"" [label=""constructor""];
""273_setToken"" [label=""setToken""];
""273_setStartDate"" [label=""setStartDate""];
}
"
0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol,DrainMe,"contract DrainMe { address public winner = 0x0; address public owner; address public firstTarget = 0x461ec7309F187dd4650EE6b4D25D93c922d7D56b; address public secondTarget = 0x1C3E062c77f09fC61550703bDd1D59842C22c766; address[] public players; mapping(address=>bool) approvedPlayers; uint256 public secret; uint256[] public seed = [951828771,158769871220]; uint256[] public balance; function DranMe() public payable{ owner = msg.sender; }",1,"subgraph cluster_387_DrainMe {
label=""DrainMe"";
""387_getPlayerCount"" [label=""getPlayerCount""];
""387_guessSeed"" [label=""guessSeed""];
""387_DranMe"" [label=""DranMe""];
""387_callFirstTarget"" [label=""callFirstTarget""];
""387_setSeed"" [label=""setSeed""];
""387_becomePlayer"" [label=""becomePlayer""];
""387_manipulateSecret"" [label=""manipulateSecret""];
""387_fallback"" [label=""fallback""];
""387_winPrize"" [label=""winPrize""];
""387_unlockSecret"" [label=""unlockSecret""];
""387_checkSecret"" [label=""checkSecret""];
""387_getPrize"" [label=""getPrize""];
""387_getLength"" [label=""getLength""];
""387_setSecret"" [label=""setSecret""];
""387_callSecondTarget"" [label=""callSecondTarget""];
""387_claimPrize"" [label=""claimPrize""];
""387_addSeed"" [label=""addSeed""];
""387_manipulateSecret"" -> ""387_unlockSecret"";
""387_winPrize"" -> ""387_onlyOwner"";
""387_checkSecret"" -> ""387_onlyPlayers"";
""387_manipulateSecret"" -> ""387_onlyPlayers"";
""387_callSecondTarget"" -> ""387_onlyPlayers"";
""387_setSecret"" -> ""387_onlyOwner"";
""387_callFirstTarget"" -> ""387_onlyPlayers"";
""387_addSeed"" -> ""387_onlyPlayers"";
""387_setSeed"" -> ""387_onlyPlayers"";
""387_claimPrize"" -> ""387_onlyWinner"";
""387_guessSeed"" -> ""387_onlyPlayers"";
}
"
0x518c55ad0cc887f78e2c7fe23b14c33a34586edc.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_758_RefundVault {
label=""RefundVault"";
""758_enableRefunds"" [label=""enableRefunds""];
""758_refund"" [label=""refund""];
""758_close"" [label=""close""];
""758_deposit"" [label=""deposit""];
""758_constructor"" [label=""constructor""];
""758_enableRefunds"" -> ""758_onlyOwner"";
""758_close"" -> ""758_onlyOwner"";
""758_deposit"" -> ""758_onlyOwner"";
}
"
0x17478cc05e51da20a27bbdf66fbe4a16aae81842.sol,AuctionPotato,"contract AuctionPotato { using SafeMath for uint256; address public owner; uint public startTime; uint public endTime; string public infoUrl; string name; bool started; uint public potato; uint oldPotato; uint oldHighestBindingBid; address creatureOwner; address creature_newOwner; event CreatureOwnershipTransferred(address indexed _from, address indexed _to); bool public canceled; uint public highestBindingBid; address public highestBidder; bool blockerPay; bool blockerWithdraw; mapping(address => uint256) public fundsByBidder; bool ownerHasWithdrawn; event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid); event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount); event LogCanceled(); constructor() public { blockerWithdraw = false; blockerPay = false; owner = msg.sender; creatureOwner = owner; highestBindingBid = 2000000000000000; potato = 0; started = false; name = ; infoUrl = ""https: }",1,"subgraph cluster_771_AuctionPotato {
label=""AuctionPotato"";
""771_getHighestBid"" [label=""getHighestBid""];
""771_acceptCreatureOwnership"" [label=""acceptCreatureOwnership""];
""771_timeLeft"" [label=""timeLeft""];
""771_nextNextBid"" [label=""nextNextBid""];
""771_placeBid"" [label=""placeBid""];
""771_nextBid"" [label=""nextBid""];
""771_ownerCanWithdraw"" [label=""ownerCanWithdraw""];
""771_constructor"" [label=""constructor""];
""771_fuelContract"" [label=""fuelContract""];
""771_cancelAuction"" [label=""cancelAuction""];
""771_balance"" [label=""balance""];
""771_auctionName"" [label=""auctionName""];
""771_withdraw"" [label=""withdraw""];
""771_queryCreatureOwner"" [label=""queryCreatureOwner""];
""771_startAuction"" [label=""startAuction""];
""771_isStarted"" [label=""isStarted""];
""771_transferCreatureOwnership"" [label=""transferCreatureOwnership""];
""771_cancelAuction"" -> ""771_onlyNotCanceled"";
""771_cancelAuction"" -> ""771_onlyBeforeEnd"";
""771_placeBid"" -> ""771_onlyBeforeEnd"";
""771_placeBid"" -> ""771_onlyNotOwner"";
""771_placeBid"" -> ""771_onlyAfterStart"";
""771_cancelAuction"" -> ""771_onlyOwner"";
""771_fuelContract"" -> ""771_onlyOwner"";
""771_placeBid"" -> ""771_onlyNotCanceled"";
""771_startAuction"" -> ""771_onlyOwner"";
}
"
0xb4a448387403554616eb5b50aa4c48f75243a015.sol,Mobius2Dv2,"contract Mobius2Dv2 is UsingOraclizeRandom, DSMath { string public ipfsHash; string public ipfsHashType = ; MobiusToken public constant token = MobiusToken(0x54cdC9D889c28f55F59f6b136822868c7d4726fC); bool public upgraded; bool public initialized; address public nextVersion; LastVersion public constant lastVersion = LastVersion(0xA74642Aeae3e2Fd79150c910eB5368B64f864B1e); uint public previousRounds; uint public totalRevenue; uint public totalSharesSold; uint public totalEarningsGenerated; uint public totalDividendsPaid; uint public totalJackpotsWon; uint public constant DEV_DIVISOR = 20; uint public constant RETURNS_FRACTION = 60 * 10**16; uint public constant REFERRAL_FRACTION = 3 * 10**16; uint public constant JACKPOT_SEED_FRACTION = WAD / 20; uint public constant JACKPOT_FRACTION = 15 * 10**16; uint public constant DAILY_JACKPOT_FRACTION = 6 * 10**16; uint public constant DIVIDENDS_FRACTION = 9 * 10**16; uint public startingSharePrice = 1 finney; uint public _priceIncreasePeriod = 1 hours; uint public _priceMultiplier = 101 * 10**16; uint public _secondaryPrice = 100 finney; uint public maxDailyJackpot = 5 ether; uint public constant SOFT_DEADLINE_DURATION = 1 days; uint public constant DAILY_JACKPOT_PERIOD = 1 days; uint public constant TIME_PER_SHARE = 5 minutes; uint public nextRoundTime; uint public jackpotSeed; uint public devBalance; uint public unclaimedReturns; uint public constant MULTIPLIER = RAY; mapping (address => uint) public lastDailyEntry; struct Investor { uint lastCumulativeReturnsPoints; uint shares; }",1,"subgraph cluster_5179_Mobius2Dv2 {
label=""Mobius2Dv2"";
""5179_startNewRound"" [label=""startNewRound""];
""5179_roundInfo"" [label=""roundInfo""];
""5179_getSeed"" [label=""getSeed""];
""5179_finalizeAndRestart"" [label=""finalizeAndRestart""];
""5179__drawDailyJackpot"" [label=""_drawDailyJackpot""];
""5179__disburseReturns"" [label=""_disburseReturns""];
""5179_setNextRoundTimestamp"" [label=""setNextRoundTimestamp""];
""5179__outstandingReturns"" [label=""_outstandingReturns""];
""5179_reinvestReturns"" [label=""reinvestReturns""];
""5179_init"" [label=""init""];
""5179__finalizeRound"" [label=""_finalizeRound""];
""5179_upgrade"" [label=""upgrade""];
""5179_finalizeLastRound"" [label=""finalizeLastRound""];
""5179_totalsInfo"" [label=""totalsInfo""];
""5179_setMaxDailyJackpot"" [label=""setMaxDailyJackpot""];
""5179_withdrawDevShare"" [label=""withdrawDevShare""];
""5179__issueShares"" [label=""_issueShares""];
""5179__startNewDailyRound"" [label=""_startNewDailyRound""];
""5179_setIPFSHash"" [label=""setIPFSHash""];
""5179_setNextRoundDelay"" [label=""setNextRoundDelay""];
""5179__dailyJackpot"" [label=""_dailyJackpot""];
""5179__onRandom"" [label=""_onRandom""];
""5179__triggerOraclize"" [label=""_triggerOraclize""];
""5179_updateMyReturns"" [label=""updateMyReturns""];
""5179__updateReturns"" [label=""_updateReturns""];
""5179_investorInfo"" [label=""investorInfo""];
""5179_estimateReturns"" [label=""estimateReturns""];
""5179_hasReturns"" [label=""hasReturns""];
""5179__purchase"" [label=""_purchase""];
""5179_setRoundParams"" [label=""setRoundParams""];
""5179_constructor"" [label=""constructor""];
""5179__onRandomFailed"" [label=""_onRandomFailed""];
""5179_buyShares"" [label=""buyShares""];
""5179_setSecondaryPrice"" [label=""setSecondaryPrice""];
""5179_initOraclize"" [label=""initOraclize""];
""5179__splitRevenue"" [label=""_splitRevenue""];
""5179_fallback"" [label=""fallback""];
""5179_withdrawReturns"" [label=""withdrawReturns""];
""5179_initOraclize"" -> ""5179_auth"";
""5179__purchase"" -> ""5179__issueShares"";
""5179_initOraclize"" -> ""5179_oraclize_setNetwork"";
""5179__disburseReturns"" -> ""5179_wdiv"";
""5179_estimateReturns"" -> ""5179_hasReturns"";
""5179__triggerOraclize"" -> ""5179__requestRandom"";
""5179__purchase"" -> ""5179_min"";
""5179__purchase"" -> ""5179_mul"";
""5179__purchase"" -> ""5179_add"";
""5179_withdrawDevShare"" -> ""5179_auth"";
""5179_totalsInfo"" -> ""5179_wmul"";
""5179__issueShares"" -> ""5179_add"";
""5179_reinvestReturns"" -> ""5179__updateReturns"";
""5179_reinvestReturns"" -> ""5179_reinvestReturns"";
""5179_withdrawReturns"" -> ""5179_hasReturns"";
""5179__purchase"" -> ""5179__dailyJackpot"";
""5179_startNewRound"" -> ""5179__purchase"";
""5179__dailyJackpot"" -> ""5179__requestRandom"";
""5179_finalizeLastRound"" -> ""5179__finalizeRound"";
""5179__purchase"" -> ""5179__splitRevenue"";
""5179__issueShares"" -> ""5179_wdiv"";
""5179_withdrawReturns"" -> ""5179_sub"";
""5179__finalizeRound"" -> ""5179_wmul"";
""5179__dailyJackpot"" -> ""5179_oraclize_setCustomGasPrice"";
""5179_startNewRound"" -> ""5179__startNewDailyRound"";
""5179__outstandingReturns"" -> ""5179_mul"";
""5179__splitRevenue"" -> ""5179_wmul"";
""5179_init"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_min"";
""5179_upgrade"" -> ""5179_auth"";
""5179__splitRevenue"" -> ""5179_add"";
""5179_initOraclize"" -> ""5179_oraclize_setProof"";
""5179_setSecondaryPrice"" -> ""5179_auth"";
""5179_updateMyReturns"" -> ""5179__updateReturns"";
""5179_withdrawDevShare"" -> ""5179_sub"";
""5179__issueShares"" -> ""5179_mul"";
""5179__drawDailyJackpot"" -> ""5179__startNewDailyRound"";
""5179__triggerOraclize"" -> ""5179_auth"";
""5179__purchase"" -> ""5179__updateReturns"";
""5179_reinvestReturns"" -> ""5179_min"";
""5179__dailyJackpot"" -> ""5179_min"";
""5179__disburseReturns"" -> ""5179_mul"";
""5179_roundInfo"" -> ""5179_wmul"";
""5179__finalizeRound"" -> ""5179_add"";
""5179_setNextRoundTimestamp"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_sub"";
""5179_finalizeAndRestart"" -> ""5179_finalizeLastRound"";
""5179__disburseReturns"" -> ""5179_add"";
""5179_withdrawReturns"" -> ""5179__updateReturns"";
""5179_investorInfo"" -> ""5179_estimateReturns"";
""5179__updateReturns"" -> ""5179_add"";
""5179_reinvestReturns"" -> ""5179__purchase"";
""5179_finalizeAndRestart"" -> ""5179_startNewRound"";
""5179_estimateReturns"" -> ""5179__outstandingReturns"";
""5179_reinvestReturns"" -> ""5179_sub"";
""5179_setMaxDailyJackpot"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_add"";
""5179_setNextRoundDelay"" -> ""5179_auth"";
""5179__splitRevenue"" -> ""5179__disburseReturns"";
""5179__purchase"" -> ""5179_wmul"";
""5179_roundInfo"" -> ""5179_min"";
""5179__outstandingReturns"" -> ""5179_sub"";
""5179_buyShares"" -> ""5179__purchase"";
""5179_setIPFSHash"" -> ""5179_auth"";
""5179__updateReturns"" -> ""5179__outstandingReturns"";
""5179__onRandom"" -> ""5179__drawDailyJackpot"";
""5179_setRoundParams"" -> ""5179_auth"";
""5179_fallback"" -> ""5179_buyShares"";
}
"
0x7012ef33dcc79a7341ba05cf2c5699eaaa5e0d7d.sol,Transaction,contract Transaction is Ownable { struct TransactionNeoPlace { uint id; address seller; address buyer; bytes16 itemId; bytes8 typeItem; string location; string pictureHash; bytes16 receiptHash; string comment; bytes8 status; uint256 _price; },1,"subgraph cluster_738_Transaction {
label=""Transaction"";
""738_stringToBytes8"" [label=""stringToBytes8""];
""738_getPurchases"" [label=""getPurchases""];
""738_getSales"" [label=""getSales""];
""738_sendAmount"" [label=""sendAmount""];
""738_unlockFunds"" [label=""unlockFunds""];
""738_kill"" [label=""kill""];
""738_getNumberOfTransactions"" [label=""getNumberOfTransactions""];
""738_sendAdditionalFunds"" [label=""sendAdditionalFunds""];
""738_buyItem"" [label=""buyItem""];
""738_unlockFunds"" -> ""738_stringToBytes8"";
""738_kill"" -> ""738_onlyOwner"";
""738_sendAdditionalFunds"" -> ""738_stringToBytes8"";
}
"
0x6f5ac8fda08c00c38380777f00e265d4951b6f59.sol,QUIZ,contract QUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>=1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_QUIZ {
label=""QUIZ"";
""132_StopGame"" [label=""StopGame""];
""132_NewQuestion"" [label=""NewQuestion""];
""132_fallback"" [label=""fallback""];
""132_SetupQUIZ"" [label=""SetupQUIZ""];
""132_Try"" [label=""Try""];
""132_newQuestioner"" [label=""newQuestioner""];
}
"
0x728781e75735dc0962df3a51d7ef47e798a7107e.sol,WolkExchange,"contract WolkExchange is WolkProtocol, WolkTGE { uint256 public maxPerExchangeBP = 50; address public exchangeFormula; bool public exchangeIsRunning = false; modifier isExchangable { require(exchangeIsRunning && allSaleCompleted); _; }",1,"subgraph cluster_2452_WolkExchange {
label=""WolkExchange"";
""2452_sellWolk"" [label=""sellWolk""];
""2452_updateExchangeStatus"" [label=""updateExchangeStatus""];
""2452_purchaseWolk"" [label=""purchaseWolk""];
""2452_estLiquidationCap"" [label=""estLiquidationCap""];
""2452_sellWolkEstimate"" [label=""sellWolkEstimate""];
""2452_setMaxPerExchange"" [label=""setMaxPerExchange""];
""2452_fallback"" [label=""fallback""];
""2452_purchaseWolkEstimate"" [label=""purchaseWolkEstimate""];
""2452_setExchangeFormula"" [label=""setExchangeFormula""];
""2452_setExchangeFormula"" -> ""2452_sellWolkEstimate"";
""2452_updateExchangeStatus"" -> ""2452_onlyOwner"";
""2452_estLiquidationCap"" -> ""2452_safeMul"";
""2452_sellWolk"" -> ""2452_safeSub"";
""2452_sellWolk"" -> ""2452_isExchangable"";
""2452_purchaseWolk"" -> ""2452_safeAdd"";
""2452_purchaseWolk"" -> ""2452_purchaseWolkEstimate"";
""2452_updateExchangeStatus"" -> ""2452_purchaseWolkEstimate"";
""2452_updateExchangeStatus"" -> ""2452_sellWolkEstimate"";
""2452_sellWolk"" -> ""2452_sellWolkEstimate"";
""2452_estLiquidationCap"" -> ""2452_safeDiv"";
""2452_setMaxPerExchange"" -> ""2452_onlyOwner"";
""2452_setExchangeFormula"" -> ""2452_onlyOwner"";
""2452_purchaseWolk"" -> ""2452_isExchangable"";
""2452_sellWolk"" -> ""2452_estLiquidationCap"";
""2452_setExchangeFormula"" -> ""2452_purchaseWolkEstimate"";
}
"
0x6a5e59fbaea3e07737fbafceb600cbde5a295f24.sol,RefundEscrow,"contract RefundEscrow is Ownable, ConditionalEscrow { enum State { Active, Refunding, Closed }",1,"subgraph cluster_1379_RefundEscrow {
label=""RefundEscrow"";
""1379_close"" [label=""close""];
""1379_deposit"" [label=""deposit""];
""1379_beneficiaryWithdraw"" [label=""beneficiaryWithdraw""];
""1379_withdrawalAllowed"" [label=""withdrawalAllowed""];
""1379_constructor"" [label=""constructor""];
""1379_enableRefunds"" [label=""enableRefunds""];
""1379_deposit"" -> ""1379_deposit"";
""1379_close"" -> ""1379_onlyOwner"";
""1379_enableRefunds"" -> ""1379_onlyOwner"";
}
"
0xdb209c97e0de799bbf14e3377307780ddc26be4e.sol,DarkPay,"contract DarkPay is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 365 * 1 days; uint public round1 = now + 364 * 1 days; uint256 public totalSupply = 1000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 16000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0x024bf21EDAd749461Bf2E0830bC1F7b282bcea7C; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_DarkPay {
label=""DarkPay"";
""1261_transfer"" [label=""transfer""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_add"" [label=""add""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_burn"" [label=""burn""];
""1261_constructor"" [label=""constructor""];
""1261_distr"" [label=""distr""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_allowance"" [label=""allowance""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_approve"" [label=""approve""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
}
"
0x83d3abc4e75885db350ace57f99c3a3e00286fe8.sol,BetaCoin,"contract BetaCoin is ERC20 { using SafeMath for uint256; address owner1 = msg.sender; address owner2; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) times; mapping (address => mapping (uint256 => uint256)) dorpnum; mapping (address => mapping (uint256 => uint256)) dorptime; mapping (address => mapping (uint256 => uint256)) freeday; mapping (address => bool) public frozenAccount; mapping (address => bool) public airlist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 _Rate = 10 ** decimals; uint256 public totalSupply = 10000000000 * _Rate; uint256 public totalDistributed = 0; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 200 * _Rate; uint256 public _per = 1; bool public distributionClosed = true; bool key; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event FrozenFunds(address target, bool frozen); event Distr(address indexed to, uint256 amount); event DistrClosed(bool Closed); modifier onlyOwner() { require(msg.sender == owner1 || msg.sender == owner2); _; }",1,"subgraph cluster_1230_BetaCoin {
label=""BetaCoin"";
""1230_approve"" [label=""approve""];
""1230_closeDistribution"" [label=""closeDistribution""];
""1230_freezeAccount"" [label=""freezeAccount""];
""1230_balanceOf"" [label=""balanceOf""];
""1230_BetaCoin"" [label=""BetaCoin""];
""1230_fallback"" [label=""fallback""];
""1230_Set_per"" [label=""Set_per""];
""1230_freeze"" [label=""freeze""];
""1230_distr"" [label=""distr""];
""1230_getTokens"" [label=""getTokens""];
""1230_transfer"" [label=""transfer""];
""1230_distribute"" [label=""distribute""];
""1230_transferOwnership"" [label=""transferOwnership""];
""1230_nowInSeconds"" [label=""nowInSeconds""];
""1230_withdraw"" [label=""withdraw""];
""1230_allowance"" [label=""allowance""];
""1230_transferFrom"" [label=""transferFrom""];
""1230_lockOf"" [label=""lockOf""];
""1230_distribute"" -> ""1230_distr"";
""1230_closeDistribution"" -> ""1230_onlyOwner"";
""1230_transferOwnership"" -> ""1230_onlyOwner"";
""1230_transferFrom"" -> ""1230_onlyPayloadSize"";
""1230_freeze"" -> ""1230_freezeAccount"";
""1230_transferFrom"" -> ""1230_lockOf"";
""1230_transfer"" -> ""1230_onlyPayloadSize"";
""1230_transfer"" -> ""1230_lockOf"";
""1230_fallback"" -> ""1230_getTokens"";
""1230_withdraw"" -> ""1230_onlyOwner"";
""1230_distribute"" -> ""1230_onlyOwner"";
""1230_freeze"" -> ""1230_onlyOwner"";
""1230_Set_per"" -> ""1230_onlyOwner"";
}
"
0x290d7f8b8d7da1e92903405a74667c934ca8f086.sol,Wallet,"contract Wallet { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event TransferOwnership(address indexed from, address indexed to); address Owner; function transferOwnership(address to) onlyOwner { TransferOwnership(Owner, to); Owner = to; }",1,"subgraph cluster_307_Wallet {
label=""Wallet"";
""307_fallback"" [label=""fallback""];
""307_transferOwnership"" [label=""transferOwnership""];
""307_withdrawTokenTo"" [label=""withdrawTokenTo""];
""307_withdraw"" [label=""withdraw""];
""307_initWallet"" [label=""initWallet""];
""307_WithdrawalEnabled"" [label=""WithdrawalEnabled""];
""307_SetReleaseDate"" [label=""SetReleaseDate""];
""307_withdrawTo"" [label=""withdrawTo""];
""307_deposit"" [label=""deposit""];
""307_MinimumDeposit"" [label=""MinimumDeposit""];
""307_ReleaseDate"" [label=""ReleaseDate""];
""307_lock"" [label=""lock""];
""307_withdrawToken"" [label=""withdrawToken""];
""307_withdrawToken"" -> ""307_WithdrawalEnabled"";
""307_initWallet"" -> ""307_open"";
""307_withdrawTo"" -> ""307_WithdrawalEnabled"";
""307_withdraw"" -> ""307_withdrawTo"";
""307_deposit"" -> ""307_MinimumDeposit"";
""307_withdrawTokenTo"" -> ""307_WithdrawalEnabled"";
""307_withdrawToken"" -> ""307_withdrawTokenTo"";
""307_fallback"" -> ""307_deposit"";
""307_withdrawToken"" -> ""307_onlyOwner"";
""307_transferOwnership"" -> ""307_onlyOwner"";
""307_withdrawTokenTo"" -> ""307_onlyOwner"";
""307_withdrawTo"" -> ""307_onlyOwner"";
""307_initWallet"" -> ""307_deposit"";
}
"
0x508404d6f5342b4a11a08e8be3f9bb2ddbdc189f.sol,EtherItem23,"contract EtherItem23 is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; mapping (uint256 => address) public item23IndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public item23IndexToApproved; mapping (uint256 => uint256) private item23IndexToPrice; mapping (uint256 => uint256) private item23IndexToPreviousPrice; mapping (uint256 => address[5]) private item23IndexToPreviousOwners; address public ceoAddress; address public cooAddress; struct Item23 { string name; }",1,"subgraph cluster_1287_EtherItem23 {
label=""EtherItem23"";
""1287_createContractItem23"" [label=""createContractItem23""];
""1287__transfer"" [label=""_transfer""];
""1287_totalSupply"" [label=""totalSupply""];
""1287_priceOf"" [label=""priceOf""];
""1287_name"" [label=""name""];
""1287_balanceOf"" [label=""balanceOf""];
""1287_symbol"" [label=""symbol""];
""1287_stringToUint"" [label=""stringToUint""];
""1287_implementsERC721"" [label=""implementsERC721""];
""1287_payout"" [label=""payout""];
""1287_takeOwnership"" [label=""takeOwnership""];
""1287_ownerOf"" [label=""ownerOf""];
""1287_approve"" [label=""approve""];
""1287_setCOO"" [label=""setCOO""];
""1287_EtherItem23"" [label=""EtherItem23""];
""1287__payout"" [label=""_payout""];
""1287_getItem23"" [label=""getItem23""];
""1287_purchase"" [label=""purchase""];
""1287__addressNotNull"" [label=""_addressNotNull""];
""1287_transfer"" [label=""transfer""];
""1287__createItem23"" [label=""_createItem23""];
""1287_setCEO"" [label=""setCEO""];
""1287__approved"" [label=""_approved""];
""1287_transferFrom"" [label=""transferFrom""];
""1287__owns"" [label=""_owns""];
""1287_tokensOfOwner"" [label=""tokensOfOwner""];
""1287_createContractItem23"" -> ""1287__createItem23"";
""1287_payout"" -> ""1287_onlyCLevel"";
""1287_purchase"" -> ""1287__addressNotNull"";
""1287_createContractItem23"" -> ""1287_onlyCOO"";
""1287_createContractItem23"" -> ""1287_stringToUint"";
""1287__createItem23"" -> ""1287__transfer"";
""1287_transferFrom"" -> ""1287__addressNotNull"";
""1287_transferFrom"" -> ""1287__approved"";
""1287_transfer"" -> ""1287__addressNotNull"";
""1287_approve"" -> ""1287__owns"";
""1287_transferFrom"" -> ""1287__transfer"";
""1287_tokensOfOwner"" -> ""1287_totalSupply"";
""1287_setCEO"" -> ""1287_onlyCEO"";
""1287_purchase"" -> ""1287__transfer"";
""1287_tokensOfOwner"" -> ""1287_balanceOf"";
""1287_takeOwnership"" -> ""1287__transfer"";
""1287_payout"" -> ""1287__payout"";
""1287_setCOO"" -> ""1287_onlyCEO"";
""1287_transferFrom"" -> ""1287__owns"";
""1287_takeOwnership"" -> ""1287__addressNotNull"";
""1287_transfer"" -> ""1287__transfer"";
""1287_transfer"" -> ""1287__owns"";
""1287_takeOwnership"" -> ""1287__approved"";
}
"
0xd7b45e0cdae4c65ef2c7e19152eeb3074e20f98f.sol,Owned,contract Owned { address internal _owner; function Owned() public { _owner = msg.sender; },1,"subgraph cluster_164_Owned {
label=""Owned"";
""164_Owned"" [label=""Owned""];
""164_kill"" [label=""kill""];
""164_fallback"" [label=""fallback""];
""164_harvest"" [label=""harvest""];
""164_kill"" -> ""164_onlyOwner"";
""164_harvest"" -> ""164_onlyOwner"";
}
"
0x0174312e4aef436606ffdeb4d05d22fb68f36ba0.sol,LatiumSeller,contract LatiumSeller { address private constant _latiumAddress = 0xBb31037f997553BEc50510a635d231A35F8EC640; Latium private constant _latium = Latium(_latiumAddress); uint256 private _etherAmount = 0; uint256 private constant _tokenPrice = 10 finney; uint256 private _minimumPurchase = 10 * 10 ** uint256(_latium.decimals()); address public owner; function LatiumSeller() { owner = msg.sender; },1,"subgraph cluster_342_LatiumSeller {
label=""LatiumSeller"";
""342_fallback"" [label=""fallback""];
""342_withdrawLatium"" [label=""withdrawLatium""];
""342_LatiumSeller"" [label=""LatiumSeller""];
""342__tokensToSell"" [label=""_tokensToSell""];
""342_minimumPurchase"" [label=""minimumPurchase""];
""342_tokenPrice"" [label=""tokenPrice""];
""342_withdrawEther"" [label=""withdrawEther""];
""342_withdrawLatium"" -> ""342__tokensToSell"";
""342_withdrawEther"" -> ""342_onlyOwner"";
""342_fallback"" -> ""342__tokensToSell"";
""342_withdrawLatium"" -> ""342_onlyOwner"";
}
"
0xed42398a3df99e482039c2aec8000dba75296ee9.sol,enigma,contract enigma { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_enigma {
label=""enigma"";
""143_newQuestioner"" [label=""newQuestioner""];
""143_StopGame"" [label=""StopGame""];
""143_fallback"" [label=""fallback""];
""143_Try"" [label=""Try""];
""143_ActivateContract"" [label=""ActivateContract""];
""143_NewQuestion"" [label=""NewQuestion""];
}
"
0x744a31ede5422355d9c2bd8c44c710404336ca84.sol,NFTsCrowdsaleBase,"contract NFTsCrowdsaleBase is Superuser, INFTsCrowdsale { using SafeMath for uint256; ERC20 public erc20Contract; ERC721 public erc721Contract; uint public eth2erc20; struct Auction { bytes32 id; address seller; uint256 price; uint256 startAt; uint256 endAt; uint256 tokenId; }",1,"subgraph cluster_1478_NFTsCrowdsaleBase {
label=""NFTsCrowdsaleBase"";
""1478__transfer"" [label=""_transfer""];
""1478_constructor"" [label=""constructor""];
""1478__cancelEscrow"" [label=""_cancelEscrow""];
""1478__payByEth"" [label=""_payByEth""];
""1478__isOnAuction"" [label=""_isOnAuction""];
""1478_isOnAuction"" [label=""isOnAuction""];
""1478_getAuction"" [label=""getAuction""];
""1478__isTokenOwner"" [label=""_isTokenOwner""];
""1478__newAuction"" [label=""_newAuction""];
""1478__cancelAuction"" [label=""_cancelAuction""];
""1478_isOnPreAuction"" [label=""isOnPreAuction""];
""1478__payByErc20"" [label=""_payByErc20""];
""1478__escrow"" [label=""_escrow""];
""1478__payByErc20"" -> ""1478__isOnAuction"";
""1478__payByEth"" -> ""1478__transfer"";
""1478__newAuction"" -> ""1478__isTokenOwner"";
""1478__newAuction"" -> ""1478__escrow"";
""1478__payByErc20"" -> ""1478__transfer"";
""1478__cancelAuction"" -> ""1478__cancelEscrow"";
""1478__payByEth"" -> ""1478__isOnAuction"";
}
"
0xbf2000b42c1ba2eb9e5163a0b7e2fe987ed124b4.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_processTransaction"" [label=""processTransaction""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_pullBalance"" [label=""pullBalance""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_fallback"" -> ""928_refundTransaction"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_processTransaction"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
}
"
0xdc8d902c34f2257b8569dc9bc4f58cc149ed6e48.sol,GitmanIssue,"contract GitmanIssue { address private mediator; address public parent; string public owner; string public repository; string public issue; constructor (string ownerId, string repositoryId, string issueId, address mediatorAddress) public payable { parent = msg.sender; mediator = mediatorAddress; owner = ownerId; repository = repositoryId; issue = issueId; }",1,"subgraph cluster_79_GitmanIssue {
label=""GitmanIssue"";
""79_resolve"" [label=""resolve""];
""79_recall"" [label=""recall""];
""79_constructor"" [label=""constructor""];
}
"
0x03eff7f353aeebea3ac5f23a6e9e844581ff5ef8.sol,PLAY_iQuiz,contract PLAY_iQuiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_PLAY_iQuiz {
label=""PLAY_iQuiz"";
""148_constructor"" [label=""constructor""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x658b3573f8222c2d792ff1199933a88680b12973.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_369_AccessService {
label=""AccessService"";
""369_withdraw"" [label=""withdraw""];
""369_setFinance"" [label=""setFinance""];
""369_setService"" [label=""setService""];
}
"
0x845581267b3ffcde72a1a98efcffee48cb9ae0de.sol,ENIGMA_X,contract ENIGMA_X { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ENIGMA_X {
label=""ENIGMA_X"";
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xece0429a5130ebe0616363939067eefca4fbaceb.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1095_MiniMeToken {
label=""MiniMeToken"";
""1095_balanceOfAt"" [label=""balanceOfAt""];
""1095_MiniMeToken"" [label=""MiniMeToken""];
""1095_destroyTokens"" [label=""destroyTokens""];
""1095_isContract"" [label=""isContract""];
""1095_fallback"" [label=""fallback""];
""1095_totalSupplyAt"" [label=""totalSupplyAt""];
""1095_createCloneToken"" [label=""createCloneToken""];
""1095_getValueAt"" [label=""getValueAt""];
""1095_allowance"" [label=""allowance""];
""1095_transferFrom"" [label=""transferFrom""];
""1095_enableTransfers"" [label=""enableTransfers""];
""1095_doTransfer"" [label=""doTransfer""];
""1095_transfer"" [label=""transfer""];
""1095_approve"" [label=""approve""];
""1095_min"" [label=""min""];
""1095_approveAndCall"" [label=""approveAndCall""];
""1095_balanceOf"" [label=""balanceOf""];
""1095_generateTokens"" [label=""generateTokens""];
""1095_claimTokens"" [label=""claimTokens""];
""1095_totalSupply"" [label=""totalSupply""];
""1095_updateValueAtNow"" [label=""updateValueAtNow""];
""1095_generateTokens"" -> ""1095_totalSupply"";
""1095_approve"" -> ""1095_isContract"";
""1095_transferFrom"" -> ""1095_doTransfer"";
""1095_transfer"" -> ""1095_doTransfer"";
""1095_balanceOfAt"" -> ""1095_getValueAt"";
""1095_totalSupplyAt"" -> ""1095_getValueAt"";
""1095_claimTokens"" -> ""1095_onlyController"";
""1095_approveAndCall"" -> ""1095_approve"";
""1095_doTransfer"" -> ""1095_balanceOfAt"";
""1095_destroyTokens"" -> ""1095_onlyController"";
""1095_totalSupply"" -> ""1095_totalSupplyAt"";
""1095_doTransfer"" -> ""1095_isContract"";
""1095_destroyTokens"" -> ""1095_totalSupply"";
""1095_fallback"" -> ""1095_isContract"";
""1095_generateTokens"" -> ""1095_onlyController"";
""1095_totalSupplyAt"" -> ""1095_min"";
""1095_generateTokens"" -> ""1095_updateValueAtNow"";
""1095_generateTokens"" -> ""1095_balanceOf"";
""1095_balanceOfAt"" -> ""1095_min"";
""1095_destroyTokens"" -> ""1095_updateValueAtNow"";
""1095_enableTransfers"" -> ""1095_onlyController"";
""1095_doTransfer"" -> ""1095_updateValueAtNow"";
""1095_destroyTokens"" -> ""1095_balanceOf"";
""1095_balanceOf"" -> ""1095_balanceOfAt"";
}
"
0xd14b221dfb7c7a4d19d464e41affe3e2e182c90e.sol,TokenTrader,"contract TokenTrader is Owned { using SafeMath for uint256; address public asset; address public exchange; address public baseowner; uint256 public units; uint256 public buyPrice; uint256 public sellPrice; uint256 public exchFee; bool public buysTokens; bool public sellsTokens; event ActivatedEvent(bool buys, bool sells); event MakerDepositedEther(uint256 amount); event MakerWithdrewAsset(uint256 tokens); event MakerTransferredAsset(address toTokenTrader, uint256 tokens); event MakerWithdrewERC20Token(address tokenAddress, uint256 tokens); event MakerWithdrewEther(uint256 ethers); event MakerTransferredEther(address toTokenTrader, uint256 ethers); event TakerBoughtAsset(address indexed buyer, uint256 ethersSent, uint256 ethersReturned, uint256 tokensBought); event TakerSoldAsset(address indexed seller, uint256 amountOfTokensToSell, uint256 tokensSold, uint256 etherValueOfTokensSold); function TokenTrader ( address _asset, address _baseowner, address _exchange, uint256 _exchFee, uint256 _units, uint256 _buyPrice, uint256 _sellPrice, bool _buysTokens, bool _sellsTokens ) { asset = _asset; units = _units; buyPrice = _buyPrice; baseowner = _baseowner; exchange = _exchange; exchFee = _exchFee; sellPrice = _sellPrice; buysTokens = _buysTokens; sellsTokens = _sellsTokens; ActivatedEvent(buysTokens, sellsTokens); }",1,"subgraph cluster_2200_TokenTrader {
label=""TokenTrader"";
""2200_takerSellAsset"" [label=""takerSellAsset""];
""2200_makerWithdrawEther"" [label=""makerWithdrawEther""];
""2200_buysTokens"" [label=""buysTokens""];
""2200_units"" [label=""units""];
""2200_takerBuyAsset"" [label=""takerBuyAsset""];
""2200_makerTransferAsset"" [label=""makerTransferAsset""];
""2200_activate"" [label=""activate""];
""2200_owner"" [label=""owner""];
""2200_makerWithdrawERC20Token"" [label=""makerWithdrawERC20Token""];
""2200_sellPrice"" [label=""sellPrice""];
""2200_makerWithdrawAsset"" [label=""makerWithdrawAsset""];
""2200_asset"" [label=""asset""];
""2200_fallback"" [label=""fallback""];
""2200_sellsTokens"" [label=""sellsTokens""];
""2200_TokenTrader"" [label=""TokenTrader""];
""2200_makerTransferEther"" [label=""makerTransferEther""];
""2200_buyPrice"" [label=""buyPrice""];
""2200_makerDepositEther"" [label=""makerDepositEther""];
""2200_makerDepositEther"" -> ""2200_onlyOwner"";
""2200_makerWithdrawERC20Token"" -> ""2200_onlyOwner"";
""2200_makerWithdrawEther"" -> ""2200_onlyOwner"";
""2200_fallback"" -> ""2200_takerBuyAsset"";
""2200_makerWithdrawAsset"" -> ""2200_onlyOwner"";
""2200_makerTransferEther"" -> ""2200_onlyOwner"";
""2200_activate"" -> ""2200_onlyOwner"";
""2200_makerTransferAsset"" -> ""2200_onlyOwner"";
}
"
0x1eafd303c88b6cd638c77b40596de3dcf001b249.sol,NoOwnerEx,contract NoOwnerEx is NoOwner { function reclaimEther(address _to) external onlyOwner { _to.transfer(address(this).balance); },1,"subgraph cluster_621_NoOwnerEx {
label=""NoOwnerEx"";
""621_reclaimToken"" [label=""reclaimToken""];
""621_reclaimEther"" [label=""reclaimEther""];
""621_reclaimEther"" -> ""621_onlyOwner"";
""621_reclaimToken"" -> ""621_onlyOwner"";
}
"
0xc336e10dee4cab01248cf3b1747b52d78394c77a.sol,HoardPresale,contract HoardPresale is Ownable { using SafeMathLib for uint; mapping (address => bool) public presaleParticipantWhitelist; address[] public investors; mapping (address => bool) private investorsMapping; mapping(address => uint) public balances; mapping(address => uint256) public tokenDue; uint public freezeEndsAt; uint public weiRaised = 0; uint public maxFundLimit = 5333000000000000000000; HoardCrowdsale public crowdsale; struct Tranche { uint amount; uint price; },1,"subgraph cluster_891_HoardPresale {
label=""HoardPresale"";
""891_participateCrowdsaleAll"" [label=""participateCrowdsaleAll""];
""891_refund"" [label=""refund""];
""891_setCrowdsale"" [label=""setCrowdsale""];
""891_setFreezeEnd"" [label=""setFreezeEnd""];
""891_fallback"" [label=""fallback""];
""891_getInvestorsCount"" [label=""getInvestorsCount""];
""891_setPricing"" [label=""setPricing""];
""891_getCurrentPrice"" [label=""getCurrentPrice""];
""891_constructor"" [label=""constructor""];
""891_calculatePrice"" [label=""calculatePrice""];
""891_participateCrowdsaleInvestor"" [label=""participateCrowdsaleInvestor""];
""891_getFirstTranche"" [label=""getFirstTranche""];
""891_getLastTranche"" [label=""getLastTranche""];
""891_getPricingStartsAt"" [label=""getPricingStartsAt""];
""891_participateCrowdsaleSelected"" [label=""participateCrowdsaleSelected""];
""891_getCurrentTranche"" [label=""getCurrentTranche""];
""891_getTranche"" [label=""getTranche""];
""891_getPricingEndsAt"" [label=""getPricingEndsAt""];
""891_setPresaleParticipantWhitelist"" [label=""setPresaleParticipantWhitelist""];
""891_participateCrowdsaleAll"" -> ""891_onlyOwner"";
""891_setCrowdsale"" -> ""891_onlyOwner"";
""891_calculatePrice"" -> ""891_getCurrentPrice"";
""891_setPricing"" -> ""891_onlyOwner"";
""891_setFreezeEnd"" -> ""891_onlyOwner"";
""891_setPresaleParticipantWhitelist"" -> ""891_onlyOwner"";
""891_fallback"" -> ""891_calculatePrice"";
""891_getCurrentPrice"" -> ""891_getCurrentTranche"";
""891_participateCrowdsaleAll"" -> ""891_participateCrowdsaleInvestor"";
""891_getPricingStartsAt"" -> ""891_getFirstTranche"";
""891_participateCrowdsaleSelected"" -> ""891_participateCrowdsaleInvestor"";
""891_participateCrowdsaleSelected"" -> ""891_onlyOwner"";
""891_getPricingEndsAt"" -> ""891_getLastTranche"";
""891_participateCrowdsaleInvestor"" -> ""891_onlyOwner"";
}
"
0x29c690419841e126b74981e4709e43916ac80f64.sol,QQ_game,contract QQ_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_QQ_game {
label=""QQ_game"";
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x6c221dea36d48512947bde8aeb58811db50dbf6f.sol,PartnerContract,contract PartnerContract { function() external payable { if(msg.value == 0) { uint part = address(this).balance / 2; address(0x6B6e4B338b4D5f7D847DaB5492106751C57b7Ff0).transfer(part); address(0xe09f3630663B6b86e82D750b00206f8F8C6F8aD4).transfer(part); },1,"subgraph cluster_35_PartnerContract {
label=""PartnerContract"";
""35_fallback"" [label=""fallback""];
}
"
0x330bebabc9a2a4136e3d1cb38ca521f5a95aec2e.sol,KoreaShow,"contract KoreaShow is TokenController, Controlled { using SafeMath for uint256; uint256 public startFundingTime; uint256 public endFundingTime; uint256 constant public maximumFunding = 100 ether; uint256 public tokensPerEther = 31000; uint256 constant oneDay = 86400; uint256 public totalCollected = 0; bool public paused; string public techProvider = ; Token public tokenContract; bool public finalized = false; bool public allowChange = true; bool private transfersEnabled = true; address private vaultAddress; bool private initialed = false; event Payment(address indexed _sender, uint256 _ethAmount, uint256 _tokenAmount); function KoreaShow( uint _startFundingTime, uint _endFundingTime, address _vaultAddress, address _tokenAddress ) public { require(_endFundingTime > now); require(_endFundingTime >= _startFundingTime); require(_vaultAddress != 0); require(_tokenAddress != 0); require(!initialed); startFundingTime = _startFundingTime; endFundingTime = _endFundingTime; vaultAddress = _vaultAddress; tokenContract = Token(_tokenAddress); paused = false; initialed = true; }",1,"subgraph cluster_1713_KoreaShow {
label=""KoreaShow"";
""1713_pauseContribution"" [label=""pauseContribution""];
""1713_claimTokens"" [label=""claimTokens""];
""1713_KoreaShow"" [label=""KoreaShow""];
""1713_fallback"" [label=""fallback""];
""1713_changeToken"" [label=""changeToken""];
""1713_allowTransfersEnabled"" [label=""allowTransfersEnabled""];
""1713_proxyPayment"" [label=""proxyPayment""];
""1713_doPayment"" [label=""doPayment""];
""1713_finalizeSale"" [label=""finalizeSale""];
""1713_resumeContribution"" [label=""resumeContribution""];
""1713_setTime"" [label=""setTime""];
""1713_isContract"" [label=""isContract""];
""1713_onApprove"" [label=""onApprove""];
""1713_onTransfer"" [label=""onTransfer""];
""1713_changeTokenController"" [label=""changeTokenController""];
""1713_changeTokensPerEther"" [label=""changeTokensPerEther""];
""1713_setTime"" -> ""1713_onlyController"";
""1713_proxyPayment"" -> ""1713_notPaused"";
""1713_claimTokens"" -> ""1713_onlyController"";
""1713_changeToken"" -> ""1713_onlyController"";
""1713_pauseContribution"" -> ""1713_onlyController"";
""1713_changeTokenController"" -> ""1713_onlyController"";
""1713_fallback"" -> ""1713_notPaused"";
""1713_changeTokensPerEther"" -> ""1713_onlyController"";
""1713_proxyPayment"" -> ""1713_doPayment"";
""1713_resumeContribution"" -> ""1713_onlyController"";
""1713_finalizeSale"" -> ""1713_onlyController"";
""1713_fallback"" -> ""1713_doPayment"";
""1713_allowTransfersEnabled"" -> ""1713_onlyController"";
}
"
0x496676b297799eeb9446b9d808c6051d33c6cb58.sol,the_game,contract the_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_the_game {
label=""the_game"";
""143_Try"" [label=""Try""];
""143_StopGame"" [label=""StopGame""];
""143_fallback"" [label=""fallback""];
""143_Activate"" [label=""Activate""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_newQuestioner"" [label=""newQuestioner""];
}
"
0x00f9f4f3ced5d4f6aedea8a92414206557df7167.sol,SNL,"contract SNL is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 500000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function SNL() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_SNL {
label=""SNL"";
""706__transfer"" [label=""_transfer""];
""706_SNL"" [label=""SNL""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x5bf5436b367de54860d1b0be31203349a4d5caa7.sol,CryptoCarAuction,"contract CryptoCarAuction is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 45000000000000000000000000; uint256 public totalDistributed = 100000000000000000000000; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 2600000000000000000000; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_962_CryptoCarAuction {
label=""CryptoCarAuction"";
""962_getTokens"" [label=""getTokens""];
""962_updateTokensPerEth"" [label=""updateTokensPerEth""];
""962_constructor"" [label=""constructor""];
""962_transferFrom"" [label=""transferFrom""];
""962_transferOwnership"" [label=""transferOwnership""];
""962_burn"" [label=""burn""];
""962_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""962_doAirdrop"" [label=""doAirdrop""];
""962_finishDistribution"" [label=""finishDistribution""];
""962_getasall"" [label=""getasall""];
""962_balanceOf"" [label=""balanceOf""];
""962_approve"" [label=""approve""];
""962_distr"" [label=""distr""];
""962_allowance"" [label=""allowance""];
""962_getTokenBalance"" [label=""getTokenBalance""];
""962_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""962_fallback"" [label=""fallback""];
""962_transfer"" [label=""transfer""];
""962_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""962_getas"" [label=""getas""];
""962_fallback"" -> ""962_getTokens"";
""962_updateTokensPerEth"" -> ""962_onlyOwner"";
""962_adminClaimAirdrop"" -> ""962_onlyOwner"";
""962_getTokens"" -> ""962_distr"";
""962_burn"" -> ""962_onlyOwner"";
""962_getTokens"" -> ""962_canDistr"";
""962_transferOwnership"" -> ""962_onlyOwner"";
""962_getasall"" -> ""962_onlyOwner"";
""962_distr"" -> ""962_canDistr"";
""962_transfer"" -> ""962_onlyPayloadSize"";
""962_getas"" -> ""962_onlyOwner"";
""962_finishDistribution"" -> ""962_onlyOwner"";
""962_adminClaimAirdropMultiple"" -> ""962_onlyOwner"";
""962_adminClaimAirdrop"" -> ""962_doAirdrop"";
""962_finishDistribution"" -> ""962_canDistr"";
""962_adminClaimAirdropMultiple"" -> ""962_doAirdrop"";
""962_transferFrom"" -> ""962_onlyPayloadSize"";
""962_constructor"" -> ""962_distr"";
""962_withdrawForeignTokens"" -> ""962_onlyOwner"";
}
"
0x25d3b1550e518ba8d7581cad811285e005902faa.sol,SheetMusic,"contract SheetMusic is OwnableContract { enum NoteLength { WHOLE_NOTE, DOTTED_HALF_NOTE, HALF_NOTE, DOTTED_QUARTER_NOTE, QUARTER_NOTE, DOTTED_EIGHTH_NOTE, EIGHTH_NOTE, DOTTED_SIXTEENTH_NOTE, SIXTEENTH_NOTE }",1,"subgraph cluster_638_SheetMusic {
label=""SheetMusic"";
""638_setMilestone"" [label=""setMilestone""];
""638_setMinDonation"" [label=""setMinDonation""];
""638_donate"" [label=""donate""];
""638_getDonatee"" [label=""getDonatee""];
""638_fallback"" [label=""fallback""];
""638_createBeat"" [label=""createBeat""];
""638_createPassage"" [label=""createPassage""];
""638_checkGoal"" [label=""checkGoal""];
""638_splice"" [label=""splice""];
""638_getBeat"" [label=""getBeat""];
""638_checkMidiNoteValue"" [label=""checkMidiNoteValue""];
""638_getNumberOfBeats"" [label=""getNumberOfBeats""];
""638_SheetMusic"" [label=""SheetMusic""];
""638_getTotalDonated"" [label=""getTotalDonated""];
""638_checkMidiNotesValue"" [label=""checkMidiNotesValue""];
""638_transferMilestone"" [label=""transferMilestone""];
""638_getDonationStats"" [label=""getDonationStats""];
""638_createBeat"" -> ""638_checkMidiNotesValue"";
""638_setMinDonation"" -> ""638_onlyOwner"";
""638_fallback"" -> ""638_checkGoal"";
""638_checkGoal"" -> ""638_transferMilestone"";
""638_createBeat"" -> ""638_checkGoal"";
""638_donate"" -> ""638_checkGoal"";
""638_setMilestone"" -> ""638_onlyOwner"";
""638_createPassage"" -> ""638_checkGoal"";
""638_createPassage"" -> ""638_splice"";
""638_checkMidiNotesValue"" -> ""638_checkMidiNoteValue"";
""638_createPassage"" -> ""638_checkMidiNotesValue"";
}
"
0xc780b0272bbe7caedb6b47157d88ce51b324da58.sol,CashFlow,"contract CashFlow { address public depositAddress = 0xbb02b2754386f0c76a2ad7f70ca4b272d29372f2; address public owner; modifier onlyOwner { require(owner == msg.sender, ); _; }",1,"subgraph cluster_97_CashFlow {
label=""CashFlow"";
""97_withdraw"" [label=""withdraw""];
""97_constructor"" [label=""constructor""];
""97_ownerkill"" [label=""ownerkill""];
""97_setOwner"" [label=""setOwner""];
""97_fallback"" [label=""fallback""];
""97_setDepositAddress"" [label=""setDepositAddress""];
""97_setDepositAddress"" -> ""97_onlyOwner"";
""97_setOwner"" -> ""97_onlyOwner"";
""97_withdraw"" -> ""97_onlyOwner"";
""97_ownerkill"" -> ""97_onlyOwner"";
}
"
0x1d4ccc31dab6ea20f461d329a0562c1c58412515.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1234_RefundVault {
label=""RefundVault"";
""1234_close"" [label=""close""];
""1234_RefundVault"" [label=""RefundVault""];
""1234_refund"" [label=""refund""];
""1234_deposit"" [label=""deposit""];
""1234_enableRefunds"" [label=""enableRefunds""];
""1234_close"" -> ""1234_onlyOwner"";
""1234_deposit"" -> ""1234_onlyOwner"";
""1234_enableRefunds"" -> ""1234_onlyOwner"";
}
"
0xeb914da749340266ac474f930c65c2ed4df89922.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_946_Destructible {
label=""Destructible"";
""946_destroyAndSend"" [label=""destroyAndSend""];
""946_Destructible"" [label=""Destructible""];
""946_destroy"" [label=""destroy""];
""946_destroyAndSend"" -> ""946_onlyOwner"";
""946_destroy"" -> ""946_onlyOwner"";
}
"
0x1ec7345ee1780d847b29f65aa0ecf70cb278966e.sol,EtherTv,"contract EtherTv is Ownable { using SafeMath for uint256; Show[] private shows; uint256 public devOwed; mapping (address => uint256) public userDividends; event ShowPurchased( uint256 _tokenId, address oldOwner, address newOwner, uint256 price, uint256 nextPrice ); uint256 constant private FIRST_CAP = 0.5 ether; uint256 constant private SECOND_CAP = 1.0 ether; uint256 constant private THIRD_CAP = 3.0 ether; uint256 constant private FINAL_CAP = 5.0 ether; struct Show { uint256 price; uint256 payout; address owner; }",1,"subgraph cluster_684_EtherTv {
label=""EtherTv"";
""684_createMultipleShows"" [label=""createMultipleShows""];
""684_getNextPrice"" [label=""getNextPrice""];
""684_purchaseShow"" [label=""purchaseShow""];
""684_distributeDividends"" [label=""distributeDividends""];
""684_withdrawDividends"" [label=""withdrawDividends""];
""684_getShow"" [label=""getShow""];
""684_createShow"" [label=""createShow""];
""684_withdraw"" [label=""withdraw""];
""684_getTotalPayout"" [label=""getTotalPayout""];
""684_calculatePoolCut"" [label=""calculatePoolCut""];
""684_purchaseShow"" -> ""684_distributeDividends"";
""684_createMultipleShows"" -> ""684_onlyOwner"";
""684_distributeDividends"" -> ""684_getTotalPayout"";
""684_getShow"" -> ""684_getNextPrice"";
""684_createMultipleShows"" -> ""684_createShow"";
""684_purchaseShow"" -> ""684_calculatePoolCut"";
""684_createShow"" -> ""684_onlyOwner"";
""684_withdraw"" -> ""684_onlyOwner"";
""684_getShow"" -> ""684_getTotalPayout"";
""684_purchaseShow"" -> ""684_getNextPrice"";
}
"
0xaa4250216f77a79fd9983642a987f708f1fe7504.sol,CutiePluginBase,"contract CutiePluginBase is PluginInterface, Pausable { function isPluginInterface() public pure returns (bool) { return true; }",1,"subgraph cluster_462_CutiePluginBase {
label=""CutiePluginBase"";
""462__isOwner"" [label=""_isOwner""];
""462_setFee"" [label=""setFee""];
""462_onRemove"" [label=""onRemove""];
""462__transfer"" [label=""_transfer""];
""462__computeFee"" [label=""_computeFee""];
""462_isPluginInterface"" [label=""isPluginInterface""];
""462_withdraw"" [label=""withdraw""];
""462__escrow"" [label=""_escrow""];
""462_setup"" [label=""setup""];
""462_onRemove"" -> ""462_onlyCore"";
""462_onRemove"" -> ""462_withdraw"";
}
"
0x5b566b473bb0ea8dc0fc6047dd623e5fa3b42307.sol,Base,contract Base { using SafeMath for uint256; uint public createTime = now; address public owner; modifier onlyOwner { require(msg.sender == owner); _; },1,"subgraph cluster_274_Base {
label=""Base"";
""274_unLock"" [label=""unLock""];
""274_setOwner"" [label=""setOwner""];
""274__userRefund"" [label=""_userRefund""];
""274_userRefund"" [label=""userRefund""];
""274_lock"" [label=""lock""];
""274_getEventId"" [label=""getEventId""];
""274_setLock"" [label=""setLock""];
""274_userRefund"" -> ""274__userRefund"";
""274__userRefund"" -> ""274_unLock"";
""274__userRefund"" -> ""274_lock"";
""274_setOwner"" -> ""274_onlyOwner"";
""274_setLock"" -> ""274_onlyOwner"";
}
"
0x009ef15c147ff4c0eb373e1abd2f4d184e5cb916.sol,CampaignContract,contract CampaignContract { using SafeMath for uint256; address internal owner; uint256 public minUSD; uint256 public maxUSD; uint256 public maxContribution; uint256 public minContribution; struct KYCObject { bytes32 phone; bytes32 name; bytes32 occupation; bytes32 addressOne; bytes32 addressTwo; },1,"subgraph cluster_1022_CampaignContract {
label=""CampaignContract"";
""1022_getName"" [label=""getName""];
""1022_retrieveAssets"" [label=""retrieveAssets""];
""1022_changeOwner"" [label=""changeOwner""];
""1022_getAmountContributed"" [label=""getAmountContributed""];
""1022_getAddressTwo"" [label=""getAddressTwo""];
""1022_acceptContribution"" [label=""acceptContribution""];
""1022_getOccupation"" [label=""getOccupation""];
""1022_CampaignContract"" [label=""CampaignContract""];
""1022_getAmountAttempted"" [label=""getAmountAttempted""];
""1022_getPhone"" [label=""getPhone""];
""1022_getPotentialAmount"" [label=""getPotentialAmount""];
""1022_killContract"" [label=""killContract""];
""1022_rejectContribution"" [label=""rejectContribution""];
""1022_getAddressOne"" [label=""getAddressOne""];
""1022_withdrawToWallet"" [label=""withdrawToWallet""];
""1022_contribute"" [label=""contribute""];
""1022_resetKYC"" [label=""resetKYC""];
""1022_verifyKYC"" [label=""verifyKYC""];
""1022_withdrawContribution"" [label=""withdrawContribution""];
""1022_changeLimits"" [label=""changeLimits""];
""1022_retrieveAssets"" -> ""1022_onlyOwner"";
""1022_changeLimits"" -> ""1022_onlyOwner"";
""1022_rejectContribution"" -> ""1022_onlyOwner"";
""1022_withdrawToWallet"" -> ""1022_onlyOwner"";
""1022_acceptContribution"" -> ""1022_onlyOwner"";
""1022_killContract"" -> ""1022_onlyOwner"";
""1022_resetKYC"" -> ""1022_hasKYCInfo"";
""1022_resetKYC"" -> ""1022_onlyOwner"";
""1022_acceptContribution"" -> ""1022_hasKYCInfo"";
""1022_withdrawContribution"" -> ""1022_hasKYCInfo"";
""1022_contribute"" -> ""1022_hasKYCInfo"";
""1022_changeOwner"" -> ""1022_onlyOwner"";
}
"
0x1d899280f446aab65971e41611b5bb5516dd47f9.sol,CryptoMiningWar,contract CryptoMiningWar is PullPayment { bool public initialized = false; uint256 public roundNumber = 0; uint256 public deadline; uint256 public CRTSTAL_MINING_PERIOD = 86400; uint256 public HALF_TIME = 8 hours; uint256 public ROUND_TIME = 86400 * 7; uint256 public prizePool = 0; uint256 BASE_PRICE = 0.005 ether; uint256 RANK_LIST_LIMIT = 10000; uint256 public totalMiniGame = 0; uint256 private numberOfMiners = 8; uint256 private numberOfBoosts = 5; uint256 private numberOfRank = 21; CryptoEngineerInterface public Engineer; mapping(uint256 => address) public miniGameAddress; mapping(uint256 => MinerData) private minerData; mapping(address => Player) public players; mapping(address => uint256) public boosterReward; mapping(uint256 => BoostData) private boostData; mapping(address => bool) public miniGames; address[21] rankList; address public administrator; struct Player { uint256 roundNumber; mapping(uint256 => uint256) minerCount; uint256 hashrate; uint256 crystals; uint256 lastUpdateTime; },1,"subgraph cluster_2761_CryptoMiningWar {
label=""CryptoMiningWar"";
""2761_buyBooster"" [label=""buyBooster""];
""2761_upgrade"" [label=""upgrade""];
""2761_lottery"" [label=""lottery""];
""2761_subHashrate"" [label=""subHashrate""];
""2761_admin"" [label=""admin""];
""2761_updateRankList"" [label=""updateRankList""];
""2761_getPlayerData"" [label=""getPlayerData""];
""2761_getHashratePerDay"" [label=""getHashratePerDay""];
""2761_getBoosterPrice"" [label=""getBoosterPrice""];
""2761_initMinerData"" [label=""initMinerData""];
""2761_getBalance"" [label=""getBalance""];
""2761_addHashrate"" [label=""addHashrate""];
""2761_startNewRound"" [label=""startNewRound""];
""2761_removeContractMiniGame"" [label=""removeContractMiniGame""];
""2761_updateCrystal"" [label=""updateCrystal""];
""2761_hasBooster"" [label=""hasBooster""];
""2761_isMiningWarContract"" [label=""isMiningWarContract""];
""2761_getBoosterData"" [label=""getBoosterData""];
""2761_setRoundNumber"" [label=""setRoundNumber""];
""2761_buyMiner"" [label=""buyMiner""];
""2761_calCurrentCrystals"" [label=""calCurrentCrystals""];
""2761_setContractsMiniGame"" [label=""setContractsMiniGame""];
""2761_initBoostData"" [label=""initBoostData""];
""2761_startGame"" [label=""startGame""];
""2761_updateHashrate"" [label=""updateHashrate""];
""2761_constructor"" [label=""constructor""];
""2761_withdrawReward"" [label=""withdrawReward""];
""2761_getCurrentPrice"" [label=""getCurrentPrice""];
""2761_addMiner"" [label=""addMiner""];
""2761_getCurrentReward"" [label=""getCurrentReward""];
""2761_setEngineerInterface"" [label=""setEngineerInterface""];
""2761_quickSort"" [label=""quickSort""];
""2761_getFreeMiner"" [label=""getFreeMiner""];
""2761_fallback"" [label=""fallback""];
""2761_getFreeMinerForMiniGame"" [label=""getFreeMinerForMiniGame""];
""2761_getCurrentLevel"" [label=""getCurrentLevel""];
""2761_devFee"" [label=""devFee""];
""2761_inRankList"" [label=""inRankList""];
""2761_addCrystal"" [label=""addCrystal""];
""2761_subCrystal"" [label=""subCrystal""];
""2761_getData"" [label=""getData""];
""2761_getRankList"" [label=""getRankList""];
""2761_setupMiniGame"" [label=""setupMiniGame""];
""2761_buyMiner"" -> ""2761_isNotOver"";
""2761_addMiner"" -> ""2761_isAdministrator"";
""2761_subHashrate"" -> ""2761_onlyContractsMiniGame"";
""2761_startNewRound"" -> ""2761_setupMiniGame"";
""2761_subCrystal"" -> ""2761_updateCrystal"";
""2761_buyBooster"" -> ""2761_isCurrentRound"";
""2761_subCrystal"" -> ""2761_isNotOver"";
""2761_setContractsMiniGame"" -> ""2761_isAdministrator"";
""2761_startGame"" -> ""2761_startNewRound"";
""2761_setEngineerInterface"" -> ""2761_isAdministrator"";
""2761_lottery"" -> ""2761_disableContract"";
""2761_addHashrate"" -> ""2761_isCurrentRound"";
""2761_addCrystal"" -> ""2761_isCurrentRound"";
""2761_getData"" -> ""2761_calCurrentCrystals"";
""2761_constructor"" -> ""2761_initMinerData"";
""2761_buyBooster"" -> ""2761_updateCrystal"";
""2761_updateRankList"" -> ""2761_quickSort"";
""2761_getBoosterData"" -> ""2761_getBoosterPrice"";
""2761_addMiner"" -> ""2761_updateHashrate"";
""2761_getFreeMiner"" -> ""2761_disableContract"";
""2761_updateRankList"" -> ""2761_inRankList"";
""2761_getPlayerData"" -> ""2761_hasBooster"";
""2761_getHashratePerDay"" -> ""2761_hasBooster"";
""2761_updateCrystal"" -> ""2761_calCurrentCrystals"";
""2761_addHashrate"" -> ""2761_isNotOver"";
""2761_getFreeMinerForMiniGame"" -> ""2761_isNotOver"";
""2761_startGame"" -> ""2761_isAdministrator"";
""2761_buyBooster"" -> ""2761_getBoosterPrice"";
""2761_upgrade"" -> ""2761_isAdministrator"";
""2761_addHashrate"" -> ""2761_onlyContractsMiniGame"";
""2761_buyMiner"" -> ""2761_updateHashrate"";
""2761_subHashrate"" -> ""2761_isNotOver"";
""2761_buyMiner"" -> ""2761_isCurrentRound"";
""2761_buyBooster"" -> ""2761_isNotOver"";
""2761_addMiner"" -> ""2761_isCurrentRound"";
""2761_quickSort"" -> ""2761_quickSort"";
""2761_getData"" -> ""2761_getPlayerData"";
""2761_addCrystal"" -> ""2761_onlyContractsMiniGame"";
""2761_buyBooster"" -> ""2761_devFee"";
""2761_lottery"" -> ""2761_startNewRound"";
""2761_addMiner"" -> ""2761_updateCrystal"";
""2761_subCrystal"" -> ""2761_isCurrentRound"";
""2761_addCrystal"" -> ""2761_isNotOver"";
""2761_getBoosterPrice"" -> ""2761_getCurrentPrice"";
""2761_getBoosterPrice"" -> ""2761_getCurrentLevel"";
""2761_updateHashrate"" -> ""2761_updateRankList"";
""2761_buyBooster"" -> ""2761_getCurrentLevel"";
""2761_subCrystal"" -> ""2761_onlyContractsMiniGame"";
""2761_getFreeMiner"" -> ""2761_isNotOver"";
""2761_removeContractMiniGame"" -> ""2761_isAdministrator"";
""2761_startNewRound"" -> ""2761_initBoostData"";
""2761_getFreeMinerForMiniGame"" -> ""2761_onlyContractsMiniGame"";
""2761_buyBooster"" -> ""2761_asyncSend"";
""2761_setRoundNumber"" -> ""2761_isAdministrator"";
""2761_buyMiner"" -> ""2761_updateCrystal"";
""2761_lottery"" -> ""2761_asyncSend"";
""2761_subHashrate"" -> ""2761_isCurrentRound"";
""2761_addMiner"" -> ""2761_isNotOver"";
""2761_calCurrentCrystals"" -> ""2761_getHashratePerDay"";
}
"
0xe01ba6c593003b0edcd43b7839a7c36b00a44dfc.sol,SBITokenCrowdsale,"contract SBITokenCrowdsale is Owned, CrowdsaleParameters { using SafeMath for uint256; string public name = ; SBIToken private token; address public bank; address saleWalletAddress; uint private tokenMultiplier = 10; uint public totalCollected = 0; uint public saleStartTimestamp; uint public saleStopTimestamp; uint public saleGoal; bool public goalReached = false; uint public preicoTokensPerEth = 27314; uint public tokensPerEth = 10500; mapping (address => uint256) private investmentRecords; address crowdsaleAddress = this; uint256 public constant saleStartDate = 1530403200; uint256 public constant saleEndDate = 1535759940; uint256 public constant preSaleStartDate = 1529020800; uint256 public constant preSaleEndDate = 1530403140; uint public preSaleAmount = 5800000; event TokenSale(address indexed tokenReceiver, uint indexed etherAmount, uint indexed tokenAmount, uint tokensPerEther); event FundTransfer(address indexed from, address indexed to, uint indexed amount); function SBITokenCrowdsale(address _tokenAddress, address _bankAddress) public { token = SBIToken(_tokenAddress); bank = _bankAddress; tokenMultiplier = tokenMultiplier ** token.decimals(); saleWalletAddress = generalSaleWallet.addr; saleGoal = generalSaleWallet.amount; }",1,"subgraph cluster_1145_SBITokenCrowdsale {
label=""SBITokenCrowdsale"";
""1145_processPayment"" [label=""processPayment""];
""1145_SBITokenCrowdsale"" [label=""SBITokenCrowdsale""];
""1145_isICOActive"" [label=""isICOActive""];
""1145_fallback"" [label=""fallback""];
""1145_setTokenRate"" [label=""setTokenRate""];
""1145_safeWithdrawal"" [label=""safeWithdrawal""];
""1145_kill"" [label=""kill""];
""1145_processPayment"" -> ""1145_isICOActive"";
""1145_kill"" -> ""1145_onlyOwner"";
""1145_fallback"" -> ""1145_processPayment"";
""1145_safeWithdrawal"" -> ""1145_onlyOwner"";
""1145_kill"" -> ""1145_isICOActive"";
""1145_setTokenRate"" -> ""1145_onlyOwner"";
}
"
0x7fceafdefc16b0f703a43ffb0451ddd2a7cbd6dc.sol,alfa_Quiz,contract alfa_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_147_alfa_Quiz {
label=""alfa_Quiz"";
""147_Start"" [label=""Start""];
""147_Try"" [label=""Try""];
""147_Stop"" [label=""Stop""];
""147_fallback"" [label=""fallback""];
""147_constructor"" [label=""constructor""];
""147_New"" [label=""New""];
""147_New"" -> ""147_isAdmin"";
""147_Start"" -> ""147_isAdmin"";
""147_Stop"" -> ""147_isAdmin"";
}
"
0x2873f3dfa8b9cdcda9b619b0c3a62c2cd9daf5c5.sol,Lottery,"contract Lottery { using SafeMath for *; address public owner_; uint256 public investmentBalance_; uint256 public developerBalance_; uint256 public topBonus500Balance_; uint256 public jackpotSplit = 50; uint256 public nextJackpotSplit = 15; uint256 public bonus500Split = 5; uint256 public investorDividendSplit = 10; uint256 public developerDividendSplit = 10; uint256 public referrerDividendSplit = 10; uint256[6] public jpSplit_ = [0, 50, 25, 12, 8, 5]; uint256 public rID_; uint256 public jackpotBalance_; uint256 public jackpotNextBalance_; uint256 public jackpotLeftBalance_; uint256 public kID_; struct Key { uint key; uint tID; uint pID; }",1,"subgraph cluster_2018_Lottery {
label=""Lottery"";
""2018_getPlayerID"" [label=""getPlayerID""];
""2018_buyAKeyWithAmount"" [label=""buyAKeyWithAmount""];
""2018_addBalance"" [label=""addBalance""];
""2018_showJackpotNextRd"" [label=""showJackpotNextRd""];
""2018_showDevBalance"" [label=""showDevBalance""];
""2018_getPlayerReferrerID"" [label=""getPlayerReferrerID""];
""2018_updateJackpotLeft"" [label=""updateJackpotLeft""];
""2018_gameDestroy"" [label=""gameDestroy""];
""2018_updatePlayedNum"" [label=""updatePlayedNum""];
""2018_determinReferrer"" [label=""determinReferrer""];
""2018_showKeys"" [label=""showKeys""];
""2018_getPlayerHistories"" [label=""getPlayerHistories""];
""2018_changePrizeSplits"" [label=""changePrizeSplits""];
""2018_subAccountBalance"" [label=""subAccountBalance""];
""2018_changeOwner"" [label=""changeOwner""];
""2018_pay"" [label=""pay""];
""2018_roundStart"" [label=""roundStart""];
""2018_showRdWonNum"" [label=""showRdWonNum""];
""2018_getTeamPlayersNum"" [label=""getTeamPlayersNum""];
""2018_updateKeyPrice"" [label=""updateKeyPrice""];
""2018_roundEnd"" [label=""roundEnd""];
""2018_updateWonNums"" [label=""updateWonNums""];
""2018_showJackpotThisRd"" [label=""showJackpotThisRd""];
""2018_getPlayerAccountBalance"" [label=""getPlayerAccountBalance""];
""2018_addRefBalance"" [label=""addRefBalance""];
""2018_showInvestBalance"" [label=""showInvestBalance""];
""2018_showTopBonusBalance"" [label=""showTopBonusBalance""];
""2018_createPlayer"" [label=""createPlayer""];
""2018_getReferrerAddr"" [label=""getReferrerAddr""];
""2018_transferDividendBalance"" [label=""transferDividendBalance""];
""2018_getPlayerPlayedTimes"" [label=""getPlayerPlayedTimes""];
""2018_withdrawBalance"" [label=""withdrawBalance""];
""2018_transferDevBalance"" [label=""transferDevBalance""];
""2018_showTopsPlayer"" [label=""showTopsPlayer""];
""2018_constructor"" [label=""constructor""];
""2018_showRoundNum"" [label=""showRoundNum""];
""2018_changeIncomesSplits"" [label=""changeIncomesSplits""];
""2018_buyAKeyWithDeposit"" [label=""buyAKeyWithDeposit""];
""2018_gameDestroy"" -> ""2018_pay"";
""2018_buyAKeyWithAmount"" -> ""2018_determinReferrer"";
""2018_buyAKeyWithAmount"" -> ""2018_getPlayerAccountBalance"";
""2018_getReferrerAddr"" -> ""2018_getPlayerID"";
""2018_roundStart"" -> ""2018_onlyOwner"";
""2018_transferDevBalance"" -> ""2018_pay"";
""2018_buyAKeyWithDeposit"" -> ""2018_determinReferrer"";
""2018_addBalance"" -> ""2018_getPlayerPlayedTimes"";
""2018_changeIncomesSplits"" -> ""2018_onlyOwner"";
""2018_transferDevBalance"" -> ""2018_onlyOwner"";
""2018_buyAKeyWithAmount"" -> ""2018_addRefBalance"";
""2018_addBalance"" -> ""2018_onlyOwner"";
""2018_determinReferrer"" -> ""2018_getPlayerID"";
""2018_getPlayerAccountBalance"" -> ""2018_getPlayerID"";
""2018_buyAKeyWithAmount"" -> ""2018_subAccountBalance"";
""2018_buyAKeyWithDeposit"" -> ""2018_pay"";
""2018_buyAKeyWithAmount"" -> ""2018_updatePlayedNum"";
""2018_getReferrerAddr"" -> ""2018_determinReferrer"";
""2018_updatePlayedNum"" -> ""2018_getPlayerID"";
""2018_buyAKeyWithDeposit"" -> ""2018_updatePlayedNum"";
""2018_withdrawBalance"" -> ""2018_pay"";
""2018_changePrizeSplits"" -> ""2018_onlyOwner"";
""2018_createPlayer"" -> ""2018_getPlayerPlayedTimes"";
""2018_subAccountBalance"" -> ""2018_getPlayerID"";
""2018_transferDividendBalance"" -> ""2018_pay"";
""2018_updateWonNums"" -> ""2018_onlyOwner"";
""2018_getPlayerHistories"" -> ""2018_getPlayerID"";
""2018_transferDividendBalance"" -> ""2018_onlyOwner"";
""2018_buyAKeyWithDeposit"" -> ""2018_addRefBalance"";
""2018_updateKeyPrice"" -> ""2018_onlyOwner"";
""2018_updatePlayedNum"" -> ""2018_createPlayer"";
""2018_determinReferrer"" -> ""2018_getPlayerPlayedTimes"";
""2018_createPlayer"" -> ""2018_getPlayerID"";
""2018_changeOwner"" -> ""2018_onlyOwner"";
""2018_gameDestroy"" -> ""2018_onlyOwner"";
""2018_updateJackpotLeft"" -> ""2018_onlyOwner"";
""2018_withdrawBalance"" -> ""2018_getPlayerID"";
""2018_addRefBalance"" -> ""2018_getPlayerID"";
""2018_roundEnd"" -> ""2018_onlyOwner"";
}
"
0x1da73fc09ea07781482994036a0eecc7e6952dfb.sol,TydoIco,"contract TydoIco is Owned { using SafeMath for uint256; uint256 public constant COINS_PER_ETH = 12000; mapping (address => uint256) public balances; mapping (address => uint256) ethBalances; uint256 public ethCollected; uint256 public tokenSold; uint256 constant tokenDecMult = 1 ether; uint8 public state = 0; uint256[] public bonuses; uint256[] public bonusEnds; AbstractERC20 public token; event SaleStart(); event SaleClosedSuccess(uint256 _tokenSold); event SaleClosedFail(uint256 _tokenSold); constructor(address _coinToken, uint256[] _bonuses, uint256[] _bonusEnds) Owned() public { require(_bonuses.length == _bonusEnds.length); for(uint8 i = 0; i < _bonuses.length; i++) { require(_bonuses[i] > 0); if (i > 0) { }",1,"subgraph cluster_749_TydoIco {
label=""TydoIco"";
""749_closeFail"" [label=""closeFail""];
""749_fallback"" [label=""fallback""];
""749_withdrawTokens"" [label=""withdrawTokens""];
""749_canBuy"" [label=""canBuy""];
""749_withdraw"" [label=""withdraw""];
""749_refund"" [label=""refund""];
""749_addBonus"" [label=""addBonus""];
""749_constructor"" [label=""constructor""];
""749_buy"" [label=""buy""];
""749_open"" [label=""open""];
""749_getBonus"" [label=""getBonus""];
""749_closeSuccess"" [label=""closeSuccess""];
""749_tokensLeft"" [label=""tokensLeft""];
""749_closeFail"" -> ""749_ownerOnly"";
""749_closeSuccess"" -> ""749_ownerOnly"";
""749_withdraw"" -> ""749_ownerOnly"";
""749_constructor"" -> ""749_constructor"";
""749_buy"" -> ""749_canBuy"";
""749_fallback"" -> ""749_buy"";
""749_buy"" -> ""749_addBonus"";
""749_addBonus"" -> ""749_getBonus"";
""749_fallback"" -> ""749_withdrawTokens"";
""749_fallback"" -> ""749_refund"";
""749_open"" -> ""749_ownerOnly"";
}
"
0x50f37df80a4e804a03275b21f83ebf5d5a668d39.sol,AuctionPotato,"contract AuctionPotato is Ownable { using SafeMath for uint256; string name; uint public startTime; uint public endTime; uint auctionDuration; uint public potato; uint oldPotato; uint oldHighestBindingBid; bool public canceled; uint public highestBindingBid; address public highestBidder; bool blockerPay; bool blockerWithdraw; mapping(address => uint256) public fundsByBidder; bool ownerHasWithdrawn; event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid); event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount); event LogCanceled(); event Withdraw(address owner, uint amount); constructor() public { blockerWithdraw = false; blockerPay = false; highestBindingBid = 3000000000000000; potato = 0; auctionDuration = 3 hours; startTime = 1546794000; endTime = startTime + auctionDuration; name = ; }",1,"subgraph cluster_620_AuctionPotato {
label=""AuctionPotato"";
""620_withdraw"" [label=""withdraw""];
""620_nextNextBid"" [label=""nextNextBid""];
""620_setStartTime"" [label=""setStartTime""];
""620_nextBid"" [label=""nextBid""];
""620_queryAuction"" [label=""queryAuction""];
""620_constructor"" [label=""constructor""];
""620_balance"" [label=""balance""];
""620_cancelAuction"" [label=""cancelAuction""];
""620_placeBid"" [label=""placeBid""];
""620_withdraw"" -> ""620_onlyOwner"";
""620_cancelAuction"" -> ""620_onlyBeforeEnd"";
""620_placeBid"" -> ""620_onlyAfterStart"";
""620_queryAuction"" -> ""620_nextBid"";
""620_cancelAuction"" -> ""620_onlyNotCanceled"";
""620_placeBid"" -> ""620_onlyNotCanceled"";
""620_setStartTime"" -> ""620_onlyOwner"";
""620_cancelAuction"" -> ""620_onlyOwner"";
""620_placeBid"" -> ""620_onlyBeforeEnd"";
}
"
0x56d06701fd44a4a857cb96b266f505a2832950c5.sol,Child,contract Child is Base { Main g_Main; constructor(Main main) public { require(main != address(0)); g_Main = main; g_Main.SetAuth(this); },1,"subgraph cluster_4048_Child {
label=""Child"";
""4048_constructor"" [label=""constructor""];
""4048_GenRandom"" [label=""GenRandom""];
""4048_kill"" [label=""kill""];
""4048_AddBonus"" [label=""AddBonus""];
""4048_kill"" -> ""4048_CreatorAble"";
}
"
0x18aaad578e74913df4255c126f2a0bd9e3399ec7.sol,test_contract,contract test_contract { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_test_contract {
label=""test_contract"";
""143_fallback"" [label=""fallback""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_StopGame"" [label=""StopGame""];
""143_ActivateContract"" [label=""ActivateContract""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
}
"
0xd1ceeee3ecfff60d9532c37c9d24f68ca0e96453.sol,Dice2Win,contract Dice2Win { uint constant JACKPOT_MODULO = 1000; uint constant HOUSE_EDGE_PERCENT = 2; uint constant JACKPOT_FEE_PERCENT = 50; uint constant MIN_BET = 0.01 ether; uint constant MAX_AMOUNT = 300000 ether; uint constant MIN_JACKPOT_BET = 0.1 ether; uint constant MAX_MODULO = 100; uint constant MAX_MASK_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO; uint constant BET_EXPIRATION_BLOCKS = 250; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; address public owner; address private nextOwner; uint public maxProfit; address public secretSigner; uint128 public jackpotSize; uint128 public lockedInBets; struct Bet { uint amount; uint8 modulo; uint8 rollUnder; uint40 placeBlockNumber; uint40 mask; address gambler; },1,"subgraph cluster_1266_Dice2Win {
label=""Dice2Win"";
""1266_kill"" [label=""kill""];
""1266_constructor"" [label=""constructor""];
""1266_placeBet"" [label=""placeBet""];
""1266_fallback"" [label=""fallback""];
""1266_refundBet"" [label=""refundBet""];
""1266_sendFunds"" [label=""sendFunds""];
""1266_clearStorage"" [label=""clearStorage""];
""1266_acceptNextOwner"" [label=""acceptNextOwner""];
""1266_withdrawFunds"" [label=""withdrawFunds""];
""1266_clearProcessedBet"" [label=""clearProcessedBet""];
""1266_setMaxProfit"" [label=""setMaxProfit""];
""1266_approveNextOwner"" [label=""approveNextOwner""];
""1266_settleBet"" [label=""settleBet""];
""1266_getJackpotFee"" [label=""getJackpotFee""];
""1266_getDiceWinAmount"" [label=""getDiceWinAmount""];
""1266_setSecretSigner"" [label=""setSecretSigner""];
""1266_increaseJackpot"" [label=""increaseJackpot""];
""1266_settleBet"" -> ""1266_clearProcessedBet"";
""1266_refundBet"" -> ""1266_getDiceWinAmount"";
""1266_withdrawFunds"" -> ""1266_onlyOwner"";
""1266_clearStorage"" -> ""1266_clearProcessedBet"";
""1266_withdrawFunds"" -> ""1266_sendFunds"";
""1266_increaseJackpot"" -> ""1266_onlyOwner"";
""1266_kill"" -> ""1266_onlyOwner"";
""1266_settleBet"" -> ""1266_sendFunds"";
""1266_setSecretSigner"" -> ""1266_onlyOwner"";
""1266_approveNextOwner"" -> ""1266_onlyOwner"";
""1266_placeBet"" -> ""1266_getDiceWinAmount"";
""1266_setMaxProfit"" -> ""1266_onlyOwner"";
""1266_refundBet"" -> ""1266_sendFunds"";
""1266_settleBet"" -> ""1266_getDiceWinAmount"";
""1266_placeBet"" -> ""1266_getJackpotFee"";
}
"
0x17f0badcdf99b0a94429478d2e9ddb1ff13174f7.sol,knf,"contract knf is StandardToken { string public name; string public symbol; uint8 public decimals; uint256 DropedThisWeek; uint256 lastWeek; uint256 decimate; uint256 weekly_limit; uint256 air_drop; mapping(address => uint256) airdroped; address control; address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); function availableSupply() public view returns (uint256) { return balances[owner]; }",1,"subgraph cluster_1093_knf {
label=""knf"";
""1093_transferBalance"" [label=""transferBalance""];
""1093_fallback"" [label=""fallback""];
""1093_Award"" [label=""Award""];
""1093_transfererc20"" [label=""transfererc20""];
""1093_RecordTransfer"" [label=""RecordTransfer""];
""1093_transferFrom"" [label=""transferFrom""];
""1093_thisweek"" [label=""thisweek""];
""1093_transfer"" [label=""transfer""];
""1093_changeName"" [label=""changeName""];
""1093_transferControl"" [label=""transferControl""];
""1093_balanceOf"" [label=""balanceOf""];
""1093_transferOwnership"" [label=""transferOwnership""];
""1093_availableSupply"" [label=""availableSupply""];
""1093_knf"" [label=""knf""];
""1093_destroy"" [label=""destroy""];
""1093_availableAirdrop"" [label=""availableAirdrop""];
""1093_knf"" -> ""1093_RecordTransfer"";
""1093_availableAirdrop"" -> ""1093_thisweek"";
""1093_Award"" -> ""1093_onlyControl"";
""1093_destroy"" -> ""1093_onlyControl"";
""1093_transferBalance"" -> ""1093_onlyControl"";
""1093_transferFrom"" -> ""1093_availableAirdrop"";
""1093_transferOwnership"" -> ""1093_onlyControl"";
""1093_RecordTransfer"" -> ""1093_thisweek"";
""1093_Award"" -> ""1093_RecordTransfer"";
""1093_transferControl"" -> ""1093_onlyControl"";
""1093_transfererc20"" -> ""1093_onlyControl"";
""1093_transferFrom"" -> ""1093_RecordTransfer"";
""1093_transfer"" -> ""1093_availableAirdrop"";
""1093_balanceOf"" -> ""1093_availableAirdrop"";
""1093_changeName"" -> ""1093_onlyControl"";
""1093_transfer"" -> ""1093_RecordTransfer"";
}
"
0x5838f878000fe44b6f6c677bbf839e12f097c147.sol,Q_GAME,contract Q_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_Q_GAME {
label=""Q_GAME"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_set_game"" [label=""set_game""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_Try"" [label=""Try""];
}
"
0x41a322b28d0ff354040e2cbc676f0320d8c8850d.sol,SupeRare,"contract SupeRare is ERC721Token, Ownable, ERC721Metadata { using SafeMath for uint256; uint256 public maintainerPercentage = 30; uint256 public creatorPercentage = 100; mapping(uint256 => address) private tokenBidder; mapping(uint256 => uint256) private tokenCurrentBid; mapping(uint256 => uint256) private tokenSalePrice; mapping(uint256 => address) private tokenCreator; mapping(uint256 => string) private tokenToURI; mapping(string => uint256) private uriOriginalToken; mapping(uint256 => bool) private tokenSold; mapping(address => bool) private creatorWhitelist; event WhitelistCreator(address indexed _creator); event Bid(address indexed _bidder, uint256 indexed _amount, uint256 indexed _tokenId); event AcceptBid(address indexed _bidder, address indexed _seller, uint256 _amount, uint256 indexed _tokenId); event CancelBid(address indexed _bidder, uint256 indexed _amount, uint256 indexed _tokenId); event Sold(address indexed _buyer, address indexed _seller, uint256 _amount, uint256 indexed _tokenId); event SalePriceSet(uint256 indexed _tokenId, uint256 indexed _price); modifier uniqueURI(string _uri) { require(uriOriginalToken[_uri] == 0); _; }",1,"subgraph cluster_1587_SupeRare {
label=""SupeRare"";
""1587_acceptBid"" [label=""acceptBid""];
""1587_returnCurrentBid"" [label=""returnCurrentBid""];
""1587_cancelBid"" [label=""cancelBid""];
""1587_buy"" [label=""buy""];
""1587_salePriceOfToken"" [label=""salePriceOfToken""];
""1587_symbol"" [label=""symbol""];
""1587_setSalePrice"" [label=""setSalePrice""];
""1587_transfer"" [label=""transfer""];
""1587_currentBidDetailsOfToken"" [label=""currentBidDetailsOfToken""];
""1587_clearBid"" [label=""clearBid""];
""1587_addNewToken"" [label=""addNewToken""];
""1587_payout"" [label=""payout""];
""1587_isWhitelisted"" [label=""isWhitelisted""];
""1587_isGreaterBid"" [label=""isGreaterBid""];
""1587_createToken"" [label=""createToken""];
""1587_addNewTokenWithEditions"" [label=""addNewTokenWithEditions""];
""1587_creatorOfToken"" [label=""creatorOfToken""];
""1587_tokenURI"" [label=""tokenURI""];
""1587_approve"" [label=""approve""];
""1587_bid"" [label=""bid""];
""1587_name"" [label=""name""];
""1587_whitelistCreator"" [label=""whitelistCreator""];
""1587_originalTokenOfUri"" [label=""originalTokenOfUri""];
""1587_setMaintainerPercentage"" [label=""setMaintainerPercentage""];
""1587_setCreatorPercentage"" [label=""setCreatorPercentage""];
""1587_setCreatorPercentage"" -> ""1587_onlyOwner"";
""1587_createToken"" -> ""1587_totalSupply"";
""1587_transfer"" -> ""1587_clearApprovalAndTransfer"";
""1587_addNewTokenWithEditions"" -> ""1587_onlyCreator"";
""1587_whitelistCreator"" -> ""1587_onlyOwner"";
""1587_tokenURI"" -> ""1587_ownerOf"";
""1587_bid"" -> ""1587_returnCurrentBid"";
""1587_setSalePrice"" -> ""1587_onlyOwnerOf"";
""1587_originalTokenOfUri"" -> ""1587_ownerOf"";
""1587_addNewToken"" -> ""1587_createToken"";
""1587_buy"" -> ""1587_clearBid"";
""1587_acceptBid"" -> ""1587_clearBid"";
""1587_acceptBid"" -> ""1587_ownerOf"";
""1587_cancelBid"" -> ""1587_clearBid"";
""1587_buy"" -> ""1587_ownerOf"";
""1587_bid"" -> ""1587_isGreaterBid"";
""1587_createToken"" -> ""1587__mint"";
""1587_acceptBid"" -> ""1587_onlyOwnerOf"";
""1587_addNewToken"" -> ""1587_uniqueURI"";
""1587_bid"" -> ""1587_notOwnerOf"";
""1587_buy"" -> ""1587_returnCurrentBid"";
""1587_acceptBid"" -> ""1587_payout"";
""1587_addNewTokenWithEditions"" -> ""1587_uniqueURI"";
""1587_buy"" -> ""1587_payout"";
""1587_setMaintainerPercentage"" -> ""1587_onlyOwner"";
""1587_addNewTokenWithEditions"" -> ""1587_createToken"";
""1587_addNewToken"" -> ""1587_onlyCreator"";
""1587_buy"" -> ""1587_notOwnerOf"";
""1587_acceptBid"" -> ""1587_clearApprovalAndTransfer"";
""1587_buy"" -> ""1587_clearApprovalAndTransfer"";
""1587_transfer"" -> ""1587_onlyOwnerOf"";
}
"
0x299187bb996599f7fc82df025ee8964cafe3085a.sol,Challenge,contract Challenge { address public owner; address public previous_owner; address public creator; bytes32 public flag_hash = 0xfa9b079005103147ac67299be9119fb4a47e29801f2d8d5025f36b248ce23695; function Challenge() public { owner = msg.sender; creator = msg.sender; },1,"subgraph cluster_142_Challenge {
label=""Challenge"";
""142_Challenge"" [label=""Challenge""];
""142_check_flag"" [label=""check_flag""];
""142_withdraw"" [label=""withdraw""];
""142_change_flag_hash"" [label=""change_flag_hash""];
}
"
0x1e85407e080a5e6d20a3a95fcdddfc32146fc8e5.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1223_MiniMeToken {
label=""MiniMeToken"";
""1223_approve"" [label=""approve""];
""1223_createCloneToken"" [label=""createCloneToken""];
""1223_doApprove"" [label=""doApprove""];
""1223_isContract"" [label=""isContract""];
""1223_doTransfer"" [label=""doTransfer""];
""1223_destroyTokens"" [label=""destroyTokens""];
""1223_totalSupplyAt"" [label=""totalSupplyAt""];
""1223_constructor"" [label=""constructor""];
""1223_balanceOf"" [label=""balanceOf""];
""1223_updateValueAtNow"" [label=""updateValueAtNow""];
""1223_generateTokens"" [label=""generateTokens""];
""1223_balanceOfAt"" [label=""balanceOfAt""];
""1223_min"" [label=""min""];
""1223_claimTokens"" [label=""claimTokens""];
""1223_approveAndCall"" [label=""approveAndCall""];
""1223_transfer"" [label=""transfer""];
""1223_enableTransfers"" [label=""enableTransfers""];
""1223_allowance"" [label=""allowance""];
""1223_fallback"" [label=""fallback""];
""1223_transferFrom"" [label=""transferFrom""];
""1223_getValueAt"" [label=""getValueAt""];
""1223_totalSupply"" [label=""totalSupply""];
""1223_balanceOf"" -> ""1223_balanceOfAt"";
""1223_destroyTokens"" -> ""1223_updateValueAtNow"";
""1223_enableTransfers"" -> ""1223_onlyController"";
""1223_fallback"" -> ""1223_isContract"";
""1223_approveAndCall"" -> ""1223_approve"";
""1223_totalSupply"" -> ""1223_totalSupplyAt"";
""1223_destroyTokens"" -> ""1223_onlyController"";
""1223_claimTokens"" -> ""1223_onlyController"";
""1223_generateTokens"" -> ""1223_updateValueAtNow"";
""1223_doTransfer"" -> ""1223_balanceOfAt"";
""1223_destroyTokens"" -> ""1223_balanceOf"";
""1223_balanceOfAt"" -> ""1223_min"";
""1223_totalSupplyAt"" -> ""1223_min"";
""1223_doTransfer"" -> ""1223_isContract"";
""1223_transfer"" -> ""1223_doTransfer"";
""1223_generateTokens"" -> ""1223_balanceOf"";
""1223_generateTokens"" -> ""1223_totalSupply"";
""1223_destroyTokens"" -> ""1223_totalSupply"";
""1223_generateTokens"" -> ""1223_onlyController"";
""1223_doApprove"" -> ""1223_isContract"";
""1223_balanceOfAt"" -> ""1223_getValueAt"";
""1223_approve"" -> ""1223_doApprove"";
""1223_doTransfer"" -> ""1223_updateValueAtNow"";
""1223_transferFrom"" -> ""1223_doTransfer"";
""1223_totalSupplyAt"" -> ""1223_getValueAt"";
}
"
0x1db9cf016fe7ce4d9f4ba2d8fd2834e72d43198c.sol,LUNO,"contract LUNO is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 750000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 1000000e8; uint public target0drop = 500000; uint public progress0drop = 0; address multisig = 0xCf7Ac628f8A0fa38059BF77b0134efaD8bF329A3; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_LUNO {
label=""LUNO"";
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_Distribute"" [label=""Distribute""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_constructor"" [label=""constructor""];
""1261_getTokens"" [label=""getTokens""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_distr"" [label=""distr""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_allowance"" [label=""allowance""];
""1261_burn"" [label=""burn""];
""1261_add"" [label=""add""];
""1261_withdraw"" [label=""withdraw""];
""1261_approve"" [label=""approve""];
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_Distribute"" -> ""1261_onlyOwner"";
}
"
0xaa3fbfaf03cd50e6a44d27d10eb14333d1c02e52.sol,ETH_GAME,contract ETH_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETH_GAME {
label=""ETH_GAME"";
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x6cd3409ec07e5aa64baaeb08c6a038f30e831090.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_180_Destructible {
label=""Destructible"";
""180_destroyAndSend"" [label=""destroyAndSend""];
""180_Destructible"" [label=""Destructible""];
""180_destroy"" [label=""destroy""];
""180_destroy"" -> ""180_onlyOwner"";
""180_destroyAndSend"" -> ""180_onlyOwner"";
}
"
0xee58ee0b1519bb47801812a3a9c83ab600c63d81.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_645_SafeDestructible {
label=""SafeDestructible"";
""645_destroy"" [label=""destroy""];
""645_destroy"" -> ""645_onlyOwner"";
}
"
0x3686986e559f257cfaccb44f17af5b245e45814f.sol,ZEROtoken,contract ZEROtoken { address owner = msg.sender; bool public purchasingAllowed = false; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalContribution = 0; uint256 public totalSupply = 0; function name() constant returns (string) { return ; },1,"subgraph cluster_524_ZEROtoken {
label=""ZEROtoken"";
""524_balanceOf"" [label=""balanceOf""];
""524_transferFrom"" [label=""transferFrom""];
""524_fallback"" [label=""fallback""];
""524_transfer"" [label=""transfer""];
""524_getStats"" [label=""getStats""];
""524_approve"" [label=""approve""];
""524_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""524_decimals"" [label=""decimals""];
""524_disablePurchasing"" [label=""disablePurchasing""];
""524_enablePurchasing"" [label=""enablePurchasing""];
""524_allowance"" [label=""allowance""];
""524_kill"" [label=""kill""];
""524_name"" [label=""name""];
""524_symbol"" [label=""symbol""];
}
"
0x5c3536c7cd64c3bcb6ea01c00c2919bcd5053aba.sol,BlastBox,"contract BlastBox is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 10; uint public deadline = now + 15 * 1 days; uint public round2 = now + 15 * 1 days; uint public round1 = now + 1 * 1 days; uint256 public totalSupply = 275000e10; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 5000e10; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0x9d4C38355d267C567ca431BCb8585cC010aF1ED0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_BlastBox {
label=""BlastBox"";
""1263_withdraw"" [label=""withdraw""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_add"" [label=""add""];
""1263_approve"" [label=""approve""];
""1263_distr"" [label=""distr""];
""1263_burn"" [label=""burn""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_transfer"" [label=""transfer""];
""1263_fallback"" [label=""fallback""];
""1263_getTokens"" [label=""getTokens""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_Distribute"" [label=""Distribute""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_constructor"" [label=""constructor""];
""1263_allowance"" [label=""allowance""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_constructor"" -> ""1263_distr"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_distr"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_distr"" -> ""1263_canDistr"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
}
"
0xd587cb111d3e506ffafdf4b1c5d19008086c4e5a.sol,IartistChain,"contract IartistChain is owned, TokenERC20 { uint256 INITIAL_SUPPLY =500000000; uint256 public buyPrice = 1; event FrozenFunds(address target, bool frozen); function IartistChain(uint256 initialSupply, string tokenName, string tokenSymbol) TokenERC20(INITIAL_SUPPLY, , ) payable { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_572_IartistChain {
label=""IartistChain"";
""572__transfer"" [label=""_transfer""];
""572_IartistChain"" [label=""IartistChain""];
""572_selfdestructs"" [label=""selfdestructs""];
""572_fallback"" [label=""fallback""];
""572_setPrices"" [label=""setPrices""];
""572_buy"" [label=""buy""];
""572_buy"" -> ""572__transfer"";
""572_selfdestructs"" -> ""572_onlyOwner"";
""572_IartistChain"" -> ""572_TokenERC20"";
""572_setPrices"" -> ""572_onlyOwner"";
""572_fallback"" -> ""572__transfer"";
}
"
0xa41aa09607ca80ee60d2ce166d4c02a71860e5c5.sol,XTVToken,"contract XTVToken is XTVNetworkGuard, ERC20Token { using SafeMath for uint256; string public name = ; string public symbol = ; uint public decimals = 18; address public fullfillTeamAddress; address public fullfillFounder; address public fullfillAdvisors; address public XTVNetworkContractAddress; bool public airdropActive; uint public startTime; uint public endTime; uint public XTVAirDropped; uint public XTVBurned; mapping(address => bool) public claimed; uint256 public constant INITIAL_SUPPLY = 500000000; uint256 public constant EXPECTED_TOTAL_SUPPLY = 1000000000; uint256 private constant TOKEN_MULTIPLIER = 1000000; uint256 public constant ALLOC_TEAM = 330 * TOKEN_MULTIPLIER; uint256 public constant ALLOC_ADVISORS = 70 * TOKEN_MULTIPLIER; uint256 public constant ALLOC_FOUNDER = 100 * TOKEN_MULTIPLIER; uint256 public constant ALLOC_AIRDROP = 500 * TOKEN_MULTIPLIER; uint256 public constant AIRDROP_CLAIM_AMMOUNT = 500; modifier isAirdropActive() { require(airdropActive); _; }",1,"subgraph cluster_1242_XTVToken {
label=""XTVToken"";
""1242_drain"" [label=""drain""];
""1242_constructor"" [label=""constructor""];
""1242_setXTVNetworkEndorser"" [label=""setXTVNetworkEndorser""];
""1242_burnTokens"" [label=""burnTokens""];
""1242_setXTVNetworkContractAddress"" [label=""setXTVNetworkContractAddress""];
""1242_claim"" [label=""claim""];
""1242_setXTVTokenAirdropStatus"" [label=""setXTVTokenAirdropStatus""];
""1242_setXTVTokenAirdropStatus"" -> ""1242_onlyOwner"";
""1242_drain"" -> ""1242_onlyOwner"";
""1242_setXTVNetworkEndorser"" -> ""1242_onlyOwner"";
""1242_setXTVNetworkContractAddress"" -> ""1242_onlyOwner"";
""1242_claim"" -> ""1242_isAirdropActive"";
""1242_claim"" -> ""1242_validateSignature"";
""1242_claim"" -> ""1242_canClaimTokens"";
}
"
0x5a6dcd18e7e8e7844a8cbb02390c3392e165036a.sol,RubikProtocol,"contract RubikProtocol is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 40 * 1 days; uint public round2 = now + 20 * 1 days; uint public round1 = now + 15 * 1 days; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e8; uint public target0drop = 40000; uint public progress0drop = 0; address multisig = 0x460BE721deB36B617DE80Fe116938662d10ac7aA; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_RubikProtocol {
label=""RubikProtocol"";
""1261_balanceOf"" [label=""balanceOf""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_add"" [label=""add""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_distr"" [label=""distr""];
""1261_transfer"" [label=""transfer""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_constructor"" [label=""constructor""];
""1261_approve"" [label=""approve""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdraw"" [label=""withdraw""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_allowance"" [label=""allowance""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_getTokens"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_distr"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
}
"
0x52629dd14923d9f60deafdd373ff6e1145866f09.sol,LandGrabToken,"contract LandGrabToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public cityIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public cityIndexToApproved; mapping (uint256 => uint256) private cityIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct City { string name; }",1,"subgraph cluster_975_LandGrabToken {
label=""LandGrabToken"";
""975_setCOO"" [label=""setCOO""];
""975_createPromoCity"" [label=""createPromoCity""];
""975__addressNotNull"" [label=""_addressNotNull""];
""975__owns"" [label=""_owns""];
""975_takeOwnership"" [label=""takeOwnership""];
""975__createCity"" [label=""_createCity""];
""975_getCity"" [label=""getCity""];
""975_transfer"" [label=""transfer""];
""975_implementsERC721"" [label=""implementsERC721""];
""975_payout"" [label=""payout""];
""975__payout"" [label=""_payout""];
""975_createContractCity"" [label=""createContractCity""];
""975_transferFrom"" [label=""transferFrom""];
""975_purchase"" [label=""purchase""];
""975_ownerOf"" [label=""ownerOf""];
""975_name"" [label=""name""];
""975_balanceOf"" [label=""balanceOf""];
""975__approved"" [label=""_approved""];
""975__transfer"" [label=""_transfer""];
""975_totalSupply"" [label=""totalSupply""];
""975_LandGrabToken"" [label=""LandGrabToken""];
""975_setCEO"" [label=""setCEO""];
""975_priceOf"" [label=""priceOf""];
""975_symbol"" [label=""symbol""];
""975_tokensOfOwner"" [label=""tokensOfOwner""];
""975_approve"" [label=""approve""];
""975_payout"" -> ""975__payout"";
""975_takeOwnership"" -> ""975__addressNotNull"";
""975_payout"" -> ""975_onlyCLevel"";
""975_takeOwnership"" -> ""975__approved"";
""975_transfer"" -> ""975__addressNotNull"";
""975_takeOwnership"" -> ""975__transfer"";
""975_setCEO"" -> ""975_onlyCEO"";
""975_createContractCity"" -> ""975_onlyCOO"";
""975_tokensOfOwner"" -> ""975_totalSupply"";
""975_transferFrom"" -> ""975__transfer"";
""975_transferFrom"" -> ""975__owns"";
""975_createPromoCity"" -> ""975_onlyCOO"";
""975_approve"" -> ""975__owns"";
""975_purchase"" -> ""975__addressNotNull"";
""975__createCity"" -> ""975__transfer"";
""975_purchase"" -> ""975__transfer"";
""975_setCOO"" -> ""975_onlyCEO"";
""975_transferFrom"" -> ""975__addressNotNull"";
""975_transferFrom"" -> ""975__approved"";
""975_createContractCity"" -> ""975__createCity"";
""975_tokensOfOwner"" -> ""975_balanceOf"";
""975_createPromoCity"" -> ""975__createCity"";
""975_transfer"" -> ""975__transfer"";
""975_transfer"" -> ""975__owns"";
}
"
0x6ace03f517ae15f1a8d1b6811d23f7aa8c295be0.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_342_RefundVault {
label=""RefundVault"";
""342_enableRefunds"" [label=""enableRefunds""];
""342_refund"" [label=""refund""];
""342_constructor"" [label=""constructor""];
""342_close"" [label=""close""];
""342_deposit"" [label=""deposit""];
""342_enableRefunds"" -> ""342_onlyOwner"";
""342_deposit"" -> ""342_onlyOwner"";
""342_close"" -> ""342_onlyOwner"";
}
"
0xdfa66ec49cf0102fb8906ee3dd6a70597d9720d4.sol,DEKS,"contract DEKS is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 45 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 500000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 10000e8; uint public target0drop = 12000; uint public progress0drop = 0; address multisig = 0xae4B0D603B563A3b26a585e5cF43f1Fb6f75295C; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_DEKS {
label=""DEKS"";
""1261_getTokens"" [label=""getTokens""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_burn"" [label=""burn""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_add"" [label=""add""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_transfer"" [label=""transfer""];
""1261_fallback"" [label=""fallback""];
""1261_approve"" [label=""approve""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_constructor"" [label=""constructor""];
""1261_withdraw"" [label=""withdraw""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_allowance"" [label=""allowance""];
""1261_distr"" [label=""distr""];
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
}
"
0xee1f0f9731ee93736e219598e6aa441ad36ffc61.sol,ENIGMA,contract ENIGMA { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_ENIGMA {
label=""ENIGMA"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_Try"" [label=""Try""];
""132_StopGame"" [label=""StopGame""];
""132_set_game"" [label=""set_game""];
""132_fallback"" [label=""fallback""];
}
"
0x345ab5e5f971dbdbc92af2779ce7a8bbf1819e59.sol,TwentyDollars,contract TwentyDollars { struct Bid { address owner; uint256 amount; },1,"subgraph cluster_262_TwentyDollars {
label=""TwentyDollars"";
""262_winnerWithdraw"" [label=""winnerWithdraw""];
""262_biddingClosed"" [label=""biddingClosed""];
""262_ownerWithdraw"" [label=""ownerWithdraw""];
""262_getMyBalance"" [label=""getMyBalance""];
""262_constructor"" [label=""constructor""];
""262_getContractBalance"" [label=""getContractBalance""];
""262_bid"" [label=""bid""];
""262_withdraw"" [label=""withdraw""];
""262_fallback"" [label=""fallback""];
""262_ownerWithdraw"" -> ""262_onlyOwner"";
""262_winnerWithdraw"" -> ""262_onlyHighestBidder"";
""262_bid"" -> ""262_onlyBiddingOpen"";
""262_ownerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_winnerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_ownerWithdraw"" -> ""262_getContractBalance"";
""262_fallback"" -> ""262_bid"";
}
"
0xa28b5854df048bcd5eec522fada1c6b7ea006aae.sol,FIREDICE,"contract FIREDICE is Mortal, usingNRE{ uint minBet = 1000000000000000; event Roll(bool _won, uint256 _dice1, uint256 _dice2, uint256 _roll1, uint256 _roll2, uint _amount); constructor() payable public {}",1,"subgraph cluster_607_FIREDICE {
label=""FIREDICE"";
""607_fallback"" [label=""fallback""];
""607_constructor"" [label=""constructor""];
""607_checkContractBalance"" [label=""checkContractBalance""];
""607_bet"" [label=""bet""];
""607_collect"" [label=""collect""];
""607_collect"" -> ""607_onlyOwner"";
""607_bet"" -> ""607_ra"";
""607_bet"" -> ""607_rx"";
}
"
0x347925b22d0217a4797f470faa2afebbdb150b7a.sol,Nanotechnology,"contract Nanotechnology is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 860000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 2000000e1; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0x5F6557aF8922D4031Ae506d2F02595039D16Ab5a; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Nanotechnology {
label=""Nanotechnology"";
""1261_withdraw"" [label=""withdraw""];
""1261_distr"" [label=""distr""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_add"" [label=""add""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_constructor"" [label=""constructor""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_transfer"" [label=""transfer""];
""1261_getTokens"" [label=""getTokens""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_burn"" [label=""burn""];
""1261_Distribute"" [label=""Distribute""];
""1261_allowance"" [label=""allowance""];
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_add"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
}
"
0xe3ec74dbce6ee1d8680e38714b67ab5535c95bdb.sol,try_it,contract try_it { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_try_it {
label=""try_it"";
""143_StopGame"" [label=""StopGame""];
""143_Activate"" [label=""Activate""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
""143_fallback"" [label=""fallback""];
""143_NewQuestion"" [label=""NewQuestion""];
}
"
0x0dd88f1d1cbc9bcdda5ddd9e9fc86e8183f8f3b9.sol,XenoxCoin,"contract XenoxCoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 100000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000e18; uint public target0drop = 1000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event DistrRestarted(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1274_XenoxCoin {
label=""XenoxCoin"";
""1274_transferOwnership"" [label=""transferOwnership""];
""1274_getTokens"" [label=""getTokens""];
""1274_finishDistribution"" [label=""finishDistribution""];
""1274_reDistribution"" [label=""reDistribution""];
""1274_constructor"" [label=""constructor""];
""1274_withdraw"" [label=""withdraw""];
""1274_allowance"" [label=""allowance""];
""1274_balanceOf"" [label=""balanceOf""];
""1274_getTokenBalance"" [label=""getTokenBalance""];
""1274_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1274_transfer"" [label=""transfer""];
""1274_approve"" [label=""approve""];
""1274_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1274_Distribute"" [label=""Distribute""];
""1274_withdrawAll"" [label=""withdrawAll""];
""1274_burn"" [label=""burn""];
""1274_add"" [label=""add""];
""1274_distr"" [label=""distr""];
""1274_fallback"" [label=""fallback""];
""1274_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1274_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1274_transferFrom"" [label=""transferFrom""];
""1274_finishDistribution"" -> ""1274_onlyOwner"";
""1274_distr"" -> ""1274_canDistr"";
""1274_burn"" -> ""1274_onlyOwner"";
""1274_withdrawForeignTokens"" -> ""1274_onlyOwner"";
""1274_updateTokensPerEth"" -> ""1274_onlyOwner"";
""1274_constructor"" -> ""1274_distr"";
""1274_transferOwnership"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_canDistr"";
""1274_withdrawAll"" -> ""1274_onlyOwner"";
""1274_Distribute"" -> ""1274_onlyOwner"";
""1274_fallback"" -> ""1274_getTokens"";
""1274_getTokens"" -> ""1274_distr"";
""1274_DistributeAirdrop"" -> ""1274_onlyOwner"";
""1274_transfer"" -> ""1274_onlyPayloadSize"";
""1274_DistributeAirdropMultiple"" -> ""1274_Distribute"";
""1274_finishDistribution"" -> ""1274_canDistr"";
""1274_reDistribution"" -> ""1274_onlyOwner"";
""1274_withdraw"" -> ""1274_onlyOwner"";
""1274_add"" -> ""1274_onlyOwner"";
""1274_transferFrom"" -> ""1274_onlyPayloadSize"";
""1274_DistributeAirdropMultiple"" -> ""1274_onlyOwner"";
""1274_DistributeAirdrop"" -> ""1274_Distribute"";
""1274_reDistribution"" -> ""1274_canDistr"";
}
"
0x8bf1e43e3ca6f5c25c380803154ae687d682ad32.sol,RDFDM,"contract RDFDM { event FiatCollectedEvent(uint indexed charity, uint usd, string ref); event FiatToEthEvent(uint indexed charity, uint usd, uint eth); event EthToFiatEvent(uint indexed charity, uint eth, uint usd); event FiatDeliveredEvent(uint indexed charity, uint usd, string ref); event EthDonationEvent(uint indexed charity, uint eth); event CharityAddedEvent(uint indexed charity, string name, uint8 currency); event CharityModifiedEvent(uint indexed charity, string name, uint8 currency); uint constant CURRENCY_USD = 0x01; uint constant CURRENCY_EURO = 0x02; uint constant CURRENCY_NIS = 0x03; uint constant CURRENCY_YUAN = 0x04; struct Charity { uint fiatBalanceIn; uint fiatBalanceOut; uint fiatCollected; uint fiatDelivered; uint ethDonated; uint ethCredited; uint ethBalance; uint fiatToEthPriceAccEth; uint fiatToEthPriceAccFiat; uint ethToFiatPriceAccEth; uint ethToFiatPriceAccFiat; uint8 currency; string name; }",1,"subgraph cluster_1141_RDFDM {
label=""RDFDM"";
""1141_quickAuditFiatDelivered"" [label=""quickAuditFiatDelivered""];
""1141_deleteManager"" [label=""deleteManager""];
""1141_ethToFiatDelivered"" [label=""ethToFiatDelivered""];
""1141_fiatCollected"" [label=""fiatCollected""];
""1141_fallback"" [label=""fallback""];
""1141_setToken"" [label=""setToken""];
""1141_modifyCharity"" [label=""modifyCharity""];
""1141_fiatToEth"" [label=""fiatToEth""];
""1141_addCharity"" [label=""addCharity""];
""1141_setManager"" [label=""setManager""];
""1141_RDFDM"" [label=""RDFDM""];
""1141_setOperatorFeeAcct"" [label=""setOperatorFeeAcct""];
""1141_ethToFiat"" [label=""ethToFiat""];
""1141_quickAuditEthCredited"" [label=""quickAuditEthCredited""];
""1141_fiatDelivered"" [label=""fiatDelivered""];
""1141_fiatCollectedToEth"" [label=""fiatCollectedToEth""];
""1141_ethDonation"" [label=""ethDonation""];
""1141_lock"" [label=""lock""];
""1141_haraKiri"" [label=""haraKiri""];
""1141_modifyCharity"" -> ""1141_managerOnly"";
""1141_lock"" -> ""1141_ownerOnly"";
""1141_addCharity"" -> ""1141_managerOnly"";
""1141_setManager"" -> ""1141_managerOnly"";
""1141_ethToFiat"" -> ""1141_managerOnly"";
""1141_fiatCollectedToEth"" -> ""1141_managerOnly"";
""1141_setOperatorFeeAcct"" -> ""1141_ownerOnly"";
""1141_setToken"" -> ""1141_ownerOnly"";
""1141_haraKiri"" -> ""1141_unlockedOnly"";
""1141_haraKiri"" -> ""1141_ownerOnly"";
""1141_setToken"" -> ""1141_unlockedOnly"";
""1141_fiatToEth"" -> ""1141_managerOnly"";
""1141_fiatCollected"" -> ""1141_managerOnly"";
""1141_fiatDelivered"" -> ""1141_managerOnly"";
""1141_ethToFiatDelivered"" -> ""1141_managerOnly"";
""1141_deleteManager"" -> ""1141_managerOnly"";
}
"
0xbd6a3418cb51418c94cc11d2d49012a2b79e10fe.sol,WeaponSales,"contract WeaponSales is WeaponToken { event Purchase(address indexed owner, uint256 unitPrice, uint32 amount); function buyWeapon(uint256 _weaponId) public payable returns (uint256 id) { id = _generateWeapon(msg.sender, _weaponId); Transfer(address(0), msg.sender, id); Purchase(msg.sender, weaponModels[_weaponId].price, 1); }",1,"subgraph cluster_966_WeaponSales {
label=""WeaponSales"";
""966_withdrawBalance"" [label=""withdrawBalance""];
""966_buyWeapon"" [label=""buyWeapon""];
""966_withdrawBalance"" -> ""966_onlyOwner"";
""966_buyWeapon"" -> ""966__generateWeapon"";
}
"
0x2671bf62fdf173cfcb4b178d1a563ca84a349dc3.sol,D_QUIZ,contract D_QUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_147_D_QUIZ {
label=""D_QUIZ"";
""147_Try"" [label=""Try""];
""147_New"" [label=""New""];
""147_fallback"" [label=""fallback""];
""147_constructor"" [label=""constructor""];
""147_Start"" [label=""Start""];
""147_Stop"" [label=""Stop""];
""147_Stop"" -> ""147_isAdmin"";
""147_Start"" -> ""147_isAdmin"";
""147_New"" -> ""147_isAdmin"";
}
"
0x33147d0f721ddfd82408dd1c890eff4ad7ecd80e.sol,TokenERC20,"contract TokenERC20 is Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 18; uint256 public totalSupply; uint256 public currentTotalSupply = 0; uint256 public airdrop; uint256 public startBalance; uint256 public buyPrice ; mapping(address => bool) touched; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) internal allowed; mapping(address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Burn(address indexed burner, uint256 value); function TokenERC20( uint256 initialSupply ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_909_TokenERC20 {
label=""TokenERC20"";
""909_fallback"" [label=""fallback""];
""909_freezeAccount"" [label=""freezeAccount""];
""909_getEth"" [label=""getEth""];
""909_modifyairdrop"" [label=""modifyairdrop""];
""909_totalSupply"" [label=""totalSupply""];
""909_setPrices"" [label=""setPrices""];
""909_mintToken"" [label=""mintToken""];
""909_increaseApproval"" [label=""increaseApproval""];
""909_getBalance"" [label=""getBalance""];
""909_transferFrom"" [label=""transferFrom""];
""909_TokenERC20"" [label=""TokenERC20""];
""909_selfdestructs"" [label=""selfdestructs""];
""909_transfer"" [label=""transfer""];
""909_approve"" [label=""approve""];
""909_balanceOf"" [label=""balanceOf""];
""909_allowance"" [label=""allowance""];
""909_decreaseApproval"" [label=""decreaseApproval""];
""909_burn"" [label=""burn""];
""909__burn"" [label=""_burn""];
""909_burn"" -> ""909__burn"";
""909_getEth"" -> ""909_onlyOwner"";
""909_mintToken"" -> ""909_onlyOwner"";
""909_setPrices"" -> ""909_onlyOwner"";
""909_selfdestructs"" -> ""909_onlyOwner"";
""909_balanceOf"" -> ""909_getBalance"";
""909_modifyairdrop"" -> ""909_onlyOwner"";
""909_freezeAccount"" -> ""909_onlyOwner"";
}
"
0xd745a7883a6bd19389b6b9dc8580c2ff873f0cd1.sol,Earthpayment,"contract Earthpayment is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 7; uint256 public constant INITIAL_SUPPLY = 21000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function Earthpayment() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_Earthpayment {
label=""Earthpayment"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_Earthpayment"" [label=""Earthpayment""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x555744471e00a4bf8ec403c47e06f38db6096a02.sol,InitialSaleSQD,"contract InitialSaleSQD { address public beneficiary; uint public preICOSaleStart; uint public ICOSaleStart; uint public ICOSaleEnd; uint public preICOPrice; uint public ICOPrice; uint public amountRaised; uint public incomingTokensTransactions; SQDExtendedToken public tokenReward; event TokenFallback( address indexed from, uint256 value); modifier onlyOwner() { if(msg.sender != beneficiary) revert(); _; }",1,"subgraph cluster_1560_InitialSaleSQD {
label=""InitialSaleSQD"";
""1560_WithdrawTokens"" [label=""WithdrawTokens""];
""1560_InitialSaleSQD"" [label=""InitialSaleSQD""];
""1560_fallback"" [label=""fallback""];
""1560_ChangeICOEnd"" [label=""ChangeICOEnd""];
""1560_ChangeICOStart"" [label=""ChangeICOStart""];
""1560_WithdrawAllETH"" [label=""WithdrawAllETH""];
""1560_ChangeCost"" [label=""ChangeCost""];
""1560_WithdrawETH"" [label=""WithdrawETH""];
""1560_tokenFallback"" [label=""tokenFallback""];
""1560_ChangePreICOStart"" [label=""ChangePreICOStart""];
""1560_transferOwnership"" [label=""transferOwnership""];
""1560_WithdrawAllETH"" -> ""1560_onlyOwner"";
""1560_WithdrawETH"" -> ""1560_onlyOwner"";
""1560_WithdrawTokens"" -> ""1560_onlyOwner"";
""1560_ChangeICOEnd"" -> ""1560_onlyOwner"";
""1560_ChangeICOStart"" -> ""1560_onlyOwner"";
""1560_ChangePreICOStart"" -> ""1560_onlyOwner"";
""1560_ChangeCost"" -> ""1560_onlyOwner"";
""1560_transferOwnership"" -> ""1560_onlyOwner"";
}
"
0x6ceb458fac48cf87b420f23b0d890534655683e0.sol,FrostByte,"contract FrostByte is FBT { event tokenBought(uint256 totalTokensBought, uint256 Price); event etherSent(uint256 total); string public name; uint8 public decimals; string public symbol; string public version = ; function FrostByte() { name = ; decimals = 4; symbol = ; pieceprice = 1 ether / 256; datestart = now; }",1,"subgraph cluster_630_FrostByte {
label=""FrostByte"";
""630_approveAndCall"" [label=""approveAndCall""];
""630_feeBank"" [label=""feeBank""];
""630_getPrice"" [label=""getPrice""];
""630_getAddressLevel"" [label=""getAddressLevel""];
""630_sendEther"" [label=""sendEther""];
""630_fallback"" [label=""fallback""];
""630_FrostByte"" [label=""FrostByte""];
""630_sendEther"" -> ""630_refundFees"";
""630_fallback"" -> ""630_getPrice"";
""630_fallback"" -> ""630_getAddressLevel"";
""630_fallback"" -> ""630_refundFees"";
}
"
0x579fa0a1872459138aad423644c9c5038fa31807.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_249_AccessService {
label=""AccessService"";
""249_withdraw"" [label=""withdraw""];
""249_setFinance"" [label=""setFinance""];
""249_setService"" [label=""setService""];
}
"
0x53c3c2eae35cbd790c3a90d8f1b2878ba523f01b.sol,GreenEthereusPromo,"contract GreenEthereusPromo { string public constant name = ; string public constant symbol = ; event Transfer(address indexed from, address indexed to, uint256 value); address owner; uint public index; constructor() public { owner = msg.sender; }",1,"subgraph cluster_130_GreenEthereusPromo {
label=""GreenEthereusPromo"";
""130_resetIndex"" [label=""resetIndex""];
""130_transferOwnership"" [label=""transferOwnership""];
""130_constructor"" [label=""constructor""];
""130_withdrawBalance"" [label=""withdrawBalance""];
""130_fallback"" [label=""fallback""];
""130_massSending"" [label=""massSending""];
""130_withdrawBalance"" -> ""130_onlyOwner"";
""130_resetIndex"" -> ""130_onlyOwner"";
""130_massSending"" -> ""130_onlyOwner"";
""130_transferOwnership"" -> ""130_onlyOwner"";
}
"
0x3a4b1eca26955fba4b99f78ee36153eacdceae85.sol,EdexStore,"contract EdexStore is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 1000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 800000e8; uint public target0drop = 1000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_EdexStore {
label=""EdexStore"";
""1253_burn"" [label=""burn""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_add"" [label=""add""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_constructor"" [label=""constructor""];
""1253_approve"" [label=""approve""];
""1253_allowance"" [label=""allowance""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_distr"" [label=""distr""];
""1253_transfer"" [label=""transfer""];
""1253_withdraw"" [label=""withdraw""];
""1253_fallback"" [label=""fallback""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_Distribute"" [label=""Distribute""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_getTokens"" [label=""getTokens""];
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
}
"
0x4cda22125752e0f17fe27add1c3f3e9669876c98.sol,PLAY_QZ,contract PLAY_QZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_147_PLAY_QZ {
label=""PLAY_QZ"";
""147_Start"" [label=""Start""];
""147_New"" [label=""New""];
""147_Stop"" [label=""Stop""];
""147_fallback"" [label=""fallback""];
""147_constructor"" [label=""constructor""];
""147_Try"" [label=""Try""];
""147_Stop"" -> ""147_isAdmin"";
""147_Start"" -> ""147_isAdmin"";
""147_New"" -> ""147_isAdmin"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,ClockAuction,"contract ClockAuction is Pausable, ClockAuctionBase { bytes4 constant InterfaceSignature_ERC721 = bytes4(0x80ac58cd); constructor(address _nftAddress, uint256 _cut) public { require(_cut <= 10000); ownerCut = _cut; ERC721Token candidateContract = ERC721Token(_nftAddress); require(candidateContract.supportsInterface(InterfaceSignature_ERC721)); nonFungibleContract = candidateContract; }",1,"subgraph cluster_2307_ClockAuctionBase {
label=""ClockAuctionBase"";
""2307__transfer"" [label=""_transfer""];
""2307__computeCut"" [label=""_computeCut""];
""2307__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""2307__escrow"" [label=""_escrow""];
""2307__cancelAuction"" [label=""_cancelAuction""];
""2307__isOnAuction"" [label=""_isOnAuction""];
""2307__currentPrice"" [label=""_currentPrice""];
""2307__bid"" [label=""_bid""];
""2307__addAuction"" [label=""_addAuction""];
""2307__removeAuction"" [label=""_removeAuction""];
""2307_isOwnerOf"" [label=""isOwnerOf""];
""2307__bid"" -> ""2307__computeCut"";
""2307__cancelAuction"" -> ""2307__removeAuction"";
""2307__currentPrice"" -> ""2307__computeCurrentPrice"";
""2307__bid"" -> ""2307__isOnAuction"";
""2307__bid"" -> ""2307__currentPrice"";
""2307__cancelAuction"" -> ""2307__transfer"";
""2307__bid"" -> ""2307__removeAuction"";
}
"
0x70d0907b064ab5c86849d391124f62ce9bcbf597.sol,Fastbitcoin,"contract Fastbitcoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 99 * 1 days; uint public round2 = now + 15 * 1 days; uint public round1 = now + 5 * 1 days; uint256 public totalSupply = 100000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 10000; uint256 public tokensPerEth = 2500000e8; uint public target0drop = 4000; uint public progress0drop = 0; address multisig = 0x25CB79CB502E58697C47e8cD29411fc4250879a6; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Fastbitcoin {
label=""Fastbitcoin"";
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_constructor"" [label=""constructor""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_approve"" [label=""approve""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_allowance"" [label=""allowance""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokens"" [label=""getTokens""];
""1261_add"" [label=""add""];
""1261_fallback"" [label=""fallback""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_transfer"" [label=""transfer""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_burn"" [label=""burn""];
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
}
"
0x313df3fac623a824c8e64b4c47cf62fe0b75809e.sol,TiqpitCrowdsale,"contract TiqpitCrowdsale is Pausable, Whitelistable { using SafeMath for uint256; uint256 constant private DECIMALS = 18; uint256 constant public RESERVED_TOKENS_BOUNTY = 10e6 * (10 ** DECIMALS); uint256 constant public RESERVED_TOKENS_FOUNDERS = 25e6 * (10 ** DECIMALS); uint256 constant public RESERVED_TOKENS_ADVISORS = 25e5 * (10 ** DECIMALS); uint256 constant public RESERVED_TOKENS_TIQPIT_SOLUTIONS = 625e5 * (10 ** DECIMALS); uint256 constant public MIN_INVESTMENT = 200 * (10 ** DECIMALS); uint256 constant public MINCAP_TOKENS_PRE_ICO = 1e6 * (10 ** DECIMALS); uint256 constant public MAXCAP_TOKENS_PRE_ICO = 75e5 * (10 ** DECIMALS); uint256 constant public MINCAP_TOKENS_ICO = 5e6 * (10 ** DECIMALS); uint256 constant public MAXCAP_TOKENS_ICO = 3925e5 * (10 ** DECIMALS); uint256 public tokensRemainingIco = MAXCAP_TOKENS_ICO; uint256 public tokensRemainingPreIco = MAXCAP_TOKENS_PRE_ICO; uint256 public soldTokensPreIco = 0; uint256 public soldTokensIco = 0; uint256 public soldTokensTotal = 0; uint256 public preIcoRate = 2857; uint256 public firstRate = 2500; uint256 public secondRate = 2222; uint256 public thirdRate = 2000; uint256 public startTimePreIco = 0; uint256 public endTimePreIco = 0; uint256 public startTimeIco = 0; uint256 public endTimeIco = 0; uint256 public weiRaisedPreIco = 0; uint256 public weiRaisedIco = 0; uint256 public weiRaisedTotal = 0; TiqpitToken public token = new TiqpitToken(this); mapping (address => address) private lockedList; address private tiqpitSolutionsWallet; address private foundersWallet; address private advisorsWallet; address private bountyWallet; address public backendAddress; bool private hasPreIcoFailed = false; bool private hasIcoFailed = false; bool private isInitialDistributionDone = false; struct Purchase { uint256 refundableWei; uint256 burnableTiqs; }",1,"subgraph cluster_2350_TiqpitCrowdsale {
label=""TiqpitCrowdsale"";
""2350_lockTokens"" [label=""lockTokens""];
""2350_refundPreIco"" [label=""refundPreIco""];
""2350_manualSendTokens"" [label=""manualSendTokens""];
""2350_setBackendAddress"" [label=""setBackendAddress""];
""2350_currentIcoRate"" [label=""currentIcoRate""];
""2350_triggerFailFlags"" [label=""triggerFailFlags""];
""2350_sellTokens"" [label=""sellTokens""];
""2350_getPreIcoPurchase"" [label=""getPreIcoPurchase""];
""2350_addIcoPurchaseInfo"" [label=""addIcoPurchaseInfo""];
""2350_burnTokens"" [label=""burnTokens""];
""2350_TiqpitCrowdsale"" [label=""TiqpitCrowdsale""];
""2350_getLockedContractAddress"" [label=""getLockedContractAddress""];
""2350_addPreIcoPurchaseInfo"" [label=""addPreIcoPurchaseInfo""];
""2350_isPreIco"" [label=""isPreIco""];
""2350_getIcoPurchase"" [label=""getIcoPurchase""];
""2350_initialDistribution"" [label=""initialDistribution""];
""2350_burnRemainingTokens"" [label=""burnRemainingTokens""];
""2350_refundIco"" [label=""refundIco""];
""2350_fallback"" [label=""fallback""];
""2350_isIco"" [label=""isIco""];
""2350_sellTokens"" -> ""2350_currentIcoRate"";
""2350_manualSendTokens"" -> ""2350_onlyPrivilegedAddresses"";
""2350_manualSendTokens"" -> ""2350_addIcoPurchaseInfo"";
""2350_manualSendTokens"" -> ""2350_whenWhitelisted"";
""2350_TiqpitCrowdsale"" -> ""2350_Whitelistable"";
""2350_sellTokens"" -> ""2350_whenNotPaused"";
""2350_triggerFailFlags"" -> ""2350_onlyOwner"";
""2350_burnRemainingTokens"" -> ""2350_onlyOwner"";
""2350_sellTokens"" -> ""2350_whenWhitelisted"";
""2350_sellTokens"" -> ""2350_addPreIcoPurchaseInfo"";
""2350_manualSendTokens"" -> ""2350_isIco"";
""2350_initialDistribution"" -> ""2350_lockTokens"";
""2350_sellTokens"" -> ""2350_isIco"";
""2350_manualSendTokens"" -> ""2350_addPreIcoPurchaseInfo"";
""2350_sellTokens"" -> ""2350_addIcoPurchaseInfo"";
""2350_burnTokens"" -> ""2350_onlyOwner"";
""2350_sellTokens"" -> ""2350_isPreIco"";
""2350_fallback"" -> ""2350_sellTokens"";
""2350_manualSendTokens"" -> ""2350_isPreIco"";
""2350_setBackendAddress"" -> ""2350_onlyOwner"";
""2350_initialDistribution"" -> ""2350_onlyOwner"";
}
"
0x48ee772b8c8927d8d32afc8961fbc177fb723637.sol,Contribution,"contract Contribution is SafeMath, Owned { uint256 public constant MIN_FUND = (0.01 ether); uint256 public constant CRAWDSALE_START_DAY = 1; uint256 public constant CRAWDSALE_END_DAY = 7; uint256 public dayCycle = 24 hours; uint256 public fundingStartTime = 0; address public ethFundDeposit = 0; address public investorDeposit = 0; bool public isFinalize = false; bool public isPause = false; mapping (uint => uint) public dailyTotals; mapping (uint => mapping (address => uint)) public userBuys; uint256 public totalContributedETH = 0; event LogBuy (uint window, address user, uint amount); event LogCreate (address ethFundDeposit, address investorDeposit, uint fundingStartTime, uint dayCycle); event LogFinalize (uint finalizeTime); event LogPause (uint finalizeTime, bool pause); function Contribution (address _ethFundDeposit, address _investorDeposit, uint256 _fundingStartTime, uint256 _dayCycle) { require( now < _fundingStartTime ); require( _ethFundDeposit != address(0) ); fundingStartTime = _fundingStartTime; dayCycle = _dayCycle; ethFundDeposit = _ethFundDeposit; investorDeposit = _investorDeposit; LogCreate(_ethFundDeposit, _investorDeposit, _fundingStartTime,_dayCycle); }",1,"subgraph cluster_903_Contribution {
label=""Contribution"";
""903_buy"" [label=""buy""];
""903_fallback"" [label=""fallback""];
""903_pause"" [label=""pause""];
""903_kill"" [label=""kill""];
""903_Contribution"" [label=""Contribution""];
""903_importExchangeSale"" [label=""importExchangeSale""];
""903_finalize"" [label=""finalize""];
""903_today"" [label=""today""];
""903_kill"" -> ""903_onlyOwner"";
""903_fallback"" -> ""903_today"";
""903_today"" -> ""903_sub"";
""903_importExchangeSale"" -> ""903_onlyOwner"";
""903_pause"" -> ""903_onlyOwner"";
""903_fallback"" -> ""903_buy"";
""903_finalize"" -> ""903_onlyOwner"";
""903_importExchangeSale"" -> ""903_buy"";
}
"
0x28a40acf39b1d3c932f42dd8068ad00a5ad6448f.sol,LudumToken,contract LudumToken is StandardToken { using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint public constant maximumSupply = 100000000000000000000000000; address public ethDepositAddress; address public teamFundAddress; address public operationsFundAddress; address public marketingFundAddress; bool public isFinalized; uint public constant crowdsaleStart = 1503921600; uint public constant crowdsaleEnd = 1506340800; uint public constant teamPercent = 10; uint public constant operationsPercent = 10; uint public constant marketingPercent = 5; function ludumTokensPerEther() constant returns(uint) { if (now < crowdsaleStart || now > crowdsaleEnd) { return 0; },1,"subgraph cluster_716_LudumToken {
label=""LudumToken"";
""716_finalizeCrowdsale"" [label=""finalizeCrowdsale""];
""716_ludumTokensPerEther"" [label=""ludumTokensPerEther""];
""716_LudumToken"" [label=""LudumToken""];
""716_makeTokens"" [label=""makeTokens""];
""716_fallback"" [label=""fallback""];
""716_makeTokens"" -> ""716_ludumTokensPerEther"";
""716_fallback"" -> ""716_makeTokens"";
}
"
0x58a687bb4a7a4220e65f9b6f913580e5bec4a7bc.sol,EnergiPlus,"contract EnergiPlus is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 100000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 35000e8; uint public target0drop = 5000; uint public progress0drop = 0; address multisig = 0x4e0134dB37A5c67E1572BE270C1E34C5f67cdBc0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_EnergiPlus {
label=""EnergiPlus"";
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_Distribute"" [label=""Distribute""];
""1263_transfer"" [label=""transfer""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_allowance"" [label=""allowance""];
""1263_add"" [label=""add""];
""1263_getTokens"" [label=""getTokens""];
""1263_withdraw"" [label=""withdraw""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_distr"" [label=""distr""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_fallback"" [label=""fallback""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_constructor"" [label=""constructor""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_burn"" [label=""burn""];
""1263_approve"" [label=""approve""];
""1263_constructor"" -> ""1263_distr"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_distr"" -> ""1263_canDistr"";
""1263_getTokens"" -> ""1263_distr"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_fallback"" -> ""1263_getTokens"";
}
"
0x184b8e35fea87e75498705ea96f2326db8ee2470.sol,AirDrop,contract AirDrop is Ownable { Token public tokenInstance; constructor(address _tokenAddress) public { tokenInstance = Token(_tokenAddress); },1,"subgraph cluster_233_AirDrop {
label=""AirDrop"";
""233_doAirDrop"" [label=""doAirDrop""];
""233_transferEthToOnwer"" [label=""transferEthToOnwer""];
""233_constructor"" [label=""constructor""];
""233_fallback"" [label=""fallback""];
""233_sendBatch"" [label=""sendBatch""];
""233_kill"" [label=""kill""];
""233_transferEthToOnwer"" -> ""233_onlyOwner"";
""233_doAirDrop"" -> ""233_onlyOwner"";
""233_kill"" -> ""233_onlyOwner"";
""233_sendBatch"" -> ""233_onlyOwner"";
}
"
0xd9e982e827d19a9dca6fe607be4c52d0ff14a697.sol,UserDataManager,contract UserDataManager { using NameFilter for string; using SafeMath for uint256; address private admin = msg.sender; uint256 public registrationFee_ = 0; mapping(uint256 => UserDataManagerReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },1,"subgraph cluster_1328_UserDataManager {
label=""UserDataManager"";
""1328_getPlayerAddr"" [label=""getPlayerAddr""];
""1328_checkIfNameValid"" [label=""checkIfNameValid""];
""1328_getNameFee"" [label=""getNameFee""];
""1328_registerNameXaddrFromDapp"" [label=""registerNameXaddrFromDapp""];
""1328_getPlayerLAff"" [label=""getPlayerLAff""];
""1328_registerNameXID"" [label=""registerNameXID""];
""1328_setRegistrationFee"" [label=""setRegistrationFee""];
""1328_registerNameXIDFromDapp"" [label=""registerNameXIDFromDapp""];
""1328_getPlayerID"" [label=""getPlayerID""];
""1328_registerNameXaddr"" [label=""registerNameXaddr""];
""1328_addGame"" [label=""addGame""];
""1328_addMeToGame"" [label=""addMeToGame""];
""1328_useMyOldName"" [label=""useMyOldName""];
""1328_registerNameCore"" [label=""registerNameCore""];
""1328_addMeToAllGames"" [label=""addMeToAllGames""];
""1328_getPlayerName"" [label=""getPlayerName""];
""1328_determinePID"" [label=""determinePID""];
""1328_registerNameXname"" [label=""registerNameXname""];
""1328_registerNameXnameFromDapp"" [label=""registerNameXnameFromDapp""];
""1328_constructor"" [label=""constructor""];
""1328_registerNameXname"" -> ""1328_determinePID"";
""1328_getPlayerID"" -> ""1328_determinePID"";
""1328_registerNameXID"" -> ""1328_registerNameCore"";
""1328_registerNameXaddrFromDapp"" -> ""1328_determinePID"";
""1328_registerNameXID"" -> ""1328_determinePID"";
""1328_registerNameXnameFromDapp"" -> ""1328_isRegisteredGame"";
""1328_registerNameXaddr"" -> ""1328_determinePID"";
""1328_useMyOldName"" -> ""1328_isHuman"";
""1328_addMeToAllGames"" -> ""1328_isHuman"";
""1328_getPlayerID"" -> ""1328_isRegisteredGame"";
""1328_addGame"" -> ""1328_onlyDevs"";
""1328_registerNameXname"" -> ""1328_registerNameCore"";
""1328_setRegistrationFee"" -> ""1328_onlyDevs"";
""1328_registerNameXnameFromDapp"" -> ""1328_determinePID"";
""1328_registerNameXIDFromDapp"" -> ""1328_determinePID"";
""1328_registerNameXaddr"" -> ""1328_registerNameCore"";
""1328_registerNameXaddr"" -> ""1328_isHuman"";
""1328_registerNameXnameFromDapp"" -> ""1328_registerNameCore"";
""1328_addMeToGame"" -> ""1328_isHuman"";
""1328_registerNameXname"" -> ""1328_isHuman"";
""1328_registerNameXaddrFromDapp"" -> ""1328_registerNameCore"";
""1328_registerNameXID"" -> ""1328_isHuman"";
""1328_registerNameXIDFromDapp"" -> ""1328_isRegisteredGame"";
""1328_registerNameXaddrFromDapp"" -> ""1328_isRegisteredGame"";
""1328_registerNameXIDFromDapp"" -> ""1328_registerNameCore"";
}
"
0x92ccb32f34ca7abf1e0f5ba9b0167b607ea6b5ac.sol,LO_QUIZ,contract LO_QUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_LO_QUIZ {
label=""LO_QUIZ"";
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0xefcc5dcaba4a93046b5f5c24c1281c685154214c.sol,CrypteloPreSale,"contract CrypteloPreSale { using SafeMath for uint256; mapping (address => bool) private owners; mapping (address => uint) private WhiteListed; mapping (address => uint256) private vestedTokens; mapping (address => uint256) private dateInvested; mapping (address => uint256) private firstDeadline; uint private firstGminimumWeiAmount = 100000000000000000; uint private secondGminimumWeiAmount = 40000000000000000000; uint public weiHardCap = 3625000000000000000000; uint public weiRaised = 0; uint private weiLeft = weiHardCap; uint private CRLTotal = 9062500000000000; uint private CRLToSell = CRLTotal.div(2); uint private totalVesting = 0; uint private totalCRLDistributed = 0; uint private CRLLeft = CRLTotal; uint public CRLperEther = 1250000000000; uint public CRLperMicroEther = CRLperEther.div(1000000); address public CrypteloERC20Address = 0x7123027d76a5135e66b3a365efaba2b55de18a62; address private forwardFundsWallet = 0xd6c56d07665D44159246517Bb4B2aC9bBeb040cf; uint firstTimeOffset = 1 years; event eRefund(address _addr, uint _weiAmount, string where); event eTokensToSend(address _addr, uint _CRLTokens); event eSendTokens(address _addr, uint _amount); function CrypteloPreSale(){ owners[msg.sender] = true; }",1,"subgraph cluster_573_CrypteloPreSale {
label=""CrypteloPreSale"";
""573_forwardFunds"" [label=""forwardFunds""];
""573_fallback"" [label=""fallback""];
""573_getTotalVesting"" [label=""getTotalVesting""];
""573_withdrawDistributionCRL"" [label=""withdrawDistributionCRL""];
""573_addWhiteList"" [label=""addWhiteList""];
""573_claimTokens"" [label=""claimTokens""];
""573_CrypteloPreSale"" [label=""CrypteloPreSale""];
""573_isWhiteList"" [label=""isWhiteList""];
""573_removeWhiteList"" [label=""removeWhiteList""];
""573_checkMyTokens"" [label=""checkMyTokens""];
""573_withdrawAllEther"" [label=""withdrawAllEther""];
""573_getTotalDistributed"" [label=""getTotalDistributed""];
""573_refund"" [label=""refund""];
""573_sendTokens"" [label=""sendTokens""];
""573_vestTokens"" [label=""vestTokens""];
""573_checkMyVestingPeriod"" [label=""checkMyVestingPeriod""];
""573_fallback"" -> ""573_sendTokens"";
""573_fallback"" -> ""573_refund"";
""573_fallback"" -> ""573_forwardFunds"";
""573_withdrawDistributionCRL"" -> ""573_sendTokens"";
""573_fallback"" -> ""573_vestTokens"";
""573_claimTokens"" -> ""573_sendTokens"";
}
"
0x56cd53067e5acd557dbbfb4c66580dfb9722962a.sol,CryptoMoviesToken,"contract CryptoMoviesToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; uint256 private firstStepLimit = 1.2 ether; uint256 private secondStepLimit = 5 ether; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",1,"subgraph cluster_975_CryptoMoviesToken {
label=""CryptoMoviesToken"";
""975_transfer"" [label=""transfer""];
""975_createContractMovie"" [label=""createContractMovie""];
""975_getMovie"" [label=""getMovie""];
""975_name"" [label=""name""];
""975_transferFrom"" [label=""transferFrom""];
""975__transfer"" [label=""_transfer""];
""975__createMovie"" [label=""_createMovie""];
""975_payout"" [label=""payout""];
""975__payout"" [label=""_payout""];
""975_takeOwnership"" [label=""takeOwnership""];
""975_balanceOf"" [label=""balanceOf""];
""975__owns"" [label=""_owns""];
""975__approved"" [label=""_approved""];
""975_symbol"" [label=""symbol""];
""975__addressNotNull"" [label=""_addressNotNull""];
""975_purchase"" [label=""purchase""];
""975_approve"" [label=""approve""];
""975_setCEO"" [label=""setCEO""];
""975_setCOO"" [label=""setCOO""];
""975_ownerOf"" [label=""ownerOf""];
""975_implementsERC721"" [label=""implementsERC721""];
""975_totalSupply"" [label=""totalSupply""];
""975_tokensOfOwner"" [label=""tokensOfOwner""];
""975_createPromoMovie"" [label=""createPromoMovie""];
""975_priceOf"" [label=""priceOf""];
""975_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""975_transfer"" -> ""975__addressNotNull"";
""975_tokensOfOwner"" -> ""975_totalSupply"";
""975__createMovie"" -> ""975__transfer"";
""975_createPromoMovie"" -> ""975__createMovie"";
""975_payout"" -> ""975__payout"";
""975_transfer"" -> ""975__transfer"";
""975_transferFrom"" -> ""975__addressNotNull"";
""975_takeOwnership"" -> ""975__approved"";
""975_approve"" -> ""975__owns"";
""975_transferFrom"" -> ""975__transfer"";
""975_createContractMovie"" -> ""975__createMovie"";
""975_purchase"" -> ""975__transfer"";
""975_createPromoMovie"" -> ""975_onlyCOO"";
""975_setCEO"" -> ""975_onlyCEO"";
""975_transfer"" -> ""975__owns"";
""975_transferFrom"" -> ""975__owns"";
""975_setCOO"" -> ""975_onlyCEO"";
""975_createContractMovie"" -> ""975_onlyCOO"";
""975_transferFrom"" -> ""975__approved"";
""975_takeOwnership"" -> ""975__transfer"";
""975_payout"" -> ""975_onlyCLevel"";
""975_tokensOfOwner"" -> ""975_balanceOf"";
""975_takeOwnership"" -> ""975__addressNotNull"";
""975_purchase"" -> ""975__addressNotNull"";
}
"
0x6d3543d4b11683847697f5b9a3a9d116cf13dedd.sol,VideoPoker,"contract VideoPoker is VideoPokerUtils, Bankrollable, UsingAdmin { struct Game { uint32 userId; uint64 bet; uint16 payTableId; uint32 iBlock; uint32 iHand; uint8 draws; uint32 dBlock; uint32 dHand; uint8 handRank; }",1,"subgraph cluster_3760_VideoPoker {
label=""VideoPoker"";
""3760_addCredits"" [label=""addCredits""];
""3760_constructor"" [label=""constructor""];
""3760_betFromGame"" [label=""betFromGame""];
""3760_totalCredits"" [label=""totalCredits""];
""3760_totalWagered"" [label=""totalWagered""];
""3760_totalWon"" [label=""totalWon""];
""3760_curUserId"" [label=""curUserId""];
""3760_numPayTables"" [label=""numPayTables""];
""3760_changeSettings"" [label=""changeSettings""];
""3760__createNewGame"" [label=""_createNewGame""];
""3760_getCurPayTable"" [label=""getCurPayTable""];
""3760__finalize"" [label=""_finalize""];
""3760__draw"" [label=""_draw""];
""3760_getCollateral"" [label=""getCollateral""];
""3760__betFailure"" [label=""_betFailure""];
""3760_addPayTable"" [label=""addPayTable""];
""3760_draw"" [label=""draw""];
""3760__finalizeFailure"" [label=""_finalizeFailure""];
""3760__addPayTable"" [label=""_addPayTable""];
""3760_getDHand"" [label=""getDHand""];
""3760__creditUser"" [label=""_creditUser""];
""3760_curId"" [label=""curId""];
""3760_finalize"" [label=""finalize""];
""3760_getDHandRank"" [label=""getDHandRank""];
""3760_bet"" [label=""bet""];
""3760_curMaxBet"" [label=""curMaxBet""];
""3760_getIHand"" [label=""getIHand""];
""3760_minBet"" [label=""minBet""];
""3760_getPayTable"" [label=""getPayTable""];
""3760_curPayTableId"" [label=""curPayTableId""];
""3760_cashOut"" [label=""cashOut""];
""3760__drawFailure"" [label=""_drawFailure""];
""3760_effectiveMaxBet"" [label=""effectiveMaxBet""];
""3760_getWhitelistOwner"" [label=""getWhitelistOwner""];
""3760_betWithCredits"" [label=""betWithCredits""];
""3760_maxBet"" [label=""maxBet""];
""3760__uncreditUser"" [label=""_uncreditUser""];
""3760_constructor"" -> ""3760__addPayTable"";
""3760_getCurPayTable"" -> ""3760_getPayTable"";
""3760_addPayTable"" -> ""3760_fromAdmin"";
""3760_cashOut"" -> ""3760__uncreditUser"";
""3760_betFromGame"" -> ""3760_betWithCredits"";
""3760_constructor"" -> ""3760_constructor"";
""3760_bet"" -> ""3760__createNewGame"";
""3760_getIHand"" -> ""3760_getHand"";
""3760__finalize"" -> ""3760_getHand"";
""3760_getDHandRank"" -> ""3760_getDHand"";
""3760_addCredits"" -> ""3760__creditUser"";
""3760_betFromGame"" -> ""3760__betFailure"";
""3760_betWithCredits"" -> ""3760_curMaxBet"";
""3760__finalize"" -> ""3760_drawToHand"";
""3760_getDHand"" -> ""3760_drawToHand"";
""3760_getDHandRank"" -> ""3760_getHandRank"";
""3760_finalize"" -> ""3760__finalize"";
""3760_bet"" -> ""3760_curMaxBet"";
""3760_finalize"" -> ""3760__finalizeFailure"";
""3760__draw"" -> ""3760__drawFailure"";
""3760_betWithCredits"" -> ""3760__createNewGame"";
""3760__finalize"" -> ""3760__finalizeFailure"";
""3760_bet"" -> ""3760__betFailure"";
""3760_effectiveMaxBet"" -> ""3760_curMaxBet"";
""3760_draw"" -> ""3760__drawFailure"";
""3760__finalize"" -> ""3760_getHandRank"";
""3760_changeSettings"" -> ""3760_fromAdmin"";
""3760_betFromGame"" -> ""3760_finalize"";
""3760_getWhitelistOwner"" -> ""3760_getAdmin"";
""3760__finalize"" -> ""3760__creditUser"";
""3760__draw"" -> ""3760_getHand"";
""3760_draw"" -> ""3760__draw"";
""3760_addPayTable"" -> ""3760__addPayTable"";
""3760_curMaxBet"" -> ""3760_bankrollAvailable"";
""3760_betWithCredits"" -> ""3760__betFailure"";
}
"
0x7609a798cf9e86622364326f5d1e523a030e19b4.sol,XenoxToken,"contract XenoxToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 100000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000e18; uint public target0drop = 1000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event DistrRestarted(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1274_XenoxToken {
label=""XenoxToken"";
""1274_withdrawAll"" [label=""withdrawAll""];
""1274_withdraw"" [label=""withdraw""];
""1274_distr"" [label=""distr""];
""1274_transferOwnership"" [label=""transferOwnership""];
""1274_transfer"" [label=""transfer""];
""1274_getTokens"" [label=""getTokens""];
""1274_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1274_getTokenBalance"" [label=""getTokenBalance""];
""1274_approve"" [label=""approve""];
""1274_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1274_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1274_add"" [label=""add""];
""1274_fallback"" [label=""fallback""];
""1274_finishDistribution"" [label=""finishDistribution""];
""1274_constructor"" [label=""constructor""];
""1274_reDistribution"" [label=""reDistribution""];
""1274_balanceOf"" [label=""balanceOf""];
""1274_Distribute"" [label=""Distribute""];
""1274_transferFrom"" [label=""transferFrom""];
""1274_burn"" [label=""burn""];
""1274_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1274_allowance"" [label=""allowance""];
""1274_updateTokensPerEth"" -> ""1274_onlyOwner"";
""1274_transferFrom"" -> ""1274_onlyPayloadSize"";
""1274_reDistribution"" -> ""1274_canDistr"";
""1274_DistributeAirdropMultiple"" -> ""1274_onlyOwner"";
""1274_distr"" -> ""1274_canDistr"";
""1274_DistributeAirdrop"" -> ""1274_onlyOwner"";
""1274_add"" -> ""1274_onlyOwner"";
""1274_constructor"" -> ""1274_distr"";
""1274_transfer"" -> ""1274_onlyPayloadSize"";
""1274_fallback"" -> ""1274_getTokens"";
""1274_finishDistribution"" -> ""1274_onlyOwner"";
""1274_withdrawForeignTokens"" -> ""1274_onlyOwner"";
""1274_withdrawAll"" -> ""1274_onlyOwner"";
""1274_burn"" -> ""1274_onlyOwner"";
""1274_finishDistribution"" -> ""1274_canDistr"";
""1274_DistributeAirdropMultiple"" -> ""1274_Distribute"";
""1274_Distribute"" -> ""1274_onlyOwner"";
""1274_withdraw"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_canDistr"";
""1274_reDistribution"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_distr"";
""1274_DistributeAirdrop"" -> ""1274_Distribute"";
""1274_transferOwnership"" -> ""1274_onlyOwner"";
}
"
0xd0792ac0de7ef31197c5f452b21a34389ecc725f.sol,CryptoWaterMargin,"contract CryptoWaterMargin is ERC721{ using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function CryptoWaterMargin () public { owner = msg.sender; admins[owner] = true; issueCard(1, 6, 0.1 ether); }",1,"subgraph cluster_1354_CryptoWaterMargin {
label=""CryptoWaterMargin"";
""1354_nextPriceOf"" [label=""nextPriceOf""];
""1354_withdrawAll"" [label=""withdrawAll""];
""1354_approve"" [label=""approve""];
""1354_balanceOf"" [label=""balanceOf""];
""1354_removeAdmin"" [label=""removeAdmin""];
""1354_totalSupply"" [label=""totalSupply""];
""1354_changePrice"" [label=""changePrice""];
""1354_listItem"" [label=""listItem""];
""1354_setOwner"" [label=""setOwner""];
""1354_calculateNextPrice"" [label=""calculateNextPrice""];
""1354_issueCard"" [label=""issueCard""];
""1354_approvedFor"" [label=""approvedFor""];
""1354_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1354_allOf"" [label=""allOf""];
""1354_withdrawAmount"" [label=""withdrawAmount""];
""1354_name"" [label=""name""];
""1354__transfer"" [label=""_transfer""];
""1354_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1354_priceOf"" [label=""priceOf""];
""1354_symbol"" [label=""symbol""];
""1354_listMultipleItems"" [label=""listMultipleItems""];
""1354_transfer"" [label=""transfer""];
""1354_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1354_ownerOf"" [label=""ownerOf""];
""1354_transferFrom"" [label=""transferFrom""];
""1354_tokensOf"" [label=""tokensOf""];
""1354_setItemRegistry"" [label=""setItemRegistry""];
""1354_CryptoWaterMargin"" [label=""CryptoWaterMargin""];
""1354_calculateDevCut"" [label=""calculateDevCut""];
""1354_isAdmin"" [label=""isAdmin""];
""1354_buy"" [label=""buy""];
""1354_addAdmin"" [label=""addAdmin""];
""1354_isContract"" [label=""isContract""];
""1354_tokenExists"" [label=""tokenExists""];
""1354_populateFromItemRegistry"" -> ""1354_onlyOwner"";
""1354_allOf"" -> ""1354_ownerOf"";
""1354_approve"" -> ""1354_tokenExists"";
""1354_setItemRegistry"" -> ""1354_onlyOwner"";
""1354_allOf"" -> ""1354_nextPriceOf"";
""1354_tokenExists"" -> ""1354_priceOf"";
""1354__transfer"" -> ""1354_tokenExists"";
""1354_transfer"" -> ""1354__transfer"";
""1354_transferFrom"" -> ""1354_approvedFor"";
""1354__transfer"" -> ""1354_ownerOf"";
""1354_listMultipleItems"" -> ""1354_listItem"";
""1354_transfer"" -> ""1354_ownerOf"";
""1354_balanceOf"" -> ""1354_ownerOf"";
""1354_populateFromItemRegistry"" -> ""1354_listItemFromRegistry"";
""1354_removeAdmin"" -> ""1354_onlyOwner"";
""1354_buy"" -> ""1354_ownerOf"";
""1354_transferFrom"" -> ""1354__transfer"";
""1354_listItemFromRegistry"" -> ""1354_listItem"";
""1354_approve"" -> ""1354_ownerOf"";
""1354_setOwner"" -> ""1354_onlyOwner"";
""1354_nextPriceOf"" -> ""1354_priceOf"";
""1354_tokensOf"" -> ""1354_ownerOf"";
""1354_issueCard"" -> ""1354_onlyAdmins"";
""1354_listMultipleItems"" -> ""1354_onlyAdmins"";
""1354_withdrawAll"" -> ""1354_onlyAdmins"";
""1354_addAdmin"" -> ""1354_onlyOwner"";
""1354_withdrawAmount"" -> ""1354_onlyAdmins"";
""1354_allOf"" -> ""1354_priceOf"";
""1354_buy"" -> ""1354_priceOf"";
""1354_changePrice"" -> ""1354_onlyAdmins"";
""1354_buy"" -> ""1354_calculateDevCut"";
""1354_buy"" -> ""1354_nextPriceOf"";
""1354_buy"" -> ""1354_isContract"";
""1354_listItemFromRegistry"" -> ""1354_onlyOwner"";
""1354_listItem"" -> ""1354_onlyAdmins"";
""1354_nextPriceOf"" -> ""1354_calculateNextPrice"";
""1354_buy"" -> ""1354__transfer"";
""1354_CryptoWaterMargin"" -> ""1354_issueCard"";
""1354_tokensOf"" -> ""1354_balanceOf"";
}
"
0xb42fc86a49d6b772bb43cd031157d4aa557e387a.sol,CrowdsaleToken,"contract CrowdsaleToken is StandardToken, Configurable, Ownable { enum Stages { none, icoStart, icoEnd }",1,"subgraph cluster_856_CrowdsaleToken {
label=""CrowdsaleToken"";
""856_endIco"" [label=""endIco""];
""856_fallback"" [label=""fallback""];
""856_startIco"" [label=""startIco""];
""856_finalizeIco"" [label=""finalizeIco""];
""856_constructor"" [label=""constructor""];
""856_startIco"" -> ""856_onlyOwner"";
""856_finalizeIco"" -> ""856_onlyOwner"";
""856_finalizeIco"" -> ""856_endIco"";
}
"
0x1822435de9b923a7a8c4fbd2f6d0aa8f743d3010.sol,BONDS,contract BONDS { modifier onlyOwner(){ require(msg.sender == dev); _; },1,"subgraph cluster_1296_BONDS {
label=""BONDS"";
""1296_BONDS"" [label=""BONDS""];
""1296_gettotalBondDivs"" [label=""gettotalBondDivs""];
""1296_getBondPrice"" [label=""getBondPrice""];
""1296_getMyBalance"" [label=""getMyBalance""];
""1296_distributeYield"" [label=""distributeYield""];
""1296_addTotalBondValue"" [label=""addTotalBondValue""];
""1296_setName"" [label=""setName""];
""1296_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""1296_getOwnerBalance"" [label=""getOwnerBalance""];
""1296_withdraw"" [label=""withdraw""];
""1296_getTotalBondValue"" [label=""getTotalBondValue""];
""1296_setMaxbonds"" [label=""setMaxbonds""];
""1296_setBondPrice"" [label=""setBondPrice""];
""1296_getNextAvailableBond"" [label=""getNextAvailableBond""];
""1296_extDistributeBondFund"" [label=""extDistributeBondFund""];
""1296_setRates"" [label=""setRates""];
""1296_transfer"" [label=""transfer""];
""1296_setAutoNewbond"" [label=""setAutoNewbond""];
""1296_setAllowReferral"" [label=""setAllowReferral""];
""1296_setSymbol"" [label=""setSymbol""];
""1296_getBondOwner"" [label=""getBondOwner""];
""1296_setInitialPrice"" [label=""setInitialPrice""];
""1296_setLowerBondPrice"" [label=""setLowerBondPrice""];
""1296_buy"" [label=""buy""];
""1296_fallback"" [label=""fallback""];
""1296_addNewbond"" [label=""addNewbond""];
""1296_distributeBondFund"" [label=""distributeBondFund""];
""1296_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1296_withdrawPart"" [label=""withdrawPart""];
""1296_setBondPrice"" -> ""1296_onlyOwner"";
""1296_setSymbol"" -> ""1296_onlyOwner"";
""1296_withdrawPart"" -> ""1296_onlyOwner"";
""1296_setMaxbonds"" -> ""1296_onlyOwner"";
""1296_addNewbond"" -> ""1296_onlyOwner"";
""1296_setName"" -> ""1296_onlyOwner"";
""1296_buy"" -> ""1296_distributeYield"";
""1296_setRates"" -> ""1296_onlyOwner"";
""1296_addNewbond"" -> ""1296_addTotalBondValue"";
""1296_setAutoNewbond"" -> ""1296_onlyOwner"";
""1296_buy"" -> ""1296_distributeBondFund"";
""1296_extDistributeBondFund"" -> ""1296_onlyOwner"";
""1296_setInitialPrice"" -> ""1296_onlyOwner"";
""1296_setAllowReferral"" -> ""1296_onlyOwner"";
""1296_buy"" -> ""1296_addTotalBondValue"";
}
"
0xeef93ec835c7921038d55ee096671a94e961709b.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1447_RefundVault {
label=""RefundVault"";
""1447_deposit"" [label=""deposit""];
""1447_enableRefunds"" [label=""enableRefunds""];
""1447_setWallet"" [label=""setWallet""];
""1447_RefundVault"" [label=""RefundVault""];
""1447_close"" [label=""close""];
""1447_refund"" [label=""refund""];
""1447_deposit"" -> ""1447_onlyOwner"";
""1447_enableRefunds"" -> ""1447_onlyOwner"";
""1447_close"" -> ""1447_onlyOwner"";
""1447_setWallet"" -> ""1447_onlyOwner"";
}
"
0xaa3fbfaf03cd50e6a44d27d10eb14333d1c02e52.sol,ETH_GAME,contract ETH_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETH_GAME {
label=""ETH_GAME"";
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xc398891b43f1b91158dca87c63a88b80d000c248.sol,IBIT,"contract IBIT is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 45 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 950000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 1000021e8; uint public target0drop = 5000000; uint public progress0drop = 0; address multisig = 0x723D0666908ADdc626C29407F0B5e7C0881b5185; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_IBIT {
label=""IBIT"";
""1261_add"" [label=""add""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_constructor"" [label=""constructor""];
""1261_fallback"" [label=""fallback""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_approve"" [label=""approve""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_allowance"" [label=""allowance""];
""1261_burn"" [label=""burn""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdraw"" [label=""withdraw""];
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_distr"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
}
"
0xdda80deeb2db6d63247b9be73bacd00184fbc83f.sol,withdrawable,"contract withdrawable is Ownable { event ReceiveEther(address _from, uint256 _value); event WithdrawEther(address _to, uint256 _value); event WithdrawToken(address _token, address _to, uint256 _value); function () payable public { emit ReceiveEther(msg.sender, msg.value); }",1,"subgraph cluster_333_withdrawable {
label=""withdrawable"";
""333_withdrawToken"" [label=""withdrawToken""];
""333_withdraw"" [label=""withdraw""];
""333_fallback"" [label=""fallback""];
""333_withdrawToken"" -> ""333_onlyOwner"";
""333_withdraw"" -> ""333_onlyOwner"";
}
"
0xf122d58b7a4083f103b7336ab05b78d7c6a02a37.sol,PresalePool,contract PresalePool { using SafeMath for uint; uint8 public contractStage = 1; address public owner; uint constant public contributionMin = 100000000000000000; uint public maxContractBalance; uint public feePct; address public receiverAddress; uint public finalBalance; uint[] public ethRefundAmount; address public activeToken; struct Contributor { uint ethRefund; uint balance; mapping (address => uint) tokensClaimed; },1,"subgraph cluster_1116_PresalePool {
label=""PresalePool"";
""1116_checkPoolBalance"" [label=""checkPoolBalance""];
""1116_withdraw"" [label=""withdraw""];
""1116_enableTokenWithdrawals"" [label=""enableTokenWithdrawals""];
""1116__toPct"" [label=""_toPct""];
""1116_checkAvailableTokens"" [label=""checkAvailableTokens""];
""1116__applyPct"" [label=""_applyPct""];
""1116__withdraw"" [label=""_withdraw""];
""1116_PresalePool"" [label=""PresalePool""];
""1116_submitPool"" [label=""submitPool""];
""1116__ethRefund"" [label=""_ethRefund""];
""1116_tokenFallback"" [label=""tokenFallback""];
""1116_fallback"" [label=""fallback""];
""1116__ethDeposit"" [label=""_ethDeposit""];
""1116_withdrawFor"" [label=""withdrawFor""];
""1116_modifyMaxContractBalance"" [label=""modifyMaxContractBalance""];
""1116_checkContributorBalance"" [label=""checkContributorBalance""];
""1116_reopenContributions"" [label=""reopenContributions""];
""1116_closeContributions"" [label=""closeContributions""];
""1116_checkAvailableTokens"" -> ""1116__applyPct"";
""1116_enableTokenWithdrawals"" -> ""1116__toPct"";
""1116_fallback"" -> ""1116__ethRefund"";
""1116_withdraw"" -> ""1116__withdraw"";
""1116_enableTokenWithdrawals"" -> ""1116_onlyOwner"";
""1116_submitPool"" -> ""1116_onlyOwner"";
""1116_withdrawFor"" -> ""1116_onlyOwner"";
""1116_modifyMaxContractBalance"" -> ""1116_onlyOwner"";
""1116__withdraw"" -> ""1116__toPct"";
""1116_withdrawFor"" -> ""1116__withdraw"";
""1116_enableTokenWithdrawals"" -> ""1116_noReentrancy"";
""1116__withdraw"" -> ""1116__applyPct"";
""1116_submitPool"" -> ""1116_noReentrancy"";
""1116_PresalePool"" -> ""1116__toPct"";
""1116_enableTokenWithdrawals"" -> ""1116__applyPct"";
""1116_fallback"" -> ""1116__ethDeposit"";
""1116_closeContributions"" -> ""1116_onlyOwner"";
""1116_reopenContributions"" -> ""1116_onlyOwner"";
}
"
0xc3a684140448995f6abeb361c56110207da04d57.sol,SignalsSociety,"contract SignalsSociety is Ownable, Memberships { event Deposited(address account, uint amount, uint balance, uint timestamp); event MembershipPaid(address account, Membership membership, uint timestamp); mapping (address => uint) public balances; function deposit(address account, uint amount) public { balances[account] += amount; Deposited(account, amount, balances[account], now); }",1,"subgraph cluster_258_SignalsSociety {
label=""SignalsSociety"";
""258_acceptMembership"" [label=""acceptMembership""];
""258_deposit"" [label=""deposit""];
""258_fallback"" [label=""fallback""];
""258_acceptMembership"" -> ""258_getMembershipPrice"";
""258_acceptMembership"" -> ""258_onlyBot"";
""258_fallback"" -> ""258_deposit"";
}
"
0x46580533db92c418a79f91b46df70283daef7f99.sol,MultipleArbitrableTransaction,"contract MultipleArbitrableTransaction is IArbitrable { uint8 constant AMOUNT_OF_CHOICES = 2; uint8 constant SENDER_WINS = 1; uint8 constant RECEIVER_WINS = 2; enum Party {Sender, Receiver}",1,"subgraph cluster_1906_MultipleArbitrableTransaction {
label=""MultipleArbitrableTransaction"";
""1906_timeOutByReceiver"" [label=""timeOutByReceiver""];
""1906_reimburse"" [label=""reimburse""];
""1906_pay"" [label=""pay""];
""1906_getTransactionIDsByAddress"" [label=""getTransactionIDsByAddress""];
""1906_appeal"" [label=""appeal""];
""1906_rule"" [label=""rule""];
""1906_executeRuling"" [label=""executeRuling""];
""1906_timeOutBySender"" [label=""timeOutBySender""];
""1906_payArbitrationFeeByReceiver"" [label=""payArbitrationFeeByReceiver""];
""1906_payArbitrationFeeBySender"" [label=""payArbitrationFeeBySender""];
""1906_createTransaction"" [label=""createTransaction""];
""1906_raiseDispute"" [label=""raiseDispute""];
""1906_executeTransaction"" [label=""executeTransaction""];
""1906_submitEvidence"" [label=""submitEvidence""];
""1906_constructor"" [label=""constructor""];
""1906_getCountTransactions"" [label=""getCountTransactions""];
""1906_payArbitrationFeeByReceiver"" -> ""1906_raiseDispute"";
""1906_timeOutByReceiver"" -> ""1906_executeRuling"";
""1906_rule"" -> ""1906_executeRuling"";
""1906_timeOutBySender"" -> ""1906_executeRuling"";
""1906_payArbitrationFeeBySender"" -> ""1906_raiseDispute"";
}
"
0x881f21d3e2d2d4f48d815f41bea8dbdcf0e24e50.sol,DepositVault,"contract DepositVault { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event TransferOwnership(address indexed from, address indexed to); address Owner; function transferOwnership(address to) onlyOwner { TransferOwnership(Owner, to); Owner = to; }",1,"subgraph cluster_280_DepositVault {
label=""DepositVault"";
""280_transferOwnership"" [label=""transferOwnership""];
""280_Vault"" [label=""Vault""];
""280_deposit"" [label=""deposit""];
""280_withdraw"" [label=""withdraw""];
""280_WithdrawalEnabled"" [label=""WithdrawalEnabled""];
""280_lock"" [label=""lock""];
""280_ReleaseDate"" [label=""ReleaseDate""];
""280_withdrawTo"" [label=""withdrawTo""];
""280_SetReleaseDate"" [label=""SetReleaseDate""];
""280_fallback"" [label=""fallback""];
""280_MinimumDeposit"" [label=""MinimumDeposit""];
""280_withdrawToken"" [label=""withdrawToken""];
""280_Vault"" -> ""280_open"";
""280_transferOwnership"" -> ""280_onlyOwner"";
""280_withdrawTo"" -> ""280_onlyOwner"";
""280_fallback"" -> ""280_deposit"";
""280_Vault"" -> ""280_deposit"";
""280_withdrawTo"" -> ""280_WithdrawalEnabled"";
""280_deposit"" -> ""280_MinimumDeposit"";
""280_withdrawToken"" -> ""280_onlyOwner"";
""280_withdraw"" -> ""280_withdrawTo"";
}
"
0x704079e823e42a936bbaac5163434c2515473836.sol,CONUNDRUM,"contract CONUNDRUM { string public question; address questionSender; bytes32 responseHash; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_CONUNDRUM {
label=""CONUNDRUM"";
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_StopGame"" [label=""StopGame""];
""118_NewQuestion"" [label=""NewQuestion""];
}
"
0x0002325fcaaac6ebf1254a626589147bde1a2394.sol,HorseyPilot,"contract HorseyPilot { using SafeMath for uint256; event NewProposal(uint8 methodId, uint parameter, address proposer); event ProposalPassed(uint8 methodId, uint parameter, address proposer); uint8 constant votingThreshold = 2; uint256 constant proposalLife = 7 days; uint256 constant proposalCooldown = 1 days; uint256 cooldownStart; address public jokerAddress; address public knightAddress; address public paladinAddress; address[3] public voters; uint8 constant public knightEquity = 40; uint8 constant public paladinEquity = 10; address public exchangeAddress; address public tokenAddress; mapping(address => uint) internal _cBalance; struct Proposal{ address proposer; uint256 timestamp; uint256 parameter; uint8 methodId; address[] yay; address[] nay; }",1,"subgraph cluster_3096_HorseyPilot {
label=""HorseyPilot"";
""3096_transferKnightOwnership"" [label=""transferKnightOwnership""];
""3096__updateDistribution"" [label=""_updateDistribution""];
""3096_voteOnProposal"" [label=""voteOnProposal""];
""3096_constructor"" [label=""constructor""];
""3096_withdrawCeo"" [label=""withdrawCeo""];
""3096_transferJokerOwnership"" [label=""transferJokerOwnership""];
""3096_transferPaladinOwnership"" [label=""transferPaladinOwnership""];
""3096_deployChildren"" [label=""deployChildren""];
""3096_syncFunds"" [label=""syncFunds""];
""3096_getNobleBalance"" [label=""getNobleBalance""];
""3096_makeProposal"" [label=""makeProposal""];
""3096__moveBalance"" [label=""_moveBalance""];
""3096__doProposal"" [label=""_doProposal""];
""3096_transferKnightOwnership"" -> ""3096_validAddress"";
""3096_makeProposal"" -> ""3096_proposalAvailable"";
""3096_makeProposal"" -> ""3096_cooledDown"";
""3096_transferPaladinOwnership"" -> ""3096_validAddress"";
""3096_voteOnProposal"" -> ""3096__doProposal"";
""3096_transferJokerOwnership"" -> ""3096_validAddress"";
""3096_withdrawCeo"" -> ""3096_onlyCLevelAccess"";
""3096_getNobleBalance"" -> ""3096_onlyCLevelAccess"";
""3096_voteOnProposal"" -> ""3096_onlyVoters"";
""3096_voteOnProposal"" -> ""3096_notVoted"";
""3096_makeProposal"" -> ""3096_onlyCLevelAccess"";
""3096_withdrawCeo"" -> ""3096_validAddress"";
""3096_transferPaladinOwnership"" -> ""3096__moveBalance"";
""3096_withdrawCeo"" -> ""3096__updateDistribution"";
""3096__moveBalance"" -> ""3096_validAddress"";
""3096_transferJokerOwnership"" -> ""3096__moveBalance"";
""3096_transferKnightOwnership"" -> ""3096__moveBalance"";
""3096_voteOnProposal"" -> ""3096_proposalPending"";
}
"
0xf0344800bd3ffa687e4d780357961b28995a5f46.sol,QUIZ_GAME,contract QUIZ_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_QUIZ_GAME {
label=""QUIZ_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_StartGame"" [label=""StartGame""];
}
"
0x658b3573f8222c2d792ff1199933a88680b12973.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_369_AccessService {
label=""AccessService"";
""369_withdraw"" [label=""withdraw""];
""369_setFinance"" [label=""setFinance""];
""369_setService"" [label=""setService""];
}
"
0xc35d0837d49aa399022e133ba141b85d8809b137.sol,FUS,"contract FUS is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 5; uint256 public constant INITIAL_SUPPLY = 100000000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function FUS() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_FUS {
label=""FUS"";
""706__transfer"" [label=""_transfer""];
""706_FUS"" [label=""FUS""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x013183d8e0a14a843aa3bc170a29f959d9614d28.sol,DetherBank,"contract DetherBank is ERC223ReceivingContract, Ownable, SafeMath { using BytesLib for bytes; event receiveDth(address _from, uint amount); event receiveEth(address _from, uint amount); event sendDth(address _from, uint amount); event sendEth(address _from, uint amount); mapping(address => uint) public dthShopBalance; mapping(address => uint) public dthTellerBalance; mapping(address => uint) public ethShopBalance; mapping(address => uint) public ethTellerBalance; ERC223Basic public dth; bool public isInit = false; function setDth (address _dth) external onlyOwner { require(!isInit); dth = ERC223Basic(_dth); isInit = true; }",1,"subgraph cluster_612_DetherBank {
label=""DetherBank"";
""612_withdrawDthTeller"" [label=""withdrawDthTeller""];
""612_withdrawEth"" [label=""withdrawEth""];
""612_withdrawDthShop"" [label=""withdrawDthShop""];
""612_addEthTeller"" [label=""addEthTeller""];
""612_refundEth"" [label=""refundEth""];
""612_addTokenTeller"" [label=""addTokenTeller""];
""612_getDthShop"" [label=""getDthShop""];
""612_setDth"" [label=""setDth""];
""612_tokenFallback"" [label=""tokenFallback""];
""612_getDthTeller"" [label=""getDthTeller""];
""612_withdrawDthShopAdmin"" [label=""withdrawDthShopAdmin""];
""612_addTokenShop"" [label=""addTokenShop""];
""612_getEthBalTeller"" [label=""getEthBalTeller""];
""612_setDth"" -> ""612_onlyOwner"";
""612_withdrawEth"" -> ""612_onlyOwner"";
""612_refundEth"" -> ""612_onlyOwner"";
""612_withdrawDthShopAdmin"" -> ""612_onlyOwner"";
""612_addEthTeller"" -> ""612_add"";
""612_addTokenShop"" -> ""612_onlyOwner"";
""612_withdrawEth"" -> ""612_sub"";
""612_addTokenTeller"" -> ""612_add"";
""612_addEthTeller"" -> ""612_onlyOwner"";
""612_withdrawDthShop"" -> ""612_onlyOwner"";
""612_withdrawDthTeller"" -> ""612_onlyOwner"";
""612_addTokenShop"" -> ""612_add"";
""612_addTokenTeller"" -> ""612_onlyOwner"";
}
"
0xf27a6b9f1434de2a406ee0a9f94b4d5e89fb2681.sol,TOP,"contract TOP { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_384_TOP {
label=""TOP"";
""384_transferFrom"" [label=""transferFrom""];
""384_burn"" [label=""burn""];
""384_constructor"" [label=""constructor""];
""384_approveAndCall"" [label=""approveAndCall""];
""384_approve"" [label=""approve""];
""384_transfer"" [label=""transfer""];
""384__transfer"" [label=""_transfer""];
""384_burnFrom"" [label=""burnFrom""];
""384_transferFrom"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
""384_transfer"" -> ""384__transfer"";
}
"
0x1ee72092724d17c4667563bac428babfe11f6440.sol,IMAGEWORLD,"contract IMAGEWORLD { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function IMAGEWORLD( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_IMAGEWORLD {
label=""IMAGEWORLD"";
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_approve"" [label=""approve""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_IMAGEWORLD"" [label=""IMAGEWORLD""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0xb60cfc056a3f201ce4f421655d5fcb535b8d7ca5.sol,SimpleBanners,contract SimpleBanners { struct BannerOwnerStruct { address owner; uint balance; uint bidAmountPerDay; bytes32 dataCID; uint timestampTaken; },0,"subgraph cluster_516_SimpleBanners {
label=""SimpleBanners"";
""516_updateBannerContent"" [label=""updateBannerContent""];
""516_rejectBanner"" [label=""rejectBanner""];
""516_constructor"" [label=""constructor""];
""516_getActiveBanners"" [label=""getActiveBanners""];
""516_updateOwner"" [label=""updateOwner""];
""516_takeBanner"" [label=""takeBanner""];
""516_getBannerDetails"" [label=""getBannerDetails""];
""516_getRemainingBalance"" [label=""getRemainingBalance""];
""516_emergencyWithdraw"" [label=""emergencyWithdraw""];
""516_calculateTotalCost"" [label=""calculateTotalCost""];
""516_addFunds"" [label=""addFunds""];
""516_getActiveBanners"" -> ""516_calculateTotalCost"";
""516_takeBanner"" -> ""516_calculateTotalCost"";
""516_addFunds"" -> ""516_calculateTotalCost"";
""516_rejectBanner"" -> ""516_calculateTotalCost"";
""516_getRemainingBalance"" -> ""516_calculateTotalCost"";
}
"
0xde871faadf05a39aa3a871525696ff4c87ecd550.sol,UniversalManager,contract UniversalManager is Ownable { using SafeMath for uint256; uint256 public constant ADDRESS_LIMIT = 300; uint256 public constant TRANSFERS_PER_TRANSACTION = 150; uint256 public airdrop; UniversalCoin public token; uint256 private currentPool = 0; uint256 private index = 0; uint256 private airdropIndex = 0; address[] private participants; address[] private airdropParticipants; function UniversalManager(address uniFoundation) public { token = new UniversalCoin(uniFoundation); airdrop = token.airdropReserve().div(3); },0,"subgraph cluster_924_UniversalManager {
label=""UniversalManager"";
""924_UniversalManager"" [label=""UniversalManager""];
""924_addAirdropParticipants"" [label=""addAirdropParticipants""];
""924_transferAidrop"" [label=""transferAidrop""];
""924_transfer"" [label=""transfer""];
""924_setCurrentWeekPool"" [label=""setCurrentWeekPool""];
""924_addParticipants"" [label=""addParticipants""];
""924_transferAidrop"" -> ""924_onlyOwner"";
""924_transfer"" -> ""924_onlyOwner"";
""924_addAirdropParticipants"" -> ""924_onlyOwner"";
""924_addParticipants"" -> ""924_onlyOwner"";
""924_setCurrentWeekPool"" -> ""924_onlyOwner"";
}
"
0xdb209c97e0de799bbf14e3377307780ddc26be4e.sol,DarkPay,"contract DarkPay is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 365 * 1 days; uint public round1 = now + 364 * 1 days; uint256 public totalSupply = 1000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 16000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0x024bf21EDAd749461Bf2E0830bC1F7b282bcea7C; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1261_DarkPay {
label=""DarkPay"";
""1261_transfer"" [label=""transfer""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_add"" [label=""add""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_burn"" [label=""burn""];
""1261_constructor"" [label=""constructor""];
""1261_distr"" [label=""distr""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_allowance"" [label=""allowance""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_approve"" [label=""approve""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
}
"
0xf238f55ede5120915b36715b0fffe20ff57f8134.sol,BytesToTypes,"contract BytesToTypes { function bytesToAddress(uint _offst, bytes memory _input) internal pure returns (address _output) { assembly { _output := mload(add(_input, _offst)) }",0,"subgraph cluster_1010_BytesToTypes {
label=""BytesToTypes"";
""1010_bytesToInt72"" [label=""bytesToInt72""];
""1010_bytesToInt112"" [label=""bytesToInt112""];
""1010_bytesToInt192"" [label=""bytesToInt192""];
""1010_bytesToUint56"" [label=""bytesToUint56""];
""1010_bytesToInt96"" [label=""bytesToInt96""];
""1010_bytesToInt152"" [label=""bytesToInt152""];
""1010_bytesToUint232"" [label=""bytesToUint232""];
""1010_bytesToBytes32"" [label=""bytesToBytes32""];
""1010_bytesToInt48"" [label=""bytesToInt48""];
""1010_bytesToUint40"" [label=""bytesToUint40""];
""1010_bytesToInt56"" [label=""bytesToInt56""];
""1010_bytesToInt32"" [label=""bytesToInt32""];
""1010_bytesToUint120"" [label=""bytesToUint120""];
""1010_bytesToInt208"" [label=""bytesToInt208""];
""1010_bytesToUint144"" [label=""bytesToUint144""];
""1010_bytesToInt64"" [label=""bytesToInt64""];
""1010_getStringSize"" [label=""getStringSize""];
""1010_bytesToInt104"" [label=""bytesToInt104""];
""1010_bytesToUint208"" [label=""bytesToUint208""];
""1010_bytesToInt8"" [label=""bytesToInt8""];
""1010_bytesToUint112"" [label=""bytesToUint112""];
""1010_bytesToInt224"" [label=""bytesToInt224""];
""1010_bytesToUint240"" [label=""bytesToUint240""];
""1010_bytesToUint64"" [label=""bytesToUint64""];
""1010_bytesToUint24"" [label=""bytesToUint24""];
""1010_bytesToInt128"" [label=""bytesToInt128""];
""1010_bytesToUint128"" [label=""bytesToUint128""];
""1010_bytesToInt24"" [label=""bytesToInt24""];
""1010_bytesToUint136"" [label=""bytesToUint136""];
""1010_bytesToUint192"" [label=""bytesToUint192""];
""1010_bytesToUint88"" [label=""bytesToUint88""];
""1010_bytesToUint216"" [label=""bytesToUint216""];
""1010_bytesToInt168"" [label=""bytesToInt168""];
""1010_bytesToInt200"" [label=""bytesToInt200""];
""1010_bytesToUint224"" [label=""bytesToUint224""];
""1010_bytesToInt248"" [label=""bytesToInt248""];
""1010_bytesToString"" [label=""bytesToString""];
""1010_bytesToInt176"" [label=""bytesToInt176""];
""1010_bytesToInt216"" [label=""bytesToInt216""];
""1010_bytesToUint160"" [label=""bytesToUint160""];
""1010_bytesToInt40"" [label=""bytesToInt40""];
""1010_bytesToUint176"" [label=""bytesToUint176""];
""1010_bytesToInt184"" [label=""bytesToInt184""];
""1010_bytesToInt144"" [label=""bytesToInt144""];
""1010_bytesToInt88"" [label=""bytesToInt88""];
""1010_bytesToUint72"" [label=""bytesToUint72""];
""1010_bytesToBool"" [label=""bytesToBool""];
""1010_bytesToInt120"" [label=""bytesToInt120""];
""1010_bytesToInt160"" [label=""bytesToInt160""];
""1010_bytesToUint16"" [label=""bytesToUint16""];
""1010_bytesToUint152"" [label=""bytesToUint152""];
""1010_bytesToInt80"" [label=""bytesToInt80""];
""1010_bytesToUint184"" [label=""bytesToUint184""];
""1010_bytesToUint48"" [label=""bytesToUint48""];
""1010_bytesToUint96"" [label=""bytesToUint96""];
""1010_bytesToAddress"" [label=""bytesToAddress""];
""1010_bytesToInt240"" [label=""bytesToInt240""];
""1010_bytesToUint104"" [label=""bytesToUint104""];
""1010_bytesToUint80"" [label=""bytesToUint80""];
""1010_bytesToUint168"" [label=""bytesToUint168""];
""1010_bytesToUint200"" [label=""bytesToUint200""];
""1010_bytesToInt232"" [label=""bytesToInt232""];
""1010_bytesToUint248"" [label=""bytesToUint248""];
""1010_bytesToInt16"" [label=""bytesToInt16""];
""1010_bytesToUint32"" [label=""bytesToUint32""];
""1010_bytesToUint256"" [label=""bytesToUint256""];
""1010_bytesToInt136"" [label=""bytesToInt136""];
""1010_bytesToUint8"" [label=""bytesToUint8""];
""1010_bytesToInt256"" [label=""bytesToInt256""];
""1010_slice"" [label=""slice""];
}
"
0x5544138f866b9a76c7c020719a094c530bac72fe.sol,LuckGameToken,"contract LuckGameToken is SafeMath { address public owner; string public name; string public symbol; uint public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); bool lock = false; constructor( uint256 initialSupply, string tokenName, string tokenSymbol, uint decimalUnits ) public { owner = msg.sender; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_618_LuckGameToken {
label=""LuckGameToken"";
""618_approve"" [label=""approve""];
""618_setLock"" [label=""setLock""];
""618_burnFrom"" [label=""burnFrom""];
""618_constructor"" [label=""constructor""];
""618_freezeAccount"" [label=""freezeAccount""];
""618_transferFrom"" [label=""transferFrom""];
""618_transferBatch"" [label=""transferBatch""];
""618_transfer"" [label=""transfer""];
""618__transfer"" [label=""_transfer""];
""618_transferOwnership"" [label=""transferOwnership""];
""618_mintToken"" [label=""mintToken""];
""618_burn"" [label=""burn""];
""618_setLock"" -> ""618_onlyOwner"";
""618_burnFrom"" -> ""618_onlyOwner"";
""618_transfer"" -> ""618__transfer"";
""618__transfer"" -> ""618_isLock"";
""618_freezeAccount"" -> ""618_onlyOwner"";
""618_transferFrom"" -> ""618__transfer"";
""618_burn"" -> ""618_onlyOwner"";
""618_transferBatch"" -> ""618__transfer"";
""618_mintToken"" -> ""618_onlyOwner"";
""618_transferOwnership"" -> ""618_onlyOwner"";
}
"
0x20807701c41f451a7661cb5ea00f3a12b66b818f.sol,Roi20,"contract Roi20 { using SafeMath for uint256; mapping(address => uint256) investments; mapping(address => uint256) joined; mapping(address => uint256) withdrawals; mapping(address => uint256) referrer; string public name = ; string public symbol = ; uint8 constant public decimals = 18; uint256 public step = 20; uint256 public minimum = 10 finney; uint256 public stakingRequirement = 2 ether; address public ownerWallet; address public owner; event Invest(address investor, uint256 amount); event Withdraw(address investor, uint256 amount); event Bounty(address hunter, uint256 amount); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() public { owner = msg.sender; ownerWallet = msg.sender; }",0,"subgraph cluster_455_Roi20 {
label=""Roi20"";
""455_invest"" [label=""invest""];
""455_withdraw"" [label=""withdraw""];
""455_bounty"" [label=""bounty""];
""455_checkReferral"" [label=""checkReferral""];
""455_constructor"" [label=""constructor""];
""455_checkBalance"" [label=""checkBalance""];
""455_fallback"" [label=""fallback""];
""455_checkInvestments"" [label=""checkInvestments""];
""455_checkWithdrawals"" [label=""checkWithdrawals""];
""455_transferOwnership"" [label=""transferOwnership""];
""455_getBalance"" [label=""getBalance""];
""455_bounty"" -> ""455_checkReferral"";
""455_checkBalance"" -> ""455_getBalance"";
""455_invest"" -> ""455_withdraw"";
""455_withdraw"" -> ""455_getBalance"";
""455_fallback"" -> ""455_invest"";
""455_transferOwnership"" -> ""455_onlyOwner"";
}
"
0x1774e30a3daab7bbace3ce4c64ddc6a4f29a975a.sol,XHHM,"contract XHHM is ERC20Interface, Pausable { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function XHHM() public { symbol = ; name = ; decimals = 18; _totalSupply = 900000000 * 10**uint(decimals); balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_725_XHHM {
label=""XHHM"";
""725_totalSupply"" [label=""totalSupply""];
""725_fallback"" [label=""fallback""];
""725_transfer"" [label=""transfer""];
""725_decreaseApproval"" [label=""decreaseApproval""];
""725_allowance"" [label=""allowance""];
""725_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""725_balanceOf"" [label=""balanceOf""];
""725_transferFrom"" [label=""transferFrom""];
""725_XHHM"" [label=""XHHM""];
""725_approve"" [label=""approve""];
""725_increaseApproval"" [label=""increaseApproval""];
""725_approveAndCall"" [label=""approveAndCall""];
""725_transferAnyERC20Token"" -> ""725_onlyOwner"";
""725_transfer"" -> ""725_whenNotPaused"";
""725_approve"" -> ""725_whenNotPaused"";
""725_decreaseApproval"" -> ""725_whenNotPaused"";
""725_increaseApproval"" -> ""725_whenNotPaused"";
""725_approveAndCall"" -> ""725_whenNotPaused"";
""725_transferFrom"" -> ""725_whenNotPaused"";
}
"
0xefa2e92ee2f5f8da00120a8ddec92bad2a5d9b96.sol,OnePieceGold,"contract OnePieceGold { string public symbol = ; string public name = ; uint8 public constant decimals = 18; uint256 _totalSupply = 0; address owner = 0; bool setupDone = false; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; function OnePieceGold(address adr) { owner = adr; }",0,"subgraph cluster_295_OnePieceGold {
label=""OnePieceGold"";
""295_allowance"" [label=""allowance""];
""295_OnePieceGold"" [label=""OnePieceGold""];
""295_SetupToken"" [label=""SetupToken""];
""295_transfer"" [label=""transfer""];
""295_approve"" [label=""approve""];
""295_totalSupply"" [label=""totalSupply""];
""295_transferFrom"" [label=""transferFrom""];
""295_balanceOf"" [label=""balanceOf""];
}
"
0x5b7093fe2491dfb058c94bcd62a1cd4d822f884c.sol,BasicToken,"contract BasicToken is ERC20Basic, Pausable { using SafeMath for uint256; mapping(address => uint256) balances; address[] allParticipants; mapping (address => bool) isParticipated; function transfer(address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); if(!isParticipated[_to]){ allParticipants.push(_to); isParticipated[_to] = true; }",0,"subgraph cluster_397_BasicToken {
label=""BasicToken"";
""397_balanceOf"" [label=""balanceOf""];
""397_transfer"" [label=""transfer""];
""397_getCountPartipants"" [label=""getCountPartipants""];
""397_getParticipantIndexAddress"" [label=""getParticipantIndexAddress""];
}
"
0xf37c4a962e70d813a4d9825942141cd9bc5169fd.sol,ClaimableCrowdsale,"contract ClaimableCrowdsale is Pausable { using SafeMath for uint256; address beneficiaryAddress; address public bankAddress; HoQuToken public token; uint256 public maxTokensAmount; uint256 public issuedTokensAmount = 0; uint256 public minBuyableAmount; uint256 public tokenRate; uint256 endDate; bool public isFinished = false; mapping(address => uint256) public tokens; mapping(address => bool) public approved; mapping(uint32 => address) internal tokenReceivers; uint32 internal receiversCount; event TokenBought(address indexed _buyer, uint256 _tokens, uint256 _amount); event TokenAdded(address indexed _receiver, uint256 _tokens, uint256 _equivalentAmount); event TokenToppedUp(address indexed _receiver, uint256 _tokens, uint256 _equivalentAmount); event TokenSubtracted(address indexed _receiver, uint256 _tokens, uint256 _equivalentAmount); event TokenSent(address indexed _receiver, uint256 _tokens); modifier inProgress() { require (!isFinished); require (issuedTokensAmount < maxTokensAmount); require (now <= endDate); _; }",0,"subgraph cluster_1169_ClaimableCrowdsale {
label=""ClaimableCrowdsale"";
""1169_finish"" [label=""finish""];
""1169_topUp"" [label=""topUp""];
""1169_sub"" [label=""sub""];
""1169_getReceiversCount"" [label=""getReceiversCount""];
""1169_buy"" [label=""buy""];
""1169_claimOne"" [label=""claimOne""];
""1169_fallback"" [label=""fallback""];
""1169_setTokenRate"" [label=""setTokenRate""];
""1169_ClaimableCrowdsale"" [label=""ClaimableCrowdsale""];
""1169_storeTokens"" [label=""storeTokens""];
""1169_claimFor"" [label=""claimFor""];
""1169_approve"" [label=""approve""];
""1169_claim"" [label=""claim""];
""1169_claimAll"" [label=""claimAll""];
""1169_add"" [label=""add""];
""1169_getReceiver"" [label=""getReceiver""];
""1169_add"" -> ""1169_onlyOwner"";
""1169_claim"" -> ""1169_whenNotPaused"";
""1169_setTokenRate"" -> ""1169_onlyOwner"";
""1169_buy"" -> ""1169_inProgress"";
""1169_claimOne"" -> ""1169_whenNotPaused"";
""1169_claimAll"" -> ""1169_whenNotPaused"";
""1169_claimOne"" -> ""1169_claimFor"";
""1169_getReceiver"" -> ""1169_onlyOwner"";
""1169_fallback"" -> ""1169_buy"";
""1169_claimAll"" -> ""1169_claimFor"";
""1169_claimFor"" -> ""1169_whenNotPaused"";
""1169_getReceiversCount"" -> ""1169_onlyOwner"";
""1169_buy"" -> ""1169_storeTokens"";
""1169_storeTokens"" -> ""1169_whenNotPaused"";
""1169_add"" -> ""1169_whenNotPaused"";
""1169_claimOne"" -> ""1169_onlyOwner"";
""1169_approve"" -> ""1169_onlyOwner"";
""1169_finish"" -> ""1169_onlyOwner"";
""1169_sub"" -> ""1169_onlyOwner"";
""1169_add"" -> ""1169_inProgress"";
""1169_topUp"" -> ""1169_storeTokens"";
""1169_claimAll"" -> ""1169_onlyOwner"";
""1169_buy"" -> ""1169_whenNotPaused"";
""1169_claim"" -> ""1169_claimFor"";
""1169_topUp"" -> ""1169_whenNotPaused"";
""1169_approve"" -> ""1169_whenNotPaused"";
""1169_topUp"" -> ""1169_onlyOwner"";
""1169_add"" -> ""1169_storeTokens"";
""1169_sub"" -> ""1169_whenNotPaused"";
}
"
0x0ce95ef378059f38c5fa21e6d81a5895c0d9911b.sol,Game,contract Game { using GlobalTypes for GlobalTypes.Global; using MarketTypes for MarketTypes.MarketListing; using MissionParametersTypes for MissionParametersTypes.MissionParameters; using GameCommon for GameCommon.LaunchRocketStackFrame; address public m_Owner; AbstractDatabase public m_Database; AbstractGameHidden public m_GameHidden; bool public m_Paused; uint256 constant GlobalCategory = 0; uint256 constant RocketCategory = 1; uint256 constant OwnershipCategory = 2; uint256 constant InventoryCategory = 3; uint256 constant MarketCategory = 4; uint256 constant ProfitFundsCategory = 5; uint256 constant CompetitionFundsCategory = 6; uint256 constant MissionParametersCategory = 7; uint256 constant CompetitionScoresCategory = 8; uint256 constant WithdrawalFundsCategory = 9; uint256 constant ReferralCategory = 10; uint256 constant RocketStockCategory = 11; uint256 constant RocketStockInitializedCategory = 12; address constant NullAddress = 0; uint256 constant MaxCompetitionScores = 10; mapping(uint32 => RocketTypes.StockRocket) m_InitialRockets; modifier OnlyOwner() { require(msg.sender == m_Owner); _; },0,"subgraph cluster_4077_GameCommon {
label=""GameCommon"";
""4077_DeserializeRaw1"" [label=""DeserializeRaw1""];
""4077_DeserializeRaw2"" [label=""DeserializeRaw2""];
""4077_SerializeRaw3"" [label=""SerializeRaw3""];
""4077_DeserializeLaunchRocketStackFrame"" [label=""DeserializeLaunchRocketStackFrame""];
""4077_SerializeRaw1"" [label=""SerializeRaw1""];
""4077_SerializeRaw0"" [label=""SerializeRaw0""];
""4077_SerializeLaunchRocketStackFrame"" [label=""SerializeLaunchRocketStackFrame""];
""4077_DeserializeRaw0"" [label=""DeserializeRaw0""];
""4077_SerializeRaw2"" [label=""SerializeRaw2""];
""4077_DeserializeRaw3"" [label=""DeserializeRaw3""];
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw0"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw0"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw3"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw1"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw3"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw2"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw2"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw1"";
}
"
0xe1f2a706155f13b50b5ff79c8ed2bd5e5c4ed817.sol,VexaExchangeToken,"contract VexaExchangeToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 20000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_930_VexaExchangeToken {
label=""VexaExchangeToken"";
""930_approve"" [label=""approve""];
""930_updateTokensPerEth"" [label=""updateTokensPerEth""];
""930_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""930_burn"" [label=""burn""];
""930_transferFrom"" [label=""transferFrom""];
""930_distr"" [label=""distr""];
""930_allowance"" [label=""allowance""];
""930_fallback"" [label=""fallback""];
""930_transfer"" [label=""transfer""];
""930_withdraw"" [label=""withdraw""];
""930_finishDistribution"" [label=""finishDistribution""];
""930_getTokens"" [label=""getTokens""];
""930_doAirdrop"" [label=""doAirdrop""];
""930_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""930_transferOwnership"" [label=""transferOwnership""];
""930_balanceOf"" [label=""balanceOf""];
""930_getTokenBalance"" [label=""getTokenBalance""];
""930_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""930_adminClaimAirdrop"" -> ""930_doAirdrop"";
""930_distr"" -> ""930_canDistr"";
""930_adminClaimAirdropMultiple"" -> ""930_onlyOwner"";
""930_updateTokensPerEth"" -> ""930_onlyOwner"";
""930_transfer"" -> ""930_onlyPayloadSize"";
""930_burn"" -> ""930_onlyOwner"";
""930_getTokens"" -> ""930_distr"";
""930_adminClaimAirdrop"" -> ""930_onlyOwner"";
""930_transferOwnership"" -> ""930_onlyOwner"";
""930_getTokens"" -> ""930_canDistr"";
""930_finishDistribution"" -> ""930_onlyOwner"";
""930_transferFrom"" -> ""930_onlyPayloadSize"";
""930_withdraw"" -> ""930_onlyOwner"";
""930_withdrawAltcoinTokens"" -> ""930_onlyOwner"";
""930_finishDistribution"" -> ""930_canDistr"";
""930_adminClaimAirdropMultiple"" -> ""930_doAirdrop"";
""930_fallback"" -> ""930_getTokens"";
}
"
0x519c03604242bc100655acb62a9d44261275257f.sol,TriggmineCrowdsale,"contract TriggmineCrowdsale is Ownable { using SafeMath for uint256; uint256 public constant SALES_START = 1529938800; uint256 public constant SALES_END = 1538319600; address public constant ASSET_MANAGER_WALLET = 0x7E83f1F82Ab7dDE49F620D2546BfFB0539058414; address public constant ESCROW_WALLET = 0x2e9F22E2D559d9a5ce234AB722bc6e818FA5D079; address public constant TOKEN_ADDRESS = 0x98F319D4dc58315796Ec8F06274fe2d4a5A69721; uint256 public constant TOKEN_CENTS = 1000000000000000000; uint256 public constant TOKEN_PRICE = 0.0001 ether; uint256 public constant USD_HARD_CAP = 15000000; uint256 public constant MIN_INVESTMENT = 25000; uint public constant BONUS_50_100 = 10; uint public constant BONUS_100_250 = 15; uint public constant BONUS_250_500 = 20; uint public constant BONUS_500 = 25; mapping(address => uint256) public investments; uint256 public investedUSD; uint256 public investedETH; uint256 public investedBTC; uint256 public tokensPurchased; uint256 public rate_ETHUSD; uint256 public rate_BTCUSD; address public whitelistSupplier; mapping(address => bool) public whitelist; event ContributedETH(address indexed receiver, uint contribution, uint contributionUSD, uint reward); event ContributedBTC(address indexed receiver, uint contribution, uint contributionUSD, uint reward); event WhitelistUpdated(address indexed participant, bool isWhitelisted); constructor() public { whitelistSupplier = msg.sender; owner = ASSET_MANAGER_WALLET; }",0,"subgraph cluster_1513_TriggmineCrowdsale {
label=""TriggmineCrowdsale"";
""1513_getTokenOwner"" [label=""getTokenOwner""];
""1513_setRate_ETHUSD"" [label=""setRate_ETHUSD""];
""1513_setRate_BTCUSD"" [label=""setRate_BTCUSD""];
""1513_getBonusPercents"" [label=""getBonusPercents""];
""1513_contribute"" [label=""contribute""];
""1513_removeFromWhitelist"" [label=""removeFromWhitelist""];
""1513_fallback"" [label=""fallback""];
""1513_restoreTokenOwnership"" [label=""restoreTokenOwnership""];
""1513_getTotalTokens"" [label=""getTotalTokens""];
""1513_contributeETH"" [label=""contributeETH""];
""1513_constructor"" [label=""constructor""];
""1513_addToWhitelist"" [label=""addToWhitelist""];
""1513_contributeBTC"" [label=""contributeBTC""];
""1513_addToWhitelist"" -> ""1513_onlyWhitelistSupplier"";
""1513_removeFromWhitelist"" -> ""1513_onlyWhitelistSupplier"";
""1513_setRate_BTCUSD"" -> ""1513_onlyWhitelistSupplier"";
""1513_restoreTokenOwnership"" -> ""1513_onlyOwner"";
""1513_setRate_ETHUSD"" -> ""1513_onlyWhitelistSupplier"";
""1513_contributeBTC"" -> ""1513_getTotalTokens"";
""1513_contributeETH"" -> ""1513_getBonusPercents"";
""1513_contributeETH"" -> ""1513_getTotalTokens"";
""1513_contributeBTC"" -> ""1513_getBonusPercents"";
""1513_contribute"" -> ""1513_contributeETH"";
""1513_contributeBTC"" -> ""1513_onlyWhitelistSupplier"";
""1513_fallback"" -> ""1513_contribute"";
}
"
0xf528d0e1e11edee40ca3724bd9fd923bb0235cc3.sol,TGCToken,"contract TGCToken is StandardToken { string public constant NAME = ; string public constant SYMBOL = ; uint public constant DECIMALS = 18; uint8[10] public bonusPercentages = [ 20, 10, 0 ]; uint public constant NUM_OF_PHASE = 3; uint16 public constant BLOCKS_PER_PHASE = 29000; address public target; uint public firstblock = 0; bool public unsoldTokenIssued = false; uint256 public constant GOAL = 3000 ether; uint256 public constant HARD_CAP = 4500 ether; uint256 public constant BASE_RATE = 10000; uint public totalEthReceived = 0; uint public issueIndex = 0; event SaleStarted(); event SaleEnded(); event InvalidCaller(address caller); event InvalidState(bytes msg); event Issue(uint issueIndex, address addr, uint ethAmount, uint tokenAmount); event SaleSucceeded(); event SaleFailed(); modifier onlyOwner { if (target == msg.sender) { _; }",0,"subgraph cluster_878_TGCToken {
label=""TGCToken"";
""878_hardCapReached"" [label=""hardCapReached""];
""878_issueToken"" [label=""issueToken""];
""878_computeTokenAmount"" [label=""computeTokenAmount""];
""878_start"" [label=""start""];
""878_price"" [label=""price""];
""878_TGCToken"" [label=""TGCToken""];
""878_saleEnded"" [label=""saleEnded""];
""878_close"" [label=""close""];
""878_saleStarted"" [label=""saleStarted""];
""878_fallback"" [label=""fallback""];
""878_saleDue"" [label=""saleDue""];
""878_saleEnded"" -> ""878_saleDue"";
""878_start"" -> ""878_onlyOwner"";
""878_issueToken"" -> ""878_inProgress"";
""878_price"" -> ""878_computeTokenAmount"";
""878_saleEnded"" -> ""878_hardCapReached"";
""878_issueToken"" -> ""878_computeTokenAmount"";
""878_start"" -> ""878_beforeStart"";
""878_close"" -> ""878_afterEnd"";
""878_fallback"" -> ""878_issueToken"";
""878_close"" -> ""878_onlyOwner"";
}
"
0x6b7290527ab68d72158cecaef27b0db6238b6fc5.sol,ConunToken,"contract ConunToken is EIP20Interface { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function ConunToken( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",0,"subgraph cluster_290_ConunToken {
label=""ConunToken"";
""290_balanceOf"" [label=""balanceOf""];
""290_ConunToken"" [label=""ConunToken""];
""290_transfer"" [label=""transfer""];
""290_transferFrom"" [label=""transferFrom""];
""290_allowance"" [label=""allowance""];
""290_approve"" [label=""approve""];
}
"
0x514bc174df04a4b04ae2be81ee8c788c3796b06b.sol,DecoBank,contract DecoBank { using SafeMath for uint256; Deco public token; address private crowdsaleWallet; address private decoReserveWallet; uint256 public weiRaised; uint256 public constant totalSupplyUnits = 6*10**26; uint256 private constant MINIMUM_WEI = 10**16; uint256 private constant BASE = 10**18; uint256 public originalRate = 3000; uint256 public crowdsaleDistributedUnits = 0; uint256 public issuerDistributedUnits = 0; uint256 public presaleStartTime; uint256 public presaleEndTime; uint256 private presaleDiscount = 50; uint256 private presalePercentage = 5; uint256 public issuerReservedMaximumPercentage = 5; uint256 public saleStartTime; uint256 public saleEndTime; uint256 private saleDiscount = 25; uint256 public rewardDistributionStart; uint256 public rewardDistributedUnits = 0; mapping(address => Contributor) private contributors; struct Contributor { uint256 contributedWei; uint256 decoUnits; uint256 rewardDistributedDecoUnits; },0,"subgraph cluster_1967_DecoBank {
label=""DecoBank"";
""1967_currentSaleStage"" [label=""currentSaleStage""];
""1967_requestReward"" [label=""requestReward""];
""1967_distibutedDecoUnits"" [label=""distibutedDecoUnits""];
""1967_fallback"" [label=""fallback""];
""1967_shouldEndPresale"" [label=""shouldEndPresale""];
""1967_contributedWei"" [label=""contributedWei""];
""1967_currentRewardReleasePercentageRatePerYear"" [label=""currentRewardReleasePercentageRatePerYear""];
""1967_payableReward"" [label=""payableReward""];
""1967_currentRate"" [label=""currentRate""];
""1967_unitsLimitForCurrentSaleStage"" [label=""unitsLimitForCurrentSaleStage""];
""1967_buyTokens"" [label=""buyTokens""];
""1967_DecoBank"" [label=""DecoBank""];
""1967_circulatingSupply"" [label=""circulatingSupply""];
""1967_sendNotDistributedUnits"" [label=""sendNotDistributedUnits""];
""1967_rewardDistributionEnded"" [label=""rewardDistributionEnded""];
""1967_currentMaximumSalePercentage"" [label=""currentMaximumSalePercentage""];
""1967_totalUnitsLeft"" [label=""totalUnitsLeft""];
""1967_rewardDistribution"" [label=""rewardDistribution""];
""1967_presaleActive"" [label=""presaleActive""];
""1967_maximumIssuerReservedUnits"" [label=""maximumIssuerReservedUnits""];
""1967_rewardDays"" [label=""rewardDays""];
""1967_contributorTotalReward"" [label=""contributorTotalReward""];
""1967_isValidPurchase"" [label=""isValidPurchase""];
""1967_saleStage"" [label=""saleStage""];
""1967_maximumSaleLimitUnits"" [label=""maximumSaleLimitUnits""];
""1967_saleActive"" [label=""saleActive""];
""1967_rewardDaysLeft"" [label=""rewardDaysLeft""];
""1967_rewardDistributionStarted"" [label=""rewardDistributionStarted""];
""1967_unitsForIssuerReserve"" [label=""unitsForIssuerReserve""];
""1967_presaleLimitUnits"" [label=""presaleLimitUnits""];
""1967_sendReward"" [label=""sendReward""];
""1967_rewardPayableDays"" [label=""rewardPayableDays""];
""1967_saleLimitReachedForCurrentStage"" [label=""saleLimitReachedForCurrentStage""];
""1967_contributorDistributedReward"" [label=""contributorDistributedReward""];
""1967_rewardDistributionEnd"" [label=""rewardDistributionEnd""];
""1967_changeRemainingDecoRewardOwner"" [label=""changeRemainingDecoRewardOwner""];
""1967_currentDiscountPercentage"" [label=""currentDiscountPercentage""];
""1967_rewardUnitsRatePerYear"" [label=""rewardUnitsRatePerYear""];
""1967_incrementContributorsCount"" [label=""incrementContributorsCount""];
""1967_currentRewardReleasePercentageRatePerYear"" -> ""1967_rewardUnitsRatePerYear"";
""1967_unitsLimitForCurrentSaleStage"" -> ""1967_currentMaximumSalePercentage"";
""1967_payableReward"" -> ""1967_afterSale"";
""1967_payableReward"" -> ""1967_totalUnitsLeft"";
""1967_rewardDistribution"" -> ""1967_sendReward"";
""1967_presaleActive"" -> ""1967_shouldEndPresale"";
""1967_currentMaximumSalePercentage"" -> ""1967_saleStage"";
""1967_currentSaleStage"" -> ""1967_saleStage"";
""1967_saleLimitReachedForCurrentStage"" -> ""1967_unitsLimitForCurrentSaleStage"";
""1967_buyTokens"" -> ""1967_unitsForIssuerReserve"";
""1967_payableReward"" -> ""1967_rewardDays"";
""1967_fallback"" -> ""1967_validPurchase"";
""1967_requestReward"" -> ""1967_sendNotDistributedUnits"";
""1967_currentRewardReleasePercentageRatePerYear"" -> ""1967_circulatingSupply"";
""1967_buyTokens"" -> ""1967_currentRate"";
""1967_unitsForIssuerReserve"" -> ""1967_maximumIssuerReservedUnits"";
""1967_sendNotDistributedUnits"" -> ""1967_sendReward"";
""1967_payableReward"" -> ""1967_contributorTotalReward"";
""1967_changeRemainingDecoRewardOwner"" -> ""1967_afterSale"";
""1967_fallback"" -> ""1967_buyTokens"";
""1967_rewardDaysLeft"" -> ""1967_rewardDays"";
""1967_rewardPayableDays"" -> ""1967_rewardDays"";
""1967_buyTokens"" -> ""1967_incrementContributorsCount"";
""1967_currentDiscountPercentage"" -> ""1967_presaleActive"";
""1967_payableReward"" -> ""1967_rewardPayableDays"";
""1967_rewardDistributionEnded"" -> ""1967_rewardDistributionEnd"";
""1967_isValidPurchase"" -> ""1967_saleActive"";
""1967_requestReward"" -> ""1967_afterSale"";
""1967_rewardPayableDays"" -> ""1967_rewardDaysLeft"";
""1967_rewardDistribution"" -> ""1967_payableReward"";
""1967_rewardDistributionEnd"" -> ""1967_rewardDays"";
""1967_isValidPurchase"" -> ""1967_presaleActive"";
""1967_currentRewardReleasePercentageRatePerYear"" -> ""1967_afterSale"";
""1967_currentRate"" -> ""1967_currentDiscountPercentage"";
""1967_requestReward"" -> ""1967_rewardDistribution"";
""1967_saleActive"" -> ""1967_saleLimitReachedForCurrentStage"";
""1967_rewardDays"" -> ""1967_rewardUnitsRatePerYear"";
""1967_requestReward"" -> ""1967_rewardDistributionEnded"";
""1967_currentDiscountPercentage"" -> ""1967_saleStage"";
""1967_rewardDaysLeft"" -> ""1967_rewardDistributionEnd"";
""1967_shouldEndPresale"" -> ""1967_presaleLimitUnits"";
""1967_payableReward"" -> ""1967_rewardDaysLeft"";
}
"
0x51bb7917efcad03ec8b1d37251a06cd56b0c4a72.sol,DSRCoin,"contract DSRCoin is SafeMath{ string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Freeze(address indexed from, uint256 value); event Unfreeze(address indexed from, uint256 value); function DSRCoin( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; owner = msg.sender; }",0,"subgraph cluster_642_DSRCoin {
label=""DSRCoin"";
""642_freeze"" [label=""freeze""];
""642_approve"" [label=""approve""];
""642_DSRCoin"" [label=""DSRCoin""];
""642_fallback"" [label=""fallback""];
""642_transfer"" [label=""transfer""];
""642_withdrawEther"" [label=""withdrawEther""];
""642_burn"" [label=""burn""];
""642_unfreeze"" [label=""unfreeze""];
""642_transferFrom"" [label=""transferFrom""];
""642_transferFrom"" -> ""642_safeSub"";
""642_transfer"" -> ""642_safeSub"";
""642_burn"" -> ""642_safeSub"";
""642_freeze"" -> ""642_safeAdd"";
""642_transfer"" -> ""642_safeAdd"";
""642_unfreeze"" -> ""642_safeAdd"";
""642_unfreeze"" -> ""642_safeSub"";
""642_transferFrom"" -> ""642_safeAdd"";
""642_freeze"" -> ""642_safeSub"";
}
"
0x711e3e5ec8fe04361f8db67ed42b51522ee3d0a7.sol,DLC_TOKEN,"contract DLC_TOKEN is IERC20 { using SafeMath for uint256; address private deployer; string public name = ; string public symbol = ; uint8 public constant decimals = 8; uint256 public constant decimalFactor = 10 ** uint256(decimals); uint256 public constant totalSupply = 100000000 * decimalFactor; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); constructor() public { balances[msg.sender] = totalSupply; deployer = msg.sender; emit Transfer(address(0), msg.sender, totalSupply); }",0,"subgraph cluster_556_DLC_TOKEN {
label=""DLC_TOKEN"";
""556_constructor"" [label=""constructor""];
""556_increaseApproval"" [label=""increaseApproval""];
""556_approve"" [label=""approve""];
""556_transferFrom"" [label=""transferFrom""];
""556_decreaseApproval"" [label=""decreaseApproval""];
""556_balanceOf"" [label=""balanceOf""];
""556_allowance"" [label=""allowance""];
""556_transfer"" [label=""transfer""];
}
"
0xcd95fbb2d73bab7f04893253b13e66f28841ab24.sol,GamblicaCoin,"contract GamblicaCoin is ERC20, owned { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 _totalSupply = 0; event Burned(address backer, uint _value); mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; address public crowdsale; function changeCrowdsale(address newCrowdsale) public onlyOwner { crowdsale = newCrowdsale; }",0,"subgraph cluster_502_GamblicaCoin {
label=""GamblicaCoin"";
""502_allowance"" [label=""allowance""];
""502_transfer"" [label=""transfer""];
""502_send"" [label=""send""];
""502_totalSupply"" [label=""totalSupply""];
""502_changeCrowdsale"" [label=""changeCrowdsale""];
""502_burn"" [label=""burn""];
""502_safeSub"" [label=""safeSub""];
""502_balanceOf"" [label=""balanceOf""];
""502_approve"" [label=""approve""];
""502_safeAdd"" [label=""safeAdd""];
""502_transferFrom"" [label=""transferFrom""];
""502_burn"" -> ""502_safeSub"";
""502_burn"" -> ""502_onlyOwnerOrCrowdsale"";
""502_send"" -> ""502_safeAdd"";
""502_changeCrowdsale"" -> ""502_onlyOwner"";
""502_send"" -> ""502_onlyOwnerOrCrowdsale"";
}
"
0x0e1bebe6b75595d3c7fb99550757e310bc2edf2a.sol,LLV_v30_12,contract LLV_v30_12 { address owner ; function LLV_v30_12 () public { owner = msg.sender; },0,"subgraph cluster_566_LLV_v30_12 {
label=""LLV_v30_12"";
""566_Eligibility_Group_1"" [label=""Eligibility_Group_1""];
""566_retrait_3"" [label=""retrait_3""];
""566_retrait_4"" [label=""retrait_4""];
""566_setDepositary_function_control"" [label=""setDepositary_function_control""];
""566_LLV_v30_12"" [label=""LLV_v30_12""];
""566_getID"" [label=""getID""];
""566_getID_control"" [label=""getID_control""];
""566_getDepositary_function"" [label=""getDepositary_function""];
""566_retrait_1"" [label=""retrait_1""];
""566_Eligibility_Group_2"" [label=""Eligibility_Group_2""];
""566_setDepositary_function"" [label=""setDepositary_function""];
""566_getDepositary_function_control"" [label=""getDepositary_function_control""];
""566_Eligibility_Group_4"" [label=""Eligibility_Group_4""];
""566_Eligibility_Group_5"" [label=""Eligibility_Group_5""];
""566_setID_control"" [label=""setID_control""];
""566_retrait_2"" [label=""retrait_2""];
""566_setID"" [label=""setID""];
""566_retrait_5"" [label=""retrait_5""];
""566_setCmd_control"" [label=""setCmd_control""];
""566_getCmd_control"" [label=""getCmd_control""];
""566_getCmd"" [label=""getCmd""];
""566_Eligibility_Group_3"" [label=""Eligibility_Group_3""];
""566_setCmd"" [label=""setCmd""];
""566_Eligibility_Group_4"" -> ""566_onlyOwner"";
""566_Eligibility_Group_2"" -> ""566_onlyOwner"";
""566_setDepositary_function"" -> ""566_onlyOwner"";
""566_setID"" -> ""566_onlyOwner"";
""566_setCmd"" -> ""566_onlyOwner"";
""566_Eligibility_Group_3"" -> ""566_onlyOwner"";
""566_setDepositary_function_control"" -> ""566_onlyOwner"";
""566_Eligibility_Group_5"" -> ""566_onlyOwner"";
""566_setID_control"" -> ""566_onlyOwner"";
""566_setCmd_control"" -> ""566_onlyOwner"";
""566_Eligibility_Group_1"" -> ""566_onlyOwner"";
}
"
0x1dd9dd6a7be0da126abc3987bd904fc33d36e300.sol,ETHDenverStaking,"contract ETHDenverStaking is Ownable, Pausable { using ECRecovery for bytes32; event UserStake(address userUportAddress, address userMetamaskAddress, uint amountStaked); event UserRecoupStake(address userUportAddress, address userMetamaskAddress, uint amountStaked); event debugBytes32(bytes32 _msg); event debugBytes(bytes _msg); event debugString(string _msg); event debugAddress(address _address); address public grantSigner; uint public finishDate; mapping (address => address) public userStakedAddress; mapping (address => uint256) public stakedAmount; constructor(address _grantSigner, uint _finishDate) public { grantSigner = _grantSigner; finishDate = _finishDate; }",0,"subgraph cluster_505_ETHDenverStaking {
label=""ETHDenverStaking"";
""505_recoupStake"" [label=""recoupStake""];
""505_setGrantSigner"" [label=""setGrantSigner""];
""505_stake"" [label=""stake""];
""505_constructor"" [label=""constructor""];
""505_sweepStakes"" [label=""sweepStakes""];
""505_stake"" -> ""505_whenNotPaused"";
""505_recoupStake"" -> ""505_whenNotPaused"";
""505_sweepStakes"" -> ""505_onlyOwner"";
""505_setGrantSigner"" -> ""505_onlyOwner"";
}
"
0x03b0be689f36f383568d0a2486834cc6ceddda50.sol,EtherPyramid_PowH_Revived,"contract EtherPyramid_PowH_Revived { uint256 constant PRECISION = 0x10000000000000000; int constant CRRN = 1; int constant CRRD = 2; int constant LOGC = -0x296ABF784A358468C; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public totalSupply; mapping(address => uint256) public balanceOfOld; mapping(address => mapping(address => uint256)) public allowance; mapping(address => int256) payouts; int256 totalPayouts; uint256 earningsPerShare; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function ethpyramid() public { }",0,"subgraph cluster_987_EtherPyramid_PowH_Revived {
label=""EtherPyramid_PowH_Revived"";
""987_transfer"" [label=""transfer""];
""987_ethpyramid"" [label=""ethpyramid""];
""987_fund"" [label=""fund""];
""987_getTokensForEther"" [label=""getTokensForEther""];
""987_buy"" [label=""buy""];
""987_withdrawOld"" [label=""withdrawOld""];
""987_getEtherForTokens"" [label=""getEtherForTokens""];
""987_fallback"" [label=""fallback""];
""987_transferFrom"" [label=""transferFrom""];
""987_fixedExp"" [label=""fixedExp""];
""987_reserve"" [label=""reserve""];
""987_buyPrice"" [label=""buyPrice""];
""987_sellMyTokensDaddy"" [label=""sellMyTokensDaddy""];
""987_withdraw"" [label=""withdraw""];
""987_fixedLog"" [label=""fixedLog""];
""987_transferTokens"" [label=""transferTokens""];
""987_balance"" [label=""balance""];
""987_sell"" [label=""sell""];
""987_getMeOutOfHere"" [label=""getMeOutOfHere""];
""987_approve"" [label=""approve""];
""987_balanceOf"" [label=""balanceOf""];
""987_dividends"" [label=""dividends""];
""987_sellPrice"" [label=""sellPrice""];
""987_getTokensForEther"" -> ""987_fixedExp"";
""987_getEtherForTokens"" -> ""987_reserve"";
""987_getTokensForEther"" -> ""987_fixedLog"";
""987_getEtherForTokens"" -> ""987_fixedLog"";
""987_getTokensForEther"" -> ""987_reserve"";
""987_buyPrice"" -> ""987_getTokensForEther"";
""987_getMeOutOfHere"" -> ""987_sellMyTokensDaddy"";
""987_withdraw"" -> ""987_dividends"";
""987_buy"" -> ""987_getTokensForEther"";
""987_reserve"" -> ""987_balance"";
""987_transferTokens"" -> ""987_sell"";
""987_fallback"" -> ""987_withdrawOld"";
""987_transfer"" -> ""987_transferTokens"";
""987_transferFrom"" -> ""987_transferTokens"";
""987_sellMyTokensDaddy"" -> ""987_transferTokens"";
""987_getMeOutOfHere"" -> ""987_withdraw"";
""987_fund"" -> ""987_buy"";
""987_sell"" -> ""987_getEtherForTokens"";
""987_sellMyTokensDaddy"" -> ""987_balanceOf"";
""987_fallback"" -> ""987_buy"";
""987_withdrawOld"" -> ""987_dividends"";
""987_buy"" -> ""987_reserve"";
""987_sellPrice"" -> ""987_getEtherForTokens"";
""987_getEtherForTokens"" -> ""987_fixedExp"";
}
"
0xec2e5c8d51fdd54fef83db8300399a3c2e167922.sol,Crowdsale,"contract Crowdsale is Manageable { using SafeMath for uint256; CrowdsaleToken public token; uint256 public startTime; uint256 public endTime ; uint256 public rate; uint256 public constant decimals = 18; uint256 public tokenSaleWeiCap; uint256 public tokenSaleWeiGoal; uint256 public tokenSaleWeiMax; uint256 public tokenSaleWeiMin; address public pool; address public wallet; bool public isFinalized = false; enum State { Created, Active, Closed }",0,"subgraph cluster_2049_CrowdsaleManager {
label=""CrowdsaleManager"";
""2049_CrowdsaleManager"" [label=""CrowdsaleManager""];
""2049_mintToken"" [label=""mintToken""];
""2049_deallocate"" [label=""deallocate""];
""2049_changeTokenManager"" [label=""changeTokenManager""];
""2049_createToken"" [label=""createToken""];
""2049_releaseTokenTransfer"" [label=""releaseTokenTransfer""];
""2049_promotionAllocate"" [label=""promotionAllocate""];
""2049_finalizeSale1"" [label=""finalizeSale1""];
""2049_initSale1"" [label=""initSale1""];
""2049_finalizeSale2"" [label=""finalizeSale2""];
""2049_createSale3"" [label=""createSale3""];
""2049_initSale3"" [label=""initSale3""];
""2049_closeSale2"" [label=""closeSale2""];
""2049_withdrawSale3"" [label=""withdrawSale3""];
""2049_closeSale1"" [label=""closeSale1""];
""2049_changeSaleManager"" [label=""changeSaleManager""];
""2049_withdrawSale2"" [label=""withdrawSale2""];
""2049_createSale1"" [label=""createSale1""];
""2049_initSale2"" [label=""initSale2""];
""2049_closeSale3"" [label=""closeSale3""];
""2049_createSale2"" [label=""createSale2""];
""2049_withdrawSale1"" [label=""withdrawSale1""];
""2049_finalizeSale3"" [label=""finalizeSale3""];
""2049_initSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_changeTokenManager"" -> ""2049_onlyOwner"";
""2049_finalizeSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_deallocate"" -> ""2049_onlyOwner"";
""2049_closeSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_releaseTokenTransfer"" -> ""2049_onlyOwner"";
""2049_closeSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_createToken"" -> ""2049_onlyOwnerOrManager"";
""2049_promotionAllocate"" -> ""2049_onlyOwner"";
""2049_withdrawSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_createSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_changeSaleManager"" -> ""2049_onlyOwner"";
""2049_createSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_withdrawSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_closeSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_createSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_withdrawSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_mintToken"" -> ""2049_onlyOwnerOrManager"";
""2049_initSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_finalizeSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_finalizeSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_initSale1"" -> ""2049_onlyOwnerOrManager"";
}
"
0x2c82c73d5b34aa015989462b2948cd616a37641f.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1249_MiniMeToken {
label=""MiniMeToken"";
""1249_balanceOfAt"" [label=""balanceOfAt""];
""1249_enableTransfers"" [label=""enableTransfers""];
""1249_generateTokens"" [label=""generateTokens""];
""1249_doTransfer"" [label=""doTransfer""];
""1249_destroyTokens"" [label=""destroyTokens""];
""1249_min"" [label=""min""];
""1249_balanceOf"" [label=""balanceOf""];
""1249_createCloneToken"" [label=""createCloneToken""];
""1249_fallback"" [label=""fallback""];
""1249_updateValueAtNow"" [label=""updateValueAtNow""];
""1249_transferFrom"" [label=""transferFrom""];
""1249_totalSupply"" [label=""totalSupply""];
""1249_transfer"" [label=""transfer""];
""1249_allowance"" [label=""allowance""];
""1249_approveAndCall"" [label=""approveAndCall""];
""1249_claimTokens"" [label=""claimTokens""];
""1249_isContract"" [label=""isContract""];
""1249_approve"" [label=""approve""];
""1249_totalSupplyAt"" [label=""totalSupplyAt""];
""1249_MiniMeToken"" [label=""MiniMeToken""];
""1249_getValueAt"" [label=""getValueAt""];
""1249_fallback"" -> ""1249_isContract"";
""1249_doTransfer"" -> ""1249_updateValueAtNow"";
""1249_destroyTokens"" -> ""1249_onlyController"";
""1249_totalSupplyAt"" -> ""1249_getValueAt"";
""1249_balanceOf"" -> ""1249_balanceOfAt"";
""1249_generateTokens"" -> ""1249_balanceOf"";
""1249_transfer"" -> ""1249_doTransfer"";
""1249_transferFrom"" -> ""1249_doTransfer"";
""1249_approve"" -> ""1249_isContract"";
""1249_approveAndCall"" -> ""1249_approve"";
""1249_balanceOfAt"" -> ""1249_getValueAt"";
""1249_destroyTokens"" -> ""1249_balanceOf"";
""1249_doTransfer"" -> ""1249_balanceOfAt"";
""1249_balanceOfAt"" -> ""1249_min"";
""1249_destroyTokens"" -> ""1249_totalSupply"";
""1249_doTransfer"" -> ""1249_isContract"";
""1249_claimTokens"" -> ""1249_onlyController"";
""1249_generateTokens"" -> ""1249_updateValueAtNow"";
""1249_destroyTokens"" -> ""1249_updateValueAtNow"";
""1249_generateTokens"" -> ""1249_totalSupply"";
""1249_totalSupplyAt"" -> ""1249_min"";
""1249_enableTransfers"" -> ""1249_onlyController"";
""1249_totalSupply"" -> ""1249_totalSupplyAt"";
""1249_generateTokens"" -> ""1249_onlyController"";
}
"
0x31bd42a29642e388bcaf57bd020955ef2783725d.sol,PIGT,"contract PIGT is SafeMath { string public constant standard = ; uint8 public constant decimals = 18; string public constant name = ; string public constant symbol = ; uint256 public totalSupply = 0.1 * 10**8 * 10**uint256(decimals); mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function PIGT() public { Transfer(0x00, msg.sender, totalSupply); balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_304_PIGT {
label=""PIGT"";
""304_fallback"" [label=""fallback""];
""304_approve"" [label=""approve""];
""304_PIGT"" [label=""PIGT""];
""304_transferFrom"" [label=""transferFrom""];
""304_transfer"" [label=""transfer""];
""304_transfer"" -> ""304_safeAdd"";
""304_transferFrom"" -> ""304_safeSub"";
""304_transferFrom"" -> ""304_safeAdd"";
""304_transfer"" -> ""304_safeSub"";
}
"
0x20da2ff263e28e8db8ef44f590ff4576bac770e2.sol,MilFold,"contract MilFold is MilFoldInterface,Milevents { using SafeMath for *; uint256 constant private rndMax_ = 90000; uint256 constant private claimMax_ = 43200; address constant private fundAddr_ = 0xB0c7Dc00E8A74c9dEc8688EFb98CcB2e24584E3B; uint256 constant private MIN_ETH_BUYIN = 0.002 ether; uint256 constant private COMMON_REWARD_AMOUNT = 0.01 ether; uint256 constant private CLAIM_WINNER_REWARD_AMOUNT = 1 ether; uint256 constant private MAX_WIN_AMOUNT = 5000 ether; uint256 private rID_; uint256 private lID_; uint256 private lBlockNumber_; bool private activated_; MillionaireInterface constant private millionaire_ = MillionaireInterface(0x98BDbc858822415C626c13267594fbC205182A1F); MilAuthInterface constant private milAuth_ = MilAuthInterface(0xf856f6a413f7756FfaF423aa2101b37E2B3aFFD9); mapping (address => uint256) private playerTickets_; mapping (uint256 => Mildatasets.Round) private round_; mapping (uint256 => mapping(address => uint256[])) private playerTicketNumbers_; mapping (address => uint256) private playerWinTotal_; modifier isActivated() { require(activated_ == true, ); _; }",0,"subgraph cluster_102_MilFoldInterface {
label=""MilFoldInterface"";
""102_activate"" [label=""activate""];
""102_addPot"" [label=""addPot""];
}
"
0x01d5d0108589f3c52fcce6e65503bb6515e66698.sol,DcorpProxy,"contract DcorpProxy is TokenObserver, TransferableOwnership, TokenRetriever { enum Stages { Deploying, Deployed, Executed }",0,"subgraph cluster_1415_DcorpProxy {
label=""DcorpProxy"";
""1415_DcorpProxy"" [label=""DcorpProxy""];
""1415_deploy"" [label=""deploy""];
""1415_getVoteCount"" [label=""getVoteCount""];
""1415_balanceOf"" [label=""balanceOf""];
""1415_vote"" [label=""vote""];
""1415_isExecuted"" [label=""isExecuted""];
""1415_getProposalCount"" [label=""getProposalCount""];
""1415_withdrawDRPU"" [label=""withdrawDRPU""];
""1415_withdrawDRPS"" [label=""withdrawDRPS""];
""1415_isDeployed"" [label=""isDeployed""];
""1415_execute"" [label=""execute""];
""1415_getVotingDuration"" [label=""getVotingDuration""];
""1415__adjustWeight"" [label=""_adjustWeight""];
""1415_isProposed"" [label=""isProposed""];
""1415_getTotalSupply"" [label=""getTotalSupply""];
""1415_getVote"" [label=""getVote""];
""1415_retrieveTokens"" [label=""retrieveTokens""];
""1415_fallback"" [label=""fallback""];
""1415_isSupported"" [label=""isSupported""];
""1415_hasVoted"" [label=""hasVoted""];
""1415_onTokensReceived"" [label=""onTokensReceived""];
""1415_getVotingResult"" [label=""getVotingResult""];
""1415_isDeploying"" [label=""isDeploying""];
""1415_hasBalance"" [label=""hasBalance""];
""1415_propose"" [label=""propose""];
""1415_vote"" -> ""1415_hasVoted"";
""1415_propose"" -> ""1415_only_owner"";
""1415_onTokensReceived"" -> ""1415__adjustWeight"";
""1415_retrieveTokens"" -> ""1415_not_accepted_token"";
""1415_execute"" -> ""1415_only_at_stage"";
""1415_onTokensReceived"" -> ""1415_only_accepted_token"";
""1415_retrieveTokens"" -> ""1415_only_owner"";
""1415_execute"" -> ""1415_only_when_supported"";
""1415_vote"" -> ""1415_only_at_stage"";
""1415_isSupported"" -> ""1415_getVotingResult"";
""1415_onTokensReceived"" -> ""1415_only_at_stage"";
""1415_propose"" -> ""1415_isProposed"";
""1415_withdrawDRPU"" -> ""1415__adjustWeight"";
""1415_hasVoted"" -> ""1415_getVoteCount"";
""1415_withdrawDRPS"" -> ""1415__adjustWeight"";
""1415_vote"" -> ""1415_only_token_holder"";
""1415_propose"" -> ""1415_only_at_stage"";
""1415__adjustWeight"" -> ""1415_hasVoted"";
""1415_execute"" -> ""1415_only_owner"";
""1415_deploy"" -> ""1415_only_owner"";
""1415_execute"" -> ""1415_only_after_voting_period"";
""1415_execute"" -> ""1415_only_proposed"";
""1415_retrieveTokens"" -> ""1415_retrieveTokens"";
""1415_vote"" -> ""1415_only_during_voting_period"";
""1415_isSupported"" -> ""1415_getTotalSupply"";
""1415_fallback"" -> ""1415_only_at_stage"";
""1415_deploy"" -> ""1415_only_at_stage"";
""1415_vote"" -> ""1415_only_proposed"";
""1415_onTokensReceived"" -> ""1415_hasBalance"";
}
"
0x037941d4ed93af8628fb4e9451752db8b2446f76.sol,Snowflake,contract Snowflake is Ownable { using SafeMath for uint; using addressSet for addressSet._addressSet; mapping (string => uint) internal deposits; uint signatureTimeout; mapping (bytes32 => bool) signatureLog; mapping (string => Identity) internal directory; mapping (address => string) internal addressDirectory; mapping (bytes32 => string) internal initiatedAddressClaims; address public clientRaindropAddress; address public hydroTokenAddress; addressSet._addressSet resolverWhitelist; constructor() public { setSignatureTimeout(7200); },0,"subgraph cluster_341_SnowflakeResolver {
label=""SnowflakeResolver"";
""341_onSignUp"" [label=""onSignUp""];
""341_callOnSignUp"" [label=""callOnSignUp""];
""341_callOnRemoval"" [label=""callOnRemoval""];
""341_onRemoval"" [label=""onRemoval""];
}
"
0x6ceb458fac48cf87b420f23b0d890534655683e0.sol,FrostByte,"contract FrostByte is FBT { event tokenBought(uint256 totalTokensBought, uint256 Price); event etherSent(uint256 total); string public name; uint8 public decimals; string public symbol; string public version = ; function FrostByte() { name = ; decimals = 4; symbol = ; pieceprice = 1 ether / 256; datestart = now; }",0,"subgraph cluster_630_FrostByte {
label=""FrostByte"";
""630_approveAndCall"" [label=""approveAndCall""];
""630_feeBank"" [label=""feeBank""];
""630_getPrice"" [label=""getPrice""];
""630_getAddressLevel"" [label=""getAddressLevel""];
""630_sendEther"" [label=""sendEther""];
""630_fallback"" [label=""fallback""];
""630_FrostByte"" [label=""FrostByte""];
""630_sendEther"" -> ""630_refundFees"";
""630_fallback"" -> ""630_getPrice"";
""630_fallback"" -> ""630_getAddressLevel"";
""630_fallback"" -> ""630_refundFees"";
}
"
0x8a18d7e7bcb1dc4db0f71aee2421a3d9af53f93f.sol,BFX,"contract BFX is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BFX() public { symbol = ; name = ; decimals = 18; _totalSupply = 10000000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_550_BFX {
label=""BFX"";
""550_totalSupply"" [label=""totalSupply""];
""550_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""550_balanceOf"" [label=""balanceOf""];
""550_BFX"" [label=""BFX""];
""550_approve"" [label=""approve""];
""550_transferFrom"" [label=""transferFrom""];
""550_approveAndCall"" [label=""approveAndCall""];
""550_transfer"" [label=""transfer""];
""550_allowance"" [label=""allowance""];
""550_fallback"" [label=""fallback""];
""550_transferAnyERC20Token"" -> ""550_onlyOwner"";
}
"
0xdd850d1d845a444a13e9516317a0a57075d9cf8e.sol,FOMOWINNER,"contract FOMOWINNER is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",0,"subgraph cluster_642_FOMOWINNER {
label=""FOMOWINNER"";
""642_mintToken"" [label=""mintToken""];
""642_setPrices"" [label=""setPrices""];
""642_freezeAccount"" [label=""freezeAccount""];
""642__transfer"" [label=""_transfer""];
""642_buy"" [label=""buy""];
""642_constructor"" [label=""constructor""];
""642_sell"" [label=""sell""];
""642_setPrices"" -> ""642_onlyOwner"";
""642_constructor"" -> ""642_constructor"";
""642_mintToken"" -> ""642_onlyOwner"";
""642_freezeAccount"" -> ""642_onlyOwner"";
""642_sell"" -> ""642__transfer"";
""642_buy"" -> ""642__transfer"";
}
"
0xc0a1f89bbcaddab4b736e786b6b16c67bc92ed35.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1152_MiniMeToken {
label=""MiniMeToken"";
""1152_destroyTokens"" [label=""destroyTokens""];
""1152_totalSupplyAt"" [label=""totalSupplyAt""];
""1152_MiniMeToken"" [label=""MiniMeToken""];
""1152_claimTokens"" [label=""claimTokens""];
""1152_controller"" [label=""controller""];
""1152_createCloneToken"" [label=""createCloneToken""];
""1152_generateTokens"" [label=""generateTokens""];
""1152_allowance"" [label=""allowance""];
""1152_balanceOf"" [label=""balanceOf""];
""1152_min"" [label=""min""];
""1152_balanceOfAt"" [label=""balanceOfAt""];
""1152_fallback"" [label=""fallback""];
""1152_updateValueAtNow"" [label=""updateValueAtNow""];
""1152_transferFrom"" [label=""transferFrom""];
""1152_totalSupply"" [label=""totalSupply""];
""1152_getValueAt"" [label=""getValueAt""];
""1152_doTransfer"" [label=""doTransfer""];
""1152_transfer"" [label=""transfer""];
""1152_isContract"" [label=""isContract""];
""1152_enableTransfers"" [label=""enableTransfers""];
""1152_approveAndCall"" [label=""approveAndCall""];
""1152_approve"" [label=""approve""];
""1152_transferFrom"" -> ""1152_doTransfer"";
""1152_doTransfer"" -> ""1152_isContract"";
""1152_destroyTokens"" -> ""1152_updateValueAtNow"";
""1152_generateTokens"" -> ""1152_onlyController"";
""1152_totalSupply"" -> ""1152_totalSupplyAt"";
""1152_balanceOfAt"" -> ""1152_min"";
""1152_doTransfer"" -> ""1152_balanceOfAt"";
""1152_totalSupplyAt"" -> ""1152_min"";
""1152_generateTokens"" -> ""1152_balanceOf"";
""1152_enableTransfers"" -> ""1152_onlyController"";
""1152_generateTokens"" -> ""1152_updateValueAtNow"";
""1152_destroyTokens"" -> ""1152_balanceOf"";
""1152_destroyTokens"" -> ""1152_getValueAt"";
""1152_fallback"" -> ""1152_isContract"";
""1152_destroyTokens"" -> ""1152_onlyController"";
""1152_balanceOfAt"" -> ""1152_getValueAt"";
""1152_totalSupplyAt"" -> ""1152_getValueAt"";
""1152_doTransfer"" -> ""1152_updateValueAtNow"";
""1152_transfer"" -> ""1152_doTransfer"";
""1152_claimTokens"" -> ""1152_onlyController"";
""1152_approve"" -> ""1152_isContract"";
""1152_balanceOf"" -> ""1152_balanceOfAt"";
""1152_approveAndCall"" -> ""1152_approve"";
""1152_generateTokens"" -> ""1152_getValueAt"";
}
"
0x708a64eba17df26cd7085c494b725160ba1a6b7d.sol,MultiSigWallet,"contract MultiSigWallet { uint constant public MAX_OWNER_COUNT = 50; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping(uint => Transaction) public transactions; mapping(uint => mapping(address => bool)) public confirmations; mapping(address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",0,"subgraph cluster_1740_MultiSigWallet {
label=""MultiSigWallet"";
""1740_revokeConfirmation"" [label=""revokeConfirmation""];
""1740_constructor"" [label=""constructor""];
""1740_removeOwner"" [label=""removeOwner""];
""1740_getTransactionIds"" [label=""getTransactionIds""];
""1740_getConfirmationCount"" [label=""getConfirmationCount""];
""1740_replaceOwner"" [label=""replaceOwner""];
""1740_fallback"" [label=""fallback""];
""1740_isConfirmed"" [label=""isConfirmed""];
""1740_addTransaction"" [label=""addTransaction""];
""1740_submitTransaction"" [label=""submitTransaction""];
""1740_getConfirmations"" [label=""getConfirmations""];
""1740_executeTransaction"" [label=""executeTransaction""];
""1740_addOwner"" [label=""addOwner""];
""1740_getTransactionCount"" [label=""getTransactionCount""];
""1740_getOwners"" [label=""getOwners""];
""1740_changeRequirement"" [label=""changeRequirement""];
""1740_confirmTransaction"" [label=""confirmTransaction""];
""1740_submitTransaction"" -> ""1740_addTransaction"";
""1740_replaceOwner"" -> ""1740_onlyWallet"";
""1740_executeTransaction"" -> ""1740_isConfirmed"";
""1740_addOwner"" -> ""1740_notNull"";
""1740_addOwner"" -> ""1740_onlyWallet"";
""1740_revokeConfirmation"" -> ""1740_confirmed"";
""1740_confirmTransaction"" -> ""1740_ownerExists"";
""1740_executeTransaction"" -> ""1740_notExecuted"";
""1740_constructor"" -> ""1740_validRequirement"";
""1740_changeRequirement"" -> ""1740_validRequirement"";
""1740_confirmTransaction"" -> ""1740_executeTransaction"";
""1740_removeOwner"" -> ""1740_ownerExists"";
""1740_replaceOwner"" -> ""1740_ownerDoesNotExist"";
""1740_addOwner"" -> ""1740_ownerDoesNotExist"";
""1740_replaceOwner"" -> ""1740_ownerExists"";
""1740_confirmTransaction"" -> ""1740_notConfirmed"";
""1740_confirmTransaction"" -> ""1740_transactionExists"";
""1740_changeRequirement"" -> ""1740_onlyWallet"";
""1740_submitTransaction"" -> ""1740_confirmTransaction"";
""1740_removeOwner"" -> ""1740_changeRequirement"";
""1740_addOwner"" -> ""1740_validRequirement"";
""1740_revokeConfirmation"" -> ""1740_ownerExists"";
""1740_removeOwner"" -> ""1740_onlyWallet"";
""1740_executeTransaction"" -> ""1740_ownerExists"";
""1740_addTransaction"" -> ""1740_notNull"";
""1740_revokeConfirmation"" -> ""1740_notExecuted"";
""1740_executeTransaction"" -> ""1740_confirmed"";
}
"
0xe310fe78974df2c7df6262208582bf7e04cdc18e.sol,Solitaire3D,contract Solitaire3D is modularLong { using SafeMath for *; using S3DKeysCalcLong for uint256; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 30 seconds; uint256 private rndGap_ = 30 seconds; uint256 constant private rndInit_ = 24 hours; uint256 constant private rndInc_ = 60 seconds; uint256 constant private rndMax_ = 24 hours; address constant private developer = 0xA7759a5CAcE1a3b54E872879Cf3942C5D4ff5897; address constant private operator = 0xc3F465FD001f78DCEeF6f47FD18E3B04F95f2337; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (uint256 => S3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => S3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => S3Ddatasets.Round) public round_; uint256 public pID_; S3Ddatasets.TeamFee public fee_; constructor() public { fee_ = S3Ddatasets.TeamFee(50); plyr_[1].addr = 0xA7759a5CAcE1a3b54E872879Cf3942C5D4ff5897; pIDxAddr_[0xA7759a5CAcE1a3b54E872879Cf3942C5D4ff5897] = 1; pID_ = 1; },0,"subgraph cluster_2105_Solitaire3D {
label=""Solitaire3D"";
""2105_distributeExternal"" [label=""distributeExternal""];
""2105_activate"" [label=""activate""];
""2105_withdrawEarnings"" [label=""withdrawEarnings""];
""2105_endTx"" [label=""endTx""];
""2105_constructor"" [label=""constructor""];
""2105_getBuyPrice"" [label=""getBuyPrice""];
""2105_fallback"" [label=""fallback""];
""2105_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""2105_determinePID"" [label=""determinePID""];
""2105_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""2105_managePlayer"" [label=""managePlayer""];
""2105_iWantXKeys"" [label=""iWantXKeys""];
""2105_withdraw"" [label=""withdraw""];
""2105_updateGenVault"" [label=""updateGenVault""];
""2105_updateTimer"" [label=""updateTimer""];
""2105_distributeInternal"" [label=""distributeInternal""];
""2105_updateMasks"" [label=""updateMasks""];
""2105_buyCore"" [label=""buyCore""];
""2105_endRound"" [label=""endRound""];
""2105_core"" [label=""core""];
""2105_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""2105_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""2105_getTimeLeft"" [label=""getTimeLeft""];
""2105_getPlayerVaults"" [label=""getPlayerVaults""];
""2105_calcKeysReceived"" [label=""calcKeysReceived""];
""2105_withdraw"" -> ""2105_isHuman"";
""2105_getPlayerVaults"" -> ""2105_calcUnMaskedEarnings"";
""2105_managePlayer"" -> ""2105_updateGenVault"";
""2105_getPlayerVaults"" -> ""2105_getPlayerVaultsHelper"";
""2105_core"" -> ""2105_managePlayer"";
""2105_core"" -> ""2105_distributeInternal"";
""2105_getPlayerInfoByAddress"" -> ""2105_calcUnMaskedEarnings"";
""2105_fallback"" -> ""2105_determinePID"";
""2105_fallback"" -> ""2105_withdraw"";
""2105_fallback"" -> ""2105_isActivated"";
""2105_core"" -> ""2105_updateTimer"";
""2105_buyCore"" -> ""2105_endRound"";
""2105_core"" -> ""2105_endTx"";
""2105_buyCore"" -> ""2105_core"";
""2105_fallback"" -> ""2105_isWithinLimits"";
""2105_updateGenVault"" -> ""2105_calcUnMaskedEarnings"";
""2105_core"" -> ""2105_distributeExternal"";
""2105_withdraw"" -> ""2105_endRound"";
""2105_withdrawEarnings"" -> ""2105_updateGenVault"";
""2105_fallback"" -> ""2105_buyCore"";
""2105_fallback"" -> ""2105_isHuman"";
""2105_withdraw"" -> ""2105_isActivated"";
""2105_distributeInternal"" -> ""2105_updateMasks"";
""2105_withdraw"" -> ""2105_withdrawEarnings"";
}
"
0xf3c8ed6c721774c022c530e813a369dfe78a6e85.sol,CryptoSprites,contract CryptoSprites is ERC721 { address public owner; address KittyCoreAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d; address SaleClockAuctionAddress = 0xb1690C08E213a35Ed9bAb7B318DE14420FB57d8C; address charityAddress = 0xb30cb3b3E03A508Db2A0a3e07BA1297b47bb0fb1; uint public etherForOwner; uint public etherForCharity; uint public ownerCut = 15; uint public charityCut = 15; uint public featurePrice = 10**16; uint public priceMultiplier = 1; uint public priceDivider = 10; modifier onlyOwner { require(msg.sender == owner); _; },0,"subgraph cluster_1695_CryptoSprites {
label=""CryptoSprites"";
""1695_symbol"" [label=""symbol""];
""1695_featureSprite"" [label=""featureSprite""];
""1695_takeOwnership"" [label=""takeOwnership""];
""1695_withdraw"" [label=""withdraw""];
""1695_disapprove"" [label=""disapprove""];
""1695_supportsInterface"" [label=""supportsInterface""];
""1695_allowance"" [label=""allowance""];
""1695_transferFrom"" [label=""transferFrom""];
""1695_listSpriteForSale"" [label=""listSpriteForSale""];
""1695_buySprite"" [label=""buySprite""];
""1695_name"" [label=""name""];
""1695_changeOwner"" [label=""changeOwner""];
""1695_totalSupply"" [label=""totalSupply""];
""1695_approve"" [label=""approve""];
""1695_adjustFeaturePrice"" [label=""adjustFeaturePrice""];
""1695_transfer"" [label=""transfer""];
""1695_featuredSpritesLength"" [label=""featuredSpritesLength""];
""1695_lookupKitty"" [label=""lookupKitty""];
""1695_lookupKittyDetails2"" [label=""lookupKittyDetails2""];
""1695_lookupAllSprites"" [label=""lookupAllSprites""];
""1695_lookupFeaturedSprites"" [label=""lookupFeaturedSprites""];
""1695_lookupSprite"" [label=""lookupSprite""];
""1695_removeSpriteFromSale"" [label=""removeSpriteFromSale""];
""1695_adjustDefaultSpritePrice"" [label=""adjustDefaultSpritePrice""];
""1695_balanceOf"" [label=""balanceOf""];
""1695_lookupKittyDetails1"" [label=""lookupKittyDetails1""];
""1695_adjustCut"" [label=""adjustCut""];
""1695_fallback"" [label=""fallback""];
""1695_ownerOf"" [label=""ownerOf""];
""1695_calculatePrice"" [label=""calculatePrice""];
""1695_CryptoSprites"" [label=""CryptoSprites""];
""1695_usersSpriteOwningHistory"" [label=""usersSpriteOwningHistory""];
""1695_adjustCut"" -> ""1695_onlyOwner"";
""1695_changeOwner"" -> ""1695_onlyOwner"";
""1695_adjustFeaturePrice"" -> ""1695_onlyOwner"";
""1695_adjustDefaultSpritePrice"" -> ""1695_onlyOwner"";
""1695_withdraw"" -> ""1695_onlyOwner"";
}
"
0x30d5f039375a1c6977b32225ad8c9a409d5dd31f.sol,DSValue,"contract DSValue is DSThing { bool has; bytes32 val; function peek() constant returns (bytes32, bool) { return (val,has); }",0,"subgraph cluster_840_DSValue {
label=""DSValue"";
""840_poke"" [label=""poke""];
""840_read"" [label=""read""];
""840_peek"" [label=""peek""];
""840_void"" [label=""void""];
""840_read"" -> ""840_assert"";
""840_poke"" -> ""840_auth"";
""840_poke"" -> ""840_note"";
""840_read"" -> ""840_peek"";
""840_void"" -> ""840_auth"";
""840_void"" -> ""840_note"";
}
"
0x378965e2a5d31f6f5fd029c1fc456caacb6d04b2.sol,ApplicationQualityCoin,"contract ApplicationQualityCoin { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 100000000000 * 10 ** uint256(decimals); mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function ApplicationQualityCoin() public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_216_ApplicationQualityCoin {
label=""ApplicationQualityCoin"";
""216__transfer"" [label=""_transfer""];
""216_ApplicationQualityCoin"" [label=""ApplicationQualityCoin""];
""216_approve"" [label=""approve""];
""216_transfer"" [label=""transfer""];
""216_transferFrom"" [label=""transferFrom""];
""216_transfer"" -> ""216__transfer"";
""216_transferFrom"" -> ""216__transfer"";
}
"
0x4b3b99e956588b54f5841f2fb7c63721e6c7c392.sol,CHOAM,contract CHOAM is Ownable { using SafeMath for uint256; uint256 public constant PLANET_PRICE = 100000000000000000; uint256 public constant FEE_RANGE = 29000000000000000; uint256 public constant FEE_MIN = 5000000000000000; uint256 public constant FEE_SILO = 10000000000000000; uint256 public constant TIMER_STEP = 120; uint256 public constant PAGE_SIZE = 25; address public master; bool public inited = false; uint256 public koef = 1; bool private create_flag = false; uint256 public silo; address public silo_addr = address(0); uint256 public silo_timer = now; struct Player { uint256 balance; uint256 position; uint8 state; uint256 discount; uint256[] planets; },0,"subgraph cluster_1740_CHOAM {
label=""CHOAM"";
""1740_sell_spice_melange"" [label=""sell_spice_melange""];
""1740_get_planet_info"" [label=""get_planet_info""];
""1740_buy_spice_melange"" [label=""buy_spice_melange""];
""1740_fallback"" [label=""fallback""];
""1740_buy_planet"" [label=""buy_planet""];
""1740_get_info"" [label=""get_info""];
""1740_get_len"" [label=""get_len""];
""1740_insert"" [label=""insert""];
""1740_init"" [label=""init""];
""1740_set_koef"" [label=""set_koef""];
""1740_get_planet_price"" [label=""get_planet_price""];
""1740_move"" [label=""move""];
""1740_get_player_state"" [label=""get_player_state""];
""1740_create_planet"" [label=""create_planet""];
""1740_step"" [label=""step""];
""1740_set_master"" [label=""set_master""];
""1740_get_owner_planets"" [label=""get_owner_planets""];
""1740_constructor"" [label=""constructor""];
""1740_set_koef"" -> ""1740_onlyOwner"";
""1740_init"" -> ""1740_onlyOwner"";
""1740_init"" -> ""1740_create_planet"";
""1740_fallback"" -> ""1740_buy_spice_melange"";
""1740_buy_planet"" -> ""1740_create_planet"";
""1740_create_planet"" -> ""1740_insert"";
""1740_set_master"" -> ""1740_onlyOwner"";
}
"
0xda80ac02ab9c269b879363cac98ef53fde90cb23.sol,PBC,"contract PBC is ERC20,Ownable{ using SafeMath for uint256; string public constant name=; string public symbol=; string public constant version = ; uint256 public constant decimals = 18; uint256 public totalSupply; uint256 public constant MAX_SUPPLY=uint256(1000000000)*uint256(10)**decimals; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event GetETH(address indexed _from, uint256 _value); function PBC(){ totalSupply=MAX_SUPPLY; balances[msg.sender] = MAX_SUPPLY; Transfer(0x0, msg.sender, MAX_SUPPLY); }",0,"subgraph cluster_559_PBC {
label=""PBC"";
""559_balanceOf"" [label=""balanceOf""];
""559_transfer"" [label=""transfer""];
""559_etherProceeds"" [label=""etherProceeds""];
""559_allowance"" [label=""allowance""];
""559_PBC"" [label=""PBC""];
""559_transferFrom"" [label=""transferFrom""];
""559_fallback"" [label=""fallback""];
""559_approve"" [label=""approve""];
""559_etherProceeds"" -> ""559_onlyOwner"";
}
"
0xec8e410316bd8d45cf660fdfd1fbd9eeafe9ed6c.sol,MonsterCore,"contract MonsterCore is MonsterMinting { address public newContractAddress; function MonsterCore() public { paused = false; ceoAddress = msg.sender; cooAddress = msg.sender; cfoAddress = msg.sender; _createMonster(0, 0, 0, uint256(-1), address(0)); }",0,"subgraph cluster_7966_MonsterCore {
label=""MonsterCore"";
""7966_fallback"" [label=""fallback""];
""7966_unpause"" [label=""unpause""];
""7966_getMonster"" [label=""getMonster""];
""7966_MonsterCore"" [label=""MonsterCore""];
""7966_withdrawBalance"" [label=""withdrawBalance""];
""7966_setNewAddress"" [label=""setNewAddress""];
""7966_unpause"" -> ""7966_onlyCEO"";
""7966_setNewAddress"" -> ""7966_onlyCEO"";
""7966_withdrawBalance"" -> ""7966_onlyCFO"";
""7966_unpause"" -> ""7966_whenPaused"";
""7966_unpause"" -> ""7966_unpause"";
""7966_setNewAddress"" -> ""7966_whenPaused"";
""7966_MonsterCore"" -> ""7966__createMonster"";
}
"
0x5122a789a1b9779f840bebaaf73d36ff735c5874.sol,ParcoExchange,"contract ParcoExchange is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 10000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_930_ParcoExchange {
label=""ParcoExchange"";
""930_finishDistribution"" [label=""finishDistribution""];
""930_getTokens"" [label=""getTokens""];
""930_burn"" [label=""burn""];
""930_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""930_transfer"" [label=""transfer""];
""930_distr"" [label=""distr""];
""930_getTokenBalance"" [label=""getTokenBalance""];
""930_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""930_balanceOf"" [label=""balanceOf""];
""930_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""930_transferOwnership"" [label=""transferOwnership""];
""930_updateTokensPerEth"" [label=""updateTokensPerEth""];
""930_transferFrom"" [label=""transferFrom""];
""930_doAirdrop"" [label=""doAirdrop""];
""930_allowance"" [label=""allowance""];
""930_fallback"" [label=""fallback""];
""930_withdraw"" [label=""withdraw""];
""930_approve"" [label=""approve""];
""930_adminClaimAirdrop"" -> ""930_onlyOwner"";
""930_transfer"" -> ""930_onlyPayloadSize"";
""930_getTokens"" -> ""930_distr"";
""930_burn"" -> ""930_onlyOwner"";
""930_adminClaimAirdropMultiple"" -> ""930_doAirdrop"";
""930_transferFrom"" -> ""930_onlyPayloadSize"";
""930_withdrawAltcoinTokens"" -> ""930_onlyOwner"";
""930_adminClaimAirdrop"" -> ""930_doAirdrop"";
""930_distr"" -> ""930_canDistr"";
""930_fallback"" -> ""930_getTokens"";
""930_getTokens"" -> ""930_canDistr"";
""930_transferOwnership"" -> ""930_onlyOwner"";
""930_withdraw"" -> ""930_onlyOwner"";
""930_adminClaimAirdropMultiple"" -> ""930_onlyOwner"";
""930_updateTokensPerEth"" -> ""930_onlyOwner"";
""930_finishDistribution"" -> ""930_onlyOwner"";
""930_finishDistribution"" -> ""930_canDistr"";
}
"
0x55dd6348b0f97ba5417cc3c3d9d98c36e14b7d44.sol,Tablow,"contract Tablow is ERC223Token { string public symbol = ; string public name = ; uint8 public constant decimals = 18; uint256 _totalSupply = 0; uint256 _MaxDistribPublicSupply = 0; uint256 _OwnerDistribSupply = 0; uint256 _CurrentDistribPublicSupply = 0; uint256 _FreeTokens = 0; uint256 _Multiplier1 = 2; uint256 _Multiplier2 = 3; uint256 _LimitMultiplier1 = 4e15; uint256 _LimitMultiplier2 = 8e15; uint256 _HighDonateLimit = 5e16; uint256 _BonusTokensPerETHdonated = 0; address _DistribFundsReceiverAddress = 0; address _remainingTokensReceiverAddress = 0; address owner = 0; bool setupDone = false; bool IsDistribRunning = false; bool DistribStarted = false; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed _owner, uint256 _value); mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; mapping(address => bool) public Claimed; modifier onlyOwner() { require(msg.sender == owner); _; }",0,"subgraph cluster_1358_Tablow {
label=""Tablow"";
""1358_allowance"" [label=""allowance""];
""1358_fallback"" [label=""fallback""];
""1358_SetupDone"" [label=""SetupDone""];
""1358_totalSupply"" [label=""totalSupply""];
""1358_approve"" [label=""approve""];
""1358_DistribFundsReceiverAddress"" [label=""DistribFundsReceiverAddress""];
""1358_distributeAmounts"" [label=""distributeAmounts""];
""1358_SetBonus"" [label=""SetBonus""];
""1358_BurnTokens"" [label=""BurnTokens""];
""1358_transferFrom"" [label=""transferFrom""];
""1358_Tablow"" [label=""Tablow""];
""1358_IsDistribStarted"" [label=""IsDistribStarted""];
""1358_MaxDistribPublicSupply_"" [label=""MaxDistribPublicSupply_""];
""1358_CurrentDistribPublicSupply_"" [label=""CurrentDistribPublicSupply_""];
""1358_Owner"" [label=""Owner""];
""1358_SetupMultipliers"" [label=""SetupMultipliers""];
""1358_StopDistrib"" [label=""StopDistrib""];
""1358_SetFreeTokens"" [label=""SetFreeTokens""];
""1358_StartDistrib"" [label=""StartDistrib""];
""1358_balanceOf"" [label=""balanceOf""];
""1358_RemainingTokensReceiverAddress"" [label=""RemainingTokensReceiverAddress""];
""1358_OwnerDistribSupply_"" [label=""OwnerDistribSupply_""];
""1358_SetupToken"" [label=""SetupToken""];
""1358_distribution"" [label=""distribution""];
""1358_IsDistribRunningFalg_"" [label=""IsDistribRunningFalg_""];
""1358_SetupMultipliers"" -> ""1358_onlyOwner"";
""1358_distribution"" -> ""1358_onlyOwner"";
""1358_SetBonus"" -> ""1358_onlyOwner"";
""1358_distributeAmounts"" -> ""1358_onlyOwner"";
""1358_SetFreeTokens"" -> ""1358_onlyOwner"";
}
"
0x6efca3bae1d10fca39a184175e03db5065d2fa60.sol,ShitCloneFarmer,contract ShitCloneFarmer { uint256 public TIME_TO_MAKE_1_SHITCLONE = 86400; uint256 public STARTING_SHITCLONE = 100; uint256 PSN = 10000; uint256 PSNH = 5000; bool public initialized = true; address public ShitCloneslordAddress; uint256 public ShitCloneslordReq = 500000; mapping (address => uint256) public ballShitClone; mapping (address => uint256) public claimedTime; mapping (address => uint256) public lastEvent; mapping (address => address) public referrals; uint256 public marketTime; function ShitCloneFarmer() public { ShitCloneslordAddress = msg.sender; },0,"subgraph cluster_610_ShitCloneFarmer {
label=""ShitCloneFarmer"";
""610_getFreeShitClone"" [label=""getFreeShitClone""];
""610_ShitCloneFarmer"" [label=""ShitCloneFarmer""];
""610_calculateTrade"" [label=""calculateTrade""];
""610_getMyShitClone"" [label=""getMyShitClone""];
""610_calculateCellBuySimple"" [label=""calculateCellBuySimple""];
""610_makeShitClone"" [label=""makeShitClone""];
""610_getMyTime"" [label=""getMyTime""];
""610_sellShitClones"" [label=""sellShitClones""];
""610_buyShitClones"" [label=""buyShitClones""];
""610_seedMarket"" [label=""seedMarket""];
""610_calculateCellBuy"" [label=""calculateCellBuy""];
""610_devFee"" [label=""devFee""];
""610_becomeShitClonelord"" [label=""becomeShitClonelord""];
""610_getShitClonelordReq"" [label=""getShitClonelordReq""];
""610_min"" [label=""min""];
""610_calculateCellSell"" [label=""calculateCellSell""];
""610_getBalance"" [label=""getBalance""];
""610_getTimeSinceLastEvent"" [label=""getTimeSinceLastEvent""];
""610_sellShitClones"" -> ""610_calculateCellSell"";
""610_calculateCellSell"" -> ""610_calculateTrade"";
""610_makeShitClone"" -> ""610_getMyTime"";
""610_buyShitClones"" -> ""610_devFee"";
""610_buyShitClones"" -> ""610_calculateCellBuy"";
""610_sellShitClones"" -> ""610_getMyTime"";
""610_calculateCellBuy"" -> ""610_calculateTrade"";
""610_sellShitClones"" -> ""610_devFee"";
""610_getTimeSinceLastEvent"" -> ""610_min"";
""610_calculateCellBuySimple"" -> ""610_calculateCellBuy"";
""610_getMyTime"" -> ""610_getTimeSinceLastEvent"";
}
"
0x6ff4b0b74174ad873ffbe8916487eb044c0ccc89.sol,HuToken,"contract HuToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 625; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",0,"subgraph cluster_849_HuToken {
label=""HuToken"";
""849_setMigrateContract"" [label=""setMigrateContract""];
""849_startFunding"" [label=""startFunding""];
""849_increaseSupply"" [label=""increaseSupply""];
""849_allocateToken"" [label=""allocateToken""];
""849_stopFunding"" [label=""stopFunding""];
""849_formatDecimals"" [label=""formatDecimals""];
""849_fallback"" [label=""fallback""];
""849_HuToken"" [label=""HuToken""];
""849_migrate"" [label=""migrate""];
""849_transferETH"" [label=""transferETH""];
""849_decreaseSupply"" [label=""decreaseSupply""];
""849_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""849_changeOwner"" [label=""changeOwner""];
""849_decreaseSupply"" -> ""849_isOwner"";
""849_setMigrateContract"" -> ""849_isOwner"";
""849_decreaseSupply"" -> ""849_safeSubtract"";
""849_allocateToken"" -> ""849_safeMult"";
""849_allocateToken"" -> ""849_formatDecimals"";
""849_stopFunding"" -> ""849_isOwner"";
""849_transferETH"" -> ""849_isOwner"";
""849_startFunding"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_safeAdd"";
""849_setTokenExchangeRate"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_isOwner"";
""849_decreaseSupply"" -> ""849_formatDecimals"";
""849_HuToken"" -> ""849_formatDecimals"";
""849_changeOwner"" -> ""849_isOwner"";
""849_migrate"" -> ""849_safeAdd"";
""849_fallback"" -> ""849_safeAdd"";
""849_allocateToken"" -> ""849_safeAdd"";
""849_fallback"" -> ""849_safeMult"";
}
"
0xf0862d3ec27dce65803c9e2979f9d4d8bdd2f45f.sol,KMAToken,"contract KMAToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 625; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",0,"subgraph cluster_817_KMAToken {
label=""KMAToken"";
""817_fallback"" [label=""fallback""];
""817_stopFunding"" [label=""stopFunding""];
""817_decreaseSupply"" [label=""decreaseSupply""];
""817_startFunding"" [label=""startFunding""];
""817_allocateToken"" [label=""allocateToken""];
""817_setMigrateContract"" [label=""setMigrateContract""];
""817_formatDecimals"" [label=""formatDecimals""];
""817_changeOwner"" [label=""changeOwner""];
""817_migrate"" [label=""migrate""];
""817_transferETH"" [label=""transferETH""];
""817_KMAToken"" [label=""KMAToken""];
""817_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""817_allocateToken"" -> ""817_safeAdd"";
""817_setTokenExchangeRate"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_formatDecimals"";
""817_allocateToken"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_isOwner"";
""817_fallback"" -> ""817_safeMult"";
""817_stopFunding"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_formatDecimals"";
""817_allocateToken"" -> ""817_safeMult"";
""817_KMAToken"" -> ""817_formatDecimals"";
""817_startFunding"" -> ""817_isOwner"";
""817_setMigrateContract"" -> ""817_isOwner"";
""817_transferETH"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_safeSubtract"";
""817_migrate"" -> ""817_safeAdd"";
""817_changeOwner"" -> ""817_isOwner"";
""817_fallback"" -> ""817_safeAdd"";
}
"
0x36234385514de7eb14b2fb5125774e874a88f9ce.sol,titanToken,"contract titanToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function titanToken() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 4 weeks; endDate = now + 8 weeks; }",0,"subgraph cluster_609_titanToken {
label=""titanToken"";
""609_fallback"" [label=""fallback""];
""609_titanToken"" [label=""titanToken""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_transferFrom"" [label=""transferFrom""];
""609_allowance"" [label=""allowance""];
""609_approve"" [label=""approve""];
""609_balanceOf"" [label=""balanceOf""];
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_transfer"" [label=""transfer""];
""609_totalSupply"" [label=""totalSupply""];
""609_transfer"" -> ""609_safeAdd"";
""609_transfer"" -> ""609_safeSub"";
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_transferFrom"" -> ""609_safeSub"";
""609_fallback"" -> ""609_safeAdd"";
}
"
0xf48d72e5a2419c0c6f5822854b7bb7bf135d1623.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",0,"subgraph cluster_335_RefundVault {
label=""RefundVault"";
""335_enableRefunds"" [label=""enableRefunds""];
""335_deposit"" [label=""deposit""];
""335_refund"" [label=""refund""];
""335_walletWithdraw"" [label=""walletWithdraw""];
""335_close"" [label=""close""];
""335_RefundVault"" [label=""RefundVault""];
""335_walletWithdraw"" -> ""335_onlyOwner"";
""335_deposit"" -> ""335_onlyOwner"";
""335_enableRefunds"" -> ""335_onlyOwner"";
""335_close"" -> ""335_onlyOwner"";
}
"
0x293ed09bfc80b93cdf5a64306aaedcfad3c64955.sol,Halo3DShrimpFarmer,contract Halo3DShrimpFarmer is AcceptsHalo3D { uint256 public EGGS_TO_HATCH_1SHRIMP=86400; uint256 public STARTING_SHRIMP=300; uint256 PSN=10000; uint256 PSNH=5000; bool public initialized=false; address public ceoAddress; mapping (address => uint256) public hatcheryShrimp; mapping (address => uint256) public claimedEggs; mapping (address => uint256) public lastHatch; mapping (address => address) public referrals; uint256 public marketEggs; function Halo3DShrimpFarmer(address _baseContract) AcceptsHalo3D(_baseContract) public{ ceoAddress=msg.sender; },0,"subgraph cluster_662_Halo3DShrimpFarmer {
label=""Halo3DShrimpFarmer"";
""662_devFee"" [label=""devFee""];
""662_getMyShrimp"" [label=""getMyShrimp""];
""662_hatchEggs"" [label=""hatchEggs""];
""662_calculateEggSell"" [label=""calculateEggSell""];
""662_tokenFallback"" [label=""tokenFallback""];
""662_Halo3DShrimpFarmer"" [label=""Halo3DShrimpFarmer""];
""662_fallback"" [label=""fallback""];
""662_sellEggs"" [label=""sellEggs""];
""662_min"" [label=""min""];
""662_calculateTrade"" [label=""calculateTrade""];
""662_reinvest"" [label=""reinvest""];
""662_calculateEggBuy"" [label=""calculateEggBuy""];
""662_getBalance"" [label=""getBalance""];
""662_getContractDividends"" [label=""getContractDividends""];
""662__isContract"" [label=""_isContract""];
""662_calculateEggBuySimple"" [label=""calculateEggBuySimple""];
""662_seedMarket"" [label=""seedMarket""];
""662_getMyEggs"" [label=""getMyEggs""];
""662_getEggsSinceLastHatch"" [label=""getEggsSinceLastHatch""];
""662_getEggsSinceLastHatch"" -> ""662_min"";
""662_sellEggs"" -> ""662_getMyEggs"";
""662_tokenFallback"" -> ""662_devFee"";
""662_getMyEggs"" -> ""662_getEggsSinceLastHatch"";
""662_calculateEggBuySimple"" -> ""662_calculateEggBuy"";
""662_tokenFallback"" -> ""662_onlyTokenContract"";
""662_sellEggs"" -> ""662_calculateEggSell"";
""662_calculateEggBuy"" -> ""662_calculateTrade"";
""662_tokenFallback"" -> ""662_reinvest"";
""662_tokenFallback"" -> ""662__isContract"";
""662_Halo3DShrimpFarmer"" -> ""662_AcceptsHalo3D"";
""662_sellEggs"" -> ""662_devFee"";
""662_sellEggs"" -> ""662_reinvest"";
""662_hatchEggs"" -> ""662_getMyEggs"";
""662_calculateEggSell"" -> ""662_calculateTrade"";
""662_tokenFallback"" -> ""662_calculateEggBuy"";
}
"
0xedc1a631d4c3d0f554da14a4bce630f6cbc30a68.sol,NitroPlatformToken,"contract NitroPlatformToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 1100000000000000000; balances[0xA7D54F408719660Dcdbfa95CcA578227489ba215] = _totalSupply; emit Transfer(address(0), 0xA7D54F408719660Dcdbfa95CcA578227489ba215, _totalSupply); }",0,"subgraph cluster_543_NitroPlatformToken {
label=""NitroPlatformToken"";
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_constructor"" [label=""constructor""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x511724936c6f550be63e940ebdd4800f095ea12c.sol,cryptowars,contract cryptowars { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_3213_cryptowars {
label=""cryptowars"";
""3213_setSymbol"" [label=""setSymbol""];
""3213_setContractActive"" [label=""setContractActive""];
""3213_ethereumToTokens_"" [label=""ethereumToTokens_""];
""3213_myCardDividends"" [label=""myCardDividends""];
""3213_setInv1"" [label=""setInv1""];
""3213_buyCard"" [label=""buyCard""];
""3213_transfer"" [label=""transfer""];
""3213_setAllowReferral"" [label=""setAllowReferral""];
""3213_dividendsOf"" [label=""dividendsOf""];
""3213_distributeYield"" [label=""distributeYield""];
""3213_sqrt"" [label=""sqrt""];
""3213_buy"" [label=""buy""];
""3213_setHalfLifeTime"" [label=""setHalfLifeTime""];
""3213_extCheckHalfLife"" [label=""extCheckHalfLife""];
""3213_setName"" [label=""setName""];
""3213_sellPrice"" [label=""sellPrice""];
""3213_setMaxCards"" [label=""setMaxCards""];
""3213_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""3213_getCardPrice"" [label=""getCardPrice""];
""3213_tokensToEthereum_"" [label=""tokensToEthereum_""];
""3213_buyPrice"" [label=""buyPrice""];
""3213_setAdministrator"" [label=""setAdministrator""];
""3213_setFeeRates"" [label=""setFeeRates""];
""3213_reinvest"" [label=""reinvest""];
""3213_addAmbassador"" [label=""addAmbassador""];
""3213_totalEthereumBalance"" [label=""totalEthereumBalance""];
""3213_cryptowars"" [label=""cryptowars""];
""3213_setStakingRequirement"" [label=""setStakingRequirement""];
""3213_setHalfLifeRate"" [label=""setHalfLifeRate""];
""3213_setAllowHalfLife"" [label=""setAllowHalfLife""];
""3213_fallback"" [label=""fallback""];
""3213_disableInitialStage"" [label=""disableInitialStage""];
""3213_gettotalCardDivs"" [label=""gettotalCardDivs""];
""3213_getNextAvailableCard"" [label=""getNextAvailableCard""];
""3213_setCardActive"" [label=""setCardActive""];
""3213_checkHalfLife"" [label=""checkHalfLife""];
""3213_withdraw"" [label=""withdraw""];
""3213_balanceOf"" [label=""balanceOf""];
""3213_distributeInsurance"" [label=""distributeInsurance""];
""3213_totalSupply"" [label=""totalSupply""];
""3213_myDividends"" [label=""myDividends""];
""3213_sell"" [label=""sell""];
""3213_setInv3"" [label=""setInv3""];
""3213_getTotalCardValue"" [label=""getTotalCardValue""];
""3213_getCardOwner"" [label=""getCardOwner""];
""3213_addNewCard"" [label=""addNewCard""];
""3213_exit"" [label=""exit""];
""3213_getCardInsurance"" [label=""getCardInsurance""];
""3213_calculateTokensReceived"" [label=""calculateTokensReceived""];
""3213_setInv2"" [label=""setInv2""];
""3213_purchaseTokens"" [label=""purchaseTokens""];
""3213_myTokens"" [label=""myTokens""];
""3213_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""3213_distributeYield"" -> ""3213_checkHalfLife"";
""3213_transfer"" -> ""3213_onlyBagholders"";
""3213_setFeeRates"" -> ""3213_onlyAdministrator"";
""3213_buyCard"" -> ""3213_onlyCardActive"";
""3213_calculateTokensReceived"" -> ""3213_ethereumToTokens_"";
""3213_ethereumToTokens_"" -> ""3213_sqrt"";
""3213_setHalfLifeTime"" -> ""3213_onlyAdministrator"";
""3213_addNewCard"" -> ""3213_onlyAdministrator"";
""3213_calculateEthereumReceived"" -> ""3213_tokensToEthereum_"";
""3213_purchaseTokens"" -> ""3213_distributeInsurance"";
""3213_checkHalfLife"" -> ""3213_getTotalCardValue"";
""3213_setSymbol"" -> ""3213_onlyAdministrator"";
""3213_purchaseTokens"" -> ""3213_checkHalfLife"";
""3213_extCheckHalfLife"" -> ""3213_checkHalfLife"";
""3213_setHalfLifeRate"" -> ""3213_onlyAdministrator"";
""3213_sell"" -> ""3213_checkHalfLife"";
""3213_transfer"" -> ""3213_tokensToEthereum_"";
""3213_disableInitialStage"" -> ""3213_onlyAdministrator"";
""3213_setMaxCards"" -> ""3213_onlyAdministrator"";
""3213_reinvest"" -> ""3213_purchaseTokens"";
""3213_exit"" -> ""3213_withdraw"";
""3213_purchaseTokens"" -> ""3213_onlyActive"";
""3213_setAllowHalfLife"" -> ""3213_onlyAdministrator"";
""3213_buyPrice"" -> ""3213_tokensToEthereum_"";
""3213_myDividends"" -> ""3213_dividendsOf"";
""3213_setInv1"" -> ""3213_onlyAdministrator"";
""3213_withdraw"" -> ""3213_myDividends"";
""3213_buyCard"" -> ""3213_checkHalfLife"";
""3213_sellPrice"" -> ""3213_tokensToEthereum_"";
""3213_cryptowars"" -> ""3213_getTotalCardValue"";
""3213_purchaseTokens"" -> ""3213_antiEarlyWhale"";
""3213_setAdministrator"" -> ""3213_onlyAdministrator"";
""3213_fallback"" -> ""3213_purchaseTokens"";
""3213_distributeYield"" -> ""3213_getTotalCardValue"";
""3213_setAllowReferral"" -> ""3213_onlyAdministrator"";
""3213_sell"" -> ""3213_onlyBagholders"";
""3213_exit"" -> ""3213_sell"";
""3213_setContractActive"" -> ""3213_onlyAdministrator"";
""3213_buyCard"" -> ""3213_getTotalCardValue"";
""3213_transfer"" -> ""3213_myDividends"";
""3213_setCardActive"" -> ""3213_onlyAdministrator"";
""3213_buyCard"" -> ""3213_distributeInsurance"";
""3213_setInv3"" -> ""3213_onlyAdministrator"";
""3213_addNewCard"" -> ""3213_getTotalCardValue"";
""3213_setStakingRequirement"" -> ""3213_onlyAdministrator"";
""3213_addAmbassador"" -> ""3213_onlyAdministrator"";
""3213_myTokens"" -> ""3213_balanceOf"";
""3213_setName"" -> ""3213_onlyAdministrator"";
""3213_setInv2"" -> ""3213_onlyAdministrator"";
""3213_reinvest"" -> ""3213_onlyStronghands"";
""3213_buyCard"" -> ""3213_distributeYield"";
""3213_purchaseTokens"" -> ""3213_ethereumToTokens_"";
""3213_buy"" -> ""3213_purchaseTokens"";
""3213_withdraw"" -> ""3213_onlyStronghands"";
""3213_sell"" -> ""3213_tokensToEthereum_"";
""3213_reinvest"" -> ""3213_myDividends"";
""3213_transfer"" -> ""3213_withdraw"";
}
"
0xf3e70642c28f3f707408c56624c2f30ea9f9fce3.sol,BasicToken,"contract BasicToken is ERC20Basic, Ownable { using SafeMath for uint256; mapping (address => bool) public staff; mapping (address => uint256) balances; uint256 totalSupply_; mapping (address => uint256) public uniqueTokens; mapping (address => uint256) public preSaleTokens; mapping (address => uint256) public crowdSaleTokens; mapping (address => uint256) public freezeTokens; mapping (address => uint256) public freezeTimeBlock; uint256 public launchTime = 999999999999999999999999999999; uint256 public totalFreezeTokens = 0; bool public listing = false; bool public freezing = true; address public agentAddress; function totalSupply() public view returns (uint256) { return totalSupply_; }",0,"subgraph cluster_625_BasicToken {
label=""BasicToken"";
""625_checkVestingWithFrozen"" [label=""checkVestingWithFrozen""];
""625_totalSupply"" [label=""totalSupply""];
""625_transfer"" [label=""transfer""];
""625_checkVesting"" [label=""checkVesting""];
""625_balanceOf"" [label=""balanceOf""];
""625_transfer"" -> ""625_afterListing"";
""625_checkVestingWithFrozen"" -> ""625_checkVesting"";
""625_transfer"" -> ""625_checkVestingWithFrozen"";
""625_balanceOf"" -> ""625_checkVestingWithFrozen"";
}
"
0x55cb02fa505aafa776fd73464c535600bd90ec77.sol,ZX_GAME,contract ZX_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },0,"subgraph cluster_148_ZX_GAME {
label=""ZX_GAME"";
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_New"" [label=""New""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0xca7b9121bd8fb33dce0706ba99b063242a6cf8ac.sol,Rubik,"contract Rubik { event Submission(address submitter, uint8[] moves); event NewLeader(address submitter, uint8[] moves); enum Color {Red, Blue, Yellow, Green, White, Orange}",0,"subgraph cluster_2442_Rubik {
label=""Rubik"";
""2442_trySolution"" [label=""trySolution""];
""2442_getCurrentWinner"" [label=""getCurrentWinner""];
""2442_shuffleRight"" [label=""shuffleRight""];
""2442_claim"" [label=""claim""];
""2442_getCurrentWinnerMoveCount"" [label=""getCurrentWinnerMoveCount""];
""2442_Rubik"" [label=""Rubik""];
""2442_getBalance"" [label=""getBalance""];
""2442_shuffleFront"" [label=""shuffleFront""];
""2442_shuffleUp"" [label=""shuffleUp""];
""2442_isSolved"" [label=""isSolved""];
""2442_addBalance"" [label=""addBalance""];
""2442_shuffleDown"" [label=""shuffleDown""];
""2442_getOwner"" [label=""getOwner""];
""2442_submitSolution"" [label=""submitSolution""];
""2442_getInitialState"" [label=""getInitialState""];
""2442_getContestEndTime"" [label=""getContestEndTime""];
""2442_verifySide"" [label=""verifySide""];
""2442_shuffleLeft"" [label=""shuffleLeft""];
""2442_shuffleFace"" [label=""shuffleFace""];
""2442_trySolution"" -> ""2442_shuffleRight"";
""2442_shuffleLeft"" -> ""2442_shuffleFace"";
""2442_shuffleFront"" -> ""2442_shuffleFace"";
""2442_submitSolution"" -> ""2442_isSolved"";
""2442_shuffleUp"" -> ""2442_shuffleFace"";
""2442_submitSolution"" -> ""2442_trySolution"";
""2442_trySolution"" -> ""2442_shuffleDown"";
""2442_isSolved"" -> ""2442_verifySide"";
""2442_trySolution"" -> ""2442_shuffleLeft"";
""2442_shuffleDown"" -> ""2442_shuffleFace"";
""2442_trySolution"" -> ""2442_shuffleUp"";
""2442_shuffleRight"" -> ""2442_shuffleFace"";
""2442_trySolution"" -> ""2442_shuffleFront"";
}
"
0x6a33c2c807124eae26f6188877c15675d3889ca3.sol,TUNEZ,contract TUNEZ is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; function TUNEZ() { balances[msg.sender] = 2400000000000000000000000000; totalSupply = 2400000000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 1000000; fundsWallet = msg.sender; },0,"subgraph cluster_492_TUNEZ {
label=""TUNEZ"";
""492_batchTransfer"" [label=""batchTransfer""];
""492_approveAndCall"" [label=""approveAndCall""];
""492_batchTransferSingleValue"" [label=""batchTransferSingleValue""];
""492_TUNEZ"" [label=""TUNEZ""];
""492_fallback"" [label=""fallback""];
""492_batchTransfer"" -> ""492_transfer"";
""492_batchTransferSingleValue"" -> ""492_transfer"";
}
"
0x55dd6348b0f97ba5417cc3c3d9d98c36e14b7d44.sol,Tablow,"contract Tablow is ERC223Token { string public symbol = ; string public name = ; uint8 public constant decimals = 18; uint256 _totalSupply = 0; uint256 _MaxDistribPublicSupply = 0; uint256 _OwnerDistribSupply = 0; uint256 _CurrentDistribPublicSupply = 0; uint256 _FreeTokens = 0; uint256 _Multiplier1 = 2; uint256 _Multiplier2 = 3; uint256 _LimitMultiplier1 = 4e15; uint256 _LimitMultiplier2 = 8e15; uint256 _HighDonateLimit = 5e16; uint256 _BonusTokensPerETHdonated = 0; address _DistribFundsReceiverAddress = 0; address _remainingTokensReceiverAddress = 0; address owner = 0; bool setupDone = false; bool IsDistribRunning = false; bool DistribStarted = false; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed _owner, uint256 _value); mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; mapping(address => bool) public Claimed; modifier onlyOwner() { require(msg.sender == owner); _; }",0,"subgraph cluster_1358_Tablow {
label=""Tablow"";
""1358_allowance"" [label=""allowance""];
""1358_fallback"" [label=""fallback""];
""1358_SetupDone"" [label=""SetupDone""];
""1358_totalSupply"" [label=""totalSupply""];
""1358_approve"" [label=""approve""];
""1358_DistribFundsReceiverAddress"" [label=""DistribFundsReceiverAddress""];
""1358_distributeAmounts"" [label=""distributeAmounts""];
""1358_SetBonus"" [label=""SetBonus""];
""1358_BurnTokens"" [label=""BurnTokens""];
""1358_transferFrom"" [label=""transferFrom""];
""1358_Tablow"" [label=""Tablow""];
""1358_IsDistribStarted"" [label=""IsDistribStarted""];
""1358_MaxDistribPublicSupply_"" [label=""MaxDistribPublicSupply_""];
""1358_CurrentDistribPublicSupply_"" [label=""CurrentDistribPublicSupply_""];
""1358_Owner"" [label=""Owner""];
""1358_SetupMultipliers"" [label=""SetupMultipliers""];
""1358_StopDistrib"" [label=""StopDistrib""];
""1358_SetFreeTokens"" [label=""SetFreeTokens""];
""1358_StartDistrib"" [label=""StartDistrib""];
""1358_balanceOf"" [label=""balanceOf""];
""1358_RemainingTokensReceiverAddress"" [label=""RemainingTokensReceiverAddress""];
""1358_OwnerDistribSupply_"" [label=""OwnerDistribSupply_""];
""1358_SetupToken"" [label=""SetupToken""];
""1358_distribution"" [label=""distribution""];
""1358_IsDistribRunningFalg_"" [label=""IsDistribRunningFalg_""];
""1358_SetupMultipliers"" -> ""1358_onlyOwner"";
""1358_distribution"" -> ""1358_onlyOwner"";
""1358_SetBonus"" -> ""1358_onlyOwner"";
""1358_distributeAmounts"" -> ""1358_onlyOwner"";
""1358_SetFreeTokens"" -> ""1358_onlyOwner"";
}
"
0xed231a75b03c2cd388ee26d4f74abf88cb683e8c.sol,SafeDecimalMath,"contract SafeDecimalMath { uint8 public constant decimals = 18; uint public constant UNIT = 10 ** uint(decimals); function addIsSafe(uint x, uint y) pure internal returns (bool) { return x + y >= y; }",0,"subgraph cluster_301_SafeDecimalMath {
label=""SafeDecimalMath"";
""301_subIsSafe"" [label=""subIsSafe""];
""301_max"" [label=""max""];
""301_min"" [label=""min""];
""301_mulIsSafe"" [label=""mulIsSafe""];
""301_intToDec"" [label=""intToDec""];
""301_safeMul_dec"" [label=""safeMul_dec""];
""301_safeAdd"" [label=""safeAdd""];
""301_safeMul"" [label=""safeMul""];
""301_addIsSafe"" [label=""addIsSafe""];
""301_safeDiv_dec"" [label=""safeDiv_dec""];
""301_safeDiv"" [label=""safeDiv""];
""301_safeSub"" [label=""safeSub""];
""301_divIsSafe"" [label=""divIsSafe""];
""301_safeDiv_dec"" -> ""301_safeDiv"";
""301_safeMul_dec"" -> ""301_safeMul"";
""301_intToDec"" -> ""301_safeMul"";
""301_safeDiv_dec"" -> ""301_safeMul"";
}
"
0x0346a0c18fd1beaafe564616c02743bb8ef042c5.sol,EasyCircle,contract EasyCircle { using SafeMath for uint256; string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 _totalSupply = 777777777 * 10 ** uint256(decimals); address public owner; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; constructor() EasyCircle() public { owner = msg.sender; balances[owner] = _totalSupply; },0,"subgraph cluster_298_EasyCircle {
label=""EasyCircle"";
""298_getMyBalance"" [label=""getMyBalance""];
""298_totalSupply"" [label=""totalSupply""];
""298_transferFrom"" [label=""transferFrom""];
""298_allowance"" [label=""allowance""];
""298_approve"" [label=""approve""];
""298_constructor"" [label=""constructor""];
""298_transfer"" [label=""transfer""];
""298_balanceOf"" [label=""balanceOf""];
""298_constructor"" -> ""298_constructor"";
}
"
0x6c6d6e2971a85d3d3a1353ee15a08fb7c819ed8b.sol,Experiment,contract Experiment { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1694_Experiment {
label=""Experiment"";
""1694_sqrt"" [label=""sqrt""];
""1694_reinvest"" [label=""reinvest""];
""1694_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1694_setStakingRequirement"" [label=""setStakingRequirement""];
""1694_purchaseInternal"" [label=""purchaseInternal""];
""1694_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1694_exit"" [label=""exit""];
""1694_sellPrice"" [label=""sellPrice""];
""1694_fallback"" [label=""fallback""];
""1694_setSymbol"" [label=""setSymbol""];
""1694_buyPrice"" [label=""buyPrice""];
""1694_isContract"" [label=""isContract""];
""1694_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1694_etherToSendFund"" [label=""etherToSendFund""];
""1694_myDividends"" [label=""myDividends""];
""1694_Experiment"" [label=""Experiment""];
""1694_sell"" [label=""sell""];
""1694_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1694_buy"" [label=""buy""];
""1694_balanceOf"" [label=""balanceOf""];
""1694_withdraw"" [label=""withdraw""];
""1694_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1694_myTokens"" [label=""myTokens""];
""1694_transfer"" [label=""transfer""];
""1694_setCanAcceptTokens"" [label=""setCanAcceptTokens""];
""1694_setAdministrator"" [label=""setAdministrator""];
""1694_transferAndCall"" [label=""transferAndCall""];
""1694_purchaseTokens"" [label=""purchaseTokens""];
""1694_totalSupply"" [label=""totalSupply""];
""1694_dividendsOf"" [label=""dividendsOf""];
""1694_setName"" [label=""setName""];
""1694_payFund"" [label=""payFund""];
""1694_myTokens"" -> ""1694_balanceOf"";
""1694_sell"" -> ""1694_tokensToEthereum_"";
""1694_calculateEthereumReceived"" -> ""1694_tokensToEthereum_"";
""1694_myDividends"" -> ""1694_dividendsOf"";
""1694_buy"" -> ""1694_purchaseInternal"";
""1694_setName"" -> ""1694_onlyAdministrator"";
""1694_buyPrice"" -> ""1694_tokensToEthereum_"";
""1694_purchaseInternal"" -> ""1694_purchaseTokens"";
""1694_purchaseInternal"" -> ""1694_notContract"";
""1694_transfer"" -> ""1694_onlyBagholders"";
""1694_ethereumToTokens_"" -> ""1694_sqrt"";
""1694_calculateTokensReceived"" -> ""1694_ethereumToTokens_"";
""1694_reinvest"" -> ""1694_onlyStronghands"";
""1694_setSymbol"" -> ""1694_onlyAdministrator"";
""1694_transferAndCall"" -> ""1694_isContract"";
""1694_reinvest"" -> ""1694_myDividends"";
""1694_sellPrice"" -> ""1694_tokensToEthereum_"";
""1694_withdraw"" -> ""1694_myDividends"";
""1694_setStakingRequirement"" -> ""1694_onlyAdministrator"";
""1694_setCanAcceptTokens"" -> ""1694_onlyAdministrator"";
""1694_transfer"" -> ""1694_withdraw"";
""1694_exit"" -> ""1694_sell"";
""1694_sell"" -> ""1694_onlyBagholders"";
""1694_transfer"" -> ""1694_myDividends"";
""1694_purchaseTokens"" -> ""1694_antiEarlyWhale"";
""1694_transferAndCall"" -> ""1694_transfer"";
""1694_setAdministrator"" -> ""1694_onlyAdministrator"";
""1694_exit"" -> ""1694_withdraw"";
""1694_withdraw"" -> ""1694_onlyStronghands"";
""1694_purchaseTokens"" -> ""1694_ethereumToTokens_"";
""1694_fallback"" -> ""1694_purchaseInternal"";
""1694_reinvest"" -> ""1694_purchaseTokens"";
}
"
0x6f6b380e49cf90d418639a5032675fdc05c11470.sol,TB,"contract TB is SafeMath { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TB ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_378_TB {
label=""TB"";
""378_transferFrom"" [label=""transferFrom""];
""378_TB"" [label=""TB""];
""378_transfer"" [label=""transfer""];
""378_approve"" [label=""approve""];
""378_burn"" [label=""burn""];
""378_transfer"" -> ""378_safeSub"";
""378_burn"" -> ""378_safeSub"";
""378_transfer"" -> ""378_safeAdd"";
""378_transferFrom"" -> ""378_safeAdd"";
""378_transferFrom"" -> ""378_safeSub"";
}
"
0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol,MultiSigTokenWallet,contract MultiSigTokenWallet { address[] public owners; address[] public tokens; mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; uint public transactionCount; mapping (address => uint) public tokenBalances; mapping (address => bool) public isOwner; mapping (address => address[]) public userList; uint public required; uint public nonce; struct Transaction { address destination; uint value; bytes data; bool executed; },0,"subgraph cluster_1537_MultiSigTokenWallet {
label=""MultiSigTokenWallet"";
""1537_submitTransaction"" [label=""submitTransaction""];
""1537_setMyTokenList"" [label=""setMyTokenList""];
""1537_withdrawToken"" [label=""withdrawToken""];
""1537_getTransactionCount"" [label=""getTransactionCount""];
""1537_executeTransaction"" [label=""executeTransaction""];
""1537_setTokenList"" [label=""setTokenList""];
""1537_addTransaction"" [label=""addTransaction""];
""1537_depositToken"" [label=""depositToken""];
""1537_addOwner"" [label=""addOwner""];
""1537_removeOwner"" [label=""removeOwner""];
""1537_releaseWallet"" [label=""releaseWallet""];
""1537_changeRequirement"" [label=""changeRequirement""];
""1537_receiveApproval"" [label=""receiveApproval""];
""1537_getConfirmations"" [label=""getConfirmations""];
""1537__deposited"" [label=""_deposited""];
""1537_fallback"" [label=""fallback""];
""1537_watch"" [label=""watch""];
""1537_revokeConfirmation"" [label=""revokeConfirmation""];
""1537_getTokenList"" [label=""getTokenList""];
""1537_withdrawAllTokens"" [label=""withdrawAllTokens""];
""1537_tokenFallback"" [label=""tokenFallback""];
""1537_getTransactionIds"" [label=""getTransactionIds""];
""1537_withdrawEverything"" [label=""withdrawEverything""];
""1537_constructor"" [label=""constructor""];
""1537_isConfirmed"" [label=""isConfirmed""];
""1537_getConfirmationCount"" [label=""getConfirmationCount""];
""1537_getOwners"" [label=""getOwners""];
""1537_confirmTransaction"" [label=""confirmTransaction""];
""1537_replaceOwner"" [label=""replaceOwner""];
""1537_deposit"" [label=""deposit""];
""1537_watch"" -> ""1537__deposited"";
""1537_addOwner"" -> ""1537_validRequirement"";
""1537_releaseWallet"" -> ""1537_notNull"";
""1537_releaseWallet"" -> ""1537_onlyWallet"";
""1537_withdrawEverything"" -> ""1537_withdrawAllTokens"";
""1537_addOwner"" -> ""1537_ownerDoesNotExist"";
""1537_revokeConfirmation"" -> ""1537_notExecuted"";
""1537_deposit"" -> ""1537__deposited"";
""1537_setTokenList"" -> ""1537_onlyWallet"";
""1537_withdrawToken"" -> ""1537_notNull"";
""1537_replaceOwner"" -> ""1537_ownerExists"";
""1537_submitTransaction"" -> ""1537_confirmTransaction"";
""1537_changeRequirement"" -> ""1537_onlyWallet"";
""1537_tokenFallback"" -> ""1537__deposited"";
""1537_constructor"" -> ""1537_validRequirement"";
""1537_revokeConfirmation"" -> ""1537_ownerExists"";
""1537_receiveApproval"" -> ""1537_deposit"";
""1537_depositToken"" -> ""1537_deposit"";
""1537_addOwner"" -> ""1537_notNull"";
""1537_confirmTransaction"" -> ""1537_executeTransaction"";
""1537_removeOwner"" -> ""1537_changeRequirement"";
""1537_withdrawAllTokens"" -> ""1537_notNull"";
""1537_removeOwner"" -> ""1537_onlyWallet"";
""1537_addTransaction"" -> ""1537_notNull"";
""1537_changeRequirement"" -> ""1537_validRequirement"";
""1537_releaseWallet"" -> ""1537_addOwner"";
""1537_submitTransaction"" -> ""1537_addTransaction"";
""1537_revokeConfirmation"" -> ""1537_confirmed"";
""1537_withdrawToken"" -> ""1537_onlyWallet"";
""1537_releaseWallet"" -> ""1537_removeOwner"";
""1537_removeOwner"" -> ""1537_ownerExists"";
""1537_executeTransaction"" -> ""1537_isConfirmed"";
""1537_releaseWallet"" -> ""1537_ownerDoesNotExist"";
""1537_executeTransaction"" -> ""1537_notExecuted"";
""1537_addOwner"" -> ""1537_onlyWallet"";
""1537_replaceOwner"" -> ""1537_ownerDoesNotExist"";
""1537_withdrawEverything"" -> ""1537_notNull"";
""1537_confirmTransaction"" -> ""1537_ownerExists"";
""1537_confirmTransaction"" -> ""1537_notConfirmed"";
""1537_replaceOwner"" -> ""1537_onlyWallet"";
""1537_watch"" -> ""1537_ownerExists"";
""1537_confirmTransaction"" -> ""1537_transactionExists"";
""1537_withdrawEverything"" -> ""1537_onlyWallet"";
""1537_withdrawAllTokens"" -> ""1537_onlyWallet"";
}
"
0x77b3106417d4cf3138882cc21d4710c71183b707.sol,Brave3d,contract Brave3d { struct Stage { uint8 cnt; uint256 blocknumber; bool isFinish; uint8 deadIndex; mapping(uint8 => address) playerMap; },0,"subgraph cluster_1176_Brave3d {
label=""Brave3d"";
""1176_fallback"" [label=""fallback""];
""1176_getName"" [label=""getName""];
""1176_buyFromValue"" [label=""buyFromValue""];
""1176_getReferee"" [label=""getReferee""];
""1176_myReferee"" [label=""myReferee""];
""1176_resetStage"" [label=""resetStage""];
""1176_overStage"" [label=""overStage""];
""1176_currentStageData"" [label=""currentStageData""];
""1176_myEarnings"" [label=""myEarnings""];
""1176_setName"" [label=""setName""];
""1176_getEarnings"" [label=""getEarnings""];
""1176_getStageData"" [label=""getStageData""];
""1176_getRefereeAddress"" [label=""getRefereeAddress""];
""1176_constructor"" [label=""constructor""];
""1176_buy"" [label=""buy""];
""1176_withdraw"" [label=""withdraw""];
""1176_buyByName"" [label=""buyByName""];
""1176_forceOverStage"" [label=""forceOverStage""];
""1176_buyByAddress"" [label=""buyByAddress""];
""1176_buyByAddress"" -> ""1176_buy"";
""1176_withdraw"" -> ""1176_overStage"";
""1176_setName"" -> ""1176_isExistsOfAddressNameMap"";
""1176_withdraw"" -> ""1176_hasEarnings"";
""1176_myEarnings"" -> ""1176_hasEarnings"";
""1176_buyByName"" -> ""1176_resetStage"";
""1176_buyByName"" -> ""1176_buy"";
""1176_buyFromValue"" -> ""1176_buy"";
""1176_forceOverStage"" -> ""1176_overStage"";
""1176_buyFromValue"" -> ""1176_resetStage"";
""1176_setName"" -> ""1176_overStage"";
""1176_buyByAddress"" -> ""1176_resetStage"";
""1176_setName"" -> ""1176_isExistsOfNameAddressMap"";
""1176_buyByName"" -> ""1176_overStage"";
""1176_buyByAddress"" -> ""1176_overStage"";
""1176_buyFromValue"" -> ""1176_overStage"";
}
"
0x003ad9c18bc279f40632e7e5de2fd213931215d0.sol,PlanetCryptoToken,"contract PlanetCryptoToken is ERC721Full_custom{ using Percent for Percent.percent; event referralPaid(address indexed search_to, address to, uint256 amnt, uint256 timestamp); event issueCoinTokens(address indexed searched_to, address to, uint256 amnt, uint256 timestamp); event landPurchased(uint256 indexed search_token_id, address indexed search_buyer, uint256 token_id, address buyer, bytes32 name, int256 center_lat, int256 center_lng, uint256 size, uint256 bought_at, uint256 empire_score, uint256 timestamp); event taxDistributed(uint256 amnt, uint256 total_players, uint256 timestamp); event cardBought( uint256 indexed search_token_id, address indexed search_from, address indexed search_to, uint256 token_id, address from, address to, bytes32 name, uint256 orig_value, uint256 new_value, uint256 empireScore, uint256 newEmpireScore, uint256 now); address owner; address devBankAddress; address tokenBankAddress; modifier onlyOwner() { require(msg.sender == owner); _; }",0,"subgraph cluster_4413_PlanetCryptoToken {
label=""PlanetCryptoToken"";
""4413_p_update_mEmpireScoreMultiplier"" [label=""p_update_mEmpireScoreMultiplier""];
""4413_p_update_planetCryptoCoinAddress"" [label=""p_update_planetCryptoCoinAddress""];
""4413_buyCard"" [label=""buyCard""];
""4413_p_update_planetCryptoUtilsAddress"" [label=""p_update_planetCryptoUtilsAddress""];
""4413_process_swap"" [label=""process_swap""];
""4413_buyLandWithTokens"" [label=""buyLandWithTokens""];
""4413_queryMap"" [label=""queryMap""];
""4413_p_update_action"" [label=""p_update_action""];
""4413_p_update_mResalePlotDevPercent"" [label=""p_update_mResalePlotDevPercent""];
""4413_debug_transfer"" [label=""debug_transfer""];
""4413_setupPlotOwnership"" [label=""setupPlotOwnership""];
""4413_our_transferFrom"" [label=""our_transferFrom""];
""4413_processPurchase"" [label=""processPurchase""];
""4413_p_update_mResaleMultipler"" [label=""p_update_mResaleMultipler""];
""4413_p_update_tokensRewardsAllocated"" [label=""p_update_tokensRewardsAllocated""];
""4413_m"" [label=""m""];
""4413_getAllPlayerObjectLen"" [label=""getAllPlayerObjectLen""];
""4413_roundLatLng"" [label=""roundLatLng""];
""4413_queryPlotExists"" [label=""queryPlotExists""];
""4413_p_update_currentPlotEmpireScore"" [label=""p_update_currentPlotEmpireScore""];
""4413_p_update_mNewPlotTaxPercent"" [label=""p_update_mNewPlotTaxPercent""];
""4413_p_update_mResalePlotOwnerPercent"" [label=""p_update_mResalePlotOwnerPercent""];
""4413_transferFrom"" [label=""transferFrom""];
""4413_calcPlayerDivs"" [label=""calcPlayerDivs""];
""4413_withdrawTaxEarning"" [label=""withdrawTaxEarning""];
""4413_p_update_mNewPlotDevPercent"" [label=""p_update_mNewPlotDevPercent""];
""4413_p_update_mResalePlotTaxPercent"" [label=""p_update_mResalePlotTaxPercent""];
""4413_stringToBytes32"" [label=""stringToBytes32""];
""4413_burnToken"" [label=""burnToken""];
""4413_constructor"" [label=""constructor""];
""4413_taxEarningsAvailable"" [label=""taxEarningsAvailable""];
""4413_safeTransferFrom"" [label=""safeTransferFrom""];
""4413_p_withdrawDevHoldings"" [label=""p_withdrawDevHoldings""];
""4413_p_update_mRefPercent"" [label=""p_update_mRefPercent""];
""4413_buyLand"" [label=""buyLand""];
""4413_getToken"" [label=""getToken""];
""4413_p_update_tokensRewardsAvailable"" [label=""p_update_tokensRewardsAvailable""];
""4413_setupZoomLvl"" [label=""setupZoomLvl""];
""4413_p_update_priceUpdateAmount"" [label=""p_update_priceUpdateAmount""];
""4413_incPlayerOwed"" [label=""incPlayerOwed""];
""4413_buyLand"" -> ""4413_updateUsersLastAccess"";
""4413_constructor"" -> ""4413_constructor"";
""4413_buyLand"" -> ""4413_calcPlayerDivs"";
""4413_p_update_action"" -> ""4413_onlyOwner"";
""4413_calcPlayerDivs"" -> ""4413_incPlayerOwed"";
""4413_p_update_mRefPercent"" -> ""4413_onlyOwner"";
""4413_burnToken"" -> ""4413_ownerOf"";
""4413_buyLandWithTokens"" -> ""4413_validateTokenPurchase"";
""4413_buyCard"" -> ""4413_updateUsersLastAccess"";
""4413_safeTransferFrom"" -> ""4413__checkOnERC721Received"";
""4413_calcPlayerDivs"" -> ""4413_totalSupply"";
""4413_p_update_mNewPlotTaxPercent"" -> ""4413_onlyOwner"";
""4413_p_update_mEmpireScoreMultiplier"" -> ""4413_onlyOwner"";
""4413_safeTransferFrom"" -> ""4413_transferFrom"";
""4413_processPurchase"" -> ""4413_setupPlotOwnership"";
""4413_buyCard"" -> ""4413_calcPlayerDivs"";
""4413_processPurchase"" -> ""4413__mint"";
""4413_transferFrom"" -> ""4413_process_swap"";
""4413_getToken"" -> ""4413_ownerOf"";
""4413_p_update_mResalePlotOwnerPercent"" -> ""4413_onlyOwner"";
""4413_transferFrom"" -> ""4413__isApprovedOrOwner"";
""4413_our_transferFrom"" -> ""4413_process_swap"";
""4413_buyLandWithTokens"" -> ""4413_processPurchase"";
""4413_setupPlotOwnership"" -> ""4413_setupZoomLvl"";
""4413_buyLand"" -> ""4413_validateLand"";
""4413_p_update_planetCryptoCoinAddress"" -> ""4413_onlyOwner"";
""4413_burnToken"" -> ""4413__burn"";
""4413_p_update_mResaleMultipler"" -> ""4413_onlyOwner"";
""4413_buyCard"" -> ""4413_our_transferFrom"";
""4413_buyLand"" -> ""4413_validatePurchase"";
""4413_setupZoomLvl"" -> ""4413_roundLatLng"";
""4413_processPurchase"" -> ""4413_totalSupply"";
""4413_buyCard"" -> ""4413_validateResale"";
""4413_p_update_currentPlotEmpireScore"" -> ""4413_onlyOwner"";
""4413_buyLandWithTokens"" -> ""4413_validateLand"";
""4413_buyLandWithTokens"" -> ""4413_updateUsersLastAccess"";
""4413_our_transferFrom"" -> ""4413_internal_transferFrom"";
""4413_burnToken"" -> ""4413_onlyOwner"";
""4413_p_update_priceUpdateAmount"" -> ""4413_onlyOwner"";
""4413_p_update_mResalePlotDevPercent"" -> ""4413_onlyOwner"";
""4413_p_update_planetCryptoUtilsAddress"" -> ""4413_onlyOwner"";
""4413_p_update_tokensRewardsAvailable"" -> ""4413_onlyOwner"";
""4413_p_update_mResalePlotTaxPercent"" -> ""4413_onlyOwner"";
""4413_transferFrom"" -> ""4413_transferFrom"";
""4413_p_update_tokensRewardsAllocated"" -> ""4413_onlyOwner"";
""4413_p_update_mNewPlotDevPercent"" -> ""4413_onlyOwner"";
""4413_buyCard"" -> ""4413_ownerOf"";
""4413_safeTransferFrom"" -> ""4413_safeTransferFrom"";
""4413_debug_transfer"" -> ""4413_internal_transferFrom"";
""4413_buyLand"" -> ""4413_processPurchase"";
}
"
0x38ceafcff00dc2f88656a4ff3235e2124819eef6.sol,CryptojoyTokenSeller,"contract CryptojoyTokenSeller is Ownable { using SafeMath for uint; uint8 public constant decimals = 18; uint public miningSupply; uint constant MAGNITUDE = 10**6; uint constant LOG1DOT5 = 405465; uint constant THREE_SECOND= 15 * MAGNITUDE / 10; uint public a; uint public b; uint public c; uint public blockInterval; uint public startBlockNumber; address public platform; uint public lowerBoundaryETH; uint public upperBoundaryETH; uint public supplyPerInterval; uint public miningInterval; uint public tokenMint = 0; EIP20Interface public token; modifier isWithinLimits(uint _eth) { require(_eth >= lowerBoundaryETH, ); require(_eth <= upperBoundaryETH, ); _; }",0,"subgraph cluster_836_CryptojoyTokenSeller {
label=""CryptojoyTokenSeller"";
""836_log"" [label=""log""];
""836_getCurrentStage"" [label=""getCurrentStage""];
""836_withdraw"" [label=""withdraw""];
""836_changeRate"" [label=""changeRate""];
""836_tokenRemain"" [label=""tokenRemain""];
""836_fallback"" [label=""fallback""];
""836_changeWithdraw"" [label=""changeWithdraw""];
""836_calculatePrice"" [label=""calculatePrice""];
""836_buy"" [label=""buy""];
""836_constructor"" [label=""constructor""];
""836_buy"" -> ""836_isWithinLimits"";
""836_buy"" -> ""836_calculatePrice"";
""836_withdraw"" -> ""836_onlyOwner"";
""836_calculatePrice"" -> ""836_log"";
""836_changeRate"" -> ""836_onlyOwner"";
""836_tokenRemain"" -> ""836_getCurrentStage"";
""836_changeWithdraw"" -> ""836_onlyOwner"";
""836_buy"" -> ""836_getCurrentStage"";
""836_fallback"" -> ""836_buy"";
}
"
0x24626fd95ad815bab2136d6f91ca10562161cda3.sol,DaoStakeStorage,"contract DaoStakeStorage is ResolverClient, DaoConstants, AddressIteratorStorage { using DoublyLinkedList for DoublyLinkedList.Address; mapping (address => uint256) public lockedDGDStake; mapping (address => uint256) public actualLockedDGD; uint256 public totalLockedDGDStake; uint256 public totalModeratorLockedDGDStake; DoublyLinkedList.Address allParticipants; DoublyLinkedList.Address allModerators; mapping (address => bool) public redeemedBadge; mapping (address => bool) public carbonVoteBonusClaimed; constructor(address _resolver) public { require(init(CONTRACT_STORAGE_DAO_STAKE, _resolver)); }",0,"subgraph cluster_7433_DaoStakeStorage {
label=""DaoStakeStorage"";
""7433_totalModeratorLockedDGDStake"" [label=""totalModeratorLockedDGDStake""];
""7433_updateTotalLockedDGDStake"" [label=""updateTotalLockedDGDStake""];
""7433_constructor"" [label=""constructor""];
""7433_isInModeratorsList"" [label=""isInModeratorsList""];
""7433_updateUserDGDStake"" [label=""updateUserDGDStake""];
""7433_readNextModerator"" [label=""readNextModerator""];
""7433_lockedDGDStake"" [label=""lockedDGDStake""];
""7433_removeFromModeratorList"" [label=""removeFromModeratorList""];
""7433_readPreviousModerator"" [label=""readPreviousModerator""];
""7433_addToModeratorList"" [label=""addToModeratorList""];
""7433_redeemBadge"" [label=""redeemBadge""];
""7433_updateTotalModeratorLockedDGDs"" [label=""updateTotalModeratorLockedDGDs""];
""7433_readPreviousParticipant"" [label=""readPreviousParticipant""];
""7433_readLastModerator"" [label=""readLastModerator""];
""7433_setCarbonVoteBonusClaimed"" [label=""setCarbonVoteBonusClaimed""];
""7433_readTotalModerators"" [label=""readTotalModerators""];
""7433_addToParticipantList"" [label=""addToParticipantList""];
""7433_readUserDGDStake"" [label=""readUserDGDStake""];
""7433_isInParticipantList"" [label=""isInParticipantList""];
""7433_readFirstParticipant"" [label=""readFirstParticipant""];
""7433_readTotalParticipant"" [label=""readTotalParticipant""];
""7433_totalLockedDGDStake"" [label=""totalLockedDGDStake""];
""7433_readLastParticipant"" [label=""readLastParticipant""];
""7433_readFirstModerator"" [label=""readFirstModerator""];
""7433_removeFromParticipantList"" [label=""removeFromParticipantList""];
""7433_readNextParticipant"" [label=""readNextParticipant""];
""7433_readFirstModerator"" -> ""7433_read_first_from_addresses"";
""7433_readTotalParticipant"" -> ""7433_read_total_addresses"";
""7433_setCarbonVoteBonusClaimed"" -> ""7433_sender_is"";
""7433_readNextModerator"" -> ""7433_read_next_from_addresses"";
""7433_readLastModerator"" -> ""7433_read_last_from_addresses"";
""7433_readTotalModerators"" -> ""7433_read_total_addresses"";
""7433_removeFromParticipantList"" -> ""7433_sender_is"";
""7433_updateTotalModeratorLockedDGDs"" -> ""7433_sender_is_from"";
""7433_updateUserDGDStake"" -> ""7433_sender_is"";
""7433_readNextParticipant"" -> ""7433_read_next_from_addresses"";
""7433_readLastParticipant"" -> ""7433_read_last_from_addresses"";
""7433_addToModeratorList"" -> ""7433_sender_is"";
""7433_addToParticipantList"" -> ""7433_sender_is"";
""7433_readPreviousModerator"" -> ""7433_read_previous_from_addresses"";
""7433_updateTotalLockedDGDStake"" -> ""7433_sender_is_from"";
""7433_readPreviousParticipant"" -> ""7433_read_previous_from_addresses"";
""7433_readFirstParticipant"" -> ""7433_read_first_from_addresses"";
""7433_removeFromModeratorList"" -> ""7433_sender_is"";
""7433_constructor"" -> ""7433_init"";
""7433_redeemBadge"" -> ""7433_sender_is"";
}
"
0xe3818504c1b32bf1557b16c238b2e01fd3149c17.sol,TeamAllocation,contract TeamAllocation is Ownable { using SafeMath for uint; uint public unlockedAt; PillarToken plr; mapping (address => uint) allocations; uint tokensCreated = 0; uint constant public lockedTeamAllocationTokens = 16000000e18; address public teamStorageVault = 0x3f5D90D5Cc0652AAa40519114D007Bf119Afe1Cf; function TeamAllocation() { plr = PillarToken(msg.sender); uint nineMonths = 9 * 30 days; unlockedAt = now.add(nineMonths); allocations[teamStorageVault] = lockedTeamAllocationTokens; },0,"subgraph cluster_304_TeamAllocation {
label=""TeamAllocation"";
""304_unlock"" [label=""unlock""];
""304_TeamAllocation"" [label=""TeamAllocation""];
""304_getTotalAllocation"" [label=""getTotalAllocation""];
}
"
0xcfd9c7074ca3c9b6190ebb26cb2115346851fcbd.sol,MineBlocks,"contract MineBlocks is Ownable { uint256 public totalSupply; using SafeMath for uint256; mapping(address => uint256) balances; mapping(address => uint256) holded; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function transfer(address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[msg.sender]); if(block.number>blockEndICO || msg.sender==owner){ balances[msg.sender] = balances[msg.sender].sub(_value); holded[_to]=block.number; balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); return true; }",0,"subgraph cluster_912_MineBlocks {
label=""MineBlocks"";
""912_buy"" [label=""buy""];
""912_transfer"" [label=""transfer""];
""912_balanceOf"" [label=""balanceOf""];
""912_withdrawReward"" [label=""withdrawReward""];
""912_allowance"" [label=""allowance""];
""912_withdraw"" [label=""withdraw""];
""912_approve"" [label=""approve""];
""912_increaseApproval"" [label=""increaseApproval""];
""912_approveAndCall"" [label=""approveAndCall""];
""912_MineBlocks"" [label=""MineBlocks""];
""912_fallback"" [label=""fallback""];
""912_transferFrom"" [label=""transferFrom""];
""912_decreaseApproval"" [label=""decreaseApproval""];
""912_transferBuy"" [label=""transferBuy""];
""912_deposit"" [label=""deposit""];
""912_buy"" -> ""912_status"";
""912_approveAndCall"" -> ""912_approve"";
""912_withdrawReward"" -> ""912_status"";
""912_buy"" -> ""912_transferBuy"";
""912_withdraw"" -> ""912_onlyOwner"";
""912_fallback"" -> ""912_buy"";
""912_deposit"" -> ""912_status"";
""912_approveAndCall"" -> ""912_onlyOwner"";
}
"
0x40a835f8573c4b75e962e435591ea2200b74a714.sol,MyEtherTeller,contract MyEtherTeller { address public owner; struct EscrowStruct { address buyer; address seller; address escrow_agent; uint escrow_fee; uint amount; bool escrow_intervention; bool release_approval; bool refund_approval; bytes32 notes; },0,"subgraph cluster_1399_MyEtherTeller {
label=""MyEtherTeller"";
""1399_escrowDecision"" [label=""escrowDecision""];
""1399_SellerHistory"" [label=""SellerHistory""];
""1399_buyerFundRelease"" [label=""buyerFundRelease""];
""1399_newEscrow"" [label=""newEscrow""];
""1399_CheckBalance"" [label=""CheckBalance""];
""1399_checkStatus"" [label=""checkStatus""];
""1399_MyEtherTeller"" [label=""MyEtherTeller""];
""1399_EscrowEscalation"" [label=""EscrowEscalation""];
""1399_escrowHistory"" [label=""escrowHistory""];
""1399_getEscrowFee"" [label=""getEscrowFee""];
""1399_fallback"" [label=""fallback""];
""1399_sellerRefund"" [label=""sellerRefund""];
""1399_getNumTransactions"" [label=""getNumTransactions""];
""1399_buyerHistory"" [label=""buyerHistory""];
""1399_getSpecificTransaction"" [label=""getSpecificTransaction""];
""1399_WithdrawFunds"" [label=""WithdrawFunds""];
""1399_setEscrowFee"" [label=""setEscrowFee""];
""1399_SellerHistory"" -> ""1399_checkStatus"";
""1399_newEscrow"" -> ""1399_getEscrowFee"";
""1399_buyerHistory"" -> ""1399_checkStatus"";
""1399_getSpecificTransaction"" -> ""1399_checkStatus"";
""1399_escrowHistory"" -> ""1399_checkStatus"";
}
"
0x748e0216c9c0ccf215dcd1e848d461e6ce86a5f0.sol,EGC,contract EGC is StandardToken{ string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; string public constant version = ; address public owner; modifier onlyOwner{ if(msg.sender != owner) throw; _; },0,"subgraph cluster_529_EGC {
label=""EGC"";
""529_kill"" [label=""kill""];
""529_EGC"" [label=""EGC""];
""529_changeOwner"" [label=""changeOwner""];
""529_fallback"" [label=""fallback""];
""529_changeOwner"" -> ""529_onlyOwner"";
""529_kill"" -> ""529_onlyOwner"";
}
"
0x4d2cc8b68c4757c5e2eaac3b6ee0405d0c2ffafe.sol,EasyCoin,contract EasyCoin is StandardToken { uint public constant INITIAL_SUPPLY = 2000000000; string public name = ; string public symbol = ; uint8 public decimals = 18; address private owner; bool public released; constructor() public { totalSupply_ = INITIAL_SUPPLY * (10 ** uint(decimals)); balances[msg.sender] = totalSupply_; owner = msg.sender; released = false; },0,"subgraph cluster_663_EasyCoin {
label=""EasyCoin"";
""663_transfer"" [label=""transfer""];
""663_isRelease"" [label=""isRelease""];
""663_transferFrom"" [label=""transferFrom""];
""663_constructor"" [label=""constructor""];
""663_release"" [label=""release""];
""663_approve"" [label=""approve""];
""663_allowance"" [label=""allowance""];
""663_transferFrom"" -> ""663_transferFrom"";
""663_transfer"" -> ""663_transfer"";
""663_allowance"" -> ""663_onlyReleased"";
""663_transfer"" -> ""663_onlyReleased"";
""663_transferFrom"" -> ""663_onlyReleased"";
""663_approve"" -> ""663_approve"";
""663_approve"" -> ""663_onlyReleased"";
""663_allowance"" -> ""663_allowance"";
}
"
0xf0150cec4fe8477d039c4b4e679c040480763170.sol,PLCRVoting,"contract PLCRVoting { event _VoteCommitted(uint indexed pollID, uint numTokens, address indexed voter); event _VoteRevealed(uint indexed pollID, uint numTokens, uint votesFor, uint votesAgainst, uint indexed choice, address indexed voter); event _PollCreated(uint voteQuorum, uint commitEndDate, uint revealEndDate, uint indexed pollID, address indexed creator); event _VotingRightsGranted(uint numTokens, address indexed voter); event _VotingRightsWithdrawn(uint numTokens, address indexed voter); event _TokensRescued(uint indexed pollID, address indexed voter); using AttributeStore for AttributeStore.Data; using DLL for DLL.Data; using SafeMath for uint; struct Poll { uint commitEndDate; uint revealEndDate; uint voteQuorum; uint votesFor; uint votesAgainst; mapping(address => bool) didCommit; mapping(address => bool) didReveal; }",0,"subgraph cluster_1914_PLCRVoting {
label=""PLCRVoting"";
""1914_pollExists"" [label=""pollExists""];
""1914_didReveal"" [label=""didReveal""];
""1914_validPosition"" [label=""validPosition""];
""1914_getNumTokens"" [label=""getNumTokens""];
""1914_rescueTokens"" [label=""rescueTokens""];
""1914_getNumPassingTokens"" [label=""getNumPassingTokens""];
""1914_revealVote"" [label=""revealVote""];
""1914_commitPeriodActive"" [label=""commitPeriodActive""];
""1914_revealVotes"" [label=""revealVotes""];
""1914_getCommitHash"" [label=""getCommitHash""];
""1914_getTotalNumberOfTokensForWinningOption"" [label=""getTotalNumberOfTokensForWinningOption""];
""1914_pollEnded"" [label=""pollEnded""];
""1914_isPassed"" [label=""isPassed""];
""1914_revealPeriodActive"" [label=""revealPeriodActive""];
""1914_rescueTokensInMultiplePolls"" [label=""rescueTokensInMultiplePolls""];
""1914_withdrawVotingRights"" [label=""withdrawVotingRights""];
""1914_pollMap"" [label=""pollMap""];
""1914_constructor"" [label=""constructor""];
""1914_isExpired"" [label=""isExpired""];
""1914_getInsertPointForNumTokens"" [label=""getInsertPointForNumTokens""];
""1914_didCommit"" [label=""didCommit""];
""1914_startPoll"" [label=""startPoll""];
""1914_commitVote"" [label=""commitVote""];
""1914_requestVotingRights"" [label=""requestVotingRights""];
""1914_attrUUID"" [label=""attrUUID""];
""1914_getLockedTokens"" [label=""getLockedTokens""];
""1914_getLastNode"" [label=""getLastNode""];
""1914_commitVotes"" [label=""commitVotes""];
""1914_commitVote"" -> ""1914_requestVotingRights"";
""1914_getNumPassingTokens"" -> ""1914_getCommitHash"";
""1914_getLockedTokens"" -> ""1914_getNumTokens"";
""1914_commitVote"" -> ""1914_validPosition"";
""1914_revealVote"" -> ""1914_getNumTokens"";
""1914_commitVote"" -> ""1914_commitPeriodActive"";
""1914_getNumPassingTokens"" -> ""1914_pollEnded"";
""1914_revealPeriodActive"" -> ""1914_pollExists"";
""1914_getInsertPointForNumTokens"" -> ""1914_getLastNode"";
""1914_getTotalNumberOfTokensForWinningOption"" -> ""1914_isPassed"";
""1914_getNumPassingTokens"" -> ""1914_isPassed"";
""1914_revealVotes"" -> ""1914_revealVote"";
""1914_revealPeriodActive"" -> ""1914_isExpired"";
""1914_rescueTokens"" -> ""1914_isExpired"";
""1914_getNumPassingTokens"" -> ""1914_getNumTokens"";
""1914_commitPeriodActive"" -> ""1914_isExpired"";
""1914_getInsertPointForNumTokens"" -> ""1914_getNumTokens"";
""1914_revealPeriodActive"" -> ""1914_commitPeriodActive"";
""1914_getCommitHash"" -> ""1914_attrUUID"";
""1914_revealVote"" -> ""1914_getCommitHash"";
""1914_revealVote"" -> ""1914_revealPeriodActive"";
""1914_pollEnded"" -> ""1914_isExpired"";
""1914_getNumTokens"" -> ""1914_attrUUID"";
""1914_getLockedTokens"" -> ""1914_getLastNode"";
""1914_commitVotes"" -> ""1914_commitVote"";
""1914_pollEnded"" -> ""1914_pollExists"";
""1914_commitPeriodActive"" -> ""1914_pollExists"";
""1914_didCommit"" -> ""1914_pollExists"";
""1914_rescueTokensInMultiplePolls"" -> ""1914_rescueTokens"";
""1914_getTotalNumberOfTokensForWinningOption"" -> ""1914_pollEnded"";
""1914_commitVote"" -> ""1914_attrUUID"";
""1914_isPassed"" -> ""1914_pollEnded"";
""1914_validPosition"" -> ""1914_getNumTokens"";
""1914_didReveal"" -> ""1914_pollExists"";
""1914_withdrawVotingRights"" -> ""1914_getLockedTokens"";
}
"
0x4c478ac32725872e30bca49957abc7dbb325cb21.sol,COIN,contract COIN is Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 constant decimals = 18; bytes32 constant password = keccak256(); bytes32 constant fin = keccak256(); mapping (address => uint256) balances; uint256 public totalSupply = 0; bool public mintingFinished = false; modifier canMint() { require(!mintingFinished); _; },0,"subgraph cluster_510_COIN {
label=""COIN"";
""510_transfer"" [label=""transfer""];
""510_COIN"" [label=""COIN""];
""510_balanceOf"" [label=""balanceOf""];
""510_mint"" [label=""mint""];
""510_totalSupply"" [label=""totalSupply""];
""510_approve"" [label=""approve""];
""510_transferFrom"" [label=""transferFrom""];
""510_allowance"" [label=""allowance""];
""510_finishMinting"" [label=""finishMinting""];
""510_passwordMint"" [label=""passwordMint""];
""510_finishMinting"" -> ""510_onlyOwner"";
""510_passwordMint"" -> ""510_canMint"";
""510_mint"" -> ""510_onlyOwner"";
""510_mint"" -> ""510_canMint"";
}
"
0xb60cfc056a3f201ce4f421655d5fcb535b8d7ca5.sol,SimpleBanners,contract SimpleBanners { struct BannerOwnerStruct { address owner; uint balance; uint bidAmountPerDay; bytes32 dataCID; uint timestampTaken; },0,"subgraph cluster_516_SimpleBanners {
label=""SimpleBanners"";
""516_updateBannerContent"" [label=""updateBannerContent""];
""516_rejectBanner"" [label=""rejectBanner""];
""516_constructor"" [label=""constructor""];
""516_getActiveBanners"" [label=""getActiveBanners""];
""516_updateOwner"" [label=""updateOwner""];
""516_takeBanner"" [label=""takeBanner""];
""516_getBannerDetails"" [label=""getBannerDetails""];
""516_getRemainingBalance"" [label=""getRemainingBalance""];
""516_emergencyWithdraw"" [label=""emergencyWithdraw""];
""516_calculateTotalCost"" [label=""calculateTotalCost""];
""516_addFunds"" [label=""addFunds""];
""516_getActiveBanners"" -> ""516_calculateTotalCost"";
""516_takeBanner"" -> ""516_calculateTotalCost"";
""516_addFunds"" -> ""516_calculateTotalCost"";
""516_rejectBanner"" -> ""516_calculateTotalCost"";
""516_getRemainingBalance"" -> ""516_calculateTotalCost"";
}
"
0x1c5399b8980bbffa1ebfdbe61ef0608fd2282094.sol,Aserium,contract Aserium { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 2; uint public _totalSupply = 10000000000; uint256 public RATE = 1; bool public isMinting = true; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_Aserium {
label=""Aserium"";
""516_transferFrom"" [label=""transferFrom""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_createTokens"" [label=""createTokens""];
""516_transfer"" [label=""transfer""];
""516_balanceOf"" [label=""balanceOf""];
""516_burnTokens"" [label=""burnTokens""];
""516_approve"" [label=""approve""];
""516_fallback"" [label=""fallback""];
""516_allowance"" [label=""allowance""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_totalSupply"" [label=""totalSupply""];
""516_constructor"" [label=""constructor""];
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_fallback"" -> ""516_createTokens"";
""516_burnTokens"" -> ""516_onlyOwner"";
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
}
"
0x0e21902d93573c18fd0acbadac4a5464e9732f54.sol,TempleOfETH,contract TempleOfETH { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1475_TempleOfETH {
label=""TempleOfETH"";
""1475_myDividends"" [label=""myDividends""];
""1475_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1475_sqrt"" [label=""sqrt""];
""1475_totalSupply"" [label=""totalSupply""];
""1475_isStarted"" [label=""isStarted""];
""1475_setStartTime"" [label=""setStartTime""];
""1475_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1475_transferInternal"" [label=""transferInternal""];
""1475_fallback"" [label=""fallback""];
""1475_calculateUntaxedEthereumReceived"" [label=""calculateUntaxedEthereumReceived""];
""1475_purchaseTokens"" [label=""purchaseTokens""];
""1475_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1475_transfer"" [label=""transfer""];
""1475_buyPrice"" [label=""buyPrice""];
""1475_balanceOf"" [label=""balanceOf""];
""1475_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1475_buy"" [label=""buy""];
""1475_dividendsOf"" [label=""dividendsOf""];
""1475_exit"" [label=""exit""];
""1475_entryFee"" [label=""entryFee""];
""1475_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1475_sell"" [label=""sell""];
""1475_sellPrice"" [label=""sellPrice""];
""1475_reinvest"" [label=""reinvest""];
""1475_myTokens"" [label=""myTokens""];
""1475_withdraw"" [label=""withdraw""];
""1475_constructor"" [label=""constructor""];
""1475_isPremine"" [label=""isPremine""];
""1475_purchaseFor"" [label=""purchaseFor""];
""1475_purchaseFor"" -> ""1475_antiEarlyWhale"";
""1475_exit"" -> ""1475_sell"";
""1475_purchaseTokens"" -> ""1475_ethereumToTokens_"";
""1475_transfer"" -> ""1475_myDividends"";
""1475_sellPrice"" -> ""1475_tokensToEthereum_"";
""1475_myTokens"" -> ""1475_balanceOf"";
""1475_fallback"" -> ""1475_easyOnTheGas"";
""1475_sell"" -> ""1475_tokensToEthereum_"";
""1475_calculateUntaxedEthereumReceived"" -> ""1475_tokensToEthereum_"";
""1475_sell"" -> ""1475_buyPrice"";
""1475_transfer"" -> ""1475_transferInternal"";
""1475_withdraw"" -> ""1475_onlyStronghands"";
""1475_fallback"" -> ""1475_isControlled"";
""1475_buy"" -> ""1475_purchaseTokens"";
""1475_buy"" -> ""1475_easyOnTheGas"";
""1475_setStartTime"" -> ""1475_isStarted"";
""1475_calculateTokensReceived"" -> ""1475_entryFee"";
""1475_reinvest"" -> ""1475_myDividends"";
""1475_purchaseFor"" -> ""1475_purchaseTokens"";
""1475_buyPrice"" -> ""1475_entryFee"";
""1475_reinvest"" -> ""1475_purchaseTokens"";
""1475_sell"" -> ""1475_onlyBagholders"";
""1475_ethereumToTokens_"" -> ""1475_sqrt"";
""1475_fallback"" -> ""1475_antiEarlyWhale"";
""1475_reinvest"" -> ""1475_onlyStronghands"";
""1475_transfer"" -> ""1475_withdraw"";
""1475_buyPrice"" -> ""1475_tokensToEthereum_"";
""1475_purchaseFor"" -> ""1475_easyOnTheGas"";
""1475_calculateEthereumReceived"" -> ""1475_tokensToEthereum_"";
""1475_withdraw"" -> ""1475_myDividends"";
""1475_myDividends"" -> ""1475_dividendsOf"";
""1475_buy"" -> ""1475_isControlled"";
""1475_calculateTokensReceived"" -> ""1475_ethereumToTokens_"";
""1475_purchaseTokens"" -> ""1475_entryFee"";
""1475_transfer"" -> ""1475_onlyBagholders"";
""1475_purchaseTokens"" -> ""1475_buyPrice"";
""1475_fallback"" -> ""1475_purchaseTokens"";
""1475_exit"" -> ""1475_withdraw"";
""1475_purchaseFor"" -> ""1475_isControlled"";
""1475_buy"" -> ""1475_antiEarlyWhale"";
}
"
0x5209647ee5d6247daddae470ccc6a282c642f6d8.sol,ICOStartPromo,"contract ICOStartPromo { string public url = ""https: string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000 ether; address private owner; event Transfer(address indexed _from, address indexed _to, uint256 _value); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); modifier onlyOwner() { require(msg.sender == owner); _; }",0,"subgraph cluster_234_ICOStartPromo {
label=""ICOStartPromo"";
""234_setUrl"" [label=""setUrl""];
""234_approve"" [label=""approve""];
""234_fallback"" [label=""fallback""];
""234_setName"" [label=""setName""];
""234_transferFrom"" [label=""transferFrom""];
""234_ICOStartPromo"" [label=""ICOStartPromo""];
""234_destroy"" [label=""destroy""];
""234_allowance"" [label=""allowance""];
""234_balanceOf"" [label=""balanceOf""];
""234_transferOwnership"" [label=""transferOwnership""];
""234_setSymbol"" [label=""setSymbol""];
""234_airdrop"" [label=""airdrop""];
""234_transfer"" [label=""transfer""];
""234_destroy"" -> ""234_onlyOwner"";
""234_transferOwnership"" -> ""234_onlyOwner"";
""234_setUrl"" -> ""234_onlyOwner"";
""234_setSymbol"" -> ""234_onlyOwner"";
""234_setName"" -> ""234_onlyOwner"";
""234_airdrop"" -> ""234_onlyOwner"";
}
"
0xeae08961bf8bfe92879b1455c96893e313c8d858.sol,WarToken,"contract WarToken is ERC721, AccessAdmin { struct Fashion { uint16 protoId; uint16 quality; uint16 pos; uint16 health; uint16 atkMin; uint16 atkMax; uint16 defence; uint16 crit; uint16 isPercent; uint16 attrExt1; uint16 attrExt2; uint16 attrExt3; }",0,"subgraph cluster_2205_WarToken {
label=""WarToken"";
""2205_safeTransferByContract"" [label=""safeTransferByContract""];
""2205_setApprovalForAll"" [label=""setApprovalForAll""];
""2205_getFashion"" [label=""getFashion""];
""2205_safeTransferFrom"" [label=""safeTransferFrom""];
""2205__changeAttrByIndex"" [label=""_changeAttrByIndex""];
""2205__transfer"" [label=""_transfer""];
""2205_setActionContract"" [label=""setActionContract""];
""2205_getOwnFashions"" [label=""getOwnFashions""];
""2205_getFashionsAttrs"" [label=""getFashionsAttrs""];
""2205_transferFrom"" [label=""transferFrom""];
""2205_WarToken"" [label=""WarToken""];
""2205_ownerOf"" [label=""ownerOf""];
""2205_balanceOf"" [label=""balanceOf""];
""2205_totalSupply"" [label=""totalSupply""];
""2205_getActionContract"" [label=""getActionContract""];
""2205_name"" [label=""name""];
""2205_supportsInterface"" [label=""supportsInterface""];
""2205_destroyFashion"" [label=""destroyFashion""];
""2205__safeTransferFrom"" [label=""_safeTransferFrom""];
""2205_approve"" [label=""approve""];
""2205_symbol"" [label=""symbol""];
""2205_changeFashionAttr"" [label=""changeFashionAttr""];
""2205_createFashion"" [label=""createFashion""];
""2205_getApproved"" [label=""getApproved""];
""2205_isApprovedForAll"" [label=""isApprovedForAll""];
""2205__safeTransferFrom"" -> ""2205_canTransfer"";
""2205_destroyFashion"" -> ""2205_whenNotPaused"";
""2205_transferFrom"" -> ""2205_isValidToken"";
""2205_safeTransferByContract"" -> ""2205__transfer"";
""2205_createFashion"" -> ""2205__transfer"";
""2205_setActionContract"" -> ""2205_onlyAdmin"";
""2205_transferFrom"" -> ""2205_canTransfer"";
""2205_transferFrom"" -> ""2205__transfer"";
""2205_changeFashionAttr"" -> ""2205__changeAttrByIndex"";
""2205_getApproved"" -> ""2205_isValidToken"";
""2205_getFashion"" -> ""2205_isValidToken"";
""2205_getActionContract"" -> ""2205_onlyAdmin"";
""2205_safeTransferFrom"" -> ""2205__safeTransferFrom"";
""2205_destroyFashion"" -> ""2205_isValidToken"";
""2205_setApprovalForAll"" -> ""2205_whenNotPaused"";
""2205_changeFashionAttr"" -> ""2205_isValidToken"";
""2205__safeTransferFrom"" -> ""2205__transfer"";
""2205__safeTransferFrom"" -> ""2205_isValidToken"";
""2205_createFashion"" -> ""2205_whenNotPaused"";
""2205_changeFashionAttr"" -> ""2205_whenNotPaused"";
""2205_safeTransferFrom"" -> ""2205_whenNotPaused"";
""2205_transferFrom"" -> ""2205_whenNotPaused"";
""2205_safeTransferByContract"" -> ""2205_whenNotPaused"";
""2205_approve"" -> ""2205_whenNotPaused"";
}
"
0x27e1d539cb59518bf14e4525b1c3b4721aaa9080.sol,SignedTransferToken,"contract SignedTransferToken is BaseToken { event TransferPreSigned( address indexed from, address indexed to, address indexed settler, uint256 value, uint256 fee ); event TransferPreSignedMany( address indexed from, address indexed settler, uint256 value, uint256 fee ); mapping(address => mapping(bytes32 => bool)) executedSettlements; function transferPreSigned(address _from, address _to, uint256 _value, uint256 _fee, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) public returns (bool) { uint256 total = _value.add(_fee); bytes32 calcHash = calculateHash(_from, _to, _value, _fee, _nonce); require(_to != address(0)); require(isValidSignature(_from, calcHash, _v, _r, _s)); require(balances[_from] >= total); require(!executedSettlements[_from][calcHash]); executedSettlements[_from][calcHash] = true; balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(_from, _to, _value); balances[_from] = balances[_from].sub(_fee); balances[msg.sender] = balances[msg.sender].add(_fee); Transfer(_from, msg.sender, _fee); TransferPreSigned(_from, _to, msg.sender, _value, _fee); return true; }",0,"subgraph cluster_1615_PausableSignedTransferToken {
label=""PausableSignedTransferToken"";
""1615_transferPreSignedBulk"" [label=""transferPreSignedBulk""];
""1615_transferPreSigned"" [label=""transferPreSigned""];
""1615_transferPreSignedMany"" [label=""transferPreSignedMany""];
""1615_transferPreSignedBulk"" -> ""1615_transferPreSignedBulk"";
""1615_transferPreSigned"" -> ""1615_transferPreSigned"";
""1615_transferPreSignedMany"" -> ""1615_whenNotPaused"";
""1615_transferPreSignedBulk"" -> ""1615_whenNotPaused"";
""1615_transferPreSigned"" -> ""1615_whenNotPaused"";
""1615_transferPreSignedMany"" -> ""1615_transferPreSignedMany"";
}
"
0xf140e82d5f6e0f31afd6d107886ad3e88da6c0b3.sol,Airdropper,"contract Airdropper is Ownable { function AirTransfer(address[] _recipients, uint256[] values, address _tokenAddress) onlyOwner public returns (bool) { require(_recipients.length > 0); Token token = Token(_tokenAddress); for(uint j = 0; j < _recipients.length; j++){ token.transfer(_recipients[j], values[j]); }",0,"subgraph cluster_189_Airdropper {
label=""Airdropper"";
""189_AirTransfer"" [label=""AirTransfer""];
""189_withdrawalToken"" [label=""withdrawalToken""];
""189_AirTransfeSameToken"" [label=""AirTransfeSameToken""];
""189_AirTransfeSameToken"" -> ""189_onlyOwner"";
""189_withdrawalToken"" -> ""189_onlyOwner"";
""189_AirTransfer"" -> ""189_onlyOwner"";
}
"
0x182fad6a68ebd9118549ec1091aa4eb95e234ef6.sol,POWHclone,"contract POWHclone { uint256 constant PRECISION = 0x10000000000000000; int constant CRRN = 1; int constant CRRD = 2; int constant LOGC = -0x296ABF784A358468C; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public totalSupply; mapping(address => uint256) public balanceOfOld; mapping(address => mapping(address => uint256)) public allowance; mapping(address => int256) payouts; int256 totalPayouts; uint256 earningsPerShare; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); address owner; function POWHclone() public { owner = msg.sender; }",0,"subgraph cluster_998_POWHclone {
label=""POWHclone"";
""998_getEtherForTokens"" [label=""getEtherForTokens""];
""998_buy"" [label=""buy""];
""998_transferTokens"" [label=""transferTokens""];
""998_transfer"" [label=""transfer""];
""998_balance"" [label=""balance""];
""998_approve"" [label=""approve""];
""998_fixedLog"" [label=""fixedLog""];
""998_balanceOf"" [label=""balanceOf""];
""998_fallback"" [label=""fallback""];
""998_withdraw"" [label=""withdraw""];
""998_getTokensForEther"" [label=""getTokensForEther""];
""998_sellPrice"" [label=""sellPrice""];
""998_withdrawOld"" [label=""withdrawOld""];
""998_fund"" [label=""fund""];
""998_fixedExp"" [label=""fixedExp""];
""998_POWHclone"" [label=""POWHclone""];
""998_transferFrom"" [label=""transferFrom""];
""998_dividends"" [label=""dividends""];
""998_sellMyTokensDaddy"" [label=""sellMyTokensDaddy""];
""998_getMeOutOfHere"" [label=""getMeOutOfHere""];
""998_sell"" [label=""sell""];
""998_buyPrice"" [label=""buyPrice""];
""998_reserve"" [label=""reserve""];
""998_getMeOutOfHere"" -> ""998_withdraw"";
""998_getTokensForEther"" -> ""998_reserve"";
""998_sellMyTokensDaddy"" -> ""998_transferTokens"";
""998_sellMyTokensDaddy"" -> ""998_balanceOf"";
""998_buy"" -> ""998_reserve"";
""998_fund"" -> ""998_buy"";
""998_getEtherForTokens"" -> ""998_fixedLog"";
""998_fallback"" -> ""998_buy"";
""998_getMeOutOfHere"" -> ""998_sellMyTokensDaddy"";
""998_getEtherForTokens"" -> ""998_reserve"";
""998_buy"" -> ""998_getTokensForEther"";
""998_transferFrom"" -> ""998_transferTokens"";
""998_reserve"" -> ""998_balance"";
""998_transferTokens"" -> ""998_sell"";
""998_transfer"" -> ""998_transferTokens"";
""998_buyPrice"" -> ""998_getTokensForEther"";
""998_fallback"" -> ""998_withdrawOld"";
""998_sellPrice"" -> ""998_getEtherForTokens"";
""998_getTokensForEther"" -> ""998_fixedExp"";
""998_getEtherForTokens"" -> ""998_fixedExp"";
""998_sell"" -> ""998_getEtherForTokens"";
""998_getTokensForEther"" -> ""998_fixedLog"";
""998_withdraw"" -> ""998_dividends"";
""998_withdrawOld"" -> ""998_dividends"";
}
"
0xf49cdd50ad408d387d611f88a647179c3de3492b.sol,StandardToken,"contract StandardToken is ERC20, ERC223 { using SafeMath for uint; string public name; string public symbol; uint8 public decimals; uint public totalSupply; mapping (address => uint) balances; mapping (address => mapping (address => uint)) allowed; function StandardToken(string _name, string _symbol, uint8 _decimals, uint _totalSupply, address _admin) public { name = _name; symbol = _symbol; decimals = _decimals; totalSupply = _totalSupply * 10 ** uint(_decimals); balances[_admin] = totalSupply; }",0,"subgraph cluster_672_StandardToken {
label=""StandardToken"";
""672_StandardToken"" [label=""StandardToken""];
""672_decreaseApproval"" [label=""decreaseApproval""];
""672_isContract"" [label=""isContract""];
""672_tokenFallback"" [label=""tokenFallback""];
""672_transfer"" [label=""transfer""];
""672_increaseApproval"" [label=""increaseApproval""];
""672_transferFrom"" [label=""transferFrom""];
""672_approve"" [label=""approve""];
""672_allowance"" [label=""allowance""];
""672_fallback"" [label=""fallback""];
""672_balanceOf"" [label=""balanceOf""];
""672_transfer"" -> ""672_isContract"";
}
"
0x28c00eb09b999e466de06988746f55758854ec23.sol,UnityCoin,"contract UnityCoin { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant initialSupply = 100000000000000000000000000; address public owner; mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; uint256 public RATE = 0; bool canBuy = false; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed from, address indexed to, uint256 value); function UnityCoin() { owner = msg.sender; balances[owner] = initialSupply; }",0,"subgraph cluster_471_UnityCoin {
label=""UnityCoin"";
""471_convertTokens"" [label=""convertTokens""];
""471_totalSupply"" [label=""totalSupply""];
""471_transfer"" [label=""transfer""];
""471_UnityCoin"" [label=""UnityCoin""];
""471_fallback"" [label=""fallback""];
""471_allowance"" [label=""allowance""];
""471_transferFrom"" [label=""transferFrom""];
""471_balanceOf"" [label=""balanceOf""];
""471_approve"" [label=""approve""];
""471_fallback"" -> ""471_convertTokens"";
}
"
0x71c11a3b3a13a2e4a23c760722691952319ac7b9.sol,Roulette,contract Roulette { uint betAmount; uint necessaryBalance; uint nextRoundTimestamp; address creator; uint256 maxAmountAllowedInTheBank; mapping (address => uint256) winnings; uint8[] payouts; uint8[] numberRange; struct Bet { address player; uint8 betType; uint8 number; },0,"subgraph cluster_669_Roulette {
label=""Roulette"";
""669_bet"" [label=""bet""];
""669_spinWheel"" [label=""spinWheel""];
""669_cashOut"" [label=""cashOut""];
""669_addEther"" [label=""addEther""];
""669_getStatus"" [label=""getStatus""];
""669_constructor"" [label=""constructor""];
""669_creatorKill"" [label=""creatorKill""];
""669_takeProfits"" [label=""takeProfits""];
""669_spinWheel"" -> ""669_takeProfits"";
}
"
0xee6d409e9d08af082c2493ea955a0d3ea418dc0f.sol,FranklinFarmer,contract FranklinFarmer is Ownable { modifier secCheck(address aContract) { require(aContract != address(contractCall)); _; },0,"subgraph cluster_618_FranklinFarmer {
label=""FranklinFarmer"";
""618_getMyFranklin"" [label=""getMyFranklin""];
""618_myDividends"" [label=""myDividends""];
""618_getBalance"" [label=""getBalance""];
""618_useKnowledge"" [label=""useKnowledge""];
""618_calculateKnowledgeSell"" [label=""calculateKnowledgeSell""];
""618_seedMarket"" [label=""seedMarket""];
""618_calculateTrade"" [label=""calculateTrade""];
""618_getKnowledgeSinceLastUse"" [label=""getKnowledgeSinceLastUse""];
""618_devFee"" [label=""devFee""];
""618_constructor"" [label=""constructor""];
""618_sellKnowledge"" [label=""sellKnowledge""];
""618_returnAnyERC20Token"" [label=""returnAnyERC20Token""];
""618_buyKnowledge"" [label=""buyKnowledge""];
""618_myTokens"" [label=""myTokens""];
""618_fallback"" [label=""fallback""];
""618_min"" [label=""min""];
""618_getMyKnowledge"" [label=""getMyKnowledge""];
""618_calculateKnowledgeBuySimple"" [label=""calculateKnowledgeBuySimple""];
""618_calculateKnowledgeBuy"" [label=""calculateKnowledgeBuy""];
""618_sellKnowledge"" -> ""618_getMyKnowledge"";
""618_returnAnyERC20Token"" -> ""618_onlyOwner"";
""618_sellKnowledge"" -> ""618_myTokens"";
""618_returnAnyERC20Token"" -> ""618_secCheck"";
""618_calculateKnowledgeBuySimple"" -> ""618_calculateKnowledgeBuy"";
""618_sellKnowledge"" -> ""618_devFee"";
""618_getKnowledgeSinceLastUse"" -> ""618_min"";
""618_buyKnowledge"" -> ""618_calculateKnowledgeBuy"";
""618_getMyKnowledge"" -> ""618_getKnowledgeSinceLastUse"";
""618_useKnowledge"" -> ""618_getMyKnowledge"";
""618_calculateKnowledgeBuy"" -> ""618_calculateTrade"";
""618_sellKnowledge"" -> ""618_calculateKnowledgeSell"";
""618_calculateKnowledgeSell"" -> ""618_calculateTrade"";
}
"
0x4ef6ea200f5b5fe49421c03cb7690abedca5d685.sol,OpiriaCrowdsale,"contract OpiriaCrowdsale is TimedPresaleCrowdsale, MintedCrowdsale, TokenCappedCrowdsale { using SafeMath for uint256; uint256 public presaleWeiLimit; address public tokensWallet; uint256 public totalBonus = 0; bool public hiddenCapTriggered; mapping(address => uint256) public bonusOf; function OpiriaCrowdsale(ERC20 _token, uint16 _initialEtherUsdRate, address _wallet, address _tokensWallet, uint256 _presaleOpeningTime, uint256 _presaleClosingTime, uint256 _openingTime, uint256 _closingTime ) public TimedPresaleCrowdsale(_presaleOpeningTime, _presaleClosingTime, _openingTime, _closingTime) Crowdsale(_initialEtherUsdRate, _wallet, _token) { setEtherUsdRate(_initialEtherUsdRate); tokensWallet = _tokensWallet; }",0,"subgraph cluster_2135_OpiriaCrowdsale {
label=""OpiriaCrowdsale"";
""2135_claimReservedTokens"" [label=""claimReservedTokens""];
""2135_sendTokensTo"" [label=""sendTokensTo""];
""2135_withdrawBonus"" [label=""withdrawBonus""];
""2135__saveBonus"" [label=""_saveBonus""];
""2135_unlockTokenTransfers"" [label=""unlockTokenTransfers""];
""2135_OpiriaCrowdsale"" [label=""OpiriaCrowdsale""];
""2135_increaseCap"" [label=""increaseCap""];
""2135__getTokenAmount"" [label=""_getTokenAmount""];
""2135_finalization"" [label=""finalization""];
""2135_triggerHiddenCap"" [label=""triggerHiddenCap""];
""2135_distributeBonus"" [label=""distributeBonus""];
""2135__getBonusPercent"" [label=""_getBonusPercent""];
""2135__processPurchase"" [label=""_processPurchase""];
""2135__preValidatePurchase"" [label=""_preValidatePurchase""];
""2135_setEtherUsdRate"" [label=""setEtherUsdRate""];
""2135__getBonusAmount"" [label=""_getBonusAmount""];
""2135_sendTokensTo"" -> ""2135_onlyOwner"";
""2135_claimReservedTokens"" -> ""2135__deliverTokens"";
""2135_unlockTokenTransfers"" -> ""2135_onlyOwner"";
""2135__getBonusAmount"" -> ""2135__getBonusPercent"";
""2135__preValidatePurchase"" -> ""2135__preValidatePurchase"";
""2135_finalization"" -> ""2135__deliverTokens"";
""2135_sendTokensTo"" -> ""2135_notExceedingSaleCap"";
""2135_OpiriaCrowdsale"" -> ""2135_Crowdsale"";
""2135_setEtherUsdRate"" -> ""2135_onlyOwner"";
""2135__preValidatePurchase"" -> ""2135_isPresale"";
""2135__saveBonus"" -> ""2135__getBonusAmount"";
""2135_finalization"" -> ""2135_finalization"";
""2135_OpiriaCrowdsale"" -> ""2135_setEtherUsdRate"";
""2135_withdrawBonus"" -> ""2135__deliverTokens"";
""2135_distributeBonus"" -> ""2135_onlyOwner"";
""2135__processPurchase"" -> ""2135__saveBonus"";
""2135_claimReservedTokens"" -> ""2135_onlyOwner"";
""2135_OpiriaCrowdsale"" -> ""2135_TimedPresaleCrowdsale"";
""2135_increaseCap"" -> ""2135_onlyOwner"";
""2135__getBonusPercent"" -> ""2135_isPresale"";
""2135__preValidatePurchase"" -> ""2135_notExceedingSaleCap"";
""2135_triggerHiddenCap"" -> ""2135_onlyOwner"";
""2135__preValidatePurchase"" -> ""2135__getTokenAmount"";
""2135_distributeBonus"" -> ""2135__deliverTokens"";
""2135__preValidatePurchase"" -> ""2135__getBonusAmount"";
""2135__processPurchase"" -> ""2135__deliverTokens"";
}
"
0x013620bf5142f9d8487e92c1d514c38e1b086613.sol,Etherumble,contract Etherumble { struct PlayerBets { address addPlayer; uint amount; },0,"subgraph cluster_384_Etherumble {
label=""Etherumble"";
""384_callback"" [label=""callback""];
""384_getPlayerAddress"" [label=""getPlayerAddress""];
""384_Lottery"" [label=""Lottery""];
""384_getPlayerBet"" [label=""getPlayerBet""];
""384_getLastWinnerTicket"" [label=""getLastWinnerTicket""];
""384_fallback"" [label=""fallback""];
""384_getActivePlayers"" [label=""getActivePlayers""];
""384_withrawFee"" [label=""withrawFee""];
""384_getLastWinner"" [label=""getLastWinner""];
""384_withrawWin"" [label=""withrawWin""];
""384_getTotalGames"" [label=""getTotalGames""];
""384_endLottery"" [label=""endLottery""];
""384_getEndBlock"" [label=""getEndBlock""];
""384_destroykill"" [label=""destroykill""];
""384_checkinter"" [label=""checkinter""];
""384_withrawFee"" -> ""384_isOwner"";
""384_endLottery"" -> ""384_withrawWin"";
""384_destroykill"" -> ""384_isOwner"";
""384_fallback"" -> ""384_hasValue"";
""384_callback"" -> ""384_endLottery"";
""384_checkinter"" -> ""384_endLottery"";
""384_callback"" -> ""384_isOwner"";
""384_fallback"" -> ""384_checkinter"";
}
"
0xef7c7254c290df3d167182356255cdfd8d3b400b.sol,Vitaluck,contract Vitaluck { address ceoAddress = 0x46d9112533ef677059c430E515775e358888e38b; address cfoAddress = 0x23a49A9930f5b562c6B1096C3e6b5BEc133E8B2E; string MagicKey; uint256 minBetValue = 50000000000000000; uint256 currentJackpot; modifier onlyCeo() { require (msg.sender == ceoAddress); _; },0,"subgraph cluster_598_Vitaluck {
label=""Vitaluck"";
""598_GetBet"" [label=""GetBet""];
""598_fallback"" [label=""fallback""];
""598_GetUserBets"" [label=""GetUserBets""];
""598_GetStats"" [label=""GetStats""];
""598_GetLastBetUser"" [label=""GetLastBetUser""];
""598_modifyCfo"" [label=""modifyCfo""];
""598_manuallyResetGame"" [label=""manuallyResetGame""];
""598_GetWinningAddress"" [label=""GetWinningAddress""];
""598_Play"" [label=""Play""];
""598_GetCurrentNumbers"" [label=""GetCurrentNumbers""];
""598_modifyRandomNumber2"" [label=""modifyRandomNumber2""];
""598_modifyCeo"" [label=""modifyCeo""];
""598_modifyCeo"" -> ""598_onlyCeo"";
""598_modifyRandomNumber2"" -> ""598_onlyCeo"";
""598_manuallyResetGame"" -> ""598_onlyCeo"";
""598_fallback"" -> ""598_Play"";
""598_modifyCfo"" -> ""598_onlyCeo"";
}
"
0xe1e83a85c9db1bbd7cfab3e6bffaf255c5013adb.sol,FeeMultiToken,"contract FeeMultiToken is Ownable, MultiToken { using CheckedERC20 for ERC20; uint256 public constant TOTAL_PERCRENTS = 1000000; uint256 public lendFee; uint256 public changeFee; uint256 public refferalFee; function init(ERC20[] _tokens, uint256[] _weights, string _name, string _symbol, uint8 ) public { super.init(_tokens, _weights, _name, _symbol, 18); }",0,"subgraph cluster_2352_FeeMultiToken {
label=""FeeMultiToken"";
""2352_changeWithRef"" [label=""changeWithRef""];
""2352_setRefferalFee"" [label=""setRefferalFee""];
""2352_init"" [label=""init""];
""2352_setChangeFee"" [label=""setChangeFee""];
""2352_lend"" [label=""lend""];
""2352_setLendFee"" [label=""setLendFee""];
""2352_getReturn"" [label=""getReturn""];
""2352_change"" [label=""change""];
""2352_init"" -> ""2352_init"";
""2352_lend"" -> ""2352_lend"";
""2352_getReturn"" -> ""2352_getReturn"";
""2352_setLendFee"" -> ""2352_onlyOwner"";
""2352_setRefferalFee"" -> ""2352_onlyOwner"";
""2352_changeWithRef"" -> ""2352_change"";
""2352_change"" -> ""2352_changeWithRef"";
""2352_setChangeFee"" -> ""2352_onlyOwner"";
}
"
0xc0360a3507655e619cdf7e6ca616d9ddec4dec95.sol,MintableToken,"contract MintableToken is StandardToken, Ownable { event Mint(address indexed to, uint256 amount); event MintFinished(); event SaleAgentUpdated(address currentSaleAgent); bool public mintingFinished = false; address public saleAgent; modifier notLocked() { require(msg.sender == owner || msg.sender == saleAgent || mintingFinished); _; }",0,"subgraph cluster_784_MintableToken {
label=""MintableToken"";
""784_finishMinting"" [label=""finishMinting""];
""784_setSaleAgent"" [label=""setSaleAgent""];
""784_transferFrom"" [label=""transferFrom""];
""784_transfer"" [label=""transfer""];
""784_mint"" [label=""mint""];
""784_transferFrom"" -> ""784_notLocked"";
""784_transfer"" -> ""784_transfer"";
""784_transfer"" -> ""784_notLocked"";
""784_transferFrom"" -> ""784_transferFrom"";
}
"
0x400784d4d1fe603b2e7a96416fa9a1afadf47009.sol,UncTokenSale,"contract UncTokenSale is SafeMath, Pausable { address public beneficiary; UncToken public token; uint public hardCap; uint public highBonusRate = 115; uint public lowBonusRate = 110; uint public constant highBonus = 160000000000000000000; uint public constant minContribution = 4000000000000000000; uint public constant preMaxContribution = 200000000000000000000; uint public constant mainMaxContribution = 200000000000000000000; mapping(address => bool) public isVerifier; mapping(address => bool) public kycVerified; uint public preSaleTime; uint public mainSaleTime; uint public endSaleTime; uint public amountRaised; bool public beforeSale = true; bool public preSale = false; bool public mainSale = false; bool public saleEnded = false; bool public hardCapReached = false; mapping(address => address) public timeLocks; uint public rate = 45000; uint public constant lowRate = 10000; uint public constant highRate = 1000000; mapping(address => uint256) public contributionAmtOf; mapping(address => uint256) public tokenBalanceOf; mapping(address => uint256) public teamTokenBalanceOf; event HardReached(address _beneficiary, uint _amountRaised); event BalanceTransfer(address _to, uint _amount); event AddedOffChain(address indexed _beneficiary, uint256 tokensAllocated); event RateChanged(uint newRate); event VerifiedKYC(address indexed person); modifier beforeEnd() { require (now < endSaleTime); _; }",0,"subgraph cluster_1815_UncTokenSale {
label=""UncTokenSale"";
""1815_terminate"" [label=""terminate""];
""1815_removeVerifier"" [label=""removeVerifier""];
""1815_startPreSale"" [label=""startPreSale""];
""1815_endSale"" [label=""endSale""];
""1815_burnUnsoldTokens"" [label=""burnUnsoldTokens""];
""1815_constructor"" [label=""constructor""];
""1815_offChainTrans"" [label=""offChainTrans""];
""1815_fallback"" [label=""fallback""];
""1815_updateMainSaleTime"" [label=""updateMainSaleTime""];
""1815_beneficiaryWithdrawal"" [label=""beneficiaryWithdrawal""];
""1815_tokenTransfer"" [label=""tokenTransfer""];
""1815_updateEndSaleTime"" [label=""updateEndSaleTime""];
""1815_releaseLock"" [label=""releaseLock""];
""1815_updatePreSaleTime"" [label=""updatePreSaleTime""];
""1815_addVerifier"" [label=""addVerifier""];
""1815_verifyKYC"" [label=""verifyKYC""];
""1815_startMainSale"" [label=""startMainSale""];
""1815_moveReleaseTime"" [label=""moveReleaseTime""];
""1815_setRate"" [label=""setRate""];
""1815_allocateTokens"" [label=""allocateTokens""];
""1815_checkHardReached"" [label=""checkHardReached""];
""1815_allocateTokens"" -> ""1815_safeMul"";
""1815_endSale"" -> ""1815_onlyOwner"";
""1815_allocateTokens"" -> ""1815_safeAdd"";
""1815_verifyKYC"" -> ""1815_verifierOnly"";
""1815_startPreSale"" -> ""1815_onlyOwner"";
""1815_startMainSale"" -> ""1815_onlyOwner"";
""1815_fallback"" -> ""1815_safeAdd"";
""1815_tokenTransfer"" -> ""1815_onlyOwner"";
""1815_fallback"" -> ""1815_allocateTokens"";
""1815_offChainTrans"" -> ""1815_onlyOwner"";
""1815_addVerifier"" -> ""1815_onlyOwner"";
""1815_updateMainSaleTime"" -> ""1815_onlyOwner"";
""1815_burnUnsoldTokens"" -> ""1815_onlyOwner"";
""1815_fallback"" -> ""1815_whenNotPaused"";
""1815_terminate"" -> ""1815_onlyOwner"";
""1815_endSale"" -> ""1815_afterStart"";
""1815_updateEndSaleTime"" -> ""1815_onlyOwner"";
""1815_offChainTrans"" -> ""1815_safeAdd"";
""1815_setRate"" -> ""1815_onlyOwner"";
""1815_beneficiaryWithdrawal"" -> ""1815_onlyOwner"";
""1815_burnUnsoldTokens"" -> ""1815_afterEnd"";
""1815_moveReleaseTime"" -> ""1815_onlyOwner"";
""1815_startMainSale"" -> ""1815_afterStart"";
""1815_removeVerifier"" -> ""1815_onlyOwner"";
""1815_allocateTokens"" -> ""1815_safeDiv"";
""1815_updatePreSaleTime"" -> ""1815_onlyOwner"";
}
"
0x8aed6360f228a232cecfa86c64e9aff507aa84a6.sol,Migrations,contract Migrations { address public owner; uint public last_completed_migration; modifier restricted() { if (msg.sender == owner) _; },0,"subgraph cluster_698_Migrations {
label=""Migrations"";
""698_setCompleted"" [label=""setCompleted""];
""698_constructor"" [label=""constructor""];
""698_upgrade"" [label=""upgrade""];
""698_upgrade"" -> ""698_restricted"";
""698_setCompleted"" -> ""698_restricted"";
}
"
0x6d0fd5dbc5c73d4e156ead77ed7ab115313dfbca.sol,ItemToken,"contract ItemToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; address private charityAddress; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private previousPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => uint256) private charityCutOfItem; mapping (uint256 => address) private approvedOfItem; constructor() public { owner = msg.sender; admins[owner] = true; }",0,"subgraph cluster_1489_ItemToken {
label=""ItemToken"";
""1489_constructor"" [label=""constructor""];
""1489_approvedFor"" [label=""approvedFor""];
""1489_priceOf"" [label=""priceOf""];
""1489_setOwner"" [label=""setOwner""];
""1489_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1489_enableERC721"" [label=""enableERC721""];
""1489_listItem"" [label=""listItem""];
""1489_listMultipleItems"" [label=""listMultipleItems""];
""1489_withdrawAmount"" [label=""withdrawAmount""];
""1489_symbol"" [label=""symbol""];
""1489_approve"" [label=""approve""];
""1489__transfer"" [label=""_transfer""];
""1489_calculateNextPrice"" [label=""calculateNextPrice""];
""1489_isAdmin"" [label=""isAdmin""];
""1489_charityCutOf"" [label=""charityCutOf""];
""1489_tokensOf"" [label=""tokensOf""];
""1489_calculateDevCut"" [label=""calculateDevCut""];
""1489_name"" [label=""name""];
""1489_tokenExists"" [label=""tokenExists""];
""1489_addAdmin"" [label=""addAdmin""];
""1489_isContract"" [label=""isContract""];
""1489_transferFrom"" [label=""transferFrom""];
""1489_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1489_setCharity"" [label=""setCharity""];
""1489_nextPriceOf"" [label=""nextPriceOf""];
""1489_ownerOf"" [label=""ownerOf""];
""1489_allOf"" [label=""allOf""];
""1489_withdrawAll"" [label=""withdrawAll""];
""1489_implementsERC721"" [label=""implementsERC721""];
""1489_startingPriceOf"" [label=""startingPriceOf""];
""1489_previousPriceOf"" [label=""previousPriceOf""];
""1489_setItemRegistry"" [label=""setItemRegistry""];
""1489_ownerkill"" [label=""ownerkill""];
""1489_totalSupply"" [label=""totalSupply""];
""1489_transfer"" [label=""transfer""];
""1489_balanceOf"" [label=""balanceOf""];
""1489_removeAdmin"" [label=""removeAdmin""];
""1489_readCharityAddress"" [label=""readCharityAddress""];
""1489_buy"" [label=""buy""];
""1489_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1489__transfer"" -> ""1489_tokenExists"";
""1489_listItem"" -> ""1489_onlyAdmins"";
""1489_allOf"" -> ""1489_charityCutOf"";
""1489_addAdmin"" -> ""1489_onlyOwner"";
""1489_setOwner"" -> ""1489_onlyOwner"";
""1489_buy"" -> ""1489_nextPriceOf"";
""1489_listItemFromRegistry"" -> ""1489_listItem"";
""1489_balanceOf"" -> ""1489_ownerOf"";
""1489_nextPriceOf"" -> ""1489_calculateNextPrice"";
""1489_transferFrom"" -> ""1489__transfer"";
""1489_populateFromItemRegistry"" -> ""1489_listItemFromRegistry"";
""1489_allOf"" -> ""1489_priceOf"";
""1489__transfer"" -> ""1489_ownerOf"";
""1489_enableERC721"" -> ""1489_onlyOwner"";
""1489_tokensOf"" -> ""1489_ownerOf"";
""1489_buy"" -> ""1489_previousPriceOf"";
""1489_withdrawAmount"" -> ""1489_onlyOwner"";
""1489_transfer"" -> ""1489__transfer"";
""1489_transfer"" -> ""1489_onlyERC721"";
""1489_populateFromItemRegistry"" -> ""1489_onlyOwner"";
""1489_removeAdmin"" -> ""1489_onlyOwner"";
""1489_setCharity"" -> ""1489_onlyOwner"";
""1489_transfer"" -> ""1489_ownerOf"";
""1489_transferFrom"" -> ""1489_onlyERC721"";
""1489_tokenExists"" -> ""1489_priceOf"";
""1489_buy"" -> ""1489_calculateDevCut"";
""1489_allOf"" -> ""1489_nextPriceOf"";
""1489_buy"" -> ""1489_priceOf"";
""1489_approve"" -> ""1489_onlyERC721"";
""1489_approve"" -> ""1489_tokenExists"";
""1489_tokensOf"" -> ""1489_balanceOf"";
""1489_setItemRegistry"" -> ""1489_onlyOwner"";
""1489_buy"" -> ""1489_charityCutOf"";
""1489_buy"" -> ""1489_ownerOf"";
""1489_buy"" -> ""1489_isContract"";
""1489_withdrawAll"" -> ""1489_onlyOwner"";
""1489_transferFrom"" -> ""1489_approvedFor"";
""1489_listMultipleItems"" -> ""1489_listItem"";
""1489_nextPriceOf"" -> ""1489_priceOf"";
""1489_allOf"" -> ""1489_ownerOf"";
""1489_buy"" -> ""1489__transfer"";
""1489_listMultipleItems"" -> ""1489_onlyAdmins"";
""1489_approve"" -> ""1489_ownerOf"";
""1489_ownerkill"" -> ""1489_onlyOwner"";
""1489_allOf"" -> ""1489_startingPriceOf"";
""1489_listItemFromRegistry"" -> ""1489_onlyOwner"";
}
"
0xdc57e9b624b931aa8202f3a8d54f09fa8ce7981f.sol,OpenSesameToken,"contract OpenSesameToken is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 210000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function OpenSesameToken() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",0,"subgraph cluster_706_OpenSesameToken {
label=""OpenSesameToken"";
""706__transfer"" [label=""_transfer""];
""706_OpenSesameToken"" [label=""OpenSesameToken""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x01e6a8af629cc06ff37755a61d9e7dd1135d8c6a.sol,Factory,"contract Factory { using SafeMath for uint256; address public owner; address public oracle_address; address public user_contract; address internal deployer_address; Deployer_Interface internal deployer; address public token; uint public fee; uint public swapFee; uint public duration; uint public multiplier; uint public token_ratio; address[] public contracts; uint[] public startDates; address public memberContract; uint whitelistedTypes; mapping(address => uint) public created_contracts; mapping(address => uint) public token_dates; mapping(uint => address) public long_tokens; mapping(uint => address) public short_tokens; mapping(address => uint) public token_type; event ContractCreation(address _sender, address _created); modifier onlyOwner() { require(msg.sender == owner); _; }",0,"subgraph cluster_2283_Factory {
label=""Factory"";
""2283_payToken"" [label=""payToken""];
""2283_token"" [label=""token""];
""2283_constructor"" [label=""constructor""];
""2283_setFee"" [label=""setFee""];
""2283_deployTokenContract"" [label=""deployTokenContract""];
""2283_setUserContract"" [label=""setUserContract""];
""2283_isWhitelisted"" [label=""isWhitelisted""];
""2283_setBaseToken"" [label=""setBaseToken""];
""2283_setDeployer"" [label=""setDeployer""];
""2283_setMemberContract"" [label=""setMemberContract""];
""2283_getVariables"" [label=""getVariables""];
""2283_deployContract"" [label=""deployContract""];
""2283_fallback"" [label=""fallback""];
""2283_fee"" [label=""fee""];
""2283_createToken"" [label=""createToken""];
""2283_getTokens"" [label=""getTokens""];
""2283_withdrawFees"" [label=""withdrawFees""];
""2283_getDateCount"" [label=""getDateCount""];
""2283_getCount"" [label=""getCount""];
""2283_init"" [label=""init""];
""2283_setOwner"" [label=""setOwner""];
""2283_setSwapFee"" [label=""setSwapFee""];
""2283_setOracleAddress"" [label=""setOracleAddress""];
""2283_setVariables"" [label=""setVariables""];
""2283_getTokenType"" [label=""getTokenType""];
""2283_deployContract"" -> ""2283_isWhitelisted"";
""2283_setFee"" -> ""2283_onlyOwner"";
""2283_setBaseToken"" -> ""2283_onlyOwner"";
""2283_setDeployer"" -> ""2283_onlyOwner"";
""2283_withdrawFees"" -> ""2283_onlyOwner"";
""2283_setOracleAddress"" -> ""2283_onlyOwner"";
""2283_setSwapFee"" -> ""2283_onlyOwner"";
""2283_setMemberContract"" -> ""2283_onlyOwner"";
""2283_setUserContract"" -> ""2283_onlyOwner"";
""2283_setVariables"" -> ""2283_onlyOwner"";
""2283_setOwner"" -> ""2283_onlyOwner"";
}
"
0xf293df3337bdfc76a454ce00b3d2fa5c8ba086a5.sol,BitRich,"contract BitRich is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 7000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 10000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_948_BitRich {
label=""BitRich"";
""948_transferOwnership"" [label=""transferOwnership""];
""948_withdrawALTokenss"" [label=""withdrawALTokenss""];
""948_fallback"" [label=""fallback""];
""948_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""948_transferFrom"" [label=""transferFrom""];
""948_approve"" [label=""approve""];
""948_transfer"" [label=""transfer""];
""948_BitRich"" [label=""BitRich""];
""948_updateTokensPerEth"" [label=""updateTokensPerEth""];
""948_distr"" [label=""distr""];
""948_getTokenBalance"" [label=""getTokenBalance""];
""948_burn"" [label=""burn""];
""948_getTokens"" [label=""getTokens""];
""948_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""948_finishDistribution"" [label=""finishDistribution""];
""948_allowance"" [label=""allowance""];
""948_doAirdrop"" [label=""doAirdrop""];
""948_withdraw"" [label=""withdraw""];
""948_balanceOf"" [label=""balanceOf""];
""948_burn"" -> ""948_onlyOwner"";
""948_adminClaimAirdrop"" -> ""948_doAirdrop"";
""948_transferFrom"" -> ""948_onlyPayloadSize"";
""948_updateTokensPerEth"" -> ""948_onlyOwner"";
""948_getTokens"" -> ""948_distr"";
""948_BitRich"" -> ""948_distr"";
""948_adminClaimAirdrop"" -> ""948_onlyOwner"";
""948_fallback"" -> ""948_getTokens"";
""948_transfer"" -> ""948_onlyPayloadSize"";
""948_getTokens"" -> ""948_canDistr"";
""948_distr"" -> ""948_canDistr"";
""948_finishDistribution"" -> ""948_onlyOwner"";
""948_withdrawALTokenss"" -> ""948_onlyOwner"";
""948_adminClaimAirdropMultiple"" -> ""948_onlyOwner"";
""948_adminClaimAirdropMultiple"" -> ""948_doAirdrop"";
""948_transferOwnership"" -> ""948_onlyOwner"";
""948_finishDistribution"" -> ""948_canDistr"";
""948_withdraw"" -> ""948_onlyOwner"";
}
"
0x6d3543d4b11683847697f5b9a3a9d116cf13dedd.sol,VideoPoker,"contract VideoPoker is VideoPokerUtils, Bankrollable, UsingAdmin { struct Game { uint32 userId; uint64 bet; uint16 payTableId; uint32 iBlock; uint32 iHand; uint8 draws; uint32 dBlock; uint32 dHand; uint8 handRank; }",0,"subgraph cluster_3760_VideoPoker {
label=""VideoPoker"";
""3760_addCredits"" [label=""addCredits""];
""3760_constructor"" [label=""constructor""];
""3760_betFromGame"" [label=""betFromGame""];
""3760_totalCredits"" [label=""totalCredits""];
""3760_totalWagered"" [label=""totalWagered""];
""3760_totalWon"" [label=""totalWon""];
""3760_curUserId"" [label=""curUserId""];
""3760_numPayTables"" [label=""numPayTables""];
""3760_changeSettings"" [label=""changeSettings""];
""3760__createNewGame"" [label=""_createNewGame""];
""3760_getCurPayTable"" [label=""getCurPayTable""];
""3760__finalize"" [label=""_finalize""];
""3760__draw"" [label=""_draw""];
""3760_getCollateral"" [label=""getCollateral""];
""3760__betFailure"" [label=""_betFailure""];
""3760_addPayTable"" [label=""addPayTable""];
""3760_draw"" [label=""draw""];
""3760__finalizeFailure"" [label=""_finalizeFailure""];
""3760__addPayTable"" [label=""_addPayTable""];
""3760_getDHand"" [label=""getDHand""];
""3760__creditUser"" [label=""_creditUser""];
""3760_curId"" [label=""curId""];
""3760_finalize"" [label=""finalize""];
""3760_getDHandRank"" [label=""getDHandRank""];
""3760_bet"" [label=""bet""];
""3760_curMaxBet"" [label=""curMaxBet""];
""3760_getIHand"" [label=""getIHand""];
""3760_minBet"" [label=""minBet""];
""3760_getPayTable"" [label=""getPayTable""];
""3760_curPayTableId"" [label=""curPayTableId""];
""3760_cashOut"" [label=""cashOut""];
""3760__drawFailure"" [label=""_drawFailure""];
""3760_effectiveMaxBet"" [label=""effectiveMaxBet""];
""3760_getWhitelistOwner"" [label=""getWhitelistOwner""];
""3760_betWithCredits"" [label=""betWithCredits""];
""3760_maxBet"" [label=""maxBet""];
""3760__uncreditUser"" [label=""_uncreditUser""];
""3760_constructor"" -> ""3760__addPayTable"";
""3760_getCurPayTable"" -> ""3760_getPayTable"";
""3760_addPayTable"" -> ""3760_fromAdmin"";
""3760_cashOut"" -> ""3760__uncreditUser"";
""3760_betFromGame"" -> ""3760_betWithCredits"";
""3760_constructor"" -> ""3760_constructor"";
""3760_bet"" -> ""3760__createNewGame"";
""3760_getIHand"" -> ""3760_getHand"";
""3760__finalize"" -> ""3760_getHand"";
""3760_getDHandRank"" -> ""3760_getDHand"";
""3760_addCredits"" -> ""3760__creditUser"";
""3760_betFromGame"" -> ""3760__betFailure"";
""3760_betWithCredits"" -> ""3760_curMaxBet"";
""3760__finalize"" -> ""3760_drawToHand"";
""3760_getDHand"" -> ""3760_drawToHand"";
""3760_getDHandRank"" -> ""3760_getHandRank"";
""3760_finalize"" -> ""3760__finalize"";
""3760_bet"" -> ""3760_curMaxBet"";
""3760_finalize"" -> ""3760__finalizeFailure"";
""3760__draw"" -> ""3760__drawFailure"";
""3760_betWithCredits"" -> ""3760__createNewGame"";
""3760__finalize"" -> ""3760__finalizeFailure"";
""3760_bet"" -> ""3760__betFailure"";
""3760_effectiveMaxBet"" -> ""3760_curMaxBet"";
""3760_draw"" -> ""3760__drawFailure"";
""3760__finalize"" -> ""3760_getHandRank"";
""3760_changeSettings"" -> ""3760_fromAdmin"";
""3760_betFromGame"" -> ""3760_finalize"";
""3760_getWhitelistOwner"" -> ""3760_getAdmin"";
""3760__finalize"" -> ""3760__creditUser"";
""3760__draw"" -> ""3760_getHand"";
""3760_draw"" -> ""3760__draw"";
""3760_addPayTable"" -> ""3760__addPayTable"";
""3760_curMaxBet"" -> ""3760_bankrollAvailable"";
""3760_betWithCredits"" -> ""3760__betFailure"";
}
"
0x1b528346f0631dc465813a757eaf38035b44b9e4.sol,KCBToken,"contract KCBToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function KCBToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000e18; balances[0x743fd6d924ae32ccddb377f11d43129cdd0d0d00] = _totalSupply; Transfer(address(0), 0x743fd6d924ae32ccddb377f11d43129cdd0d0d00, _totalSupply); }",0,"subgraph cluster_543_KCBToken {
label=""KCBToken"";
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_KCBToken"" [label=""KCBToken""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xcfed26885acf068f42bdf90a38d5694006f8f611.sol,HodlBetToken,"contract HodlBetToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 1000000000000000000000; balances[0xcdE3F95B177a4c2b77916433bC8D2dedA35c0922] = _totalSupply; emit Transfer(address(0), 0xcdE3F95B177a4c2b77916433bC8D2dedA35c0922, _totalSupply); }",0,"subgraph cluster_543_HodlBetToken {
label=""HodlBetToken"";
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_constructor"" [label=""constructor""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x32fcdefa047d8edeea0c21a50179b18181074c60.sol,CryptoSanguoToken,"contract CryptoSanguoToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256 private min_value = 0.01 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function CryptoSanguoToken () public { owner = msg.sender; admins[owner] = true; issueCard(1, 7, 5); }",0,"subgraph cluster_1362_CryptoSanguoToken {
label=""CryptoSanguoToken"";
""1362_enableERC721"" [label=""enableERC721""];
""1362_totalSupply"" [label=""totalSupply""];
""1362_name"" [label=""name""];
""1362_transfer"" [label=""transfer""];
""1362_transferFrom"" [label=""transferFrom""];
""1362_CryptoSanguoToken"" [label=""CryptoSanguoToken""];
""1362_listItem"" [label=""listItem""];
""1362_tokensOf"" [label=""tokensOf""];
""1362_issueCard"" [label=""issueCard""];
""1362_setOwner"" [label=""setOwner""];
""1362_ownerOf"" [label=""ownerOf""];
""1362_balanceOf"" [label=""balanceOf""];
""1362_removeAdmin"" [label=""removeAdmin""];
""1362_approve"" [label=""approve""];
""1362_buy"" [label=""buy""];
""1362_startingPriceOf"" [label=""startingPriceOf""];
""1362_implementsERC721"" [label=""implementsERC721""];
""1362_changePrice"" [label=""changePrice""];
""1362_nextPriceOf"" [label=""nextPriceOf""];
""1362_setItemRegistry"" [label=""setItemRegistry""];
""1362_symbol"" [label=""symbol""];
""1362__transfer"" [label=""_transfer""];
""1362_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1362_isAdmin"" [label=""isAdmin""];
""1362_tokenExists"" [label=""tokenExists""];
""1362_withdrawAmount"" [label=""withdrawAmount""];
""1362_approvedFor"" [label=""approvedFor""];
""1362_listMultipleItems"" [label=""listMultipleItems""];
""1362_priceOf"" [label=""priceOf""];
""1362_allOf"" [label=""allOf""];
""1362_calculateNextPrice"" [label=""calculateNextPrice""];
""1362_addAdmin"" [label=""addAdmin""];
""1362_isContract"" [label=""isContract""];
""1362_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1362_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1362_withdrawAll"" [label=""withdrawAll""];
""1362_calculateDevCut"" [label=""calculateDevCut""];
""1362__transfer"" -> ""1362_ownerOf"";
""1362_transferFrom"" -> ""1362_approvedFor"";
""1362_withdrawAll"" -> ""1362_onlyOwner"";
""1362_tokensOf"" -> ""1362_balanceOf"";
""1362_CryptoSanguoToken"" -> ""1362_issueCard"";
""1362_listMultipleItems"" -> ""1362_listItem"";
""1362_approve"" -> ""1362_ownerOf"";
""1362_listItemFromRegistry"" -> ""1362_onlyOwner"";
""1362_changePrice"" -> ""1362_onlyAdmins"";
""1362_buy"" -> ""1362_calculateDevCut"";
""1362_allOf"" -> ""1362_nextPriceOf"";
""1362_buy"" -> ""1362__transfer"";
""1362_buy"" -> ""1362_ownerOf"";
""1362_transferFrom"" -> ""1362__transfer"";
""1362_allOf"" -> ""1362_ownerOf"";
""1362_tokenExists"" -> ""1362_priceOf"";
""1362_withdrawAmount"" -> ""1362_onlyOwner"";
""1362_transfer"" -> ""1362__transfer"";
""1362_allOf"" -> ""1362_startingPriceOf"";
""1362_approve"" -> ""1362_tokenExists"";
""1362__transfer"" -> ""1362_tokenExists"";
""1362_buy"" -> ""1362_priceOf"";
""1362_allOf"" -> ""1362_priceOf"";
""1362_listMultipleItems"" -> ""1362_onlyAdmins"";
""1362_addAdmin"" -> ""1362_onlyOwner"";
""1362_listItem"" -> ""1362_onlyAdmins"";
""1362_nextPriceOf"" -> ""1362_calculateNextPrice"";
""1362_nextPriceOf"" -> ""1362_priceOf"";
""1362_removeAdmin"" -> ""1362_onlyOwner"";
""1362_enableERC721"" -> ""1362_onlyOwner"";
""1362_populateFromItemRegistry"" -> ""1362_onlyOwner"";
""1362_buy"" -> ""1362_nextPriceOf"";
""1362_setOwner"" -> ""1362_onlyOwner"";
""1362_populateFromItemRegistry"" -> ""1362_listItemFromRegistry"";
""1362_setItemRegistry"" -> ""1362_onlyOwner"";
""1362_listItemFromRegistry"" -> ""1362_listItem"";
""1362_transferFrom"" -> ""1362_onlyERC721"";
""1362_transfer"" -> ""1362_ownerOf"";
""1362_transfer"" -> ""1362_onlyERC721"";
""1362_tokensOf"" -> ""1362_ownerOf"";
""1362_approve"" -> ""1362_onlyERC721"";
""1362_buy"" -> ""1362_isContract"";
""1362_balanceOf"" -> ""1362_ownerOf"";
""1362_issueCard"" -> ""1362_onlyAdmins"";
}
"
0x01805928b325078683818329526dab3f74865e10.sol,AumICO,"contract AumICO is usingOraclize, SafeMath { struct OperationInQueue { uint operationStartTime; uint depositedEther; address receiver; bool closed; }",0,"subgraph cluster_7303_AumICO {
label=""AumICO"";
""7303_updatePrice"" [label=""updatePrice""];
""7303_GetAdminAddress"" [label=""GetAdminAddress""];
""7303_ChangeEtherVault"" [label=""ChangeEtherVault""];
""7303_ChangeEtherGasProvider"" [label=""ChangeEtherGasProvider""];
""7303_GetQueueLength"" [label=""GetQueueLength""];
""7303_UpdateEtherPriceNow"" [label=""UpdateEtherPriceNow""];
""7303_AddToWhitelist"" [label=""AddToWhitelist""];
""7303_CheckQueue"" [label=""CheckQueue""];
""7303_getTokenBalance"" [label=""getTokenBalance""];
""7303_RemoveFromWhitelist"" [label=""RemoveFromWhitelist""];
""7303_changeTokenAddress"" [label=""changeTokenAddress""];
""7303_getEtherInContract"" [label=""getEtherInContract""];
""7303_ExtractEtherLeftOnContract"" [label=""ExtractEtherLeftOnContract""];
""7303_CheckSoftCap"" [label=""CheckSoftCap""];
""7303_sendTokens"" [label=""sendTokens""];
""7303_sendTokensForLEX"" [label=""sendTokensForLEX""];
""7303_tokenFallback"" [label=""tokenFallback""];
""7303_ChangeLEXTokenAddress"" [label=""ChangeLEXTokenAddress""];
""7303_AumICO"" [label=""AumICO""];
""7303_getTokenAddress"" [label=""getTokenAddress""];
""7303_IsOnWhitelist"" [label=""IsOnWhitelist""];
""7303_AdvanceQueue"" [label=""AdvanceQueue""];
""7303_ChangeTokenVaultAddress"" [label=""ChangeTokenVaultAddress""];
""7303_fallback"" [label=""fallback""];
""7303_getPrice"" [label=""getPrice""];
""7303___callback"" [label=""__callback""];
""7303_ChangeEtherGasProvider"" -> ""7303_onlyAdmin"";
""7303___callback"" -> ""7303_parseInt"";
""7303_fallback"" -> ""7303_safeSub"";
""7303_sendTokens"" -> ""7303_safeMul"";
""7303_sendTokensForLEX"" -> ""7303_safeSub"";
""7303_updatePrice"" -> ""7303_oraclize_query"";
""7303_UpdateEtherPriceNow"" -> ""7303_onlyAdmin"";
""7303_AdvanceQueue"" -> ""7303_CheckQueue"";
""7303_sendTokens"" -> ""7303_safeSub"";
""7303_ChangeLEXTokenAddress"" -> ""7303_onlyAdmin"";
""7303_tokenFallback"" -> ""7303_sendTokensForLEX"";
""7303_CheckQueue"" -> ""7303_sendTokens"";
""7303_UpdateEtherPriceNow"" -> ""7303_updatePrice"";
""7303_RemoveFromWhitelist"" -> ""7303_onlyAdmin"";
""7303_updatePrice"" -> ""7303_oraclize_getPrice"";
""7303_sendTokensForLEX"" -> ""7303_safeMul"";
""7303_ChangeTokenVaultAddress"" -> ""7303_onlyAdmin"";
""7303_ChangeEtherVault"" -> ""7303_onlyAdmin"";
""7303___callback"" -> ""7303_CheckQueue"";
""7303_fallback"" -> ""7303_sendTokens"";
""7303___callback"" -> ""7303_oraclize_cbAddress"";
""7303_GetQueueLength"" -> ""7303_safeSub"";
""7303_sendTokensForLEX"" -> ""7303_sendTokensForLEX"";
""7303_GetQueueLength"" -> ""7303_onlyAdmin"";
""7303_AdvanceQueue"" -> ""7303_onlyAdmin"";
""7303_sendTokens"" -> ""7303_safeDiv"";
""7303_fallback"" -> ""7303_safeAdd"";
""7303_ExtractEtherLeftOnContract"" -> ""7303_onlyAdmin"";
""7303_sendTokensForLEX"" -> ""7303_safeDiv"";
""7303_CheckQueue"" -> ""7303_updatePrice"";
""7303_AddToWhitelist"" -> ""7303_onlyAdmin"";
""7303_changeTokenAddress"" -> ""7303_onlyAdmin"";
""7303_fallback"" -> ""7303_updatePrice"";
""7303_CheckQueue"" -> ""7303_safeSub"";
""7303_CheckSoftCap"" -> ""7303_onlyAdmin"";
""7303_sendTokens"" -> ""7303_sendTokens"";
}
"
0x5365b7a3e4f68a84323792f2d0b44b0bbd5b6f0b.sol,BurnableToken,"contract BurnableToken is StandardToken, Ownable { event Burn(address indexed burner, uint256 amount); function burn(uint256 _amount) public { require(_amount > 0); require(_amount <= balances[msg.sender]); address burner = msg.sender; balances[burner] = balances[burner].sub(_amount); totalSupply = totalSupply.sub(_amount); Transfer(burner, address(0), _amount); Burn(burner, _amount); }",0,"subgraph cluster_646_BurnableToken {
label=""BurnableToken"";
""646_burnFrom"" [label=""burnFrom""];
""646_burn"" [label=""burn""];
""646_burnFrom"" -> ""646_onlyOwner"";
}
"
0x6f122109a8ece4af04baf2453318693633bd1246.sol,RocketToken,"contract RocketToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function RocketToken() public { symbol = ; name = ; decimals = 8; _totalSupply = 100000000000; balances[0xeAE55239EF5Bb78E41EEeDa62ab2D6c7f4da6706] = _totalSupply; emit Transfer(address(0),0xeAE55239EF5Bb78E41EEeDa62ab2D6c7f4da6706 , _totalSupply); }",0,"subgraph cluster_543_RocketToken {
label=""RocketToken"";
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_RocketToken"" [label=""RocketToken""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x5a9633b76eedb38ab04733682f1f422b4ce219b5.sol,TokenSwap,"contract TokenSwap is Ownable, Multiownable { using BadERC20Aware for ERC20; using SafeMath for uint256; enum Status {AddParties, WaitingDeposits, SwapConfirmed, SwapCanceled}",0,"subgraph cluster_2234_TokenSwap {
label=""TokenSwap"";
""2234__haveEveryoneDeposited"" [label=""_haveEveryoneDeposited""];
""2234__startLockup"" [label=""_startLockup""];
""2234__changeStatus"" [label=""_changeStatus""];
""2234_confirmSwap"" [label=""confirmSwap""];
""2234_removeParty"" [label=""removeParty""];
""2234_withdraw"" [label=""withdraw""];
""2234_cancelSwap"" [label=""cancelSwap""];
""2234__unlockedAmount"" [label=""_unlockedAmount""];
""2234__initializeLockupStages"" [label=""_initializeLockupStages""];
""2234__addLockupStage"" [label=""_addLockupStage""];
""2234__withdrawableFee"" [label=""_withdrawableFee""];
""2234_withdrawFee"" [label=""withdrawFee""];
""2234__validateLockupStages"" [label=""_validateLockupStages""];
""2234_constructor"" [label=""constructor""];
""2234_tokenFallback"" [label=""tokenFallback""];
""2234_reclaim"" [label=""reclaim""];
""2234_confirmParties"" [label=""confirmParties""];
""2234__withdrawableAmount"" [label=""_withdrawableAmount""];
""2234_addParty"" [label=""addParty""];
""2234__getUnlockedTokensPercentage"" [label=""_getUnlockedTokensPercentage""];
""2234_addParty"" -> ""2234_canAddParty"";
""2234_withdrawFee"" -> ""2234_canWithdrawFee"";
""2234_confirmParties"" -> ""2234_transferOwnershipWithHowMany"";
""2234_cancelSwap"" -> ""2234_canCancelSwap"";
""2234_withdraw"" -> ""2234_canWithdraw"";
""2234__initializeLockupStages"" -> ""2234__addLockupStage"";
""2234_reclaim"" -> ""2234_onlyParticipant"";
""2234_cancelSwap"" -> ""2234_onlyManyOwners"";
""2234__unlockedAmount"" -> ""2234__getUnlockedTokensPercentage"";
""2234_constructor"" -> ""2234__initializeLockupStages"";
""2234_withdrawFee"" -> ""2234_onlyOwner"";
""2234_confirmParties"" -> ""2234__changeStatus"";
""2234_withdrawFee"" -> ""2234__withdrawableFee"";
""2234_constructor"" -> ""2234__validateLockupStages"";
""2234_reclaim"" -> ""2234_canReclaim"";
""2234_confirmParties"" -> ""2234_onlyOwner"";
""2234_confirmParties"" -> ""2234_canConfirmParties"";
""2234_withdraw"" -> ""2234__withdrawableAmount"";
""2234_addParty"" -> ""2234_onlyOwner"";
""2234_confirmSwap"" -> ""2234__startLockup"";
""2234_withdraw"" -> ""2234_onlyParticipant"";
""2234_cancelSwap"" -> ""2234__changeStatus"";
""2234_removeParty"" -> ""2234_canRemoveParty"";
""2234__withdrawableAmount"" -> ""2234__unlockedAmount"";
""2234_confirmSwap"" -> ""2234_onlyManyOwners"";
""2234_removeParty"" -> ""2234_onlyOwner"";
""2234_confirmSwap"" -> ""2234__changeStatus"";
""2234__withdrawableFee"" -> ""2234__unlockedAmount"";
""2234_confirmSwap"" -> ""2234_canConfirmSwap"";
}
"
0xb4933b15b21924af2c18012c4da78b182f060107.sol,DateTime,contract DateTime { struct _DateTime { uint16 year; uint8 month; uint8 day; uint8 hour; uint8 minute; uint8 second; uint8 weekday; },0,"subgraph cluster_767_DateTime {
label=""DateTime"";
""767_parseTimestamp"" [label=""parseTimestamp""];
""767_toTimestamp"" [label=""toTimestamp""];
""767_leapYearsBefore"" [label=""leapYearsBefore""];
""767_getDay"" [label=""getDay""];
""767_getHour"" [label=""getHour""];
""767_getSecond"" [label=""getSecond""];
""767_isLeapYear"" [label=""isLeapYear""];
""767_getDaysInMonth"" [label=""getDaysInMonth""];
""767_getMonth"" [label=""getMonth""];
""767_getWeekday"" [label=""getWeekday""];
""767_getMinute"" [label=""getMinute""];
""767_getYear"" [label=""getYear""];
""767_getDaysInMonth"" -> ""767_isLeapYear"";
""767_parseTimestamp"" -> ""767_getWeekday"";
""767_parseTimestamp"" -> ""767_getMinute"";
""767_getDay"" -> ""767_parseTimestamp"";
""767_parseTimestamp"" -> ""767_getDaysInMonth"";
""767_parseTimestamp"" -> ""767_getSecond"";
""767_parseTimestamp"" -> ""767_leapYearsBefore"";
""767_parseTimestamp"" -> ""767_getHour"";
""767_getYear"" -> ""767_leapYearsBefore"";
""767_toTimestamp"" -> ""767_isLeapYear"";
""767_parseTimestamp"" -> ""767_getYear"";
""767_toTimestamp"" -> ""767_toTimestamp"";
""767_getYear"" -> ""767_isLeapYear"";
""767_getMonth"" -> ""767_parseTimestamp"";
}
"
0x27ce49590684308d22fe7adcb8b80976701774d3.sol,TheEthGame,contract TheEthGame { using SafeMath for uint256; struct Player { uint256 score; uint256 lastCellBoughtOnBlockNumber; uint256 numberOfCellsOwned; uint256 numberOfCellsBought; uint256 earnings; uint256 partialHarmonicSum; uint256 partialScoreSum; address referreal; bytes32 name; },0,"subgraph cluster_2032_TheEthGameTrophy {
label=""TheEthGameTrophy"";
""2032_name"" [label=""name""];
""2032_constructor"" [label=""constructor""];
""2032_description"" [label=""description""];
""2032_rank"" [label=""rank""];
""2032_message"" [label=""message""];
""2032_owner"" [label=""owner""];
""2032_award"" [label=""award""];
""2032_winner"" [label=""winner""];
""2032_creator"" [label=""creator""];
""2032_transfer"" [label=""transfer""];
}
"
0x4c902a3ff72dcf01bac6b9d0438565e649a87404.sol,EVOLUTION,contract EVOLUTION { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1289_EVOLUTION {
label=""EVOLUTION"";
""1289_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1289_purchaseTokens"" [label=""purchaseTokens""];
""1289_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1289_myTokens"" [label=""myTokens""];
""1289_setAdministrator"" [label=""setAdministrator""];
""1289_balanceOf"" [label=""balanceOf""];
""1289_sqrt"" [label=""sqrt""];
""1289_fallback"" [label=""fallback""];
""1289_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1289_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1289_withdraw"" [label=""withdraw""];
""1289_reinvest"" [label=""reinvest""];
""1289_disableWhitelist"" [label=""disableWhitelist""];
""1289_activateWhitelist"" [label=""activateWhitelist""];
""1289_transfer"" [label=""transfer""];
""1289_setStakingRequirement"" [label=""setStakingRequirement""];
""1289_buy"" [label=""buy""];
""1289_buyPrice"" [label=""buyPrice""];
""1289_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1289_redistribution"" [label=""redistribution""];
""1289_setName"" [label=""setName""];
""1289_sell"" [label=""sell""];
""1289_dividendsOf"" [label=""dividendsOf""];
""1289_exit"" [label=""exit""];
""1289_sellPrice"" [label=""sellPrice""];
""1289_constructor"" [label=""constructor""];
""1289_setSymbol"" [label=""setSymbol""];
""1289_totalSupply"" [label=""totalSupply""];
""1289_myDividends"" [label=""myDividends""];
""1289_setName"" -> ""1289_onlyAdministrator"";
""1289_ethereumToTokens_"" -> ""1289_sqrt"";
""1289_withdraw"" -> ""1289_myDividends"";
""1289_setSymbol"" -> ""1289_onlyAdministrator"";
""1289_exit"" -> ""1289_sell"";
""1289_fallback"" -> ""1289_purchaseTokens"";
""1289_purchaseTokens"" -> ""1289_ethereumToTokens_"";
""1289_calculateTokensReceived"" -> ""1289_ethereumToTokens_"";
""1289_buy"" -> ""1289_purchaseTokens"";
""1289_setStakingRequirement"" -> ""1289_onlyAdministrator"";
""1289_reinvest"" -> ""1289_myDividends"";
""1289_calculateEthereumReceived"" -> ""1289_tokensToEthereum_"";
""1289_sell"" -> ""1289_onlyBagholders"";
""1289_sell"" -> ""1289_tokensToEthereum_"";
""1289_withdraw"" -> ""1289_onlyStronghands"";
""1289_myTokens"" -> ""1289_balanceOf"";
""1289_myDividends"" -> ""1289_dividendsOf"";
""1289_buyPrice"" -> ""1289_tokensToEthereum_"";
""1289_transfer"" -> ""1289_onlyBagholders"";
""1289_transfer"" -> ""1289_myDividends"";
""1289_setAdministrator"" -> ""1289_onlyAdministrator"";
""1289_reinvest"" -> ""1289_purchaseTokens"";
""1289_transfer"" -> ""1289_withdraw"";
""1289_reinvest"" -> ""1289_onlyStronghands"";
""1289_sellPrice"" -> ""1289_tokensToEthereum_"";
""1289_exit"" -> ""1289_withdraw"";
}
"
0x2920e0b7d86ab76aa09bcddffedef081faaf6e2c.sol,BloomToken,"contract BloomToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function BloomToken() public { owner = msg.sender; balances[owner]=1000; }",0,"subgraph cluster_401_BloomToken {
label=""BloomToken"";
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_mintTo"" [label=""mintTo""];
""401_changeOwner"" [label=""changeOwner""];
""401_balanceOf"" [label=""balanceOf""];
""401_totalSupply"" [label=""totalSupply""];
""401_transfer"" [label=""transfer""];
""401_BloomToken"" [label=""BloomToken""];
""401_approve"" [label=""approve""];
""401_killContract"" [label=""killContract""];
""401_fallback"" [label=""fallback""];
""401_transferFrom"" [label=""transferFrom""];
}
"
0x5314dd28de3f215647b64ccb3701e6098a80d080.sol,CaData,"contract CaData is ADM312, ERC721 { function CaData() public { COO = msg.sender; CTO = msg.sender; CFO = msg.sender; createCustomAtom(0,0,4,0,0,0,0); }",0,"subgraph cluster_907_CaData {
label=""CaData"";
""907_setAtomSons"" [label=""setAtomSons""];
""907_ownerAtomsCount"" [label=""ownerAtomsCount""];
""907_incRandNonce"" [label=""incRandNonce""];
""907_setAtomFath"" [label=""setAtomFath""];
""907_balanceOf"" [label=""balanceOf""];
""907_totalSupply"" [label=""totalSupply""];
""907_setAtomMoth"" [label=""setAtomMoth""];
""907_ownerOf"" [label=""ownerOf""];
""907__transfer"" [label=""_transfer""];
""907_setAtomGen"" [label=""setAtomGen""];
""907_bonusReceived"" [label=""bonusReceived""];
""907_withdrawBalance"" [label=""withdrawBalance""];
""907_setAtomDna"" [label=""setAtomDna""];
""907_fallback"" [label=""fallback""];
""907_setBonusReceived"" [label=""setBonusReceived""];
""907_pushAtom"" [label=""pushAtom""];
""907_CaData"" [label=""CaData""];
""907_atoms"" [label=""atoms""];
""907_takeOwnership"" [label=""takeOwnership""];
""907_setAtomCool"" [label=""setAtomCool""];
""907_setDnaExist"" [label=""setDnaExist""];
""907_setAtomLev"" [label=""setAtomLev""];
""907_setAtomIsReady"" [label=""setAtomIsReady""];
""907_approve"" [label=""approve""];
""907_setAtomIsRent"" [label=""setAtomIsRent""];
""907_setOwnerAtomsCount"" [label=""setOwnerAtomsCount""];
""907_setAtomIsBuy"" [label=""setAtomIsBuy""];
""907_transfer"" [label=""transfer""];
""907_setAtomOwner"" [label=""setAtomOwner""];
""907_CTO"" [label=""CTO""];
""907_atomOwner"" [label=""atomOwner""];
""907_createCustomAtom"" [label=""createCustomAtom""];
""907_kill"" [label=""kill""];
""907_incRandNonce"" -> ""907_onlyContract"";
""907_CaData"" -> ""907_createCustomAtom"";
""907_setAtomCool"" -> ""907_onlyContract"";
""907_setAtomIsReady"" -> ""907_onlyContractAdmin"";
""907_transfer"" -> ""907__transfer"";
""907_setBonusReceived"" -> ""907_onlyContractAdmin"";
""907_setAtomDna"" -> ""907_onlyAdmin"";
""907_setAtomFath"" -> ""907_onlyContract"";
""907_withdrawBalance"" -> ""907_onlyAdmin"";
""907_takeOwnership"" -> ""907_ownerOf"";
""907_setAtomLev"" -> ""907_onlyContract"";
""907_setAtomGen"" -> ""907_onlyAdmin"";
""907_setAtomIsRent"" -> ""907_onlyContract"";
""907_setAtomSons"" -> ""907_onlyContract"";
""907_setAtomIsBuy"" -> ""907_onlyContract"";
""907_setOwnerAtomsCount"" -> ""907_onlyContract"";
""907_takeOwnership"" -> ""907__transfer"";
""907_setAtomMoth"" -> ""907_onlyContract"";
""907_setDnaExist"" -> ""907_onlyContractAdmin"";
""907_setAtomOwner"" -> ""907_onlyContract"";
""907_pushAtom"" -> ""907_onlyContract"";
""907_createCustomAtom"" -> ""907_onlyAdmin"";
}
"
0x2dcfaac11c9eebd8c6c42103fe9e2a6ad237af27.sol,ERC20Token,"contract ERC20Token is StandardToken {string public name = ; string public symbol = ; uint public decimals = 18; uint data1 = 5; uint data2 = 5; uint data3 = 1; function set(uint x, uint y, uint z) onlyOwner { data1 = x; data2 = y; data3 = z; }",0,"subgraph cluster_1095_ERC20Token {
label=""ERC20Token"";
""1095_freeze"" [label=""freeze""];
""1095_EventEmergencyStop"" [label=""EventEmergencyStop""];
""1095_unFreeze"" [label=""unFreeze""];
""1095_price"" [label=""price""];
""1095_PriceOneDisable"" [label=""PriceOneDisable""];
""1095_buy"" [label=""buy""];
""1095_fallback"" [label=""fallback""];
""1095_PriceThreeEnable"" [label=""PriceThreeEnable""];
""1095_PriceTwoDisable"" [label=""PriceTwoDisable""];
""1095_transfer"" [label=""transfer""];
""1095_PriceOneEnable"" [label=""PriceOneEnable""];
""1095_EventEmergencyContinue"" [label=""EventEmergencyContinue""];
""1095_ERC20Token"" [label=""ERC20Token""];
""1095_transferFrom"" [label=""transferFrom""];
""1095_PriceThreeDisable"" [label=""PriceThreeDisable""];
""1095_InitialPriceEnable"" [label=""InitialPriceEnable""];
""1095_PriceTwoEnable"" [label=""PriceTwoEnable""];
""1095_InitialPriceDisable"" [label=""InitialPriceDisable""];
""1095_set"" [label=""set""];
""1095_burnRemainingTokens"" [label=""burnRemainingTokens""];
""1095_PriceTwoDisable"" -> ""1095_onlyOwner"";
""1095_transferFrom"" -> ""1095_isAvailable"";
""1095_EventEmergencyStop"" -> ""1095_onlyOwner"";
""1095_transfer"" -> ""1095_isAvailable"";
""1095_transferFrom"" -> ""1095_transferFrom"";
""1095_buy"" -> ""1095_price"";
""1095_buy"" -> ""1095_safeAdd"";
""1095_buy"" -> ""1095_safeSub"";
""1095_PriceThreeEnable"" -> ""1095_onlyOwner"";
""1095_InitialPriceEnable"" -> ""1095_onlyOwner"";
""1095_PriceOneDisable"" -> ""1095_onlyOwner"";
""1095_transfer"" -> ""1095_transfer"";
""1095_PriceOneEnable"" -> ""1095_onlyOwner"";
""1095_PriceTwoEnable"" -> ""1095_onlyOwner"";
""1095_EventEmergencyContinue"" -> ""1095_onlyOwner"";
""1095_InitialPriceDisable"" -> ""1095_onlyOwner"";
""1095_burnRemainingTokens"" -> ""1095_isAvailable"";
""1095_freeze"" -> ""1095_onlyOwner"";
""1095_set"" -> ""1095_onlyOwner"";
""1095_PriceThreeDisable"" -> ""1095_onlyOwner"";
""1095_burnRemainingTokens"" -> ""1095_onlyOwner"";
""1095_unFreeze"" -> ""1095_onlyOwner"";
""1095_ERC20Token"" -> ""1095_safeSub"";
""1095_fallback"" -> ""1095_buy"";
}
"
0x418b47c62af92e2ab2c105279c50d4e93b77c725.sol,MIC,"contract MIC { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function MIC( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_MIC {
label=""MIC"";
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_MIC"" [label=""MIC""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x56190ef084441dfde78fe6cb9a0c5b03b108ef48.sol,Etherauction,contract Etherauction is ContractOwner { using SafeMath for uint256; constructor() public payable { owner = msg.sender; gameId = 1; gameStartTime = block.timestamp; gameLastAuctionMoney = 10**15; gameLastAuctionTime = block.timestamp; gameSecondLeft = _getInitAuctionSeconds(); },0,"subgraph cluster_2932_Etherauction {
label=""Etherauction"";
""2932_getCurrGameInfoPart2"" [label=""getCurrGameInfoPart2""];
""2932_gameRoundEnd"" [label=""gameRoundEnd""];
""2932_constructor"" [label=""constructor""];
""2932_getGameInfo"" [label=""getGameInfo""];
""2932__auction"" [label=""_auction""];
""2932__getMinAuctionStartPrice"" [label=""_getMinAuctionStartPrice""];
""2932__getGameInfoPart3"" [label=""_getGameInfoPart3""];
""2932__inMoney"" [label=""_inMoney""];
""2932__startNewRound"" [label=""_startNewRound""];
""2932__claimReward"" [label=""_claimReward""];
""2932_adminPayout"" [label=""adminPayout""];
""2932_getMinAuctionValue"" [label=""getMinAuctionValue""];
""2932__isUserInGame"" [label=""_isUserInGame""];
""2932__getMinAuctionSeconds"" [label=""_getMinAuctionSeconds""];
""2932_claimReward"" [label=""claimReward""];
""2932_refund"" [label=""refund""];
""2932_registerInvitor"" [label=""registerInvitor""];
""2932__getGameInfoPart2"" [label=""_getGameInfoPart2""];
""2932__getGameStartAuctionMoney"" [label=""_getGameStartAuctionMoney""];
""2932__getGameInfoPart1"" [label=""_getGameInfoPart1""];
""2932__getInitAuctionSeconds"" [label=""_getInitAuctionSeconds""];
""2932_auction"" [label=""auction""];
""2932_getCurrTotalInvest"" [label=""getCurrTotalInvest""];
""2932_getGameDataByIndex"" [label=""getGameDataByIndex""];
""2932_getCurrCanRefund"" [label=""getCurrCanRefund""];
""2932_getCurrGameInfoPart1"" [label=""getCurrGameInfoPart1""];
""2932_getInvitor"" [label=""getInvitor""];
""2932_adminAddMoney"" [label=""adminAddMoney""];
""2932__getGameAuctionGap"" [label=""_getGameAuctionGap""];
""2932__getMaxAuctionSeconds"" [label=""_getMaxAuctionSeconds""];
""2932_addAuctionReward"" [label=""addAuctionReward""];
""2932__claimReward"" -> ""2932__getGameInfoPart2"";
""2932_gameRoundEnd"" -> ""2932__claimReward"";
""2932_getMinAuctionValue"" -> ""2932__getGameAuctionGap"";
""2932__auction"" -> ""2932_getInvitor"";
""2932_getGameInfo"" -> ""2932__getGameInfoPart1"";
""2932_auction"" -> ""2932__auction"";
""2932__inMoney"" -> ""2932__isUserInGame"";
""2932_addAuctionReward"" -> ""2932_getMinAuctionValue"";
""2932_getGameInfo"" -> ""2932__getGameInfoPart3"";
""2932__claimReward"" -> ""2932__getGameInfoPart3"";
""2932__auction"" -> ""2932__getGameAuctionGap"";
""2932_claimReward"" -> ""2932__claimReward"";
""2932__claimReward"" -> ""2932__getGameInfoPart1"";
""2932_getGameInfo"" -> ""2932__getGameInfoPart2"";
""2932_constructor"" -> ""2932__getInitAuctionSeconds"";
""2932__startNewRound"" -> ""2932__getInitAuctionSeconds"";
""2932_gameRoundEnd"" -> ""2932__startNewRound"";
""2932__startNewRound"" -> ""2932__getMinAuctionStartPrice"";
""2932__auction"" -> ""2932_registerInvitor"";
""2932__auction"" -> ""2932__inMoney"";
""2932_getCurrGameInfoPart1"" -> ""2932__getGameAuctionGap"";
""2932_addAuctionReward"" -> ""2932__auction"";
""2932_adminPayout"" -> ""2932_onlyOwner"";
""2932_getCurrGameInfoPart2"" -> ""2932__getGameInfoPart3"";
""2932__auction"" -> ""2932__getMaxAuctionSeconds"";
""2932_addAuctionReward"" -> ""2932__isUserInGame"";
}
"
0x55f363057098fb092ba85daf92ee6eeb4074e660.sol,VOCC_I105_20181211,"contract VOCC_I105_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",0,"subgraph cluster_189_VOCC_I105_20181211 {
label=""VOCC_I105_20181211"";
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0x39f89421c5bf8bb0d855c0216b00b45e3733b515.sol,BaseDINOToken,"contract BaseDINOToken { using SafeMath for uint256; address public owner; mapping(address => uint256) internal balances; mapping (address => mapping (address => uint256)) internal allowed; uint256 internal totalSupply_; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Burn(address indexed burner, uint256 value); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); event Mint(address indexed to, uint256 amount); modifier onlyOwner() { require(msg.sender == owner,); _; }",0,"subgraph cluster_1040_BaseDINOToken {
label=""BaseDINOToken"";
""1040_approve"" [label=""approve""];
""1040_increaseApproval"" [label=""increaseApproval""];
""1040__transferOwnership"" [label=""_transferOwnership""];
""1040_decreaseApproval"" [label=""decreaseApproval""];
""1040_constructor"" [label=""constructor""];
""1040_mint"" [label=""mint""];
""1040_burn"" [label=""burn""];
""1040_totalSupply"" [label=""totalSupply""];
""1040_balanceOf"" [label=""balanceOf""];
""1040_transferOwnership"" [label=""transferOwnership""];
""1040_burnFrom"" [label=""burnFrom""];
""1040__burn"" [label=""_burn""];
""1040_allowance"" [label=""allowance""];
""1040_transfer"" [label=""transfer""];
""1040_transferFrom"" [label=""transferFrom""];
""1040_transferOwnership"" -> ""1040_onlyOwner"";
""1040_burnFrom"" -> ""1040__burn"";
""1040_burn"" -> ""1040__burn"";
""1040_mint"" -> ""1040_onlyOwner"";
""1040_transferOwnership"" -> ""1040__transferOwnership"";
}
"
0x705051bbfd9f287869a412cba8bc7d112de48e69.sol,SAKECOIN,"contract SAKECOIN is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public initialSupply = 30e9 * 1e8; uint256 public totalSupply; uint256 public distributeAmount = 0; bool public mintingFinished = false; mapping (address => uint) balances; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed burner, uint256 value); event Mint(address indexed to, uint256 amount); event MintFinished(); function SAKECOIN() public { totalSupply = initialSupply; balances[msg.sender] = totalSupply; }",0,"subgraph cluster_1515_SAKECOIN {
label=""SAKECOIN"";
""1515_decimals"" [label=""decimals""];
""1515_transferToContract"" [label=""transferToContract""];
""1515_autoDistribute"" [label=""autoDistribute""];
""1515_symbol"" [label=""symbol""];
""1515_transfer"" [label=""transfer""];
""1515_lockupAccounts"" [label=""lockupAccounts""];
""1515_isContract"" [label=""isContract""];
""1515_finishMinting"" [label=""finishMinting""];
""1515_fallback"" [label=""fallback""];
""1515_transferToAddress"" [label=""transferToAddress""];
""1515_mint"" [label=""mint""];
""1515_distributeAirdrop"" [label=""distributeAirdrop""];
""1515_totalSupply"" [label=""totalSupply""];
""1515_balanceOf"" [label=""balanceOf""];
""1515_collectTokens"" [label=""collectTokens""];
""1515_setDistributeAmount"" [label=""setDistributeAmount""];
""1515_freezeAccounts"" [label=""freezeAccounts""];
""1515_burn"" [label=""burn""];
""1515_name"" [label=""name""];
""1515_SAKECOIN"" [label=""SAKECOIN""];
""1515_finishMinting"" -> ""1515_onlyOwner"";
""1515_transferToContract"" -> ""1515_balanceOf"";
""1515_freezeAccounts"" -> ""1515_onlyOwner"";
""1515_transferToAddress"" -> ""1515_balanceOf"";
""1515_mint"" -> ""1515_canMint"";
""1515_transfer"" -> ""1515_isContract"";
""1515_mint"" -> ""1515_onlyOwner"";
""1515_transfer"" -> ""1515_transferToAddress"";
""1515_burn"" -> ""1515_balanceOf"";
""1515_burn"" -> ""1515_onlyOwner"";
""1515_collectTokens"" -> ""1515_onlyOwner"";
""1515_fallback"" -> ""1515_autoDistribute"";
""1515_transfer"" -> ""1515_balanceOf"";
""1515_setDistributeAmount"" -> ""1515_onlyOwner"";
""1515_transfer"" -> ""1515_transferToContract"";
""1515_lockupAccounts"" -> ""1515_onlyOwner"";
""1515_autoDistribute"" -> ""1515_balanceOf"";
""1515_finishMinting"" -> ""1515_canMint"";
}
"
0xef4a7cd27e310314ec9af5473c95eb647e4d42a3.sol,CrowdsaleWPTByRounds,contract CrowdsaleWPTByRounds is Ownable { using SafeMath for uint256; using SafeERC20 for ERC20; ERC20 public token; address public wallet; CommonSale public minterContract; uint256 public rate; uint256 public tokensRaised; uint256 public cap; uint256 public openingTime; uint256 public closingTime; uint public minInvestmentValue; function setMinter(address _minterAddr) public onlyOwner { minterContract = CommonSale(_minterAddr); },0,"subgraph cluster_743_CrowdsaleWPTByRounds {
label=""CrowdsaleWPTByRounds"";
""743_hasClosed"" [label=""hasClosed""];
""743__getTokenAmount"" [label=""_getTokenAmount""];
""743_fallback"" [label=""fallback""];
""743_setMinter"" [label=""setMinter""];
""743_buyTokens"" [label=""buyTokens""];
""743_closeRound"" [label=""closeRound""];
""743_hasOpened"" [label=""hasOpened""];
""743_startNewRound"" [label=""startNewRound""];
""743__forwardFunds"" [label=""_forwardFunds""];
""743_changeRate"" [label=""changeRate""];
""743_changeMinInvest"" [label=""changeMinInvest""];
""743__preValidatePurchase"" [label=""_preValidatePurchase""];
""743_constructor"" [label=""constructor""];
""743__processPurchase"" [label=""_processPurchase""];
""743__deliverTokens"" [label=""_deliverTokens""];
""743_capReached"" [label=""capReached""];
""743_setMinter"" -> ""743_onlyOwner"";
""743_closeRound"" -> ""743_onlyOwner"";
""743_startNewRound"" -> ""743_hasOpened"";
""743_changeMinInvest"" -> ""743_onlyOwner"";
""743_startNewRound"" -> ""743_onlyOwner"";
""743_buyTokens"" -> ""743__forwardFunds"";
""743_buyTokens"" -> ""743__getTokenAmount"";
""743_fallback"" -> ""743_buyTokens"";
""743__preValidatePurchase"" -> ""743__getTokenAmount"";
""743_changeRate"" -> ""743_onlyOwner"";
""743__preValidatePurchase"" -> ""743_onlyWhileOpen"";
""743_buyTokens"" -> ""743__preValidatePurchase"";
""743__processPurchase"" -> ""743__deliverTokens"";
}
"
0x65832facdc1eefbcfaf50f570228ba886f745681.sol,SmartToken,"contract SmartToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function SmartToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xb7710726f14E238aAfb93aDc00A0A7B5755109c1] = _totalSupply; Transfer(address(0), 0xb7710726f14E238aAfb93aDc00A0A7B5755109c1, _totalSupply); }",0,"subgraph cluster_543_SmartToken {
label=""SmartToken"";
""543_totalSupply"" [label=""totalSupply""];
""543_SmartToken"" [label=""SmartToken""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xeb914da749340266ac474f930c65c2ed4df89922.sol,Ownable,"contract Ownable { address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); function Ownable() public { owner = msg.sender; }",0,"subgraph cluster_821_Ownable {
label=""Ownable"";
""821_Ownable"" [label=""Ownable""];
""821_transferOwnership"" [label=""transferOwnership""];
""821_transferOwnership"" -> ""821_onlyOwner"";
}
"
0x5ab5dded8c5c384015c8f3a27d59bf71b952a3a4.sol,PearlBonus,contract PearlBonus { address public pearlContract = 0x1844b21593262668B7248d0f57a220CaaBA46ab9; OysterPearl pearl = OysterPearl(pearlContract); address public director; address public partner; uint8 public share; uint256 public funds; bool public saleClosed; function PearlBonus() public { director = msg.sender; partner = 0x5F5E3bc34347e1f10C7a0E932871D8DbFBEF9f87; share = 10; funds = 0; saleClosed = false; },0,"subgraph cluster_243_PearlBonus {
label=""PearlBonus"";
""243_withdrawFunds"" [label=""withdrawFunds""];
""243_openSale"" [label=""openSale""];
""243_transferDirector"" [label=""transferDirector""];
""243_closeSale"" [label=""closeSale""];
""243_fallback"" [label=""fallback""];
""243_transferPartner"" [label=""transferPartner""];
""243_PearlBonus"" [label=""PearlBonus""];
""243_rescue"" [label=""rescue""];
""243_openSale"" -> ""243_onlyDirector"";
""243_transferPartner"" -> ""243_onlyPartner"";
""243_withdrawFunds"" -> ""243_onlyDirector"";
""243_transferDirector"" -> ""243_onlyDirector"";
""243_rescue"" -> ""243_onlyDirector"";
""243_closeSale"" -> ""243_onlyDirector"";
}
"
0xd6647d2d40b1ee8ab766dec0822ec756985fc1b3.sol,Mummy3D,"contract Mummy3D { modifier pyramidConstruct(bool applyLimits) { address _customerAddress = msg.sender; if (onlyAmbassadors && _customerAddress == _MummyAccount) { require( ambassadorsEthLedger_[_MummyAccount] < 2 ether && SafeMath.add(ambassadorsEthLedger_[_MummyAccount], msg.value) <= 2 ether ); }",0,"subgraph cluster_1451_Mummy3D {
label=""Mummy3D"";
""1451_exit"" [label=""exit""];
""1451_constructor"" [label=""constructor""];
""1451_transfer"" [label=""transfer""];
""1451_balanceOf"" [label=""balanceOf""];
""1451_MummyAccountWithdraw"" [label=""MummyAccountWithdraw""];
""1451_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1451_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1451_sqrt"" [label=""sqrt""];
""1451_fallback"" [label=""fallback""];
""1451_dividendsOf"" [label=""dividendsOf""];
""1451_totalSupply"" [label=""totalSupply""];
""1451_reinvest"" [label=""reinvest""];
""1451_myTokens"" [label=""myTokens""];
""1451_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1451_limits"" [label=""limits""];
""1451_sell"" [label=""sell""];
""1451_purchaseTokens"" [label=""purchaseTokens""];
""1451_buyPrice"" [label=""buyPrice""];
""1451_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1451_checkState"" [label=""checkState""];
""1451_sellPrice"" [label=""sellPrice""];
""1451_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1451_withdraw"" [label=""withdraw""];
""1451_buy"" [label=""buy""];
""1451_myDividends"" [label=""myDividends""];
""1451_exit"" -> ""1451_withdraw"";
""1451_buy"" -> ""1451_purchaseTokens"";
""1451_transfer"" -> ""1451_withdraw"";
""1451_sell"" -> ""1451_tokensToEthereum_"";
""1451_buyPrice"" -> ""1451_tokensToEthereum_"";
""1451_exit"" -> ""1451_sell"";
""1451_fallback"" -> ""1451_purchaseTokens"";
""1451_calculateTokensReceived"" -> ""1451_ethereumToTokens_"";
""1451_MummyAccountWithdraw"" -> ""1451_dividendsOf"";
""1451_sellPrice"" -> ""1451_tokensToEthereum_"";
""1451_purchaseTokens"" -> ""1451_ethereumToTokens_"";
""1451_reinvest"" -> ""1451_purchaseTokens"";
""1451_transfer"" -> ""1451_pyramidConstruct"";
""1451_ethereumToTokens_"" -> ""1451_sqrt"";
""1451_buy"" -> ""1451_pyramidConstruct"";
""1451_reinvest"" -> ""1451_onlyStronghands"";
""1451_withdraw"" -> ""1451_pyramidConstruct"";
""1451_withdraw"" -> ""1451_myDividends"";
""1451_myTokens"" -> ""1451_balanceOf"";
""1451_myDividends"" -> ""1451_dividendsOf"";
""1451_transfer"" -> ""1451_myDividends"";
""1451_reinvest"" -> ""1451_myDividends"";
""1451_reinvest"" -> ""1451_pyramidConstruct"";
""1451_withdraw"" -> ""1451_onlyStronghands"";
""1451_MummyAccountWithdraw"" -> ""1451_onlyBagholders"";
""1451_calculateEthereumReceived"" -> ""1451_tokensToEthereum_"";
""1451_transfer"" -> ""1451_onlyBagholders"";
""1451_sell"" -> ""1451_onlyBagholders"";
""1451_sell"" -> ""1451_pyramidConstruct"";
""1451_fallback"" -> ""1451_pyramidConstruct"";
}
"
0x2fb3c22230c39496edc13c16d09f34368346ac1d.sol,ISmartCert,contract ISmartCert { mapping (bytes32 => SignedData) hashes; mapping (address => AccessStruct) accessList; mapping (bytes32 => RevokeStruct) revoked; mapping (bytes32 => Lvl2Struct[]) idMap; address owner; string constant CODE_ACCESS_DENIED = ; string constant CODE_ACCESS_POSTER_NOT_AUTHORIZED = ; string constant CODE_ACCESS_ISSUER_NOT_AUTHORIZED = ; string constant CODE_ACCESS_VERIFY_NOT_AUTHORIZED = ; string constant MSG_ISSUER_SIG_NOT_MATCHED = ; string constant MSG_DOC_REGISTERED = ; string constant MSG_REVOKED = ; string constant MSG_NOTREG = ; string constant MSG_INVALID = ; string constant MSG_NOFOUND = ; string constant MSG_INVALID_CERT_MERKLE_NOT_MATCHED = ; string constant MSG_INVALID_ACCESS_RIGHT = ; string constant MSG_BATCH_REVOKED = ; string constant MSG_MERKLE_CANNOT_EMPTY = ; string constant MSG_MERKLE_NOT_REGISTERED = ; string constant STATUS_PASS = ; string constant STATUS_FAIL = ; bytes1 constant ACCESS_ISSUER = 0x04; bytes1 constant ACCESS_POSTER = 0x02; bytes1 constant ACCESS_VERIFIER = 0x01; bytes1 constant ACCESS_ALL = 0x07; bytes1 constant ACCESS_ISSUER_POSTER = 0x05; bytes1 constant ACCESS_NONE = 0x00; struct SignedData { bytes sig; uint registerDate; bool exists; },0,"subgraph cluster_1259_ISmartCert {
label=""ISmartCert"";
""1259_userRight"" [label=""userRight""];
""1259_internalRegisterCert"" [label=""internalRegisterCert""];
""1259_verifyCert"" [label=""verifyCert""];
""1259_checkAccess"" [label=""checkAccess""];
""1259_checkVerifyAccess"" [label=""checkVerifyAccess""];
""1259_internalRegisterCertWithID"" [label=""internalRegisterCertWithID""];
""1259_internalRevokeCert"" [label=""internalRevokeCert""];
""1259_recoverAddr"" [label=""recoverAddr""];
""1259_registerCertWithID"" [label=""registerCertWithID""];
""1259_registerCert"" [label=""registerCert""];
""1259_verifyCertWithID"" [label=""verifyCertWithID""];
""1259_reissueCert"" [label=""reissueCert""];
""1259_internalVerifyCert"" [label=""internalVerifyCert""];
""1259_revokeCert"" [label=""revokeCert""];
""1259_ISmartCert"" [label=""ISmartCert""];
""1259_reissueCertWithID"" [label=""reissueCertWithID""];
""1259_internalRegisterCert"" -> ""1259_checkAccess"";
""1259_reissueCert"" -> ""1259_internalRevokeCert"";
""1259_checkVerifyAccess"" -> ""1259_checkAccess"";
""1259_registerCert"" -> ""1259_internalRegisterCert"";
""1259_internalRegisterCertWithID"" -> ""1259_internalRegisterCert"";
""1259_internalRevokeCert"" -> ""1259_checkAccess"";
""1259_verifyCertWithID"" -> ""1259_checkVerifyAccess"";
""1259_reissueCert"" -> ""1259_internalRegisterCert"";
""1259_internalRegisterCert"" -> ""1259_recoverAddr"";
""1259_verifyCertWithID"" -> ""1259_internalVerifyCert"";
""1259_registerCertWithID"" -> ""1259_internalRegisterCertWithID"";
""1259_reissueCertWithID"" -> ""1259_internalRevokeCert"";
""1259_reissueCertWithID"" -> ""1259_internalRegisterCertWithID"";
""1259_internalVerifyCert"" -> ""1259_recoverAddr"";
""1259_internalRevokeCert"" -> ""1259_recoverAddr"";
""1259_verifyCert"" -> ""1259_checkVerifyAccess"";
""1259_verifyCert"" -> ""1259_internalVerifyCert"";
""1259_revokeCert"" -> ""1259_internalRevokeCert"";
}
"
0x41b8d6336bdab8991ad1c48e3579d0693db17e79.sol,MNY,"contract MNY { string public name = ; uint8 public decimals = 18; string public symbol = ; address public _owner; address public _dev = 0xC96CfB18C39DC02FBa229B6EA698b1AD5576DF4c; address public _devFeesAddr; uint256 public _tokePerEth = 4877000000000000000000; bool public _coldStorage = true; bool public _receiveEth = true; bool _feesEnabled = false; bool _payFees = false; uint256 _fees; uint256 _lifeVal = 0; uint256 _feeLimit = 0; uint256 _devFees = 0; uint256 public _totalSupply = 1000000928 * 1 ether; uint256 public _frozenTokens = 0; event Transfer(address indexed _from, address indexed _to, uint _value); event Exchanged(address indexed _from, address indexed _to, uint _value); mapping (address => uint256) public balances; mapping (address => bool) public exchangePartners; mapping (address => uint256) public exchangeRates; function MNY() { _owner = msg.sender; preMine(); }",0,"subgraph cluster_1157_MNY {
label=""MNY"";
""1157_getBalance"" [label=""getBalance""];
""1157_transfer"" [label=""transfer""];
""1157_changePayRate"" [label=""changePayRate""];
""1157_changeDev"" [label=""changeDev""];
""1157_updateFeeAmount"" [label=""updateFeeAmount""];
""1157_exchange"" [label=""exchange""];
""1157_addExchangePartnerAddressAndRate"" [label=""addExchangePartnerAddressAndRate""];
""1157_safeWithdrawal"" [label=""safeWithdrawal""];
""1157_toggleReceiveEth"" [label=""toggleReceiveEth""];
""1157_mul"" [label=""mul""];
""1157_fallback"" [label=""fallback""];
""1157_payFeesToggle"" [label=""payFeesToggle""];
""1157_removeExchangePartnerTargetAddress"" [label=""removeExchangePartnerTargetAddress""];
""1157_sub"" [label=""sub""];
""1157_totalSupply"" [label=""totalSupply""];
""1157_defrostFrozenTokens"" [label=""defrostFrozenTokens""];
""1157_updateTokenBalance"" [label=""updateTokenBalance""];
""1157_preMine"" [label=""preMine""];
""1157_add"" [label=""add""];
""1157_changeOwner"" [label=""changeOwner""];
""1157_getLifeVal"" [label=""getLifeVal""];
""1157_canExchange"" [label=""canExchange""];
""1157_changeDevFeesAddr"" [label=""changeDevFeesAddr""];
""1157_exchangeTokensFromOtherContract"" [label=""exchangeTokensFromOtherContract""];
""1157_addExchangePartnerTargetAddress"" [label=""addExchangePartnerTargetAddress""];
""1157_balanceOf"" [label=""balanceOf""];
""1157_withdrawDevFees"" [label=""withdrawDevFees""];
""1157_div"" [label=""div""];
""1157_requestTokensFromOtherContract"" [label=""requestTokensFromOtherContract""];
""1157_MNY"" [label=""MNY""];
""1157_toggleFreezeTokensFlag"" [label=""toggleFreezeTokensFlag""];
""1157_contractExchangeRate"" [label=""contractExchangeRate""];
""1157_exchangeTokensFromOtherContract"" -> ""1157_mul"";
""1157_fallback"" -> ""1157_div"";
""1157_transfer"" -> ""1157_balanceOf"";
""1157_exchangeTokensFromOtherContract"" -> ""1157_sub"";
""1157_exchangeTokensFromOtherContract"" -> ""1157_add"";
""1157_transfer"" -> ""1157_add"";
""1157_MNY"" -> ""1157_preMine"";
""1157_defrostFrozenTokens"" -> ""1157_add"";
""1157_fallback"" -> ""1157_sub"";
""1157_fallback"" -> ""1157_add"";
""1157_fallback"" -> ""1157_mul"";
""1157_exchange"" -> ""1157_add"";
""1157_exchange"" -> ""1157_balanceOf"";
""1157_transfer"" -> ""1157_sub"";
""1157_exchange"" -> ""1157_sub"";
""1157_exchange"" -> ""1157_requestTokensFromOtherContract"";
}
"
0x523630976eb6147621b5c31c781ebe2ec2a806e0.sol,Court,"contract Court is Owned, SafeDecimalMath { Havven public havven; EtherNomin public nomin; uint public minStandingBalance = 100 * UNIT; uint public votingPeriod = 1 weeks; uint constant MIN_VOTING_PERIOD = 3 days; uint constant MAX_VOTING_PERIOD = 4 weeks; uint public confirmationPeriod = 1 weeks; uint constant MIN_CONFIRMATION_PERIOD = 1 days; uint constant MAX_CONFIRMATION_PERIOD = 2 weeks; uint public requiredParticipation = 3 * UNIT / 10; uint constant MIN_REQUIRED_PARTICIPATION = UNIT / 10; uint public requiredMajority = (2 * UNIT) / 3; uint constant MIN_REQUIRED_MAJORITY = UNIT / 2; uint nextMotionID = 1; mapping(uint => address) public motionTarget; mapping(address => uint) public targetMotionID; mapping(uint => uint) public motionStartTime; mapping(uint => uint) public votesFor; mapping(uint => uint) public votesAgainst; mapping(address => mapping(uint => uint)) voteWeight; enum Vote {Abstention, Yea, Nay}",0,"subgraph cluster_1397_Court {
label=""Court"";
""1397_approveMotion"" [label=""approveMotion""];
""1397_setRequiredParticipation"" [label=""setRequiredParticipation""];
""1397_closeMotion"" [label=""closeMotion""];
""1397_motionWaiting"" [label=""motionWaiting""];
""1397_motionConfirming"" [label=""motionConfirming""];
""1397_setupVote"" [label=""setupVote""];
""1397__closeMotion"" [label=""_closeMotion""];
""1397_voteAgainst"" [label=""voteAgainst""];
""1397_setVotingPeriod"" [label=""setVotingPeriod""];
""1397_vetoMotion"" [label=""vetoMotion""];
""1397_motionVoting"" [label=""motionVoting""];
""1397_setRequiredMajority"" [label=""setRequiredMajority""];
""1397_setConfirmationPeriod"" [label=""setConfirmationPeriod""];
""1397_targetMotionID"" [label=""targetMotionID""];
""1397_hasVoted"" [label=""hasVoted""];
""1397_setMinStandingBalance"" [label=""setMinStandingBalance""];
""1397_motionPasses"" [label=""motionPasses""];
""1397_Court"" [label=""Court""];
""1397_voteFor"" [label=""voteFor""];
""1397_cancelVote"" [label=""cancelVote""];
""1397_beginMotion"" [label=""beginMotion""];
""1397_motionPasses"" -> ""1397_safeAdd"";
""1397_closeMotion"" -> ""1397_motionPasses"";
""1397_setConfirmationPeriod"" -> ""1397_onlyOwner"";
""1397_approveMotion"" -> ""1397_motionPasses"";
""1397_cancelVote"" -> ""1397_motionConfirming"";
""1397_voteFor"" -> ""1397_setupVote"";
""1397_setVotingPeriod"" -> ""1397_onlyOwner"";
""1397_cancelVote"" -> ""1397_motionVoting"";
""1397_cancelVote"" -> ""1397_safeSub"";
""1397_voteAgainst"" -> ""1397_setupVote"";
""1397_approveMotion"" -> ""1397_motionConfirming"";
""1397_Court"" -> ""1397_Owned"";
""1397_vetoMotion"" -> ""1397__closeMotion"";
""1397_closeMotion"" -> ""1397_motionWaiting"";
""1397_setupVote"" -> ""1397_hasVoted"";
""1397_setRequiredMajority"" -> ""1397_onlyOwner"";
""1397_setRequiredParticipation"" -> ""1397_onlyOwner"";
""1397_approveMotion"" -> ""1397_onlyOwner"";
""1397_setupVote"" -> ""1397_motionVoting"";
""1397_voteAgainst"" -> ""1397_safeAdd"";
""1397_approveMotion"" -> ""1397__closeMotion"";
""1397_vetoMotion"" -> ""1397_motionWaiting"";
""1397_vetoMotion"" -> ""1397_onlyOwner"";
""1397_voteFor"" -> ""1397_safeAdd"";
""1397_motionPasses"" -> ""1397_safeDiv_dec"";
""1397_setMinStandingBalance"" -> ""1397_onlyOwner"";
""1397_closeMotion"" -> ""1397_motionConfirming"";
""1397_closeMotion"" -> ""1397__closeMotion"";
}
"
0xaa57e849341a2899110ba676a49302c069251d19.sol,BaseStorage,contract BaseStorage is Pausable { event AccessAllowed(address _address); event AccessDenied(address _address); mapping (address => bool) public allowed; address public developer; modifier canWrite() { require(allowed[msg.sender] || isOwner(msg.sender) || (msg.sender == developer)); _; },0,"subgraph cluster_223_BaseStorage {
label=""BaseStorage"";
""223_isAllowed"" [label=""isAllowed""];
""223_setDeveloper"" [label=""setDeveloper""];
""223_allow"" [label=""allow""];
""223_denied"" [label=""denied""];
""223_setDeveloper"" -> ""223_onlyOwner"";
""223_denied"" -> ""223_canWrite"";
""223_allow"" -> ""223_canWrite"";
}
"
0xec2e5c8d51fdd54fef83db8300399a3c2e167922.sol,Crowdsale,"contract Crowdsale is Manageable { using SafeMath for uint256; CrowdsaleToken public token; uint256 public startTime; uint256 public endTime ; uint256 public rate; uint256 public constant decimals = 18; uint256 public tokenSaleWeiCap; uint256 public tokenSaleWeiGoal; uint256 public tokenSaleWeiMax; uint256 public tokenSaleWeiMin; address public pool; address public wallet; bool public isFinalized = false; enum State { Created, Active, Closed }",0,"subgraph cluster_2049_CrowdsaleManager {
label=""CrowdsaleManager"";
""2049_CrowdsaleManager"" [label=""CrowdsaleManager""];
""2049_mintToken"" [label=""mintToken""];
""2049_deallocate"" [label=""deallocate""];
""2049_changeTokenManager"" [label=""changeTokenManager""];
""2049_createToken"" [label=""createToken""];
""2049_releaseTokenTransfer"" [label=""releaseTokenTransfer""];
""2049_promotionAllocate"" [label=""promotionAllocate""];
""2049_finalizeSale1"" [label=""finalizeSale1""];
""2049_initSale1"" [label=""initSale1""];
""2049_finalizeSale2"" [label=""finalizeSale2""];
""2049_createSale3"" [label=""createSale3""];
""2049_initSale3"" [label=""initSale3""];
""2049_closeSale2"" [label=""closeSale2""];
""2049_withdrawSale3"" [label=""withdrawSale3""];
""2049_closeSale1"" [label=""closeSale1""];
""2049_changeSaleManager"" [label=""changeSaleManager""];
""2049_withdrawSale2"" [label=""withdrawSale2""];
""2049_createSale1"" [label=""createSale1""];
""2049_initSale2"" [label=""initSale2""];
""2049_closeSale3"" [label=""closeSale3""];
""2049_createSale2"" [label=""createSale2""];
""2049_withdrawSale1"" [label=""withdrawSale1""];
""2049_finalizeSale3"" [label=""finalizeSale3""];
""2049_initSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_changeTokenManager"" -> ""2049_onlyOwner"";
""2049_finalizeSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_deallocate"" -> ""2049_onlyOwner"";
""2049_closeSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_releaseTokenTransfer"" -> ""2049_onlyOwner"";
""2049_closeSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_createToken"" -> ""2049_onlyOwnerOrManager"";
""2049_promotionAllocate"" -> ""2049_onlyOwner"";
""2049_withdrawSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_createSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_changeSaleManager"" -> ""2049_onlyOwner"";
""2049_createSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_withdrawSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_closeSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_createSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_withdrawSale2"" -> ""2049_onlyOwnerOrManager"";
""2049_mintToken"" -> ""2049_onlyOwnerOrManager"";
""2049_initSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_finalizeSale3"" -> ""2049_onlyOwnerOrManager"";
""2049_finalizeSale1"" -> ""2049_onlyOwnerOrManager"";
""2049_initSale1"" -> ""2049_onlyOwnerOrManager"";
}
"
0x6cb9c5abf310b42893adff0b1f38322eea109c98.sol,DelightToken,"contract DelightToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function DelightToken() public { symbol = ; name = ; decimals = 8; _totalSupply = 1500000000000000000; balances[0xbBFe11C614d8089C621E843eDac04F43F6767469] = _totalSupply; Transfer(address(0), 0xbBFe11C614d8089C621E843eDac04F43F6767469, _totalSupply); }",0,"subgraph cluster_543_DelightToken {
label=""DelightToken"";
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_DelightToken"" [label=""DelightToken""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x291a043f014d12dc852b02ff752e5b70132bc328.sol,CryptoCopyCrowdsale,"contract CryptoCopyCrowdsale { using SafeMath for uint256; address public creator; address public buyBackFund; address public bountyPool; address public advisoryPool; uint256 public minAcceptedEthAmount = 100 finney; uint256 public maxTotalSupply = 1000000 * 10**8; uint256 public tokensForInvestors = 900000 * 10**8; uint256 public tokensForBounty = 50000 * 10**8; uint256 public tokensForAdvisory = 50000 * 10**8; uint256 public totalTokenIssued; uint256 public bonusFirstTwoDaysPeriod = 2 days; uint256 public bonusFirstWeekPeriod = 9 days; uint256 public bonusSecondWeekPeriod = 16 days; uint256 public bonusThirdWeekPeriod = 23 days; uint256 public bonusFourthWeekPeriod = 30 days; uint256 public bonusFirstTwoDays = 20; uint256 public bonusFirstWeek = 15; uint256 public bonusSecondWeek = 10; uint256 public bonusThirdWeek = 5; uint256 public bonusFourthWeek = 5; uint256 public bonusSubscription = 5; uint256 public bonusOver3ETH = 10; uint256 public bonusOver10ETH = 20; uint256 public bonusOver30ETH = 30; uint256 public bonusOver100ETH = 40; mapping (address => uint256) balancesETH; mapping (address => uint256) balancesETHWithBonuses; mapping (address => uint256) balancesETHForSubscriptionBonus; mapping (address => uint256) tokenBalances; uint256 public totalInvested; uint256 public totalInvestedWithBonuses; uint256 public hardCap = 100000 ether; uint256 public softCap = 175 ether; enum Stages { Countdown, Ico, Ended }",0,"subgraph cluster_778_CryptoCopyCrowdsale {
label=""CryptoCopyCrowdsale"";
""778_balanceOf"" [label=""balanceOf""];
""778_CryptoCopyCrowdsale"" [label=""CryptoCopyCrowdsale""];
""778_setBuyBackFund"" [label=""setBuyBackFund""];
""778_setCreator"" [label=""setCreator""];
""778_withdrawBountyAndAdvisory"" [label=""withdrawBountyAndAdvisory""];
""778_fallback"" [label=""fallback""];
""778_setToken"" [label=""setToken""];
""778_setAdvisoryPool"" [label=""setAdvisoryPool""];
""778_setBountyPool"" [label=""setBountyPool""];
""778_setEnd"" [label=""setEnd""];
""778_returnOwnershipOfToken"" [label=""returnOwnershipOfToken""];
""778_updateState"" [label=""updateState""];
""778_withdraw"" [label=""withdraw""];
""778_addSubscriptionBonus"" [label=""addSubscriptionBonus""];
""778_releaseTokens"" [label=""releaseTokens""];
""778_setCreator"" -> ""778_onlyCreator"";
""778_setToken"" -> ""778_onlyCreator"";
""778_setEnd"" -> ""778_onlyCreator"";
""778_addSubscriptionBonus"" -> ""778_onlyCreator"";
""778_setBountyPool"" -> ""778_onlyCreator"";
""778_setAdvisoryPool"" -> ""778_onlyCreator"";
""778_returnOwnershipOfToken"" -> ""778_onlyCreator"";
""778_withdrawBountyAndAdvisory"" -> ""778_onlyCreator"";
""778_setBuyBackFund"" -> ""778_onlyCreator"";
""778_withdraw"" -> ""778_onlyCreator"";
""778_releaseTokens"" -> ""778_onlyCreator"";
""778_fallback"" -> ""778_atStage"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,HelloGoldSale,"contract HelloGoldSale is Pausable, SafeMath { uint256 public decimals = 8; uint256 public startDate = 1503892800; uint256 public endDate = 1504497600; uint256 tranchePeriod = 1 weeks; HelloGoldToken token; uint256 constant MaxCoinsR1 = 80 * 10**6 * 10**8; uint256 public coinsRemaining = 80 * 10**6 * 10**8; uint256 coinsPerTier = 16 * 10**6 * 10**8; uint256 public coinsLeftInTier = 16 * 10**6 * 10**8; uint256 public minimumCap = 0; uint256 numTiers = 5; uint16 public tierNo; uint256 public preallocCoins; uint256 public purchasedCoins; uint256 public ethRaised; uint256 public personalMax = 10 ether; uint256 public contributors; address public cs; address public multiSig; address public HGT_Reserve; struct csAction { bool passedKYC; bool blocked; }",0,"subgraph cluster_3276_HelloGoldSale {
label=""HelloGoldSale"";
""3276_coinAddress"" [label=""coinAddress""];
""3276_when"" [label=""when""];
""3276_setHgtRates"" [label=""setHgtRates""];
""3276_funding"" [label=""funding""];
""3276_block"" [label=""block""];
""3276_success"" [label=""success""];
""3276_fallback"" [label=""fallback""];
""3276_HelloGoldSale"" [label=""HelloGoldSale""];
""3276_createTokens"" [label=""createTokens""];
""3276_withdraw"" [label=""withdraw""];
""3276_allocatedTokens"" [label=""allocatedTokens""];
""3276_approve"" [label=""approve""];
""3276_setPeriod"" [label=""setPeriod""];
""3276_linkCoin"" [label=""linkCoin""];
""3276_complete"" [label=""complete""];
""3276_newCs"" [label=""newCs""];
""3276_failed"" [label=""failed""];
""3276_unblock"" [label=""unblock""];
""3276_setStart"" [label=""setStart""];
""3276_createTokens"" -> ""3276_funding"";
""3276_allocatedTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_success"";
""3276_allocatedTokens"" -> ""3276_safeAdd"";
""3276_createTokens"" -> ""3276_safeDiv"";
""3276_fallback"" -> ""3276_createTokens"";
""3276_linkCoin"" -> ""3276_onlyOwner"";
""3276_approve"" -> ""3276_MustBeCs"";
""3276_unblock"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_min256"";
""3276_setHgtRates"" -> ""3276_onlyOwner"";
""3276_allocatedTokens"" -> ""3276_onlyOwner"";
""3276_withdraw"" -> ""3276_failed"";
""3276_newCs"" -> ""3276_onlyOwner"";
""3276_setPeriod"" -> ""3276_funding"";
""3276_setStart"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeAdd"";
""3276_fallback"" -> ""3276_whenNotPaused"";
""3276_setPeriod"" -> ""3276_onlyOwner"";
""3276_block"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeMul"";
""3276_fallback"" -> ""3276_MustBeEnabled"";
}
"
0x1e83cdd27d0b34c727c417759585e87e2770c28c.sol,TestyTest,"contract TestyTest is ReentryProtected, ERC20Token, TestyTestAbstract, TestyTestConfig { using SafeMath for uint; uint constant TOKEN = uint(10)**decimals; function TestyTest() public { owner = OWNER; totalSupply = TOTAL_TOKENS.mul(TOKEN); balances[owner] = totalSupply; }",0,"subgraph cluster_793_TestyTest {
label=""TestyTest"";
""793_increaseSupply"" [label=""increaseSupply""];
""793_acceptOwnership"" [label=""acceptOwnership""];
""793_transferExternalToken"" [label=""transferExternalToken""];
""793_fallback"" [label=""fallback""];
""793_xfer"" [label=""xfer""];
""793_TestyTest"" [label=""TestyTest""];
""793_lowerSupply"" [label=""lowerSupply""];
""793_changeOwner"" [label=""changeOwner""];
""793_transferToMany"" [label=""transferToMany""];
""793_requireKyc"" [label=""requireKyc""];
""793_clearKyc"" [label=""clearKyc""];
""793_transferToMany"" -> ""793_xfer"";
""793_lowerSupply"" -> ""793_preventReentry"";
""793_increaseSupply"" -> ""793_onlyOwner"";
""793_requireKyc"" -> ""793_noReentry"";
""793_xfer"" -> ""793_noReentry"";
""793_requireKyc"" -> ""793_onlyOwner"";
""793_transferExternalToken"" -> ""793_preventReentry"";
""793_xfer"" -> ""793_xfer"";
""793_clearKyc"" -> ""793_onlyOwner"";
""793_transferExternalToken"" -> ""793_onlyOwner"";
""793_transferToMany"" -> ""793_noReentry"";
""793_lowerSupply"" -> ""793_onlyOwner"";
""793_clearKyc"" -> ""793_noReentry"";
""793_changeOwner"" -> ""793_onlyOwner"";
""793_increaseSupply"" -> ""793_preventReentry"";
}
"
0xf02904cbf8e5134aeaf45626e96b782ed233fe04.sol,BWCToken,contract BWCToken is Ownable{ uint256 public totalSupply; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 4; uint constant start = 1517418000; uint constant period = 87; uint256 public constant hardcap = 25 * 1000000 * (10 ** uint256(decimals)); bool public transferAllowed = true; bool public mintingFinished = false; modifier whenTransferAllowed() { if(msg.sender != owner){ require(transferAllowed); },0,"subgraph cluster_579_BWCToken {
label=""BWCToken"";
""579_burn"" [label=""burn""];
""579_allowance"" [label=""allowance""];
""579_transfer"" [label=""transfer""];
""579_allowTransfer"" [label=""allowTransfer""];
""579_balanceOf"" [label=""balanceOf""];
""579_finishMinting"" [label=""finishMinting""];
""579_transferFrom"" [label=""transferFrom""];
""579_approve"" [label=""approve""];
""579_mint"" [label=""mint""];
""579_burnFrom"" [label=""burnFrom""];
""579_mint"" -> ""579_saleIsOn"";
""579_transfer"" -> ""579_whenTransferAllowed"";
""579_finishMinting"" -> ""579_onlyOwner"";
""579_allowTransfer"" -> ""579_onlyOwner"";
""579_mint"" -> ""579_canMint"";
""579_mint"" -> ""579_transfer"";
""579_transferFrom"" -> ""579_whenTransferAllowed"";
""579_mint"" -> ""579_onlyOwner"";
}
"
0xaf7188dbaa4e9a25864827cc9b9a72f663017834.sol,HammBones,"contract HammBones is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function HammBones() public { symbol = ; name = ; decimals = 18; _totalSupply = 21000000000000000000000000; balances[0xcE599E08b3cAd353960143c01F6012cbf90C9DA8] = _totalSupply; Transfer(address(0), 0xcE599E08b3cAd353960143c01F6012cbf90C9DA8, _totalSupply); }",0,"subgraph cluster_543_HammBones {
label=""HammBones"";
""543_transferFrom"" [label=""transferFrom""];
""543_HammBones"" [label=""HammBones""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x2cfc06b1ec0735bd7ef00b211764cc7e06e9456a.sol,PublicSale,"contract PublicSale is Pausable { using SafeMath for uint256; using SafeERC20 for ERC20; uint256 public maxgas; uint256 public maxcap; uint256 public exceed; uint256 public minimum; uint256 public rate; bool public ignited = false; uint256 public weiRaised = 0; address public wallet; Whitelist public List; ERC20 public Token; constructor ( uint256 _maxcap, uint256 _exceed, uint256 _minimum, uint256 _rate, uint256 _maxgas, address _wallet, address _whitelist, address _token ) public { require(_wallet != address(0)); require(_whitelist != address(0)); require(_token != address(0)); maxcap = _maxcap; exceed = _exceed; minimum = _minimum; rate = _rate; maxgas = _maxgas; wallet = _wallet; Token = ERC20(_token); List = Whitelist(_whitelist); }",0,"subgraph cluster_770_PublicSale {
label=""PublicSale"";
""770_constructor"" [label=""constructor""];
""770_setMaxGas"" [label=""setMaxGas""];
""770_finalize"" [label=""finalize""];
""770_ignite"" [label=""ignite""];
""770_fallback"" [label=""fallback""];
""770_setWallet"" [label=""setWallet""];
""770_setWhitelist"" [label=""setWhitelist""];
""770_withdrawToken"" [label=""withdrawToken""];
""770_collect"" [label=""collect""];
""770_withdrawEther"" [label=""withdrawEther""];
""770_getPurchaseAmount"" [label=""getPurchaseAmount""];
""770_extinguish"" [label=""extinguish""];
""770_withdrawEther"" -> ""770_whenNotPaused"";
""770_collect"" -> ""770_whenNotPaused"";
""770_setWallet"" -> ""770_onlyOwner"";
""770_finalize"" -> ""770_withdrawEther"";
""770_setWhitelist"" -> ""770_onlyOwner"";
""770_withdrawToken"" -> ""770_whenNotPaused"";
""770_finalize"" -> ""770_withdrawToken"";
""770_finalize"" -> ""770_onlyOwner"";
""770_extinguish"" -> ""770_onlyOwner"";
""770_withdrawEther"" -> ""770_onlyOwner"";
""770_ignite"" -> ""770_onlyOwner"";
""770_setMaxGas"" -> ""770_onlyOwner"";
""770_finalize"" -> ""770_whenNotPaused"";
""770_collect"" -> ""770_getPurchaseAmount"";
""770_withdrawToken"" -> ""770_onlyOwner"";
""770_fallback"" -> ""770_collect"";
}
"
0x72c3a4fc3b3330e36fdf575e5c8b16e5a77856f6.sol,ERC721BasicToken,"contract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic { bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd; bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79; using SafeMath for uint256; using AddressUtils for address; bytes4 private constant ERC721_RECEIVED = 0x150b7a02; mapping (uint256 => address) internal tokenOwner; mapping (uint256 => address) internal tokenApprovals; mapping (address => uint256) internal ownedTokensCount; mapping (address => mapping (address => bool)) internal operatorApprovals; modifier onlyOwnerOf(uint256 _tokenId) { require(ownerOf(_tokenId) == msg.sender); _; }",0,"subgraph cluster_918_ERC721BasicToken {
label=""ERC721BasicToken"";
""918_approve"" [label=""approve""];
""918_exists"" [label=""exists""];
""918_transferFrom"" [label=""transferFrom""];
""918_isApprovedOrOwner"" [label=""isApprovedOrOwner""];
""918_setApprovalForAll"" [label=""setApprovalForAll""];
""918_clearApproval"" [label=""clearApproval""];
""918_removeTokenFrom"" [label=""removeTokenFrom""];
""918__mint"" [label=""_mint""];
""918_balanceOf"" [label=""balanceOf""];
""918__burn"" [label=""_burn""];
""918_ownerOf"" [label=""ownerOf""];
""918_checkAndCallSafeTransfer"" [label=""checkAndCallSafeTransfer""];
""918_safeTransferFrom"" [label=""safeTransferFrom""];
""918_isApprovedForAll"" [label=""isApprovedForAll""];
""918_getApproved"" [label=""getApproved""];
""918_constructor"" [label=""constructor""];
""918_addTokenTo"" [label=""addTokenTo""];
""918_clearApproval"" -> ""918_ownerOf"";
""918_transferFrom"" -> ""918_canTransfer"";
""918_safeTransferFrom"" -> ""918_transferFrom"";
""918__mint"" -> ""918_addTokenTo"";
""918_isApprovedOrOwner"" -> ""918_ownerOf"";
""918_transferFrom"" -> ""918_clearApproval"";
""918_safeTransferFrom"" -> ""918_canTransfer"";
""918_isApprovedOrOwner"" -> ""918_isApprovedForAll"";
""918_safeTransferFrom"" -> ""918_checkAndCallSafeTransfer"";
""918_removeTokenFrom"" -> ""918_ownerOf"";
""918_transferFrom"" -> ""918_addTokenTo"";
""918_isApprovedOrOwner"" -> ""918_getApproved"";
""918_approve"" -> ""918_isApprovedForAll"";
""918__burn"" -> ""918_clearApproval"";
""918_approve"" -> ""918_ownerOf"";
""918_constructor"" -> ""918__registerInterface"";
""918__burn"" -> ""918_removeTokenFrom"";
""918_safeTransferFrom"" -> ""918_safeTransferFrom"";
""918_transferFrom"" -> ""918_removeTokenFrom"";
}
"
0xf4b54874cd8a6c863e3a904c18fda964661ec363.sol,Token,"contract Token is Pausable, ERC20 { using SafeMath for uint; event Burn(address indexed burner, uint256 value); mapping(address => uint) balances; mapping (address => mapping (address => uint)) internal allowed; mapping(address => uint) public balanceOfLocked; mapping(address => bool) public addressLocked; constructor() ERC20(, , 18) public { totalSupply = 500000000 * 10 ** uint(decimals); balances[msg.sender] = totalSupply; }",0,"subgraph cluster_801_Token {
label=""Token"";
""801_transfer"" [label=""transfer""];
""801_balanceOf"" [label=""balanceOf""];
""801_burn"" [label=""burn""];
""801_lockAddressValue"" [label=""lockAddressValue""];
""801_approve"" [label=""approve""];
""801_decreaseApproval"" [label=""decreaseApproval""];
""801_unlockAddress"" [label=""unlockAddress""];
""801_increaseApproval"" [label=""increaseApproval""];
""801_transferFrom"" [label=""transferFrom""];
""801_constructor"" [label=""constructor""];
""801_lockAddress"" [label=""lockAddress""];
""801_allowance"" [label=""allowance""];
""801_burn"" -> ""801_onlyOwner"";
""801_increaseApproval"" -> ""801_whenNotPaused"";
""801_decreaseApproval"" -> ""801_whenNotPaused"";
""801_lockAddress"" -> ""801_onlyOwner"";
""801_transfer"" -> ""801_whenNotPaused"";
""801_transfer"" -> ""801_lockCheck"";
""801_transferFrom"" -> ""801_lockCheck"";
""801_constructor"" -> ""801_constructor"";
""801_transferFrom"" -> ""801_whenNotPaused"";
""801_approve"" -> ""801_whenNotPaused"";
""801_lockAddressValue"" -> ""801_onlyOwner"";
""801_unlockAddress"" -> ""801_onlyOwner"";
}
"
0x0d7b7b690d74253ffd9795409a6c603b912ae534.sol,wallcoinToken,"contract wallcoinToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function wallcoinToken() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 1 weeks; endDate = now + 7 weeks; }",0,"subgraph cluster_609_wallcoinToken {
label=""wallcoinToken"";
""609_totalSupply"" [label=""totalSupply""];
""609_transferFrom"" [label=""transferFrom""];
""609_transfer"" [label=""transfer""];
""609_wallcoinToken"" [label=""wallcoinToken""];
""609_allowance"" [label=""allowance""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_fallback"" [label=""fallback""];
""609_balanceOf"" [label=""balanceOf""];
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_approve"" [label=""approve""];
""609_transfer"" -> ""609_safeSub"";
""609_transfer"" -> ""609_safeAdd"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
""609_transferFrom"" -> ""609_safeSub"";
""609_fallback"" -> ""609_safeAdd"";
}
"
0x486cf19a550e2814aef970b14e509e93209a0151.sol,EventChainCrowdsale,"contract EventChainCrowdsale is Haltable { using SafeMath for uint256; enum State{Preparing, Prepared, Presale, Phase1, Phase2, Closed}",0,"subgraph cluster_1228_EventChainCrowdsale {
label=""EventChainCrowdsale"";
""1228_closeCrowdsale"" [label=""closeCrowdsale""];
""1228_startPhase2"" [label=""startPhase2""];
""1228_startPresale"" [label=""startPresale""];
""1228_EventChainCrowdsale"" [label=""EventChainCrowdsale""];
""1228_fallback"" [label=""fallback""];
""1228_mintFounderTokens"" [label=""mintFounderTokens""];
""1228_startPhase1"" [label=""startPhase1""];
""1228_currentStateToString"" [label=""currentStateToString""];
""1228_closeCrowdsale"" -> ""1228_inState"";
""1228_startPresale"" -> ""1228_inState"";
""1228_fallback"" -> ""1228_onlyWhenCrowdsaleIsOpen"";
""1228_fallback"" -> ""1228_requiresMinimumInvest"";
""1228_fallback"" -> ""1228_currentStateToString"";
""1228_startPhase1"" -> ""1228_onlyOwner"";
""1228_mintFounderTokens"" -> ""1228_inState"";
""1228_fallback"" -> ""1228_stopInEmergency"";
""1228_mintFounderTokens"" -> ""1228_onlyOwner"";
""1228_startPhase2"" -> ""1228_onlyOwner"";
""1228_closeCrowdsale"" -> ""1228_onlyOwner"";
""1228_startPhase2"" -> ""1228_inState"";
""1228_startPresale"" -> ""1228_onlyOwner"";
""1228_startPhase1"" -> ""1228_inState"";
}
"
0x1e6f116ca704277c97595316ac157eb6ed30290e.sol,BatchTransfer,contract BatchTransfer is Ownable { constructor () public Ownable(msg.sender) {},0,"subgraph cluster_228_BatchTransfer {
label=""BatchTransfer"";
""228_constructor"" [label=""constructor""];
""228_transfer"" [label=""transfer""];
""228_fallback"" [label=""fallback""];
""228_batchTransfer"" [label=""batchTransfer""];
""228_transferAllToOwner"" [label=""transferAllToOwner""];
""228_constructor"" -> ""228_constructor"";
""228_batchTransfer"" -> ""228_ownerOnly"";
""228_transferAllToOwner"" -> ""228_ownerOnly"";
""228_transfer"" -> ""228_ownerOnly"";
}
"
0xd879d772f7479e65070aac3472d778b66525f76c.sol,StandardToken,"contract StandardToken is ERC20, BasicToken { mapping(address => mapping(address => uint256)) internal allowed; function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) { require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); require(transfersEnabled); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); Transfer(_from, _to, _value); return true; }",0,"subgraph cluster_548_StandardToken {
label=""StandardToken"";
""548_approve"" [label=""approve""];
""548_increaseApproval"" [label=""increaseApproval""];
""548_decreaseApproval"" [label=""decreaseApproval""];
""548_allowance"" [label=""allowance""];
""548_transferFrom"" [label=""transferFrom""];
""548_allowance"" -> ""548_onlyPayloadSize"";
""548_transferFrom"" -> ""548_onlyPayloadSize"";
}
"
0x300cff0f78f58c8b6d395ca0ebe8604137884ce5.sol,Testing4,"contract Testing4 { using SafeMath for uint256; mapping(address => uint256) investments; mapping(address => uint256) joined; mapping(address => uint256) withdrawals; mapping(address => uint256) referrer; uint256 public step = 50; uint256 public minimum = 10 finney; uint256 public stakingRequirement = 0.25 ether; address public ownerWallet; address public owner; event Invest(address investor, uint256 amount); event Withdraw(address investor, uint256 amount); event Bounty(address hunter, uint256 amount); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() public { owner = msg.sender; ownerWallet = msg.sender; }",0,"subgraph cluster_474_Testing4 {
label=""Testing4"";
""474_checkWithdrawals"" [label=""checkWithdrawals""];
""474_getBalance"" [label=""getBalance""];
""474_constructor"" [label=""constructor""];
""474_getMinutes"" [label=""getMinutes""];
""474_checkBalance"" [label=""checkBalance""];
""474_fallback"" [label=""fallback""];
""474_buy"" [label=""buy""];
""474_bounty"" [label=""bounty""];
""474_withdraw"" [label=""withdraw""];
""474_transferOwnership"" [label=""transferOwnership""];
""474_checkInvestments"" [label=""checkInvestments""];
""474_end"" [label=""end""];
""474_checkReferral"" [label=""checkReferral""];
""474_fallback"" -> ""474_buy"";
""474_transferOwnership"" -> ""474_onlyOwner"";
""474_withdraw"" -> ""474_getBalance"";
""474_bounty"" -> ""474_checkReferral"";
""474_buy"" -> ""474_withdraw"";
""474_end"" -> ""474_onlyOwner"";
""474_checkBalance"" -> ""474_getBalance"";
}
"
0xe181d15d53fcb0353b0501bb58ef759ca1003104.sol,DRELSPARK,contract DRELSPARK { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 2; uint public _totalSupply = 30000000000000; uint256 public RATE = 1; bool public isMinting = true; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_526_DRELSPARK {
label=""DRELSPARK"";
""526_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""526_burnTokens"" [label=""burnTokens""];
""526_fallback"" [label=""fallback""];
""526_endCrowdsale"" [label=""endCrowdsale""];
""526_constructor"" [label=""constructor""];
""526_totalSupply"" [label=""totalSupply""];
""526_transferFrom"" [label=""transferFrom""];
""526_createTokens"" [label=""createTokens""];
""526_balanceOf"" [label=""balanceOf""];
""526_approve"" [label=""approve""];
""526_transfer"" [label=""transfer""];
""526_allowance"" [label=""allowance""];
""526_endCrowdsale"" -> ""526_onlyOwner"";
""526_changeCrowdsaleRate"" -> ""526_onlyOwner"";
""526_burnTokens"" -> ""526_onlyOwner"";
""526_fallback"" -> ""526_createTokens"";
}
"
0x3fe88d527630632292d7d5182b8f50e2fb515311.sol,SimpleToken,"contract SimpleToken is Token,owned { string public name; uint8 public decimals; string public symbol; function SimpleToken(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public { totalSupply = _initialAmount * 10 ** uint256(_decimalUnits); balances[msg.sender] = totalSupply; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",0,"subgraph cluster_353_SimpleToken {
label=""SimpleToken"";
""353_transferFrom"" [label=""transferFrom""];
""353_transfer"" [label=""transfer""];
""353_SimpleToken"" [label=""SimpleToken""];
""353_allowance"" [label=""allowance""];
""353_balanceOf"" [label=""balanceOf""];
""353__transfer"" [label=""_transfer""];
""353_approve"" [label=""approve""];
""353_transfer"" -> ""353__transfer"";
""353_transferFrom"" -> ""353__transfer"";
}
"
0x48ec60c155a8487f9f06107054afe947a2345bbc.sol,Harj,contract Harj { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1180_Harj {
label=""Harj"";
""1180_buy"" [label=""buy""];
""1180_sell"" [label=""sell""];
""1180_totalSupply"" [label=""totalSupply""];
""1180_myDividends"" [label=""myDividends""];
""1180_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1180_sqrt"" [label=""sqrt""];
""1180_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1180_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1180_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1180_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1180_reinvest"" [label=""reinvest""];
""1180_transfer"" [label=""transfer""];
""1180_withdraw"" [label=""withdraw""];
""1180_exit"" [label=""exit""];
""1180_balanceOf"" [label=""balanceOf""];
""1180_fallback"" [label=""fallback""];
""1180_dividendsOf"" [label=""dividendsOf""];
""1180_sellPrice"" [label=""sellPrice""];
""1180_purchaseTokens"" [label=""purchaseTokens""];
""1180_myTokens"" [label=""myTokens""];
""1180_buyPrice"" [label=""buyPrice""];
""1180_purchaseTokens"" -> ""1180_buyPrice"";
""1180_sell"" -> ""1180_tokensToEthereum_"";
""1180_myTokens"" -> ""1180_balanceOf"";
""1180_sellPrice"" -> ""1180_tokensToEthereum_"";
""1180_calculateEthereumReceived"" -> ""1180_tokensToEthereum_"";
""1180_transfer"" -> ""1180_tokensToEthereum_"";
""1180_myDividends"" -> ""1180_dividendsOf"";
""1180_transfer"" -> ""1180_onlyBagholders"";
""1180_reinvest"" -> ""1180_onlyStronghands"";
""1180_calculateTokensReceived"" -> ""1180_ethereumToTokens_"";
""1180_exit"" -> ""1180_withdraw"";
""1180_fallback"" -> ""1180_purchaseTokens"";
""1180_sell"" -> ""1180_buyPrice"";
""1180_ethereumToTokens_"" -> ""1180_sqrt"";
""1180_withdraw"" -> ""1180_onlyStronghands"";
""1180_sell"" -> ""1180_onlyBagholders"";
""1180_reinvest"" -> ""1180_myDividends"";
""1180_withdraw"" -> ""1180_myDividends"";
""1180_transfer"" -> ""1180_myDividends"";
""1180_purchaseTokens"" -> ""1180_ethereumToTokens_"";
""1180_exit"" -> ""1180_sell"";
""1180_transfer"" -> ""1180_withdraw"";
""1180_buy"" -> ""1180_purchaseTokens"";
""1180_reinvest"" -> ""1180_purchaseTokens"";
""1180_buyPrice"" -> ""1180_tokensToEthereum_"";
}
"
0x52a6ade96e2571aef35215997a8516e52f9016ab.sol,DSMath,"contract DSMath { function add(uint256 x, uint256 y) pure internal returns (uint256 z) { assert((z = x + y) >= x); }",0,"subgraph cluster_2333_DSMath {
label=""DSMath"";
""2333_wadd"" [label=""wadd""];
""2333_wmin"" [label=""wmin""];
""2333_cast"" [label=""cast""];
""2333_hmul"" [label=""hmul""];
""2333_radd"" [label=""radd""];
""2333_rmin"" [label=""rmin""];
""2333_rdiv"" [label=""rdiv""];
""2333_wsub"" [label=""wsub""];
""2333_hdiv"" [label=""hdiv""];
""2333_wmul"" [label=""wmul""];
""2333_sub"" [label=""sub""];
""2333_rmul"" [label=""rmul""];
""2333_rmax"" [label=""rmax""];
""2333_hadd"" [label=""hadd""];
""2333_rpow"" [label=""rpow""];
""2333_wmax"" [label=""wmax""];
""2333_hmax"" [label=""hmax""];
""2333_hsub"" [label=""hsub""];
""2333_div"" [label=""div""];
""2333_max"" [label=""max""];
""2333_wdiv"" [label=""wdiv""];
""2333_mul"" [label=""mul""];
""2333_min"" [label=""min""];
""2333_hmin"" [label=""hmin""];
""2333_add"" [label=""add""];
""2333_imin"" [label=""imin""];
""2333_rsub"" [label=""rsub""];
""2333_imax"" [label=""imax""];
""2333_rpow"" -> ""2333_rmul"";
""2333_rdiv"" -> ""2333_cast"";
""2333_rmul"" -> ""2333_cast"";
""2333_radd"" -> ""2333_hadd"";
""2333_wmax"" -> ""2333_hmax"";
""2333_rmin"" -> ""2333_hmin"";
""2333_wdiv"" -> ""2333_cast"";
""2333_rmax"" -> ""2333_hmax"";
""2333_rsub"" -> ""2333_hsub"";
""2333_wsub"" -> ""2333_hsub"";
""2333_wmin"" -> ""2333_hmin"";
""2333_wadd"" -> ""2333_hadd"";
""2333_wmul"" -> ""2333_cast"";
}
"
0x0d514c490640d6276b5bb5adc52d1453cf11c5a0.sol,Token,contract Token is StandardToken { string public name = ; uint8 public decimals = 18; string public symbol = ; string public version = ; address public mintableAddress; function Token(address sale_address) { balances[msg.sender] = 0; totalSupply = 0; name = name; decimals = decimals; symbol = symbol; mintableAddress = sale_address; allowTransfer = true; createTokens(); },0,"subgraph cluster_73_BasicToken {
label=""BasicToken"";
""73_transfer"" [label=""transfer""];
""73_transferFrom"" [label=""transferFrom""];
""73_allowance"" [label=""allowance""];
""73_approve"" [label=""approve""];
""73_balanceOf"" [label=""balanceOf""];
}
"
0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol,CryptoMemes,"contract CryptoMemes is ERC721 { event Transfer(address from, address to, uint256 tokenId); event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt); event UrlUpdated(address owner, uint256 tokenId, string url); modifier onlyOwnerOf(uint256 tokenId) { require(memeIndexToOwner[tokenId] == msg.sender); _; }",0,"subgraph cluster_486_CryptoMemes {
label=""CryptoMemes"";
""486_transfer"" [label=""transfer""];
""486_totalSupply"" [label=""totalSupply""];
""486__validateUrl"" [label=""_validateUrl""];
""486_updateMemeUrl"" [label=""updateMemeUrl""];
""486_getMeme"" [label=""getMeme""];
""486_ownerOf"" [label=""ownerOf""];
""486_updatePrice"" [label=""updatePrice""];
""486__createMeme"" [label=""_createMeme""];
""486__transfer"" [label=""_transfer""];
""486_CryptoMemes"" [label=""CryptoMemes""];
""486_approve"" [label=""approve""];
""486_getContractOwner"" [label=""getContractOwner""];
""486_takeOwnership"" [label=""takeOwnership""];
""486_balanceOf"" [label=""balanceOf""];
""486_transferContractOwnership"" [label=""transferContractOwnership""];
""486_createMeme"" [label=""createMeme""];
""486_withdraw"" [label=""withdraw""];
""486_getPrice"" [label=""getPrice""];
""486_updateMemeUrl"" -> ""486__validateUrl"";
""486__createMeme"" -> ""486__transfer"";
""486_createMeme"" -> ""486__createMeme"";
""486_takeOwnership"" -> ""486_ownerOf"";
""486_updatePrice"" -> ""486_onlyOwnerOfContract"";
""486_transfer"" -> ""486_onlyOwnerOf"";
""486_transfer"" -> ""486__transfer"";
""486_updateMemeUrl"" -> ""486_onlyOwnerOf"";
""486_approve"" -> ""486_onlyOwnerOf"";
""486_takeOwnership"" -> ""486__transfer"";
""486_withdraw"" -> ""486_onlyOwnerOfContract"";
""486_createMeme"" -> ""486__validateUrl"";
""486_transferContractOwnership"" -> ""486_onlyOwnerOfContract"";
}
"
0x1b60504beb425f7cfc8dd14f29924cf596ffaf0b.sol,Matrioska,"contract Matrioska is ERC20,MatrioskaToken,Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint public decimals = 10; uint public chainStartTime; uint public chainStartBlockNumber; uint public stakeStartTime; uint public stakeMinAge = 3 days; uint public stakeMaxAge = 90 days; uint public maxMintProofOfStake = 10**16; uint public totalSupply; uint public maxTotalSupply; uint public totalInitialSupply; struct transferInStruct{ uint128 amount; uint64 time; }",0,"subgraph cluster_232_MatrioskaToken {
label=""MatrioskaToken"";
""232_annualInterest"" [label=""annualInterest""];
""232_coinAge"" [label=""coinAge""];
""232_mint"" [label=""mint""];
}
"
0x51996c0a12526138815407bc61135fed50c0d136.sol,AllForOne,"contract AllForOne { event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); mapping (address => uint) private playerRegistrationStatus; mapping (address => uint) private confirmedWinners; mapping (uint => address) private numberToAddress; uint private currentPlayersRequired; uint private currentBet; uint private playerCount; uint private jackpot; uint private revealBlock; uint private currentGame; address private contractAddress; address private owner; address private lastWinner; function AllForOne () { contractAddress = this; currentGame++; currentPlayersRequired = 25; owner = msg.sender; currentBet = 0.005 ether; lastWinner = msg.sender; }",0,"subgraph cluster_372_AllForOne {
label=""AllForOne"";
""372_winnerWithdraw"" [label=""winnerWithdraw""];
""372_changeBet"" [label=""changeBet""];
""372_transferOwnership"" [label=""transferOwnership""];
""372_canBet"" [label=""canBet""];
""372_placeBet"" [label=""placeBet""];
""372_revealWinner"" [label=""revealWinner""];
""372_AllForOne"" [label=""AllForOne""];
""372_changeBet"" -> ""372_changeBetConditions"";
""372_transferOwnership"" -> ""372_onlyOwner"";
""372_placeBet"" -> ""372_betConditions"";
""372_winnerWithdraw"" -> ""372_winnerWithdrawConditions"";
""372_revealWinner"" -> ""372_revealConditions"";
""372_changeBet"" -> ""372_onlyOwner"";
}
"
0x0267ee183beebdb7f931afe41e4e25352195b871.sol,BulleonCrowdsale,"contract BulleonCrowdsale is Claimable, CanReclaimToken { using SafeMath for uint256; event AddedToBlacklist(address wallet); event RemovedFromBlacklist(address wallet); string public version = ; address public withdrawWallet = 0xAd74Bd38911fE4C19c95D14b5733372c3978C2D9; uint256 public endDate = 1546300799; BulleonToken public rewardToken; uint256[] public tokensRate = [ 1000, 800, 600, 400, 200, 100, 75, 50, 25, 10 ]; uint256[] public tokensCap = [ 760000, 760000, 760000, 760000, 760000, 760000, 760000, 760000, 760000, 759000 ]; mapping(address=>bool) public isBlacklisted; uint256 public totalSold = 329406072304513072322000; uint256 public soldOnStage = 329406072304513072322000; uint8 public currentStage = 0; uint256 public bonus = 0; uint256 constant BONUS_COEFF = 1000; mapping(address=>uint256) public investmentsOf; function isActive() public view returns (bool) { return !(availableTokens() == 0 || now > endDate); }",0,"subgraph cluster_1879_BulleonCrowdsale {
label=""BulleonCrowdsale"";
""1879_withdrawFunds"" [label=""withdrawFunds""];
""1879_isActive"" [label=""isActive""];
""1879_forceWithdraw"" [label=""forceWithdraw""];
""1879_refundMoney"" [label=""refundMoney""];
""1879_getTokensAmount"" [label=""getTokensAmount""];
""1879_availableOnStage"" [label=""availableOnStage""];
""1879_delBlacklist"" [label=""delBlacklist""];
""1879_getBonus"" [label=""getBonus""];
""1879_addBlacklist"" [label=""addBlacklist""];
""1879_burnTokens"" [label=""burnTokens""];
""1879_setWithdraw"" [label=""setWithdraw""];
""1879_constructor"" [label=""constructor""];
""1879_stageRate"" [label=""stageRate""];
""1879_buyTokens"" [label=""buyTokens""];
""1879_stageCap"" [label=""stageCap""];
""1879_fallback"" [label=""fallback""];
""1879_toNextStage"" [label=""toNextStage""];
""1879_availableTokens"" [label=""availableTokens""];
""1879_stageBaseRate"" [label=""stageBaseRate""];
""1879_setBonus"" [label=""setBonus""];
""1879_getTokensCost"" [label=""getTokensCost""];
""1879_calcMultiStage"" [label=""calcMultiStage""];
""1879_kill"" [label=""kill""];
""1879_stageRate"" -> ""1879_stageBaseRate"";
""1879_buyTokens"" -> ""1879_availableTokens"";
""1879_buyTokens"" -> ""1879_calcMultiStage"";
""1879_availableOnStage"" -> ""1879_stageCap"";
""1879_setBonus"" -> ""1879_onlyOwner"";
""1879_calcMultiStage"" -> ""1879_availableTokens"";
""1879_delBlacklist"" -> ""1879_onlyOwner"";
""1879_availableOnStage"" -> ""1879_availableTokens"";
""1879_setWithdraw"" -> ""1879_onlyOwner"";
""1879_addBlacklist"" -> ""1879_onlyOwner"";
""1879_calcMultiStage"" -> ""1879_getTokensAmount"";
""1879_buyTokens"" -> ""1879_refundMoney"";
""1879_getTokensAmount"" -> ""1879_stageRate"";
""1879_buyTokens"" -> ""1879_stageCap"";
""1879_kill"" -> ""1879_availableTokens"";
""1879_calcMultiStage"" -> ""1879_availableOnStage"";
""1879_forceWithdraw"" -> ""1879_withdrawFunds"";
""1879_buyTokens"" -> ""1879_isActive"";
""1879_getTokensCost"" -> ""1879_stageRate"";
""1879_calcMultiStage"" -> ""1879_toNextStage"";
""1879_stageRate"" -> ""1879_getBonus"";
""1879_buyTokens"" -> ""1879_toNextStage"";
""1879_kill"" -> ""1879_onlyOwner"";
""1879_burnTokens"" -> ""1879_onlyOwner"";
""1879_forceWithdraw"" -> ""1879_onlyOwner"";
""1879_isActive"" -> ""1879_availableTokens"";
""1879_fallback"" -> ""1879_buyTokens"";
""1879_calcMultiStage"" -> ""1879_getTokensCost"";
""1879_buyTokens"" -> ""1879_withdrawFunds"";
""1879_kill"" -> ""1879_isActive"";
}
"
0x6e226310db63ac3701f657bcc62c153c1aaa3004.sol,AdminBank,contract AdminBank { using SafeMath for uint256; uint256 public fundsReceived; address public masterAdmin; address public mainContract; bool public mainContractSet = false; address public teamMemberA = 0x2597afE84661669E590016E51f8FB0059D1Ad63e; address public teamMemberB = 0x2E6C1b2B4F7307dc588c289C9150deEB1A66b73d; address public teamMemberC = 0xB3CaC7157d772A7685824309Dc1eB79497839795; address public teamMemberD = 0x87395d203B35834F79B46cd16313E6027AE4c9D4; address public teamMemberE = 0x2c3e0d5cbb08e0892f16bf06c724ccce6a757b1c; address public teamMemberF = 0xd68af19b51c41a69e121fb5fb4d77768711c4979; address public teamMemberG = 0x8c992840Bc4BA758018106e4ea9E7a1d6F0F11e5; address public teamMemberH = 0xd83FAf0D707616752c4AbA00f799566f45D4400A; address public teamMemberI = 0xca4a41Fc611e62E3cAc10aB1FE9879faF5012687; uint256 public teamMemberArate = 20; uint256 public teamMemberBrate = 20; uint256 public teamMemberCrate = 15; uint256 public teamMemberDrate = 15; uint256 public teamMemberErate = 7; uint256 public teamMemberFrate = 4; uint256 public teamMemberGrate = 4; uint256 public teamMemberHrate = 5; uint256 public teamMemberIrate = 10; mapping (address => uint256) public teamMemberTotal; mapping (address => uint256) public teamMemberUnclaimed; mapping (address => uint256) public teamMemberClaimed; mapping (address => bool) public validTeamMember; mapping (address => bool) public isProposedAddress; mapping (address => bool) public isProposing; mapping (address => uint256) public proposingAddressIndex; constructor() public { masterAdmin = msg.sender; validTeamMember[teamMemberA] = true; validTeamMember[teamMemberB] = true; validTeamMember[teamMemberC] = true; validTeamMember[teamMemberD] = true; validTeamMember[teamMemberE] = true; validTeamMember[teamMemberF] = true; validTeamMember[teamMemberG] = true; validTeamMember[teamMemberH] = true; validTeamMember[teamMemberI] = true; },0,"subgraph cluster_1556_AdminBank {
label=""AdminBank"";
""1556_balanceOf"" [label=""balanceOf""];
""1556_withdrawProxy"" [label=""withdrawProxy""];
""1556_proposeNewAddress"" [label=""proposeNewAddress""];
""1556_setContractAddress"" [label=""setContractAddress""];
""1556_removeProposal"" [label=""removeProposal""];
""1556_teamWithdraw"" [label=""teamWithdraw""];
""1556_fallback"" [label=""fallback""];
""1556_acceptProposal"" [label=""acceptProposal""];
""1556_constructor"" [label=""constructor""];
""1556_contractBalance"" [label=""contractBalance""];
""1556_removeProposal"" -> ""1556_onlyHumans"";
""1556_withdrawProxy"" -> ""1556_isTeamMember"";
""1556_withdrawProxy"" -> ""1556_onlyHumans"";
""1556_setContractAddress"" -> ""1556_onlyHumans"";
""1556_proposeNewAddress"" -> ""1556_onlyHumans"";
""1556_teamWithdraw"" -> ""1556_isMainContractSet"";
""1556_teamWithdraw"" -> ""1556_onlyHumans"";
""1556_removeProposal"" -> ""1556_isTeamMember"";
""1556_proposeNewAddress"" -> ""1556_isTeamMember"";
""1556_acceptProposal"" -> ""1556_onlyHumans"";
""1556_teamWithdraw"" -> ""1556_isTeamMember"";
""1556_withdrawProxy"" -> ""1556_isMainContractSet"";
}
"
0x6c4ca515f04722d079862a03dec1e5c011491e12.sol,ToadFarmer,contract ToadFarmer { uint256 public EGGS_TO_HATCH_1TOAD = 43200; uint256 TADPOLE = 10000; uint256 PSNHTOAD = 5000; bool public initialized = false; address public ceoAddress; mapping (address => uint256) public hatcheryToad; mapping (address => uint256) public claimedEggs; mapping (address => uint256) public lastHatch; mapping (address => address) public referrals; uint256 public marketEggs; constructor() public { ceoAddress = msg.sender; },0,"subgraph cluster_530_ToadFarmer {
label=""ToadFarmer"";
""530_buyEggs"" [label=""buyEggs""];
""530_getFreeToad"" [label=""getFreeToad""];
""530_getBalance"" [label=""getBalance""];
""530_getMyToad"" [label=""getMyToad""];
""530_seedMarket"" [label=""seedMarket""];
""530_calculateEggBuySimple"" [label=""calculateEggBuySimple""];
""530_min"" [label=""min""];
""530_calculateTrade"" [label=""calculateTrade""];
""530_sellEggs"" [label=""sellEggs""];
""530_constructor"" [label=""constructor""];
""530_devFee"" [label=""devFee""];
""530_hatchEggs"" [label=""hatchEggs""];
""530_getEggsSinceLastHatch"" [label=""getEggsSinceLastHatch""];
""530_getMyEggs"" [label=""getMyEggs""];
""530_calculateEggSell"" [label=""calculateEggSell""];
""530_calculateEggBuy"" [label=""calculateEggBuy""];
""530_getEggsSinceLastHatch"" -> ""530_min"";
""530_sellEggs"" -> ""530_devFee"";
""530_sellEggs"" -> ""530_getMyEggs"";
""530_getMyEggs"" -> ""530_getEggsSinceLastHatch"";
""530_buyEggs"" -> ""530_devFee"";
""530_buyEggs"" -> ""530_calculateEggBuy"";
""530_calculateEggSell"" -> ""530_calculateTrade"";
""530_calculateEggBuySimple"" -> ""530_calculateEggBuy"";
""530_hatchEggs"" -> ""530_getMyEggs"";
""530_sellEggs"" -> ""530_calculateEggSell"";
""530_calculateEggBuy"" -> ""530_calculateTrade"";
}
"
0xf4f5271c9d6f23cc00f93625b502f88d289a1607.sol,AkilosToken,"contract AkilosToken is ERC20Interface, Owned, WithdrawConfirmation { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; bool public started = false; uint public currentRate; uint public minimalInvestment = 0.1 ether; uint public currentRoundSales; uint public roundNumber; uint public roundOneTotal; uint public roundTwoTotal; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; event Burn(address indexed from, uint value); constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 15000000 * 10**uint(decimals); roundOneTotal = 3000000 * 10**uint(decimals); roundTwoTotal = 7000000 * 10**uint(decimals); balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_1199_AkilosToken {
label=""AkilosToken"";
""1199_approveAndCall"" [label=""approveAndCall""];
""1199_balanceOf"" [label=""balanceOf""];
""1199_fallback"" [label=""fallback""];
""1199_constructor"" [label=""constructor""];
""1199_burn"" [label=""burn""];
""1199_approve"" [label=""approve""];
""1199_allowance"" [label=""allowance""];
""1199_setCurrentRate"" [label=""setCurrentRate""];
""1199_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""1199_setStarted"" [label=""setStarted""];
""1199_setRoundNumber"" [label=""setRoundNumber""];
""1199_transfer"" [label=""transfer""];
""1199_resetCurrentRoundSales"" [label=""resetCurrentRoundSales""];
""1199_totalSupply"" [label=""totalSupply""];
""1199_transferFrom"" [label=""transferFrom""];
""1199_resetCurrentRoundSales"" -> ""1199_onlyOwner"";
""1199_setCurrentRate"" -> ""1199_onlyOwner"";
""1199_setRoundNumber"" -> ""1199_onlyOwner"";
""1199_setStarted"" -> ""1199_onlyOwner"";
}
"
0x288d045357ac63438278af0b5b84d677713e7c30.sol,MerchantWallet,"contract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted { string constant VERSION = ; address public merchantAccount; address public merchantFundAddress; bytes32 public merchantIdHash; mapping (string=>string) profileMap; mapping (string=>string) paymentSettingsMap; mapping (string=>uint32) compositeReputationMap; uint8 public constant REPUTATION_DECIMALS = 4; modifier onlyMerchant() { require(msg.sender == merchantAccount); _; }",0,"subgraph cluster_1312_MerchantWallet {
label=""MerchantWallet"";
""1312_doWithdrawal"" [label=""doWithdrawal""];
""1312_compositeReputation"" [label=""compositeReputation""];
""1312_fallback"" [label=""fallback""];
""1312_constructor"" [label=""constructor""];
""1312_withdrawToExchange"" [label=""withdrawToExchange""];
""1312_paymentSettings"" [label=""paymentSettings""];
""1312_setProfile"" [label=""setProfile""];
""1312_merchantIdHash"" [label=""merchantIdHash""];
""1312_setCompositeReputation"" [label=""setCompositeReputation""];
""1312_changeMerchantAccount"" [label=""changeMerchantAccount""];
""1312_withdrawTo"" [label=""withdrawTo""];
""1312_changeFundAddress"" [label=""changeFundAddress""];
""1312_merchantFundAddress"" [label=""merchantFundAddress""];
""1312_withdraw"" [label=""withdraw""];
""1312_setPaymentSettings"" [label=""setPaymentSettings""];
""1312_withdrawAllToExchange"" [label=""withdrawAllToExchange""];
""1312_profile"" [label=""profile""];
""1312_withdrawAllTokensToExchange"" [label=""withdrawAllTokensToExchange""];
""1312_setProfile"" -> ""1312_onlyOwner"";
""1312_withdrawTo"" -> ""1312_whenNotPaused"";
""1312_withdrawAllTokensToExchange"" -> ""1312_onlyMerchantOrMonetha"";
""1312_withdrawAllToExchange"" -> ""1312_onlyMerchantOrMonetha"";
""1312_constructor"" -> ""1312_isEOA"";
""1312_withdraw"" -> ""1312_onlyMerchant"";
""1312_setCompositeReputation"" -> ""1312_onlyMonetha"";
""1312_setPaymentSettings"" -> ""1312_onlyOwner"";
""1312_withdrawTo"" -> ""1312_doWithdrawal"";
""1312_changeFundAddress"" -> ""1312_isEOA"";
""1312_withdrawToExchange"" -> ""1312_onlyMerchantOrMonetha"";
""1312_withdrawAllToExchange"" -> ""1312_whenNotPaused"";
""1312_changeMerchantAccount"" -> ""1312_onlyMerchant"";
""1312_withdrawTo"" -> ""1312_onlyMerchant"";
""1312_withdrawToExchange"" -> ""1312_whenNotPaused"";
""1312_withdrawToExchange"" -> ""1312_doWithdrawal"";
""1312_withdrawAllToExchange"" -> ""1312_doWithdrawal"";
""1312_withdrawAllTokensToExchange"" -> ""1312_whenNotPaused"";
""1312_changeFundAddress"" -> ""1312_onlyMerchant"";
""1312_withdraw"" -> ""1312_withdrawTo"";
""1312_changeMerchantAccount"" -> ""1312_whenNotPaused"";
}
"
0x79703fcd68182a9ca2076b7b1516fc871c6d0c8b.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },0,"subgraph cluster_397_BasicToken {
label=""BasicToken"";
""397_transfer"" [label=""transfer""];
""397_balanceOf"" [label=""balanceOf""];
""397_totalSupply"" [label=""totalSupply""];
}
"
0x9ad685a3eaa6b0a1ea601f48b7797a12011fdeb0.sol,TradersToken,"contract TradersToken is DSTokenBase , DSStop { string public symbol=; string public name=; uint256 public decimals = 3; uint256 public initialSupply=500000000000000; address public burnAdmin; constructor() public DSTokenBase(initialSupply) { burnAdmin=msg.sender; }",0,"subgraph cluster_1091_TradersToken {
label=""TradersToken"";
""1091_constructor"" [label=""constructor""];
""1091_burnfromAdmin"" [label=""burnfromAdmin""];
""1091_approve"" [label=""approve""];
""1091_isAdmin"" [label=""isAdmin""];
""1091_renounceOwnership"" [label=""renounceOwnership""];
""1091_transferFrom"" [label=""transferFrom""];
""1091_transferFrom"" -> ""1091_add"";
""1091_transferFrom"" -> ""1091_stoppable"";
""1091_renounceOwnership"" -> ""1091_onlyAdmin"";
""1091_burnfromAdmin"" -> ""1091_onlyAdmin"";
""1091_transferFrom"" -> ""1091_sub"";
""1091_constructor"" -> ""1091_constructor"";
""1091_approve"" -> ""1091_stoppable"";
""1091_approve"" -> ""1091_approve"";
""1091_burnfromAdmin"" -> ""1091_sub"";
}
"
0xa21c9a3ae47103b1fd1dfa04766c4d00c19e1ff6.sol,CryptoOscarsToken,"contract CryptoOscarsToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",0,"subgraph cluster_930_CryptoOscarsToken {
label=""CryptoOscarsToken"";
""930_approve"" [label=""approve""];
""930_balanceOf"" [label=""balanceOf""];
""930_transfer"" [label=""transfer""];
""930_ownerOf"" [label=""ownerOf""];
""930_payout"" [label=""payout""];
""930_takeOwnership"" [label=""takeOwnership""];
""930_totalSupply"" [label=""totalSupply""];
""930__createMovie"" [label=""_createMovie""];
""930_setCOO"" [label=""setCOO""];
""930_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""930_setCEO"" [label=""setCEO""];
""930__payout"" [label=""_payout""];
""930_tokensOfOwner"" [label=""tokensOfOwner""];
""930__addressNotNull"" [label=""_addressNotNull""];
""930_priceOf"" [label=""priceOf""];
""930_createContractMovie"" [label=""createContractMovie""];
""930__transfer"" [label=""_transfer""];
""930_name"" [label=""name""];
""930_purchase"" [label=""purchase""];
""930__approved"" [label=""_approved""];
""930_createPromoMovie"" [label=""createPromoMovie""];
""930_symbol"" [label=""symbol""];
""930__owns"" [label=""_owns""];
""930_transferFrom"" [label=""transferFrom""];
""930_getMovie"" [label=""getMovie""];
""930_implementsERC721"" [label=""implementsERC721""];
""930_transferFrom"" -> ""930__addressNotNull"";
""930_takeOwnership"" -> ""930__approved"";
""930_transferFrom"" -> ""930__approved"";
""930_createContractMovie"" -> ""930_onlyCOO"";
""930_setCEO"" -> ""930_onlyCEO"";
""930_purchase"" -> ""930__transfer"";
""930_purchase"" -> ""930__addressNotNull"";
""930_payout"" -> ""930_onlyCLevel"";
""930__createMovie"" -> ""930__transfer"";
""930_payout"" -> ""930__payout"";
""930_createContractMovie"" -> ""930__createMovie"";
""930_createPromoMovie"" -> ""930_onlyCOO"";
""930_tokensOfOwner"" -> ""930_balanceOf"";
""930_createPromoMovie"" -> ""930__createMovie"";
""930_takeOwnership"" -> ""930__addressNotNull"";
""930_setCOO"" -> ""930_onlyCEO"";
""930_transferFrom"" -> ""930__transfer"";
""930_transferFrom"" -> ""930__owns"";
""930_tokensOfOwner"" -> ""930_totalSupply"";
""930_transfer"" -> ""930__owns"";
""930_takeOwnership"" -> ""930__transfer"";
""930_approve"" -> ""930__owns"";
""930_transfer"" -> ""930__addressNotNull"";
""930_transfer"" -> ""930__transfer"";
}
"
0xc5392940c99a9e02c47feea448c2474fb768f65c.sol,XMX,"contract XMX { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function XMX ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_XMX {
label=""XMX"";
""361__transfer"" [label=""_transfer""];
""361_XMX"" [label=""XMX""];
""361_burn"" [label=""burn""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0xf1ada8ab9b75375c05c1af0acec6f6d975470a24.sol,TokensGate,"contract TokensGate is Crowdsale { mapping(address => bool) public icoAddresses; function TokensGate ( uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet ) public Crowdsale(_startTime, _endTime, _rate, _wallet) { }",0,"subgraph cluster_1017_TokensGate {
label=""TokensGate"";
""1017_tokenOwnership"" [label=""tokenOwnership""];
""1017_TokensGate"" [label=""TokensGate""];
""1017_addIcoAddress"" [label=""addIcoAddress""];
""1017_fallback"" [label=""fallback""];
""1017_mintTokens"" [label=""mintTokens""];
""1017_createTokenContract"" [label=""createTokenContract""];
""1017_changeOwner"" [label=""changeOwner""];
""1017_setEndTime"" [label=""setEndTime""];
""1017_buyTokens"" [label=""buyTokens""];
""1017_TokensGate"" -> ""1017_Crowdsale"";
}
"
0x7703c35cffdc5cda8d27aa3df2f9ba6964544b6e.sol,PylonToken,"contract PylonToken is owned { string public standard = ; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 3750000000000000000000000; mapping (address => uint256) public balanceOf; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); using SafeMath for uint256; address public beneficiary = 0xAE0151Ca8C9b6A1A7B50Ce80Bf7436400E22b535; uint256 public fundingGoal = 21230434782608700000000; uint256 public amountRaised; uint256 public deadline; uint256 public price = 6608695652173910; uint256 public totalTokensToSend = 3250000000000000000000000; uint256 public maxEtherInvestment = 826086956521739000000; uint256 public maxTokens = 297619047619048000000000; uint256 public bonusCap = 750000000000000000000000; uint256 public pylonSelled = 0; uint256 public startBlockBonus; uint256 public endBlockBonus1; uint256 public endBlockBonus2; uint256 public endBlockBonus3; uint256 public qnt10k = 6578947368421050000000; bool fundingGoalReached = false; bool crowdsaleClosed = false; event GoalReached(address deposit, uint256 amountDeposited); event FundTransfer(address backer, uint256 amount, bool isContribution); event LogQuantity(uint256 _amount, string _message); uint256 public startBlock = getBlockNumber(); bool public paused = false; modifier contributionOpen() { require(getBlockNumber() >= startBlock && getBlockNumber() <= deadline); _; }",0,"subgraph cluster_1805_PylonToken {
label=""PylonToken"";
""1805_crowdsale"" [label=""crowdsale""];
""1805_resumeContribution"" [label=""resumeContribution""];
""1805_freezeAccount"" [label=""freezeAccount""];
""1805_mintToken"" [label=""mintToken""];
""1805_transfer"" [label=""transfer""];
""1805__transfer"" [label=""_transfer""];
""1805_validPurchase"" [label=""validPurchase""];
""1805_buyPreIco"" [label=""buyPreIco""];
""1805_fallback"" [label=""fallback""];
""1805_pauseContribution"" [label=""pauseContribution""];
""1805_buyIco"" [label=""buyIco""];
""1805_buyTokens"" [label=""buyTokens""];
""1805_PylonToken"" [label=""PylonToken""];
""1805_checkGoalReached"" [label=""checkGoalReached""];
""1805_getBlockNumber"" [label=""getBlockNumber""];
""1805_burn"" [label=""burn""];
""1805_burnFrom"" [label=""burnFrom""];
""1805_pauseContribution"" -> ""1805_onlyOwner"";
""1805_burn"" -> ""1805_onlyOwner"";
""1805_burnFrom"" -> ""1805_onlyOwner"";
""1805_checkGoalReached"" -> ""1805_onlyOwner"";
""1805_PylonToken"" -> ""1805_getBlockNumber"";
""1805_resumeContribution"" -> ""1805_onlyOwner"";
""1805_transfer"" -> ""1805__transfer"";
""1805_fallback"" -> ""1805_buyTokens"";
""1805_mintToken"" -> ""1805_onlyOwner"";
""1805_fallback"" -> ""1805_notPaused"";
""1805_validPurchase"" -> ""1805_getBlockNumber"";
""1805_freezeAccount"" -> ""1805_onlyOwner"";
""1805_buyTokens"" -> ""1805_getBlockNumber"";
""1805_buyTokens"" -> ""1805_notPaused"";
""1805_checkGoalReached"" -> ""1805_afterDeadline"";
""1805_buyTokens"" -> ""1805_buyIco"";
""1805_buyPreIco"" -> ""1805_getBlockNumber"";
""1805_crowdsale"" -> ""1805_onlyOwner"";
""1805_buyTokens"" -> ""1805_buyPreIco"";
""1805_buyTokens"" -> ""1805_validPurchase"";
}
"
0xf04ed156972cd144289b6712d19dead025e73a2c.sol,FUS,"contract FUS is owned { string public name = ; string public symbol = ; uint8 public decimals = 18; uint public totalSupply = 100000000000000000000000000; mapping (address => uint) public balanceOf; mapping (address => mapping (address => uint)) public allowance; event Transfer(address indexed from, address indexed to, uint value); function FUS() public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_254_FUS {
label=""FUS"";
""254__transfer"" [label=""_transfer""];
""254_FUS"" [label=""FUS""];
""254_fallback"" [label=""fallback""];
""254_transfer"" [label=""transfer""];
""254_approve"" [label=""approve""];
""254_transferFrom"" [label=""transferFrom""];
""254_transferFrom"" -> ""254__transfer"";
""254_transfer"" -> ""254__transfer"";
}
"
0xd84e469c31efc9c67dbadd25c0a04006a5d30c05.sol,TFTOKEN,"contract TFTOKEN is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 1500000000 * (10 ** uint256(decimals)); uint256 public constant FREE_SUPPLY = 300000000 * (10 ** uint256(decimals)); uint256 public nextFreeCount = 999 * (10 ** uint256(decimals)) ; uint256 public constant decr = 0 * (10 ** 1) ; mapping(address => bool) touched; function TFTOKEN() public { totalSupply_ = INITIAL_SUPPLY; balances[address(this)] = FREE_SUPPLY; emit Transfer(0x0, address(this), FREE_SUPPLY); balances[msg.sender] = INITIAL_SUPPLY - FREE_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY - FREE_SUPPLY); }",0,"subgraph cluster_787_TFTOKEN {
label=""TFTOKEN"";
""787_safeWithdrawal"" [label=""safeWithdrawal""];
""787_TFTOKEN"" [label=""TFTOKEN""];
""787__transfer"" [label=""_transfer""];
""787_fallback"" [label=""fallback""];
""787_safeWithdrawal"" -> ""787_onlyOwner"";
""787_fallback"" -> ""787__transfer"";
}
"
0x1789cca7430aacbdb7c89f9b5695a9c06e4764eb.sol,Custodian,contract Custodian { struct Request { bytes32 lockId; bytes4 callbackSelector; address callbackAddress; uint256 idx; uint256 timestamp; bool extended; },0,"subgraph cluster_576_Custodian {
label=""Custodian"";
""576_requestUnlock"" [label=""requestUnlock""];
""576_Custodian"" [label=""Custodian""];
""576_completeUnlock"" [label=""completeUnlock""];
""576_deleteUncompletableRequest"" [label=""deleteUncompletableRequest""];
""576_extendRequestTimeLock"" [label=""extendRequestTimeLock""];
""576_extendRequestTimeLock"" -> ""576_onlyPrimary"";
}
"
0x6c6ff5213433510c91c65787dcf604bb2dc37c19.sol,x32323,"contract x32323 is owned{ mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => bool) initialized; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); function freezeAccount(address target, bool freeze) onlyOwner { frozenAccount[target] = freeze; FrozenFunds(target, freeze); }",0,"subgraph cluster_556_x32323 {
label=""x32323"";
""556_transferFrom"" [label=""transferFrom""];
""556_transfer"" [label=""transfer""];
""556__transfer"" [label=""_transfer""];
""556_setPrices"" [label=""setPrices""];
""556_approve"" [label=""approve""];
""556_buy"" [label=""buy""];
""556_freezeAccount"" [label=""freezeAccount""];
""556_initialize"" [label=""initialize""];
""556_setMinBalance"" [label=""setMinBalance""];
""556_sell"" [label=""sell""];
""556_approveAndCall"" [label=""approveAndCall""];
""556_TokenERC20"" [label=""TokenERC20""];
""556_approveAndCall"" -> ""556_approve"";
""556_transferFrom"" -> ""556__transfer"";
""556_setPrices"" -> ""556_onlyOwner"";
""556_transfer"" -> ""556__transfer"";
""556_setMinBalance"" -> ""556_onlyOwner"";
""556_transfer"" -> ""556_sell"";
""556_freezeAccount"" -> ""556_onlyOwner"";
""556__transfer"" -> ""556_initialize"";
}
"
0x719efd3550c82b1ce656e64803de576ce93e362f.sol,Helenex,"contract Helenex is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint256 public _totalSupply; mapping(address => uint256) internal balances; mapping (address => uint256) internal freezeOf; mapping(address => mapping(address => uint256)) internal allowed; function Helenex() public { symbol = ; name = ; decimals = 8; _totalSupply = 2100000000000000; balances[msg.sender] = _totalSupply; emit Transfer(address(0), msg.sender, _totalSupply); }",0,"subgraph cluster_832_Helenex {
label=""Helenex"";
""832_approve"" [label=""approve""];
""832_burn"" [label=""burn""];
""832_fallback"" [label=""fallback""];
""832_allowance"" [label=""allowance""];
""832_transferFrom"" [label=""transferFrom""];
""832_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""832_totalSupply"" [label=""totalSupply""];
""832_approveAndCall"" [label=""approveAndCall""];
""832_balanceOf"" [label=""balanceOf""];
""832_freeze"" [label=""freeze""];
""832_unfreeze"" [label=""unfreeze""];
""832_Helenex"" [label=""Helenex""];
""832_transfer"" [label=""transfer""];
""832_withdrawEther"" [label=""withdrawEther""];
""832_transferAnyERC20Token"" -> ""832_onlyOwner"";
""832_transferFrom"" -> ""832_safeSub"";
""832_transferFrom"" -> ""832_safeAdd"";
""832_unfreeze"" -> ""832_safeAdd"";
""832_freeze"" -> ""832_safeAdd"";
""832_burn"" -> ""832_safeSub"";
""832_unfreeze"" -> ""832_safeSub"";
""832_transfer"" -> ""832_safeSub"";
""832_transfer"" -> ""832_safeAdd"";
""832_freeze"" -> ""832_safeSub"";
""832_withdrawEther"" -> ""832_onlyOwner"";
}
"
0xefab2a9292a10036006e7a68535724ade16a65ca.sol,EOSpace,"contract EOSpace is ERC20 { using SafeMath for uint256; address owner = msg.sender; address EOSContract = 0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 10000000000e18; uint256 public totalDistributed = 0; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1147_EOSpace {
label=""EOSpace"";
""1147_getTokens"" [label=""getTokens""];
""1147_transferOwnership"" [label=""transferOwnership""];
""1147_airdrop"" [label=""airdrop""];
""1147_transfer"" [label=""transfer""];
""1147_finishDistribution"" [label=""finishDistribution""];
""1147_distr"" [label=""distr""];
""1147_withdraw"" [label=""withdraw""];
""1147_fallback"" [label=""fallback""];
""1147_burn"" [label=""burn""];
""1147_disableWhitelist"" [label=""disableWhitelist""];
""1147_distribution"" [label=""distribution""];
""1147_EOSpace"" [label=""EOSpace""];
""1147_allowance"" [label=""allowance""];
""1147_transferFrom"" [label=""transferFrom""];
""1147_enableWhitelist"" [label=""enableWhitelist""];
""1147_balanceOf"" [label=""balanceOf""];
""1147_approve"" [label=""approve""];
""1147_getTokenBalance"" [label=""getTokenBalance""];
""1147_distributeAmounts"" [label=""distributeAmounts""];
""1147_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1147_getTokens"" -> ""1147_distr"";
""1147_distributeAmounts"" -> ""1147_onlyOwner"";
""1147_transfer"" -> ""1147_onlyPayloadSize"";
""1147_burn"" -> ""1147_onlyOwner"";
""1147_airdrop"" -> ""1147_canDistr"";
""1147_transferOwnership"" -> ""1147_onlyOwner"";
""1147_getTokens"" -> ""1147_onlyWhitelist"";
""1147_distributeAmounts"" -> ""1147_canDistr"";
""1147_distr"" -> ""1147_canDistr"";
""1147_fallback"" -> ""1147_getTokens"";
""1147_withdraw"" -> ""1147_onlyOwner"";
""1147_finishDistribution"" -> ""1147_canDistr"";
""1147_distribution"" -> ""1147_onlyOwner"";
""1147_EOSpace"" -> ""1147_distr"";
""1147_disableWhitelist"" -> ""1147_onlyOwner"";
""1147_airdrop"" -> ""1147_onlyOwner"";
""1147_distribution"" -> ""1147_distr"";
""1147_distribution"" -> ""1147_canDistr"";
""1147_airdrop"" -> ""1147_distr"";
""1147_finishDistribution"" -> ""1147_onlyOwner"";
""1147_getTokens"" -> ""1147_canDistr"";
""1147_transferFrom"" -> ""1147_onlyPayloadSize"";
""1147_withdrawForeignTokens"" -> ""1147_onlyOwner"";
""1147_distributeAmounts"" -> ""1147_distr"";
""1147_enableWhitelist"" -> ""1147_onlyOwner"";
}
"
0xf2a173ce6c3556cb39734f805b6fba2159a0fe91.sol,COOToken,"contract COOToken is Token, Owned { using SafeMath for uint256; string public constant name = ; uint8 public constant decimals = 18; string public constant symbol = ; uint256 currentTotalSupply; uint256 limitTotalSupply = 10000000000000000000000000000; mapping (address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; event Aditional(address indexed _owner,uint256 _value); function COOToken(uint256 _initialAmount) { if(_initialAmount > limitTotalSupply) throw; balances[msg.sender] = _initialAmount; currentTotalSupply = _initialAmount; }",0,"subgraph cluster_584_COOToken {
label=""COOToken"";
""584_COOToken"" [label=""COOToken""];
""584_additional"" [label=""additional""];
""584_limitSupply"" [label=""limitSupply""];
""584_approve"" [label=""approve""];
""584_fallback"" [label=""fallback""];
""584_allowance"" [label=""allowance""];
""584_transfer"" [label=""transfer""];
""584_transferFrom"" [label=""transferFrom""];
""584_balanceOf"" [label=""balanceOf""];
""584_totalSupply"" [label=""totalSupply""];
""584_additional"" -> ""584_onlyOwner"";
}
"
0x720608228bda773fe22e816ee72463040f11c19e.sol,CommonCrowdsale,"contract CommonCrowdsale is Ownable, LockableChanges { using SafeMath for uint256; uint public constant PERCENT_RATE = 100; uint public price; uint public minInvestedLimit; uint public hardcap; uint public start; uint public end; uint public invested; uint public minted; address public wallet; address public bountyTokensWallet; address public devTokensWallet; address public advisorsTokensWallet; address public foundersTokensWallet; uint public bountyTokensPercent; uint public devTokensPercent; uint public advisorsTokensPercent; uint public foundersTokensPercent; address public directMintAgent; struct Bonus { uint periodInDays; uint bonus; }",0,"subgraph cluster_1356_CommonCrowdsale {
label=""CommonCrowdsale"";
""1356_mintAndSendTokens"" [label=""mintAndSendTokens""];
""1356_setAdvisorsTokensPercent"" [label=""setAdvisorsTokensPercent""];
""1356_setWallet"" [label=""setWallet""];
""1356_setEnd"" [label=""setEnd""];
""1356_calculateAndTransferTokens"" [label=""calculateAndTransferTokens""];
""1356_setBountyTokensPercent"" [label=""setBountyTokensPercent""];
""1356_mintExtendedTokens"" [label=""mintExtendedTokens""];
""1356_retrieveTokens"" [label=""retrieveTokens""];
""1356_setBountyTokensWallet"" [label=""setBountyTokensWallet""];
""1356_setDevTokensWallet"" [label=""setDevTokensWallet""];
""1356_setToken"" [label=""setToken""];
""1356_setFoundersTokensWallet"" [label=""setFoundersTokensWallet""];
""1356_setFoundersTokensPercent"" [label=""setFoundersTokensPercent""];
""1356_setMinInvestedLimit"" [label=""setMinInvestedLimit""];
""1356_setHardcap"" [label=""setHardcap""];
""1356_setPrice"" [label=""setPrice""];
""1356_setDevTokensPercent"" [label=""setDevTokensPercent""];
""1356_setDirectMintAgent"" [label=""setDirectMintAgent""];
""1356_bonusesCount"" [label=""bonusesCount""];
""1356_directMint"" [label=""directMint""];
""1356_fallback"" [label=""fallback""];
""1356_setAdvisorsTokensWallet"" [label=""setAdvisorsTokensWallet""];
""1356_getBonus"" [label=""getBonus""];
""1356_setStart"" [label=""setStart""];
""1356_addBonus"" [label=""addBonus""];
""1356_createTokens"" [label=""createTokens""];
""1356_setToken"" -> ""1356_onlyOwner"";
""1356_setDevTokensPercent"" -> ""1356_onlyOwner"";
""1356_setFoundersTokensWallet"" -> ""1356_onlyOwner"";
""1356_fallback"" -> ""1356_createTokens"";
""1356_addBonus"" -> ""1356_onlyOwner"";
""1356_setFoundersTokensPercent"" -> ""1356_onlyOwner"";
""1356_setPrice"" -> ""1356_onlyOwner"";
""1356_setAdvisorsTokensWallet"" -> ""1356_onlyOwner"";
""1356_directMint"" -> ""1356_calculateAndTransferTokens"";
""1356_setWallet"" -> ""1356_onlyOwner"";
""1356_setEnd"" -> ""1356_onlyOwner"";
""1356_mintExtendedTokens"" -> ""1356_mintAndSendTokens"";
""1356_directMint"" -> ""1356_saleIsOn"";
""1356_calculateAndTransferTokens"" -> ""1356_mintAndSendTokens"";
""1356_setMinInvestedLimit"" -> ""1356_onlyOwner"";
""1356_setBountyTokensWallet"" -> ""1356_onlyOwner"";
""1356_setAdvisorsTokensPercent"" -> ""1356_onlyOwner"";
""1356_calculateAndTransferTokens"" -> ""1356_getBonus"";
""1356_retrieveTokens"" -> ""1356_onlyOwner"";
""1356_setStart"" -> ""1356_onlyOwner"";
""1356_setBountyTokensPercent"" -> ""1356_onlyOwner"";
""1356_setDirectMintAgent"" -> ""1356_onlyOwner"";
""1356_setDevTokensWallet"" -> ""1356_onlyOwner"";
""1356_directMint"" -> ""1356_onlyDirectMintAgentOrOwner"";
""1356_setHardcap"" -> ""1356_onlyOwner"";
}
"
0x029af1f2c753c458c1e7fa04428e78cbe2eb09a7.sol,CryptoBeginnerQuest,contract CryptoBeginnerQuest { using SafeMath for uint256; address private administrator; CryptoEngineerInterface public Engineer; CryptoDepositInterface public Deposit; CryptoMiningWarInterface public MiningWar; CryptoAirdropGameInterface public AirdropGame; CryptoBossWannaCryInterface public BossWannaCry; CryptoArenaInterface public Arena; address public miningWarAddress; uint256 private miningWarDeadline; uint256 private miningWarRound; mapping(address => Player) private players; mapping(address => MinerQuest) private minerQuests; mapping(address => EngineerQuest) private engineerQuests; mapping(address => DepositQuest) private depositQuests; mapping(address => JoinAirdropQuest) private joinAirdropQuests; mapping(address => AtkBossQuest) private atkBossQuests; mapping(address => AtkPlayerQuest) private atkPlayerQuests; mapping(address => BoosterQuest) private boosterQuests; mapping(address => RedbullQuest) private redbullQuests; struct Player { uint256 miningWarRound; uint256 currentQuest; },0,"subgraph cluster_2503_CryptoBeginnerQuest {
label=""CryptoBeginnerQuest"";
""2503_confirmBoosterQuest"" [label=""confirmBoosterQuest""];
""2503_getBoosters"" [label=""getBoosters""];
""2503_setBossWannaCryInterface"" [label=""setBossWannaCryInterface""];
""2503_setAirdropGameInterface"" [label=""setAirdropGameInterface""];
""2503_addBoosterQuest"" [label=""addBoosterQuest""];
""2503_checkAtkBossQuest"" [label=""checkAtkBossQuest""];
""2503_getMiningWarRoundOfPlayer"" [label=""getMiningWarRoundOfPlayer""];
""2503_checkBoosterQuest"" [label=""checkBoosterQuest""];
""2503_confirmJoinAirdropQuest"" [label=""confirmJoinAirdropQuest""];
""2503_getEngineerLv1"" [label=""getEngineerLv1""];
""2503_confirmAtkBossQuest"" [label=""confirmAtkBossQuest""];
""2503_isContractMiniGame"" [label=""isContractMiniGame""];
""2503_getMinerLv1"" [label=""getMinerLv1""];
""2503_checkAtkPlayerQuest"" [label=""checkAtkPlayerQuest""];
""2503_constructor"" [label=""constructor""];
""2503_addLevelQuest"" [label=""addLevelQuest""];
""2503_setMiningWarInterface"" [label=""setMiningWarInterface""];
""2503_addAtkPlayerQuest"" [label=""addAtkPlayerQuest""];
""2503_getPlayerBossWannaCryData"" [label=""getPlayerBossWannaCryData""];
""2503_addRedbullQuest"" [label=""addRedbullQuest""];
""2503_getData"" [label=""getData""];
""2503_checkRedbullQuest"" [label=""checkRedbullQuest""];
""2503_confirmQuest"" [label=""confirmQuest""];
""2503_addJoinAirdropQuest"" [label=""addJoinAirdropQuest""];
""2503_startGame"" [label=""startGame""];
""2503_getMiningWarRound"" [label=""getMiningWarRound""];
""2503_checkMinerQuest"" [label=""checkMinerQuest""];
""2503_confirmGetFreeQuest"" [label=""confirmGetFreeQuest""];
""2503_getNextTimeAtkPlayer"" [label=""getNextTimeAtkPlayer""];
""2503_checkDepositQuest"" [label=""checkDepositQuest""];
""2503_addEngineerQuest"" [label=""addEngineerQuest""];
""2503_setArenaInterface"" [label=""setArenaInterface""];
""2503_checkQuest"" [label=""checkQuest""];
""2503_confirmRedbullQuest"" [label=""confirmRedbullQuest""];
""2503_isBeginnerQuestContract"" [label=""isBeginnerQuestContract""];
""2503_confirmEngineerQuest"" [label=""confirmEngineerQuest""];
""2503_addMinerQuest"" [label=""addMinerQuest""];
""2503_checkEngineerQuest"" [label=""checkEngineerQuest""];
""2503_addAtkBossQuest"" [label=""addAtkBossQuest""];
""2503_setDepositInterface"" [label=""setDepositInterface""];
""2503_getRedbulls"" [label=""getRedbulls""];
""2503_getPlayerAirdropGameData"" [label=""getPlayerAirdropGameData""];
""2503_setupMiniGame"" [label=""setupMiniGame""];
""2503_checkGetFreeQuest"" [label=""checkGetFreeQuest""];
""2503_checkJoinAirdropQuest"" [label=""checkJoinAirdropQuest""];
""2503_confirmDepositQuest"" [label=""confirmDepositQuest""];
""2503_fallback"" [label=""fallback""];
""2503_getPlayerDepositData"" [label=""getPlayerDepositData""];
""2503_confirmAtkPlayerQuest"" [label=""confirmAtkPlayerQuest""];
""2503_addQuest"" [label=""addQuest""];
""2503_setEngineerInterface"" [label=""setEngineerInterface""];
""2503_confirmMinerQuest"" [label=""confirmMinerQuest""];
""2503_addDepositQuest"" [label=""addDepositQuest""];
""2503_upgrade"" [label=""upgrade""];
""2503_getMiningWarDealine"" [label=""getMiningWarDealine""];
""2503_checkMinerQuest"" -> ""2503_getMinerLv1"";
""2503_setArenaInterface"" -> ""2503_isAdministrator"";
""2503_addQuest"" -> ""2503_addAtkPlayerQuest"";
""2503_checkQuest"" -> ""2503_checkJoinAirdropQuest"";
""2503_checkRedbullQuest"" -> ""2503_getRedbulls"";
""2503_setEngineerInterface"" -> ""2503_isAdministrator"";
""2503_addQuest"" -> ""2503_addDepositQuest"";
""2503_checkQuest"" -> ""2503_checkBoosterQuest"";
""2503_addQuest"" -> ""2503_addJoinAirdropQuest"";
""2503_checkAtkBossQuest"" -> ""2503_getPlayerBossWannaCryData"";
""2503_addAtkBossQuest"" -> ""2503_getPlayerBossWannaCryData"";
""2503_confirmQuest"" -> ""2503_addQuest"";
""2503_constructor"" -> ""2503_setBossWannaCryInterface"";
""2503_confirmQuest"" -> ""2503_confirmAtkBossQuest"";
""2503_confirmQuest"" -> ""2503_confirmRedbullQuest"";
""2503_constructor"" -> ""2503_setEngineerInterface"";
""2503_checkJoinAirdropQuest"" -> ""2503_getPlayerAirdropGameData"";
""2503_addQuest"" -> ""2503_addBoosterQuest"";
""2503_constructor"" -> ""2503_setMiningWarInterface"";
""2503_addLevelQuest"" -> ""2503_addDepositQuest"";
""2503_checkQuest"" -> ""2503_checkDepositQuest"";
""2503_confirmQuest"" -> ""2503_confirmAtkPlayerQuest"";
""2503_addQuest"" -> ""2503_addMinerQuest"";
""2503_addQuest"" -> ""2503_addAtkBossQuest"";
""2503_addLevelQuest"" -> ""2503_isAdministrator"";
""2503_upgrade"" -> ""2503_isAdministrator"";
""2503_addLevelQuest"" -> ""2503_addAtkPlayerQuest"";
""2503_constructor"" -> ""2503_setAirdropGameInterface"";
""2503_addLevelQuest"" -> ""2503_addMinerQuest"";
""2503_startGame"" -> ""2503_getMiningWarRound"";
""2503_setAirdropGameInterface"" -> ""2503_isAdministrator"";
""2503_checkQuest"" -> ""2503_checkRedbullQuest"";
""2503_setDepositInterface"" -> ""2503_isAdministrator"";
""2503_checkQuest"" -> ""2503_checkAtkPlayerQuest"";
""2503_confirmQuest"" -> ""2503_confirmMinerQuest"";
""2503_checkQuest"" -> ""2503_checkAtkBossQuest"";
""2503_checkDepositQuest"" -> ""2503_getPlayerDepositData"";
""2503_addLevelQuest"" -> ""2503_addEngineerQuest"";
""2503_checkQuest"" -> ""2503_checkMinerQuest"";
""2503_setBossWannaCryInterface"" -> ""2503_isAdministrator"";
""2503_setMiningWarInterface"" -> ""2503_isAdministrator"";
""2503_confirmQuest"" -> ""2503_checkQuest"";
""2503_addLevelQuest"" -> ""2503_addBoosterQuest"";
""2503_addAtkPlayerQuest"" -> ""2503_getNextTimeAtkPlayer"";
""2503_checkEngineerQuest"" -> ""2503_getEngineerLv1"";
""2503_confirmQuest"" -> ""2503_confirmBoosterQuest"";
""2503_addLevelQuest"" -> ""2503_addJoinAirdropQuest"";
""2503_addLevelQuest"" -> ""2503_addRedbullQuest"";
""2503_checkGetFreeQuest"" -> ""2503_getMiningWarRoundOfPlayer"";
""2503_startGame"" -> ""2503_getMiningWarDealine"";
""2503_addJoinAirdropQuest"" -> ""2503_getPlayerAirdropGameData"";
""2503_addQuest"" -> ""2503_addRedbullQuest"";
""2503_constructor"" -> ""2503_setDepositInterface"";
""2503_checkAtkPlayerQuest"" -> ""2503_getNextTimeAtkPlayer"";
""2503_constructor"" -> ""2503_setArenaInterface"";
""2503_confirmQuest"" -> ""2503_confirmGetFreeQuest"";
""2503_getData"" -> ""2503_checkQuest"";
""2503_confirmQuest"" -> ""2503_confirmEngineerQuest"";
""2503_addLevelQuest"" -> ""2503_addAtkBossQuest"";
""2503_addDepositQuest"" -> ""2503_getPlayerDepositData"";
""2503_confirmQuest"" -> ""2503_confirmJoinAirdropQuest"";
""2503_checkQuest"" -> ""2503_checkEngineerQuest"";
""2503_addQuest"" -> ""2503_addEngineerQuest"";
""2503_confirmQuest"" -> ""2503_confirmDepositQuest"";
""2503_checkBoosterQuest"" -> ""2503_getBoosters"";
""2503_checkQuest"" -> ""2503_checkGetFreeQuest"";
}
"
0xd89d6e3b1115743b3dc481f6afdb5bc2958031d6.sol,POWM,contract POWM { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1305_POWM {
label=""POWM"";
""1305_myTokens"" [label=""myTokens""];
""1305_sqrt"" [label=""sqrt""];
""1305_fallback"" [label=""fallback""];
""1305_buyPrice"" [label=""buyPrice""];
""1305_totalSupply"" [label=""totalSupply""];
""1305_sellPrice"" [label=""sellPrice""];
""1305_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1305_setAdministrator"" [label=""setAdministrator""];
""1305_exit"" [label=""exit""];
""1305_setSymbol"" [label=""setSymbol""];
""1305_setStakingRequirement"" [label=""setStakingRequirement""];
""1305_sell"" [label=""sell""];
""1305_balanceOf"" [label=""balanceOf""];
""1305_transfer"" [label=""transfer""];
""1305_buy"" [label=""buy""];
""1305_withdraw"" [label=""withdraw""];
""1305_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1305_disableInitialStage"" [label=""disableInitialStage""];
""1305_dividendsOf"" [label=""dividendsOf""];
""1305_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1305_myDividends"" [label=""myDividends""];
""1305_POWM"" [label=""POWM""];
""1305_reinvest"" [label=""reinvest""];
""1305_purchaseTokens"" [label=""purchaseTokens""];
""1305_setName"" [label=""setName""];
""1305_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1305_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1305_reinvest"" -> ""1305_purchaseTokens"";
""1305_exit"" -> ""1305_sell"";
""1305_calculateTokensReceived"" -> ""1305_ethereumToTokens_"";
""1305_sell"" -> ""1305_tokensToEthereum_"";
""1305_buy"" -> ""1305_purchaseTokens"";
""1305_transfer"" -> ""1305_tokensToEthereum_"";
""1305_reinvest"" -> ""1305_onlyStronghands"";
""1305_ethereumToTokens_"" -> ""1305_sqrt"";
""1305_buyPrice"" -> ""1305_tokensToEthereum_"";
""1305_purchaseTokens"" -> ""1305_antiEarlyWhale"";
""1305_fallback"" -> ""1305_purchaseTokens"";
""1305_disableInitialStage"" -> ""1305_onlyAdministrator"";
""1305_sell"" -> ""1305_onlyBagholders"";
""1305_sellPrice"" -> ""1305_tokensToEthereum_"";
""1305_calculateEthereumReceived"" -> ""1305_tokensToEthereum_"";
""1305_purchaseTokens"" -> ""1305_ethereumToTokens_"";
""1305_reinvest"" -> ""1305_myDividends"";
""1305_withdraw"" -> ""1305_myDividends"";
""1305_setStakingRequirement"" -> ""1305_onlyAdministrator"";
""1305_setAdministrator"" -> ""1305_onlyAdministrator"";
""1305_myDividends"" -> ""1305_dividendsOf"";
""1305_withdraw"" -> ""1305_onlyStronghands"";
""1305_transfer"" -> ""1305_onlyBagholders"";
""1305_transfer"" -> ""1305_myDividends"";
""1305_setSymbol"" -> ""1305_onlyAdministrator"";
""1305_transfer"" -> ""1305_withdraw"";
""1305_myTokens"" -> ""1305_balanceOf"";
""1305_setName"" -> ""1305_onlyAdministrator"";
""1305_exit"" -> ""1305_withdraw"";
}
"
0x2097790e62b5d9cad029e9e1732d1f42790fb648.sol,ExpERC20Token,"contract ExpERC20Token is ERC20Token, Ownable { constructor ( string _name, string _symbol, uint8 _decimals, uint256 _initSupply ) ERC20Token (_name, _symbol, _decimals, _initSupply) public {}",0,"subgraph cluster_1263_ExpERC20Token {
label=""ExpERC20Token"";
""1263_constructor"" [label=""constructor""];
""1263__lock"" [label=""_lock""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_finishMinting"" [label=""finishMinting""];
""1263_isTokenLocked"" [label=""isTokenLocked""];
""1263_approve"" [label=""approve""];
""1263_mint"" [label=""mint""];
""1263_setPrices"" [label=""setPrices""];
""1263_transfer"" [label=""transfer""];
""1263_buy"" [label=""buy""];
""1263_burnFrom"" [label=""burnFrom""];
""1263_freezeAccount"" [label=""freezeAccount""];
""1263_sell"" [label=""sell""];
""1263_lock"" [label=""lock""];
""1263__burn"" [label=""_burn""];
""1263_burn"" [label=""burn""];
""1263__transfer"" [label=""_transfer""];
""1263_changeName"" [label=""changeName""];
""1263_approveAndCall"" [label=""approveAndCall""];
""1263_transferFrom"" -> ""1263_transferFrom"";
""1263_approve"" -> ""1263_whenTokenUnlocked"";
""1263_buy"" -> ""1263_whenTokenUnlocked"";
""1263_transfer"" -> ""1263_transfer"";
""1263_transferFrom"" -> ""1263_whenTokenUnlocked"";
""1263_sell"" -> ""1263__transfer"";
""1263_constructor"" -> ""1263_constructor"";
""1263_buy"" -> ""1263__transfer"";
""1263_burnFrom"" -> ""1263__burn"";
""1263_approveAndCall"" -> ""1263_whenTokenUnlocked"";
""1263_mint"" -> ""1263_canMint"";
""1263_approveAndCall"" -> ""1263_approveAndCall"";
""1263_finishMinting"" -> ""1263_onlyOwner"";
""1263_burn"" -> ""1263__burn"";
""1263_approve"" -> ""1263_approve"";
""1263_freezeAccount"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_whenTokenUnlocked"";
""1263_mint"" -> ""1263_hasMintPermission"";
""1263_sell"" -> ""1263_whenTokenUnlocked"";
""1263_lock"" -> ""1263__lock"";
""1263_setPrices"" -> ""1263_onlyOwner"";
""1263_finishMinting"" -> ""1263_canMint"";
""1263_lock"" -> ""1263_onlyOwner"";
""1263_changeName"" -> ""1263_onlyOwner"";
}
"
0xf2a173ce6c3556cb39734f805b6fba2159a0fe91.sol,COOToken,"contract COOToken is Token, Owned { using SafeMath for uint256; string public constant name = ; uint8 public constant decimals = 18; string public constant symbol = ; uint256 currentTotalSupply; uint256 limitTotalSupply = 10000000000000000000000000000; mapping (address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; event Aditional(address indexed _owner,uint256 _value); function COOToken(uint256 _initialAmount) { if(_initialAmount > limitTotalSupply) throw; balances[msg.sender] = _initialAmount; currentTotalSupply = _initialAmount; }",0,"subgraph cluster_584_COOToken {
label=""COOToken"";
""584_COOToken"" [label=""COOToken""];
""584_additional"" [label=""additional""];
""584_limitSupply"" [label=""limitSupply""];
""584_approve"" [label=""approve""];
""584_fallback"" [label=""fallback""];
""584_allowance"" [label=""allowance""];
""584_transfer"" [label=""transfer""];
""584_transferFrom"" [label=""transferFrom""];
""584_balanceOf"" [label=""balanceOf""];
""584_totalSupply"" [label=""totalSupply""];
""584_additional"" -> ""584_onlyOwner"";
}
"
0x3700eaf34f653553b724ff9d02bb45de9e733b37.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; mapping (address => uint256) internal balances_; mapping (address => mapping (address => uint256)) private allowed_; uint256 private totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },0,"subgraph cluster_68_IERC20 {
label=""IERC20"";
""68_transfer"" [label=""transfer""];
""68_allowance"" [label=""allowance""];
""68_approve"" [label=""approve""];
""68_balanceOf"" [label=""balanceOf""];
""68_totalSupply"" [label=""totalSupply""];
""68_transferFrom"" [label=""transferFrom""];
}
"
0x5acbe8b82bec243f420214b35ed5b6cad2055f07.sol,MultiSigWallet,"contract MultiSigWallet { event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); uint constant public MAX_OWNER_COUNT = 50; mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",0,"subgraph cluster_1059_MultiSigWallet {
label=""MultiSigWallet"";
""1059_isConfirmed"" [label=""isConfirmed""];
""1059_getOwners"" [label=""getOwners""];
""1059_replaceOwner"" [label=""replaceOwner""];
""1059_submitTransaction"" [label=""submitTransaction""];
""1059_MultiSigWallet"" [label=""MultiSigWallet""];
""1059_confirmTransaction"" [label=""confirmTransaction""];
""1059_getTransactionCount"" [label=""getTransactionCount""];
""1059_getTransactionIds"" [label=""getTransactionIds""];
""1059_changeRequirement"" [label=""changeRequirement""];
""1059_executeTransaction"" [label=""executeTransaction""];
""1059_removeOwner"" [label=""removeOwner""];
""1059_revokeConfirmation"" [label=""revokeConfirmation""];
""1059_getConfirmationCount"" [label=""getConfirmationCount""];
""1059_addOwner"" [label=""addOwner""];
""1059_getConfirmations"" [label=""getConfirmations""];
""1059_addTransaction"" [label=""addTransaction""];
""1059_external_call"" [label=""external_call""];
""1059_fallback"" [label=""fallback""];
""1059_confirmTransaction"" -> ""1059_ownerExists"";
""1059_executeTransaction"" -> ""1059_isConfirmed"";
""1059_executeTransaction"" -> ""1059_confirmed"";
""1059_revokeConfirmation"" -> ""1059_confirmed"";
""1059_revokeConfirmation"" -> ""1059_notExecuted"";
""1059_executeTransaction"" -> ""1059_ownerExists"";
""1059_addOwner"" -> ""1059_onlyWallet"";
""1059_removeOwner"" -> ""1059_changeRequirement"";
""1059_MultiSigWallet"" -> ""1059_validRequirement"";
""1059_executeTransaction"" -> ""1059_notExecuted"";
""1059_confirmTransaction"" -> ""1059_executeTransaction"";
""1059_executeTransaction"" -> ""1059_external_call"";
""1059_submitTransaction"" -> ""1059_confirmTransaction"";
""1059_addOwner"" -> ""1059_validRequirement"";
""1059_addOwner"" -> ""1059_notNull"";
""1059_submitTransaction"" -> ""1059_addTransaction"";
""1059_addOwner"" -> ""1059_ownerDoesNotExist"";
""1059_changeRequirement"" -> ""1059_onlyWallet"";
""1059_changeRequirement"" -> ""1059_validRequirement"";
""1059_replaceOwner"" -> ""1059_ownerExists"";
""1059_revokeConfirmation"" -> ""1059_ownerExists"";
""1059_replaceOwner"" -> ""1059_ownerDoesNotExist"";
""1059_addTransaction"" -> ""1059_notNull"";
""1059_replaceOwner"" -> ""1059_onlyWallet"";
""1059_confirmTransaction"" -> ""1059_notConfirmed"";
""1059_removeOwner"" -> ""1059_onlyWallet"";
""1059_removeOwner"" -> ""1059_ownerExists"";
""1059_confirmTransaction"" -> ""1059_transactionExists"";
}
"
0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol,XCPlugin,contract XCPlugin is XCPluginInterface { struct Admin { bool status; bytes32 platformName; bytes32 tokenSymbol; address account; string version; },0,"subgraph cluster_228_XCPluginInterface {
label=""XCPluginInterface"";
""228_getTokenSymbol"" [label=""getTokenSymbol""];
""228_countOfPublicKey"" [label=""countOfPublicKey""];
""228_stop"" [label=""stop""];
""228_getPlatformName"" [label=""getPlatformName""];
""228_publicKeys"" [label=""publicKeys""];
""228_existCaller"" [label=""existCaller""];
""228_addPublicKey"" [label=""addPublicKey""];
""228_verifyProposal"" [label=""verifyProposal""];
""228_deleteCaller"" [label=""deleteCaller""];
""228_existPublicKey"" [label=""existPublicKey""];
""228_getWeight"" [label=""getWeight""];
""228_deleteProposal"" [label=""deleteProposal""];
""228_deletePublicKey"" [label=""deletePublicKey""];
""228_getAdmin"" [label=""getAdmin""];
""228_getProposal"" [label=""getProposal""];
""228_getStatus"" [label=""getStatus""];
""228_getTrustPlatform"" [label=""getTrustPlatform""];
""228_getCallers"" [label=""getCallers""];
""228_addCaller"" [label=""addCaller""];
""228_voteProposal"" [label=""voteProposal""];
""228_start"" [label=""start""];
""228_setAdmin"" [label=""setAdmin""];
""228_commitProposal"" [label=""commitProposal""];
""228_setWeight"" [label=""setWeight""];
}
"
0x07ff08a437c7340744ca24f9fb2f1858ea46543e.sol,CryptoMinerToken2,contract CryptoMinerToken2 { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1180_CryptoMinerToken2 {
label=""CryptoMinerToken2"";
""1180_myDividends"" [label=""myDividends""];
""1180_exit"" [label=""exit""];
""1180_sellPrice"" [label=""sellPrice""];
""1180_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1180_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1180_reinvest"" [label=""reinvest""];
""1180_withdraw"" [label=""withdraw""];
""1180_buy"" [label=""buy""];
""1180_sqrt"" [label=""sqrt""];
""1180_purchaseTokens"" [label=""purchaseTokens""];
""1180_sell"" [label=""sell""];
""1180_buyPrice"" [label=""buyPrice""];
""1180_myTokens"" [label=""myTokens""];
""1180_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1180_fallback"" [label=""fallback""];
""1180_totalSupply"" [label=""totalSupply""];
""1180_balanceOf"" [label=""balanceOf""];
""1180_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1180_dividendsOf"" [label=""dividendsOf""];
""1180_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1180_transfer"" [label=""transfer""];
""1180_transfer"" -> ""1180_tokensToEthereum_"";
""1180_reinvest"" -> ""1180_myDividends"";
""1180_transfer"" -> ""1180_myDividends"";
""1180_calculateTokensReceived"" -> ""1180_ethereumToTokens_"";
""1180_sell"" -> ""1180_tokensToEthereum_"";
""1180_buy"" -> ""1180_purchaseTokens"";
""1180_myTokens"" -> ""1180_balanceOf"";
""1180_transfer"" -> ""1180_withdraw"";
""1180_ethereumToTokens_"" -> ""1180_sqrt"";
""1180_exit"" -> ""1180_withdraw"";
""1180_purchaseTokens"" -> ""1180_ethereumToTokens_"";
""1180_purchaseTokens"" -> ""1180_buyPrice"";
""1180_sell"" -> ""1180_onlyBagholders"";
""1180_exit"" -> ""1180_sell"";
""1180_reinvest"" -> ""1180_onlyStronghands"";
""1180_sellPrice"" -> ""1180_tokensToEthereum_"";
""1180_calculateEthereumReceived"" -> ""1180_tokensToEthereum_"";
""1180_myDividends"" -> ""1180_dividendsOf"";
""1180_reinvest"" -> ""1180_purchaseTokens"";
""1180_withdraw"" -> ""1180_onlyStronghands"";
""1180_fallback"" -> ""1180_purchaseTokens"";
""1180_transfer"" -> ""1180_onlyBagholders"";
""1180_withdraw"" -> ""1180_myDividends"";
""1180_buyPrice"" -> ""1180_tokensToEthereum_"";
""1180_sell"" -> ""1180_buyPrice"";
}
"
0x4c0fbe1bb46612915e7967d2c3213cd4d87257ad.sol,ApisToken,"contract ApisToken is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; mapping (address => LockedInfo) public lockedWalletInfo; mapping (address => bool) public manoContracts; struct LockedInfo { uint timeLockUpEnd; bool sendLock; bool receiveLock; }",0,"subgraph cluster_1126_ApisToken {
label=""ApisToken"";
""1126_registerManoContract"" [label=""registerManoContract""];
""1126_walletUnlock"" [label=""walletUnlock""];
""1126_isWalletLocked_Receive"" [label=""isWalletLocked_Receive""];
""1126_isMyWalletLocked_Send"" [label=""isMyWalletLocked_Send""];
""1126_transferAndLockForever"" [label=""transferAndLockForever""];
""1126_transfer"" [label=""transfer""];
""1126_walletLockBothForever"" [label=""walletLockBothForever""];
""1126_isMyWalletLocked_Receive"" [label=""isMyWalletLocked_Receive""];
""1126_burn"" [label=""burn""];
""1126_walletLockBoth"" [label=""walletLockBoth""];
""1126_ApisToken"" [label=""ApisToken""];
""1126_transferAndLockUntil"" [label=""transferAndLockUntil""];
""1126_isWalletLocked_Send"" [label=""isWalletLocked_Send""];
""1126_walletLock"" [label=""walletLock""];
""1126_fallback"" [label=""fallback""];
""1126_walletLockBothForever"" -> ""1126_onlyOwner"";
""1126_registerManoContract"" -> ""1126_onlyOwner"";
""1126_transferAndLockForever"" -> ""1126_onlyOwner"";
""1126_walletLockBothForever"" -> ""1126_walletLock"";
""1126_walletLockBoth"" -> ""1126_walletLock"";
""1126_walletUnlock"" -> ""1126_walletLock"";
""1126_walletUnlock"" -> ""1126_onlyOwner"";
""1126_walletLock"" -> ""1126_onlyOwner"";
""1126_isMyWalletLocked_Receive"" -> ""1126_isWalletLocked_Receive"";
""1126_transfer"" -> ""1126_transfer"";
""1126_transferAndLockUntil"" -> ""1126_walletLockBoth"";
""1126_transferAndLockUntil"" -> ""1126_onlyOwner"";
""1126_transferAndLockForever"" -> ""1126_transfer"";
""1126_transferAndLockForever"" -> ""1126_walletLockBothForever"";
""1126_isMyWalletLocked_Send"" -> ""1126_isWalletLocked_Send"";
""1126_transferAndLockUntil"" -> ""1126_transfer"";
""1126_walletLockBoth"" -> ""1126_onlyOwner"";
}
"
0x365080610e03aa5c5693f6b2dd78ee792ee9a9cb.sol,ZIP,"contract ZIP is owned, token { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function ZIP( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}",0,"subgraph cluster_600_ZIP {
label=""ZIP"";
""600__transfer"" [label=""_transfer""];
""600_ZIP"" [label=""ZIP""];
""600_buy"" [label=""buy""];
""600_freezeAccount"" [label=""freezeAccount""];
""600_sell"" [label=""sell""];
""600_setPrices"" [label=""setPrices""];
""600_mintToken"" [label=""mintToken""];
""600_ZIP"" -> ""600_token"";
""600_mintToken"" -> ""600_onlyOwner"";
""600_buy"" -> ""600__transfer"";
""600_sell"" -> ""600__transfer"";
""600_freezeAccount"" -> ""600_onlyOwner"";
""600_setPrices"" -> ""600_onlyOwner"";
}
"
0x1b9dcdcddd2d6ca699cad9505faa363e81145c6b.sol,BrinkToken,"contract BrinkToken is EIP20Interface { address owner = msg.sender; uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; uint price; function BrinkToken( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",0,"subgraph cluster_296_BrinkToken {
label=""BrinkToken"";
""296_BrinkToken"" [label=""BrinkToken""];
""296_allowance"" [label=""allowance""];
""296_transfer"" [label=""transfer""];
""296_approve"" [label=""approve""];
""296_transferFrom"" [label=""transferFrom""];
""296_balanceOf"" [label=""balanceOf""];
}
"
0x5824d62f4f3c875c906f4e16d488bed05a87a2ea.sol,Crowdsale,contract Crowdsale is Ownable { using SafeMath for uint256; using SafeERC20 for EVOAIToken; struct State { string roundName; uint256 round; uint256 tokens; uint256 rate; },0,"subgraph cluster_1411_Crowdsale {
label=""Crowdsale"";
""1411_buyTokens"" [label=""buyTokens""];
""1411__processPurchase"" [label=""_processPurchase""];
""1411_endCrowdsale"" [label=""endCrowdsale""];
""1411_burnUnsoldTokens"" [label=""burnUnsoldTokens""];
""1411__deliverTokens"" [label=""_deliverTokens""];
""1411__forwardFunds"" [label=""_forwardFunds""];
""1411_changeRound"" [label=""changeRound""];
""1411_constructor"" [label=""constructor""];
""1411__validateUSDAmount"" [label=""_validateUSDAmount""];
""1411__getEthToUsdPrice"" [label=""_getEthToUsdPrice""];
""1411_fallback"" [label=""fallback""];
""1411__getTokenAmount"" [label=""_getTokenAmount""];
""1411__preValidatePurchase"" [label=""_preValidatePurchase""];
""1411_startCrowdsale"" [label=""startCrowdsale""];
""1411_changeFundsWallet"" [label=""changeFundsWallet""];
""1411__getEthUsdPrice"" [label=""_getEthUsdPrice""];
""1411_buyTokens"" -> ""1411__processPurchase"";
""1411_changeRound"" -> ""1411_onlyOwner"";
""1411_endCrowdsale"" -> ""1411_onlyOwner"";
""1411_burnUnsoldTokens"" -> ""1411_onlyOwner"";
""1411_changeFundsWallet"" -> ""1411_onlyOwner"";
""1411_buyTokens"" -> ""1411__forwardFunds"";
""1411_startCrowdsale"" -> ""1411_onlyOwner"";
""1411_fallback"" -> ""1411_buyTokens"";
""1411_buyTokens"" -> ""1411__preValidatePurchase"";
""1411__processPurchase"" -> ""1411__deliverTokens"";
""1411_buyTokens"" -> ""1411__getEthToUsdPrice"";
""1411_buyTokens"" -> ""1411__getTokenAmount"";
""1411_buyTokens"" -> ""1411__validateUSDAmount"";
""1411__getEthToUsdPrice"" -> ""1411__getEthUsdPrice"";
}
"
0x6eef402d5fa949aa6ed397b103799d5cdfbc9cd5.sol,Whitelist,"contract Whitelist is Pausable, Transferable { uint8 public constant version = 1; mapping (address => bool) private whitelistedMap; bool public isWhiteListDisabled; address[] private addedAdresses; address[] private removedAdresses; event Whitelisted(address indexed account, bool isWhitelisted); function whitelisted(address _address) public view returns(bool) { if (paused()) { return false; }",0,"subgraph cluster_989_Whitelist {
label=""Whitelist"";
""989_enableWhitelist"" [label=""enableWhitelist""];
""989_removedWhiteListAddressesLog"" [label=""removedWhiteListAddressesLog""];
""989_addAddress"" [label=""addAddress""];
""989_addedWhiteListAddressesLog"" [label=""addedWhiteListAddressesLog""];
""989_disableWhitelist"" [label=""disableWhitelist""];
""989_removeAddress"" [label=""removeAddress""];
""989_addWhitelistAddress"" [label=""addWhitelistAddress""];
""989_removeWhitelistAddress"" [label=""removeWhitelistAddress""];
""989_whitelisted"" [label=""whitelisted""];
""989_addAddress"" -> ""989_addWhitelistAddress"";
""989_removeAddress"" -> ""989_removeWhitelistAddress"";
""989_removeAddress"" -> ""989_onlyOwner"";
""989_whitelisted"" -> ""989_paused"";
""989_addAddress"" -> ""989_onlyOwner"";
""989_enableWhitelist"" -> ""989_onlyOwner"";
""989_disableWhitelist"" -> ""989_onlyOwner"";
}
"
0xdcf67546f2253c9c90c2b55447e1efecebcf83d6.sol,HorseyToken,"contract HorseyToken is EthorseHelpers,Pausable { event Claimed(address raceAddress, address eth_address, uint256 tokenId); event Feeding(uint256 tokenId); event ReceivedCarrot(uint256 tokenId, bytes32 newDna); event FeedingFailed(uint256 tokenId); event HorseyRenamed(uint256 tokenId, string newName); event HorseyFreed(uint256 tokenId); RoyalStablesInterface public stables; uint8 public carrotsMultiplier = 1; uint8 public rarityMultiplier = 1; uint256 public claimingFee = 0.000 ether; struct FeedingData { uint256 blockNumber; uint256 horsey; }",0,"subgraph cluster_2083_HorseyToken {
label=""HorseyToken"";
""2083_setRarityMultiplier"" [label=""setRarityMultiplier""];
""2083_constructor"" [label=""constructor""];
""2083_setCarrotsMultiplier"" [label=""setCarrotsMultiplier""];
""2083_claim"" [label=""claim""];
""2083_fallback"" [label=""fallback""];
""2083_setRenamingCosts"" [label=""setRenamingCosts""];
""2083_stopFeeding"" [label=""stopFeeding""];
""2083__generate_special_horsey"" [label=""_generate_special_horsey""];
""2083_addHorseIndex"" [label=""addHorseIndex""];
""2083__shiftRight"" [label=""_shiftRight""];
""2083_getCarrotCredits"" [label=""getCarrotCredits""];
""2083__makeSpecialId"" [label=""_makeSpecialId""];
""2083_getHorsey"" [label=""getHorsey""];
""2083_freeForCarrots"" [label=""freeForCarrots""];
""2083__increaseRarity"" [label=""_increaseRarity""];
""2083_addLegitRaceAddress"" [label=""addLegitRaceAddress""];
""2083__shiftLeft"" [label=""_shiftLeft""];
""2083__feed"" [label=""_feed""];
""2083_withdraw"" [label=""withdraw""];
""2083_renameHorsey"" [label=""renameHorsey""];
""2083_setClaimingCosts"" [label=""setClaimingCosts""];
""2083_can_claim"" [label=""can_claim""];
""2083_feed"" [label=""feed""];
""2083_getOwnedTokens"" [label=""getOwnedTokens""];
""2083_stopFeeding"" -> ""2083__feed"";
""2083_feed"" -> ""2083_whenNotPaused"";
""2083_setClaimingCosts"" -> ""2083_onlyOwner"";
""2083_addHorseIndex"" -> ""2083_onlyOwner"";
""2083_setCarrotsMultiplier"" -> ""2083_onlyOwner"";
""2083_claim"" -> ""2083_costs"";
""2083_setRarityMultiplier"" -> ""2083_onlyOwner"";
""2083_feed"" -> ""2083_carrotsMeetLevel"";
""2083_claim"" -> ""2083__generate_special_horsey"";
""2083_withdraw"" -> ""2083_onlyOwner"";
""2083_addLegitRaceAddress"" -> ""2083__addLegitRace"";
""2083_addLegitRaceAddress"" -> ""2083_onlyOwner"";
""2083_can_claim"" -> ""2083__isWinnerOf"";
""2083__generate_special_horsey"" -> ""2083__shiftRight"";
""2083_claim"" -> ""2083__isWinnerOf"";
""2083_renameHorsey"" -> ""2083_whenNotPaused"";
""2083__feed"" -> ""2083__increaseRarity"";
""2083_feed"" -> ""2083_noFeedingInProgress"";
""2083_freeForCarrots"" -> ""2083_onlyOwnerOf"";
""2083__generate_special_horsey"" -> ""2083__makeSpecialId"";
""2083_renameHorsey"" -> ""2083_costs"";
""2083_freeForCarrots"" -> ""2083_whenNotPaused"";
""2083_stopFeeding"" -> ""2083_feedingInProgress"";
""2083_constructor"" -> ""2083_constructor"";
""2083__increaseRarity"" -> ""2083__shiftLeft"";
""2083_setRenamingCosts"" -> ""2083_onlyOwner"";
""2083_addHorseIndex"" -> ""2083__addHorse"";
""2083_renameHorsey"" -> ""2083_onlyOwnerOf"";
""2083_claim"" -> ""2083_whenNotPaused"";
""2083_feed"" -> ""2083_onlyOwnerOf"";
}
"
0xdc0c33a4c10dfdca03e583107eb5520555c86f9e.sol,CryptoProfit,contract CryptoProfit { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1182_CryptoProfit {
label=""CryptoProfit"";
""1182_transfer"" [label=""transfer""];
""1182_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1182_totalSupply"" [label=""totalSupply""];
""1182_sellPrice"" [label=""sellPrice""];
""1182_withdraw"" [label=""withdraw""];
""1182_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1182_fallback"" [label=""fallback""];
""1182_sqrt"" [label=""sqrt""];
""1182_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1182_buyPrice"" [label=""buyPrice""];
""1182_myTokens"" [label=""myTokens""];
""1182_balanceOf"" [label=""balanceOf""];
""1182_dividendsOf"" [label=""dividendsOf""];
""1182_sell"" [label=""sell""];
""1182_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1182_exit"" [label=""exit""];
""1182_buy"" [label=""buy""];
""1182_reinvest"" [label=""reinvest""];
""1182_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1182_myDividends"" [label=""myDividends""];
""1182_purchaseTokens"" [label=""purchaseTokens""];
""1182_sell"" -> ""1182_buyPrice"";
""1182_fallback"" -> ""1182_purchaseTokens"";
""1182_transfer"" -> ""1182_tokensToEthereum_"";
""1182_myTokens"" -> ""1182_balanceOf"";
""1182_purchaseTokens"" -> ""1182_buyPrice"";
""1182_transfer"" -> ""1182_onlyBagholders"";
""1182_sell"" -> ""1182_onlyBagholders"";
""1182_sellPrice"" -> ""1182_tokensToEthereum_"";
""1182_reinvest"" -> ""1182_onlyStronghands"";
""1182_ethereumToTokens_"" -> ""1182_sqrt"";
""1182_calculateTokensReceived"" -> ""1182_ethereumToTokens_"";
""1182_withdraw"" -> ""1182_myDividends"";
""1182_myDividends"" -> ""1182_dividendsOf"";
""1182_exit"" -> ""1182_sell"";
""1182_exit"" -> ""1182_withdraw"";
""1182_transfer"" -> ""1182_withdraw"";
""1182_purchaseTokens"" -> ""1182_ethereumToTokens_"";
""1182_buy"" -> ""1182_purchaseTokens"";
""1182_buyPrice"" -> ""1182_tokensToEthereum_"";
""1182_reinvest"" -> ""1182_purchaseTokens"";
""1182_withdraw"" -> ""1182_onlyStronghands"";
""1182_sell"" -> ""1182_tokensToEthereum_"";
""1182_reinvest"" -> ""1182_myDividends"";
""1182_transfer"" -> ""1182_myDividends"";
""1182_calculateEthereumReceived"" -> ""1182_tokensToEthereum_"";
}
"
0xc729c50c19d3b2f0049c9eec809b5cc175dbf489.sol,PDGToken,"contract PDGToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function PDGToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_PDGToken {
label=""PDGToken"";
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_PDGToken"" [label=""PDGToken""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x6f91e584f4c150951386b133e21aa769c8b7d060.sol,BigbomTokenSale,"contract BigbomTokenSale { address public admin; address public bigbomMultiSigWallet; BigbomToken public token; uint public raisedWei; bool public haltSale; uint public openSaleStartTime; uint public openSaleEndTime; BigbomContributorWhiteList public list; mapping(address=>uint) public participated; using SafeMath for uint; function BigbomTokenSale( address _admin, address _bigbomMultiSigWallet, BigbomContributorWhiteList _whilteListContract, uint _publicSaleStartTime, uint _publicSaleEndTime, BigbomToken _token) public { require (_publicSaleStartTime < _publicSaleEndTime); require (_admin != address(0x0)); require (_bigbomMultiSigWallet != address(0x0)); require (_whilteListContract != address(0x0)); require (_token != address(0x0)); admin = _admin; bigbomMultiSigWallet = _bigbomMultiSigWallet; list = _whilteListContract; openSaleStartTime = _publicSaleStartTime; openSaleEndTime = _publicSaleEndTime; token = _token; }",0,"subgraph cluster_2101_BigbomTokenSale {
label=""BigbomTokenSale"";
""2101_checkMaxCap"" [label=""checkMaxCap""];
""2101_debugBuy"" [label=""debugBuy""];
""2101_getBonus"" [label=""getBonus""];
""2101_saleStarted"" [label=""saleStarted""];
""2101_fallback"" [label=""fallback""];
""2101_contributorMinCap"" [label=""contributorMinCap""];
""2101_BigbomTokenSale"" [label=""BigbomTokenSale""];
""2101_finalizeSale"" [label=""finalizeSale""];
""2101_saleEnded"" [label=""saleEnded""];
""2101_setHaltSale"" [label=""setHaltSale""];
""2101_contributorMaxCap"" [label=""contributorMaxCap""];
""2101_sendETHToMultiSig"" [label=""sendETHToMultiSig""];
""2101_emergencyDrain"" [label=""emergencyDrain""];
""2101_buy"" [label=""buy""];
""2101_buy"" -> ""2101_saleStarted"";
""2101_fallback"" -> ""2101_buy"";
""2101_buy"" -> ""2101_contributorMinCap"";
""2101_emergencyDrain"" -> ""2101_saleEnded"";
""2101_finalizeSale"" -> ""2101_saleEnded"";
""2101_buy"" -> ""2101_checkMaxCap"";
""2101_debugBuy"" -> ""2101_sendETHToMultiSig"";
""2101_checkMaxCap"" -> ""2101_contributorMaxCap"";
""2101_emergencyDrain"" -> ""2101_sendETHToMultiSig"";
""2101_buy"" -> ""2101_sendETHToMultiSig"";
""2101_buy"" -> ""2101_getBonus"";
""2101_buy"" -> ""2101_saleEnded"";
}
"
0xed8a2697d1af8f8cad0f6c5b9962d868d4ed2a41.sol,HUMPresale,"contract HUMPresale is WhitelistedCrowdsale, IndividuallyCappedCrowdsale { uint256 public constant minimum = 100000000000000000; bool public isOnSale = false; mapping(address => uint256) public bonusTokens; uint256 public bonusPercent; address[] public contributors; event DistrubuteBonusTokens(address indexed sender); event Withdraw(address indexed _from, uint256 _amount); constructor ( uint256 _rate, uint256 _bonusPercent, address _wallet, HUMToken _token, uint256 _individualCapEther ) public Crowdsale(_rate, _wallet, _token) IndividuallyCappedCrowdsale(_individualCapEther.mul(10 ** 18)) { bonusPercent = _bonusPercent; }",0,"subgraph cluster_1730_HUMPresale {
label=""HUMPresale"";
""1730_closeSale"" [label=""closeSale""];
""1730_getContributors"" [label=""getContributors""];
""1730_openSale"" [label=""openSale""];
""1730__processPurchase"" [label=""_processPurchase""];
""1730_modifyTokenPrice"" [label=""modifyTokenPrice""];
""1730_withdrawToken"" [label=""withdrawToken""];
""1730__preValidatePurchase"" [label=""_preValidatePurchase""];
""1730_constructor"" [label=""constructor""];
""1730_distributeBonusTokens"" [label=""distributeBonusTokens""];
""1730_getBonusList"" [label=""getBonusList""];
""1730_distributeBonusTokensByList"" [label=""distributeBonusTokensByList""];
""1730_constructor"" -> ""1730_constructor"";
""1730_withdrawToken"" -> ""1730_onlyOwner"";
""1730_getContributors"" -> ""1730_onlyOwner"";
""1730_openSale"" -> ""1730_onlyOwner"";
""1730_getBonusList"" -> ""1730_onlyOwner"";
""1730_modifyTokenPrice"" -> ""1730_onlyOwner"";
""1730_closeSale"" -> ""1730_onlyOwner"";
""1730__preValidatePurchase"" -> ""1730__preValidatePurchase"";
""1730_distributeBonusTokens"" -> ""1730_onlyOwner"";
""1730__processPurchase"" -> ""1730__processPurchase"";
""1730_closeSale"" -> ""1730_withdrawToken"";
""1730__preValidatePurchase"" -> ""1730_isWhitelisted"";
""1730_distributeBonusTokensByList"" -> ""1730_onlyOwner"";
}
"
0xcdc687a449c43fcf87d439af9fa72ee9602e6b1f.sol,Ownable,"contract Ownable { address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() public { owner = msg.sender; }",0,"subgraph cluster_157_Ownable {
label=""Ownable"";
""157_constructor"" [label=""constructor""];
""157__transferOwnership"" [label=""_transferOwnership""];
""157_transferOwnership"" [label=""transferOwnership""];
""157_transferOwnership"" -> ""157__transferOwnership"";
""157_transferOwnership"" -> ""157_onlyOwner"";
}
"
0xd8ba7164446ef71e89fdc0d94fa492732d371238.sol,HRAToken,"contract HRAToken is BasicToken { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 10; uint256 public initialSupply = 30000000 * 10**10; uint256 public totalAllocatedTokens; uint256 public tokensAllocatedToCrowdFund; address public founderMultiSigAddress; address public crowdFundAddress; event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress); modifier nonZeroAddress(address _to){ require(_to != 0x0); _; }",0,"subgraph cluster_525_HRAToken {
label=""HRAToken"";
""525_changeFounderMultiSigAddress"" [label=""changeFounderMultiSigAddress""];
""525_HRAToken"" [label=""HRAToken""];
""525_changeTotalSupply"" [label=""changeTotalSupply""];
""525_changeFounderMultiSigAddress"" -> ""525_nonZeroAddress"";
""525_changeFounderMultiSigAddress"" -> ""525_onlyFounders"";
""525_changeTotalSupply"" -> ""525_onlyCrowdfund"";
}
"
0x2c31dbd57a56d953be4396c42089c95f5bbf603d.sol,Redenom,"contract Redenom is ERC20Interface, Owned{ using SafeMath for uint; string public name; string public symbol; uint private _totalSupply; uint public decimals = 8; uint public round = 1; uint public epoch = 1; bool public frozen = false; uint[8] private dec = [0,0,0,0,0,0,0,0]; uint[9] private mul = [1,10,100,1000,10000,100000,1000000,10000000,100000000]; uint[9] private weight = [uint(0),0,0,0,0,5,10,30,55]; uint[9] private current_toadd = [uint(0),0,0,0,0,0,0,0,0]; uint public total_fund; uint public epoch_fund; uint public team_fund; uint public redenom_dao_fund; struct Account { uint balance; uint lastRound; uint lastVotedEpoch; uint bitmask; }",0,"subgraph cluster_2758_Redenom {
label=""Redenom"";
""2758_withdraw_dao_fund"" [label=""withdraw_dao_fund""];
""2758_balanceOf"" [label=""balanceOf""];
""2758_payCustom"" [label=""payCustom""];
""2758_swapProject"" [label=""swapProject""];
""2758_sqrt"" [label=""sqrt""];
""2758_pay055loyal"" [label=""pay055loyal""];
""2758_freeze_contract"" [label=""freeze_contract""];
""2758_fix_amount"" [label=""fix_amount""];
""2758_is_banned"" [label=""is_banned""];
""2758_projectActive"" [label=""projectActive""];
""2758_disableVoting"" [label=""disableVoting""];
""2758_get_rest"" [label=""get_rest""];
""2758_payout"" [label=""payout""];
""2758_renewDec"" [label=""renewDec""];
""2758_fallback"" [label=""fallback""];
""2758_StartNewEpoch"" [label=""StartNewEpoch""];
""2758_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""2758_addProject"" [label=""addProject""];
""2758_bitmask_check"" [label=""bitmask_check""];
""2758_pay055"" [label=""pay055""];
""2758_projectWeight"" [label=""projectWeight""];
""2758_bitmask_rm"" [label=""bitmask_rm""];
""2758_winningProject"" [label=""winningProject""];
""2758_updateAccount"" [label=""updateAccount""];
""2758_Redenom"" [label=""Redenom""];
""2758_vote"" [label=""vote""];
""2758_totalSupply"" [label=""totalSupply""];
""2758_current_mul"" [label=""current_mul""];
""2758_bitmask_add"" [label=""bitmask_add""];
""2758_enableVoting"" [label=""enableVoting""];
""2758_transfer"" [label=""transfer""];
""2758_withdraw_team_fund"" [label=""withdraw_team_fund""];
""2758_approve"" [label=""approve""];
""2758_transferFrom"" [label=""transferFrom""];
""2758_redenominate"" [label=""redenominate""];
""2758_ban_user"" [label=""ban_user""];
""2758_unban_user"" [label=""unban_user""];
""2758_unfreeze_contract"" [label=""unfreeze_contract""];
""2758_approveAndCall"" [label=""approveAndCall""];
""2758_allowance"" [label=""allowance""];
""2758_pay1"" [label=""pay1""];
""2758_payCustom"" -> ""2758_payout"";
""2758_updateAccount"" -> ""2758_bitmask_check"";
""2758_payout"" -> ""2758_updateAccount"";
""2758_payCustom"" -> ""2758_onlyOwner"";
""2758_transferFrom"" -> ""2758_bitmask_check"";
""2758_transfer"" -> ""2758_renewDec"";
""2758_fix_amount"" -> ""2758_current_mul"";
""2758_payout"" -> ""2758_fix_amount"";
""2758_withdraw_team_fund"" -> ""2758_onlyOwner"";
""2758_is_banned"" -> ""2758_onlyAdmin"";
""2758_swapProject"" -> ""2758_onlyAdmin"";
""2758_transfer"" -> ""2758_updateAccount"";
""2758_ban_user"" -> ""2758_onlyAdmin"";
""2758_updateAccount"" -> ""2758_renewDec"";
""2758_approveAndCall"" -> ""2758_bitmask_check"";
""2758_is_banned"" -> ""2758_bitmask_check"";
""2758_payout"" -> ""2758_current_mul"";
""2758_pay055"" -> ""2758_bitmask_add"";
""2758_bitmask_add"" -> ""2758_bitmask_check"";
""2758_pay055loyal"" -> ""2758_bitmask_check"";
""2758_pay055"" -> ""2758_onlyAdmin"";
""2758_vote"" -> ""2758_sqrt"";
""2758_pay1"" -> ""2758_onlyAdmin"";
""2758_unban_user"" -> ""2758_onlyAdmin"";
""2758_transfer"" -> ""2758_fix_amount"";
""2758_pay1"" -> ""2758_payout"";
""2758_transferAnyERC20Token"" -> ""2758_onlyOwner"";
""2758_enableVoting"" -> ""2758_onlyAdmin"";
""2758_approve"" -> ""2758_bitmask_check"";
""2758_pay055loyal"" -> ""2758_payout"";
""2758_payout"" -> ""2758_renewDec"";
""2758_pay1"" -> ""2758_bitmask_add"";
""2758_disableVoting"" -> ""2758_onlyAdmin"";
""2758_payout"" -> ""2758_bitmask_check"";
""2758_updateAccount"" -> ""2758_fix_amount"";
""2758_pay055loyal"" -> ""2758_onlyAdmin"";
""2758_addProject"" -> ""2758_onlyAdmin"";
""2758_transferFrom"" -> ""2758_updateAccount"";
""2758_vote"" -> ""2758_onlyVoter"";
""2758_bitmask_rm"" -> ""2758_bitmask_check"";
""2758_pay055"" -> ""2758_bitmask_check"";
""2758_unban_user"" -> ""2758_bitmask_rm"";
""2758_transferFrom"" -> ""2758_renewDec"";
""2758_withdraw_dao_fund"" -> ""2758_onlyOwner"";
""2758_get_rest"" -> ""2758_current_mul"";
""2758_StartNewEpoch"" -> ""2758_onlyAdmin"";
""2758_ban_user"" -> ""2758_bitmask_add"";
""2758_pay1"" -> ""2758_bitmask_check"";
""2758_transfer"" -> ""2758_bitmask_check"";
""2758_redenominate"" -> ""2758_onlyAdmin"";
""2758_updateAccount"" -> ""2758_current_mul"";
""2758_unfreeze_contract"" -> ""2758_onlyOwner"";
""2758_freeze_contract"" -> ""2758_onlyOwner"";
""2758_pay055"" -> ""2758_payout"";
}
"
0x33d19f9e3e3f083ec5c2425401cc53d96e79ac3a.sol,Test123Coin,"contract Test123Coin is ERC20, Ownable { using SafeMath for uint256; string public name; string public symbol; uint8 public decimals; uint256 internal initialSupply; uint256 internal totalSupply_; mapping(address => uint256) internal balances; mapping(address => bool) public frozen; mapping(address => mapping(address => uint256)) internal allowed; event Burn(address indexed owner, uint256 value); event Mint(uint256 value); event Freeze(address indexed holder); event Unfreeze(address indexed holder); modifier notFrozen(address _holder) { require(!frozen[_holder]); _; }",0,"subgraph cluster_986_Test123Coin {
label=""Test123Coin"";
""986_totalSupply"" [label=""totalSupply""];
""986_transfer"" [label=""transfer""];
""986_approve"" [label=""approve""];
""986_balanceOf"" [label=""balanceOf""];
""986__transfer"" [label=""_transfer""];
""986_burn_address"" [label=""burn_address""];
""986_isContract"" [label=""isContract""];
""986_fallback"" [label=""fallback""];
""986_mint"" [label=""mint""];
""986_allowance"" [label=""allowance""];
""986_freezeAccount"" [label=""freezeAccount""];
""986_constructor"" [label=""constructor""];
""986_transferFrom"" [label=""transferFrom""];
""986_burn"" [label=""burn""];
""986_sendwithgas"" [label=""sendwithgas""];
""986_unfreezeAccount"" [label=""unfreezeAccount""];
""986_mint"" -> ""986_onlyOwner"";
""986_transfer"" -> ""986_notFrozen"";
""986_unfreezeAccount"" -> ""986_onlyOwner"";
""986_sendwithgas"" -> ""986_notFrozen"";
""986_transferFrom"" -> ""986__transfer"";
""986_burn"" -> ""986_onlyOwner"";
""986_transferFrom"" -> ""986_notFrozen"";
""986_burn_address"" -> ""986_onlyOwner"";
""986_sendwithgas"" -> ""986_onlyOwner"";
""986_freezeAccount"" -> ""986_onlyOwner"";
}
"
0x6e8b54e99807e53b271dc02e02cc32f143ca108a.sol,ETHOS,contract ETHOS is ERC20 { address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalSupply = 2200000000 * 10**8; function name() public constant returns (string) { return ; },0,"subgraph cluster_636_ETHOS {
label=""ETHOS"";
""636_symbol"" [label=""symbol""];
""636_transferOwnership"" [label=""transferOwnership""];
""636_ETHOS"" [label=""ETHOS""];
""636_distributeETHOS"" [label=""distributeETHOS""];
""636_balanceOf"" [label=""balanceOf""];
""636_allowance"" [label=""allowance""];
""636_transfer"" [label=""transfer""];
""636_getEthBalance"" [label=""getEthBalance""];
""636_decimals"" [label=""decimals""];
""636_transferFrom"" [label=""transferFrom""];
""636_name"" [label=""name""];
""636_approve"" [label=""approve""];
""636_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""636_finishDistribute"" [label=""finishDistribute""];
""636_distributeETHOS"" -> ""636_onlyOwner"";
""636_transferOwnership"" -> ""636_onlyOwner"";
""636_distributeETHOS"" -> ""636_canDistr"";
""636_finishDistribute"" -> ""636_onlyOwner"";
""636_transfer"" -> ""636_onlyPayloadSize"";
""636_transferFrom"" -> ""636_onlyPayloadSize"";
}
"
0xf3e693175db47264c99eca0f1c1c4a2c1aed3bd7.sol,TVToken,"contract TVToken is PausableToken, MintableToken { using AddressUtils for address; string public name = ; string public symbol = ; uint8 public decimals = 18; bytes4 constant TOKEN_RECEIVED = bytes4(keccak256()); constructor() public {}",0,"subgraph cluster_1008_TVToken {
label=""TVToken"";
""1008_safeTransfer"" [label=""safeTransfer""];
""1008_revertFunds"" [label=""revertFunds""];
""1008_constructor"" [label=""constructor""];
""1008_checkAndCallSafeTransfer"" [label=""checkAndCallSafeTransfer""];
""1008_safeTransferFrom"" [label=""safeTransferFrom""];
""1008_safeTransferFrom"" -> ""1008_checkAndCallSafeTransfer"";
""1008_safeTransfer"" -> ""1008_transfer"";
""1008_safeTransfer"" -> ""1008_checkAndCallSafeTransfer"";
""1008_safeTransferFrom"" -> ""1008_transferFrom"";
""1008_revertFunds"" -> ""1008_onlyOwner"";
}
"
0xeffdda4220a61bb62d7bff9d89615e05b3f156e8.sol,CommunityToken,"contract CommunityToken { using SafeMath for uint256; mapping(address => mapping(address => uint256)) allowed; mapping(address => uint256) balances; uint256 public totalSupply; uint256 public decimals; address public owner; bytes32 public symbol; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed spender, uint256 value); function CommunityToken() { totalSupply = 1000000; symbol = ; owner = 0xd21Ef1Fb710c17cA568380f20a3ceE46c254d315; balances[owner] = totalSupply; decimals = 0; }",0,"subgraph cluster_343_CommunityToken {
label=""CommunityToken"";
""343_transfer"" [label=""transfer""];
""343_allowance"" [label=""allowance""];
""343_fallback"" [label=""fallback""];
""343_balanceOf"" [label=""balanceOf""];
""343_transferFrom"" [label=""transferFrom""];
""343_approve"" [label=""approve""];
""343_CommunityToken"" [label=""CommunityToken""];
}
"
0x26c7bdd051318b48092390eabd1b69fce5080b25.sol,CETH,"contract CETH is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 500000000e18; uint256 public totalDistributed = 350000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 4000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_873_CETH {
label=""CETH"";
""873_approve"" [label=""approve""];
""873_CETH"" [label=""CETH""];
""873_transfer"" [label=""transfer""];
""873_getTokenBalance"" [label=""getTokenBalance""];
""873_withdraw"" [label=""withdraw""];
""873_transferOwnership"" [label=""transferOwnership""];
""873_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""873_transferFrom"" [label=""transferFrom""];
""873_allowance"" [label=""allowance""];
""873_fallback"" [label=""fallback""];
""873_balanceOf"" [label=""balanceOf""];
""873_finishDistribution"" [label=""finishDistribution""];
""873_burn"" [label=""burn""];
""873_getTokens"" [label=""getTokens""];
""873_distr"" [label=""distr""];
""873_withdrawForeignTokens"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_canDistr"";
""873_withdraw"" -> ""873_onlyOwner"";
""873_transfer"" -> ""873_onlyPayloadSize"";
""873_burn"" -> ""873_onlyOwner"";
""873_fallback"" -> ""873_getTokens"";
""873_finishDistribution"" -> ""873_canDistr"";
""873_transferFrom"" -> ""873_onlyPayloadSize"";
""873_getTokens"" -> ""873_onlyWhitelist"";
""873_finishDistribution"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_distr"";
""873_distr"" -> ""873_canDistr"";
""873_transferOwnership"" -> ""873_onlyOwner"";
}
"
0xa1ad52ff49fc70b7920b7d02483a58beb15d492b.sol,FoMo3Dlong,"contract FoMo3Dlong is modularLong { using SafeMath for *; using NameFilter for string; using F3DKeysCalcLong for uint256; address private owner = 0x0c204d9C438553a107B29cdE1d1e7954673b29B3; address private opAddress = 0x0c204d9C438553a107B29cdE1d1e7954673b29B3; address private comAddress = 0x24D160101C72c035287f772a8ac2b744a477F489; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x0f717ffff71e639636fcdd33727ee8c17c4724bf); string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 constant private rndInit_ = 2 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 2 hours; uint256 constant private comDropGap_ = 24 hours; uint256 constant private rndNTR_ = 168 hours; uint256 public airDropPot_; uint256 public airDropPot2_; uint256 public airDropTracker_ = 0; uint256 public airDropTracker2_ = 0; uint256 public rID_; uint256 public comReWards_; uint256 public comAirDrop_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => uint256) public inviteCount_; mapping (address => bool) public addrLock_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => uint256[10]) public lastTen_; mapping (uint256 => uint256) public roundBetCount_; mapping (uint256 => mapping (uint256 =>uint256)) public comDropLastTime_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(48,0); fees_[1] = F3Ddatasets.TeamFee(33,0); fees_[2] = F3Ddatasets.TeamFee(18,0); potSplit_[0] = F3Ddatasets.PotSplit(10,20); potSplit_[1] = F3Ddatasets.PotSplit(5,20); potSplit_[2] = F3Ddatasets.PotSplit(20,20); }",0,"subgraph cluster_5035_FoMo3Dlong {
label=""FoMo3Dlong"";
""5035_shareLastTen"" [label=""shareLastTen""];
""5035_constructor"" [label=""constructor""];
""5035_verifyTeam"" [label=""verifyTeam""];
""5035_receivePlayerInfo"" [label=""receivePlayerInfo""];
""5035_receivePlayerNameList"" [label=""receivePlayerNameList""];
""5035_withdrawEarnings"" [label=""withdrawEarnings""];
""5035_core"" [label=""core""];
""5035_reLoadXaddr"" [label=""reLoadXaddr""];
""5035_buyXname"" [label=""buyXname""];
""5035_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""5035_updateMasks"" [label=""updateMasks""];
""5035_fallback"" [label=""fallback""];
""5035_updateTimer"" [label=""updateTimer""];
""5035_distributeExternal"" [label=""distributeExternal""];
""5035_withdraw"" [label=""withdraw""];
""5035_distributeInternal"" [label=""distributeInternal""];
""5035_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""5035_reLoadXname"" [label=""reLoadXname""];
""5035_getPlayerVaults"" [label=""getPlayerVaults""];
""5035_reLoadCore"" [label=""reLoadCore""];
""5035_getTimeLeft"" [label=""getTimeLeft""];
""5035_updateGenVault"" [label=""updateGenVault""];
""5035_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""5035_buyXid"" [label=""buyXid""];
""5035_affsend"" [label=""affsend""];
""5035_determinePID"" [label=""determinePID""];
""5035_potSwap"" [label=""potSwap""];
""5035_air2"" [label=""air2""];
""5035_endRound"" [label=""endRound""];
""5035_registerNameXID"" [label=""registerNameXID""];
""5035_airdrop2"" [label=""airdrop2""];
""5035_registerNameXname"" [label=""registerNameXname""];
""5035_activate"" [label=""activate""];
""5035_airdrop"" [label=""airdrop""];
""5035_managePlayer"" [label=""managePlayer""];
""5035_iWantXKeys"" [label=""iWantXKeys""];
""5035_registerNameXaddr"" [label=""registerNameXaddr""];
""5035_buyCore"" [label=""buyCore""];
""5035_getBuyPrice"" [label=""getBuyPrice""];
""5035_comDrop"" [label=""comDrop""];
""5035_buyXaddr"" [label=""buyXaddr""];
""5035_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""5035_reLoadXid"" [label=""reLoadXid""];
""5035_endTx"" [label=""endTx""];
""5035_calcKeysReceived"" [label=""calcKeysReceived""];
""5035_reLoadXid"" -> ""5035_isHuman"";
""5035_withdrawEarnings"" -> ""5035_updateGenVault"";
""5035_withdraw"" -> ""5035_isHuman"";
""5035_buyXid"" -> ""5035_isActivated"";
""5035_withdraw"" -> ""5035_isActivated"";
""5035_reLoadXaddr"" -> ""5035_reLoadCore"";
""5035_reLoadCore"" -> ""5035_withdrawEarnings"";
""5035_core"" -> ""5035_air2"";
""5035_buyXaddr"" -> ""5035_isWithinLimits"";
""5035_reLoadXname"" -> ""5035_isHuman"";
""5035_buyXname"" -> ""5035_buyCore"";
""5035_fallback"" -> ""5035_isActivated"";
""5035_registerNameXname"" -> ""5035_isHuman"";
""5035_core"" -> ""5035_comDrop"";
""5035_getPlayerInfoByAddress"" -> ""5035_calcUnMaskedEarnings"";
""5035_core"" -> ""5035_updateTimer"";
""5035_reLoadXid"" -> ""5035_isActivated"";
""5035_buyCore"" -> ""5035_endRound"";
""5035_fallback"" -> ""5035_isHuman"";
""5035_reLoadXaddr"" -> ""5035_verifyTeam"";
""5035_getPlayerVaults"" -> ""5035_calcUnMaskedEarnings"";
""5035_air2"" -> ""5035_airdrop2"";
""5035_reLoadXname"" -> ""5035_reLoadCore"";
""5035_buyXname"" -> ""5035_isHuman"";
""5035_updateGenVault"" -> ""5035_calcUnMaskedEarnings"";
""5035_core"" -> ""5035_airdrop"";
""5035_buyXaddr"" -> ""5035_isActivated"";
""5035_endRound"" -> ""5035_shareLastTen"";
""5035_buyXaddr"" -> ""5035_isHuman"";
""5035_reLoadXaddr"" -> ""5035_isWithinLimits"";
""5035_managePlayer"" -> ""5035_updateGenVault"";
""5035_fallback"" -> ""5035_determinePID"";
""5035_getPlayerVaults"" -> ""5035_getPlayerVaultsHelper"";
""5035_withdraw"" -> ""5035_withdrawEarnings"";
""5035_buyXname"" -> ""5035_verifyTeam"";
""5035_core"" -> ""5035_endTx"";
""5035_reLoadXaddr"" -> ""5035_isActivated"";
""5035_fallback"" -> ""5035_buyCore"";
""5035_reLoadXname"" -> ""5035_verifyTeam"";
""5035_core"" -> ""5035_managePlayer"";
""5035_buyCore"" -> ""5035_core"";
""5035_distributeInternal"" -> ""5035_updateMasks"";
""5035_buyXname"" -> ""5035_isActivated"";
""5035_buyXname"" -> ""5035_determinePID"";
""5035_reLoadXaddr"" -> ""5035_isHuman"";
""5035_core"" -> ""5035_distributeInternal"";
""5035_buyXaddr"" -> ""5035_buyCore"";
""5035_fallback"" -> ""5035_isWithinLimits"";
""5035_buyXaddr"" -> ""5035_verifyTeam"";
""5035_buyXid"" -> ""5035_buyCore"";
""5035_buyXid"" -> ""5035_determinePID"";
""5035_reLoadXid"" -> ""5035_isWithinLimits"";
""5035_withdraw"" -> ""5035_endRound"";
""5035_buyXid"" -> ""5035_isWithinLimits"";
""5035_buyXid"" -> ""5035_verifyTeam"";
""5035_registerNameXID"" -> ""5035_isHuman"";
""5035_distributeExternal"" -> ""5035_affsend"";
""5035_buyXaddr"" -> ""5035_determinePID"";
""5035_reLoadXid"" -> ""5035_verifyTeam"";
""5035_reLoadXname"" -> ""5035_isActivated"";
""5035_reLoadCore"" -> ""5035_core"";
""5035_core"" -> ""5035_distributeExternal"";
""5035_registerNameXaddr"" -> ""5035_isHuman"";
""5035_buyXname"" -> ""5035_isWithinLimits"";
""5035_reLoadXid"" -> ""5035_reLoadCore"";
""5035_reLoadXname"" -> ""5035_isWithinLimits"";
""5035_reLoadCore"" -> ""5035_endRound"";
""5035_buyXid"" -> ""5035_isHuman"";
}
"
0x52089ba2c27523cf44826cfb92c711d3ef4df231.sol,OMIToken,"contract OMIToken is CappedToken, PausableToken { string public constant name = ; string public constant symbol = ; uint256 public decimals = 18; function OMIToken() public CappedToken(1000000000*1e18) {}",0,"subgraph cluster_920_OMIToken {
label=""OMIToken"";
""920_isOMITokenContract"" [label=""isOMITokenContract""];
""920_OMIToken"" [label=""OMIToken""];
""920_OMIToken"" -> ""920_constructor"";
}
"
0x25db2e489d21be85839992dfa0c17b500be02516.sol,KingdomEthGoldCoin,contract KingdomEthGoldCoin { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1377_KingdomEthGoldCoin {
label=""KingdomEthGoldCoin"";
""1377_totalSupply"" [label=""totalSupply""];
""1377_sqrt"" [label=""sqrt""];
""1377_buyPrice"" [label=""buyPrice""];
""1377_setAdministrator"" [label=""setAdministrator""];
""1377_exit"" [label=""exit""];
""1377_transfer"" [label=""transfer""];
""1377_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1377_withdraw"" [label=""withdraw""];
""1377_setStakingRequirement"" [label=""setStakingRequirement""];
""1377_sellPrice"" [label=""sellPrice""];
""1377_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1377_reinvest"" [label=""reinvest""];
""1377_sell"" [label=""sell""];
""1377_fallback"" [label=""fallback""];
""1377_balanceOf"" [label=""balanceOf""];
""1377_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1377_buy"" [label=""buy""];
""1377_totalUsers"" [label=""totalUsers""];
""1377_dividendsOf"" [label=""dividendsOf""];
""1377_disableInitialStage"" [label=""disableInitialStage""];
""1377_referralsOf"" [label=""referralsOf""];
""1377_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1377_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1377_KingdomETHCom"" [label=""KingdomETHCom""];
""1377_myTokens"" [label=""myTokens""];
""1377_purchaseTokens"" [label=""purchaseTokens""];
""1377_setName"" [label=""setName""];
""1377_setSymbol"" [label=""setSymbol""];
""1377_myDividends"" [label=""myDividends""];
""1377_buyPrice"" -> ""1377_tokensToEthereum_"";
""1377_myTokens"" -> ""1377_balanceOf"";
""1377_transfer"" -> ""1377_withdraw"";
""1377_fallback"" -> ""1377_purchaseTokens"";
""1377_calculateEthereumReceived"" -> ""1377_tokensToEthereum_"";
""1377_setSymbol"" -> ""1377_onlyAdministrator"";
""1377_withdraw"" -> ""1377_myDividends"";
""1377_sell"" -> ""1377_tokensToEthereum_"";
""1377_ethereumToTokens_"" -> ""1377_sqrt"";
""1377_exit"" -> ""1377_sell"";
""1377_sell"" -> ""1377_onlyBagholders"";
""1377_exit"" -> ""1377_withdraw"";
""1377_disableInitialStage"" -> ""1377_onlyAdministrator"";
""1377_purchaseTokens"" -> ""1377_antiEarlyWhale"";
""1377_calculateTokensReceived"" -> ""1377_ethereumToTokens_"";
""1377_reinvest"" -> ""1377_purchaseTokens"";
""1377_setAdministrator"" -> ""1377_onlyAdministrator"";
""1377_setName"" -> ""1377_onlyAdministrator"";
""1377_setStakingRequirement"" -> ""1377_onlyAdministrator"";
""1377_sellPrice"" -> ""1377_tokensToEthereum_"";
""1377_purchaseTokens"" -> ""1377_ethereumToTokens_"";
""1377_withdraw"" -> ""1377_onlyStronghands"";
""1377_transfer"" -> ""1377_myDividends"";
""1377_buy"" -> ""1377_purchaseTokens"";
""1377_reinvest"" -> ""1377_myDividends"";
""1377_myDividends"" -> ""1377_dividendsOf"";
""1377_transfer"" -> ""1377_onlyBagholders"";
""1377_reinvest"" -> ""1377_onlyStronghands"";
}
"
0x3a630495c7611b4da41bf133554374caa3963b75.sol,PornSceneToken,"contract PornSceneToken is ERC721 { event Birth(uint256 tokenId, string name, uint[] stars, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name, uint[] stars); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 10000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public sceneIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public sceneIndexToApproved; mapping (uint256 => uint256) private sceneIndexToPrice; address public ceoAddress; address public cooAddress; PornstarsInterface pornstarsContract; uint currentAwardWinner = 85; uint256 public promoCreatedCount; struct Scene { string name; uint[] stars; }",0,"subgraph cluster_1264_PornSceneToken {
label=""PornSceneToken"";
""1264_setCEO"" [label=""setCEO""];
""1264_tokensOfOwner"" [label=""tokensOfOwner""];
""1264_getScene"" [label=""getScene""];
""1264__payout"" [label=""_payout""];
""1264_ownerOf"" [label=""ownerOf""];
""1264_takeOwnership"" [label=""takeOwnership""];
""1264_totalSupply"" [label=""totalSupply""];
""1264_priceOf"" [label=""priceOf""];
""1264_PornSceneToken"" [label=""PornSceneToken""];
""1264_payout"" [label=""payout""];
""1264_implementsERC721"" [label=""implementsERC721""];
""1264__owns"" [label=""_owns""];
""1264_balanceOf"" [label=""balanceOf""];
""1264_symbol"" [label=""symbol""];
""1264__paySceneStarOwners"" [label=""_paySceneStarOwners""];
""1264__addressNotNull"" [label=""_addressNotNull""];
""1264_starsOf"" [label=""starsOf""];
""1264_approve"" [label=""approve""];
""1264_purchase"" [label=""purchase""];
""1264__isGoodAddress"" [label=""_isGoodAddress""];
""1264_transferFrom"" [label=""transferFrom""];
""1264__transfer"" [label=""_transfer""];
""1264__payAwardOwner"" [label=""_payAwardOwner""];
""1264__approved"" [label=""_approved""];
""1264_name"" [label=""name""];
""1264_setPornstarsContractAddress"" [label=""setPornstarsContractAddress""];
""1264_setCOO"" [label=""setCOO""];
""1264_transfer"" [label=""transfer""];
""1264__createScene"" [label=""_createScene""];
""1264_createContractScene"" [label=""createContractScene""];
""1264_createPromoScene"" [label=""createPromoScene""];
""1264_purchase"" -> ""1264__transfer"";
""1264_payout"" -> ""1264_onlyCLevel"";
""1264_payout"" -> ""1264__payout"";
""1264_setCEO"" -> ""1264_onlyCEO"";
""1264_takeOwnership"" -> ""1264__addressNotNull"";
""1264_createPromoScene"" -> ""1264__createScene"";
""1264__paySceneStarOwners"" -> ""1264__isGoodAddress"";
""1264_createContractScene"" -> ""1264_onlyCOO"";
""1264_takeOwnership"" -> ""1264__approved"";
""1264_tokensOfOwner"" -> ""1264_balanceOf"";
""1264_setCOO"" -> ""1264_onlyCEO"";
""1264_transferFrom"" -> ""1264__addressNotNull"";
""1264_approve"" -> ""1264__owns"";
""1264_purchase"" -> ""1264__paySceneStarOwners"";
""1264_setPornstarsContractAddress"" -> ""1264_onlyCOO"";
""1264_tokensOfOwner"" -> ""1264_totalSupply"";
""1264__payAwardOwner"" -> ""1264__isGoodAddress"";
""1264_transfer"" -> ""1264__owns"";
""1264_transfer"" -> ""1264__transfer"";
""1264_transferFrom"" -> ""1264__owns"";
""1264_createPromoScene"" -> ""1264_onlyCOO"";
""1264_transferFrom"" -> ""1264__approved"";
""1264_transferFrom"" -> ""1264__transfer"";
""1264_transfer"" -> ""1264__addressNotNull"";
""1264_purchase"" -> ""1264__addressNotNull"";
""1264__createScene"" -> ""1264__transfer"";
""1264_createContractScene"" -> ""1264__createScene"";
""1264_takeOwnership"" -> ""1264__transfer"";
""1264_purchase"" -> ""1264__payAwardOwner"";
}
"
0x33a615778ed8206c4462c67b2830220eea65bb92.sol,ZXCoin,"contract ZXCoin is StandardToken, Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public startDate1; uint256 public endDate1; uint256 public startDate2; uint256 public endDate2; uint256 public saleCap; address public tokenWallet; address public fundWallet; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount); event PreICOTokenPushed(address indexed buyer, uint256 amount); modifier uninitialized() { require(tokenWallet == 0x0); require(fundWallet == 0x0); _; }",0,"subgraph cluster_1035_ZXCoin {
label=""ZXCoin"";
""1035_setSaleCap"" [label=""setSaleCap""];
""1035_setPeriod"" [label=""setPeriod""];
""1035_saleActive"" [label=""saleActive""];
""1035_constructor"" [label=""constructor""];
""1035_sendForPreICO"" [label=""sendForPreICO""];
""1035_fallback"" [label=""fallback""];
""1035_finalize"" [label=""finalize""];
""1035_getCurrentTimestamp"" [label=""getCurrentTimestamp""];
""1035_getBounsByAmount"" [label=""getBounsByAmount""];
""1035_getBonusByTime"" [label=""getBonusByTime""];
""1035_buyTokens"" [label=""buyTokens""];
""1035_initialize"" [label=""initialize""];
""1035_saleActive"" -> ""1035_getCurrentTimestamp"";
""1035_setSaleCap"" -> ""1035_onlyOwner"";
""1035_fallback"" -> ""1035_buyTokens"";
""1035_sendForPreICO"" -> ""1035_onlyOwner"";
""1035_initialize"" -> ""1035_onlyOwner"";
""1035_initialize"" -> ""1035_uninitialized"";
""1035_setPeriod"" -> ""1035_onlyOwner"";
""1035_buyTokens"" -> ""1035_getCurrentTimestamp"";
""1035_buyTokens"" -> ""1035_getBonusByTime"";
""1035_buyTokens"" -> ""1035_saleActive"";
""1035_buyTokens"" -> ""1035_getBounsByAmount"";
""1035_finalize"" -> ""1035_onlyOwner"";
""1035_finalize"" -> ""1035_saleActive"";
}
"
0x733e2faada6bf25c162b1a1d17a23e223bb69b2b.sol,CWV,"contract CWV is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 10000000000e18; uint256 public totalDistributed = 3000000000e18; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 45000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_CWV {
label=""CWV"";
""944_fallback"" [label=""fallback""];
""944_transfer"" [label=""transfer""];
""944_allowance"" [label=""allowance""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_burn"" [label=""burn""];
""944_approve"" [label=""approve""];
""944_distr"" [label=""distr""];
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_finishDistribution"" [label=""finishDistribution""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_transferFrom"" [label=""transferFrom""];
""944_balanceOf"" [label=""balanceOf""];
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_CWV"" [label=""CWV""];
""944_getTokens"" [label=""getTokens""];
""944_withdraw"" [label=""withdraw""];
""944_getTokens"" -> ""944_distr"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
""944_finishDistribution"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_distr"" -> ""944_canDistr"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_getTokens"" -> ""944_canDistr"";
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_fallback"" -> ""944_getTokens"";
""944_CWV"" -> ""944_distr"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_transferOwnership"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_burn"" -> ""944_onlyOwner"";
}
"
0xde31e0ef14c2348f85d95f3dffef632e1215e070.sol,iCashweb,"contract iCashweb is iCashwebToken { using iMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 _totalSupply; uint256 _rate; uint256 _totalMintSupply; uint256 _maxMintable; mapping (address => uint256) _balances; mapping (address => mapping (address => uint256)) _approvals; constructor (uint256 _price, uint256 _val) public { iOwner = msg.sender; _mintingStarted = true; _minted = false; _rate = _price; uint256 tokenVal = _val.mul(10 ** uint256(decimals)); _totalSupply = tokenVal.mul(2); _maxMintable = tokenVal; _balances[msg.sender] = tokenVal; emit Transfer(0x0, msg.sender, tokenVal); }",0,"subgraph cluster_939_iCashweb {
label=""iCashweb"";
""939_balanceOf"" [label=""balanceOf""];
""939_getMintingStatus"" [label=""getMintingStatus""];
""939_fallback"" [label=""fallback""];
""939_transferOwnership"" [label=""transferOwnership""];
""939_getMinted"" [label=""getMinted""];
""939_releaseMintTokens"" [label=""releaseMintTokens""];
""939_transferMintTokens"" [label=""transferMintTokens""];
""939_totalMintSupply"" [label=""totalMintSupply""];
""939_moveMintTokens"" [label=""moveMintTokens""];
""939_isOwner"" [label=""isOwner""];
""939_transferFrom"" [label=""transferFrom""];
""939_approve"" [label=""approve""];
""939_totalSupply"" [label=""totalSupply""];
""939_allowance"" [label=""allowance""];
""939_transfer"" [label=""transfer""];
""939_changeRate"" [label=""changeRate""];
""939_constructor"" [label=""constructor""];
""939_getRate"" [label=""getRate""];
""939_fallback"" -> ""939_mintingStarted"";
""939_releaseMintTokens"" -> ""939_notMinted"";
""939_transferMintTokens"" -> ""939_iOnlyOwner"";
""939_moveMintTokens"" -> ""939_iOnlyOwner"";
}
"
0x51c46c33064a9d7171dbdbfc65c3bf2d2ef688a4.sol,Exchange,contract Exchange { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1952_Exchange {
label=""Exchange"";
""1952_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1952_setAltFundAddress"" [label=""setAltFundAddress""];
""1952_totalSupply"" [label=""totalSupply""];
""1952_handleRef"" [label=""handleRef""];
""1952_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1952_purchaseTokens"" [label=""purchaseTokens""];
""1952_reinvest"" [label=""reinvest""];
""1952_sellPrice"" [label=""sellPrice""];
""1952_setBondFundAddress"" [label=""setBondFundAddress""];
""1952_setName"" [label=""setName""];
""1952_fallback"" [label=""fallback""];
""1952_setStakingRequirement"" [label=""setStakingRequirement""];
""1952_sell"" [label=""sell""];
""1952_exit"" [label=""exit""];
""1952_setSymbol"" [label=""setSymbol""];
""1952_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1952_balanceOf"" [label=""balanceOf""];
""1952_setFeeRates"" [label=""setFeeRates""];
""1952_sqrt"" [label=""sqrt""];
""1952_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1952_buy"" [label=""buy""];
""1952_etherToSendFund"" [label=""etherToSendFund""];
""1952_Exchange"" [label=""Exchange""];
""1952_withdraw"" [label=""withdraw""];
""1952_buyPrice"" [label=""buyPrice""];
""1952_purchaseInternal"" [label=""purchaseInternal""];
""1952_dividendsOf"" [label=""dividendsOf""];
""1952_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1952_payFund"" [label=""payFund""];
""1952_myDividends"" [label=""myDividends""];
""1952_transfer"" [label=""transfer""];
""1952_transferAndCall"" [label=""transferAndCall""];
""1952_setAdministrator"" [label=""setAdministrator""];
""1952_setCanAcceptTokens"" [label=""setCanAcceptTokens""];
""1952_myTokens"" [label=""myTokens""];
""1952_isContract"" [label=""isContract""];
""1952_transferAndCall"" -> ""1952_transfer"";
""1952_reinvest"" -> ""1952_purchaseTokens"";
""1952_setCanAcceptTokens"" -> ""1952_onlyAdministrator"";
""1952_transferAndCall"" -> ""1952_isContract"";
""1952_buyPrice"" -> ""1952_tokensToEthereum_"";
""1952_transfer"" -> ""1952_myDividends"";
""1952_exit"" -> ""1952_sell"";
""1952_myTokens"" -> ""1952_balanceOf"";
""1952_purchaseInternal"" -> ""1952_notContract"";
""1952_purchaseTokens"" -> ""1952_ethereumToTokens_"";
""1952_setStakingRequirement"" -> ""1952_onlyAdministrator"";
""1952_withdraw"" -> ""1952_myDividends"";
""1952_ethereumToTokens_"" -> ""1952_sqrt"";
""1952_setFeeRates"" -> ""1952_onlyAdministrator"";
""1952_reinvest"" -> ""1952_myDividends"";
""1952_transfer"" -> ""1952_onlyBagholders"";
""1952_fallback"" -> ""1952_purchaseTokens"";
""1952_purchaseTokens"" -> ""1952_handleRef"";
""1952_sell"" -> ""1952_onlyBagholders"";
""1952_purchaseInternal"" -> ""1952_purchaseTokens"";
""1952_setSymbol"" -> ""1952_onlyAdministrator"";
""1952_buy"" -> ""1952_purchaseTokens"";
""1952_setAltFundAddress"" -> ""1952_onlyAdministrator"";
""1952_payFund"" -> ""1952_onlyAdministrator"";
""1952_sell"" -> ""1952_handleRef"";
""1952_calculateEthereumReceived"" -> ""1952_tokensToEthereum_"";
""1952_exit"" -> ""1952_withdraw"";
""1952_calculateTokensReceived"" -> ""1952_ethereumToTokens_"";
""1952_myDividends"" -> ""1952_dividendsOf"";
""1952_reinvest"" -> ""1952_onlyStronghands"";
""1952_setAdministrator"" -> ""1952_onlyAdministrator"";
""1952_setName"" -> ""1952_onlyAdministrator"";
""1952_sellPrice"" -> ""1952_tokensToEthereum_"";
""1952_transfer"" -> ""1952_withdraw"";
""1952_withdraw"" -> ""1952_onlyStronghands"";
""1952_setBondFundAddress"" -> ""1952_onlyAdministrator"";
""1952_sell"" -> ""1952_tokensToEthereum_"";
}
"
0xf0ccca32cd300356629216eb301ec6649c7c6adb.sol,NIRXToken,"contract NIRXToken is MintableToken, BurnableToken, PausableToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; function NIRXToken() { }",0,"subgraph cluster_1584_NIRXToken {
label=""NIRXToken"";
""1584_transfer"" [label=""transfer""];
""1584_pause"" [label=""pause""];
""1584_setStopReceive"" [label=""setStopReceive""];
""1584_getStopReceive"" [label=""getStopReceive""];
""1584_burn"" [label=""burn""];
""1584_NIRXToken"" [label=""NIRXToken""];
""1584_mint"" [label=""mint""];
""1584_unpause"" [label=""unpause""];
""1584_transferAndCall"" [label=""transferAndCall""];
""1584_transferFrom"" [label=""transferFrom""];
""1584_unpause"" -> ""1584_whenPaused"";
""1584_transferFrom"" -> ""1584_whenNotPaused"";
""1584_burn"" -> ""1584_burn"";
""1584_mint"" -> ""1584_onlyOwner"";
""1584_transfer"" -> ""1584_whenNotPaused"";
""1584_pause"" -> ""1584_pause"";
""1584_mint"" -> ""1584_canMint"";
""1584_transfer"" -> ""1584_transfer"";
""1584_unpause"" -> ""1584_onlyOwner"";
""1584_pause"" -> ""1584_onlyOwner"";
""1584_transferFrom"" -> ""1584_transferFrom"";
""1584_mint"" -> ""1584_mint"";
""1584_unpause"" -> ""1584_unpause"";
""1584_pause"" -> ""1584_whenNotPaused"";
}
"
0x5581c0bc21a762e43d148b06d310f088b6cf97b3.sol,SE,"contract SE is StandardToken, BurnableToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals)); mapping(address => bool) public balanceLocked; uint public amountRaised; uint256 public buyPrice = 88; bool public crowdsaleClosed = true; bool public transferEnabled = true; constructor() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",0,"subgraph cluster_900_SE {
label=""SE"";
""900_fallback"" [label=""fallback""];
""900_transfer"" [label=""transfer""];
""900_constructor"" [label=""constructor""];
""900_unlock"" [label=""unlock""];
""900_setPrice"" [label=""setPrice""];
""900_transferFrom"" [label=""transferFrom""];
""900_closeBuy"" [label=""closeBuy""];
""900__transfer"" [label=""_transfer""];
""900_enableTransfer"" [label=""enableTransfer""];
""900_lock"" [label=""lock""];
""900_enableTransfer"" -> ""900_onlyOwner"";
""900_unlock"" -> ""900_onlyOwner"";
""900_lock"" -> ""900_onlyOwner"";
""900_transferFrom"" -> ""900_transferFrom"";
""900_transfer"" -> ""900_transfer"";
""900_setPrice"" -> ""900_onlyOwner"";
""900_closeBuy"" -> ""900_onlyOwner"";
""900_fallback"" -> ""900__transfer"";
}
"
0xe0a8a9b7c821d9bbd66b826129d4cf1b219ebb3a.sol,CryptoRides,"contract CryptoRides is ERC721 { event Created(uint256 tokenId, string name, bytes7 plateNumber, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name, bytes7 plateNumber); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public tokenIdToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public tokenIdToApproved; mapping (uint256 => uint256) private tokenIdToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Ride { string name; bytes7 plateNumber; }",0,"subgraph cluster_1008_CryptoRides {
label=""CryptoRides"";
""1008__transfer"" [label=""_transfer""];
""1008_symbol"" [label=""symbol""];
""1008__owns"" [label=""_owns""];
""1008_takeOwnership"" [label=""takeOwnership""];
""1008__createRide"" [label=""_createRide""];
""1008_balanceOf"" [label=""balanceOf""];
""1008_implementsERC721"" [label=""implementsERC721""];
""1008_approve"" [label=""approve""];
""1008__addressNotNull"" [label=""_addressNotNull""];
""1008_createContractRide"" [label=""createContractRide""];
""1008__payout"" [label=""_payout""];
""1008_setCOO"" [label=""setCOO""];
""1008_transferFrom"" [label=""transferFrom""];
""1008_totalSupply"" [label=""totalSupply""];
""1008_priceOf"" [label=""priceOf""];
""1008_setCEO"" [label=""setCEO""];
""1008_payout"" [label=""payout""];
""1008_getRide"" [label=""getRide""];
""1008_ownerOf"" [label=""ownerOf""];
""1008_purchase"" [label=""purchase""];
""1008_transfer"" [label=""transfer""];
""1008_tokensOfOwner"" [label=""tokensOfOwner""];
""1008__approved"" [label=""_approved""];
""1008_name"" [label=""name""];
""1008_createPromoRide"" [label=""createPromoRide""];
""1008_CryptoRides"" [label=""CryptoRides""];
""1008_approve"" -> ""1008__owns"";
""1008__createRide"" -> ""1008__transfer"";
""1008_transfer"" -> ""1008__owns"";
""1008_takeOwnership"" -> ""1008__transfer"";
""1008_createPromoRide"" -> ""1008_onlyCOO"";
""1008_transferFrom"" -> ""1008__owns"";
""1008_tokensOfOwner"" -> ""1008_balanceOf"";
""1008_transfer"" -> ""1008__transfer"";
""1008_createContractRide"" -> ""1008__createRide"";
""1008_payout"" -> ""1008_onlyCLevel"";
""1008_transferFrom"" -> ""1008__addressNotNull"";
""1008_transfer"" -> ""1008__addressNotNull"";
""1008_createPromoRide"" -> ""1008__createRide"";
""1008_purchase"" -> ""1008__addressNotNull"";
""1008_createContractRide"" -> ""1008_onlyCOO"";
""1008_takeOwnership"" -> ""1008__addressNotNull"";
""1008_takeOwnership"" -> ""1008__approved"";
""1008_tokensOfOwner"" -> ""1008_totalSupply"";
""1008_setCEO"" -> ""1008_onlyCEO"";
""1008_payout"" -> ""1008__payout"";
""1008_setCOO"" -> ""1008_onlyCEO"";
""1008_transferFrom"" -> ""1008__approved"";
""1008_transferFrom"" -> ""1008__transfer"";
""1008_purchase"" -> ""1008__transfer"";
}
"
0x720df200439f47fd4185f76a0a131a322d61ddd3.sol,LIIRA,contract LIIRA { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 2; uint public _totalSupply = 10000000000000; uint256 public RATE = 1; bool public isMinting = false; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_LIIRA {
label=""LIIRA"";
""516_approve"" [label=""approve""];
""516_burnTokens"" [label=""burnTokens""];
""516_constructor"" [label=""constructor""];
""516_transfer"" [label=""transfer""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_fallback"" [label=""fallback""];
""516_balanceOf"" [label=""balanceOf""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_transferFrom"" [label=""transferFrom""];
""516_totalSupply"" [label=""totalSupply""];
""516_createTokens"" [label=""createTokens""];
""516_allowance"" [label=""allowance""];
""516_fallback"" -> ""516_createTokens"";
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
""516_burnTokens"" -> ""516_onlyOwner"";
}
"
0x2896fc8a63e3453d7edf60bbef85dc336fbf982b.sol,DXBCToken,contract DXBCToken is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 6; uint256 public constant total= 200000000 * (10 ** uint256(decimals)); function DXBCToken(address wallet) { balances[wallet] = total; totalSupply = total; },0,"subgraph cluster_499_DXBCToken {
label=""DXBCToken"";
""499_DXBCToken"" [label=""DXBCToken""];
}
"
0xed81af91c38ac12b0464bf1ca4b887469f7adaec.sol,DataManager,contract DataManager is Pausable { address public dataCentreAddr; function DataManager(address _dataCentreAddr) { dataCentreAddr = _dataCentreAddr; },0,"subgraph cluster_1205_DataManager {
label=""DataManager"";
""1205_balanceOf"" [label=""balanceOf""];
""1205_DataManager"" [label=""DataManager""];
""1205_totalSupply"" [label=""totalSupply""];
""1205__setBalanceOf"" [label=""_setBalanceOf""];
""1205_allowance"" [label=""allowance""];
""1205__setTotalSupply"" [label=""_setTotalSupply""];
""1205__setAllowance"" [label=""_setAllowance""];
""1205__setAllowance"" -> ""1205_balanceOf"";
}
"
0x183891e9cfaee0c9e2dbcdfefe1505626c696951.sol,BaseCrowdsale,"contract BaseCrowdsale { using SafeMath for uint256; using SafeERC20 for CosquareToken; CosquareToken public token; uint256 public tokensSold; event TokensPurchaseLog(string purchaseType, address indexed beneficiary, uint256 value, uint256 tokens, uint256 bonuses); constructor(CosquareToken _token) public { require(_token != address(0), ); token = _token; }",0,"subgraph cluster_1232_BaseCrowdsale {
label=""BaseCrowdsale"";
""1232__deliverTokens"" [label=""_deliverTokens""];
""1232__processPurchase"" [label=""_processPurchase""];
""1232_fallback"" [label=""fallback""];
""1232__buyTokens"" [label=""_buyTokens""];
""1232_constructor"" [label=""constructor""];
""1232__getTokensAmount"" [label=""_getTokensAmount""];
""1232__preValidatePurchase"" [label=""_preValidatePurchase""];
""1232_buyTokens"" [label=""buyTokens""];
""1232__postPurchaseUpdate"" [label=""_postPurchaseUpdate""];
""1232__processPurchase"" -> ""1232__deliverTokens"";
""1232_buyTokens"" -> ""1232__buyTokens"";
""1232__buyTokens"" -> ""1232__processPurchase"";
""1232_fallback"" -> ""1232__buyTokens"";
""1232__buyTokens"" -> ""1232__postPurchaseUpdate"";
""1232__buyTokens"" -> ""1232__getTokensAmount"";
""1232__buyTokens"" -> ""1232__preValidatePurchase"";
}
"
0x3793ea257ad168ef1b4d0ed56464f9b0ab388c12.sol,CryptoEmojis,contract CryptoEmojis { using SafeMath for uint256; address dev; string constant private tokenName = ; string constant private tokenSymbol = ; struct Emoji { string codepoints; string name; uint256 price; address owner; bool exists; },0,"subgraph cluster_433_CryptoEmojis {
label=""CryptoEmojis"";
""433_usernameOf"" [label=""usernameOf""];
""433_setUsername"" [label=""setUsername""];
""433_symbol"" [label=""symbol""];
""433_totalSupply"" [label=""totalSupply""];
""433_balanceOf"" [label=""balanceOf""];
""433_nameOf"" [label=""nameOf""];
""433_codepointsOf"" [label=""codepointsOf""];
""433_withdraw"" [label=""withdraw""];
""433_edit"" [label=""edit""];
""433_setPrice"" [label=""setPrice""];
""433_buy"" [label=""buy""];
""433_name"" [label=""name""];
""433_ownerOf"" [label=""ownerOf""];
""433_priceOf"" [label=""priceOf""];
""433_create"" [label=""create""];
""433_CryptoEmojis"" [label=""CryptoEmojis""];
""433_edit"" -> ""433_onlyDev"";
""433_withdraw"" -> ""433_onlyDev"";
""433_create"" -> ""433_onlyDev"";
}
"
0x5cb92b06ca0226e0a2c5fc8ee23e9cc66b1a4e11.sol,ETToken,"contract ETToken is Owned, StandardToken { using SafeMath for uint; string public name = ; string public symbol = ; uint8 public decimals = 18; address public beneficiary; address public oracle; address public heroContract; modifier onlyOracle { require(msg.sender == oracle); _; }",0,"subgraph cluster_1126_ETToken {
label=""ETToken"";
""1126_setCanAcceptTokens"" [label=""setCanAcceptTokens""];
""1126_rewardTokensFloor"" [label=""rewardTokensFloor""];
""1126_fallback"" [label=""fallback""];
""1126_payoutDividends"" [label=""payoutDividends""];
""1126_setIsMinter"" [label=""setIsMinter""];
""1126_burn"" [label=""burn""];
""1126__acceptDividends"" [label=""_acceptDividends""];
""1126_transferWithParams"" [label=""transferWithParams""];
""1126__mintTokens"" [label=""_mintTokens""];
""1126_setOracle"" [label=""setOracle""];
""1126_acceptDividends"" [label=""acceptDividends""];
""1126_authorizeFloor"" [label=""authorizeFloor""];
""1126__postTransferHook"" [label=""_postTransferHook""];
""1126_rewardTokens"" [label=""rewardTokens""];
""1126_setHeroContract"" [label=""setHeroContract""];
""1126__invokeTokenRecipient"" [label=""_invokeTokenRecipient""];
""1126_ETToken"" [label=""ETToken""];
""1126_accountAuth"" [label=""accountAuth""];
""1126_setBeneficiary"" [label=""setBeneficiary""];
""1126_authorizeFloor"" -> ""1126_onlyOwner"";
""1126_setHeroContract"" -> ""1126_onlyOwner"";
""1126_acceptDividends"" -> ""1126__acceptDividends"";
""1126_setCanAcceptTokens"" -> ""1126_onlyOwner"";
""1126_transferWithParams"" -> ""1126__invokeTokenRecipient"";
""1126__postTransferHook"" -> ""1126__invokeTokenRecipient"";
""1126_rewardTokens"" -> ""1126__mintTokens"";
""1126_rewardTokensFloor"" -> ""1126__mintTokens"";
""1126_payoutDividends"" -> ""1126_onlyOracle"";
""1126_setOracle"" -> ""1126_onlyOwner"";
""1126_rewardTokens"" -> ""1126_onlyMinters"";
""1126_setBeneficiary"" -> ""1126_onlyOwner"";
""1126_transferWithParams"" -> ""1126_onlyPayloadSize"";
""1126_setIsMinter"" -> ""1126_onlyOwner"";
}
"
0xf3cfb35afdbffea20892488ba7f1574adda81b9d.sol,Proof,contract Proof { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1265_Proof {
label=""Proof"";
""1265_withdraw"" [label=""withdraw""];
""1265_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1265_transferAndCall"" [label=""transferAndCall""];
""1265_sell"" [label=""sell""];
""1265_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1265_sellPrice"" [label=""sellPrice""];
""1265_buy"" [label=""buy""];
""1265_fallback"" [label=""fallback""];
""1265_transfer"" [label=""transfer""];
""1265_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1265_isContract"" [label=""isContract""];
""1265_reinvest"" [label=""reinvest""];
""1265_dividendsOf"" [label=""dividendsOf""];
""1265_myTokens"" [label=""myTokens""];
""1265_sqrt"" [label=""sqrt""];
""1265_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1265_purchaseTokens"" [label=""purchaseTokens""];
""1265_exit"" [label=""exit""];
""1265_buyPrice"" [label=""buyPrice""];
""1265_myDividends"" [label=""myDividends""];
""1265_balanceOf"" [label=""balanceOf""];
""1265_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1265_purchaseInternal"" [label=""purchaseInternal""];
""1265_totalSupply"" [label=""totalSupply""];
""1265_myTokens"" -> ""1265_balanceOf"";
""1265_exit"" -> ""1265_sell"";
""1265_ethereumToTokens_"" -> ""1265_sqrt"";
""1265_transfer"" -> ""1265_myDividends"";
""1265_purchaseTokens"" -> ""1265_ethereumToTokens_"";
""1265_fallback"" -> ""1265_purchaseInternal"";
""1265_calculateTokensReceived"" -> ""1265_ethereumToTokens_"";
""1265_sellPrice"" -> ""1265_tokensToEthereum_"";
""1265_withdraw"" -> ""1265_myDividends"";
""1265_reinvest"" -> ""1265_myDividends"";
""1265_purchaseTokens"" -> ""1265_buyPrice"";
""1265_buyPrice"" -> ""1265_tokensToEthereum_"";
""1265_sell"" -> ""1265_buyPrice"";
""1265_reinvest"" -> ""1265_purchaseTokens"";
""1265_sell"" -> ""1265_onlyBagholders"";
""1265_withdraw"" -> ""1265_onlyStronghands"";
""1265_purchaseInternal"" -> ""1265_notContract"";
""1265_reinvest"" -> ""1265_onlyStronghands"";
""1265_transfer"" -> ""1265_onlyBagholders"";
""1265_transferAndCall"" -> ""1265_isContract"";
""1265_buy"" -> ""1265_purchaseInternal"";
""1265_purchaseInternal"" -> ""1265_purchaseTokens"";
""1265_transfer"" -> ""1265_withdraw"";
""1265_calculateEthereumReceived"" -> ""1265_tokensToEthereum_"";
""1265_sell"" -> ""1265_tokensToEthereum_"";
""1265_transferAndCall"" -> ""1265_transfer"";
""1265_exit"" -> ""1265_withdraw"";
""1265_myDividends"" -> ""1265_dividendsOf"";
}
"
0x51db5ad35c671a87207d88fc11d593ac0c8415bd.sol,MoedaToken,"contract MoedaToken is StandardToken, Ownable, HasNoTokens { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; MigrationAgent public migrationAgent; uint256 constant AGENT_MAGIC_ID = 0x6e538c0d750418aae4131a91e5a20363; uint256 public totalMigrated; uint constant TOKEN_MULTIPLIER = 10**uint256(decimals); uint public constant MAX_TOKENS = 20000000 * TOKEN_MULTIPLIER; bool public mintingFinished; event LogMigration(address indexed spender, address grantee, uint256 amount); event LogCreation(address indexed donor, uint256 tokensReceived); event LogDestruction(address indexed sender, uint256 amount); event LogMintingFinished(); modifier afterMinting() { require(mintingFinished); _; }",0,"subgraph cluster_842_MoedaToken {
label=""MoedaToken"";
""842_burn"" [label=""burn""];
""842_issueTokens"" [label=""issueTokens""];
""842_mint"" [label=""mint""];
""842_transfer"" [label=""transfer""];
""842_transferFrom"" [label=""transferFrom""];
""842_migrate"" [label=""migrate""];
""842_MoedaToken"" [label=""MoedaToken""];
""842_unlock"" [label=""unlock""];
""842_isContract"" [label=""isContract""];
""842_setMigrationAgent"" [label=""setMigrationAgent""];
""842_mint"" -> ""842_canMint"";
""842_transfer"" -> ""842_canTransfer"";
""842_transferFrom"" -> ""842_canTransfer"";
""842_unlock"" -> ""842_canMint"";
""842_unlock"" -> ""842_onlyOwner"";
""842_MoedaToken"" -> ""842_issueTokens"";
""842_transferFrom"" -> ""842_transferFrom"";
""842_issueTokens"" -> ""842_mint"";
""842_setMigrationAgent"" -> ""842_onlyOwner"";
""842_transfer"" -> ""842_transfer"";
""842_setMigrationAgent"" -> ""842_afterMinting"";
""842_setMigrationAgent"" -> ""842_isContract"";
""842_migrate"" -> ""842_afterMinting"";
}
"
0x6560a9b6436e129cf835ab9da96201207facd4f8.sol,KratosToken,"contract KratosToken is StandardBurnableToken, PausableToken { string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public timelockTimestamp = 0; mapping(address => uint256) public timelock; constructor(uint256 _totalSupply) public { totalSupply_ = _totalSupply; balances[msg.sender] = _totalSupply; }",0,"subgraph cluster_1146_KratosToken {
label=""KratosToken"";
""1146_addTimelock"" [label=""addTimelock""];
""1146_decreaseApproval"" [label=""decreaseApproval""];
""1146_increaseApproval"" [label=""increaseApproval""];
""1146__addTimelock"" [label=""_addTimelock""];
""1146_enableTimelock"" [label=""enableTimelock""];
""1146_transferFrom"" [label=""transferFrom""];
""1146_disableTimelock"" [label=""disableTimelock""];
""1146_constructor"" [label=""constructor""];
""1146_approve"" [label=""approve""];
""1146_transfer"" [label=""transfer""];
""1146_removeTimelock"" [label=""removeTimelock""];
""1146_approve"" -> ""1146_approve"";
""1146_increaseApproval"" -> ""1146_whenNotTimelocked"";
""1146_enableTimelock"" -> ""1146_onlyOwner"";
""1146_disableTimelock"" -> ""1146_onlyOwner"";
""1146_addTimelock"" -> ""1146_onlyOwner"";
""1146_addTimelock"" -> ""1146__addTimelock"";
""1146_transferFrom"" -> ""1146__addTimelock"";
""1146_transfer"" -> ""1146__addTimelock"";
""1146_approve"" -> ""1146_whenNotTimelocked"";
""1146_transferFrom"" -> ""1146_whenNotTimelocked"";
""1146_increaseApproval"" -> ""1146_increaseApproval"";
""1146_transfer"" -> ""1146_whenNotTimelocked"";
""1146_removeTimelock"" -> ""1146_whenTimelocked"";
""1146_removeTimelock"" -> ""1146_onlyOwner"";
""1146_decreaseApproval"" -> ""1146_whenNotTimelocked"";
""1146__addTimelock"" -> ""1146_whenNotTimelocked"";
""1146_decreaseApproval"" -> ""1146_decreaseApproval"";
""1146_transfer"" -> ""1146_transfer"";
""1146_transferFrom"" -> ""1146_transferFrom"";
}
"
0x1b9743f556d65e757c4c650b4555baf354cb8bd3.sol,MiniMeToken,"contract MiniMeToken is Controlled, Ownable { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; }",0,"subgraph cluster_1077_MiniMeToken {
label=""MiniMeToken"";
""1077_createCloneToken"" [label=""createCloneToken""];
""1077_totalSupplyAt"" [label=""totalSupplyAt""];
""1077_updateValueAtNow"" [label=""updateValueAtNow""];
""1077_balanceOf"" [label=""balanceOf""];
""1077_fallback"" [label=""fallback""];
""1077_destroyTokens"" [label=""destroyTokens""];
""1077_min"" [label=""min""];
""1077_doTransfer"" [label=""doTransfer""];
""1077_enableTransfers"" [label=""enableTransfers""];
""1077_transfer"" [label=""transfer""];
""1077_approveAndCall"" [label=""approveAndCall""];
""1077_isContract"" [label=""isContract""];
""1077_generateTokens"" [label=""generateTokens""];
""1077_totalSupply"" [label=""totalSupply""];
""1077_transferFrom"" [label=""transferFrom""];
""1077_allowance"" [label=""allowance""];
""1077_MiniMeToken"" [label=""MiniMeToken""];
""1077_getValueAt"" [label=""getValueAt""];
""1077_approve"" [label=""approve""];
""1077_balanceOfAt"" [label=""balanceOfAt""];
""1077_enableTransfers"" -> ""1077_onlyController"";
""1077_balanceOfAt"" -> ""1077_min"";
""1077_destroyTokens"" -> ""1077_getValueAt"";
""1077_generateTokens"" -> ""1077_balanceOf"";
""1077_approve"" -> ""1077_isContract"";
""1077_approveAndCall"" -> ""1077_approve"";
""1077_doTransfer"" -> ""1077_updateValueAtNow"";
""1077_balanceOf"" -> ""1077_balanceOfAt"";
""1077_generateTokens"" -> ""1077_updateValueAtNow"";
""1077_generateTokens"" -> ""1077_getValueAt"";
""1077_balanceOfAt"" -> ""1077_getValueAt"";
""1077_destroyTokens"" -> ""1077_updateValueAtNow"";
""1077_totalSupplyAt"" -> ""1077_getValueAt"";
""1077_destroyTokens"" -> ""1077_onlyController"";
""1077_fallback"" -> ""1077_isContract"";
""1077_doTransfer"" -> ""1077_balanceOfAt"";
""1077_doTransfer"" -> ""1077_isContract"";
""1077_transfer"" -> ""1077_doTransfer"";
""1077_generateTokens"" -> ""1077_onlyController"";
""1077_totalSupplyAt"" -> ""1077_min"";
""1077_destroyTokens"" -> ""1077_balanceOf"";
""1077_totalSupply"" -> ""1077_totalSupplyAt"";
""1077_transferFrom"" -> ""1077_doTransfer"";
}
"
0xcd6cb1b25006603382b9e9a832b8686ae240373b.sol,EtheramaCore,"contract EtheramaCore is EtheramaGasPriceLimit { uint256 constant public MAGNITUDE = 2**64; uint256 constant public MIN_TOKEN_DEAL_VAL = 0.1 ether; uint256 constant public MAX_TOKEN_DEAL_VAL = 1000000 ether; uint256 constant public MIN_ETH_DEAL_VAL = 0.001 ether; uint256 constant public MAX_ETH_DEAL_VAL = 200000 ether; uint256 public _bigPromoPercent = 5 ether; uint256 public _quickPromoPercent = 5 ether; uint256 public _devRewardPercent = 15 ether; uint256 public _tokenOwnerRewardPercent = 30 ether; uint256 public _shareRewardPercent = 25 ether; uint256 public _refBonusPercent = 20 ether; uint128 public _bigPromoBlockInterval = 9999; uint128 public _quickPromoBlockInterval = 100; uint256 public _promoMinPurchaseEth = 1 ether; uint256 public _minRefEthPurchase = 0.5 ether; uint256 public _totalIncomeFeePercent = 100 ether; uint256 public _currentBigPromoBonus; uint256 public _currentQuickPromoBonus; uint256 public _devReward; uint256 public _initBlockNum; mapping(address => bool) private _controllerContracts; mapping(uint256 => address) private _controllerIndexer; uint256 private _controllerContractCount; mapping(address => mapping(address => uint256)) private _userTokenLocalBalances; mapping(address => mapping(address => uint256)) private _rewardPayouts; mapping(address => mapping(address => uint256)) private _refBalances; mapping(address => mapping(address => uint256)) private _promoQuickBonuses; mapping(address => mapping(address => uint256)) private _promoBigBonuses; mapping(address => mapping(address => uint256)) private _userEthVolumeSaldos; mapping(address => uint256) private _bonusesPerShare; mapping(address => uint256) private _buyCounts; mapping(address => uint256) private _sellCounts; mapping(address => uint256) private _totalVolumeEth; mapping(address => uint256) private _totalVolumeToken; event onWithdrawUserBonus(address indexed userAddress, uint256 ethWithdrawn); modifier onlyController() { require(_controllerContracts[msg.sender]); _; }",0,"subgraph cluster_2025_EtheramaCore {
label=""EtheramaCore"";
""2025_getBonusPerShare"" [label=""getBonusPerShare""];
""2025__promoMinPurchaseEth"" [label=""_promoMinPurchaseEth""];
""2025__currentQuickPromoBonus"" [label=""_currentQuickPromoBonus""];
""2025_getSellCount"" [label=""getSellCount""];
""2025_getCurrentUserPromoBonus"" [label=""getCurrentUserPromoBonus""];
""2025_MIN_ETH_DEAL_VAL"" [label=""MIN_ETH_DEAL_VAL""];
""2025__totalIncomeFeePercent"" [label=""_totalIncomeFeePercent""];
""2025_getTotalSellCount"" [label=""getTotalSellCount""];
""2025_addUserTokenLocalBalance"" [label=""addUserTokenLocalBalance""];
""2025__bigPromoPercent"" [label=""_bigPromoPercent""];
""2025_setPromoMinPurchaseEth"" [label=""setPromoMinPurchaseEth""];
""2025_getCurrentUserReward"" [label=""getCurrentUserReward""];
""2025_withdrawUserReward"" [label=""withdrawUserReward""];
""2025_addBigPromoBonus"" [label=""addBigPromoBonus""];
""2025_changeControllerContract"" [label=""changeControllerContract""];
""2025__quickPromoBlockInterval"" [label=""_quickPromoBlockInterval""];
""2025_getUserTotalReward"" [label=""getUserTotalReward""];
""2025__quickPromoPercent"" [label=""_quickPromoPercent""];
""2025_setTotalIncomeFeePercent"" [label=""setTotalIncomeFeePercent""];
""2025_getBuyCount"" [label=""getBuyCount""];
""2025_addQuickPromoBonus"" [label=""addQuickPromoBonus""];
""2025_addUserRewardPayouts"" [label=""addUserRewardPayouts""];
""2025_setMinRefEthPurchase"" [label=""setMinRefEthPurchase""];
""2025_getUserBigPromoBonus"" [label=""getUserBigPromoBonus""];
""2025_setRewardPercentages"" [label=""setRewardPercentages""];
""2025_MIN_TOKEN_DEAL_VAL"" [label=""MIN_TOKEN_DEAL_VAL""];
""2025_trackBuy"" [label=""trackBuy""];
""2025_addControllerContract"" [label=""addControllerContract""];
""2025_trackSell"" [label=""trackSell""];
""2025_MAX_ETH_DEAL_VAL"" [label=""MAX_ETH_DEAL_VAL""];
""2025_setQuickPromoInterval"" [label=""setQuickPromoInterval""];
""2025_getCurrentUserShareBonus"" [label=""getCurrentUserShareBonus""];
""2025__devRewardPercent"" [label=""_devRewardPercent""];
""2025_addDevReward"" [label=""addDevReward""];
""2025_getUserReward"" [label=""getUserReward""];
""2025_convertRealTo256"" [label=""convertRealTo256""];
""2025_getBigPromoRemainingBlocks"" [label=""getBigPromoRemainingBlocks""];
""2025_calcPercent"" [label=""calcPercent""];
""2025__tokenOwnerRewardPercent"" [label=""_tokenOwnerRewardPercent""];
""2025__refBonusPercent"" [label=""_refBonusPercent""];
""2025_addBonusPerShare"" [label=""addBonusPerShare""];
""2025_MAX_GAS_PRICE"" [label=""MAX_GAS_PRICE""];
""2025_getCurrentUserRefBonus"" [label=""getCurrentUserRefBonus""];
""2025_constructor"" [label=""constructor""];
""2025_addUserRefBalance"" [label=""addUserRefBalance""];
""2025__bigPromoBlockInterval"" [label=""_bigPromoBlockInterval""];
""2025_MAGNITUDE"" [label=""MAGNITUDE""];
""2025_getTotalCollectedPromoBonus"" [label=""getTotalCollectedPromoBonus""];
""2025_withdrawRemainingEthAfterAll"" [label=""withdrawRemainingEthAfterAll""];
""2025_getUserEthVolumeSaldo"" [label=""getUserEthVolumeSaldo""];
""2025_resetUserPromoBonus"" [label=""resetUserPromoBonus""];
""2025_setBigPromoInterval"" [label=""setBigPromoInterval""];
""2025_getTotalVolumeToken"" [label=""getTotalVolumeToken""];
""2025_convert256ToReal"" [label=""convert256ToReal""];
""2025_getRewardAndPrepareWithdraw"" [label=""getRewardAndPrepareWithdraw""];
""2025_getUserRefBalance"" [label=""getUserRefBalance""];
""2025_resetUserRefBalance"" [label=""resetUserRefBalance""];
""2025_getTotalVolumeEth"" [label=""getTotalVolumeEth""];
""2025__minRefEthPurchase"" [label=""_minRefEthPurchase""];
""2025_getInitBlockNum"" [label=""getInitBlockNum""];
""2025_getBlockNumSinceInit"" [label=""getBlockNumSinceInit""];
""2025_getTotalBuyCount"" [label=""getTotalBuyCount""];
""2025__shareRewardPercent"" [label=""_shareRewardPercent""];
""2025_getUserTotalEthVolumeSaldo"" [label=""getUserTotalEthVolumeSaldo""];
""2025_trackTotalVolume"" [label=""trackTotalVolume""];
""2025_getTotalBonusPerShare"" [label=""getTotalBonusPerShare""];
""2025_removeControllerContract"" [label=""removeControllerContract""];
""2025_getUserQuickPromoBonus"" [label=""getUserQuickPromoBonus""];
""2025_getUserTotalPromoBonus"" [label=""getUserTotalPromoBonus""];
""2025_subUserTokenLocalBalance"" [label=""subUserTokenLocalBalance""];
""2025_getUserTokenLocalBalance"" [label=""getUserTokenLocalBalance""];
""2025_getUserRewardPayouts"" [label=""getUserRewardPayouts""];
""2025_getQuickPromoRemainingBlocks"" [label=""getQuickPromoRemainingBlocks""];
""2025_isRefAvailable"" [label=""isRefAvailable""];
""2025_withdrawDevReward"" [label=""withdrawDevReward""];
""2025_getCurrentUserTotalReward"" [label=""getCurrentUserTotalReward""];
""2025_MAX_TOKEN_DEAL_VAL"" [label=""MAX_TOKEN_DEAL_VAL""];
""2025_payoutQuickBonus"" [label=""payoutQuickBonus""];
""2025__currentBigPromoBonus"" [label=""_currentBigPromoBonus""];
""2025_payoutBigBonus"" [label=""payoutBigBonus""];
""2025_getCurrentUserShareBonus"" -> ""2025_getUserTotalReward"";
""2025_addUserRewardPayouts"" -> ""2025_addUserRewardPayouts"";
""2025_withdrawDevReward"" -> ""2025_onlyAdministrator"";
""2025_isRefAvailable"" -> ""2025_getUserTotalEthVolumeSaldo"";
""2025_setRewardPercentages"" -> ""2025_onlyAdministrator"";
""2025_setTotalIncomeFeePercent"" -> ""2025_onlyController"";
""2025_addControllerContract"" -> ""2025_onlyAdministrator"";
""2025_getCurrentUserTotalReward"" -> ""2025_getUserTotalReward"";
""2025_resetUserRefBalance"" -> ""2025_onlyController"";
""2025_resetUserPromoBonus"" -> ""2025_resetUserPromoBonus"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_addUserRewardPayouts"";
""2025_resetUserPromoBonus"" -> ""2025_onlyController"";
""2025_addUserRewardPayouts"" -> ""2025_onlyController"";
""2025_getCurrentUserRefBonus"" -> ""2025_getUserTotalReward"";
""2025_withdrawUserReward"" -> ""2025_getRewardAndPrepareWithdraw"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserTotalPromoBonus"";
""2025_setQuickPromoInterval"" -> ""2025_onlyAdministrator"";
""2025_getCurrentUserReward"" -> ""2025_getUserTotalReward"";
""2025_constructor"" -> ""2025_constructor"";
""2025_addBonusPerShare"" -> ""2025_onlyController"";
""2025_addDevReward"" -> ""2025_onlyController"";
""2025_trackSell"" -> ""2025_trackTotalVolume"";
""2025_getBigPromoRemainingBlocks"" -> ""2025_getBlockNumSinceInit"";
""2025_trackBuy"" -> ""2025_onlyController"";
""2025_withdrawRemainingEthAfterAll"" -> ""2025_onlyAdministrator"";
""2025_resetUserRefBalance"" -> ""2025_resetUserRefBalance"";
""2025_addQuickPromoBonus"" -> ""2025_onlyController"";
""2025_setMinRefEthPurchase"" -> ""2025_onlyAdministrator"";
""2025_changeControllerContract"" -> ""2025_onlyAdministrator"";
""2025_subUserTokenLocalBalance"" -> ""2025_onlyController"";
""2025_getBlockNumSinceInit"" -> ""2025_getInitBlockNum"";
""2025_setBigPromoInterval"" -> ""2025_onlyAdministrator"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserRefBalance"";
""2025_payoutQuickBonus"" -> ""2025_onlyController"";
""2025_payoutBigBonus"" -> ""2025_onlyController"";
""2025_trackBuy"" -> ""2025_trackTotalVolume"";
""2025_addUserTokenLocalBalance"" -> ""2025_onlyController"";
""2025_addUserRefBalance"" -> ""2025_onlyController"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_resetUserPromoBonus"";
""2025_getUserTotalReward"" -> ""2025_getUserReward"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserReward"";
""2025_trackSell"" -> ""2025_onlyController"";
""2025_getQuickPromoRemainingBlocks"" -> ""2025_getBlockNumSinceInit"";
""2025_addBigPromoBonus"" -> ""2025_onlyController"";
""2025_removeControllerContract"" -> ""2025_onlyAdministrator"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_resetUserRefBalance"";
""2025_getCurrentUserPromoBonus"" -> ""2025_getUserTotalReward"";
""2025_isRefAvailable"" -> ""2025_isRefAvailable"";
""2025_setPromoMinPurchaseEth"" -> ""2025_onlyAdministrator"";
}
"
0xeecdfead2d05f0708450db0ddd65cd513a9b1eea.sol,DiscoverToken,"contract DiscoverToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000; balances[0x096BB29EcE37BF54a2EbDaFd8f7B981bc9e6d817] = _totalSupply; emit Transfer(address(0), 0x096BB29EcE37BF54a2EbDaFd8f7B981bc9e6d817, _totalSupply); }",0,"subgraph cluster_543_DiscoverToken {
label=""DiscoverToken"";
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_constructor"" [label=""constructor""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x57ae3a491f4555e1eed37338d1b8b5222935f28a.sol,rICO,"contract rICO is Ownable, ReentrancyGuard { using SafeMath for uint256; RicoToken public token; address tokenContractAddress; PreSale public preSale; uint256 public startTime; uint256 public endCrowdSaleTime; uint256 public endRefundableTime; address public wallet; uint256 public rate; uint256 public minimumInvest; uint256 public softCap; uint256 public hardCap; mapping(address => uint) public balances; mapping(address => uint) public balancesInToken; uint256 public weiRaised; uint256 public restWei; uint256 public reservedWei; bool public firstStageRefund = false; bool public secondStageRefund = false; bool public finalStageRefund = false; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function rICO( address _wallet, address _token, address _preSale) public { require(_token != address(0)); startTime = 1525081800; endCrowdSaleTime = startTime + 60 * 1 minutes; endRefundableTime = endCrowdSaleTime + 130 * 1 minutes; wallet = _wallet; token = RicoToken(_token); tokenContractAddress = _token; preSale = PreSale(_preSale); minimumInvest = 1000000000000; rate = 1000; softCap = 1500 * 0.000001 ether; hardCap = 15000 * 0.000001 ether; }",0,"subgraph cluster_2130_rICO {
label=""rICO"";
""2130_withdrawal"" [label=""withdrawal""];
""2130_refundPart"" [label=""refundPart""];
""2130_finishCrowdSale"" [label=""finishCrowdSale""];
""2130_hasEnded"" [label=""hasEnded""];
""2130_rICO"" [label=""rICO""];
""2130_changeTokenOwner"" [label=""changeTokenOwner""];
""2130_refund"" [label=""refund""];
""2130_buyTokens"" [label=""buyTokens""];
""2130_forwardFunds"" [label=""forwardFunds""];
""2130_refundAll"" [label=""refundAll""];
""2130_getBonusPercent"" [label=""getBonusPercent""];
""2130_updateReservedWei"" [label=""updateReservedWei""];
""2130_getRealValueToReturn"" [label=""getRealValueToReturn""];
""2130_getTokenAmount"" [label=""getTokenAmount""];
""2130_fallback"" [label=""fallback""];
""2130_withdrawal"" -> ""2130_forwardFunds"";
""2130_withdrawal"" -> ""2130_updateReservedWei"";
""2130_fallback"" -> ""2130_buyTokens"";
""2130_withdrawal"" -> ""2130_onlyOwner"";
""2130_finishCrowdSale"" -> ""2130_forwardFunds"";
""2130_refundPart"" -> ""2130_getRealValueToReturn"";
""2130_buyTokens"" -> ""2130_saleIsOn"";
""2130_refund"" -> ""2130_refundPart"";
""2130_buyTokens"" -> ""2130_nonReentrant"";
""2130_changeTokenOwner"" -> ""2130_onlyOwner"";
""2130_buyTokens"" -> ""2130_isUnderHardCap"";
""2130_finishCrowdSale"" -> ""2130_updateReservedWei"";
""2130_refund"" -> ""2130_refundAll"";
""2130_finishCrowdSale"" -> ""2130_onlyOwner"";
""2130_buyTokens"" -> ""2130_getTokenAmount"";
""2130_refundPart"" -> ""2130_updateReservedWei"";
""2130_buyTokens"" -> ""2130_getBonusPercent"";
}
"
0xf1afddbed214dba82cb98d46ad0a96e643f7f6f6.sol,StarbaseCrowdsale,"contract StarbaseCrowdsale is Ownable { event CrowdsaleEnded(uint256 endedAt); event StarbasePurchasedWithEth(address purchaser, uint256 amount, uint256 rawAmount, uint256 cnyEthRate, uint256 bonusTokensPercentage); event StarbasePurchasedOffChain(address purchaser, uint256 amount, uint256 rawAmount, uint256 cnyBtcRate, uint256 bonusTokensPercentage, string data); event CnyEthRateUpdated(uint256 cnyEthRate); event CnyBtcRateUpdated(uint256 cnyBtcRate); event QualifiedPartnerAddress(address qualifiedPartner); AbstractStarbaseToken public starbaseToken; StarbaseEarlyPurchaseAmendment public starbaseEpAmendment; uint256 constant public crowdsaleTokenAmount = 125000000e18; uint256 constant public earlyPurchaseTokenAmount = 50000000e18; uint256 constant public MIN_INVESTMENT = 1; uint256 constant public MAX_CAP = 67000000; string public constant PURCHASE_AMOUNT_UNIT = ; struct CrowdsalePurchase { address purchaser; uint256 amount; uint256 rawAmount; uint256 purchasedAt; string data; uint256 bonus; }",0,"subgraph cluster_2704_StarbaseCrowdsale {
label=""StarbaseCrowdsale"";
""2704_startCrowdsale"" [label=""startCrowdsale""];
""2704_recordOffchainPurchase"" [label=""recordOffchainPurchase""];
""2704_totalAmountOfCrowdsalePurchasesWithoutBonus"" [label=""totalAmountOfCrowdsalePurchasesWithoutBonus""];
""2704_getBonusTier"" [label=""getBonusTier""];
""2704_totalAmountOfCrowdsalePurchases"" [label=""totalAmountOfCrowdsalePurchases""];
""2704_totalAmountOfEarlyPurchases"" [label=""totalAmountOfEarlyPurchases""];
""2704_endCrowdsale"" [label=""endCrowdsale""];
""2704_ownerStartsCrowdsale"" [label=""ownerStartsCrowdsale""];
""2704_withdrawForCompany"" [label=""withdrawForCompany""];
""2704_withdrawPurchasedTokens"" [label=""withdrawPurchasedTokens""];
""2704_setup"" [label=""setup""];
""2704_updateCnyBtcRate"" [label=""updateCnyBtcRate""];
""2704_setQualifiedPartner"" [label=""setQualifiedPartner""];
""2704_unlistQualifiedPartner"" [label=""unlistQualifiedPartner""];
""2704_redirectToPurchase"" [label=""redirectToPurchase""];
""2704_numOfPurchases"" [label=""numOfPurchases""];
""2704_StarbaseCrowdsale"" [label=""StarbaseCrowdsale""];
""2704_updateCnyEthRate"" [label=""updateCnyEthRate""];
""2704_totalRaisedAmountInCny"" [label=""totalRaisedAmountInCny""];
""2704_purchaseWithEth"" [label=""purchaseWithEth""];
""2704_fallback"" [label=""fallback""];
""2704_recordPurchase"" [label=""recordPurchase""];
""2704_purchaseAsQualifiedPartner"" [label=""purchaseAsQualifiedPartner""];
""2704_sendQualifiedPartnerCommissionFee"" [label=""sendQualifiedPartnerCommissionFee""];
""2704_isEnded"" [label=""isEnded""];
""2704_loadEarlyPurchases"" [label=""loadEarlyPurchases""];
""2704_updateQualifiedPartnerCapAmount"" [label=""updateQualifiedPartnerCapAmount""];
""2704_endCrowdsale"" -> ""2704_totalRaisedAmountInCny"";
""2704_loadEarlyPurchases"" -> ""2704_onlyOwner"";
""2704_withdrawPurchasedTokens"" -> ""2704_whenEnded"";
""2704_recordOffchainPurchase"" -> ""2704_recordPurchase"";
""2704_purchaseWithEth"" -> ""2704_whenNotEnded"";
""2704_updateCnyBtcRate"" -> ""2704_onlyFundraiser"";
""2704_redirectToPurchase"" -> ""2704_purchaseWithEth"";
""2704_withdrawForCompany"" -> ""2704_onlyFundraiser"";
""2704_endCrowdsale"" -> ""2704_onlyOwner"";
""2704_unlistQualifiedPartner"" -> ""2704_onlyOwner"";
""2704_updateQualifiedPartnerCapAmount"" -> ""2704_onlyOwner"";
""2704_purchaseAsQualifiedPartner"" -> ""2704_recordPurchase"";
""2704_setup"" -> ""2704_onlyOwner"";
""2704_recordOffchainPurchase"" -> ""2704_onlyFundraiser"";
""2704_recordOffchainPurchase"" -> ""2704_getBonusTier"";
""2704_endCrowdsale"" -> ""2704_totalAmountOfEarlyPurchases"";
""2704_purchaseWithEth"" -> ""2704_getBonusTier"";
""2704_recordOffchainPurchase"" -> ""2704_rateIsSet"";
""2704_purchaseAsQualifiedPartner"" -> ""2704_sendQualifiedPartnerCommissionFee"";
""2704_redirectToPurchase"" -> ""2704_purchaseAsQualifiedPartner"";
""2704_setQualifiedPartner"" -> ""2704_onlyOwner"";
""2704_withdrawForCompany"" -> ""2704_hasBalance"";
""2704_purchaseWithEth"" -> ""2704_rateIsSet"";
""2704_recordPurchase"" -> ""2704_totalAmountOfCrowdsalePurchasesWithoutBonus"";
""2704_recordOffchainPurchase"" -> ""2704_whenNotEnded"";
""2704_recordOffchainPurchase"" -> ""2704_startCrowdsale"";
""2704_purchaseWithEth"" -> ""2704_recordPurchase"";
""2704_setup"" -> ""2704_totalAmountOfEarlyPurchases"";
""2704_totalRaisedAmountInCny"" -> ""2704_totalAmountOfEarlyPurchases"";
""2704_updateCnyEthRate"" -> ""2704_onlyFundraiser"";
""2704_fallback"" -> ""2704_redirectToPurchase"";
""2704_totalRaisedAmountInCny"" -> ""2704_totalAmountOfCrowdsalePurchases"";
""2704_ownerStartsCrowdsale"" -> ""2704_startCrowdsale"";
""2704_purchaseAsQualifiedPartner"" -> ""2704_rateIsSet"";
""2704_purchaseWithEth"" -> ""2704_startCrowdsale"";
""2704_ownerStartsCrowdsale"" -> ""2704_onlyOwner"";
""2704_purchaseWithEth"" -> ""2704_minInvestment"";
}
"
0x3fd50278a2257623cf718d4f2997921a5d34c81e.sol,CXCoin,"contract CXCoin is Ownable, StandardToken { string public name; string public symbol; uint public decimals; uint public totalSupply; function CXCoin() public { totalSupply = 100 * (10**6) * (10**6); balances[msg.sender] = totalSupply; name = ; symbol = ; decimals = 6; }",0,"subgraph cluster_565_CXCoin {
label=""CXCoin"";
""565_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""565_fallback"" [label=""fallback""];
""565_CXCoin"" [label=""CXCoin""];
""565_mintToken"" [label=""mintToken""];
""565_freezeAccount"" [label=""freezeAccount""];
""565_transferOwnership"" [label=""transferOwnership""];
""565_transferOwnership"" -> ""565_safeAdd"";
""565_mintToken"" -> ""565_safeAdd"";
""565_freezeAccount"" -> ""565_onlyOwner"";
""565_transferOwnership"" -> ""565_onlyOwner"";
""565_transferOwnership"" -> ""565_transferOwnership"";
""565_mintToken"" -> ""565_onlyOwner"";
""565_transferAnyERC20Token"" -> ""565_onlyOwner"";
}
"
0xcfc5199a76182368b6a5a3ae78204e29d1ed4a6d.sol,GXX,"contract GXX is ERC20Interface, OOOOOO { string public symbol; string public name; uint8 public decimals; uint256 private _totalSupply; mapping(address => uint256) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 2000000000000000000; balances[msg.sender] = _totalSupply; emit Transfer(address(0), msg.sender, _totalSupply); }",0,"subgraph cluster_646_GXX {
label=""GXX"";
""646_approve"" [label=""approve""];
""646_mul"" [label=""mul""];
""646_add"" [label=""add""];
""646_WithdrawEth"" [label=""WithdrawEth""];
""646_TransferERC20Token"" [label=""TransferERC20Token""];
""646_allowance"" [label=""allowance""];
""646_fallback"" [label=""fallback""];
""646_transferFrom"" [label=""transferFrom""];
""646_totalSupply"" [label=""totalSupply""];
""646_balanceOf"" [label=""balanceOf""];
""646_sub"" [label=""sub""];
""646_div"" [label=""div""];
""646_transfer"" [label=""transfer""];
""646_burn"" [label=""burn""];
""646_constructor"" [label=""constructor""];
""646_transferFrom"" -> ""646_add"";
""646_transfer"" -> ""646_sub"";
""646_transferFrom"" -> ""646_sub"";
""646_transfer"" -> ""646_add"";
""646_WithdrawEth"" -> ""646_restricted"";
""646_burn"" -> ""646_sub"";
""646_TransferERC20Token"" -> ""646_restricted"";
}
"
0x561eac93c92360949ab1f1403323e6db345cbf31.sol,BANK_SAFE,contract BANK_SAFE { mapping (address=>uint256) public balances; uint public MinSum; LogFile Log; bool intitalized; function SetMinSum(uint _val) public { if(intitalized)throw; MinSum = _val; },0,"subgraph cluster_123_BANK_SAFE {
label=""BANK_SAFE"";
""123_SetMinSum"" [label=""SetMinSum""];
""123_Collect"" [label=""Collect""];
""123_SetLogFile"" [label=""SetLogFile""];
""123_fallback"" [label=""fallback""];
""123_Deposit"" [label=""Deposit""];
""123_Initialized"" [label=""Initialized""];
""123_fallback"" -> ""123_Deposit"";
}
"
0xcf377dfd654676940e2b5a87cf2673def25aeaed.sol,GreenEthereusPromo,"contract GreenEthereusPromo { string public constant name = ; string public constant symbol = ; event Transfer(address indexed from, address indexed to, uint256 value); address owner; uint public index; constructor() public { owner = msg.sender; }",0,"subgraph cluster_149_GreenEthereusPromo {
label=""GreenEthereusPromo"";
""149_fallback"" [label=""fallback""];
""149_resetIndex"" [label=""resetIndex""];
""149_withdrawBalance"" [label=""withdrawBalance""];
""149_constructor"" [label=""constructor""];
""149_massSending"" [label=""massSending""];
""149_transferOwnership"" [label=""transferOwnership""];
""149_transferOwnership"" -> ""149_onlyOwner"";
""149_resetIndex"" -> ""149_onlyOwner"";
""149_withdrawBalance"" -> ""149_onlyOwner"";
""149_massSending"" -> ""149_onlyOwner"";
}
"
0x850c430378909ba9ff2494d0a4df17928e99f8f4.sol,BdpDataStorage,contract BdpDataStorage is BdpBase { using SafeMath for uint256; struct Region { uint256 x1; uint256 y1; uint256 x2; uint256 y2; uint256 currentImageId; uint256 nextImageId; uint8[128] url; uint256 currentPixelPrice; uint256 blockUpdatedAt; uint256 updatedAt; uint256 purchasedAt; uint256 purchasedPixelPrice; },0,"subgraph cluster_822_BdpDataStorage {
label=""BdpDataStorage"";
""822_setRegionNextImageId"" [label=""setRegionNextImageId""];
""822_setRegionPurchasedPixelPrice"" [label=""setRegionPurchasedPixelPrice""];
""822_setRegionCurrentImageId"" [label=""setRegionCurrentImageId""];
""822_setRegionBlockUpdatedAt"" [label=""setRegionBlockUpdatedAt""];
""822_getRegionNextImageId"" [label=""getRegionNextImageId""];
""822_getRegionCurrentImageId"" [label=""getRegionCurrentImageId""];
""822_BdpDataStorage"" [label=""BdpDataStorage""];
""822_getRegionCoordinates"" [label=""getRegionCoordinates""];
""822_deleteRegionData"" [label=""deleteRegionData""];
""822_getRegionCurrentPixelPrice"" [label=""getRegionCurrentPixelPrice""];
""822_setRegionUrl"" [label=""setRegionUrl""];
""822_setRegionCoordinates"" [label=""setRegionCoordinates""];
""822_getNextRegionId"" [label=""getNextRegionId""];
""822_getRegionUpdatedAt"" [label=""getRegionUpdatedAt""];
""822_getRegionBlockUpdatedAt"" [label=""getRegionBlockUpdatedAt""];
""822_setRegionCurrentPixelPrice"" [label=""setRegionCurrentPixelPrice""];
""822_getRegionUrl"" [label=""getRegionUrl""];
""822_getRegionPurchasePixelPrice"" [label=""getRegionPurchasePixelPrice""];
""822_getLastRegionId"" [label=""getLastRegionId""];
""822_getRegionUpdatedAtPurchasedAt"" [label=""getRegionUpdatedAtPurchasedAt""];
""822_setRegionPurchasedAt"" [label=""setRegionPurchasedAt""];
""822_getRegionPurchasedAt"" [label=""getRegionPurchasedAt""];
""822_setRegionUpdatedAt"" [label=""setRegionUpdatedAt""];
""822_getNextRegionId"" -> ""822_storageAccessControl"";
""822_setRegionCurrentImageId"" -> ""822_storageAccessControl"";
""822_setRegionCoordinates"" -> ""822_storageAccessControl"";
""822_setRegionPurchasedPixelPrice"" -> ""822_storageAccessControl"";
""822_setRegionCurrentPixelPrice"" -> ""822_storageAccessControl"";
""822_deleteRegionData"" -> ""822_storageAccessControl"";
""822_setRegionPurchasedAt"" -> ""822_storageAccessControl"";
""822_setRegionUrl"" -> ""822_storageAccessControl"";
""822_setRegionNextImageId"" -> ""822_storageAccessControl"";
""822_setRegionUpdatedAt"" -> ""822_storageAccessControl"";
""822_setRegionBlockUpdatedAt"" -> ""822_storageAccessControl"";
}
"
0x89ee867da0daf5260df8d7530348337faeb968b3.sol,owned,contract owned { address public owner; address public candidate; function owned() payable internal { owner = msg.sender; },0,"subgraph cluster_64_owned {
label=""owned"";
""64_owned"" [label=""owned""];
""64_confirmOwner"" [label=""confirmOwner""];
""64_changeOwner"" [label=""changeOwner""];
""64_changeOwner"" -> ""64_onlyOwner"";
}
"
0x5b1b5fea1b99d83ad479df0c222f0492385381dd.sol,Owned,contract Owned { address public owner; address public nominatedOwner; function Owned(address _owner) public { owner = _owner; },0,"subgraph cluster_79_Owned {
label=""Owned"";
""79_acceptOwnership"" [label=""acceptOwnership""];
""79_Owned"" [label=""Owned""];
""79_nominateOwner"" [label=""nominateOwner""];
""79_nominateOwner"" -> ""79_onlyOwner"";
}
"
0x028ff933bd86bd4d699b1643477f858626482d35.sol,LUCKER,contract LUCKER is Ownable{ tokenTransfer public bebTokenTransfer; uint8 decimals = 18; uint256 opentime=now+3600; uint256 opensome; uint256 _opensome; uint256 BEBMAX; uint256 BEBtime; uint256 Numberofairdrops; address ownersto; struct luckuser{ uint256 _time; uint256 _eth; uint256 _beb; uint256 _bz; uint256 _romd; uint256 Bond; uint256 sumeth; uint256 sumbeb; },0,"subgraph cluster_843_LUCKER {
label=""LUCKER"";
""843_setAirdrop"" [label=""setAirdrop""];
""843_LUCKER"" [label=""LUCKER""];
""843_querBalance"" [label=""querBalance""];
""843_present"" [label=""present""];
""843_BEBwithdrawal"" [label=""BEBwithdrawal""];
""843_getLUCK"" [label=""getLUCK""];
""843_setLUCK"" [label=""setLUCK""];
""843_getTokenBalanceUser"" [label=""getTokenBalanceUser""];
""843_random"" [label=""random""];
""843_ETHwithdrawal"" [label=""ETHwithdrawal""];
""843_fallback"" [label=""fallback""];
""843_AirdropAuthorization"" [label=""AirdropAuthorization""];
""843_gettime"" [label=""gettime""];
""843_eth"" [label=""eth""];
""843_getTokenBalance"" [label=""getTokenBalance""];
""843_ETHwithdrawal"" -> ""843_onlyOwner"";
""843_setAirdrop"" -> ""843_onlyOwner"";
""843_BEBwithdrawal"" -> ""843_onlyOwner"";
""843_present"" -> ""843_random"";
""843_setLUCK"" -> ""843_onlyOwner"";
}
"
0x1df6eadc2e1e9f4cbb2d94369210d8f1b790ee19.sol,PinnacleToken,contract PinnacleToken { uint private constant _totalSupply = 100000000000000000000000000; using SafeMath for uint256; string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; function PinnacleToken() { balances[msg.sender] = _totalSupply; },0,"subgraph cluster_321_PinnacleToken {
label=""PinnacleToken"";
""321_transferFrom"" [label=""transferFrom""];
""321_totalSupply"" [label=""totalSupply""];
""321_transfer"" [label=""transfer""];
""321_balanceOf"" [label=""balanceOf""];
""321_PinnacleToken"" [label=""PinnacleToken""];
""321_allowance"" [label=""allowance""];
""321_approve"" [label=""approve""];
}
"
0x28cf843d0de2e1fb05636e76569d5a50caf3b817.sol,Bostec,"contract Bostec is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 1500000000e18; uint256 public totalDistributed = 375000000e18; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 15000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_Bostec {
label=""Bostec"";
""944_finishDistribution"" [label=""finishDistribution""];
""944_Bostec"" [label=""Bostec""];
""944_withdraw"" [label=""withdraw""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_transfer"" [label=""transfer""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_getTokens"" [label=""getTokens""];
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_balanceOf"" [label=""balanceOf""];
""944_distr"" [label=""distr""];
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_allowance"" [label=""allowance""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_fallback"" [label=""fallback""];
""944_burn"" [label=""burn""];
""944_transferFrom"" [label=""transferFrom""];
""944_approve"" [label=""approve""];
""944_transferOwnership"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
""944_Bostec"" -> ""944_distr"";
""944_finishDistribution"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_distr"" -> ""944_canDistr"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_getTokens"" -> ""944_distr"";
""944_burn"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_fallback"" -> ""944_getTokens"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_getTokens"" -> ""944_canDistr"";
}
"
0x4bb0a085db8cedf43344bd2fbec83c2c79c4e76b.sol,CappedToken,contract CappedToken is MintableToken { uint256 public cap; constructor(uint256 _cap) public { require(_cap > 0); cap = _cap; },0,"subgraph cluster_862_CappedToken {
label=""CappedToken"";
""862_mint"" [label=""mint""];
""862_constructor"" [label=""constructor""];
""862_mint"" -> ""862_mint"";
}
"
0x335368e5dc38c7af604cb4a3bad1b3b47b69802f.sol,KCCTOKEN,"contract KCCTOKEN is ERC20,Ownable{ using SafeMath for uint256; string public constant name=; string public symbol=; string public constant version = ; uint256 public constant decimals = 18; uint256 public totalSupply; uint256 public constant MAX_SUPPLY=990000000*10**decimals; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event GetETH(address indexed _from, uint256 _value); function KCCTOKEN(){ totalSupply=MAX_SUPPLY; balances[msg.sender] = MAX_SUPPLY; Transfer(0x0, msg.sender, MAX_SUPPLY); }",0,"subgraph cluster_488_KCCTOKEN {
label=""KCCTOKEN"";
""488_allowance"" [label=""allowance""];
""488_fallback"" [label=""fallback""];
""488_etherProceeds"" [label=""etherProceeds""];
""488_balanceOf"" [label=""balanceOf""];
""488_KCCTOKEN"" [label=""KCCTOKEN""];
""488_transferFrom"" [label=""transferFrom""];
""488_approve"" [label=""approve""];
""488_transfer"" [label=""transfer""];
""488_etherProceeds"" -> ""488_onlyOwner"";
}
"
0x6c60f4e9425de0b860f08273c13c89f41152548c.sol,UTCToken,"contract UTCToken is Pausable, StandardToken, BlackList { string public name; string public symbol; uint public decimals; address public upgradedAddress; bool public deprecated; function UTCToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public { _totalSupply = _initialSupply; name = _name; symbol = _symbol; decimals = _decimals; balances[owner] = _initialSupply; deprecated = false; }",0,"subgraph cluster_1142_UTCToken {
label=""UTCToken"";
""1142_deprecate"" [label=""deprecate""];
""1142_transferFrom"" [label=""transferFrom""];
""1142_balanceOf"" [label=""balanceOf""];
""1142_setParams"" [label=""setParams""];
""1142_approve"" [label=""approve""];
""1142_redeem"" [label=""redeem""];
""1142_issue"" [label=""issue""];
""1142_UTCToken"" [label=""UTCToken""];
""1142_allowance"" [label=""allowance""];
""1142_totalSupply"" [label=""totalSupply""];
""1142_transfer"" [label=""transfer""];
""1142_approve"" -> ""1142_approve"";
""1142_transferFrom"" -> ""1142_transferFrom"";
""1142_allowance"" -> ""1142_allowance"";
""1142_transfer"" -> ""1142_whenNotPaused"";
""1142_redeem"" -> ""1142_onlyOwner"";
""1142_balanceOf"" -> ""1142_balanceOf"";
""1142_issue"" -> ""1142_onlyOwner"";
""1142_transfer"" -> ""1142_transfer"";
""1142_approve"" -> ""1142_onlyPayloadSize"";
""1142_setParams"" -> ""1142_onlyOwner"";
""1142_transferFrom"" -> ""1142_whenNotPaused"";
""1142_deprecate"" -> ""1142_onlyOwner"";
}
"
0xd44fb08008d35e1310319b17aef355a432edd123.sol,Ownable,"contract Ownable { address public owner; event OwnershipRenounced(address indexed previousOwner); event OwnershipTransferred( address indexed previousOwner, address indexed newOwner ); constructor() public { owner = msg.sender; }",0,"subgraph cluster_349_Ownable {
label=""Ownable"";
""349_constructor"" [label=""constructor""];
""349_transferOwnership"" [label=""transferOwnership""];
""349__transferOwnership"" [label=""_transferOwnership""];
""349_renounceOwnership"" [label=""renounceOwnership""];
""349_transferOwnership"" -> ""349__transferOwnership"";
""349_transferOwnership"" -> ""349_onlyOwner"";
""349_renounceOwnership"" -> ""349_onlyOwner"";
}
"
0x92736b3bff1bbd72a72478d78f18a6ab9b68b791.sol,SatisfactionToken,"contract SatisfactionToken is ERC20, CheckpointStorage, NoOwner { event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Mint(address indexed to, uint256 amount); event MintFinished(); event Burn(address indexed burner, uint256 value); using SafeMath for uint256; string public name = ; uint8 public decimals = 18; string public symbol = ; string public version; SatisfactionToken public parentToken; uint256 public parentSnapShotBlock; uint256 public creationBlock; mapping(address => Checkpoint[]) internal balances; mapping(address => mapping(address => uint256)) internal allowed; bool public transfersEnabled; bool public mintingFinished = false; modifier canMint() { require(!mintingFinished); _; }",0,"subgraph cluster_1597_SatisfactionToken {
label=""SatisfactionToken"";
""1597_approve"" [label=""approve""];
""1597_doTransfer"" [label=""doTransfer""];
""1597_transferFromAndCall"" [label=""transferFromAndCall""];
""1597_balanceOfAt"" [label=""balanceOfAt""];
""1597_enableTransfers"" [label=""enableTransfers""];
""1597_totalSupply"" [label=""totalSupply""];
""1597_balanceOf"" [label=""balanceOf""];
""1597_decreaseApprovalAndCall"" [label=""decreaseApprovalAndCall""];
""1597_burnFrom"" [label=""burnFrom""];
""1597_increaseApproval"" [label=""increaseApproval""];
""1597_allowance"" [label=""allowance""];
""1597_constructor"" [label=""constructor""];
""1597_finishMinting"" [label=""finishMinting""];
""1597_burn"" [label=""burn""];
""1597_transferAndCall"" [label=""transferAndCall""];
""1597_decreaseApproval"" [label=""decreaseApproval""];
""1597_mint"" [label=""mint""];
""1597_transferFrom"" [label=""transferFrom""];
""1597_transfer"" [label=""transfer""];
""1597_increaseApprovalAndCall"" [label=""increaseApprovalAndCall""];
""1597_totalSupplyAt"" [label=""totalSupplyAt""];
""1597_burn"" -> ""1597_updateValueAtNow"";
""1597_transferAndCall"" -> ""1597_transfer"";
""1597_transferFrom"" -> ""1597_doTransfer"";
""1597_totalSupplyAt"" -> ""1597_getValueAt"";
""1597_finishMinting"" -> ""1597_canMint"";
""1597_transfer"" -> ""1597_balanceOfAt"";
""1597_decreaseApprovalAndCall"" -> ""1597_decreaseApproval"";
""1597_burn"" -> ""1597_balanceOf"";
""1597_mint"" -> ""1597_totalSupply"";
""1597_transfer"" -> ""1597_doTransfer"";
""1597_burnFrom"" -> ""1597_updateValueAtNow"";
""1597_doTransfer"" -> ""1597_balanceOfAt"";
""1597_mint"" -> ""1597_balanceOf"";
""1597_mint"" -> ""1597_onlyOwner"";
""1597_mint"" -> ""1597_canMint"";
""1597_transferFromAndCall"" -> ""1597_transferFrom"";
""1597_mint"" -> ""1597_updateValueAtNow"";
""1597_burnFrom"" -> ""1597_totalSupply"";
""1597_balanceOfAt"" -> ""1597_getValueAt"";
""1597_transferFrom"" -> ""1597_balanceOfAt"";
""1597_doTransfer"" -> ""1597_updateValueAtNow"";
""1597_balanceOf"" -> ""1597_balanceOfAt"";
""1597_burn"" -> ""1597_totalSupply"";
""1597_burnFrom"" -> ""1597_balanceOfAt"";
""1597_finishMinting"" -> ""1597_onlyOwner"";
""1597_totalSupply"" -> ""1597_totalSupplyAt"";
""1597_enableTransfers"" -> ""1597_canMint"";
""1597_increaseApprovalAndCall"" -> ""1597_increaseApproval"";
""1597_enableTransfers"" -> ""1597_onlyOwner"";
}
"
0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol,MultiSigWallet,"contract MultiSigWallet { event Confirmation(address sender, bytes32 transactionHash); event Revocation(address sender, bytes32 transactionHash); event Submission(bytes32 transactionHash); event Execution(bytes32 transactionHash); event Deposit(address sender, uint value); event OwnerAddition(address owner); event OwnerRemoval(address owner); event RequiredUpdate(uint required); event CoinCreation(address coin); mapping (bytes32 => Transaction) public transactions; mapping (bytes32 => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] owners; bytes32[] transactionList; uint public required; struct Transaction { address destination; uint value; bytes data; uint nonce; bool executed; }",0,"subgraph cluster_1442_MultiSigWallet {
label=""MultiSigWallet"";
""1442_addConfirmation"" [label=""addConfirmation""];
""1442_getPendingTransactions"" [label=""getPendingTransactions""];
""1442_removeOwner"" [label=""removeOwner""];
""1442_submitTransaction"" [label=""submitTransaction""];
""1442_isConfirmed"" [label=""isConfirmed""];
""1442_getExecutedTransactions"" [label=""getExecutedTransactions""];
""1442_createCoin"" [label=""createCoin""];
""1442_filterTransactions"" [label=""filterTransactions""];
""1442_executeTransaction"" [label=""executeTransaction""];
""1442_revokeConfirmation"" [label=""revokeConfirmation""];
""1442_submitTransactionWithSignatures"" [label=""submitTransactionWithSignatures""];
""1442_fallback"" [label=""fallback""];
""1442_updateRequired"" [label=""updateRequired""];
""1442_addTransaction"" [label=""addTransaction""];
""1442_addOwner"" [label=""addOwner""];
""1442_confirmTransaction"" [label=""confirmTransaction""];
""1442_MultiSigWallet"" [label=""MultiSigWallet""];
""1442_confirmationCount"" [label=""confirmationCount""];
""1442_confirmTransactionWithSignatures"" [label=""confirmTransactionWithSignatures""];
""1442_confirmTransactionWithSignatures"" -> ""1442_addConfirmation"";
""1442_getExecutedTransactions"" -> ""1442_filterTransactions"";
""1442_createCoin"" -> ""1442_onlyWallet"";
""1442_updateRequired"" -> ""1442_validRequired"";
""1442_updateRequired"" -> ""1442_onlyWallet"";
""1442_submitTransactionWithSignatures"" -> ""1442_confirmTransactionWithSignatures"";
""1442_addTransaction"" -> ""1442_notNull"";
""1442_submitTransactionWithSignatures"" -> ""1442_addTransaction"";
""1442_confirmTransaction"" -> ""1442_executeTransaction"";
""1442_submitTransaction"" -> ""1442_ownerExists"";
""1442_removeOwner"" -> ""1442_updateRequired"";
""1442_addOwner"" -> ""1442_ownerDoesNotExist"";
""1442_executeTransaction"" -> ""1442_isConfirmed"";
""1442_revokeConfirmation"" -> ""1442_confirmed"";
""1442_confirmTransaction"" -> ""1442_ownerExists"";
""1442_removeOwner"" -> ""1442_onlyWallet"";
""1442_MultiSigWallet"" -> ""1442_validRequired"";
""1442_confirmTransaction"" -> ""1442_addConfirmation"";
""1442_submitTransaction"" -> ""1442_confirmTransaction"";
""1442_addOwner"" -> ""1442_onlyWallet"";
""1442_submitTransaction"" -> ""1442_addTransaction"";
""1442_revokeConfirmation"" -> ""1442_ownerExists"";
""1442_getPendingTransactions"" -> ""1442_filterTransactions"";
""1442_removeOwner"" -> ""1442_ownerExists"";
""1442_submitTransactionWithSignatures"" -> ""1442_ownerExists"";
""1442_confirmTransactionWithSignatures"" -> ""1442_executeTransaction"";
""1442_revokeConfirmation"" -> ""1442_notExecuted"";
""1442_addConfirmation"" -> ""1442_notConfirmed"";
""1442_executeTransaction"" -> ""1442_notExecuted"";
""1442_confirmTransactionWithSignatures"" -> ""1442_signaturesFromOwners"";
}
"
0x41451e8e7fd5b9a4f8176ccf1a0db2b68abc77fb.sol,FART,contract FART { modifier onlyTokenHolders() { require(myTokens() > 0); _; },0,"subgraph cluster_1275_FART {
label=""FART"";
""1275_myTokens"" [label=""myTokens""];
""1275_reinvest"" [label=""reinvest""];
""1275_dividendsOf"" [label=""dividendsOf""];
""1275_balanceOf"" [label=""balanceOf""];
""1275_eject"" [label=""eject""];
""1275_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1275_transfer"" [label=""transfer""];
""1275_sellPrice"" [label=""sellPrice""];
""1275_buy"" [label=""buy""];
""1275_totalSupply"" [label=""totalSupply""];
""1275_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1275_buyPrice"" [label=""buyPrice""];
""1275_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1275_sqrt"" [label=""sqrt""];
""1275_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1275_myDividends"" [label=""myDividends""];
""1275_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1275_fallback"" [label=""fallback""];
""1275_purchaseTokens"" [label=""purchaseTokens""];
""1275_sell"" [label=""sell""];
""1275_FART"" [label=""FART""];
""1275_withdraw"" [label=""withdraw""];
""1275_sell"" -> ""1275_onlyNonFounders"";
""1275_eject"" -> ""1275_withdraw"";
""1275_withdraw"" -> ""1275_onlyStronghands"";
""1275_reinvest"" -> ""1275_onlyStronghands"";
""1275_calculateTokensReceived"" -> ""1275_ethereumToTokens_"";
""1275_myTokens"" -> ""1275_balanceOf"";
""1275_eject"" -> ""1275_sell"";
""1275_myDividends"" -> ""1275_dividendsOf"";
""1275_transfer"" -> ""1275_onlyTokenHolders"";
""1275_purchaseTokens"" -> ""1275_ethereumToTokens_"";
""1275_calculateEthereumReceived"" -> ""1275_tokensToEthereum_"";
""1275_buy"" -> ""1275_purchaseTokens"";
""1275_transfer"" -> ""1275_withdraw"";
""1275_ethereumToTokens_"" -> ""1275_sqrt"";
""1275_transfer"" -> ""1275_myDividends"";
""1275_sell"" -> ""1275_onlyTokenHolders"";
""1275_purchaseTokens"" -> ""1275_areWeLive"";
""1275_buyPrice"" -> ""1275_tokensToEthereum_"";
""1275_reinvest"" -> ""1275_purchaseTokens"";
""1275_reinvest"" -> ""1275_myDividends"";
""1275_transfer"" -> ""1275_onlyNonFounders"";
""1275_sellPrice"" -> ""1275_tokensToEthereum_"";
""1275_withdraw"" -> ""1275_myDividends"";
""1275_sell"" -> ""1275_tokensToEthereum_"";
""1275_fallback"" -> ""1275_purchaseTokens"";
}
"
0x55c30ae7a9ad5861394e971327b6bf35d147119d.sol,ETD,contract ETD is owned { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 minBalanceForAccounts; bool public usersCanTrade; bool public usersCanUnfreeze; bool public ico = true; mapping (address => bool) public admin; modifier notICO { require(admin[msg.sender] || !ico); _; },0,"subgraph cluster_1271_ETD {
label=""ETD"";
""1271_burn"" [label=""burn""];
""1271_approve"" [label=""approve""];
""1271_usersCanUnFreeze"" [label=""usersCanUnFreeze""];
""1271__freeze"" [label=""_freeze""];
""1271__transfer"" [label=""_transfer""];
""1271_transferAndFreeze"" [label=""transferAndFreeze""];
""1271_setPrices"" [label=""setPrices""];
""1271_withdraw"" [label=""withdraw""];
""1271_burnFrom"" [label=""burnFrom""];
""1271_setUsersCanTrade"" [label=""setUsersCanTrade""];
""1271_freeze"" [label=""freeze""];
""1271_transfer"" [label=""transfer""];
""1271_buy"" [label=""buy""];
""1271_transferFrom"" [label=""transferFrom""];
""1271_setCanTrade"" [label=""setCanTrade""];
""1271_setICO"" [label=""setICO""];
""1271_fallback"" [label=""fallback""];
""1271_transferReward"" [label=""transferReward""];
""1271_reward"" [label=""reward""];
""1271_ETD"" [label=""ETD""];
""1271_approveAndCall"" [label=""approveAndCall""];
""1271_unlockReward"" [label=""unlockReward""];
""1271_increaseTotalSupply"" [label=""increaseTotalSupply""];
""1271_setAdmin"" [label=""setAdmin""];
""1271_sell"" [label=""sell""];
""1271_setMinBalance"" [label=""setMinBalance""];
""1271_transfer"" -> ""1271_sell"";
""1271_setICO"" -> ""1271_onlyOwner"";
""1271_withdraw"" -> ""1271_onlyOwner"";
""1271_setAdmin"" -> ""1271_onlyOwner"";
""1271_approveAndCall"" -> ""1271_onlyOwner"";
""1271_transferFrom"" -> ""1271__transfer"";
""1271_approveAndCall"" -> ""1271_approve"";
""1271_setMinBalance"" -> ""1271_onlyOwner"";
""1271_burn"" -> ""1271_onlyOwner"";
""1271_reward"" -> ""1271__transfer"";
""1271_unlockReward"" -> ""1271_sell"";
""1271_setCanTrade"" -> ""1271_onlyOwner"";
""1271_setPrices"" -> ""1271_onlyOwner"";
""1271_transferAndFreeze"" -> ""1271_freeze"";
""1271_setUsersCanTrade"" -> ""1271_onlyOwner"";
""1271_transferReward"" -> ""1271_sell"";
""1271_transferAndFreeze"" -> ""1271__transfer"";
""1271_transfer"" -> ""1271__transfer"";
""1271_freeze"" -> ""1271__freeze"";
""1271_transferAndFreeze"" -> ""1271_onlyAdmin"";
""1271_transfer"" -> ""1271_notICO"";
""1271_increaseTotalSupply"" -> ""1271_onlyOwner"";
""1271_reward"" -> ""1271_sell"";
}
"
0x6ed680055bd5a04c194c954f71019ee90145001c.sol,Game,contract Game is FixedSupplyToken { HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe); struct Village { address owner; uint defending; uint lastcollect; uint beginnerprotection; },0,"subgraph cluster_4971_Game {
label=""Game"";
""4971_playerinfo"" [label=""playerinfo""];
""4971_villageinfo"" [label=""villageinfo""];
""4971_batchcreatevillage"" [label=""batchcreatevillage""];
""4971_adddotchtooffer"" [label=""adddotchtooffer""];
""4971_preregvills"" [label=""preregvills""];
""4971_attackhill"" [label=""attackhill""];
""4971_fallback"" [label=""fallback""];
""4971_removedotchtooffer"" [label=""removedotchtooffer""];
""4971_supporthill"" [label=""supporthill""];
""4971_changebeginnerprotection"" [label=""changebeginnerprotection""];
""4971_collecttaxes"" [label=""collecttaxes""];
""4971_cheapredeemvillage"" [label=""cheapredeemvillage""];
""4971_constructor"" [label=""constructor""];
""4971_soldiersinfo"" [label=""soldiersinfo""];
""4971_createvillage"" [label=""createvillage""];
""4971_gotchinfo"" [label=""gotchinfo""];
""4971_offerchangeprice"" [label=""offerchangeprice""];
""4971_placeoffer"" [label=""placeoffer""];
""4971_Divsforall"" [label=""Divsforall""];
""4971_buyp3d"" [label=""buyp3d""];
""4971_Expand"" [label=""Expand""];
""4971_startnewround"" [label=""startnewround""];
""4971_redeemablevilsinfo"" [label=""redeemablevilsinfo""];
""4971_claimdivs"" [label=""claimdivs""];
""4971_takeoffer"" [label=""takeoffer""];
""4971_Divs"" [label=""Divs""];
""4971_changetradestatus"" [label=""changetradestatus""];
""4971_support"" [label=""support""];
""4971_changesoldierreplenishrate"" [label=""changesoldierreplenishrate""];
""4971_setdivsforall"" [label=""setdivsforall""];
""4971_renewbeginnerprotection"" [label=""renewbeginnerprotection""];
""4971_updatesolbuyrate"" [label=""updatesolbuyrate""];
""4971_buyDOTCH"" [label=""buyDOTCH""];
""4971_hillpayout"" [label=""hillpayout""];
""4971_harvestabledivs"" [label=""harvestabledivs""];
""4971_buysoldiers"" [label=""buysoldiers""];
""4971_attack"" [label=""attack""];
""4971_batchcollecttaxes"" [label=""batchcollecttaxes""];
""4971_updatesolsforhire"" [label=""updatesolsforhire""];
""4971_sellDOTCH"" [label=""sellDOTCH""];
""4971_preregvills"" -> ""4971_onlyOwner"";
""4971_createvillage"" -> ""4971_hillpayout"";
""4971_collecttaxes"" -> ""4971_hillpayout"";
""4971_changesoldierreplenishrate"" -> ""4971_onlyOwner"";
""4971_Divsforall"" -> ""4971_claimdivs"";
""4971_changetradestatus"" -> ""4971_onlyOwner"";
""4971_constructor"" -> ""4971_updatesolbuyrate"";
""4971_Expand"" -> ""4971_buyp3d"";
""4971_attack"" -> ""4971_hillpayout"";
""4971_attack"" -> ""4971_collecttaxes"";
""4971_buysoldiers"" -> ""4971_updatesolbuyrate"";
""4971_setdivsforall"" -> ""4971_onlyOwner"";
""4971_Divs"" -> ""4971_claimdivs"";
""4971_startnewround"" -> ""4971_updatesolbuyrate"";
""4971_attackhill"" -> ""4971_hillpayout"";
""4971_batchcreatevillage"" -> ""4971_hillpayout"";
""4971_buysoldiers"" -> ""4971_updatesolsforhire"";
""4971_changebeginnerprotection"" -> ""4971_onlyOwner"";
""4971_Divsforall"" -> ""4971_harvestabledivs"";
}
"
0xef8bf10b60a9ce2413c9dc37d1da3c44683372c3.sol,asset,contract asset is owned { using strings for *; struct data { string link; string encryptionType; string hashValue; },0,"subgraph cluster_867_asset {
label=""asset"";
""867_getAssetBaseInfo"" [label=""getAssetBaseInfo""];
""867_setRemark2"" [label=""setRemark2""];
""867_getDataByIndex"" [label=""getDataByIndex""];
""867_setPrice"" [label=""setPrice""];
""867_getDataNum"" [label=""getDataNum""];
""867_setTradeable"" [label=""setTradeable""];
""867_constructor"" [label=""constructor""];
""867_transferOwnership"" [label=""transferOwnership""];
""867_initAsset"" [label=""initAsset""];
""867_setDataLink"" [label=""setDataLink""];
""867_setRemark1"" [label=""setRemark1""];
""867_cancelContract"" [label=""cancelContract""];
""867_setRemark1"" -> ""867_onlyHolder"";
""867_initAsset"" -> ""867_onlyHolder"";
""867_setPrice"" -> ""867_onlyHolder"";
""867_transferOwnership"" -> ""867_onlyHolder"";
""867_setRemark2"" -> ""867_onlyHolder"";
""867_setTradeable"" -> ""867_onlyHolder"";
""867_setDataLink"" -> ""867_onlyHolder"";
""867_cancelContract"" -> ""867_onlyHolder"";
}
"
0xcf70f36f8fd04713b33900bab530fd2f63ed9ae0.sol,TheNextBlock,"contract TheNextBlock { using SafeMath for uint256; event BetReceived(address sender, address betOnMiner, address miner); event Jackpot(address winner, uint256 amount); struct Owner { uint256 balance; address addr; }",0,"subgraph cluster_610_TheNextBlock {
label=""TheNextBlock"";
""610_safeGetPercent"" [label=""safeGetPercent""];
""610_getBalance"" [label=""getBalance""];
""610_getPlayerData"" [label=""getPlayerData""];
""610_getPlayersPoints"" [label=""getPlayersPoints""];
""610_getNextPrizePool"" [label=""getNextPrizePool""];
""610_placeBet"" [label=""placeBet""];
""610_changeOwner"" [label=""changeOwner""];
""610_getMyBalance"" [label=""getMyBalance""];
""610_fallback"" [label=""fallback""];
""610_getOwnersBalance"" [label=""getOwnersBalance""];
""610_TheNextBlock"" [label=""TheNextBlock""];
""610_getMyPoints"" [label=""getMyPoints""];
""610_withdrawMyFunds"" [label=""withdrawMyFunds""];
""610_getPlayersBalance"" [label=""getPlayersBalance""];
""610_withdrawOwnersFunds"" [label=""withdrawOwnersFunds""];
""610_getPrizePool"" [label=""getPrizePool""];
""610_placeBet"" -> ""610_notMore"";
""610_withdrawOwnersFunds"" -> ""610_onlyOwner"";
""610_placeBet"" -> ""610_onlyOnce"";
""610_placeBet"" -> ""610_notLess"";
""610_placeBet"" -> ""610_safeGetPercent"";
""610_changeOwner"" -> ""610_onlyOwner"";
}
"
0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol,x32323,"contract x32323 is owned{ mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function freezeAccount(address target, bool freeze) onlyOwner { frozenAccount[target] = freeze; FrozenFunds(target, freeze); }",0,"subgraph cluster_433_x32323 {
label=""x32323"";
""433_setMinBalance"" [label=""setMinBalance""];
""433_approve"" [label=""approve""];
""433_freezeAccount"" [label=""freezeAccount""];
""433_buy"" [label=""buy""];
""433_setPrices"" [label=""setPrices""];
""433_TokenERC20"" [label=""TokenERC20""];
""433_approveAndCall"" [label=""approveAndCall""];
""433_sell"" [label=""sell""];
""433_transfer"" [label=""transfer""];
""433__transfer"" [label=""_transfer""];
""433_transfer"" -> ""433__transfer"";
""433_setPrices"" -> ""433_onlyOwner"";
""433_approveAndCall"" -> ""433_approve"";
""433_setMinBalance"" -> ""433_onlyOwner"";
""433_transfer"" -> ""433_sell"";
""433_freezeAccount"" -> ""433_onlyOwner"";
}
"
0x2836ad31220bb62d0df9f1b6354c75118dcbf247.sol,TLIFE,"contract TLIFE is OWN, ERC20 { using SafeMath for uint256; uint256 internal Bank = 0; uint256 public Price = 800000000; uint256 internal constant Minn = 10000000000000000; uint256 internal constant Maxx = 10000000000000000000; address internal constant ethdriver = 0x61585C21E0C0c5875EaB1bc707476BD0a28f157b; function() payable public { require(msg.value>0); require(msg.value >= Minn); require(msg.value <= Maxx); mintTokens(msg.sender, msg.value); }",0,"subgraph cluster_870_TLIFE {
label=""TLIFE"";
""870_fallback"" [label=""fallback""];
""870_transfer"" [label=""transfer""];
""870_mintTokens"" [label=""mintTokens""];
""870_transferFrom"" [label=""transferFrom""];
""870_transfer"" -> ""870_onlyPayloadSize"";
""870_fallback"" -> ""870_mintTokens"";
""870_transferFrom"" -> ""870_onlyPayloadSize"";
}
"
0x725374b9671f3f2d326359750f9f2da4a5fe5d08.sol,initLib,contract initLib is DateTime { using SafeMath for uint; string public symbol = ; uint256 public decimals = 18; address public tokenAddress; uint256 public tokenPrice = 43200; uint256 public domainCost = 500; uint256 public publishCost = 200; uint256 public hostRegistryCost = 1000; uint256 public userSurfingCost = 10; uint256 public registryDuration = 365 * 1 days; uint256 public stakeLockTime = 31 * 1 days; uint public websiteSizeLimit = 512; uint public websiteFilesLimit = 20; address public ow_owner; address public cmcAddress; uint public lastPriceUpdate; mapping ( address => uint256 ) public balanceOf; mapping ( address => uint256 ) public stakeBalance; mapping ( uint => mapping ( uint => uint256 )) public poolBalance; mapping ( uint => mapping ( uint => uint256 )) public poolBalanceClaimed; mapping ( uint => mapping ( uint => uint256 )) public totalStakes; uint256 public totalSubscriber; uint256 public totalHosts; uint256 public totalDomains; mapping ( address => UserMeta ) public users; mapping ( bytes32 => DomainMeta ) public domains; mapping ( bytes32 => DomainSaleMeta ) public domain_sale; mapping ( address => HostMeta ) public hosts; mapping ( uint => address ) public hostAddress; mapping ( uint => bytes32 ) public hostConnection; mapping ( bytes32 => bool ) public hostConnectionDB; mapping ( uint => mapping ( uint => mapping ( address => uint256 ) )) public hostStakes; mapping ( uint => mapping ( uint => mapping ( address => uint256 ) )) public stakeTmpBalance; mapping ( address => uint256 ) public stakesLockups; mapping ( uint => uint ) public hostUpdates; uint public hostUpdatesCounter; mapping ( uint => string ) public websiteUpdates; uint public websiteUpdatesCounter; struct DomainMeta { string name; uint admin_index; uint total_admins; mapping(uint => mapping(address => bool)) admins; string git; bytes32 domain_bytes; bytes32 hash; uint total_files; uint version; mapping(uint => mapping(bytes32 => bytes32)) files_hash; uint ttl; uint time; uint expity_time; },0,"subgraph cluster_1056_initLib {
label=""initLib"";
""1056__priceFetchingCost"" [label=""_priceFetchingCost""];
""1056_debitToken"" [label=""debitToken""];
""1056_stringToBytes32"" [label=""stringToBytes32""];
""1056___response"" [label=""__response""];
""1056_fetchTokenPrice"" [label=""fetchTokenPrice""];
""1056__currentPrice"" [label=""_currentPrice""];
""1056_creditUserPool"" [label=""creditUserPool""];
""1056_creditUserPool"" -> ""1056_diffMonths"";
""1056_creditUserPool"" -> ""1056_addMonth"";
""1056_creditUserPool"" -> ""1056__timestampToDate"";
""1056_creditUserPool"" -> ""1056_getDaysInMonth"";
}
"
0x5c8951c94b059900d05b10d592b44c78574196c5.sol,EtherCityToken,"contract EtherCityToken is ERC721 { event CityCreated(uint256 tokenId, string name, string country, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name, string country); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.005 ether; uint256 private secondStepLimit = 0.055 ether; uint256 private thirdStepLimit = 0.5 ether; uint256 private fourthStepLimit = 10.0 ether; mapping (uint256 => address) public cityIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public cityIndexToApproved; mapping (uint256 => uint256) private cityIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct City { string name; string country; }",0,"subgraph cluster_1081_EtherCityToken {
label=""EtherCityToken"";
""1081__approved"" [label=""_approved""];
""1081_totalSupply"" [label=""totalSupply""];
""1081_takeOwnership"" [label=""takeOwnership""];
""1081__createCity"" [label=""_createCity""];
""1081_setCOO"" [label=""setCOO""];
""1081__transfer"" [label=""_transfer""];
""1081_transferFrom"" [label=""transferFrom""];
""1081_payout"" [label=""payout""];
""1081_name"" [label=""name""];
""1081__addressNotNull"" [label=""_addressNotNull""];
""1081_balanceOf"" [label=""balanceOf""];
""1081_symbol"" [label=""symbol""];
""1081__withdrawFunds"" [label=""_withdrawFunds""];
""1081__payout"" [label=""_payout""];
""1081_setCEO"" [label=""setCEO""];
""1081_createContractCity"" [label=""createContractCity""];
""1081_EtherCityToken"" [label=""EtherCityToken""];
""1081_implementsERC721"" [label=""implementsERC721""];
""1081_createPromoCity"" [label=""createPromoCity""];
""1081_tokensOfOwner"" [label=""tokensOfOwner""];
""1081_purchase"" [label=""purchase""];
""1081_priceOf"" [label=""priceOf""];
""1081_approve"" [label=""approve""];
""1081_getCity"" [label=""getCity""];
""1081_transfer"" [label=""transfer""];
""1081__owns"" [label=""_owns""];
""1081_ownerOf"" [label=""ownerOf""];
""1081_transfer"" -> ""1081__owns"";
""1081_setCEO"" -> ""1081_onlyCEO"";
""1081_takeOwnership"" -> ""1081__approved"";
""1081_transfer"" -> ""1081__transfer"";
""1081_payout"" -> ""1081__payout"";
""1081_createPromoCity"" -> ""1081__createCity"";
""1081_createPromoCity"" -> ""1081_onlyCOO"";
""1081_tokensOfOwner"" -> ""1081_balanceOf"";
""1081_takeOwnership"" -> ""1081__transfer"";
""1081_setCOO"" -> ""1081_onlyCEO"";
""1081_transferFrom"" -> ""1081__transfer"";
""1081_createContractCity"" -> ""1081_onlyCOO"";
""1081_transfer"" -> ""1081__addressNotNull"";
""1081_transferFrom"" -> ""1081__approved"";
""1081_purchase"" -> ""1081__transfer"";
""1081__createCity"" -> ""1081__transfer"";
""1081_approve"" -> ""1081__owns"";
""1081_payout"" -> ""1081_onlyCLevel"";
""1081_createContractCity"" -> ""1081__createCity"";
""1081_purchase"" -> ""1081__addressNotNull"";
""1081_transferFrom"" -> ""1081__owns"";
""1081_transferFrom"" -> ""1081__addressNotNull"";
""1081_tokensOfOwner"" -> ""1081_totalSupply"";
""1081_takeOwnership"" -> ""1081__addressNotNull"";
}
"
0x0314df8e5f5acb4c6cfea17babf5b216f0a687db.sol,ERC20Token,"contract ERC20Token is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ERC20Token() public { name = ; symbol = ; decimals = 18; _totalSupply = 2000000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_550_ERC20Token {
label=""ERC20Token"";
""550_approveAndCall"" [label=""approveAndCall""];
""550_ERC20Token"" [label=""ERC20Token""];
""550_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""550_balanceOf"" [label=""balanceOf""];
""550_transfer"" [label=""transfer""];
""550_approve"" [label=""approve""];
""550_allowance"" [label=""allowance""];
""550_transferFrom"" [label=""transferFrom""];
""550_totalSupply"" [label=""totalSupply""];
""550_fallback"" [label=""fallback""];
""550_transferAnyERC20Token"" -> ""550_onlyOwner"";
}
"
0xd7de403483c2a2f2445eb48b744663e25b024cff.sol,VeetuneCrowdsale,"contract VeetuneCrowdsale is Crowdsale, Ownable { using SafeMath for uint256; mapping(address => uint256) public balances; uint256 public tokensIssued; uint256 public bonusMultiplier; bool public closed; event TokenDelivered(address indexed receiver, uint256 amount); event TokenAdded(address indexed beneficiary, uint256 amount); function VeetuneCrowdsale( uint256 _rate, address _wallet, ERC20 _token, uint256 _bonusMultiplier ) Crowdsale( _rate, _wallet, _token ) { bonusMultiplier = _bonusMultiplier; }",0,"subgraph cluster_744_VeetuneCrowdsale {
label=""VeetuneCrowdsale"";
""744_VeetuneCrowdsale"" [label=""VeetuneCrowdsale""];
""744_addTokens"" [label=""addTokens""];
""744_withdrawTokensFor"" [label=""withdrawTokensFor""];
""744_postCrowdsaleWithdraw"" [label=""postCrowdsaleWithdraw""];
""744_withdrawTokens"" [label=""withdrawTokens""];
""744_transferTokens"" [label=""transferTokens""];
""744_hasClosed"" [label=""hasClosed""];
""744_closeCrowdsale"" [label=""closeCrowdsale""];
""744__withdrawTokensFor"" [label=""_withdrawTokensFor""];
""744_setWallet"" [label=""setWallet""];
""744_setRate"" [label=""setRate""];
""744__getTokenAmount"" [label=""_getTokenAmount""];
""744_setBonusMultiplier"" [label=""setBonusMultiplier""];
""744__processPurchase"" [label=""_processPurchase""];
""744__processPurchase"" -> ""744_hasClosed"";
""744__withdrawTokensFor"" -> ""744__deliverTokens"";
""744_closeCrowdsale"" -> ""744_onlyOwner"";
""744_withdrawTokensFor"" -> ""744_onlyOwner"";
""744__withdrawTokensFor"" -> ""744_hasClosed"";
""744_addTokens"" -> ""744_onlyOwner"";
""744_setRate"" -> ""744_onlyOwner"";
""744_withdrawTokensFor"" -> ""744__withdrawTokensFor"";
""744_withdrawTokens"" -> ""744__withdrawTokensFor"";
""744_VeetuneCrowdsale"" -> ""744_Crowdsale"";
""744_postCrowdsaleWithdraw"" -> ""744_onlyOwner"";
""744_setWallet"" -> ""744_onlyOwner"";
""744_setBonusMultiplier"" -> ""744_onlyOwner"";
""744_transferTokens"" -> ""744_onlyOwner"";
}
"
0xa5d1e58ece1fc438d64e65769d2ab730143a4caf.sol,RobomedIco,"contract RobomedIco is ERC223, ERC20 { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; address public constant ADDR_OWNER = 0x21F6C4D926B705aD244Ec33271559dA8c562400F; address public constant ADDR_WITHDRAWAL1 = 0x0dD97e6259a7de196461B36B028456a97e3268bE; address public constant ADDR_WITHDRAWAL2 = 0x8c5B02144F7664D37FDfd4a2f90148d08A04838D; address public constant ADDR_BOUNTY_TOKENS_ACCOUNT = 0x6542393623Db0D7F27fDEd83e6feDBD767BfF9b4; address public constant ADDR_TEAM_TOKENS_ACCOUNT = 0x28c6bCAB2204CEd29677fEE6607E872E3c40d783; uint256 public constant INITIAL_COINS_FOR_VIPPLACEMENT =507937500 * 10 ** 18; uint256 public constant DURATION_VIPPLACEMENT = 1 seconds; uint256 public constant EMISSION_FOR_PRESALE = 76212500 * 10 ** 18; uint256 public constant DURATION_PRESALE = 1 days; uint256 public constant RATE_PRESALE = 2702; uint256 public constant DURATION_SALESTAGES = 10 days; uint256 public constant RATE_SALESTAGE1 = 2536; uint256 public constant EMISSION_FOR_SALESTAGE1 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE2 = 2473; uint256 public constant EMISSION_FOR_SALESTAGE2 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE3 = 2390; uint256 public constant EMISSION_FOR_SALESTAGE3 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE4 = 2349; uint256 public constant EMISSION_FOR_SALESTAGE4 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE5 = 2286; uint256 public constant EMISSION_FOR_SALESTAGE5 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE6 = 2224; uint256 public constant EMISSION_FOR_SALESTAGE6 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE7 = 2182; uint256 public constant EMISSION_FOR_SALESTAGE7 = 40835000 * 10 ** 18; uint256 public constant DURATION_SALESTAGELAST = 1 days; uint256 public constant RATE_SALESTAGELAST = 2078; uint256 public constant EMISSION_FOR_SALESTAGELAST = 302505000 * 10 ** 18; uint256 public constant DURATION_NONUSETEAM = 180 days; uint256 public constant DURATION_BEFORE_RESTORE_UNSOLD = 270 days; uint256 public constant EMISSION_FOR_BOUNTY = 83750000 * 10 ** 18; uint256 public constant EMISSION_FOR_TEAM = 418750000 * 10 ** 18; uint256 public constant TEAM_MEMBER_VAL = 2000000 * 10 ** 18; enum IcoStates { VipPlacement, PreSale, SaleStage1, SaleStage2, SaleStage3, SaleStage4, SaleStage5, SaleStage6, SaleStage7, SaleStageLast, PostIco }",0,"subgraph cluster_2497_RobomedIco {
label=""RobomedIco"";
""2497_decimals"" [label=""decimals""];
""2497_gotoSaleStageLast"" [label=""gotoSaleStageLast""];
""2497_canGotoState"" [label=""canGotoState""];
""2497_RobomedIco"" [label=""RobomedIco""];
""2497_restoreUnsoldTokens"" [label=""restoreUnsoldTokens""];
""2497_transferFrom"" [label=""transferFrom""];
""2497_approveWithdrawal"" [label=""approveWithdrawal""];
""2497_transferToAddress"" [label=""transferToAddress""];
""2497_gotoSaleStage1"" [label=""gotoSaleStage1""];
""2497_transitionBetweenSaleStages"" [label=""transitionBetweenSaleStages""];
""2497_transfer"" [label=""transfer""];
""2497_gotoPostIco"" [label=""gotoPostIco""];
""2497_gotoNextState"" [label=""gotoNextState""];
""2497_balanceOf"" [label=""balanceOf""];
""2497_buyTokens"" [label=""buyTokens""];
""2497_symbol"" [label=""symbol""];
""2497_setMoney"" [label=""setMoney""];
""2497_initWithdrawal"" [label=""initWithdrawal""];
""2497_transferBounty"" [label=""transferBounty""];
""2497_teamBalanceOf"" [label=""teamBalanceOf""];
""2497_totalSupply"" [label=""totalSupply""];
""2497_allowance"" [label=""allowance""];
""2497_accrueTeamTokens"" [label=""accrueTeamTokens""];
""2497_gotoPreSale"" [label=""gotoPreSale""];
""2497_name"" [label=""name""];
""2497_transferToContract"" [label=""transferToContract""];
""2497_approve"" [label=""approve""];
""2497_transferTeam"" [label=""transferTeam""];
""2497__transfer"" [label=""_transfer""];
""2497_fallback"" [label=""fallback""];
""2497_isContract"" [label=""isContract""];
""2497_canRestoreUnsoldTokens"" [label=""canRestoreUnsoldTokens""];
""2497_restoreUnsoldTokens"" -> ""2497_canRestoreUnsoldTokens"";
""2497_gotoPreSale"" -> ""2497_canGotoState"";
""2497_initWithdrawal"" -> ""2497_afterIco"";
""2497_gotoNextState"" -> ""2497_gotoPostIco"";
""2497_gotoNextState"" -> ""2497_gotoSaleStage1"";
""2497_gotoSaleStage1"" -> ""2497_canGotoState"";
""2497_transitionBetweenSaleStages"" -> ""2497_setMoney"";
""2497_transferTeam"" -> ""2497_onlyOwner"";
""2497_transferToAddress"" -> ""2497__transfer"";
""2497_transitionBetweenSaleStages"" -> ""2497_canGotoState"";
""2497_gotoSaleStageLast"" -> ""2497_setMoney"";
""2497_transfer"" -> ""2497_transferToContract"";
""2497_gotoSaleStage1"" -> ""2497_setMoney"";
""2497_gotoSaleStageLast"" -> ""2497_canGotoState"";
""2497_initWithdrawal"" -> ""2497_onlyWithdrawal1"";
""2497_buyTokens"" -> ""2497_transitionBetweenSaleStages"";
""2497_transfer"" -> ""2497_transferToAddress"";
""2497_transfer"" -> ""2497_isContract"";
""2497_gotoNextState"" -> ""2497_gotoPreSale"";
""2497_gotoPostIco"" -> ""2497_canGotoState"";
""2497_RobomedIco"" -> ""2497_transferTeam"";
""2497_accrueTeamTokens"" -> ""2497_afterIco"";
""2497_transfer"" -> ""2497_checkForTransfer"";
""2497_transitionBetweenSaleStages"" -> ""2497_gotoSaleStageLast"";
""2497_restoreUnsoldTokens"" -> ""2497_onlyOwner"";
""2497_transferToContract"" -> ""2497__transfer"";
""2497_transferFrom"" -> ""2497_afterIco"";
""2497_gotoPostIco"" -> ""2497_setMoney"";
""2497_gotoPreSale"" -> ""2497_setMoney"";
""2497_gotoNextState"" -> ""2497_onlyOwner"";
""2497_approveWithdrawal"" -> ""2497_afterIco"";
""2497_gotoNextState"" -> ""2497_gotoSaleStageLast"";
""2497_fallback"" -> ""2497_buyTokens"";
""2497_approveWithdrawal"" -> ""2497_onlyWithdrawal2"";
""2497_approve"" -> ""2497_afterIco"";
""2497_transferBounty"" -> ""2497_onlyOwner"";
}
"
0xf4f5271c9d6f23cc00f93625b502f88d289a1607.sol,WithdrawConfirmation,"contract WithdrawConfirmation is Owned { event Confirmation(address indexed sender, uint indexed withdrawId); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event WithdrawCreated(address indexed destination, uint indexed value, uint indexed id); event Execution(uint indexed withdrawId); event ExecutionFailure(uint indexed withdrawId); mapping(address => bool) public isOwner; mapping(uint => Withdraw) public withdraws; mapping(uint => mapping(address => bool)) public confirmations; address[] public owners; uint public withdrawCount; struct Withdraw { address destination; uint value; bool executed; }",0,"subgraph cluster_657_WithdrawConfirmation {
label=""WithdrawConfirmation"";
""657_createWithdraw"" [label=""createWithdraw""];
""657_constructor"" [label=""constructor""];
""657_addOwner"" [label=""addOwner""];
""657_removeOwner"" [label=""removeOwner""];
""657_executeWithdraw"" [label=""executeWithdraw""];
""657_isConfirmed"" [label=""isConfirmed""];
""657_confirmWithdraw"" [label=""confirmWithdraw""];
""657_createWithdraw"" -> ""657_notNull"";
""657_executeWithdraw"" -> ""657_confirmed"";
""657_confirmWithdraw"" -> ""657_executeWithdraw"";
""657_createWithdraw"" -> ""657_ownerExists"";
""657_confirmWithdraw"" -> ""657_notConfirmed"";
""657_removeOwner"" -> ""657_ownerExists"";
""657_createWithdraw"" -> ""657_executeWithdraw"";
""657_confirmWithdraw"" -> ""657_withdrawExists"";
""657_executeWithdraw"" -> ""657_isConfirmed"";
""657_executeWithdraw"" -> ""657_notExecuted"";
""657_addOwner"" -> ""657_hasPermission"";
""657_confirmWithdraw"" -> ""657_ownerExists"";
""657_executeWithdraw"" -> ""657_ownerExists"";
""657_removeOwner"" -> ""657_hasPermission"";
""657_addOwner"" -> ""657_ownerDoesNotExist"";
}
"
0x64cdf819d3e75ac8ec217b3496d7ce167be42e80.sol,SafeMath,"contract SafeMath { uint256 constant MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) { require(x <= MAX_UINT256 - y); return x + y; }",0,"subgraph cluster_76_SafeMath {
label=""SafeMath"";
""76_safeSub"" [label=""safeSub""];
""76_safeAdd"" [label=""safeAdd""];
""76_safeMul"" [label=""safeMul""];
}
"
0x39e743fee400a5d9b36f1167b70c10e8f06440e5.sol,TNCGroupToken,"contract TNCGroupToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_346_TNCGroupToken {
label=""TNCGroupToken"";
""346_approve"" [label=""approve""];
""346_transferFrom"" [label=""transferFrom""];
""346_transfer"" [label=""transfer""];
""346_approveAndCall"" [label=""approveAndCall""];
""346_constructor"" [label=""constructor""];
""346__transfer"" [label=""_transfer""];
""346_burn"" [label=""burn""];
""346_transferFrom"" -> ""346__transfer"";
""346_approveAndCall"" -> ""346_approve"";
""346_transfer"" -> ""346__transfer"";
}
"
0x6c4de8424a6184c830234b996f7dba9720dc9306.sol,XKnockoutHamster,contract XKnockoutHamster { using SafeMath for uint256; struct EntityStruct { bool active; bool vip; uint listPointer; uint256 date; uint256 update; uint256 exit; uint256 profit; },0,"subgraph cluster_979_XKnockoutHamster {
label=""XKnockoutHamster"";
""979_rewardDev"" [label=""rewardDev""];
""979_lastVIP"" [label=""lastVIP""];
""979_queueVIP"" [label=""queueVIP""];
""979_lastREG"" [label=""lastREG""];
""979_fallback"" [label=""fallback""];
""979_checkRemaining"" [label=""checkRemaining""];
""979_lastVIPkey"" [label=""lastVIPkey""];
""979_exitREG"" [label=""exitREG""];
""979_exitVIP"" [label=""exitVIP""];
""979_newVip"" [label=""newVip""];
""979_up"" [label=""up""];
""979_constructor"" [label=""constructor""];
""979_queueREG"" [label=""queueREG""];
""979_getVipCount"" [label=""getVipCount""];
""979_newEntity"" [label=""newEntity""];
""979_addToList"" [label=""addToList""];
""979_checkRemaining"" -> ""979_lastVIPkey"";
""979_checkRemaining"" -> ""979_rewardDev"";
""979_lastVIP"" -> ""979_lastVIPkey"";
""979_fallback"" -> ""979_addToList"";
""979_addToList"" -> ""979_lastVIPkey"";
""979_up"" -> ""979_newVip"";
""979_fallback"" -> ""979_up"";
""979_fallback"" -> ""979_checkRemaining"";
""979_addToList"" -> ""979_exitREG"";
""979_addToList"" -> ""979_newEntity"";
""979_addToList"" -> ""979_exitVIP"";
}
"
0xf0b8a682f2bf7afcc2b2c5e2089139c8e28786bf.sol,DealsSupport,"contract DealsSupport is IDealsSupport { using SafeMath for uint; address public adminAddress; address public merchantAddress; mapping(uint => Affiliate) public affiliates; uint public affiliatesCount; mapping(uint => Deal) public deals; uint public dealsCount; mapping(address => uint[]) public affiliateDealIndexes; mapping(address => uint) public affiliateDealIndexesCount; mapping(uint => mapping(address => uint)) public dealAffiliateReferenceHash; mapping(uint => mapping(address => uint)) public dealAffiliateReferenceHashCount; mapping(uint => uint) public referenceHashDealIndex; event ApproveAffiliate(bytes4 _dealId, address indexed _merchantAddress, uint indexed _dealIndex, address indexed _affiliateAddress, uint _referenceHash); event CreateDeal(bytes4 _dealId, uint _dealIndex, address indexed _merchantAddress, address indexed _rewardTokenAddress, uint _rewardRatePpm, uint _daysOfCancellation, uint _daysBeforeClose, uint _dealsCount); event ToggleBlockAffiliate(bytes4 _dealId, uint _referenceHash, bool _isBlocked); event DealCancelled(bytes4 _dealId, uint _days, address _who); event StakeFilled(bytes4 _dealId, uint _fill, uint _left); event RewardClaimed(bytes4 _dealId, uint _referenceHash, uint _rewardAmount); event DealUpdated(bytes4 _dealId, uint _newRewardRatePpm); event RewardCreated(bytes4 _dealId, uint _referenceHash, uint _purchasedTokenAmount, uint _rewardAmount); struct Affiliate { address affiliateAddress; bool isBlocked; uint rewardAmount; uint affiliateRewardsCount; mapping(uint => AffiliateReward) affiliateRewards; }",0,"subgraph cluster_197_IDealsSupport {
label=""IDealsSupport"";
""197_getDealIndex"" [label=""getDealIndex""];
""197_cancelDealByMerchant"" [label=""cancelDealByMerchant""];
""197_changeAdmin"" [label=""changeAdmin""];
""197_cancelAllDealsByMerchant"" [label=""cancelAllDealsByMerchant""];
""197_getReferenceHash"" [label=""getReferenceHash""];
""197_getMyReward"" [label=""getMyReward""];
""197_getAffiliateRewardInfo"" [label=""getAffiliateRewardInfo""];
""197_updateDeal"" [label=""updateDeal""];
""197_cancelDealByAdmin"" [label=""cancelDealByAdmin""];
""197_fillStake"" [label=""fillStake""];
""197_getMyStakeBack"" [label=""getMyStakeBack""];
""197_getDynamicDealInfo"" [label=""getDynamicDealInfo""];
""197_isDealCancelled"" [label=""isDealCancelled""];
""197_isDealClosed"" [label=""isDealClosed""];
""197_toggleBlockAffiliate"" [label=""toggleBlockAffiliate""];
""197_canBeCancelledByMerchant"" [label=""canBeCancelledByMerchant""];
""197_approveAffiliate"" [label=""approveAffiliate""];
""197_createDeal"" [label=""createDeal""];
}
"
0x087a7d49415371f3eaee702a94466603770a5f04.sol,MintableToken,"contract MintableToken is StandardTokenExt { using SafeMathLib for uint; bool public mintingFinished = false; mapping (address => bool) public mintAgents; event MintingAgentChanged(address addr, bool state); event Minted(address receiver, uint amount); function mint(address receiver, uint amount) onlyMintAgent canMint public { totalSupply_ = totalSupply_.plus(amount); balances[receiver] = balances[receiver].plus(amount); Transfer(0, receiver, amount); }",0,"subgraph cluster_2412_MintableToken {
label=""MintableToken"";
""2412_setMintAgent"" [label=""setMintAgent""];
""2412_mint"" [label=""mint""];
""2412_mint"" -> ""2412_onlyMintAgent"";
""2412_setMintAgent"" -> ""2412_canMint"";
""2412_setMintAgent"" -> ""2412_onlyOwner"";
""2412_mint"" -> ""2412_canMint"";
}
"
0x087a7d49415371f3eaee702a94466603770a5f04.sol,Crowdsale,"contract Crowdsale is CrowdsaleBase { bool public requireCustomerId; bool public requiredSignedAddress; address public signerAddress; function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) CrowdsaleBase(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) { }",0,"subgraph cluster_1681_CrowdsaleBase {
label=""CrowdsaleBase"";
""1681_isPricingSane"" [label=""isPricingSane""];
""1681_investInternal"" [label=""investInternal""];
""1681_CrowdsaleBase"" [label=""CrowdsaleBase""];
""1681_setFinalizeAgent"" [label=""setFinalizeAgent""];
""1681_loadRefund"" [label=""loadRefund""];
""1681_setMultisig"" [label=""setMultisig""];
""1681_isBreakingCap"" [label=""isBreakingCap""];
""1681_isCrowdsale"" [label=""isCrowdsale""];
""1681_isFinalizerSane"" [label=""isFinalizerSane""];
""1681_setEarlyParicipantWhitelist"" [label=""setEarlyParicipantWhitelist""];
""1681_refund"" [label=""refund""];
""1681_setEndsAt"" [label=""setEndsAt""];
""1681_setOwnerTestValue"" [label=""setOwnerTestValue""];
""1681_isMinimumGoalReached"" [label=""isMinimumGoalReached""];
""1681_assignTokens"" [label=""assignTokens""];
""1681_setPricingStrategy"" [label=""setPricingStrategy""];
""1681_getState"" [label=""getState""];
""1681_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""1681_finalize"" [label=""finalize""];
""1681_investInternal"" -> ""1681_assignTokens"";
""1681_investInternal"" -> ""1681_getState"";
""1681_setEarlyParicipantWhitelist"" -> ""1681_onlyOwner"";
""1681_setOwnerTestValue"" -> ""1681_onlyOwner"";
""1681_finalize"" -> ""1681_stopInEmergency"";
""1681_setPricingStrategy"" -> ""1681_onlyOwner"";
""1681_setMultisig"" -> ""1681_onlyOwner"";
""1681_finalize"" -> ""1681_onlyOwner"";
""1681_setEndsAt"" -> ""1681_onlyOwner"";
""1681_investInternal"" -> ""1681_stopInEmergency"";
""1681_setFinalizeAgent"" -> ""1681_onlyOwner"";
""1681_loadRefund"" -> ""1681_inState"";
""1681_refund"" -> ""1681_inState"";
""1681_CrowdsaleBase"" -> ""1681_setPricingStrategy"";
""1681_finalize"" -> ""1681_inState"";
""1681_getState"" -> ""1681_isMinimumGoalReached"";
""1681_getState"" -> ""1681_isCrowdsaleFull"";
""1681_investInternal"" -> ""1681_isBreakingCap"";
}
"
0x86fd7abfc9f80a1ffc1a2be01dc3859017801ae1.sol,CellBlocksToken,"contract CellBlocksToken is EIP20Interface, Ownable { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function CellBlocksToken() public { balances[msg.sender] = 25*(10**25); totalSupply = 25*(10**25); name = ; decimals = 18; symbol = ; }",0,"subgraph cluster_651_CellBlocksToken {
label=""CellBlocksToken"";
""651_CellBlocksToken"" [label=""CellBlocksToken""];
""651_balanceOf"" [label=""balanceOf""];
""651_transfer"" [label=""transfer""];
""651_allowance"" [label=""allowance""];
""651_transferFrom"" [label=""transferFrom""];
""651_halfPercent"" [label=""halfPercent""];
""651_approve"" [label=""approve""];
""651_burn"" [label=""burn""];
""651_transfer"" -> ""651_halfPercent"";
""651_transferFrom"" -> ""651_halfPercent"";
""651_transfer"" -> ""651_burn"";
""651_transferFrom"" -> ""651_burn"";
}
"
0x20827ab17e406d92e2c5cbc2948be0871e160d8c.sol,HDhundun,"contract HDhundun is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 300000000e18; uint256 public totalDistributed = 120000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 10000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_873_HDhundun {
label=""HDhundun"";
""873_getTokens"" [label=""getTokens""];
""873_allowance"" [label=""allowance""];
""873_fallback"" [label=""fallback""];
""873_finishDistribution"" [label=""finishDistribution""];
""873_HDhundun"" [label=""HDhundun""];
""873_approve"" [label=""approve""];
""873_withdraw"" [label=""withdraw""];
""873_transferOwnership"" [label=""transferOwnership""];
""873_burn"" [label=""burn""];
""873_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""873_distr"" [label=""distr""];
""873_transfer"" [label=""transfer""];
""873_getTokenBalance"" [label=""getTokenBalance""];
""873_balanceOf"" [label=""balanceOf""];
""873_transferFrom"" [label=""transferFrom""];
""873_fallback"" -> ""873_getTokens"";
""873_finishDistribution"" -> ""873_onlyOwner"";
""873_transfer"" -> ""873_onlyPayloadSize"";
""873_getTokens"" -> ""873_distr"";
""873_transferOwnership"" -> ""873_onlyOwner"";
""873_burn"" -> ""873_onlyOwner"";
""873_finishDistribution"" -> ""873_canDistr"";
""873_withdraw"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_canDistr"";
""873_withdrawForeignTokens"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_onlyWhitelist"";
""873_distr"" -> ""873_canDistr"";
""873_transferFrom"" -> ""873_onlyPayloadSize"";
}
"
0x01788f22bc0b685eed38a39df43b1ed5e4cb72aa.sol,ZZC,"contract ZZC { string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ZZC( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_371_ZZC {
label=""ZZC"";
""371_burnFrom"" [label=""burnFrom""];
""371_approve"" [label=""approve""];
""371__transfer"" [label=""_transfer""];
""371_ZZC"" [label=""ZZC""];
""371_burn"" [label=""burn""];
""371_transfer"" [label=""transfer""];
""371_transferFrom"" [label=""transferFrom""];
""371_approveAndCall"" [label=""approveAndCall""];
""371_transfer"" -> ""371__transfer"";
""371_approveAndCall"" -> ""371_approve"";
""371_transferFrom"" -> ""371__transfer"";
}
"
0x1cb82f4228719a53a6f5fc98de74f12eebdc31ed.sol,FusionchainSafeMath,"contract FusionchainSafeMath { function safeAdd(uint a, uint b) public pure returns (uint c) { c = a + b; require(c >= a); }",0,"subgraph cluster_96_FusionchainSafeMath {
label=""FusionchainSafeMath"";
""96_safeAdd"" [label=""safeAdd""];
""96_safeMul"" [label=""safeMul""];
""96_safeDiv"" [label=""safeDiv""];
""96_safeSub"" [label=""safeSub""];
}
"
0x2771ef07defb079c309542e11219d97b562ab6b0.sol,AVL,"contract AVL is ERC20 { uint public incirculation; mapping (address => uint) balances; mapping (address => mapping (address => uint)) allowed; mapping (address => uint) goo; function transfer(address _to, uint _value) public returns (bool success) { uint gas = msg.gas; if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); refund(gas+1158); return true; }",0,"subgraph cluster_348_AVL {
label=""AVL"";
""348_approve"" [label=""approve""];
""348_totalSupply"" [label=""totalSupply""];
""348_balanceOf"" [label=""balanceOf""];
""348_transfer"" [label=""transfer""];
""348_transferFrom"" [label=""transferFrom""];
""348_refund"" [label=""refund""];
""348_allowance"" [label=""allowance""];
""348_transferFrom"" -> ""348_refund"";
""348_transfer"" -> ""348_refund"";
}
"
0x1de89382684ce5a99fc9d3d4b709706d6a013571.sol,BaseGame,"contract BaseGame is ERC721Token { event NewAccount(address owner, uint tokenId, uint parentTokenId, uint blockNumber); event NewForecast(address owner, uint tokenId, uint forecastId, uint _gameId, uint _forecastData); struct Token { uint createBlockNumber; uint parentId; }",0,"subgraph cluster_2503_BaseGameLogic {
label=""BaseGameLogic"";
""2503_toForecastData"" [label=""toForecastData""];
""2503_gameResult"" [label=""gameResult""];
""2503_calculateScore"" [label=""calculateScore""];
""2503_forecastInfo"" [label=""forecastInfo""];
""2503_calculateTokenPrice"" [label=""calculateTokenPrice""];
""2503_setGameCloneFee"" [label=""setGameCloneFee""];
""2503_gameEdit"" [label=""gameEdit""];
""2503_createForecast"" [label=""createForecast""];
""2503_constructor"" [label=""constructor""];
""2503_getForecastCount"" [label=""getForecastCount""];
""2503_tokensOfOwner"" [label=""tokensOfOwner""];
""2503_tokenInfo"" [label=""tokenInfo""];
""2503_setBasePrice"" [label=""setBasePrice""];
""2503_createAccount"" [label=""createAccount""];
""2503_gameInfo"" [label=""gameInfo""];
""2503_setPriceFactor"" [label=""setPriceFactor""];
""2503_getScore"" [label=""getScore""];
""2503_forecastOfToken"" [label=""forecastOfToken""];
""2503_setPrizeFundFactor"" [label=""setPrizeFundFactor""];
""2503__addToFund"" [label=""_addToFund""];
""2503_cloneAccount"" [label=""cloneAccount""];
""2503_getForecastScore"" [label=""getForecastScore""];
""2503_setBasePrice"" -> ""2503_onlyAdmin"";
""2503_getForecastScore"" -> ""2503_calculateScore"";
""2503_createAccount"" -> ""2503_whenNotPaused"";
""2503_tokensOfOwner"" -> ""2503_balanceOf"";
""2503_constructor"" -> ""2503_constructor"";
""2503_gameEdit"" -> ""2503_onlyAdmin"";
""2503_tokenInfo"" -> ""2503_getScore"";
""2503_setPriceFactor"" -> ""2503_onlyAdmin"";
""2503_getForecastCount"" -> ""2503_getForecastCount"";
""2503_setPrizeFundFactor"" -> ""2503_onlyAdmin"";
""2503_createForecast"" -> ""2503_onlyOwnerOf"";
""2503_calculateTokenPrice"" -> ""2503_getForecastCount"";
""2503_tokenInfo"" -> ""2503_getForecastCount"";
""2503_createAccount"" -> ""2503__addToFund"";
""2503_cloneAccount"" -> ""2503__createToken"";
""2503_createForecast"" -> ""2503_whenNotPaused"";
""2503_createForecast"" -> ""2503_exists"";
""2503_cloneAccount"" -> ""2503_whenNotPaused"";
""2503_getScore"" -> ""2503_getScore"";
""2503__addToFund"" -> ""2503_whenNotPaused"";
""2503_setGameCloneFee"" -> ""2503_onlyAdmin"";
""2503_createAccount"" -> ""2503__createToken"";
""2503_calculateTokenPrice"" -> ""2503_exists"";
""2503_createForecast"" -> ""2503_toForecastData"";
""2503_tokensOfOwner"" -> ""2503_totalSupply"";
""2503_createForecast"" -> ""2503__createForecast"";
""2503_tokenInfo"" -> ""2503_calculateTokenPrice"";
""2503_cloneAccount"" -> ""2503__addToFund"";
""2503_gameResult"" -> ""2503_onlyAdmin"";
""2503_getScore"" -> ""2503_forecastOfToken"";
""2503_cloneAccount"" -> ""2503_calculateTokenPrice"";
""2503_getForecastCount"" -> ""2503_exists"";
""2503_cloneAccount"" -> ""2503_exists"";
""2503_getScore"" -> ""2503_calculateScore"";
}
"
0x1ba3845bdc6ff17de21f4211b9d24d5544e878b2.sol,BBArtefact,"contract BBArtefact is Ownable, ERC721Token { uint public incrementId; struct Artefact { uint id; uint typeId; uint packId; uint packTypeId; }",0,"subgraph cluster_1479_BBArtefact {
label=""BBArtefact"";
""1479_burn"" [label=""burn""];
""1479_constructor"" [label=""constructor""];
""1479_setTokenURI"" [label=""setTokenURI""];
""1479_mint"" [label=""mint""];
""1479_setManager"" [label=""setManager""];
""1479_setTokenURI"" -> ""1479__setTokenURI"";
""1479_mint"" -> ""1479_onlyOwnerOrManager"";
""1479_setManager"" -> ""1479_onlyOwner"";
""1479_burn"" -> ""1479__burn"";
""1479_constructor"" -> ""1479_constructor"";
""1479_burn"" -> ""1479_onlyOwnerOf"";
""1479_setTokenURI"" -> ""1479_onlyOwnerOrManager"";
""1479_mint"" -> ""1479__mint"";
}
"
0x6b31a2ef5986d283332e4a3a608adb3c09ffdd13.sol,ERC165,contract ERC165 is IERC165 { bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7; mapping(bytes4 => bool) private _supportedInterfaces; constructor () internal { _registerInterface(_InterfaceId_ERC165); },0,"subgraph cluster_941_ERC165 {
label=""ERC165"";
""941_supportsInterface"" [label=""supportsInterface""];
""941_constructor"" [label=""constructor""];
""941__registerInterface"" [label=""_registerInterface""];
""941_constructor"" -> ""941__registerInterface"";
}
"
0xc59cb23295e2deeb66bd090acb6b02be8d30a11f.sol,KUBToken,"contract KUBToken is ERC20Token, TokenHolder { uint256 constant public KUB_UNIT = 10 ** 10; uint256 public totalSupply = 500 * (10**6) * KUB_UNIT; address public kublaiWalletOwner; uint256 public totalAllocated = 0; uint256 constant public endTime = 1509494340; bool internal isReleasedToPublic = false; uint256 internal teamTranchesReleased = 0; uint256 internal maxTeamTranches = 8; modifier safeTimelock() { require(now >= endTime + 6 * 4 weeks); _; }",0,"subgraph cluster_742_KUBToken {
label=""KUBToken"";
""742_KUBToken"" [label=""KUBToken""];
""742_isTransferAllowed"" [label=""isTransferAllowed""];
""742_releaseApolloTokens"" [label=""releaseApolloTokens""];
""742_allowTransfers"" [label=""allowTransfers""];
""742_KUBToken"" -> ""742_ERC20Token"";
""742_releaseApolloTokens"" -> ""742_ownerOnly"";
""742_releaseApolloTokens"" -> ""742_safeTimelock"";
""742_releaseApolloTokens"" -> ""742_safeAdd"";
""742_allowTransfers"" -> ""742_ownerOnly"";
}
"
0xa1ad52ff49fc70b7920b7d02483a58beb15d492b.sol,FoMo3Dlong,"contract FoMo3Dlong is modularLong { using SafeMath for *; using NameFilter for string; using F3DKeysCalcLong for uint256; address private owner = 0x0c204d9C438553a107B29cdE1d1e7954673b29B3; address private opAddress = 0x0c204d9C438553a107B29cdE1d1e7954673b29B3; address private comAddress = 0x24D160101C72c035287f772a8ac2b744a477F489; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x0f717ffff71e639636fcdd33727ee8c17c4724bf); string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 constant private rndInit_ = 2 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 2 hours; uint256 constant private comDropGap_ = 24 hours; uint256 constant private rndNTR_ = 168 hours; uint256 public airDropPot_; uint256 public airDropPot2_; uint256 public airDropTracker_ = 0; uint256 public airDropTracker2_ = 0; uint256 public rID_; uint256 public comReWards_; uint256 public comAirDrop_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => uint256) public inviteCount_; mapping (address => bool) public addrLock_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => uint256[10]) public lastTen_; mapping (uint256 => uint256) public roundBetCount_; mapping (uint256 => mapping (uint256 =>uint256)) public comDropLastTime_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(48,0); fees_[1] = F3Ddatasets.TeamFee(33,0); fees_[2] = F3Ddatasets.TeamFee(18,0); potSplit_[0] = F3Ddatasets.PotSplit(10,20); potSplit_[1] = F3Ddatasets.PotSplit(5,20); potSplit_[2] = F3Ddatasets.PotSplit(20,20); }",0,"subgraph cluster_5035_FoMo3Dlong {
label=""FoMo3Dlong"";
""5035_shareLastTen"" [label=""shareLastTen""];
""5035_constructor"" [label=""constructor""];
""5035_verifyTeam"" [label=""verifyTeam""];
""5035_receivePlayerInfo"" [label=""receivePlayerInfo""];
""5035_receivePlayerNameList"" [label=""receivePlayerNameList""];
""5035_withdrawEarnings"" [label=""withdrawEarnings""];
""5035_core"" [label=""core""];
""5035_reLoadXaddr"" [label=""reLoadXaddr""];
""5035_buyXname"" [label=""buyXname""];
""5035_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""5035_updateMasks"" [label=""updateMasks""];
""5035_fallback"" [label=""fallback""];
""5035_updateTimer"" [label=""updateTimer""];
""5035_distributeExternal"" [label=""distributeExternal""];
""5035_withdraw"" [label=""withdraw""];
""5035_distributeInternal"" [label=""distributeInternal""];
""5035_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""5035_reLoadXname"" [label=""reLoadXname""];
""5035_getPlayerVaults"" [label=""getPlayerVaults""];
""5035_reLoadCore"" [label=""reLoadCore""];
""5035_getTimeLeft"" [label=""getTimeLeft""];
""5035_updateGenVault"" [label=""updateGenVault""];
""5035_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""5035_buyXid"" [label=""buyXid""];
""5035_affsend"" [label=""affsend""];
""5035_determinePID"" [label=""determinePID""];
""5035_potSwap"" [label=""potSwap""];
""5035_air2"" [label=""air2""];
""5035_endRound"" [label=""endRound""];
""5035_registerNameXID"" [label=""registerNameXID""];
""5035_airdrop2"" [label=""airdrop2""];
""5035_registerNameXname"" [label=""registerNameXname""];
""5035_activate"" [label=""activate""];
""5035_airdrop"" [label=""airdrop""];
""5035_managePlayer"" [label=""managePlayer""];
""5035_iWantXKeys"" [label=""iWantXKeys""];
""5035_registerNameXaddr"" [label=""registerNameXaddr""];
""5035_buyCore"" [label=""buyCore""];
""5035_getBuyPrice"" [label=""getBuyPrice""];
""5035_comDrop"" [label=""comDrop""];
""5035_buyXaddr"" [label=""buyXaddr""];
""5035_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""5035_reLoadXid"" [label=""reLoadXid""];
""5035_endTx"" [label=""endTx""];
""5035_calcKeysReceived"" [label=""calcKeysReceived""];
""5035_reLoadXid"" -> ""5035_isHuman"";
""5035_withdrawEarnings"" -> ""5035_updateGenVault"";
""5035_withdraw"" -> ""5035_isHuman"";
""5035_buyXid"" -> ""5035_isActivated"";
""5035_withdraw"" -> ""5035_isActivated"";
""5035_reLoadXaddr"" -> ""5035_reLoadCore"";
""5035_reLoadCore"" -> ""5035_withdrawEarnings"";
""5035_core"" -> ""5035_air2"";
""5035_buyXaddr"" -> ""5035_isWithinLimits"";
""5035_reLoadXname"" -> ""5035_isHuman"";
""5035_buyXname"" -> ""5035_buyCore"";
""5035_fallback"" -> ""5035_isActivated"";
""5035_registerNameXname"" -> ""5035_isHuman"";
""5035_core"" -> ""5035_comDrop"";
""5035_getPlayerInfoByAddress"" -> ""5035_calcUnMaskedEarnings"";
""5035_core"" -> ""5035_updateTimer"";
""5035_reLoadXid"" -> ""5035_isActivated"";
""5035_buyCore"" -> ""5035_endRound"";
""5035_fallback"" -> ""5035_isHuman"";
""5035_reLoadXaddr"" -> ""5035_verifyTeam"";
""5035_getPlayerVaults"" -> ""5035_calcUnMaskedEarnings"";
""5035_air2"" -> ""5035_airdrop2"";
""5035_reLoadXname"" -> ""5035_reLoadCore"";
""5035_buyXname"" -> ""5035_isHuman"";
""5035_updateGenVault"" -> ""5035_calcUnMaskedEarnings"";
""5035_core"" -> ""5035_airdrop"";
""5035_buyXaddr"" -> ""5035_isActivated"";
""5035_endRound"" -> ""5035_shareLastTen"";
""5035_buyXaddr"" -> ""5035_isHuman"";
""5035_reLoadXaddr"" -> ""5035_isWithinLimits"";
""5035_managePlayer"" -> ""5035_updateGenVault"";
""5035_fallback"" -> ""5035_determinePID"";
""5035_getPlayerVaults"" -> ""5035_getPlayerVaultsHelper"";
""5035_withdraw"" -> ""5035_withdrawEarnings"";
""5035_buyXname"" -> ""5035_verifyTeam"";
""5035_core"" -> ""5035_endTx"";
""5035_reLoadXaddr"" -> ""5035_isActivated"";
""5035_fallback"" -> ""5035_buyCore"";
""5035_reLoadXname"" -> ""5035_verifyTeam"";
""5035_core"" -> ""5035_managePlayer"";
""5035_buyCore"" -> ""5035_core"";
""5035_distributeInternal"" -> ""5035_updateMasks"";
""5035_buyXname"" -> ""5035_isActivated"";
""5035_buyXname"" -> ""5035_determinePID"";
""5035_reLoadXaddr"" -> ""5035_isHuman"";
""5035_core"" -> ""5035_distributeInternal"";
""5035_buyXaddr"" -> ""5035_buyCore"";
""5035_fallback"" -> ""5035_isWithinLimits"";
""5035_buyXaddr"" -> ""5035_verifyTeam"";
""5035_buyXid"" -> ""5035_buyCore"";
""5035_buyXid"" -> ""5035_determinePID"";
""5035_reLoadXid"" -> ""5035_isWithinLimits"";
""5035_withdraw"" -> ""5035_endRound"";
""5035_buyXid"" -> ""5035_isWithinLimits"";
""5035_buyXid"" -> ""5035_verifyTeam"";
""5035_registerNameXID"" -> ""5035_isHuman"";
""5035_distributeExternal"" -> ""5035_affsend"";
""5035_buyXaddr"" -> ""5035_determinePID"";
""5035_reLoadXid"" -> ""5035_verifyTeam"";
""5035_reLoadXname"" -> ""5035_isActivated"";
""5035_reLoadCore"" -> ""5035_core"";
""5035_core"" -> ""5035_distributeExternal"";
""5035_registerNameXaddr"" -> ""5035_isHuman"";
""5035_buyXname"" -> ""5035_isWithinLimits"";
""5035_reLoadXid"" -> ""5035_reLoadCore"";
""5035_reLoadXname"" -> ""5035_isWithinLimits"";
""5035_reLoadCore"" -> ""5035_endRound"";
""5035_buyXid"" -> ""5035_isHuman"";
}
"
0x6dee0a976370ee9f0f8c4619ab3386441a42ceb3.sol,CoinifinexToken,"contract CoinifinexToken { uint256 constant public TOTAL_TOKEN = 10 ** 9; uint256 constant public TOKEN_FOR_ICO = 650 * 10 ** 6; uint256 constant public TOKEN_FOR_COMPANY = 200 * 10 ** 6; uint256 constant public TOKEN_FOR_BONUS = 50 * 10 ** 6; mapping (address => uint256) public tokenForTeam; mapping (address => uint256) public tokenForTeamGet; address[] public teamAddress; uint public startTime; string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function CoinifinexToken( ) public { totalSupply = TOTAL_TOKEN * 10 ** uint256(decimals); name = ; symbol = ; startTime = 1538265600; tokenForTeam[0x4B7786bD8eB1F738699290Bb83cA8E28fEDea4b0] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x040440286a443822211dDe0e7E9DA3F49aF2EBC7] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x4f7a5A2BafAd56562ac4Ccc85FE004BB84435F71] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x7E0D3AaaCB57b0Fd109D9F16e00a375ECa48b41D] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xc456aC342f17E7003A03479e275fDA322dE38681] = 500 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0xB19d3c4c494B5a3d5d72E0e47076AefC1c643D24] = 300 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0x88311485647e19510298d7Dbf0a346D5B808DF03] = 500 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F] = 500 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0x45cD08764e06c1563d4B13b85cCE7082Be0bA6D1] = 100 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0xB08924a0D0AF93Fa29e5B0ba103A339704cdeFdb] = 100 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0xa8bD7C22d37ea1887b425a9B0A3458A186bf6E77] = 1 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xe387125f1b24E59f7811d26fbb26bdA1c599b061] = 1 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xC5b644c5fDe01fce561496179a8Bb7886349bD75] = 1 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xe4dB43bcB8aecFf58C720F70414A9d36Fd7B9F78] = 5 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xf28edB52E808cd9DCe18A87fD94D373D6B9f65ae] = 5 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x87CE30ad0B66266b30c206a9e39A3FC0970db5eF] = 5 * 10 ** 6 * 10 ** uint256(decimals); teamAddress.push(0x4B7786bD8eB1F738699290Bb83cA8E28fEDea4b0); teamAddress.push(0x040440286a443822211dDe0e7E9DA3F49aF2EBC7); teamAddress.push(0x4f7a5A2BafAd56562ac4Ccc85FE004BB84435F71); teamAddress.push(0x7E0D3AaaCB57b0Fd109D9F16e00a375ECa48b41D); teamAddress.push(0xc456aC342f17E7003A03479e275fDA322dE38681); teamAddress.push(0xB19d3c4c494B5a3d5d72E0e47076AefC1c643D24); teamAddress.push(0x88311485647e19510298d7Dbf0a346D5B808DF03); teamAddress.push(0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F); teamAddress.push(0x45cD08764e06c1563d4B13b85cCE7082Be0bA6D1); teamAddress.push(0xB08924a0D0AF93Fa29e5B0ba103A339704cdeFdb); teamAddress.push(0xa8bD7C22d37ea1887b425a9B0A3458A186bf6E77); teamAddress.push(0xe387125f1b24E59f7811d26fbb26bdA1c599b061); teamAddress.push(0xC5b644c5fDe01fce561496179a8Bb7886349bD75); teamAddress.push(0xe4dB43bcB8aecFf58C720F70414A9d36Fd7B9F78); teamAddress.push(0xf28edB52E808cd9DCe18A87fD94D373D6B9f65ae); teamAddress.push(0x87CE30ad0B66266b30c206a9e39A3FC0970db5eF); uint arrayLength = teamAddress.length; for (uint i=0; i<arrayLength; i++) { tokenForTeamGet[teamAddress[i]] = tokenForTeam[teamAddress[i]] * 1 / 10; balanceOf[teamAddress[i]] = tokenForTeamGet[teamAddress[i]]; tokenForTeam[teamAddress[i]] -= tokenForTeamGet[teamAddress[i]]; }",0,"subgraph cluster_930_CoinifinexToken {
label=""CoinifinexToken"";
""930_burnFrom"" [label=""burnFrom""];
""930_transferFrom"" [label=""transferFrom""];
""930__transfer"" [label=""_transfer""];
""930_burn"" [label=""burn""];
""930_transfer"" [label=""transfer""];
""930_CoinifinexToken"" [label=""CoinifinexToken""];
""930_approveAndCall"" [label=""approveAndCall""];
""930_getTeamFund"" [label=""getTeamFund""];
""930_approve"" [label=""approve""];
""930_approveAndCall"" -> ""930_approve"";
""930_transfer"" -> ""930__transfer"";
""930_transferFrom"" -> ""930__transfer"";
}
"
0x711256406c2e9072fbaee5b67d5a893f66a3e707.sol,continuousBacking,"contract continuousBacking { event CreatedReward(uint256 index,uint256 numAvailable); event ClaimedReward(uint256 index,uint256 totalAmount,uint256 numUnitsDesired,uint256 hostCut,uint256 creatorCut,address backer); event ModifiedNumAvailable(uint256 index,uint256 newNumAvailable); address public ELIX_ADDRESS; uint256 public MAX_HOST_PERCENT; uint256 public HOST_CUT; uint256 public MAX_NUM_AVAIL; struct Reward { string title; address host; address creator; uint256 numTaken; uint256 numAvailable; uint256 spmPreventionAmt; }",0,"subgraph cluster_428_continuousBacking {
label=""continuousBacking"";
""428_reviseNumAvailable"" [label=""reviseNumAvailable""];
""428_continuousBacking"" [label=""continuousBacking""];
""428_backAtIndex"" [label=""backAtIndex""];
""428_returnHostAndCreatorCut"" [label=""returnHostAndCreatorCut""];
""428_defineReward"" [label=""defineReward""];
""428_backAtIndex"" -> ""428_returnHostAndCreatorCut"";
}
"
0x78c292d1445e6b9558bf42e8bc369271ded062ea.sol,CyberMusicToken,"contract CyberMusicToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 20000000000e8; uint256 public totalDistributed = 0; uint256 public constant MIN_PURCHASE = 1 ether / 100; uint256 public tokensPerEth = 20000000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_948_CyberMusicToken {
label=""CyberMusicToken"";
""948_updateTokensPerEth"" [label=""updateTokensPerEth""];
""948_withdraw"" [label=""withdraw""];
""948_transferFrom"" [label=""transferFrom""];
""948_approve"" [label=""approve""];
""948_finishDistribution"" [label=""finishDistribution""];
""948_burn"" [label=""burn""];
""948_distr"" [label=""distr""];
""948_transfer"" [label=""transfer""];
""948_CyberMusicToken"" [label=""CyberMusicToken""];
""948_transferTokenTo"" [label=""transferTokenTo""];
""948_allowance"" [label=""allowance""];
""948_transferOwnership"" [label=""transferOwnership""];
""948_transferTokenToMultiple"" [label=""transferTokenToMultiple""];
""948_getTokens"" [label=""getTokens""];
""948_getTokenBalance"" [label=""getTokenBalance""];
""948_fallback"" [label=""fallback""];
""948_doAirdrop"" [label=""doAirdrop""];
""948_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""948_balanceOf"" [label=""balanceOf""];
""948_transferTokenToMultiple"" -> ""948_doAirdrop"";
""948_withdraw"" -> ""948_onlyOwner"";
""948_transferOwnership"" -> ""948_onlyOwner"";
""948_transfer"" -> ""948_onlyPayloadSize"";
""948_burn"" -> ""948_onlyOwner"";
""948_distr"" -> ""948_canDistr"";
""948_CyberMusicToken"" -> ""948_distr"";
""948_withdrawForeignTokens"" -> ""948_onlyOwner"";
""948_getTokens"" -> ""948_canDistr"";
""948_transferTokenTo"" -> ""948_onlyOwner"";
""948_updateTokensPerEth"" -> ""948_onlyOwner"";
""948_transferTokenTo"" -> ""948_doAirdrop"";
""948_finishDistribution"" -> ""948_canDistr"";
""948_finishDistribution"" -> ""948_onlyOwner"";
""948_transferFrom"" -> ""948_onlyPayloadSize"";
""948_transferTokenToMultiple"" -> ""948_onlyOwner"";
""948_fallback"" -> ""948_getTokens"";
""948_getTokens"" -> ""948_distr"";
}
"
0x584bf48227509f93ae7c7f2ac2e3e4364d58050b.sol,BeatToken,contract BeatToken is CappedToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; function BeatToken(uint256 _cap) CappedToken(_cap) public { },0,"subgraph cluster_868_BeatTokenCrowdsale {
label=""BeatTokenCrowdsale"";
""868_finalize"" [label=""finalize""];
""868_calculateBeatWeiAmount"" [label=""calculateBeatWeiAmount""];
""868_fallback"" [label=""fallback""];
""868_buyTokens"" [label=""buyTokens""];
""868_isWithinTokenAllocLimit"" [label=""isWithinTokenAllocLimit""];
""868_isWithinValidIcoPhase"" [label=""isWithinValidIcoPhase""];
""868_BeatTokenCrowdsale"" [label=""BeatTokenCrowdsale""];
""868_start"" [label=""start""];
""868_determineCurrentStage"" [label=""determineCurrentStage""];
""868_setEtherPriceInEuroCent"" [label=""setEtherPriceInEuroCent""];
""868_buyTokens"" -> ""868_calculateBeatWeiAmount"";
""868_finalize"" -> ""868_onlyOwner"";
""868_fallback"" -> ""868_buyTokens"";
""868_buyTokens"" -> ""868_isWithinTokenAllocLimit"";
""868_setEtherPriceInEuroCent"" -> ""868_onlyOwner"";
""868_buyTokens"" -> ""868_determineCurrentStage"";
""868_buyTokens"" -> ""868_isWithinValidIcoPhase"";
""868_start"" -> ""868_onlyOwner"";
}
"
0x025dce2d39a46296766db7cac8c322e8f59cd5d9.sol,Reputation,contract Reputation { address owner; mapping(address => bool) whitelist; mapping(address => int) ratings; constructor () public { owner = msg.sender; },0,"subgraph cluster_84_Reputation {
label=""Reputation"";
""84_getMy"" [label=""getMy""];
""84_get"" [label=""get""];
""84_change"" [label=""change""];
""84_constructor"" [label=""constructor""];
""84_addToWhitelist"" [label=""addToWhitelist""];
}
"
0xd47c54b18731ef523498ff44e5301041b231be7c.sol,Pausable,contract Pausable is Ownable { bool public paused; event Paused(address account); event Unpaused(address account); constructor() internal { paused = false; },0,"subgraph cluster_263_Pausable {
label=""Pausable"";
""263_unpause"" [label=""unpause""];
""263_constructor"" [label=""constructor""];
""263_pause"" [label=""pause""];
""263_unpause"" -> ""263_whenPaused"";
""263_pause"" -> ""263_onlyOwner"";
""263_unpause"" -> ""263_onlyOwner"";
""263_pause"" -> ""263_whenNotPaused"";
}
"
0xf3a4d8e3f5bfbab3b2d42e46d23c461eb866d16e.sol,FeeMultiToken,"contract FeeMultiToken is Ownable, MultiToken { using CheckedERC20 for ERC20; uint256 public constant TOTAL_PERCRENTS = 1000000; uint256 public lendFee; uint256 public changeFee; uint256 public refferalFee; function init(ERC20[] _tokens, uint256[] _weights, string _name, string _symbol, uint8 ) public { super.init(_tokens, _weights, _name, _symbol, 18); }",0,"subgraph cluster_2289_FeeMultiToken {
label=""FeeMultiToken"";
""2289_setLendFee"" [label=""setLendFee""];
""2289_setRefferalFee"" [label=""setRefferalFee""];
""2289_change"" [label=""change""];
""2289_getReturn"" [label=""getReturn""];
""2289_lend"" [label=""lend""];
""2289_setChangeFee"" [label=""setChangeFee""];
""2289_changeWithRef"" [label=""changeWithRef""];
""2289_init"" [label=""init""];
""2289_getReturn"" -> ""2289_getReturn"";
""2289_lend"" -> ""2289_lend"";
""2289_setRefferalFee"" -> ""2289_onlyOwner"";
""2289_changeWithRef"" -> ""2289_change"";
""2289_setLendFee"" -> ""2289_onlyOwner"";
""2289_init"" -> ""2289_init"";
""2289_change"" -> ""2289_changeWithRef"";
""2289_setChangeFee"" -> ""2289_onlyOwner"";
}
"
0x02e582682aa7b4dcc3f7574c468ef61b29545404.sol,CloneWars,"contract CloneWars { using SafeMath for uint; event MarketBoost( uint amountSent ); event NorsefireSwitch( address from, address to, uint price ); uint256 public clones_to_create_one_idea = 2 days; uint256 public starting_clones = 232; uint256 PSN = 10000; uint256 PSNH = 5000; address actualNorse = 0x4F4eBF556CFDc21c3424F85ff6572C77c514Fcae; uint256 public marketIdeas; uint256 public norsefirePrice; bool public initialized; address public currentNorsefire; mapping (address => uint256) public arrayOfClones; mapping (address => uint256) public claimedIdeas; mapping (address => uint256) public lastDeploy; mapping (address => address) public referrals; constructor () public { initialized = false; norsefirePrice = 0.1 ether; currentNorsefire = 0x1337a4aEfd5ec486E6e97b1d0aE055FAC8D879dE; }",0,"subgraph cluster_720_CloneWars {
label=""CloneWars"";
""720_boostCloneMarket"" [label=""boostCloneMarket""];
""720_deployIdeas"" [label=""deployIdeas""];
""720_calculateIdeaBuy"" [label=""calculateIdeaBuy""];
""720_getMyIdeas"" [label=""getMyIdeas""];
""720_hijackClones"" [label=""hijackClones""];
""720_min"" [label=""min""];
""720_devFee"" [label=""devFee""];
""720_calculateIdeaSell"" [label=""calculateIdeaSell""];
""720_getMyClones"" [label=""getMyClones""];
""720_releaseTheOriginal"" [label=""releaseTheOriginal""];
""720_buyIdeas"" [label=""buyIdeas""];
""720_getBalance"" [label=""getBalance""];
""720_constructor"" [label=""constructor""];
""720_getIdeasSinceLastDeploy"" [label=""getIdeasSinceLastDeploy""];
""720_sellIdeas"" [label=""sellIdeas""];
""720_calculateTrade"" [label=""calculateTrade""];
""720_calculateIdeaBuySimple"" [label=""calculateIdeaBuySimple""];
""720_becomeNorsefire"" [label=""becomeNorsefire""];
""720_getNorsefirePrice"" [label=""getNorsefirePrice""];
""720_getIdeasSinceLastDeploy"" -> ""720_min"";
""720_getMyIdeas"" -> ""720_getIdeasSinceLastDeploy"";
""720_calculateIdeaSell"" -> ""720_calculateTrade"";
""720_sellIdeas"" -> ""720_devFee"";
""720_deployIdeas"" -> ""720_getMyIdeas"";
""720_sellIdeas"" -> ""720_getMyIdeas"";
""720_becomeNorsefire"" -> ""720_boostCloneMarket"";
""720_sellIdeas"" -> ""720_calculateIdeaSell"";
""720_releaseTheOriginal"" -> ""720_boostCloneMarket"";
""720_calculateIdeaBuy"" -> ""720_calculateTrade"";
""720_calculateIdeaBuySimple"" -> ""720_calculateIdeaBuy"";
""720_buyIdeas"" -> ""720_devFee"";
""720_buyIdeas"" -> ""720_calculateIdeaBuy"";
}
"
0x1ee464894bfa36751d1cf84126e4ff24c06b9360.sol,QuantstampBountyData,contract QuantstampBountyData is Whitelist { using SafeMath for uint256; using LinkedListLib for LinkedListLib.LinkedList; uint256 constant internal NULL = 0; uint256 constant internal HEAD = 0; bool constant internal PREV = false; bool constant internal NEXT = true; uint256 constant internal NUMBER_OF_PHASES = 3; struct Bounty { address submitter; string contractAddress; uint256 size; uint256 minVotes; uint256 duration; uint256 judgeDeposit; uint256 hunterDeposit; uint256 initiationTimestamp; bool remainingFeesWithdrawn; uint256 numApprovedBugs; },0,"subgraph cluster_6717_QuantstampBountyData {
label=""QuantstampBountyData"";
""6717_getBountyDuration"" [label=""getBountyDuration""];
""6717_removeBugFromHunter"" [label=""removeBugFromHunter""];
""6717_getBountyJudgeCommitPhaseEndTimestamp"" [label=""getBountyJudgeCommitPhaseEndTimestamp""];
""6717_getBountyJudgeDeposit"" [label=""getBountyJudgeDeposit""];
""6717_getBugPollId"" [label=""getBugPollId""];
""6717_getBountyInitiationTimestamp"" [label=""getBountyInitiationTimestamp""];
""6717_getBountyHunterDeposit"" [label=""getBountyHunterDeposit""];
""6717_addBounty"" [label=""addBounty""];
""6717_getBugCommitNumTokens"" [label=""getBugCommitNumTokens""];
""6717_isJudgingPeriod"" [label=""isJudgingPeriod""];
""6717_getBugIdFromPollId"" [label=""getBugIdFromPollId""];
""6717_getBountyContractAddress"" [label=""getBountyContractAddress""];
""6717_getBugNumTokens"" [label=""getBugNumTokens""];
""6717_getBountyRevealPhaseEndTimestamp"" [label=""getBountyRevealPhaseEndTimestamp""];
""6717_getBugCommitRevealStartTimestamp"" [label=""getBugCommitRevealStartTimestamp""];
""6717_getNumApprovedBugs"" [label=""getNumApprovedBugs""];
""6717_getBountySize"" [label=""getBountySize""];
""6717_getBountyCommitPhaseEndTimestamp"" [label=""getBountyCommitPhaseEndTimestamp""];
""6717_getBountyJudgePhaseStartTimestamp"" [label=""getBountyJudgePhaseStartTimestamp""];
""6717_getHunterReportedBugsCount"" [label=""getHunterReportedBugsCount""];
""6717_getBountyJudgePhaseEndTimestamp"" [label=""getBountyJudgePhaseEndTimestamp""];
""6717_constructor"" [label=""constructor""];
""6717_isCommitPeriod"" [label=""isCommitPeriod""];
""6717_getBountyRemainingFeesWithdrawn"" [label=""getBountyRemainingFeesWithdrawn""];
""6717_setBountyRemainingFeesWithdrawn"" [label=""setBountyRemainingFeesWithdrawn""];
""6717_getFirstRevealedBug"" [label=""getFirstRevealedBug""];
""6717_getBugHunter"" [label=""getBugHunter""];
""6717_getBountySubmitter"" [label=""getBountySubmitter""];
""6717_addBugCommitment"" [label=""addBugCommitment""];
""6717_getBugBountyId"" [label=""getBugBountyId""];
""6717_updateNumApprovedBugs"" [label=""updateNumApprovedBugs""];
""6717_getBugCommitRevealEndTimestamp"" [label=""getBugCommitRevealEndTimestamp""];
""6717_getListHeadConstant"" [label=""getListHeadConstant""];
""6717_addBug"" [label=""addBug""];
""6717_canClaimJudgeAward"" [label=""canClaimJudgeAward""];
""6717_bugRevealPeriodExpired"" [label=""bugRevealPeriodExpired""];
""6717_bountyActive"" [label=""bountyActive""];
""6717_removeBugCommitment"" [label=""removeBugCommitment""];
""6717_getNextRevealedBug"" [label=""getNextRevealedBug""];
""6717_getBugCommitBugDescriptionHash"" [label=""getBugCommitBugDescriptionHash""];
""6717_addBugToHunter"" [label=""addBugToHunter""];
""6717_bugRevealDelayPeriodActive"" [label=""bugRevealDelayPeriodActive""];
""6717_getBugCommitCommitTimestamp"" [label=""getBugCommitCommitTimestamp""];
""6717_getBugDescription"" [label=""getBugDescription""];
""6717_bugRevealPeriodActive"" [label=""bugRevealPeriodActive""];
""6717_getBountyJudgeRevealDuration"" [label=""getBountyJudgeRevealDuration""];
""6717_isRevealPeriod"" [label=""isRevealPeriod""];
""6717_getBountyRevealPhaseStartTimestamp"" [label=""getBountyRevealPhaseStartTimestamp""];
""6717_getBugCommitBountyId"" [label=""getBugCommitBountyId""];
""6717_getBugCommitCommitter"" [label=""getBugCommitCommitter""];
""6717_getNextBugFromHunter"" [label=""getNextBugFromHunter""];
""6717_getBountyMinVotes"" [label=""getBountyMinVotes""];
""6717_getBountyRevealPhaseStartTimestamp"" -> ""6717_getBountyCommitPhaseEndTimestamp"";
""6717_getBountyCommitPhaseEndTimestamp"" -> ""6717_getBountyDuration"";
""6717_addBugToHunter"" -> ""6717_onlyWhitelisted"";
""6717_addBugCommitment"" -> ""6717_getBountyRevealPhaseStartTimestamp"";
""6717_addBounty"" -> ""6717_onlyWhitelisted"";
""6717_bountyActive"" -> ""6717_getBountyDuration"";
""6717_isRevealPeriod"" -> ""6717_getBountyRevealPhaseStartTimestamp"";
""6717_isCommitPeriod"" -> ""6717_getBountyCommitPhaseEndTimestamp"";
""6717_getBountyJudgeRevealDuration"" -> ""6717_getBountyJudgeCommitPhaseEndTimestamp"";
""6717_getFirstRevealedBug"" -> ""6717_getNextRevealedBug"";
""6717_isJudgingPeriod"" -> ""6717_getBountyJudgePhaseEndTimestamp"";
""6717_getBountyJudgePhaseEndTimestamp"" -> ""6717_getBountyDuration"";
""6717_removeBugCommitment"" -> ""6717_onlyWhitelisted"";
""6717_addBugCommitment"" -> ""6717_getBountyRevealPhaseEndTimestamp"";
""6717_canClaimJudgeAward"" -> ""6717_getBugPollId"";
""6717_getBountyJudgeCommitPhaseEndTimestamp"" -> ""6717_getBountyDuration"";
""6717_setBountyRemainingFeesWithdrawn"" -> ""6717_onlyWhitelisted"";
""6717_bountyActive"" -> ""6717_getBountyInitiationTimestamp"";
""6717_getBountyJudgeCommitPhaseEndTimestamp"" -> ""6717_getBountyJudgePhaseStartTimestamp"";
""6717_updateNumApprovedBugs"" -> ""6717_getBugBountyId"";
""6717_getBountyRevealPhaseEndTimestamp"" -> ""6717_getBountyCommitPhaseEndTimestamp"";
""6717_getBountyJudgeRevealDuration"" -> ""6717_getBountyJudgePhaseEndTimestamp"";
""6717_addBugCommitment"" -> ""6717_onlyWhitelisted"";
""6717_addBug"" -> ""6717_onlyWhitelisted"";
""6717_isRevealPeriod"" -> ""6717_getBountyRevealPhaseEndTimestamp"";
""6717_updateNumApprovedBugs"" -> ""6717_getBugIdFromPollId"";
""6717_isJudgingPeriod"" -> ""6717_getBountyJudgePhaseStartTimestamp"";
""6717_canClaimJudgeAward"" -> ""6717_bountyActive"";
""6717_removeBugFromHunter"" -> ""6717_onlyWhitelisted"";
""6717_getBountyJudgePhaseStartTimestamp"" -> ""6717_getBountyRevealPhaseEndTimestamp"";
""6717_canClaimJudgeAward"" -> ""6717_getBugBountyId"";
""6717_getBountyRevealPhaseEndTimestamp"" -> ""6717_getBountyDuration"";
}
"
0xdc12a8e62a778d0732e3f4b522a733504ee2d369.sol,CrowdsaleExt2,contract CrowdsaleExt2 is Haltable { uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5; using SafeMathLibExt for uint; ERC20Ext public token; PricingStrategy public pricingStrategy; string public name; address public multisigWallet; uint public minimumFundingGoal; uint public startsAt; uint public endsAt; uint public tokensSold = 0; uint public weiRaised = 0; uint public investorCount = 0; bool public finalized; bool public isWhiteListed; address[] public joinedCrowdsales; uint8 public joinedCrowdsalesLen = 0; uint8 public joinedCrowdsalesLenMax = 50; struct JoinedCrowdsaleStatus { bool isJoined; uint8 position; },0,"subgraph cluster_1669_CrowdsaleExt2 {
label=""CrowdsaleExt2"";
""1669_startsAt"" [label=""startsAt""];
""1669_getState"" [label=""getState""];
""1669_getTierPosition"" [label=""getTierPosition""];
""1669_isMinimumGoalReached"" [label=""isMinimumGoalReached""];
""1669_isAddressWhitelisted"" [label=""isAddressWhitelisted""];
""1669_setMultisig"" [label=""setMultisig""];
""1669_fallback"" [label=""fallback""];
""1669_getLastTier"" [label=""getLastTier""];
""1669_finalize"" [label=""finalize""];
""1669_isBreakingInvestorCap"" [label=""isBreakingInvestorCap""];
""1669_setStartsAt"" [label=""setStartsAt""];
""1669_endsAt"" [label=""endsAt""];
""1669_invest"" [label=""invest""];
""1669_finalized"" [label=""finalized""];
""1669_updateJoinedCrowdsalesMultiple"" [label=""updateJoinedCrowdsalesMultiple""];
""1669_claimTokens"" [label=""claimTokens""];
""1669_isBreakingCap"" [label=""isBreakingCap""];
""1669_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""1669_setJoinedCrowdsales"" [label=""setJoinedCrowdsales""];
""1669_isCrowdsale"" [label=""isCrowdsale""];
""1669_setEarlyParticipantWhitelistMultiple"" [label=""setEarlyParticipantWhitelistMultiple""];
""1669_investInternal"" [label=""investInternal""];
""1669_setEndsAt"" [label=""setEndsAt""];
""1669_updateInheritedEarlyParticipantWhitelist"" [label=""updateInheritedEarlyParticipantWhitelist""];
""1669_whitelistedParticipantsLength"" [label=""whitelistedParticipantsLength""];
""1669_assignTokens"" [label=""assignTokens""];
""1669_setEarlyParticipantWhitelist"" [label=""setEarlyParticipantWhitelist""];
""1669_isTierJoined"" [label=""isTierJoined""];
""1669_CrowdsaleExt2"" [label=""CrowdsaleExt2""];
""1669_setPricingStrategy"" [label=""setPricingStrategy""];
""1669_isPricingSane"" [label=""isPricingSane""];
""1669_updateEarlyParticipantWhitelist"" [label=""updateEarlyParticipantWhitelist""];
""1669_buy"" [label=""buy""];
""1669_setMultisig"" -> ""1669_onlyOwner"";
""1669_investInternal"" -> ""1669_isBreakingCap"";
""1669_investInternal"" -> ""1669_assignTokens"";
""1669_setStartsAt"" -> ""1669_getTierPosition"";
""1669_investInternal"" -> ""1669_getState"";
""1669_setEarlyParticipantWhitelistMultiple"" -> ""1669_onlyOwner"";
""1669_setEarlyParticipantWhitelist"" -> ""1669_isAddressWhitelisted"";
""1669_setStartsAt"" -> ""1669_getLastTier"";
""1669_updateJoinedCrowdsalesMultiple"" -> ""1669_setJoinedCrowdsales"";
""1669_setPricingStrategy"" -> ""1669_onlyOwner"";
""1669_getState"" -> ""1669_isMinimumGoalReached"";
""1669_finalize"" -> ""1669_stopInEmergency"";
""1669_updateJoinedCrowdsalesMultiple"" -> ""1669_onlyOwner"";
""1669_buy"" -> ""1669_invest"";
""1669_claimTokens"" -> ""1669_onlyOwner"";
""1669_invest"" -> ""1669_investInternal"";
""1669_setStartsAt"" -> ""1669_onlyOwner"";
""1669_setEndsAt"" -> ""1669_onlyOwner"";
""1669_setEndsAt"" -> ""1669_getTierPosition"";
""1669_finalize"" -> ""1669_onlyOwner"";
""1669_updateInheritedEarlyParticipantWhitelist"" -> ""1669_getTierPosition"";
""1669_investInternal"" -> ""1669_stopInEmergency"";
""1669_finalize"" -> ""1669_inState"";
""1669_setEarlyParticipantWhitelistMultiple"" -> ""1669_setEarlyParticipantWhitelist"";
""1669_investInternal"" -> ""1669_isBreakingInvestorCap"";
""1669_investInternal"" -> ""1669_updateInheritedEarlyParticipantWhitelist"";
""1669_setJoinedCrowdsales"" -> ""1669_isTierJoined"";
""1669_updateEarlyParticipantWhitelist"" -> ""1669_isTierJoined"";
""1669_setJoinedCrowdsales"" -> ""1669_onlyOwner"";
""1669_setEndsAt"" -> ""1669_getLastTier"";
""1669_setEarlyParticipantWhitelist"" -> ""1669_onlyOwner"";
""1669_CrowdsaleExt2"" -> ""1669_setPricingStrategy"";
""1669_getState"" -> ""1669_isCrowdsaleFull"";
}
"
0x28577a6d31559bd265ce3adb62d0458550f7b8a7.sol,CCCToken,"contract CCCToken { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000000000000000000000000; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function CCCToken() public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_318_CCCToken {
label=""CCCToken"";
""318_approve"" [label=""approve""];
""318_burn"" [label=""burn""];
""318_burnFrom"" [label=""burnFrom""];
""318_CCCToken"" [label=""CCCToken""];
""318__transfer"" [label=""_transfer""];
""318_transferFrom"" [label=""transferFrom""];
""318_approveAndCall"" [label=""approveAndCall""];
""318_transfer"" [label=""transfer""];
""318_transferFrom"" -> ""318__transfer"";
""318_transfer"" -> ""318__transfer"";
""318_approveAndCall"" -> ""318_approve"";
}
"
0x01db18f6a474840db3480a6a35227d4d0dfcca37.sol,AssetPool,"contract AssetPool is ownedPool { uint baseLockPercent; uint startLockTime; uint stopLockTime; uint linearRelease; address public bpTokenAddress; BPToken bp; function AssetPool(address _bpTokenAddress, uint _baseLockPercent, uint _startLockTime, uint _stopLockTime, uint _linearRelease) { assert(_stopLockTime > _startLockTime); baseLockPercent = _baseLockPercent; startLockTime = _startLockTime; stopLockTime = _stopLockTime; linearRelease = _linearRelease; bpTokenAddress = _bpTokenAddress; bp = BPToken(bpTokenAddress); owner = msg.sender; }",0,"subgraph cluster_1222_AssetPool {
label=""AssetPool"";
""1222_getStartLockTime"" [label=""getStartLockTime""];
""1222_AssetPool"" [label=""AssetPool""];
""1222_getStopLockTime"" [label=""getStopLockTime""];
""1222_getLinearRelease"" [label=""getLinearRelease""];
""1222_getPoolBalance"" [label=""getPoolBalance""];
""1222_setRule"" [label=""setRule""];
""1222_assign"" [label=""assign""];
""1222_getBaseLockPercent"" [label=""getBaseLockPercent""];
""1222_assign"" -> ""1222_onlyOwner"";
""1222_setRule"" -> ""1222_onlyOwner"";
}
"
0x2de9307ff85d1ca43fa8448de90038a9c719f459.sol,TravelChain,contract TravelChain { string public name = ; string public symbol = ; uint256 public decimals = 8; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 99000000 * (10**decimals); address public owner; modifier isOwner { assert(owner == msg.sender); _; },0,"subgraph cluster_287_TravelChain {
label=""TravelChain"";
""287_burnTotalSupply"" [label=""burnTotalSupply""];
""287_TravelChain"" [label=""TravelChain""];
""287_transferFrom"" [label=""transferFrom""];
""287_setName"" [label=""setName""];
""287_transfer"" [label=""transfer""];
""287_approve"" [label=""approve""];
""287_burnSupply"" [label=""burnSupply""];
""287_burnTotalSupply"" -> ""287_isOwner"";
""287_burnSupply"" -> ""287_isOwner"";
""287_setName"" -> ""287_isOwner"";
}
"
0x1ac68e35dbd49a7250fa1b1ceb9dbd3110edaf50.sol,VikkyToken,"contract VikkyToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public airdropClaimed; mapping (address => bool) public refundClaimed; mapping (address => bool) public locked; mapping(address => uint) public icoEtherContributed; mapping(address => uint) public icoTokensReceived; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint constant E18 = 10**18; uint constant E6 = 10**6; uint public totalSupply = 1000 * E6 * E18; uint public totalDistributed = 220 * E6 * E18; uint public totalRemaining = totalSupply.sub(totalDistributed); uint public tokensPerEth = 20000 * E18; uint public tokensAirdrop = 266 * E18; uint public tokensClaimedAirdrop = 0; uint public totalDistributedAirdrop = 20 * E6 * E18; uint public constant MIN_CONTRIBUTION = 1 ether / 100; uint public constant MIN_CONTRIBUTION_PRESALE = 1 ether; uint public constant MAX_CONTRIBUTION = 100 ether; uint public constant MIN_FUNDING_GOAL = 5000 ether; uint public constant DATE_PRESALE_START = 1523862000; uint public constant DATE_PRESALE_END = 1524466800; uint public constant DATE_ICO_START = 1524466860; uint public constant DATE_ICO_END = 1530342000; uint public constant BONUS_PRESALE = 30; uint public constant BONUS_ICO_ROUND1 = 20; uint public constant BONUS_ICO_ROUND2 = 10; uint public constant BONUS_ICO_ROUND3 = 5; event TokensPerEthUpdated(uint _tokensPerEth); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Refund(address indexed _owner, uint _amount, uint _tokens); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event Burn(address indexed burner, uint256 value); event LockRemoved(address indexed _participant); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1633_VikkyToken {
label=""VikkyToken"";
""1633_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1633_finishDistribution"" [label=""finishDistribution""];
""1633_approve"" [label=""approve""];
""1633_balanceOf"" [label=""balanceOf""];
""1633_removeLock"" [label=""removeLock""];
""1633_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""1633_icoThresholdReached"" [label=""icoThresholdReached""];
""1633_systemClaimAirdropMultiple"" [label=""systemClaimAirdropMultiple""];
""1633_allowance"" [label=""allowance""];
""1633_distr"" [label=""distr""];
""1633_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""1633_transfer"" [label=""transfer""];
""1633_atNow"" [label=""atNow""];
""1633_buyTokens"" [label=""buyTokens""];
""1633_reclaimFund"" [label=""reclaimFund""];
""1633_reclaimFundMultiple"" [label=""reclaimFundMultiple""];
""1633_doAirdrop"" [label=""doAirdrop""];
""1633_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1633_getTokenBalance"" [label=""getTokenBalance""];
""1633_distribution"" [label=""distribution""];
""1633_removeLockMultiple"" [label=""removeLockMultiple""];
""1633_transferFrom"" [label=""transferFrom""];
""1633_distributeAmounts"" [label=""distributeAmounts""];
""1633_VikkyToken"" [label=""VikkyToken""];
""1633_fallback"" [label=""fallback""];
""1633_transferOwnership"" [label=""transferOwnership""];
""1633_withdraw"" [label=""withdraw""];
""1633_burn"" [label=""burn""];
""1633_reclaimFund"" -> ""1633_atNow"";
""1633_removeLockMultiple"" -> ""1633_removeLock"";
""1633_distribution"" -> ""1633_distr"";
""1633_withdraw"" -> ""1633_onlyOwner"";
""1633_distributeAmounts"" -> ""1633_distr"";
""1633_distr"" -> ""1633_canDistr"";
""1633_adminClaimAirdropMultiple"" -> ""1633_doAirdrop"";
""1633_finishDistribution"" -> ""1633_onlyOwner"";
""1633_transferOwnership"" -> ""1633_onlyOwner"";
""1633_fallback"" -> ""1633_buyTokens"";
""1633_buyTokens"" -> ""1633_distr"";
""1633_transfer"" -> ""1633_onlyPayloadSize"";
""1633_systemClaimAirdropMultiple"" -> ""1633_doAirdrop"";
""1633_distribution"" -> ""1633_onlyOwner"";
""1633_VikkyToken"" -> ""1633_distr"";
""1633_updateTokensPerEth"" -> ""1633_atNow"";
""1633_transferFrom"" -> ""1633_onlyPayloadSize"";
""1633_reclaimFundMultiple"" -> ""1633_reclaimFund"";
""1633_withdrawForeignTokens"" -> ""1633_onlyOwner"";
""1633_reclaimFund"" -> ""1633_icoThresholdReached"";
""1633_finishDistribution"" -> ""1633_canDistr"";
""1633_distribution"" -> ""1633_canDistr"";
""1633_buyTokens"" -> ""1633_atNow"";
""1633_distributeAmounts"" -> ""1633_onlyOwner"";
""1633_buyTokens"" -> ""1633_canDistr"";
""1633_adminClaimAirdrop"" -> ""1633_doAirdrop"";
""1633_burn"" -> ""1633_onlyOwner"";
""1633_updateTokensPerEth"" -> ""1633_onlyOwner"";
""1633_distributeAmounts"" -> ""1633_canDistr"";
}
"
0x0e7e3bfd7248e9ebe52d831c3e46222936064020.sol,DCSToken,"contract DCSToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 30000000000e18; uint256 public tokenPerETH = 7000000e18; uint256 public valueToGive = 12000e18; uint256 public totalDistributed = 0; uint256 public totalRemaining = totalSupply.sub(totalDistributed); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1014_DCSToken {
label=""DCSToken"";
""1014_approve"" [label=""approve""];
""1014_balanceOf"" [label=""balanceOf""];
""1014_DCS"" [label=""DCS""];
""1014_withdraw"" [label=""withdraw""];
""1014_transfer"" [label=""transfer""];
""1014_finishDistribution"" [label=""finishDistribution""];
""1014_burn"" [label=""burn""];
""1014_burnFrom"" [label=""burnFrom""];
""1014_transferOwnership"" [label=""transferOwnership""];
""1014_fallback"" [label=""fallback""];
""1014_getTokenBalance"" [label=""getTokenBalance""];
""1014_distr"" [label=""distr""];
""1014_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""1014_transferFrom"" [label=""transferFrom""];
""1014_buyToken"" [label=""buyToken""];
""1014_allowance"" [label=""allowance""];
""1014_withdraw"" -> ""1014_onlyOwner"";
""1014_buyToken"" -> ""1014_canDistr"";
""1014_transferFrom"" -> ""1014_onlyPayloadSize"";
""1014_withdrawAltcoinTokens"" -> ""1014_onlyOwner"";
""1014_finishDistribution"" -> ""1014_canDistr"";
""1014_distr"" -> ""1014_canDistr"";
""1014_transfer"" -> ""1014_onlyPayloadSize"";
""1014_burn"" -> ""1014_onlyOwner"";
""1014_fallback"" -> ""1014_buyToken"";
""1014_DCS"" -> ""1014_distr"";
""1014_transferOwnership"" -> ""1014_onlyOwner"";
""1014_finishDistribution"" -> ""1014_onlyOwner"";
""1014_burnFrom"" -> ""1014_onlyOwner"";
""1014_buyToken"" -> ""1014_distr"";
""1014_fallback"" -> ""1014_distr"";
}
"
0x45f01020a3c1780d1b4e91b41f0f451bb0bae9b9.sol,CappedCrowdsale,contract CappedCrowdsale is Crowdsale { using SafeMath for uint256; uint256 private _cap; constructor(uint256 cap) public { require(cap > 0); _cap = cap; },0,"subgraph cluster_1396_CappedCrowdsale {
label=""CappedCrowdsale"";
""1396_capReached"" [label=""capReached""];
""1396_constructor"" [label=""constructor""];
""1396__preValidatePurchase"" [label=""_preValidatePurchase""];
""1396_cap"" [label=""cap""];
""1396__preValidatePurchase"" -> ""1396__preValidatePurchase"";
""1396__preValidatePurchase"" -> ""1396_weiRaised"";
""1396_capReached"" -> ""1396_weiRaised"";
}
"
0x1f58af89d12d4a60647f99a9fc71dd0367b56df4.sol,BurnupHoldingAccessControl,"contract BurnupHoldingAccessControl is Claimable, Pausable, CanReclaimToken { address public cfoAddress; mapping (address => bool) burnupGame; function BurnupHoldingAccessControl() public { cfoAddress = msg.sender; }",0,"subgraph cluster_1108_BurnupHoldingAccessControl {
label=""BurnupHoldingAccessControl"";
""1108_BurnupHoldingAccessControl"" [label=""BurnupHoldingAccessControl""];
""1108_addBurnupGame"" [label=""addBurnupGame""];
""1108_setCFO"" [label=""setCFO""];
""1108_removeBurnupGame"" [label=""removeBurnupGame""];
""1108_addBurnupGame"" -> ""1108_onlyOwner"";
""1108_setCFO"" -> ""1108_onlyOwner"";
""1108_removeBurnupGame"" -> ""1108_onlyOwner"";
}
"
0x1e2e9cabb5744c314de7978c081bd57c357e000d.sol,CryptoMyWord,"contract CryptoMyWord { using SafeMath for uint256; using strings for *; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); event NewWord(uint wordId, string name, uint price); address private owner; uint256 nameTokenId; uint256 tokenId; mapping (address => bool) private admins; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.8 ether; uint256 private increaseLimit2 = 1.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) public ownerOfItem; mapping (address => string) public nameOfOwner; mapping (address => string) public snsOfOwner; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => string) private nameOfItem; mapping (uint256 => string) private urlOfItem; mapping (uint256 => address[]) private borrowerOfItem; mapping (string => uint256[]) private nameToItems; mapping (uint256 => address) private approvedOfItem; mapping (string => uint256) private nameToParents; mapping (string => uint256) private nameToNameToken; mapping (string => string) private firstIdOfName; mapping (string => string) private secondIdOfName; function CryptoMyWord () public { owner = msg.sender; admins[owner] = true; }",0,"subgraph cluster_3428_CryptoMyWord {
label=""CryptoMyWord"";
""3428_enableERC721"" [label=""enableERC721""];
""3428_tokenExists"" [label=""tokenExists""];
""3428_approve"" [label=""approve""];
""3428__mint"" [label=""_mint""];
""3428_startingPriceOf"" [label=""startingPriceOf""];
""3428_getOwner"" [label=""getOwner""];
""3428_isAdmin"" [label=""isAdmin""];
""3428_balanceOf"" [label=""balanceOf""];
""3428_disableERC721"" [label=""disableERC721""];
""3428_name"" [label=""name""];
""3428_getNames"" [label=""getNames""];
""3428_buy"" [label=""buy""];
""3428_setUrl"" [label=""setUrl""];
""3428__transfer"" [label=""_transfer""];
""3428_transferFrom"" [label=""transferFrom""];
""3428_removeAdmin"" [label=""removeAdmin""];
""3428_ceil"" [label=""ceil""];
""3428_CryptoMyWord"" [label=""CryptoMyWord""];
""3428_composite"" [label=""composite""];
""3428_calculateFirstCut"" [label=""calculateFirstCut""];
""3428_withdrawAll"" [label=""withdrawAll""];
""3428_listItem"" [label=""listItem""];
""3428_addAdmin"" [label=""addAdmin""];
""3428_isContract"" [label=""isContract""];
""3428_transfer"" [label=""transfer""];
""3428_allOf"" [label=""allOf""];
""3428_tokensOf"" [label=""tokensOf""];
""3428_calculateDevCut"" [label=""calculateDevCut""];
""3428_calculateNextPrice"" [label=""calculateNextPrice""];
""3428_approvedFor"" [label=""approvedFor""];
""3428_allForPopulate"" [label=""allForPopulate""];
""3428_priceOf"" [label=""priceOf""];
""3428_withdrawAmount"" [label=""withdrawAmount""];
""3428_itemsByName"" [label=""itemsByName""];
""3428_ownerOf"" [label=""ownerOf""];
""3428_selfDestruct"" [label=""selfDestruct""];
""3428_symbol"" [label=""symbol""];
""3428_setOwner"" [label=""setOwner""];
""3428_implementsERC721"" [label=""implementsERC721""];
""3428_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""3428_totalSupply"" [label=""totalSupply""];
""3428_nameOf"" [label=""nameOf""];
""3428_nextPriceOf"" [label=""nextPriceOf""];
""3428_buy"" -> ""3428_ceil"";
""3428_buy"" -> ""3428_priceOf"";
""3428_allForPopulate"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428_ownerOf"";
""3428_approve"" -> ""3428_tokenExists"";
""3428_selfDestruct"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428__transfer"";
""3428_setOwner"" -> ""3428_onlyOwner"";
""3428_approve"" -> ""3428_ownerOf"";
""3428_withdrawAmount"" -> ""3428_onlyOwner"";
""3428_tokenExists"" -> ""3428_priceOf"";
""3428_buy"" -> ""3428_nameOf"";
""3428_allOf"" -> ""3428_startingPriceOf"";
""3428_transferFrom"" -> ""3428__transfer"";
""3428_allOf"" -> ""3428_nextPriceOf"";
""3428_composite"" -> ""3428__mint"";
""3428_nextPriceOf"" -> ""3428_calculateNextPrice"";
""3428_buy"" -> ""3428__mint"";
""3428_tokensOf"" -> ""3428_balanceOf"";
""3428_buy"" -> ""3428_isContract"";
""3428_setUrl"" -> ""3428_ownerOf"";
""3428_allForPopulate"" -> ""3428_nextPriceOf"";
""3428_removeAdmin"" -> ""3428_onlyOwner"";
""3428__transfer"" -> ""3428_ownerOf"";
""3428_enableERC721"" -> ""3428_onlyOwner"";
""3428_allOf"" -> ""3428_ownerOf"";
""3428_addAdmin"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428_onlyERC721"";
""3428_allForPopulate"" -> ""3428_priceOf"";
""3428_approve"" -> ""3428_onlyERC721"";
""3428__transfer"" -> ""3428_tokenExists"";
""3428_buy"" -> ""3428_calculateFirstCut"";
""3428_allOf"" -> ""3428_priceOf"";
""3428_buy"" -> ""3428_ownerOf"";
""3428_buy"" -> ""3428_nextPriceOf"";
""3428_allForPopulate"" -> ""3428_startingPriceOf"";
""3428_disableERC721"" -> ""3428_onlyOwner"";
""3428_withdrawAll"" -> ""3428_onlyOwner"";
""3428_listItem"" -> ""3428_onlyAdmins"";
""3428_allForPopulate"" -> ""3428_ownerOf"";
""3428_buy"" -> ""3428_calculateDevCut"";
""3428__mint"" -> ""3428_ownerOf"";
""3428_transferFrom"" -> ""3428_onlyERC721"";
""3428_nextPriceOf"" -> ""3428_priceOf"";
""3428_transferFrom"" -> ""3428_approvedFor"";
""3428_balanceOf"" -> ""3428_ownerOf"";
}
"
0x3618516f45cd3c913f81f9987af41077932bc40d.sol,Peculium,"contract Peculium is BurnableToken,Ownable { PeculiumOld public peculOld; address public peculOldAdress = 0x53148Bb4551707edF51a1e8d7A93698d18931225; using SafeMath for uint256; using SafeERC20 for ERC20Basic; string public name = ; string public symbol = ; uint256 public decimals = 8; uint256 public constant MAX_SUPPLY_NBTOKEN = 20000000000*10**8; mapping(address => bool) public balancesCannotSell; event ChangedTokens(address changedTarget,uint256 amountToChanged); event FrozenFunds(address address_target, bool bool_canSell); function Peculium() public { totalSupply = MAX_SUPPLY_NBTOKEN; balances[address(this)] = totalSupply; peculOld = PeculiumOld(peculOldAdress); }",0,"subgraph cluster_938_Peculium {
label=""Peculium"";
""938_approveAndCall"" [label=""approveAndCall""];
""938_getBlockTimestamp"" [label=""getBlockTimestamp""];
""938_transferFrom"" [label=""transferFrom""];
""938_UpgradeTokens"" [label=""UpgradeTokens""];
""938_Peculium"" [label=""Peculium""];
""938_ChangeLicense"" [label=""ChangeLicense""];
""938_getOwnerInfos"" [label=""getOwnerInfos""];
""938_transfer"" [label=""transfer""];
""938_transfer"" -> ""938_transfer"";
""938_getOwnerInfos"" -> ""938_balanceOf"";
""938_ChangeLicense"" -> ""938_onlyOwner"";
""938_transferFrom"" -> ""938_transferFrom"";
}
"
0x214f96e84d3c0f2920bb90fec861be4925edf02b.sol,HorseyToken,"contract HorseyToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor(string _symbol, string _name, uint8 _decimals, uint _totalSupply ) public { symbol = _symbol; name = _name; decimals = _decimals; totalSupply = _totalSupply * 10**uint(_decimals); balances[owner] = totalSupply; emit Transfer(address(0), owner, totalSupply); }",0,"subgraph cluster_635_HorseyToken {
label=""HorseyToken"";
""635_balanceOf"" [label=""balanceOf""];
""635_transferFrom"" [label=""transferFrom""];
""635_increaseApproval"" [label=""increaseApproval""];
""635_constructor"" [label=""constructor""];
""635_allowance"" [label=""allowance""];
""635_approveAndCall"" [label=""approveAndCall""];
""635_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""635_fallback"" [label=""fallback""];
""635_approve"" [label=""approve""];
""635_transfer"" [label=""transfer""];
""635_decreaseApproval"" [label=""decreaseApproval""];
""635_transferAnyERC20Token"" -> ""635_onlyOwner"";
""635_approveAndCall"" -> ""635_approve"";
}
"
0x347925b22d0217a4797f470faa2afebbdb150b7a.sol,Nanotechnology,"contract Nanotechnology is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 860000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 2000000e1; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0x5F6557aF8922D4031Ae506d2F02595039D16Ab5a; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1261_Nanotechnology {
label=""Nanotechnology"";
""1261_withdraw"" [label=""withdraw""];
""1261_distr"" [label=""distr""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_add"" [label=""add""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_constructor"" [label=""constructor""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_transfer"" [label=""transfer""];
""1261_getTokens"" [label=""getTokens""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_burn"" [label=""burn""];
""1261_Distribute"" [label=""Distribute""];
""1261_allowance"" [label=""allowance""];
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_add"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
}
"
0x744a31ede5422355d9c2bd8c44c710404336ca84.sol,NFTsCrowdsaleBase,"contract NFTsCrowdsaleBase is Superuser, INFTsCrowdsale { using SafeMath for uint256; ERC20 public erc20Contract; ERC721 public erc721Contract; uint public eth2erc20; struct Auction { bytes32 id; address seller; uint256 price; uint256 startAt; uint256 endAt; uint256 tokenId; }",0,"subgraph cluster_1478_NFTsCrowdsaleBase {
label=""NFTsCrowdsaleBase"";
""1478__transfer"" [label=""_transfer""];
""1478_constructor"" [label=""constructor""];
""1478__cancelEscrow"" [label=""_cancelEscrow""];
""1478__payByEth"" [label=""_payByEth""];
""1478__isOnAuction"" [label=""_isOnAuction""];
""1478_isOnAuction"" [label=""isOnAuction""];
""1478_getAuction"" [label=""getAuction""];
""1478__isTokenOwner"" [label=""_isTokenOwner""];
""1478__newAuction"" [label=""_newAuction""];
""1478__cancelAuction"" [label=""_cancelAuction""];
""1478_isOnPreAuction"" [label=""isOnPreAuction""];
""1478__payByErc20"" [label=""_payByErc20""];
""1478__escrow"" [label=""_escrow""];
""1478__payByErc20"" -> ""1478__isOnAuction"";
""1478__payByEth"" -> ""1478__transfer"";
""1478__newAuction"" -> ""1478__isTokenOwner"";
""1478__newAuction"" -> ""1478__escrow"";
""1478__payByErc20"" -> ""1478__transfer"";
""1478__cancelAuction"" -> ""1478__cancelEscrow"";
""1478__payByEth"" -> ""1478__isOnAuction"";
}
"
0x4c29d75cc423e8adaa3839892feb66977e295829.sol,POOH,contract POOH { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1337_POOH {
label=""POOH"";
""1337_setAdministrator"" [label=""setAdministrator""];
""1337_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1337_balanceOf"" [label=""balanceOf""];
""1337_setStakingRequirement"" [label=""setStakingRequirement""];
""1337_setSymbol"" [label=""setSymbol""];
""1337_sellPrice"" [label=""sellPrice""];
""1337_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1337_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1337_reinvest"" [label=""reinvest""];
""1337_purchaseTokens"" [label=""purchaseTokens""];
""1337_sell"" [label=""sell""];
""1337_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1337_transfer"" [label=""transfer""];
""1337_buy"" [label=""buy""];
""1337_setName"" [label=""setName""];
""1337_POOH"" [label=""POOH""];
""1337_buyPrice"" [label=""buyPrice""];
""1337_sqrt"" [label=""sqrt""];
""1337_withdraw"" [label=""withdraw""];
""1337_disableInitialStage"" [label=""disableInitialStage""];
""1337_exit"" [label=""exit""];
""1337_dividendsOf"" [label=""dividendsOf""];
""1337_totalSupply"" [label=""totalSupply""];
""1337_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1337_myTokens"" [label=""myTokens""];
""1337_myDividends"" [label=""myDividends""];
""1337_fallback"" [label=""fallback""];
""1337_transfer"" -> ""1337_withdraw"";
""1337_sell"" -> ""1337_onlyBagholders"";
""1337_sell"" -> ""1337_tokensToEthereum_"";
""1337_disableInitialStage"" -> ""1337_onlyAdministrator"";
""1337_buyPrice"" -> ""1337_tokensToEthereum_"";
""1337_transfer"" -> ""1337_myDividends"";
""1337_transfer"" -> ""1337_tokensToEthereum_"";
""1337_reinvest"" -> ""1337_purchaseTokens"";
""1337_calculateEthereumReceived"" -> ""1337_tokensToEthereum_"";
""1337_myDividends"" -> ""1337_dividendsOf"";
""1337_buy"" -> ""1337_purchaseTokens"";
""1337_setAdministrator"" -> ""1337_onlyAdministrator"";
""1337_reinvest"" -> ""1337_myDividends"";
""1337_transfer"" -> ""1337_onlyBagholders"";
""1337_setStakingRequirement"" -> ""1337_onlyAdministrator"";
""1337_setName"" -> ""1337_onlyAdministrator"";
""1337_sellPrice"" -> ""1337_tokensToEthereum_"";
""1337_purchaseTokens"" -> ""1337_ethereumToTokens_"";
""1337_setSymbol"" -> ""1337_onlyAdministrator"";
""1337_purchaseTokens"" -> ""1337_antiEarlyWhale"";
""1337_myTokens"" -> ""1337_balanceOf"";
""1337_fallback"" -> ""1337_purchaseTokens"";
""1337_withdraw"" -> ""1337_onlyStronghands"";
""1337_exit"" -> ""1337_withdraw"";
""1337_ethereumToTokens_"" -> ""1337_sqrt"";
""1337_calculateTokensReceived"" -> ""1337_ethereumToTokens_"";
""1337_reinvest"" -> ""1337_onlyStronghands"";
""1337_exit"" -> ""1337_sell"";
""1337_withdraw"" -> ""1337_myDividends"";
}
"
0x715423a818f1f9a85c66d81d2809e0a4dadf07f3.sol,Token,contract Token is TokenI { struct FreezeInfo { address user; uint256 amount; },0,"subgraph cluster_1226_Token {
label=""Token"";
""1226_transfer"" [label=""transfer""];
""1226_transferMulti"" [label=""transferMulti""];
""1226_changeOwner"" [label=""changeOwner""];
""1226_isContract"" [label=""isContract""];
""1226__generateTokens"" [label=""_generateTokens""];
""1226_changeAirdropQty"" [label=""changeAirdropQty""];
""1226_approve"" [label=""approve""];
""1226_Token"" [label=""Token""];
""1226_changePaused"" [label=""changePaused""];
""1226_destroyTokens"" [label=""destroyTokens""];
""1226__destroyTokens"" [label=""_destroyTokens""];
""1226_changeTokensPerEther"" [label=""changeTokensPerEther""];
""1226__freeze"" [label=""_freeze""];
""1226_changeAirdropTotalQty"" [label=""changeAirdropTotalQty""];
""1226_freeze"" [label=""freeze""];
""1226_generateTokens"" [label=""generateTokens""];
""1226_approveAndCall"" [label=""approveAndCall""];
""1226_transferFrom"" [label=""transferFrom""];
""1226_fallback"" [label=""fallback""];
""1226_unFreeze"" [label=""unFreeze""];
""1226_transfer"" -> ""1226_moreThanZero"";
""1226_transfer"" -> ""1226_realUser"";
""1226_destroyTokens"" -> ""1226_onlyOwner"";
""1226_changeTokensPerEther"" -> ""1226_onlyController"";
""1226_generateTokens"" -> ""1226__generateTokens"";
""1226_changePaused"" -> ""1226_onlyController"";
""1226_approve"" -> ""1226_moreThanZero"";
""1226_changeOwner"" -> ""1226_onlyOwner"";
""1226_freeze"" -> ""1226_moreThanZero"";
""1226_approveAndCall"" -> ""1226_approve"";
""1226_destroyTokens"" -> ""1226__destroyTokens"";
""1226_freeze"" -> ""1226__freeze"";
""1226_changeAirdropQty"" -> ""1226_onlyController"";
""1226_freeze"" -> ""1226_onlyController"";
""1226_changeAirdropTotalQty"" -> ""1226_onlyController"";
""1226__freeze"" -> ""1226_moreThanZero"";
""1226_generateTokens"" -> ""1226_onlyController"";
""1226_transferFrom"" -> ""1226_moreThanZero"";
""1226_fallback"" -> ""1226__generateTokens"";
""1226_transferFrom"" -> ""1226_realUser"";
""1226_fallback"" -> ""1226__freeze"";
""1226_unFreeze"" -> ""1226_onlyOwner"";
}
"
0x86789b2de83b9a93f89f8c2cb14d622cd73515e9.sol,FreezableToken,"contract FreezableToken is StandardToken, Ownable { event Freeze(address indexed who, uint256 end); mapping(address=>uint256) freezeEnd; function freeze(address _who, uint256 _end) onlyOwner public { require(_who != address(0)); require(_end >= freezeEnd[_who]); freezeEnd[_who] = _end; Freeze(_who, _end); }",0,"subgraph cluster_652_FreezableToken {
label=""FreezableToken"";
""652_transferFrom"" [label=""transferFrom""];
""652_transfer"" [label=""transfer""];
""652_freeze"" [label=""freeze""];
""652_transfer"" -> ""652_transfer"";
""652_transfer"" -> ""652_notFrozen"";
""652_transferFrom"" -> ""652_notFrozen"";
""652_transferFrom"" -> ""652_transferFrom"";
""652_freeze"" -> ""652_onlyOwner"";
}
"
0x327e963ee999184618e33e01b4ae1b9bccf328b4.sol,ALCOIN,contract ALCOIN { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public initialSupply; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; function ALCOIN() { initialSupply = 500000000000; name = ; decimals = 3; symbol = ; balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; },0,"subgraph cluster_101_ALCOIN {
label=""ALCOIN"";
""101_fallback"" [label=""fallback""];
""101_transfer"" [label=""transfer""];
""101_ALCOIN"" [label=""ALCOIN""];
}
"
0xdf2efe5338934ffe4443cde678822d6f3f696196.sol,Owned,"contract Owned { address public owner; address public newOwnerCandidate; event OwnershipRequested(address indexed by, address indexed to); event OwnershipTransferred(address indexed from, address indexed to); event OwnershipRemoved(); constructor() public { owner = msg.sender; }",0,"subgraph cluster_234_Owned {
label=""Owned"";
""234_proposeOwnership"" [label=""proposeOwnership""];
""234_removeOwnership"" [label=""removeOwnership""];
""234_changeOwnership"" [label=""changeOwnership""];
""234_constructor"" [label=""constructor""];
""234_acceptOwnership"" [label=""acceptOwnership""];
""234_removeOwnership"" -> ""234_onlyOwner"";
""234_proposeOwnership"" -> ""234_onlyOwner"";
""234_changeOwnership"" -> ""234_onlyOwner"";
}
"
0x17cba58578eecaee898242a02edac75b8cc17231.sol,AUMXToken,"contract AUMXToken is ERC223, SafeMath{ mapping(address => mapping(address => uint)) allowed; mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 5000000000000000; bool locked; address Owner; address swapperAddress; function AUMXToken() public { locked = true; Owner = msg.sender; swapperAddress = msg.sender; balances[msg.sender] = totalSupply; allowed[msg.sender][swapperAddress] = totalSupply; }",0,"subgraph cluster_763_AUMXToken {
label=""AUMXToken"";
""763_decimals"" [label=""decimals""];
""763_isContract"" [label=""isContract""];
""763_AUMXToken"" [label=""AUMXToken""];
""763_transferToAddress"" [label=""transferToAddress""];
""763_transferToContract"" [label=""transferToContract""];
""763_ChangeSwapperAddress"" [label=""ChangeSwapperAddress""];
""763_name"" [label=""name""];
""763_UnlockToken"" [label=""UnlockToken""];
""763_transferFrom"" [label=""transferFrom""];
""763_totalSupply"" [label=""totalSupply""];
""763_transfer"" [label=""transfer""];
""763_symbol"" [label=""symbol""];
""763_balanceOf"" [label=""balanceOf""];
""763_transferToAddress"" -> ""763_safeSub"";
""763_transferToContract"" -> ""763_safeSub"";
""763_transferFrom"" -> ""763_safeAdd"";
""763_transferToContract"" -> ""763_safeAdd"";
""763_transfer"" -> ""763_isUnlocked"";
""763_transfer"" -> ""763_isContract"";
""763_ChangeSwapperAddress"" -> ""763_onlyOwner"";
""763_transfer"" -> ""763_safeSub"";
""763_transferToAddress"" -> ""763_balanceOf"";
""763_transfer"" -> ""763_transferToContract"";
""763_transferToAddress"" -> ""763_safeAdd"";
""763_transfer"" -> ""763_safeAdd"";
""763_UnlockToken"" -> ""763_onlyOwner"";
""763_transferFrom"" -> ""763_safeSub"";
""763_transfer"" -> ""763_transferToAddress"";
""763_transferToContract"" -> ""763_balanceOf"";
""763_transfer"" -> ""763_balanceOf"";
""763_transferFrom"" -> ""763_balanceOf"";
}
"
0x2de60f36bb208b5c96acb36d4a49aad3e2be0627.sol,GJCICO,"contract GJCICO is Pausable{ using SafeMath for uint256; uint constant public minContribAmount = 0.01 ether; GJCToken public token; uint256 constant public tokenDecimals = 18; TokenVesting public vesting; uint256 constant public VESTING_TIMES = 4; uint256 constant public DURATION_PER_VESTING = 52 weeks; uint256 public startTime; uint256 public endTime; bool public icoEnabled; address public multisignWallet; uint256 public weiRaised; uint256 constant public totalSupply = 100000000 * (10 ** tokenDecimals); uint256 constant public preSaleCap = 10000000 * (10 ** tokenDecimals); uint256 constant public initialICOCap = 60000000 * (10 ** tokenDecimals); uint256 constant public tokensForFounder = 10000000 * (10 ** tokenDecimals); uint256 constant public tokensForDevteam = 10000000 * (10 ** tokenDecimals); uint256 constant public tokensForPartners = 5000000 * (10 ** tokenDecimals); uint256 constant public tokensForCharity = 3000000 * (10 ** tokenDecimals); uint256 constant public tokensForBounty = 2000000 * (10 ** tokenDecimals); uint256 public soldPreSaleTokens; uint256 public sentPreSaleTokens; uint256 public icoCap; uint256 public icoSoldTokens; bool public icoEnded = false; uint256 constant public RATE_FOR_WEEK1 = 525; uint256 constant public RATE_FOR_WEEK2 = 455; uint256 constant public RATE_FOR_WEEK3 = 420; uint256 constant public RATE_NO_DISCOUNT = 350; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function GJCICO(address _multisignWallet) { require(_multisignWallet != address(0)); token = createTokenContract(); uint256 tokensToDao = tokensForDevteam.add(tokensForPartners).add(tokensForBounty).add(tokensForCharity); multisignWallet = _multisignWallet; token.transfer(multisignWallet, tokensToDao); }",0,"subgraph cluster_986_GJCICO {
label=""GJCICO"";
""986_createTokenContract"" [label=""createTokenContract""];
""986_fallback"" [label=""fallback""];
""986_setSoldPreSaleTokens"" [label=""setSoldPreSaleTokens""];
""986_createTokenVestingContract"" [label=""createTokenVestingContract""];
""986_drain"" [label=""drain""];
""986_enableICO"" [label=""enableICO""];
""986_hasEnded"" [label=""hasEnded""];
""986_validPurchase"" [label=""validPurchase""];
""986_buyTokens"" [label=""buyTokens""];
""986_GJCICO"" [label=""GJCICO""];
""986_forwardFunds"" [label=""forwardFunds""];
""986_getRate"" [label=""getRate""];
""986_enableTokenTransferability"" [label=""enableTokenTransferability""];
""986_endIco"" [label=""endIco""];
""986_createVestingForFounder"" [label=""createVestingForFounder""];
""986_setMultisignWallet"" [label=""setMultisignWallet""];
""986_delegateVestingContractOwner"" [label=""delegateVestingContractOwner""];
""986_setContributionDates"" [label=""setContributionDates""];
""986_transferPreSaleTokens"" [label=""transferPreSaleTokens""];
""986_disableTokenTransferability"" [label=""disableTokenTransferability""];
""986_disableTokenTransferability"" -> ""986_onlyOwner"";
""986_buyTokens"" -> ""986_getRate"";
""986_buyTokens"" -> ""986_validPurchase"";
""986_drain"" -> ""986_onlyOwner"";
""986_buyTokens"" -> ""986_whenNotPaused"";
""986_setContributionDates"" -> ""986_onlyOwner"";
""986_fallback"" -> ""986_buyTokens"";
""986_createVestingForFounder"" -> ""986_onlyOwner"";
""986_fallback"" -> ""986_whenNotPaused"";
""986_transferPreSaleTokens"" -> ""986_onlyOwner"";
""986_setMultisignWallet"" -> ""986_onlyOwner"";
""986_delegateVestingContractOwner"" -> ""986_onlyOwner"";
""986_enableTokenTransferability"" -> ""986_onlyOwner"";
""986_createVestingForFounder"" -> ""986_createTokenVestingContract"";
""986_endIco"" -> ""986_onlyOwner"";
""986_enableICO"" -> ""986_onlyOwner"";
""986_setSoldPreSaleTokens"" -> ""986_onlyOwner"";
""986_GJCICO"" -> ""986_createTokenContract"";
""986_buyTokens"" -> ""986_forwardFunds"";
}
"
0xf19d446c35570eff44cf9871ee389067ebd6e962.sol,TearFiat,"contract TearFiat is ERC20Detailed { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowed; string constant tokenName = ; string constant tokenSymbol = ; uint8 constant tokenDecimals = 10; uint256 _totalSupply = 6500000000000000; uint256 public basePercent = 50; constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) { _mint(msg.sender, _totalSupply); }",0,"subgraph cluster_865_TearFiat {
label=""TearFiat"";
""865_burn"" [label=""burn""];
""865__burn"" [label=""_burn""];
""865_constructor"" [label=""constructor""];
""865_decreaseAllowance"" [label=""decreaseAllowance""];
""865__mint"" [label=""_mint""];
""865_totalSupply"" [label=""totalSupply""];
""865_findOnePercent"" [label=""findOnePercent""];
""865_multiTransfer"" [label=""multiTransfer""];
""865_approve"" [label=""approve""];
""865_allowance"" [label=""allowance""];
""865_increaseAllowance"" [label=""increaseAllowance""];
""865_burnFrom"" [label=""burnFrom""];
""865_transfer"" [label=""transfer""];
""865_balanceOf"" [label=""balanceOf""];
""865_transferFrom"" [label=""transferFrom""];
""865_transfer"" -> ""865_findOnePercent"";
""865_multiTransfer"" -> ""865_transfer"";
""865_transferFrom"" -> ""865_findOnePercent"";
""865_burn"" -> ""865__burn"";
""865_constructor"" -> ""865__mint"";
""865_burnFrom"" -> ""865__burn"";
""865_constructor"" -> ""865_constructor"";
}
"
0x7217fdeb1ed453eab8a5afa621461497f7630bb7.sol,ReclycleCoin,contract ReclycleCoin { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint public _totalSupply = 5250000000000; uint256 public RATE = 1; bool public isMinting = false; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_ReclycleCoin {
label=""ReclycleCoin"";
""516_createTokens"" [label=""createTokens""];
""516_burnTokens"" [label=""burnTokens""];
""516_approve"" [label=""approve""];
""516_balanceOf"" [label=""balanceOf""];
""516_constructor"" [label=""constructor""];
""516_transfer"" [label=""transfer""];
""516_fallback"" [label=""fallback""];
""516_transferFrom"" [label=""transferFrom""];
""516_allowance"" [label=""allowance""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_totalSupply"" [label=""totalSupply""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_burnTokens"" -> ""516_onlyOwner"";
""516_fallback"" -> ""516_createTokens"";
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
}
"
0x4ccc3759eb48faf1c6cfadad2619e7038db6b212.sol,SuperEdge,"contract SuperEdge is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 2000000000e8; uint256 public totalDistributed = 1200000000e8; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 15000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_873_SuperEdge {
label=""SuperEdge"";
""873_SuperEdge"" [label=""SuperEdge""];
""873_getTokens"" [label=""getTokens""];
""873_transferOwnership"" [label=""transferOwnership""];
""873_burn"" [label=""burn""];
""873_transfer"" [label=""transfer""];
""873_withdraw"" [label=""withdraw""];
""873_distr"" [label=""distr""];
""873_balanceOf"" [label=""balanceOf""];
""873_getTokenBalance"" [label=""getTokenBalance""];
""873_fallback"" [label=""fallback""];
""873_allowance"" [label=""allowance""];
""873_finishDistribution"" [label=""finishDistribution""];
""873_transferFrom"" [label=""transferFrom""];
""873_approve"" [label=""approve""];
""873_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""873_withdrawForeignTokens"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_distr"";
""873_transferOwnership"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_onlyWhitelist"";
""873_finishDistribution"" -> ""873_onlyOwner"";
""873_transferFrom"" -> ""873_onlyPayloadSize"";
""873_withdraw"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_canDistr"";
""873_transfer"" -> ""873_onlyPayloadSize"";
""873_fallback"" -> ""873_getTokens"";
""873_burn"" -> ""873_onlyOwner"";
""873_distr"" -> ""873_canDistr"";
""873_finishDistribution"" -> ""873_canDistr"";
}
"
0x38c83b225eb17d44f33f8bb3bdc23d86733838db.sol,try_to_play,contract try_to_play { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },0,"subgraph cluster_127_try_to_play {
label=""try_to_play"";
""127_start_try_to_play"" [label=""start_try_to_play""];
""127_Try"" [label=""Try""];
""127_StopGame"" [label=""StopGame""];
""127_NewQuestion"" [label=""NewQuestion""];
""127_fallback"" [label=""fallback""];
""127_newQuestioner"" [label=""newQuestioner""];
""127_NewQuestion"" -> ""127_onlyQuestionSender"";
""127_StopGame"" -> ""127_onlyQuestionSender"";
""127_newQuestioner"" -> ""127_onlyQuestionSender"";
}
"
0x64cfc7428621b2b118896670c0b4d52ab020ee6a.sol,AUSD,"contract AUSD is Owned, ERC20Token { using SafeMath for uint256; string private constant standard = ; string private constant version = ; string private name_ = ; string private symbol_ = ; uint8 private decimals_ = 18; uint256 private totalSupply_ = uint256(20) * uint256(10)**uint256(8) * uint256(10)**uint256(decimals_); mapping (address => uint256) private balanceP; mapping (address => mapping (address => uint256)) private allowed; mapping (address => uint256[]) private lockTime; mapping (address => uint256[]) private lockValue; mapping (address => uint256) private lockNum; uint256 private later = 0; uint256 private earlier = 0; bool private mintable_ = true; event Burn(address indexed _from, uint256 _value); event Mint(address indexed _to, uint256 _value); event TransferLocked(address indexed _from, address indexed _to, uint256 _time, uint256 _value); event TokenUnlocked(address indexed _address, uint256 _value); event WrongTokenEmptied(address indexed _token, address indexed _addr, uint256 _amount); event WrongEtherEmptied(address indexed _addr, uint256 _amount); constructor() public { balanceP[msg.sender] = totalSupply_; }",0,"subgraph cluster_1810_AUSD {
label=""AUSD"";
""1810_transfer"" [label=""transfer""];
""1810_decreaseApproval"" [label=""decreaseApproval""];
""1810_transferFrom"" [label=""transferFrom""];
""1810_transferLockedFrom"" [label=""transferLockedFrom""];
""1810_mintable"" [label=""mintable""];
""1810_totalSupply"" [label=""totalSupply""];
""1810_calcUnlock"" [label=""calcUnlock""];
""1810_showLockNum"" [label=""showLockNum""];
""1810_name"" [label=""name""];
""1810_constructor"" [label=""constructor""];
""1810_transferLocked"" [label=""transferLocked""];
""1810_setUnlockLater"" [label=""setUnlockLater""];
""1810_allowance"" [label=""allowance""];
""1810_balanceUnlocked"" [label=""balanceUnlocked""];
""1810_disableMint"" [label=""disableMint""];
""1810_fallback"" [label=""fallback""];
""1810_burn"" [label=""burn""];
""1810_symbol"" [label=""symbol""];
""1810_increaseApproval"" [label=""increaseApproval""];
""1810_setUnlockEarlier"" [label=""setUnlockEarlier""];
""1810_emptyWrongToken"" [label=""emptyWrongToken""];
""1810_approve"" [label=""approve""];
""1810_mint"" [label=""mint""];
""1810_balanceLocked"" [label=""balanceLocked""];
""1810_emptyWrongEther"" [label=""emptyWrongEther""];
""1810_balanceOf"" [label=""balanceOf""];
""1810_showLockValues"" [label=""showLockValues""];
""1810_showLockTimes"" [label=""showLockTimes""];
""1810_decimals"" [label=""decimals""];
""1810_transfer"" -> ""1810_calcUnlock"";
""1810_transferLockedFrom"" -> ""1810_validAddress"";
""1810_transferLocked"" -> ""1810_calcUnlock"";
""1810_emptyWrongToken"" -> ""1810_onlyOwner"";
""1810_transfer"" -> ""1810_validAddress"";
""1810_approve"" -> ""1810_calcUnlock"";
""1810_disableMint"" -> ""1810_isMintable"";
""1810_mint"" -> ""1810_onlyOwner"";
""1810_setUnlockLater"" -> ""1810_onlyOwner"";
""1810_transferLocked"" -> ""1810_validAddress"";
""1810_increaseApproval"" -> ""1810_validAddress"";
""1810_setUnlockEarlier"" -> ""1810_onlyOwner"";
""1810_showLockNum"" -> ""1810_validAddress"";
""1810_decreaseApproval"" -> ""1810_validAddress"";
""1810_showLockValues"" -> ""1810_validAddress"";
""1810_burn"" -> ""1810_onlyOwner"";
""1810_showLockTimes"" -> ""1810_validAddress"";
""1810_transferFrom"" -> ""1810_validAddress"";
""1810_emptyWrongEther"" -> ""1810_onlyOwner"";
""1810_transferFrom"" -> ""1810_calcUnlock"";
""1810_disableMint"" -> ""1810_onlyOwner"";
""1810_transferLockedFrom"" -> ""1810_calcUnlock"";
""1810_burn"" -> ""1810_calcUnlock"";
""1810_mint"" -> ""1810_isMintable"";
""1810_approve"" -> ""1810_validAddress"";
}
"
0xd64ad4eefaacb96a0865687cfeef4c4a2cfbfef2.sol,SafeMath,"contract SafeMath { function add(uint x, uint y) internal constant returns (uint z) { assert((z = x + y) >= x); }",0,"subgraph cluster_190_SafeMath {
label=""SafeMath"";
""190_add"" [label=""add""];
""190_max"" [label=""max""];
""190_subtract"" [label=""subtract""];
""190_min"" [label=""min""];
""190_divide"" [label=""divide""];
""190_min64"" [label=""min64""];
""190_max64"" [label=""max64""];
""190_assert"" [label=""assert""];
""190_multiply"" [label=""multiply""];
""190_subtract"" -> ""190_assert"";
""190_add"" -> ""190_assert"";
""190_divide"" -> ""190_assert"";
""190_multiply"" -> ""190_assert"";
}
"
0x6f3a995e904c9be5279e375e79f3c30105efa618.sol,ProofToken,"contract ProofToken is Crowdsale { string public standard = ; string public name = ; string public symbol = ; uint8 public decimals = 8; mapping (address => mapping (address => uint)) public allowed; event Approval(address indexed owner, address indexed spender, uint value); event Burn(address indexed owner, uint value); function ProofToken(address _backend, uint _etherPrice) public payable Crowdsale(_backend, _etherPrice) { }",0,"subgraph cluster_921_ProofToken {
label=""ProofToken"";
""921_burn"" [label=""burn""];
""921_approve"" [label=""approve""];
""921_transferFrom"" [label=""transferFrom""];
""921_allowance"" [label=""allowance""];
""921_transfer"" [label=""transfer""];
""921_ProofToken"" [label=""ProofToken""];
""921_transferFrom"" -> ""921_onlyPayloadSize"";
""921_transfer"" -> ""921_onlyPayloadSize"";
""921_ProofToken"" -> ""921_Crowdsale"";
}
"
0xed231a75b03c2cd388ee26d4f74abf88cb683e8c.sol,CollateralMonitor,"contract CollateralMonitor is Owned, SafeDecimalMath { Havven havven; Nomin nomin; HavvenEscrow escrow; address[] issuers; uint maxIssuers = 10; constructor(Havven _havven, Nomin _nomin, HavvenEscrow _escrow) Owned(msg.sender) public { havven = _havven; nomin = _nomin; escrow = _escrow; }",0,"subgraph cluster_914_CollateralMonitor {
label=""CollateralMonitor"";
""914_constructor"" [label=""constructor""];
""914_pushIssuer"" [label=""pushIssuer""];
""914_resizeIssuersArray"" [label=""resizeIssuersArray""];
""914_totalNetworkCollateralisation"" [label=""totalNetworkCollateralisation""];
""914__limitedTotalIssuingCollateral"" [label=""_limitedTotalIssuingCollateral""];
""914_setEscrow"" [label=""setEscrow""];
""914_totalIssuingCollateral_limitedSum"" [label=""totalIssuingCollateral_limitedSum""];
""914_totalIssuingCollateral"" [label=""totalIssuingCollateral""];
""914_deleteIssuer"" [label=""deleteIssuer""];
""914_totalLockedHavvens"" [label=""totalLockedHavvens""];
""914_setNomin"" [label=""setNomin""];
""914_pushIssuers"" [label=""pushIssuers""];
""914_setMaxIssuers"" [label=""setMaxIssuers""];
""914_totalLockedHavvens_byAvailableHavvens_limitedSum"" [label=""totalLockedHavvens_byAvailableHavvens_limitedSum""];
""914_collateralisation"" [label=""collateralisation""];
""914_collateral"" [label=""collateral""];
""914_totalIssuanceDebt"" [label=""totalIssuanceDebt""];
""914_totalIssuerCollateralisation"" [label=""totalIssuerCollateralisation""];
""914_totalLockedHavvens_limitedSum"" [label=""totalLockedHavvens_limitedSum""];
""914_totalIssuanceDebt_limitedSum"" [label=""totalIssuanceDebt_limitedSum""];
""914_setHavven"" [label=""setHavven""];
""914_totalIssuanceDebt"" -> ""914_safeDiv_dec"";
""914_totalIssuerCollateralisation"" -> ""914_totalIssuingCollateral"";
""914_pushIssuers"" -> ""914_pushIssuer"";
""914_collateral"" -> ""914_safeAdd"";
""914_totalIssuingCollateral"" -> ""914__limitedTotalIssuingCollateral"";
""914_totalLockedHavvens_byAvailableHavvens_limitedSum"" -> ""914_collateral"";
""914_resizeIssuersArray"" -> ""914_onlyOwner"";
""914_totalIssuanceDebt"" -> ""914_safeMul_dec"";
""914_collateralisation"" -> ""914_safeMul_dec"";
""914_totalNetworkCollateralisation"" -> ""914_safeMul_dec"";
""914_collateralisation"" -> ""914_safeDiv_dec"";
""914_totalLockedHavvens"" -> ""914_totalIssuanceDebt"";
""914_constructor"" -> ""914_constructor"";
""914_totalLockedHavvens"" -> ""914_min"";
""914_totalLockedHavvens"" -> ""914_totalIssuingCollateral"";
""914_totalLockedHavvens_limitedSum"" -> ""914_totalIssuingCollateral"";
""914_deleteIssuer"" -> ""914_onlyOwner"";
""914_totalLockedHavvens_byAvailableHavvens_limitedSum"" -> ""914_min"";
""914_setMaxIssuers"" -> ""914_onlyOwner"";
""914__limitedTotalIssuingCollateral"" -> ""914_min"";
""914_pushIssuer"" -> ""914_onlyOwner"";
""914_setHavven"" -> ""914_onlyOwner"";
""914_setNomin"" -> ""914_onlyOwner"";
""914_totalIssuingCollateral_limitedSum"" -> ""914__limitedTotalIssuingCollateral"";
""914_totalIssuerCollateralisation"" -> ""914_safeDiv_dec"";
""914_totalLockedHavvens_limitedSum"" -> ""914_min"";
""914_collateralisation"" -> ""914_collateral"";
""914_totalLockedHavvens_limitedSum"" -> ""914_totalIssuanceDebt_limitedSum"";
""914_totalNetworkCollateralisation"" -> ""914_safeDiv_dec"";
""914_totalLockedHavvens_byAvailableHavvens_limitedSum"" -> ""914_safeSub"";
""914__limitedTotalIssuingCollateral"" -> ""914_collateral"";
""914_pushIssuers"" -> ""914_onlyOwner"";
""914_setEscrow"" -> ""914_onlyOwner"";
""914_totalIssuerCollateralisation"" -> ""914_safeMul_dec"";
""914_totalIssuanceDebt_limitedSum"" -> ""914_safeMul_dec"";
""914_totalIssuanceDebt_limitedSum"" -> ""914_min"";
""914_totalIssuanceDebt_limitedSum"" -> ""914_safeDiv_dec"";
}
"
0x2682e3ad5358932ac5cd8f8616912cec76ad680c.sol,CupExchange,"contract CupExchange { using SafeMath for uint256; using SafeMath for int256; address public owner; token internal teamCup; token internal cup; uint256 public exchangePrice; bool public halting = true; event Halted(bool halting); event Exchange(address user, uint256 distributedAmount, uint256 collectedAmount); constructor(address cupToken, address teamCupToken) public { owner = msg.sender; teamCup = token(teamCupToken); cup = token(cupToken); }",0,"subgraph cluster_373_CupExchange {
label=""CupExchange"";
""373_exchange"" [label=""exchange""];
""373_safeWithdrawal"" [label=""safeWithdrawal""];
""373_setExchangePrice"" [label=""setExchangePrice""];
""373_constructor"" [label=""constructor""];
""373_halt"" [label=""halt""];
""373_unhalt"" [label=""unhalt""];
""373_safeWithdrawal"" -> ""373_onlyOwner"";
""373_unhalt"" -> ""373_onlyOwner"";
""373_halt"" -> ""373_onlyOwner"";
""373_setExchangePrice"" -> ""373_onlyOwner"";
}
"
0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol,TrexDexMain,"contract TrexDexMain { using SafeMath for uint256; address public owner; address public feeAddress; mapping (address => mapping (address => uint256)) public makeFees; mapping (address => mapping (address => uint256)) public takeFees; mapping (address => uint256) public depositFees; mapping (address => uint256) public withdrawFees; mapping (address => bool) public strictTokens; mapping (address => bool) public tokenDeposits; mapping (address => bool) public tokenWithdraws; mapping (address => mapping (address => bool)) public tokenTrades; mapping (address => mapping (address => uint256)) public deposits; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint256)) public orderFills; event Order(address buyTokenAddress, uint256 buyAmount, address sellTokenAddress, uint256 sellAmount, address takeAddress, address baseTokenAddress, uint256 expireBlock, uint256 nonce, address makeAddress); event Cancel(bytes32 orderHash); event Trade(bytes32 orderHash, uint256 buyAmount, uint256 sellAmount, uint256 takeFee, uint256 makeFee, address takeAddress); event Deposit(address tokenAddress, address userAddress, uint256 amount, uint256 fee, uint256 balance); event Withdraw(address tokenAddress, address userAddress, uint256 amount, uint256 fee, uint256 balance); event TransferIn(address tokenAddress, address userAddress, uint256 amount, uint256 balance); event TransferOut(address tokenAddress, address userAddress, uint256 amount, uint256 balance); modifier isOwner { assert(msg.sender == owner); _; }",0,"subgraph cluster_2073_TrexDexMain {
label=""TrexDexMain"";
""2073_setTokenTrades"" [label=""setTokenTrades""];
""2073__checkTrade"" [label=""_checkTrade""];
""2073__calcStrictAmount"" [label=""_calcStrictAmount""];
""2073_setTokenTransfer"" [label=""setTokenTransfer""];
""2073_constructor"" [label=""constructor""];
""2073_depositToken"" [label=""depositToken""];
""2073__depositToken"" [label=""_depositToken""];
""2073_transfer"" [label=""transfer""];
""2073_trade"" [label=""trade""];
""2073_deposit"" [label=""deposit""];
""2073__withdrawToken"" [label=""_withdrawToken""];
""2073__buildHash"" [label=""_buildHash""];
""2073_withdrawToken"" [label=""withdrawToken""];
""2073_withdraw"" [label=""withdraw""];
""2073_testTrade"" [label=""testTrade""];
""2073_amountFilled"" [label=""amountFilled""];
""2073__checkTradeAddress"" [label=""_checkTradeAddress""];
""2073_fallback"" [label=""fallback""];
""2073_order"" [label=""order""];
""2073_setStrictToken"" [label=""setStrictToken""];
""2073_setTokenTransfers"" [label=""setTokenTransfers""];
""2073__availableVolume"" [label=""_availableVolume""];
""2073_setOwner"" [label=""setOwner""];
""2073__hasDeposit"" [label=""_hasDeposit""];
""2073_tradeMulti"" [label=""tradeMulti""];
""2073_cancelOrder"" [label=""cancelOrder""];
""2073__checkHash"" [label=""_checkHash""];
""2073_balanceOf"" [label=""balanceOf""];
""2073_availableVolume"" [label=""availableVolume""];
""2073__trade"" [label=""_trade""];
""2073_setTokenTrade"" [label=""setTokenTrade""];
""2073_setFeeAddress"" [label=""setFeeAddress""];
""2073__checkTrade"" -> ""2073__checkTradeAddress"";
""2073_setTokenTrade"" -> ""2073_isOwner"";
""2073_setTokenTransfers"" -> ""2073_setTokenTransfer"";
""2073__trade"" -> ""2073__calcStrictAmount"";
""2073_deposit"" -> ""2073__depositToken"";
""2073_tradeMulti"" -> ""2073_trade"";
""2073_cancelOrder"" -> ""2073__checkHash"";
""2073_testTrade"" -> ""2073__checkTrade"";
""2073_trade"" -> ""2073__checkTrade"";
""2073_cancelOrder"" -> ""2073_hasPayloadSize"";
""2073_amountFilled"" -> ""2073__buildHash"";
""2073_order"" -> ""2073_hasPayloadSize"";
""2073_setTokenTransfer"" -> ""2073_isOwner"";
""2073_trade"" -> ""2073__checkHash"";
""2073_setFeeAddress"" -> ""2073_isOwner"";
""2073_withdrawToken"" -> ""2073__withdrawToken"";
""2073_cancelOrder"" -> ""2073__buildHash"";
""2073_depositToken"" -> ""2073_hasPayloadSize"";
""2073_testTrade"" -> ""2073_availableVolume"";
""2073_transfer"" -> ""2073_isOwner"";
""2073_trade"" -> ""2073__buildHash"";
""2073_depositToken"" -> ""2073__depositToken"";
""2073_order"" -> ""2073__buildHash"";
""2073_setTokenTrades"" -> ""2073_isOwner"";
""2073_setOwner"" -> ""2073_isOwner"";
""2073_setStrictToken"" -> ""2073_isOwner"";
""2073_setTokenTransfers"" -> ""2073_isOwner"";
""2073_testTrade"" -> ""2073__hasDeposit"";
""2073_availableVolume"" -> ""2073__checkHash"";
""2073_trade"" -> ""2073__trade"";
""2073_withdraw"" -> ""2073_hasPayloadSize"";
""2073_availableVolume"" -> ""2073__availableVolume"";
""2073__availableVolume"" -> ""2073__calcStrictAmount"";
""2073_setTokenTrades"" -> ""2073_setTokenTrade"";
""2073_withdrawToken"" -> ""2073_hasPayloadSize"";
""2073_order"" -> ""2073__checkTrade"";
""2073_availableVolume"" -> ""2073__buildHash"";
""2073_withdraw"" -> ""2073__withdrawToken"";
}
"
0x584a0ec8a7a3fcfed27db5c234a9062863883778.sol,StandardToken,"contract StandardToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function StandardToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_400_StandardToken {
label=""StandardToken"";
""400_StandardToken"" [label=""StandardToken""];
""400_burn"" [label=""burn""];
""400_transferFrom"" [label=""transferFrom""];
""400_transfer"" [label=""transfer""];
""400__transfer"" [label=""_transfer""];
""400_approveAndCall"" [label=""approveAndCall""];
""400_burnFrom"" [label=""burnFrom""];
""400_approve"" [label=""approve""];
""400_approveAndCall"" -> ""400_approve"";
""400_transfer"" -> ""400__transfer"";
""400_transferFrom"" -> ""400__transfer"";
}
"
0xda830afa460526071d3d149e898fead664f0a4bb.sol,TokenCampaign,contract TokenCampaign is Controlled { using SafeMath for uint256; eat_token_interface public token; uint8 public constant decimals = 18; uint256 public constant scale = (uint256(10) ** decimals); uint256 public constant hardcap = 100000000 * scale; uint256 public constant PRCT100_D_TEAM = 63; uint256 public constant PRCT100_R_TEAM = 250; uint256 public constant PRCT100_R2 = 150; uint256 public constant FIXEDREWARD_MM = 100000 * scale; uint256 public constant PRCT100_ETH_OP = 4000; uint256 public constant preCrowdMinContribution = (20 ether); uint256 public constant minContribution = (1 ether) / 100; uint256 public constant preCrowd_tokens_scaled = 7142857142857140000000; uint256 public constant stage_1_tokens_scaled = 6250000000000000000000; uint256 public constant stage_2_tokens_scaled = 5555555555555560000000; uint256 public constant stage_3_tokens_scaled = 5000000000000000000000; uint256 public constant PreCrowdAllocation = 20000000 * scale ; uint256 public constant Stage1Allocation = 15000000 * scale ; uint256 public constant Stage2Allocation = 15000000 * scale ; uint256 public constant Stage3Allocation = 20000000 * scale ; uint256 public tokensRemainingPreCrowd = PreCrowdAllocation; uint256 public tokensRemainingStage1 = Stage1Allocation; uint256 public tokensRemainingStage2 = Stage2Allocation; uint256 public tokensRemainingStage3 = Stage3Allocation; uint256 public maxPreCrowdAllocationPerInvestor = 20000000 * scale ; uint256 public maxStage1AllocationPerInvestor = 15000000 * scale ; uint256 public maxStage2AllocationPerInvestor = 15000000 * scale ; uint256 public maxStage3AllocationPerInvestor = 20000000 * scale ; uint256 public tokensGenerated = 0; address[] public joinedCrowdsale; uint256 public amountRaised = 0; uint256 public amountRefunded = 0; address public dteamVaultAddr1; address public dteamVaultAddr2; address public dteamVaultAddr3; address public dteamVaultAddr4; address public rteamVaultAddr; address public r2VaultAddr; address public mmVaultAddr; address public reserveVaultAddr; address public trusteeVaultAddr; address public opVaultAddr; address public tokenAddr; uint8 public campaignState = 3; bool public paused = false; uint256 public tCampaignStart = 64060588800; uint256 public t_1st_StageEnd = 5 * (1 days); uint256 public t_2nd_StageEnd = 2 * (1 days); uint256 public tCampaignEnd = 35 * (1 days); uint256 public tFinalized = 64060588800; struct ParticipantListData { bool participatedFlag; uint256 contributedAmountPreAllocated; uint256 contributedAmountPreCrowd; uint256 contributedAmountStage1; uint256 contributedAmountStage2; uint256 contributedAmountStage3; uint256 preallocatedTokens; uint256 allocatedTokens; uint256 spentAmount; },0,"subgraph cluster_3689_TokenCampaign {
label=""TokenCampaign"";
""3689_setMaxStage1AllocationPerInvestor"" [label=""setMaxStage1AllocationPerInvestor""];
""3689_proxy_contribution"" [label=""proxy_contribution""];
""3689_do_grant_tokens"" [label=""do_grant_tokens""];
""3689_pauseSale"" [label=""pauseSale""];
""3689_resumeSale"" [label=""resumeSale""];
""3689_setopVaultAddr"" [label=""setopVaultAddr""];
""3689_process_contribution"" [label=""process_contribution""];
""3689_refund"" [label=""refund""];
""3689_setMultipleParticipantWhitelist"" [label=""setMultipleParticipantWhitelist""];
""3689_setMaxStage2AllocationPerInvestor"" [label=""setMaxStage2AllocationPerInvestor""];
""3689_toggleWhitelist"" [label=""toggleWhitelist""];
""3689_setrteamVaultAddr"" [label=""setrteamVaultAddr""];
""3689_setmmVaultAddr"" [label=""setmmVaultAddr""];
""3689_setMaxPreCrowdAllocationPerInvestor"" [label=""setMaxPreCrowdAllocationPerInvestor""];
""3689_claimTokens"" [label=""claimTokens""];
""3689_airdrop"" [label=""airdrop""];
""3689_setParticipantWhitelist"" [label=""setParticipantWhitelist""];
""3689_emergencyFinalize"" [label=""emergencyFinalize""];
""3689_setdteamVaultAddr1"" [label=""setdteamVaultAddr1""];
""3689_contractBalance"" [label=""contractBalance""];
""3689_setr2VaultAddr"" [label=""setr2VaultAddr""];
""3689_setInvestorsBatchSize"" [label=""setInvestorsBatchSize""];
""3689_TokenCampaign"" [label=""TokenCampaign""];
""3689_setdteamVaultAddr4"" [label=""setdteamVaultAddr4""];
""3689_preallocate"" [label=""preallocate""];
""3689_settrusteeVaultAddr"" [label=""settrusteeVaultAddr""];
""3689_setMaxStage3AllocationPerInvestor"" [label=""setMaxStage3AllocationPerInvestor""];
""3689_fallback"" [label=""fallback""];
""3689_finalizeCampaign"" [label=""finalizeCampaign""];
""3689_allocateInvestors"" [label=""allocateInvestors""];
""3689_investorCount"" [label=""investorCount""];
""3689_retrieveFunds"" [label=""retrieveFunds""];
""3689_setdteamVaultAddr3"" [label=""setdteamVaultAddr3""];
""3689_multiAirdrop"" [label=""multiAirdrop""];
""3689_startSale"" [label=""startSale""];
""3689_closeSale"" [label=""closeSale""];
""3689_setdteamVaultAddr2"" [label=""setdteamVaultAddr2""];
""3689_setmmVaultAddr"" -> ""3689_onlyController"";
""3689_finalizeCampaign"" -> ""3689_do_grant_tokens"";
""3689_finalizeCampaign"" -> ""3689_onlyController"";
""3689_startSale"" -> ""3689_onlyController"";
""3689_setMaxStage3AllocationPerInvestor"" -> ""3689_onlyController"";
""3689_setrteamVaultAddr"" -> ""3689_onlyController"";
""3689_preallocate"" -> ""3689_onlyController"";
""3689_settrusteeVaultAddr"" -> ""3689_onlyController"";
""3689_toggleWhitelist"" -> ""3689_onlyController"";
""3689_airdrop"" -> ""3689_onlyController"";
""3689_setMaxStage2AllocationPerInvestor"" -> ""3689_onlyController"";
""3689_setMultipleParticipantWhitelist"" -> ""3689_setParticipantWhitelist"";
""3689_pauseSale"" -> ""3689_onlyController"";
""3689_setInvestorsBatchSize"" -> ""3689_onlyController"";
""3689_setdteamVaultAddr2"" -> ""3689_onlyController"";
""3689_closeSale"" -> ""3689_onlyController"";
""3689_setMaxStage1AllocationPerInvestor"" -> ""3689_onlyController"";
""3689_resumeSale"" -> ""3689_onlyController"";
""3689_emergencyFinalize"" -> ""3689_onlyController"";
""3689_setdteamVaultAddr4"" -> ""3689_onlyController"";
""3689_proxy_contribution"" -> ""3689_process_contribution"";
""3689_setopVaultAddr"" -> ""3689_onlyController"";
""3689_multiAirdrop"" -> ""3689_airdrop"";
""3689_setr2VaultAddr"" -> ""3689_onlyController"";
""3689_allocateInvestors"" -> ""3689_do_grant_tokens"";
""3689_setdteamVaultAddr3"" -> ""3689_onlyController"";
""3689_setMultipleParticipantWhitelist"" -> ""3689_onlyController"";
""3689_preallocate"" -> ""3689_do_grant_tokens"";
""3689_fallback"" -> ""3689_process_contribution"";
""3689_airdrop"" -> ""3689_do_grant_tokens"";
""3689_setParticipantWhitelist"" -> ""3689_onlyController"";
""3689_setMaxPreCrowdAllocationPerInvestor"" -> ""3689_onlyController"";
""3689_claimTokens"" -> ""3689_onlyController"";
""3689_setdteamVaultAddr1"" -> ""3689_onlyController"";
""3689_multiAirdrop"" -> ""3689_onlyController"";
""3689_allocateInvestors"" -> ""3689_onlyController"";
""3689_retrieveFunds"" -> ""3689_onlyController"";
}
"
0x5627e54ff24448a526cff449eae3e3c6917fb4b3.sol,iHOME,"contract iHOME is Ownable { using SafeMath for uint256; event Transfer(address indexed from,address indexed to,uint256 _tokenId); event Approval(address indexed owner,address indexed approved,uint256 _tokenId); string public constant symbol = ; string public constant name = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000000000 * 10 ** uint256(decimals); mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; function balanceOf(address _owner) public constant returns (uint256 balance) { return balances[_owner]; }",0,"subgraph cluster_542_iHOME {
label=""iHOME"";
""542_constructor"" [label=""constructor""];
""542_increaseApproval"" [label=""increaseApproval""];
""542_decreaseApproval"" [label=""decreaseApproval""];
""542_transferFrom"" [label=""transferFrom""];
""542_transfer"" [label=""transfer""];
""542_balanceOf"" [label=""balanceOf""];
""542_allowance"" [label=""allowance""];
""542_approve"" [label=""approve""];
}
"
0x5aeba72b15e4ef814460e49beca6d176caec228b.sol,PauserRole,contract PauserRole is Ownable { using Roles for Roles.Role; event PauserAdded(address indexed account); event PauserRemoved(address indexed account); Roles.Role private pausers; constructor() public { pausers.add(msg.sender); },0,"subgraph cluster_1525_PauserRole {
label=""PauserRole"";
""1525_isPauser"" [label=""isPauser""];
""1525_addPauser"" [label=""addPauser""];
""1525_constructor"" [label=""constructor""];
""1525__removePauser"" [label=""_removePauser""];
""1525_renouncePauser"" [label=""renouncePauser""];
""1525_renouncePauser"" -> ""1525_onlyPauser"";
""1525_addPauser"" -> ""1525_onlyPauser"";
}
"
0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol,TydoPreIco,contract TydoPreIco is Owned { using SafeMath for uint256; uint256 public constant COINS_PER_ETH = 12000; uint256 public constant bonus = 25; mapping (address => uint256) public balances; mapping (address => uint256) ethBalances; uint256 public ethCollected; uint256 public tokenSold; uint256 constant tokenDecMult = 1 ether; uint8 public state = 0; AbstractERC20 public token; event SaleStart(); event SaleClosedSuccess(uint256 _tokenSold); event SaleClosedFail(uint256 _tokenSold); constructor(address _coinToken) Owned() public { token = AbstractERC20(_coinToken); },0,"subgraph cluster_656_TydoPreIco {
label=""TydoPreIco"";
""656_withdrawTokens"" [label=""withdrawTokens""];
""656_closeSuccess"" [label=""closeSuccess""];
""656_addBonus"" [label=""addBonus""];
""656_open"" [label=""open""];
""656_fallback"" [label=""fallback""];
""656_canBuy"" [label=""canBuy""];
""656_refund"" [label=""refund""];
""656_constructor"" [label=""constructor""];
""656_tokensLeft"" [label=""tokensLeft""];
""656_buy"" [label=""buy""];
""656_withdraw"" [label=""withdraw""];
""656_closeFail"" [label=""closeFail""];
""656_withdraw"" -> ""656_ownerOnly"";
""656_constructor"" -> ""656_constructor"";
""656_fallback"" -> ""656_withdrawTokens"";
""656_buy"" -> ""656_canBuy"";
""656_fallback"" -> ""656_buy"";
""656_open"" -> ""656_ownerOnly"";
""656_fallback"" -> ""656_refund"";
""656_closeFail"" -> ""656_ownerOnly"";
""656_closeSuccess"" -> ""656_ownerOnly"";
""656_buy"" -> ""656_addBonus"";
}
"
0xeceb4f23326a5a721a8d6dd4c10902d163b16a68.sol,Token,"contract Token is SafeMath, Owned { uint256 constant DAY_IN_SECONDS = 86400; string public constant standard = ; string public name = ; string public symbol = ; uint8 public decimals = 0; uint256 public totalSupply = 0; mapping (address => uint256) public balanceP; mapping (address => mapping (address => uint256)) public allowance; mapping (address => uint256[]) public lockTime; mapping (address => uint256[]) public lockValue; mapping (address => uint256) public lockNum; mapping (address => bool) public locker; uint256 public later = 0; uint256 public earlier = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event TransferredLocked(address indexed _from, address indexed _to, uint256 _time, uint256 _value); event TokenUnlocked(address indexed _address, uint256 _value); function Token(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public { require(bytes(_name).length > 0 && bytes(_symbol).length > 0); name = _name; symbol = _symbol; decimals = _decimals; totalSupply = _totalSupply; balanceP[msg.sender] = _totalSupply; }",0,"subgraph cluster_1359_Token {
label=""Token"";
""1359_approve"" [label=""approve""];
""1359_transfer"" [label=""transfer""];
""1359_showTime"" [label=""showTime""];
""1359_setUnlockLater"" [label=""setUnlockLater""];
""1359_balanceOf"" [label=""balanceOf""];
""1359_balanceLocked"" [label=""balanceLocked""];
""1359_calcUnlock"" [label=""calcUnlock""];
""1359_balanceUnlocked"" [label=""balanceUnlocked""];
""1359_removeLocker"" [label=""removeLocker""];
""1359_addLocker"" [label=""addLocker""];
""1359_Token"" [label=""Token""];
""1359_fallback"" [label=""fallback""];
""1359_transferLocked"" [label=""transferLocked""];
""1359_transferLockedFrom"" [label=""transferLockedFrom""];
""1359_setUnlockEarlier"" [label=""setUnlockEarlier""];
""1359_transferFrom"" [label=""transferFrom""];
""1359_showValue"" [label=""showValue""];
""1359_transfer"" -> ""1359_add"";
""1359_showTime"" -> ""1359_sub"";
""1359_setUnlockEarlier"" -> ""1359_add"";
""1359_transferLocked"" -> ""1359_add"";
""1359_transferLockedFrom"" -> ""1359_validAddress"";
""1359_addLocker"" -> ""1359_validAddress"";
""1359_transferLocked"" -> ""1359_calcUnlock"";
""1359_transferLocked"" -> ""1359_validAddress"";
""1359_setUnlockLater"" -> ""1359_add"";
""1359_balanceLocked"" -> ""1359_add"";
""1359_transferLockedFrom"" -> ""1359_calcUnlock"";
""1359_transfer"" -> ""1359_validAddress"";
""1359_calcUnlock"" -> ""1359_add"";
""1359_transferFrom"" -> ""1359_add"";
""1359_transfer"" -> ""1359_sub"";
""1359_transfer"" -> ""1359_calcUnlock"";
""1359_addLocker"" -> ""1359_onlyOwner"";
""1359_transferFrom"" -> ""1359_validAddress"";
""1359_transferLockedFrom"" -> ""1359_add"";
""1359_balanceUnlocked"" -> ""1359_add"";
""1359_transferLocked"" -> ""1359_sub"";
""1359_transferFrom"" -> ""1359_calcUnlock"";
""1359_removeLocker"" -> ""1359_onlyOwner"";
""1359_showTime"" -> ""1359_validAddress"";
""1359_showTime"" -> ""1359_add"";
""1359_setUnlockLater"" -> ""1359_onlyOwner"";
""1359_approve"" -> ""1359_validAddress"";
""1359_approve"" -> ""1359_calcUnlock"";
""1359_balanceOf"" -> ""1359_add"";
""1359_transferLockedFrom"" -> ""1359_sub"";
""1359_transferFrom"" -> ""1359_sub"";
""1359_setUnlockEarlier"" -> ""1359_onlyOwner"";
""1359_showValue"" -> ""1359_validAddress"";
""1359_removeLocker"" -> ""1359_validAddress"";
}
"
0xecfae6f958f7ab15bdf171eeefa568e41eabf641.sol,LYNIA,contract LYNIA { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_40_AcceptsLYNIA {
label=""AcceptsLYNIA"";
""40_tokenFallback"" [label=""tokenFallback""];
""40_AcceptsLYNIA"" [label=""AcceptsLYNIA""];
}
"
0x5094f35a78dbe896c4f357bf9165448be40309de.sol,Preallocation,"contract Preallocation is Ownable { using SafeMath for uint; address public investor; uint public maxBalance; enum States { Pending, Success, Fail }",0,"subgraph cluster_346_Preallocation {
label=""Preallocation"";
""346_setFailed"" [label=""setFailed""];
""346_buyTokens"" [label=""buyTokens""];
""346_setInvestor"" [label=""setInvestor""];
""346_Preallocation"" [label=""Preallocation""];
""346_withdraw"" [label=""withdraw""];
""346_fallback"" [label=""fallback""];
""346_stateIs"" [label=""stateIs""];
""346_setFailed"" -> ""346_onlyOwner"";
""346_withdraw"" -> ""346_notState"";
""346_setInvestor"" -> ""346_onlyOwner"";
""346_buyTokens"" -> ""346_onlyOwner"";
""346_withdraw"" -> ""346_onlyOwner"";
}
"
0x88c1f00df493673f72aa0481187a0ff8c5ad0e14.sol,EtherSpaceCore,"contract EtherSpaceCore is ERC721Token, Ownable, Claimable, Destructible { string public url = ""https: using SafeMath for uint256; struct Spaceship { uint16 model; bool battleMode; uint32 battleWins; uint32 battleLosses; uint256 battleStake; bytes5 upgrades; bool isAuction; uint256 auctionPrice; }",0,"subgraph cluster_2401_EtherSpaceCore {
label=""EtherSpaceCore"";
""2401_newSpaceshipUpgrade"" [label=""newSpaceshipUpgrade""];
""2401_getPlayerBalance"" [label=""getPlayerBalance""];
""2401_getPlayerSpaceshipBattleStakeById"" [label=""getPlayerSpaceshipBattleStakeById""];
""2401__generateSpaceship"" [label=""_generateSpaceship""];
""2401_battleRemove"" [label=""battleRemove""];
""2401_getPlayerSpaceshipAuctionById"" [label=""getPlayerSpaceshipAuctionById""];
""2401_getSpaceshipUpgradeCount"" [label=""getSpaceshipUpgradeCount""];
""2401_sellSpaceship"" [label=""sellSpaceship""];
""2401_symbol"" [label=""symbol""];
""2401_getPlayerSpaceshipBattleWinsById"" [label=""getPlayerSpaceshipBattleWinsById""];
""2401_setBattleContract"" [label=""setBattleContract""];
""2401_buySpaceshipUpgrade"" [label=""buySpaceshipUpgrade""];
""2401_fallback"" [label=""fallback""];
""2401_bidSpaceship"" [label=""bidSpaceship""];
""2401_name"" [label=""name""];
""2401_getSpaceshipProductTotalSoldByModel"" [label=""getSpaceshipProductTotalSoldByModel""];
""2401_battle"" [label=""battle""];
""2401_getSpaceshipProductCount"" [label=""getSpaceshipProductCount""];
""2401_setSpaceshipPrice"" [label=""setSpaceshipPrice""];
""2401_getPlayerSpaceships"" [label=""getPlayerSpaceships""];
""2401_ids"" [label=""ids""];
""2401_battleAdd"" [label=""battleAdd""];
""2401_getPlayerSpaceshipOwnerById"" [label=""getPlayerSpaceshipOwnerById""];
""2401_getPlayerSpaceshipBattleLossesById"" [label=""getPlayerSpaceshipBattleLossesById""];
""2401_constructor"" [label=""constructor""];
""2401_getPlayerSpaceshipBattleLevelById"" [label=""getPlayerSpaceshipBattleLevelById""];
""2401_getPlayerSpaceshipCount"" [label=""getPlayerSpaceshipCount""];
""2401_giftSpaceship"" [label=""giftSpaceship""];
""2401_getSpaceshipProductAttributesByModel"" [label=""getSpaceshipProductAttributesByModel""];
""2401_cashOut"" [label=""cashOut""];
""2401_getPlayerSpaceshipBattleModeById"" [label=""getPlayerSpaceshipBattleModeById""];
""2401_setBattleFee"" [label=""setBattleFee""];
""2401_getPlayerSpaceshipAuctionPriceById"" [label=""getPlayerSpaceshipAuctionPriceById""];
""2401_getPlayerSpaceshipModelById"" [label=""getPlayerSpaceshipModelById""];
""2401_getSpaceshipTotalSold"" [label=""getSpaceshipTotalSold""];
""2401_setUpgradeContract"" [label=""setUpgradeContract""];
""2401_getPlayerSpaceshipModelByIndex"" [label=""getPlayerSpaceshipModelByIndex""];
""2401__setUpgradeContract"" [label=""_setUpgradeContract""];
""2401_getSpaceshipUpgradePriceByModel"" [label=""getSpaceshipUpgradePriceByModel""];
""2401_getPlayerSpaceshipUpgradesById"" [label=""getPlayerSpaceshipUpgradesById""];
""2401_buySpaceship"" [label=""buySpaceship""];
""2401_getSpaceshipProductClassByModel"" [label=""getSpaceshipProductClassByModel""];
""2401_getPlayerSpaceshipBattleStakePaidById"" [label=""getPlayerSpaceshipBattleStakePaidById""];
""2401__newSpaceshipProduct"" [label=""_newSpaceshipProduct""];
""2401_getSpaceshipUpgradeTotalSoldByModel"" [label=""getSpaceshipUpgradeTotalSoldByModel""];
""2401__setBattleContract"" [label=""_setBattleContract""];
""2401_newSpaceshipProduct"" [label=""newSpaceshipProduct""];
""2401_getSpaceshipProductPriceByModel"" [label=""getSpaceshipProductPriceByModel""];
""2401_giftSpaceship"" -> ""2401_onlyOwner"";
""2401_battleRemove"" -> ""2401_onlyOwnerOf"";
""2401_bidSpaceship"" -> ""2401_getPlayerSpaceshipAuctionPriceById"";
""2401_getSpaceshipTotalSold"" -> ""2401_totalSupply"";
""2401_setUpgradeContract"" -> ""2401__setUpgradeContract"";
""2401_getPlayerSpaceshipOwnerById"" -> ""2401_ownerOf"";
""2401_buySpaceshipUpgrade"" -> ""2401_onlyOwnerOf"";
""2401_sellSpaceship"" -> ""2401_onlyOwnerOf"";
""2401_buySpaceship"" -> ""2401__generateSpaceship"";
""2401_newSpaceshipProduct"" -> ""2401__newSpaceshipProduct"";
""2401_battle"" -> ""2401_getPlayerSpaceshipBattleStakeById"";
""2401_newSpaceshipProduct"" -> ""2401_onlyOwner"";
""2401_setBattleContract"" -> ""2401_onlyOwner"";
""2401_bidSpaceship"" -> ""2401_clearApprovalAndTransfer"";
""2401_battle"" -> ""2401_onlyOwnerOf"";
""2401_newSpaceshipUpgrade"" -> ""2401_onlyOwner"";
""2401_constructor"" -> ""2401__newSpaceshipProduct"";
""2401_battleAdd"" -> ""2401_onlyOwnerOf"";
""2401_getPlayerSpaceshipModelByIndex"" -> ""2401_tokensOf"";
""2401_getPlayerSpaceships"" -> ""2401_tokensOf"";
""2401_buySpaceshipUpgrade"" -> ""2401_getPlayerSpaceshipBattleModeById"";
""2401_bidSpaceship"" -> ""2401_getPlayerSpaceshipAuctionById"";
""2401_battleAdd"" -> ""2401_getPlayerSpaceshipBattleStakeById"";
""2401_setSpaceshipPrice"" -> ""2401_onlyOwner"";
""2401_setBattleContract"" -> ""2401__setBattleContract"";
""2401_setBattleFee"" -> ""2401_onlyOwner"";
""2401_getPlayerSpaceshipCount"" -> ""2401_balanceOf"";
""2401_battle"" -> ""2401_ownerOf"";
""2401_setUpgradeContract"" -> ""2401_onlyOwner"";
""2401_bidSpaceship"" -> ""2401_getPlayerSpaceshipOwnerById"";
""2401_giftSpaceship"" -> ""2401__generateSpaceship"";
""2401__generateSpaceship"" -> ""2401__mint"";
}
"
0x6c5d55e3dabbd32166f9062ec796dbc27d574080.sol,CDCOTokenBasic,contract CDCOTokenBasic is ERC20 { using SafeMath for uint256; mapping (address => mapping (address => uint256)) internal allowed; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },0,"subgraph cluster_393_CDCOTokenBasic {
label=""CDCOTokenBasic"";
""393_decreaseApproval"" [label=""decreaseApproval""];
""393_balanceOf"" [label=""balanceOf""];
""393_increaseApproval"" [label=""increaseApproval""];
""393_transfer"" [label=""transfer""];
""393_allowance"" [label=""allowance""];
""393_approve"" [label=""approve""];
""393_totalSupply"" [label=""totalSupply""];
}
"
0x3a266f97425cd281c1770b71662fcf4415c29190.sol,CryptoProgramFactory,contract CryptoProgramFactory { bool status = false; using SafeMath for uint256; address public administrator; uint256 private BASE_PRICE = 0.1 ether; uint256 private BASE_TIME = 4 hours; MemoryFactoryInterface public Memory; CryptoMiningWarInterface public MiningWar; CryptoEngineerInterface public Engineer; mapping(uint256 => Factory) public factories; mapping(address => bool) public miniGames; struct Factory { uint256 level; uint256 crystals; uint256 programPriceByCrystals; uint256 programPriceByDarkCrystals; uint256 programValue; uint256 eth; uint256 time; },0,"subgraph cluster_1129_CryptoProgramFactory {
label=""CryptoProgramFactory"";
""1129_isContractMiniGame"" [label=""isContractMiniGame""];
""1129_setProgramValue"" [label=""setProgramValue""];
""1129_upgrade"" [label=""upgrade""];
""1129_setMemoryInterface"" [label=""setMemoryInterface""];
""1129_setEngineerInterface"" [label=""setEngineerInterface""];
""1129_setupMiniGame"" [label=""setupMiniGame""];
""1129_getProgramsValue"" [label=""getProgramsValue""];
""1129_setContractMiniGame"" [label=""setContractMiniGame""];
""1129_constructor"" [label=""constructor""];
""1129_setProgramPriceByDarkCrystals"" [label=""setProgramPriceByDarkCrystals""];
""1129_updateFactory"" [label=""updateFactory""];
""1129_fallback"" [label=""fallback""];
""1129_setProgramPriceByCrystals"" [label=""setProgramPriceByCrystals""];
""1129_devFee"" [label=""devFee""];
""1129_startGame"" [label=""startGame""];
""1129_subPrograms"" [label=""subPrograms""];
""1129_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1129_getData"" [label=""getData""];
""1129_initFactory"" [label=""initFactory""];
""1129_buyProgarams"" [label=""buyProgarams""];
""1129_addFactory"" [label=""addFactory""];
""1129_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1129_setContractMiniGame"" -> ""1129_isAdministrator"";
""1129_updateFactory"" -> ""1129_devFee"";
""1129_constructor"" -> ""1129_setEngineerInterface"";
""1129_constructor"" -> ""1129_setMiningWarInterface"";
""1129_setEngineerInterface"" -> ""1129_isAdministrator"";
""1129_constructor"" -> ""1129_setMemoryInterface"";
""1129_setProgramPriceByDarkCrystals"" -> ""1129_isAdministrator"";
""1129_setMemoryInterface"" -> ""1129_isAdministrator"";
""1129_startGame"" -> ""1129_initFactory"";
""1129_subPrograms"" -> ""1129_onlyContractsMiniGame"";
""1129_setMiningWarInterface"" -> ""1129_isAdministrator"";
""1129_setProgramValue"" -> ""1129_isAdministrator"";
""1129_addFactory"" -> ""1129_isAdministrator"";
""1129_setProgramPriceByCrystals"" -> ""1129_isAdministrator"";
""1129_removeContractMiniGame"" -> ""1129_isAdministrator"";
""1129_upgrade"" -> ""1129_isAdministrator"";
}
"
0x0111ac7e9425c891f935c4ce54cf16db7c14b7db.sol,ERC721BasicToken,"contract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic { using SafeMath for uint256; using AddressUtils for address; bytes4 private constant ERC721_RECEIVED = 0x150b7a02; mapping (uint256 => address) internal tokenOwner; mapping (uint256 => address) internal tokenApprovals; mapping (address => uint256) internal ownedTokensCount; mapping (address => mapping (address => bool)) internal operatorApprovals; constructor() public { _registerInterface(InterfaceId_ERC721); _registerInterface(InterfaceId_ERC721Exists); }",0,"subgraph cluster_2892_ERC721BasicToken {
label=""ERC721BasicToken"";
""2892_setApprovalForAll"" [label=""setApprovalForAll""];
""2892_transferFrom"" [label=""transferFrom""];
""2892__burn"" [label=""_burn""];
""2892_addTokenTo"" [label=""addTokenTo""];
""2892_checkAndCallSafeTransfer"" [label=""checkAndCallSafeTransfer""];
""2892_exists"" [label=""exists""];
""2892__mint"" [label=""_mint""];
""2892_ownerOf"" [label=""ownerOf""];
""2892_clearApproval"" [label=""clearApproval""];
""2892_safeTransferFrom"" [label=""safeTransferFrom""];
""2892_isApprovedOrOwner"" [label=""isApprovedOrOwner""];
""2892_approve"" [label=""approve""];
""2892_removeTokenFrom"" [label=""removeTokenFrom""];
""2892_getApproved"" [label=""getApproved""];
""2892_isApprovedForAll"" [label=""isApprovedForAll""];
""2892_balanceOf"" [label=""balanceOf""];
""2892_constructor"" [label=""constructor""];
""2892_safeTransferFrom"" -> ""2892_checkAndCallSafeTransfer"";
""2892__burn"" -> ""2892_clearApproval"";
""2892_transferFrom"" -> ""2892_addTokenTo"";
""2892_transferFrom"" -> ""2892_removeTokenFrom"";
""2892_transferFrom"" -> ""2892_clearApproval"";
""2892_approve"" -> ""2892_ownerOf"";
""2892__mint"" -> ""2892_addTokenTo"";
""2892_approve"" -> ""2892_isApprovedForAll"";
""2892__burn"" -> ""2892_removeTokenFrom"";
""2892_safeTransferFrom"" -> ""2892_safeTransferFrom"";
""2892_isApprovedOrOwner"" -> ""2892_ownerOf"";
""2892_removeTokenFrom"" -> ""2892_ownerOf"";
""2892_safeTransferFrom"" -> ""2892_transferFrom"";
""2892_clearApproval"" -> ""2892_ownerOf"";
""2892_isApprovedOrOwner"" -> ""2892_getApproved"";
""2892_isApprovedOrOwner"" -> ""2892_isApprovedForAll"";
""2892_transferFrom"" -> ""2892_isApprovedOrOwner"";
""2892_constructor"" -> ""2892__registerInterface"";
}
"
0x33d133f175b5cee9aac255448d52394818b76cd0.sol,TrexCoin,"contract TrexCoin is Token { using SafeMath for uint256; address public owner; uint256 public maxSupply; bool public stopped = false; event Burn(address indexed from, uint256 value); event Mint(address indexed to, uint256 value); event Stop(); event Start(); event Rename(string name, string symbol); modifier isOwner { assert(msg.sender == owner); _; }",0,"subgraph cluster_793_TrexCoin {
label=""TrexCoin"";
""793_transfer"" [label=""transfer""];
""793__mint"" [label=""_mint""];
""793_stop"" [label=""stop""];
""793_start"" [label=""start""];
""793_approve"" [label=""approve""];
""793_mintTo"" [label=""mintTo""];
""793_rename"" [label=""rename""];
""793_burnFrom"" [label=""burnFrom""];
""793_approveAndCall"" [label=""approveAndCall""];
""793__transfer"" [label=""_transfer""];
""793_burn"" [label=""burn""];
""793__approve"" [label=""_approve""];
""793_transferFrom"" [label=""transferFrom""];
""793_TrexCoin"" [label=""TrexCoin""];
""793_mint"" [label=""mint""];
""793__burn"" [label=""_burn""];
""793_transferFrom"" -> ""793_isValidAddress"";
""793_transferFrom"" -> ""793_hasPayloadSize"";
""793_transfer"" -> ""793__transfer"";
""793_approve"" -> ""793_isValidAddress"";
""793_approveAndCall"" -> ""793__approve"";
""793_approve"" -> ""793_isRunning"";
""793_burnFrom"" -> ""793_isRunning"";
""793_approveAndCall"" -> ""793_isValidAddress"";
""793_mint"" -> ""793_isOwner"";
""793_burnFrom"" -> ""793_hasPayloadSize"";
""793_burnFrom"" -> ""793__burn"";
""793_approve"" -> ""793_hasPayloadSize"";
""793_start"" -> ""793_isOwner"";
""793_burn"" -> ""793_hasPayloadSize"";
""793_approveAndCall"" -> ""793_isRunning"";
""793_transfer"" -> ""793_isValidAddress"";
""793_burn"" -> ""793__burn"";
""793_burnFrom"" -> ""793_isValidAddress"";
""793_transfer"" -> ""793_hasPayloadSize"";
""793_transferFrom"" -> ""793_isRunning"";
""793_transfer"" -> ""793_isRunning"";
""793_mintTo"" -> ""793__mint"";
""793_approve"" -> ""793__approve"";
""793_mint"" -> ""793__mint"";
""793_rename"" -> ""793_isOwner"";
""793_burn"" -> ""793_isValidAddress"";
""793_stop"" -> ""793_isOwner"";
""793_mintTo"" -> ""793_isOwner"";
""793_transferFrom"" -> ""793__transfer"";
""793_TrexCoin"" -> ""793__mint"";
""793_burn"" -> ""793_isRunning"";
""793_approveAndCall"" -> ""793_hasPayloadSize"";
}
"
0x48e3ec3d717ca867fa5b4ab61f6874dd0e3b8500.sol,ZchargeToken,"contract ZchargeToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function ZchargeToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",0,"subgraph cluster_642_ZchargeToken {
label=""ZchargeToken"";
""642_buy"" [label=""buy""];
""642_sell"" [label=""sell""];
""642_mintToken"" [label=""mintToken""];
""642_setPrices"" [label=""setPrices""];
""642_ZchargeToken"" [label=""ZchargeToken""];
""642__transfer"" [label=""_transfer""];
""642_freezeAccount"" [label=""freezeAccount""];
""642_ZchargeToken"" -> ""642_TokenERC20"";
""642_sell"" -> ""642__transfer"";
""642_setPrices"" -> ""642_onlyOwner"";
""642_mintToken"" -> ""642_onlyOwner"";
""642_freezeAccount"" -> ""642_onlyOwner"";
""642_buy"" -> ""642__transfer"";
}
"
0x02611ca37364d30ac9a11ade6b02aad288127c98.sol,TokenERC20,"contract TokenERC20 { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 18; uint256 public totalSupply; address public admin = 0x9Ef4a2CaA82D396d7B8c244DE57212E0fE332C73; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) internal allowed; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Burn(address indexed burner, uint256 value); function TokenERC20( uint256 initialSupply ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balances[admin] = totalSupply; emit Transfer(this,admin,totalSupply); }",0,"subgraph cluster_494_TokenERC20 {
label=""TokenERC20"";
""494_getBalance"" [label=""getBalance""];
""494_approve"" [label=""approve""];
""494_decreaseApproval"" [label=""decreaseApproval""];
""494_TokenERC20"" [label=""TokenERC20""];
""494_increaseApproval"" [label=""increaseApproval""];
""494_allowance"" [label=""allowance""];
""494_transfer"" [label=""transfer""];
""494_transferFrom"" [label=""transferFrom""];
""494_totalSupply"" [label=""totalSupply""];
""494_balanceOf"" [label=""balanceOf""];
""494_balanceOf"" -> ""494_getBalance"";
}
"
0xede85cd1b56791dca6fe9f589ae1c2961695880b.sol,BinksBucksToken,contract BinksBucksToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint internal _totalSupply = 0; mapping(address => uint256) internal _balances; mapping(address => mapping (address => uint256)) _allowed; function totalSupply() public constant returns (uint) { return _totalSupply; },0,"subgraph cluster_324_BinksBucksToken {
label=""BinksBucksToken"";
""324_allowance"" [label=""allowance""];
""324_canAdd"" [label=""canAdd""];
""324_hasAllowance"" [label=""hasAllowance""];
""324_totalSupply"" [label=""totalSupply""];
""324_balanceOf"" [label=""balanceOf""];
""324_approve"" [label=""approve""];
""324_canRecieve"" [label=""canRecieve""];
""324_transferFrom"" [label=""transferFrom""];
""324_transfer"" [label=""transfer""];
""324_hasAtLeast"" [label=""hasAtLeast""];
""324_transfer"" -> ""324_hasAtLeast"";
""324_transfer"" -> ""324_canRecieve"";
""324_transferFrom"" -> ""324_canRecieve"";
""324_transferFrom"" -> ""324_hasAllowance"";
""324_transferFrom"" -> ""324_hasAtLeast"";
}
"
0x2f50ab197f950e0c2184cf5d804f4141502cd987.sol,LoggedDividend,"contract LoggedDividend is Ownable, LoggedERC20 { struct Dividend { uint256 id; uint256 block; uint256 time; uint256 amount; uint256 claimedAmount; uint256 transferedBack; uint256 totalSupply; uint256 recycleTime; bool recycled; mapping (address => bool) claimed; }",0,"subgraph cluster_980_LoggedDividend {
label=""LoggedDividend"";
""980_refundUnclaimedEthers"" [label=""refundUnclaimedEthers""];
""980_addDividend"" [label=""addDividend""];
""980_claimDividends"" [label=""claimDividends""];
""980_recycleDividend"" [label=""recycleDividend""];
""980_claimDividend"" [label=""claimDividend""];
""980_LoggedDividend"" [label=""LoggedDividend""];
""980_addDividend"" -> ""980_onlyOwner"";
""980_addDividend"" -> ""980_valueAt"";
""980_recycleDividend"" -> ""980_onlyOwner"";
""980_claimDividends"" -> ""980_claimDividend"";
""980_LoggedDividend"" -> ""980_LoggedERC20"";
""980_refundUnclaimedEthers"" -> ""980_onlyOwner"";
""980_claimDividend"" -> ""980_valueAt"";
}
"
0x759075d2107abfb9747fc0655d9b6b72b9edde3d.sol,TokenSale,"contract TokenSale { IERC20Token public tokenContract; address owner; uint256 public tokensSold; event Sold(address buyer, uint256 amount); constructor(IERC20Token _tokenContract) public { owner = msg.sender; tokenContract = _tokenContract; }",0,"subgraph cluster_147_TokenSale {
label=""TokenSale"";
""147_constructor"" [label=""constructor""];
""147_fallback"" [label=""fallback""];
""147_safeMultiply"" [label=""safeMultiply""];
""147_endSale"" [label=""endSale""];
""147_fallback"" -> ""147_safeMultiply"";
}
"
0xeb108d7c4ab669beea11e3f2422348c5fd19d021.sol,AxeMining,"contract AxeMining is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 9000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 100000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_930_AxeMining {
label=""AxeMining"";
""930_getTokenBalance"" [label=""getTokenBalance""];
""930_getTokens"" [label=""getTokens""];
""930_balanceOf"" [label=""balanceOf""];
""930_transferOwnership"" [label=""transferOwnership""];
""930_doAirdrop"" [label=""doAirdrop""];
""930_withdraw"" [label=""withdraw""];
""930_burn"" [label=""burn""];
""930_transferFrom"" [label=""transferFrom""];
""930_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""930_allowance"" [label=""allowance""];
""930_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""930_updateTokensPerEth"" [label=""updateTokensPerEth""];
""930_finishDistribution"" [label=""finishDistribution""];
""930_transfer"" [label=""transfer""];
""930_approve"" [label=""approve""];
""930_distr"" [label=""distr""];
""930_fallback"" [label=""fallback""];
""930_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""930_fallback"" -> ""930_getTokens"";
""930_burn"" -> ""930_onlyOwner"";
""930_getTokens"" -> ""930_canDistr"";
""930_withdrawAltcoinTokens"" -> ""930_onlyOwner"";
""930_transfer"" -> ""930_onlyPayloadSize"";
""930_transferFrom"" -> ""930_onlyPayloadSize"";
""930_adminClaimAirdrop"" -> ""930_doAirdrop"";
""930_adminClaimAirdrop"" -> ""930_onlyOwner"";
""930_distr"" -> ""930_canDistr"";
""930_adminClaimAirdropMultiple"" -> ""930_doAirdrop"";
""930_transferOwnership"" -> ""930_onlyOwner"";
""930_getTokens"" -> ""930_distr"";
""930_finishDistribution"" -> ""930_canDistr"";
""930_finishDistribution"" -> ""930_onlyOwner"";
""930_withdraw"" -> ""930_onlyOwner"";
""930_updateTokensPerEth"" -> ""930_onlyOwner"";
""930_adminClaimAirdropMultiple"" -> ""930_onlyOwner"";
}
"
0x4c1a22be48ef517391a491547389fb5f4f75a885.sol,NEWSOKUCOIN,"contract NEWSOKUCOIN is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 4e10 * 1e18; uint256 public distributeAmount = 0; bool public mintingFinished = false; mapping(address => uint256) public balanceOf; mapping(address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed from, uint256 amount); event Mint(address indexed to, uint256 amount); event MintFinished(); function NEWSOKUCOIN() public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_1838_NEWSOKUCOIN {
label=""NEWSOKUCOIN"";
""1838_setDistributeAmount"" [label=""setDistributeAmount""];
""1838_distributeAirdrop"" [label=""distributeAirdrop""];
""1838_allowance"" [label=""allowance""];
""1838_collectTokens"" [label=""collectTokens""];
""1838_balanceOf"" [label=""balanceOf""];
""1838_transferToAddress"" [label=""transferToAddress""];
""1838_isContract"" [label=""isContract""];
""1838_totalSupply"" [label=""totalSupply""];
""1838_fallback"" [label=""fallback""];
""1838_lockupAccounts"" [label=""lockupAccounts""];
""1838_symbol"" [label=""symbol""];
""1838_transferFrom"" [label=""transferFrom""];
""1838_approve"" [label=""approve""];
""1838_freezeAccounts"" [label=""freezeAccounts""];
""1838_autoDistribute"" [label=""autoDistribute""];
""1838_transferToContract"" [label=""transferToContract""];
""1838_burn"" [label=""burn""];
""1838_finishMinting"" [label=""finishMinting""];
""1838_name"" [label=""name""];
""1838_mint"" [label=""mint""];
""1838_transfer"" [label=""transfer""];
""1838_decimals"" [label=""decimals""];
""1838_NEWSOKUCOIN"" [label=""NEWSOKUCOIN""];
""1838_mint"" -> ""1838_canMint"";
""1838_transfer"" -> ""1838_transferToContract"";
""1838_burn"" -> ""1838_onlyOwner"";
""1838_setDistributeAmount"" -> ""1838_onlyOwner"";
""1838_lockupAccounts"" -> ""1838_onlyOwner"";
""1838_transfer"" -> ""1838_transferToAddress"";
""1838_finishMinting"" -> ""1838_onlyOwner"";
""1838_mint"" -> ""1838_onlyOwner"";
""1838_finishMinting"" -> ""1838_canMint"";
""1838_collectTokens"" -> ""1838_onlyOwner"";
""1838_freezeAccounts"" -> ""1838_onlyOwner"";
""1838_transfer"" -> ""1838_isContract"";
""1838_fallback"" -> ""1838_autoDistribute"";
}
"
0xedfd2e59cd5e5a683d14fc5cbd939a3602203e2f.sol,F3DGoQuick,"contract F3DGoQuick is F3Devents{ using SafeMath for uint256; using NameFilter for string; using F3DKeysCalcFast for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x82e0C3626622d9a8234BFBaf6DD0f8d070C2609D); address private admin = 0xacb257873b064b956BD9be84dc347C55F7b2ae8C; address private coin_base = 0x345A756a49DF0eD24002857dd25DAb6a5F4E83FF; string constant public name = ; string constant public symbol = ; uint256 private rndGap_ = 60 seconds; uint256 constant private rndInit_ = 5 minutes; uint256 constant private rndInc_ = 5 minutes; uint256 constant private rndMax_ = 5 minutes; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(30,6); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(56,10); fees_[3] = F3Ddatasets.TeamFee(43,8); potSplit_[0] = F3Ddatasets.PotSplit(15,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(30,10); }",0,"subgraph cluster_4827_F3DGoQuick {
label=""F3DGoQuick"";
""4827_calcKeysReceived"" [label=""calcKeysReceived""];
""4827_calcAverageICOPhaseKeyPrice"" [label=""calcAverageICOPhaseKeyPrice""];
""4827_airdrop"" [label=""airdrop""];
""4827_getBuyPrice"" [label=""getBuyPrice""];
""4827_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4827_fallback"" [label=""fallback""];
""4827_distributeInternal"" [label=""distributeInternal""];
""4827_getPlayerVaults"" [label=""getPlayerVaults""];
""4827_registerNameXname"" [label=""registerNameXname""];
""4827_distributeExternal"" [label=""distributeExternal""];
""4827_reLoadXaddr"" [label=""reLoadXaddr""];
""4827_icoPhaseCore"" [label=""icoPhaseCore""];
""4827_withdrawEarnings"" [label=""withdrawEarnings""];
""4827_activate"" [label=""activate""];
""4827_potSwap"" [label=""potSwap""];
""4827_buyXaddr"" [label=""buyXaddr""];
""4827_buyXname"" [label=""buyXname""];
""4827_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4827_registerNameXID"" [label=""registerNameXID""];
""4827_calcPlayerICOPhaseKeys"" [label=""calcPlayerICOPhaseKeys""];
""4827_endTx"" [label=""endTx""];
""4827_withdraw"" [label=""withdraw""];
""4827_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4827_updateGenVault"" [label=""updateGenVault""];
""4827_verifyTeam"" [label=""verifyTeam""];
""4827_reLoadXid"" [label=""reLoadXid""];
""4827_buyXid"" [label=""buyXid""];
""4827_determinePID"" [label=""determinePID""];
""4827_endRound"" [label=""endRound""];
""4827_reLoadXname"" [label=""reLoadXname""];
""4827_updateTimer"" [label=""updateTimer""];
""4827_getTimeLeft"" [label=""getTimeLeft""];
""4827_iWantXKeys"" [label=""iWantXKeys""];
""4827_updateMasks"" [label=""updateMasks""];
""4827_core"" [label=""core""];
""4827_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4827_buyCore"" [label=""buyCore""];
""4827_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4827_reLoadCore"" [label=""reLoadCore""];
""4827_registerNameXaddr"" [label=""registerNameXaddr""];
""4827_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4827_roundClaimICOKeys"" [label=""roundClaimICOKeys""];
""4827_constructor"" [label=""constructor""];
""4827_manageRoundAndPlayer"" [label=""manageRoundAndPlayer""];
""4827_fallback"" -> ""4827_isWithinLimits"";
""4827_core"" -> ""4827_endTx"";
""4827_getPlayerInfoByAddress"" -> ""4827_calcPlayerICOPhaseKeys"";
""4827_reLoadXid"" -> ""4827_isWithinLimits"";
""4827_reLoadXid"" -> ""4827_isHuman"";
""4827_reLoadXname"" -> ""4827_isWithinLimits"";
""4827_icoPhaseCore"" -> ""4827_endTx"";
""4827_getPlayerInfoByAddress"" -> ""4827_calcUnMaskedEarnings"";
""4827_manageRoundAndPlayer"" -> ""4827_endRound"";
""4827_getPlayerVaults"" -> ""4827_getPlayerVaultsHelper"";
""4827_withdrawEarnings"" -> ""4827_updateGenVault"";
""4827_distributeInternal"" -> ""4827_updateMasks"";
""4827_reLoadXid"" -> ""4827_isActivated"";
""4827_buyXname"" -> ""4827_buyCore"";
""4827_reLoadXname"" -> ""4827_isHuman"";
""4827_roundClaimICOKeys"" -> ""4827_calcAverageICOPhaseKeyPrice"";
""4827_fallback"" -> ""4827_buyCore"";
""4827_buyXaddr"" -> ""4827_verifyTeam"";
""4827_buyXaddr"" -> ""4827_buyCore"";
""4827_buyXname"" -> ""4827_isHuman"";
""4827_registerNameXaddr"" -> ""4827_isHuman"";
""4827_registerNameXname"" -> ""4827_isHuman"";
""4827_calcPlayerICOPhaseKeys"" -> ""4827_calcAverageICOPhaseKeyPrice"";
""4827_reLoadXid"" -> ""4827_verifyTeam"";
""4827_reLoadXname"" -> ""4827_verifyTeam"";
""4827_buyXid"" -> ""4827_isActivated"";
""4827_buyXname"" -> ""4827_verifyTeam"";
""4827_manageRoundAndPlayer"" -> ""4827_updateGenVault"";
""4827_reLoadCore"" -> ""4827_manageRoundAndPlayer"";
""4827_calcUnMaskedEarnings"" -> ""4827_calcPlayerICOPhaseKeys"";
""4827_buyXid"" -> ""4827_buyCore"";
""4827_reLoadXaddr"" -> ""4827_verifyTeam"";
""4827_buyCore"" -> ""4827_manageRoundAndPlayer"";
""4827_buyCore"" -> ""4827_core"";
""4827_reLoadXname"" -> ""4827_reLoadCore"";
""4827_reLoadCore"" -> ""4827_core"";
""4827_buyXaddr"" -> ""4827_isWithinLimits"";
""4827_core"" -> ""4827_calcPlayerICOPhaseKeys"";
""4827_buyXname"" -> ""4827_determinePID"";
""4827_buyXname"" -> ""4827_isActivated"";
""4827_fallback"" -> ""4827_isHuman"";
""4827_core"" -> ""4827_airdrop"";
""4827_reLoadXaddr"" -> ""4827_reLoadCore"";
""4827_buyXid"" -> ""4827_verifyTeam"";
""4827_buyXid"" -> ""4827_determinePID"";
""4827_endRound"" -> ""4827_roundClaimICOKeys"";
""4827_core"" -> ""4827_distributeExternal"";
""4827_buyXaddr"" -> ""4827_isActivated"";
""4827_buyXname"" -> ""4827_isWithinLimits"";
""4827_buyXid"" -> ""4827_isWithinLimits"";
""4827_reLoadCore"" -> ""4827_icoPhaseCore"";
""4827_updateGenVault"" -> ""4827_calcUnMaskedEarnings"";
""4827_buyXid"" -> ""4827_isHuman"";
""4827_buyXaddr"" -> ""4827_determinePID"";
""4827_getPlayerVaults"" -> ""4827_calcUnMaskedEarnings"";
""4827_reLoadXaddr"" -> ""4827_isHuman"";
""4827_icoPhaseCore"" -> ""4827_distributeExternal"";
""4827_reLoadXname"" -> ""4827_isActivated"";
""4827_getPlayerVaults"" -> ""4827_calcPlayerICOPhaseKeys"";
""4827_reLoadXid"" -> ""4827_reLoadCore"";
""4827_reLoadXaddr"" -> ""4827_isActivated"";
""4827_fallback"" -> ""4827_determinePID"";
""4827_buyCore"" -> ""4827_icoPhaseCore"";
""4827_reLoadXaddr"" -> ""4827_isWithinLimits"";
""4827_buyXaddr"" -> ""4827_isHuman"";
""4827_reLoadCore"" -> ""4827_withdrawEarnings"";
""4827_core"" -> ""4827_distributeInternal"";
""4827_core"" -> ""4827_updateTimer"";
""4827_withdraw"" -> ""4827_endRound"";
""4827_withdraw"" -> ""4827_isHuman"";
""4827_withdraw"" -> ""4827_withdrawEarnings"";
""4827_core"" -> ""4827_roundClaimICOKeys"";
""4827_fallback"" -> ""4827_isActivated"";
""4827_registerNameXID"" -> ""4827_isHuman"";
""4827_withdraw"" -> ""4827_isActivated"";
}
"
0xd7604d334ebfa84c70d2c2534f5c7c4e04716510.sol,divCashCoin,"contract divCashCoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 300000000000e18; uint256 public totalDistributed = 200000000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 500000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_873_divCashCoin {
label=""divCashCoin"";
""873_approve"" [label=""approve""];
""873_transfer"" [label=""transfer""];
""873_transferOwnership"" [label=""transferOwnership""];
""873_getTokens"" [label=""getTokens""];
""873_divCashCoin"" [label=""divCashCoin""];
""873_distr"" [label=""distr""];
""873_allowance"" [label=""allowance""];
""873_getTokenBalance"" [label=""getTokenBalance""];
""873_balanceOf"" [label=""balanceOf""];
""873_finishDistribution"" [label=""finishDistribution""];
""873_withdraw"" [label=""withdraw""];
""873_burn"" [label=""burn""];
""873_fallback"" [label=""fallback""];
""873_transferFrom"" [label=""transferFrom""];
""873_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""873_finishDistribution"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_canDistr"";
""873_burn"" -> ""873_onlyOwner"";
""873_transferOwnership"" -> ""873_onlyOwner"";
""873_distr"" -> ""873_canDistr"";
""873_withdraw"" -> ""873_onlyOwner"";
""873_transferFrom"" -> ""873_onlyPayloadSize"";
""873_finishDistribution"" -> ""873_canDistr"";
""873_withdrawForeignTokens"" -> ""873_onlyOwner"";
""873_transfer"" -> ""873_onlyPayloadSize"";
""873_fallback"" -> ""873_getTokens"";
""873_getTokens"" -> ""873_onlyWhitelist"";
""873_getTokens"" -> ""873_distr"";
}
"
0xcd6cb1b25006603382b9e9a832b8686ae240373b.sol,Etherama,"contract Etherama { IStdToken public _token; EtheramaData public _data; EtheramaCore public _core; bool public isActive = false; bool public isMigrationToNewControllerInProgress = false; bool public isActualContractVer = true; address public migrationContractAddress = address(0x0); bool public isMigrationApproved = false; address private _creator = address(0x0); event onTokenPurchase(address indexed userAddress, uint256 incomingEth, uint256 tokensMinted, address indexed referredBy); event onTokenSell(address indexed userAddress, uint256 tokensBurned, uint256 ethEarned); event onReinvestment(address indexed userAddress, uint256 ethReinvested, uint256 tokensMinted); event onWithdrawTokenOwnerReward(address indexed toAddress, uint256 ethWithdrawn); event onWinQuickPromo(address indexed userAddress, uint256 ethWon); event onWinBigPromo(address indexed userAddress, uint256 ethWon); modifier onlyContractUsers() { require(getUserLocalTokenBalance(msg.sender) > 0); _; }",0,"subgraph cluster_2025_EtheramaCore {
label=""EtheramaCore"";
""2025_getBonusPerShare"" [label=""getBonusPerShare""];
""2025__promoMinPurchaseEth"" [label=""_promoMinPurchaseEth""];
""2025__currentQuickPromoBonus"" [label=""_currentQuickPromoBonus""];
""2025_getSellCount"" [label=""getSellCount""];
""2025_getCurrentUserPromoBonus"" [label=""getCurrentUserPromoBonus""];
""2025_MIN_ETH_DEAL_VAL"" [label=""MIN_ETH_DEAL_VAL""];
""2025__totalIncomeFeePercent"" [label=""_totalIncomeFeePercent""];
""2025_getTotalSellCount"" [label=""getTotalSellCount""];
""2025_addUserTokenLocalBalance"" [label=""addUserTokenLocalBalance""];
""2025__bigPromoPercent"" [label=""_bigPromoPercent""];
""2025_setPromoMinPurchaseEth"" [label=""setPromoMinPurchaseEth""];
""2025_getCurrentUserReward"" [label=""getCurrentUserReward""];
""2025_withdrawUserReward"" [label=""withdrawUserReward""];
""2025_addBigPromoBonus"" [label=""addBigPromoBonus""];
""2025_changeControllerContract"" [label=""changeControllerContract""];
""2025__quickPromoBlockInterval"" [label=""_quickPromoBlockInterval""];
""2025_getUserTotalReward"" [label=""getUserTotalReward""];
""2025__quickPromoPercent"" [label=""_quickPromoPercent""];
""2025_setTotalIncomeFeePercent"" [label=""setTotalIncomeFeePercent""];
""2025_getBuyCount"" [label=""getBuyCount""];
""2025_addQuickPromoBonus"" [label=""addQuickPromoBonus""];
""2025_addUserRewardPayouts"" [label=""addUserRewardPayouts""];
""2025_setMinRefEthPurchase"" [label=""setMinRefEthPurchase""];
""2025_getUserBigPromoBonus"" [label=""getUserBigPromoBonus""];
""2025_setRewardPercentages"" [label=""setRewardPercentages""];
""2025_MIN_TOKEN_DEAL_VAL"" [label=""MIN_TOKEN_DEAL_VAL""];
""2025_trackBuy"" [label=""trackBuy""];
""2025_addControllerContract"" [label=""addControllerContract""];
""2025_trackSell"" [label=""trackSell""];
""2025_MAX_ETH_DEAL_VAL"" [label=""MAX_ETH_DEAL_VAL""];
""2025_setQuickPromoInterval"" [label=""setQuickPromoInterval""];
""2025_getCurrentUserShareBonus"" [label=""getCurrentUserShareBonus""];
""2025__devRewardPercent"" [label=""_devRewardPercent""];
""2025_addDevReward"" [label=""addDevReward""];
""2025_getUserReward"" [label=""getUserReward""];
""2025_convertRealTo256"" [label=""convertRealTo256""];
""2025_getBigPromoRemainingBlocks"" [label=""getBigPromoRemainingBlocks""];
""2025_calcPercent"" [label=""calcPercent""];
""2025__tokenOwnerRewardPercent"" [label=""_tokenOwnerRewardPercent""];
""2025__refBonusPercent"" [label=""_refBonusPercent""];
""2025_addBonusPerShare"" [label=""addBonusPerShare""];
""2025_MAX_GAS_PRICE"" [label=""MAX_GAS_PRICE""];
""2025_getCurrentUserRefBonus"" [label=""getCurrentUserRefBonus""];
""2025_constructor"" [label=""constructor""];
""2025_addUserRefBalance"" [label=""addUserRefBalance""];
""2025__bigPromoBlockInterval"" [label=""_bigPromoBlockInterval""];
""2025_MAGNITUDE"" [label=""MAGNITUDE""];
""2025_getTotalCollectedPromoBonus"" [label=""getTotalCollectedPromoBonus""];
""2025_withdrawRemainingEthAfterAll"" [label=""withdrawRemainingEthAfterAll""];
""2025_getUserEthVolumeSaldo"" [label=""getUserEthVolumeSaldo""];
""2025_resetUserPromoBonus"" [label=""resetUserPromoBonus""];
""2025_setBigPromoInterval"" [label=""setBigPromoInterval""];
""2025_getTotalVolumeToken"" [label=""getTotalVolumeToken""];
""2025_convert256ToReal"" [label=""convert256ToReal""];
""2025_getRewardAndPrepareWithdraw"" [label=""getRewardAndPrepareWithdraw""];
""2025_getUserRefBalance"" [label=""getUserRefBalance""];
""2025_resetUserRefBalance"" [label=""resetUserRefBalance""];
""2025_getTotalVolumeEth"" [label=""getTotalVolumeEth""];
""2025__minRefEthPurchase"" [label=""_minRefEthPurchase""];
""2025_getInitBlockNum"" [label=""getInitBlockNum""];
""2025_getBlockNumSinceInit"" [label=""getBlockNumSinceInit""];
""2025_getTotalBuyCount"" [label=""getTotalBuyCount""];
""2025__shareRewardPercent"" [label=""_shareRewardPercent""];
""2025_getUserTotalEthVolumeSaldo"" [label=""getUserTotalEthVolumeSaldo""];
""2025_trackTotalVolume"" [label=""trackTotalVolume""];
""2025_getTotalBonusPerShare"" [label=""getTotalBonusPerShare""];
""2025_removeControllerContract"" [label=""removeControllerContract""];
""2025_getUserQuickPromoBonus"" [label=""getUserQuickPromoBonus""];
""2025_getUserTotalPromoBonus"" [label=""getUserTotalPromoBonus""];
""2025_subUserTokenLocalBalance"" [label=""subUserTokenLocalBalance""];
""2025_getUserTokenLocalBalance"" [label=""getUserTokenLocalBalance""];
""2025_getUserRewardPayouts"" [label=""getUserRewardPayouts""];
""2025_getQuickPromoRemainingBlocks"" [label=""getQuickPromoRemainingBlocks""];
""2025_isRefAvailable"" [label=""isRefAvailable""];
""2025_withdrawDevReward"" [label=""withdrawDevReward""];
""2025_getCurrentUserTotalReward"" [label=""getCurrentUserTotalReward""];
""2025_MAX_TOKEN_DEAL_VAL"" [label=""MAX_TOKEN_DEAL_VAL""];
""2025_payoutQuickBonus"" [label=""payoutQuickBonus""];
""2025__currentBigPromoBonus"" [label=""_currentBigPromoBonus""];
""2025_payoutBigBonus"" [label=""payoutBigBonus""];
""2025_getCurrentUserShareBonus"" -> ""2025_getUserTotalReward"";
""2025_addUserRewardPayouts"" -> ""2025_addUserRewardPayouts"";
""2025_withdrawDevReward"" -> ""2025_onlyAdministrator"";
""2025_isRefAvailable"" -> ""2025_getUserTotalEthVolumeSaldo"";
""2025_setRewardPercentages"" -> ""2025_onlyAdministrator"";
""2025_setTotalIncomeFeePercent"" -> ""2025_onlyController"";
""2025_addControllerContract"" -> ""2025_onlyAdministrator"";
""2025_getCurrentUserTotalReward"" -> ""2025_getUserTotalReward"";
""2025_resetUserRefBalance"" -> ""2025_onlyController"";
""2025_resetUserPromoBonus"" -> ""2025_resetUserPromoBonus"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_addUserRewardPayouts"";
""2025_resetUserPromoBonus"" -> ""2025_onlyController"";
""2025_addUserRewardPayouts"" -> ""2025_onlyController"";
""2025_getCurrentUserRefBonus"" -> ""2025_getUserTotalReward"";
""2025_withdrawUserReward"" -> ""2025_getRewardAndPrepareWithdraw"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserTotalPromoBonus"";
""2025_setQuickPromoInterval"" -> ""2025_onlyAdministrator"";
""2025_getCurrentUserReward"" -> ""2025_getUserTotalReward"";
""2025_constructor"" -> ""2025_constructor"";
""2025_addBonusPerShare"" -> ""2025_onlyController"";
""2025_addDevReward"" -> ""2025_onlyController"";
""2025_trackSell"" -> ""2025_trackTotalVolume"";
""2025_getBigPromoRemainingBlocks"" -> ""2025_getBlockNumSinceInit"";
""2025_trackBuy"" -> ""2025_onlyController"";
""2025_withdrawRemainingEthAfterAll"" -> ""2025_onlyAdministrator"";
""2025_resetUserRefBalance"" -> ""2025_resetUserRefBalance"";
""2025_addQuickPromoBonus"" -> ""2025_onlyController"";
""2025_setMinRefEthPurchase"" -> ""2025_onlyAdministrator"";
""2025_changeControllerContract"" -> ""2025_onlyAdministrator"";
""2025_subUserTokenLocalBalance"" -> ""2025_onlyController"";
""2025_getBlockNumSinceInit"" -> ""2025_getInitBlockNum"";
""2025_setBigPromoInterval"" -> ""2025_onlyAdministrator"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserRefBalance"";
""2025_payoutQuickBonus"" -> ""2025_onlyController"";
""2025_payoutBigBonus"" -> ""2025_onlyController"";
""2025_trackBuy"" -> ""2025_trackTotalVolume"";
""2025_addUserTokenLocalBalance"" -> ""2025_onlyController"";
""2025_addUserRefBalance"" -> ""2025_onlyController"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_resetUserPromoBonus"";
""2025_getUserTotalReward"" -> ""2025_getUserReward"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserReward"";
""2025_trackSell"" -> ""2025_onlyController"";
""2025_getQuickPromoRemainingBlocks"" -> ""2025_getBlockNumSinceInit"";
""2025_addBigPromoBonus"" -> ""2025_onlyController"";
""2025_removeControllerContract"" -> ""2025_onlyAdministrator"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_resetUserRefBalance"";
""2025_getCurrentUserPromoBonus"" -> ""2025_getUserTotalReward"";
""2025_isRefAvailable"" -> ""2025_isRefAvailable"";
""2025_setPromoMinPurchaseEth"" -> ""2025_onlyAdministrator"";
}
"
0xa5d1e58ece1fc438d64e65769d2ab730143a4caf.sol,RobomedIco,"contract RobomedIco is ERC223, ERC20 { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; address public constant ADDR_OWNER = 0x21F6C4D926B705aD244Ec33271559dA8c562400F; address public constant ADDR_WITHDRAWAL1 = 0x0dD97e6259a7de196461B36B028456a97e3268bE; address public constant ADDR_WITHDRAWAL2 = 0x8c5B02144F7664D37FDfd4a2f90148d08A04838D; address public constant ADDR_BOUNTY_TOKENS_ACCOUNT = 0x6542393623Db0D7F27fDEd83e6feDBD767BfF9b4; address public constant ADDR_TEAM_TOKENS_ACCOUNT = 0x28c6bCAB2204CEd29677fEE6607E872E3c40d783; uint256 public constant INITIAL_COINS_FOR_VIPPLACEMENT =507937500 * 10 ** 18; uint256 public constant DURATION_VIPPLACEMENT = 1 seconds; uint256 public constant EMISSION_FOR_PRESALE = 76212500 * 10 ** 18; uint256 public constant DURATION_PRESALE = 1 days; uint256 public constant RATE_PRESALE = 2702; uint256 public constant DURATION_SALESTAGES = 10 days; uint256 public constant RATE_SALESTAGE1 = 2536; uint256 public constant EMISSION_FOR_SALESTAGE1 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE2 = 2473; uint256 public constant EMISSION_FOR_SALESTAGE2 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE3 = 2390; uint256 public constant EMISSION_FOR_SALESTAGE3 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE4 = 2349; uint256 public constant EMISSION_FOR_SALESTAGE4 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE5 = 2286; uint256 public constant EMISSION_FOR_SALESTAGE5 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE6 = 2224; uint256 public constant EMISSION_FOR_SALESTAGE6 = 40835000 * 10 ** 18; uint256 public constant RATE_SALESTAGE7 = 2182; uint256 public constant EMISSION_FOR_SALESTAGE7 = 40835000 * 10 ** 18; uint256 public constant DURATION_SALESTAGELAST = 1 days; uint256 public constant RATE_SALESTAGELAST = 2078; uint256 public constant EMISSION_FOR_SALESTAGELAST = 302505000 * 10 ** 18; uint256 public constant DURATION_NONUSETEAM = 180 days; uint256 public constant DURATION_BEFORE_RESTORE_UNSOLD = 270 days; uint256 public constant EMISSION_FOR_BOUNTY = 83750000 * 10 ** 18; uint256 public constant EMISSION_FOR_TEAM = 418750000 * 10 ** 18; uint256 public constant TEAM_MEMBER_VAL = 2000000 * 10 ** 18; enum IcoStates { VipPlacement, PreSale, SaleStage1, SaleStage2, SaleStage3, SaleStage4, SaleStage5, SaleStage6, SaleStage7, SaleStageLast, PostIco }",0,"subgraph cluster_2497_RobomedIco {
label=""RobomedIco"";
""2497_decimals"" [label=""decimals""];
""2497_gotoSaleStageLast"" [label=""gotoSaleStageLast""];
""2497_canGotoState"" [label=""canGotoState""];
""2497_RobomedIco"" [label=""RobomedIco""];
""2497_restoreUnsoldTokens"" [label=""restoreUnsoldTokens""];
""2497_transferFrom"" [label=""transferFrom""];
""2497_approveWithdrawal"" [label=""approveWithdrawal""];
""2497_transferToAddress"" [label=""transferToAddress""];
""2497_gotoSaleStage1"" [label=""gotoSaleStage1""];
""2497_transitionBetweenSaleStages"" [label=""transitionBetweenSaleStages""];
""2497_transfer"" [label=""transfer""];
""2497_gotoPostIco"" [label=""gotoPostIco""];
""2497_gotoNextState"" [label=""gotoNextState""];
""2497_balanceOf"" [label=""balanceOf""];
""2497_buyTokens"" [label=""buyTokens""];
""2497_symbol"" [label=""symbol""];
""2497_setMoney"" [label=""setMoney""];
""2497_initWithdrawal"" [label=""initWithdrawal""];
""2497_transferBounty"" [label=""transferBounty""];
""2497_teamBalanceOf"" [label=""teamBalanceOf""];
""2497_totalSupply"" [label=""totalSupply""];
""2497_allowance"" [label=""allowance""];
""2497_accrueTeamTokens"" [label=""accrueTeamTokens""];
""2497_gotoPreSale"" [label=""gotoPreSale""];
""2497_name"" [label=""name""];
""2497_transferToContract"" [label=""transferToContract""];
""2497_approve"" [label=""approve""];
""2497_transferTeam"" [label=""transferTeam""];
""2497__transfer"" [label=""_transfer""];
""2497_fallback"" [label=""fallback""];
""2497_isContract"" [label=""isContract""];
""2497_canRestoreUnsoldTokens"" [label=""canRestoreUnsoldTokens""];
""2497_restoreUnsoldTokens"" -> ""2497_canRestoreUnsoldTokens"";
""2497_gotoPreSale"" -> ""2497_canGotoState"";
""2497_initWithdrawal"" -> ""2497_afterIco"";
""2497_gotoNextState"" -> ""2497_gotoPostIco"";
""2497_gotoNextState"" -> ""2497_gotoSaleStage1"";
""2497_gotoSaleStage1"" -> ""2497_canGotoState"";
""2497_transitionBetweenSaleStages"" -> ""2497_setMoney"";
""2497_transferTeam"" -> ""2497_onlyOwner"";
""2497_transferToAddress"" -> ""2497__transfer"";
""2497_transitionBetweenSaleStages"" -> ""2497_canGotoState"";
""2497_gotoSaleStageLast"" -> ""2497_setMoney"";
""2497_transfer"" -> ""2497_transferToContract"";
""2497_gotoSaleStage1"" -> ""2497_setMoney"";
""2497_gotoSaleStageLast"" -> ""2497_canGotoState"";
""2497_initWithdrawal"" -> ""2497_onlyWithdrawal1"";
""2497_buyTokens"" -> ""2497_transitionBetweenSaleStages"";
""2497_transfer"" -> ""2497_transferToAddress"";
""2497_transfer"" -> ""2497_isContract"";
""2497_gotoNextState"" -> ""2497_gotoPreSale"";
""2497_gotoPostIco"" -> ""2497_canGotoState"";
""2497_RobomedIco"" -> ""2497_transferTeam"";
""2497_accrueTeamTokens"" -> ""2497_afterIco"";
""2497_transfer"" -> ""2497_checkForTransfer"";
""2497_transitionBetweenSaleStages"" -> ""2497_gotoSaleStageLast"";
""2497_restoreUnsoldTokens"" -> ""2497_onlyOwner"";
""2497_transferToContract"" -> ""2497__transfer"";
""2497_transferFrom"" -> ""2497_afterIco"";
""2497_gotoPostIco"" -> ""2497_setMoney"";
""2497_gotoPreSale"" -> ""2497_setMoney"";
""2497_gotoNextState"" -> ""2497_onlyOwner"";
""2497_approveWithdrawal"" -> ""2497_afterIco"";
""2497_gotoNextState"" -> ""2497_gotoSaleStageLast"";
""2497_fallback"" -> ""2497_buyTokens"";
""2497_approveWithdrawal"" -> ""2497_onlyWithdrawal2"";
""2497_approve"" -> ""2497_afterIco"";
""2497_transferBounty"" -> ""2497_onlyOwner"";
}
"
0x26f4fb84b53dff7e148a8196f09bc492e55f2889.sol,TokenController,"contract TokenController is Ownable { using SafeMath for uint256; MintableToken public targetToken; address public votingAddr; address public tokensaleManagerAddr; State public state; enum State { Init, Tokensale, Public }",0,"subgraph cluster_1944_TokenController {
label=""TokenController"";
""1944_constructor"" [label=""constructor""];
""1944_mint"" [label=""mint""];
""1944_isStatePublic"" [label=""isStatePublic""];
""1944_isStateInit"" [label=""isStateInit""];
""1944_state"" [label=""state""];
""1944_isStateTokensale"" [label=""isStateTokensale""];
""1944_openTokensale"" [label=""openTokensale""];
""1944_closeTokensale"" [label=""closeTokensale""];
""1944_openTokensale"" -> ""1944_onlyOwner"";
}
"
0x89b5eaec2702ab0ff33ca397b3e66c7d925d5144.sol,Soccer,"contract Soccer { using SafeMath for uint256; event Birth(uint256 tokenId, uint256 startPrice); event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner); event Transfer(address indexed from, address indexed to, uint256 tokenId); event Approval(address indexed owner, address indexed approved, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; struct Token { address owner; uint256 price; }",0,"subgraph cluster_1466_Soccer {
label=""Soccer"";
""1466__handle"" [label=""_handle""];
""1466_getInitialPriceOfToken"" [label=""getInitialPriceOfToken""];
""1466_symbol"" [label=""symbol""];
""1466__approved"" [label=""_approved""];
""1466_transfer"" [label=""transfer""];
""1466_unlockPriceChange"" [label=""unlockPriceChange""];
""1466_setCOO"" [label=""setCOO""];
""1466_Soccer"" [label=""Soccer""];
""1466__owns"" [label=""_owns""];
""1466_changePrice"" [label=""changePrice""];
""1466_ownerOf"" [label=""ownerOf""];
""1466__addressNotNull"" [label=""_addressNotNull""];
""1466__transfer"" [label=""_transfer""];
""1466_lockPriceChange"" [label=""lockPriceChange""];
""1466_getNextPrice"" [label=""getNextPrice""];
""1466_isContract"" [label=""isContract""];
""1466_getTotalSupply"" [label=""getTotalSupply""];
""1466_payout"" [label=""payout""];
""1466_takeOwnership"" [label=""takeOwnership""];
""1466_setCEO"" [label=""setCEO""];
""1466_buyToken"" [label=""buyToken""];
""1466_createPromoCollectible"" [label=""createPromoCollectible""];
""1466_approve"" [label=""approve""];
""1466__payout"" [label=""_payout""];
""1466_priceOf"" [label=""priceOf""];
""1466_name"" [label=""name""];
""1466_tokensOfOwner"" [label=""tokensOfOwner""];
""1466_balanceOf"" [label=""balanceOf""];
""1466_implementsERC721"" [label=""implementsERC721""];
""1466_transferFrom"" [label=""transferFrom""];
""1466__addLastOwner"" [label=""_addLastOwner""];
""1466_getToken"" [label=""getToken""];
""1466_buyToken"" -> ""1466__handle"";
""1466_buyToken"" -> ""1466_isContract"";
""1466_getToken"" -> ""1466_getInitialPriceOfToken"";
""1466_takeOwnership"" -> ""1466__approved"";
""1466_tokensOfOwner"" -> ""1466_getTotalSupply"";
""1466_changePrice"" -> ""1466__owns"";
""1466_createPromoCollectible"" -> ""1466_getInitialPriceOfToken"";
""1466_createPromoCollectible"" -> ""1466__transfer"";
""1466_takeOwnership"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__transfer"";
""1466_createPromoCollectible"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466__addLastOwner"";
""1466_payout"" -> ""1466__payout"";
""1466_setCOO"" -> ""1466_onlyCEO"";
""1466_priceOf"" -> ""1466_getInitialPriceOfToken"";
""1466_setCEO"" -> ""1466_onlyCEO"";
""1466_unlockPriceChange"" -> ""1466_onlyCLevel"";
""1466_transferFrom"" -> ""1466__owns"";
""1466_lockPriceChange"" -> ""1466_onlyCLevel"";
""1466_payout"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466_getNextPrice"";
""1466_transferFrom"" -> ""1466__addressNotNull"";
""1466_transferFrom"" -> ""1466__approved"";
""1466_transfer"" -> ""1466__owns"";
""1466_takeOwnership"" -> ""1466__transfer"";
""1466_approve"" -> ""1466__owns"";
""1466_transferFrom"" -> ""1466__transfer"";
""1466_tokensOfOwner"" -> ""1466_balanceOf"";
""1466_getToken"" -> ""1466_getNextPrice"";
""1466_buyToken"" -> ""1466_getInitialPriceOfToken"";
}
"
0x0d76c32921b92025d4a99ed30e83cb6be4c4b4b5.sol,DigitalHealthCareServices,contract DigitalHealthCareServices { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint public _totalSupply = 5000000000000; uint256 public RATE = 500; bool public isMinting = true; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_513_DigitalHealthCareServices {
label=""DigitalHealthCareServices"";
""513_constructor"" [label=""constructor""];
""513_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""513_balanceOf"" [label=""balanceOf""];
""513_createTokens"" [label=""createTokens""];
""513_allowance"" [label=""allowance""];
""513_endCrowdsale"" [label=""endCrowdsale""];
""513_fallback"" [label=""fallback""];
""513_transfer"" [label=""transfer""];
""513_approve"" [label=""approve""];
""513_transferFrom"" [label=""transferFrom""];
""513_totalSupply"" [label=""totalSupply""];
""513_burnTokens"" [label=""burnTokens""];
""513_changeCrowdsaleRate"" -> ""513_onlyOwner"";
""513_endCrowdsale"" -> ""513_onlyOwner"";
""513_fallback"" -> ""513_createTokens"";
""513_burnTokens"" -> ""513_onlyOwner"";
}
"
0xa28d6584ef672f5fb549ec05a701ef43785cab79.sol,Eclaircafe,"contract Eclaircafe is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Eclaircafe() public { symbol = ; name = ; decimals = 18; _totalSupply = 5000000000000000000000000000; balances[0xB7F09F9cCD6De2A8ed1852b823305c0D22409F90] = _totalSupply; Transfer(address(0), 0xB7F09F9cCD6De2A8ed1852b823305c0D22409F90, _totalSupply); }",0,"subgraph cluster_543_Eclaircafe {
label=""Eclaircafe"";
""543_Eclaircafe"" [label=""Eclaircafe""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x850c430378909ba9ff2494d0a4df17928e99f8f4.sol,BdpOwnershipStorage,contract BdpOwnershipStorage is BdpBase { using SafeMath for uint256; mapping (uint256 => address) public tokenOwner; mapping (uint256 => address) public tokenApprovals; mapping (address => uint256) public ownedArea; mapping (address => uint256[]) public ownedTokens; mapping(uint256 => uint256) public ownedTokensIndex; uint256[] public tokenIds; mapping (uint256 => uint256) public tokenIdsIndex; function getTokenOwner(uint256 _tokenId) view public returns (address) { return tokenOwner[_tokenId]; },0,"subgraph cluster_2454_BdpOwnershipStorage {
label=""BdpOwnershipStorage"";
""2454_getOwnedTokensLength"" [label=""getOwnedTokensLength""];
""2454_getTokenOwner"" [label=""getTokenOwner""];
""2454_decrementOwnedArea"" [label=""decrementOwnedArea""];
""2454_getTokenIdsLength"" [label=""getTokenIdsLength""];
""2454_setOwnedArea"" [label=""setOwnedArea""];
""2454_setOwnedToken"" [label=""setOwnedToken""];
""2454_setTokenOwner"" [label=""setTokenOwner""];
""2454_setTokenIdsIndex"" [label=""setTokenIdsIndex""];
""2454_setTokenApproval"" [label=""setTokenApproval""];
""2454_setOwnedTokensIndex"" [label=""setOwnedTokensIndex""];
""2454_getTokenIdByIndex"" [label=""getTokenIdByIndex""];
""2454_incrementOwnedArea"" [label=""incrementOwnedArea""];
""2454_decrementOwnedTokensLength"" [label=""decrementOwnedTokensLength""];
""2454_getOwnedArea"" [label=""getOwnedArea""];
""2454_pushOwnedToken"" [label=""pushOwnedToken""];
""2454_getTokenIdsIndex"" [label=""getTokenIdsIndex""];
""2454_BdpOwnershipStorage"" [label=""BdpOwnershipStorage""];
""2454_getOwnedTokensIndex"" [label=""getOwnedTokensIndex""];
""2454_getOwnedToken"" [label=""getOwnedToken""];
""2454_pushTokenId"" [label=""pushTokenId""];
""2454_decrementTokenIdsLength"" [label=""decrementTokenIdsLength""];
""2454_setTokenIdByIndex"" [label=""setTokenIdByIndex""];
""2454_getTokenApproval"" [label=""getTokenApproval""];
""2454_setTokenApproval"" -> ""2454_storageAccessControl"";
""2454_setOwnedArea"" -> ""2454_storageAccessControl"";
""2454_decrementOwnedTokensLength"" -> ""2454_storageAccessControl"";
""2454_setTokenOwner"" -> ""2454_storageAccessControl"";
""2454_setOwnedTokensIndex"" -> ""2454_storageAccessControl"";
""2454_setTokenIdByIndex"" -> ""2454_storageAccessControl"";
""2454_setOwnedToken"" -> ""2454_storageAccessControl"";
""2454_decrementOwnedArea"" -> ""2454_storageAccessControl"";
""2454_incrementOwnedArea"" -> ""2454_storageAccessControl"";
""2454_pushOwnedToken"" -> ""2454_storageAccessControl"";
""2454_pushTokenId"" -> ""2454_storageAccessControl"";
""2454_setTokenIdsIndex"" -> ""2454_storageAccessControl"";
""2454_decrementTokenIdsLength"" -> ""2454_storageAccessControl"";
}
"
0x21683397aa53aaf7baca416c27f2c1e0e84bb493.sol,Regulator,"contract Regulator is RegulatorStorage { modifier onlyValidator() { require (isValidator(msg.sender), ); _; }",0,"subgraph cluster_1282_Regulator {
label=""Regulator"";
""1282__setBlacklistedUser"" [label=""_setBlacklistedUser""];
""1282_removeBlacklistDestroyer"" [label=""removeBlacklistDestroyer""];
""1282_isBlacklistedUser"" [label=""isBlacklistedUser""];
""1282__setWhitelistedUser"" [label=""_setWhitelistedUser""];
""1282_isMinter"" [label=""isMinter""];
""1282_setBlacklistSpender"" [label=""setBlacklistSpender""];
""1282__setMinter"" [label=""_setMinter""];
""1282_isNonlistedUser"" [label=""isNonlistedUser""];
""1282__removeMinter"" [label=""_removeMinter""];
""1282_removeBlacklistSpender"" [label=""removeBlacklistSpender""];
""1282_removeMinter"" [label=""removeMinter""];
""1282_setBlacklistedUser"" [label=""setBlacklistedUser""];
""1282_isWhitelistedUser"" [label=""isWhitelistedUser""];
""1282_setBlacklistDestroyer"" [label=""setBlacklistDestroyer""];
""1282_setNonlistedUser"" [label=""setNonlistedUser""];
""1282_isBlacklistSpender"" [label=""isBlacklistSpender""];
""1282_setWhitelistedUser"" [label=""setWhitelistedUser""];
""1282_setMinter"" [label=""setMinter""];
""1282_isBlacklistDestroyer"" [label=""isBlacklistDestroyer""];
""1282__setNonlistedUser"" [label=""_setNonlistedUser""];
""1282__setBlacklistedUser"" -> ""1282_removeUserPermission"";
""1282_setBlacklistedUser"" -> ""1282_onlyValidator"";
""1282_setWhitelistedUser"" -> ""1282_onlyValidator"";
""1282__setMinter"" -> ""1282_isPermission"";
""1282__setBlacklistedUser"" -> ""1282_setUserPermission"";
""1282_isBlacklistedUser"" -> ""1282_hasUserPermission"";
""1282_removeBlacklistSpender"" -> ""1282_isPermission"";
""1282_setBlacklistDestroyer"" -> ""1282_isPermission"";
""1282__setWhitelistedUser"" -> ""1282_isPermission"";
""1282_isNonlistedUser"" -> ""1282_hasUserPermission"";
""1282_isMinter"" -> ""1282_hasUserPermission"";
""1282__removeMinter"" -> ""1282_isPermission"";
""1282_removeMinter"" -> ""1282__removeMinter"";
""1282_isBlacklistSpender"" -> ""1282_hasUserPermission"";
""1282_setBlacklistSpender"" -> ""1282_onlyValidator"";
""1282_removeBlacklistSpender"" -> ""1282_removeUserPermission"";
""1282_setBlacklistDestroyer"" -> ""1282_setUserPermission"";
""1282_setBlacklistedUser"" -> ""1282__setBlacklistedUser"";
""1282_setWhitelistedUser"" -> ""1282__setWhitelistedUser"";
""1282_removeBlacklistDestroyer"" -> ""1282_onlyValidator"";
""1282__setWhitelistedUser"" -> ""1282_removeUserPermission"";
""1282_setNonlistedUser"" -> ""1282__setNonlistedUser"";
""1282__setBlacklistedUser"" -> ""1282_isPermission"";
""1282_removeBlacklistSpender"" -> ""1282_onlyValidator"";
""1282_removeBlacklistDestroyer"" -> ""1282_removeUserPermission"";
""1282_removeBlacklistDestroyer"" -> ""1282_isPermission"";
""1282__setMinter"" -> ""1282_setUserPermission"";
""1282__removeMinter"" -> ""1282_removeUserPermission"";
""1282_isBlacklistDestroyer"" -> ""1282_hasUserPermission"";
""1282__setWhitelistedUser"" -> ""1282_setUserPermission"";
""1282__setNonlistedUser"" -> ""1282_removeUserPermission"";
""1282__setNonlistedUser"" -> ""1282_isPermission"";
""1282_setBlacklistSpender"" -> ""1282_setUserPermission"";
""1282_setBlacklistSpender"" -> ""1282_isPermission"";
""1282_setMinter"" -> ""1282__setMinter"";
""1282_setMinter"" -> ""1282_onlyValidator"";
""1282_setNonlistedUser"" -> ""1282_onlyValidator"";
""1282_isWhitelistedUser"" -> ""1282_hasUserPermission"";
""1282_setBlacklistDestroyer"" -> ""1282_onlyValidator"";
""1282_removeMinter"" -> ""1282_onlyValidator"";
}
"
0x295e65915bf0a884dcb225d0b60f95f25626e221.sol,AbyssToken,"contract AbyssToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function AbyssToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x5dDD9bb4d5640cE37c76dDac8B3bbD35D84416A6] = _totalSupply; Transfer(address(0), 0x5dDD9bb4d5640cE37c76dDac8B3bbD35D84416A6, _totalSupply); }",0,"subgraph cluster_543_AbyssToken {
label=""AbyssToken"";
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_AbyssToken"" [label=""AbyssToken""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x6e56d4e9de4e9d64ccfadce52cbf10c78f096af6.sol,SNC,"contract SNC is SafeMath, Pausable { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping(address => uint256) public balanceOf; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function SNC() public { totalSupply = (10**8) * (10**8); name = ; symbol = ; decimals = 8; owner = msg.sender; balanceOf[owner] = totalSupply; }",0,"subgraph cluster_549_SNC {
label=""SNC"";
""549_balanceOf"" [label=""balanceOf""];
""549_approve"" [label=""approve""];
""549_transferFrom"" [label=""transferFrom""];
""549_allowance"" [label=""allowance""];
""549_SNC"" [label=""SNC""];
""549_transfer"" [label=""transfer""];
""549_fallback"" [label=""fallback""];
""549_totalSupply"" [label=""totalSupply""];
""549_transfer"" -> ""549_whenNotPaused"";
""549_transfer"" -> ""549_safeAdd"";
""549_transferFrom"" -> ""549_safeSub"";
""549_transfer"" -> ""549_safeSub"";
""549_approve"" -> ""549_whenNotPaused"";
""549_transferFrom"" -> ""549_safeAdd"";
""549_transferFrom"" -> ""549_whenNotPaused"";
}
"
0x4166afc352cdf27b73b25ab2fd7864b62577dd85.sol,Token0xC,"contract Token0xC is StandardToken, Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public startDate1; uint256 public endDate1; uint256 public rate1; uint256 public startDate2; uint256 public endDate2; uint256 public rate2; uint256 public startDate3; uint256 public endDate3; uint256 public rate3; uint256 BaseTimestamp = 1534377600; uint256 public dailyCap; uint256 public saleCap; uint256 public LastbetDay; uint256 public LeftDailyCap; address public tokenWallet ; address public fundWallet ; event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount); event TransferToken(address indexed buyer, uint256 amount); modifier uninitialized() { require(tokenWallet == 0x0); require(fundWallet == 0x0); _; }",0,"subgraph cluster_1199_Token0xC {
label=""Token0xC"";
""1199_finalize"" [label=""finalize""];
""1199_setPeriodRate"" [label=""setPeriodRate""];
""1199_setPeriod"" [label=""setPeriod""];
""1199_DateConverter"" [label=""DateConverter""];
""1199_fallback"" [label=""fallback""];
""1199_getBonusByTime"" [label=""getBonusByTime""];
""1199_setSaleCap"" [label=""setSaleCap""];
""1199_initialize"" [label=""initialize""];
""1199_buyTokens"" [label=""buyTokens""];
""1199_transferToken"" [label=""transferToken""];
""1199_constructor"" [label=""constructor""];
""1199_setDailyCap"" [label=""setDailyCap""];
""1199_saleActive"" [label=""saleActive""];
""1199_setPeriodRate"" -> ""1199_onlyOwner"";
""1199_initialize"" -> ""1199_onlyOwner"";
""1199_buyTokens"" -> ""1199_saleActive"";
""1199_buyTokens"" -> ""1199_getBonusByTime"";
""1199_buyTokens"" -> ""1199_DateConverter"";
""1199_fallback"" -> ""1199_buyTokens"";
""1199_initialize"" -> ""1199_uninitialized"";
""1199_setPeriod"" -> ""1199_onlyOwner"";
""1199_transferToken"" -> ""1199_onlyOwner"";
""1199_setSaleCap"" -> ""1199_onlyOwner"";
""1199_finalize"" -> ""1199_saleActive"";
""1199_setDailyCap"" -> ""1199_onlyOwner"";
""1199_finalize"" -> ""1199_onlyOwner"";
}
"
0x56a9a9b7de3f4a6ffe1f61319aa33b49ede13590.sol,CrowdsaleBase,"contract CrowdsaleBase is Haltable { uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5; using SafeMathLib for uint; FractionalERC20 public token; PricingStrategy public pricingStrategy; FinalizeAgent public finalizeAgent; address public multisigWallet; uint public minimumFundingGoal; uint public startsAt; uint public endsAt; uint public tokensSold = 0; uint public weiRaised = 0; uint public presaleWeiRaised = 0; uint public investorCount = 0; uint public loadedRefund = 0; uint public weiRefunded = 0; bool public finalized; mapping (address => uint256) public investedAmountOf; mapping (address => uint256) public tokenAmountOf; mapping (address => bool) public earlyParticipantWhitelist; uint public ownerTestValue; enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}",0,"subgraph cluster_1058_CrowdsaleBase {
label=""CrowdsaleBase"";
""1058_isBreakingCap"" [label=""isBreakingCap""];
""1058_setOwnerTestValue"" [label=""setOwnerTestValue""];
""1058_isPricingSane"" [label=""isPricingSane""];
""1058_CrowdsaleBase"" [label=""CrowdsaleBase""];
""1058_setMultisig"" [label=""setMultisig""];
""1058_setEndsAt"" [label=""setEndsAt""];
""1058_investInternal"" [label=""investInternal""];
""1058_buyTokens"" [label=""buyTokens""];
""1058_setFinalizeAgent"" [label=""setFinalizeAgent""];
""1058_refund"" [label=""refund""];
""1058_getState"" [label=""getState""];
""1058_calculateTokens"" [label=""calculateTokens""];
""1058_isFinalizerSane"" [label=""isFinalizerSane""];
""1058_isMinimumGoalReached"" [label=""isMinimumGoalReached""];
""1058_finalize"" [label=""finalize""];
""1058_setEarlyParicipantWhitelist"" [label=""setEarlyParicipantWhitelist""];
""1058_assignTokens"" [label=""assignTokens""];
""1058_fallback"" [label=""fallback""];
""1058_loadRefund"" [label=""loadRefund""];
""1058_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""1058_setPricingStrategy"" [label=""setPricingStrategy""];
""1058_isCrowdsale"" [label=""isCrowdsale""];
""1058_refund"" -> ""1058_inState"";
""1058_setFinalizeAgent"" -> ""1058_onlyOwner"";
""1058_loadRefund"" -> ""1058_inState"";
""1058_setOwnerTestValue"" -> ""1058_onlyOwner"";
""1058_buyTokens"" -> ""1058_stopInEmergency"";
""1058_getState"" -> ""1058_isMinimumGoalReached"";
""1058_buyTokens"" -> ""1058_isBreakingCap"";
""1058_finalize"" -> ""1058_stopInEmergency"";
""1058_buyTokens"" -> ""1058_assignTokens"";
""1058_setPricingStrategy"" -> ""1058_onlyOwner"";
""1058_setEarlyParicipantWhitelist"" -> ""1058_onlyOwner"";
""1058_getState"" -> ""1058_isCrowdsaleFull"";
""1058_setMultisig"" -> ""1058_onlyOwner"";
""1058_buyTokens"" -> ""1058_getState"";
""1058_finalize"" -> ""1058_inState"";
""1058_setEndsAt"" -> ""1058_onlyOwner"";
""1058_investInternal"" -> ""1058_stopInEmergency"";
""1058_CrowdsaleBase"" -> ""1058_setPricingStrategy"";
""1058_finalize"" -> ""1058_onlyOwner"";
""1058_investInternal"" -> ""1058_buyTokens"";
}
"
0x1d18f44256a27862d886e27191d55ab4029172c1.sol,manageAddress,"contract manageAddress is Variable, Modifiers, Event { function add_allowedAddress(address _address) public isOwner { allowedAddress[_address] = true; }",0,"subgraph cluster_454_manageAddress {
label=""manageAddress"";
""454_delete_blockedAddress"" [label=""delete_blockedAddress""];
""454_add_allowedAddress"" [label=""add_allowedAddress""];
""454_delete_allowedAddress"" [label=""delete_allowedAddress""];
""454_add_blockedAddress"" [label=""add_blockedAddress""];
""454_add_blockedAddress"" -> ""454_isOwner"";
""454_delete_blockedAddress"" -> ""454_isOwner"";
""454_add_allowedAddress"" -> ""454_isOwner"";
""454_delete_allowedAddress"" -> ""454_isOwner"";
}
"
0x377dfa7bab23a798ca1fa0923bcd4d4ef2184d85.sol,StarbaseEarlyPurchaseAmendment,contract StarbaseEarlyPurchaseAmendment { event EarlyPurchaseInvalidated(uint256 epIdx); event EarlyPurchaseAmended(uint256 epIdx); AbstractStarbaseCrowdsale public starbaseCrowdsale; StarbaseEarlyPurchase public starbaseEarlyPurchase; address public owner; uint256[] public invalidEarlyPurchaseIndexes; uint256[] public amendedEarlyPurchaseIndexes; mapping (uint256 => StarbaseEarlyPurchase.EarlyPurchase) public amendedEarlyPurchases; modifier noEther() { require(msg.value == 0); _; },0,"subgraph cluster_1138_StarbaseEarlyPurchaseAmendment {
label=""StarbaseEarlyPurchaseAmendment"";
""1138_StarbaseEarlyPurchaseAmendment"" [label=""StarbaseEarlyPurchaseAmendment""];
""1138_normalizedEarlyPurchases"" [label=""normalizedEarlyPurchases""];
""1138_totalAmountOfEarlyPurchases"" [label=""totalAmountOfEarlyPurchases""];
""1138_purchasedAmountBy"" [label=""purchasedAmountBy""];
""1138_setup"" [label=""setup""];
""1138_amendEarlyPurchase"" [label=""amendEarlyPurchase""];
""1138_earlyPurchases"" [label=""earlyPurchases""];
""1138_starbaseEarlyPurchase"" [label=""starbaseEarlyPurchase""];
""1138_isAmendedEarlyPurchase"" [label=""isAmendedEarlyPurchase""];
""1138_getEarlyPurchase"" [label=""getEarlyPurchase""];
""1138_loadStarbaseEarlyPurchases"" [label=""loadStarbaseEarlyPurchases""];
""1138_amendedEarlyPurchases"" [label=""amendedEarlyPurchases""];
""1138_invalidateEarlyPurchase"" [label=""invalidateEarlyPurchase""];
""1138_numberOfEarlyPurchases"" [label=""numberOfEarlyPurchases""];
""1138_numberOfRawEarlyPurchases"" [label=""numberOfRawEarlyPurchases""];
""1138_isInvalidEarlyPurchase"" [label=""isInvalidEarlyPurchase""];
""1138_StarbaseEarlyPurchaseAmendment"" -> ""1138_noEther"";
""1138_normalizedEarlyPurchases"" -> ""1138_getEarlyPurchase"";
""1138_numberOfRawEarlyPurchases"" -> ""1138_onlyEarlyPurchasesLoaded"";
""1138_normalizedEarlyPurchases"" -> ""1138_numberOfRawEarlyPurchases"";
""1138_setup"" -> ""1138_noEther"";
""1138_amendEarlyPurchase"" -> ""1138_isInvalidEarlyPurchase"";
""1138_normalizedEarlyPurchases"" -> ""1138_isInvalidEarlyPurchase"";
""1138_amendEarlyPurchase"" -> ""1138_numberOfRawEarlyPurchases"";
""1138_invalidateEarlyPurchase"" -> ""1138_onlyBeforeCrowdsale"";
""1138_loadStarbaseEarlyPurchases"" -> ""1138_onlyOwner"";
""1138_invalidateEarlyPurchase"" -> ""1138_noEther"";
""1138_invalidateEarlyPurchase"" -> ""1138_numberOfRawEarlyPurchases"";
""1138_amendEarlyPurchase"" -> ""1138_onlyEarlyPurchasesLoaded"";
""1138_earlyPurchases"" -> ""1138_onlyEarlyPurchasesLoaded"";
""1138_purchasedAmountBy"" -> ""1138_noEther"";
""1138_numberOfEarlyPurchases"" -> ""1138_normalizedEarlyPurchases"";
""1138_totalAmountOfEarlyPurchases"" -> ""1138_normalizedEarlyPurchases"";
""1138_numberOfEarlyPurchases"" -> ""1138_noEther"";
""1138_amendEarlyPurchase"" -> ""1138_onlyOwner"";
""1138_amendEarlyPurchase"" -> ""1138_isAmendedEarlyPurchase"";
""1138_amendEarlyPurchase"" -> ""1138_noEther"";
""1138_loadStarbaseEarlyPurchases"" -> ""1138_noEther"";
""1138_amendEarlyPurchase"" -> ""1138_onlyBeforeCrowdsale"";
""1138_setup"" -> ""1138_onlyOwner"";
""1138_isAmendedEarlyPurchase"" -> ""1138_noEther"";
""1138_invalidateEarlyPurchase"" -> ""1138_onlyEarlyPurchasesLoaded"";
""1138_isInvalidEarlyPurchase"" -> ""1138_noEther"";
""1138_getEarlyPurchase"" -> ""1138_onlyEarlyPurchasesLoaded"";
""1138_isAmendedEarlyPurchase"" -> ""1138_numberOfRawEarlyPurchases"";
""1138_normalizedEarlyPurchases"" -> ""1138_isAmendedEarlyPurchase"";
""1138_invalidateEarlyPurchase"" -> ""1138_onlyOwner"";
""1138_isInvalidEarlyPurchase"" -> ""1138_numberOfRawEarlyPurchases"";
""1138_purchasedAmountBy"" -> ""1138_normalizedEarlyPurchases"";
""1138_loadStarbaseEarlyPurchases"" -> ""1138_onlyBeforeCrowdsale"";
""1138_totalAmountOfEarlyPurchases"" -> ""1138_noEther"";
}
"
0x72fa6623cc0800bc180639d60c33c95426d76576.sol,KassaNetwork,"contract KassaNetwork is Ownable { using SafeMath for uint; string public constant name = ; uint public startTimestamp = now; uint public constant procKoef = 10000; uint public constant perDay = 75; uint public constant ownerFee = 700; uint[3] public bonusReferrer = [500, 200, 100]; uint public constant procReturn = 9000; uint public constant maxDepositDays = 200; uint public constant minimalDeposit = 0.5 ether; uint public constant maximalDepositStart = 30 ether; uint public constant maximalDepositFinish = 100 ether; uint public constant minimalDepositForBonusReferrer = 0.015 ether; uint public constant dayLimitStart = 50 ether; uint public constant progressProcKoef = 100; uint public constant dayLimitProgressProc = 2; uint public constant maxDepositProgressProc = 1; uint public countInvestors = 0; uint public totalInvest = 0; uint public totalPenalty = 0; uint public totalSelfInvest = 0; uint public totalPaid = 0; uint public unlimitedInvest = 3000 ether; bool public isUnlimitedContractInvest = false; bool public isUnlimitedDayInvest = false; event LogInvestment(address _addr, uint _value, bytes _refData); event LogTransfer(address _addr, uint _amount, uint _contactBalance); event LogSelfInvestment(uint _value); event LogPreparePayment(address _addr, uint _totalInteres, uint _paidInteres, uint _amount); event LogSkipPreparePayment(address _addr, uint _totalInteres, uint _paidInteres); event LogPreparePaymentReferrer(address _addr, uint _totalReferrals, uint _paidReferrals, uint _amount); event LogSkipPreparePaymentReferrer(address _addr, uint _totalReferrals, uint _paidReferrals); event LogNewReferralAtLevel(address _addr, uint[3] _levels); event LogMinimalDepositPayment(address _addr, uint _money, uint _totalPenalty); event LogPenaltyPayment(address _addr, uint currentSenderDeposit, uint referrerAdressLength, address _referrer, uint currentReferrerDeposit, uint _money, uint _sendBackAmount, uint _totalPenalty); event LogExceededRestDepositPerDay(address _addr, address _referrer, uint _money, uint _nDay, uint _restDepositPerDay, uint _badDeposit, uint _sendBackAmount, uint _totalPenalty, uint _willDeposit); event LogUsedRestDepositPerDay(address _addr, address _referrer, uint _money, uint _nDay, uint _restDepositPerDay, uint _realDeposit, uint _usedDepositPerDay); event LogCalcBonusReferrer(address _referrer, uint _money, uint _index, uint _bonusReferrer, uint _amountReferrer, address _nextReferrer); struct User { uint balance; uint paidInteres; uint timestamp; uint countReferrals; uint[3] countReferralsByLevel; uint earnOnReferrals; uint paidReferrals; address referrer; }",0,"subgraph cluster_1561_KassaNetwork {
label=""KassaNetwork"";
""1561_getCurrentDayDepositLimit"" [label=""getCurrentDayDepositLimit""];
""1561_getCurrentDay"" [label=""getCurrentDay""];
""1561_countReferralsByLevel"" [label=""countReferralsByLevel""];
""1561_preparePayment"" [label=""preparePayment""];
""1561_getTotals"" [label=""getTotals""];
""1561_fallback"" [label=""fallback""];
""1561_getInteres"" [label=""getInteres""];
""1561_getCurrentMaximalDeposit"" [label=""getCurrentMaximalDeposit""];
""1561_calcProgress"" [label=""calcProgress""];
""1561_getNDay"" [label=""getNDay""];
""1561_preparePaymentReferrer"" [label=""preparePaymentReferrer""];
""1561_transfer"" [label=""transfer""];
""1561_sendOwnerFee"" [label=""sendOwnerFee""];
""1561_updateInvestBalance"" [label=""updateInvestBalance""];
""1561_getDayRestDepositLimit"" [label=""getDayRestDepositLimit""];
""1561_getMaximalDeposit"" [label=""getMaximalDeposit""];
""1561_calcBonusReferrers"" [label=""calcBonusReferrers""];
""1561_getDayDepositLimit"" [label=""getDayDepositLimit""];
""1561_registerInvestor"" [label=""registerInvestor""];
""1561_processPayment"" [label=""processPayment""];
""1561_getUser"" [label=""getUser""];
""1561_bytesToAddress"" [label=""bytesToAddress""];
""1561_getCurrentDayRestDepositLimit"" [label=""getCurrentDayRestDepositLimit""];
""1561_checkLimits"" [label=""checkLimits""];
""1561_registerInvestor"" -> ""1561_countReferralsByLevel"";
""1561_processPayment"" -> ""1561_calcBonusReferrers"";
""1561_calcBonusReferrers"" -> ""1561_preparePaymentReferrer"";
""1561_getCurrentMaximalDeposit"" -> ""1561_getMaximalDeposit"";
""1561_preparePayment"" -> ""1561_getInteres"";
""1561_getDayDepositLimit"" -> ""1561_calcProgress"";
""1561_processPayment"" -> ""1561_updateInvestBalance"";
""1561_processPayment"" -> ""1561_getDayRestDepositLimit"";
""1561_getCurrentDayDepositLimit"" -> ""1561_getCurrentDay"";
""1561_sendOwnerFee"" -> ""1561_transfer"";
""1561_processPayment"" -> ""1561_preparePayment"";
""1561_checkLimits"" -> ""1561_getCurrentDay"";
""1561_fallback"" -> ""1561_processPayment"";
""1561_processPayment"" -> ""1561_getCurrentDay"";
""1561_getInteres"" -> ""1561_getNDay"";
""1561_preparePayment"" -> ""1561_transfer"";
""1561_preparePaymentReferrer"" -> ""1561_transfer"";
""1561_checkLimits"" -> ""1561_getDayDepositLimit"";
""1561_getCurrentMaximalDeposit"" -> ""1561_getCurrentDay"";
""1561_getDayRestDepositLimit"" -> ""1561_getCurrentDayDepositLimit"";
""1561_countReferralsByLevel"" -> ""1561_countReferralsByLevel"";
""1561_getMaximalDeposit"" -> ""1561_calcProgress"";
""1561_getTotals"" -> ""1561_getCurrentDayRestDepositLimit"";
""1561_getTotals"" -> ""1561_getCurrentDayDepositLimit"";
""1561_getCurrentDay"" -> ""1561_getNDay"";
""1561_processPayment"" -> ""1561_registerInvestor"";
""1561_processPayment"" -> ""1561_bytesToAddress"";
""1561_getCurrentDayRestDepositLimit"" -> ""1561_getCurrentDay"";
""1561_processPayment"" -> ""1561_checkLimits"";
""1561_getCurrentDayDepositLimit"" -> ""1561_getDayDepositLimit"";
""1561_getTotals"" -> ""1561_getCurrentMaximalDeposit"";
""1561_getUser"" -> ""1561_getInteres"";
""1561_processPayment"" -> ""1561_sendOwnerFee"";
""1561_getCurrentDayRestDepositLimit"" -> ""1561_getDayRestDepositLimit"";
""1561_processPayment"" -> ""1561_getCurrentMaximalDeposit"";
}
"
0xbb5b059f574204c344cd3096b420fe563f242890.sol,NetkillerAdvancedToken,"contract NetkillerAdvancedToken { address public owner; string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; uint256 public sellPrice; uint256 public buyPrice; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function NetkillerAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { owner = msg.sender; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_642_NetkillerAdvancedToken {
label=""NetkillerAdvancedToken"";
""642_transfer"" [label=""transfer""];
""642__transfer"" [label=""_transfer""];
""642_setPrices"" [label=""setPrices""];
""642_burn"" [label=""burn""];
""642_mintToken"" [label=""mintToken""];
""642_approve"" [label=""approve""];
""642_sell"" [label=""sell""];
""642_NetkillerAdvancedToken"" [label=""NetkillerAdvancedToken""];
""642_approveAndCall"" [label=""approveAndCall""];
""642_transferOwnership"" [label=""transferOwnership""];
""642_buy"" [label=""buy""];
""642_freezeAccount"" [label=""freezeAccount""];
""642_burnFrom"" [label=""burnFrom""];
""642_transferFrom"" [label=""transferFrom""];
""642_transferOwnership"" -> ""642_onlyOwner"";
""642_burn"" -> ""642_onlyOwner"";
""642_approveAndCall"" -> ""642_approve"";
""642_transferFrom"" -> ""642__transfer"";
""642_approve"" -> ""642_approve"";
""642_burnFrom"" -> ""642_onlyOwner"";
""642_transferFrom"" -> ""642_transferFrom"";
""642_setPrices"" -> ""642_onlyOwner"";
""642_buy"" -> ""642__transfer"";
""642_transfer"" -> ""642_transfer"";
""642_sell"" -> ""642__transfer"";
""642_transfer"" -> ""642__transfer"";
""642_mintToken"" -> ""642_onlyOwner"";
""642_freezeAccount"" -> ""642_onlyOwner"";
}
"
0x0e8d6b471e332f140e7d9dbb99e5e3822f728da6.sol,TransferLimitedToken,contract TransferLimitedToken is ManagedToken { uint256 public constant LIMIT_TRANSFERS_PERIOD = 365 days; mapping(address => bool) public limitedWallets; uint256 public limitEndDate; address public limitedWalletsManager; bool public isLimitEnabled; event TransfersEnabled(); modifier onlyManager() { require(msg.sender == limitedWalletsManager); _; },0,"subgraph cluster_1161_TransferLimitedToken {
label=""TransferLimitedToken"";
""1161_transfer"" [label=""transfer""];
""1161_approve"" [label=""approve""];
""1161_transferFrom"" [label=""transferFrom""];
""1161_enableTransfers"" [label=""enableTransfers""];
""1161_TransferLimitedToken"" [label=""TransferLimitedToken""];
""1161_disableLimit"" [label=""disableLimit""];
""1161_delLimitedWalletAddress"" [label=""delLimitedWalletAddress""];
""1161_addLimitedWalletAddress"" [label=""addLimitedWalletAddress""];
""1161_approve"" -> ""1161_canTransfer"";
""1161_disableLimit"" -> ""1161_onlyManager"";
""1161_transferFrom"" -> ""1161_canTransfer"";
""1161_transfer"" -> ""1161_transfer"";
""1161_delLimitedWalletAddress"" -> ""1161_onlyManager"";
""1161_approve"" -> ""1161_approve"";
""1161_transfer"" -> ""1161_canTransfer"";
""1161_TransferLimitedToken"" -> ""1161_ManagedToken"";
""1161_transferFrom"" -> ""1161_transferFrom"";
}
"
0x3a6e5f1c1b0de5d2b46babd21c7844c96f5180aa.sol,SniperBillion,contract SniperBillion is modularBillion { using SafeMath for *; using Array256Lib for uint256[]; address constant private comReward_ = 0x8Aa94D530cC572aF0C730147E1ab76875F25f71C; address constant private comMarket_ = 0x6c14CAAc549d7411faE4e201105B4D33afb8a3db; address constant private comICO_ = 0xbAdb636C5C3665a969159a6b993F811D9F263639; address constant private donateAccount_ = 0x1bB064708eBf4763BeB495877E99Dfeb75198942; RubyFundForwarderInterface constant private Ruby_Fund = RubyFundForwarderInterface(0x7D653E0Ecb4DAF3166a49525Df04147a7180B051); SniperBookInterface constant private SniperBook = SniperBookInterface(0xc294FA45F713B09d865A088543765800F47514eD); string constant public name = ; string constant public symbol = ; uint256 constant private icoEndTime_ = 24 hours; uint256 constant private maxNumber_ = 100000000; uint256 public totalSum_; uint256 public rID_; uint256 public icoAmount_; bool private isDrawed_ = false; uint256 lastSID_; uint256[] private globalArr_; uint256[] private icoSidArr_; uint256[] private luckyPotBingoArr_; uint256[] private airdropPotBingoArr_; mapping (address => uint256) public sIDxAddr_; mapping (bytes32 => uint256) public sIDxName_; mapping (uint256 => uint256) public sidXnum_; mapping (uint256 => SPBdatasets.Sniper) public spr_; mapping (uint256 => SPBdatasets.Round) public round_; mapping (uint256 => mapping (bytes32 => bool)) public sprNames_; constructor() public { },0,"subgraph cluster_3250_SniperBillion {
label=""SniperBillion"";
""3250_withdrawEarnings"" [label=""withdrawEarnings""];
""3250_core"" [label=""core""];
""3250_distributeICO"" [label=""distributeICO""];
""3250_getSniperInfo"" [label=""getSniperInfo""];
""3250_globalArrNotEqualOne"" [label=""globalArrNotEqualOne""];
""3250_autoDrawWithOEZDay"" [label=""autoDrawWithOEZDay""];
""3250_withdraw"" [label=""withdraw""];
""3250_constructor"" [label=""constructor""];
""3250_checkWinMainPot"" [label=""checkWinMainPot""];
""3250_itemRemove"" [label=""itemRemove""];
""3250_calcBingoAirdropPot"" [label=""calcBingoAirdropPot""];
""3250_globalArrEqualOne"" [label=""globalArrEqualOne""];
""3250_activate"" [label=""activate""];
""3250_percent"" [label=""percent""];
""3250_determineSID"" [label=""determineSID""];
""3250_generateRandom"" [label=""generateRandom""];
""3250_receiveSniperNameList"" [label=""receiveSniperNameList""];
""3250_becomeSniperAngel"" [label=""becomeSniperAngel""];
""3250_getDigit"" [label=""getDigit""];
""3250_calcBingoLuckyPot"" [label=""calcBingoLuckyPot""];
""3250_buyCore"" [label=""buyCore""];
""3250_getTotalSum"" [label=""getTotalSum""];
""3250_getGameTime"" [label=""getGameTime""];
""3250_checkAirdropPot"" [label=""checkAirdropPot""];
""3250_getSID"" [label=""getSID""];
""3250_buyXaddr"" [label=""buyXaddr""];
""3250_checkLuckyPot"" [label=""checkLuckyPot""];
""3250_fallback"" [label=""fallback""];
""3250_receiveSniperInfo"" [label=""receiveSniperInfo""];
""3250_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""3250_globalArrEqualZero"" [label=""globalArrEqualZero""];
""3250_getSniperInfo"" -> ""3250_isHuman"";
""3250_buyXaddr"" -> ""3250_isActivated"";
""3250_getSID"" -> ""3250_isHuman"";
""3250_getTotalSum"" -> ""3250_isHuman"";
""3250_buyCore"" -> ""3250_core"";
""3250_fallback"" -> ""3250_buyCore"";
""3250_fallback"" -> ""3250_determineSID"";
""3250_core"" -> ""3250_calcBingoLuckyPot"";
""3250_withdraw"" -> ""3250_isHuman"";
""3250_withdraw"" -> ""3250_withdrawEarnings"";
""3250_buyXaddr"" -> ""3250_isHuman"";
""3250_core"" -> ""3250_globalArrEqualZero"";
""3250_core"" -> ""3250_calcBingoAirdropPot"";
""3250_calcBingoAirdropPot"" -> ""3250_checkAirdropPot"";
""3250_becomeSniperAngel"" -> ""3250_isActivated"";
""3250_getCurrentRoundInfo"" -> ""3250_isHuman"";
""3250_checkWinMainPot"" -> ""3250_distributeICO"";
""3250_becomeSniperAngel"" -> ""3250_isIcoPhase"";
""3250_core"" -> ""3250_checkWinMainPot"";
""3250_becomeSniperAngel"" -> ""3250_isHuman"";
""3250_fallback"" -> ""3250_isActivated"";
""3250_core"" -> ""3250_autoDrawWithOEZDay"";
""3250_buyXaddr"" -> ""3250_isGameStart"";
""3250_core"" -> ""3250_globalArrNotEqualOne"";
""3250_fallback"" -> ""3250_isWithinLimits"";
""3250_core"" -> ""3250_globalArrEqualOne"";
""3250_globalArrEqualOne"" -> ""3250_itemRemove"";
""3250_core"" -> ""3250_generateRandom"";
""3250_autoDrawWithOEZDay"" -> ""3250_distributeICO"";
""3250_becomeSniperAngel"" -> ""3250_isWithinIcoLimits"";
""3250_buyXaddr"" -> ""3250_determineSID"";
""3250_fallback"" -> ""3250_isGameStart"";
""3250_withdraw"" -> ""3250_isActivated"";
""3250_buyXaddr"" -> ""3250_buyCore"";
""3250_calcBingoLuckyPot"" -> ""3250_getDigit"";
""3250_becomeSniperAngel"" -> ""3250_determineSID"";
""3250_getGameTime"" -> ""3250_isHuman"";
""3250_buyXaddr"" -> ""3250_isWithinLimits"";
""3250_calcBingoLuckyPot"" -> ""3250_checkLuckyPot"";
""3250_distributeICO"" -> ""3250_percent"";
""3250_fallback"" -> ""3250_isHuman"";
""3250_globalArrNotEqualOne"" -> ""3250_itemRemove"";
}
"
0x17a03553719001e05dc19a20f5e82ee76923a985.sol,AuctionBase,contract AuctionBase is ERC721Holder { using SafeMath for uint256; struct Auction { address seller; uint128 price; uint64 startedAt; },0,"subgraph cluster_641_AuctionBase {
label=""AuctionBase"";
""641__isOnAuction"" [label=""_isOnAuction""];
""641__currentPrice"" [label=""_currentPrice""];
""641__transfer"" [label=""_transfer""];
""641__addAuction"" [label=""_addAuction""];
""641__computeCut"" [label=""_computeCut""];
""641__escrow"" [label=""_escrow""];
""641_fallback"" [label=""fallback""];
""641__cancelAuction"" [label=""_cancelAuction""];
""641__owns"" [label=""_owns""];
""641__bid"" [label=""_bid""];
""641__removeAuction"" [label=""_removeAuction""];
""641__bid"" -> ""641__computeCut"";
""641__bid"" -> ""641__isOnAuction"";
""641__cancelAuction"" -> ""641__removeAuction"";
""641__bid"" -> ""641__currentPrice"";
""641__cancelAuction"" -> ""641__transfer"";
""641__bid"" -> ""641__removeAuction"";
}
"
0xd9894dd6e8d4f823bd8bcd1e8a871a295b1cfb07.sol,Ownable,"contract Ownable { address private owner; event OwnershipRenounced(address indexed previousOwner); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () public { owner = msg.sender; }",0,"subgraph cluster_175_Ownable {
label=""Ownable"";
""175_constructor"" [label=""constructor""];
""175_getOwner"" [label=""getOwner""];
""175_renounceOwnership"" [label=""renounceOwnership""];
""175_transferOwnership"" [label=""transferOwnership""];
""175_transferOwnership"" -> ""175_onlyOwner"";
""175_renounceOwnership"" -> ""175_onlyOwner"";
}
"
0x5ca3b9dac85da4de4030e59c1a0248004209e348.sol,DocumentStore,contract DocumentStore is Ownable { string public name; string public version = ; mapping(bytes32 => uint) documentIssued; mapping(bytes32 => uint) documentRevoked; event DocumentIssued(bytes32 indexed document); event DocumentRevoked( bytes32 indexed document ); constructor( string _name ) public { name = _name; },0,"subgraph cluster_294_DocumentStore {
label=""DocumentStore"";
""294_getIssuedBlock"" [label=""getIssuedBlock""];
""294_isRevoked"" [label=""isRevoked""];
""294_constructor"" [label=""constructor""];
""294_isIssuedBefore"" [label=""isIssuedBefore""];
""294_issue"" [label=""issue""];
""294_isRevokedBefore"" [label=""isRevokedBefore""];
""294_revoke"" [label=""revoke""];
""294_isIssued"" [label=""isIssued""];
""294_issue"" -> ""294_onlyNotIssued"";
""294_issue"" -> ""294_onlyOwner"";
""294_getIssuedBlock"" -> ""294_onlyIssued"";
""294_revoke"" -> ""294_onlyNotRevoked"";
""294_revoke"" -> ""294_onlyOwner"";
}
"
0xed023b117953fcfaa92150d3ebe3e987d19563ce.sol,ERC721Token,"contract ERC721Token is ERC721, Pausable { mapping(uint => address) tokenIdToOwner; mapping (uint => address) tokenIdToApproved; mapping(uint => uint) tokenIdToOwnerTokensIndex; function balanceOf(address _owner) public view returns (uint) { return ownerTokens[_owner].length; }",0,"subgraph cluster_582_ERC721Token {
label=""ERC721Token"";
""582_transfer"" [label=""transfer""];
""582_balanceOf"" [label=""balanceOf""];
""582__approve"" [label=""_approve""];
""582_ownerOf"" [label=""ownerOf""];
""582__transfer"" [label=""_transfer""];
""582_approve"" [label=""approve""];
""582__owns"" [label=""_owns""];
""582_transferFrom"" [label=""transferFrom""];
""582_approvedFor"" [label=""approvedFor""];
""582_getOwnerTokens"" [label=""getOwnerTokens""];
""582_approve"" -> ""582__approve"";
""582_transfer"" -> ""582__transfer"";
""582_transferFrom"" -> ""582__owns"";
""582_approve"" -> ""582_whenNotPaused"";
""582_transfer"" -> ""582__owns"";
""582_approve"" -> ""582__owns"";
""582_transfer"" -> ""582_whenNotPaused"";
""582_transferFrom"" -> ""582_whenNotPaused"";
""582_transferFrom"" -> ""582__transfer"";
}
"
0x02e582682aa7b4dcc3f7574c468ef61b29545404.sol,CloneWars,"contract CloneWars { using SafeMath for uint; event MarketBoost( uint amountSent ); event NorsefireSwitch( address from, address to, uint price ); uint256 public clones_to_create_one_idea = 2 days; uint256 public starting_clones = 232; uint256 PSN = 10000; uint256 PSNH = 5000; address actualNorse = 0x4F4eBF556CFDc21c3424F85ff6572C77c514Fcae; uint256 public marketIdeas; uint256 public norsefirePrice; bool public initialized; address public currentNorsefire; mapping (address => uint256) public arrayOfClones; mapping (address => uint256) public claimedIdeas; mapping (address => uint256) public lastDeploy; mapping (address => address) public referrals; constructor () public { initialized = false; norsefirePrice = 0.1 ether; currentNorsefire = 0x1337a4aEfd5ec486E6e97b1d0aE055FAC8D879dE; }",0,"subgraph cluster_720_CloneWars {
label=""CloneWars"";
""720_boostCloneMarket"" [label=""boostCloneMarket""];
""720_deployIdeas"" [label=""deployIdeas""];
""720_calculateIdeaBuy"" [label=""calculateIdeaBuy""];
""720_getMyIdeas"" [label=""getMyIdeas""];
""720_hijackClones"" [label=""hijackClones""];
""720_min"" [label=""min""];
""720_devFee"" [label=""devFee""];
""720_calculateIdeaSell"" [label=""calculateIdeaSell""];
""720_getMyClones"" [label=""getMyClones""];
""720_releaseTheOriginal"" [label=""releaseTheOriginal""];
""720_buyIdeas"" [label=""buyIdeas""];
""720_getBalance"" [label=""getBalance""];
""720_constructor"" [label=""constructor""];
""720_getIdeasSinceLastDeploy"" [label=""getIdeasSinceLastDeploy""];
""720_sellIdeas"" [label=""sellIdeas""];
""720_calculateTrade"" [label=""calculateTrade""];
""720_calculateIdeaBuySimple"" [label=""calculateIdeaBuySimple""];
""720_becomeNorsefire"" [label=""becomeNorsefire""];
""720_getNorsefirePrice"" [label=""getNorsefirePrice""];
""720_getIdeasSinceLastDeploy"" -> ""720_min"";
""720_getMyIdeas"" -> ""720_getIdeasSinceLastDeploy"";
""720_calculateIdeaSell"" -> ""720_calculateTrade"";
""720_sellIdeas"" -> ""720_devFee"";
""720_deployIdeas"" -> ""720_getMyIdeas"";
""720_sellIdeas"" -> ""720_getMyIdeas"";
""720_becomeNorsefire"" -> ""720_boostCloneMarket"";
""720_sellIdeas"" -> ""720_calculateIdeaSell"";
""720_releaseTheOriginal"" -> ""720_boostCloneMarket"";
""720_calculateIdeaBuy"" -> ""720_calculateTrade"";
""720_calculateIdeaBuySimple"" -> ""720_calculateIdeaBuy"";
""720_buyIdeas"" -> ""720_devFee"";
""720_buyIdeas"" -> ""720_calculateIdeaBuy"";
}
"
0x3f9ef884433bdcbe10e6477e58be727bc4e6731a.sol,BIONEUM,"contract BIONEUM is StandardToken, Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 8; uint256 public constant totalSupply = decVal(50000000); address public multisig = 0x999bb65DBfc56742d6a65b1267cfdacf2afa5FBE; address public developers = 0x8D9acc27005419E0a260B44d060F7427Cd9739B2; address public founders = 0xB679919c63799c39d074EEad650889B24C06fdC6; address public bounty = 0xCF2F450FB7d265fF82D0c2f1737d9f0258ae40A3; address public constant tokenAddress = this; uint256 public startDate; uint256 public endDate; uint256 public weiRaised; uint256 public tokensSold; modifier uninitialized() { require(multisig == 0x0); _; }",0,"subgraph cluster_849_BIONEUM {
label=""BIONEUM"";
""849_finalize"" [label=""finalize""];
""849_internalSend"" [label=""internalSend""];
""849_buyTokens"" [label=""buyTokens""];
""849_decVal"" [label=""decVal""];
""849_supply"" [label=""supply""];
""849_BIONEUM"" [label=""BIONEUM""];
""849_fallback"" [label=""fallback""];
""849_saleActive"" [label=""saleActive""];
""849_getRateAt"" [label=""getRateAt""];
""849_buyTokens"" -> ""849_saleActive"";
""849_internalSend"" -> ""849_supply"";
""849_saleActive"" -> ""849_supply"";
""849_BIONEUM"" -> ""849_decVal"";
""849_finalize"" -> ""849_onlyOwner"";
""849_buyTokens"" -> ""849_supply"";
""849_getRateAt"" -> ""849_decVal"";
""849_internalSend"" -> ""849_onlyOwner"";
""849_finalize"" -> ""849_saleActive"";
""849_fallback"" -> ""849_buyTokens"";
""849_buyTokens"" -> ""849_getRateAt"";
}
"
0xa18ed9da79ec3cb2cb4480315787db7c522d5911.sol,KEYT,"contract KEYT is owned, TokenERC20 { using SafeMath for uint; uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function KEYT( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",0,"subgraph cluster_808_KEYT {
label=""KEYT"";
""808_KEYT"" [label=""KEYT""];
""808__transfer"" [label=""_transfer""];
""808_buy"" [label=""buy""];
""808_mintToken"" [label=""mintToken""];
""808_freezeAccount"" [label=""freezeAccount""];
""808_setPrices"" [label=""setPrices""];
""808_sell"" [label=""sell""];
""808_freezeAccount"" -> ""808_onlyOwner"";
""808_setPrices"" -> ""808_onlyOwner"";
""808_KEYT"" -> ""808_TokenERC20"";
""808_buy"" -> ""808__transfer"";
""808_sell"" -> ""808__transfer"";
""808_mintToken"" -> ""808_onlyOwner"";
}
"
0x7430984e1d05d5f447c747123dd26845f6f17544.sol,ZethrBankroll,"contract ZethrBankroll is ERC223Receiving { using SafeMath for uint; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event WhiteListAddition(address indexed contractAddress); event WhiteListRemoval(address indexed contractAddress); event RequirementChange(uint required); event DevWithdraw(uint amountTotal, uint amountPerPerson); event EtherLogged(uint amountReceived, address sender); event BankrollInvest(uint amountReceived); event DailyTokenAdmin(address gameContract); event DailyTokensSent(address gameContract, uint tokens); event DailyTokensReceived(address gameContract, uint tokens); uint constant public MAX_OWNER_COUNT = 10; uint constant public MAX_WITHDRAW_PCT_DAILY = 15; uint constant public MAX_WITHDRAW_PCT_TX = 5; uint constant internal resetTimer = 1 days; address internal zethrAddress; ZTHInterface public ZTHTKN; mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; mapping (address => bool) public isWhitelisted; mapping (address => uint) public dailyTokensPerContract; address internal divCardAddress; address[] public owners; address[] public whiteListedContracts; uint public required; uint public transactionCount; uint internal dailyResetTime; uint internal dailyTknLimit; uint internal tknsDispensedToday; bool internal reEntered = false; struct Transaction { address destination; uint value; bytes data; bool executed; }",0,"subgraph cluster_1982_ZethrBankroll {
label=""ZethrBankroll"";
""1982_submitTransaction"" [label=""submitTransaction""];
""1982_allocateTokens"" [label=""allocateTokens""];
""1982_getTransactionCount"" [label=""getTransactionCount""];
""1982_dailyAccounting"" [label=""dailyAccounting""];
""1982_whiteListContract"" [label=""whiteListContract""];
""1982_fromHex"" [label=""fromHex""];
""1982_contractTokenWithdraw"" [label=""contractTokenWithdraw""];
""1982_devTokenWithdraw"" [label=""devTokenWithdraw""];
""1982_fallback"" [label=""fallback""];
""1982_getConfirmations"" [label=""getConfirmations""];
""1982_constructor"" [label=""constructor""];
""1982_isConfirmed"" [label=""isConfirmed""];
""1982_retrieveTokens"" [label=""retrieveTokens""];
""1982_getConfirmationCount"" [label=""getConfirmationCount""];
""1982_buyInWithAllBalanced"" [label=""buyInWithAllBalanced""];
""1982_deposit"" [label=""deposit""];
""1982_addTransaction"" [label=""addTransaction""];
""1982_permissibleTokenWithdrawal"" [label=""permissibleTokenWithdrawal""];
""1982_alterTokenGrant"" [label=""alterTokenGrant""];
""1982_changeRequirement"" [label=""changeRequirement""];
""1982_fromHexChar"" [label=""fromHexChar""];
""1982_changeDivCardAddress"" [label=""changeDivCardAddress""];
""1982_deWhiteListContract"" [label=""deWhiteListContract""];
""1982_addOwner"" [label=""addOwner""];
""1982_queryTokenGrant"" [label=""queryTokenGrant""];
""1982_setDailyTokenLimit"" [label=""setDailyTokenLimit""];
""1982_tokenFallback"" [label=""tokenFallback""];
""1982_getOwners"" [label=""getOwners""];
""1982_removeOwner"" [label=""removeOwner""];
""1982_replaceOwner"" [label=""replaceOwner""];
""1982_executeTransaction"" [label=""executeTransaction""];
""1982_receiveDividends"" [label=""receiveDividends""];
""1982_getTransactionIds"" [label=""getTransactionIds""];
""1982_addZethrAddresses"" [label=""addZethrAddresses""];
""1982_confirmTransaction"" [label=""confirmTransaction""];
""1982_buyTokens"" [label=""buyTokens""];
""1982_revokeConfirmation"" [label=""revokeConfirmation""];
""1982_removeOwner"" -> ""1982_changeRequirement"";
""1982_changeDivCardAddress"" -> ""1982_isAnOwner"";
""1982_dailyAccounting"" -> ""1982_isAnOwner"";
""1982_replaceOwner"" -> ""1982_ownerExists"";
""1982_devTokenWithdraw"" -> ""1982_onlyWallet"";
""1982_constructor"" -> ""1982_validRequirement"";
""1982_contractTokenWithdraw"" -> ""1982_contractIsWhiteListed"";
""1982_allocateTokens"" -> ""1982_isAnOwner"";
""1982_removeOwner"" -> ""1982_validRequirement"";
""1982_removeOwner"" -> ""1982_ownerExists"";
""1982_addZethrAddresses"" -> ""1982_isAnOwner"";
""1982_addOwner"" -> ""1982_validRequirement"";
""1982_alterTokenGrant"" -> ""1982_isAnOwner"";
""1982_removeOwner"" -> ""1982_onlyWallet"";
""1982_addTransaction"" -> ""1982_notNull"";
""1982_submitTransaction"" -> ""1982_addTransaction"";
""1982_revokeConfirmation"" -> ""1982_notExecuted"";
""1982_addOwner"" -> ""1982_notNull"";
""1982_replaceOwner"" -> ""1982_ownerDoesNotExist"";
""1982_buyTokens"" -> ""1982_isAnOwner"";
""1982_revokeConfirmation"" -> ""1982_ownerExists"";
""1982_dailyAccounting"" -> ""1982_allocateTokens"";
""1982_addOwner"" -> ""1982_onlyWallet"";
""1982_retrieveTokens"" -> ""1982_contractIsWhiteListed"";
""1982_executeTransaction"" -> ""1982_isConfirmed"";
""1982_buyInWithAllBalanced"" -> ""1982_isAnOwner"";
""1982_changeRequirement"" -> ""1982_onlyWallet"";
""1982_changeRequirement"" -> ""1982_validRequirement"";
""1982_deWhiteListContract"" -> ""1982_isAnOwner"";
""1982_retrieveTokens"" -> ""1982_isAnOwner"";
""1982_whiteListContract"" -> ""1982_contractIsNotWhiteListed"";
""1982_alterTokenGrant"" -> ""1982_contractIsWhiteListed"";
""1982_replaceOwner"" -> ""1982_onlyWallet"";
""1982_confirmTransaction"" -> ""1982_transactionExists"";
""1982_devTokenWithdraw"" -> ""1982_permissibleTokenWithdrawal"";
""1982_whiteListContract"" -> ""1982_isAnOwner"";
""1982_whiteListContract"" -> ""1982_notNull"";
""1982_allocateTokens"" -> ""1982_contractIsWhiteListed"";
""1982_revokeConfirmation"" -> ""1982_confirmed"";
""1982_confirmTransaction"" -> ""1982_executeTransaction"";
""1982_addOwner"" -> ""1982_ownerDoesNotExist"";
""1982_executeTransaction"" -> ""1982_notExecuted"";
""1982_fromHex"" -> ""1982_fromHexChar"";
""1982_deWhiteListContract"" -> ""1982_contractIsWhiteListed"";
""1982_confirmTransaction"" -> ""1982_notConfirmed"";
""1982_allocateTokens"" -> ""1982_permissibleTokenWithdrawal"";
""1982_setDailyTokenLimit"" -> ""1982_isAnOwner"";
""1982_confirmTransaction"" -> ""1982_ownerExists"";
""1982_submitTransaction"" -> ""1982_confirmTransaction"";
}
"
0x01c627181089b6e10ee8316ec08516b3df7c4845.sol,BrickCrowdsale,contract BrickCrowdsale is Ownable { using SafeMath for uint256; uint256 public startTime; uint256 public endTime; uint256 public weiRaised; uint256 public limitDateSale; bool public isSoftCapHit = false; bool public isStarted = false; bool public isFinalized = false; uint256 icoPvtRate = 40; uint256 icoPreRate = 50; uint256 ico1Rate = 65; uint256 ico2Rate = 75; uint256 ico3Rate = 90; uint256 public pvtTokens = (40000) * (10**18); uint256 public preSaleTokens = (6000000) * (10**18); uint256 public ico1Tokens = (8000000) * (10**18); uint256 public ico2Tokens = (8000000) * (10**18); uint256 public ico3Tokens = (8000000) * (10**18); uint256 public totalTokens = (40000000)* (10**18); address public advisoryEthWallet = 0x0D7629d32546CD493bc33ADEF115D4489f5599Be; address public infraEthWallet = 0x536D36a05F6592aa29BB0beE30cda706B1272521; address public techDevelopmentEthWallet = 0x4d0B70d8E612b5dca3597C64643a8d1efd5965e1; address public operationsEthWallet = 0xbc67B82924eEc8643A4f2ceDa59B5acfd888A967; address public wallet = 0x44d44CA0f75bdd3AE8806D02515E8268459c554A; struct ContributorData { uint256 contributionAmountViewOnly; uint256 tokensIssuedViewOnly; uint256 contributionAmount; uint256 tokensIssued; },0,"subgraph cluster_2591_BrickCrowdsale {
label=""BrickCrowdsale"";
""2591_hasEnded"" [label=""hasEnded""];
""2591_starting"" [label=""starting""];
""2591_releaseAllTokens"" [label=""releaseAllTokens""];
""2591_isWithinSaleTimeLimit"" [label=""isWithinSaleTimeLimit""];
""2591_setRate"" [label=""setRate""];
""2591_setHardCap"" [label=""setHardCap""];
""2591_setPvtTokens"" [label=""setPvtTokens""];
""2591_isWithinTokenAllocLimit"" [label=""isWithinTokenAllocLimit""];
""2591_constructor"" [label=""constructor""];
""2591_currentTokenSupply"" [label=""currentTokenSupply""];
""2591_release"" [label=""release""];
""2591_endIcoSaleRound3"" [label=""endIcoSaleRound3""];
""2591_endIcoSaleRound2"" [label=""endIcoSaleRound2""];
""2591_getCurrentRateInCents"" [label=""getCurrentRateInCents""];
""2591_releaseTokens"" [label=""releaseTokens""];
""2591_setKycAddress"" [label=""setKycAddress""];
""2591_finalize"" [label=""finalize""];
""2591_endIcoSaleRound1"" [label=""endIcoSaleRound1""];
""2591_setSaleDuration"" [label=""setSaleDuration""];
""2591_investorCount"" [label=""investorCount""];
""2591_refundMoney"" [label=""refundMoney""];
""2591_setKYCRequiredToSendTokens"" [label=""setKYCRequiredToSendTokens""];
""2591_forwardAllRaisedFunds"" [label=""forwardAllRaisedFunds""];
""2591_tokenSendFailuresCount"" [label=""tokenSendFailuresCount""];
""2591_setSaleBonus"" [label=""setSaleBonus""];
""2591_updateRateInWei"" [label=""updateRateInWei""];
""2591_setIco2Tokens"" [label=""setIco2Tokens""];
""2591_transferTokenOwnership"" [label=""transferTokenOwnership""];
""2591_hasStarted"" [label=""hasStarted""];
""2591_setSoftCap"" [label=""setSoftCap""];
""2591_refundAllMoney"" [label=""refundAllMoney""];
""2591_setIco1Tokens"" [label=""setIco1Tokens""];
""2591_buyTokens"" [label=""buyTokens""];
""2591_endPvtSale"" [label=""endPvtSale""];
""2591_didSoftCapReached"" [label=""didSoftCapReached""];
""2591_setPreSaleTokens"" [label=""setPreSaleTokens""];
""2591_transferKycOwnerShip"" [label=""transferKycOwnerShip""];
""2591_finalization"" [label=""finalization""];
""2591_start"" [label=""start""];
""2591_endPreSale"" [label=""endPreSale""];
""2591_setKYCRequiredToReceiveFunds"" [label=""setKYCRequiredToReceiveFunds""];
""2591_setIco3Tokens"" [label=""setIco3Tokens""];
""2591_buyPhaseTokens"" [label=""buyPhaseTokens""];
""2591_validPurchase"" [label=""validPurchase""];
""2591_isWithinSaleLimit"" [label=""isWithinSaleLimit""];
""2591_setTokenAddress"" [label=""setTokenAddress""];
""2591_setTokensForCrowdSale"" [label=""setTokensForCrowdSale""];
""2591_computeTokens"" [label=""computeTokens""];
""2591_splitTokens"" [label=""splitTokens""];
""2591_fallback"" [label=""fallback""];
""2591_init"" [label=""init""];
""2591_init"" -> ""2591_setRate"";
""2591_finalization"" -> ""2591_splitTokens"";
""2591_setHardCap"" -> ""2591_onlyOwner"";
""2591_setIco3Tokens"" -> ""2591_onlyOwner"";
""2591_refundAllMoney"" -> ""2591_refundMoney"";
""2591_setPvtTokens"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_releaseTokens"";
""2591_releaseTokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleDuration"" -> ""2591_onlyOwner"";
""2591_setTokensForCrowdSale"" -> ""2591_onlyOwner"";
""2591_finalization"" -> ""2591_forwardAllRaisedFunds"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleTimeLimit"";
""2591_setSoftCap"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_buyTokens"";
""2591_transferKycOwnerShip"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToReceiveFunds"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSoftCap"";
""2591_start"" -> ""2591_hasStarted"";
""2591_setPreSaleTokens"" -> ""2591_onlyOwner"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleLimit"";
""2591_endIcoSaleRound1"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound1"" -> ""2591_updateRateInWei"";
""2591_validPurchase"" -> ""2591_isWithinSaleTimeLimit"";
""2591_start"" -> ""2591_starting"";
""2591_init"" -> ""2591_setSaleDuration"";
""2591_endPreSale"" -> ""2591_onlyOwner"";
""2591_finalize"" -> ""2591_onlyOwner"";
""2591_refundMoney"" -> ""2591_onlyOwner"";
""2591_fallback"" -> ""2591_buyPhaseTokens"";
""2591_setIco1Tokens"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound3"" -> ""2591_updateRateInWei"";
""2591_setKycAddress"" -> ""2591_onlyOwner"";
""2591_transferTokenOwnership"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToSendTokens"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSaleBonus"";
""2591_endIcoSaleRound2"" -> ""2591_onlyOwner"";
""2591_setIco2Tokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokenAddress"";
""2591_refundAllMoney"" -> ""2591_onlyOwner"";
""2591_setTokenAddress"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_validPurchase"";
""2591_init"" -> ""2591_setHardCap"";
""2591_finalize"" -> ""2591_finalization"";
""2591_releaseTokens"" -> ""2591_release"";
""2591_init"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_isWithinTokenAllocLimit"";
""2591_buyPhaseTokens"" -> ""2591_computeTokens"";
""2591_updateRateInWei"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleBonus"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokensForCrowdSale"";
""2591_init"" -> ""2591_setKycAddress"";
""2591_endIcoSaleRound2"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_onlyOwner"";
""2591_start"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_start"";
""2591_endIcoSaleRound3"" -> ""2591_onlyOwner"";
""2591_endPreSale"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_updateRateInWei"";
}
"
0x89b5eaec2702ab0ff33ca397b3e66c7d925d5144.sol,Soccer,"contract Soccer { using SafeMath for uint256; event Birth(uint256 tokenId, uint256 startPrice); event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner); event Transfer(address indexed from, address indexed to, uint256 tokenId); event Approval(address indexed owner, address indexed approved, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; struct Token { address owner; uint256 price; }",0,"subgraph cluster_1466_Soccer {
label=""Soccer"";
""1466__handle"" [label=""_handle""];
""1466_getInitialPriceOfToken"" [label=""getInitialPriceOfToken""];
""1466_symbol"" [label=""symbol""];
""1466__approved"" [label=""_approved""];
""1466_transfer"" [label=""transfer""];
""1466_unlockPriceChange"" [label=""unlockPriceChange""];
""1466_setCOO"" [label=""setCOO""];
""1466_Soccer"" [label=""Soccer""];
""1466__owns"" [label=""_owns""];
""1466_changePrice"" [label=""changePrice""];
""1466_ownerOf"" [label=""ownerOf""];
""1466__addressNotNull"" [label=""_addressNotNull""];
""1466__transfer"" [label=""_transfer""];
""1466_lockPriceChange"" [label=""lockPriceChange""];
""1466_getNextPrice"" [label=""getNextPrice""];
""1466_isContract"" [label=""isContract""];
""1466_getTotalSupply"" [label=""getTotalSupply""];
""1466_payout"" [label=""payout""];
""1466_takeOwnership"" [label=""takeOwnership""];
""1466_setCEO"" [label=""setCEO""];
""1466_buyToken"" [label=""buyToken""];
""1466_createPromoCollectible"" [label=""createPromoCollectible""];
""1466_approve"" [label=""approve""];
""1466__payout"" [label=""_payout""];
""1466_priceOf"" [label=""priceOf""];
""1466_name"" [label=""name""];
""1466_tokensOfOwner"" [label=""tokensOfOwner""];
""1466_balanceOf"" [label=""balanceOf""];
""1466_implementsERC721"" [label=""implementsERC721""];
""1466_transferFrom"" [label=""transferFrom""];
""1466__addLastOwner"" [label=""_addLastOwner""];
""1466_getToken"" [label=""getToken""];
""1466_buyToken"" -> ""1466__handle"";
""1466_buyToken"" -> ""1466_isContract"";
""1466_getToken"" -> ""1466_getInitialPriceOfToken"";
""1466_takeOwnership"" -> ""1466__approved"";
""1466_tokensOfOwner"" -> ""1466_getTotalSupply"";
""1466_changePrice"" -> ""1466__owns"";
""1466_createPromoCollectible"" -> ""1466_getInitialPriceOfToken"";
""1466_createPromoCollectible"" -> ""1466__transfer"";
""1466_takeOwnership"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__transfer"";
""1466_createPromoCollectible"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466__addLastOwner"";
""1466_payout"" -> ""1466__payout"";
""1466_setCOO"" -> ""1466_onlyCEO"";
""1466_priceOf"" -> ""1466_getInitialPriceOfToken"";
""1466_setCEO"" -> ""1466_onlyCEO"";
""1466_unlockPriceChange"" -> ""1466_onlyCLevel"";
""1466_transferFrom"" -> ""1466__owns"";
""1466_lockPriceChange"" -> ""1466_onlyCLevel"";
""1466_payout"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466_getNextPrice"";
""1466_transferFrom"" -> ""1466__addressNotNull"";
""1466_transferFrom"" -> ""1466__approved"";
""1466_transfer"" -> ""1466__owns"";
""1466_takeOwnership"" -> ""1466__transfer"";
""1466_approve"" -> ""1466__owns"";
""1466_transferFrom"" -> ""1466__transfer"";
""1466_tokensOfOwner"" -> ""1466_balanceOf"";
""1466_getToken"" -> ""1466_getNextPrice"";
""1466_buyToken"" -> ""1466_getInitialPriceOfToken"";
}
"
0x6f4dcbb16f72853c7382e7100a0713a68e53d9be.sol,GroupBuyContract,contract GroupBuyContract { uint256 public constant MAX_CONTRIBUTION_SLOTS = 20; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; struct Group { address[] contributorArr; mapping(address => uint256) addressToContributorArrIndex; mapping(address => uint256) addressToContribution; bool exists; uint256 contributedBalance; uint256 purchasePrice; },0,"subgraph cluster_2011_GroupBuyContract {
label=""GroupBuyContract"";
""2011_unpause"" [label=""unpause""];
""2011_withdrawCommission"" [label=""withdrawCommission""];
""2011_fallback"" [label=""fallback""];
""2011_setCEO"" [label=""setCEO""];
""2011_setCOO2"" [label=""setCOO2""];
""2011_activatePurchase"" [label=""activatePurchase""];
""2011_adjustCommission"" [label=""adjustCommission""];
""2011__clearContributorRecordInGroup"" [label=""_clearContributorRecordInGroup""];
""2011__distributeProceeds"" [label=""_distributeProceeds""];
""2011_getContributorsInTokenGroupCount"" [label=""getContributorsInTokenGroupCount""];
""2011_getTokenGroupTotalBalance"" [label=""getTokenGroupTotalBalance""];
""2011_getSelfGroupsContributedTo"" [label=""getSelfGroupsContributedTo""];
""2011__newPrice"" [label=""_newPrice""];
""2011_setCOO1"" [label=""setCOO1""];
""2011__addressNotNull"" [label=""_addressNotNull""];
""2011_withdrawBalance"" [label=""withdrawBalance""];
""2011_dissolveTokenGroup"" [label=""dissolveTokenGroup""];
""2011_distributeCustomSaleProceeds"" [label=""distributeCustomSaleProceeds""];
""2011_getGroupPurchasedPrice"" [label=""getGroupPurchasedPrice""];
""2011_contributeToTokenGroup"" [label=""contributeToTokenGroup""];
""2011_getGroupsContributedTo"" [label=""getGroupsContributedTo""];
""2011_GroupBuyContract"" [label=""GroupBuyContract""];
""2011_setToForking"" [label=""setToForking""];
""2011_leaveTokenGroupAndWithdrawBalance"" [label=""leaveTokenGroupAndWithdrawBalance""];
""2011_pause"" [label=""pause""];
""2011__withdrawUserFunds"" [label=""_withdrawUserFunds""];
""2011__purchase"" [label=""_purchase""];
""2011_transferToken"" [label=""transferToken""];
""2011_getSelfContributionBalanceForTokenGroup"" [label=""getSelfContributionBalanceForTokenGroup""];
""2011_setCOO3"" [label=""setCOO3""];
""2011_leaveTokenGroup"" [label=""leaveTokenGroup""];
""2011_setCFO"" [label=""setCFO""];
""2011_distributeSaleProceeds"" [label=""distributeSaleProceeds""];
""2011__clearGroupRecordInContributor"" [label=""_clearGroupRecordInContributor""];
""2011_getContributionBalanceForTokenGroup"" [label=""getContributionBalanceForTokenGroup""];
""2011_getWithdrawableBalance"" [label=""getWithdrawableBalance""];
""2011_getContributorsInTokenGroup"" [label=""getContributorsInTokenGroup""];
""2011_setToNotForking"" [label=""setToNotForking""];
""2011_transferToken"" -> ""2011_onlyCOO"";
""2011_contributeToTokenGroup"" -> ""2011_whenNotPaused"";
""2011_withdrawBalance"" -> ""2011__addressNotNull"";
""2011_adjustCommission"" -> ""2011_onlyCLevel"";
""2011_withdrawBalance"" -> ""2011__withdrawUserFunds"";
""2011_distributeSaleProceeds"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroup"" -> ""2011__clearGroupRecordInContributor"";
""2011_setCEO"" -> ""2011_onlyCEO"";
""2011_unpause"" -> ""2011_onlyCEO"";
""2011_contributeToTokenGroup"" -> ""2011__addressNotNull"";
""2011_pause"" -> ""2011_onlyCLevel"";
""2011_contributeToTokenGroup"" -> ""2011_whenNotForking"";
""2011_pause"" -> ""2011_whenNotPaused"";
""2011_dissolveTokenGroup"" -> ""2011__clearGroupRecordInContributor"";
""2011_activatePurchase"" -> ""2011__purchase"";
""2011_distributeCustomSaleProceeds"" -> ""2011__distributeProceeds"";
""2011_setToForking"" -> ""2011_whenNotForking"";
""2011_unpause"" -> ""2011_whenPaused"";
""2011_getGroupsContributedTo"" -> ""2011__addressNotNull"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__addressNotNull"";
""2011_activatePurchase"" -> ""2011_whenNotPaused"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011_whenNotPaused"";
""2011_setToNotForking"" -> ""2011_onlyCEO"";
""2011_distributeCustomSaleProceeds"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__clearContributorRecordInGroup"";
""2011_distributeSaleProceeds"" -> ""2011__newPrice"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__clearGroupRecordInContributor"";
""2011_dissolveTokenGroup"" -> ""2011_whenForking"";
""2011_setCOO2"" -> ""2011_onlyCEO"";
""2011_contributeToTokenGroup"" -> ""2011__purchase"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__withdrawUserFunds"";
""2011_withdrawCommission"" -> ""2011_onlyCFO"";
""2011_setCOO3"" -> ""2011_onlyCEO"";
""2011_distributeSaleProceeds"" -> ""2011__distributeProceeds"";
""2011__distributeProceeds"" -> ""2011__clearGroupRecordInContributor"";
""2011_getSelfGroupsContributedTo"" -> ""2011__addressNotNull"";
""2011_setCOO1"" -> ""2011_onlyCEO"";
""2011_setToNotForking"" -> ""2011_whenForking"";
""2011_setToForking"" -> ""2011_onlyCLevel"";
""2011_dissolveTokenGroup"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroup"" -> ""2011_whenNotPaused"";
""2011_withdrawBalance"" -> ""2011_whenNotPaused"";
""2011_getWithdrawableBalance"" -> ""2011__addressNotNull"";
""2011_leaveTokenGroup"" -> ""2011__clearContributorRecordInGroup"";
""2011_leaveTokenGroup"" -> ""2011__addressNotNull"";
""2011_setCFO"" -> ""2011_onlyCEO"";
}
"
0x71880d9f448c995ec5a7c9d68f2b0e256ef510d2.sol,ValueTokenBase,"contract ValueTokenBase is ERC20 { string public name; string public symbol; uint8 public decimals = 18; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowances; event Burn(address indexed from, uint256 value); function ValueTokenBase(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals) public { name = _tokenName; symbol = _tokenSymbol; decimals = _decimals; totalSupply = _initialSupply * 10 ** uint256(decimals); balances[msg.sender] = totalSupply; }",0,"subgraph cluster_574_ValueTokenBase {
label=""ValueTokenBase"";
""574_transfer"" [label=""transfer""];
""574_burnFrom"" [label=""burnFrom""];
""574_balanceOf"" [label=""balanceOf""];
""574_approveAndCall"" [label=""approveAndCall""];
""574_decreaseApproval"" [label=""decreaseApproval""];
""574_approve"" [label=""approve""];
""574_burn"" [label=""burn""];
""574_transferFrom"" [label=""transferFrom""];
""574_allowance"" [label=""allowance""];
""574_ValueTokenBase"" [label=""ValueTokenBase""];
""574__transfer"" [label=""_transfer""];
""574_increaseApproval"" [label=""increaseApproval""];
""574_transferFrom"" -> ""574__transfer"";
""574_transfer"" -> ""574__transfer"";
""574_approveAndCall"" -> ""574_approve"";
}
"
0x411139af515804562ddca220220728c9791cc714.sol,KnowToken,"contract KnowToken is KNBaseToken, Ownable { uint256 internal privateToken = 389774115000000000000000000; uint256 internal preSaleToken = 1169322346000000000000000000; uint256 internal crowdSaleToken = 3897741155000000000000000000; uint256 internal bountyToken; uint256 internal foundationToken; address public founderAddress; bool public unlockAllTokens; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool unfrozen); event UnLockAllTokens(bool unlock); constructor() public { founderAddress = msg.sender; balances[founderAddress] = totalSupply_; emit Transfer(address(0), founderAddress, totalSupply_); }",0,"subgraph cluster_777_KnowToken {
label=""KnowToken"";
""777_freezeAccount"" [label=""freezeAccount""];
""777_unlockAllTokens"" [label=""unlockAllTokens""];
""777__transfer"" [label=""_transfer""];
""777_constructor"" [label=""constructor""];
""777_unlockAllTokens"" -> ""777_onlyOwner"";
""777_freezeAccount"" -> ""777_onlyOwner"";
}
"
0x882da60a19c67e481481bace4c0aa93080cde3d7.sol,Crowdsale,"contract Crowdsale is Haltable, SafeMathLib { uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5; FractionalERC20 public token; PricingStrategy public pricingStrategy; FinalizeAgent public finalizeAgent; address public multisigWallet; uint public minimumFundingGoal; uint public startsAt; uint public endsAt; uint public tokensSold = 0; uint public weiRaised = 0; uint public investorCount = 0; uint public loadedRefund = 0; uint public weiRefunded = 0; bool public finalized; bool public requireCustomerId; bool public requiredSignedAddress; address public signerAddress; mapping (address => uint256) public investedAmountOf; mapping (address => uint256) public tokenAmountOf; mapping (address => bool) public earlyParticipantWhitelist; uint public ownerTestValue; enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}",0,"subgraph cluster_2531_MintedEthCappedCrowdsale {
label=""MintedEthCappedCrowdsale"";
""2531_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""2531_assignTokens"" [label=""assignTokens""];
""2531_MintedEthCappedCrowdsale"" [label=""MintedEthCappedCrowdsale""];
""2531_isBreakingCap"" [label=""isBreakingCap""];
""2531_MintedEthCappedCrowdsale"" -> ""2531_Crowdsale"";
}
"
0xeb41d9b0326b787a7c767478cfc4d060c6aa9dbd.sol,VirtualGift,"contract VirtualGift is ERC721 { string public name = ; uint8 public decimals = 0; string public symbol = ; string public version = ; address private defaultGiftOwner; mapping(address => bool) allowPermission; ERC20 private Gifto = ERC20(0x00C5bBaE50781Be1669306b9e001EFF57a2957b09d); event Creation(address indexed _owner, uint256 indexed tokenId); GiftToken[] giftStorageArry; GiftTemplateToken[] giftTemplateStorageArry; mapping(address => uint256) private balances; mapping(uint256 => address) private giftIndexToOwners; mapping(uint256 => bool) private giftExists; mapping(address => mapping (address => uint256)) private ownerToApprovedAddsToGifIds; mapping(uint256 => uint256[]) private giftTemplateIdToGiftids; mapping(uint256 => uint256) private giftTypeToGiftLimit; mapping(uint256 => uint256) private giftTypeToSelledSum; struct GiftTemplateToken { uint256 giftPrice; uint256 giftLimit; string giftImgUrl; string giftName; }",0,"subgraph cluster_1220_VirtualGift {
label=""VirtualGift"";
""1220_transfer"" [label=""transfer""];
""1220_sendGift"" [label=""sendGift""];
""1220_balanceOf"" [label=""balanceOf""];
""1220_giftsOfOwner"" [label=""giftsOfOwner""];
""1220_getGift"" [label=""getGift""];
""1220_takeOwnership"" [label=""takeOwnership""];
""1220_ownerOf"" [label=""ownerOf""];
""1220_totalSupply"" [label=""totalSupply""];
""1220_setGiftoAddress"" [label=""setGiftoAddress""];
""1220_addPermission"" [label=""addPermission""];
""1220_getGiftSoldFromType"" [label=""getGiftSoldFromType""];
""1220_transferFrom"" [label=""transferFrom""];
""1220_getAllGiftTemplateIds"" [label=""getAllGiftTemplateIds""];
""1220__mintGift"" [label=""_mintGift""];
""1220_updateTemplate"" [label=""updateTemplate""];
""1220__transfer"" [label=""_transfer""];
""1220_getGiftsByTemplateId"" [label=""getGiftsByTemplateId""];
""1220_approve"" [label=""approve""];
""1220_allowance"" [label=""allowance""];
""1220_withdraw"" [label=""withdraw""];
""1220_removePermission"" [label=""removePermission""];
""1220_VirtualGift"" [label=""VirtualGift""];
""1220_withdrawGTO"" [label=""withdrawGTO""];
""1220_createGiftTemplate"" [label=""createGiftTemplate""];
""1220_getGiftoAddress"" [label=""getGiftoAddress""];
""1220_getGiftTemplateById"" [label=""getGiftTemplateById""];
""1220_transferFrom"" -> ""1220__transfer"";
""1220_approve"" -> ""1220_ownerOf"";
""1220_setGiftoAddress"" -> ""1220_onlyOwner"";
""1220_sendGift"" -> ""1220_onlyHavePermission"";
""1220_giftsOfOwner"" -> ""1220_totalSupply"";
""1220_giftsOfOwner"" -> ""1220_balanceOf"";
""1220_createGiftTemplate"" -> ""1220_onlyHavePermission"";
""1220__mintGift"" -> ""1220__transfer"";
""1220_transfer"" -> ""1220_ownerOf"";
""1220_takeOwnership"" -> ""1220_ownerOf"";
""1220_updateTemplate"" -> ""1220_onlyOwner"";
""1220_transfer"" -> ""1220__transfer"";
""1220_withdrawGTO"" -> ""1220_onlyOwner"";
""1220_sendGift"" -> ""1220__mintGift"";
""1220_withdraw"" -> ""1220_onlyOwner"";
""1220_transferFrom"" -> ""1220_ownerOf"";
""1220_removePermission"" -> ""1220_onlyOwner"";
""1220_takeOwnership"" -> ""1220__transfer"";
""1220_addPermission"" -> ""1220_onlyOwner"";
}
"
0xd3d72bdd70c2a1dbc3ff6556a8c5f1d0d3a92b7a.sol,SilentNotaryTokenSale,"contract SilentNotaryTokenSale is Ownable, SafeMath { enum Status {Unknown, Preparing, Selling, ProlongedSelling, TokenShortage, Finished}",0,"subgraph cluster_863_SilentNotaryTokenSale {
label=""SilentNotaryTokenSale"";
""863_withdrawTokens"" [label=""withdrawTokens""];
""863_changeTokenPrice"" [label=""changeTokenPrice""];
""863_resumeSale"" [label=""resumeSale""];
""863_fallback"" [label=""fallback""];
""863_stopSale"" [label=""stopSale""];
""863_kill"" [label=""kill""];
""863_getCurrentStatus"" [label=""getCurrentStatus""];
""863_SilentNotaryTokenSale"" [label=""SilentNotaryTokenSale""];
""863_prolong"" [label=""prolong""];
""863_kill"" -> ""863_onlyOwner"";
""863_resumeSale"" -> ""863_onlyOwner"";
""863_fallback"" -> ""863_safeDiv"";
""863_fallback"" -> ""863_safeAdd"";
""863_stopSale"" -> ""863_onlyOwner"";
""863_fallback"" -> ""863_safeSub"";
""863_prolong"" -> ""863_onlyOwner"";
""863_fallback"" -> ""863_getCurrentStatus"";
""863_fallback"" -> ""863_safeMul"";
""863_withdrawTokens"" -> ""863_onlyOwner"";
""863_changeTokenPrice"" -> ""863_onlyOwner"";
}
"
0x6fa4bc3d211e302c49881577dace630f6a3fbcc5.sol,Crowdsale,"contract Crowdsale is Ownable { address public beneficiary = msg.sender; token public epm; uint256 public constant EXCHANGE_RATE = 100; uint256 public constant DURATION = 30 days; uint256 public startTime = 0; uint256 public endTime = 0; uint public amount = 0; mapping(address => uint256) public balanceOf; event FundTransfer(address backer, uint amount, bool isContribution); function Crowdsale() { epm = token(0xA81b980c9FAAFf98ebA21DC05A9Be63f4C733979); startTime = now; endTime = startTime + DURATION; }",0,"subgraph cluster_239_Crowdsale {
label=""Crowdsale"";
""239_fallback"" [label=""fallback""];
""239_Crowdsale"" [label=""Crowdsale""];
""239_Withdrawal"" [label=""Withdrawal""];
""239_fallback"" -> ""239_onlyDuringSale"";
}
"
0xc0a1f89bbcaddab4b736e786b6b16c67bc92ed35.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1152_MiniMeToken {
label=""MiniMeToken"";
""1152_destroyTokens"" [label=""destroyTokens""];
""1152_totalSupplyAt"" [label=""totalSupplyAt""];
""1152_MiniMeToken"" [label=""MiniMeToken""];
""1152_claimTokens"" [label=""claimTokens""];
""1152_controller"" [label=""controller""];
""1152_createCloneToken"" [label=""createCloneToken""];
""1152_generateTokens"" [label=""generateTokens""];
""1152_allowance"" [label=""allowance""];
""1152_balanceOf"" [label=""balanceOf""];
""1152_min"" [label=""min""];
""1152_balanceOfAt"" [label=""balanceOfAt""];
""1152_fallback"" [label=""fallback""];
""1152_updateValueAtNow"" [label=""updateValueAtNow""];
""1152_transferFrom"" [label=""transferFrom""];
""1152_totalSupply"" [label=""totalSupply""];
""1152_getValueAt"" [label=""getValueAt""];
""1152_doTransfer"" [label=""doTransfer""];
""1152_transfer"" [label=""transfer""];
""1152_isContract"" [label=""isContract""];
""1152_enableTransfers"" [label=""enableTransfers""];
""1152_approveAndCall"" [label=""approveAndCall""];
""1152_approve"" [label=""approve""];
""1152_transferFrom"" -> ""1152_doTransfer"";
""1152_doTransfer"" -> ""1152_isContract"";
""1152_destroyTokens"" -> ""1152_updateValueAtNow"";
""1152_generateTokens"" -> ""1152_onlyController"";
""1152_totalSupply"" -> ""1152_totalSupplyAt"";
""1152_balanceOfAt"" -> ""1152_min"";
""1152_doTransfer"" -> ""1152_balanceOfAt"";
""1152_totalSupplyAt"" -> ""1152_min"";
""1152_generateTokens"" -> ""1152_balanceOf"";
""1152_enableTransfers"" -> ""1152_onlyController"";
""1152_generateTokens"" -> ""1152_updateValueAtNow"";
""1152_destroyTokens"" -> ""1152_balanceOf"";
""1152_destroyTokens"" -> ""1152_getValueAt"";
""1152_fallback"" -> ""1152_isContract"";
""1152_destroyTokens"" -> ""1152_onlyController"";
""1152_balanceOfAt"" -> ""1152_getValueAt"";
""1152_totalSupplyAt"" -> ""1152_getValueAt"";
""1152_doTransfer"" -> ""1152_updateValueAtNow"";
""1152_transfer"" -> ""1152_doTransfer"";
""1152_claimTokens"" -> ""1152_onlyController"";
""1152_approve"" -> ""1152_isContract"";
""1152_balanceOf"" -> ""1152_balanceOfAt"";
""1152_approveAndCall"" -> ""1152_approve"";
""1152_generateTokens"" -> ""1152_getValueAt"";
}
"
0x36f6a1353a3e1c008782e86bfe551c6f8b8c3370.sol,Shadow3D,contract Shadow3D { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1311_Shadow3D {
label=""Shadow3D"";
""1311_transfer"" [label=""transfer""];
""1311_setSymbol"" [label=""setSymbol""];
""1311_sell"" [label=""sell""];
""1311_sqrt"" [label=""sqrt""];
""1311_setAdministrator"" [label=""setAdministrator""];
""1311_setStakingRequirement"" [label=""setStakingRequirement""];
""1311_dividendsOf"" [label=""dividendsOf""];
""1311_balanceOf"" [label=""balanceOf""];
""1311_Hourglass"" [label=""Hourglass""];
""1311_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1311_purchaseTokens"" [label=""purchaseTokens""];
""1311_setName"" [label=""setName""];
""1311_withdraw"" [label=""withdraw""];
""1311_reinvest"" [label=""reinvest""];
""1311_totalSupply"" [label=""totalSupply""];
""1311_exit"" [label=""exit""];
""1311_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1311_myTokens"" [label=""myTokens""];
""1311_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1311_sellPrice"" [label=""sellPrice""];
""1311_myDividends"" [label=""myDividends""];
""1311_fallback"" [label=""fallback""];
""1311_disableInitialStage"" [label=""disableInitialStage""];
""1311_buy"" [label=""buy""];
""1311_buyPrice"" [label=""buyPrice""];
""1311_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1311_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1311_exit"" -> ""1311_sell"";
""1311_setName"" -> ""1311_onlyAdministrator"";
""1311_setStakingRequirement"" -> ""1311_onlyAdministrator"";
""1311_setSymbol"" -> ""1311_onlyAdministrator"";
""1311_sellPrice"" -> ""1311_tokensToEthereum_"";
""1311_transfer"" -> ""1311_onlyBagholders"";
""1311_myDividends"" -> ""1311_dividendsOf"";
""1311_transfer"" -> ""1311_tokensToEthereum_"";
""1311_transfer"" -> ""1311_myDividends"";
""1311_withdraw"" -> ""1311_myDividends"";
""1311_withdraw"" -> ""1311_onlyStronghands"";
""1311_buy"" -> ""1311_purchaseTokens"";
""1311_disableInitialStage"" -> ""1311_onlyAdministrator"";
""1311_calculateEthereumReceived"" -> ""1311_tokensToEthereum_"";
""1311_fallback"" -> ""1311_purchaseTokens"";
""1311_calculateTokensReceived"" -> ""1311_ethereumToTokens_"";
""1311_reinvest"" -> ""1311_onlyStronghands"";
""1311_sell"" -> ""1311_tokensToEthereum_"";
""1311_transfer"" -> ""1311_withdraw"";
""1311_myTokens"" -> ""1311_balanceOf"";
""1311_ethereumToTokens_"" -> ""1311_sqrt"";
""1311_reinvest"" -> ""1311_myDividends"";
""1311_reinvest"" -> ""1311_purchaseTokens"";
""1311_buyPrice"" -> ""1311_tokensToEthereum_"";
""1311_purchaseTokens"" -> ""1311_ethereumToTokens_"";
""1311_exit"" -> ""1311_withdraw"";
""1311_setAdministrator"" -> ""1311_onlyAdministrator"";
""1311_purchaseTokens"" -> ""1311_antiEarlyWhale"";
""1311_sell"" -> ""1311_onlyBagholders"";
}
"
0xc336e10dee4cab01248cf3b1747b52d78394c77a.sol,HoardCrowdsale,"contract HoardCrowdsale { function invest(address addr,uint tokenAmount) public payable { }",0,"subgraph cluster_64_HoardCrowdsale {
label=""HoardCrowdsale"";
""64_invest"" [label=""invest""];
}
"
0x6f655b9e1e79a8979ad5bf8f141f2fc4dc71540c.sol,usingOraclize,contract usingOraclize { uint constant day = 60*60*24; uint constant week = 60*60*24*7; uint constant month = 60*60*24*30; byte constant proofType_NONE = 0x00; byte constant proofType_TLSNotary = 0x10; byte constant proofType_Android = 0x20; byte constant proofType_Ledger = 0x30; byte constant proofType_Native = 0xF0; byte constant proofStorage_IPFS = 0x01; uint8 constant networkID_auto = 0; uint8 constant networkID_mainnet = 1; uint8 constant networkID_testnet = 2; uint8 constant networkID_morden = 2; uint8 constant networkID_consensys = 161; OraclizeAddrResolverI OAR; OraclizeI oraclize; modifier oraclizeAPI { if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork(networkID_auto); if(address(oraclize) != OAR.getAddress()) oraclize = OraclizeI(OAR.getAddress()); _; },0,"subgraph cluster_6275_usingOraclize {
label=""usingOraclize"";
""6275_stra2cbor"" [label=""stra2cbor""];
""6275_oraclize_setProof"" [label=""oraclize_setProof""];
""6275_ecrecovery"" [label=""ecrecovery""];
""6275_oraclize_setNetwork"" [label=""oraclize_setNetwork""];
""6275_strCompare"" [label=""strCompare""];
""6275_oraclize_setNetworkName"" [label=""oraclize_setNetworkName""];
""6275_oraclize_getPrice"" [label=""oraclize_getPrice""];
""6275_matchBytes32Prefix"" [label=""matchBytes32Prefix""];
""6275___callback"" [label=""__callback""];
""6275_oraclize_cbAddress"" [label=""oraclize_cbAddress""];
""6275_oraclize_setConfig"" [label=""oraclize_setConfig""];
""6275_oraclize_randomDS_setCommitment"" [label=""oraclize_randomDS_setCommitment""];
""6275_oraclize_randomDS_proofVerify__sessionKeyValidity"" [label=""oraclize_randomDS_proofVerify__sessionKeyValidity""];
""6275_oraclize_useCoupon"" [label=""oraclize_useCoupon""];
""6275_safer_ecrecover"" [label=""safer_ecrecover""];
""6275_oraclize_newRandomDSQuery"" [label=""oraclize_newRandomDSQuery""];
""6275_parseAddr"" [label=""parseAddr""];
""6275_ba2cbor"" [label=""ba2cbor""];
""6275_uint2str"" [label=""uint2str""];
""6275_verifySig"" [label=""verifySig""];
""6275_parseInt"" [label=""parseInt""];
""6275_indexOf"" [label=""indexOf""];
""6275_strConcat"" [label=""strConcat""];
""6275_oraclize_randomDS_getSessionPubKeyHash"" [label=""oraclize_randomDS_getSessionPubKeyHash""];
""6275_getCodeSize"" [label=""getCodeSize""];
""6275_copyBytes"" [label=""copyBytes""];
""6275_oraclize_getNetworkName"" [label=""oraclize_getNetworkName""];
""6275_oraclize_query"" [label=""oraclize_query""];
""6275_oraclize_randomDS_proofVerify__main"" [label=""oraclize_randomDS_proofVerify__main""];
""6275_oraclize_setCustomGasPrice"" [label=""oraclize_setCustomGasPrice""];
""6275_oraclize_randomDS_proofVerify__returnCode"" [label=""oraclize_randomDS_proofVerify__returnCode""];
""6275_oraclize_randomDS_getSessionPubKeyHash"" -> ""6275_oraclizeAPI"";
""6275_oraclize_randomDS_proofVerify__returnCode"" -> ""6275_oraclize_getNetworkName"";
""6275_oraclize_getPrice"" -> ""6275_oraclizeAPI"";
""6275_oraclize_query"" -> ""6275_oraclizeAPI"";
""6275_oraclize_setProof"" -> ""6275_oraclizeAPI"";
""6275_oraclize_randomDS_proofVerify__main"" -> ""6275_matchBytes32Prefix"";
""6275_strConcat"" -> ""6275_strConcat"";
""6275_oraclize_newRandomDSQuery"" -> ""6275_oraclize_randomDS_setCommitment"";
""6275_oraclize_setNetwork"" -> ""6275_getCodeSize"";
""6275_oraclize_query"" -> ""6275_ba2cbor"";
""6275_oraclize_setCustomGasPrice"" -> ""6275_oraclizeAPI"";
""6275_oraclize_newRandomDSQuery"" -> ""6275_copyBytes"";
""6275_oraclize_randomDS_proofVerify__main"" -> ""6275_copyBytes"";
""6275_oraclize_cbAddress"" -> ""6275_oraclizeAPI"";
""6275_oraclize_randomDS_proofVerify__returnCode"" -> ""6275_oraclize_randomDS_proofVerify__main"";
""6275_oraclize_newRandomDSQuery"" -> ""6275_oraclize_randomDS_getSessionPubKeyHash"";
""6275_parseInt"" -> ""6275_parseInt"";
""6275_oraclize_randomDS_proofVerify__main"" -> ""6275_verifySig"";
""6275_oraclize_randomDS_proofVerify__main"" -> ""6275_oraclize_randomDS_proofVerify__sessionKeyValidity"";
""6275___callback"" -> ""6275___callback"";
""6275_verifySig"" -> ""6275_safer_ecrecover"";
""6275_ecrecovery"" -> ""6275_safer_ecrecover"";
""6275_oraclize_query"" -> ""6275_oraclize_query"";
""6275_oraclize_setConfig"" -> ""6275_oraclizeAPI"";
""6275_oraclize_randomDS_proofVerify__sessionKeyValidity"" -> ""6275_copyBytes"";
""6275_oraclize_useCoupon"" -> ""6275_oraclizeAPI"";
""6275_oraclize_setNetwork"" -> ""6275_oraclize_setNetworkName"";
""6275_oraclize_query"" -> ""6275_stra2cbor"";
""6275_oraclize_newRandomDSQuery"" -> ""6275_oraclize_query"";
""6275_oraclize_randomDS_proofVerify__sessionKeyValidity"" -> ""6275_verifySig"";
""6275_verifySig"" -> ""6275_copyBytes"";
}
"
0x6ed8c49228397cbd0b62db04beaf0b7e9a4da93a.sol,PausableToken,"contract PausableToken is StandardToken, Pausable { function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) { return super.transfer(_to, _value); }",0,"subgraph cluster_704_PausableToken {
label=""PausableToken"";
""704_approve"" [label=""approve""];
""704_increaseApproval"" [label=""increaseApproval""];
""704_transfer"" [label=""transfer""];
""704_decreaseApproval"" [label=""decreaseApproval""];
""704_transferFrom"" [label=""transferFrom""];
""704_transfer"" -> ""704_transfer"";
""704_transfer"" -> ""704_whenNotPaused"";
""704_increaseApproval"" -> ""704_increaseApproval"";
""704_decreaseApproval"" -> ""704_decreaseApproval"";
""704_transferFrom"" -> ""704_whenNotPaused"";
""704_approve"" -> ""704_whenNotPaused"";
""704_approve"" -> ""704_approve"";
""704_decreaseApproval"" -> ""704_whenNotPaused"";
""704_transferFrom"" -> ""704_transferFrom"";
""704_increaseApproval"" -> ""704_whenNotPaused"";
}
"
0x723aaf922709819c25344b81901dd8a9c84c0b89.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint; MintableToken public token; uint32 public startTime; uint32 public endTime; address public wallet; uint public rate; uint public weiRaised; uint public soldTokens; uint public hardCap; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint value, uint amount); function Crowdsale(uint32 _startTime, uint32 _endTime, uint _rate, uint _hardCap, address _wallet, address _token) { require(_startTime >= now); require(_endTime >= _startTime); require(_rate > 0); require(_wallet != 0x0); require(_hardCap > _rate); token = MintableToken(_token); startTime = _startTime; endTime = _endTime; rate = _rate; hardCap = _hardCap; wallet = _wallet; }",0,"subgraph cluster_772_Crowdsale {
label=""Crowdsale"";
""772_postBuyTokens"" [label=""postBuyTokens""];
""772_hasStarted"" [label=""hasStarted""];
""772_fallback"" [label=""fallback""];
""772_getRate"" [label=""getRate""];
""772_forwardFunds"" [label=""forwardFunds""];
""772_validPurchase"" [label=""validPurchase""];
""772_Crowdsale"" [label=""Crowdsale""];
""772_buyTokens"" [label=""buyTokens""];
""772_hasEnded"" [label=""hasEnded""];
""772_buyTokens"" -> ""772_validPurchase"";
""772_fallback"" -> ""772_buyTokens"";
""772_buyTokens"" -> ""772_forwardFunds"";
""772_buyTokens"" -> ""772_getRate"";
""772_hasEnded"" -> ""772_getRate"";
""772_buyTokens"" -> ""772_postBuyTokens"";
}
"
0x9b481067ef9773d52efd0fb5b665a5dc0c8e1a68.sol,ERCDDAToken,"contract ERCDDAToken { address public owner; string public name; string public symbol; uint8 public decimals = 0; uint256 public totalSupply; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); mapping (address => uint256) public balanceOf; mapping (address => bool) public frozenAccount; function owned() public { owner = msg.sender; }",0,"subgraph cluster_267_ERCDDAToken {
label=""ERCDDAToken"";
""267_freezeAccount"" [label=""freezeAccount""];
""267__transfer"" [label=""_transfer""];
""267_constructor"" [label=""constructor""];
""267_owned"" [label=""owned""];
""267_burn"" [label=""burn""];
""267_transfer"" [label=""transfer""];
""267_mintToken"" [label=""mintToken""];
""267_transfer"" -> ""267__transfer"";
""267_mintToken"" -> ""267_onlyOwner"";
""267_freezeAccount"" -> ""267_onlyOwner"";
""267_burn"" -> ""267_onlyOwner"";
}
"
0x72112ee2f2cfb1f8494e78e0c3166a77fb6a2d24.sol,DSToken,"contract DSToken is DSTokenBase(5000000000000000000000000), DSStop { string public symbol = ; uint8 public decimals = 18; event Freeze(address indexed guy, uint wad); event Mint(address indexed guy, uint wad); event Burn(address indexed guy, uint wad); function approve(address guy) public stoppable returns (bool) { return super.approve(guy, uint(-1)); }",0,"subgraph cluster_488_DSTokenBase {
label=""DSTokenBase"";
""488_allowance"" [label=""allowance""];
""488_approve"" [label=""approve""];
""488_frozenFunds"" [label=""frozenFunds""];
""488_constructor"" [label=""constructor""];
""488_transfer"" [label=""transfer""];
""488_totalSupply"" [label=""totalSupply""];
""488_transferFrom"" [label=""transferFrom""];
""488_balanceOf"" [label=""balanceOf""];
""488_transfer"" -> ""488_transferFrom"";
""488_transferFrom"" -> ""488_sub"";
""488_transferFrom"" -> ""488_add"";
}
"
0x39e5bd6ae0f2aa9240d2ae7fbf49e36f05dd339f.sol,EthereumUnlimited,"contract EthereumUnlimited is ERC20,PoSTokenStandard,Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint public decimals = 18; uint public chainStartTime; uint public chainStartBlockNumber; uint public stakeStartTime; uint public stakeMinAge = 1 days; uint public stakeMaxAge = 365 days; uint public maxMintProofOfStake = 10**17; uint public totalSupply; uint public maxTotalSupply; uint public totalInitialSupply; uint public AirdropReward; uint public AirRewardmaxTotalSupply; uint public AirRewardTotalSupply; struct transferInStruct{ uint128 amount; uint64 time; }",0,"subgraph cluster_1399_EthereumUnlimited {
label=""EthereumUnlimited"";
""1399_ownerSetStakeStartTime"" [label=""ownerSetStakeStartTime""];
""1399_transferFrom"" [label=""transferFrom""];
""1399_checkPos"" [label=""checkPos""];
""1399_ownerBurnToken"" [label=""ownerBurnToken""];
""1399_getBlockNumber"" [label=""getBlockNumber""];
""1399_ResetAirdrop"" [label=""ResetAirdrop""];
""1399_getCoinAge"" [label=""getCoinAge""];
""1399_annualInterest"" [label=""annualInterest""];
""1399_batchTransfer"" [label=""batchTransfer""];
""1399_EthereumUnlimited"" [label=""EthereumUnlimited""];
""1399_mint"" [label=""mint""];
""1399_transfer"" [label=""transfer""];
""1399_getAirdrop"" [label=""getAirdrop""];
""1399_getProofOfStakeReward"" [label=""getProofOfStakeReward""];
""1399_coinAge"" [label=""coinAge""];
""1399_allowance"" [label=""allowance""];
""1399_balanceOf"" [label=""balanceOf""];
""1399_approve"" [label=""approve""];
""1399_getAirdrop"" -> ""1399_canGetAirdrop"";
""1399_batchTransfer"" -> ""1399_onlyOwner"";
""1399_getProofOfStakeReward"" -> ""1399_getCoinAge"";
""1399_ResetAirdrop"" -> ""1399_onlyOwner"";
""1399_transfer"" -> ""1399_onlyPayloadSize"";
""1399_transfer"" -> ""1399_mint"";
""1399_mint"" -> ""1399_getProofOfStakeReward"";
""1399_mint"" -> ""1399_canPoSMint"";
""1399_coinAge"" -> ""1399_getCoinAge"";
""1399_transferFrom"" -> ""1399_onlyPayloadSize"";
""1399_ownerBurnToken"" -> ""1399_onlyOwner"";
""1399_ownerSetStakeStartTime"" -> ""1399_onlyOwner"";
""1399_checkPos"" -> ""1399_getProofOfStakeReward"";
}
"
0xef266e135e0e11ec49c37f910c0a12dc99758323.sol,CC,"contract CC is SafeMath{ string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Freeze(address indexed from, uint256 value); event Unfreeze(address indexed from, uint256 value); function CC( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; owner = msg.sender; }",0,"subgraph cluster_603_CC {
label=""CC"";
""603_freeze"" [label=""freeze""];
""603_approve"" [label=""approve""];
""603_CC"" [label=""CC""];
""603_unfreeze"" [label=""unfreeze""];
""603_burn"" [label=""burn""];
""603_transferFrom"" [label=""transferFrom""];
""603_transfer"" [label=""transfer""];
""603_fallback"" [label=""fallback""];
""603_withdrawEther"" [label=""withdrawEther""];
""603_transfer"" -> ""603_safeSub"";
""603_freeze"" -> ""603_safeSub"";
""603_transferFrom"" -> ""603_safeAdd"";
""603_unfreeze"" -> ""603_safeAdd"";
""603_transfer"" -> ""603_safeAdd"";
""603_transferFrom"" -> ""603_safeSub"";
""603_burn"" -> ""603_safeSub"";
""603_unfreeze"" -> ""603_safeSub"";
""603_freeze"" -> ""603_safeAdd"";
}
"
0xd9fb596c0ffe9f9ed0ad130beac7a2b8126013e1.sol,HoldPlatformDapps,"contract HoldPlatformDapps is EthereumSmartContract { event onCashbackCode (address indexed hodler, address cashbackcode); event onAffiliateBonus (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 decimal, uint256 endtime); event onHoldplatform (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 decimal, uint256 endtime); event onUnlocktoken (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 decimal, uint256 endtime); event onUtilityfee (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 decimal, uint256 endtime); event onReceiveAirdrop (address indexed hodler, uint256 amount, uint256 datetime); event onAddContract (address indexed hodler, address indexed tokenAddress, uint256 percent, string tokenSymbol, uint256 amount, uint256 endtime); event onTokenPrice (address indexed hodler, address indexed tokenAddress, uint256 Currentprice, uint256 ETHprice, uint256 ATHprice, uint256 ATLprice, uint256 ICOprice, uint256 Aprice, uint256 endtime); event onHoldAirdrop (address indexed hodler, address indexed tokenAddress, uint256 HPMstatus, uint256 d1, uint256 d2, uint256 d3,uint256 endtime); event onHoldDeposit (address indexed hodler, address indexed tokenAddress, uint256 amount, uint256 endtime); event onHoldWithdraw (address indexed hodler, address indexed tokenAddress, uint256 amount, uint256 endtime); event onUtilitySetting (address indexed hodler, address indexed tokenAddress, address indexed pwt, uint256 amount, uint256 ustatus, uint256 endtime); event onUtilityStatus (address indexed hodler, address indexed tokenAddress, uint256 ustatus, uint256 endtime); event onUtilityBurn (address indexed hodler, address indexed tokenAddress, uint256 uamount, uint256 bamount, uint256 endtime); struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; bool cashbackstatus; uint256 tokendecimal; uint256 startime; }",0,"subgraph cluster_3420_HoldPlatformDapps {
label=""HoldPlatformDapps"";
""3420_UnlockToken4"" [label=""UnlockToken4""];
""3420_GetUserSafesLength"" [label=""GetUserSafesLength""];
""3420_Holdplatform_Airdrop"" [label=""Holdplatform_Airdrop""];
""3420_AddContractAddress"" [label=""AddContractAddress""];
""3420_UnlockToken2"" [label=""UnlockToken2""];
""3420_Airdrop"" [label=""Airdrop""];
""3420_tothe_moon"" [label=""tothe_moon""];
""3420_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""3420_GetSafe"" [label=""GetSafe""];
""3420_Utility_Status"" [label=""Utility_Status""];
""3420_HodlTokens3"" [label=""HodlTokens3""];
""3420_constructor"" [label=""constructor""];
""3420_TokenPrice"" [label=""TokenPrice""];
""3420_Holdplatform_Deposit"" [label=""Holdplatform_Deposit""];
""3420_div"" [label=""div""];
""3420_fallback"" [label=""fallback""];
""3420_Utility_fee"" [label=""Utility_fee""];
""3420_HodlTokens2"" [label=""HodlTokens2""];
""3420_Utility_Address"" [label=""Utility_Address""];
""3420_CashbackCode"" [label=""CashbackCode""];
""3420_add"" [label=""add""];
""3420_sub"" [label=""sub""];
""3420_Utility_Setting"" [label=""Utility_Setting""];
""3420_tothemoon"" [label=""tothemoon""];
""3420_Utility_Burn"" [label=""Utility_Burn""];
""3420_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""3420_UnlockToken3"" [label=""UnlockToken3""];
""3420_mul"" [label=""mul""];
""3420_PayToken"" [label=""PayToken""];
""3420_Holdplatform_Withdraw"" [label=""Holdplatform_Withdraw""];
""3420_Holdplatform"" [label=""Holdplatform""];
""3420_Unlocktoken"" [label=""Unlocktoken""];
""3420_UnlockToken2"" -> ""3420_div"";
""3420_PayToken"" -> ""3420_sub"";
""3420_Holdplatform"" -> ""3420_div"";
""3420_Holdplatform"" -> ""3420_HodlTokens2"";
""3420_HodlTokens2"" -> ""3420_mul"";
""3420_Utility_Burn"" -> ""3420_add"";
""3420_Utility_Burn"" -> ""3420_sub"";
""3420_UnlockToken2"" -> ""3420_PayToken"";
""3420_tothe_moon"" -> ""3420_Unlocktoken"";
""3420_UnlockToken4"" -> ""3420_sub"";
""3420_Utility_Burn"" -> ""3420_restricted"";
""3420_AddContractAddress"" -> ""3420_restricted"";
""3420_tothemoon"" -> ""3420_tothe_moon"";
""3420_AddContractAddress"" -> ""3420_mul"";
""3420_AddContractAddress"" -> ""3420_div"";
""3420_Holdplatform_Airdrop"" -> ""3420_restricted"";
""3420_Holdplatform_Deposit"" -> ""3420_restricted"";
""3420_Utility_Status"" -> ""3420_restricted"";
""3420_Holdplatform"" -> ""3420_sub"";
""3420_WithdrawAffiliate"" -> ""3420_add"";
""3420_tothe_moon"" -> ""3420_WithdrawAffiliate"";
""3420_UnlockToken3"" -> ""3420_add"";
""3420_Holdplatform"" -> ""3420_Airdrop"";
""3420_Utility_fee"" -> ""3420_add"";
""3420_UnlockToken2"" -> ""3420_UnlockToken3"";
""3420_TokenPrice"" -> ""3420_restricted"";
""3420_UnlockToken4"" -> ""3420_Airdrop"";
""3420_HodlTokens2"" -> ""3420_HodlTokens3"";
""3420_fallback"" -> ""3420_tothe_moon"";
""3420_HodlTokens3"" -> ""3420_mul"";
""3420_HodlTokens2"" -> ""3420_add"";
""3420_UnlockToken4"" -> ""3420_PayToken"";
""3420_Holdplatform_Withdraw"" -> ""3420_restricted"";
""3420_Unlocktoken"" -> ""3420_UnlockToken2"";
""3420_Airdrop"" -> ""3420_div"";
""3420_UnlockToken2"" -> ""3420_add"";
""3420_UnlockToken4"" -> ""3420_mul"";
""3420_Utility_fee"" -> ""3420_div"";
""3420_Holdplatform"" -> ""3420_add"";
""3420_UnlockToken2"" -> ""3420_Airdrop"";
""3420_WithdrawAffiliate"" -> ""3420_sub"";
""3420_Airdrop"" -> ""3420_sub"";
""3420_Utility_Setting"" -> ""3420_restricted"";
""3420_Utility_Address"" -> ""3420_restricted"";
""3420_UnlockToken3"" -> ""3420_mul"";
""3420_WithdrawAffiliate"" -> ""3420_Airdrop"";
""3420_UnlockToken4"" -> ""3420_div"";
""3420_PayToken"" -> ""3420_add"";
""3420_HodlTokens3"" -> ""3420_div"";
""3420_UnlockToken2"" -> ""3420_mul"";
""3420_Holdplatform_Deposit"" -> ""3420_add"";
""3420_HodlTokens2"" -> ""3420_sub"";
""3420_UnlockToken2"" -> ""3420_sub"";
""3420_Airdrop"" -> ""3420_mul"";
""3420_UnlockToken3"" -> ""3420_sub"";
""3420_HodlTokens2"" -> ""3420_div"";
""3420_UnlockToken3"" -> ""3420_div"";
""3420_Utility_Setting"" -> ""3420_mul"";
""3420_UnlockToken3"" -> ""3420_UnlockToken4"";
""3420_HodlTokens3"" -> ""3420_add"";
}
"
0x1eafd303c88b6cd638c77b40596de3dcf001b249.sol,BalanceSheet,contract BalanceSheet is ClaimableEx { using SafeMath for uint256; mapping (address => uint256) private balances; AddressSet private holderSet; constructor() public { holderSet = new AddressSet(); },0,"subgraph cluster_893_BalanceSheet {
label=""BalanceSheet"";
""893_setBalance"" [label=""setBalance""];
""893_getTheNumberOfHolders"" [label=""getTheNumberOfHolders""];
""893_constructor"" [label=""constructor""];
""893_getHolder"" [label=""getHolder""];
""893_setBalanceBatch"" [label=""setBalanceBatch""];
""893_addBalance"" [label=""addBalance""];
""893_subBalance"" [label=""subBalance""];
""893__checkHolderSet"" [label=""_checkHolderSet""];
""893_balanceOf"" [label=""balanceOf""];
""893_setBalance"" -> ""893_onlyOwner"";
""893_addBalance"" -> ""893_onlyOwner"";
""893_setBalanceBatch"" -> ""893_setBalance"";
""893_setBalanceBatch"" -> ""893_onlyOwner"";
""893_subBalance"" -> ""893_onlyOwner"";
""893_setBalance"" -> ""893__checkHolderSet"";
""893_addBalance"" -> ""893__checkHolderSet"";
}
"
0x449af6e747078caa6beb4f17ff18a6d94966e28e.sol,HYIPRETH,"contract HYIPRETH is Ownable{ using SafeMath for uint256; mapping (address => uint256) public investedETH; mapping (address => uint256) public lastInvest; mapping (address => uint256) public affiliateCommision; address public promoter1 = address(0x87eC20E83594Ca7708d1304F5a1087c796e7DC2B); address public promoter2 = address(0x1Ca4F7Be21270da59C0BD806888A82583Ae48511); address public fund_account = address(0xaC35385b3CB696213ecd5ae40fD844290329280f); address public lastPotWinner; uint256 public pot = 0; event PotWinner(address indexed beneficiary, uint256 amount ); constructor () public { _owner = address(0x91d6fE2Fce15f1a0c7dbE4D9877ce800a7f23c12); }",0,"subgraph cluster_929_HYIPRETH {
label=""HYIPRETH"";
""929_getProfitFromSender"" [label=""getProfitFromSender""];
""929_maximumProfitUser"" [label=""maximumProfitUser""];
""929_updatePromoter2"" [label=""updatePromoter2""];
""929_getProfit"" [label=""getProfit""];
""929_constructor"" [label=""constructor""];
""929_getInvested"" [label=""getInvested""];
""929_withdrawAffiliateCommision"" [label=""withdrawAffiliateCommision""];
""929_getBalance"" [label=""getBalance""];
""929_getBonus"" [label=""getBonus""];
""929_getAffiliateCommision"" [label=""getAffiliateCommision""];
""929_fallback"" [label=""fallback""];
""929_max"" [label=""max""];
""929_updatePromoter1"" [label=""updatePromoter1""];
""929_random"" [label=""random""];
""929_withdraw"" [label=""withdraw""];
""929_min"" [label=""min""];
""929_getTotalNumberOfDeposits"" [label=""getTotalNumberOfDeposits""];
""929_investETH"" [label=""investETH""];
""929_updateDev"" [label=""updateDev""];
""929_getProfit"" -> ""929_getBonus"";
""929_investETH"" -> ""929_random"";
""929_withdraw"" -> ""929_maximumProfitUser"";
""929_maximumProfitUser"" -> ""929_getInvested"";
""929_updatePromoter2"" -> ""929_onlyOwner"";
""929_getProfit"" -> ""929_maximumProfitUser"";
""929_updatePromoter1"" -> ""929_onlyOwner"";
""929_investETH"" -> ""929_getProfit"";
""929_getProfitFromSender"" -> ""929_getProfit"";
""929_getBonus"" -> ""929_getInvested"";
""929_withdraw"" -> ""929_getProfit"";
""929_updateDev"" -> ""929_onlyOwner"";
}
"
0x07efd6e390222a45af4a25d0ce31c7710bf605bd.sol,SSDTokenSwap,"contract SSDTokenSwap is Guarded, Ownable { using SafeMath for uint256; mapping(address => uint256) contributions; uint256 contribCount = 0; string public version = ; uint256 public StartTime = 1506009600; uint256 public EndTime = 1506528000; uint256 public totalEtherCap = 200222 ether; uint256 public weiRaised = 0; uint256 public minContrib = 0.05 ether; address public wallet = 0x2E0fc8E431cc1b4721698c9e82820D7A71B88400; event Contribution(address indexed _contributor, uint256 _amount); function SSDTokenSwap() { }",0,"subgraph cluster_412_SSDTokenSwap {
label=""SSDTokenSwap"";
""412_forwardFunds"" [label=""forwardFunds""];
""412_validPurchase"" [label=""validPurchase""];
""412_setWallet"" [label=""setWallet""];
""412_hasEnded"" [label=""hasEnded""];
""412_setWeiRaised"" [label=""setWeiRaised""];
""412_processContributions"" [label=""processContributions""];
""412_setEndTime"" [label=""setEndTime""];
""412_fallback"" [label=""fallback""];
""412_SSDTokenSwap"" [label=""SSDTokenSwap""];
""412_setMinContribution"" [label=""setMinContribution""];
""412_isActive"" [label=""isActive""];
""412_setStartTime"" [label=""setStartTime""];
""412_processContributions"" -> ""412_validPurchase"";
""412_setStartTime"" -> ""412_onlyOwner"";
""412_setWeiRaised"" -> ""412_onlyOwner"";
""412_setWallet"" -> ""412_onlyOwner"";
""412_setEndTime"" -> ""412_onlyOwner"";
""412_fallback"" -> ""412_processContributions"";
""412_processContributions"" -> ""412_forwardFunds"";
""412_setMinContribution"" -> ""412_onlyOwner"";
}
"
0x70052a651eec65f98925e845820a0aa5749b033d.sol,ATxAssetProxy,"contract ATxAssetProxy is ERC20, Object, ServiceAllowance { using SafeMath for uint; event UpgradeProposal(address newVersion); address latestVersion; Platform public platform; bytes32 public smbl; string public name; modifier onlyPlatform() { if (msg.sender == address(platform)) { _; }",0,"subgraph cluster_1309_ATxAssetProxy {
label=""ATxAssetProxy"";
""1309_init"" [label=""init""];
""1309_approve"" [label=""approve""];
""1309_proposeUpgrade"" [label=""proposeUpgrade""];
""1309_decimals"" [label=""decimals""];
""1309_fallback"" [label=""fallback""];
""1309_stringToBytes32"" [label=""stringToBytes32""];
""1309_totalSupply"" [label=""totalSupply""];
""1309__getAsset"" [label=""_getAsset""];
""1309_transfer"" [label=""transfer""];
""1309___transferWithReference"" [label=""__transferWithReference""];
""1309_allowance"" [label=""allowance""];
""1309_transferWithReference"" [label=""transferWithReference""];
""1309_emitTransfer"" [label=""emitTransfer""];
""1309___approve"" [label=""__approve""];
""1309_platform"" [label=""platform""];
""1309_emitApprove"" [label=""emitApprove""];
""1309_isTransferAllowed"" [label=""isTransferAllowed""];
""1309___transferFromWithReference"" [label=""__transferFromWithReference""];
""1309_smbl"" [label=""smbl""];
""1309_transferFrom"" [label=""transferFrom""];
""1309__transferWithReference"" [label=""_transferWithReference""];
""1309_balanceOf"" [label=""balanceOf""];
""1309_getLatestVersion"" [label=""getLatestVersion""];
""1309_transferFrom"" -> ""1309__getAsset"";
""1309_approve"" -> ""1309__getAsset"";
""1309__getAsset"" -> ""1309_getLatestVersion"";
""1309_transferWithReference"" -> ""1309__transferWithReference"";
""1309_emitTransfer"" -> ""1309_onlyPlatform"";
""1309_proposeUpgrade"" -> ""1309_onlyAssetOwner"";
""1309___transferWithReference"" -> ""1309_onlyAccess"";
""1309_init"" -> ""1309_stringToBytes32"";
""1309___approve"" -> ""1309_onlyAccess"";
""1309_fallback"" -> ""1309__getAsset"";
""1309_emitApprove"" -> ""1309_onlyPlatform"";
""1309___transferFromWithReference"" -> ""1309_onlyAccess"";
""1309__transferWithReference"" -> ""1309__getAsset"";
""1309_transfer"" -> ""1309__transferWithReference"";
}
"
0x94588247e31dd13c6fbecda4cea7b91533b57246.sol,BurnableToken,"contract BurnableToken is BasicToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { _burn(msg.sender, _value); }",0,"subgraph cluster_898_StandardBurnableToken {
label=""StandardBurnableToken"";
""898_burnFrom"" [label=""burnFrom""];
""898_burnFrom"" -> ""898__burn"";
}
"
0x1903d83dedefedaf6cfee5828e7e66ae6a2e1d97.sol,BatCave,contract BatCave is Pausable { uint256 public EGGS_TO_HATCH_1BAT = 86400; uint256 public STARTING_BAT = 300; uint256 PSN = 10000; uint256 PSNH = 5000; address public batman; address public superman; address public aquaman; mapping(address => uint256) public hatcheryBat; mapping(address => uint256) public claimedEggs; mapping(address => uint256) public lastHatch; mapping(address => address) public referrals; mapping (address => uint256) realRef; uint256 public marketEggs; function BatCave() public{ paused = false; },0,"subgraph cluster_958_BatCave {
label=""BatCave"";
""958_getMyBat"" [label=""getMyBat""];
""958_devFee"" [label=""devFee""];
""958_calculateEggBuy"" [label=""calculateEggBuy""];
""958_seedMarket"" [label=""seedMarket""];
""958_calculateEggBuySimple"" [label=""calculateEggBuySimple""];
""958_sellEggs"" [label=""sellEggs""];
""958_hatchEggs"" [label=""hatchEggs""];
""958_getEggsSinceLastHatch"" [label=""getEggsSinceLastHatch""];
""958_calculateTrade"" [label=""calculateTrade""];
""958_setSuperman"" [label=""setSuperman""];
""958_setAquaman"" [label=""setAquaman""];
""958_getMyEggs"" [label=""getMyEggs""];
""958_calculateEggSell"" [label=""calculateEggSell""];
""958_withdraw"" [label=""withdraw""];
""958_buyEggs"" [label=""buyEggs""];
""958_setBatman"" [label=""setBatman""];
""958_setRealRef"" [label=""setRealRef""];
""958_BatCave"" [label=""BatCave""];
""958_min"" [label=""min""];
""958_getBalance"" [label=""getBalance""];
""958_getFreeBat"" [label=""getFreeBat""];
""958_calculateEggBuySimple"" -> ""958_calculateEggBuy"";
""958_sellEggs"" -> ""958_devFee"";
""958_setAquaman"" -> ""958_onlyOwner"";
""958_getFreeBat"" -> ""958_whenNotPaused"";
""958_hatchEggs"" -> ""958_whenNotPaused"";
""958_buyEggs"" -> ""958_devFee"";
""958_getMyEggs"" -> ""958_getEggsSinceLastHatch"";
""958_hatchEggs"" -> ""958_getMyEggs"";
""958_sellEggs"" -> ""958_whenNotPaused"";
""958_buyEggs"" -> ""958_whenNotPaused"";
""958_calculateEggBuy"" -> ""958_calculateTrade"";
""958_withdraw"" -> ""958_onlyDCFamily"";
""958_calculateEggSell"" -> ""958_calculateTrade"";
""958_sellEggs"" -> ""958_getMyEggs"";
""958_setBatman"" -> ""958_onlyOwner"";
""958_getEggsSinceLastHatch"" -> ""958_min"";
""958_setSuperman"" -> ""958_onlyOwner"";
""958_sellEggs"" -> ""958_calculateEggSell"";
""958_setRealRef"" -> ""958_onlyOwner"";
""958_buyEggs"" -> ""958_calculateEggBuy"";
}
"
0xe344757aea83ac838f22e757991489993e5d3760.sol,BdpImageStorage,contract BdpImageStorage is BdpBase { using SafeMath for uint256; struct Image { address owner; uint256 regionId; uint256 currentRegionId; mapping(uint16 => uint256[1000]) data; mapping(uint16 => uint16) dataLength; uint16 partsCount; uint16 width; uint16 height; uint16 imageDescriptor; uint256 blurredAt; },0,"subgraph cluster_1540_BdpImageStorage {
label=""BdpImageStorage"";
""1540_getLastImageId"" [label=""getLastImageId""];
""1540_imageUploadComplete"" [label=""imageUploadComplete""];
""1540_deleteImage"" [label=""deleteImage""];
""1540_setImageDataLength"" [label=""setImageDataLength""];
""1540_getImageOwner"" [label=""getImageOwner""];
""1540_setImageBlurredAt"" [label=""setImageBlurredAt""];
""1540_getImageCurrentRegionId"" [label=""getImageCurrentRegionId""];
""1540_getNextImageId"" [label=""getNextImageId""];
""1540_getImageDataLength"" [label=""getImageDataLength""];
""1540_setImageHeight"" [label=""setImageHeight""];
""1540_setImagePartsCount"" [label=""setImagePartsCount""];
""1540_createImage"" [label=""createImage""];
""1540_setImageWidth"" [label=""setImageWidth""];
""1540_getImageDescriptor"" [label=""getImageDescriptor""];
""1540_getImageBlurredAt"" [label=""getImageBlurredAt""];
""1540_getImageRegionId"" [label=""getImageRegionId""];
""1540_imageExists"" [label=""imageExists""];
""1540_getImageWidth"" [label=""getImageWidth""];
""1540_setImageCurrentRegionId"" [label=""setImageCurrentRegionId""];
""1540_setImageOwner"" [label=""setImageOwner""];
""1540_getImageData"" [label=""getImageData""];
""1540_setImageDescriptor"" [label=""setImageDescriptor""];
""1540_setImageData"" [label=""setImageData""];
""1540_BdpImageStorage"" [label=""BdpImageStorage""];
""1540_getImageHeight"" [label=""getImageHeight""];
""1540_getImagePartsCount"" [label=""getImagePartsCount""];
""1540_setImageRegionId"" [label=""setImageRegionId""];
""1540_getImageRegionId"" -> ""1540_imageExists"";
""1540_getImageData"" -> ""1540_imageExists"";
""1540_getImageDataLength"" -> ""1540_imageExists"";
""1540_setImageOwner"" -> ""1540_storageAccessControl"";
""1540_setImageRegionId"" -> ""1540_storageAccessControl"";
""1540_setImageRegionId"" -> ""1540_imageExists"";
""1540_setImageWidth"" -> ""1540_imageExists"";
""1540_getImagePartsCount"" -> ""1540_imageExists"";
""1540_setImageData"" -> ""1540_storageAccessControl"";
""1540_setImageData"" -> ""1540_imageExists"";
""1540_getImageCurrentRegionId"" -> ""1540_imageExists"";
""1540_getImageWidth"" -> ""1540_imageExists"";
""1540_setImageWidth"" -> ""1540_storageAccessControl"";
""1540_setImagePartsCount"" -> ""1540_imageExists"";
""1540_createImage"" -> ""1540_storageAccessControl"";
""1540_imageUploadComplete"" -> ""1540_imageExists"";
""1540_createImage"" -> ""1540_getNextImageId"";
""1540_setImageDataLength"" -> ""1540_imageExists"";
""1540_getNextImageId"" -> ""1540_storageAccessControl"";
""1540_setImagePartsCount"" -> ""1540_storageAccessControl"";
""1540_setImageOwner"" -> ""1540_imageExists"";
""1540_deleteImage"" -> ""1540_imageExists"";
""1540_setImageHeight"" -> ""1540_storageAccessControl"";
""1540_setImageDescriptor"" -> ""1540_storageAccessControl"";
""1540_getImageOwner"" -> ""1540_imageExists"";
""1540_getImageDescriptor"" -> ""1540_imageExists"";
""1540_setImageDataLength"" -> ""1540_storageAccessControl"";
""1540_setImageBlurredAt"" -> ""1540_storageAccessControl"";
""1540_getImageHeight"" -> ""1540_imageExists"";
""1540_setImageCurrentRegionId"" -> ""1540_storageAccessControl"";
""1540_setImageCurrentRegionId"" -> ""1540_imageExists"";
""1540_deleteImage"" -> ""1540_storageAccessControl"";
""1540_setImageDescriptor"" -> ""1540_imageExists"";
""1540_setImageHeight"" -> ""1540_imageExists"";
}
"
0xa5bd843ea5fbf56e1579f7d99fb68efe4e07185f.sol,TokenERC20,"contract TokenERC20 { string public name ; string public symbol ; uint8 public decimals = 18; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event AddSupply(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; owner = msg.sender; }",0,"subgraph cluster_549_TokenERC20 {
label=""TokenERC20"";
""549_burnFrom"" [label=""burnFrom""];
""549_approve"" [label=""approve""];
""549__transfer"" [label=""_transfer""];
""549_transfer"" [label=""transfer""];
""549_burn"" [label=""burn""];
""549_decreaseApproval"" [label=""decreaseApproval""];
""549_transferFrom"" [label=""transferFrom""];
""549_TokenERC20"" [label=""TokenERC20""];
""549_increaseApproval"" [label=""increaseApproval""];
""549_addSupply"" [label=""addSupply""];
""549_approveAndCall"" [label=""approveAndCall""];
""549_approveAndCall"" -> ""549_approve"";
""549_transfer"" -> ""549__transfer"";
""549_transferFrom"" -> ""549__transfer"";
}
"
0x58054e51c19fa796443043418be91032b99992a3.sol,iGniter,contract iGniter is SafeMath { struct serPayment { uint unlockedTime; uint256 unlockedBlockNumber; },0,"subgraph cluster_1077_iGniter {
label=""iGniter"";
""1077_transferFrom"" [label=""transferFrom""];
""1077_balanceOf"" [label=""balanceOf""];
""1077_updateCost"" [label=""updateCost""];
""1077_servicePayment"" [label=""servicePayment""];
""1077_allowance"" [label=""allowance""];
""1077_assignInitialAddresses"" [label=""assignInitialAddresses""];
""1077_symbol"" [label=""symbol""];
""1077_currentBlock"" [label=""currentBlock""];
""1077_initialiGnSupply"" [label=""initialiGnSupply""];
""1077_completeBountyAddresses"" [label=""completeBountyAddresses""];
""1077_name"" [label=""name""];
""1077_totalSupply"" [label=""totalSupply""];
""1077_minedTotalSupply"" [label=""minedTotalSupply""];
""1077_blockDiff"" [label=""blockDiff""];
""1077_PaymentStatusBlockNum"" [label=""PaymentStatusBlockNum""];
""1077_PaymentStatusTimeStamp"" [label=""PaymentStatusTimeStamp""];
""1077_assignBountyAddresses"" [label=""assignBountyAddresses""];
""1077_transfer"" [label=""transfer""];
""1077_approve"" [label=""approve""];
""1077_iGniter"" [label=""iGniter""];
""1077_decimals"" [label=""decimals""];
""1077_isContract"" [label=""isContract""];
""1077_burn"" [label=""burn""];
""1077_completeBountyAddresses"" -> ""1077_isOwner"";
""1077_assignBountyAddresses"" -> ""1077_isOwner"";
""1077_updateCost"" -> ""1077_isOwner"";
""1077_transfer"" -> ""1077_isContract"";
""1077_assignInitialAddresses"" -> ""1077_isOwner"";
}
"
0x841d34af2018d9487199678edd47dd46b140690b.sol,BURNToken,"contract BURNToken is ERC20Interface { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1 * 10**uint(decimals); balances[msg.sender] = _totalSupply; emit Transfer(address(0), msg.sender, _totalSupply); }",0,"subgraph cluster_496_BURNToken {
label=""BURNToken"";
""496_fallback"" [label=""fallback""];
""496_constructor"" [label=""constructor""];
""496_burn"" [label=""burn""];
""496_transfer"" [label=""transfer""];
""496_approve"" [label=""approve""];
""496_balanceOf"" [label=""balanceOf""];
""496_approveAndCall"" [label=""approveAndCall""];
""496_allowance"" [label=""allowance""];
""496_transferFrom"" [label=""transferFrom""];
""496_totalSupply"" [label=""totalSupply""];
""496_fallback"" -> ""496_burn"";
}
"
0x4045253edc2986c1c4800c3ce0cf0f5fb3c683e5.sol,BIMGToken,"contract BIMGToken is StandardToken, Pausable { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; struct LockToken{ uint256 amount; uint32 time; }",0,"subgraph cluster_912_BIMGToken {
label=""BIMGToken"";
""912_getLockAmount"" [label=""getLockAmount""];
""912_transfer"" [label=""transfer""];
""912_transferFrom"" [label=""transferFrom""];
""912_canUseLock"" [label=""canUseLock""];
""912_getLockByIdx"" [label=""getLockByIdx""];
""912_setLockAdmin"" [label=""setLockAdmin""];
""912_getLockListLen"" [label=""getLockListLen""];
""912_constructor"" [label=""constructor""];
""912_transferWithLock"" [label=""transferWithLock""];
""912_setLockAdmin"" -> ""912_onlyOwner"";
""912_transferFrom"" -> ""912_transferFrom"";
""912_transferWithLock"" -> ""912_whenNotPaused"";
""912_transfer"" -> ""912_transfer"";
""912_transferFrom"" -> ""912_getLockAmount"";
""912_transferWithLock"" -> ""912_transfer"";
""912_transfer"" -> ""912_whenNotPaused"";
""912_transfer"" -> ""912_getLockAmount"";
""912_transferFrom"" -> ""912_whenNotPaused"";
}
"
0xa21c9a3ae47103b1fd1dfa04766c4d00c19e1ff6.sol,CryptoOscarsToken,"contract CryptoOscarsToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",0,"subgraph cluster_930_CryptoOscarsToken {
label=""CryptoOscarsToken"";
""930_approve"" [label=""approve""];
""930_balanceOf"" [label=""balanceOf""];
""930_transfer"" [label=""transfer""];
""930_ownerOf"" [label=""ownerOf""];
""930_payout"" [label=""payout""];
""930_takeOwnership"" [label=""takeOwnership""];
""930_totalSupply"" [label=""totalSupply""];
""930__createMovie"" [label=""_createMovie""];
""930_setCOO"" [label=""setCOO""];
""930_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""930_setCEO"" [label=""setCEO""];
""930__payout"" [label=""_payout""];
""930_tokensOfOwner"" [label=""tokensOfOwner""];
""930__addressNotNull"" [label=""_addressNotNull""];
""930_priceOf"" [label=""priceOf""];
""930_createContractMovie"" [label=""createContractMovie""];
""930__transfer"" [label=""_transfer""];
""930_name"" [label=""name""];
""930_purchase"" [label=""purchase""];
""930__approved"" [label=""_approved""];
""930_createPromoMovie"" [label=""createPromoMovie""];
""930_symbol"" [label=""symbol""];
""930__owns"" [label=""_owns""];
""930_transferFrom"" [label=""transferFrom""];
""930_getMovie"" [label=""getMovie""];
""930_implementsERC721"" [label=""implementsERC721""];
""930_transferFrom"" -> ""930__addressNotNull"";
""930_takeOwnership"" -> ""930__approved"";
""930_transferFrom"" -> ""930__approved"";
""930_createContractMovie"" -> ""930_onlyCOO"";
""930_setCEO"" -> ""930_onlyCEO"";
""930_purchase"" -> ""930__transfer"";
""930_purchase"" -> ""930__addressNotNull"";
""930_payout"" -> ""930_onlyCLevel"";
""930__createMovie"" -> ""930__transfer"";
""930_payout"" -> ""930__payout"";
""930_createContractMovie"" -> ""930__createMovie"";
""930_createPromoMovie"" -> ""930_onlyCOO"";
""930_tokensOfOwner"" -> ""930_balanceOf"";
""930_createPromoMovie"" -> ""930__createMovie"";
""930_takeOwnership"" -> ""930__addressNotNull"";
""930_setCOO"" -> ""930_onlyCEO"";
""930_transferFrom"" -> ""930__transfer"";
""930_transferFrom"" -> ""930__owns"";
""930_tokensOfOwner"" -> ""930_totalSupply"";
""930_transfer"" -> ""930__owns"";
""930_takeOwnership"" -> ""930__transfer"";
""930_approve"" -> ""930__owns"";
""930_transfer"" -> ""930__addressNotNull"";
""930_transfer"" -> ""930__transfer"";
}
"
0xd0f1a56f4bd5a9b992c91624b0d405a47cb251e6.sol,AirDrop,"contract AirDrop is OwnableWithAdmin { using SafeMath for uint256; uint256 private constant DECIMALFACTOR = 10**uint256(18); event FundsBooked(address backer, uint256 amount, bool isContribution); event LogTokenClaimed(address indexed _recipient, uint256 _amountClaimed, uint256 _totalAllocated, uint256 _grandTotalClaimed); event LogNewAllocation(address indexed _recipient, uint256 _totalAllocated); event LogRemoveAllocation(address indexed _recipient, uint256 _tokenAmountRemoved); event LogOwnerSetAllocation(address indexed _recipient, uint256 _totalAllocated); event LogTest(); uint256 public grandTotalClaimed = 0; ERC20 public token; uint256 public tokensTotal = 0; uint256 public hardCap = 0; mapping (address => uint256) public allocationsTotal; mapping (address => uint256) public totalClaimed; mapping(address => bool) public buyers; mapping(address => bool) public buyersReceived; address[] public addresses; constructor(ERC20 _token) public { require(_token != address(0)); token = _token; }",0,"subgraph cluster_839_AirDrop {
label=""AirDrop"";
""839_refundTokens"" [label=""refundTokens""];
""839_distributeManyTokens"" [label=""distributeManyTokens""];
""839_withdrawTokens"" [label=""withdrawTokens""];
""839_setAllocation"" [label=""setAllocation""];
""839_fallback"" [label=""fallback""];
""839_getListOfAddresses"" [label=""getListOfAddresses""];
""839__setAllocation"" [label=""_setAllocation""];
""839_removeAllocation"" [label=""removeAllocation""];
""839_returnTokens"" [label=""returnTokens""];
""839_checkAvailableTokens"" [label=""checkAvailableTokens""];
""839_distributeTokens"" [label=""distributeTokens""];
""839_setManyAllocations"" [label=""setManyAllocations""];
""839__validateHardCap"" [label=""_validateHardCap""];
""839_constructor"" [label=""constructor""];
""839_removeAllocation"" -> ""839_onlyOwner"";
""839_setManyAllocations"" -> ""839_onlyOwnerOrAdmin"";
""839_setAllocation"" -> ""839_onlyOwnerOrAdmin"";
""839_setManyAllocations"" -> ""839_setAllocation"";
""839_distributeManyTokens"" -> ""839_onlyOwnerOrAdmin"";
""839_refundTokens"" -> ""839_onlyOwner"";
""839_setAllocation"" -> ""839__setAllocation"";
""839_setAllocation"" -> ""839__validateHardCap"";
""839_distributeManyTokens"" -> ""839_distributeTokens"";
""839_withdrawTokens"" -> ""839_distributeTokens"";
""839_returnTokens"" -> ""839_onlyOwner"";
""839_getListOfAddresses"" -> ""839_onlyOwnerOrAdmin"";
}
"
0xd4c2a5c4be6ec37a84a78382c6c7368651d8b443.sol,Operable,contract Operable is Pausable { event OperatorAdded(address indexed account); event OperatorRemoved(address indexed account); mapping (address => bool) private _operators; constructor() public { _addOperator(msg.sender); },0,"subgraph cluster_291_Operable {
label=""Operable"";
""291_addOperator"" [label=""addOperator""];
""291_isOperator"" [label=""isOperator""];
""291__addOperator"" [label=""_addOperator""];
""291_removeOperator"" [label=""removeOperator""];
""291__removeOperator"" [label=""_removeOperator""];
""291_constructor"" [label=""constructor""];
""291_addOperator"" -> ""291_onlyOwner"";
""291_addOperator"" -> ""291__addOperator"";
""291_removeOperator"" -> ""291__removeOperator"";
""291_removeOperator"" -> ""291_onlyOwner"";
""291_constructor"" -> ""291__addOperator"";
}
"
0x0da29f924c83b623ea25aa95eedcba060b8d7e12.sol,VeloxCrowdsale,"contract VeloxCrowdsale is Ownable { using SafeMath for uint256; ERC20 public token; uint256 public startTime; uint256 public endTime; uint256 public rate; uint256 public cap; address public wallet; uint256 public sold; constructor( uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, address _wallet, ERC20 _token ) public { require(_startTime >= block.timestamp && _endTime >= _startTime); require(_rate > 0); require(_cap > 0); require(_wallet != address(0)); require(_token != address(0)); startTime = _startTime; endTime = _endTime; rate = _rate; cap = _cap; wallet = _wallet; token = _token; }",0,"subgraph cluster_545_VeloxCrowdsale {
label=""VeloxCrowdsale"";
""545_capReached"" [label=""capReached""];
""545_forwardFunds"" [label=""forwardFunds""];
""545_fallback"" [label=""fallback""];
""545_constructor"" [label=""constructor""];
""545_buyTokens"" [label=""buyTokens""];
""545_finalize"" [label=""finalize""];
""545_fallback"" -> ""545_buyTokens"";
""545_finalize"" -> ""545_onlyOwner"";
""545_forwardFunds"" -> ""545_onlyOwner"";
}
"
0x89b5eaec2702ab0ff33ca397b3e66c7d925d5144.sol,Soccer,"contract Soccer { using SafeMath for uint256; event Birth(uint256 tokenId, uint256 startPrice); event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner); event Transfer(address indexed from, address indexed to, uint256 tokenId); event Approval(address indexed owner, address indexed approved, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; struct Token { address owner; uint256 price; }",0,"subgraph cluster_1466_Soccer {
label=""Soccer"";
""1466__handle"" [label=""_handle""];
""1466_getInitialPriceOfToken"" [label=""getInitialPriceOfToken""];
""1466_symbol"" [label=""symbol""];
""1466__approved"" [label=""_approved""];
""1466_transfer"" [label=""transfer""];
""1466_unlockPriceChange"" [label=""unlockPriceChange""];
""1466_setCOO"" [label=""setCOO""];
""1466_Soccer"" [label=""Soccer""];
""1466__owns"" [label=""_owns""];
""1466_changePrice"" [label=""changePrice""];
""1466_ownerOf"" [label=""ownerOf""];
""1466__addressNotNull"" [label=""_addressNotNull""];
""1466__transfer"" [label=""_transfer""];
""1466_lockPriceChange"" [label=""lockPriceChange""];
""1466_getNextPrice"" [label=""getNextPrice""];
""1466_isContract"" [label=""isContract""];
""1466_getTotalSupply"" [label=""getTotalSupply""];
""1466_payout"" [label=""payout""];
""1466_takeOwnership"" [label=""takeOwnership""];
""1466_setCEO"" [label=""setCEO""];
""1466_buyToken"" [label=""buyToken""];
""1466_createPromoCollectible"" [label=""createPromoCollectible""];
""1466_approve"" [label=""approve""];
""1466__payout"" [label=""_payout""];
""1466_priceOf"" [label=""priceOf""];
""1466_name"" [label=""name""];
""1466_tokensOfOwner"" [label=""tokensOfOwner""];
""1466_balanceOf"" [label=""balanceOf""];
""1466_implementsERC721"" [label=""implementsERC721""];
""1466_transferFrom"" [label=""transferFrom""];
""1466__addLastOwner"" [label=""_addLastOwner""];
""1466_getToken"" [label=""getToken""];
""1466_buyToken"" -> ""1466__handle"";
""1466_buyToken"" -> ""1466_isContract"";
""1466_getToken"" -> ""1466_getInitialPriceOfToken"";
""1466_takeOwnership"" -> ""1466__approved"";
""1466_tokensOfOwner"" -> ""1466_getTotalSupply"";
""1466_changePrice"" -> ""1466__owns"";
""1466_createPromoCollectible"" -> ""1466_getInitialPriceOfToken"";
""1466_createPromoCollectible"" -> ""1466__transfer"";
""1466_takeOwnership"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__transfer"";
""1466_createPromoCollectible"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466__addLastOwner"";
""1466_payout"" -> ""1466__payout"";
""1466_setCOO"" -> ""1466_onlyCEO"";
""1466_priceOf"" -> ""1466_getInitialPriceOfToken"";
""1466_setCEO"" -> ""1466_onlyCEO"";
""1466_unlockPriceChange"" -> ""1466_onlyCLevel"";
""1466_transferFrom"" -> ""1466__owns"";
""1466_lockPriceChange"" -> ""1466_onlyCLevel"";
""1466_payout"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466_getNextPrice"";
""1466_transferFrom"" -> ""1466__addressNotNull"";
""1466_transferFrom"" -> ""1466__approved"";
""1466_transfer"" -> ""1466__owns"";
""1466_takeOwnership"" -> ""1466__transfer"";
""1466_approve"" -> ""1466__owns"";
""1466_transferFrom"" -> ""1466__transfer"";
""1466_tokensOfOwner"" -> ""1466_balanceOf"";
""1466_getToken"" -> ""1466_getNextPrice"";
""1466_buyToken"" -> ""1466_getInitialPriceOfToken"";
}
"
0xef02c45c5913629dd12e7a9446455049775eec32.sol,RuletkaIo,"contract RuletkaIo { event partyOver(uint256 roomId, address victim, address[] winners); event newPlayer(uint256 roomId, address player); event fullRoom(uint256 roomId); event roomRefunded(uint256 _roomId, address[] refundedPlayers); address CTO; address CEO; Room[] private allRooms; function () public payable {}",0,"subgraph cluster_648_RuletkaIo {
label=""RuletkaIo"";
""648_enter"" [label=""enter""];
""648_payout"" [label=""payout""];
""648_setCEO"" [label=""setCEO""];
""648_getRoom"" [label=""getRoom""];
""648_fallback"" [label=""fallback""];
""648_random"" [label=""random""];
""648_distributeFunds"" [label=""distributeFunds""];
""648_setCTO"" [label=""setCTO""];
""648_enterWithReferral"" [label=""enterWithReferral""];
""648_refundPlayersInRoom"" [label=""refundPlayersInRoom""];
""648_createRoom"" [label=""createRoom""];
""648_RuletkaIo"" [label=""RuletkaIo""];
""648__payout"" [label=""_payout""];
""648_executeRoom"" [label=""executeRoom""];
""648_setCTO"" -> ""648_onlyCTO"";
""648_executeRoom"" -> ""648_random"";
""648_payout"" -> ""648_onlyCTO"";
""648_payout"" -> ""648__payout"";
""648_refundPlayersInRoom"" -> ""648_onlyCTO"";
""648_createRoom"" -> ""648_onlyCTO"";
""648_executeRoom"" -> ""648_distributeFunds"";
""648_enter"" -> ""648_executeRoom"";
""648_enterWithReferral"" -> ""648_executeRoom"";
""648_setCEO"" -> ""648_onlyCTO"";
}
"
0xaa652d53909b01c5a6b8e7cd814f9adea18c08f7.sol,TCRSale,"contract TCRSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; TCRToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",0,"subgraph cluster_1585_TCRSale {
label=""TCRSale"";
""1585_convertToMiniTcr"" [label=""convertToMiniTcr""];
""1585_terminate"" [label=""terminate""];
""1585_changeEndTime"" [label=""changeEndTime""];
""1585_safeWithdrawal"" [label=""safeWithdrawal""];
""1585_setRate"" [label=""setRate""];
""1585_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1585_changeStartTime"" [label=""changeStartTime""];
""1585_checkFundingGoal"" [label=""checkFundingGoal""];
""1585_checkFundingCap"" [label=""checkFundingCap""];
""1585_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1585_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1585_TCRSale"" [label=""TCRSale""];
""1585_fallback"" [label=""fallback""];
""1585_currentTime"" [label=""currentTime""];
""1585_fallback"" -> ""1585_whenNotPaused"";
""1585_ownerAllocateTokens"" -> ""1585_checkFundingGoal"";
""1585_fallback"" -> ""1585_beforeDeadline"";
""1585_fallback"" -> ""1585_checkFundingCap"";
""1585_ownerUnlockFund"" -> ""1585_onlyOwner"";
""1585_ownerSafeWithdrawal"" -> ""1585_onlyOwner"";
""1585_fallback"" -> ""1585_nonReentrant"";
""1585_ownerAllocateTokens"" -> ""1585_nonReentrant"";
""1585_ownerAllocateTokens"" -> ""1585_onlyOwner"";
""1585_setRate"" -> ""1585_onlyOwner"";
""1585_TCRSale"" -> ""1585_setRate"";
""1585_changeEndTime"" -> ""1585_onlyOwner"";
""1585_safeWithdrawal"" -> ""1585_afterDeadline"";
""1585_ownerAllocateTokens"" -> ""1585_checkFundingCap"";
""1585_fallback"" -> ""1585_checkFundingGoal"";
""1585_terminate"" -> ""1585_onlyOwner"";
""1585_ownerUnlockFund"" -> ""1585_afterDeadline"";
""1585_fallback"" -> ""1585_afterStartTime"";
""1585_changeStartTime"" -> ""1585_onlyOwner"";
""1585_safeWithdrawal"" -> ""1585_nonReentrant"";
""1585_ownerSafeWithdrawal"" -> ""1585_nonReentrant"";
""1585_fallback"" -> ""1585_saleNotClosed"";
}
"
0xa555042f07bfd19e251cc21c84c35725a47d4c66.sol,LambdaLock,contract LambdaLock { using SafeMath for uint256; Lambda internal LambdaToken; uint256 internal genesisTime= 1545872400; uint256 internal ONE_MONTHS = 2592000; address internal beneficiaryAddress; struct Claim { uint256 pct; uint256 delay; bool claimed; },0,"subgraph cluster_761_LambdaLock {
label=""LambdaLock"";
""761_getBeneficiary"" [label=""getBeneficiary""];
""761_getTotalClaimable"" [label=""getTotalClaimable""];
""761_claim"" [label=""claim""];
}
"
0x28152e02be1e8af3bec836d434798aec1143d7ee.sol,GOMO_NETWORK,"contract GOMO_NETWORK is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 50 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 40 * 1 days; uint256 public totalSupply = 35000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 500000e18; uint public target0drop = 100000; uint public progress0drop = 0; address multisig = 0x09E69EF1029F9870225942E153D25B12E263394C; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1263_GOMO_NETWORK {
label=""GOMO_NETWORK"";
""1263_withdraw"" [label=""withdraw""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_transfer"" [label=""transfer""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_distr"" [label=""distr""];
""1263_getTokens"" [label=""getTokens""];
""1263_Distribute"" [label=""Distribute""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_constructor"" [label=""constructor""];
""1263_approve"" [label=""approve""];
""1263_burn"" [label=""burn""];
""1263_fallback"" [label=""fallback""];
""1263_add"" [label=""add""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_allowance"" [label=""allowance""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_constructor"" -> ""1263_distr"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_distr"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
}
"
0xd3d94f6165d5647092a522cb14804d8b1157695b.sol,ZMC,"contract ZMC is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 8; function ZMC() public { owner = msg.sender; totalSupply=4200000000000000; balances[owner]=totalSupply; }",0,"subgraph cluster_533_ZMC {
label=""ZMC"";
""533_fallback"" [label=""fallback""];
""533_ZMC"" [label=""ZMC""];
}
"
0xe9c1b6ddf7a99f969cf3ef6ffb0224d018a0e0ca.sol,CoinRox,"contract CoinRox { address public admin_address = 0x5d9CC08eb47aE51069ED64BFAfBcF3a8e531f881; address public account_address = 0x5d9CC08eb47aE51069ED64BFAfBcF3a8e531f881; mapping(address => uint256) balances; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 initSupply = 2100000000; uint256 public totalSupply = 0; constructor() payable public { totalSupply = mul(initSupply, 10**uint256(decimals)); balances[account_address] = totalSupply; }",0,"subgraph cluster_527_CoinRox {
label=""CoinRox"";
""527_sub"" [label=""sub""];
""527_fallback"" [label=""fallback""];
""527_withDraw"" [label=""withDraw""];
""527_setAdmin"" [label=""setAdmin""];
""527_increaseApproval"" [label=""increaseApproval""];
""527_transferFrom"" [label=""transferFrom""];
""527_add"" [label=""add""];
""527_div"" [label=""div""];
""527_decreaseApproval"" [label=""decreaseApproval""];
""527_mul"" [label=""mul""];
""527_approve"" [label=""approve""];
""527_allowance"" [label=""allowance""];
""527_constructor"" [label=""constructor""];
""527_transfer"" [label=""transfer""];
""527_balanceOf"" [label=""balanceOf""];
""527_transferFrom"" -> ""527_add"";
""527_withDraw"" -> ""527_admin_only"";
""527_setAdmin"" -> ""527_admin_only"";
""527_transferFrom"" -> ""527_sub"";
""527_transfer"" -> ""527_add"";
""527_increaseApproval"" -> ""527_add"";
""527_decreaseApproval"" -> ""527_sub"";
""527_transfer"" -> ""527_sub"";
""527_constructor"" -> ""527_mul"";
}
"
0x7335f6347dce8d961bf0e36185fc75f03f4a3dff.sol,StandardToken,contract StandardToken is ERC20 { using SafeMath for uint256; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; function balanceOf(address _owner) public view returns (uint256) { return balances[_owner]; },0,"subgraph cluster_599_StandardToken {
label=""StandardToken"";
""599_approve"" [label=""approve""];
""599_allowance"" [label=""allowance""];
""599_decreaseApproval"" [label=""decreaseApproval""];
""599_increaseApproval"" [label=""increaseApproval""];
""599_balanceOf"" [label=""balanceOf""];
""599_burn"" [label=""burn""];
""599_transferFrom"" [label=""transferFrom""];
""599_burnFrom"" [label=""burnFrom""];
""599_transfer"" [label=""transfer""];
}
"
0x0e14ff106b70b807d74190ce2c2d0bb8c865082d.sol,STBIToken,"contract STBIToken is ERC20 { using SafeMath for uint256; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 8; uint256 public supply = 0; uint256 public initialSupply=1000000000; mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; address public ownerAddress=0x99DA509Aed5F50Ae0A539a1815654FA11A155003; bool public canTransfer=true; function STBIToken() public { supply = initialSupply * (10 ** uint256(decimals)); balances[ownerAddress] = supply; Transfer(0x0, ownerAddress, supply); }",0,"subgraph cluster_680_STBIToken {
label=""STBIToken"";
""680_airdrop"" [label=""airdrop""];
""680_approve"" [label=""approve""];
""680_balanceOf"" [label=""balanceOf""];
""680_totalSupply"" [label=""totalSupply""];
""680_transferFrom"" [label=""transferFrom""];
""680_transfer"" [label=""transfer""];
""680__transferMultiple"" [label=""_transferMultiple""];
""680_setCanTransfer"" [label=""setCanTransfer""];
""680_allowance"" [label=""allowance""];
""680__transfer"" [label=""_transfer""];
""680_STBIToken"" [label=""STBIToken""];
""680_setCanTransfer"" -> ""680_onlyOwner"";
""680_allowance"" -> ""680_onlyOwner"";
""680_transfer"" -> ""680__transfer"";
""680_transferFrom"" -> ""680__transfer"";
""680_airdrop"" -> ""680__transferMultiple"";
}
"
0xa3d48af5b7541658e7b663905f11433f1b4074f5.sol,OysterPearl,"contract OysterPearl { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply; uint256 public funds = 0; address public owner; bool public saleClosed = false; bool public ownerLock = false; uint256 public claimAmount; uint256 public payAmount; uint256 public feeAmount; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public buried; mapping (address => uint256) public claimed; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Bury(address indexed target, uint256 value); event Claim(address indexed payout, address indexed fee); function OysterPearl() public { owner = msg.sender; totalSupply = 0; totalSupply += 25000000 * 10 ** uint256(decimals); totalSupply += 75000000 * 10 ** uint256(decimals); totalSupply += 1000000 * 10 ** uint256(decimals); balanceOf[owner] = totalSupply; claimAmount = 5 * 10 ** (uint256(decimals) - 1); payAmount = 4 * 10 ** (uint256(decimals) - 1); feeAmount = 1 * 10 ** (uint256(decimals) - 1); }",0,"subgraph cluster_779_OysterPearl {
label=""OysterPearl"";
""779_fallback"" [label=""fallback""];
""779_approve"" [label=""approve""];
""779__transfer"" [label=""_transfer""];
""779_transferOwnership"" [label=""transferOwnership""];
""779_transferFrom"" [label=""transferFrom""];
""779_approveAndCall"" [label=""approveAndCall""];
""779_burn"" [label=""burn""];
""779_claim"" [label=""claim""];
""779_selfLock"" [label=""selfLock""];
""779_amendAmount"" [label=""amendAmount""];
""779_transfer"" [label=""transfer""];
""779_withdrawFunds"" [label=""withdrawFunds""];
""779_burnFrom"" [label=""burnFrom""];
""779_OysterPearl"" [label=""OysterPearl""];
""779_bury"" [label=""bury""];
""779_openSale"" [label=""openSale""];
""779_closeSale"" [label=""closeSale""];
""779_closeSale"" -> ""779_onlyOwner"";
""779_transfer"" -> ""779__transfer"";
""779_openSale"" -> ""779_onlyOwner"";
""779_selfLock"" -> ""779_onlyOwner"";
""779_amendAmount"" -> ""779_onlyOwner"";
""779_transferOwnership"" -> ""779_onlyOwner"";
""779_transferFrom"" -> ""779__transfer"";
""779_approveAndCall"" -> ""779_approve"";
""779_withdrawFunds"" -> ""779_onlyOwner"";
}
"
0x5a82de3515fc4a4db9ba9e869f269a1e85300092.sol,TokenERC20,"contract TokenERC20 is SafeMath { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_523_TokenERC20 {
label=""TokenERC20"";
""523__transfer"" [label=""_transfer""];
""523_burn"" [label=""burn""];
""523_transferFrom"" [label=""transferFrom""];
""523_approve"" [label=""approve""];
""523_burnFrom"" [label=""burnFrom""];
""523_approveAndCall"" [label=""approveAndCall""];
""523_transfer"" [label=""transfer""];
""523_TokenERC20"" [label=""TokenERC20""];
""523_burnFrom"" -> ""523_safeSub"";
""523_transfer"" -> ""523__transfer"";
""523_approveAndCall"" -> ""523_approve"";
""523_transferFrom"" -> ""523_safeSub"";
""523__transfer"" -> ""523_safeSub"";
""523_burn"" -> ""523_safeSub"";
""523__transfer"" -> ""523_safeAdd"";
""523_transferFrom"" -> ""523__transfer"";
}
"
0x01a28adc0edd796b570ec4da734e1aa809f6f1fc.sol,EDash,contract EDash is MintableToken { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public unlockTimeStamp = 0; mapping (address => bool) private _lockByPass; function EDash(uint unlockTs){ setUnlockTimeStamp(unlockTs); },0,"subgraph cluster_653_EDash {
label=""EDash"";
""653_transferFrom"" [label=""transferFrom""];
""653_setUnlockTimeStamp"" [label=""setUnlockTimeStamp""];
""653_airdrop"" [label=""airdrop""];
""653_transfer"" [label=""transfer""];
""653_setLockByPass"" [label=""setLockByPass""];
""653_EDash"" [label=""EDash""];
""653_airdrop"" -> ""653_transfer"";
""653_setLockByPass"" -> ""653_onlyOwner"";
""653_airdrop"" -> ""653_onlyOwner"";
""653_transfer"" -> ""653_transfer"";
""653_setUnlockTimeStamp"" -> ""653_onlyOwner"";
""653_transferFrom"" -> ""653_transferFrom"";
""653_EDash"" -> ""653_setUnlockTimeStamp"";
}
"
0x3308df0506de2a5857571f0aee6892de4f014e10.sol,Securewaycoin,contract Securewaycoin { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 2; uint public _totalSupply = 500000000; uint256 public RATE = 1; bool public isMinting = true; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_Securewaycoin {
label=""Securewaycoin"";
""516_createTokens"" [label=""createTokens""];
""516_approve"" [label=""approve""];
""516_constructor"" [label=""constructor""];
""516_fallback"" [label=""fallback""];
""516_allowance"" [label=""allowance""];
""516_transfer"" [label=""transfer""];
""516_transferFrom"" [label=""transferFrom""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_balanceOf"" [label=""balanceOf""];
""516_totalSupply"" [label=""totalSupply""];
""516_burnTokens"" [label=""burnTokens""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_fallback"" -> ""516_createTokens"";
""516_burnTokens"" -> ""516_onlyOwner"";
}
"
0x1e2e9cabb5744c314de7978c081bd57c357e000d.sol,CryptoMyWord,"contract CryptoMyWord { using SafeMath for uint256; using strings for *; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); event NewWord(uint wordId, string name, uint price); address private owner; uint256 nameTokenId; uint256 tokenId; mapping (address => bool) private admins; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.8 ether; uint256 private increaseLimit2 = 1.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) public ownerOfItem; mapping (address => string) public nameOfOwner; mapping (address => string) public snsOfOwner; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => string) private nameOfItem; mapping (uint256 => string) private urlOfItem; mapping (uint256 => address[]) private borrowerOfItem; mapping (string => uint256[]) private nameToItems; mapping (uint256 => address) private approvedOfItem; mapping (string => uint256) private nameToParents; mapping (string => uint256) private nameToNameToken; mapping (string => string) private firstIdOfName; mapping (string => string) private secondIdOfName; function CryptoMyWord () public { owner = msg.sender; admins[owner] = true; }",0,"subgraph cluster_3428_CryptoMyWord {
label=""CryptoMyWord"";
""3428_enableERC721"" [label=""enableERC721""];
""3428_tokenExists"" [label=""tokenExists""];
""3428_approve"" [label=""approve""];
""3428__mint"" [label=""_mint""];
""3428_startingPriceOf"" [label=""startingPriceOf""];
""3428_getOwner"" [label=""getOwner""];
""3428_isAdmin"" [label=""isAdmin""];
""3428_balanceOf"" [label=""balanceOf""];
""3428_disableERC721"" [label=""disableERC721""];
""3428_name"" [label=""name""];
""3428_getNames"" [label=""getNames""];
""3428_buy"" [label=""buy""];
""3428_setUrl"" [label=""setUrl""];
""3428__transfer"" [label=""_transfer""];
""3428_transferFrom"" [label=""transferFrom""];
""3428_removeAdmin"" [label=""removeAdmin""];
""3428_ceil"" [label=""ceil""];
""3428_CryptoMyWord"" [label=""CryptoMyWord""];
""3428_composite"" [label=""composite""];
""3428_calculateFirstCut"" [label=""calculateFirstCut""];
""3428_withdrawAll"" [label=""withdrawAll""];
""3428_listItem"" [label=""listItem""];
""3428_addAdmin"" [label=""addAdmin""];
""3428_isContract"" [label=""isContract""];
""3428_transfer"" [label=""transfer""];
""3428_allOf"" [label=""allOf""];
""3428_tokensOf"" [label=""tokensOf""];
""3428_calculateDevCut"" [label=""calculateDevCut""];
""3428_calculateNextPrice"" [label=""calculateNextPrice""];
""3428_approvedFor"" [label=""approvedFor""];
""3428_allForPopulate"" [label=""allForPopulate""];
""3428_priceOf"" [label=""priceOf""];
""3428_withdrawAmount"" [label=""withdrawAmount""];
""3428_itemsByName"" [label=""itemsByName""];
""3428_ownerOf"" [label=""ownerOf""];
""3428_selfDestruct"" [label=""selfDestruct""];
""3428_symbol"" [label=""symbol""];
""3428_setOwner"" [label=""setOwner""];
""3428_implementsERC721"" [label=""implementsERC721""];
""3428_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""3428_totalSupply"" [label=""totalSupply""];
""3428_nameOf"" [label=""nameOf""];
""3428_nextPriceOf"" [label=""nextPriceOf""];
""3428_buy"" -> ""3428_ceil"";
""3428_buy"" -> ""3428_priceOf"";
""3428_allForPopulate"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428_ownerOf"";
""3428_approve"" -> ""3428_tokenExists"";
""3428_selfDestruct"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428__transfer"";
""3428_setOwner"" -> ""3428_onlyOwner"";
""3428_approve"" -> ""3428_ownerOf"";
""3428_withdrawAmount"" -> ""3428_onlyOwner"";
""3428_tokenExists"" -> ""3428_priceOf"";
""3428_buy"" -> ""3428_nameOf"";
""3428_allOf"" -> ""3428_startingPriceOf"";
""3428_transferFrom"" -> ""3428__transfer"";
""3428_allOf"" -> ""3428_nextPriceOf"";
""3428_composite"" -> ""3428__mint"";
""3428_nextPriceOf"" -> ""3428_calculateNextPrice"";
""3428_buy"" -> ""3428__mint"";
""3428_tokensOf"" -> ""3428_balanceOf"";
""3428_buy"" -> ""3428_isContract"";
""3428_setUrl"" -> ""3428_ownerOf"";
""3428_allForPopulate"" -> ""3428_nextPriceOf"";
""3428_removeAdmin"" -> ""3428_onlyOwner"";
""3428__transfer"" -> ""3428_ownerOf"";
""3428_enableERC721"" -> ""3428_onlyOwner"";
""3428_allOf"" -> ""3428_ownerOf"";
""3428_addAdmin"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428_onlyERC721"";
""3428_allForPopulate"" -> ""3428_priceOf"";
""3428_approve"" -> ""3428_onlyERC721"";
""3428__transfer"" -> ""3428_tokenExists"";
""3428_buy"" -> ""3428_calculateFirstCut"";
""3428_allOf"" -> ""3428_priceOf"";
""3428_buy"" -> ""3428_ownerOf"";
""3428_buy"" -> ""3428_nextPriceOf"";
""3428_allForPopulate"" -> ""3428_startingPriceOf"";
""3428_disableERC721"" -> ""3428_onlyOwner"";
""3428_withdrawAll"" -> ""3428_onlyOwner"";
""3428_listItem"" -> ""3428_onlyAdmins"";
""3428_allForPopulate"" -> ""3428_ownerOf"";
""3428_buy"" -> ""3428_calculateDevCut"";
""3428__mint"" -> ""3428_ownerOf"";
""3428_transferFrom"" -> ""3428_onlyERC721"";
""3428_nextPriceOf"" -> ""3428_priceOf"";
""3428_transferFrom"" -> ""3428_approvedFor"";
""3428_balanceOf"" -> ""3428_ownerOf"";
}
"
0x653f052a42b6f02530742171c987fd0811b2d1f1.sol,Crowdsale,contract Crowdsale is Ownable { using SafeMath for uint256; modifier onlyWhileOpen { require( (now >= preICOStartDate && now < preICOEndDate) || (now >= ICOStartDate && now < ICOEndDate) ); _; },0,"subgraph cluster_1040_Crowdsale {
label=""Crowdsale"";
""1040_setPreICOStartDate"" [label=""setPreICOStartDate""];
""1040_setRate"" [label=""setRate""];
""1040_buyTokens"" [label=""buyTokens""];
""1040_setICOEndDate"" [label=""setICOEndDate""];
""1040_hasPreICOClosed"" [label=""hasPreICOClosed""];
""1040_forwardFunds"" [label=""forwardFunds""];
""1040_Crowdsale"" [label=""Crowdsale""];
""1040_setETHUSD"" [label=""setETHUSD""];
""1040_setToken"" [label=""setToken""];
""1040_setPreICOEndDate"" [label=""setPreICOEndDate""];
""1040_setWallet"" [label=""setWallet""];
""1040_buyTokensWithReferal"" [label=""buyTokensWithReferal""];
""1040_fallback"" [label=""fallback""];
""1040__deliverTokens"" [label=""_deliverTokens""];
""1040_hasICOClosed"" [label=""hasICOClosed""];
""1040_setICOStartDate"" [label=""setICOStartDate""];
""1040__preValidatePurchase"" [label=""_preValidatePurchase""];
""1040_refund"" [label=""refund""];
""1040__getTokenAmountWithBonus"" [label=""_getTokenAmountWithBonus""];
""1040__isICO"" [label=""_isICO""];
""1040_addToWhitelist"" [label=""addToWhitelist""];
""1040__getTokenAmountWithReferal"" [label=""_getTokenAmountWithReferal""];
""1040_addManyToWhitelist"" [label=""addManyToWhitelist""];
""1040_removeFromWhitelist"" [label=""removeFromWhitelist""];
""1040__isPreICO"" [label=""_isPreICO""];
""1040__preValidatePurchase"" -> ""1040__isICO"";
""1040_setPreICOStartDate"" -> ""1040_onlyOwner"";
""1040_setICOStartDate"" -> ""1040_onlyOwner"";
""1040_buyTokensWithReferal"" -> ""1040_onlyWhileICOOpen"";
""1040_setICOEndDate"" -> ""1040_onlyOwner"";
""1040_buyTokens"" -> ""1040__preValidatePurchase"";
""1040_buyTokens"" -> ""1040__isPreICO"";
""1040_setPreICOEndDate"" -> ""1040_onlyOwner"";
""1040_buyTokensWithReferal"" -> ""1040__deliverTokens"";
""1040_buyTokensWithReferal"" -> ""1040__getTokenAmountWithBonus"";
""1040_buyTokens"" -> ""1040__getTokenAmountWithBonus"";
""1040_buyTokens"" -> ""1040__deliverTokens"";
""1040_fallback"" -> ""1040_buyTokens"";
""1040_setETHUSD"" -> ""1040_onlyOwner"";
""1040_addToWhitelist"" -> ""1040_onlyOwner"";
""1040_setRate"" -> ""1040_onlyOwner"";
""1040_addManyToWhitelist"" -> ""1040_onlyOwner"";
""1040_setToken"" -> ""1040_onlyOwner"";
""1040_setWallet"" -> ""1040_onlyOwner"";
""1040__preValidatePurchase"" -> ""1040__isPreICO"";
""1040_buyTokensWithReferal"" -> ""1040__preValidatePurchase"";
""1040_buyTokensWithReferal"" -> ""1040__getTokenAmountWithReferal"";
""1040_buyTokens"" -> ""1040_onlyWhileOpen"";
""1040_forwardFunds"" -> ""1040_onlyOwner"";
""1040__preValidatePurchase"" -> ""1040_onlyWhileOpen"";
""1040_removeFromWhitelist"" -> ""1040_onlyOwner"";
}
"
0xeed618c15d12c635c3c319aee7bded2e2879aea0.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private _owner; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },0,"subgraph cluster_20_PlayerBookReceiverInterface {
label=""PlayerBookReceiverInterface"";
""20_receivePlayerInfo"" [label=""receivePlayerInfo""];
""20_receivePlayerNameList"" [label=""receivePlayerNameList""];
}
"
0x35d76c3db8e826907d2a977500b54b3914ecc020.sol,CappedCrowdsale,contract CappedCrowdsale is Crowdsale { using SafeMath for uint256; uint256 public cap; function CappedCrowdsale(uint256 _cap) public { require(_cap > 0); cap = _cap; },0,"subgraph cluster_578_CappedCrowdsale {
label=""CappedCrowdsale"";
""578_CappedCrowdsale"" [label=""CappedCrowdsale""];
""578_capReached"" [label=""capReached""];
""578__preValidatePurchase"" [label=""_preValidatePurchase""];
""578__preValidatePurchase"" -> ""578__preValidatePurchase"";
}
"
0x78faea8994efe7fc448e743b7b342e1a96ba3807.sol,UnicornRanch,"contract UnicornRanch { using SafeMath for uint; enum VisitType { Spa, Afternoon, Day, Overnight, Week, Extended }",0,"subgraph cluster_1424_UnicornRanch {
label=""UnicornRanch"";
""1424_bookAfternoonVisit"" [label=""bookAfternoonVisit""];
""1424_getBookingCount"" [label=""getBookingCount""];
""1424_repossessBooking"" [label=""repossessBooking""];
""1424_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1424_addBooking"" [label=""addBooking""];
""1424_changeCardboardUnicornTokenAddress"" [label=""changeCardboardUnicornTokenAddress""];
""1424_withdraw"" [label=""withdraw""];
""1424_changeBirthSettings"" [label=""changeBirthSettings""];
""1424_getBooking"" [label=""getBooking""];
""1424_availableBalance"" [label=""availableBalance""];
""1424_bookExtendedVisit"" [label=""bookExtendedVisit""];
""1424_bookWeekVisit"" [label=""bookWeekVisit""];
""1424_bookDayVisit"" [label=""bookDayVisit""];
""1424_bookSpaVisit"" [label=""bookSpaVisit""];
""1424_changeRepoSettings"" [label=""changeRepoSettings""];
""1424_changeVisitCosts"" [label=""changeVisitCosts""];
""1424_bookOvernightVisit"" [label=""bookOvernightVisit""];
""1424_donateUnicorns"" [label=""donateUnicorns""];
""1424_completeBooking"" [label=""completeBooking""];
""1424_changeVisitLengths"" [label=""changeVisitLengths""];
""1424_UnicornRanch"" [label=""UnicornRanch""];
""1424_changeOwner"" [label=""changeOwner""];
""1424_fallback"" [label=""fallback""];
""1424_changeGroveAddress"" [label=""changeGroveAddress""];
""1424_changeOwner"" -> ""1424_onlyOwner"";
""1424_changeBirthSettings"" -> ""1424_onlyOwner"";
""1424_bookWeekVisit"" -> ""1424_addBooking"";
""1424_fallback"" -> ""1424_donateUnicorns"";
""1424_bookSpaVisit"" -> ""1424_addBooking"";
""1424_bookExtendedVisit"" -> ""1424_addBooking"";
""1424_bookAfternoonVisit"" -> ""1424_addBooking"";
""1424_changeCardboardUnicornTokenAddress"" -> ""1424_onlyOwner"";
""1424_bookOvernightVisit"" -> ""1424_addBooking"";
""1424_bookDayVisit"" -> ""1424_addBooking"";
""1424_changeRepoSettings"" -> ""1424_onlyOwner"";
""1424_changeVisitLengths"" -> ""1424_onlyOwner"";
""1424_changeVisitCosts"" -> ""1424_onlyOwner"";
""1424_addBooking"" -> ""1424_availableBalance"";
""1424_changeGroveAddress"" -> ""1424_onlyOwner"";
""1424_addBooking"" -> ""1424_donateUnicorns"";
""1424_withdrawForeignTokens"" -> ""1424_onlyOwner"";
""1424_withdraw"" -> ""1424_onlyOwner"";
""1424_fallback"" -> ""1424_availableBalance"";
}
"
0xd89d6e3b1115743b3dc481f6afdb5bc2958031d6.sol,POWM,contract POWM { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1305_POWM {
label=""POWM"";
""1305_myTokens"" [label=""myTokens""];
""1305_sqrt"" [label=""sqrt""];
""1305_fallback"" [label=""fallback""];
""1305_buyPrice"" [label=""buyPrice""];
""1305_totalSupply"" [label=""totalSupply""];
""1305_sellPrice"" [label=""sellPrice""];
""1305_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1305_setAdministrator"" [label=""setAdministrator""];
""1305_exit"" [label=""exit""];
""1305_setSymbol"" [label=""setSymbol""];
""1305_setStakingRequirement"" [label=""setStakingRequirement""];
""1305_sell"" [label=""sell""];
""1305_balanceOf"" [label=""balanceOf""];
""1305_transfer"" [label=""transfer""];
""1305_buy"" [label=""buy""];
""1305_withdraw"" [label=""withdraw""];
""1305_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1305_disableInitialStage"" [label=""disableInitialStage""];
""1305_dividendsOf"" [label=""dividendsOf""];
""1305_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1305_myDividends"" [label=""myDividends""];
""1305_POWM"" [label=""POWM""];
""1305_reinvest"" [label=""reinvest""];
""1305_purchaseTokens"" [label=""purchaseTokens""];
""1305_setName"" [label=""setName""];
""1305_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1305_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1305_reinvest"" -> ""1305_purchaseTokens"";
""1305_exit"" -> ""1305_sell"";
""1305_calculateTokensReceived"" -> ""1305_ethereumToTokens_"";
""1305_sell"" -> ""1305_tokensToEthereum_"";
""1305_buy"" -> ""1305_purchaseTokens"";
""1305_transfer"" -> ""1305_tokensToEthereum_"";
""1305_reinvest"" -> ""1305_onlyStronghands"";
""1305_ethereumToTokens_"" -> ""1305_sqrt"";
""1305_buyPrice"" -> ""1305_tokensToEthereum_"";
""1305_purchaseTokens"" -> ""1305_antiEarlyWhale"";
""1305_fallback"" -> ""1305_purchaseTokens"";
""1305_disableInitialStage"" -> ""1305_onlyAdministrator"";
""1305_sell"" -> ""1305_onlyBagholders"";
""1305_sellPrice"" -> ""1305_tokensToEthereum_"";
""1305_calculateEthereumReceived"" -> ""1305_tokensToEthereum_"";
""1305_purchaseTokens"" -> ""1305_ethereumToTokens_"";
""1305_reinvest"" -> ""1305_myDividends"";
""1305_withdraw"" -> ""1305_myDividends"";
""1305_setStakingRequirement"" -> ""1305_onlyAdministrator"";
""1305_setAdministrator"" -> ""1305_onlyAdministrator"";
""1305_myDividends"" -> ""1305_dividendsOf"";
""1305_withdraw"" -> ""1305_onlyStronghands"";
""1305_transfer"" -> ""1305_onlyBagholders"";
""1305_transfer"" -> ""1305_myDividends"";
""1305_setSymbol"" -> ""1305_onlyAdministrator"";
""1305_transfer"" -> ""1305_withdraw"";
""1305_myTokens"" -> ""1305_balanceOf"";
""1305_setName"" -> ""1305_onlyAdministrator"";
""1305_exit"" -> ""1305_withdraw"";
}
"
0xa5e5be69c923c701ae6ac8f1f5936af3ae610c68.sol,Collectables,"contract Collectables is ERC721Full(, ), Ownable { using Strings for string; mapping(uint32 => address) public delegates; uint32[] public collectables; uint public delegateCount; event DelegateAdded(address indexed delegate, uint32 indexed delegateID); function addDelegate(address delegate) public onlyOwner { uint32 delegateID = uint32(delegateCount++); require(delegates[delegateID] == address(0), ); delegates[delegateID] = delegate; emit DelegateAdded(delegate, delegateID); }",0,"subgraph cluster_2118_Collectables {
label=""Collectables"";
""2118_getTokenDelegate"" [label=""getTokenDelegate""];
""2118_safeTransferFrom"" [label=""safeTransferFrom""];
""2118_addDelegate"" [label=""addDelegate""];
""2118_mint"" [label=""mint""];
""2118_getDelegate"" [label=""getDelegate""];
""2118_tokenURI"" [label=""tokenURI""];
""2118_transferFrom"" [label=""transferFrom""];
""2118_approve"" [label=""approve""];
""2118_approve"" -> ""2118_approve"";
""2118_addDelegate"" -> ""2118_onlyOwner"";
""2118_transferFrom"" -> ""2118_transferFrom"";
""2118_mint"" -> ""2118__mint"";
""2118_transferFrom"" -> ""2118_getTokenDelegate"";
""2118_approve"" -> ""2118_getTokenDelegate"";
""2118_tokenURI"" -> ""2118__exists"";
""2118_safeTransferFrom"" -> ""2118_getTokenDelegate"";
""2118_mint"" -> ""2118_getDelegate"";
""2118_safeTransferFrom"" -> ""2118_safeTransferFrom"";
}
"
0x6b8c3eaa82353ec89a96942708e3d9dc87db6a34.sol,BancorConverterUpgrader,"contract BancorConverterUpgrader is Owned { IBancorConverterFactory public bancorConverterFactory; event ConverterOwned(address indexed _converter, address indexed _owner); event ConverterUpgrade(address indexed _oldConverter, address indexed _newConverter); function BancorConverterUpgrader(IBancorConverterFactory _bancorConverterFactory) public { bancorConverterFactory = _bancorConverterFactory; }",0,"subgraph cluster_984_BancorConverterUpgrader {
label=""BancorConverterUpgrader"";
""984_copyQuickBuyPath"" [label=""copyQuickBuyPath""];
""984_transferConnectorsBalances"" [label=""transferConnectorsBalances""];
""984_setBancorConverterFactory"" [label=""setBancorConverterFactory""];
""984_copyConversionFee"" [label=""copyConversionFee""];
""984_copyConnectors"" [label=""copyConnectors""];
""984_createConverter"" [label=""createConverter""];
""984_upgrade"" [label=""upgrade""];
""984_acceptConverterOwnership"" [label=""acceptConverterOwnership""];
""984_BancorConverterUpgrader"" [label=""BancorConverterUpgrader""];
""984_readConnector"" [label=""readConnector""];
""984_upgrade"" -> ""984_transferConnectorsBalances"";
""984_copyConnectors"" -> ""984_readConnector"";
""984_upgrade"" -> ""984_copyConnectors"";
""984_upgrade"" -> ""984_copyConversionFee"";
""984_upgrade"" -> ""984_copyQuickBuyPath"";
""984_upgrade"" -> ""984_createConverter"";
""984_setBancorConverterFactory"" -> ""984_ownerOnly"";
""984_upgrade"" -> ""984_acceptConverterOwnership"";
}
"
0xa4480957629da7986efe389ca2be86a9fab7481b.sol,CLIP,"contract CLIP is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 333e8 * 1e8; uint256 public distributeAmount = 0; mapping (address => uint256) public balanceOf; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed burner, uint256 value); function CLIP() public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_1582_CLIP {
label=""CLIP"";
""1582_CLIP"" [label=""CLIP""];
""1582_lockupAccounts"" [label=""lockupAccounts""];
""1582_totalSupply"" [label=""totalSupply""];
""1582_balanceOf"" [label=""balanceOf""];
""1582_transferToContract"" [label=""transferToContract""];
""1582_autoDistribute"" [label=""autoDistribute""];
""1582_distributeAirdrop"" [label=""distributeAirdrop""];
""1582_setDistributeAmount"" [label=""setDistributeAmount""];
""1582_transfer"" [label=""transfer""];
""1582_symbol"" [label=""symbol""];
""1582_freezeAccounts"" [label=""freezeAccounts""];
""1582_fallback"" [label=""fallback""];
""1582_decimals"" [label=""decimals""];
""1582_burn"" [label=""burn""];
""1582_name"" [label=""name""];
""1582_distributeToken"" [label=""distributeToken""];
""1582_isContract"" [label=""isContract""];
""1582_transferToAddress"" [label=""transferToAddress""];
""1582_collectTokens"" [label=""collectTokens""];
""1582_collectTokens"" -> ""1582_onlyOwner"";
""1582_burn"" -> ""1582_onlyOwner"";
""1582_setDistributeAmount"" -> ""1582_onlyOwner"";
""1582_transfer"" -> ""1582_transferToContract"";
""1582_freezeAccounts"" -> ""1582_onlyOwner"";
""1582_fallback"" -> ""1582_autoDistribute"";
""1582_transfer"" -> ""1582_isContract"";
""1582_lockupAccounts"" -> ""1582_onlyOwner"";
""1582_transfer"" -> ""1582_transferToAddress"";
}
"
0x53148bb4551707edf51a1e8d7a93698d18931225.sol,Peculium,"contract Peculium is BurnableToken,Ownable { using SafeMath for uint256; using SafeERC20 for ERC20Basic; string public name = ; string public symbol = ; uint256 public decimals = 8; uint256 public constant MAX_SUPPLY_NBTOKEN = 20000000000*10**8; uint256 public dateStartContract; mapping(address => bool) public balancesCanSell; uint256 public dateDefrost; event FrozenFunds(address target, bool frozen); event Defroze(address msgAdd, bool freeze); function Peculium() { totalSupply = MAX_SUPPLY_NBTOKEN; balances[owner] = totalSupply; balancesCanSell[owner] = true; dateStartContract=now; dateDefrost = dateStartContract + 85 days; }",0,"subgraph cluster_875_Peculium {
label=""Peculium"";
""875_freezeAccount"" [label=""freezeAccount""];
""875_approveAndCall"" [label=""approveAndCall""];
""875_transferFrom"" [label=""transferFrom""];
""875_getBlockTimestamp"" [label=""getBlockTimestamp""];
""875_getOwnerInfos"" [label=""getOwnerInfos""];
""875_defrostToken"" [label=""defrostToken""];
""875_Peculium"" [label=""Peculium""];
""875_transfer"" [label=""transfer""];
""875_transferFrom"" -> ""875_transferFrom"";
""875_getOwnerInfos"" -> ""875_balanceOf"";
""875_freezeAccount"" -> ""875_onlyOwner"";
""875_transfer"" -> ""875_transfer"";
}
"
0x1ca0a2632519021798cb0e0a073371c8ddfcdde5.sol,DukeOfEther,contract DukeOfEther is Ownable { address m_addrShareHolder = 0; uint m_deployedAtBlock = 0; uint m_nOwnersMoney = 0; uint m_nNewCountryPrice = 1 ether; uint m_nMinDukePrice = 1 finney; uint m_nDeterioration = 3; uint m_nDaysBeforeDeteriorationStarts = 60; uint m_NextDukePaymentIncrease = 150; uint m_nNumberOfActiveCountries = 0; struct Country { bool m_bIsDestroyed; string m_strNickName; uint m_nLastDukeRiseDate; address m_addrCurrentDuke; uint m_nCurrentDukePaid; string m_strCountry; },0,"subgraph cluster_846_DukeOfEther {
label=""DukeOfEther"";
""846_getCurrentDuke"" [label=""getCurrentDuke""];
""846_getDukeDate"" [label=""getDukeDate""];
""846_becomeDuke"" [label=""becomeDuke""];
""846_DukeOfEther"" [label=""DukeOfEther""];
""846_getCurrentDukePaid"" [label=""getCurrentDukePaid""];
""846_withdrawDukeOwnersMoney"" [label=""withdrawDukeOwnersMoney""];
""846_addCountry"" [label=""addCountry""];
""846_getPaymentToAddRemoveCountry"" [label=""getPaymentToAddRemoveCountry""];
""846_verifyNickNameAndCountry"" [label=""verifyNickNameAndCountry""];
""846_getMinNextBet"" [label=""getMinNextBet""];
""846_getDukeNickName"" [label=""getDukeNickName""];
""846_processShareHolderFee"" [label=""processShareHolderFee""];
""846_getInitBlock"" [label=""getInitBlock""];
""846_isDestroyed"" [label=""isDestroyed""];
""846_addRemoveCountry"" [label=""addRemoveCountry""];
""846_setShareHolder"" [label=""setShareHolder""];
""846_getPaymentToAddRemoveCountry"" -> ""846_getMinNextBet"";
""846_becomeDuke"" -> ""846_processShareHolderFee"";
""846_becomeDuke"" -> ""846_getMinNextBet"";
""846_setShareHolder"" -> ""846_onlyOwner"";
""846_addRemoveCountry"" -> ""846_verifyNickNameAndCountry"";
""846_DukeOfEther"" -> ""846_addCountry"";
""846_addRemoveCountry"" -> ""846_processShareHolderFee"";
""846_withdrawDukeOwnersMoney"" -> ""846_onlyOwner"";
""846_addRemoveCountry"" -> ""846_getPaymentToAddRemoveCountry"";
}
"
0x92ddab77ed88c3b54b01e1b0d0268c8b0fa601bd.sol,NVTDrop,contract NVTDrop is Ownable{ mapping(address => bool) getDropped; bool public halted = true; uint256 public amout = 1 * 10 ** 4; address public NVTAddr; NVT NVTFace; function setNVTface(address _nvt) public onlyOwner { NVTFace = NVT(_nvt); },0,"subgraph cluster_266_NVTDrop {
label=""NVTDrop"";
""266_fallback"" [label=""fallback""];
""266_setNVTface"" [label=""setNVTface""];
""266_setAmout"" [label=""setAmout""];
""266_getStuckCoin"" [label=""getStuckCoin""];
""266_halt"" [label=""halt""];
""266_unhalt"" [label=""unhalt""];
""266_halt"" -> ""266_onlyOwner"";
""266_unhalt"" -> ""266_onlyOwner"";
""266_getStuckCoin"" -> ""266_onlyOwner"";
""266_setNVTface"" -> ""266_onlyOwner"";
""266_setAmout"" -> ""266_onlyOwner"";
}
"
0x6b0d72192baff8b978820ee72706ae02b4e72468.sol,CappedCrowdsale,contract CappedCrowdsale is Crowdsale { using SafeMath for uint256; uint256 public cap; function CappedCrowdsale(uint256 _cap) public { require(_cap > 0); cap = _cap; },0,"subgraph cluster_1079_CappedCrowdsale {
label=""CappedCrowdsale"";
""1079_CappedCrowdsale"" [label=""CappedCrowdsale""];
""1079_capReached"" [label=""capReached""];
""1079__preValidatePurchase"" [label=""_preValidatePurchase""];
""1079__preValidatePurchase"" -> ""1079__preValidatePurchase"";
}
"
0xecef2133479bc8a5ae858e53fa1d2a8316c7c39a.sol,BodyRabbit,contract BodyRabbit is BaseRabbit { uint public totalBunny = 0; string public constant name = ; string public constant symbol = ; constructor() public { setPriv(privAddress); setToken(addressTokenBunny ); },0,"subgraph cluster_1645_BodyRabbit {
label=""BodyRabbit"";
""1645_sendMoney"" [label=""sendMoney""];
""1645_isPromoPause"" [label=""isPromoPause""];
""1645_isPauseSave"" [label=""isPauseSave""];
""1645_getSirePrice"" [label=""getSirePrice""];
""1645_uintToBytes"" [label=""uintToBytes""];
""1645_getRabbitDNK"" [label=""getRabbitDNK""];
""1645_constructor"" [label=""constructor""];
""1645_getOwnerGennezise"" [label=""getOwnerGennezise""];
""1645_getTokenOwner"" [label=""getTokenOwner""];
""1645_setPauseSave"" [label=""setPauseSave""];
""1645_getMotherCount"" [label=""getMotherCount""];
""1645_setRabbitMother"" [label=""setRabbitMother""];
""1645_getTotalSalaryBunny"" [label=""getTotalSalaryBunny""];
""1645_getBreed"" [label=""getBreed""];
""1645_getRabbitMotherSumm"" [label=""getRabbitMotherSumm""];
""1645_getRabbitMother"" [label=""getRabbitMother""];
""1645_isUIntPublic"" [label=""isUIntPublic""];
""1645_ownerOf"" [label=""ownerOf""];
""1645_getcoolduwn"" [label=""getcoolduwn""];
""1645_transferFrom"" [label=""transferFrom""];
""1645_setPauseSave"" -> ""1645_onlyWhitelisted"";
""1645_isPromoPause"" -> ""1645_getInWhitelist"";
""1645_transferFrom"" -> ""1645_onlyWhitelisted"";
""1645_isUIntPublic"" -> ""1645_isPauseSave"";
""1645_constructor"" -> ""1645_setToken"";
""1645_constructor"" -> ""1645_setPriv"";
}
"
0xa387d94e1135f9954c675682ce8950d77a90ba76.sol,LockableToken,contract LockableToken is MintableToken { using SafeMath for uint256; struct Lock { uint256 amount; uint256 expiresAt; },0,"subgraph cluster_978_LockableToken {
label=""LockableToken"";
""978_addLock"" [label=""addLock""];
""978_deleteLock"" [label=""deleteLock""];
""978__preValidateTransfer"" [label=""_preValidateTransfer""];
""978_getLockedAmount"" [label=""getLockedAmount""];
""978_transferWithLock"" [label=""transferWithLock""];
""978_addLock"" -> ""978_onlyOwner"";
""978_transferWithLock"" -> ""978_transfer"";
""978_transferWithLock"" -> ""978_addLock"";
""978_deleteLock"" -> ""978_onlyOwner"";
""978_transferWithLock"" -> ""978_onlyOwner"";
""978__preValidateTransfer"" -> ""978_getLockedAmount"";
""978__preValidateTransfer"" -> ""978__preValidateTransfer"";
""978__preValidateTransfer"" -> ""978_balanceOf"";
}
"
0x4bf0a47d968e6a9d6c14671b091f20e20a6b8ef8.sol,e2pAirEscrow,"contract e2pAirEscrow is Stoppable { address public TOKEN_ADDRESS; uint public CLAIM_AMOUNT; uint public REFERRAL_AMOUNT; uint public CLAIM_AMOUNT_ETH; address public AIRDROPPER; address public AIRDROP_TRANSIT_ADDRESS; mapping (address => bool) usedTransitAddresses; constructor(address _tokenAddress, uint _claimAmount, uint _referralAmount, uint _claimAmountEth, address _airdropTransitAddress) public payable { AIRDROPPER = msg.sender; TOKEN_ADDRESS = _tokenAddress; CLAIM_AMOUNT = _claimAmount; REFERRAL_AMOUNT = _referralAmount; CLAIM_AMOUNT_ETH = _claimAmountEth; AIRDROP_TRANSIT_ADDRESS = _airdropTransitAddress; }",0,"subgraph cluster_813_e2pAirEscrow {
label=""e2pAirEscrow"";
""813_constructor"" [label=""constructor""];
""813_verifyReceiverAddress"" [label=""verifyReceiverAddress""];
""813_withdraw"" [label=""withdraw""];
""813_checkWithdrawal"" [label=""checkWithdrawal""];
""813_getEtherBack"" [label=""getEtherBack""];
""813_isLinkClaimed"" [label=""isLinkClaimed""];
""813_verifyLinkPrivateKey"" [label=""verifyLinkPrivateKey""];
""813_checkWithdrawal"" -> ""813_verifyLinkPrivateKey"";
""813_withdraw"" -> ""813_whenNotPaused"";
""813_withdraw"" -> ""813_checkWithdrawal"";
""813_checkWithdrawal"" -> ""813_verifyReceiverAddress"";
""813_withdraw"" -> ""813_whenNotStopped"";
}
"
0x543e9c99addfc7c6fa158359019fd8f530334396.sol,EPCSale,"contract EPCSale is Math, owned { EPCToken public epc; uint256 public constant decimals = 18; bool public isFinalized; uint256 public fundingStartBlock; uint256 public fundingEndBlock; uint256 public funded; uint256 public constant totalCap = 250 * (10**6) * 10**decimals; function EPCSale( EPCToken _epc, uint256 _fundingStartBlock, uint256 _fundingEndBlock ) public { isFinalized = false; epc = EPCToken(_epc); fundingStartBlock = _fundingStartBlock; fundingEndBlock = _fundingEndBlock; }",0,"subgraph cluster_806_EPCSale {
label=""EPCSale"";
""806_exchangeRate"" [label=""exchangeRate""];
""806_stop"" [label=""stop""];
""806_testExchangeRate"" [label=""testExchangeRate""];
""806_withdrawal"" [label=""withdrawal""];
""806_testFunded"" [label=""testFunded""];
""806_EPCSale"" [label=""EPCSale""];
""806_start"" [label=""start""];
""806_kill"" [label=""kill""];
""806_fallback"" [label=""fallback""];
""806_crowdSale"" [label=""crowdSale""];
""806_retrieveTokens"" [label=""retrieveTokens""];
""806_start"" -> ""806_onlyOwner"";
""806_testFunded"" -> ""806_exchangeRate"";
""806_crowdSale"" -> ""806_exchangeRate"";
""806_crowdSale"" -> ""806_add"";
""806_retrieveTokens"" -> ""806_onlyOwner"";
""806_testFunded"" -> ""806_mul"";
""806_withdrawal"" -> ""806_onlyOwner"";
""806_testFunded"" -> ""806_add"";
""806_stop"" -> ""806_onlyOwner"";
""806_fallback"" -> ""806_crowdSale"";
""806_kill"" -> ""806_onlyOwner"";
""806_crowdSale"" -> ""806_mul"";
}
"
0x5ad9e100bc58e57a20cf1cae204f046006d27a27.sol,Ambassador,contract Ambassador { using SafeMath for uint256; CoinCrowdICO icoContract; uint256 public startRC; uint256 public endRC; address internal contractOwner; uint256 public soldTokensWithoutBonus; function euroRaisedRc() public view returns(uint256 euro) { return icoContract.euroRaised(soldTokensWithoutBonus); },0,"subgraph cluster_518_Ambassador {
label=""Ambassador"";
""518_euroRaisedRc"" [label=""euroRaisedRc""];
""518_fallback"" [label=""fallback""];
""518_updateTime"" [label=""updateTime""];
""518_setTimeRC"" [label=""setTimeRC""];
""518_Ambassador"" [label=""Ambassador""];
""518_Ambassador"" -> ""518_setTimeRC"";
""518_updateTime"" -> ""518_onlyIcoContract"";
}
"
0x02f2d4a04e6e01ace88bd2cd632875543b2ef577.sol,ICOToken,"contract ICOToken is BaseToken { uint256 public icoRatio; uint256 public icoEndtime; address public icoSender; address public icoHolder; event ICO(address indexed from, uint256 indexed value, uint256 tokenValue); event Withdraw(address indexed from, address indexed holder, uint256 value); modifier onlyBefore() { if (now > icoEndtime) { revert(); }",0,"subgraph cluster_410_ICOToken {
label=""ICOToken"";
""410_fallback"" [label=""fallback""];
""410_withdraw"" [label=""withdraw""];
""410_fallback"" -> ""410__transfer"";
""410_fallback"" -> ""410_onlyBefore"";
}
"
0x037d67c29f19a5451c731312a4c02043143c61ca.sol,RADIUM,"contract RADIUM { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply; uint256 public RadiumSupply = 200000000000; uint256 public buyPrice = 20000000; address public creator; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event FundTransfer(address backer, uint amount, bool isContribution); function RADIUM() public { totalSupply = RadiumSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; creator = msg.sender; }",0,"subgraph cluster_216_RADIUM {
label=""RADIUM"";
""216_fallback"" [label=""fallback""];
""216__transfer"" [label=""_transfer""];
""216_transfer"" [label=""transfer""];
""216_RADIUM"" [label=""RADIUM""];
""216_transfer"" -> ""216__transfer"";
}
"
0x1fd27f0cfc6f273b87a5e0f6fcf063422e7bcd6a.sol,AgrocoinToken,"contract AgrocoinToken is Ownable, ERC20Burnable, ERC20Detailed { string internal NAME = ; string internal SYMBOL = ; uint8 internal DECIMALS = 18; uint256 internal INITIAL_SUPPLY = 600000000 * 10 ** uint256(DECIMALS); constructor() ERC20Burnable() ERC20Detailed(NAME, SYMBOL, DECIMALS) ERC20() public { _mint(msg.sender, INITIAL_SUPPLY); }",0,"subgraph cluster_868_AgrocoinToken {
label=""AgrocoinToken"";
""868_constructor"" [label=""constructor""];
""868_constructor"" -> ""868__mint"";
""868_constructor"" -> ""868_constructor"";
}
"
0x1806b3527c18fb532c46405f6f014c1f381b499a.sol,PlanetCryptoToken,"contract PlanetCryptoToken is ERC721Full_custom{ using Percent for Percent.percent; event referralPaid(address indexed search_to, address to, uint256 amnt, uint256 timestamp); event issueCoinTokens(address indexed searched_to, address to, uint256 amnt, uint256 timestamp); event landPurchased(uint256 indexed search_token_id, address indexed search_buyer, uint256 token_id, address buyer, bytes32 name, int256 center_lat, int256 center_lng, uint256 size, uint256 bought_at, uint256 empire_score, uint256 timestamp); event taxDistributed(uint256 amnt, uint256 total_players, uint256 timestamp); event cardBought( uint256 indexed search_token_id, address indexed search_from, address indexed search_to, uint256 token_id, address from, address to, bytes32 name, uint256 orig_value, uint256 new_value, uint256 empireScore, uint256 newEmpireScore, uint256 now); event cardChange( uint256 indexed search_token_id, address indexed search_owner, uint256 token_id, address owner, uint256 changeType, bytes32 data, uint256 now); address owner; address devBankAddress; address tokenBankAddress; modifier onlyOwner() { require(msg.sender == owner); _; }",0,"subgraph cluster_4478_PlanetCryptoToken {
label=""PlanetCryptoToken"";
""4478_processDevPayment"" [label=""processDevPayment""];
""4478_setupZoomLvl"" [label=""setupZoomLvl""];
""4478_processReferer"" [label=""processReferer""];
""4478_getToken"" [label=""getToken""];
""4478_process_swap"" [label=""process_swap""];
""4478_p_update_action"" [label=""p_update_action""];
""4478_current_plot_price"" [label=""current_plot_price""];
""4478_processPurchase"" [label=""processPurchase""];
""4478_tokenURI"" [label=""tokenURI""];
""4478_m"" [label=""m""];
""4478_total_land_sold"" [label=""total_land_sold""];
""4478_transferTokens"" [label=""transferTokens""];
""4478_tokens_rewards_allocated"" [label=""tokens_rewards_allocated""];
""4478_buyLand"" [label=""buyLand""];
""4478_setupPlotOwnership"" [label=""setupPlotOwnership""];
""4478_calcPlayerDivs"" [label=""calcPlayerDivs""];
""4478_transferCards"" [label=""transferCards""];
""4478_transferFrom"" [label=""transferFrom""];
""4478_buyLandWithTokens"" [label=""buyLandWithTokens""];
""4478_withdrawTaxEarning"" [label=""withdrawTaxEarning""];
""4478_all_playerObjects"" [label=""all_playerObjects""];
""4478_tax_distributed"" [label=""tax_distributed""];
""4478_tokens_rewards_available"" [label=""tokens_rewards_available""];
""4478_safeTransferFrom"" [label=""safeTransferFrom""];
""4478_getAllPlayerObjectLen"" [label=""getAllPlayerObjectLen""];
""4478_queryPlotExists"" [label=""queryPlotExists""];
""4478_processBurn"" [label=""processBurn""];
""4478_getTokenEnhanced"" [label=""getTokenEnhanced""];
""4478_constructor"" [label=""constructor""];
""4478_queryMap"" [label=""queryMap""];
""4478_updateCardDetail"" [label=""updateCardDetail""];
""4478_transferPlayer"" [label=""transferPlayer""];
""4478_total_empire_score"" [label=""total_empire_score""];
""4478_burn"" [label=""burn""];
""4478_taxEarningsAvailable"" [label=""taxEarningsAvailable""];
""4478_p_withdrawDevHoldings"" [label=""p_withdrawDevHoldings""];
""4478_total_trades"" [label=""total_trades""];
""4478_buyCard"" [label=""buyCard""];
""4478_initPlayers"" [label=""initPlayers""];
""4478_updateCardDetail"" -> ""4478_ownerOf"";
""4478_buyCard"" -> ""4478_process_swap"";
""4478_buyCard"" -> ""4478_processReferer"";
""4478_burn"" -> ""4478_processBurn"";
""4478_constructor"" -> ""4478_constructor"";
""4478_buyLandWithTokens"" -> ""4478_processPurchase"";
""4478_buyCard"" -> ""4478_calcPlayerDivs"";
""4478_buyCard"" -> ""4478_validateResale"";
""4478_buyCard"" -> ""4478_updateUsersLastAccess"";
""4478_getTokenEnhanced"" -> ""4478_ownerOf"";
""4478_getToken"" -> ""4478_ownerOf"";
""4478_tokenURI"" -> ""4478__exists"";
""4478_transferTokens"" -> ""4478_onlyOwner"";
""4478_buyLand"" -> ""4478_validatePurchase"";
""4478_p_update_action"" -> ""4478_onlyOwner"";
""4478_safeTransferFrom"" -> ""4478_transferFrom"";
""4478_updateCardDetail"" -> ""4478_processDevPayment"";
""4478_initPlayers"" -> ""4478_onlyOwner"";
""4478_buyLand"" -> ""4478_processDevPayment"";
""4478_processBurn"" -> ""4478__burn"";
""4478_safeTransferFrom"" -> ""4478_safeTransferFrom"";
""4478_buyLandWithTokens"" -> ""4478_updateUsersLastAccess"";
""4478_transferFrom"" -> ""4478_process_swap"";
""4478_buyLandWithTokens"" -> ""4478_validateLand"";
""4478_p_update_action"" -> ""4478_processBurn"";
""4478_transferFrom"" -> ""4478_transferFrom"";
""4478_transferFrom"" -> ""4478__isApprovedOrOwner"";
""4478_buyLandWithTokens"" -> ""4478_validateTokenPurchase"";
""4478_setupPlotOwnership"" -> ""4478_setupZoomLvl"";
""4478_buyLand"" -> ""4478_calcPlayerDivs"";
""4478_safeTransferFrom"" -> ""4478__checkOnERC721Received"";
""4478_burn"" -> ""4478_ownerOf"";
""4478_buyCard"" -> ""4478_internal_transferFrom"";
""4478_buyLand"" -> ""4478_processPurchase"";
""4478_buyLand"" -> ""4478_processReferer"";
""4478_transferTokens"" -> ""4478_transferCards"";
""4478_transferCards"" -> ""4478__mint"";
""4478_buyCard"" -> ""4478_processDevPayment"";
""4478_buyLand"" -> ""4478_updateUsersLastAccess"";
""4478_processPurchase"" -> ""4478_setupPlotOwnership"";
""4478_processPurchase"" -> ""4478_totalSupply"";
""4478_buyLand"" -> ""4478_validateLand"";
""4478_p_update_action"" -> ""4478_ownerOf"";
""4478_transferCards"" -> ""4478_setupPlotOwnership"";
""4478_processPurchase"" -> ""4478__mint"";
""4478_buyCard"" -> ""4478_ownerOf"";
""4478_initPlayers"" -> ""4478_transferPlayer"";
}
"
0x1776e1f26f98b1a5df9cd347953a26dd3cb46671.sol,NumeraireBackend,"contract NumeraireBackend is StoppableShareable, NumeraireShared { address public delegateContract; bool public contractUpgradable = true; address[] public previousDelegates; string public standard = ; string public name = ; string public symbol = ; uint256 public decimals = 18; event DelegateChanged(address oldAddress, address newAddress); function NumeraireBackend(address[] _owners, uint256 _num_required, uint256 _initial_disbursement) StoppableShareable(_owners, _num_required) { totalSupply = 0; total_minted = 0; initial_disbursement = _initial_disbursement; deploy_time = block.timestamp; }",0,"subgraph cluster_1603_NumeraireBackend {
label=""NumeraireBackend"";
""1603_approve"" [label=""approve""];
""1603_numeraiTransfer"" [label=""numeraiTransfer""];
""1603_transfer"" [label=""transfer""];
""1603_createRound"" [label=""createRound""];
""1603_balanceOf"" [label=""balanceOf""];
""1603_NumeraireBackend"" [label=""NumeraireBackend""];
""1603_transferFrom"" [label=""transferFrom""];
""1603_stakeOnBehalf"" [label=""stakeOnBehalf""];
""1603_getTournament"" [label=""getTournament""];
""1603_getRound"" [label=""getRound""];
""1603_destroyStake"" [label=""destroyStake""];
""1603_disableContractUpgradability"" [label=""disableContractUpgradability""];
""1603_mint"" [label=""mint""];
""1603_getStake"" [label=""getStake""];
""1603_stake"" [label=""stake""];
""1603_releaseStake"" [label=""releaseStake""];
""1603_withdraw"" [label=""withdraw""];
""1603_changeApproval"" [label=""changeApproval""];
""1603_changeDelegate"" [label=""changeDelegate""];
""1603_claimTokens"" [label=""claimTokens""];
""1603_createTournament"" [label=""createTournament""];
""1603_stakeOnBehalf"" -> ""1603_onlyPayloadSize"";
""1603_transfer"" -> ""1603_stopInEmergency"";
""1603_changeApproval"" -> ""1603_stopInEmergency"";
""1603_approve"" -> ""1603_stopInEmergency"";
""1603_transferFrom"" -> ""1603_safeSubtract"";
""1603_claimTokens"" -> ""1603_onlyOwner"";
""1603_stake"" -> ""1603_stopInEmergency"";
""1603_destroyStake"" -> ""1603_stopInEmergency"";
""1603_transfer"" -> ""1603_onlyPayloadSize"";
""1603_transferFrom"" -> ""1603_isOwner"";
""1603_NumeraireBackend"" -> ""1603_StoppableShareable"";
""1603_transferFrom"" -> ""1603_safeAdd"";
""1603_transferFrom"" -> ""1603_onlyPayloadSize"";
""1603_numeraiTransfer"" -> ""1603_onlyPayloadSize"";
""1603_mint"" -> ""1603_stopInEmergency"";
""1603_transferFrom"" -> ""1603_stopInEmergency"";
""1603_disableContractUpgradability"" -> ""1603_onlyManyOwners"";
""1603_releaseStake"" -> ""1603_onlyPayloadSize"";
""1603_approve"" -> ""1603_onlyPayloadSize"";
""1603_changeApproval"" -> ""1603_onlyPayloadSize"";
""1603_withdraw"" -> ""1603_onlyPayloadSize"";
""1603_destroyStake"" -> ""1603_onlyPayloadSize"";
""1603_releaseStake"" -> ""1603_stopInEmergency"";
""1603_transfer"" -> ""1603_safeAdd"";
""1603_stakeOnBehalf"" -> ""1603_stopInEmergency"";
""1603_transfer"" -> ""1603_safeSubtract"";
""1603_changeDelegate"" -> ""1603_onlyManyOwners"";
}
"
0x0e8d6b471e332f140e7d9dbb99e5e3822f728da6.sol,ManagedToken,"contract ManagedToken is ERC20Token, MultiOwnable { bool public allowTransfers = false; bool public issuanceFinished = false; ITokenEventListener public eventListener; event AllowTransfersChanged(bool _newState); event Issue(address indexed _to, uint256 _value); event Destroy(address indexed _from, uint256 _value); event IssuanceFinished(); modifier transfersAllowed() { require(allowTransfers); _; }",0,"subgraph cluster_942_ManagedToken {
label=""ManagedToken"";
""942_decreaseApproval"" [label=""decreaseApproval""];
""942_destroy"" [label=""destroy""];
""942_transfer"" [label=""transfer""];
""942_increaseApproval"" [label=""increaseApproval""];
""942_hasListener"" [label=""hasListener""];
""942_transferFrom"" [label=""transferFrom""];
""942_finishIssuance"" [label=""finishIssuance""];
""942_issue"" [label=""issue""];
""942_ManagedToken"" [label=""ManagedToken""];
""942_setAllowTransfers"" [label=""setAllowTransfers""];
""942_setListener"" [label=""setListener""];
""942_setListener"" -> ""942_onlyOwner"";
""942_issue"" -> ""942_safeAdd"";
""942_issue"" -> ""942_canIssue"";
""942_transferFrom"" -> ""942_transferFrom"";
""942_increaseApproval"" -> ""942_safeAdd"";
""942_transfer"" -> ""942_transfersAllowed"";
""942_finishIssuance"" -> ""942_onlyOwner"";
""942_transferFrom"" -> ""942_hasListener"";
""942_issue"" -> ""942_onlyOwner"";
""942_transferFrom"" -> ""942_transfersAllowed"";
""942_transfer"" -> ""942_transfer"";
""942_decreaseApproval"" -> ""942_safeSub"";
""942_destroy"" -> ""942_safeSub"";
""942_transfer"" -> ""942_hasListener"";
""942_ManagedToken"" -> ""942__setOwners"";
""942_setAllowTransfers"" -> ""942_onlyOwner"";
}
"
0x5278852029f4fdf91eb2d40614ff49b4b4b7c765.sol,IFUM,"contract IFUM is Ownable, ERC20Burnable { string public name; string public symbol; uint8 public decimals; address private _crowdsale; bool private _freezed; mapping (address => bool) private _locked; constructor() public { symbol = ; name = ; decimals = 8; _crowdsale = address(0); _freezed = true; }",0,"subgraph cluster_1140_IFUM {
label=""IFUM"";
""1140_transfer"" [label=""transfer""];
""1140_isLocked"" [label=""isLocked""];
""1140_decreaseAllowance"" [label=""decreaseAllowance""];
""1140_constructor"" [label=""constructor""];
""1140_isFreezed"" [label=""isFreezed""];
""1140_lockAccount"" [label=""lockAccount""];
""1140_burn"" [label=""burn""];
""1140_burnFrom"" [label=""burnFrom""];
""1140_setCrowdsale"" [label=""setCrowdsale""];
""1140_transferFrom"" [label=""transferFrom""];
""1140_unfreeze"" [label=""unfreeze""];
""1140_increaseAllowance"" [label=""increaseAllowance""];
""1140_unlockAccount"" [label=""unlockAccount""];
""1140_approve"" [label=""approve""];
""1140_increaseAllowance"" -> ""1140_test"";
""1140_transferFrom"" -> ""1140_transferFrom"";
""1140_unlockAccount"" -> ""1140_isLocked"";
""1140_increaseAllowance"" -> ""1140_increaseAllowance"";
""1140_burnFrom"" -> ""1140_burnFrom"";
""1140_approve"" -> ""1140_test"";
""1140_burnFrom"" -> ""1140_test"";
""1140_transferFrom"" -> ""1140_test"";
""1140_lockAccount"" -> ""1140_isLocked"";
""1140_transfer"" -> ""1140_transfer"";
""1140_lockAccount"" -> ""1140_onlyOwner"";
""1140_setCrowdsale"" -> ""1140__mint"";
""1140_decreaseAllowance"" -> ""1140_decreaseAllowance"";
""1140_decreaseAllowance"" -> ""1140_test"";
""1140_transfer"" -> ""1140_test"";
""1140_unlockAccount"" -> ""1140_onlyOwner"";
""1140_burn"" -> ""1140_test"";
""1140_burn"" -> ""1140_burn"";
""1140_approve"" -> ""1140_approve"";
}
"
0xc398891b43f1b91158dca87c63a88b80d000c248.sol,IBIT,"contract IBIT is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 45 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 950000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 1000021e8; uint public target0drop = 5000000; uint public progress0drop = 0; address multisig = 0x723D0666908ADdc626C29407F0B5e7C0881b5185; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1261_IBIT {
label=""IBIT"";
""1261_add"" [label=""add""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_constructor"" [label=""constructor""];
""1261_fallback"" [label=""fallback""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_approve"" [label=""approve""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_allowance"" [label=""allowance""];
""1261_burn"" [label=""burn""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdraw"" [label=""withdraw""];
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_distr"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
}
"
0xde5b6358808e783df374d1039f483e6ac02c9a28.sol,DecentralizedDinar,"contract DecentralizedDinar is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 10000000000000000000000000000; balances[0x5f52Fa795e17647D1E635cCA8302bcdE00a4d66c] = _totalSupply; emit Transfer(address(0), 0x5f52Fa795e17647D1E635cCA8302bcdE00a4d66c, _totalSupply); }",0,"subgraph cluster_543_DecentralizedDinar {
label=""DecentralizedDinar"";
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_constructor"" [label=""constructor""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x28925299ee1edd8fd68316eaa64b651456694f0f.sol,ExToke,"contract ExToke is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint256 public totalEthInWei; uint256 public unitsOneEthCanBuy; address public fundsWallet; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ExToke() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000; unitsOneEthCanBuy = 1000000; balances[0x4498898856971DA7A5f4B848D52E071AFd1957c5] = _totalSupply; fundsWallet = msg.sender; Transfer(address(0), 0x4498898856971DA7A5f4B848D52E071AFd1957c5, _totalSupply); }",0,"subgraph cluster_613_ExToke {
label=""ExToke"";
""613_transferFrom"" [label=""transferFrom""];
""613_approve"" [label=""approve""];
""613_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""613_ExToke"" [label=""ExToke""];
""613_allowance"" [label=""allowance""];
""613_balanceOf"" [label=""balanceOf""];
""613_transfer"" [label=""transfer""];
""613_fallback"" [label=""fallback""];
""613_approveAndCall"" [label=""approveAndCall""];
""613_totalSupply"" [label=""totalSupply""];
""613_transfer"" -> ""613_safeSub"";
""613_transferAnyERC20Token"" -> ""613_onlyOwner"";
""613_transferFrom"" -> ""613_safeSub"";
""613_transfer"" -> ""613_safeAdd"";
""613_transferFrom"" -> ""613_safeAdd"";
}
"
0x18df60ddaeba4393e5cc6ecfc1e5bb1d20dd6239.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1094_MiniMeToken {
label=""MiniMeToken"";
""1094_min"" [label=""min""];
""1094_getValueAt"" [label=""getValueAt""];
""1094_fallback"" [label=""fallback""];
""1094_MiniMeToken"" [label=""MiniMeToken""];
""1094_updateValueAtNow"" [label=""updateValueAtNow""];
""1094_totalSupply"" [label=""totalSupply""];
""1094_approve"" [label=""approve""];
""1094_transferFrom"" [label=""transferFrom""];
""1094_transfer"" [label=""transfer""];
""1094_createCloneToken"" [label=""createCloneToken""];
""1094_approveAndCall"" [label=""approveAndCall""];
""1094_totalSupplyAt"" [label=""totalSupplyAt""];
""1094_balanceOfAt"" [label=""balanceOfAt""];
""1094_isContract"" [label=""isContract""];
""1094_destroyTokens"" [label=""destroyTokens""];
""1094_claimTokens"" [label=""claimTokens""];
""1094_allowance"" [label=""allowance""];
""1094_doTransfer"" [label=""doTransfer""];
""1094_balanceOf"" [label=""balanceOf""];
""1094_generateTokens"" [label=""generateTokens""];
""1094_enableTransfers"" [label=""enableTransfers""];
""1094_totalSupply"" -> ""1094_totalSupplyAt"";
""1094_destroyTokens"" -> ""1094_updateValueAtNow"";
""1094_balanceOfAt"" -> ""1094_getValueAt"";
""1094_transferFrom"" -> ""1094_doTransfer"";
""1094_doTransfer"" -> ""1094_balanceOfAt"";
""1094_doTransfer"" -> ""1094_isContract"";
""1094_doTransfer"" -> ""1094_updateValueAtNow"";
""1094_approveAndCall"" -> ""1094_approve"";
""1094_fallback"" -> ""1094_isContract"";
""1094_generateTokens"" -> ""1094_totalSupply"";
""1094_balanceOf"" -> ""1094_balanceOfAt"";
""1094_enableTransfers"" -> ""1094_onlyController"";
""1094_approve"" -> ""1094_isContract"";
""1094_totalSupplyAt"" -> ""1094_min"";
""1094_totalSupplyAt"" -> ""1094_getValueAt"";
""1094_claimTokens"" -> ""1094_onlyController"";
""1094_generateTokens"" -> ""1094_balanceOf"";
""1094_destroyTokens"" -> ""1094_balanceOf"";
""1094_transfer"" -> ""1094_doTransfer"";
""1094_generateTokens"" -> ""1094_updateValueAtNow"";
""1094_destroyTokens"" -> ""1094_totalSupply"";
""1094_balanceOfAt"" -> ""1094_min"";
""1094_generateTokens"" -> ""1094_onlyController"";
""1094_destroyTokens"" -> ""1094_onlyController"";
}
"
0x028ff933bd86bd4d699b1643477f858626482d35.sol,LUCKER,contract LUCKER is Ownable{ tokenTransfer public bebTokenTransfer; uint8 decimals = 18; uint256 opentime=now+3600; uint256 opensome; uint256 _opensome; uint256 BEBMAX; uint256 BEBtime; uint256 Numberofairdrops; address ownersto; struct luckuser{ uint256 _time; uint256 _eth; uint256 _beb; uint256 _bz; uint256 _romd; uint256 Bond; uint256 sumeth; uint256 sumbeb; },0,"subgraph cluster_843_LUCKER {
label=""LUCKER"";
""843_setAirdrop"" [label=""setAirdrop""];
""843_LUCKER"" [label=""LUCKER""];
""843_querBalance"" [label=""querBalance""];
""843_present"" [label=""present""];
""843_BEBwithdrawal"" [label=""BEBwithdrawal""];
""843_getLUCK"" [label=""getLUCK""];
""843_setLUCK"" [label=""setLUCK""];
""843_getTokenBalanceUser"" [label=""getTokenBalanceUser""];
""843_random"" [label=""random""];
""843_ETHwithdrawal"" [label=""ETHwithdrawal""];
""843_fallback"" [label=""fallback""];
""843_AirdropAuthorization"" [label=""AirdropAuthorization""];
""843_gettime"" [label=""gettime""];
""843_eth"" [label=""eth""];
""843_getTokenBalance"" [label=""getTokenBalance""];
""843_ETHwithdrawal"" -> ""843_onlyOwner"";
""843_setAirdrop"" -> ""843_onlyOwner"";
""843_BEBwithdrawal"" -> ""843_onlyOwner"";
""843_present"" -> ""843_random"";
""843_setLUCK"" -> ""843_onlyOwner"";
}
"
0x4c32322f353fcb459b5031701c0d775619f57e8a.sol,GAPPOICOIN,"contract GAPPOICOIN is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 334e6 * 1e8; uint256 public distributeAmount = 0; bool public mintingFinished = false; address public founder = 0x5A0013C649c19458a608C45b40f3b6ecafBa628C; address public gappoimaster= 0xfC5529D5b69506c0d757E9127fC3F22B31aEd283; address public activityFunds = 0x4DCdCdcFc85A97775C44c2aa3C0352524cFE5dd4; address public momosFunds = 0x7Df572DA7D93041264F21Ad265bF70C0F324f658; mapping(address => uint256) public balanceOf; mapping(address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed from, uint256 amount); event Mint(address indexed to, uint256 amount); event MintFinished(); function GAPPOICOIN() public { owner = activityFunds; balanceOf[founder] = totalSupply.mul(30).div(100); balanceOf[gappoimaster] = totalSupply.mul(10).div(100); balanceOf[activityFunds] = totalSupply.mul(30).div(100); balanceOf[momosFunds] = totalSupply.mul(30).div(100); }",0,"subgraph cluster_1895_GAPPOICOIN {
label=""GAPPOICOIN"";
""1895_isContract"" [label=""isContract""];
""1895_transferFrom"" [label=""transferFrom""];
""1895_decimals"" [label=""decimals""];
""1895_autoDistribute"" [label=""autoDistribute""];
""1895_transferToContract"" [label=""transferToContract""];
""1895_freezeAccounts"" [label=""freezeAccounts""];
""1895_distributeAirdrop"" [label=""distributeAirdrop""];
""1895_GAPPOICOIN"" [label=""GAPPOICOIN""];
""1895_fallback"" [label=""fallback""];
""1895_mint"" [label=""mint""];
""1895_burn"" [label=""burn""];
""1895_balanceOf"" [label=""balanceOf""];
""1895_approve"" [label=""approve""];
""1895_collectTokens"" [label=""collectTokens""];
""1895_setDistributeAmount"" [label=""setDistributeAmount""];
""1895_allowance"" [label=""allowance""];
""1895_finishMinting"" [label=""finishMinting""];
""1895_lockupAccounts"" [label=""lockupAccounts""];
""1895_symbol"" [label=""symbol""];
""1895_name"" [label=""name""];
""1895_transfer"" [label=""transfer""];
""1895_totalSupply"" [label=""totalSupply""];
""1895_transferToAddress"" [label=""transferToAddress""];
""1895_transfer"" -> ""1895_isContract"";
""1895_freezeAccounts"" -> ""1895_onlyOwner"";
""1895_mint"" -> ""1895_canMint"";
""1895_lockupAccounts"" -> ""1895_onlyOwner"";
""1895_finishMinting"" -> ""1895_canMint"";
""1895_mint"" -> ""1895_onlyOwner"";
""1895_transfer"" -> ""1895_transferToContract"";
""1895_fallback"" -> ""1895_autoDistribute"";
""1895_setDistributeAmount"" -> ""1895_onlyOwner"";
""1895_collectTokens"" -> ""1895_onlyOwner"";
""1895_burn"" -> ""1895_onlyOwner"";
""1895_transfer"" -> ""1895_transferToAddress"";
""1895_finishMinting"" -> ""1895_onlyOwner"";
}
"
0x5c0669c6718bf35112d4e643fe80bf7fb06dedeb.sol,NOUR,"contract NOUR { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",0,"subgraph cluster_463_NOUR {
label=""NOUR"";
""463_allowance"" [label=""allowance""];
""463_constructor"" [label=""constructor""];
""463_balanceOf"" [label=""balanceOf""];
""463_setLock"" [label=""setLock""];
""463_approve"" [label=""approve""];
""463_transfer"" [label=""transfer""];
""463_transferOwnership"" [label=""transferOwnership""];
""463_transferFrom"" [label=""transferFrom""];
""463_setLock"" -> ""463_onlyOwner"";
""463_transferOwnership"" -> ""463_onlyOwner"";
}
"
0x77fa1d1ded3f4bed737e9ae870a6f3605445df9c.sol,CryptoPokemon,contract CryptoPokemon { using SafeMath for uint256; mapping (address => bool) private admins; mapping (uint => uint256) public levels; mapping (uint => bool) private lock; address contractCreator; address devFeeAddress; address tournamentPrizeAddress; function CryptoPokemon () public { contractCreator = msg.sender; devFeeAddress = 0xFb2D26b0caa4C331bd0e101460ec9dbE0A4783A4; tournamentPrizeAddress = 0xC6784e712229087fC91E0c77fcCb6b2F1fDE2Dc2; admins[contractCreator] = true; },0,"subgraph cluster_675_CryptoPokemon {
label=""CryptoPokemon"";
""675_removeLock"" [label=""removeLock""];
""675_getPokemonCurrentPrice"" [label=""getPokemonCurrentPrice""];
""675_deletePokemon"" [label=""deletePokemon""];
""675_GetGamestatus"" [label=""GetGamestatus""];
""675_getPokemonLevel"" [label=""getPokemonLevel""];
""675_getPokemonDetails"" [label=""getPokemonDetails""];
""675_settournamentPrizeAddress"" [label=""settournamentPrizeAddress""];
""675_addPokemon"" [label=""addPokemon""];
""675_removeAdmin"" [label=""removeAdmin""];
""675_pauseGame"" [label=""pauseGame""];
""675_getPokemonOwner"" [label=""getPokemonOwner""];
""675_totalSupply"" [label=""totalSupply""];
""675_unPauseGame"" [label=""unPauseGame""];
""675_addAdmin"" [label=""addAdmin""];
""675_purchasePokemon"" [label=""purchasePokemon""];
""675_setOwner"" [label=""setOwner""];
""675_setdevFeeAddress"" [label=""setdevFeeAddress""];
""675_CryptoPokemon"" [label=""CryptoPokemon""];
""675_setPokemon"" [label=""setPokemon""];
""675_addLock"" [label=""addLock""];
""675_getPokemonLock"" [label=""getPokemonLock""];
""675_addAdmin"" -> ""675_onlyContractCreator"";
""675_settournamentPrizeAddress"" -> ""675_onlyContractCreator"";
""675_removeAdmin"" -> ""675_onlyContractCreator"";
""675_addPokemon"" -> ""675_onlyAdmins"";
""675_setdevFeeAddress"" -> ""675_onlyContractCreator"";
""675_deletePokemon"" -> ""675_onlyContractCreator"";
""675_unPauseGame"" -> ""675_onlyContractCreator"";
""675_setOwner"" -> ""675_onlyContractCreator"";
""675_pauseGame"" -> ""675_onlyContractCreator"";
""675_removeLock"" -> ""675_onlyContractCreator"";
""675_setPokemon"" -> ""675_onlyContractCreator"";
""675_addLock"" -> ""675_onlyContractCreator"";
}
"
0xeabe0704fbcc5fc7dd5f43c10fc158de0c466e69.sol,GeneInfomationToken,contract GeneInfomationToken is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; function GeneInfomationToken() { balances[msg.sender] = 1000000000000000000000000000; totalSupply = 1000000000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 10; fundsWallet = msg.sender; },0,"subgraph cluster_421_GeneInfomationToken {
label=""GeneInfomationToken"";
""421_GeneInfomationToken"" [label=""GeneInfomationToken""];
""421_fallback"" [label=""fallback""];
""421_approveAndCall"" [label=""approveAndCall""];
}
"
0x5cc0076a6bbf43344a7923c5cca40f5bdff2970e.sol,LiteToken,"contract LiteToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function LiteToken() public { symbol = ; name = ; decimals = 4; _totalSupply = 84000000000000; balances[0x186d32c30f1DeFfF1eeDb34Ee661426918243545] = _totalSupply; emit Transfer(address(0), 0x186d32c30f1DeFfF1eeDb34Ee661426918243545, _totalSupply); }",0,"subgraph cluster_543_LiteToken {
label=""LiteToken"";
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_LiteToken"" [label=""LiteToken""];
""543_transfer"" [label=""transfer""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x52d208f3ff79985b5a50a55fd35334f924a9f643.sol,OSSCardToken,"contract OSSCardToken is ERC721 { event Birth(uint256 tokenId, string slug, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address owner, string slug); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.0001 ether; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public cardIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public cardIndexToApproved; mapping (uint256 => uint256) private cardIndexToPrice; address public ceoAddress; address public cooAddress; struct Card { string slug; }",0,"subgraph cluster_919_OSSCardToken {
label=""OSSCardToken"";
""919_transfer"" [label=""transfer""];
""919_setCEO"" [label=""setCEO""];
""919_symbol"" [label=""symbol""];
""919_transferFrom"" [label=""transferFrom""];
""919_priceOf"" [label=""priceOf""];
""919_setCOO"" [label=""setCOO""];
""919__approved"" [label=""_approved""];
""919_ownerOf"" [label=""ownerOf""];
""919_takeOwnership"" [label=""takeOwnership""];
""919_payout"" [label=""payout""];
""919_approve"" [label=""approve""];
""919_tokensOfOwner"" [label=""tokensOfOwner""];
""919_totalSupply"" [label=""totalSupply""];
""919__payout"" [label=""_payout""];
""919_name"" [label=""name""];
""919__createCard"" [label=""_createCard""];
""919_implementsERC721"" [label=""implementsERC721""];
""919_OSSCardToken"" [label=""OSSCardToken""];
""919__transfer"" [label=""_transfer""];
""919_balanceOf"" [label=""balanceOf""];
""919_createCard"" [label=""createCard""];
""919_purchase"" [label=""purchase""];
""919__addressNotNull"" [label=""_addressNotNull""];
""919__owns"" [label=""_owns""];
""919_getCard"" [label=""getCard""];
""919_purchase"" -> ""919__transfer"";
""919_transfer"" -> ""919__transfer"";
""919__createCard"" -> ""919__transfer"";
""919_transferFrom"" -> ""919__owns"";
""919_setCOO"" -> ""919_onlyCEO"";
""919_takeOwnership"" -> ""919__transfer"";
""919_transferFrom"" -> ""919__addressNotNull"";
""919_transferFrom"" -> ""919__transfer"";
""919_tokensOfOwner"" -> ""919_balanceOf"";
""919_transfer"" -> ""919__owns"";
""919_createCard"" -> ""919__createCard"";
""919_payout"" -> ""919__payout"";
""919_createCard"" -> ""919_onlyCOO"";
""919_tokensOfOwner"" -> ""919_totalSupply"";
""919_setCEO"" -> ""919_onlyCEO"";
""919_payout"" -> ""919_onlyCLevel"";
""919_purchase"" -> ""919__addressNotNull"";
""919_transferFrom"" -> ""919__approved"";
""919_approve"" -> ""919__owns"";
""919_takeOwnership"" -> ""919__approved"";
""919_transfer"" -> ""919__addressNotNull"";
""919_takeOwnership"" -> ""919__addressNotNull"";
}
"
0x287fe6172eec4cde6e76dd85e65e5b3ea4760972.sol,MinterRole,contract MinterRole { using Roles for Roles.Role; event MinterAdded(address indexed account); event MinterRemoved(address indexed account); Roles.Role private _minters; constructor () internal { _addMinter(msg.sender); },0,"subgraph cluster_953_MinterRole {
label=""MinterRole"";
""953_isMinter"" [label=""isMinter""];
""953_renounceMinter"" [label=""renounceMinter""];
""953_constructor"" [label=""constructor""];
""953_addMinter"" [label=""addMinter""];
""953__addMinter"" [label=""_addMinter""];
""953__removeMinter"" [label=""_removeMinter""];
""953_renounceMinter"" -> ""953__removeMinter"";
""953_constructor"" -> ""953__addMinter"";
""953_addMinter"" -> ""953__addMinter"";
""953_addMinter"" -> ""953_onlyMinter"";
}
"
0x84cd9cf60bcb44f7bab8b75e6f03614c2c3b22b7.sol,ESmart,contract ESmart { uint constant public INVESTMENT = 0.05 ether; uint constant private START_TIME = 1541435400; address constant private TECH = 0x9A5B6966379a61388068bb765c518E5bC4D9B509; address constant private PROMO = 0xD6104cEca65db37925541A800870aEe09C8Fd78D; address constant private LAST_FUND = 0x357b9046f99eEC7E705980F328F00BAab4b3b6Be; uint constant public JACKPOT_PERCENT = 1; uint constant public TECH_PERCENT = 7; uint constant public PROMO_PERCENT = 13; uint constant public LAST_FUND_PERCENT = 10; uint constant public MAX_IDLE_TIME = 10 minutes; uint constant public NEXT_ROUND_TIME = 30 minutes; uint constant public MULTIPLIER = 120; struct Deposit { address depositor; uint128 deposit; uint128 expect; },0,"subgraph cluster_779_ESmart {
label=""ESmart"";
""779_getQueueLength"" [label=""getQueueLength""];
""779_getDeposits"" [label=""getDeposits""];
""779_proceedToNewStage"" [label=""proceedToNewStage""];
""779_pay"" [label=""pay""];
""779_addDeposit"" [label=""addDeposit""];
""779_getStartTime"" [label=""getStartTime""];
""779_getDeposit"" [label=""getDeposit""];
""779_checkAndUpdateStage"" [label=""checkAndUpdateStage""];
""779_withdrawPrize"" [label=""withdrawPrize""];
""779_getDepositsCount"" [label=""getDepositsCount""];
""779_getStageStartTime"" [label=""getStageStartTime""];
""779_push"" [label=""push""];
""779_fallback"" [label=""fallback""];
""779_getCurrentStageByTime"" [label=""getCurrentStageByTime""];
""779_fallback"" -> ""779_pay"";
""779_getStartTime"" -> ""779_getStageStartTime"";
""779_withdrawPrize"" -> ""779_getCurrentStageByTime"";
""779_fallback"" -> ""779_checkAndUpdateStage"";
""779_fallback"" -> ""779_withdrawPrize"";
""779_fallback"" -> ""779_addDeposit"";
""779_checkAndUpdateStage"" -> ""779_getCurrentStageByTime"";
""779_getDeposits"" -> ""779_getDepositsCount"";
""779_checkAndUpdateStage"" -> ""779_proceedToNewStage"";
""779_fallback"" -> ""779_getStartTime"";
""779_getStartTime"" -> ""779_getCurrentStageByTime"";
""779_proceedToNewStage"" -> ""779_getStageStartTime"";
""779_addDeposit"" -> ""779_push"";
}
"
0x719502d2755fcf269da27d9f07c96d68a2f3572a.sol,ElementeumTokenProxy,"contract ElementeumTokenProxy is Ownable { ElementeumToken public token; function ElementeumTokenProxy(uint256 _cap, address[] _founderAccounts, address[] _operationsAccounts) public Ownable() { token = new ElementeumToken(_cap, _founderAccounts, _operationsAccounts); }",0,"subgraph cluster_874_ElementeumTokenProxy {
label=""ElementeumTokenProxy"";
""874_finishMinting"" [label=""finishMinting""];
""874_ElementeumTokenProxy"" [label=""ElementeumTokenProxy""];
""874_totalSupply"" [label=""totalSupply""];
""874_mint"" [label=""mint""];
""874_cap"" [label=""cap""];
""874_finishMinting"" -> ""874_onlyOwner"";
""874_mint"" -> ""874_onlyOwner"";
""874_ElementeumTokenProxy"" -> ""874_Ownable"";
}
"
0x1a8b802d4d89f763e940f93e885a86a41ee89c9d.sol,EUROPEANMONEY,contract EUROPEANMONEY { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 2; uint public _totalSupply = 90000000000000000; uint256 public RATE = 1; bool public isMinting = true; bool public isExchangeListed = false; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_540_EUROPEANMONEY {
label=""EUROPEANMONEY"";
""540_fallback"" [label=""fallback""];
""540_endCrowdsale"" [label=""endCrowdsale""];
""540_transfer"" [label=""transfer""];
""540_transferFrom"" [label=""transferFrom""];
""540_createTokens"" [label=""createTokens""];
""540_allowance"" [label=""allowance""];
""540_approve"" [label=""approve""];
""540_balanceOf"" [label=""balanceOf""];
""540_constructor"" [label=""constructor""];
""540_totalSupply"" [label=""totalSupply""];
""540_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""540_burnTokens"" [label=""burnTokens""];
""540_endCrowdsale"" -> ""540_onlyOwner"";
""540_changeCrowdsaleRate"" -> ""540_onlyOwner"";
""540_burnTokens"" -> ""540_onlyOwner"";
""540_fallback"" -> ""540_createTokens"";
}
"
0x533eaf8dc318c54c05d18a54a299f32e05d30a43.sol,DING,"contract DING is ERC223Token, Owned{ string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public tokenRemained = 2 * (10 ** 9) * (10 ** 18); uint256 public totalSupply = 2 * (10 ** 9) * (10 ** 18); bool public pause=false; mapping(address => bool) lockAddresses; function DING(){ balances[0xd8686d2aB1a65149FDd4ee36c60d161c274C41e0]= totalSupply; emit Transfer(0x0,0xd8686d2aB1a65149FDd4ee36c60d161c274C41e0,totalSupply); }",0,"subgraph cluster_805_DING {
label=""DING"";
""805_DING"" [label=""DING""];
""805_getETH"" [label=""getETH""];
""805_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""805_lock"" [label=""lock""];
""805_fallback"" [label=""fallback""];
""805_is_contract_paused"" [label=""is_contract_paused""];
""805_pauseContract"" [label=""pauseContract""];
""805_resumeContract"" [label=""resumeContract""];
""805_am_I_locked"" [label=""am_I_locked""];
""805_unlock"" [label=""unlock""];
""805_transfer"" [label=""transfer""];
""805_changeOwner"" [label=""changeOwner""];
""805_pauseContract"" -> ""805_onlyOwner"";
""805_lock"" -> ""805_onlyOwner"";
""805_transferAnyERC20Token"" -> ""805_onlyOwner"";
""805_transfer"" -> ""805_transfer"";
""805_unlock"" -> ""805_onlyOwner"";
""805_transfer"" -> ""805_transferable"";
""805_getETH"" -> ""805_onlyOwner"";
""805_resumeContract"" -> ""805_onlyOwner"";
""805_changeOwner"" -> ""805_onlyOwner"";
}
"
0x58db9e7a4afca731d824eeefa55ce37666aa3eaf.sol,FoMoGame,"contract FoMoGame is modularLong { using SafeMath for *; using NameFilter for string; using F3DKeysCalcLong for uint256; ForwarderInterface constant private Team_Forwarder = ForwarderInterface(0xfe373e4c13ed07962ffa546d1f0be2298d5493b0); PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x463a61560e0EFF1a7ec771eeb9fd1c93fb075c2E); address private backup = 0x7298EFD119A830edab6C442632EEff14292609B0; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 private rndGap_ = 0; uint256 constant private rndInit_ = 1 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 24 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(36,0); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(66,0); fees_[3] = F3Ddatasets.TeamFee(50,0); potSplit_[0] = F3Ddatasets.PotSplit(20,0); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(40,0); potSplit_[3] = F3Ddatasets.PotSplit(45,0); }",0,"subgraph cluster_4273_FoMoGame {
label=""FoMoGame"";
""4273_airdrop"" [label=""airdrop""];
""4273_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4273_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4273_buyXid"" [label=""buyXid""];
""4273_getPlayerVaults"" [label=""getPlayerVaults""];
""4273_verifyTeam"" [label=""verifyTeam""];
""4273_endRound"" [label=""endRound""];
""4273_endTx"" [label=""endTx""];
""4273_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4273_constructor"" [label=""constructor""];
""4273_registerNameXID"" [label=""registerNameXID""];
""4273_potSwap"" [label=""potSwap""];
""4273_withdraw"" [label=""withdraw""];
""4273_activate"" [label=""activate""];
""4273_iWantXKeys"" [label=""iWantXKeys""];
""4273_updateMasks"" [label=""updateMasks""];
""4273_reLoadXname"" [label=""reLoadXname""];
""4273_withdrawEarnings"" [label=""withdrawEarnings""];
""4273_reLoadCore"" [label=""reLoadCore""];
""4273_managePlayer"" [label=""managePlayer""];
""4273_buyXname"" [label=""buyXname""];
""4273_buyXaddr"" [label=""buyXaddr""];
""4273_fallback"" [label=""fallback""];
""4273_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4273_determinePID"" [label=""determinePID""];
""4273_core"" [label=""core""];
""4273_calcKeysReceived"" [label=""calcKeysReceived""];
""4273_registerNameXaddr"" [label=""registerNameXaddr""];
""4273_reLoadXid"" [label=""reLoadXid""];
""4273_distributeExternal"" [label=""distributeExternal""];
""4273_distributeInternal"" [label=""distributeInternal""];
""4273_registerNameXname"" [label=""registerNameXname""];
""4273_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4273_reLoadXaddr"" [label=""reLoadXaddr""];
""4273_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4273_getBuyPrice"" [label=""getBuyPrice""];
""4273_updateTimer"" [label=""updateTimer""];
""4273_buyCore"" [label=""buyCore""];
""4273_updateGenVault"" [label=""updateGenVault""];
""4273_getTimeLeft"" [label=""getTimeLeft""];
""4273_withdraw"" -> ""4273_endRound"";
""4273_fallback"" -> ""4273_buyCore"";
""4273_core"" -> ""4273_distributeExternal"";
""4273_reLoadCore"" -> ""4273_core"";
""4273_reLoadXaddr"" -> ""4273_isWithinLimits"";
""4273_reLoadXid"" -> ""4273_reLoadCore"";
""4273_reLoadXname"" -> ""4273_isHuman"";
""4273_buyXid"" -> ""4273_buyCore"";
""4273_withdraw"" -> ""4273_isActivated"";
""4273_distributeInternal"" -> ""4273_updateMasks"";
""4273_fallback"" -> ""4273_isWithinLimits"";
""4273_reLoadXid"" -> ""4273_isHuman"";
""4273_buyXname"" -> ""4273_isHuman"";
""4273_reLoadCore"" -> ""4273_endRound"";
""4273_withdrawEarnings"" -> ""4273_updateGenVault"";
""4273_buyXname"" -> ""4273_isActivated"";
""4273_reLoadXid"" -> ""4273_verifyTeam"";
""4273_withdraw"" -> ""4273_withdrawEarnings"";
""4273_buyXid"" -> ""4273_isWithinLimits"";
""4273_core"" -> ""4273_distributeInternal"";
""4273_buyXid"" -> ""4273_determinePID"";
""4273_core"" -> ""4273_airdrop"";
""4273_getPlayerInfoByAddress"" -> ""4273_calcUnMaskedEarnings"";
""4273_core"" -> ""4273_endTx"";
""4273_buyXaddr"" -> ""4273_isActivated"";
""4273_reLoadXaddr"" -> ""4273_isHuman"";
""4273_managePlayer"" -> ""4273_updateGenVault"";
""4273_getPlayerVaults"" -> ""4273_getPlayerVaultsHelper"";
""4273_fallback"" -> ""4273_isActivated"";
""4273_buyXaddr"" -> ""4273_verifyTeam"";
""4273_registerNameXaddr"" -> ""4273_isHuman"";
""4273_core"" -> ""4273_updateTimer"";
""4273_reLoadXaddr"" -> ""4273_verifyTeam"";
""4273_buyXaddr"" -> ""4273_buyCore"";
""4273_buyXname"" -> ""4273_verifyTeam"";
""4273_reLoadXid"" -> ""4273_isActivated"";
""4273_reLoadCore"" -> ""4273_withdrawEarnings"";
""4273_fallback"" -> ""4273_determinePID"";
""4273_buyXid"" -> ""4273_isActivated"";
""4273_buyXid"" -> ""4273_isHuman"";
""4273_registerNameXname"" -> ""4273_isHuman"";
""4273_reLoadXname"" -> ""4273_verifyTeam"";
""4273_updateGenVault"" -> ""4273_calcUnMaskedEarnings"";
""4273_core"" -> ""4273_managePlayer"";
""4273_fallback"" -> ""4273_isHuman"";
""4273_buyCore"" -> ""4273_core"";
""4273_withdraw"" -> ""4273_isHuman"";
""4273_buyCore"" -> ""4273_endRound"";
""4273_buyXaddr"" -> ""4273_determinePID"";
""4273_registerNameXID"" -> ""4273_isHuman"";
""4273_buyXname"" -> ""4273_determinePID"";
""4273_reLoadXname"" -> ""4273_isWithinLimits"";
""4273_buyXaddr"" -> ""4273_isHuman"";
""4273_reLoadXaddr"" -> ""4273_isActivated"";
""4273_reLoadXaddr"" -> ""4273_reLoadCore"";
""4273_buyXaddr"" -> ""4273_isWithinLimits"";
""4273_getPlayerVaults"" -> ""4273_calcUnMaskedEarnings"";
""4273_reLoadXid"" -> ""4273_isWithinLimits"";
""4273_buyXname"" -> ""4273_buyCore"";
""4273_reLoadXname"" -> ""4273_reLoadCore"";
""4273_buyXid"" -> ""4273_verifyTeam"";
""4273_reLoadXname"" -> ""4273_isActivated"";
""4273_buyXname"" -> ""4273_isWithinLimits"";
}
"
0xf363abeedd0402de170a6f2bceb920db37f8b8cb.sol,Roto2coin,"contract Roto2coin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Roto2coin() public { symbol = ; name = ; decimals = 18; _totalSupply = 288000000000000000000000000000000; balances[0xFE221B0f1aCe6f41A4E19A7a8ef6487b6eE3f7ca] = _totalSupply; Transfer(address(0), 0xFE221B0f1aCe6f41A4E19A7a8ef6487b6eE3f7ca, _totalSupply); }",0,"subgraph cluster_543_Roto2coin {
label=""Roto2coin"";
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_Roto2coin"" [label=""Roto2coin""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0xedb94888eff041eb50c9fc92c360f66afb3b94c5.sol,ExoplanetToken,"contract ExoplanetToken is ERC721 { using SafeMath for uint256; event Birth(uint256 indexed tokenId, string name, uint32 numOfTokensBonusOnPurchase, address owner); event TokenSold(uint256 tokenId, uint256 oldPriceInEther, uint256 newPriceInEther, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); event ContractUpgrade(address newContract); string public constant NAME = ; string public constant SYMBOL = ; string public constant BASE_URL = ""https: uint32 private constant NUM_EXOPLANETS_LIMIT = 4700; uint256 private constant STEP_1 = 5.0 ether; uint256 private constant STEP_2 = 10.0 ether; uint256 private constant STEP_3 = 26.0 ether; uint256 private constant STEP_4 = 36.0 ether; uint256 private constant STEP_5 = 47.0 ether; uint256 private constant STEP_6 = 59.0 ether; uint256 private constant STEP_7 = 67.85 ether; uint256 private constant STEP_8 = 76.67 ether; mapping (uint256 => address) public currentOwner; mapping (address => uint256) private numOwnedTokens; mapping (uint256 => address) public approvedToTransfer; mapping (uint256 => uint256) private currentPrice; address public ceoAddress; address public cooAddress; bool public inPresaleMode = true; bool public paused = false; address public newContractAddress; struct ExoplanetRec { uint8 lifeRate; uint32 priceInExoTokens; uint32 numOfTokensBonusOnPurchase; string name; string cryptoMatch; string techBonus1; string techBonus2; string techBonus3; string scientificData; }",0,"subgraph cluster_1819_ExoplanetToken {
label=""ExoplanetToken"";
""1819__transfer"" [label=""_transfer""];
""1819_setScientificData"" [label=""setScientificData""];
""1819_tokenURI"" [label=""tokenURI""];
""1819_getName"" [label=""getName""];
""1819_setNewAddress"" [label=""setNewAddress""];
""1819_setCOO"" [label=""setCOO""];
""1819_setCEO"" [label=""setCEO""];
""1819_getLifeRate"" [label=""getLifeRate""];
""1819_totalSupply"" [label=""totalSupply""];
""1819_setPresaleMode"" [label=""setPresaleMode""];
""1819_tokensOfOwner"" [label=""tokensOfOwner""];
""1819_getPriceInExoTokens"" [label=""getPriceInExoTokens""];
""1819_balanceOf"" [label=""balanceOf""];
""1819_priceOf"" [label=""priceOf""];
""1819_createContractExoplanet"" [label=""createContractExoplanet""];
""1819_setTechBonus2"" [label=""setTechBonus2""];
""1819_ExoplanetToken"" [label=""ExoplanetToken""];
""1819_payoutPartial"" [label=""payoutPartial""];
""1819_setPriceInExoTokens"" [label=""setPriceInExoTokens""];
""1819_approved"" [label=""approved""];
""1819_setTechBonus1"" [label=""setTechBonus1""];
""1819_getCryptoMatch"" [label=""getCryptoMatch""];
""1819_name"" [label=""name""];
""1819_getTechBonus1"" [label=""getTechBonus1""];
""1819_payout"" [label=""payout""];
""1819_pause"" [label=""pause""];
""1819_owns"" [label=""owns""];
""1819_purchase"" [label=""purchase""];
""1819_transfer"" [label=""transfer""];
""1819__createExoplanet"" [label=""_createExoplanet""];
""1819_ownerOf"" [label=""ownerOf""];
""1819_getScientificData"" [label=""getScientificData""];
""1819_getTechBonus2"" [label=""getTechBonus2""];
""1819_getNumOfTokensBonusOnPurchase"" [label=""getNumOfTokensBonusOnPurchase""];
""1819_getExoplanet"" [label=""getExoplanet""];
""1819_approve"" [label=""approve""];
""1819_implementsERC721"" [label=""implementsERC721""];
""1819_bytes32ToString"" [label=""bytes32ToString""];
""1819_symbol"" [label=""symbol""];
""1819_getTechBonus3"" [label=""getTechBonus3""];
""1819_transferFrom"" [label=""transferFrom""];
""1819_uintToBytes32"" [label=""uintToBytes32""];
""1819_transferUnownedPlanet"" [label=""transferUnownedPlanet""];
""1819_addressNotNull"" [label=""addressNotNull""];
""1819_unpause"" [label=""unpause""];
""1819_appendNumToString"" [label=""appendNumToString""];
""1819_numToString"" [label=""numToString""];
""1819_setPriceInEth"" [label=""setPriceInEth""];
""1819_setTechBonus3"" [label=""setTechBonus3""];
""1819_takeOwnership"" [label=""takeOwnership""];
""1819_takeOwnership"" -> ""1819_whenNotPaused"";
""1819_transfer"" -> ""1819__transfer"";
""1819_transferFrom"" -> ""1819_whenNotPaused"";
""1819__createExoplanet"" -> ""1819__transfer"";
""1819_numToString"" -> ""1819_uintToBytes32"";
""1819_purchase"" -> ""1819_presaleModeActive"";
""1819_unpause"" -> ""1819_onlyCEO"";
""1819_transferFrom"" -> ""1819_approved"";
""1819_tokensOfOwner"" -> ""1819_totalSupply"";
""1819_setPresaleMode"" -> ""1819_onlyCEO"";
""1819_setPriceInEth"" -> ""1819_owns"";
""1819__createExoplanet"" -> ""1819_totalSupply"";
""1819_setTechBonus1"" -> ""1819_owns"";
""1819_setTechBonus2"" -> ""1819_owns"";
""1819_payoutPartial"" -> ""1819_onlyCLevel"";
""1819_appendNumToString"" -> ""1819_numToString"";
""1819_setScientificData"" -> ""1819_onlyCLevel"";
""1819_transferFrom"" -> ""1819_addressNotNull"";
""1819_transferUnownedPlanet"" -> ""1819_onlyCLevel"";
""1819_approve"" -> ""1819_owns"";
""1819_takeOwnership"" -> ""1819_approved"";
""1819_takeOwnership"" -> ""1819_addressNotNull"";
""1819_setTechBonus3"" -> ""1819_owns"";
""1819_transfer"" -> ""1819_addressNotNull"";
""1819_numToString"" -> ""1819_bytes32ToString"";
""1819_pause"" -> ""1819_onlyCEO"";
""1819_tokensOfOwner"" -> ""1819_balanceOf"";
""1819_setPriceInExoTokens"" -> ""1819_owns"";
""1819_createContractExoplanet"" -> ""1819__createExoplanet"";
""1819_transfer"" -> ""1819_whenNotPaused"";
""1819_setPriceInExoTokens"" -> ""1819_afterPresaleMode"";
""1819_tokenURI"" -> ""1819_appendNumToString"";
""1819_setNewAddress"" -> ""1819_onlyCEO"";
""1819_setCEO"" -> ""1819_onlyCEO"";
""1819_purchase"" -> ""1819__transfer"";
""1819_setPriceInEth"" -> ""1819_afterPresaleMode"";
""1819_takeOwnership"" -> ""1819__transfer"";
""1819_transfer"" -> ""1819_owns"";
""1819_pause"" -> ""1819_whenNotPaused"";
""1819_createContractExoplanet"" -> ""1819_onlyCLevel"";
""1819_setCOO"" -> ""1819_onlyCEO"";
""1819_unpause"" -> ""1819_whenPaused"";
""1819_transferUnownedPlanet"" -> ""1819__transfer"";
""1819_setNewAddress"" -> ""1819_whenPaused"";
""1819_transferFrom"" -> ""1819__transfer"";
""1819_payout"" -> ""1819_onlyCLevel"";
""1819_purchase"" -> ""1819_whenNotPaused"";
""1819_purchase"" -> ""1819_addressNotNull"";
}
"
0x0e73fac981d22a0511b42f757186c3514ce60c4e.sol,Htlc,"contract Htlc { enum State { Created, Refunded, Redeemed }",0,"subgraph cluster_647_Htlc {
label=""Htlc"";
""647_batchCreateChannel"" [label=""batchCreateChannel""];
""647_refundChannel"" [label=""refundChannel""];
""647__setupChannel"" [label=""_setupChannel""];
""647_createChannel"" [label=""createChannel""];
""647_changeExchangeStatus"" [label=""changeExchangeStatus""];
""647_batchRefundChannel"" [label=""batchRefundChannel""];
""647_changeExchangeOperator"" [label=""changeExchangeOperator""];
""647_batchRedeemChannel"" [label=""batchRedeemChannel""];
""647_createChannelId"" [label=""createChannelId""];
""647_Htlc"" [label=""Htlc""];
""647_changeCommissionRecipient"" [label=""changeCommissionRecipient""];
""647_redeemChannel"" [label=""redeemChannel""];
""647_batchCreateChannel"" -> ""647__setupChannel"";
""647_batchRedeemChannel"" -> ""647_redeemChannel"";
""647_createChannel"" -> ""647__setupChannel"";
""647_changeExchangeOperator"" -> ""647_only_exchange_operator"";
""647_changeCommissionRecipient"" -> ""647_only_exchange_operator"";
""647_batchRefundChannel"" -> ""647_refundChannel"";
""647__setupChannel"" -> ""647_createChannelId"";
""647_changeExchangeStatus"" -> ""647_only_exchange_operator"";
}
"
0x3fc09ff5239c317acaa88658ceb68cc24728bc93.sol,QuickRoi,"contract QuickRoi { using SafeMath for uint256; mapping(address => uint256) investments; mapping(address => uint256) joined; mapping(address => uint256) withdrawals; mapping(address => uint256) referrer; uint256 public step = 33; uint256 public minimum = 10 finney; uint256 public stakingRequirement = 2 ether; address public ownerWallet; address public owner; event Invest(address investor, uint256 amount); event Withdraw(address investor, uint256 amount); event Bounty(address hunter, uint256 amount); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() public { owner = msg.sender; ownerWallet = msg.sender; }",0,"subgraph cluster_446_QuickRoi {
label=""QuickRoi"";
""446_transferOwnership"" [label=""transferOwnership""];
""446_invest"" [label=""invest""];
""446_withdraw"" [label=""withdraw""];
""446_fallback"" [label=""fallback""];
""446_constructor"" [label=""constructor""];
""446_getBalance"" [label=""getBalance""];
""446_bounty"" [label=""bounty""];
""446_checkReferral"" [label=""checkReferral""];
""446_checkInvestments"" [label=""checkInvestments""];
""446_checkWithdrawals"" [label=""checkWithdrawals""];
""446_checkBalance"" [label=""checkBalance""];
""446_bounty"" -> ""446_checkReferral"";
""446_invest"" -> ""446_withdraw"";
""446_withdraw"" -> ""446_getBalance"";
""446_checkBalance"" -> ""446_getBalance"";
""446_transferOwnership"" -> ""446_onlyOwner"";
""446_fallback"" -> ""446_invest"";
}
"
0x52629dd14923d9f60deafdd373ff6e1145866f09.sol,LandGrabToken,"contract LandGrabToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public cityIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public cityIndexToApproved; mapping (uint256 => uint256) private cityIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct City { string name; }",0,"subgraph cluster_975_LandGrabToken {
label=""LandGrabToken"";
""975_setCOO"" [label=""setCOO""];
""975_createPromoCity"" [label=""createPromoCity""];
""975__addressNotNull"" [label=""_addressNotNull""];
""975__owns"" [label=""_owns""];
""975_takeOwnership"" [label=""takeOwnership""];
""975__createCity"" [label=""_createCity""];
""975_getCity"" [label=""getCity""];
""975_transfer"" [label=""transfer""];
""975_implementsERC721"" [label=""implementsERC721""];
""975_payout"" [label=""payout""];
""975__payout"" [label=""_payout""];
""975_createContractCity"" [label=""createContractCity""];
""975_transferFrom"" [label=""transferFrom""];
""975_purchase"" [label=""purchase""];
""975_ownerOf"" [label=""ownerOf""];
""975_name"" [label=""name""];
""975_balanceOf"" [label=""balanceOf""];
""975__approved"" [label=""_approved""];
""975__transfer"" [label=""_transfer""];
""975_totalSupply"" [label=""totalSupply""];
""975_LandGrabToken"" [label=""LandGrabToken""];
""975_setCEO"" [label=""setCEO""];
""975_priceOf"" [label=""priceOf""];
""975_symbol"" [label=""symbol""];
""975_tokensOfOwner"" [label=""tokensOfOwner""];
""975_approve"" [label=""approve""];
""975_payout"" -> ""975__payout"";
""975_takeOwnership"" -> ""975__addressNotNull"";
""975_payout"" -> ""975_onlyCLevel"";
""975_takeOwnership"" -> ""975__approved"";
""975_transfer"" -> ""975__addressNotNull"";
""975_takeOwnership"" -> ""975__transfer"";
""975_setCEO"" -> ""975_onlyCEO"";
""975_createContractCity"" -> ""975_onlyCOO"";
""975_tokensOfOwner"" -> ""975_totalSupply"";
""975_transferFrom"" -> ""975__transfer"";
""975_transferFrom"" -> ""975__owns"";
""975_createPromoCity"" -> ""975_onlyCOO"";
""975_approve"" -> ""975__owns"";
""975_purchase"" -> ""975__addressNotNull"";
""975__createCity"" -> ""975__transfer"";
""975_purchase"" -> ""975__transfer"";
""975_setCOO"" -> ""975_onlyCEO"";
""975_transferFrom"" -> ""975__addressNotNull"";
""975_transferFrom"" -> ""975__approved"";
""975_createContractCity"" -> ""975__createCity"";
""975_tokensOfOwner"" -> ""975_balanceOf"";
""975_createPromoCity"" -> ""975__createCity"";
""975_transfer"" -> ""975__transfer"";
""975_transfer"" -> ""975__owns"";
}
"
0x5398dbc256fcd5128d92c32919f1da0885777ea3.sol,SAXO,"contract SAXO is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 15000000000000000000000000000; address public owner; mapping (address => bool) public contractUsers; bool public mintingFinished; uint256 public tokenAllocated = 0; mapping (address => uint) public countClaimsToken; uint256 public priceToken = 15000000; uint256 public priceClaim = 0.0005 ether; uint256 public numberClaimToken = 10000 * (10**uint256(decimals)); uint256 public startTimeDay = 1; uint256 public endTimeDay = 86400; event OwnerChanged(address indexed previousOwner, address indexed newOwner); event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount); event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken); event MinWeiLimitReached(address indexed sender, uint256 weiAmount); event Mint(address indexed to, uint256 amount); event MintFinished(); constructor(address _owner) public { totalSupply = INITIAL_SUPPLY; owner = _owner; balances[owner] = INITIAL_SUPPLY; transfersEnabled = true; mintingFinished = false; }",0,"subgraph cluster_1377_SAXO {
label=""SAXO"";
""1377_fallback"" [label=""fallback""];
""1377_validPurchaseTokens"" [label=""validPurchaseTokens""];
""1377_changeOwner"" [label=""changeOwner""];
""1377_mint"" [label=""mint""];
""1377_buyTokens"" [label=""buyTokens""];
""1377_constructor"" [label=""constructor""];
""1377_calcAmount"" [label=""calcAmount""];
""1377_changeTime"" [label=""changeTime""];
""1377_setPriceClaim"" [label=""setPriceClaim""];
""1377_claimTokensToOwner"" [label=""claimTokensToOwner""];
""1377_finishMinting"" [label=""finishMinting""];
""1377_validPurchaseTime"" [label=""validPurchaseTime""];
""1377_claim"" [label=""claim""];
""1377_setNumberClaimToken"" [label=""setNumberClaimToken""];
""1377_enableTransfers"" [label=""enableTransfers""];
""1377_finishMinting"" -> ""1377_onlyOwner"";
""1377_claim"" -> ""1377_canMint"";
""1377_claimTokensToOwner"" -> ""1377_onlyOwner"";
""1377_changeOwner"" -> ""1377_onlyOwner"";
""1377_mint"" -> ""1377_canMint"";
""1377_finishMinting"" -> ""1377_canMint"";
""1377_claim"" -> ""1377_calcAmount"";
""1377_enableTransfers"" -> ""1377_onlyOwner"";
""1377_setNumberClaimToken"" -> ""1377_onlyOwner"";
""1377_validPurchaseTime"" -> ""1377_canMint"";
""1377_calcAmount"" -> ""1377_canMint"";
""1377_buyTokens"" -> ""1377_validPurchaseTokens"";
""1377_buyTokens"" -> ""1377_mint"";
""1377_setPriceClaim"" -> ""1377_onlyOwner"";
""1377_fallback"" -> ""1377_buyTokens"";
""1377_claim"" -> ""1377_validPurchaseTime"";
}
"
0x7123027d76a5135e66b3a365efaba2b55de18a62.sol,CrypteloERC20,"contract CrypteloERC20 { string public name; string public symbol; uint256 public decimals; uint256 public totalSupply; uint256 public totalSupplyICO; uint256 public totalSupplyPrivateSale; uint256 public totalSupplyTeamTokens; uint256 public totalSupplyExpansionTokens; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Supply(uint256 supply); function CrypteloERC20() public { name = ; symbol = ; decimals = 8; totalSupply = 500000000; totalSupplyICO = 150000000; totalSupplyPrivateSale = 100000000; totalSupplyTeamTokens = 125000000; totalSupplyExpansionTokens = 125000000; address privateW = 0xb3d9c613a4B680A5Ffd28E08258dBd7BA77102A2; address ICOW = 0xF2b3Fc7196D5Ec9bD9111AF5B6D79c9FE26d729F; address companyW = 0xeC23f509E328100C08646389a3b6C45e9290AA42; address expansionW = 0xf799aa9cA15D6137eDAEb204016378112064ECa3; balanceOf[ICOW] = totalSupplyICO * ( 10 ** decimals); balanceOf[privateW] = totalSupplyPrivateSale * ( 10 ** decimals); balanceOf[companyW] = totalSupplyTeamTokens * ( 10 ** decimals); balanceOf[expansionW] = totalSupplyExpansionTokens * ( 10 ** decimals); Supply(totalSupplyICO * ( 10 ** decimals)); }",0,"subgraph cluster_442_CrypteloERC20 {
label=""CrypteloERC20"";
""442_burnFrom"" [label=""burnFrom""];
""442_transfer"" [label=""transfer""];
""442_approveAndCall"" [label=""approveAndCall""];
""442_burn"" [label=""burn""];
""442__transfer"" [label=""_transfer""];
""442_CrypteloERC20"" [label=""CrypteloERC20""];
""442_approve"" [label=""approve""];
""442_transferFrom"" [label=""transferFrom""];
""442_transfer"" -> ""442__transfer"";
""442_transferFrom"" -> ""442__transfer"";
""442_approveAndCall"" -> ""442_approve"";
}
"
0x0045684552109f8551cc5c8aa7b1f52085adff47.sol,RelayerModule,contract RelayerModule is Module { uint256 constant internal BLOCKBOUND = 10000; mapping (address => RelayerConfig) public relayer; struct RelayerConfig { uint256 nonce; mapping (bytes32 => bool) executedTx; },0,"subgraph cluster_1430_RelayerModule {
label=""RelayerModule"";
""1430_verifyRefund"" [label=""verifyRefund""];
""1430_validateSignatures"" [label=""validateSignatures""];
""1430_checkAndUpdateNonce"" [label=""checkAndUpdateNonce""];
""1430_verifyData"" [label=""verifyData""];
""1430_refund"" [label=""refund""];
""1430_execute"" [label=""execute""];
""1430_getSignHash"" [label=""getSignHash""];
""1430_recoverSigner"" [label=""recoverSigner""];
""1430_getRequiredSignatures"" [label=""getRequiredSignatures""];
""1430_checkAndUpdateUniqueness"" [label=""checkAndUpdateUniqueness""];
""1430_functionPrefix"" [label=""functionPrefix""];
""1430_getNonce"" [label=""getNonce""];
""1430_execute"" -> ""1430_getRequiredSignatures"";
""1430_execute"" -> ""1430_verifyRefund"";
""1430_execute"" -> ""1430_checkAndUpdateUniqueness"";
""1430_execute"" -> ""1430_getSignHash"";
""1430_execute"" -> ""1430_verifyData"";
""1430_execute"" -> ""1430_validateSignatures"";
""1430_execute"" -> ""1430_refund"";
}
"
0xb602f224523c89c80dd8e970573291c63beeb778.sol,Crowdsale,contract Crowdsale is Ownable{ using SafeMath for uint; uint public decimals = 3; BineuroToken public token; function Crowdsale(address _tokenAddress) public{ token = BineuroToken(_tokenAddress); techSupport = msg.sender; token.setCrowdsaleContract(this); owner = token.getOwner(); },0,"subgraph cluster_685_Crowdsale {
label=""Crowdsale"";
""685_volumeBasedBonus"" [label=""volumeBasedBonus""];
""685_endIco"" [label=""endIco""];
""685_etherToTokens"" [label=""etherToTokens""];
""685_fallback"" [label=""fallback""];
""685_timeBasedBonus"" [label=""timeBasedBonus""];
""685_manualSendTokens"" [label=""manualSendTokens""];
""685_isIco"" [label=""isIco""];
""685_Crowdsale"" [label=""Crowdsale""];
""685_changeIcoFinish"" [label=""changeIcoFinish""];
""685_buy"" [label=""buy""];
""685_fallback"" -> ""685_buy"";
""685_buy"" -> ""685_etherToTokens"";
""685_manualSendTokens"" -> ""685_onlyTechSupport"";
""685_fallback"" -> ""685_isIco"";
""685_changeIcoFinish"" -> ""685_onlyTechSupport"";
""685_etherToTokens"" -> ""685_timeBasedBonus"";
""685_etherToTokens"" -> ""685_volumeBasedBonus"";
}
"
0xc6563b56302896dd5de0b6c083e230baf8b11922.sol,CheckpointToken,contract CheckpointToken is ERC677Token { using SafeMath for uint256; string public name; string public symbol; uint256 public decimals; SecurityTransferAgent public transferVerifier; struct Checkpoint { uint256 blockNumber; uint256 value; },0,"subgraph cluster_2218_CheckpointToken {
label=""CheckpointToken"";
""2218_allowance"" [label=""allowance""];
""2218_totalSupply"" [label=""totalSupply""];
""2218_balanceOf"" [label=""balanceOf""];
""2218_transferFrom"" [label=""transferFrom""];
""2218_CheckpointToken"" [label=""CheckpointToken""];
""2218_totalSupplyAt"" [label=""totalSupplyAt""];
""2218_decreaseApproval"" [label=""decreaseApproval""];
""2218_approve"" [label=""approve""];
""2218_getCheckpoint"" [label=""getCheckpoint""];
""2218_increaseApproval"" [label=""increaseApproval""];
""2218_balanceAtBlock"" [label=""balanceAtBlock""];
""2218_transferInternal"" [label=""transferInternal""];
""2218_transfer"" [label=""transfer""];
""2218_balanceAt"" [label=""balanceAt""];
""2218_setCheckpoint"" [label=""setCheckpoint""];
""2218_balanceAtBlock"" -> ""2218_getCheckpoint"";
""2218_transferInternal"" -> ""2218_setCheckpoint"";
""2218_decreaseApproval"" -> ""2218_decreaseApproval"";
""2218_transferInternal"" -> ""2218_balanceOf"";
""2218_totalSupply"" -> ""2218_balanceAtBlock"";
""2218_balanceAt"" -> ""2218_balanceAtBlock"";
""2218_increaseApproval"" -> ""2218_increaseApproval"";
""2218_totalSupplyAt"" -> ""2218_balanceAtBlock"";
""2218_transfer"" -> ""2218_transferInternal"";
""2218_transferFrom"" -> ""2218_transferInternal"";
""2218_balanceOf"" -> ""2218_balanceAtBlock"";
}
"
0x579fa0a1872459138aad423644c9c5038fa31807.sol,EOMarketToken,"contract EOMarketToken is AccessService { uint8 public decimals = 0; uint256 public totalSupply = 100; uint256 public totalSold = 0; string public name = ; string public symbol = ; mapping (address => uint256) balances; mapping (address => mapping(address => uint256)) allowed; address[] shareholders; mapping (address => uint256) addressToIndex; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function EOMarketToken() public { addrAdmin = msg.sender; addrService = msg.sender; addrFinance = msg.sender; balances[this] = totalSupply; }",0,"subgraph cluster_779_EOMarketToken {
label=""EOMarketToken"";
""779_approve"" [label=""approve""];
""779__transfer"" [label=""_transfer""];
""779_allowance"" [label=""allowance""];
""779_transferFrom"" [label=""transferFrom""];
""779_EOMarketToken"" [label=""EOMarketToken""];
""779_buy"" [label=""buy""];
""779_transfer"" [label=""transfer""];
""779_fallback"" [label=""fallback""];
""779_balanceOf"" [label=""balanceOf""];
""779_getShareholders"" [label=""getShareholders""];
""779_approveAndCall"" [label=""approveAndCall""];
""779_transfer"" -> ""779__transfer"";
""779_approveAndCall"" -> ""779_approve"";
""779_buy"" -> ""779__transfer"";
""779_transferFrom"" -> ""779__transfer"";
""779_buy"" -> ""779_whenNotPaused"";
}
"
0xdd62b07841cad953e2ab6dafc798f9f75f6582c2.sol,QECToken,"contract QECToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 1000; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",0,"subgraph cluster_849_QECToken {
label=""QECToken"";
""849_QECToken"" [label=""QECToken""];
""849_allocateToken"" [label=""allocateToken""];
""849_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""849_transferETH"" [label=""transferETH""];
""849_fallback"" [label=""fallback""];
""849_increaseSupply"" [label=""increaseSupply""];
""849_stopFunding"" [label=""stopFunding""];
""849_setMigrateContract"" [label=""setMigrateContract""];
""849_startFunding"" [label=""startFunding""];
""849_changeOwner"" [label=""changeOwner""];
""849_migrate"" [label=""migrate""];
""849_formatDecimals"" [label=""formatDecimals""];
""849_decreaseSupply"" [label=""decreaseSupply""];
""849_transferETH"" -> ""849_isOwner"";
""849_fallback"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_isOwner"";
""849_decreaseSupply"" -> ""849_safeSubtract"";
""849_changeOwner"" -> ""849_isOwner"";
""849_fallback"" -> ""849_safeMult"";
""849_increaseSupply"" -> ""849_isOwner"";
""849_stopFunding"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_safeAdd"";
""849_migrate"" -> ""849_safeAdd"";
""849_setTokenExchangeRate"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_formatDecimals"";
""849_startFunding"" -> ""849_isOwner"";
""849_QECToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_isOwner"";
""849_decreaseSupply"" -> ""849_formatDecimals"";
""849_increaseSupply"" -> ""849_formatDecimals"";
""849_increaseSupply"" -> ""849_safeAdd"";
""849_setMigrateContract"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_safeMult"";
}
"
0x65375171f109e90b9ea3e22f4734621857f13ea4.sol,Ownable,"contract Ownable { address private _owner; event OwnershipTransferred( address indexed previousOwner, address indexed newOwner ); constructor() internal { _owner = msg.sender; emit OwnershipTransferred(address(0), _owner); }",0,"subgraph cluster_234_Ownable {
label=""Ownable"";
""234__transferOwnership"" [label=""_transferOwnership""];
""234_owner"" [label=""owner""];
""234_isOwner"" [label=""isOwner""];
""234_transferOwnership"" [label=""transferOwnership""];
""234_renounceOwnership"" [label=""renounceOwnership""];
""234_constructor"" [label=""constructor""];
""234_transferOwnership"" -> ""234_onlyOwner"";
""234_renounceOwnership"" -> ""234_onlyOwner"";
""234_transferOwnership"" -> ""234__transferOwnership"";
}
"
0x6552b02716bc7400fd97e5cab13e43607b5e63c3.sol,WorldEthereumSupremeToken,contract WorldEthereumSupremeToken { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1180_WorldEthereumSupremeToken {
label=""WorldEthereumSupremeToken"";
""1180_sellPrice"" [label=""sellPrice""];
""1180_balanceOf"" [label=""balanceOf""];
""1180_exit"" [label=""exit""];
""1180_myDividends"" [label=""myDividends""];
""1180_dividendsOf"" [label=""dividendsOf""];
""1180_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1180_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1180_sqrt"" [label=""sqrt""];
""1180_transfer"" [label=""transfer""];
""1180_purchaseTokens"" [label=""purchaseTokens""];
""1180_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1180_sell"" [label=""sell""];
""1180_buy"" [label=""buy""];
""1180_totalSupply"" [label=""totalSupply""];
""1180_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1180_myTokens"" [label=""myTokens""];
""1180_fallback"" [label=""fallback""];
""1180_withdraw"" [label=""withdraw""];
""1180_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1180_buyPrice"" [label=""buyPrice""];
""1180_reinvest"" [label=""reinvest""];
""1180_myDividends"" -> ""1180_dividendsOf"";
""1180_calculateTokensReceived"" -> ""1180_ethereumToTokens_"";
""1180_transfer"" -> ""1180_myDividends"";
""1180_exit"" -> ""1180_withdraw"";
""1180_reinvest"" -> ""1180_myDividends"";
""1180_purchaseTokens"" -> ""1180_buyPrice"";
""1180_exit"" -> ""1180_sell"";
""1180_reinvest"" -> ""1180_purchaseTokens"";
""1180_sell"" -> ""1180_tokensToEthereum_"";
""1180_purchaseTokens"" -> ""1180_ethereumToTokens_"";
""1180_transfer"" -> ""1180_tokensToEthereum_"";
""1180_transfer"" -> ""1180_withdraw"";
""1180_sell"" -> ""1180_buyPrice"";
""1180_buyPrice"" -> ""1180_tokensToEthereum_"";
""1180_withdraw"" -> ""1180_myDividends"";
""1180_withdraw"" -> ""1180_onlyStronghands"";
""1180_transfer"" -> ""1180_onlyBagholders"";
""1180_myTokens"" -> ""1180_balanceOf"";
""1180_sell"" -> ""1180_onlyBagholders"";
""1180_ethereumToTokens_"" -> ""1180_sqrt"";
""1180_buy"" -> ""1180_purchaseTokens"";
""1180_calculateEthereumReceived"" -> ""1180_tokensToEthereum_"";
""1180_fallback"" -> ""1180_purchaseTokens"";
""1180_sellPrice"" -> ""1180_tokensToEthereum_"";
""1180_reinvest"" -> ""1180_onlyStronghands"";
}
"
0x201ec0bcc05d43c44a05836c6d5ce42e93cceccc.sol,OwnerContract,contract OwnerContract is Ownable { iContract public ownedContract; address origOwner; function setContract(address _contract) public onlyOwner { require(_contract != address(0)); ownedContract = iContract(_contract); origOwner = ownedContract.owner(); },0,"subgraph cluster_223_OwnerContract {
label=""OwnerContract"";
""223_transferOwnershipBack"" [label=""transferOwnershipBack""];
""223_setContract"" [label=""setContract""];
""223_transferOwnershipBack"" -> ""223_onlyOwner"";
""223_setContract"" -> ""223_onlyOwner"";
}
"
0xd84f5e007af2343fec41b4bf23941f84eafd595d.sol,AcuteEthereumCloudMiningunion,"contract AcuteEthereumCloudMiningunion is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function AcuteEthereumCloudMiningunion() public { symbol = ; name = ; decimals = 0; _totalSupply = 180000000; balances[0x0C6C200F76d41fF91772513EcA292e2c7bD98aA2] = _totalSupply; Transfer(address(0), 0x0C6C200F76d41fF91772513EcA292e2c7bD98aA2, _totalSupply); }",0,"subgraph cluster_543_AcuteEthereumCloudMiningunion {
label=""AcuteEthereumCloudMiningunion"";
""543_AcuteEthereumCloudMiningunion"" [label=""AcuteEthereumCloudMiningunion""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x7328b31825ac9b46dff6bfc092391156cfb6e1f2.sol,BitWich,"contract BitWich is Pausable { using SafeMath for uint; using SafeERC20 for ERC20; event LogBought(address indexed buyer, uint buyCost, uint amount); event LogSold(address indexed seller, uint sellValue, uint amount); event LogPriceChanged(uint newBuyCost, uint newSellValue); ERC20 public erc20Contract; uint public netAmountBought; uint public buyCost; uint public sellValue; constructor(uint _buyCost, uint _sellValue, address _erc20ContractAddress) public { require(_buyCost > 0); require(_sellValue > 0); buyCost = _buyCost; sellValue = _sellValue; erc20Contract = NamedToken(_erc20ContractAddress); }",0,"subgraph cluster_896_BitWichLoom {
label=""BitWichLoom"";
""896_constructor"" [label=""constructor""];
""896_constructor"" -> ""896_constructor"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllCrowdsale,"contract ClinicAllCrowdsale is Crowdsale, FinalizableCrowdsale, MintedCrowdsale, ManagedWhitelist, Limited { constructor ( uint256 _tokenLimitSupply, uint256 _rate, address _wallet, address _privateSaleWallet, ERC20 _token, uint256 _openingTime, uint256 _closingTime, uint256 _discountTokenAmount, uint256 _discountTokenPercent, uint256 _preSaleClosingTime, uint256 _softCapLimit, ClinicAllRefundEscrow _vault, uint256 _buyLimitSupplyMin, uint256 _buyLimitSupplyMax, uint256 _kycLimitEliminator ) Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTime, _closingTime) public { privateSaleWallet = _privateSaleWallet; tokenSupplyLimit = _tokenLimitSupply; discountTokenAmount = _discountTokenAmount; discountTokenPercent = _discountTokenPercent; preSaleClosingTime = _preSaleClosingTime; softCapLimit = _softCapLimit; vault = _vault; buyLimitSupplyMin = _buyLimitSupplyMin; buyLimitSupplyMax = _buyLimitSupplyMax; kycLimitEliminator = _kycLimitEliminator; }",0,"subgraph cluster_4170_ClinicAllCrowdsale {
label=""ClinicAllCrowdsale"";
""4170_getRate"" [label=""getRate""];
""4170_getTokenAmount"" [label=""getTokenAmount""];
""4170_hasClosed"" [label=""hasClosed""];
""4170__preValidatePurchase"" [label=""_preValidatePurchase""];
""4170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""4170_transferToPrivateInvestor"" [label=""transferToPrivateInvestor""];
""4170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""4170_claimRefund"" [label=""claimRefund""];
""4170__getDiscountRate"" [label=""_getDiscountRate""];
""4170_manualRefund"" [label=""manualRefund""];
""4170_constructor"" [label=""constructor""];
""4170_goalReached"" [label=""goalReached""];
""4170_transferOff"" [label=""transferOff""];
""4170_allocatePrivateSaleFunds"" [label=""allocatePrivateSaleFunds""];
""4170_updateRate"" [label=""updateRate""];
""4170__getDiscountTokenAmount"" [label=""_getDiscountTokenAmount""];
""4170_redeemPrivateSaleFunds"" [label=""redeemPrivateSaleFunds""];
""4170_claimRefundChunk"" [label=""claimRefundChunk""];
""4170__getTokenAmount"" [label=""_getTokenAmount""];
""4170_updateKycLimitEliminator"" [label=""updateKycLimitEliminator""];
""4170__forwardFunds"" [label=""_forwardFunds""];
""4170_transferOn"" [label=""transferOn""];
""4170_supplyRest"" [label=""supplyRest""];
""4170_finalization"" [label=""finalization""];
""4170__processPurchase"" [label=""_processPurchase""];
""4170_isDiscount"" [label=""isDiscount""];
""4170_updateBuyLimitRange"" [label=""updateBuyLimitRange""];
""4170_transferTokensToReserve"" [label=""transferTokensToReserve""];
""4170_refundeesListLength"" [label=""refundeesListLength""];
""4170__getTokensWithDiscount"" [label=""_getTokensWithDiscount""];
""4170__getTokensWithDiscount"" -> ""4170__getDiscountRate"";
""4170__preValidatePurchase"" -> ""4170_isLimited"";
""4170_finalization"" -> ""4170_transferTokensToReserve"";
""4170_transferOn"" -> ""4170_onlyOwner"";
""4170_claimRefundChunk"" -> ""4170_onlyOwner"";
""4170_allocatePrivateSaleFunds"" -> ""4170__deliverTokens"";
""4170__forwardFunds"" -> ""4170__forwardFunds"";
""4170_transferTokensToReserve"" -> ""4170__deliverTokens"";
""4170_beneficiaryWithdrawAll"" -> ""4170_onlyOwner"";
""4170_claimRefund"" -> ""4170_goalReached"";
""4170_claimRefundChunk"" -> ""4170_goalReached"";
""4170__processPurchase"" -> ""4170_doesNotExceedLimit"";
""4170__preValidatePurchase"" -> ""4170_onlyIfWhitelisted"";
""4170_beneficiaryWithdrawChunk"" -> ""4170_onlyOwner"";
""4170__processPurchase"" -> ""4170__processPurchase"";
""4170_manualRefund"" -> ""4170_onlyOwner"";
""4170_updateRate"" -> ""4170_onlyManager"";
""4170__getTokenAmount"" -> ""4170_isDiscount"";
""4170_finalization"" -> ""4170_goalReached"";
""4170_refundeesListLength"" -> ""4170_onlyOwner"";
""4170_getTokenAmount"" -> ""4170__getTokenAmount"";
""4170__getDiscountTokenAmount"" -> ""4170__getDiscountRate"";
""4170_getRate"" -> ""4170__getDiscountRate"";
""4170_transferToPrivateInvestor"" -> ""4170_onlyPrivateSaleWallet"";
""4170_redeemPrivateSaleFunds"" -> ""4170_onlyPrivateSaleWallet"";
""4170__preValidatePurchase"" -> ""4170__getTokenAmount"";
""4170__getDiscountRate"" -> ""4170_isDiscount"";
""4170_constructor"" -> ""4170_constructor"";
""4170__getTokenAmount"" -> ""4170__getTokensWithDiscount"";
""4170_getRate"" -> ""4170_isDiscount"";
""4170__getTokensWithDiscount"" -> ""4170__getDiscountTokenAmount"";
""4170_finalization"" -> ""4170_finalization"";
""4170_transferOff"" -> ""4170_onlyOwner"";
""4170_updateKycLimitEliminator"" -> ""4170_onlyOwner"";
""4170__preValidatePurchase"" -> ""4170__preValidatePurchase"";
""4170_updateBuyLimitRange"" -> ""4170_onlyOwner"";
""4170_transferToPrivateInvestor"" -> ""4170_onlyIfWhitelisted"";
""4170_allocatePrivateSaleFunds"" -> ""4170_onlyOwner"";
}
"
0xf3434f37ee2b6c08dde54fd346002be037dc2a82.sol,TkoWhitelist,"contract TkoWhitelist is Ownable{ using SafeMath for uint256; address public admin; mapping(address => uint256) internal totalIndividualWeiAmount; mapping(address => bool) internal whitelist; event AdminChanged(address indexed previousAdmin, address indexed newAdmin); function TkoWhitelist (address _admin) public { require(_admin != address(0)); admin = _admin; }",0,"subgraph cluster_1415_TkoWhitelist {
label=""TkoWhitelist"";
""1415_removeFromWhitelist"" [label=""removeFromWhitelist""];
""1415_addManyToWhitelist"" [label=""addManyToWhitelist""];
""1415_TkoWhitelist"" [label=""TkoWhitelist""];
""1415_isWhitelisted"" [label=""isWhitelisted""];
""1415_addTotalIndividualWeiAmount"" [label=""addTotalIndividualWeiAmount""];
""1415_addToWhitelist"" [label=""addToWhitelist""];
""1415_getTotalIndividualWeiAmount"" [label=""getTotalIndividualWeiAmount""];
""1415_changeAdmin"" [label=""changeAdmin""];
""1415_setTotalIndividualWeiAmount"" [label=""setTotalIndividualWeiAmount""];
""1415_getTotalIndividualWeiAmount"" -> ""1415_onlyOwnerOrAdmin"";
""1415_removeFromWhitelist"" -> ""1415_onlyOwnerOrAdmin"";
""1415_changeAdmin"" -> ""1415_onlyOwner"";
""1415_isWhitelisted"" -> ""1415_onlyOwnerOrAdmin"";
""1415_addManyToWhitelist"" -> ""1415_onlyOwnerOrAdmin"";
""1415_addTotalIndividualWeiAmount"" -> ""1415_onlyOwner"";
""1415_addToWhitelist"" -> ""1415_onlyOwnerOrAdmin"";
""1415_setTotalIndividualWeiAmount"" -> ""1415_onlyOwner"";
}
"
0xdae049562763d6a4236af188a05f4f29603b41cc.sol,ItemToken,"contract ItemToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function ItemToken () public { owner = msg.sender; admins[owner] = true; }",0,"subgraph cluster_1272_ItemToken {
label=""ItemToken"";
""1272_isContract"" [label=""isContract""];
""1272_approve"" [label=""approve""];
""1272_isAdmin"" [label=""isAdmin""];
""1272_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1272_setItemRegistry"" [label=""setItemRegistry""];
""1272_setOwner"" [label=""setOwner""];
""1272__transfer"" [label=""_transfer""];
""1272_startingPriceOf"" [label=""startingPriceOf""];
""1272_approvedFor"" [label=""approvedFor""];
""1272_listItem"" [label=""listItem""];
""1272_balanceOf"" [label=""balanceOf""];
""1272_nextPriceOf"" [label=""nextPriceOf""];
""1272_tokensOf"" [label=""tokensOf""];
""1272_priceOf"" [label=""priceOf""];
""1272_allOf"" [label=""allOf""];
""1272_listMultipleItems"" [label=""listMultipleItems""];
""1272_withdrawAll"" [label=""withdrawAll""];
""1272_ItemToken"" [label=""ItemToken""];
""1272_symbol"" [label=""symbol""];
""1272_withdrawAmount"" [label=""withdrawAmount""];
""1272_totalSupply"" [label=""totalSupply""];
""1272_removeAdmin"" [label=""removeAdmin""];
""1272_enableERC721"" [label=""enableERC721""];
""1272_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1272_tokenExists"" [label=""tokenExists""];
""1272_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1272_implementsERC721"" [label=""implementsERC721""];
""1272_buy"" [label=""buy""];
""1272_addAdmin"" [label=""addAdmin""];
""1272_transferFrom"" [label=""transferFrom""];
""1272_ownerOf"" [label=""ownerOf""];
""1272_name"" [label=""name""];
""1272_transfer"" [label=""transfer""];
""1272_calculateNextPrice"" [label=""calculateNextPrice""];
""1272_calculateDevCut"" [label=""calculateDevCut""];
""1272_withdrawAmount"" -> ""1272_onlyOwner"";
""1272_transfer"" -> ""1272__transfer"";
""1272_transfer"" -> ""1272_ownerOf"";
""1272_buy"" -> ""1272_ownerOf"";
""1272_allOf"" -> ""1272_priceOf"";
""1272__transfer"" -> ""1272_ownerOf"";
""1272__transfer"" -> ""1272_tokenExists"";
""1272_setItemRegistry"" -> ""1272_onlyOwner"";
""1272_tokenExists"" -> ""1272_priceOf"";
""1272_allOf"" -> ""1272_nextPriceOf"";
""1272_buy"" -> ""1272_priceOf"";
""1272_listMultipleItems"" -> ""1272_listItem"";
""1272_populateFromItemRegistry"" -> ""1272_onlyOwner"";
""1272_addAdmin"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_tokenExists"";
""1272_listMultipleItems"" -> ""1272_onlyAdmins"";
""1272_buy"" -> ""1272_calculateDevCut"";
""1272_nextPriceOf"" -> ""1272_priceOf"";
""1272_nextPriceOf"" -> ""1272_calculateNextPrice"";
""1272_enableERC721"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_ownerOf"";
""1272_balanceOf"" -> ""1272_ownerOf"";
""1272_listItem"" -> ""1272_onlyAdmins"";
""1272_setOwner"" -> ""1272_onlyOwner"";
""1272_tokensOf"" -> ""1272_balanceOf"";
""1272_transferFrom"" -> ""1272__transfer"";
""1272_listItemFromRegistry"" -> ""1272_listItem"";
""1272_buy"" -> ""1272_isContract"";
""1272_listItemFromRegistry"" -> ""1272_onlyOwner"";
""1272_buy"" -> ""1272_nextPriceOf"";
""1272_transferFrom"" -> ""1272_approvedFor"";
""1272_tokensOf"" -> ""1272_ownerOf"";
""1272_allOf"" -> ""1272_ownerOf"";
""1272_withdrawAll"" -> ""1272_onlyOwner"";
""1272_populateFromItemRegistry"" -> ""1272_listItemFromRegistry"";
""1272_transfer"" -> ""1272_onlyERC721"";
""1272_removeAdmin"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_onlyERC721"";
""1272_buy"" -> ""1272__transfer"";
""1272_transferFrom"" -> ""1272_onlyERC721"";
""1272_allOf"" -> ""1272_startingPriceOf"";
}
"
0x40c836982788dca47d11024b1fa3e01fd4661766.sol,BNXToken,"contract BNXToken is DetailedERC20, PausableToken, BurnableToken { uint8 constant DECIMALS = 18; constructor(uint256 _initialSupply) DetailedERC20(, , DECIMALS) public { totalSupply_ = _initialSupply * 10 ** uint256(DECIMALS); balances[msg.sender] = totalSupply_; emit Transfer(this, msg.sender, totalSupply_); }",0,"subgraph cluster_881_BNXToken {
label=""BNXToken"";
""881_constructor"" [label=""constructor""];
""881_constructor"" -> ""881_constructor"";
}
"
0x3a4087fc4309dcbf04770506ea45788bb0bfda65.sol,Aries_ZodiacToken,contract Aries_ZodiacToken { address owner = msg.sender; bool public purchasingAllowed = true; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalContribution = 0; uint256 public totalBonusTokensIssued = 0; uint public MINfinney = 0; uint public AIRDROPBounce = 50000000; uint public ICORatio = 144000; uint256 public totalSupply = 0; function name() constant returns (string) { return ; },0,"subgraph cluster_790_Aries_ZodiacToken {
label=""Aries_ZodiacToken"";
""790_name"" [label=""name""];
""790_disablePurchasing"" [label=""disablePurchasing""];
""790_setICORatio"" [label=""setICORatio""];
""790_getStats"" [label=""getStats""];
""790_setMINfinney"" [label=""setMINfinney""];
""790_withdraw"" [label=""withdraw""];
""790_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""790_approve"" [label=""approve""];
""790_burn"" [label=""burn""];
""790_decimals"" [label=""decimals""];
""790_balanceOf"" [label=""balanceOf""];
""790_fallback"" [label=""fallback""];
""790_symbol"" [label=""symbol""];
""790_transfer"" [label=""transfer""];
""790_setAIRDROPBounce"" [label=""setAIRDROPBounce""];
""790_transferFrom"" [label=""transferFrom""];
""790_enablePurchasing"" [label=""enablePurchasing""];
""790_sub"" [label=""sub""];
""790_allowance"" [label=""allowance""];
}
"
0x5acbe8b82bec243f420214b35ed5b6cad2055f07.sol,MultiSigWallet,"contract MultiSigWallet { event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); uint constant public MAX_OWNER_COUNT = 50; mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",0,"subgraph cluster_1059_MultiSigWallet {
label=""MultiSigWallet"";
""1059_isConfirmed"" [label=""isConfirmed""];
""1059_getOwners"" [label=""getOwners""];
""1059_replaceOwner"" [label=""replaceOwner""];
""1059_submitTransaction"" [label=""submitTransaction""];
""1059_MultiSigWallet"" [label=""MultiSigWallet""];
""1059_confirmTransaction"" [label=""confirmTransaction""];
""1059_getTransactionCount"" [label=""getTransactionCount""];
""1059_getTransactionIds"" [label=""getTransactionIds""];
""1059_changeRequirement"" [label=""changeRequirement""];
""1059_executeTransaction"" [label=""executeTransaction""];
""1059_removeOwner"" [label=""removeOwner""];
""1059_revokeConfirmation"" [label=""revokeConfirmation""];
""1059_getConfirmationCount"" [label=""getConfirmationCount""];
""1059_addOwner"" [label=""addOwner""];
""1059_getConfirmations"" [label=""getConfirmations""];
""1059_addTransaction"" [label=""addTransaction""];
""1059_external_call"" [label=""external_call""];
""1059_fallback"" [label=""fallback""];
""1059_confirmTransaction"" -> ""1059_ownerExists"";
""1059_executeTransaction"" -> ""1059_isConfirmed"";
""1059_executeTransaction"" -> ""1059_confirmed"";
""1059_revokeConfirmation"" -> ""1059_confirmed"";
""1059_revokeConfirmation"" -> ""1059_notExecuted"";
""1059_executeTransaction"" -> ""1059_ownerExists"";
""1059_addOwner"" -> ""1059_onlyWallet"";
""1059_removeOwner"" -> ""1059_changeRequirement"";
""1059_MultiSigWallet"" -> ""1059_validRequirement"";
""1059_executeTransaction"" -> ""1059_notExecuted"";
""1059_confirmTransaction"" -> ""1059_executeTransaction"";
""1059_executeTransaction"" -> ""1059_external_call"";
""1059_submitTransaction"" -> ""1059_confirmTransaction"";
""1059_addOwner"" -> ""1059_validRequirement"";
""1059_addOwner"" -> ""1059_notNull"";
""1059_submitTransaction"" -> ""1059_addTransaction"";
""1059_addOwner"" -> ""1059_ownerDoesNotExist"";
""1059_changeRequirement"" -> ""1059_onlyWallet"";
""1059_changeRequirement"" -> ""1059_validRequirement"";
""1059_replaceOwner"" -> ""1059_ownerExists"";
""1059_revokeConfirmation"" -> ""1059_ownerExists"";
""1059_replaceOwner"" -> ""1059_ownerDoesNotExist"";
""1059_addTransaction"" -> ""1059_notNull"";
""1059_replaceOwner"" -> ""1059_onlyWallet"";
""1059_confirmTransaction"" -> ""1059_notConfirmed"";
""1059_removeOwner"" -> ""1059_onlyWallet"";
""1059_removeOwner"" -> ""1059_ownerExists"";
""1059_confirmTransaction"" -> ""1059_transactionExists"";
}
"
0xeb1b869781fe0960d00cc0826ff609d4f3e2fe1a.sol,CustomToken,"contract CustomToken is BaseToken, ICOToken { function CustomToken() public { totalSupply = 210000000000000000000000000; balanceOf[0xf588d792fa8a634162760482a7b61dd1ab99b1f1] = totalSupply; name = ; symbol = ; decimals = 18; icoRatio = 88888; icoEndtime = 1519812000; icoSender = 0xf588d792fa8a634162760482a7b61dd1ab99b1f1; icoHolder = 0xf043ae16a61ece2107eb2ba48dcc7ad1c8f9f2dc; }",0,"subgraph cluster_357_CustomToken {
label=""CustomToken"";
""357_CustomToken"" [label=""CustomToken""];
}
"
0x9311f7ee5f48a807d598cdd68f43cd4e73ffa747.sol,GTO,contract GTO is ERC20Interface { uint8 public constant decimals = 5; string public constant symbol = ; string public constant name = ; bool public _selling = false; uint256 public _totalSupply = 10 ** 14; uint256 public _originalBuyPrice = 45 * 10**7; address public owner; mapping(address => uint256) private balances; mapping(address => mapping (address => uint256)) private allowed; mapping(address => bool) private approvedInvestorList; mapping(address => uint256) private deposit; address[] private buyers; uint8 public _icoPercent = 10; uint256 public _icoSupply = _totalSupply * _icoPercent / 100; uint256 public _minimumBuy = 3 * 10 ** 17; uint256 public _maximumBuy = 30 * 10 ** 18; modifier onlyOwner() { require(msg.sender == owner); _; },0,"subgraph cluster_778_GTO {
label=""GTO"";
""778_totalSupply"" [label=""totalSupply""];
""778_setMaximumBuy"" [label=""setMaximumBuy""];
""778_setIcoPercent"" [label=""setIcoPercent""];
""778_turnOnSale"" [label=""turnOnSale""];
""778_allowance"" [label=""allowance""];
""778_withdraw"" [label=""withdraw""];
""778_balanceOf"" [label=""balanceOf""];
""778_fallback"" [label=""fallback""];
""778_transfer"" [label=""transfer""];
""778_getBuyers"" [label=""getBuyers""];
""778_removeInvestorList"" [label=""removeInvestorList""];
""778_buyGifto"" [label=""buyGifto""];
""778_approve"" [label=""approve""];
""778_turnOffSale"" [label=""turnOffSale""];
""778_deliveryToken"" [label=""deliveryToken""];
""778_setBuyPrice"" [label=""setBuyPrice""];
""778_getDeposit"" [label=""getDeposit""];
""778_transferFrom"" [label=""transferFrom""];
""778_isApprovedInvestor"" [label=""isApprovedInvestor""];
""778_addInvestorList"" [label=""addInvestorList""];
""778_GTO"" [label=""GTO""];
""778_fallback"" -> ""778_buyGifto"";
""778_setIcoPercent"" -> ""778_onlyOwner"";
""778_buyGifto"" -> ""778_onSale"";
""778_addInvestorList"" -> ""778_onlyOwner"";
""778_deliveryToken"" -> ""778_onlyOwner"";
""778_removeInvestorList"" -> ""778_onlyOwner"";
""778_withdraw"" -> ""778_onlyOwner"";
""778_setBuyPrice"" -> ""778_onlyOwner"";
""778_deliveryToken"" -> ""778_validRange"";
""778_turnOffSale"" -> ""778_onlyOwner"";
""778_setMaximumBuy"" -> ""778_onlyOwner"";
""778_buyGifto"" -> ""778_validValue"";
""778_turnOnSale"" -> ""778_onlyOwner"";
""778_buyGifto"" -> ""778_validInvestor"";
}
"
0x24626fd95ad815bab2136d6f91ca10562161cda3.sol,DaoStorage,"contract DaoStorage is DaoWhitelistingCommon, BytesIteratorStorage { using DoublyLinkedList for DoublyLinkedList.Bytes; using DaoStructs for DaoStructs.Voting; using DaoStructs for DaoStructs.Proposal; using DaoStructs for DaoStructs.ProposalVersion; DoublyLinkedList.Bytes allProposals; mapping (bytes32 => DaoStructs.Proposal) proposalsById; mapping (bytes32 => DoublyLinkedList.Bytes) proposalsByState; constructor(address _resolver) public { require(init(CONTRACT_STORAGE_DAO, _resolver)); }",0,"subgraph cluster_6932_DaoStorage {
label=""DaoStorage"";
""6932_getNextProposalInState"" [label=""getNextProposalInState""];
""6932_readProposalVersion"" [label=""readProposalVersion""];
""6932_setProposalPass"" [label=""setProposalPass""];
""6932_readProposalFunding"" [label=""readProposalFunding""];
""6932_updateProposalPRL"" [label=""updateProposalPRL""];
""6932_archiveProposal"" [label=""archiveProposal""];
""6932_closeProposal"" [label=""closeProposal""];
""6932_setProposalCollateralAmount"" [label=""setProposalCollateralAmount""];
""6932_updateProposalEndorse"" [label=""updateProposalEndorse""];
""6932_getNextProposalVersion"" [label=""getNextProposalVersion""];
""6932_finalizeProposal"" [label=""finalizeProposal""];
""6932_readProposalDraftVotingResult"" [label=""readProposalDraftVotingResult""];
""6932_readDraftVotingCount"" [label=""readDraftVotingCount""];
""6932_addProposal"" [label=""addProposal""];
""6932_readVote"" [label=""readVote""];
""6932_revealVote"" [label=""revealVote""];
""6932_readProposal"" [label=""readProposal""];
""6932_changeFundings"" [label=""changeFundings""];
""6932_readComittedVote"" [label=""readComittedVote""];
""6932_readProposalDraftVotingTime"" [label=""readProposalDraftVotingTime""];
""6932_readVotingRoundVotes"" [label=""readVotingRoundVotes""];
""6932_getNextProposal"" [label=""getNextProposal""];
""6932_editProposal"" [label=""editProposal""];
""6932_getPreviousProposal"" [label=""getPreviousProposal""];
""6932_readPrlAction"" [label=""readPrlAction""];
""6932_closeProposalInternal"" [label=""closeProposalInternal""];
""6932_setProposalCollateralStatus"" [label=""setProposalCollateralStatus""];
""6932_getFirstProposal"" [label=""getFirstProposal""];
""6932_getFirstProposalVersion"" [label=""getFirstProposalVersion""];
""6932_setProposalDraftPass"" [label=""setProposalDraftPass""];
""6932_getLastProposalInState"" [label=""getLastProposalInState""];
""6932_readProposalMilestone"" [label=""readProposalMilestone""];
""6932_readProposalProposer"" [label=""readProposalProposer""];
""6932_setProposalDraftVotingTime"" [label=""setProposalDraftVotingTime""];
""6932_isClaimed"" [label=""isClaimed""];
""6932_getFirstProposalInState"" [label=""getFirstProposalInState""];
""6932_setDraftVotingClaim"" [label=""setDraftVotingClaim""];
""6932_getLastProposalVersion"" [label=""getLastProposalVersion""];
""6932_readVotingCount"" [label=""readVotingCount""];
""6932_readTotalPrlActions"" [label=""readTotalPrlActions""];
""6932_addProposalDoc"" [label=""addProposalDoc""];
""6932_readProposalVotingTime"" [label=""readProposalVotingTime""];
""6932_setMilestoneFunded"" [label=""setMilestoneFunded""];
""6932_readIfMilestoneFunded"" [label=""readIfMilestoneFunded""];
""6932_readProposalCollateralAmount"" [label=""readProposalCollateralAmount""];
""6932_addDraftVote"" [label=""addDraftVote""];
""6932_isDraftClaimed"" [label=""isDraftClaimed""];
""6932_getPreviousProposalVersion"" [label=""getPreviousProposalVersion""];
""6932_constructor"" [label=""constructor""];
""6932_getLastProposal"" [label=""getLastProposal""];
""6932_commitVote"" [label=""commitVote""];
""6932_getPreviousProposalInState"" [label=""getPreviousProposalInState""];
""6932_readProposalCollateralStatus"" [label=""readProposalCollateralStatus""];
""6932_readProposalVotingResult"" [label=""readProposalVotingResult""];
""6932_setVotingClaim"" [label=""setVotingClaim""];
""6932_setProposalVotingTime"" [label=""setProposalVotingTime""];
""6932_readProposalDocs"" [label=""readProposalDocs""];
""6932_readDraftVote"" [label=""readDraftVote""];
""6932_editProposal"" -> ""6932_sender_is"";
""6932_constructor"" -> ""6932_init"";
""6932_readVotingCount"" -> ""6932_senderIsAllowedToRead"";
""6932_getLastProposalInState"" -> ""6932_read_last_from_bytesarray"";
""6932_readProposalDraftVotingResult"" -> ""6932_senderIsAllowedToRead"";
""6932_readComittedVote"" -> ""6932_senderIsAllowedToRead"";
""6932_getNextProposal"" -> ""6932_read_next_from_bytesarray"";
""6932_setProposalPass"" -> ""6932_closeProposalInternal"";
""6932_readDraftVotingCount"" -> ""6932_senderIsAllowedToRead"";
""6932_readProposal"" -> ""6932_senderIsAllowedToRead"";
""6932_readProposalDraftVotingTime"" -> ""6932_senderIsAllowedToRead"";
""6932_setProposalCollateralAmount"" -> ""6932_sender_is"";
""6932_readProposalCollateralStatus"" -> ""6932_senderIsAllowedToRead"";
""6932_setProposalVotingTime"" -> ""6932_sender_is_from"";
""6932_finalizeProposal"" -> ""6932_getLastProposalVersion"";
""6932_readDraftVote"" -> ""6932_senderIsAllowedToRead"";
""6932_readVotingRoundVotes"" -> ""6932_senderIsAllowedToRead"";
""6932_getPreviousProposalInState"" -> ""6932_read_previous_from_bytesarray"";
""6932_readProposalMilestone"" -> ""6932_senderIsAllowedToRead"";
""6932_addProposalDoc"" -> ""6932_sender_is"";
""6932_setMilestoneFunded"" -> ""6932_sender_is"";
""6932_closeProposal"" -> ""6932_closeProposalInternal"";
""6932_readProposalVotingResult"" -> ""6932_senderIsAllowedToRead"";
""6932_getLastProposalInState"" -> ""6932_senderIsAllowedToRead"";
""6932_setProposalCollateralStatus"" -> ""6932_sender_is_from"";
""6932_commitVote"" -> ""6932_sender_is"";
""6932_revealVote"" -> ""6932_sender_is"";
""6932_finalizeProposal"" -> ""6932_sender_is"";
""6932_setVotingClaim"" -> ""6932_sender_is"";
""6932_setProposalDraftPass"" -> ""6932_sender_is"";
""6932_getPreviousProposal"" -> ""6932_read_previous_from_bytesarray"";
""6932_readProposalFunding"" -> ""6932_senderIsAllowedToRead"";
""6932_getNextProposalVersion"" -> ""6932_read_next_from_bytesarray"";
""6932_archiveProposal"" -> ""6932_sender_is"";
""6932_setProposalDraftVotingTime"" -> ""6932_sender_is"";
""6932_readProposal"" -> ""6932_read_last_from_bytesarray"";
""6932_getNextProposalInState"" -> ""6932_read_next_from_bytesarray"";
""6932_getPreviousProposalInState"" -> ""6932_senderIsAllowedToRead"";
""6932_getLastProposalVersion"" -> ""6932_read_last_from_bytesarray"";
""6932_getFirstProposalInState"" -> ""6932_read_first_from_bytesarray"";
""6932_getLastProposal"" -> ""6932_read_last_from_bytesarray"";
""6932_updateProposalPRL"" -> ""6932_sender_is"";
""6932_getPreviousProposalVersion"" -> ""6932_read_previous_from_bytesarray"";
""6932_getFirstProposalVersion"" -> ""6932_read_first_from_bytesarray"";
""6932_updateProposalEndorse"" -> ""6932_sender_is"";
""6932_addDraftVote"" -> ""6932_sender_is"";
""6932_updateProposalPRL"" -> ""6932_closeProposalInternal"";
""6932_setDraftVotingClaim"" -> ""6932_sender_is"";
""6932_changeFundings"" -> ""6932_sender_is"";
""6932_readProposal"" -> ""6932_read_total_bytesarray"";
""6932_setProposalPass"" -> ""6932_sender_is"";
""6932_getFirstProposal"" -> ""6932_read_first_from_bytesarray"";
""6932_getNextProposalInState"" -> ""6932_senderIsAllowedToRead"";
""6932_closeProposal"" -> ""6932_sender_is"";
""6932_getFirstProposalInState"" -> ""6932_senderIsAllowedToRead"";
""6932_readVote"" -> ""6932_senderIsAllowedToRead"";
""6932_readIfMilestoneFunded"" -> ""6932_senderIsAllowedToRead"";
""6932_readProposalVotingTime"" -> ""6932_senderIsAllowedToRead"";
""6932_addProposal"" -> ""6932_sender_is"";
""6932_setProposalDraftPass"" -> ""6932_closeProposalInternal"";
}
"
0x32e996a5a0b6d93c457bfa70917b08622ccdb3f4.sol,Digitelcoin,"contract Digitelcoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Digitelcoin() public { symbol = ; name = ; decimals = 8; _totalSupply = 30000000000000000; balances[ 0x7107996D02d4027bA082f2C3Aa6679c14Ec13894] = _totalSupply; Transfer(address(0), 0x7107996D02d4027bA082f2C3Aa6679c14Ec13894, _totalSupply); }",0,"subgraph cluster_543_Digitelcoin {
label=""Digitelcoin"";
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_Digitelcoin"" [label=""Digitelcoin""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x18bbc8d1ec4ee0414e24eceed8b6a0e1b509b5c4.sol,MetToken,"contract MetToken is Z_StandardToken, Z_Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 internal constant _totalTokenAmount = 1000 * (10 ** 9) * (10 ** 18); uint256 internal constant WEI_PER_ETHER= 1000000000000000000; uint256 internal constant NUM_OF_SALE_STAGES= 5; enum Sale_Status { Initialized_STATUS, Stage0_Sale_Started_STATUS, Stage0_Sale_Stopped_STATUS, Stage1_Sale_Started_STATUS, Stage1_Sale_Stopped_STATUS, Stage2_Sale_Started_STATUS, Stage2_Sale_Stopped_STATUS, Stage3_Sale_Started_STATUS, Stage3_Sale_Stopped_STATUS, Stage4_Sale_Started_STATUS, Stage4_Sale_Stopped_STATUS, Public_Allowed_To_Trade_STATUS, Stage0_Allowed_To_Trade_STATUS, Closed_STATUS }",0,"subgraph cluster_2808_MetToken {
label=""MetToken"";
""2808_stop_StageN_Sale"" [label=""stop_StageN_Sale""];
""2808_start_Public_Trade"" [label=""start_Public_Trade""];
""2808_z_admin_next_status"" [label=""z_admin_next_status""];
""2808_constructor"" [label=""constructor""];
""2808_ContractEtherBalance"" [label=""ContractEtherBalance""];
""2808_list_history_of_token_transfer"" [label=""list_history_of_token_transfer""];
""2808_z_admin_set_sale_price"" [label=""z_admin_set_sale_price""];
""2808_list_history_of_token_transfer_filtered_by_addr"" [label=""list_history_of_token_transfer_filtered_by_addr""];
""2808_list_frozen_accounts"" [label=""list_frozen_accounts""];
""2808_z_admin_unfreeze"" [label=""z_admin_unfreeze""];
""2808_z_admin_remove_admin"" [label=""z_admin_remove_admin""];
""2808_buy"" [label=""buy""];
""2808_z_admin_add_admin"" [label=""z_admin_add_admin""];
""2808_closeContract"" [label=""closeContract""];
""2808_z_admin_withdraw_ether"" [label=""z_admin_withdraw_ether""];
""2808_z_admin_freeze"" [label=""z_admin_freeze""];
""2808_CurrentSalePrice"" [label=""CurrentSalePrice""];
""2808_start_Stage0_Trade"" [label=""start_Stage0_Trade""];
""2808_start_StageN_Sale"" [label=""start_StageN_Sale""];
""2808_z_admin_add_exchange"" [label=""z_admin_add_exchange""];
""2808_list_active_holders_and_balances"" [label=""list_active_holders_and_balances""];
""2808_fallback"" [label=""fallback""];
""2808_transferFrom"" [label=""transferFrom""];
""2808_transfer"" [label=""transfer""];
""2808_transfer"" -> ""2808_validTransaction"";
""2808_buy"" -> ""2808_isAdmin"";
""2808_z_admin_freeze"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_validTransaction"";
""2808_transfer"" -> ""2808_transfer"";
""2808_z_admin_remove_admin"" -> ""2808_onlyOwner"";
""2808_start_Stage0_Trade"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_transferFrom"";
""2808_z_admin_next_status"" -> ""2808_onlyAdmin"";
""2808_z_admin_next_status"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_add_exchange"" -> ""2808_onlyAdmin"";
""2808_start_Public_Trade"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_transferFromByAdmin"";
""2808_z_admin_add_admin"" -> ""2808_onlyOwner"";
""2808_z_admin_next_status"" -> ""2808_start_StageN_Sale"";
""2808_transferFrom"" -> ""2808_isAdmin"";
""2808_z_admin_withdraw_ether"" -> ""2808_onlyAdmin"";
""2808_z_admin_unfreeze"" -> ""2808_onlyAdmin"";
""2808_z_admin_next_status"" -> ""2808_start_Public_Trade"";
""2808_fallback"" -> ""2808_buy"";
""2808_start_Public_Trade"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_set_sale_price"" -> ""2808_onlyAdmin"";
""2808_closeContract"" -> ""2808_onlyAdmin"";
""2808_buy"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_next_status"" -> ""2808_closeContract"";
""2808_z_admin_next_status"" -> ""2808_start_Stage0_Trade"";
""2808_buy"" -> ""2808_transferFromByAdmin"";
}
"
0x128fa9cc962448d2b438047cdcec1197f63b0ef4.sol,Moon,contract Moon is usingOraclize{ using Strings for string; struct Ticket { uint amount; },0,"subgraph cluster_6657_Moon {
label=""Moon"";
""6657_getRandomNumber"" [label=""getRandomNumber""];
""6657_myEarnings"" [label=""myEarnings""];
""6657_getNumElements"" [label=""getNumElements""];
""6657_endGame"" [label=""endGame""];
""6657_getMyStake"" [label=""getMyStake""];
""6657_getTotalAmount"" [label=""getTotalAmount""];
""6657_getGameEnd"" [label=""getGameEnd""];
""6657___callback"" [label=""__callback""];
""6657_getGameNumber"" [label=""getGameNumber""];
""6657_withdraw"" [label=""withdraw""];
""6657_getNumberOfPlayers"" [label=""getNumberOfPlayers""];
""6657_chooseRandomNumber"" [label=""chooseRandomNumber""];
""6657_getAllGameAmount"" [label=""getAllGameAmount""];
""6657_getNumSums"" [label=""getNumSums""];
""6657_getGameAddresses"" [label=""getGameAddresses""];
""6657_getGameSums"" [label=""getGameSums""];
""6657_insertSums"" [label=""insertSums""];
""6657_clearSums"" [label=""clearSums""];
""6657_buyTicket"" [label=""buyTicket""];
""6657_clearAddresses"" [label=""clearAddresses""];
""6657_getWinnerAddress"" [label=""getWinnerAddress""];
""6657_Moon"" [label=""Moon""];
""6657_insertAddress"" [label=""insertAddress""];
""6657_getGameBegin"" [label=""getGameBegin""];
""6657_chooseRandomNumber"" -> ""6657_oraclize_query"";
""6657_chooseRandomNumber"" -> ""6657_uint2str"";
""6657_endGame"" -> ""6657_clearAddresses"";
""6657_chooseRandomNumber"" -> ""6657_strConcat"";
""6657___callback"" -> ""6657_parseInt"";
""6657_buyTicket"" -> ""6657_insertAddress"";
""6657_endGame"" -> ""6657_clearSums"";
""6657___callback"" -> ""6657_oraclize_cbAddress"";
""6657_buyTicket"" -> ""6657_insertSums"";
}
"
0x72c17126e2ff24b5d76a75ed4b3f031c70b05eac.sol,StringMover,"contract StringMover { function stringToBytes32(string s) public constant returns(bytes32){ bytes32 out; assembly { out := mload(add(s, 32)) }",0,"subgraph cluster_440_StringMover {
label=""StringMover"";
""440_stringToBytes32"" [label=""stringToBytes32""];
""440_bytes32ToString"" [label=""bytes32ToString""];
""440_bytes64ToString"" [label=""bytes64ToString""];
""440_stringToBytes64"" [label=""stringToBytes64""];
}
"
0x87cdabc87128476d84462eb9c5a67a7acfa7889e.sol,USDPrice,contract USDPrice is Ownable { using SafeMath for uint256; uint256 public ETHUSD; uint256 public updatedTime; mapping (uint256 => uint256) public priceHistory; event PriceUpdated(uint256 price); constructor() public { },0,"subgraph cluster_1382_USDPrice {
label=""USDPrice"";
""1382_updatePrice"" [label=""updatePrice""];
""1382_constructor"" [label=""constructor""];
""1382_getHistoricPrice"" [label=""getHistoricPrice""];
""1382_getPrice"" [label=""getPrice""];
""1382_updatePrice"" -> ""1382_onlyOwner"";
}
"
0xf24c63438ae11cb3facb84006f4cfa75458126ed.sol,ClockAuction,"contract ClockAuction is Pausable, ClockAuctionBase { bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d); function ClockAuction(address _nftAddress, uint256 _cut) public { require(_cut <= 10000); ownerCut = _cut; ERC721 candidateContract = ERC721(_nftAddress); require(candidateContract.supportsInterface(InterfaceSignature_ERC721)); nonFungibleContract = candidateContract; }",0,"subgraph cluster_3079_SaleClockAuction {
label=""SaleClockAuction"";
""3079_createAuction"" [label=""createAuction""];
""3079_isSaleClockAuction"" [label=""isSaleClockAuction""];
""3079_SaleClockAuction"" [label=""SaleClockAuction""];
""3079_averageGen0SalePrice"" [label=""averageGen0SalePrice""];
""3079_bid"" [label=""bid""];
""3079_createAuction"" -> ""3079__addAuction"";
""3079_SaleClockAuction"" -> ""3079_ClockAuction"";
""3079_createAuction"" -> ""3079__escrow"";
""3079_bid"" -> ""3079__bid"";
""3079_bid"" -> ""3079__transfer"";
}
"
0x5438b0938fb88a979032f45b87d2d1aeffe5cc28.sol,Gifto,contract Gifto is ERC20Interface { uint public constant decimals = 5; string public constant symbol = ; string public constant name = ; bool public _selling = false; uint public _totalSupply = 10 ** 14; uint public _originalBuyPrice = 10 ** 10; address public owner; mapping(address => uint256) balances; mapping(address => bool) approvedInvestorList; mapping(address => uint256) deposit; address[] buyers; uint _icoPercent = 10; uint public _icoSupply = _totalSupply * _icoPercent / 100; uint public _minimumBuy = 10 ** 17; uint public _maximumBuy = 30 * 10 ** 18; modifier onlyOwner() { require(msg.sender == owner); _; },0,"subgraph cluster_865_Gifto {
label=""Gifto"";
""865_isSellingNow"" [label=""isSellingNow""];
""865_filterBuyers"" [label=""filterBuyers""];
""865_returnETHforNormalBuyers"" [label=""returnETHforNormalBuyers""];
""865_getTotalDeposit"" [label=""getTotalDeposit""];
""865_withdraw"" [label=""withdraw""];
""865_isApprovedInvestor"" [label=""isApprovedInvestor""];
""865_getInvestorBuyers"" [label=""getInvestorBuyers""];
""865_removeInvestorList"" [label=""removeInvestorList""];
""865_turnOnSale"" [label=""turnOnSale""];
""865_setIcoPercent"" [label=""setIcoPercent""];
""865_setMaximumBuy"" [label=""setMaximumBuy""];
""865_transfer"" [label=""transfer""];
""865_getNormalBuyers"" [label=""getNormalBuyers""];
""865_totalSupply"" [label=""totalSupply""];
""865_buy"" [label=""buy""];
""865_setMinimumBuy"" [label=""setMinimumBuy""];
""865_deliveryToken"" [label=""deliveryToken""];
""865_fallback"" [label=""fallback""];
""865_getDeposit"" [label=""getDeposit""];
""865_turnOffSale"" [label=""turnOffSale""];
""865_addInvestorList"" [label=""addInvestorList""];
""865_balanceOf"" [label=""balanceOf""];
""865_setBuyPrice"" [label=""setBuyPrice""];
""865_Gifto"" [label=""Gifto""];
""865_fallback"" -> ""865_validValue"";
""865_turnOnSale"" -> ""865_onlyOwner"";
""865_returnETHforNormalBuyers"" -> ""865_onlyOwner"";
""865_setBuyPrice"" -> ""865_onlyOwner"";
""865_withdraw"" -> ""865_onlyOwner"";
""865_setMinimumBuy"" -> ""865_onlyOwner"";
""865_buy"" -> ""865_validOriginalBuyPrice"";
""865_buy"" -> ""865_onSale"";
""865_buy"" -> ""865_onlyNotOwner"";
""865_getNormalBuyers"" -> ""865_filterBuyers"";
""865_setIcoPercent"" -> ""865_onlyOwner"";
""865_removeInvestorList"" -> ""865_onlyOwner"";
""865_getInvestorBuyers"" -> ""865_filterBuyers"";
""865_deliveryToken"" -> ""865_onlyOwner"";
""865_turnOffSale"" -> ""865_onlyOwner"";
""865_addInvestorList"" -> ""865_onlyOwner"";
""865_buy"" -> ""865_validInvestor"";
""865_setMaximumBuy"" -> ""865_onlyOwner"";
""865_deliveryToken"" -> ""865_validOriginalBuyPrice"";
}
"
0x708400c5b44cd5b3517f0cdde21c62bef5a7eb18.sol,Burnable,"contract Burnable is StandardToken { using SafeMath for uint; event Burn(address indexed from, uint value); function burn(uint _value) public returns (bool success) { require(_value > 0 && balances[msg.sender] >= _value); balances[msg.sender] = balances[msg.sender].sub(_value); totalSupply_ = totalSupply_.sub(_value); emit Burn(msg.sender, _value); return true; }",0,"subgraph cluster_840_Burnable {
label=""Burnable"";
""840_transferFrom"" [label=""transferFrom""];
""840_burn"" [label=""burn""];
""840_transfer"" [label=""transfer""];
""840_burnFrom"" [label=""burnFrom""];
""840_transferFrom"" -> ""840_transferFrom"";
""840_transfer"" -> ""840_transfer"";
}
"
0x0cf55facee33ed2827d78ad2d113efe0aa80a92b.sol,BITTOToken,"contract BITTOToken is ERC20,PoSTokenStandard,Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint public decimals = 18; uint public chainStartTime; uint public chainStartBlockNumber; uint public stakeStartTime; uint public stakeMinAge = 15 days; uint public stakeMaxAge = 90 days; uint constant REWARDS_PER_AGE = 622665006227000; uint public totalSupply; uint public maxTotalSupply; uint public totalInitialSupply; mapping(address => bool) public noPOSRewards; struct transferInStruct { uint128 amount; uint64 time; }",0,"subgraph cluster_1337_BITTOToken {
label=""BITTOToken"";
""1337_approve"" [label=""approve""];
""1337_totalSupply"" [label=""totalSupply""];
""1337_ownerBurnToken"" [label=""ownerBurnToken""];
""1337_batchTransfer"" [label=""batchTransfer""];
""1337_disablePOSReward"" [label=""disablePOSReward""];
""1337_transferFrom"" [label=""transferFrom""];
""1337_getCoinAge"" [label=""getCoinAge""];
""1337_annualInterest"" [label=""annualInterest""];
""1337_balanceOf"" [label=""balanceOf""];
""1337_allowance"" [label=""allowance""];
""1337_coinAge"" [label=""coinAge""];
""1337_transfer"" [label=""transfer""];
""1337_mint"" [label=""mint""];
""1337_ownerSetStakeStartTime"" [label=""ownerSetStakeStartTime""];
""1337_burn"" [label=""burn""];
""1337_getProofOfStakeReward"" [label=""getProofOfStakeReward""];
""1337_getBlockNumber"" [label=""getBlockNumber""];
""1337_BITTOToken"" [label=""BITTOToken""];
""1337_transfer"" -> ""1337_mint"";
""1337_ownerSetStakeStartTime"" -> ""1337_onlyOwner"";
""1337_ownerBurnToken"" -> ""1337_onlyOwner"";
""1337_mint"" -> ""1337_getProofOfStakeReward"";
""1337_transferFrom"" -> ""1337_onlyPayloadSize"";
""1337_disablePOSReward"" -> ""1337_onlyOwner"";
""1337_transfer"" -> ""1337_onlyPayloadSize"";
""1337_coinAge"" -> ""1337_getCoinAge"";
""1337_batchTransfer"" -> ""1337_onlyOwner"";
""1337_mint"" -> ""1337_canPoSMint"";
""1337_getProofOfStakeReward"" -> ""1337_getCoinAge"";
}
"
0x29632c10d76bd1aed6b1524bf5bde4c992610670.sol,ApplicationEntity,"contract ApplicationEntity { bytes32 sourceCodeUrl; bool public _initialized = false; bool public _locked = false; uint8 public CurrentEntityState; mapping (bytes32 => uint8) public EntityStates; address public GatewayInterfaceAddress; ABIGatewayInterface GatewayInterfaceEntity; ABIProposals public ProposalsEntity; ABIFunding public FundingEntity; ABIMilestones public MilestonesEntity; ABIMeetings public MeetingsEntity; ABIBountyManager public BountyManagerEntity; ABITokenManager public TokenManagerEntity; ABIListingContract public ListingContractEntity; ABIFundingManager public FundingManagerEntity; ABINewsContract public NewsContractEntity; mapping (bytes32 => address) public AssetCollection; mapping (uint8 => bytes32) public AssetCollectionIdToName; uint8 public AssetCollectionNum = 0; event EventAppEntityReady ( address indexed _address ); event EventAppEntityCodeUpgradeProposal ( address indexed _address, bytes32 indexed _sourceCodeUrl ); event EventAppEntityInitAsset ( bytes32 indexed _name, address indexed _address ); event EventAppEntityInitAssetsToThis ( uint8 indexed _assetNum ); event EventAppEntityAssetsToNewApplication ( address indexed _address ); event EventAppEntityLocked ( address indexed _address ); address public deployerAddress; function ApplicationEntity() public { deployerAddress = msg.sender; setEntityStates(); CurrentEntityState = getEntityState(); }",0,"subgraph cluster_236_ApplicationEntityABI {
label=""ApplicationEntityABI"";
""236_extendedAnyAssetHasChanges"" [label=""extendedAnyAssetHasChanges""];
""236_getBylawBytes32"" [label=""getBylawBytes32""];
""236_getTimestamp"" [label=""getTimestamp""];
""236_setUpgradeState"" [label=""setUpgradeState""];
""236_createCodeUpgradeProposal"" [label=""createCodeUpgradeProposal""];
""236_addAssetBountyManager"" [label=""addAssetBountyManager""];
""236_setBylawUint256"" [label=""setBylawUint256""];
""236_getEntityState"" [label=""getEntityState""];
""236_addAssetMeetings"" [label=""addAssetMeetings""];
""236_lock"" [label=""lock""];
""236_ApplicationEntity"" [label=""ApplicationEntity""];
""236_hasRequiredStateChanges"" [label=""hasRequiredStateChanges""];
""236_addAssetFundingManager"" [label=""addAssetFundingManager""];
""236_linkToGateway"" [label=""linkToGateway""];
""236_getAssetAddressByName"" [label=""getAssetAddressByName""];
""236_doStateChanges"" [label=""doStateChanges""];
""236_anyAssetHasChanges"" [label=""anyAssetHasChanges""];
""236_initializeAssetsToThisApplication"" [label=""initializeAssetsToThisApplication""];
""236_addAssetProposals"" [label=""addAssetProposals""];
""236_setBylawBytes32"" [label=""setBylawBytes32""];
""236_acceptCodeUpgradeProposal"" [label=""acceptCodeUpgradeProposal""];
""236_addAssetTokenManager"" [label=""addAssetTokenManager""];
""236_getRequiredStateChanges"" [label=""getRequiredStateChanges""];
""236_initialize"" [label=""initialize""];
""236_getParentAddress"" [label=""getParentAddress""];
""236_transferAssetsToNewApplication"" [label=""transferAssetsToNewApplication""];
""236_addAssetListingContract"" [label=""addAssetListingContract""];
""236_addAssetFunding"" [label=""addAssetFunding""];
""236_canInitiateCodeUpgrade"" [label=""canInitiateCodeUpgrade""];
""236_addAssetMilestones"" [label=""addAssetMilestones""];
""236_addAssetNewsContract"" [label=""addAssetNewsContract""];
""236_getBylawUint256"" [label=""getBylawUint256""];
}
"
0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol,CryptoflipCar,contract CryptoflipCar { string version = ; address ownerAddress = 0x3177Abbe93422c9525652b5d4e1101a248A99776; address foundTeamAddress = 0x30A38029bEd78159B0342FF9722C3B56479328D8; struct WhaleCard { address ownerAddress; uint256 curPrice; },0,"subgraph cluster_2171_CryptoflipCar {
label=""CryptoflipCar"";
""2171_getCompany"" [label=""getCompany""];
""2171_purchaseMakeCard"" [label=""purchaseMakeCard""];
""2171_getCar"" [label=""getCar""];
""2171_getCarCount"" [label=""getCarCount""];
""2171_purchaseWhaleCard"" [label=""purchaseWhaleCard""];
""2171_purchaseCarCard"" [label=""purchaseCarCard""];
""2171_purchaseCarAdv"" [label=""purchaseCarAdv""];
""2171_purchaseCompanyCard"" [label=""purchaseCompanyCard""];
""2171_getMake"" [label=""getMake""];
""2171_GetIsPauded"" [label=""GetIsPauded""];
""2171_purchaseMakeAdv"" [label=""purchaseMakeAdv""];
""2171_playGame"" [label=""playGame""];
""2171_addCar"" [label=""addCar""];
""2171_getWhaleCard"" [label=""getWhaleCard""];
""2171_div"" [label=""div""];
""2171_InitiateWhaleCard"" [label=""InitiateWhaleCard""];
""2171_purchaseCompanyAdv"" [label=""purchaseCompanyAdv""];
""2171_InitiateCompanies"" [label=""InitiateCompanies""];
""2171_setReleaseMake"" [label=""setReleaseMake""];
""2171_pauseGame"" [label=""pauseGame""];
""2171_mul"" [label=""mul""];
""2171_getMakeCount"" [label=""getMakeCount""];
""2171_InitiateMakes"" [label=""InitiateMakes""];
""2171_setReleaseCar"" [label=""setReleaseCar""];
""2171_InitiateCars"" [label=""InitiateCars""];
""2171_getCompanyCount"" [label=""getCompanyCount""];
""2171_setReleaseCompany"" [label=""setReleaseCompany""];
""2171_addCompany"" [label=""addCompany""];
""2171_addMake"" [label=""addMake""];
""2171_setReleaseMake"" -> ""2171_onlyOwner"";
""2171_InitiateWhaleCard"" -> ""2171_onlyOwner"";
""2171_purchaseCompanyCard"" -> ""2171_div"";
""2171_purchaseCarAdv"" -> ""2171_div"";
""2171_purchaseCompanyCard"" -> ""2171_mul"";
""2171_InitiateCompanies"" -> ""2171_addCompany"";
""2171_playGame"" -> ""2171_onlyOwner"";
""2171_purchaseMakeAdv"" -> ""2171_mul"";
""2171_InitiateCars"" -> ""2171_addCar"";
""2171_InitiateMakes"" -> ""2171_onlyOwner"";
""2171_InitiateCompanies"" -> ""2171_onlyOwner"";
""2171_purchaseWhaleCard"" -> ""2171_div"";
""2171_purchaseMakeCard"" -> ""2171_mul"";
""2171_addCompany"" -> ""2171_onlyOwner"";
""2171_purchaseCarCard"" -> ""2171_div"";
""2171_InitiateMakes"" -> ""2171_addMake"";
""2171_purchaseCarAdv"" -> ""2171_mul"";
""2171_pauseGame"" -> ""2171_onlyOwner"";
""2171_purchaseWhaleCard"" -> ""2171_mul"";
""2171_setReleaseCompany"" -> ""2171_onlyOwner"";
""2171_InitiateCars"" -> ""2171_onlyOwner"";
""2171_purchaseMakeCard"" -> ""2171_div"";
""2171_purchaseMakeAdv"" -> ""2171_div"";
""2171_purchaseCompanyAdv"" -> ""2171_mul"";
""2171_purchaseCompanyAdv"" -> ""2171_div"";
""2171_addCar"" -> ""2171_onlyOwner"";
""2171_setReleaseCar"" -> ""2171_onlyOwner"";
""2171_addMake"" -> ""2171_onlyOwner"";
""2171_purchaseCarCard"" -> ""2171_mul"";
}
"
0xdc0a2185031ecf89f091a39c63c2857a7d5c301a.sol,Arbitrator,"contract Arbitrator is Owned { Realitio public realitio; mapping(bytes32 => uint256) public arbitration_bounties; uint256 dispute_fee; mapping(bytes32 => uint256) custom_dispute_fees; string public metadata; event LogRequestArbitration( bytes32 indexed question_id, uint256 fee_paid, address requester, uint256 remaining ); event LogSetRealitio( address realitio ); event LogSetQuestionFee( uint256 fee ); event LogSetDisputeFee( uint256 fee ); event LogSetCustomDisputeFee( bytes32 indexed question_id, uint256 fee ); constructor() public { owner = msg.sender; }",0,"subgraph cluster_2520_Arbitrator {
label=""Arbitrator"";
""2520_setRealitio"" [label=""setRealitio""];
""2520_setQuestionFee"" [label=""setQuestionFee""];
""2520_submitAnswerByArbitrator"" [label=""submitAnswerByArbitrator""];
""2520_realitycheck"" [label=""realitycheck""];
""2520_constructor"" [label=""constructor""];
""2520_setCustomDisputeFee"" [label=""setCustomDisputeFee""];
""2520_setDisputeFee"" [label=""setDisputeFee""];
""2520_requestArbitration"" [label=""requestArbitration""];
""2520_fallback"" [label=""fallback""];
""2520_setMetaData"" [label=""setMetaData""];
""2520_callWithdraw"" [label=""callWithdraw""];
""2520_getDisputeFee"" [label=""getDisputeFee""];
""2520_withdraw"" [label=""withdraw""];
""2520_submitAnswerByArbitrator"" -> ""2520_onlyOwner"";
""2520_setRealitio"" -> ""2520_onlyOwner"";
""2520_withdraw"" -> ""2520_onlyOwner"";
""2520_setDisputeFee"" -> ""2520_onlyOwner"";
""2520_setCustomDisputeFee"" -> ""2520_onlyOwner"";
""2520_callWithdraw"" -> ""2520_onlyOwner"";
""2520_requestArbitration"" -> ""2520_getDisputeFee"";
""2520_setQuestionFee"" -> ""2520_onlyOwner"";
""2520_setMetaData"" -> ""2520_onlyOwner"";
}
"
0x5819f24d478e4630930bd97d640dd2fdabd0a4ff.sol,BulkToken,contract BulkToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 1000000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function BulkToken () { owner = msg.sender; },0,"subgraph cluster_756_BulkToken {
label=""BulkToken"";
""756_transfer"" [label=""transfer""];
""756_BulkToken"" [label=""BulkToken""];
""756_createTokens"" [label=""createTokens""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_refundTokens"" [label=""refundTokens""];
""756_setOwner"" [label=""setOwner""];
""756_totalSupply"" [label=""totalSupply""];
""756_transferFrom"" [label=""transferFrom""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_approve"" [label=""approve""];
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeAdd"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_allowance"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0xdd1d5ce9f8e26a3f768b1c1e5c68db10a05d5fc0.sol,WeBetCrypto,"contract WeBetCrypto { string public name = ; string public symbol = ; address public selfAddress; address public admin; address[] private users; uint8 public decimals = 7; uint256 public relativeDateSave; uint256 public totalFunds; uint256 public totalSupply = 300000000000000; uint256 public pricePerEther; uint256 private amountInCirculation; uint256 private currentProfits; uint256 private currentIteration; uint256 private actualProfitSplit; bool public DAppReady; bool public isFrozen; bool public splitInService = true; bool private hasICORun; bool private running; bool[4] private devApprovals; mapping(address => uint256) balances; mapping(address => uint256) monthlyLimit; mapping(address => bool) isAdded; mapping(address => bool) freezeUser; mapping (address => mapping (address => uint256)) allowed; mapping (address => mapping (address => uint256)) cooldown; event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event CurrentTLSNProof(address indexed _from, string _proof); modifier isAdmin() { require(msg.sender == admin); _; }",0,"subgraph cluster_1864_WeBetCrypto {
label=""WeBetCrypto"";
""1864_emergencySplitToggle"" [label=""emergencySplitToggle""];
""1864_name"" [label=""name""];
""1864_setPriceOfEther"" [label=""setPriceOfEther""];
""1864_claimTokens"" [label=""claimTokens""];
""1864_checkSplitEnd"" [label=""checkSplitEnd""];
""1864_approve"" [label=""approve""];
""1864_fallback"" [label=""fallback""];
""1864_symbol"" [label=""symbol""];
""1864_loginUser"" [label=""loginUser""];
""1864_assetThaw"" [label=""assetThaw""];
""1864_addUser"" [label=""addUser""];
""1864_WeBetCrypto"" [label=""WeBetCrypto""];
""1864_ICOSplit"" [label=""ICOSplit""];
""1864_transferToContract"" [label=""transferToContract""];
""1864_buyTokensForSelf"" [label=""buyTokensForSelf""];
""1864_transferFrom"" [label=""transferFrom""];
""1864_getPricePerToken"" [label=""getPricePerToken""];
""1864_assureDAppIsReady"" [label=""assureDAppIsReady""];
""1864_emergencyThaw"" [label=""emergencyThaw""];
""1864_emergencyFreeze"" [label=""emergencyFreeze""];
""1864_isDAppReady"" [label=""isDAppReady""];
""1864_calculateTokenAmount"" [label=""calculateTokenAmount""];
""1864_totalSupply"" [label=""totalSupply""];
""1864_alterBankBalance"" [label=""alterBankBalance""];
""1864_buyTokensForAddress"" [label=""buyTokensForAddress""];
""1864_tokenFallback"" [label=""tokenFallback""];
""1864_isContract"" [label=""isContract""];
""1864_allowance"" [label=""allowance""];
""1864_transferToSelf"" [label=""transferToSelf""];
""1864_splitProfits"" [label=""splitProfits""];
""1864_assetFreeze"" [label=""assetFreeze""];
""1864_transfer"" [label=""transfer""];
""1864_safeSub"" [label=""safeSub""];
""1864_decimals"" [label=""decimals""];
""1864_checkMonthlyLimit"" [label=""checkMonthlyLimit""];
""1864_transferToAddress"" [label=""transferToAddress""];
""1864_balanceOf"" [label=""balanceOf""];
""1864_logoutUser"" [label=""logoutUser""];
""1864_checkCooldown"" [label=""checkCooldown""];
""1864_ICOSplit"" -> ""1864_isAdmin"";
""1864_ICOSplit"" -> ""1864_safeSub"";
""1864_calculateTokenAmount"" -> ""1864_getPricePerToken"";
""1864_buyTokensForSelf"" -> ""1864_calculateTokenAmount"";
""1864_alterBankBalance"" -> ""1864_DAppOnline"";
""1864_logoutUser"" -> ""1864_isAdmin"";
""1864_ICOSplit"" -> ""1864_assetFreeze"";
""1864_transfer"" -> ""1864_isRunning"";
""1864_loginUser"" -> ""1864_DAppOnline"";
""1864_transferToAddress"" -> ""1864_addUser"";
""1864_transfer"" -> ""1864_transferToSelf"";
""1864_buyTokensForAddress"" -> ""1864_addUser"";
""1864_emergencyFreeze"" -> ""1864_isAdmin"";
""1864_loginUser"" -> ""1864_isAdmin"";
""1864_transferFrom"" -> ""1864_requireThaw"";
""1864_isDAppReady"" -> ""1864_isAdmin"";
""1864_splitProfits"" -> ""1864_assetFreeze"";
""1864_checkSplitEnd"" -> ""1864_assetThaw"";
""1864_buyTokensForAddress"" -> ""1864_calculateTokenAmount"";
""1864_emergencyThaw"" -> ""1864_isAdmin"";
""1864_transfer"" -> ""1864_transferToContract"";
""1864_transferFrom"" -> ""1864_safeSub"";
""1864_transferFrom"" -> ""1864_userNotPlaying"";
""1864_transferToContract"" -> ""1864_safeSub"";
""1864_transferToAddress"" -> ""1864_safeSub"";
""1864_splitProfits"" -> ""1864_safeSub"";
""1864_logoutUser"" -> ""1864_DAppOnline"";
""1864_setPriceOfEther"" -> ""1864_isAdmin"";
""1864_transfer"" -> ""1864_isContract"";
""1864_transferFrom"" -> ""1864_addUser"";
""1864_buyTokensForSelf"" -> ""1864_addUser"";
""1864_claimTokens"" -> ""1864_isAdmin"";
""1864_transfer"" -> ""1864_requireThaw"";
""1864_transferToSelf"" -> ""1864_safeSub"";
""1864_alterBankBalance"" -> ""1864_isAdmin"";
""1864_splitProfits"" -> ""1864_checkSplitEnd"";
""1864_transferToContract"" -> ""1864_addUser"";
""1864_transfer"" -> ""1864_transferToAddress"";
""1864_ICOSplit"" -> ""1864_assetThaw"";
""1864_alterBankBalance"" -> ""1864_safeSub"";
""1864_WeBetCrypto"" -> ""1864_addUser"";
""1864_ICOSplit"" -> ""1864_oneTime"";
}
"
0x533ec971484b1014215422010978e892eacac430.sol,MortifyAsset,"contract MortifyAsset is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 100 * 1 days; uint public round2 = now + 95 * 1 days; uint public round1 = now + 70 * 1 days; uint256 public totalSupply = 25000000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000000000e18; uint public target0drop = 1; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1253_MortifyAsset {
label=""MortifyAsset"";
""1253_withdraw"" [label=""withdraw""];
""1253_transfer"" [label=""transfer""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" [label=""getTokens""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_constructor"" [label=""constructor""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_Distribute"" [label=""Distribute""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_add"" [label=""add""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_approve"" [label=""approve""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_distr"" [label=""distr""];
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_constructor"" -> ""1253_distr"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_distr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
}
"
0x4b5bc97407898339eca79b541cee9b8b79ccda40.sol,IdaToken,"contract IdaToken is Ownable, RBAC, StandardToken { using AddressUtils for address; using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public constant INITIAL_SUPPLY = 10000000000; uint256 public constant FOOTSTONE_ROUND_AMOUNT = 396000000; uint256 public constant PRIVATE_SALE_AMOUNT = 1200000000; uint256 public constant OWNER_LOCKED_IN_COMMON = 5000000000; uint256 public constant COMMON_PURPOSE_AMOUNT = 7204000000; uint256 public constant TEAM_RESERVED_AMOUNT1 = 120000000; uint256 public constant TEAM_RESERVED_AMOUNT2 = 360000000; uint256 public constant TEAM_RESERVED_AMOUNT3 = 360000000; uint256 public constant TEAM_RESERVED_AMOUNT4 = 360000000; uint256 public constant EXCHANGE_RATE_IN_PRIVATE_SALE = 10000; uint256 public constant TIMESTAMP_OF_20181001000001 = 1538352001; uint256 public constant TIMESTAMP_OF_20181002000001 = 1538438401; uint256 public constant TIMESTAMP_OF_20181101000001 = 1541030401; uint256 public constant TIMESTAMP_OF_20190201000001 = 1548979201; uint256 public constant TIMESTAMP_OF_20190501000001 = 1556668801; uint256 public constant TIMESTAMP_OF_20190801000001 = 1564617601; uint256 public constant TIMESTAMP_OF_20191101000001 = 1572566401; uint256 public constant TIMESTAMP_OF_20201101000001 = 1604188801; uint256 public constant TIMESTAMP_OF_20211101000001 = 1635724801; string public constant ROLE_PARTNERWHITELIST = ; string public constant ROLE_PRIVATESALEWHITELIST = ; uint256 public totalOwnerReleased; uint256 public totalPartnersReleased; uint256 public totalPrivateSalesReleased; uint256 public totalCommonReleased; uint256 public totalTeamReleased1; uint256 public totalTeamReleased2; uint256 public totalTeamReleased3; uint256 public totalTeamReleased4; address[] private partners; mapping (address => uint256) private partnersIndex; address[] private privateSaleAgents; mapping (address => uint256) private privateSaleAgentsIndex; mapping (address => uint256) private partnersAmountLimit; mapping (address => uint256) private partnersWithdrawed; mapping (address => uint256) private privateSalesReleased; address ownerWallet; event TransferLog(address from, address to, bytes32 functionName, uint256 value); constructor(address _ownerWallet) public { ownerWallet = _ownerWallet; totalSupply_ = INITIAL_SUPPLY * (10 ** uint256(decimals)); balances[msg.sender] = totalSupply_; }",0,"subgraph cluster_2219_IdaToken {
label=""IdaToken"";
""2219_addAddressToPrivateWhiteList"" [label=""addAddressToPrivateWhiteList""];
""2219_addAddressToPartnerWhiteList"" [label=""addAddressToPartnerWhiteList""];
""2219_getPartnerAddresses"" [label=""getPartnerAddresses""];
""2219_constructor"" [label=""constructor""];
""2219_withdrawRemainPrivateCoin"" [label=""withdrawRemainPrivateCoin""];
""2219_fallback"" [label=""fallback""];
""2219_withdrawToPartner"" [label=""withdrawToPartner""];
""2219__permittedPartnerTranferValue"" [label=""_permittedPartnerTranferValue""];
""2219_withdrawPrivateCoinByMan"" [label=""withdrawPrivateCoinByMan""];
""2219_transfer"" [label=""transfer""];
""2219_withdrawToTeamStep4"" [label=""withdrawToTeamStep4""];
""2219_transferFrom"" [label=""transferFrom""];
""2219_withdrawToTeamStep3"" [label=""withdrawToTeamStep3""];
""2219_withdrawToTeamStep2"" [label=""withdrawToTeamStep2""];
""2219_withdrawFunds"" [label=""withdrawFunds""];
""2219_changeOwnerWallet"" [label=""changeOwnerWallet""];
""2219_getPrivateSaleAgentAddresses"" [label=""getPrivateSaleAgentAddresses""];
""2219_privateSale"" [label=""privateSale""];
""2219__privateSaleTransferFromOwner"" [label=""_privateSaleTransferFromOwner""];
""2219_withdrawCommonCoin"" [label=""withdrawCommonCoin""];
""2219__ownerReleaseLimit"" [label=""_ownerReleaseLimit""];
""2219_removeAddressFromPrivateWhiteList"" [label=""removeAddressFromPrivateWhiteList""];
""2219_privateSaleReleased"" [label=""privateSaleReleased""];
""2219_removeAddressFromPartnerWhiteList"" [label=""removeAddressFromPartnerWhiteList""];
""2219_partnerWithdrawed"" [label=""partnerWithdrawed""];
""2219_withdrawToTeamStep1"" [label=""withdrawToTeamStep1""];
""2219_partnerAmountLimit"" [label=""partnerAmountLimit""];
""2219_withdrawToTeamStep4"" -> ""2219_onlyOwner"";
""2219_fallback"" -> ""2219_privateSale"";
""2219_privateSale"" -> ""2219_onlyRole"";
""2219__privateSaleTransferFromOwner"" -> ""2219_transferFrom"";
""2219_withdrawToPartner"" -> ""2219_hasRole"";
""2219_removeAddressFromPartnerWhiteList"" -> ""2219_onlyOwner"";
""2219_withdrawFunds"" -> ""2219_onlyOwner"";
""2219_addAddressToPrivateWhiteList"" -> ""2219_approve"";
""2219_transferFrom"" -> ""2219_transferFrom"";
""2219_withdrawCommonCoin"" -> ""2219_transfer"";
""2219_transfer"" -> ""2219_hasRole"";
""2219_addAddressToPrivateWhiteList"" -> ""2219_hasRole"";
""2219_withdrawPrivateCoinByMan"" -> ""2219_transferFrom"";
""2219_addAddressToPrivateWhiteList"" -> ""2219_onlyOwner"";
""2219_withdrawToTeamStep1"" -> ""2219_onlyOwner"";
""2219_addAddressToPartnerWhiteList"" -> ""2219_hasRole"";
""2219_addAddressToPartnerWhiteList"" -> ""2219_addRole"";
""2219_withdrawRemainPrivateCoin"" -> ""2219_onlyOwner"";
""2219_withdrawToPartner"" -> ""2219_transfer"";
""2219_transfer"" -> ""2219_transfer"";
""2219_withdrawToTeamStep1"" -> ""2219_transfer"";
""2219_transferFrom"" -> ""2219__privateSaleTransferFromOwner"";
""2219_removeAddressFromPartnerWhiteList"" -> ""2219_removeRole"";
""2219_addAddressToPrivateWhiteList"" -> ""2219_addRole"";
""2219_removeAddressFromPrivateWhiteList"" -> ""2219_approve"";
""2219_withdrawCommonCoin"" -> ""2219_onlyOwner"";
""2219_addAddressToPartnerWhiteList"" -> ""2219_onlyOwner"";
""2219_transferFrom"" -> ""2219_hasRole"";
""2219_withdrawToPartner"" -> ""2219_onlyOwner"";
""2219_changeOwnerWallet"" -> ""2219_onlyOwner"";
""2219_removeAddressFromPrivateWhiteList"" -> ""2219_onlyOwner"";
""2219_getPrivateSaleAgentAddresses"" -> ""2219_onlyOwner"";
""2219_withdrawToTeamStep3"" -> ""2219_transfer"";
""2219_withdrawRemainPrivateCoin"" -> ""2219_transfer"";
""2219_transfer"" -> ""2219__ownerReleaseLimit"";
""2219_privateSale"" -> ""2219_transferFrom"";
""2219__permittedPartnerTranferValue"" -> ""2219_balanceOf"";
""2219_withdrawToTeamStep3"" -> ""2219_onlyOwner"";
""2219_removeAddressFromPartnerWhiteList"" -> ""2219_hasRole"";
""2219_removeAddressFromPrivateWhiteList"" -> ""2219_hasRole"";
""2219_withdrawPrivateCoinByMan"" -> ""2219_onlyRole"";
""2219_withdrawToPartner"" -> ""2219_balanceOf"";
""2219_withdrawToTeamStep2"" -> ""2219_transfer"";
""2219_withdrawToTeamStep2"" -> ""2219_onlyOwner"";
""2219_removeAddressFromPrivateWhiteList"" -> ""2219_removeRole"";
""2219_getPartnerAddresses"" -> ""2219_onlyOwner"";
""2219_withdrawToTeamStep4"" -> ""2219_transfer"";
""2219_transfer"" -> ""2219__permittedPartnerTranferValue"";
}
"
0x1919255865512fb1f5a432bad5d8c84a1e406a07.sol,Vixelabs,"contract Vixelabs is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 20000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_950_Vixelabs {
label=""Vixelabs"";
""950_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""950_approve"" [label=""approve""];
""950_Vixelabs"" [label=""Vixelabs""];
""950_getTokens"" [label=""getTokens""];
""950_transferOwnership"" [label=""transferOwnership""];
""950_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""950_transfer"" [label=""transfer""];
""950_distr"" [label=""distr""];
""950_updateTokensPerEth"" [label=""updateTokensPerEth""];
""950_withdraw"" [label=""withdraw""];
""950_getTokenBalance"" [label=""getTokenBalance""];
""950_doAirdrop"" [label=""doAirdrop""];
""950_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""950_burn"" [label=""burn""];
""950_balanceOf"" [label=""balanceOf""];
""950_finishDistribution"" [label=""finishDistribution""];
""950_fallback"" [label=""fallback""];
""950_allowance"" [label=""allowance""];
""950_transferFrom"" [label=""transferFrom""];
""950_getTokens"" -> ""950_distr"";
""950_withdraw"" -> ""950_onlyOwner"";
""950_finishDistribution"" -> ""950_canDistr"";
""950_Vixelabs"" -> ""950_distr"";
""950_adminClaimAirdropMultiple"" -> ""950_onlyOwner"";
""950_burn"" -> ""950_onlyOwner"";
""950_updateTokensPerEth"" -> ""950_onlyOwner"";
""950_fallback"" -> ""950_getTokens"";
""950_transferFrom"" -> ""950_onlyPayloadSize"";
""950_finishDistribution"" -> ""950_onlyOwner"";
""950_getTokens"" -> ""950_canDistr"";
""950_adminClaimAirdrop"" -> ""950_doAirdrop"";
""950_adminClaimAirdrop"" -> ""950_onlyOwner"";
""950_distr"" -> ""950_canDistr"";
""950_transfer"" -> ""950_onlyPayloadSize"";
""950_transferOwnership"" -> ""950_onlyOwner"";
""950_withdrawAltcoinTokens"" -> ""950_onlyOwner"";
""950_adminClaimAirdropMultiple"" -> ""950_doAirdrop"";
}
"
0xa28b5854df048bcd5eec522fada1c6b7ea006aae.sol,usingNRE,contract usingNRE { niguezRandomityEngine internal nre = niguezRandomityEngine(0x031eaE8a8105217ab64359D4361022d0947f4572); function ra() internal view returns (uint256) { return nre.ra(); },0,"subgraph cluster_368_usingNRE {
label=""usingNRE"";
""368_ra"" [label=""ra""];
""368_rm"" [label=""rm""];
""368_rs"" [label=""rs""];
""368_rp"" [label=""rp""];
""368_ru"" [label=""ru""];
""368_rw"" [label=""rw""];
""368_rd"" [label=""rd""];
""368_ri"" [label=""ri""];
""368_rf"" [label=""rf""];
""368_rx"" [label=""rx""];
""368_rl"" [label=""rl""];
""368_rb"" [label=""rb""];
""368_rc"" [label=""rc""];
""368_rk"" [label=""rk""];
""368_rn"" [label=""rn""];
""368_rt"" [label=""rt""];
""368_rg"" [label=""rg""];
""368_re"" [label=""re""];
""368_rq"" [label=""rq""];
""368_rh"" [label=""rh""];
""368_ro"" [label=""ro""];
""368_rv"" [label=""rv""];
""368_rj"" [label=""rj""];
""368_rr"" [label=""rr""];
}
"
0x37238583c041a2f51964f23fde2710c4fbd29e9e.sol,BATMO,"contract BATMO is FOMOEvents { using SafeMath for *; using NameFilter for string; using KeysCalc for uint256; PlayerBookInterface private PlayerBook; OBOK public ObokContract; address private admin = msg.sender; address private admin2; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 1 minutes; uint256 private rndGap_ = 1 minutes; uint256 constant private rndInit_ = 2 hours; uint256 constant private rndInc_ = 10 seconds; uint256 constant private rndMax_ = 2 hours; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => BATMODatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => BATMODatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => BATMODatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => BATMODatasets.TeamFee) public fees_; mapping (uint256 => BATMODatasets.PotSplit) public potSplit_; constructor(address otherAdmin, address token, address playerbook) public { admin2 = otherAdmin; ObokContract = OBOK(token); PlayerBook = PlayerBookInterface(playerbook); fees_[0] = BATMODatasets.TeamFee(47,10); potSplit_[0] = BATMODatasets.PotSplit(15,10); }",0,"subgraph cluster_3778_BATMO {
label=""BATMO"";
""3778_withdrawEarnings"" [label=""withdrawEarnings""];
""3778_buyXname"" [label=""buyXname""];
""3778_fallback"" [label=""fallback""];
""3778_updateTimer"" [label=""updateTimer""];
""3778_activate"" [label=""activate""];
""3778_reLoadXid"" [label=""reLoadXid""];
""3778_withdraw"" [label=""withdraw""];
""3778_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""3778_endTx"" [label=""endTx""];
""3778_constructor"" [label=""constructor""];
""3778_receivePlayerNameList"" [label=""receivePlayerNameList""];
""3778_registerNameXID"" [label=""registerNameXID""];
""3778_updateMasks"" [label=""updateMasks""];
""3778_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""3778_registerNameXaddr"" [label=""registerNameXaddr""];
""3778_updateGenVault"" [label=""updateGenVault""];
""3778_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""3778_calcKeysReceived"" [label=""calcKeysReceived""];
""3778_buyXid"" [label=""buyXid""];
""3778_endRound"" [label=""endRound""];
""3778_determinePID"" [label=""determinePID""];
""3778_getPlayerVaults"" [label=""getPlayerVaults""];
""3778_receivePlayerInfo"" [label=""receivePlayerInfo""];
""3778_reLoadXaddr"" [label=""reLoadXaddr""];
""3778_core"" [label=""core""];
""3778_getTimeLeft"" [label=""getTimeLeft""];
""3778_registerNameXname"" [label=""registerNameXname""];
""3778_distributeExternal"" [label=""distributeExternal""];
""3778_reLoadXname"" [label=""reLoadXname""];
""3778_buyXaddr"" [label=""buyXaddr""];
""3778_reLoadCore"" [label=""reLoadCore""];
""3778_iWantXKeys"" [label=""iWantXKeys""];
""3778_buyCore"" [label=""buyCore""];
""3778_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""3778_getBuyPrice"" [label=""getBuyPrice""];
""3778_managePlayer"" [label=""managePlayer""];
""3778_distributeInternal"" [label=""distributeInternal""];
""3778_reLoadXname"" -> ""3778_isWithinLimits"";
""3778_buyXid"" -> ""3778_isWithinLimits"";
""3778_updateGenVault"" -> ""3778_calcUnMaskedEarnings"";
""3778_buyXname"" -> ""3778_isHuman"";
""3778_registerNameXID"" -> ""3778_isHuman"";
""3778_withdraw"" -> ""3778_isActivated"";
""3778_core"" -> ""3778_distributeExternal"";
""3778_reLoadXaddr"" -> ""3778_isActivated"";
""3778_buyXid"" -> ""3778_isHuman"";
""3778_fallback"" -> ""3778_buyCore"";
""3778_buyCore"" -> ""3778_endRound"";
""3778_reLoadXname"" -> ""3778_reLoadCore"";
""3778_reLoadCore"" -> ""3778_endRound"";
""3778_buyXname"" -> ""3778_buyCore"";
""3778_reLoadCore"" -> ""3778_core"";
""3778_fallback"" -> ""3778_isWithinLimits"";
""3778_core"" -> ""3778_managePlayer"";
""3778_buyXaddr"" -> ""3778_isActivated"";
""3778_getPlayerInfoByAddress"" -> ""3778_calcUnMaskedEarnings"";
""3778_fallback"" -> ""3778_isHuman"";
""3778_buyCore"" -> ""3778_core"";
""3778_core"" -> ""3778_endTx"";
""3778_buyXname"" -> ""3778_isActivated"";
""3778_buyXaddr"" -> ""3778_isHuman"";
""3778_getPlayerVaults"" -> ""3778_calcUnMaskedEarnings"";
""3778_withdrawEarnings"" -> ""3778_updateGenVault"";
""3778_fallback"" -> ""3778_isActivated"";
""3778_buyXaddr"" -> ""3778_isWithinLimits"";
""3778_reLoadXid"" -> ""3778_reLoadCore"";
""3778_reLoadCore"" -> ""3778_withdrawEarnings"";
""3778_reLoadXaddr"" -> ""3778_isWithinLimits"";
""3778_core"" -> ""3778_updateTimer"";
""3778_reLoadXid"" -> ""3778_isActivated"";
""3778_distributeInternal"" -> ""3778_updateMasks"";
""3778_buyXid"" -> ""3778_buyCore"";
""3778_buyXaddr"" -> ""3778_determinePID"";
""3778_getPlayerVaults"" -> ""3778_getPlayerVaultsHelper"";
""3778_buyXid"" -> ""3778_isActivated"";
""3778_core"" -> ""3778_distributeInternal"";
""3778_reLoadXaddr"" -> ""3778_isHuman"";
""3778_buyXid"" -> ""3778_determinePID"";
""3778_reLoadXid"" -> ""3778_isHuman"";
""3778_registerNameXaddr"" -> ""3778_isHuman"";
""3778_managePlayer"" -> ""3778_updateGenVault"";
""3778_reLoadXid"" -> ""3778_isWithinLimits"";
""3778_fallback"" -> ""3778_determinePID"";
""3778_reLoadXaddr"" -> ""3778_reLoadCore"";
""3778_withdraw"" -> ""3778_isHuman"";
""3778_withdraw"" -> ""3778_withdrawEarnings"";
""3778_buyXname"" -> ""3778_isWithinLimits"";
""3778_reLoadXname"" -> ""3778_isActivated"";
""3778_reLoadXname"" -> ""3778_isHuman"";
""3778_registerNameXname"" -> ""3778_isHuman"";
""3778_withdraw"" -> ""3778_endRound"";
""3778_buyXname"" -> ""3778_determinePID"";
""3778_buyXaddr"" -> ""3778_buyCore"";
}
"
0x33cf13763ffe1606783b0f63d9e0dff3d7b80bbc.sol,ChargeNetwork,"contract ChargeNetwork is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 20000000000e8; uint256 public totalDistributed = 0; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 20000000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_ChargeNetwork {
label=""ChargeNetwork"";
""944_distr"" [label=""distr""];
""944_fallback"" [label=""fallback""];
""944_withdraw"" [label=""withdraw""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_approve"" [label=""approve""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_burn"" [label=""burn""];
""944_transfer"" [label=""transfer""];
""944_ChargeNetwork"" [label=""ChargeNetwork""];
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_allowance"" [label=""allowance""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_balanceOf"" [label=""balanceOf""];
""944_transferFrom"" [label=""transferFrom""];
""944_finishDistribution"" [label=""finishDistribution""];
""944_getTokens"" [label=""getTokens""];
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
""944_burn"" -> ""944_onlyOwner"";
""944_ChargeNetwork"" -> ""944_distr"";
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_getTokens"" -> ""944_distr"";
""944_fallback"" -> ""944_getTokens"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_getTokens"" -> ""944_canDistr"";
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_finishDistribution"" -> ""944_onlyOwner"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_distr"" -> ""944_canDistr"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_transferOwnership"" -> ""944_onlyOwner"";
}
"
0x70d0907b064ab5c86849d391124f62ce9bcbf597.sol,Fastbitcoin,"contract Fastbitcoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 99 * 1 days; uint public round2 = now + 15 * 1 days; uint public round1 = now + 5 * 1 days; uint256 public totalSupply = 100000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 10000; uint256 public tokensPerEth = 2500000e8; uint public target0drop = 4000; uint public progress0drop = 0; address multisig = 0x25CB79CB502E58697C47e8cD29411fc4250879a6; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1261_Fastbitcoin {
label=""Fastbitcoin"";
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_constructor"" [label=""constructor""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_approve"" [label=""approve""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_allowance"" [label=""allowance""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokens"" [label=""getTokens""];
""1261_add"" [label=""add""];
""1261_fallback"" [label=""fallback""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_transfer"" [label=""transfer""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_burn"" [label=""burn""];
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
}
"
0x6abf810730a342add1374e11f3e97500ee774d1f.sol,BCFBuyMarket,contract BCFBuyMarket is BCFData { address public buyingEscrowAddress; bool public isBCFBuyMarket = true; function setBuyingEscrowAddress(address _address) external onlyOwner { buyingEscrowAddress = _address; },0,"subgraph cluster_1081_BCFBuyMarket {
label=""BCFBuyMarket"";
""1081_createCardForAcquiredPlayers"" [label=""createCardForAcquiredPlayers""];
""1081_createCardForAcquiredPlayer"" [label=""createCardForAcquiredPlayer""];
""1081_setBuyingEscrowAddress"" [label=""setBuyingEscrowAddress""];
""1081_setBuyingEscrowAddress"" -> ""1081_onlyOwner"";
""1081_createCardForAcquiredPlayers"" -> ""1081_whenNotPaused"";
""1081_createCardForAcquiredPlayer"" -> ""1081_createPlayerCard"";
""1081_createCardForAcquiredPlayer"" -> ""1081_whenNotPaused"";
""1081_createCardForAcquiredPlayers"" -> ""1081_createPlayerCard"";
}
"
0x533bafa16aa76218ec4a365ad71bf8816cf21bbb.sol,ERC721_custom,"contract ERC721_custom is ERC165, IERC721 { using SafeMath for uint256; using Address for address; bytes4 private constant _ERC721_RECEIVED = 0x150b7a02; mapping (uint256 => address) private _tokenOwner; mapping (uint256 => address) private _tokenApprovals; mapping (address => uint256) private _ownedTokensCount; mapping (address => mapping (address => bool)) private _operatorApprovals; bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd; constructor() public { _registerInterface(_InterfaceId_ERC721); }",0,"subgraph cluster_814_ERC721_custom {
label=""ERC721_custom"";
""814__exists"" [label=""_exists""];
""814_isApprovedForAll"" [label=""isApprovedForAll""];
""814_getApproved"" [label=""getApproved""];
""814_internal_transferFrom"" [label=""internal_transferFrom""];
""814_ownerOf"" [label=""ownerOf""];
""814__burn"" [label=""_burn""];
""814__isApprovedOrOwner"" [label=""_isApprovedOrOwner""];
""814__clearApproval"" [label=""_clearApproval""];
""814_approve"" [label=""approve""];
""814_setApprovalForAll"" [label=""setApprovalForAll""];
""814_transferFrom"" [label=""transferFrom""];
""814__mint"" [label=""_mint""];
""814_constructor"" [label=""constructor""];
""814_balanceOf"" [label=""balanceOf""];
""814__addTokenTo"" [label=""_addTokenTo""];
""814__checkOnERC721Received"" [label=""_checkOnERC721Received""];
""814__removeTokenFrom"" [label=""_removeTokenFrom""];
""814__isApprovedOrOwner"" -> ""814_getApproved"";
""814_transferFrom"" -> ""814__addTokenTo"";
""814__burn"" -> ""814__removeTokenFrom"";
""814__isApprovedOrOwner"" -> ""814_isApprovedForAll"";
""814_internal_transferFrom"" -> ""814__addTokenTo"";
""814__burn"" -> ""814__clearApproval"";
""814_transferFrom"" -> ""814__removeTokenFrom"";
""814_approve"" -> ""814_ownerOf"";
""814_getApproved"" -> ""814__exists"";
""814_approve"" -> ""814_isApprovedForAll"";
""814_constructor"" -> ""814__registerInterface"";
""814_transferFrom"" -> ""814__isApprovedOrOwner"";
""814__clearApproval"" -> ""814_ownerOf"";
""814__isApprovedOrOwner"" -> ""814_ownerOf"";
""814__removeTokenFrom"" -> ""814_ownerOf"";
""814_transferFrom"" -> ""814__clearApproval"";
""814__mint"" -> ""814__addTokenTo"";
}
"
0x32ec2e6967687825123c5c0f30c18e2c47708df1.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1312_MiniMeToken {
label=""MiniMeToken"";
""1312_approve"" [label=""approve""];
""1312_createCloneToken"" [label=""createCloneToken""];
""1312_isContract"" [label=""isContract""];
""1312_enableTransfers"" [label=""enableTransfers""];
""1312_allowance"" [label=""allowance""];
""1312_generateTokens"" [label=""generateTokens""];
""1312_min"" [label=""min""];
""1312_destroyTokens"" [label=""destroyTokens""];
""1312_getValueAt"" [label=""getValueAt""];
""1312_transferFrom"" [label=""transferFrom""];
""1312_updateValueAtNow"" [label=""updateValueAtNow""];
""1312_totalSupply"" [label=""totalSupply""];
""1312_approveAndCall"" [label=""approveAndCall""];
""1312_MiniMeToken"" [label=""MiniMeToken""];
""1312_balanceOfAt"" [label=""balanceOfAt""];
""1312_balanceOf"" [label=""balanceOf""];
""1312_fallback"" [label=""fallback""];
""1312_totalSupplyAt"" [label=""totalSupplyAt""];
""1312_claimTokens"" [label=""claimTokens""];
""1312_transfer"" [label=""transfer""];
""1312_doTransfer"" [label=""doTransfer""];
""1312_balanceOf"" -> ""1312_balanceOfAt"";
""1312_balanceOfAt"" -> ""1312_getValueAt"";
""1312_destroyTokens"" -> ""1312_totalSupply"";
""1312_fallback"" -> ""1312_isContract"";
""1312_generateTokens"" -> ""1312_onlyController"";
""1312_approveAndCall"" -> ""1312_approve"";
""1312_totalSupply"" -> ""1312_totalSupplyAt"";
""1312_generateTokens"" -> ""1312_balanceOf"";
""1312_enableTransfers"" -> ""1312_onlyController"";
""1312_totalSupplyAt"" -> ""1312_getValueAt"";
""1312_doTransfer"" -> ""1312_updateValueAtNow"";
""1312_destroyTokens"" -> ""1312_updateValueAtNow"";
""1312_doTransfer"" -> ""1312_balanceOfAt"";
""1312_approve"" -> ""1312_isContract"";
""1312_doTransfer"" -> ""1312_isContract"";
""1312_destroyTokens"" -> ""1312_balanceOf"";
""1312_generateTokens"" -> ""1312_totalSupply"";
""1312_balanceOfAt"" -> ""1312_min"";
""1312_transferFrom"" -> ""1312_doTransfer"";
""1312_generateTokens"" -> ""1312_updateValueAtNow"";
""1312_transfer"" -> ""1312_doTransfer"";
""1312_claimTokens"" -> ""1312_onlyController"";
""1312_totalSupplyAt"" -> ""1312_min"";
""1312_destroyTokens"" -> ""1312_onlyController"";
}
"
0xf4b3802619e5946a1ccff4a29aff079274bfcdbe.sol,StandardToken,"contract StandardToken is ERC20, BasicToken { mapping (address => mapping (address => uint256)) internal allowed; function transferFrom(address _from, address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); Transfer(_from, _to, _value); return true; }",0,"subgraph cluster_607_StandardToken {
label=""StandardToken"";
""607_increaseApproval"" [label=""increaseApproval""];
""607_transferFrom"" [label=""transferFrom""];
""607_approve"" [label=""approve""];
""607_allowance"" [label=""allowance""];
""607_decreaseApproval"" [label=""decreaseApproval""];
}
"
0x0689418b68122149a737a7cc7a49b2ad7c3049cc.sol,Academy,contract Academy { struct Deposit { uint depSum; uint depDate; uint depPayDate; },0,"subgraph cluster_195_Academy {
label=""Academy"";
""195_pay"" [label=""pay""];
""195_take"" [label=""take""];
""195_fallback"" [label=""fallback""];
""195_constructor"" [label=""constructor""];
""195_fallback"" -> ""195_take"";
""195_fallback"" -> ""195_pay"";
}
"
0x29789c9abebc185f1876af10c38ee47ee0c6ed48.sol,Crafting,contract Crafting { Clans clans = Clans(0x0); Inventory constant inventory = Inventory(0xb545507080b0f63df02ff9bd9302c2bb2447b826); Material constant clothMaterial = Material(0x8a6014227138556a259e7b2bf1dce668f9bdfd06); Material constant woodMaterial = Material(0x6804bbb708b8af0851e2980c8a5e9abb42adb179); Material constant metalMaterial = Material(0xb334f68bf47c1f1c1556e7034954d389d7fbbf07); address owner; mapping(uint256 => Recipe) public recipeList; mapping(address => bool) operator; struct Recipe { uint256 id; uint256 itemId; uint256 clothRequired; uint256 woodRequired; uint256 metalRequired; },0,"subgraph cluster_239_Crafting {
label=""Crafting"";
""239_setClans"" [label=""setClans""];
""239_setOperator"" [label=""setOperator""];
""239_addRecipe"" [label=""addRecipe""];
""239_craftItem"" [label=""craftItem""];
""239_constructor"" [label=""constructor""];
}
"
0x6d6db51e3e4838369676508ce25db64f4ca7e5e4.sol,EtherX,contract EtherX { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1327_EtherX {
label=""EtherX"";
""1327_withdraw"" [label=""withdraw""];
""1327_setSymbol"" [label=""setSymbol""];
""1327_sellPrice"" [label=""sellPrice""];
""1327_setAdministrator"" [label=""setAdministrator""];
""1327_sqrt"" [label=""sqrt""];
""1327_dividendsOf"" [label=""dividendsOf""];
""1327_reinvest"" [label=""reinvest""];
""1327_fallback"" [label=""fallback""];
""1327_totalSupply"" [label=""totalSupply""];
""1327_myTokens"" [label=""myTokens""];
""1327_EtherX"" [label=""EtherX""];
""1327_transfer"" [label=""transfer""];
""1327_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1327_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1327_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1327_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1327_buyPrice"" [label=""buyPrice""];
""1327_myDividends"" [label=""myDividends""];
""1327_setStakingRequirement"" [label=""setStakingRequirement""];
""1327_sell"" [label=""sell""];
""1327_balanceOf"" [label=""balanceOf""];
""1327_buy"" [label=""buy""];
""1327_disableInitialStage"" [label=""disableInitialStage""];
""1327_setName"" [label=""setName""];
""1327_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1327_exit"" [label=""exit""];
""1327_purchaseTokens"" [label=""purchaseTokens""];
""1327_withdraw"" -> ""1327_onlyStronghands"";
""1327_sellPrice"" -> ""1327_tokensToEthereum_"";
""1327_setSymbol"" -> ""1327_onlyAdministrator"";
""1327_exit"" -> ""1327_sell"";
""1327_purchaseTokens"" -> ""1327_ethereumToTokens_"";
""1327_buy"" -> ""1327_purchaseTokens"";
""1327_purchaseTokens"" -> ""1327_antiEarlyWhale"";
""1327_transfer"" -> ""1327_onlyBagholders"";
""1327_setName"" -> ""1327_onlyAdministrator"";
""1327_reinvest"" -> ""1327_purchaseTokens"";
""1327_reinvest"" -> ""1327_onlyStronghands"";
""1327_sell"" -> ""1327_tokensToEthereum_"";
""1327_calculateEthereumReceived"" -> ""1327_tokensToEthereum_"";
""1327_transfer"" -> ""1327_tokensToEthereum_"";
""1327_setAdministrator"" -> ""1327_onlyAdministrator"";
""1327_calculateTokensReceived"" -> ""1327_ethereumToTokens_"";
""1327_sell"" -> ""1327_onlyBagholders"";
""1327_myDividends"" -> ""1327_dividendsOf"";
""1327_withdraw"" -> ""1327_myDividends"";
""1327_transfer"" -> ""1327_myDividends"";
""1327_buyPrice"" -> ""1327_tokensToEthereum_"";
""1327_disableInitialStage"" -> ""1327_onlyAdministrator"";
""1327_reinvest"" -> ""1327_myDividends"";
""1327_ethereumToTokens_"" -> ""1327_sqrt"";
""1327_setStakingRequirement"" -> ""1327_onlyAdministrator"";
""1327_transfer"" -> ""1327_withdraw"";
""1327_myTokens"" -> ""1327_balanceOf"";
""1327_exit"" -> ""1327_withdraw"";
""1327_fallback"" -> ""1327_purchaseTokens"";
}
"
0x6b31a2ef5986d283332e4a3a608adb3c09ffdd13.sol,ERC721,"contract ERC721 is ERC165, IERC721 { using SafeMath for uint256; using Address for address; bytes4 private constant _ERC721_RECEIVED = 0x150b7a02; mapping (uint256 => address) private _tokenOwner; mapping (uint256 => address) private _tokenApprovals; mapping (address => uint256) private _ownedTokensCount; mapping (address => mapping (address => bool)) private _operatorApprovals; bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd; constructor () public { _registerInterface(_InterfaceId_ERC721); }",0,"subgraph cluster_1665_ERC721 {
label=""ERC721"";
""1665__exists"" [label=""_exists""];
""1665__checkOnERC721Received"" [label=""_checkOnERC721Received""];
""1665__mint"" [label=""_mint""];
""1665_getApproved"" [label=""getApproved""];
""1665__clearApproval"" [label=""_clearApproval""];
""1665__removeTokenFrom"" [label=""_removeTokenFrom""];
""1665_balanceOf"" [label=""balanceOf""];
""1665_approve"" [label=""approve""];
""1665_ownerOf"" [label=""ownerOf""];
""1665__addTokenTo"" [label=""_addTokenTo""];
""1665_transferFrom"" [label=""transferFrom""];
""1665__isApprovedOrOwner"" [label=""_isApprovedOrOwner""];
""1665_setApprovalForAll"" [label=""setApprovalForAll""];
""1665_constructor"" [label=""constructor""];
""1665__burn"" [label=""_burn""];
""1665_isApprovedForAll"" [label=""isApprovedForAll""];
""1665_safeTransferFrom"" [label=""safeTransferFrom""];
""1665__burn"" -> ""1665__removeTokenFrom"";
""1665_getApproved"" -> ""1665__exists"";
""1665_safeTransferFrom"" -> ""1665__checkOnERC721Received"";
""1665_constructor"" -> ""1665__registerInterface"";
""1665__clearApproval"" -> ""1665_ownerOf"";
""1665__isApprovedOrOwner"" -> ""1665_ownerOf"";
""1665__isApprovedOrOwner"" -> ""1665_isApprovedForAll"";
""1665_approve"" -> ""1665_isApprovedForAll"";
""1665_safeTransferFrom"" -> ""1665_safeTransferFrom"";
""1665_transferFrom"" -> ""1665__clearApproval"";
""1665__burn"" -> ""1665__clearApproval"";
""1665_transferFrom"" -> ""1665__removeTokenFrom"";
""1665__mint"" -> ""1665__addTokenTo"";
""1665_transferFrom"" -> ""1665__addTokenTo"";
""1665_transferFrom"" -> ""1665__isApprovedOrOwner"";
""1665__removeTokenFrom"" -> ""1665_ownerOf"";
""1665_safeTransferFrom"" -> ""1665_transferFrom"";
""1665_approve"" -> ""1665_ownerOf"";
""1665__isApprovedOrOwner"" -> ""1665_getApproved"";
}
"
0x27d16a670bec2e2db9e0ca367aaee6758d2cb3c7.sol,QCSSToken,"contract QCSSToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_380_QCSSToken {
label=""QCSSToken"";
""380_approveAndCall"" [label=""approveAndCall""];
""380_transfer"" [label=""transfer""];
""380_burn"" [label=""burn""];
""380_approve"" [label=""approve""];
""380__transfer"" [label=""_transfer""];
""380_burnFrom"" [label=""burnFrom""];
""380_transferFrom"" [label=""transferFrom""];
""380_constructor"" [label=""constructor""];
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0x286a090b31462890cd9bf9f167b610ed8aa8bd1a.sol,AutomatedExchange,contract AutomatedExchange is ApproveAndCallFallBack{ uint256 PSN=100000000000000; uint256 PSNH=50000000000000; address tokenAddress=0x841D34aF2018D9487199678eDd47Dd46B140690B; ERC20Interface tokenContract=ERC20Interface(tokenAddress); function AutomatedExchange() public{ },0,"subgraph cluster_300_AutomatedExchange {
label=""AutomatedExchange"";
""300_min"" [label=""min""];
""300_AutomatedExchange"" [label=""AutomatedExchange""];
""300_calculateTrade"" [label=""calculateTrade""];
""300_receiveApproval"" [label=""receiveApproval""];
""300_getBalance"" [label=""getBalance""];
""300_calculateTokenBuy"" [label=""calculateTokenBuy""];
""300_buyTokens"" [label=""buyTokens""];
""300_calculateTokenBuySimple"" [label=""calculateTokenBuySimple""];
""300_calculateTokenSell"" [label=""calculateTokenSell""];
""300_getTokenBalance"" [label=""getTokenBalance""];
""300_fallback"" [label=""fallback""];
""300_receiveApproval"" -> ""300_calculateTokenSell"";
""300_calculateTokenBuySimple"" -> ""300_calculateTokenBuy"";
""300_calculateTokenSell"" -> ""300_calculateTrade"";
""300_buyTokens"" -> ""300_calculateTokenBuy"";
""300_calculateTokenBuy"" -> ""300_calculateTrade"";
}
"
0xedac0e5bedf702accc3a9b2b4b44b4ba0806e882.sol,DSMath,"contract DSMath { function add(uint256 x, uint256 y) constant internal returns (uint256 z) { assert((z = x + y) >= x); }",0,"subgraph cluster_807_DSMath {
label=""DSMath"";
""807_cast"" [label=""cast""];
""807_wdiv"" [label=""wdiv""];
""807_hmin"" [label=""hmin""];
""807_wmax"" [label=""wmax""];
""807_hmax"" [label=""hmax""];
""807_rsub"" [label=""rsub""];
""807_hmul"" [label=""hmul""];
""807_div"" [label=""div""];
""807_wadd"" [label=""wadd""];
""807_rmax"" [label=""rmax""];
""807_hadd"" [label=""hadd""];
""807_rpow"" [label=""rpow""];
""807_min"" [label=""min""];
""807_imax"" [label=""imax""];
""807_add"" [label=""add""];
""807_wmin"" [label=""wmin""];
""807_mul"" [label=""mul""];
""807_hdiv"" [label=""hdiv""];
""807_rmin"" [label=""rmin""];
""807_hsub"" [label=""hsub""];
""807_max"" [label=""max""];
""807_wmul"" [label=""wmul""];
""807_radd"" [label=""radd""];
""807_wsub"" [label=""wsub""];
""807_rmul"" [label=""rmul""];
""807_imin"" [label=""imin""];
""807_rdiv"" [label=""rdiv""];
""807_sub"" [label=""sub""];
""807_wmul"" -> ""807_cast"";
""807_wmax"" -> ""807_hmax"";
""807_rpow"" -> ""807_rmul"";
""807_wadd"" -> ""807_hadd"";
""807_rsub"" -> ""807_hsub"";
""807_wsub"" -> ""807_hsub"";
""807_wdiv"" -> ""807_cast"";
""807_rmin"" -> ""807_hmin"";
""807_rmul"" -> ""807_cast"";
""807_hadd"" -> ""807_assert"";
""807_rmax"" -> ""807_hmax"";
""807_wmin"" -> ""807_hmin"";
""807_radd"" -> ""807_hadd"";
""807_rdiv"" -> ""807_cast"";
}
"
0x308cd1ebece7d99a360698ef47dd30269c7e2623.sol,AceWins,"contract AceWins is Ownable { uint256 public totalSupply; mapping(address => uint256) startBalances; mapping(address => mapping(address => uint256)) allowed; mapping(address => uint256) startBlocks; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 10; uint256 public calc = 951839; function AceWins() public { totalSupply = 12500000 * 10**uint256(decimals); startBalances[owner] = totalSupply; startBlocks[owner] = block.number; Transfer(address(0), owner, totalSupply); }",0,"subgraph cluster_374_AceWins {
label=""AceWins"";
""374_fracExp"" [label=""fracExp""];
""374_allowance"" [label=""allowance""];
""374_compoundInterest"" [label=""compoundInterest""];
""374_transfer"" [label=""transfer""];
""374_AceWins"" [label=""AceWins""];
""374_setCalc"" [label=""setCalc""];
""374_balanceOf"" [label=""balanceOf""];
""374_updateBalance"" [label=""updateBalance""];
""374_transfer"" -> ""374_updateBalance"";
""374_balanceOf"" -> ""374_compoundInterest"";
""374_compoundInterest"" -> ""374_fracExp"";
""374_updateBalance"" -> ""374_compoundInterest"";
}
"
0x26ce1a8d663de65b40e00ac8cd8664905846586f.sol,TechnoBit,"contract TechnoBit is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 1000000000e8; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 20000000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_TechnoBit {
label=""TechnoBit"";
""944_approve"" [label=""approve""];
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_withdraw"" [label=""withdraw""];
""944_getTokens"" [label=""getTokens""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_distr"" [label=""distr""];
""944_transfer"" [label=""transfer""];
""944_allowance"" [label=""allowance""];
""944_finishDistribution"" [label=""finishDistribution""];
""944_balanceOf"" [label=""balanceOf""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_transferFrom"" [label=""transferFrom""];
""944_TechnoBit"" [label=""TechnoBit""];
""944_burn"" [label=""burn""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_fallback"" [label=""fallback""];
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_getTokens"" -> ""944_distr"";
""944_TechnoBit"" -> ""944_distr"";
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_fallback"" -> ""944_getTokens"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_transferOwnership"" -> ""944_onlyOwner"";
""944_distr"" -> ""944_canDistr"";
""944_burn"" -> ""944_onlyOwner"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_finishDistribution"" -> ""944_onlyOwner"";
""944_getTokens"" -> ""944_canDistr"";
}
"
0xee610919f8c9f2e29464ceceb3176ae1f1922ec4.sol,SingleSourceIdentity,"contract SingleSourceIdentity is SafeMath { event IdentityApproval(address indexed authority, address indexed walletAddress, uint verifiedAttributes); event IdentityRevoke(address indexed authority, address indexed walletAddress); struct KYC { bool verified; address verifiedBy; uint verifiedAt; uint verifiedAttributes; }",0,"subgraph cluster_741_SingleSourceIdentity {
label=""SingleSourceIdentity"";
""741_approve"" [label=""approve""];
""741_withdrawFee"" [label=""withdrawFee""];
""741_SingleSourceIdentity"" [label=""SingleSourceIdentity""];
""741_hasVerifiedAttributeValue"" [label=""hasVerifiedAttributeValue""];
""741_setPaymentContractAddress"" [label=""setPaymentContractAddress""];
""741_setAuthorityContractAddress"" [label=""setAuthorityContractAddress""];
""741_hasValidProfile"" [label=""hasValidProfile""];
""741_setFee"" [label=""setFee""];
""741_changeOwner"" [label=""changeOwner""];
""741_claim"" [label=""claim""];
""741_chargeVerificationFee"" [label=""chargeVerificationFee""];
""741_revoke"" [label=""revoke""];
""741_hasVerifiedAttributeIndex"" [label=""hasVerifiedAttributeIndex""];
""741_isValidAuthority"" [label=""isValidAuthority""];
""741_verifiedAttributes"" [label=""verifiedAttributes""];
""741_claim"" -> ""741_chargeVerificationFee"";
""741_revoke"" -> ""741_onlyAuthoritativeAuthority"";
""741_claim"" -> ""741_onlyAuthoritativeAuthority"";
""741_setAuthorityContractAddress"" -> ""741_onlyOwner"";
""741_claim"" -> ""741_onlyValidAuthority"";
""741_approve"" -> ""741_onlyValidAuthority"";
""741_approve"" -> ""741_onlyAuthoritativeAuthority"";
""741_revoke"" -> ""741_onlyValidAuthority"";
""741_withdrawFee"" -> ""741_onlyValidAuthority"";
""741_chargeVerificationFee"" -> ""741_safeAdd"";
""741_setPaymentContractAddress"" -> ""741_onlyOwner"";
""741_setFee"" -> ""741_onlyOwner"";
""741_changeOwner"" -> ""741_onlyOwner"";
}
"
0x2021526a4a62a70f52c0340b0f67740a08b94e01.sol,Bcxss,"contract Bcxss { address public owner; string public name; string public symbol; uint public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); bool lock = false; constructor( uint256 initialSupply, string tokenName, string tokenSymbol, uint decimalUnits ) public { owner = msg.sender; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_498_Bcxss {
label=""Bcxss"";
""498_approve"" [label=""approve""];
""498_transferFrom"" [label=""transferFrom""];
""498_burn"" [label=""burn""];
""498_constructor"" [label=""constructor""];
""498_transfer"" [label=""transfer""];
""498_mintToken"" [label=""mintToken""];
""498_transferOwnership"" [label=""transferOwnership""];
""498_burnFrom"" [label=""burnFrom""];
""498__transfer"" [label=""_transfer""];
""498_setLock"" [label=""setLock""];
""498_transferBatch"" [label=""transferBatch""];
""498_freezeAccount"" [label=""freezeAccount""];
""498_burn"" -> ""498_onlyOwner"";
""498_transfer"" -> ""498__transfer"";
""498_burnFrom"" -> ""498_onlyOwner"";
""498_setLock"" -> ""498_onlyOwner"";
""498_mintToken"" -> ""498_onlyOwner"";
""498_transferFrom"" -> ""498__transfer"";
""498_freezeAccount"" -> ""498_onlyOwner"";
""498_transferBatch"" -> ""498__transfer"";
""498_transferOwnership"" -> ""498_onlyOwner"";
""498__transfer"" -> ""498_isLock"";
}
"
0x8754770d7dd5e51794bd575d247e158881696c7c.sol,Token,contract Token is MintableToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 6; function Token() public { mintLimit = 100000000 * (10 ** 6); },0,"subgraph cluster_710_MintableToken {
label=""MintableToken"";
""710_mint"" [label=""mint""];
""710_setSaleAgent"" [label=""setSaleAgent""];
""710_finishMinting"" [label=""finishMinting""];
""710_finishMinting"" -> ""710_onlyOwner"";
""710_setSaleAgent"" -> ""710_onlyOwner"";
""710_mint"" -> ""710_onlySaleAgent"";
""710_finishMinting"" -> ""710_canMint"";
""710_mint"" -> ""710_canMint"";
}
"
0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol,HZ,"contract HZ is SafeMath{ string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Freeze(address indexed from, uint256 value); event Unfreeze(address indexed from, uint256 value); function HZ() { balanceOf[msg.sender] = 50000000000; totalSupply = 50000000000; name = ; symbol = ; decimals = 4; owner = msg.sender; }",0,"subgraph cluster_595_HZ {
label=""HZ"";
""595_HZ"" [label=""HZ""];
""595_withdrawEther"" [label=""withdrawEther""];
""595_approve"" [label=""approve""];
""595_transfer"" [label=""transfer""];
""595_burn"" [label=""burn""];
""595_fallback"" [label=""fallback""];
""595_freeze"" [label=""freeze""];
""595_transferFrom"" [label=""transferFrom""];
""595_unfreeze"" [label=""unfreeze""];
""595_freeze"" -> ""595_safeSub"";
""595_unfreeze"" -> ""595_safeSub"";
""595_transferFrom"" -> ""595_safeSub"";
""595_transferFrom"" -> ""595_safeAdd"";
""595_unfreeze"" -> ""595_safeAdd"";
""595_burn"" -> ""595_safeSub"";
""595_transfer"" -> ""595_safeAdd"";
""595_freeze"" -> ""595_safeAdd"";
""595_transfer"" -> ""595_safeSub"";
}
"
0xed61627b7af399ea7a11f55a03c557cd745c35ba.sol,BTCCToken,"contract BTCCToken is Ownable,StandardToken { uint public totalSupply = 3*10**27; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; function BTCCToken() { balances[msg.sender] = totalSupply; Transfer(address(0), msg.sender, totalSupply); }",0,"subgraph cluster_504_BTCCToken {
label=""BTCCToken"";
""504_getStopTransfer"" [label=""getStopTransfer""];
""504_BTCCToken"" [label=""BTCCToken""];
""504_setStopTransfer"" [label=""setStopTransfer""];
""504_transfer"" [label=""transfer""];
""504_setStopTransfer"" -> ""504_onlyOwner"";
""504_transfer"" -> ""504_transfer"";
}
"
0x3798b1c6e7bad3f0720c0e9ddcdb018857e13a4c.sol,RareCards,"contract RareCards is AccessAdmin, ERC721 { using SafeMath for SafeMath; event eCreateRare(uint256 tokenId, uint256 price, address owner); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved); struct RareCard { uint256 rareId; uint256 rareClass; uint256 cardId; uint256 rareValue; }",0,"subgraph cluster_1405_RareCards {
label=""RareCards"";
""1405_setRarePrice"" [label=""setRarePrice""];
""1405_isApprovedForAll"" [label=""isApprovedForAll""];
""1405_approve"" [label=""approve""];
""1405_getApproved"" [label=""getApproved""];
""1405__transfer"" [label=""_transfer""];
""1405_tokensOfOwner"" [label=""tokensOfOwner""];
""1405_RareCards"" [label=""RareCards""];
""1405_ownerOf"" [label=""ownerOf""];
""1405_totalSupply"" [label=""totalSupply""];
""1405_safeTransferFrom"" [label=""safeTransferFrom""];
""1405_tokenOfOwnerByIndex"" [label=""tokenOfOwnerByIndex""];
""1405_getRarePLATInfo"" [label=""getRarePLATInfo""];
""1405_getRareInfo"" [label=""getRareInfo""];
""1405_transferToken"" [label=""transferToken""];
""1405_getRareItemsOwner"" [label=""getRareItemsOwner""];
""1405_transferFrom"" [label=""transferFrom""];
""1405_createRareCard"" [label=""createRareCard""];
""1405_tokenByIndex"" [label=""tokenByIndex""];
""1405_getRareItemsPrice"" [label=""getRareItemsPrice""];
""1405__createRareCard"" [label=""_createRareCard""];
""1405_balanceOf"" [label=""balanceOf""];
""1405_getRareItemsPLATPrice"" [label=""getRareItemsPLATPrice""];
""1405_transferTokenByContract"" [label=""transferTokenByContract""];
""1405__safeTransferFrom"" [label=""_safeTransferFrom""];
""1405_rareStartPrice"" [label=""rareStartPrice""];
""1405_getRareItemInfo"" [label=""getRareItemInfo""];
""1405_setApprovalForAll"" [label=""setApprovalForAll""];
""1405_setRarePrice"" -> ""1405_onlyAccess"";
""1405_approve"" -> ""1405_isValidToken"";
""1405_transferFrom"" -> ""1405__transfer"";
""1405_transferToken"" -> ""1405_onlyAccess"";
""1405_transferTokenByContract"" -> ""1405__transfer"";
""1405_createRareCard"" -> ""1405__createRareCard"";
""1405__safeTransferFrom"" -> ""1405_isValidToken"";
""1405__safeTransferFrom"" -> ""1405__transfer"";
""1405_approve"" -> ""1405_onlyOwnerOf"";
""1405__createRareCard"" -> ""1405__transfer"";
""1405_transferFrom"" -> ""1405_isValidToken"";
""1405_safeTransferFrom"" -> ""1405__safeTransferFrom"";
""1405__safeTransferFrom"" -> ""1405_onlyOwnerOf"";
""1405_transferFrom"" -> ""1405_onlyOwnerOf"";
""1405_getApproved"" -> ""1405_isValidToken"";
""1405_transferTokenByContract"" -> ""1405_onlyAccess"";
""1405_RareCards"" -> ""1405_setAdminContract"";
""1405_createRareCard"" -> ""1405_onlyOwner"";
""1405_RareCards"" -> ""1405_setActionContract"";
""1405_transferToken"" -> ""1405__transfer"";
}
"
0x03a897c8d7d21688ae0a49ea087836b2667c2cc8.sol,StrayCrowdsale,"contract StrayCrowdsale is FinalizableCrowdsale { using SafeMath for uint256; uint256 public softCapInToken; uint256 public hardCapInToken; uint256 public soldToken = 0; uint256 public bonusClosingTime0; uint256 public bonusClosingTime1; uint256 public bonusRateInPercent0 = 33; uint256 public bonusRateInPercent1 = 20; uint256 public mininumContributeUSD = 100; uint256 public decimalsETHToUSD; uint256 public exchangeRateETHToUSD; uint256 public mininumPurchaseTokenQuantity; uint256 public mininumContributeWei; uint256 public exchangeRateUSDToToken = 100; StrayToken public strayToken; RefundVault public vault; event RateUpdated(uint256 rate, uint256 mininumContributeWei); constructor(uint256 _softCapInUSD , uint256 _hardCapInUSD , address _fund , ERC20 _token , uint256 _openingTime , uint256 _closingTime , uint256 _bonusClosingTime0 , uint256 _bonusClosingTime1 ) Crowdsale(1, _fund, _token) TimedCrowdsale(_openingTime, _closingTime) public { require(_bonusClosingTime0 >= _openingTime); require(_bonusClosingTime1 >= _bonusClosingTime0); require(_closingTime >= _bonusClosingTime1); bonusClosingTime0 = _bonusClosingTime0; bonusClosingTime1 = _bonusClosingTime1; strayToken = StrayToken(token); require(_softCapInUSD > 0 && _softCapInUSD <= _hardCapInUSD); softCapInToken = _softCapInUSD * exchangeRateUSDToToken * (10 ** uint256(strayToken.decimals())); hardCapInToken = _hardCapInUSD * exchangeRateUSDToToken * (10 ** uint256(strayToken.decimals())); require(strayToken.balanceOf(owner) >= hardCapInToken); vault = new RefundVault(_fund); mininumPurchaseTokenQuantity = exchangeRateUSDToToken * mininumContributeUSD * (10 ** (uint256(strayToken.decimals()))); setExchangeRateETHToUSD(40000, 2); }",0,"subgraph cluster_1965_StrayCrowdsale {
label=""StrayCrowdsale"";
""1965_isInStage1"" [label=""isInStage1""];
""1965__addBonus"" [label=""_addBonus""];
""1965_isInStage2"" [label=""isInStage2""];
""1965_claimRefund"" [label=""claimRefund""];
""1965__processPurchase"" [label=""_processPurchase""];
""1965_softCapReached"" [label=""softCapReached""];
""1965_constructor"" [label=""constructor""];
""1965_finalization"" [label=""finalization""];
""1965__preValidatePurchase"" [label=""_preValidatePurchase""];
""1965_setExchangeRateETHToUSD"" [label=""setExchangeRateETHToUSD""];
""1965_hasStarted"" [label=""hasStarted""];
""1965__forwardFunds"" [label=""_forwardFunds""];
""1965__processPurchase"" -> ""1965__addBonus"";
""1965_constructor"" -> ""1965_constructor"";
""1965__preValidatePurchase"" -> ""1965__preValidatePurchase"";
""1965_constructor"" -> ""1965_setExchangeRateETHToUSD"";
""1965_finalization"" -> ""1965_softCapReached"";
""1965__processPurchase"" -> ""1965__processPurchase"";
""1965_claimRefund"" -> ""1965_softCapReached"";
""1965_setExchangeRateETHToUSD"" -> ""1965_onlyOwner"";
""1965_finalization"" -> ""1965_finalization"";
}
"
0x47bef29a73f5af37ed666f9bda9aae1c554fc163.sol,BurnableToken,"contract BurnableToken is BasicToken, Ownable { string internal constant INVALID_TOKEN_VALUES = ; string internal constant NOT_ENOUGH_TOKENS = ; event Burn(address indexed burner, uint256 amount); event Mint(address indexed minter, uint256 amount); event AddressBurn(address burner, uint256 amount); function burn(uint256 _value) onlyOwner public { balances[msg.sender] = balances[msg.sender].sub(_value); _totalSupply = _totalSupply.sub(_value); emit Burn(msg.sender, _value); emit Transfer(msg.sender, address(0), _value); }",0,"subgraph cluster_770_BurnableToken {
label=""BurnableToken"";
""770_mint"" [label=""mint""];
""770_addressburn"" [label=""addressburn""];
""770_burn"" [label=""burn""];
""770_addressburn"" -> ""770_onlyOwner"";
""770_mint"" -> ""770_onlyOwner"";
""770_burn"" -> ""770_onlyOwner"";
}
"
0xed0f41abc9fdb3052ebd5391c80e1ee792ec4f42.sol,I_Pricer,contract I_Pricer { uint128 public lastPrice; I_minter public mint; string public sURL; mapping (bytes32 => uint) RevTransaction; function setMinter(address _newAddress) {},0,"subgraph cluster_556_I_Pricer {
label=""I_Pricer"";
""556_fallback"" [label=""fallback""];
""556_requestPrice"" [label=""requestPrice""];
""556___callback"" [label=""__callback""];
""556_setMinter"" [label=""setMinter""];
""556_collectFee"" [label=""collectFee""];
""556_QuickPrice"" [label=""QuickPrice""];
""556_queryCost"" [label=""queryCost""];
}
"
0xb4b55084f5910d80aee29b3923ee64773571b9f7.sol,MainContract,contract MainContract { address owner; address advertisingAddress; uint private constant minInvest = 5 finney; using Calc for uint; using PercentCalc for PercentCalc.percent; using Zero for *; using compileLibrary for *; struct User { uint idx; uint value; uint bonus; bool invested10Eth; uint payTime; },0,"subgraph cluster_643_MainContract {
label=""MainContract"";
""643_sendDividends"" [label=""sendDividends""];
""643_sendValueToAdv"" [label=""sendValueToAdv""];
""643_setUserBonus"" [label=""setUserBonus""];
""643_updatePayTime"" [label=""updatePayTime""];
""643_fallback"" [label=""fallback""];
""643_setAdvertisingAddress"" [label=""setAdvertisingAddress""];
""643_fetchDividends"" [label=""fetchDividends""];
""643_sendDividendsWithBonus"" [label=""sendDividendsWithBonus""];
""643_sendValueToOwner"" [label=""sendValueToOwner""];
""643_findInvestorByAddress"" [label=""findInvestorByAddress""];
""643_constructor"" [label=""constructor""];
""643_fallback"" -> ""643_fetchDividends"";
""643_sendDividendsWithBonus"" -> ""643_updatePayTime"";
""643_fetchDividends"" -> ""643_sendDividendsWithBonus"";
""643_fetchDividends"" -> ""643_sendDividends"";
""643_setAdvertisingAddress"" -> ""643_onlyOwner"";
""643_fallback"" -> ""643_setUserBonus"";
""643_sendDividends"" -> ""643_updatePayTime"";
""643_fallback"" -> ""643_sendValueToOwner"";
""643_setUserBonus"" -> ""643_sendValueToAdv"";
""643_fetchDividends"" -> ""643_findInvestorByAddress"";
""643_fallback"" -> ""643_sendValueToAdv"";
}
"
0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol,Ethernational,"contract Ethernational is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonus1Ends; uint public bonus2Ends; uint public bonus3Ends; uint public endDate; uint public ETHinvested; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Ethernational() public { symbol = ; name = ; decimals = 18; bonus1Ends = now + 1 weeks; bonus2Ends = now + 2 weeks; bonus3Ends = now + 4 weeks; endDate = now + 8 weeks; }",0,"subgraph cluster_909_Ethernational {
label=""Ethernational"";
""909_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""909_ICOTimer"" [label=""ICOTimer""];
""909_Ethernational"" [label=""Ethernational""];
""909_transferFrom"" [label=""transferFrom""];
""909_allowance"" [label=""allowance""];
""909_buyEIT"" [label=""buyEIT""];
""909_invested"" [label=""invested""];
""909_fallback"" [label=""fallback""];
""909_endDate"" [label=""endDate""];
""909_transfer"" [label=""transfer""];
""909_approve"" [label=""approve""];
""909_balanceOf"" [label=""balanceOf""];
""909_totalSupply"" [label=""totalSupply""];
""909_bonusInfo"" [label=""bonusInfo""];
""909_approveAndCall"" [label=""approveAndCall""];
""909_transfer"" -> ""909_safeSub"";
""909_fallback"" -> ""909_safeAdd"";
""909_transferAnyERC20Token"" -> ""909_onlyOwner"";
""909_buyEIT"" -> ""909_safeAdd"";
""909_transfer"" -> ""909_safeAdd"";
""909_transferFrom"" -> ""909_safeSub"";
""909_transferFrom"" -> ""909_safeAdd"";
}
"
0x05215fce25902366480696f38c3093e31dbce69a.sol,REV1,contract REV1 { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1447_REV1 {
label=""REV1"";
""1447_balanceOf"" [label=""balanceOf""];
""1447_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1447_totalSupply"" [label=""totalSupply""];
""1447_buyPrice"" [label=""buyPrice""];
""1447_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1447_setName"" [label=""setName""];
""1447_setSymbol"" [label=""setSymbol""];
""1447_excludeAmbassadors"" [label=""excludeAmbassadors""];
""1447_fallback"" [label=""fallback""];
""1447_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1447_sell"" [label=""sell""];
""1447_disableWhitelist"" [label=""disableWhitelist""];
""1447_myTokens"" [label=""myTokens""];
""1447_exit"" [label=""exit""];
""1447_setAdministrator"" [label=""setAdministrator""];
""1447_sqrt"" [label=""sqrt""];
""1447_buy"" [label=""buy""];
""1447_purchaseTokens"" [label=""purchaseTokens""];
""1447_reinvest"" [label=""reinvest""];
""1447_sellPrice"" [label=""sellPrice""];
""1447_withdraw"" [label=""withdraw""];
""1447_transfer"" [label=""transfer""];
""1447_constructor"" [label=""constructor""];
""1447_myDividends"" [label=""myDividends""];
""1447_setStakingRequirement"" [label=""setStakingRequirement""];
""1447_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1447_dividendsOf"" [label=""dividendsOf""];
""1447_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1447_exit"" -> ""1447_sell"";
""1447_sell"" -> ""1447_onlyBagholders"";
""1447_purchaseTokens"" -> ""1447_limitBuy"";
""1447_ethereumToTokens_"" -> ""1447_sqrt"";
""1447_calculateEthereumReceived"" -> ""1447_tokensToEthereum_"";
""1447_transfer"" -> ""1447_myDividends"";
""1447_sellPrice"" -> ""1447_tokensToEthereum_"";
""1447_buyPrice"" -> ""1447_tokensToEthereum_"";
""1447_buy"" -> ""1447_excludeAmbassadors"";
""1447_transfer"" -> ""1447_onlyBagholders"";
""1447_withdraw"" -> ""1447_onlyStronghands"";
""1447_setStakingRequirement"" -> ""1447_onlyAdministrator"";
""1447_excludeAmbassadors"" -> ""1447_purchaseTokens"";
""1447_setAdministrator"" -> ""1447_onlyAdministrator"";
""1447_myTokens"" -> ""1447_balanceOf"";
""1447_calculateTokensReceived"" -> ""1447_ethereumToTokens_"";
""1447_transfer"" -> ""1447_withdraw"";
""1447_setName"" -> ""1447_onlyAdministrator"";
""1447_fallback"" -> ""1447_excludeAmbassadors"";
""1447_withdraw"" -> ""1447_myDividends"";
""1447_purchaseTokens"" -> ""1447_ethereumToTokens_"";
""1447_reinvest"" -> ""1447_purchaseTokens"";
""1447_sell"" -> ""1447_tokensToEthereum_"";
""1447_myDividends"" -> ""1447_dividendsOf"";
""1447_setSymbol"" -> ""1447_onlyAdministrator"";
""1447_reinvest"" -> ""1447_onlyStronghands"";
""1447_exit"" -> ""1447_withdraw"";
""1447_reinvest"" -> ""1447_myDividends"";
}
"
0x0288c13f98d85c817191710be24e96ec75bd9914.sol,MultiTokenNetwork,"contract MultiTokenNetwork is Pausable { address[] private _multitokens; AbstractDeployer[] private _deployers; event NewMultitoken(address indexed mtkn); event NewDeployer(uint256 indexed index, address indexed oldDeployer, address indexed newDeployer); function multitokensCount() public view returns(uint256) { return _multitokens.length; }",0,"subgraph cluster_754_MultiTokenNetwork {
label=""MultiTokenNetwork"";
""754_deploy"" [label=""deploy""];
""754_multitokensCount"" [label=""multitokensCount""];
""754_multitokens"" [label=""multitokens""];
""754_enableBundlingMultitoken"" [label=""enableBundlingMultitoken""];
""754_disableBundlingMultitoken"" [label=""disableBundlingMultitoken""];
""754_disableChangesMultitoken"" [label=""disableChangesMultitoken""];
""754_setDeployer"" [label=""setDeployer""];
""754_deployers"" [label=""deployers""];
""754_deleteDeployer"" [label=""deleteDeployer""];
""754_allMultitokens"" [label=""allMultitokens""];
""754_deployersCount"" [label=""deployersCount""];
""754_makeCall"" [label=""makeCall""];
""754_allWalletBalances"" [label=""allWalletBalances""];
""754_addDeployer"" [label=""addDeployer""];
""754_deleteMultitoken"" [label=""deleteMultitoken""];
""754_setDeployer"" -> ""754_onlyOwner"";
""754_disableChangesMultitoken"" -> ""754_onlyOwner"";
""754_addDeployer"" -> ""754_onlyOwner"";
""754_deleteDeployer"" -> ""754_onlyOwner"";
""754_deploy"" -> ""754_whenNotPaused"";
""754_deleteMultitoken"" -> ""754_onlyOwner"";
""754_addDeployer"" -> ""754_whenNotPaused"";
""754_enableBundlingMultitoken"" -> ""754_onlyOwner"";
""754_setDeployer"" -> ""754_whenNotPaused"";
""754_makeCall"" -> ""754_onlyOwner"";
""754_disableBundlingMultitoken"" -> ""754_onlyOwner"";
}
"
0xe1291032766b81488dc565479503a103489f78d7.sol,x32323,"contract x32323 is owned{ mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => bool) initialized; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); function freezeAccount(address target, bool freeze) onlyOwner { frozenAccount[target] = freeze; FrozenFunds(target, freeze); }",0,"subgraph cluster_638_x32323 {
label=""x32323"";
""638_approve"" [label=""approve""];
""638_sell"" [label=""sell""];
""638_approveAndCall"" [label=""approveAndCall""];
""638_initialize"" [label=""initialize""];
""638_TokenERC20"" [label=""TokenERC20""];
""638__transfer"" [label=""_transfer""];
""638_buy"" [label=""buy""];
""638_freezeAccount"" [label=""freezeAccount""];
""638_transferFrom"" [label=""transferFrom""];
""638_reward"" [label=""reward""];
""638_transfer"" [label=""transfer""];
""638_setMinBalance"" [label=""setMinBalance""];
""638_setPrices"" [label=""setPrices""];
""638_setMinBalance"" -> ""638_onlyOwner"";
""638_approveAndCall"" -> ""638_approve"";
""638_transfer"" -> ""638__transfer"";
""638_transfer"" -> ""638_sell"";
""638__transfer"" -> ""638_reward"";
""638_setPrices"" -> ""638_onlyOwner"";
""638_transferFrom"" -> ""638__transfer"";
""638_freezeAccount"" -> ""638_onlyOwner"";
""638__transfer"" -> ""638_initialize"";
}
"
0x0dae5dc78cc470a5e2f7c7c6b63ae7298e65853f.sol,PlatinumToken,"contract PlatinumToken is Ownable, ERC20 { using SafeMath for uint256; string public version = ; string public name; string public symbol; uint256 public decimals; address public platinum; mapping (address => mapping (address => uint256)) allowed; mapping(address => uint256) balances; uint256 public totalSupply; uint256 public fee = 10; function PlatinumToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balances[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",0,"subgraph cluster_2966_PlatinumToken {
label=""PlatinumToken"";
""2966_balanceOf"" [label=""balanceOf""];
""2966_setFee"" [label=""setFee""];
""2966_allowance"" [label=""allowance""];
""2966_transfer"" [label=""transfer""];
""2966_produce"" [label=""produce""];
""2966_fee"" [label=""fee""];
""2966_PlatinumToken"" [label=""PlatinumToken""];
""2966_reduce"" [label=""reduce""];
""2966_approve"" [label=""approve""];
""2966_setPlatinumAddress"" [label=""setPlatinumAddress""];
""2966_owner"" [label=""owner""];
""2966_transferFrom"" [label=""transferFrom""];
""2966_transferFrom"" -> ""2966_isOwnerOrPlatinumContract"";
""2966_reduce"" -> ""2966_isPlatinumContract"";
""2966_setPlatinumAddress"" -> ""2966_onlyOwner"";
""2966_setFee"" -> ""2966_onlyOwner"";
""2966_transfer"" -> ""2966_onlyOwner"";
""2966_produce"" -> ""2966_isPlatinumContract"";
}
"
0x35d76c3db8e826907d2a977500b54b3914ecc020.sol,RefundableCrowdsale,contract RefundableCrowdsale is FinalizableCrowdsale { using SafeMath for uint256; uint256 public goal; RefundVault public vault; function RefundableCrowdsale(uint256 _goal) public { require(_goal > 0); vault = new RefundVault(wallet); goal = _goal; },0,"subgraph cluster_888_RefundableCrowdsale {
label=""RefundableCrowdsale"";
""888_goalReached"" [label=""goalReached""];
""888_claimRefund"" [label=""claimRefund""];
""888_finalization"" [label=""finalization""];
""888__forwardFunds"" [label=""_forwardFunds""];
""888_RefundableCrowdsale"" [label=""RefundableCrowdsale""];
""888_finalization"" -> ""888_finalization"";
""888_claimRefund"" -> ""888_goalReached"";
""888_finalization"" -> ""888_goalReached"";
}
"
0xedf19b437d1a67e18b15dd4a859dd52f9cfa012f.sol,CommunityLock,"contract CommunityLock is ERC777TokensRecipient, ERC820Implementer, TokenRecoverable { ERC777Token public token; constructor(address _token) public { setInterfaceImplementation(, this); address tokenAddress = interfaceAddr(_token, ); require(tokenAddress != address(0)); token = ERC777Token(tokenAddress); }",0,"subgraph cluster_691_CommunityLock {
label=""CommunityLock"";
""691_tokensReceived"" [label=""tokensReceived""];
""691_burn"" [label=""burn""];
""691_constructor"" [label=""constructor""];
""691_burn"" -> ""691_onlyOwner"";
""691_constructor"" -> ""691_setInterfaceImplementation"";
""691_constructor"" -> ""691_interfaceAddr"";
}
"
0x00571808479ced690a6948992e32b1f3e69df557.sol,SafeMath,"contract SafeMath { function safeMul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; }",0,"subgraph cluster_97_SafeMath {
label=""SafeMath"";
""97_safeSub"" [label=""safeSub""];
""97_safeDiv"" [label=""safeDiv""];
""97_safeMul"" [label=""safeMul""];
""97_safeAdd"" [label=""safeAdd""];
}
"
0x77fa1d1ded3f4bed737e9ae870a6f3605445df9c.sol,CryptoPokemon,contract CryptoPokemon { using SafeMath for uint256; mapping (address => bool) private admins; mapping (uint => uint256) public levels; mapping (uint => bool) private lock; address contractCreator; address devFeeAddress; address tournamentPrizeAddress; function CryptoPokemon () public { contractCreator = msg.sender; devFeeAddress = 0xFb2D26b0caa4C331bd0e101460ec9dbE0A4783A4; tournamentPrizeAddress = 0xC6784e712229087fC91E0c77fcCb6b2F1fDE2Dc2; admins[contractCreator] = true; },0,"subgraph cluster_675_CryptoPokemon {
label=""CryptoPokemon"";
""675_removeLock"" [label=""removeLock""];
""675_getPokemonCurrentPrice"" [label=""getPokemonCurrentPrice""];
""675_deletePokemon"" [label=""deletePokemon""];
""675_GetGamestatus"" [label=""GetGamestatus""];
""675_getPokemonLevel"" [label=""getPokemonLevel""];
""675_getPokemonDetails"" [label=""getPokemonDetails""];
""675_settournamentPrizeAddress"" [label=""settournamentPrizeAddress""];
""675_addPokemon"" [label=""addPokemon""];
""675_removeAdmin"" [label=""removeAdmin""];
""675_pauseGame"" [label=""pauseGame""];
""675_getPokemonOwner"" [label=""getPokemonOwner""];
""675_totalSupply"" [label=""totalSupply""];
""675_unPauseGame"" [label=""unPauseGame""];
""675_addAdmin"" [label=""addAdmin""];
""675_purchasePokemon"" [label=""purchasePokemon""];
""675_setOwner"" [label=""setOwner""];
""675_setdevFeeAddress"" [label=""setdevFeeAddress""];
""675_CryptoPokemon"" [label=""CryptoPokemon""];
""675_setPokemon"" [label=""setPokemon""];
""675_addLock"" [label=""addLock""];
""675_getPokemonLock"" [label=""getPokemonLock""];
""675_addAdmin"" -> ""675_onlyContractCreator"";
""675_settournamentPrizeAddress"" -> ""675_onlyContractCreator"";
""675_removeAdmin"" -> ""675_onlyContractCreator"";
""675_addPokemon"" -> ""675_onlyAdmins"";
""675_setdevFeeAddress"" -> ""675_onlyContractCreator"";
""675_deletePokemon"" -> ""675_onlyContractCreator"";
""675_unPauseGame"" -> ""675_onlyContractCreator"";
""675_setOwner"" -> ""675_onlyContractCreator"";
""675_pauseGame"" -> ""675_onlyContractCreator"";
""675_removeLock"" -> ""675_onlyContractCreator"";
""675_setPokemon"" -> ""675_onlyContractCreator"";
""675_addLock"" -> ""675_onlyContractCreator"";
}
"
0xec11958f705ab1185c539f293eaf6718c1702adf.sol,WhitelistedCrowdsale,"contract WhitelistedCrowdsale is Crowdsale, Ownable { mapping (address => bool) private whitelist; event WhitelistedAddressAdded(address indexed _address); event WhitelistedAddressRemoved(address indexed _address); modifier onlyIfWhitelisted(address _buyer) { require(whitelist[_buyer]); _; }",0,"subgraph cluster_2708_WhitelistedCrowdsale {
label=""WhitelistedCrowdsale"";
""2708_addAddressesToWhitelist"" [label=""addAddressesToWhitelist""];
""2708_isWhitelisted"" [label=""isWhitelisted""];
""2708__preValidatePurchase"" [label=""_preValidatePurchase""];
""2708_addAddressToWhitelist"" [label=""addAddressToWhitelist""];
""2708_removeAddressFromWhitelist"" [label=""removeAddressFromWhitelist""];
""2708_removeAddressesFromWhitelist"" [label=""removeAddressesFromWhitelist""];
""2708_removeAddressesFromWhitelist"" -> ""2708_onlyOwner"";
""2708_removeAddressFromWhitelist"" -> ""2708_onlyOwner"";
""2708__preValidatePurchase"" -> ""2708_onlyIfWhitelisted"";
""2708__preValidatePurchase"" -> ""2708__preValidatePurchase"";
""2708_addAddressesToWhitelist"" -> ""2708_onlyOwner"";
""2708_addAddressToWhitelist"" -> ""2708_onlyOwner"";
}
"
0x25d14913c49b7e7808453044f7e2f12b89693dda.sol,CXE,"contract CXE is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 2800000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 500000e8; uint public target0drop = 10000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event DistrRestarted(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1274_CXE {
label=""CXE"";
""1274_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1274_getTokens"" [label=""getTokens""];
""1274_balanceOf"" [label=""balanceOf""];
""1274_constructor"" [label=""constructor""];
""1274_transferOwnership"" [label=""transferOwnership""];
""1274_transferFrom"" [label=""transferFrom""];
""1274_withdrawAll"" [label=""withdrawAll""];
""1274_getTokenBalance"" [label=""getTokenBalance""];
""1274_burn"" [label=""burn""];
""1274_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1274_add"" [label=""add""];
""1274_allowance"" [label=""allowance""];
""1274_withdraw"" [label=""withdraw""];
""1274_approve"" [label=""approve""];
""1274_reDistribution"" [label=""reDistribution""];
""1274_Distribute"" [label=""Distribute""];
""1274_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1274_transfer"" [label=""transfer""];
""1274_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1274_finishDistribution"" [label=""finishDistribution""];
""1274_fallback"" [label=""fallback""];
""1274_distr"" [label=""distr""];
""1274_withdraw"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_canDistr"";
""1274_DistributeAirdrop"" -> ""1274_onlyOwner"";
""1274_reDistribution"" -> ""1274_canDistr"";
""1274_Distribute"" -> ""1274_onlyOwner"";
""1274_transferOwnership"" -> ""1274_onlyOwner"";
""1274_transferFrom"" -> ""1274_onlyPayloadSize"";
""1274_DistributeAirdropMultiple"" -> ""1274_onlyOwner"";
""1274_constructor"" -> ""1274_distr"";
""1274_transfer"" -> ""1274_onlyPayloadSize"";
""1274_finishDistribution"" -> ""1274_canDistr"";
""1274_getTokens"" -> ""1274_distr"";
""1274_DistributeAirdrop"" -> ""1274_Distribute"";
""1274_withdrawForeignTokens"" -> ""1274_onlyOwner"";
""1274_finishDistribution"" -> ""1274_onlyOwner"";
""1274_distr"" -> ""1274_canDistr"";
""1274_updateTokensPerEth"" -> ""1274_onlyOwner"";
""1274_add"" -> ""1274_onlyOwner"";
""1274_DistributeAirdropMultiple"" -> ""1274_Distribute"";
""1274_burn"" -> ""1274_onlyOwner"";
""1274_fallback"" -> ""1274_getTokens"";
""1274_withdrawAll"" -> ""1274_onlyOwner"";
""1274_reDistribution"" -> ""1274_onlyOwner"";
}
"
0x41c0542f41251d6d81526ed2dbc8f0008b13fe48.sol,MultiEther,contract MultiEther { struct Deposit { address depositor; uint deposit; uint payout; },0,"subgraph cluster_334_MultiEther {
label=""MultiEther"";
""334_getQueueLength"" [label=""getQueueLength""];
""334_calcMultiplier"" [label=""calcMultiplier""];
""334_pay"" [label=""pay""];
""334_calcMaxDeposit"" [label=""calcMaxDeposit""];
""334_fallback"" [label=""fallback""];
""334_pay"" -> ""334_calcMultiplier"";
""334_fallback"" -> ""334_calcMaxDeposit"";
""334_fallback"" -> ""334_pay"";
}
"
0xda11e959bcaaba5f88dbf4d866e270c78bc84b76.sol,EBP,"contract EBP is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 20000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 15000000e8; uint public target0drop = 2000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1253_EBP {
label=""EBP"";
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_Distribute"" [label=""Distribute""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_add"" [label=""add""];
""1253_getTokens"" [label=""getTokens""];
""1253_constructor"" [label=""constructor""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_transfer"" [label=""transfer""];
""1253_approve"" [label=""approve""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_distr"" [label=""distr""];
""1253_withdraw"" [label=""withdraw""];
""1253_getTokens"" -> ""1253_canDistr"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
}
"
0x4d49849dcc51ea1675140cb007d9f6897ae53260.sol,CrowdsaleExt,contract CrowdsaleExt is Haltable { uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5; using SafeMathLibExt for uint; FractionalERC20Ext public token; PricingStrategy public pricingStrategy; FinalizeAgent public finalizeAgent; string public name; address public multisigWallet; uint public minimumFundingGoal; uint public startsAt; uint public endsAt; uint public tokensSold = 0; uint public weiRaised = 0; uint public investorCount = 0; bool public finalized; bool public isWhiteListed; address[] public joinedCrowdsales; uint8 public joinedCrowdsalesLen = 0; uint8 public joinedCrowdsalesLenMax = 50; struct JoinedCrowdsaleStatus { bool isJoined; uint8 position; },0,"subgraph cluster_2004_CrowdsaleExt {
label=""CrowdsaleExt"";
""2004_isTierJoined"" [label=""isTierJoined""];
""2004_isCrowdsale"" [label=""isCrowdsale""];
""2004_finalized"" [label=""finalized""];
""2004_assignTokens"" [label=""assignTokens""];
""2004_endsAt"" [label=""endsAt""];
""2004_areReservedTokensDistributed"" [label=""areReservedTokensDistributed""];
""2004_isFinalizerSane"" [label=""isFinalizerSane""];
""2004_getTierPosition"" [label=""getTierPosition""];
""2004_getLastTier"" [label=""getLastTier""];
""2004_setJoinedCrowdsales"" [label=""setJoinedCrowdsales""];
""2004_updateJoinedCrowdsalesMultiple"" [label=""updateJoinedCrowdsalesMultiple""];
""2004_fallback"" [label=""fallback""];
""2004_joinedCrowdsales"" [label=""joinedCrowdsales""];
""2004_tokensSold"" [label=""tokensSold""];
""2004_isBreakingCap"" [label=""isBreakingCap""];
""2004_finalize"" [label=""finalize""];
""2004_setPricingStrategy"" [label=""setPricingStrategy""];
""2004_canDistributeReservedTokens"" [label=""canDistributeReservedTokens""];
""2004_joinedCrowdsalesLen"" [label=""joinedCrowdsalesLen""];
""2004_invest"" [label=""invest""];
""2004_setFinalizeAgent"" [label=""setFinalizeAgent""];
""2004_setEarlyParticipantWhitelistMultiple"" [label=""setEarlyParticipantWhitelistMultiple""];
""2004_setStartsAt"" [label=""setStartsAt""];
""2004_whitelistedParticipantsLength"" [label=""whitelistedParticipantsLength""];
""2004_updateInheritedEarlyParticipantWhitelist"" [label=""updateInheritedEarlyParticipantWhitelist""];
""2004_setMultisig"" [label=""setMultisig""];
""2004_isPricingSane"" [label=""isPricingSane""];
""2004_setEndsAt"" [label=""setEndsAt""];
""2004_startsAt"" [label=""startsAt""];
""2004_investInternal"" [label=""investInternal""];
""2004_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""2004_CrowdsaleExt"" [label=""CrowdsaleExt""];
""2004_distributeReservedTokens"" [label=""distributeReservedTokens""];
""2004_isAddressWhitelisted"" [label=""isAddressWhitelisted""];
""2004_halted"" [label=""halted""];
""2004_isMinimumGoalReached"" [label=""isMinimumGoalReached""];
""2004_setEarlyParticipantWhitelist"" [label=""setEarlyParticipantWhitelist""];
""2004_getState"" [label=""getState""];
""2004_isBreakingInvestorCap"" [label=""isBreakingInvestorCap""];
""2004_buy"" [label=""buy""];
""2004_updateEarlyParticipantWhitelist"" [label=""updateEarlyParticipantWhitelist""];
""2004_setEarlyParticipantWhitelist"" -> ""2004_onlyOwner"";
""2004_setJoinedCrowdsales"" -> ""2004_onlyOwner"";
""2004_finalize"" -> ""2004_stopInEmergency"";
""2004_investInternal"" -> ""2004_stopInEmergency"";
""2004_setEndsAt"" -> ""2004_getTierPosition"";
""2004_setEndsAt"" -> ""2004_onlyOwner"";
""2004_setStartsAt"" -> ""2004_getLastTier"";
""2004_investInternal"" -> ""2004_isBreakingCap"";
""2004_canDistributeReservedTokens"" -> ""2004_getLastTier"";
""2004_distributeReservedTokens"" -> ""2004_onlyOwner"";
""2004_distributeReservedTokens"" -> ""2004_stopInEmergency"";
""2004_finalize"" -> ""2004_inState"";
""2004_getState"" -> ""2004_isMinimumGoalReached"";
""2004_updateInheritedEarlyParticipantWhitelist"" -> ""2004_getTierPosition"";
""2004_setPricingStrategy"" -> ""2004_onlyOwner"";
""2004_updateJoinedCrowdsalesMultiple"" -> ""2004_onlyOwner"";
""2004_distributeReservedTokens"" -> ""2004_inState"";
""2004_setEndsAt"" -> ""2004_getLastTier"";
""2004_setStartsAt"" -> ""2004_getTierPosition"";
""2004_investInternal"" -> ""2004_updateInheritedEarlyParticipantWhitelist"";
""2004_setMultisig"" -> ""2004_onlyOwner"";
""2004_setJoinedCrowdsales"" -> ""2004_isTierJoined"";
""2004_setFinalizeAgent"" -> ""2004_onlyOwner"";
""2004_investInternal"" -> ""2004_getState"";
""2004_updateJoinedCrowdsalesMultiple"" -> ""2004_setJoinedCrowdsales"";
""2004_finalize"" -> ""2004_onlyOwner"";
""2004_investInternal"" -> ""2004_isBreakingInvestorCap"";
""2004_invest"" -> ""2004_investInternal"";
""2004_updateEarlyParticipantWhitelist"" -> ""2004_isTierJoined"";
""2004_getState"" -> ""2004_isCrowdsaleFull"";
""2004_setEarlyParticipantWhitelistMultiple"" -> ""2004_setEarlyParticipantWhitelist"";
""2004_setEarlyParticipantWhitelist"" -> ""2004_isAddressWhitelisted"";
""2004_setEarlyParticipantWhitelistMultiple"" -> ""2004_onlyOwner"";
""2004_buy"" -> ""2004_invest"";
""2004_setStartsAt"" -> ""2004_onlyOwner"";
""2004_CrowdsaleExt"" -> ""2004_setPricingStrategy"";
""2004_investInternal"" -> ""2004_assignTokens"";
}
"
0xef8c1338d35251f16777d42d559284fef8351aaa.sol,RTCoin,"contract RTCoin { using SafeMath for uint256; address public owner; address public saleAgent; uint256 public totalSupply; string public name; uint8 public decimals; string public symbol; bool private allowEmission = true; mapping (address => uint256) balances; function RTCoin(string _name, string _symbol, uint8 _decimals) public { decimals = _decimals; name = _name; symbol = _symbol; owner = msg.sender; }",0,"subgraph cluster_415_RTCoin {
label=""RTCoin"";
""415_balanceOf"" [label=""balanceOf""];
""415_burn"" [label=""burn""];
""415_close"" [label=""close""];
""415_RTCoin"" [label=""RTCoin""];
""415_transferOwnership"" [label=""transferOwnership""];
""415_emission"" [label=""emission""];
""415_decimals"" [label=""decimals""];
""415_changeSaleAgent"" [label=""changeSaleAgent""];
""415_transfer"" [label=""transfer""];
""415_changeSaleAgent"" -> ""415_onlyOwner"";
""415_close"" -> ""415_onlyOwner"";
""415_transferOwnership"" -> ""415_onlyOwner"";
""415_emission"" -> ""415_onlyOwner"";
}
"
0x344bd3872f67d37757b48155ba4666e780fc47b5.sol,DragonFarmer,contract DragonFarmer { address public superPowerFulDragonOwner; uint256 lastPrice = 200000000000000000; uint public hatchingSpeed = 100; uint256 public snatchedOn; bool public isEnabled = false; function enableSuperDragon(bool enable) public { require(msg.sender == ceoAddress); isEnabled = enable; superPowerFulDragonOwner = ceoAddress; snatchedOn = now; },0,"subgraph cluster_1004_DragonFarmer {
label=""DragonFarmer"";
""1004_getMyEggs"" [label=""getMyEggs""];
""1004_sellEggs"" [label=""sellEggs""];
""1004_calculateEggBuySimple"" [label=""calculateEggBuySimple""];
""1004_withDrawMoney"" [label=""withDrawMoney""];
""1004_getDragonPrice"" [label=""getDragonPrice""];
""1004_getEggsSinceLastHatch"" [label=""getEggsSinceLastHatch""];
""1004_calculateEggBuy"" [label=""calculateEggBuy""];
""1004_getDragonPriceNo"" [label=""getDragonPriceNo""];
""1004_constructor"" [label=""constructor""];
""1004_getMyNormalDragons"" [label=""getMyNormalDragons""];
""1004_pay"" [label=""pay""];
""1004_buySuperDragon"" [label=""buySuperDragon""];
""1004_getEggsToHatchDragon"" [label=""getEggsToHatchDragon""];
""1004_seedMarket"" [label=""seedMarket""];
""1004_buyIceDrangon"" [label=""buyIceDrangon""];
""1004_enableSuperDragon"" [label=""enableSuperDragon""];
""1004_calculatePercentage"" [label=""calculatePercentage""];
""1004_buyDrangon"" [label=""buyDrangon""];
""1004_setUserHatchRate"" [label=""setUserHatchRate""];
""1004_getMyIceDragon"" [label=""getMyIceDragon""];
""1004_getBalance"" [label=""getBalance""];
""1004_claimSuperDragonEggs"" [label=""claimSuperDragonEggs""];
""1004_calculateEggSell"" [label=""calculateEggSell""];
""1004_getFreeDragon"" [label=""getFreeDragon""];
""1004_calculateTrade"" [label=""calculateTrade""];
""1004_hatchEggs"" [label=""hatchEggs""];
""1004_hatchEggs"" -> ""1004_getMyEggs"";
""1004_sellEggs"" -> ""1004_calculatePercentage"";
""1004_buyIceDrangon"" -> ""1004_calculatePercentage"";
""1004_getDragonPriceNo"" -> ""1004_getEggsToHatchDragon"";
""1004_getDragonPrice"" -> ""1004_calculateEggSell"";
""1004_getDragonPrice"" -> ""1004_calculatePercentage"";
""1004_calculateEggBuy"" -> ""1004_calculateTrade"";
""1004_getDragonPriceNo"" -> ""1004_getDragonPrice"";
""1004_sellEggs"" -> ""1004_calculateEggSell"";
""1004_getMyEggs"" -> ""1004_getEggsSinceLastHatch"";
""1004_setUserHatchRate"" -> ""1004_getEggsToHatchDragon"";
""1004_calculateEggSell"" -> ""1004_calculateTrade"";
""1004_buySuperDragon"" -> ""1004_calculatePercentage"";
""1004_buyDrangon"" -> ""1004_calculatePercentage"";
""1004_getFreeDragon"" -> ""1004_setUserHatchRate"";
""1004_calculateEggBuySimple"" -> ""1004_calculateEggBuy"";
""1004_buyDrangon"" -> ""1004_getDragonPrice"";
""1004_sellEggs"" -> ""1004_getMyEggs"";
""1004_buyIceDrangon"" -> ""1004_getDragonPrice"";
}
"
0x4018fb49905d86c0d8bbdefe51fa96e5287aead4.sol,TokenBasic,contract TokenBasic is ERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowed; uint256 private _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },0,"subgraph cluster_652_TokenBasic {
label=""TokenBasic"";
""652__burnFrom"" [label=""_burnFrom""];
""652__transfer"" [label=""_transfer""];
""652_decreaseAllowance"" [label=""decreaseAllowance""];
""652_balanceOf"" [label=""balanceOf""];
""652_increaseAllowance"" [label=""increaseAllowance""];
""652_approve"" [label=""approve""];
""652_transfer"" [label=""transfer""];
""652__burn"" [label=""_burn""];
""652__mint"" [label=""_mint""];
""652_totalSupply"" [label=""totalSupply""];
""652_allowance"" [label=""allowance""];
""652__burnFrom"" -> ""652__burn"";
""652_transfer"" -> ""652__transfer"";
}
"
0x39f968b4b8b367ce20f5aefc852591f7eada4b3e.sol,Administration,"contract Administration is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Administration() public { symbol = ; name = ; decimals = 18; _totalSupply = 210000000000000000000000000; balances[0xFe905C1CC0395240317F4e5A6ff22823f9B1DD3c] = _totalSupply; Transfer(address(0), 0xFe905C1CC0395240317F4e5A6ff22823f9B1DD3c, _totalSupply); }",0,"subgraph cluster_543_Administration {
label=""Administration"";
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_Administration"" [label=""Administration""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x5b15a638d1defbf055dc2d7653d5ff1bd5a9494c.sol,CHEMCHINA_PFIII_III_883,"contract CHEMCHINA_PFIII_III_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 960045161637506000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",0,"subgraph cluster_189_CHEMCHINA_PFIII_III_883 {
label=""CHEMCHINA_PFIII_III_883"";
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0xee91e81927bb047ea0f4b24e43dd5dc0684827a0.sol,BINGToken,contract BINGToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 1000000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function BINGToken () { owner = msg.sender; },0,"subgraph cluster_756_BINGToken {
label=""BINGToken"";
""756_setOwner"" [label=""setOwner""];
""756_totalSupply"" [label=""totalSupply""];
""756_BINGToken"" [label=""BINGToken""];
""756_createTokens"" [label=""createTokens""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_approve"" [label=""approve""];
""756_transferFrom"" [label=""transferFrom""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_refundTokens"" [label=""refundTokens""];
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_approve"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0xa3f5411cfc9eee0dd108bf0d07433b6dd99037f1.sol,Avatar,"contract Avatar is Ownable { bytes32 public orgName; DAOToken public nativeToken; Reputation public nativeReputation; event GenericAction(address indexed _action, bytes32[] _params); event SendEther(uint _amountInWei, address indexed _to); event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint _value); event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint _value); event ExternalTokenIncreaseApproval(StandardToken indexed _externalToken, address _spender, uint _addedValue); event ExternalTokenDecreaseApproval(StandardToken indexed _externalToken, address _spender, uint _subtractedValue); event ReceiveEther(address indexed _sender, uint _value); constructor(bytes32 _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public { orgName = _orgName; nativeToken = _nativeToken; nativeReputation = _nativeReputation; }",0,"subgraph cluster_1457_Avatar {
label=""Avatar"";
""1457_constructor"" [label=""constructor""];
""1457_externalTokenTransfer"" [label=""externalTokenTransfer""];
""1457_externalTokenTransferFrom"" [label=""externalTokenTransferFrom""];
""1457_externalTokenDecreaseApproval"" [label=""externalTokenDecreaseApproval""];
""1457_sendEther"" [label=""sendEther""];
""1457_externalTokenIncreaseApproval"" [label=""externalTokenIncreaseApproval""];
""1457_genericCall"" [label=""genericCall""];
""1457_fallback"" [label=""fallback""];
""1457_sendEther"" -> ""1457_onlyOwner"";
""1457_genericCall"" -> ""1457_onlyOwner"";
""1457_externalTokenIncreaseApproval"" -> ""1457_onlyOwner"";
""1457_externalTokenTransfer"" -> ""1457_onlyOwner"";
""1457_externalTokenDecreaseApproval"" -> ""1457_onlyOwner"";
""1457_externalTokenTransferFrom"" -> ""1457_onlyOwner"";
}
"
0x5b6696ed1e4e74c2a73a3f27186ab315f4fa55d8.sol,TkoWhitelist,"contract TkoWhitelist is Ownable{ using SafeMath for uint256; address public admin; mapping(address => uint256) internal totalIndividualWeiAmount; mapping(address => bool) internal whitelist; event AdminChanged(address indexed previousAdmin, address indexed newAdmin); function TkoWhitelist (address _admin) public { require(_admin != address(0)); admin = _admin; }",0,"subgraph cluster_355_TkoWhitelist {
label=""TkoWhitelist"";
""355_changeAdmin"" [label=""changeAdmin""];
""355_isWhitelisted"" [label=""isWhitelisted""];
""355_removeFromWhitelist"" [label=""removeFromWhitelist""];
""355_addTotalIndividualWeiAmount"" [label=""addTotalIndividualWeiAmount""];
""355_addManyToWhitelist"" [label=""addManyToWhitelist""];
""355_getTotalIndividualWeiAmount"" [label=""getTotalIndividualWeiAmount""];
""355_TkoWhitelist"" [label=""TkoWhitelist""];
""355_setTotalIndividualWeiAmount"" [label=""setTotalIndividualWeiAmount""];
""355_addToWhitelist"" [label=""addToWhitelist""];
""355_setTotalIndividualWeiAmount"" -> ""355_onlyOwner"";
""355_addManyToWhitelist"" -> ""355_onlyOwnerOrAdmin"";
""355_removeFromWhitelist"" -> ""355_onlyOwnerOrAdmin"";
""355_isWhitelisted"" -> ""355_onlyOwnerOrAdmin"";
""355_addToWhitelist"" -> ""355_onlyOwnerOrAdmin"";
""355_addTotalIndividualWeiAmount"" -> ""355_onlyOwner"";
""355_getTotalIndividualWeiAmount"" -> ""355_onlyOwnerOrAdmin"";
""355_changeAdmin"" -> ""355_onlyOwner"";
}
"
0x209132061047ff4d2ad395691005d3266e48b673.sol,IdGameCoin,contract IdGameCoin is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public owner; uint256 public endIco; uint256 public bonusEnds; uint256 public startPreIco; uint256 public startIco; function IdGameCoin() public { balances[msg.sender] = 30000000000000000000000000; totalSupply = 30000000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 1000; owner = msg.sender; startPreIco = now; startIco = 1556748000; bonusEnds = 1546293600; endIco = 1568062800; },0,"subgraph cluster_566_IdGameCoin {
label=""IdGameCoin"";
""566_burn"" [label=""burn""];
""566_fallback"" [label=""fallback""];
""566_mint"" [label=""mint""];
""566_IdGameCoin"" [label=""IdGameCoin""];
""566_approveAndCall"" [label=""approveAndCall""];
}
"
0x00ab698bbb34ce1ac75ec1398fbeba8db82a5c63.sol,Socialife,"contract Socialife is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 0; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 18000000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_943_Socialife {
label=""Socialife"";
""943_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""943_finishDistribution"" [label=""finishDistribution""];
""943_allowance"" [label=""allowance""];
""943_getTokens"" [label=""getTokens""];
""943_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""943_transfer"" [label=""transfer""];
""943_Socialife"" [label=""Socialife""];
""943_doAirdrop"" [label=""doAirdrop""];
""943_withdraw"" [label=""withdraw""];
""943_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""943_balanceOf"" [label=""balanceOf""];
""943_transferOwnership"" [label=""transferOwnership""];
""943_fallback"" [label=""fallback""];
""943_distr"" [label=""distr""];
""943_approve"" [label=""approve""];
""943_getTokenBalance"" [label=""getTokenBalance""];
""943_updateTokensPerEth"" [label=""updateTokensPerEth""];
""943_burn"" [label=""burn""];
""943_transferFrom"" [label=""transferFrom""];
""943_getTokens"" -> ""943_canDistr"";
""943_transfer"" -> ""943_onlyPayloadSize"";
""943_adminClaimAirdrop"" -> ""943_doAirdrop"";
""943_finishDistribution"" -> ""943_onlyOwner"";
""943_burn"" -> ""943_onlyOwner"";
""943_updateTokensPerEth"" -> ""943_onlyOwner"";
""943_adminClaimAirdropMultiple"" -> ""943_doAirdrop"";
""943_transferFrom"" -> ""943_onlyPayloadSize"";
""943_adminClaimAirdrop"" -> ""943_onlyOwner"";
""943_distr"" -> ""943_canDistr"";
""943_withdrawForeignTokens"" -> ""943_onlyOwner"";
""943_getTokens"" -> ""943_distr"";
""943_adminClaimAirdropMultiple"" -> ""943_onlyOwner"";
""943_finishDistribution"" -> ""943_canDistr"";
""943_Socialife"" -> ""943_distr"";
""943_transferOwnership"" -> ""943_onlyOwner"";
""943_fallback"" -> ""943_getTokens"";
""943_withdraw"" -> ""943_onlyOwner"";
}
"
0x20e569eca4737c4b12be2e5dcdbfdf0d829ba1c8.sol,ldoh,"contract ldoh is EthereumSmartContract { event onCashbackCode (address indexed hodler, address cashbackcode); event onAffiliateBonus (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onClaimTokens (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onHodlTokens (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onClaimCashBack (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onAddContractAddress( address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime ); event onUnlockedTokens(uint256 returned); address public DefaultToken; struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; bool cashbackstatus; }",0,"subgraph cluster_2311_ldoh {
label=""ldoh"";
""2311_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""2311_SendUnlockedTokens"" [label=""SendUnlockedTokens""];
""2311_constructor"" [label=""constructor""];
""2311_mul"" [label=""mul""];
""2311_EthereumNodesFees"" [label=""EthereumNodesFees""];
""2311_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""2311_ClaimTokens"" [label=""ClaimTokens""];
""2311_GetSafe"" [label=""GetSafe""];
""2311_GetContractBalance"" [label=""GetContractBalance""];
""2311_HodlTokens"" [label=""HodlTokens""];
""2311_WithdrawEth"" [label=""WithdrawEth""];
""2311_PayToken"" [label=""PayToken""];
""2311_Recontribute"" [label=""Recontribute""];
""2311_ReturnAllTokens"" [label=""ReturnAllTokens""];
""2311_HodlTokens3"" [label=""HodlTokens3""];
""2311_fallback"" [label=""fallback""];
""2311_UnlockToken3"" [label=""UnlockToken3""];
""2311_add"" [label=""add""];
""2311_CashbackCode"" [label=""CashbackCode""];
""2311_HodlTokens2"" [label=""HodlTokens2""];
""2311_AddContractAddress"" [label=""AddContractAddress""];
""2311_ClaimCashback"" [label=""ClaimCashback""];
""2311_GetHodlTokensBalance"" [label=""GetHodlTokensBalance""];
""2311_GetUserSafesLength"" [label=""GetUserSafesLength""];
""2311_UnlockToken1"" [label=""UnlockToken1""];
""2311_sub"" [label=""sub""];
""2311_UnlockToken2"" [label=""UnlockToken2""];
""2311_TokenPrice"" [label=""TokenPrice""];
""2311_div"" [label=""div""];
""2311_GetTokenReserve"" [label=""GetTokenReserve""];
""2311_HodlTokens2"" -> ""2311_sub"";
""2311_AddContractAddress"" -> ""2311_restricted"";
""2311_ClaimTokens"" -> ""2311_UnlockToken1"";
""2311_ReturnAllTokens"" -> ""2311_PayToken"";
""2311_HodlTokens"" -> ""2311_add"";
""2311_EthereumNodesFees"" -> ""2311_sub"";
""2311_UnlockToken1"" -> ""2311_mul"";
""2311_UnlockToken2"" -> ""2311_mul"";
""2311_PayToken"" -> ""2311_sub"";
""2311_ReturnAllTokens"" -> ""2311_sub"";
""2311_UnlockToken1"" -> ""2311_PayToken"";
""2311_HodlTokens3"" -> ""2311_add"";
""2311_UnlockToken1"" -> ""2311_add"";
""2311_HodlTokens2"" -> ""2311_add"";
""2311_WithdrawAffiliate"" -> ""2311_sub"";
""2311_SendUnlockedTokens"" -> ""2311_WithdrawAffiliate"";
""2311_HodlTokens2"" -> ""2311_mul"";
""2311_UnlockToken3"" -> ""2311_sub"";
""2311_HodlTokens2"" -> ""2311_div"";
""2311_UnlockToken3"" -> ""2311_mul"";
""2311_fallback"" -> ""2311_add"";
""2311_HodlTokens2"" -> ""2311_HodlTokens3"";
""2311_TokenPrice"" -> ""2311_restricted"";
""2311_UnlockToken2"" -> ""2311_div"";
""2311_UnlockToken1"" -> ""2311_div"";
""2311_UnlockToken2"" -> ""2311_sub"";
""2311_SendUnlockedTokens"" -> ""2311_restricted"";
""2311_ReturnAllTokens"" -> ""2311_restricted"";
""2311_WithdrawEth"" -> ""2311_restricted"";
""2311_ClaimCashback"" -> ""2311_PayToken"";
""2311_UnlockToken3"" -> ""2311_PayToken"";
""2311_ReturnAllTokens"" -> ""2311_div"";
""2311_Recontribute"" -> ""2311_HodlTokens2"";
""2311_HodlTokens"" -> ""2311_HodlTokens2"";
""2311_UnlockToken1"" -> ""2311_UnlockToken2"";
""2311_SendUnlockedTokens"" -> ""2311_UnlockToken2"";
""2311_EthereumNodesFees"" -> ""2311_restricted"";
""2311_UnlockToken3"" -> ""2311_div"";
""2311_UnlockToken2"" -> ""2311_UnlockToken3"";
""2311_AddContractAddress"" -> ""2311_div"";
""2311_ReturnAllTokens"" -> ""2311_mul"";
""2311_AddContractAddress"" -> ""2311_mul"";
""2311_PayToken"" -> ""2311_add"";
""2311_WithdrawAffiliate"" -> ""2311_add"";
}
"
0x28fd414804a3fabf0740cd4ad22691d61163f20a.sol,MintableToken,"contract MintableToken is StandardToken { address public minter; bool public mintingDisabled = false; event MintingDisabled(); modifier canMint() { require(!mintingDisabled, ); _; }",0,"subgraph cluster_1028_StandardMintableToken {
label=""StandardMintableToken"";
""1028_constructor"" [label=""constructor""];
""1028_constructor"" -> ""1028_constructor"";
}
"
0x789109d185f5f4205d58c533eb831fdefb0d10b8.sol,BlockchainofBeautifulandHealthyEcosystem,"contract BlockchainofBeautifulandHealthyEcosystem { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function BlockchainofBeautifulandHealthyEcosystem( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_BlockchainofBeautifulandHealthyEcosystem {
label=""BlockchainofBeautifulandHealthyEcosystem"";
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_BlockchainofBeautifulandHealthyEcosystem"" [label=""BlockchainofBeautifulandHealthyEcosystem""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x26cd1f0943d5877f7de475571172f957c337d4e4.sol,GoldenBit,"contract GoldenBit is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 960000000000000000000000000; balances[0xaa251d79d41ECaD6C0d183Ac1b7D67fEe28805EB] = _totalSupply; emit Transfer(address(0), 0xaa251d79d41ECaD6C0d183Ac1b7D67fEe28805EB, _totalSupply); }",0,"subgraph cluster_540_GoldenBit {
label=""GoldenBit"";
""540_totalSupply"" [label=""totalSupply""];
""540_constructor"" [label=""constructor""];
""540_balanceOf"" [label=""balanceOf""];
""540_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""540_transfer"" [label=""transfer""];
""540_approve"" [label=""approve""];
""540_transferFrom"" [label=""transferFrom""];
""540_fallback"" [label=""fallback""];
""540_approveAndCall"" [label=""approveAndCall""];
""540_allowance"" [label=""allowance""];
""540_transfer"" -> ""540_safeAdd"";
""540_transferAnyERC20Token"" -> ""540_onlyOwner"";
""540_transfer"" -> ""540_safeSub"";
""540_transferFrom"" -> ""540_safeSub"";
""540_transferFrom"" -> ""540_safeAdd"";
}
"
0x17ac7de614fbdc988b693f7175cc14d7301210a1.sol,GemmyCoin,"contract GemmyCoin is ERC20Interface, OwnerHelper { using SafeMath for uint; string public name; uint public decimals; string public symbol; address public wallet; uint public totalSupply; uint constant public saleSupply = 3500000000 * E18; uint constant public rewardPoolSupply = 2200000000 * E18; uint constant public foundationSupply = 500000000 * E18; uint constant public gemmyMusicSupply = 1200000000 * E18; uint constant public advisorSupply = 700000000 * E18; uint constant public mktSupply = 1600000000 * E18; uint constant public etcSupply = 300000000 * E18; uint constant public maxSupply = 10000000000 * E18; uint public coinIssuedSale = 0; uint public coinIssuedRewardPool = 0; uint public coinIssuedFoundation = 0; uint public coinIssuedGemmyMusic = 0; uint public coinIssuedAdvisor = 0; uint public coinIssuedMkt = 0; uint public coinIssuedEtc = 0; uint public coinIssuedTotal = 0; uint public coinIssuedBurn = 0; uint public saleEtherReceived = 0; uint constant private E18 = 1000000000000000000; uint public firstPreSaleDate1 = 1529247600; uint public firstPreSaleEndDate1 = 1530198000; uint public firstPreSaleDate2 = 1530457200; uint public firstPreSaleEndDate2 = 1532617200; uint public secondPreSaleDate = 1532876400; uint public secondPreSaleEndDate = 1534431600; uint public thirdPreSaleDate = 1534690800; uint public thirdPreSaleEndDate = 1536246000; uint public mainSaleDate = 1536505200; uint public mainSaleEndDate = 1540911600; bool public totalCoinLock; uint public gemmyMusicLockTime; uint public advisorFirstLockTime; uint public advisorSecondLockTime; mapping (address => uint) internal balances; mapping (address => mapping ( address => uint )) internal approvals; mapping (address => bool) internal personalLocks; mapping (address => bool) internal gemmyMusicLocks; mapping (address => uint) internal advisorFirstLockBalances; mapping (address => uint) internal advisorSecondLockBalances; mapping (address => uint) internal icoEtherContributeds; event CoinIssuedSale(address indexed _who, uint _coins, uint _balances, uint _ether, uint _saleTime); event RemoveTotalCoinLock(); event SetAdvisorLockTime(uint _first, uint _second); event RemovePersonalLock(address _who); event RemoveGemmyMusicLock(address _who); event RemoveAdvisorFirstLock(address _who); event RemoveAdvisorSecondLock(address _who); event WithdrawRewardPool(address _who, uint _value); event WithdrawFoundation(address _who, uint _value); event WithdrawGemmyMusic(address _who, uint _value); event WithdrawAdvisor(address _who, uint _value); event WithdrawMkt(address _who, uint _value); event WithdrawEtc(address _who, uint _value); event ChangeWallet(address _who); event BurnCoin(uint _value); event RefundCoin(address _who, uint _value); constructor() public { name = ; decimals = 18; symbol = ; totalSupply = 0; owner = msg.sender; wallet = msg.sender; require(maxSupply == saleSupply + rewardPoolSupply + foundationSupply + gemmyMusicSupply + advisorSupply + mktSupply + etcSupply); totalCoinLock = true; gemmyMusicLockTime = firstPreSaleDate1 + (365 * 24 * 60 * 60); advisorFirstLockTime = gemmyMusicLockTime; advisorSecondLockTime = gemmyMusicLockTime; }",0,"subgraph cluster_2119_GemmyCoin {
label=""GemmyCoin"";
""2119_transferMultiple"" [label=""transferMultiple""];
""2119_refundCoin"" [label=""refundCoin""];
""2119_buyCoin"" [label=""buyCoin""];
""2119_isTransferLock"" [label=""isTransferLock""];
""2119_isPersonalLock"" [label=""isPersonalLock""];
""2119_removePersonalLockMultiple"" [label=""removePersonalLockMultiple""];
""2119_atNow"" [label=""atNow""];
""2119_removeGemmyMusicLock"" [label=""removeGemmyMusicLock""];
""2119_removeFirstAdvisorLock"" [label=""removeFirstAdvisorLock""];
""2119_removeSecondAdvisorLock"" [label=""removeSecondAdvisorLock""];
""2119_withdrawFoundation"" [label=""withdrawFoundation""];
""2119_withdrawAdvisor"" [label=""withdrawAdvisor""];
""2119_withdrawEtc"" [label=""withdrawEtc""];
""2119_withdrawGemmyMusic"" [label=""withdrawGemmyMusic""];
""2119_transferFrom"" [label=""transferFrom""];
""2119_withdrawRewardPool"" [label=""withdrawRewardPool""];
""2119_transfer"" [label=""transfer""];
""2119_constructor"" [label=""constructor""];
""2119_balanceOf"" [label=""balanceOf""];
""2119_burnCoin"" [label=""burnCoin""];
""2119_allowance"" [label=""allowance""];
""2119_approve"" [label=""approve""];
""2119_removePersonalLock"" [label=""removePersonalLock""];
""2119_totalSupply"" [label=""totalSupply""];
""2119_withdrawMkt"" [label=""withdrawMkt""];
""2119_removeTotalCoinLock"" [label=""removeTotalCoinLock""];
""2119_changeWallet"" [label=""changeWallet""];
""2119_fallback"" [label=""fallback""];
""2119_removeSecondAdvisorLock"" -> ""2119_onlyOwner"";
""2119_removeFirstAdvisorLock"" -> ""2119_atNow"";
""2119_removePersonalLockMultiple"" -> ""2119_onlyOwner"";
""2119_removeGemmyMusicLock"" -> ""2119_atNow"";
""2119_removeTotalCoinLock"" -> ""2119_onlyOwner"";
""2119_transfer"" -> ""2119_isTransferLock"";
""2119_burnCoin"" -> ""2119_atNow"";
""2119_removeGemmyMusicLock"" -> ""2119_onlyOwner"";
""2119_approve"" -> ""2119_isTransferLock"";
""2119_withdrawAdvisor"" -> ""2119_onlyOwner"";
""2119_withdrawEtc"" -> ""2119_onlyOwner"";
""2119_transferMultiple"" -> ""2119_onlyOwner"";
""2119_withdrawGemmyMusic"" -> ""2119_onlyOwner"";
""2119_refundCoin"" -> ""2119_onlyOwner"";
""2119_removePersonalLock"" -> ""2119_onlyOwner"";
""2119_withdrawMkt"" -> ""2119_onlyOwner"";
""2119_transferFrom"" -> ""2119_isTransferLock"";
""2119_removeSecondAdvisorLock"" -> ""2119_atNow"";
""2119_removeFirstAdvisorLock"" -> ""2119_onlyOwner"";
""2119_burnCoin"" -> ""2119_onlyOwner"";
""2119_removeTotalCoinLock"" -> ""2119_atNow"";
""2119_fallback"" -> ""2119_buyCoin"";
""2119_withdrawFoundation"" -> ""2119_onlyOwner"";
""2119_changeWallet"" -> ""2119_onlyOwner"";
""2119_buyCoin"" -> ""2119_atNow"";
""2119_transferMultiple"" -> ""2119_isTransferLock"";
""2119_withdrawRewardPool"" -> ""2119_onlyOwner"";
}
"
0x72268385b3620157f0b051e876c801841a716b8e.sol,KT,"contract KT is KTfactory, erc721 { using safemath for uint256; mapping (uint => address) KTApprovals; modifier decomposeAllowed(uint token_id){ require(KTs[token_id].level > 1); _; }",0,"subgraph cluster_296_KTaccess {
label=""KTaccess"";
""296_setO1"" [label=""setO1""];
""296_setO3"" [label=""setO3""];
""296_setO2"" [label=""setO2""];
""296_setO2"" -> ""296_onlyOLevel"";
""296_setO1"" -> ""296_onlyOLevel"";
""296_setO3"" -> ""296_onlyOLevel"";
}
"
0x3a4b527dcd618ccea50adb32b3369117e5442a2f.sol,ZUR,contract ZUR is MintableToken { using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 0; address public admin; uint public totalEthReleased = 0; mapping(address => uint) public ethReleased; address[] public trackedTokens; mapping(address => bool) public isTokenTracked; mapping(address => uint) public totalTokensReleased; mapping(address => mapping(address => uint)) public tokensReleased; constructor() public { owner = this; admin = msg.sender; },0,"subgraph cluster_1441_ZUR {
label=""ZUR"";
""1441_transferChecks"" [label=""transferChecks""];
""1441_fallback"" [label=""fallback""];
""1441_trackToken"" [label=""trackToken""];
""1441_claimMyTokens"" [label=""claimMyTokens""];
""1441_constructor"" [label=""constructor""];
""1441_transfer"" [label=""transfer""];
""1441_claimEth"" [label=""claimEth""];
""1441_claimTokensFor"" [label=""claimTokensFor""];
""1441_transferFrom"" [label=""transferFrom""];
""1441_claimEthFor"" [label=""claimEthFor""];
""1441_unTrackToken"" [label=""unTrackToken""];
""1441_claimToken"" [label=""claimToken""];
""1441_addPayees"" [label=""addPayees""];
""1441_getUnclaimedTokenAmount"" [label=""getUnclaimedTokenAmount""];
""1441_finishedLoading"" [label=""finishedLoading""];
""1441_addPayee"" [label=""addPayee""];
""1441_changeAdmin"" [label=""changeAdmin""];
""1441_transfer"" -> ""1441_transfer"";
""1441_addPayee"" -> ""1441_canMint"";
""1441_finishedLoading"" -> ""1441_canMint"";
""1441_transfer"" -> ""1441_transferChecks"";
""1441_claimTokensFor"" -> ""1441_claimToken"";
""1441_addPayee"" -> ""1441_onlyAdmin"";
""1441_claimEth"" -> ""1441_claimEthFor"";
""1441_addPayees"" -> ""1441_addPayee"";
""1441_addPayees"" -> ""1441_onlyAdmin"";
""1441_transferFrom"" -> ""1441_transferChecks"";
""1441_unTrackToken"" -> ""1441_onlyAdmin"";
""1441_finishedLoading"" -> ""1441_onlyAdmin"";
""1441_transferFrom"" -> ""1441_transferFrom"";
""1441_changeAdmin"" -> ""1441_onlyAdmin"";
""1441_claimToken"" -> ""1441_getUnclaimedTokenAmount"";
""1441_trackToken"" -> ""1441_onlyAdmin"";
""1441_claimMyTokens"" -> ""1441_claimTokensFor"";
}
"
0x271a0b465d5b453bb835afd2d671c76b2b76900e.sol,ClockAuction,"contract ClockAuction is ClockAuctionBase { bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d); bool public isSaleClockAuction = true; constructor(uint256 _ownerCut, uint256 _authorShare) public { require(_ownerCut <= 10000); require(_authorShare <= 10000); ownerCut = _ownerCut; authorShare = _authorShare; }",0,"subgraph cluster_1034_ClockAuctionBase {
label=""ClockAuctionBase"";
""1034__escrow"" [label=""_escrow""];
""1034__addAuction"" [label=""_addAuction""];
""1034__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""1034__interfaceByAddress"" [label=""_interfaceByAddress""];
""1034__currentPrice"" [label=""_currentPrice""];
""1034__isAddressSupportedContract"" [label=""_isAddressSupportedContract""];
""1034__owns"" [label=""_owns""];
""1034__transfer"" [label=""_transfer""];
""1034__cancelAuction"" [label=""_cancelAuction""];
""1034__bid"" [label=""_bid""];
""1034__removeAuction"" [label=""_removeAuction""];
""1034_addToonContract"" [label=""addToonContract""];
""1034__computeCut"" [label=""_computeCut""];
""1034__isOnAuction"" [label=""_isOnAuction""];
""1034_addToonContract"" -> ""1034_onlyOwner"";
""1034__bid"" -> ""1034__computeCut"";
""1034__cancelAuction"" -> ""1034__removeAuction"";
""1034__bid"" -> ""1034_addPendingWithdrawal"";
""1034__bid"" -> ""1034__isOnAuction"";
""1034__escrow"" -> ""1034__interfaceByAddress"";
""1034__bid"" -> ""1034__removeAuction"";
""1034__bid"" -> ""1034__interfaceByAddress"";
""1034__currentPrice"" -> ""1034__computeCurrentPrice"";
""1034__addAuction"" -> ""1034__isAddressSupportedContract"";
""1034__transfer"" -> ""1034__interfaceByAddress"";
""1034__cancelAuction"" -> ""1034__transfer"";
""1034__owns"" -> ""1034__interfaceByAddress"";
""1034__bid"" -> ""1034__currentPrice"";
}
"
0xbc86727e770de68b1060c91f6bb6945c73e10388.sol,InkProtocolCore,"contract InkProtocolCore is InkProtocolInterface, StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 private constant gasLimitForExpiryCall = 1000000; uint256 private constant gasLimitForMediatorCall = 4000000; enum Expiry { Transaction, Fulfillment, Escalation, Mediation }",0,"subgraph cluster_2860_InkProtocolCore {
label=""InkProtocolCore"";
""2860_transferFrom"" [label=""transferFrom""];
""2860__settleTransaction"" [label=""_settleTransaction""];
""2860_confirmTransactionByMediator"" [label=""confirmTransactionByMediator""];
""2860__refundTransaction"" [label=""_refundTransaction""];
""2860_refundTransaction"" [label=""refundTransaction""];
""2860_settleTransactionByMediator"" [label=""settleTransactionByMediator""];
""2860_confirmTransactionAfterExpiry"" [label=""confirmTransactionAfterExpiry""];
""2860__completeTransaction"" [label=""_completeTransaction""];
""2860_disputeTransaction"" [label=""disputeTransaction""];
""2860__refundTransactionByMediator"" [label=""_refundTransactionByMediator""];
""2860__confirmTransaction"" [label=""_confirmTransaction""];
""2860__settleTransactionByMediator"" [label=""_settleTransactionByMediator""];
""2860__revokeTransaction"" [label=""_revokeTransaction""];
""2860_transfer"" [label=""transfer""];
""2860__findTransactionForBuyer"" [label=""_findTransactionForBuyer""];
""2860__acceptTransaction"" [label=""_acceptTransaction""];
""2860__resolveOwner"" [label=""_resolveOwner""];
""2860__updateTransactionState"" [label=""_updateTransactionState""];
""2860_revokeTransaction"" [label=""revokeTransaction""];
""2860__createTransaction"" [label=""_createTransaction""];
""2860__transferFrom"" [label=""_transferFrom""];
""2860_InkProtocolCore"" [label=""InkProtocolCore""];
""2860_refundTransactionByMediator"" [label=""refundTransactionByMediator""];
""2860__findTransactionForMediator"" [label=""_findTransactionForMediator""];
""2860__confirmTransactionByMediator"" [label=""_confirmTransactionByMediator""];
""2860__findTransactionForSeller"" [label=""_findTransactionForSeller""];
""2860__transferFromEscrow"" [label=""_transferFromEscrow""];
""2860__fetchExpiry"" [label=""_fetchExpiry""];
""2860_escalateDisputeToMediator"" [label=""escalateDisputeToMediator""];
""2860__findTransactionForParty"" [label=""_findTransactionForParty""];
""2860__disputeTransaction"" [label=""_disputeTransaction""];
""2860_provideTransactionFeedback"" [label=""provideTransactionFeedback""];
""2860_createTransaction"" [label=""createTransaction""];
""2860__confirmTransactionAfterExpiry"" [label=""_confirmTransactionAfterExpiry""];
""2860_link"" [label=""link""];
""2860__cleanupTransaction"" [label=""_cleanupTransaction""];
""2860__resolveMediator"" [label=""_resolveMediator""];
""2860_confirmTransaction"" [label=""confirmTransaction""];
""2860_refundTransactionAfterExpiry"" [label=""refundTransactionAfterExpiry""];
""2860__escalateDisputeToMediator"" [label=""_escalateDisputeToMediator""];
""2860__fetchMediatorFee"" [label=""_fetchMediatorFee""];
""2860__findTransaction"" [label=""_findTransaction""];
""2860__provideTransactionFeedback"" [label=""_provideTransactionFeedback""];
""2860_settleTransaction"" [label=""settleTransaction""];
""2860_acceptTransaction"" [label=""acceptTransaction""];
""2860__refundTransactionAfterExpiry"" [label=""_refundTransactionAfterExpiry""];
""2860__afterExpiry"" [label=""_afterExpiry""];
""2860__transferFromEscrow"" -> ""2860__transferFrom"";
""2860__createTransaction"" -> ""2860__resolveMediator"";
""2860__settleTransactionByMediator"" -> ""2860__transferFromEscrow"";
""2860_escalateDisputeToMediator"" -> ""2860__escalateDisputeToMediator"";
""2860__acceptTransaction"" -> ""2860__completeTransaction"";
""2860__confirmTransactionByMediator"" -> ""2860__completeTransaction"";
""2860_confirmTransaction"" -> ""2860__findTransactionForBuyer"";
""2860__settleTransaction"" -> ""2860__cleanupTransaction"";
""2860__settleTransaction"" -> ""2860__fetchExpiry"";
""2860_refundTransactionByMediator"" -> ""2860__refundTransactionByMediator"";
""2860__confirmTransaction"" -> ""2860__completeTransaction"";
""2860_disputeTransaction"" -> ""2860__disputeTransaction"";
""2860__revokeTransaction"" -> ""2860__transferFromEscrow"";
""2860_transfer"" -> ""2860_transfer"";
""2860_confirmTransactionByMediator"" -> ""2860__confirmTransactionByMediator"";
""2860_provideTransactionFeedback"" -> ""2860__findTransactionForBuyer"";
""2860_createTransaction"" -> ""2860__createTransaction"";
""2860__refundTransactionByMediator"" -> ""2860__completeTransaction"";
""2860_acceptTransaction"" -> ""2860__acceptTransaction"";
""2860__acceptTransaction"" -> ""2860__updateTransactionState"";
""2860__refundTransactionAfterExpiry"" -> ""2860__fetchExpiry"";
""2860__confirmTransactionAfterExpiry"" -> ""2860__fetchExpiry"";
""2860_settleTransaction"" -> ""2860__findTransactionForParty"";
""2860__findTransactionForSeller"" -> ""2860__findTransaction"";
""2860_acceptTransaction"" -> ""2860__findTransactionForSeller"";
""2860_disputeTransaction"" -> ""2860__findTransactionForBuyer"";
""2860__confirmTransaction"" -> ""2860__afterExpiry"";
""2860_settleTransactionByMediator"" -> ""2860__settleTransactionByMediator"";
""2860_refundTransactionByMediator"" -> ""2860__findTransactionForMediator"";
""2860__completeTransaction"" -> ""2860__cleanupTransaction"";
""2860_confirmTransactionByMediator"" -> ""2860__findTransactionForMediator"";
""2860_refundTransactionAfterExpiry"" -> ""2860__findTransactionForBuyer"";
""2860_escalateDisputeToMediator"" -> ""2860__findTransactionForSeller"";
""2860__settleTransaction"" -> ""2860__transferFromEscrow"";
""2860__confirmTransactionAfterExpiry"" -> ""2860__afterExpiry"";
""2860_confirmTransactionAfterExpiry"" -> ""2860__findTransactionForSeller"";
""2860__disputeTransaction"" -> ""2860__afterExpiry"";
""2860_provideTransactionFeedback"" -> ""2860__provideTransactionFeedback"";
""2860_confirmTransactionAfterExpiry"" -> ""2860__confirmTransactionAfterExpiry"";
""2860_revokeTransaction"" -> ""2860__findTransactionForBuyer"";
""2860__refundTransactionAfterExpiry"" -> ""2860__afterExpiry"";
""2860__revokeTransaction"" -> ""2860__cleanupTransaction"";
""2860__findTransactionForParty"" -> ""2860__findTransaction"";
""2860__refundTransaction"" -> ""2860__fetchExpiry"";
""2860_settleTransactionByMediator"" -> ""2860__findTransactionForMediator"";
""2860__refundTransactionAfterExpiry"" -> ""2860__completeTransaction"";
""2860__findTransactionForBuyer"" -> ""2860__findTransaction"";
""2860__confirmTransactionAfterExpiry"" -> ""2860__completeTransaction"";
""2860_confirmTransaction"" -> ""2860__confirmTransaction"";
""2860__refundTransaction"" -> ""2860__afterExpiry"";
""2860_refundTransaction"" -> ""2860__findTransactionForSeller"";
""2860__refundTransaction"" -> ""2860__completeTransaction"";
""2860__completeTransaction"" -> ""2860__transferFromEscrow"";
""2860_refundTransactionAfterExpiry"" -> ""2860__refundTransactionAfterExpiry"";
""2860_refundTransaction"" -> ""2860__refundTransaction"";
""2860_revokeTransaction"" -> ""2860__revokeTransaction"";
""2860__settleTransaction"" -> ""2860__afterExpiry"";
""2860__settleTransactionByMediator"" -> ""2860__cleanupTransaction"";
""2860__completeTransaction"" -> ""2860__fetchMediatorFee"";
""2860__createTransaction"" -> ""2860__resolveOwner"";
""2860__escalateDisputeToMediator"" -> ""2860__updateTransactionState"";
""2860_transferFrom"" -> ""2860_transferFrom"";
""2860__confirmTransaction"" -> ""2860__fetchExpiry"";
""2860_settleTransaction"" -> ""2860__settleTransaction"";
""2860__findTransactionForMediator"" -> ""2860__findTransaction"";
""2860__createTransaction"" -> ""2860__transferFrom"";
""2860__disputeTransaction"" -> ""2860__fetchExpiry"";
""2860__disputeTransaction"" -> ""2860__updateTransactionState"";
}
"
0x3364fb62274ad4659bc5162a9ba4b84c73784f58.sol,CappedToken,contract CappedToken is MintableToken { uint256 public cap; function CappedToken(uint256 _cap) public { require(_cap > 0); cap = _cap; },0,"subgraph cluster_696_CappedToken {
label=""CappedToken"";
""696_mint"" [label=""mint""];
""696_CappedToken"" [label=""CappedToken""];
""696_mint"" -> ""696_onlyOwner"";
""696_mint"" -> ""696_canMint"";
""696_mint"" -> ""696_mint"";
}
"
0x5cb99e1919e7ca8d48bce2cde4eb8e0ac94fa546.sol,RYCToken,"contract RYCToken is StandardBurnableToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; address public owner; string public website = ; uint256 public constant INITIAL_SUPPLY = 5000000000 * (10 ** uint256(decimals)); uint256 public constant CROWDSALE_ALLOWANCE = 4000000000 * (10 ** uint256(decimals)); uint256 public constant ADMIN_ALLOWANCE = 1000000000 * (10 ** uint256(decimals)); uint256 public crowdSaleAllowance; uint256 public adminAllowance; address public crowdSaleAddr; address public adminAddr; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); modifier validDestination(address _to) { require(_to != address(0x0)); require(_to != address(this)); require(_to != owner); _; }",0,"subgraph cluster_919_RYCToken {
label=""RYCToken"";
""919_burn"" [label=""burn""];
""919_constructor"" [label=""constructor""];
""919_transferOwnership"" [label=""transferOwnership""];
""919_burnFromAdmin"" [label=""burnFromAdmin""];
""919_changeWebsite"" [label=""changeWebsite""];
""919_transfer"" [label=""transfer""];
""919_setCrowdsale"" [label=""setCrowdsale""];
""919_changeWebsite"" -> ""919_onlyOwner"";
""919_burnFromAdmin"" -> ""919_onlyOwner"";
""919_setCrowdsale"" -> ""919_onlyOwner"";
""919_burnFromAdmin"" -> ""919__burn"";
""919_burn"" -> ""919__burn"";
""919_transfer"" -> ""919_transfer"";
""919_constructor"" -> ""919_approve"";
""919_transfer"" -> ""919_validDestination"";
""919_transferOwnership"" -> ""919_onlyOwner"";
""919_setCrowdsale"" -> ""919_approve"";
}
"
0xa20f317e3b6fe80ff76ee908860ecdb3edea4893.sol,TwelveHourFastTrain,contract TwelveHourFastTrain { address public owner; address public twelveHourTokenAddress; TwelveHourTokenInterface public TwelveHourToken; uint256 constant private THT_TOKEN_OWNERS = 10; address constant private PROMO = 0xC63eA85CC823c440319013d4B30E19b66466642d; uint constant public PROMO_PERCENT = 1; uint constant public MULTIPLIER = 120; uint constant public MAX_DEPOSIT = 1 ether; uint constant public MIN_DEPOSIT = 0.05 ether; uint256 constant public VERIFY_REFERRAL_PRICE = 0.01 ether; uint256 constant public REFERRAL = 3; uint constant public LAST_DEPOSIT_PERCENT = 10; LastDeposit public last; mapping(address => bool) public referrals; struct Deposit { address depositor; uint128 deposit; uint128 expect; },0,"subgraph cluster_686_TwelveHourFastTrain {
label=""TwelveHourFastTrain"";
""686_calEthSendToTHT"" [label=""calEthSendToTHT""];
""686_getDeposit"" [label=""getDeposit""];
""686_exitTHT"" [label=""exitTHT""];
""686_fallback"" [label=""fallback""];
""686_setTwelveHourToken"" [label=""setTwelveHourToken""];
""686_getDepositByAddress"" [label=""getDepositByAddress""];
""686_invest"" [label=""invest""];
""686_buyTHT"" [label=""buyTHT""];
""686_totalEthereumBalance"" [label=""totalEthereumBalance""];
""686_verifyReferrals"" [label=""verifyReferrals""];
""686_sendProfitTHT"" [label=""sendProfitTHT""];
""686_constructor"" [label=""constructor""];
""686_getData"" [label=""getData""];
""686_pay"" [label=""pay""];
""686_sendProfitTHT"" -> ""686_calEthSendToTHT"";
""686_setTwelveHourToken"" -> ""686_onlyOwner"";
""686_sendProfitTHT"" -> ""686_exitTHT"";
""686_verifyReferrals"" -> ""686_disableContract"";
""686_sendProfitTHT"" -> ""686_buyTHT"";
""686_invest"" -> ""686_disableContract"";
""686_fallback"" -> ""686_invest"";
""686_invest"" -> ""686_pay"";
""686_invest"" -> ""686_sendProfitTHT"";
}
"
0xdfc22ea50ec87f2a0041f8d6aef347a98879e870.sol,AffiliateManager,"contract AffiliateManager is Pausable { using SafeMath for uint256; AffiliateTreeStore public affiliateTree; MavinToken public token; uint256 public endTime; uint256 public cap; address public vault; uint256 public mvnpereth; uint256 public weiRaised; uint256 public minAmountWei; address creator; function AffiliateManager( address _token, address _treestore ) public { creator = msg.sender; token = MavinToken(_token); endTime = 1536969600; vault = 0xD0b40D3bfd8DFa6ecC0b357555039C3ee1C11202; mvnpereth = 100; minAmountWei = 0.01 ether; cap = 32000 ether; affiliateTree = AffiliateTreeStore(_treestore); }",0,"subgraph cluster_1977_AffiliateManager {
label=""AffiliateManager"";
""1977_finalizeCrowdsale"" [label=""finalizeCrowdsale""];
""1977_updateMinAmountWei"" [label=""updateMinAmountWei""];
""1977_balanceOf"" [label=""balanceOf""];
""1977_buyTokens"" [label=""buyTokens""];
""1977_initAffiliate"" [label=""initAffiliate""];
""1977_joinManual"" [label=""joinManual""];
""1977_fallback"" [label=""fallback""];
""1977_validPurchase"" [label=""validPurchase""];
""1977_updateMVNRate"" [label=""updateMVNRate""];
""1977_join"" [label=""join""];
""1977_AffiliateManager"" [label=""AffiliateManager""];
""1977_presaleMint"" [label=""presaleMint""];
""1977_join"" -> ""1977_buyTokens"";
""1977_joinManual"" -> ""1977_whenNotPaused"";
""1977_presaleMint"" -> ""1977_onlyOwner"";
""1977_updateMinAmountWei"" -> ""1977_onlyOwner"";
""1977_join"" -> ""1977_onlyDiffAdr"";
""1977_finalizeCrowdsale"" -> ""1977_onlyOwner"";
""1977_updateMVNRate"" -> ""1977_onlyOwner"";
""1977_join"" -> ""1977_whenNotPaused"";
""1977_joinManual"" -> ""1977_onlyDiffAdr"";
""1977_initAffiliate"" -> ""1977_onlyOwner"";
""1977_finalizeCrowdsale"" -> ""1977_pause"";
""1977_join"" -> ""1977_validPurchase"";
""1977_joinManual"" -> ""1977_join"";
}
"
0x409e1820aba80fd6bc0f7573528f56cd3ccbfafb.sol,Linamyd,contract Linamyd { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1313_Linamyd {
label=""Linamyd"";
""1313_fallback"" [label=""fallback""];
""1313_exit"" [label=""exit""];
""1313_transfer"" [label=""transfer""];
""1313_buyPrice"" [label=""buyPrice""];
""1313_withdraw"" [label=""withdraw""];
""1313_reinvest"" [label=""reinvest""];
""1313_Linamyd"" [label=""Linamyd""];
""1313_totalSupply"" [label=""totalSupply""];
""1313_setSymbol"" [label=""setSymbol""];
""1313_setStakingRequirement"" [label=""setStakingRequirement""];
""1313_sell"" [label=""sell""];
""1313_buy"" [label=""buy""];
""1313_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1313_setName"" [label=""setName""];
""1313_dividendsOf"" [label=""dividendsOf""];
""1313_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1313_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1313_setAdministrator"" [label=""setAdministrator""];
""1313_sellPrice"" [label=""sellPrice""];
""1313_disableInitialStage"" [label=""disableInitialStage""];
""1313_myDividends"" [label=""myDividends""];
""1313_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1313_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1313_myTokens"" [label=""myTokens""];
""1313_balanceOf"" [label=""balanceOf""];
""1313_purchaseTokens"" [label=""purchaseTokens""];
""1313_sqrt"" [label=""sqrt""];
""1313_buy"" -> ""1313_purchaseTokens"";
""1313_sell"" -> ""1313_onlyBagholders"";
""1313_myDividends"" -> ""1313_dividendsOf"";
""1313_setName"" -> ""1313_onlyAdministrator"";
""1313_setAdministrator"" -> ""1313_onlyAdministrator"";
""1313_myTokens"" -> ""1313_balanceOf"";
""1313_sellPrice"" -> ""1313_tokensToEthereum_"";
""1313_buyPrice"" -> ""1313_tokensToEthereum_"";
""1313_withdraw"" -> ""1313_myDividends"";
""1313_withdraw"" -> ""1313_onlyStronghands"";
""1313_reinvest"" -> ""1313_onlyStronghands"";
""1313_exit"" -> ""1313_sell"";
""1313_reinvest"" -> ""1313_myDividends"";
""1313_fallback"" -> ""1313_purchaseTokens"";
""1313_purchaseTokens"" -> ""1313_antiEarlyWhale"";
""1313_calculateEthereumReceived"" -> ""1313_tokensToEthereum_"";
""1313_transfer"" -> ""1313_myDividends"";
""1313_calculateTokensReceived"" -> ""1313_ethereumToTokens_"";
""1313_exit"" -> ""1313_withdraw"";
""1313_sell"" -> ""1313_tokensToEthereum_"";
""1313_transfer"" -> ""1313_onlyBagholders"";
""1313_purchaseTokens"" -> ""1313_ethereumToTokens_"";
""1313_setStakingRequirement"" -> ""1313_onlyAdministrator"";
""1313_transfer"" -> ""1313_tokensToEthereum_"";
""1313_disableInitialStage"" -> ""1313_onlyAdministrator"";
""1313_setSymbol"" -> ""1313_onlyAdministrator"";
""1313_reinvest"" -> ""1313_purchaseTokens"";
""1313_transfer"" -> ""1313_withdraw"";
""1313_ethereumToTokens_"" -> ""1313_sqrt"";
}
"
0x1d7b14967d103df9dbc16d408616da18c4ae83eb.sol,Ellobitz,"contract Ellobitz is TokenERC20, Owned, Whitelisted { uint256 public mineCount; uint256 public minMineSize; uint256 public maxMineSize; uint256 public chipSize; uint256 public firstChipBonus; uint public chipSpeed; uint256 internal activeMine; uint256 internal mineSize; bool internal firstChip; mapping(address => uint) public lastChipTime; event MineFound(address indexed chipper, uint256 activeMine); event MineChipped(address indexed chipper, uint256 indexed activeMine, uint256 amount); event MineExausted(address indexed chipper, uint256 activeMine); modifier validMineParameters ( uint256 _mineCount, uint256 _minMineSize, uint256 _maxMineSize, uint256 _chipSize, uint256 _firstChipBonus, uint _chipSpeed ) { require(_minMineSize <= _maxMineSize, ); require(_chipSize + _firstChipBonus <= _minMineSize, ); _; }",0,"subgraph cluster_833_Ellobitz {
label=""Ellobitz"";
""833_setParameters"" [label=""setParameters""];
""833_mintToken"" [label=""mintToken""];
""833_constructor"" [label=""constructor""];
""833__resetMine"" [label=""_resetMine""];
""833_chip"" [label=""chip""];
""833_random"" [label=""random""];
""833_chip"" -> ""833__resetMine"";
""833_constructor"" -> ""833_constructor"";
""833_setParameters"" -> ""833_validMineParameters"";
""833__resetMine"" -> ""833_random"";
""833_chip"" -> ""833_mintToken"";
""833_chip"" -> ""833_whitelisted"";
""833_setParameters"" -> ""833_onlyOwner"";
""833_constructor"" -> ""833_validMineParameters"";
}
"
0xcf5dfe6e2fa63af41e9c01df75e79d3fda69b5f3.sol,MUSystem,contract MUSystem { using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint public constant decimals = 15; uint public totalSupply; address private creatorOwner; address private userAddr; mapping (address => uint) balances; struct UserWhoBuy { uint UserAmt; uint UserTokenObtain; uint UserBuyDate; uint UserBuyFirstDate; uint UserBuyTokenPackNum; uint UserFirstAmt; uint UserContinued; uint UserTotalAmtDepositCurrentPack; },0,"subgraph cluster_2243_MUSystem {
label=""MUSystem"";
""2243_aboutCurrentPack"" [label=""aboutCurrentPack""];
""2243_withdraw"" [label=""withdraw""];
""2243_mint"" [label=""mint""];
""2243_addUserWhoBuy"" [label=""addUserWhoBuy""];
""2243_transfer"" [label=""transfer""];
""2243_packSettings"" [label=""packSettings""];
""2243_balanceOf"" [label=""balanceOf""];
""2243_transferFee"" [label=""transferFee""];
""2243_deposit"" [label=""deposit""];
""2243_addUserWhoSell"" [label=""addUserWhoSell""];
""2243_nextPack"" [label=""nextPack""];
""2243_constructor"" [label=""constructor""];
""2243_restart"" [label=""restart""];
""2243_nextPack"" -> ""2243_mint"";
""2243_deposit"" -> ""2243_transfer"";
""2243_nextPack"" -> ""2243_packSettings"";
""2243_nextPack"" -> ""2243_transferFee"";
""2243_constructor"" -> ""2243_mint"";
""2243_deposit"" -> ""2243_nextPack"";
""2243_withdraw"" -> ""2243_addUserWhoSell"";
""2243_constructor"" -> ""2243_packSettings"";
""2243_restart"" -> ""2243_nextPack"";
""2243_withdraw"" -> ""2243_transfer"";
""2243_withdraw"" -> ""2243_restart"";
""2243_deposit"" -> ""2243_restart"";
""2243_deposit"" -> ""2243_addUserWhoBuy"";
}
"
0xd342c20428de073c6da0cd3b249b16b3f2ae80fe.sol,DildoToken,"contract DildoToken { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply; uint256 public supplyMultiplier = 6900000000; uint256 public buyPrice = 69000000; address public creator; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event FundTransfer(address backer, uint amount, bool isContribution); function DildoToken() public { totalSupply = supplyMultiplier * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; creator = msg.sender; }",0,"subgraph cluster_207_DildoToken {
label=""DildoToken"";
""207_fallback"" [label=""fallback""];
""207_DildoToken"" [label=""DildoToken""];
""207_transfer"" [label=""transfer""];
""207__transfer"" [label=""_transfer""];
""207_transfer"" -> ""207__transfer"";
}
"
0xb619e84adddd3e336c5dda1e1b40719c846d9030.sol,WorldByEth,contract WorldByEth { using SafeMath for *; using NameFilter for string; string constant public name = ; string constant public symbol = ; uint256 public rID_; uint256 public pID_; uint256 public com_; address public comaddr = 0x9ca974f2c49d68bd5958978e81151e6831290f57; mapping(uint256 => uint256) public pot_; mapping(uint256 => mapping(uint256 => Ctry)) public ctry_; uint public ctynum = 0; uint public gap = 1 hours; uint public timeleft; address public lastplayer = 0x9ca974f2c49d68bd5958978e81151e6831290f57; address public lastwinner; uint[] public validplayers; struct Ctry { uint256 id; uint256 price; bytes32 name; bytes32 mem; address owner; },0,"subgraph cluster_458_WorldByEth {
label=""WorldByEth"";
""458_withcom"" [label=""withcom""];
""458_getvalid"" [label=""getvalid""];
""458_constructor"" [label=""constructor""];
""458_buy"" [label=""buy""];
""458_fallback"" [label=""fallback""];
""458_update"" [label=""update""];
""458_buy"" -> ""458_update"";
""458_buy"" -> ""458_isHuman"";
}
"
0x26eb39228eb4bb98c84ad821bb51464121b2276d.sol,NAUTokenCoin,contract NAUTokenCoin is Ownable { string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 4; uint public constant INITIAL_SUPPLY = 12850000000000; uint public totalSupply = 0; mapping (address => uint) balances; mapping (address => mapping(address => uint)) allowed; function NAUTokenCoin () public { totalSupply = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; },0,"subgraph cluster_274_NAUTokenCoin {
label=""NAUTokenCoin"";
""274_balanceOf"" [label=""balanceOf""];
""274_transfer"" [label=""transfer""];
""274_allowance"" [label=""allowance""];
""274_NAUTokenCoin"" [label=""NAUTokenCoin""];
""274_transferFrom"" [label=""transferFrom""];
""274_approve"" [label=""approve""];
}
"
0x1f9e3a06574cb24a0c447b07a0a2c84988a16a10.sol,ldoh,"contract ldoh is EthereumSmartContract { event onAffiliateBonus( address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime ); event onClaimTokens( address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime ); event onHodlTokens( address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime ); event onAddContractAddress( address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime ); event onCashbackCode( address indexed hodler, address cashbackcode ); event onUnlockedTokens( uint256 returned ); event onReturnAll( uint256 returned ); address internal DefaultToken; struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; }",0,"subgraph cluster_2324_ldoh {
label=""ldoh"";
""2324_UpdateUserData1"" [label=""UpdateUserData1""];
""2324_ClaimTokens"" [label=""ClaimTokens""];
""2324_GetTokenReserve"" [label=""GetTokenReserve""];
""2324_WithdrawEth"" [label=""WithdrawEth""];
""2324_SendUnlockedTokens"" [label=""SendUnlockedTokens""];
""2324_add"" [label=""add""];
""2324_HodlTokens"" [label=""HodlTokens""];
""2324_UnlockToken"" [label=""UnlockToken""];
""2324_Send0ETH_Setting"" [label=""Send0ETH_Setting""];
""2324_AddSpeedDistribution"" [label=""AddSpeedDistribution""];
""2324_GetUserSafesLength"" [label=""GetUserSafesLength""];
""2324_HodlTokens3"" [label=""HodlTokens3""];
""2324_ReturnAllTokens"" [label=""ReturnAllTokens""];
""2324_Send0ETH_Withdraw"" [label=""Send0ETH_Withdraw""];
""2324_AddMaxContribution"" [label=""AddMaxContribution""];
""2324_GetSafe"" [label=""GetSafe""];
""2324_GetContractBalance"" [label=""GetContractBalance""];
""2324_constructor"" [label=""constructor""];
""2324_div"" [label=""div""];
""2324_sub"" [label=""sub""];
""2324_Send0ETH_Deposit"" [label=""Send0ETH_Deposit""];
""2324_GetHodlTokensBalance"" [label=""GetHodlTokensBalance""];
""2324_UpdateUserData2"" [label=""UpdateUserData2""];
""2324_HodlTokens2"" [label=""HodlTokens2""];
""2324_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""2324_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""2324_CashbackCode"" [label=""CashbackCode""];
""2324_PayToken"" [label=""PayToken""];
""2324_EthereumNodesFees"" [label=""EthereumNodesFees""];
""2324_AddContractAddress"" [label=""AddContractAddress""];
""2324_mul"" [label=""mul""];
""2324_fallback"" [label=""fallback""];
""2324_SendUnlockedTokens"" -> ""2324_restricted"";
""2324_fallback"" -> ""2324_add"";
""2324_ReturnAllTokens"" -> ""2324_div"";
""2324_SendUnlockedTokens"" -> ""2324_UpdateUserData1"";
""2324_UpdateUserData1"" -> ""2324_UpdateUserData2"";
""2324_HodlTokens2"" -> ""2324_div"";
""2324_HodlTokens3"" -> ""2324_add"";
""2324_UpdateUserData1"" -> ""2324_div"";
""2324_Send0ETH_Setting"" -> ""2324_restricted"";
""2324_UnlockToken"" -> ""2324_UpdateUserData1"";
""2324_UpdateUserData1"" -> ""2324_mul"";
""2324_HodlTokens2"" -> ""2324_add"";
""2324_UpdateUserData2"" -> ""2324_add"";
""2324_AddMaxContribution"" -> ""2324_restricted"";
""2324_UpdateUserData2"" -> ""2324_PayToken"";
""2324_HodlTokens2"" -> ""2324_sub"";
""2324_SendUnlockedTokens"" -> ""2324_WithdrawAffiliate"";
""2324_ReturnAllTokens"" -> ""2324_PayToken"";
""2324_UnlockToken"" -> ""2324_sub"";
""2324_ReturnAllTokens"" -> ""2324_sub"";
""2324_AddSpeedDistribution"" -> ""2324_div"";
""2324_ReturnAllTokens"" -> ""2324_restricted"";
""2324_UnlockToken"" -> ""2324_div"";
""2324_AddContractAddress"" -> ""2324_restricted"";
""2324_PayToken"" -> ""2324_add"";
""2324_UnlockToken"" -> ""2324_mul"";
""2324_WithdrawAffiliate"" -> ""2324_sub"";
""2324_ClaimTokens"" -> ""2324_UnlockToken"";
""2324_ReturnAllTokens"" -> ""2324_mul"";
""2324_HodlTokens2"" -> ""2324_HodlTokens3"";
""2324_UpdateUserData2"" -> ""2324_div"";
""2324_Send0ETH_Withdraw"" -> ""2324_restricted"";
""2324_HodlTokens2"" -> ""2324_mul"";
""2324_UpdateUserData2"" -> ""2324_sub"";
""2324_WithdrawAffiliate"" -> ""2324_add"";
""2324_AddSpeedDistribution"" -> ""2324_restricted"";
""2324_UpdateUserData1"" -> ""2324_sub"";
""2324_EthereumNodesFees"" -> ""2324_sub"";
""2324_HodlTokens"" -> ""2324_HodlTokens2"";
""2324_EthereumNodesFees"" -> ""2324_restricted"";
""2324_Send0ETH_Deposit"" -> ""2324_add"";
""2324_UpdateUserData1"" -> ""2324_add"";
""2324_WithdrawEth"" -> ""2324_restricted"";
""2324_AddSpeedDistribution"" -> ""2324_mul"";
""2324_Send0ETH_Deposit"" -> ""2324_restricted"";
""2324_UnlockToken"" -> ""2324_PayToken"";
""2324_fallback"" -> ""2324_sub"";
""2324_UpdateUserData2"" -> ""2324_mul"";
}
"
0xed0577d074be9f605f0967fe6a8b3174d92e5e36.sol,DexBrokerage,"contract DexBrokerage is Ownable { using SafeMath for uint256; address public feeAccount; uint256 public makerFee; uint256 public takerFee; uint256 public inactivityReleasePeriod; mapping (address => bool) public approvedCurrencyTokens; mapping (address => uint256) public invalidOrder; mapping (address => mapping (address => uint256)) public tokens; mapping (address => bool) public admins; mapping (address => uint256) public lastActiveTransaction; mapping (bytes32 => uint256) public orderFills; mapping (bytes32 => bool) public withdrawn; event Trade(address tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, address maker, address taker); event Deposit(address token, address user, uint256 amount, uint256 balance); event Withdraw(address token, address user, uint256 amount, uint256 balance); event MakerFeeUpdated(uint256 oldFee, uint256 newFee); event TakerFeeUpdated(uint256 oldFee, uint256 newFee); modifier onlyAdmin { require(msg.sender == owner || admins[msg.sender]); _; }",0,"subgraph cluster_2113_DexBrokerage {
label=""DexBrokerage"";
""2113_trade"" [label=""trade""];
""2113_withdraw"" [label=""withdraw""];
""2113_invalidateOrdersBefore"" [label=""invalidateOrdersBefore""];
""2113_receiveTokenDeposit"" [label=""receiveTokenDeposit""];
""2113_setMakerFee"" [label=""setMakerFee""];
""2113_setAdmin"" [label=""setAdmin""];
""2113_approveCurrencyTokenAddress"" [label=""approveCurrencyTokenAddress""];
""2113_setInactivityReleasePeriod"" [label=""setInactivityReleasePeriod""];
""2113_balanceOf"" [label=""balanceOf""];
""2113_constructor"" [label=""constructor""];
""2113_setTakerFee"" [label=""setTakerFee""];
""2113_depositToken"" [label=""depositToken""];
""2113_adminWithdraw"" [label=""adminWithdraw""];
""2113_deposit"" [label=""deposit""];
""2113_setTakerFee"" -> ""2113_onlyAdmin"";
""2113_setAdmin"" -> ""2113_onlyOwner"";
""2113_adminWithdraw"" -> ""2113_onlyAdmin"";
""2113_invalidateOrdersBefore"" -> ""2113_onlyAdmin"";
""2113_setInactivityReleasePeriod"" -> ""2113_onlyAdmin"";
""2113_approveCurrencyTokenAddress"" -> ""2113_onlyAdmin"";
""2113_setMakerFee"" -> ""2113_onlyAdmin"";
""2113_depositToken"" -> ""2113_receiveTokenDeposit"";
""2113_trade"" -> ""2113_onlyAdmin"";
}
"
0x41e50bb0dfd21cd201b16a3d2f945920675a4408.sol,ERC20Impl,contract ERC20Impl is CustodianUpgradeable { struct PendingPrint { address receiver; uint256 value; },0,"subgraph cluster_1550_ERC20Impl {
label=""ERC20Impl"";
""1550_allowance"" [label=""allowance""];
""1550_enableSweep"" [label=""enableSweep""];
""1550_ERC20Impl"" [label=""ERC20Impl""];
""1550_requestPrint"" [label=""requestPrint""];
""1550_approveWithSender"" [label=""approveWithSender""];
""1550_confirmPrint"" [label=""confirmPrint""];
""1550_totalSupply"" [label=""totalSupply""];
""1550_burn"" [label=""burn""];
""1550_transferFromWithSender"" [label=""transferFromWithSender""];
""1550_decreaseApprovalWithSender"" [label=""decreaseApprovalWithSender""];
""1550_transferWithSender"" [label=""transferWithSender""];
""1550_balanceOf"" [label=""balanceOf""];
""1550_replaySweep"" [label=""replaySweep""];
""1550_increaseApprovalWithSender"" [label=""increaseApprovalWithSender""];
""1550_batchTransfer"" [label=""batchTransfer""];
""1550_transferWithSender"" -> ""1550_onlyProxy"";
""1550_enableSweep"" -> ""1550_onlySweeper"";
""1550_increaseApprovalWithSender"" -> ""1550_onlyProxy"";
""1550_ERC20Impl"" -> ""1550_CustodianUpgradeable"";
""1550_requestPrint"" -> ""1550_generateLockId"";
""1550_confirmPrint"" -> ""1550_onlyCustodian"";
""1550_approveWithSender"" -> ""1550_onlyProxy"";
""1550_decreaseApprovalWithSender"" -> ""1550_onlyProxy"";
""1550_replaySweep"" -> ""1550_onlySweeper"";
""1550_transferFromWithSender"" -> ""1550_onlyProxy"";
}
"
0x26b5bf54e03bb6d42c27ef4364f72a2bf1eff3d2.sol,CryptoBeauty,"contract CryptoBeauty is AccessControl, ERC721 { event Creation(uint256 tokenId, string name, address owner); event Purchase(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address owner, uint256 charityId); event PriceChange(uint256 tokenId, uint256 price); event Charity(uint256 charityId, address charity); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.005 ether; uint256 private increaseLimit1 = 0.5 ether; uint256 private increaseLimit2 = 50.0 ether; uint256 private increaseLimit3 = 100.0 ether; bool charityEnabled; struct Beauty { string name; uint256 price; uint256 maxPrice; }",0,"subgraph cluster_1100_CryptoBeauty {
label=""CryptoBeauty"";
""1100_balanceOf"" [label=""balanceOf""];
""1100_implementsERC721"" [label=""implementsERC721""];
""1100_CryptoBeauty"" [label=""CryptoBeauty""];
""1100_purchase"" [label=""purchase""];
""1100_newBeauty"" [label=""newBeauty""];
""1100_disableCharity"" [label=""disableCharity""];
""1100_ownerOf"" [label=""ownerOf""];
""1100_transferFrom"" [label=""transferFrom""];
""1100_withdrawAll"" [label=""withdrawAll""];
""1100_deleteCharity"" [label=""deleteCharity""];
""1100_name"" [label=""name""];
""1100_symbol"" [label=""symbol""];
""1100_totalSupply"" [label=""totalSupply""];
""1100_addCharity"" [label=""addCharity""];
""1100_getBeauty"" [label=""getBeauty""];
""1100_changePrice"" [label=""changePrice""];
""1100_priceOfBeauty"" [label=""priceOfBeauty""];
""1100_getCharity"" [label=""getCharity""];
""1100_tokensOfOwner"" [label=""tokensOfOwner""];
""1100_enableCharity"" [label=""enableCharity""];
""1100_createBeauty"" [label=""createBeauty""];
""1100_transfer"" [label=""transfer""];
""1100__transfer"" [label=""_transfer""];
""1100_approve"" [label=""approve""];
""1100_withdrawAmount"" [label=""withdrawAmount""];
""1100_purchase"" -> ""1100__transfer"";
""1100_createBeauty"" -> ""1100__transfer"";
""1100_transfer"" -> ""1100__transfer"";
""1100_transferFrom"" -> ""1100__transfer"";
""1100_withdrawAll"" -> ""1100_onlyAdmins"";
""1100_tokensOfOwner"" -> ""1100_balanceOf"";
""1100_newBeauty"" -> ""1100_createBeauty"";
""1100_enableCharity"" -> ""1100_onlyOwner"";
""1100_addCharity"" -> ""1100_onlyAdmins"";
""1100_disableCharity"" -> ""1100_onlyOwner"";
""1100_withdrawAmount"" -> ""1100_onlyAdmins"";
""1100_tokensOfOwner"" -> ""1100_totalSupply"";
""1100_newBeauty"" -> ""1100_onlyAdmins"";
""1100_createBeauty"" -> ""1100_onlyAdmins"";
""1100_deleteCharity"" -> ""1100_onlyAdmins"";
}
"
0x72b32b45cd1f59d3d6d2fbe9241055525497004a.sol,DailyDivs,contract DailyDivs { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_40_AcceptsDailyDivs {
label=""AcceptsDailyDivs"";
""40_AcceptsDailyDivs"" [label=""AcceptsDailyDivs""];
""40_tokenFallback"" [label=""tokenFallback""];
}
"
0x74d13225bc488397212e63dc38b497f6aa7a7a69.sol,CoinStacks,"contract CoinStacks { address private admin; uint256 private constant BOTTOM_LAYER_BET = 0.005 ether; uint16 private constant INITIAL_UNLOCKED_COLUMNS = 10; uint256 private maintenanceFeePercent; uint private NUM_COINS_TO_HIT_JACKPOT = 30; uint private MIN_AVG_HEIGHT = 5; uint256 private constant JACKPOT_PRIZE = 2 * BOTTOM_LAYER_BET; mapping(uint32 => address) public coordinatesToAddresses; uint32[] public coinCoordinates; uint256 public reserveForJackpot; mapping(address => uint256) public balances; event coinPlacedEvent ( uint32 _coord, address indexed _coinOwner ); function CoinStacks() public { admin = msg.sender; maintenanceFeePercent = 1; reserveForJackpot = 0; coordinatesToAddresses[uint32(0)] = admin; coinCoordinates.push(uint32(0)); coinPlacedEvent(uint32(0),admin); }",0,"subgraph cluster_393_CoinStacks {
label=""CoinStacks"";
""393_placeCoin"" [label=""placeCoin""];
""393_getAllCoins"" [label=""getAllCoins""];
""393_setFeePercent"" [label=""setFeePercent""];
""393_withdrawBalance"" [label=""withdrawBalance""];
""393_fallback"" [label=""fallback""];
""393_CoinStacks"" [label=""CoinStacks""];
""393_transferOwnership"" [label=""transferOwnership""];
""393_isThereACoinAtCoordinates"" [label=""isThereACoinAtCoordinates""];
""393_getNumCoins"" [label=""getNumCoins""];
""393_placeCoin"" -> ""393_isThereACoinAtCoordinates"";
}
"
0x0c12caccab54c41b2b9fb5e80546aa1b758fabc4.sol,LTC,contract LTC { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 8; uint public _totalSupply = 30011000000000000000; uint256 public RATE = 1; bool public isMinting = false; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_LTC {
label=""LTC"";
""516_constructor"" [label=""constructor""];
""516_approve"" [label=""approve""];
""516_transfer"" [label=""transfer""];
""516_allowance"" [label=""allowance""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_fallback"" [label=""fallback""];
""516_totalSupply"" [label=""totalSupply""];
""516_transferFrom"" [label=""transferFrom""];
""516_createTokens"" [label=""createTokens""];
""516_burnTokens"" [label=""burnTokens""];
""516_balanceOf"" [label=""balanceOf""];
""516_burnTokens"" -> ""516_onlyOwner"";
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_fallback"" -> ""516_createTokens"";
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
}
"
0x55c20c9c18142926c50e9f0292d636fa35ec5497.sol,FLEX,"contract FLEX is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 20000000000000000; balances[0x2beFc145fC3D038c61e7Ee70fD669E0C8dD8df39] = _totalSupply; emit Transfer(address(0), 0x2beFc145fC3D038c61e7Ee70fD669E0C8dD8df39, _totalSupply); }",0,"subgraph cluster_543_FLEX {
label=""FLEX"";
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_constructor"" [label=""constructor""];
""543_allowance"" [label=""allowance""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x7fdea95f7d95afae2f0e13982d8c32acd6e5a154.sol,Propethy,contract Propethy { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint public _totalSupply = 100000000000000; uint256 public RATE = 1; bool public isMinting = true; bool public isExchangeListed = true; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_541_Propethy {
label=""Propethy"";
""541_allowance"" [label=""allowance""];
""541_burnTokens"" [label=""burnTokens""];
""541_endCrowdsale"" [label=""endCrowdsale""];
""541_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""541_transferFrom"" [label=""transferFrom""];
""541_fallback"" [label=""fallback""];
""541_approve"" [label=""approve""];
""541_transfer"" [label=""transfer""];
""541_balanceOf"" [label=""balanceOf""];
""541_constructor"" [label=""constructor""];
""541_createTokens"" [label=""createTokens""];
""541_totalSupply"" [label=""totalSupply""];
""541_burnTokens"" -> ""541_onlyOwner"";
""541_fallback"" -> ""541_createTokens"";
""541_changeCrowdsaleRate"" -> ""541_onlyOwner"";
""541_endCrowdsale"" -> ""541_onlyOwner"";
}
"
0x1e403f8ce554f2ffa6e5560d3db112dfc0ed24d2.sol,Controlled,contract Controlled is Ownable{ constructor() public { setExclude(msg.sender); },0,"subgraph cluster_885_Controlled {
label=""Controlled"";
""885_addLock"" [label=""addLock""];
""885_removeLock"" [label=""removeLock""];
""885_setExclude"" [label=""setExclude""];
""885_enableLockFlag"" [label=""enableLockFlag""];
""885_constructor"" [label=""constructor""];
""885_enableTransfer"" [label=""enableTransfer""];
""885_constructor"" -> ""885_setExclude"";
""885_addLock"" -> ""885_onlyOwner"";
""885_removeLock"" -> ""885_onlyOwner"";
""885_enableTransfer"" -> ""885_onlyOwner"";
""885_setExclude"" -> ""885_onlyOwner"";
""885_enableLockFlag"" -> ""885_onlyOwner"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,SafeMath,"contract SafeMath { function safeMul(uint a, uint b) internal returns (uint) { uint c = a * b; assert(a == 0 || c / a == b); return c; }",0,"subgraph cluster_366_SafeMath {
label=""SafeMath"";
""366_min256"" [label=""min256""];
""366_max256"" [label=""max256""];
""366_safeDiv"" [label=""safeDiv""];
""366_safeSub"" [label=""safeSub""];
""366_max64"" [label=""max64""];
""366_safeAdd"" [label=""safeAdd""];
""366_safeMul"" [label=""safeMul""];
""366_min64"" [label=""min64""];
}
"
0x6ec2e2e2bd43d4deaa883533f80ea61682236073.sol,HACHIKO,"contract HACHIKO is Ownable { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor() public { totalSupply = 10000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",0,"subgraph cluster_400_HACHIKO {
label=""HACHIKO"";
""400_approveAndCall"" [label=""approveAndCall""];
""400_constructor"" [label=""constructor""];
""400_burn"" [label=""burn""];
""400__transfer"" [label=""_transfer""];
""400_transferFrom"" [label=""transferFrom""];
""400_approve"" [label=""approve""];
""400_burnFrom"" [label=""burnFrom""];
""400_transfer"" [label=""transfer""];
""400_approveAndCall"" -> ""400_approve"";
""400_transfer"" -> ""400__transfer"";
""400_transferFrom"" -> ""400__transfer"";
}
"
0x5b6c4eb6e7f90b2ce53176c779c072d95f2535c2.sol,RBACERC223TokenFinalization,"contract RBACERC223TokenFinalization is ERC223Mixin, RBACMixin { event Finalize(); bool public finalized; modifier isFinalized() { require(finalized); _; }",0,"subgraph cluster_1300_RBACERC223TokenFinalization {
label=""RBACERC223TokenFinalization"";
""1300_transfer"" [label=""transfer""];
""1300_decreaseApproval"" [label=""decreaseApproval""];
""1300_increaseApproval"" [label=""increaseApproval""];
""1300_finalize"" [label=""finalize""];
""1300_transferFrom"" [label=""transferFrom""];
""1300_approve"" [label=""approve""];
""1300_decreaseApproval"" -> ""1300_decreaseApproval"";
""1300_increaseApproval"" -> ""1300_increaseApproval"";
""1300_approve"" -> ""1300_approve"";
""1300_finalize"" -> ""1300_notFinalized"";
""1300_decreaseApproval"" -> ""1300_isFinalized"";
""1300_finalize"" -> ""1300_onlyOwner"";
""1300_increaseApproval"" -> ""1300_isFinalized"";
""1300_transferFrom"" -> ""1300_isFinalized"";
""1300_transfer"" -> ""1300_isFinalized"";
""1300_approve"" -> ""1300_isFinalized"";
""1300_transferFrom"" -> ""1300_transferFrom"";
""1300_transfer"" -> ""1300_transfer"";
}
"
0x0381e7c68a576403988336e8c6ad25409f883138.sol,BMGame,contract BMGame is BMEvents { using SafeMath for *; using BMKeysCalcLong for uint256; address public Banker_Address; uint256 private rndExtra_ = 30; uint256 private rndGap_ = 30; uint256 constant private rndInit_ = 24 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 24 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public pID_ = 0; mapping(address => uint256) public pIDxAddr_; mapping(uint256 => BMDatasets.Player) public plyr_; mapping(uint256 => mapping(uint256 => BMDatasets.PlayerRounds)) public plyrRnds_; uint256 public rID_; mapping(uint256 => BMDatasets.Round) public round_; mapping(uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping(uint256 => BMDatasets.TeamFee) public fees_; mapping(uint256 => BMDatasets.PotSplit) public potSplit_; address public owner; constructor() public { owner = msg.sender; fees_[0] = BMDatasets.TeamFee(70); fees_[1] = BMDatasets.TeamFee(55); fees_[2] = BMDatasets.TeamFee(40); fees_[3] = BMDatasets.TeamFee(30); potSplit_[0] = BMDatasets.PotSplit(50); potSplit_[1] = BMDatasets.PotSplit(40); potSplit_[2] = BMDatasets.PotSplit(25); potSplit_[3] = BMDatasets.PotSplit(10); },0,"subgraph cluster_3398_BMGame {
label=""BMGame"";
""3398_activate"" [label=""activate""];
""3398_withdraw"" [label=""withdraw""];
""3398_getTimeLeft"" [label=""getTimeLeft""];
""3398_transferBanker"" [label=""transferBanker""];
""3398_endRound"" [label=""endRound""];
""3398_managePlayer"" [label=""managePlayer""];
""3398_distribute"" [label=""distribute""];
""3398_withdrawEarnings"" [label=""withdrawEarnings""];
""3398_reLoadKey"" [label=""reLoadKey""];
""3398_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""3398_getBuyPrice"" [label=""getBuyPrice""];
""3398_buyKey"" [label=""buyKey""];
""3398_updateMasks"" [label=""updateMasks""];
""3398_updateGenVault"" [label=""updateGenVault""];
""3398_determinePID"" [label=""determinePID""];
""3398_transferOwnership"" [label=""transferOwnership""];
""3398_getPlayerVaults"" [label=""getPlayerVaults""];
""3398_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""3398_airdrop"" [label=""airdrop""];
""3398_calcKeysReceived"" [label=""calcKeysReceived""];
""3398_endTx"" [label=""endTx""];
""3398_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""3398_reLoadCore"" [label=""reLoadCore""];
""3398_updateTimer"" [label=""updateTimer""];
""3398_buyCore"" [label=""buyCore""];
""3398_core"" [label=""core""];
""3398_iWantXKeys"" [label=""iWantXKeys""];
""3398_fallback"" [label=""fallback""];
""3398_constructor"" [label=""constructor""];
""3398_verifyTeam"" [label=""verifyTeam""];
""3398_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""3398_fallback"" -> ""3398_isWithinLimits"";
""3398_reLoadKey"" -> ""3398_isHuman"";
""3398_buyKey"" -> ""3398_isHuman"";
""3398_fallback"" -> ""3398_isActivated"";
""3398_core"" -> ""3398_managePlayer"";
""3398_fallback"" -> ""3398_buyCore"";
""3398_core"" -> ""3398_updateTimer"";
""3398_updateGenVault"" -> ""3398_calcUnMaskedEarnings"";
""3398_distribute"" -> ""3398_updateMasks"";
""3398_reLoadCore"" -> ""3398_withdrawEarnings"";
""3398_buyCore"" -> ""3398_core"";
""3398_buyKey"" -> ""3398_isActivated"";
""3398_getPlayerVaults"" -> ""3398_calcUnMaskedEarnings"";
""3398_buyKey"" -> ""3398_verifyTeam"";
""3398_buyKey"" -> ""3398_determinePID"";
""3398_getPlayerVaults"" -> ""3398_getPlayerVaultsHelper"";
""3398_core"" -> ""3398_airdrop"";
""3398_withdraw"" -> ""3398_endRound"";
""3398_reLoadKey"" -> ""3398_isWithinLimits"";
""3398_reLoadKey"" -> ""3398_isActivated"";
""3398_core"" -> ""3398_distribute"";
""3398_core"" -> ""3398_endTx"";
""3398_withdrawEarnings"" -> ""3398_updateGenVault"";
""3398_withdraw"" -> ""3398_isActivated"";
""3398_buyKey"" -> ""3398_isWithinLimits"";
""3398_fallback"" -> ""3398_determinePID"";
""3398_reLoadKey"" -> ""3398_verifyTeam"";
""3398_buyKey"" -> ""3398_buyCore"";
""3398_managePlayer"" -> ""3398_updateGenVault"";
""3398_buyCore"" -> ""3398_endRound"";
""3398_withdraw"" -> ""3398_withdrawEarnings"";
""3398_getPlayerInfoByAddress"" -> ""3398_calcUnMaskedEarnings"";
""3398_withdraw"" -> ""3398_isHuman"";
""3398_reLoadCore"" -> ""3398_endRound"";
""3398_reLoadCore"" -> ""3398_core"";
""3398_reLoadKey"" -> ""3398_reLoadCore"";
""3398_fallback"" -> ""3398_isHuman"";
}
"
0x26f4fb84b53dff7e148a8196f09bc492e55f2889.sol,Ownable,"contract Ownable { address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() public { owner = msg.sender; }",0,"subgraph cluster_882_Ownable {
label=""Ownable"";
""882_constructor"" [label=""constructor""];
""882_transferOwnership"" [label=""transferOwnership""];
""882_transferOwnership"" -> ""882_onlyOwner"";
}
"
0xd52d09ce4c0118b227bd9496d973ed0bf98f8d5a.sol,Synthetix,"contract Synthetix is ExternStateToken { Synth[] public availableSynths; mapping(bytes4 => Synth) public synths; IFeePool public feePool; ISynthetixEscrow public escrow; ISynthetixEscrow public rewardEscrow; ExchangeRates public exchangeRates; SynthetixState public synthetixState; SupplySchedule public supplySchedule; bool private protectionCircuit = false; string constant TOKEN_NAME = ; string constant TOKEN_SYMBOL = ; uint8 constant DECIMALS = 18; bool public exchangeEnabled = true; constructor(address _proxy, TokenState _tokenState, SynthetixState _synthetixState, address _owner, ExchangeRates _exchangeRates, IFeePool _feePool, SupplySchedule _supplySchedule, ISynthetixEscrow _rewardEscrow, ISynthetixEscrow _escrow, uint _totalSupply ) ExternStateToken(_proxy, _tokenState, TOKEN_NAME, TOKEN_SYMBOL, _totalSupply, DECIMALS, _owner) public { synthetixState = _synthetixState; exchangeRates = _exchangeRates; feePool = _feePool; supplySchedule = _supplySchedule; rewardEscrow = _rewardEscrow; escrow = _escrow; }",0,"subgraph cluster_3497_SynthetixState {
label=""SynthetixState"";
""3497_setIssuanceRatio"" [label=""setIssuanceRatio""];
""3497_incrementTotalIssuerCount"" [label=""incrementTotalIssuerCount""];
""3497_lastDebtLedgerEntry"" [label=""lastDebtLedgerEntry""];
""3497_preferredCurrency"" [label=""preferredCurrency""];
""3497_appendDebtLedgerValue"" [label=""appendDebtLedgerValue""];
""3497_setPreferredCurrency"" [label=""setPreferredCurrency""];
""3497__addToDebtRegister"" [label=""_addToDebtRegister""];
""3497_issuanceData"" [label=""issuanceData""];
""3497_hasIssued"" [label=""hasIssued""];
""3497_setCurrentIssuanceData"" [label=""setCurrentIssuanceData""];
""3497_decrementTotalIssuerCount"" [label=""decrementTotalIssuerCount""];
""3497_issuanceRatio"" [label=""issuanceRatio""];
""3497_debtLedgerLength"" [label=""debtLedgerLength""];
""3497_constructor"" [label=""constructor""];
""3497_clearIssuanceData"" [label=""clearIssuanceData""];
""3497_importIssuerData"" [label=""importIssuerData""];
""3497_debtLedger"" [label=""debtLedger""];
""3497_importIssuerData"" -> ""3497__addToDebtRegister"";
""3497_importIssuerData"" -> ""3497_onlyOwner"";
""3497_appendDebtLedgerValue"" -> ""3497_onlyAssociatedContract"";
""3497_constructor"" -> ""3497_constructor"";
""3497_setCurrentIssuanceData"" -> ""3497_onlyAssociatedContract"";
""3497_incrementTotalIssuerCount"" -> ""3497_onlyAssociatedContract"";
""3497_setPreferredCurrency"" -> ""3497_onlyAssociatedContract"";
""3497_decrementTotalIssuerCount"" -> ""3497_onlyAssociatedContract"";
""3497_clearIssuanceData"" -> ""3497_onlyAssociatedContract"";
""3497_setIssuanceRatio"" -> ""3497_onlyOwner"";
""3497_importIssuerData"" -> ""3497_onlyDuringSetup"";
}
"
0x702392282255f8c0993dbbbb148d80d2ef6795b1.sol,PoWTF,contract PoWTF { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1180_PoWTF {
label=""PoWTF"";
""1180_dividendsOf"" [label=""dividendsOf""];
""1180_myDividends"" [label=""myDividends""];
""1180_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1180_reinvest"" [label=""reinvest""];
""1180_transfer"" [label=""transfer""];
""1180_sellPrice"" [label=""sellPrice""];
""1180_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1180_sell"" [label=""sell""];
""1180_sqrt"" [label=""sqrt""];
""1180_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1180_purchaseTokens"" [label=""purchaseTokens""];
""1180_exit"" [label=""exit""];
""1180_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1180_balanceOf"" [label=""balanceOf""];
""1180_myTokens"" [label=""myTokens""];
""1180_withdraw"" [label=""withdraw""];
""1180_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1180_buyPrice"" [label=""buyPrice""];
""1180_buy"" [label=""buy""];
""1180_fallback"" [label=""fallback""];
""1180_totalSupply"" [label=""totalSupply""];
""1180_purchaseTokens"" -> ""1180_buyPrice"";
""1180_reinvest"" -> ""1180_myDividends"";
""1180_buy"" -> ""1180_purchaseTokens"";
""1180_purchaseTokens"" -> ""1180_ethereumToTokens_"";
""1180_sell"" -> ""1180_buyPrice"";
""1180_exit"" -> ""1180_sell"";
""1180_fallback"" -> ""1180_purchaseTokens"";
""1180_transfer"" -> ""1180_tokensToEthereum_"";
""1180_sell"" -> ""1180_tokensToEthereum_"";
""1180_sell"" -> ""1180_onlyBagholders"";
""1180_withdraw"" -> ""1180_myDividends"";
""1180_transfer"" -> ""1180_onlyBagholders"";
""1180_transfer"" -> ""1180_withdraw"";
""1180_buyPrice"" -> ""1180_tokensToEthereum_"";
""1180_withdraw"" -> ""1180_onlyStronghands"";
""1180_myDividends"" -> ""1180_dividendsOf"";
""1180_calculateTokensReceived"" -> ""1180_ethereumToTokens_"";
""1180_sellPrice"" -> ""1180_tokensToEthereum_"";
""1180_exit"" -> ""1180_withdraw"";
""1180_calculateEthereumReceived"" -> ""1180_tokensToEthereum_"";
""1180_myTokens"" -> ""1180_balanceOf"";
""1180_reinvest"" -> ""1180_onlyStronghands"";
""1180_ethereumToTokens_"" -> ""1180_sqrt"";
""1180_reinvest"" -> ""1180_purchaseTokens"";
""1180_transfer"" -> ""1180_myDividends"";
}
"
0x84f147cb25e1234c074567f0c17af45f5539601d.sol,PPJC,"contract PPJC is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 1000000 * (10 ** uint256(decimals)); constructor() public { _mint(msg.sender, INITIAL_SUPPLY); }",0,"subgraph cluster_685_PPJC {
label=""PPJC"";
""685_constructor"" [label=""constructor""];
""685_constructor"" -> ""685__mint"";
}
"
0xedeab579e57a7d66297d0a67302647bb109db7a8.sol,BreakTheBank,contract BreakTheBank { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1576_BreakTheBank {
label=""BreakTheBank"";
""1576_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1576_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1576_setSymbol"" [label=""setSymbol""];
""1576_withdraw"" [label=""withdraw""];
""1576_redistribution"" [label=""redistribution""];
""1576_transfer"" [label=""transfer""];
""1576_setName"" [label=""setName""];
""1576_sellPrice"" [label=""sellPrice""];
""1576_reinvest"" [label=""reinvest""];
""1576_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1576_fallback"" [label=""fallback""];
""1576_buyPrice"" [label=""buyPrice""];
""1576_sell"" [label=""sell""];
""1576_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1576_sqrt"" [label=""sqrt""];
""1576_constructor"" [label=""constructor""];
""1576_setStakingRequirement"" [label=""setStakingRequirement""];
""1576_balanceOf"" [label=""balanceOf""];
""1576_totalSupply"" [label=""totalSupply""];
""1576_setAdministrator"" [label=""setAdministrator""];
""1576_dividendsOf"" [label=""dividendsOf""];
""1576_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1576_myTokens"" [label=""myTokens""];
""1576_buy"" [label=""buy""];
""1576_disableWhitelist"" [label=""disableWhitelist""];
""1576_purchaseTokens"" [label=""purchaseTokens""];
""1576_myDividends"" [label=""myDividends""];
""1576_exit"" [label=""exit""];
""1576_calculateTokensReceived"" -> ""1576_ethereumToTokens_"";
""1576_withdraw"" -> ""1576_myDividends"";
""1576_exit"" -> ""1576_withdraw"";
""1576_buy"" -> ""1576_purchaseTokens"";
""1576_exit"" -> ""1576_sell"";
""1576_setName"" -> ""1576_onlyAdministrator"";
""1576_sellPrice"" -> ""1576_tokensToEthereum_"";
""1576_buyPrice"" -> ""1576_tokensToEthereum_"";
""1576_transfer"" -> ""1576_withdraw"";
""1576_withdraw"" -> ""1576_onlyStronghands"";
""1576_setAdministrator"" -> ""1576_onlyAdministrator"";
""1576_reinvest"" -> ""1576_purchaseTokens"";
""1576_purchaseTokens"" -> ""1576_limitBuy"";
""1576_transfer"" -> ""1576_myDividends"";
""1576_reinvest"" -> ""1576_myDividends"";
""1576_purchaseTokens"" -> ""1576_ethereumToTokens_"";
""1576_calculateEthereumReceived"" -> ""1576_tokensToEthereum_"";
""1576_setStakingRequirement"" -> ""1576_onlyAdministrator"";
""1576_disableWhitelist"" -> ""1576_onlyAdministrator"";
""1576_sell"" -> ""1576_tokensToEthereum_"";
""1576_myTokens"" -> ""1576_balanceOf"";
""1576_setSymbol"" -> ""1576_onlyAdministrator"";
""1576_fallback"" -> ""1576_purchaseTokens"";
""1576_transfer"" -> ""1576_onlyBagholders"";
""1576_myDividends"" -> ""1576_dividendsOf"";
""1576_sell"" -> ""1576_onlyBagholders"";
""1576_ethereumToTokens_"" -> ""1576_sqrt"";
""1576_reinvest"" -> ""1576_onlyStronghands"";
}
"
0x51fb3da8a67861361281ac56fe2ad8c3b4539ffa.sol,InsurChainCoin,"contract InsurChainCoin is BasicToken { string public name; string public symbol; uint8 public decimals; constructor() public { name = ; symbol = ; decimals = 18; totalSupply_ = 2e28; balances[msg.sender]=totalSupply_; emit Transfer(address(0), msg.sender, totalSupply_); }",0,"subgraph cluster_381_InsurChainCoin {
label=""InsurChainCoin"";
""381_constructor"" [label=""constructor""];
}
"
0x0ce95ef378059f38c5fa21e6d81a5895c0d9911b.sol,Game,contract Game { using GlobalTypes for GlobalTypes.Global; using MarketTypes for MarketTypes.MarketListing; using MissionParametersTypes for MissionParametersTypes.MissionParameters; using GameCommon for GameCommon.LaunchRocketStackFrame; address public m_Owner; AbstractDatabase public m_Database; AbstractGameHidden public m_GameHidden; bool public m_Paused; uint256 constant GlobalCategory = 0; uint256 constant RocketCategory = 1; uint256 constant OwnershipCategory = 2; uint256 constant InventoryCategory = 3; uint256 constant MarketCategory = 4; uint256 constant ProfitFundsCategory = 5; uint256 constant CompetitionFundsCategory = 6; uint256 constant MissionParametersCategory = 7; uint256 constant CompetitionScoresCategory = 8; uint256 constant WithdrawalFundsCategory = 9; uint256 constant ReferralCategory = 10; uint256 constant RocketStockCategory = 11; uint256 constant RocketStockInitializedCategory = 12; address constant NullAddress = 0; uint256 constant MaxCompetitionScores = 10; mapping(uint32 => RocketTypes.StockRocket) m_InitialRockets; modifier OnlyOwner() { require(msg.sender == m_Owner); _; },0,"subgraph cluster_4077_GameCommon {
label=""GameCommon"";
""4077_DeserializeRaw1"" [label=""DeserializeRaw1""];
""4077_DeserializeRaw2"" [label=""DeserializeRaw2""];
""4077_SerializeRaw3"" [label=""SerializeRaw3""];
""4077_DeserializeLaunchRocketStackFrame"" [label=""DeserializeLaunchRocketStackFrame""];
""4077_SerializeRaw1"" [label=""SerializeRaw1""];
""4077_SerializeRaw0"" [label=""SerializeRaw0""];
""4077_SerializeLaunchRocketStackFrame"" [label=""SerializeLaunchRocketStackFrame""];
""4077_DeserializeRaw0"" [label=""DeserializeRaw0""];
""4077_SerializeRaw2"" [label=""SerializeRaw2""];
""4077_DeserializeRaw3"" [label=""DeserializeRaw3""];
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw0"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw0"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw3"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw1"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw3"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw2"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw2"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw1"";
}
"
0x3664be8ec8a66e8dab9dfa48e5092f576edab746.sol,FoMo3Dshort,"contract FoMo3Dshort is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x454b6ee7e3847d51456b4146f7ae2664dbc35af4); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 1 seconds; uint256 private rndGap_ = 1 seconds; uint256 constant private rndInit_ = 2400 hours; uint256 constant private rndInc_ = 10 seconds; uint256 constant private rndMax_ = 2400 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(30,6); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(56,10); fees_[3] = F3Ddatasets.TeamFee(43,8); potSplit_[0] = F3Ddatasets.PotSplit(15,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(30,10); }",0,"subgraph cluster_4126_FoMo3Dshort {
label=""FoMo3Dshort"";
""4126_calcKeysReceived"" [label=""calcKeysReceived""];
""4126_getPlayerVaults"" [label=""getPlayerVaults""];
""4126_reLoadXaddr"" [label=""reLoadXaddr""];
""4126_registerNameXaddr"" [label=""registerNameXaddr""];
""4126_getTimeLeft"" [label=""getTimeLeft""];
""4126_airdrop"" [label=""airdrop""];
""4126_distributeExternal"" [label=""distributeExternal""];
""4126_constructor"" [label=""constructor""];
""4126_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4126_buyCore"" [label=""buyCore""];
""4126_potSwap"" [label=""potSwap""];
""4126_verifyTeam"" [label=""verifyTeam""];
""4126_determinePID"" [label=""determinePID""];
""4126_reLoadCore"" [label=""reLoadCore""];
""4126_fallback"" [label=""fallback""];
""4126_endTx"" [label=""endTx""];
""4126_reLoadXid"" [label=""reLoadXid""];
""4126_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4126_endRound"" [label=""endRound""];
""4126_iWantXKeys"" [label=""iWantXKeys""];
""4126_updateMasks"" [label=""updateMasks""];
""4126_buyXaddr"" [label=""buyXaddr""];
""4126_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4126_getBuyPrice"" [label=""getBuyPrice""];
""4126_withdraw"" [label=""withdraw""];
""4126_registerNameXname"" [label=""registerNameXname""];
""4126_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4126_registerNameXID"" [label=""registerNameXID""];
""4126_withdrawEarnings"" [label=""withdrawEarnings""];
""4126_buyXid"" [label=""buyXid""];
""4126_core"" [label=""core""];
""4126_updateTimer"" [label=""updateTimer""];
""4126_activate"" [label=""activate""];
""4126_updateGenVault"" [label=""updateGenVault""];
""4126_distributeInternal"" [label=""distributeInternal""];
""4126_buyXname"" [label=""buyXname""];
""4126_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4126_managePlayer"" [label=""managePlayer""];
""4126_reLoadXname"" [label=""reLoadXname""];
""4126_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4126_core"" -> ""4126_endTx"";
""4126_reLoadXname"" -> ""4126_isWithinLimits"";
""4126_fallback"" -> ""4126_determinePID"";
""4126_buyXaddr"" -> ""4126_determinePID"";
""4126_buyCore"" -> ""4126_endRound"";
""4126_fallback"" -> ""4126_buyCore"";
""4126_buyXid"" -> ""4126_isHuman"";
""4126_withdraw"" -> ""4126_isActivated"";
""4126_fallback"" -> ""4126_isWithinLimits"";
""4126_reLoadXaddr"" -> ""4126_reLoadCore"";
""4126_buyXname"" -> ""4126_isWithinLimits"";
""4126_reLoadXid"" -> ""4126_isActivated"";
""4126_buyXid"" -> ""4126_determinePID"";
""4126_registerNameXaddr"" -> ""4126_isHuman"";
""4126_core"" -> ""4126_distributeInternal"";
""4126_getPlayerVaults"" -> ""4126_getPlayerVaultsHelper"";
""4126_registerNameXID"" -> ""4126_isHuman"";
""4126_buyXaddr"" -> ""4126_isWithinLimits"";
""4126_withdraw"" -> ""4126_withdrawEarnings"";
""4126_core"" -> ""4126_airdrop"";
""4126_reLoadXid"" -> ""4126_isWithinLimits"";
""4126_reLoadXid"" -> ""4126_reLoadCore"";
""4126_getPlayerInfoByAddress"" -> ""4126_calcUnMaskedEarnings"";
""4126_withdraw"" -> ""4126_isHuman"";
""4126_reLoadXid"" -> ""4126_isHuman"";
""4126_reLoadXaddr"" -> ""4126_isActivated"";
""4126_buyXaddr"" -> ""4126_isActivated"";
""4126_updateGenVault"" -> ""4126_calcUnMaskedEarnings"";
""4126_core"" -> ""4126_managePlayer"";
""4126_buyXaddr"" -> ""4126_isHuman"";
""4126_buyXaddr"" -> ""4126_verifyTeam"";
""4126_reLoadCore"" -> ""4126_withdrawEarnings"";
""4126_buyXname"" -> ""4126_isActivated"";
""4126_reLoadXid"" -> ""4126_verifyTeam"";
""4126_distributeInternal"" -> ""4126_updateMasks"";
""4126_buyXid"" -> ""4126_isWithinLimits"";
""4126_core"" -> ""4126_updateTimer"";
""4126_withdrawEarnings"" -> ""4126_updateGenVault"";
""4126_reLoadXaddr"" -> ""4126_isHuman"";
""4126_reLoadXaddr"" -> ""4126_isWithinLimits"";
""4126_reLoadXname"" -> ""4126_verifyTeam"";
""4126_reLoadXname"" -> ""4126_isActivated"";
""4126_fallback"" -> ""4126_isHuman"";
""4126_fallback"" -> ""4126_isActivated"";
""4126_buyXname"" -> ""4126_determinePID"";
""4126_buyXname"" -> ""4126_buyCore"";
""4126_buyXid"" -> ""4126_isActivated"";
""4126_buyXid"" -> ""4126_buyCore"";
""4126_buyXname"" -> ""4126_verifyTeam"";
""4126_getPlayerVaults"" -> ""4126_calcUnMaskedEarnings"";
""4126_buyCore"" -> ""4126_core"";
""4126_reLoadXname"" -> ""4126_isHuman"";
""4126_buyXname"" -> ""4126_isHuman"";
""4126_reLoadXaddr"" -> ""4126_verifyTeam"";
""4126_withdraw"" -> ""4126_endRound"";
""4126_reLoadCore"" -> ""4126_endRound"";
""4126_managePlayer"" -> ""4126_updateGenVault"";
""4126_registerNameXname"" -> ""4126_isHuman"";
""4126_buyXaddr"" -> ""4126_buyCore"";
""4126_buyXid"" -> ""4126_verifyTeam"";
""4126_reLoadCore"" -> ""4126_core"";
""4126_reLoadXname"" -> ""4126_reLoadCore"";
""4126_core"" -> ""4126_distributeExternal"";
}
"
0xa5c9ecf54790334b73e5dfa1ff5668eb425dc474.sol,SecretRegistry,"contract SecretRegistry { string constant public contract_version = ; mapping(bytes32 => uint256) private secrethash_to_block; event SecretRevealed(bytes32 indexed secrethash, bytes32 secret); function registerSecret(bytes32 secret) public returns (bool) { bytes32 secrethash = keccak256(abi.encodePacked(secret)); if (secret == bytes32(0x0) || secrethash_to_block[secrethash] > 0) { return false; }",0,"subgraph cluster_271_SecretRegistry {
label=""SecretRegistry"";
""271_getSecretRevealBlockHeight"" [label=""getSecretRevealBlockHeight""];
""271_registerSecretBatch"" [label=""registerSecretBatch""];
""271_registerSecret"" [label=""registerSecret""];
""271_registerSecretBatch"" -> ""271_registerSecret"";
}
"
0x5162a13e4b2adf708878c71f2cad69525770601f.sol,AcuteAngleCoin,contract AcuteAngleCoin is ERC20Interface { uint256 public constant decimals = 5; string public constant symbol = ; string public constant name = ; bool public _selling = true; uint256 public _totalSupply = 10 ** 14; uint256 public _originalBuyPrice = 39 * 10**7; address public owner; mapping(address => uint256) private balances; mapping(address => mapping (address => uint256)) private allowed; mapping(address => bool) private approvedInvestorList; mapping(address => uint256) private deposit; uint256 public totalTokenSold = 0; bool public tradable = false; modifier onlyOwner() { require(msg.sender == owner); _; },0,"subgraph cluster_593_AcuteAngleCoin {
label=""AcuteAngleCoin"";
""593_buyAAC"" [label=""buyAAC""];
""593_fallback"" [label=""fallback""];
""593_totalSupply"" [label=""totalSupply""];
""593_turnOnTradable"" [label=""turnOnTradable""];
""593_transfer"" [label=""transfer""];
""593_transferFrom"" [label=""transferFrom""];
""593_AAC"" [label=""AAC""];
""593_addInvestorList"" [label=""addInvestorList""];
""593_turnOnSale"" [label=""turnOnSale""];
""593_getDeposit"" [label=""getDeposit""];
""593_turnOffSale"" [label=""turnOffSale""];
""593_allowance"" [label=""allowance""];
""593_isApprovedInvestor"" [label=""isApprovedInvestor""];
""593_withdraw"" [label=""withdraw""];
""593_approve"" [label=""approve""];
""593_balanceOf"" [label=""balanceOf""];
""593_removeInvestorList"" [label=""removeInvestorList""];
""593_buyAAC"" -> ""593_onSale"";
""593_turnOffSale"" -> ""593_onlyOwner"";
""593_turnOnSale"" -> ""593_onlyOwner"";
""593_fallback"" -> ""593_buyAAC"";
""593_transfer"" -> ""593_isTradable"";
""593_buyAAC"" -> ""593_validInvestor"";
""593_removeInvestorList"" -> ""593_onlyOwner"";
""593_addInvestorList"" -> ""593_onlyOwner"";
""593_withdraw"" -> ""593_onlyOwner"";
""593_turnOnTradable"" -> ""593_onlyOwner"";
""593_transferFrom"" -> ""593_isTradable"";
""593_approve"" -> ""593_isTradable"";
}
"
0x2828d5ae572a3e87febad75323af24ec0a4f2eef.sol,CryptoPlanets,contract CryptoPlanets { address ceoAddress = 0x8e6DBF31540d2299a674b8240596ae85ebD21314; modifier onlyCeo() { require (msg.sender == ceoAddress); _; },0,"subgraph cluster_476_CryptoPlanets {
label=""CryptoPlanets"";
""476_purchaseDefense"" [label=""purchaseDefense""];
""476_purchasePlanet"" [label=""purchasePlanet""];
""476_StealResources"" [label=""StealResources""];
""476_getPlanet"" [label=""getPlanet""];
""476_createPlanet"" [label=""createPlanet""];
""476_getUserDetails"" [label=""getUserDetails""];
""476_InitiatePlanets"" [label=""InitiatePlanets""];
""476_purchaseAttack"" [label=""purchaseAttack""];
""476_InitiatePlanets"" -> ""476_onlyCeo"";
""476_InitiatePlanets"" -> ""476_createPlanet"";
""476_createPlanet"" -> ""476_onlyCeo"";
}
"
0x3a9c0090e0d8d26f5eb83cacbc6361c2d305a500.sol,Crowdsale,"contract Crowdsale is Ownable { using SafeMath for uint256; uint softcap; uint256 hardcapPreICO; uint256 hardcapMainSale; TRND public token; mapping(address => uint) public balances; uint256 public startIcoPreICO; uint256 public startIcoMainSale; uint256 public endIcoPreICO; uint256 public endIcoMainSale; uint256 public totalSoldTokens; uint256 minPurchasePreICO; uint256 public rateIcoPreICO; uint256 public rateIcoMainSale; uint256 public unconfirmedSum; mapping(address => uint) public unconfirmedSumAddr; address public wallet; event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale() public { token = createTokenContract(); softcap = 20000000 * 1 ether; hardcapPreICO = 5000000 * 1 ether; hardcapMainSale = 75000000 * 1 ether; minPurchasePreICO = 100000000000000000; startIcoPreICO = 1527843600; endIcoPreICO = 1530435600; startIcoMainSale = 1530435600; endIcoMainSale = 1533891600; rateIcoPreICO = 5600; rateIcoMainSale = 2800; wallet = 0xca5EdAE100d4D262DC3Ec2dE96FD9943Ea659d04; }",0,"subgraph cluster_1928_Crowdsale {
label=""Crowdsale"";
""1928_SetPermissionsList"" [label=""SetPermissionsList""];
""1928_setRateIcoPreICO"" [label=""setRateIcoPreICO""];
""1928_GetPermissionsList"" [label=""GetPermissionsList""];
""1928_refund"" [label=""refund""];
""1928_procureTokens"" [label=""procureTokens""];
""1928_setRateIcoMainSale"" [label=""setRateIcoMainSale""];
""1928_refundUnconfirmed"" [label=""refundUnconfirmed""];
""1928_transferEthToMultisig"" [label=""transferEthToMultisig""];
""1928_Crowdsale"" [label=""Crowdsale""];
""1928_unpause"" [label=""unpause""];
""1928_createTokenContract"" [label=""createTokenContract""];
""1928_pause"" [label=""pause""];
""1928_fallback"" [label=""fallback""];
""1928_getRateIcoWithBonus"" [label=""getRateIcoWithBonus""];
""1928_setStartIcoPreICO"" [label=""setStartIcoPreICO""];
""1928_transferEthToMultisig"" -> ""1928_onlyOwner"";
""1928_GetPermissionsList"" -> ""1928_onlyOwner"";
""1928_fallback"" -> ""1928_procureTokens"";
""1928_setRateIcoMainSale"" -> ""1928_onlyOwner"";
""1928_Crowdsale"" -> ""1928_createTokenContract"";
""1928_setRateIcoPreICO"" -> ""1928_onlyOwner"";
""1928_unpause"" -> ""1928_onlyOwner"";
""1928_procureTokens"" -> ""1928_getRateIcoWithBonus"";
""1928_pause"" -> ""1928_onlyOwner"";
""1928_setStartIcoPreICO"" -> ""1928_onlyOwner"";
""1928_SetPermissionsList"" -> ""1928_onlyOwner"";
}
"
0x6f5e7f39f96b882490643228a725a179f04feba5.sol,PreSale,contract PreSale { uint256 public maxMintable; uint256 public totalMinted; uint256 public exchangeRate; bool public isFunding; ERC20 public Token; address public ETHWallet; bool private configSet; address public creator; function PreSale(address _wallet) { maxMintable = 30000000000000000000000000; ETHWallet = _wallet; creator = msg.sender; isFunding = false; exchangeRate = 3125; },0,"subgraph cluster_274_PreSale {
label=""PreSale"";
""274_setup"" [label=""setup""];
""274_closeSale"" [label=""closeSale""];
""274_fallback"" [label=""fallback""];
""274_contribute"" [label=""contribute""];
""274_PreSale"" [label=""PreSale""];
""274_updateRate"" [label=""updateRate""];
}
"
0x331655585e8893961f8e8e427f5f8dedf6e7f0af.sol,SDT_token,"contract SDT_token { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function SDTToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_SDT_token {
label=""SDT_token"";
""361_approve"" [label=""approve""];
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_burn"" [label=""burn""];
""361_SDTToken"" [label=""SDTToken""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0xeb5518602c22154970fd43447939b1dfef053b9e.sol,CommonBsPresale,"contract CommonBsPresale is SafeMath, Ownable, Pausable { enum Currency { BTC, LTC, ZEC, DASH, WAVES, USD, EUR }",0,"subgraph cluster_1951_CommonBsPresale {
label=""CommonBsPresale"";
""1951__tokensByTx"" [label=""_tokensByTx""];
""1951_setNotifier"" [label=""setNotifier""];
""1951_setBeneficiary"" [label=""setBeneficiary""];
""1951_btcId"" [label=""btcId""];
""1951_finalize"" [label=""finalize""];
""1951_tokensByLtcTx"" [label=""tokensByLtcTx""];
""1951_tokensByWavesTx"" [label=""tokensByWavesTx""];
""1951_ltcId"" [label=""ltcId""];
""1951_zecId"" [label=""zecId""];
""1951_fallback"" [label=""fallback""];
""1951_CommonBsPresale"" [label=""CommonBsPresale""];
""1951_tokensByUsdTx"" [label=""tokensByUsdTx""];
""1951_eurId"" [label=""eurId""];
""1951_usdId"" [label=""usdId""];
""1951_weiToTokensAtTime"" [label=""weiToTokensAtTime""];
""1951_externalSales"" [label=""externalSales""];
""1951_sellTokensForEth"" [label=""sellTokensForEth""];
""1951__externalSaleSha3"" [label=""_externalSaleSha3""];
""1951_isSaleOn"" [label=""isSaleOn""];
""1951_tokensByEurTx"" [label=""tokensByEurTx""];
""1951_tokensByBtcTx"" [label=""tokensByBtcTx""];
""1951_setSaleEnabled"" [label=""setSaleEnabled""];
""1951_dashId"" [label=""dashId""];
""1951_totalSales"" [label=""totalSales""];
""1951_isMaxCapReached"" [label=""isMaxCapReached""];
""1951_tokensByTx"" [label=""tokensByTx""];
""1951_weiToTokens"" [label=""weiToTokens""];
""1951_isFinalized"" [label=""isFinalized""];
""1951_wavesId"" [label=""wavesId""];
""1951_tokensByZecTx"" [label=""tokensByZecTx""];
""1951_isSaleOver"" [label=""isSaleOver""];
""1951_getNow"" [label=""getNow""];
""1951_tokensByDashTx"" [label=""tokensByDashTx""];
""1951_weiToTokens"" -> ""1951_weiToTokensAtTime"";
""1951_finalize"" -> ""1951_isMaxCapReached"";
""1951_setBeneficiary"" -> ""1951_onlyOwner"";
""1951_sellTokensForEth"" -> ""1951_weiToTokens"";
""1951_finalize"" -> ""1951_onlyOwner"";
""1951_setSaleEnabled"" -> ""1951_onlyOwner"";
""1951_isSaleOver"" -> ""1951_getNow"";
""1951_finalize"" -> ""1951_getNow"";
""1951_finalize"" -> ""1951_isSaleOver"";
""1951_weiToTokens"" -> ""1951_getNow"";
""1951_tokensByUsdTx"" -> ""1951__tokensByTx"";
""1951__externalSaleSha3"" -> ""1951_safeAdd"";
""1951_weiToTokensAtTime"" -> ""1951_safeMul"";
""1951_externalSales"" -> ""1951_ifNotPaused"";
""1951_sellTokensForEth"" -> ""1951_ifNotPaused"";
""1951_setNotifier"" -> ""1951_onlyOwner"";
""1951_externalSales"" -> ""1951_canNotify"";
""1951_tokensByWavesTx"" -> ""1951__tokensByTx"";
""1951_isSaleOn"" -> ""1951_getNow"";
""1951_tokensByZecTx"" -> ""1951__tokensByTx"";
""1951_tokensByEurTx"" -> ""1951__tokensByTx"";
""1951_tokensByLtcTx"" -> ""1951__tokensByTx"";
""1951_tokensByBtcTx"" -> ""1951__tokensByTx"";
""1951_fallback"" -> ""1951_sellTokensForEth"";
""1951_totalSales"" -> ""1951_safeAdd"";
""1951_tokensByDashTx"" -> ""1951__tokensByTx"";
""1951_externalSales"" -> ""1951__externalSaleSha3"";
""1951_sellTokensForEth"" -> ""1951_respectTimeFrame"";
""1951_sellTokensForEth"" -> ""1951_safeAdd"";
""1951__tokensByTx"" -> ""1951_tokensByTx"";
}
"
0x047a68fc8aaa9109346c726c696986f4b5792658.sol,BitrngDice,contract BitrngDice { address public owner; address private nextOwner; address public secretSigner; uint constant MIN_AMOUNT = 0.01 ether; uint constant MAX_AMOUNT_BIG_SMALL = 1 ether; uint constant MAX_AMOUNT_SAME = 0.05 ether; uint constant MAX_AMOUNT_NUMBER = 0.1 ether; uint constant BET_EXPIRATION_BLOCKS = 250; uint8 constant MAX_BET = 5; uint8 constant BET_MASK_COUNT = 22; uint24 constant BET_BIG = uint24(1 << 21); uint24 constant BET_SMALL = uint24(1 << 20); uint24 constant BET_SAME_1 = uint24(1 << 19); uint24 constant BET_SAME_2 = uint24(1 << 18); uint24 constant BET_SAME_3 = uint24(1 << 17); uint24 constant BET_SAME_4 = uint24(1 << 16); uint24 constant BET_SAME_5 = uint24(1 << 15); uint24 constant BET_SAME_6 = uint24(1 << 14); uint24 constant BET_4 = uint24(1 << 13); uint24 constant BET_5 = uint24(1 << 12); uint24 constant BET_6 = uint24(1 << 11); uint24 constant BET_7 = uint24(1 << 10); uint24 constant BET_8 = uint24(1 << 9); uint24 constant BET_9 = uint24(1 << 8); uint24 constant BET_10 = uint24(1 << 7); uint24 constant BET_11 = uint24(1 << 6); uint24 constant BET_12 = uint24(1 << 5); uint24 constant BET_13 = uint24(1 << 4); uint24 constant BET_14 = uint24(1 << 3); uint24 constant BET_15 = uint24(1 << 2); uint24 constant BET_16 = uint24(1 << 1); uint24 constant BET_17 = uint24(1); uint public lockedInBets; bool public enabled = true; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Game{ address gambler; uint40 placeBlockNumber; uint bet1Amount; uint bet2Amount; uint bet3Amount; uint bet4Amount; uint bet5Amount; uint24 mask; },0,"subgraph cluster_1927_BitrngDice {
label=""BitrngDice"";
""1927__max"" [label=""_max""];
""1927_acceptNextOwner"" [label=""acceptNextOwner""];
""1927__getWinAmount"" [label=""_getWinAmount""];
""1927_settleGame"" [label=""settleGame""];
""1927_withdrawFunds"" [label=""withdrawFunds""];
""1927__lockOrUnlockAmount"" [label=""_lockOrUnlockAmount""];
""1927_fallback"" [label=""fallback""];
""1927_refundBet"" [label=""refundBet""];
""1927_setSecretSigner"" [label=""setSecretSigner""];
""1927__nextAmount"" [label=""_nextAmount""];
""1927_enable"" [label=""enable""];
""1927_clearStorage"" [label=""clearStorage""];
""1927_placeGame"" [label=""placeGame""];
""1927_approveNextOwner"" [label=""approveNextOwner""];
""1927_clearProcessedBet"" [label=""clearProcessedBet""];
""1927_sendFunds"" [label=""sendFunds""];
""1927_kill"" [label=""kill""];
""1927_constructor"" [label=""constructor""];
""1927__assertAmount"" [label=""_assertAmount""];
""1927_clearStorage"" -> ""1927_clearProcessedBet"";
""1927_kill"" -> ""1927_onlyOwner"";
""1927_withdrawFunds"" -> ""1927_sendFunds"";
""1927_settleGame"" -> ""1927_sendFunds"";
""1927__lockOrUnlockAmount"" -> ""1927__assertAmount"";
""1927_refundBet"" -> ""1927__lockOrUnlockAmount"";
""1927__assertAmount"" -> ""1927__max"";
""1927_refundBet"" -> ""1927_sendFunds"";
""1927_settleGame"" -> ""1927_clearProcessedBet"";
""1927_approveNextOwner"" -> ""1927_onlyOwner"";
""1927_enable"" -> ""1927_onlyOwner"";
""1927_setSecretSigner"" -> ""1927_onlyOwner"";
""1927__getWinAmount"" -> ""1927__nextAmount"";
""1927_withdrawFunds"" -> ""1927_onlyOwner"";
""1927_settleGame"" -> ""1927__lockOrUnlockAmount"";
""1927_settleGame"" -> ""1927__getWinAmount"";
""1927_placeGame"" -> ""1927__lockOrUnlockAmount"";
}
"
0x174bb5d84b78e9e2248e7aa2c789aeba82f72f68.sol,LuckyTree,"contract LuckyTree is Owned, SafeMath{ uint public leafPrice; uint public gameStart; uint public gameDuration; uint public tokenLockDuration; uint public totalParticipationAmount; uint public totalLockedAmount; uint public numberOfLeafs; uint public participantIndex; bool public fundsTransfered; address public winner; mapping(uint => address) public participants; mapping(uint => uint) public participationAmount; mapping(address => bool) public hasParticipated; mapping(address => bool) public hasWithdrawn; mapping(address => uint) public participantIndexes; mapping(uint => address) public leafOwners; event GameWinner(address winner); event GameEnded(uint block); event GameStarted(uint block); event GameFailed(uint block); event GameLocked(uint block); event GameUnlocked(uint block); enum state{ pending, running, paused, finished, closed, claimed }",0,"subgraph cluster_1043_LuckyTree {
label=""LuckyTree"";
""1043_random"" [label=""random""];
""1043_lockFunds"" [label=""lockFunds""];
""1043_processTransaction"" [label=""processTransaction""];
""1043_closeGame"" [label=""closeGame""];
""1043_pickWinner"" [label=""pickWinner""];
""1043_manuallyProcessTransaction"" [label=""manuallyProcessTransaction""];
""1043_unlockFunds"" [label=""unlockFunds""];
""1043_setCreditGameAddress"" [label=""setCreditGameAddress""];
""1043_checkInternalBalance"" [label=""checkInternalBalance""];
""1043_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""1043_setTokenAddress"" [label=""setTokenAddress""];
""1043_receiveApproval"" [label=""receiveApproval""];
""1043_LuckyTree"" [label=""LuckyTree""];
""1043_getVariablesForDapp"" [label=""getVariablesForDapp""];
""1043_manualLockFunds"" [label=""manualLockFunds""];
""1043_killContract"" [label=""killContract""];
""1043_salvageTokensFromContract"" -> ""1043_onlyOwner"";
""1043_manuallyProcessTransaction"" -> ""1043_onlyOwner"";
""1043_manualLockFunds"" -> ""1043_onlyOwner"";
""1043_setCreditGameAddress"" -> ""1043_onlyOwner"";
""1043_setTokenAddress"" -> ""1043_onlyOwner"";
""1043_pickWinner"" -> ""1043_random"";
""1043_closeGame"" -> ""1043_onlyOwner"";
""1043_killContract"" -> ""1043_onlyOwner"";
""1043_receiveApproval"" -> ""1043_processTransaction"";
""1043_manualLockFunds"" -> ""1043_pickWinner"";
""1043_pickWinner"" -> ""1043_lockFunds"";
""1043_processTransaction"" -> ""1043_pickWinner"";
""1043_manuallyProcessTransaction"" -> ""1043_processTransaction"";
}
"
0x2706165b57e8d91f0282a4fa919b810e8103ab86.sol,Babylon,"contract Babylon is Pausable { using SafeMath for uint256; using SafeERC20 for BabyloniaToken; event TokenExchangeCreated(address indexed recipient, uint amount, uint releasedAt); event TokenExchangeReleased(address indexed recipient); BabyloniaToken private babyloniaToken; StandardToken private helbizToken; EthPriceOracleI private ethPriceOracle; uint public INITIAL_CIRCULATION_BBY = 80000000; uint public MIN_EXCHANGE_BBY = SafeMath.mul(1000, 10**18); uint public exchangeRate; uint8 public usdCentsExchangeRate; uint32 public exchangeLockTime; uint public babyloniaTokensLocked; bool public ethExchangeEnabled; struct TokenExchange { address recipient; uint amountHBZ; uint amountBBY; uint amountWei; uint createdAt; uint releasedAt; }",0,"subgraph cluster_1651_Babylon {
label=""Babylon"";
""1651_getActiveTokenExchangeById"" [label=""getActiveTokenExchangeById""];
""1651_constructor"" [label=""constructor""];
""1651_setUSDCentsExchangeRate"" [label=""setUSDCentsExchangeRate""];
""1651_fallback"" [label=""fallback""];
""1651_claimTokens"" [label=""claimTokens""];
""1651_withdrawETH"" [label=""withdrawETH""];
""1651_burnRemainderBBY"" [label=""burnRemainderBBY""];
""1651__createExchangeRecord"" [label=""_createExchangeRecord""];
""1651_getTokenAddress"" [label=""getTokenAddress""];
""1651_withdrawBBY"" [label=""withdrawBBY""];
""1651_setExchangeRate"" [label=""setExchangeRate""];
""1651_getActiveTokenExchangeId"" [label=""getActiveTokenExchangeId""];
""1651_getTokenExchangesCount"" [label=""getTokenExchangesCount""];
""1651_withdrawHBZ"" [label=""withdrawHBZ""];
""1651_setExchangeLockTime"" [label=""setExchangeLockTime""];
""1651_setEthExchangeEnabled"" [label=""setEthExchangeEnabled""];
""1651_exchangeEth"" [label=""exchangeEth""];
""1651_exchangeTokens"" [label=""exchangeTokens""];
""1651_claimTokens"" -> ""1651_whenNotPaused"";
""1651_withdrawBBY"" -> ""1651_onlyOwner"";
""1651_getActiveTokenExchangeId"" -> ""1651_activeTokenExchange"";
""1651_setExchangeRate"" -> ""1651_onlyOwner"";
""1651_getTokenExchangesCount"" -> ""1651_onlyOwner"";
""1651_burnRemainderBBY"" -> ""1651_onlyOwner"";
""1651_withdrawETH"" -> ""1651_onlyOwner"";
""1651_exchangeEth"" -> ""1651__createExchangeRecord"";
""1651_setUSDCentsExchangeRate"" -> ""1651_onlyOwner"";
""1651_withdrawHBZ"" -> ""1651_onlyOwner"";
""1651_exchangeEth"" -> ""1651_whenNotPaused"";
""1651_exchangeTokens"" -> ""1651_whenNotPaused"";
""1651_exchangeEth"" -> ""1651_whenEthEnabled"";
""1651_exchangeTokens"" -> ""1651_noActiveTokenExchange"";
""1651_setExchangeLockTime"" -> ""1651_onlyOwner"";
""1651_claimTokens"" -> ""1651_activeTokenExchange"";
""1651_setEthExchangeEnabled"" -> ""1651_onlyOwner"";
""1651_exchangeEth"" -> ""1651_noActiveTokenExchange"";
""1651_exchangeTokens"" -> ""1651__createExchangeRecord"";
}
"
0xc090e4fe2e098207e1b8695161c3c6a9e20b4802.sol,TaxManFarmer,contract TaxManFarmer { using SafeMath for uint256; bool private reentrancy_lock = false; address public shop = 0x2dadfF9Fc12bcd339B68692622C3438A5B46EA53; address public object = 0xB3EfD0FA677822203BB69623F3DB2Cdc3377d5f2; address public taxMan = 0xd5048F05Ed7185821C999e3e077A3d1baed0952c; mapping(address => uint256) public workDone; modifier nonReentrant() { require(!reentrancy_lock); reentrancy_lock = true; _; reentrancy_lock = false; },0,"subgraph cluster_253_TaxManFarmer {
label=""TaxManFarmer"";
""253_reapFarm"" [label=""reapFarm""];
""253_pepFarm"" [label=""pepFarm""];
""253_reapFarm"" -> ""253_nonReentrant"";
""253_pepFarm"" -> ""253_nonReentrant"";
}
"
0x2a98c6dcac6d759695b09cdf6b26cf4a13370a57.sol,DOGEToken,"contract DOGEToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function DOGEToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xdF74B93C1Fa5515E3D5199fce19b9DB57A98e8B8] = _totalSupply; Transfer(address(0), 0xdF74B93C1Fa5515E3D5199fce19b9DB57A98e8B8, _totalSupply); }",0,"subgraph cluster_536_DOGEToken {
label=""DOGEToken"";
""536_totalSupply"" [label=""totalSupply""];
""536_transferFrom"" [label=""transferFrom""];
""536_allowance"" [label=""allowance""];
""536_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""536_approve"" [label=""approve""];
""536_DOGEToken"" [label=""DOGEToken""];
""536_transfer"" [label=""transfer""];
""536_balanceOf"" [label=""balanceOf""];
""536_approveAndCall"" [label=""approveAndCall""];
""536_transferFrom"" -> ""536_safeSub"";
""536_transfer"" -> ""536_safeSub"";
""536_transfer"" -> ""536_safeAdd"";
""536_transferAnyERC20Token"" -> ""536_onlyOwner"";
""536_transferFrom"" -> ""536_safeAdd"";
}
"
0xd0ffe3496101fd676b646ade429653d7df12edd2.sol,ContractEFT,contract ContractEFT is ERC20Interface { uint256 public constant decimals = 5; string public constant symbol = ; string public constant name = ; uint256 public _totalSupply = formatDecimals(500000000000); address public owner; mapping(address => uint256) private balances; mapping(address => mapping (address => uint256)) private allowed; mapping(address => bool) private approvedInvestorList; mapping(address => uint256) private deposit; uint256 public totalTokenSold = 0; function formatDecimals(uint256 _value) internal pure returns (uint256 ) { return _value * 10 ** decimals; },0,"subgraph cluster_391_ContractEFT {
label=""ContractEFT"";
""391_isApprovedInvestor"" [label=""isApprovedInvestor""];
""391_allowance"" [label=""allowance""];
""391_transfer"" [label=""transfer""];
""391_getDeposit"" [label=""getDeposit""];
""391_transferFrom"" [label=""transferFrom""];
""391_approve"" [label=""approve""];
""391_ContractEFT"" [label=""ContractEFT""];
""391_fallback"" [label=""fallback""];
""391_balanceOf"" [label=""balanceOf""];
""391_totalSupply"" [label=""totalSupply""];
""391_formatDecimals"" [label=""formatDecimals""];
}
"
0x4c4bcb4ffa0d7eab9287d1df294c8391e3b8096f.sol,PDVBO,"contract PDVBO { bytes32 public name; bytes6 public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function PDVBO( ) public { totalSupply = 1000000000000; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",0,"subgraph cluster_349_PDVBO {
label=""PDVBO"";
""349_approve"" [label=""approve""];
""349_transferFrom"" [label=""transferFrom""];
""349_approveAndCall"" [label=""approveAndCall""];
""349__transfer"" [label=""_transfer""];
""349_transfer"" [label=""transfer""];
""349_burn"" [label=""burn""];
""349_burnFrom"" [label=""burnFrom""];
""349_PDVBO"" [label=""PDVBO""];
""349_transfer"" -> ""349__transfer"";
""349_approveAndCall"" -> ""349_approve"";
""349_transferFrom"" -> ""349__transfer"";
}
"
0x53ef8e6cb3a7c96d7aecf39b2d4d09c166269c34.sol,AUX1418,"contract AUX1418 is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 7; _totalSupply = 1000000000; balances[0x1C200fD1A330c1548e3e867e583ed2CD2fa6EA16] = _totalSupply; emit Transfer(address(0), 0x1C200fD1A330c1548e3e867e583ed2CD2fa6EA16, _totalSupply); }",0,"subgraph cluster_543_AUX1418 {
label=""AUX1418"";
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_constructor"" [label=""constructor""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xf310d06a54eda5d5ae204b0aa9b5e207972d80b9.sol,MicoinToken,"contract MicoinToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MicoinToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",0,"subgraph cluster_619_MicoinToken {
label=""MicoinToken"";
""619_setPrices"" [label=""setPrices""];
""619_MicoinToken"" [label=""MicoinToken""];
""619_sell"" [label=""sell""];
""619_buy"" [label=""buy""];
""619_freezeAccount"" [label=""freezeAccount""];
""619_mintToken"" [label=""mintToken""];
""619__transfer"" [label=""_transfer""];
""619_mintToken"" -> ""619_onlyOwner"";
""619_setPrices"" -> ""619_onlyOwner"";
""619_MicoinToken"" -> ""619_TokenERC20"";
""619_freezeAccount"" -> ""619_onlyOwner"";
""619_buy"" -> ""619__transfer"";
""619_sell"" -> ""619__transfer"";
}
"
0x333c86f84343058cbf7762c5043c90e41129fc5b.sol,Power,contract Power { string public version = ; uint256 private constant ONE = 1; uint32 private constant MAX_WEIGHT = 1000000; uint8 private constant MIN_PRECISION = 32; uint8 private constant MAX_PRECISION = 127; uint256 private constant FIXED_1 = 0x080000000000000000000000000000000; uint256 private constant FIXED_2 = 0x100000000000000000000000000000000; uint256 private constant MAX_NUM = 0x1ffffffffffffffffffffffffffffffff; uint256 private constant LN2_MANTISSA = 0x2c5c85fdf473de6af278ece600fcbda; uint8 private constant LN2_EXPONENT = 122; uint256[128] private maxExpArray; constructor() public { maxExpArray[ 32] = 0x1c35fedd14ffffffffffffffffffffffff; maxExpArray[ 33] = 0x1b0ce43b323fffffffffffffffffffffff; maxExpArray[ 34] = 0x19f0028ec1ffffffffffffffffffffffff; maxExpArray[ 35] = 0x18ded91f0e7fffffffffffffffffffffff; maxExpArray[ 36] = 0x17d8ec7f0417ffffffffffffffffffffff; maxExpArray[ 37] = 0x16ddc6556cdbffffffffffffffffffffff; maxExpArray[ 38] = 0x15ecf52776a1ffffffffffffffffffffff; maxExpArray[ 39] = 0x15060c256cb2ffffffffffffffffffffff; maxExpArray[ 40] = 0x1428a2f98d72ffffffffffffffffffffff; maxExpArray[ 41] = 0x13545598e5c23fffffffffffffffffffff; maxExpArray[ 42] = 0x1288c4161ce1dfffffffffffffffffffff; maxExpArray[ 43] = 0x11c592761c666fffffffffffffffffffff; maxExpArray[ 44] = 0x110a688680a757ffffffffffffffffffff; maxExpArray[ 45] = 0x1056f1b5bedf77ffffffffffffffffffff; maxExpArray[ 46] = 0x0faadceceeff8bffffffffffffffffffff; maxExpArray[ 47] = 0x0f05dc6b27edadffffffffffffffffffff; maxExpArray[ 48] = 0x0e67a5a25da4107fffffffffffffffffff; maxExpArray[ 49] = 0x0dcff115b14eedffffffffffffffffffff; maxExpArray[ 50] = 0x0d3e7a392431239fffffffffffffffffff; maxExpArray[ 51] = 0x0cb2ff529eb71e4fffffffffffffffffff; maxExpArray[ 52] = 0x0c2d415c3db974afffffffffffffffffff; maxExpArray[ 53] = 0x0bad03e7d883f69bffffffffffffffffff; maxExpArray[ 54] = 0x0b320d03b2c343d5ffffffffffffffffff; maxExpArray[ 55] = 0x0abc25204e02828dffffffffffffffffff; maxExpArray[ 56] = 0x0a4b16f74ee4bb207fffffffffffffffff; maxExpArray[ 57] = 0x09deaf736ac1f569ffffffffffffffffff; maxExpArray[ 58] = 0x0976bd9952c7aa957fffffffffffffffff; maxExpArray[ 59] = 0x09131271922eaa606fffffffffffffffff; maxExpArray[ 60] = 0x08b380f3558668c46fffffffffffffffff; maxExpArray[ 61] = 0x0857ddf0117efa215bffffffffffffffff; maxExpArray[ 62] = 0x07ffffffffffffffffffffffffffffffff; maxExpArray[ 63] = 0x07abbf6f6abb9d087fffffffffffffffff; maxExpArray[ 64] = 0x075af62cbac95f7dfa7fffffffffffffff; maxExpArray[ 65] = 0x070d7fb7452e187ac13fffffffffffffff; maxExpArray[ 66] = 0x06c3390ecc8af379295fffffffffffffff; maxExpArray[ 67] = 0x067c00a3b07ffc01fd6fffffffffffffff; maxExpArray[ 68] = 0x0637b647c39cbb9d3d27ffffffffffffff; maxExpArray[ 69] = 0x05f63b1fc104dbd39587ffffffffffffff; maxExpArray[ 70] = 0x05b771955b36e12f7235ffffffffffffff; maxExpArray[ 71] = 0x057b3d49dda84556d6f6ffffffffffffff; maxExpArray[ 72] = 0x054183095b2c8ececf30ffffffffffffff; maxExpArray[ 73] = 0x050a28be635ca2b888f77fffffffffffff; maxExpArray[ 74] = 0x04d5156639708c9db33c3fffffffffffff; maxExpArray[ 75] = 0x04a23105873875bd52dfdfffffffffffff; maxExpArray[ 76] = 0x0471649d87199aa990756fffffffffffff; maxExpArray[ 77] = 0x04429a21a029d4c1457cfbffffffffffff; maxExpArray[ 78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff; maxExpArray[ 79] = 0x03eab73b3bbfe282243ce1ffffffffffff; maxExpArray[ 80] = 0x03c1771ac9fb6b4c18e229ffffffffffff; maxExpArray[ 81] = 0x0399e96897690418f785257fffffffffff; maxExpArray[ 82] = 0x0373fc456c53bb779bf0ea9fffffffffff; maxExpArray[ 83] = 0x034f9e8e490c48e67e6ab8bfffffffffff; maxExpArray[ 84] = 0x032cbfd4a7adc790560b3337ffffffffff; maxExpArray[ 85] = 0x030b50570f6e5d2acca94613ffffffffff; maxExpArray[ 86] = 0x02eb40f9f620fda6b56c2861ffffffffff; maxExpArray[ 87] = 0x02cc8340ecb0d0f520a6af58ffffffffff; maxExpArray[ 88] = 0x02af09481380a0a35cf1ba02ffffffffff; maxExpArray[ 89] = 0x0292c5bdd3b92ec810287b1b3fffffffff; maxExpArray[ 90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff; maxExpArray[ 91] = 0x025daf6654b1eaa55fd64df5efffffffff; maxExpArray[ 92] = 0x0244c49c648baa98192dce88b7ffffffff; maxExpArray[ 93] = 0x022ce03cd5619a311b2471268bffffffff; maxExpArray[ 94] = 0x0215f77c045fbe885654a44a0fffffffff; maxExpArray[ 95] = 0x01ffffffffffffffffffffffffffffffff; maxExpArray[ 96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff; maxExpArray[ 97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff; maxExpArray[ 98] = 0x01c35fedd14b861eb0443f7f133fffffff; maxExpArray[ 99] = 0x01b0ce43b322bcde4a56e8ada5afffffff; maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff; maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff; maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff; maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff; maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff; maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff; maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff; maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff; maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff; maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff; maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff; maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff; maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff; maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff; maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff; maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff; maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff; maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff; maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff; maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff; maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff; maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf; maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df; maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f; maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037; maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf; maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9; maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6; },0,"subgraph cluster_1987_Power {
label=""Power"";
""1987_constructor"" [label=""constructor""];
""1987_findPositionInMaxExpArray"" [label=""findPositionInMaxExpArray""];
""1987_floorLog2"" [label=""floorLog2""];
""1987_power"" [label=""power""];
""1987_ln"" [label=""ln""];
""1987_fixedExp"" [label=""fixedExp""];
""1987_power"" -> ""1987_ln"";
""1987_ln"" -> ""1987_floorLog2"";
""1987_power"" -> ""1987_fixedExp"";
""1987_power"" -> ""1987_findPositionInMaxExpArray"";
}
"
0xaaa73b4a5411a4249b723722cb1bdabfaed495c2.sol,Moon,contract Moon { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1323_Moon {
label=""Moon"";
""1323_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1323_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1323_disableInitialStage"" [label=""disableInitialStage""];
""1323_setStakingRequirement"" [label=""setStakingRequirement""];
""1323_setAdministrator"" [label=""setAdministrator""];
""1323_buy"" [label=""buy""];
""1323_fallback"" [label=""fallback""];
""1323_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1323_balanceOf"" [label=""balanceOf""];
""1323_myTokens"" [label=""myTokens""];
""1323_Moon"" [label=""Moon""];
""1323_sqrt"" [label=""sqrt""];
""1323_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1323_buyPrice"" [label=""buyPrice""];
""1323_reinvest"" [label=""reinvest""];
""1323_sellPrice"" [label=""sellPrice""];
""1323_withdraw"" [label=""withdraw""];
""1323_exit"" [label=""exit""];
""1323_setName"" [label=""setName""];
""1323_setSymbol"" [label=""setSymbol""];
""1323_myDividends"" [label=""myDividends""];
""1323_dividendsOf"" [label=""dividendsOf""];
""1323_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1323_totalSupply"" [label=""totalSupply""];
""1323_transfer"" [label=""transfer""];
""1323_sell"" [label=""sell""];
""1323_purchaseTokens"" [label=""purchaseTokens""];
""1323_reinvest"" -> ""1323_purchaseTokens"";
""1323_withdraw"" -> ""1323_myDividends"";
""1323_sell"" -> ""1323_onlyBagholders"";
""1323_purchaseTokens"" -> ""1323_ethereumToTokens_"";
""1323_sellPrice"" -> ""1323_tokensToEthereum_"";
""1323_reinvest"" -> ""1323_myDividends"";
""1323_setStakingRequirement"" -> ""1323_onlyAdministrator"";
""1323_buyPrice"" -> ""1323_tokensToEthereum_"";
""1323_myDividends"" -> ""1323_dividendsOf"";
""1323_withdraw"" -> ""1323_onlyStronghands"";
""1323_transfer"" -> ""1323_withdraw"";
""1323_myTokens"" -> ""1323_balanceOf"";
""1323_sell"" -> ""1323_tokensToEthereum_"";
""1323_setName"" -> ""1323_onlyAdministrator"";
""1323_purchaseTokens"" -> ""1323_antiEarlyWhale"";
""1323_ethereumToTokens_"" -> ""1323_sqrt"";
""1323_buy"" -> ""1323_purchaseTokens"";
""1323_disableInitialStage"" -> ""1323_onlyAdministrator"";
""1323_transfer"" -> ""1323_myDividends"";
""1323_exit"" -> ""1323_sell"";
""1323_reinvest"" -> ""1323_onlyStronghands"";
""1323_transfer"" -> ""1323_onlyBagholders"";
""1323_fallback"" -> ""1323_purchaseTokens"";
""1323_setAdministrator"" -> ""1323_onlyAdministrator"";
""1323_setSymbol"" -> ""1323_onlyAdministrator"";
""1323_calculateEthereumReceived"" -> ""1323_tokensToEthereum_"";
""1323_exit"" -> ""1323_withdraw"";
""1323_transfer"" -> ""1323_tokensToEthereum_"";
""1323_calculateTokensReceived"" -> ""1323_ethereumToTokens_"";
}
"
0xebd79044b0a3261b5f2ff95bd06e3a17e7d109fb.sol,MigratableToken,"contract MigratableToken is BasicToken,GuidedByRoles { uint256 public totalMigrated; address public migrationAgent; event Migrate(address indexed _from, address indexed _to, uint256 _value); function setMigrationAgent(address _migrationAgent) public { require(rightAndRoles.onlyRoles(msg.sender,1)); require(totalMigrated == 0); migrationAgent = _migrationAgent; }",0,"subgraph cluster_572_MigratableToken {
label=""MigratableToken"";
""572_migrate"" [label=""migrate""];
""572_setMigrationAgent"" [label=""setMigrationAgent""];
""572_migrateAll"" [label=""migrateAll""];
""572_migrateInternal"" [label=""migrateInternal""];
""572_migrate"" -> ""572_migrateInternal"";
""572_migrateAll"" -> ""572_migrateInternal"";
}
"
0x705051bbfd9f287869a412cba8bc7d112de48e69.sol,SAKECOIN,"contract SAKECOIN is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public initialSupply = 30e9 * 1e8; uint256 public totalSupply; uint256 public distributeAmount = 0; bool public mintingFinished = false; mapping (address => uint) balances; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed burner, uint256 value); event Mint(address indexed to, uint256 amount); event MintFinished(); function SAKECOIN() public { totalSupply = initialSupply; balances[msg.sender] = totalSupply; }",0,"subgraph cluster_1515_SAKECOIN {
label=""SAKECOIN"";
""1515_decimals"" [label=""decimals""];
""1515_transferToContract"" [label=""transferToContract""];
""1515_autoDistribute"" [label=""autoDistribute""];
""1515_symbol"" [label=""symbol""];
""1515_transfer"" [label=""transfer""];
""1515_lockupAccounts"" [label=""lockupAccounts""];
""1515_isContract"" [label=""isContract""];
""1515_finishMinting"" [label=""finishMinting""];
""1515_fallback"" [label=""fallback""];
""1515_transferToAddress"" [label=""transferToAddress""];
""1515_mint"" [label=""mint""];
""1515_distributeAirdrop"" [label=""distributeAirdrop""];
""1515_totalSupply"" [label=""totalSupply""];
""1515_balanceOf"" [label=""balanceOf""];
""1515_collectTokens"" [label=""collectTokens""];
""1515_setDistributeAmount"" [label=""setDistributeAmount""];
""1515_freezeAccounts"" [label=""freezeAccounts""];
""1515_burn"" [label=""burn""];
""1515_name"" [label=""name""];
""1515_SAKECOIN"" [label=""SAKECOIN""];
""1515_finishMinting"" -> ""1515_onlyOwner"";
""1515_transferToContract"" -> ""1515_balanceOf"";
""1515_freezeAccounts"" -> ""1515_onlyOwner"";
""1515_transferToAddress"" -> ""1515_balanceOf"";
""1515_mint"" -> ""1515_canMint"";
""1515_transfer"" -> ""1515_isContract"";
""1515_mint"" -> ""1515_onlyOwner"";
""1515_transfer"" -> ""1515_transferToAddress"";
""1515_burn"" -> ""1515_balanceOf"";
""1515_burn"" -> ""1515_onlyOwner"";
""1515_collectTokens"" -> ""1515_onlyOwner"";
""1515_fallback"" -> ""1515_autoDistribute"";
""1515_transfer"" -> ""1515_balanceOf"";
""1515_setDistributeAmount"" -> ""1515_onlyOwner"";
""1515_transfer"" -> ""1515_transferToContract"";
""1515_lockupAccounts"" -> ""1515_onlyOwner"";
""1515_autoDistribute"" -> ""1515_balanceOf"";
""1515_finishMinting"" -> ""1515_canMint"";
}
"
0x0f33a2f6dc77be2134e1537bf919f7d9ef1d225d.sol,MOT,"contract MOT is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 100000000e18; uint256 public totalDistributed = 20000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 1500e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_851_MOT {
label=""MOT"";
""851_constructor"" [label=""constructor""];
""851_transfer"" [label=""transfer""];
""851_transferOwnership"" [label=""transferOwnership""];
""851_burn"" [label=""burn""];
""851_balanceOf"" [label=""balanceOf""];
""851_allowance"" [label=""allowance""];
""851_getTokens"" [label=""getTokens""];
""851_finishDistribution"" [label=""finishDistribution""];
""851_transferFrom"" [label=""transferFrom""];
""851_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""851_approve"" [label=""approve""];
""851_fallback"" [label=""fallback""];
""851_getTokenBalance"" [label=""getTokenBalance""];
""851_distr"" [label=""distr""];
""851_withdraw"" [label=""withdraw""];
""851_getTokens"" -> ""851_onlyWhitelist"";
""851_transfer"" -> ""851_onlyPayloadSize"";
""851_finishDistribution"" -> ""851_onlyOwner"";
""851_getTokens"" -> ""851_canDistr"";
""851_finishDistribution"" -> ""851_canDistr"";
""851_distr"" -> ""851_canDistr"";
""851_burn"" -> ""851_onlyOwner"";
""851_transferOwnership"" -> ""851_onlyOwner"";
""851_transferFrom"" -> ""851_onlyPayloadSize"";
""851_withdrawForeignTokens"" -> ""851_onlyOwner"";
""851_withdraw"" -> ""851_onlyOwner"";
""851_fallback"" -> ""851_getTokens"";
""851_getTokens"" -> ""851_distr"";
}
"
0x412c003380e08921be3ee7ee5830d3a00dd7e589.sol,AeternumLibertarianFoundationToken,"contract AeternumLibertarianFoundationToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function AeternumLibertarianFoundationToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_AeternumLibertarianFoundationToken {
label=""AeternumLibertarianFoundationToken"";
""361_burnFrom"" [label=""burnFrom""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_AeternumLibertarianFoundationToken"" [label=""AeternumLibertarianFoundationToken""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0xa5e5be69c923c701ae6ac8f1f5936af3ae610c68.sol,ERC721Enumerable,"contract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable { mapping(address => uint256[]) private _ownedTokens; mapping(uint256 => uint256) private _ownedTokensIndex; uint256[] private _allTokens; mapping(uint256 => uint256) private _allTokensIndex; bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63; constructor() public { _registerInterface(_InterfaceId_ERC721Enumerable); }",0,"subgraph cluster_1644_ERC721Enumerable {
label=""ERC721Enumerable"";
""1644_constructor"" [label=""constructor""];
""1644__addTokenTo"" [label=""_addTokenTo""];
""1644__removeTokenFrom"" [label=""_removeTokenFrom""];
""1644_tokenOfOwnerByIndex"" [label=""tokenOfOwnerByIndex""];
""1644_tokenByIndex"" [label=""tokenByIndex""];
""1644__burn"" [label=""_burn""];
""1644__mint"" [label=""_mint""];
""1644_totalSupply"" [label=""totalSupply""];
""1644__mint"" -> ""1644__mint"";
""1644__addTokenTo"" -> ""1644__addTokenTo"";
""1644_tokenByIndex"" -> ""1644_totalSupply"";
""1644_constructor"" -> ""1644__registerInterface"";
""1644__burn"" -> ""1644__burn"";
""1644__removeTokenFrom"" -> ""1644__removeTokenFrom"";
""1644_tokenOfOwnerByIndex"" -> ""1644_balanceOf"";
}
"
0x8c2d1d6259afd282ada6812d040f7173d83873ef.sol,LittleStoreERC20Token,"contract LittleStoreERC20Token { mapping (address => bool) public agents; address public addressERC20Token; InterfaceERC20Token internal ERC20Token; bool public sale; uint public price; uint public bonusLine; uint public bonusSize; event ChangePermission (address indexed _called, address indexed _to, bool _permission); event ChangeSaleSettings (address indexed _called, address indexed _token, uint _price, uint _bonusLine, uint _bonusSize); event Buy (address indexed _called, address indexed _token, uint _count, uint _bonusCount, uint _value); event Donate (address indexed _from, uint _value); function LittleStoreERC20Token () public { agents[msg.sender] = true; sale = true; }",0,"subgraph cluster_409_LittleStoreERC20Token {
label=""LittleStoreERC20Token"";
""409_changeSaleSettings"" [label=""changeSaleSettings""];
""409_withdrawalToken"" [label=""withdrawalToken""];
""409_allowanceTransfer"" [label=""allowanceTransfer""];
""409_changePermission"" [label=""changePermission""];
""409_fallback"" [label=""fallback""];
""409_saleValve"" [label=""saleValve""];
""409_buy"" [label=""buy""];
""409_destroy"" [label=""destroy""];
""409_LittleStoreERC20Token"" [label=""LittleStoreERC20Token""];
""409_withdrawal"" [label=""withdrawal""];
""409_totalSale"" [label=""totalSale""];
""409_changePermission"" -> ""409_onlyAdministrators"";
""409_destroy"" -> ""409_onlyAdministrators"";
""409_saleValve"" -> ""409_onlyAdministrators"";
""409_changeSaleSettings"" -> ""409_onlyAdministrators"";
""409_withdrawal"" -> ""409_onlyAdministrators"";
""409_destroy"" -> ""409_withdrawalToken"";
""409_withdrawalToken"" -> ""409_onlyAdministrators"";
""409_allowanceTransfer"" -> ""409_onlyAdministrators"";
}
"
0xee522a9bbe2507546aec572cea7be0f250cba0cb.sol,CentaToken,"contract CentaToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CentaToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xFa064973Ad2EF28Ce8e3a306c36CB57cBb9A1d82] = _totalSupply; Transfer(address(0), 0xFa064973Ad2EF28Ce8e3a306c36CB57cBb9A1d82, _totalSupply); }",0,"subgraph cluster_543_CentaToken {
label=""CentaToken"";
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_CentaToken"" [label=""CentaToken""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x3595279a9f0658eb2649976f155111bae1ae9de6.sol,GGE,"contract GGE { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function GGE( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_380_GGE {
label=""GGE"";
""380_burnFrom"" [label=""burnFrom""];
""380_burn"" [label=""burn""];
""380__transfer"" [label=""_transfer""];
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_GGE"" [label=""GGE""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0xee59784fc8fba300ae37fa41e229163dfaeb68c3.sol,ToolsChain,"contract ToolsChain is IERC20 { using SafeMath for uint256; address private owner; string public name = ; string public symbol = ; uint8 public constant decimals = 18; uint256 public constant decimalFactor = 10 ** uint256(decimals); uint256 public constant totalSupply = 1024000000 * decimalFactor; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event FrozenFunds(address target, bool frozen); constructor() public { balances[msg.sender] = totalSupply; owner = msg.sender; emit Transfer(address(0), msg.sender, totalSupply); }",0,"subgraph cluster_644_ToolsChain {
label=""ToolsChain"";
""644_increaseApproval"" [label=""increaseApproval""];
""644_freezeAccount"" [label=""freezeAccount""];
""644_transferFrom"" [label=""transferFrom""];
""644_constructor"" [label=""constructor""];
""644_withdraw"" [label=""withdraw""];
""644_balanceOf"" [label=""balanceOf""];
""644_transfer"" [label=""transfer""];
""644_approve"" [label=""approve""];
""644_decreaseApproval"" [label=""decreaseApproval""];
""644_allowance"" [label=""allowance""];
""644_fallback"" [label=""fallback""];
""644_withdraw"" -> ""644_onlyOwner"";
""644_freezeAccount"" -> ""644_onlyOwner"";
}
"
0x313f29ea49a9e6ca3b3e254335d4ec32ef5045f8.sol,SirinCrowdsale,contract SirinCrowdsale is FinalizableCrowdsale { uint8 public constant MAX_TOKEN_GRANTEES = 10; uint256 public constant EXCHANGE_RATE = 500; uint256 public constant REFUND_DIVISION_RATE = 2; modifier onlyWhileSale() { require(isActive()); _; },0,"subgraph cluster_2465_SirinCrowdsale {
label=""SirinCrowdsale"";
""2465_setFiatRaisedConvertedToWei"" [label=""setFiatRaisedConvertedToWei""];
""2465_addUpdateGrantee"" [label=""addUpdateGrantee""];
""2465_deleteGrantee"" [label=""deleteGrantee""];
""2465_SirinCrowdsale"" [label=""SirinCrowdsale""];
""2465_isActive"" [label=""isActive""];
""2465_claimTokenOwnership"" [label=""claimTokenOwnership""];
""2465_claimRefundVaultOwnership"" [label=""claimRefundVaultOwnership""];
""2465_buyTokensWithGuarantee"" [label=""buyTokensWithGuarantee""];
""2465_getRate"" [label=""getRate""];
""2465_finalization"" [label=""finalization""];
""2465_getTotalFundsRaised"" [label=""getTotalFundsRaised""];
""2465_addUpdateGrantee"" -> ""2465_onlyWhileSale"";
""2465_finalization"" -> ""2465_finalization"";
""2465_buyTokensWithGuarantee"" -> ""2465_validPurchase"";
""2465_deleteGrantee"" -> ""2465_onlyOwner"";
""2465_buyTokensWithGuarantee"" -> ""2465_getRate"";
""2465_setFiatRaisedConvertedToWei"" -> ""2465_onlyWhileSale"";
""2465_claimTokenOwnership"" -> ""2465_onlyOwner"";
""2465_addUpdateGrantee"" -> ""2465_onlyOwner"";
""2465_SirinCrowdsale"" -> ""2465_Crowdsale"";
""2465_deleteGrantee"" -> ""2465_onlyWhileSale"";
""2465_finalization"" -> ""2465_onlyOwner"";
""2465_claimRefundVaultOwnership"" -> ""2465_onlyOwner"";
""2465_setFiatRaisedConvertedToWei"" -> ""2465_onlyOwner"";
}
"
0x6ddcc353122f36f6976baadd5ef62e56f39dd960.sol,PODSSale,"contract PODSSale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); function PODSSale() public { beneficiary = address(0x0D2e5bd9C6DDc363586061C6129D6122f0D7a2CB); fundingGoal = 80 ether; deadline = now + 43210 minutes; price = 25000; tokenReward = token(address(0xEa29Ac8Bf5001592178F6Cd1275A1D0433F94C5B)); }",0,"subgraph cluster_231_PODSSale {
label=""PODSSale"";
""231_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""231_checkGoalReached"" [label=""checkGoalReached""];
""231_PODSSale"" [label=""PODSSale""];
""231_safeWithdrawal"" [label=""safeWithdrawal""];
""231_fallback"" [label=""fallback""];
""231_checkGoalReached"" -> ""231_afterDeadline"";
}
"
0x2c110867ca90e43d372c1c2e92990b00ea32818b.sol,FiatDex_protocol_v1,contract FiatDex_protocol_v1 { address public owner; uint256 public feeDelay = 7; uint256 public dailyFeeIncrease = 1000; uint256 public version = 1; constructor() public { owner = msg.sender; },0,"subgraph cluster_501_FiatDex_protocol_v1 {
label=""FiatDex_protocol_v1"";
""501_closeSwap"" [label=""closeSwap""];
""501_viewFiatDexSpecs"" [label=""viewFiatDexSpecs""];
""501_changeContractOwner"" [label=""changeContractOwner""];
""501_addFiatTraderCollateral"" [label=""addFiatTraderCollateral""];
""501_openSwap"" [label=""openSwap""];
""501_viewSwap"" [label=""viewSwap""];
""501_constructor"" [label=""constructor""];
""501_refundSwap"" [label=""refundSwap""];
""501_openSwap"" -> ""501_onlyNotOpenSwaps"";
""501_closeSwap"" -> ""501_onlyActiveSwaps"";
""501_addFiatTraderCollateral"" -> ""501_onlyInitializedSwaps"";
""501_refundSwap"" -> ""501_onlyInitializedSwaps"";
}
"
0x704a1e04ca263c4af14fca6cd5cc371d247bd200.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowed; uint256 private _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },0,"subgraph cluster_194_IERC20 {
label=""IERC20"";
""194_transfer"" [label=""transfer""];
""194_balanceOf"" [label=""balanceOf""];
""194_approve"" [label=""approve""];
""194_allowance"" [label=""allowance""];
""194_transferFrom"" [label=""transferFrom""];
""194_totalSupply"" [label=""totalSupply""];
}
"
0x54ad74edeab48e09ccc43ee324f2603071dad72b.sol,DTOPToken,"contract DTOPToken is ERC20, Ownable, Pausable { using SafeMath for uint256; struct LockupInfo { uint256 releaseTime; uint256 termOfRound; uint256 unlockAmountPerRound; uint256 lockupBalance; }",0,"subgraph cluster_1384_DTOPToken {
label=""DTOPToken"";
""1384_unlock"" [label=""unlock""];
""1384_showLockState"" [label=""showLockState""];
""1384_mint"" [label=""mint""];
""1384_constructor"" [label=""constructor""];
""1384_isContract"" [label=""isContract""];
""1384_approve"" [label=""approve""];
""1384_approveAndCall"" [label=""approveAndCall""];
""1384_autoUnlock"" [label=""autoUnlock""];
""1384_distribute"" [label=""distribute""];
""1384_unfreezeAccount"" [label=""unfreezeAccount""];
""1384_releaseTimeLock"" [label=""releaseTimeLock""];
""1384_lock"" [label=""lock""];
""1384_freezeAccount"" [label=""freezeAccount""];
""1384_transferFrom"" [label=""transferFrom""];
""1384_fallback"" [label=""fallback""];
""1384_totalSupply"" [label=""totalSupply""];
""1384_burn"" [label=""burn""];
""1384_getNowTime"" [label=""getNowTime""];
""1384_lockupBalance"" [label=""lockupBalance""];
""1384_distributeWithLockup"" [label=""distributeWithLockup""];
""1384_claimToken"" [label=""claimToken""];
""1384_transfer"" [label=""transfer""];
""1384_balanceOf"" [label=""balanceOf""];
""1384_allowance"" [label=""allowance""];
""1384_autoUnlock"" -> ""1384_releaseTimeLock"";
""1384_distributeWithLockup"" -> ""1384_lock"";
""1384_lock"" -> ""1384_onlyOwner"";
""1384_distributeWithLockup"" -> ""1384_onlyOwner"";
""1384_transferFrom"" -> ""1384_autoUnlock"";
""1384_transfer"" -> ""1384_autoUnlock"";
""1384_mint"" -> ""1384_onlyOwner"";
""1384_burn"" -> ""1384_onlyOwner"";
""1384_approve"" -> ""1384_whenNotPaused"";
""1384_transferFrom"" -> ""1384_notFrozen"";
""1384_unlock"" -> ""1384_onlyOwner"";
""1384_transfer"" -> ""1384_notFrozen"";
""1384_freezeAccount"" -> ""1384_onlyOwner"";
""1384_approveAndCall"" -> ""1384_isContract"";
""1384_distribute"" -> ""1384_onlyOwner"";
""1384_transfer"" -> ""1384_whenNotPaused"";
""1384_unfreezeAccount"" -> ""1384_onlyOwner"";
""1384_distributeWithLockup"" -> ""1384_distribute"";
""1384_transferFrom"" -> ""1384_whenNotPaused"";
""1384_approveAndCall"" -> ""1384_approve"";
""1384_claimToken"" -> ""1384_onlyOwner"";
}
"
0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol,Stoppable,"contract Stoppable is Auth, Note { bool public stopped; modifier stoppable { require (!stopped); _; }",0,"subgraph cluster_948_Stoppable {
label=""Stoppable"";
""948_start"" [label=""start""];
""948_stop"" [label=""stop""];
""948_stop"" -> ""948_note"";
""948_stop"" -> ""948_auth"";
""948_start"" -> ""948_auth"";
""948_start"" -> ""948_note"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,EtherNomin,"contract EtherNomin is ExternStateProxyFeeToken { address public oracle; Court public court; address public beneficiary; uint public nominPool; uint public poolFeeRate = UNIT / 200; uint constant MINIMUM_PURCHASE = UNIT / 100; uint constant MINIMUM_ISSUANCE_RATIO = 2 * UNIT; uint constant AUTO_LIQUIDATION_RATIO = UNIT; uint constant DEFAULT_LIQUIDATION_PERIOD = 90 days; uint constant MAX_LIQUIDATION_PERIOD = 180 days; uint public liquidationPeriod = DEFAULT_LIQUIDATION_PERIOD; uint public liquidationTimestamp = ~uint(0); uint public etherPrice; uint public lastPriceUpdate; uint public stalePeriod = 2 days; mapping(address => bool) public frozen; function EtherNomin(address _havven, address _oracle, address _beneficiary, uint initialEtherPrice, address _owner, TokenState initialState) ExternStateProxyFeeToken(, , 15 * UNIT / 10000, _havven, initialState, _owner) public { oracle = _oracle; beneficiary = _beneficiary; etherPrice = initialEtherPrice; lastPriceUpdate = now; emit PriceUpdated(etherPrice); frozen[this] = true; }",0,"subgraph cluster_3176_EtherNomin {
label=""EtherNomin"";
""3176_etherValue"" [label=""etherValue""];
""3176_frozen"" [label=""frozen""];
""3176_purchaseCostEther"" [label=""purchaseCostEther""];
""3176_etherValueAllowStale"" [label=""etherValueAllowStale""];
""3176_collateralisationRatio"" [label=""collateralisationRatio""];
""3176_fallback"" [label=""fallback""];
""3176_saleProceedsEtherAllowStale"" [label=""saleProceedsEtherAllowStale""];
""3176_poolFeeIncurred"" [label=""poolFeeIncurred""];
""3176_buy"" [label=""buy""];
""3176_sell"" [label=""sell""];
""3176_beginLiquidation"" [label=""beginLiquidation""];
""3176_updatePrice"" [label=""updatePrice""];
""3176_isLiquidating"" [label=""isLiquidating""];
""3176_terminateLiquidation"" [label=""terminateLiquidation""];
""3176_saleProceedsFiat"" [label=""saleProceedsFiat""];
""3176_EtherNomin"" [label=""EtherNomin""];
""3176_unfreezeAccount"" [label=""unfreezeAccount""];
""3176_confiscateBalance"" [label=""confiscateBalance""];
""3176_setStalePeriod"" [label=""setStalePeriod""];
""3176_setCourt"" [label=""setCourt""];
""3176_replenishPool"" [label=""replenishPool""];
""3176_fiatBalance"" [label=""fiatBalance""];
""3176_canSelfDestruct"" [label=""canSelfDestruct""];
""3176_transfer"" [label=""transfer""];
""3176_purchaseCostFiat"" [label=""purchaseCostFiat""];
""3176_setPoolFeeRate"" [label=""setPoolFeeRate""];
""3176_setBeneficiary"" [label=""setBeneficiary""];
""3176_transferFrom"" [label=""transferFrom""];
""3176_forceLiquidation"" [label=""forceLiquidation""];
""3176_selfDestruct"" [label=""selfDestruct""];
""3176__nominCap"" [label=""_nominCap""];
""3176_saleProceedsEther"" [label=""saleProceedsEther""];
""3176_diminishPool"" [label=""diminishPool""];
""3176_priceIsStale"" [label=""priceIsStale""];
""3176_setOracle"" [label=""setOracle""];
""3176_extendLiquidationPeriod"" [label=""extendLiquidationPeriod""];
""3176_fiatValue"" [label=""fiatValue""];
""3176_extendLiquidationPeriod"" -> ""3176_safeAdd"";
""3176_buy"" -> ""3176_safeAdd"";
""3176_poolFeeIncurred"" -> ""3176_safeMul_dec"";
""3176_sell"" -> ""3176_saleProceedsEtherAllowStale"";
""3176_buy"" -> ""3176_safeSub"";
""3176_replenishPool"" -> ""3176_safeMul_dec"";
""3176_forceLiquidation"" -> ""3176_notLiquidating"";
""3176_purchaseCostFiat"" -> ""3176_poolFeeIncurred"";
""3176_saleProceedsFiat"" -> ""3176_poolFeeIncurred"";
""3176_collateralisationRatio"" -> ""3176__nominCap"";
""3176_priceIsStale"" -> ""3176_safeAdd"";
""3176_setOracle"" -> ""3176_optionalProxy_onlyOwner"";
""3176_terminateLiquidation"" -> ""3176_isLiquidating"";
""3176_forceLiquidation"" -> ""3176_beginLiquidation"";
""3176_unfreezeAccount"" -> ""3176_optionalProxy_onlyOwner"";
""3176_saleProceedsEther"" -> ""3176_saleProceedsFiat"";
""3176_buy"" -> ""3176_notLiquidating"";
""3176_saleProceedsEtherAllowStale"" -> ""3176_saleProceedsFiat"";
""3176_collateralisationRatio"" -> ""3176_fiatBalance"";
""3176_buy"" -> ""3176_optionalProxy"";
""3176_canSelfDestruct"" -> ""3176_isLiquidating"";
""3176_etherValue"" -> ""3176_safeDiv_dec"";
""3176_transferFrom"" -> ""3176_optionalProxy"";
""3176_replenishPool"" -> ""3176_safeAdd"";
""3176_confiscateBalance"" -> ""3176_safeAdd"";
""3176_saleProceedsEtherAllowStale"" -> ""3176_etherValueAllowStale"";
""3176_buy"" -> ""3176_purchaseCostEther"";
""3176_fiatBalance"" -> ""3176_fiatValue"";
""3176_terminateLiquidation"" -> ""3176_priceNotStale"";
""3176_selfDestruct"" -> ""3176_optionalProxy_onlyOwner"";
""3176_setPoolFeeRate"" -> ""3176_optionalProxy_onlyOwner"";
""3176_transfer"" -> ""3176_optionalProxy"";
""3176_terminateLiquidation"" -> ""3176_optionalProxy_onlyOwner"";
""3176_etherValueAllowStale"" -> ""3176_safeDiv_dec"";
""3176_transferFrom"" -> ""3176__transferFrom_byProxy"";
""3176_replenishPool"" -> ""3176_fiatBalance"";
""3176_replenishPool"" -> ""3176_optionalProxy_onlyOwner"";
""3176_replenishPool"" -> ""3176__nominCap"";
""3176_sell"" -> ""3176_isLiquidating"";
""3176_fiatValue"" -> ""3176_priceNotStale"";
""3176_terminateLiquidation"" -> ""3176_collateralisationRatio"";
""3176_saleProceedsEther"" -> ""3176_etherValue"";
""3176_terminateLiquidation"" -> ""3176__nominCap"";
""3176_setCourt"" -> ""3176_optionalProxy_onlyOwner"";
""3176_sell"" -> ""3176_safeSub"";
""3176_EtherNomin"" -> ""3176_ExternStateProxyFeeToken"";
""3176_selfDestruct"" -> ""3176_canSelfDestruct"";
""3176__nominCap"" -> ""3176_safeAdd"";
""3176_diminishPool"" -> ""3176_optionalProxy_onlyOwner"";
""3176_updatePrice"" -> ""3176_postCheckAutoLiquidate"";
""3176_diminishPool"" -> ""3176_safeSub"";
""3176_setBeneficiary"" -> ""3176_optionalProxy_onlyOwner"";
""3176_sell"" -> ""3176_safeAdd"";
""3176_purchaseCostFiat"" -> ""3176_safeAdd"";
""3176_collateralisationRatio"" -> ""3176_safeDiv_dec"";
""3176_etherValue"" -> ""3176_priceNotStale"";
""3176_forceLiquidation"" -> ""3176_optionalProxy_onlyOwner"";
""3176_sell"" -> ""3176_saleProceedsEther"";
""3176_saleProceedsFiat"" -> ""3176_safeSub"";
""3176_sell"" -> ""3176_optionalProxy"";
""3176_fiatValue"" -> ""3176_safeMul_dec"";
""3176_purchaseCostEther"" -> ""3176_etherValue"";
""3176_extendLiquidationPeriod"" -> ""3176_isLiquidating"";
""3176_replenishPool"" -> ""3176_notLiquidating"";
""3176_extendLiquidationPeriod"" -> ""3176_optionalProxy_onlyOwner"";
""3176_setStalePeriod"" -> ""3176_optionalProxy_onlyOwner"";
""3176_purchaseCostEther"" -> ""3176_purchaseCostFiat"";
""3176_transfer"" -> ""3176__transfer_byProxy"";
}
"
0x9241b4c67b6cdf9b99f5f50de21283d0441eff75.sol,Treasury,"contract Treasury is owned { event Added( address indexed trustee ); event Flagged( address indexed trustee, bool isRaised ); event Replaced( address indexed older, address indexed newer ); event Proposal( address indexed payee, uint amt, string eref ); event Approved( address indexed approver, address indexed to, uint amount, string eref ); event Spent( address indexed payee, uint amt, string eref ); struct SpendProposal { address payee; uint amount; string eref; address[] approvals; }",0,"subgraph cluster_560_Treasury {
label=""Treasury"";
""560_flag"" [label=""flag""];
""560_replace"" [label=""replace""];
""560_proposal"" [label=""proposal""];
""560_strcmp"" [label=""strcmp""];
""560_add"" [label=""add""];
""560_Treasury"" [label=""Treasury""];
""560_approve"" [label=""approve""];
""560_fallback"" [label=""fallback""];
""560_replace"" -> ""560_onlyTreasurer"";
""560_proposal"" -> ""560_onlyTreasurer"";
""560_flag"" -> ""560_onlyTreasurer"";
""560_add"" -> ""560_onlyTreasurer"";
""560_approve"" -> ""560_strcmp"";
}
"
0x87cdabc87128476d84462eb9c5a67a7acfa7889e.sol,Escrow,"contract Escrow is Ownable { using SafeMath for uint256; event Deposited(address indexed payee, uint256 weiAmount); event Withdrawn(address indexed payee, uint256 weiAmount); mapping(address => uint256) private deposits; function depositsOf(address _payee) public view returns (uint256) { return deposits[_payee]; }",0,"subgraph cluster_512_RefundEscrow {
label=""RefundEscrow"";
""512_beneficiaryWithdraw"" [label=""beneficiaryWithdraw""];
""512_close"" [label=""close""];
""512_deposit"" [label=""deposit""];
""512_enableRefunds"" [label=""enableRefunds""];
""512_constructor"" [label=""constructor""];
""512_withdrawalAllowed"" [label=""withdrawalAllowed""];
""512_enableRefunds"" -> ""512_onlyOwner"";
""512_deposit"" -> ""512_deposit"";
""512_close"" -> ""512_onlyOwner"";
}
"
0xc08dcf2fa37b87a89ac7f0fdcb4aebda378dea29.sol,MITToken,contract MITToken is SafeMath{ string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping(uint => Holder) public lockholders; uint public lockholderNumber; struct Holder { address eth_address; uint exp_time; },0,"subgraph cluster_658_MITToken {
label=""MITToken"";
""658_validHolder"" [label=""validHolder""];
""658_transferFrom"" [label=""transferFrom""];
""658__transfer"" [label=""_transfer""];
""658_constructor"" [label=""constructor""];
""658_approve"" [label=""approve""];
""658__unlockToken"" [label=""_unlockToken""];
""658_burn"" [label=""burn""];
""658_burnFrom"" [label=""burnFrom""];
""658_approveAndCall"" [label=""approveAndCall""];
""658__lockToken"" [label=""_lockToken""];
""658_transfer"" [label=""transfer""];
""658__transfer"" -> ""658_safeAdd"";
""658_approveAndCall"" -> ""658_approve"";
""658__transfer"" -> ""658_safeSub"";
""658_transferFrom"" -> ""658__transfer"";
""658_transfer"" -> ""658__transfer"";
""658__transfer"" -> ""658_validHolder"";
}
"
0xdc8a6ef9a8a4114773e806dc24bb8e7b6f3d92eb.sol,CryptoBossWannaCry,contract CryptoBossWannaCry is PullPayment{ bool init = false; address public administrator; uint256 public bossRoundNumber; uint256 public BOSS_HP_DEFAULT = 10000000; uint256 public HALF_TIME_ATK_BOSS = 0; uint256 constant public VIRUS_MINING_PERIOD = 86400; uint256 public BOSS_DEF_DEFFAULT = 0; CryptoEngineerInterface public Engineer; CryptoMiningWarInterface public MiningWar; mapping(address => PlayerData) public players; mapping(uint256 => BossData) public bossData; mapping(address => bool) public miniGames; struct PlayerData { uint256 currentBossRoundNumber; uint256 lastBossRoundNumber; uint256 win; uint256 share; uint256 dame; uint256 nextTimeAtk; },0,"subgraph cluster_1272_CryptoBossWannaCry {
label=""CryptoBossWannaCry"";
""1272_startGame"" [label=""startGame""];
""1272_isBossWannaCryContract"" [label=""isBossWannaCryContract""];
""1272_getCurrentReward"" [label=""getCurrentReward""];
""1272_endAtkBoss"" [label=""endAtkBoss""];
""1272_updateShareETH"" [label=""updateShareETH""];
""1272_setContractsMiniGame"" [label=""setContractsMiniGame""];
""1272_isContractMiniGame"" [label=""isContractMiniGame""];
""1272_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1272_startNewBoss"" [label=""startNewBoss""];
""1272_setEngineerInterface"" [label=""setEngineerInterface""];
""1272_constructor"" [label=""constructor""];
""1272_setHalfTimeAtkBoss"" [label=""setHalfTimeAtkBoss""];
""1272_calculateShareETH"" [label=""calculateShareETH""];
""1272_atkBoss"" [label=""atkBoss""];
""1272_fallback"" [label=""fallback""];
""1272_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1272_setBossHPDefault"" [label=""setBossHPDefault""];
""1272_upgrade"" [label=""upgrade""];
""1272_setDefenceBoss"" [label=""setDefenceBoss""];
""1272_setupMiniGame"" [label=""setupMiniGame""];
""1272_devFee"" [label=""devFee""];
""1272_setBossRoundNumber"" [label=""setBossRoundNumber""];
""1272_randomNumber"" [label=""randomNumber""];
""1272_withdrawReward"" [label=""withdrawReward""];
""1272_endAtkBoss"" -> ""1272_startNewBoss"";
""1272_constructor"" -> ""1272_setMiningWarInterface"";
""1272_setHalfTimeAtkBoss"" -> ""1272_isAdministrator"";
""1272_setDefenceBoss"" -> ""1272_isAdministrator"";
""1272_startGame"" -> ""1272_startNewBoss"";
""1272_startGame"" -> ""1272_isAdministrator"";
""1272_getCurrentReward"" -> ""1272_calculateShareETH"";
""1272_atkBoss"" -> ""1272_updateShareETH"";
""1272_setBossRoundNumber"" -> ""1272_isAdministrator"";
""1272_setContractsMiniGame"" -> ""1272_isAdministrator"";
""1272_upgrade"" -> ""1272_isAdministrator"";
""1272_atkBoss"" -> ""1272_randomNumber"";
""1272_setEngineerInterface"" -> ""1272_isAdministrator"";
""1272_updateShareETH"" -> ""1272_calculateShareETH"";
""1272_withdrawReward"" -> ""1272_updateShareETH"";
""1272_removeContractMiniGame"" -> ""1272_isAdministrator"";
""1272_atkBoss"" -> ""1272_disableContract"";
""1272_atkBoss"" -> ""1272_endAtkBoss"";
""1272_constructor"" -> ""1272_setEngineerInterface"";
""1272_setBossHPDefault"" -> ""1272_isAdministrator"";
""1272_setMiningWarInterface"" -> ""1272_isAdministrator"";
}
"
0xf07d979303c50a8632848cb154c6b30980218c07.sol,PXLProperty,contract PXLProperty is StandardToken { uint8 constant LEVEL_1_MODERATOR = 1; uint8 constant LEVEL_2_MODERATOR = 2; uint8 constant LEVEL_1_ADMIN = 3; uint8 constant LEVEL_2_ADMIN = 4; uint8 constant LEVEL_1_ROOT = 5; uint8 constant LEVEL_2_ROOT = 6; uint8 constant LEVEL_3_ROOT = 7; uint8 constant LEVEL_PROPERTY_DAPPS = 8; uint8 constant LEVEL_PIXEL_PROPERTY = 9; uint8 constant FLAG_NSFW = 1; uint8 constant FLAG_BAN = 2; address pixelPropertyContract; mapping (address => uint8) public regulators; mapping (uint16 => Property) public properties; mapping (address => uint256[2]) public ownerWebsite; mapping (address => uint256[2]) public ownerHoverText; struct Property { uint8 flag; bool isInPrivateMode; address owner; address lastUpdater; uint256[5] colors; uint256 salePrice; uint256 lastUpdate; uint256 becomePublic; uint256 earnUntil; },0,"subgraph cluster_1595_PXLProperty {
label=""PXLProperty"";
""1595_setPixelPropertyContract"" [label=""setPixelPropertyContract""];
""1595_setPropertyEarnUntil"" [label=""setPropertyEarnUntil""];
""1595_getPropertyEarnUntil"" [label=""getPropertyEarnUntil""];
""1595_getPropertyData"" [label=""getPropertyData""];
""1595_setPropertyLastUpdate"" [label=""setPropertyLastUpdate""];
""1595_getPropertyLastUpdater"" [label=""getPropertyLastUpdater""];
""1595_setPropertyPrivateMode"" [label=""setPropertyPrivateMode""];
""1595_setOwnerLink"" [label=""setOwnerLink""];
""1595_rewardPXL"" [label=""rewardPXL""];
""1595_getPropertyPrivateMode"" [label=""getPropertyPrivateMode""];
""1595_getPropertySalePrice"" [label=""getPropertySalePrice""];
""1595_setPropertyOwnerSalePrice"" [label=""setPropertyOwnerSalePrice""];
""1595_setPropertySalePrice"" [label=""setPropertySalePrice""];
""1595_setPropertyLastUpdater"" [label=""setPropertyLastUpdater""];
""1595_setPropertyPrivateModeEarnUntilLastUpdateBecomePublic"" [label=""setPropertyPrivateModeEarnUntilLastUpdateBecomePublic""];
""1595_getPropertyOwner"" [label=""getPropertyOwner""];
""1595_setPropertyLastUpdaterLastUpdate"" [label=""setPropertyLastUpdaterLastUpdate""];
""1595_getPropertyLastUpdaterBecomePublic"" [label=""getPropertyLastUpdaterBecomePublic""];
""1595_setPropertyOwnerSalePricePrivateModeFlag"" [label=""setPropertyOwnerSalePricePrivateModeFlag""];
""1595_getPropertyColorsOfRow"" [label=""getPropertyColorsOfRow""];
""1595_setPropertyOwner"" [label=""setPropertyOwner""];
""1595_setPropertyBecomePublic"" [label=""setPropertyBecomePublic""];
""1595_setPropertyFlag"" [label=""setPropertyFlag""];
""1595_getRegulatorLevel"" [label=""getRegulatorLevel""];
""1595_setOwnerHoverText"" [label=""setOwnerHoverText""];
""1595_setPropertyRowColor"" [label=""setPropertyRowColor""];
""1595_setPropertyBecomePublicEarnUntil"" [label=""setPropertyBecomePublicEarnUntil""];
""1595_burnPXL"" [label=""burnPXL""];
""1595_getPropertyFlag"" [label=""getPropertyFlag""];
""1595_setPropertyColors"" [label=""setPropertyColors""];
""1595_getOwnerHoverText"" [label=""getOwnerHoverText""];
""1595_getPropertyColors"" [label=""getPropertyColors""];
""1595_getPropertyPrivateModeLastUpdateEarnUntil"" [label=""getPropertyPrivateModeLastUpdateEarnUntil""];
""1595_getOwnerLink"" [label=""getOwnerLink""];
""1595_setRegulatorAccessLevel"" [label=""setRegulatorAccessLevel""];
""1595_burnPXLRewardPXLx2"" [label=""burnPXLRewardPXLx2""];
""1595_getPropertyBecomePublic"" [label=""getPropertyBecomePublic""];
""1595_getPropertyLastUpdate"" [label=""getPropertyLastUpdate""];
""1595_setPropertyDAppContract"" [label=""setPropertyDAppContract""];
""1595_getPropertyOwnerSalePrice"" [label=""getPropertyOwnerSalePrice""];
""1595_burnPXLRewardPXL"" [label=""burnPXLRewardPXL""];
""1595_getPropertyPrivateModeBecomePublic"" [label=""getPropertyPrivateModeBecomePublic""];
""1595_PXLProperty"" [label=""PXLProperty""];
""1595_setOwnerHoverText"" -> ""1595_propertyDAppAccess"";
""1595_setPropertyOwnerSalePricePrivateModeFlag"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyOwner"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyBecomePublic"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyBecomePublicEarnUntil"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyEarnUntil"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyLastUpdate"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyPrivateMode"" -> ""1595_pixelPropertyAccess"";
""1595_burnPXLRewardPXL"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyLastUpdaterLastUpdate"" -> ""1595_pixelPropertyAccess"";
""1595_rewardPXL"" -> ""1595_pixelPropertyAccess"";
""1595_burnPXLRewardPXLx2"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyOwnerSalePrice"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyDAppContract"" -> ""1595_regulatorAccess"";
""1595_setPropertyFlag"" -> ""1595_regulatorAccess"";
""1595_burnPXL"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyPrivateModeEarnUntilLastUpdateBecomePublic"" -> ""1595_pixelPropertyAccess"";
""1595_setPixelPropertyContract"" -> ""1595_regulatorAccess"";
""1595_setPropertyColors"" -> ""1595_propertyDAppAccess"";
""1595_setRegulatorAccessLevel"" -> ""1595_regulatorAccess"";
""1595_setPropertySalePrice"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyRowColor"" -> ""1595_propertyDAppAccess"";
""1595_setOwnerLink"" -> ""1595_propertyDAppAccess"";
""1595_setPropertyLastUpdater"" -> ""1595_pixelPropertyAccess"";
}
"
0x57f097e0371d35f55a79a7c6f1ae2675c2f1efc4.sol,KYC,"contract KYC is Ownable { mapping (address => bool) public registeredAddress; mapping (address => bool) public admin; event Registered(address indexed _addr); event Unregistered(address indexed _addr); event SetAdmin(address indexed _addr, bool indexed _isAdmin); modifier onlyAdmin() { require(admin[msg.sender]); _; }",0,"subgraph cluster_257_KYC {
label=""KYC"";
""257_setAdmin"" [label=""setAdmin""];
""257_unregisterByList"" [label=""unregisterByList""];
""257_unregister"" [label=""unregister""];
""257_register"" [label=""register""];
""257_registerByList"" [label=""registerByList""];
""257_KYC"" [label=""KYC""];
""257_register"" -> ""257_onlyAdmin"";
""257_setAdmin"" -> ""257_onlyOwner"";
""257_registerByList"" -> ""257_onlyAdmin"";
""257_unregisterByList"" -> ""257_onlyAdmin"";
""257_unregister"" -> ""257_onlyAdmin"";
}
"
0xc0137065fa2214705f9fc921b68ace133fdf57a6.sol,DivMultisigHackable,contract DivMultisigHackable is Owned { using SafeMath for uint; HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe); SPASMInterface constant SPASM_ = SPASMInterface(0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1); function buyp3d(uint256 amt) internal{ P3Dcontract_.buy.value(amt)(this); },0,"subgraph cluster_884_DivMultisigHackable {
label=""DivMultisigHackable"";
""884_claimdivs"" [label=""claimdivs""];
""884_fallback"" [label=""fallback""];
""884_changevanity"" [label=""changevanity""];
""884_buyp3d"" [label=""buyp3d""];
""884_ethtobuyp3d"" [label=""ethtobuyp3d""];
""884_constructor"" [label=""constructor""];
""884_blockstillcontracthackable"" [label=""blockstillcontracthackable""];
""884_Expand"" [label=""Expand""];
""884_HackableETH"" [label=""HackableETH""];
""884_getMultisigencryotion"" [label=""getMultisigencryotion""];
""884_last50plusblokhack"" [label=""last50plusblokhack""];
""884_Encrypt"" [label=""Encrypt""];
""884_Hacksig"" [label=""Hacksig""];
""884_getMultisigOwner"" [label=""getMultisigOwner""];
""884_HackDivs"" [label=""HackDivs""];
""884_HackContract"" [label=""HackContract""];
""884_FetchlastHacker"" [label=""FetchlastHacker""];
""884_harvestabledivs"" [label=""harvestabledivs""];
""884_amountofp3d"" [label=""amountofp3d""];
""884_getMultisigcost"" [label=""getMultisigcost""];
""884_FetchVanity"" [label=""FetchVanity""];
""884_HackDivs"" -> ""884_claimdivs"";
""884_HackDivs"" -> ""884_harvestabledivs"";
}
"
0x887834d3b8d450b6bab109c252df3da286d73ce4.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1161_MiniMeToken {
label=""MiniMeToken"";
""1161_approveAndCall"" [label=""approveAndCall""];
""1161_totalSupply"" [label=""totalSupply""];
""1161_balanceOf"" [label=""balanceOf""];
""1161_updateValueAtNow"" [label=""updateValueAtNow""];
""1161_min"" [label=""min""];
""1161_createCloneToken"" [label=""createCloneToken""];
""1161_totalSupplyAt"" [label=""totalSupplyAt""];
""1161_enableTransfers"" [label=""enableTransfers""];
""1161_isContract"" [label=""isContract""];
""1161_balanceOfAt"" [label=""balanceOfAt""];
""1161_destroyTokens"" [label=""destroyTokens""];
""1161_getValueAt"" [label=""getValueAt""];
""1161_allowance"" [label=""allowance""];
""1161_MiniMeToken"" [label=""MiniMeToken""];
""1161_transferFrom"" [label=""transferFrom""];
""1161_fallback"" [label=""fallback""];
""1161_doTransfer"" [label=""doTransfer""];
""1161_claimTokens"" [label=""claimTokens""];
""1161_getBlockNumber"" [label=""getBlockNumber""];
""1161_transfer"" [label=""transfer""];
""1161_generateTokens"" [label=""generateTokens""];
""1161_approve"" [label=""approve""];
""1161_totalSupply"" -> ""1161_totalSupplyAt"";
""1161_destroyTokens"" -> ""1161_onlyController"";
""1161_balanceOfAt"" -> ""1161_min"";
""1161_generateTokens"" -> ""1161_balanceOf"";
""1161_MiniMeToken"" -> ""1161_getBlockNumber"";
""1161_doTransfer"" -> ""1161_isContract"";
""1161_generateTokens"" -> ""1161_onlyController"";
""1161_totalSupplyAt"" -> ""1161_getValueAt"";
""1161_balanceOf"" -> ""1161_balanceOfAt"";
""1161_generateTokens"" -> ""1161_updateValueAtNow"";
""1161_enableTransfers"" -> ""1161_onlyController"";
""1161_generateTokens"" -> ""1161_getValueAt"";
""1161_doTransfer"" -> ""1161_updateValueAtNow"";
""1161_destroyTokens"" -> ""1161_updateValueAtNow"";
""1161_destroyTokens"" -> ""1161_getBlockNumber"";
""1161_doTransfer"" -> ""1161_getBlockNumber"";
""1161_approve"" -> ""1161_isContract"";
""1161_totalSupplyAt"" -> ""1161_min"";
""1161_balanceOfAt"" -> ""1161_getValueAt"";
""1161_totalSupply"" -> ""1161_getBlockNumber"";
""1161_destroyTokens"" -> ""1161_balanceOf"";
""1161_transferFrom"" -> ""1161_doTransfer"";
""1161_balanceOf"" -> ""1161_getBlockNumber"";
""1161_doTransfer"" -> ""1161_balanceOfAt"";
""1161_destroyTokens"" -> ""1161_getValueAt"";
""1161_generateTokens"" -> ""1161_getBlockNumber"";
""1161_claimTokens"" -> ""1161_onlyController"";
""1161_createCloneToken"" -> ""1161_getBlockNumber"";
""1161_fallback"" -> ""1161_isContract"";
""1161_updateValueAtNow"" -> ""1161_getBlockNumber"";
""1161_transfer"" -> ""1161_doTransfer"";
""1161_approveAndCall"" -> ""1161_approve"";
}
"
0xf072f26100522ff1d5ecf40e74db5c25643b3e36.sol,PlaceToken,"contract PlaceToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.01 ether; uint256 private firstStepLimit = 0.8 ether; uint256 private secondStepLimit = 12 ether; mapping (uint256 => address) public placeIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public placeIndexToApproved; mapping (uint256 => uint256) private placeIndexToPrice; address public ceoAddress; struct Place { string name; string country; string owner_name; }",0,"subgraph cluster_863_PlaceToken {
label=""PlaceToken"";
""863_PlaceToken"" [label=""PlaceToken""];
""863_createContractPlace"" [label=""createContractPlace""];
""863_approve"" [label=""approve""];
""863_name"" [label=""name""];
""863__owns"" [label=""_owns""];
""863__approved"" [label=""_approved""];
""863_setStartingPrice"" [label=""setStartingPrice""];
""863_setOwnerName"" [label=""setOwnerName""];
""863_payout"" [label=""payout""];
""863_symbol"" [label=""symbol""];
""863_takeOwnership"" [label=""takeOwnership""];
""863_transferFrom"" [label=""transferFrom""];
""863__payout"" [label=""_payout""];
""863_setCEO"" [label=""setCEO""];
""863_balanceOf"" [label=""balanceOf""];
""863_purchase"" [label=""purchase""];
""863__addressNotNull"" [label=""_addressNotNull""];
""863__transfer"" [label=""_transfer""];
""863_totalSupply"" [label=""totalSupply""];
""863__createPlace"" [label=""_createPlace""];
""863_getStartingPrice"" [label=""getStartingPrice""];
""863_implementsERC721"" [label=""implementsERC721""];
""863_getPlace"" [label=""getPlace""];
""863_priceOf"" [label=""priceOf""];
""863_transfer"" [label=""transfer""];
""863_ownerOf"" [label=""ownerOf""];
""863_transfer"" -> ""863__owns"";
""863_setCEO"" -> ""863_onlyCEO"";
""863_approve"" -> ""863__owns"";
""863__createPlace"" -> ""863__transfer"";
""863_payout"" -> ""863_onlyCEO"";
""863_transferFrom"" -> ""863__approved"";
""863_payout"" -> ""863__payout"";
""863_purchase"" -> ""863__transfer"";
""863_createContractPlace"" -> ""863_onlyCEO"";
""863_transferFrom"" -> ""863__owns"";
""863_purchase"" -> ""863__addressNotNull"";
""863_takeOwnership"" -> ""863__transfer"";
""863_takeOwnership"" -> ""863__addressNotNull"";
""863_setStartingPrice"" -> ""863_onlyCEO"";
""863_createContractPlace"" -> ""863__createPlace"";
""863_setOwnerName"" -> ""863__owns"";
""863_transfer"" -> ""863__transfer"";
""863_transferFrom"" -> ""863__addressNotNull"";
""863_takeOwnership"" -> ""863__approved"";
""863_transferFrom"" -> ""863__transfer"";
""863_transfer"" -> ""863__addressNotNull"";
}
"
0x84d5c939ddfdc3ea033f03e18213a6906f94e0c3.sol,CryptoSagaDungeonVer1,"contract CryptoSagaDungeonVer1 is Claimable, Pausable { struct EnemyCombination { bool isPersonalized; uint32[4] enemySlotClassIds; }",0,"subgraph cluster_6266_CryptoSagaDungeonVer1 {
label=""CryptoSagaDungeonVer1"";
""6266_setRequiredProgressOfPreviousDungeon"" [label=""setRequiredProgressOfPreviousDungeon""];
""6266_setIsTurnDataSaved"" [label=""setIsTurnDataSaved""];
""6266_setGoldReward"" [label=""setGoldReward""];
""6266_setInitialEnemyCombination"" [label=""setInitialEnemyCombination""];
""6266_random"" [label=""random""];
""6266_enterDungeon"" [label=""enterDungeon""];
""6266_setLocationId"" [label=""setLocationId""];
""6266_sqrt"" [label=""sqrt""];
""6266_createNewCombination"" [label=""createNewCombination""];
""6266_getEnemyCombinationOfAddress"" [label=""getEnemyCombinationOfAddress""];
""6266_min"" [label=""min""];
""6266_getOrder"" [label=""getOrder""];
""6266_getPlayRecord"" [label=""getPlayRecord""];
""6266_getLastPlayDateTime"" [label=""getLastPlayDateTime""];
""6266_CryptoSagaDungeonVer1"" [label=""CryptoSagaDungeonVer1""];
""6266_checkOwnershipAndAvailability"" [label=""checkOwnershipAndAvailability""];
""6266_setCoolHero"" [label=""setCoolHero""];
""6266_setPossibleMobs"" [label=""setPossibleMobs""];
""6266_setPreviousDungeoonId"" [label=""setPreviousDungeoonId""];
""6266_max"" [label=""max""];
""6266_getInitialEnemyCombination"" [label=""getInitialEnemyCombination""];
""6266_setCoolDungeon"" [label=""setCoolDungeon""];
""6266_setExpReward"" [label=""setExpReward""];
""6266_giveReward"" [label=""giveReward""];
""6266_getPlayRecordNoTurnData"" [label=""getPlayRecordNoTurnData""];
""6266_setExpReward"" -> ""6266_onlyOwner"";
""6266_setInitialEnemyCombination"" -> ""6266_onlyOwner"";
""6266_setIsTurnDataSaved"" -> ""6266_onlyOwner"";
""6266_enterDungeon"" -> ""6266_checkOwnershipAndAvailability"";
""6266_enterDungeon"" -> ""6266_createNewCombination"";
""6266_setCoolHero"" -> ""6266_onlyOwner"";
""6266_enterDungeon"" -> ""6266_min"";
""6266_enterDungeon"" -> ""6266_giveReward"";
""6266_setGoldReward"" -> ""6266_onlyOwner"";
""6266_enterDungeon"" -> ""6266_getOrder"";
""6266_setPossibleMobs"" -> ""6266_onlyOwner"";
""6266_setCoolDungeon"" -> ""6266_onlyOwner"";
""6266_enterDungeon"" -> ""6266_max"";
""6266_enterDungeon"" -> ""6266_whenNotPaused"";
""6266_setLocationId"" -> ""6266_onlyOwner"";
""6266_giveReward"" -> ""6266_sqrt"";
""6266_enterDungeon"" -> ""6266_random"";
""6266_createNewCombination"" -> ""6266_random"";
""6266_setPreviousDungeoonId"" -> ""6266_onlyOwner"";
""6266_setRequiredProgressOfPreviousDungeon"" -> ""6266_onlyOwner"";
}
"
0xd6dbc68ffe25b456a338c2df645e75f7c3a19db7.sol,RBACMixin,"contract RBACMixin { string constant FORBIDDEN = ; mapping (address => bool) public owners; mapping (address => bool) public minters; event AddOwner(address indexed who); event DeleteOwner(address indexed who); event AddMinter(address indexed who); event DeleteMinter(address indexed who); constructor () public { _setOwner(msg.sender, true); }",0,"subgraph cluster_315_RBACMixin {
label=""RBACMixin"";
""315_addMinter"" [label=""addMinter""];
""315_isOwner"" [label=""isOwner""];
""315_addOwner"" [label=""addOwner""];
""315__setOwner"" [label=""_setOwner""];
""315__setMinter"" [label=""_setMinter""];
""315_constructor"" [label=""constructor""];
""315_deleteOwner"" [label=""deleteOwner""];
""315_deleteMinter"" [label=""deleteMinter""];
""315_isMinter"" [label=""isMinter""];
""315_deleteOwner"" -> ""315__setOwner"";
""315_deleteMinter"" -> ""315_onlyOwner"";
""315_addOwner"" -> ""315_onlyOwner"";
""315_addOwner"" -> ""315__setOwner"";
""315_addMinter"" -> ""315_onlyOwner"";
""315_constructor"" -> ""315__setOwner"";
""315_deleteMinter"" -> ""315__setMinter"";
""315_addMinter"" -> ""315__setMinter"";
""315_deleteOwner"" -> ""315_onlyOwner"";
}
"
0x02992370df72da5b039c3a6249beb27c487e63cb.sol,Exchange,"contract Exchange is SafeMath, Admin { mapping( address => mapping( address => uint )) public tokens; mapping( address => mapping( bytes32 => bool )) public orders; mapping( bytes32 => mapping( address => uint )) public ordersBalance; event Deposit( address token, address user, uint amount, uint balance ); event Withdraw( address token, address user, uint amount, uint balance ); event Order( address user, address tokenTake, uint amountTake, address tokenMake, uint amountMake, uint nonce ); event OrderCancel( address user, address tokenTake, uint amountTake, address tokenMake, uint amountMake, uint nonce ); event Trade( address makeAddress, address tokenMake, uint amountGiveMake, address takeAddress, address tokenTake, uint quantityTake, uint feeTakeXfer, uint balanceOrder ); event HashOutput(bytes32 hash); constructor( address _admin, address _feeAccount, uint _feeTake, string _version) public { admin = _admin; feeAccount = _feeAccount; feeTake = _feeTake; orderEnd = false; version = _version; pause = false; }",0,"subgraph cluster_1064_Exchange {
label=""Exchange"";
""1064_depositToken"" [label=""depositToken""];
""1064_order"" [label=""order""];
""1064_withdrawToken"" [label=""withdrawToken""];
""1064_withdrawEth"" [label=""withdrawEth""];
""1064_depositEth"" [label=""depositEth""];
""1064_assertToken"" [label=""assertToken""];
""1064_assertCompareBalance"" [label=""assertCompareBalance""];
""1064_trade"" [label=""trade""];
""1064_assertOrders"" [label=""assertOrders""];
""1064_tradeBalances"" [label=""tradeBalances""];
""1064_orderCancel"" [label=""orderCancel""];
""1064_assertPause"" [label=""assertPause""];
""1064_assertQuantity"" [label=""assertQuantity""];
""1064_constructor"" [label=""constructor""];
""1064_orderCancel"" -> ""1064_safeAdd"";
""1064_tradeBalances"" -> ""1064_safeMul"";
""1064_order"" -> ""1064_safeSub"";
""1064_withdrawEth"" -> ""1064_safeSub"";
""1064_withdrawEth"" -> ""1064_assertQuantity"";
""1064_withdrawToken"" -> ""1064_safeSub"";
""1064_trade"" -> ""1064_assertOrders"";
""1064_tradeBalances"" -> ""1064_safeAdd"";
""1064_withdrawToken"" -> ""1064_assertToken"";
""1064_tradeBalances"" -> ""1064_safeSub"";
""1064_depositToken"" -> ""1064_assertQuantity"";
""1064_trade"" -> ""1064_assertPause"";
""1064_trade"" -> ""1064_assertQuantity"";
""1064_trade"" -> ""1064_assertCompareBalance"";
""1064_depositEth"" -> ""1064_assertQuantity"";
""1064_trade"" -> ""1064_tradeBalances"";
""1064_depositToken"" -> ""1064_safeAdd"";
""1064_order"" -> ""1064_assertQuantity"";
""1064_depositEth"" -> ""1064_safeAdd"";
""1064_withdrawToken"" -> ""1064_assertQuantity"";
""1064_orderCancel"" -> ""1064_assertQuantity"";
""1064_trade"" -> ""1064_safeMul"";
""1064_depositToken"" -> ""1064_assertToken"";
""1064_order"" -> ""1064_assertCompareBalance"";
}
"
0xf48f68ffd138f003946eadd866bea913962fdd10.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowed; uint256 private _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },0,"subgraph cluster_67_IERC20 {
label=""IERC20"";
""67_totalSupply"" [label=""totalSupply""];
""67_transferFrom"" [label=""transferFrom""];
""67_transfer"" [label=""transfer""];
""67_allowance"" [label=""allowance""];
""67_balanceOf"" [label=""balanceOf""];
""67_approve"" [label=""approve""];
}
"
0x3a5c3676afb1c81ff05ae57be70b97cd3c588313.sol,DetailedERC20,"contract DetailedERC20 is BasicToken { string public name; string public symbol; uint8 public decimals; function DetailedERC20(uint256 _totalSupply,string _name, string _symbol, uint8 _decimals) public { name = _name; symbol = _symbol; decimals = _decimals; totalSupply = _totalSupply; maxMSC = _totalSupply; balances[owner] = _totalSupply; }",0,"subgraph cluster_473_DetailedERC20 {
label=""DetailedERC20"";
""473_DetailedERC20"" [label=""DetailedERC20""];
}
"
0x26bf81f017a7149576dc5d82323172fcae9fd469.sol,BasicToken,"contract BasicToken is ERC20Basic { using SafeMath for uint; mapping(address => uint) balances; function transfer(address _to, uint _value) public{ balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); emit Transfer(msg.sender, _to, _value); }",0,"subgraph cluster_302_BasicToken {
label=""BasicToken"";
""302_balanceOf"" [label=""balanceOf""];
""302_transfer"" [label=""transfer""];
}
"
0x55ae5792903b179915e10065e26610435832a3f7.sol,owned,contract owned { address public owner; function owned() { owner = msg.sender; },0,"subgraph cluster_35_owned {
label=""owned"";
""35_transferOwnership"" [label=""transferOwnership""];
""35_owned"" [label=""owned""];
""35_transferOwnership"" -> ""35_onlyOwner"";
}
"
0x865cae29127a556ae9a0ed9e5f573ea43f83f6fd.sol,Atomoni,contract Atomoni is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; function Atomoni() { balances[msg.sender] = 30000000000000000000000000000; totalSupply = 30000000000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 4444400; fundsWallet = msg.sender; },0,"subgraph cluster_421_Atomoni {
label=""Atomoni"";
""421_approveAndCall"" [label=""approveAndCall""];
""421_fallback"" [label=""fallback""];
""421_Atomoni"" [label=""Atomoni""];
}
"
0x296ec7b2b224ea122f8f8f9be2a824df092fc82c.sol,Scaltinof,"contract Scaltinof is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public initialSupply = 10e9 * 1e8; uint256 public totalSupply; uint256 public distributeAmount = 0; bool public mintingFinished = false; mapping(address => uint256) public balanceOf; mapping(address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed from, uint256 amount); event Mint(address indexed to, uint256 amount); event MintFinished(); function Scaltinof() public { totalSupply = initialSupply; balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_1844_Scaltinof {
label=""Scaltinof"";
""1844_transferToContract"" [label=""transferToContract""];
""1844_setDistributeAmount"" [label=""setDistributeAmount""];
""1844_transferToAddress"" [label=""transferToAddress""];
""1844_totalSupply"" [label=""totalSupply""];
""1844_distributeAirdrop"" [label=""distributeAirdrop""];
""1844_lockupAccounts"" [label=""lockupAccounts""];
""1844_symbol"" [label=""symbol""];
""1844_finishMinting"" [label=""finishMinting""];
""1844_freezeAccounts"" [label=""freezeAccounts""];
""1844_burn"" [label=""burn""];
""1844_mint"" [label=""mint""];
""1844_Scaltinof"" [label=""Scaltinof""];
""1844_autoDistribute"" [label=""autoDistribute""];
""1844_allowance"" [label=""allowance""];
""1844_balanceOf"" [label=""balanceOf""];
""1844_transfer"" [label=""transfer""];
""1844_fallback"" [label=""fallback""];
""1844_decimals"" [label=""decimals""];
""1844_transferFrom"" [label=""transferFrom""];
""1844_name"" [label=""name""];
""1844_isContract"" [label=""isContract""];
""1844_approve"" [label=""approve""];
""1844_collectTokens"" [label=""collectTokens""];
""1844_transfer"" -> ""1844_transferToContract"";
""1844_freezeAccounts"" -> ""1844_onlyOwner"";
""1844_burn"" -> ""1844_onlyOwner"";
""1844_collectTokens"" -> ""1844_onlyOwner"";
""1844_finishMinting"" -> ""1844_onlyOwner"";
""1844_transfer"" -> ""1844_isContract"";
""1844_mint"" -> ""1844_onlyOwner"";
""1844_transfer"" -> ""1844_transferToAddress"";
""1844_setDistributeAmount"" -> ""1844_onlyOwner"";
""1844_lockupAccounts"" -> ""1844_onlyOwner"";
""1844_finishMinting"" -> ""1844_canMint"";
""1844_fallback"" -> ""1844_autoDistribute"";
""1844_mint"" -> ""1844_canMint"";
}
"
0x56cc2f2acbb8445b896b4280e4e6bc36409112e7.sol,SMSCoin,contract SMSCoin is ERC20 { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 3; uint256 public constant UNIT = 10 ** decimals; uint public totalSupply = 0; uint tokenSaleLot1 = 150000 * UNIT; uint reservedBonusLot1 = 45000 * UNIT; uint tokenSaleLot2 = 50000 * UNIT; uint tokenSaleLot3 = 50000 * UNIT; struct BonusStruct { uint8 ratio1; uint8 ratio2; uint8 ratio3; uint8 ratio4; },0,"subgraph cluster_1514_SMSCoin {
label=""SMSCoin"";
""1514_transfer"" [label=""transfer""];
""1514_resumePhase"" [label=""resumePhase""];
""1514_start3BonusPeriod3"" [label=""start3BonusPeriod3""];
""1514_saleCounter"" [label=""saleCounter""];
""1514_totalSupply"" [label=""totalSupply""];
""1514_transferTokens"" [label=""transferTokens""];
""1514_SMSCoin"" [label=""SMSCoin""];
""1514_burnSMSProcess"" [label=""burnSMSProcess""];
""1514_calcBonus"" [label=""calcBonus""];
""1514_sentBonus"" [label=""sentBonus""];
""1514_safeMul"" [label=""safeMul""];
""1514_soldToken"" [label=""soldToken""];
""1514_approve"" [label=""approve""];
""1514_start4NormalPeriod"" [label=""start4NormalPeriod""];
""1514_addAddress"" [label=""addAddress""];
""1514_transferFrom"" [label=""transferFrom""];
""1514_getAddressSize"" [label=""getAddressSize""];
""1514_fallback"" [label=""fallback""];
""1514_start6Phase2025"" [label=""start6Phase2025""];
""1514_start1BonusPeriod1"" [label=""start1BonusPeriod1""];
""1514_start5Phase2020"" [label=""start5Phase2020""];
""1514_getAddress"" [label=""getAddress""];
""1514_safeAdd"" [label=""safeAdd""];
""1514_start2BonusPeriod2"" [label=""start2BonusPeriod2""];
""1514_pausePhase"" [label=""pausePhase""];
""1514_safeDiv"" [label=""safeDiv""];
""1514_x3Token"" [label=""x3Token""];
""1514_drainETH"" [label=""drainETH""];
""1514_setTokenPrice"" [label=""setTokenPrice""];
""1514_balanceOf"" [label=""balanceOf""];
""1514_setBonus"" [label=""setBonus""];
""1514_allowance"" [label=""allowance""];
""1514_fallback"" -> ""1514_calcBonus"";
""1514_start3BonusPeriod3"" -> ""1514_setBonus"";
""1514_transfer"" -> ""1514_addAddress"";
""1514_start2BonusPeriod2"" -> ""1514_onlyOwner"";
""1514_resumePhase"" -> ""1514_onlyOwner"";
""1514_start5Phase2020"" -> ""1514_onlyOwner"";
""1514_fallback"" -> ""1514_transferTokens"";
""1514_start1BonusPeriod1"" -> ""1514_onlyOwner"";
""1514_fallback"" -> ""1514_safeDiv"";
""1514_start6Phase2025"" -> ""1514_x3Token"";
""1514_start1BonusPeriod1"" -> ""1514_addAddress"";
""1514_start1BonusPeriod1"" -> ""1514_setBonus"";
""1514_transferTokens"" -> ""1514_addAddress"";
""1514_setTokenPrice"" -> ""1514_onlyOwner"";
""1514_start3BonusPeriod3"" -> ""1514_onlyOwner"";
""1514_start4NormalPeriod"" -> ""1514_onlyOwner"";
""1514_start6Phase2025"" -> ""1514_burnSMSProcess"";
""1514_start2BonusPeriod2"" -> ""1514_setBonus"";
""1514_start4NormalPeriod"" -> ""1514_setBonus"";
""1514_start5Phase2020"" -> ""1514_x3Token"";
""1514_start5Phase2020"" -> ""1514_burnSMSProcess"";
""1514_start6Phase2025"" -> ""1514_onlyOwner"";
""1514_drainETH"" -> ""1514_onlyOwner"";
""1514_pausePhase"" -> ""1514_onlyOwner"";
}
"
0x509a38b7a1cc0dcd83aa9d06214663d9ec7c7f4a.sol,BlocksquareToken,"contract BlocksquareToken is ERC20Token, owned { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; bool public tokenFrozen; uint256 supply; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowances; mapping (address => bool) allowedToMint; event TokenFrozen(bool _frozen, string _reason); event Mint(address indexed _to, uint256 _value); function BlocksquareToken() public { tokenFrozen = true; }",0,"subgraph cluster_529_BlocksquareToken {
label=""BlocksquareToken"";
""529_isAllowedToMint"" [label=""isAllowedToMint""];
""529_BlocksquareToken"" [label=""BlocksquareToken""];
""529_changeAllowanceToMint"" [label=""changeAllowanceToMint""];
""529_changeFreezeTransaction"" [label=""changeFreezeTransaction""];
""529_transfer"" [label=""transfer""];
""529_balanceOf"" [label=""balanceOf""];
""529_transferFrom"" [label=""transferFrom""];
""529_totalSupply"" [label=""totalSupply""];
""529_fallback"" [label=""fallback""];
""529_approve"" [label=""approve""];
""529__transfer"" [label=""_transfer""];
""529_mintTokens"" [label=""mintTokens""];
""529_allowance"" [label=""allowance""];
""529_changeAllowanceToMint"" -> ""529_onlyOwner"";
""529_transfer"" -> ""529__transfer"";
""529_changeFreezeTransaction"" -> ""529_onlyOwner"";
""529_transferFrom"" -> ""529__transfer"";
}
"
0x1dfabf381d80dd29d43bc347207b30a5c484bbd0.sol,AirDropPromo,"contract AirDropPromo { string public url = ""https: string public name; string public symbol; address owner; uint256 public totalSupply; event Transfer(address indexed _from, address indexed _to, uint256 _value); function AirDropPromo(string _tokenName, string _tokenSymbol) public { owner = msg.sender; totalSupply = 1; name = _tokenName; symbol = _tokenSymbol; }",0,"subgraph cluster_175_AirDropPromo {
label=""AirDropPromo"";
""175_balanceOf"" [label=""balanceOf""];
""175_promo"" [label=""promo""];
""175_transferFrom"" [label=""transferFrom""];
""175_allowance"" [label=""allowance""];
""175_AirDropPromo"" [label=""AirDropPromo""];
""175_fallback"" [label=""fallback""];
""175_approve"" [label=""approve""];
""175_setInfo"" [label=""setInfo""];
""175_transfer"" [label=""transfer""];
}
"
0x3688587725ed6dda84bcd25aeeb04997415da50a.sol,BFreeContract,"contract BFreeContract is ERC20Interface, owned{ string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; uint256 public _totalSupply = 2240000; uint256 public icoMin = 300000; uint256 public preIcoLimit = 600000; uint256 public countHolders = 0; uint256 public amountOfInvestments = 0; uint256 preICOprice; uint256 ICOprice; uint256 public currentTokenPrice; uint256 public sellPrice; bool public preIcoIsRunning; bool public minimalGoalReached; bool public icoIsClosed; bool icoExitIsPossible; mapping (address => uint256) public tokenBalanceOf; mapping(address => mapping (address => uint256)) allowed; mapping(address => bool) frozenAccount; event FrozenFunds(address initiator, address account, string status); event BonusChanged(uint8 bonusOld, uint8 bonusNew); event minGoalReached(uint256 minIcoAmount, string notice); event preIcoEnded(uint256 preIcoAmount, string notice); event priceUpdated(uint256 oldPrice, uint256 newPrice, string notice); event withdrawed(address _to, uint256 summe, string notice); event deposited(address _from, uint256 summe, string notice); event orderToTransfer(address initiator, address _from, address _to, uint256 summe, string notice); event tokenCreated(address _creator, uint256 summe, string notice); event tokenDestroyed(address _destroyer, uint256 summe, string notice); event icoStatusUpdated(address _initiator, string status); function BFreeContract() { preIcoIsRunning = true; minimalGoalReached = false; icoExitIsPossible = false; icoIsClosed = false; tokenBalanceOf[this] += _totalSupply; allowed[this][owner] = _totalSupply; allowed[this][supervisor] = _totalSupply; currentTokenPrice = 0.024340770791075100 * 1 ether; preICOprice = 0.024340770791075100 * 1 ether; ICOprice = 0.040567951318458400 * 1 ether; sellPrice = 0; updatePrices(); }",0,"subgraph cluster_1780_BFreeContract {
label=""BFreeContract"";
""1780_destroyToken"" [label=""destroyToken""];
""1780_buyToken"" [label=""buyToken""];
""1780_sellMaximumPossibleAmountOfTokens"" [label=""sellMaximumPossibleAmountOfTokens""];
""1780_setSellPrice"" [label=""setSellPrice""];
""1780_calculateTheEndPrice"" [label=""calculateTheEndPrice""];
""1780_transferOwnership"" [label=""transferOwnership""];
""1780_setPreICOPrice"" [label=""setPreICOPrice""];
""1780_balanceOf"" [label=""balanceOf""];
""1780_freezeAccount"" [label=""freezeAccount""];
""1780_checkMinimalGoal"" [label=""checkMinimalGoal""];
""1780_allowIcoExit"" [label=""allowIcoExit""];
""1780_approve"" [label=""approve""];
""1780_checkPreIcoStatus"" [label=""checkPreIcoStatus""];
""1780__transfer"" [label=""_transfer""];
""1780_fallback"" [label=""fallback""];
""1780_buy"" [label=""buy""];
""1780_exitThisIcoForHalfOfTokenPrice"" [label=""exitThisIcoForHalfOfTokenPrice""];
""1780_getAllMyTokensForAllEtherOnContract"" [label=""getAllMyTokensForAllEtherOnContract""];
""1780_withdraw"" [label=""withdraw""];
""1780_collect"" [label=""collect""];
""1780_setICOPrice"" [label=""setICOPrice""];
""1780_sell"" [label=""sell""];
""1780_setPrices"" [label=""setPrices""];
""1780_updatePrices"" [label=""updatePrices""];
""1780_BFreeContract"" [label=""BFreeContract""];
""1780_deposit"" [label=""deposit""];
""1780_mintToken"" [label=""mintToken""];
""1780_stopThisIco"" [label=""stopThisIco""];
""1780_checkFrozenAccounts"" [label=""checkFrozenAccounts""];
""1780_transfer"" [label=""transfer""];
""1780_allowance"" [label=""allowance""];
""1780_transferFrom"" [label=""transferFrom""];
""1780_totalSupply"" [label=""totalSupply""];
""1780_destroyToken"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780_checkMinimalGoal"";
""1780_sell"" -> ""1780__transfer"";
""1780_setSellPrice"" -> ""1780_isOwner"";
""1780_exitThisIcoForHalfOfTokenPrice"" -> ""1780__transfer"";
""1780_transferFrom"" -> ""1780__transfer"";
""1780_collect"" -> ""1780_isOwner"";
""1780_fallback"" -> ""1780_buyToken"";
""1780_sellMaximumPossibleAmountOfTokens"" -> ""1780_sell"";
""1780_transferOwnership"" -> ""1780_isOwner"";
""1780_setPrices"" -> ""1780_isOwner"";
""1780_deposit"" -> ""1780_isOwner"";
""1780_setPreICOPrice"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_updatePrices"";
""1780_BFreeContract"" -> ""1780_updatePrices"";
""1780_buy"" -> ""1780_buyToken"";
""1780_buyToken"" -> ""1780_updatePrices"";
""1780_setPreICOPrice"" -> ""1780_isOwner"";
""1780_transfer"" -> ""1780__transfer"";
""1780_stopThisIco"" -> ""1780_isOwner"";
""1780_collect"" -> ""1780_withdraw"";
""1780_withdraw"" -> ""1780_isOwner"";
""1780_allowIcoExit"" -> ""1780_isOwner"";
""1780_freezeAccount"" -> ""1780_isOwner"";
""1780_mintToken"" -> ""1780_isOwner"";
""1780_getAllMyTokensForAllEtherOnContract"" -> ""1780__transfer"";
""1780_setPrices"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780__transfer"";
""1780_updatePrices"" -> ""1780_checkPreIcoStatus"";
}
"
0x1d18f44256a27862d886e27191d55ab4029172c1.sol,Admin,"contract Admin is Variable, Modifiers, Event { using safeMath for uint256; function admin_transfer_tempLockAddress(address _to, uint256 _value, uint256 _unlockTime) public isOwner returns(bool success) { balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); balanceOf[_to] = balanceOf[_to].add(_value); tempLockedAddress[_to] = _unlockTime; emit Transfer(msg.sender, _to, _value); emit TempLockedAddress(_to, _unlockTime); return true; }",0,"subgraph cluster_708_Admin {
label=""Admin"";
""708_admin_tokenAdd"" [label=""admin_tokenAdd""];
""708_admin_tokenBurn"" [label=""admin_tokenBurn""];
""708_admin_renewLockedAddress"" [label=""admin_renewLockedAddress""];
""708_admin_transferFrom"" [label=""admin_transferFrom""];
""708_admin_transfer_tempLockAddress"" [label=""admin_transfer_tempLockAddress""];
""708_admin_renewLockedAddress"" -> ""708_isOwner"";
""708_admin_tokenBurn"" -> ""708_isOwner"";
""708_admin_transferFrom"" -> ""708_isOwner"";
""708_admin_transfer_tempLockAddress"" -> ""708_isOwner"";
""708_admin_tokenAdd"" -> ""708_isOwner"";
}
"
0x0ee1389404796e02ae1b40f7aa610cfc6ba2985c.sol,FREEToken,"contract FREEToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 5000000000000000000000000000; balances[0x525C9E7c5CEc37ADfcDDf2C70Eea25DFA6004693] = _totalSupply; emit Transfer(address(0), 0x525C9E7c5CEc37ADfcDDf2C70Eea25DFA6004693, _totalSupply); }",0,"subgraph cluster_640_FREEToken {
label=""FREEToken"";
""640_totalSupply"" [label=""totalSupply""];
""640_fallback"" [label=""fallback""];
""640_transferFrom"" [label=""transferFrom""];
""640_allowance"" [label=""allowance""];
""640_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""640_sendBatchCS"" [label=""sendBatchCS""];
""640_balanceOf"" [label=""balanceOf""];
""640_constructor"" [label=""constructor""];
""640_transfer"" [label=""transfer""];
""640_approve"" [label=""approve""];
""640_approveAndCall"" [label=""approveAndCall""];
""640_transfer"" -> ""640_safeSub"";
""640_transferFrom"" -> ""640_safeAdd"";
""640_transferAnyERC20Token"" -> ""640_onlyOwner"";
""640_transfer"" -> ""640_safeAdd"";
""640_transferFrom"" -> ""640_safeSub"";
}
"
0x39ffccecc551f35f8dfcb52c8c01060919aed1ea.sol,FoMo3DUnlimited,"contract FoMo3DUnlimited is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x137679d52dfa0d8191600046afc29634e349182d); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 1 minutes; uint256 private rndGap_ = 1 minutes; uint256 constant private rndInit_ = 72 hours; uint256 constant private rndInc_ = 1 seconds; uint256 constant private rndMax_ = 999 years; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(20,0); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(52,0); fees_[3] = F3Ddatasets.TeamFee(43,0); potSplit_[0] = F3Ddatasets.PotSplit(30,0); potSplit_[1] = F3Ddatasets.PotSplit(20,0); potSplit_[2] = F3Ddatasets.PotSplit(10,0); potSplit_[3] = F3Ddatasets.PotSplit(20,0); }",0,"subgraph cluster_4167_FoMo3DUnlimited {
label=""FoMo3DUnlimited"";
""4167_updateTimer"" [label=""updateTimer""];
""4167_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4167_buyXaddr"" [label=""buyXaddr""];
""4167_getPlayerVaults"" [label=""getPlayerVaults""];
""4167_core"" [label=""core""];
""4167_registerNameXaddr"" [label=""registerNameXaddr""];
""4167_managePlayer"" [label=""managePlayer""];
""4167_buyXid"" [label=""buyXid""];
""4167_registerNameXID"" [label=""registerNameXID""];
""4167_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4167_verifyTeam"" [label=""verifyTeam""];
""4167_getBuyPrice"" [label=""getBuyPrice""];
""4167_distributeExternal"" [label=""distributeExternal""];
""4167_withdraw"" [label=""withdraw""];
""4167_reLoadXid"" [label=""reLoadXid""];
""4167_distributeInternal"" [label=""distributeInternal""];
""4167_calcKeysReceived"" [label=""calcKeysReceived""];
""4167_withdrawEarnings"" [label=""withdrawEarnings""];
""4167_updateGenVault"" [label=""updateGenVault""];
""4167_endRound"" [label=""endRound""];
""4167_potSwap"" [label=""potSwap""];
""4167_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4167_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4167_updateMasks"" [label=""updateMasks""];
""4167_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4167_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4167_reLoadCore"" [label=""reLoadCore""];
""4167_reLoadXaddr"" [label=""reLoadXaddr""];
""4167_buyCore"" [label=""buyCore""];
""4167_iWantXKeys"" [label=""iWantXKeys""];
""4167_constructor"" [label=""constructor""];
""4167_registerNameXname"" [label=""registerNameXname""];
""4167_determinePID"" [label=""determinePID""];
""4167_airdrop"" [label=""airdrop""];
""4167_endTx"" [label=""endTx""];
""4167_reLoadXname"" [label=""reLoadXname""];
""4167_fallback"" [label=""fallback""];
""4167_activate"" [label=""activate""];
""4167_getTimeLeft"" [label=""getTimeLeft""];
""4167_buyXname"" [label=""buyXname""];
""4167_registerNameXaddr"" -> ""4167_isHuman"";
""4167_fallback"" -> ""4167_determinePID"";
""4167_buyXid"" -> ""4167_isWithinLimits"";
""4167_core"" -> ""4167_updateTimer"";
""4167_registerNameXID"" -> ""4167_isHuman"";
""4167_buyXid"" -> ""4167_verifyTeam"";
""4167_buyXid"" -> ""4167_isHuman"";
""4167_buyXname"" -> ""4167_isWithinLimits"";
""4167_reLoadXid"" -> ""4167_isWithinLimits"";
""4167_reLoadXname"" -> ""4167_isWithinLimits"";
""4167_fallback"" -> ""4167_buyCore"";
""4167_reLoadXname"" -> ""4167_verifyTeam"";
""4167_buyXaddr"" -> ""4167_buyCore"";
""4167_buyXid"" -> ""4167_buyCore"";
""4167_reLoadXid"" -> ""4167_isHuman"";
""4167_reLoadXaddr"" -> ""4167_isHuman"";
""4167_reLoadXaddr"" -> ""4167_verifyTeam"";
""4167_core"" -> ""4167_distributeExternal"";
""4167_getPlayerVaults"" -> ""4167_calcUnMaskedEarnings"";
""4167_core"" -> ""4167_airdrop"";
""4167_buyXname"" -> ""4167_buyCore"";
""4167_buyXaddr"" -> ""4167_isActivated"";
""4167_reLoadXid"" -> ""4167_verifyTeam"";
""4167_distributeInternal"" -> ""4167_updateMasks"";
""4167_withdrawEarnings"" -> ""4167_updateGenVault"";
""4167_core"" -> ""4167_endTx"";
""4167_buyXname"" -> ""4167_isActivated"";
""4167_withdraw"" -> ""4167_withdrawEarnings"";
""4167_reLoadXname"" -> ""4167_isActivated"";
""4167_buyCore"" -> ""4167_core"";
""4167_buyXaddr"" -> ""4167_determinePID"";
""4167_buyXaddr"" -> ""4167_isHuman"";
""4167_getPlayerInfoByAddress"" -> ""4167_calcUnMaskedEarnings"";
""4167_registerNameXname"" -> ""4167_isHuman"";
""4167_reLoadXname"" -> ""4167_isHuman"";
""4167_core"" -> ""4167_managePlayer"";
""4167_reLoadXname"" -> ""4167_reLoadCore"";
""4167_reLoadCore"" -> ""4167_core"";
""4167_getPlayerVaults"" -> ""4167_getPlayerVaultsHelper"";
""4167_buyXname"" -> ""4167_verifyTeam"";
""4167_fallback"" -> ""4167_isHuman"";
""4167_withdraw"" -> ""4167_isHuman"";
""4167_managePlayer"" -> ""4167_updateGenVault"";
""4167_buyXname"" -> ""4167_determinePID"";
""4167_reLoadXaddr"" -> ""4167_reLoadCore"";
""4167_fallback"" -> ""4167_isWithinLimits"";
""4167_core"" -> ""4167_distributeInternal"";
""4167_updateGenVault"" -> ""4167_calcUnMaskedEarnings"";
""4167_reLoadCore"" -> ""4167_endRound"";
""4167_buyCore"" -> ""4167_endRound"";
""4167_buyXaddr"" -> ""4167_verifyTeam"";
""4167_buyXid"" -> ""4167_isActivated"";
""4167_reLoadXid"" -> ""4167_reLoadCore"";
""4167_reLoadXid"" -> ""4167_isActivated"";
""4167_reLoadXaddr"" -> ""4167_isActivated"";
""4167_buyXid"" -> ""4167_determinePID"";
""4167_withdraw"" -> ""4167_isActivated"";
""4167_fallback"" -> ""4167_isActivated"";
""4167_reLoadXaddr"" -> ""4167_isWithinLimits"";
""4167_withdraw"" -> ""4167_endRound"";
""4167_buyXaddr"" -> ""4167_isWithinLimits"";
""4167_reLoadCore"" -> ""4167_withdrawEarnings"";
""4167_buyXname"" -> ""4167_isHuman"";
}
"
0x6db943251e4126f913e9733821031791e75df713.sol,ReadyPlayerONE,"contract ReadyPlayerONE is modularLong { using SafeMath for *; using NameFilter for string; using RP1KeysCalcLong for uint256; address community_addr = 0x4c20d0ab4baadbce39fe6ac94cefd99b7686339c; address marketing_addr = 0x9386b3cc1155764b60ca81fc83761777f6487ac3; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x15247cF99b5870F54EA17e85E1aF8667a58a6644); string constant public name = ; string constant public symbol = ; uint256 private rndGap_ = 0; uint256 constant private rndInit_ = 1 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 12 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => RP1datasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => RP1datasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => RP1datasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => RP1datasets.TeamFee) public fees_; mapping (uint256 => RP1datasets.PotSplit) public potSplit_; constructor() public { fees_[0] = RP1datasets.TeamFee(30,0); fees_[1] = RP1datasets.TeamFee(41,0); fees_[2] = RP1datasets.TeamFee(60,0); fees_[3] = RP1datasets.TeamFee(46,0); potSplit_[0] = RP1datasets.PotSplit(18,4); potSplit_[1] = RP1datasets.PotSplit(25,0); potSplit_[2] = RP1datasets.PotSplit(22,8); potSplit_[3] = RP1datasets.PotSplit(32,2); }",0,"subgraph cluster_4102_ReadyPlayerONE {
label=""ReadyPlayerONE"";
""4102_potSwap"" [label=""potSwap""];
""4102_withdrawEarnings"" [label=""withdrawEarnings""];
""4102_endRound"" [label=""endRound""];
""4102_getTimeLeft"" [label=""getTimeLeft""];
""4102_endTx"" [label=""endTx""];
""4102_reLoadXaddr"" [label=""reLoadXaddr""];
""4102_getPlayerVaults"" [label=""getPlayerVaults""];
""4102_buyXaddr"" [label=""buyXaddr""];
""4102_reLoadXid"" [label=""reLoadXid""];
""4102_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4102_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4102_reLoadCore"" [label=""reLoadCore""];
""4102_constructor"" [label=""constructor""];
""4102_withdraw"" [label=""withdraw""];
""4102_calcKeysReceived"" [label=""calcKeysReceived""];
""4102_airdrop"" [label=""airdrop""];
""4102_getBuyPrice"" [label=""getBuyPrice""];
""4102_updateGenVault"" [label=""updateGenVault""];
""4102_managePlayer"" [label=""managePlayer""];
""4102_registerNameXname"" [label=""registerNameXname""];
""4102_buyXname"" [label=""buyXname""];
""4102_verifyTeam"" [label=""verifyTeam""];
""4102_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4102_buyCore"" [label=""buyCore""];
""4102_core"" [label=""core""];
""4102_iWantXKeys"" [label=""iWantXKeys""];
""4102_fallback"" [label=""fallback""];
""4102_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4102_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4102_distributeInternal"" [label=""distributeInternal""];
""4102_registerNameXaddr"" [label=""registerNameXaddr""];
""4102_registerNameXID"" [label=""registerNameXID""];
""4102_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4102_buyXid"" [label=""buyXid""];
""4102_updateTimer"" [label=""updateTimer""];
""4102_activate"" [label=""activate""];
""4102_updateMasks"" [label=""updateMasks""];
""4102_distributeExternal"" [label=""distributeExternal""];
""4102_determinePID"" [label=""determinePID""];
""4102_reLoadXname"" [label=""reLoadXname""];
""4102_reLoadXid"" -> ""4102_isWithinLimits"";
""4102_buyXaddr"" -> ""4102_buyCore"";
""4102_buyXname"" -> ""4102_verifyTeam"";
""4102_buyXid"" -> ""4102_buyCore"";
""4102_reLoadXname"" -> ""4102_reLoadCore"";
""4102_core"" -> ""4102_distributeInternal"";
""4102_buyXaddr"" -> ""4102_isActivated"";
""4102_reLoadCore"" -> ""4102_withdrawEarnings"";
""4102_core"" -> ""4102_distributeExternal"";
""4102_withdraw"" -> ""4102_isHuman"";
""4102_reLoadXid"" -> ""4102_reLoadCore"";
""4102_fallback"" -> ""4102_isActivated"";
""4102_core"" -> ""4102_managePlayer"";
""4102_getPlayerVaults"" -> ""4102_getPlayerVaultsHelper"";
""4102_buyXname"" -> ""4102_buyCore"";
""4102_buyXname"" -> ""4102_isHuman"";
""4102_fallback"" -> ""4102_isWithinLimits"";
""4102_reLoadXid"" -> ""4102_isActivated"";
""4102_buyXaddr"" -> ""4102_determinePID"";
""4102_reLoadCore"" -> ""4102_endRound"";
""4102_getPlayerInfoByAddress"" -> ""4102_calcUnMaskedEarnings"";
""4102_distributeInternal"" -> ""4102_updateMasks"";
""4102_reLoadCore"" -> ""4102_core"";
""4102_buyXid"" -> ""4102_isWithinLimits"";
""4102_managePlayer"" -> ""4102_updateGenVault"";
""4102_reLoadXaddr"" -> ""4102_isActivated"";
""4102_reLoadXaddr"" -> ""4102_verifyTeam"";
""4102_buyCore"" -> ""4102_core"";
""4102_reLoadXaddr"" -> ""4102_reLoadCore"";
""4102_reLoadXname"" -> ""4102_isWithinLimits"";
""4102_updateGenVault"" -> ""4102_calcUnMaskedEarnings"";
""4102_fallback"" -> ""4102_buyCore"";
""4102_buyXid"" -> ""4102_isHuman"";
""4102_withdraw"" -> ""4102_isActivated"";
""4102_registerNameXname"" -> ""4102_isHuman"";
""4102_reLoadXname"" -> ""4102_verifyTeam"";
""4102_buyCore"" -> ""4102_endRound"";
""4102_buyXaddr"" -> ""4102_isHuman"";
""4102_fallback"" -> ""4102_isHuman"";
""4102_withdrawEarnings"" -> ""4102_updateGenVault"";
""4102_reLoadXid"" -> ""4102_isHuman"";
""4102_core"" -> ""4102_airdrop"";
""4102_fallback"" -> ""4102_determinePID"";
""4102_buyXid"" -> ""4102_determinePID"";
""4102_buyXaddr"" -> ""4102_verifyTeam"";
""4102_reLoadXname"" -> ""4102_isHuman"";
""4102_buyXid"" -> ""4102_verifyTeam"";
""4102_buyXaddr"" -> ""4102_isWithinLimits"";
""4102_buyXname"" -> ""4102_determinePID"";
""4102_registerNameXaddr"" -> ""4102_isHuman"";
""4102_registerNameXID"" -> ""4102_isHuman"";
""4102_buyXname"" -> ""4102_isWithinLimits"";
""4102_reLoadXid"" -> ""4102_verifyTeam"";
""4102_reLoadXname"" -> ""4102_isActivated"";
""4102_core"" -> ""4102_endTx"";
""4102_getPlayerVaults"" -> ""4102_calcUnMaskedEarnings"";
""4102_withdraw"" -> ""4102_endRound"";
""4102_buyXname"" -> ""4102_isActivated"";
""4102_core"" -> ""4102_updateTimer"";
""4102_reLoadXaddr"" -> ""4102_isHuman"";
""4102_buyXid"" -> ""4102_isActivated"";
""4102_withdraw"" -> ""4102_withdrawEarnings"";
""4102_reLoadXaddr"" -> ""4102_isWithinLimits"";
}
"
0x2d3e7d4870a51b918919e7b851fe19983e4c38d5.sol,CommonSale,"contract CommonSale is InvestedProvider, WalletProvider, PercentRateProvider, RetrieveTokensFeature { using SafeMath for uint; address public directMintAgent; uint public price; uint public start; uint public minInvestedLimit; MintableToken public token; uint public hardcap; modifier isUnderHardcap() { require(invested < hardcap); _; }",0,"subgraph cluster_1288_CommonSale {
label=""CommonSale"";
""1288_endSaleDate"" [label=""endSaleDate""];
""1288_calculateTokens"" [label=""calculateTokens""];
""1288_setDirectMintAgent"" [label=""setDirectMintAgent""];
""1288_setStart"" [label=""setStart""];
""1288_setPrice"" [label=""setPrice""];
""1288_mintTokensExternal"" [label=""mintTokensExternal""];
""1288_mintTokensByETHExternal"" [label=""mintTokensByETHExternal""];
""1288_mintTokensByETH"" [label=""mintTokensByETH""];
""1288_setHardcap"" [label=""setHardcap""];
""1288_mintTokens"" [label=""mintTokens""];
""1288_fallback"" [label=""fallback""];
""1288_setMinInvestedLimit"" [label=""setMinInvestedLimit""];
""1288_setToken"" [label=""setToken""];
""1288_mintTokensByETHExternal"" -> ""1288_mintTokensByETH"";
""1288_setDirectMintAgent"" -> ""1288_onlyOwner"";
""1288_setToken"" -> ""1288_onlyOwner"";
""1288_setStart"" -> ""1288_onlyOwner"";
""1288_mintTokensByETH"" -> ""1288_calculateTokens"";
""1288_mintTokensByETH"" -> ""1288_isUnderHardcap"";
""1288_setHardcap"" -> ""1288_onlyOwner"";
""1288_fallback"" -> ""1288_fallback"";
""1288_setPrice"" -> ""1288_onlyOwner"";
""1288_setMinInvestedLimit"" -> ""1288_onlyOwner"";
""1288_mintTokensExternal"" -> ""1288_mintTokens"";
""1288_mintTokensByETHExternal"" -> ""1288_onlyDirectMintAgentOrOwner"";
""1288_mintTokensExternal"" -> ""1288_onlyDirectMintAgentOrOwner"";
""1288_mintTokensByETH"" -> ""1288_mintTokens"";
}
"
0x330fd5561c25f876c1910c76dec5622ac9471600.sol,DINAR,contract DINAR { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint public _totalSupply = 100000000000; uint256 public RATE = 1; bool public isMinting = true; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_DINAR {
label=""DINAR"";
""516_createTokens"" [label=""createTokens""];
""516_approve"" [label=""approve""];
""516_fallback"" [label=""fallback""];
""516_burnTokens"" [label=""burnTokens""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_balanceOf"" [label=""balanceOf""];
""516_transfer"" [label=""transfer""];
""516_transferFrom"" [label=""transferFrom""];
""516_totalSupply"" [label=""totalSupply""];
""516_allowance"" [label=""allowance""];
""516_constructor"" [label=""constructor""];
""516_fallback"" -> ""516_createTokens"";
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_burnTokens"" -> ""516_onlyOwner"";
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
}
"
0xed0577d074be9f605f0967fe6a8b3174d92e5e36.sol,OptionToken,contract OptionToken is StandardToken { using SafeMath for uint256; OptionFactory public factory; ERC20 public firstToken; ERC20 public secondToken; uint public minIssueAmount; uint public expiry; uint public strikePrice; bool public isCall; string public symbol; uint public decimals; struct Issuer { address addr; uint amount; },0,"subgraph cluster_4263_OptionToken {
label=""OptionToken"";
""4263_transferTokensInOnIssue"" [label=""transferTokensInOnIssue""];
""4263_setMinIssueAmount"" [label=""setMinIssueAmount""];
""4263_mint"" [label=""mint""];
""4263_transferTokensOrWeiOutToSenderOnExecute"" [label=""transferTokensOrWeiOutToSenderOnExecute""];
""4263_constructor"" [label=""constructor""];
""4263_issue"" [label=""issue""];
""4263_execute"" [label=""execute""];
""4263_executeWithWei"" [label=""executeWithWei""];
""4263_refund"" [label=""refund""];
""4263_transferTokensOrWeiOutToIssuerOnCancel"" [label=""transferTokensOrWeiOutToIssuerOnCancel""];
""4263_issueWithToken"" [label=""issueWithToken""];
""4263_burn"" [label=""burn""];
""4263_transferTokensToOwner"" [label=""transferTokensToOwner""];
""4263_transferTokensIn"" [label=""transferTokensIn""];
""4263_issueWithWei"" [label=""issueWithWei""];
""4263_transferTokensOrWeiOutToIssuerOnRefund"" [label=""transferTokensOrWeiOutToIssuerOnRefund""];
""4263_transferTokensInOnExecute"" [label=""transferTokensInOnExecute""];
""4263_cancel"" [label=""cancel""];
""4263_transfer"" [label=""transfer""];
""4263_transferTokensOrWeiOutToIssuerOnExecute"" [label=""transferTokensOrWeiOutToIssuerOnExecute""];
""4263_executeWithToken"" [label=""executeWithToken""];
""4263_cancel"" -> ""4263_beforeExpiry"";
""4263_executeWithToken"" -> ""4263_canExecuteWithToken"";
""4263_refund"" -> ""4263_afterExpiry"";
""4263_transferTokensInOnIssue"" -> ""4263_transferTokensToOwner"";
""4263_execute"" -> ""4263_burn"";
""4263_executeWithToken"" -> ""4263_transferTokensInOnExecute"";
""4263_issueWithToken"" -> ""4263_issue"";
""4263_issueWithToken"" -> ""4263_transferTokensInOnIssue"";
""4263_execute"" -> ""4263_transferTokensOrWeiOutToIssuerOnExecute"";
""4263_issueWithWei"" -> ""4263_canIssueWithWei"";
""4263_refund"" -> ""4263_transferTokensOrWeiOutToIssuerOnRefund"";
""4263_setMinIssueAmount"" -> ""4263_onlyAdmin"";
""4263_execute"" -> ""4263_transferTokensOrWeiOutToSenderOnExecute"";
""4263_cancel"" -> ""4263_burn"";
""4263_issueWithToken"" -> ""4263_canIssueWithToken"";
""4263_transferTokensInOnIssue"" -> ""4263_transferTokensIn"";
""4263_transferTokensInOnExecute"" -> ""4263_transferTokensIn"";
""4263_issueWithWei"" -> ""4263_beforeExpiry"";
""4263_executeWithToken"" -> ""4263_beforeExpiry"";
""4263_executeWithWei"" -> ""4263_canExecuteWithWei"";
""4263_cancel"" -> ""4263_transferTokensOrWeiOutToIssuerOnCancel"";
""4263_executeWithToken"" -> ""4263_execute"";
""4263_executeWithWei"" -> ""4263_beforeExpiry"";
""4263_issue"" -> ""4263_mint"";
""4263_executeWithWei"" -> ""4263_execute"";
""4263_issueWithToken"" -> ""4263_beforeExpiry"";
""4263_issueWithWei"" -> ""4263_issue"";
}
"
0xe1754d039c839192ee193d5cf8406fb24fcb421f.sol,ETHToken,"contract ETHToken is ERC20Interface { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant tokenCreationCap = 3000000* 10**18; uint256 public constant tokenCreationMin = 1* 10**18; mapping(address => mapping (address => uint256)) allowed; uint public fundingStart; uint public fundingEnd; bool public funding = true; address public master; uint256 totalTokens; uint256 soldAfterPowerHour; mapping (address => uint256) balances; mapping (address => uint) lastTransferred; mapping (address => uint256) balancesEther; address public migrationAgent; uint256 public totalMigrated; event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); uint totalParticipants; function ETHToken() { master = msg.sender; fundingStart = 1511654250; fundingEnd = 1511663901; }",0,"subgraph cluster_770_ETHToken {
label=""ETHToken"";
""770_approve"" [label=""approve""];
""770_migrate"" [label=""migrate""];
""770_ICOopen"" [label=""ICOopen""];
""770_TimeLeft"" [label=""TimeLeft""];
""770_transferFrom"" [label=""transferFrom""];
""770_finalize"" [label=""finalize""];
""770_setMigrationAgent"" [label=""setMigrationAgent""];
""770_totalSupply"" [label=""totalSupply""];
""770_TimeLeftBeforeCrowdsale"" [label=""TimeLeftBeforeCrowdsale""];
""770_EtherBalanceOf"" [label=""EtherBalanceOf""];
""770_allowance"" [label=""allowance""];
""770_balanceOf"" [label=""balanceOf""];
""770_transfer"" [label=""transfer""];
""770_fallback"" [label=""fallback""];
""770_getAmountSoldAfterPowerDay"" [label=""getAmountSoldAfterPowerDay""];
""770_ETHToken"" [label=""ETHToken""];
""770_getAmountofTotalParticipants"" [label=""getAmountofTotalParticipants""];
""770_getExchangeRate"" [label=""getExchangeRate""];
""770_refund"" [label=""refund""];
""770_fallback"" -> ""770_getExchangeRate"";
}
"
0x6b8c8bec2d3e3e583eabbb29913cc6b929cdfacc.sol,TokenERC20,"contract TokenERC20 { using SafeMath for uint; string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed tokenOwner, address indexed spender, uint value); function TokenERC20() public { totalSupply = 160000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",0,"subgraph cluster_625_TokenERC20 {
label=""TokenERC20"";
""625_transfer"" [label=""transfer""];
""625_approve"" [label=""approve""];
""625_TokenERC20"" [label=""TokenERC20""];
""625_approveAndCall"" [label=""approveAndCall""];
""625_transferFrom"" [label=""transferFrom""];
""625__transfer"" [label=""_transfer""];
""625_burn"" [label=""burn""];
""625_burnFrom"" [label=""burnFrom""];
""625_transferFrom"" -> ""625__transfer"";
""625_transfer"" -> ""625__transfer"";
""625_approveAndCall"" -> ""625_approve"";
}
"
0x6c24a2934a0255c4dce7ae619ed2b285f06477a0.sol,BighubToken,"contract BighubToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BighubToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 1400000000000000000000000000; balances[0x13c536BA3E45BE2bB79914D333b3fa95E9728E3A] = _totalSupply; emit Transfer(address(0), 0x13c536BA3E45BE2bB79914D333b3fa95E9728E3A, _totalSupply); }",0,"subgraph cluster_543_BighubToken {
label=""BighubToken"";
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_BighubToken"" [label=""BighubToken""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x74f7dca757597a5a9293c73895893fd2c295c5b6.sol,MinerX,"contract MinerX is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 2 * 10**9 * (10**uint256(decimals)); uint256 public weiRaised; uint256 public tokenAllocated; address public owner; bool public saleToken = true; event OwnerChanged(address indexed previousOwner, address indexed newOwner); event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount); event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken); event Transfer(address indexed _from, address indexed _to, uint256 _value); function MinerX() public { totalSupply = INITIAL_SUPPLY; owner = msg.sender; balances[owner] = INITIAL_SUPPLY; tokenAllocated = 0; transfersEnabled = true; }",0,"subgraph cluster_1542_MinerX {
label=""MinerX"";
""1542_enableTransfers"" [label=""enableTransfers""];
""1542_claimTokens"" [label=""claimTokens""];
""1542_validPurchaseTokens"" [label=""validPurchaseTokens""];
""1542_getTotalAmountOfTokens"" [label=""getTotalAmountOfTokens""];
""1542_changeOwner"" [label=""changeOwner""];
""1542_buyTokens"" [label=""buyTokens""];
""1542_startSale"" [label=""startSale""];
""1542_MinerX"" [label=""MinerX""];
""1542_stopSale"" [label=""stopSale""];
""1542_mint"" [label=""mint""];
""1542_fallback"" [label=""fallback""];
""1542_claimTokens"" -> ""1542_onlyOwner"";
""1542_startSale"" -> ""1542_onlyOwner"";
""1542_stopSale"" -> ""1542_onlyOwner"";
""1542_validPurchaseTokens"" -> ""1542_getTotalAmountOfTokens"";
""1542_fallback"" -> ""1542_buyTokens"";
""1542_buyTokens"" -> ""1542_mint"";
""1542_buyTokens"" -> ""1542_validPurchaseTokens"";
""1542_claimTokens"" -> ""1542_balanceOf"";
""1542_enableTransfers"" -> ""1542_onlyOwner"";
""1542_claimTokens"" -> ""1542_transfer"";
""1542_changeOwner"" -> ""1542_onlyOwner"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllRefundEscrow,contract ClinicAllRefundEscrow is RefundEscrow { using Math for uint256; struct RefundeeRecord { bool isRefunded; uint256 index; },0,"subgraph cluster_2170_ClinicAllRefundEscrow {
label=""ClinicAllRefundEscrow"";
""2170_deposit"" [label=""deposit""];
""2170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""2170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""2170_withdrawChunk"" [label=""withdrawChunk""];
""2170_withdraw"" [label=""withdraw""];
""2170_close"" [label=""close""];
""2170_removeRefundeeByIndex"" [label=""removeRefundeeByIndex""];
""2170_refundeesListLength"" [label=""refundeesListLength""];
""2170_withdrawEverything"" [label=""withdrawEverything""];
""2170_depositsOf"" [label=""depositsOf""];
""2170_beneficiaryDepositsOf"" [label=""beneficiaryDepositsOf""];
""2170_constructor"" [label=""constructor""];
""2170_depositFunds"" [label=""depositFunds""];
""2170_manualRefund"" [label=""manualRefund""];
""2170_withdrawChunk"" -> ""2170_removeRefundeeByIndex"";
""2170_manualRefund"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_onlyOwner"";
""2170_close"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawChunk"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawAll"" -> ""2170_onlyOwner"";
""2170_constructor"" -> ""2170_constructor"";
""2170_close"" -> ""2170_close"";
""2170_manualRefund"" -> ""2170_depositsOf"";
""2170_manualRefund"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_withdrawChunk"";
""2170_depositFunds"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_depositsOf"";
""2170_refundeesListLength"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_depositsOf"";
}
"
0x0cddd1094b8331b63191282f9b73cf609e139ac4.sol,PWGLToken,contract PWGLToken { string public name = ; string public symbol = ; uint256 public decimals = 8; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 88888888866666666; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },0,"subgraph cluster_354_PWGLToken {
label=""PWGLToken"";
""354_start"" [label=""start""];
""354_approve"" [label=""approve""];
""354_setName"" [label=""setName""];
""354_stop"" [label=""stop""];
""354_PWGLToken"" [label=""PWGLToken""];
""354_transferFrom"" [label=""transferFrom""];
""354_burn"" [label=""burn""];
""354_transfer"" [label=""transfer""];
""354_transferFrom"" -> ""354_validAddress"";
""354_transfer"" -> ""354_isRunning"";
""354_approve"" -> ""354_isRunning"";
""354_setName"" -> ""354_isOwner"";
""354_transfer"" -> ""354_validAddress"";
""354_start"" -> ""354_isOwner"";
""354_approve"" -> ""354_validAddress"";
""354_stop"" -> ""354_isOwner"";
""354_transferFrom"" -> ""354_isRunning"";
}
"
0x70c629875dadbe702489a5e1e3baae60e38924fa.sol,ExchangeRates,contract ExchangeRates is SelfDestructible { using SafeMath for uint; using SafeDecimalMath for uint; mapping(bytes4 => uint) public rates; mapping(bytes4 => uint) public lastRateUpdateTimes; address public oracle; uint constant ORACLE_FUTURE_LIMIT = 10 minutes; uint public rateStalePeriod = 3 hours; bool public priceUpdateLock = false; bytes4[5] public xdrParticipants; struct InversePricing { uint entryPoint; uint upperLimit; uint lowerLimit; bool frozen; },0,"subgraph cluster_1644_ExchangeRates {
label=""ExchangeRates"";
""1644_rateIsStale"" [label=""rateIsStale""];
""1644_constructor"" [label=""constructor""];
""1644_rateOrInverted"" [label=""rateOrInverted""];
""1644_setRateStalePeriod"" [label=""setRateStalePeriod""];
""1644_rateForCurrency"" [label=""rateForCurrency""];
""1644_anyRateIsStale"" [label=""anyRateIsStale""];
""1644_deleteRate"" [label=""deleteRate""];
""1644_setOracle"" [label=""setOracle""];
""1644_removeInversePricing"" [label=""removeInversePricing""];
""1644_setPriceUpdateLock"" [label=""setPriceUpdateLock""];
""1644_rateIsFrozen"" [label=""rateIsFrozen""];
""1644_updateXDRRate"" [label=""updateXDRRate""];
""1644_setInversePricing"" [label=""setInversePricing""];
""1644_updateRates"" [label=""updateRates""];
""1644_effectiveValue"" [label=""effectiveValue""];
""1644_internalUpdateRates"" [label=""internalUpdateRates""];
""1644_lastRateUpdateTimeForCurrency"" [label=""lastRateUpdateTimeForCurrency""];
""1644_ratesForCurrencies"" [label=""ratesForCurrencies""];
""1644_lastRateUpdateTimesForCurrencies"" [label=""lastRateUpdateTimesForCurrencies""];
""1644_effectiveValue"" -> ""1644_rateNotStale"";
""1644_deleteRate"" -> ""1644_onlyOracle"";
""1644_updateRates"" -> ""1644_onlyOracle"";
""1644_internalUpdateRates"" -> ""1644_updateXDRRate"";
""1644_updateRates"" -> ""1644_internalUpdateRates"";
""1644_removeInversePricing"" -> ""1644_onlyOwner"";
""1644_setPriceUpdateLock"" -> ""1644_onlyOracle"";
""1644_setOracle"" -> ""1644_onlyOwner"";
""1644_setInversePricing"" -> ""1644_onlyOwner"";
""1644_effectiveValue"" -> ""1644_rateForCurrency"";
""1644_constructor"" -> ""1644_constructor"";
""1644_internalUpdateRates"" -> ""1644_rateOrInverted"";
""1644_constructor"" -> ""1644_internalUpdateRates"";
""1644_setRateStalePeriod"" -> ""1644_onlyOwner"";
}
"
0x03c60795a9b4646752e25eed4bdadf5d8c62e13c.sol,CryptoColors,"contract CryptoColors is ERC721, Ownable { using SafeMath for uint256; uint256 private totalTokens; uint256[] private listedCryptoColors; uint256 public devOwed; uint256 public poolTotal; uint256 public lastPurchase; mapping (uint256 => CryptoColor) public cryptoColorData; mapping (uint256 => address) private tokenOwner; mapping (uint256 => address) private tokenApprovals; mapping (address => uint256[]) private ownedTokens; mapping(uint256 => uint256) private ownedTokensIndex; mapping (address => uint256) private payoutBalances; event TokenSold(uint256 indexed _tokenId, address indexed _owner, uint256 _purchasePrice, uint256 _price, address indexed _prevOwner); uint256 private firstCap = 0.5 ether; uint256 private secondCap = 1.0 ether; uint256 private thirdCap = 3.0 ether; uint256 private finalCap = 5.0 ether; struct CryptoColor { uint256 startingPrice; uint256 price; uint256 lastPrice; uint256 payout; uint256 withdrawn; address owner; }",0,"subgraph cluster_1476_CryptoColors {
label=""CryptoColors"";
""1476_getToken"" [label=""getToken""];
""1476_ownerOf"" [label=""ownerOf""];
""1476_balanceOf"" [label=""balanceOf""];
""1476_tokensOf"" [label=""tokensOf""];
""1476_getRentOwed"" [label=""getRentOwed""];
""1476_takeOwnership"" [label=""takeOwnership""];
""1476_createContractToken"" [label=""createContractToken""];
""1476_transfer"" [label=""transfer""];
""1476_calculatePoolCut"" [label=""calculatePoolCut""];
""1476_name"" [label=""name""];
""1476_approvedFor"" [label=""approvedFor""];
""1476__mint"" [label=""_mint""];
""1476_symbol"" [label=""symbol""];
""1476_clearApproval"" [label=""clearApproval""];
""1476_addToken"" [label=""addToken""];
""1476_withdrawRent"" [label=""withdrawRent""];
""1476_tokenExists"" [label=""tokenExists""];
""1476_purchase"" [label=""purchase""];
""1476_createMultiple"" [label=""createMultiple""];
""1476_approve"" [label=""approve""];
""1476_getNextPrice"" [label=""getNextPrice""];
""1476_withdraw"" [label=""withdraw""];
""1476_removeToken"" [label=""removeToken""];
""1476_isApprovedFor"" [label=""isApprovedFor""];
""1476_updatePayout"" [label=""updatePayout""];
""1476_clearApprovalAndTransfer"" [label=""clearApprovalAndTransfer""];
""1476_totalSupply"" [label=""totalSupply""];
""1476_updateSinglePayout"" [label=""updateSinglePayout""];
""1476_approve"" -> ""1476_approvedFor"";
""1476_isApprovedFor"" -> ""1476_approvedFor"";
""1476_clearApprovalAndTransfer"" -> ""1476_updateSinglePayout"";
""1476_approve"" -> ""1476_onlyOwnerOf"";
""1476_clearApprovalAndTransfer"" -> ""1476_isNotContract"";
""1476_transfer"" -> ""1476_addToken"";
""1476_transfer"" -> ""1476_clearApproval"";
""1476_approve"" -> ""1476_ownerOf"";
""1476_clearApproval"" -> ""1476_ownerOf"";
""1476_createMultiple"" -> ""1476_createContractToken"";
""1476_addToken"" -> ""1476_balanceOf"";
""1476_transfer"" -> ""1476_tokenExists"";
""1476__mint"" -> ""1476_addToken"";
""1476_transfer"" -> ""1476_onlyOwnerOf"";
""1476_purchase"" -> ""1476_getNextPrice"";
""1476_createContractToken"" -> ""1476_getNextPrice"";
""1476_takeOwnership"" -> ""1476_ownerOf"";
""1476_clearApprovalAndTransfer"" -> ""1476_addToken"";
""1476_transfer"" -> ""1476_removeToken"";
""1476_clearApprovalAndTransfer"" -> ""1476_clearApproval"";
""1476_transfer"" -> ""1476_clearApprovalAndTransfer"";
""1476_createMultiple"" -> ""1476_onlyOwner"";
""1476_purchase"" -> ""1476_isNotContract"";
""1476_getRentOwed"" -> ""1476_updatePayout"";
""1476_takeOwnership"" -> ""1476_clearApprovalAndTransfer"";
""1476_removeToken"" -> ""1476_ownerOf"";
""1476_createContractToken"" -> ""1476_onlyOwner"";
""1476_purchase"" -> ""1476_calculatePoolCut"";
""1476_clearApprovalAndTransfer"" -> ""1476_ownerOf"";
""1476_createContractToken"" -> ""1476__mint"";
""1476_purchase"" -> ""1476_transfer"";
""1476_withdrawRent"" -> ""1476_updatePayout"";
""1476_removeToken"" -> ""1476_balanceOf"";
""1476_transfer"" -> ""1476_updateSinglePayout"";
""1476_withdraw"" -> ""1476_onlyOwner"";
""1476_takeOwnership"" -> ""1476_isApprovedFor"";
""1476_getToken"" -> ""1476_getNextPrice"";
""1476_clearApprovalAndTransfer"" -> ""1476_removeToken"";
}
"
0x1eb0d4794d4067ed004c9d55ff6eb50620b27c58.sol,ProspectorsCrowdsale,"contract ProspectorsCrowdsale is Owned, DSMath { ProspectorsGoldToken public token; address public dev_multisig; uint public total_raised; uint public contributors_count = 0; uint public constant start_time = 1502377200; uint public constant end_time = 1505055600; uint public constant bonus_amount = 10000000 * 10**18; uint public constant start_amount = 60000000 * 10**18; uint public constant price = 0.0005 * 10**18; uint public constant bonus_price = 0.0004 * 10**18; uint public constant goal = 2000 ether; bool private closed = false; mapping(address => uint) funded; modifier in_time { if (time() < start_time || time() > end_time) revert(); _; }",0,"subgraph cluster_1077_ProspectorsCrowdsale {
label=""ProspectorsCrowdsale"";
""1077_my_token_balance"" [label=""my_token_balance""];
""1077_available_with_bonus"" [label=""available_with_bonus""];
""1077_refund"" [label=""refund""];
""1077_participate"" [label=""participate""];
""1077_is_success"" [label=""is_success""];
""1077_time"" [label=""time""];
""1077_available_without_bonus"" [label=""available_without_bonus""];
""1077_init"" [label=""init""];
""1077_closeCrowdsale"" [label=""closeCrowdsale""];
""1077_collect"" [label=""collect""];
""1077_destroy"" [label=""destroy""];
""1077_fallback"" [label=""fallback""];
""1077_min_balance_for_bonus"" [label=""min_balance_for_bonus""];
""1077_participate"" -> ""1077_add"";
""1077_fallback"" -> ""1077_participate"";
""1077_participate"" -> ""1077_in_time"";
""1077_participate"" -> ""1077_sub"";
""1077_destroy"" -> ""1077_onlyOwner"";
""1077_participate"" -> ""1077_wdiv"";
""1077_init"" -> ""1077_onlyOwner"";
""1077_participate"" -> ""1077_has_value"";
""1077_participate"" -> ""1077_min"";
""1077_closeCrowdsale"" -> ""1077_my_token_balance"";
""1077_destroy"" -> ""1077_time"";
""1077_participate"" -> ""1077_wmul"";
""1077_participate"" -> ""1077_available_with_bonus"";
""1077_available_without_bonus"" -> ""1077_my_token_balance"";
""1077_closeCrowdsale"" -> ""1077_time"";
""1077_available_with_bonus"" -> ""1077_my_token_balance"";
""1077_participate"" -> ""1077_my_token_balance"";
""1077_participate"" -> ""1077_cast"";
""1077_available_with_bonus"" -> ""1077_min_balance_for_bonus"";
""1077_closeCrowdsale"" -> ""1077_is_success"";
""1077_participate"" -> ""1077_hadd"";
""1077_available_without_bonus"" -> ""1077_min_balance_for_bonus"";
""1077_available_without_bonus"" -> ""1077_min"";
""1077_participate"" -> ""1077_available_without_bonus"";
}
"
0xa2e59b1c5e64130d06f08a99cd5eda8af9c68b8a.sol,PreSaleDisciple,"contract PreSaleDisciple is PreSaleGuardian { event DiscipleSaleCreate(uint indexed saleId, uint indexed discipleId, uint indexed price, uint occupation, uint level); event BuyDisciple(uint indexed saleId, uint discipleId, address indexed buyer, uint indexed currentPrice); event DiscipleOfferSubmit(uint indexed saleId, uint discipleId, address indexed bidder, uint indexed price); event DiscipleOfferAccept(uint indexed saleId, uint discipleId, address indexed newOwner, uint indexed newPrice); event SetDiscipleSale(uint indexed saleId, uint indexed price); event DiscipleAuctionCreate(uint indexed auctionId, uint indexed discipleId, uint indexed startPrice, uint occupation, uint level); event DiscipleAuctionBid(uint indexed auctionId, address indexed bidder, uint indexed offer); event VendingDisciple(uint indexed vendingId, address indexed buyer); event DiscipleVendOffer(uint indexed vendingId, address indexed bidder, uint indexed offer); event DiscipleVendAccept(uint indexed vendingId, address indexed newOwner, uint indexed newPrice); event SetDiscipleVend(uint indexed priceId, uint indexed price); mapping (uint => address) public DiscipleSaleToBuyer; mapping (uint => uint) public DiscipleVendToOffer; mapping (uint => address) public DiscipleVendToBidder; mapping (uint => uint) public DiscipleVendToTime; struct DiscipleSale { uint discipleId; uint occupation; uint level; uint price; bool ifSold; address bidder; uint offerPrice; uint timestamp; }",0,"subgraph cluster_4967_PreSaleDisciple {
label=""PreSaleDisciple"";
""4967_OfferToDisciple"" [label=""OfferToDisciple""];
""4967_vendDisciple"" [label=""vendDisciple""];
""4967_createDiscipleSale"" [label=""createDiscipleSale""];
""4967_getDiscipleSale"" [label=""getDiscipleSale""];
""4967_getDiscipleNum"" [label=""getDiscipleNum""];
""4967_setDiscipleVend"" [label=""setDiscipleVend""];
""4967__generateDiscipleSale"" [label=""_generateDiscipleSale""];
""4967_setDiscipleSale"" [label=""setDiscipleSale""];
""4967_getDiscipleVend"" [label=""getDiscipleVend""];
""4967_AcceptDiscipleOffer"" [label=""AcceptDiscipleOffer""];
""4967_acceptDiscipleVend"" [label=""acceptDiscipleVend""];
""4967__discipleVendPrice"" [label=""_discipleVendPrice""];
""4967_offlineDiscipleSold"" [label=""offlineDiscipleSold""];
""4967_buyDisciple"" [label=""buyDisciple""];
""4967_offerDiscipleVend"" [label=""offerDiscipleVend""];
""4967__discipleVendPrice"" -> ""4967_safeSub"";
""4967_offerDiscipleVend"" -> ""4967_whenNotPaused"";
""4967_vendDisciple"" -> ""4967_whenNotPaused"";
""4967_buyDisciple"" -> ""4967_safeSub"";
""4967_acceptDiscipleVend"" -> ""4967_whenNotPaused"";
""4967_vendDisciple"" -> ""4967__discipleVendPrice"";
""4967_AcceptDiscipleOffer"" -> ""4967_whenNotPaused"";
""4967_setDiscipleVend"" -> ""4967_onlyAdmin"";
""4967_setDiscipleSale"" -> ""4967_onlyAdmin"";
""4967_buyDisciple"" -> ""4967__computePrice"";
""4967_createDiscipleSale"" -> ""4967_onlyAdmin"";
""4967_buyDisciple"" -> ""4967_whenNotPaused"";
""4967_offlineDiscipleSold"" -> ""4967_onlyAdmin"";
""4967_buyDisciple"" -> ""4967__brokerFeeDistribute"";
""4967_OfferToDisciple"" -> ""4967_whenNotPaused"";
""4967_createDiscipleSale"" -> ""4967__generateDiscipleSale"";
""4967__discipleVendPrice"" -> ""4967__computePrice"";
}
"
0x178381837f84a7a636f57a3f2946cda512e5caab.sol,TreasureToken,contract TreasureToken { string public name = ; string public symbol = ; uint256 public decimals = 8; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 1000000000000000000; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },0,"subgraph cluster_354_TreasureToken {
label=""TreasureToken"";
""354_burn"" [label=""burn""];
""354_setName"" [label=""setName""];
""354_approve"" [label=""approve""];
""354_stop"" [label=""stop""];
""354_start"" [label=""start""];
""354_TreasureToken"" [label=""TreasureToken""];
""354_transferFrom"" [label=""transferFrom""];
""354_transfer"" [label=""transfer""];
""354_approve"" -> ""354_isRunning"";
""354_approve"" -> ""354_validAddress"";
""354_transfer"" -> ""354_isRunning"";
""354_start"" -> ""354_isOwner"";
""354_setName"" -> ""354_isOwner"";
""354_transferFrom"" -> ""354_validAddress"";
""354_transferFrom"" -> ""354_isRunning"";
""354_stop"" -> ""354_isOwner"";
""354_transfer"" -> ""354_validAddress"";
}
"
0x5aa4769f204f0b9e8d9c852377bf90fbe5bf2aeb.sol,MultiX250max03eth,contract MultiX250max03eth { address constant private PROMO = 0x74E6B17a922C741c4dA0b71796eFB0edDDda398a; uint constant public PROMO_PERCENT = 10; uint constant public MULTIPLIER = 250; struct Deposit { address depositor; uint128 deposit; uint128 expect; },0,"subgraph cluster_353_MultiX250max03eth {
label=""MultiX250max03eth"";
""353_fallback"" [label=""fallback""];
""353_pay"" [label=""pay""];
""353_getQueueLength"" [label=""getQueueLength""];
""353_getDeposit"" [label=""getDeposit""];
""353_getDepositsCount"" [label=""getDepositsCount""];
""353_getDeposits"" [label=""getDeposits""];
""353_fallback"" -> ""353_pay"";
""353_getDeposits"" -> ""353_getDepositsCount"";
}
"
0x78af01b310a23d25009bdfb95ef06e9a5584fb80.sol,HOTTO,"contract HOTTO is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 3000000000e8; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 20000000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_HOTTO {
label=""HOTTO"";
""944_withdraw"" [label=""withdraw""];
""944_fallback"" [label=""fallback""];
""944_finishDistribution"" [label=""finishDistribution""];
""944_distr"" [label=""distr""];
""944_balanceOf"" [label=""balanceOf""];
""944_HT"" [label=""HT""];
""944_approve"" [label=""approve""];
""944_burn"" [label=""burn""];
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_transferFrom"" [label=""transferFrom""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_allowance"" [label=""allowance""];
""944_transfer"" [label=""transfer""];
""944_getTokens"" [label=""getTokens""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_getTokens"" -> ""944_distr"";
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
""944_burn"" -> ""944_onlyOwner"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_HT"" -> ""944_distr"";
""944_distr"" -> ""944_canDistr"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_transferOwnership"" -> ""944_onlyOwner"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_getTokens"" -> ""944_canDistr"";
""944_fallback"" -> ""944_getTokens"";
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
""944_finishDistribution"" -> ""944_onlyOwner"";
}
"
0x300a0a820d8fb6e77850da5eaa8df64bbff5746d.sol,BoomrCoinCrowdsale,"contract BoomrCoinCrowdsale is Ownable{ using SafeMath for uint256; uint256 private minGoal = 0; uint256 private maxGoal = 0; uint256 private tokenLimitPresale = 0; uint256 private tokenLimitCrowdsale = 0; uint256 private presaleDiscount = 0; uint256 private crowdsaleDiscount1 = 0; uint256 private crowdsaleDiscount2 = 0; uint256 private crowdsaleDiscount3 = 0; uint256 private crowdsaleDiscount4 = 0; uint256 private presaleDuration = 0; uint256 private crowdsaleDuration1 = 0; uint256 private crowdsaleDuration2 = 0; uint256 private crowdsaleDuration3 = 0; uint256 private crowdsaleDuration4 = 0; uint256 private tokenPresaleTotalSold = 0; uint256 private tokenCrowdsaleTotalSold = 0; uint256 private totalBackers = 0; uint256 private weiRaised = 0; uint256 private presaleTokenPrice = 0; uint256 private baseTokenPrice = 0; uint256 private crowdsaleTokenPrice1 = 0; uint256 private crowdsaleTokenPrice2 = 0; uint256 private crowdsaleTokenPrice3 = 0; uint256 private crowdsaleTokenPrice4 = 0; uint256 private presaleTokenSent = 0; uint256 private crowdsaleTokenSold1 = 0; uint256 private crowdsaleTokenSold2 = 0; uint256 private crowdsaleTokenSold3 = 0; uint256 private crowdsaleTokenSold4 = 0; bool private finalized = false; bool private halted = false; uint256 public startTime; PausableToken public boomrToken; address private wallet; RefundVault private vault; mapping (address => uint256) public deposits; mapping (address => uint256) public purchases; event TokenPurchase(address indexed Purchaser, address indexed Beneficiary, uint256 ValueInWei, uint256 TokenAmount); event PresalePurchase(address indexed Purchaser, address indexed Beneficiary, uint256 ValueInWei); event PresaleDistribution(address indexed Purchaser, address indexed Beneficiary, uint256 TokenAmount); event Finalized(); function BoomrCoinCrowdsale() public{ }",0,"subgraph cluster_2121_BoomrCoinCrowdsale {
label=""BoomrCoinCrowdsale"";
""2121_depositPresale"" [label=""depositPresale""];
""2121_halt"" [label=""halt""];
""2121_currentStateActive"" [label=""currentStateActive""];
""2121_isCrowdsalePhase2"" [label=""isCrowdsalePhase2""];
""2121_getContractTokenBalance"" [label=""getContractTokenBalance""];
""2121_isPresaleWaitPhase"" [label=""isPresaleWaitPhase""];
""2121_isDistributable"" [label=""isDistributable""];
""2121_fallback"" [label=""fallback""];
""2121_internalDepositPresale"" [label=""internalDepositPresale""];
""2121_StartCrowdsale"" [label=""StartCrowdsale""];
""2121_forwardFunds"" [label=""forwardFunds""];
""2121_distributePresale"" [label=""distributePresale""];
""2121_BoomrCoinCrowdsale"" [label=""BoomrCoinCrowdsale""];
""2121_isPresalePhase"" [label=""isPresalePhase""];
""2121_isCrowdsalePhase4"" [label=""isCrowdsalePhase4""];
""2121_externalDeposit"" [label=""externalDeposit""];
""2121_currentTokenDistribution"" [label=""currentTokenDistribution""];
""2121_minGoalReached"" [label=""minGoalReached""];
""2121_internalBuyTokens"" [label=""internalBuyTokens""];
""2121_finalize"" [label=""finalize""];
""2121_unHalt"" [label=""unHalt""];
""2121_updatePrices"" [label=""updatePrices""];
""2121_buyTokens"" [label=""buyTokens""];
""2121_claimRefund"" [label=""claimRefund""];
""2121_currentStateSales"" [label=""currentStateSales""];
""2121_isCrowdsalePhase3"" [label=""isCrowdsalePhase3""];
""2121_isCrowdsalePhase1"" [label=""isCrowdsalePhase1""];
""2121_isBuyable"" [label=""isBuyable""];
""2121_maxGoalReached"" [label=""maxGoalReached""];
""2121_isCompleted"" [label=""isCompleted""];
""2121_fallback"" -> ""2121_buyTokens"";
""2121_fallback"" -> ""2121_isPresalePhase"";
""2121_isCrowdsalePhase4"" -> ""2121_maxGoalReached"";
""2121_isCrowdsalePhase1"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_isPresalePhase"";
""2121_unHalt"" -> ""2121_onlyOwner"";
""2121_isBuyable"" -> ""2121_isDistributable"";
""2121_fallback"" -> ""2121_isPresaleWaitPhase"";
""2121_currentStateActive"" -> ""2121_isPresaleWaitPhase"";
""2121_currentStateActive"" -> ""2121_isDistributable"";
""2121_internalBuyTokens"" -> ""2121_forwardFunds"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase2"";
""2121_distributePresale"" -> ""2121_isDistributable"";
""2121_externalDeposit"" -> ""2121_isPresalePhase"";
""2121_isCrowdsalePhase2"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_maxGoalReached"";
""2121_isCompleted"" -> ""2121_maxGoalReached"";
""2121_externalDeposit"" -> ""2121_isCompleted"";
""2121_depositPresale"" -> ""2121_internalDepositPresale"";
""2121_externalDeposit"" -> ""2121_internalDepositPresale"";
""2121_fallback"" -> ""2121_isCompleted"";
""2121_fallback"" -> ""2121_isDistributable"";
""2121_buyTokens"" -> ""2121_internalBuyTokens"";
""2121_isPresalePhase"" -> ""2121_maxGoalReached"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase1"";
""2121_StartCrowdsale"" -> ""2121_onlyOwner"";
""2121_currentStateSales"" -> ""2121_getContractTokenBalance"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase4"";
""2121_internalBuyTokens"" -> ""2121_maxGoalReached"";
""2121_currentStateActive"" -> ""2121_isPresalePhase"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase3"";
""2121_currentStateActive"" -> ""2121_minGoalReached"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase4"";
""2121_finalize"" -> ""2121_minGoalReached"";
""2121_currentStateActive"" -> ""2121_maxGoalReached"";
""2121_fallback"" -> ""2121_depositPresale"";
""2121_externalDeposit"" -> ""2121_internalBuyTokens"";
""2121_currentStateActive"" -> ""2121_isBuyable"";
""2121_halt"" -> ""2121_onlyOwner"";
""2121_currentStateActive"" -> ""2121_isCompleted"";
""2121_fallback"" -> ""2121_distributePresale"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase2"";
""2121_isBuyable"" -> ""2121_isCompleted"";
""2121_internalDepositPresale"" -> ""2121_forwardFunds"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase3"";
""2121_finalize"" -> ""2121_isCompleted"";
""2121_externalDeposit"" -> ""2121_onlyOwner"";
""2121_claimRefund"" -> ""2121_minGoalReached"";
""2121_finalize"" -> ""2121_onlyOwner"";
""2121_isCrowdsalePhase3"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_updatePrices"";
""2121_externalDeposit"" -> ""2121_isPresaleWaitPhase"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase1"";
}
"
0xdae049562763d6a4236af188a05f4f29603b41cc.sol,ItemToken,"contract ItemToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function ItemToken () public { owner = msg.sender; admins[owner] = true; }",0,"subgraph cluster_1272_ItemToken {
label=""ItemToken"";
""1272_isContract"" [label=""isContract""];
""1272_approve"" [label=""approve""];
""1272_isAdmin"" [label=""isAdmin""];
""1272_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1272_setItemRegistry"" [label=""setItemRegistry""];
""1272_setOwner"" [label=""setOwner""];
""1272__transfer"" [label=""_transfer""];
""1272_startingPriceOf"" [label=""startingPriceOf""];
""1272_approvedFor"" [label=""approvedFor""];
""1272_listItem"" [label=""listItem""];
""1272_balanceOf"" [label=""balanceOf""];
""1272_nextPriceOf"" [label=""nextPriceOf""];
""1272_tokensOf"" [label=""tokensOf""];
""1272_priceOf"" [label=""priceOf""];
""1272_allOf"" [label=""allOf""];
""1272_listMultipleItems"" [label=""listMultipleItems""];
""1272_withdrawAll"" [label=""withdrawAll""];
""1272_ItemToken"" [label=""ItemToken""];
""1272_symbol"" [label=""symbol""];
""1272_withdrawAmount"" [label=""withdrawAmount""];
""1272_totalSupply"" [label=""totalSupply""];
""1272_removeAdmin"" [label=""removeAdmin""];
""1272_enableERC721"" [label=""enableERC721""];
""1272_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1272_tokenExists"" [label=""tokenExists""];
""1272_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1272_implementsERC721"" [label=""implementsERC721""];
""1272_buy"" [label=""buy""];
""1272_addAdmin"" [label=""addAdmin""];
""1272_transferFrom"" [label=""transferFrom""];
""1272_ownerOf"" [label=""ownerOf""];
""1272_name"" [label=""name""];
""1272_transfer"" [label=""transfer""];
""1272_calculateNextPrice"" [label=""calculateNextPrice""];
""1272_calculateDevCut"" [label=""calculateDevCut""];
""1272_withdrawAmount"" -> ""1272_onlyOwner"";
""1272_transfer"" -> ""1272__transfer"";
""1272_transfer"" -> ""1272_ownerOf"";
""1272_buy"" -> ""1272_ownerOf"";
""1272_allOf"" -> ""1272_priceOf"";
""1272__transfer"" -> ""1272_ownerOf"";
""1272__transfer"" -> ""1272_tokenExists"";
""1272_setItemRegistry"" -> ""1272_onlyOwner"";
""1272_tokenExists"" -> ""1272_priceOf"";
""1272_allOf"" -> ""1272_nextPriceOf"";
""1272_buy"" -> ""1272_priceOf"";
""1272_listMultipleItems"" -> ""1272_listItem"";
""1272_populateFromItemRegistry"" -> ""1272_onlyOwner"";
""1272_addAdmin"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_tokenExists"";
""1272_listMultipleItems"" -> ""1272_onlyAdmins"";
""1272_buy"" -> ""1272_calculateDevCut"";
""1272_nextPriceOf"" -> ""1272_priceOf"";
""1272_nextPriceOf"" -> ""1272_calculateNextPrice"";
""1272_enableERC721"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_ownerOf"";
""1272_balanceOf"" -> ""1272_ownerOf"";
""1272_listItem"" -> ""1272_onlyAdmins"";
""1272_setOwner"" -> ""1272_onlyOwner"";
""1272_tokensOf"" -> ""1272_balanceOf"";
""1272_transferFrom"" -> ""1272__transfer"";
""1272_listItemFromRegistry"" -> ""1272_listItem"";
""1272_buy"" -> ""1272_isContract"";
""1272_listItemFromRegistry"" -> ""1272_onlyOwner"";
""1272_buy"" -> ""1272_nextPriceOf"";
""1272_transferFrom"" -> ""1272_approvedFor"";
""1272_tokensOf"" -> ""1272_ownerOf"";
""1272_allOf"" -> ""1272_ownerOf"";
""1272_withdrawAll"" -> ""1272_onlyOwner"";
""1272_populateFromItemRegistry"" -> ""1272_listItemFromRegistry"";
""1272_transfer"" -> ""1272_onlyERC721"";
""1272_removeAdmin"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_onlyERC721"";
""1272_buy"" -> ""1272__transfer"";
""1272_transferFrom"" -> ""1272_onlyERC721"";
""1272_allOf"" -> ""1272_startingPriceOf"";
}
"
0x448019c21743272e40eb8835dac2a7d5474899bf.sol,GODToken,contract GODToken is PausableToken { using SafeMath for uint256; string public name = ; string public symbol = ; uint public decimals = 18; uint256 private constant INITIAL_SUPPLY = 2653841597973271663912484125 wei; function GODToken(address _wallet) public { totalSupply = INITIAL_SUPPLY; balances[_wallet] = INITIAL_SUPPLY; },0,"subgraph cluster_609_GODToken {
label=""GODToken"";
""609_changeName"" [label=""changeName""];
""609_changeSymbolName"" [label=""changeSymbolName""];
""609_GODToken"" [label=""GODToken""];
""609_changeSymbolName"" -> ""609_onlyOwner"";
""609_changeName"" -> ""609_onlyOwner"";
}
"
0x32f916bcfae02a2a385ec0219a07fa2374bae7bb.sol,BinaryOption,"contract BinaryOption { address public namiCrowdSaleAddr; address public escrow; address public namiMultiSigWallet; Session public session; uint public timeInvestInMinute = 30; uint public timeOneSession = 180; uint public sessionId = 1; uint public rate = 190; uint public constant MAX_INVESTOR = 20; event SessionOpen(uint timeOpen, uint indexed sessionId); event InvestClose(uint timeInvestClose, uint priceOpen, uint indexed sessionId); event Invest(address indexed investor, bool choose, uint amount, uint timeInvest, uint indexed sessionId); event SessionClose(uint timeClose, uint indexed sessionId, uint priceClose, uint nacPrice, uint rate); event Deposit(address indexed sender, uint value); function() public payable { if (msg.value > 0) Deposit(msg.sender, msg.value); }",0,"subgraph cluster_2201_BinaryOption {
label=""BinaryOption"";
""2201_getChooses"" [label=""getChooses""];
""2201_invest"" [label=""invest""];
""2201_getEtherToBuy"" [label=""getEtherToBuy""];
""2201_getAmount"" [label=""getAmount""];
""2201_closeInvest"" [label=""closeInvest""];
""2201_changeTimeInvest"" [label=""changeTimeInvest""];
""2201_closeSession"" [label=""closeSession""];
""2201_withdrawEther"" [label=""withdrawEther""];
""2201_resetSession"" [label=""resetSession""];
""2201_fallback"" [label=""fallback""];
""2201_openSession"" [label=""openSession""];
""2201_changeRate"" [label=""changeRate""];
""2201_changeTimeOneSession"" [label=""changeTimeOneSession""];
""2201_BinaryOption"" [label=""BinaryOption""];
""2201_getInvestors"" [label=""getInvestors""];
""2201_changeEscrow"" [label=""changeEscrow""];
""2201_safeWithdraw"" [label=""safeWithdraw""];
""2201_safeWithdraw"" -> ""2201_onlyEscrow"";
""2201_changeRate"" -> ""2201_onlyEscrow"";
""2201_closeSession"" -> ""2201_getEtherToBuy"";
""2201_closeInvest"" -> ""2201_onlyEscrow"";
""2201_changeEscrow"" -> ""2201_onlyNamiMultisig"";
""2201_changeTimeOneSession"" -> ""2201_onlyEscrow"";
""2201_changeTimeInvest"" -> ""2201_onlyEscrow"";
""2201_withdrawEther"" -> ""2201_onlyEscrow"";
""2201_openSession"" -> ""2201_onlyEscrow"";
""2201_resetSession"" -> ""2201_onlyEscrow"";
""2201_closeSession"" -> ""2201_onlyEscrow"";
}
"
0x0f33a2f6dc77be2134e1537bf919f7d9ef1d225d.sol,MOT,"contract MOT is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 100000000e18; uint256 public totalDistributed = 20000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 1500e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_851_MOT {
label=""MOT"";
""851_constructor"" [label=""constructor""];
""851_transfer"" [label=""transfer""];
""851_transferOwnership"" [label=""transferOwnership""];
""851_burn"" [label=""burn""];
""851_balanceOf"" [label=""balanceOf""];
""851_allowance"" [label=""allowance""];
""851_getTokens"" [label=""getTokens""];
""851_finishDistribution"" [label=""finishDistribution""];
""851_transferFrom"" [label=""transferFrom""];
""851_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""851_approve"" [label=""approve""];
""851_fallback"" [label=""fallback""];
""851_getTokenBalance"" [label=""getTokenBalance""];
""851_distr"" [label=""distr""];
""851_withdraw"" [label=""withdraw""];
""851_getTokens"" -> ""851_onlyWhitelist"";
""851_transfer"" -> ""851_onlyPayloadSize"";
""851_finishDistribution"" -> ""851_onlyOwner"";
""851_getTokens"" -> ""851_canDistr"";
""851_finishDistribution"" -> ""851_canDistr"";
""851_distr"" -> ""851_canDistr"";
""851_burn"" -> ""851_onlyOwner"";
""851_transferOwnership"" -> ""851_onlyOwner"";
""851_transferFrom"" -> ""851_onlyPayloadSize"";
""851_withdrawForeignTokens"" -> ""851_onlyOwner"";
""851_withdraw"" -> ""851_onlyOwner"";
""851_fallback"" -> ""851_getTokens"";
""851_getTokens"" -> ""851_distr"";
}
"
0x211db6b2cba3b95fb95ac479dd51d84a2fb61388.sol,BOSS,"contract BOSS is StandardToken, Pausable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 200000000000000000000000000; function BOSS() { totalSupply = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; }",0,"subgraph cluster_572_BOSS {
label=""BOSS"";
""572_transfer"" [label=""transfer""];
""572_transferFrom"" [label=""transferFrom""];
""572_BOSS"" [label=""BOSS""];
""572_approve"" [label=""approve""];
""572_approve"" -> ""572_approve"";
""572_transfer"" -> ""572_whenNotPaused"";
""572_transferFrom"" -> ""572_transferFrom"";
""572_transferFrom"" -> ""572_whenNotPaused"";
""572_approve"" -> ""572_whenNotPaused"";
""572_transfer"" -> ""572_transfer"";
}
"
0xf14f06e227c015b398b8069314f4b8d1d7022c9e.sol,AuthenticatedProxy,"contract AuthenticatedProxy is TokenRecipient { address public user; ProxyRegistry public registry; bool public revoked; enum HowToCall { Call, DelegateCall }",0,"subgraph cluster_2864_AuthenticatedProxy {
label=""AuthenticatedProxy"";
""2864_AuthenticatedProxy"" [label=""AuthenticatedProxy""];
""2864_setRevoke"" [label=""setRevoke""];
""2864_proxy"" [label=""proxy""];
""2864_proxyAssert"" [label=""proxyAssert""];
""2864_proxyAssert"" -> ""2864_proxy"";
}
"
0x74bbed9bd87e339ad23b52ba8dd91b4cd216d080.sol,RadicalPixels,"contract RadicalPixels is HarbergerTaxable, ERC721Token { using SafeMath for uint256; uint256 public xMax; uint256 public yMax; uint256 constant clearLow = 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000; uint256 constant clearHigh = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff; uint256 constant factor = 0x100000000000000000000000000000000; struct Pixel { bytes32 id; address seller; uint256 x; uint256 y; uint256 price; bytes32 auctionId; bytes32 contentData; }",0,"subgraph cluster_3201_RadicalPixels {
label=""RadicalPixels"";
""3201__calculateTax"" [label=""_calculateTax""];
""3201_beginDutchAuction"" [label=""beginDutchAuction""];
""3201__setPixelBlockPrice"" [label=""_setPixelBlockPrice""];
""3201_encodeTokenId"" [label=""encodeTokenId""];
""3201_transferFrom"" [label=""transferFrom""];
""3201__updatePixelMapping"" [label=""_updatePixelMapping""];
""3201_constructor"" [label=""constructor""];
""3201_buyPixelBlocks"" [label=""buyPixelBlocks""];
""3201_buyUninitializedPixelBlocks"" [label=""buyUninitializedPixelBlocks""];
""3201__generateDutchAuction"" [label=""_generateDutchAuction""];
""3201_setPixelBlockPrices"" [label=""setPixelBlockPrices""];
""3201_changeContentData"" [label=""changeContentData""];
""3201_endDutchAuction"" [label=""endDutchAuction""];
""3201__encodeTokenId"" [label=""_encodeTokenId""];
""3201_setPixelBlockPrice"" [label=""setPixelBlockPrice""];
""3201__buyUninitializedPixelBlock"" [label=""_buyUninitializedPixelBlock""];
""3201__buyPixelBlock"" [label=""_buyPixelBlock""];
""3201_buyUninitializedPixelBlock"" [label=""buyUninitializedPixelBlock""];
""3201_buyPixelBlock"" [label=""buyPixelBlock""];
""3201__endDutchAuction"" [label=""_endDutchAuction""];
""3201_bidInAuction"" [label=""bidInAuction""];
""3201_beginDutchAuction"" -> ""3201__generateDutchAuction"";
""3201_encodeTokenId"" -> ""3201_validRange"";
""3201__buyPixelBlock"" -> ""3201_validRange"";
""3201__setPixelBlockPrice"" -> ""3201_validRange"";
""3201_buyUninitializedPixelBlock"" -> ""3201__buyUninitializedPixelBlock"";
""3201_endDutchAuction"" -> ""3201__endDutchAuction"";
""3201__buyUninitializedPixelBlock"" -> ""3201_hasPositveBalance"";
""3201_beginDutchAuction"" -> ""3201_validRange"";
""3201__setPixelBlockPrice"" -> ""3201__addToValueHeld"";
""3201_bidInAuction"" -> ""3201_validRange"";
""3201_setPixelBlockPrice"" -> ""3201__setPixelBlockPrice"";
""3201__buyUninitializedPixelBlock"" -> ""3201__mint"";
""3201_encodeTokenId"" -> ""3201__encodeTokenId"";
""3201_setPixelBlockPrices"" -> ""3201__setPixelBlockPrice"";
""3201_bidInAuction"" -> ""3201__encodeTokenId"";
""3201_beginDutchAuction"" -> ""3201_auctionNotOngoing"";
""3201__buyPixelBlock"" -> ""3201_hasPositveBalance"";
""3201__buyPixelBlock"" -> ""3201__updatePixelMapping"";
""3201_transferFrom"" -> ""3201_auctionNotOngoing"";
""3201_endDutchAuction"" -> ""3201__encodeTokenId"";
""3201_beginDutchAuction"" -> ""3201__updatePixelMapping"";
""3201__buyPixelBlock"" -> ""3201__subFromValueHeld"";
""3201__buyPixelBlock"" -> ""3201_addTokenTo"";
""3201_transferFrom"" -> ""3201_transferFrom"";
""3201_transferFrom"" -> ""3201__addToValueHeld"";
""3201_buyPixelBlocks"" -> ""3201__buyPixelBlock"";
""3201_endDutchAuction"" -> ""3201__subFromValueHeld"";
""3201_transferFrom"" -> ""3201__subFromValueHeld"";
""3201__buyUninitializedPixelBlock"" -> ""3201__addToValueHeld"";
""3201__buyPixelBlock"" -> ""3201__addToValueHeld"";
""3201_beginDutchAuction"" -> ""3201_userHasPositveBalance"";
""3201__buyUninitializedPixelBlock"" -> ""3201_validRange"";
""3201_buyUninitializedPixelBlocks"" -> ""3201__buyUninitializedPixelBlock"";
""3201_constructor"" -> ""3201_constructor"";
""3201_beginDutchAuction"" -> ""3201__encodeTokenId"";
""3201_buyPixelBlock"" -> ""3201__buyPixelBlock"";
""3201_endDutchAuction"" -> ""3201_addTokenTo"";
""3201__buyPixelBlock"" -> ""3201__encodeTokenId"";
""3201_endDutchAuction"" -> ""3201_removeTokenFrom"";
""3201__buyPixelBlock"" -> ""3201_removeTokenFrom"";
""3201__setPixelBlockPrice"" -> ""3201_auctionNotOngoing"";
""3201_endDutchAuction"" -> ""3201__updatePixelMapping"";
""3201__buyUninitializedPixelBlock"" -> ""3201__updatePixelMapping"";
""3201_endDutchAuction"" -> ""3201_validRange"";
""3201_endDutchAuction"" -> ""3201__addToValueHeld"";
""3201__buyPixelBlock"" -> ""3201__calculateTax"";
""3201__buyUninitializedPixelBlock"" -> ""3201__encodeTokenId"";
""3201__setPixelBlockPrice"" -> ""3201__updatePixelMapping"";
}
"
0x316ee6b10479576e908e5272458c789c3f4d2a47.sol,DuanZiToken,contract DuanZiToken is ERC223 { using SafeMath for uint256; using SafeMath for uint; address public owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; mapping (address => uint) public increase; mapping (address => uint256) public unlockUnixTime; uint public maxIncrease=20; address public target; string internal name_= ; string internal symbol_ = ; uint8 internal decimals_= 18; uint256 internal totalSupply_= 2000000000e18; uint256 public toGiveBase = 5000e18; uint256 public increaseBase = 500e18; uint256 public OfficalHold = totalSupply_.mul(18).div(100); uint256 public totalRemaining = totalSupply_; uint256 public totalDistributed = 0; bool public canTransfer = true; uint256 public etherGetBase=5000000; bool public distributionFinished = false; bool public finishFreeGetToken = false; bool public finishEthGetToken = false; modifier canDistr() { require(!distributionFinished); _; },0,"subgraph cluster_1716_DuanZiToken {
label=""DuanZiToken"";
""1716_transferToContract"" [label=""transferToContract""];
""1716_stopTransfer"" [label=""stopTransfer""];
""1716_finishEthGet"" [label=""finishEthGet""];
""1716_startEthGet"" [label=""startEthGet""];
""1716_transferToAddress"" [label=""transferToAddress""];
""1716_symbol"" [label=""symbol""];
""1716_distribution"" [label=""distribution""];
""1716_finishFreeGet"" [label=""finishFreeGet""];
""1716_isContract"" [label=""isContract""];
""1716_startDistribution"" [label=""startDistribution""];
""1716_changeBaseValue"" [label=""changeBaseValue""];
""1716_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1716_distr"" [label=""distr""];
""1716_name"" [label=""name""];
""1716_burn"" [label=""burn""];
""1716_changeIncrease"" [label=""changeIncrease""];
""1716_approve"" [label=""approve""];
""1716_disableWhitelist"" [label=""disableWhitelist""];
""1716_fallback"" [label=""fallback""];
""1716_DuanZiToken"" [label=""DuanZiToken""];
""1716_distributeAmounts"" [label=""distributeAmounts""];
""1716_startFreeGet"" [label=""startFreeGet""];
""1716_transfer"" [label=""transfer""];
""1716_getTokenBalance"" [label=""getTokenBalance""];
""1716_transferFrom"" [label=""transferFrom""];
""1716_getTokens"" [label=""getTokens""];
""1716_finishDistribution"" [label=""finishDistribution""];
""1716_decimals"" [label=""decimals""];
""1716_balanceOf"" [label=""balanceOf""];
""1716_enableWhitelist"" [label=""enableWhitelist""];
""1716_changeOwner"" [label=""changeOwner""];
""1716_totalSupply"" [label=""totalSupply""];
""1716_withdraw"" [label=""withdraw""];
""1716_allowance"" [label=""allowance""];
""1716_startTransfer"" [label=""startTransfer""];
""1716_startEthGet"" -> ""1716_canDistr"";
""1716_startFreeGet"" -> ""1716_onlyOwner"";
""1716_burn"" -> ""1716_onlyOwner"";
""1716_distributeAmounts"" -> ""1716_canDistr"";
""1716_getTokens"" -> ""1716_distr"";
""1716_finishEthGet"" -> ""1716_onlyOwner"";
""1716_finishEthGet"" -> ""1716_canDistr"";
""1716_finishDistribution"" -> ""1716_canDistr"";
""1716_distribution"" -> ""1716_onlyOwner"";
""1716_transfer"" -> ""1716_transferToContract"";
""1716_withdrawForeignTokens"" -> ""1716_onlyOwner"";
""1716_withdraw"" -> ""1716_onlyOwner"";
""1716_getTokens"" -> ""1716_onlyWhitelist"";
""1716_stopTransfer"" -> ""1716_onlyOwner"";
""1716_finishDistribution"" -> ""1716_onlyOwner"";
""1716_finishFreeGet"" -> ""1716_canDistr"";
""1716_transfer"" -> ""1716_canTrans"";
""1716_changeBaseValue"" -> ""1716_onlyOwner"";
""1716_startDistribution"" -> ""1716_onlyOwner"";
""1716_distr"" -> ""1716_canDistr"";
""1716_transferToAddress"" -> ""1716_balanceOf"";
""1716_distribution"" -> ""1716_distr"";
""1716_changeIncrease"" -> ""1716_onlyOwner"";
""1716_enableWhitelist"" -> ""1716_onlyOwner"";
""1716_DuanZiToken"" -> ""1716_distr"";
""1716_changeOwner"" -> ""1716_onlyOwner"";
""1716_disableWhitelist"" -> ""1716_onlyOwner"";
""1716_fallback"" -> ""1716_getTokens"";
""1716_getTokens"" -> ""1716_canDistr"";
""1716_startFreeGet"" -> ""1716_canDistr"";
""1716_finishFreeGet"" -> ""1716_onlyOwner"";
""1716_startTransfer"" -> ""1716_onlyOwner"";
""1716_transfer"" -> ""1716_isContract"";
""1716_distributeAmounts"" -> ""1716_onlyOwner"";
""1716_distributeAmounts"" -> ""1716_distr"";
""1716_startEthGet"" -> ""1716_onlyOwner"";
""1716_transferToContract"" -> ""1716_balanceOf"";
""1716_transfer"" -> ""1716_balanceOf"";
""1716_transferFrom"" -> ""1716_canTrans"";
""1716_distribution"" -> ""1716_canDistr"";
""1716_transfer"" -> ""1716_transferToAddress"";
}
"
0xbd24918e527512c48e7f54b3bec8f47b9f48914b.sol,JanusNetwork,"contract JanusNetwork is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 5000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 12000000e8; uint256 public constant minContribution = 1 ether / 200; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_948_JanusNetwork {
label=""JanusNetwork"";
""948_transferFrom"" [label=""transferFrom""];
""948_distr"" [label=""distr""];
""948_balanceOf"" [label=""balanceOf""];
""948_transferOwnership"" [label=""transferOwnership""];
""948_doAirdrop"" [label=""doAirdrop""];
""948_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""948_transfer"" [label=""transfer""];
""948_getTokenBalance"" [label=""getTokenBalance""];
""948_approve"" [label=""approve""];
""948_burn"" [label=""burn""];
""948_updateTokensPerEth"" [label=""updateTokensPerEth""];
""948_allowance"" [label=""allowance""];
""948_finishDistribution"" [label=""finishDistribution""];
""948_withdraw"" [label=""withdraw""];
""948_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""948_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""948_fallback"" [label=""fallback""];
""948_JANUS"" [label=""JANUS""];
""948_getTokens"" [label=""getTokens""];
""948_transfer"" -> ""948_onlyPayloadSize"";
""948_fallback"" -> ""948_getTokens"";
""948_withdrawAltcoinTokens"" -> ""948_onlyOwner"";
""948_finishDistribution"" -> ""948_canDistr"";
""948_JANUS"" -> ""948_distr"";
""948_adminClaimAirdropMultiple"" -> ""948_doAirdrop"";
""948_withdraw"" -> ""948_onlyOwner"";
""948_getTokens"" -> ""948_distr"";
""948_adminClaimAirdrop"" -> ""948_doAirdrop"";
""948_burn"" -> ""948_onlyOwner"";
""948_transferFrom"" -> ""948_onlyPayloadSize"";
""948_transferOwnership"" -> ""948_onlyOwner"";
""948_adminClaimAirdropMultiple"" -> ""948_onlyOwner"";
""948_updateTokensPerEth"" -> ""948_onlyOwner"";
""948_getTokens"" -> ""948_canDistr"";
""948_adminClaimAirdrop"" -> ""948_onlyOwner"";
""948_finishDistribution"" -> ""948_onlyOwner"";
""948_distr"" -> ""948_canDistr"";
}
"
0x4bd3aac60b2e8893913b8398edda362e6b46dd98.sol,CryptoPoliceOfficerToken,"contract CryptoPoliceOfficerToken is TotalSupply, Balance, Burnable { using MathUtils for uint; string public name; string public symbol; uint8 public decimals = 18; mapping(address => mapping(address => uint)) allowances; bool public publicTransfersEnabled = false; uint public releaseStartTime; uint public lockedAmount; TokenLock[] public locks; struct TokenLock { uint amount; uint timespan; bool released; }",0,"subgraph cluster_840_CryptoPoliceOfficerToken {
label=""CryptoPoliceOfficerToken"";
""840_addTokenLock"" [label=""addTokenLock""];
""840_approveAndCall"" [label=""approveAndCall""];
""840_transfer"" [label=""transfer""];
""840_transferFrom"" [label=""transferFrom""];
""840__transfer"" [label=""_transfer""];
""840_requireOwnerUnlockedAmount"" [label=""requireOwnerUnlockedAmount""];
""840_enablePublicTransfers"" [label=""enablePublicTransfers""];
""840_allowance"" [label=""allowance""];
""840_releaseLockedTokens"" [label=""releaseLockedTokens""];
""840_constructor"" [label=""constructor""];
""840_setCrowdsaleContract"" [label=""setCrowdsaleContract""];
""840_approve"" [label=""approve""];
""840_releaseLockedTokens"" -> ""840_grantOwner"";
""840_setCrowdsaleContract"" -> ""840_grantOwner"";
""840__transfer"" -> ""840_hasSufficientBalance"";
""840_addTokenLock"" -> ""840_grantOwner"";
""840_setCrowdsaleContract"" -> ""840_getCrowdsaleHardCap"";
""840_approveAndCall"" -> ""840_approve"";
""840_transfer"" -> ""840__transfer"";
""840_setCrowdsaleContract"" -> ""840_setCrowdsaleContract"";
""840_enablePublicTransfers"" -> ""840_crowdsaleSuccessful"";
""840__transfer"" -> ""840_whenTransferable"";
""840_transferFrom"" -> ""840__transfer"";
""840_requireOwnerUnlockedAmount"" -> ""840_balanceOf"";
""840_setCrowdsaleContract"" -> ""840_transfer"";
""840_addTokenLock"" -> ""840_requireOwnerUnlockedAmount"";
""840_enablePublicTransfers"" -> ""840_grantOwner"";
""840__transfer"" -> ""840_hasUnlockedAmount"";
}
"
0x26b5962250b779ab0f33970738a46fcfb00a70b9.sol,NewLottery,"contract NewLottery is Owned { uint256 private maxTickets; uint256 public minimumBounty; uint256 public ticketPrice; uint256 public lottoIndex; uint256 lastTicketTime; uint8 _direction; uint256 numtickets; uint256 totalBounty; address owner; event NewTicket(address indexed fromAddress, bool success); event LottoComplete(address indexed fromAddress, uint indexed lottoIndex, uint256 reward); function LottoCount() public payable { owner = msg.sender; ticketPrice = 0.101 * 10**18; minimumBounty = 1 * 10**18; maxTickets = 10; _direction = 0; lottoIndex = 1; lastTicketTime = 0; numtickets = 0; totalBounty = msg.value; require(totalBounty >= minimumBounty); }",0,"subgraph cluster_354_NewLottery {
label=""NewLottery"";
""354_getLastTicketTime"" [label=""getLastTicketTime""];
""354_getBalance"" [label=""getBalance""];
""354_shutdown"" [label=""shutdown""];
""354_withdraw"" [label=""withdraw""];
""354_LottoCount"" [label=""LottoCount""];
""354_PayWinner"" [label=""PayWinner""];
""354_AddTicket"" [label=""AddTicket""];
""354_withdraw"" -> ""354_onlyOwner"";
""354_shutdown"" -> ""354_onlyOwner"";
""354_AddTicket"" -> ""354_PayWinner"";
}
"
0xb402be8db1d9eb2beedfe2c8a6c38a604e9f13c6.sol,depositofferToken,"contract depositofferToken is ReentryProtected, ERC20Token, depositofferTokenAbstract, depositofferTokenConfig { using SafeMath for uint; uint public constant TOKENS_PER_ETH = TOKENS_PER_USD * USD_PER_ETH; uint public constant MIN_ETH_FUND = 1 ether * MIN_USD_FUND / USD_PER_ETH; uint public constant MAX_ETH_FUND = 1 ether * MAX_USD_FUND / USD_PER_ETH; uint public constant KYC_ETH_LMT = 1 ether * KYC_USD_LMT / USD_PER_ETH; uint public END_DATE = START_DATE + FUNDING_PERIOD; modifier onlyOwner { require(msg.sender == owner); _; }",0,"subgraph cluster_1224_depositofferToken {
label=""depositofferToken"";
""1224_usdToEth"" [label=""usdToEth""];
""1224_usdRaised"" [label=""usdRaised""];
""1224_transfer"" [label=""transfer""];
""1224_refund"" [label=""refund""];
""1224_changeOwner"" [label=""changeOwner""];
""1224_transferFrom"" [label=""transferFrom""];
""1224_destroy"" [label=""destroy""];
""1224_ethToTokens"" [label=""ethToTokens""];
""1224_finaliseICO"" [label=""finaliseICO""];
""1224_abort"" [label=""abort""];
""1224_fallback"" [label=""fallback""];
""1224_ethToUsd"" [label=""ethToUsd""];
""1224_changedeposito"" [label=""changedeposito""];
""1224_depositofferToken"" [label=""depositofferToken""];
""1224_approve"" [label=""approve""];
""1224_fundSucceeded"" [label=""fundSucceeded""];
""1224_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""1224_fundFailed"" [label=""fundFailed""];
""1224_acceptOwnership"" [label=""acceptOwnership""];
""1224_addKycAddress"" [label=""addKycAddress""];
""1224_proxyPurchase"" [label=""proxyPurchase""];
""1224_destroy"" -> ""1224_onlyOwner"";
""1224_transferAnyERC20Token"" -> ""1224_preventReentry"";
""1224_proxyPurchase"" -> ""1224_noReentry"";
""1224_addKycAddress"" -> ""1224_onlyOwner"";
""1224_abort"" -> ""1224_onlyOwner"";
""1224_fallback"" -> ""1224_proxyPurchase"";
""1224_proxyPurchase"" -> ""1224_xfer"";
""1224_abort"" -> ""1224_noReentry"";
""1224_changedeposito"" -> ""1224_onlyOwner"";
""1224_refund"" -> ""1224_fundFailed"";
""1224_usdRaised"" -> ""1224_ethToUsd"";
""1224_refund"" -> ""1224_preventReentry"";
""1224_changeOwner"" -> ""1224_onlyOwner"";
""1224_ethToTokens"" -> ""1224_ethToUsd"";
""1224_proxyPurchase"" -> ""1224_fundFailed"";
""1224_transfer"" -> ""1224_preventReentry"";
""1224_transferFrom"" -> ""1224_preventReentry"";
""1224_refund"" -> ""1224_xfer"";
""1224_addKycAddress"" -> ""1224_noReentry"";
""1224_addKycAddress"" -> ""1224_fundFailed"";
""1224_transferAnyERC20Token"" -> ""1224_onlyOwner"";
""1224_transfer"" -> ""1224_transfer"";
""1224_approve"" -> ""1224_noReentry"";
""1224_approve"" -> ""1224_approve"";
""1224_fundSucceeded"" -> ""1224_fundFailed"";
""1224_changeOwner"" -> ""1224_noReentry"";
""1224_finaliseICO"" -> ""1224_fundSucceeded"";
""1224_finaliseICO"" -> ""1224_onlyOwner"";
""1224_changedeposito"" -> ""1224_noReentry"";
""1224_transferFrom"" -> ""1224_transferFrom"";
""1224_destroy"" -> ""1224_noReentry"";
""1224_finaliseICO"" -> ""1224_preventReentry"";
""1224_acceptOwnership"" -> ""1224_noReentry"";
""1224_proxyPurchase"" -> ""1224_ethToTokens"";
}
"
0x6d7efeb3df42e6075fa7cf04e278d2d69e26a623.sol,LuckyYouToken,contract LuckyYouToken is PausableToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; constructor() public{ totalSupply = 1 * 1000 * 1000 * 1000 * (10 ** uint256(decimals)); balances[owner] = totalSupply; },0,"subgraph cluster_877_LuckyYouToken {
label=""LuckyYouToken"";
""877_airDrop"" [label=""airDrop""];
""877_constructor"" [label=""constructor""];
""877_multiTransfer"" [label=""multiTransfer""];
""877_claimTokens"" [label=""claimTokens""];
""877_claimTokens"" -> ""877_onlyOwner"";
""877_airDrop"" -> ""877_transferFrom"";
""877_multiTransfer"" -> ""877_transfer"";
}
"
0xbc97f1508fdeb0a63b25f3a4806b62ef5370e8ab.sol,CryptoBeginnerQuest,contract CryptoBeginnerQuest { using SafeMath for uint256; address private administrator; address public miningWarAddress; CryptoEngineerInterface public Engineer; CryptoDepositInterface public Deposit; CryptoMiningWarInterface public MiningWar; CryptoAirdropGameInterface public AirdropGame; CryptoBossWannaCryInterface public BossWannaCry; CryptoArenaInterface public Arena; uint256 private miningWarDeadline; uint256 private miningWarRound; mapping(address => Player) private players; mapping(address => MinerQuest) private minerQuests; mapping(address => EngineerQuest) private engineerQuests; mapping(address => DepositQuest) private depositQuests; mapping(address => JoinAirdropQuest) private joinAirdropQuests; mapping(address => AtkBossQuest) private atkBossQuests; mapping(address => AtkPlayerQuest) private atkPlayerQuests; mapping(address => BoosterQuest) private boosterQuests; mapping(address => RedbullQuest) private redbullQuests; struct Player { uint256 miningWarRound; uint256 currentQuest; },0,"subgraph cluster_2473_CryptoBeginnerQuest {
label=""CryptoBeginnerQuest"";
""2473_setMiningWarInterface"" [label=""setMiningWarInterface""];
""2473_confirmMinerQuest"" [label=""confirmMinerQuest""];
""2473_getPlayerDepositData"" [label=""getPlayerDepositData""];
""2473_getData"" [label=""getData""];
""2473_checkJoinAirdropQuest"" [label=""checkJoinAirdropQuest""];
""2473_upgrade"" [label=""upgrade""];
""2473_getMinerLv1"" [label=""getMinerLv1""];
""2473_addAtkBossQuest"" [label=""addAtkBossQuest""];
""2473_getPlayerBossWannaCryData"" [label=""getPlayerBossWannaCryData""];
""2473_checkRedbullQuest"" [label=""checkRedbullQuest""];
""2473_isContractMiniGame"" [label=""isContractMiniGame""];
""2473_confirmQuest"" [label=""confirmQuest""];
""2473_getMiningWarRoundOfPlayer"" [label=""getMiningWarRoundOfPlayer""];
""2473_addAtkPlayerQuest"" [label=""addAtkPlayerQuest""];
""2473_checkGetFreeQuest"" [label=""checkGetFreeQuest""];
""2473_checkAtkPlayerQuest"" [label=""checkAtkPlayerQuest""];
""2473_getPlayerAirdropGameData"" [label=""getPlayerAirdropGameData""];
""2473_checkBoosterQuest"" [label=""checkBoosterQuest""];
""2473_getMiningWarDealine"" [label=""getMiningWarDealine""];
""2473_getNextTimeAtkPlayer"" [label=""getNextTimeAtkPlayer""];
""2473_setArenaInterface"" [label=""setArenaInterface""];
""2473_addDepositQuest"" [label=""addDepositQuest""];
""2473_setupGame"" [label=""setupGame""];
""2473_confirmJoinAirdropQuest"" [label=""confirmJoinAirdropQuest""];
""2473_addEngineerQuest"" [label=""addEngineerQuest""];
""2473_getBoosters"" [label=""getBoosters""];
""2473_addLevelQuest"" [label=""addLevelQuest""];
""2473_addQuest"" [label=""addQuest""];
""2473_confirmAtkBossQuest"" [label=""confirmAtkBossQuest""];
""2473_setBossWannaCryInterface"" [label=""setBossWannaCryInterface""];
""2473_getEngineerLv1"" [label=""getEngineerLv1""];
""2473_getMiningWarRound"" [label=""getMiningWarRound""];
""2473_constructor"" [label=""constructor""];
""2473_getRedbulls"" [label=""getRedbulls""];
""2473_confirmEngineerQuest"" [label=""confirmEngineerQuest""];
""2473_fallback"" [label=""fallback""];
""2473_checkAtkBossQuest"" [label=""checkAtkBossQuest""];
""2473_addRedbullQuest"" [label=""addRedbullQuest""];
""2473_setupMiniGame"" [label=""setupMiniGame""];
""2473_confirmRedbullQuest"" [label=""confirmRedbullQuest""];
""2473_confirmGetFreeQuest"" [label=""confirmGetFreeQuest""];
""2473_addBoosterQuest"" [label=""addBoosterQuest""];
""2473_setDepositInterface"" [label=""setDepositInterface""];
""2473_checkEngineerQuest"" [label=""checkEngineerQuest""];
""2473_addMinerQuest"" [label=""addMinerQuest""];
""2473_confirmDepositQuest"" [label=""confirmDepositQuest""];
""2473_checkQuest"" [label=""checkQuest""];
""2473_setEngineerInterface"" [label=""setEngineerInterface""];
""2473_setAirdropGameInterface"" [label=""setAirdropGameInterface""];
""2473_addJoinAirdropQuest"" [label=""addJoinAirdropQuest""];
""2473_checkMinerQuest"" [label=""checkMinerQuest""];
""2473_confirmAtkPlayerQuest"" [label=""confirmAtkPlayerQuest""];
""2473_checkDepositQuest"" [label=""checkDepositQuest""];
""2473_confirmBoosterQuest"" [label=""confirmBoosterQuest""];
""2473_addQuest"" -> ""2473_addJoinAirdropQuest"";
""2473_confirmQuest"" -> ""2473_addQuest"";
""2473_confirmQuest"" -> ""2473_confirmDepositQuest"";
""2473_addLevelQuest"" -> ""2473_isAdministrator"";
""2473_checkQuest"" -> ""2473_checkJoinAirdropQuest"";
""2473_addQuest"" -> ""2473_addEngineerQuest"";
""2473_checkQuest"" -> ""2473_checkBoosterQuest"";
""2473_addLevelQuest"" -> ""2473_addDepositQuest"";
""2473_addLevelQuest"" -> ""2473_addAtkPlayerQuest"";
""2473_checkMinerQuest"" -> ""2473_getMinerLv1"";
""2473_checkQuest"" -> ""2473_checkGetFreeQuest"";
""2473_addQuest"" -> ""2473_addMinerQuest"";
""2473_constructor"" -> ""2473_setEngineerInterface"";
""2473_setEngineerInterface"" -> ""2473_isAdministrator"";
""2473_addQuest"" -> ""2473_addBoosterQuest"";
""2473_setAirdropGameInterface"" -> ""2473_isAdministrator"";
""2473_checkQuest"" -> ""2473_checkEngineerQuest"";
""2473_addDepositQuest"" -> ""2473_getPlayerDepositData"";
""2473_setupGame"" -> ""2473_getMiningWarDealine"";
""2473_upgrade"" -> ""2473_isAdministrator"";
""2473_checkBoosterQuest"" -> ""2473_getBoosters"";
""2473_addLevelQuest"" -> ""2473_addMinerQuest"";
""2473_setMiningWarInterface"" -> ""2473_isAdministrator"";
""2473_checkAtkBossQuest"" -> ""2473_getPlayerBossWannaCryData"";
""2473_addLevelQuest"" -> ""2473_addJoinAirdropQuest"";
""2473_addQuest"" -> ""2473_addDepositQuest"";
""2473_checkGetFreeQuest"" -> ""2473_getMiningWarRoundOfPlayer"";
""2473_constructor"" -> ""2473_setBossWannaCryInterface"";
""2473_addLevelQuest"" -> ""2473_addAtkBossQuest"";
""2473_checkRedbullQuest"" -> ""2473_getRedbulls"";
""2473_addLevelQuest"" -> ""2473_addRedbullQuest"";
""2473_checkQuest"" -> ""2473_checkAtkBossQuest"";
""2473_setArenaInterface"" -> ""2473_isAdministrator"";
""2473_confirmQuest"" -> ""2473_confirmEngineerQuest"";
""2473_addQuest"" -> ""2473_addAtkPlayerQuest"";
""2473_confirmQuest"" -> ""2473_confirmBoosterQuest"";
""2473_checkJoinAirdropQuest"" -> ""2473_getPlayerAirdropGameData"";
""2473_constructor"" -> ""2473_setArenaInterface"";
""2473_setBossWannaCryInterface"" -> ""2473_isAdministrator"";
""2473_checkEngineerQuest"" -> ""2473_getEngineerLv1"";
""2473_confirmQuest"" -> ""2473_confirmRedbullQuest"";
""2473_checkDepositQuest"" -> ""2473_getPlayerDepositData"";
""2473_addQuest"" -> ""2473_addRedbullQuest"";
""2473_confirmQuest"" -> ""2473_confirmJoinAirdropQuest"";
""2473_getData"" -> ""2473_checkQuest"";
""2473_setDepositInterface"" -> ""2473_isAdministrator"";
""2473_addQuest"" -> ""2473_addAtkBossQuest"";
""2473_confirmQuest"" -> ""2473_confirmGetFreeQuest"";
""2473_constructor"" -> ""2473_setMiningWarInterface"";
""2473_addAtkBossQuest"" -> ""2473_getPlayerBossWannaCryData"";
""2473_constructor"" -> ""2473_setAirdropGameInterface"";
""2473_setupGame"" -> ""2473_getMiningWarRound"";
""2473_checkAtkPlayerQuest"" -> ""2473_getNextTimeAtkPlayer"";
""2473_constructor"" -> ""2473_setDepositInterface"";
""2473_checkQuest"" -> ""2473_checkDepositQuest"";
""2473_checkQuest"" -> ""2473_checkMinerQuest"";
""2473_addLevelQuest"" -> ""2473_addEngineerQuest"";
""2473_addAtkPlayerQuest"" -> ""2473_getNextTimeAtkPlayer"";
""2473_checkQuest"" -> ""2473_checkRedbullQuest"";
""2473_addLevelQuest"" -> ""2473_addBoosterQuest"";
""2473_confirmQuest"" -> ""2473_confirmMinerQuest"";
""2473_confirmQuest"" -> ""2473_checkQuest"";
""2473_addJoinAirdropQuest"" -> ""2473_getPlayerAirdropGameData"";
""2473_confirmQuest"" -> ""2473_confirmAtkBossQuest"";
""2473_confirmQuest"" -> ""2473_confirmAtkPlayerQuest"";
""2473_checkQuest"" -> ""2473_checkAtkPlayerQuest"";
}
"
0xb3b558f664327156e87274155c2921bc8d9b1f18.sol,CHXTokenSale,"contract CHXTokenSale is Whitelistable { using SafeMath for uint; event TokenPurchased(address indexed investor, uint contribution, uint tokens); uint public constant TOKEN_PRICE = 170 szabo; uint public saleStartTime; uint public saleEndTime; uint public maxGasPrice = 20e9 wei; uint public minContribution = 100 finney; uint public maxContributionPhase1 = 500 finney; uint public maxContributionPhase2 = 10 ether; uint public phase1DurationInHours = 24; CHXToken public tokenContract; mapping (address => uint) public etherContributions; mapping (address => uint) public tokenAllocations; uint public etherCollected; uint public tokensSold; function CHXTokenSale() public { }",0,"subgraph cluster_1752_CHXTokenSale {
label=""CHXTokenSale"";
""1752_CHXTokenSale"" [label=""CHXTokenSale""];
""1752_setMaxContributionPhase1"" [label=""setMaxContributionPhase1""];
""1752_setMaxContributionPhase2"" [label=""setMaxContributionPhase2""];
""1752_sendCollectedEther"" [label=""sendCollectedEther""];
""1752_setMaxGasPrice"" [label=""setMaxGasPrice""];
""1752_setMinContribution"" [label=""setMinContribution""];
""1752_transferOwnership"" [label=""transferOwnership""];
""1752_setPhase1DurationInHours"" [label=""setPhase1DurationInHours""];
""1752_setSaleTime"" [label=""setSaleTime""];
""1752_setTokenContract"" [label=""setTokenContract""];
""1752_fallback"" [label=""fallback""];
""1752_sendRemainingTokens"" [label=""sendRemainingTokens""];
""1752_setMaxContributionPhase2"" -> ""1752_onlyOwner"";
""1752_setPhase1DurationInHours"" -> ""1752_onlyOwner"";
""1752_setMinContribution"" -> ""1752_onlyOwner"";
""1752_setMaxContributionPhase1"" -> ""1752_onlyOwner"";
""1752_transferOwnership"" -> ""1752_transferOwnership"";
""1752_sendRemainingTokens"" -> ""1752_onlyOwner"";
""1752_sendCollectedEther"" -> ""1752_onlyOwner"";
""1752_transferOwnership"" -> ""1752_onlyOwner"";
""1752_setTokenContract"" -> ""1752_onlyOwner"";
""1752_setMaxGasPrice"" -> ""1752_onlyOwner"";
""1752_setSaleTime"" -> ""1752_onlyOwner"";
""1752_transferOwnership"" -> ""1752_setWhitelistAdmin"";
}
"
0xf3c8ed6c721774c022c530e813a369dfe78a6e85.sol,CryptoSprites,contract CryptoSprites is ERC721 { address public owner; address KittyCoreAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d; address SaleClockAuctionAddress = 0xb1690C08E213a35Ed9bAb7B318DE14420FB57d8C; address charityAddress = 0xb30cb3b3E03A508Db2A0a3e07BA1297b47bb0fb1; uint public etherForOwner; uint public etherForCharity; uint public ownerCut = 15; uint public charityCut = 15; uint public featurePrice = 10**16; uint public priceMultiplier = 1; uint public priceDivider = 10; modifier onlyOwner { require(msg.sender == owner); _; },0,"subgraph cluster_1695_CryptoSprites {
label=""CryptoSprites"";
""1695_symbol"" [label=""symbol""];
""1695_featureSprite"" [label=""featureSprite""];
""1695_takeOwnership"" [label=""takeOwnership""];
""1695_withdraw"" [label=""withdraw""];
""1695_disapprove"" [label=""disapprove""];
""1695_supportsInterface"" [label=""supportsInterface""];
""1695_allowance"" [label=""allowance""];
""1695_transferFrom"" [label=""transferFrom""];
""1695_listSpriteForSale"" [label=""listSpriteForSale""];
""1695_buySprite"" [label=""buySprite""];
""1695_name"" [label=""name""];
""1695_changeOwner"" [label=""changeOwner""];
""1695_totalSupply"" [label=""totalSupply""];
""1695_approve"" [label=""approve""];
""1695_adjustFeaturePrice"" [label=""adjustFeaturePrice""];
""1695_transfer"" [label=""transfer""];
""1695_featuredSpritesLength"" [label=""featuredSpritesLength""];
""1695_lookupKitty"" [label=""lookupKitty""];
""1695_lookupKittyDetails2"" [label=""lookupKittyDetails2""];
""1695_lookupAllSprites"" [label=""lookupAllSprites""];
""1695_lookupFeaturedSprites"" [label=""lookupFeaturedSprites""];
""1695_lookupSprite"" [label=""lookupSprite""];
""1695_removeSpriteFromSale"" [label=""removeSpriteFromSale""];
""1695_adjustDefaultSpritePrice"" [label=""adjustDefaultSpritePrice""];
""1695_balanceOf"" [label=""balanceOf""];
""1695_lookupKittyDetails1"" [label=""lookupKittyDetails1""];
""1695_adjustCut"" [label=""adjustCut""];
""1695_fallback"" [label=""fallback""];
""1695_ownerOf"" [label=""ownerOf""];
""1695_calculatePrice"" [label=""calculatePrice""];
""1695_CryptoSprites"" [label=""CryptoSprites""];
""1695_usersSpriteOwningHistory"" [label=""usersSpriteOwningHistory""];
""1695_adjustCut"" -> ""1695_onlyOwner"";
""1695_changeOwner"" -> ""1695_onlyOwner"";
""1695_adjustFeaturePrice"" -> ""1695_onlyOwner"";
""1695_adjustDefaultSpritePrice"" -> ""1695_onlyOwner"";
""1695_withdraw"" -> ""1695_onlyOwner"";
}
"
0xf4702b0918a8a89dfc38459ce42198834818f26b.sol,Wallet,"contract Wallet is multisig, multiowned, daylimit { struct Transaction { address to; uint value; bytes data; }",0,"subgraph cluster_1155_Wallet {
label=""Wallet"";
""1155_confirm"" [label=""confirm""];
""1155_fallback"" [label=""fallback""];
""1155_execute"" [label=""execute""];
""1155_clearPending"" [label=""clearPending""];
""1155_kill"" [label=""kill""];
""1155_Wallet"" [label=""Wallet""];
""1155_Wallet"" -> ""1155_multiowned"";
""1155_execute"" -> ""1155_underLimit"";
""1155_confirm"" -> ""1155_onlymanyowners"";
""1155_Wallet"" -> ""1155_daylimit"";
""1155_clearPending"" -> ""1155_clearPending"";
""1155_execute"" -> ""1155_confirm"";
""1155_execute"" -> ""1155_onlyowner"";
""1155_kill"" -> ""1155_onlymanyowners"";
}
"
0x6b18b3808fd9c4401af4839b6aa2971aae7a8aad.sol,ODEEPToken,"contract ODEEPToken is StandardToken , BurnableToken { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; address public Bounties_Wallet = 0x70F48becd584115E8FF298eA72D5EFE199526655; address public Team_Wallet = 0xd3186A1e1ECe80F2E1811904bfBF876e6ea27A41; address public OEM_Wallet = 0x4fD0e4E8EFDf55D2C1B41d504A2977a9f8453714; address public LA_wallet = 0xA0AaFDbDD5bE0d5f1A5f980331DEf9b5e106e587; address public tokenWallet = 0x81cb9078e3c19842B201e2cCFC4B0f111d693D47; uint256 public constant INITIAL_SUPPLY = 100000000 ether; uint256 tokenRate = 560; function ODEEPToken() public { totalSupply_ = INITIAL_SUPPLY; balances[Bounties_Wallet] = INITIAL_SUPPLY.mul(5).div(100) ; balances[Team_Wallet] = INITIAL_SUPPLY.mul(8).div(100); balances[OEM_Wallet] = INITIAL_SUPPLY.mul(10).div(100) ; balances[LA_wallet] = INITIAL_SUPPLY.mul(8).div(100) ; balances[tokenWallet] = INITIAL_SUPPLY.mul(69).div(100); endDate = _endDate; emit Transfer(0x0, Bounties_Wallet, balances[Bounties_Wallet]); emit Transfer(0x0, Team_Wallet, balances[Team_Wallet]); emit Transfer(0x0, OEM_Wallet, balances[OEM_Wallet]); emit Transfer(0x0, LA_wallet, balances[LA_wallet]); emit Transfer(0x0, tokenWallet, balances[tokenWallet]); }",0,"subgraph cluster_1596_ODEEPToken {
label=""ODEEPToken"";
""1596_fallback"" [label=""fallback""];
""1596__EnvoisTokens"" [label=""_EnvoisTokens""];
""1596_setCapTab"" [label=""setCapTab""];
""1596_sendTokens"" [label=""sendTokens""];
""1596_isPreSale"" [label=""isPreSale""];
""1596__sendTokensManually"" [label=""_sendTokensManually""];
""1596_getTokenRate"" [label=""getTokenRate""];
""1596_getCapTab"" [label=""getCapTab""];
""1596_ODEEPToken"" [label=""ODEEPToken""];
""1596_currentStepIndexAll"" [label=""currentStepIndexAll""];
""1596_buyTokens"" [label=""buyTokens""];
""1596_isMainSale"" [label=""isMainSale""];
""1596_setTokenRate"" [label=""setTokenRate""];
""1596_currentStepIndexByDate"" [label=""currentStepIndexByDate""];
""1596_computeTokenAmountAll"" [label=""computeTokenAmountAll""];
""1596_buyTokens"" -> ""1596__EnvoisTokens"";
""1596__EnvoisTokens"" -> ""1596_sendTokens"";
""1596_currentStepIndexAll"" -> ""1596_currentStepIndexByDate"";
""1596_setTokenRate"" -> ""1596_onlyOwner"";
""1596_setCapTab"" -> ""1596_onlyOwner"";
""1596_computeTokenAmountAll"" -> ""1596_computeTokenAmountAll"";
""1596_buyTokens"" -> ""1596_computeTokenAmountAll"";
""1596_fallback"" -> ""1596_isMainSale"";
""1596_computeTokenAmountAll"" -> ""1596_currentStepIndexAll"";
""1596_buyTokens"" -> ""1596_isMainSale"";
""1596_buyTokens"" -> ""1596_isPreSale"";
""1596_buyTokens"" -> ""1596_currentStepIndexAll"";
""1596__sendTokensManually"" -> ""1596_onlyOwner"";
""1596__sendTokensManually"" -> ""1596_sendTokens"";
""1596_fallback"" -> ""1596_isPreSale"";
""1596_fallback"" -> ""1596_buyTokens"";
}
"
0x6e59116f211369823e4d8f86d816d0d58e3d9f48.sol,PausableToken,"contract PausableToken is StandardToken, Pausable { function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) { return super.transfer(_to, _value); }",0,"subgraph cluster_773_PausableToken {
label=""PausableToken"";
""773_increaseApproval"" [label=""increaseApproval""];
""773_transferFrom"" [label=""transferFrom""];
""773_decreaseApproval"" [label=""decreaseApproval""];
""773_transfer"" [label=""transfer""];
""773_approve"" [label=""approve""];
""773_transfer"" -> ""773_transfer"";
""773_approve"" -> ""773_whenNotPaused"";
""773_transferFrom"" -> ""773_whenNotPaused"";
""773_transferFrom"" -> ""773_transferFrom"";
""773_approve"" -> ""773_approve"";
""773_transfer"" -> ""773_whenNotPaused"";
""773_increaseApproval"" -> ""773_increaseApproval"";
""773_decreaseApproval"" -> ""773_whenNotPaused"";
""773_increaseApproval"" -> ""773_whenNotPaused"";
""773_decreaseApproval"" -> ""773_decreaseApproval"";
}
"
0x34022232ad82711337ac9dbfdc473e886f1805df.sol,ShalloToken,"contract ShalloToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 27000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 25000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_957_ShalloToken {
label=""ShalloToken"";
""957_transfer"" [label=""transfer""];
""957_withdraw"" [label=""withdraw""];
""957_fallback"" [label=""fallback""];
""957_finishDistribution"" [label=""finishDistribution""];
""957_getTokenBalance"" [label=""getTokenBalance""];
""957_getTokens"" [label=""getTokens""];
""957_ShalloToken"" [label=""ShalloToken""];
""957_transferOwnership"" [label=""transferOwnership""];
""957_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""957_transferFrom"" [label=""transferFrom""];
""957_distr"" [label=""distr""];
""957_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""957_balanceOf"" [label=""balanceOf""];
""957_updateTokensPerEth"" [label=""updateTokensPerEth""];
""957_burn"" [label=""burn""];
""957_doAirdrop"" [label=""doAirdrop""];
""957_allowance"" [label=""allowance""];
""957_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""957_approve"" [label=""approve""];
""957_getTokens"" -> ""957_canDistr"";
""957_burn"" -> ""957_onlyOwner"";
""957_getTokens"" -> ""957_distr"";
""957_adminClaimAirdrop"" -> ""957_onlyOwner"";
""957_adminClaimAirdropMultiple"" -> ""957_doAirdrop"";
""957_adminClaimAirdrop"" -> ""957_doAirdrop"";
""957_updateTokensPerEth"" -> ""957_onlyOwner"";
""957_withdrawAltcoinTokens"" -> ""957_onlyOwner"";
""957_fallback"" -> ""957_getTokens"";
""957_distr"" -> ""957_canDistr"";
""957_transferFrom"" -> ""957_onlyPayloadSize"";
""957_transfer"" -> ""957_onlyPayloadSize"";
""957_transferOwnership"" -> ""957_onlyOwner"";
""957_finishDistribution"" -> ""957_onlyOwner"";
""957_withdraw"" -> ""957_onlyOwner"";
""957_adminClaimAirdropMultiple"" -> ""957_onlyOwner"";
""957_finishDistribution"" -> ""957_canDistr"";
""957_ShalloToken"" -> ""957_distr"";
}
"
0x1de89382684ce5a99fc9d3d4b709706d6a013571.sol,Pausable,contract Pausable is Ownable { bool public paused = true; modifier whenNotPaused() { require(!paused); _; },0,"subgraph cluster_254_Pausable {
label=""Pausable"";
""254_pause"" [label=""pause""];
""254_unpause"" [label=""unpause""];
""254_unpause"" -> ""254_whenPaused"";
""254_pause"" -> ""254_onlyOwner"";
""254_pause"" -> ""254_whenNotPaused"";
""254_unpause"" -> ""254_onlyOwner"";
}
"
0x32ff276e98517ef6e0ad7bc7b2674baa0f1c388b.sol,BillPokerPreICO,"contract BillPokerPreICO is Ownable, Pausable { using SafeMath for uint; address public tokenWallet = 0xf91E6d611ec35B985bADAD2F0DA96820930B9BD2; uint public tokensSold; uint public weiRaised; mapping (address => uint256) public holdTokens; mapping (address => uint256) public purchaseTokens; address[] public holdTokenInvestors; Token public token = Token(0xc305fcdc300fa43c527e9327711f360e79528a70); uint public constant minInvest = 0.0001 ether; uint public constant tokensLimit = 25000000 ether; uint256 public startTime = 1510339500; uint256 public endTime = 1519689600; uint public price = 0.0001 ether; bool public isHoldTokens = false; uint public investorCount; mapping (bytes32 => Promo) public promoMap; struct Promo { bool enable; uint investorPercentToken; address dealer; uint dealerPercentToken; uint dealerPercentETH; uint buyCount; uint investorTokenAmount; uint dealerTokenAmount; uint investorEthAmount; uint dealerEthAmount; }",0,"subgraph cluster_985_BillPokerPreICO {
label=""BillPokerPreICO"";
""985_holdTokenInvestorsCount"" [label=""holdTokenInvestorsCount""];
""985_getTimeBonus"" [label=""getTimeBonus""];
""985_getCountBonus"" [label=""getCountBonus""];
""985_addPromo"" [label=""addPromo""];
""985_withdrawal"" [label=""withdrawal""];
""985_buyTokens"" [label=""buyTokens""];
""985_fallback"" [label=""fallback""];
""985_removePromo"" [label=""removePromo""];
""985_sendTokens"" [label=""sendTokens""];
""985_finalSendTokens"" [label=""finalSendTokens""];
""985_fallback"" -> ""985_buyTokens"";
""985_buyTokens"" -> ""985_getTimeBonus"";
""985_finalSendTokens"" -> ""985_onlyOwner"";
""985_removePromo"" -> ""985_onlyOwner"";
""985_withdrawal"" -> ""985_onlyOwner"";
""985_buyTokens"" -> ""985_whenNotPaused"";
""985_buyTokens"" -> ""985_getCountBonus"";
""985_addPromo"" -> ""985_onlyOwner"";
""985_buyTokens"" -> ""985_sendTokens"";
}
"
0xa5dc0165b798779ac80acc84c4da4ee77b79843f.sol,Whitelist,contract Whitelist is HasOwner { mapping(address => bool) public whitelist; function Whitelist(address _owner) public HasOwner(_owner) { },0,"subgraph cluster_1044_Whitelist {
label=""Whitelist"";
""1044_whitelistAddresses"" [label=""whitelistAddresses""];
""1044_Whitelist"" [label=""Whitelist""];
""1044_blacklistAddresses"" [label=""blacklistAddresses""];
""1044_setWhitelistEntries"" [label=""setWhitelistEntries""];
""1044_blacklistAddresses"" -> ""1044_onlyOwner"";
""1044_whitelistAddresses"" -> ""1044_setWhitelistEntries"";
""1044_Whitelist"" -> ""1044_HasOwner"";
""1044_blacklistAddresses"" -> ""1044_setWhitelistEntries"";
""1044_whitelistAddresses"" -> ""1044_onlyOwner"";
}
"
0x2169cce281717d204fa0ecf846a6171e96234d72.sol,BurnableToken,"contract BurnableToken is BasicToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { require(_value <= balances[msg.sender]); address burner = msg.sender; balances[burner] = balances[burner].sub(_value); totalSupply_ = totalSupply_.sub(_value); emit Burn(burner, _value); emit Transfer(burner, address(0), _value); }",0,"subgraph cluster_382_BurnableToken {
label=""BurnableToken"";
""382_burn"" [label=""burn""];
}
"
0xd9485499499d66b175cf5ed54c0a19f1a6bcb61a.sol,ERC20Token,contract ERC20Token { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },0,"subgraph cluster_210_ERC20Token {
label=""ERC20Token"";
""210_approve"" [label=""approve""];
""210_transferFrom"" [label=""transferFrom""];
""210_totalSupply"" [label=""totalSupply""];
""210_allowance"" [label=""allowance""];
""210_transfer"" [label=""transfer""];
""210_balanceOf"" [label=""balanceOf""];
}
"
0xd2cd43c4f6a6fa7bdfa44ee5bc486bae34f9a2aa.sol,Crowdsale,"contract Crowdsale is CrowdsaleBase { bool public requireCustomerId; bool public requiredSignedAddress; address public signerAddress; function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) CrowdsaleBase(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) { }",0,"subgraph cluster_1390_AllocatedCrowdsaleMixin {
label=""AllocatedCrowdsaleMixin"";
""1390_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""1390_AllocatedCrowdsaleMixin"" [label=""AllocatedCrowdsaleMixin""];
""1390_isBreakingCap"" [label=""isBreakingCap""];
""1390_assignTokens"" [label=""assignTokens""];
""1390_getTokensLeft"" [label=""getTokensLeft""];
""1390_isCrowdsaleFull"" -> ""1390_getTokensLeft"";
""1390_isBreakingCap"" -> ""1390_getTokensLeft"";
}
"
0xf5587929c51017cfa8d0ead672fcc6b39f1496b0.sol,RippleCredit,"contract RippleCredit is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 500000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000e8; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0xFF84C3EAB550CBAb11725CA50F5bee01d9670fD9; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1288_RippleCredit {
label=""RippleCredit"";
""1288_balanceOf"" [label=""balanceOf""];
""1288_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1288_transfer"" [label=""transfer""];
""1288_getTokenBalance"" [label=""getTokenBalance""];
""1288_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1288_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1288_burn"" [label=""burn""];
""1288_Distribute"" [label=""Distribute""];
""1288_distr"" [label=""distr""];
""1288_getTokens"" [label=""getTokens""];
""1288_transferFrom"" [label=""transferFrom""];
""1288_constructor"" [label=""constructor""];
""1288_fallback"" [label=""fallback""];
""1288_add"" [label=""add""];
""1288_withdraw"" [label=""withdraw""];
""1288_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1288_transferOwnership"" [label=""transferOwnership""];
""1288_approve"" [label=""approve""];
""1288_finishDistribution"" [label=""finishDistribution""];
""1288_withdrawAll"" [label=""withdrawAll""];
""1288_allowance"" [label=""allowance""];
""1288_burn"" -> ""1288_onlyOwner"";
""1288_add"" -> ""1288_onlyOwner"";
""1288_distr"" -> ""1288_canDistr"";
""1288_withdrawAll"" -> ""1288_onlyOwner"";
""1288_withdraw"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_distr"";
""1288_transfer"" -> ""1288_onlyPayloadSize"";
""1288_DistributeAirdrop"" -> ""1288_Distribute"";
""1288_finishDistribution"" -> ""1288_onlyOwner"";
""1288_transferFrom"" -> ""1288_onlyPayloadSize"";
""1288_fallback"" -> ""1288_getTokens"";
""1288_transferOwnership"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_canDistr"";
""1288_withdrawForeignTokens"" -> ""1288_onlyOwner"";
""1288_finishDistribution"" -> ""1288_canDistr"";
""1288_DistributeAirdropMultiple"" -> ""1288_onlyOwner"";
""1288_DistributeAirdropMultiple"" -> ""1288_Distribute"";
""1288_updateTokensPerEth"" -> ""1288_onlyOwner"";
""1288_Distribute"" -> ""1288_onlyOwner"";
""1288_DistributeAirdrop"" -> ""1288_onlyOwner"";
""1288_constructor"" -> ""1288_distr"";
}
"
0x004a60e932aeb59ab06996586a64c8cea37c3875.sol,MinCoin,contract MinCoin is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; function MinCoin() { balances[msg.sender] = 1000000000000000000000; totalSupply = 1000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 10; fundsWallet = msg.sender; },0,"subgraph cluster_421_MinCoin {
label=""MinCoin"";
""421_fallback"" [label=""fallback""];
""421_MinCoin"" [label=""MinCoin""];
""421_approveAndCall"" [label=""approveAndCall""];
}
"
0x365ec7b439abcc8a3a2c4289f0868a4adcd996e9.sol,EtherRacingCore,"contract EtherRacingCore is Ownable, Pausable { uint64 _seed = 0; function random(uint64 upper) internal returns (uint64) { _seed = uint64(keccak256(keccak256(block.blockhash(block.number), _seed), now)); return _seed % upper; }",0,"subgraph cluster_1857_EtherRacingCore {
label=""EtherRacingCore"";
""1857_bid"" [label=""bid""];
""1857_EtherRacingCore"" [label=""EtherRacingCore""];
""1857_getCarProductEarning"" [label=""getCarProductEarning""];
""1857_addAuction"" [label=""addAuction""];
""1857_getCarProductName"" [label=""getCarProductName""];
""1857_getPlayerBalance"" [label=""getPlayerBalance""];
""1857_getCarProduct"" [label=""getCarProduct""];
""1857_cancelAuction"" [label=""cancelAuction""];
""1857_cashOutCar"" [label=""cashOutCar""];
""1857_getCarDetails"" [label=""getCarDetails""];
""1857_getCarProductCurrentPrice"" [label=""getCarProductCurrentPrice""];
""1857_addCarInit"" [label=""addCarInit""];
""1857_CompleteInit"" [label=""CompleteInit""];
""1857_getCarCurrentPriceAuction"" [label=""getCarCurrentPriceAuction""];
""1857_getCarAuctionID"" [label=""getCarAuctionID""];
""1857_getCarSelling"" [label=""getCarSelling""];
""1857_getCarEarning"" [label=""getCarEarning""];
""1857_getCarCount"" [label=""getCarCount""];
""1857_setUpgradeAddress"" [label=""setUpgradeAddress""];
""1857_cashOut"" [label=""cashOut""];
""1857_getCarOwner"" [label=""getCarOwner""];
""1857_buyCar"" [label=""buyCar""];
""1857_random"" [label=""random""];
""1857_addCarProduct"" [label=""addCarProduct""];
""1857_levelUpCar"" [label=""levelUpCar""];
""1857_endSaleCarProduct"" [label=""endSaleCarProduct""];
""1857__transfer"" [label=""_transfer""];
""1857_upgradeCar"" [label=""upgradeCar""];
""1857__transferAction"" [label=""_transferAction""];
""1857_getCarProductCount"" [label=""getCarProductCount""];
""1857_cashOutCar"" -> ""1857_whenNotPaused"";
""1857_getCarCurrentPriceAuction"" -> ""1857_getCarSelling"";
""1857__transferAction"" -> ""1857_whenNotPaused"";
""1857_cancelAuction"" -> ""1857_whenNotPaused"";
""1857_setUpgradeAddress"" -> ""1857_onlyMaster"";
""1857_buyCar"" -> ""1857_random"";
""1857_addCarInit"" -> ""1857_onlyMaster"";
""1857_EtherRacingCore"" -> ""1857_addCarProduct"";
""1857_addAuction"" -> ""1857_whenNotPaused"";
""1857_bid"" -> ""1857_getCarCurrentPriceAuction"";
""1857_upgradeCar"" -> ""1857_whenNotPaused"";
""1857_cashOutCar"" -> ""1857_getCarEarning"";
""1857_addCarProduct"" -> ""1857_onlyMaster"";
""1857_CompleteInit"" -> ""1857_onlyMaster"";
""1857__transfer"" -> ""1857_whenNotPaused"";
""1857_bid"" -> ""1857_whenNotPaused"";
""1857_cashOut"" -> ""1857_whenNotPaused"";
""1857_endSaleCarProduct"" -> ""1857_onlyMaster"";
""1857_levelUpCar"" -> ""1857_onlyMaster"";
}
"
0x004a60e932aeb59ab06996586a64c8cea37c3875.sol,MinCoin,contract MinCoin is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; function MinCoin() { balances[msg.sender] = 1000000000000000000000; totalSupply = 1000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 10; fundsWallet = msg.sender; },0,"subgraph cluster_421_MinCoin {
label=""MinCoin"";
""421_fallback"" [label=""fallback""];
""421_MinCoin"" [label=""MinCoin""];
""421_approveAndCall"" [label=""approveAndCall""];
}
"
0x3106526a07ee43ca97d794ec3ba3578a47d84cfb.sol,VirMYR,"contract VirMYR { string public name; string public symbol; uint8 public decimals = 2; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = 1000000000000000000000000000; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",0,"subgraph cluster_355_VirMYR {
label=""VirMYR"";
""355_TokenERC20"" [label=""TokenERC20""];
""355__transfer"" [label=""_transfer""];
""355_transferFrom"" [label=""transferFrom""];
""355_transfer"" [label=""transfer""];
""355_burnFrom"" [label=""burnFrom""];
""355_approve"" [label=""approve""];
""355_burn"" [label=""burn""];
""355_approveAndCall"" [label=""approveAndCall""];
""355_approveAndCall"" -> ""355_approve"";
""355_transfer"" -> ""355__transfer"";
""355_transferFrom"" -> ""355__transfer"";
}
"
0x74f7dca757597a5a9293c73895893fd2c295c5b6.sol,MinerX,"contract MinerX is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 2 * 10**9 * (10**uint256(decimals)); uint256 public weiRaised; uint256 public tokenAllocated; address public owner; bool public saleToken = true; event OwnerChanged(address indexed previousOwner, address indexed newOwner); event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount); event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken); event Transfer(address indexed _from, address indexed _to, uint256 _value); function MinerX() public { totalSupply = INITIAL_SUPPLY; owner = msg.sender; balances[owner] = INITIAL_SUPPLY; tokenAllocated = 0; transfersEnabled = true; }",0,"subgraph cluster_1542_MinerX {
label=""MinerX"";
""1542_enableTransfers"" [label=""enableTransfers""];
""1542_claimTokens"" [label=""claimTokens""];
""1542_validPurchaseTokens"" [label=""validPurchaseTokens""];
""1542_getTotalAmountOfTokens"" [label=""getTotalAmountOfTokens""];
""1542_changeOwner"" [label=""changeOwner""];
""1542_buyTokens"" [label=""buyTokens""];
""1542_startSale"" [label=""startSale""];
""1542_MinerX"" [label=""MinerX""];
""1542_stopSale"" [label=""stopSale""];
""1542_mint"" [label=""mint""];
""1542_fallback"" [label=""fallback""];
""1542_claimTokens"" -> ""1542_onlyOwner"";
""1542_startSale"" -> ""1542_onlyOwner"";
""1542_stopSale"" -> ""1542_onlyOwner"";
""1542_validPurchaseTokens"" -> ""1542_getTotalAmountOfTokens"";
""1542_fallback"" -> ""1542_buyTokens"";
""1542_buyTokens"" -> ""1542_mint"";
""1542_buyTokens"" -> ""1542_validPurchaseTokens"";
""1542_claimTokens"" -> ""1542_balanceOf"";
""1542_enableTransfers"" -> ""1542_onlyOwner"";
""1542_claimTokens"" -> ""1542_transfer"";
""1542_changeOwner"" -> ""1542_onlyOwner"";
}
"
0x17df117bb806a622d841bd5166a23b5d8746232f.sol,ItemRegistry,"contract ItemRegistry { using SafeMath for uint256; enum ItemClass {TIER1, TIER2, TIER3, TIER4}",0,"subgraph cluster_785_ItemRegistry {
label=""ItemRegistry"";
""785_nextPriceOf"" [label=""nextPriceOf""];
""785_ownerOf"" [label=""ownerOf""];
""785_isContract"" [label=""isContract""];
""785_ItemRegistry"" [label=""ItemRegistry""];
""785_setCut"" [label=""setCut""];
""785_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""785_setOwner"" [label=""setOwner""];
""785_allItemsForSale"" [label=""allItemsForSale""];
""785_startingPriceOf"" [label=""startingPriceOf""];
""785_numberOfItemsForSale"" [label=""numberOfItemsForSale""];
""785_listItem"" [label=""listItem""];
""785_balanceOf"" [label=""balanceOf""];
""785_priceOf"" [label=""priceOf""];
""785_buy"" [label=""buy""];
""785_allOf"" [label=""allOf""];
""785_withdraw"" [label=""withdraw""];
""785_itemsOfOwner"" [label=""itemsOfOwner""];
""785_calculateNextPrice"" [label=""calculateNextPrice""];
""785_listMultipleItems"" [label=""listMultipleItems""];
""785_classOf"" [label=""classOf""];
""785_withdraw"" -> ""785_onlyOwner"";
""785_allOf"" -> ""785_nextPriceOf"";
""785_listMultipleItems"" -> ""785_listItem"";
""785_nextPriceOf"" -> ""785_calculateNextPrice"";
""785_buy"" -> ""785_priceOf"";
""785_allOf"" -> ""785_priceOf"";
""785_listItem"" -> ""785_onlyOwner"";
""785_nextPriceOf"" -> ""785_classOf"";
""785_setOwner"" -> ""785_onlyOwner"";
""785_itemsOfOwner"" -> ""785_ownerOf"";
""785_allOf"" -> ""785_classOf"";
""785_allOf"" -> ""785_ownerOf"";
""785_itemsOfOwner"" -> ""785_balanceOf"";
""785_nextPriceOf"" -> ""785_priceOf"";
""785_buy"" -> ""785_ownerOf"";
""785_setCut"" -> ""785_onlyOwner"";
""785_buy"" -> ""785_isContract"";
""785_balanceOf"" -> ""785_ownerOf"";
""785_buy"" -> ""785_nextPriceOf"";
""785_listMultipleItems"" -> ""785_onlyOwner"";
""785_allOf"" -> ""785_startingPriceOf"";
}
"
0x33259c14a28c89af457c9dbac9743f3efb651f09.sol,PODH,contract PODH { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1307_PODH {
label=""PODH"";
""1307_purchaseTokens"" [label=""purchaseTokens""];
""1307_disableInitialStage"" [label=""disableInitialStage""];
""1307_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1307_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1307_setName"" [label=""setName""];
""1307_transfer"" [label=""transfer""];
""1307_setAdministrator"" [label=""setAdministrator""];
""1307_myTokens"" [label=""myTokens""];
""1307_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1307_balanceOf"" [label=""balanceOf""];
""1307_buy"" [label=""buy""];
""1307_sqrt"" [label=""sqrt""];
""1307_totalSupply"" [label=""totalSupply""];
""1307_withdraw"" [label=""withdraw""];
""1307_exit"" [label=""exit""];
""1307_dividendsOf"" [label=""dividendsOf""];
""1307_buyPrice"" [label=""buyPrice""];
""1307_PODH"" [label=""PODH""];
""1307_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1307_reinvest"" [label=""reinvest""];
""1307_myDividends"" [label=""myDividends""];
""1307_setStakingRequirement"" [label=""setStakingRequirement""];
""1307_sell"" [label=""sell""];
""1307_fallback"" [label=""fallback""];
""1307_sellPrice"" [label=""sellPrice""];
""1307_setSymbol"" [label=""setSymbol""];
""1307_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1307_withdraw"" -> ""1307_onlyStronghands"";
""1307_transfer"" -> ""1307_onlyBagholders"";
""1307_sellPrice"" -> ""1307_tokensToEthereum_"";
""1307_setAdministrator"" -> ""1307_onlyAdministrator"";
""1307_calculateTokensReceived"" -> ""1307_ethereumToTokens_"";
""1307_calculateEthereumReceived"" -> ""1307_tokensToEthereum_"";
""1307_disableInitialStage"" -> ""1307_onlyAdministrator"";
""1307_purchaseTokens"" -> ""1307_antiEarlyWhale"";
""1307_myTokens"" -> ""1307_balanceOf"";
""1307_reinvest"" -> ""1307_onlyStronghands"";
""1307_transfer"" -> ""1307_withdraw"";
""1307_sell"" -> ""1307_onlyBagholders"";
""1307_buyPrice"" -> ""1307_tokensToEthereum_"";
""1307_myDividends"" -> ""1307_dividendsOf"";
""1307_transfer"" -> ""1307_myDividends"";
""1307_withdraw"" -> ""1307_myDividends"";
""1307_exit"" -> ""1307_withdraw"";
""1307_reinvest"" -> ""1307_myDividends"";
""1307_buy"" -> ""1307_purchaseTokens"";
""1307_exit"" -> ""1307_sell"";
""1307_setName"" -> ""1307_onlyAdministrator"";
""1307_reinvest"" -> ""1307_purchaseTokens"";
""1307_purchaseTokens"" -> ""1307_ethereumToTokens_"";
""1307_transfer"" -> ""1307_tokensToEthereum_"";
""1307_setSymbol"" -> ""1307_onlyAdministrator"";
""1307_fallback"" -> ""1307_purchaseTokens"";
""1307_ethereumToTokens_"" -> ""1307_sqrt"";
""1307_setStakingRequirement"" -> ""1307_onlyAdministrator"";
""1307_sell"" -> ""1307_tokensToEthereum_"";
}
"
0x64b103aee34d1fa22fb4c45c4be105cbe1c4a179.sol,RainbowsEverywhere,contract RainbowsEverywhere { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1312_RainbowsEverywhere {
label=""RainbowsEverywhere"";
""1312_setStakingRequirement"" [label=""setStakingRequirement""];
""1312_balanceOf"" [label=""balanceOf""];
""1312_setName"" [label=""setName""];
""1312_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1312_withdraw"" [label=""withdraw""];
""1312_sqrt"" [label=""sqrt""];
""1312_purchaseTokens"" [label=""purchaseTokens""];
""1312_exit"" [label=""exit""];
""1312_transfer"" [label=""transfer""];
""1312_myDividends"" [label=""myDividends""];
""1312_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1312_totalSupply"" [label=""totalSupply""];
""1312_buy"" [label=""buy""];
""1312_dividendsOf"" [label=""dividendsOf""];
""1312_buyPrice"" [label=""buyPrice""];
""1312_setAdministrator"" [label=""setAdministrator""];
""1312_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1312_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1312_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1312_RainbowsEverywhere"" [label=""RainbowsEverywhere""];
""1312_sellPrice"" [label=""sellPrice""];
""1312_myTokens"" [label=""myTokens""];
""1312_disableInitialStage"" [label=""disableInitialStage""];
""1312_fallback"" [label=""fallback""];
""1312_sell"" [label=""sell""];
""1312_reinvest"" [label=""reinvest""];
""1312_setSymbol"" [label=""setSymbol""];
""1312_sell"" -> ""1312_tokensToEthereum_"";
""1312_buyPrice"" -> ""1312_tokensToEthereum_"";
""1312_setName"" -> ""1312_onlyAdministrator"";
""1312_transfer"" -> ""1312_onlyBagholders"";
""1312_calculateTokensReceived"" -> ""1312_ethereumToTokens_"";
""1312_buy"" -> ""1312_purchaseTokens"";
""1312_disableInitialStage"" -> ""1312_onlyAdministrator"";
""1312_reinvest"" -> ""1312_purchaseTokens"";
""1312_fallback"" -> ""1312_purchaseTokens"";
""1312_sellPrice"" -> ""1312_tokensToEthereum_"";
""1312_purchaseTokens"" -> ""1312_ethereumToTokens_"";
""1312_exit"" -> ""1312_sell"";
""1312_transfer"" -> ""1312_tokensToEthereum_"";
""1312_ethereumToTokens_"" -> ""1312_sqrt"";
""1312_withdraw"" -> ""1312_onlyStronghands"";
""1312_reinvest"" -> ""1312_myDividends"";
""1312_reinvest"" -> ""1312_onlyStronghands"";
""1312_sell"" -> ""1312_onlyBagholders"";
""1312_transfer"" -> ""1312_withdraw"";
""1312_setSymbol"" -> ""1312_onlyAdministrator"";
""1312_setStakingRequirement"" -> ""1312_onlyAdministrator"";
""1312_myTokens"" -> ""1312_balanceOf"";
""1312_exit"" -> ""1312_withdraw"";
""1312_setAdministrator"" -> ""1312_onlyAdministrator"";
""1312_withdraw"" -> ""1312_myDividends"";
""1312_purchaseTokens"" -> ""1312_antiEarlyWhale"";
""1312_calculateEthereumReceived"" -> ""1312_tokensToEthereum_"";
""1312_transfer"" -> ""1312_myDividends"";
""1312_myDividends"" -> ""1312_dividendsOf"";
}
"
0x17c93f4bfe407b4f58b73c7839f3a588d499e67d.sol,BurnableToken,"contract BurnableToken is StandardToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { require(_value <= balances[msg.sender]); address burner = msg.sender; balances[burner] = balances[burner].sub(_value); totalSupply_ = totalSupply_.sub(_value); Burn(burner, _value); Transfer(burner, address(0), _value); }",0,"subgraph cluster_561_BurnableToken {
label=""BurnableToken"";
""561_burn"" [label=""burn""];
}
"
0x693e3857aa48bb2902fd12f724dc095622e61afc.sol,DopeToken,"contract DopeToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function DopeToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 10000000000000000000000; balances[0xe2f54E82B8E413537B95e739C2e80d99dE40C67B] = _totalSupply; Transfer(address(0), 0xe2f54E82B8E413537B95e739C2e80d99dE40C67B, _totalSupply); }",0,"subgraph cluster_543_DopeToken {
label=""DopeToken"";
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_DopeToken"" [label=""DopeToken""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x72a73495b769682d7b09a9641fa1a95e308fbe08.sol,P4,contract P4 is Whitelist { modifier onlyTokenHolders { require(myTokens() > 0); _; },0,"subgraph cluster_9_P4RTYRelay {
label=""P4RTYRelay"";
""9_relay"" [label=""relay""];
}
"
0xdcfae5ec906742f66e57e09ce098f5adb76ababa.sol,EthDeposit,contract EthDeposit is Owned { address public Manager; address public NewManager; uint public SponsorsQty; uint public CharterCapital; uint public ClientQty; uint public PrcntRate = 5; bool paymentsAllowed; struct Lender { uint LastLendTime; uint Amount; uint Reserved; },0,"subgraph cluster_488_EthDeposit {
label=""EthDeposit"";
""488_Deposit"" [label=""Deposit""];
""488_fallback"" [label=""fallback""];
""488_AuthorizePayments"" [label=""AuthorizePayments""];
""488_ToSponsor"" [label=""ToSponsor""];
""488_isManager"" [label=""isManager""];
""488_SetPrcntRate"" [label=""SetPrcntRate""];
""488_FixProfit"" [label=""FixProfit""];
""488_ConfirmManager"" [label=""ConfirmManager""];
""488_StopPaymens"" [label=""StopPaymens""];
""488_WitdrawLenderProfit"" [label=""WitdrawLenderProfit""];
""488_WithdrawToSponsor"" [label=""WithdrawToSponsor""];
""488_StartPaymens"" [label=""StartPaymens""];
""488_canManage"" [label=""canManage""];
""488_ChangeManager"" [label=""ChangeManager""];
""488_CheckProfit"" [label=""CheckProfit""];
""488_init"" [label=""init""];
""488_WithdrawToSponsor"" -> ""488_isOwner"";
""488_AuthorizePayments"" -> ""488_isOwner"";
""488_StartPaymens"" -> ""488_AuthorizePayments"";
""488_StopPaymens"" -> ""488_canManage"";
""488_fallback"" -> ""488_ToSponsor"";
""488_WitdrawLenderProfit"" -> ""488_FixProfit"";
""488_FixProfit"" -> ""488_CheckProfit"";
""488_ChangeManager"" -> ""488_canManage"";
""488_StartPaymens"" -> ""488_canManage"";
""488_StopPaymens"" -> ""488_AuthorizePayments"";
""488_SetPrcntRate"" -> ""488_canManage"";
""488_Deposit"" -> ""488_FixProfit"";
}
"
0xedac0e5bedf702accc3a9b2b4b44b4ba0806e882.sol,DSMath,"contract DSMath { function add(uint256 x, uint256 y) constant internal returns (uint256 z) { assert((z = x + y) >= x); }",0,"subgraph cluster_807_DSMath {
label=""DSMath"";
""807_cast"" [label=""cast""];
""807_wdiv"" [label=""wdiv""];
""807_hmin"" [label=""hmin""];
""807_wmax"" [label=""wmax""];
""807_hmax"" [label=""hmax""];
""807_rsub"" [label=""rsub""];
""807_hmul"" [label=""hmul""];
""807_div"" [label=""div""];
""807_wadd"" [label=""wadd""];
""807_rmax"" [label=""rmax""];
""807_hadd"" [label=""hadd""];
""807_rpow"" [label=""rpow""];
""807_min"" [label=""min""];
""807_imax"" [label=""imax""];
""807_add"" [label=""add""];
""807_wmin"" [label=""wmin""];
""807_mul"" [label=""mul""];
""807_hdiv"" [label=""hdiv""];
""807_rmin"" [label=""rmin""];
""807_hsub"" [label=""hsub""];
""807_max"" [label=""max""];
""807_wmul"" [label=""wmul""];
""807_radd"" [label=""radd""];
""807_wsub"" [label=""wsub""];
""807_rmul"" [label=""rmul""];
""807_imin"" [label=""imin""];
""807_rdiv"" [label=""rdiv""];
""807_sub"" [label=""sub""];
""807_wmul"" -> ""807_cast"";
""807_wmax"" -> ""807_hmax"";
""807_rpow"" -> ""807_rmul"";
""807_wadd"" -> ""807_hadd"";
""807_rsub"" -> ""807_hsub"";
""807_wsub"" -> ""807_hsub"";
""807_wdiv"" -> ""807_cast"";
""807_rmin"" -> ""807_hmin"";
""807_rmul"" -> ""807_cast"";
""807_hadd"" -> ""807_assert"";
""807_rmax"" -> ""807_hmax"";
""807_wmin"" -> ""807_hmin"";
""807_radd"" -> ""807_hadd"";
""807_rdiv"" -> ""807_cast"";
}
"
0x4e9b6e88e6b83453e3ec6a1ffa0c95f289cf81d5.sol,DailyRoi,contract DailyRoi { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_40_AcceptsDailyRoi {
label=""AcceptsDailyRoi"";
""40_AcceptsDailyRoi"" [label=""AcceptsDailyRoi""];
""40_tokenFallback"" [label=""tokenFallback""];
}
"
0xc14c848a2a5945e1a415976fc059550ecbe7b034.sol,Line,contract Line { address private owner; uint constant public jackpotNumerator = 50; uint constant public winNumerator = 5; uint constant public giftNumerator = 1; uint constant public denominator = 100; uint constant public ownerDenominator = 100; uint public jackpot = 0; address[] internal addresses; mapping(address => SpinRec) internal spinsByAddr; mapping(bytes32 => SpinRec) internal spinsByQuery; struct SpinRec { uint id; bytes32 queryId; uint bet; uint token; },0,"subgraph cluster_537_Line {
label=""Line"";
""537_getQueryId"" [label=""getQueryId""];
""537_reset"" [label=""reset""];
""537_fallback"" [label=""fallback""];
""537_constructor"" [label=""constructor""];
""537_random"" [label=""random""];
""537_getQueryIdBytes"" [label=""getQueryIdBytes""];
""537_recordSpin"" [label=""recordSpin""];
""537_revealResult"" [label=""revealResult""];
""537_getToken"" [label=""getToken""];
""537_getTokenForBytes"" [label=""getTokenForBytes""];
""537_getTokenFor"" [label=""getTokenFor""];
""537_waiver"" [label=""waiver""];
""537_fallback"" -> ""537_random"";
""537_fallback"" -> ""537_revealResult"";
""537_reset"" -> ""537_onlyOwner"";
""537_fallback"" -> ""537_recordSpin"";
}
"
0xa21c9a3ae47103b1fd1dfa04766c4d00c19e1ff6.sol,CryptoOscarsToken,"contract CryptoOscarsToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",0,"subgraph cluster_930_CryptoOscarsToken {
label=""CryptoOscarsToken"";
""930_approve"" [label=""approve""];
""930_balanceOf"" [label=""balanceOf""];
""930_transfer"" [label=""transfer""];
""930_ownerOf"" [label=""ownerOf""];
""930_payout"" [label=""payout""];
""930_takeOwnership"" [label=""takeOwnership""];
""930_totalSupply"" [label=""totalSupply""];
""930__createMovie"" [label=""_createMovie""];
""930_setCOO"" [label=""setCOO""];
""930_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""930_setCEO"" [label=""setCEO""];
""930__payout"" [label=""_payout""];
""930_tokensOfOwner"" [label=""tokensOfOwner""];
""930__addressNotNull"" [label=""_addressNotNull""];
""930_priceOf"" [label=""priceOf""];
""930_createContractMovie"" [label=""createContractMovie""];
""930__transfer"" [label=""_transfer""];
""930_name"" [label=""name""];
""930_purchase"" [label=""purchase""];
""930__approved"" [label=""_approved""];
""930_createPromoMovie"" [label=""createPromoMovie""];
""930_symbol"" [label=""symbol""];
""930__owns"" [label=""_owns""];
""930_transferFrom"" [label=""transferFrom""];
""930_getMovie"" [label=""getMovie""];
""930_implementsERC721"" [label=""implementsERC721""];
""930_transferFrom"" -> ""930__addressNotNull"";
""930_takeOwnership"" -> ""930__approved"";
""930_transferFrom"" -> ""930__approved"";
""930_createContractMovie"" -> ""930_onlyCOO"";
""930_setCEO"" -> ""930_onlyCEO"";
""930_purchase"" -> ""930__transfer"";
""930_purchase"" -> ""930__addressNotNull"";
""930_payout"" -> ""930_onlyCLevel"";
""930__createMovie"" -> ""930__transfer"";
""930_payout"" -> ""930__payout"";
""930_createContractMovie"" -> ""930__createMovie"";
""930_createPromoMovie"" -> ""930_onlyCOO"";
""930_tokensOfOwner"" -> ""930_balanceOf"";
""930_createPromoMovie"" -> ""930__createMovie"";
""930_takeOwnership"" -> ""930__addressNotNull"";
""930_setCOO"" -> ""930_onlyCEO"";
""930_transferFrom"" -> ""930__transfer"";
""930_transferFrom"" -> ""930__owns"";
""930_tokensOfOwner"" -> ""930_totalSupply"";
""930_transfer"" -> ""930__owns"";
""930_takeOwnership"" -> ""930__transfer"";
""930_approve"" -> ""930__owns"";
""930_transfer"" -> ""930__addressNotNull"";
""930_transfer"" -> ""930__transfer"";
}
"
0x01e6a8af629cc06ff37755a61d9e7dd1135d8c6a.sol,Wrapped_Ether,"contract Wrapped_Ether { using SafeMath for uint256; string public name = ; uint public total_supply; mapping(address => uint) internal balances; mapping(address => mapping (address => uint)) internal allowed; event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value); event StateChanged(bool _success, string _message); function createToken() public payable { require(msg.value > 0); balances[msg.sender] = balances[msg.sender].add(msg.value); total_supply = total_supply.add(msg.value); }",0,"subgraph cluster_2610_Wrapped_Ether {
label=""Wrapped_Ether"";
""2610_withdraw"" [label=""withdraw""];
""2610_transferFrom"" [label=""transferFrom""];
""2610_totalSupply"" [label=""totalSupply""];
""2610_createToken"" [label=""createToken""];
""2610_balanceOf"" [label=""balanceOf""];
""2610_transfer"" [label=""transfer""];
""2610_allowance"" [label=""allowance""];
""2610_approve"" [label=""approve""];
}
"
0x3670a029a6ce9be3bd62c76853e747e65ddf6431.sol,NTA3D,"contract NTA3D is NTA3DEvents { using SafeMath for *; using NameFilter for string; using NTA3DKeysCalc for uint256; string constant public name = ; string constant public symbol = ; bool activated_; address admin; uint256 constant private rndStarts = 12 hours; uint256 constant private rndPerKey = 15 seconds; uint256 constant private rndMax = 12 hours; uint256 constant private cardValidity = 1 hours; uint256 constant private cardPrice = 0.05 ether; uint256 constant private DIVIDE = 1000; uint256 constant private smallDropTrigger = 100 ether; uint256 constant private bigDropTrigger = 300000 * 1e18; uint256 constant private keyPriceTrigger = 50000 * 1e18; uint256 constant private keyPriceFirst = 0.0005 ether; uint256 constant private oneOffInvest1 = 0.1 ether; uint256 constant private oneOffInvest2 = 1 ether; uint256 public rID; uint256 public pID; mapping (address => uint256) public pIDxAddr; mapping (bytes32 => uint256) public pIDxName; mapping (uint256 => NTAdatasets.Player) public pIDPlayer; mapping (uint256 => mapping (uint256 => NTAdatasets.PlayerRound)) public pIDPlayerRound; mapping (uint256 => NTAdatasets.Card) cIDCard; address cardSeller; address[11] partner; address to06; address to04; address to20A; address to20B; mapping (address => uint256) private gameFunds; mapping (uint256 => NTAdatasets.Round) public rIDRound; mapping (uint256 => NTAdatasets.Deposit) public deposit; mapping (uint256 => NTAdatasets.PotSplit) public potSplit; constructor() public { activated_ = false; admin = msg.sender; deposit[0] = NTAdatasets.Deposit(460, 170, 50, 50, 100, 100, 20, 50); deposit[1] = NTAdatasets.Deposit(200, 430, 50, 50, 100, 100, 20, 50); potSplit[0] = NTAdatasets.PotSplit(200, 450, 50, 30, 20, 80, 50, 20, 100); potSplit[1] = NTAdatasets.PotSplit(200, 450, 50, 30, 20, 80, 50, 20, 100); to06 = 0x9B53CC857cD9DD5EbE6bc07Bde67D8CE4076345f; to04 = 0x5835a72118c0C784203B8d39936A0875497B6eCa; to20A = 0xEc2441D3113fC2376cd127344331c0F1b959Ce1C; to20B = 0xd1Dac908c97c0a885e9B413a84ACcC0010C002d2; cardSeller = 0xeE4f032bdB0f9B51D6c7035d3DEFfc217D91225C; }",0,"subgraph cluster_5169_NTA3DKeysCalc {
label=""NTA3DKeysCalc"";
""5169_ethRec"" [label=""ethRec""];
""5169_keys"" [label=""keys""];
""5169_keysRec"" [label=""keysRec""];
""5169_eth"" [label=""eth""];
""5169_keysRec"" -> ""5169_keys"";
""5169_keys"" -> ""5169_eth"";
""5169_ethRec"" -> ""5169_eth"";
}
"
0x28863b9534af2a4c3d912e9a3b76b0b7b4fe2046.sol,ViberateBuyer,"contract ViberateBuyer { mapping (address => uint256) public balances; uint256 public buy_bounty; uint256 public withdraw_bounty; bool public bought_tokens; uint256 public contract_eth_value; bool public kill_switch; bytes32 password_hash = 0xfac0a99293c75e2f2ed76d4eb06030f4f3458f419a67ca0feac3dbe9791275b4; uint256 public earliest_buy_time = 1504612800; uint256 public eth_cap = 10000 ether; address public developer = 0x0639C169D9265Ca4B4DEce693764CdA8ea5F3882; address public sale; ERC20 public token; function set_addresses(address _sale, address _token) { require(msg.sender == developer); require(sale == 0x0); sale = _sale; token = ERC20(_token); }",0,"subgraph cluster_473_ViberateBuyer {
label=""ViberateBuyer"";
""473_set_addresses"" [label=""set_addresses""];
""473_fallback"" [label=""fallback""];
""473_add_to_buy_bounty"" [label=""add_to_buy_bounty""];
""473_withdraw"" [label=""withdraw""];
""473_claim_bounty"" [label=""claim_bounty""];
""473_personal_withdraw"" [label=""personal_withdraw""];
""473_activate_kill_switch"" [label=""activate_kill_switch""];
""473_add_to_withdraw_bounty"" [label=""add_to_withdraw_bounty""];
}
"
0x3686986e559f257cfaccb44f17af5b245e45814f.sol,ZEROtoken,contract ZEROtoken { address owner = msg.sender; bool public purchasingAllowed = false; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalContribution = 0; uint256 public totalSupply = 0; function name() constant returns (string) { return ; },0,"subgraph cluster_524_ZEROtoken {
label=""ZEROtoken"";
""524_balanceOf"" [label=""balanceOf""];
""524_transferFrom"" [label=""transferFrom""];
""524_fallback"" [label=""fallback""];
""524_transfer"" [label=""transfer""];
""524_getStats"" [label=""getStats""];
""524_approve"" [label=""approve""];
""524_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""524_decimals"" [label=""decimals""];
""524_disablePurchasing"" [label=""disablePurchasing""];
""524_enablePurchasing"" [label=""enablePurchasing""];
""524_allowance"" [label=""allowance""];
""524_kill"" [label=""kill""];
""524_name"" [label=""name""];
""524_symbol"" [label=""symbol""];
}
"
0x0242514106114deaa99fd81574142c36edb03b6d.sol,App,"contract App is ZOSLibOwnable { event ProxyCreated(address proxy); event PackageChanged(string providerName, address package, uint64[3] version); struct ProviderInfo { Package package; uint64[3] version; }",0,"subgraph cluster_1015_App {
label=""App"";
""1015_constructor"" [label=""constructor""];
""1015_setPackage"" [label=""setPackage""];
""1015_getProvider"" [label=""getProvider""];
""1015_unsetPackage"" [label=""unsetPackage""];
""1015_create"" [label=""create""];
""1015_getImplementation"" [label=""getImplementation""];
""1015_getPackage"" [label=""getPackage""];
""1015_unsetPackage"" -> ""1015_onlyOwner"";
""1015_getImplementation"" -> ""1015_getProvider"";
""1015_create"" -> ""1015_getImplementation"";
""1015_setPackage"" -> ""1015_onlyOwner"";
}
"
0xc4529ea3f838a7e27a673a87bfe844a5b8b1e4e2.sol,InterestTest,contract InterestTest is Base { address public creator; address public OwnerO; address public Owner1; uint256 public etherLimit = 2 ether; mapping (address => uint256) public balances; mapping (address => uint256) public interestPaid; function initOwner(address owner) { OwnerO = owner; },0,"subgraph cluster_340_InterestTest {
label=""InterestTest"";
""340_deposit"" [label=""deposit""];
""340_fallback"" [label=""fallback""];
""340_calculateInterest"" [label=""calculateInterest""];
""340_currentBalance"" [label=""currentBalance""];
""340_initOwner1"" [label=""initOwner1""];
""340_initOwner"" [label=""initOwner""];
""340_payout"" [label=""payout""];
""340_InterestTest"" [label=""InterestTest""];
""340_payInterest"" [label=""payInterest""];
""340_InterestTest"" -> ""340_initOwner1"";
""340_payInterest"" -> ""340_calculateInterest"";
""340_payInterest"" -> ""340_payout"";
""340_InterestTest"" -> ""340_initOwner"";
}
"
0xcfbc9103362aec4ce3089f155c2da2eea1cb7602.sol,ERC721BasicToken,contract ERC721BasicToken is ERC721Basic { using SafeMath for uint256; using AddressUtils for address; bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba; mapping (uint256 => address) internal tokenOwner; mapping (uint256 => address) internal tokenApprovals; mapping (address => uint256) internal ownedTokensCount; mapping (address => mapping (address => bool)) internal operatorApprovals; modifier onlyOwnerOf(uint256 _tokenId) { require(ownerOf(_tokenId) == msg.sender); _; },0,"subgraph cluster_967_ERC721BasicToken {
label=""ERC721BasicToken"";
""967_ownerOf"" [label=""ownerOf""];
""967_addTokenTo"" [label=""addTokenTo""];
""967_balanceOf"" [label=""balanceOf""];
""967_safeTransferFrom"" [label=""safeTransferFrom""];
""967_approve"" [label=""approve""];
""967_isApprovedForAll"" [label=""isApprovedForAll""];
""967_clearApproval"" [label=""clearApproval""];
""967_transferFrom"" [label=""transferFrom""];
""967_getApproved"" [label=""getApproved""];
""967__burn"" [label=""_burn""];
""967_checkAndCallSafeTransfer"" [label=""checkAndCallSafeTransfer""];
""967_setApprovalForAll"" [label=""setApprovalForAll""];
""967_isApprovedOrOwner"" [label=""isApprovedOrOwner""];
""967_removeTokenFrom"" [label=""removeTokenFrom""];
""967__mint"" [label=""_mint""];
""967_exists"" [label=""exists""];
""967_safeTransferFrom"" -> ""967_canTransfer"";
""967__burn"" -> ""967_removeTokenFrom"";
""967_safeTransferFrom"" -> ""967_checkAndCallSafeTransfer"";
""967_safeTransferFrom"" -> ""967_safeTransferFrom"";
""967_clearApproval"" -> ""967_ownerOf"";
""967__burn"" -> ""967_clearApproval"";
""967_approve"" -> ""967_ownerOf"";
""967_safeTransferFrom"" -> ""967_transferFrom"";
""967_isApprovedOrOwner"" -> ""967_isApprovedForAll"";
""967_removeTokenFrom"" -> ""967_ownerOf"";
""967_approve"" -> ""967_getApproved"";
""967_transferFrom"" -> ""967_removeTokenFrom"";
""967_isApprovedOrOwner"" -> ""967_getApproved"";
""967_isApprovedOrOwner"" -> ""967_ownerOf"";
""967_transferFrom"" -> ""967_addTokenTo"";
""967__mint"" -> ""967_addTokenTo"";
""967_transferFrom"" -> ""967_clearApproval"";
""967_transferFrom"" -> ""967_canTransfer"";
""967_approve"" -> ""967_isApprovedForAll"";
}
"
0xed26cf773ac74d213668ccfda7de0831a6a5bb96.sol,eIDR,"contract eIDR { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_380_eIDR {
label=""eIDR"";
""380__transfer"" [label=""_transfer""];
""380_burnFrom"" [label=""burnFrom""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_approve"" [label=""approve""];
""380_transferFrom"" [label=""transferFrom""];
""380_transfer"" [label=""transfer""];
""380_burn"" [label=""burn""];
""380_constructor"" [label=""constructor""];
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0xed846c2962df064b6fecc7029bc5cd366699cc7f.sol,usingOraclize,contract usingOraclize { uint constant day = 60*60*24; uint constant week = 60*60*24*7; uint constant month = 60*60*24*30; byte constant proofType_NONE = 0x00; byte constant proofType_TLSNotary = 0x10; byte constant proofType_Android = 0x20; byte constant proofType_Ledger = 0x30; byte constant proofType_Native = 0xF0; byte constant proofStorage_IPFS = 0x01; uint8 constant networkID_auto = 0; uint8 constant networkID_mainnet = 1; uint8 constant networkID_testnet = 2; uint8 constant networkID_morden = 2; uint8 constant networkID_consensys = 161; OraclizeAddrResolverI OAR; OraclizeI oraclize; modifier oraclizeAPI { if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork(networkID_auto); if(address(oraclize) != OAR.getAddress()) oraclize = OraclizeI(OAR.getAddress()); _; },0,"subgraph cluster_5992_usingOraclize {
label=""usingOraclize"";
""5992_oraclize_randomDS_setCommitment"" [label=""oraclize_randomDS_setCommitment""];
""5992_parseAddr"" [label=""parseAddr""];
""5992_matchBytes32Prefix"" [label=""matchBytes32Prefix""];
""5992_strConcat"" [label=""strConcat""];
""5992_oraclize_setCustomGasPrice"" [label=""oraclize_setCustomGasPrice""];
""5992_oraclize_newRandomDSQuery"" [label=""oraclize_newRandomDSQuery""];
""5992_safer_ecrecover"" [label=""safer_ecrecover""];
""5992_oraclize_getNetworkName"" [label=""oraclize_getNetworkName""];
""5992_oraclize_setNetwork"" [label=""oraclize_setNetwork""];
""5992_ecrecovery"" [label=""ecrecovery""];
""5992_oraclize_setNetworkName"" [label=""oraclize_setNetworkName""];
""5992_indexOf"" [label=""indexOf""];
""5992_oraclize_setProof"" [label=""oraclize_setProof""];
""5992_stra2cbor"" [label=""stra2cbor""];
""5992___callback"" [label=""__callback""];
""5992_oraclize_randomDS_proofVerify__sessionKeyValidity"" [label=""oraclize_randomDS_proofVerify__sessionKeyValidity""];
""5992_oraclize_randomDS_proofVerify__returnCode"" [label=""oraclize_randomDS_proofVerify__returnCode""];
""5992_oraclize_randomDS_proofVerify__main"" [label=""oraclize_randomDS_proofVerify__main""];
""5992_oraclize_query"" [label=""oraclize_query""];
""5992_uint2str"" [label=""uint2str""];
""5992_strCompare"" [label=""strCompare""];
""5992_copyBytes"" [label=""copyBytes""];
""5992_parseInt"" [label=""parseInt""];
""5992_oraclize_cbAddress"" [label=""oraclize_cbAddress""];
""5992_verifySig"" [label=""verifySig""];
""5992_oraclize_randomDS_getSessionPubKeyHash"" [label=""oraclize_randomDS_getSessionPubKeyHash""];
""5992_ba2cbor"" [label=""ba2cbor""];
""5992_getCodeSize"" [label=""getCodeSize""];
""5992_oraclize_getPrice"" [label=""oraclize_getPrice""];
""5992_oraclize_randomDS_proofVerify__returnCode"" -> ""5992_oraclize_randomDS_proofVerify__main"";
""5992_oraclize_query"" -> ""5992_oraclize_query"";
""5992_oraclize_randomDS_proofVerify__main"" -> ""5992_copyBytes"";
""5992_verifySig"" -> ""5992_safer_ecrecover"";
""5992_oraclize_setCustomGasPrice"" -> ""5992_oraclizeAPI"";
""5992_oraclize_randomDS_proofVerify__returnCode"" -> ""5992_oraclize_getNetworkName"";
""5992_oraclize_setProof"" -> ""5992_oraclizeAPI"";
""5992___callback"" -> ""5992___callback"";
""5992_oraclize_setNetwork"" -> ""5992_getCodeSize"";
""5992_oraclize_cbAddress"" -> ""5992_oraclizeAPI"";
""5992_oraclize_query"" -> ""5992_oraclizeAPI"";
""5992_ecrecovery"" -> ""5992_safer_ecrecover"";
""5992_oraclize_randomDS_proofVerify__sessionKeyValidity"" -> ""5992_verifySig"";
""5992_oraclize_getPrice"" -> ""5992_oraclizeAPI"";
""5992_oraclize_setNetwork"" -> ""5992_oraclize_setNetworkName"";
""5992_oraclize_query"" -> ""5992_ba2cbor"";
""5992_oraclize_randomDS_proofVerify__sessionKeyValidity"" -> ""5992_copyBytes"";
""5992_oraclize_newRandomDSQuery"" -> ""5992_copyBytes"";
""5992_verifySig"" -> ""5992_copyBytes"";
""5992_oraclize_randomDS_proofVerify__main"" -> ""5992_verifySig"";
""5992_oraclize_query"" -> ""5992_stra2cbor"";
""5992_oraclize_newRandomDSQuery"" -> ""5992_oraclize_randomDS_setCommitment"";
""5992_oraclize_newRandomDSQuery"" -> ""5992_oraclize_query"";
""5992_oraclize_randomDS_proofVerify__main"" -> ""5992_oraclize_randomDS_proofVerify__sessionKeyValidity"";
""5992_oraclize_randomDS_getSessionPubKeyHash"" -> ""5992_oraclizeAPI"";
""5992_oraclize_randomDS_proofVerify__main"" -> ""5992_matchBytes32Prefix"";
""5992_oraclize_setNetwork"" -> ""5992_oraclize_setNetwork"";
""5992_parseInt"" -> ""5992_parseInt"";
""5992_strConcat"" -> ""5992_strConcat"";
""5992_oraclize_newRandomDSQuery"" -> ""5992_oraclize_randomDS_getSessionPubKeyHash"";
}
"
0x7932f0fd456084c829336452d6001f3c7dbf5639.sol,AirDrop,"contract AirDrop is onlyOwner{ Token token; address _creator = 0x073db5ac9aa943253a513cd692d16160f1c10e74; event TransferredToken(address indexed to, uint256 value); constructor() public{ address _tokenAddr = 0x99092a458b405fb8c06c5a3aa01cffd826019568; token = Token(_tokenAddr); }",0,"subgraph cluster_228_AirDrop {
label=""AirDrop"";
""228_userXRTBalance"" [label=""userXRTBalance""];
""228_sendResidualAmount"" [label=""sendResidualAmount""];
""228_fallback"" [label=""fallback""];
""228_withdraw"" [label=""withdraw""];
""228_sendAmount"" [label=""sendAmount""];
""228_constructor"" [label=""constructor""];
""228_sendInternally"" [label=""sendInternally""];
""228_sendInternally"" -> ""228_userXRTBalance"";
""228_withdraw"" -> ""228_isRunning"";
""228_sendAmount"" -> ""228_isOwner"";
""228_sendResidualAmount"" -> ""228_isOwner"";
""228_withdraw"" -> ""228_sendInternally"";
""228_fallback"" -> ""228_withdraw"";
}
"
0x0000009a317684a5f840484357fa587aca76454c.sol,Claimable,contract Claimable is Ownable { address public pendingOwner; modifier onlyPendingOwner() { require(msg.sender == pendingOwner); _; },0,"subgraph cluster_364_Claimable {
label=""Claimable"";
""364_claimOwnership"" [label=""claimOwnership""];
""364_transferOwnership"" [label=""transferOwnership""];
""364_claimOwnership"" -> ""364_onlyPendingOwner"";
""364_transferOwnership"" -> ""364_onlyOwner"";
}
"
0xda830afa460526071d3d149e898fead664f0a4bb.sol,TokenCampaign,contract TokenCampaign is Controlled { using SafeMath for uint256; eat_token_interface public token; uint8 public constant decimals = 18; uint256 public constant scale = (uint256(10) ** decimals); uint256 public constant hardcap = 100000000 * scale; uint256 public constant PRCT100_D_TEAM = 63; uint256 public constant PRCT100_R_TEAM = 250; uint256 public constant PRCT100_R2 = 150; uint256 public constant FIXEDREWARD_MM = 100000 * scale; uint256 public constant PRCT100_ETH_OP = 4000; uint256 public constant preCrowdMinContribution = (20 ether); uint256 public constant minContribution = (1 ether) / 100; uint256 public constant preCrowd_tokens_scaled = 7142857142857140000000; uint256 public constant stage_1_tokens_scaled = 6250000000000000000000; uint256 public constant stage_2_tokens_scaled = 5555555555555560000000; uint256 public constant stage_3_tokens_scaled = 5000000000000000000000; uint256 public constant PreCrowdAllocation = 20000000 * scale ; uint256 public constant Stage1Allocation = 15000000 * scale ; uint256 public constant Stage2Allocation = 15000000 * scale ; uint256 public constant Stage3Allocation = 20000000 * scale ; uint256 public tokensRemainingPreCrowd = PreCrowdAllocation; uint256 public tokensRemainingStage1 = Stage1Allocation; uint256 public tokensRemainingStage2 = Stage2Allocation; uint256 public tokensRemainingStage3 = Stage3Allocation; uint256 public maxPreCrowdAllocationPerInvestor = 20000000 * scale ; uint256 public maxStage1AllocationPerInvestor = 15000000 * scale ; uint256 public maxStage2AllocationPerInvestor = 15000000 * scale ; uint256 public maxStage3AllocationPerInvestor = 20000000 * scale ; uint256 public tokensGenerated = 0; address[] public joinedCrowdsale; uint256 public amountRaised = 0; uint256 public amountRefunded = 0; address public dteamVaultAddr1; address public dteamVaultAddr2; address public dteamVaultAddr3; address public dteamVaultAddr4; address public rteamVaultAddr; address public r2VaultAddr; address public mmVaultAddr; address public reserveVaultAddr; address public trusteeVaultAddr; address public opVaultAddr; address public tokenAddr; uint8 public campaignState = 3; bool public paused = false; uint256 public tCampaignStart = 64060588800; uint256 public t_1st_StageEnd = 5 * (1 days); uint256 public t_2nd_StageEnd = 2 * (1 days); uint256 public tCampaignEnd = 35 * (1 days); uint256 public tFinalized = 64060588800; struct ParticipantListData { bool participatedFlag; uint256 contributedAmountPreAllocated; uint256 contributedAmountPreCrowd; uint256 contributedAmountStage1; uint256 contributedAmountStage2; uint256 contributedAmountStage3; uint256 preallocatedTokens; uint256 allocatedTokens; uint256 spentAmount; },0,"subgraph cluster_3689_TokenCampaign {
label=""TokenCampaign"";
""3689_setMaxStage1AllocationPerInvestor"" [label=""setMaxStage1AllocationPerInvestor""];
""3689_proxy_contribution"" [label=""proxy_contribution""];
""3689_do_grant_tokens"" [label=""do_grant_tokens""];
""3689_pauseSale"" [label=""pauseSale""];
""3689_resumeSale"" [label=""resumeSale""];
""3689_setopVaultAddr"" [label=""setopVaultAddr""];
""3689_process_contribution"" [label=""process_contribution""];
""3689_refund"" [label=""refund""];
""3689_setMultipleParticipantWhitelist"" [label=""setMultipleParticipantWhitelist""];
""3689_setMaxStage2AllocationPerInvestor"" [label=""setMaxStage2AllocationPerInvestor""];
""3689_toggleWhitelist"" [label=""toggleWhitelist""];
""3689_setrteamVaultAddr"" [label=""setrteamVaultAddr""];
""3689_setmmVaultAddr"" [label=""setmmVaultAddr""];
""3689_setMaxPreCrowdAllocationPerInvestor"" [label=""setMaxPreCrowdAllocationPerInvestor""];
""3689_claimTokens"" [label=""claimTokens""];
""3689_airdrop"" [label=""airdrop""];
""3689_setParticipantWhitelist"" [label=""setParticipantWhitelist""];
""3689_emergencyFinalize"" [label=""emergencyFinalize""];
""3689_setdteamVaultAddr1"" [label=""setdteamVaultAddr1""];
""3689_contractBalance"" [label=""contractBalance""];
""3689_setr2VaultAddr"" [label=""setr2VaultAddr""];
""3689_setInvestorsBatchSize"" [label=""setInvestorsBatchSize""];
""3689_TokenCampaign"" [label=""TokenCampaign""];
""3689_setdteamVaultAddr4"" [label=""setdteamVaultAddr4""];
""3689_preallocate"" [label=""preallocate""];
""3689_settrusteeVaultAddr"" [label=""settrusteeVaultAddr""];
""3689_setMaxStage3AllocationPerInvestor"" [label=""setMaxStage3AllocationPerInvestor""];
""3689_fallback"" [label=""fallback""];
""3689_finalizeCampaign"" [label=""finalizeCampaign""];
""3689_allocateInvestors"" [label=""allocateInvestors""];
""3689_investorCount"" [label=""investorCount""];
""3689_retrieveFunds"" [label=""retrieveFunds""];
""3689_setdteamVaultAddr3"" [label=""setdteamVaultAddr3""];
""3689_multiAirdrop"" [label=""multiAirdrop""];
""3689_startSale"" [label=""startSale""];
""3689_closeSale"" [label=""closeSale""];
""3689_setdteamVaultAddr2"" [label=""setdteamVaultAddr2""];
""3689_setmmVaultAddr"" -> ""3689_onlyController"";
""3689_finalizeCampaign"" -> ""3689_do_grant_tokens"";
""3689_finalizeCampaign"" -> ""3689_onlyController"";
""3689_startSale"" -> ""3689_onlyController"";
""3689_setMaxStage3AllocationPerInvestor"" -> ""3689_onlyController"";
""3689_setrteamVaultAddr"" -> ""3689_onlyController"";
""3689_preallocate"" -> ""3689_onlyController"";
""3689_settrusteeVaultAddr"" -> ""3689_onlyController"";
""3689_toggleWhitelist"" -> ""3689_onlyController"";
""3689_airdrop"" -> ""3689_onlyController"";
""3689_setMaxStage2AllocationPerInvestor"" -> ""3689_onlyController"";
""3689_setMultipleParticipantWhitelist"" -> ""3689_setParticipantWhitelist"";
""3689_pauseSale"" -> ""3689_onlyController"";
""3689_setInvestorsBatchSize"" -> ""3689_onlyController"";
""3689_setdteamVaultAddr2"" -> ""3689_onlyController"";
""3689_closeSale"" -> ""3689_onlyController"";
""3689_setMaxStage1AllocationPerInvestor"" -> ""3689_onlyController"";
""3689_resumeSale"" -> ""3689_onlyController"";
""3689_emergencyFinalize"" -> ""3689_onlyController"";
""3689_setdteamVaultAddr4"" -> ""3689_onlyController"";
""3689_proxy_contribution"" -> ""3689_process_contribution"";
""3689_setopVaultAddr"" -> ""3689_onlyController"";
""3689_multiAirdrop"" -> ""3689_airdrop"";
""3689_setr2VaultAddr"" -> ""3689_onlyController"";
""3689_allocateInvestors"" -> ""3689_do_grant_tokens"";
""3689_setdteamVaultAddr3"" -> ""3689_onlyController"";
""3689_setMultipleParticipantWhitelist"" -> ""3689_onlyController"";
""3689_preallocate"" -> ""3689_do_grant_tokens"";
""3689_fallback"" -> ""3689_process_contribution"";
""3689_airdrop"" -> ""3689_do_grant_tokens"";
""3689_setParticipantWhitelist"" -> ""3689_onlyController"";
""3689_setMaxPreCrowdAllocationPerInvestor"" -> ""3689_onlyController"";
""3689_claimTokens"" -> ""3689_onlyController"";
""3689_setdteamVaultAddr1"" -> ""3689_onlyController"";
""3689_multiAirdrop"" -> ""3689_onlyController"";
""3689_allocateInvestors"" -> ""3689_onlyController"";
""3689_retrieveFunds"" -> ""3689_onlyController"";
}
"
0xf22c54b53c8a4c5e986663de601a2b7702964393.sol,LUCACTTT,"contract LUCACTTT is SafeMath{ string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Freeze(address indexed from, uint256 value); event Unfreeze(address indexed from, uint256 value); constructor(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) public { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; owner = msg.sender; }",0,"subgraph cluster_626_LUCACTTT {
label=""LUCACTTT"";
""626_transferFrom"" [label=""transferFrom""];
""626_freeze"" [label=""freeze""];
""626_constructor"" [label=""constructor""];
""626_withdrawEther"" [label=""withdrawEther""];
""626_unfreeze"" [label=""unfreeze""];
""626_burn"" [label=""burn""];
""626_approve"" [label=""approve""];
""626_fallback"" [label=""fallback""];
""626_transfer"" [label=""transfer""];
""626_transfer"" -> ""626_safeSub"";
""626_transfer"" -> ""626_safeAdd"";
""626_freeze"" -> ""626_safeAdd"";
""626_transferFrom"" -> ""626_safeAdd"";
""626_unfreeze"" -> ""626_safeSub"";
""626_unfreeze"" -> ""626_safeAdd"";
""626_burn"" -> ""626_safeSub"";
""626_transferFrom"" -> ""626_safeSub"";
""626_freeze"" -> ""626_safeSub"";
}
"
0x18cabd1e7db6c52406719cb72859ea2c2eea75d6.sol,GoGuides,"contract GoGuides { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function GoGuides( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_GoGuides {
label=""GoGuides"";
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_GoGuides"" [label=""GoGuides""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_approve"" [label=""approve""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0xecff8fc2a19f83fc855618704f38725756dbcae3.sol,OK3D,"contract OK3D is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x5015A6E288FF4AC0c62bf1DA237c24c3Fb849188); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 private rndGap_ = 2 minutes; uint256 constant private rndInit_ = 12 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 24 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(28,10); fees_[1] = F3Ddatasets.TeamFee(36,10); fees_[2] = F3Ddatasets.TeamFee(51,10); fees_[3] = F3Ddatasets.TeamFee(40,10); potSplit_[0] = F3Ddatasets.PotSplit(25,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(20,20); activated_ = true; rID_ = 1; round_[1].strt = now + rndExtra_ - rndGap_; round_[1].end = now + rndInit_ + rndExtra_; }",0,"subgraph cluster_4376_OK3D {
label=""OK3D"";
""4376_iWantXKeys"" [label=""iWantXKeys""];
""4376_withdrawEarnings"" [label=""withdrawEarnings""];
""4376_updateMasks"" [label=""updateMasks""];
""4376_core"" [label=""core""];
""4376_fallback"" [label=""fallback""];
""4376_potSwap"" [label=""potSwap""];
""4376_endTx"" [label=""endTx""];
""4376_registerNameXname"" [label=""registerNameXname""];
""4376_getTimeLeft"" [label=""getTimeLeft""];
""4376_endRound"" [label=""endRound""];
""4376_buyXname"" [label=""buyXname""];
""4376_registerNameXaddr"" [label=""registerNameXaddr""];
""4376_withdraw"" [label=""withdraw""];
""4376_airdrop"" [label=""airdrop""];
""4376_calcKeysReceived"" [label=""calcKeysReceived""];
""4376_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4376_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4376_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4376_buyXaddr"" [label=""buyXaddr""];
""4376_distributeInvest"" [label=""distributeInvest""];
""4376_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4376_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4376_reLoadXid"" [label=""reLoadXid""];
""4376_getBuyPrice"" [label=""getBuyPrice""];
""4376_determinePID"" [label=""determinePID""];
""4376_verifyTeam"" [label=""verifyTeam""];
""4376_distributeExternal"" [label=""distributeExternal""];
""4376_updateGenVault"" [label=""updateGenVault""];
""4376_reLoadXname"" [label=""reLoadXname""];
""4376_getPlayerVaults"" [label=""getPlayerVaults""];
""4376_reLoadCore"" [label=""reLoadCore""];
""4376_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4376_activate"" [label=""activate""];
""4376_constructor"" [label=""constructor""];
""4376_registerNameXID"" [label=""registerNameXID""];
""4376_reLoadXaddr"" [label=""reLoadXaddr""];
""4376_managePlayer"" [label=""managePlayer""];
""4376_updateTimer"" [label=""updateTimer""];
""4376_buyXid"" [label=""buyXid""];
""4376_distributeInternal"" [label=""distributeInternal""];
""4376_buyCore"" [label=""buyCore""];
""4376_getPlayerInfoByAddress"" -> ""4376_calcUnMaskedEarnings"";
""4376_buyCore"" -> ""4376_endRound"";
""4376_buyXid"" -> ""4376_determinePID"";
""4376_reLoadXaddr"" -> ""4376_reLoadCore"";
""4376_getPlayerVaults"" -> ""4376_calcUnMaskedEarnings"";
""4376_withdraw"" -> ""4376_withdrawEarnings"";
""4376_withdraw"" -> ""4376_isHuman"";
""4376_buyCore"" -> ""4376_core"";
""4376_fallback"" -> ""4376_isActivated"";
""4376_buyXname"" -> ""4376_determinePID"";
""4376_registerNameXID"" -> ""4376_isHuman"";
""4376_registerNameXname"" -> ""4376_isHuman"";
""4376_distributeInternal"" -> ""4376_updateMasks"";
""4376_reLoadXname"" -> ""4376_verifyTeam"";
""4376_fallback"" -> ""4376_isHuman"";
""4376_withdraw"" -> ""4376_isActivated"";
""4376_buyXaddr"" -> ""4376_isActivated"";
""4376_reLoadXname"" -> ""4376_isActivated"";
""4376_buyXid"" -> ""4376_isWithinLimits"";
""4376_buyXid"" -> ""4376_buyCore"";
""4376_buyXaddr"" -> ""4376_buyCore"";
""4376_buyXaddr"" -> ""4376_verifyTeam"";
""4376_fallback"" -> ""4376_isWithinLimits"";
""4376_reLoadXid"" -> ""4376_reLoadCore"";
""4376_reLoadCore"" -> ""4376_endRound"";
""4376_buyXname"" -> ""4376_verifyTeam"";
""4376_buyXname"" -> ""4376_buyCore"";
""4376_registerNameXaddr"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_isWithinLimits"";
""4376_core"" -> ""4376_airdrop"";
""4376_withdrawEarnings"" -> ""4376_updateGenVault"";
""4376_buyXname"" -> ""4376_isActivated"";
""4376_reLoadCore"" -> ""4376_withdrawEarnings"";
""4376_withdraw"" -> ""4376_endRound"";
""4376_reLoadXaddr"" -> ""4376_isActivated"";
""4376_buyXname"" -> ""4376_isHuman"";
""4376_buyXaddr"" -> ""4376_determinePID"";
""4376_buyXaddr"" -> ""4376_isWithinLimits"";
""4376_buyXaddr"" -> ""4376_isHuman"";
""4376_managePlayer"" -> ""4376_updateGenVault"";
""4376_reLoadXname"" -> ""4376_isWithinLimits"";
""4376_reLoadXname"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_isHuman"";
""4376_core"" -> ""4376_distributeInternal"";
""4376_fallback"" -> ""4376_determinePID"";
""4376_updateGenVault"" -> ""4376_calcUnMaskedEarnings"";
""4376_buyXid"" -> ""4376_isHuman"";
""4376_fallback"" -> ""4376_buyCore"";
""4376_reLoadXaddr"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_verifyTeam"";
""4376_buyXid"" -> ""4376_isActivated"";
""4376_reLoadCore"" -> ""4376_core"";
""4376_core"" -> ""4376_managePlayer"";
""4376_reLoadXname"" -> ""4376_reLoadCore"";
""4376_core"" -> ""4376_distributeExternal"";
""4376_reLoadXaddr"" -> ""4376_verifyTeam"";
""4376_reLoadXaddr"" -> ""4376_isWithinLimits"";
""4376_buyXid"" -> ""4376_verifyTeam"";
""4376_core"" -> ""4376_endTx"";
""4376_buyXname"" -> ""4376_isWithinLimits"";
""4376_distributeExternal"" -> ""4376_distributeInvest"";
""4376_getPlayerVaults"" -> ""4376_getPlayerVaultsHelper"";
""4376_reLoadXid"" -> ""4376_isActivated"";
""4376_core"" -> ""4376_updateTimer"";
}
"
0xc01e504a13be6dfaf3c3624cd847895047d087d6.sol,XMB,"contract XMB is ERC20,Ownable{ using SafeMath for uint256; string public constant name=; string public constant symbol=; string public constant version = ; uint256 public constant decimals = 18; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public constant MAX_SUPPLY=1000000000*10**decimals; uint256 public constant INIT_SUPPLY=300000000*10**decimals; uint256 public stepOneRate; uint256 public stepTwoRate; uint256 public stepOneStartTime; uint256 public stepOneEndTime; uint256 public stepTwoStartTime; uint256 public stepTwoEndTime; uint256 public stepOneLockEndTime; uint256 public stepTwoLockEndTime; uint256 public airdropSupply; struct epoch { uint256 endTime; uint256 amount; }",0,"subgraph cluster_948_XMB {
label=""XMB"";
""948_XMB"" [label=""XMB""];
""948_etherProceeds"" [label=""etherProceeds""];
""948_setStepOneTime"" [label=""setStepOneTime""];
""948_transfer"" [label=""transfer""];
""948_allowance"" [label=""allowance""];
""948_balanceOf"" [label=""balanceOf""];
""948_setStepTwoLockEndTime"" [label=""setStepTwoLockEndTime""];
""948_fallback"" [label=""fallback""];
""948_lockBalance"" [label=""lockBalance""];
""948_setStepTwoTime"" [label=""setStepTwoTime""];
""948_setStepOneLockEndTime"" [label=""setStepOneLockEndTime""];
""948_approve"" [label=""approve""];
""948_setStepOneRate"" [label=""setStepOneRate""];
""948_transferFrom"" [label=""transferFrom""];
""948_setStepTwoRate"" [label=""setStepTwoRate""];
""948_processFunding"" [label=""processFunding""];
""948_airdrop"" [label=""airdrop""];
""948_setStepOneTime"" -> ""948_onlyOwner"";
""948_fallback"" -> ""948_processFunding"";
""948_airdrop"" -> ""948_transfer"";
""948_setStepTwoRate"" -> ""948_onlyOwner"";
""948_processFunding"" -> ""948_totalSupplyNotReached"";
""948_setStepTwoTime"" -> ""948_onlyOwner"";
""948_etherProceeds"" -> ""948_onlyOwner"";
""948_setStepOneLockEndTime"" -> ""948_onlyOwner"";
""948_fallback"" -> ""948_lockBalance"";
""948_airdrop"" -> ""948_balanceOf"";
""948_setStepOneRate"" -> ""948_onlyOwner"";
""948_setStepTwoLockEndTime"" -> ""948_onlyOwner"";
""948_airdrop"" -> ""948_onlyOwner"";
}
"
0x70491ade38d2cd8a869b19343dd5a06133c2a201.sol,GoatClash,contract GoatClash { ERC20 private _token; function token() public view returns(ERC20) { return _token; },0,"subgraph cluster_2200_GoatClash {
label=""GoatClash"";
""2200_setMaxProfit"" [label=""setMaxProfit""];
""2200_placeBet"" [label=""placeBet""];
""2200_settleBet"" [label=""settleBet""];
""2200_setToken"" [label=""setToken""];
""2200_settleBetUncleMerkleProof"" [label=""settleBetUncleMerkleProof""];
""2200_constructor"" [label=""constructor""];
""2200_acceptNextOwner"" [label=""acceptNextOwner""];
""2200_increaseJackpot"" [label=""increaseJackpot""];
""2200_verifyMerkleProof"" [label=""verifyMerkleProof""];
""2200_withdrawFunds"" [label=""withdrawFunds""];
""2200_setCroupier"" [label=""setCroupier""];
""2200_memcpy"" [label=""memcpy""];
""2200_approveNextOwner"" [label=""approveNextOwner""];
""2200_getDiceWinAmount"" [label=""getDiceWinAmount""];
""2200_requireCorrectReceipt"" [label=""requireCorrectReceipt""];
""2200_cancelBet"" [label=""cancelBet""];
""2200_deductFunds"" [label=""deductFunds""];
""2200_settleBetCommon"" [label=""settleBetCommon""];
""2200_token"" [label=""token""];
""2200_kill"" [label=""kill""];
""2200_sendFunds"" [label=""sendFunds""];
""2200_setSecretSigner"" [label=""setSecretSigner""];
""2200_fallback"" [label=""fallback""];
""2200_settleBet"" -> ""2200_onlyCroupier"";
""2200_settleBetCommon"" -> ""2200_deductFunds"";
""2200_approveNextOwner"" -> ""2200_onlyOwner"";
""2200_setSecretSigner"" -> ""2200_onlyOwner"";
""2200_verifyMerkleProof"" -> ""2200_memcpy"";
""2200_settleBetUncleMerkleProof"" -> ""2200_settleBetCommon"";
""2200_increaseJackpot"" -> ""2200_onlyOwner"";
""2200_setCroupier"" -> ""2200_onlyOwner"";
""2200_withdrawFunds"" -> ""2200_sendFunds"";
""2200_placeBet"" -> ""2200_getDiceWinAmount"";
""2200_settleBetUncleMerkleProof"" -> ""2200_requireCorrectReceipt"";
""2200_settleBetCommon"" -> ""2200_getDiceWinAmount"";
""2200_kill"" -> ""2200_sendFunds"";
""2200_withdrawFunds"" -> ""2200_onlyOwner"";
""2200_settleBet"" -> ""2200_settleBetCommon"";
""2200_settleBetCommon"" -> ""2200_sendFunds"";
""2200_cancelBet"" -> ""2200_onlyCroupier"";
""2200_setToken"" -> ""2200_onlyOwner"";
""2200_settleBetUncleMerkleProof"" -> ""2200_verifyMerkleProof"";
""2200_kill"" -> ""2200_onlyOwner"";
""2200_cancelBet"" -> ""2200_getDiceWinAmount"";
""2200_setMaxProfit"" -> ""2200_onlyOwner"";
""2200_settleBetUncleMerkleProof"" -> ""2200_onlyCroupier"";
}
"
0x36e666eaac18ed22b8e370547c75e6782b63d5da.sol,Token,"contract Token { using SafeMath for uint256; address public owner; string public name = ; string public symbol = ; uint256 public decimals = 18; uint256 totalSupply_ = 20e8 * (10**18); bool public paused = false; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) internal allowed; mapping(address => uint256) internal locked; event Burn(address indexed burner, uint256 value); event Approval(address indexed owner, address indexed spender,uint256 value); event Transfer(address indexed from, address indexed to, uint256 value); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); event Pause(); event Unpause(); event Lock(address indexed LockedAddress, uint256 LockAmount); event Unlock(address indexed LockedAddress); constructor() public { owner = msg.sender; balances[owner] = totalSupply_ ; }",0,"subgraph cluster_1059_Token {
label=""Token"";
""1059_transferOwnership"" [label=""transferOwnership""];
""1059_allowance"" [label=""allowance""];
""1059_balanceOf"" [label=""balanceOf""];
""1059_transferFrom"" [label=""transferFrom""];
""1059_totalSupply"" [label=""totalSupply""];
""1059_approve"" [label=""approve""];
""1059_unlock"" [label=""unlock""];
""1059_increaseApproval"" [label=""increaseApproval""];
""1059_checkLock"" [label=""checkLock""];
""1059_burn"" [label=""burn""];
""1059_burnFrom"" [label=""burnFrom""];
""1059_pause"" [label=""pause""];
""1059_lock"" [label=""lock""];
""1059__transferOwnership"" [label=""_transferOwnership""];
""1059_constructor"" [label=""constructor""];
""1059_multiLock"" [label=""multiLock""];
""1059_burnOf"" [label=""burnOf""];
""1059_multiTransfer"" [label=""multiTransfer""];
""1059_destroyAndSend"" [label=""destroyAndSend""];
""1059_transfer"" [label=""transfer""];
""1059_unpause"" [label=""unpause""];
""1059_multiUnlock"" [label=""multiUnlock""];
""1059_decreaseApproval"" [label=""decreaseApproval""];
""1059__burn"" [label=""_burn""];
""1059_approve"" -> ""1059_whenNotPaused"";
""1059_unpause"" -> ""1059_onlyOwner"";
""1059_multiUnlock"" -> ""1059_onlyOwner"";
""1059_multiLock"" -> ""1059_lock"";
""1059_multiLock"" -> ""1059_onlyOwner"";
""1059_transferFrom"" -> ""1059_whenNotPaused"";
""1059_burnOf"" -> ""1059__burn"";
""1059_pause"" -> ""1059_onlyOwner"";
""1059_pause"" -> ""1059_whenNotPaused"";
""1059_lock"" -> ""1059_onlyOwner"";
""1059_transferOwnership"" -> ""1059__transferOwnership"";
""1059_burn"" -> ""1059__burn"";
""1059_unpause"" -> ""1059_whenPaused"";
""1059_multiTransfer"" -> ""1059_whenNotPaused"";
""1059_transferOwnership"" -> ""1059_onlyOwner"";
""1059_increaseApproval"" -> ""1059_whenNotPaused"";
""1059_burnFrom"" -> ""1059__burn"";
""1059_burnOf"" -> ""1059_onlyOwner"";
""1059_destroyAndSend"" -> ""1059_onlyOwner"";
""1059_multiUnlock"" -> ""1059_unlock"";
""1059_decreaseApproval"" -> ""1059_whenNotPaused"";
""1059_transfer"" -> ""1059_whenNotPaused"";
""1059_unlock"" -> ""1059_onlyOwner"";
""1059_checkLock"" -> ""1059_onlyOwner"";
}
"
0x01c627181089b6e10ee8316ec08516b3df7c4845.sol,BrickCrowdsale,contract BrickCrowdsale is Ownable { using SafeMath for uint256; uint256 public startTime; uint256 public endTime; uint256 public weiRaised; uint256 public limitDateSale; bool public isSoftCapHit = false; bool public isStarted = false; bool public isFinalized = false; uint256 icoPvtRate = 40; uint256 icoPreRate = 50; uint256 ico1Rate = 65; uint256 ico2Rate = 75; uint256 ico3Rate = 90; uint256 public pvtTokens = (40000) * (10**18); uint256 public preSaleTokens = (6000000) * (10**18); uint256 public ico1Tokens = (8000000) * (10**18); uint256 public ico2Tokens = (8000000) * (10**18); uint256 public ico3Tokens = (8000000) * (10**18); uint256 public totalTokens = (40000000)* (10**18); address public advisoryEthWallet = 0x0D7629d32546CD493bc33ADEF115D4489f5599Be; address public infraEthWallet = 0x536D36a05F6592aa29BB0beE30cda706B1272521; address public techDevelopmentEthWallet = 0x4d0B70d8E612b5dca3597C64643a8d1efd5965e1; address public operationsEthWallet = 0xbc67B82924eEc8643A4f2ceDa59B5acfd888A967; address public wallet = 0x44d44CA0f75bdd3AE8806D02515E8268459c554A; struct ContributorData { uint256 contributionAmountViewOnly; uint256 tokensIssuedViewOnly; uint256 contributionAmount; uint256 tokensIssued; },0,"subgraph cluster_2591_BrickCrowdsale {
label=""BrickCrowdsale"";
""2591_hasEnded"" [label=""hasEnded""];
""2591_starting"" [label=""starting""];
""2591_releaseAllTokens"" [label=""releaseAllTokens""];
""2591_isWithinSaleTimeLimit"" [label=""isWithinSaleTimeLimit""];
""2591_setRate"" [label=""setRate""];
""2591_setHardCap"" [label=""setHardCap""];
""2591_setPvtTokens"" [label=""setPvtTokens""];
""2591_isWithinTokenAllocLimit"" [label=""isWithinTokenAllocLimit""];
""2591_constructor"" [label=""constructor""];
""2591_currentTokenSupply"" [label=""currentTokenSupply""];
""2591_release"" [label=""release""];
""2591_endIcoSaleRound3"" [label=""endIcoSaleRound3""];
""2591_endIcoSaleRound2"" [label=""endIcoSaleRound2""];
""2591_getCurrentRateInCents"" [label=""getCurrentRateInCents""];
""2591_releaseTokens"" [label=""releaseTokens""];
""2591_setKycAddress"" [label=""setKycAddress""];
""2591_finalize"" [label=""finalize""];
""2591_endIcoSaleRound1"" [label=""endIcoSaleRound1""];
""2591_setSaleDuration"" [label=""setSaleDuration""];
""2591_investorCount"" [label=""investorCount""];
""2591_refundMoney"" [label=""refundMoney""];
""2591_setKYCRequiredToSendTokens"" [label=""setKYCRequiredToSendTokens""];
""2591_forwardAllRaisedFunds"" [label=""forwardAllRaisedFunds""];
""2591_tokenSendFailuresCount"" [label=""tokenSendFailuresCount""];
""2591_setSaleBonus"" [label=""setSaleBonus""];
""2591_updateRateInWei"" [label=""updateRateInWei""];
""2591_setIco2Tokens"" [label=""setIco2Tokens""];
""2591_transferTokenOwnership"" [label=""transferTokenOwnership""];
""2591_hasStarted"" [label=""hasStarted""];
""2591_setSoftCap"" [label=""setSoftCap""];
""2591_refundAllMoney"" [label=""refundAllMoney""];
""2591_setIco1Tokens"" [label=""setIco1Tokens""];
""2591_buyTokens"" [label=""buyTokens""];
""2591_endPvtSale"" [label=""endPvtSale""];
""2591_didSoftCapReached"" [label=""didSoftCapReached""];
""2591_setPreSaleTokens"" [label=""setPreSaleTokens""];
""2591_transferKycOwnerShip"" [label=""transferKycOwnerShip""];
""2591_finalization"" [label=""finalization""];
""2591_start"" [label=""start""];
""2591_endPreSale"" [label=""endPreSale""];
""2591_setKYCRequiredToReceiveFunds"" [label=""setKYCRequiredToReceiveFunds""];
""2591_setIco3Tokens"" [label=""setIco3Tokens""];
""2591_buyPhaseTokens"" [label=""buyPhaseTokens""];
""2591_validPurchase"" [label=""validPurchase""];
""2591_isWithinSaleLimit"" [label=""isWithinSaleLimit""];
""2591_setTokenAddress"" [label=""setTokenAddress""];
""2591_setTokensForCrowdSale"" [label=""setTokensForCrowdSale""];
""2591_computeTokens"" [label=""computeTokens""];
""2591_splitTokens"" [label=""splitTokens""];
""2591_fallback"" [label=""fallback""];
""2591_init"" [label=""init""];
""2591_init"" -> ""2591_setRate"";
""2591_finalization"" -> ""2591_splitTokens"";
""2591_setHardCap"" -> ""2591_onlyOwner"";
""2591_setIco3Tokens"" -> ""2591_onlyOwner"";
""2591_refundAllMoney"" -> ""2591_refundMoney"";
""2591_setPvtTokens"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_releaseTokens"";
""2591_releaseTokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleDuration"" -> ""2591_onlyOwner"";
""2591_setTokensForCrowdSale"" -> ""2591_onlyOwner"";
""2591_finalization"" -> ""2591_forwardAllRaisedFunds"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleTimeLimit"";
""2591_setSoftCap"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_buyTokens"";
""2591_transferKycOwnerShip"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToReceiveFunds"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSoftCap"";
""2591_start"" -> ""2591_hasStarted"";
""2591_setPreSaleTokens"" -> ""2591_onlyOwner"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleLimit"";
""2591_endIcoSaleRound1"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound1"" -> ""2591_updateRateInWei"";
""2591_validPurchase"" -> ""2591_isWithinSaleTimeLimit"";
""2591_start"" -> ""2591_starting"";
""2591_init"" -> ""2591_setSaleDuration"";
""2591_endPreSale"" -> ""2591_onlyOwner"";
""2591_finalize"" -> ""2591_onlyOwner"";
""2591_refundMoney"" -> ""2591_onlyOwner"";
""2591_fallback"" -> ""2591_buyPhaseTokens"";
""2591_setIco1Tokens"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound3"" -> ""2591_updateRateInWei"";
""2591_setKycAddress"" -> ""2591_onlyOwner"";
""2591_transferTokenOwnership"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToSendTokens"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSaleBonus"";
""2591_endIcoSaleRound2"" -> ""2591_onlyOwner"";
""2591_setIco2Tokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokenAddress"";
""2591_refundAllMoney"" -> ""2591_onlyOwner"";
""2591_setTokenAddress"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_validPurchase"";
""2591_init"" -> ""2591_setHardCap"";
""2591_finalize"" -> ""2591_finalization"";
""2591_releaseTokens"" -> ""2591_release"";
""2591_init"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_isWithinTokenAllocLimit"";
""2591_buyPhaseTokens"" -> ""2591_computeTokens"";
""2591_updateRateInWei"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleBonus"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokensForCrowdSale"";
""2591_init"" -> ""2591_setKycAddress"";
""2591_endIcoSaleRound2"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_onlyOwner"";
""2591_start"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_start"";
""2591_endIcoSaleRound3"" -> ""2591_onlyOwner"";
""2591_endPreSale"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_updateRateInWei"";
}
"
0xd13a124b14f7e451cc546cace61d569c8f66a90f.sol,SPCtoken,"contract SPCtoken { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 0; event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens); event Transfer(address indexed from, address indexed to, uint256 tokens); mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; uint256 totalSupply_; using SafeMath for uint256; constructor(uint256 total) public { totalSupply_ = total; balances[msg.sender] = totalSupply_; }",0,"subgraph cluster_253_SPCtoken {
label=""SPCtoken"";
""253_balanceOf"" [label=""balanceOf""];
""253_allowance"" [label=""allowance""];
""253_transferFrom"" [label=""transferFrom""];
""253_constructor"" [label=""constructor""];
""253_approve"" [label=""approve""];
""253_transfer"" [label=""transfer""];
""253_totalSupply"" [label=""totalSupply""];
}
"
0x24a7de87b3bd7298bbf8966fdf170c558d69ecc4.sol,METADOLLAR,"contract METADOLLAR is ERC20Interface, Owned, SafeMath { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public _totalSupply = 1000000000000000000000000000000; uint256 public icoMin = 1000000000000000; uint256 public icoLimit = 1000000000000000000000000000000; uint256 public countHolders = 0; uint256 public amountOfInvestments = 0; uint256 public icoPrice; uint256 public dolRate = 1000; uint256 public ethRate = 1; uint256 public sellRate = 900; uint256 public commissionRate = 1000; uint256 public sellPrice; uint256 public currentTokenPrice; uint256 public commission; bool public icoIsRunning; bool public minimalGoalReached; bool public icoIsClosed; mapping (address => uint256) public tokenBalanceOf; mapping(address => mapping (address => uint256)) allowed; mapping(address => bool) frozenAccount; event FrozenFunds(address initiator, address account, string status); event BonusChanged(uint8 bonusOld, uint8 bonusNew); event minGoalReached(uint256 minIcoAmount, string notice); event preIcoEnded(uint256 preIcoAmount, string notice); event priceUpdated(uint256 oldPrice, uint256 newPrice, string notice); event withdrawed(address _to, uint256 summe, string notice); event deposited(address _from, uint256 summe, string notice); event orderToTransfer(address initiator, address _from, address _to, uint256 summe, string notice); event tokenCreated(address _creator, uint256 summe, string notice); event tokenDestroyed(address _destroyer, uint256 summe, string notice); event icoStatusUpdated(address _initiator, string status); function STARTMETADOLLAR() { icoIsRunning = true; minimalGoalReached = false; icoIsClosed = false; tokenBalanceOf[this] += _totalSupply; allowed[this][owner] = _totalSupply; allowed[this][supervisor] = _totalSupply; currentTokenPrice = 1 * 1; icoPrice = ethRate * dolRate; sellPrice = sellRate * ethRate; updatePrices(); }",0,"subgraph cluster_1740_METADOLLAR {
label=""METADOLLAR"";
""1740_fallback"" [label=""fallback""];
""1740_transfer"" [label=""transfer""];
""1740_approve"" [label=""approve""];
""1740_buyToken"" [label=""buyToken""];
""1740_balanceOf"" [label=""balanceOf""];
""1740__transfer"" [label=""_transfer""];
""1740_withdraw"" [label=""withdraw""];
""1740_setSellRate"" [label=""setSellRate""];
""1740_collect"" [label=""collect""];
""1740_checkFrozenAccounts"" [label=""checkFrozenAccounts""];
""1740_STARTMETADOLLAR"" [label=""STARTMETADOLLAR""];
""1740_checkIcoStatus"" [label=""checkIcoStatus""];
""1740_totalSupply"" [label=""totalSupply""];
""1740_sell"" [label=""sell""];
""1740_transferOwnership"" [label=""transferOwnership""];
""1740_mintToken"" [label=""mintToken""];
""1740_setEthRate"" [label=""setEthRate""];
""1740_setDolRate"" [label=""setDolRate""];
""1740_allowance"" [label=""allowance""];
""1740_deposit"" [label=""deposit""];
""1740_transferFrom"" [label=""transferFrom""];
""1740_destroyToken"" [label=""destroyToken""];
""1740_setCommissionRate"" [label=""setCommissionRate""];
""1740_sell2"" [label=""sell2""];
""1740_updatePrices"" [label=""updatePrices""];
""1740_checkMinimalGoal"" [label=""checkMinimalGoal""];
""1740_buy"" [label=""buy""];
""1740_freezeAccount"" [label=""freezeAccount""];
""1740_calculateTheEndPrice"" [label=""calculateTheEndPrice""];
""1740_stopThisIco"" [label=""stopThisIco""];
""1740_setICOPrice"" [label=""setICOPrice""];
""1740_buy"" -> ""1740_buyToken"";
""1740_setDolRate"" -> ""1740_isOwner"";
""1740_fallback"" -> ""1740_buyToken"";
""1740_buyToken"" -> ""1740_updatePrices"";
""1740_collect"" -> ""1740_withdraw"";
""1740_STARTMETADOLLAR"" -> ""1740_updatePrices"";
""1740_sell"" -> ""1740__transfer"";
""1740_transferOwnership"" -> ""1740_isOwner"";
""1740_transfer"" -> ""1740__transfer"";
""1740_setEthRate"" -> ""1740_isOwner"";
""1740_mintToken"" -> ""1740_isOwner"";
""1740_deposit"" -> ""1740_isOwner"";
""1740_setICOPrice"" -> ""1740_isOwner"";
""1740_buyToken"" -> ""1740__transfer"";
""1740_stopThisIco"" -> ""1740_isOwner"";
""1740_freezeAccount"" -> ""1740_isOwner"";
""1740_withdraw"" -> ""1740_isOwner"";
""1740_setCommissionRate"" -> ""1740_isOwner"";
""1740_collect"" -> ""1740_isOwner"";
""1740_transferFrom"" -> ""1740__transfer"";
""1740_setICOPrice"" -> ""1740_updatePrices"";
""1740_setSellRate"" -> ""1740_isOwner"";
""1740_updatePrices"" -> ""1740_checkIcoStatus"";
""1740_destroyToken"" -> ""1740_isOwner"";
}
"
0x30ed9d2a07f4a79557c8e75ad4d95071a18af0bc.sol,CryptoSagaHero,"contract CryptoSagaHero is ERC721Token, Claimable, Pausable, AccessMint, AccessDeploy, AccessDeposit { string public constant name = ; string public constant symbol = ; struct HeroClass { string className; uint8 classRank; uint8 classRace; uint32 classAge; uint8 classType; uint32 maxLevel; uint8 aura; uint32[5] baseStats; uint32[5] minIVForStats; uint32[5] maxIVForStats; uint32 currentNumberOfInstancedHeroes; }",0,"subgraph cluster_2787_CryptoSagaHero {
label=""CryptoSagaHero"";
""2787_mint"" [label=""mint""];
""2787_getHeroClassId"" [label=""getHeroClassId""];
""2787_setRequiredExpIncreaseFactor"" [label=""setRequiredExpIncreaseFactor""];
""2787_setGoldContract"" [label=""setGoldContract""];
""2787_defineType"" [label=""defineType""];
""2787_levelUp"" [label=""levelUp""];
""2787_getGoldDepositOfAddress"" [label=""getGoldDepositOfAddress""];
""2787_CryptoSagaHero"" [label=""CryptoSagaHero""];
""2787_getTokenIdOfAddressAndIndex"" [label=""getTokenIdOfAddressAndIndex""];
""2787_transferDeposit"" [label=""transferDeposit""];
""2787_deploy"" [label=""deploy""];
""2787_getHeroAvailableAt"" [label=""getHeroAvailableAt""];
""2787_random"" [label=""random""];
""2787_getHeroRequiredGoldForLevelUp"" [label=""getHeroRequiredGoldForLevelUp""];
""2787_setHeroName"" [label=""setHeroName""];
""2787_withdrawDeposit"" [label=""withdrawDeposit""];
""2787_getHeroLocation"" [label=""getHeroLocation""];
""2787_getClassName"" [label=""getClassName""];
""2787_getClassMintCount"" [label=""getClassMintCount""];
""2787_getHeroBP"" [label=""getHeroBP""];
""2787_getTotalBPOfAddress"" [label=""getTotalBPOfAddress""];
""2787_numberOfHeroClasses"" [label=""numberOfHeroClasses""];
""2787_getClassRank"" [label=""getClassRank""];
""2787_getHeroName"" [label=""getHeroName""];
""2787_addExp"" [label=""addExp""];
""2787_getHeroInfo"" [label=""getHeroInfo""];
""2787_getHeroLevel"" [label=""getHeroLevel""];
""2787_addDeposit"" [label=""addDeposit""];
""2787_getClassInfo"" [label=""getClassInfo""];
""2787_setRequiredGoldIncreaseFactor"" [label=""setRequiredGoldIncreaseFactor""];
""2787_getHeroRequiredExpForLevelUp"" [label=""getHeroRequiredExpForLevelUp""];
""2787_CryptoSagaHero"" -> ""2787_defineType"";
""2787_addExp"" -> ""2787_ownerOf"";
""2787_setGoldContract"" -> ""2787_onlyOwner"";
""2787_addDeposit"" -> ""2787_onlyAccessDeposit"";
""2787_mint"" -> ""2787__mint"";
""2787_levelUp"" -> ""2787_whenNotPaused"";
""2787_getTotalBPOfAddress"" -> ""2787_getHeroBP"";
""2787_mint"" -> ""2787_onlyAccessMint"";
""2787_deploy"" -> ""2787_onlyAccessDeploy"";
""2787_levelUp"" -> ""2787_ownerOf"";
""2787_defineType"" -> ""2787_onlyOwner"";
""2787_deploy"" -> ""2787_ownerOf"";
""2787_setRequiredGoldIncreaseFactor"" -> ""2787_onlyOwner"";
""2787_levelUp"" -> ""2787_getHeroRequiredExpForLevelUp"";
""2787_mint"" -> ""2787_random"";
""2787_getTokenIdOfAddressAndIndex"" -> ""2787_tokensOf"";
""2787_transferDeposit"" -> ""2787_whenNotPaused"";
""2787_getTotalBPOfAddress"" -> ""2787_tokensOf"";
""2787_setHeroName"" -> ""2787_onlyOwnerOf"";
""2787_levelUp"" -> ""2787_getHeroRequiredGoldForLevelUp"";
""2787_setRequiredExpIncreaseFactor"" -> ""2787_onlyOwner"";
""2787_levelUp"" -> ""2787_onlyOwnerOf"";
""2787_CryptoSagaHero"" -> ""2787_setGoldContract"";
""2787_addExp"" -> ""2787_onlyAccessDeploy"";
}
"
0xc541e02e7d66cb5cbd7d33d1874dcc3f028ad75c.sol,Hourglass,contract Hourglass { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1329_Hourglass {
label=""Hourglass"";
""1329_myTokens"" [label=""myTokens""];
""1329_dividendsOf"" [label=""dividendsOf""];
""1329_setSymbol"" [label=""setSymbol""];
""1329_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1329_withdraw"" [label=""withdraw""];
""1329_setAdministrator"" [label=""setAdministrator""];
""1329_sell"" [label=""sell""];
""1329_disableInitialStage"" [label=""disableInitialStage""];
""1329_reinvest"" [label=""reinvest""];
""1329_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1329_purchaseTokens"" [label=""purchaseTokens""];
""1329_buy"" [label=""buy""];
""1329_Hourglass"" [label=""Hourglass""];
""1329_myDividends"" [label=""myDividends""];
""1329_totalSupply"" [label=""totalSupply""];
""1329_setName"" [label=""setName""];
""1329_setStakingRequirement"" [label=""setStakingRequirement""];
""1329_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1329_sqrt"" [label=""sqrt""];
""1329_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1329_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1329_buyPrice"" [label=""buyPrice""];
""1329_transfer"" [label=""transfer""];
""1329_balanceOf"" [label=""balanceOf""];
""1329_exit"" [label=""exit""];
""1329_fallback"" [label=""fallback""];
""1329_sellPrice"" [label=""sellPrice""];
""1329_transfer"" -> ""1329_tokensToEthereum_"";
""1329_purchaseTokens"" -> ""1329_antiEarlyWhale"";
""1329_sell"" -> ""1329_onlyBagholders"";
""1329_transfer"" -> ""1329_onlyBagholders"";
""1329_calculateEthereumReceived"" -> ""1329_tokensToEthereum_"";
""1329_myTokens"" -> ""1329_balanceOf"";
""1329_setName"" -> ""1329_onlyAdministrator"";
""1329_withdraw"" -> ""1329_onlyStronghands"";
""1329_setSymbol"" -> ""1329_onlyAdministrator"";
""1329_calculateTokensReceived"" -> ""1329_ethereumToTokens_"";
""1329_buy"" -> ""1329_purchaseTokens"";
""1329_withdraw"" -> ""1329_myDividends"";
""1329_reinvest"" -> ""1329_myDividends"";
""1329_fallback"" -> ""1329_purchaseTokens"";
""1329_sell"" -> ""1329_tokensToEthereum_"";
""1329_sellPrice"" -> ""1329_tokensToEthereum_"";
""1329_transfer"" -> ""1329_myDividends"";
""1329_purchaseTokens"" -> ""1329_ethereumToTokens_"";
""1329_exit"" -> ""1329_withdraw"";
""1329_reinvest"" -> ""1329_onlyStronghands"";
""1329_setStakingRequirement"" -> ""1329_onlyAdministrator"";
""1329_ethereumToTokens_"" -> ""1329_sqrt"";
""1329_myDividends"" -> ""1329_dividendsOf"";
""1329_reinvest"" -> ""1329_purchaseTokens"";
""1329_exit"" -> ""1329_sell"";
""1329_buyPrice"" -> ""1329_tokensToEthereum_"";
""1329_setAdministrator"" -> ""1329_onlyAdministrator"";
""1329_transfer"" -> ""1329_withdraw"";
""1329_disableInitialStage"" -> ""1329_onlyAdministrator"";
}
"
0xd48c70991441d66a86c26580cd6b629f63f58516.sol,SVGCrowdsale,"contract SVGCrowdsale { using SafeMath for uint256; ERC20 public token; address public wallet; uint256 public weiRaised; uint256 public currentRound; uint startTime = now; uint256 public completedAt; event TokenPurchase( address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount ); event LogFundingSuccessful( uint _totalRaised ); constructor(address _wallet, ERC20 _token) public { require(_wallet != address(0)); require(_token != address(0)); wallet = _wallet; token = _token; }",0,"subgraph cluster_657_SVGCrowdsale {
label=""SVGCrowdsale"";
""657_fallback"" [label=""fallback""];
""657_forwardFunds"" [label=""forwardFunds""];
""657_updatePurchasingState"" [label=""updatePurchasingState""];
""657_checkIfFundingCompleteOrExpired"" [label=""checkIfFundingCompleteOrExpired""];
""657_buyTokens"" [label=""buyTokens""];
""657__preValidatePurchase"" [label=""_preValidatePurchase""];
""657_processPurchase"" [label=""processPurchase""];
""657_getTokenAmount"" [label=""getTokenAmount""];
""657__deliverTokens"" [label=""_deliverTokens""];
""657_constructor"" [label=""constructor""];
""657_postValidatePurchase"" [label=""postValidatePurchase""];
""657_buyTokens"" -> ""657_checkIfFundingCompleteOrExpired"";
""657_processPurchase"" -> ""657__deliverTokens"";
""657_buyTokens"" -> ""657_processPurchase"";
""657_buyTokens"" -> ""657_updatePurchasingState"";
""657_buyTokens"" -> ""657__preValidatePurchase"";
""657_buyTokens"" -> ""657_postValidatePurchase"";
""657_buyTokens"" -> ""657_getTokenAmount"";
""657_fallback"" -> ""657_buyTokens"";
""657_buyTokens"" -> ""657_forwardFunds"";
}
"
0x383bf1fd04d0901bbd674a580e0a621fcbb4799b.sol,CryptoDoggies,"contract CryptoDoggies is AccessControl, DetailedERC721 { using SafeMath for uint256; event TokenCreated(uint256 tokenId, string name, bytes5 dna, uint256 price, address owner); event TokenSold( uint256 indexed tokenId, string name, bytes5 dna, uint256 sellingPrice, uint256 newPrice, address indexed oldOwner, address indexed newOwner ); mapping (uint256 => address) private tokenIdToOwner; mapping (uint256 => uint256) private tokenIdToPrice; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) private tokenIdToApproved; struct Doggy { string name; bytes5 dna; }",0,"subgraph cluster_1255_CryptoDoggies {
label=""CryptoDoggies"";
""1255_tokensOf"" [label=""tokensOf""];
""1255_symbol"" [label=""symbol""];
""1255_createToken"" [label=""createToken""];
""1255_implementsERC721"" [label=""implementsERC721""];
""1255__owns"" [label=""_owns""];
""1255_purchase"" [label=""purchase""];
""1255_priceOf"" [label=""priceOf""];
""1255_takeOwnership"" [label=""takeOwnership""];
""1255_enableERC721"" [label=""enableERC721""];
""1255__generateRandomDna"" [label=""_generateRandomDna""];
""1255_getToken"" [label=""getToken""];
""1255__createToken"" [label=""_createToken""];
""1255_balanceOf"" [label=""balanceOf""];
""1255_ownerOf"" [label=""ownerOf""];
""1255__isContract"" [label=""_isContract""];
""1255__approved"" [label=""_approved""];
""1255__transfer"" [label=""_transfer""];
""1255_approve"" [label=""approve""];
""1255_nextPriceOf"" [label=""nextPriceOf""];
""1255_totalSupply"" [label=""totalSupply""];
""1255_transferFrom"" [label=""transferFrom""];
""1255_name"" [label=""name""];
""1255_withdrawBalance"" [label=""withdrawBalance""];
""1255_transfer"" [label=""transfer""];
""1255_getAllTokens"" [label=""getAllTokens""];
""1255_getToken"" -> ""1255_nextPriceOf"";
""1255_approve"" -> ""1255__owns"";
""1255__createToken"" -> ""1255__transfer"";
""1255_purchase"" -> ""1255__transfer"";
""1255_transfer"" -> ""1255__owns"";
""1255_takeOwnership"" -> ""1255_whenNotPaused"";
""1255_getAllTokens"" -> ""1255_nextPriceOf"";
""1255_takeOwnership"" -> ""1255_onlyERC721"";
""1255_getAllTokens"" -> ""1255_totalSupply"";
""1255_approve"" -> ""1255_whenNotPaused"";
""1255_approve"" -> ""1255_onlyERC721"";
""1255_takeOwnership"" -> ""1255__approved"";
""1255_purchase"" -> ""1255_whenNotPaused"";
""1255_enableERC721"" -> ""1255_onlyCEO"";
""1255_transferFrom"" -> ""1255_whenNotPaused"";
""1255_purchase"" -> ""1255_ownerOf"";
""1255_withdrawBalance"" -> ""1255_onlyCEO"";
""1255_purchase"" -> ""1255_nextPriceOf"";
""1255_transferFrom"" -> ""1255__transfer"";
""1255_createToken"" -> ""1255_onlyCLevel"";
""1255_implementsERC721"" -> ""1255_whenNotPaused"";
""1255_tokensOf"" -> ""1255_balanceOf"";
""1255_transferFrom"" -> ""1255_onlyERC721"";
""1255_transfer"" -> ""1255_whenNotPaused"";
""1255_transfer"" -> ""1255__transfer"";
""1255_tokensOf"" -> ""1255_totalSupply"";
""1255_purchase"" -> ""1255_priceOf"";
""1255_transferFrom"" -> ""1255__approved"";
""1255_transfer"" -> ""1255_onlyERC721"";
""1255_purchase"" -> ""1255__isContract"";
""1255_createToken"" -> ""1255__generateRandomDna"";
""1255_transferFrom"" -> ""1255__owns"";
""1255_takeOwnership"" -> ""1255__transfer"";
""1255_createToken"" -> ""1255__createToken"";
""1255_nextPriceOf"" -> ""1255_priceOf"";
}
"
0x4902c062f1384654bd075b719c6a26a83ef7aaf0.sol,TokenERC20,contract TokenERC20 { address public owner; uint256 public feesA = 1; uint256 public feesB = 1; uint256 public feesC = 1; uint256 public feesD = 1; address public addressA = 0xC61994B01607Ed7351e1D4FEE93fb0e661ceE39c; address public addressB = 0x821D44F1d04936e8b95D2FFAE91DFDD6E6EA39F9; address public addressC = 0xf193c2EC62466fd338710afab04574E7Eeb6C0e2; address public addressD = 0x3105889390F894F8ee1d3f8f75E2c4dde57735bA; function founder() private { owner = msg.sender; },0,"subgraph cluster_716_TokenERC20 {
label=""TokenERC20"";
""716_burn"" [label=""burn""];
""716_setaddress"" [label=""setaddress""];
""716_transfer"" [label=""transfer""];
""716_TokenERC20"" [label=""TokenERC20""];
""716_setfees"" [label=""setfees""];
""716_approveAndCall"" [label=""approveAndCall""];
""716_change_owner"" [label=""change_owner""];
""716__transfer"" [label=""_transfer""];
""716_transferFrom"" [label=""transferFrom""];
""716_Reissue"" [label=""Reissue""];
""716_founder"" [label=""founder""];
""716_burnFrom"" [label=""burnFrom""];
""716_approve"" [label=""approve""];
""716_transfer"" -> ""716__transfer"";
""716_approveAndCall"" -> ""716_approve"";
""716_transferFrom"" -> ""716__transfer"";
}
"
0x945f171de4ea81a213dcc7a1e8c4f6feb3b4b806.sol,ECP_Token,"contract ECP_Token { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public remaining; address public owner; uint public icoStatus; address public benAddress; address public bkaddress; uint public allowTransferToken; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event TokenTransferEvent(address indexed from, address indexed to, uint256 value, string typex); function ECP_Token() public { totalSupply = 15000000000000000000000000000; owner = msg.sender; balanceOf[owner] = totalSupply; name = ; symbol = ; decimals = 18; remaining = totalSupply; icoStatus = 1; benAddress = 0xe4a7a715bE044186a3ac5C60c7Df7dD1215f7419; bkaddress = 0x44e00602e4B8F546f76983de2489d636CB443722; allowTransferToken = 1; }",0,"subgraph cluster_745_ECP_Token {
label=""ECP_Token"";
""745_withdraw_all"" [label=""withdraw_all""];
""745_freezeAccount"" [label=""freezeAccount""];
""745_withdraw"" [label=""withdraw""];
""745_transferOwnership"" [label=""transferOwnership""];
""745_sendTokenToSingleAccount"" [label=""sendTokenToSingleAccount""];
""745__transfer"" [label=""_transfer""];
""745_burn"" [label=""burn""];
""745_sendToMultipleAccount"" [label=""sendToMultipleAccount""];
""745_approveAndCall"" [label=""approveAndCall""];
""745_approve"" [label=""approve""];
""745_adm_trasfer"" [label=""adm_trasfer""];
""745_changeIcoStatus"" [label=""changeIcoStatus""];
""745_fallback"" [label=""fallback""];
""745_setTransferStatus"" [label=""setTransferStatus""];
""745_totalSupply"" [label=""totalSupply""];
""745_transferFrom"" [label=""transferFrom""];
""745_balanceOf"" [label=""balanceOf""];
""745_burnFrom"" [label=""burnFrom""];
""745_transfer"" [label=""transfer""];
""745_mintToken"" [label=""mintToken""];
""745_ECP_Token"" [label=""ECP_Token""];
""745_transfer"" -> ""745__transfer"";
""745_adm_trasfer"" -> ""745_onlyOwner"";
""745_transferFrom"" -> ""745__transfer"";
""745_withdraw_all"" -> ""745_onlyOwner"";
""745_setTransferStatus"" -> ""745_onlyOwner"";
""745_freezeAccount"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745__transfer"";
""745_sendToMultipleAccount"" -> ""745_onlyOwner"";
""745_mintToken"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745_onlyOwner"";
""745_transferOwnership"" -> ""745_onlyOwner"";
""745_sendToMultipleAccount"" -> ""745__transfer"";
""745_approveAndCall"" -> ""745_approve"";
""745_adm_trasfer"" -> ""745__transfer"";
""745_withdraw"" -> ""745_onlyOwner"";
""745_changeIcoStatus"" -> ""745_onlyOwner"";
}
"
0xd1ceeee3ecfff60d9532c37c9d24f68ca0e96453.sol,Dice2Win,contract Dice2Win { uint constant JACKPOT_MODULO = 1000; uint constant HOUSE_EDGE_PERCENT = 2; uint constant JACKPOT_FEE_PERCENT = 50; uint constant MIN_BET = 0.01 ether; uint constant MAX_AMOUNT = 300000 ether; uint constant MIN_JACKPOT_BET = 0.1 ether; uint constant MAX_MODULO = 100; uint constant MAX_MASK_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO; uint constant BET_EXPIRATION_BLOCKS = 250; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; address public owner; address private nextOwner; uint public maxProfit; address public secretSigner; uint128 public jackpotSize; uint128 public lockedInBets; struct Bet { uint amount; uint8 modulo; uint8 rollUnder; uint40 placeBlockNumber; uint40 mask; address gambler; },0,"subgraph cluster_1266_Dice2Win {
label=""Dice2Win"";
""1266_kill"" [label=""kill""];
""1266_constructor"" [label=""constructor""];
""1266_placeBet"" [label=""placeBet""];
""1266_fallback"" [label=""fallback""];
""1266_refundBet"" [label=""refundBet""];
""1266_sendFunds"" [label=""sendFunds""];
""1266_clearStorage"" [label=""clearStorage""];
""1266_acceptNextOwner"" [label=""acceptNextOwner""];
""1266_withdrawFunds"" [label=""withdrawFunds""];
""1266_clearProcessedBet"" [label=""clearProcessedBet""];
""1266_setMaxProfit"" [label=""setMaxProfit""];
""1266_approveNextOwner"" [label=""approveNextOwner""];
""1266_settleBet"" [label=""settleBet""];
""1266_getJackpotFee"" [label=""getJackpotFee""];
""1266_getDiceWinAmount"" [label=""getDiceWinAmount""];
""1266_setSecretSigner"" [label=""setSecretSigner""];
""1266_increaseJackpot"" [label=""increaseJackpot""];
""1266_settleBet"" -> ""1266_clearProcessedBet"";
""1266_refundBet"" -> ""1266_getDiceWinAmount"";
""1266_withdrawFunds"" -> ""1266_onlyOwner"";
""1266_clearStorage"" -> ""1266_clearProcessedBet"";
""1266_withdrawFunds"" -> ""1266_sendFunds"";
""1266_increaseJackpot"" -> ""1266_onlyOwner"";
""1266_kill"" -> ""1266_onlyOwner"";
""1266_settleBet"" -> ""1266_sendFunds"";
""1266_setSecretSigner"" -> ""1266_onlyOwner"";
""1266_approveNextOwner"" -> ""1266_onlyOwner"";
""1266_placeBet"" -> ""1266_getDiceWinAmount"";
""1266_setMaxProfit"" -> ""1266_onlyOwner"";
""1266_refundBet"" -> ""1266_sendFunds"";
""1266_settleBet"" -> ""1266_getDiceWinAmount"";
""1266_placeBet"" -> ""1266_getJackpotFee"";
}
"
0x6a02e1a01e24007c80d3c377ce8ea624bf2a22c6.sol,Fomo60Min,"contract Fomo60Min is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0xe9f984847c8bd1c8842d108e2755be0d4eac7dba); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 30 minutes; uint256 private rndGap_ = 30 minutes; uint256 constant private rndInit_ = 30 minutes; uint256 constant private rndInc_ = 10 seconds; uint256 constant private rndMax_ = 1 hours; uint256 constant private preIcoMax_ = 100000000000000000000; uint256 constant private preIcoPerEth_ = 1000000000000000000; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(30,6); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(56,10); fees_[3] = F3Ddatasets.TeamFee(43,8); potSplit_[0] = F3Ddatasets.PotSplit(15,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(30,10); }",0,"subgraph cluster_4195_Fomo60Min {
label=""Fomo60Min"";
""4195_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4195_getBuyPrice"" [label=""getBuyPrice""];
""4195_potSwap"" [label=""potSwap""];
""4195_buyXaddr"" [label=""buyXaddr""];
""4195_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4195_distributeExternal"" [label=""distributeExternal""];
""4195_determinePID"" [label=""determinePID""];
""4195_managePlayer"" [label=""managePlayer""];
""4195_withdrawEarnings"" [label=""withdrawEarnings""];
""4195_core"" [label=""core""];
""4195_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4195_registerNameXID"" [label=""registerNameXID""];
""4195_registerNameXname"" [label=""registerNameXname""];
""4195_updateGenVault"" [label=""updateGenVault""];
""4195_constructor"" [label=""constructor""];
""4195_endRound"" [label=""endRound""];
""4195_airdrop"" [label=""airdrop""];
""4195_endTx"" [label=""endTx""];
""4195_reLoadXaddr"" [label=""reLoadXaddr""];
""4195_verifyTeam"" [label=""verifyTeam""];
""4195_buyXname"" [label=""buyXname""];
""4195_calcKeysReceived"" [label=""calcKeysReceived""];
""4195_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4195_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4195_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4195_fallback"" [label=""fallback""];
""4195_distributeInternal"" [label=""distributeInternal""];
""4195_getPlayerVaults"" [label=""getPlayerVaults""];
""4195_updateMasks"" [label=""updateMasks""];
""4195_reLoadXname"" [label=""reLoadXname""];
""4195_activate"" [label=""activate""];
""4195_updateTimer"" [label=""updateTimer""];
""4195_reLoadXid"" [label=""reLoadXid""];
""4195_getTimeLeft"" [label=""getTimeLeft""];
""4195_buyCore"" [label=""buyCore""];
""4195_withdraw"" [label=""withdraw""];
""4195_iWantXKeys"" [label=""iWantXKeys""];
""4195_reLoadCore"" [label=""reLoadCore""];
""4195_buyXid"" [label=""buyXid""];
""4195_registerNameXaddr"" [label=""registerNameXaddr""];
""4195_buyXid"" -> ""4195_isActivated"";
""4195_reLoadXid"" -> ""4195_isWithinLimits"";
""4195_buyCore"" -> ""4195_endRound"";
""4195_withdrawEarnings"" -> ""4195_updateGenVault"";
""4195_getPlayerVaults"" -> ""4195_getPlayerVaultsHelper"";
""4195_buyXid"" -> ""4195_verifyTeam"";
""4195_buyXaddr"" -> ""4195_determinePID"";
""4195_core"" -> ""4195_distributeExternal"";
""4195_reLoadXname"" -> ""4195_isWithinLimits"";
""4195_buyXname"" -> ""4195_isWithinLimits"";
""4195_reLoadXid"" -> ""4195_isHuman"";
""4195_reLoadXid"" -> ""4195_reLoadCore"";
""4195_fallback"" -> ""4195_buyCore"";
""4195_core"" -> ""4195_airdrop"";
""4195_buyXaddr"" -> ""4195_isHuman"";
""4195_buyXid"" -> ""4195_isHuman"";
""4195_buyXid"" -> ""4195_buyCore"";
""4195_reLoadXname"" -> ""4195_isActivated"";
""4195_buyXaddr"" -> ""4195_verifyTeam"";
""4195_withdraw"" -> ""4195_isHuman"";
""4195_buyXname"" -> ""4195_buyCore"";
""4195_withdraw"" -> ""4195_isActivated"";
""4195_registerNameXaddr"" -> ""4195_isHuman"";
""4195_buyXid"" -> ""4195_determinePID"";
""4195_withdraw"" -> ""4195_withdrawEarnings"";
""4195_buyXaddr"" -> ""4195_isWithinLimits"";
""4195_reLoadXid"" -> ""4195_verifyTeam"";
""4195_buyXname"" -> ""4195_determinePID"";
""4195_buyCore"" -> ""4195_core"";
""4195_updateGenVault"" -> ""4195_calcUnMaskedEarnings"";
""4195_buyXname"" -> ""4195_isActivated"";
""4195_getPlayerInfoByAddress"" -> ""4195_calcUnMaskedEarnings"";
""4195_buyXname"" -> ""4195_verifyTeam"";
""4195_withdraw"" -> ""4195_endRound"";
""4195_registerNameXID"" -> ""4195_isHuman"";
""4195_buyXname"" -> ""4195_isHuman"";
""4195_fallback"" -> ""4195_isWithinLimits"";
""4195_registerNameXname"" -> ""4195_isHuman"";
""4195_reLoadCore"" -> ""4195_core"";
""4195_buyXaddr"" -> ""4195_buyCore"";
""4195_reLoadXaddr"" -> ""4195_isActivated"";
""4195_fallback"" -> ""4195_isHuman"";
""4195_buyXaddr"" -> ""4195_isActivated"";
""4195_buyXid"" -> ""4195_isWithinLimits"";
""4195_reLoadXaddr"" -> ""4195_isWithinLimits"";
""4195_reLoadXaddr"" -> ""4195_isHuman"";
""4195_reLoadXid"" -> ""4195_isActivated"";
""4195_core"" -> ""4195_distributeInternal"";
""4195_core"" -> ""4195_endTx"";
""4195_core"" -> ""4195_managePlayer"";
""4195_reLoadXname"" -> ""4195_verifyTeam"";
""4195_fallback"" -> ""4195_determinePID"";
""4195_core"" -> ""4195_updateTimer"";
""4195_distributeInternal"" -> ""4195_updateMasks"";
""4195_managePlayer"" -> ""4195_updateGenVault"";
""4195_reLoadXname"" -> ""4195_reLoadCore"";
""4195_reLoadCore"" -> ""4195_endRound"";
""4195_fallback"" -> ""4195_isActivated"";
""4195_reLoadXname"" -> ""4195_isHuman"";
""4195_getPlayerVaults"" -> ""4195_calcUnMaskedEarnings"";
""4195_reLoadXaddr"" -> ""4195_verifyTeam"";
""4195_reLoadXaddr"" -> ""4195_reLoadCore"";
""4195_reLoadCore"" -> ""4195_withdrawEarnings"";
}
"
0xb3a9d2e554c653b7712753c0e8616cca20b14c56.sol,HaiWang,"contract HaiWang { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HaiWang(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_HaiWang {
label=""HaiWang"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_approve"" [label=""approve""];
""361_transfer"" [label=""transfer""];
""361_HaiWang"" [label=""HaiWang""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0x18e8ac27125883b156b113c2bcbe54802a106a43.sol,Ownable,"contract Ownable { address public owner; address public operator; address public CEO; address public CTO; address public CMO; bool public CEO_Signature; bool public CTO_Signature; bool public CMO_Signature; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); event OperatorTransferred(address indexed previousOperator, address indexed newOperator); event CEOTransferred(address indexed previousCEO, address indexed newCEO); event CTOTransferred(address indexed previousCTO, address indexed newCTO); event CMOTransferred(address indexed previousCMO, address indexed newCMO); constructor() public { owner = msg.sender; operator = 0xFd48048f8c7B900b5E5216Dc9d7bCd147c2E2efb; CEO = 0xAC9C29a58C54921e822c972ACb5EBA955B59C744; CTO = 0x60552ccF90872ad2d332DC26a5931Bc6BFb3142c; CMO = 0xff76E74fE7AC6Dcd9C151D57A71A99D89910a098; ClearCLevelSignature(); }",0,"subgraph cluster_599_Ownable {
label=""Ownable"";
""599_constructor"" [label=""constructor""];
""599_CEOSignature"" [label=""CEOSignature""];
""599_transferOwnership"" [label=""transferOwnership""];
""599_CMOSignature"" [label=""CMOSignature""];
""599_transferCMO"" [label=""transferCMO""];
""599_CTOSignature"" [label=""CTOSignature""];
""599_transferCEO"" [label=""transferCEO""];
""599_transferCTO"" [label=""transferCTO""];
""599_transferOperator"" [label=""transferOperator""];
""599_ClearCLevelSignature"" [label=""ClearCLevelSignature""];
""599_SignatureInvalidity"" [label=""SignatureInvalidity""];
""599_transferCEO"" -> ""599_ClearCLevelSignature"";
""599_SignatureInvalidity"" -> ""599_onlyOwnerOrOperator"";
""599_transferCMO"" -> ""599_ClearCLevelSignature"";
""599_transferOwnership"" -> ""599_AllCLevelSignature"";
""599_SignatureInvalidity"" -> ""599_ClearCLevelSignature"";
""599_transferCTO"" -> ""599_AllCLevelSignature"";
""599_transferCEO"" -> ""599_AllCLevelSignature"";
""599_transferOwnership"" -> ""599_ClearCLevelSignature"";
""599_CMOSignature"" -> ""599_onlyCMO"";
""599_CEOSignature"" -> ""599_onlyCEO"";
""599_constructor"" -> ""599_ClearCLevelSignature"";
""599_transferCMO"" -> ""599_AllCLevelSignature"";
""599_transferCTO"" -> ""599_ClearCLevelSignature"";
""599_CTOSignature"" -> ""599_onlyCTO"";
""599_transferOperator"" -> ""599_onlyOwner"";
}
"
0xbe6a5ce2c1684dcbd172d6d090c6572a4cf1b802.sol,QUANTUM_INTELLIGENCE,"contract QUANTUM_INTELLIGENCE is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 2100000000000000000000000000; balances[0x0b08D6AdfEC2d06Aec653Ae7Fc2830894e02D23b] = _totalSupply; emit Transfer(address(0), 0x0b08D6AdfEC2d06Aec653Ae7Fc2830894e02D23b, _totalSupply); }",0,"subgraph cluster_543_QUANTUM_INTELLIGENCE {
label=""QUANTUM_INTELLIGENCE"";
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_constructor"" [label=""constructor""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x2d820ea3a6b9302c500feeb7f6361ba1ddfa5aba.sol,BancorChanger,"contract BancorChanger is ITokenChanger, SmartTokenController, Managed { uint32 private constant MAX_CRR = 1000000; uint32 private constant MAX_CHANGE_FEE = 1000000; struct Reserve { uint256 virtualBalance; uint32 ratio; bool isVirtualBalanceEnabled; bool isPurchaseEnabled; bool isSet; }",0,"subgraph cluster_2033_BancorChanger {
label=""BancorChanger"";
""2033_changeableTokenCount"" [label=""changeableTokenCount""];
""2033_fallback"" [label=""fallback""];
""2033_clearQuickBuyPath"" [label=""clearQuickBuyPath""];
""2033_claimTokens"" [label=""claimTokens""];
""2033_changeableToken"" [label=""changeableToken""];
""2033_disableReservePurchases"" [label=""disableReservePurchases""];
""2033_getReturn"" [label=""getReturn""];
""2033_quickBuy"" [label=""quickBuy""];
""2033_getChangeFeeAmount"" [label=""getChangeFeeAmount""];
""2033_addReserve"" [label=""addReserve""];
""2033_getQuickBuyEtherToken"" [label=""getQuickBuyEtherToken""];
""2033_quickChange"" [label=""quickChange""];
""2033_disableChanging"" [label=""disableChanging""];
""2033_getPurchaseReturn"" [label=""getPurchaseReturn""];
""2033_getSaleReturn"" [label=""getSaleReturn""];
""2033_change"" [label=""change""];
""2033_BancorChanger"" [label=""BancorChanger""];
""2033_setFormula"" [label=""setFormula""];
""2033_getQuickBuyPathLength"" [label=""getQuickBuyPathLength""];
""2033_getReserveBalance"" [label=""getReserveBalance""];
""2033_ensureAllowance"" [label=""ensureAllowance""];
""2033_setChangeFee"" [label=""setChangeFee""];
""2033_sell"" [label=""sell""];
""2033_reserveTokenCount"" [label=""reserveTokenCount""];
""2033_buy"" [label=""buy""];
""2033_hasQuickBuyEtherToken"" [label=""hasQuickBuyEtherToken""];
""2033_setQuickBuyPath"" [label=""setQuickBuyPath""];
""2033_updateReserve"" [label=""updateReserve""];
""2033_addReserve"" -> ""2033_inactive"";
""2033_fallback"" -> ""2033_quickBuy"";
""2033_buy"" -> ""2033_changingAllowed"";
""2033_sell"" -> ""2033_safeSub"";
""2033_BancorChanger"" -> ""2033_validMaxChangeFee"";
""2033_BancorChanger"" -> ""2033_SmartTokenController"";
""2033_addReserve"" -> ""2033_validAddress"";
""2033_getPurchaseReturn"" -> ""2033_active"";
""2033_sell"" -> ""2033_safeMul"";
""2033_getPurchaseReturn"" -> ""2033_getReserveBalance"";
""2033_sell"" -> ""2033_greaterThanZero"";
""2033_getSaleReturn"" -> ""2033_getReserveBalance"";
""2033_setChangeFee"" -> ""2033_managerOnly"";
""2033_getSaleReturn"" -> ""2033_validReserve"";
""2033_getReserveBalance"" -> ""2033_validReserve"";
""2033_disableReservePurchases"" -> ""2033_ownerOnly"";
""2033_getSaleReturn"" -> ""2033_getChangeFeeAmount"";
""2033_buy"" -> ""2033_greaterThanZero"";
""2033_BancorChanger"" -> ""2033_addReserve"";
""2033_addReserve"" -> ""2033_ownerOnly"";
""2033_getReturn"" -> ""2033_getPurchaseReturn"";
""2033_change"" -> ""2033_sell"";
""2033_quickChange"" -> ""2033_claimTokens"";
""2033_updateReserve"" -> ""2033_validReserve"";
""2033_getPurchaseReturn"" -> ""2033_safeSub"";
""2033_BancorChanger"" -> ""2033_validAddress"";
""2033_updateReserve"" -> ""2033_validReserveRatio"";
""2033_buy"" -> ""2033_safeMul"";
""2033_buy"" -> ""2033_getReserveBalance"";
""2033_addReserve"" -> ""2033_notThis"";
""2033_getPurchaseReturn"" -> ""2033_getChangeFeeAmount"";
""2033_setChangeFee"" -> ""2033_validChangeFee"";
""2033_change"" -> ""2033_buy"";
""2033_sell"" -> ""2033_getSaleReturn"";
""2033_buy"" -> ""2033_getPurchaseReturn"";
""2033_disableChanging"" -> ""2033_managerOnly"";
""2033_getChangeFeeAmount"" -> ""2033_safeMul"";
""2033_sell"" -> ""2033_changingAllowed"";
""2033_addReserve"" -> ""2033_validReserveRatio"";
""2033_getPurchaseReturn"" -> ""2033_validReserve"";
""2033_setFormula"" -> ""2033_notThis"";
""2033_setQuickBuyPath"" -> ""2033_validChangePath"";
""2033_getReturn"" -> ""2033_safeAdd"";
""2033_changeableTokenCount"" -> ""2033_reserveTokenCount"";
""2033_setQuickBuyPath"" -> ""2033_ownerOnly"";
""2033_setFormula"" -> ""2033_validAddress"";
""2033_clearQuickBuyPath"" -> ""2033_ownerOnly"";
""2033_getReturn"" -> ""2033_getSaleReturn"";
""2033_getSaleReturn"" -> ""2033_getSaleReturn"";
""2033_quickChange"" -> ""2033_validChangePath"";
""2033_getSaleReturn"" -> ""2033_greaterThanZero"";
""2033_setFormula"" -> ""2033_ownerOnly"";
""2033_disableReservePurchases"" -> ""2033_validReserve"";
""2033_updateReserve"" -> ""2033_ownerOnly"";
""2033_sell"" -> ""2033_getReserveBalance"";
""2033_quickChange"" -> ""2033_ensureAllowance"";
""2033_getSaleReturn"" -> ""2033_active"";
""2033_buy"" -> ""2033_safeAdd"";
""2033_quickBuy"" -> ""2033_ensureAllowance"";
""2033_getSaleReturn"" -> ""2033_safeSub"";
}
"
0xbdae4cb65e1c68cd9cd41b73c93ae3d331acad5c.sol,Vote,"contract Vote is Ownable { event CandidateRegistered(uint candidateId, string candidateName, string candidateDescription); event VoteCast(uint candidateId); struct Candidate { uint candidateId; string candidateName; string candidateDescription; }",0,"subgraph cluster_232_Vote {
label=""Vote"";
""232_registerCandidate"" [label=""registerCandidate""];
""232_castVote"" [label=""castVote""];
""232_Vote"" [label=""Vote""];
""232_candidateInformation"" [label=""candidateInformation""];
""232_registerCandidate"" -> ""232_onlyOwner"";
}
"
0x3695cb4210d5ccd65a11eaa4e1a9d91e628b3bc1.sol,EtherPiggyBank,contract EtherPiggyBank { mapping (address => uint256) public investedETH; mapping (address => uint256) public lastInvest; mapping (address => uint256) public affiliateCommision; uint256 REF_BONUS = 4; uint256 DEV_TAX = 1; uint256 BASE_PRICE = 0.125 ether; uint256 INHERITANCE_TAX = 75; uint256 DEV_TRANSFER_TAX = 5; struct InvestorPosition { address investor; uint256 startingLevel; uint256 startingTime; uint256 halfLife; uint256 percentageCut; },0,"subgraph cluster_757_EtherPiggyBank {
label=""EtherPiggyBank"";
""757_withdrawAffiliateCommision"" [label=""withdrawAffiliateCommision""];
""757_getProfitFromSender"" [label=""getProfitFromSender""];
""757_investETH"" [label=""investETH""];
""757_reinvestProfit"" [label=""reinvestProfit""];
""757_EtherPiggyBank"" [label=""EtherPiggyBank""];
""757_getInvestorPosition"" [label=""getInvestorPosition""];
""757_getInvested"" [label=""getInvested""];
""757_divestETH"" [label=""divestETH""];
""757_getBalance"" [label=""getBalance""];
""757_getCurrentPrice"" [label=""getCurrentPrice""];
""757_inheritInvestorPosition"" [label=""inheritInvestorPosition""];
""757_getCurrentLevel"" [label=""getCurrentLevel""];
""757_withdraw"" [label=""withdraw""];
""757_getAffiliateCommision"" [label=""getAffiliateCommision""];
""757_getProfit"" [label=""getProfit""];
""757_investETH"" -> ""757_getProfit"";
""757_reinvestProfit"" -> ""757_getProfit"";
""757_divestETH"" -> ""757_getProfit"";
""757_getInvestorPosition"" -> ""757_getCurrentPrice"";
""757_getProfitFromSender"" -> ""757_getProfit"";
""757_getInvestorPosition"" -> ""757_getCurrentLevel"";
""757_withdraw"" -> ""757_getProfit"";
""757_inheritInvestorPosition"" -> ""757_getCurrentPrice"";
""757_inheritInvestorPosition"" -> ""757_getCurrentLevel"";
}
"
0x6fc135d4a065fbaa45e3df178f2ebc150f0401b1.sol,V2Alpha4TierSale,contract V2Alpha4TierSale is Owned{ using SafeMath for uint256; using SafeMath for uint; struct ContributorData{ bool isActive; bool isTokenDistributed; uint contributionAmount; uint tokensAmount; },0,"subgraph cluster_842_V2Alpha4TierSale {
label=""V2Alpha4TierSale"";
""842_withdrawALC"" [label=""withdrawALC""];
""842_distributeALCTokenBatch"" [label=""distributeALCTokenBatch""];
""842_checkTokenBalance"" [label=""checkTokenBalance""];
""842_closeCrowdSale"" [label=""closeCrowdSale""];
""842_processTransaction"" [label=""processTransaction""];
""842_safeWithdrawalAmount"" [label=""safeWithdrawalAmount""];
""842_distributeALCToken"" [label=""distributeALCToken""];
""842_fallback"" [label=""fallback""];
""842_checkIfAllALCDistributed"" [label=""checkIfAllALCDistributed""];
""842_safeWithdrawalAll"" [label=""safeWithdrawalAll""];
""842_V2Alpha4TierSale"" [label=""V2Alpha4TierSale""];
""842_withdrawALC"" -> ""842_afterCrowdsaleClosed"";
""842_distributeALCTokenBatch"" -> ""842_checkIfAllALCDistributed"";
""842_fallback"" -> ""842_processTransaction"";
""842_distributeALCToken"" -> ""842_checkIfAllALCDistributed"";
}
"
0x2132b2cd3bb47ce23600e2f9825f05feef1bab1d.sol,AternoToken,"contract AternoToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 13000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 20000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_948_AternoToken {
label=""AternoToken"";
""948_transferOwnership"" [label=""transferOwnership""];
""948_updateTokensPerEth"" [label=""updateTokensPerEth""];
""948_balanceOf"" [label=""balanceOf""];
""948_doAirdrop"" [label=""doAirdrop""];
""948_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""948_getTokens"" [label=""getTokens""];
""948_allowance"" [label=""allowance""];
""948_withdraw"" [label=""withdraw""];
""948_transferFrom"" [label=""transferFrom""];
""948_fallback"" [label=""fallback""];
""948_finishDistribution"" [label=""finishDistribution""];
""948_transfer"" [label=""transfer""];
""948_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""948_burn"" [label=""burn""];
""948_approve"" [label=""approve""];
""948_distr"" [label=""distr""];
""948_AternoToken"" [label=""AternoToken""];
""948_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""948_getTokenBalance"" [label=""getTokenBalance""];
""948_adminClaimAirdrop"" -> ""948_onlyOwner"";
""948_adminClaimAirdropMultiple"" -> ""948_doAirdrop"";
""948_getTokens"" -> ""948_distr"";
""948_withdraw"" -> ""948_onlyOwner"";
""948_AternoToken"" -> ""948_distr"";
""948_updateTokensPerEth"" -> ""948_onlyOwner"";
""948_adminClaimAirdrop"" -> ""948_doAirdrop"";
""948_transfer"" -> ""948_onlyPayloadSize"";
""948_burn"" -> ""948_onlyOwner"";
""948_finishDistribution"" -> ""948_canDistr"";
""948_fallback"" -> ""948_getTokens"";
""948_transferFrom"" -> ""948_onlyPayloadSize"";
""948_distr"" -> ""948_canDistr"";
""948_withdrawAltcoinTokens"" -> ""948_onlyOwner"";
""948_adminClaimAirdropMultiple"" -> ""948_onlyOwner"";
""948_getTokens"" -> ""948_canDistr"";
""948_transferOwnership"" -> ""948_onlyOwner"";
""948_finishDistribution"" -> ""948_onlyOwner"";
}
"
0xece8128c8f2746d17c72c1a6a2c72a0b086a9098.sol,SYCToken,"contract SYCToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 625; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",0,"subgraph cluster_849_SYCToken {
label=""SYCToken"";
""849_startFunding"" [label=""startFunding""];
""849_stopFunding"" [label=""stopFunding""];
""849_decreaseSupply"" [label=""decreaseSupply""];
""849_allocateToken"" [label=""allocateToken""];
""849_migrate"" [label=""migrate""];
""849_transferETH"" [label=""transferETH""];
""849_fallback"" [label=""fallback""];
""849_changeOwner"" [label=""changeOwner""];
""849_SYCToken"" [label=""SYCToken""];
""849_formatDecimals"" [label=""formatDecimals""];
""849_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""849_setMigrateContract"" [label=""setMigrateContract""];
""849_increaseSupply"" [label=""increaseSupply""];
""849_fallback"" -> ""849_safeAdd"";
""849_setTokenExchangeRate"" -> ""849_isOwner"";
""849_transferETH"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_safeAdd"";
""849_migrate"" -> ""849_safeAdd"";
""849_changeOwner"" -> ""849_isOwner"";
""849_startFunding"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_formatDecimals"";
""849_stopFunding"" -> ""849_isOwner"";
""849_decreaseSupply"" -> ""849_safeSubtract"";
""849_allocateToken"" -> ""849_safeMult"";
""849_increaseSupply"" -> ""849_isOwner"";
""849_decreaseSupply"" -> ""849_formatDecimals"";
""849_fallback"" -> ""849_safeMult"";
""849_SYCToken"" -> ""849_formatDecimals"";
""849_decreaseSupply"" -> ""849_isOwner"";
""849_setMigrateContract"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_safeAdd"";
""849_allocateToken"" -> ""849_isOwner"";
}
"
0x722b035cdaf0daf521ead7bc3496029a280e6249.sol,FckDice,contract FckDice { uint public HOUSE_EDGE_PERCENT = 1; uint public HOUSE_EDGE_MINIMUM_AMOUNT = 0.0003 ether; uint public MIN_JACKPOT_BET = 0.1 ether; uint public JACKPOT_MODULO = 1000; uint public JACKPOT_FEE = 0.001 ether; function setHouseEdgePercent(uint _HOUSE_EDGE_PERCENT) external onlyOwner { HOUSE_EDGE_PERCENT = _HOUSE_EDGE_PERCENT; },0,"subgraph cluster_1108_FckDice {
label=""FckDice"";
""1108_setHouseEdgeMinimumAmount"" [label=""setHouseEdgeMinimumAmount""];
""1108_kill"" [label=""kill""];
""1108_approveNextOwner"" [label=""approveNextOwner""];
""1108_settleBetCommon"" [label=""settleBetCommon""];
""1108_settleBet"" [label=""settleBet""];
""1108_setSecretSigner"" [label=""setSecretSigner""];
""1108_setCroupier"" [label=""setCroupier""];
""1108_constructor"" [label=""constructor""];
""1108_getDiceWinAmount"" [label=""getDiceWinAmount""];
""1108_setJackpotFee"" [label=""setJackpotFee""];
""1108_sendFunds"" [label=""sendFunds""];
""1108_increaseJackpot"" [label=""increaseJackpot""];
""1108_setJackpotModulo"" [label=""setJackpotModulo""];
""1108_placeBet"" [label=""placeBet""];
""1108_setMinJackpotBet"" [label=""setMinJackpotBet""];
""1108_setHouseEdgePercent"" [label=""setHouseEdgePercent""];
""1108_withdrawFunds"" [label=""withdrawFunds""];
""1108_acceptNextOwner"" [label=""acceptNextOwner""];
""1108_fallback"" [label=""fallback""];
""1108_getBetInfo"" [label=""getBetInfo""];
""1108_setMaxProfit"" [label=""setMaxProfit""];
""1108_refundBet"" [label=""refundBet""];
""1108_settleBetCommon"" -> ""1108_sendFunds"";
""1108_refundBet"" -> ""1108_getDiceWinAmount"";
""1108_setJackpotModulo"" -> ""1108_onlyOwner"";
""1108_setJackpotFee"" -> ""1108_onlyOwner"";
""1108_setCroupier"" -> ""1108_onlyOwner"";
""1108_refundBet"" -> ""1108_sendFunds"";
""1108_placeBet"" -> ""1108_getDiceWinAmount"";
""1108_setHouseEdgeMinimumAmount"" -> ""1108_onlyOwner"";
""1108_setMaxProfit"" -> ""1108_onlyOwner"";
""1108_settleBet"" -> ""1108_onlyCroupier"";
""1108_setMinJackpotBet"" -> ""1108_onlyOwner"";
""1108_setHouseEdgePercent"" -> ""1108_onlyOwner"";
""1108_settleBetCommon"" -> ""1108_getDiceWinAmount"";
""1108_withdrawFunds"" -> ""1108_onlyOwner"";
""1108_withdrawFunds"" -> ""1108_sendFunds"";
""1108_kill"" -> ""1108_onlyOwner"";
""1108_increaseJackpot"" -> ""1108_onlyOwner"";
""1108_settleBet"" -> ""1108_settleBetCommon"";
""1108_approveNextOwner"" -> ""1108_onlyOwner"";
""1108_setSecretSigner"" -> ""1108_onlyOwner"";
}
"
0x86eb97475e866c4b3e47a67629237d25974bc7df.sol,Token,contract Token is StandardToken { string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public constant INITIAL_SUPPLY = 63000000; function Token() public { totalSupply_ = INITIAL_SUPPLY * (10 ** uint256(decimals)); balances[msg.sender] = totalSupply_; },0,"subgraph cluster_501_StandardToken {
label=""StandardToken"";
""501_approve"" [label=""approve""];
""501_transferFrom"" [label=""transferFrom""];
""501_increaseApproval"" [label=""increaseApproval""];
""501_decreaseApproval"" [label=""decreaseApproval""];
""501_allowance"" [label=""allowance""];
}
"
0x03966330e7f60c95d2d8dd043735eea901c5e4e0.sol,ERC721,"contract ERC721 is ERC165, IERC721 { using SafeMath for uint256; using Address for address; bytes4 private constant _ERC721_RECEIVED = 0x150b7a02; mapping (uint256 => address) private _tokenOwner; mapping (uint256 => address) private _tokenApprovals; mapping (address => uint256) private _ownedTokensCount; mapping (address => mapping (address => bool)) private _operatorApprovals; bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd; constructor() public { _registerInterface(_InterfaceId_ERC721); }",0,"subgraph cluster_109_IERC721 {
label=""IERC721"";
""109_isApprovedForAll"" [label=""isApprovedForAll""];
""109_ownerOf"" [label=""ownerOf""];
""109_safeTransferFrom"" [label=""safeTransferFrom""];
""109_setApprovalForAll"" [label=""setApprovalForAll""];
""109_transferFrom"" [label=""transferFrom""];
""109_getApproved"" [label=""getApproved""];
""109_balanceOf"" [label=""balanceOf""];
""109_approve"" [label=""approve""];
}
"
0x01d6208f95cf2292c350fc8bb1b1f29230352675.sol,DepositWithdraw,"contract DepositWithdraw is Claimable, Withdrawable { using SafeMath for uint256; struct TransferRecord { uint256 timeStamp; address account; uint256 value; }",0,"subgraph cluster_981_DepositWithdraw {
label=""DepositWithdraw"";
""981_checkWithdrawAmount"" [label=""checkWithdrawAmount""];
""981_setWithdrawWallet"" [label=""setWithdrawWallet""];
""981_recordWithdraw"" [label=""recordWithdraw""];
""981_getDepositNum"" [label=""getDepositNum""];
""981_getOneWithdrawRec"" [label=""getOneWithdrawRec""];
""981_withdrawTokenToDefault"" [label=""withdrawTokenToDefault""];
""981_bytesToBytes32"" [label=""bytesToBytes32""];
""981_receiveApproval"" [label=""receiveApproval""];
""981_getOneDepositRec"" [label=""getOneDepositRec""];
""981_constructor"" [label=""constructor""];
""981_withdrawToken"" [label=""withdrawToken""];
""981_getWithdrawNum"" [label=""getWithdrawNum""];
""981_recordWithdraw"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_checkWithdrawAmount"";
""981_withdrawTokenToDefault"" -> ""981_withdrawToken"";
""981_receiveApproval"" -> ""981_onlyOwner"";
""981_withdrawTokenToDefault"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_onlyOwner"";
""981_setWithdrawWallet"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_recordWithdraw"";
""981_receiveApproval"" -> ""981_bytesToBytes32"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,Havven,"contract Havven is ExternStateProxyToken, SelfDestructible { mapping(address => uint) public currentBalanceSum; mapping(address => uint) public lastAverageBalance; mapping(address => uint) public penultimateAverageBalance; mapping(address => uint) public lastTransferTimestamp; uint public feePeriodStartTime = 3; uint public lastFeePeriodStartTime = 2; uint public penultimateFeePeriodStartTime = 1; uint public targetFeePeriodDurationSeconds = 4 weeks; uint constant MIN_FEE_PERIOD_DURATION_SECONDS = 1 days; uint constant MAX_FEE_PERIOD_DURATION_SECONDS = 26 weeks; uint public lastFeesCollected; mapping(address => bool) public hasWithdrawnLastPeriodFees; EtherNomin public nomin; HavvenEscrow public escrow; function Havven(TokenState initialState, address _owner) ExternStateProxyToken(, , 1e8 * UNIT, address(this), initialState, _owner) SelfDestructible(_owner, _owner) public { lastTransferTimestamp[this] = now; feePeriodStartTime = now; lastFeePeriodStartTime = now - targetFeePeriodDurationSeconds; penultimateFeePeriodStartTime = now - 2*targetFeePeriodDurationSeconds; }",0,"subgraph cluster_4834_Havven {
label=""Havven"";
""4834_totalSupply"" [label=""totalSupply""];
""4834_endow"" [label=""endow""];
""4834_setEscrow"" [label=""setEscrow""];
""4834_rolloverFeePeriod"" [label=""rolloverFeePeriod""];
""4834_setTargetFeePeriodDuration"" [label=""setTargetFeePeriodDuration""];
""4834_recomputeLastAverageBalance"" [label=""recomputeLastAverageBalance""];
""4834_adjustFeeEntitlement"" [label=""adjustFeeEntitlement""];
""4834_emitTransferEvents"" [label=""emitTransferEvents""];
""4834_targetFeePeriodDurationSeconds"" [label=""targetFeePeriodDurationSeconds""];
""4834_rolloverFee"" [label=""rolloverFee""];
""4834__recomputeAccountLastAverageBalance"" [label=""_recomputeAccountLastAverageBalance""];
""4834_transfer"" [label=""transfer""];
""4834_feePeriodStartTime"" [label=""feePeriodStartTime""];
""4834_recomputeAccountLastAverageBalance"" [label=""recomputeAccountLastAverageBalance""];
""4834_transferFrom"" [label=""transferFrom""];
""4834_Havven"" [label=""Havven""];
""4834_checkFeePeriodRollover"" [label=""checkFeePeriodRollover""];
""4834_withdrawFeeEntitlement"" [label=""withdrawFeeEntitlement""];
""4834_penultimateAverageBalance"" [label=""penultimateAverageBalance""];
""4834_setNomin"" [label=""setNomin""];
""4834_lastAverageBalance"" [label=""lastAverageBalance""];
""4834__transfer"" [label=""_transfer""];
""4834_withdrawFeeEntitlement"" -> ""4834_safeAdd"";
""4834_withdrawFeeEntitlement"" -> ""4834_safeMul_dec"";
""4834_withdrawFeeEntitlement"" -> ""4834_preCheckFeePeriodRollover"";
""4834__recomputeAccountLastAverageBalance"" -> ""4834_preCheckFeePeriodRollover"";
""4834__transfer"" -> ""4834_adjustFeeEntitlement"";
""4834_setTargetFeePeriodDuration"" -> ""4834_postCheckFeePeriodRollover"";
""4834_transferFrom"" -> ""4834__transferFrom_byProxy"";
""4834_transfer"" -> ""4834__transfer"";
""4834_withdrawFeeEntitlement"" -> ""4834_optionalProxy"";
""4834_recomputeLastAverageBalance"" -> ""4834__recomputeAccountLastAverageBalance"";
""4834_rolloverFee"" -> ""4834_safeMul"";
""4834_transferFrom"" -> ""4834_preCheckFeePeriodRollover"";
""4834_rolloverFeePeriod"" -> ""4834_checkFeePeriodRollover"";
""4834_transferFrom"" -> ""4834_optionalProxy"";
""4834_recomputeAccountLastAverageBalance"" -> ""4834__recomputeAccountLastAverageBalance"";
""4834_Havven"" -> ""4834_ExternStateProxyToken"";
""4834__recomputeAccountLastAverageBalance"" -> ""4834_adjustFeeEntitlement"";
""4834_emitTransferEvents"" -> ""4834_onlyOwner"";
""4834_withdrawFeeEntitlement"" -> ""4834_rolloverFee"";
""4834__transfer"" -> ""4834__transfer_byProxy"";
""4834_transferFrom"" -> ""4834_adjustFeeEntitlement"";
""4834_adjustFeeEntitlement"" -> ""4834_rolloverFee"";
""4834_rolloverFee"" -> ""4834_safeAdd"";
""4834_setEscrow"" -> ""4834_optionalProxy_onlyOwner"";
""4834_adjustFeeEntitlement"" -> ""4834_safeAdd"";
""4834_setNomin"" -> ""4834_optionalProxy_onlyOwner"";
""4834_recomputeLastAverageBalance"" -> ""4834_optionalProxy"";
""4834_Havven"" -> ""4834_SelfDestructible"";
""4834_withdrawFeeEntitlement"" -> ""4834_safeDiv_dec"";
""4834_endow"" -> ""4834__transfer"";
""4834_adjustFeeEntitlement"" -> ""4834_safeMul"";
""4834_transfer"" -> ""4834_optionalProxy"";
""4834_rolloverFee"" -> ""4834_safeDiv"";
""4834__transfer"" -> ""4834_preCheckFeePeriodRollover"";
""4834_endow"" -> ""4834_optionalProxy_onlyOwner"";
""4834_setTargetFeePeriodDuration"" -> ""4834_optionalProxy_onlyOwner"";
}
"
0x2d05359a51ca13c4ac5f4437585afaf5bf2050f9.sol,SafeMath,"contract SafeMath { function safeToAdd(uint a, uint b) pure internal returns (bool) { return (a + b >= a); }",0,"subgraph cluster_7462_SafeMath {
label=""SafeMath"";
""7462_safeToAdd"" [label=""safeToAdd""];
""7462_safeToSubtract"" [label=""safeToSubtract""];
""7462_safeSub"" [label=""safeSub""];
""7462_safeAdd"" [label=""safeAdd""];
""7462_safeAdd"" -> ""7462_safeToAdd"";
""7462_safeSub"" -> ""7462_safeToSubtract"";
}
"
0x56ffb3c578906ba9658fccb052fc1a5672275b6a.sol,TimedCrowdsale,contract TimedCrowdsale is Crowdsale { using SafeMath for uint256; uint256 public openingTime; uint256 public closingTime; modifier onlyWhileOpen { require(block.timestamp >= openingTime && block.timestamp <= closingTime); _; },0,"subgraph cluster_1224_TimedCrowdsale {
label=""TimedCrowdsale"";
""1224_constructor"" [label=""constructor""];
""1224_hasClosed"" [label=""hasClosed""];
""1224__preValidatePurchase"" [label=""_preValidatePurchase""];
""1224__preValidatePurchase"" -> ""1224__preValidatePurchase"";
""1224__preValidatePurchase"" -> ""1224_onlyWhileOpen"";
}
"
0x65292eeadf1426cd2df1c4793a3d7519f253913b.sol,COSSToken,"contract COSSToken is IERC20Token, SafeMath { string public standard = ; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 54359820; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); mapping (address => string) public revenueShareIdentifierList; mapping (address => string) public revenueShareCurrency; mapping (address => uint256) public revenueShareDistribution; uint256 public decimalMultiplier = 1000000000000000000; address public revenueShareOwnerAddress; address public icoWalletAddress = 0x0d6b5a54f940bf3d52e438cab785981aaefdf40c; address public futureFundingWalletAddress = 0x1e1f9b4dae157282b6be74d0e9d48cd8298ed1a8; address public charityWalletAddress = 0x7dbb1f2114d1bedca41f32bb43df938bcfb13e5c; address public capWalletAddress = 0x49a72a02c7f1e36523b74259178eadd5c3c27173; address public shareholdersWalletAddress = 0xda3705a572ceb85e05b29a0dc89082f1d8ab717d; address public investorWalletAddress = 0xa08e7f6028e7d2d83a156d7da5db6ce0615493b9; function COSSToken() { revenueShareOwnerAddress = msg.sender; balanceOf[icoWalletAddress] = safeMul(80000000,decimalMultiplier); balanceOf[futureFundingWalletAddress] = safeMul(50000000,decimalMultiplier); balanceOf[charityWalletAddress] = safeMul(10000000,decimalMultiplier); balanceOf[capWalletAddress] = safeMul(20000000,decimalMultiplier); balanceOf[shareholdersWalletAddress] = safeMul(30000000,decimalMultiplier); balanceOf[investorWalletAddress] = safeMul(10000000,decimalMultiplier); }",0,"subgraph cluster_547_COSSToken {
label=""COSSToken"";
""547_saveRevenueShareDistribution"" [label=""saveRevenueShareDistribution""];
""547_activateRevenueShareIdentifier"" [label=""activateRevenueShareIdentifier""];
""547_approve"" [label=""approve""];
""547_transfer"" [label=""transfer""];
""547_transferFrom"" [label=""transferFrom""];
""547_addRevenueShareCurrency"" [label=""addRevenueShareCurrency""];
""547_COSSToken"" [label=""COSSToken""];
""547_transfer"" -> ""547_safeSub"";
""547_approve"" -> ""547_validAddress"";
""547_COSSToken"" -> ""547_safeMul"";
""547_transfer"" -> ""547_safeAdd"";
""547_transferFrom"" -> ""547_safeAdd"";
""547_saveRevenueShareDistribution"" -> ""547_safeAdd"";
""547_transfer"" -> ""547_validAddress"";
""547_transferFrom"" -> ""547_safeSub"";
""547_transferFrom"" -> ""547_validAddress"";
}
"
0x029af1f2c753c458c1e7fa04428e78cbe2eb09a7.sol,CryptoArenaInterface,"contract CryptoArenaInterface { function getData(address ) public view returns(uint256 , uint256 , uint256 , bool , uint256 , uint256 ) {}",0,"subgraph cluster_388_CryptoArenaInterface {
label=""CryptoArenaInterface"";
""388_isArenaContract"" [label=""isArenaContract""];
""388_isContractMiniGame"" [label=""isContractMiniGame""];
""388_getData"" [label=""getData""];
}
"
0x38d14eb90d0be64f9bd3b34a199b0d961599340e.sol,ElepigToken,"contract ElepigToken is MintableToken { string public name = ; string public symbol = ; uint8 public decimals = 18; uint constant unlockY1Time = 1546300800; uint constant unlockY2Time = 1577836800; uint constant unlockY3Time = 1609459200; uint constant unlockY4Time = 1640995200; mapping (address => uint256) public freezeOf; address affiliate; address contingency; address advisor; address team; address teamY1; address teamY2; address teamY3; address teamY4; bool public mintedWallets = false; uint256 constant affiliateTokens = 7500000000000000000000000; uint256 constant contingencyTokens = 52500000000000000000000000; uint256 constant advisorTokens = 30000000000000000000000000; uint256 constant teamTokensPerWallet = 12000000000000000000000000; event Unfreeze(address indexed from, uint256 value); event Freeze(address indexed from, uint256 value); event WalletsMinted(); function ElepigToken() public { }",0,"subgraph cluster_1173_ElepigToken {
label=""ElepigToken"";
""1173_transferFrom"" [label=""transferFrom""];
""1173_ElepigToken"" [label=""ElepigToken""];
""1173_transfer"" [label=""transfer""];
""1173_fallback"" [label=""fallback""];
""1173_freeze"" [label=""freeze""];
""1173_unfreeze"" [label=""unfreeze""];
""1173_checkPermissions"" [label=""checkPermissions""];
""1173_mintWallets"" [label=""mintWallets""];
""1173_transfer"" -> ""1173_transfer"";
""1173_mintWallets"" -> ""1173_mint"";
""1173_transfer"" -> ""1173_checkPermissions"";
""1173_transferFrom"" -> ""1173_transferFrom"";
""1173_transferFrom"" -> ""1173_checkPermissions"";
""1173_mintWallets"" -> ""1173_onlyOwner"";
}
"
0x1cdc6b8fe34d313ee45fcd98d7391b6f564069a4.sol,ClassyCoin,"contract ClassyCoin is owned, token { uint256 public sellPrice; uint256 public buyPrice; mapping(address=>bool) public frozenAccount; event FrozenFunds(address target, bool frozen); uint256 public constant initialSupply = 100000000 * 10**16; uint8 public constant decimalUnits = 16; string public tokenName = ; string public tokenSymbol = ; function ClassyCoin() token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}",0,"subgraph cluster_710_ClassyCoin {
label=""ClassyCoin"";
""710_setPrices"" [label=""setPrices""];
""710_mintToken"" [label=""mintToken""];
""710_freezeAccount"" [label=""freezeAccount""];
""710_sell"" [label=""sell""];
""710_transfer"" [label=""transfer""];
""710_ClassyCoin"" [label=""ClassyCoin""];
""710_transferFrom"" [label=""transferFrom""];
""710_buy"" [label=""buy""];
""710_setPrices"" -> ""710_onlyOwner"";
""710_ClassyCoin"" -> ""710_token"";
""710_freezeAccount"" -> ""710_onlyOwner"";
""710_mintToken"" -> ""710_onlyOwner"";
}
"
0x35bab7165a301e99c75c3e59b48817856b4d5e5c.sol,BetCenter,"contract BetCenter is Ownable { mapping(bytes32 => Bet[]) public bets; mapping(bytes32 => bytes32[]) public gameIds; event LogCreateBet(address indexed dealerAddr, address betAddr, bytes32 indexed category, uint indexed startTime); function() payable public {}",0,"subgraph cluster_1524_BetCenter {
label=""BetCenter"";
""1524_createBet"" [label=""createBet""];
""1524_fallback"" [label=""fallback""];
""1524_getBetsByCategory"" [label=""getBetsByCategory""];
""1524_getGameIdsByCategory"" [label=""getGameIdsByCategory""];
}
"
0xdbdc91423ef9f7b9da9bf3a12fb2eadc77af072d.sol,TokenBooksAirdrop,contract TokenBooksAirdrop is Ownable{ using SafeMath for uint256; mapping (address => uint) public airdropSupplyMap; function TokenBooksAirdrop(){ },0,"subgraph cluster_380_TokenBooksAirdrop {
label=""TokenBooksAirdrop"";
""380_TokenBooksAirdrop"" [label=""TokenBooksAirdrop""];
""380_withdrawCoinToOwner"" [label=""withdrawCoinToOwner""];
""380_processFunding"" [label=""processFunding""];
""380_airdrop"" [label=""airdrop""];
""380_etherProceeds"" [label=""etherProceeds""];
""380_etherProceeds"" -> ""380_onlyOwner"";
""380_withdrawCoinToOwner"" -> ""380_onlyOwner"";
""380_withdrawCoinToOwner"" -> ""380_processFunding"";
""380_airdrop"" -> ""380_processFunding"";
""380_airdrop"" -> ""380_onlyOwner"";
}
"
0x0353837b32aa01d335becedc57a329b8ce0619a7.sol,Tacoin,"contract Tacoin is ERC223 { using SafeMath for uint; mapping(address => uint) balances; mapping (address => mapping (address => uint)) internal _allowances; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 10000000000000000000000000; function Tacoin ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10000000000000000000000000 ** uint256(18); balances[msg.sender] = totalSupply = 10000000000000000000000000; name = tokenName = ; symbol = tokenSymbol = ; }",0,"subgraph cluster_706_Tacoin {
label=""Tacoin"";
""706_isContract"" [label=""isContract""];
""706_decimals"" [label=""decimals""];
""706_approve"" [label=""approve""];
""706_transfer"" [label=""transfer""];
""706_allowance"" [label=""allowance""];
""706_totalSupply"" [label=""totalSupply""];
""706_Tacoin"" [label=""Tacoin""];
""706_balanceOf"" [label=""balanceOf""];
""706_transferToAddress"" [label=""transferToAddress""];
""706_transferFrom"" [label=""transferFrom""];
""706_symbol"" [label=""symbol""];
""706_name"" [label=""name""];
""706_transferToContract"" [label=""transferToContract""];
""706_transferToAddress"" -> ""706_balanceOf"";
""706_transfer"" -> ""706_transferToContract"";
""706_transferToContract"" -> ""706_balanceOf"";
""706_transfer"" -> ""706_isContract"";
""706_transfer"" -> ""706_transferToAddress"";
}
"
0xc4529ea3f838a7e27a673a87bfe844a5b8b1e4e2.sol,InterestTest,contract InterestTest is Base { address public creator; address public OwnerO; address public Owner1; uint256 public etherLimit = 2 ether; mapping (address => uint256) public balances; mapping (address => uint256) public interestPaid; function initOwner(address owner) { OwnerO = owner; },0,"subgraph cluster_340_InterestTest {
label=""InterestTest"";
""340_deposit"" [label=""deposit""];
""340_fallback"" [label=""fallback""];
""340_calculateInterest"" [label=""calculateInterest""];
""340_currentBalance"" [label=""currentBalance""];
""340_initOwner1"" [label=""initOwner1""];
""340_initOwner"" [label=""initOwner""];
""340_payout"" [label=""payout""];
""340_InterestTest"" [label=""InterestTest""];
""340_payInterest"" [label=""payInterest""];
""340_InterestTest"" -> ""340_initOwner1"";
""340_payInterest"" -> ""340_calculateInterest"";
""340_payInterest"" -> ""340_payout"";
""340_InterestTest"" -> ""340_initOwner"";
}
"
0xed574d920a0c152ca136717c79a352b83f3bb058.sol,TuniuToken,"contract TuniuToken is Ownable{ string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); function TuniuToken ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_345_TuniuToken {
label=""TuniuToken"";
""345_approveAndCall"" [label=""approveAndCall""];
""345__transfer"" [label=""_transfer""];
""345_transferOwnershipWithBalance"" [label=""transferOwnershipWithBalance""];
""345_transferFrom"" [label=""transferFrom""];
""345_TuniuToken"" [label=""TuniuToken""];
""345_transfer"" [label=""transfer""];
""345_approve"" [label=""approve""];
""345_transfer"" -> ""345__transfer"";
""345_transferOwnershipWithBalance"" -> ""345_onlyOwner"";
""345_transferFrom"" -> ""345__transfer"";
""345_approveAndCall"" -> ""345_approve"";
""345_transferOwnershipWithBalance"" -> ""345__transfer"";
}
"
0xd2cd43c4f6a6fa7bdfa44ee5bc486bae34f9a2aa.sol,Crowdsale,"contract Crowdsale is CrowdsaleBase { bool public requireCustomerId; bool public requiredSignedAddress; address public signerAddress; function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) CrowdsaleBase(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) { }",0,"subgraph cluster_1390_AllocatedCrowdsaleMixin {
label=""AllocatedCrowdsaleMixin"";
""1390_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""1390_AllocatedCrowdsaleMixin"" [label=""AllocatedCrowdsaleMixin""];
""1390_isBreakingCap"" [label=""isBreakingCap""];
""1390_assignTokens"" [label=""assignTokens""];
""1390_getTokensLeft"" [label=""getTokensLeft""];
""1390_isCrowdsaleFull"" -> ""1390_getTokensLeft"";
""1390_isBreakingCap"" -> ""1390_getTokensLeft"";
}
"
0x37e1160184f7dd29f00b78c050bf13224780b0b0.sol,YCCToken,"contract YCCToken { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function YCCToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",0,"subgraph cluster_338_YCCToken {
label=""YCCToken"";
""338__transfer"" [label=""_transfer""];
""338_burn"" [label=""burn""];
""338_transfer"" [label=""transfer""];
""338_YCCToken"" [label=""YCCToken""];
""338_burnFrom"" [label=""burnFrom""];
""338_approve"" [label=""approve""];
""338_transferFrom"" [label=""transferFrom""];
""338_approveAndCall"" [label=""approveAndCall""];
""338_approveAndCall"" -> ""338_approve"";
""338_transfer"" -> ""338__transfer"";
""338_transferFrom"" -> ""338__transfer"";
}
"
0x410af23334e26aa13c1f3e630bae006bdd313264.sol,ClearToken,"contract ClearToken is StandardToken { enum States { Initial, ValuationSet, Ico, Underfunded, Operational, Paused }",0,"subgraph cluster_1608_ClearToken {
label=""ClearToken"";
""1608_ClearToken"" [label=""ClearToken""];
""1608_rescueToken"" [label=""rescueToken""];
""1608_issueTokensToUser"" [label=""issueTokensToUser""];
""1608_updateEthICOVariables"" [label=""updateEthICOVariables""];
""1608_endICO"" [label=""endICO""];
""1608_resumeICO"" [label=""resumeICO""];
""1608_startICO"" [label=""startICO""];
""1608_moveToState"" [label=""moveToState""];
""1608_requestRefund"" [label=""requestRefund""];
""1608_abort"" [label=""abort""];
""1608_anyoneEndICO"" [label=""anyoneEndICO""];
""1608_addPresaleAmount"" [label=""addPresaleAmount""];
""1608_updateETHNZD"" [label=""updateETHNZD""];
""1608_fallback"" [label=""fallback""];
""1608_addToWhitelist"" [label=""addToWhitelist""];
""1608_finishMinting"" [label=""finishMinting""];
""1608_transfer"" [label=""transfer""];
""1608_requestPayout"" [label=""requestPayout""];
""1608_balanceOf"" [label=""balanceOf""];
""1608_pause"" [label=""pause""];
""1608_calcBonus"" [label=""calcBonus""];
""1608_transferFrom"" [label=""transferFrom""];
""1608_endICO"" -> ""1608_onlyStateControl"";
""1608_ClearToken"" -> ""1608_moveToState"";
""1608_addToWhitelist"" -> ""1608_onlyWhitelist"";
""1608_requestPayout"" -> ""1608_requireState"";
""1608_updateEthICOVariables"" -> ""1608_moveToState"";
""1608_resumeICO"" -> ""1608_onlyStateControl"";
""1608_updateETHNZD"" -> ""1608_onlyTokenAssignmentControl"";
""1608_anyoneEndICO"" -> ""1608_moveToState"";
""1608_rescueToken"" -> ""1608_requireState"";
""1608_endICO"" -> ""1608_finishMinting"";
""1608_anyoneEndICO"" -> ""1608_requireState"";
""1608_transferFrom"" -> ""1608_transferFrom"";
""1608_requestPayout"" -> ""1608_onlyWithdraw"";
""1608_abort"" -> ""1608_onlyStateControl"";
""1608_anyoneEndICO"" -> ""1608_finishMinting"";
""1608_abort"" -> ""1608_requireState"";
""1608_updateEthICOVariables"" -> ""1608_onlyStateControl"";
""1608_abort"" -> ""1608_moveToState"";
""1608_addPresaleAmount"" -> ""1608_onlyTokenAssignmentControl"";
""1608_transfer"" -> ""1608_transfer"";
""1608_resumeICO"" -> ""1608_requireState"";
""1608_addPresaleAmount"" -> ""1608_issueTokensToUser"";
""1608_transfer"" -> ""1608_requireState"";
""1608_rescueToken"" -> ""1608_onlyTokenAssignmentControl"";
""1608_pause"" -> ""1608_moveToState"";
""1608_endICO"" -> ""1608_moveToState"";
""1608_pause"" -> ""1608_onlyStateControl"";
""1608_startICO"" -> ""1608_moveToState"";
""1608_transferFrom"" -> ""1608_requireState"";
""1608_fallback"" -> ""1608_calcBonus"";
""1608_pause"" -> ""1608_requireState"";
""1608_startICO"" -> ""1608_requireState"";
""1608_endICO"" -> ""1608_requireState"";
""1608_resumeICO"" -> ""1608_moveToState"";
""1608_updateETHNZD"" -> ""1608_requireState"";
""1608_fallback"" -> ""1608_issueTokensToUser"";
""1608_fallback"" -> ""1608_requireState"";
""1608_startICO"" -> ""1608_onlyStateControl"";
""1608_requestRefund"" -> ""1608_requireState"";
}
"
0xa304100e0d17a972f34ed8a961034ce2fc47f9ca.sol,FomoBet,contract FomoBet { using SafeMath for uint; struct bet { address maker; address taker; uint256 round; bool longOrShort; bool validated; uint256 betEnd; uint256 betSize; },0,"subgraph cluster_1090_FomoBet {
label=""FomoBet"";
""1090_vaultToWallet"" [label=""vaultToWallet""];
""1090_fallback"" [label=""fallback""];
""1090_getbetsInfo"" [label=""getbetsInfo""];
""1090_fomoroundInfo"" [label=""fomoroundInfo""];
""1090_addToExistingOffer"" [label=""addToExistingOffer""];
""1090_removeFromExistingOffer"" [label=""removeFromExistingOffer""];
""1090_fomoround"" [label=""fomoround""];
""1090_getOfferInfo"" [label=""getOfferInfo""];
""1090_validateBet"" [label=""validateBet""];
""1090_death"" [label=""death""];
""1090_setupOffer"" [label=""setupOffer""];
""1090_takeOffer"" [label=""takeOffer""];
""1090_validateBet"" -> ""1090_fomoroundInfo"";
}
"
0x86789b2de83b9a93f89f8c2cb14d622cd73515e9.sol,CrowdsaleToken,"contract CrowdsaleToken is StandardToken, Ownable { using SafeMath for uint256; address public crowdsale; mapping (address => uint256) public waiting; uint256 public saled; event Sale(address indexed to, uint256 value); event Release(address indexed to); event Reject(address indexed to); event SetCrowdsale(address indexed addr); function setCrowdsale(address _addr) onlyOwner public { crowdsale = _addr; SetCrowdsale(_addr); }",0,"subgraph cluster_994_CrowdsaleToken {
label=""CrowdsaleToken"";
""994_reject"" [label=""reject""];
""994_setCrowdsale"" [label=""setCrowdsale""];
""994_sale"" [label=""sale""];
""994_release"" [label=""release""];
""994_reject"" -> ""994_onlyOwner"";
""994_release"" -> ""994_onlyOwner"";
""994_sale"" -> ""994_onlyCrowdsale"";
""994_setCrowdsale"" -> ""994_onlyOwner"";
}
"
0xbfc70f2151b471794422fd06480933192f3da674.sol,SIE_DE_301202,"contract SIE_DE_301202 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 10972781423493000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",0,"subgraph cluster_189_SIE_DE_301202 {
label=""SIE_DE_301202"";
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
}
"
0xefa9d26bca9dd8baafda25ab249c85bb57bb9feb.sol,Token,"contract Token is TokenI, TokenAbout { using SafeMath for uint256; address public owner; string public techProvider = ""WeYii Tech(https: bool public transfersEnabled = true; event Burn(address indexed from, uint256 value); constructor(uint256 initialSupply, string tokenName, string tokenSymbol, address initialOwner) public { name = tokenName; symbol = tokenSymbol; owner = initialOwner; totalSupply = initialSupply*uint256(10)**decimals; balanceOf[owner] = totalSupply; }",0,"subgraph cluster_1259_Token {
label=""Token"";
""1259_approveAndCall"" [label=""approveAndCall""];
""1259_unApprove"" [label=""unApprove""];
""1259_transferMulti"" [label=""transferMulti""];
""1259_transferFrom"" [label=""transferFrom""];
""1259_enableTransfers"" [label=""enableTransfers""];
""1259_changeOwner"" [label=""changeOwner""];
""1259_transfer"" [label=""transfer""];
""1259_destroyTokens"" [label=""destroyTokens""];
""1259_constructor"" [label=""constructor""];
""1259_transferMultiSameValue"" [label=""transferMultiSameValue""];
""1259_generateTokens"" [label=""generateTokens""];
""1259_approve"" [label=""approve""];
""1259_fallback"" [label=""fallback""];
""1259_transferFrom"" -> ""1259_transable"";
""1259_destroyTokens"" -> ""1259_userEnough"";
""1259_fallback"" -> ""1259_isContract"";
""1259_transferMultiSameValue"" -> ""1259_transable"";
""1259_transferFrom"" -> ""1259_realUser"";
""1259_transfer"" -> ""1259_moreThanZero"";
""1259_transfer"" -> ""1259_realUser"";
""1259_transfer"" -> ""1259_transable"";
""1259_generateTokens"" -> ""1259_userEnough"";
""1259_transferFrom"" -> ""1259_moreThanZero"";
""1259_unApprove"" -> ""1259_moreThanZero"";
""1259_generateTokens"" -> ""1259_onlyController"";
""1259_approveAndCall"" -> ""1259_approve"";
""1259_enableTransfers"" -> ""1259_onlyController"";
""1259_unApprove"" -> ""1259_transable"";
""1259_changeOwner"" -> ""1259_onlyOwner"";
""1259_destroyTokens"" -> ""1259_onlyController"";
""1259_approveAndCall"" -> ""1259_transable"";
""1259_transferMulti"" -> ""1259_transable"";
""1259_approve"" -> ""1259_transable"";
}
"
0x1f35a281036be57e64e7e7a2a556b4f888a1b829.sol,MuzikaCoin,"contract MuzikaCoin is MintableToken, Pausable { string public name = ; string public symbol = ; uint8 public decimals = 18; event Burn(address indexed burner, uint256 value); constructor(uint256 initialSupply) public { totalSupply_ = initialSupply; balances[msg.sender] = initialSupply; emit Transfer(address(0), msg.sender, initialSupply); }",0,"subgraph cluster_1016_MuzikaCoin {
label=""MuzikaCoin"";
""1016_constructor"" [label=""constructor""];
""1016_increaseApprovalAndCall"" [label=""increaseApprovalAndCall""];
""1016_transferFrom"" [label=""transferFrom""];
""1016__burn"" [label=""_burn""];
""1016_transferAndCall"" [label=""transferAndCall""];
""1016_transfer"" [label=""transfer""];
""1016_tokenDrain"" [label=""tokenDrain""];
""1016_burn"" [label=""burn""];
""1016_transferFrom"" -> ""1016_whenNotPaused"";
""1016_burn"" -> ""1016_onlyOwner"";
""1016_transferAndCall"" -> ""1016_transfer"";
""1016_burn"" -> ""1016__burn"";
""1016_transfer"" -> ""1016_whenNotPaused"";
""1016_transferFrom"" -> ""1016_transferFrom"";
""1016_increaseApprovalAndCall"" -> ""1016_increaseApproval"";
""1016_transfer"" -> ""1016_transfer"";
""1016_tokenDrain"" -> ""1016_onlyOwner"";
}
"
0x882da60a19c67e481481bace4c0aa93080cde3d7.sol,EthTranchePricing,"contract EthTranchePricing is PricingStrategy, Ownable, SafeMathLib { uint public constant MAX_TRANCHES = 10; mapping (address => uint) public preicoAddresses; struct Tranche { uint amount; uint price; }",0,"subgraph cluster_2873_EthTranchePricing {
label=""EthTranchePricing"";
""2873_fallback"" [label=""fallback""];
""2873_getCurrentPrice"" [label=""getCurrentPrice""];
""2873_calculatePrice"" [label=""calculatePrice""];
""2873_getPricingStartsAt"" [label=""getPricingStartsAt""];
""2873_getTranche"" [label=""getTranche""];
""2873_getPricingEndsAt"" [label=""getPricingEndsAt""];
""2873_EthTranchePricing"" [label=""EthTranchePricing""];
""2873_getFirstTranche"" [label=""getFirstTranche""];
""2873_getCurrentTranche"" [label=""getCurrentTranche""];
""2873_setPreicoAddress"" [label=""setPreicoAddress""];
""2873_isSane"" [label=""isSane""];
""2873_getLastTranche"" [label=""getLastTranche""];
""2873_calculatePrice"" -> ""2873_safeMul"";
""2873_getCurrentPrice"" -> ""2873_getCurrentTranche"";
""2873_calculatePrice"" -> ""2873_getCurrentPrice"";
""2873_setPreicoAddress"" -> ""2873_onlyOwner"";
""2873_getPricingStartsAt"" -> ""2873_getFirstTranche"";
""2873_getPricingEndsAt"" -> ""2873_getLastTranche"";
}
"
0xb487d45f2d2a93b84e8f8c5074e256896bbf7d9c.sol,Functional,"contract Functional { function parseInt(string _a, uint _b) internal pure returns (uint) { bytes memory bresult = bytes(_a); uint mint = 0; bool decimals = false; for (uint i=0; i<bresult.length; i++){ if ((bresult[i] >= 48)&&(bresult[i] <= 57)){ if (decimals){ if (_b == 0) break; else _b--; }",0,"subgraph cluster_1134_Functional {
label=""Functional"";
""1134_parseInt"" [label=""parseInt""];
""1134_timenow"" [label=""timenow""];
""1134_strConcat"" [label=""strConcat""];
""1134_uint2str"" [label=""uint2str""];
}
"
0x0d42fb07a685d2ff9d6bb93df0389946192cd322.sol,Avatar,"contract Avatar is MintableToken { string public constant name = ; string public constant symbol = ; bool public transferEnabled = false; uint8 public constant decimals = 18; uint256 public rate = 100000; uint256 public constant hardCap = 30000 ether; uint256 public weiFounded = 0; address public approvedUser = 0x48BAa849622fb4481c0C4D9E7a68bcE6b63b0213; address public wallet = 0x48BAa849622fb4481c0C4D9E7a68bcE6b63b0213; uint64 public dateStart = 1520348400; bool public icoFinished = false; uint256 public constant maxTokenToBuy = 4392000000 ether; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 amount); function transfer(address _to, uint _value) whenNotPaused canTransfer returns (bool) { require(_to != address(this) && _to != address(0)); return super.transfer(_to, _value); }",0,"subgraph cluster_1069_Avatar {
label=""Avatar"";
""1069_finishIco"" [label=""finishIco""];
""1069_transfer"" [label=""transfer""];
""1069_buyTokens"" [label=""buyTokens""];
""1069_changeWallet"" [label=""changeWallet""];
""1069_fallback"" [label=""fallback""];
""1069_setApprovedUser"" [label=""setApprovedUser""];
""1069_approve"" [label=""approve""];
""1069_transferFrom"" [label=""transferFrom""];
""1069_changeRate"" [label=""changeRate""];
""1069_enableTransfer"" [label=""enableTransfer""];
""1069_forwardFunds"" [label=""forwardFunds""];
""1069_changeWallet"" -> ""1069_onlyOwner"";
""1069_buyTokens"" -> ""1069_mintInternal"";
""1069_fallback"" -> ""1069_buyTokens"";
""1069_transferFrom"" -> ""1069_transferFrom"";
""1069_transfer"" -> ""1069_canTransfer"";
""1069_approve"" -> ""1069_whenNotPaused"";
""1069_approve"" -> ""1069_approve"";
""1069_transfer"" -> ""1069_transfer"";
""1069_finishIco"" -> ""1069_onlyOwner"";
""1069_transfer"" -> ""1069_whenNotPaused"";
""1069_setApprovedUser"" -> ""1069_onlyOwner"";
""1069_changeRate"" -> ""1069_onlyOwnerOrApproved"";
""1069_transferFrom"" -> ""1069_whenNotPaused"";
""1069_transferFrom"" -> ""1069_canTransfer"";
""1069_buyTokens"" -> ""1069_canBuyTokens"";
""1069_buyTokens"" -> ""1069_whenNotPaused"";
""1069_buyTokens"" -> ""1069_forwardFunds"";
""1069_enableTransfer"" -> ""1069_onlyOwner"";
}
"
0x1f36c5611a402876b75dd3a6595c6ee4718f794c.sol,CyberClassicToken,"contract CyberClassicToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 100000000000000000; uint256 public totalDistributed = 100000000000000; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 750000000000000; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_CyberClassicToken {
label=""CyberClassicToken"";
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_approve"" [label=""approve""];
""944_balanceOf"" [label=""balanceOf""];
""944_fallback"" [label=""fallback""];
""944_getTokens"" [label=""getTokens""];
""944_distr"" [label=""distr""];
""944_burn"" [label=""burn""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_transferFrom"" [label=""transferFrom""];
""944_finishDistribution"" [label=""finishDistribution""];
""944_withdraw"" [label=""withdraw""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_transfer"" [label=""transfer""];
""944_allowance"" [label=""allowance""];
""944_CyberClassicToken"" [label=""CyberClassicToken""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_transferOwnership"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_getTokens"" -> ""944_distr"";
""944_getTokens"" -> ""944_canDistr"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_CyberClassicToken"" -> ""944_distr"";
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
""944_finishDistribution"" -> ""944_onlyOwner"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_distr"" -> ""944_canDistr"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_burn"" -> ""944_onlyOwner"";
""944_fallback"" -> ""944_getTokens"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
}
"
0x5122a789a1b9779f840bebaaf73d36ff735c5874.sol,ParcoExchange,"contract ParcoExchange is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 10000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_930_ParcoExchange {
label=""ParcoExchange"";
""930_finishDistribution"" [label=""finishDistribution""];
""930_getTokens"" [label=""getTokens""];
""930_burn"" [label=""burn""];
""930_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""930_transfer"" [label=""transfer""];
""930_distr"" [label=""distr""];
""930_getTokenBalance"" [label=""getTokenBalance""];
""930_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""930_balanceOf"" [label=""balanceOf""];
""930_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""930_transferOwnership"" [label=""transferOwnership""];
""930_updateTokensPerEth"" [label=""updateTokensPerEth""];
""930_transferFrom"" [label=""transferFrom""];
""930_doAirdrop"" [label=""doAirdrop""];
""930_allowance"" [label=""allowance""];
""930_fallback"" [label=""fallback""];
""930_withdraw"" [label=""withdraw""];
""930_approve"" [label=""approve""];
""930_adminClaimAirdrop"" -> ""930_onlyOwner"";
""930_transfer"" -> ""930_onlyPayloadSize"";
""930_getTokens"" -> ""930_distr"";
""930_burn"" -> ""930_onlyOwner"";
""930_adminClaimAirdropMultiple"" -> ""930_doAirdrop"";
""930_transferFrom"" -> ""930_onlyPayloadSize"";
""930_withdrawAltcoinTokens"" -> ""930_onlyOwner"";
""930_adminClaimAirdrop"" -> ""930_doAirdrop"";
""930_distr"" -> ""930_canDistr"";
""930_fallback"" -> ""930_getTokens"";
""930_getTokens"" -> ""930_canDistr"";
""930_transferOwnership"" -> ""930_onlyOwner"";
""930_withdraw"" -> ""930_onlyOwner"";
""930_adminClaimAirdropMultiple"" -> ""930_onlyOwner"";
""930_updateTokensPerEth"" -> ""930_onlyOwner"";
""930_finishDistribution"" -> ""930_onlyOwner"";
""930_finishDistribution"" -> ""930_canDistr"";
}
"
0x00000000000da14c27c155bb7c1ac9bd7519eb3b.sol,DepositAddressRegistrar,contract DepositAddressRegistrar { Registry public registry; bytes32 public constant IS_DEPOSIT_ADDRESS = ; event DepositAddressRegistered(address registeredAddress); constructor(address _registry) public { registry = Registry(_registry); },0,"subgraph cluster_99_DepositAddressRegistrar {
label=""DepositAddressRegistrar"";
""99_constructor"" [label=""constructor""];
""99_registerDepositAddress"" [label=""registerDepositAddress""];
""99_fallback"" [label=""fallback""];
""99_fallback"" -> ""99_registerDepositAddress"";
}
"
0x0248f089a622b74cebaa62573605af9a44966bf1.sol,Ethraffle,contract Ethraffle { struct Contestant { address addr; uint raffleId; },0,"subgraph cluster_444_Ethraffle {
label=""Ethraffle"";
""444_Ethraffle"" [label=""Ethraffle""];
""444_endRaffle"" [label=""endRaffle""];
""444_kill"" [label=""kill""];
""444_buyTickets"" [label=""buyTickets""];
""444_getRefund"" [label=""getRefund""];
""444_fallback"" [label=""fallback""];
""444_togglePause"" [label=""togglePause""];
""444_chooseWinner"" [label=""chooseWinner""];
""444_buyTickets"" -> ""444_chooseWinner"";
""444_fallback"" -> ""444_buyTickets"";
}
"
0x00685230359bdb9e16704e1d3918b553e9a015e2.sol,Functions,contract Functions { bytes32[] public randomHashes; function fillWithHashes() public { require(randomHashes.length == 0); for (uint i = block.number - 100; i < block.number; i++) { randomHashes.push(blockhash(i)); },0,"subgraph cluster_2249_Functions {
label=""Functions"";
""2249_calculateSeed"" [label=""calculateSeed""];
""2249_pickRandomAssetPosition"" [label=""pickRandomAssetPosition""];
""2249_getFinalSeed"" [label=""getFinalSeed""];
""2249_decodeAssets"" [label=""decodeAssets""];
""2249_pickRandomAssets"" [label=""pickRandomAssets""];
""2249_getImage"" [label=""getImage""];
""2249_fillWithHashes"" [label=""fillWithHashes""];
""2249_toHex"" [label=""toHex""];
""2249_getRandomHashesLength"" [label=""getRandomHashesLength""];
""2249_getImage"" -> ""2249_decodeAssets"";
""2249_pickRandomAssets"" -> ""2249_decodeAssets"";
""2249_getImage"" -> ""2249_pickRandomAssetPosition"";
}
"
0x5caeebfab3cd8655e04692351237efb7462c9d8f.sol,VfSE_Lottery,"contract VfSE_Lottery is Ownable { using SafeMath for uint256; address[] private players; address[] public winners; uint256[] public payments; uint256 private feeValue; address public lastWinner; address public authorizedToDraw; address[] private last10Winners = [0,0,0,0,0,0,0,0,0,0]; uint256 public lastPayOut; uint256 public amountRised; address public house; uint256 public round; uint256 public playValue; uint256 public roundEnds; uint256 public roundDuration = 1 days; bool public stopped; address public SecondAddressBalance = 0xFBb1b73C4f0BDa4f67dcA266ce6Ef42f520fBB98; address public ThirdAddressBalance = 0x3f5CE5FBFe3E9af3971dD833D26bA9b5C936f0bE; address public FourthAddressBalance = 0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0; mapping (address => uint256) public payOuts; uint256 private _seed; function bitSlice(uint256 n, uint256 bits, uint256 slot) private pure returns(uint256) { uint256 offset = slot * bits; uint256 mask = uint256((2**bits) - 1) << offset; return uint256((n & mask) >> offset); }",0,"subgraph cluster_746_VfSE_Lottery {
label=""VfSE_Lottery"";
""746_getWinnerCount"" [label=""getWinnerCount""];
""746_constructor"" [label=""constructor""];
""746_getPlayersCount"" [label=""getPlayersCount""];
""746_getPlayers"" [label=""getPlayers""];
""746_setPlayValue"" [label=""setPlayValue""];
""746_getPayOutAmount"" [label=""getPayOutAmount""];
""746_random"" [label=""random""];
""746_maxRandom"" [label=""maxRandom""];
""746_bitSlice"" [label=""bitSlice""];
""746_drawNow"" [label=""drawNow""];
""746_produceRandom"" [label=""produceRandom""];
""746_fallback"" [label=""fallback""];
""746_getFourthAddressBalance"" [label=""getFourthAddressBalance""];
""746_setFee"" [label=""setFee""];
""746_getBalance"" [label=""getBalance""];
""746_play"" [label=""play""];
""746_last10"" [label=""last10""];
""746_setSecondAddressBalance"" [label=""setSecondAddressBalance""];
""746_draw"" [label=""draw""];
""746_setHouseAddress"" [label=""setHouseAddress""];
""746_setAuthorizedToDraw"" [label=""setAuthorizedToDraw""];
""746_stopLottery"" [label=""stopLottery""];
""746_getSecondAddressBalance"" [label=""getSecondAddressBalance""];
""746_setThirdAddressBalance"" [label=""setThirdAddressBalance""];
""746_getThirdAddressBalance"" [label=""getThirdAddressBalance""];
""746_setFourthAddressBalance"" [label=""setFourthAddressBalance""];
""746_setHouseAddress"" -> ""746_onlyOwner"";
""746_setFee"" -> ""746_onlyOwner"";
""746_setThirdAddressBalance"" -> ""746_onlyOwner"";
""746_setFourthAddressBalance"" -> ""746_onlyOwner"";
""746_stopLottery"" -> ""746_onlyOwner"";
""746_setPlayValue"" -> ""746_onlyOwner"";
""746_getBalance"" -> ""746_onlyOwner"";
""746_drawNow"" -> ""746_draw"";
""746_setAuthorizedToDraw"" -> ""746_onlyOwner"";
""746_random"" -> ""746_maxRandom"";
""746_draw"" -> ""746_getPayOutAmount"";
""746_fallback"" -> ""746_play"";
""746_produceRandom"" -> ""746_random"";
""746_play"" -> ""746_draw"";
""746_setSecondAddressBalance"" -> ""746_onlyOwner"";
""746_draw"" -> ""746_produceRandom"";
}
"
0x2eb067b839bb553e109eeeb215a08fe8cc799080.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; using SafeERC20 for ERC20; ERC20 public token; address public wallet; uint256 public rate; uint256 public weiRaised; event TokenPurchase( address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount ); constructor(uint256 _rate, address _wallet, ERC20 _token) public { require(_rate > 0); require(_wallet != address(0)); require(_token != address(0)); rate = _rate; wallet = _wallet; token = _token; }",0,"subgraph cluster_2075_MintAndLockCrowdsale {
label=""MintAndLockCrowdsale"";
""2075__getBonusAmount"" [label=""_getBonusAmount""];
""2075_buyTokens"" [label=""buyTokens""];
""2075_constructor"" [label=""constructor""];
""2075__deliverTokens"" [label=""_deliverTokens""];
""2075_buyTokens"" -> ""2075__preValidatePurchase"";
""2075_buyTokens"" -> ""2075__postValidatePurchase"";
""2075_constructor"" -> ""2075__getBonusAmount"";
""2075__deliverTokens"" -> ""2075__getBonusAmount"";
""2075_buyTokens"" -> ""2075__getTokenAmount"";
""2075_buyTokens"" -> ""2075__getBonusAmount"";
""2075_buyTokens"" -> ""2075__processPurchase"";
""2075_buyTokens"" -> ""2075__updatePurchasingState"";
""2075_buyTokens"" -> ""2075__forwardFunds"";
}
"
0x369d0db2c7d56b095d758379b75f64085953528a.sol,Pausable,contract Pausable is owned { event Pause(); event Unpause(); bool public paused = true; modifier whenNotPaused() { require(!paused); _; },0,"subgraph cluster_463_Pausable {
label=""Pausable"";
""463_pause"" [label=""pause""];
""463_unpause"" [label=""unpause""];
""463_pause"" -> ""463_whenNotPaused"";
""463_unpause"" -> ""463_whenPaused"";
""463_pause"" -> ""463_onlyOwner"";
""463_unpause"" -> ""463_onlyOwner"";
}
"
0xcf321c5e50ea2222843fa4f0124cc2d1e0110aea.sol,Lescovex,"contract Lescovex is Ownable { uint256 public totalSupply; using SafeMath for uint256; mapping(address => uint256) balances; mapping(address => uint256) holded; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function transfer(address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[msg.sender]); require(block.timestamp>blockEndICO || msg.sender==owner); balances[msg.sender] = balances[msg.sender].sub(_value); holded[_to]=block.number; balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); return true; }",0,"subgraph cluster_945_Lescovex {
label=""Lescovex"";
""945_withdrawReward"" [label=""withdrawReward""];
""945_approve"" [label=""approve""];
""945_burn"" [label=""burn""];
""945_transfer"" [label=""transfer""];
""945_Lescovex"" [label=""Lescovex""];
""945_balanceOf"" [label=""balanceOf""];
""945_allowance"" [label=""allowance""];
""945_approveAndCall"" [label=""approveAndCall""];
""945_decreaseApproval"" [label=""decreaseApproval""];
""945_transferBuy"" [label=""transferBuy""];
""945_buy"" [label=""buy""];
""945_deposit"" [label=""deposit""];
""945_holdedOf"" [label=""holdedOf""];
""945_withdraw"" [label=""withdraw""];
""945_transferFrom"" [label=""transferFrom""];
""945_fallback"" [label=""fallback""];
""945_increaseApproval"" [label=""increaseApproval""];
""945_decreaseApproval"" -> ""945_onlyOwner"";
""945_deposit"" -> ""945_status"";
""945_increaseApproval"" -> ""945_onlyOwner"";
""945_burn"" -> ""945_onlyOwner"";
""945_approveAndCall"" -> ""945_onlyOwner"";
""945_approve"" -> ""945_onlyOwner"";
""945_withdrawReward"" -> ""945_status"";
""945_buy"" -> ""945_transferBuy"";
""945_fallback"" -> ""945_buy"";
""945_withdraw"" -> ""945_onlyOwner"";
""945_approveAndCall"" -> ""945_approve"";
""945_buy"" -> ""945_status"";
}
"
0xcefa3e88393cf17c9b4dc6c9fe5357dfae8036d6.sol,PermissionManager,contract PermissionManager is Ownable { mapping (address => bool) permittedAddresses; function addAddress(address newAddress) public onlyOwner { permittedAddresses[newAddress] = true; },0,"subgraph cluster_107_PermissionManager {
label=""PermissionManager"";
""107_removeAddress"" [label=""removeAddress""];
""107_isPermitted"" [label=""isPermitted""];
""107_addAddress"" [label=""addAddress""];
""107_removeAddress"" -> ""107_onlyOwner"";
""107_addAddress"" -> ""107_onlyOwner"";
}
"
0xc48e4349d482296c32bb7ca430466f324c694d34.sol,RozowkaCoin,"contract RozowkaCoin { string public name = ; string public symbol = ; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function RozowkaCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = 10000000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = 10000000000000; name = ; symbol = ; }",0,"subgraph cluster_363_RozowkaCoin {
label=""RozowkaCoin"";
""363_RozowkaCoin"" [label=""RozowkaCoin""];
""363_approve"" [label=""approve""];
""363__transfer"" [label=""_transfer""];
""363_transferFrom"" [label=""transferFrom""];
""363_burn"" [label=""burn""];
""363_burnFrom"" [label=""burnFrom""];
""363_transfer"" [label=""transfer""];
""363_approveAndCall"" [label=""approveAndCall""];
""363_approveAndCall"" -> ""363_approve"";
""363_transfer"" -> ""363__transfer"";
""363_transferFrom"" -> ""363__transfer"";
}
"
0x54053ea92b9366182dbbf3e4583c8a5496bb2903.sol,CCD_KOHLE_3_20190411,"contract CCD_KOHLE_3_20190411 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",0,"subgraph cluster_189_CCD_KOHLE_3_20190411 {
label=""CCD_KOHLE_3_20190411"";
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0x2c3f2451143e8cec0341b064fcb8fe137ce5d6dd.sol,Mythereum,contract Mythereum is Manageable { using Maths for uint256; struct Edition { string name; uint256 sales; uint256 maxSales; uint8 packSize; uint256 packPrice; uint256 packPriceIncrease; },0,"subgraph cluster_1856_Mythereum {
label=""Mythereum"";
""1856_grantPromoPack"" [label=""grantPromoPack""];
""1856_burnMythexTokens"" [label=""burnMythexTokens""];
""1856_removeShareholder"" [label=""removeShareholder""];
""1856_buyPack"" [label=""buyPack""];
""1856_grantAdditionalShares"" [label=""grantAdditionalShares""];
""1856_improveCard"" [label=""improveCard""];
""1856_setEditionPackPriceIncrease"" [label=""setEditionPackPriceIncrease""];
""1856_buyPackWithERC20Tokens"" [label=""buyPackWithERC20Tokens""];
""1856_setMythexTokenAddress"" [label=""setMythexTokenAddress""];
""1856_transferERC20Tokens"" [label=""transferERC20Tokens""];
""1856_removeVIP"" [label=""removeVIP""];
""1856_upgradeCardShield"" [label=""upgradeCardShield""];
""1856_setEditionMaxSales"" [label=""setEditionMaxSales""];
""1856_upgradeCardDamage"" [label=""upgradeCardDamage""];
""1856_setEditionPackSize"" [label=""setEditionPackSize""];
""1856_claim"" [label=""claim""];
""1856_addShareholder"" [label=""addShareholder""];
""1856_setEditionName"" [label=""setEditionName""];
""1856_setCardTokenAddress"" [label=""setCardTokenAddress""];
""1856__improveCard"" [label=""_improveCard""];
""1856_forfeitShares"" [label=""forfeitShares""];
""1856_setEditionPackPrice"" [label=""setEditionPackPrice""];
""1856__processERC20TokenPackPurchase"" [label=""_processERC20TokenPackPurchase""];
""1856_transferEntireStake"" [label=""transferEntireStake""];
""1856_Mythereum"" [label=""Mythereum""];
""1856_grantXPTokens"" [label=""grantXPTokens""];
""1856_addVIP"" [label=""addVIP""];
""1856_fallback"" [label=""fallback""];
""1856_receiveApproval"" [label=""receiveApproval""];
""1856_transferShares"" [label=""transferShares""];
""1856__deliverPack"" [label=""_deliverPack""];
""1856_grantMythexTokens"" [label=""grantMythexTokens""];
""1856_setEditionSales"" [label=""setEditionSales""];
""1856__claim"" [label=""_claim""];
""1856__forfeitShares"" [label=""_forfeitShares""];
""1856_setXPTokenAddress"" [label=""setXPTokenAddress""];
""1856_setGameHostAddress"" [label=""setGameHostAddress""];
""1856_burnXPTokens"" [label=""burnXPTokens""];
""1856_setTokenAcceptanceRate"" [label=""setTokenAcceptanceRate""];
""1856_grantAdditionalShares"" -> ""1856_onlyOwner"";
""1856__processERC20TokenPackPurchase"" -> ""1856__deliverPack"";
""1856_buyPack"" -> ""1856__deliverPack"";
""1856_setCardTokenAddress"" -> ""1856_onlyManagement"";
""1856_addVIP"" -> ""1856_onlyManagement"";
""1856_burnXPTokens"" -> ""1856_onlyHosts"";
""1856_transferEntireStake"" -> ""1856_transferShares"";
""1856_setEditionSales"" -> ""1856_onlyManagement"";
""1856_grantXPTokens"" -> ""1856_onlyHosts"";
""1856_addShareholder"" -> ""1856_onlyOwner"";
""1856_upgradeCardShield"" -> ""1856_burnMythexTokens"";
""1856_setEditionPackPriceIncrease"" -> ""1856_onlyManagement"";
""1856_grantPromoPack"" -> ""1856_onlyManagement"";
""1856_setEditionMaxSales"" -> ""1856_onlyManagement"";
""1856_transferERC20Tokens"" -> ""1856_onlyManagement"";
""1856_grantMythexTokens"" -> ""1856_onlyHosts"";
""1856_setMythexTokenAddress"" -> ""1856_onlyManagement"";
""1856_removeShareholder"" -> ""1856_onlyOwner"";
""1856_setEditionName"" -> ""1856_onlyManagement"";
""1856_upgradeCardShield"" -> ""1856__improveCard"";
""1856_upgradeCardDamage"" -> ""1856__improveCard"";
""1856_burnMythexTokens"" -> ""1856_onlyHosts"";
""1856_improveCard"" -> ""1856__improveCard"";
""1856_removeShareholder"" -> ""1856__claim"";
""1856_receiveApproval"" -> ""1856__processERC20TokenPackPurchase"";
""1856_removeShareholder"" -> ""1856__forfeitShares"";
""1856_buyPackWithERC20Tokens"" -> ""1856__processERC20TokenPackPurchase"";
""1856_improveCard"" -> ""1856_onlyManagement"";
""1856_forfeitShares"" -> ""1856__forfeitShares"";
""1856_claim"" -> ""1856__claim"";
""1856_removeVIP"" -> ""1856_onlyManagement"";
""1856_setXPTokenAddress"" -> ""1856_onlyManagement"";
""1856_setTokenAcceptanceRate"" -> ""1856_onlyManagement"";
""1856_upgradeCardDamage"" -> ""1856_burnMythexTokens"";
""1856_grantPromoPack"" -> ""1856__deliverPack"";
""1856_setGameHostAddress"" -> ""1856_onlyManagement"";
""1856_setEditionPackPrice"" -> ""1856_onlyManagement"";
""1856_setEditionPackSize"" -> ""1856_onlyManagement"";
}
"
0x27798734d18d63b963137a360cadff807d479e50.sol,ZTTBToken,"contract ZTTBToken is owned, TokenERC20 { uint256 public sellPrice = 0.00000001 ether ; uint256 public buyPrice = 0.00000001 ether ; mapping (address => bool) public _frozenAccount; event FrozenFunds(address target, bool frozen); function ZTTBToken( uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimal ) TokenERC20(initialSupply, tokenName, tokenSymbol,decimal) public { _balances[msg.sender] = _supply; }",0,"subgraph cluster_734_ZTTBToken {
label=""ZTTBToken"";
""734_setPrices"" [label=""setPrices""];
""734__transfer"" [label=""_transfer""];
""734_mintToken"" [label=""mintToken""];
""734_ZTTBToken"" [label=""ZTTBToken""];
""734_buy"" [label=""buy""];
""734_sell"" [label=""sell""];
""734_freezeAccount"" [label=""freezeAccount""];
""734_transfer"" [label=""transfer""];
""734_buy"" -> ""734__transfer"";
""734_mintToken"" -> ""734_onlyOwner"";
""734_ZTTBToken"" -> ""734_TokenERC20"";
""734_freezeAccount"" -> ""734_onlyOwner"";
""734_sell"" -> ""734__transfer"";
""734_setPrices"" -> ""734_onlyOwner"";
""734_transfer"" -> ""734__transfer"";
}
"
0x5314dd28de3f215647b64ccb3701e6098a80d080.sol,CaData,"contract CaData is ADM312, ERC721 { function CaData() public { COO = msg.sender; CTO = msg.sender; CFO = msg.sender; createCustomAtom(0,0,4,0,0,0,0); }",0,"subgraph cluster_907_CaData {
label=""CaData"";
""907_setAtomSons"" [label=""setAtomSons""];
""907_ownerAtomsCount"" [label=""ownerAtomsCount""];
""907_incRandNonce"" [label=""incRandNonce""];
""907_setAtomFath"" [label=""setAtomFath""];
""907_balanceOf"" [label=""balanceOf""];
""907_totalSupply"" [label=""totalSupply""];
""907_setAtomMoth"" [label=""setAtomMoth""];
""907_ownerOf"" [label=""ownerOf""];
""907__transfer"" [label=""_transfer""];
""907_setAtomGen"" [label=""setAtomGen""];
""907_bonusReceived"" [label=""bonusReceived""];
""907_withdrawBalance"" [label=""withdrawBalance""];
""907_setAtomDna"" [label=""setAtomDna""];
""907_fallback"" [label=""fallback""];
""907_setBonusReceived"" [label=""setBonusReceived""];
""907_pushAtom"" [label=""pushAtom""];
""907_CaData"" [label=""CaData""];
""907_atoms"" [label=""atoms""];
""907_takeOwnership"" [label=""takeOwnership""];
""907_setAtomCool"" [label=""setAtomCool""];
""907_setDnaExist"" [label=""setDnaExist""];
""907_setAtomLev"" [label=""setAtomLev""];
""907_setAtomIsReady"" [label=""setAtomIsReady""];
""907_approve"" [label=""approve""];
""907_setAtomIsRent"" [label=""setAtomIsRent""];
""907_setOwnerAtomsCount"" [label=""setOwnerAtomsCount""];
""907_setAtomIsBuy"" [label=""setAtomIsBuy""];
""907_transfer"" [label=""transfer""];
""907_setAtomOwner"" [label=""setAtomOwner""];
""907_CTO"" [label=""CTO""];
""907_atomOwner"" [label=""atomOwner""];
""907_createCustomAtom"" [label=""createCustomAtom""];
""907_kill"" [label=""kill""];
""907_incRandNonce"" -> ""907_onlyContract"";
""907_CaData"" -> ""907_createCustomAtom"";
""907_setAtomCool"" -> ""907_onlyContract"";
""907_setAtomIsReady"" -> ""907_onlyContractAdmin"";
""907_transfer"" -> ""907__transfer"";
""907_setBonusReceived"" -> ""907_onlyContractAdmin"";
""907_setAtomDna"" -> ""907_onlyAdmin"";
""907_setAtomFath"" -> ""907_onlyContract"";
""907_withdrawBalance"" -> ""907_onlyAdmin"";
""907_takeOwnership"" -> ""907_ownerOf"";
""907_setAtomLev"" -> ""907_onlyContract"";
""907_setAtomGen"" -> ""907_onlyAdmin"";
""907_setAtomIsRent"" -> ""907_onlyContract"";
""907_setAtomSons"" -> ""907_onlyContract"";
""907_setAtomIsBuy"" -> ""907_onlyContract"";
""907_setOwnerAtomsCount"" -> ""907_onlyContract"";
""907_takeOwnership"" -> ""907__transfer"";
""907_setAtomMoth"" -> ""907_onlyContract"";
""907_setDnaExist"" -> ""907_onlyContractAdmin"";
""907_setAtomOwner"" -> ""907_onlyContract"";
""907_pushAtom"" -> ""907_onlyContract"";
""907_createCustomAtom"" -> ""907_onlyAdmin"";
}
"
0xde31e0ef14c2348f85d95f3dffef632e1215e070.sol,iCashweb,"contract iCashweb is iCashwebToken { using iMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 _totalSupply; uint256 _rate; uint256 _totalMintSupply; uint256 _maxMintable; mapping (address => uint256) _balances; mapping (address => mapping (address => uint256)) _approvals; constructor (uint256 _price, uint256 _val) public { iOwner = msg.sender; _mintingStarted = true; _minted = false; _rate = _price; uint256 tokenVal = _val.mul(10 ** uint256(decimals)); _totalSupply = tokenVal.mul(2); _maxMintable = tokenVal; _balances[msg.sender] = tokenVal; emit Transfer(0x0, msg.sender, tokenVal); }",0,"subgraph cluster_939_iCashweb {
label=""iCashweb"";
""939_balanceOf"" [label=""balanceOf""];
""939_getMintingStatus"" [label=""getMintingStatus""];
""939_fallback"" [label=""fallback""];
""939_transferOwnership"" [label=""transferOwnership""];
""939_getMinted"" [label=""getMinted""];
""939_releaseMintTokens"" [label=""releaseMintTokens""];
""939_transferMintTokens"" [label=""transferMintTokens""];
""939_totalMintSupply"" [label=""totalMintSupply""];
""939_moveMintTokens"" [label=""moveMintTokens""];
""939_isOwner"" [label=""isOwner""];
""939_transferFrom"" [label=""transferFrom""];
""939_approve"" [label=""approve""];
""939_totalSupply"" [label=""totalSupply""];
""939_allowance"" [label=""allowance""];
""939_transfer"" [label=""transfer""];
""939_changeRate"" [label=""changeRate""];
""939_constructor"" [label=""constructor""];
""939_getRate"" [label=""getRate""];
""939_fallback"" -> ""939_mintingStarted"";
""939_releaseMintTokens"" -> ""939_notMinted"";
""939_transferMintTokens"" -> ""939_iOnlyOwner"";
""939_moveMintTokens"" -> ""939_iOnlyOwner"";
}
"
0xb3f4c7cc6465ac798200c925f4df3dbbb5de2f39.sol,StandardToken,"contract StandardToken is ERC20, BasicToken { mapping (address => mapping (address => uint256)) internal allowed; function transferFrom(address _from, address _to, uint256 _value) transfersEnabled onlyUnLock onlyUnlockTime onlyUnlockAllTime public returns (bool) { require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); emit Transfer(_from, _to, _value); return true; }",0,"subgraph cluster_726_StandardToken {
label=""StandardToken"";
""726_transferFrom"" [label=""transferFrom""];
""726_decreaseApproval"" [label=""decreaseApproval""];
""726_approve"" [label=""approve""];
""726_increaseApproval"" [label=""increaseApproval""];
""726_allowance"" [label=""allowance""];
""726_decreaseApproval"" -> ""726_onlyUnlockTime"";
""726_transferFrom"" -> ""726_transfersEnabled"";
""726_increaseApproval"" -> ""726_onlyUnLock"";
""726_increaseApproval"" -> ""726_onlyUnlockTime"";
""726_approve"" -> ""726_onlyUnlockAllTime"";
""726_approve"" -> ""726_onlyUnLock"";
""726_increaseApproval"" -> ""726_transfersEnabled"";
""726_transferFrom"" -> ""726_onlyUnlockAllTime"";
""726_transferFrom"" -> ""726_onlyUnlockTime"";
""726_approve"" -> ""726_transfersEnabled"";
""726_increaseApproval"" -> ""726_onlyUnlockAllTime"";
""726_decreaseApproval"" -> ""726_onlyUnLock"";
""726_transferFrom"" -> ""726_onlyUnLock"";
""726_decreaseApproval"" -> ""726_transfersEnabled"";
""726_decreaseApproval"" -> ""726_onlyUnlockAllTime"";
""726_approve"" -> ""726_onlyUnlockTime"";
}
"
0xeb5aeb4b5e68896d59f17cfea0fcfafd5e1a5f1c.sol,GNBToken,contract GNBToken is ERC20{ using SafeMath for uint; address public platformAdmin; mapping(address=>uint256) public tokenRateArray; mapping(address=>uint256) public tokenRateSignArray; mapping(address=>bool) public tokenExchangeLock; uint256 public startTime=1575216000; uint256 public endTime=1581696000; mapping (address => bool) public frozenAccount; mapping (address => uint256) public frozenTimestamp; modifier onlyOwner() { require(msg.sender == platformAdmin); _; },0,"subgraph cluster_1542_GNBToken {
label=""GNBToken"";
""1542_transfer"" [label=""transfer""];
""1542_getTokenAllowance"" [label=""getTokenAllowance""];
""1542_setTokenExchangeLock"" [label=""setTokenExchangeLock""];
""1542_freezeWithTimestamp"" [label=""freezeWithTimestamp""];
""1542_approve"" [label=""approve""];
""1542_multiFreeze"" [label=""multiFreeze""];
""1542_getTokenBalance"" [label=""getTokenBalance""];
""1542_approveErc"" [label=""approveErc""];
""1542_multiWithdrawToken"" [label=""multiWithdrawToken""];
""1542_changeAdmin"" [label=""changeAdmin""];
""1542_getEthBalance"" [label=""getEthBalance""];
""1542_multiTransfer"" [label=""multiTransfer""];
""1542_transferFrom"" [label=""transferFrom""];
""1542_setTokenRate"" [label=""setTokenRate""];
""1542_freeze"" [label=""freeze""];
""1542_balanceOf"" [label=""balanceOf""];
""1542_multiFreezeWithTimestamp"" [label=""multiFreezeWithTimestamp""];
""1542_exChangeToken"" [label=""exChangeToken""];
""1542_setTokenArrRate"" [label=""setTokenArrRate""];
""1542_generateToken"" [label=""generateToken""];
""1542_getFrozenAccount"" [label=""getFrozenAccount""];
""1542_multiWithdraw"" [label=""multiWithdraw""];
""1542_allowance"" [label=""allowance""];
""1542_totalSupply"" [label=""totalSupply""];
""1542_getTokenDecimals"" [label=""getTokenDecimals""];
""1542_getFrozenTimestamp"" [label=""getFrozenTimestamp""];
""1542_constructor"" [label=""constructor""];
""1542_approveErc"" -> ""1542_onlyOwner"";
""1542_setTokenArrRate"" -> ""1542_onlyOwner"";
""1542_multiFreeze"" -> ""1542_onlyOwner"";
""1542_generateToken"" -> ""1542_onlyOwner"";
""1542_setTokenExchangeLock"" -> ""1542_onlyOwner"";
""1542_freezeWithTimestamp"" -> ""1542_onlyOwner"";
""1542_multiWithdraw"" -> ""1542_onlyOwner"";
""1542_freeze"" -> ""1542_onlyOwner"";
""1542_multiFreezeWithTimestamp"" -> ""1542_onlyOwner"";
""1542_changeAdmin"" -> ""1542_onlyOwner"";
""1542_multiWithdrawToken"" -> ""1542_onlyOwner"";
""1542_setTokenRate"" -> ""1542_onlyOwner"";
}
"
0x4d5c907a460b0844cc99b95003819c2aa2b2b77a.sol,RealEstateDirectIncome,"contract RealEstateDirectIncome is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; address private admin; bool public transferEnabled = true; function RealEstateDirectIncome() { totalSupply = 32000000000000000000000000000 ; balances[msg.sender] = totalSupply; Transfer(address(0x0), msg.sender, totalSupply); admin = msg.sender; transferOwnership(admin); }",0,"subgraph cluster_738_RealEstateDirectIncome {
label=""RealEstateDirectIncome"";
""738_setTransferEnabled"" [label=""setTransferEnabled""];
""738_burn"" [label=""burn""];
""738_transfer"" [label=""transfer""];
""738_RealEstateDirectIncome"" [label=""RealEstateDirectIncome""];
""738_transferFrom"" [label=""transferFrom""];
""738_burnFrom"" [label=""burnFrom""];
""738_setAdmin"" [label=""setAdmin""];
""738_transferFrom"" -> ""738_transferFrom"";
""738_RealEstateDirectIncome"" -> ""738_transferOwnership"";
""738_burnFrom"" -> ""738_onlyWhenTransferEnabled"";
""738_burn"" -> ""738_onlyWhenTransferEnabled"";
""738_transfer"" -> ""738_onlyWhenTransferEnabled"";
""738_transferFrom"" -> ""738_onlyWhenTransferEnabled"";
""738_burnFrom"" -> ""738_transferFrom"";
""738_burnFrom"" -> ""738_burn"";
""738_transfer"" -> ""738_transfer"";
}
"
0x53dc2d4c1908fa96d8ceef7c8e23a74da0a9bba1.sol,FoMo3Dlong,"contract FoMo3Dlong is modularLong { using SafeMath for *; using NameFilter for string; using F3DKeysCalcLong for uint256; otherFoMo3D private otherF3D_; DiviesCTR constant private Divies = DiviesCTR(0x88B30117e7EaFCDa49542D5530D383146ca9af70); address constant private FeeAddr = 0x1C7584476a8d586c3dd8f83864D0d5cd214492E9; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x30aa3C69fE10022Bca0A158b42FFC739Aa10b1e5); string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 30; uint256 private rndGap_ = 1 hours; uint256 constant private rndInit_ = 8 hours; uint256 constant private rndInc_ = 60 seconds; uint256 constant private rndMax_ = 8 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(56,10); fees_[1] = F3Ddatasets.TeamFee(56,10); fees_[2] = F3Ddatasets.TeamFee(56,10); fees_[3] = F3Ddatasets.TeamFee(56,10); potSplit_[0] = F3Ddatasets.PotSplit(20,20); potSplit_[1] = F3Ddatasets.PotSplit(20,20); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(20,20); }",0,"subgraph cluster_4166_FoMo3Dlong {
label=""FoMo3Dlong"";
""4166_endRound"" [label=""endRound""];
""4166_reLoadXaddr"" [label=""reLoadXaddr""];
""4166_reLoadCore"" [label=""reLoadCore""];
""4166_fallback"" [label=""fallback""];
""4166_withdrawEarnings"" [label=""withdrawEarnings""];
""4166_registerNameXaddr"" [label=""registerNameXaddr""];
""4166_managePlayer"" [label=""managePlayer""];
""4166_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4166_airdrop"" [label=""airdrop""];
""4166_verifyTeam"" [label=""verifyTeam""];
""4166_calcKeysReceived"" [label=""calcKeysReceived""];
""4166_buyCore"" [label=""buyCore""];
""4166_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4166_getPlayerVaults"" [label=""getPlayerVaults""];
""4166_distributeExternal"" [label=""distributeExternal""];
""4166_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4166_buyXaddr"" [label=""buyXaddr""];
""4166_getBuyPrice"" [label=""getBuyPrice""];
""4166_registerNameXID"" [label=""registerNameXID""];
""4166_reLoadXname"" [label=""reLoadXname""];
""4166_constructor"" [label=""constructor""];
""4166_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4166_activate"" [label=""activate""];
""4166_distributeInternal"" [label=""distributeInternal""];
""4166_updateTimer"" [label=""updateTimer""];
""4166_withdraw"" [label=""withdraw""];
""4166_potSwap"" [label=""potSwap""];
""4166_reLoadXid"" [label=""reLoadXid""];
""4166_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4166_core"" [label=""core""];
""4166_endTx"" [label=""endTx""];
""4166_iWantXKeys"" [label=""iWantXKeys""];
""4166_buyXname"" [label=""buyXname""];
""4166_updateGenVault"" [label=""updateGenVault""];
""4166_updateMasks"" [label=""updateMasks""];
""4166_registerNameXname"" [label=""registerNameXname""];
""4166_determinePID"" [label=""determinePID""];
""4166_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4166_getTimeLeft"" [label=""getTimeLeft""];
""4166_buyXid"" [label=""buyXid""];
""4166_registerNameXaddr"" -> ""4166_isHuman"";
""4166_getPlayerVaults"" -> ""4166_getPlayerVaultsHelper"";
""4166_reLoadXaddr"" -> ""4166_reLoadCore"";
""4166_buyXname"" -> ""4166_isHuman"";
""4166_withdraw"" -> ""4166_isActivated"";
""4166_core"" -> ""4166_managePlayer"";
""4166_updateGenVault"" -> ""4166_calcUnMaskedEarnings"";
""4166_buyXid"" -> ""4166_isHuman"";
""4166_buyXaddr"" -> ""4166_isHuman"";
""4166_fallback"" -> ""4166_buyCore"";
""4166_buyXname"" -> ""4166_buyCore"";
""4166_reLoadCore"" -> ""4166_core"";
""4166_core"" -> ""4166_airdrop"";
""4166_buyXaddr"" -> ""4166_determinePID"";
""4166_buyXaddr"" -> ""4166_verifyTeam"";
""4166_fallback"" -> ""4166_isWithinLimits"";
""4166_reLoadXaddr"" -> ""4166_verifyTeam"";
""4166_reLoadXname"" -> ""4166_reLoadCore"";
""4166_reLoadXname"" -> ""4166_isWithinLimits"";
""4166_buyXid"" -> ""4166_determinePID"";
""4166_reLoadXaddr"" -> ""4166_isActivated"";
""4166_reLoadCore"" -> ""4166_endRound"";
""4166_buyCore"" -> ""4166_endRound"";
""4166_reLoadXid"" -> ""4166_isActivated"";
""4166_distributeInternal"" -> ""4166_updateMasks"";
""4166_withdraw"" -> ""4166_isHuman"";
""4166_core"" -> ""4166_distributeInternal"";
""4166_withdraw"" -> ""4166_endRound"";
""4166_core"" -> ""4166_updateTimer"";
""4166_fallback"" -> ""4166_isActivated"";
""4166_buyXaddr"" -> ""4166_buyCore"";
""4166_fallback"" -> ""4166_determinePID"";
""4166_withdraw"" -> ""4166_withdrawEarnings"";
""4166_withdrawEarnings"" -> ""4166_updateGenVault"";
""4166_reLoadCore"" -> ""4166_withdrawEarnings"";
""4166_reLoadXid"" -> ""4166_reLoadCore"";
""4166_registerNameXID"" -> ""4166_isHuman"";
""4166_reLoadXid"" -> ""4166_isHuman"";
""4166_managePlayer"" -> ""4166_updateGenVault"";
""4166_reLoadXid"" -> ""4166_isWithinLimits"";
""4166_reLoadXname"" -> ""4166_verifyTeam"";
""4166_buyXname"" -> ""4166_isWithinLimits"";
""4166_core"" -> ""4166_endTx"";
""4166_buyXname"" -> ""4166_determinePID"";
""4166_registerNameXname"" -> ""4166_isHuman"";
""4166_reLoadXid"" -> ""4166_verifyTeam"";
""4166_reLoadXaddr"" -> ""4166_isHuman"";
""4166_core"" -> ""4166_distributeExternal"";
""4166_buyXaddr"" -> ""4166_isActivated"";
""4166_reLoadXname"" -> ""4166_isActivated"";
""4166_buyXid"" -> ""4166_verifyTeam"";
""4166_buyCore"" -> ""4166_core"";
""4166_buyXname"" -> ""4166_verifyTeam"";
""4166_fallback"" -> ""4166_isHuman"";
""4166_getPlayerVaults"" -> ""4166_calcUnMaskedEarnings"";
""4166_buyXid"" -> ""4166_isActivated"";
""4166_reLoadXname"" -> ""4166_isHuman"";
""4166_buyXname"" -> ""4166_isActivated"";
""4166_buyXaddr"" -> ""4166_isWithinLimits"";
""4166_reLoadXaddr"" -> ""4166_isWithinLimits"";
""4166_getPlayerInfoByAddress"" -> ""4166_calcUnMaskedEarnings"";
""4166_buyXid"" -> ""4166_buyCore"";
""4166_buyXid"" -> ""4166_isWithinLimits"";
}
"
0xf1ce6b0e8896dffa462b2ff4d2543f417a0d47e9.sol,CrowdsaleToken,"contract CrowdsaleToken is StandardToken, Configurable, Ownable { enum Stages { none, icoStart, icoEnd }",0,"subgraph cluster_852_CrowdsaleToken {
label=""CrowdsaleToken"";
""852_startIco"" [label=""startIco""];
""852_constructor"" [label=""constructor""];
""852_endIco"" [label=""endIco""];
""852_finalizeIco"" [label=""finalizeIco""];
""852_fallback"" [label=""fallback""];
""852_finalizeIco"" -> ""852_onlyOwner"";
""852_startIco"" -> ""852_onlyOwner"";
""852_finalizeIco"" -> ""852_endIco"";
}
"
0x5c88e93b5feae72f0fbe787c7f1b96ce3f29ee6a.sol,BWW_ERC20,"contract BWW_ERC20 is owned { using SafeMath for uint; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 100000000000; uint256 public TokenPerKRWBuy = 4; mapping(bytes32 => bool) transactionHashes; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event FrozenFunds(address target, bool frozen); constructor () public { balanceOf[owner] = totalSupply; }",0,"subgraph cluster_743_BWW_ERC20 {
label=""BWW_ERC20"";
""743_approve"" [label=""approve""];
""743_burn"" [label=""burn""];
""743_transferFrom"" [label=""transferFrom""];
""743_approveAndCall"" [label=""approveAndCall""];
""743_burnFromByOwner"" [label=""burnFromByOwner""];
""743_constructor"" [label=""constructor""];
""743_withdraw"" [label=""withdraw""];
""743_transfer"" [label=""transfer""];
""743_withdrawToken"" [label=""withdrawToken""];
""743_freezeAccount"" [label=""freezeAccount""];
""743_buyToken"" [label=""buyToken""];
""743_deposit"" [label=""deposit""];
""743__transfer"" [label=""_transfer""];
""743_fallback"" [label=""fallback""];
""743_burnFrom"" [label=""burnFrom""];
""743_mintToken"" [label=""mintToken""];
""743_transfer"" -> ""743__transfer"";
""743_approveAndCall"" -> ""743_approve"";
""743_withdrawToken"" -> ""743_onlyOwner"";
""743_withdrawToken"" -> ""743__transfer"";
""743_mintToken"" -> ""743_onlyOwner"";
""743_freezeAccount"" -> ""743_onlyOwner"";
""743_burn"" -> ""743_onlyOwner"";
""743_transferFrom"" -> ""743__transfer"";
""743_withdraw"" -> ""743_onlyOwner"";
""743_burnFromByOwner"" -> ""743_onlyOwner"";
}
"
0x5409fcd56836e0e0459c12ab45e7ef23c6094bed.sol,RedExchange,contract RedExchange { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_40_AcceptsRedExchange {
label=""AcceptsRedExchange"";
""40_AcceptsExchange"" [label=""AcceptsExchange""];
""40_tokenFallback"" [label=""tokenFallback""];
}
"
0x71c118b00759b0851785642541ceb0f4ceea0bd5.sol,ChibiFighters,"contract ChibiFighters is ERC721, ContractOwned, CustomEvents { using SafeMath for uint256; uint256 private totalTokens; mapping (uint256 => address) private tokenOwner; mapping (uint256 => address) private tokenApprovals; mapping (address => uint256[]) private ownedTokens; mapping(uint256 => uint256) private ownedTokensIndex; GeneInterface geneContract; FcfInterface fcfContract; BattleInterface battleContract; address battleContractAddress; uint public priceChibi; uint priceFusionChibi; uint uniqueCounter; uint adultTime; uint exhaustionTime; uint comission; address battleRemoveContractAddress; struct Chibi { address owner; bool founder; string nameChibi; uint16[13] dna; uint256 father; uint256 mother; uint gen; uint256[] fusions; bool forFusion; uint256 fusionPrice; uint256 exhausted; uint256 adult; string infoUrl; }",0,"subgraph cluster_2738_ChibiFighters {
label=""ChibiFighters"";
""2738_fusionChibis"" [label=""fusionChibis""];
""2738_renameChibi"" [label=""renameChibi""];
""2738_transfer"" [label=""transfer""];
""2738_takeOwnership"" [label=""takeOwnership""];
""2738_setFcfContractAddress"" [label=""setFcfContractAddress""];
""2738_approvedFor"" [label=""approvedFor""];
""2738_totalSupply"" [label=""totalSupply""];
""2738_exhaustFusion"" [label=""exhaustFusion""];
""2738_tokenURI"" [label=""tokenURI""];
""2738_queryFusionData"" [label=""queryFusionData""];
""2738_setInfoUrlPrefix"" [label=""setInfoUrlPrefix""];
""2738_cancelChibiForFusion"" [label=""cancelChibiForFusion""];
""2738_queryChibi"" [label=""queryChibi""];
""2738_constructor"" [label=""constructor""];
""2738_setGeneContractAddress"" [label=""setGeneContractAddress""];
""2738_approve"" [label=""approve""];
""2738_traits"" [label=""traits""];
""2738_weiToOwner"" [label=""weiToOwner""];
""2738_setGameState"" [label=""setGameState""];
""2738_strConcat"" [label=""strConcat""];
""2738_uint2str"" [label=""uint2str""];
""2738_setMinimumPriceFusion"" [label=""setMinimumPriceFusion""];
""2738_tokenMetadata"" [label=""tokenMetadata""];
""2738_ownerOf"" [label=""ownerOf""];
""2738_mintSpecial"" [label=""mintSpecial""];
""2738_buyGEN0Chibi"" [label=""buyGEN0Chibi""];
""2738_setChibiForFusion"" [label=""setChibiForFusion""];
""2738_addToken"" [label=""addToken""];
""2738_clearApprovalAndTransfer"" [label=""clearApprovalAndTransfer""];
""2738_setBattleRemoveContractAddress"" [label=""setBattleRemoveContractAddress""];
""2738_queryFusionData_ext"" [label=""queryFusionData_ext""];
""2738_getGameState"" [label=""getGameState""];
""2738_setExhaustionTime"" [label=""setExhaustionTime""];
""2738_setAdultTime"" [label=""setAdultTime""];
""2738__mint"" [label=""_mint""];
""2738_buyChibiWithFcf"" [label=""buyChibiWithFcf""];
""2738_setChibiGEN0Price"" [label=""setChibiGEN0Price""];
""2738_queryChibiAdd"" [label=""queryChibiAdd""];
""2738_setGameStateFCF"" [label=""setGameStateFCF""];
""2738_isNecromancer"" [label=""isNecromancer""];
""2738_setBattleContractAddress"" [label=""setBattleContractAddress""];
""2738_isApprovedFor"" [label=""isApprovedFor""];
""2738_balanceOf"" [label=""balanceOf""];
""2738_setGameStateFusion"" [label=""setGameStateFusion""];
""2738_changeInfoUrl"" [label=""changeInfoUrl""];
""2738_exhaustChibis"" [label=""exhaustChibis""];
""2738_setComission"" [label=""setComission""];
""2738_tokensOf"" [label=""tokensOf""];
""2738_clearApproval"" [label=""clearApproval""];
""2738_removeToken"" [label=""removeToken""];
""2738_exhaustBattle"" [label=""exhaustBattle""];
""2738_mintSpecial"" -> ""2738__mint"";
""2738_takeOwnership"" -> ""2738_isApprovedFor"";
""2738_setMinimumPriceFusion"" -> ""2738_contract_onlyOwner"";
""2738_setChibiForFusion"" -> ""2738_ownerOf"";
""2738_setGeneContractAddress"" -> ""2738_contract_onlyOwner"";
""2738_addToken"" -> ""2738_balanceOf"";
""2738_fusionChibis"" -> ""2738_addToken"";
""2738_transfer"" -> ""2738_onlyOwnerOf"";
""2738_renameChibi"" -> ""2738_ownerOf"";
""2738_takeOwnership"" -> ""2738_clearApprovalAndTransfer"";
""2738_clearApprovalAndTransfer"" -> ""2738_ownerOf"";
""2738_removeToken"" -> ""2738_balanceOf"";
""2738_clearApprovalAndTransfer"" -> ""2738_removeToken"";
""2738_fusionChibis"" -> ""2738_uint2str"";
""2738_fusionChibis"" -> ""2738_exhaustFusion"";
""2738_cancelChibiForFusion"" -> ""2738_ownerOf"";
""2738_setExhaustionTime"" -> ""2738_contract_onlyOwner"";
""2738__mint"" -> ""2738_addToken"";
""2738_fusionChibis"" -> ""2738_traits"";
""2738_setFcfContractAddress"" -> ""2738_contract_onlyOwner"";
""2738_setGameState"" -> ""2738_contract_onlyOwner"";
""2738__mint"" -> ""2738_strConcat"";
""2738_setGameStateFusion"" -> ""2738_contract_onlyOwner"";
""2738_approve"" -> ""2738_ownerOf"";
""2738_setBattleRemoveContractAddress"" -> ""2738_contract_onlyOwner"";
""2738_changeInfoUrl"" -> ""2738_ownerOf"";
""2738_transfer"" -> ""2738_clearApprovalAndTransfer"";
""2738_isApprovedFor"" -> ""2738_approvedFor"";
""2738_clearApprovalAndTransfer"" -> ""2738_addToken"";
""2738__mint"" -> ""2738_uint2str"";
""2738_setComission"" -> ""2738_contract_onlyOwner"";
""2738_setAdultTime"" -> ""2738_contract_onlyOwner"";
""2738_setInfoUrlPrefix"" -> ""2738_contract_onlyOwner"";
""2738_buyChibiWithFcf"" -> ""2738__mint"";
""2738_clearApprovalAndTransfer"" -> ""2738_clearApproval"";
""2738_takeOwnership"" -> ""2738_ownerOf"";
""2738_setChibiGEN0Price"" -> ""2738_contract_onlyOwner"";
""2738_mintSpecial"" -> ""2738_contract_onlyOwner"";
""2738_fusionChibis"" -> ""2738_strConcat"";
""2738_buyGEN0Chibi"" -> ""2738__mint"";
""2738_fusionChibis"" -> ""2738_ownerOf"";
""2738_setBattleContractAddress"" -> ""2738_contract_onlyOwner"";
""2738_approve"" -> ""2738_approvedFor"";
""2738_clearApproval"" -> ""2738_ownerOf"";
""2738_exhaustChibis"" -> ""2738_exhaustBattle"";
""2738_removeToken"" -> ""2738_ownerOf"";
""2738_approve"" -> ""2738_onlyOwnerOf"";
""2738_weiToOwner"" -> ""2738_contract_onlyOwner"";
""2738_setGameStateFCF"" -> ""2738_contract_onlyOwner"";
}
"
0x7903f608d9427c25711f39349260df0fb2f5dde0.sol,EthTeamContract,"contract EthTeamContract is StandardToken, Ownable { event Buy(address indexed token, address indexed from, uint256 value, uint256 weiValue); event Sell(address indexed token, address indexed from, uint256 value, uint256 weiValue); event BeginGame(address indexed team1, address indexed team2, uint64 gameTime); event EndGame(address indexed team1, address indexed team2, uint8 gameResult); event ChangeStatus(address indexed team, uint8 status); uint256 public price; uint8 public status; uint64 public gameTime; uint64 public finishTime; address public feeOwner; address public gameOpponent; function EthTeamContract( string _teamName, string _teamSymbol, address _gameOpponent, uint64 _gameTime, uint64 _finishTime, address _feeOwner ) public { name = _teamName; symbol = _teamSymbol; decimals = 3; totalSupply_ = 0; price = 1 szabo; gameOpponent = _gameOpponent; gameTime = _gameTime; finishTime = _finishTime; feeOwner = _feeOwner; owner = msg.sender; }",0,"subgraph cluster_1087_EthTeamContract {
label=""EthTeamContract"";
""1087_endGameInternal"" [label=""endGameInternal""];
""1087_transferFundAndEndGame"" [label=""transferFundAndEndGame""];
""1087_beginGame"" [label=""beginGame""];
""1087_endGame"" [label=""endGame""];
""1087_EthTeamContract"" [label=""EthTeamContract""];
""1087_fallback"" [label=""fallback""];
""1087_finish"" [label=""finish""];
""1087_transfer"" [label=""transfer""];
""1087_changeStatus"" [label=""changeStatus""];
""1087_transfer"" -> ""1087_transfer"";
""1087_finish"" -> ""1087_onlyOwner"";
""1087_changeStatus"" -> ""1087_onlyOwner"";
""1087_beginGame"" -> ""1087_onlyOwner"";
""1087_endGame"" -> ""1087_endGameInternal"";
""1087_transferFundAndEndGame"" -> ""1087_endGameInternal"";
""1087_endGame"" -> ""1087_onlyOwner"";
}
"
0x1bf63aca0124c9617d99c13ec3c279ff3e76f467.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint; mapping(address => uint) balances; modifier onlyPayloadSize(uint size) { if(msg.data.length < size.add(4)) { revert(); },0,"subgraph cluster_224_BasicToken {
label=""BasicToken"";
""224_transfer"" [label=""transfer""];
""224_balanceOf"" [label=""balanceOf""];
""224_transfer"" -> ""224_onlyPayloadSize"";
}
"
0xf4609d26a58598d6b80b11f451a00477f61d8804.sol,Tcthereum,"contract Tcthereum { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Tcthereum( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_Tcthereum {
label=""Tcthereum"";
""361_Tcthereum"" [label=""Tcthereum""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x24a7de87b3bd7298bbf8966fdf170c558d69ecc4.sol,METADOLLAR,"contract METADOLLAR is ERC20Interface, Owned, SafeMath { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public _totalSupply = 1000000000000000000000000000000; uint256 public icoMin = 1000000000000000; uint256 public icoLimit = 1000000000000000000000000000000; uint256 public countHolders = 0; uint256 public amountOfInvestments = 0; uint256 public icoPrice; uint256 public dolRate = 1000; uint256 public ethRate = 1; uint256 public sellRate = 900; uint256 public commissionRate = 1000; uint256 public sellPrice; uint256 public currentTokenPrice; uint256 public commission; bool public icoIsRunning; bool public minimalGoalReached; bool public icoIsClosed; mapping (address => uint256) public tokenBalanceOf; mapping(address => mapping (address => uint256)) allowed; mapping(address => bool) frozenAccount; event FrozenFunds(address initiator, address account, string status); event BonusChanged(uint8 bonusOld, uint8 bonusNew); event minGoalReached(uint256 minIcoAmount, string notice); event preIcoEnded(uint256 preIcoAmount, string notice); event priceUpdated(uint256 oldPrice, uint256 newPrice, string notice); event withdrawed(address _to, uint256 summe, string notice); event deposited(address _from, uint256 summe, string notice); event orderToTransfer(address initiator, address _from, address _to, uint256 summe, string notice); event tokenCreated(address _creator, uint256 summe, string notice); event tokenDestroyed(address _destroyer, uint256 summe, string notice); event icoStatusUpdated(address _initiator, string status); function STARTMETADOLLAR() { icoIsRunning = true; minimalGoalReached = false; icoIsClosed = false; tokenBalanceOf[this] += _totalSupply; allowed[this][owner] = _totalSupply; allowed[this][supervisor] = _totalSupply; currentTokenPrice = 1 * 1; icoPrice = ethRate * dolRate; sellPrice = sellRate * ethRate; updatePrices(); }",0,"subgraph cluster_1740_METADOLLAR {
label=""METADOLLAR"";
""1740_fallback"" [label=""fallback""];
""1740_transfer"" [label=""transfer""];
""1740_approve"" [label=""approve""];
""1740_buyToken"" [label=""buyToken""];
""1740_balanceOf"" [label=""balanceOf""];
""1740__transfer"" [label=""_transfer""];
""1740_withdraw"" [label=""withdraw""];
""1740_setSellRate"" [label=""setSellRate""];
""1740_collect"" [label=""collect""];
""1740_checkFrozenAccounts"" [label=""checkFrozenAccounts""];
""1740_STARTMETADOLLAR"" [label=""STARTMETADOLLAR""];
""1740_checkIcoStatus"" [label=""checkIcoStatus""];
""1740_totalSupply"" [label=""totalSupply""];
""1740_sell"" [label=""sell""];
""1740_transferOwnership"" [label=""transferOwnership""];
""1740_mintToken"" [label=""mintToken""];
""1740_setEthRate"" [label=""setEthRate""];
""1740_setDolRate"" [label=""setDolRate""];
""1740_allowance"" [label=""allowance""];
""1740_deposit"" [label=""deposit""];
""1740_transferFrom"" [label=""transferFrom""];
""1740_destroyToken"" [label=""destroyToken""];
""1740_setCommissionRate"" [label=""setCommissionRate""];
""1740_sell2"" [label=""sell2""];
""1740_updatePrices"" [label=""updatePrices""];
""1740_checkMinimalGoal"" [label=""checkMinimalGoal""];
""1740_buy"" [label=""buy""];
""1740_freezeAccount"" [label=""freezeAccount""];
""1740_calculateTheEndPrice"" [label=""calculateTheEndPrice""];
""1740_stopThisIco"" [label=""stopThisIco""];
""1740_setICOPrice"" [label=""setICOPrice""];
""1740_buy"" -> ""1740_buyToken"";
""1740_setDolRate"" -> ""1740_isOwner"";
""1740_fallback"" -> ""1740_buyToken"";
""1740_buyToken"" -> ""1740_updatePrices"";
""1740_collect"" -> ""1740_withdraw"";
""1740_STARTMETADOLLAR"" -> ""1740_updatePrices"";
""1740_sell"" -> ""1740__transfer"";
""1740_transferOwnership"" -> ""1740_isOwner"";
""1740_transfer"" -> ""1740__transfer"";
""1740_setEthRate"" -> ""1740_isOwner"";
""1740_mintToken"" -> ""1740_isOwner"";
""1740_deposit"" -> ""1740_isOwner"";
""1740_setICOPrice"" -> ""1740_isOwner"";
""1740_buyToken"" -> ""1740__transfer"";
""1740_stopThisIco"" -> ""1740_isOwner"";
""1740_freezeAccount"" -> ""1740_isOwner"";
""1740_withdraw"" -> ""1740_isOwner"";
""1740_setCommissionRate"" -> ""1740_isOwner"";
""1740_collect"" -> ""1740_isOwner"";
""1740_transferFrom"" -> ""1740__transfer"";
""1740_setICOPrice"" -> ""1740_updatePrices"";
""1740_setSellRate"" -> ""1740_isOwner"";
""1740_updatePrices"" -> ""1740_checkIcoStatus"";
""1740_destroyToken"" -> ""1740_isOwner"";
}
"
0xf293df3337bdfc76a454ce00b3d2fa5c8ba086a5.sol,BitRich,"contract BitRich is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 7000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 10000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_948_BitRich {
label=""BitRich"";
""948_transferOwnership"" [label=""transferOwnership""];
""948_withdrawALTokenss"" [label=""withdrawALTokenss""];
""948_fallback"" [label=""fallback""];
""948_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""948_transferFrom"" [label=""transferFrom""];
""948_approve"" [label=""approve""];
""948_transfer"" [label=""transfer""];
""948_BitRich"" [label=""BitRich""];
""948_updateTokensPerEth"" [label=""updateTokensPerEth""];
""948_distr"" [label=""distr""];
""948_getTokenBalance"" [label=""getTokenBalance""];
""948_burn"" [label=""burn""];
""948_getTokens"" [label=""getTokens""];
""948_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""948_finishDistribution"" [label=""finishDistribution""];
""948_allowance"" [label=""allowance""];
""948_doAirdrop"" [label=""doAirdrop""];
""948_withdraw"" [label=""withdraw""];
""948_balanceOf"" [label=""balanceOf""];
""948_burn"" -> ""948_onlyOwner"";
""948_adminClaimAirdrop"" -> ""948_doAirdrop"";
""948_transferFrom"" -> ""948_onlyPayloadSize"";
""948_updateTokensPerEth"" -> ""948_onlyOwner"";
""948_getTokens"" -> ""948_distr"";
""948_BitRich"" -> ""948_distr"";
""948_adminClaimAirdrop"" -> ""948_onlyOwner"";
""948_fallback"" -> ""948_getTokens"";
""948_transfer"" -> ""948_onlyPayloadSize"";
""948_getTokens"" -> ""948_canDistr"";
""948_distr"" -> ""948_canDistr"";
""948_finishDistribution"" -> ""948_onlyOwner"";
""948_withdrawALTokenss"" -> ""948_onlyOwner"";
""948_adminClaimAirdropMultiple"" -> ""948_onlyOwner"";
""948_adminClaimAirdropMultiple"" -> ""948_doAirdrop"";
""948_transferOwnership"" -> ""948_onlyOwner"";
""948_finishDistribution"" -> ""948_canDistr"";
""948_withdraw"" -> ""948_onlyOwner"";
}
"
0x73307e983f8843d3e09d320dd4c35cf2783f71f6.sol,CDonToken,"contract CDonToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CDonToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { symbol = tokenSymbol; name = tokenName; decimals = 18; _totalSupply = initialSupply * 10 ** uint256(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_529_CDonToken {
label=""CDonToken"";
""529_totalSupply"" [label=""totalSupply""];
""529_transfer"" [label=""transfer""];
""529_transferFrom"" [label=""transferFrom""];
""529_approve"" [label=""approve""];
""529_allowance"" [label=""allowance""];
""529_approveAndCall"" [label=""approveAndCall""];
""529_balanceOf"" [label=""balanceOf""];
""529_CDonToken"" [label=""CDonToken""];
}
"
0xedf19b437d1a67e18b15dd4a859dd52f9cfa012f.sol,OrcaCrowdsale,"contract OrcaCrowdsale is TokenRecoverable, ExchangeRateConsumer, Debuggable { using SafeMath for uint256; address internal constant WALLET = 0x0909Fb46D48eea996197573415446A26c001994a; address internal constant PARTNER_WALLET = 0x536ba70cA19DF9982487e555E335e7d91Da4A474; address internal constant TEAM_WALLET = 0x5d6aF05d440326AE861100962e861CFF09203556; address internal constant ADVISORS_WALLET = 0xf44e377F35998a6b7776954c64a84fAf420C467B; uint256 internal constant TEAM_TOKENS = 58200000e18; uint256 internal constant ADVISORS_TOKENS = 20000000e18; uint256 internal constant PARTNER_TOKENS = 82800000e18; uint256 internal constant COMMUNITY_TOKENS = 92000000e18; uint256 internal constant TOKEN_PRICE = 6; uint256 internal constant TEAM_TOKEN_LOCK_DATE = 1565049600; struct Stage { uint256 startDate; uint256 endDate; uint256 priorityDate; uint256 cap; uint64 bonus; uint64 maxPriorityId; }",0,"subgraph cluster_2576_OrcaCrowdsale {
label=""OrcaCrowdsale"";
""2576_mintTokens"" [label=""mintTokens""];
""2576_mintToken"" [label=""mintToken""];
""2576_getStageCount"" [label=""getStageCount""];
""2576_mintBounty"" [label=""mintBounty""];
""2576_validatePurchase"" [label=""validatePurchase""];
""2576_constructor"" [label=""constructor""];
""2576_usdToTokens"" [label=""usdToTokens""];
""2576_mintPreSaleTokens"" [label=""mintPreSaleTokens""];
""2576_ensureCurrentStage"" [label=""ensureCurrentStage""];
""2576_weiToUsd"" [label=""weiToUsd""];
""2576_setPreSaleTokens"" [label=""setPreSaleTokens""];
""2576_getNow"" [label=""getNow""];
""2576_updateStageCap"" [label=""updateStageCap""];
""2576_fallback"" [label=""fallback""];
""2576_initialize"" [label=""initialize""];
""2576_usdToWei"" [label=""usdToWei""];
""2576_finalize"" [label=""finalize""];
""2576_claimBounty"" [label=""claimBounty""];
""2576_setTokenMinter"" [label=""setTokenMinter""];
""2576_addStage"" [label=""addStage""];
""2576_buyTokens"" [label=""buyTokens""];
""2576_tokensToUsd"" [label=""tokensToUsd""];
""2576_addStage"" -> ""2576_onlyInitialized"";
""2576_setTokenMinter"" -> ""2576_onlyInitialized"";
""2576_validatePurchase"" -> ""2576_getNow"";
""2576_initialize"" -> ""2576_onlyOwner"";
""2576_setPreSaleTokens"" -> ""2576_onlyInitialized"";
""2576_mintToken"" -> ""2576_onlyInitialized"";
""2576_mintTokens"" -> ""2576_updateStageCap"";
""2576_finalize"" -> ""2576_getNow"";
""2576_ensureCurrentStage"" -> ""2576_getNow"";
""2576_setPreSaleTokens"" -> ""2576_onlyOwner"";
""2576_mintBounty"" -> ""2576_onlyInitialized"";
""2576_mintPreSaleTokens"" -> ""2576_getNow"";
""2576_addStage"" -> ""2576_onlyOwner"";
""2576_setTokenMinter"" -> ""2576_onlyOwner"";
""2576_buyTokens"" -> ""2576_usdToTokens"";
""2576_claimBounty"" -> ""2576_onlyInitialized"";
""2576_buyTokens"" -> ""2576_usdToWei"";
""2576_finalize"" -> ""2576_onlyOwner"";
""2576_fallback"" -> ""2576_buyTokens"";
""2576_buyTokens"" -> ""2576_ensureCurrentStage"";
""2576_mintToken"" -> ""2576_ensureCurrentStage"";
""2576_buyTokens"" -> ""2576_validatePurchase"";
""2576_finalize"" -> ""2576_onlyInitialized"";
""2576_buyTokens"" -> ""2576_weiToUsd"";
""2576_mintToken"" -> ""2576_updateStageCap"";
""2576_addStage"" -> ""2576_getNow"";
""2576_mintTokens"" -> ""2576_ensureCurrentStage"";
""2576_buyTokens"" -> ""2576_tokensToUsd"";
""2576_mintTokens"" -> ""2576_onlyInitialized"";
""2576_buyTokens"" -> ""2576_onlyInitialized"";
""2576_buyTokens"" -> ""2576_updateStageCap"";
""2576_mintPreSaleTokens"" -> ""2576_onlyInitialized"";
}
"
0x52629dd14923d9f60deafdd373ff6e1145866f09.sol,LandGrabToken,"contract LandGrabToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public cityIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public cityIndexToApproved; mapping (uint256 => uint256) private cityIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct City { string name; }",0,"subgraph cluster_975_LandGrabToken {
label=""LandGrabToken"";
""975_setCOO"" [label=""setCOO""];
""975_createPromoCity"" [label=""createPromoCity""];
""975__addressNotNull"" [label=""_addressNotNull""];
""975__owns"" [label=""_owns""];
""975_takeOwnership"" [label=""takeOwnership""];
""975__createCity"" [label=""_createCity""];
""975_getCity"" [label=""getCity""];
""975_transfer"" [label=""transfer""];
""975_implementsERC721"" [label=""implementsERC721""];
""975_payout"" [label=""payout""];
""975__payout"" [label=""_payout""];
""975_createContractCity"" [label=""createContractCity""];
""975_transferFrom"" [label=""transferFrom""];
""975_purchase"" [label=""purchase""];
""975_ownerOf"" [label=""ownerOf""];
""975_name"" [label=""name""];
""975_balanceOf"" [label=""balanceOf""];
""975__approved"" [label=""_approved""];
""975__transfer"" [label=""_transfer""];
""975_totalSupply"" [label=""totalSupply""];
""975_LandGrabToken"" [label=""LandGrabToken""];
""975_setCEO"" [label=""setCEO""];
""975_priceOf"" [label=""priceOf""];
""975_symbol"" [label=""symbol""];
""975_tokensOfOwner"" [label=""tokensOfOwner""];
""975_approve"" [label=""approve""];
""975_payout"" -> ""975__payout"";
""975_takeOwnership"" -> ""975__addressNotNull"";
""975_payout"" -> ""975_onlyCLevel"";
""975_takeOwnership"" -> ""975__approved"";
""975_transfer"" -> ""975__addressNotNull"";
""975_takeOwnership"" -> ""975__transfer"";
""975_setCEO"" -> ""975_onlyCEO"";
""975_createContractCity"" -> ""975_onlyCOO"";
""975_tokensOfOwner"" -> ""975_totalSupply"";
""975_transferFrom"" -> ""975__transfer"";
""975_transferFrom"" -> ""975__owns"";
""975_createPromoCity"" -> ""975_onlyCOO"";
""975_approve"" -> ""975__owns"";
""975_purchase"" -> ""975__addressNotNull"";
""975__createCity"" -> ""975__transfer"";
""975_purchase"" -> ""975__transfer"";
""975_setCOO"" -> ""975_onlyCEO"";
""975_transferFrom"" -> ""975__addressNotNull"";
""975_transferFrom"" -> ""975__approved"";
""975_createContractCity"" -> ""975__createCity"";
""975_tokensOfOwner"" -> ""975_balanceOf"";
""975_createPromoCity"" -> ""975__createCity"";
""975_transfer"" -> ""975__transfer"";
""975_transfer"" -> ""975__owns"";
}
"
0x486681bb877703e4385c8fe9688bff776cbc11c4.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1092_MiniMeToken {
label=""MiniMeToken"";
""1092_enableTransfers"" [label=""enableTransfers""];
""1092_doTransfer"" [label=""doTransfer""];
""1092_controller"" [label=""controller""];
""1092_updateValueAtNow"" [label=""updateValueAtNow""];
""1092_approve"" [label=""approve""];
""1092_claimTokens"" [label=""claimTokens""];
""1092_approveAndCall"" [label=""approveAndCall""];
""1092_createCloneToken"" [label=""createCloneToken""];
""1092_totalSupply"" [label=""totalSupply""];
""1092_balanceOf"" [label=""balanceOf""];
""1092_fallback"" [label=""fallback""];
""1092_getValueAt"" [label=""getValueAt""];
""1092_transfer"" [label=""transfer""];
""1092_isContract"" [label=""isContract""];
""1092_generateTokens"" [label=""generateTokens""];
""1092_destroyTokens"" [label=""destroyTokens""];
""1092_totalSupplyAt"" [label=""totalSupplyAt""];
""1092_min"" [label=""min""];
""1092_balanceOfAt"" [label=""balanceOfAt""];
""1092_MiniMeToken"" [label=""MiniMeToken""];
""1092_allowance"" [label=""allowance""];
""1092_transferFrom"" [label=""transferFrom""];
""1092_transfer"" -> ""1092_doTransfer"";
""1092_claimTokens"" -> ""1092_onlyController"";
""1092_destroyTokens"" -> ""1092_balanceOf"";
""1092_totalSupplyAt"" -> ""1092_getValueAt"";
""1092_generateTokens"" -> ""1092_onlyController"";
""1092_transferFrom"" -> ""1092_doTransfer"";
""1092_balanceOf"" -> ""1092_balanceOfAt"";
""1092_doTransfer"" -> ""1092_balanceOfAt"";
""1092_generateTokens"" -> ""1092_balanceOf"";
""1092_totalSupply"" -> ""1092_totalSupplyAt"";
""1092_balanceOfAt"" -> ""1092_getValueAt"";
""1092_enableTransfers"" -> ""1092_onlyController"";
""1092_generateTokens"" -> ""1092_updateValueAtNow"";
""1092_balanceOfAt"" -> ""1092_min"";
""1092_generateTokens"" -> ""1092_totalSupply"";
""1092_approveAndCall"" -> ""1092_approve"";
""1092_destroyTokens"" -> ""1092_onlyController"";
""1092_approve"" -> ""1092_isContract"";
""1092_destroyTokens"" -> ""1092_totalSupply"";
""1092_doTransfer"" -> ""1092_updateValueAtNow"";
""1092_destroyTokens"" -> ""1092_updateValueAtNow"";
""1092_doTransfer"" -> ""1092_isContract"";
""1092_totalSupplyAt"" -> ""1092_min"";
""1092_fallback"" -> ""1092_isContract"";
}
"
0x28ed09131bd546f2ce967d0f3c4c1869f9ead2db.sol,CPCIValueCirculateAssets,contract CPCIValueCirculateAssets is StandardToken { string public symbol; string public name; uint8 constant public decimals = 18; function CPCIValueCirculateAssets() public { symbol = ; name = ; totalSupply_ = 7.8 * 1000 * 10000 * 10**uint(decimals); balances[msg.sender].amount = totalSupply_; },0,"subgraph cluster_663_CPCIValueCirculateAssets {
label=""CPCIValueCirculateAssets"";
""663_fallback"" [label=""fallback""];
""663_CPCIValueCirculateAssets"" [label=""CPCIValueCirculateAssets""];
}
"
0x410cac201ffc0e0e4c179d926076d25bf8bc5b92.sol,EthPyramid2,contract EthPyramid2 { uint256 constant scaleFactor = 0x10000000000000000; int constant crr_n = 1; int constant crr_d = 2; int constant price_coeff = -0x296ABF784A358468C; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; mapping(address => uint256) public tokenBalance; mapping(address => int256) public payouts; uint256 public totalSupply; int256 totalPayouts; uint256 earningsPerToken; uint256 public contractBalance; function EthPyramid2() public {},0,"subgraph cluster_1170_EthPyramid2 {
label=""EthPyramid2"";
""1170_getEtherForTokens"" [label=""getEtherForTokens""];
""1170_sell"" [label=""sell""];
""1170_getMeOutOfHere"" [label=""getMeOutOfHere""];
""1170_mul"" [label=""mul""];
""1170_balanceOf"" [label=""balanceOf""];
""1170_withdraw"" [label=""withdraw""];
""1170_sellMyTokens"" [label=""sellMyTokens""];
""1170_reinvestDividends"" [label=""reinvestDividends""];
""1170_fixedLog"" [label=""fixedLog""];
""1170_calculateDividendTokens"" [label=""calculateDividendTokens""];
""1170_getTokensForEther"" [label=""getTokensForEther""];
""1170_fallback"" [label=""fallback""];
""1170_balance"" [label=""balance""];
""1170_reserve"" [label=""reserve""];
""1170_buyPrice"" [label=""buyPrice""];
""1170_add"" [label=""add""];
""1170_div"" [label=""div""];
""1170_dividends"" [label=""dividends""];
""1170_sellPrice"" [label=""sellPrice""];
""1170_EthPyramid2"" [label=""EthPyramid2""];
""1170_fixedExp"" [label=""fixedExp""];
""1170_withdrawOld"" [label=""withdrawOld""];
""1170_buy"" [label=""buy""];
""1170_fund"" [label=""fund""];
""1170_sub"" [label=""sub""];
""1170_getMeOutOfHere"" -> ""1170_withdraw"";
""1170_sellMyTokens"" -> ""1170_balanceOf"";
""1170_getTokensForEther"" -> ""1170_sub"";
""1170_sell"" -> ""1170_sub"";
""1170_fallback"" -> ""1170_withdrawOld"";
""1170_sellPrice"" -> ""1170_getEtherForTokens"";
""1170_sellMyTokens"" -> ""1170_sell"";
""1170_getTokensForEther"" -> ""1170_fixedLog"";
""1170_getTokensForEther"" -> ""1170_reserve"";
""1170_withdrawOld"" -> ""1170_sub"";
""1170_getMeOutOfHere"" -> ""1170_sellMyTokens"";
""1170_reinvestDividends"" -> ""1170_div"";
""1170_buyPrice"" -> ""1170_getTokensForEther"";
""1170_getEtherForTokens"" -> ""1170_fixedLog"";
""1170_getTokensForEther"" -> ""1170_fixedExp"";
""1170_buy"" -> ""1170_reserve"";
""1170_getEtherForTokens"" -> ""1170_sub"";
""1170_sell"" -> ""1170_add"";
""1170_sell"" -> ""1170_getEtherForTokens"";
""1170_withdrawOld"" -> ""1170_dividends"";
""1170_reserve"" -> ""1170_sub"";
""1170_sellPrice"" -> ""1170_div"";
""1170_reinvestDividends"" -> ""1170_calculateDividendTokens"";
""1170_calculateDividendTokens"" -> ""1170_reserve"";
""1170_buy"" -> ""1170_div"";
""1170_withdraw"" -> ""1170_dividends"";
""1170_calculateDividendTokens"" -> ""1170_sub"";
""1170_buy"" -> ""1170_add"";
""1170_reinvestDividends"" -> ""1170_reserve"";
""1170_buy"" -> ""1170_getTokensForEther"";
""1170_getEtherForTokens"" -> ""1170_fixedExp"";
""1170_fund"" -> ""1170_add"";
""1170_withdraw"" -> ""1170_sub"";
""1170_sell"" -> ""1170_div"";
""1170_reserve"" -> ""1170_balance"";
""1170_calculateDividendTokens"" -> ""1170_fixedLog"";
""1170_calculateDividendTokens"" -> ""1170_fixedExp"";
""1170_fallback"" -> ""1170_fund"";
""1170_reinvestDividends"" -> ""1170_add"";
""1170_getEtherForTokens"" -> ""1170_reserve"";
""1170_fund"" -> ""1170_buy"";
""1170_reinvestDividends"" -> ""1170_dividends"";
}
"
0xdbfb606363be0032c69f373eaa2d84820edb167d.sol,Stelz,"contract Stelz is ERC20, Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 5; uint256 public constant initial_supply = 300000000 * (10 ** uint256(decimals)); mapping (address => uint256) balances; uint256 totalSupply_; uint256 wei_price; uint256 min_amount; enum States { Sale, Stop }",0,"subgraph cluster_610_Stelz {
label=""Stelz"";
""610_fallback"" [label=""fallback""];
""610_changeState"" [label=""changeState""];
""610_constructor"" [label=""constructor""];
""610_minAmount"" [label=""minAmount""];
""610_price"" [label=""price""];
""610_transfer"" [label=""transfer""];
""610_totalSupply"" [label=""totalSupply""];
""610_changePrice"" [label=""changePrice""];
""610_balanceOf"" [label=""balanceOf""];
""610_changeMinAmount"" [label=""changeMinAmount""];
""610_transferMany"" [label=""transferMany""];
""610_requestPayout"" [label=""requestPayout""];
""610_requestPayout"" -> ""610_onlyOwner"";
""610_fallback"" -> ""610_requireState"";
""610_changePrice"" -> ""610_onlyTech"";
""610_changeState"" -> ""610_onlyTech"";
""610_fallback"" -> ""610_checkMinAmount"";
""610_changeMinAmount"" -> ""610_onlyTech"";
}
"
0xf1eabe0dcf085c9155b7e13c48b54c7662303a90.sol,BytecoinTokens,"contract BytecoinTokens is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 10000000000 * 10**uint(decimals); balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_551_BytecoinTokens {
label=""BytecoinTokens"";
""551_transferFrom"" [label=""transferFrom""];
""551_fallback"" [label=""fallback""];
""551_approve"" [label=""approve""];
""551_balanceOf"" [label=""balanceOf""];
""551_transfer"" [label=""transfer""];
""551_constructor"" [label=""constructor""];
""551_totalSupply"" [label=""totalSupply""];
""551_approveAndCall"" [label=""approveAndCall""];
""551_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""551_allowance"" [label=""allowance""];
""551_transferAnyERC20Token"" -> ""551_onlyOwner"";
}
"
0xc58f1f3ec051b51f10c4feb0cfd10d811d055ef5.sol,ldoh,"contract ldoh is EthereumSmartContract { event onCashbackCode (address indexed hodler, address cashbackcode); event onAffiliateBonus (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onClaimTokens (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onHoldplatform (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onAddContractAddress(address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime); event onHoldplatformsetting(address indexed Tokenairdrop, bool HPM_status, uint256 HPM_divider, uint256 HPM_ratio, uint256 datetime); event onHoldplatformdeposit(uint256 amount, uint256 newbalance, uint256 datetime); event onHoldplatformwithdraw(uint256 amount, uint256 newbalance, uint256 datetime); event onReceiveAirdrop(uint256 amount, uint256 datetime); address public DefaultToken; struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; bool cashbackstatus; }",0,"subgraph cluster_2349_ldoh {
label=""ldoh"";
""2349_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""2349_HodlTokens4"" [label=""HodlTokens4""];
""2349_GetUserSafesLength"" [label=""GetUserSafesLength""];
""2349_TokenPrice"" [label=""TokenPrice""];
""2349_div"" [label=""div""];
""2349_AddContractAddress"" [label=""AddContractAddress""];
""2349_fallback"" [label=""fallback""];
""2349_Holdplatform"" [label=""Holdplatform""];
""2349_UnlockToken2"" [label=""UnlockToken2""];
""2349_Holdplatform_Airdrop"" [label=""Holdplatform_Airdrop""];
""2349_UnlockToken3"" [label=""UnlockToken3""];
""2349_mul"" [label=""mul""];
""2349_CashbackCode"" [label=""CashbackCode""];
""2349_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""2349_constructor"" [label=""constructor""];
""2349_ClaimTokens"" [label=""ClaimTokens""];
""2349_ReturnAllTokens"" [label=""ReturnAllTokens""];
""2349_Holdplatform_Withdraw"" [label=""Holdplatform_Withdraw""];
""2349_Holdplatform_Deposit"" [label=""Holdplatform_Deposit""];
""2349_UnlockToken4"" [label=""UnlockToken4""];
""2349_HodlTokens3"" [label=""HodlTokens3""];
""2349_AirdropToken"" [label=""AirdropToken""];
""2349_GetSafe"" [label=""GetSafe""];
""2349_sub"" [label=""sub""];
""2349_add"" [label=""add""];
""2349_HodlTokens2"" [label=""HodlTokens2""];
""2349_PayToken"" [label=""PayToken""];
""2349_UnlockToken4"" -> ""2349_sub"";
""2349_Holdplatform_Airdrop"" -> ""2349_div"";
""2349_AirdropToken"" -> ""2349_div"";
""2349_Holdplatform_Deposit"" -> ""2349_restricted"";
""2349_HodlTokens2"" -> ""2349_HodlTokens3"";
""2349_HodlTokens3"" -> ""2349_sub"";
""2349_AddContractAddress"" -> ""2349_restricted"";
""2349_Holdplatform"" -> ""2349_HodlTokens2"";
""2349_HodlTokens2"" -> ""2349_div"";
""2349_Holdplatform_Withdraw"" -> ""2349_restricted"";
""2349_ReturnAllTokens"" -> ""2349_add"";
""2349_HodlTokens2"" -> ""2349_sub"";
""2349_UnlockToken2"" -> ""2349_mul"";
""2349_UnlockToken2"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_mul"";
""2349_AddContractAddress"" -> ""2349_mul"";
""2349_TokenPrice"" -> ""2349_restricted"";
""2349_WithdrawAffiliate"" -> ""2349_add"";
""2349_UnlockToken4"" -> ""2349_PayToken"";
""2349_HodlTokens4"" -> ""2349_add"";
""2349_UnlockToken4"" -> ""2349_mul"";
""2349_Holdplatform_Airdrop"" -> ""2349_restricted"";
""2349_UnlockToken3"" -> ""2349_div"";
""2349_AddContractAddress"" -> ""2349_div"";
""2349_HodlTokens3"" -> ""2349_mul"";
""2349_UnlockToken4"" -> ""2349_div"";
""2349_Holdplatform"" -> ""2349_add"";
""2349_Holdplatform_Deposit"" -> ""2349_add"";
""2349_UnlockToken2"" -> ""2349_add"";
""2349_PayToken"" -> ""2349_AirdropToken"";
""2349_Holdplatform_Withdraw"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_add"";
""2349_WithdrawAffiliate"" -> ""2349_sub"";
""2349_ReturnAllTokens"" -> ""2349_PayToken"";
""2349_UnlockToken2"" -> ""2349_UnlockToken3"";
""2349_UnlockToken2"" -> ""2349_PayToken"";
""2349_ReturnAllTokens"" -> ""2349_restricted"";
""2349_UnlockToken2"" -> ""2349_div"";
""2349_ClaimTokens"" -> ""2349_UnlockToken2"";
""2349_UnlockToken3"" -> ""2349_UnlockToken4"";
""2349_HodlTokens3"" -> ""2349_add"";
""2349_AirdropToken"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_sub"";
""2349_HodlTokens3"" -> ""2349_HodlTokens4"";
""2349_HodlTokens3"" -> ""2349_div"";
""2349_PayToken"" -> ""2349_sub"";
""2349_PayToken"" -> ""2349_add"";
}
"
0x1b05e6557768650c0df0c9377c32c621ac1ccf17.sol,NFTHouseGame,contract NFTHouseGame { struct Listing { uint startPrice; uint endPrice; uint startedAt; uint endsAt; bool isAvailable; },0,"subgraph cluster_1773_NFTHouseGame {
label=""NFTHouseGame"";
""1773_withdrawFees"" [label=""withdrawFees""];
""1773_totalSupply"" [label=""totalSupply""];
""1773_setVariantCount"" [label=""setVariantCount""];
""1773_createListing"" [label=""createListing""];
""1773_approveAndTransfer"" [label=""approveAndTransfer""];
""1773_purchaseAsset"" [label=""purchaseAsset""];
""1773_takeOwnership"" [label=""takeOwnership""];
""1773_buildHouse"" [label=""buildHouse""];
""1773_NFTHouseGame"" [label=""NFTHouseGame""];
""1773_addNewStreetType"" [label=""addNewStreetType""];
""1773_addNewStreetName"" [label=""addNewStreetName""];
""1773_name"" [label=""name""];
""1773_addNewColor"" [label=""addNewColor""];
""1773_calculateCurrentPrice"" [label=""calculateCurrentPrice""];
""1773_randomHouseClass"" [label=""randomHouseClass""];
""1773_notRandom"" [label=""notRandom""];
""1773_processUpgrades"" [label=""processUpgrades""];
""1773_getHouseTraits"" [label=""getHouseTraits""];
""1773_randomBedrooms"" [label=""randomBedrooms""];
""1773_buildAddition"" [label=""buildAddition""];
""1773_symbol"" [label=""symbol""];
""1773_calculatePropertyValue"" [label=""calculatePropertyValue""];
""1773_transfer"" [label=""transfer""];
""1773_removeAssetListing"" [label=""removeAssetListing""];
""1773_calculateSquareFootage"" [label=""calculateSquareFootage""];
""1773_withdrawDevFees"" [label=""withdrawDevFees""];
""1773_upgradeAsset"" [label=""upgradeAsset""];
""1773_addNewTrait"" [label=""addNewTrait""];
""1773_generateHouse"" [label=""generateHouse""];
""1773_randomClassVariant"" [label=""randomClassVariant""];
""1773_notRandomWithSeed"" [label=""notRandomWithSeed""];
""1773_randomBathrooms"" [label=""randomBathrooms""];
""1773_approve"" [label=""approve""];
""1773_balanceOf"" [label=""balanceOf""];
""1773_listAsset"" [label=""listAsset""];
""1773_burnForInsurance"" [label=""burnForInsurance""];
""1773_transferGameOwnership"" [label=""transferGameOwnership""];
""1773_ownerOf"" [label=""ownerOf""];
""1773_getTraitCount"" [label=""getTraitCount""];
""1773_generatePresaleHouse"" [label=""generatePresaleHouse""];
""1773_randomHouseClass"" -> ""1773_notRandom"";
""1773_generatePresaleHouse"" -> ""1773_onlyDuringPresale"";
""1773_generateHouse"" -> ""1773_randomBathrooms"";
""1773_randomBathrooms"" -> ""1773_notRandom"";
""1773_addNewColor"" -> ""1773_onlyByOwnerOrDev"";
""1773_generateHouse"" -> ""1773_randomClassVariant"";
""1773_processUpgrades"" -> ""1773_calculatePropertyValue"";
""1773_burnForInsurance"" -> ""1773_notRandomWithSeed"";
""1773_purchaseAsset"" -> ""1773_approveAndTransfer"";
""1773_listAsset"" -> ""1773_onlyByAssetOwner"";
""1773_generateHouse"" -> ""1773_randomHouseClass"";
""1773_upgradeAsset"" -> ""1773_processUpgrades"";
""1773_buildAddition"" -> ""1773_onlyByAssetOwner"";
""1773_generatePresaleHouse"" -> ""1773_createListing"";
""1773_setVariantCount"" -> ""1773_onlyByOwnerOrDev"";
""1773_generateHouse"" -> ""1773_notRandom"";
""1773_transferGameOwnership"" -> ""1773_onlyBy"";
""1773_burnForInsurance"" -> ""1773_onlyByAssetOwner"";
""1773_randomClassVariant"" -> ""1773_notRandom"";
""1773_purchaseAsset"" -> ""1773_calculateCurrentPrice"";
""1773_generatePresaleHouse"" -> ""1773_onlyByOwnerOrDev"";
""1773_addNewTrait"" -> ""1773_onlyByOwnerOrDev"";
""1773_burnForInsurance"" -> ""1773_upgradeAsset"";
""1773_listAsset"" -> ""1773_createListing"";
""1773_approve"" -> ""1773_onlyByAssetOwner"";
""1773_buildAddition"" -> ""1773_processUpgrades"";
""1773_withdrawFees"" -> ""1773_onlyBy"";
""1773_generateHouse"" -> ""1773_calculateSquareFootage"";
""1773_processUpgrades"" -> ""1773_calculateSquareFootage"";
""1773_addNewStreetName"" -> ""1773_onlyByOwnerOrDev"";
""1773_generatePresaleHouse"" -> ""1773_generateHouse"";
""1773_buildHouse"" -> ""1773_generateHouse"";
""1773_addNewStreetType"" -> ""1773_onlyByOwnerOrDev"";
""1773_withdrawDevFees"" -> ""1773_onlyBy"";
""1773_randomBedrooms"" -> ""1773_notRandom"";
""1773_generateHouse"" -> ""1773_randomBedrooms"";
""1773_removeAssetListing"" -> ""1773_onlyByAssetOwner"";
""1773_generateHouse"" -> ""1773_notRandomWithSeed"";
""1773_generateHouse"" -> ""1773_calculatePropertyValue"";
}
"
0x3467ac25729b6e0d628b9fba41bb2312fcf440cf.sol,CyberPayToken,"contract CyberPayToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 500000000000000000; uint256 public totalDistributed = 100000000000000; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 1200000000000000; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_CyberPayToken {
label=""CyberPayToken"";
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_balanceOf"" [label=""balanceOf""];
""944_distr"" [label=""distr""];
""944_approve"" [label=""approve""];
""944_burn"" [label=""burn""];
""944_fallback"" [label=""fallback""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_finishDistribution"" [label=""finishDistribution""];
""944_allowance"" [label=""allowance""];
""944_transfer"" [label=""transfer""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_getTokens"" [label=""getTokens""];
""944_transferFrom"" [label=""transferFrom""];
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_CyberPayToken"" [label=""CyberPayToken""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_withdraw"" [label=""withdraw""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_distr"" -> ""944_canDistr"";
""944_burn"" -> ""944_onlyOwner"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_finishDistribution"" -> ""944_onlyOwner"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_getTokens"" -> ""944_distr"";
""944_CyberPayToken"" -> ""944_distr"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_fallback"" -> ""944_getTokens"";
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
""944_getTokens"" -> ""944_canDistr"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_transferOwnership"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
}
"
0x28577a6d31559bd265ce3adb62d0458550f7b8a7.sol,CCCToken,"contract CCCToken { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000000000000000000000000; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function CCCToken() public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_318_CCCToken {
label=""CCCToken"";
""318_approve"" [label=""approve""];
""318_burn"" [label=""burn""];
""318_burnFrom"" [label=""burnFrom""];
""318_CCCToken"" [label=""CCCToken""];
""318__transfer"" [label=""_transfer""];
""318_transferFrom"" [label=""transferFrom""];
""318_approveAndCall"" [label=""approveAndCall""];
""318_transfer"" [label=""transfer""];
""318_transferFrom"" -> ""318__transfer"";
""318_transfer"" -> ""318__transfer"";
""318_approveAndCall"" -> ""318_approve"";
}
"
0x28cf843d0de2e1fb05636e76569d5a50caf3b817.sol,Bostec,"contract Bostec is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 1500000000e18; uint256 public totalDistributed = 375000000e18; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 15000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_Bostec {
label=""Bostec"";
""944_finishDistribution"" [label=""finishDistribution""];
""944_Bostec"" [label=""Bostec""];
""944_withdraw"" [label=""withdraw""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_transfer"" [label=""transfer""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_getTokens"" [label=""getTokens""];
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_balanceOf"" [label=""balanceOf""];
""944_distr"" [label=""distr""];
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_allowance"" [label=""allowance""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_fallback"" [label=""fallback""];
""944_burn"" [label=""burn""];
""944_transferFrom"" [label=""transferFrom""];
""944_approve"" [label=""approve""];
""944_transferOwnership"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
""944_Bostec"" -> ""944_distr"";
""944_finishDistribution"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_distr"" -> ""944_canDistr"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_getTokens"" -> ""944_distr"";
""944_burn"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_fallback"" -> ""944_getTokens"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_getTokens"" -> ""944_canDistr"";
}
"
0x6f4dcbb16f72853c7382e7100a0713a68e53d9be.sol,GroupBuyContract,contract GroupBuyContract { uint256 public constant MAX_CONTRIBUTION_SLOTS = 20; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; struct Group { address[] contributorArr; mapping(address => uint256) addressToContributorArrIndex; mapping(address => uint256) addressToContribution; bool exists; uint256 contributedBalance; uint256 purchasePrice; },0,"subgraph cluster_2011_GroupBuyContract {
label=""GroupBuyContract"";
""2011_unpause"" [label=""unpause""];
""2011_withdrawCommission"" [label=""withdrawCommission""];
""2011_fallback"" [label=""fallback""];
""2011_setCEO"" [label=""setCEO""];
""2011_setCOO2"" [label=""setCOO2""];
""2011_activatePurchase"" [label=""activatePurchase""];
""2011_adjustCommission"" [label=""adjustCommission""];
""2011__clearContributorRecordInGroup"" [label=""_clearContributorRecordInGroup""];
""2011__distributeProceeds"" [label=""_distributeProceeds""];
""2011_getContributorsInTokenGroupCount"" [label=""getContributorsInTokenGroupCount""];
""2011_getTokenGroupTotalBalance"" [label=""getTokenGroupTotalBalance""];
""2011_getSelfGroupsContributedTo"" [label=""getSelfGroupsContributedTo""];
""2011__newPrice"" [label=""_newPrice""];
""2011_setCOO1"" [label=""setCOO1""];
""2011__addressNotNull"" [label=""_addressNotNull""];
""2011_withdrawBalance"" [label=""withdrawBalance""];
""2011_dissolveTokenGroup"" [label=""dissolveTokenGroup""];
""2011_distributeCustomSaleProceeds"" [label=""distributeCustomSaleProceeds""];
""2011_getGroupPurchasedPrice"" [label=""getGroupPurchasedPrice""];
""2011_contributeToTokenGroup"" [label=""contributeToTokenGroup""];
""2011_getGroupsContributedTo"" [label=""getGroupsContributedTo""];
""2011_GroupBuyContract"" [label=""GroupBuyContract""];
""2011_setToForking"" [label=""setToForking""];
""2011_leaveTokenGroupAndWithdrawBalance"" [label=""leaveTokenGroupAndWithdrawBalance""];
""2011_pause"" [label=""pause""];
""2011__withdrawUserFunds"" [label=""_withdrawUserFunds""];
""2011__purchase"" [label=""_purchase""];
""2011_transferToken"" [label=""transferToken""];
""2011_getSelfContributionBalanceForTokenGroup"" [label=""getSelfContributionBalanceForTokenGroup""];
""2011_setCOO3"" [label=""setCOO3""];
""2011_leaveTokenGroup"" [label=""leaveTokenGroup""];
""2011_setCFO"" [label=""setCFO""];
""2011_distributeSaleProceeds"" [label=""distributeSaleProceeds""];
""2011__clearGroupRecordInContributor"" [label=""_clearGroupRecordInContributor""];
""2011_getContributionBalanceForTokenGroup"" [label=""getContributionBalanceForTokenGroup""];
""2011_getWithdrawableBalance"" [label=""getWithdrawableBalance""];
""2011_getContributorsInTokenGroup"" [label=""getContributorsInTokenGroup""];
""2011_setToNotForking"" [label=""setToNotForking""];
""2011_transferToken"" -> ""2011_onlyCOO"";
""2011_contributeToTokenGroup"" -> ""2011_whenNotPaused"";
""2011_withdrawBalance"" -> ""2011__addressNotNull"";
""2011_adjustCommission"" -> ""2011_onlyCLevel"";
""2011_withdrawBalance"" -> ""2011__withdrawUserFunds"";
""2011_distributeSaleProceeds"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroup"" -> ""2011__clearGroupRecordInContributor"";
""2011_setCEO"" -> ""2011_onlyCEO"";
""2011_unpause"" -> ""2011_onlyCEO"";
""2011_contributeToTokenGroup"" -> ""2011__addressNotNull"";
""2011_pause"" -> ""2011_onlyCLevel"";
""2011_contributeToTokenGroup"" -> ""2011_whenNotForking"";
""2011_pause"" -> ""2011_whenNotPaused"";
""2011_dissolveTokenGroup"" -> ""2011__clearGroupRecordInContributor"";
""2011_activatePurchase"" -> ""2011__purchase"";
""2011_distributeCustomSaleProceeds"" -> ""2011__distributeProceeds"";
""2011_setToForking"" -> ""2011_whenNotForking"";
""2011_unpause"" -> ""2011_whenPaused"";
""2011_getGroupsContributedTo"" -> ""2011__addressNotNull"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__addressNotNull"";
""2011_activatePurchase"" -> ""2011_whenNotPaused"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011_whenNotPaused"";
""2011_setToNotForking"" -> ""2011_onlyCEO"";
""2011_distributeCustomSaleProceeds"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__clearContributorRecordInGroup"";
""2011_distributeSaleProceeds"" -> ""2011__newPrice"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__clearGroupRecordInContributor"";
""2011_dissolveTokenGroup"" -> ""2011_whenForking"";
""2011_setCOO2"" -> ""2011_onlyCEO"";
""2011_contributeToTokenGroup"" -> ""2011__purchase"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__withdrawUserFunds"";
""2011_withdrawCommission"" -> ""2011_onlyCFO"";
""2011_setCOO3"" -> ""2011_onlyCEO"";
""2011_distributeSaleProceeds"" -> ""2011__distributeProceeds"";
""2011__distributeProceeds"" -> ""2011__clearGroupRecordInContributor"";
""2011_getSelfGroupsContributedTo"" -> ""2011__addressNotNull"";
""2011_setCOO1"" -> ""2011_onlyCEO"";
""2011_setToNotForking"" -> ""2011_whenForking"";
""2011_setToForking"" -> ""2011_onlyCLevel"";
""2011_dissolveTokenGroup"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroup"" -> ""2011_whenNotPaused"";
""2011_withdrawBalance"" -> ""2011_whenNotPaused"";
""2011_getWithdrawableBalance"" -> ""2011__addressNotNull"";
""2011_leaveTokenGroup"" -> ""2011__clearContributorRecordInGroup"";
""2011_leaveTokenGroup"" -> ""2011__addressNotNull"";
""2011_setCFO"" -> ""2011_onlyCEO"";
}
"
0x4d3ddfee61326469a1b353920a313f226ea84314.sol,Aracle,"contract Aracle is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 30000000000e18; uint256 public totalDistributed = 15000000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 150000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_873_Aracle {
label=""Aracle"";
""873_withdraw"" [label=""withdraw""];
""873_approve"" [label=""approve""];
""873_getTokenBalance"" [label=""getTokenBalance""];
""873_transferOwnership"" [label=""transferOwnership""];
""873_transfer"" [label=""transfer""];
""873_transferFrom"" [label=""transferFrom""];
""873_distr"" [label=""distr""];
""873_allowance"" [label=""allowance""];
""873_Aracle"" [label=""Aracle""];
""873_balanceOf"" [label=""balanceOf""];
""873_burn"" [label=""burn""];
""873_fallback"" [label=""fallback""];
""873_finishDistribution"" [label=""finishDistribution""];
""873_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""873_getTokens"" [label=""getTokens""];
""873_transferFrom"" -> ""873_onlyPayloadSize"";
""873_transfer"" -> ""873_onlyPayloadSize"";
""873_transferOwnership"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_onlyWhitelist"";
""873_getTokens"" -> ""873_distr"";
""873_finishDistribution"" -> ""873_canDistr"";
""873_burn"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_canDistr"";
""873_finishDistribution"" -> ""873_onlyOwner"";
""873_withdrawForeignTokens"" -> ""873_onlyOwner"";
""873_fallback"" -> ""873_getTokens"";
""873_distr"" -> ""873_canDistr"";
""873_withdraw"" -> ""873_onlyOwner"";
}
"
0x5ace17f87c7391e5792a7683069a8025b83bbd85.sol,SmartBillions,contract SmartBillions is StandardToken { string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; struct Wallet { uint208 balance; uint16 lastDividendPeriod; uint32 nextWithdrawBlock; },0,"subgraph cluster_2742_SmartBillions {
label=""SmartBillions"";
""2742_addHashes"" [label=""addHashes""];
""2742_hashesLength"" [label=""hashesLength""];
""2742_fallback"" [label=""fallback""];
""2742_getHash"" [label=""getHash""];
""2742_commitDividend"" [label=""commitDividend""];
""2742_betHashOf"" [label=""betHashOf""];
""2742_pay"" [label=""pay""];
""2742_resetBet"" [label=""resetBet""];
""2742_investDirect"" [label=""investDirect""];
""2742_houseKeeping"" [label=""houseKeeping""];
""2742_setInvestStart"" [label=""setInvestStart""];
""2742_setBetMax"" [label=""setBetMax""];
""2742_betValueOf"" [label=""betValueOf""];
""2742_play"" [label=""play""];
""2742_addHashes128"" [label=""addHashes128""];
""2742_walletBalanceOf"" [label=""walletBalanceOf""];
""2742_won"" [label=""won""];
""2742_changeOwner"" [label=""changeOwner""];
""2742_putHash"" [label=""putHash""];
""2742_walletBlockOf"" [label=""walletBlockOf""];
""2742_hotStore"" [label=""hotStore""];
""2742_payDividends"" [label=""payDividends""];
""2742_disinvest"" [label=""disinvest""];
""2742_payWallet"" [label=""payWallet""];
""2742_betOf"" [label=""betOf""];
""2742_playRandom"" [label=""playRandom""];
""2742_changeAnimator"" [label=""changeAnimator""];
""2742_SmartBillions"" [label=""SmartBillions""];
""2742_walletPeriodOf"" [label=""walletPeriodOf""];
""2742_putHashes"" [label=""putHashes""];
""2742_dividendsBlocks"" [label=""dividendsBlocks""];
""2742_invest"" [label=""invest""];
""2742_betBlockNumberOf"" [label=""betBlockNumberOf""];
""2742_calcHashes"" [label=""calcHashes""];
""2742_betPrize"" [label=""betPrize""];
""2742_coldStore"" [label=""coldStore""];
""2742_playSystem"" [label=""playSystem""];
""2742_won"" -> ""2742_pay"";
""2742_putHashes"" -> ""2742_putHash"";
""2742_coldStore"" -> ""2742_onlyOwner"";
""2742_resetBet"" -> ""2742_onlyOwner"";
""2742_investDirect"" -> ""2742_invest"";
""2742_betOf"" -> ""2742_betPrize"";
""2742_pay"" -> ""2742_houseKeeping"";
""2742_changeAnimator"" -> ""2742_commitDividend"";
""2742_playRandom"" -> ""2742_playSystem"";
""2742_fallback"" -> ""2742_won"";
""2742_hotStore"" -> ""2742_houseKeeping"";
""2742_payWallet"" -> ""2742_pay"";
""2742_payDividends"" -> ""2742_payWallet"";
""2742_coldStore"" -> ""2742_houseKeeping"";
""2742_fallback"" -> ""2742_commitDividend"";
""2742_setBetMax"" -> ""2742_onlyOwner"";
""2742_changeOwner"" -> ""2742_onlyOwner"";
""2742_won"" -> ""2742_payWallet"";
""2742_addHashes128"" -> ""2742_addHashes"";
""2742_playSystem"" -> ""2742_won"";
""2742_payDividends"" -> ""2742_commitDividend"";
""2742_play"" -> ""2742_playSystem"";
""2742_won"" -> ""2742_betPrize"";
""2742_disinvest"" -> ""2742_payWallet"";
""2742_changeOwner"" -> ""2742_commitDividend"";
""2742_betOf"" -> ""2742_getHash"";
""2742_setInvestStart"" -> ""2742_onlyOwner"";
""2742_putHash"" -> ""2742_calcHashes"";
""2742_fallback"" -> ""2742_invest"";
""2742_fallback"" -> ""2742_play"";
""2742_won"" -> ""2742_getHash"";
""2742_changeAnimator"" -> ""2742_onlyAnimator"";
""2742_disinvest"" -> ""2742_commitDividend"";
""2742_playSystem"" -> ""2742_putHash"";
}
"
0x25073d89644d3b033f422949e70064c60fa05c3c.sol,ExternalTokenHandler,"contract ExternalTokenHandler is ToyTransfers { mapping (address => mapping(uint => uint)) externalTokenBalances; uint constant UID_MAX = 0xFFFFFFFFFFFFFF; function depositEther(uint _toUid) external payable canOperate(_toUid) notZero(msg.value) { require ( _toUid < UID_MAX, ); externalTokenBalances[address(this)][_toUid] += msg.value; }",0,"subgraph cluster_1255_ExternalTokenHandler {
label=""ExternalTokenHandler"";
""1255_withdrawERC20"" [label=""withdrawERC20""];
""1255_withdrawEther"" [label=""withdrawEther""];
""1255_transferEther"" [label=""transferEther""];
""1255_getExternalTokenBalance"" [label=""getExternalTokenBalance""];
""1255_transferERC20"" [label=""transferERC20""];
""1255_depositERC20"" [label=""depositERC20""];
""1255_depositERC20From"" [label=""depositERC20From""];
""1255_depositEther"" [label=""depositEther""];
""1255_transferEther"" -> ""1255_notZero"";
""1255_withdrawEther"" -> ""1255_ownerOf"";
""1255_withdrawEther"" -> ""1255_notZero"";
""1255_depositERC20"" -> ""1255_notZero"";
""1255_transferERC20"" -> ""1255_notZero"";
""1255_withdrawERC20"" -> ""1255_notZero"";
""1255_withdrawERC20"" -> ""1255_canOperate"";
""1255_transferERC20"" -> ""1255_canOperate"";
""1255_depositERC20From"" -> ""1255_notZero"";
""1255_withdrawERC20"" -> ""1255_ownerOf"";
""1255_depositEther"" -> ""1255_notZero"";
""1255_depositEther"" -> ""1255_canOperate"";
""1255_transferEther"" -> ""1255_canOperate"";
""1255_depositERC20"" -> ""1255_canOperate"";
""1255_depositERC20From"" -> ""1255_canOperate"";
""1255_withdrawEther"" -> ""1255_canOperate"";
}
"
0x00346fddca107aec034a367b7324f0d6419bf4b9.sol,Crowdsale,"contract Crowdsale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); function Crowdsale( address ifSuccessfulSendTo, uint fundingGoalInEthers, address addressOfTokenUsedAsReward ) public{ beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; price = (0.00001 ether)/100000 ; tokenReward = token(addressOfTokenUsedAsReward); }",0,"subgraph cluster_229_Crowdsale {
label=""Crowdsale"";
""229_checkGoalReached"" [label=""checkGoalReached""];
""229_Crowdsale"" [label=""Crowdsale""];
""229_safeWithdrawal"" [label=""safeWithdrawal""];
""229_fallback"" [label=""fallback""];
""229_checkGoalReached"" -> ""229_afterDeadline"";
""229_safeWithdrawal"" -> ""229_afterDeadline"";
}
"
0x7335f6347dce8d961bf0e36185fc75f03f4a3dff.sol,StandardToken,contract StandardToken is ERC20 { using SafeMath for uint256; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; function balanceOf(address _owner) public view returns (uint256) { return balances[_owner]; },0,"subgraph cluster_599_StandardToken {
label=""StandardToken"";
""599_approve"" [label=""approve""];
""599_allowance"" [label=""allowance""];
""599_decreaseApproval"" [label=""decreaseApproval""];
""599_increaseApproval"" [label=""increaseApproval""];
""599_balanceOf"" [label=""balanceOf""];
""599_burn"" [label=""burn""];
""599_transferFrom"" [label=""transferFrom""];
""599_burnFrom"" [label=""burnFrom""];
""599_transfer"" [label=""transfer""];
}
"
0xcf106b9644eb97deb5b78ab22da160ffca67a448.sol,BaseWallet,"contract BaseWallet { address public implementation; address public owner; mapping (address => bool) public authorised; mapping (bytes4 => address) public enabled; uint public modules; event AuthorisedModule(address indexed module, bool value); event EnabledStaticCall(address indexed module, bytes4 indexed method); event Invoked(address indexed module, address indexed target, uint indexed value, bytes data); event Received(uint indexed value, address indexed sender, bytes data); event OwnerChanged(address owner); modifier moduleOnly { require(authorised[msg.sender], ); _; }",0,"subgraph cluster_2435_BaseWallet {
label=""BaseWallet"";
""2435_setOwner"" [label=""setOwner""];
""2435_enableStaticCall"" [label=""enableStaticCall""];
""2435_authoriseModule"" [label=""authoriseModule""];
""2435_fallback"" [label=""fallback""];
""2435_invoke"" [label=""invoke""];
""2435_init"" [label=""init""];
""2435_enableStaticCall"" -> ""2435_moduleOnly"";
""2435_authoriseModule"" -> ""2435_moduleOnly"";
""2435_setOwner"" -> ""2435_moduleOnly"";
""2435_invoke"" -> ""2435_moduleOnly"";
}
"
0x6538e70ac382d2026e9e5f2e2c8b22d580ea9f1d.sol,BDragon,"contract BDragon is Token, Owner { uint256 public constant INITIAL_SUPPLY = 15 * 10000 * 10000 * 1 ether; string public constant NAME = ; string public constant SYMBOL = ; uint8 public constant DECIMALS = 18; uint256 public constant BUY = 0; uint256 constant RATE = 1 szabo; bool private couldTrade = false; uint256 public sellPrice; uint256 public buyPrice; uint minBalanceForAccounts; mapping (address => uint256) public balanceOf; mapping (address => bool) frozenAccount; event FrozenFunds(address indexed _target, bool _frozen); function BDragon() Token(INITIAL_SUPPLY, NAME, DECIMALS, SYMBOL) { balanceOf[msg.sender] = totalSupply; buyPrice = 100000000; sellPrice = 100000000; }",0,"subgraph cluster_861_BDragon {
label=""BDragon"";
""861_transferFrom"" [label=""transferFrom""];
""861_buy"" [label=""buy""];
""861_transfer"" [label=""transfer""];
""861_freezeAccount"" [label=""freezeAccount""];
""861_withdraw"" [label=""withdraw""];
""861_setCouldTrade"" [label=""setCouldTrade""];
""861_stopTrade"" [label=""stopTrade""];
""861_setPrices"" [label=""setPrices""];
""861_BDragon"" [label=""BDragon""];
""861_sell"" [label=""sell""];
""861_fallback"" [label=""fallback""];
""861_setCouldTrade"" -> ""861_onlyOwner"";
""861_BDragon"" -> ""861_Token"";
""861_setPrices"" -> ""861_onlyOwner"";
""861_freezeAccount"" -> ""861_onlyOwner"";
""861_stopTrade"" -> ""861_onlyOwner"";
""861_withdraw"" -> ""861_onlyOwner"";
}
"
0xed6c511ed66b172c4d28eac2c3dacc62972b1b7f.sol,Administrable,"contract Administrable is Ownable, RBAC { string public constant ROLE_LOCKUP = ; string public constant ROLE_MINT = ; constructor () public { addRole(msg.sender, ROLE_LOCKUP); addRole(msg.sender, ROLE_MINT); }",0,"subgraph cluster_518_Administrable {
label=""Administrable"";
""518_isAdmin"" [label=""isAdmin""];
""518_removeAdmin"" [label=""removeAdmin""];
""518_addAdmin"" [label=""addAdmin""];
""518_claimAdmin"" [label=""claimAdmin""];
""518_constructor"" [label=""constructor""];
""518_constructor"" -> ""518_addRole"";
""518_claimAdmin"" -> ""518_removeRoleAll"";
""518_removeAdmin"" -> ""518_onlyOwner"";
""518_addAdmin"" -> ""518_addRole"";
""518_removeAdmin"" -> ""518_removeRole"";
""518_claimAdmin"" -> ""518_onlyOwner"";
""518_claimAdmin"" -> ""518_addRole"";
""518_isAdmin"" -> ""518_hasRole"";
""518_addAdmin"" -> ""518_onlyOwner"";
}
"
0x33259c14a28c89af457c9dbac9743f3efb651f09.sol,PODH,contract PODH { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1307_PODH {
label=""PODH"";
""1307_purchaseTokens"" [label=""purchaseTokens""];
""1307_disableInitialStage"" [label=""disableInitialStage""];
""1307_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1307_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1307_setName"" [label=""setName""];
""1307_transfer"" [label=""transfer""];
""1307_setAdministrator"" [label=""setAdministrator""];
""1307_myTokens"" [label=""myTokens""];
""1307_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1307_balanceOf"" [label=""balanceOf""];
""1307_buy"" [label=""buy""];
""1307_sqrt"" [label=""sqrt""];
""1307_totalSupply"" [label=""totalSupply""];
""1307_withdraw"" [label=""withdraw""];
""1307_exit"" [label=""exit""];
""1307_dividendsOf"" [label=""dividendsOf""];
""1307_buyPrice"" [label=""buyPrice""];
""1307_PODH"" [label=""PODH""];
""1307_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1307_reinvest"" [label=""reinvest""];
""1307_myDividends"" [label=""myDividends""];
""1307_setStakingRequirement"" [label=""setStakingRequirement""];
""1307_sell"" [label=""sell""];
""1307_fallback"" [label=""fallback""];
""1307_sellPrice"" [label=""sellPrice""];
""1307_setSymbol"" [label=""setSymbol""];
""1307_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1307_withdraw"" -> ""1307_onlyStronghands"";
""1307_transfer"" -> ""1307_onlyBagholders"";
""1307_sellPrice"" -> ""1307_tokensToEthereum_"";
""1307_setAdministrator"" -> ""1307_onlyAdministrator"";
""1307_calculateTokensReceived"" -> ""1307_ethereumToTokens_"";
""1307_calculateEthereumReceived"" -> ""1307_tokensToEthereum_"";
""1307_disableInitialStage"" -> ""1307_onlyAdministrator"";
""1307_purchaseTokens"" -> ""1307_antiEarlyWhale"";
""1307_myTokens"" -> ""1307_balanceOf"";
""1307_reinvest"" -> ""1307_onlyStronghands"";
""1307_transfer"" -> ""1307_withdraw"";
""1307_sell"" -> ""1307_onlyBagholders"";
""1307_buyPrice"" -> ""1307_tokensToEthereum_"";
""1307_myDividends"" -> ""1307_dividendsOf"";
""1307_transfer"" -> ""1307_myDividends"";
""1307_withdraw"" -> ""1307_myDividends"";
""1307_exit"" -> ""1307_withdraw"";
""1307_reinvest"" -> ""1307_myDividends"";
""1307_buy"" -> ""1307_purchaseTokens"";
""1307_exit"" -> ""1307_sell"";
""1307_setName"" -> ""1307_onlyAdministrator"";
""1307_reinvest"" -> ""1307_purchaseTokens"";
""1307_purchaseTokens"" -> ""1307_ethereumToTokens_"";
""1307_transfer"" -> ""1307_tokensToEthereum_"";
""1307_setSymbol"" -> ""1307_onlyAdministrator"";
""1307_fallback"" -> ""1307_purchaseTokens"";
""1307_ethereumToTokens_"" -> ""1307_sqrt"";
""1307_setStakingRequirement"" -> ""1307_onlyAdministrator"";
""1307_sell"" -> ""1307_tokensToEthereum_"";
}
"
0x27369e8f43f44c26853a46da7e6cb52d203b59ce.sol,AgileICOWithAssistance,contract AgileICOWithAssistance { using SafeMath for uint; address public operator; address public juryOperator; address public projectWallet; address public arbitrationAddress; address public juryOnlineWallet; bool public requireTokens; uint public promisedTokens; uint public etherAllowance; uint public jotAllowance; uint public commissionOnInvestmentJot; uint public commissionOnInvestmentEth; uint public percentForFuture; uint public rate = 1; address public currentCycleAddress; uint public currentCycleNumber; uint public currentFundingRound; uint public minimumInvestment; uint public lastRateChange; Token public token; struct Offer { uint etherAmount; uint tokenAmount; bool accepted; uint numberOfDeals; },0,"subgraph cluster_1897_AgileICOWithAssistance {
label=""AgileICOWithAssistance"";
""1897_acceptOffer"" [label=""acceptOffer""];
""1897_withdrawOffer"" [label=""withdrawOffer""];
""1897_setCurrentFundingRound"" [label=""setCurrentFundingRound""];
""1897_setToken"" [label=""setToken""];
""1897_addCycleAddress"" [label=""addCycleAddress""];
""1897_withdrawEther"" [label=""withdrawEther""];
""1897_constructor"" [label=""constructor""];
""1897_setRate"" [label=""setRate""];
""1897_failSafe"" [label=""failSafe""];
""1897_fallback"" [label=""fallback""];
""1897_addFundingRound"" [label=""addFundingRound""];
""1897_setNextCycle"" [label=""setNextCycle""];
""1897_sendFundsToNextCycle"" [label=""sendFundsToNextCycle""];
""1897_setNextCycle"" -> ""1897_onlyAdmin"";
""1897_addFundingRound"" -> ""1897_onlyAdmin"";
""1897_setRate"" -> ""1897_onlyAdmin"";
""1897_setCurrentFundingRound"" -> ""1897_onlyAdmin"";
""1897_sendFundsToNextCycle"" -> ""1897_onlyAdmin"";
""1897_acceptOffer"" -> ""1897_onlyAdmin"";
""1897_addCycleAddress"" -> ""1897_onlyAdmin"";
""1897_setToken"" -> ""1897_onlyAdmin"";
}
"
0x37d6e7f287200c740012747d2a79295caed2db35.sol,ALPCoin,contract ALPCoin is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 100000000 * (10 ** 8); address private owner; mapping(address => bool) private frozenAccount; mapping(address => bool) private burningAccount; uint256 tokenCount = 0; bool public frozen = false; bool public enabledBurning = true; bool public enabledCreateTokens = true; bool public enabledFreezeAccounts = true; bool public enabledFreezeTransfers = true; address public migratedToAddress; constructor() { owner = msg.sender; },0,"subgraph cluster_1024_ALPCoin {
label=""ALPCoin"";
""1024_unfreezeTransfers"" [label=""unfreezeTransfers""];
""1024_disableCreateTokens"" [label=""disableCreateTokens""];
""1024_constructor"" [label=""constructor""];
""1024_burn"" [label=""burn""];
""1024_totalSupply"" [label=""totalSupply""];
""1024_approve"" [label=""approve""];
""1024_disableFreezeTransfers"" [label=""disableFreezeTransfers""];
""1024_createTokens"" [label=""createTokens""];
""1024_refundTokens"" [label=""refundTokens""];
""1024_disableBurning"" [label=""disableBurning""];
""1024_transferFrom"" [label=""transferFrom""];
""1024_migrateTo"" [label=""migrateTo""];
""1024_setOwner"" [label=""setOwner""];
""1024_freezeAccount"" [label=""freezeAccount""];
""1024_disableFreezeAccounts"" [label=""disableFreezeAccounts""];
""1024_freezeTransfers"" [label=""freezeTransfers""];
""1024_burningCapableAccount"" [label=""burningCapableAccount""];
""1024_transfer"" [label=""transfer""];
""1024_createTokens"" -> ""1024_safeSub"";
""1024_transferFrom"" -> ""1024_transferFrom"";
""1024_burn"" -> ""1024_safeSub"";
""1024_approve"" -> ""1024_allowance"";
""1024_createTokens"" -> ""1024_safeAdd"";
""1024_transfer"" -> ""1024_transfer"";
""1024_approve"" -> ""1024_approve"";
}
"
0x472eb1a4c31e4c6557feb00e90987e564ca412af.sol,MogoToken,"contract MogoToken is TokenERC20{ string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 200000000 * 10 ** uint256(decimals); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); constructor() public{ balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_711_MogoToken {
label=""MogoToken"";
""711_constructor"" [label=""constructor""];
""711_batchTransfer"" [label=""batchTransfer""];
""711__transfer"" [label=""_transfer""];
""711_burn"" [label=""burn""];
""711_freezeAccount"" [label=""freezeAccount""];
""711_burn"" -> ""711_onlyOwner"";
""711_batchTransfer"" -> ""711_onlyOwner"";
""711_freezeAccount"" -> ""711_onlyOwner"";
}
"
0x4221eb87b28de194e916f2b09274471fb0b01b1c.sol,TrueDeckToken,"contract TrueDeckToken is ERC20, PoSTokenStandard, Pausable { using SafeMath for uint256; event CoinAgeRecordEvent( address indexed who, uint256 value, uint64 time ); event CoinAgeResetEvent( address indexed who, uint256 value, uint64 time ); string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; uint256 totalSupply_; uint256 public MAX_TOTAL_SUPPLY = 200000000 * 10 ** uint256(decimals); uint256 public INITIAL_SUPPLY = 70000000 * 10 ** uint256(decimals); uint256 public chainStartTime; uint256 public chainStartBlockNumber; struct CoinAgeRecord { uint256 amount; uint64 time; }",0,"subgraph cluster_1608_TrueDeckToken {
label=""TrueDeckToken"";
""1608_balanceOf"" [label=""balanceOf""];
""1608_calculateReward"" [label=""calculateReward""];
""1608_calculateRewardForAddressAt"" [label=""calculateRewardForAddressAt""];
""1608_constructor"" [label=""constructor""];
""1608_transferFrom"" [label=""transferFrom""];
""1608_coinAgeForAddressAt"" [label=""coinAgeForAddressAt""];
""1608_startStakingAt"" [label=""startStakingAt""];
""1608_logCoinAgeRecord"" [label=""logCoinAgeRecord""];
""1608_mint"" [label=""mint""];
""1608_approve"" [label=""approve""];
""1608_totalSupply"" [label=""totalSupply""];
""1608_allowance"" [label=""allowance""];
""1608_calculateRewardInternal"" [label=""calculateRewardInternal""];
""1608_calculateRewardForAddress"" [label=""calculateRewardForAddress""];
""1608_annualInterest"" [label=""annualInterest""];
""1608_increaseApproval"" [label=""increaseApproval""];
""1608_coinAgeRecordForAddress"" [label=""coinAgeRecordForAddress""];
""1608_transfer"" [label=""transfer""];
""1608_isContract"" [label=""isContract""];
""1608_coinAgeForAddress"" [label=""coinAgeForAddress""];
""1608_calculateRewardAt"" [label=""calculateRewardAt""];
""1608_batchTransfer"" [label=""batchTransfer""];
""1608_coinAge"" [label=""coinAge""];
""1608_getAnnualInterest"" [label=""getAnnualInterest""];
""1608_decreaseApproval"" [label=""decreaseApproval""];
""1608_getCoinAgeInternal"" [label=""getCoinAgeInternal""];
""1608_coinAgeForAddressAt"" -> ""1608_getCoinAgeInternal"";
""1608_coinAge"" -> ""1608_getCoinAgeInternal"";
""1608_calculateRewardForAddress"" -> ""1608_onlyOwner"";
""1608_logCoinAgeRecord"" -> ""1608_isContract"";
""1608_calculateRewardInternal"" -> ""1608_getAnnualInterest"";
""1608_mint"" -> ""1608_canMint"";
""1608_calculateReward"" -> ""1608_calculateRewardInternal"";
""1608_batchTransfer"" -> ""1608_onlyOwner"";
""1608_transfer"" -> ""1608_logCoinAgeRecord"";
""1608_calculateRewardForAddressAt"" -> ""1608_calculateRewardInternal"";
""1608_calculateRewardForAddressAt"" -> ""1608_onlyOwner"";
""1608_transferFrom"" -> ""1608_logCoinAgeRecord"";
""1608_coinAgeForAddress"" -> ""1608_getCoinAgeInternal"";
""1608_coinAgeForAddress"" -> ""1608_onlyOwner"";
""1608_increaseApproval"" -> ""1608_whenNotPaused"";
""1608_transfer"" -> ""1608_whenNotPaused"";
""1608_annualInterest"" -> ""1608_getAnnualInterest"";
""1608_coinAgeRecordForAddress"" -> ""1608_onlyOwner"";
""1608_mint"" -> ""1608_whenNotPaused"";
""1608_coinAgeForAddressAt"" -> ""1608_onlyOwner"";
""1608_calculateRewardInternal"" -> ""1608_getCoinAgeInternal"";
""1608_transfer"" -> ""1608_mint"";
""1608_mint"" -> ""1608_calculateRewardInternal"";
""1608_calculateRewardForAddress"" -> ""1608_calculateRewardInternal"";
""1608_startStakingAt"" -> ""1608_onlyOwner"";
""1608_calculateRewardAt"" -> ""1608_calculateRewardInternal"";
""1608_transferFrom"" -> ""1608_whenNotPaused"";
""1608_approve"" -> ""1608_whenNotPaused"";
""1608_decreaseApproval"" -> ""1608_whenNotPaused"";
}
"
0x5b36ca95ed4145a608b9f474f81f3c345dc6599f.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_590_TokenERC20 {
label=""TokenERC20"";
""590_approve"" [label=""approve""];
""590__transfer"" [label=""_transfer""];
""590_approveAndCall"" [label=""approveAndCall""];
""590_transferFrom"" [label=""transferFrom""];
""590_burn"" [label=""burn""];
""590_transfer"" [label=""transfer""];
""590_burnFrom"" [label=""burnFrom""];
""590_constructor"" [label=""constructor""];
""590_transferFrom"" -> ""590__transfer"";
""590_transfer"" -> ""590__transfer"";
""590_approveAndCall"" -> ""590_approve"";
}
"
0xbfd78659212f00de65a6411dadc75878930725ec.sol,AMAL,"contract AMAL is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; string public constant AAcontributors = ; uint8 public decimals = 8; uint256 public totalSupply = 21e7 * 1e8; uint256 public distributeAmount = 0; bool public mintingFinished = false; address public founder = 0xBF89166D97dDBe3444e26a84606ee18B4fF34164; mapping(address => uint256) public balanceOf; mapping(address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed from, uint256 amount); event Mint(address indexed to, uint256 amount); event MintFinished(); function AMAL() public { owner = founder; balanceOf[founder] = totalSupply.mul(100).div(100); }",0,"subgraph cluster_1852_AMAL {
label=""AMAL"";
""1852_lockupAccounts"" [label=""lockupAccounts""];
""1852_transferToAddress"" [label=""transferToAddress""];
""1852_finishMinting"" [label=""finishMinting""];
""1852_decimals"" [label=""decimals""];
""1852_approve"" [label=""approve""];
""1852_allowance"" [label=""allowance""];
""1852_transfer"" [label=""transfer""];
""1852_freezeAccounts"" [label=""freezeAccounts""];
""1852_AMAL"" [label=""AMAL""];
""1852_burn"" [label=""burn""];
""1852_isContract"" [label=""isContract""];
""1852_autoDistribute"" [label=""autoDistribute""];
""1852_mint"" [label=""mint""];
""1852_name"" [label=""name""];
""1852_setDistributeAmount"" [label=""setDistributeAmount""];
""1852_collectTokens"" [label=""collectTokens""];
""1852_distributeAirdrop"" [label=""distributeAirdrop""];
""1852_balanceOf"" [label=""balanceOf""];
""1852_transferToContract"" [label=""transferToContract""];
""1852_totalSupply"" [label=""totalSupply""];
""1852_fallback"" [label=""fallback""];
""1852_transferFrom"" [label=""transferFrom""];
""1852_symbol"" [label=""symbol""];
""1852_transfer"" -> ""1852_transferToContract"";
""1852_setDistributeAmount"" -> ""1852_onlyOwner"";
""1852_fallback"" -> ""1852_autoDistribute"";
""1852_finishMinting"" -> ""1852_canMint"";
""1852_finishMinting"" -> ""1852_onlyOwner"";
""1852_collectTokens"" -> ""1852_onlyOwner"";
""1852_freezeAccounts"" -> ""1852_onlyOwner"";
""1852_mint"" -> ""1852_canMint"";
""1852_mint"" -> ""1852_onlyOwner"";
""1852_lockupAccounts"" -> ""1852_onlyOwner"";
""1852_burn"" -> ""1852_onlyOwner"";
""1852_transfer"" -> ""1852_transferToAddress"";
""1852_transfer"" -> ""1852_isContract"";
}
"
0xebd79044b0a3261b5f2ff95bd06e3a17e7d109fb.sol,FreezingToken,contract FreezingToken is PausableToken { struct freeze { uint256 amount; uint256 when; },0,"subgraph cluster_1466_FreezingToken {
label=""FreezingToken"";
""1466_masFreezedTokens"" [label=""masFreezedTokens""];
""1466_freezeTokens"" [label=""freezeTokens""];
""1466_freezedTokenOf"" [label=""freezedTokenOf""];
""1466_transfer"" [label=""transfer""];
""1466_defrostDate"" [label=""defrostDate""];
""1466_transferFrom"" [label=""transferFrom""];
""1466_transferAndFreeze"" [label=""transferAndFreeze""];
""1466_masFreezedTokens"" -> ""1466_onlyAdmin"";
""1466_transferFrom"" -> ""1466_freezedTokenOf"";
""1466_transferFrom"" -> ""1466_transferFrom"";
""1466_transferAndFreeze"" -> ""1466_transfer"";
""1466_transfer"" -> ""1466_balanceOf"";
""1466_transferAndFreeze"" -> ""1466_freezedTokenOf"";
""1466_transfer"" -> ""1466_freezedTokenOf"";
""1466_transfer"" -> ""1466_transfer"";
""1466_transferFrom"" -> ""1466_balanceOf"";
}
"
0x17e65b46ad1ebfb8f9cacde8e274b377831a1253.sol,BigbomToken,"contract BigbomToken is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public totalSupply = 2000000000 * 1e18; uint public constant founderAmount = 200000000 * 1e18; uint public constant coreStaffAmount = 60000000 * 1e18; uint public constant advisorAmount = 140000000 * 1e18; uint public constant networkGrowthAmount = 600000000 * 1e18; uint public constant reserveAmount = 635000000 * 1e18; uint public constant bountyAmount = 40000000 * 1e18; uint public constant publicSaleAmount = 275000000 * 1e18; address public bbFounderCoreStaffWallet ; address public bbAdvisorWallet; address public bbAirdropWallet; address public bbNetworkGrowthWallet; address public bbReserveWallet; address public bbPublicSaleWallet; uint public saleStartTime; uint public saleEndTime; address public tokenSaleContract; BigbomPrivateSaleList public privateSaleList; mapping (address => bool) public frozenAccount; mapping (address => uint) public frozenTime; mapping (address => uint) public maxAllowedAmount; event FrozenFunds(address target, bool frozen, uint _seconds); function checkMaxAllowed(address target) public constant returns (uint) { var maxAmount = balances[target]; if(target == bbFounderCoreStaffWallet){ maxAmount = 10000000 * 1e18; }",0,"subgraph cluster_1444_BigbomToken {
label=""BigbomToken"";
""1444_setPrivateList"" [label=""setPrivateList""];
""1444_transferPrivateSale"" [label=""transferPrivateSale""];
""1444_selfFreeze"" [label=""selfFreeze""];
""1444_checkMaxAllowed"" [label=""checkMaxAllowed""];
""1444_setTimeSale"" [label=""setTimeSale""];
""1444_burn"" [label=""burn""];
""1444_transferFrom"" [label=""transferFrom""];
""1444_setTokenSaleContract"" [label=""setTokenSaleContract""];
""1444_burnFrom"" [label=""burnFrom""];
""1444_BigbomToken"" [label=""BigbomToken""];
""1444_transfer"" [label=""transfer""];
""1444_freezeAccount"" [label=""freezeAccount""];
""1444_emergencyERC20Drain"" [label=""emergencyERC20Drain""];
""1444_transfer"" -> ""1444_checkMaxAllowed"";
""1444_burnFrom"" -> ""1444_onlyWhenTransferEnabled"";
""1444_emergencyERC20Drain"" -> ""1444_onlyOwner"";
""1444_transferFrom"" -> ""1444_checkMaxAllowed"";
""1444_freezeAccount"" -> ""1444_onlyOwner"";
""1444_transferFrom"" -> ""1444_validDestination"";
""1444_burn"" -> ""1444_onlyWhenTransferEnabled"";
""1444_transferFrom"" -> ""1444_selfFreeze"";
""1444_transferFrom"" -> ""1444_onlyWhenTransferEnabled"";
""1444_transferFrom"" -> ""1444_transferFrom"";
""1444_transfer"" -> ""1444_validDestination"";
""1444_transferFrom"" -> ""1444_transfer"";
""1444_burnFrom"" -> ""1444_transferFrom"";
""1444_burnFrom"" -> ""1444_burn"";
""1444_setTimeSale"" -> ""1444_onlyOwner"";
""1444_transferPrivateSale"" -> ""1444_transfer"";
""1444_transfer"" -> ""1444_validFrom"";
""1444_setTokenSaleContract"" -> ""1444_onlyOwner"";
""1444_transfer"" -> ""1444_transfer"";
""1444_transfer"" -> ""1444_selfFreeze"";
""1444_BigbomToken"" -> ""1444_transferOwnership"";
""1444_setPrivateList"" -> ""1444_onlyOwner"";
""1444_transferPrivateSale"" -> ""1444_onlyOwner"";
""1444_transferPrivateSale"" -> ""1444_onlyPrivateListEnabled"";
""1444_transfer"" -> ""1444_onlyWhenTransferEnabled"";
""1444_transferFrom"" -> ""1444_validFrom"";
}
"
0xc1a86cc7dc0e12ab5c9bc921a497c87d666e8d11.sol,ldoh,"contract ldoh is EthereumSmartContract { event onAffiliateBonus( address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime ); event onClaimTokens( address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime ); event onHodlTokens( address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime ); event onAddContractAddress( address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime ); event onCashbackCode( address indexed hodler, address cashbackcode ); event onUnlockedTokens( uint256 returned ); event onReturnAll( uint256 returned ); address internal DefaultToken; struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; }",0,"subgraph cluster_2346_ldoh {
label=""ldoh"";
""2346_AddSpeedDistribution"" [label=""AddSpeedDistribution""];
""2346_AddMaxContribution"" [label=""AddMaxContribution""];
""2346_HodlTokens2"" [label=""HodlTokens2""];
""2346_EthereumNodesFees"" [label=""EthereumNodesFees""];
""2346_Send0ETH_Deposit"" [label=""Send0ETH_Deposit""];
""2346_PayToken"" [label=""PayToken""];
""2346_GetSafe"" [label=""GetSafe""];
""2346_Send0ETH_Withdraw"" [label=""Send0ETH_Withdraw""];
""2346_UpdateUserData1"" [label=""UpdateUserData1""];
""2346_GetContractBalance"" [label=""GetContractBalance""];
""2346_SendUnlockedTokens"" [label=""SendUnlockedTokens""];
""2346_HodlTokens"" [label=""HodlTokens""];
""2346_CashbackCode"" [label=""CashbackCode""];
""2346_ReturnAllTokens"" [label=""ReturnAllTokens""];
""2346_WithdrawEth"" [label=""WithdrawEth""];
""2346_Send0ETH_Setting"" [label=""Send0ETH_Setting""];
""2346_UnlockToken"" [label=""UnlockToken""];
""2346_GetHodlTokensBalance"" [label=""GetHodlTokensBalance""];
""2346_fallback"" [label=""fallback""];
""2346_AddContractAddress"" [label=""AddContractAddress""];
""2346_GetTokenReserve"" [label=""GetTokenReserve""];
""2346_constructor"" [label=""constructor""];
""2346_sub"" [label=""sub""];
""2346_mul"" [label=""mul""];
""2346_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""2346_HodlTokens3"" [label=""HodlTokens3""];
""2346_GetUserSafesLength"" [label=""GetUserSafesLength""];
""2346_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""2346_ClaimTokens"" [label=""ClaimTokens""];
""2346_add"" [label=""add""];
""2346_div"" [label=""div""];
""2346_UpdateUserData2"" [label=""UpdateUserData2""];
""2346_UpdateUserData2"" -> ""2346_sub"";
""2346_EthereumNodesFees"" -> ""2346_sub"";
""2346_AddSpeedDistribution"" -> ""2346_restricted"";
""2346_ReturnAllTokens"" -> ""2346_mul"";
""2346_UpdateUserData1"" -> ""2346_sub"";
""2346_HodlTokens"" -> ""2346_HodlTokens2"";
""2346_ReturnAllTokens"" -> ""2346_sub"";
""2346_ReturnAllTokens"" -> ""2346_restricted"";
""2346_Send0ETH_Deposit"" -> ""2346_add"";
""2346_UpdateUserData2"" -> ""2346_PayToken"";
""2346_SendUnlockedTokens"" -> ""2346_restricted"";
""2346_HodlTokens2"" -> ""2346_mul"";
""2346_AddContractAddress"" -> ""2346_restricted"";
""2346_fallback"" -> ""2346_add"";
""2346_PayToken"" -> ""2346_add"";
""2346_HodlTokens3"" -> ""2346_add"";
""2346_AddSpeedDistribution"" -> ""2346_div"";
""2346_HodlTokens2"" -> ""2346_HodlTokens3"";
""2346_UnlockToken"" -> ""2346_div"";
""2346_Send0ETH_Withdraw"" -> ""2346_restricted"";
""2346_UpdateUserData2"" -> ""2346_mul"";
""2346_HodlTokens2"" -> ""2346_div"";
""2346_WithdrawAffiliate"" -> ""2346_add"";
""2346_UnlockToken"" -> ""2346_mul"";
""2346_WithdrawEth"" -> ""2346_restricted"";
""2346_AddSpeedDistribution"" -> ""2346_mul"";
""2346_HodlTokens2"" -> ""2346_add"";
""2346_Send0ETH_Deposit"" -> ""2346_restricted"";
""2346_SendUnlockedTokens"" -> ""2346_UpdateUserData1"";
""2346_ReturnAllTokens"" -> ""2346_PayToken"";
""2346_AddMaxContribution"" -> ""2346_restricted"";
""2346_WithdrawAffiliate"" -> ""2346_sub"";
""2346_UpdateUserData1"" -> ""2346_div"";
""2346_ReturnAllTokens"" -> ""2346_div"";
""2346_UpdateUserData1"" -> ""2346_add"";
""2346_SendUnlockedTokens"" -> ""2346_WithdrawAffiliate"";
""2346_UpdateUserData2"" -> ""2346_div"";
""2346_UpdateUserData2"" -> ""2346_add"";
""2346_EthereumNodesFees"" -> ""2346_restricted"";
""2346_ClaimTokens"" -> ""2346_UnlockToken"";
""2346_fallback"" -> ""2346_sub"";
""2346_UnlockToken"" -> ""2346_sub"";
""2346_UpdateUserData1"" -> ""2346_UpdateUserData2"";
""2346_UnlockToken"" -> ""2346_PayToken"";
""2346_HodlTokens2"" -> ""2346_sub"";
""2346_UpdateUserData1"" -> ""2346_mul"";
""2346_Send0ETH_Setting"" -> ""2346_restricted"";
""2346_UnlockToken"" -> ""2346_UpdateUserData1"";
}
"
0xf12b9b6956b719a2c07873154f9e56bd13dfa24e.sol,Whitelist,contract Whitelist is Ownable { mapping(address => bool) public whitelist; event WhitelistedAddressAdded(address addr); event WhitelistedAddressRemoved(address addr); modifier onlyWhitelisted() { require(whitelist[msg.sender]); _; },0,"subgraph cluster_469_Whitelist {
label=""Whitelist"";
""469_addAddressToWhitelist"" [label=""addAddressToWhitelist""];
""469_removeAddressesFromWhitelist"" [label=""removeAddressesFromWhitelist""];
""469_removeAddressFromWhitelist"" [label=""removeAddressFromWhitelist""];
""469_addAddressesToWhitelist"" [label=""addAddressesToWhitelist""];
""469_addAddressToWhitelist"" -> ""469_onlyOwner"";
""469_removeAddressesFromWhitelist"" -> ""469_removeAddressFromWhitelist"";
""469_removeAddressesFromWhitelist"" -> ""469_onlyOwner"";
""469_addAddressesToWhitelist"" -> ""469_addAddressToWhitelist"";
""469_removeAddressFromWhitelist"" -> ""469_onlyOwner"";
""469_addAddressesToWhitelist"" -> ""469_onlyOwner"";
}
"
0x18365e32f5e5615fe73592f7c2dbfa73538708c6.sol,PreSaleI,"contract PreSaleI is Whitelist { using SafeMath for uint256; uint256 public exchangeRate; uint256 public minValue; uint256 public maxTotal; uint256 public maxPerAddress; uint256 public startTimestamp; uint256 public endTimestamp; bool public enabled; address public wallet; ERC20 public token; uint256 public accumulatedAmount = 0; uint256 public accumulatedAmountExternal = 0; mapping (address => uint256) public buyAmounts; address[] public addresses; constructor(ERC20 _token, address _wallet, uint256 _exchangeRate, uint256 _minValue, uint256 _maxTotal, uint256 _maxPerAddress, uint256 _startTimestamp, uint256 _endTimestamp) public { require(_token != address(0)); require(_wallet != address(0)); token = _token; wallet = _wallet; exchangeRate = _exchangeRate; minValue = _minValue; maxTotal = _maxTotal; maxPerAddress = _maxPerAddress; startTimestamp = _startTimestamp; endTimestamp = _endTimestamp; enabled = false; }",0,"subgraph cluster_1148_PreSaleI {
label=""PreSaleI"";
""1148_constructor"" [label=""constructor""];
""1148_buyTokens"" [label=""buyTokens""];
""1148_deliver"" [label=""deliver""];
""1148_toggleEnabled"" [label=""toggleEnabled""];
""1148_getNotDelivered"" [label=""getNotDelivered""];
""1148_refund"" [label=""refund""];
""1148_updateExternalAmount"" [label=""updateExternalAmount""];
""1148__isEndCollect"" [label=""_isEndCollect""];
""1148__calculateAmounts"" [label=""_calculateAmounts""];
""1148_withdrawEth"" [label=""withdrawEth""];
""1148_terminate"" [label=""terminate""];
""1148_fallback"" [label=""fallback""];
""1148_buyTokens"" -> ""1148__calculateAmounts"";
""1148_deliver"" -> ""1148_onlyOwner"";
""1148_terminate"" -> ""1148_onlyOwner"";
""1148_refund"" -> ""1148_onlyOwner"";
""1148_terminate"" -> ""1148_getNotDelivered"";
""1148_buyTokens"" -> ""1148_onlyWhitelisted"";
""1148_toggleEnabled"" -> ""1148_onlyOwner"";
""1148_deliver"" -> ""1148__isEndCollect"";
""1148_refund"" -> ""1148__isEndCollect"";
""1148_fallback"" -> ""1148_buyTokens"";
""1148_updateExternalAmount"" -> ""1148_onlyOwner"";
""1148_withdrawEth"" -> ""1148_onlyOwner"";
}
"
0x72d84a0fd9ca53fa302a0a1ce4be22b1072274be.sol,EthereumPlus,"contract EthereumPlus is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint public decimals; uint private _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 6; _totalSupply = 100000000; _totalSupply = _totalSupply * 10 ** decimals; balances[0x76a7fd7b41F27F0393dF8D23487CeF5fDB578705] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_550_EthereumPlus {
label=""EthereumPlus"";
""550_burn"" [label=""burn""];
""550_approveAndCall"" [label=""approveAndCall""];
""550_totalSupply"" [label=""totalSupply""];
""550_balanceOf"" [label=""balanceOf""];
""550_constructor"" [label=""constructor""];
""550_fallback"" [label=""fallback""];
""550_transferFrom"" [label=""transferFrom""];
""550_approve"" [label=""approve""];
""550_allowance"" [label=""allowance""];
""550_transfer"" [label=""transfer""];
""550_transferOwnership"" [label=""transferOwnership""];
""550_transfer"" -> ""550_burn"";
""550_transferFrom"" -> ""550_safeSub"";
""550_transfer"" -> ""550_safeAdd"";
""550_transferOwnership"" -> ""550_onlyOwner"";
""550_transferFrom"" -> ""550_safeAdd"";
""550_burn"" -> ""550_safeSub"";
""550_transfer"" -> ""550_safeSub"";
}
"
0x850c430378909ba9ff2494d0a4df17928e99f8f4.sol,BdpControllerHelper,"contract BdpControllerHelper is BdpBase { function calculateArea(uint256 _regionId) view public returns (uint256 _area, uint256 _width, uint256 _height) { return BdpCalculator.calculateArea(contracts, _regionId); }",0,"subgraph cluster_4185_BdpControllerHelper {
label=""BdpControllerHelper"";
""4185_getImageOwner"" [label=""getImageOwner""];
""4185_getForwardUpdateFeesTo"" [label=""getForwardUpdateFeesTo""];
""4185_setForwardUpdateFeesTo"" [label=""setForwardUpdateFeesTo""];
""4185_getForwardPurchaseFeesTo"" [label=""getForwardPurchaseFeesTo""];
""4185_getImageData"" [label=""getImageData""];
""4185_BdpControllerHelper"" [label=""BdpControllerHelper""];
""4185_imageUploadComplete"" [label=""imageUploadComplete""];
""4185_getRegionUrl"" [label=""getRegionUrl""];
""4185_setForwardPurchaseFeesTo"" [label=""setForwardPurchaseFeesTo""];
""4185_calculateSetupAllowedUntil"" [label=""calculateSetupAllowedUntil""];
""4185_getImageWidth"" [label=""getImageWidth""];
""4185_calculateCurrentMarketPixelPrice"" [label=""calculateCurrentMarketPixelPrice""];
""4185_setImageBlurredAt"" [label=""setImageBlurredAt""];
""4185_getRegionCurrentImageId"" [label=""getRegionCurrentImageId""];
""4185_calculateAveragePixelPrice"" [label=""calculateAveragePixelPrice""];
""4185_getImageHeight"" [label=""getImageHeight""];
""4185_getImagePartsCount"" [label=""getImagePartsCount""];
""4185_getImageBlurredAt"" [label=""getImageBlurredAt""];
""4185_getRegionPurchasePixelPrice"" [label=""getRegionPurchasePixelPrice""];
""4185_getImageDataLength"" [label=""getImageDataLength""];
""4185_regionsIsPurchased"" [label=""regionsIsPurchased""];
""4185_getRegionBlockUpdatedAt"" [label=""getRegionBlockUpdatedAt""];
""4185_regionExists"" [label=""regionExists""];
""4185_createImage"" [label=""createImage""];
""4185_getImageDescriptor"" [label=""getImageDescriptor""];
""4185_getRegionNextImageId"" [label=""getRegionNextImageId""];
""4185_calculateMarketPixelPrice"" [label=""calculateMarketPixelPrice""];
""4185_getRegionPurchasedAt"" [label=""getRegionPurchasedAt""];
""4185_calculateRegionInitialSalePixelPrice"" [label=""calculateRegionInitialSalePixelPrice""];
""4185_getLastRegionId"" [label=""getLastRegionId""];
""4185_getRegionCurrentPixelPrice"" [label=""getRegionCurrentPixelPrice""];
""4185_getRegionCoordinates"" [label=""getRegionCoordinates""];
""4185_setImageOwner"" [label=""setImageOwner""];
""4185_setImageData"" [label=""setImageData""];
""4185_calculateArea"" [label=""calculateArea""];
""4185_getRegionUpdatedAt"" [label=""getRegionUpdatedAt""];
""4185_countPurchasedPixels"" [label=""countPurchasedPixels""];
""4185_getImageCurrentRegionId"" [label=""getImageCurrentRegionId""];
""4185_calculateRegionSalePixelPrice"" [label=""calculateRegionSalePixelPrice""];
""4185_getImageRegionId"" [label=""getImageRegionId""];
""4185_setImageBlurredAt"" -> ""4185_onlyAuthorized"";
""4185_setForwardPurchaseFeesTo"" -> ""4185_onlyOwner"";
""4185_createImage"" -> ""4185_onlyAuthorized"";
""4185_setForwardUpdateFeesTo"" -> ""4185_onlyOwner"";
}
"
0xd9fa8ca8e4c9d8089861640f384b42f66db4cc15.sol,Ethery,"contract Ethery is Pausable, ReentrancyGuard{ event NewBet(uint id, address player, uint wager, uint targetBlock); event BetResolved(uint id, BetStatus status); bytes32 constant byteMask = bytes32(0xF); enum BetStatus { Pending, PlayerWon, HouseWon, Refunded }",0,"subgraph cluster_847_Ethery {
label=""Ethery"";
""847_getBet"" [label=""getBet""];
""847_setMaxPayout"" [label=""setMaxPayout""];
""847_isCorrectGuess"" [label=""isCorrectGuess""];
""847_recentWinners"" [label=""recentWinners""];
""847_getTotalWins"" [label=""getTotalWins""];
""847_getMaxPayout"" [label=""getMaxPayout""];
""847_getResolverFee"" [label=""getResolverFee""];
""847_getPlayerBets"" [label=""getPlayerBets""];
""847_withDraw"" [label=""withDraw""];
""847_getBetsByOwner"" [label=""getBetsByOwner""];
""847_houseFee"" [label=""houseFee""];
""847_fallback"" [label=""fallback""];
""847_createBet"" [label=""createBet""];
""847_resolveBet"" [label=""resolveBet""];
""847_payout"" [label=""payout""];
""847_setResolverFee"" [label=""setResolverFee""];
""847_resolveBet"" -> ""847_isCorrectGuess"";
""847_withDraw"" -> ""847_onlyOwner"";
""847_setMaxPayout"" -> ""847_onlyOwner"";
""847_createBet"" -> ""847_payout"";
""847_createBet"" -> ""847_whenNotPaused"";
""847_getTotalWins"" -> ""847_payout"";
""847_setResolverFee"" -> ""847_onlyOwner"";
""847_resolveBet"" -> ""847_payout"";
""847_payout"" -> ""847_houseFee"";
""847_getPlayerBets"" -> ""847_getBetsByOwner"";
""847_resolveBet"" -> ""847_nonReentrant"";
}
"
0x0082f8addb9c0d6cc27783d41198300b4cd2e19b.sol,CryptoCelebrity,"contract CryptoCelebrity is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event PriceChange(uint256 tokenId, uint256 oldPrice, uint256 newPrice, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 100000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public personIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public personIndexToApproved; mapping (uint256 => uint256) private personIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Person { string name; }",0,"subgraph cluster_1083_CryptoCelebrity {
label=""CryptoCelebrity"";
""1083_setCEO"" [label=""setCEO""];
""1083_tokensOfOwner"" [label=""tokensOfOwner""];
""1083_transfer"" [label=""transfer""];
""1083_symbol"" [label=""symbol""];
""1083_transferFrom"" [label=""transferFrom""];
""1083__approved"" [label=""_approved""];
""1083_approve"" [label=""approve""];
""1083_createContractPerson"" [label=""createContractPerson""];
""1083_balanceOf"" [label=""balanceOf""];
""1083_getPerson"" [label=""getPerson""];
""1083__addressNotNull"" [label=""_addressNotNull""];
""1083_CryptoCelebrity"" [label=""CryptoCelebrity""];
""1083_purchase"" [label=""purchase""];
""1083_changePrice"" [label=""changePrice""];
""1083_takeOwnership"" [label=""takeOwnership""];
""1083_priceOf"" [label=""priceOf""];
""1083_ownerOf"" [label=""ownerOf""];
""1083_name"" [label=""name""];
""1083_setCOO"" [label=""setCOO""];
""1083__createPerson"" [label=""_createPerson""];
""1083_createPromoPerson"" [label=""createPromoPerson""];
""1083_payout"" [label=""payout""];
""1083__payout"" [label=""_payout""];
""1083_totalSupply"" [label=""totalSupply""];
""1083_implementsERC721"" [label=""implementsERC721""];
""1083_withdrawAmountTo"" [label=""withdrawAmountTo""];
""1083__owns"" [label=""_owns""];
""1083__transfer"" [label=""_transfer""];
""1083_tokensOfOwner"" -> ""1083_balanceOf"";
""1083_payout"" -> ""1083__payout"";
""1083_changePrice"" -> ""1083__owns"";
""1083_transfer"" -> ""1083__owns"";
""1083_transferFrom"" -> ""1083__owns"";
""1083_purchase"" -> ""1083__addressNotNull"";
""1083_purchase"" -> ""1083__transfer"";
""1083_transferFrom"" -> ""1083__transfer"";
""1083_setCEO"" -> ""1083_onlyCEO"";
""1083_withdrawAmountTo"" -> ""1083_onlyCLevel"";
""1083_createContractPerson"" -> ""1083__createPerson"";
""1083_setCOO"" -> ""1083_onlyCEO"";
""1083_transfer"" -> ""1083__addressNotNull"";
""1083_tokensOfOwner"" -> ""1083_totalSupply"";
""1083_approve"" -> ""1083__owns"";
""1083_transfer"" -> ""1083__transfer"";
""1083_takeOwnership"" -> ""1083__transfer"";
""1083__createPerson"" -> ""1083__transfer"";
""1083_createPromoPerson"" -> ""1083_onlyCOO"";
""1083_createContractPerson"" -> ""1083_onlyCOO"";
""1083_createPromoPerson"" -> ""1083__createPerson"";
""1083_takeOwnership"" -> ""1083__approved"";
""1083_takeOwnership"" -> ""1083__addressNotNull"";
""1083_transferFrom"" -> ""1083__addressNotNull"";
""1083_payout"" -> ""1083_onlyCLevel"";
""1083_transferFrom"" -> ""1083__approved"";
}
"
0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol,MultiSigWallet,"contract MultiSigWallet { event Confirmation(address sender, bytes32 transactionHash); event Revocation(address sender, bytes32 transactionHash); event Submission(bytes32 transactionHash); event Execution(bytes32 transactionHash); event Deposit(address sender, uint value); event OwnerAddition(address owner); event OwnerRemoval(address owner); event RequiredUpdate(uint required); event CoinCreation(address coin); mapping (bytes32 => Transaction) public transactions; mapping (bytes32 => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] owners; bytes32[] transactionList; uint public required; struct Transaction { address destination; uint value; bytes data; uint nonce; bool executed; }",0,"subgraph cluster_1442_MultiSigWallet {
label=""MultiSigWallet"";
""1442_addConfirmation"" [label=""addConfirmation""];
""1442_getPendingTransactions"" [label=""getPendingTransactions""];
""1442_removeOwner"" [label=""removeOwner""];
""1442_submitTransaction"" [label=""submitTransaction""];
""1442_isConfirmed"" [label=""isConfirmed""];
""1442_getExecutedTransactions"" [label=""getExecutedTransactions""];
""1442_createCoin"" [label=""createCoin""];
""1442_filterTransactions"" [label=""filterTransactions""];
""1442_executeTransaction"" [label=""executeTransaction""];
""1442_revokeConfirmation"" [label=""revokeConfirmation""];
""1442_submitTransactionWithSignatures"" [label=""submitTransactionWithSignatures""];
""1442_fallback"" [label=""fallback""];
""1442_updateRequired"" [label=""updateRequired""];
""1442_addTransaction"" [label=""addTransaction""];
""1442_addOwner"" [label=""addOwner""];
""1442_confirmTransaction"" [label=""confirmTransaction""];
""1442_MultiSigWallet"" [label=""MultiSigWallet""];
""1442_confirmationCount"" [label=""confirmationCount""];
""1442_confirmTransactionWithSignatures"" [label=""confirmTransactionWithSignatures""];
""1442_confirmTransactionWithSignatures"" -> ""1442_addConfirmation"";
""1442_getExecutedTransactions"" -> ""1442_filterTransactions"";
""1442_createCoin"" -> ""1442_onlyWallet"";
""1442_updateRequired"" -> ""1442_validRequired"";
""1442_updateRequired"" -> ""1442_onlyWallet"";
""1442_submitTransactionWithSignatures"" -> ""1442_confirmTransactionWithSignatures"";
""1442_addTransaction"" -> ""1442_notNull"";
""1442_submitTransactionWithSignatures"" -> ""1442_addTransaction"";
""1442_confirmTransaction"" -> ""1442_executeTransaction"";
""1442_submitTransaction"" -> ""1442_ownerExists"";
""1442_removeOwner"" -> ""1442_updateRequired"";
""1442_addOwner"" -> ""1442_ownerDoesNotExist"";
""1442_executeTransaction"" -> ""1442_isConfirmed"";
""1442_revokeConfirmation"" -> ""1442_confirmed"";
""1442_confirmTransaction"" -> ""1442_ownerExists"";
""1442_removeOwner"" -> ""1442_onlyWallet"";
""1442_MultiSigWallet"" -> ""1442_validRequired"";
""1442_confirmTransaction"" -> ""1442_addConfirmation"";
""1442_submitTransaction"" -> ""1442_confirmTransaction"";
""1442_addOwner"" -> ""1442_onlyWallet"";
""1442_submitTransaction"" -> ""1442_addTransaction"";
""1442_revokeConfirmation"" -> ""1442_ownerExists"";
""1442_getPendingTransactions"" -> ""1442_filterTransactions"";
""1442_removeOwner"" -> ""1442_ownerExists"";
""1442_submitTransactionWithSignatures"" -> ""1442_ownerExists"";
""1442_confirmTransactionWithSignatures"" -> ""1442_executeTransaction"";
""1442_revokeConfirmation"" -> ""1442_notExecuted"";
""1442_addConfirmation"" -> ""1442_notConfirmed"";
""1442_executeTransaction"" -> ""1442_notExecuted"";
""1442_confirmTransactionWithSignatures"" -> ""1442_signaturesFromOwners"";
}
"
0x08d88845df68222fc8a1e631ab1817f1660766c5.sol,NIUNIUCOIN,contract NIUNIUCOIN is ERC223 { using SafeMath for uint256; using SafeMath for uint; address public owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; mapping (address => uint) public increase; mapping (address => uint256) public unlockUnixTime; uint public maxIncrease=20; address public target; string internal name_= ; string internal symbol_ = ; uint8 internal decimals_= 18; uint256 internal totalSupply_= 2300000000e18; uint256 public toGiveBase = 100e18; uint256 public increaseBase = 10e18; uint256 public OfficalHold = totalSupply_.mul(20).div(23); uint256 public totalRemaining = totalSupply_; uint256 public totalDistributed = 0; bool public canTransfer = true; uint256 public etherGetBase=1000; bool public distributionFinished = false; bool public finishFreeGetToken = false; bool public finishEthGetToken = false; modifier canDistr() { require(!distributionFinished); _; },0,"subgraph cluster_1716_NIUNIUCOIN {
label=""NIUNIUCOIN"";
""1716_finishDistribution"" [label=""finishDistribution""];
""1716_burn"" [label=""burn""];
""1716_transferToContract"" [label=""transferToContract""];
""1716_changeOwner"" [label=""changeOwner""];
""1716_allowance"" [label=""allowance""];
""1716_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1716_distribution"" [label=""distribution""];
""1716_distributeAmounts"" [label=""distributeAmounts""];
""1716_finishFreeGet"" [label=""finishFreeGet""];
""1716_withdraw"" [label=""withdraw""];
""1716_symbol"" [label=""symbol""];
""1716_transfer"" [label=""transfer""];
""1716_approve"" [label=""approve""];
""1716_balanceOf"" [label=""balanceOf""];
""1716_name"" [label=""name""];
""1716_decimals"" [label=""decimals""];
""1716_getTokens"" [label=""getTokens""];
""1716_getTokenBalance"" [label=""getTokenBalance""];
""1716_stopTransfer"" [label=""stopTransfer""];
""1716_fallback"" [label=""fallback""];
""1716_startDistribution"" [label=""startDistribution""];
""1716_finishEthGet"" [label=""finishEthGet""];
""1716_enableWhitelist"" [label=""enableWhitelist""];
""1716_changeIncrease"" [label=""changeIncrease""];
""1716_transferToAddress"" [label=""transferToAddress""];
""1716_totalSupply"" [label=""totalSupply""];
""1716_startFreeGet"" [label=""startFreeGet""];
""1716_transferFrom"" [label=""transferFrom""];
""1716_startEthGet"" [label=""startEthGet""];
""1716_distr"" [label=""distr""];
""1716_disableWhitelist"" [label=""disableWhitelist""];
""1716_isContract"" [label=""isContract""];
""1716_changeBaseValue"" [label=""changeBaseValue""];
""1716_startTransfer"" [label=""startTransfer""];
""1716_NIUNIUCOIN"" [label=""NIUNIUCOIN""];
""1716_transferToContract"" -> ""1716_balanceOf"";
""1716_distributeAmounts"" -> ""1716_distr"";
""1716_finishDistribution"" -> ""1716_onlyOwner"";
""1716_transfer"" -> ""1716_balanceOf"";
""1716_transfer"" -> ""1716_transferToAddress"";
""1716_changeBaseValue"" -> ""1716_onlyOwner"";
""1716_transfer"" -> ""1716_canTrans"";
""1716_getTokens"" -> ""1716_canDistr"";
""1716_transfer"" -> ""1716_isContract"";
""1716_withdrawForeignTokens"" -> ""1716_onlyOwner"";
""1716_startDistribution"" -> ""1716_onlyOwner"";
""1716_changeIncrease"" -> ""1716_onlyOwner"";
""1716_finishFreeGet"" -> ""1716_canDistr"";
""1716_changeOwner"" -> ""1716_onlyOwner"";
""1716_finishFreeGet"" -> ""1716_onlyOwner"";
""1716_startFreeGet"" -> ""1716_onlyOwner"";
""1716_fallback"" -> ""1716_getTokens"";
""1716_transfer"" -> ""1716_transferToContract"";
""1716_finishEthGet"" -> ""1716_onlyOwner"";
""1716_distribution"" -> ""1716_canDistr"";
""1716_withdraw"" -> ""1716_onlyOwner"";
""1716_distribution"" -> ""1716_onlyOwner"";
""1716_burn"" -> ""1716_onlyOwner"";
""1716_stopTransfer"" -> ""1716_onlyOwner"";
""1716_distr"" -> ""1716_canDistr"";
""1716_transferToAddress"" -> ""1716_balanceOf"";
""1716_startEthGet"" -> ""1716_canDistr"";
""1716_NIUNIUCOIN"" -> ""1716_distr"";
""1716_getTokens"" -> ""1716_onlyWhitelist"";
""1716_distribution"" -> ""1716_distr"";
""1716_transferFrom"" -> ""1716_canTrans"";
""1716_getTokens"" -> ""1716_distr"";
""1716_enableWhitelist"" -> ""1716_onlyOwner"";
""1716_finishEthGet"" -> ""1716_canDistr"";
""1716_startEthGet"" -> ""1716_onlyOwner"";
""1716_startFreeGet"" -> ""1716_canDistr"";
""1716_distributeAmounts"" -> ""1716_canDistr"";
""1716_finishDistribution"" -> ""1716_canDistr"";
""1716_distributeAmounts"" -> ""1716_onlyOwner"";
""1716_disableWhitelist"" -> ""1716_onlyOwner"";
""1716_startTransfer"" -> ""1716_onlyOwner"";
}
"
0x728781e75735dc0962df3a51d7ef47e798a7107e.sol,WolkProtocol,contract WolkProtocol is Wolk { address public burnFormula; bool public settlementIsRunning = true; uint256 public burnBasisPoints = 500; mapping (address => mapping (address => bool)) authorized; mapping (address => uint256) feeBasisPoints; mapping (address => address) feeFormulas; modifier isSettleable { require(settlementIsRunning); _; },0,"subgraph cluster_1986_WolkProtocol {
label=""WolkProtocol"";
""1986_authorizeProvider"" [label=""authorizeProvider""];
""1986_setBurnRate"" [label=""setBurnRate""];
""1986_setServiceFee"" [label=""setServiceFee""];
""1986_removeService"" [label=""removeService""];
""1986_deauthorizeProvider"" [label=""deauthorizeProvider""];
""1986_setBurnFormula"" [label=""setBurnFormula""];
""1986_grantService"" [label=""grantService""];
""1986_checkFeeSchedule"" [label=""checkFeeSchedule""];
""1986_estProviderFee"" [label=""estProviderFee""];
""1986_settleSeller"" [label=""settleSeller""];
""1986_estWolkToBurn"" [label=""estWolkToBurn""];
""1986_checkServiceFee"" [label=""checkServiceFee""];
""1986_updateSettlementStatus"" [label=""updateSettlementStatus""];
""1986_setFeeFormula"" [label=""setFeeFormula""];
""1986_settleBuyer"" [label=""settleBuyer""];
""1986_checkAuthorization"" [label=""checkAuthorization""];
""1986_settleSeller"" -> ""1986_safeAdd"";
""1986_updateSettlementStatus"" -> ""1986_onlyOwner"";
""1986_settleSeller"" -> ""1986_safeMul"";
""1986_setBurnFormula"" -> ""1986_estWolkToBurn"";
""1986_setBurnFormula"" -> ""1986_onlyOwner"";
""1986_settleBuyer"" -> ""1986_safeMul"";
""1986_settleBuyer"" -> ""1986_safeSub"";
""1986_settleSeller"" -> ""1986_isSettleable"";
""1986_settleSeller"" -> ""1986_safeSub"";
""1986_settleBuyer"" -> ""1986_estWolkToBurn"";
""1986_setFeeFormula"" -> ""1986_estProviderFee"";
""1986_setBurnRate"" -> ""1986_onlyOwner"";
""1986_settleSeller"" -> ""1986_estProviderFee"";
""1986_settleSeller"" -> ""1986_onlySettler"";
""1986_settleBuyer"" -> ""1986_isSettleable"";
""1986_settleBuyer"" -> ""1986_safeAdd"";
""1986_removeService"" -> ""1986_onlyOwner"";
""1986_setFeeFormula"" -> ""1986_onlySettler"";
""1986_settleBuyer"" -> ""1986_safeDiv"";
""1986_grantService"" -> ""1986_onlyOwner"";
""1986_settleSeller"" -> ""1986_safeDiv"";
""1986_settleBuyer"" -> ""1986_onlySettler"";
""1986_setServiceFee"" -> ""1986_onlyOwner"";
}
"
0x20f279245cf7d9006f21edcb8d9e291c6e7ecfae.sol,EthereumExtreme,"contract EthereumExtreme is BaseToken, AirdropToken, ICOToken { function EthereumExtreme() public { totalSupply = 99000000000000000; name = ; symbol = ; decimals = 8; balanceOf[0xcf9DD25830674d1a2C768155aCd343F2E8FCc03B] = totalSupply; Transfer(address(0), 0xcf9DD25830674d1a2C768155aCd343F2E8FCc03B, totalSupply); airAmount = 100000000; airBegintime = 1529431200; airEndtime = 1529431500; airSender = 0xcf9DD25830674d1a2C768155aCd343F2E8FCc03B; airLimitCount = 1; icoRatio = 10000; icoBegintime = 1529884800; icoEndtime = 1535241599; icoSender = 0x3A360B12D637773c3DeDBEfA9B39Af2716Dd936c; icoHolder = 0x3A360B12D637773c3DeDBEfA9B39Af2716Dd936c; }",0,"subgraph cluster_495_EthereumExtreme {
label=""EthereumExtreme"";
""495_fallback"" [label=""fallback""];
""495_EthereumExtreme"" [label=""EthereumExtreme""];
""495_fallback"" -> ""495_airdrop"";
""495_fallback"" -> ""495_ico"";
}
"
0x52fe31c97e5c29ea63cbcfb045e1171427bb9248.sol,NewRich,"contract NewRich is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function NewRich() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x08652C395d8E23fe7e9f436e882DF7C418dB2f3a] = _totalSupply; Transfer(address(0), 0x08652C395d8E23fe7e9f436e882DF7C418dB2f3a, _totalSupply); }",0,"subgraph cluster_543_NewRich {
label=""NewRich"";
""543_NewRich"" [label=""NewRich""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol,TokenLogic,"contract TokenLogic is Ownable, ITokenLogic { using SafeMath for uint256; ITokenStore private _tokenStore; address private _tokenFront; constructor(ITokenStore tokenStore, address tokenFront) public { _tokenStore = tokenStore; _tokenFront = tokenFront; _whiteList[msg.sender] = true; }",0,"subgraph cluster_1128_TokenLogic {
label=""TokenLogic"";
""1128_replaceAccount"" [label=""replaceAccount""];
""1128_transferOwnership"" [label=""transferOwnership""];
""1128_inWhiteList"" [label=""inWhiteList""];
""1128_setTokenFront"" [label=""setTokenFront""];
""1128_allowance"" [label=""allowance""];
""1128_removeQuitAccount"" [label=""removeQuitAccount""];
""1128_approve"" [label=""approve""];
""1128_constructor"" [label=""constructor""];
""1128_tokenStore"" [label=""tokenStore""];
""1128_setQuitLock"" [label=""setQuitLock""];
""1128_increaseAllowance"" [label=""increaseAllowance""];
""1128_inTradingTime"" [label=""inTradingTime""];
""1128_transfer"" [label=""transfer""];
""1128_transferFrom"" [label=""transferFrom""];
""1128_balanceOf"" [label=""balanceOf""];
""1128_decreaseAllowance"" [label=""decreaseAllowance""];
""1128_batchTransfer"" [label=""batchTransfer""];
""1128_setTokenStore"" [label=""setTokenStore""];
""1128_totalSupply"" [label=""totalSupply""];
""1128_inQuitLock"" [label=""inQuitLock""];
""1128_setTradingTime"" [label=""setTradingTime""];
""1128_setWhiteList"" [label=""setWhiteList""];
""1128_getTradingTime"" [label=""getTradingTime""];
""1128_tokenFront"" [label=""tokenFront""];
""1128_forceTransferBalance"" [label=""forceTransferBalance""];
""1128_setQuitLock"" -> ""1128_inWhiteList"";
""1128_approve"" -> ""1128_onlyFront"";
""1128_transfer"" -> ""1128_inQuitLock"";
""1128_batchTransfer"" -> ""1128_inWhiteList"";
""1128_batchTransfer"" -> ""1128_onlyOwner"";
""1128_transfer"" -> ""1128_inWhiteList"";
""1128_setQuitLock"" -> ""1128_onlyOwner"";
""1128_replaceAccount"" -> ""1128_onlyOwner"";
""1128_removeQuitAccount"" -> ""1128_inQuitLock"";
""1128_decreaseAllowance"" -> ""1128_onlyFront"";
""1128_setTokenStore"" -> ""1128_onlyOwner"";
""1128_replaceAccount"" -> ""1128_inWhiteList"";
""1128_transferOwnership"" -> ""1128_transferOwnership"";
""1128_transferFrom"" -> ""1128_inQuitLock"";
""1128_setTokenFront"" -> ""1128_onlyOwner"";
""1128_transfer"" -> ""1128_inTradingTime"";
""1128_removeQuitAccount"" -> ""1128_onlyOwner"";
""1128_setWhiteList"" -> ""1128_onlyOwner"";
""1128_increaseAllowance"" -> ""1128_onlyFront"";
""1128_forceTransferBalance"" -> ""1128_inWhiteList"";
""1128_transfer"" -> ""1128_onlyFront"";
""1128_forceTransferBalance"" -> ""1128_onlyOwner"";
""1128_transferFrom"" -> ""1128_inTradingTime"";
""1128_transferOwnership"" -> ""1128_onlyOwner"";
""1128_transferFrom"" -> ""1128_onlyFront"";
""1128_transferFrom"" -> ""1128_inWhiteList"";
""1128_transfer"" -> ""1128_owner"";
""1128_setTradingTime"" -> ""1128_onlyOwner"";
}
"
0x5b5afaa565aba14833de0cee321e63a807fd407b.sol,TulipMania,"contract TulipMania is ERC20Token { uint constant E6 = 10**6; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 6; address public wallet; address public adminWallet; uint public constant DATE_PRESALE_START = 1510758000; uint public constant DATE_PRESALE_END = 1511362800; uint public constant DATE_ICO_START = 1511362801; uint public constant DATE_ICO_END = 1513868400; uint public tokensPerEth = 336 * E6; uint public constant BONUS_PRESALE = 100; uint public constant TOKEN_SUPPLY_TOTAL = 10000000 * E6; uint public constant TOKEN_SUPPLY_ICO = 8500000 * E6; uint public constant TOKEN_SUPPLY_MKT = 1500000 * E6; uint public constant PRESALE_ETH_CAP = 750 ether; uint public constant MIN_CONTRIBUTION = 1 ether / 500; uint public constant MAX_CONTRIBUTION = 300 ether; uint public constant COOLDOWN_PERIOD = 2 days; uint public constant CLAWBACK_PERIOD = 2 days; uint public icoEtherReceived = 0; uint public tokensIssuedIco = 0; uint public tokensIssuedMkt = 0; uint public tokensClaimedAirdrop = 0; mapping(address => uint) public icoEtherContributed; mapping(address => uint) public icoTokensReceived; mapping(address => bool) public airdropClaimed; mapping(address => bool) public refundClaimed; mapping(address => bool) public locked; event WalletUpdated(address _newWallet); event AdminWalletUpdated(address _newAdminWallet); event TokensPerEthUpdated(uint _tokensPerEth); event TokensMinted(address indexed _owner, uint _tokens, uint _balance); event TokensIssued(address indexed _owner, uint _tokens, uint _balance, uint _etherContributed); event Refund(address indexed _owner, uint _amount, uint _tokens); event Airdrop(address indexed _owner, uint _amount, uint _balance); event LockRemoved(address indexed _participant); function TulipMania() { require( TOKEN_SUPPLY_ICO + TOKEN_SUPPLY_MKT == TOKEN_SUPPLY_TOTAL ); wallet = owner; adminWallet = owner; }",0,"subgraph cluster_1530_TulipMania {
label=""TulipMania"";
""1530_mintMarketing"" [label=""mintMarketing""];
""1530_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""1530_removeLockMultiple"" [label=""removeLockMultiple""];
""1530_buyTokens"" [label=""buyTokens""];
""1530_doAirdrop"" [label=""doAirdrop""];
""1530_reclaimFunds"" [label=""reclaimFunds""];
""1530_ownerClawback"" [label=""ownerClawback""];
""1530_isTransferable"" [label=""isTransferable""];
""1530_removeLock"" [label=""removeLock""];
""1530_fallback"" [label=""fallback""];
""1530_transferMultiple"" [label=""transferMultiple""];
""1530_setAdminWallet"" [label=""setAdminWallet""];
""1530_transferFrom"" [label=""transferFrom""];
""1530_TulipMania"" [label=""TulipMania""];
""1530_atNow"" [label=""atNow""];
""1530_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""1530_setWallet"" [label=""setWallet""];
""1530_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1530_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""1530_transfer"" [label=""transfer""];
""1530_claimAirdrop"" [label=""claimAirdrop""];
""1530_computeAirdrop"" [label=""computeAirdrop""];
""1530_computeAirdrop"" -> ""1530_atNow"";
""1530_transferAnyERC20Token"" -> ""1530_onlyOwner"";
""1530_doAirdrop"" -> ""1530_computeAirdrop"";
""1530_transfer"" -> ""1530_transfer"";
""1530_isTransferable"" -> ""1530_atNow"";
""1530_transferFrom"" -> ""1530_isTransferable"";
""1530_transferMultiple"" -> ""1530_transfer"";
""1530_setWallet"" -> ""1530_onlyOwner"";
""1530_fallback"" -> ""1530_buyTokens"";
""1530_ownerClawback"" -> ""1530_atNow"";
""1530_updateTokensPerEth"" -> ""1530_atNow"";
""1530_ownerClawback"" -> ""1530_onlyOwner"";
""1530_transferMultiple"" -> ""1530_isTransferable"";
""1530_transferFrom"" -> ""1530_transferFrom"";
""1530_buyTokens"" -> ""1530_atNow"";
""1530_reclaimFunds"" -> ""1530_atNow"";
""1530_transfer"" -> ""1530_isTransferable"";
""1530_mintMarketing"" -> ""1530_onlyOwner"";
""1530_claimAirdrop"" -> ""1530_doAirdrop"";
""1530_setAdminWallet"" -> ""1530_onlyOwner"";
""1530_updateTokensPerEth"" -> ""1530_onlyOwner"";
""1530_adminClaimAirdrop"" -> ""1530_doAirdrop"";
""1530_adminClaimAirdropMultiple"" -> ""1530_doAirdrop"";
}
"
0x0305b4ccbfd603d92ca0d5eae752000273e26a60.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_380_TokenERC20 {
label=""TokenERC20"";
""380__transfer"" [label=""_transfer""];
""380_TokenERC20"" [label=""TokenERC20""];
""380_transfer"" [label=""transfer""];
""380_burn"" [label=""burn""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_transferFrom"" [label=""transferFrom""];
""380_burnFrom"" [label=""burnFrom""];
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
}
"
0x567dc1d64bbc362caccfebb7a3bb5b900d22eefe.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address public owner; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping(address => uint256) public pIDxAddr_; mapping(bytes32 => uint256) public pIDxName_; mapping(uint256 => Player) public plyr_; mapping(uint256 => mapping(bytes32 => bool)) public plyrNames_; mapping(uint256 => mapping(uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },0,"subgraph cluster_444_PlayerBookReceiverInterface {
label=""PlayerBookReceiverInterface"";
""444_receivePlayerNameList"" [label=""receivePlayerNameList""];
""444_receivePlayerInfo"" [label=""receivePlayerInfo""];
}
"
0xee58ee0b1519bb47801812a3a9c83ab600c63d81.sol,MonethaGateway,"contract MonethaGateway is Pausable, Contactable, Destructible, Restricted { using SafeMath for uint256; string constant VERSION = ; uint public constant FEE_PERMILLE = 15; address public monethaVault; address public admin; event PaymentProcessedEther(address merchantWallet, uint merchantIncome, uint monethaIncome); event PaymentProcessedToken(address tokenAddress, address merchantWallet, uint merchantIncome, uint monethaIncome); function MonethaGateway(address _monethaVault, address _admin) public { require(_monethaVault != 0x0); monethaVault = _monethaVault; setAdmin(_admin); }",0,"subgraph cluster_625_MonethaGateway {
label=""MonethaGateway"";
""625_acceptPayment"" [label=""acceptPayment""];
""625_setAdmin"" [label=""setAdmin""];
""625_MonethaGateway"" [label=""MonethaGateway""];
""625_acceptTokenPayment"" [label=""acceptTokenPayment""];
""625_setMonethaAddress"" [label=""setMonethaAddress""];
""625_changeMonethaVault"" [label=""changeMonethaVault""];
""625_acceptPayment"" -> ""625_onlyMonetha"";
""625_acceptTokenPayment"" -> ""625_whenNotPaused"";
""625_acceptPayment"" -> ""625_whenNotPaused"";
""625_setAdmin"" -> ""625_onlyOwner"";
""625_MonethaGateway"" -> ""625_setAdmin"";
""625_changeMonethaVault"" -> ""625_onlyOwner"";
""625_changeMonethaVault"" -> ""625_whenNotPaused"";
""625_acceptTokenPayment"" -> ""625_onlyMonetha"";
}
"
0x0dce40212e3c689ad502739e283d9c3ac79727bc.sol,MasterNet,"contract MasterNet is owned, TokenERC20 { function MasterNet( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",0,"subgraph cluster_326_MasterNet {
label=""MasterNet"";
""326_burnToken"" [label=""burnToken""];
""326__transfer"" [label=""_transfer""];
""326_MasterNet"" [label=""MasterNet""];
""326_burnToken"" -> ""326_burn"";
""326_MasterNet"" -> ""326_TokenERC20"";
""326_burnToken"" -> ""326_onlyOwner"";
}
"
0x00e126e283b0e116470a0f6d6108f314e5cf2a0e.sol,Payments,"contract Payments is Accounts { event PaymentRegistered( uint32 indexed payIndex, uint indexed from, uint totalNumberOfPayees, uint amount ); event PaymentUnlocked(uint32 indexed payIndex, bytes key); event PaymentRefunded(uint32 beneficiaryAccountId, uint64 amountRefunded); event Collect( uint indexed delegate, uint indexed slot, uint indexed to, uint32 fromPayindex, uint32 toPayIndex, uint amount ); event Challenge1(uint indexed delegate, uint indexed slot, uint challenger); event Challenge2(uint indexed delegate, uint indexed slot); event Challenge3(uint indexed delegate, uint indexed slot, uint index); event Challenge4(uint indexed delegate, uint indexed slot); event ChallengeSuccess(uint indexed delegate, uint indexed slot); event ChallengeFailed(uint indexed delegate, uint indexed slot); Payment[] public payments; mapping (uint32 => mapping (uint32 => CollectSlot)) public collects; function registerPayment( uint32 fromId, uint64 amount, uint64 fee, bytes payData, uint newCount, bytes32 rootHash, bytes32 lockingKeyHash, bytes32 metadata ) external { require(payments.length < 2**32, ); require(isAccountOwner(fromId), ); require(amount > 0, ); require(newCount == 0 || rootHash > 0, ); require(fee == 0 || lockingKeyHash > 0, ); Payment memory p; p.totalNumberOfPayees = SafeMath.add32(Challenge.getPayDataCount(payData), newCount); require(p.totalNumberOfPayees > 0, ); require(p.totalNumberOfPayees < params.maxTransfer, ); p.fromAccountId = fromId; p.amount = amount; p.fee = fee; p.lockingKeyHash = lockingKeyHash; p.metadata = metadata; p.smallestAccountId = uint32(accounts.length); p.greatestAccountId = SafeMath.add32(p.smallestAccountId, newCount); p.lockTimeoutBlockNumber = SafeMath.add64(block.number, params.unlockBlocks); p.paymentDataHash = keccak256(abi.encodePacked(payData)); uint64 totalCost = SafeMath.mul64(amount, p.totalNumberOfPayees); totalCost = SafeMath.add64(totalCost, fee); balanceSub(fromId, totalCost); if (newCount > 0) { bulkRegister(newCount, rootHash); }",0,"subgraph cluster_3076_Payments {
label=""Payments"";
""3076_challenge_1"" [label=""challenge_1""];
""3076_unlock"" [label=""unlock""];
""3076_challenge_failed"" [label=""challenge_failed""];
""3076_getPaymentsLength"" [label=""getPaymentsLength""];
""3076_challenge_4"" [label=""challenge_4""];
""3076_challenge_success"" [label=""challenge_success""];
""3076_collect"" [label=""collect""];
""3076_registerPayment"" [label=""registerPayment""];
""3076_challenge_2"" [label=""challenge_2""];
""3076_freeSlot"" [label=""freeSlot""];
""3076_challenge_3"" [label=""challenge_3""];
""3076_refundLockedPayment"" [label=""refundLockedPayment""];
""3076_refundLockedPayment"" -> ""3076_balanceAdd"";
""3076_challenge_failed"" -> ""3076_onlyAccountOwner"";
""3076_challenge_1"" -> ""3076_validId"";
""3076_collect"" -> ""3076_freeSlot"";
""3076_registerPayment"" -> ""3076_isAccountOwner"";
""3076_registerPayment"" -> ""3076_balanceSub"";
""3076_challenge_success"" -> ""3076_validId"";
""3076_registerPayment"" -> ""3076_bulkRegister"";
""3076_collect"" -> ""3076_isAccountOwner"";
""3076_challenge_1"" -> ""3076_onlyAccountOwner"";
""3076_challenge_3"" -> ""3076_isAccountOwner"";
""3076_challenge_3"" -> ""3076_validId"";
""3076_collect"" -> ""3076_balanceAdd"";
""3076_collect"" -> ""3076_isValidId"";
""3076_collect"" -> ""3076_balanceSub"";
""3076_challenge_4"" -> ""3076_onlyAccountOwner"";
""3076_unlock"" -> ""3076_isValidId"";
""3076_challenge_2"" -> ""3076_onlyAccountOwner"";
""3076_unlock"" -> ""3076_balanceAdd"";
""3076_freeSlot"" -> ""3076_balanceAdd"";
}
"
0x70491ade38d2cd8a869b19343dd5a06133c2a201.sol,GoatClash,contract GoatClash { ERC20 private _token; function token() public view returns(ERC20) { return _token; },0,"subgraph cluster_2200_GoatClash {
label=""GoatClash"";
""2200_setMaxProfit"" [label=""setMaxProfit""];
""2200_placeBet"" [label=""placeBet""];
""2200_settleBet"" [label=""settleBet""];
""2200_setToken"" [label=""setToken""];
""2200_settleBetUncleMerkleProof"" [label=""settleBetUncleMerkleProof""];
""2200_constructor"" [label=""constructor""];
""2200_acceptNextOwner"" [label=""acceptNextOwner""];
""2200_increaseJackpot"" [label=""increaseJackpot""];
""2200_verifyMerkleProof"" [label=""verifyMerkleProof""];
""2200_withdrawFunds"" [label=""withdrawFunds""];
""2200_setCroupier"" [label=""setCroupier""];
""2200_memcpy"" [label=""memcpy""];
""2200_approveNextOwner"" [label=""approveNextOwner""];
""2200_getDiceWinAmount"" [label=""getDiceWinAmount""];
""2200_requireCorrectReceipt"" [label=""requireCorrectReceipt""];
""2200_cancelBet"" [label=""cancelBet""];
""2200_deductFunds"" [label=""deductFunds""];
""2200_settleBetCommon"" [label=""settleBetCommon""];
""2200_token"" [label=""token""];
""2200_kill"" [label=""kill""];
""2200_sendFunds"" [label=""sendFunds""];
""2200_setSecretSigner"" [label=""setSecretSigner""];
""2200_fallback"" [label=""fallback""];
""2200_settleBet"" -> ""2200_onlyCroupier"";
""2200_settleBetCommon"" -> ""2200_deductFunds"";
""2200_approveNextOwner"" -> ""2200_onlyOwner"";
""2200_setSecretSigner"" -> ""2200_onlyOwner"";
""2200_verifyMerkleProof"" -> ""2200_memcpy"";
""2200_settleBetUncleMerkleProof"" -> ""2200_settleBetCommon"";
""2200_increaseJackpot"" -> ""2200_onlyOwner"";
""2200_setCroupier"" -> ""2200_onlyOwner"";
""2200_withdrawFunds"" -> ""2200_sendFunds"";
""2200_placeBet"" -> ""2200_getDiceWinAmount"";
""2200_settleBetUncleMerkleProof"" -> ""2200_requireCorrectReceipt"";
""2200_settleBetCommon"" -> ""2200_getDiceWinAmount"";
""2200_kill"" -> ""2200_sendFunds"";
""2200_withdrawFunds"" -> ""2200_onlyOwner"";
""2200_settleBet"" -> ""2200_settleBetCommon"";
""2200_settleBetCommon"" -> ""2200_sendFunds"";
""2200_cancelBet"" -> ""2200_onlyCroupier"";
""2200_setToken"" -> ""2200_onlyOwner"";
""2200_settleBetUncleMerkleProof"" -> ""2200_verifyMerkleProof"";
""2200_kill"" -> ""2200_onlyOwner"";
""2200_cancelBet"" -> ""2200_getDiceWinAmount"";
""2200_setMaxProfit"" -> ""2200_onlyOwner"";
""2200_settleBetUncleMerkleProof"" -> ""2200_onlyCroupier"";
}
"
0xdc5fd2709a37218f96ac37163a18cf3c2629589d.sol,TrustedDocument,contract TrustedDocument { struct Document { uint documentId; bytes32 fileName; string documentContentSHA256; string documentMetadataSHA256; uint blockTime; uint blockNumber; uint validFrom; uint validTo; uint updatedVersionId; },0,"subgraph cluster_497_TrustedDocument {
label=""TrustedDocument"";
""497_getDocumentIdWithName"" [label=""getDocumentIdWithName""];
""497_updateDocument"" [label=""updateDocument""];
""497_getFirstDocumentIdStartingAtValidFrom"" [label=""getFirstDocumentIdStartingAtValidFrom""];
""497_getDocumentUpdatedVersionId"" [label=""getDocumentUpdatedVersionId""];
""497_getDocument"" [label=""getDocument""];
""497_setBaseUrl"" [label=""setBaseUrl""];
""497_TrustedDocument"" [label=""TrustedDocument""];
""497_retire"" [label=""retire""];
""497_transferOwnership"" [label=""transferOwnership""];
""497_getDocumentIdWithContentHash"" [label=""getDocumentIdWithContentHash""];
""497_addDocument"" [label=""addDocument""];
""497_getFirstDocumentIdBetweenDatesValidFrom"" [label=""getFirstDocumentIdBetweenDatesValidFrom""];
""497_getBaseUrl"" [label=""getBaseUrl""];
""497_getDocumentsCount"" [label=""getDocumentsCount""];
""497_retire"" -> ""497_ifNotRetired"";
""497_retire"" -> ""497_onlyOwner"";
""497_updateDocument"" -> ""497_ifNotRetired"";
""497_updateDocument"" -> ""497_onlyOwner"";
""497_addDocument"" -> ""497_onlyOwner"";
""497_transferOwnership"" -> ""497_onlyOwner"";
""497_setBaseUrl"" -> ""497_onlyOwner"";
""497_addDocument"" -> ""497_ifNotRetired"";
}
"
0x5be26e5d10f94cf2af7d09ee30f961c8bb6e64f6.sol,TokenERC20,"contract TokenERC20 { using SafeMath for uint; string public name; string public symbol; uint8 public decimals; uint public totalSupply; mapping (address => uint) public balanceOf; mapping (address => mapping (address => uint)) public allowance; event ERC20Token(address indexed owner, string name, string symbol, uint8 decimals, uint supply); event Transfer(address indexed from, address indexed to, uint value); event TransferFrom(address indexed from, address indexed to, address indexed spender, uint value); event Approval(address indexed owner, address indexed spender, uint value); constructor( string _tokenName, string _tokenSymbol, uint8 _tokenDecimals, uint _initialSupply ) public { name = _tokenName; symbol = _tokenSymbol; decimals = _tokenDecimals; totalSupply = _initialSupply; balanceOf[msg.sender] = totalSupply; emit ERC20Token(msg.sender, name, symbol, decimals, totalSupply); }",0,"subgraph cluster_565_TokenERC20 {
label=""TokenERC20"";
""565_transferFrom"" [label=""transferFrom""];
""565_approve"" [label=""approve""];
""565_constructor"" [label=""constructor""];
""565_allowance"" [label=""allowance""];
""565_transfer"" [label=""transfer""];
""565_approveAndCall"" [label=""approveAndCall""];
""565__transfer"" [label=""_transfer""];
""565_transferFrom"" -> ""565__transfer"";
""565_transfer"" -> ""565__transfer"";
""565_approveAndCall"" -> ""565_approve"";
}
"
0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol,BoltToken,"contract BoltToken is ERC20{ address owner = msg.sender; bool public canPurchase = false; mapping (address => uint) balances; mapping (address => uint) roundContributions; address[] roundContributionsIndexes; mapping (address => mapping (address => uint)) allowed; uint public currentSupply = 0; uint public totalSupply = 32032000000000000000000000; uint public round = 0; uint public roundFunds = 0; uint public roundReward = 200200000000000000000000; string public name = ; string public symbol = ; uint8 public decimals = 18; bool public isToken = true; string public tokenSaleAgreement = ""https: uint contributionsDistribStep = 0; event Contribution(address indexed from, uint value); event RoundEnd(uint roundNumber); function balanceOf(address _owner) public constant returns (uint balance) { return balances[_owner]; }",0,"subgraph cluster_576_BoltToken {
label=""BoltToken"";
""576_disablePurchase"" [label=""disablePurchase""];
""576_balanceOf"" [label=""balanceOf""];
""576_approve"" [label=""approve""];
""576_transfer"" [label=""transfer""];
""576_nextRound"" [label=""nextRound""];
""576_allowance"" [label=""allowance""];
""576_changeReward"" [label=""changeReward""];
""576_transferFrom"" [label=""transferFrom""];
""576_contribute"" [label=""contribute""];
""576_enablePurchase"" [label=""enablePurchase""];
""576_changeTsaLink"" [label=""changeTsaLink""];
}
"
0x717294a1c8039dd8bc95c9ba8741b60804f3f0f4.sol,MintableToken,"contract MintableToken is StandardToken, Ownable { event Mint(address indexed to, uint256 amount); event UnMint(address indexed from, uint256 amount); event MintFinished(); modifier canMint() { require(!mintingFinished); _; }",0,"subgraph cluster_634_MintableToken {
label=""MintableToken"";
""634_finishMinting"" [label=""finishMinting""];
""634_mint"" [label=""mint""];
""634_unMint"" [label=""unMint""];
""634_mint"" -> ""634_canMint"";
""634_unMint"" -> ""634_onlyOwner"";
""634_finishMinting"" -> ""634_onlyOwner"";
""634_mint"" -> ""634_onlyOwner"";
}
"
0xd8fce619d059c5506301f6e6271aff1202aebd20.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private admin = msg.sender; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },0,"subgraph cluster_20_PlayerBookReceiverInterface {
label=""PlayerBookReceiverInterface"";
""20_receivePlayerNameList"" [label=""receivePlayerNameList""];
""20_receivePlayerInfo"" [label=""receivePlayerInfo""];
}
"
0x73307e983f8843d3e09d320dd4c35cf2783f71f6.sol,CDonToken,"contract CDonToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CDonToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { symbol = tokenSymbol; name = tokenName; decimals = 18; _totalSupply = initialSupply * 10 ** uint256(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_529_CDonToken {
label=""CDonToken"";
""529_totalSupply"" [label=""totalSupply""];
""529_transfer"" [label=""transfer""];
""529_transferFrom"" [label=""transferFrom""];
""529_approve"" [label=""approve""];
""529_allowance"" [label=""allowance""];
""529_approveAndCall"" [label=""approveAndCall""];
""529_balanceOf"" [label=""balanceOf""];
""529_CDonToken"" [label=""CDonToken""];
}
"
0x86e4dc25259ee2191cd8ae40e1865b9f0319646c.sol,CryptoRomeLandComposableNFT,"contract CryptoRomeLandComposableNFT is ERC998ERC721BottomUpToken, CryptoRomeControl { using SafeMath for uint256; address public newContractAddress; struct LandInfo { uint256 landType; uint256 landImprovements; uint256 askingPrice; }",0,"subgraph cluster_3167_CryptoRomeLandComposableNFT {
label=""CryptoRomeLandComposableNFT"";
""3167_purchaseLand"" [label=""purchaseLand""];
""3167_isCryptoRomeLandComposableNFT"" [label=""isCryptoRomeLandComposableNFT""];
""3167_setNewAddress"" [label=""setNewAddress""];
""3167_cancelLandSale"" [label=""cancelLandSale""];
""3167_composeLand"" [label=""composeLand""];
""3167_getLandImprovementData"" [label=""getLandImprovementData""];
""3167_getAllForSaleStatus"" [label=""getAllForSaleStatus""];
""3167_sellLand"" [label=""sellLand""];
""3167_getLandTypeCount"" [label=""getLandTypeCount""];
""3167_computeFee"" [label=""computeFee""];
""3167_decomposeLand"" [label=""decomposeLand""];
""3167_setTokenURI"" [label=""setTokenURI""];
""3167_updateLandImprovementData"" [label=""updateLandImprovementData""];
""3167__updateSaleData"" [label=""_updateSaleData""];
""3167__createLand"" [label=""_createLand""];
""3167_constructor"" [label=""constructor""];
""3167_getLand"" [label=""getLand""];
""3167_createLand"" [label=""createLand""];
""3167_composeNewLand"" [label=""composeNewLand""];
""3167_cancelLandSale"" -> ""3167__updateSaleData"";
""3167_setNewAddress"" -> ""3167_onlyOwner"";
""3167_decomposeLand"" -> ""3167__transferFrom"";
""3167_decomposeLand"" -> ""3167_childTokenByIndex"";
""3167_createLand"" -> ""3167__createLand"";
""3167_composeNewLand"" -> ""3167_composeLand"";
""3167_composeLand"" -> ""3167_whenNotPaused"";
""3167_decomposeLand"" -> ""3167_transferFromParent"";
""3167_purchaseLand"" -> ""3167__updateSaleData"";
""3167_cancelLandSale"" -> ""3167_whenNotPaused"";
""3167_composeLand"" -> ""3167_transferToParent"";
""3167_decomposeLand"" -> ""3167_totalChildTokens"";
""3167_updateLandImprovementData"" -> ""3167_whenNotPaused"";
""3167_sellLand"" -> ""3167_whenNotPaused"";
""3167_purchaseLand"" -> ""3167_computeFee"";
""3167__createLand"" -> ""3167__mint"";
""3167_setTokenURI"" -> ""3167_anyOperator"";
""3167_purchaseLand"" -> ""3167_whenNotPaused"";
""3167_sellLand"" -> ""3167__updateSaleData"";
""3167_purchaseLand"" -> ""3167__transferFrom"";
""3167_composeLand"" -> ""3167__transferFrom"";
""3167_createLand"" -> ""3167_anyOperator"";
""3167_createLand"" -> ""3167_whenNotPaused"";
""3167_updateLandImprovementData"" -> ""3167_onlyImprovementContract"";
""3167_composeNewLand"" -> ""3167__createLand"";
""3167_decomposeLand"" -> ""3167_whenNotPaused"";
""3167_composeNewLand"" -> ""3167_whenNotPaused"";
}
"
0x29305d0b0b7046a0b6c2381bc33f771dd8ad13f8.sol,CrowdsaleBase,"contract CrowdsaleBase is Haltable { uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5; using SafeMathLib for uint; FractionalERC20 public token; PricingStrategy public pricingStrategy; FinalizeAgent public finalizeAgent; address public multisigWallet; uint public minimumFundingGoal; uint public startsAt; uint public endsAt; uint public tokensSold = 0; uint public weiRaised = 0; uint public presaleWeiRaised = 0; uint public investorCount = 0; uint public loadedRefund = 0; uint public weiRefunded = 0; bool public finalized; mapping (address => uint256) public investedAmountOf; mapping (address => uint256) public tokenAmountOf; mapping (address => bool) public earlyParticipantWhitelist; uint public ownerTestValue; enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}",0,"subgraph cluster_1069_CrowdsaleBase {
label=""CrowdsaleBase"";
""1069_setEndsAt"" [label=""setEndsAt""];
""1069_investInternal"" [label=""investInternal""];
""1069_finalize"" [label=""finalize""];
""1069_assignTokens"" [label=""assignTokens""];
""1069_isBreakingCap"" [label=""isBreakingCap""];
""1069_isFinalizerSane"" [label=""isFinalizerSane""];
""1069_setOwnerTestValue"" [label=""setOwnerTestValue""];
""1069_setPricingStrategy"" [label=""setPricingStrategy""];
""1069_setFinalizeAgent"" [label=""setFinalizeAgent""];
""1069_loadRefund"" [label=""loadRefund""];
""1069_isPricingSane"" [label=""isPricingSane""];
""1069_refund"" [label=""refund""];
""1069_calculateTokens"" [label=""calculateTokens""];
""1069_isCrowdsale"" [label=""isCrowdsale""];
""1069_CrowdsaleBase"" [label=""CrowdsaleBase""];
""1069_buyTokens"" [label=""buyTokens""];
""1069_setEarlyParicipantWhitelist"" [label=""setEarlyParicipantWhitelist""];
""1069_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""1069_isMinimumGoalReached"" [label=""isMinimumGoalReached""];
""1069_fallback"" [label=""fallback""];
""1069_getState"" [label=""getState""];
""1069_setMultisig"" [label=""setMultisig""];
""1069_buyTokens"" -> ""1069_isBreakingCap"";
""1069_loadRefund"" -> ""1069_inState"";
""1069_buyTokens"" -> ""1069_getState"";
""1069_setMultisig"" -> ""1069_onlyOwner"";
""1069_buyTokens"" -> ""1069_stopInEmergency"";
""1069_setEarlyParicipantWhitelist"" -> ""1069_onlyOwner"";
""1069_investInternal"" -> ""1069_buyTokens"";
""1069_finalize"" -> ""1069_stopInEmergency"";
""1069_finalize"" -> ""1069_inState"";
""1069_refund"" -> ""1069_inState"";
""1069_getState"" -> ""1069_isMinimumGoalReached"";
""1069_investInternal"" -> ""1069_stopInEmergency"";
""1069_setOwnerTestValue"" -> ""1069_onlyOwner"";
""1069_setPricingStrategy"" -> ""1069_onlyOwner"";
""1069_finalize"" -> ""1069_onlyOwner"";
""1069_getState"" -> ""1069_isCrowdsaleFull"";
""1069_buyTokens"" -> ""1069_assignTokens"";
""1069_setFinalizeAgent"" -> ""1069_onlyOwner"";
""1069_setEndsAt"" -> ""1069_onlyOwner"";
""1069_CrowdsaleBase"" -> ""1069_setPricingStrategy"";
}
"
0x1c8c70478e92abc44843245bd6d88035236b4ed9.sol,MajorityGameFactory,contract MajorityGameFactory { address[] private deployedGames; address[] private endedGames; address private adminAddress; mapping(address => uint) private gameAddressIdMap; uint private gameCount = 38; uint private endedGameCount = 0; modifier adminOnly() { require(msg.sender == adminAddress); _; },0,"subgraph cluster_283_MajorityGameFactory {
label=""MajorityGameFactory"";
""283_setJackpot"" [label=""setJackpot""];
""283_forceEndGame"" [label=""forceEndGame""];
""283_endGame"" [label=""endGame""];
""283_createGame"" [label=""createGame""];
""283_getEndedGames"" [label=""getEndedGames""];
""283_constructor"" [label=""constructor""];
""283_getDeployedGames"" [label=""getDeployedGames""];
""283_createGame"" -> ""283_adminOnly"";
""283_setJackpot"" -> ""283_adminOnly"";
""283_createGame"" -> ""283_setJackpot"";
""283_forceEndGame"" -> ""283_adminOnly"";
}
"
0x56a7d37b5252b057aebce6d65d2f87e49f1e1dcd.sol,EnnaMaEppadi,contract EnnaMaEppadi { uint256 constant scaleFactor = 0x10000000000000000; int constant crr_n = 4; int constant crr_d = 5; int constant price_coeff = -0x678adeacb985cb06; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; mapping(address => uint256) public tokenBalance; mapping(address => int256) public payouts; uint256 public totalSupply; int256 totalPayouts; uint256 earningsPerToken; uint256 public contractBalance; function EnnaMaEppadi() public {},0,"subgraph cluster_1170_EnnaMaEppadi {
label=""EnnaMaEppadi"";
""1170_sellPrice"" [label=""sellPrice""];
""1170_fixedLog"" [label=""fixedLog""];
""1170_reinvestDividends"" [label=""reinvestDividends""];
""1170_withdraw"" [label=""withdraw""];
""1170_EnnaMaEppadi"" [label=""EnnaMaEppadi""];
""1170_balance"" [label=""balance""];
""1170_reserve"" [label=""reserve""];
""1170_div"" [label=""div""];
""1170_fallback"" [label=""fallback""];
""1170_fund"" [label=""fund""];
""1170_buy"" [label=""buy""];
""1170_withdrawOld"" [label=""withdrawOld""];
""1170_getMeOutOfHere"" [label=""getMeOutOfHere""];
""1170_sellMyTokens"" [label=""sellMyTokens""];
""1170_mul"" [label=""mul""];
""1170_add"" [label=""add""];
""1170_buyPrice"" [label=""buyPrice""];
""1170_calculateDividendTokens"" [label=""calculateDividendTokens""];
""1170_dividends"" [label=""dividends""];
""1170_fixedExp"" [label=""fixedExp""];
""1170_sub"" [label=""sub""];
""1170_getEtherForTokens"" [label=""getEtherForTokens""];
""1170_getTokensForEther"" [label=""getTokensForEther""];
""1170_sell"" [label=""sell""];
""1170_balanceOf"" [label=""balanceOf""];
""1170_buy"" -> ""1170_getTokensForEther"";
""1170_getTokensForEther"" -> ""1170_sub"";
""1170_sellMyTokens"" -> ""1170_sell"";
""1170_fund"" -> ""1170_add"";
""1170_buyPrice"" -> ""1170_getTokensForEther"";
""1170_sellPrice"" -> ""1170_getEtherForTokens"";
""1170_reinvestDividends"" -> ""1170_add"";
""1170_calculateDividendTokens"" -> ""1170_fixedLog"";
""1170_calculateDividendTokens"" -> ""1170_reserve"";
""1170_withdraw"" -> ""1170_dividends"";
""1170_fallback"" -> ""1170_fund"";
""1170_reinvestDividends"" -> ""1170_calculateDividendTokens"";
""1170_getEtherForTokens"" -> ""1170_fixedLog"";
""1170_reinvestDividends"" -> ""1170_dividends"";
""1170_buy"" -> ""1170_reserve"";
""1170_getTokensForEther"" -> ""1170_reserve"";
""1170_sellMyTokens"" -> ""1170_balanceOf"";
""1170_reinvestDividends"" -> ""1170_reserve"";
""1170_sell"" -> ""1170_getEtherForTokens"";
""1170_calculateDividendTokens"" -> ""1170_fixedExp"";
""1170_getEtherForTokens"" -> ""1170_reserve"";
""1170_reserve"" -> ""1170_sub"";
""1170_reinvestDividends"" -> ""1170_div"";
""1170_reserve"" -> ""1170_balance"";
""1170_withdraw"" -> ""1170_sub"";
""1170_withdrawOld"" -> ""1170_sub"";
""1170_sell"" -> ""1170_sub"";
""1170_sell"" -> ""1170_add"";
""1170_getMeOutOfHere"" -> ""1170_sellMyTokens"";
""1170_withdrawOld"" -> ""1170_dividends"";
""1170_getMeOutOfHere"" -> ""1170_withdraw"";
""1170_getTokensForEther"" -> ""1170_fixedLog"";
""1170_buy"" -> ""1170_add"";
""1170_sellPrice"" -> ""1170_div"";
""1170_getEtherForTokens"" -> ""1170_sub"";
""1170_fallback"" -> ""1170_withdrawOld"";
""1170_getEtherForTokens"" -> ""1170_fixedExp"";
""1170_getTokensForEther"" -> ""1170_fixedExp"";
""1170_calculateDividendTokens"" -> ""1170_sub"";
""1170_sell"" -> ""1170_div"";
""1170_fund"" -> ""1170_buy"";
""1170_buy"" -> ""1170_div"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,HelloGoldToken,"contract HelloGoldToken is ERC20, SafeMath, Pausable, StandardToken { string public name; string public symbol; uint8 public decimals; GBT goldtoken; function setGBT(address gbt_) onlyOwner { goldtoken = GBT(gbt_); }",0,"subgraph cluster_820_HelloGoldToken {
label=""HelloGoldToken"";
""820_transfer"" [label=""transfer""];
""820_approve"" [label=""approve""];
""820_GBTAddress"" [label=""GBTAddress""];
""820_HelloGoldToken"" [label=""HelloGoldToken""];
""820_parentChange"" [label=""parentChange""];
""820_parentFees"" [label=""parentFees""];
""820_transferFrom"" [label=""transferFrom""];
""820_setGBT"" [label=""setGBT""];
""820_approve"" -> ""820_whenNotPaused"";
""820_transferFrom"" -> ""820_parentChange"";
""820_transferFrom"" -> ""820_parentFees"";
""820_transferFrom"" -> ""820_transferFrom"";
""820_transfer"" -> ""820_parentChange"";
""820_transfer"" -> ""820_transfer"";
""820_approve"" -> ""820_approve"";
""820_transfer"" -> ""820_parentFees"";
""820_setGBT"" -> ""820_onlyOwner"";
""820_transfer"" -> ""820_whenNotPaused"";
}
"
0x0db75bdd12f381a7e858a43c729417217021bb4e.sol,CMGF,"contract CMGF is ERC20,Ownable{ using SafeMath for uint256; string public constant name=; string public symbol=; string public constant version = ; uint256 public constant decimals = 18; uint256 public totalSupply; uint256 public constant MAX_SUPPLY=1000000000*10**decimals; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event GetETH(address indexed _from, uint256 _value); function CMGF(){ totalSupply=MAX_SUPPLY; balances[msg.sender] = MAX_SUPPLY; Transfer(0x0, msg.sender, MAX_SUPPLY); }",0,"subgraph cluster_491_CMGF {
label=""CMGF"";
""491_approve"" [label=""approve""];
""491_fallback"" [label=""fallback""];
""491_CMGF"" [label=""CMGF""];
""491_etherProceeds"" [label=""etherProceeds""];
""491_transfer"" [label=""transfer""];
""491_allowance"" [label=""allowance""];
""491_transferFrom"" [label=""transferFrom""];
""491_balanceOf"" [label=""balanceOf""];
""491_etherProceeds"" -> ""491_onlyOwner"";
}
"
0x326ce88b27c196d0387f5df7ae085c1203185cb4.sol,LoliCoin,"contract LoliCoin is owned, TokenERC20 { mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function LoliCoin() TokenERC20() public {}",0,"subgraph cluster_532_LoliCoin {
label=""LoliCoin"";
""532_mintToken"" [label=""mintToken""];
""532__transfer"" [label=""_transfer""];
""532_freezeAccount"" [label=""freezeAccount""];
""532_LoliCoin"" [label=""LoliCoin""];
""532_freezeAccount"" -> ""532_onlyOwner"";
""532_mintToken"" -> ""532_onlyOwner"";
""532_LoliCoin"" -> ""532_TokenERC20"";
}
"
0xf3eb09a1fd5a3e133a669074de1231d7a673744b.sol,ExoTownIco,"contract ExoTownIco is SafeMath, IcoLimits { ExoTownToken public exotownToken; enum State { Pause, Running }",0,"subgraph cluster_1520_ExoTownIco {
label=""ExoTownIco"";
""1520_distributeEtherByStage"" [label=""distributeEtherByStage""];
""1520_getEtherRaised"" [label=""getEtherRaised""];
""1520_setNewManager"" [label=""setNewManager""];
""1520_fallback"" [label=""fallback""];
""1520_withdrawEther"" [label=""withdrawEther""];
""1520_ExoTownIco"" [label=""ExoTownIco""];
""1520_sendTokensToFounders"" [label=""sendTokensToFounders""];
""1520_getStageSoldTokens"" [label=""getStageSoldTokens""];
""1520_addStageEtherRaised"" [label=""addStageEtherRaised""];
""1520_getTokensSold"" [label=""getTokensSold""];
""1520_giftToken"" [label=""giftToken""];
""1520_getPrice"" [label=""getPrice""];
""1520_isPreSale"" [label=""isPreSale""];
""1520_getStageSupplyLimit"" [label=""getStageSupplyLimit""];
""1520_isPublicSale"" [label=""isPublicSale""];
""1520_init"" [label=""init""];
""1520_setState"" [label=""setState""];
""1520_isPrivateSale"" [label=""isPrivateSale""];
""1520_addStageTokensSold"" [label=""addStageTokensSold""];
""1520_setNewMediator"" [label=""setNewMediator""];
""1520_buyTokens"" [label=""buyTokens""];
""1520_setBountyCampaign"" [label=""setBountyCampaign""];
""1520_sendTokensToBountyOwner"" [label=""sendTokensToBountyOwner""];
""1520_getStageEtherRaised"" [label=""getStageEtherRaised""];
""1520_burnTokens"" [label=""burnTokens""];
""1520_getStageSoldTokens"" -> ""1520_isPrivateSale"";
""1520_buyTokens"" -> ""1520_addStageEtherRaised"";
""1520_buyTokens"" -> ""1520_getStageSupplyLimit"";
""1520_getStageSupplyLimit"" -> ""1520_isPrivateSale"";
""1520_buyTokens"" -> ""1520_mul"";
""1520_sendTokensToFounders"" -> ""1520_onlyManager"";
""1520_addStageTokensSold"" -> ""1520_isPreSale"";
""1520_getPrice"" -> ""1520_isPrivateSale"";
""1520_getStageEtherRaised"" -> ""1520_isPrivateSale"";
""1520_addStageEtherRaised"" -> ""1520_isPublicSale"";
""1520_addStageEtherRaised"" -> ""1520_add"";
""1520_addStageEtherRaised"" -> ""1520_isPrivateSale"";
""1520_addStageTokensSold"" -> ""1520_isPrivateSale"";
""1520_setBountyCampaign"" -> ""1520_onlyManager"";
""1520_sendTokensToFounders"" -> ""1520_afterPublicSale"";
""1520_getStageSoldTokens"" -> ""1520_isPreSale"";
""1520_sendTokensToFounders"" -> ""1520_whenInitialized"";
""1520_buyTokens"" -> ""1520_getStageSoldTokens"";
""1520_giftToken"" -> ""1520_onIco"";
""1520_getPrice"" -> ""1520_isPreSale"";
""1520_setNewManager"" -> ""1520_onlyManager"";
""1520_getStageEtherRaised"" -> ""1520_isPublicSale"";
""1520_buyTokens"" -> ""1520_addStageTokensSold"";
""1520_buyTokens"" -> ""1520_getPrice"";
""1520_sendTokensToBountyOwner"" -> ""1520_onlyManager"";
""1520_fallback"" -> ""1520_buyTokens"";
""1520_sendTokensToBountyOwner"" -> ""1520_getTokensSold"";
""1520_getStageEtherRaised"" -> ""1520_isPreSale"";
""1520_sendTokensToBountyOwner"" -> ""1520_whenInitialized"";
""1520_sendTokensToBountyOwner"" -> ""1520_afterPublicSale"";
""1520_sendTokensToFounders"" -> ""1520_getTokensSold"";
""1520_burnTokens"" -> ""1520_afterPublicSale"";
""1520_withdrawEther"" -> ""1520_onlyManager"";
""1520_buyTokens"" -> ""1520_distributeEtherByStage"";
""1520_buyTokens"" -> ""1520_volumeBonus"";
""1520_buyTokens"" -> ""1520_add"";
""1520_getStageSupplyLimit"" -> ""1520_isPreSale"";
""1520_getPrice"" -> ""1520_isPublicSale"";
""1520_getStageSupplyLimit"" -> ""1520_isPublicSale"";
""1520_setState"" -> ""1520_onlyManager"";
""1520_addStageEtherRaised"" -> ""1520_isPreSale"";
""1520_getStageSoldTokens"" -> ""1520_isPublicSale"";
""1520_giftToken"" -> ""1520_buyTokens"";
""1520_setNewMediator"" -> ""1520_onlyManager"";
""1520_sendTokensToBountyOwner"" -> ""1520_hasBountyCampaign"";
""1520_addStageTokensSold"" -> ""1520_add"";
""1520_fallback"" -> ""1520_onIco"";
""1520_addStageTokensSold"" -> ""1520_isPublicSale"";
""1520_init"" -> ""1520_onlyManager"";
}
"
0xda6245b3355e15cb38f65701700876de75ef4bef.sol,HOT,"contract HOT { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); function HOT() public { totalSupply = 500000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",0,"subgraph cluster_275_HOT {
label=""HOT"";
""275__transfer"" [label=""_transfer""];
""275_transferFrom"" [label=""transferFrom""];
""275_approve"" [label=""approve""];
""275_HOT"" [label=""HOT""];
""275_approveAndCall"" [label=""approveAndCall""];
""275_transfer"" [label=""transfer""];
""275_transferFrom"" -> ""275__transfer"";
""275_approveAndCall"" -> ""275_approve"";
""275_transfer"" -> ""275__transfer"";
}
"
0x7427cedbd696c9cc9420244f2ef633028f1ad238.sol,ERC820Implementer,"contract ERC820Implementer { ERC820Registry erc820Registry = ERC820Registry(0x991a1bcb077599290d7305493c9A630c20f8b798); function setInterfaceImplementation(string ifaceLabel, address impl) internal { bytes32 ifaceHash = keccak256(ifaceLabel); erc820Registry.setInterfaceImplementer(this, ifaceHash, impl); }",0,"subgraph cluster_1214_ERC820Implementer {
label=""ERC820Implementer"";
""1214_setInterfaceImplementation"" [label=""setInterfaceImplementation""];
""1214_interfaceAddr"" [label=""interfaceAddr""];
""1214_delegateManagement"" [label=""delegateManagement""];
}
"
0xf3e70642c28f3f707408c56624c2f30ea9f9fce3.sol,AlbosToken,"contract AlbosToken is StandardToken { string constant public name = ; string constant public symbol = ; uint256 public decimals = 18; uint256 public INITIAL_SUPPLY = uint256(28710000000).mul(10 ** decimals); uint256 public foundersSupply = uint256(4306500000).mul(10 ** decimals); uint256 public reservedSupply = uint256(2871000000).mul(10 ** decimals); AlbosWallet public albosWallet; constructor() public { totalSupply_ = INITIAL_SUPPLY; balances[address(this)] = totalSupply_; emit Transfer(0x0, address(this), totalSupply_); agentAddress = msg.sender; staff[owner] = true; staff[agentAddress] = true; }",0,"subgraph cluster_2173_AlbosToken {
label=""AlbosToken"";
""2173_addPrivateSaleTokens"" [label=""addPrivateSaleTokens""];
""2173_constructor"" [label=""constructor""];
""2173_addPreSaleTokensMulti"" [label=""addPreSaleTokensMulti""];
""2173_addFrostTokensMulti"" [label=""addFrostTokensMulti""];
""2173_reservedSupply"" [label=""reservedSupply""];
""2173_foundersSupply"" [label=""foundersSupply""];
""2173_addUniqueSaleTokensMulti"" [label=""addUniqueSaleTokensMulti""];
""2173_transferAgent"" [label=""transferAgent""];
""2173_addStaff"" [label=""addStaff""];
""2173_launchTime"" [label=""launchTime""];
""2173_addCrowdSaleTokens"" [label=""addCrowdSaleTokens""];
""2173_addUniqueSaleTokens"" [label=""addUniqueSaleTokens""];
""2173_addPrivateSaleTokensMulti"" [label=""addPrivateSaleTokensMulti""];
""2173_addFrostTokens"" [label=""addFrostTokens""];
""2173_transferAndFrostTokens"" [label=""transferAndFrostTokens""];
""2173_killFrost"" [label=""killFrost""];
""2173_addCrowdSaleTokensMulti"" [label=""addCrowdSaleTokensMulti""];
""2173_addPreSaleTokens"" [label=""addPreSaleTokens""];
""2173_startListing"" [label=""startListing""];
""2173_setTeamContract"" [label=""setTeamContract""];
""2173_addFrostTokensMulti"" -> ""2173_onlyAgent"";
""2173_transferAgent"" -> ""2173_onlyOwner"";
""2173_addPrivateSaleTokens"" -> ""2173_onlyAgent"";
""2173_addPreSaleTokens"" -> ""2173_onlyAgent"";
""2173_transferAndFrostTokens"" -> ""2173_addFrostTokens"";
""2173_killFrost"" -> ""2173_onlyOwner"";
""2173_addUniqueSaleTokensMulti"" -> ""2173_onlyAgent"";
""2173_addFrostTokens"" -> ""2173_onlyAgent"";
""2173_addStaff"" -> ""2173_onlyOwner"";
""2173_addPreSaleTokensMulti"" -> ""2173_onlyAgent"";
""2173_addCrowdSaleTokensMulti"" -> ""2173_onlyAgent"";
""2173_startListing"" -> ""2173_onlyOwner"";
""2173_transferAndFrostTokens"" -> ""2173_onlyAgent"";
""2173_addUniqueSaleTokens"" -> ""2173_onlyAgent"";
""2173_setTeamContract"" -> ""2173_onlyOwner"";
""2173_addPrivateSaleTokensMulti"" -> ""2173_onlyAgent"";
""2173_addCrowdSaleTokens"" -> ""2173_onlyAgent"";
}
"
0x743c9ec8cd6ca121194ae10d984675ad15691188.sol,TestEdu,contract TestEdu { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 12; uint public _totalSupply = 9000000000000000000; uint256 public RATE = 1; bool public isMinting = false; bool public isExchangeListed = false; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_541_TestEdu {
label=""TestEdu"";
""541_endCrowdsale"" [label=""endCrowdsale""];
""541_approve"" [label=""approve""];
""541_burnTokens"" [label=""burnTokens""];
""541_constructor"" [label=""constructor""];
""541_totalSupply"" [label=""totalSupply""];
""541_transfer"" [label=""transfer""];
""541_transferFrom"" [label=""transferFrom""];
""541_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""541_balanceOf"" [label=""balanceOf""];
""541_allowance"" [label=""allowance""];
""541_createTokens"" [label=""createTokens""];
""541_fallback"" [label=""fallback""];
""541_burnTokens"" -> ""541_onlyOwner"";
""541_changeCrowdsaleRate"" -> ""541_onlyOwner"";
""541_endCrowdsale"" -> ""541_onlyOwner"";
""541_fallback"" -> ""541_createTokens"";
}
"
0xed231a75b03c2cd388ee26d4f74abf88cb683e8c.sol,SafeDecimalMath,"contract SafeDecimalMath { uint8 public constant decimals = 18; uint public constant UNIT = 10 ** uint(decimals); function addIsSafe(uint x, uint y) pure internal returns (bool) { return x + y >= y; }",0,"subgraph cluster_301_SafeDecimalMath {
label=""SafeDecimalMath"";
""301_subIsSafe"" [label=""subIsSafe""];
""301_max"" [label=""max""];
""301_min"" [label=""min""];
""301_mulIsSafe"" [label=""mulIsSafe""];
""301_intToDec"" [label=""intToDec""];
""301_safeMul_dec"" [label=""safeMul_dec""];
""301_safeAdd"" [label=""safeAdd""];
""301_safeMul"" [label=""safeMul""];
""301_addIsSafe"" [label=""addIsSafe""];
""301_safeDiv_dec"" [label=""safeDiv_dec""];
""301_safeDiv"" [label=""safeDiv""];
""301_safeSub"" [label=""safeSub""];
""301_divIsSafe"" [label=""divIsSafe""];
""301_safeDiv_dec"" -> ""301_safeDiv"";
""301_safeMul_dec"" -> ""301_safeMul"";
""301_intToDec"" -> ""301_safeMul"";
""301_safeDiv_dec"" -> ""301_safeMul"";
}
"
0x296290156dd77fc06db14806a350785d32994485.sol,EtherPower,"contract EtherPower is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 1000000000e8; uint256 public totalDistributed = 8000000e8; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1121_EtherPower {
label=""EtherPower"";
""1121_transferFrom"" [label=""transferFrom""];
""1121_transferOwnership"" [label=""transferOwnership""];
""1121_getTokens"" [label=""getTokens""];
""1121_distributeAmounts"" [label=""distributeAmounts""];
""1121_balanceOf"" [label=""balanceOf""];
""1121_allowance"" [label=""allowance""];
""1121_getTokenBalance"" [label=""getTokenBalance""];
""1121_disableWhitelist"" [label=""disableWhitelist""];
""1121_transfer"" [label=""transfer""];
""1121_fallback"" [label=""fallback""];
""1121_distr"" [label=""distr""];
""1121_distribution"" [label=""distribution""];
""1121_EtherPower"" [label=""EtherPower""];
""1121_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1121_approve"" [label=""approve""];
""1121_burn"" [label=""burn""];
""1121_finishDistribution"" [label=""finishDistribution""];
""1121_airdrop"" [label=""airdrop""];
""1121_enableWhitelist"" [label=""enableWhitelist""];
""1121_withdraw"" [label=""withdraw""];
""1121_withdrawForeignTokens"" -> ""1121_onlyOwner"";
""1121_fallback"" -> ""1121_getTokens"";
""1121_disableWhitelist"" -> ""1121_onlyOwner"";
""1121_finishDistribution"" -> ""1121_onlyOwner"";
""1121_distributeAmounts"" -> ""1121_canDistr"";
""1121_getTokens"" -> ""1121_distr"";
""1121_distr"" -> ""1121_canDistr"";
""1121_withdraw"" -> ""1121_onlyOwner"";
""1121_airdrop"" -> ""1121_onlyOwner"";
""1121_transferFrom"" -> ""1121_onlyPayloadSize"";
""1121_transfer"" -> ""1121_onlyPayloadSize"";
""1121_getTokens"" -> ""1121_canDistr"";
""1121_EtherPower"" -> ""1121_distr"";
""1121_distribution"" -> ""1121_canDistr"";
""1121_distribution"" -> ""1121_onlyOwner"";
""1121_enableWhitelist"" -> ""1121_onlyOwner"";
""1121_distributeAmounts"" -> ""1121_distr"";
""1121_airdrop"" -> ""1121_canDistr"";
""1121_burn"" -> ""1121_onlyOwner"";
""1121_distribution"" -> ""1121_distr"";
""1121_distributeAmounts"" -> ""1121_onlyOwner"";
""1121_airdrop"" -> ""1121_distr"";
""1121_transferOwnership"" -> ""1121_onlyOwner"";
""1121_finishDistribution"" -> ""1121_canDistr"";
""1121_getTokens"" -> ""1121_onlyWhitelist"";
}
"
0x0d53f391d949405350ede7a66c4dd8c034e6c747.sol,TestTest,contract TestTest { modifier onlyPeopleWithTokens() { require(myTokens() > 0);_; },0,"subgraph cluster_1291_TestTest {
label=""TestTest"";
""1291_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1291_withdraw"" [label=""withdraw""];
""1291_myTokens"" [label=""myTokens""];
""1291_buyPrice"" [label=""buyPrice""];
""1291_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1291_sqrt"" [label=""sqrt""];
""1291_balanceOf"" [label=""balanceOf""];
""1291_disableInitialStage"" [label=""disableInitialStage""];
""1291_transfer"" [label=""transfer""];
""1291_sellPrice"" [label=""sellPrice""];
""1291_totalSupply"" [label=""totalSupply""];
""1291_reinvest"" [label=""reinvest""];
""1291_myDividends"" [label=""myDividends""];
""1291_dividendsOf"" [label=""dividendsOf""];
""1291_setSymbol"" [label=""setSymbol""];
""1291_buy"" [label=""buy""];
""1291_TestTest"" [label=""TestTest""];
""1291_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1291_exit"" [label=""exit""];
""1291_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1291_setStakingRequirement"" [label=""setStakingRequirement""];
""1291_setName"" [label=""setName""];
""1291_purchaseTokens"" [label=""purchaseTokens""];
""1291_fallback"" [label=""fallback""];
""1291_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1291_sell"" [label=""sell""];
""1291_transfer"" -> ""1291_withdraw"";
""1291_sell"" -> ""1291_onlyPeopleWithTokens"";
""1291_setStakingRequirement"" -> ""1291_onlyAdmin"";
""1291_withdraw"" -> ""1291_onlyPeopleWithProfits"";
""1291_myTokens"" -> ""1291_balanceOf"";
""1291_setName"" -> ""1291_onlyAdmin"";
""1291_ethereumToTokens_"" -> ""1291_sqrt"";
""1291_reinvest"" -> ""1291_purchaseTokens"";
""1291_buy"" -> ""1291_purchaseTokens"";
""1291_myDividends"" -> ""1291_dividendsOf"";
""1291_transfer"" -> ""1291_onlyPeopleWithTokens"";
""1291_sellPrice"" -> ""1291_tokensToEthereum_"";
""1291_exit"" -> ""1291_withdraw"";
""1291_transfer"" -> ""1291_myDividends"";
""1291_sell"" -> ""1291_tokensToEthereum_"";
""1291_disableInitialStage"" -> ""1291_onlyAdmin"";
""1291_calculateTokensReceived"" -> ""1291_ethereumToTokens_"";
""1291_reinvest"" -> ""1291_onlyPeopleWithProfits"";
""1291_purchaseTokens"" -> ""1291_ethereumToTokens_"";
""1291_exit"" -> ""1291_sell"";
""1291_buyPrice"" -> ""1291_tokensToEthereum_"";
""1291_reinvest"" -> ""1291_myDividends"";
""1291_withdraw"" -> ""1291_myDividends"";
""1291_transfer"" -> ""1291_tokensToEthereum_"";
""1291_calculateEthereumReceived"" -> ""1291_tokensToEthereum_"";
""1291_fallback"" -> ""1291_purchaseTokens"";
""1291_purchaseTokens"" -> ""1291_antiEarlyWhale"";
""1291_setSymbol"" -> ""1291_onlyAdmin"";
}
"
0x656038e97cee7c095673f7b9fad695b323a6f098.sol,WheelOf0xBitcoin,contract WheelOf0xBitcoin { using SafeMath for uint; modifier nonContract() { require(tx.origin == msg.sender); _; },0,"subgraph cluster_1398_WheelOf0xBitcoin {
label=""WheelOf0xBitcoin"";
""1398_panicButton"" [label=""panicButton""];
""1398_updateMinBet"" [label=""updateMinBet""];
""1398_determinePrize"" [label=""determinePrize""];
""1398_withdraw"" [label=""withdraw""];
""1398_getDevBalance"" [label=""getDevBalance""];
""1398_startSpin"" [label=""startSpin""];
""1398_random"" [label=""random""];
""1398_lose"" [label=""lose""];
""1398_updateMaxBet"" [label=""updateMaxBet""];
""1398__finishSpin"" [label=""_finishSpin""];
""1398_win"" [label=""win""];
""1398_finishSpin"" [label=""finishSpin""];
""1398_refundUser"" [label=""refundUser""];
""1398_constructor"" [label=""constructor""];
""1398_depositAndSpin"" [label=""depositAndSpin""];
""1398_maxRandom"" [label=""maxRandom""];
""1398_withdrawAll"" [label=""withdrawAll""];
""1398_spinTokens"" [label=""spinTokens""];
""1398_tokenBalanceOf"" [label=""tokenBalanceOf""];
""1398_receiveApproval"" [label=""receiveApproval""];
""1398_withdrawDevFees"" [label=""withdrawDevFees""];
""1398_spinAll"" [label=""spinAll""];
""1398_getBalance"" [label=""getBalance""];
""1398_betPool"" [label=""betPool""];
""1398_deposit"" [label=""deposit""];
""1398__finishSpin"" -> ""1398_random"";
""1398_refundUser"" -> ""1398_onlyAdmin"";
""1398__finishSpin"" -> ""1398_determinePrize"";
""1398_lose"" -> ""1398_tokenBalanceOf"";
""1398_deposit"" -> ""1398_gameActive"";
""1398_lose"" -> ""1398_betPool"";
""1398_deposit"" -> ""1398_tokenBalanceOf"";
""1398_betPool"" -> ""1398_tokenBalanceOf"";
""1398_betPool"" -> ""1398_getBalance"";
""1398_withdraw"" -> ""1398_getBalance"";
""1398_depositAndSpin"" -> ""1398_gameActive"";
""1398_receiveApproval"" -> ""1398_depositAndSpin"";
""1398_refundUser"" -> ""1398_getBalance"";
""1398_refundUser"" -> ""1398_tokenBalanceOf"";
""1398_spinTokens"" -> ""1398_nonContract"";
""1398_spinAll"" -> ""1398_nonContract"";
""1398_spinTokens"" -> ""1398_tokenBalanceOf"";
""1398_depositAndSpin"" -> ""1398_getBalance"";
""1398_withdrawAll"" -> ""1398_getBalance"";
""1398_updateMinBet"" -> ""1398_onlyAdmin"";
""1398_spinAll"" -> ""1398_betPool"";
""1398_spinTokens"" -> ""1398_gameActive"";
""1398_spinAll"" -> ""1398_startSpin"";
""1398_win"" -> ""1398_tokenBalanceOf"";
""1398_win"" -> ""1398_betPool"";
""1398_spinTokens"" -> ""1398_betPool"";
""1398_withdraw"" -> ""1398_tokenBalanceOf"";
""1398__finishSpin"" -> ""1398_tokenBalanceOf"";
""1398_receiveApproval"" -> ""1398_deposit"";
""1398_depositAndSpin"" -> ""1398_startSpin"";
""1398_withdrawAll"" -> ""1398_tokenBalanceOf"";
""1398_spinTokens"" -> ""1398_startSpin"";
""1398_depositAndSpin"" -> ""1398_tokenBalanceOf"";
""1398_finishSpin"" -> ""1398__finishSpin"";
""1398__finishSpin"" -> ""1398_win"";
""1398_deposit"" -> ""1398_getBalance"";
""1398_startSpin"" -> ""1398_lose"";
""1398_spinAll"" -> ""1398_gameActive"";
""1398_panicButton"" -> ""1398_onlyAdmin"";
""1398_depositAndSpin"" -> ""1398_betPool"";
""1398_spinAll"" -> ""1398_tokenBalanceOf"";
""1398_random"" -> ""1398_maxRandom"";
""1398_startSpin"" -> ""1398__finishSpin"";
""1398_updateMaxBet"" -> ""1398_onlyAdmin"";
}
"
0x013620bf5142f9d8487e92c1d514c38e1b086613.sol,Etherumble,contract Etherumble { struct PlayerBets { address addPlayer; uint amount; },0,"subgraph cluster_384_Etherumble {
label=""Etherumble"";
""384_callback"" [label=""callback""];
""384_getPlayerAddress"" [label=""getPlayerAddress""];
""384_Lottery"" [label=""Lottery""];
""384_getPlayerBet"" [label=""getPlayerBet""];
""384_getLastWinnerTicket"" [label=""getLastWinnerTicket""];
""384_fallback"" [label=""fallback""];
""384_getActivePlayers"" [label=""getActivePlayers""];
""384_withrawFee"" [label=""withrawFee""];
""384_getLastWinner"" [label=""getLastWinner""];
""384_withrawWin"" [label=""withrawWin""];
""384_getTotalGames"" [label=""getTotalGames""];
""384_endLottery"" [label=""endLottery""];
""384_getEndBlock"" [label=""getEndBlock""];
""384_destroykill"" [label=""destroykill""];
""384_checkinter"" [label=""checkinter""];
""384_withrawFee"" -> ""384_isOwner"";
""384_endLottery"" -> ""384_withrawWin"";
""384_destroykill"" -> ""384_isOwner"";
""384_fallback"" -> ""384_hasValue"";
""384_callback"" -> ""384_endLottery"";
""384_checkinter"" -> ""384_endLottery"";
""384_callback"" -> ""384_isOwner"";
""384_fallback"" -> ""384_checkinter"";
}
"
0x494176866867ec39f276301392abf3ccd1d7b0c1.sol,FMSExchange,"contract FMSExchange is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 10000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_930_FMSExchange {
label=""FMSExchange"";
""930_distr"" [label=""distr""];
""930_doAirdrop"" [label=""doAirdrop""];
""930_getTokens"" [label=""getTokens""];
""930_withdraw"" [label=""withdraw""];
""930_fallback"" [label=""fallback""];
""930_balanceOf"" [label=""balanceOf""];
""930_transferFrom"" [label=""transferFrom""];
""930_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""930_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""930_updateTokensPerEth"" [label=""updateTokensPerEth""];
""930_getTokenBalance"" [label=""getTokenBalance""];
""930_transfer"" [label=""transfer""];
""930_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""930_finishDistribution"" [label=""finishDistribution""];
""930_approve"" [label=""approve""];
""930_allowance"" [label=""allowance""];
""930_burn"" [label=""burn""];
""930_transferOwnership"" [label=""transferOwnership""];
""930_adminClaimAirdrop"" -> ""930_doAirdrop"";
""930_getTokens"" -> ""930_canDistr"";
""930_adminClaimAirdrop"" -> ""930_onlyOwner"";
""930_transferFrom"" -> ""930_onlyPayloadSize"";
""930_distr"" -> ""930_canDistr"";
""930_updateTokensPerEth"" -> ""930_onlyOwner"";
""930_fallback"" -> ""930_getTokens"";
""930_finishDistribution"" -> ""930_canDistr"";
""930_withdrawAltcoinTokens"" -> ""930_onlyOwner"";
""930_finishDistribution"" -> ""930_onlyOwner"";
""930_adminClaimAirdropMultiple"" -> ""930_doAirdrop"";
""930_adminClaimAirdropMultiple"" -> ""930_onlyOwner"";
""930_transfer"" -> ""930_onlyPayloadSize"";
""930_transferOwnership"" -> ""930_onlyOwner"";
""930_withdraw"" -> ""930_onlyOwner"";
""930_getTokens"" -> ""930_distr"";
""930_burn"" -> ""930_onlyOwner"";
}
"
0x432d8b3b71f9010d4f483cf9cd3377e3781ea613.sol,SafeMath,contract SafeMath { constructor() public{ },0,"subgraph cluster_232_SafeMath {
label=""SafeMath"";
""232_constructor"" [label=""constructor""];
""232_safeAdd"" [label=""safeAdd""];
""232_safeMul"" [label=""safeMul""];
""232_safeSub"" [label=""safeSub""];
}
"
0xbb5b059f574204c344cd3096b420fe563f242890.sol,NetkillerAdvancedToken,"contract NetkillerAdvancedToken { address public owner; string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; uint256 public sellPrice; uint256 public buyPrice; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function NetkillerAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { owner = msg.sender; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_642_NetkillerAdvancedToken {
label=""NetkillerAdvancedToken"";
""642_transfer"" [label=""transfer""];
""642__transfer"" [label=""_transfer""];
""642_setPrices"" [label=""setPrices""];
""642_burn"" [label=""burn""];
""642_mintToken"" [label=""mintToken""];
""642_approve"" [label=""approve""];
""642_sell"" [label=""sell""];
""642_NetkillerAdvancedToken"" [label=""NetkillerAdvancedToken""];
""642_approveAndCall"" [label=""approveAndCall""];
""642_transferOwnership"" [label=""transferOwnership""];
""642_buy"" [label=""buy""];
""642_freezeAccount"" [label=""freezeAccount""];
""642_burnFrom"" [label=""burnFrom""];
""642_transferFrom"" [label=""transferFrom""];
""642_transferOwnership"" -> ""642_onlyOwner"";
""642_burn"" -> ""642_onlyOwner"";
""642_approveAndCall"" -> ""642_approve"";
""642_transferFrom"" -> ""642__transfer"";
""642_approve"" -> ""642_approve"";
""642_burnFrom"" -> ""642_onlyOwner"";
""642_transferFrom"" -> ""642_transferFrom"";
""642_setPrices"" -> ""642_onlyOwner"";
""642_buy"" -> ""642__transfer"";
""642_transfer"" -> ""642_transfer"";
""642_sell"" -> ""642__transfer"";
""642_transfer"" -> ""642__transfer"";
""642_mintToken"" -> ""642_onlyOwner"";
""642_freezeAccount"" -> ""642_onlyOwner"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,ClockAuctionBase,contract ClockAuctionBase { struct Auction { address seller; uint128 startingPrice; uint128 endingPrice; uint64 duration; uint64 startedAt; },0,"subgraph cluster_2307_ClockAuctionBase {
label=""ClockAuctionBase"";
""2307__transfer"" [label=""_transfer""];
""2307__computeCut"" [label=""_computeCut""];
""2307__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""2307__escrow"" [label=""_escrow""];
""2307__cancelAuction"" [label=""_cancelAuction""];
""2307__isOnAuction"" [label=""_isOnAuction""];
""2307__currentPrice"" [label=""_currentPrice""];
""2307__bid"" [label=""_bid""];
""2307__addAuction"" [label=""_addAuction""];
""2307__removeAuction"" [label=""_removeAuction""];
""2307_isOwnerOf"" [label=""isOwnerOf""];
""2307__bid"" -> ""2307__computeCut"";
""2307__cancelAuction"" -> ""2307__removeAuction"";
""2307__currentPrice"" -> ""2307__computeCurrentPrice"";
""2307__bid"" -> ""2307__isOnAuction"";
""2307__bid"" -> ""2307__currentPrice"";
""2307__cancelAuction"" -> ""2307__transfer"";
""2307__bid"" -> ""2307__removeAuction"";
}
"
0x2a92f24bfad42b04cfe5c000be404c2a84ca5b71.sol,CryptoSuperGirlfriend,"contract CryptoSuperGirlfriend { using SafeMath for uint256; address private addressOfOwner; event Add (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); uint256 private priceInit = 0.01 ether; uint256 private idStart = 10001; uint256 private idMax = 10191; struct OwnerInfo{ string ownerName; string ownerWords; string ownerImg; string ownerNation; }",0,"subgraph cluster_1544_CryptoSuperGirlfriend {
label=""CryptoSuperGirlfriend"";
""1544_changeItemName"" [label=""changeItemName""];
""1544_transferOwnership"" [label=""transferOwnership""];
""1544_constructor"" [label=""constructor""];
""1544_newItem"" [label=""newItem""];
""1544_transferFrom"" [label=""transferFrom""];
""1544_balanceOf"" [label=""balanceOf""];
""1544_ownerInfoOf"" [label=""ownerInfoOf""];
""1544__checkItemId"" [label=""_checkItemId""];
""1544__transfer"" [label=""_transfer""];
""1544_setIdRange"" [label=""setIdRange""];
""1544_itemOf"" [label=""itemOf""];
""1544_priceOf"" [label=""priceOf""];
""1544_tokenExists"" [label=""tokenExists""];
""1544_owner"" [label=""owner""];
""1544_approve"" [label=""approve""];
""1544_getApproved"" [label=""getApproved""];
""1544_itemsRange"" [label=""itemsRange""];
""1544_changeOwnerInfo"" [label=""changeOwnerInfo""];
""1544_transfer"" [label=""transfer""];
""1544_totalSupply"" [label=""totalSupply""];
""1544_tokenByIndex"" [label=""tokenByIndex""];
""1544_tokenOfOwnerByIndex"" [label=""tokenOfOwnerByIndex""];
""1544_tokensOf"" [label=""tokensOf""];
""1544_name"" [label=""name""];
""1544_symbol"" [label=""symbol""];
""1544_implementsERC721"" [label=""implementsERC721""];
""1544_calculateNextPrice"" [label=""calculateNextPrice""];
""1544_addItem"" [label=""addItem""];
""1544_ownerOf"" [label=""ownerOf""];
""1544_sellPriceOf"" [label=""sellPriceOf""];
""1544_buy"" [label=""buy""];
""1544_changeOwnerInfo"" -> ""1544_ownerOf"";
""1544_approve"" -> ""1544_ownerOf"";
""1544_addItem"" -> ""1544_newItem"";
""1544_tokenOfOwnerByIndex"" -> ""1544_ownerOf"";
""1544_tokensOf"" -> ""1544_ownerOf"";
""1544_buy"" -> ""1544_ownerOf"";
""1544_approve"" -> ""1544_tokenExists"";
""1544_priceOf"" -> ""1544__checkItemId"";
""1544_tokenExists"" -> ""1544__checkItemId"";
""1544_itemOf"" -> ""1544__checkItemId"";
""1544_tokenOfOwnerByIndex"" -> ""1544_balanceOf"";
""1544_buy"" -> ""1544__checkItemId"";
""1544_buy"" -> ""1544_sellPriceOf"";
""1544_addItem"" -> ""1544_onlyOwner"";
""1544_sellPriceOf"" -> ""1544__checkItemId"";
""1544_buy"" -> ""1544_owner"";
""1544_buy"" -> ""1544_newItem"";
""1544_balanceOf"" -> ""1544_ownerOf"";
""1544_changeOwnerInfo"" -> ""1544__checkItemId"";
""1544_changeItemName"" -> ""1544_onlyOwner"";
""1544_itemOf"" -> ""1544_ownerOf"";
""1544_itemOf"" -> ""1544_priceOf"";
""1544_transferFrom"" -> ""1544__transfer"";
""1544_transferOwnership"" -> ""1544_onlyOwner"";
""1544_newItem"" -> ""1544__checkItemId"";
""1544_buy"" -> ""1544_priceOf"";
""1544_newItem"" -> ""1544_tokenExists"";
""1544_tokenByIndex"" -> ""1544_totalSupply"";
""1544_getApproved"" -> ""1544_tokenExists"";
""1544__transfer"" -> ""1544_tokenExists"";
""1544_transferFrom"" -> ""1544_getApproved"";
""1544_tokensOf"" -> ""1544_sellPriceOf"";
""1544_transfer"" -> ""1544__transfer"";
""1544_tokensOf"" -> ""1544_priceOf"";
""1544_transfer"" -> ""1544_ownerOf"";
""1544_ownerInfoOf"" -> ""1544__checkItemId"";
""1544_itemOf"" -> ""1544_sellPriceOf"";
""1544_tokensOf"" -> ""1544_balanceOf"";
""1544_buy"" -> ""1544_tokenExists"";
""1544_setIdRange"" -> ""1544_onlyOwner"";
""1544_buy"" -> ""1544_calculateNextPrice"";
""1544_buy"" -> ""1544__transfer"";
""1544__transfer"" -> ""1544_ownerOf"";
""1544_itemsRange"" -> ""1544_priceOf"";
""1544_itemsRange"" -> ""1544_sellPriceOf"";
""1544_changeItemName"" -> ""1544__checkItemId"";
}
"
0x4ced73edbb326de8f7d9c5694b00da7b75506d96.sol,Elyxr,contract Elyxr { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_40_AcceptsElyxr {
label=""AcceptsElyxr"";
""40_tokenFallback"" [label=""tokenFallback""];
""40_AcceptsElyxr"" [label=""AcceptsElyxr""];
}
"
0x5bf5d16f714281184ab32675b66f034d293008ab.sol,TokenBatchTransfer,contract TokenBatchTransfer is Ownable { using SafeERC20 for ERC20Basic; using SafeMath for uint256; ERC20Basic public ERC20Token; uint256 _totalSupply; constructor ( ERC20Basic token ) public { ERC20Token = ERC20Basic(token); },0,"subgraph cluster_442_TokenBatchTransfer {
label=""TokenBatchTransfer"";
""442_changeToken"" [label=""changeToken""];
""442_constructor"" [label=""constructor""];
""442_amountOf"" [label=""amountOf""];
""442_batchTransfer"" [label=""batchTransfer""];
""442_safeTransfer"" [label=""safeTransfer""];
""442_batchTransfer"" -> ""442_onlyOwner"";
""442_changeToken"" -> ""442_onlyOwner"";
""442_safeTransfer"" -> ""442_onlyOwner"";
}
"
0x36f0deb0af8ab453b6b4fcc8b0b7fe2f1b44e55f.sol,Ownable,"contract Ownable { address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); function Ownable() public { owner = msg.sender; }",0,"subgraph cluster_139_Ownable {
label=""Ownable"";
""139_transferOwnership"" [label=""transferOwnership""];
""139_Ownable"" [label=""Ownable""];
""139_transferOwnership"" -> ""139_onlyOwner"";
}
"
0xaf8eabf89f5664a2bc82ca415a4337821cd54d65.sol,AFIToken,"contract AFIToken is StandardToken, Crowdsale, Whitelist { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 8; uint256 constant INITIAL_SUPPLY = 125000000 * (10 ** uint256(decimals)); uint256 constant ICO_SUPPLY = 50000000 * (10 ** uint256(decimals)); uint256 constant ICO_BONUS = 12500000 * (10 ** uint256(decimals)); uint256 public minRevenueToDeliver = 0; address public assignRevenueContract; uint256 public snapshotBlockHeight; mapping(address => uint256) public snapshotBalance; uint256 constant _openingTimePeriodOne = 1531713600; uint256 constant _closingTimePeriodOne = 1534132800; uint256 constant _openingTimePeriodTwo = 1535342400; uint256 constant _closingTimePeriodTwo = 1536552000; uint256 constant _bonusDeliverTime = 1552276800; address _wallet = 0x2Dc02F830072eB33A12Da0852053eAF896185910; address _afiWallet = 0x991E2130f5bF113E2282A5F58E626467D2221599; uint256 constant _rate = 1000; uint256 constant _bonusRatePrivateSale = 250; uint256 constant _bonusRatePeriodOne = 150; uint256 constant _bonusRatePeriodTwo = 50; constructor() public Crowdsale(_openingTimePeriodOne, _closingTimePeriodOne, _openingTimePeriodTwo, _closingTimePeriodTwo, _bonusDeliverTime, _rate, _bonusRatePrivateSale, _bonusRatePeriodOne, _bonusRatePeriodTwo, _wallet, this, decimals, ICO_SUPPLY, ICO_BONUS) { totalSupply_ = INITIAL_SUPPLY; emit Transfer(0x0, _afiWallet, INITIAL_SUPPLY - ICO_SUPPLY - ICO_BONUS); emit Transfer(0x0, this, ICO_SUPPLY); balances[_afiWallet] = INITIAL_SUPPLY - ICO_SUPPLY - ICO_BONUS; whitelist[_afiWallet] = true; whitelistArray.push(_afiWallet); whitelistLength = whitelistLength.add(1); whitelistIndexMap[_afiWallet] = whitelistLength; whitelist[this] = true; whitelistArray.push(this); whitelistLength = whitelistLength.add(1); whitelistIndexMap[this] = whitelistLength; balances[this] = ICO_SUPPLY + ICO_BONUS; }",0,"subgraph cluster_1880_AFIToken {
label=""AFIToken"";
""1880_setMinRevenue"" [label=""setMinRevenue""];
""1880__preValidatePurchase"" [label=""_preValidatePurchase""];
""1880_createBalanceSnapshot"" [label=""createBalanceSnapshot""];
""1880_transferFrom"" [label=""transferFrom""];
""1880_setRevenueContract"" [label=""setRevenueContract""];
""1880_constructor"" [label=""constructor""];
""1880_transfer"" [label=""transfer""];
""1880_assignRevenue"" [label=""assignRevenue""];
""1880__preValidatePurchase"" -> ""1880_isWhitelisted"";
""1880_setMinRevenue"" -> ""1880_onlyOwner"";
""1880_constructor"" -> ""1880_constructor"";
""1880_transferFrom"" -> ""1880_isWhitelisted"";
""1880_transfer"" -> ""1880_isWhitelisted"";
""1880_setRevenueContract"" -> ""1880_onlyOwner"";
""1880_assignRevenue"" -> ""1880_onlyOwner"";
""1880_createBalanceSnapshot"" -> ""1880_onlyOwner"";
""1880_transfer"" -> ""1880_transfer"";
""1880__preValidatePurchase"" -> ""1880__preValidatePurchase"";
""1880_transferFrom"" -> ""1880_transferFrom"";
}
"
0x778e763c4a09c74b2de221b4d3c92d8c7f27a038.sol,TokenERC20,contract TokenERC20 is Ownable { using SafeMath for uint256; token public tokenReward1; token public tokenReward2; token public tokenReward3; token public tokenReward4; token public tokenReward5; token public tokenReward6; token public tokenReward7; token public tokenReward8; token public tokenReward9; token public tokenReward10; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 18; uint256 public totalSupply; struct Userinfo { bool recommendtrue; uint256 locksnumber; uint256 lockstime; uint256 grade; uint64 commission; uint64 round; uint64 roundaff; address onerecommender; address tworecommender; bool locksstatus; },0,"subgraph cluster_3428_TokenERC20 {
label=""TokenERC20"";
""3428_setuserinfo"" [label=""setuserinfo""];
""3428_setrecommendedapi"" [label=""setrecommendedapi""];
""3428_setjigoutuihuanbili"" [label=""setjigoutuihuanbili""];
""3428_displayfanyongeth"" [label=""displayfanyongeth""];
""3428_displaybd"" [label=""displaybd""];
""3428_totalSupply"" [label=""totalSupply""];
""3428_jigoudengji"" [label=""jigoudengji""];
""3428_displaybdc"" [label=""displaybdc""];
""3428_allowance"" [label=""allowance""];
""3428_displaybdcp"" [label=""displaybdcp""];
""3428_setlayer"" [label=""setlayer""];
""3428_fallback"" [label=""fallback""];
""3428_setjigouyongjig"" [label=""setjigouyongjig""];
""3428_transferFrom"" [label=""transferFrom""];
""3428_increaseApproval"" [label=""increaseApproval""];
""3428_recommend"" [label=""recommend""];
""3428_exchange"" [label=""exchange""];
""3428_setjstuihuandengji"" [label=""setjstuihuandengji""];
""3428_setjs"" [label=""setjs""];
""3428_displaymtt"" [label=""displaymtt""];
""3428_displayfanyongtoken"" [label=""displayfanyongtoken""];
""3428_jigoutuihuan"" [label=""jigoutuihuan""];
""3428_jishituihuan"" [label=""jishituihuan""];
""3428_setjgtuihuandengji"" [label=""setjgtuihuandengji""];
""3428_locks"" [label=""locks""];
""3428_transfer"" [label=""transfer""];
""3428_setdengji"" [label=""setdengji""];
""3428_setjgjiesou"" [label=""setjgjiesou""];
""3428_setjigou"" [label=""setjigou""];
""3428_displaydt"" [label=""displaydt""];
""3428_mint"" [label=""mint""];
""3428_decreaseApproval"" [label=""decreaseApproval""];
""3428_balanceOf"" [label=""balanceOf""];
""3428_setxiudao"" [label=""setxiudao""];
""3428_setjsyongjing"" [label=""setjsyongjing""];
""3428_setcoins"" [label=""setcoins""];
""3428_approve"" [label=""approve""];
""3428_getBalance"" [label=""getBalance""];
""3428_setjsjglimit"" [label=""setjsjglimit""];
""3428_displayehtamount"" [label=""displayehtamount""];
""3428_displayag"" [label=""displayag""];
""3428_TokenERC20"" [label=""TokenERC20""];
""3428_setbuyPrice"" [label=""setbuyPrice""];
""3428_setjsyongjing"" -> ""3428_onlyOwner"";
""3428_setlayer"" -> ""3428_onlyOwner"";
""3428_jishituihuan"" -> ""3428_recommendedapitrue"";
""3428_setcoins"" -> ""3428_onlyOwner"";
""3428_setrecommendedapi"" -> ""3428_onlyOwner"";
""3428_mint"" -> ""3428_onlyOwner"";
""3428_jigoudengji"" -> ""3428_recommendedapitrue"";
""3428_setjigouyongjig"" -> ""3428_onlyOwner"";
""3428_transferFrom"" -> ""3428_locks"";
""3428_setjs"" -> ""3428_onlyOwner"";
""3428_setbuyPrice"" -> ""3428_onlyOwner"";
""3428_setdengji"" -> ""3428_onlyOwner"";
""3428_setxiudao"" -> ""3428_recommendedapitrue"";
""3428_balanceOf"" -> ""3428_getBalance"";
""3428_setjgtuihuandengji"" -> ""3428_onlyOwner"";
""3428_setjstuihuandengji"" -> ""3428_onlyOwner"";
""3428_recommend"" -> ""3428_recommendedapitrue"";
""3428_setjgjiesou"" -> ""3428_onlyOwner"";
""3428_setuserinfo"" -> ""3428_recommendedapitrue"";
""3428_transfer"" -> ""3428_locks"";
""3428_setjigou"" -> ""3428_onlyOwner"";
""3428_jigoutuihuan"" -> ""3428_recommendedapitrue"";
""3428_exchange"" -> ""3428_recommendedapitrue"";
""3428_setjigoutuihuanbili"" -> ""3428_onlyOwner"";
""3428_setjsjglimit"" -> ""3428_onlyOwner"";
}
"
0xee3e4e2467c0c5aa7b7d944881d51ccb36fefcca.sol,AlgoryCrowdsale,"contract AlgoryCrowdsale is InvestmentPolicyCrowdsale { uint constant public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5; using SafeMath for uint; CrowdsaleToken public token; PricingStrategy public pricingStrategy; FinalizeAgent public finalizeAgent; address public multisigWallet; address public beneficiary; uint public presaleStartsAt; uint public startsAt; uint public endsAt; uint public tokensSold = 0; uint public weiRaised = 0; uint public whitelistWeiRaised = 0; uint public presaleWeiRaised = 0; uint public investorCount = 0; uint public loadedRefund = 0; uint public weiRefunded = 0; bool public finalized = false; bool public allowRefund = false; bool private isPreallocated = false; mapping (address => uint256) public investedAmountOf; mapping (address => uint256) public tokenAmountOf; mapping (address => uint) public earlyParticipantWhitelist; enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}",0,"subgraph cluster_2130_AlgoryCrowdsale {
label=""AlgoryCrowdsale"";
""2130_assignTokens"" [label=""assignTokens""];
""2130_setStartsAt"" [label=""setStartsAt""];
""2130_loadRefund"" [label=""loadRefund""];
""2130_setPresaleStartsAt"" [label=""setPresaleStartsAt""];
""2130_investInternal"" [label=""investInternal""];
""2130_setFinalizeAgent"" [label=""setFinalizeAgent""];
""2130_fallback"" [label=""fallback""];
""2130_getTokensLeft"" [label=""getTokensLeft""];
""2130_setEndsAt"" [label=""setEndsAt""];
""2130_isAllTokensApproved"" [label=""isAllTokensApproved""];
""2130_loadEarlyParticipantsWhitelist"" [label=""loadEarlyParticipantsWhitelist""];
""2130_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""2130_finalize"" [label=""finalize""];
""2130_refund"" [label=""refund""];
""2130_setMultisigWallet"" [label=""setMultisigWallet""];
""2130_getState"" [label=""getState""];
""2130_AlgoryCrowdsale"" [label=""AlgoryCrowdsale""];
""2130_prepareCrowdsale"" [label=""prepareCrowdsale""];
""2130_setEarlyParticipantWhitelist"" [label=""setEarlyParticipantWhitelist""];
""2130_isBreakingCap"" [label=""isBreakingCap""];
""2130_allowRefunding"" [label=""allowRefunding""];
""2130_setPricingStrategy"" [label=""setPricingStrategy""];
""2130_preallocateTokens"" [label=""preallocateTokens""];
""2130_investInternal"" -> ""2130_assignTokens"";
""2130_allowRefunding"" -> ""2130_onlyOwner"";
""2130_setPresaleStartsAt"" -> ""2130_onlyOwner"";
""2130_finalize"" -> ""2130_inState"";
""2130_prepareCrowdsale"" -> ""2130_preallocateTokens"";
""2130_isAllTokensApproved"" -> ""2130_getTokensLeft"";
""2130_setEarlyParticipantWhitelist"" -> ""2130_onlyOwner"";
""2130_isBreakingCap"" -> ""2130_getTokensLeft"";
""2130_setPricingStrategy"" -> ""2130_onlyOwner"";
""2130_loadEarlyParticipantsWhitelist"" -> ""2130_onlyOwner"";
""2130_setMultisigWallet"" -> ""2130_onlyOwner"";
""2130_AlgoryCrowdsale"" -> ""2130_setMultisigWallet"";
""2130_investInternal"" -> ""2130_isBreakingCap"";
""2130_investInternal"" -> ""2130_getState"";
""2130_prepareCrowdsale"" -> ""2130_onlyOwner"";
""2130_finalize"" -> ""2130_onlyOwner"";
""2130_refund"" -> ""2130_inState"";
""2130_setEndsAt"" -> ""2130_onlyOwner"";
""2130_loadRefund"" -> ""2130_inState"";
""2130_finalize"" -> ""2130_whenNotPaused"";
""2130_setStartsAt"" -> ""2130_getState"";
""2130_setPresaleStartsAt"" -> ""2130_inState"";
""2130_setStartsAt"" -> ""2130_onlyOwner"";
""2130_setPricingStrategy"" -> ""2130_getState"";
""2130_AlgoryCrowdsale"" -> ""2130_setPricingStrategy"";
""2130_preallocateTokens"" -> ""2130_assignTokens"";
""2130_loadEarlyParticipantsWhitelist"" -> ""2130_setEarlyParticipantWhitelist"";
""2130_allowRefunding"" -> ""2130_getState"";
""2130_getState"" -> ""2130_isCrowdsaleFull"";
""2130_investInternal"" -> ""2130_whenNotPaused"";
""2130_isCrowdsaleFull"" -> ""2130_getTokensLeft"";
""2130_setFinalizeAgent"" -> ""2130_onlyOwner"";
""2130_prepareCrowdsale"" -> ""2130_isAllTokensApproved"";
""2130_fallback"" -> ""2130_investInternal"";
}
"
0x2958ff9b325135374605b4e6987140a53394c6a6.sol,WNCT,"contract WNCT { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; uint256 public totalSupply; string public name; uint8 public decimals; string public symbol; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function WNCT() public { balances[msg.sender] = 100000000000000; totalSupply = 100000000000000; name = ; decimals =4; symbol = ; }",0,"subgraph cluster_234_WNCT {
label=""WNCT"";
""234_approve"" [label=""approve""];
""234_transferFrom"" [label=""transferFrom""];
""234_allowance"" [label=""allowance""];
""234_transfer"" [label=""transfer""];
""234_WNCT"" [label=""WNCT""];
""234_balanceOf"" [label=""balanceOf""];
}
"
0x2e7570255ac8c449217fb15405fac01f5408d114.sol,Centurions,"contract Centurions is ERC721, CryptoRomeControl { string public constant name = ; string public constant symbol = ; struct Centurion { uint256 level; uint256 experience; uint256 askingPrice; }",0,"subgraph cluster_1018_Centurions {
label=""Centurions"";
""1018_balanceOf"" [label=""balanceOf""];
""1018__setTokenURI"" [label=""_setTokenURI""];
""1018_issueCenturion"" [label=""issueCenturion""];
""1018_listCenturion"" [label=""listCenturion""];
""1018__createCenturion"" [label=""_createCenturion""];
""1018_takeOwnership"" [label=""takeOwnership""];
""1018_exists"" [label=""exists""];
""1018__transfer"" [label=""_transfer""];
""1018_addExperience"" [label=""addExperience""];
""1018_sellCenturion"" [label=""sellCenturion""];
""1018_tokensOfOwner"" [label=""tokensOfOwner""];
""1018_totalSupply"" [label=""totalSupply""];
""1018__approve"" [label=""_approve""];
""1018_purchaseCenturion"" [label=""purchaseCenturion""];
""1018_cancelCenturionSale"" [label=""cancelCenturionSale""];
""1018_tokenURI"" [label=""tokenURI""];
""1018_ownerOf"" [label=""ownerOf""];
""1018_createCenturion"" [label=""createCenturion""];
""1018__approvedFor"" [label=""_approvedFor""];
""1018_approve"" [label=""approve""];
""1018_devFee"" [label=""devFee""];
""1018_getCenturion"" [label=""getCenturion""];
""1018_updateTokenUri"" [label=""updateTokenUri""];
""1018_transfer"" [label=""transfer""];
""1018_issueCenturion"" -> ""1018_onlyOwner"";
""1018_transfer"" -> ""1018__transfer"";
""1018_purchaseCenturion"" -> ""1018_whenNotPaused"";
""1018_approve"" -> ""1018__approve"";
""1018_approve"" -> ""1018_whenNotPaused"";
""1018_updateTokenUri"" -> ""1018__setTokenURI"";
""1018_sellCenturion"" -> ""1018_whenNotPaused"";
""1018_updateTokenUri"" -> ""1018_onlyOwner"";
""1018_purchaseCenturion"" -> ""1018_devFee"";
""1018_takeOwnership"" -> ""1018__transfer"";
""1018_issueCenturion"" -> ""1018__transfer"";
""1018__createCenturion"" -> ""1018__transfer"";
""1018_approve"" -> ""1018_onlyOwnerOf"";
""1018_cancelCenturionSale"" -> ""1018_onlyOwnerOf"";
""1018_transfer"" -> ""1018_whenNotPaused"";
""1018_purchaseCenturion"" -> ""1018__transfer"";
""1018_tokensOfOwner"" -> ""1018_totalSupply"";
""1018_listCenturion"" -> ""1018_onlyOwner"";
""1018_createCenturion"" -> ""1018__createCenturion"";
""1018_addExperience"" -> ""1018_exists"";
""1018_createCenturion"" -> ""1018_whenNotPaused"";
""1018__setTokenURI"" -> ""1018_exists"";
""1018_updateTokenUri"" -> ""1018_whenNotPaused"";
""1018_listCenturion"" -> ""1018__createCenturion"";
""1018_tokenURI"" -> ""1018_exists"";
""1018_tokensOfOwner"" -> ""1018_balanceOf"";
""1018_createCenturion"" -> ""1018_onlyOwner"";
""1018_cancelCenturionSale"" -> ""1018_whenNotPaused"";
""1018_transfer"" -> ""1018_onlyOwnerOf"";
""1018_addExperience"" -> ""1018_whenNotPaused"";
""1018_issueCenturion"" -> ""1018__createCenturion"";
""1018_listCenturion"" -> ""1018_whenNotPaused"";
""1018_sellCenturion"" -> ""1018_onlyOwnerOf"";
""1018_addExperience"" -> ""1018_onlyOwner"";
""1018_takeOwnership"" -> ""1018_ownerOf"";
""1018_issueCenturion"" -> ""1018_whenNotPaused"";
}
"
0xaa8722fb1c9eec9b6c32a90dbe9aa4c9eff19f55.sol,OrganicumOrders,contract OrganicumOrders { struct order { uint256 balance; uint256 tokens; },0,"subgraph cluster_563_OrganicumOrders {
label=""OrganicumOrders"";
""563_fallback"" [label=""fallback""];
""563_vote"" [label=""vote""];
""563_OrganicumOrders"" [label=""OrganicumOrders""];
""563_changeEtherCost"" [label=""changeEtherCost""];
""563_refund"" [label=""refund""];
""563_takeInvest"" [label=""takeInvest""];
""563_orderFor"" [label=""orderFor""];
""563_getPrice"" [label=""getPrice""];
""563_changeOwner"" [label=""changeOwner""];
""563_takeInvest"" -> ""563_isOwner"";
""563_changeEtherCost"" -> ""563_isOwner"";
""563_orderFor"" -> ""563_getPrice"";
""563_fallback"" -> ""563_getPrice"";
""563_changeOwner"" -> ""563_isOwner"";
}
"
0xc6be00f7ed386015a3c751d38c126c62f231138d.sol,UniversalMobileToken,"contract UniversalMobileToken is Ownable { using SafeMath for uint; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); string public name; string public symbol; uint public decimals; uint public totalSupply; bool public mintingIsFinished; bool public transferIsPossible; modifier onlyEmitter() { require(emitters[msg.sender] == true); _; }",0,"subgraph cluster_660_UniversalMobileToken {
label=""UniversalMobileToken"";
""660_transferFrom"" [label=""transferFrom""];
""660_allowance"" [label=""allowance""];
""660_removeEmitter"" [label=""removeEmitter""];
""660_constructor"" [label=""constructor""];
""660_batchMint"" [label=""batchMint""];
""660_minted"" [label=""minted""];
""660_batchTransfer"" [label=""batchTransfer""];
""660_transfer"" [label=""transfer""];
""660_balanceOf"" [label=""balanceOf""];
""660_addEmitter"" [label=""addEmitter""];
""660_burn"" [label=""burn""];
""660_approve"" [label=""approve""];
""660_finishMinting"" [label=""finishMinting""];
""660_batchTransfer"" -> ""660_transfer"";
""660_finishMinting"" -> ""660_onlyOwner"";
""660_constructor"" -> ""660_constructor"";
""660_removeEmitter"" -> ""660_onlyOwner"";
""660_batchMint"" -> ""660_onlyEmitter"";
""660_addEmitter"" -> ""660_onlyOwner"";
""660_burn"" -> ""660_onlyEmitter"";
""660_batchMint"" -> ""660_minted"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,SafeDecimalMath,"contract SafeDecimalMath { uint8 public constant decimals = 18; uint public constant UNIT = 10 ** uint(decimals); function addIsSafe(uint x, uint y) pure internal returns (bool) { return x + y >= y; }",0,"subgraph cluster_511_SafeDecimalMath {
label=""SafeDecimalMath"";
""511_mulIsSafe"" [label=""mulIsSafe""];
""511_safeSub"" [label=""safeSub""];
""511_safeMul"" [label=""safeMul""];
""511_addIsSafe"" [label=""addIsSafe""];
""511_divIsSafe"" [label=""divIsSafe""];
""511_subIsSafe"" [label=""subIsSafe""];
""511_safeDiv"" [label=""safeDiv""];
""511_safeAdd"" [label=""safeAdd""];
""511_safeDiv_dec"" [label=""safeDiv_dec""];
""511_safeMul_dec"" [label=""safeMul_dec""];
""511_intToDec"" [label=""intToDec""];
""511_safeDiv_dec"" -> ""511_safeDiv"";
""511_safeDiv_dec"" -> ""511_safeMul"";
""511_intToDec"" -> ""511_safeMul"";
""511_safeMul_dec"" -> ""511_safeMul"";
}
"
0xbd6a3418cb51418c94cc11d2d49012a2b79e10fe.sol,WeaponsCore,contract WeaponsCore is Ownable { struct WeaponModel { uint id; uint weaponType; uint generation; uint price; },0,"subgraph cluster_600_WeaponsCore {
label=""WeaponsCore"";
""600_WeaponsCore"" [label=""WeaponsCore""];
""600_getWeaponIds"" [label=""getWeaponIds""];
""600_getWeaponModel"" [label=""getWeaponModel""];
""600_getWeaponEntity"" [label=""getWeaponEntity""];
""600__transferWeapon"" [label=""_transferWeapon""];
""600__registerWeapon"" [label=""_registerWeapon""];
""600__generateWeapon"" [label=""_generateWeapon""];
""600_WeaponsCore"" -> ""600__registerWeapon"";
}
"
0x39f89421c5bf8bb0d855c0216b00b45e3733b515.sol,BaseDINOSale,"contract BaseDINOSale { using SafeMath for uint256; address public owner; bool public paused = false; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public withdrawRate = 10000; bool private rentrancy_lock = false; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); event Pause(); event Unpause(); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); modifier onlyOwner() { require(msg.sender == owner,); _; }",0,"subgraph cluster_467_BaseDINOSale {
label=""BaseDINOSale"";
""467_ownerUnlockFund"" [label=""ownerUnlockFund""];
""467_setRate"" [label=""setRate""];
""467_terminate"" [label=""terminate""];
""467_checkFundingGoal"" [label=""checkFundingGoal""];
""467_setWithdrawRate"" [label=""setWithdrawRate""];
""467_changeEndTime"" [label=""changeEndTime""];
""467_transferOwnership"" [label=""transferOwnership""];
""467_changeStartTime"" [label=""changeStartTime""];
""467__transferOwnership"" [label=""_transferOwnership""];
""467_constructor"" [label=""constructor""];
""467_currentTime"" [label=""currentTime""];
""467_unpause"" [label=""unpause""];
""467_checkFundingCap"" [label=""checkFundingCap""];
""467_pause"" [label=""pause""];
""467_changeStartTime"" -> ""467_onlyOwner"";
""467_setWithdrawRate"" -> ""467_onlyOwner"";
""467_changeEndTime"" -> ""467_onlyOwner"";
""467_ownerUnlockFund"" -> ""467_onlyOwner"";
""467_unpause"" -> ""467_whenPaused"";
""467_transferOwnership"" -> ""467_onlyOwner"";
""467_terminate"" -> ""467_onlyOwner"";
""467_unpause"" -> ""467_onlyOwner"";
""467_pause"" -> ""467_whenNotPaused"";
""467_setRate"" -> ""467_onlyOwner"";
""467_pause"" -> ""467_onlyOwner"";
""467_transferOwnership"" -> ""467__transferOwnership"";
""467_ownerUnlockFund"" -> ""467_afterDeadline"";
}
"
0xdae049562763d6a4236af188a05f4f29603b41cc.sol,ItemToken,"contract ItemToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function ItemToken () public { owner = msg.sender; admins[owner] = true; }",0,"subgraph cluster_1272_ItemToken {
label=""ItemToken"";
""1272_isContract"" [label=""isContract""];
""1272_approve"" [label=""approve""];
""1272_isAdmin"" [label=""isAdmin""];
""1272_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1272_setItemRegistry"" [label=""setItemRegistry""];
""1272_setOwner"" [label=""setOwner""];
""1272__transfer"" [label=""_transfer""];
""1272_startingPriceOf"" [label=""startingPriceOf""];
""1272_approvedFor"" [label=""approvedFor""];
""1272_listItem"" [label=""listItem""];
""1272_balanceOf"" [label=""balanceOf""];
""1272_nextPriceOf"" [label=""nextPriceOf""];
""1272_tokensOf"" [label=""tokensOf""];
""1272_priceOf"" [label=""priceOf""];
""1272_allOf"" [label=""allOf""];
""1272_listMultipleItems"" [label=""listMultipleItems""];
""1272_withdrawAll"" [label=""withdrawAll""];
""1272_ItemToken"" [label=""ItemToken""];
""1272_symbol"" [label=""symbol""];
""1272_withdrawAmount"" [label=""withdrawAmount""];
""1272_totalSupply"" [label=""totalSupply""];
""1272_removeAdmin"" [label=""removeAdmin""];
""1272_enableERC721"" [label=""enableERC721""];
""1272_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1272_tokenExists"" [label=""tokenExists""];
""1272_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1272_implementsERC721"" [label=""implementsERC721""];
""1272_buy"" [label=""buy""];
""1272_addAdmin"" [label=""addAdmin""];
""1272_transferFrom"" [label=""transferFrom""];
""1272_ownerOf"" [label=""ownerOf""];
""1272_name"" [label=""name""];
""1272_transfer"" [label=""transfer""];
""1272_calculateNextPrice"" [label=""calculateNextPrice""];
""1272_calculateDevCut"" [label=""calculateDevCut""];
""1272_withdrawAmount"" -> ""1272_onlyOwner"";
""1272_transfer"" -> ""1272__transfer"";
""1272_transfer"" -> ""1272_ownerOf"";
""1272_buy"" -> ""1272_ownerOf"";
""1272_allOf"" -> ""1272_priceOf"";
""1272__transfer"" -> ""1272_ownerOf"";
""1272__transfer"" -> ""1272_tokenExists"";
""1272_setItemRegistry"" -> ""1272_onlyOwner"";
""1272_tokenExists"" -> ""1272_priceOf"";
""1272_allOf"" -> ""1272_nextPriceOf"";
""1272_buy"" -> ""1272_priceOf"";
""1272_listMultipleItems"" -> ""1272_listItem"";
""1272_populateFromItemRegistry"" -> ""1272_onlyOwner"";
""1272_addAdmin"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_tokenExists"";
""1272_listMultipleItems"" -> ""1272_onlyAdmins"";
""1272_buy"" -> ""1272_calculateDevCut"";
""1272_nextPriceOf"" -> ""1272_priceOf"";
""1272_nextPriceOf"" -> ""1272_calculateNextPrice"";
""1272_enableERC721"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_ownerOf"";
""1272_balanceOf"" -> ""1272_ownerOf"";
""1272_listItem"" -> ""1272_onlyAdmins"";
""1272_setOwner"" -> ""1272_onlyOwner"";
""1272_tokensOf"" -> ""1272_balanceOf"";
""1272_transferFrom"" -> ""1272__transfer"";
""1272_listItemFromRegistry"" -> ""1272_listItem"";
""1272_buy"" -> ""1272_isContract"";
""1272_listItemFromRegistry"" -> ""1272_onlyOwner"";
""1272_buy"" -> ""1272_nextPriceOf"";
""1272_transferFrom"" -> ""1272_approvedFor"";
""1272_tokensOf"" -> ""1272_ownerOf"";
""1272_allOf"" -> ""1272_ownerOf"";
""1272_withdrawAll"" -> ""1272_onlyOwner"";
""1272_populateFromItemRegistry"" -> ""1272_listItemFromRegistry"";
""1272_transfer"" -> ""1272_onlyERC721"";
""1272_removeAdmin"" -> ""1272_onlyOwner"";
""1272_approve"" -> ""1272_onlyERC721"";
""1272_buy"" -> ""1272__transfer"";
""1272_transferFrom"" -> ""1272_onlyERC721"";
""1272_allOf"" -> ""1272_startingPriceOf"";
}
"
0xc0adf1ccc703a0a3393892600883a1a91a4e38de.sol,EthereumLottery,contract EthereumLottery { uint constant INACTIVITY_TIMEOUT = 2 weeks; uint constant GAS_LIMIT = 300000; struct Lottery { uint jackpot; int decidingBlock; uint numTickets; uint numTicketsSold; uint ticketPrice; uint cutoffTimestamp; int winningTicket; address winner; uint finalizationBlock; address finalizer; string message; mapping (uint => address) tickets; int nearestKnownBlock; int nearestKnownBlockHash; },0,"subgraph cluster_1290_EthereumLottery {
label=""EthereumLottery"";
""1290_getTicketOwner"" [label=""getTicketOwner""];
""1290_initLottery"" [label=""initLottery""];
""1290_proposeOwner"" [label=""proposeOwner""];
""1290_destruct"" [label=""destruct""];
""1290_getLotteryDetailsA"" [label=""getLotteryDetailsA""];
""1290_buyTickets"" [label=""buyTickets""];
""1290_finalizeLottery"" [label=""finalizeLottery""];
""1290_getMessageLength"" [label=""getMessageLength""];
""1290_getRecentActivity"" [label=""getRecentActivity""];
""1290_needsFinalization"" [label=""needsFinalization""];
""1290_EthereumLottery"" [label=""EthereumLottery""];
""1290_getLotteryDetailsB"" [label=""getLotteryDetailsB""];
""1290_acceptOwnership"" [label=""acceptOwnership""];
""1290_getTicketDetails"" [label=""getTicketDetails""];
""1290_setAdmin"" [label=""setAdmin""];
""1290_walkTowardsBlock"" [label=""walkTowardsBlock""];
""1290_setMessage"" [label=""setMessage""];
""1290_needsInitialization"" [label=""needsInitialization""];
""1290_finalizeLottery"" -> ""1290_needsFinalization"";
""1290_setAdmin"" -> ""1290_onlyOwner"";
""1290_needsFinalization"" -> ""1290_afterInitialization"";
""1290_initLottery"" -> ""1290_needsInitialization"";
""1290_finalizeLottery"" -> ""1290_walkTowardsBlock"";
""1290_destruct"" -> ""1290_onlyOwner"";
""1290_proposeOwner"" -> ""1290_onlyOwner"";
""1290_setMessage"" -> ""1290_afterInitialization"";
""1290_initLottery"" -> ""1290_onlyAdminOrOwner"";
""1290_setMessage"" -> ""1290_getMessageLength"";
""1290_finalizeLottery"" -> ""1290_afterInitialization"";
""1290_buyTickets"" -> ""1290_afterInitialization"";
}
"
0x6b279f9ef6047a21052b5563fd249fe0fdaa7e58.sol,TokenImpl,"contract TokenImpl is MintableToken { string public name; string public symbol; uint256 public rate; uint256 public decimals = 5; uint256 private decimal_num = 100000; ERC20Basic public targetToken; uint256 public exchangedNum; event Exchanged(address _owner, uint256 _value); function TokenImpl(string _name, string _symbol, uint256 _decimals) public { name = _name; symbol = _symbol; decimals = _decimals; decimal_num = 10 ** decimals; paused = true; }",0,"subgraph cluster_1043_TokenImpl {
label=""TokenImpl"";
""1043_canExchange"" [label=""canExchange""];
""1043_TokenImpl"" [label=""TokenImpl""];
""1043_transferFrom"" [label=""transferFrom""];
""1043_canExchangeNum"" [label=""canExchangeNum""];
""1043_balanceOfTarget"" [label=""balanceOfTarget""];
""1043_exchange"" [label=""exchange""];
""1043_updateTargetToken"" [label=""updateTargetToken""];
""1043_transfer"" [label=""transfer""];
""1043_canExchangeNum"" -> ""1043_canExchange"";
""1043_transfer"" -> ""1043_transfer"";
""1043_transfer"" -> ""1043_exchange"";
""1043_transferFrom"" -> ""1043_exchange"";
""1043_exchange"" -> ""1043_canExchange"";
""1043_transferFrom"" -> ""1043_transferFrom"";
""1043_updateTargetToken"" -> ""1043_onlyOwner"";
}
"
0x65732d6e88a83a38a4b803b0181b3a03a4165373.sol,Staff,"contract Staff is Ownable, RBAC { string public constant ROLE_STAFF = ; function addStaff(address _staff) public onlyOwner { addRole(_staff, ROLE_STAFF); }",0,"subgraph cluster_640_StaffUtil {
label=""StaffUtil"";
""640_constructor"" [label=""constructor""];
}
"
0xd46ddc98c63f9705ca6689e7036dc3ce981fb335.sol,UTU,"contract UTU { string public name = ; uint8 public decimals = 18; string public symbol = ; address public owner; address public feesAddr; address trancheAdmin; uint256 public totalSupply = 50000000000000000000000000; uint public trancheLevel = 1; uint256 public circulatingSupply = 0; uint maxTranche = 4; uint loopCount = 0; uint256 feePercent = 1500; uint256 trancheOneSaleTime; bool public receiveEth = true; bool payFees = true; bool addTranches = true; bool public initialTranches = false; bool trancheOne = true; mapping (address => uint256) public balances; mapping (address => uint256) public trancheOneBalances; mapping(address => mapping (address => uint256)) allowed; mapping(uint => uint256) public trancheTokens; mapping(uint => uint256) public trancheRate; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint _value); function UTU() { owner = msg.sender; feesAddr = msg.sender; trancheAdmin = msg.sender; trancheOneSaleTime = now + 182 days; populateTrancheTokens(); populateTrancheRates(); }",0,"subgraph cluster_1226_UTU {
label=""UTU"";
""1226_updateTrancheRate"" [label=""updateTrancheRate""];
""1226_payFeesToggle"" [label=""payFeesToggle""];
""1226_allowance"" [label=""allowance""];
""1226_add"" [label=""add""];
""1226_otcPurchase"" [label=""otcPurchase""];
""1226_populateTrancheRates"" [label=""populateTrancheRates""];
""1226_changeOwner"" [label=""changeOwner""];
""1226_transferFrom"" [label=""transferFrom""];
""1226_transfer"" [label=""transfer""];
""1226_safeWithdrawal"" [label=""safeWithdrawal""];
""1226_balanceOf"" [label=""balanceOf""];
""1226_rateOfSpecificTranche"" [label=""rateOfSpecificTranche""];
""1226_balanceInTranche"" [label=""balanceInTranche""];
""1226_mul"" [label=""mul""];
""1226_updateFeeAmount"" [label=""updateFeeAmount""];
""1226_changeTrancheAdmin"" [label=""changeTrancheAdmin""];
""1226_approve"" [label=""approve""];
""1226_allocateTokens"" [label=""allocateTokens""];
""1226_sub"" [label=""sub""];
""1226_populateTrancheTokens"" [label=""populateTrancheTokens""];
""1226_closeTrancheAddition"" [label=""closeTrancheAddition""];
""1226_otcPurchaseAndEscrow"" [label=""otcPurchaseAndEscrow""];
""1226_toggleReceiveEth"" [label=""toggleReceiveEth""];
""1226_balanceInSpecificTranche"" [label=""balanceInSpecificTranche""];
""1226_UTU"" [label=""UTU""];
""1226_trancheOneSaleOpenTime"" [label=""trancheOneSaleOpenTime""];
""1226_trancheOneBalanceOf"" [label=""trancheOneBalanceOf""];
""1226_fallback"" [label=""fallback""];
""1226_addTrancheRateAndTokens"" [label=""addTrancheRateAndTokens""];
""1226_changeFeesAddress"" [label=""changeFeesAddress""];
""1226_div"" [label=""div""];
""1226_fallback"" -> ""1226_allocateTokens"";
""1226_transfer"" -> ""1226_add"";
""1226_allocateTokens"" -> ""1226_div"";
""1226_transferFrom"" -> ""1226_sub"";
""1226_allocateTokens"" -> ""1226_add"";
""1226_otcPurchaseAndEscrow"" -> ""1226_add"";
""1226_allocateTokens"" -> ""1226_sub"";
""1226_allocateTokens"" -> ""1226_mul"";
""1226_transfer"" -> ""1226_sub"";
""1226_UTU"" -> ""1226_populateTrancheRates"";
""1226_transferFrom"" -> ""1226_add"";
""1226_allocateTokens"" -> ""1226_allocateTokens"";
""1226_otcPurchase"" -> ""1226_add"";
""1226_UTU"" -> ""1226_populateTrancheTokens"";
""1226_addTrancheRateAndTokens"" -> ""1226_add"";
}
"
0x336f4fa45e98825206323c2cdd2eac9628c782e2.sol,CustomToken,"contract CustomToken is BaseToken { function CustomToken() public { totalSupply = 86000000000000000000000000; name = ; symbol = ; decimals = 18; balanceOf[0x5ebc4B61A0E0187d9a72Da21bfb8b45F519cb530] = totalSupply; Transfer(address(0), 0x5ebc4B61A0E0187d9a72Da21bfb8b45F519cb530, totalSupply); }",0,"subgraph cluster_236_CustomToken {
label=""CustomToken"";
""236_CustomToken"" [label=""CustomToken""];
}
"
0x510a4ab35fcb498f798a0da8187012d78be3bd72.sol,JCashCrydrStorage,"contract JCashCrydrStorage is SafeMath, CommonModifiers, AssetID, Ownable, Manageable, Pausable, BytecodeExecutor, CrydrStorageBase, CrydrStorageBalance, CrydrStorageAllowance, CrydrStorageBlocks, CrydrStorageERC20 { function JCashCrydrStorage(string _assetID) AssetID(_assetID) public { }",0,"subgraph cluster_2113_JCashCrydrStorage {
label=""JCashCrydrStorage"";
""2113_JCashCrydrStorage"" [label=""JCashCrydrStorage""];
""2113_JCashCrydrStorage"" -> ""2113_AssetID"";
}
"
0x31a3b3c80109d0cccc260b3710dd77c968e43ae0.sol,RBAC,"contract RBAC { using Roles for Roles.Role; mapping (string => Roles.Role) private roles; event RoleAdded(address indexed operator, string role); event RoleRemoved(address indexed operator, string role); function checkRole(address _operator, string _role) public view { roles[_role].check(_operator); }",0,"subgraph cluster_968_RBACMintableToken {
label=""RBACMintableToken"";
""968_removeMinter"" [label=""removeMinter""];
""968_addMinter"" [label=""addMinter""];
""968_addMinter"" -> ""968_addRole"";
""968_removeMinter"" -> ""968_onlyOwner"";
""968_addMinter"" -> ""968_onlyOwner"";
""968_removeMinter"" -> ""968_removeRole"";
}
"
0x022f13449b9624300a89d947e5c448b49265c0c9.sol,BGToken,"contract BGToken is StandardToken , BurnableToken { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; address public Bounties_Wallet = 0x2805C02FE839210E194Fc4a12DaB683a34Ad95EF; address public Team_Wallet = 0x6C42c4EC37d0F45E2d9C2287f399E14Ea2b3B77d; address public OEM_Wallet = 0x278cB54ae3B7851D3262A307cb6780b642A29485; address public LA_wallet = 0x1669e7910e27b1400B5567eE360de2c5Ee964859; address public tokenWallet = 0xDb3D4293981adeEC2A258c0b8046eAdb20D3ff13; uint256 public constant INITIAL_SUPPLY = 100000000 ether; uint256 tokenRate = 460; function BGToken() public { totalSupply_ = INITIAL_SUPPLY; balances[Bounties_Wallet] = INITIAL_SUPPLY.mul(5).div(100) ; balances[Team_Wallet] = INITIAL_SUPPLY.mul(8).div(100); balances[OEM_Wallet] = INITIAL_SUPPLY.mul(10).div(100) ; balances[LA_wallet] = INITIAL_SUPPLY.mul(8).div(100) ; balances[tokenWallet] = INITIAL_SUPPLY.mul(69).div(100); emit Transfer(0x0, Bounties_Wallet, balances[Bounties_Wallet]); emit Transfer(0x0, Team_Wallet, balances[Team_Wallet]); emit Transfer(0x0, OEM_Wallet, balances[OEM_Wallet]); emit Transfer(0x0, LA_wallet, balances[LA_wallet]); emit Transfer(0x0, tokenWallet, balances[tokenWallet]); endDate = _endDate; }",0,"subgraph cluster_1364_BGToken {
label=""BGToken"";
""1364_setIcoCap"" [label=""setIcoCap""];
""1364_getIcoCap"" [label=""getIcoCap""];
""1364_setTokenRate"" [label=""setTokenRate""];
""1364_buyTokens"" [label=""buyTokens""];
""1364_fallback"" [label=""fallback""];
""1364_sendTokens"" [label=""sendTokens""];
""1364__EnvoisTokens"" [label=""_EnvoisTokens""];
""1364__sendTokensManually"" [label=""_sendTokensManually""];
""1364_setBonus"" [label=""setBonus""];
""1364_getBonus"" [label=""getBonus""];
""1364_getTokenRate"" [label=""getTokenRate""];
""1364_setExtraBonus"" [label=""setExtraBonus""];
""1364_getExtraBonus"" [label=""getExtraBonus""];
""1364_BGToken"" [label=""BGToken""];
""1364_setEndDate"" [label=""setEndDate""];
""1364__sendTokensManually"" -> ""1364_sendTokens"";
""1364_setEndDate"" -> ""1364_onlyOwner"";
""1364__sendTokensManually"" -> ""1364_onlyOwner"";
""1364_setTokenRate"" -> ""1364_onlyOwner"";
""1364_buyTokens"" -> ""1364__EnvoisTokens"";
""1364_fallback"" -> ""1364_isRunning"";
""1364_setIcoCap"" -> ""1364_onlyOwner"";
""1364_setBonus"" -> ""1364_onlyOwner"";
""1364_fallback"" -> ""1364_buyTokens"";
""1364__EnvoisTokens"" -> ""1364_sendTokens"";
""1364_setExtraBonus"" -> ""1364_onlyOwner"";
}
"
0x0d07e8800857b9649a8aa02b5b4bcd8c24ec7c5d.sol,CUSE,"contract CUSE is ERC20Token { string public name = ; string public symbol = ; uint public decimals = 0; uint256 public totalSupply = 75000000; function transfer(address _to, uint256 _value) public returns (bool success) { if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) { balances[msg.sender] -= _value; balances[_to] += _value; emit Transfer(msg.sender, _to, _value); return true; }",0,"subgraph cluster_429_CUSE {
label=""CUSE"";
""429_approve"" [label=""approve""];
""429_allowance"" [label=""allowance""];
""429_transfer"" [label=""transfer""];
""429_transferFrom"" [label=""transferFrom""];
""429_balanceOf"" [label=""balanceOf""];
}
"
0x37304b0ab297f13f5520c523102797121182fb5b.sol,SportCrypt,contract SportCrypt { address private owner; mapping(address => bool) private admins; function SportCrypt() public { owner = msg.sender; },0,"subgraph cluster_2217_SportCrypt {
label=""SportCrypt"";
""2217_cancelOrder"" [label=""cancelOrder""];
""2217_tradeCore"" [label=""tradeCore""];
""2217_computeExposureDelta"" [label=""computeExposureDelta""];
""2217_getBalance"" [label=""getBalance""];
""2217_claim"" [label=""claim""];
""2217_withdraw"" [label=""withdraw""];
""2217_checkMatchBatch"" [label=""checkMatchBatch""];
""2217_adjustBalance"" [label=""adjustBalance""];
""2217_validateOrderSig"" [label=""validateOrderSig""];
""2217_validateOrderParams"" [label=""validateOrderParams""];
""2217_safeMul"" [label=""safeMul""];
""2217_priceDivide"" [label=""priceDivide""];
""2217_getMatchInfo"" [label=""getMatchInfo""];
""2217_getFilledAmount"" [label=""getFilledAmount""];
""2217_computePriceWeightedAmounts"" [label=""computePriceWeightedAmounts""];
""2217_fallback"" [label=""fallback""];
""2217_SportCrypt"" [label=""SportCrypt""];
""2217_max256"" [label=""max256""];
""2217_addAdmin"" [label=""addAdmin""];
""2217_safeSub"" [label=""safeSub""];
""2217_trade"" [label=""trade""];
""2217_safeAdd"" [label=""safeAdd""];
""2217_deposit"" [label=""deposit""];
""2217_recoverFunds"" [label=""recoverFunds""];
""2217_minu256"" [label=""minu256""];
""2217_min256"" [label=""min256""];
""2217_isAdmin"" [label=""isAdmin""];
""2217_getOwner"" [label=""getOwner""];
""2217_removeAdmin"" [label=""removeAdmin""];
""2217_parseOrder"" [label=""parseOrder""];
""2217_changeOwner"" [label=""changeOwner""];
""2217_checkOrderBatch"" [label=""checkOrderBatch""];
""2217_getPosition"" [label=""getPosition""];
""2217_computeEffectiveBalance"" [label=""computeEffectiveBalance""];
""2217_tradeCore"" -> ""2217_computeEffectiveBalance"";
""2217_trade"" -> ""2217_validateOrderSig"";
""2217_trade"" -> ""2217_parseOrder"";
""2217_trade"" -> ""2217_tradeCore"";
""2217_checkOrderBatch"" -> ""2217_computePriceWeightedAmounts"";
""2217_tradeCore"" -> ""2217_computePriceWeightedAmounts"";
""2217_deposit"" -> ""2217_safeAdd"";
""2217_addAdmin"" -> ""2217_onlyOwner"";
""2217_tradeCore"" -> ""2217_priceDivide"";
""2217_checkOrderBatch"" -> ""2217_validateOrderParams"";
""2217_cancelOrder"" -> ""2217_parseOrder"";
""2217_withdraw"" -> ""2217_minu256"";
""2217_adjustBalance"" -> ""2217_safeAdd"";
""2217_computeEffectiveBalance"" -> ""2217_priceDivide"";
""2217_trade"" -> ""2217_adjustBalance"";
""2217_claim"" -> ""2217_adjustBalance"";
""2217_adjustBalance"" -> ""2217_safeSub"";
""2217_priceDivide"" -> ""2217_safeMul"";
""2217_checkOrderBatch"" -> ""2217_parseOrder"";
""2217_tradeCore"" -> ""2217_minu256"";
""2217_changeOwner"" -> ""2217_onlyOwner"";
""2217_tradeCore"" -> ""2217_max256"";
""2217_computePriceWeightedAmounts"" -> ""2217_safeMul"";
""2217_tradeCore"" -> ""2217_min256"";
""2217_tradeCore"" -> ""2217_safeSub"";
""2217_removeAdmin"" -> ""2217_onlyOwner"";
""2217_checkOrderBatch"" -> ""2217_safeMul"";
""2217_checkOrderBatch"" -> ""2217_safeSub"";
""2217_trade"" -> ""2217_validateOrderParams"";
""2217_cancelOrder"" -> ""2217_validateOrderSig"";
""2217_claim"" -> ""2217_priceDivide"";
""2217_tradeCore"" -> ""2217_computeExposureDelta"";
""2217_checkOrderBatch"" -> ""2217_minu256"";
""2217_computeExposureDelta"" -> ""2217_max256"";
""2217_checkOrderBatch"" -> ""2217_computeEffectiveBalance"";
}
"
0xdf3a0a958f5a599aa8f3071aa6488c22416efb89.sol,ERC20,"contract ERC20 is Context, Ownable, Pausable { using SafeMath for uint256; string private _name; string private _symbol; uint8 private _decimals; uint256 private _totalSupply; uint256 private ONE_TOKEN; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); constructor () public { _name = ; _symbol = ; _decimals = 6; ONE_TOKEN = (10 ** uint256(_decimals)); _totalSupply = 1000000000 * ONE_TOKEN; _balances[_msgSender()] = _totalSupply; }",0,"subgraph cluster_804_ERC20 {
label=""ERC20"";
""804_increaseAllowance"" [label=""increaseAllowance""];
""804__transfer"" [label=""_transfer""];
""804__approve"" [label=""_approve""];
""804_constructor"" [label=""constructor""];
""804_decreaseAllowance"" [label=""decreaseAllowance""];
""804_burn"" [label=""burn""];
""804_decimals"" [label=""decimals""];
""804_totalSupply"" [label=""totalSupply""];
""804_transfer"" [label=""transfer""];
""804_transferFrom"" [label=""transferFrom""];
""804_balanceOf"" [label=""balanceOf""];
""804_symbol"" [label=""symbol""];
""804__burnFrom"" [label=""_burnFrom""];
""804_burnFrom"" [label=""burnFrom""];
""804__burn"" [label=""_burn""];
""804_name"" [label=""name""];
""804_allowance"" [label=""allowance""];
""804_approve"" [label=""approve""];
""804__burnFrom"" -> ""804_whenNotPaused"";
""804_decreaseAllowance"" -> ""804__approve"";
""804_decreaseAllowance"" -> ""804__msgSender"";
""804_constructor"" -> ""804__msgSender"";
""804_burn"" -> ""804__burn"";
""804__approve"" -> ""804_whenNotPaused"";
""804__burnFrom"" -> ""804__msgSender"";
""804__transfer"" -> ""804_whenNotPaused"";
""804_approve"" -> ""804__msgSender"";
""804__burnFrom"" -> ""804__approve"";
""804__burnFrom"" -> ""804__burn"";
""804__burn"" -> ""804_whenNotPaused"";
""804_burn"" -> ""804__msgSender"";
""804_transfer"" -> ""804__msgSender"";
""804_increaseAllowance"" -> ""804__approve"";
""804_transferFrom"" -> ""804__approve"";
""804_approve"" -> ""804__approve"";
""804_transfer"" -> ""804__transfer"";
""804_transferFrom"" -> ""804__msgSender"";
""804_transferFrom"" -> ""804__transfer"";
""804_burnFrom"" -> ""804__burnFrom"";
""804_increaseAllowance"" -> ""804__msgSender"";
}
"
0x31a5f35f32756fe35d39bafe85607d93185b23f2.sol,GNNM,"contract GNNM { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function GNNM( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_380_GNNM {
label=""GNNM"";
""380_transfer"" [label=""transfer""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_transferFrom"" [label=""transferFrom""];
""380__transfer"" [label=""_transfer""];
""380_burnFrom"" [label=""burnFrom""];
""380_GNNM"" [label=""GNNM""];
""380_burn"" [label=""burn""];
""380_transferFrom"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
}
"
0x340b84a70520f721fde96c7ad663383c31e416cb.sol,TimeLockedController,"contract TimeLockedController is HasNoEther, HasNoTokens, Claimable { using SafeMath for uint256; uint public constant blocksDelay = 24 * 60 * 60 / 15; struct MintOperation { address to; uint256 amount; address admin; uint deferBlock; }",0,"subgraph cluster_2907_TimeLockedController {
label=""TimeLockedController"";
""2907_setDelegatedFrom"" [label=""setDelegatedFrom""];
""2907_wipeBlacklistedAccount"" [label=""wipeBlacklistedAccount""];
""2907_transferChild"" [label=""transferChild""];
""2907_changeBurnBounds"" [label=""changeBurnBounds""];
""2907_setTrueVND"" [label=""setTrueVND""];
""2907_changeName"" [label=""changeName""];
""2907_requestReclaim"" [label=""requestReclaim""];
""2907_renameList"" [label=""renameList""];
""2907_requestMint"" [label=""requestMint""];
""2907_transferAdminship"" [label=""transferAdminship""];
""2907_changeStakingFees"" [label=""changeStakingFees""];
""2907_finalizeMint"" [label=""finalizeMint""];
""2907_updateList"" [label=""updateList""];
""2907_delegateToNewContract"" [label=""delegateToNewContract""];
""2907_changeStaker"" [label=""changeStaker""];
""2907_issueClaimOwnership"" [label=""issueClaimOwnership""];
""2907_setLists"" [label=""setLists""];
""2907_wipeBlacklistedAccount"" -> ""2907_onlyOwner"";
""2907_changeStakingFees"" -> ""2907_onlyOwner"";
""2907_setLists"" -> ""2907_onlyOwner"";
""2907_delegateToNewContract"" -> ""2907_onlyOwner"";
""2907_requestReclaim"" -> ""2907_onlyOwner"";
""2907_transferChild"" -> ""2907_onlyOwner"";
""2907_setTrueVND"" -> ""2907_onlyOwner"";
""2907_changeBurnBounds"" -> ""2907_onlyOwner"";
""2907_issueClaimOwnership"" -> ""2907_onlyAdminOrOwner"";
""2907_requestMint"" -> ""2907_onlyAdminOrOwner"";
""2907_setDelegatedFrom"" -> ""2907_onlyOwner"";
""2907_transferAdminship"" -> ""2907_onlyOwner"";
""2907_finalizeMint"" -> ""2907_onlyAdminOrOwner"";
""2907_changeName"" -> ""2907_onlyOwner"";
""2907_renameList"" -> ""2907_onlyAdminOrOwner"";
""2907_changeStaker"" -> ""2907_onlyOwner"";
""2907_updateList"" -> ""2907_onlyAdminOrOwner"";
}
"
0x27421fa936230e577ee4e91f983e788adb85ac85.sol,Bingo,"contract Bingo { using SafeMath for uint; MegaballInterface constant public megaballContract = MegaballInterface(address(0x3Fe2B3e8FEB33ed523cE8F786c22Cb6556f8A33F)); DiviesInterface constant private Divies = DiviesInterface(address(0xc7029Ed9EBa97A096e72607f4340c34049C7AF48)); event CardCreated(address indexed ticketOwner, uint indexed playerTicket, uint indexed stage); event Payment(address indexed customerAddress, uint indexed stage); event NumberCalled(uint indexed number, uint indexed stage, uint indexed total); event OnWithdraw(address indexed customerAddress, uint256 ethereumWithdrawn); event StageCreated(uint indexed stageNumber); modifier hasBalance() { require(bingoVault[msg.sender] > 0); _; }",0,"subgraph cluster_5257_Bingo {
label=""Bingo"";
""5257_checkO"" [label=""checkO""];
""5257_withdraw"" [label=""withdraw""];
""5257_getCardRowB"" [label=""getCardRowB""];
""5257_calculateOnePercentTicketCostSplit"" [label=""calculateOnePercentTicketCostSplit""];
""5257_getPaybackPlayerCount"" [label=""getPaybackPlayerCount""];
""5257_calculatePayoutDenomination"" [label=""calculatePayoutDenomination""];
""5257_withdrawFromMB"" [label=""withdrawFromMB""];
""5257_createCard"" [label=""createCard""];
""5257_getMegaballStatus"" [label=""getMegaballStatus""];
""5257_checkH3"" [label=""checkH3""];
""5257_payCaller"" [label=""payCaller""];
""5257_initFirstStage"" [label=""initFirstStage""];
""5257_seedMegball"" [label=""seedMegball""];
""5257_makeCard"" [label=""makeCard""];
""5257_checkG"" [label=""checkG""];
""5257_payTicket"" [label=""payTicket""];
""5257_getStageStatus"" [label=""getStageStatus""];
""5257_CreateStage"" [label=""CreateStage""];
""5257_getCardRowI"" [label=""getCardRowI""];
""5257_resetDrawBlocks"" [label=""resetDrawBlocks""];
""5257_checkH4"" [label=""checkH4""];
""5257_checkI"" [label=""checkI""];
""5257_getCardRowN"" [label=""getCardRowN""];
""5257_claimBingo"" [label=""claimBingo""];
""5257_getCardRowO"" [label=""getCardRowO""];
""5257_constructor"" [label=""constructor""];
""5257_nextPaybacks"" [label=""nextPaybacks""];
""5257_checkBingo"" [label=""checkBingo""];
""5257_getNumberCallersCount"" [label=""getNumberCallersCount""];
""5257_getEntrantsPlayerCount"" [label=""getEntrantsPlayerCount""];
""5257_isWithinBounds"" [label=""isWithinBounds""];
""5257_callNumber"" [label=""callNumber""];
""5257_getStageBlocks"" [label=""getStageBlocks""];
""5257_sort_array"" [label=""sort_array""];
""5257_randomArr"" [label=""randomArr""];
""5257_isNumberCalled"" [label=""isNumberCalled""];
""5257_checkN"" [label=""checkN""];
""5257_stageMoveDetail"" [label=""stageMoveDetail""];
""5257_callNumbers"" [label=""callNumbers""];
""5257_getMBbalance"" [label=""getMBbalance""];
""5257_getBingoBalance"" [label=""getBingoBalance""];
""5257_payProgressive"" [label=""payProgressive""];
""5257_addToPaybacks"" [label=""addToPaybacks""];
""5257_fallback"" [label=""fallback""];
""5257_checkH1"" [label=""checkH1""];
""5257_repayment"" [label=""repayment""];
""5257_checkB"" [label=""checkB""];
""5257_checkD1"" [label=""checkD1""];
""5257_getPlayerCardsThisStage"" [label=""getPlayerCardsThisStage""];
""5257_getStageDrawTime"" [label=""getStageDrawTime""];
""5257_getCardRowG"" [label=""getCardRowG""];
""5257_isCallNumberAvailable"" [label=""isCallNumberAvailable""];
""5257_checkD2"" [label=""checkD2""];
""5257_checkH2"" [label=""checkH2""];
""5257_processPaybackQueue"" [label=""processPaybackQueue""];
""5257_makeRow"" [label=""makeRow""];
""5257_checkH5"" [label=""checkH5""];
""5257_getStageDenomination"" [label=""getStageDenomination""];
""5257_random"" [label=""random""];
""5257_sendDivi"" [label=""sendDivi""];
""5257_callNumbers"" -> ""5257_callNumber"";
""5257_checkBingo"" -> ""5257_checkO"";
""5257_claimBingo"" -> ""5257_processPaybackQueue"";
""5257_repayment"" -> ""5257_addToPaybacks"";
""5257_initFirstStage"" -> ""5257_CreateStage"";
""5257_makeRow"" -> ""5257_sort_array"";
""5257_checkN"" -> ""5257_isNumberCalled"";
""5257_checkO"" -> ""5257_isNumberCalled"";
""5257_makeCard"" -> ""5257_makeRow"";
""5257_CreateStage"" -> ""5257_calculateOnePercentTicketCostSplit"";
""5257_checkBingo"" -> ""5257_checkD2"";
""5257_claimBingo"" -> ""5257_payProgressive"";
""5257_checkBingo"" -> ""5257_checkN"";
""5257_checkH5"" -> ""5257_isNumberCalled"";
""5257_checkBingo"" -> ""5257_checkG"";
""5257_checkBingo"" -> ""5257_checkD1"";
""5257_CreateStage"" -> ""5257_sendDivi"";
""5257_callNumbers"" -> ""5257_CreateStage"";
""5257_checkI"" -> ""5257_isNumberCalled"";
""5257_checkD2"" -> ""5257_isNumberCalled"";
""5257_checkG"" -> ""5257_isNumberCalled"";
""5257_randomArr"" -> ""5257_random"";
""5257_payProgressive"" -> ""5257_calculateOnePercentTicketCostSplit"";
""5257_claimBingo"" -> ""5257_payTicket"";
""5257_CreateStage"" -> ""5257_calculatePayoutDenomination"";
""5257_claimBingo"" -> ""5257_repayment"";
""5257_withdraw"" -> ""5257_hasBalance"";
""5257_checkBingo"" -> ""5257_checkH1"";
""5257_callNumbers"" -> ""5257_isNumberCalled"";
""5257_checkH2"" -> ""5257_isNumberCalled"";
""5257_checkD1"" -> ""5257_isNumberCalled"";
""5257_checkH1"" -> ""5257_isNumberCalled"";
""5257_makeRow"" -> ""5257_randomArr"";
""5257_CreateStage"" -> ""5257_processPaybackQueue"";
""5257_claimBingo"" -> ""5257_payCaller"";
""5257_claimBingo"" -> ""5257_checkBingo"";
""5257_callNumbers"" -> ""5257_getMegaballStatus"";
""5257_checkH4"" -> ""5257_isNumberCalled"";
""5257_checkBingo"" -> ""5257_checkH5"";
""5257_checkBingo"" -> ""5257_checkH2"";
""5257_checkH3"" -> ""5257_isNumberCalled"";
""5257_checkBingo"" -> ""5257_checkB"";
""5257_checkBingo"" -> ""5257_checkH3"";
""5257_checkB"" -> ""5257_isNumberCalled"";
""5257_payProgressive"" -> ""5257_calculatePayoutDenomination"";
""5257_random"" -> ""5257_isWithinBounds"";
""5257_CreateStage"" -> ""5257_seedMegball"";
""5257_CreateStage"" -> ""5257_withdrawFromMB"";
""5257_callNumber"" -> ""5257_resetDrawBlocks"";
""5257_checkBingo"" -> ""5257_checkI"";
""5257_claimBingo"" -> ""5257_CreateStage"";
""5257_callNumbers"" -> ""5257_resetDrawBlocks"";
""5257_createCard"" -> ""5257_makeCard"";
""5257_checkBingo"" -> ""5257_checkH4"";
}
"
0xbce22ddb0caeb744060b814c57b4c88bee7337a6.sol,CryptoMinerPlus,contract CryptoMinerPlus { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1180_CryptoMinerPlus {
label=""CryptoMinerPlus"";
""1180_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1180_reinvest"" [label=""reinvest""];
""1180_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1180_myDividends"" [label=""myDividends""];
""1180_buy"" [label=""buy""];
""1180_sqrt"" [label=""sqrt""];
""1180_sellPrice"" [label=""sellPrice""];
""1180_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1180_totalSupply"" [label=""totalSupply""];
""1180_buyPrice"" [label=""buyPrice""];
""1180_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1180_myTokens"" [label=""myTokens""];
""1180_purchaseTokens"" [label=""purchaseTokens""];
""1180_transfer"" [label=""transfer""];
""1180_withdraw"" [label=""withdraw""];
""1180_sell"" [label=""sell""];
""1180_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1180_exit"" [label=""exit""];
""1180_dividendsOf"" [label=""dividendsOf""];
""1180_balanceOf"" [label=""balanceOf""];
""1180_fallback"" [label=""fallback""];
""1180_calculateTokensReceived"" -> ""1180_ethereumToTokens_"";
""1180_sell"" -> ""1180_tokensToEthereum_"";
""1180_buyPrice"" -> ""1180_tokensToEthereum_"";
""1180_sell"" -> ""1180_buyPrice"";
""1180_transfer"" -> ""1180_onlyBagholders"";
""1180_purchaseTokens"" -> ""1180_buyPrice"";
""1180_transfer"" -> ""1180_tokensToEthereum_"";
""1180_exit"" -> ""1180_sell"";
""1180_reinvest"" -> ""1180_onlyStronghands"";
""1180_fallback"" -> ""1180_purchaseTokens"";
""1180_myTokens"" -> ""1180_balanceOf"";
""1180_withdraw"" -> ""1180_myDividends"";
""1180_myDividends"" -> ""1180_dividendsOf"";
""1180_reinvest"" -> ""1180_myDividends"";
""1180_calculateEthereumReceived"" -> ""1180_tokensToEthereum_"";
""1180_transfer"" -> ""1180_withdraw"";
""1180_sellPrice"" -> ""1180_tokensToEthereum_"";
""1180_exit"" -> ""1180_withdraw"";
""1180_reinvest"" -> ""1180_purchaseTokens"";
""1180_sell"" -> ""1180_onlyBagholders"";
""1180_withdraw"" -> ""1180_onlyStronghands"";
""1180_transfer"" -> ""1180_myDividends"";
""1180_ethereumToTokens_"" -> ""1180_sqrt"";
""1180_buy"" -> ""1180_purchaseTokens"";
""1180_purchaseTokens"" -> ""1180_ethereumToTokens_"";
}
"
0x7199c3fbc0832e8798d2514eeaa88f0ce597698d.sol,MultisigWalletZeppelin,"contract MultisigWalletZeppelin is Multisig, Shareable, DayLimit { struct Transaction { address to; uint value; bytes data; }",0,"subgraph cluster_867_MultisigWalletZeppelin {
label=""MultisigWalletZeppelin"";
""867_execute"" [label=""execute""];
""867_MultisigWalletZeppelin"" [label=""MultisigWalletZeppelin""];
""867_destroy"" [label=""destroy""];
""867_resetSpentToday"" [label=""resetSpentToday""];
""867_clearPending"" [label=""clearPending""];
""867_fallback"" [label=""fallback""];
""867_confirm"" [label=""confirm""];
""867_setDailyLimit"" [label=""setDailyLimit""];
""867_resetSpentToday"" -> ""867__resetSpentToday"";
""867_MultisigWalletZeppelin"" -> ""867_DayLimit"";
""867_MultisigWalletZeppelin"" -> ""867_Shareable"";
""867_clearPending"" -> ""867_clearPending"";
""867_resetSpentToday"" -> ""867_onlymanyowners"";
""867_destroy"" -> ""867_onlymanyowners"";
""867_confirm"" -> ""867_onlymanyowners"";
""867_execute"" -> ""867_confirm"";
""867_setDailyLimit"" -> ""867_onlymanyowners"";
""867_execute"" -> ""867_underLimit"";
""867_setDailyLimit"" -> ""867__setDailyLimit"";
""867_execute"" -> ""867_onlyOwner"";
}
"
0x1fcc3b98f97b1fa84ef96153cb0ec3ce766eb6a8.sol,Dice2Win,contract Dice2Win { uint constant HOUSE_EDGE_PERCENT = 1; uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0003 ether; uint constant MIN_JACKPOT_BET = 0.1 ether; uint constant JACKPOT_MODULO = 1000; uint constant JACKPOT_FEE = 0.001 ether; uint constant MIN_BET = 0.01 ether; uint constant MAX_AMOUNT = 300000 ether; uint constant MAX_MODULO = 100; uint constant MAX_MASK_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO; uint constant BET_EXPIRATION_BLOCKS = 250; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; address public owner; address private nextOwner; uint public maxProfit; address public secretSigner; uint128 public jackpotSize; uint128 public lockedInBets; struct Bet { uint amount; uint8 modulo; uint8 rollUnder; uint40 placeBlockNumber; uint40 mask; address gambler; },0,"subgraph cluster_1437_Dice2Win {
label=""Dice2Win"";
""1437_fallback"" [label=""fallback""];
""1437_sendFunds"" [label=""sendFunds""];
""1437_approveNextOwner"" [label=""approveNextOwner""];
""1437_getDiceWinAmount"" [label=""getDiceWinAmount""];
""1437_setMaxProfit"" [label=""setMaxProfit""];
""1437_settleBet"" [label=""settleBet""];
""1437_kill"" [label=""kill""];
""1437_memcpy"" [label=""memcpy""];
""1437_withdrawFunds"" [label=""withdrawFunds""];
""1437_refundBet"" [label=""refundBet""];
""1437_settleBetCommon"" [label=""settleBetCommon""];
""1437_verifyMerkleProof"" [label=""verifyMerkleProof""];
""1437_requireCorrectReceipt"" [label=""requireCorrectReceipt""];
""1437_constructor"" [label=""constructor""];
""1437_increaseJackpot"" [label=""increaseJackpot""];
""1437_setCroupier"" [label=""setCroupier""];
""1437_settleBetUncleMerkleProof"" [label=""settleBetUncleMerkleProof""];
""1437_setSecretSigner"" [label=""setSecretSigner""];
""1437_placeBet"" [label=""placeBet""];
""1437_acceptNextOwner"" [label=""acceptNextOwner""];
""1437_settleBetUncleMerkleProof"" -> ""1437_settleBetCommon"";
""1437_refundBet"" -> ""1437_getDiceWinAmount"";
""1437_setCroupier"" -> ""1437_onlyOwner"";
""1437_placeBet"" -> ""1437_getDiceWinAmount"";
""1437_settleBet"" -> ""1437_settleBetCommon"";
""1437_settleBetUncleMerkleProof"" -> ""1437_verifyMerkleProof"";
""1437_increaseJackpot"" -> ""1437_onlyOwner"";
""1437_withdrawFunds"" -> ""1437_sendFunds"";
""1437_settleBetUncleMerkleProof"" -> ""1437_onlyCroupier"";
""1437_approveNextOwner"" -> ""1437_onlyOwner"";
""1437_settleBetUncleMerkleProof"" -> ""1437_requireCorrectReceipt"";
""1437_verifyMerkleProof"" -> ""1437_memcpy"";
""1437_setSecretSigner"" -> ""1437_onlyOwner"";
""1437_withdrawFunds"" -> ""1437_onlyOwner"";
""1437_settleBetCommon"" -> ""1437_getDiceWinAmount"";
""1437_setMaxProfit"" -> ""1437_onlyOwner"";
""1437_settleBetCommon"" -> ""1437_sendFunds"";
""1437_settleBet"" -> ""1437_onlyCroupier"";
""1437_kill"" -> ""1437_onlyOwner"";
""1437_refundBet"" -> ""1437_sendFunds"";
}
"
0x0406caef8aec22de729fa3c74276c6b7e2bfc456.sol,richtestkk,"contract richtestkk is SafeMath,Pausable{ string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; uint256 public startTime; uint256[9] public founderAmounts; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Freeze(address indexed from, uint256 value); event Unfreeze(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function richtestkk( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) public { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; owner = msg.sender; startTime=now; founderAmounts = [427*10** uint256(25), 304*10** uint256(25), 217*10** uint256(25), 154*10** uint256(25), 11*10** uint256(25), 78*10** uint256(25), 56*10** uint256(25), 34*10** uint256(25), 2*10** uint256(26)]; }",0,"subgraph cluster_1222_richtestkk {
label=""richtestkk"";
""1222_approve"" [label=""approve""];
""1222_transferFrom"" [label=""transferFrom""];
""1222_richtestkk"" [label=""richtestkk""];
""1222_transfer"" [label=""transfer""];
""1222_minutestotal"" [label=""minutestotal""];
""1222_unfreeze"" [label=""unfreeze""];
""1222_freeze"" [label=""freeze""];
""1222_freeze"" -> ""1222_whenNotPaused"";
""1222_freeze"" -> ""1222_safeAdd"";
""1222_unfreeze"" -> ""1222_safeSub"";
""1222_transferFrom"" -> ""1222_safeSub"";
""1222_approve"" -> ""1222_whenNotPaused"";
""1222_minutestotal"" -> ""1222_safeAdd"";
""1222_unfreeze"" -> ""1222_safeAdd"";
""1222_transferFrom"" -> ""1222_whenNotPaused"";
""1222_transfer"" -> ""1222_whenNotPaused"";
""1222_minutestotal"" -> ""1222_onlyOwner"";
""1222_unfreeze"" -> ""1222_whenNotPaused"";
""1222_transfer"" -> ""1222_safeAdd"";
""1222_freeze"" -> ""1222_safeSub"";
""1222_transfer"" -> ""1222_safeSub"";
""1222_transferFrom"" -> ""1222_safeAdd"";
}
"
0x53d00ed6cbca0b08e4485286bec68aa48aa17cce.sol,EthPyramid_Shadow,contract EthPyramid_Shadow { uint256 constant scaleFactor = 0x10000000000000000; int constant crr_n = 1; int constant crr_d = 2; int constant price_coeff = -0x296ABF784A358468C; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; mapping(address => uint256) public tokenBalance; mapping(address => int256) public payouts; uint256 public totalSupply; int256 totalPayouts; uint256 earningsPerToken; function EthPyramid() public {},0,"subgraph cluster_1147_EthPyramid_Shadow {
label=""EthPyramid_Shadow"";
""1147_buyPrice"" [label=""buyPrice""];
""1147_reserve"" [label=""reserve""];
""1147_calculateDividendTokens"" [label=""calculateDividendTokens""];
""1147_sell"" [label=""sell""];
""1147_fixedExp"" [label=""fixedExp""];
""1147_fallback"" [label=""fallback""];
""1147_fund"" [label=""fund""];
""1147_getEtherForTokens"" [label=""getEtherForTokens""];
""1147_fixedLog"" [label=""fixedLog""];
""1147_sellPrice"" [label=""sellPrice""];
""1147_withdrawOld"" [label=""withdrawOld""];
""1147_sub"" [label=""sub""];
""1147_getTokensForEther"" [label=""getTokensForEther""];
""1147_getMeOutOfHere"" [label=""getMeOutOfHere""];
""1147_sellMyTokens"" [label=""sellMyTokens""];
""1147_div"" [label=""div""];
""1147_dividends"" [label=""dividends""];
""1147_add"" [label=""add""];
""1147_reinvestDividends"" [label=""reinvestDividends""];
""1147_balance"" [label=""balance""];
""1147_mul"" [label=""mul""];
""1147_EthPyramid"" [label=""EthPyramid""];
""1147_withdraw"" [label=""withdraw""];
""1147_balanceOf"" [label=""balanceOf""];
""1147_buy"" [label=""buy""];
""1147_sellMyTokens"" -> ""1147_balanceOf"";
""1147_getTokensForEther"" -> ""1147_fixedExp"";
""1147_getTokensForEther"" -> ""1147_reserve"";
""1147_getMeOutOfHere"" -> ""1147_withdraw"";
""1147_withdraw"" -> ""1147_dividends"";
""1147_buy"" -> ""1147_reserve"";
""1147_sell"" -> ""1147_div"";
""1147_calculateDividendTokens"" -> ""1147_sub"";
""1147_getEtherForTokens"" -> ""1147_reserve"";
""1147_withdrawOld"" -> ""1147_dividends"";
""1147_getMeOutOfHere"" -> ""1147_sellMyTokens"";
""1147_getEtherForTokens"" -> ""1147_sub"";
""1147_getEtherForTokens"" -> ""1147_fixedExp"";
""1147_fallback"" -> ""1147_fund"";
""1147_reserve"" -> ""1147_sub"";
""1147_fund"" -> ""1147_buy"";
""1147_buyPrice"" -> ""1147_getTokensForEther"";
""1147_reinvestDividends"" -> ""1147_add"";
""1147_calculateDividendTokens"" -> ""1147_reserve"";
""1147_reinvestDividends"" -> ""1147_dividends"";
""1147_getTokensForEther"" -> ""1147_fixedLog"";
""1147_getTokensForEther"" -> ""1147_sub"";
""1147_sell"" -> ""1147_add"";
""1147_reserve"" -> ""1147_balance"";
""1147_reinvestDividends"" -> ""1147_calculateDividendTokens"";
""1147_getEtherForTokens"" -> ""1147_fixedLog"";
""1147_sellMyTokens"" -> ""1147_sell"";
""1147_reinvestDividends"" -> ""1147_reserve"";
""1147_calculateDividendTokens"" -> ""1147_fixedLog"";
""1147_buy"" -> ""1147_div"";
""1147_buy"" -> ""1147_add"";
""1147_sell"" -> ""1147_getEtherForTokens"";
""1147_sellPrice"" -> ""1147_getEtherForTokens"";
""1147_buy"" -> ""1147_getTokensForEther"";
""1147_reinvestDividends"" -> ""1147_div"";
""1147_sell"" -> ""1147_sub"";
""1147_sellPrice"" -> ""1147_div"";
""1147_fallback"" -> ""1147_withdrawOld"";
""1147_calculateDividendTokens"" -> ""1147_fixedExp"";
}
"
0xee00c8718d39da102d2023c5540c9840ed840cb9.sol,BETSTOCKRIGHT,"contract BETSTOCKRIGHT is SafeMath{ string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; address[] public Shareholder; uint256 BonusTime; uint256 maxout; uint256 minout; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Freeze(address indexed from, uint256 value); event Unfreeze(address indexed from, uint256 value); function BETSTOCKRIGHT( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; owner = msg.sender; }",0,"subgraph cluster_735_BETSTOCKRIGHT {
label=""BETSTOCKRIGHT"";
""735_unfreeze"" [label=""unfreeze""];
""735_getSumAmount"" [label=""getSumAmount""];
""735_approve"" [label=""approve""];
""735_transfer"" [label=""transfer""];
""735_BETSTOCKRIGHT"" [label=""BETSTOCKRIGHT""];
""735_burn"" [label=""burn""];
""735_fallback"" [label=""fallback""];
""735_DeleteAddress"" [label=""DeleteAddress""];
""735_ShareholderAddress"" [label=""ShareholderAddress""];
""735_setTime"" [label=""setTime""];
""735_BonusETH"" [label=""BonusETH""];
""735_freeze"" [label=""freeze""];
""735_transferFrom"" [label=""transferFrom""];
""735_withdrawEther"" [label=""withdrawEther""];
""735_transfer"" -> ""735_safeSub"";
""735_transferFrom"" -> ""735_safeAdd"";
""735_freeze"" -> ""735_safeAdd"";
""735_unfreeze"" -> ""735_safeSub"";
""735_burn"" -> ""735_safeSub"";
""735_unfreeze"" -> ""735_safeAdd"";
""735_transfer"" -> ""735_safeAdd"";
""735_transferFrom"" -> ""735_safeSub"";
""735_freeze"" -> ""735_safeSub"";
}
"
0x723c7bca7ed11ab6a18b84c1ff5b979fec00f54e.sol,PlayCoinKey,"contract PlayCoinKey is modularKey { using SafeMath for *; using NameFilter for string; using PCKKeysCalcLong for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x14229878e85e57FF4109dc27bb2EfB5EA8067E6E); string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 2 minutes; uint256 private rndGap_ = 15 minutes; uint256 constant private rndInit_ = 24 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 24 hours; uint256 constant private rndMin_ = 10 minutes; uint256 public reduceMul_ = 3; uint256 public reduceDiv_ = 2; uint256 public rndReduceThreshold_ = 10e18; bool public closed_ = false; address private admin = msg.sender; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) private blacklist_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => PCKdatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => PCKdatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => PCKdatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => PCKdatasets.TeamFee) public fees_; mapping (uint256 => PCKdatasets.PotSplit) public potSplit_; constructor() public { blacklist_[0xB04B473418b6f09e5A1f809Ae2d01f14211e03fF] = 1; fees_[0] = PCKdatasets.TeamFee(30,6); fees_[1] = PCKdatasets.TeamFee(43,0); fees_[2] = PCKdatasets.TeamFee(56,10); fees_[3] = PCKdatasets.TeamFee(43,8); potSplit_[0] = PCKdatasets.PotSplit(15,10); potSplit_[1] = PCKdatasets.PotSplit(25,0); potSplit_[2] = PCKdatasets.PotSplit(20,20); potSplit_[3] = PCKdatasets.PotSplit(30,10); }",0,"subgraph cluster_4655_PlayCoinKey {
label=""PlayCoinKey"";
""4655_reLoadXname"" [label=""reLoadXname""];
""4655_buyCore"" [label=""buyCore""];
""4655_reLoadXid"" [label=""reLoadXid""];
""4655_getRoundStatus"" [label=""getRoundStatus""];
""4655_buyXaddr"" [label=""buyXaddr""];
""4655_setThreshold"" [label=""setThreshold""];
""4655_getTimeLeft"" [label=""getTimeLeft""];
""4655_getPlayerVaults"" [label=""getPlayerVaults""];
""4655_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4655_getReduce"" [label=""getReduce""];
""4655_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4655_fallback"" [label=""fallback""];
""4655_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4655_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4655_constructor"" [label=""constructor""];
""4655_managePlayer"" [label=""managePlayer""];
""4655_activate"" [label=""activate""];
""4655_iWantXKeys"" [label=""iWantXKeys""];
""4655_addBlacklist"" [label=""addBlacklist""];
""4655_buyXid"" [label=""buyXid""];
""4655_withdraw"" [label=""withdraw""];
""4655_reLoadCore"" [label=""reLoadCore""];
""4655_reLoadXaddr"" [label=""reLoadXaddr""];
""4655_verifyTeam"" [label=""verifyTeam""];
""4655_updateGenVault"" [label=""updateGenVault""];
""4655_nextRound"" [label=""nextRound""];
""4655_updateMasks"" [label=""updateMasks""];
""4655_endRound"" [label=""endRound""];
""4655_kill"" [label=""kill""];
""4655_potSwap"" [label=""potSwap""];
""4655_distributeInternal"" [label=""distributeInternal""];
""4655_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4655_buyXname"" [label=""buyXname""];
""4655_endTx"" [label=""endTx""];
""4655_getBlacklist"" [label=""getBlacklist""];
""4655_registerNameXname"" [label=""registerNameXname""];
""4655_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4655_distributeExternal"" [label=""distributeExternal""];
""4655_airdrop"" [label=""airdrop""];
""4655_core"" [label=""core""];
""4655_setEnforce"" [label=""setEnforce""];
""4655_determinePID"" [label=""determinePID""];
""4655_updateTimer"" [label=""updateTimer""];
""4655_withdrawEarnings"" [label=""withdrawEarnings""];
""4655_registerNameXID"" [label=""registerNameXID""];
""4655_calcKeysReceived"" [label=""calcKeysReceived""];
""4655_registerNameXaddr"" [label=""registerNameXaddr""];
""4655_getBuyPrice"" [label=""getBuyPrice""];
""4655_buyXname"" -> ""4655_isWithinLimits"";
""4655_registerNameXID"" -> ""4655_isHuman"";
""4655_reLoadXid"" -> ""4655_isRoundActivated"";
""4655_setEnforce"" -> ""4655_nextRound"";
""4655_reLoadXname"" -> ""4655_reLoadCore"";
""4655_reLoadXid"" -> ""4655_isHuman"";
""4655_buyCore"" -> ""4655_core"";
""4655_buyXname"" -> ""4655_isHuman"";
""4655_reLoadXname"" -> ""4655_isWithinLimits"";
""4655_getBlacklist"" -> ""4655_onlyAdmins"";
""4655_reLoadXname"" -> ""4655_isRoundActivated"";
""4655_reLoadCore"" -> ""4655_withdrawEarnings"";
""4655_buyXid"" -> ""4655_determinePID"";
""4655_buyXid"" -> ""4655_buyCore"";
""4655_reLoadXid"" -> ""4655_isWithinLimits"";
""4655_core"" -> ""4655_updateTimer"";
""4655_buyXid"" -> ""4655_verifyTeam"";
""4655_buyXname"" -> ""4655_isActivated"";
""4655_reLoadXaddr"" -> ""4655_isHuman"";
""4655_withdraw"" -> ""4655_withdrawEarnings"";
""4655_withdraw"" -> ""4655_isActivated"";
""4655_getReduce"" -> ""4655_calcKeysReceived"";
""4655_buyXname"" -> ""4655_determinePID"";
""4655_withdrawEarnings"" -> ""4655_updateGenVault"";
""4655_getPlayerVaults"" -> ""4655_getPlayerVaultsHelper"";
""4655_reLoadXname"" -> ""4655_isActivated"";
""4655_buyXid"" -> ""4655_isWithinLimits"";
""4655_core"" -> ""4655_distributeInternal"";
""4655_reLoadXname"" -> ""4655_verifyTeam"";
""4655_buyXname"" -> ""4655_buyCore"";
""4655_buyXname"" -> ""4655_isRoundActivated"";
""4655_reLoadXaddr"" -> ""4655_isActivated"";
""4655_reLoadXid"" -> ""4655_isActivated"";
""4655_withdraw"" -> ""4655_endRound"";
""4655_fallback"" -> ""4655_isWithinLimits"";
""4655_buyCore"" -> ""4655_nextRound"";
""4655_kill"" -> ""4655_onlyAdmins"";
""4655_buyXaddr"" -> ""4655_determinePID"";
""4655_reLoadXname"" -> ""4655_isHuman"";
""4655_buyXid"" -> ""4655_isHuman"";
""4655_withdraw"" -> ""4655_isHuman"";
""4655_buyXid"" -> ""4655_isActivated"";
""4655_buyCore"" -> ""4655_notBlacklist"";
""4655_registerNameXaddr"" -> ""4655_isHuman"";
""4655_buyXaddr"" -> ""4655_buyCore"";
""4655_reLoadCore"" -> ""4655_nextRound"";
""4655_buyXaddr"" -> ""4655_verifyTeam"";
""4655_setEnforce"" -> ""4655_onlyAdmins"";
""4655_reLoadXaddr"" -> ""4655_verifyTeam"";
""4655_reLoadCore"" -> ""4655_endRound"";
""4655_buyXaddr"" -> ""4655_isRoundActivated"";
""4655_getRoundStatus"" -> ""4655_isActivated"";
""4655_reLoadCore"" -> ""4655_core"";
""4655_managePlayer"" -> ""4655_updateGenVault"";
""4655_fallback"" -> ""4655_isHuman"";
""4655_getPlayerInfoByAddress"" -> ""4655_calcUnMaskedEarnings"";
""4655_core"" -> ""4655_airdrop"";
""4655_reLoadXid"" -> ""4655_reLoadCore"";
""4655_reLoadXid"" -> ""4655_verifyTeam"";
""4655_core"" -> ""4655_endTx"";
""4655_buyXaddr"" -> ""4655_isWithinLimits"";
""4655_reLoadXaddr"" -> ""4655_isWithinLimits"";
""4655_registerNameXname"" -> ""4655_isHuman"";
""4655_distributeInternal"" -> ""4655_updateMasks"";
""4655_buyCore"" -> ""4655_endRound"";
""4655_buyXaddr"" -> ""4655_isActivated"";
""4655_core"" -> ""4655_managePlayer"";
""4655_buyXaddr"" -> ""4655_isHuman"";
""4655_fallback"" -> ""4655_isActivated"";
""4655_distributeExternal"" -> ""4655_potSwap"";
""4655_reLoadXaddr"" -> ""4655_isRoundActivated"";
""4655_fallback"" -> ""4655_isRoundActivated"";
""4655_addBlacklist"" -> ""4655_onlyAdmins"";
""4655_buyXid"" -> ""4655_isRoundActivated"";
""4655_buyXname"" -> ""4655_verifyTeam"";
""4655_fallback"" -> ""4655_buyCore"";
""4655_fallback"" -> ""4655_determinePID"";
""4655_getPlayerVaults"" -> ""4655_calcUnMaskedEarnings"";
""4655_reLoadXaddr"" -> ""4655_reLoadCore"";
""4655_updateGenVault"" -> ""4655_calcUnMaskedEarnings"";
""4655_core"" -> ""4655_distributeExternal"";
""4655_setThreshold"" -> ""4655_onlyAdmins"";
}
"
0x32e78bdc108565c3f3811a8dc00da797b6c96dfe.sol,AddressWarsBeta,"contract AddressWarsBeta { address public dev; uint256 constant devTax = 2; uint256 constant enlistingFee = 0; uint256 constant wageringFee = 0; uint256 constant CLAIM_LIMIT = 10; uint256 constant MAX_UNIQUE_CARDS_PER_ADDRESS = 8; uint256 private _seed; enum TYPE { NORMAL, FIRE, WATER, NATURE }",0,"subgraph cluster_4886_AddressWarsBeta {
label=""AddressWarsBeta"";
""4886_wagerCardForAmount"" [label=""wagerCardForAmount""];
""4886_generateCardsFromClaimForOpponent"" [label=""generateCardsFromClaimForOpponent""];
""4886_getAllCardsAddress"" [label=""getAllCardsAddress""];
""4886_withdrawAll"" [label=""withdrawAll""];
""4886_ownerHasCard"" [label=""ownerHasCard""];
""4886_getAllCardsAttack"" [label=""getAllCardsAttack""];
""4886_getAllCardsType"" [label=""getAllCardsType""];
""4886_cancelWagerOfCard"" [label=""cancelWagerOfCard""];
""4886_cardAddressExists"" [label=""cardAddressExists""];
""4886_tmpShuffleSeed"" [label=""tmpShuffleSeed""];
""4886_transferCardTo"" [label=""transferCardTo""];
""4886_tmpQuerySeed"" [label=""tmpQuerySeed""];
""4886_ownerCountOfCard"" [label=""ownerCountOfCard""];
""4886_getAllCardsModifierSecondaryVal"" [label=""getAllCardsModifierSecondaryVal""];
""4886_getAllOwnersClaimPriceOfCard"" [label=""getAllOwnersClaimPriceOfCard""];
""4886_ownerCanClaimCard"" [label=""ownerCanClaimCard""];
""4886_getCard"" [label=""getCard""];
""4886_calculateAdjustedFiguresForBattle"" [label=""calculateAdjustedFiguresForBattle""];
""4886_getAllCardAddressesOfOwner"" [label=""getAllCardAddressesOfOwner""];
""4886_getBalanceOfSender"" [label=""getBalanceOfSender""];
""4886_getAllCardsModifierPrimaryVal"" [label=""getAllCardsModifierPrimaryVal""];
""4886_getTotalUniqueCards"" [label=""getTotalUniqueCards""];
""4886_getAllCardsModifier"" [label=""getAllCardsModifier""];
""4886_getAllCardsClaimContender"" [label=""getAllCardsClaimContender""];
""4886_shuffleSeed"" [label=""shuffleSeed""];
""4886_getAllCardAddressesPriceOfOwner"" [label=""getAllCardAddressesPriceOfOwner""];
""4886_transferCard"" [label=""transferCard""];
""4886_getCardIndexOfOwner"" [label=""getCardIndexOfOwner""];
""4886_getAllOwnersOfCard"" [label=""getAllOwnersOfCard""];
""4886_getAllCardAddressesCountOfOwner"" [label=""getAllCardAddressesCountOfOwner""];
""4886_cumulativeIndexOf"" [label=""cumulativeIndexOf""];
""4886_AddressWarsBeta"" [label=""AddressWarsBeta""];
""4886_getCheapestCardWager"" [label=""getCheapestCardWager""];
""4886_getAllCardsLowestPrice"" [label=""getAllCardsLowestPrice""];
""4886_getAllCardsDefence"" [label=""getAllCardsDefence""];
""4886_getAllCardsForClaim"" [label=""getAllCardsForClaim""];
""4886_indexOfCardAddress"" [label=""indexOfCardAddress""];
""4886_getAllCardsClaimed"" [label=""getAllCardsClaimed""];
""4886_enlist"" [label=""enlist""];
""4886_attemptToClaimCard"" [label=""attemptToClaimCard""];
""4886_withdrawAmount"" [label=""withdrawAmount""];
""4886_getOwnerOfCardsCheapestWager"" [label=""getOwnerOfCardsCheapestWager""];
""4886_updateCardStatistics"" [label=""updateCardStatistics""];
""4886_ownerHasCardSimple"" [label=""ownerHasCardSimple""];
""4886_querySeed"" [label=""querySeed""];
""4886_getCardIndexOfOwner"" -> ""4886_ownerHasCardSimple"";
""4886_getAllOwnersClaimPriceOfCard"" -> ""4886_cardAddressExists"";
""4886_indexOfCardAddress"" -> ""4886_cardAddressExists"";
""4886_transferCard"" -> ""4886_cardAddressExists"";
""4886_AddressWarsBeta"" -> ""4886_shuffleSeed"";
""4886_getCheapestCardWager"" -> ""4886_cardAddressExists"";
""4886_cancelWagerOfCard"" -> ""4886_getOwnerOfCardsCheapestWager"";
""4886_shuffleSeed"" -> ""4886_tmpShuffleSeed"";
""4886_querySeed"" -> ""4886_tmpQuerySeed"";
""4886_generateCardsFromClaimForOpponent"" -> ""4886_ownerHasCardSimple"";
""4886_transferCard"" -> ""4886_ownerHasCardSimple"";
""4886_updateCardStatistics"" -> ""4886_getCheapestCardWager"";
""4886_getAllCardAddressesPriceOfOwner"" -> ""4886_cardAddressExists"";
""4886_ownerCanClaimCard"" -> ""4886_ownerHasCardSimple"";
""4886_attemptToClaimCard"" -> ""4886_generateCardsFromClaimForOpponent"";
""4886_ownerHasCard"" -> ""4886_ownerCountOfCard"";
""4886_enlist"" -> ""4886_tmpQuerySeed"";
""4886_generateCardsFromClaimForOpponent"" -> ""4886_cardAddressExists"";
""4886_getAllCardAddressesCountOfOwner"" -> ""4886_cardAddressExists"";
""4886_attemptToClaimCard"" -> ""4886_transferCard"";
""4886_cancelWagerOfCard"" -> ""4886_updateCardStatistics"";
""4886_ownerCanClaimCard"" -> ""4886_cardAddressExists"";
""4886_wagerCardForAmount"" -> ""4886_updateCardStatistics"";
""4886_attemptToClaimCard"" -> ""4886_ownerCanClaimCard"";
""4886_getAllOwnersOfCard"" -> ""4886_cardAddressExists"";
""4886_getAllCardAddressesPriceOfOwner"" -> ""4886_getOwnerOfCardsCheapestWager"";
""4886_generateCardsFromClaimForOpponent"" -> ""4886_tmpQuerySeed"";
""4886_wagerCardForAmount"" -> ""4886_cardAddressExists"";
""4886_cancelWagerOfCard"" -> ""4886_cardAddressExists"";
""4886_enlist"" -> ""4886_cardAddressExists"";
""4886_attemptToClaimCard"" -> ""4886_updateCardStatistics"";
""4886_transferCardTo"" -> ""4886_transferCard"";
""4886_getCard"" -> ""4886_cardAddressExists"";
""4886_transferCard"" -> ""4886_getCardIndexOfOwner"";
""4886_getAllCardAddressesOfOwner"" -> ""4886_cardAddressExists"";
""4886_tmpQuerySeed"" -> ""4886_tmpShuffleSeed"";
""4886_getOwnerOfCardsCheapestWager"" -> ""4886_ownerHasCard"";
""4886_enlist"" -> ""4886_cumulativeIndexOf"";
""4886_attemptToClaimCard"" -> ""4886_calculateAdjustedFiguresForBattle"";
""4886_generateCardsFromClaimForOpponent"" -> ""4886_tmpShuffleSeed"";
""4886_ownerHasCard"" -> ""4886_cardAddressExists"";
""4886_ownerCanClaimCard"" -> ""4886_getCheapestCardWager"";
""4886_ownerCountOfCard"" -> ""4886_cardAddressExists"";
""4886_ownerHasCardSimple"" -> ""4886_ownerHasCard"";
""4886_enlist"" -> ""4886_tmpShuffleSeed"";
""4886_getCardIndexOfOwner"" -> ""4886_cardAddressExists"";
""4886_transferCard"" -> ""4886_getOwnerOfCardsCheapestWager"";
""4886_getAllCardAddressesCountOfOwner"" -> ""4886_ownerCountOfCard"";
""4886_wagerCardForAmount"" -> ""4886_getOwnerOfCardsCheapestWager"";
}
"
0x504d00c4ad9df0783ef745a19130266667ffa888.sol,LB,"contract LB is modularShort { using SafeMath for *; using NameFilter for string; using LBKeysCalcLong for uint256; address community_addr = 0x3661647405Af4cf29a4843722dC103e5D81C7949; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x392063fCb96E78Eb4b51d8faee3F5e1792959F67); string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 private rndGap_ = 0; uint256 constant private rndInit_ = 30 minutes; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 24 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => LBdatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => LBdatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => LBdatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => LBdatasets.TeamFee) public fees_; mapping (uint256 => LBdatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = LBdatasets.TeamFee(30,0); fees_[1] = LBdatasets.TeamFee(43,0); fees_[2] = LBdatasets.TeamFee(56,0); fees_[3] = LBdatasets.TeamFee(43,8); potSplit_[0] = LBdatasets.PotSplit(15,0); potSplit_[1] = LBdatasets.PotSplit(20,0); potSplit_[2] = LBdatasets.PotSplit(25,0); potSplit_[3] = LBdatasets.PotSplit(30,0); }",0,"subgraph cluster_4037_LB {
label=""LB"";
""4037_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4037_stop"" [label=""stop""];
""4037_reLoadCore"" [label=""reLoadCore""];
""4037_registerNameXname"" [label=""registerNameXname""];
""4037_buyXaddr"" [label=""buyXaddr""];
""4037_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4037_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4037_registerNameXID"" [label=""registerNameXID""];
""4037_withdraw"" [label=""withdraw""];
""4037_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4037_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4037_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4037_reLoadXname"" [label=""reLoadXname""];
""4037_updateGenVault"" [label=""updateGenVault""];
""4037_iWantXKeys"" [label=""iWantXKeys""];
""4037_getBuyPrice"" [label=""getBuyPrice""];
""4037_calcKeysReceived"" [label=""calcKeysReceived""];
""4037_updateTimer"" [label=""updateTimer""];
""4037_core"" [label=""core""];
""4037_constructor"" [label=""constructor""];
""4037_determinePID"" [label=""determinePID""];
""4037_distributeExternal"" [label=""distributeExternal""];
""4037_updateMasks"" [label=""updateMasks""];
""4037_getPlayerVaults"" [label=""getPlayerVaults""];
""4037_registerNameXaddr"" [label=""registerNameXaddr""];
""4037_reLoadXaddr"" [label=""reLoadXaddr""];
""4037_getTimeLeft"" [label=""getTimeLeft""];
""4037_endRound"" [label=""endRound""];
""4037_managePlayer"" [label=""managePlayer""];
""4037_verifyTeam"" [label=""verifyTeam""];
""4037_reLoadXid"" [label=""reLoadXid""];
""4037_fallback"" [label=""fallback""];
""4037_airdrop"" [label=""airdrop""];
""4037_buyXname"" [label=""buyXname""];
""4037_start"" [label=""start""];
""4037_endTx"" [label=""endTx""];
""4037_distributeInternal"" [label=""distributeInternal""];
""4037_withdrawEarnings"" [label=""withdrawEarnings""];
""4037_activate"" [label=""activate""];
""4037_buyCore"" [label=""buyCore""];
""4037_buyXid"" [label=""buyXid""];
""4037_distributeInternal"" -> ""4037_updateMasks"";
""4037_reLoadXaddr"" -> ""4037_isWithinLimits"";
""4037_reLoadXaddr"" -> ""4037_verifyTeam"";
""4037_buyXname"" -> ""4037_isWithinLimits"";
""4037_managePlayer"" -> ""4037_updateGenVault"";
""4037_reLoadXid"" -> ""4037_verifyTeam"";
""4037_core"" -> ""4037_distributeInternal"";
""4037_buyXaddr"" -> ""4037_buyCore"";
""4037_buyXid"" -> ""4037_determinePID"";
""4037_buyXid"" -> ""4037_isHuman"";
""4037_buyCore"" -> ""4037_endRound"";
""4037_registerNameXID"" -> ""4037_isHuman"";
""4037_reLoadCore"" -> ""4037_withdrawEarnings"";
""4037_buyXaddr"" -> ""4037_isHuman"";
""4037_reLoadXaddr"" -> ""4037_reLoadCore"";
""4037_reLoadXid"" -> ""4037_isActivated"";
""4037_withdraw"" -> ""4037_endRound"";
""4037_buyXid"" -> ""4037_buyCore"";
""4037_registerNameXname"" -> ""4037_isHuman"";
""4037_fallback"" -> ""4037_isHuman"";
""4037_buyXname"" -> ""4037_isHuman"";
""4037_buyCore"" -> ""4037_core"";
""4037_core"" -> ""4037_managePlayer"";
""4037_withdrawEarnings"" -> ""4037_updateGenVault"";
""4037_buyXid"" -> ""4037_isWithinLimits"";
""4037_reLoadXname"" -> ""4037_reLoadCore"";
""4037_core"" -> ""4037_endTx"";
""4037_fallback"" -> ""4037_isWithinLimits"";
""4037_core"" -> ""4037_updateTimer"";
""4037_reLoadXaddr"" -> ""4037_isActivated"";
""4037_fallback"" -> ""4037_isActivated"";
""4037_updateGenVault"" -> ""4037_calcUnMaskedEarnings"";
""4037_getPlayerVaults"" -> ""4037_calcUnMaskedEarnings"";
""4037_fallback"" -> ""4037_buyCore"";
""4037_fallback"" -> ""4037_determinePID"";
""4037_core"" -> ""4037_distributeExternal"";
""4037_withdraw"" -> ""4037_withdrawEarnings"";
""4037_buyXname"" -> ""4037_isActivated"";
""4037_reLoadXname"" -> ""4037_isActivated"";
""4037_withdraw"" -> ""4037_isActivated"";
""4037_getPlayerInfoByAddress"" -> ""4037_calcUnMaskedEarnings"";
""4037_buyXaddr"" -> ""4037_isWithinLimits"";
""4037_reLoadXname"" -> ""4037_verifyTeam"";
""4037_reLoadXname"" -> ""4037_isHuman"";
""4037_reLoadXid"" -> ""4037_isHuman"";
""4037_registerNameXaddr"" -> ""4037_isHuman"";
""4037_buyXname"" -> ""4037_buyCore"";
""4037_buyXaddr"" -> ""4037_determinePID"";
""4037_buyXid"" -> ""4037_isActivated"";
""4037_buyXaddr"" -> ""4037_isActivated"";
""4037_reLoadCore"" -> ""4037_core"";
""4037_reLoadXname"" -> ""4037_isWithinLimits"";
""4037_withdraw"" -> ""4037_isHuman"";
""4037_buyXaddr"" -> ""4037_verifyTeam"";
""4037_buyXname"" -> ""4037_verifyTeam"";
""4037_reLoadXaddr"" -> ""4037_isHuman"";
""4037_reLoadXid"" -> ""4037_isWithinLimits"";
""4037_reLoadXid"" -> ""4037_reLoadCore"";
""4037_core"" -> ""4037_airdrop"";
""4037_buyXname"" -> ""4037_determinePID"";
""4037_reLoadCore"" -> ""4037_endRound"";
""4037_buyXid"" -> ""4037_verifyTeam"";
""4037_getPlayerVaults"" -> ""4037_getPlayerVaultsHelper"";
}
"
0xd46883ddff92cc0474255f2f8134c63f8209171d.sol,Foundation,contract Foundation is OwnableUpdated { mapping(address => bool) public factories; mapping(address => address) public ownersToContracts; mapping(address => address) public contractsToOwners; address[] private contractsIndex; mapping(address => address) public membersToContracts; mapping(address => address[]) public contractsToKnownMembersIndexes; event FactoryAdded(address _factory); event FactoryRemoved(address _factory); function addFactory(address _factory) external onlyOwner { factories[_factory] = true; emit FactoryAdded(_factory); },0,"subgraph cluster_457_Foundation {
label=""Foundation"";
""457_transferOwnershipInFoundation"" [label=""transferOwnershipInFoundation""];
""457_getContractsIndex"" [label=""getContractsIndex""];
""457_addMember"" [label=""addMember""];
""457_removeFactory"" [label=""removeFactory""];
""457_addFactory"" [label=""addFactory""];
""457_removeMember"" [label=""removeMember""];
""457_setInitialOwnerInFoundation"" [label=""setInitialOwnerInFoundation""];
""457_fallback"" [label=""fallback""];
""457_renounceOwnershipInFoundation"" [label=""renounceOwnershipInFoundation""];
""457_setInitialOwnerInFoundation"" -> ""457_onlyFactory"";
""457_removeFactory"" -> ""457_onlyOwner"";
""457_getContractsIndex"" -> ""457_onlyOwner"";
""457_addFactory"" -> ""457_onlyOwner"";
}
"
0xdd1d5ce9f8e26a3f768b1c1e5c68db10a05d5fc0.sol,WeBetCrypto,"contract WeBetCrypto { string public name = ; string public symbol = ; address public selfAddress; address public admin; address[] private users; uint8 public decimals = 7; uint256 public relativeDateSave; uint256 public totalFunds; uint256 public totalSupply = 300000000000000; uint256 public pricePerEther; uint256 private amountInCirculation; uint256 private currentProfits; uint256 private currentIteration; uint256 private actualProfitSplit; bool public DAppReady; bool public isFrozen; bool public splitInService = true; bool private hasICORun; bool private running; bool[4] private devApprovals; mapping(address => uint256) balances; mapping(address => uint256) monthlyLimit; mapping(address => bool) isAdded; mapping(address => bool) freezeUser; mapping (address => mapping (address => uint256)) allowed; mapping (address => mapping (address => uint256)) cooldown; event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event CurrentTLSNProof(address indexed _from, string _proof); modifier isAdmin() { require(msg.sender == admin); _; }",0,"subgraph cluster_1864_WeBetCrypto {
label=""WeBetCrypto"";
""1864_emergencySplitToggle"" [label=""emergencySplitToggle""];
""1864_name"" [label=""name""];
""1864_setPriceOfEther"" [label=""setPriceOfEther""];
""1864_claimTokens"" [label=""claimTokens""];
""1864_checkSplitEnd"" [label=""checkSplitEnd""];
""1864_approve"" [label=""approve""];
""1864_fallback"" [label=""fallback""];
""1864_symbol"" [label=""symbol""];
""1864_loginUser"" [label=""loginUser""];
""1864_assetThaw"" [label=""assetThaw""];
""1864_addUser"" [label=""addUser""];
""1864_WeBetCrypto"" [label=""WeBetCrypto""];
""1864_ICOSplit"" [label=""ICOSplit""];
""1864_transferToContract"" [label=""transferToContract""];
""1864_buyTokensForSelf"" [label=""buyTokensForSelf""];
""1864_transferFrom"" [label=""transferFrom""];
""1864_getPricePerToken"" [label=""getPricePerToken""];
""1864_assureDAppIsReady"" [label=""assureDAppIsReady""];
""1864_emergencyThaw"" [label=""emergencyThaw""];
""1864_emergencyFreeze"" [label=""emergencyFreeze""];
""1864_isDAppReady"" [label=""isDAppReady""];
""1864_calculateTokenAmount"" [label=""calculateTokenAmount""];
""1864_totalSupply"" [label=""totalSupply""];
""1864_alterBankBalance"" [label=""alterBankBalance""];
""1864_buyTokensForAddress"" [label=""buyTokensForAddress""];
""1864_tokenFallback"" [label=""tokenFallback""];
""1864_isContract"" [label=""isContract""];
""1864_allowance"" [label=""allowance""];
""1864_transferToSelf"" [label=""transferToSelf""];
""1864_splitProfits"" [label=""splitProfits""];
""1864_assetFreeze"" [label=""assetFreeze""];
""1864_transfer"" [label=""transfer""];
""1864_safeSub"" [label=""safeSub""];
""1864_decimals"" [label=""decimals""];
""1864_checkMonthlyLimit"" [label=""checkMonthlyLimit""];
""1864_transferToAddress"" [label=""transferToAddress""];
""1864_balanceOf"" [label=""balanceOf""];
""1864_logoutUser"" [label=""logoutUser""];
""1864_checkCooldown"" [label=""checkCooldown""];
""1864_ICOSplit"" -> ""1864_isAdmin"";
""1864_ICOSplit"" -> ""1864_safeSub"";
""1864_calculateTokenAmount"" -> ""1864_getPricePerToken"";
""1864_buyTokensForSelf"" -> ""1864_calculateTokenAmount"";
""1864_alterBankBalance"" -> ""1864_DAppOnline"";
""1864_logoutUser"" -> ""1864_isAdmin"";
""1864_ICOSplit"" -> ""1864_assetFreeze"";
""1864_transfer"" -> ""1864_isRunning"";
""1864_loginUser"" -> ""1864_DAppOnline"";
""1864_transferToAddress"" -> ""1864_addUser"";
""1864_transfer"" -> ""1864_transferToSelf"";
""1864_buyTokensForAddress"" -> ""1864_addUser"";
""1864_emergencyFreeze"" -> ""1864_isAdmin"";
""1864_loginUser"" -> ""1864_isAdmin"";
""1864_transferFrom"" -> ""1864_requireThaw"";
""1864_isDAppReady"" -> ""1864_isAdmin"";
""1864_splitProfits"" -> ""1864_assetFreeze"";
""1864_checkSplitEnd"" -> ""1864_assetThaw"";
""1864_buyTokensForAddress"" -> ""1864_calculateTokenAmount"";
""1864_emergencyThaw"" -> ""1864_isAdmin"";
""1864_transfer"" -> ""1864_transferToContract"";
""1864_transferFrom"" -> ""1864_safeSub"";
""1864_transferFrom"" -> ""1864_userNotPlaying"";
""1864_transferToContract"" -> ""1864_safeSub"";
""1864_transferToAddress"" -> ""1864_safeSub"";
""1864_splitProfits"" -> ""1864_safeSub"";
""1864_logoutUser"" -> ""1864_DAppOnline"";
""1864_setPriceOfEther"" -> ""1864_isAdmin"";
""1864_transfer"" -> ""1864_isContract"";
""1864_transferFrom"" -> ""1864_addUser"";
""1864_buyTokensForSelf"" -> ""1864_addUser"";
""1864_claimTokens"" -> ""1864_isAdmin"";
""1864_transfer"" -> ""1864_requireThaw"";
""1864_transferToSelf"" -> ""1864_safeSub"";
""1864_alterBankBalance"" -> ""1864_isAdmin"";
""1864_splitProfits"" -> ""1864_checkSplitEnd"";
""1864_transferToContract"" -> ""1864_addUser"";
""1864_transfer"" -> ""1864_transferToAddress"";
""1864_ICOSplit"" -> ""1864_assetThaw"";
""1864_alterBankBalance"" -> ""1864_safeSub"";
""1864_WeBetCrypto"" -> ""1864_addUser"";
""1864_ICOSplit"" -> ""1864_oneTime"";
}
"
0xd49bc192fe139f4bd12d769540275856ec381968.sol,BITY,"contract BITY is Pausable, StandardToken, BlackList { string public name; string public symbol; uint public decimals; address public upgradedAddress; bool public deprecated; function BITY(uint _initialSupply, string _name, string _symbol, uint _decimals) public { _totalSupply = _initialSupply * 10 ** uint256(_decimals); name = _name; symbol = _symbol; decimals = _decimals; balances[owner] = _totalSupply; deprecated = false; }",0,"subgraph cluster_1148_BITY {
label=""BITY"";
""1148_issue"" [label=""issue""];
""1148_allowance"" [label=""allowance""];
""1148_totalSupply"" [label=""totalSupply""];
""1148_redeem"" [label=""redeem""];
""1148_balanceOf"" [label=""balanceOf""];
""1148_transferFrom"" [label=""transferFrom""];
""1148_approve"" [label=""approve""];
""1148_setParams"" [label=""setParams""];
""1148_transfer"" [label=""transfer""];
""1148_BITY"" [label=""BITY""];
""1148_deprecate"" [label=""deprecate""];
""1148_transferFrom"" -> ""1148_whenNotPaused"";
""1148_balanceOf"" -> ""1148_balanceOf"";
""1148_transfer"" -> ""1148_whenNotPaused"";
""1148_redeem"" -> ""1148_onlyOwner"";
""1148_transferFrom"" -> ""1148_transferFrom"";
""1148_approve"" -> ""1148_onlyPayloadSize"";
""1148_transfer"" -> ""1148_transfer"";
""1148_deprecate"" -> ""1148_onlyOwner"";
""1148_issue"" -> ""1148_onlyOwner"";
""1148_setParams"" -> ""1148_onlyOwner"";
""1148_approve"" -> ""1148_approve"";
""1148_allowance"" -> ""1148_allowance"";
}
"
0x24626fd95ad815bab2136d6f91ca10562161cda3.sol,DaoStorage,"contract DaoStorage is DaoWhitelistingCommon, BytesIteratorStorage { using DoublyLinkedList for DoublyLinkedList.Bytes; using DaoStructs for DaoStructs.Voting; using DaoStructs for DaoStructs.Proposal; using DaoStructs for DaoStructs.ProposalVersion; DoublyLinkedList.Bytes allProposals; mapping (bytes32 => DaoStructs.Proposal) proposalsById; mapping (bytes32 => DoublyLinkedList.Bytes) proposalsByState; constructor(address _resolver) public { require(init(CONTRACT_STORAGE_DAO, _resolver)); }",0,"subgraph cluster_6932_DaoStorage {
label=""DaoStorage"";
""6932_getNextProposalInState"" [label=""getNextProposalInState""];
""6932_readProposalVersion"" [label=""readProposalVersion""];
""6932_setProposalPass"" [label=""setProposalPass""];
""6932_readProposalFunding"" [label=""readProposalFunding""];
""6932_updateProposalPRL"" [label=""updateProposalPRL""];
""6932_archiveProposal"" [label=""archiveProposal""];
""6932_closeProposal"" [label=""closeProposal""];
""6932_setProposalCollateralAmount"" [label=""setProposalCollateralAmount""];
""6932_updateProposalEndorse"" [label=""updateProposalEndorse""];
""6932_getNextProposalVersion"" [label=""getNextProposalVersion""];
""6932_finalizeProposal"" [label=""finalizeProposal""];
""6932_readProposalDraftVotingResult"" [label=""readProposalDraftVotingResult""];
""6932_readDraftVotingCount"" [label=""readDraftVotingCount""];
""6932_addProposal"" [label=""addProposal""];
""6932_readVote"" [label=""readVote""];
""6932_revealVote"" [label=""revealVote""];
""6932_readProposal"" [label=""readProposal""];
""6932_changeFundings"" [label=""changeFundings""];
""6932_readComittedVote"" [label=""readComittedVote""];
""6932_readProposalDraftVotingTime"" [label=""readProposalDraftVotingTime""];
""6932_readVotingRoundVotes"" [label=""readVotingRoundVotes""];
""6932_getNextProposal"" [label=""getNextProposal""];
""6932_editProposal"" [label=""editProposal""];
""6932_getPreviousProposal"" [label=""getPreviousProposal""];
""6932_readPrlAction"" [label=""readPrlAction""];
""6932_closeProposalInternal"" [label=""closeProposalInternal""];
""6932_setProposalCollateralStatus"" [label=""setProposalCollateralStatus""];
""6932_getFirstProposal"" [label=""getFirstProposal""];
""6932_getFirstProposalVersion"" [label=""getFirstProposalVersion""];
""6932_setProposalDraftPass"" [label=""setProposalDraftPass""];
""6932_getLastProposalInState"" [label=""getLastProposalInState""];
""6932_readProposalMilestone"" [label=""readProposalMilestone""];
""6932_readProposalProposer"" [label=""readProposalProposer""];
""6932_setProposalDraftVotingTime"" [label=""setProposalDraftVotingTime""];
""6932_isClaimed"" [label=""isClaimed""];
""6932_getFirstProposalInState"" [label=""getFirstProposalInState""];
""6932_setDraftVotingClaim"" [label=""setDraftVotingClaim""];
""6932_getLastProposalVersion"" [label=""getLastProposalVersion""];
""6932_readVotingCount"" [label=""readVotingCount""];
""6932_readTotalPrlActions"" [label=""readTotalPrlActions""];
""6932_addProposalDoc"" [label=""addProposalDoc""];
""6932_readProposalVotingTime"" [label=""readProposalVotingTime""];
""6932_setMilestoneFunded"" [label=""setMilestoneFunded""];
""6932_readIfMilestoneFunded"" [label=""readIfMilestoneFunded""];
""6932_readProposalCollateralAmount"" [label=""readProposalCollateralAmount""];
""6932_addDraftVote"" [label=""addDraftVote""];
""6932_isDraftClaimed"" [label=""isDraftClaimed""];
""6932_getPreviousProposalVersion"" [label=""getPreviousProposalVersion""];
""6932_constructor"" [label=""constructor""];
""6932_getLastProposal"" [label=""getLastProposal""];
""6932_commitVote"" [label=""commitVote""];
""6932_getPreviousProposalInState"" [label=""getPreviousProposalInState""];
""6932_readProposalCollateralStatus"" [label=""readProposalCollateralStatus""];
""6932_readProposalVotingResult"" [label=""readProposalVotingResult""];
""6932_setVotingClaim"" [label=""setVotingClaim""];
""6932_setProposalVotingTime"" [label=""setProposalVotingTime""];
""6932_readProposalDocs"" [label=""readProposalDocs""];
""6932_readDraftVote"" [label=""readDraftVote""];
""6932_editProposal"" -> ""6932_sender_is"";
""6932_constructor"" -> ""6932_init"";
""6932_readVotingCount"" -> ""6932_senderIsAllowedToRead"";
""6932_getLastProposalInState"" -> ""6932_read_last_from_bytesarray"";
""6932_readProposalDraftVotingResult"" -> ""6932_senderIsAllowedToRead"";
""6932_readComittedVote"" -> ""6932_senderIsAllowedToRead"";
""6932_getNextProposal"" -> ""6932_read_next_from_bytesarray"";
""6932_setProposalPass"" -> ""6932_closeProposalInternal"";
""6932_readDraftVotingCount"" -> ""6932_senderIsAllowedToRead"";
""6932_readProposal"" -> ""6932_senderIsAllowedToRead"";
""6932_readProposalDraftVotingTime"" -> ""6932_senderIsAllowedToRead"";
""6932_setProposalCollateralAmount"" -> ""6932_sender_is"";
""6932_readProposalCollateralStatus"" -> ""6932_senderIsAllowedToRead"";
""6932_setProposalVotingTime"" -> ""6932_sender_is_from"";
""6932_finalizeProposal"" -> ""6932_getLastProposalVersion"";
""6932_readDraftVote"" -> ""6932_senderIsAllowedToRead"";
""6932_readVotingRoundVotes"" -> ""6932_senderIsAllowedToRead"";
""6932_getPreviousProposalInState"" -> ""6932_read_previous_from_bytesarray"";
""6932_readProposalMilestone"" -> ""6932_senderIsAllowedToRead"";
""6932_addProposalDoc"" -> ""6932_sender_is"";
""6932_setMilestoneFunded"" -> ""6932_sender_is"";
""6932_closeProposal"" -> ""6932_closeProposalInternal"";
""6932_readProposalVotingResult"" -> ""6932_senderIsAllowedToRead"";
""6932_getLastProposalInState"" -> ""6932_senderIsAllowedToRead"";
""6932_setProposalCollateralStatus"" -> ""6932_sender_is_from"";
""6932_commitVote"" -> ""6932_sender_is"";
""6932_revealVote"" -> ""6932_sender_is"";
""6932_finalizeProposal"" -> ""6932_sender_is"";
""6932_setVotingClaim"" -> ""6932_sender_is"";
""6932_setProposalDraftPass"" -> ""6932_sender_is"";
""6932_getPreviousProposal"" -> ""6932_read_previous_from_bytesarray"";
""6932_readProposalFunding"" -> ""6932_senderIsAllowedToRead"";
""6932_getNextProposalVersion"" -> ""6932_read_next_from_bytesarray"";
""6932_archiveProposal"" -> ""6932_sender_is"";
""6932_setProposalDraftVotingTime"" -> ""6932_sender_is"";
""6932_readProposal"" -> ""6932_read_last_from_bytesarray"";
""6932_getNextProposalInState"" -> ""6932_read_next_from_bytesarray"";
""6932_getPreviousProposalInState"" -> ""6932_senderIsAllowedToRead"";
""6932_getLastProposalVersion"" -> ""6932_read_last_from_bytesarray"";
""6932_getFirstProposalInState"" -> ""6932_read_first_from_bytesarray"";
""6932_getLastProposal"" -> ""6932_read_last_from_bytesarray"";
""6932_updateProposalPRL"" -> ""6932_sender_is"";
""6932_getPreviousProposalVersion"" -> ""6932_read_previous_from_bytesarray"";
""6932_getFirstProposalVersion"" -> ""6932_read_first_from_bytesarray"";
""6932_updateProposalEndorse"" -> ""6932_sender_is"";
""6932_addDraftVote"" -> ""6932_sender_is"";
""6932_updateProposalPRL"" -> ""6932_closeProposalInternal"";
""6932_setDraftVotingClaim"" -> ""6932_sender_is"";
""6932_changeFundings"" -> ""6932_sender_is"";
""6932_readProposal"" -> ""6932_read_total_bytesarray"";
""6932_setProposalPass"" -> ""6932_sender_is"";
""6932_getFirstProposal"" -> ""6932_read_first_from_bytesarray"";
""6932_getNextProposalInState"" -> ""6932_senderIsAllowedToRead"";
""6932_closeProposal"" -> ""6932_sender_is"";
""6932_getFirstProposalInState"" -> ""6932_senderIsAllowedToRead"";
""6932_readVote"" -> ""6932_senderIsAllowedToRead"";
""6932_readIfMilestoneFunded"" -> ""6932_senderIsAllowedToRead"";
""6932_readProposalVotingTime"" -> ""6932_senderIsAllowedToRead"";
""6932_addProposal"" -> ""6932_sender_is"";
""6932_setProposalDraftPass"" -> ""6932_closeProposalInternal"";
}
"
0x46580533db92c418a79f91b46df70283daef7f99.sol,MultipleArbitrableTransaction,"contract MultipleArbitrableTransaction is IArbitrable { uint8 constant AMOUNT_OF_CHOICES = 2; uint8 constant SENDER_WINS = 1; uint8 constant RECEIVER_WINS = 2; enum Party {Sender, Receiver}",0,"subgraph cluster_1906_MultipleArbitrableTransaction {
label=""MultipleArbitrableTransaction"";
""1906_timeOutByReceiver"" [label=""timeOutByReceiver""];
""1906_reimburse"" [label=""reimburse""];
""1906_pay"" [label=""pay""];
""1906_getTransactionIDsByAddress"" [label=""getTransactionIDsByAddress""];
""1906_appeal"" [label=""appeal""];
""1906_rule"" [label=""rule""];
""1906_executeRuling"" [label=""executeRuling""];
""1906_timeOutBySender"" [label=""timeOutBySender""];
""1906_payArbitrationFeeByReceiver"" [label=""payArbitrationFeeByReceiver""];
""1906_payArbitrationFeeBySender"" [label=""payArbitrationFeeBySender""];
""1906_createTransaction"" [label=""createTransaction""];
""1906_raiseDispute"" [label=""raiseDispute""];
""1906_executeTransaction"" [label=""executeTransaction""];
""1906_submitEvidence"" [label=""submitEvidence""];
""1906_constructor"" [label=""constructor""];
""1906_getCountTransactions"" [label=""getCountTransactions""];
""1906_payArbitrationFeeByReceiver"" -> ""1906_raiseDispute"";
""1906_timeOutByReceiver"" -> ""1906_executeRuling"";
""1906_rule"" -> ""1906_executeRuling"";
""1906_timeOutBySender"" -> ""1906_executeRuling"";
""1906_payArbitrationFeeBySender"" -> ""1906_raiseDispute"";
}
"
0x6f4dcbb16f72853c7382e7100a0713a68e53d9be.sol,GroupBuyContract,contract GroupBuyContract { uint256 public constant MAX_CONTRIBUTION_SLOTS = 20; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; struct Group { address[] contributorArr; mapping(address => uint256) addressToContributorArrIndex; mapping(address => uint256) addressToContribution; bool exists; uint256 contributedBalance; uint256 purchasePrice; },0,"subgraph cluster_2011_GroupBuyContract {
label=""GroupBuyContract"";
""2011_unpause"" [label=""unpause""];
""2011_withdrawCommission"" [label=""withdrawCommission""];
""2011_fallback"" [label=""fallback""];
""2011_setCEO"" [label=""setCEO""];
""2011_setCOO2"" [label=""setCOO2""];
""2011_activatePurchase"" [label=""activatePurchase""];
""2011_adjustCommission"" [label=""adjustCommission""];
""2011__clearContributorRecordInGroup"" [label=""_clearContributorRecordInGroup""];
""2011__distributeProceeds"" [label=""_distributeProceeds""];
""2011_getContributorsInTokenGroupCount"" [label=""getContributorsInTokenGroupCount""];
""2011_getTokenGroupTotalBalance"" [label=""getTokenGroupTotalBalance""];
""2011_getSelfGroupsContributedTo"" [label=""getSelfGroupsContributedTo""];
""2011__newPrice"" [label=""_newPrice""];
""2011_setCOO1"" [label=""setCOO1""];
""2011__addressNotNull"" [label=""_addressNotNull""];
""2011_withdrawBalance"" [label=""withdrawBalance""];
""2011_dissolveTokenGroup"" [label=""dissolveTokenGroup""];
""2011_distributeCustomSaleProceeds"" [label=""distributeCustomSaleProceeds""];
""2011_getGroupPurchasedPrice"" [label=""getGroupPurchasedPrice""];
""2011_contributeToTokenGroup"" [label=""contributeToTokenGroup""];
""2011_getGroupsContributedTo"" [label=""getGroupsContributedTo""];
""2011_GroupBuyContract"" [label=""GroupBuyContract""];
""2011_setToForking"" [label=""setToForking""];
""2011_leaveTokenGroupAndWithdrawBalance"" [label=""leaveTokenGroupAndWithdrawBalance""];
""2011_pause"" [label=""pause""];
""2011__withdrawUserFunds"" [label=""_withdrawUserFunds""];
""2011__purchase"" [label=""_purchase""];
""2011_transferToken"" [label=""transferToken""];
""2011_getSelfContributionBalanceForTokenGroup"" [label=""getSelfContributionBalanceForTokenGroup""];
""2011_setCOO3"" [label=""setCOO3""];
""2011_leaveTokenGroup"" [label=""leaveTokenGroup""];
""2011_setCFO"" [label=""setCFO""];
""2011_distributeSaleProceeds"" [label=""distributeSaleProceeds""];
""2011__clearGroupRecordInContributor"" [label=""_clearGroupRecordInContributor""];
""2011_getContributionBalanceForTokenGroup"" [label=""getContributionBalanceForTokenGroup""];
""2011_getWithdrawableBalance"" [label=""getWithdrawableBalance""];
""2011_getContributorsInTokenGroup"" [label=""getContributorsInTokenGroup""];
""2011_setToNotForking"" [label=""setToNotForking""];
""2011_transferToken"" -> ""2011_onlyCOO"";
""2011_contributeToTokenGroup"" -> ""2011_whenNotPaused"";
""2011_withdrawBalance"" -> ""2011__addressNotNull"";
""2011_adjustCommission"" -> ""2011_onlyCLevel"";
""2011_withdrawBalance"" -> ""2011__withdrawUserFunds"";
""2011_distributeSaleProceeds"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroup"" -> ""2011__clearGroupRecordInContributor"";
""2011_setCEO"" -> ""2011_onlyCEO"";
""2011_unpause"" -> ""2011_onlyCEO"";
""2011_contributeToTokenGroup"" -> ""2011__addressNotNull"";
""2011_pause"" -> ""2011_onlyCLevel"";
""2011_contributeToTokenGroup"" -> ""2011_whenNotForking"";
""2011_pause"" -> ""2011_whenNotPaused"";
""2011_dissolveTokenGroup"" -> ""2011__clearGroupRecordInContributor"";
""2011_activatePurchase"" -> ""2011__purchase"";
""2011_distributeCustomSaleProceeds"" -> ""2011__distributeProceeds"";
""2011_setToForking"" -> ""2011_whenNotForking"";
""2011_unpause"" -> ""2011_whenPaused"";
""2011_getGroupsContributedTo"" -> ""2011__addressNotNull"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__addressNotNull"";
""2011_activatePurchase"" -> ""2011_whenNotPaused"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011_whenNotPaused"";
""2011_setToNotForking"" -> ""2011_onlyCEO"";
""2011_distributeCustomSaleProceeds"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__clearContributorRecordInGroup"";
""2011_distributeSaleProceeds"" -> ""2011__newPrice"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__clearGroupRecordInContributor"";
""2011_dissolveTokenGroup"" -> ""2011_whenForking"";
""2011_setCOO2"" -> ""2011_onlyCEO"";
""2011_contributeToTokenGroup"" -> ""2011__purchase"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__withdrawUserFunds"";
""2011_withdrawCommission"" -> ""2011_onlyCFO"";
""2011_setCOO3"" -> ""2011_onlyCEO"";
""2011_distributeSaleProceeds"" -> ""2011__distributeProceeds"";
""2011__distributeProceeds"" -> ""2011__clearGroupRecordInContributor"";
""2011_getSelfGroupsContributedTo"" -> ""2011__addressNotNull"";
""2011_setCOO1"" -> ""2011_onlyCEO"";
""2011_setToNotForking"" -> ""2011_whenForking"";
""2011_setToForking"" -> ""2011_onlyCLevel"";
""2011_dissolveTokenGroup"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroup"" -> ""2011_whenNotPaused"";
""2011_withdrawBalance"" -> ""2011_whenNotPaused"";
""2011_getWithdrawableBalance"" -> ""2011__addressNotNull"";
""2011_leaveTokenGroup"" -> ""2011__clearContributorRecordInGroup"";
""2011_leaveTokenGroup"" -> ""2011__addressNotNull"";
""2011_setCFO"" -> ""2011_onlyCEO"";
}
"
0xd634fcd4e073ec169d74fc9b0898d527865ee698.sol,Heaven3D,"contract Heaven3D is modularLong { using SafeMath for *; using NameFilter for string; using H3DKeysCalcLong for uint256; TeamDreamHubInterface public TeamDreamHub_; PlayerBookInterface public PlayerBook; string constant public name = ; string constant public symbol = ; address private owner; uint256 constant private rndExtra_ = 0 hours; uint256 constant private rndGap_ = 0 hours; uint256 constant private rndInit_ = 1 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndDeciExt_ = 360 seconds; uint256 constant private rndMax_ = 24 hours; uint256 constant private rule_limit_latestPlayersCnt = 10; uint256 constant private rule_limit_heavyPlayersCnt = 10; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; bool public noMoreNextRound_ = false; uint256 public randomDecisionPhase_ = 100; bool private endRoundDecisionResult_ = false; address private address_of_last_rand_gen_source_ = address(0); mapping (uint256 => bool) pPAIDxID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => H3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => H3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => H3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; constructor(address _TeamDreamHubSCaddress, address _PlayerBookSCaddress) public { owner = msg.sender; TeamDreamHub_ = TeamDreamHubInterface(_TeamDreamHubSCaddress); PlayerBook = PlayerBookInterface(_PlayerBookSCaddress); }",0,"subgraph cluster_4830_Heaven3D {
label=""Heaven3D"";
""4830_iWantXKeys"" [label=""iWantXKeys""];
""4830_activate"" [label=""activate""];
""4830_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4830_registerNameXID"" [label=""registerNameXID""];
""4830_winnersProfitDistributor"" [label=""winnersProfitDistributor""];
""4830_managePlayer"" [label=""managePlayer""];
""4830_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4830_calcKeysReceived"" [label=""calcKeysReceived""];
""4830_checkNotSmartContract"" [label=""checkNotSmartContract""];
""4830_buyXname"" [label=""buyXname""];
""4830_reLoadCore"" [label=""reLoadCore""];
""4830_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4830_endRound"" [label=""endRound""];
""4830_registerNameXaddr"" [label=""registerNameXaddr""];
""4830_updateTimer"" [label=""updateTimer""];
""4830_constructor"" [label=""constructor""];
""4830_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4830_reLoadXid"" [label=""reLoadXid""];
""4830_withdraw"" [label=""withdraw""];
""4830_fallback"" [label=""fallback""];
""4830_registerNameXname"" [label=""registerNameXname""];
""4830_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4830_withdrawEarnings"" [label=""withdrawEarnings""];
""4830_buyCore"" [label=""buyCore""];
""4830_verifyTeam"" [label=""verifyTeam""];
""4830_potSwap"" [label=""potSwap""];
""4830_insertToPot"" [label=""insertToPot""];
""4830_getBuyPrice"" [label=""getBuyPrice""];
""4830_internalNoter"" [label=""internalNoter""];
""4830_updateMasks"" [label=""updateMasks""];
""4830_updateGenVault"" [label=""updateGenVault""];
""4830_getTimeLeft"" [label=""getTimeLeft""];
""4830_getPlayerVaults"" [label=""getPlayerVaults""];
""4830_buyXid"" [label=""buyXid""];
""4830_reLoadXaddr"" [label=""reLoadXaddr""];
""4830_reLoadXname"" [label=""reLoadXname""];
""4830_distributeExternal"" [label=""distributeExternal""];
""4830_noMoreNextRoundSetting"" [label=""noMoreNextRoundSetting""];
""4830_endRoundControl"" [label=""endRoundControl""];
""4830_distributeInternal"" [label=""distributeInternal""];
""4830_buyXaddr"" [label=""buyXaddr""];
""4830_endRoundDecision"" [label=""endRoundDecision""];
""4830_endTx"" [label=""endTx""];
""4830_determinePID"" [label=""determinePID""];
""4830_core"" [label=""core""];
""4830_registerNameXname"" -> ""4830_isHuman"";
""4830_core"" -> ""4830_distributeExternal"";
""4830_core"" -> ""4830_distributeInternal"";
""4830_reLoadXid"" -> ""4830_reLoadCore"";
""4830_reLoadXaddr"" -> ""4830_isActivated"";
""4830_insertToPot"" -> ""4830_isActivated"";
""4830_buyCore"" -> ""4830_core"";
""4830_buyXname"" -> ""4830_isHuman"";
""4830_reLoadXaddr"" -> ""4830_verifyTeam"";
""4830_reLoadXname"" -> ""4830_isHuman"";
""4830_endRound"" -> ""4830_winnersProfitDistributor"";
""4830_fallback"" -> ""4830_buyCore"";
""4830_updateGenVault"" -> ""4830_updateMasks"";
""4830_endRoundControl"" -> ""4830_checkNotSmartContract"";
""4830_fallback"" -> ""4830_isHuman"";
""4830_buyXname"" -> ""4830_isWithinLimits"";
""4830_fallback"" -> ""4830_determinePID"";
""4830_buyXid"" -> ""4830_determinePID"";
""4830_registerNameXaddr"" -> ""4830_isHuman"";
""4830_reLoadXname"" -> ""4830_reLoadCore"";
""4830_reLoadCore"" -> ""4830_withdrawEarnings"";
""4830_getPlayerInfoByAddress"" -> ""4830_calcUnMaskedEarnings"";
""4830_withdraw"" -> ""4830_endRoundControl"";
""4830_withdraw"" -> ""4830_isActivated"";
""4830_reLoadXid"" -> ""4830_verifyTeam"";
""4830_buyXid"" -> ""4830_isWithinLimits"";
""4830_buyXaddr"" -> ""4830_verifyTeam"";
""4830_reLoadXid"" -> ""4830_isWithinLimits"";
""4830_withdraw"" -> ""4830_withdrawEarnings"";
""4830_getPlayerVaults"" -> ""4830_calcUnMaskedEarnings"";
""4830_updateGenVault"" -> ""4830_calcUnMaskedEarnings"";
""4830_buyXaddr"" -> ""4830_buyCore"";
""4830_fallback"" -> ""4830_isActivated"";
""4830_buyXid"" -> ""4830_isActivated"";
""4830_reLoadXid"" -> ""4830_isActivated"";
""4830_endRoundControl"" -> ""4830_endRound"";
""4830_managePlayer"" -> ""4830_updateGenVault"";
""4830_buyCore"" -> ""4830_endRoundControl"";
""4830_reLoadXname"" -> ""4830_isActivated"";
""4830_buyXname"" -> ""4830_verifyTeam"";
""4830_registerNameXID"" -> ""4830_isHuman"";
""4830_winnersProfitDistributor"" -> ""4830_determinePID"";
""4830_buyXname"" -> ""4830_isActivated"";
""4830_winnersProfitDistributor"" -> ""4830_checkNotSmartContract"";
""4830_withdraw"" -> ""4830_isHuman"";
""4830_fallback"" -> ""4830_isWithinLimits"";
""4830_reLoadXaddr"" -> ""4830_reLoadCore"";
""4830_withdrawEarnings"" -> ""4830_updateGenVault"";
""4830_buyXaddr"" -> ""4830_isHuman"";
""4830_endRoundControl"" -> ""4830_endRoundDecision"";
""4830_reLoadXname"" -> ""4830_isWithinLimits"";
""4830_reLoadXaddr"" -> ""4830_isWithinLimits"";
""4830_core"" -> ""4830_managePlayer"";
""4830_buyXaddr"" -> ""4830_isActivated"";
""4830_reLoadCore"" -> ""4830_core"";
""4830_buyXname"" -> ""4830_determinePID"";
""4830_buyXaddr"" -> ""4830_isWithinLimits"";
""4830_core"" -> ""4830_updateGenVault"";
""4830_core"" -> ""4830_internalNoter"";
""4830_buyXid"" -> ""4830_verifyTeam"";
""4830_core"" -> ""4830_endTx"";
""4830_distributeInternal"" -> ""4830_updateMasks"";
""4830_buyXid"" -> ""4830_isHuman"";
""4830_buyXid"" -> ""4830_buyCore"";
""4830_noMoreNextRoundSetting"" -> ""4830_isActivated"";
""4830_core"" -> ""4830_updateTimer"";
""4830_reLoadXaddr"" -> ""4830_isHuman"";
""4830_buyXname"" -> ""4830_buyCore"";
""4830_insertToPot"" -> ""4830_onlyOwner"";
""4830_buyXaddr"" -> ""4830_determinePID"";
""4830_reLoadCore"" -> ""4830_endRoundControl"";
""4830_reLoadXid"" -> ""4830_isHuman"";
""4830_noMoreNextRoundSetting"" -> ""4830_onlyOwner"";
""4830_reLoadXname"" -> ""4830_verifyTeam"";
}
"
0xed283ea5edcb1d6829c2e5267c9b7733dade517b.sol,SafeMath,"contract SafeMath { function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; assert(c >= a && c >= b); return c; }",0,"subgraph cluster_71_SafeMath {
label=""SafeMath"";
""71_safeAdd"" [label=""safeAdd""];
}
"
0xb3fb0e8a58ada850dad5ee8e084352fb014b381f.sol,CustomContract,"contract CustomContract is Ownable { using SafeMath for uint256; mapping (address => bool) public addrHasInvested; TokenInterface public constant token = TokenInterface(0x0008b0650EB2faf50cf680c07D32e84bE1c0F07E); modifier legalAirdrop(address[] _addrs, uint256 _value) { require(token.balanceOf(address(this)) >= _addrs.length.mul(_value)); require(_addrs.length <= 100); require(_value > 0); _; }",0,"subgraph cluster_497_CustomContract {
label=""CustomContract"";
""497_airDropTokens"" [label=""airDropTokens""];
""497_depositEth"" [label=""depositEth""];
""497_makeBatchPayment"" [label=""makeBatchPayment""];
""497_withdrawTokens"" [label=""withdrawTokens""];
""497_withdrawEth"" [label=""withdrawEth""];
""497_buyTokens"" [label=""buyTokens""];
""497_fallback"" [label=""fallback""];
""497_makeBatchPayment"" -> ""497_onlyOwner"";
""497_airDropTokens"" -> ""497_onlyOwner"";
""497_airDropTokens"" -> ""497_legalAirdrop"";
""497_makeBatchPayment"" -> ""497_legalBatchPayment"";
""497_withdrawEth"" -> ""497_onlyOwner"";
""497_fallback"" -> ""497_buyTokens"";
""497_withdrawTokens"" -> ""497_onlyOwner"";
}
"
0x17e65b46ad1ebfb8f9cacde8e274b377831a1253.sol,BigbomTokenExtended,"contract BigbomTokenExtended is BigbomToken { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public totalSupply = 2000000000 * 1e18; BigbomToken public bigbomToken; function BigbomTokenExtended(uint startTime, uint endTime, address admin, address _bbFounderCoreStaffWallet, address _bbAdvisorWallet, address _bbAirdropWallet, address _bbNetworkGrowthWallet, address _bbReserveWallet, address _bbPublicSaleWallet, BigbomToken _bigbomToken ) public BigbomToken(startTime, endTime, admin, _bbFounderCoreStaffWallet, _bbAdvisorWallet, _bbAirdropWallet, _bbNetworkGrowthWallet, _bbReserveWallet, _bbPublicSaleWallet ){ bigbomToken = _bigbomToken; }",0,"subgraph cluster_1711_BigbomTokenExtended {
label=""BigbomTokenExtended"";
""1711_selfFreeze"" [label=""selfFreeze""];
""1711_airDrop"" [label=""airDrop""];
""1711_BigbomTokenExtended"" [label=""BigbomTokenExtended""];
""1711_freezeAccount"" [label=""freezeAccount""];
""1711_selfFreeze"" -> ""1711_validFrozenAccount"";
""1711_airDrop"" -> ""1711_onlyOwner"";
""1711_freezeAccount"" -> ""1711_validFrozenAccount"";
""1711_airDrop"" -> ""1711_transfer"";
""1711_BigbomTokenExtended"" -> ""1711_BigbomToken"";
""1711_freezeAccount"" -> ""1711_onlyOwner"";
}
"
0xfef5497bc53a69875e02ae5b14eeff668f09a729.sol,Infinity,"contract Infinity { using SafeMath for uint256; string public name = ; string public symbol = ; uint256 public initAmount; uint256 public amountProportion; uint256 public dividend; uint256 public jackpot; uint256 public jackpotProportion; uint256 public scientists; uint256 public promotionRatio; uint256 public duration; bool public activated = false; address public developerAddr; uint256 public rId; uint256 public sId; mapping (uint256 => Indatasets.Round) public round; mapping (uint256 => mapping (uint256 => Indatasets.Stage)) public stage; mapping (address => Indatasets.Player) public player; mapping (uint256 => mapping (address => uint256)) public playerRoundAmount; mapping (uint256 => mapping (address => uint256)) public playerRoundSid; mapping (uint256 => mapping (address => uint256)) public playerRoundwithdrawAmountFlag; mapping (uint256 => mapping (uint256 => mapping (address => uint256))) public playerStageAmount; mapping (uint256 => mapping (uint256 => mapping (address => uint256))) public playerStageAccAmount; uint256[] amountLimit = [0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]; constructor() public { developerAddr = msg.sender; }",0,"subgraph cluster_2138_Infinity {
label=""Infinity"";
""2138_getPlayerDividendByRound"" [label=""getPlayerDividendByRound""];
""2138_getPlayerDividendByStage"" [label=""getPlayerDividendByStage""];
""2138_buyPlayerDataRecord"" [label=""buyPlayerDataRecord""];
""2138_getPlayerJackpot"" [label=""getPlayerJackpot""];
""2138_buyRoundDataRecord"" [label=""buyRoundDataRecord""];
""2138_fallback"" [label=""fallback""];
""2138_withdraw"" [label=""withdraw""];
""2138_getPersonalStatus"" [label=""getPersonalStatus""];
""2138_buy"" [label=""buy""];
""2138_activate"" [label=""activate""];
""2138_initStage"" [label=""initStage""];
""2138_promotionDataRecord"" [label=""promotionDataRecord""];
""2138_constructor"" [label=""constructor""];
""2138_endStage"" [label=""endStage""];
""2138_limitAmount"" [label=""limitAmount""];
""2138_getPlayerDividend"" [label=""getPlayerDividend""];
""2138_buyAnalysis"" [label=""buyAnalysis""];
""2138_getValueInfo"" [label=""getValueInfo""];
""2138_getHeadInfo"" [label=""getHeadInfo""];
""2138_endRound"" [label=""endRound""];
""2138_buyStageDataRecord"" [label=""buyStageDataRecord""];
""2138_withdraw"" -> ""2138_getPlayerDividendByStage"";
""2138_buy"" -> ""2138_senderVerify"";
""2138_buyAnalysis"" -> ""2138_buyPlayerDataRecord"";
""2138_fallback"" -> ""2138_buyAnalysis"";
""2138_getValueInfo"" -> ""2138_getPlayerDividend"";
""2138_buyStageDataRecord"" -> ""2138_stageVerify"";
""2138_buyAnalysis"" -> ""2138_promotionDataRecord"";
""2138_fallback"" -> ""2138_senderVerify"";
""2138_buy"" -> ""2138_buyAnalysis"";
""2138_getPlayerDividendByStage"" -> ""2138_getPlayerJackpot"";
""2138_getPlayerDividend"" -> ""2138_getPlayerDividendByRound"";
""2138_fallback"" -> ""2138_amountVerify"";
""2138_buyAnalysis"" -> ""2138_buyRoundDataRecord"";
""2138_fallback"" -> ""2138_isActivated"";
""2138_withdraw"" -> ""2138_playerVerify"";
""2138_buyAnalysis"" -> ""2138_limitAmount"";
""2138_withdraw"" -> ""2138_isActivated"";
""2138_buy"" -> ""2138_isActivated"";
""2138_buy"" -> ""2138_amountVerify"";
""2138_withdraw"" -> ""2138_senderVerify"";
""2138_getPersonalStatus"" -> ""2138_getPlayerDividendByRound"";
""2138_getPlayerDividendByRound"" -> ""2138_getPlayerJackpot"";
""2138_buyAnalysis"" -> ""2138_initStage"";
""2138_activate"" -> ""2138_initStage"";
""2138_buyAnalysis"" -> ""2138_endStage"";
""2138_buyAnalysis"" -> ""2138_endRound"";
""2138_buyAnalysis"" -> ""2138_buyStageDataRecord"";
}
"
0x4160836bd96bf4f2ed931bfefb3e00b3e68ad8f6.sol,PRHXToken,contract PRHXToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 1200000000 * (10**0); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function PRHXToken () { owner = msg.sender; },0,"subgraph cluster_756_PRHXToken {
label=""PRHXToken"";
""756_transferFrom"" [label=""transferFrom""];
""756_setOwner"" [label=""setOwner""];
""756_PRHXToken"" [label=""PRHXToken""];
""756_totalSupply"" [label=""totalSupply""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_approve"" [label=""approve""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_transfer"" [label=""transfer""];
""756_createTokens"" [label=""createTokens""];
""756_refundTokens"" [label=""refundTokens""];
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
""756_createTokens"" -> ""756_safeSub"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_transfer"" -> ""756_transfer"";
""756_approve"" -> ""756_allowance"";
}
"
0x00000000e86b5156e8fd624255bf7a6d722a8f1f.sol,ARIYAX,"contract ARIYAX { using SafeMath for uint256; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public decimals = 18; string public name = ; string public symbol = ; uint256 public totalSupply = 1000000000e18; event Transfer(address indexed from, address indexed to, uint256 qty); event Approval(address indexed from, address indexed spender, uint256 qty); constructor() public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_330_ARIYAX {
label=""ARIYAX"";
""330_constructor"" [label=""constructor""];
""330_approveAndCall"" [label=""approveAndCall""];
""330_isContract"" [label=""isContract""];
""330_approve"" [label=""approve""];
""330_transferFrom"" [label=""transferFrom""];
""330_transfer"" [label=""transfer""];
""330_transfer"" -> ""330_transfer"";
""330_transfer"" -> ""330_isContract"";
""330_approveAndCall"" -> ""330_approve"";
}
"
0x707784ed2b464474f8fb763c058b33fcf8626db5.sol,Production,"contract Production is Child { uint32 constant STUFF_IDX_POINT = 22001; uint32 constant STUFF_IDX_GENRAL = 21000; uint32 constant STUFF_IDX_EXTRA = 21004; uint32 constant PERMISSION_1 = 23002; uint32 constant PERMISSION_2 = 23003; uint constant BASERATIO = 10000; uint constant BOILER_FREE_IDX = 0; uint constant BOILER_MAX_NUM = 3; uint constant CREATE_COST_MIN = 30; uint constant CREATE_COST_FEW = 60; uint constant CREATE_COST_MANY = 150; uint constant CREATE_COST_MAX = 300; uint constant COOLTIME_MIN = 60 * 60; uint constant COOLTIME_MID = 60 * 60 * 2; uint constant COOLTIME_MAX = 60 * 60 * 4; uint constant ACCELERATE_UNITTIME = 60 * 5; uint constant ACCELERATE_UNITFEE = 0.0013 ether; uint constant BONUS_PERCENT_ACCELERATE = 80; ProductionBoiler g_Boilers; constructor(Main main, ProductionBoiler pb) public Child(main) { g_Boilers = pb; g_Boilers.SetAuth(this); }",0,"subgraph cluster_6061_Production {
label=""Production"";
""6061_IsBoilerValid"" [label=""IsBoilerValid""];
""6061_GetExchangePoint"" [label=""GetExchangePoint""];
""6061_GetMinCost"" [label=""GetMinCost""];
""6061_constructor"" [label=""constructor""];
""6061_GenChipsLevel"" [label=""GenChipsLevel""];
""6061_GenChipLevel_Extra"" [label=""GenChipLevel_Extra""];
""6061_GetBoilersInfo"" [label=""GetBoilersInfo""];
""6061_Accelerate"" [label=""Accelerate""];
""6061_GenOutChipsNum"" [label=""GenOutChipsNum""];
""6061_CreateChips"" [label=""CreateChips""];
""6061_GetPermissionIdx"" [label=""GetPermissionIdx""];
""6061_Collect"" [label=""Collect""];
""6061_CollectChips"" [label=""CollectChips""];
""6061_GenChipLevel_Special"" [label=""GenChipLevel_Special""];
""6061_GenExtWeightList"" [label=""GenExtWeightList""];
""6061_Create"" [label=""Create""];
""6061_ResolveChips"" [label=""ResolveChips""];
""6061_kill"" [label=""kill""];
""6061_GenChipIndex"" [label=""GenChipIndex""];
""6061_GenChipLevel_General"" [label=""GenChipLevel_General""];
""6061_IsBoilerValid"" -> ""6061_GetPermissionIdx"";
""6061_GenExtWeightList"" -> ""6061_GetMinCost"";
""6061_GenChipsLevel"" -> ""6061_GenChipLevel_Extra"";
""6061_GenOutChipsNum"" -> ""6061_GenRandom"";
""6061_Accelerate"" -> ""6061_AddBonus"";
""6061_kill"" -> ""6061_CreatorAble"";
""6061_constructor"" -> ""6061_constructor"";
""6061_CreateChips"" -> ""6061_GenChipIndex"";
""6061_GenChipLevel_General"" -> ""6061_GenRandom"";
""6061_GenChipsLevel"" -> ""6061_GenOutChipsNum"";
""6061_CreateChips"" -> ""6061_GenChipsLevel"";
""6061_Create"" -> ""6061_IsBoilerValid"";
""6061_GenChipLevel_Extra"" -> ""6061_GenRandom"";
""6061_Create"" -> ""6061_CreateChips"";
""6061_GenChipLevel_Special"" -> ""6061_GenRandom"";
""6061_GenChipsLevel"" -> ""6061_GenChipLevel_General"";
""6061_GenChipIndex"" -> ""6061_GenRandom"";
""6061_Accelerate"" -> ""6061_CollectChips"";
""6061_Collect"" -> ""6061_CollectChips"";
""6061_CreateChips"" -> ""6061_GenExtWeightList"";
""6061_GenChipsLevel"" -> ""6061_GenChipLevel_Special"";
""6061_ResolveChips"" -> ""6061_GetExchangePoint"";
}
"
0x037941d4ed93af8628fb4e9451752db8b2446f76.sol,Snowflake,contract Snowflake is Ownable { using SafeMath for uint; using addressSet for addressSet._addressSet; mapping (string => uint) internal deposits; uint signatureTimeout; mapping (bytes32 => bool) signatureLog; mapping (string => Identity) internal directory; mapping (address => string) internal addressDirectory; mapping (bytes32 => string) internal initiatedAddressClaims; address public clientRaindropAddress; address public hydroTokenAddress; addressSet._addressSet resolverWhitelist; constructor() public { setSignatureTimeout(7200); },0,"subgraph cluster_341_SnowflakeResolver {
label=""SnowflakeResolver"";
""341_onSignUp"" [label=""onSignUp""];
""341_callOnSignUp"" [label=""callOnSignUp""];
""341_callOnRemoval"" [label=""callOnRemoval""];
""341_onRemoval"" [label=""onRemoval""];
}
"
0xecfbc0c5bc5cf4a266c1a90db0a4fe79c82bcd93.sol,HYIPToken,"contract HYIPToken is BurnableToken, UpgradeableToken { string public name; string public symbol; uint public decimals; address public owner; mapping (address => bool) public mintAgents; event MintingAgentChanged(address addr, bool state); function mint(address receiver, uint amount) onlyMintAgent public { totalSupply = totalSupply + amount; balances[receiver] = balances[receiver] + amount; Transfer(0, receiver, amount); }",0,"subgraph cluster_1023_HYIPToken {
label=""HYIPToken"";
""1023_mint"" [label=""mint""];
""1023_HYIPToken"" [label=""HYIPToken""];
""1023_setMintAgent"" [label=""setMintAgent""];
""1023_setMintAgent"" -> ""1023_onlyOwner"";
""1023_mint"" -> ""1023_onlyMintAgent"";
""1023_HYIPToken"" -> ""1023_UpgradeableToken"";
}
"
0x6ca935e5c66bcd9ed690e80e2fecee2452e00172.sol,ldoh,"contract ldoh is EthereumSmartContract { event onCashbackCode (address indexed hodler, address cashbackcode); event onAffiliateBonus (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onClaimTokens (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onHoldplatform (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onAddContractAddress(address indexed hodler, address indexed contracthodler, uint256 Currentprice, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime); event onHoldplatformsetting(address indexed hodler, address indexed Tokenairdrop, bool HPM_status, uint256 HPM_divider, uint256 HPM_ratio, uint256 datetime); event onHoldplatformdeposit(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime); event onHoldplatformwithdraw(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime); event onReceiveAirdrop(address indexed hodler, uint256 amount, uint256 datetime); struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; bool cashbackstatus; }",0,"subgraph cluster_2352_ldoh {
label=""ldoh"";
""2352_UnlockToken2"" [label=""UnlockToken2""];
""2352_HodlTokens3"" [label=""HodlTokens3""];
""2352_TokenPrice"" [label=""TokenPrice""];
""2352_mul"" [label=""mul""];
""2352_Holdplatform_Deposit"" [label=""Holdplatform_Deposit""];
""2352_UnlockToken4"" [label=""UnlockToken4""];
""2352_sub"" [label=""sub""];
""2352_HodlTokens4"" [label=""HodlTokens4""];
""2352_PayToken"" [label=""PayToken""];
""2352_UnlockToken3"" [label=""UnlockToken3""];
""2352_HodlTokens2"" [label=""HodlTokens2""];
""2352_Holdplatform"" [label=""Holdplatform""];
""2352_Holdplatform_Airdrop"" [label=""Holdplatform_Airdrop""];
""2352_add"" [label=""add""];
""2352_Holdplatform_Withdraw"" [label=""Holdplatform_Withdraw""];
""2352_fallback"" [label=""fallback""];
""2352_div"" [label=""div""];
""2352_GetUserSafesLength"" [label=""GetUserSafesLength""];
""2352_AddContractAddress"" [label=""AddContractAddress""];
""2352_CashbackCode"" [label=""CashbackCode""];
""2352_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""2352_GetSafe"" [label=""GetSafe""];
""2352_Airdrop"" [label=""Airdrop""];
""2352_ClaimTokens"" [label=""ClaimTokens""];
""2352_constructor"" [label=""constructor""];
""2352_ReturnAllTokens"" [label=""ReturnAllTokens""];
""2352_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""2352_HodlTokens3"" -> ""2352_sub"";
""2352_TokenPrice"" -> ""2352_restricted"";
""2352_UnlockToken4"" -> ""2352_mul"";
""2352_PayToken"" -> ""2352_add"";
""2352_HodlTokens3"" -> ""2352_div"";
""2352_Holdplatform_Airdrop"" -> ""2352_restricted"";
""2352_UnlockToken3"" -> ""2352_UnlockToken4"";
""2352_Holdplatform_Withdraw"" -> ""2352_sub"";
""2352_ReturnAllTokens"" -> ""2352_restricted"";
""2352_UnlockToken3"" -> ""2352_sub"";
""2352_UnlockToken4"" -> ""2352_sub"";
""2352_ReturnAllTokens"" -> ""2352_add"";
""2352_ReturnAllTokens"" -> ""2352_PayToken"";
""2352_ClaimTokens"" -> ""2352_UnlockToken2"";
""2352_UnlockToken3"" -> ""2352_add"";
""2352_HodlTokens3"" -> ""2352_HodlTokens4"";
""2352_HodlTokens2"" -> ""2352_HodlTokens3"";
""2352_Holdplatform_Deposit"" -> ""2352_add"";
""2352_Holdplatform"" -> ""2352_add"";
""2352_UnlockToken3"" -> ""2352_mul"";
""2352_WithdrawAffiliate"" -> ""2352_add"";
""2352_UnlockToken3"" -> ""2352_div"";
""2352_UnlockToken2"" -> ""2352_div"";
""2352_UnlockToken2"" -> ""2352_add"";
""2352_WithdrawAffiliate"" -> ""2352_sub"";
""2352_HodlTokens3"" -> ""2352_add"";
""2352_Holdplatform_Withdraw"" -> ""2352_restricted"";
""2352_PayToken"" -> ""2352_sub"";
""2352_Holdplatform"" -> ""2352_HodlTokens2"";
""2352_UnlockToken2"" -> ""2352_PayToken"";
""2352_AddContractAddress"" -> ""2352_mul"";
""2352_HodlTokens3"" -> ""2352_mul"";
""2352_UnlockToken2"" -> ""2352_mul"";
""2352_UnlockToken2"" -> ""2352_UnlockToken3"";
""2352_AddContractAddress"" -> ""2352_div"";
""2352_UnlockToken4"" -> ""2352_div"";
""2352_AddContractAddress"" -> ""2352_restricted"";
""2352_HodlTokens2"" -> ""2352_div"";
""2352_Holdplatform_Airdrop"" -> ""2352_div"";
""2352_Airdrop"" -> ""2352_div"";
""2352_UnlockToken4"" -> ""2352_PayToken"";
""2352_PayToken"" -> ""2352_Airdrop"";
""2352_HodlTokens4"" -> ""2352_add"";
""2352_UnlockToken2"" -> ""2352_sub"";
""2352_Holdplatform_Deposit"" -> ""2352_restricted"";
""2352_Airdrop"" -> ""2352_sub"";
""2352_HodlTokens2"" -> ""2352_sub"";
}
"
0x28bd55152293595c65652f175c1e8fa95d10be93.sol,NandoCoin,"contract NandoCoin { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor( string tokenName, string tokenSymbol ) public { totalSupply = 200000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_NandoCoin {
label=""NandoCoin"";
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_transferFrom"" [label=""transferFrom""];
""361_constructor"" [label=""constructor""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0xf0f0ec744a717807a24322d0e2fecc6b73c2d752.sol,DragonKing,contract DragonKing is mortal { struct Character { uint8 characterType; uint128 value; address owner; uint64 purchaseTimestamp; },0,"subgraph cluster_2603_DragonKing {
label=""DragonKing"";
""2603_collectFees"" [label=""collectFees""];
""2603_replaceCharacter"" [label=""replaceCharacter""];
""2603_addCharacters"" [label=""addCharacters""];
""2603_getNumDragons"" [label=""getNumDragons""];
""2603_distribute"" [label=""distribute""];
""2603_hitCharacter"" [label=""hitCharacter""];
""2603_setProtectionPrice"" [label=""setProtectionPrice""];
""2603_protectCharacter"" [label=""protectCharacter""];
""2603_setFee"" [label=""setFee""];
""2603_setPercentageToKill"" [label=""setPercentageToKill""];
""2603_getFees"" [label=""getFees""];
""2603_setFightFactor"" [label=""setFightFactor""];
""2603_setMaxCharacters"" [label=""setMaxCharacters""];
""2603_receiveApproval"" [label=""receiveApproval""];
""2603_toUint32"" [label=""toUint32""];
""2603_setTeleportPrice"" [label=""setTeleportPrice""];
""2603_setPrices"" [label=""setPrices""];
""2603_getRandomDragon"" [label=""getRandomDragon""];
""2603_exit"" [label=""exit""];
""2603_teleportKnight"" [label=""teleportKnight""];
""2603_fight"" [label=""fight""];
""2603_DragonKing"" [label=""DragonKing""];
""2603_sellCharacter"" [label=""sellCharacter""];
""2603_getCharacter"" [label=""getCharacter""];
""2603_getNumKnights"" [label=""getNumKnights""];
""2603_findOldest"" [label=""findOldest""];
""2603_generateRandomNumber"" [label=""generateRandomNumber""];
""2603_getCharacterIndex"" [label=""getCharacterIndex""];
""2603_addCharacter"" [label=""addCharacter""];
""2603_get10Characters"" [label=""get10Characters""];
""2603_triggerVolcanoEruption"" [label=""triggerVolcanoEruption""];
""2603_payOut"" [label=""payOut""];
""2603_stop"" [label=""stop""];
""2603_withdraw"" [label=""withdraw""];
""2603_setEruptionThreshold"" [label=""setEruptionThreshold""];
""2603_fight"" -> ""2603_hitCharacter"";
""2603_collectFees"" -> ""2603_getFees"";
""2603_setMaxCharacters"" -> ""2603_onlyOwner"";
""2603_DragonKing"" -> ""2603_onlyOwner"";
""2603_getRandomDragon"" -> ""2603_generateRandomNumber"";
""2603_fight"" -> ""2603_getCharacterIndex"";
""2603_fight"" -> ""2603_getRandomDragon"";
""2603_stop"" -> ""2603_withdraw"";
""2603_receiveApproval"" -> ""2603_teleportKnight"";
""2603_fight"" -> ""2603_generateRandomNumber"";
""2603_addCharacters"" -> ""2603_addCharacter"";
""2603_fight"" -> ""2603_findOldest"";
""2603_sellCharacter"" -> ""2603_findOldest"";
""2603_setFee"" -> ""2603_onlyOwner"";
""2603_triggerVolcanoEruption"" -> ""2603_hitCharacter"";
""2603_withdraw"" -> ""2603_onlyOwner"";
""2603_sellCharacter"" -> ""2603_replaceCharacter"";
""2603_setPrices"" -> ""2603_onlyOwner"";
""2603_hitCharacter"" -> ""2603_replaceCharacter"";
""2603_stop"" -> ""2603_onlyOwner"";
""2603_setProtectionPrice"" -> ""2603_onlyOwner"";
""2603_exit"" -> ""2603_findOldest"";
""2603_setFightFactor"" -> ""2603_onlyOwner"";
""2603_teleportKnight"" -> ""2603_addCharacter"";
""2603_collectFees"" -> ""2603_onlyOwner"";
""2603_stop"" -> ""2603_kill"";
""2603_exit"" -> ""2603_replaceCharacter"";
""2603_setEruptionThreshold"" -> ""2603_onlyOwner"";
""2603_receiveApproval"" -> ""2603_protectCharacter"";
""2603_distribute"" -> ""2603_findOldest"";
""2603_triggerVolcanoEruption"" -> ""2603_distribute"";
""2603_sellCharacter"" -> ""2603_getCharacterIndex"";
""2603_setPercentageToKill"" -> ""2603_onlyOwner"";
""2603_receiveApproval"" -> ""2603_toUint32"";
""2603_payOut"" -> ""2603_onlyOwner"";
""2603_triggerVolcanoEruption"" -> ""2603_generateRandomNumber"";
""2603_stop"" -> ""2603_payOut"";
""2603_setTeleportPrice"" -> ""2603_onlyOwner"";
}
"
0xd3e53ed5bcc533a15740ba427f6e6bc90df4ebe2.sol,KeyFund,"contract KeyFund is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 2000000000e18; uint256 private totalReserved = (totalSupply.div(100)).mul(15); uint256 private totalBounties = (totalSupply.div(100)).mul(10); uint256 public totalDistributed = totalReserved.add(totalBounties); uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value; uint256 public minReq; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1168_KeyFund {
label=""KeyFund"";
""1168_balanceOf"" [label=""balanceOf""];
""1168_burn"" [label=""burn""];
""1168_KeyFund"" [label=""KeyFund""];
""1168_transferOwnership"" [label=""transferOwnership""];
""1168_getTokens"" [label=""getTokens""];
""1168_distributeAmounts"" [label=""distributeAmounts""];
""1168_transferFrom"" [label=""transferFrom""];
""1168_setParameters"" [label=""setParameters""];
""1168_distr"" [label=""distr""];
""1168_airdrop"" [label=""airdrop""];
""1168_enableWhitelist"" [label=""enableWhitelist""];
""1168_approve"" [label=""approve""];
""1168_withdraw"" [label=""withdraw""];
""1168_disableWhitelist"" [label=""disableWhitelist""];
""1168_distribution"" [label=""distribution""];
""1168_allowance"" [label=""allowance""];
""1168_fallback"" [label=""fallback""];
""1168_transfer"" [label=""transfer""];
""1168_getTokenBalance"" [label=""getTokenBalance""];
""1168_finishDistribution"" [label=""finishDistribution""];
""1168_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1168_distribution"" -> ""1168_distr"";
""1168_airdrop"" -> ""1168_distr"";
""1168_distributeAmounts"" -> ""1168_canDistr"";
""1168_setParameters"" -> ""1168_onlyOwner"";
""1168_withdraw"" -> ""1168_onlyOwner"";
""1168_transferOwnership"" -> ""1168_onlyOwner"";
""1168_burn"" -> ""1168_onlyOwner"";
""1168_transferFrom"" -> ""1168_onlyPayloadSize"";
""1168_distr"" -> ""1168_canDistr"";
""1168_distribution"" -> ""1168_canDistr"";
""1168_airdrop"" -> ""1168_canDistr"";
""1168_enableWhitelist"" -> ""1168_onlyOwner"";
""1168_disableWhitelist"" -> ""1168_onlyOwner"";
""1168_withdrawForeignTokens"" -> ""1168_onlyOwner"";
""1168_distribution"" -> ""1168_onlyOwner"";
""1168_transfer"" -> ""1168_onlyPayloadSize"";
""1168_airdrop"" -> ""1168_onlyOwner"";
""1168_finishDistribution"" -> ""1168_onlyOwner"";
""1168_finishDistribution"" -> ""1168_canDistr"";
""1168_fallback"" -> ""1168_getTokens"";
""1168_getTokens"" -> ""1168_canDistr"";
""1168_getTokens"" -> ""1168_onlyWhitelist"";
""1168_distributeAmounts"" -> ""1168_distr"";
""1168_distributeAmounts"" -> ""1168_onlyOwner"";
""1168_getTokens"" -> ""1168_distr"";
}
"
0x920231a0e58d685f29ca3838777093fad88f665f.sol,Moongang,contract Moongang { modifier onlyOwner { require(msg.sender == owner); _; },0,"subgraph cluster_1059_Moongang {
label=""Moongang"";
""1059_change_max_amount"" [label=""change_max_amount""];
""1059_blacklist_addys"" [label=""blacklist_addys""];
""1059_Moongang"" [label=""Moongang""];
""1059_change_owner"" [label=""change_owner""];
""1059_buy_the_tokens"" [label=""buy_the_tokens""];
""1059_refund"" [label=""refund""];
""1059_set_bonus_received"" [label=""set_bonus_received""];
""1059_set_whitelist_enabled"" [label=""set_whitelist_enabled""];
""1059_partial_refund"" [label=""partial_refund""];
""1059_set_sale_address"" [label=""set_sale_address""];
""1059_set_token_address"" [label=""set_token_address""];
""1059_set_allow_refunds"" [label=""set_allow_refunds""];
""1059_withdraw"" [label=""withdraw""];
""1059_set_percent_reduction"" [label=""set_percent_reduction""];
""1059_whitelist_addys"" [label=""whitelist_addys""];
""1059_fallback"" [label=""fallback""];
""1059_force_partial_refund"" [label=""force_partial_refund""];
""1059_change_individual_cap"" [label=""change_individual_cap""];
""1059_force_refund"" [label=""force_refund""];
""1059_change_min_amount"" [label=""change_min_amount""];
""1059_withdraw_bonus"" [label=""withdraw_bonus""];
""1059_fallback"" -> ""1059_underMaxAmount"";
""1059_buy_the_tokens"" -> ""1059_onlyOwner"";
""1059_blacklist_addys"" -> ""1059_onlyOwner"";
""1059_set_percent_reduction"" -> ""1059_onlyOwner"";
""1059_change_max_amount"" -> ""1059_onlyOwner"";
""1059_change_individual_cap"" -> ""1059_onlyOwner"";
""1059_set_token_address"" -> ""1059_onlyOwner"";
""1059_force_partial_refund"" -> ""1059_onlyOwner"";
""1059_set_allow_refunds"" -> ""1059_onlyOwner"";
""1059_change_min_amount"" -> ""1059_onlyOwner"";
""1059_whitelist_addys"" -> ""1059_onlyOwner"";
""1059_change_owner"" -> ""1059_onlyOwner"";
""1059_set_whitelist_enabled"" -> ""1059_onlyOwner"";
""1059_buy_the_tokens"" -> ""1059_minAmountReached"";
""1059_set_bonus_received"" -> ""1059_onlyOwner"";
""1059_set_sale_address"" -> ""1059_onlyOwner"";
""1059_buy_the_tokens"" -> ""1059_underMaxAmount"";
""1059_force_refund"" -> ""1059_onlyOwner"";
}
"
0xf099c6ecb16575393b3ba6ac57b4ead943353a52.sol,BuddhaTower,"contract BuddhaTower { event onBuy ( address indexed buyerAddress, uint256 amount, uint256 currentHeight ); event onSplit( uint round, uint luckyNumber, address luckyPlayer ); event onTimeup( uint round, address lastBuyer ); event onQualifySuccess( address applier ); struct RoundData { uint256 maxHeight; uint256 lotteryPool; uint256 peakPool; uint256 tokenPot; uint[][] buyinfo; address[] buyAddress; uint256 startTime; uint256 endTime; address[] lotteryWinners; address finalWinner; }",0,"subgraph cluster_1969_BuddhaTower {
label=""BuddhaTower"";
""1969_wipeAll"" [label=""wipeAll""];
""1969_emergencyStart"" [label=""emergencyStart""];
""1969_splitLottery"" [label=""splitLottery""];
""1969_getQualified"" [label=""getQualified""];
""1969_constructor"" [label=""constructor""];
""1969_getLotteryWinner"" [label=""getLotteryWinner""];
""1969_endTime"" [label=""endTime""];
""1969_emergencyClose"" [label=""emergencyClose""];
""1969_activate"" [label=""activate""];
""1969_getLotteryWinnerLength"" [label=""getLotteryWinnerLength""];
""1969_getBuyInfoLength"" [label=""getBuyInfoLength""];
""1969_takeDevCut"" [label=""takeDevCut""];
""1969_buy"" [label=""buy""];
""1969_moveFromBanlist"" [label=""moveFromBanlist""];
""1969_getBuyAddress"" [label=""getBuyAddress""];
""1969_deposit"" [label=""deposit""];
""1969_getBuyInfo"" [label=""getBuyInfo""];
""1969_withdrawEth"" [label=""withdrawEth""];
""1969_addToBanlist"" [label=""addToBanlist""];
""1969_emergencyClose"" -> ""1969_onlyOwner"";
""1969_wipeAll"" -> ""1969_onlyOwner"";
""1969_withdrawEth"" -> ""1969_isBaned"";
""1969_deposit"" -> ""1969_buy"";
""1969_moveFromBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_endTime"";
""1969_deposit"" -> ""1969_isHuman"";
""1969_deposit"" -> ""1969_isBaned"";
""1969_emergencyStart"" -> ""1969_onlyOwner"";
""1969_deposit"" -> ""1969_isActive"";
""1969_withdrawEth"" -> ""1969_isHuman"";
""1969_constructor"" -> ""1969_activate"";
""1969_deposit"" -> ""1969_isWithinLimits"";
""1969_addToBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_splitLottery"";
""1969_activate"" -> ""1969_onlyOwner"";
""1969_takeDevCut"" -> ""1969_onlyOwner"";
}
"
0x0de197dc289d680e734ccab866d529505b2638db.sol,CryptoMiningWar,contract CryptoMiningWar is PullPayment { bool public initialized = false; uint256 public roundNumber = 0; uint256 public deadline; uint256 public CRTSTAL_MINING_PERIOD = 86400; uint256 public HALF_TIME = 8 hours; uint256 public ROUND_TIME = 86400 * 7; uint256 public prizePool = 0; uint256 BASE_PRICE = 0.005 ether; uint256 RANK_LIST_LIMIT = 10000; uint256 MINIMUM_LIMIT_SELL = 5000000; uint256 randNonce = 0; mapping(uint256 => MinerData) private minerData; uint256 private numberOfMiners; mapping(address => PlayerData) private players; uint256 private numberOfBoosts; mapping(uint256 => BoostData) private boostData; uint256 private numberOfOrders; mapping(uint256 => BuyOrderData) private buyOrderData; mapping(uint256 => SellOrderData) private sellOrderData; uint256 private numberOfRank; address[21] rankList; address public sponsor; uint256 public sponsorLevel; address public administrator; struct PlayerData { uint256 roundNumber; mapping(uint256 => uint256) minerCount; uint256 hashrate; uint256 crystals; uint256 lastUpdateTime; uint256 referral_count; uint256 noQuest; },0,"subgraph cluster_3300_CryptoMiningWar {
label=""CryptoMiningWar"";
""3300_getBalance"" [label=""getBalance""];
""3300_sellCrystal"" [label=""sellCrystal""];
""3300_updateHashrate"" [label=""updateHashrate""];
""3300_quickSort"" [label=""quickSort""];
""3300_getBuyDemand"" [label=""getBuyDemand""];
""3300_getCurrentLevel"" [label=""getCurrentLevel""];
""3300_updateRankList"" [label=""updateRankList""];
""3300_becomeSponsor"" [label=""becomeSponsor""];
""3300_startGame"" [label=""startGame""];
""3300_updateCrytal"" [label=""updateCrytal""];
""3300_getFreeMiner"" [label=""getFreeMiner""];
""3300_getRankList"" [label=""getRankList""];
""3300_getLowestUnitPriceIdxFromBuy"" [label=""getLowestUnitPriceIdxFromBuy""];
""3300_buyCrystal"" [label=""buyCrystal""];
""3300_getPlayerData"" [label=""getPlayerData""];
""3300_sellCrystalDemand"" [label=""sellCrystalDemand""];
""3300_withdrawBuyDemand"" [label=""withdrawBuyDemand""];
""3300_getSponsorFee"" [label=""getSponsorFee""];
""3300_getBoosterPrice"" [label=""getBoosterPrice""];
""3300_inRankList"" [label=""inRankList""];
""3300_addReferralHashrate"" [label=""addReferralHashrate""];
""3300_lottery"" [label=""lottery""];
""3300_devFee"" [label=""devFee""];
""3300_getHashratePerDay"" [label=""getHashratePerDay""];
""3300_getCurrentPrice"" [label=""getCurrentPrice""];
""3300_hasBooster"" [label=""hasBooster""];
""3300_doQuest"" [label=""doQuest""];
""3300_initData"" [label=""initData""];
""3300_buyMiner"" [label=""buyMiner""];
""3300_getBoosterData"" [label=""getBoosterData""];
""3300_buyCrystalDemand"" [label=""buyCrystalDemand""];
""3300_constructor"" [label=""constructor""];
""3300_getHighestUnitPriceIdxFromSell"" [label=""getHighestUnitPriceIdxFromSell""];
""3300_startNewRound"" [label=""startNewRound""];
""3300_getSellDemand"" [label=""getSellDemand""];
""3300_upgrade"" [label=""upgrade""];
""3300_getRandomNumber"" [label=""getRandomNumber""];
""3300_buyBooster"" [label=""buyBooster""];
""3300_fallback"" [label=""fallback""];
""3300_withdrawSellDemand"" [label=""withdrawSellDemand""];
""3300_withdrawBuyDemand"" -> ""3300_isNotOver"";
""3300_buyMiner"" -> ""3300_updateCrytal"";
""3300_sellCrystal"" -> ""3300_devFee"";
""3300_lottery"" -> ""3300_asyncSend"";
""3300_getPlayerData"" -> ""3300_hasBooster"";
""3300_buyBooster"" -> ""3300_isNotOver"";
""3300_sellCrystal"" -> ""3300_isCurrentRound"";
""3300_doQuest"" -> ""3300_isCurrentRound"";
""3300_buyCrystalDemand"" -> ""3300_getLowestUnitPriceIdxFromBuy"";
""3300_getHashratePerDay"" -> ""3300_addReferralHashrate"";
""3300_lottery"" -> ""3300_startNewRound"";
""3300_withdrawSellDemand"" -> ""3300_isNotOver"";
""3300_buyBooster"" -> ""3300_getCurrentLevel"";
""3300_updateRankList"" -> ""3300_quickSort"";
""3300_buyMiner"" -> ""3300_isNotOver"";
""3300_sellCrystalDemand"" -> ""3300_limitSell"";
""3300_buyCrystalDemand"" -> ""3300_asyncSend"";
""3300_startGame"" -> ""3300_startNewRound"";
""3300_sellCrystalDemand"" -> ""3300_isCurrentRound"";
""3300_becomeSponsor"" -> ""3300_getCurrentPrice"";
""3300_sellCrystal"" -> ""3300_asyncSend"";
""3300_buyMiner"" -> ""3300_isCurrentRound"";
""3300_sellCrystalDemand"" -> ""3300_isNotOver"";
""3300_getSponsorFee"" -> ""3300_getCurrentPrice"";
""3300_getBoosterData"" -> ""3300_getBoosterPrice"";
""3300_getFreeMiner"" -> ""3300_disableContract"";
""3300_getFreeMiner"" -> ""3300_isNotOver"";
""3300_getBoosterPrice"" -> ""3300_getCurrentPrice"";
""3300_buyBooster"" -> ""3300_updateCrytal"";
""3300_getHashratePerDay"" -> ""3300_hasBooster"";
""3300_getBoosterPrice"" -> ""3300_getCurrentLevel"";
""3300_withdrawBuyDemand"" -> ""3300_isCurrentRound"";
""3300_doQuest"" -> ""3300_disableContract"";
""3300_buyCrystalDemand"" -> ""3300_isNotOver"";
""3300_buyBooster"" -> ""3300_isCurrentRound"";
""3300_lottery"" -> ""3300_disableContract"";
""3300_updateRankList"" -> ""3300_inRankList"";
""3300_getPlayerData"" -> ""3300_addReferralHashrate"";
""3300_sellCrystal"" -> ""3300_isNotOver"";
""3300_buyCrystalDemand"" -> ""3300_isCurrentRound"";
""3300_withdrawSellDemand"" -> ""3300_isCurrentRound"";
""3300_buyMiner"" -> ""3300_updateHashrate"";
""3300_becomeSponsor"" -> ""3300_getSponsorFee"";
""3300_updateHashrate"" -> ""3300_updateRankList"";
""3300_quickSort"" -> ""3300_quickSort"";
""3300_buyBooster"" -> ""3300_devFee"";
""3300_buyBooster"" -> ""3300_getBoosterPrice"";
""3300_sellCrystal"" -> ""3300_updateCrytal"";
""3300_startNewRound"" -> ""3300_initData"";
""3300_doQuest"" -> ""3300_getRandomNumber"";
""3300_buyCrystal"" -> ""3300_asyncSend"";
""3300_becomeSponsor"" -> ""3300_isNotOver"";
""3300_sellCrystalDemand"" -> ""3300_getHighestUnitPriceIdxFromSell"";
""3300_sellCrystal"" -> ""3300_limitSell"";
""3300_sellCrystalDemand"" -> ""3300_updateCrytal"";
""3300_withdrawBuyDemand"" -> ""3300_asyncSend"";
""3300_updateCrytal"" -> ""3300_getHashratePerDay"";
""3300_becomeSponsor"" -> ""3300_asyncSend"";
""3300_buyCrystal"" -> ""3300_devFee"";
""3300_buyCrystal"" -> ""3300_isCurrentRound"";
""3300_buyCrystal"" -> ""3300_isNotOver"";
""3300_buyBooster"" -> ""3300_asyncSend"";
""3300_doQuest"" -> ""3300_isNotOver"";
}
"
0x6b609d9095d069c805650234ab67595b3a6ab934.sol,Crowdsale,"contract Crowdsale is ICrowdsale, Ownership { enum Stages { Deploying, Deployed, InProgress, Ended }",0,"subgraph cluster_227_IPersonalCrowdsaleProxy {
label=""IPersonalCrowdsaleProxy"";
""227_fallback"" [label=""fallback""];
}
"
0x18aaad578e74913df4255c126f2a0bd9e3399ec7.sol,test_contract,contract test_contract { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },0,"subgraph cluster_143_test_contract {
label=""test_contract"";
""143_fallback"" [label=""fallback""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_StopGame"" [label=""StopGame""];
""143_ActivateContract"" [label=""ActivateContract""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
}
"
0xa4b54870cb409682d0531c772255e1cdc648d12d.sol,GESToken,"contract GESToken is StandardToken, Ownable { string public symbol; string public name; uint256 public decimals; address public crowdsale; address public foundation; bool public sendedToCrowdsale; bool public sendedToFoundation; uint256 public crowdsalePart; uint256 public foundationPart; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 1000000000 * 10**uint256(decimals); crowdsalePart = 820000000 * 10**uint256(decimals); foundationPart = 180000000 * 10**uint256(decimals); balances[address(this)] = _totalSupply; emit Transfer(address(0), address(this), _totalSupply); }",0,"subgraph cluster_769_GESToken {
label=""GESToken"";
""769_constructor"" [label=""constructor""];
""769_sendTokensToCrowdsale"" [label=""sendTokensToCrowdsale""];
""769_setCrowdsaleAddress"" [label=""setCrowdsaleAddress""];
""769_sendTokensToFoundation"" [label=""sendTokensToFoundation""];
""769_setFoundationAddress"" [label=""setFoundationAddress""];
""769_setCrowdsaleAddress"" -> ""769_onlyOwner"";
""769_sendTokensToFoundation"" -> ""769_onlyOwner"";
""769_sendTokensToCrowdsale"" -> ""769_onlyOwner"";
""769_setFoundationAddress"" -> ""769_onlyOwner"";
}
"
0x185c5cef4b4659f025e258bf385a0b444d33077b.sol,YEYE,contract YEYE is ERC223 { using SafeMath for uint256; using SafeMath for uint; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; address[] StoreWelfareAddress; mapping (address => string) StoreWelfareDetails; address public OrganizationAddress; string internal constant _name = ; string internal constant _symbol = ; uint8 internal constant _decimals = 8; uint256 internal _totalSupply = 2000000000e8; uint256 internal StartEth = 1e16; uint256 private RandNonce; uint256 public Organization = _totalSupply.div(100).mul(5); uint256 public totalRemaining = _totalSupply; uint256 public totalDistributed = 0; uint256 public EthGet=1500000e8; uint256 public Send0GiveBase = 3000e8; bool internal EndDistr = false; bool internal EndSend0GetToken = false; bool internal EndEthGetToken = false; bool internal CanTransfer = true; bool internal EndGamGetToken = false; modifier canDistr() { require(!EndDistr); _; },0,"subgraph cluster_1790_YEYE {
label=""YEYE"";
""1790_startEthGet"" [label=""startEthGet""];
""1790_startGamGetToken"" [label=""startGamGetToken""];
""1790_changeOwner"" [label=""changeOwner""];
""1790_burn"" [label=""burn""];
""1790_recycling"" [label=""recycling""];
""1790_symbol"" [label=""symbol""];
""1790_disableWhitelist"" [label=""disableWhitelist""];
""1790_enableWhitelist"" [label=""enableWhitelist""];
""1790_lockupAccounts"" [label=""lockupAccounts""];
""1790_name"" [label=""name""];
""1790_balanceOf"" [label=""balanceOf""];
""1790_storeWelfare"" [label=""storeWelfare""];
""1790_allowance"" [label=""allowance""];
""1790_stopTransfer"" [label=""stopTransfer""];
""1790_transfer"" [label=""transfer""];
""1790_isContract"" [label=""isContract""];
""1790_stopGamGetToken"" [label=""stopGamGetToken""];
""1790_constructor"" [label=""constructor""];
""1790_autoDistribute"" [label=""autoDistribute""];
""1790_readWelfareDetails"" [label=""readWelfareDetails""];
""1790_totalSupply"" [label=""totalSupply""];
""1790_startTransfer"" [label=""startTransfer""];
""1790_distributeAmounts"" [label=""distributeAmounts""];
""1790_startFreeGet"" [label=""startFreeGet""];
""1790_finishDistribution"" [label=""finishDistribution""];
""1790_readWelfareAddress"" [label=""readWelfareAddress""];
""1790_withdraw"" [label=""withdraw""];
""1790_finishFreeGet"" [label=""finishFreeGet""];
""1790_fallback"" [label=""fallback""];
""1790_decimals"" [label=""decimals""];
""1790_startDistribution"" [label=""startDistribution""];
""1790_approve"" [label=""approve""];
""1790_transferFrom"" [label=""transferFrom""];
""1790_withdrawOtherTokens"" [label=""withdrawOtherTokens""];
""1790_changeParam"" [label=""changeParam""];
""1790_distr"" [label=""distr""];
""1790_finishEthGet"" [label=""finishEthGet""];
""1790_freezeAccounts"" [label=""freezeAccounts""];
""1790_distribution"" [label=""distribution""];
""1790_storeWelfare"" -> ""1790_onlyOwner"";
""1790_fallback"" -> ""1790_autoDistribute"";
""1790_startDistribution"" -> ""1790_onlyOwner"";
""1790_transferFrom"" -> ""1790_canTrans"";
""1790_distribution"" -> ""1790_distr"";
""1790_withdraw"" -> ""1790_onlyOwner"";
""1790_distributeAmounts"" -> ""1790_distr"";
""1790_enableWhitelist"" -> ""1790_onlyOwner"";
""1790_transferFrom"" -> ""1790_onlyWhitelist"";
""1790_transfer"" -> ""1790_onlyPayloadSize"";
""1790_distributeAmounts"" -> ""1790_onlyOwner"";
""1790_distribution"" -> ""1790_onlyOwner"";
""1790_startFreeGet"" -> ""1790_canDistr"";
""1790_startEthGet"" -> ""1790_onlyOwner"";
""1790_startEthGet"" -> ""1790_canDistr"";
""1790_freezeAccounts"" -> ""1790_onlyOwner"";
""1790_autoDistribute"" -> ""1790_distr"";
""1790_distributeAmounts"" -> ""1790_canDistr"";
""1790_transfer"" -> ""1790_onlyWhitelist"";
""1790_burn"" -> ""1790_onlyOwner"";
""1790_autoDistribute"" -> ""1790_isContract"";
""1790_stopGamGetToken"" -> ""1790_onlyOwner"";
""1790_autoDistribute"" -> ""1790_onlyWhitelist"";
""1790_startGamGetToken"" -> ""1790_onlyOwner"";
""1790_distr"" -> ""1790_canDistr"";
""1790_finishFreeGet"" -> ""1790_onlyOwner"";
""1790_lockupAccounts"" -> ""1790_onlyOwner"";
""1790_finishEthGet"" -> ""1790_canDistr"";
""1790_withdrawOtherTokens"" -> ""1790_onlyOwner"";
""1790_startTransfer"" -> ""1790_onlyOwner"";
""1790_autoDistribute"" -> ""1790_canDistr"";
""1790_changeParam"" -> ""1790_onlyOwner"";
""1790_finishFreeGet"" -> ""1790_canDistr"";
""1790_constructor"" -> ""1790_distr"";
""1790_startFreeGet"" -> ""1790_onlyOwner"";
""1790_recycling"" -> ""1790_onlyOwner"";
""1790_distribution"" -> ""1790_canDistr"";
""1790_transfer"" -> ""1790_canTrans"";
""1790_changeOwner"" -> ""1790_onlyOwner"";
""1790_stopTransfer"" -> ""1790_onlyOwner"";
""1790_finishDistribution"" -> ""1790_canDistr"";
""1790_finishDistribution"" -> ""1790_onlyOwner"";
""1790_finishEthGet"" -> ""1790_onlyOwner"";
""1790_disableWhitelist"" -> ""1790_onlyOwner"";
}
"
0x17a49a2f36655270d8ee7cb40e695796f47a6a59.sol,CryptoMarketShortCoin,"contract CryptoMarketShortCoin is Owned { using SafeMath for uint256; string public name = ; string public symbol = ; string public version = ; uint8 public decimals = 18; uint256 public decimalsFactor = 10 ** 18; uint256 public totalSupply; uint256 public marketCap; uint256 public buyFactor = 12500; uint256 public buyFactorPromotion = 15000; uint8 public promotionsAvailable = 50; bool public buyAllowed = true; mapping(address => uint256) public balanceOf; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Mint(address indexed to, uint256 amount); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); function CryptoMarketShortCoin(uint256 initialMarketCap) { totalSupply = 100000000000000000000000000; marketCap = initialMarketCap; balanceOf[msg.sender] = 20000000000000000000000000; balanceOf[this] = 80000000000000000000000000; allowance[this][owner] = totalSupply; }",0,"subgraph cluster_1364_CryptoMarketShortCoin {
label=""CryptoMarketShortCoin"";
""1364_updateBuyStatus"" [label=""updateBuyStatus""];
""1364__transfer"" [label=""_transfer""];
""1364_allowanceOf"" [label=""allowanceOf""];
""1364_approve"" [label=""approve""];
""1364_transferFrom"" [label=""transferFrom""];
""1364_approveAndCall"" [label=""approveAndCall""];
""1364_updateBetRules"" [label=""updateBetRules""];
""1364_burnFrom"" [label=""burnFrom""];
""1364_burn"" [label=""burn""];
""1364_updateMarketCap"" [label=""updateMarketCap""];
""1364_calcAmount"" [label=""calcAmount""];
""1364_mint"" [label=""mint""];
""1364_totalSupply"" [label=""totalSupply""];
""1364_CryptoMarketShortCoin"" [label=""CryptoMarketShortCoin""];
""1364_createBet"" [label=""createBet""];
""1364_finalizeBet"" [label=""finalizeBet""];
""1364_balanceOf"" [label=""balanceOf""];
""1364_wd"" [label=""wd""];
""1364_getBet"" [label=""getBet""];
""1364_transfer"" [label=""transfer""];
""1364_circulatingSupply"" [label=""circulatingSupply""];
""1364_fallback"" [label=""fallback""];
""1364_updateBet"" [label=""updateBet""];
""1364_updateMarketCap"" -> ""1364_burnFrom"";
""1364_transfer"" -> ""1364__transfer"";
""1364_transferFrom"" -> ""1364__transfer"";
""1364_updateBuyStatus"" -> ""1364_onlyOwner"";
""1364_updateMarketCap"" -> ""1364_onlyOwnerOrSupporter"";
""1364_updateMarketCap"" -> ""1364_mint"";
""1364_updateBetRules"" -> ""1364_onlyOwner"";
""1364_mint"" -> ""1364_onlyOwner"";
""1364_createBet"" -> ""1364__transfer"";
""1364_finalizeBet"" -> ""1364__transfer"";
""1364_approveAndCall"" -> ""1364_approve"";
""1364_wd"" -> ""1364_onlyOwner"";
""1364_updateBet"" -> ""1364_onlyOwnerOrSupporter"";
""1364_finalizeBet"" -> ""1364_onlyOwnerOrSupporter"";
""1364_fallback"" -> ""1364_calcAmount"";
}
"
0xcde881f8b37b41577c65a3904579fff6bb94f3c8.sol,EthKing,"contract EthKing { using SafeMath for uint256; event NewRound( uint _timestamp, uint _round, uint _initialMainPot, uint _initialBonusPot ); event NewKingBid( uint _timestamp, address _address, uint _amount, uint _newMainPot, uint _newBonusPot ); event PlaceChange( uint _timestamp, address _newFirst, address _newSecond, uint _firstPoints, uint _secondPoints ); event Winner( uint _timestamp, address _first, uint _firstAmount, address _second, uint _secondAmount ); event EarningsWithdrawal( uint _timestamp, address _address, uint _amount ); address owner; uint private constant NEXT_POT_FRAC_TOP = 1; uint private constant NEXT_POT_FRAC_BOT = 2; uint private constant MIN_LEADER_FRAC_TOP = 5; uint private constant MIN_LEADER_FRAC_BOT = 1000; uint private constant BONUS_POT_FRAC_TOP = 20; uint private constant BONUS_POT_FRAC_BOT = 100; uint private constant DEV_FEE_FRAC_TOP = 5; uint private constant DEV_FEE_FRAC_BOT = 100; uint private constant POINT_EXPONENT = 2; uint private constant POINTS_TO_WIN = 1000000; address null_address = address(0x0); address public king; uint public crownedTime; address public first; address public second; struct Player { uint points; uint roundLastPlayed; uint winnings; }",0,"subgraph cluster_821_EthKing {
label=""EthKing"";
""821_EthKing"" [label=""EthKing""];
""821_withdrawEarnings"" [label=""withdrawEarnings""];
""821_fallback"" [label=""fallback""];
""821_getPlayerInfo"" [label=""getPlayerInfo""];
""821_tryAdvance"" [label=""tryAdvance""];
""821_getKingPoints"" [label=""getKingPoints""];
""821_becomeKing"" [label=""becomeKing""];
""821_forceAdvance"" [label=""forceAdvance""];
""821_getSecondPoints"" [label=""getSecondPoints""];
""821_calculatePoints"" [label=""calculatePoints""];
""821_getFirstPoints"" [label=""getFirstPoints""];
""821_getMyInfo"" [label=""getMyInfo""];
""821_getMyInfo"" -> ""821_getPlayerInfo"";
""821_tryAdvance"" -> ""821_forceAdvance"";
""821_forceAdvance"" -> ""821_advanceRoundIfNeeded"";
""821_forceAdvance"" -> ""821_payoutOldKingPoints"";
""821_tryAdvance"" -> ""821_calculatePoints"";
""821_fallback"" -> ""821_becomeKing"";
""821_becomeKing"" -> ""821_advanceRoundIfNeeded"";
""821_becomeKing"" -> ""821_payoutOldKingPoints"";
""821_fallback"" -> ""821_tryAdvance"";
}
"
0x33714a8203aafcdba86682406dd599e94f9c2e6e.sol,StandardToken,"contract StandardToken is ERC20, BasicToken { mapping (address => mapping (address => uint256)) internal allowed; function transferFrom(address _from, address _to, uint256 _value) transfersEnabled onlyUnLock public returns (bool) { require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); emit Transfer(_from, _to, _value); return true; }",0,"subgraph cluster_647_StandardToken {
label=""StandardToken"";
""647_decreaseApproval"" [label=""decreaseApproval""];
""647_allowance"" [label=""allowance""];
""647_increaseApproval"" [label=""increaseApproval""];
""647_transferFrom"" [label=""transferFrom""];
""647_approve"" [label=""approve""];
""647_increaseApproval"" -> ""647_onlyUnLock"";
""647_approve"" -> ""647_onlyUnLock"";
""647_approve"" -> ""647_transfersEnabled"";
""647_increaseApproval"" -> ""647_transfersEnabled"";
""647_decreaseApproval"" -> ""647_onlyUnLock"";
""647_transferFrom"" -> ""647_onlyUnLock"";
""647_decreaseApproval"" -> ""647_transfersEnabled"";
""647_transferFrom"" -> ""647_transfersEnabled"";
}
"
0xdcaad9fd9a74144d226dbf94ce6162ca9f09ed7e.sol,StrikersMinting,"contract StrikersMinting is StrikersBase, Pausable { event PulledFromCirculation(uint8 checklistId); mapping (uint8 => bool) public outOfCirculation; address public packSaleAddress; function setPackSaleAddress(address _address) external onlyOwner { packSaleAddress = _address; }",0,"subgraph cluster_3355_StrikersMinting {
label=""StrikersMinting"";
""3355_pullFromCirculation"" [label=""pullFromCirculation""];
""3355_mintPackSaleCard"" [label=""mintPackSaleCard""];
""3355_mintUnreleasedCard"" [label=""mintUnreleasedCard""];
""3355_setPackSaleAddress"" [label=""setPackSaleAddress""];
""3355_mintUnreleasedCard"" -> ""3355_onlyOwner"";
""3355_mintUnreleasedCard"" -> ""3355__mintCard"";
""3355_setPackSaleAddress"" -> ""3355_onlyOwner"";
""3355_mintPackSaleCard"" -> ""3355__mintCard"";
}
"
0x888888ecb41d5abb38bdd9c5e2f653f411c70765.sol,Lottery,"contract Lottery { using SafeMath for uint256; modifier withdrawRight(){ require(msg.sender == address(bankContract), ); _; }",0,"subgraph cluster_3390_Lottery {
label=""Lottery"";
""3390_jackpot"" [label=""jackpot""];
""3390_getPMul"" [label=""getPMul""];
""3390_addTime"" [label=""addTime""];
""3390_constructor"" [label=""constructor""];
""3390_getWeightRange"" [label=""getWeightRange""];
""3390_isWinSlot"" [label=""isWinSlot""];
""3390_getSlideEndTime"" [label=""getSlideEndTime""];
""3390_getSeed"" [label=""getSeed""];
""3390_isLastRound"" [label=""isLastRound""];
""3390_finalize"" [label=""finalize""];
""3390_distributeSlotBuy"" [label=""distributeSlotBuy""];
""3390_getEstKeyBlockNr"" [label=""getEstKeyBlockNr""];
""3390_getPSlotLength"" [label=""getPSlotLength""];
""3390_getKeyBlockNr"" [label=""getKeyBlockNr""];
""3390_getSlotLength"" [label=""getSlotLength""];
""3390_getCurEarlyIncomeByAddress"" [label=""getCurEarlyIncomeByAddress""];
""3390_getEarlyIncomeByAddressRound"" [label=""getEarlyIncomeByAddressRound""];
""3390_mintReward"" [label=""mintReward""];
""3390_getSlotInfo"" [label=""getSlotInfo""];
""3390_claimEarlyIncomebyAddressRound"" [label=""claimEarlyIncomebyAddressRound""];
""3390_initRound"" [label=""initRound""];
""3390_getTMul"" [label=""getTMul""];
""3390_getTotalPot"" [label=""getTotalPot""];
""3390_claimEarlyIncomebyAddress"" [label=""claimEarlyIncomebyAddress""];
""3390_getTicketSumToRound"" [label=""getTicketSumToRound""];
""3390_pushToPot"" [label=""pushToPot""];
""3390_mintSlot"" [label=""mintSlot""];
""3390_genEstKeyBlockNr"" [label=""genEstKeyBlockNr""];
""3390_getCurRoundId"" [label=""getCurRoundId""];
""3390_buyFor"" [label=""buyFor""];
""3390_getSlotId"" [label=""getSlotId""];
""3390_getInvestedSumToRound"" [label=""getInvestedSumToRound""];
""3390_sBountyClaim"" [label=""sBountyClaim""];
""3390_getPTicketSumByRound"" [label=""getPTicketSumByRound""];
""3390_updateInvested"" [label=""updateInvested""];
""3390_getEarlyIncomeByAddress"" [label=""getEarlyIncomeByAddress""];
""3390_getTPrice"" [label=""getTPrice""];
""3390_getPInvestedSumByRound"" [label=""getPInvestedSumByRound""];
""3390_getFixedEndTime"" [label=""getFixedEndTime""];
""3390_addPot"" [label=""addPot""];
""3390_getWinSlot"" [label=""getWinSlot""];
""3390_endRound"" [label=""endRound""];
""3390_activeFirstRound"" [label=""activeFirstRound""];
""3390_cashoutable"" [label=""cashoutable""];
""3390_goNext"" [label=""goNext""];
""3390_getBonusTickets"" [label=""getBonusTickets""];
""3390_finalizeable"" [label=""finalizeable""];
""3390_checkpoint"" [label=""checkpoint""];
""3390_updateTicketSum"" [label=""updateTicketSum""];
""3390_buy"" [label=""buy""];
""3390_withdrawFor"" [label=""withdrawFor""];
""3390_updateEarlyIncome"" [label=""updateEarlyIncome""];
""3390_getCurEarlyIncomeByAddressRound"" [label=""getCurEarlyIncomeByAddressRound""];
""3390_joinNetwork"" [label=""joinNetwork""];
""3390_getRewardBalance"" [label=""getRewardBalance""];
""3390_setLastRound"" [label=""setLastRound""];
""3390_updateMulti"" [label=""updateMulti""];
""3390_checkpoint"" -> ""3390_genEstKeyBlockNr"";
""3390_mintSlot"" -> ""3390_updateTicketSum"";
""3390_sBountyClaim"" -> ""3390_mintSlot"";
""3390_finalize"" -> ""3390_finalizeable"";
""3390_finalize"" -> ""3390_endRound"";
""3390_endRound"" -> ""3390_getKeyBlockNr"";
""3390_endRound"" -> ""3390_getWinSlot"";
""3390_buyFor"" -> ""3390_distributeSlotBuy"";
""3390_getWinSlot"" -> ""3390_isWinSlot"";
""3390_activeFirstRound"" -> ""3390_onlyDevTeam"";
""3390_initRound"" -> ""3390_isLastRound"";
""3390_initRound"" -> ""3390_checkpoint"";
""3390_initRound"" -> ""3390_goNext"";
""3390_buyFor"" -> ""3390_addTime"";
""3390_claimEarlyIncomebyAddress"" -> ""3390_claimEarlyIncomebyAddressRound"";
""3390_sBountyClaim"" -> ""3390_notStarted"";
""3390_endRound"" -> ""3390_getSeed"";
""3390_getEarlyIncomeByAddress"" -> ""3390_getEarlyIncomeByAddressRound"";
""3390_distributeSlotBuy"" -> ""3390_addPot"";
""3390_jackpot"" -> ""3390_getSeed"";
""3390_buyFor"" -> ""3390_genEstKeyBlockNr"";
""3390_jackpot"" -> ""3390_mintReward"";
""3390_endRound"" -> ""3390_mintReward"";
""3390_buyFor"" -> ""3390_updateMulti"";
""3390_claimEarlyIncomebyAddressRound"" -> ""3390_getCurEarlyIncomeByAddressRound"";
""3390_setLastRound"" -> ""3390_onlyDevTeam"";
""3390_activeFirstRound"" -> ""3390_initRound"";
""3390_finalize"" -> ""3390_mintSlot"";
""3390_getCurEarlyIncomeByAddressRound"" -> ""3390_getEarlyIncomeByAddressRound"";
""3390_buyFor"" -> ""3390_updateEarlyIncome"";
""3390_buyFor"" -> ""3390_buyable"";
""3390_buyFor"" -> ""3390_getBonusTickets"";
""3390_buy"" -> ""3390_buyFor"";
""3390_initRound"" -> ""3390_updateMulti"";
""3390_buyFor"" -> ""3390_updateInvested"";
""3390_withdrawFor"" -> ""3390_withdrawRight"";
""3390_withdrawFor"" -> ""3390_claimEarlyIncomebyAddress"";
""3390_finalize"" -> ""3390_initRound"";
""3390_activeFirstRound"" -> ""3390_getWeightRange"";
""3390_cashoutable"" -> ""3390_getPTicketSumByRound"";
""3390_getCurEarlyIncomeByAddress"" -> ""3390_getCurEarlyIncomeByAddressRound"";
""3390_buyFor"" -> ""3390_jackpot"";
""3390_finalizeable"" -> ""3390_getEstKeyBlockNr"";
""3390_jackpot"" -> ""3390_getKeyBlockNr"";
""3390_pushToPot"" -> ""3390_addPot"";
""3390_buyFor"" -> ""3390_mintSlot"";
""3390_buyFor"" -> ""3390_getTMul"";
}
"
0xeb6ce9be3591d95c2bb5ce793ee2b9c58322bb9e.sol,PRASMToken,"contract PRASMToken is ERC20, Ownable, Pausable { uint128 internal MONTH = 30 * 24 * 3600; using SafeMath for uint256; struct LockupInfo { uint256 releaseTime; uint256 unlockAmountPerMonth; uint256 lockupBalance; }",0,"subgraph cluster_1132_PRASMToken {
label=""PRASMToken"";
""1132_transfer"" [label=""transfer""];
""1132_distributeWithLockup"" [label=""distributeWithLockup""];
""1132_balanceOf"" [label=""balanceOf""];
""1132_approve"" [label=""approve""];
""1132_distribute"" [label=""distribute""];
""1132_claimToken"" [label=""claimToken""];
""1132_constructor"" [label=""constructor""];
""1132_transferFrom"" [label=""transferFrom""];
""1132_lock"" [label=""lock""];
""1132_releaseTimeLock"" [label=""releaseTimeLock""];
""1132_allowance"" [label=""allowance""];
""1132_unlock"" [label=""unlock""];
""1132_isContract"" [label=""isContract""];
""1132_getNowTime"" [label=""getNowTime""];
""1132_autoUnlock"" [label=""autoUnlock""];
""1132_approveAndCall"" [label=""approveAndCall""];
""1132_fallback"" [label=""fallback""];
""1132_totalSupply"" [label=""totalSupply""];
""1132_showLockState"" [label=""showLockState""];
""1132_claimToken"" -> ""1132_onlyOwner"";
""1132_transferFrom"" -> ""1132_autoUnlock"";
""1132_transferFrom"" -> ""1132_whenNotPaused"";
""1132_approveAndCall"" -> ""1132_isContract"";
""1132_approve"" -> ""1132_whenNotPaused"";
""1132_distributeWithLockup"" -> ""1132_distribute"";
""1132_distributeWithLockup"" -> ""1132_onlyOwner"";
""1132_transfer"" -> ""1132_whenNotPaused"";
""1132_unlock"" -> ""1132_onlyOwner"";
""1132_approveAndCall"" -> ""1132_approve"";
""1132_distributeWithLockup"" -> ""1132_lock"";
""1132_transfer"" -> ""1132_autoUnlock"";
""1132_autoUnlock"" -> ""1132_releaseTimeLock"";
""1132_lock"" -> ""1132_onlyOwner"";
""1132_distribute"" -> ""1132_onlyOwner"";
}
"
0x54c548703c6f423cf7ed22806b608d332fcebb3b.sol,StarbaseCrowdsale,"contract StarbaseCrowdsale is Ownable { using SafeMath for uint256; event CrowdsaleEnded(uint256 endedAt); event StarbasePurchasedWithEth(address purchaser, uint256 amount, uint256 rawAmount, uint256 cnyEthRate); event CnyEthRateUpdated(uint256 cnyEthRate); event CnyBtcRateUpdated(uint256 cnyBtcRate); event QualifiedPartnerAddress(address qualifiedPartner); AbstractStarbaseToken public starbaseToken; StarbaseEarlyPurchaseAmendment public starbaseEpAmendment; Certifier public picopsCertifier; uint256 constant public crowdsaleTokenAmount = 125000000e18; uint256 constant public earlyPurchaseTokenAmount = 50000000e18; uint256 constant public MIN_INVESTMENT = 1; uint256 constant public MAX_CAP = 67000000; string public constant PURCHASE_AMOUNT_UNIT = ; struct CrowdsalePurchase { address purchaser; uint256 amount; uint256 rawAmount; uint256 purchasedAt; }",0,"subgraph cluster_3617_StarbaseCrowdsaleContractW {
label=""StarbaseCrowdsaleContractW"";
""3617_loadCrowdsalePurchases"" [label=""loadCrowdsalePurchases""];
""3617_fallback"" [label=""fallback""];
""3617_addEarlyPurchases"" [label=""addEarlyPurchases""];
""3617_totalRaisedAmountInCny"" [label=""totalRaisedAmountInCny""];
""3617_setup"" [label=""setup""];
""3617_isEnded"" [label=""isEnded""];
""3617_calculateBonus"" [label=""calculateBonus""];
""3617_calculateBonusInRange"" [label=""calculateBonusInRange""];
""3617_withdrawPurchasedTokens"" [label=""withdrawPurchasedTokens""];
""3617_loadCrowdsalePurchases"" -> ""3617_calculateBonus"";
""3617_calculateBonus"" -> ""3617_calculateBonusInRange"";
""3617_addEarlyPurchases"" -> ""3617_onlyOwner"";
""3617_withdrawPurchasedTokens"" -> ""3617_whenEnded"";
""3617_loadCrowdsalePurchases"" -> ""3617_whenEnded"";
""3617_withdrawPurchasedTokens"" -> ""3617_totalRaisedAmountInCny"";
""3617_setup"" -> ""3617_onlyOwner"";
""3617_loadCrowdsalePurchases"" -> ""3617_onlyOwner"";
}
"
0x50f0557ae11d55829949bf7af8cd9f69b80a56eb.sol,PoolBLock,"contract PoolBLock is PoolAllocations { uint256 public constant totalAmount = 911567810300063801255851777; function PoolBLock(ERC20Basic _token) PoolAllocations(_token) { maxNumOfPayoutCycles = 5; startDay = now; cyclesStartFrom = 1; payoutCycleInDays = 180 days; allocations[0x2f09079059b85c11DdA29ed62FF26F99b7469950] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0); allocations[0x3634acA3cf97dCC40584dB02d53E290b5b4b65FA] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0); allocations[0x768D9F044b9c8350b041897f08cA77AE871AeF1C] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0); allocations[0xb96De72d3fee8c7B6c096Ddeab93bf0b3De848c4] = createAllocationEntry(182313562060012760251170355, 0, 36462712412002552050234071, 0); allocations[0x2f97bfD7a479857a9028339Ce2426Fc3C62D96Bd] = createAllocationEntry(182313562060012760251170357, 0, 36462712412002552050234071, 2); }",0,"subgraph cluster_277_PoolBLock {
label=""PoolBLock"";
""277_PoolBLock"" [label=""PoolBLock""];
""277_PoolBLock"" -> ""277_createAllocationEntry"";
""277_PoolBLock"" -> ""277_PoolAllocations"";
}
"
0x20e2bf0fc47e65a3caa5e8e17c5cd730cc556db9.sol,onlyOwner,contract onlyOwner { address public owner; bool private stopped = false; constructor() public { owner = msg.sender; },0,"subgraph cluster_66_onlyOwner {
label=""onlyOwner"";
""66_stop"" [label=""stop""];
""66_start"" [label=""start""];
""66_constructor"" [label=""constructor""];
""66_start"" -> ""66_isOwner"";
""66_stop"" -> ""66_isOwner"";
}
"
0x71be4a37ef6423c4dc0530410454d85da3d73d64.sol,MiddleClass,contract MiddleClass is StandardToken { function () { throw; },0,"subgraph cluster_349_MiddleClass {
label=""MiddleClass"";
""349_approveAndCall"" [label=""approveAndCall""];
""349_fallback"" [label=""fallback""];
""349_MiddleClass"" [label=""MiddleClass""];
}
"
0x46cefba4dd7512b2449e1ac4b730bfb7f77d1407.sol,DecentralizedExchangeHotPotato,contract DecentralizedExchangeHotPotato { address private owner; mapping (address => bool) private admins; struct Order { address creator; address owner; address issuer; uint256 tokenId; uint256 price; uint256 startTime; uint256 endTime; },0,"subgraph cluster_515_DecentralizedExchangeHotPotato {
label=""DecentralizedExchangeHotPotato"";
""515_put"" [label=""put""];
""515_isContract"" [label=""isContract""];
""515_totalOrder"" [label=""totalOrder""];
""515_allOf"" [label=""allOf""];
""515_withdrawAmount"" [label=""withdrawAmount""];
""515_DecentralizedExchangeHotPotato"" [label=""DecentralizedExchangeHotPotato""];
""515_withdrawAll"" [label=""withdrawAll""];
""515_removeAdmin"" [label=""removeAdmin""];
""515_revoke"" [label=""revoke""];
""515_getNextPrice"" [label=""getNextPrice""];
""515_addAdmin"" [label=""addAdmin""];
""515_buy"" [label=""buy""];
""515_isAdmin"" [label=""isAdmin""];
""515_name"" [label=""name""];
""515_setOwner"" [label=""setOwner""];
""515_removeAdmin"" -> ""515_onlyOwner"";
""515_withdrawAmount"" -> ""515_onlyAdmins"";
""515_setOwner"" -> ""515_onlyOwner"";
""515_buy"" -> ""515_isContract"";
""515_withdrawAll"" -> ""515_onlyAdmins"";
""515_buy"" -> ""515_getNextPrice"";
""515_addAdmin"" -> ""515_onlyOwner"";
}
"
0x6cee948c9d593c58cba5dfa70482444899d1341c.sol,SpectreSubscriberToken,"contract SpectreSubscriberToken is StandardToken, Pausable, TokenController { using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; uint256 constant public TOKENS_AVAILABLE = 240000000 * 10**decimals; uint256 constant public BONUS_SLAB = 100000000 * 10**decimals; uint256 constant public MIN_CAP = 5000000 * 10**decimals; uint256 constant public MIN_FUND_AMOUNT = 1 ether; uint256 constant public TOKEN_PRICE = 0.0005 ether; uint256 constant public WHITELIST_PERIOD = 3 days; address public specWallet; address public specDWallet; address public specUWallet; bool public refundable = false; bool public configured = false; bool public tokenAddressesSet = false; uint256 public presaleStart; uint256 public presaleEnd; uint256 public saleStart; uint256 public saleEnd; uint256 public discountSaleEnd; mapping(address => uint256) public whitelist; uint256 constant D160 = 0x0010000000000000000000000000000000000000000; mapping(address => uint256) public bonus; event Refund(address indexed _to, uint256 _value); event ContractFunded(address indexed _from, uint256 _value, uint256 _total); event Refundable(); event WhiteListSet(address indexed _subscriber, uint256 _value); event OwnerTransfer(address indexed _from, address indexed _to, uint256 _value); modifier isRefundable() { require(refundable); _; }",0,"subgraph cluster_1890_SpectreSubscriberToken {
label=""SpectreSubscriberToken"";
""1890_setTokenAddresses"" [label=""setTokenAddresses""];
""1890_transferFrom"" [label=""transferFrom""];
""1890_configure"" [label=""configure""];
""1890_unpause"" [label=""unpause""];
""1890_purchase"" [label=""purchase""];
""1890_onTransfer"" [label=""onTransfer""];
""1890_withdrawEther"" [label=""withdrawEther""];
""1890_setWhiteList"" [label=""setWhiteList""];
""1890_getNow"" [label=""getNow""];
""1890_multiSetWhiteList"" [label=""multiSetWhiteList""];
""1890_setRefundable"" [label=""setRefundable""];
""1890_transfer"" [label=""transfer""];
""1890_onApprove"" [label=""onApprove""];
""1890_numberOfTokensLeft"" [label=""numberOfTokensLeft""];
""1890_purchasePresale"" [label=""purchasePresale""];
""1890_proxyPayment"" [label=""proxyPayment""];
""1890_transferToContract"" [label=""transferToContract""];
""1890_refund"" [label=""refund""];
""1890_fallback"" [label=""fallback""];
""1890_isContract"" [label=""isContract""];
""1890_fundContract"" [label=""fundContract""];
""1890_SpectreSubscriberToken"" [label=""SpectreSubscriberToken""];
""1890_purchasePresale"" -> ""1890_getNow"";
""1890_transferFrom"" -> ""1890_transferToContract"";
""1890_setRefundable"" -> ""1890_onlyOwner"";
""1890_transfer"" -> ""1890_isTransferable"";
""1890_fallback"" -> ""1890_getNow"";
""1890_unpause"" -> ""1890_whenPaused"";
""1890_purchase"" -> ""1890_getNow"";
""1890_setWhiteList"" -> ""1890_onlyOwner"";
""1890_configure"" -> ""1890_onlyOwner"";
""1890_multiSetWhiteList"" -> ""1890_setWhiteList"";
""1890_fallback"" -> ""1890_purchasePresale"";
""1890_transfer"" -> ""1890_isContract"";
""1890_setTokenAddresses"" -> ""1890_onlyOwner"";
""1890_setTokenAddresses"" -> ""1890_unpause"";
""1890_withdrawEther"" -> ""1890_isNotRefundable"";
""1890_transferFrom"" -> ""1890_isContract"";
""1890_transferToContract"" -> ""1890_balanceOf"";
""1890_withdrawEther"" -> ""1890_onlyOwner"";
""1890_SpectreSubscriberToken"" -> ""1890_pause"";
""1890_transferFrom"" -> ""1890_getNow"";
""1890_setTokenAddresses"" -> ""1890_isContract"";
""1890_fallback"" -> ""1890_purchase"";
""1890_configure"" -> ""1890_getNow"";
""1890_multiSetWhiteList"" -> ""1890_onlyOwner"";
""1890_transferFrom"" -> ""1890_isTransferable"";
""1890_transfer"" -> ""1890_transferToContract"";
""1890_fundContract"" -> ""1890_onlyWalletOrOwner"";
""1890_unpause"" -> ""1890_onlyOwner"";
""1890_refund"" -> ""1890_isRefundable"";
""1890_configure"" -> ""1890_unpause"";
""1890_fallback"" -> ""1890_whenNotPaused"";
""1890_setRefundable"" -> ""1890_getNow"";
}
"
0xe120c1ecbfdfea7f0a8f0ee30063491e8c26fedf.sol,SuretlyToken,"contract SuretlyToken { string public constant standard = ; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 8; uint256 public totalSupply = 237614 * 100000000; address public owner; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed _from, address indexed _to, uint256 _value); event NewOwner(address _newOwner); event Burn(address indexed _from, uint256 _value); function SuretlyToken() { owner = msg.sender; balanceOf[owner] = totalSupply; }",0,"subgraph cluster_405_SuretlyToken {
label=""SuretlyToken"";
""405_SuretlyToken"" [label=""SuretlyToken""];
""405_burn"" [label=""burn""];
""405_replaceOwner"" [label=""replaceOwner""];
""405_approveAndCall"" [label=""approveAndCall""];
""405_transferFrom"" [label=""transferFrom""];
""405_transfer"" [label=""transfer""];
""405_burnFrom"" [label=""burnFrom""];
""405_approve"" [label=""approve""];
""405_approveAndCall"" -> ""405_approve"";
}
"
0x180e35f768eb870962d2dc04cca1a927d206a089.sol,LuckySeven,"contract LuckySeven { using SafeMath for uint256; mapping(address => uint256) investments; mapping(address => uint256) joined; mapping(address => uint256) withdrawals; mapping(address => uint256) referrer; uint256 public step = 7; uint256 public minimum = 10 finney; uint256 public stakingRequirement = 0.5 ether; address public charityWallet = 0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc; address public ownerWallet; address public owner; bool public gameStarted; event Invest(address investor, uint256 amount); event Withdraw(address investor, uint256 amount); event Bounty(address hunter, uint256 amount); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() public { owner = msg.sender; ownerWallet = msg.sender; }",0,"subgraph cluster_478_LuckySeven {
label=""LuckySeven"";
""478_startGame"" [label=""startGame""];
""478_checkInvestments"" [label=""checkInvestments""];
""478_withdraw"" [label=""withdraw""];
""478_transferOwnership"" [label=""transferOwnership""];
""478_getBalance"" [label=""getBalance""];
""478_fallback"" [label=""fallback""];
""478_constructor"" [label=""constructor""];
""478_buy"" [label=""buy""];
""478_checkReferral"" [label=""checkReferral""];
""478_checkWithdrawals"" [label=""checkWithdrawals""];
""478_checkBalance"" [label=""checkBalance""];
""478_bounty"" [label=""bounty""];
""478_transferOwnership"" -> ""478_onlyOwner"";
""478_withdraw"" -> ""478_getBalance"";
""478_bounty"" -> ""478_checkReferral"";
""478_startGame"" -> ""478_onlyOwner"";
""478_checkBalance"" -> ""478_getBalance"";
""478_fallback"" -> ""478_buy"";
""478_buy"" -> ""478_withdraw"";
}
"
0x57d8b41c0f22c39ba2934cfb038f4460904e3fda.sol,TokenERC20,"contract TokenERC20 { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000000 * (10 ** 18); mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( ) public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_380_TokenERC20 {
label=""TokenERC20"";
""380_burnFrom"" [label=""burnFrom""];
""380_burn"" [label=""burn""];
""380_approve"" [label=""approve""];
""380_TokenERC20"" [label=""TokenERC20""];
""380_approveAndCall"" [label=""approveAndCall""];
""380__transfer"" [label=""_transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_transfer"" [label=""transfer""];
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0xc0adf1ccc703a0a3393892600883a1a91a4e38de.sol,EthereumLottery,contract EthereumLottery { uint constant INACTIVITY_TIMEOUT = 2 weeks; uint constant GAS_LIMIT = 300000; struct Lottery { uint jackpot; int decidingBlock; uint numTickets; uint numTicketsSold; uint ticketPrice; uint cutoffTimestamp; int winningTicket; address winner; uint finalizationBlock; address finalizer; string message; mapping (uint => address) tickets; int nearestKnownBlock; int nearestKnownBlockHash; },0,"subgraph cluster_1290_EthereumLottery {
label=""EthereumLottery"";
""1290_getTicketOwner"" [label=""getTicketOwner""];
""1290_initLottery"" [label=""initLottery""];
""1290_proposeOwner"" [label=""proposeOwner""];
""1290_destruct"" [label=""destruct""];
""1290_getLotteryDetailsA"" [label=""getLotteryDetailsA""];
""1290_buyTickets"" [label=""buyTickets""];
""1290_finalizeLottery"" [label=""finalizeLottery""];
""1290_getMessageLength"" [label=""getMessageLength""];
""1290_getRecentActivity"" [label=""getRecentActivity""];
""1290_needsFinalization"" [label=""needsFinalization""];
""1290_EthereumLottery"" [label=""EthereumLottery""];
""1290_getLotteryDetailsB"" [label=""getLotteryDetailsB""];
""1290_acceptOwnership"" [label=""acceptOwnership""];
""1290_getTicketDetails"" [label=""getTicketDetails""];
""1290_setAdmin"" [label=""setAdmin""];
""1290_walkTowardsBlock"" [label=""walkTowardsBlock""];
""1290_setMessage"" [label=""setMessage""];
""1290_needsInitialization"" [label=""needsInitialization""];
""1290_finalizeLottery"" -> ""1290_needsFinalization"";
""1290_setAdmin"" -> ""1290_onlyOwner"";
""1290_needsFinalization"" -> ""1290_afterInitialization"";
""1290_initLottery"" -> ""1290_needsInitialization"";
""1290_finalizeLottery"" -> ""1290_walkTowardsBlock"";
""1290_destruct"" -> ""1290_onlyOwner"";
""1290_proposeOwner"" -> ""1290_onlyOwner"";
""1290_setMessage"" -> ""1290_afterInitialization"";
""1290_initLottery"" -> ""1290_onlyAdminOrOwner"";
""1290_setMessage"" -> ""1290_getMessageLength"";
""1290_finalizeLottery"" -> ""1290_afterInitialization"";
""1290_buyTickets"" -> ""1290_afterInitialization"";
}
"
0x0e1b60780fec3591495de55f080bcce3cac5f5e3.sol,CustomToken,"contract CustomToken is BaseToken { function CustomToken() public { totalSupply = 680000000000000000000000000; name = ; symbol = ; decimals = 18; balanceOf[0x22C64f07036C56fCE15372610816AE22a8731296] = totalSupply; Transfer(address(0), 0x22C64f07036C56fCE15372610816AE22a8731296, totalSupply); }",0,"subgraph cluster_236_CustomToken {
label=""CustomToken"";
""236_CustomToken"" [label=""CustomToken""];
}
"
0x6fcc9f9a805b87afee2786293cbdc954b1aba4e3.sol,EssentiaToken,"contract EssentiaToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function EssentiaToken() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 1 weeks; endDate = now + 7 weeks; }",0,"subgraph cluster_609_EssentiaToken {
label=""EssentiaToken"";
""609_allowance"" [label=""allowance""];
""609_fallback"" [label=""fallback""];
""609_transfer"" [label=""transfer""];
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_transferFrom"" [label=""transferFrom""];
""609_approve"" [label=""approve""];
""609_totalSupply"" [label=""totalSupply""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_balanceOf"" [label=""balanceOf""];
""609_EssentiaToken"" [label=""EssentiaToken""];
""609_transfer"" -> ""609_safeAdd"";
""609_fallback"" -> ""609_safeAdd"";
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_transferFrom"" -> ""609_safeSub"";
""609_transfer"" -> ""609_safeSub"";
}
"
0x6f2deef18421ba39065223b23ef38666b3052a46.sol,ERC20Standard,"contract ERC20Standard is BasicToken { mapping (address => mapping (address => uint256)) internal allowed; function transferFrom(address _from, address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); Transfer(_from, _to, _value); return true; }",0,"subgraph cluster_486_ERC20Standard {
label=""ERC20Standard"";
""486_decreaseApproval"" [label=""decreaseApproval""];
""486_transferFrom"" [label=""transferFrom""];
""486_approve"" [label=""approve""];
""486_allowance"" [label=""allowance""];
""486_increaseApproval"" [label=""increaseApproval""];
}
"
0xd58132f2fbd65f02beee0626542e6ee059009ab4.sol,XBORNID,"contract XBORNID is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 500000000e18; uint256 public totalDistributed = 200000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 1000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_873_XBORNID {
label=""XBORNID"";
""873_approve"" [label=""approve""];
""873_fallback"" [label=""fallback""];
""873_getTokens"" [label=""getTokens""];
""873_allowance"" [label=""allowance""];
""873_transfer"" [label=""transfer""];
""873_transferFrom"" [label=""transferFrom""];
""873_XBornID"" [label=""XBornID""];
""873_transferOwnership"" [label=""transferOwnership""];
""873_withdraw"" [label=""withdraw""];
""873_finishDistribution"" [label=""finishDistribution""];
""873_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""873_getTokenBalance"" [label=""getTokenBalance""];
""873_balanceOf"" [label=""balanceOf""];
""873_distr"" [label=""distr""];
""873_burn"" [label=""burn""];
""873_transferFrom"" -> ""873_onlyPayloadSize"";
""873_distr"" -> ""873_canDistr"";
""873_getTokens"" -> ""873_canDistr"";
""873_finishDistribution"" -> ""873_canDistr"";
""873_fallback"" -> ""873_getTokens"";
""873_withdraw"" -> ""873_onlyOwner"";
""873_burn"" -> ""873_onlyOwner"";
""873_transfer"" -> ""873_onlyPayloadSize"";
""873_getTokens"" -> ""873_distr"";
""873_finishDistribution"" -> ""873_onlyOwner"";
""873_withdrawForeignTokens"" -> ""873_onlyOwner"";
""873_transferOwnership"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_onlyWhitelist"";
}
"
0xdd91fa3b84b1080f3b618cbc47e06c57def689b9.sol,TrustWallet,contract TrustWallet { struct User { uint delay; address added_by; uint time_added; address removed_by; uint time_removed; uint time_added_another_user; },0,"subgraph cluster_432_TrustWallet {
label=""TrustWallet"";
""432_executeTransaction"" [label=""executeTransaction""];
""432_isTransactionPending"" [label=""isTransactionPending""];
""432_removeUser"" [label=""removeUser""];
""432_addUser"" [label=""addUser""];
""432_TrustWallet"" [label=""TrustWallet""];
""432_cancelTransaction"" [label=""cancelTransaction""];
""432_fallback"" [label=""fallback""];
""432_initiateTransaction"" [label=""initiateTransaction""];
""432_cancelTransaction"" -> ""432_transactionMustBePending"";
""432_cancelTransaction"" -> ""432_onlyActiveUsersAllowed"";
""432_removeUser"" -> ""432_onlyActiveUsersAllowed"";
""432_executeTransaction"" -> ""432_onlyActiveUsersAllowed"";
""432_addUser"" -> ""432_onlyActiveUsersAllowed"";
""432_initiateTransaction"" -> ""432_transactionMustNotBePending"";
""432_initiateTransaction"" -> ""432_onlyActiveUsersAllowed"";
""432_executeTransaction"" -> ""432_transactionMustBePending"";
}
"
0xecf0cdd36fbeeb07d69afc57cb94f6e90ad93ef1.sol,DKHAN,"contract DKHAN is PausableToken, TimeLockable { using SafeMath for uint256; string public name; string public symbol; uint256 public constant decimals = 12; uint256 public totalSupply; constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balances[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_1297_DKHAN {
label=""DKHAN"";
""1297_balanceAvailable"" [label=""balanceAvailable""];
""1297_burn"" [label=""burn""];
""1297_transferFrom"" [label=""transferFrom""];
""1297_transfer"" [label=""transfer""];
""1297_burnFrom"" [label=""burnFrom""];
""1297_lockedInfo"" [label=""lockedInfo""];
""1297_constructor"" [label=""constructor""];
""1297_lockAndTransfer"" [label=""lockAndTransfer""];
""1297_burnFrom"" -> ""1297_canTransper"";
""1297_transferFrom"" -> ""1297_canTransper"";
""1297_transfer"" -> ""1297_transfer"";
""1297_lockAndTransfer"" -> ""1297_onlyOwner"";
""1297_burn"" -> ""1297_canTransper"";
""1297_lockedInfo"" -> ""1297_lockedNow"";
""1297_lockAndTransfer"" -> ""1297_setTimeLockAccount"";
""1297_balanceAvailable"" -> ""1297_lockedNow"";
""1297_burn"" -> ""1297_burn"";
""1297_transfer"" -> ""1297_canTransper"";
""1297_burnFrom"" -> ""1297_burnFrom"";
""1297_transferFrom"" -> ""1297_transferFrom"";
""1297_lockAndTransfer"" -> ""1297_transfer"";
}
"
0x5b2db92a43aa86fff2d9a3696a7ee264d03fc907.sol,Proposals,contract Proposals is ApplicationAsset { ApplicationEntityABI public Application; ABIListingContract public ListingContractEntity; ABIFunding public FundingEntity; ABIFundingManager public FundingManagerEntity; ABITokenManager public TokenManagerEntity; ABIToken public TokenEntity; ABIMilestones public MilestonesEntity; function getRecordState(bytes32 name) public view returns (uint8) { return RecordStates[name]; },0,"subgraph cluster_3758_Proposals {
label=""Proposals"";
""3758_createDelistingProposal"" [label=""createDelistingProposal""];
""3758_runBeforeApplyingSettings"" [label=""runBeforeApplyingSettings""];
""3758_getRequiredStateChanges"" [label=""getRequiredStateChanges""];
""3758_setVoteCountPerProcess"" [label=""setVoteCountPerProcess""];
""3758_getHasVoteForCurrentMilestoneRelease"" [label=""getHasVoteForCurrentMilestoneRelease""];
""3758_getCurrentMilestonePostponingProposalDuration"" [label=""getCurrentMilestonePostponingProposalDuration""];
""3758_acceptCodeUpgrade"" [label=""acceptCodeUpgrade""];
""3758_tryFinaliseNonLockedTokensProposal"" [label=""tryFinaliseNonLockedTokensProposal""];
""3758_getBylawsMilestoneMinPostponing"" [label=""getBylawsMilestoneMinPostponing""];
""3758_finaliseProposal"" [label=""finaliseProposal""];
""3758_getMyVoteForCurrentMilestoneRelease"" [label=""getMyVoteForCurrentMilestoneRelease""];
""3758_getVotingPower"" [label=""getVotingPower""];
""3758_removeAndReindexActive"" [label=""removeAndReindexActive""];
""3758_addCodeUpgradeProposal"" [label=""addCodeUpgradeProposal""];
""3758_createMilestoneAcceptanceProposal"" [label=""createMilestoneAcceptanceProposal""];
""3758_createMilestonePostponingProposal"" [label=""createMilestonePostponingProposal""];
""3758_getRecordState"" [label=""getRecordState""];
""3758_canEndVoting"" [label=""canEndVoting""];
""3758_setActionTypes"" [label=""setActionTypes""];
""3758_getProposalState"" [label=""getProposalState""];
""3758_addVoteIntoResult"" [label=""addVoteIntoResult""];
""3758_setAssetStates"" [label=""setAssetStates""];
""3758_getBylawsMilestoneMaxPostponing"" [label=""getBylawsMilestoneMaxPostponing""];
""3758_needsProcessing"" [label=""needsProcessing""];
""3758_finaliseExpiredProposal"" [label=""finaliseExpiredProposal""];
""3758_createEmergencyFundReleaseProposal"" [label=""createEmergencyFundReleaseProposal""];
""3758_createProposal"" [label=""createProposal""];
""3758_RegisterVote"" [label=""RegisterVote""];
""3758_initProposalVoting"" [label=""initProposalVoting""];
""3758_getCurrentMilestoneProposalStatusForType"" [label=""getCurrentMilestoneProposalStatusForType""];
""3758_registerNewVote"" [label=""registerNewVote""];
""3758_getHash"" [label=""getHash""];
""3758_hasRequiredStateChanges"" [label=""hasRequiredStateChanges""];
""3758_getMyVote"" [label=""getMyVote""];
""3758_hasPreviousVote"" [label=""hasPreviousVote""];
""3758_undoPreviousVote"" [label=""undoPreviousVote""];
""3758_addActiveProposal"" [label=""addActiveProposal""];
""3758_getBylawsProposalVotingDuration"" [label=""getBylawsProposalVotingDuration""];
""3758_getActionType"" [label=""getActionType""];
""3758_getTotalTokenVotingPower"" [label=""getTotalTokenVotingPower""];
""3758_expiryChangesState"" [label=""expiryChangesState""];
""3758_runActionAfterResult"" [label=""runActionAfterResult""];
""3758_getProposalType"" [label=""getProposalType""];
""3758_ProcessVoteTotals"" [label=""ProcessVoteTotals""];
""3758_tryEndVoting"" [label=""tryEndVoting""];
""3758_process"" [label=""process""];
""3758_getRequiredStateChanges"" -> ""3758_hasRequiredStateChanges"";
""3758_RegisterVote"" -> ""3758_registerNewVote"";
""3758_getCurrentMilestonePostponingProposalDuration"" -> ""3758_getHash"";
""3758_process"" -> ""3758_getProposalType"";
""3758_ProcessVoteTotals"" -> ""3758_onlyApplicationEntity"";
""3758_finaliseExpiredProposal"" -> ""3758_getRecordState"";
""3758_getCurrentMilestoneProposalStatusForType"" -> ""3758_getActionType"";
""3758_expiryChangesState"" -> ""3758_getRecordState"";
""3758_ProcessVoteTotals"" -> ""3758_tryEndVoting"";
""3758_createMilestonePostponingProposal"" -> ""3758_getBylawsMilestoneMinPostponing"";
""3758_finaliseProposal"" -> ""3758_getActionType"";
""3758_runActionAfterResult"" -> ""3758_removeAndReindexActive"";
""3758_registerNewVote"" -> ""3758_addVoteIntoResult"";
""3758_tryEndVoting"" -> ""3758_finaliseExpiredProposal"";
""3758_createMilestoneAcceptanceProposal"" -> ""3758_getActionType"";
""3758_finaliseExpiredProposal"" -> ""3758_runActionAfterResult"";
""3758_hasRequiredStateChanges"" -> ""3758_needsProcessing"";
""3758_initProposalVoting"" -> ""3758_getApplicationState"";
""3758_createProposal"" -> ""3758_initProposalVoting"";
""3758_runActionAfterResult"" -> ""3758_acceptCodeUpgrade"";
""3758_initProposalVoting"" -> ""3758_getActionType"";
""3758_setVoteCountPerProcess"" -> ""3758_onlyDeployer"";
""3758_RegisterVote"" -> ""3758_tryEndVoting"";
""3758_tryEndVoting"" -> ""3758_canEndVoting"";
""3758_initProposalVoting"" -> ""3758_getRecordState"";
""3758_addCodeUpgradeProposal"" -> ""3758_createProposal"";
""3758_createEmergencyFundReleaseProposal"" -> ""3758_createProposal"";
""3758_createMilestoneAcceptanceProposal"" -> ""3758_getHash"";
""3758_createProposal"" -> ""3758_getRecordState"";
""3758_RegisterVote"" -> ""3758_getRecordState"";
""3758_addCodeUpgradeProposal"" -> ""3758_getActionType"";
""3758_tryFinaliseNonLockedTokensProposal"" -> ""3758_getRecordState"";
""3758_createMilestoneAcceptanceProposal"" -> ""3758_onlyAsset"";
""3758_initProposalVoting"" -> ""3758_getApplicationEntityState"";
""3758_createDelistingProposal"" -> ""3758_getHash"";
""3758_createProposal"" -> ""3758_getTimestamp"";
""3758_needsProcessing"" -> ""3758_expiryChangesState"";
""3758_runActionAfterResult"" -> ""3758_getRecordState"";
""3758_createMilestonePostponingProposal"" -> ""3758_getBylawsMilestoneMaxPostponing"";
""3758_getCurrentMilestoneProposalStatusForType"" -> ""3758_getHash"";
""3758_createDelistingProposal"" -> ""3758_getActionType"";
""3758_process"" -> ""3758_ProcessVoteTotals"";
""3758_getMyVoteForCurrentMilestoneRelease"" -> ""3758_getHash"";
""3758_finaliseProposal"" -> ""3758_runActionAfterResult"";
""3758_tryFinaliseNonLockedTokensProposal"" -> ""3758_runActionAfterResult"";
""3758_registerNewVote"" -> ""3758_getTimestamp"";
""3758_addCodeUpgradeProposal"" -> ""3758_getHash"";
""3758_createEmergencyFundReleaseProposal"" -> ""3758_onlyDeployer"";
""3758_tryEndVoting"" -> ""3758_finaliseProposal"";
""3758_getMyVoteForCurrentMilestoneRelease"" -> ""3758_getActionType"";
""3758_ProcessVoteTotals"" -> ""3758_addVoteIntoResult"";
""3758_initProposalVoting"" -> ""3758_tryFinaliseNonLockedTokensProposal"";
""3758_getHasVoteForCurrentMilestoneRelease"" -> ""3758_getActionType"";
""3758_getHasVoteForCurrentMilestoneRelease"" -> ""3758_getHash"";
""3758_runBeforeApplyingSettings"" -> ""3758_requireInitialised"";
""3758_createDelistingProposal"" -> ""3758_onlyTokenHolder"";
""3758_createEmergencyFundReleaseProposal"" -> ""3758_getHash"";
""3758_process"" -> ""3758_onlyApplicationEntity"";
""3758_runBeforeApplyingSettings"" -> ""3758_requireSettingsNotApplied"";
""3758_RegisterVote"" -> ""3758_undoPreviousVote"";
""3758_createMilestonePostponingProposal"" -> ""3758_createProposal"";
""3758_addCodeUpgradeProposal"" -> ""3758_getApplicationState"";
""3758_RegisterVote"" -> ""3758_hasPreviousVote"";
""3758_addCodeUpgradeProposal"" -> ""3758_getApplicationEntityState"";
""3758_expiryChangesState"" -> ""3758_getTimestamp"";
""3758_getHasVoteForCurrentMilestoneRelease"" -> ""3758_hasPreviousVote"";
""3758_initProposalVoting"" -> ""3758_addActiveProposal"";
""3758_getBylawsMilestoneMinPostponing"" -> ""3758_getAppBylawUint256"";
""3758_setAssetStates"" -> ""3758_setActionTypes"";
""3758_tryEndVoting"" -> ""3758_expiryChangesState"";
""3758_finaliseProposal"" -> ""3758_getRecordState"";
""3758_createMilestonePostponingProposal"" -> ""3758_getActionType"";
""3758_createMilestoneAcceptanceProposal"" -> ""3758_createProposal"";
""3758_addCodeUpgradeProposal"" -> ""3758_onlyApplicationEntity"";
""3758_getBylawsMilestoneMaxPostponing"" -> ""3758_getAppBylawUint256"";
""3758_createDelistingProposal"" -> ""3758_createProposal"";
""3758_createProposal"" -> ""3758_getBylawsProposalVotingDuration"";
""3758_runActionAfterResult"" -> ""3758_getActionType"";
""3758_RegisterVote"" -> ""3758_getVotingPower"";
""3758_getBylawsProposalVotingDuration"" -> ""3758_getAppBylawUint256"";
""3758_process"" -> ""3758_tryEndVoting"";
""3758_runBeforeApplyingSettings"" -> ""3758_getApplicationAssetAddressByName"";
""3758_getCurrentMilestonePostponingProposalDuration"" -> ""3758_getActionType"";
""3758_createMilestonePostponingProposal"" -> ""3758_getHash"";
""3758_createEmergencyFundReleaseProposal"" -> ""3758_getActionType"";
""3758_createMilestonePostponingProposal"" -> ""3758_onlyDeployer"";
""3758_getVotingPower"" -> ""3758_getActionType"";
""3758_process"" -> ""3758_getActionType"";
}
"
0x0df55c565881b253d307e9a8a95c907dfa228283.sol,Monoplasma,"contract Monoplasma is BalanceVerifier, Ownable { using SafeMath for uint256; event OperatorChanged(address indexed newOperator); event AdminFeeChanged(uint adminFee); uint public blockFreezeSeconds; mapping (uint => uint) public blockTimestamp; address public operator; uint public adminFee; IERC20 public token; mapping (address => uint) public earnings; mapping (address => uint) public withdrawn; uint public totalWithdrawn; uint public totalProven; constructor(address tokenAddress, uint blockFreezePeriodSeconds, uint _adminFee) public { blockFreezeSeconds = blockFreezePeriodSeconds; token = IERC20(tokenAddress); operator = msg.sender; setAdminFee(_adminFee); }",0,"subgraph cluster_850_Monoplasma {
label=""Monoplasma"";
""850_onCommit"" [label=""onCommit""];
""850_withdrawAllFor"" [label=""withdrawAllFor""];
""850_withdrawAllTo"" [label=""withdrawAllTo""];
""850_onVerifySuccess"" [label=""onVerifySuccess""];
""850_withdrawAll"" [label=""withdrawAll""];
""850_setOperator"" [label=""setOperator""];
""850_withdrawTo"" [label=""withdrawTo""];
""850_setAdminFee"" [label=""setAdminFee""];
""850_withdrawFor"" [label=""withdrawFor""];
""850_constructor"" [label=""constructor""];
""850_withdraw"" [label=""withdraw""];
""850_withdrawFor"" -> ""850_withdrawTo"";
""850_withdrawAllTo"" -> ""850_prove"";
""850_setOperator"" -> ""850_onlyOwner"";
""850_withdrawAllTo"" -> ""850_withdrawTo"";
""850_constructor"" -> ""850_setAdminFee"";
""850_withdrawAllFor"" -> ""850_withdrawTo"";
""850_withdrawAll"" -> ""850_withdrawAllFor"";
""850_setAdminFee"" -> ""850_onlyOwner"";
""850_withdraw"" -> ""850_withdrawTo"";
""850_withdrawAllFor"" -> ""850_prove"";
}
"
0x1b27c2c096ae7e408eef72731fa5ea7e753054de.sol,SUSIToken,"contract SUSIToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function SUSIToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_SUSIToken {
label=""SUSIToken"";
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_SUSIToken"" [label=""SUSIToken""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x02dc001b5e9191a51b338950d8cdea1cb4481bb3.sol,RBInformationStore,contract RBInformationStore is Ownable { address public profitContainerAddress; address public companyWalletAddress; uint public etherRatioForOwner; address public multiSigAddress; address public accountAddressForSponsee; bool public isPayableEnabledForAll = true; modifier onlyMultiSig() { require(multiSigAddress == msg.sender); _; },0,"subgraph cluster_675_RBInformationStore {
label=""RBInformationStore"";
""675_etherRatioForOwner"" [label=""etherRatioForOwner""];
""675_changeCompanyWalletAddress"" [label=""changeCompanyWalletAddress""];
""675_changeAccountAddressForSponsee"" [label=""changeAccountAddressForSponsee""];
""675_companyWalletAddress"" [label=""companyWalletAddress""];
""675_changeMultiSigAddress"" [label=""changeMultiSigAddress""];
""675_changeProfitContainerAddress"" [label=""changeProfitContainerAddress""];
""675_isPayableEnabledForAll"" [label=""isPayableEnabledForAll""];
""675_changeIsPayableEnabledForAll"" [label=""changeIsPayableEnabledForAll""];
""675_changeEtherRatioForOwner"" [label=""changeEtherRatioForOwner""];
""675_changeOwner"" [label=""changeOwner""];
""675_RBInformationStore"" [label=""RBInformationStore""];
""675_profitContainerAddress"" [label=""profitContainerAddress""];
""675_changeMultiSigAddress"" -> ""675_onlyMultiSig"";
""675_changeOwner"" -> ""675_onlyMultiSig"";
""675_changeIsPayableEnabledForAll"" -> ""675_onlyMultiSig"";
""675_changeEtherRatioForOwner"" -> ""675_onlyMultiSig"";
""675_changeAccountAddressForSponsee"" -> ""675_onlyMultiSig"";
""675_changeCompanyWalletAddress"" -> ""675_onlyMultiSig"";
""675_changeProfitContainerAddress"" -> ""675_onlyMultiSig"";
}
"
0x448019c21743272e40eb8835dac2a7d5474899bf.sol,DatumTokenDistributor,contract DatumTokenDistributor is Ownable { GODToken public token; address private distributorWallet; function DatumTokenDistributor(address _distributorWallet) public { distributorWallet = _distributorWallet; },0,"subgraph cluster_699_DatumTokenDistributor {
label=""DatumTokenDistributor"";
""699_DatumTokenDistributor"" [label=""DatumTokenDistributor""];
""699_distributeToken"" [label=""distributeToken""];
""699_setToken"" [label=""setToken""];
""699_setDistributor"" [label=""setDistributor""];
""699_setDistributor"" -> ""699_onlyOwner"";
""699_setToken"" -> ""699_onlyOwner"";
}
"
0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol,ApplicationAsset,"contract ApplicationAsset { event EventAppAssetOwnerSet(bytes32 indexed _name, address indexed _owner); event EventRunBeforeInit(bytes32 indexed _name); event EventRunBeforeApplyingSettings(bytes32 indexed _name); mapping (bytes32 => uint8) public EntityStates; mapping (bytes32 => uint8) public RecordStates; uint8 public CurrentEntityState; event EventEntityProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required); event DebugEntityRequiredChanges( bytes32 _assetName, uint8 indexed _current, uint8 indexed _required ); bytes32 public assetName; uint8 public RecordNum = 0; bool public _initialized = false; bool public _settingsApplied = false; address public owner = address(0x0) ; address public deployerAddress; function ApplicationAsset() public { deployerAddress = msg.sender; }",0,"subgraph cluster_682_ApplicationAsset {
label=""ApplicationAsset"";
""682_applyAndLockSettings"" [label=""applyAndLockSettings""];
""682_getRecordState"" [label=""getRecordState""];
""682_transferToNewOwner"" [label=""transferToNewOwner""];
""682_getApplicationAssetAddressByName"" [label=""getApplicationAssetAddressByName""];
""682_getTimestamp"" [label=""getTimestamp""];
""682_getEntityState"" [label=""getEntityState""];
""682_runBeforeInitialization"" [label=""runBeforeInitialization""];
""682_getAppBylawUint256"" [label=""getAppBylawUint256""];
""682_runBeforeApplyingSettings"" [label=""runBeforeApplyingSettings""];
""682_setInitialOwnerAndName"" [label=""setInitialOwnerAndName""];
""682_getApplicationState"" [label=""getApplicationState""];
""682_setAssetStates"" [label=""setAssetStates""];
""682_getAppBylawBytes32"" [label=""getAppBylawBytes32""];
""682_ApplicationAsset"" [label=""ApplicationAsset""];
""682_getApplicationEntityState"" [label=""getApplicationEntityState""];
""682_setInitialApplicationAddress"" [label=""setInitialApplicationAddress""];
""682_setInitialOwnerAndName"" -> ""682_getEntityState"";
""682_runBeforeInitialization"" -> ""682_requireNotInitialised"";
""682_applyAndLockSettings"" -> ""682_onlyDeployer"";
""682_applyAndLockSettings"" -> ""682_requireInitialised"";
""682_setInitialOwnerAndName"" -> ""682_runBeforeInitialization"";
""682_applyAndLockSettings"" -> ""682_runBeforeApplyingSettings"";
""682_getAppBylawBytes32"" -> ""682_requireInitialised"";
""682_setInitialOwnerAndName"" -> ""682_requireNotInitialised"";
""682_runBeforeApplyingSettings"" -> ""682_requireSettingsNotApplied"";
""682_setInitialOwnerAndName"" -> ""682_onlyOwner"";
""682_getAppBylawUint256"" -> ""682_requireInitialised"";
""682_setInitialOwnerAndName"" -> ""682_setAssetStates"";
""682_applyAndLockSettings"" -> ""682_requireSettingsNotApplied"";
""682_runBeforeApplyingSettings"" -> ""682_requireInitialised"";
""682_transferToNewOwner"" -> ""682_requireInitialised"";
""682_setInitialApplicationAddress"" -> ""682_requireNotInitialised"";
""682_transferToNewOwner"" -> ""682_onlyOwner"";
""682_setInitialApplicationAddress"" -> ""682_onlyDeployer"";
}
"
0x1e6b7d459af96e916548d27b0e72ce17ccb7db74.sol,SwarmVotingMVP,"contract SwarmVotingMVP { address public owner; bool public testMode = false; mapping(uint256 => bytes32) public encryptedBallots; mapping(uint256 => bytes32) public associatedPubkeys; mapping(uint256 => address) public associatedAddresses; uint256 public nVotesCast = 0; mapping(address => uint256) public voterToBallotID; bytes32 public ballotEncryptionPubkey; bytes32 public ballotEncryptionSeckey; bool seckeyRevealed = false; bool allowSeckeyBeforeEndTime = false; uint256 public startTime; uint256 public endTime; mapping(address => bool) public bannedAddresses; address public swarmFundAddress = 0x8Bf7b2D536D286B9c5Ad9d99F608e9E214DE63f0; bytes32[5] public optionHashes; event CreatedBallot(address creator, uint256 start, uint256 end, bytes32 encPubkey, string o1, string o2, string o3, string o4, string o5); event SuccessfulVote(address voter, bytes32 ballot, bytes32 pubkey); event SeckeyRevealed(bytes32 secretKey); event AllowEarlySeckey(bool allowEarlySeckey); event TestingEnabled(); event Error(string error); modifier notBanned { if (!bannedAddresses[msg.sender]) { _; }",0,"subgraph cluster_415_SwarmVotingMVP {
label=""SwarmVotingMVP"";
""415_getEncSeckey"" [label=""getEncSeckey""];
""415_submitBallot"" [label=""submitBallot""];
""415_getBallotOptNumber"" [label=""getBallotOptNumber""];
""415_SwarmVotingMVP"" [label=""SwarmVotingMVP""];
""415_revealSeckey"" [label=""revealSeckey""];
""415_setEndTime"" [label=""setEndTime""];
""415_getBallotOptions"" [label=""getBallotOptions""];
""415_getEncPubkey"" [label=""getEncPubkey""];
""415_banAddress"" [label=""banAddress""];
""415_addBallotAndVoter"" [label=""addBallotAndVoter""];
""415_submitBallot"" -> ""415_notBanned"";
""415_submitBallot"" -> ""415_ballotOpen"";
""415_submitBallot"" -> ""415_addBallotAndVoter"";
""415_revealSeckey"" -> ""415_onlyOwner"";
""415_banAddress"" -> ""415_onlyTesting"";
""415_setEndTime"" -> ""415_onlyTesting"";
""415_setEndTime"" -> ""415_onlyOwner"";
""415_banAddress"" -> ""415_onlyOwner"";
}
"
0xf331f7887d31714dce936d9a9846e6afbe82e0a0.sol,Agricoin,contract Agricoin is Owned { struct DividendPayout { uint amount; uint momentTotalSupply; },0,"subgraph cluster_958_Agricoin {
label=""Agricoin"";
""958_posibleDividendsOf"" [label=""posibleDividendsOf""];
""958_allowance"" [label=""allowance""];
""958_payRedemption"" [label=""payRedemption""];
""958_decimals"" [label=""decimals""];
""958_totalSupply"" [label=""totalSupply""];
""958_payDividends"" [label=""payDividends""];
""958_transfer"" [label=""transfer""];
""958_approve"" [label=""approve""];
""958_Agricoin"" [label=""Agricoin""];
""958_fallback"" [label=""fallback""];
""958_getUnpaid"" [label=""getUnpaid""];
""958_posibleRedemptionOf"" [label=""posibleRedemptionOf""];
""958_mint"" [label=""mint""];
""958_recalculate"" [label=""recalculate""];
""958_addPayer"" [label=""addPayer""];
""958_activate"" [label=""activate""];
""958_totalSupplyOnIco"" [label=""totalSupplyOnIco""];
""958_balanceOf"" [label=""balanceOf""];
""958_transferFrom"" [label=""transferFrom""];
""958_transferFrom"" -> ""958_recalculate"";
""958_payDividends"" -> ""958_onlyActivated"";
""958_transfer"" -> ""958_balanceOf"";
""958_getUnpaid"" -> ""958_onlyActivated"";
""958_approve"" -> ""958_recalculate"";
""958_payRedemption"" -> ""958_onlyActivated"";
""958_payRedemption"" -> ""958_onlyPayer"";
""958_approve"" -> ""958_onlyActivated"";
""958_recalculate"" -> ""958_onlyActivated"";
""958_payDividends"" -> ""958_onlyPayer"";
""958_transfer"" -> ""958_onlyActivated"";
""958_activate"" -> ""958_onlyOwner"";
""958_transferFrom"" -> ""958_onlyActivated"";
""958_fallback"" -> ""958_posibleDividendsOf"";
""958_getUnpaid"" -> ""958_onlyPayer"";
""958_allowance"" -> ""958_onlyActivated"";
""958_transfer"" -> ""958_recalculate"";
""958_addPayer"" -> ""958_onlyPayer"";
""958_mint"" -> ""958_onlyOwner"";
}
"
0xbe0f5779cadbc31150257e79c3aeed8299d12905.sol,Pausable,contract Pausable is Ownable { event PausePublic(bool newState); event PauseOwnerAdmin(bool newState); bool public pausedPublic = false; bool public pausedOwnerAdmin = false; address public admin; modifier whenNotPaused() { if(pausedPublic) { if(!pausedOwnerAdmin) { require(msg.sender == admin || msg.sender == owner); },0,"subgraph cluster_344_Pausable {
label=""Pausable"";
""344_pause"" [label=""pause""];
""344_pause"" -> ""344_onlyOwner"";
}
"
0x6f59e0461ae5e2799f1fb3847f05a63b16d0dbf8.sol,OrcaToken,"contract OrcaToken is TokenRecoverable, ERC777ERC20BaseToken { using SafeMath for uint256; string private constant name_ = ; string private constant symbol_ = ; uint256 private constant granularity_ = 1; bool public throwOnIncompatibleContract = true; bool public burnEnabled = false; bool public mintingFinished = false; address public communityLock = address(0); event MintFinished(); constructor() public ERC777ERC20BaseToken(name_, symbol_, granularity_, new address[](0)) { setInterfaceImplementation(, address(this)); setInterfaceImplementation(, address(this)); }",0,"subgraph cluster_2033_OrcaToken {
label=""OrcaToken"";
""2033_disableERC20"" [label=""disableERC20""];
""2033_enableERC20"" [label=""enableERC20""];
""2033_finishMinting"" [label=""finishMinting""];
""2033_operatorSend"" [label=""operatorSend""];
""2033_mint"" [label=""mint""];
""2033_callRecipient"" [label=""callRecipient""];
""2033_burn"" [label=""burn""];
""2033_constructor"" [label=""constructor""];
""2033_send"" [label=""send""];
""2033_permitBurning"" [label=""permitBurning""];
""2033_transfer"" [label=""transfer""];
""2033_setCommunityLock"" [label=""setCommunityLock""];
""2033_transferFrom"" [label=""transferFrom""];
""2033_setThrowOnIncompatibleContract"" [label=""setThrowOnIncompatibleContract""];
""2033_send"" -> ""2033_send"";
""2033_transfer"" -> ""2033_erc20"";
""2033_permitBurning"" -> ""2033_onlyOwner"";
""2033_setCommunityLock"" -> ""2033_onlyOwner"";
""2033_callRecipient"" -> ""2033_interfaceAddr"";
""2033_disableERC20"" -> ""2033_onlyOwner"";
""2033_operatorSend"" -> ""2033_operatorSend"";
""2033_disableERC20"" -> ""2033_setInterfaceImplementation"";
""2033_operatorSend"" -> ""2033_canTrade"";
""2033_transfer"" -> ""2033_transfer"";
""2033_transfer"" -> ""2033_canTrade"";
""2033_mint"" -> ""2033_requireMultiple"";
""2033_burn"" -> ""2033_burn"";
""2033_send"" -> ""2033_canTrade"";
""2033_enableERC20"" -> ""2033_onlyOwner"";
""2033_finishMinting"" -> ""2033_onlyOwner"";
""2033_constructor"" -> ""2033_constructor"";
""2033_setThrowOnIncompatibleContract"" -> ""2033_onlyOwner"";
""2033_transferFrom"" -> ""2033_canTrade"";
""2033_mint"" -> ""2033_callRecipient"";
""2033_enableERC20"" -> ""2033_setInterfaceImplementation"";
""2033_constructor"" -> ""2033_setInterfaceImplementation"";
""2033_mint"" -> ""2033_onlyOwner"";
""2033_mint"" -> ""2033_canMint"";
""2033_burn"" -> ""2033_canBurn"";
""2033_transferFrom"" -> ""2033_transferFrom"";
""2033_callRecipient"" -> ""2033_isRegularAddress"";
""2033_transferFrom"" -> ""2033_erc20"";
""2033_finishMinting"" -> ""2033_canMint"";
}
"
0x261bb5e1c53248860f4bc405abaae3e0bfc12874.sol,MycodeCoin,"contract MycodeCoin is Token, LockBalance { function MycodeCoin() public { name = ; symbol = ; decimals = 18; uint256 initialSupply = 10000000000; totalSupply = initialSupply * 10 ** uint(decimals); user[owner].balance = totalSupply; Transfer(address(0), owner, totalSupply); }",0,"subgraph cluster_1738_MycodeCoin {
label=""MycodeCoin"";
""1738_validTransfer"" [label=""validTransfer""];
""1738_MycodeCoin"" [label=""MycodeCoin""];
""1738_useBalanceOf"" [label=""useBalanceOf""];
""1738_setLockUsers"" [label=""setLockUsers""];
""1738_setLockUsers"" -> ""1738_onlyOwner"";
""1738_validTransfer"" -> ""1738_useBalanceOf"";
""1738_useBalanceOf"" -> ""1738_balanceOf"";
""1738_useBalanceOf"" -> ""1738_lockBalanceAll"";
""1738_setLockUsers"" -> ""1738_setLockUser"";
""1738_setLockUsers"" -> ""1738_useBalanceOf"";
""1738_validTransfer"" -> ""1738_validTransfer"";
}
"
0x28f2c01a3d86ee4faf037147f0aeb49c2eab47ce.sol,DESH,"contract DESH is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000; balances[0x2cF5dc0700bc0dccCF305AD2CFc28717e8299207] = _totalSupply; emit Transfer(address(0), 0x2cF5dc0700bc0dccCF305AD2CFc28717e8299207, _totalSupply); }",0,"subgraph cluster_543_DESH {
label=""DESH"";
""543_constructor"" [label=""constructor""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x279594b6843014376a422ebb26a6eab7a30e36f0.sol,OasisDirectProxy,"contract OasisDirectProxy is DSMath { function withdrawAndSend(TokenInterface wethToken, uint wethAmt) internal { wethToken.withdraw(wethAmt); require(msg.sender.call.value(wethAmt)()); }",0,"subgraph cluster_848_OasisDirectProxy {
label=""OasisDirectProxy"";
""848_buyAllAmount"" [label=""buyAllAmount""];
""848_withdrawAndSend"" [label=""withdrawAndSend""];
""848_sellAllAmountPayEth"" [label=""sellAllAmountPayEth""];
""848_sellAllAmountBuyEth"" [label=""sellAllAmountBuyEth""];
""848_buyAllAmountPayEth"" [label=""buyAllAmountPayEth""];
""848_fallback"" [label=""fallback""];
""848_buyAllAmountBuyEth"" [label=""buyAllAmountBuyEth""];
""848_sellAllAmount"" [label=""sellAllAmount""];
""848_buyAllAmountPayEth"" -> ""848_withdrawAndSend"";
""848_buyAllAmountPayEth"" -> ""848_sub"";
""848_buyAllAmountBuyEth"" -> ""848_withdrawAndSend"";
""848_buyAllAmountPayEth"" -> ""848_min"";
""848_buyAllAmount"" -> ""848_min"";
""848_sellAllAmountBuyEth"" -> ""848_withdrawAndSend"";
}
"
0x291a1b4ba9e936741d5cb185ad74fa9a32d048d8.sol,SimpleMarket,"contract SimpleMarket is owned, WithdrawalContract { uint public startPrice; uint public fixPrice = 0.1 ether; uint internal decimals = 0; bytes32 public productId = 0x0; struct UserStruct { uint userListPointer; bytes32[] productKeys; bytes32 userEmail; bytes32 userName; mapping(bytes32 => uint) productKeyPointers; }",0,"subgraph cluster_1343_SimpleMarket {
label=""SimpleMarket"";
""1343_getUserProductAtIndex"" [label=""getUserProductAtIndex""];
""1343_setFixPrice"" [label=""setFixPrice""];
""1343_isUserProduct"" [label=""isUserProduct""];
""1343_getProductHistoryDate"" [label=""getProductHistoryDate""];
""1343_changeInSale"" [label=""changeInSale""];
""1343_getProductHistoryPrice"" [label=""getProductHistoryPrice""];
""1343_isProduct"" [label=""isProduct""];
""1343_changeOwner"" [label=""changeOwner""];
""1343_createUser"" [label=""createUser""];
""1343_isUser"" [label=""isUser""];
""1343_getUserProductCount"" [label=""getUserProductCount""];
""1343_setDecimals"" [label=""setDecimals""];
""1343_setPrices"" [label=""setPrices""];
""1343_createProduct"" [label=""createProduct""];
""1343_getProductHistoryUser"" [label=""getProductHistoryUser""];
""1343_deleteProduct"" [label=""deleteProduct""];
""1343_getProductCount"" [label=""getProductCount""];
""1343_deleteUser"" [label=""deleteUser""];
""1343_getUserCount"" [label=""getUserCount""];
""1343_fallback"" [label=""fallback""];
""1343_SimpleMarket"" [label=""SimpleMarket""];
""1343_getUserProductsKeys"" [label=""getUserProductsKeys""];
""1343_changeOwner"" -> ""1343_isProduct"";
""1343_changeInSale"" -> ""1343_isUser"";
""1343_deleteProduct"" -> ""1343_isProduct"";
""1343_createProduct"" -> ""1343_isUser"";
""1343_changeInSale"" -> ""1343_isProduct"";
""1343_deleteUser"" -> ""1343_onlyOwner"";
""1343_deleteProduct"" -> ""1343_onlyOwner"";
""1343_changeOwner"" -> ""1343_isUser"";
""1343_createProduct"" -> ""1343_isProduct"";
""1343_setFixPrice"" -> ""1343_onlyOwner"";
""1343_deleteUser"" -> ""1343_isUser"";
""1343_getUserProductAtIndex"" -> ""1343_isUser"";
""1343_deleteProduct"" -> ""1343_getProductCount"";
""1343_createUser"" -> ""1343_isUser"";
""1343_createProduct"" -> ""1343_getProductCount"";
""1343_changeOwner"" -> ""1343_isUserProduct"";
""1343_setPrices"" -> ""1343_getProductCount"";
""1343_setDecimals"" -> ""1343_onlyOwner"";
""1343_createProduct"" -> ""1343_createUser"";
""1343_getUserProductCount"" -> ""1343_isUser"";
""1343_changeOwner"" -> ""1343_createUser"";
""1343_getUserProductsKeys"" -> ""1343_isUser"";
}
"
0xc7193d5fddfaeb18e814b6473a1623e697c6e7bd.sol,EthMinerToken,contract EthMinerToken { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1180_EthMinerToken {
label=""EthMinerToken"";
""1180_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1180_exit"" [label=""exit""];
""1180_sellPrice"" [label=""sellPrice""];
""1180_buyPrice"" [label=""buyPrice""];
""1180_reinvest"" [label=""reinvest""];
""1180_purchaseTokens"" [label=""purchaseTokens""];
""1180_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1180_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1180_sell"" [label=""sell""];
""1180_myTokens"" [label=""myTokens""];
""1180_myDividends"" [label=""myDividends""];
""1180_balanceOf"" [label=""balanceOf""];
""1180_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1180_transfer"" [label=""transfer""];
""1180_buy"" [label=""buy""];
""1180_totalSupply"" [label=""totalSupply""];
""1180_dividendsOf"" [label=""dividendsOf""];
""1180_fallback"" [label=""fallback""];
""1180_sqrt"" [label=""sqrt""];
""1180_withdraw"" [label=""withdraw""];
""1180_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1180_withdraw"" -> ""1180_myDividends"";
""1180_sell"" -> ""1180_onlyBagholders"";
""1180_sellPrice"" -> ""1180_tokensToEthereum_"";
""1180_sell"" -> ""1180_tokensToEthereum_"";
""1180_transfer"" -> ""1180_onlyBagholders"";
""1180_calculateEthereumReceived"" -> ""1180_tokensToEthereum_"";
""1180_purchaseTokens"" -> ""1180_buyPrice"";
""1180_myTokens"" -> ""1180_balanceOf"";
""1180_sell"" -> ""1180_buyPrice"";
""1180_exit"" -> ""1180_sell"";
""1180_reinvest"" -> ""1180_purchaseTokens"";
""1180_exit"" -> ""1180_withdraw"";
""1180_transfer"" -> ""1180_withdraw"";
""1180_transfer"" -> ""1180_myDividends"";
""1180_buyPrice"" -> ""1180_tokensToEthereum_"";
""1180_myDividends"" -> ""1180_dividendsOf"";
""1180_purchaseTokens"" -> ""1180_ethereumToTokens_"";
""1180_withdraw"" -> ""1180_onlyStronghands"";
""1180_buy"" -> ""1180_purchaseTokens"";
""1180_reinvest"" -> ""1180_onlyStronghands"";
""1180_transfer"" -> ""1180_tokensToEthereum_"";
""1180_fallback"" -> ""1180_purchaseTokens"";
""1180_calculateTokensReceived"" -> ""1180_ethereumToTokens_"";
""1180_ethereumToTokens_"" -> ""1180_sqrt"";
""1180_reinvest"" -> ""1180_myDividends"";
}
"
0xe1521029d2591ba2a0f92b6e744a825f665f748b.sol,IndexEmpireToken,"contract IndexEmpireToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function IndexEmpireToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_550_IndexEmpireToken {
label=""IndexEmpireToken"";
""550_IndexEmpireToken"" [label=""IndexEmpireToken""];
""550_transferFrom"" [label=""transferFrom""];
""550_approve"" [label=""approve""];
""550_allowance"" [label=""allowance""];
""550_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""550_balanceOf"" [label=""balanceOf""];
""550_totalSupply"" [label=""totalSupply""];
""550_transfer"" [label=""transfer""];
""550_fallback"" [label=""fallback""];
""550_approveAndCall"" [label=""approveAndCall""];
""550_transferAnyERC20Token"" -> ""550_onlyOwner"";
}
"
0x182f2b554462230735699df74ec9606a3c4c0684.sol,BookERC20EthV1Dec,contract BookERC20EthV1Dec { enum BookType { ERC20EthV1 },0,"subgraph cluster_3343_BookERC20EthV1Dec {
label=""BookERC20EthV1Dec"";
""3343_cancelOrder"" [label=""cancelOrder""];
""3343_sumDepth"" [label=""sumDepth""];
""3343_transferFromBase"" [label=""transferFromBase""];
""3343_getOrderState"" [label=""getOrderState""];
""3343_debitFunds"" [label=""debitFunds""];
""3343_walkBook"" [label=""walkBook""];
""3343_init"" [label=""init""];
""3343_refundUnmatchedAndFinish"" [label=""refundUnmatchedAndFinish""];
""3343_withdrawCntr"" [label=""withdrawCntr""];
""3343_walkClientOrders"" [label=""walkClientOrders""];
""3343_transferFromRwrd"" [label=""transferFromRwrd""];
""3343_continueOrder"" [label=""continueOrder""];
""3343_processOrder"" [label=""processOrder""];
""3343_matchWithTheirs"" [label=""matchWithTheirs""];
""3343_computeCntrAmountUsingUnpacked"" [label=""computeCntrAmountUsingUnpacked""];
""3343_transferBase"" [label=""transferBase""];
""3343_matchAgainstBook"" [label=""matchAgainstBook""];
""3343_transferRwrd"" [label=""transferRwrd""];
""3343_changeFeeCollector"" [label=""changeFeeCollector""];
""3343_createOrder"" [label=""createOrder""];
""3343_getOrder"" [label=""getOrder""];
""3343_computeOppositePrice"" [label=""computeOppositePrice""];
""3343_isBuyPrice"" [label=""isBuyPrice""];
""3343_computeCntrAmountUsingPacked"" [label=""computeCntrAmountUsingPacked""];
""3343_BookERC20EthV1Dec"" [label=""BookERC20EthV1Dec""];
""3343_matchWithOccupiedPrice"" [label=""matchWithOccupiedPrice""];
""3343_creditExecutedFundsLessFees"" [label=""creditExecutedFundsLessFees""];
""3343_enterOrder"" [label=""enterOrder""];
""3343_removeOpenOrderFromBook"" [label=""removeOpenOrderFromBook""];
""3343_depositCntr"" [label=""depositCntr""];
""3343_getBookInfo"" [label=""getBookInfo""];
""3343_getClientBalances"" [label=""getClientBalances""];
""3343_recordTheirMatch"" [label=""recordTheirMatch""];
""3343_unpackPrice"" [label=""unpackPrice""];
""3343_matchWithTheirs"" -> ""3343_recordTheirMatch"";
""3343_processOrder"" -> ""3343_enterOrder"";
""3343_walkBook"" -> ""3343_isBuyPrice"";
""3343_recordTheirMatch"" -> ""3343_refundUnmatchedAndFinish"";
""3343_computeCntrAmountUsingPacked"" -> ""3343_computeCntrAmountUsingUnpacked"";
""3343_computeCntrAmountUsingPacked"" -> ""3343_unpackPrice"";
""3343_processOrder"" -> ""3343_unpackPrice"";
""3343_refundUnmatchedAndFinish"" -> ""3343_computeCntrAmountUsingPacked"";
""3343_createOrder"" -> ""3343_unpackPrice"";
""3343_createOrder"" -> ""3343_processOrder"";
""3343_processOrder"" -> ""3343_computeOppositePrice"";
""3343_createOrder"" -> ""3343_computeCntrAmountUsingUnpacked"";
""3343_createOrder"" -> ""3343_debitFunds"";
""3343_matchAgainstBook"" -> ""3343_matchWithOccupiedPrice"";
""3343_matchWithOccupiedPrice"" -> ""3343_matchWithTheirs"";
""3343_processOrder"" -> ""3343_refundUnmatchedAndFinish"";
""3343_matchWithTheirs"" -> ""3343_computeCntrAmountUsingPacked"";
""3343_recordTheirMatch"" -> ""3343_isBuyPrice"";
""3343_continueOrder"" -> ""3343_processOrder"";
""3343_processOrder"" -> ""3343_matchAgainstBook"";
""3343_cancelOrder"" -> ""3343_removeOpenOrderFromBook"";
""3343_processOrder"" -> ""3343_creditExecutedFundsLessFees"";
""3343_walkBook"" -> ""3343_sumDepth"";
""3343_cancelOrder"" -> ""3343_refundUnmatchedAndFinish"";
""3343_creditExecutedFundsLessFees"" -> ""3343_isBuyPrice"";
""3343_refundUnmatchedAndFinish"" -> ""3343_isBuyPrice"";
}
"
0x2690402e8d303c1ca4eceff9e17c85dd7383ef47.sol,FreezingToken,contract FreezingToken is PausableToken { struct freeze { uint256 amount; uint256 when; },0,"subgraph cluster_993_FreezingToken {
label=""FreezingToken"";
""993_transferAndFreeze"" [label=""transferAndFreeze""];
""993_defrostDate"" [label=""defrostDate""];
""993_transfer"" [label=""transfer""];
""993_transferFrom"" [label=""transferFrom""];
""993_freezedTokenOf"" [label=""freezedTokenOf""];
""993_freezeTokens"" [label=""freezeTokens""];
""993_transfer"" -> ""993_freezedTokenOf"";
""993_freezeTokens"" -> ""993_onlyOwner"";
""993_transferFrom"" -> ""993_transferFrom"";
""993_transferFrom"" -> ""993_balanceOf"";
""993_transfer"" -> ""993_transfer"";
""993_transferFrom"" -> ""993_freezedTokenOf"";
""993_transfer"" -> ""993_balanceOf"";
""993_transferAndFreeze"" -> ""993_transfer"";
}
"
0x01c0987e88f778df6640787226bc96354e1a9766.sol,UltrAlphaToken,"contract UltrAlphaToken is PausableToken { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; event Burn(address indexed burner, uint256 value); modifier validDestination( address to ){ require(to != address(0x0)); require(to != address(this)); _; }",0,"subgraph cluster_912_UltrAlphaToken {
label=""UltrAlphaToken"";
""912_transferFrom"" [label=""transferFrom""];
""912_constructor"" [label=""constructor""];
""912__burn"" [label=""_burn""];
""912_transfer"" [label=""transfer""];
""912_burn"" [label=""burn""];
""912_transferFrom"" -> ""912_transferFrom"";
""912_burn"" -> ""912__burn"";
""912_transferFrom"" -> ""912_validDestination"";
""912_transfer"" -> ""912_transfer"";
""912_transfer"" -> ""912_validDestination"";
}
"
0x41b8578b7fe2bdcc4cb5c8e6ab18b11880072208.sol,BitcoinQuick,"contract BitcoinQuick { string public constant symbol = ; string public constant name = ; uint public constant decimals = 8; uint _totalSupply = 21000000 * 10 ** decimals; uint public marketSupply; uint public marketPrice; address owner; address airDropVerify; uint public airDropAmount; uint32 public airDropHeight; mapping (address => bool) public airDropMembers; mapping (address => uint) accounts; mapping (address => mapping (address => uint)) allowed; event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value); function BitcoinQuick() public { owner = msg.sender; accounts[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_572_BitcoinQuick {
label=""BitcoinQuick"";
""572_transfer"" [label=""transfer""];
""572_approve"" [label=""approve""];
""572_balanceOf"" [label=""balanceOf""];
""572_allowance"" [label=""allowance""];
""572_airDropSetup"" [label=""airDropSetup""];
""572_transferFrom"" [label=""transferFrom""];
""572_crowdsaleSetup"" [label=""crowdsaleSetup""];
""572_airDropJoin"" [label=""airDropJoin""];
""572_withdrawFunds"" [label=""withdrawFunds""];
""572_totalSupply"" [label=""totalSupply""];
""572_BitcoinQuick"" [label=""BitcoinQuick""];
""572_purchase"" [label=""purchase""];
}
"
0x30ed9d2a07f4a79557c8e75ad4d95071a18af0bc.sol,CryptoSagaHero,"contract CryptoSagaHero is ERC721Token, Claimable, Pausable, AccessMint, AccessDeploy, AccessDeposit { string public constant name = ; string public constant symbol = ; struct HeroClass { string className; uint8 classRank; uint8 classRace; uint32 classAge; uint8 classType; uint32 maxLevel; uint8 aura; uint32[5] baseStats; uint32[5] minIVForStats; uint32[5] maxIVForStats; uint32 currentNumberOfInstancedHeroes; }",0,"subgraph cluster_2787_CryptoSagaHero {
label=""CryptoSagaHero"";
""2787_mint"" [label=""mint""];
""2787_getHeroClassId"" [label=""getHeroClassId""];
""2787_setRequiredExpIncreaseFactor"" [label=""setRequiredExpIncreaseFactor""];
""2787_setGoldContract"" [label=""setGoldContract""];
""2787_defineType"" [label=""defineType""];
""2787_levelUp"" [label=""levelUp""];
""2787_getGoldDepositOfAddress"" [label=""getGoldDepositOfAddress""];
""2787_CryptoSagaHero"" [label=""CryptoSagaHero""];
""2787_getTokenIdOfAddressAndIndex"" [label=""getTokenIdOfAddressAndIndex""];
""2787_transferDeposit"" [label=""transferDeposit""];
""2787_deploy"" [label=""deploy""];
""2787_getHeroAvailableAt"" [label=""getHeroAvailableAt""];
""2787_random"" [label=""random""];
""2787_getHeroRequiredGoldForLevelUp"" [label=""getHeroRequiredGoldForLevelUp""];
""2787_setHeroName"" [label=""setHeroName""];
""2787_withdrawDeposit"" [label=""withdrawDeposit""];
""2787_getHeroLocation"" [label=""getHeroLocation""];
""2787_getClassName"" [label=""getClassName""];
""2787_getClassMintCount"" [label=""getClassMintCount""];
""2787_getHeroBP"" [label=""getHeroBP""];
""2787_getTotalBPOfAddress"" [label=""getTotalBPOfAddress""];
""2787_numberOfHeroClasses"" [label=""numberOfHeroClasses""];
""2787_getClassRank"" [label=""getClassRank""];
""2787_getHeroName"" [label=""getHeroName""];
""2787_addExp"" [label=""addExp""];
""2787_getHeroInfo"" [label=""getHeroInfo""];
""2787_getHeroLevel"" [label=""getHeroLevel""];
""2787_addDeposit"" [label=""addDeposit""];
""2787_getClassInfo"" [label=""getClassInfo""];
""2787_setRequiredGoldIncreaseFactor"" [label=""setRequiredGoldIncreaseFactor""];
""2787_getHeroRequiredExpForLevelUp"" [label=""getHeroRequiredExpForLevelUp""];
""2787_CryptoSagaHero"" -> ""2787_defineType"";
""2787_addExp"" -> ""2787_ownerOf"";
""2787_setGoldContract"" -> ""2787_onlyOwner"";
""2787_addDeposit"" -> ""2787_onlyAccessDeposit"";
""2787_mint"" -> ""2787__mint"";
""2787_levelUp"" -> ""2787_whenNotPaused"";
""2787_getTotalBPOfAddress"" -> ""2787_getHeroBP"";
""2787_mint"" -> ""2787_onlyAccessMint"";
""2787_deploy"" -> ""2787_onlyAccessDeploy"";
""2787_levelUp"" -> ""2787_ownerOf"";
""2787_defineType"" -> ""2787_onlyOwner"";
""2787_deploy"" -> ""2787_ownerOf"";
""2787_setRequiredGoldIncreaseFactor"" -> ""2787_onlyOwner"";
""2787_levelUp"" -> ""2787_getHeroRequiredExpForLevelUp"";
""2787_mint"" -> ""2787_random"";
""2787_getTokenIdOfAddressAndIndex"" -> ""2787_tokensOf"";
""2787_transferDeposit"" -> ""2787_whenNotPaused"";
""2787_getTotalBPOfAddress"" -> ""2787_tokensOf"";
""2787_setHeroName"" -> ""2787_onlyOwnerOf"";
""2787_levelUp"" -> ""2787_getHeroRequiredGoldForLevelUp"";
""2787_setRequiredExpIncreaseFactor"" -> ""2787_onlyOwner"";
""2787_levelUp"" -> ""2787_onlyOwnerOf"";
""2787_CryptoSagaHero"" -> ""2787_setGoldContract"";
""2787_addExp"" -> ""2787_onlyAccessDeploy"";
}
"
0xf072f26100522ff1d5ecf40e74db5c25643b3e36.sol,PlaceToken,"contract PlaceToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.01 ether; uint256 private firstStepLimit = 0.8 ether; uint256 private secondStepLimit = 12 ether; mapping (uint256 => address) public placeIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public placeIndexToApproved; mapping (uint256 => uint256) private placeIndexToPrice; address public ceoAddress; struct Place { string name; string country; string owner_name; }",0,"subgraph cluster_863_PlaceToken {
label=""PlaceToken"";
""863_PlaceToken"" [label=""PlaceToken""];
""863_createContractPlace"" [label=""createContractPlace""];
""863_approve"" [label=""approve""];
""863_name"" [label=""name""];
""863__owns"" [label=""_owns""];
""863__approved"" [label=""_approved""];
""863_setStartingPrice"" [label=""setStartingPrice""];
""863_setOwnerName"" [label=""setOwnerName""];
""863_payout"" [label=""payout""];
""863_symbol"" [label=""symbol""];
""863_takeOwnership"" [label=""takeOwnership""];
""863_transferFrom"" [label=""transferFrom""];
""863__payout"" [label=""_payout""];
""863_setCEO"" [label=""setCEO""];
""863_balanceOf"" [label=""balanceOf""];
""863_purchase"" [label=""purchase""];
""863__addressNotNull"" [label=""_addressNotNull""];
""863__transfer"" [label=""_transfer""];
""863_totalSupply"" [label=""totalSupply""];
""863__createPlace"" [label=""_createPlace""];
""863_getStartingPrice"" [label=""getStartingPrice""];
""863_implementsERC721"" [label=""implementsERC721""];
""863_getPlace"" [label=""getPlace""];
""863_priceOf"" [label=""priceOf""];
""863_transfer"" [label=""transfer""];
""863_ownerOf"" [label=""ownerOf""];
""863_transfer"" -> ""863__owns"";
""863_setCEO"" -> ""863_onlyCEO"";
""863_approve"" -> ""863__owns"";
""863__createPlace"" -> ""863__transfer"";
""863_payout"" -> ""863_onlyCEO"";
""863_transferFrom"" -> ""863__approved"";
""863_payout"" -> ""863__payout"";
""863_purchase"" -> ""863__transfer"";
""863_createContractPlace"" -> ""863_onlyCEO"";
""863_transferFrom"" -> ""863__owns"";
""863_purchase"" -> ""863__addressNotNull"";
""863_takeOwnership"" -> ""863__transfer"";
""863_takeOwnership"" -> ""863__addressNotNull"";
""863_setStartingPrice"" -> ""863_onlyCEO"";
""863_createContractPlace"" -> ""863__createPlace"";
""863_setOwnerName"" -> ""863__owns"";
""863_transfer"" -> ""863__transfer"";
""863_transferFrom"" -> ""863__addressNotNull"";
""863_takeOwnership"" -> ""863__approved"";
""863_transferFrom"" -> ""863__transfer"";
""863_transfer"" -> ""863__addressNotNull"";
}
"
0x475a8101fdde7f7246e31be77dd7dcb80f25d735.sol,Exchange,contract Exchange { struct Order { address creator; address token; bool buy; uint price; uint amount; },0,"subgraph cluster_1099_Exchange {
label=""Exchange"";
""1099_cancelOrder"" [label=""cancelOrder""];
""1099_depositToken"" [label=""depositToken""];
""1099_Exchange"" [label=""Exchange""];
""1099_balanceAdd"" [label=""balanceAdd""];
""1099_safeAdd"" [label=""safeAdd""];
""1099_decFeeDeposit"" [label=""decFeeDeposit""];
""1099_fillOrder"" [label=""fillOrder""];
""1099_balanceSub"" [label=""balanceSub""];
""1099_placeBuy"" [label=""placeBuy""];
""1099_placeSell"" [label=""placeSell""];
""1099_withdrawToken"" [label=""withdrawToken""];
""1099_fallback"" [label=""fallback""];
""1099_withdrawEther"" [label=""withdrawEther""];
""1099_transferOwnership"" [label=""transferOwnership""];
""1099_safeSub"" [label=""safeSub""];
""1099_safeMul"" [label=""safeMul""];
""1099_calcAmountEther"" [label=""calcAmountEther""];
""1099_cancelOrder"" -> ""1099_balanceAdd"";
""1099_placeSell"" -> ""1099_calcAmountEther"";
""1099_fillOrder"" -> ""1099_balanceSub"";
""1099_decFeeDeposit"" -> ""1099_onlyOwner"";
""1099_fillOrder"" -> ""1099_calcAmountEther"";
""1099_withdrawEther"" -> ""1099_balanceSub"";
""1099_transferOwnership"" -> ""1099_onlyOwner"";
""1099_placeBuy"" -> ""1099_calcAmountEther"";
""1099_placeBuy"" -> ""1099_balanceSub"";
""1099_decFeeDeposit"" -> ""1099_safeSub"";
""1099_depositToken"" -> ""1099_balanceAdd"";
""1099_fillOrder"" -> ""1099_balanceAdd"";
""1099_placeSell"" -> ""1099_balanceSub"";
""1099_withdrawToken"" -> ""1099_balanceSub"";
""1099_balanceAdd"" -> ""1099_safeAdd"";
""1099_calcAmountEther"" -> ""1099_safeMul"";
""1099_cancelOrder"" -> ""1099_calcAmountEther"";
""1099_balanceSub"" -> ""1099_safeSub"";
""1099_fallback"" -> ""1099_balanceAdd"";
}
"
0xb3ed21d5475817134c8f086d46dd1b5f6c49de0a.sol,ZethrDice,contract ZethrDice is ZethrGame { struct Bet { uint56 tokenValue; uint48 blockNumber; uint8 tier; uint8 rollUnder; uint8 numRolls; },0,"subgraph cluster_2512_ZethrDice {
label=""ZethrDice"";
""2512_calculateProfit"" [label=""calculateProfit""];
""2512_constructor"" [label=""constructor""];
""2512_getLastRollOutput"" [label=""getLastRollOutput""];
""2512_getRollResults"" [label=""getRollResults""];
""2512_getBet"" [label=""getBet""];
""2512_finishBetFrom"" [label=""finishBetFrom""];
""2512_getRollOutput"" [label=""getRollOutput""];
""2512_isBetValid"" [label=""isBetValid""];
""2512_execute"" [label=""execute""];
""2512_execute"" -> ""2512_getBet"";
""2512_execute"" -> ""2512_isNotPaused"";
""2512_isBetValid"" -> ""2512_calculateProfit"";
""2512_execute"" -> ""2512_betIsValid"";
""2512_getRollOutput"" -> ""2512_random"";
""2512_finishBetFrom"" -> ""2512_getRollResults"";
""2512_execute"" -> ""2512_finishBetFrom"";
""2512_getRollResults"" -> ""2512_random"";
""2512_getRollOutput"" -> ""2512_calculateProfit"";
""2512_execute"" -> ""2512_bankrollOnly"";
""2512_isBetValid"" -> ""2512_getMaxProfit"";
""2512_getLastRollOutput"" -> ""2512_getBet"";
""2512_constructor"" -> ""2512_constructor"";
""2512_finishBetFrom"" -> ""2512_getBet"";
""2512_getRollResults"" -> ""2512_calculateProfit"";
""2512_getLastRollOutput"" -> ""2512_getRollOutput"";
""2512_execute"" -> ""2512_hasNotBetThisBlock"";
}
"
0x1aced77b121ed465a95fb5471e3d409fd2d4ede6.sol,SOCIALXBOUNTY,"contract SOCIALXBOUNTY is BaseToken, AirdropToken, ICOToken { function SOCIALXBOUNTY() public { totalSupply = 5000000000e18; name = ; symbol = ; decimals = 18; balanceOf[0xf3BF62e473D73eeFB9E44F1489C68700DD9D3607] = totalSupply; Transfer(address(0), 0xf3BF62e473D73eeFB9E44F1489C68700DD9D3607, totalSupply); airAmount = 5000e18; airBegintime = 1546660800; airEndtime = 1557028800; airSender = 0xB043EB69c12f8402a17A7cb3906Cd0Fc46798A23; airLimitCount = 1; icoRatio = 2e5; icoBegintime = 1546660800; icoEndtime = 1557028800; icoSender = 0x074D114014Fb06EC196F91020176C8f17AF8f597; icoHolder = 0x074D114014Fb06EC196F91020176C8f17AF8f597; }",0,"subgraph cluster_495_SOCIALXBOUNTY {
label=""SOCIALXBOUNTY"";
""495_SOCIALXBOUNTY"" [label=""SOCIALXBOUNTY""];
""495_fallback"" [label=""fallback""];
""495_fallback"" -> ""495_ico"";
""495_fallback"" -> ""495_airdrop"";
}
"
0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a.sol,BitSTDLogic,contract BitSTDLogic { address public owner; BitSTDData private data; constructor(address dataAddress) { data = BitSTDData(dataAddress); owner = msg.sender; },0,"subgraph cluster_1032_BitSTDLogic {
label=""BitSTDLogic"";
""1032_transfer"" [label=""transfer""];
""1032_name"" [label=""name""];
""1032_symbol"" [label=""symbol""];
""1032_setBalanceOf"" [label=""setBalanceOf""];
""1032_freezeAccount"" [label=""freezeAccount""];
""1032_buyPrice"" [label=""buyPrice""];
""1032_totalSupply"" [label=""totalSupply""];
""1032_decimals"" [label=""decimals""];
""1032_sell"" [label=""sell""];
""1032__transfer"" [label=""_transfer""];
""1032_approveAndCall"" [label=""approveAndCall""];
""1032_burn"" [label=""burn""];
""1032_transferFrom"" [label=""transferFrom""];
""1032_buy"" [label=""buy""];
""1032_balanceOf"" [label=""balanceOf""];
""1032_approve"" [label=""approve""];
""1032_setData"" [label=""setData""];
""1032_transferAuthority"" [label=""transferAuthority""];
""1032_mintToken"" [label=""mintToken""];
""1032_migration"" [label=""migration""];
""1032_getOldBalanceOf"" [label=""getOldBalanceOf""];
""1032_sellPrice"" [label=""sellPrice""];
""1032_transferDataAuthority"" [label=""transferDataAuthority""];
""1032_constructor"" [label=""constructor""];
""1032_frozenAccount"" [label=""frozenAccount""];
""1032_allowance"" [label=""allowance""];
""1032_burnFrom"" [label=""burnFrom""];
""1032_transfer"" -> ""1032_onlyOwner"";
""1032_approveAndCall"" -> ""1032_onlyOwner"";
""1032_freezeAccount"" -> ""1032_onlyOwner"";
""1032_sell"" -> ""1032__transfer"";
""1032_mintToken"" -> ""1032_totalSupply"";
""1032_burn"" -> ""1032_totalSupply"";
""1032_transfer"" -> ""1032__transfer"";
""1032_burnFrom"" -> ""1032_totalSupply"";
""1032_burn"" -> ""1032_balanceOf"";
""1032_transferDataAuthority"" -> ""1032_onlyOwner"";
""1032_burnFrom"" -> ""1032_setBalanceOf"";
""1032_setData"" -> ""1032_onlyOwner"";
""1032_mintToken"" -> ""1032_setBalanceOf"";
""1032_buy"" -> ""1032__transfer"";
""1032_burn"" -> ""1032_onlyOwner"";
""1032_transferFrom"" -> ""1032_onlyOwner"";
""1032_setBalanceOf"" -> ""1032_onlyOwner"";
""1032_transferFrom"" -> ""1032__transfer"";
""1032_mintToken"" -> ""1032_balanceOf"";
""1032__transfer"" -> ""1032_balanceOf"";
""1032_burnFrom"" -> ""1032_onlyOwner"";
""1032_migration"" -> ""1032_onlyOwner"";
""1032_burnFrom"" -> ""1032_balanceOf"";
""1032_transferAuthority"" -> ""1032_onlyOwner"";
""1032_approveAndCall"" -> ""1032_approve"";
""1032_mintToken"" -> ""1032_onlyOwner"";
""1032__transfer"" -> ""1032_setBalanceOf"";
""1032_burn"" -> ""1032_setBalanceOf"";
""1032_migration"" -> ""1032__transfer"";
""1032_approve"" -> ""1032_onlyOwner"";
}
"
0x5ca3b9dac85da4de4030e59c1a0248004209e348.sol,DocumentStore,contract DocumentStore is Ownable { string public name; string public version = ; mapping(bytes32 => uint) documentIssued; mapping(bytes32 => uint) documentRevoked; event DocumentIssued(bytes32 indexed document); event DocumentRevoked( bytes32 indexed document ); constructor( string _name ) public { name = _name; },0,"subgraph cluster_294_DocumentStore {
label=""DocumentStore"";
""294_getIssuedBlock"" [label=""getIssuedBlock""];
""294_isRevoked"" [label=""isRevoked""];
""294_constructor"" [label=""constructor""];
""294_isIssuedBefore"" [label=""isIssuedBefore""];
""294_issue"" [label=""issue""];
""294_isRevokedBefore"" [label=""isRevokedBefore""];
""294_revoke"" [label=""revoke""];
""294_isIssued"" [label=""isIssued""];
""294_issue"" -> ""294_onlyNotIssued"";
""294_issue"" -> ""294_onlyOwner"";
""294_getIssuedBlock"" -> ""294_onlyIssued"";
""294_revoke"" -> ""294_onlyNotRevoked"";
""294_revoke"" -> ""294_onlyOwner"";
}
"
0x716989fa21d5043165079ddbfd04a76a001a595a.sol,COCTokenBase,"contract COCTokenBase is ERC20 { string public name; string public symbol; uint8 public decimals = 18; address public administrator; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowances; event Burn(address indexed from, uint256 value); function COCTokenBase(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals) public { name = _tokenName; symbol = _tokenSymbol; decimals = _decimals; administrator = msg.sender; totalSupply = _initialSupply * 10 ** uint256(decimals); balances[administrator] = totalSupply; }",0,"subgraph cluster_627_COCTokenBase {
label=""COCTokenBase"";
""627_balanceOf"" [label=""balanceOf""];
""627_burn"" [label=""burn""];
""627_transfer"" [label=""transfer""];
""627_burnFrom"" [label=""burnFrom""];
""627_transferFrom"" [label=""transferFrom""];
""627_approve"" [label=""approve""];
""627_transferOfPower"" [label=""transferOfPower""];
""627_approveAndCall"" [label=""approveAndCall""];
""627__transfer"" [label=""_transfer""];
""627_decreaseApproval"" [label=""decreaseApproval""];
""627_COCTokenBase"" [label=""COCTokenBase""];
""627_allowance"" [label=""allowance""];
""627_increaseApproval"" [label=""increaseApproval""];
""627_transferOfPower"" -> ""627__transfer"";
""627_approveAndCall"" -> ""627_approve"";
""627_transfer"" -> ""627__transfer"";
""627_transferFrom"" -> ""627__transfer"";
}
"
0x925ab290d36cbd9761535faa95a623612721ff17.sol,BitLoanex,"contract BitLoanex is Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 8; uint256 public rate; uint256 public constant CAP = 126000; uint256 public constant START = 1514160000; uint256 public DAYS = 30; uint256 public days_interval = 4; uint[9] public deadlines = [START, START.add(1* days_interval * 1 days), START.add(2* days_interval * 1 days), START.add(3* days_interval * 1 days), START.add(4* days_interval * 1 days), START.add(5* days_interval * 1 days), START.add(6* days_interval * 1 days), START.add(7* days_interval * 1 days), START.add(8* days_interval * 1 days) ]; uint[9] public rates = [2000 ,1900, 1800, 1700, 1600, 1500, 1400, 1300, 1200]; bool public initialized = true; uint256 public raisedAmount = 0; uint256 public constant INITIAL_SUPPLY = 10000000000000000; uint256 public totalSupply; address[] public investors; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; event Approval(address indexed owner, address indexed spender, uint256 value); event Transfer(address indexed from, address indexed to, uint256 value); event BoughtTokens(address indexed to, uint256 value); function BitLoanex() public { totalSupply = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; }",0,"subgraph cluster_887_BitLoanex {
label=""BitLoanex"";
""887_fallback"" [label=""fallback""];
""887_destroy"" [label=""destroy""];
""887_isActive"" [label=""isActive""];
""887_balanceOf"" [label=""balanceOf""];
""887_allowance"" [label=""allowance""];
""887_BitLoanex"" [label=""BitLoanex""];
""887_setDays"" [label=""setDays""];
""887_initialize"" [label=""initialize""];
""887_goalReached"" [label=""goalReached""];
""887_approve"" [label=""approve""];
""887_increaseApproval"" [label=""increaseApproval""];
""887_tokenAvailable"" [label=""tokenAvailable""];
""887_buyTokens"" [label=""buyTokens""];
""887_getInvestors"" [label=""getInvestors""];
""887_transfer"" [label=""transfer""];
""887_transferFrom"" [label=""transferFrom""];
""887_decreaseApproval"" [label=""decreaseApproval""];
""887_getRate"" [label=""getRate""];
""887_setRate"" [label=""setRate""];
""887_destroy"" -> ""887_onlyOwner"";
""887_buyTokens"" -> ""887_getRate"";
""887_setDays"" -> ""887_onlyOwner"";
""887_isActive"" -> ""887_goalReached"";
""887_fallback"" -> ""887_buyTokens"";
""887_initialize"" -> ""887_onlyOwner"";
""887_setRate"" -> ""887_onlyOwner"";
}
"
0xd5f4fd235a49fabdb75fe147f68b40c1543a95f9.sol,UraniumNetworkToken,"contract UraniumNetworkToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 100000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 12500000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_911_UraniumNetworkToken {
label=""UraniumNetworkToken"";
""911_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""911_getTokens"" [label=""getTokens""];
""911_balanceOf"" [label=""balanceOf""];
""911_approve"" [label=""approve""];
""911_distr"" [label=""distr""];
""911_getTokenBalance"" [label=""getTokenBalance""];
""911_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""911_updateTokensPerEth"" [label=""updateTokensPerEth""];
""911_doAirdrop"" [label=""doAirdrop""];
""911_fallback"" [label=""fallback""];
""911_finishDistribution"" [label=""finishDistribution""];
""911_transfer"" [label=""transfer""];
""911_allowance"" [label=""allowance""];
""911_transferFrom"" [label=""transferFrom""];
""911_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""911_burn"" [label=""burn""];
""911_withdraw"" [label=""withdraw""];
""911_adminClaimAirdrop"" -> ""911_onlyOwner"";
""911_adminClaimAirdropMultiple"" -> ""911_doAirdrop"";
""911_finishDistribution"" -> ""911_onlyOwner"";
""911_getTokens"" -> ""911_canDistr"";
""911_withdrawAltcoinTokens"" -> ""911_onlyOwner"";
""911_fallback"" -> ""911_getTokens"";
""911_finishDistribution"" -> ""911_canDistr"";
""911_transferFrom"" -> ""911_onlyPayloadSize"";
""911_getTokens"" -> ""911_distr"";
""911_updateTokensPerEth"" -> ""911_onlyOwner"";
""911_distr"" -> ""911_canDistr"";
""911_transfer"" -> ""911_onlyPayloadSize"";
""911_burn"" -> ""911_onlyOwner"";
""911_withdraw"" -> ""911_onlyOwner"";
""911_adminClaimAirdrop"" -> ""911_doAirdrop"";
""911_adminClaimAirdropMultiple"" -> ""911_onlyOwner"";
}
"
0x5438b0938fb88a979032f45b87d2d1aeffe5cc28.sol,Gifto,contract Gifto is ERC20Interface { uint public constant decimals = 5; string public constant symbol = ; string public constant name = ; bool public _selling = false; uint public _totalSupply = 10 ** 14; uint public _originalBuyPrice = 10 ** 10; address public owner; mapping(address => uint256) balances; mapping(address => bool) approvedInvestorList; mapping(address => uint256) deposit; address[] buyers; uint _icoPercent = 10; uint public _icoSupply = _totalSupply * _icoPercent / 100; uint public _minimumBuy = 10 ** 17; uint public _maximumBuy = 30 * 10 ** 18; modifier onlyOwner() { require(msg.sender == owner); _; },0,"subgraph cluster_865_Gifto {
label=""Gifto"";
""865_isSellingNow"" [label=""isSellingNow""];
""865_filterBuyers"" [label=""filterBuyers""];
""865_returnETHforNormalBuyers"" [label=""returnETHforNormalBuyers""];
""865_getTotalDeposit"" [label=""getTotalDeposit""];
""865_withdraw"" [label=""withdraw""];
""865_isApprovedInvestor"" [label=""isApprovedInvestor""];
""865_getInvestorBuyers"" [label=""getInvestorBuyers""];
""865_removeInvestorList"" [label=""removeInvestorList""];
""865_turnOnSale"" [label=""turnOnSale""];
""865_setIcoPercent"" [label=""setIcoPercent""];
""865_setMaximumBuy"" [label=""setMaximumBuy""];
""865_transfer"" [label=""transfer""];
""865_getNormalBuyers"" [label=""getNormalBuyers""];
""865_totalSupply"" [label=""totalSupply""];
""865_buy"" [label=""buy""];
""865_setMinimumBuy"" [label=""setMinimumBuy""];
""865_deliveryToken"" [label=""deliveryToken""];
""865_fallback"" [label=""fallback""];
""865_getDeposit"" [label=""getDeposit""];
""865_turnOffSale"" [label=""turnOffSale""];
""865_addInvestorList"" [label=""addInvestorList""];
""865_balanceOf"" [label=""balanceOf""];
""865_setBuyPrice"" [label=""setBuyPrice""];
""865_Gifto"" [label=""Gifto""];
""865_fallback"" -> ""865_validValue"";
""865_turnOnSale"" -> ""865_onlyOwner"";
""865_returnETHforNormalBuyers"" -> ""865_onlyOwner"";
""865_setBuyPrice"" -> ""865_onlyOwner"";
""865_withdraw"" -> ""865_onlyOwner"";
""865_setMinimumBuy"" -> ""865_onlyOwner"";
""865_buy"" -> ""865_validOriginalBuyPrice"";
""865_buy"" -> ""865_onSale"";
""865_buy"" -> ""865_onlyNotOwner"";
""865_getNormalBuyers"" -> ""865_filterBuyers"";
""865_setIcoPercent"" -> ""865_onlyOwner"";
""865_removeInvestorList"" -> ""865_onlyOwner"";
""865_getInvestorBuyers"" -> ""865_filterBuyers"";
""865_deliveryToken"" -> ""865_onlyOwner"";
""865_turnOffSale"" -> ""865_onlyOwner"";
""865_addInvestorList"" -> ""865_onlyOwner"";
""865_buy"" -> ""865_validInvestor"";
""865_setMaximumBuy"" -> ""865_onlyOwner"";
""865_deliveryToken"" -> ""865_validOriginalBuyPrice"";
}
"
0x0df55c565881b253d307e9a8a95c907dfa228283.sol,Monoplasma,"contract Monoplasma is BalanceVerifier, Ownable { using SafeMath for uint256; event OperatorChanged(address indexed newOperator); event AdminFeeChanged(uint adminFee); uint public blockFreezeSeconds; mapping (uint => uint) public blockTimestamp; address public operator; uint public adminFee; IERC20 public token; mapping (address => uint) public earnings; mapping (address => uint) public withdrawn; uint public totalWithdrawn; uint public totalProven; constructor(address tokenAddress, uint blockFreezePeriodSeconds, uint _adminFee) public { blockFreezeSeconds = blockFreezePeriodSeconds; token = IERC20(tokenAddress); operator = msg.sender; setAdminFee(_adminFee); }",0,"subgraph cluster_850_Monoplasma {
label=""Monoplasma"";
""850_onCommit"" [label=""onCommit""];
""850_withdrawAllFor"" [label=""withdrawAllFor""];
""850_withdrawAllTo"" [label=""withdrawAllTo""];
""850_onVerifySuccess"" [label=""onVerifySuccess""];
""850_withdrawAll"" [label=""withdrawAll""];
""850_setOperator"" [label=""setOperator""];
""850_withdrawTo"" [label=""withdrawTo""];
""850_setAdminFee"" [label=""setAdminFee""];
""850_withdrawFor"" [label=""withdrawFor""];
""850_constructor"" [label=""constructor""];
""850_withdraw"" [label=""withdraw""];
""850_withdrawFor"" -> ""850_withdrawTo"";
""850_withdrawAllTo"" -> ""850_prove"";
""850_setOperator"" -> ""850_onlyOwner"";
""850_withdrawAllTo"" -> ""850_withdrawTo"";
""850_constructor"" -> ""850_setAdminFee"";
""850_withdrawAllFor"" -> ""850_withdrawTo"";
""850_withdrawAll"" -> ""850_withdrawAllFor"";
""850_setAdminFee"" -> ""850_onlyOwner"";
""850_withdraw"" -> ""850_withdrawTo"";
""850_withdrawAllFor"" -> ""850_prove"";
}
"
0xfef5497bc53a69875e02ae5b14eeff668f09a729.sol,Infinity,"contract Infinity { using SafeMath for uint256; string public name = ; string public symbol = ; uint256 public initAmount; uint256 public amountProportion; uint256 public dividend; uint256 public jackpot; uint256 public jackpotProportion; uint256 public scientists; uint256 public promotionRatio; uint256 public duration; bool public activated = false; address public developerAddr; uint256 public rId; uint256 public sId; mapping (uint256 => Indatasets.Round) public round; mapping (uint256 => mapping (uint256 => Indatasets.Stage)) public stage; mapping (address => Indatasets.Player) public player; mapping (uint256 => mapping (address => uint256)) public playerRoundAmount; mapping (uint256 => mapping (address => uint256)) public playerRoundSid; mapping (uint256 => mapping (address => uint256)) public playerRoundwithdrawAmountFlag; mapping (uint256 => mapping (uint256 => mapping (address => uint256))) public playerStageAmount; mapping (uint256 => mapping (uint256 => mapping (address => uint256))) public playerStageAccAmount; uint256[] amountLimit = [0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]; constructor() public { developerAddr = msg.sender; }",0,"subgraph cluster_2138_Infinity {
label=""Infinity"";
""2138_getPlayerDividendByRound"" [label=""getPlayerDividendByRound""];
""2138_getPlayerDividendByStage"" [label=""getPlayerDividendByStage""];
""2138_buyPlayerDataRecord"" [label=""buyPlayerDataRecord""];
""2138_getPlayerJackpot"" [label=""getPlayerJackpot""];
""2138_buyRoundDataRecord"" [label=""buyRoundDataRecord""];
""2138_fallback"" [label=""fallback""];
""2138_withdraw"" [label=""withdraw""];
""2138_getPersonalStatus"" [label=""getPersonalStatus""];
""2138_buy"" [label=""buy""];
""2138_activate"" [label=""activate""];
""2138_initStage"" [label=""initStage""];
""2138_promotionDataRecord"" [label=""promotionDataRecord""];
""2138_constructor"" [label=""constructor""];
""2138_endStage"" [label=""endStage""];
""2138_limitAmount"" [label=""limitAmount""];
""2138_getPlayerDividend"" [label=""getPlayerDividend""];
""2138_buyAnalysis"" [label=""buyAnalysis""];
""2138_getValueInfo"" [label=""getValueInfo""];
""2138_getHeadInfo"" [label=""getHeadInfo""];
""2138_endRound"" [label=""endRound""];
""2138_buyStageDataRecord"" [label=""buyStageDataRecord""];
""2138_withdraw"" -> ""2138_getPlayerDividendByStage"";
""2138_buy"" -> ""2138_senderVerify"";
""2138_buyAnalysis"" -> ""2138_buyPlayerDataRecord"";
""2138_fallback"" -> ""2138_buyAnalysis"";
""2138_getValueInfo"" -> ""2138_getPlayerDividend"";
""2138_buyStageDataRecord"" -> ""2138_stageVerify"";
""2138_buyAnalysis"" -> ""2138_promotionDataRecord"";
""2138_fallback"" -> ""2138_senderVerify"";
""2138_buy"" -> ""2138_buyAnalysis"";
""2138_getPlayerDividendByStage"" -> ""2138_getPlayerJackpot"";
""2138_getPlayerDividend"" -> ""2138_getPlayerDividendByRound"";
""2138_fallback"" -> ""2138_amountVerify"";
""2138_buyAnalysis"" -> ""2138_buyRoundDataRecord"";
""2138_fallback"" -> ""2138_isActivated"";
""2138_withdraw"" -> ""2138_playerVerify"";
""2138_buyAnalysis"" -> ""2138_limitAmount"";
""2138_withdraw"" -> ""2138_isActivated"";
""2138_buy"" -> ""2138_isActivated"";
""2138_buy"" -> ""2138_amountVerify"";
""2138_withdraw"" -> ""2138_senderVerify"";
""2138_getPersonalStatus"" -> ""2138_getPlayerDividendByRound"";
""2138_getPlayerDividendByRound"" -> ""2138_getPlayerJackpot"";
""2138_buyAnalysis"" -> ""2138_initStage"";
""2138_activate"" -> ""2138_initStage"";
""2138_buyAnalysis"" -> ""2138_endStage"";
""2138_buyAnalysis"" -> ""2138_endRound"";
""2138_buyAnalysis"" -> ""2138_buyStageDataRecord"";
}
"
0x00571808479ced690a6948992e32b1f3e69df557.sol,SafeMath,"contract SafeMath { function safeMul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; }",0,"subgraph cluster_97_SafeMath {
label=""SafeMath"";
""97_safeSub"" [label=""safeSub""];
""97_safeDiv"" [label=""safeDiv""];
""97_safeMul"" [label=""safeMul""];
""97_safeAdd"" [label=""safeAdd""];
}
"
0x6beb418fc6e1958204ac8baddcf109b8e9694966.sol,MyToken,contract MyToken is Token { uint8 public constant decimalOfPrice = 10; uint256 public constant multiplierOfPrice = 10000000000; uint256 public constant multiplier = 1000000000000000000; uint256 public lpAskPrice = 100000000000; uint256 public lpBidPrice = 1; uint256 public lpAskVolume = 0; uint256 public lpBidVolume = 0; uint256 public lpMaxVolume = 1000000000000000000000000; uint256 public edgePerPosition = 1; uint256 public lpTargetPosition; uint256 public lpFeeBp = 10; bool public isLpStart = false; bool public isBurn = false; function MyToken() public { balances[msg.sender] = _totalSupply; lpTargetPosition = 200000000000000000000000000; },0,"subgraph cluster_1205_MyToken {
label=""MyToken"";
""1205_setEdgePerPosition"" [label=""setEdgePerPosition""];
""1205_fallback"" [label=""fallback""];
""1205_setLpMaxVolume"" [label=""setLpMaxVolume""];
""1205_sell"" [label=""sell""];
""1205_setLPTargetPostion"" [label=""setLPTargetPostion""];
""1205_burn"" [label=""burn""];
""1205_setLpFee"" [label=""setLpFee""];
""1205_getAmountOfLinkerBuy"" [label=""getAmountOfLinkerBuy""];
""1205_getLpBidPrice"" [label=""getLpBidPrice""];
""1205_setBurnStart"" [label=""setBurnStart""];
""1205_getAmountOfEtherSell"" [label=""getAmountOfEtherSell""];
""1205_getLpAskPrice"" [label=""getLpAskPrice""];
""1205_setLpIsStart"" [label=""setLpIsStart""];
""1205_buy"" [label=""buy""];
""1205_transferEther"" [label=""transferEther""];
""1205_MyToken"" [label=""MyToken""];
""1205_getLpIsWorking"" [label=""getLpIsWorking""];
""1205_setPrices"" [label=""setPrices""];
""1205_setEdgePerPosition"" -> ""1205_onlyOwner"";
""1205_setLPTargetPostion"" -> ""1205_totalSupply"";
""1205_getLpBidPrice"" -> ""1205_balanceOf"";
""1205_getAmountOfLinkerBuy"" -> ""1205_getLpAskPrice"";
""1205_sell"" -> ""1205_getAmountOfEtherSell"";
""1205_setLpIsStart"" -> ""1205_onlyOwner"";
""1205_setBurnStart"" -> ""1205_onlyOwner"";
""1205_getLpIsWorking"" -> ""1205_getLpBidPrice"";
""1205_sell"" -> ""1205_getLpIsWorking"";
""1205_setLpFee"" -> ""1205_onlyOwner"";
""1205_buy"" -> ""1205_getLpIsWorking"";
""1205_buy"" -> ""1205_getAmountOfLinkerBuy"";
""1205_setLpMaxVolume"" -> ""1205_onlyOwner"";
""1205_transferEther"" -> ""1205_onlyOwner"";
""1205_setPrices"" -> ""1205_onlyOwner"";
""1205_burn"" -> ""1205_onlyOwner"";
""1205_setLPTargetPostion"" -> ""1205_onlyOwner"";
""1205_getLpAskPrice"" -> ""1205_balanceOf"";
""1205_getLpIsWorking"" -> ""1205_getLpAskPrice"";
""1205_getAmountOfEtherSell"" -> ""1205_getLpBidPrice"";
}
"
0x584bf48227509f93ae7c7f2ac2e3e4364d58050b.sol,BasicToken,"contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; function transfer(address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); return true; }",0,"subgraph cluster_977_BasicToken {
label=""BasicToken"";
""977_transfer"" [label=""transfer""];
""977_balanceOf"" [label=""balanceOf""];
}
"
0xedd7868662f1ae17c53ddaea63469b4c1292ea7c.sol,NescrowExchangeService,"contract NescrowExchangeService { address owner = msg.sender; uint256 public feeRateMin = 200; uint256 public takerFeeRate = 0; uint256 public makerFeeRate = 0; address public feeAddress; mapping (address => bool) public admins; mapping (bytes32 => bool) public traded; mapping (bytes32 => uint256) public orderFills; mapping (bytes32 => bool) public withdrawn; mapping (bytes32 => bool) public transfers; mapping (address => mapping (address => uint256)) public balances; mapping (address => uint256) public tradesLocked; mapping (address => uint256) public disableFees; mapping (address => uint256) public tokenDecimals; mapping (address => bool) public tokenRegistered; event Deposit(address token, address user, uint256 amount, uint256 balance); event Withdraw(address token, address user, uint256 amount, uint256 balance); event TradesLock(address user); event TradesUnlock(address user); modifier onlyOwner { assert(msg.sender == owner); _; }",0,"subgraph cluster_2284_NescrowExchangeService {
label=""NescrowExchangeService"";
""2284_sendTips"" [label=""sendTips""];
""2284_deposit"" [label=""deposit""];
""2284_increaseBalance"" [label=""increaseBalance""];
""2284_transfer"" [label=""transfer""];
""2284_setAdmin"" [label=""setAdmin""];
""2284_safeMul"" [label=""safeMul""];
""2284_setOwner"" [label=""setOwner""];
""2284_transferTips"" [label=""transferTips""];
""2284_depositToken"" [label=""depositToken""];
""2284_isUserTakerFeeEnabled"" [label=""isUserTakerFeeEnabled""];
""2284_sendTipsToken"" [label=""sendTipsToken""];
""2284_safeAdd"" [label=""safeAdd""];
""2284_reduceBalance"" [label=""reduceBalance""];
""2284_setTakerFeeRate"" [label=""setTakerFeeRate""];
""2284_withdraw"" [label=""withdraw""];
""2284_trade"" [label=""trade""];
""2284_setMakerFeeRate"" [label=""setMakerFeeRate""];
""2284_tradesUnlock"" [label=""tradesUnlock""];
""2284_invalidateOrder"" [label=""invalidateOrder""];
""2284_setTokenDecimals"" [label=""setTokenDecimals""];
""2284_getOwner"" [label=""getOwner""];
""2284_withdrawAdmin"" [label=""withdrawAdmin""];
""2284_safeDiv"" [label=""safeDiv""];
""2284_safeSub"" [label=""safeSub""];
""2284_setFeeAddress"" [label=""setFeeAddress""];
""2284_setDisableFees"" [label=""setDisableFees""];
""2284_fallback"" [label=""fallback""];
""2284_tradeWithTips"" [label=""tradeWithTips""];
""2284_tradesLock"" [label=""tradesLock""];
""2284_isUserMakerFeeEnabled"" [label=""isUserMakerFeeEnabled""];
""2284_toTokenAmount"" [label=""toTokenAmount""];
""2284_setTokenDecimals"" -> ""2284_onlyAdmin"";
""2284_trade"" -> ""2284_increaseBalance"";
""2284_trade"" -> ""2284_isUserMakerFeeEnabled"";
""2284_trade"" -> ""2284_safeSub"";
""2284_tradeWithTips"" -> ""2284_reduceBalance"";
""2284_increaseBalance"" -> ""2284_safeAdd"";
""2284_trade"" -> ""2284_isUserTakerFeeEnabled"";
""2284_transfer"" -> ""2284_increaseBalance"";
""2284_trade"" -> ""2284_onlyAdmin"";
""2284_transferTips"" -> ""2284_increaseBalance"";
""2284_transferTips"" -> ""2284_reduceBalance"";
""2284_tradeWithTips"" -> ""2284_safeAdd"";
""2284_sendTips"" -> ""2284_safeDiv"";
""2284_setAdmin"" -> ""2284_onlyOwner"";
""2284_setDisableFees"" -> ""2284_onlyAdmin"";
""2284_withdrawAdmin"" -> ""2284_toTokenAmount"";
""2284_tradeWithTips"" -> ""2284_increaseBalance"";
""2284_trade"" -> ""2284_reduceBalance"";
""2284_transfer"" -> ""2284_reduceBalance"";
""2284_setMakerFeeRate"" -> ""2284_onlyAdmin"";
""2284_setFeeAddress"" -> ""2284_onlyAdmin"";
""2284_toTokenAmount"" -> ""2284_safeDiv"";
""2284_reduceBalance"" -> ""2284_safeSub"";
""2284_withdraw"" -> ""2284_toTokenAmount"";
""2284_setOwner"" -> ""2284_onlyOwner"";
""2284_sendTipsToken"" -> ""2284_toTokenAmount"";
""2284_invalidateOrder"" -> ""2284_onlyAdmin"";
""2284_tradeWithTips"" -> ""2284_safeDiv"";
""2284_toTokenAmount"" -> ""2284_safeMul"";
""2284_depositToken"" -> ""2284_increaseBalance"";
""2284_depositToken"" -> ""2284_toTokenAmount"";
""2284_deposit"" -> ""2284_safeDiv"";
""2284_trade"" -> ""2284_safeDiv"";
""2284_tradeWithTips"" -> ""2284_onlyAdmin"";
""2284_tradeWithTips"" -> ""2284_isUserMakerFeeEnabled"";
""2284_withdrawAdmin"" -> ""2284_onlyAdmin"";
""2284_sendTips"" -> ""2284_increaseBalance"";
""2284_trade"" -> ""2284_safeAdd"";
""2284_tradeWithTips"" -> ""2284_safeMul"";
""2284_sendTipsToken"" -> ""2284_increaseBalance"";
""2284_withdrawAdmin"" -> ""2284_reduceBalance"";
""2284_deposit"" -> ""2284_increaseBalance"";
""2284_transferTips"" -> ""2284_onlyAdmin"";
""2284_trade"" -> ""2284_safeMul"";
""2284_setTakerFeeRate"" -> ""2284_onlyAdmin"";
""2284_tradeWithTips"" -> ""2284_isUserTakerFeeEnabled"";
""2284_transfer"" -> ""2284_onlyAdmin"";
""2284_tradeWithTips"" -> ""2284_safeSub"";
""2284_withdraw"" -> ""2284_reduceBalance"";
}
"
0x0355e20c49de30e04c7c693911694ba2450e5564.sol,InvoizChain,"contract InvoizChain is ERC20 { using SafeMath for uint256; address owner = 0xBc4b57D2789a0EfF23662F08A4210351909Aa4B0; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 1e28; uint256 public tokenPerETH = 1e27; uint256 public valueToGive = 9e19; uint256 public totalDistributed = 0; uint256 public totalRemaining = totalSupply.sub(totalDistributed); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1097_InvoizChain {
label=""InvoizChain"";
""1097_transferFrom"" [label=""transferFrom""];
""1097_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""1097_buyToken"" [label=""buyToken""];
""1097_getTokenBalance"" [label=""getTokenBalance""];
""1097_InvoizChain"" [label=""InvoizChain""];
""1097_withdraw"" [label=""withdraw""];
""1097_burn"" [label=""burn""];
""1097_transfer"" [label=""transfer""];
""1097_finishDistribution"" [label=""finishDistribution""];
""1097_fallback"" [label=""fallback""];
""1097_balanceOf"" [label=""balanceOf""];
""1097_transferOwnership"" [label=""transferOwnership""];
""1097_allowance"" [label=""allowance""];
""1097_approve"" [label=""approve""];
""1097_distr"" [label=""distr""];
""1097_burnFrom"" [label=""burnFrom""];
""1097_burnFrom"" -> ""1097_onlyOwner"";
""1097_transferOwnership"" -> ""1097_onlyOwner"";
""1097_buyToken"" -> ""1097_distr"";
""1097_withdraw"" -> ""1097_onlyOwner"";
""1097_finishDistribution"" -> ""1097_onlyOwner"";
""1097_InvoizChain"" -> ""1097_distr"";
""1097_buyToken"" -> ""1097_canDistr"";
""1097_transfer"" -> ""1097_onlyPayloadSize"";
""1097_distr"" -> ""1097_canDistr"";
""1097_finishDistribution"" -> ""1097_canDistr"";
""1097_transferFrom"" -> ""1097_onlyPayloadSize"";
""1097_fallback"" -> ""1097_distr"";
""1097_withdrawAltcoinTokens"" -> ""1097_onlyOwner"";
""1097_fallback"" -> ""1097_buyToken"";
""1097_burn"" -> ""1097_onlyOwner"";
}
"
0x2f2f25ee6a102272a484fa85388f0206ec7b0668.sol,TopiaCoinSAFTSale,"contract TopiaCoinSAFTSale is Ownable, Finalizable { event PaymentExpected(bytes8 paymentIdentifier); event PaymentExpectationCancelled(bytes8 paymentIdentifier); event PaymentSubmitted(address payor, bytes8 paymentIdentifier, uint256 paymentAmount); event PaymentAccepted(address payor, bytes8 paymentIdentifier, uint256 paymentAmount); event PaymentRejected(address payor, bytes8 paymentIdentifier, uint256 paymentAmount); event UnableToAcceptPayment(address payor, bytes8 paymentIdentifier, uint256 paymentAmount); event UnableToRejectPayment(address payor, bytes8 paymentIdentifier, uint256 paymentAmount); event SalesWalletUpdated(address oldWalletAddress, address newWalletAddress); event PaymentManagerUpdated(address oldPaymentManager, address newPaymentManager); event SaleOpen(); event SaleClosed(); mapping (bytes8 => Payment) payments; address salesWallet = 0x0; address paymentManager = 0x0; bool public saleStarted = false; struct Payment { address from; bytes8 paymentIdentifier; bytes32 paymentHash; uint256 paymentAmount; uint date; uint8 status; }",0,"subgraph cluster_865_TopiaCoinSAFTSale {
label=""TopiaCoinSAFTSale"";
""865_updatePaymentManager"" [label=""updatePaymentManager""];
""865_acceptPayment"" [label=""acceptPayment""];
""865_calculateHash"" [label=""calculateHash""];
""865_sendPaymentToWallet"" [label=""sendPaymentToWallet""];
""865_updateSalesWallet"" [label=""updateSalesWallet""];
""865_rejectPayment"" [label=""rejectPayment""];
""865_verifyPayment"" [label=""verifyPayment""];
""865_kill"" [label=""kill""];
""865_TopiaCoinSAFTSale"" [label=""TopiaCoinSAFTSale""];
""865_submitPayment"" [label=""submitPayment""];
""865_finalization"" [label=""finalization""];
""865_refundPayment"" [label=""refundPayment""];
""865_cancelExpectedPayment"" [label=""cancelExpectedPayment""];
""865_expectPayment"" [label=""expectPayment""];
""865_startSale"" [label=""startSale""];
""865_rejectPayment"" -> ""865_onlyOwnerOrManager"";
""865_acceptPayment"" -> ""865_sendPaymentToWallet"";
""865_verifyPayment"" -> ""865_onlyOwnerOrManager"";
""865_cancelExpectedPayment"" -> ""865_onlyOwnerOrManager"";
""865_TopiaCoinSAFTSale"" -> ""865_Ownable"";
""865_startSale"" -> ""865_onlyOwner"";
""865_updateSalesWallet"" -> ""865_onlyOwner"";
""865_submitPayment"" -> ""865_calculateHash"";
""865_expectPayment"" -> ""865_onlyOwnerOrManager"";
""865_submitPayment"" -> ""865_sendPaymentToWallet"";
""865_updatePaymentManager"" -> ""865_onlyOwner"";
""865_calculateHash"" -> ""865_onlyOwnerOrManager"";
""865_rejectPayment"" -> ""865_refundPayment"";
""865_kill"" -> ""865_onlyOwner"";
""865_acceptPayment"" -> ""865_onlyOwnerOrManager"";
}
"
0x5ab744087e44e6065d1461eb455f5f81c11760dc.sol,activity,"contract activity is owned{ address materialFactory_address = 0x65844f2e98495b6c8780f689c5d13bb7f4975d65; address master_address = 0x0ac10bf0342fa2724e93d250751186ba5b659303; mapping(uint8 => mapping(uint8 => uint)) public awardAmount; mapping(uint8 => mapping(uint8 => uint)) public awardPrice; uint8 public action; uint8 public require_value; using SafeMath8 for uint8; using SafeMath for uint; event awardResult(address indexed awarder,string awardName,uint8 boxIndex, uint8 material_index,uint price,uint8 action); constructor() public{ awardAmount[0][27] = 1; awardPrice[0][27] = 1 ether; awardAmount[1][9] = 1; awardPrice[1][9] = 1 ether; awardAmount[2][19] = 1; awardPrice[2][19] = 1 ether; awardAmount[3][6] = 1; awardPrice[3][6] = 1 ether; awardAmount[4][19] = 1; awardPrice[4][19] = 1 ether; awardAmount[0][21] = 10; awardPrice[0][21] = 0.1 ether; awardAmount[1][8] = 10; awardPrice[1][8] = 0.1 ether; awardAmount[2][12] = 10; awardPrice[2][12] = 0.1 ether; awardAmount[3][4] = 10; awardPrice[3][4] = 0.1 ether; awardAmount[4][15] = 10; awardPrice[4][15] = 0.1 ether; action = 1; require_value = 5; }",0,"subgraph cluster_906_activity {
label=""activity"";
""906_materialAmount"" [label=""materialAmount""];
""906_setNewMulAward"" [label=""setNewMulAward""];
""906_receiveApproval"" [label=""receiveApproval""];
""906_set_require_value"" [label=""set_require_value""];
""906_set_master_address"" [label=""set_master_address""];
""906_setAciton"" [label=""setAciton""];
""906_resetAward"" [label=""resetAward""];
""906_withdraw_all_ETH"" [label=""withdraw_all_ETH""];
""906_constructor"" [label=""constructor""];
""906_set_materialFactory_address"" [label=""set_materialFactory_address""];
""906_inquireAddress"" [label=""inquireAddress""];
""906_inquireEth"" [label=""inquireEth""];
""906_fallback"" [label=""fallback""];
""906_receiveApproval"" -> ""906_materialAmount"";
""906_set_master_address"" -> ""906_onlymanager"";
""906_setNewMulAward"" -> ""906_onlymanager"";
""906_withdraw_all_ETH"" -> ""906_onlymanager"";
""906_setAciton"" -> ""906_onlymanager"";
""906_set_require_value"" -> ""906_onlymanager"";
""906_set_materialFactory_address"" -> ""906_onlymanager"";
""906_resetAward"" -> ""906_onlymanager"";
}
"
0x377dfa7bab23a798ca1fa0923bcd4d4ef2184d85.sol,StarbaseCrowdsale,"contract StarbaseCrowdsale is Ownable { event CrowdsaleEnded(uint256 endedAt); event StarBasePurchasedWithEth(address purchaser, uint256 amount, uint256 rawAmount, uint256 cnyEthRate, uint256 bonusTokensPercentage); event StarBasePurchasedOffChain(address purchaser, uint256 amount, uint256 rawAmount, uint256 cnyBtcRate, uint256 bonusTokensPercentage, string data); event CnyEthRateUpdated(uint256 cnyEthRate); event CnyBtcRateUpdated(uint256 cnyBtcRate); event QualifiedPartnerAddress(address qualifiedPartner); event PurchaseInvalidated(uint256 purchaseIdx); event PurchaseAmended(uint256 purchaseIdx); AbstractStarbaseToken public starbaseToken; StarbaseEarlyPurchaseAmendment public starbaseEpAmendment; uint256 constant public crowdsaleTokenAmount = 125000000e18; uint256 constant public earlyPurchaseTokenAmount = 50000000e18; uint256 constant public MIN_INVESTMENT = 1; uint256 constant public MAX_CROWDSALE_CAP = 60000000; string public constant PURCHASE_AMOUNT_UNIT = ; struct CrowdsalePurchase { address purchaser; uint256 amount; uint256 rawAmount; uint256 purchasedAt; string data; uint256 bonus; }",0,"subgraph cluster_2886_StarbaseCrowdsale {
label=""StarbaseCrowdsale"";
""2886_ownerStartsCrowdsale"" [label=""ownerStartsCrowdsale""];
""2886_amendPurchase"" [label=""amendPurchase""];
""2886_recordPurchase"" [label=""recordPurchase""];
""2886_purchaseWithEth"" [label=""purchaseWithEth""];
""2886_numOfPurchases"" [label=""numOfPurchases""];
""2886_totalAmountOfCrowdsalePurchasesWithoutBonus"" [label=""totalAmountOfCrowdsalePurchasesWithoutBonus""];
""2886_totalRaisedAmountInCny"" [label=""totalRaisedAmountInCny""];
""2886_updateCnyBtcRate"" [label=""updateCnyBtcRate""];
""2886_updateQualifiedPartnerCapAmount"" [label=""updateQualifiedPartnerCapAmount""];
""2886_updateCnyEthRate"" [label=""updateCnyEthRate""];
""2886_fallback"" [label=""fallback""];
""2886_withdrawForCompany"" [label=""withdrawForCompany""];
""2886_setQualifiedPartner"" [label=""setQualifiedPartner""];
""2886_unlistQualifiedPartner"" [label=""unlistQualifiedPartner""];
""2886_totalAmountOfCrowdsalePurchases"" [label=""totalAmountOfCrowdsalePurchases""];
""2886_endCrowdsale"" [label=""endCrowdsale""];
""2886_isEnded"" [label=""isEnded""];
""2886_sendQualifiedPartnerCommissionFee"" [label=""sendQualifiedPartnerCommissionFee""];
""2886_recordOffchainPurchase"" [label=""recordOffchainPurchase""];
""2886_getBonusTier"" [label=""getBonusTier""];
""2886_deliverPurchasedTokens"" [label=""deliverPurchasedTokens""];
""2886_invalidatePurchase"" [label=""invalidatePurchase""];
""2886_redirectToPurchase"" [label=""redirectToPurchase""];
""2886_purchaseAsQualifiedPartner"" [label=""purchaseAsQualifiedPartner""];
""2886_startCrowdsale"" [label=""startCrowdsale""];
""2886_StarbaseCrowdsale"" [label=""StarbaseCrowdsale""];
""2886_loadEarlyPurchases"" [label=""loadEarlyPurchases""];
""2886_totalAmountOfEarlyPurchases"" [label=""totalAmountOfEarlyPurchases""];
""2886_setup"" [label=""setup""];
""2886_recordOffchainPurchase"" -> ""2886_whenNotEnded"";
""2886_setup"" -> ""2886_onlyOwner"";
""2886_amendPurchase"" -> ""2886_tokensNotDelivered"";
""2886_ownerStartsCrowdsale"" -> ""2886_startCrowdsale"";
""2886_updateCnyEthRate"" -> ""2886_onlyFundraiser"";
""2886_setQualifiedPartner"" -> ""2886_onlyOwner"";
""2886_recordOffchainPurchase"" -> ""2886_startCrowdsale"";
""2886_purchaseAsQualifiedPartner"" -> ""2886_sendQualifiedPartnerCommissionFee"";
""2886_deliverPurchasedTokens"" -> ""2886_totalRaisedAmountInCny"";
""2886_deliverPurchasedTokens"" -> ""2886_whenEnded"";
""2886_withdrawForCompany"" -> ""2886_hasBalance"";
""2886_totalRaisedAmountInCny"" -> ""2886_totalAmountOfEarlyPurchases"";
""2886_redirectToPurchase"" -> ""2886_purchaseAsQualifiedPartner"";
""2886_purchaseWithEth"" -> ""2886_startCrowdsale"";
""2886_deliverPurchasedTokens"" -> ""2886_onlyOwner"";
""2886_totalRaisedAmountInCny"" -> ""2886_totalAmountOfCrowdsalePurchases"";
""2886_purchaseWithEth"" -> ""2886_recordPurchase"";
""2886_purchaseWithEth"" -> ""2886_whenNotEnded"";
""2886_updateQualifiedPartnerCapAmount"" -> ""2886_onlyOwner"";
""2886_recordOffchainPurchase"" -> ""2886_recordPurchase"";
""2886_updateCnyBtcRate"" -> ""2886_onlyFundraiser"";
""2886_redirectToPurchase"" -> ""2886_purchaseWithEth"";
""2886_recordOffchainPurchase"" -> ""2886_getBonusTier"";
""2886_withdrawForCompany"" -> ""2886_onlyFundraiser"";
""2886_unlistQualifiedPartner"" -> ""2886_onlyOwner"";
""2886_fallback"" -> ""2886_redirectToPurchase"";
""2886_invalidatePurchase"" -> ""2886_whenEnded"";
""2886_deliverPurchasedTokens"" -> ""2886_totalAmountOfEarlyPurchases"";
""2886_purchaseWithEth"" -> ""2886_minInvestment"";
""2886_recordPurchase"" -> ""2886_totalAmountOfCrowdsalePurchasesWithoutBonus"";
""2886_amendPurchase"" -> ""2886_whenEnded"";
""2886_recordOffchainPurchase"" -> ""2886_rateIsSet"";
""2886_recordOffchainPurchase"" -> ""2886_onlyFundraiser"";
""2886_purchaseWithEth"" -> ""2886_getBonusTier"";
""2886_amendPurchase"" -> ""2886_onlyOwner"";
""2886_invalidatePurchase"" -> ""2886_tokensNotDelivered"";
""2886_purchaseAsQualifiedPartner"" -> ""2886_recordPurchase"";
""2886_invalidatePurchase"" -> ""2886_onlyOwner"";
""2886_purchaseWithEth"" -> ""2886_rateIsSet"";
""2886_purchaseAsQualifiedPartner"" -> ""2886_rateIsSet"";
""2886_loadEarlyPurchases"" -> ""2886_onlyOwner"";
""2886_endCrowdsale"" -> ""2886_onlyOwner"";
""2886_ownerStartsCrowdsale"" -> ""2886_onlyOwner"";
}
"
0x24626fd95ad815bab2136d6f91ca10562161cda3.sol,DaoSpecialStorage,"contract DaoSpecialStorage is DaoWhitelistingCommon { using DoublyLinkedList for DoublyLinkedList.Bytes; using DaoStructs for DaoStructs.SpecialProposal; using DaoStructs for DaoStructs.Voting; DoublyLinkedList.Bytes proposals; mapping (bytes32 => DaoStructs.SpecialProposal) proposalsById; constructor(address _resolver) public { require(init(CONTRACT_STORAGE_DAO_SPECIAL, _resolver)); }",0,"subgraph cluster_10996_DaoSpecialStorage {
label=""DaoSpecialStorage"";
""10996_setPass"" [label=""setPass""];
""10996_setVotingClaim"" [label=""setVotingClaim""];
""10996_readVote"" [label=""readVote""];
""10996_constructor"" [label=""constructor""];
""10996_readVotingResult"" [label=""readVotingResult""];
""10996_readProposal"" [label=""readProposal""];
""10996_commitVote"" [label=""commitVote""];
""10996_readConfigs"" [label=""readConfigs""];
""10996_isClaimed"" [label=""isClaimed""];
""10996_setVotingTime"" [label=""setVotingTime""];
""10996_revealVote"" [label=""revealVote""];
""10996_readVotingCount"" [label=""readVotingCount""];
""10996_readVotingTime"" [label=""readVotingTime""];
""10996_addSpecialProposal"" [label=""addSpecialProposal""];
""10996_readProposalProposer"" [label=""readProposalProposer""];
""10996_readComittedVote"" [label=""readComittedVote""];
""10996_commitVote"" -> ""10996_sender_is"";
""10996_readVotingTime"" -> ""10996_senderIsAllowedToRead"";
""10996_revealVote"" -> ""10996_sender_is"";
""10996_readComittedVote"" -> ""10996_senderIsAllowedToRead"";
""10996_readVotingResult"" -> ""10996_senderIsAllowedToRead"";
""10996_readVotingCount"" -> ""10996_senderIsAllowedToRead"";
""10996_setVotingTime"" -> ""10996_sender_is"";
""10996_readVote"" -> ""10996_senderIsAllowedToRead"";
""10996_isClaimed"" -> ""10996_senderIsAllowedToRead"";
""10996_setVotingClaim"" -> ""10996_sender_is"";
""10996_setPass"" -> ""10996_sender_is"";
""10996_constructor"" -> ""10996_init"";
""10996_addSpecialProposal"" -> ""10996_sender_is"";
}
"
0x4ce24b5203ff6b6d475ecae9c3647ff40b660f35.sol,darx,contract darx is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 6; function darx() public { totalSupply = 1000000000000000000; balances[msg.sender] = totalSupply; },0,"subgraph cluster_401_darx {
label=""darx"";
""401_darx"" [label=""darx""];
}
"
0x34770f06ae8a9a7b44fd8d636af6a3fec2a58b98.sol,LCT,"contract LCT is owned, StdToken { string public name = ; string public symbol = ; string public website = ; string public member_of = ; uint public decimals = 18; uint256 public totalSupplied; uint256 public totalBurned; constructor(uint256 _totalSupply) public { supply = _totalSupply * (1 ether / 1 wei); totalBurned = 0; totalSupplied = 0; balances[address(this)] = supply; }",0,"subgraph cluster_526_LCT {
label=""LCT"";
""526_burn"" [label=""burn""];
""526_transferTo"" [label=""transferTo""];
""526_constructor"" [label=""constructor""];
""526_burnByValue"" [label=""burnByValue""];
""526_burn"" -> ""526__burn"";
""526_burnByValue"" -> ""526_onlyOwner"";
""526_transferTo"" -> ""526__transfer"";
""526_transferTo"" -> ""526_onlyOwner"";
""526_burnByValue"" -> ""526__burn"";
""526_burn"" -> ""526_onlyOwner"";
}
"
0x53caa71f4a8a2617592fd55f0001a0948a16ec67.sol,TOAB,"contract TOAB { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 10000000000000000000000000000; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); function TOAB() public { balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_243_TOAB {
label=""TOAB"";
""243_transfer"" [label=""transfer""];
""243_approve"" [label=""approve""];
""243_approveAndCall"" [label=""approveAndCall""];
""243_transferFrom"" [label=""transferFrom""];
""243_TOAB"" [label=""TOAB""];
""243__transfer"" [label=""_transfer""];
""243_transfer"" -> ""243__transfer"";
""243_transferFrom"" -> ""243__transfer"";
""243_approveAndCall"" -> ""243_approve"";
}
"
0x368d8e25353920a7bf78596cbc1137ba5c2be637.sol,Crowdsale,"contract Crowdsale is Owned { using SafeMath for uint; enum State { INIT, PRESALE, PREICO, PREICO_FINISHED, ICO_FIRST, ICO_SECOND, ICO_THIRD, STOPPED, CLOSED, EMERGENCY_STOP}",0,"subgraph cluster_1030_Crowdsale {
label=""Crowdsale"";
""1030_setPrice"" [label=""setPrice""];
""1030__mint"" [label=""_mint""];
""1030_setStateWithBonus"" [label=""setStateWithBonus""];
""1030__checkMaxRoundSupply"" [label=""_checkMaxRoundSupply""];
""1030_setState"" [label=""setState""];
""1030__receiveFunds"" [label=""_receiveFunds""];
""1030_burn"" [label=""burn""];
""1030__finish"" [label=""_finish""];
""1030_mintPresale"" [label=""mintPresale""];
""1030_Crowdsale"" [label=""Crowdsale""];
""1030_fallback"" [label=""fallback""];
""1030_initialize"" [label=""initialize""];
""1030_setBonus"" [label=""setBonus""];
""1030_mintPresale"" -> ""1030_inState"";
""1030_initialize"" -> ""1030_only"";
""1030_setState"" -> ""1030__finish"";
""1030_mintPresale"" -> ""1030_only"";
""1030_fallback"" -> ""1030__receiveFunds"";
""1030_initialize"" -> ""1030__mint"";
""1030_setPrice"" -> ""1030_only"";
""1030__finish"" -> ""1030_noAnyReentrancy"";
""1030_setStateWithBonus"" -> ""1030__finish"";
""1030_fallback"" -> ""1030_salesRunning"";
""1030_fallback"" -> ""1030_minAmount"";
""1030_initialize"" -> ""1030_inState"";
""1030__mint"" -> ""1030_noAnyReentrancy"";
""1030_mintPresale"" -> ""1030__mint"";
""1030__receiveFunds"" -> ""1030__checkMaxRoundSupply"";
""1030_burn"" -> ""1030_only"";
""1030_setBonus"" -> ""1030_only"";
""1030_setStateWithBonus"" -> ""1030_only"";
""1030_setState"" -> ""1030_only"";
""1030__receiveFunds"" -> ""1030__mint"";
}
"
0x31cf75e0839a79c8914569465b6ce9e3d6fc9959.sol,CardConfig,"contract CardConfig { enum Type {Monster, Spell}",0,"subgraph cluster_2925_CardConfig {
label=""CardConfig"";
""2925_getHealthForCost"" [label=""getHealthForCost""];
""2925_getNeutralMutationCost"" [label=""getNeutralMutationCost""];
""2925_getNeutralMutation"" [label=""getNeutralMutation""];
""2925_getMutationForRace"" [label=""getMutationForRace""];
""2925_getRaceMutationCost"" [label=""getRaceMutationCost""];
""2925_getCostForAttack"" [label=""getCostForAttack""];
""2925_getSpellAbility"" [label=""getSpellAbility""];
""2925_getTrait"" [label=""getTrait""];
""2925_getCostForRace"" [label=""getCostForRace""];
""2925_getSpellAbilityCost"" [label=""getSpellAbilityCost""];
""2925_getAttackForCost"" [label=""getAttackForCost""];
""2925_getType"" [label=""getType""];
""2925_getRace"" [label=""getRace""];
""2925_getCostForHealth"" [label=""getCostForHealth""];
""2925_getCostForTrait"" [label=""getCostForTrait""];
""2925_getNeutralMutation"" -> ""2925_getNeutralMutationCost"";
""2925_getSpellAbility"" -> ""2925_getSpellAbilityCost"";
""2925_getMutationForRace"" -> ""2925_getRaceMutationCost"";
}
"
0x6b683581e66524639cb9444000a7c8b5e10a1a07.sol,Eth5iov_2,"contract Eth5iov_2 { address public advertising; address public admin; address private owner; uint constant public statusFreeEth = 10 finney; uint constant public statusBasic = 50 finney; uint constant public statusVIP = 5 ether; uint constant public statusSVIP = 25 ether; uint constant public dailyPercent = 188; uint constant public dailyFreeMembers = 200; uint constant public denominator = 10000; uint public numerator = 100; uint public dayDepositLimit = 555 ether; uint public freeFund; uint public freeFundUses; uint public round = 0; address[] public addresses; mapping(address => Investor) public investors; bool public resTrigger = true; uint constant period = 5; uint dayDeposit; uint roundStartDate; uint daysFromRoundStart; uint deposit; uint creationDate; enum Status { TEST, BASIC, VIP, SVIP }",0,"subgraph cluster_1068_Eth5iov_2 {
label=""Eth5iov_2"";
""1068_payout"" [label=""payout""];
""1068_constructor"" [label=""constructor""];
""1068_setDayDepositLimit"" [label=""setDayDepositLimit""];
""1068_sendFromfreeFund"" [label=""sendFromfreeFund""];
""1068_roundStart"" [label=""roundStart""];
""1068_addInvestorsFrom_v1"" [label=""addInvestorsFrom_v1""];
""1068_waiver"" [label=""waiver""];
""1068_setNumerator"" [label=""setNumerator""];
""1068_fallback"" [label=""fallback""];
""1068_daysFrom"" [label=""daysFrom""];
""1068_getInvestorCount"" [label=""getInvestorCount""];
""1068_getInvestorDividendsAmount"" [label=""getInvestorDividendsAmount""];
""1068_bytesToAddress"" [label=""bytesToAddress""];
""1068_roundStart"" -> ""1068_onlyOwner"";
""1068_setNumerator"" -> ""1068_onlyOwner"";
""1068_payout"" -> ""1068_sendFromfreeFund"";
""1068_fallback"" -> ""1068_daysFrom"";
""1068_fallback"" -> ""1068_bytesToAddress"";
""1068_payout"" -> ""1068_getInvestorDividendsAmount"";
""1068_payout"" -> ""1068_daysFrom"";
""1068_getInvestorDividendsAmount"" -> ""1068_daysFrom"";
""1068_fallback"" -> ""1068_payout"";
""1068_setDayDepositLimit"" -> ""1068_onlyOwner"";
""1068_addInvestorsFrom_v1"" -> ""1068_onlyOwner"";
""1068_constructor"" -> ""1068_roundStart"";
}
"
0x567287d4f42086beab4b36de9af21c70adec6760.sol,MintableToken,"contract MintableToken is StandardToken { uint32 public constant decimals = 4; uint256 public constant MAX_SUPPLY = 700000000 * (10 ** uint256(decimals)); event Mint(address indexed to, uint256 amount); function mint(address _to, uint256 _amount) onlyOwner public returns (bool) { uint256 newTotalSupply = totalSupply.add(_amount); require(newTotalSupply <= MAX_SUPPLY); totalSupply = totalSupply.add(_amount); balances[_to] = balances[_to].add(_amount); Mint(_to, _amount); Transfer(0x0, _to, _amount); return true; }",0,"subgraph cluster_760_MintableToken {
label=""MintableToken"";
""760_mint"" [label=""mint""];
""760_mint"" -> ""760_onlyOwner"";
}
"
0xd2946be786f35c3cc402c29b323647abda799071.sol,VikkyToken,"contract VikkyToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 20000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 20000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_948_VikkyToken {
label=""VikkyToken"";
""948_transfer"" [label=""transfer""];
""948_withdraw"" [label=""withdraw""];
""948_updateTokensPerEth"" [label=""updateTokensPerEth""];
""948_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""948_distr"" [label=""distr""];
""948_burn"" [label=""burn""];
""948_allowance"" [label=""allowance""];
""948_doAirdrop"" [label=""doAirdrop""];
""948_fallback"" [label=""fallback""];
""948_getTokens"" [label=""getTokens""];
""948_getTokenBalance"" [label=""getTokenBalance""];
""948_balanceOf"" [label=""balanceOf""];
""948_finishDistribution"" [label=""finishDistribution""];
""948_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""948_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""948_transferFrom"" [label=""transferFrom""];
""948_VikkyToken"" [label=""VikkyToken""];
""948_approve"" [label=""approve""];
""948_transferOwnership"" [label=""transferOwnership""];
""948_withdrawAltcoinTokens"" -> ""948_onlyOwner"";
""948_withdraw"" -> ""948_onlyOwner"";
""948_transferOwnership"" -> ""948_onlyOwner"";
""948_adminClaimAirdrop"" -> ""948_doAirdrop"";
""948_transfer"" -> ""948_onlyPayloadSize"";
""948_transferFrom"" -> ""948_onlyPayloadSize"";
""948_VikkyToken"" -> ""948_distr"";
""948_updateTokensPerEth"" -> ""948_onlyOwner"";
""948_distr"" -> ""948_canDistr"";
""948_adminClaimAirdrop"" -> ""948_onlyOwner"";
""948_finishDistribution"" -> ""948_canDistr"";
""948_getTokens"" -> ""948_distr"";
""948_burn"" -> ""948_onlyOwner"";
""948_getTokens"" -> ""948_canDistr"";
""948_fallback"" -> ""948_getTokens"";
""948_adminClaimAirdropMultiple"" -> ""948_doAirdrop"";
""948_adminClaimAirdropMultiple"" -> ""948_onlyOwner"";
""948_finishDistribution"" -> ""948_onlyOwner"";
}
"
0xd083713e4d9bc1e4c923795f9f6ce2a97646c116.sol,Base,contract Base { uint8 constant HEROLEVEL_MIN = 1; uint8 constant HEROLEVEL_MAX = 5; uint8 constant LIMITCHIP_MINLEVEL = 3; uint constant PARTWEIGHT_NORMAL = 100; uint constant PARTWEIGHT_LIMIT = 40; address creator; constructor() public { creator = msg.sender; },0,"subgraph cluster_556_Base {
label=""Base"";
""556_GetPartWeight"" [label=""GetPartWeight""];
""556_GetPartNum"" [label=""GetPartNum""];
""556_constructor"" [label=""constructor""];
""556_IsLimitPart"" [label=""IsLimitPart""];
""556_IsLimitPart"" -> ""556_GetPartNum"";
""556_GetPartWeight"" -> ""556_IsLimitPart"";
}
"
0xa4ec44afee34feffbae5ce4218d3c06ebd70455e.sol,Superbowl52,contract Superbowl52 { using SafeMath for uint; uint public constant GAME_START_TIME = 1517787000; bool public resultConfirmed = false; address public owner; mapping(address => betting) public bets; uint public totalBets; uint public philadelphiaBets; uint public newEnglandBets; uint public result; uint public betters; bool public votingOpen; bool public withdrawalOpen; uint public threshold; uint public winningPot; mapping(address => uint) public wins; BallotSB52 public ballot; struct betting { uint philadelphiaBets; uint newEnglandBets; bool claimed; },0,"subgraph cluster_1084_Superbowl52 {
label=""Superbowl52"";
""1084_breakTie"" [label=""breakTie""];
""1084_hasClaimed"" [label=""hasClaimed""];
""1084_endVoting"" [label=""endVoting""];
""1084_fallback"" [label=""fallback""];
""1084_startVoting"" [label=""startVoting""];
""1084_getLosersOnePercent"" [label=""getLosersOnePercent""];
""1084_getWinnings"" [label=""getWinnings""];
""1084_getNewEnglandBets"" [label=""getNewEnglandBets""];
""1084_bet"" [label=""bet""];
""1084_getPhiladelphiaBets"" [label=""getPhiladelphiaBets""];
""1084_Superbowl52"" [label=""Superbowl52""];
""1084_hasBet"" [label=""hasBet""];
""1084_bet"" -> ""1084_hasBet"";
""1084_getWinnings"" -> ""1084_getNewEnglandBets"";
""1084_getWinnings"" -> ""1084_getPhiladelphiaBets"";
}
"
0xeb907a50921e052cbee233811beaf0839d2a98fd.sol,Advertisement,contract Advertisement { struct Filters { string countries; string packageName; uint[] vercodes; },0,"subgraph cluster_888_Advertisement {
label=""Advertisement"";
""888_cancelCampaign"" [label=""cancelCampaign""];
""888_payFromCampaign"" [label=""payFromCampaign""];
""888_getPackageNameOfCampaign"" [label=""getPackageNameOfCampaign""];
""888_getPriceOfCampaign"" [label=""getPriceOfCampaign""];
""888_getStartDateOfCampaign"" [label=""getStartDateOfCampaign""];
""888_division"" [label=""division""];
""888_getBidIdList"" [label=""getBidIdList""];
""888_getEndDateOfCampaign"" [label=""getEndDateOfCampaign""];
""888_getCountriesOfCampaign"" [label=""getCountriesOfCampaign""];
""888_addCampaignToCountryMap"" [label=""addCampaignToCountryMap""];
""888_registerPoA"" [label=""registerPoA""];
""888_getOwnerOfCampaign"" [label=""getOwnerOfCampaign""];
""888_getBudgetOfCampaign"" [label=""getBudgetOfCampaign""];
""888_getCampaignValidity"" [label=""getCampaignValidity""];
""888_getVercodesOfCampaign"" [label=""getVercodesOfCampaign""];
""888_Advertisement"" [label=""Advertisement""];
""888_getCountryList"" [label=""getCountryList""];
""888_getTotalCampaignsByCountry"" [label=""getTotalCampaignsByCountry""];
""888_addCampaign"" [label=""addCampaign""];
""888_uintToBytes"" [label=""uintToBytes""];
""888_getCampaignsByCountry"" [label=""getCampaignsByCountry""];
""888_createCampaign"" [label=""createCampaign""];
""888_setBudgetOfCampaign"" [label=""setBudgetOfCampaign""];
""888_setCampaignValidity"" [label=""setCampaignValidity""];
""888_payFromCampaign"" -> ""888_division"";
""888_createCampaign"" -> ""888_uintToBytes"";
""888_cancelCampaign"" -> ""888_getOwnerOfCampaign"";
""888_cancelCampaign"" -> ""888_setBudgetOfCampaign"";
""888_createCampaign"" -> ""888_addCampaign"";
""888_cancelCampaign"" -> ""888_getBudgetOfCampaign"";
""888_addCampaign"" -> ""888_addCampaignToCountryMap"";
""888_cancelCampaign"" -> ""888_setCampaignValidity"";
}
"
0x4803ead7b2996353373e82f501e1a23a2f892d19.sol,TokenMintERC223Token,"contract TokenMintERC223Token is ERC223Token { constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply, address feeReceiver, address tokenOwnerAddress) public payable { name = _name; symbol = _symbol; decimals = _decimals; totalSupply = _totalSupply; balances[tokenOwnerAddress] = totalSupply; emit Transfer(address(0), tokenOwnerAddress, totalSupply); emit Transfer(address(0), tokenOwnerAddress, totalSupply, ); feeReceiver.transfer(msg.value); }",0,"subgraph cluster_683_TokenMintERC223Token {
label=""TokenMintERC223Token"";
""683_constructor"" [label=""constructor""];
}
"
0x584de5a9995c33c1afa83bc67bebcd481b0a4775.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowed; uint256 private _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },0,"subgraph cluster_1313_ERC20Pausable {
label=""ERC20Pausable"";
""1313_transfer"" [label=""transfer""];
""1313_approve"" [label=""approve""];
""1313_increaseAllowance"" [label=""increaseAllowance""];
""1313_transferFrom"" [label=""transferFrom""];
""1313_decreaseAllowance"" [label=""decreaseAllowance""];
""1313_decreaseAllowance"" -> ""1313_decreaseAllowance"";
""1313_transferFrom"" -> ""1313_transferFrom"";
""1313_transfer"" -> ""1313_transfer"";
""1313_increaseAllowance"" -> ""1313_increaseAllowance"";
""1313_transferFrom"" -> ""1313_whenNotPaused"";
""1313_approve"" -> ""1313_whenNotPaused"";
""1313_approve"" -> ""1313_approve"";
""1313_decreaseAllowance"" -> ""1313_whenNotPaused"";
""1313_transfer"" -> ""1313_whenNotPaused"";
""1313_increaseAllowance"" -> ""1313_whenNotPaused"";
}
"
0x50325b5527eb8299581bce2eeb6c53b5661e1346.sol,Token,"contract Token is Owned, StandartToken { string public name = ; string public symbol = ; uint public decimals = 0; address public constant company = 0xC01aed0F75f117d1f47f9146E41C9A6E0870350e; function Token() public { mint(msg.sender, 10 ** 9); mint(company, 10 * 10 ** 6); start(); }",0,"subgraph cluster_716_Token {
label=""Token"";
""716_start"" [label=""start""];
""716_fallback"" [label=""fallback""];
""716_mint"" [label=""mint""];
""716_Token"" [label=""Token""];
""716_Token"" -> ""716_start"";
""716_Token"" -> ""716_mint"";
}
"
0xf192d4a83ffe1f78c469eb4b89ca8557d313bf1a.sol,newCrowdsale,"contract newCrowdsale is Ownable { using SafeMath for uint256; uint256 public startTime; uint256 public endTime; mapping(address=>uint256) public ownerAddresses; address[] owners; uint256 public majorOwnerShares = 100; uint256 public minorOwnerShares = 10; uint256 public coinPercentage = 5; uint256 share = 10; uint256 public rate = 650; uint256 public weiRaised; bool public isCrowdsaleStopped = false; bool public isCrowdsalePaused = false; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); Arm public token; function newCrowdsale(address _walletMajorOwner) public { token = Arm(0x387890e71A8B7D79114e5843D6a712ea474BA91c); startTime = now; endTime = startTime + 90 days; require(endTime >= startTime); require(_walletMajorOwner != 0x0); ownerAddresses[_walletMajorOwner] = majorOwnerShares; owners.push(_walletMajorOwner); owner = _walletMajorOwner; }",0,"subgraph cluster_772_newCrowdsale {
label=""newCrowdsale"";
""772_forwardFunds"" [label=""forwardFunds""];
""772_stopCrowdsale"" [label=""stopCrowdsale""];
""772_destroy"" [label=""destroy""];
""772_addPartner"" [label=""addPartner""];
""772_pauseCrowdsale"" [label=""pauseCrowdsale""];
""772_showMyTokenBalance"" [label=""showMyTokenBalance""];
""772_startCrowdsale"" [label=""startCrowdsale""];
""772_newCrowdsale"" [label=""newCrowdsale""];
""772_validPurchase"" [label=""validPurchase""];
""772_setEndDate"" [label=""setEndDate""];
""772_setPriceRate"" [label=""setPriceRate""];
""772_fallback"" [label=""fallback""];
""772_resumeCrowdsale"" [label=""resumeCrowdsale""];
""772_buy"" [label=""buy""];
""772_changePartnerCoinPercentage"" [label=""changePartnerCoinPercentage""];
""772_tokensRemainingForSale"" [label=""tokensRemainingForSale""];
""772_hasEnded"" [label=""hasEnded""];
""772_removePartner"" [label=""removePartner""];
""772_addPartner"" -> ""772_onlyOwner"";
""772_setPriceRate"" -> ""772_onlyOwner"";
""772_buy"" -> ""772_forwardFunds"";
""772_destroy"" -> ""772_onlyOwner"";
""772_changePartnerCoinPercentage"" -> ""772_onlyOwner"";
""772_startCrowdsale"" -> ""772_onlyOwner"";
""772_pauseCrowdsale"" -> ""772_onlyOwner"";
""772_setEndDate"" -> ""772_onlyOwner"";
""772_removePartner"" -> ""772_onlyOwner"";
""772_fallback"" -> ""772_buy"";
""772_buy"" -> ""772_validPurchase"";
""772_stopCrowdsale"" -> ""772_onlyOwner"";
""772_resumeCrowdsale"" -> ""772_onlyOwner"";
}
"
0xdc20655a6de13496dd385f7ab903e4e6150e55a5.sol,VesaStage2PreICO,"contract VesaStage2PreICO is Ownable { using SafeMath for uint256; using SafeBonus for uint256; address public beneficiary; uint8 public durationInDays = 31; uint public fundingGoal = 100 ether; uint public fundingGoalHardCap = 10000 ether; uint public amountRaised; uint public start; uint public deadline; uint public bonusPrice = 164285714300000; uint public bonusPriceDeltaPerHour = 3571428573000; uint public bonusPeriodDurationInHours = 10; uint public price = 200000000000000; uint public minSum = 200000000000000000; token public tokenReward; mapping(address => uint256) public balanceOf; bool public fundingGoalReached = false; bool public crowdsaleClosed = false; bool public allowRefund = false; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); event BeneficiaryChanged(address indexed previousBeneficiary, address indexed newBeneficiary); function VesaStage2PreICO() public { beneficiary = 0x2bF8AeE3845af10f2bbEBbCF53EBd887c5021d14; start = 1522155600; deadline = start + durationInDays * 1 days; tokenReward = token(0xb1c74c1D82824428e484072069041deD079eD921); }",0,"subgraph cluster_666_VesaStage2PreICO {
label=""VesaStage2PreICO"";
""666_tokensWithdrawal"" [label=""tokensWithdrawal""];
""666_checkGoalReached"" [label=""checkGoalReached""];
""666_VesaStage2PreICO"" [label=""VesaStage2PreICO""];
""666_safeWithdrawal"" [label=""safeWithdrawal""];
""666_getPrice"" [label=""getPrice""];
""666_changeBeneficiary"" [label=""changeBeneficiary""];
""666_initializeRefund"" [label=""initializeRefund""];
""666_fallback"" [label=""fallback""];
""666_getBonus"" [label=""getBonus""];
""666_initializeRefund"" -> ""666_onlyOwner"";
""666_tokensWithdrawal"" -> ""666_onlyOwner"";
""666_fallback"" -> ""666_getPrice"";
""666_fallback"" -> ""666_getBonus"";
""666_checkGoalReached"" -> ""666_afterDeadline"";
""666_safeWithdrawal"" -> ""666_afterDeadline"";
""666_initializeRefund"" -> ""666_afterDeadline"";
""666_changeBeneficiary"" -> ""666_onlyOwner"";
}
"
0xed2bd91e69155782d045ca8254eafa8935e99b58.sol,P6,"contract P6 is Whitelist, SessionQueue { modifier onlyTokenHolders { require(myTokens() > 0); _; }",0,"subgraph cluster_2663_P6 {
label=""P6"";
""2663_sell"" [label=""sell""];
""2663_tokensToEthereum_"" [label=""tokensToEthereum_""];
""2663_statsOf"" [label=""statsOf""];
""2663_updateMaintenanceAddress"" [label=""updateMaintenanceAddress""];
""2663_updateProcessingCap"" [label=""updateProcessingCap""];
""2663_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""2663_sellPrice"" [label=""sellPrice""];
""2663_purchaseTokens"" [label=""purchaseTokens""];
""2663_buy"" [label=""buy""];
""2663_totalEthereumBalance"" [label=""totalEthereumBalance""];
""2663_myTokens"" [label=""myTokens""];
""2663_fundBankRoll"" [label=""fundBankRoll""];
""2663_reinvest"" [label=""reinvest""];
""2663_buyFor"" [label=""buyFor""];
""2663_ethereumToTokens_"" [label=""ethereumToTokens_""];
""2663_totalSupply"" [label=""totalSupply""];
""2663_sqrt"" [label=""sqrt""];
""2663_fallback"" [label=""fallback""];
""2663_myDividends"" [label=""myDividends""];
""2663_isVested"" [label=""isVested""];
""2663_calculateTokensReceived"" [label=""calculateTokensReceived""];
""2663_transfer"" [label=""transfer""];
""2663_transferTokens"" [label=""transferTokens""];
""2663_dividendsOf"" [label=""dividendsOf""];
""2663_balanceOf"" [label=""balanceOf""];
""2663_updateCoolOffPeriod"" [label=""updateCoolOffPeriod""];
""2663_withdraw"" [label=""withdraw""];
""2663_botEnabled"" [label=""botEnabled""];
""2663_timerInfo"" [label=""timerInfo""];
""2663_withdrawFor"" [label=""withdrawFor""];
""2663_reinvestFor"" [label=""reinvestFor""];
""2663_brbReinvest"" [label=""brbReinvest""];
""2663_processRewards"" [label=""processRewards""];
""2663_totalDividends"" [label=""totalDividends""];
""2663_deposit"" [label=""deposit""];
""2663_investSupporter"" [label=""investSupporter""];
""2663_updateBankrollAddress"" [label=""updateBankrollAddress""];
""2663_reap"" [label=""reap""];
""2663_launchContract"" [label=""launchContract""];
""2663_constructor"" [label=""constructor""];
""2663_rewardAvailable"" [label=""rewardAvailable""];
""2663_activateBot"" [label=""activateBot""];
""2663_buyPrice"" [label=""buyPrice""];
""2663_constructor"" -> ""2663_updateMaintenanceAddress"";
""2663_purchaseTokens"" -> ""2663_brbReinvest"";
""2663_processRewards"" -> ""2663_enqueue"";
""2663_sell"" -> ""2663_onlyTokenHolders"";
""2663_sell"" -> ""2663_buyPrice"";
""2663_sell"" -> ""2663_tokensToEthereum_"";
""2663_brbReinvest"" -> ""2663_reinvestFor"";
""2663_processRewards"" -> ""2663_reinvestFor"";
""2663_sell"" -> ""2663_fundBankRoll"";
""2663_buyPrice"" -> ""2663_tokensToEthereum_"";
""2663_reinvest"" -> ""2663_launched"";
""2663_withdraw"" -> ""2663_invested"";
""2663_sell"" -> ""2663_brbReinvest"";
""2663_reinvest"" -> ""2663_onlyDivis"";
""2663_processRewards"" -> ""2663_dequeue"";
""2663_investSupporter"" -> ""2663_reinvestFor"";
""2663_calculateTokensReceived"" -> ""2663_ethereumToTokens_"";
""2663_reap"" -> ""2663_balanceOf"";
""2663_updateMaintenanceAddress"" -> ""2663_onlyOwner"";
""2663_reap"" -> ""2663_onlyOwner"";
""2663_sell"" -> ""2663_cooledOff"";
""2663_transfer"" -> ""2663_cooledOff"";
""2663_sellPrice"" -> ""2663_tokensToEthereum_"";
""2663_processRewards"" -> ""2663_peek"";
""2663_purchaseTokens"" -> ""2663_buyPrice"";
""2663_withdraw"" -> ""2663_withdrawFor"";
""2663_calculateEthereumReceived"" -> ""2663_tokensToEthereum_"";
""2663_processRewards"" -> ""2663_launched"";
""2663_transferTokens"" -> ""2663_tokensToEthereum_"";
""2663_transferTokens"" -> ""2663_totalDividends"";
""2663_ethereumToTokens_"" -> ""2663_sqrt"";
""2663_investSupporter"" -> ""2663_onlyOwner"";
""2663_updateBankrollAddress"" -> ""2663_onlyOwner"";
""2663_buyFor"" -> ""2663_onlyWhitelisted"";
""2663_myTokens"" -> ""2663_balanceOf"";
""2663_processRewards"" -> ""2663_available"";
""2663_updateProcessingCap"" -> ""2663_onlyOwner"";
""2663_fallback"" -> ""2663_purchaseTokens"";
""2663_totalDividends"" -> ""2663_dividendsOf"";
""2663_withdraw"" -> ""2663_onlyDivis"";
""2663_brbReinvest"" -> ""2663_totalDividends"";
""2663_purchaseTokens"" -> ""2663_fundBankRoll"";
""2663_launchContract"" -> ""2663_onlyOwner"";
""2663_updateCoolOffPeriod"" -> ""2663_onlyOwner"";
""2663_transferTokens"" -> ""2663_withdrawFor"";
""2663_reinvestFor"" -> ""2663_purchaseTokens"";
""2663_processRewards"" -> ""2663_totalDividends"";
""2663_purchaseTokens"" -> ""2663_ethereumToTokens_"";
""2663_buyFor"" -> ""2663_purchaseTokens"";
""2663_reap"" -> ""2663_transferTokens"";
""2663_buy"" -> ""2663_reinvestFor"";
""2663_processRewards"" -> ""2663_teamPlayer"";
""2663_buy"" -> ""2663_purchaseTokens"";
""2663_rewardAvailable"" -> ""2663_available"";
""2663_activateBot"" -> ""2663_enqueue"";
""2663_transfer"" -> ""2663_transferTokens"";
""2663_myDividends"" -> ""2663_totalDividends"";
""2663_transfer"" -> ""2663_onlyTokenHolders"";
""2663_reinvest"" -> ""2663_reinvestFor"";
""2663_reinvestFor"" -> ""2663_totalDividends"";
""2663_withdrawFor"" -> ""2663_totalDividends"";
""2663_buy"" -> ""2663_deposit"";
}
"
0x74ceda99c44da280f2fd8ea8b5dd43f8b66912a8.sol,Sale,"contract Sale is Ownable, TimedStateMachine { using SafeMath for uint256; event LogContribution(address indexed contributor, uint256 amountSent, uint256 excessRefunded); event LogTokenAllocation(address indexed contributor, uint256 contribution, uint256 tokens); event LogDisbursement(address indexed beneficiary, uint256 tokens); bytes32 public constant SETUP = ; bytes32 public constant SETUP_DONE = ; bytes32 public constant SALE_IN_PROGRESS = ; bytes32 public constant SALE_ENDED = ; mapping(address => uint256) public contributions; uint256 public weiContributed = 0; uint256 public contributionCap; address public wallet; MintableToken public token; DisbursementHandler public disbursementHandler; function Sale( address _wallet, uint256 _contributionCap ) public { require(_wallet != 0); require(_contributionCap != 0); wallet = _wallet; token = createTokenContract(); disbursementHandler = new DisbursementHandler(token); contributionCap = _contributionCap; setupStages(); }",0,"subgraph cluster_2563_DetherSale {
label=""DetherSale"";
""2563_DetherSale"" [label=""DetherSale""];
""2563_allocateTokens"" [label=""allocateTokens""];
""2563_calculatePrice"" [label=""calculatePrice""];
""2563_presaleAllocateTokens"" [label=""presaleAllocateTokens""];
""2563_registerPresaleContributor"" [label=""registerPresaleContributor""];
""2563_contribute"" [label=""contribute""];
""2563_getContributionLimit"" [label=""getContributionLimit""];
""2563_createTokenContract"" [label=""createTokenContract""];
""2563_setupStages"" [label=""setupStages""];
""2563_onSaleEnded"" [label=""onSaleEnded""];
""2563_performInitialAllocations"" [label=""performInitialAllocations""];
""2563_DetherSale"" -> ""2563_Sale"";
""2563_getContributionLimit"" -> ""2563_getStageStartTime"";
""2563_presaleAllocateTokens"" -> ""2563_checkAllowed"";
""2563_contribute"" -> ""2563_checkAllowed"";
""2563_registerPresaleContributor"" -> ""2563_registerUser"";
""2563_performInitialAllocations"" -> ""2563_distributeTimelockedTokens"";
""2563_performInitialAllocations"" -> ""2563_onlyOwner"";
""2563_registerPresaleContributor"" -> ""2563_onlyOwner"";
""2563_setupStages"" -> ""2563_setupStages"";
""2563_onSaleEnded"" -> ""2563_calculatePrice"";
""2563_allocateTokens"" -> ""2563_checkAllowed"";
""2563_performInitialAllocations"" -> ""2563_checkAllowed"";
""2563_contribute"" -> ""2563_contribute"";
}
"
0x7868fc162988289062dbcdb670a3cf6c8da66f84.sol,CDMarketplace,contract CDMarketplace is Ownable { bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba; address public wallet; uint256 public fee_percentage; ERC721Basic public token; address public manager; address internal checkAndBuySender; address public TVTokenAddress; address public TVCrowdsaleAddress; bytes4 constant TOKEN_RECEIVED = bytes4(keccak256()); modifier onlyOwnerOrManager() { require(msg.sender == owner || manager == msg.sender); _; },0,"subgraph cluster_790_CDMarketplace {
label=""CDMarketplace"";
""790_changeTVCrowdsaleAddress"" [label=""changeTVCrowdsaleAddress""];
""790_onERC721Received"" [label=""onERC721Received""];
""790_changeFeePercentage"" [label=""changeFeePercentage""];
""790_changeAndBuy"" [label=""changeAndBuy""];
""790_setManager"" [label=""setManager""];
""790_constructor"" [label=""constructor""];
""790_setToken"" [label=""setToken""];
""790_changeTVTokenAddress"" [label=""changeTVTokenAddress""];
""790_setWallet"" [label=""setWallet""];
""790_convertBytesToBytes32"" [label=""convertBytesToBytes32""];
""790_toBytes"" [label=""toBytes""];
""790_onTokenReceived"" [label=""onTokenReceived""];
""790_cancel"" [label=""cancel""];
""790_changeTVCrowdsaleAddress"" -> ""790_onlyOwnerOrManager"";
""790_setToken"" -> ""790_onlyOwnerOrManager"";
""790_setWallet"" -> ""790_onlyOwnerOrManager"";
""790_changeTVTokenAddress"" -> ""790_onlyOwnerOrManager"";
""790_onTokenReceived"" -> ""790_convertBytesToBytes32"";
""790_onERC721Received"" -> ""790_convertBytesToBytes32"";
""790_changeFeePercentage"" -> ""790_onlyOwnerOrManager"";
""790_setManager"" -> ""790_onlyOwner"";
""790_changeAndBuy"" -> ""790_toBytes"";
}
"
0x341ff5232e336c2be8e6a8cc7d92569e93e682df.sol,ResourcesChain,"contract ResourcesChain is Pausable, StandardToken, BlackList { string public name; string public symbol; uint public decimals; address public upgradedAddress; bool public deprecated; function ResourcesChain(uint _initialSupply, string _name, string _symbol, uint _decimals) public { _totalSupply = _initialSupply; name = _name; symbol = _symbol; decimals = _decimals; balances[owner] = _initialSupply; deprecated = false; }",0,"subgraph cluster_1142_ResourcesChain {
label=""ResourcesChain"";
""1142_transferFrom"" [label=""transferFrom""];
""1142_setParams"" [label=""setParams""];
""1142_balanceOf"" [label=""balanceOf""];
""1142_approve"" [label=""approve""];
""1142_issue"" [label=""issue""];
""1142_redeem"" [label=""redeem""];
""1142_ResourcesChain"" [label=""ResourcesChain""];
""1142_transfer"" [label=""transfer""];
""1142_allowance"" [label=""allowance""];
""1142_totalSupply"" [label=""totalSupply""];
""1142_deprecate"" [label=""deprecate""];
""1142_transferFrom"" -> ""1142_whenNotPaused"";
""1142_redeem"" -> ""1142_onlyOwner"";
""1142_balanceOf"" -> ""1142_balanceOf"";
""1142_allowance"" -> ""1142_allowance"";
""1142_transferFrom"" -> ""1142_transferFrom"";
""1142_setParams"" -> ""1142_onlyOwner"";
""1142_approve"" -> ""1142_onlyPayloadSize"";
""1142_transfer"" -> ""1142_transfer"";
""1142_approve"" -> ""1142_approve"";
""1142_transfer"" -> ""1142_whenNotPaused"";
""1142_issue"" -> ""1142_onlyOwner"";
""1142_deprecate"" -> ""1142_onlyOwner"";
}
"
0x6e10e8f202ced220791043df74aa84615caec537.sol,KittyToken,"contract KittyToken is AccessAdmin, ERC721 { using SafeMath for SafeMath; event CreateGift(uint tokenId,uint32 cardId, address _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved); struct Kitty { uint32 kittyId; }",0,"subgraph cluster_1671_KittyToken {
label=""KittyToken"";
""1671__transfer"" [label=""_transfer""];
""1671_ownerOf"" [label=""ownerOf""];
""1671_safeTransferFrom"" [label=""safeTransferFrom""];
""1671_tokensOfkitty"" [label=""tokensOfkitty""];
""1671_setTokenPriceByOwner"" [label=""setTokenPriceByOwner""];
""1671__safeTransferFrom"" [label=""_safeTransferFrom""];
""1671_symbol"" [label=""symbol""];
""1671_tokenByIndex"" [label=""tokenByIndex""];
""1671_name"" [label=""name""];
""1671_totalSupply"" [label=""totalSupply""];
""1671_transferFrom"" [label=""transferFrom""];
""1671_getAuctions"" [label=""getAuctions""];
""1671_KittyToken"" [label=""KittyToken""];
""1671_CreateKittyToken"" [label=""CreateKittyToken""];
""1671__createKittyToken"" [label=""_createKittyToken""];
""1671_setTokenPrice"" [label=""setTokenPrice""];
""1671_balanceOf"" [label=""balanceOf""];
""1671_getKittyInfo"" [label=""getKittyInfo""];
""1671_approve"" [label=""approve""];
""1671_tokensOfOwner"" [label=""tokensOfOwner""];
""1671_getApproved"" [label=""getApproved""];
""1671_setApprovalForAll"" [label=""setApprovalForAll""];
""1671_safeTransferByContract"" [label=""safeTransferByContract""];
""1671_isApprovedForAll"" [label=""isApprovedForAll""];
""1671_tokenOfOwnerByIndex"" [label=""tokenOfOwnerByIndex""];
""1671_transferFrom"" -> ""1671_isValidToken"";
""1671_safeTransferByContract"" -> ""1671__transfer"";
""1671_setTokenPrice"" -> ""1671_onlyAccess"";
""1671__safeTransferFrom"" -> ""1671_canTransfer"";
""1671_setApprovalForAll"" -> ""1671_whenNotPaused"";
""1671__safeTransferFrom"" -> ""1671_isValidToken"";
""1671_CreateKittyToken"" -> ""1671_onlyAccess"";
""1671_getApproved"" -> ""1671_isValidToken"";
""1671_approve"" -> ""1671_whenNotPaused"";
""1671_KittyToken"" -> ""1671_setAdminContract"";
""1671_safeTransferByContract"" -> ""1671_whenNotPaused"";
""1671_transferFrom"" -> ""1671_whenNotPaused"";
""1671__safeTransferFrom"" -> ""1671__transfer"";
""1671_transferFrom"" -> ""1671__transfer"";
""1671_KittyToken"" -> ""1671_setActionContract"";
""1671__createKittyToken"" -> ""1671__transfer"";
""1671_CreateKittyToken"" -> ""1671__createKittyToken"";
""1671_safeTransferFrom"" -> ""1671__safeTransferFrom"";
""1671_transferFrom"" -> ""1671_canTransfer"";
}
"
0xee3e4e2467c0c5aa7b7d944881d51ccb36fefcca.sol,AlgoryCrowdsale,"contract AlgoryCrowdsale is InvestmentPolicyCrowdsale { uint constant public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5; using SafeMath for uint; CrowdsaleToken public token; PricingStrategy public pricingStrategy; FinalizeAgent public finalizeAgent; address public multisigWallet; address public beneficiary; uint public presaleStartsAt; uint public startsAt; uint public endsAt; uint public tokensSold = 0; uint public weiRaised = 0; uint public whitelistWeiRaised = 0; uint public presaleWeiRaised = 0; uint public investorCount = 0; uint public loadedRefund = 0; uint public weiRefunded = 0; bool public finalized = false; bool public allowRefund = false; bool private isPreallocated = false; mapping (address => uint256) public investedAmountOf; mapping (address => uint256) public tokenAmountOf; mapping (address => uint) public earlyParticipantWhitelist; enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}",0,"subgraph cluster_2130_AlgoryCrowdsale {
label=""AlgoryCrowdsale"";
""2130_assignTokens"" [label=""assignTokens""];
""2130_setStartsAt"" [label=""setStartsAt""];
""2130_loadRefund"" [label=""loadRefund""];
""2130_setPresaleStartsAt"" [label=""setPresaleStartsAt""];
""2130_investInternal"" [label=""investInternal""];
""2130_setFinalizeAgent"" [label=""setFinalizeAgent""];
""2130_fallback"" [label=""fallback""];
""2130_getTokensLeft"" [label=""getTokensLeft""];
""2130_setEndsAt"" [label=""setEndsAt""];
""2130_isAllTokensApproved"" [label=""isAllTokensApproved""];
""2130_loadEarlyParticipantsWhitelist"" [label=""loadEarlyParticipantsWhitelist""];
""2130_isCrowdsaleFull"" [label=""isCrowdsaleFull""];
""2130_finalize"" [label=""finalize""];
""2130_refund"" [label=""refund""];
""2130_setMultisigWallet"" [label=""setMultisigWallet""];
""2130_getState"" [label=""getState""];
""2130_AlgoryCrowdsale"" [label=""AlgoryCrowdsale""];
""2130_prepareCrowdsale"" [label=""prepareCrowdsale""];
""2130_setEarlyParticipantWhitelist"" [label=""setEarlyParticipantWhitelist""];
""2130_isBreakingCap"" [label=""isBreakingCap""];
""2130_allowRefunding"" [label=""allowRefunding""];
""2130_setPricingStrategy"" [label=""setPricingStrategy""];
""2130_preallocateTokens"" [label=""preallocateTokens""];
""2130_investInternal"" -> ""2130_assignTokens"";
""2130_allowRefunding"" -> ""2130_onlyOwner"";
""2130_setPresaleStartsAt"" -> ""2130_onlyOwner"";
""2130_finalize"" -> ""2130_inState"";
""2130_prepareCrowdsale"" -> ""2130_preallocateTokens"";
""2130_isAllTokensApproved"" -> ""2130_getTokensLeft"";
""2130_setEarlyParticipantWhitelist"" -> ""2130_onlyOwner"";
""2130_isBreakingCap"" -> ""2130_getTokensLeft"";
""2130_setPricingStrategy"" -> ""2130_onlyOwner"";
""2130_loadEarlyParticipantsWhitelist"" -> ""2130_onlyOwner"";
""2130_setMultisigWallet"" -> ""2130_onlyOwner"";
""2130_AlgoryCrowdsale"" -> ""2130_setMultisigWallet"";
""2130_investInternal"" -> ""2130_isBreakingCap"";
""2130_investInternal"" -> ""2130_getState"";
""2130_prepareCrowdsale"" -> ""2130_onlyOwner"";
""2130_finalize"" -> ""2130_onlyOwner"";
""2130_refund"" -> ""2130_inState"";
""2130_setEndsAt"" -> ""2130_onlyOwner"";
""2130_loadRefund"" -> ""2130_inState"";
""2130_finalize"" -> ""2130_whenNotPaused"";
""2130_setStartsAt"" -> ""2130_getState"";
""2130_setPresaleStartsAt"" -> ""2130_inState"";
""2130_setStartsAt"" -> ""2130_onlyOwner"";
""2130_setPricingStrategy"" -> ""2130_getState"";
""2130_AlgoryCrowdsale"" -> ""2130_setPricingStrategy"";
""2130_preallocateTokens"" -> ""2130_assignTokens"";
""2130_loadEarlyParticipantsWhitelist"" -> ""2130_setEarlyParticipantWhitelist"";
""2130_allowRefunding"" -> ""2130_getState"";
""2130_getState"" -> ""2130_isCrowdsaleFull"";
""2130_investInternal"" -> ""2130_whenNotPaused"";
""2130_isCrowdsaleFull"" -> ""2130_getTokensLeft"";
""2130_setFinalizeAgent"" -> ""2130_onlyOwner"";
""2130_prepareCrowdsale"" -> ""2130_isAllTokensApproved"";
""2130_fallback"" -> ""2130_investInternal"";
}
"
0x0373bd549897b97bfdc17e9be3f576eb03916857.sol,SoulcoinGems,contract SoulcoinGems { uint256 constant scaleFactor = 0x10000000000000000; int constant crr_n = 7; int constant crr_d = 9; int constant price_coeff = -0x296ABF784A358468C; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; mapping(address => uint256) public tokenBalance; mapping(address => int256) public payouts; uint256 public totalSupply; int256 totalPayouts; uint256 earningsPerToken; uint256 public contractBalance; uint private __totalSupply = 0; mapping (address => uint) private __balanceOf; mapping (address => mapping (address => uint)) private __allowances; function SoulcoinGems() public {},0,"subgraph cluster_1380_SoulcoinGems {
label=""SoulcoinGems"";
""1380_generateSoul"" [label=""generateSoul""];
""1380_approve"" [label=""approve""];
""1380_withdrawOld"" [label=""withdrawOld""];
""1380_fixedExp"" [label=""fixedExp""];
""1380_add"" [label=""add""];
""1380_mul"" [label=""mul""];
""1380_reserve"" [label=""reserve""];
""1380_dividends"" [label=""dividends""];
""1380_div"" [label=""div""];
""1380_sell"" [label=""sell""];
""1380_balanceOf"" [label=""balanceOf""];
""1380_calculateDividendTokens"" [label=""calculateDividendTokens""];
""1380_buy"" [label=""buy""];
""1380_mineSoul"" [label=""mineSoul""];
""1380_fallback"" [label=""fallback""];
""1380_balance"" [label=""balance""];
""1380_withdraw"" [label=""withdraw""];
""1380_reinvestDividends"" [label=""reinvestDividends""];
""1380_fund"" [label=""fund""];
""1380_sub"" [label=""sub""];
""1380_SoulcoinGems"" [label=""SoulcoinGems""];
""1380_getMeOutOfHere"" [label=""getMeOutOfHere""];
""1380_transfer"" [label=""transfer""];
""1380_allowance"" [label=""allowance""];
""1380_sellMyTokens"" [label=""sellMyTokens""];
""1380_pyrBalanceOf"" [label=""pyrBalanceOf""];
""1380_fixedLog"" [label=""fixedLog""];
""1380_transferFrom"" [label=""transferFrom""];
""1380_getTokensForEther"" [label=""getTokensForEther""];
""1380_getEtherForTokens"" [label=""getEtherForTokens""];
""1380_buyPrice"" [label=""buyPrice""];
""1380_totalSupply"" [label=""totalSupply""];
""1380_sellPrice"" [label=""sellPrice""];
""1380_fallback"" -> ""1380_fund"";
""1380_buy"" -> ""1380_reserve"";
""1380_calculateDividendTokens"" -> ""1380_reserve"";
""1380_mineSoul"" -> ""1380_reinvestDividends"";
""1380_calculateDividendTokens"" -> ""1380_sub"";
""1380_mineSoul"" -> ""1380_sellMyTokens"";
""1380_getTokensForEther"" -> ""1380_fixedLog"";
""1380_sell"" -> ""1380_add"";
""1380_sell"" -> ""1380_div"";
""1380_sell"" -> ""1380_getEtherForTokens"";
""1380_reinvestDividends"" -> ""1380_calculateDividendTokens"";
""1380_getTokensForEther"" -> ""1380_sub"";
""1380_reinvestDividends"" -> ""1380_reserve"";
""1380_calculateDividendTokens"" -> ""1380_fixedExp"";
""1380_reinvestDividends"" -> ""1380_generateSoul"";
""1380_sellMyTokens"" -> ""1380_sell"";
""1380_sell"" -> ""1380_sub"";
""1380_reinvestDividends"" -> ""1380_add"";
""1380_reinvestDividends"" -> ""1380_div"";
""1380_sellMyTokens"" -> ""1380_pyrBalanceOf"";
""1380_reserve"" -> ""1380_sub"";
""1380_sellPrice"" -> ""1380_div"";
""1380_getEtherForTokens"" -> ""1380_reserve"";
""1380_getMeOutOfHere"" -> ""1380_sellMyTokens"";
""1380_getTokensForEther"" -> ""1380_reserve"";
""1380_buy"" -> ""1380_generateSoul"";
""1380_buy"" -> ""1380_getTokensForEther"";
""1380_fund"" -> ""1380_buy"";
""1380_reserve"" -> ""1380_balance"";
""1380_getMeOutOfHere"" -> ""1380_withdraw"";
""1380_getEtherForTokens"" -> ""1380_fixedExp"";
""1380_fund"" -> ""1380_add"";
""1380_buy"" -> ""1380_add"";
""1380_getEtherForTokens"" -> ""1380_fixedLog"";
""1380_withdraw"" -> ""1380_sub"";
""1380_withdraw"" -> ""1380_dividends"";
""1380_getEtherForTokens"" -> ""1380_sub"";
""1380_reinvestDividends"" -> ""1380_dividends"";
""1380_calculateDividendTokens"" -> ""1380_fixedLog"";
""1380_withdrawOld"" -> ""1380_dividends"";
""1380_transfer"" -> ""1380_balanceOf"";
""1380_sellPrice"" -> ""1380_getEtherForTokens"";
""1380_withdrawOld"" -> ""1380_sub"";
""1380_fallback"" -> ""1380_withdrawOld"";
""1380_buyPrice"" -> ""1380_getTokensForEther"";
""1380_getTokensForEther"" -> ""1380_fixedExp"";
""1380_buy"" -> ""1380_div"";
}
"
0x6ed0e1c20bf3ff8384570de742cf98cd08f2a012.sol,Whitelist,contract Whitelist is Ownable { mapping(address => bool) whitelist; event AddedToWhitelist(address indexed account); event RemovedFromWhitelist(address indexed account); modifier onlyWhitelisted() { require(isWhitelisted(msg.sender)); _; },0,"subgraph cluster_129_Whitelist {
label=""Whitelist"";
""129_add"" [label=""add""];
""129_remove"" [label=""remove""];
""129_isWhitelisted"" [label=""isWhitelisted""];
""129_add"" -> ""129_onlyOwner"";
""129_remove"" -> ""129_onlyOwner"";
}
"
0x4be8d9681891981e81bcfb61845483a68a6e1425.sol,ARTS,"contract ARTS is ERC223, Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public initialSupply = 30e9 * 1e8; uint256 public totalSupply; uint256 public distributeAmount = 0; bool public mintingFinished = false; mapping(address => uint256) public balanceOf; mapping(address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; event FrozenFunds(address indexed target, bool frozen); event LockedFunds(address indexed target, uint256 locked); event Burn(address indexed from, uint256 amount); event Mint(address indexed to, uint256 amount); event MintFinished(); function ARTS() public { totalSupply = initialSupply; balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_1844_ARTS {
label=""ARTS"";
""1844_lockupAccounts"" [label=""lockupAccounts""];
""1844_totalSupply"" [label=""totalSupply""];
""1844_distributeAirdrop"" [label=""distributeAirdrop""];
""1844_setDistributeAmount"" [label=""setDistributeAmount""];
""1844_ARTS"" [label=""ARTS""];
""1844_isContract"" [label=""isContract""];
""1844_approve"" [label=""approve""];
""1844_mint"" [label=""mint""];
""1844_balanceOf"" [label=""balanceOf""];
""1844_transferFrom"" [label=""transferFrom""];
""1844_transferToAddress"" [label=""transferToAddress""];
""1844_collectTokens"" [label=""collectTokens""];
""1844_autoDistribute"" [label=""autoDistribute""];
""1844_name"" [label=""name""];
""1844_burn"" [label=""burn""];
""1844_fallback"" [label=""fallback""];
""1844_symbol"" [label=""symbol""];
""1844_transfer"" [label=""transfer""];
""1844_finishMinting"" [label=""finishMinting""];
""1844_allowance"" [label=""allowance""];
""1844_decimals"" [label=""decimals""];
""1844_freezeAccounts"" [label=""freezeAccounts""];
""1844_transferToContract"" [label=""transferToContract""];
""1844_mint"" -> ""1844_onlyOwner"";
""1844_setDistributeAmount"" -> ""1844_onlyOwner"";
""1844_finishMinting"" -> ""1844_canMint"";
""1844_mint"" -> ""1844_canMint"";
""1844_transfer"" -> ""1844_transferToContract"";
""1844_transfer"" -> ""1844_isContract"";
""1844_transfer"" -> ""1844_transferToAddress"";
""1844_fallback"" -> ""1844_autoDistribute"";
""1844_freezeAccounts"" -> ""1844_onlyOwner"";
""1844_lockupAccounts"" -> ""1844_onlyOwner"";
""1844_finishMinting"" -> ""1844_onlyOwner"";
""1844_burn"" -> ""1844_onlyOwner"";
""1844_collectTokens"" -> ""1844_onlyOwner"";
}
"
0x6f9e77dc013e6a7156a5aeb26fb095f3405fd911.sol,FlexibleTokenSale,"contract FlexibleTokenSale is Owned { using SafeMath for uint256; bool public suspended; uint256 public tokenPrice; uint256 public tokenPerEther; uint256 public contributionMin; uint256 public tokenConversionFactor; address public walletAddress; TokenTransfer token; uint256 public totalTokensSold; uint256 public totalEtherCollected; address public priceUpdateAddress; event Initialized(); event TokenPriceUpdated(uint256 _newValue); event TokenPerEtherUpdated(uint256 _newValue); event TokenMinUpdated(uint256 _newValue); event WalletAddressUpdated(address indexed _newAddress); event SaleSuspended(); event SaleResumed(); event TokensPurchased(address indexed _beneficiary, uint256 _cost, uint256 _tokens); event TokensReclaimed(uint256 _amount); event PriceAddressUpdated(address indexed _newAddress); function FlexibleTokenSale(address _tokenAddress,address _walletAddress,uint _tokenPerEther,address _priceUpdateAddress) public Owned() { require(_walletAddress != address(0)); require(_walletAddress != address(this)); require(address(token) == address(0)); require(address(_tokenAddress) != address(0)); require(address(_tokenAddress) != address(this)); require(address(_tokenAddress) != address(walletAddress)); walletAddress = _walletAddress; priceUpdateAddress = _priceUpdateAddress; token = TokenTransfer(_tokenAddress); suspended = false; tokenPrice = 100; tokenPerEther = _tokenPerEther; contributionMin = 5 * 10**18; totalTokensSold = 0; totalEtherCollected = 0; tokenConversionFactor = 10**(uint256(18).sub(token.decimals()).add(2)); assert(tokenConversionFactor > 0); }",0,"subgraph cluster_883_FlexibleTokenSale {
label=""FlexibleTokenSale"";
""883_setMinToken"" [label=""setMinToken""];
""883_setWalletAddress"" [label=""setWalletAddress""];
""883_suspend"" [label=""suspend""];
""883_buyTokensInternal"" [label=""buyTokensInternal""];
""883_updatePriceAddress"" [label=""updatePriceAddress""];
""883_reclaimTokens"" [label=""reclaimTokens""];
""883_buyTokens"" [label=""buyTokens""];
""883_resume"" [label=""resume""];
""883_setTokenPrice"" [label=""setTokenPrice""];
""883_fallback"" [label=""fallback""];
""883_updateTokenPerEther"" [label=""updateTokenPerEther""];
""883_FlexibleTokenSale"" [label=""FlexibleTokenSale""];
""883_setMinToken"" -> ""883_onlyOwner"";
""883_FlexibleTokenSale"" -> ""883_Owned"";
""883_suspend"" -> ""883_onlyOwner"";
""883_buyTokens"" -> ""883_buyTokensInternal"";
""883_resume"" -> ""883_onlyOwner"";
""883_reclaimTokens"" -> ""883_onlyOwner"";
""883_setWalletAddress"" -> ""883_isOwner"";
""883_setWalletAddress"" -> ""883_onlyOwner"";
""883_setTokenPrice"" -> ""883_onlyOwner"";
""883_fallback"" -> ""883_buyTokens"";
""883_updatePriceAddress"" -> ""883_onlyOwner"";
}
"
0x05c848e3547bc3ccd977b84140fdc917bfff96a1.sol,BodyRabbit,"contract BodyRabbit is BaseRabbit, ERC721 { uint public totalBunny = 0; string public constant name = ; string public constant symbol = ; PrivateRabbitInterface privateContract; AdmixtureInterface AdmixtureContract; function setPriv(address _privAddress) public returns(bool) { privAddress = _privAddress; privateContract = PrivateRabbitInterface(_privAddress); }",0,"subgraph cluster_2049_BodyRabbit {
label=""BodyRabbit"";
""2049_uintToBytes"" [label=""uintToBytes""];
""2049_totalSupply"" [label=""totalSupply""];
""2049_setMotherCount"" [label=""setMotherCount""];
""2049_setPauseSave"" [label=""setPauseSave""];
""2049_constructor"" [label=""constructor""];
""2049_isPauseSave"" [label=""isPauseSave""];
""2049_getRabbitMother"" [label=""getRabbitMother""];
""2049_transfer"" [label=""transfer""];
""2049_removeTokenList"" [label=""removeTokenList""];
""2049_isPromoPause"" [label=""isPromoPause""];
""2049_getcoolduwn"" [label=""getcoolduwn""];
""2049_getTokenOwner"" [label=""getTokenOwner""];
""2049_addTokenList"" [label=""addTokenList""];
""2049_getRabbitDNK"" [label=""getRabbitDNK""];
""2049_transferFrom"" [label=""transferFrom""];
""2049_balanceOf"" [label=""balanceOf""];
""2049_approve"" [label=""approve""];
""2049_getBunny"" [label=""getBunny""];
""2049_sendMoney"" [label=""sendMoney""];
""2049_bytes32ToString"" [label=""bytes32ToString""];
""2049_getMotherCount"" [label=""getMotherCount""];
""2049_getOwnerGennezise"" [label=""getOwnerGennezise""];
""2049_updateBunny"" [label=""updateBunny""];
""2049_isPriv"" [label=""isPriv""];
""2049_getBreed"" [label=""getBreed""];
""2049_setAdmixture"" [label=""setAdmixture""];
""2049_isUIntPublic"" [label=""isUIntPublic""];
""2049_getTotalSalaryBunny"" [label=""getTotalSalaryBunny""];
""2049_setRabbitMother"" [label=""setRabbitMother""];
""2049_getGiffBlock"" [label=""getGiffBlock""];
""2049_getRabbitMotherSumm"" [label=""getRabbitMotherSumm""];
""2049_getSirePrice"" [label=""getSirePrice""];
""2049_setPriv"" [label=""setPriv""];
""2049_ownerOf"" [label=""ownerOf""];
""2049_getBunny"" -> ""2049_getSirePrice"";
""2049_transferFrom"" -> ""2049_addTokenList"";
""2049_isPromoPause"" -> ""2049_getInWhitelist"";
""2049_transfer"" -> ""2049_addTokenList"";
""2049_isUIntPublic"" -> ""2049_isPauseSave"";
""2049_transferFrom"" -> ""2049_getInWhitelist"";
""2049_setRabbitMother"" -> ""2049_setMotherCount"";
""2049_transferFrom"" -> ""2049_removeTokenList"";
""2049_transfer"" -> ""2049_removeTokenList"";
""2049_updateBunny"" -> ""2049_onlyWhitelisted"";
""2049_setPauseSave"" -> ""2049_onlyWhitelisted"";
}
"
0x56cd53067e5acd557dbbfb4c66580dfb9722962a.sol,CryptoMoviesToken,"contract CryptoMoviesToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; uint256 private firstStepLimit = 1.2 ether; uint256 private secondStepLimit = 5 ether; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",0,"subgraph cluster_975_CryptoMoviesToken {
label=""CryptoMoviesToken"";
""975_transfer"" [label=""transfer""];
""975_createContractMovie"" [label=""createContractMovie""];
""975_getMovie"" [label=""getMovie""];
""975_name"" [label=""name""];
""975_transferFrom"" [label=""transferFrom""];
""975__transfer"" [label=""_transfer""];
""975__createMovie"" [label=""_createMovie""];
""975_payout"" [label=""payout""];
""975__payout"" [label=""_payout""];
""975_takeOwnership"" [label=""takeOwnership""];
""975_balanceOf"" [label=""balanceOf""];
""975__owns"" [label=""_owns""];
""975__approved"" [label=""_approved""];
""975_symbol"" [label=""symbol""];
""975__addressNotNull"" [label=""_addressNotNull""];
""975_purchase"" [label=""purchase""];
""975_approve"" [label=""approve""];
""975_setCEO"" [label=""setCEO""];
""975_setCOO"" [label=""setCOO""];
""975_ownerOf"" [label=""ownerOf""];
""975_implementsERC721"" [label=""implementsERC721""];
""975_totalSupply"" [label=""totalSupply""];
""975_tokensOfOwner"" [label=""tokensOfOwner""];
""975_createPromoMovie"" [label=""createPromoMovie""];
""975_priceOf"" [label=""priceOf""];
""975_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""975_transfer"" -> ""975__addressNotNull"";
""975_tokensOfOwner"" -> ""975_totalSupply"";
""975__createMovie"" -> ""975__transfer"";
""975_createPromoMovie"" -> ""975__createMovie"";
""975_payout"" -> ""975__payout"";
""975_transfer"" -> ""975__transfer"";
""975_transferFrom"" -> ""975__addressNotNull"";
""975_takeOwnership"" -> ""975__approved"";
""975_approve"" -> ""975__owns"";
""975_transferFrom"" -> ""975__transfer"";
""975_createContractMovie"" -> ""975__createMovie"";
""975_purchase"" -> ""975__transfer"";
""975_createPromoMovie"" -> ""975_onlyCOO"";
""975_setCEO"" -> ""975_onlyCEO"";
""975_transfer"" -> ""975__owns"";
""975_transferFrom"" -> ""975__owns"";
""975_setCOO"" -> ""975_onlyCEO"";
""975_createContractMovie"" -> ""975_onlyCOO"";
""975_transferFrom"" -> ""975__approved"";
""975_takeOwnership"" -> ""975__transfer"";
""975_payout"" -> ""975_onlyCLevel"";
""975_tokensOfOwner"" -> ""975_balanceOf"";
""975_takeOwnership"" -> ""975__addressNotNull"";
""975_purchase"" -> ""975__addressNotNull"";
}
"
0x7468947690bca3549556c476b24bb970324aee66.sol,PHONEToken,contract PHONEToken is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals)); function PHONEToken() { totalSupply = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; },0,"subgraph cluster_539_PHONEToken {
label=""PHONEToken"";
""539_PHONEToken"" [label=""PHONEToken""];
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,SafeDecimalMath,"contract SafeDecimalMath { uint8 public constant decimals = 18; uint public constant UNIT = 10 ** uint(decimals); function addIsSafe(uint x, uint y) pure internal returns (bool) { return x + y >= y; }",0,"subgraph cluster_511_SafeDecimalMath {
label=""SafeDecimalMath"";
""511_mulIsSafe"" [label=""mulIsSafe""];
""511_safeSub"" [label=""safeSub""];
""511_safeMul"" [label=""safeMul""];
""511_addIsSafe"" [label=""addIsSafe""];
""511_divIsSafe"" [label=""divIsSafe""];
""511_subIsSafe"" [label=""subIsSafe""];
""511_safeDiv"" [label=""safeDiv""];
""511_safeAdd"" [label=""safeAdd""];
""511_safeDiv_dec"" [label=""safeDiv_dec""];
""511_safeMul_dec"" [label=""safeMul_dec""];
""511_intToDec"" [label=""intToDec""];
""511_safeDiv_dec"" -> ""511_safeDiv"";
""511_safeDiv_dec"" -> ""511_safeMul"";
""511_intToDec"" -> ""511_safeMul"";
""511_safeMul_dec"" -> ""511_safeMul"";
}
"
0xd99b8a7fa48e25cce83b81812220a3e03bf64e5f.sol,SkrumbleToken,contract SkrumbleToken is StandardToken { string public name = ; string public symbol = ; uint8 public decimals = 18; function SkrumbleToken() public { totalSupply_ = 1500000000 * 1 ether; balances[msg.sender] = totalSupply_; },0,"subgraph cluster_601_SkrumbleToken {
label=""SkrumbleToken"";
""601_batchTransfer"" [label=""batchTransfer""];
""601_batchTransferSingleValue"" [label=""batchTransferSingleValue""];
""601_SkrumbleToken"" [label=""SkrumbleToken""];
""601_batchTransferSingleValue"" -> ""601_transfer"";
""601_batchTransfer"" -> ""601_transfer"";
}
"
0x0232ba609782cea145ec3663f52cf7aeb4ac773c.sol,PermissionGroups,contract PermissionGroups { address public admin; address public pendingAdmin; mapping(address=>bool) internal operators; mapping(address=>bool) internal alerters; address[] internal operatorsGroup; address[] internal alertersGroup; uint constant internal MAX_GROUP_SIZE = 50; function PermissionGroups() public { admin = msg.sender; },0,"subgraph cluster_507_PermissionGroups {
label=""PermissionGroups"";
""507_PermissionGroups"" [label=""PermissionGroups""];
""507_claimAdmin"" [label=""claimAdmin""];
""507_getOperators"" [label=""getOperators""];
""507_removeAlerter"" [label=""removeAlerter""];
""507_transferAdminQuickly"" [label=""transferAdminQuickly""];
""507_addOperator"" [label=""addOperator""];
""507_removeOperator"" [label=""removeOperator""];
""507_transferAdmin"" [label=""transferAdmin""];
""507_getAlerters"" [label=""getAlerters""];
""507_addAlerter"" [label=""addAlerter""];
""507_removeOperator"" -> ""507_onlyAdmin"";
""507_addAlerter"" -> ""507_onlyAdmin"";
""507_transferAdminQuickly"" -> ""507_onlyAdmin"";
""507_addOperator"" -> ""507_onlyAdmin"";
""507_removeAlerter"" -> ""507_onlyAdmin"";
""507_transferAdmin"" -> ""507_onlyAdmin"";
}
"
0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol,ApplicationAsset,"contract ApplicationAsset { event EventAppAssetOwnerSet(bytes32 indexed _name, address indexed _owner); event EventRunBeforeInit(bytes32 indexed _name); event EventRunBeforeApplyingSettings(bytes32 indexed _name); mapping (bytes32 => uint8) public EntityStates; mapping (bytes32 => uint8) public RecordStates; uint8 public CurrentEntityState; event EventEntityProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required); event DebugEntityRequiredChanges( bytes32 _assetName, uint8 indexed _current, uint8 indexed _required ); bytes32 public assetName; uint8 public RecordNum = 0; bool public _initialized = false; bool public _settingsApplied = false; address public owner = address(0x0) ; address public deployerAddress; function ApplicationAsset() public { deployerAddress = msg.sender; }",0,"subgraph cluster_682_ApplicationAsset {
label=""ApplicationAsset"";
""682_applyAndLockSettings"" [label=""applyAndLockSettings""];
""682_getRecordState"" [label=""getRecordState""];
""682_transferToNewOwner"" [label=""transferToNewOwner""];
""682_getApplicationAssetAddressByName"" [label=""getApplicationAssetAddressByName""];
""682_getTimestamp"" [label=""getTimestamp""];
""682_getEntityState"" [label=""getEntityState""];
""682_runBeforeInitialization"" [label=""runBeforeInitialization""];
""682_getAppBylawUint256"" [label=""getAppBylawUint256""];
""682_runBeforeApplyingSettings"" [label=""runBeforeApplyingSettings""];
""682_setInitialOwnerAndName"" [label=""setInitialOwnerAndName""];
""682_getApplicationState"" [label=""getApplicationState""];
""682_setAssetStates"" [label=""setAssetStates""];
""682_getAppBylawBytes32"" [label=""getAppBylawBytes32""];
""682_ApplicationAsset"" [label=""ApplicationAsset""];
""682_getApplicationEntityState"" [label=""getApplicationEntityState""];
""682_setInitialApplicationAddress"" [label=""setInitialApplicationAddress""];
""682_setInitialOwnerAndName"" -> ""682_getEntityState"";
""682_runBeforeInitialization"" -> ""682_requireNotInitialised"";
""682_applyAndLockSettings"" -> ""682_onlyDeployer"";
""682_applyAndLockSettings"" -> ""682_requireInitialised"";
""682_setInitialOwnerAndName"" -> ""682_runBeforeInitialization"";
""682_applyAndLockSettings"" -> ""682_runBeforeApplyingSettings"";
""682_getAppBylawBytes32"" -> ""682_requireInitialised"";
""682_setInitialOwnerAndName"" -> ""682_requireNotInitialised"";
""682_runBeforeApplyingSettings"" -> ""682_requireSettingsNotApplied"";
""682_setInitialOwnerAndName"" -> ""682_onlyOwner"";
""682_getAppBylawUint256"" -> ""682_requireInitialised"";
""682_setInitialOwnerAndName"" -> ""682_setAssetStates"";
""682_applyAndLockSettings"" -> ""682_requireSettingsNotApplied"";
""682_runBeforeApplyingSettings"" -> ""682_requireInitialised"";
""682_transferToNewOwner"" -> ""682_requireInitialised"";
""682_setInitialApplicationAddress"" -> ""682_requireNotInitialised"";
""682_transferToNewOwner"" -> ""682_onlyOwner"";
""682_setInitialApplicationAddress"" -> ""682_onlyDeployer"";
}
"
0x56d06701fd44a4a857cb96b266f505a2832950c5.sol,Home,"contract Home is Child,BasicTime { uint32 constant SGININ_REWARD_TEMPSTUFF = 23001; uint constant SGININ_REWARD_FREEDAY = 10; uint32 constant SGININ_REWARD_STUFF = 21000; uint constant SGININ_REWARD_NUM = 300; mapping(address => uint) g_SignInDay; constructor(Main main) public Child(main) {}",0,"subgraph cluster_4259_Home {
label=""Home"";
""4259_Withdraw"" [label=""Withdraw""];
""4259_constructor"" [label=""constructor""];
""4259_CanSignIn"" [label=""CanSignIn""];
""4259_GetPlayerInfo"" [label=""GetPlayerInfo""];
""4259_Donate"" [label=""Donate""];
""4259_GetDayReward"" [label=""GetDayReward""];
""4259_Donate"" -> ""4259_AddBonus"";
""4259_GetPlayerInfo"" -> ""4259_CanSignIn"";
""4259_constructor"" -> ""4259_constructor"";
""4259_GetDayReward"" -> ""4259_CanSignIn"";
""4259_CanSignIn"" -> ""4259_GetDayCount"";
}
"
0xb3ed21d5475817134c8f086d46dd1b5f6c49de0a.sol,ZethrMultiSigWallet,"contract ZethrMultiSigWallet is ERC223Receiving { using SafeMath for uint; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event WhiteListAddition(address indexed contractAddress); event WhiteListRemoval(address indexed contractAddress); event RequirementChange(uint required); event BankrollInvest(uint amountReceived); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; bool internal reEntered = false; uint constant public MAX_OWNER_COUNT = 15; struct Transaction { address destination; uint value; bytes data; bool executed; }",0,"subgraph cluster_1272_ZethrMultiSigWallet {
label=""ZethrMultiSigWallet"";
""1272_getConfirmations"" [label=""getConfirmations""];
""1272_getOwners"" [label=""getOwners""];
""1272_getTransactionIds"" [label=""getTransactionIds""];
""1272_addOwner"" [label=""addOwner""];
""1272_constructor"" [label=""constructor""];
""1272_removeOwner"" [label=""removeOwner""];
""1272_tokenFallback"" [label=""tokenFallback""];
""1272_addTransaction"" [label=""addTransaction""];
""1272_submitTransaction"" [label=""submitTransaction""];
""1272_executeTransaction"" [label=""executeTransaction""];
""1272_replaceOwner"" [label=""replaceOwner""];
""1272_fallback"" [label=""fallback""];
""1272_getConfirmationCount"" [label=""getConfirmationCount""];
""1272_getTransactionCount"" [label=""getTransactionCount""];
""1272_revokeConfirmation"" [label=""revokeConfirmation""];
""1272_isConfirmed"" [label=""isConfirmed""];
""1272_confirmTransaction"" [label=""confirmTransaction""];
""1272_changeRequirement"" [label=""changeRequirement""];
""1272_revokeConfirmation"" -> ""1272_confirmed"";
""1272_replaceOwner"" -> ""1272_ownerDoesNotExist"";
""1272_constructor"" -> ""1272_validRequirement"";
""1272_addOwner"" -> ""1272_validRequirement"";
""1272_changeRequirement"" -> ""1272_onlyWallet"";
""1272_revokeConfirmation"" -> ""1272_notExecuted"";
""1272_changeRequirement"" -> ""1272_validRequirement"";
""1272_removeOwner"" -> ""1272_changeRequirement"";
""1272_confirmTransaction"" -> ""1272_executeTransaction"";
""1272_executeTransaction"" -> ""1272_notExecuted"";
""1272_executeTransaction"" -> ""1272_isConfirmed"";
""1272_submitTransaction"" -> ""1272_addTransaction"";
""1272_replaceOwner"" -> ""1272_ownerExists"";
""1272_addOwner"" -> ""1272_onlyWallet"";
""1272_removeOwner"" -> ""1272_ownerExists"";
""1272_removeOwner"" -> ""1272_onlyWallet"";
""1272_confirmTransaction"" -> ""1272_ownerExists"";
""1272_confirmTransaction"" -> ""1272_notConfirmed"";
""1272_addTransaction"" -> ""1272_notNull"";
""1272_submitTransaction"" -> ""1272_confirmTransaction"";
""1272_addOwner"" -> ""1272_notNull"";
""1272_confirmTransaction"" -> ""1272_transactionExists"";
""1272_addOwner"" -> ""1272_ownerDoesNotExist"";
""1272_revokeConfirmation"" -> ""1272_ownerExists"";
""1272_removeOwner"" -> ""1272_validRequirement"";
""1272_replaceOwner"" -> ""1272_onlyWallet"";
}
"
0x2668afe75c5b0b726c2b4388658edae365eda4e2.sol,B2ANDcoin,"contract B2ANDcoin is Ownable { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function B2ANDcoin( ) public { totalSupply = 100000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",0,"subgraph cluster_400_B2ANDcoin {
label=""B2ANDcoin"";
""400_transfer"" [label=""transfer""];
""400_transferFrom"" [label=""transferFrom""];
""400__transfer"" [label=""_transfer""];
""400_approve"" [label=""approve""];
""400_burn"" [label=""burn""];
""400_B2ANDcoin"" [label=""B2ANDcoin""];
""400_approveAndCall"" [label=""approveAndCall""];
""400_burnFrom"" [label=""burnFrom""];
""400_transferFrom"" -> ""400__transfer"";
""400_transfer"" -> ""400__transfer"";
""400_approveAndCall"" -> ""400_approve"";
}
"
0x5136c98a80811c3f46bdda8b5c4555cfd9f812f0.sol,IndaHashToken,"contract IndaHashToken is ERC20Token { uint constant E6 = 10**6; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 6; address public wallet; address public adminWallet; uint public constant DATE_PRESALE_START = 1510153200; uint public constant DATE_PRESALE_END = 1510758000; uint public constant DATE_ICO_START = 1511967600; uint public constant DATE_ICO_END = 1513782000; uint public tokensPerEth = 3200 * E6; uint public constant BONUS_PRESALE = 40; uint public constant BONUS_ICO_WEEK_ONE = 20; uint public constant BONUS_ICO_WEEK_TWO = 10; uint public constant TOKEN_SUPPLY_TOTAL = 400 * E6 * E6; uint public constant TOKEN_SUPPLY_ICO = 320 * E6 * E6; uint public constant TOKEN_SUPPLY_MKT = 80 * E6 * E6; uint public constant PRESALE_ETH_CAP = 15000 ether; uint public constant MIN_FUNDING_GOAL = 40 * E6 * E6; uint public constant MIN_CONTRIBUTION = 1 ether / 2; uint public constant MAX_CONTRIBUTION = 300 ether; uint public constant COOLDOWN_PERIOD = 2 days; uint public constant CLAWBACK_PERIOD = 90 days; uint public icoEtherReceived = 0; uint public tokensIssuedIco = 0; uint public tokensIssuedMkt = 0; uint public tokensClaimedAirdrop = 0; mapping(address => uint) public icoEtherContributed; mapping(address => uint) public icoTokensReceived; mapping(address => bool) public airdropClaimed; mapping(address => bool) public refundClaimed; mapping(address => bool) public locked; event WalletUpdated(address _newWallet); event AdminWalletUpdated(address _newAdminWallet); event TokensPerEthUpdated(uint _tokensPerEth); event TokensMinted(address indexed _owner, uint _tokens, uint _balance); event TokensIssued(address indexed _owner, uint _tokens, uint _balance, uint _etherContributed); event Refund(address indexed _owner, uint _amount, uint _tokens); event Airdrop(address indexed _owner, uint _amount, uint _balance); event LockRemoved(address indexed _participant); function IndaHashToken() { require( TOKEN_SUPPLY_ICO + TOKEN_SUPPLY_MKT == TOKEN_SUPPLY_TOTAL ); wallet = owner; adminWallet = owner; }",0,"subgraph cluster_1616_IndaHashToken {
label=""IndaHashToken"";
""1616_IndaHashToken"" [label=""IndaHashToken""];
""1616_mintMarketing"" [label=""mintMarketing""];
""1616_fallback"" [label=""fallback""];
""1616_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""1616_transferFrom"" [label=""transferFrom""];
""1616_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""1616_isTransferable"" [label=""isTransferable""];
""1616_transferMultiple"" [label=""transferMultiple""];
""1616_doAirdrop"" [label=""doAirdrop""];
""1616_setWallet"" [label=""setWallet""];
""1616_reclaimFunds"" [label=""reclaimFunds""];
""1616_transfer"" [label=""transfer""];
""1616_computeAirdrop"" [label=""computeAirdrop""];
""1616_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1616_setAdminWallet"" [label=""setAdminWallet""];
""1616_removeLock"" [label=""removeLock""];
""1616_atNow"" [label=""atNow""];
""1616_removeLockMultiple"" [label=""removeLockMultiple""];
""1616_buyTokens"" [label=""buyTokens""];
""1616_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""1616_claimAirdrop"" [label=""claimAirdrop""];
""1616_ownerClawback"" [label=""ownerClawback""];
""1616_icoThresholdReached"" [label=""icoThresholdReached""];
""1616_ownerClawback"" -> ""1616_onlyOwner"";
""1616_adminClaimAirdrop"" -> ""1616_doAirdrop"";
""1616_isTransferable"" -> ""1616_atNow"";
""1616_buyTokens"" -> ""1616_atNow"";
""1616_transferAnyERC20Token"" -> ""1616_onlyOwner"";
""1616_updateTokensPerEth"" -> ""1616_atNow"";
""1616_transferFrom"" -> ""1616_transferFrom"";
""1616_transferMultiple"" -> ""1616_transfer"";
""1616_computeAirdrop"" -> ""1616_atNow"";
""1616_isTransferable"" -> ""1616_icoThresholdReached"";
""1616_ownerClawback"" -> ""1616_atNow"";
""1616_adminClaimAirdropMultiple"" -> ""1616_doAirdrop"";
""1616_computeAirdrop"" -> ""1616_icoThresholdReached"";
""1616_reclaimFunds"" -> ""1616_icoThresholdReached"";
""1616_doAirdrop"" -> ""1616_computeAirdrop"";
""1616_setAdminWallet"" -> ""1616_onlyOwner"";
""1616_fallback"" -> ""1616_buyTokens"";
""1616_transferFrom"" -> ""1616_isTransferable"";
""1616_claimAirdrop"" -> ""1616_doAirdrop"";
""1616_buyTokens"" -> ""1616_icoThresholdReached"";
""1616_reclaimFunds"" -> ""1616_atNow"";
""1616_transfer"" -> ""1616_transfer"";
""1616_setWallet"" -> ""1616_onlyOwner"";
""1616_mintMarketing"" -> ""1616_onlyOwner"";
""1616_transferMultiple"" -> ""1616_isTransferable"";
""1616_updateTokensPerEth"" -> ""1616_onlyOwner"";
""1616_transfer"" -> ""1616_isTransferable"";
}
"
0x2af8b34f04e93c79ee3a1f300a019f29869d896a.sol,SiliconValleyToken,"contract SiliconValleyToken is FrozenToken { string public name = ; string public symbol = ; uint8 public decimals = 18; string public version = ; string public publisher = ""https: string public description = ; bool public acceptAdminWithdraw = false; bool public acceptDonate = true; event InfoChanged(address indexed sender, string version, string publisher, string description); event Withdraw(address indexed sender, address indexed wallet, uint256 amount); event WithdrawTokens(address indexed sender, address indexed wallet, address indexed token, uint256 amount); event Donate(address indexed sender, uint256 value); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); function SiliconValleyToken() public {}",0,"subgraph cluster_2239_SiliconValleyToken {
label=""SiliconValleyToken"";
""2239_fallback"" [label=""fallback""];
""2239_withdrawTokens"" [label=""withdrawTokens""];
""2239_setupInfo"" [label=""setupInfo""];
""2239_withdrawAmount"" [label=""withdrawAmount""];
""2239_withdraw"" [label=""withdraw""];
""2239_balanceToken"" [label=""balanceToken""];
""2239_donate"" [label=""donate""];
""2239_updAcceptAdminWithdraw"" [label=""updAcceptAdminWithdraw""];
""2239_updAcceptDonate"" [label=""updAcceptDonate""];
""2239_SiliconValleyToken"" [label=""SiliconValleyToken""];
""2239_balanceToken"" -> ""2239_validAddress"";
""2239_withdrawTokens"" -> ""2239_validAddress"";
""2239_updAcceptAdminWithdraw"" -> ""2239_onlyOwner"";
""2239_withdrawTokens"" -> ""2239_greaterThanZero"";
""2239_withdrawAmount"" -> ""2239_validBalanceThis"";
""2239_updAcceptDonate"" -> ""2239_authLevel"";
""2239_withdraw"" -> ""2239_withdrawAmount"";
""2239_setupInfo"" -> ""2239_notEmpty"";
""2239_withdrawTokens"" -> ""2239_authLevel"";
""2239_withdrawAmount"" -> ""2239_authLevel"";
""2239_donate"" -> ""2239_greaterThanZero"";
""2239_fallback"" -> ""2239_donate"";
""2239_withdrawAmount"" -> ""2239_greaterThanZero"";
""2239_setupInfo"" -> ""2239_authLevel"";
}
"
0x1db7f8171d82f9fc009f207cd80dd00a54b77560.sol,OllisCoin,"contract OllisCoin is owned { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function OllisCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_525_OllisCoin {
label=""OllisCoin"";
""525_OllisCoin"" [label=""OllisCoin""];
""525_transferFrom"" [label=""transferFrom""];
""525_burnFrom"" [label=""burnFrom""];
""525_setPrices"" [label=""setPrices""];
""525_buy"" [label=""buy""];
""525_approveAndCall"" [label=""approveAndCall""];
""525_mintToken"" [label=""mintToken""];
""525_burn"" [label=""burn""];
""525_approve"" [label=""approve""];
""525_transfer"" [label=""transfer""];
""525__transfer"" [label=""_transfer""];
""525_freezeAccount"" [label=""freezeAccount""];
""525_sell"" [label=""sell""];
""525_transfer"" -> ""525__transfer"";
""525_buy"" -> ""525__transfer"";
""525_sell"" -> ""525__transfer"";
""525_mintToken"" -> ""525_onlyOwner"";
""525_transferFrom"" -> ""525__transfer"";
""525_setPrices"" -> ""525_onlyOwner"";
""525_freezeAccount"" -> ""525_onlyOwner"";
""525_approveAndCall"" -> ""525_approve"";
}
"
0x338614bb06e4857d140b5f241349cff0a6128679.sol,FoMo3Dlong,"contract FoMo3Dlong is F3Devents { using SafeMath for *; using F3DKeysCalcLong for uint256; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ =0 ; uint256 constant private rndInit_ = 72 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 72 hours; uint256 public rID_; uint256 public comB_; uint256 public userCount_ = 1; mapping (address => uint256) public pIDxAddr_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(63,0); fees_[1] = F3Ddatasets.TeamFee(40,0); potSplit_[0] = F3Ddatasets.PotSplit(30,50); potSplit_[1] = F3Ddatasets.PotSplit(20,60); }",0,"subgraph cluster_3042_FoMo3Dlong {
label=""FoMo3Dlong"";
""3042_endTx"" [label=""endTx""];
""3042_core"" [label=""core""];
""3042_reLoadXaddr"" [label=""reLoadXaddr""];
""3042_reLoadCore"" [label=""reLoadCore""];
""3042_iWantXKeys"" [label=""iWantXKeys""];
""3042_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""3042_buyCore"" [label=""buyCore""];
""3042_distributeExternal"" [label=""distributeExternal""];
""3042_withdraw"" [label=""withdraw""];
""3042_distributeInternal"" [label=""distributeInternal""];
""3042_updateGenVault"" [label=""updateGenVault""];
""3042_withdrawEarnings"" [label=""withdrawEarnings""];
""3042_endRound"" [label=""endRound""];
""3042_fallback"" [label=""fallback""];
""3042_getBuyPrice"" [label=""getBuyPrice""];
""3042_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""3042_constructor"" [label=""constructor""];
""3042_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""3042_managePlayer"" [label=""managePlayer""];
""3042_withdrawComB"" [label=""withdrawComB""];
""3042_calcKeysReceived"" [label=""calcKeysReceived""];
""3042_activate"" [label=""activate""];
""3042_getTimeLeft"" [label=""getTimeLeft""];
""3042_verifyTeam"" [label=""verifyTeam""];
""3042_updateMasks"" [label=""updateMasks""];
""3042_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""3042_getPlayerVaults"" [label=""getPlayerVaults""];
""3042_buyXaddr"" [label=""buyXaddr""];
""3042_reLoadXid"" [label=""reLoadXid""];
""3042_determinePID"" [label=""determinePID""];
""3042_buyXid"" [label=""buyXid""];
""3042_updateTimer"" [label=""updateTimer""];
""3042_withdrawComB"" -> ""3042_isHuman"";
""3042_buyXid"" -> ""3042_verifyTeam"";
""3042_reLoadXaddr"" -> ""3042_isActivated"";
""3042_reLoadXid"" -> ""3042_verifyTeam"";
""3042_reLoadXaddr"" -> ""3042_isWithinLimits"";
""3042_reLoadXid"" -> ""3042_isWithinLimits"";
""3042_buyXaddr"" -> ""3042_buyCore"";
""3042_buyXid"" -> ""3042_isHuman"";
""3042_withdraw"" -> ""3042_isHuman"";
""3042_core"" -> ""3042_distributeInternal"";
""3042_core"" -> ""3042_distributeExternal"";
""3042_buyXaddr"" -> ""3042_isWithinLimits"";
""3042_withdraw"" -> ""3042_withdrawEarnings"";
""3042_fallback"" -> ""3042_buyCore"";
""3042_reLoadXid"" -> ""3042_isHuman"";
""3042_withdraw"" -> ""3042_endRound"";
""3042_buyXaddr"" -> ""3042_isHuman"";
""3042_reLoadXaddr"" -> ""3042_reLoadCore"";
""3042_buyCore"" -> ""3042_endRound"";
""3042_core"" -> ""3042_endTx"";
""3042_withdrawComB"" -> ""3042_isActivated"";
""3042_core"" -> ""3042_updateTimer"";
""3042_fallback"" -> ""3042_isWithinLimits"";
""3042_updateGenVault"" -> ""3042_calcUnMaskedEarnings"";
""3042_getPlayerVaults"" -> ""3042_getPlayerVaultsHelper"";
""3042_reLoadXid"" -> ""3042_isActivated"";
""3042_fallback"" -> ""3042_determinePID"";
""3042_core"" -> ""3042_managePlayer"";
""3042_withdraw"" -> ""3042_isActivated"";
""3042_buyXaddr"" -> ""3042_isActivated"";
""3042_reLoadCore"" -> ""3042_withdrawEarnings"";
""3042_buyXid"" -> ""3042_buyCore"";
""3042_buyCore"" -> ""3042_core"";
""3042_reLoadXaddr"" -> ""3042_verifyTeam"";
""3042_fallback"" -> ""3042_isHuman"";
""3042_getPlayerVaults"" -> ""3042_calcUnMaskedEarnings"";
""3042_reLoadCore"" -> ""3042_endRound"";
""3042_distributeInternal"" -> ""3042_updateMasks"";
""3042_reLoadXaddr"" -> ""3042_isHuman"";
""3042_buyXid"" -> ""3042_isWithinLimits"";
""3042_buyXid"" -> ""3042_isActivated"";
""3042_buyXid"" -> ""3042_determinePID"";
""3042_fallback"" -> ""3042_isActivated"";
""3042_buyXaddr"" -> ""3042_verifyTeam"";
""3042_buyXaddr"" -> ""3042_determinePID"";
""3042_managePlayer"" -> ""3042_updateGenVault"";
""3042_getPlayerInfoByAddress"" -> ""3042_calcUnMaskedEarnings"";
""3042_withdrawEarnings"" -> ""3042_updateGenVault"";
""3042_reLoadXid"" -> ""3042_reLoadCore"";
""3042_reLoadCore"" -> ""3042_core"";
}
"
0x4c9d38b4e71de67e680f318a1268e18d1d946c04.sol,CryptoMinirToken,contract CryptoMinirToken { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1182_CryptoMinirToken {
label=""CryptoMinirToken"";
""1182_purchaseTokens"" [label=""purchaseTokens""];
""1182_sellPrice"" [label=""sellPrice""];
""1182_totalSupply"" [label=""totalSupply""];
""1182_myTokens"" [label=""myTokens""];
""1182_dividendsOf"" [label=""dividendsOf""];
""1182_myDividends"" [label=""myDividends""];
""1182_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1182_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1182_sell"" [label=""sell""];
""1182_buy"" [label=""buy""];
""1182_exit"" [label=""exit""];
""1182_withdraw"" [label=""withdraw""];
""1182_sqrt"" [label=""sqrt""];
""1182_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1182_buyPrice"" [label=""buyPrice""];
""1182_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1182_reinvest"" [label=""reinvest""];
""1182_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1182_fallback"" [label=""fallback""];
""1182_transfer"" [label=""transfer""];
""1182_balanceOf"" [label=""balanceOf""];
""1182_transfer"" -> ""1182_onlyBagholders"";
""1182_reinvest"" -> ""1182_purchaseTokens"";
""1182_sell"" -> ""1182_tokensToEthereum_"";
""1182_buy"" -> ""1182_purchaseTokens"";
""1182_sellPrice"" -> ""1182_tokensToEthereum_"";
""1182_sell"" -> ""1182_onlyBagholders"";
""1182_purchaseTokens"" -> ""1182_ethereumToTokens_"";
""1182_exit"" -> ""1182_withdraw"";
""1182_calculateTokensReceived"" -> ""1182_ethereumToTokens_"";
""1182_myTokens"" -> ""1182_balanceOf"";
""1182_withdraw"" -> ""1182_myDividends"";
""1182_sell"" -> ""1182_buyPrice"";
""1182_myDividends"" -> ""1182_dividendsOf"";
""1182_transfer"" -> ""1182_withdraw"";
""1182_reinvest"" -> ""1182_myDividends"";
""1182_calculateEthereumReceived"" -> ""1182_tokensToEthereum_"";
""1182_transfer"" -> ""1182_tokensToEthereum_"";
""1182_withdraw"" -> ""1182_onlyStronghands"";
""1182_reinvest"" -> ""1182_onlyStronghands"";
""1182_ethereumToTokens_"" -> ""1182_sqrt"";
""1182_exit"" -> ""1182_sell"";
""1182_transfer"" -> ""1182_myDividends"";
""1182_buyPrice"" -> ""1182_tokensToEthereum_"";
""1182_fallback"" -> ""1182_purchaseTokens"";
""1182_purchaseTokens"" -> ""1182_buyPrice"";
}
"
0x1d41e18e8ed1ef148547ceade01912e638f464b8.sol,Casper,"contract Casper is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 30000000000e18; uint256 public totalDistributed = 15000000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 150000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_873_Casper {
label=""Casper"";
""873_fallback"" [label=""fallback""];
""873_transferFrom"" [label=""transferFrom""];
""873_burn"" [label=""burn""];
""873_getTokens"" [label=""getTokens""];
""873_balanceOf"" [label=""balanceOf""];
""873_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""873_getTokenBalance"" [label=""getTokenBalance""];
""873_Casper"" [label=""Casper""];
""873_transferOwnership"" [label=""transferOwnership""];
""873_distr"" [label=""distr""];
""873_allowance"" [label=""allowance""];
""873_transfer"" [label=""transfer""];
""873_withdraw"" [label=""withdraw""];
""873_approve"" [label=""approve""];
""873_finishDistribution"" [label=""finishDistribution""];
""873_getTokens"" -> ""873_canDistr"";
""873_withdraw"" -> ""873_onlyOwner"";
""873_finishDistribution"" -> ""873_onlyOwner"";
""873_withdrawForeignTokens"" -> ""873_onlyOwner"";
""873_burn"" -> ""873_onlyOwner"";
""873_transfer"" -> ""873_onlyPayloadSize"";
""873_transferOwnership"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_onlyWhitelist"";
""873_fallback"" -> ""873_getTokens"";
""873_finishDistribution"" -> ""873_canDistr"";
""873_transferFrom"" -> ""873_onlyPayloadSize"";
""873_distr"" -> ""873_canDistr"";
""873_getTokens"" -> ""873_distr"";
}
"
0x48ee772b8c8927d8d32afc8961fbc177fb723637.sol,SafeMath,"contract SafeMath { function add(uint256 x, uint256 y) constant internal returns (uint256 z) { assert((z = x + y) >= x); }",0,"subgraph cluster_574_SafeMath {
label=""SafeMath"";
""574_hadd"" [label=""hadd""];
""574_wsub"" [label=""wsub""];
""574_hmin"" [label=""hmin""];
""574_rmin"" [label=""rmin""];
""574_imax"" [label=""imax""];
""574_rpow"" [label=""rpow""];
""574_wdiv"" [label=""wdiv""];
""574_imin"" [label=""imin""];
""574_cast"" [label=""cast""];
""574_rmax"" [label=""rmax""];
""574_hmax"" [label=""hmax""];
""574_radd"" [label=""radd""];
""574_wmin"" [label=""wmin""];
""574_max"" [label=""max""];
""574_hmul"" [label=""hmul""];
""574_wmul"" [label=""wmul""];
""574_min"" [label=""min""];
""574_hdiv"" [label=""hdiv""];
""574_rdiv"" [label=""rdiv""];
""574_sub"" [label=""sub""];
""574_rmul"" [label=""rmul""];
""574_div"" [label=""div""];
""574_add"" [label=""add""];
""574_hsub"" [label=""hsub""];
""574_wmax"" [label=""wmax""];
""574_rsub"" [label=""rsub""];
""574_mul"" [label=""mul""];
""574_wadd"" [label=""wadd""];
""574_wadd"" -> ""574_hadd"";
""574_rsub"" -> ""574_hsub"";
""574_wmul"" -> ""574_cast"";
""574_wdiv"" -> ""574_cast"";
""574_rdiv"" -> ""574_cast"";
""574_rmul"" -> ""574_cast"";
""574_wmax"" -> ""574_hmax"";
""574_wsub"" -> ""574_hsub"";
""574_rmin"" -> ""574_hmin"";
""574_rpow"" -> ""574_rmul"";
""574_wmin"" -> ""574_hmin"";
""574_rmax"" -> ""574_hmax"";
""574_radd"" -> ""574_hadd"";
}
"
0x6fcfdda06a2fa2deec5efbceebb493ad75086f6b.sol,TripleROI,"contract TripleROI { using SafeMath for uint256; mapping(address => uint256) investments; mapping(address => uint256) joined; mapping(address => uint256) referrer; uint256 public step = 1000; uint256 public minimum = 10 finney; uint256 public maximum = 5 ether; uint256 public stakingRequirement = 0.3 ether; address public ownerWallet; address public owner; bool public gameStarted; event Invest(address investor, uint256 amount); event Withdraw(address investor, uint256 amount); event Bounty(address hunter, uint256 amount); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() public { owner = msg.sender; ownerWallet = msg.sender; }",0,"subgraph cluster_514_TripleROI {
label=""TripleROI"";
""514_checkBalance"" [label=""checkBalance""];
""514_transferOwnership"" [label=""transferOwnership""];
""514_fallback"" [label=""fallback""];
""514_checkReferral"" [label=""checkReferral""];
""514_constructor"" [label=""constructor""];
""514_withdraw"" [label=""withdraw""];
""514_buy"" [label=""buy""];
""514_bounty"" [label=""bounty""];
""514_checkInvestments"" [label=""checkInvestments""];
""514_startGame"" [label=""startGame""];
""514_getBalance"" [label=""getBalance""];
""514_startGame"" -> ""514_onlyOwner"";
""514_buy"" -> ""514_withdraw"";
""514_transferOwnership"" -> ""514_onlyOwner"";
""514_fallback"" -> ""514_buy"";
""514_withdraw"" -> ""514_getBalance"";
""514_bounty"" -> ""514_checkReferral"";
""514_checkBalance"" -> ""514_getBalance"";
}
"
0x1ce95ce5aebe5beb20d69c308cd0e21797873c38.sol,Crowdsale,"contract Crowdsale is LiteNetCoin { using SafeMath for uint256; LiteNetCoin public token = new LiteNetCoin(); uint256 public constant BASE_RATE = 2500; uint64 public constant PRE_SALE_START_1 = 1526256000; uint64 public constant PRE_SALE_START_2 = 1527465600; uint64 public constant PRE_SALE_START_3 = 1529884800; uint64 public constant PRE_SALE_START_4 = 1535328000; uint64 public constant PRE_ICO_START = 1538870400; uint64 public constant ICO_START = 1541030400; uint64 public constant ICO_FINISH = 1541376000; bool public icoClosed = false; uint256 totalBuyTokens_ = 0; event BoughtTokens(address indexed to, uint256 value); event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); enum TokenDistributions { crowdsale, reserve, bounty, team, founders }",0,"subgraph cluster_1363_Crowdsale {
label=""Crowdsale"";
""1363_totalBuyTokens"" [label=""totalBuyTokens""];
""1363_fallback"" [label=""fallback""];
""1363_changeTeamTokens"" [label=""changeTeamTokens""];
""1363_getCurrentRound"" [label=""getCurrentRound""];
""1363_sendOtherTokens"" [label=""sendOtherTokens""];
""1363_getCurrentDiscountPercent"" [label=""getCurrentDiscountPercent""];
""1363_changeNotSoldTokens"" [label=""changeNotSoldTokens""];
""1363_changeOwner"" [label=""changeOwner""];
""1363_buyTokens"" [label=""buyTokens""];
""1363_constructor"" [label=""constructor""];
""1363_getRate"" [label=""getRate""];
""1363_sendBountyTokens"" [label=""sendBountyTokens""];
""1363_close"" [label=""close""];
""1363_sendOtherTokens"" -> ""1363_onlyOwner"";
""1363_sendBountyTokens"" -> ""1363_onlyOwner"";
""1363_sendOtherTokens"" -> ""1363_isNotIcoClosed"";
""1363_fallback"" -> ""1363_buyTokens"";
""1363_buyTokens"" -> ""1363_getRate"";
""1363_changeOwner"" -> ""1363_onlyOwner"";
""1363_getCurrentDiscountPercent"" -> ""1363_getCurrentRound"";
""1363_buyTokens"" -> ""1363_getCurrentDiscountPercent"";
""1363_sendOtherTokens"" -> ""1363_onlyAuthorized"";
""1363_sendBountyTokens"" -> ""1363_isNotIcoClosed"";
""1363_close"" -> ""1363_isNotIcoClosed"";
""1363_close"" -> ""1363_onlyOwner"";
""1363_changeTeamTokens"" -> ""1363_onlyOwner"";
""1363_changeNotSoldTokens"" -> ""1363_onlyOwner"";
""1363_buyTokens"" -> ""1363_getCurrentRound"";
""1363_sendBountyTokens"" -> ""1363_onlyAuthorized"";
""1363_sendBountyTokens"" -> ""1363_sendOtherTokens"";
}
"
0x56dd00a25e400498bf9510851c44836219b5cfc9.sol,WRA,"contract WRA is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 4; _totalSupply = 5000000000000; balances[0x2fc78FC3feab69A9DEc8A40933e929C23843D24e] = _totalSupply; emit Transfer(address(0), 0x2fc78FC3feab69A9DEc8A40933e929C23843D24e, _totalSupply); }",0,"subgraph cluster_543_WRA {
label=""WRA"";
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_constructor"" [label=""constructor""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xf0150cec4fe8477d039c4b4e679c040480763170.sol,Parameterizer,"contract Parameterizer is Ownable, CanCheckERC165 { event _ReparameterizationProposal(string name, uint value, bytes32 propID, uint deposit, uint appEndDate); event _NewChallenge(bytes32 indexed propID, uint challengeID, uint commitEndDate, uint revealEndDate); event _ProposalAccepted(bytes32 indexed propID, string name, uint value); event _ProposalExpired(bytes32 indexed propID); event _ChallengeSucceeded(bytes32 indexed propID, uint indexed challengeID, uint rewardPool, uint totalTokens); event _ChallengeFailed(bytes32 indexed propID, uint indexed challengeID, uint rewardPool, uint totalTokens); event _RewardClaimed(uint indexed challengeID, uint reward); using SafeMath for uint; struct ParamProposal { uint appExpiry; uint challengeID; uint deposit; string name; address owner; uint processBy; uint value; }",0,"subgraph cluster_3018_Parameterizer {
label=""Parameterizer"";
""3018_propExists"" [label=""propExists""];
""3018_voterReward"" [label=""voterReward""];
""3018_challengeWinnerReward"" [label=""challengeWinnerReward""];
""3018_get"" [label=""get""];
""3018_constructor"" [label=""constructor""];
""3018_processProposal"" [label=""processProposal""];
""3018_proposeReparameterization"" [label=""proposeReparameterization""];
""3018_resolveChallenge"" [label=""resolveChallenge""];
""3018_canBeSet"" [label=""canBeSet""];
""3018_set"" [label=""set""];
""3018_challengeCanBeResolved"" [label=""challengeCanBeResolved""];
""3018_getNewRegistry"" [label=""getNewRegistry""];
""3018_challengeReparameterization"" [label=""challengeReparameterization""];
""3018_tokenClaims"" [label=""tokenClaims""];
""3018_claimReward"" [label=""claimReward""];
""3018_proposeReparameterization"" -> ""3018_getNewRegistry"";
""3018_processProposal"" -> ""3018_get"";
""3018_processProposal"" -> ""3018_canBeSet"";
""3018_constructor"" -> ""3018_set"";
""3018_proposeReparameterization"" -> ""3018_propExists"";
""3018_proposeReparameterization"" -> ""3018_get"";
""3018_constructor"" -> ""3018_constructor"";
""3018_resolveChallenge"" -> ""3018_challengeWinnerReward"";
""3018_challengeReparameterization"" -> ""3018_get"";
""3018_challengeReparameterization"" -> ""3018_propExists"";
""3018_resolveChallenge"" -> ""3018_set"";
""3018_claimReward"" -> ""3018_voterReward"";
""3018_processProposal"" -> ""3018_challengeCanBeResolved"";
""3018_processProposal"" -> ""3018_set"";
""3018_processProposal"" -> ""3018_resolveChallenge"";
}
"
0xf317a365cfef0aa4357abd057048808a1d430402.sol,Plague,contract Plague is PlagueEvents{ using SafeMath for *; using KeysCalc for uint256; struct Round { uint256 eth; uint256 keys; uint256 startTime; uint256 endTime; uint256 infectiveEndTime; address leader; address infectLastPlayer; address [11] lastInfective; address [4] loseInfective; bool [11] infectiveAward_m; uint256 totalInfective; uint256 inveterAmount; uint256 lastRoundReward; uint256 exAward; },0,"subgraph cluster_2162_Plague {
label=""Plague"";
""2162_fallback"" [label=""fallback""];
""2162_getPlayerAwardByRndNo"" [label=""getPlayerAwardByRndNo""];
""2162_constructor"" [label=""constructor""];
""2162_awardByRndNo"" [label=""awardByRndNo""];
""2162_getBuyPrice"" [label=""getBuyPrice""];
""2162_buyKeyByAddr"" [label=""buyKeyByAddr""];
""2162_changeReceiver"" [label=""changeReceiver""];
""2162_isHuman"" [label=""isHuman""];
""2162_buyKeys"" [label=""buyKeys""];
""2162_startGame"" [label=""startGame""];
""2162_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""2162_feeWithdraw"" [label=""feeWithdraw""];
""2162_buyKeyByAddr"" -> ""2162_onlyHuman"";
""2162_buyKeys"" -> ""2162_isHuman"";
""2162_feeWithdraw"" -> ""2162_onlyHuman"";
""2162_buyKeyByAddr"" -> ""2162_isWithinLimits"";
""2162_changeReceiver"" -> ""2162_onlyOwner"";
""2162_fallback"" -> ""2162_isWithinLimits"";
""2162_getCurrentRoundInfo"" -> ""2162_getBuyPrice"";
""2162_awardByRndNo"" -> ""2162_onlyHuman"";
""2162_fallback"" -> ""2162_buyKeys"";
""2162_startGame"" -> ""2162_onlyOwner"";
""2162_fallback"" -> ""2162_onlyHuman"";
""2162_buyKeyByAddr"" -> ""2162_buyKeys"";
}
"
0x26eb39228eb4bb98c84ad821bb51464121b2276d.sol,NAUTokenCoin,contract NAUTokenCoin is Ownable { string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 4; uint public constant INITIAL_SUPPLY = 12850000000000; uint public totalSupply = 0; mapping (address => uint) balances; mapping (address => mapping(address => uint)) allowed; function NAUTokenCoin () public { totalSupply = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; },0,"subgraph cluster_274_NAUTokenCoin {
label=""NAUTokenCoin"";
""274_balanceOf"" [label=""balanceOf""];
""274_transfer"" [label=""transfer""];
""274_allowance"" [label=""allowance""];
""274_NAUTokenCoin"" [label=""NAUTokenCoin""];
""274_transferFrom"" [label=""transferFrom""];
""274_approve"" [label=""approve""];
}
"
0x888888ecb41d5abb38bdd9c5e2f653f411c70765.sol,Lottery,"contract Lottery { using SafeMath for uint256; modifier withdrawRight(){ require(msg.sender == address(bankContract), ); _; }",0,"subgraph cluster_3390_Lottery {
label=""Lottery"";
""3390_jackpot"" [label=""jackpot""];
""3390_getPMul"" [label=""getPMul""];
""3390_addTime"" [label=""addTime""];
""3390_constructor"" [label=""constructor""];
""3390_getWeightRange"" [label=""getWeightRange""];
""3390_isWinSlot"" [label=""isWinSlot""];
""3390_getSlideEndTime"" [label=""getSlideEndTime""];
""3390_getSeed"" [label=""getSeed""];
""3390_isLastRound"" [label=""isLastRound""];
""3390_finalize"" [label=""finalize""];
""3390_distributeSlotBuy"" [label=""distributeSlotBuy""];
""3390_getEstKeyBlockNr"" [label=""getEstKeyBlockNr""];
""3390_getPSlotLength"" [label=""getPSlotLength""];
""3390_getKeyBlockNr"" [label=""getKeyBlockNr""];
""3390_getSlotLength"" [label=""getSlotLength""];
""3390_getCurEarlyIncomeByAddress"" [label=""getCurEarlyIncomeByAddress""];
""3390_getEarlyIncomeByAddressRound"" [label=""getEarlyIncomeByAddressRound""];
""3390_mintReward"" [label=""mintReward""];
""3390_getSlotInfo"" [label=""getSlotInfo""];
""3390_claimEarlyIncomebyAddressRound"" [label=""claimEarlyIncomebyAddressRound""];
""3390_initRound"" [label=""initRound""];
""3390_getTMul"" [label=""getTMul""];
""3390_getTotalPot"" [label=""getTotalPot""];
""3390_claimEarlyIncomebyAddress"" [label=""claimEarlyIncomebyAddress""];
""3390_getTicketSumToRound"" [label=""getTicketSumToRound""];
""3390_pushToPot"" [label=""pushToPot""];
""3390_mintSlot"" [label=""mintSlot""];
""3390_genEstKeyBlockNr"" [label=""genEstKeyBlockNr""];
""3390_getCurRoundId"" [label=""getCurRoundId""];
""3390_buyFor"" [label=""buyFor""];
""3390_getSlotId"" [label=""getSlotId""];
""3390_getInvestedSumToRound"" [label=""getInvestedSumToRound""];
""3390_sBountyClaim"" [label=""sBountyClaim""];
""3390_getPTicketSumByRound"" [label=""getPTicketSumByRound""];
""3390_updateInvested"" [label=""updateInvested""];
""3390_getEarlyIncomeByAddress"" [label=""getEarlyIncomeByAddress""];
""3390_getTPrice"" [label=""getTPrice""];
""3390_getPInvestedSumByRound"" [label=""getPInvestedSumByRound""];
""3390_getFixedEndTime"" [label=""getFixedEndTime""];
""3390_addPot"" [label=""addPot""];
""3390_getWinSlot"" [label=""getWinSlot""];
""3390_endRound"" [label=""endRound""];
""3390_activeFirstRound"" [label=""activeFirstRound""];
""3390_cashoutable"" [label=""cashoutable""];
""3390_goNext"" [label=""goNext""];
""3390_getBonusTickets"" [label=""getBonusTickets""];
""3390_finalizeable"" [label=""finalizeable""];
""3390_checkpoint"" [label=""checkpoint""];
""3390_updateTicketSum"" [label=""updateTicketSum""];
""3390_buy"" [label=""buy""];
""3390_withdrawFor"" [label=""withdrawFor""];
""3390_updateEarlyIncome"" [label=""updateEarlyIncome""];
""3390_getCurEarlyIncomeByAddressRound"" [label=""getCurEarlyIncomeByAddressRound""];
""3390_joinNetwork"" [label=""joinNetwork""];
""3390_getRewardBalance"" [label=""getRewardBalance""];
""3390_setLastRound"" [label=""setLastRound""];
""3390_updateMulti"" [label=""updateMulti""];
""3390_checkpoint"" -> ""3390_genEstKeyBlockNr"";
""3390_mintSlot"" -> ""3390_updateTicketSum"";
""3390_sBountyClaim"" -> ""3390_mintSlot"";
""3390_finalize"" -> ""3390_finalizeable"";
""3390_finalize"" -> ""3390_endRound"";
""3390_endRound"" -> ""3390_getKeyBlockNr"";
""3390_endRound"" -> ""3390_getWinSlot"";
""3390_buyFor"" -> ""3390_distributeSlotBuy"";
""3390_getWinSlot"" -> ""3390_isWinSlot"";
""3390_activeFirstRound"" -> ""3390_onlyDevTeam"";
""3390_initRound"" -> ""3390_isLastRound"";
""3390_initRound"" -> ""3390_checkpoint"";
""3390_initRound"" -> ""3390_goNext"";
""3390_buyFor"" -> ""3390_addTime"";
""3390_claimEarlyIncomebyAddress"" -> ""3390_claimEarlyIncomebyAddressRound"";
""3390_sBountyClaim"" -> ""3390_notStarted"";
""3390_endRound"" -> ""3390_getSeed"";
""3390_getEarlyIncomeByAddress"" -> ""3390_getEarlyIncomeByAddressRound"";
""3390_distributeSlotBuy"" -> ""3390_addPot"";
""3390_jackpot"" -> ""3390_getSeed"";
""3390_buyFor"" -> ""3390_genEstKeyBlockNr"";
""3390_jackpot"" -> ""3390_mintReward"";
""3390_endRound"" -> ""3390_mintReward"";
""3390_buyFor"" -> ""3390_updateMulti"";
""3390_claimEarlyIncomebyAddressRound"" -> ""3390_getCurEarlyIncomeByAddressRound"";
""3390_setLastRound"" -> ""3390_onlyDevTeam"";
""3390_activeFirstRound"" -> ""3390_initRound"";
""3390_finalize"" -> ""3390_mintSlot"";
""3390_getCurEarlyIncomeByAddressRound"" -> ""3390_getEarlyIncomeByAddressRound"";
""3390_buyFor"" -> ""3390_updateEarlyIncome"";
""3390_buyFor"" -> ""3390_buyable"";
""3390_buyFor"" -> ""3390_getBonusTickets"";
""3390_buy"" -> ""3390_buyFor"";
""3390_initRound"" -> ""3390_updateMulti"";
""3390_buyFor"" -> ""3390_updateInvested"";
""3390_withdrawFor"" -> ""3390_withdrawRight"";
""3390_withdrawFor"" -> ""3390_claimEarlyIncomebyAddress"";
""3390_finalize"" -> ""3390_initRound"";
""3390_activeFirstRound"" -> ""3390_getWeightRange"";
""3390_cashoutable"" -> ""3390_getPTicketSumByRound"";
""3390_getCurEarlyIncomeByAddress"" -> ""3390_getCurEarlyIncomeByAddressRound"";
""3390_buyFor"" -> ""3390_jackpot"";
""3390_finalizeable"" -> ""3390_getEstKeyBlockNr"";
""3390_jackpot"" -> ""3390_getKeyBlockNr"";
""3390_pushToPot"" -> ""3390_addPot"";
""3390_buyFor"" -> ""3390_mintSlot"";
""3390_buyFor"" -> ""3390_getTMul"";
}
"
0xf317f4acfc0d70ccc79a2f24cfbbd7ebc02cfa2e.sol,StandardToken,"contract StandardToken is Token { using SafeMath for uint; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; function transfer(address _to, uint256 _value) public returns (bool success) { require(_to != address(0)); require(_value <= balances[msg.sender]); require(balances[_to].add(_value) > balances[_to]); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); return true; }",0,"subgraph cluster_481_StandardToken {
label=""StandardToken"";
""481_approve"" [label=""approve""];
""481_transfer"" [label=""transfer""];
""481_balanceOf"" [label=""balanceOf""];
""481_allowance"" [label=""allowance""];
""481_transferFrom"" [label=""transferFrom""];
}
"
0x19055b944806fba2717dc694cf0173a1eb2d1604.sol,C3Wallet,"contract C3Wallet is ERC223, Ownable { using SafeMath for uint; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 5e10 * 1e8; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; constructor() public { balances[msg.sender] = totalSupply; }",0,"subgraph cluster_1523_C3Wallet {
label=""C3Wallet"";
""1523_balanceOf"" [label=""balanceOf""];
""1523_decimals"" [label=""decimals""];
""1523_unfreezeAccounts"" [label=""unfreezeAccounts""];
""1523_transfer"" [label=""transfer""];
""1523_symbol"" [label=""symbol""];
""1523_fallback"" [label=""fallback""];
""1523_lockAccounts"" [label=""lockAccounts""];
""1523_name"" [label=""name""];
""1523_totalSupply"" [label=""totalSupply""];
""1523_unlockAccounts"" [label=""unlockAccounts""];
""1523_approve"" [label=""approve""];
""1523_isContract"" [label=""isContract""];
""1523_transferFrom"" [label=""transferFrom""];
""1523_allowance"" [label=""allowance""];
""1523_constructor"" [label=""constructor""];
""1523_freezeAccounts"" [label=""freezeAccounts""];
""1523_transferToContract"" [label=""transferToContract""];
""1523_burn"" [label=""burn""];
""1523_multiTransfer"" [label=""multiTransfer""];
""1523_transferToAddress"" [label=""transferToAddress""];
""1523_lockAccounts"" -> ""1523_onlyOwner"";
""1523_freezeAccounts"" -> ""1523_onlyOwner"";
""1523_unlockAccounts"" -> ""1523_onlyOwner"";
""1523_transfer"" -> ""1523_isContract"";
""1523_transfer"" -> ""1523_transferToAddress"";
""1523_unfreezeAccounts"" -> ""1523_onlyOwner"";
""1523_burn"" -> ""1523_onlyOwner"";
""1523_transfer"" -> ""1523_transferToContract"";
}
"
0x5199a4ff997ef55868be421790408d46189aa657.sol,SuperHeroes,contract SuperHeroes is Pausable { string public constant name = ; string public constant symbol = ; uint256 public fee = 2; uint256 public snatch = 24 hours; struct Token { string name; string src; uint256 price; uint256 purchased; },0,"subgraph cluster_832_SuperHeroes {
label=""SuperHeroes"";
""832__mint"" [label=""_mint""];
""832__approve"" [label=""_approve""];
""832__owns"" [label=""_owns""];
""832_changePrice"" [label=""changePrice""];
""832_saleHero"" [label=""saleHero""];
""832_tokensOfOwner"" [label=""tokensOfOwner""];
""832_withdraw"" [label=""withdraw""];
""832__transfer"" [label=""_transfer""];
""832_ownerOf"" [label=""ownerOf""];
""832_transfer"" [label=""transfer""];
""832__approvedFor"" [label=""_approvedFor""];
""832_buyHero"" [label=""buyHero""];
""832_totalSupply"" [label=""totalSupply""];
""832_balanceOf"" [label=""balanceOf""];
""832_getToken"" [label=""getToken""];
""832_transferFrom"" [label=""transferFrom""];
""832_snatchHero"" [label=""snatchHero""];
""832_approve"" [label=""approve""];
""832_mint"" [label=""mint""];
""832_approve"" -> ""832__owns"";
""832_buyHero"" -> ""832__transfer"";
""832_buyHero"" -> ""832_whenNotPaused"";
""832__mint"" -> ""832__transfer"";
""832_transfer"" -> ""832__owns"";
""832_mint"" -> ""832__mint"";
""832_mint"" -> ""832_onlyOwner"";
""832_saleHero"" -> ""832_onlyOwner"";
""832__transfer"" -> ""832_whenNotPaused"";
""832_approve"" -> ""832__approve"";
""832_tokensOfOwner"" -> ""832_totalSupply"";
""832_withdraw"" -> ""832_onlyOwner"";
""832_tokensOfOwner"" -> ""832_balanceOf"";
""832_changePrice"" -> ""832_whenNotPaused"";
""832_transferFrom"" -> ""832__owns"";
""832_snatchHero"" -> ""832__transfer"";
""832_saleHero"" -> ""832_whenNotPaused"";
""832_snatchHero"" -> ""832_whenNotPaused"";
""832_transfer"" -> ""832__transfer"";
""832_transferFrom"" -> ""832__approvedFor"";
""832_transferFrom"" -> ""832__transfer"";
}
"
0x45ba41dcfa69ea1cc9b7c01ddc16f21e31036e79.sol,PausableToken,"contract PausableToken is StandardToken, Pausable { function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) { return super.transfer(_to, _value); }",0,"subgraph cluster_964_PausableToken {
label=""PausableToken"";
""964_decreaseApproval"" [label=""decreaseApproval""];
""964_approve"" [label=""approve""];
""964_transferFrom"" [label=""transferFrom""];
""964_increaseApproval"" [label=""increaseApproval""];
""964_transfer"" [label=""transfer""];
""964_approve"" -> ""964_approve"";
""964_increaseApproval"" -> ""964_increaseApproval"";
""964_transferFrom"" -> ""964_whenNotPaused"";
""964_transferFrom"" -> ""964_transferFrom"";
""964_decreaseApproval"" -> ""964_decreaseApproval"";
""964_decreaseApproval"" -> ""964_whenNotPaused"";
""964_approve"" -> ""964_whenNotPaused"";
""964_transfer"" -> ""964_whenNotPaused"";
""964_transfer"" -> ""964_transfer"";
""964_increaseApproval"" -> ""964_whenNotPaused"";
}
"
0x313c54eb9f08f1be0f18e8ad505135fa7041a52f.sol,CHEXToken,"contract CHEXToken is Token { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public startBlock; uint public endBlock; address public founder; address public owner; uint public totalSupply = 2000000000 * 10**decimals; uint public etherCap = 2500000 * 10**decimals; uint public totalTokens = 0; uint public presaleSupply = 0; uint public presaleEtherRaised = 0; event Buy(address indexed recipient, uint eth, uint chx); event Deliver(address indexed recipient, uint chx, string _for); uint public presaleAllocation = totalSupply / 2; uint public ecosystemAllocation = totalSupply / 4; uint public reservedAllocation = totalSupply / 4; bool public ecosystemAllocated = false; uint public constant MIN_ETHER = 10 finney; enum TokenSaleState { Initial, Presale, Live, Frozen }",0,"subgraph cluster_1050_CHEXToken {
label=""CHEXToken"";
""1050_allocateEcosystemTokens"" [label=""allocateEcosystemTokens""];
""1050_freeze"" [label=""freeze""];
""1050_price"" [label=""price""];
""1050_unfreeze"" [label=""unfreeze""];
""1050_startSalePhase"" [label=""startSalePhase""];
""1050_buy"" [label=""buy""];
""1050_CHEXToken"" [label=""CHEXToken""];
""1050_fallback"" [label=""fallback""];
""1050_deliver"" [label=""deliver""];
""1050_updateTokenSaleState"" [label=""updateTokenSaleState""];
""1050_freeze"" -> ""1050_onlyInternal"";
""1050_startSalePhase"" -> ""1050_onlyInternal"";
""1050_buy"" -> ""1050_updateTokenSaleState"";
""1050_buy"" -> ""1050_mul"";
""1050_allocateEcosystemTokens"" -> ""1050_onlyInternal"";
""1050_startSalePhase"" -> ""1050_updateTokenSaleState"";
""1050_buy"" -> ""1050_price"";
""1050_price"" -> ""1050_pct"";
""1050_deliver"" -> ""1050_onlyInternal"";
""1050_unfreeze"" -> ""1050_onlyInternal"";
""1050_buy"" -> ""1050_add"";
""1050_unfreeze"" -> ""1050_updateTokenSaleState"";
""1050_deliver"" -> ""1050_updateTokenSaleState"";
""1050_fallback"" -> ""1050_buy"";
""1050_CHEXToken"" -> ""1050_updateTokenSaleState"";
""1050_allocateEcosystemTokens"" -> ""1050_add"";
""1050_deliver"" -> ""1050_add"";
}
"
0x466c44812835f57b736ef9f63582b8a6693a14d0.sol,AccessoryData,"contract AccessoryData is IAccessoryData, SafeMath { event CreatedAccessory (uint64 accessoryId); event Transfer(address indexed from, address indexed to, uint256 indexed tokenId); struct AccessorySeries { uint8 AccessorySeriesId; uint32 currentTotal; uint32 maxTotal; uint price; }",0,"subgraph cluster_946_AccessoryData {
label=""AccessoryData"";
""946_transferAccessory"" [label=""transferAccessory""];
""946_updateAccessoryLock"" [label=""updateAccessoryLock""];
""946_ownerAccessoryTransfer"" [label=""ownerAccessoryTransfer""];
""946_getAccessoryByIndex"" [label=""getAccessoryByIndex""];
""946_getAccessorySeries"" [label=""getAccessorySeries""];
""946_setAccessory"" [label=""setAccessory""];
""946_getOwnerAccessoryCount"" [label=""getOwnerAccessoryCount""];
""946_createAccessorySeries"" [label=""createAccessorySeries""];
""946_getTotalAccessorySeries"" [label=""getTotalAccessorySeries""];
""946_getTotalAccessories"" [label=""getTotalAccessories""];
""946_AccessoryData"" [label=""AccessoryData""];
""946_getAccessory"" [label=""getAccessory""];
""946_removeCreator"" [label=""removeCreator""];
""946_getAccessoryLockStatus"" [label=""getAccessoryLockStatus""];
""946_addAccessoryIdMapping"" [label=""addAccessoryIdMapping""];
""946_transferAccessory"" -> ""946_addAccessoryIdMapping"";
""946_removeCreator"" -> ""946_onlyCREATOR"";
""946_ownerAccessoryTransfer"" -> ""946_addAccessoryIdMapping"";
""946_createAccessorySeries"" -> ""946_onlyCREATOR"";
""946_setAccessory"" -> ""946_onlySERAPHIM"";
""946_transferAccessory"" -> ""946_onlySERAPHIM"";
}
"
0x33332025ad35a821eec5f1e10459222c8e4c62c3.sol,RipioOracle,"contract RipioOracle is Oracle, Delegable, BytesUtils { event DelegatedCall(address requester, address to); event CacheHit(address requester, bytes32 currency, uint256 requestTimestamp, uint256 deliverTimestamp, uint256 rate, uint256 decimals); event DeliveredRate(address requester, bytes32 currency, address signer, uint256 requestTimestamp, uint256 rate, uint256 decimals); uint256 public expiration = 6 hours; uint constant private INDEX_TIMESTAMP = 0; uint constant private INDEX_RATE = 1; uint constant private INDEX_DECIMALS = 2; uint constant private INDEX_V = 3; uint constant private INDEX_R = 4; uint constant private INDEX_S = 5; string private infoUrl; address public prevOracle; Oracle public fallback; mapping(bytes32 => RateCache) public cache; struct RateCache { uint256 timestamp; uint256 rate; uint256 decimals; }",0,"subgraph cluster_830_RipioOracle {
label=""RipioOracle"";
""830_setPrevOracle"" [label=""setPrevOracle""];
""830_invalidateCache"" [label=""invalidateCache""];
""830_setExpirationTime"" [label=""setExpirationTime""];
""830_setUrl"" [label=""setUrl""];
""830_getRate"" [label=""getRate""];
""830_isExpired"" [label=""isExpired""];
""830_setFallback"" [label=""setFallback""];
""830_url"" [label=""url""];
""830_setExpirationTime"" -> ""830_onlyOwner"";
""830_setPrevOracle"" -> ""830_onlyOwner"";
""830_setUrl"" -> ""830_onlyOwner"";
""830_setFallback"" -> ""830_onlyOwner"";
""830_invalidateCache"" -> ""830_onlyOwner"";
""830_getRate"" -> ""830_isDelegate"";
""830_getRate"" -> ""830_readBytes32"";
""830_getRate"" -> ""830_isExpired"";
}
"
0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol,NamiMultiSigWallet,"contract NamiMultiSigWallet { uint constant public MAX_OWNER_COUNT = 50; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",0,"subgraph cluster_5459_NamiMultiSigWallet {
label=""NamiMultiSigWallet"";
""5459_getConfirmationCount"" [label=""getConfirmationCount""];
""5459_NamiMultiSigWallet"" [label=""NamiMultiSigWallet""];
""5459_submitTransaction"" [label=""submitTransaction""];
""5459_confirmTransaction"" [label=""confirmTransaction""];
""5459_getConfirmations"" [label=""getConfirmations""];
""5459_isConfirmed"" [label=""isConfirmed""];
""5459_revokeConfirmation"" [label=""revokeConfirmation""];
""5459_removeOwner"" [label=""removeOwner""];
""5459_fallback"" [label=""fallback""];
""5459_replaceOwner"" [label=""replaceOwner""];
""5459_getOwners"" [label=""getOwners""];
""5459_changeRequirement"" [label=""changeRequirement""];
""5459_addTransaction"" [label=""addTransaction""];
""5459_getTransactionIds"" [label=""getTransactionIds""];
""5459_executeTransaction"" [label=""executeTransaction""];
""5459_getTransactionCount"" [label=""getTransactionCount""];
""5459_addOwner"" [label=""addOwner""];
""5459_isOwner"" [label=""isOwner""];
""5459_replaceOwner"" -> ""5459_onlyWallet"";
""5459_revokeConfirmation"" -> ""5459_confirmed"";
""5459_addOwner"" -> ""5459_ownerDoesNotExist"";
""5459_revokeConfirmation"" -> ""5459_notExecuted"";
""5459_replaceOwner"" -> ""5459_ownerDoesNotExist"";
""5459_confirmTransaction"" -> ""5459_transactionExists"";
""5459_confirmTransaction"" -> ""5459_ownerExists"";
""5459_executeTransaction"" -> ""5459_notExecuted"";
""5459_submitTransaction"" -> ""5459_addTransaction"";
""5459_addTransaction"" -> ""5459_notNull"";
""5459_confirmTransaction"" -> ""5459_executeTransaction"";
""5459_changeRequirement"" -> ""5459_validRequirement"";
""5459_addOwner"" -> ""5459_validRequirement"";
""5459_addOwner"" -> ""5459_notNull"";
""5459_removeOwner"" -> ""5459_changeRequirement"";
""5459_confirmTransaction"" -> ""5459_notConfirmed"";
""5459_addOwner"" -> ""5459_onlyWallet"";
""5459_NamiMultiSigWallet"" -> ""5459_validRequirement"";
""5459_changeRequirement"" -> ""5459_onlyWallet"";
""5459_executeTransaction"" -> ""5459_isConfirmed"";
""5459_revokeConfirmation"" -> ""5459_ownerExists"";
""5459_removeOwner"" -> ""5459_onlyWallet"";
""5459_replaceOwner"" -> ""5459_ownerExists"";
""5459_submitTransaction"" -> ""5459_confirmTransaction"";
""5459_removeOwner"" -> ""5459_ownerExists"";
}
"
0x0f35d82007119dc339af57b29dc8ae794b92926c.sol,DRCWalletMgrParams,"contract DRCWalletMgrParams is Claimable, Autonomy, Destructible { uint256 public singleWithdrawMin; uint256 public singleWithdrawMax; uint256 public dayWithdraw; uint256 public monthWithdraw; uint256 public dayWithdrawCount; uint256 public chargeFee; address public chargeFeePool; function initialSingleWithdrawMax(uint256 _value) onlyOwner public { require(!init); singleWithdrawMax = _value; }",0,"subgraph cluster_455_DRCWalletMgrParams {
label=""DRCWalletMgrParams"";
""455_setDayWithdrawCount"" [label=""setDayWithdrawCount""];
""455_initialMonthWithdraw"" [label=""initialMonthWithdraw""];
""455_initialSingleWithdrawMin"" [label=""initialSingleWithdrawMin""];
""455_initialChargeFee"" [label=""initialChargeFee""];
""455_initialChargeFeePool"" [label=""initialChargeFeePool""];
""455_setChargeFee"" [label=""setChargeFee""];
""455_initialDayWithdrawCount"" [label=""initialDayWithdrawCount""];
""455_setDayWithdraw"" [label=""setDayWithdraw""];
""455_initialSingleWithdrawMax"" [label=""initialSingleWithdrawMax""];
""455_initialDayWithdraw"" [label=""initialDayWithdraw""];
""455_setChargeFeePool"" [label=""setChargeFeePool""];
""455_setSingleWithdrawMin"" [label=""setSingleWithdrawMin""];
""455_setSingleWithdrawMax"" [label=""setSingleWithdrawMax""];
""455_setMonthWithdraw"" [label=""setMonthWithdraw""];
""455_setDayWithdrawCount"" -> ""455_onlyCongress"";
""455_setChargeFee"" -> ""455_onlyCongress"";
""455_initialSingleWithdrawMax"" -> ""455_onlyOwner"";
""455_initialMonthWithdraw"" -> ""455_onlyOwner"";
""455_setMonthWithdraw"" -> ""455_onlyCongress"";
""455_initialChargeFeePool"" -> ""455_onlyOwner"";
""455_initialSingleWithdrawMin"" -> ""455_onlyOwner"";
""455_setSingleWithdrawMax"" -> ""455_onlyCongress"";
""455_setSingleWithdrawMin"" -> ""455_onlyCongress"";
""455_initialDayWithdraw"" -> ""455_onlyOwner"";
""455_initialDayWithdrawCount"" -> ""455_onlyOwner"";
""455_setChargeFeePool"" -> ""455_onlyCongress"";
""455_initialChargeFee"" -> ""455_onlyOwner"";
""455_setDayWithdraw"" -> ""455_onlyCongress"";
}
"
0xc83d46e4d1e290fa414a5775d90d5d50745c3281.sol,TargetHit,contract TargetHit { string public name = ; string public symbol = ; string public version = ; uint256 public decimals = 8; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 33333333300000000; bool public stopped = true; uint256 public price = 30000300003000; address owner = 0x98E030f942F79AE61010BcBC414e7e7b945DcA33; address devteam = 0xc878b604C35dd3fb5cdDA1Ff1a019568e2A0d1c5; modifier isOwner { assert(owner == msg.sender); _; },0,"subgraph cluster_432_TargetHit {
label=""TargetHit"";
""432_stop"" [label=""stop""];
""432_GetPrice"" [label=""GetPrice""];
""432_deployTokens"" [label=""deployTokens""];
""432_constructor"" [label=""constructor""];
""432_setPrices"" [label=""setPrices""];
""432_approve"" [label=""approve""];
""432_changeOwner"" [label=""changeOwner""];
""432_transferfromOwner"" [label=""transferfromOwner""];
""432_start"" [label=""start""];
""432_transfer"" [label=""transfer""];
""432_buy"" [label=""buy""];
""432_setPrices"" -> ""432_isOwner"";
""432_deployTokens"" -> ""432_transferfromOwner"";
""432_changeOwner"" -> ""432_isOwner"";
""432_deployTokens"" -> ""432_isOwner"";
""432_stop"" -> ""432_isOwner"";
""432_start"" -> ""432_isOwner"";
}
"
0x187ac8adc20767be1635d4ad972e0c31d654f061.sol,SuperMegaTestToken,"contract SuperMegaTestToken is MintableToken { string public name = ; string public symbol = ; uint public decimals = 6; bool public tokensBlocked = true; mapping (address => uint) public teamTokensFreeze; event debugLog(string key, uint value); function unblock() external onlyOwner { tokensBlocked = false; }",0,"subgraph cluster_810_SuperMegaTestToken {
label=""SuperMegaTestToken"";
""810_transfer"" [label=""transfer""];
""810_transferFrom"" [label=""transferFrom""];
""810_approve"" [label=""approve""];
""810_allowTokenOperations"" [label=""allowTokenOperations""];
""810_freezeTokens"" [label=""freezeTokens""];
""810_unblock"" [label=""unblock""];
""810_transfer"" -> ""810_transfer"";
""810_transferFrom"" -> ""810_transferFrom"";
""810_transferFrom"" -> ""810_allowTokenOperations"";
""810_freezeTokens"" -> ""810_onlyOwner"";
""810_approve"" -> ""810_approve"";
""810_transfer"" -> ""810_allowTokenOperations"";
""810_unblock"" -> ""810_onlyOwner"";
""810_approve"" -> ""810_allowTokenOperations"";
}
"
0x26d76a22859fec45da123dbf3e14053a8b5b0831.sol,FullFOMO,"contract FullFOMO is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x5A3e43Ba22D1590C21ecB364f8fb46c17d683364); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 10 minutes; uint256 private rndGap_ = 10 minutes; uint256 constant private rndInit_ = 10 minutes; uint256 constant private rndInc_ = 22 seconds; uint256 constant private rndMax_ = 10 minutes; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(60,0); fees_[1] = F3Ddatasets.TeamFee(60,0); fees_[2] = F3Ddatasets.TeamFee(60,0); fees_[3] = F3Ddatasets.TeamFee(60,0); potSplit_[0] = F3Ddatasets.PotSplit(25,0); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(25,0); potSplit_[3] = F3Ddatasets.PotSplit(25,0); }",0,"subgraph cluster_4209_FullFOMO {
label=""FullFOMO"";
""4209_verifyTeam"" [label=""verifyTeam""];
""4209_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4209_airdrop"" [label=""airdrop""];
""4209_updateGenVault"" [label=""updateGenVault""];
""4209_reLoadCore"" [label=""reLoadCore""];
""4209_updateTimer"" [label=""updateTimer""];
""4209_reLoadXname"" [label=""reLoadXname""];
""4209_constructor"" [label=""constructor""];
""4209_endRound"" [label=""endRound""];
""4209_endTx"" [label=""endTx""];
""4209_reLoadXid"" [label=""reLoadXid""];
""4209_iWantXKeys"" [label=""iWantXKeys""];
""4209_buyXid"" [label=""buyXid""];
""4209_withdrawEarnings"" [label=""withdrawEarnings""];
""4209_withdraw"" [label=""withdraw""];
""4209_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4209_activate"" [label=""activate""];
""4209_potSwap"" [label=""potSwap""];
""4209_distributeInternal"" [label=""distributeInternal""];
""4209_calcKeysReceived"" [label=""calcKeysReceived""];
""4209_managePlayer"" [label=""managePlayer""];
""4209_updateMasks"" [label=""updateMasks""];
""4209_registerNameXaddr"" [label=""registerNameXaddr""];
""4209_determinePID"" [label=""determinePID""];
""4209_buyCore"" [label=""buyCore""];
""4209_distributeExternal"" [label=""distributeExternal""];
""4209_registerNameXname"" [label=""registerNameXname""];
""4209_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4209_buyXaddr"" [label=""buyXaddr""];
""4209_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4209_getPlayerVaults"" [label=""getPlayerVaults""];
""4209_getTimeLeft"" [label=""getTimeLeft""];
""4209_registerNameXID"" [label=""registerNameXID""];
""4209_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4209_reLoadXaddr"" [label=""reLoadXaddr""];
""4209_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4209_getBuyPrice"" [label=""getBuyPrice""];
""4209_fallback"" [label=""fallback""];
""4209_core"" [label=""core""];
""4209_buyXname"" [label=""buyXname""];
""4209_updateGenVault"" -> ""4209_calcUnMaskedEarnings"";
""4209_reLoadXaddr"" -> ""4209_isWithinLimits"";
""4209_getPlayerVaults"" -> ""4209_getPlayerVaultsHelper"";
""4209_getPlayerVaults"" -> ""4209_calcUnMaskedEarnings"";
""4209_core"" -> ""4209_airdrop"";
""4209_buyXname"" -> ""4209_isActivated"";
""4209_buyCore"" -> ""4209_core"";
""4209_withdrawEarnings"" -> ""4209_updateGenVault"";
""4209_withdraw"" -> ""4209_isHuman"";
""4209_fallback"" -> ""4209_isActivated"";
""4209_buyXaddr"" -> ""4209_isHuman"";
""4209_buyXname"" -> ""4209_verifyTeam"";
""4209_buyXid"" -> ""4209_determinePID"";
""4209_fallback"" -> ""4209_isHuman"";
""4209_fallback"" -> ""4209_determinePID"";
""4209_withdraw"" -> ""4209_endRound"";
""4209_buyXaddr"" -> ""4209_determinePID"";
""4209_withdraw"" -> ""4209_withdrawEarnings"";
""4209_core"" -> ""4209_endTx"";
""4209_buyXaddr"" -> ""4209_buyCore"";
""4209_buyXname"" -> ""4209_buyCore"";
""4209_buyXid"" -> ""4209_isWithinLimits"";
""4209_reLoadXaddr"" -> ""4209_isActivated"";
""4209_core"" -> ""4209_distributeExternal"";
""4209_reLoadCore"" -> ""4209_core"";
""4209_reLoadXid"" -> ""4209_isActivated"";
""4209_core"" -> ""4209_updateTimer"";
""4209_buyXid"" -> ""4209_verifyTeam"";
""4209_core"" -> ""4209_distributeInternal"";
""4209_reLoadXid"" -> ""4209_reLoadCore"";
""4209_reLoadXid"" -> ""4209_verifyTeam"";
""4209_buyXname"" -> ""4209_isWithinLimits"";
""4209_buyXid"" -> ""4209_isHuman"";
""4209_buyXname"" -> ""4209_determinePID"";
""4209_buyXaddr"" -> ""4209_isActivated"";
""4209_buyXaddr"" -> ""4209_isWithinLimits"";
""4209_registerNameXaddr"" -> ""4209_isHuman"";
""4209_buyXname"" -> ""4209_isHuman"";
""4209_reLoadXname"" -> ""4209_isWithinLimits"";
""4209_buyXaddr"" -> ""4209_verifyTeam"";
""4209_fallback"" -> ""4209_buyCore"";
""4209_reLoadXname"" -> ""4209_isActivated"";
""4209_reLoadXname"" -> ""4209_isHuman"";
""4209_withdraw"" -> ""4209_isActivated"";
""4209_reLoadXaddr"" -> ""4209_verifyTeam"";
""4209_reLoadXaddr"" -> ""4209_reLoadCore"";
""4209_buyCore"" -> ""4209_endRound"";
""4209_reLoadCore"" -> ""4209_withdrawEarnings"";
""4209_reLoadXid"" -> ""4209_isHuman"";
""4209_managePlayer"" -> ""4209_updateGenVault"";
""4209_core"" -> ""4209_managePlayer"";
""4209_registerNameXID"" -> ""4209_isHuman"";
""4209_reLoadXname"" -> ""4209_reLoadCore"";
""4209_reLoadCore"" -> ""4209_endRound"";
""4209_reLoadXid"" -> ""4209_isWithinLimits"";
""4209_buyXid"" -> ""4209_isActivated"";
""4209_reLoadXaddr"" -> ""4209_isHuman"";
""4209_registerNameXname"" -> ""4209_isHuman"";
""4209_getPlayerInfoByAddress"" -> ""4209_calcUnMaskedEarnings"";
""4209_buyXid"" -> ""4209_buyCore"";
""4209_reLoadXname"" -> ""4209_verifyTeam"";
""4209_distributeInternal"" -> ""4209_updateMasks"";
""4209_fallback"" -> ""4209_isWithinLimits"";
}
"
0x21598cebb98796f2746bcca0704b4a8d89b70e62.sol,BitGuildTrade,"contract BitGuildTrade is AccessAdmin { BitGuildTokenInterface public tokenContract; CardsInterface public cards ; GameConfigInterface public schema; RareInterface public rare; function BitGuildTrade() public { setAdminContract(msg.sender,true); setActionContract(msg.sender,true); }",0,"subgraph cluster_2480_BitGuildTrade {
label=""BitGuildTrade"";
""2480_buyRareItem"" [label=""buyRareItem""];
""2480_buyPLATCards"" [label=""buyPLATCards""];
""2480_buyBasicCards"" [label=""buyBasicCards""];
""2480__getExtraParam"" [label=""_getExtraParam""];
""2480_buyUpgradeCard"" [label=""buyUpgradeCard""];
""2480_setRareAddress"" [label=""setRareAddress""];
""2480_BitGuildTrade"" [label=""BitGuildTrade""];
""2480_setCardsAddress"" [label=""setCardsAddress""];
""2480_setBitGuildToken"" [label=""setBitGuildToken""];
""2480_getCanSellUnit"" [label=""getCanSellUnit""];
""2480_withdrawEtherFromTrade"" [label=""withdrawEtherFromTrade""];
""2480_kill"" [label=""kill""];
""2480_setConfigAddress"" [label=""setConfigAddress""];
""2480_receiveApproval"" [label=""receiveApproval""];
""2480_buyBasicCards_Migrate"" [label=""buyBasicCards_Migrate""];
""2480_fallback"" [label=""fallback""];
""2480_sellCards"" [label=""sellCards""];
""2480_withdrawToken"" [label=""withdrawToken""];
""2480_kill"" -> ""2480_onlyOwner"";
""2480_receiveApproval"" -> ""2480_buyPLATCards"";
""2480_withdrawToken"" -> ""2480_onlyOwner"";
""2480_BitGuildTrade"" -> ""2480_setActionContract"";
""2480_BitGuildTrade"" -> ""2480_setAdminContract"";
""2480_setRareAddress"" -> ""2480_onlyOwner"";
""2480_receiveApproval"" -> ""2480_buyUpgradeCard"";
""2480_setConfigAddress"" -> ""2480_onlyOwner"";
""2480_receiveApproval"" -> ""2480_buyRareItem"";
""2480_buyBasicCards_Migrate"" -> ""2480_onlyAdmin"";
""2480_setBitGuildToken"" -> ""2480_onlyOwner"";
""2480_receiveApproval"" -> ""2480__getExtraParam"";
""2480_setCardsAddress"" -> ""2480_onlyOwner"";
}
"
0x3aa6c3f86d945085c9ff4581f3963f4f0404a416.sol,AAA,"contract AAA is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000000; balances[0x3Aba8AA182c4Dd034332aD71110D5B262DBFD844] = _totalSupply; emit Transfer(address(0), 0x3Aba8AA182c4Dd034332aD71110D5B262DBFD844, _totalSupply); }",0,"subgraph cluster_543_AAA {
label=""AAA"";
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_constructor"" [label=""constructor""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xa2e59b1c5e64130d06f08a99cd5eda8af9c68b8a.sol,PreSaleDisciple,"contract PreSaleDisciple is PreSaleGuardian { event DiscipleSaleCreate(uint indexed saleId, uint indexed discipleId, uint indexed price, uint occupation, uint level); event BuyDisciple(uint indexed saleId, uint discipleId, address indexed buyer, uint indexed currentPrice); event DiscipleOfferSubmit(uint indexed saleId, uint discipleId, address indexed bidder, uint indexed price); event DiscipleOfferAccept(uint indexed saleId, uint discipleId, address indexed newOwner, uint indexed newPrice); event SetDiscipleSale(uint indexed saleId, uint indexed price); event DiscipleAuctionCreate(uint indexed auctionId, uint indexed discipleId, uint indexed startPrice, uint occupation, uint level); event DiscipleAuctionBid(uint indexed auctionId, address indexed bidder, uint indexed offer); event VendingDisciple(uint indexed vendingId, address indexed buyer); event DiscipleVendOffer(uint indexed vendingId, address indexed bidder, uint indexed offer); event DiscipleVendAccept(uint indexed vendingId, address indexed newOwner, uint indexed newPrice); event SetDiscipleVend(uint indexed priceId, uint indexed price); mapping (uint => address) public DiscipleSaleToBuyer; mapping (uint => uint) public DiscipleVendToOffer; mapping (uint => address) public DiscipleVendToBidder; mapping (uint => uint) public DiscipleVendToTime; struct DiscipleSale { uint discipleId; uint occupation; uint level; uint price; bool ifSold; address bidder; uint offerPrice; uint timestamp; }",0,"subgraph cluster_4967_PreSaleDisciple {
label=""PreSaleDisciple"";
""4967_OfferToDisciple"" [label=""OfferToDisciple""];
""4967_vendDisciple"" [label=""vendDisciple""];
""4967_createDiscipleSale"" [label=""createDiscipleSale""];
""4967_getDiscipleSale"" [label=""getDiscipleSale""];
""4967_getDiscipleNum"" [label=""getDiscipleNum""];
""4967_setDiscipleVend"" [label=""setDiscipleVend""];
""4967__generateDiscipleSale"" [label=""_generateDiscipleSale""];
""4967_setDiscipleSale"" [label=""setDiscipleSale""];
""4967_getDiscipleVend"" [label=""getDiscipleVend""];
""4967_AcceptDiscipleOffer"" [label=""AcceptDiscipleOffer""];
""4967_acceptDiscipleVend"" [label=""acceptDiscipleVend""];
""4967__discipleVendPrice"" [label=""_discipleVendPrice""];
""4967_offlineDiscipleSold"" [label=""offlineDiscipleSold""];
""4967_buyDisciple"" [label=""buyDisciple""];
""4967_offerDiscipleVend"" [label=""offerDiscipleVend""];
""4967__discipleVendPrice"" -> ""4967_safeSub"";
""4967_offerDiscipleVend"" -> ""4967_whenNotPaused"";
""4967_vendDisciple"" -> ""4967_whenNotPaused"";
""4967_buyDisciple"" -> ""4967_safeSub"";
""4967_acceptDiscipleVend"" -> ""4967_whenNotPaused"";
""4967_vendDisciple"" -> ""4967__discipleVendPrice"";
""4967_AcceptDiscipleOffer"" -> ""4967_whenNotPaused"";
""4967_setDiscipleVend"" -> ""4967_onlyAdmin"";
""4967_setDiscipleSale"" -> ""4967_onlyAdmin"";
""4967_buyDisciple"" -> ""4967__computePrice"";
""4967_createDiscipleSale"" -> ""4967_onlyAdmin"";
""4967_buyDisciple"" -> ""4967_whenNotPaused"";
""4967_offlineDiscipleSold"" -> ""4967_onlyAdmin"";
""4967_buyDisciple"" -> ""4967__brokerFeeDistribute"";
""4967_OfferToDisciple"" -> ""4967_whenNotPaused"";
""4967_createDiscipleSale"" -> ""4967__generateDiscipleSale"";
""4967__discipleVendPrice"" -> ""4967__computePrice"";
}
"
0x0326ade59900f4e99e029362a076063a6d542a58.sol,Hedgely,contract Hedgely is Ownable { uint256 public numberSyndicateMembers; uint256 public totalSyndicateShares = 20000; uint256 public playersShareAllocation = 5000; uint256 public availableBuyInShares = 5000; uint256 public minimumBuyIn = 10; uint256 public buyInSharePrice = 1000000000000000; uint256 public shareCycleSessionSize = 1000; uint256 public shareCycleIndex = 0; uint256 public shareCycle = 1; uint256 public currentSyndicateValue = 150000000000000000; uint256 public maxCyclePlayersConsidered = 100; address[] public cyclePlayers; uint256 public numberOfCyclePlayers = 0; struct somePlayer { uint256 playCount; uint256 profitShare; uint256 shareCycle; uint256 winnings; },0,"subgraph cluster_1784_Hedgely {
label=""Hedgely"";
""1784_getPlayerPortfolio"" [label=""getPlayerPortfolio""];
""1784_updatePlayCount"" [label=""updatePlayCount""];
""1784_distributeProfit"" [label=""distributeProfit""];
""1784_random"" [label=""random""];
""1784_invest"" [label=""invest""];
""1784_insertPlayer"" [label=""insertPlayer""];
""1784_playerStatus"" [label=""playerStatus""];
""1784_setMaxCyclePlayersConsidered"" [label=""setMaxCyclePlayersConsidered""];
""1784_claimPlayerWinnings"" [label=""claimPlayerWinnings""];
""1784_numberOfInvestors"" [label=""numberOfInvestors""];
""1784_resetMarket"" [label=""resetMarket""];
""1784_addMember"" [label=""addMember""];
""1784_kill"" [label=""kill""];
""1784_findCurrentLowest"" [label=""findCurrentLowest""];
""1784_insertCyclePlayer"" [label=""insertCyclePlayer""];
""1784_allocateShares"" [label=""allocateShares""];
""1784_setShareCycleSessionSize"" [label=""setShareCycleSessionSize""];
""1784_endSession"" [label=""endSession""];
""1784_setSessionDurationMinutes"" [label=""setSessionDurationMinutes""];
""1784_claimPlayerProfit"" [label=""claimPlayerProfit""];
""1784_getMarketOptions"" [label=""getMarketOptions""];
""1784_fallback"" [label=""fallback""];
""1784_buyIntoSyndicate"" [label=""buyIntoSyndicate""];
""1784_allocateWinnings"" [label=""allocateWinnings""];
""1784_memberShareCount"" [label=""memberShareCount""];
""1784_withdraw"" [label=""withdraw""];
""1784_claimProfit"" [label=""claimProfit""];
""1784_memberProfitShare"" [label=""memberProfitShare""];
""1784_min"" [label=""min""];
""1784_roundIt"" [label=""roundIt""];
""1784_Hedgely"" [label=""Hedgely""];
""1784_withdraw"" -> ""1784_onlyOwner"";
""1784_resetMarket"" -> ""1784_findCurrentLowest"";
""1784_distributeProfit"" -> ""1784_roundIt"";
""1784_endSession"" -> ""1784_resetMarket"";
""1784_invest"" -> ""1784_roundIt"";
""1784_setMaxCyclePlayersConsidered"" -> ""1784_onlyOwner"";
""1784_resetMarket"" -> ""1784_random"";
""1784_allocateShares"" -> ""1784_onlyOwner"";
""1784_endSession"" -> ""1784_allocateWinnings"";
""1784_invest"" -> ""1784_insertPlayer"";
""1784_invest"" -> ""1784_findCurrentLowest"";
""1784_resetMarket"" -> ""1784_insertPlayer"";
""1784_invest"" -> ""1784_endSession"";
""1784_allocateShares"" -> ""1784_addMember"";
""1784_distributeProfit"" -> ""1784_min"";
""1784_updatePlayCount"" -> ""1784_insertCyclePlayer"";
""1784_setSessionDurationMinutes"" -> ""1784_onlyOwner"";
""1784_setShareCycleSessionSize"" -> ""1784_onlyOwner"";
""1784_buyIntoSyndicate"" -> ""1784_addMember"";
""1784_invest"" -> ""1784_updatePlayCount"";
""1784_kill"" -> ""1784_onlyOwner"";
""1784_resetMarket"" -> ""1784_distributeProfit"";
""1784_Hedgely"" -> ""1784_resetMarket"";
}
"
0xcf70f36f8fd04713b33900bab530fd2f63ed9ae0.sol,TheNextBlock,"contract TheNextBlock { using SafeMath for uint256; event BetReceived(address sender, address betOnMiner, address miner); event Jackpot(address winner, uint256 amount); struct Owner { uint256 balance; address addr; }",0,"subgraph cluster_610_TheNextBlock {
label=""TheNextBlock"";
""610_safeGetPercent"" [label=""safeGetPercent""];
""610_getBalance"" [label=""getBalance""];
""610_getPlayerData"" [label=""getPlayerData""];
""610_getPlayersPoints"" [label=""getPlayersPoints""];
""610_getNextPrizePool"" [label=""getNextPrizePool""];
""610_placeBet"" [label=""placeBet""];
""610_changeOwner"" [label=""changeOwner""];
""610_getMyBalance"" [label=""getMyBalance""];
""610_fallback"" [label=""fallback""];
""610_getOwnersBalance"" [label=""getOwnersBalance""];
""610_TheNextBlock"" [label=""TheNextBlock""];
""610_getMyPoints"" [label=""getMyPoints""];
""610_withdrawMyFunds"" [label=""withdrawMyFunds""];
""610_getPlayersBalance"" [label=""getPlayersBalance""];
""610_withdrawOwnersFunds"" [label=""withdrawOwnersFunds""];
""610_getPrizePool"" [label=""getPrizePool""];
""610_placeBet"" -> ""610_notMore"";
""610_withdrawOwnersFunds"" -> ""610_onlyOwner"";
""610_placeBet"" -> ""610_onlyOnce"";
""610_placeBet"" -> ""610_notLess"";
""610_placeBet"" -> ""610_safeGetPercent"";
""610_changeOwner"" -> ""610_onlyOwner"";
}
"
0x52553a82adbc45eda6af687f9b5246fc51863b50.sol,GlobalCashChain,"contract GlobalCashChain { string public name; string public symbol; uint8 public decimals = 2; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_380_GlobalCashChain {
label=""GlobalCashChain"";
""380_constructor"" [label=""constructor""];
""380_transfer"" [label=""transfer""];
""380_burn"" [label=""burn""];
""380__transfer"" [label=""_transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_burnFrom"" [label=""burnFrom""];
""380_approve"" [label=""approve""];
""380_transferFrom"" -> ""380__transfer"";
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
}
"
0x1dfa4bb783b3aeea55b712b4acb4b7dd1a8fe928.sol,ZodiaqToken,"contract ZodiaqToken is ERC20Token, owned { string public name = ; string public symbol = ; uint8 public decimals = 6; uint256 public totalSupply = 50000000000000; address public reservationWallet; uint256 public reservationSupply = 11000000000000; address public bountyWallet; uint256 public bountySupply = 2000000000000; address public teamWallet; uint256 public teamSupply = 3500000000000; address public partnerWallet; uint256 public partnerSupply = 3500000000000; address public currentIcoWallet; uint256 public currentIcoSupply; function ZodiaqToken () public { balances[this] = totalSupply; }",0,"subgraph cluster_573_ZodiaqToken {
label=""ZodiaqToken"";
""573_mintToken"" [label=""mintToken""];
""573_burnBalance"" [label=""burnBalance""];
""573_setICO"" [label=""setICO""];
""573_setWallets"" [label=""setWallets""];
""573_ZodiaqToken"" [label=""ZodiaqToken""];
""573_burnBalance"" -> ""573_onlyOwner"";
""573_mintToken"" -> ""573_onlyOwner"";
""573_setICO"" -> ""573_onlyOwner"";
""573_setWallets"" -> ""573__transferFrom"";
""573_setWallets"" -> ""573_onlyOwner"";
}
"
0x1e0646940d1ec4494fe80ca13643e3abb76f5810.sol,GameSicBo,"contract GameSicBo is Base { uint public lastBlockNumber = 0; uint public gameID = 0; uint public gameBeginTime; uint public gameEndTime; uint public gameTime; uint256 public gameMaxBetAmount; uint256 public gameMinBetAmount; bool public gameOver = true; bytes32 public gameEncryptedText; uint public gameResult; string public gameRandon1; string public constant gameRandon2 = ; bool public betInfoIsLocked = false; uint public playNo = 1; uint public gameBeginPlayNo; uint public gameEndPlayNo; uint public nextRewardPlayNo; uint public currentRewardNum = 100; function GameSicBo(string _gameName,uint _gameTime, uint256 _gameMinBetAmount, uint256 _gameMaxBetAmount,address _DonQuixoteToken) public { require(_gameTime > 0); require(_gameMinBetAmount >= 0); require(_gameMaxBetAmount > 0); require(_gameMaxBetAmount >= _gameMinBetAmount); gameMinBetAmount = _gameMinBetAmount; gameMaxBetAmount = _gameMaxBetAmount; gameTime = _gameTime; require(_DonQuixoteToken != 0x0); DonQuixoteToken = IDonQuixoteToken(_DonQuixoteToken); owner = msg.sender; gameName = _gameName; }",0,"subgraph cluster_2951_GameSicBo {
label=""GameSicBo"";
""2951_openGameResult"" [label=""openGameResult""];
""2951_setCurrentRewardNum"" [label=""setCurrentRewardNum""];
""2951_lockBetInfo"" [label=""lockBetInfo""];
""2951_newGame"" [label=""newGame""];
""2951_fallback"" [label=""fallback""];
""2951_transEther"" [label=""transEther""];
""2951__calResultReturnIsWin"" [label=""_calResultReturnIsWin""];
""2951_playSingleDiceBet"" [label=""playSingleDiceBet""];
""2951_openGameResultAndNewGame"" [label=""openGameResultAndNewGame""];
""2951_uintToString"" [label=""uintToString""];
""2951_playSpecificDoubles"" [label=""playSpecificDoubles""];
""2951_playAnyTriples"" [label=""playAnyTriples""];
""2951_playSpecificTriples"" [label=""playSpecificTriples""];
""2951_playBigOrSmall"" [label=""playBigOrSmall""];
""2951_GameSicBo"" [label=""GameSicBo""];
""2951_setAuction"" [label=""setAuction""];
""2951__newGame"" [label=""_newGame""];
""2951_playBatch"" [label=""playBatch""];
""2951__openGameResult"" [label=""_openGameResult""];
""2951_canSetBanker"" [label=""canSetBanker""];
""2951_playDiceCombinations"" [label=""playDiceCombinations""];
""2951_setBanker"" [label=""setBanker""];
""2951__play"" [label=""_play""];
""2951__playRealOdds"" [label=""_playRealOdds""];
""2951_playThreeDiceTotal"" [label=""playThreeDiceTotal""];
""2951_noOpenGameResult"" [label=""noOpenGameResult""];
""2951_failUserRefund"" [label=""failUserRefund""];
""2951__openGameResult"" -> ""2951_getEventId"";
""2951_playThreeDiceTotal"" -> ""2951_playable"";
""2951_playSpecificTriples"" -> ""2951__play"";
""2951_playSingleDiceBet"" -> ""2951__play"";
""2951_openGameResult"" -> ""2951_onlyBanker"";
""2951__play"" -> ""2951_getEventId"";
""2951_openGameResultAndNewGame"" -> ""2951_onlyBanker"";
""2951_openGameResult"" -> ""2951__openGameResult"";
""2951_playBatch"" -> ""2951_playSingleDiceBet"";
""2951_openGameResultAndNewGame"" -> ""2951__openGameResult"";
""2951_noOpenGameResult"" -> ""2951_getEventId"";
""2951_playAnyTriples"" -> ""2951__play"";
""2951_playSpecificDoubles"" -> ""2951_playable"";
""2951_openGameResultAndNewGame"" -> ""2951__newGame"";
""2951_newGame"" -> ""2951_onlyBanker"";
""2951_setBanker"" -> ""2951_onlyAuction"";
""2951_playBatch"" -> ""2951_playThreeDiceTotal"";
""2951_playBatch"" -> ""2951_playSpecificTriples"";
""2951__openGameResult"" -> ""2951__playRealOdds"";
""2951_playDiceCombinations"" -> ""2951__play"";
""2951__openGameResult"" -> ""2951__calResultReturnIsWin"";
""2951__play"" -> ""2951_depositToken"";
""2951_playBatch"" -> ""2951_playDiceCombinations"";
""2951_playSpecificDoubles"" -> ""2951__play"";
""2951_playSingleDiceBet"" -> ""2951_playable"";
""2951_transEther"" -> ""2951_onlyOwner"";
""2951_playBatch"" -> ""2951_playSpecificDoubles"";
""2951_playSpecificTriples"" -> ""2951_playable"";
""2951_playDiceCombinations"" -> ""2951_playable"";
""2951_playBatch"" -> ""2951_playAnyTriples"";
""2951__openGameResult"" -> ""2951_uintToString"";
""2951_setAuction"" -> ""2951_onlyOwner"";
""2951_playBigOrSmall"" -> ""2951__play"";
""2951__newGame"" -> ""2951_getEventId"";
""2951_newGame"" -> ""2951__newGame"";
""2951_setBanker"" -> ""2951_getEventId"";
""2951_setCurrentRewardNum"" -> ""2951_onlyBanker"";
""2951_playBatch"" -> ""2951_playBigOrSmall"";
""2951_playBigOrSmall"" -> ""2951_playable"";
""2951_playAnyTriples"" -> ""2951_playable"";
""2951_playThreeDiceTotal"" -> ""2951__play"";
""2951_lockBetInfo"" -> ""2951_onlyBanker"";
}
"
0xe3147bc1046fab87292e1b743c1e657b37262496.sol,Whitelisted,"contract Whitelisted is owned { Whitelist.List private _list; uint256 decimals = 100000000000000; modifier onlyWhitelisted() { require(Whitelist.check(_list, msg.sender) == true); _; }",0,"subgraph cluster_436_Whitelisted {
label=""Whitelisted"";
""436_addWhiteListAddress"" [label=""addWhiteListAddress""];
""436_resetUserWhiteListAmount"" [label=""resetUserWhiteListAmount""];
""436_disableWhitelistAddress"" [label=""disableWhitelistAddress""];
""436_isAddressWhiteListed"" [label=""isAddressWhiteListed""];
""436_getUserAmount"" [label=""getUserAmount""];
""436_isValidUser"" [label=""isValidUser""];
""436_isWhiteListedValueValid"" [label=""isWhiteListedValueValid""];
""436_isValidUser"" -> ""436_isWhiteListedValueValid"";
""436_isValidUser"" -> ""436_isAddressWhiteListed"";
""436_disableWhitelistAddress"" -> ""436_onlyOwner"";
""436_addWhiteListAddress"" -> ""436_isAddressWhiteListed"";
""436_getUserAmount"" -> ""436_isAddressWhiteListed"";
}
"
0x03358425ada4620246dd703dc1f2246b8e148d22.sol,BoomerangLiquidity,contract BoomerangLiquidity is Owned { modifier onlyOwner(){ require(msg.sender == owner); _; },0,"subgraph cluster_381_BoomerangLiquidity {
label=""BoomerangLiquidity"";
""381_donate"" [label=""donate""];
""381_payout"" [label=""payout""];
""381_withdraw"" [label=""withdraw""];
""381_BoomerangLiquidity"" [label=""BoomerangLiquidity""];
""381_fallback"" [label=""fallback""];
""381_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""381_deposit"" [label=""deposit""];
""381_deposit"" -> ""381_payout"";
""381_transferAnyERC20Token"" -> ""381_notPowh"";
""381_transferAnyERC20Token"" -> ""381_onlyOwner"";
}
"
0x55516b579e56c1287f0700eddda352c2d2c5b3b6.sol,UncursedToken,contract UncursedToken is ERC20 { string public symbol = ; string public name = ; uint8 public decimals = 0; uint public totalSupply = 0; uint public birthBlock; address public cursedContract = 0x0; address public withdrawAddress = 0xa515BDA9869F619fe84357E3e44040Db357832C4; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function UncursedToken() public { birthBlock = block.number; },0,"subgraph cluster_617_UncursedToken {
label=""UncursedToken"";
""617_approve"" [label=""approve""];
""617_UncursedToken"" [label=""UncursedToken""];
""617_curse"" [label=""curse""];
""617_fallback"" [label=""fallback""];
""617_sub"" [label=""sub""];
""617_transfer"" [label=""transfer""];
""617_approveAndCall"" [label=""approveAndCall""];
""617_transferFrom"" [label=""transferFrom""];
""617_setCursedContract"" [label=""setCursedContract""];
""617_add"" [label=""add""];
""617_withdraw"" [label=""withdraw""];
""617_balanceOf"" [label=""balanceOf""];
""617_allowance"" [label=""allowance""];
""617_transferFrom"" -> ""617_add"";
""617_transferFrom"" -> ""617_curse"";
""617_transferFrom"" -> ""617_sub"";
""617_transfer"" -> ""617_sub"";
""617_transfer"" -> ""617_add"";
""617_transfer"" -> ""617_curse"";
""617_fallback"" -> ""617_curse"";
}
"
0x28a9824cc26361fe97417a60d5bd1225853db46d.sol,TTS,contract TTS is Token { string public name; string public symbol; uint32 internal rate; uint32 internal consume; uint256 internal totalConsume; uint256 internal bigJackpot; uint256 internal smallJackpot; uint256 public consumeRule; address internal owner; modifier onlyOwner(){ require (msg.sender==owner); _; },0,"subgraph cluster_964_TTS {
label=""TTS"";
""964_getRate"" [label=""getRate""];
""964_smallCheckOut"" [label=""smallCheckOut""];
""964_getTotalConsume"" [label=""getTotalConsume""];
""964_setJackpot"" [label=""setJackpot""];
""964_transferFrom"" [label=""transferFrom""];
""964_approve"" [label=""approve""];
""964_getBigJackpot"" [label=""getBigJackpot""];
""964_getConsume"" [label=""getConsume""];
""964_allowance"" [label=""allowance""];
""964_transfer"" [label=""transfer""];
""964_bigCheckOut"" [label=""bigCheckOut""];
""964_tickets"" [label=""tickets""];
""964_TTS"" [label=""TTS""];
""964_ticketConsume"" [label=""ticketConsume""];
""964_sendAll"" [label=""sendAll""];
""964_balanceOf"" [label=""balanceOf""];
""964_getEth"" [label=""getEth""];
""964_trashOf"" [label=""trashOf""];
""964_getSmallJackpot"" [label=""getSmallJackpot""];
""964_getBalance"" [label=""getBalance""];
""964_fallback"" [label=""fallback""];
""964_sendTransfer"" [label=""sendTransfer""];
""964_inTrash"" [label=""inTrash""];
""964_sendTransfer"" -> ""964_onlyOwner"";
""964_getEth"" -> ""964_onlyOwner"";
""964_bigCheckOut"" -> ""964_onlyOwner"";
""964_tickets"" -> ""964_setJackpot"";
""964_ticketConsume"" -> ""964_setJackpot"";
""964_sendAll"" -> ""964_onlyOwner"";
""964_smallCheckOut"" -> ""964_onlyOwner"";
}
"
0xc7cbd16654cf938e6c9cc3ade88ae9ee21c27edf.sol,CTSCToken,"contract CTSCToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CTSCToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 1250000000000000000000000000; balances[0x83d9675D2C603f3F3Be7CE0379b7e74FD75a923f] = _totalSupply; Transfer(address(0), 0x83d9675D2C603f3F3Be7CE0379b7e74FD75a923f, _totalSupply); }",0,"subgraph cluster_543_CTSCToken {
label=""CTSCToken"";
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_CTSCToken"" [label=""CTSCToken""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xaa4ab1c817e4df7d25ce4d42352649d592a3bba0.sol,AnkorusToken,"contract AnkorusToken is BasicToken, Ownable { using SafeMath for uint256; uint256 public saleCap; address public wallet; uint256 public startDate; uint256 public endDate; uint256 public weiRaised; uint256 public tokensSold = 0; uint256 public tokensPerTrunche = 2000000; mapping (address => bool) public whitelist; bool public finalized = false; string public constant symbol = ; string public constant name = ; uint8 public decimals = 18; event TokenPurchase(address indexed purchaser, uint256 value, uint256 tokenAmount); event CompanyTokenPushed(address indexed beneficiary, uint256 amount); event Burn( address burnAddress, uint256 amount); function AnkorusToken() public { }",0,"subgraph cluster_1078_AnkorusToken {
label=""AnkorusToken"";
""1078_buyTokens"" [label=""buyTokens""];
""1078_initialize"" [label=""initialize""];
""1078_transfer"" [label=""transfer""];
""1078_push"" [label=""push""];
""1078_AnkorusToken"" [label=""AnkorusToken""];
""1078_saleActive"" [label=""saleActive""];
""1078_finalize"" [label=""finalize""];
""1078_supply"" [label=""supply""];
""1078_getRateAt"" [label=""getRateAt""];
""1078_getCurrentTimestamp"" [label=""getCurrentTimestamp""];
""1078_batchApproveWhitelist"" [label=""batchApproveWhitelist""];
""1078_setWhitelist"" [label=""setWhitelist""];
""1078_getTimeUntilStart"" [label=""getTimeUntilStart""];
""1078_fallback"" [label=""fallback""];
""1078_finalize"" -> ""1078_onlyOwner"";
""1078_buyTokens"" -> ""1078_getRateAt"";
""1078_transfer"" -> ""1078_transfer"";
""1078_batchApproveWhitelist"" -> ""1078_onlyOwner"";
""1078_buyTokens"" -> ""1078_saleActive"";
""1078_buyTokens"" -> ""1078_supply"";
""1078_initialize"" -> ""1078_onlyOwner"";
""1078_getTimeUntilStart"" -> ""1078_getCurrentTimestamp"";
""1078_initialize"" -> ""1078_getCurrentTimestamp"";
""1078_setWhitelist"" -> ""1078_onlyOwner"";
""1078_finalize"" -> ""1078_getCurrentTimestamp"";
""1078_push"" -> ""1078_onlyOwner"";
""1078_saleActive"" -> ""1078_supply"";
""1078_fallback"" -> ""1078_buyTokens"";
""1078_saleActive"" -> ""1078_getCurrentTimestamp"";
""1078_initialize"" -> ""1078_uninitialized"";
}
"
0x6fd749dc814754106bf097a2d1a7f089a8ff6cda.sol,PlayerBook,contract PlayerBook is Ownable { using NameFilter for string; string constant public name = ; string constant public symbol = ; uint256 public registrationFee_ = 10 finney; mapping (bytes32 => address) public nameToAddr; mapping (address => string[]) public addrToNames; PlayerBookReceiverInterface public currentGame; address public CFO; address public COO; modifier onlyCOO() { require(msg.sender == COO); _; },0,"subgraph cluster_274_PlayerBookReceiverInterface {
label=""PlayerBookReceiverInterface"";
""274_receivePlayerInfo"" [label=""receivePlayerInfo""];
}
"
0x922f89af2a2af5e43dec770398ac539b76e8a91b.sol,Ownable,"contract Ownable { address private _owner; event OwnershipRenounced(address indexed previousOwner); event OwnershipTransferred( address indexed previousOwner, address indexed newOwner ); constructor() public { _owner = msg.sender; }",0,"subgraph cluster_228_Ownable {
label=""Ownable"";
""228_constructor"" [label=""constructor""];
""228_isOwner"" [label=""isOwner""];
""228_transferOwnership"" [label=""transferOwnership""];
""228__transferOwnership"" [label=""_transferOwnership""];
""228_owner"" [label=""owner""];
""228_renounceOwnership"" [label=""renounceOwnership""];
""228_transferOwnership"" -> ""228__transferOwnership"";
""228_renounceOwnership"" -> ""228_onlyOwner"";
""228_transferOwnership"" -> ""228_onlyOwner"";
}
"
0x019d6222f05d67ce4f4d258809b149e8e4034540.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },0,"subgraph cluster_299_BasicToken {
label=""BasicToken"";
""299_transfer"" [label=""transfer""];
""299_totalSupply"" [label=""totalSupply""];
""299_balanceOf"" [label=""balanceOf""];
}
"
0x9c406e291f41eb50f152dec37196d01f751b5656.sol,BasicToken,"contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; function transfer(address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); emit Transfer(msg.sender, _to, _value); return true; }",0,"subgraph cluster_387_BasicToken {
label=""BasicToken"";
""387_balanceOf"" [label=""balanceOf""];
""387_transfer"" [label=""transfer""];
}
"
0x1eeeaffe28d463dcf2c1898d19cf3871e9a17d7c.sol,MultiOwnable,contract MultiOwnable { mapping(address => bool) ownerMap; address[] public owners; event OwnerAdded(address indexed _newOwner); event OwnerRemoved(address indexed _oldOwner); modifier onlyOwner() { require(isOwner(msg.sender)); _; },0,"subgraph cluster_189_MultiOwnable {
label=""MultiOwnable"";
""189_isOwner"" [label=""isOwner""];
""189_ownerCount"" [label=""ownerCount""];
""189_constructor"" [label=""constructor""];
""189_addOwner"" [label=""addOwner""];
""189_removeOwner"" [label=""removeOwner""];
""189_addOwner"" -> ""189_onlyOwner"";
""189_removeOwner"" -> ""189_isOwner"";
""189_removeOwner"" -> ""189_onlyOwner"";
""189_addOwner"" -> ""189_isOwner"";
}
"
0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol,DailyDraw,contract DailyDraw is Owned{ bytes32 public number; uint public timeLimit; uint public ticketsSold; struct Ticket { address addr; uint time; },0,"subgraph cluster_1422_DailyDraw {
label=""DailyDraw"";
""1422_start"" [label=""start""];
""1422_winner"" [label=""winner""];
""1422_fallback"" [label=""fallback""];
""1422_Play"" [label=""Play""];
""1422_balances"" [label=""balances""];
""1422_winner"" -> ""1422_onlyOwner"";
}
"
0x3714beb09377a27b81ade094a92be7f56445332e.sol,ERC223Token,"contract ERC223Token is ERC223,SafeMath ,Ownable { mapping(address => uint) balances; string public name; string public symbol; uint256 public decimals; uint256 public totalSupply; address public crowdsaleAgent; address[] public addrCotracts; bool public released = false; modifier onlyCrowdsaleAgent() { assert(msg.sender == crowdsaleAgent); _; }",0,"subgraph cluster_723_ERC223Token {
label=""ERC223Token"";
""723_isContract"" [label=""isContract""];
""723_setCrowdsaleAgent"" [label=""setCrowdsaleAgent""];
""723_name"" [label=""name""];
""723_releaseTokenTransfer"" [label=""releaseTokenTransfer""];
""723_transferToAddress"" [label=""transferToAddress""];
""723_transfer"" [label=""transfer""];
""723_transferToContract"" [label=""transferToContract""];
""723_symbol"" [label=""symbol""];
""723_balanceOf"" [label=""balanceOf""];
""723_mint"" [label=""mint""];
""723_totalSupply"" [label=""totalSupply""];
""723_decimals"" [label=""decimals""];
""723_transferToContract"" -> ""723_balanceOf"";
""723_transferToContract"" -> ""723_safeSub"";
""723_transfer"" -> ""723_transferToContract"";
""723_transferToAddress"" -> ""723_safeAdd"";
""723_mint"" -> ""723_safeAdd"";
""723_transferToContract"" -> ""723_safeAdd"";
""723_mint"" -> ""723_onlyCrowdsaleAgent"";
""723_transfer"" -> ""723_canTransfer"";
""723_transferToAddress"" -> ""723_balanceOf"";
""723_setCrowdsaleAgent"" -> ""723_onlyOwner"";
""723_transfer"" -> ""723_isContract"";
""723_transferToAddress"" -> ""723_safeSub"";
""723_releaseTokenTransfer"" -> ""723_onlyCrowdsaleAgent"";
""723_transfer"" -> ""723_transferToAddress"";
}
"
0x54c548703c6f423cf7ed22806b608d332fcebb3b.sol,StarbaseCrowdsale,"contract StarbaseCrowdsale is Ownable { using SafeMath for uint256; event CrowdsaleEnded(uint256 endedAt); event StarbasePurchasedWithEth(address purchaser, uint256 amount, uint256 rawAmount, uint256 cnyEthRate); event CnyEthRateUpdated(uint256 cnyEthRate); event CnyBtcRateUpdated(uint256 cnyBtcRate); event QualifiedPartnerAddress(address qualifiedPartner); AbstractStarbaseToken public starbaseToken; StarbaseEarlyPurchaseAmendment public starbaseEpAmendment; Certifier public picopsCertifier; uint256 constant public crowdsaleTokenAmount = 125000000e18; uint256 constant public earlyPurchaseTokenAmount = 50000000e18; uint256 constant public MIN_INVESTMENT = 1; uint256 constant public MAX_CAP = 67000000; string public constant PURCHASE_AMOUNT_UNIT = ; struct CrowdsalePurchase { address purchaser; uint256 amount; uint256 rawAmount; uint256 purchasedAt; }",0,"subgraph cluster_3617_StarbaseCrowdsaleContractW {
label=""StarbaseCrowdsaleContractW"";
""3617_loadCrowdsalePurchases"" [label=""loadCrowdsalePurchases""];
""3617_fallback"" [label=""fallback""];
""3617_addEarlyPurchases"" [label=""addEarlyPurchases""];
""3617_totalRaisedAmountInCny"" [label=""totalRaisedAmountInCny""];
""3617_setup"" [label=""setup""];
""3617_isEnded"" [label=""isEnded""];
""3617_calculateBonus"" [label=""calculateBonus""];
""3617_calculateBonusInRange"" [label=""calculateBonusInRange""];
""3617_withdrawPurchasedTokens"" [label=""withdrawPurchasedTokens""];
""3617_loadCrowdsalePurchases"" -> ""3617_calculateBonus"";
""3617_calculateBonus"" -> ""3617_calculateBonusInRange"";
""3617_addEarlyPurchases"" -> ""3617_onlyOwner"";
""3617_withdrawPurchasedTokens"" -> ""3617_whenEnded"";
""3617_loadCrowdsalePurchases"" -> ""3617_whenEnded"";
""3617_withdrawPurchasedTokens"" -> ""3617_totalRaisedAmountInCny"";
""3617_setup"" -> ""3617_onlyOwner"";
""3617_loadCrowdsalePurchases"" -> ""3617_onlyOwner"";
}
"
0xe0efd668c950e6d286bc1c5b9304f31632708656.sol,CrowdsaleToken,"contract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken { event UpdatedTokenInformation(string newName, string newSymbol); string public name; string public symbol; uint public decimals; function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable) UpgradeableToken(msg.sender) { owner = msg.sender; name = _name; symbol = _symbol; totalSupply = _initialSupply; decimals = _decimals; balances[owner] = totalSupply; if(totalSupply > 0) { Minted(owner, totalSupply); }",0,"subgraph cluster_1191_BurnableCrowdsaleToken {
label=""BurnableCrowdsaleToken"";
""1191_BurnableCrowdsaleToken"" [label=""BurnableCrowdsaleToken""];
""1191_BurnableCrowdsaleToken"" -> ""1191_CrowdsaleToken"";
}
"
0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol,Token,"contract Token is ERC20Token, Freezable { mapping (address => uint) balances; mapping (address => mapping (address => uint)) allowances; mapping (address => string) public data; uint public totalSupply; uint public timeTransferbleUntil = 1538262000; bool public stopped = false; event Burn(address indexed from, uint256 value, string data); event LogStop(); modifier transferable() { assert(!stopped); _; }",0,"subgraph cluster_612_Token {
label=""Token"";
""612_transfer"" [label=""transfer""];
""612_allowance"" [label=""allowance""];
""612_burn"" [label=""burn""];
""612_balanceOf"" [label=""balanceOf""];
""612_stop"" [label=""stop""];
""612_getData"" [label=""getData""];
""612_totalSupply"" [label=""totalSupply""];
""612_approve"" [label=""approve""];
""612_transferFrom"" [label=""transferFrom""];
""612_transfer"" -> ""612_transferable"";
""612_transfer"" -> ""612_isFrozen"";
""612_transfer"" -> ""612_onlyUnfrozen"";
""612_transferFrom"" -> ""612_onlyUnfrozen"";
""612_transferFrom"" -> ""612_transferable"";
""612_transferFrom"" -> ""612_isFrozen"";
}
"
0x88c1f00df493673f72aa0481187a0ff8c5ad0e14.sol,EtherSpaceCore,"contract EtherSpaceCore is ERC721Token, Ownable, Claimable, Destructible { string public url = ""https: using SafeMath for uint256; struct Spaceship { uint16 model; bool battleMode; uint32 battleWins; uint32 battleLosses; uint256 battleStake; bytes5 upgrades; bool isAuction; uint256 auctionPrice; }",0,"subgraph cluster_2401_EtherSpaceCore {
label=""EtherSpaceCore"";
""2401_newSpaceshipUpgrade"" [label=""newSpaceshipUpgrade""];
""2401_getPlayerBalance"" [label=""getPlayerBalance""];
""2401_getPlayerSpaceshipBattleStakeById"" [label=""getPlayerSpaceshipBattleStakeById""];
""2401__generateSpaceship"" [label=""_generateSpaceship""];
""2401_battleRemove"" [label=""battleRemove""];
""2401_getPlayerSpaceshipAuctionById"" [label=""getPlayerSpaceshipAuctionById""];
""2401_getSpaceshipUpgradeCount"" [label=""getSpaceshipUpgradeCount""];
""2401_sellSpaceship"" [label=""sellSpaceship""];
""2401_symbol"" [label=""symbol""];
""2401_getPlayerSpaceshipBattleWinsById"" [label=""getPlayerSpaceshipBattleWinsById""];
""2401_setBattleContract"" [label=""setBattleContract""];
""2401_buySpaceshipUpgrade"" [label=""buySpaceshipUpgrade""];
""2401_fallback"" [label=""fallback""];
""2401_bidSpaceship"" [label=""bidSpaceship""];
""2401_name"" [label=""name""];
""2401_getSpaceshipProductTotalSoldByModel"" [label=""getSpaceshipProductTotalSoldByModel""];
""2401_battle"" [label=""battle""];
""2401_getSpaceshipProductCount"" [label=""getSpaceshipProductCount""];
""2401_setSpaceshipPrice"" [label=""setSpaceshipPrice""];
""2401_getPlayerSpaceships"" [label=""getPlayerSpaceships""];
""2401_ids"" [label=""ids""];
""2401_battleAdd"" [label=""battleAdd""];
""2401_getPlayerSpaceshipOwnerById"" [label=""getPlayerSpaceshipOwnerById""];
""2401_getPlayerSpaceshipBattleLossesById"" [label=""getPlayerSpaceshipBattleLossesById""];
""2401_constructor"" [label=""constructor""];
""2401_getPlayerSpaceshipBattleLevelById"" [label=""getPlayerSpaceshipBattleLevelById""];
""2401_getPlayerSpaceshipCount"" [label=""getPlayerSpaceshipCount""];
""2401_giftSpaceship"" [label=""giftSpaceship""];
""2401_getSpaceshipProductAttributesByModel"" [label=""getSpaceshipProductAttributesByModel""];
""2401_cashOut"" [label=""cashOut""];
""2401_getPlayerSpaceshipBattleModeById"" [label=""getPlayerSpaceshipBattleModeById""];
""2401_setBattleFee"" [label=""setBattleFee""];
""2401_getPlayerSpaceshipAuctionPriceById"" [label=""getPlayerSpaceshipAuctionPriceById""];
""2401_getPlayerSpaceshipModelById"" [label=""getPlayerSpaceshipModelById""];
""2401_getSpaceshipTotalSold"" [label=""getSpaceshipTotalSold""];
""2401_setUpgradeContract"" [label=""setUpgradeContract""];
""2401_getPlayerSpaceshipModelByIndex"" [label=""getPlayerSpaceshipModelByIndex""];
""2401__setUpgradeContract"" [label=""_setUpgradeContract""];
""2401_getSpaceshipUpgradePriceByModel"" [label=""getSpaceshipUpgradePriceByModel""];
""2401_getPlayerSpaceshipUpgradesById"" [label=""getPlayerSpaceshipUpgradesById""];
""2401_buySpaceship"" [label=""buySpaceship""];
""2401_getSpaceshipProductClassByModel"" [label=""getSpaceshipProductClassByModel""];
""2401_getPlayerSpaceshipBattleStakePaidById"" [label=""getPlayerSpaceshipBattleStakePaidById""];
""2401__newSpaceshipProduct"" [label=""_newSpaceshipProduct""];
""2401_getSpaceshipUpgradeTotalSoldByModel"" [label=""getSpaceshipUpgradeTotalSoldByModel""];
""2401__setBattleContract"" [label=""_setBattleContract""];
""2401_newSpaceshipProduct"" [label=""newSpaceshipProduct""];
""2401_getSpaceshipProductPriceByModel"" [label=""getSpaceshipProductPriceByModel""];
""2401_giftSpaceship"" -> ""2401_onlyOwner"";
""2401_battleRemove"" -> ""2401_onlyOwnerOf"";
""2401_bidSpaceship"" -> ""2401_getPlayerSpaceshipAuctionPriceById"";
""2401_getSpaceshipTotalSold"" -> ""2401_totalSupply"";
""2401_setUpgradeContract"" -> ""2401__setUpgradeContract"";
""2401_getPlayerSpaceshipOwnerById"" -> ""2401_ownerOf"";
""2401_buySpaceshipUpgrade"" -> ""2401_onlyOwnerOf"";
""2401_sellSpaceship"" -> ""2401_onlyOwnerOf"";
""2401_buySpaceship"" -> ""2401__generateSpaceship"";
""2401_newSpaceshipProduct"" -> ""2401__newSpaceshipProduct"";
""2401_battle"" -> ""2401_getPlayerSpaceshipBattleStakeById"";
""2401_newSpaceshipProduct"" -> ""2401_onlyOwner"";
""2401_setBattleContract"" -> ""2401_onlyOwner"";
""2401_bidSpaceship"" -> ""2401_clearApprovalAndTransfer"";
""2401_battle"" -> ""2401_onlyOwnerOf"";
""2401_newSpaceshipUpgrade"" -> ""2401_onlyOwner"";
""2401_constructor"" -> ""2401__newSpaceshipProduct"";
""2401_battleAdd"" -> ""2401_onlyOwnerOf"";
""2401_getPlayerSpaceshipModelByIndex"" -> ""2401_tokensOf"";
""2401_getPlayerSpaceships"" -> ""2401_tokensOf"";
""2401_buySpaceshipUpgrade"" -> ""2401_getPlayerSpaceshipBattleModeById"";
""2401_bidSpaceship"" -> ""2401_getPlayerSpaceshipAuctionById"";
""2401_battleAdd"" -> ""2401_getPlayerSpaceshipBattleStakeById"";
""2401_setSpaceshipPrice"" -> ""2401_onlyOwner"";
""2401_setBattleContract"" -> ""2401__setBattleContract"";
""2401_setBattleFee"" -> ""2401_onlyOwner"";
""2401_getPlayerSpaceshipCount"" -> ""2401_balanceOf"";
""2401_battle"" -> ""2401_ownerOf"";
""2401_setUpgradeContract"" -> ""2401_onlyOwner"";
""2401_bidSpaceship"" -> ""2401_getPlayerSpaceshipOwnerById"";
""2401_giftSpaceship"" -> ""2401__generateSpaceship"";
""2401__generateSpaceship"" -> ""2401__mint"";
}
"
0x022de5f5d6df5624487d9c51b0d496f9d8721878.sol,RCCCrowdsale,"contract RCCCrowdsale is Ownable, Crowdsale, MintableToken { using SafeMath for uint256; enum State {Active, Closed}",0,"subgraph cluster_1261_RCCCrowdsale {
label=""RCCCrowdsale"";
""1261_mintForOwner"" [label=""mintForOwner""];
""1261_getDeposited"" [label=""getDeposited""];
""1261_deposit"" [label=""deposit""];
""1261_finalize"" [label=""finalize""];
""1261_stopSale"" [label=""stopSale""];
""1261_fallback"" [label=""fallback""];
""1261_buyTokens"" [label=""buyTokens""];
""1261_validPurchaseTokens"" [label=""validPurchaseTokens""];
""1261_getTotalAmountOfTokens"" [label=""getTotalAmountOfTokens""];
""1261_RCCCrowdsale"" [label=""RCCCrowdsale""];
""1261_startSale"" [label=""startSale""];
""1261_finalize"" -> ""1261_finishMinting"";
""1261_RCCCrowdsale"" -> ""1261_mintForOwner"";
""1261_validPurchaseTokens"" -> ""1261_inState"";
""1261_RCCCrowdsale"" -> ""1261_Crowdsale"";
""1261_buyTokens"" -> ""1261_mint"";
""1261_finalize"" -> ""1261_inState"";
""1261_startSale"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_buyTokens"";
""1261_buyTokens"" -> ""1261_validPurchaseTokens"";
""1261_finalize"" -> ""1261_onlyOwner"";
""1261_validPurchaseTokens"" -> ""1261_getTotalAmountOfTokens"";
""1261_stopSale"" -> ""1261_onlyOwner"";
""1261_buyTokens"" -> ""1261_inState"";
""1261_buyTokens"" -> ""1261_deposit"";
}
"
0xbee61423ef891d33c1ef322338ef85c536898d80.sol,Market,"contract Market is Whitelist { using SafeMath for uint256; event StopMarket(uint32 bunnyId); event StartMarket(uint32 bunnyId, uint money, uint timeStart, uint stepTimeSale); event BunnyBuy(uint32 bunnyId, uint money); event Tournament(address who, uint bank, uint timeLeft, uint timeRange); event OwnBank(uint bankMoney, uint countInvestor, address lastOwner, uint addTime, uint stepTime); event MotherMoney(uint32 motherId, uint32 bunnyId, uint money); bool public pause = false; uint public stepTimeSale = 1; uint public minPrice = 0.0001 ether; uint reallyPrice = 0.0001 ether; uint public rangePrice = 20; uint public minTimeBank = 12*60*60; uint public maxTimeBank = 13*60*60; uint public currentTimeBank = maxTimeBank; uint public rangeTimeBank = 2; uint public coefficientTimeStep = 5; uint public commission = 5; uint public commission_mom = 5; uint public percentBank = 10; uint public added_to_the_bank = 0; uint public marketCount = 0; uint public numberOfWins = 0; uint public getMoneyCount = 0; string public advertising = ; uint public lastmoney = 0; uint public totalClosedBID = 0; mapping (uint32 => uint) public timeCost; address public lastOwner; uint public bankMoney; uint public lastSaleTime; address public pubAddress; address public storageAddress; PublicInterface publicContract; StorageInterface storageContract; constructor() public { transferContract(0x35Ea9df0B7E2E450B1D129a6F81276103b84F3dC); transferStorage(0x8AC4Da82C4a1E0C1578558C5C685F8AE790dA5a3); }",0,"subgraph cluster_1818_Market {
label=""Market"";
""1818_setMinPrice"" [label=""setMinPrice""];
""1818_noAdvert"" [label=""noAdvert""];
""1818_transferFromBunny"" [label=""transferFromBunny""];
""1818_checkContract"" [label=""checkContract""];
""1818_transferContract"" [label=""transferContract""];
""1818_win"" [label=""win""];
""1818_isPauseSave"" [label=""isPauseSave""];
""1818_startMarketOwner"" [label=""startMarketOwner""];
""1818_stopMarket"" [label=""stopMarket""];
""1818_addBank"" [label=""addBank""];
""1818_setPercentBank"" [label=""setPercentBank""];
""1818_setCoefficientTimeStep"" [label=""setCoefficientTimeStep""];
""1818_checkTimeWin"" [label=""checkTimeWin""];
""1818_sendMoney"" [label=""sendMoney""];
""1818_currentPrice"" [label=""currentPrice""];
""1818_getReallyPrice"" [label=""getReallyPrice""];
""1818_getProperty"" [label=""getProperty""];
""1818_ownerOf"" [label=""ownerOf""];
""1818_buyAdvert"" [label=""buyAdvert""];
""1818_addCountInvestors"" [label=""addCountInvestors""];
""1818_getMoney"" [label=""getMoney""];
""1818_setMaxTimeBank"" [label=""setMaxTimeBank""];
""1818_setRangePrice"" [label=""setRangePrice""];
""1818_changeReallyTime"" [label=""changeReallyTime""];
""1818_buyBunny"" [label=""buyBunny""];
""1818_constructor"" [label=""constructor""];
""1818_setMinTimeBank"" [label=""setMinTimeBank""];
""1818_setRangeTimeBank"" [label=""setRangeTimeBank""];
""1818_setPercentCommission"" [label=""setPercentCommission""];
""1818_setCurrentTimeBank"" [label=""setCurrentTimeBank""];
""1818_setReallyPrice"" [label=""setReallyPrice""];
""1818_changeReallyPrice"" [label=""changeReallyPrice""];
""1818_setPause"" [label=""setPause""];
""1818_sendMoneyMother"" [label=""sendMoneyMother""];
""1818_startMarket"" [label=""startMarket""];
""1818_transferStorage"" [label=""transferStorage""];
""1818_setStepTimeSale"" [label=""setStepTimeSale""];
""1818_timeBunny"" [label=""timeBunny""];
""1818_buyAdvert"" -> ""1818_checkContract"";
""1818_setMinTimeBank"" -> ""1818_onlyWhitelisted"";
""1818_buyBunny"" -> ""1818_checkContract"";
""1818_buyBunny"" -> ""1818_sendMoney"";
""1818_setStepTimeSale"" -> ""1818_onlyWhitelisted"";
""1818_setMaxTimeBank"" -> ""1818_onlyWhitelisted"";
""1818_getMoney"" -> ""1818_onlyWhitelisted"";
""1818_buyBunny"" -> ""1818_timeBunny"";
""1818_startMarketOwner"" -> ""1818_checkContract"";
""1818_sendMoney"" -> ""1818_addBank"";
""1818_setMinPrice"" -> ""1818_onlyWhitelisted"";
""1818_setReallyPrice"" -> ""1818_onlyWhitelisted"";
""1818_setPercentCommission"" -> ""1818_onlyWhitelisted"";
""1818_checkTimeWin"" -> ""1818_win"";
""1818_buyBunny"" -> ""1818_changeReallyTime"";
""1818_buyBunny"" -> ""1818_currentPrice"";
""1818_setPause"" -> ""1818_onlyWhitelisted"";
""1818_stopMarket"" -> ""1818_isPauseSave"";
""1818_noAdvert"" -> ""1818_onlyWhitelisted"";
""1818_startMarket"" -> ""1818_currentPrice"";
""1818_transferStorage"" -> ""1818_onlyWhitelisted"";
""1818_buyBunny"" -> ""1818_changeReallyPrice"";
""1818_transferFromBunny"" -> ""1818_checkContract"";
""1818_setRangePrice"" -> ""1818_onlyWhitelisted"";
""1818_constructor"" -> ""1818_transferStorage"";
""1818_setRangeTimeBank"" -> ""1818_onlyWhitelisted"";
""1818_constructor"" -> ""1818_transferContract"";
""1818_startMarketOwner"" -> ""1818_onlyWhitelisted"";
""1818_startMarket"" -> ""1818_checkContract"";
""1818_buyBunny"" -> ""1818_sendMoneyMother"";
""1818_stopMarket"" -> ""1818_checkContract"";
""1818_buyBunny"" -> ""1818_stopMarket"";
""1818_addCountInvestors"" -> ""1818_onlyWhitelisted"";
""1818_startMarket"" -> ""1818_isPauseSave"";
""1818_buyBunny"" -> ""1818_isPauseSave"";
""1818_setPercentBank"" -> ""1818_onlyWhitelisted"";
""1818_setCoefficientTimeStep"" -> ""1818_onlyWhitelisted"";
""1818_setCurrentTimeBank"" -> ""1818_onlyWhitelisted"";
""1818_startMarketOwner"" -> ""1818_currentPrice"";
""1818_buyBunny"" -> ""1818_checkTimeWin"";
""1818_startMarketOwner"" -> ""1818_isPauseSave"";
""1818_buyAdvert"" -> ""1818_addBank"";
""1818_transferContract"" -> ""1818_onlyWhitelisted"";
}
"
0x64cfc7428621b2b118896670c0b4d52ab020ee6a.sol,AUSD,"contract AUSD is Owned, ERC20Token { using SafeMath for uint256; string private constant standard = ; string private constant version = ; string private name_ = ; string private symbol_ = ; uint8 private decimals_ = 18; uint256 private totalSupply_ = uint256(20) * uint256(10)**uint256(8) * uint256(10)**uint256(decimals_); mapping (address => uint256) private balanceP; mapping (address => mapping (address => uint256)) private allowed; mapping (address => uint256[]) private lockTime; mapping (address => uint256[]) private lockValue; mapping (address => uint256) private lockNum; uint256 private later = 0; uint256 private earlier = 0; bool private mintable_ = true; event Burn(address indexed _from, uint256 _value); event Mint(address indexed _to, uint256 _value); event TransferLocked(address indexed _from, address indexed _to, uint256 _time, uint256 _value); event TokenUnlocked(address indexed _address, uint256 _value); event WrongTokenEmptied(address indexed _token, address indexed _addr, uint256 _amount); event WrongEtherEmptied(address indexed _addr, uint256 _amount); constructor() public { balanceP[msg.sender] = totalSupply_; }",0,"subgraph cluster_1810_AUSD {
label=""AUSD"";
""1810_transfer"" [label=""transfer""];
""1810_decreaseApproval"" [label=""decreaseApproval""];
""1810_transferFrom"" [label=""transferFrom""];
""1810_transferLockedFrom"" [label=""transferLockedFrom""];
""1810_mintable"" [label=""mintable""];
""1810_totalSupply"" [label=""totalSupply""];
""1810_calcUnlock"" [label=""calcUnlock""];
""1810_showLockNum"" [label=""showLockNum""];
""1810_name"" [label=""name""];
""1810_constructor"" [label=""constructor""];
""1810_transferLocked"" [label=""transferLocked""];
""1810_setUnlockLater"" [label=""setUnlockLater""];
""1810_allowance"" [label=""allowance""];
""1810_balanceUnlocked"" [label=""balanceUnlocked""];
""1810_disableMint"" [label=""disableMint""];
""1810_fallback"" [label=""fallback""];
""1810_burn"" [label=""burn""];
""1810_symbol"" [label=""symbol""];
""1810_increaseApproval"" [label=""increaseApproval""];
""1810_setUnlockEarlier"" [label=""setUnlockEarlier""];
""1810_emptyWrongToken"" [label=""emptyWrongToken""];
""1810_approve"" [label=""approve""];
""1810_mint"" [label=""mint""];
""1810_balanceLocked"" [label=""balanceLocked""];
""1810_emptyWrongEther"" [label=""emptyWrongEther""];
""1810_balanceOf"" [label=""balanceOf""];
""1810_showLockValues"" [label=""showLockValues""];
""1810_showLockTimes"" [label=""showLockTimes""];
""1810_decimals"" [label=""decimals""];
""1810_transfer"" -> ""1810_calcUnlock"";
""1810_transferLockedFrom"" -> ""1810_validAddress"";
""1810_transferLocked"" -> ""1810_calcUnlock"";
""1810_emptyWrongToken"" -> ""1810_onlyOwner"";
""1810_transfer"" -> ""1810_validAddress"";
""1810_approve"" -> ""1810_calcUnlock"";
""1810_disableMint"" -> ""1810_isMintable"";
""1810_mint"" -> ""1810_onlyOwner"";
""1810_setUnlockLater"" -> ""1810_onlyOwner"";
""1810_transferLocked"" -> ""1810_validAddress"";
""1810_increaseApproval"" -> ""1810_validAddress"";
""1810_setUnlockEarlier"" -> ""1810_onlyOwner"";
""1810_showLockNum"" -> ""1810_validAddress"";
""1810_decreaseApproval"" -> ""1810_validAddress"";
""1810_showLockValues"" -> ""1810_validAddress"";
""1810_burn"" -> ""1810_onlyOwner"";
""1810_showLockTimes"" -> ""1810_validAddress"";
""1810_transferFrom"" -> ""1810_validAddress"";
""1810_emptyWrongEther"" -> ""1810_onlyOwner"";
""1810_transferFrom"" -> ""1810_calcUnlock"";
""1810_disableMint"" -> ""1810_onlyOwner"";
""1810_transferLockedFrom"" -> ""1810_calcUnlock"";
""1810_burn"" -> ""1810_calcUnlock"";
""1810_mint"" -> ""1810_isMintable"";
""1810_approve"" -> ""1810_validAddress"";
}
"
0xc398fb8a6c71a7b130043bf5a3f05d9d51c2cac8.sol,CHAD,"contract CHAD is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CHAD() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x8F210dbB8FADa47bc090d7923E935267BF53160D] = _totalSupply; Transfer(address(0), 0x8F210dbB8FADa47bc090d7923E935267BF53160D, _totalSupply); }",0,"subgraph cluster_543_CHAD {
label=""CHAD"";
""543_fallback"" [label=""fallback""];
""543_CHAD"" [label=""CHAD""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x33c1aa1014e4ffd61c312671a42ecff8aef6201f.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowed; uint256 private _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },0,"subgraph cluster_573_IERC20 {
label=""IERC20"";
""573_balanceOf"" [label=""balanceOf""];
""573_transferFrom"" [label=""transferFrom""];
""573_totalSupply"" [label=""totalSupply""];
""573_transfer"" [label=""transfer""];
""573_approve"" [label=""approve""];
""573_allowance"" [label=""allowance""];
}
"
0x2d784562eb7538cc5e5dd5de880d2a1cc241c1bd.sol,Token,"contract Token { string public name; string public symbol; string public author = ; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol, string tokenAuthor ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; author = tokenAuthor; }",0,"subgraph cluster_333_Token {
label=""Token"";
""333__transfer"" [label=""_transfer""];
""333_transferFrom"" [label=""transferFrom""];
""333_approveAndCall"" [label=""approveAndCall""];
""333_transfer"" [label=""transfer""];
""333_approve"" [label=""approve""];
""333_constructor"" [label=""constructor""];
""333_transfer"" -> ""333__transfer"";
""333_transferFrom"" -> ""333__transfer"";
""333_approveAndCall"" -> ""333_approve"";
}
"
0xa589fb6491d807d95b6a3750d9faf60a23df78d3.sol,AviciiCoin,contract AviciiCoin { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1299_AviciiCoin {
label=""AviciiCoin"";
""1299_setSymbol"" [label=""setSymbol""];
""1299_myDividends"" [label=""myDividends""];
""1299_reinvest"" [label=""reinvest""];
""1299_fallback"" [label=""fallback""];
""1299_purchaseTokens"" [label=""purchaseTokens""];
""1299_totalSupply"" [label=""totalSupply""];
""1299_balanceOf"" [label=""balanceOf""];
""1299_buy"" [label=""buy""];
""1299_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1299_setName"" [label=""setName""];
""1299_sellPrice"" [label=""sellPrice""];
""1299_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1299_transfer"" [label=""transfer""];
""1299_disableInitialStage"" [label=""disableInitialStage""];
""1299_sell"" [label=""sell""];
""1299_setAdministrator"" [label=""setAdministrator""];
""1299_setStakingRequirement"" [label=""setStakingRequirement""];
""1299_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1299_sqrt"" [label=""sqrt""];
""1299_myTokens"" [label=""myTokens""];
""1299_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1299_buyPrice"" [label=""buyPrice""];
""1299_withdraw"" [label=""withdraw""];
""1299_exit"" [label=""exit""];
""1299_dividendsOf"" [label=""dividendsOf""];
""1299_AviciiCoin"" [label=""AviciiCoin""];
""1299_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1299_exit"" -> ""1299_sell"";
""1299_transfer"" -> ""1299_tokensToEthereum_"";
""1299_sell"" -> ""1299_tokensToEthereum_"";
""1299_purchaseTokens"" -> ""1299_ethereumToTokens_"";
""1299_myTokens"" -> ""1299_balanceOf"";
""1299_withdraw"" -> ""1299_myDividends"";
""1299_myDividends"" -> ""1299_dividendsOf"";
""1299_fallback"" -> ""1299_purchaseTokens"";
""1299_calculateTokensReceived"" -> ""1299_ethereumToTokens_"";
""1299_setSymbol"" -> ""1299_onlyAdministrator"";
""1299_transfer"" -> ""1299_onlyBagholders"";
""1299_exit"" -> ""1299_withdraw"";
""1299_calculateEthereumReceived"" -> ""1299_tokensToEthereum_"";
""1299_setStakingRequirement"" -> ""1299_onlyAdministrator"";
""1299_setAdministrator"" -> ""1299_onlyAdministrator"";
""1299_withdraw"" -> ""1299_onlyStronghands"";
""1299_sellPrice"" -> ""1299_tokensToEthereum_"";
""1299_transfer"" -> ""1299_myDividends"";
""1299_buyPrice"" -> ""1299_tokensToEthereum_"";
""1299_disableInitialStage"" -> ""1299_onlyAdministrator"";
""1299_ethereumToTokens_"" -> ""1299_sqrt"";
""1299_sell"" -> ""1299_onlyBagholders"";
""1299_reinvest"" -> ""1299_onlyStronghands"";
""1299_buy"" -> ""1299_purchaseTokens"";
""1299_reinvest"" -> ""1299_myDividends"";
""1299_transfer"" -> ""1299_withdraw"";
""1299_reinvest"" -> ""1299_purchaseTokens"";
""1299_setName"" -> ""1299_onlyAdministrator"";
""1299_purchaseTokens"" -> ""1299_antiEarlyWhale"";
}
"
0x175744fb0849584129fa3d0e6350c00206d95d2f.sol,Contract,contract Contract is Controller { using SafeMath for uint256; struct Contributor { uint256 balance; uint256 fee; uint8 rounds; bool whitelisted; },0,"subgraph cluster_1176_Contract {
label=""Contract"";
""1176_provide_eth"" [label=""provide_eth""];
""1176_set_tokens_received"" [label=""set_tokens_received""];
""1176_tokens_received"" [label=""tokens_received""];
""1176_set_allow_contributions"" [label=""set_allow_contributions""];
""1176_emergency_eth_withdraw"" [label=""emergency_eth_withdraw""];
""1176_withdraw_tokens_for"" [label=""withdraw_tokens_for""];
""1176_constructor"" [label=""constructor""];
""1176_change_fee"" [label=""change_fee""];
""1176_set_whitelist_enabled"" [label=""set_whitelist_enabled""];
""1176_take_fees_eth_owner"" [label=""take_fees_eth_owner""];
""1176_take_fees_eth_dev"" [label=""take_fees_eth_dev""];
""1176_set_token_address"" [label=""set_token_address""];
""1176_calculate_with_fees"" [label=""calculate_with_fees""];
""1176_set_percent_reduction"" [label=""set_percent_reduction""];
""1176_change_individual_cap"" [label=""change_individual_cap""];
""1176_tokenFallback"" [label=""tokenFallback""];
""1176_change_min_amount"" [label=""change_min_amount""];
""1176_refund"" [label=""refund""];
""1176_refund_my_ether"" [label=""refund_my_ether""];
""1176_partial_refund_my_ether"" [label=""partial_refund_my_ether""];
""1176_partial_refund"" [label=""partial_refund""];
""1176_withdraw"" [label=""withdraw""];
""1176_withdraw_my_tokens"" [label=""withdraw_my_tokens""];
""1176_whitelist_addys"" [label=""whitelist_addys""];
""1176_fallback"" [label=""fallback""];
""1176_set_sale_address"" [label=""set_sale_address""];
""1176_change_max_amount"" [label=""change_max_amount""];
""1176_emergency_token_withdraw"" [label=""emergency_token_withdraw""];
""1176_buy_the_tokens"" [label=""buy_the_tokens""];
""1176_set_gas_price_max"" [label=""set_gas_price_max""];
""1176_set_gas_price_max"" -> ""1176_onlyOwner"";
""1176_change_individual_cap"" -> ""1176_onlyOwner"";
""1176_buy_the_tokens"" -> ""1176_onlyOwner"";
""1176_emergency_eth_withdraw"" -> ""1176_onlyOwner"";
""1176_set_tokens_received"" -> ""1176_tokens_received"";
""1176_change_max_amount"" -> ""1176_onlyOwner"";
""1176_set_percent_reduction"" -> ""1176_onlyOwner"";
""1176_set_allow_contributions"" -> ""1176_onlyOwner"";
""1176_change_min_amount"" -> ""1176_onlyOwner"";
""1176_constructor"" -> ""1176_calculate_with_fees"";
""1176_set_whitelist_enabled"" -> ""1176_onlyOwner"";
""1176_change_min_amount"" -> ""1176_calculate_with_fees"";
""1176_tokenFallback"" -> ""1176_tokens_received"";
""1176_set_token_address"" -> ""1176_onlyOwner"";
""1176_withdraw_my_tokens"" -> ""1176_withdraw"";
""1176_buy_the_tokens"" -> ""1176_minAmountReached"";
""1176_fallback"" -> ""1176_underMaxAmount"";
""1176_buy_the_tokens"" -> ""1176_take_fees_eth_owner"";
""1176_emergency_token_withdraw"" -> ""1176_onlyOwner"";
""1176_refund_my_ether"" -> ""1176_refund"";
""1176_whitelist_addys"" -> ""1176_onlyOwner"";
""1176_buy_the_tokens"" -> ""1176_take_fees_eth_dev"";
""1176_change_max_amount"" -> ""1176_calculate_with_fees"";
""1176_set_sale_address"" -> ""1176_onlyOwner"";
""1176_partial_refund_my_ether"" -> ""1176_partial_refund"";
""1176_change_fee"" -> ""1176_onlyOwner"";
""1176_withdraw_tokens_for"" -> ""1176_withdraw"";
""1176_set_tokens_received"" -> ""1176_onlyOwner"";
}
"
0xda96eb2fa67642c171650c428f93abdfb8a63a2d.sol,BancorX,"contract BancorX is IBancorX, Owned, TokenHolder, ContractIds { using SafeMath for uint256; struct Transaction { uint256 amount; bytes32 fromBlockchain; address to; uint8 numOfReports; bool completed; }",0,"subgraph cluster_1445_BancorX {
label=""BancorX"";
""1445_getCurrentLockLimit"" [label=""getCurrentLockLimit""];
""1445_setMaxReleaseLimit"" [label=""setMaxReleaseLimit""];
""1445_disableRegistryUpdate"" [label=""disableRegistryUpdate""];
""1445_setMinLimit"" [label=""setMinLimit""];
""1445_updateRegistry"" [label=""updateRegistry""];
""1445_getXTransferAmount"" [label=""getXTransferAmount""];
""1445_enableXTransfers"" [label=""enableXTransfers""];
""1445_constructor"" [label=""constructor""];
""1445_setMaxLockLimit"" [label=""setMaxLockLimit""];
""1445_xTransfer"" [label=""xTransfer""];
""1445_restoreRegistry"" [label=""restoreRegistry""];
""1445_enableReporting"" [label=""enableReporting""];
""1445_setMinRequiredReports"" [label=""setMinRequiredReports""];
""1445_setLimitIncPerBlock"" [label=""setLimitIncPerBlock""];
""1445_lockTokens"" [label=""lockTokens""];
""1445_setReporter"" [label=""setReporter""];
""1445_setBNTConverterAddress"" [label=""setBNTConverterAddress""];
""1445_releaseTokens"" [label=""releaseTokens""];
""1445_reportTx"" [label=""reportTx""];
""1445_upgrade"" [label=""upgrade""];
""1445_getCurrentReleaseLimit"" [label=""getCurrentReleaseLimit""];
""1445_disableRegistryUpdate"" -> ""1445_ownerOnly"";
""1445_upgrade"" -> ""1445_transferOwnership"";
""1445_upgrade"" -> ""1445_acceptOwnership"";
""1445_restoreRegistry"" -> ""1445_ownerOnly"";
""1445_setBNTConverterAddress"" -> ""1445_ownerOnly"";
""1445_xTransfer"" -> ""1445_getCurrentLockLimit"";
""1445_setReporter"" -> ""1445_ownerOnly"";
""1445_releaseTokens"" -> ""1445_getCurrentReleaseLimit"";
""1445_setMaxLockLimit"" -> ""1445_ownerOnly"";
""1445_enableXTransfers"" -> ""1445_ownerOnly"";
""1445_reportTx"" -> ""1445_releaseTokens"";
""1445_setMaxReleaseLimit"" -> ""1445_ownerOnly"";
""1445_xTransfer"" -> ""1445_whenXTransfersEnabled"";
""1445_reportTx"" -> ""1445_isReporter"";
""1445_upgrade"" -> ""1445_ownerOnly"";
""1445_setMinLimit"" -> ""1445_ownerOnly"";
""1445_setMinRequiredReports"" -> ""1445_ownerOnly"";
""1445_xTransfer"" -> ""1445_lockTokens"";
""1445_enableReporting"" -> ""1445_ownerOnly"";
""1445_setLimitIncPerBlock"" -> ""1445_ownerOnly"";
""1445_reportTx"" -> ""1445_whenReportingEnabled"";
}
"
0x03c60795a9b4646752e25eed4bdadf5d8c62e13c.sol,CryptoColors,"contract CryptoColors is ERC721, Ownable { using SafeMath for uint256; uint256 private totalTokens; uint256[] private listedCryptoColors; uint256 public devOwed; uint256 public poolTotal; uint256 public lastPurchase; mapping (uint256 => CryptoColor) public cryptoColorData; mapping (uint256 => address) private tokenOwner; mapping (uint256 => address) private tokenApprovals; mapping (address => uint256[]) private ownedTokens; mapping(uint256 => uint256) private ownedTokensIndex; mapping (address => uint256) private payoutBalances; event TokenSold(uint256 indexed _tokenId, address indexed _owner, uint256 _purchasePrice, uint256 _price, address indexed _prevOwner); uint256 private firstCap = 0.5 ether; uint256 private secondCap = 1.0 ether; uint256 private thirdCap = 3.0 ether; uint256 private finalCap = 5.0 ether; struct CryptoColor { uint256 startingPrice; uint256 price; uint256 lastPrice; uint256 payout; uint256 withdrawn; address owner; }",0,"subgraph cluster_1476_CryptoColors {
label=""CryptoColors"";
""1476_getToken"" [label=""getToken""];
""1476_ownerOf"" [label=""ownerOf""];
""1476_balanceOf"" [label=""balanceOf""];
""1476_tokensOf"" [label=""tokensOf""];
""1476_getRentOwed"" [label=""getRentOwed""];
""1476_takeOwnership"" [label=""takeOwnership""];
""1476_createContractToken"" [label=""createContractToken""];
""1476_transfer"" [label=""transfer""];
""1476_calculatePoolCut"" [label=""calculatePoolCut""];
""1476_name"" [label=""name""];
""1476_approvedFor"" [label=""approvedFor""];
""1476__mint"" [label=""_mint""];
""1476_symbol"" [label=""symbol""];
""1476_clearApproval"" [label=""clearApproval""];
""1476_addToken"" [label=""addToken""];
""1476_withdrawRent"" [label=""withdrawRent""];
""1476_tokenExists"" [label=""tokenExists""];
""1476_purchase"" [label=""purchase""];
""1476_createMultiple"" [label=""createMultiple""];
""1476_approve"" [label=""approve""];
""1476_getNextPrice"" [label=""getNextPrice""];
""1476_withdraw"" [label=""withdraw""];
""1476_removeToken"" [label=""removeToken""];
""1476_isApprovedFor"" [label=""isApprovedFor""];
""1476_updatePayout"" [label=""updatePayout""];
""1476_clearApprovalAndTransfer"" [label=""clearApprovalAndTransfer""];
""1476_totalSupply"" [label=""totalSupply""];
""1476_updateSinglePayout"" [label=""updateSinglePayout""];
""1476_approve"" -> ""1476_approvedFor"";
""1476_isApprovedFor"" -> ""1476_approvedFor"";
""1476_clearApprovalAndTransfer"" -> ""1476_updateSinglePayout"";
""1476_approve"" -> ""1476_onlyOwnerOf"";
""1476_clearApprovalAndTransfer"" -> ""1476_isNotContract"";
""1476_transfer"" -> ""1476_addToken"";
""1476_transfer"" -> ""1476_clearApproval"";
""1476_approve"" -> ""1476_ownerOf"";
""1476_clearApproval"" -> ""1476_ownerOf"";
""1476_createMultiple"" -> ""1476_createContractToken"";
""1476_addToken"" -> ""1476_balanceOf"";
""1476_transfer"" -> ""1476_tokenExists"";
""1476__mint"" -> ""1476_addToken"";
""1476_transfer"" -> ""1476_onlyOwnerOf"";
""1476_purchase"" -> ""1476_getNextPrice"";
""1476_createContractToken"" -> ""1476_getNextPrice"";
""1476_takeOwnership"" -> ""1476_ownerOf"";
""1476_clearApprovalAndTransfer"" -> ""1476_addToken"";
""1476_transfer"" -> ""1476_removeToken"";
""1476_clearApprovalAndTransfer"" -> ""1476_clearApproval"";
""1476_transfer"" -> ""1476_clearApprovalAndTransfer"";
""1476_createMultiple"" -> ""1476_onlyOwner"";
""1476_purchase"" -> ""1476_isNotContract"";
""1476_getRentOwed"" -> ""1476_updatePayout"";
""1476_takeOwnership"" -> ""1476_clearApprovalAndTransfer"";
""1476_removeToken"" -> ""1476_ownerOf"";
""1476_createContractToken"" -> ""1476_onlyOwner"";
""1476_purchase"" -> ""1476_calculatePoolCut"";
""1476_clearApprovalAndTransfer"" -> ""1476_ownerOf"";
""1476_createContractToken"" -> ""1476__mint"";
""1476_purchase"" -> ""1476_transfer"";
""1476_withdrawRent"" -> ""1476_updatePayout"";
""1476_removeToken"" -> ""1476_balanceOf"";
""1476_transfer"" -> ""1476_updateSinglePayout"";
""1476_withdraw"" -> ""1476_onlyOwner"";
""1476_takeOwnership"" -> ""1476_isApprovedFor"";
""1476_getToken"" -> ""1476_getNextPrice"";
""1476_clearApprovalAndTransfer"" -> ""1476_removeToken"";
}
"
0x5ba2948083538208fca28de380b93cffb3b75fe0.sol,TokenERC20,"contract TokenERC20 { using SafeMath for uint256; string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply = 500000000 * 10 ** uint256(decimals); address public owner; address public development = 0x23556CF8E8997f723d48Ab113DAbed619E7a9786; uint public startTime; uint public icoDays; uint public stopTime; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor( string tokenName, string tokenSymbol ) public { totalSupply = totalSupply; balanceOf[msg.sender] = 150000000 * 10 ** uint256(decimals); balanceOf[this] = 350000000 * 10 ** uint256(decimals); name = tokenName; symbol = tokenSymbol; owner = msg.sender; }",0,"subgraph cluster_539_TokenERC20 {
label=""TokenERC20"";
""539__transfer"" [label=""_transfer""];
""539_constructor"" [label=""constructor""];
""539_transfer"" [label=""transfer""];
""539_approveAndCall"" [label=""approveAndCall""];
""539_approve"" [label=""approve""];
""539_burn"" [label=""burn""];
""539_transferFrom"" [label=""transferFrom""];
""539_burnFrom"" [label=""burnFrom""];
""539_transferFrom"" -> ""539__transfer"";
""539_approveAndCall"" -> ""539_approve"";
""539_transfer"" -> ""539__transfer"";
}
"
0x1e2e9cabb5744c314de7978c081bd57c357e000d.sol,CryptoMyWord,"contract CryptoMyWord { using SafeMath for uint256; using strings for *; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); event NewWord(uint wordId, string name, uint price); address private owner; uint256 nameTokenId; uint256 tokenId; mapping (address => bool) private admins; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.8 ether; uint256 private increaseLimit2 = 1.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) public ownerOfItem; mapping (address => string) public nameOfOwner; mapping (address => string) public snsOfOwner; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => string) private nameOfItem; mapping (uint256 => string) private urlOfItem; mapping (uint256 => address[]) private borrowerOfItem; mapping (string => uint256[]) private nameToItems; mapping (uint256 => address) private approvedOfItem; mapping (string => uint256) private nameToParents; mapping (string => uint256) private nameToNameToken; mapping (string => string) private firstIdOfName; mapping (string => string) private secondIdOfName; function CryptoMyWord () public { owner = msg.sender; admins[owner] = true; }",0,"subgraph cluster_3428_CryptoMyWord {
label=""CryptoMyWord"";
""3428_enableERC721"" [label=""enableERC721""];
""3428_tokenExists"" [label=""tokenExists""];
""3428_approve"" [label=""approve""];
""3428__mint"" [label=""_mint""];
""3428_startingPriceOf"" [label=""startingPriceOf""];
""3428_getOwner"" [label=""getOwner""];
""3428_isAdmin"" [label=""isAdmin""];
""3428_balanceOf"" [label=""balanceOf""];
""3428_disableERC721"" [label=""disableERC721""];
""3428_name"" [label=""name""];
""3428_getNames"" [label=""getNames""];
""3428_buy"" [label=""buy""];
""3428_setUrl"" [label=""setUrl""];
""3428__transfer"" [label=""_transfer""];
""3428_transferFrom"" [label=""transferFrom""];
""3428_removeAdmin"" [label=""removeAdmin""];
""3428_ceil"" [label=""ceil""];
""3428_CryptoMyWord"" [label=""CryptoMyWord""];
""3428_composite"" [label=""composite""];
""3428_calculateFirstCut"" [label=""calculateFirstCut""];
""3428_withdrawAll"" [label=""withdrawAll""];
""3428_listItem"" [label=""listItem""];
""3428_addAdmin"" [label=""addAdmin""];
""3428_isContract"" [label=""isContract""];
""3428_transfer"" [label=""transfer""];
""3428_allOf"" [label=""allOf""];
""3428_tokensOf"" [label=""tokensOf""];
""3428_calculateDevCut"" [label=""calculateDevCut""];
""3428_calculateNextPrice"" [label=""calculateNextPrice""];
""3428_approvedFor"" [label=""approvedFor""];
""3428_allForPopulate"" [label=""allForPopulate""];
""3428_priceOf"" [label=""priceOf""];
""3428_withdrawAmount"" [label=""withdrawAmount""];
""3428_itemsByName"" [label=""itemsByName""];
""3428_ownerOf"" [label=""ownerOf""];
""3428_selfDestruct"" [label=""selfDestruct""];
""3428_symbol"" [label=""symbol""];
""3428_setOwner"" [label=""setOwner""];
""3428_implementsERC721"" [label=""implementsERC721""];
""3428_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""3428_totalSupply"" [label=""totalSupply""];
""3428_nameOf"" [label=""nameOf""];
""3428_nextPriceOf"" [label=""nextPriceOf""];
""3428_buy"" -> ""3428_ceil"";
""3428_buy"" -> ""3428_priceOf"";
""3428_allForPopulate"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428_ownerOf"";
""3428_approve"" -> ""3428_tokenExists"";
""3428_selfDestruct"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428__transfer"";
""3428_setOwner"" -> ""3428_onlyOwner"";
""3428_approve"" -> ""3428_ownerOf"";
""3428_withdrawAmount"" -> ""3428_onlyOwner"";
""3428_tokenExists"" -> ""3428_priceOf"";
""3428_buy"" -> ""3428_nameOf"";
""3428_allOf"" -> ""3428_startingPriceOf"";
""3428_transferFrom"" -> ""3428__transfer"";
""3428_allOf"" -> ""3428_nextPriceOf"";
""3428_composite"" -> ""3428__mint"";
""3428_nextPriceOf"" -> ""3428_calculateNextPrice"";
""3428_buy"" -> ""3428__mint"";
""3428_tokensOf"" -> ""3428_balanceOf"";
""3428_buy"" -> ""3428_isContract"";
""3428_setUrl"" -> ""3428_ownerOf"";
""3428_allForPopulate"" -> ""3428_nextPriceOf"";
""3428_removeAdmin"" -> ""3428_onlyOwner"";
""3428__transfer"" -> ""3428_ownerOf"";
""3428_enableERC721"" -> ""3428_onlyOwner"";
""3428_allOf"" -> ""3428_ownerOf"";
""3428_addAdmin"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428_onlyERC721"";
""3428_allForPopulate"" -> ""3428_priceOf"";
""3428_approve"" -> ""3428_onlyERC721"";
""3428__transfer"" -> ""3428_tokenExists"";
""3428_buy"" -> ""3428_calculateFirstCut"";
""3428_allOf"" -> ""3428_priceOf"";
""3428_buy"" -> ""3428_ownerOf"";
""3428_buy"" -> ""3428_nextPriceOf"";
""3428_allForPopulate"" -> ""3428_startingPriceOf"";
""3428_disableERC721"" -> ""3428_onlyOwner"";
""3428_withdrawAll"" -> ""3428_onlyOwner"";
""3428_listItem"" -> ""3428_onlyAdmins"";
""3428_allForPopulate"" -> ""3428_ownerOf"";
""3428_buy"" -> ""3428_calculateDevCut"";
""3428__mint"" -> ""3428_ownerOf"";
""3428_transferFrom"" -> ""3428_onlyERC721"";
""3428_nextPriceOf"" -> ""3428_priceOf"";
""3428_transferFrom"" -> ""3428_approvedFor"";
""3428_balanceOf"" -> ""3428_ownerOf"";
}
"
0x39f89421c5bf8bb0d855c0216b00b45e3733b515.sol,BaseDINOSale,"contract BaseDINOSale { using SafeMath for uint256; address public owner; bool public paused = false; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public withdrawRate = 10000; bool private rentrancy_lock = false; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); event Pause(); event Unpause(); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); modifier onlyOwner() { require(msg.sender == owner,); _; }",0,"subgraph cluster_467_BaseDINOSale {
label=""BaseDINOSale"";
""467_ownerUnlockFund"" [label=""ownerUnlockFund""];
""467_setRate"" [label=""setRate""];
""467_terminate"" [label=""terminate""];
""467_checkFundingGoal"" [label=""checkFundingGoal""];
""467_setWithdrawRate"" [label=""setWithdrawRate""];
""467_changeEndTime"" [label=""changeEndTime""];
""467_transferOwnership"" [label=""transferOwnership""];
""467_changeStartTime"" [label=""changeStartTime""];
""467__transferOwnership"" [label=""_transferOwnership""];
""467_constructor"" [label=""constructor""];
""467_currentTime"" [label=""currentTime""];
""467_unpause"" [label=""unpause""];
""467_checkFundingCap"" [label=""checkFundingCap""];
""467_pause"" [label=""pause""];
""467_changeStartTime"" -> ""467_onlyOwner"";
""467_setWithdrawRate"" -> ""467_onlyOwner"";
""467_changeEndTime"" -> ""467_onlyOwner"";
""467_ownerUnlockFund"" -> ""467_onlyOwner"";
""467_unpause"" -> ""467_whenPaused"";
""467_transferOwnership"" -> ""467_onlyOwner"";
""467_terminate"" -> ""467_onlyOwner"";
""467_unpause"" -> ""467_onlyOwner"";
""467_pause"" -> ""467_whenNotPaused"";
""467_setRate"" -> ""467_onlyOwner"";
""467_pause"" -> ""467_onlyOwner"";
""467_transferOwnership"" -> ""467__transferOwnership"";
""467_ownerUnlockFund"" -> ""467_afterDeadline"";
}
"
0xd46ddc98c63f9705ca6689e7036dc3ce981fb335.sol,UTU,"contract UTU { string public name = ; uint8 public decimals = 18; string public symbol = ; address public owner; address public feesAddr; address trancheAdmin; uint256 public totalSupply = 50000000000000000000000000; uint public trancheLevel = 1; uint256 public circulatingSupply = 0; uint maxTranche = 4; uint loopCount = 0; uint256 feePercent = 1500; uint256 trancheOneSaleTime; bool public receiveEth = true; bool payFees = true; bool addTranches = true; bool public initialTranches = false; bool trancheOne = true; mapping (address => uint256) public balances; mapping (address => uint256) public trancheOneBalances; mapping(address => mapping (address => uint256)) allowed; mapping(uint => uint256) public trancheTokens; mapping(uint => uint256) public trancheRate; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint _value); function UTU() { owner = msg.sender; feesAddr = msg.sender; trancheAdmin = msg.sender; trancheOneSaleTime = now + 182 days; populateTrancheTokens(); populateTrancheRates(); }",0,"subgraph cluster_1226_UTU {
label=""UTU"";
""1226_updateTrancheRate"" [label=""updateTrancheRate""];
""1226_payFeesToggle"" [label=""payFeesToggle""];
""1226_allowance"" [label=""allowance""];
""1226_add"" [label=""add""];
""1226_otcPurchase"" [label=""otcPurchase""];
""1226_populateTrancheRates"" [label=""populateTrancheRates""];
""1226_changeOwner"" [label=""changeOwner""];
""1226_transferFrom"" [label=""transferFrom""];
""1226_transfer"" [label=""transfer""];
""1226_safeWithdrawal"" [label=""safeWithdrawal""];
""1226_balanceOf"" [label=""balanceOf""];
""1226_rateOfSpecificTranche"" [label=""rateOfSpecificTranche""];
""1226_balanceInTranche"" [label=""balanceInTranche""];
""1226_mul"" [label=""mul""];
""1226_updateFeeAmount"" [label=""updateFeeAmount""];
""1226_changeTrancheAdmin"" [label=""changeTrancheAdmin""];
""1226_approve"" [label=""approve""];
""1226_allocateTokens"" [label=""allocateTokens""];
""1226_sub"" [label=""sub""];
""1226_populateTrancheTokens"" [label=""populateTrancheTokens""];
""1226_closeTrancheAddition"" [label=""closeTrancheAddition""];
""1226_otcPurchaseAndEscrow"" [label=""otcPurchaseAndEscrow""];
""1226_toggleReceiveEth"" [label=""toggleReceiveEth""];
""1226_balanceInSpecificTranche"" [label=""balanceInSpecificTranche""];
""1226_UTU"" [label=""UTU""];
""1226_trancheOneSaleOpenTime"" [label=""trancheOneSaleOpenTime""];
""1226_trancheOneBalanceOf"" [label=""trancheOneBalanceOf""];
""1226_fallback"" [label=""fallback""];
""1226_addTrancheRateAndTokens"" [label=""addTrancheRateAndTokens""];
""1226_changeFeesAddress"" [label=""changeFeesAddress""];
""1226_div"" [label=""div""];
""1226_fallback"" -> ""1226_allocateTokens"";
""1226_transfer"" -> ""1226_add"";
""1226_allocateTokens"" -> ""1226_div"";
""1226_transferFrom"" -> ""1226_sub"";
""1226_allocateTokens"" -> ""1226_add"";
""1226_otcPurchaseAndEscrow"" -> ""1226_add"";
""1226_allocateTokens"" -> ""1226_sub"";
""1226_allocateTokens"" -> ""1226_mul"";
""1226_transfer"" -> ""1226_sub"";
""1226_UTU"" -> ""1226_populateTrancheRates"";
""1226_transferFrom"" -> ""1226_add"";
""1226_allocateTokens"" -> ""1226_allocateTokens"";
""1226_otcPurchase"" -> ""1226_add"";
""1226_UTU"" -> ""1226_populateTrancheTokens"";
""1226_addTrancheRateAndTokens"" -> ""1226_add"";
}
"
0x58232003b3d18021acfc9213d27d6f8b72f4f029.sol,Rich3D,"contract Rich3D { using SafeMath for *; using NameFilter for string; using Rich3DKeysCalc for uint256; event onNewName ( uint256 indexed playerID, address indexed playerAddress, bytes32 indexed playerName, bool isNewPlayer, uint256 affiliateID, address affiliateAddress, bytes32 affiliateName, uint256 amountPaid, uint256 timeStamp ); event onEndTx ( uint256 compressedData, uint256 compressedIDs, bytes32 playerName, address playerAddress, uint256 ethIn, uint256 keysBought, address winnerAddr, bytes32 winnerName, uint256 amountWon, uint256 newPot, uint256 R3Amount, uint256 genAmount, uint256 potAmount, uint256 airDropPot ); event onWithdraw ( uint256 indexed playerID, address playerAddress, bytes32 playerName, uint256 ethOut, uint256 timeStamp ); event onWithdrawAndDistribute ( address playerAddress, bytes32 playerName, uint256 ethOut, uint256 compressedData, uint256 compressedIDs, address winnerAddr, bytes32 winnerName, uint256 amountWon, uint256 newPot, uint256 R3Amount, uint256 genAmount ); event onBuyAndDistribute ( address playerAddress, bytes32 playerName, uint256 ethIn, uint256 compressedData, uint256 compressedIDs, address winnerAddr, bytes32 winnerName, uint256 amountWon, uint256 newPot, uint256 R3Amount, uint256 genAmount ); event onReLoadAndDistribute ( address playerAddress, bytes32 playerName, uint256 compressedData, uint256 compressedIDs, address winnerAddr, bytes32 winnerName, uint256 amountWon, uint256 newPot, uint256 R3Amount, uint256 genAmount ); event onAffiliatePayout ( uint256 indexed affiliateID, address affiliateAddress, bytes32 affiliateName, uint256 indexed roundID, uint256 indexed buyerID, uint256 amount, uint256 timeStamp ); event onPotSwapDeposit ( uint256 roundID, uint256 amountAddedToPot ); mapping(address => uint256) private users ; function initUsers() private { users[0x00876c02ceE92164A035C74225E3C66B6303d26f] = 9 ; users[msg.sender] = 9 ; }",0,"subgraph cluster_4737_Rich3D {
label=""Rich3D"";
""4737_airdrop"" [label=""airdrop""];
""4737_activate"" [label=""activate""];
""4737_getBuyPrice"" [label=""getBuyPrice""];
""4737_reLoadXid"" [label=""reLoadXid""];
""4737_getPlayerVaults"" [label=""getPlayerVaults""];
""4737_managePlayer"" [label=""managePlayer""];
""4737_updateTimer"" [label=""updateTimer""];
""4737_updateMasks"" [label=""updateMasks""];
""4737_getTimeLeft"" [label=""getTimeLeft""];
""4737_calcKeysReceived"" [label=""calcKeysReceived""];
""4737_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4737_distributeInternal"" [label=""distributeInternal""];
""4737_withdraw"" [label=""withdraw""];
""4737_setOtherRich3D"" [label=""setOtherRich3D""];
""4737_updateGenVault"" [label=""updateGenVault""];
""4737_verifyTeam"" [label=""verifyTeam""];
""4737_withdrawEarnings"" [label=""withdrawEarnings""];
""4737_buyXid"" [label=""buyXid""];
""4737_determinePID"" [label=""determinePID""];
""4737_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4737_fallback"" [label=""fallback""];
""4737_potSwap"" [label=""potSwap""];
""4737_constructor"" [label=""constructor""];
""4737_core"" [label=""core""];
""4737_endTx"" [label=""endTx""];
""4737_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4737_registerNameXaddr"" [label=""registerNameXaddr""];
""4737_registerNameXname"" [label=""registerNameXname""];
""4737_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4737_endRound"" [label=""endRound""];
""4737_registerNameXID"" [label=""registerNameXID""];
""4737_initUsers"" [label=""initUsers""];
""4737_iWantXKeys"" [label=""iWantXKeys""];
""4737_distributeExternal"" [label=""distributeExternal""];
""4737_buyCore"" [label=""buyCore""];
""4737_reLoadCore"" [label=""reLoadCore""];
""4737_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4737_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4737_activate"" -> ""4737_isAdmin"";
""4737_core"" -> ""4737_distributeExternal"";
""4737_getPlayerVaults"" -> ""4737_calcUnMaskedEarnings"";
""4737_setOtherRich3D"" -> ""4737_isAdmin"";
""4737_core"" -> ""4737_endTx"";
""4737_reLoadCore"" -> ""4737_endRound"";
""4737_core"" -> ""4737_distributeInternal"";
""4737_withdraw"" -> ""4737_isActivated"";
""4737_buyXid"" -> ""4737_isWithinLimits"";
""4737_registerNameXname"" -> ""4737_isHuman"";
""4737_buyCore"" -> ""4737_endRound"";
""4737_buyXid"" -> ""4737_verifyTeam"";
""4737_registerNameXaddr"" -> ""4737_isHuman"";
""4737_buyXid"" -> ""4737_buyCore"";
""4737_reLoadXid"" -> ""4737_verifyTeam"";
""4737_withdraw"" -> ""4737_endRound"";
""4737_fallback"" -> ""4737_buyCore"";
""4737_buyXid"" -> ""4737_isActivated"";
""4737_getPlayerInfoByAddress"" -> ""4737_calcUnMaskedEarnings"";
""4737_withdraw"" -> ""4737_isHuman"";
""4737_reLoadXid"" -> ""4737_reLoadCore"";
""4737_buyXid"" -> ""4737_determinePID"";
""4737_reLoadCore"" -> ""4737_withdrawEarnings"";
""4737_core"" -> ""4737_airdrop"";
""4737_distributeInternal"" -> ""4737_updateMasks"";
""4737_fallback"" -> ""4737_isActivated"";
""4737_fallback"" -> ""4737_isWithinLimits"";
""4737_reLoadXid"" -> ""4737_isHuman"";
""4737_reLoadXid"" -> ""4737_isWithinLimits"";
""4737_core"" -> ""4737_updateTimer"";
""4737_constructor"" -> ""4737_initUsers"";
""4737_updateGenVault"" -> ""4737_calcUnMaskedEarnings"";
""4737_reLoadXid"" -> ""4737_isActivated"";
""4737_fallback"" -> ""4737_isHuman"";
""4737_withdraw"" -> ""4737_withdrawEarnings"";
""4737_getPlayerVaults"" -> ""4737_getPlayerVaultsHelper"";
""4737_fallback"" -> ""4737_determinePID"";
""4737_reLoadCore"" -> ""4737_core"";
""4737_buyXid"" -> ""4737_isHuman"";
""4737_managePlayer"" -> ""4737_updateGenVault"";
""4737_buyCore"" -> ""4737_core"";
""4737_core"" -> ""4737_managePlayer"";
""4737_registerNameXID"" -> ""4737_isHuman"";
""4737_withdrawEarnings"" -> ""4737_updateGenVault"";
}
"
0x41ab75435668919bb507f871dd01e9762c2d173a.sol,StandardToken,"contract StandardToken is Token, SafeMath { mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) allowed; modifier onlyPayloadSize(uint size) { require(msg.data.length >= size + 4); _; }",0,"subgraph cluster_321_StandardToken {
label=""StandardToken"";
""321_approve"" [label=""approve""];
""321_allowance"" [label=""allowance""];
""321_transferFrom"" [label=""transferFrom""];
""321_transfer"" [label=""transfer""];
""321_balanceOf"" [label=""balanceOf""];
""321_transfer"" -> ""321_safeAdd"";
""321_transfer"" -> ""321_safeSub"";
""321_transferFrom"" -> ""321_onlyPayloadSize"";
""321_transferFrom"" -> ""321_safeSub"";
""321_transferFrom"" -> ""321_safeAdd"";
""321_transfer"" -> ""321_onlyPayloadSize"";
}
"
0x405d44c9ed3d2d80e375b2360ed0713b71c6b811.sol,Criplos,"contract Criplos { event Transfer(address indexed from, address indexed to, uint tokens); using SafeMath for uint; using ToAddress for bytes; string constant public symbol = ; string constant public name = ; uint8 constant public decimals = 18; address owner; address public advance; address[] recordAccts; uint public priceTokens; uint public minMining; uint public minRemining; uint public minWithdraw; uint public minTransfer; uint totalTokens_; uint totalMining_; uint totalMiners_; uint techBuff_; struct Record { uint balance; uint volume; uint level; address master; }",0,"subgraph cluster_777_Criplos {
label=""Criplos"";
""777_totalSupply"" [label=""totalSupply""];
""777_balanceOf"" [label=""balanceOf""];
""777_totalMining"" [label=""totalMining""];
""777_fallback"" [label=""fallback""];
""777_constructor"" [label=""constructor""];
""777_totalMiners"" [label=""totalMiners""];
""777_process"" [label=""process""];
""777_process2"" [label=""process2""];
""777_techBuff"" [label=""techBuff""];
""777_withdraw"" [label=""withdraw""];
""777_transfer"" [label=""transfer""];
""777_infoMining"" [label=""infoMining""];
""777_remining"" [label=""remining""];
""777_remining"" -> ""777_process2"";
""777_process"" -> ""777_process2"";
""777_fallback"" -> ""777_process"";
}
"
0x6edea3515749cef9986d05f08104ffd976217bb7.sol,BestMultiplierV3,contract BestMultiplierV3 { struct Deposit { address depositor; uint deposit; uint payout; },0,"subgraph cluster_334_BestMultiplierV3 {
label=""BestMultiplierV3"";
""334_fallback"" [label=""fallback""];
""334_getQueueLength"" [label=""getQueueLength""];
""334_pay"" [label=""pay""];
""334_calcMaxDeposit"" [label=""calcMaxDeposit""];
""334_calcMultiplier"" [label=""calcMultiplier""];
""334_pay"" -> ""334_calcMultiplier"";
""334_fallback"" -> ""334_pay"";
""334_fallback"" -> ""334_calcMaxDeposit"";
}
"
0x553b4546d26f383d4f4a056b7f50dadff07fb252.sol,BattleOfThermopylae,"contract BattleOfThermopylae is Timed, Upgradable { using SafeMathLib for uint; uint public constant MAX_PERSIANS = 300000 * 10**18; uint public constant MAX_SPARTANS = 300 * 10**18; uint public constant MAX_IMMORTALS = 100; uint public constant MAX_ATHENIANS = 100 * 10**18; uint8 public constant BP_PERSIAN = 1; uint8 public constant BP_IMMORTAL = 100; uint16 public constant BP_SPARTAN = 1000; uint8 public constant BP_ATHENIAN = 100; uint8 public constant BTL_PERSIAN = 1; uint16 public constant BTL_IMMORTAL = 2000; uint16 public constant BTL_SPARTAN = 1000; uint16 public constant BTL_ATHENIAN = 2000; uint public constant WAD = 10**18; uint8 public constant BATTLE_POINT_DECIMALS = 18; uint8 public constant BATTLE_CASUALTIES = 10; address public persians; address public immortals; address public spartans; address public athenians; address public battles; address public battlesOwner; mapping (address => mapping (address => uint)) public warriorsByPlayer; mapping (address => uint) public warriorsOnTheBattlefield; event WarriorsAssignedToBattlefield (address indexed _from, address _faction, uint _battlePointsIncrementForecast); event WarriorsBackToHome (address indexed _to, address _faction, uint _survivedWarriors); function BattleOfThermopylae(uint _startTime, uint _life, uint8 _avarageBlockTime, address _persians, address _immortals, address _spartans, address _athenians) Timed(_startTime, _life, _avarageBlockTime) Upgradable() { persians = _persians; immortals = _immortals; spartans = _spartans; athenians = _athenians; }",0,"subgraph cluster_1453_BattleOfThermopylae {
label=""BattleOfThermopylae"";
""1453_getImmortalsOnTheBattlefield"" [label=""getImmortalsOnTheBattlefield""];
""1453_isDraw"" [label=""isDraw""];
""1453_getAtheniansOnTheBattlefield"" [label=""getAtheniansOnTheBattlefield""];
""1453_getPersiansOnTheBattlefield"" [label=""getPersiansOnTheBattlefield""];
""1453_isInProgress"" [label=""isInProgress""];
""1453_getTotalSlaves"" [label=""getTotalSlaves""];
""1453_redeemWarriors"" [label=""redeemWarriors""];
""1453_sendWarriors"" [label=""sendWarriors""];
""1453_sendBattleTokens"" [label=""sendBattleTokens""];
""1453_assignImmortalsToBattle"" [label=""assignImmortalsToBattle""];
""1453_getPersiansBattlePoints"" [label=""getPersiansBattlePoints""];
""1453_setBattleTokenAddress"" [label=""setBattleTokenAddress""];
""1453_getWinningFaction"" [label=""getWinningFaction""];
""1453_assignPersiansToBattle"" [label=""assignPersiansToBattle""];
""1453_assignAtheniansToBattle"" [label=""assignAtheniansToBattle""];
""1453_computeSlaves"" [label=""computeSlaves""];
""1453_assignWarriorsToBattle"" [label=""assignWarriorsToBattle""];
""1453_getSpartansOnTheBattlefield"" [label=""getSpartansOnTheBattlefield""];
""1453_getPersiansBattlePointsBy"" [label=""getPersiansBattlePointsBy""];
""1453_BattleOfThermopylae"" [label=""BattleOfThermopylae""];
""1453_getGreeksBattlePoints"" [label=""getGreeksBattlePoints""];
""1453_getGreeksBattlePointsBy"" [label=""getGreeksBattlePointsBy""];
""1453_assignSpartansToBattle"" [label=""assignSpartansToBattle""];
""1453_retrieveWarriors"" [label=""retrieveWarriors""];
""1453_getTemporaryWinningFaction"" [label=""getTemporaryWinningFaction""];
""1453_isEnded"" [label=""isEnded""];
""1453_getPersiansBattlePointsBy"" -> ""1453_getPersiansOnTheBattlefield"";
""1453_redeemWarriors"" -> ""1453_onlyIfTimePassed"";
""1453_isEnded"" -> ""1453_isTimeExpired"";
""1453_retrieveWarriors"" -> ""1453_sendWarriors"";
""1453_setBattleTokenAddress"" -> ""1453_onlyOwner"";
""1453_computeSlaves"" -> ""1453_getGreeksBattlePointsBy"";
""1453_getGreeksBattlePointsBy"" -> ""1453_getSpartansOnTheBattlefield"";
""1453_getPersiansBattlePointsBy"" -> ""1453_getImmortalsOnTheBattlefield"";
""1453_getTemporaryWinningFaction"" -> ""1453_getGreeksBattlePoints"";
""1453_computeSlaves"" -> ""1453_getPersiansBattlePointsBy"";
""1453_redeemWarriors"" -> ""1453_computeSlaves"";
""1453_BattleOfThermopylae"" -> ""1453_Upgradable"";
""1453_assignPersiansToBattle"" -> ""1453_onlyIfInTime"";
""1453_computeSlaves"" -> ""1453_getTotalSlaves"";
""1453_isDraw"" -> ""1453_getGreeksBattlePoints"";
""1453_getWinningFaction"" -> ""1453_getGreeksBattlePoints"";
""1453_assignAtheniansToBattle"" -> ""1453_onlyIfInTime"";
""1453_getTemporaryWinningFaction"" -> ""1453_isDraw"";
""1453_redeemWarriors"" -> ""1453_retrieveWarriors"";
""1453_getWinningFaction"" -> ""1453_isInProgress"";
""1453_BattleOfThermopylae"" -> ""1453_Timed"";
""1453_isDraw"" -> ""1453_getPersiansBattlePoints"";
""1453_assignAtheniansToBattle"" -> ""1453_assignWarriorsToBattle"";
""1453_getWinningFaction"" -> ""1453_getPersiansBattlePoints"";
""1453_assignImmortalsToBattle"" -> ""1453_sendBattleTokens"";
""1453_isInProgress"" -> ""1453_isTimeExpired"";
""1453_redeemWarriors"" -> ""1453_sendWarriors"";
""1453_assignPersiansToBattle"" -> ""1453_sendBattleTokens"";
""1453_assignSpartansToBattle"" -> ""1453_sendBattleTokens"";
""1453_redeemWarriors"" -> ""1453_getPersiansBattlePoints"";
""1453_computeSlaves"" -> ""1453_getPersiansBattlePoints"";
""1453_assignAtheniansToBattle"" -> ""1453_sendBattleTokens"";
""1453_assignPersiansToBattle"" -> ""1453_assignWarriorsToBattle"";
""1453_getTemporaryWinningFaction"" -> ""1453_getPersiansBattlePoints"";
""1453_assignImmortalsToBattle"" -> ""1453_onlyIfInTime"";
""1453_computeSlaves"" -> ""1453_getGreeksBattlePoints"";
""1453_assignImmortalsToBattle"" -> ""1453_assignWarriorsToBattle"";
""1453_assignSpartansToBattle"" -> ""1453_onlyIfInTime"";
""1453_assignSpartansToBattle"" -> ""1453_assignWarriorsToBattle"";
""1453_redeemWarriors"" -> ""1453_getGreeksBattlePoints"";
""1453_getWinningFaction"" -> ""1453_isDraw"";
""1453_getGreeksBattlePointsBy"" -> ""1453_getAtheniansOnTheBattlefield"";
}
"
0x02611ca37364d30ac9a11ade6b02aad288127c98.sol,TokenERC20,"contract TokenERC20 { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 18; uint256 public totalSupply; address public admin = 0x9Ef4a2CaA82D396d7B8c244DE57212E0fE332C73; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) internal allowed; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Burn(address indexed burner, uint256 value); function TokenERC20( uint256 initialSupply ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balances[admin] = totalSupply; emit Transfer(this,admin,totalSupply); }",0,"subgraph cluster_494_TokenERC20 {
label=""TokenERC20"";
""494_getBalance"" [label=""getBalance""];
""494_approve"" [label=""approve""];
""494_decreaseApproval"" [label=""decreaseApproval""];
""494_TokenERC20"" [label=""TokenERC20""];
""494_increaseApproval"" [label=""increaseApproval""];
""494_allowance"" [label=""allowance""];
""494_transfer"" [label=""transfer""];
""494_transferFrom"" [label=""transferFrom""];
""494_totalSupply"" [label=""totalSupply""];
""494_balanceOf"" [label=""balanceOf""];
""494_balanceOf"" -> ""494_getBalance"";
}
"
0xb4990ff24feafbded6987d802e9c6097cd5ae09c.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) internal balances; uint256 internal totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },0,"subgraph cluster_215_BasicToken {
label=""BasicToken"";
""215_transfer"" [label=""transfer""];
""215_totalSupply"" [label=""totalSupply""];
""215_balanceOf"" [label=""balanceOf""];
}
"
0xeda1f34d74a750daa982653bc43914a2ea7b96df.sol,TokenAdder,"contract TokenAdder { TokenConfigInterface public network; TokenConfigInterface public reserve; TokenConfigInterface public conversionRate; address public multisigAddress; address public withdrawAddress; address public ETH = 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee; ERC20 public ENG = ERC20(0xf0ee6b27b759c9893ce4f094b49ad28fd15a23e4); ERC20 public SALT = ERC20(0x4156D3342D5c385a87D264F90653733592000581); ERC20 public APPC = ERC20(0x1a7a8bd9106f2b8d977e08582dc7d24c723ab0db); ERC20 public RDN = ERC20(0x255aa6df07540cb5d3d297f0d0d4d84cb52bc8e6); ERC20 public OMG = ERC20(0xd26114cd6EE289AccF82350c8d8487fedB8A0C07); ERC20 public KNC = ERC20(0xdd974D5C2e2928deA5F71b9825b8b646686BD200); ERC20 public EOS = ERC20(0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0); ERC20 public SNT = ERC20(0x744d70fdbe2ba4cf95131626614a1763df805b9e); ERC20 public ELF = ERC20(0xbf2179859fc6d5bee9bf9158632dc51678a4100e); ERC20 public POWR = ERC20(0x595832f8fc6bf59c85c527fec3740a1b7a361269); ERC20 public MANA = ERC20(0x0f5d2fb29fb7d3cfee444a200298f468908cc942); ERC20 public BAT = ERC20(0x0d8775f648430679a709e98d2b0cb6250d2887ef); ERC20 public REQ = ERC20(0x8f8221afbb33998d8584a2b05749ba73c37a938a); ERC20 public GTO = ERC20(0xc5bbae50781be1669306b9e001eff57a2957b09d); address[] public newTokens = [ ENG, SALT, APPC, RDN]; int[] zeroArray; function TokenAdder(TokenConfigInterface _network, TokenConfigInterface _reserve, TokenConfigInterface _conversionRate, address _withdrawAddress, address _multisigAddress) public { network = _network; reserve = _reserve; conversionRate = _conversionRate; withdrawAddress = _withdrawAddress; multisigAddress = _multisigAddress; }",0,"subgraph cluster_592_TokenAdder {
label=""TokenAdder"";
""592_addTokens"" [label=""addTokens""];
""592_approveWithdrawAddress"" [label=""approveWithdrawAddress""];
""592_listPairs"" [label=""listPairs""];
""592_TokenAdder"" [label=""TokenAdder""];
""592_tranferToReserve"" [label=""tranferToReserve""];
""592_withdrawToMultisig"" [label=""withdrawToMultisig""];
}
"
0xaa96eb375e3b87b01a82bb26e0c7faeab444966d.sol,DESALToken,contract DESALToken is AbstractToken { address public owner; uint256 tokenCount = 0; bool frozen = false; uint256 constant MAX_TOKEN_COUNT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; uint public constant _decimals = (10**8); modifier onlyOwner() { require(owner == msg.sender); _; },0,"subgraph cluster_696_DESALToken {
label=""DESALToken"";
""696_createTokens"" [label=""createTokens""];
""696_transfer"" [label=""transfer""];
""696_decimals"" [label=""decimals""];
""696_freezeTransfers"" [label=""freezeTransfers""];
""696_totalSupply"" [label=""totalSupply""];
""696_name"" [label=""name""];
""696_burnTokens"" [label=""burnTokens""];
""696_symbol"" [label=""symbol""];
""696_unfreezeTransfers"" [label=""unfreezeTransfers""];
""696_DESALToken"" [label=""DESALToken""];
""696_approve"" [label=""approve""];
""696_transferFrom"" [label=""transferFrom""];
""696_setOwner"" [label=""setOwner""];
""696_DESALToken"" -> ""696_createTokens"";
""696_transferFrom"" -> ""696_transferFrom"";
""696_approve"" -> ""696_allowance"";
""696_transfer"" -> ""696_transfer"";
""696_approve"" -> ""696_approve"";
""696_createTokens"" -> ""696_safeSub"";
""696_createTokens"" -> ""696_safeAdd"";
""696_burnTokens"" -> ""696_safeSub"";
}
"
0x504d00c4ad9df0783ef745a19130266667ffa888.sol,LB,"contract LB is modularShort { using SafeMath for *; using NameFilter for string; using LBKeysCalcLong for uint256; address community_addr = 0x3661647405Af4cf29a4843722dC103e5D81C7949; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x392063fCb96E78Eb4b51d8faee3F5e1792959F67); string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 private rndGap_ = 0; uint256 constant private rndInit_ = 30 minutes; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 24 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => LBdatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => LBdatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => LBdatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => LBdatasets.TeamFee) public fees_; mapping (uint256 => LBdatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = LBdatasets.TeamFee(30,0); fees_[1] = LBdatasets.TeamFee(43,0); fees_[2] = LBdatasets.TeamFee(56,0); fees_[3] = LBdatasets.TeamFee(43,8); potSplit_[0] = LBdatasets.PotSplit(15,0); potSplit_[1] = LBdatasets.PotSplit(20,0); potSplit_[2] = LBdatasets.PotSplit(25,0); potSplit_[3] = LBdatasets.PotSplit(30,0); }",0,"subgraph cluster_4037_LB {
label=""LB"";
""4037_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4037_stop"" [label=""stop""];
""4037_reLoadCore"" [label=""reLoadCore""];
""4037_registerNameXname"" [label=""registerNameXname""];
""4037_buyXaddr"" [label=""buyXaddr""];
""4037_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4037_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4037_registerNameXID"" [label=""registerNameXID""];
""4037_withdraw"" [label=""withdraw""];
""4037_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4037_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4037_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4037_reLoadXname"" [label=""reLoadXname""];
""4037_updateGenVault"" [label=""updateGenVault""];
""4037_iWantXKeys"" [label=""iWantXKeys""];
""4037_getBuyPrice"" [label=""getBuyPrice""];
""4037_calcKeysReceived"" [label=""calcKeysReceived""];
""4037_updateTimer"" [label=""updateTimer""];
""4037_core"" [label=""core""];
""4037_constructor"" [label=""constructor""];
""4037_determinePID"" [label=""determinePID""];
""4037_distributeExternal"" [label=""distributeExternal""];
""4037_updateMasks"" [label=""updateMasks""];
""4037_getPlayerVaults"" [label=""getPlayerVaults""];
""4037_registerNameXaddr"" [label=""registerNameXaddr""];
""4037_reLoadXaddr"" [label=""reLoadXaddr""];
""4037_getTimeLeft"" [label=""getTimeLeft""];
""4037_endRound"" [label=""endRound""];
""4037_managePlayer"" [label=""managePlayer""];
""4037_verifyTeam"" [label=""verifyTeam""];
""4037_reLoadXid"" [label=""reLoadXid""];
""4037_fallback"" [label=""fallback""];
""4037_airdrop"" [label=""airdrop""];
""4037_buyXname"" [label=""buyXname""];
""4037_start"" [label=""start""];
""4037_endTx"" [label=""endTx""];
""4037_distributeInternal"" [label=""distributeInternal""];
""4037_withdrawEarnings"" [label=""withdrawEarnings""];
""4037_activate"" [label=""activate""];
""4037_buyCore"" [label=""buyCore""];
""4037_buyXid"" [label=""buyXid""];
""4037_distributeInternal"" -> ""4037_updateMasks"";
""4037_reLoadXaddr"" -> ""4037_isWithinLimits"";
""4037_reLoadXaddr"" -> ""4037_verifyTeam"";
""4037_buyXname"" -> ""4037_isWithinLimits"";
""4037_managePlayer"" -> ""4037_updateGenVault"";
""4037_reLoadXid"" -> ""4037_verifyTeam"";
""4037_core"" -> ""4037_distributeInternal"";
""4037_buyXaddr"" -> ""4037_buyCore"";
""4037_buyXid"" -> ""4037_determinePID"";
""4037_buyXid"" -> ""4037_isHuman"";
""4037_buyCore"" -> ""4037_endRound"";
""4037_registerNameXID"" -> ""4037_isHuman"";
""4037_reLoadCore"" -> ""4037_withdrawEarnings"";
""4037_buyXaddr"" -> ""4037_isHuman"";
""4037_reLoadXaddr"" -> ""4037_reLoadCore"";
""4037_reLoadXid"" -> ""4037_isActivated"";
""4037_withdraw"" -> ""4037_endRound"";
""4037_buyXid"" -> ""4037_buyCore"";
""4037_registerNameXname"" -> ""4037_isHuman"";
""4037_fallback"" -> ""4037_isHuman"";
""4037_buyXname"" -> ""4037_isHuman"";
""4037_buyCore"" -> ""4037_core"";
""4037_core"" -> ""4037_managePlayer"";
""4037_withdrawEarnings"" -> ""4037_updateGenVault"";
""4037_buyXid"" -> ""4037_isWithinLimits"";
""4037_reLoadXname"" -> ""4037_reLoadCore"";
""4037_core"" -> ""4037_endTx"";
""4037_fallback"" -> ""4037_isWithinLimits"";
""4037_core"" -> ""4037_updateTimer"";
""4037_reLoadXaddr"" -> ""4037_isActivated"";
""4037_fallback"" -> ""4037_isActivated"";
""4037_updateGenVault"" -> ""4037_calcUnMaskedEarnings"";
""4037_getPlayerVaults"" -> ""4037_calcUnMaskedEarnings"";
""4037_fallback"" -> ""4037_buyCore"";
""4037_fallback"" -> ""4037_determinePID"";
""4037_core"" -> ""4037_distributeExternal"";
""4037_withdraw"" -> ""4037_withdrawEarnings"";
""4037_buyXname"" -> ""4037_isActivated"";
""4037_reLoadXname"" -> ""4037_isActivated"";
""4037_withdraw"" -> ""4037_isActivated"";
""4037_getPlayerInfoByAddress"" -> ""4037_calcUnMaskedEarnings"";
""4037_buyXaddr"" -> ""4037_isWithinLimits"";
""4037_reLoadXname"" -> ""4037_verifyTeam"";
""4037_reLoadXname"" -> ""4037_isHuman"";
""4037_reLoadXid"" -> ""4037_isHuman"";
""4037_registerNameXaddr"" -> ""4037_isHuman"";
""4037_buyXname"" -> ""4037_buyCore"";
""4037_buyXaddr"" -> ""4037_determinePID"";
""4037_buyXid"" -> ""4037_isActivated"";
""4037_buyXaddr"" -> ""4037_isActivated"";
""4037_reLoadCore"" -> ""4037_core"";
""4037_reLoadXname"" -> ""4037_isWithinLimits"";
""4037_withdraw"" -> ""4037_isHuman"";
""4037_buyXaddr"" -> ""4037_verifyTeam"";
""4037_buyXname"" -> ""4037_verifyTeam"";
""4037_reLoadXaddr"" -> ""4037_isHuman"";
""4037_reLoadXid"" -> ""4037_isWithinLimits"";
""4037_reLoadXid"" -> ""4037_reLoadCore"";
""4037_core"" -> ""4037_airdrop"";
""4037_buyXname"" -> ""4037_determinePID"";
""4037_reLoadCore"" -> ""4037_endRound"";
""4037_buyXid"" -> ""4037_verifyTeam"";
""4037_getPlayerVaults"" -> ""4037_getPlayerVaultsHelper"";
}
"
0x727443713e3ff01411feaae52dae5d142a3c7b29.sol,GLOBALFOUNDATION,contract GLOBALFOUNDATION { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 2; uint public _totalSupply = 2100000000; uint256 public RATE = 1; bool public isMinting = false; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_GLOBALFOUNDATION {
label=""GLOBALFOUNDATION"";
""516_burnTokens"" [label=""burnTokens""];
""516_transferFrom"" [label=""transferFrom""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_totalSupply"" [label=""totalSupply""];
""516_balanceOf"" [label=""balanceOf""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_allowance"" [label=""allowance""];
""516_approve"" [label=""approve""];
""516_fallback"" [label=""fallback""];
""516_transfer"" [label=""transfer""];
""516_constructor"" [label=""constructor""];
""516_createTokens"" [label=""createTokens""];
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_burnTokens"" -> ""516_onlyOwner"";
""516_fallback"" -> ""516_createTokens"";
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
}
"
0xdc0a2185031ecf89f091a39c63c2857a7d5c301a.sol,Realitio,"contract Realitio is BalanceHolder { using RealitioSafeMath256 for uint256; using RealitioSafeMath32 for uint32; address constant NULL_ADDRESS = address(0); bytes32 constant NULL_HASH = bytes32(0); uint32 constant UNANSWERED = 0; uint256 constant COMMITMENT_NON_EXISTENT = 0; uint32 constant COMMITMENT_TIMEOUT_RATIO = 8; event LogSetQuestionFee( address arbitrator, uint256 amount ); event LogNewTemplate( uint256 indexed template_id, address indexed user, string question_text ); event LogNewQuestion( bytes32 indexed question_id, address indexed user, uint256 template_id, string question, bytes32 indexed content_hash, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce, uint256 created ); event LogFundAnswerBounty( bytes32 indexed question_id, uint256 bounty_added, uint256 bounty, address indexed user ); event LogNewAnswer( bytes32 answer, bytes32 indexed question_id, bytes32 history_hash, address indexed user, uint256 bond, uint256 ts, bool is_commitment ); event LogAnswerReveal( bytes32 indexed question_id, address indexed user, bytes32 indexed answer_hash, bytes32 answer, uint256 nonce, uint256 bond ); event LogNotifyOfArbitrationRequest( bytes32 indexed question_id, address indexed user ); event LogFinalize( bytes32 indexed question_id, bytes32 indexed answer ); event LogClaim( bytes32 indexed question_id, address indexed user, uint256 amount ); struct Question { bytes32 content_hash; address arbitrator; uint32 opening_ts; uint32 timeout; uint32 finalize_ts; bool is_pending_arbitration; uint256 bounty; bytes32 best_answer; bytes32 history_hash; uint256 bond; }",0,"subgraph cluster_96_RealitioSafeMath256 {
label=""RealitioSafeMath256"";
""96_sub"" [label=""sub""];
""96_mul"" [label=""mul""];
""96_div"" [label=""div""];
""96_add"" [label=""add""];
}
"
0x34022232ad82711337ac9dbfdc473e886f1805df.sol,ShalloToken,"contract ShalloToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 27000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 25000000e8; uint256 public constant minContribution = 1 ether / 100; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_957_ShalloToken {
label=""ShalloToken"";
""957_transfer"" [label=""transfer""];
""957_withdraw"" [label=""withdraw""];
""957_fallback"" [label=""fallback""];
""957_finishDistribution"" [label=""finishDistribution""];
""957_getTokenBalance"" [label=""getTokenBalance""];
""957_getTokens"" [label=""getTokens""];
""957_ShalloToken"" [label=""ShalloToken""];
""957_transferOwnership"" [label=""transferOwnership""];
""957_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""957_transferFrom"" [label=""transferFrom""];
""957_distr"" [label=""distr""];
""957_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""957_balanceOf"" [label=""balanceOf""];
""957_updateTokensPerEth"" [label=""updateTokensPerEth""];
""957_burn"" [label=""burn""];
""957_doAirdrop"" [label=""doAirdrop""];
""957_allowance"" [label=""allowance""];
""957_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""957_approve"" [label=""approve""];
""957_getTokens"" -> ""957_canDistr"";
""957_burn"" -> ""957_onlyOwner"";
""957_getTokens"" -> ""957_distr"";
""957_adminClaimAirdrop"" -> ""957_onlyOwner"";
""957_adminClaimAirdropMultiple"" -> ""957_doAirdrop"";
""957_adminClaimAirdrop"" -> ""957_doAirdrop"";
""957_updateTokensPerEth"" -> ""957_onlyOwner"";
""957_withdrawAltcoinTokens"" -> ""957_onlyOwner"";
""957_fallback"" -> ""957_getTokens"";
""957_distr"" -> ""957_canDistr"";
""957_transferFrom"" -> ""957_onlyPayloadSize"";
""957_transfer"" -> ""957_onlyPayloadSize"";
""957_transferOwnership"" -> ""957_onlyOwner"";
""957_finishDistribution"" -> ""957_onlyOwner"";
""957_withdraw"" -> ""957_onlyOwner"";
""957_adminClaimAirdropMultiple"" -> ""957_onlyOwner"";
""957_finishDistribution"" -> ""957_canDistr"";
""957_ShalloToken"" -> ""957_distr"";
}
"
0x332fe77fcfad33eab527777000198e8e2f9ccac7.sol,GoldMiner,contract GoldMiner { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1182_GoldMiner {
label=""GoldMiner"";
""1182_balanceOf"" [label=""balanceOf""];
""1182_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1182_exit"" [label=""exit""];
""1182_buy"" [label=""buy""];
""1182_totalSupply"" [label=""totalSupply""];
""1182_sqrt"" [label=""sqrt""];
""1182_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1182_fallback"" [label=""fallback""];
""1182_purchaseTokens"" [label=""purchaseTokens""];
""1182_myDividends"" [label=""myDividends""];
""1182_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1182_sell"" [label=""sell""];
""1182_withdraw"" [label=""withdraw""];
""1182_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1182_transfer"" [label=""transfer""];
""1182_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1182_reinvest"" [label=""reinvest""];
""1182_myTokens"" [label=""myTokens""];
""1182_sellPrice"" [label=""sellPrice""];
""1182_buyPrice"" [label=""buyPrice""];
""1182_dividendsOf"" [label=""dividendsOf""];
""1182_reinvest"" -> ""1182_onlyStronghands"";
""1182_withdraw"" -> ""1182_onlyStronghands"";
""1182_sell"" -> ""1182_onlyBagholders"";
""1182_sell"" -> ""1182_buyPrice"";
""1182_exit"" -> ""1182_sell"";
""1182_transfer"" -> ""1182_tokensToEthereum_"";
""1182_reinvest"" -> ""1182_myDividends"";
""1182_purchaseTokens"" -> ""1182_buyPrice"";
""1182_buyPrice"" -> ""1182_tokensToEthereum_"";
""1182_fallback"" -> ""1182_purchaseTokens"";
""1182_buy"" -> ""1182_purchaseTokens"";
""1182_sellPrice"" -> ""1182_tokensToEthereum_"";
""1182_purchaseTokens"" -> ""1182_ethereumToTokens_"";
""1182_myDividends"" -> ""1182_dividendsOf"";
""1182_reinvest"" -> ""1182_purchaseTokens"";
""1182_calculateTokensReceived"" -> ""1182_ethereumToTokens_"";
""1182_calculateEthereumReceived"" -> ""1182_tokensToEthereum_"";
""1182_myTokens"" -> ""1182_balanceOf"";
""1182_ethereumToTokens_"" -> ""1182_sqrt"";
""1182_transfer"" -> ""1182_withdraw"";
""1182_sell"" -> ""1182_tokensToEthereum_"";
""1182_transfer"" -> ""1182_onlyBagholders"";
""1182_transfer"" -> ""1182_myDividends"";
""1182_exit"" -> ""1182_withdraw"";
""1182_withdraw"" -> ""1182_myDividends"";
}
"
0x41de5b7cf63c8d028daa2626d9aeaf02cad8c6c3.sol,DSMath,"contract DSMath { function add(uint256 x, uint256 y) constant internal returns (uint256 z) { assert((z = x + y) >= x); }",0,"subgraph cluster_150_DSMath {
label=""DSMath"";
""150_mul"" [label=""mul""];
""150_div"" [label=""div""];
""150_add"" [label=""add""];
""150_max"" [label=""max""];
""150_min"" [label=""min""];
""150_sub"" [label=""sub""];
}
"
0xf3d86b6974ddf5b8407cfdcd3f874a76f7538b90.sol,MiniMeIrrevocableVestedToken,"contract MiniMeIrrevocableVestedToken is MiniMeToken, SafeMath { uint256 MAX_GRANTS_PER_ADDRESS = 20; struct TokenGrant { address granter; uint256 value; uint64 cliff; uint64 vesting; uint64 start; }",0,"subgraph cluster_1888_MiniMeIrrevocableVestedToken {
label=""MiniMeIrrevocableVestedToken"";
""1888_setCanCreateGrants"" [label=""setCanCreateGrants""];
""1888_changeVestingWhitelister"" [label=""changeVestingWhitelister""];
""1888_vestedTokens"" [label=""vestedTokens""];
""1888_lastTokenIsTransferableDate"" [label=""lastTokenIsTransferableDate""];
""1888_transferFrom"" [label=""transferFrom""];
""1888_calculateVestedTokens"" [label=""calculateVestedTokens""];
""1888_transferableTokens"" [label=""transferableTokens""];
""1888_spendableBalanceOf"" [label=""spendableBalanceOf""];
""1888_tokenGrant"" [label=""tokenGrant""];
""1888_nonVestedTokens"" [label=""nonVestedTokens""];
""1888_MiniMeIrrevocableVestedToken"" [label=""MiniMeIrrevocableVestedToken""];
""1888_tokenGrantsCount"" [label=""tokenGrantsCount""];
""1888_transfer"" [label=""transfer""];
""1888_grantVestedTokens"" [label=""grantVestedTokens""];
""1888_doSetCanCreateGrants"" [label=""doSetCanCreateGrants""];
""1888_changeVestingWhitelister"" -> ""1888_doSetCanCreateGrants"";
""1888_transfer"" -> ""1888_canTransfer"";
""1888_setCanCreateGrants"" -> ""1888_onlyVestingWhitelister"";
""1888_vestedTokens"" -> ""1888_calculateVestedTokens"";
""1888_transferFrom"" -> ""1888_transferFrom"";
""1888_MiniMeIrrevocableVestedToken"" -> ""1888_doSetCanCreateGrants"";
""1888_grantVestedTokens"" -> ""1888_assert"";
""1888_grantVestedTokens"" -> ""1888_transfer"";
""1888_spendableBalanceOf"" -> ""1888_transferableTokens"";
""1888_changeVestingWhitelister"" -> ""1888_onlyVestingWhitelister"";
""1888_transferableTokens"" -> ""1888_nonVestedTokens"";
""1888_setCanCreateGrants"" -> ""1888_doSetCanCreateGrants"";
""1888_nonVestedTokens"" -> ""1888_safeSub"";
""1888_calculateVestedTokens"" -> ""1888_safeMul"";
""1888_grantVestedTokens"" -> ""1888_tokenGrantsCount"";
""1888_calculateVestedTokens"" -> ""1888_safeSub"";
""1888_calculateVestedTokens"" -> ""1888_safeDiv"";
""1888_transferableTokens"" -> ""1888_safeSub"";
""1888_transferableTokens"" -> ""1888_safeAdd"";
""1888_tokenGrant"" -> ""1888_vestedTokens"";
""1888_transferFrom"" -> ""1888_canTransfer"";
""1888_transferableTokens"" -> ""1888_balanceOf"";
""1888_lastTokenIsTransferableDate"" -> ""1888_tokenGrantsCount"";
""1888_transfer"" -> ""1888_transfer"";
""1888_lastTokenIsTransferableDate"" -> ""1888_max64"";
""1888_transferableTokens"" -> ""1888_tokenGrantsCount"";
""1888_MiniMeIrrevocableVestedToken"" -> ""1888_MiniMeToken"";
""1888_nonVestedTokens"" -> ""1888_vestedTokens"";
}
"
0x700f5b6fbef95f3fbd4f50233e6d05d4eab6dd03.sol,socibit,"contract socibit is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 300000000e18; uint256 public totalDistributed = 150000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 10000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_873_socibit {
label=""socibit"";
""873_burn"" [label=""burn""];
""873_transferOwnership"" [label=""transferOwnership""];
""873_withdraw"" [label=""withdraw""];
""873_distr"" [label=""distr""];
""873_fallback"" [label=""fallback""];
""873_approve"" [label=""approve""];
""873_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""873_allowance"" [label=""allowance""];
""873_finishDistribution"" [label=""finishDistribution""];
""873_getTokens"" [label=""getTokens""];
""873_balanceOf"" [label=""balanceOf""];
""873_transfer"" [label=""transfer""];
""873_socibit"" [label=""socibit""];
""873_getTokenBalance"" [label=""getTokenBalance""];
""873_transferFrom"" [label=""transferFrom""];
""873_finishDistribution"" -> ""873_canDistr"";
""873_transferFrom"" -> ""873_onlyPayloadSize"";
""873_getTokens"" -> ""873_onlyWhitelist"";
""873_withdrawForeignTokens"" -> ""873_onlyOwner"";
""873_finishDistribution"" -> ""873_onlyOwner"";
""873_fallback"" -> ""873_getTokens"";
""873_transfer"" -> ""873_onlyPayloadSize"";
""873_withdraw"" -> ""873_onlyOwner"";
""873_distr"" -> ""873_canDistr"";
""873_burn"" -> ""873_onlyOwner"";
""873_getTokens"" -> ""873_distr"";
""873_getTokens"" -> ""873_canDistr"";
""873_transferOwnership"" -> ""873_onlyOwner"";
}
"
0x6f4dcbb16f72853c7382e7100a0713a68e53d9be.sol,GroupBuyContract,contract GroupBuyContract { uint256 public constant MAX_CONTRIBUTION_SLOTS = 20; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; struct Group { address[] contributorArr; mapping(address => uint256) addressToContributorArrIndex; mapping(address => uint256) addressToContribution; bool exists; uint256 contributedBalance; uint256 purchasePrice; },0,"subgraph cluster_2011_GroupBuyContract {
label=""GroupBuyContract"";
""2011_unpause"" [label=""unpause""];
""2011_withdrawCommission"" [label=""withdrawCommission""];
""2011_fallback"" [label=""fallback""];
""2011_setCEO"" [label=""setCEO""];
""2011_setCOO2"" [label=""setCOO2""];
""2011_activatePurchase"" [label=""activatePurchase""];
""2011_adjustCommission"" [label=""adjustCommission""];
""2011__clearContributorRecordInGroup"" [label=""_clearContributorRecordInGroup""];
""2011__distributeProceeds"" [label=""_distributeProceeds""];
""2011_getContributorsInTokenGroupCount"" [label=""getContributorsInTokenGroupCount""];
""2011_getTokenGroupTotalBalance"" [label=""getTokenGroupTotalBalance""];
""2011_getSelfGroupsContributedTo"" [label=""getSelfGroupsContributedTo""];
""2011__newPrice"" [label=""_newPrice""];
""2011_setCOO1"" [label=""setCOO1""];
""2011__addressNotNull"" [label=""_addressNotNull""];
""2011_withdrawBalance"" [label=""withdrawBalance""];
""2011_dissolveTokenGroup"" [label=""dissolveTokenGroup""];
""2011_distributeCustomSaleProceeds"" [label=""distributeCustomSaleProceeds""];
""2011_getGroupPurchasedPrice"" [label=""getGroupPurchasedPrice""];
""2011_contributeToTokenGroup"" [label=""contributeToTokenGroup""];
""2011_getGroupsContributedTo"" [label=""getGroupsContributedTo""];
""2011_GroupBuyContract"" [label=""GroupBuyContract""];
""2011_setToForking"" [label=""setToForking""];
""2011_leaveTokenGroupAndWithdrawBalance"" [label=""leaveTokenGroupAndWithdrawBalance""];
""2011_pause"" [label=""pause""];
""2011__withdrawUserFunds"" [label=""_withdrawUserFunds""];
""2011__purchase"" [label=""_purchase""];
""2011_transferToken"" [label=""transferToken""];
""2011_getSelfContributionBalanceForTokenGroup"" [label=""getSelfContributionBalanceForTokenGroup""];
""2011_setCOO3"" [label=""setCOO3""];
""2011_leaveTokenGroup"" [label=""leaveTokenGroup""];
""2011_setCFO"" [label=""setCFO""];
""2011_distributeSaleProceeds"" [label=""distributeSaleProceeds""];
""2011__clearGroupRecordInContributor"" [label=""_clearGroupRecordInContributor""];
""2011_getContributionBalanceForTokenGroup"" [label=""getContributionBalanceForTokenGroup""];
""2011_getWithdrawableBalance"" [label=""getWithdrawableBalance""];
""2011_getContributorsInTokenGroup"" [label=""getContributorsInTokenGroup""];
""2011_setToNotForking"" [label=""setToNotForking""];
""2011_transferToken"" -> ""2011_onlyCOO"";
""2011_contributeToTokenGroup"" -> ""2011_whenNotPaused"";
""2011_withdrawBalance"" -> ""2011__addressNotNull"";
""2011_adjustCommission"" -> ""2011_onlyCLevel"";
""2011_withdrawBalance"" -> ""2011__withdrawUserFunds"";
""2011_distributeSaleProceeds"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroup"" -> ""2011__clearGroupRecordInContributor"";
""2011_setCEO"" -> ""2011_onlyCEO"";
""2011_unpause"" -> ""2011_onlyCEO"";
""2011_contributeToTokenGroup"" -> ""2011__addressNotNull"";
""2011_pause"" -> ""2011_onlyCLevel"";
""2011_contributeToTokenGroup"" -> ""2011_whenNotForking"";
""2011_pause"" -> ""2011_whenNotPaused"";
""2011_dissolveTokenGroup"" -> ""2011__clearGroupRecordInContributor"";
""2011_activatePurchase"" -> ""2011__purchase"";
""2011_distributeCustomSaleProceeds"" -> ""2011__distributeProceeds"";
""2011_setToForking"" -> ""2011_whenNotForking"";
""2011_unpause"" -> ""2011_whenPaused"";
""2011_getGroupsContributedTo"" -> ""2011__addressNotNull"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__addressNotNull"";
""2011_activatePurchase"" -> ""2011_whenNotPaused"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011_whenNotPaused"";
""2011_setToNotForking"" -> ""2011_onlyCEO"";
""2011_distributeCustomSaleProceeds"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__clearContributorRecordInGroup"";
""2011_distributeSaleProceeds"" -> ""2011__newPrice"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__clearGroupRecordInContributor"";
""2011_dissolveTokenGroup"" -> ""2011_whenForking"";
""2011_setCOO2"" -> ""2011_onlyCEO"";
""2011_contributeToTokenGroup"" -> ""2011__purchase"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__withdrawUserFunds"";
""2011_withdrawCommission"" -> ""2011_onlyCFO"";
""2011_setCOO3"" -> ""2011_onlyCEO"";
""2011_distributeSaleProceeds"" -> ""2011__distributeProceeds"";
""2011__distributeProceeds"" -> ""2011__clearGroupRecordInContributor"";
""2011_getSelfGroupsContributedTo"" -> ""2011__addressNotNull"";
""2011_setCOO1"" -> ""2011_onlyCEO"";
""2011_setToNotForking"" -> ""2011_whenForking"";
""2011_setToForking"" -> ""2011_onlyCLevel"";
""2011_dissolveTokenGroup"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroup"" -> ""2011_whenNotPaused"";
""2011_withdrawBalance"" -> ""2011_whenNotPaused"";
""2011_getWithdrawableBalance"" -> ""2011__addressNotNull"";
""2011_leaveTokenGroup"" -> ""2011__clearContributorRecordInGroup"";
""2011_leaveTokenGroup"" -> ""2011__addressNotNull"";
""2011_setCFO"" -> ""2011_onlyCEO"";
}
"
0xf028adee51533b1b47beaa890feb54a457f51e89.sol,BMToken,"contract BMToken { string public name = ; string public symbol = ; uint256 public decimals = 18; uint256 _supply = 0; mapping (address => uint256) _balances; mapping (address => mapping (address => uint256)) _approvals; event Transfer( address indexed from, address indexed to, uint value); event Approval( address indexed owner, address indexed spender, uint value); address ico_contract; address public owner; function BMToken(){ ico_contract = address(0x0); owner = msg.sender; }",0,"subgraph cluster_459_BMToken {
label=""BMToken"";
""459_mintTokens"" [label=""mintTokens""];
""459_transferFrom"" [label=""transferFrom""];
""459_BMToken"" [label=""BMToken""];
""459_transfer"" [label=""transfer""];
""459_sub"" [label=""sub""];
""459_add"" [label=""add""];
""459_changeOwner"" [label=""changeOwner""];
""459_allowance"" [label=""allowance""];
""459_balanceOf"" [label=""balanceOf""];
""459_totalSupply"" [label=""totalSupply""];
""459_setICOContract"" [label=""setICOContract""];
""459_approve"" [label=""approve""];
""459_transfer"" -> ""459_add"";
""459_transfer"" -> ""459_sub"";
""459_transferFrom"" -> ""459_add"";
""459_setICOContract"" -> ""459_isOwner"";
""459_transferFrom"" -> ""459_sub"";
""459_mintTokens"" -> ""459_add"";
""459_changeOwner"" -> ""459_isOwner"";
}
"
0x74b0e3d730f82fc410986c1f18480ede1e256e6e.sol,GlobaleCash,"contract GlobaleCash is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function GlobaleCash() public { symbol = ; name = ; decimals = 0; _totalSupply = 60000000; balances[0x7C86D15F158ad52FBC7B0206995731a309E3CCE0] = _totalSupply; Transfer(address(0), 0x7C86D15F158ad52FBC7B0206995731a309E3CCE0, _totalSupply); }",0,"subgraph cluster_543_GlobaleCash {
label=""GlobaleCash"";
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_GlobaleCash"" [label=""GlobaleCash""];
""543_allowance"" [label=""allowance""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xa1cb45a734151b63679e1aed48e4c3deb8d1908d.sol,GuardianGoldToken,"contract GuardianGoldToken is BasicToken, Ownable, RBAC { string public name = ; string public symbol = ; uint8 public decimals = 18; string public constant ADMIN_ROLE = ; uint256 constant internal magnitude = 2**64; uint public maxTokens = 5000e18; mapping(address => uint256) internal tokenBalanceLedger_; mapping(address => int256) internal payoutsTo_; mapping(address => uint256) internal referralBalance_; mapping(address => mapping (address => uint256)) allowed; uint public goldAccount = 0; uint public operationsAccount = 0; uint256 internal profitPerShare_; address[] public transfers; uint public constant INITIAL_SUPPLY = 62207e15; uint public totalSupply = 62207e15; uint public totalGoldReserves = 62207e15; uint public pendingGold = 0; uint public totalETHReceived = 57.599 ether; bool public isTransferable = true; bool public toggleTransferablePending = false; address public transferToggleRequester = address(0); uint public tokenPrice = 0.925925 ether; uint public goldPrice = 0.390185 ether; uint public tokenSellDiscount = 950; uint public referralFee = 30; uint minGoldPrice = 0.2 ether; uint maxGoldPrice = 0.7 ether; uint minTokenPrice = 0.5 ether; uint maxTokenPrice = 2 ether; uint public dividendRate = 150; uint public minPurchaseAmount = 0.1 ether; uint public minSaleAmount = 1e18; uint public minRefStake = 1e17; bool public allowBuy = false; bool public allowSell = false; bool public allowRedeem = false; constructor() public { totalSupply = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; addRole(msg.sender, ADMIN_ROLE); emit Transfer(address(this), msg.sender, INITIAL_SUPPLY); }",0,"subgraph cluster_2305_GuardianGoldToken {
label=""GuardianGoldToken"";
""2305_isOwner"" [label=""isOwner""];
""2305_depositGold"" [label=""depositGold""];
""2305_approveAndCall"" [label=""approveAndCall""];
""2305_transfer"" [label=""transfer""];
""2305__transfer"" [label=""_transfer""];
""2305_depositOperations"" [label=""depositOperations""];
""2305_ethereumToTokens_"" [label=""ethereumToTokens_""];
""2305_withDrawGoldAccount"" [label=""withDrawGoldAccount""];
""2305_approveTransfer"" [label=""approveTransfer""];
""2305_sell"" [label=""sell""];
""2305_updateGoldReserves"" [label=""updateGoldReserves""];
""2305_getTransfers"" [label=""getTransfers""];
""2305_allowance"" [label=""allowance""];
""2305_myDividends"" [label=""myDividends""];
""2305_profitShare"" [label=""profitShare""];
""2305_withdraw"" [label=""withdraw""];
""2305_transferFrom"" [label=""transferFrom""];
""2305_tokensToEthereum_"" [label=""tokensToEthereum_""];
""2305_setMinRefStake"" [label=""setMinRefStake""];
""2305_constructor"" [label=""constructor""];
""2305_withDrawOperationsAccount"" [label=""withDrawOperationsAccount""];
""2305_setMinSaleAmount"" [label=""setMinSaleAmount""];
""2305_setAdmin"" [label=""setAdmin""];
""2305_setCrowdsaleAddress"" [label=""setCrowdsaleAddress""];
""2305_getTotalDivs"" [label=""getTotalDivs""];
""2305_setAllowRedeem"" [label=""setAllowRedeem""];
""2305_setProofofStakeFee"" [label=""setProofofStakeFee""];
""2305_setReferralFee"" [label=""setReferralFee""];
""2305_setTokenSellDiscount"" [label=""setTokenSellDiscount""];
""2305_dividendsOf"" [label=""dividendsOf""];
""2305_setTokenPrice"" [label=""setTokenPrice""];
""2305_denyTransfer"" [label=""denyTransfer""];
""2305_setMinPurchaseAmount"" [label=""setMinPurchaseAmount""];
""2305_setGoldPrice"" [label=""setGoldPrice""];
""2305_setTransferable"" [label=""setTransferable""];
""2305_setAllowSell"" [label=""setAllowSell""];
""2305_approve"" [label=""approve""];
""2305_setTokenRange"" [label=""setTokenRange""];
""2305_payouts"" [label=""payouts""];
""2305_setGoldRange"" [label=""setGoldRange""];
""2305_buy"" [label=""buy""];
""2305_setmaxTokens"" [label=""setmaxTokens""];
""2305_removeAdmin"" [label=""removeAdmin""];
""2305_setAllowBuy"" [label=""setAllowBuy""];
""2305_getTokenAmount"" [label=""getTokenAmount""];
""2305_adminTransfer"" [label=""adminTransfer""];
""2305_approveTransferableToggle"" [label=""approveTransferableToggle""];
""2305_tokenData"" [label=""tokenData""];
""2305_isAdmin"" [label=""isAdmin""];
""2305_redeemTokensForGold"" [label=""redeemTokensForGold""];
""2305_setGoldPrice"" -> ""2305_onlyRole"";
""2305_redeemTokensForGold"" -> ""2305_withdraw"";
""2305_isAdmin"" -> ""2305_hasRole"";
""2305_setTokenPrice"" -> ""2305_onlyRole"";
""2305_withdraw"" -> ""2305_myDividends"";
""2305_sell"" -> ""2305_tokensToEthereum_"";
""2305_setTokenSellDiscount"" -> ""2305_onlyRole"";
""2305_setAdmin"" -> ""2305_addRole"";
""2305_withDrawGoldAccount"" -> ""2305_onlyRole"";
""2305_setAllowRedeem"" -> ""2305_onlyRole"";
""2305_withDrawOperationsAccount"" -> ""2305_onlyRole"";
""2305_redeemTokensForGold"" -> ""2305_myDividends"";
""2305_setTokenRange"" -> ""2305_onlyRole"";
""2305_updateGoldReserves"" -> ""2305_onlyRole"";
""2305_tokenData"" -> ""2305_myDividends"";
""2305_adminTransfer"" -> ""2305_onlyRole"";
""2305_removeAdmin"" -> ""2305_removeRole"";
""2305_approveTransfer"" -> ""2305__transfer"";
""2305_setAdmin"" -> ""2305_onlyOwner"";
""2305_approveTransferableToggle"" -> ""2305_onlyRole"";
""2305_setMinRefStake"" -> ""2305_onlyRole"";
""2305_transfer"" -> ""2305__transfer"";
""2305_removeAdmin"" -> ""2305_onlyOwner"";
""2305_denyTransfer"" -> ""2305_onlyRole"";
""2305_setCrowdsaleAddress"" -> ""2305_onlyRole"";
""2305_setMinSaleAmount"" -> ""2305_onlyRole"";
""2305_setGoldRange"" -> ""2305_onlyRole"";
""2305__transfer"" -> ""2305_withdraw"";
""2305_setProofofStakeFee"" -> ""2305_onlyRole"";
""2305_setAllowBuy"" -> ""2305_onlyRole"";
""2305__transfer"" -> ""2305_myDividends"";
""2305_constructor"" -> ""2305_addRole"";
""2305_setmaxTokens"" -> ""2305_onlyRole"";
""2305_approveTransfer"" -> ""2305_onlyRole"";
""2305_myDividends"" -> ""2305_dividendsOf"";
""2305_tokenData"" -> ""2305_balanceOf"";
""2305_buy"" -> ""2305_ethereumToTokens_"";
""2305_setReferralFee"" -> ""2305_onlyRole"";
""2305_setMinPurchaseAmount"" -> ""2305_onlyRole"";
""2305_setTransferable"" -> ""2305_onlyRole"";
""2305_dividendsOf"" -> ""2305_balanceOf"";
""2305_setAllowSell"" -> ""2305_onlyRole"";
}
"
0x25b16c95f3ebb1d8583a1c173f81257bc916a9be.sol,BasicToken,"contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; function transfer(address _to, uint256 _value) returns (bool) { balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); return true; }",0,"subgraph cluster_280_BasicToken {
label=""BasicToken"";
""280_balanceOf"" [label=""balanceOf""];
""280_transfer"" [label=""transfer""];
}
"
0xc4529ea3f838a7e27a673a87bfe844a5b8b1e4e2.sol,InterestTest,contract InterestTest is Base { address public creator; address public OwnerO; address public Owner1; uint256 public etherLimit = 2 ether; mapping (address => uint256) public balances; mapping (address => uint256) public interestPaid; function initOwner(address owner) { OwnerO = owner; },0,"subgraph cluster_340_InterestTest {
label=""InterestTest"";
""340_deposit"" [label=""deposit""];
""340_fallback"" [label=""fallback""];
""340_calculateInterest"" [label=""calculateInterest""];
""340_currentBalance"" [label=""currentBalance""];
""340_initOwner1"" [label=""initOwner1""];
""340_initOwner"" [label=""initOwner""];
""340_payout"" [label=""payout""];
""340_InterestTest"" [label=""InterestTest""];
""340_payInterest"" [label=""payInterest""];
""340_InterestTest"" -> ""340_initOwner1"";
""340_payInterest"" -> ""340_calculateInterest"";
""340_payInterest"" -> ""340_payout"";
""340_InterestTest"" -> ""340_initOwner"";
}
"
0xede85cd1b56791dca6fe9f589ae1c2961695880b.sol,Giveaway,contract Giveaway is BinksBucksToken { address internal giveaway_master; address internal imperator; uint32 internal _code = 0; uint internal _distribution_size = 1000000000000000000000; uint internal _max_distributions = 100; uint internal _distributions_left = 100; uint internal _distribution_number = 0; mapping(address => uint256) internal _last_distribution; function transferAdmin(address newImperator) public { require(msg.sender == imperator); imperator = newImperator; },0,"subgraph cluster_535_Giveaway {
label=""Giveaway"";
""535_setDistributionSize"" [label=""setDistributionSize""];
""535_CodeEligible"" [label=""CodeEligible""];
""535_startGiveaway"" [label=""startGiveaway""];
""535_transferAdmin"" [label=""transferAdmin""];
""535_transferGiveaway"" [label=""transferGiveaway""];
""535_EnterCode"" [label=""EnterCode""];
""535_EnterCode"" -> ""535_CodeEligible"";
""535_EnterCode"" -> ""535_canRecieve"";
""535_EnterCode"" -> ""535_hasAtLeast"";
}
"
0x1c1c14a6b5074905ce5d367b0a7e098b58ebfd47.sol,FidexToken,"contract FidexToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 50000000000e8; uint256 public totalDistributed = 0; uint256 public constant MIN_PURCHASE = 1 ether / 100; uint256 public tokensPerEth = 8000000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event StartICO(); event ResetICO(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; bool public icoStart = false; modifier canDistr() { require(!distributionFinished); require(icoStart); _; }",0,"subgraph cluster_988_FidexToken {
label=""FidexToken"";
""988_resetICO"" [label=""resetICO""];
""988_transferTokenToMultiple"" [label=""transferTokenToMultiple""];
""988_allowance"" [label=""allowance""];
""988_transferTokenTo"" [label=""transferTokenTo""];
""988_burn"" [label=""burn""];
""988_transferFrom"" [label=""transferFrom""];
""988_balanceOf"" [label=""balanceOf""];
""988_doAirdrop"" [label=""doAirdrop""];
""988_updateTokensPerEth"" [label=""updateTokensPerEth""];
""988_constructor"" [label=""constructor""];
""988_fallback"" [label=""fallback""];
""988_distr"" [label=""distr""];
""988_getTokenBalance"" [label=""getTokenBalance""];
""988_transferOwnership"" [label=""transferOwnership""];
""988_getTokens"" [label=""getTokens""];
""988_startICO"" [label=""startICO""];
""988_approve"" [label=""approve""];
""988_withdraw"" [label=""withdraw""];
""988_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""988_finishDistribution"" [label=""finishDistribution""];
""988_transfer"" [label=""transfer""];
""988_withdrawAltcoinTokens"" -> ""988_onlyOwner"";
""988_distr"" -> ""988_canDistr"";
""988_transferTokenTo"" -> ""988_onlyOwner"";
""988_resetICO"" -> ""988_onlyOwner"";
""988_finishDistribution"" -> ""988_onlyOwner"";
""988_transferTokenTo"" -> ""988_doAirdrop"";
""988_getTokens"" -> ""988_distr"";
""988_transferTokenToMultiple"" -> ""988_doAirdrop"";
""988_fallback"" -> ""988_getTokens"";
""988_getTokens"" -> ""988_canDistr"";
""988_transferTokenToMultiple"" -> ""988_onlyOwner"";
""988_transferFrom"" -> ""988_onlyPayloadSize"";
""988_finishDistribution"" -> ""988_canDistr"";
""988_transferOwnership"" -> ""988_onlyOwner"";
""988_transfer"" -> ""988_onlyPayloadSize"";
""988_withdraw"" -> ""988_onlyOwner"";
""988_updateTokensPerEth"" -> ""988_onlyOwner"";
""988_burn"" -> ""988_onlyOwner"";
""988_startICO"" -> ""988_onlyOwner"";
}
"
0x1f0d1de1558582ad6f13763f477119a1455502af.sol,Exchange,contract Exchange is ContractReceiver { using SafeMath for uint256; using BytesLib for bytes; struct Order { address owner; bool active; address sellToken; address buyToken; address ring; uint256 amount; uint256 priceMul; uint256 priceDiv; },0,"subgraph cluster_1781_Exchange {
label=""Exchange"";
""1781_pullTokens"" [label=""pullTokens""];
""1781__topUpTradeMining"" [label=""_topUpTradeMining""];
""1781_fallback"" [label=""fallback""];
""1781_getBuyTokenAmount"" [label=""getBuyTokenAmount""];
""1781_sellEtherWithRing"" [label=""sellEtherWithRing""];
""1781_getBalance"" [label=""getBalance""];
""1781__executeTokenSwap"" [label=""_executeTokenSwap""];
""1781_buyOrderWithEth"" [label=""buyOrderWithEth""];
""1781__executeSellOrder"" [label=""_executeSellOrder""];
""1781_tokenFallback"" [label=""tokenFallback""];
""1781__executeOrder"" [label=""_executeOrder""];
""1781_sellERC20Token"" [label=""sellERC20Token""];
""1781_changeTradeMiningPrice"" [label=""changeTradeMiningPrice""];
""1781_sendTokensTo"" [label=""sendTokensTo""];
""1781_sellEther"" [label=""sellEther""];
""1781_Exchange"" [label=""Exchange""];
""1781_withdrawTradeMining"" [label=""withdrawTradeMining""];
""1781_buyOrderWithERC20Token"" [label=""buyOrderWithERC20Token""];
""1781_remainingAmount"" [label=""remainingAmount""];
""1781_calcFees"" [label=""calcFees""];
""1781_isOrderActive"" [label=""isOrderActive""];
""1781__tradeMiningAndFees"" [label=""_tradeMiningAndFees""];
""1781_tradeMiningAmount"" [label=""tradeMiningAmount""];
""1781_sellERC20TokenWithRing"" [label=""sellERC20TokenWithRing""];
""1781__executeBuyOrder"" [label=""_executeBuyOrder""];
""1781_cancelOrder"" [label=""cancelOrder""];
""1781__newOrder"" [label=""_newOrder""];
""1781__executeTokenSwap"" -> ""1781_sendTokensTo"";
""1781__tradeMiningAndFees"" -> ""1781_sendTokensTo"";
""1781_sellERC20Token"" -> ""1781__newOrder"";
""1781__executeBuyOrder"" -> ""1781_sendTokensTo"";
""1781_tokenFallback"" -> ""1781__newOrder"";
""1781_withdrawTradeMining"" -> ""1781_sendTokensTo"";
""1781__executeSellOrder"" -> ""1781_sendTokensTo"";
""1781_sellERC20TokenWithRing"" -> ""1781__newOrder"";
""1781_cancelOrder"" -> ""1781_sendTokensTo"";
""1781_sellERC20TokenWithRing"" -> ""1781_pullTokens"";
""1781_sellEther"" -> ""1781__newOrder"";
""1781_buyOrderWithEth"" -> ""1781__executeOrder"";
""1781_sellEtherWithRing"" -> ""1781__newOrder"";
""1781_buyOrderWithERC20Token"" -> ""1781__executeOrder"";
""1781__executeOrder"" -> ""1781__tradeMiningAndFees"";
""1781_sellERC20Token"" -> ""1781_pullTokens"";
""1781__executeOrder"" -> ""1781__executeBuyOrder"";
""1781_tokenFallback"" -> ""1781__topUpTradeMining"";
""1781__executeOrder"" -> ""1781__executeTokenSwap"";
""1781_buyOrderWithERC20Token"" -> ""1781_pullTokens"";
""1781__executeOrder"" -> ""1781__executeSellOrder"";
""1781_tokenFallback"" -> ""1781__executeOrder"";
}
"
0xef58491224958d978facf55d2120c55a24516b98.sol,SecurityTokenRegistry,"contract SecurityTokenRegistry is ISecurityTokenRegistry, Util, Pausable, RegistryUpdater, ReclaimTokens { uint256 public registrationFee; event LogChangePolyRegisterationFee(uint256 _oldFee, uint256 _newFee); event LogNewSecurityToken(string _ticker, address indexed _securityTokenAddress, address indexed _owner); event LogAddCustomSecurityToken(string _name, string _symbol, address _securityToken, uint256 _addedAt); constructor ( address _polymathRegistry, address _stVersionProxy, uint256 _registrationFee ) public RegistryUpdater(_polymathRegistry) { registrationFee = _registrationFee; setProtocolVersion(_stVersionProxy, ); }",0,"subgraph cluster_4105_SecurityTokenRegistry {
label=""SecurityTokenRegistry"";
""4105_constructor"" [label=""constructor""];
""4105_unpause"" [label=""unpause""];
""4105_isSecurityToken"" [label=""isSecurityToken""];
""4105_getSecurityTokenData"" [label=""getSecurityTokenData""];
""4105_changePolyRegisterationFee"" [label=""changePolyRegisterationFee""];
""4105_getSecurityTokenAddress"" [label=""getSecurityTokenAddress""];
""4105_generateSecurityToken"" [label=""generateSecurityToken""];
""4105_addCustomSecurityToken"" [label=""addCustomSecurityToken""];
""4105_pause"" [label=""pause""];
""4105_setProtocolVersion"" [label=""setProtocolVersion""];
""4105_pause"" -> ""4105_onlyOwner"";
""4105_setProtocolVersion"" -> ""4105_onlyOwner"";
""4105_constructor"" -> ""4105_setProtocolVersion"";
""4105_addCustomSecurityToken"" -> ""4105_onlyOwner"";
""4105_addCustomSecurityToken"" -> ""4105_upper"";
""4105_generateSecurityToken"" -> ""4105_whenNotPaused"";
""4105_generateSecurityToken"" -> ""4105_upper"";
""4105_changePolyRegisterationFee"" -> ""4105_onlyOwner"";
""4105_getSecurityTokenAddress"" -> ""4105_upper"";
""4105_addCustomSecurityToken"" -> ""4105_whenNotPaused"";
""4105_constructor"" -> ""4105_constructor"";
""4105_unpause"" -> ""4105_onlyOwner"";
""4105_pause"" -> ""4105__pause"";
""4105_unpause"" -> ""4105__unpause"";
}
"
0x27945afcdea13201263bfe8c71d2e8fdffd35ff7.sol,UTU,"contract UTU { string public name = ; uint8 public decimals = 18; string public symbol = ; address public owner; address public feesAddr; address trancheAdmin; uint256 public totalSupply = 50000000000000000000000000; uint public trancheLevel = 1; uint256 public circulatingSupply = 0; uint maxTranche = 4; uint loopCount = 0; uint256 feePercent = 1500; uint256 public trancheOneSaleTime; bool public receiveEth = true; bool payFees = true; bool addTranches = true; bool trancheOne = true; mapping (address => uint256) public balances; mapping (address => uint256) public trancheOneBalances; mapping (address => mapping (address => uint256)) allowed; mapping(uint => uint256) public trancheTokens; mapping(uint => uint256) public trancheRate; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint _value); function UTU() { owner = msg.sender; feesAddr = msg.sender; trancheAdmin = msg.sender; trancheOneSaleTime = now + 182 days; populateTrancheTokens(); populateTrancheRates(); }",0,"subgraph cluster_1265_UTU {
label=""UTU"";
""1265_populateTrancheRates"" [label=""populateTrancheRates""];
""1265_rateOfSpecificTranche"" [label=""rateOfSpecificTranche""];
""1265_addTrancheRateAndTokens"" [label=""addTrancheRateAndTokens""];
""1265_transferFrom"" [label=""transferFrom""];
""1265_otcPurchase"" [label=""otcPurchase""];
""1265_changeTrancheAdmin"" [label=""changeTrancheAdmin""];
""1265_allowance"" [label=""allowance""];
""1265_toggleReceiveEth"" [label=""toggleReceiveEth""];
""1265_safeWithdrawal"" [label=""safeWithdrawal""];
""1265_div"" [label=""div""];
""1265_balanceInTranche"" [label=""balanceInTranche""];
""1265_balanceOf"" [label=""balanceOf""];
""1265_payFeesToggle"" [label=""payFeesToggle""];
""1265_populateTrancheTokens"" [label=""populateTrancheTokens""];
""1265_sub"" [label=""sub""];
""1265_fallback"" [label=""fallback""];
""1265_add"" [label=""add""];
""1265_trancheOneBalanceOf"" [label=""trancheOneBalanceOf""];
""1265_mul"" [label=""mul""];
""1265_updateTrancheRate"" [label=""updateTrancheRate""];
""1265_changeOwner"" [label=""changeOwner""];
""1265_closeTrancheAddition"" [label=""closeTrancheAddition""];
""1265_updateFeeAmount"" [label=""updateFeeAmount""];
""1265_approve"" [label=""approve""];
""1265_UTU"" [label=""UTU""];
""1265_balanceInSpecificTranche"" [label=""balanceInSpecificTranche""];
""1265_changeFeesAddress"" [label=""changeFeesAddress""];
""1265_transfer"" [label=""transfer""];
""1265_allocateTokens"" [label=""allocateTokens""];
""1265_otcPurchaseAndEscrow"" [label=""otcPurchaseAndEscrow""];
""1265_allocateTokens"" -> ""1265_sub"";
""1265_allocateTokens"" -> ""1265_add"";
""1265_transfer"" -> ""1265_add"";
""1265_allocateTokens"" -> ""1265_mul"";
""1265_UTU"" -> ""1265_populateTrancheRates"";
""1265_transfer"" -> ""1265_sub"";
""1265_otcPurchaseAndEscrow"" -> ""1265_add"";
""1265_transferFrom"" -> ""1265_add"";
""1265_fallback"" -> ""1265_allocateTokens"";
""1265_transferFrom"" -> ""1265_sub"";
""1265_otcPurchase"" -> ""1265_add"";
""1265_allocateTokens"" -> ""1265_div"";
""1265_allocateTokens"" -> ""1265_allocateTokens"";
""1265_addTrancheRateAndTokens"" -> ""1265_add"";
""1265_UTU"" -> ""1265_populateTrancheTokens"";
}
"
0x07c344edd719a356775e1fbd852c63dc46167b76.sol,ColumbusToken,contract ColumbusToken is IERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowed; mapping (address => bool) private _requested; uint256 private _totalSupply; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant max_supply = 879170 * 10**uint(decimals); constructor() public { _totalSupply = _tokens(1); _balances[msg.sender] = _tokens(1); },0,"subgraph cluster_590_ColumbusToken {
label=""ColumbusToken"";
""590_transfer"" [label=""transfer""];
""590__tokens"" [label=""_tokens""];
""590_getToken"" [label=""getToken""];
""590_totalSupply"" [label=""totalSupply""];
""590_getBalance"" [label=""getBalance""];
""590_constructor"" [label=""constructor""];
""590__transfer"" [label=""_transfer""];
""590__burn"" [label=""_burn""];
""590_approve"" [label=""approve""];
""590_decreaseAllowance"" [label=""decreaseAllowance""];
""590_increaseAllowance"" [label=""increaseAllowance""];
""590_balanceOf"" [label=""balanceOf""];
""590__mint"" [label=""_mint""];
""590_allowance"" [label=""allowance""];
""590__burnFrom"" [label=""_burnFrom""];
""590_transferFrom"" [label=""transferFrom""];
""590__burnFrom"" -> ""590__burn"";
""590_constructor"" -> ""590__tokens"";
""590_getToken"" -> ""590__tokens"";
""590_transfer"" -> ""590__transfer"";
""590_getBalance"" -> ""590_balanceOf"";
""590_transferFrom"" -> ""590__transfer"";
}
"
0xd9327279bd3fd58414f197bca4b8ca32ba150302.sol,BFCoin,contract BFCoin is StandardBurnableToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 0; uint256 public constant INITIAL_SUPPLY = 240000000; address public crowdsaleAddress; address public owner; constructor() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; owner=msg.sender; },0,"subgraph cluster_877_BFCoin {
label=""BFCoin"";
""877_tokenTransfer"" [label=""tokenTransfer""];
""877_constructor"" [label=""constructor""];
""877_setCrowdsale"" [label=""setCrowdsale""];
""877_tokenTransfer"" -> ""877_transferFrom"";
""877_tokenTransfer"" -> ""877_onlyCrowdsale"";
""877_setCrowdsale"" -> ""877_onlyOwner"";
}
"
0x1c9db47ee8abad20d28f9bbe2363ca0c8c9ab9b8.sol,Bitsense,"contract Bitsense is BitsenseToken(, , 8, 1000000000000000), ERC20, ERC223 { address private _owner; struct LockAccount{ uint status; }",0,"subgraph cluster_867_Bitsense {
label=""Bitsense"";
""867_getReward"" [label=""getReward""];
""867_transferFrom"" [label=""transferFrom""];
""867_isLock"" [label=""isLock""];
""867_totalSupply"" [label=""totalSupply""];
""867_getLockAccounts"" [label=""getLockAccounts""];
""867_setReward"" [label=""setReward""];
""867_setLockAccount"" [label=""setLockAccount""];
""867_getLockAccount"" [label=""getLockAccount""];
""867_approve"" [label=""approve""];
""867_unLockAccount"" [label=""unLockAccount""];
""867_claimReward"" [label=""claimReward""];
""867_allowance"" [label=""allowance""];
""867_balanceOf"" [label=""balanceOf""];
""867_Bitsense"" [label=""Bitsense""];
""867_isContract"" [label=""isContract""];
""867_transfer"" [label=""transfer""];
""867_claimReward"" -> ""867_isContract"";
""867_transfer"" -> ""867_isLock"";
""867_transfer"" -> ""867_isContract"";
}
"
0x41de5b7cf63c8d028daa2626d9aeaf02cad8c6c3.sol,DeCenterToken,"contract DeCenterToken is owned, queue, DSMath { string public standard = ; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 10000000000000000; uint256 public availableTokens = 6000000000000000; uint256 public teamAndExpertsTokens = 4000000000000000; uint256 public price = 0.0000000001 ether; uint public startTime; uint public refundStartTime; uint public refundDuration = 3 days; uint public firstStageDuration = 3 days; uint public lastScheduledTopUp; uint public lastProcessedDay = 3; uint public maxDailyCap = 3333300000000; mapping (uint => uint) public dailyTotals; uint public queuedAmount; address public beneficiary; address public expertsAccount; address public teamAccount; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); uint public cTime = 0; function setCTime(uint _cTime) onlyOwner { cTime = _cTime; }",0,"subgraph cluster_1216_DeCenterToken {
label=""DeCenterToken"";
""1216_scheduledTopUp"" [label=""scheduledTopUp""];
""1216_fallback"" [label=""fallback""];
""1216_setCTime"" [label=""setCTime""];
""1216_transfer"" [label=""transfer""];
""1216_buy"" [label=""buy""];
""1216_dayFor"" [label=""dayFor""];
""1216_processPendingTickets"" [label=""processPendingTickets""];
""1216_DeCenterToken"" [label=""DeCenterToken""];
""1216_transferFrom"" [label=""transferFrom""];
""1216_closeRefund"" [label=""closeRefund""];
""1216_lowerLimitForToday"" [label=""lowerLimitForToday""];
""1216_approve"" [label=""approve""];
""1216_today"" [label=""today""];
""1216_time"" [label=""time""];
""1216_refund"" [label=""refund""];
""1216_today"" -> ""1216_time"";
""1216_transferFrom"" -> ""1216_add"";
""1216_buy"" -> ""1216_div"";
""1216_processPendingTickets"" -> ""1216_sub"";
""1216_refund"" -> ""1216_add"";
""1216_lowerLimitForToday"" -> ""1216_today"";
""1216_processPendingTickets"" -> ""1216_queueSize"";
""1216_buy"" -> ""1216_add"";
""1216_buy"" -> ""1216_sub"";
""1216_transfer"" -> ""1216_sub"";
""1216_transferFrom"" -> ""1216_sub"";
""1216_setCTime"" -> ""1216_onlyOwner"";
""1216_processPendingTickets"" -> ""1216_peekQueue"";
""1216_transfer"" -> ""1216_refund"";
""1216_buy"" -> ""1216_pushQueue"";
""1216_scheduledTopUp"" -> ""1216_add"";
""1216_processPendingTickets"" -> ""1216_add"";
""1216_buy"" -> ""1216_lowerLimitForToday"";
""1216_refund"" -> ""1216_sub"";
""1216_buy"" -> ""1216_mul"";
""1216_buy"" -> ""1216_time"";
""1216_scheduledTopUp"" -> ""1216_time"";
""1216_closeRefund"" -> ""1216_time"";
""1216_scheduledTopUp"" -> ""1216_onlyOwner"";
""1216_fallback"" -> ""1216_buy"";
""1216_dayFor"" -> ""1216_sub"";
""1216_closeRefund"" -> ""1216_onlyOwner"";
""1216_refund"" -> ""1216_time"";
""1216_processPendingTickets"" -> ""1216_onlyOwner"";
""1216_transfer"" -> ""1216_add"";
""1216_scheduledTopUp"" -> ""1216_sub"";
""1216_processPendingTickets"" -> ""1216_time"";
""1216_DeCenterToken"" -> ""1216_scheduledTopUp"";
""1216_today"" -> ""1216_dayFor"";
""1216_processPendingTickets"" -> ""1216_popQueue"";
}
"
0x029606e5ec44cad1346d6a1273a53b971fa93ad6.sol,EMPRO,"contract EMPRO is Owned { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; bool private tradeable; uint256 private currentSupply; mapping(address => uint256) private balances; mapping(address => mapping(address=> uint256)) private allowed; mapping(address => bool) private lockedAccounts; event ReceivedEth(address indexed _from, uint256 _value); function () payable public { emit ReceivedEth(msg.sender, msg.value); }",0,"subgraph cluster_841_EMPRO {
label=""EMPRO"";
""841_balanceOf"" [label=""balanceOf""];
""841_transferFrom"" [label=""transferFrom""];
""841_BuyToken"" [label=""BuyToken""];
""841_UnlockAccount"" [label=""UnlockAccount""];
""841_decreaseApproval"" [label=""decreaseApproval""];
""841_transfer"" [label=""transfer""];
""841_SetTradeable"" [label=""SetTradeable""];
""841_increaseApproval"" [label=""increaseApproval""];
""841_EMPRO"" [label=""EMPRO""];
""841_MintToken"" [label=""MintToken""];
""841_LockAccount"" [label=""LockAccount""];
""841_FoundationTransfer"" [label=""FoundationTransfer""];
""841_IsTradeable"" [label=""IsTradeable""];
""841_approve"" [label=""approve""];
""841_DestroyToken"" [label=""DestroyToken""];
""841_allowance"" [label=""allowance""];
""841_fallback"" [label=""fallback""];
""841_totalSupply"" [label=""totalSupply""];
""841_transfer"" -> ""841_notLocked"";
""841_LockAccount"" -> ""841_onlyOwner"";
""841_transferFrom"" -> ""841_notLocked"";
""841_SetTradeable"" -> ""841_onlyOwner"";
""841_FoundationTransfer"" -> ""841_onlyOwner"";
""841_BuyToken"" -> ""841_onlyOwner"";
""841_DestroyToken"" -> ""841_onlyOwner"";
""841_MintToken"" -> ""841_onlyOwner"";
""841_UnlockAccount"" -> ""841_onlyOwner"";
}
"
0x33ce216c10dea5e724b7a90628ce7853eef127b3.sol,Synth,"contract Synth is ExternStateToken { address public feePoolProxy; address public synthetixProxy; bytes32 public currencyKey; uint8 constant DECIMALS = 18; constructor(address _proxy, TokenState _tokenState, address _synthetixProxy, address _feePoolProxy, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint _totalSupply ) ExternStateToken(_proxy, _tokenState, _tokenName, _tokenSymbol, _totalSupply, DECIMALS, _owner) public { require(_proxy != address(0), ); require(_synthetixProxy != address(0), ); require(_feePoolProxy != address(0), ); require(_owner != 0, ); require(ISynthetix(_synthetixProxy).synths(_currencyKey) == Synth(0), ); feePoolProxy = _feePoolProxy; synthetixProxy = _synthetixProxy; currencyKey = _currencyKey; }",0,"subgraph cluster_1568_ISynthetixState {
label=""ISynthetixState"";
""1568_debtLedgerLength"" [label=""debtLedgerLength""];
""1568_hasIssued"" [label=""hasIssued""];
""1568_clearIssuanceData"" [label=""clearIssuanceData""];
""1568_lastDebtLedgerEntry"" [label=""lastDebtLedgerEntry""];
""1568_incrementTotalIssuerCount"" [label=""incrementTotalIssuerCount""];
""1568_setCurrentIssuanceData"" [label=""setCurrentIssuanceData""];
""1568_appendDebtLedgerValue"" [label=""appendDebtLedgerValue""];
""1568_decrementTotalIssuerCount"" [label=""decrementTotalIssuerCount""];
}
"
0x3684914d935b09201ca0bf41675c722e387039ee.sol,CappedToken,contract CappedToken is MintableToken { uint256 public cap; function CappedToken(uint256 _cap) public { require(_cap > 0); cap = _cap; },0,"subgraph cluster_760_CappedToken {
label=""CappedToken"";
""760_mint"" [label=""mint""];
""760_CappedToken"" [label=""CappedToken""];
""760_mint"" -> ""760_mint"";
""760_mint"" -> ""760_canMint"";
""760_mint"" -> ""760_onlyOwner"";
}
"
0xef2b48f279c45bec606efafb63e2372c97db4809.sol,LightShadowChain,contract LightShadowChain is ERC20 { uint256 public totalSupply; uint public decimals; string public symbol; string public name; mapping (address => mapping (address => uint256)) approach; mapping (address => uint256) holders; constructor() public { name = ; symbol = ; decimals = 18; totalSupply = 3000000000 * 10**uint(decimals); holders[msg.sender] = totalSupply; },0,"subgraph cluster_365_LightShadowChain {
label=""LightShadowChain"";
""365_approve"" [label=""approve""];
""365_fallback"" [label=""fallback""];
""365_transferFrom"" [label=""transferFrom""];
""365_allowance"" [label=""allowance""];
""365_constructor"" [label=""constructor""];
""365_balanceOf"" [label=""balanceOf""];
""365_transfer"" [label=""transfer""];
}
"
0x2747fe8dc21d5efcc0787101dc986df028bd42b9.sol,HyperETH,contract HyperETH { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1888_HyperETH {
label=""HyperETH"";
""1888_disableInitialStage"" [label=""disableInitialStage""];
""1888_myDividends"" [label=""myDividends""];
""1888_isContract"" [label=""isContract""];
""1888_myLastRef"" [label=""myLastRef""];
""1888_buyPrice"" [label=""buyPrice""];
""1888_exit"" [label=""exit""];
""1888_setSymbol"" [label=""setSymbol""];
""1888_fallback"" [label=""fallback""];
""1888_setStakingRequirement"" [label=""setStakingRequirement""];
""1888_sell"" [label=""sell""];
""1888_transfer"" [label=""transfer""];
""1888_handleLastRef"" [label=""handleLastRef""];
""1888_payFund"" [label=""payFund""];
""1888_transferAndCall"" [label=""transferAndCall""];
""1888_setName"" [label=""setName""];
""1888_setCanAcceptTokens"" [label=""setCanAcceptTokens""];
""1888_etherToSendFund"" [label=""etherToSendFund""];
""1888_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1888_setAdministrator"" [label=""setAdministrator""];
""1888_purchaseInternal"" [label=""purchaseInternal""];
""1888_balanceOf"" [label=""balanceOf""];
""1888_sqrt"" [label=""sqrt""];
""1888_dividendsOf"" [label=""dividendsOf""];
""1888_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1888_withdraw"" [label=""withdraw""];
""1888_totalSupply"" [label=""totalSupply""];
""1888_myTokens"" [label=""myTokens""];
""1888_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1888_sellPrice"" [label=""sellPrice""];
""1888_buy"" [label=""buy""];
""1888_reinvest"" [label=""reinvest""];
""1888_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1888_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1888_purchaseTokens"" [label=""purchaseTokens""];
""1888_constructor"" [label=""constructor""];
""1888_fallback"" -> ""1888_purchaseInternal"";
""1888_withdraw"" -> ""1888_onlyStronghands"";
""1888_disableInitialStage"" -> ""1888_onlyAdministrator"";
""1888_sell"" -> ""1888_ambassAntiPumpAndDump"";
""1888_sell"" -> ""1888_tokensToEthereum_"";
""1888_calculateEthereumReceived"" -> ""1888_tokensToEthereum_"";
""1888_purchaseTokens"" -> ""1888_antiEarlyWhale"";
""1888_transferAndCall"" -> ""1888_transfer"";
""1888_buy"" -> ""1888_handleLastRef"";
""1888_reinvest"" -> ""1888_myDividends"";
""1888_sell"" -> ""1888_onlyBagholders"";
""1888_transfer"" -> ""1888_withdraw"";
""1888_calculateTokensReceived"" -> ""1888_ethereumToTokens_"";
""1888_buyPrice"" -> ""1888_tokensToEthereum_"";
""1888_fallback"" -> ""1888_handleLastRef"";
""1888_purchaseInternal"" -> ""1888_purchaseTokens"";
""1888_exit"" -> ""1888_withdraw"";
""1888_buy"" -> ""1888_purchaseInternal"";
""1888_purchaseTokens"" -> ""1888_ethereumToTokens_"";
""1888_myDividends"" -> ""1888_dividendsOf"";
""1888_setAdministrator"" -> ""1888_onlyAdministrator"";
""1888_transfer"" -> ""1888_ambassOnlyToAmbass"";
""1888_ethereumToTokens_"" -> ""1888_sqrt"";
""1888_reinvest"" -> ""1888_purchaseInternal"";
""1888_setName"" -> ""1888_onlyAdministrator"";
""1888_reinvest"" -> ""1888_handleLastRef"";
""1888_withdraw"" -> ""1888_myDividends"";
""1888_setStakingRequirement"" -> ""1888_onlyAdministrator"";
""1888_purchaseInternal"" -> ""1888_totalEthereumBalance"";
""1888_myTokens"" -> ""1888_balanceOf"";
""1888_sellPrice"" -> ""1888_tokensToEthereum_"";
""1888_exit"" -> ""1888_sell"";
""1888_reinvest"" -> ""1888_onlyStronghands"";
""1888_setCanAcceptTokens"" -> ""1888_onlyAdministrator"";
""1888_transfer"" -> ""1888_onlyBagholders"";
""1888_transfer"" -> ""1888_myDividends"";
""1888_setSymbol"" -> ""1888_onlyAdministrator"";
""1888_transferAndCall"" -> ""1888_isContract"";
}
"
0x715423a818f1f9a85c66d81d2809e0a4dadf07f3.sol,Token,contract Token is TokenI { struct FreezeInfo { address user; uint256 amount; },0,"subgraph cluster_1226_Token {
label=""Token"";
""1226_transfer"" [label=""transfer""];
""1226_transferMulti"" [label=""transferMulti""];
""1226_changeOwner"" [label=""changeOwner""];
""1226_isContract"" [label=""isContract""];
""1226__generateTokens"" [label=""_generateTokens""];
""1226_changeAirdropQty"" [label=""changeAirdropQty""];
""1226_approve"" [label=""approve""];
""1226_Token"" [label=""Token""];
""1226_changePaused"" [label=""changePaused""];
""1226_destroyTokens"" [label=""destroyTokens""];
""1226__destroyTokens"" [label=""_destroyTokens""];
""1226_changeTokensPerEther"" [label=""changeTokensPerEther""];
""1226__freeze"" [label=""_freeze""];
""1226_changeAirdropTotalQty"" [label=""changeAirdropTotalQty""];
""1226_freeze"" [label=""freeze""];
""1226_generateTokens"" [label=""generateTokens""];
""1226_approveAndCall"" [label=""approveAndCall""];
""1226_transferFrom"" [label=""transferFrom""];
""1226_fallback"" [label=""fallback""];
""1226_unFreeze"" [label=""unFreeze""];
""1226_transfer"" -> ""1226_moreThanZero"";
""1226_transfer"" -> ""1226_realUser"";
""1226_destroyTokens"" -> ""1226_onlyOwner"";
""1226_changeTokensPerEther"" -> ""1226_onlyController"";
""1226_generateTokens"" -> ""1226__generateTokens"";
""1226_changePaused"" -> ""1226_onlyController"";
""1226_approve"" -> ""1226_moreThanZero"";
""1226_changeOwner"" -> ""1226_onlyOwner"";
""1226_freeze"" -> ""1226_moreThanZero"";
""1226_approveAndCall"" -> ""1226_approve"";
""1226_destroyTokens"" -> ""1226__destroyTokens"";
""1226_freeze"" -> ""1226__freeze"";
""1226_changeAirdropQty"" -> ""1226_onlyController"";
""1226_freeze"" -> ""1226_onlyController"";
""1226_changeAirdropTotalQty"" -> ""1226_onlyController"";
""1226__freeze"" -> ""1226_moreThanZero"";
""1226_generateTokens"" -> ""1226_onlyController"";
""1226_transferFrom"" -> ""1226_moreThanZero"";
""1226_fallback"" -> ""1226__generateTokens"";
""1226_transferFrom"" -> ""1226_realUser"";
""1226_fallback"" -> ""1226__freeze"";
""1226_unFreeze"" -> ""1226_onlyOwner"";
}
"
0x0381e7c68a576403988336e8c6ad25409f883138.sol,BMGame,contract BMGame is BMEvents { using SafeMath for *; using BMKeysCalcLong for uint256; address public Banker_Address; uint256 private rndExtra_ = 30; uint256 private rndGap_ = 30; uint256 constant private rndInit_ = 24 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 24 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public pID_ = 0; mapping(address => uint256) public pIDxAddr_; mapping(uint256 => BMDatasets.Player) public plyr_; mapping(uint256 => mapping(uint256 => BMDatasets.PlayerRounds)) public plyrRnds_; uint256 public rID_; mapping(uint256 => BMDatasets.Round) public round_; mapping(uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping(uint256 => BMDatasets.TeamFee) public fees_; mapping(uint256 => BMDatasets.PotSplit) public potSplit_; address public owner; constructor() public { owner = msg.sender; fees_[0] = BMDatasets.TeamFee(70); fees_[1] = BMDatasets.TeamFee(55); fees_[2] = BMDatasets.TeamFee(40); fees_[3] = BMDatasets.TeamFee(30); potSplit_[0] = BMDatasets.PotSplit(50); potSplit_[1] = BMDatasets.PotSplit(40); potSplit_[2] = BMDatasets.PotSplit(25); potSplit_[3] = BMDatasets.PotSplit(10); },0,"subgraph cluster_3398_BMGame {
label=""BMGame"";
""3398_activate"" [label=""activate""];
""3398_withdraw"" [label=""withdraw""];
""3398_getTimeLeft"" [label=""getTimeLeft""];
""3398_transferBanker"" [label=""transferBanker""];
""3398_endRound"" [label=""endRound""];
""3398_managePlayer"" [label=""managePlayer""];
""3398_distribute"" [label=""distribute""];
""3398_withdrawEarnings"" [label=""withdrawEarnings""];
""3398_reLoadKey"" [label=""reLoadKey""];
""3398_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""3398_getBuyPrice"" [label=""getBuyPrice""];
""3398_buyKey"" [label=""buyKey""];
""3398_updateMasks"" [label=""updateMasks""];
""3398_updateGenVault"" [label=""updateGenVault""];
""3398_determinePID"" [label=""determinePID""];
""3398_transferOwnership"" [label=""transferOwnership""];
""3398_getPlayerVaults"" [label=""getPlayerVaults""];
""3398_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""3398_airdrop"" [label=""airdrop""];
""3398_calcKeysReceived"" [label=""calcKeysReceived""];
""3398_endTx"" [label=""endTx""];
""3398_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""3398_reLoadCore"" [label=""reLoadCore""];
""3398_updateTimer"" [label=""updateTimer""];
""3398_buyCore"" [label=""buyCore""];
""3398_core"" [label=""core""];
""3398_iWantXKeys"" [label=""iWantXKeys""];
""3398_fallback"" [label=""fallback""];
""3398_constructor"" [label=""constructor""];
""3398_verifyTeam"" [label=""verifyTeam""];
""3398_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""3398_fallback"" -> ""3398_isWithinLimits"";
""3398_reLoadKey"" -> ""3398_isHuman"";
""3398_buyKey"" -> ""3398_isHuman"";
""3398_fallback"" -> ""3398_isActivated"";
""3398_core"" -> ""3398_managePlayer"";
""3398_fallback"" -> ""3398_buyCore"";
""3398_core"" -> ""3398_updateTimer"";
""3398_updateGenVault"" -> ""3398_calcUnMaskedEarnings"";
""3398_distribute"" -> ""3398_updateMasks"";
""3398_reLoadCore"" -> ""3398_withdrawEarnings"";
""3398_buyCore"" -> ""3398_core"";
""3398_buyKey"" -> ""3398_isActivated"";
""3398_getPlayerVaults"" -> ""3398_calcUnMaskedEarnings"";
""3398_buyKey"" -> ""3398_verifyTeam"";
""3398_buyKey"" -> ""3398_determinePID"";
""3398_getPlayerVaults"" -> ""3398_getPlayerVaultsHelper"";
""3398_core"" -> ""3398_airdrop"";
""3398_withdraw"" -> ""3398_endRound"";
""3398_reLoadKey"" -> ""3398_isWithinLimits"";
""3398_reLoadKey"" -> ""3398_isActivated"";
""3398_core"" -> ""3398_distribute"";
""3398_core"" -> ""3398_endTx"";
""3398_withdrawEarnings"" -> ""3398_updateGenVault"";
""3398_withdraw"" -> ""3398_isActivated"";
""3398_buyKey"" -> ""3398_isWithinLimits"";
""3398_fallback"" -> ""3398_determinePID"";
""3398_reLoadKey"" -> ""3398_verifyTeam"";
""3398_buyKey"" -> ""3398_buyCore"";
""3398_managePlayer"" -> ""3398_updateGenVault"";
""3398_buyCore"" -> ""3398_endRound"";
""3398_withdraw"" -> ""3398_withdrawEarnings"";
""3398_getPlayerInfoByAddress"" -> ""3398_calcUnMaskedEarnings"";
""3398_withdraw"" -> ""3398_isHuman"";
""3398_reLoadCore"" -> ""3398_endRound"";
""3398_reLoadCore"" -> ""3398_core"";
""3398_reLoadKey"" -> ""3398_reLoadCore"";
""3398_fallback"" -> ""3398_isHuman"";
}
"
0x5bf1e908f524c02198046737c5ebb1489249bab7.sol,RingCoin,"contract RingCoin is admined, ERC20Token { string public name = ; string public symbol = ; string public version = ; uint8 public decimals = 18; function RingCoin() public { totalSupply_ = 90800000 * (10**uint256(decimals)); balances[this] = totalSupply_; allowed[this][msg.sender] = balances[this]; Transfer(0, this, totalSupply_); Approval(this, msg.sender, balances[this]); }",0,"subgraph cluster_517_RingCoin {
label=""RingCoin"";
""517_RingCoin"" [label=""RingCoin""];
""517_fallback"" [label=""fallback""];
}
"
0x51f171b6bc39456dd94a303537d995ea990e1146.sol,TTOH,"contract TTOH is owned, SafeMath { string public name; string public symbol; uint public decimals = 8; uint public totalSupply; mapping (address => uint) public balanceOf; mapping (address => mapping (address => uint)) public allowance; mapping (address => uint) public lockInfo; uint constant valueTotal = 10 * 10000 * 10000 * 10 ** 8; uint constant valueSale = valueTotal / 100 * 30; uint constant valueTeam = valueTotal / 100 * 70; uint public minEth = 0.1 ether; uint public maxEth = 1000 ether; uint256 public buyPrice = 5000; uint256 public sellPrice = 1; bool public buyTradeConfir = false; bool public sellTradeConfir = false; uint public saleQuantity = 0; uint public ethQuantity = 0; modifier validAddress(address _address) { assert(0x0 != _address); _; }",0,"subgraph cluster_903_TTOH {
label=""TTOH"";
""903_stopBuy"" [label=""stopBuy""];
""903_starSell"" [label=""starSell""];
""903_buy"" [label=""buy""];
""903_validTransfer"" [label=""validTransfer""];
""903_transferFrom"" [label=""transferFrom""];
""903_transferInner"" [label=""transferInner""];
""903_TTOH"" [label=""TTOH""];
""903_approve"" [label=""approve""];
""903_burn"" [label=""burn""];
""903_fallback"" [label=""fallback""];
""903_sell"" [label=""sell""];
""903_transfer"" [label=""transfer""];
""903_setPrices"" [label=""setPrices""];
""903_lock"" [label=""lock""];
""903_burnFrom"" [label=""burnFrom""];
""903_starBuy"" [label=""starBuy""];
""903_stopSell"" [label=""stopSell""];
""903_stopBuy"" -> ""903_onlyOwner"";
""903_transfer"" -> ""903_validAddress"";
""903_starBuy"" -> ""903_onlyOwner"";
""903_buy"" -> ""903_transferInner"";
""903_approve"" -> ""903_validAddress"";
""903_transferFrom"" -> ""903_validAddress"";
""903_buy"" -> ""903_validQuantity"";
""903_sell"" -> ""903_transferFrom"";
""903_transfer"" -> ""903_validTransfer"";
""903_starSell"" -> ""903_onlyOwner"";
""903_setPrices"" -> ""903_onlyOwner"";
""903_buy"" -> ""903_validEth"";
""903_buy"" -> ""903_safeAdd"";
""903_transferFrom"" -> ""903_validTransfer"";
""903_stopSell"" -> ""903_onlyOwner"";
""903_buy"" -> ""903_validPeriod"";
""903_lock"" -> ""903_validAddress"";
""903_fallback"" -> ""903_buy"";
""903_buy"" -> ""903_lock"";
""903_buy"" -> ""903_safeSub"";
}
"
0x88c1f00df493673f72aa0481187a0ff8c5ad0e14.sol,EtherSpaceCore,"contract EtherSpaceCore is ERC721Token, Ownable, Claimable, Destructible { string public url = ""https: using SafeMath for uint256; struct Spaceship { uint16 model; bool battleMode; uint32 battleWins; uint32 battleLosses; uint256 battleStake; bytes5 upgrades; bool isAuction; uint256 auctionPrice; }",0,"subgraph cluster_2401_EtherSpaceCore {
label=""EtherSpaceCore"";
""2401_newSpaceshipUpgrade"" [label=""newSpaceshipUpgrade""];
""2401_getPlayerBalance"" [label=""getPlayerBalance""];
""2401_getPlayerSpaceshipBattleStakeById"" [label=""getPlayerSpaceshipBattleStakeById""];
""2401__generateSpaceship"" [label=""_generateSpaceship""];
""2401_battleRemove"" [label=""battleRemove""];
""2401_getPlayerSpaceshipAuctionById"" [label=""getPlayerSpaceshipAuctionById""];
""2401_getSpaceshipUpgradeCount"" [label=""getSpaceshipUpgradeCount""];
""2401_sellSpaceship"" [label=""sellSpaceship""];
""2401_symbol"" [label=""symbol""];
""2401_getPlayerSpaceshipBattleWinsById"" [label=""getPlayerSpaceshipBattleWinsById""];
""2401_setBattleContract"" [label=""setBattleContract""];
""2401_buySpaceshipUpgrade"" [label=""buySpaceshipUpgrade""];
""2401_fallback"" [label=""fallback""];
""2401_bidSpaceship"" [label=""bidSpaceship""];
""2401_name"" [label=""name""];
""2401_getSpaceshipProductTotalSoldByModel"" [label=""getSpaceshipProductTotalSoldByModel""];
""2401_battle"" [label=""battle""];
""2401_getSpaceshipProductCount"" [label=""getSpaceshipProductCount""];
""2401_setSpaceshipPrice"" [label=""setSpaceshipPrice""];
""2401_getPlayerSpaceships"" [label=""getPlayerSpaceships""];
""2401_ids"" [label=""ids""];
""2401_battleAdd"" [label=""battleAdd""];
""2401_getPlayerSpaceshipOwnerById"" [label=""getPlayerSpaceshipOwnerById""];
""2401_getPlayerSpaceshipBattleLossesById"" [label=""getPlayerSpaceshipBattleLossesById""];
""2401_constructor"" [label=""constructor""];
""2401_getPlayerSpaceshipBattleLevelById"" [label=""getPlayerSpaceshipBattleLevelById""];
""2401_getPlayerSpaceshipCount"" [label=""getPlayerSpaceshipCount""];
""2401_giftSpaceship"" [label=""giftSpaceship""];
""2401_getSpaceshipProductAttributesByModel"" [label=""getSpaceshipProductAttributesByModel""];
""2401_cashOut"" [label=""cashOut""];
""2401_getPlayerSpaceshipBattleModeById"" [label=""getPlayerSpaceshipBattleModeById""];
""2401_setBattleFee"" [label=""setBattleFee""];
""2401_getPlayerSpaceshipAuctionPriceById"" [label=""getPlayerSpaceshipAuctionPriceById""];
""2401_getPlayerSpaceshipModelById"" [label=""getPlayerSpaceshipModelById""];
""2401_getSpaceshipTotalSold"" [label=""getSpaceshipTotalSold""];
""2401_setUpgradeContract"" [label=""setUpgradeContract""];
""2401_getPlayerSpaceshipModelByIndex"" [label=""getPlayerSpaceshipModelByIndex""];
""2401__setUpgradeContract"" [label=""_setUpgradeContract""];
""2401_getSpaceshipUpgradePriceByModel"" [label=""getSpaceshipUpgradePriceByModel""];
""2401_getPlayerSpaceshipUpgradesById"" [label=""getPlayerSpaceshipUpgradesById""];
""2401_buySpaceship"" [label=""buySpaceship""];
""2401_getSpaceshipProductClassByModel"" [label=""getSpaceshipProductClassByModel""];
""2401_getPlayerSpaceshipBattleStakePaidById"" [label=""getPlayerSpaceshipBattleStakePaidById""];
""2401__newSpaceshipProduct"" [label=""_newSpaceshipProduct""];
""2401_getSpaceshipUpgradeTotalSoldByModel"" [label=""getSpaceshipUpgradeTotalSoldByModel""];
""2401__setBattleContract"" [label=""_setBattleContract""];
""2401_newSpaceshipProduct"" [label=""newSpaceshipProduct""];
""2401_getSpaceshipProductPriceByModel"" [label=""getSpaceshipProductPriceByModel""];
""2401_giftSpaceship"" -> ""2401_onlyOwner"";
""2401_battleRemove"" -> ""2401_onlyOwnerOf"";
""2401_bidSpaceship"" -> ""2401_getPlayerSpaceshipAuctionPriceById"";
""2401_getSpaceshipTotalSold"" -> ""2401_totalSupply"";
""2401_setUpgradeContract"" -> ""2401__setUpgradeContract"";
""2401_getPlayerSpaceshipOwnerById"" -> ""2401_ownerOf"";
""2401_buySpaceshipUpgrade"" -> ""2401_onlyOwnerOf"";
""2401_sellSpaceship"" -> ""2401_onlyOwnerOf"";
""2401_buySpaceship"" -> ""2401__generateSpaceship"";
""2401_newSpaceshipProduct"" -> ""2401__newSpaceshipProduct"";
""2401_battle"" -> ""2401_getPlayerSpaceshipBattleStakeById"";
""2401_newSpaceshipProduct"" -> ""2401_onlyOwner"";
""2401_setBattleContract"" -> ""2401_onlyOwner"";
""2401_bidSpaceship"" -> ""2401_clearApprovalAndTransfer"";
""2401_battle"" -> ""2401_onlyOwnerOf"";
""2401_newSpaceshipUpgrade"" -> ""2401_onlyOwner"";
""2401_constructor"" -> ""2401__newSpaceshipProduct"";
""2401_battleAdd"" -> ""2401_onlyOwnerOf"";
""2401_getPlayerSpaceshipModelByIndex"" -> ""2401_tokensOf"";
""2401_getPlayerSpaceships"" -> ""2401_tokensOf"";
""2401_buySpaceshipUpgrade"" -> ""2401_getPlayerSpaceshipBattleModeById"";
""2401_bidSpaceship"" -> ""2401_getPlayerSpaceshipAuctionById"";
""2401_battleAdd"" -> ""2401_getPlayerSpaceshipBattleStakeById"";
""2401_setSpaceshipPrice"" -> ""2401_onlyOwner"";
""2401_setBattleContract"" -> ""2401__setBattleContract"";
""2401_setBattleFee"" -> ""2401_onlyOwner"";
""2401_getPlayerSpaceshipCount"" -> ""2401_balanceOf"";
""2401_battle"" -> ""2401_ownerOf"";
""2401_setUpgradeContract"" -> ""2401_onlyOwner"";
""2401_bidSpaceship"" -> ""2401_getPlayerSpaceshipOwnerById"";
""2401_giftSpaceship"" -> ""2401__generateSpaceship"";
""2401__generateSpaceship"" -> ""2401__mint"";
}
"
0xec987914ade432ce9806f418787a4ed0b0e77000.sol,LuckyDice,"contract LuckyDice is DSSafeAddSub { modifier betIsValid(uint _betSize, uint minRollLimit, uint maxRollLimit) { if (_betSize < minBet || maxRollLimit < minNumber || minRollLimit > maxNumber || maxRollLimit - 1 <= minRollLimit) throw; _; }",0,"subgraph cluster_1265_LuckyDice {
label=""LuckyDice"";
""1265_ownerSetMaxProfit"" [label=""ownerSetMaxProfit""];
""1265_ownerTransferEther"" [label=""ownerTransferEther""];
""1265_ownerRefundPlayer"" [label=""ownerRefundPlayer""];
""1265_ownerSetCasino"" [label=""ownerSetCasino""];
""1265_playerMakeBet"" [label=""playerMakeBet""];
""1265_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""1265_getToJackpot"" [label=""getToJackpot""];
""1265_playerWithdrawPendingTransactions"" [label=""playerWithdrawPendingTransactions""];
""1265_withdraw"" [label=""withdraw""];
""1265_ownerSetJpMinBet"" [label=""ownerSetJpMinBet""];
""1265_playerGetPendingTxByAddress"" [label=""playerGetPendingTxByAddress""];
""1265_getFullProfit"" [label=""getFullProfit""];
""1265_LuckyDice"" [label=""LuckyDice""];
""1265_ownerChangeOwner"" [label=""ownerChangeOwner""];
""1265_ownerSetHouseEdge"" [label=""ownerSetHouseEdge""];
""1265_ownerkill"" [label=""ownerkill""];
""1265_ownerSetMinBet"" [label=""ownerSetMinBet""];
""1265_ownerPausePayouts"" [label=""ownerPausePayouts""];
""1265_ownerPauseGame"" [label=""ownerPauseGame""];
""1265_getProfit"" [label=""getProfit""];
""1265_fallback"" [label=""fallback""];
""1265_ownerTransferEther"" -> ""1265_safeSub"";
""1265_playerMakeBet"" -> ""1265_getProfit"";
""1265_playerMakeBet"" -> ""1265_gameIsActive"";
""1265_playerMakeBet"" -> ""1265_getFullProfit"";
""1265_fallback"" -> ""1265_safeAdd"";
""1265_playerMakeBet"" -> ""1265_getToJackpot"";
""1265_ownerSetMinBet"" -> ""1265_onlyOwner"";
""1265_playerMakeBet"" -> ""1265_safeSub"";
""1265_withdraw"" -> ""1265_payoutsAreActive"";
""1265_ownerRefundPlayer"" -> ""1265_safeSub"";
""1265_getFullProfit"" -> ""1265_safeSub"";
""1265_ownerSetMaxProfit"" -> ""1265_onlyOwner"";
""1265_ownerPausePayouts"" -> ""1265_onlyOwner"";
""1265_ownerSetJpMinBet"" -> ""1265_onlyOwner"";
""1265_withdraw"" -> ""1265_safeSub"";
""1265_ownerUpdateContractBalance"" -> ""1265_onlyOwner"";
""1265_LuckyDice"" -> ""1265_ownerSetHouseEdge"";
""1265_withdraw"" -> ""1265_safeAdd"";
""1265_playerMakeBet"" -> ""1265_safeAdd"";
""1265_fallback"" -> ""1265_onlyOwner"";
""1265_ownerSetCasino"" -> ""1265_onlyOwner"";
""1265_ownerkill"" -> ""1265_onlyOwner"";
""1265_LuckyDice"" -> ""1265_ownerSetMinBet"";
""1265_ownerRefundPlayer"" -> ""1265_onlyOwner"";
""1265_playerWithdrawPendingTransactions"" -> ""1265_payoutsAreActive"";
""1265_ownerTransferEther"" -> ""1265_onlyOwner"";
""1265_ownerPauseGame"" -> ""1265_onlyOwner"";
""1265_ownerSetHouseEdge"" -> ""1265_onlyOwner"";
""1265_playerMakeBet"" -> ""1265_betIsValid"";
""1265_ownerChangeOwner"" -> ""1265_onlyOwner"";
""1265_LuckyDice"" -> ""1265_ownerSetMaxProfit"";
}
"
0xec3184af01ad86be9b54b6eb88c582bba53f4f65.sol,TokenTrust,"contract TokenTrust { address public owner; uint256 start; mapping(address=>uint256) public trust; event AddTrust(address indexed _token, uint256 indexed _trust); modifier onlyOwner() { if (msg.sender!=owner) revert(); _; }",0,"subgraph cluster_206_TokenTrust {
label=""TokenTrust"";
""206_getStart"" [label=""getStart""];
""206_fallback"" [label=""fallback""];
""206_TokenTrust"" [label=""TokenTrust""];
""206_addTokenTrust"" [label=""addTokenTrust""];
""206_getTokenTrust"" [label=""getTokenTrust""];
""206_transferOwnership"" [label=""transferOwnership""];
""206_withdrawTokens"" [label=""withdrawTokens""];
""206_transferOwnership"" -> ""206_onlyOwner"";
""206_withdrawTokens"" -> ""206_onlyOwner"";
}
"
0x360abb53840302d4b4b119d2004a856f1151366b.sol,AssemblyBase,contract AssemblyBase is DetailBase { struct Assembly { uint256 idParent; uint256 dna; uint64 releaseTime; uint64 updateTime; uint64 startMiningTime; uint64[] spares; uint8 countMiningDetail; uint8 rang; },0,"subgraph cluster_1200_AssemblyBase {
label=""AssemblyBase"";
""1200_startMining"" [label=""startMining""];
""1200_costRecharge"" [label=""costRecharge""];
""1200__transferRobot"" [label=""_transferRobot""];
""1200_getAllAssembly"" [label=""getAllAssembly""];
""1200__checkDetail"" [label=""_checkDetail""];
""1200_changeAssembly"" [label=""changeAssembly""];
""1200__range"" [label=""_range""];
""1200_gatherDetails"" [label=""gatherDetails""];
""1200_getAssembly"" [label=""getAssembly""];
""1200__makeDna"" [label=""_makeDna""];
""1200__isCanMining"" [label=""_isCanMining""];
""1200_gatherDetails"" -> ""1200_whenNotPaused"";
""1200_changeAssembly"" -> ""1200_whenNotPaused"";
""1200_changeAssembly"" -> ""1200__makeDna"";
""1200_gatherDetails"" -> ""1200__makeDna"";
""1200_gatherDetails"" -> ""1200__checkDetail"";
""1200_gatherDetails"" -> ""1200__range"";
""1200_changeAssembly"" -> ""1200__range"";
""1200_startMining"" -> ""1200_whenNotPaused"";
""1200_changeAssembly"" -> ""1200__checkDetail"";
""1200__range"" -> ""1200__isCanMining"";
}
"
0xf4fe95603881d0e07954fd7605e0e9a916e42c44.sol,WHENToken,"contract WHENToken { using SafeMath for uint256; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; string public name; string public symbol; uint public decimals = 18; string public sign = ; string public logoPng = ""https: struct User { bool isRegistered; uint256 seedJiffys; uint256 interfaceEscrowJiffys; address referrer; }",0,"subgraph cluster_2495_WHENToken {
label=""WHENToken"";
""2495_isPlatformOrSupportManager"" [label=""isPlatformOrSupportManager""];
""2495_registerUserBonus"" [label=""registerUserBonus""];
""2495_transferFrom"" [label=""transferFrom""];
""2495_setWinNetworkFee"" [label=""setWinNetworkFee""];
""2495_setReferralSignupTokens"" [label=""setReferralSignupTokens""];
""2495_setOperatingStatus"" [label=""setOperatingStatus""];
""2495_registerUser"" [label=""registerUser""];
""2495_setIcoWallet"" [label=""setIcoWallet""];
""2495_setWeiExchangeRate"" [label=""setWeiExchangeRate""];
""2495_calculatePurchaseBonus"" [label=""calculatePurchaseBonus""];
""2495_isOperational"" [label=""isOperational""];
""2495_WHENToken"" [label=""WHENToken""];
""2495_allowance"" [label=""allowance""];
""2495_depositEscrow"" [label=""depositEscrow""];
""2495_isReferralSupported"" [label=""isReferralSupported""];
""2495_getRegisteredUser"" [label=""getRegisteredUser""];
""2495_authorizeIcoBurn"" [label=""authorizeIcoBurn""];
""2495_getTokenAllocations"" [label=""getTokenAllocations""];
""2495_balance"" [label=""balance""];
""2495_initialize"" [label=""initialize""];
""2495_fallback"" [label=""fallback""];
""2495_isPlatformManager"" [label=""isPlatformManager""];
""2495_buyUSD"" [label=""buyUSD""];
""2495_getSupportManager"" [label=""getSupportManager""];
""2495_pay"" [label=""pay""];
""2495_authorizeContract"" [label=""authorizeContract""];
""2495_getRegisteredUsers"" [label=""getRegisteredUsers""];
""2495_isContractAuthorized"" [label=""isContractAuthorized""];
""2495_transferableBalanceOf"" [label=""transferableBalanceOf""];
""2495_getIcoInfo"" [label=""getIcoInfo""];
""2495_buy"" [label=""buy""];
""2495_vestingGrant"" [label=""vestingGrant""];
""2495_balanceOf"" [label=""balanceOf""];
""2495_transfer"" [label=""transfer""];
""2495_refundEscrow"" [label=""refundEscrow""];
""2495_totalSupply"" [label=""totalSupply""];
""2495_vestingTransfer"" [label=""vestingTransfer""];
""2495_deauthorizeContract"" [label=""deauthorizeContract""];
""2495_setCentsExchangeRate"" [label=""setCentsExchangeRate""];
""2495_setPlatformManager"" [label=""setPlatformManager""];
""2495_approve"" [label=""approve""];
""2495_spendableBalanceOf"" [label=""spendableBalanceOf""];
""2495_processPurchase"" [label=""processPurchase""];
""2495_setUserSignupTokens"" [label=""setUserSignupTokens""];
""2495_processPayment"" [label=""processPayment""];
""2495_isUserRegistered"" [label=""isUserRegistered""];
""2495_processRegisterUser"" [label=""processRegisterUser""];
""2495_authorizeContract"" -> ""2495_requireContractOwner"";
""2495_processPurchase"" -> ""2495_transferableBalanceOf"";
""2495_vestingGrant"" -> ""2495_requireIsOperational"";
""2495_registerUserBonus"" -> ""2495_isReferralSupported"";
""2495_getRegisteredUsers"" -> ""2495_requirePlatformManager"";
""2495_buy"" -> ""2495_requireIsOperational"";
""2495_pay"" -> ""2495_processPayment"";
""2495_setCentsExchangeRate"" -> ""2495_requireContractOwner"";
""2495_transfer"" -> ""2495_transferableBalanceOf"";
""2495_pay"" -> ""2495_isContractAuthorized"";
""2495_setReferralSignupTokens"" -> ""2495_requireIsOperational"";
""2495_initialize"" -> ""2495_requireContractOwner"";
""2495_buyUSD"" -> ""2495_requirePlatformManager"";
""2495_refundEscrow"" -> ""2495_isContractAuthorized"";
""2495_refundEscrow"" -> ""2495_isPlatformManager"";
""2495_deauthorizeContract"" -> ""2495_requireIsOperational"";
""2495_setPlatformManager"" -> ""2495_requireIsOperational"";
""2495_registerUserBonus"" -> ""2495_requireIsOperational"";
""2495_processPayment"" -> ""2495_spendableBalanceOf"";
""2495_setIcoWallet"" -> ""2495_requireContractOwner"";
""2495_fallback"" -> ""2495_buy"";
""2495_getRegisteredUser"" -> ""2495_requirePlatformManager"";
""2495_depositEscrow"" -> ""2495_spendableBalanceOf"";
""2495_processPayment"" -> ""2495_isUserRegistered"";
""2495_processPurchase"" -> ""2495_calculatePurchaseBonus"";
""2495_pay"" -> ""2495_requireIsOperational"";
""2495_transferFrom"" -> ""2495_transferableBalanceOf"";
""2495_buy"" -> ""2495_processPurchase"";
""2495_setUserSignupTokens"" -> ""2495_requireContractOwner"";
""2495_depositEscrow"" -> ""2495_isUserRegistered"";
""2495_refundEscrow"" -> ""2495_requireIsOperational"";
""2495_initialize"" -> ""2495_authorizeContract"";
""2495_vestingGrant"" -> ""2495_isContractAuthorized"";
""2495_depositEscrow"" -> ""2495_isPlatformManager"";
""2495_registerUserBonus"" -> ""2495_processRegisterUser"";
""2495_setWinNetworkFee"" -> ""2495_requireContractOwner"";
""2495_vestingGrant"" -> ""2495_spendableBalanceOf"";
""2495_registerUser"" -> ""2495_balanceOf"";
""2495_registerUserBonus"" -> ""2495_requirePlatformManager"";
""2495_setWinNetworkFee"" -> ""2495_requireIsOperational"";
""2495_setIcoWallet"" -> ""2495_requireIsOperational"";
""2495_registerUserBonus"" -> ""2495_balanceOf"";
""2495_processRegisterUser"" -> ""2495_processPurchase"";
""2495_setCentsExchangeRate"" -> ""2495_requireIsOperational"";
""2495_setOperatingStatus"" -> ""2495_requireContractOwner"";
""2495_authorizeContract"" -> ""2495_requireIsOperational"";
""2495_depositEscrow"" -> ""2495_requireIsOperational"";
""2495_depositEscrow"" -> ""2495_isContractAuthorized"";
""2495_registerUser"" -> ""2495_processRegisterUser"";
""2495_approve"" -> ""2495_requireIsOperational"";
""2495_vestingTransfer"" -> ""2495_requireIsOperational"";
""2495_registerUser"" -> ""2495_requirePlatformManager"";
""2495_vestingTransfer"" -> ""2495_isContractAuthorized"";
""2495_registerUser"" -> ""2495_requireIsOperational"";
""2495_buyUSD"" -> ""2495_processPurchase"";
""2495_setUserSignupTokens"" -> ""2495_requireIsOperational"";
""2495_deauthorizeContract"" -> ""2495_requireContractOwner"";
""2495_transfer"" -> ""2495_requireIsOperational"";
""2495_refundEscrow"" -> ""2495_isUserRegistered"";
""2495_setReferralSignupTokens"" -> ""2495_requireContractOwner"";
""2495_transferFrom"" -> ""2495_requireIsOperational"";
""2495_balance"" -> ""2495_balanceOf"";
""2495_buyUSD"" -> ""2495_requireIsOperational"";
""2495_registerUserBonus"" -> ""2495_transfer"";
""2495_setWeiExchangeRate"" -> ""2495_requireIsOperational"";
""2495_setPlatformManager"" -> ""2495_requireContractOwner"";
""2495_buyUSD"" -> ""2495_calculatePurchaseBonus"";
""2495_setWeiExchangeRate"" -> ""2495_requireContractOwner"";
}
"
0x558c62533def5e9d77a7e555490c0e2889eacf3a.sol,UTokenContract,"contract UTokenContract is ERC20Token, Owned{ string public constant standard = ; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 6; uint256 private constant etherChange = 10**18; uint256 public totalSupply; uint256 public totalRemainSupply; uint256 public UTExchangeRate; bool public crowdsaleIsOpen; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowances; address public multisigAddress; event mintToken(address indexed _to, uint256 _value); event burnToken(address indexed _from, uint256 _value); function () payable public{ require (crowdsaleIsOpen == true); require(msg.value != 0); mintUTToken(msg.sender, (msg.value * UTExchangeRate * 10**decimals) / etherChange); }",0,"subgraph cluster_607_UTokenContract {
label=""UTokenContract"";
""607_transfer"" [label=""transfer""];
""607_mintTokens"" [label=""mintTokens""];
""607_transferFrom"" [label=""transferFrom""];
""607_withdraw"" [label=""withdraw""];
""607_mintUTToken"" [label=""mintUTToken""];
""607_allowance"" [label=""allowance""];
""607_UTokenContract"" [label=""UTokenContract""];
""607_crowdsaleOpen"" [label=""crowdsaleOpen""];
""607_approve"" [label=""approve""];
""607_UTTotalSupply"" [label=""UTTotalSupply""];
""607_balanceOf"" [label=""balanceOf""];
""607_approveAndCall"" [label=""approveAndCall""];
""607_burnTokens"" [label=""burnTokens""];
""607_fallback"" [label=""fallback""];
""607_setUTExchangeRate"" [label=""setUTExchangeRate""];
""607_burnTokens"" -> ""607_onlyOwner"";
""607_mintTokens"" -> ""607_onlyOwner"";
""607_mintTokens"" -> ""607_mintUTToken"";
""607_approveAndCall"" -> ""607_approve"";
""607_setUTExchangeRate"" -> ""607_onlyOwner"";
""607_withdraw"" -> ""607_onlyOwner"";
""607_fallback"" -> ""607_mintUTToken"";
}
"
0xb45d7bc4cebcab98ad09babdf8c818b2292b672c.sol,HODLCoin,"contract HODLCoin is StandardToken { using SafeMath for *; event Deposit(address indexed account, uint etherValue, uint tokenValue); event Withdrawal(address indexed account, uint etherValue, uint tokenValue); string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint8 constant DEPOSIT_FEE = 2; uint8 constant MULTIPLIER = 100; function value(uint amount) public view returns(uint) { return amount.mul(this.balance).div(totalSupply); }",0,"subgraph cluster_668_HODLCoin {
label=""HODLCoin"";
""668_fallback"" [label=""fallback""];
""668_value"" [label=""value""];
""668_withdraw"" [label=""withdraw""];
""668_deposit"" [label=""deposit""];
""668_withdraw"" -> ""668_value"";
""668_fallback"" -> ""668_deposit"";
}
"
0x2e88c458dab34c673641df586ab9d9a15e0b93ec.sol,FutureGame,"contract FutureGame { using SafeMath for uint256; using SafeMath for uint128; using SafeMath for uint32; using SafeMath for uint8; address public owner; address private nextOwner; address ERC20ContractAddres; address public ERC20WalletAddress; bool IsEther = false; bool IsInitialized = false; uint256 BaseTimestamp = 1534377600; uint StartBetTime = 0; uint LastBetTime = 0; uint SettleBetTime = 0; uint FinalAnswer; uint LoseTokenRate; uint256 optionOneAmount = 0; uint256 optionTwoAmount = 0; uint256 optionThreeAmount = 0; uint256 optionFourAmount = 0; uint256 optionFiveAmount = 0; uint256 optionSixAmount = 0; uint256 optionOneLimit = 0; uint256 optionTwoLimit = 0; uint256 optionThreeLimit = 0; uint256 optionFourLimit = 0; uint256 optionFiveLimit = 0; uint256 optionSixLimit = 0; mapping(address => uint256) optionOneBet; mapping(address => uint256) optionTwoBet; mapping(address => uint256) optionThreeBet; mapping(address => uint256) optionFourBet; mapping(address => uint256) optionFiveBet; mapping(address => uint256) optionSixBet; uint256 feePool = 0; event BetLog(address playerAddress, uint256 amount, uint256 Option); event OpenBet(uint AnswerOption); mapping(address => uint256) EtherBalances; mapping(address => uint256) TokenBalances; constructor () public{ owner = msg.sender; IsInitialized = true; }",0,"subgraph cluster_1790_FutureGame {
label=""FutureGame"";
""1790_initialize"" [label=""initialize""];
""1790_updateERC20WalletAddress"" [label=""updateERC20WalletAddress""];
""1790_DateConverter"" [label=""DateConverter""];
""1790_FinishGame"" [label=""FinishGame""];
""1790_getBet"" [label=""getBet""];
""1790_getServiceFeeBack"" [label=""getServiceFeeBack""];
""1790_getDateInterval"" [label=""getDateInterval""];
""1790_acceptNextOwner"" [label=""acceptNextOwner""];
""1790_constructor"" [label=""constructor""];
""1790_fallback"" [label=""fallback""];
""1790_PlaceTokenBet"" [label=""PlaceTokenBet""];
""1790_getVaultInfo"" [label=""getVaultInfo""];
""1790_approveNextOwner"" [label=""approveNextOwner""];
""1790_withdraw"" [label=""withdraw""];
""1790_checkVault"" [label=""checkVault""];
""1790_getGameInfo"" [label=""getGameInfo""];
""1790_getOptionLimit"" [label=""getOptionLimit""];
""1790_PlaceBet"" [label=""PlaceBet""];
""1790_getServiceFeeBack"" -> ""1790_onlyOwner"";
""1790_approveNextOwner"" -> ""1790_onlyOwner"";
""1790_PlaceTokenBet"" -> ""1790_onlyOwner"";
""1790_FinishGame"" -> ""1790_onlyOwner"";
""1790_updateERC20WalletAddress"" -> ""1790_onlyOwner"";
""1790_getDateInterval"" -> ""1790_DateConverter"";
""1790_withdraw"" -> ""1790_checkVault"";
}
"
0x83686a73638ff46ee1eb5d28ff2179c41d1157aa.sol,ldoh,"contract ldoh is EthereumSmartContract { event onCashbackCode (address indexed hodler, address cashbackcode); event onAffiliateBonus (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onUnlocktoken (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onHoldplatform (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onAddContractAddress(address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime); event onHoldplatformsetting(address indexed Tokenairdrop, bool HPM_status, uint256 HPM_divider, uint256 HPM_ratio, uint256 datetime); event onHoldplatformdeposit(uint256 amount, uint256 newbalance, uint256 datetime); event onHoldplatformwithdraw(uint256 amount, uint256 newbalance, uint256 datetime); address public DefaultToken; struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; bool cashbackstatus; }",0,"subgraph cluster_2212_ldoh {
label=""ldoh"";
""2212_sub"" [label=""sub""];
""2212_TokenPrice"" [label=""TokenPrice""];
""2212_GetSafe"" [label=""GetSafe""];
""2212_ReturnAllTokens"" [label=""ReturnAllTokens""];
""2212_HodlTokens4"" [label=""HodlTokens4""];
""2212_UnlockToken3"" [label=""UnlockToken3""];
""2212_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""2212_Holdplatform"" [label=""Holdplatform""];
""2212_Holdplatform_Airdrop"" [label=""Holdplatform_Airdrop""];
""2212_GetUserSafesLength"" [label=""GetUserSafesLength""];
""2212_mul"" [label=""mul""];
""2212_UnlockToken4"" [label=""UnlockToken4""];
""2212_Unlocktoken"" [label=""Unlocktoken""];
""2212_div"" [label=""div""];
""2212_HodlTokens2"" [label=""HodlTokens2""];
""2212_CashbackCode"" [label=""CashbackCode""];
""2212_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""2212_PayToken"" [label=""PayToken""];
""2212_Holdplatform_Deposit"" [label=""Holdplatform_Deposit""];
""2212_HodlTokens3"" [label=""HodlTokens3""];
""2212_fallback"" [label=""fallback""];
""2212_AddContractAddress"" [label=""AddContractAddress""];
""2212_add"" [label=""add""];
""2212_UnlockToken2"" [label=""UnlockToken2""];
""2212_Holdplatform_Withdraw"" [label=""Holdplatform_Withdraw""];
""2212_constructor"" [label=""constructor""];
""2212_Holdplatform_Airdrop"" -> ""2212_restricted"";
""2212_ReturnAllTokens"" -> ""2212_PayToken"";
""2212_HodlTokens2"" -> ""2212_sub"";
""2212_UnlockToken3"" -> ""2212_div"";
""2212_UnlockToken2"" -> ""2212_add"";
""2212_HodlTokens2"" -> ""2212_HodlTokens3"";
""2212_UnlockToken3"" -> ""2212_mul"";
""2212_HodlTokens3"" -> ""2212_HodlTokens4"";
""2212_UnlockToken3"" -> ""2212_sub"";
""2212_HodlTokens3"" -> ""2212_div"";
""2212_WithdrawAffiliate"" -> ""2212_sub"";
""2212_UnlockToken4"" -> ""2212_mul"";
""2212_Unlocktoken"" -> ""2212_UnlockToken2"";
""2212_PayToken"" -> ""2212_sub"";
""2212_AddContractAddress"" -> ""2212_restricted"";
""2212_HodlTokens3"" -> ""2212_mul"";
""2212_UnlockToken3"" -> ""2212_add"";
""2212_ReturnAllTokens"" -> ""2212_restricted"";
""2212_UnlockToken3"" -> ""2212_UnlockToken4"";
""2212_UnlockToken2"" -> ""2212_UnlockToken3"";
""2212_HodlTokens2"" -> ""2212_div"";
""2212_UnlockToken2"" -> ""2212_sub"";
""2212_Holdplatform_Deposit"" -> ""2212_add"";
""2212_PayToken"" -> ""2212_add"";
""2212_UnlockToken4"" -> ""2212_sub"";
""2212_HodlTokens3"" -> ""2212_sub"";
""2212_UnlockToken2"" -> ""2212_PayToken"";
""2212_Holdplatform_Withdraw"" -> ""2212_restricted"";
""2212_Holdplatform_Airdrop"" -> ""2212_div"";
""2212_Holdplatform"" -> ""2212_add"";
""2212_UnlockToken2"" -> ""2212_mul"";
""2212_HodlTokens3"" -> ""2212_add"";
""2212_AddContractAddress"" -> ""2212_div"";
""2212_Holdplatform_Deposit"" -> ""2212_restricted"";
""2212_WithdrawAffiliate"" -> ""2212_add"";
""2212_Holdplatform_Withdraw"" -> ""2212_sub"";
""2212_ReturnAllTokens"" -> ""2212_add"";
""2212_UnlockToken4"" -> ""2212_PayToken"";
""2212_HodlTokens4"" -> ""2212_add"";
""2212_UnlockToken4"" -> ""2212_div"";
""2212_AddContractAddress"" -> ""2212_mul"";
""2212_UnlockToken2"" -> ""2212_div"";
""2212_Holdplatform"" -> ""2212_HodlTokens2"";
""2212_TokenPrice"" -> ""2212_restricted"";
}
"
0x6cbc1a135d3c9a835d523aae9e4723b9b776fc49.sol,StakePoolICO,"contract StakePoolICO is Owned, StakePool { using SafeMath for uint256; address public multiSigWallet; uint256 public amountRaised; uint256 public dividendPayment; uint256 public numberOfRecordEntries; uint256 public numberOfTokenHolders; uint256 public startTime; uint256 public stopTime; uint256 public hardcap; uint256 public price; address[] recordTokenHolders; address[] tokenHolders; bool crowdsaleClosed = true; mapping (address => uint256) recordBalance; mapping (address => uint256) recordTokenHolderID; mapping (address => uint256) tokenHolderID; string tokenName = ; string tokenSymbol = ; uint256 initialTokens = 20000000000000000; uint256 multiplier = 10000000000; uint8 decimalUnits = 8; function StakePoolICO() StakePool(tokenName, tokenSymbol, decimalUnits, multiplier, initialTokens) { balance[msg.sender] = initialTokens; Transfer(0, msg.sender, initialTokens); multiSigWallet = msg.sender; hardcap = 20100000000000000; setPrice(20); dividendPayment = 50000000000000; recordTokenHolders.length = 2; tokenHolders.length = 2; tokenHolders[1] = msg.sender; numberOfTokenHolders++; }",0,"subgraph cluster_1204_StakePoolICO {
label=""StakePoolICO"";
""1204_createRecord"" [label=""createRecord""];
""1204_addTokenHolder"" [label=""addTokenHolder""];
""1204_StakePoolICO"" [label=""StakePoolICO""];
""1204_getPrice"" [label=""getPrice""];
""1204_addRecordEntry"" [label=""addRecordEntry""];
""1204_getTokenHolder"" [label=""getTokenHolder""];
""1204_stopSale"" [label=""stopSale""];
""1204_getRecordBalance"" [label=""getRecordBalance""];
""1204_getRemainingTime"" [label=""getRemainingTime""];
""1204_payOutDividend"" [label=""payOutDividend""];
""1204_startSale"" [label=""startSale""];
""1204_setPrice"" [label=""setPrice""];
""1204_getRecordHolder"" [label=""getRecordHolder""];
""1204_fallback"" [label=""fallback""];
""1204_setMultiSigWallet"" [label=""setMultiSigWallet""];
""1204_payOutDividend"" -> ""1204_getTokenHolder"";
""1204_setMultiSigWallet"" -> ""1204_onlyOwner"";
""1204_setPrice"" -> ""1204_onlyOwner"";
""1204_StakePoolICO"" -> ""1204_setPrice"";
""1204_createRecord"" -> ""1204_getTokenHolder"";
""1204_startSale"" -> ""1204_onlyOwner"";
""1204_createRecord"" -> ""1204_addRecordEntry"";
""1204_fallback"" -> ""1204_addTokenHolder"";
""1204_createRecord"" -> ""1204_balanceOf"";
""1204_fallback"" -> ""1204_getPrice"";
""1204_StakePoolICO"" -> ""1204_StakePool"";
""1204_payOutDividend"" -> ""1204_onlyOwner"";
""1204_stopSale"" -> ""1204_onlyOwner"";
""1204_payOutDividend"" -> ""1204_createRecord"";
""1204_payOutDividend"" -> ""1204_balanceOf"";
}
"
0x5340b3893c8bab2adce3cb0deba09a369c6b69d4.sol,Zethr,contract Zethr { using SafeMath for uint; modifier onlyHolders() { require(myFrontEndTokens() > 0); _; },0,"subgraph cluster_2651_ZethrBankroll {
label=""ZethrBankroll"";
""2651_receiveDividends"" [label=""receiveDividends""];
}
"
0x7903f608d9427c25711f39349260df0fb2f5dde0.sol,EthTeamContract,"contract EthTeamContract is StandardToken, Ownable { event Buy(address indexed token, address indexed from, uint256 value, uint256 weiValue); event Sell(address indexed token, address indexed from, uint256 value, uint256 weiValue); event BeginGame(address indexed team1, address indexed team2, uint64 gameTime); event EndGame(address indexed team1, address indexed team2, uint8 gameResult); event ChangeStatus(address indexed team, uint8 status); uint256 public price; uint8 public status; uint64 public gameTime; uint64 public finishTime; address public feeOwner; address public gameOpponent; function EthTeamContract( string _teamName, string _teamSymbol, address _gameOpponent, uint64 _gameTime, uint64 _finishTime, address _feeOwner ) public { name = _teamName; symbol = _teamSymbol; decimals = 3; totalSupply_ = 0; price = 1 szabo; gameOpponent = _gameOpponent; gameTime = _gameTime; finishTime = _finishTime; feeOwner = _feeOwner; owner = msg.sender; }",0,"subgraph cluster_1087_EthTeamContract {
label=""EthTeamContract"";
""1087_endGameInternal"" [label=""endGameInternal""];
""1087_transferFundAndEndGame"" [label=""transferFundAndEndGame""];
""1087_beginGame"" [label=""beginGame""];
""1087_endGame"" [label=""endGame""];
""1087_EthTeamContract"" [label=""EthTeamContract""];
""1087_fallback"" [label=""fallback""];
""1087_finish"" [label=""finish""];
""1087_transfer"" [label=""transfer""];
""1087_changeStatus"" [label=""changeStatus""];
""1087_transfer"" -> ""1087_transfer"";
""1087_finish"" -> ""1087_onlyOwner"";
""1087_changeStatus"" -> ""1087_onlyOwner"";
""1087_beginGame"" -> ""1087_onlyOwner"";
""1087_endGame"" -> ""1087_endGameInternal"";
""1087_transferFundAndEndGame"" -> ""1087_endGameInternal"";
""1087_endGame"" -> ""1087_onlyOwner"";
}
"
0xc55a13e36d93371a5b036a21d913a31cd2804ba4.sol,NoteOfExchange,"contract NoteOfExchange is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; mapping (address => bool) public joinOnce; mapping (address => uint256) public frozenAccount; string internal name_ = ; string internal symbol_ = ; uint8 internal decimals_ = 8; uint256 internal totalSupply_ = 200000000e8; uint256 internal transGain=1; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 100000e8; uint256 public airdropBy0Eth = 1000e8; uint256 public officialHold = totalSupply_.mul(15).div(100); uint256 public minContribution = 1 ether / 10; bool internal distributionFinished = false; bool internal EthGetFinished = false; bool internal airdropBy0EthFinished = false; bool internal transferGainFinished = true; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event LockedFunds(address indexed target, uint256 locktime); modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1142_NoteOfExchange {
label=""NoteOfExchange"";
""1142_withdrawOtherTokens"" [label=""withdrawOtherTokens""];
""1142_startTransferGet"" [label=""startTransferGet""];
""1142_withdraw"" [label=""withdraw""];
""1142_balanceOf"" [label=""balanceOf""];
""1142_transferFrom"" [label=""transferFrom""];
""1142_getTokens"" [label=""getTokens""];
""1142_constructor"" [label=""constructor""];
""1142_startAirdropBy0Eth"" [label=""startAirdropBy0Eth""];
""1142_transferOwnership"" [label=""transferOwnership""];
""1142_name"" [label=""name""];
""1142_selfLockFunds"" [label=""selfLockFunds""];
""1142_startDistribution"" [label=""startDistribution""];
""1142_finishEthGet"" [label=""finishEthGet""];
""1142_totalSupply"" [label=""totalSupply""];
""1142_approve"" [label=""approve""];
""1142_allowance"" [label=""allowance""];
""1142_symbol"" [label=""symbol""];
""1142_updateParameter"" [label=""updateParameter""];
""1142_transfer"" [label=""transfer""];
""1142_finishAirdropBy0Eth"" [label=""finishAirdropBy0Eth""];
""1142_finishTransferGet"" [label=""finishTransferGet""];
""1142_fallback"" [label=""fallback""];
""1142_decimals"" [label=""decimals""];
""1142_burnFromAddress"" [label=""burnFromAddress""];
""1142_startEthGet"" [label=""startEthGet""];
""1142_burnFromTotal"" [label=""burnFromTotal""];
""1142_finishDistribution"" [label=""finishDistribution""];
""1142_distr"" [label=""distr""];
""1142_transfer"" -> ""1142_distr"";
""1142_transferOwnership"" -> ""1142_onlyOwner"";
""1142_finishAirdropBy0Eth"" -> ""1142_onlyOwner"";
""1142_finishEthGet"" -> ""1142_onlyOwner"";
""1142_getTokens"" -> ""1142_canDistr"";
""1142_distr"" -> ""1142_canDistr"";
""1142_fallback"" -> ""1142_getTokens"";
""1142_finishDistribution"" -> ""1142_onlyOwner"";
""1142_finishTransferGet"" -> ""1142_onlyOwner"";
""1142_startTransferGet"" -> ""1142_onlyOwner"";
""1142_startDistribution"" -> ""1142_onlyOwner"";
""1142_withdrawOtherTokens"" -> ""1142_onlyOwner"";
""1142_getTokens"" -> ""1142_distr"";
""1142_burnFromTotal"" -> ""1142_onlyOwner"";
""1142_constructor"" -> ""1142_distr"";
""1142_updateParameter"" -> ""1142_onlyOwner"";
""1142_withdraw"" -> ""1142_onlyOwner"";
""1142_startEthGet"" -> ""1142_onlyOwner"";
""1142_startAirdropBy0Eth"" -> ""1142_onlyOwner"";
""1142_transferFrom"" -> ""1142_onlyPayloadSize"";
""1142_burnFromAddress"" -> ""1142_onlyOwner"";
""1142_transfer"" -> ""1142_onlyPayloadSize"";
}
"
0x40e690e430710cfca6583b24d8c187b85b7fc1a7.sol,DoubleKingsReward,"contract DoubleKingsReward is Owned { using SafeMath for uint; address public kingContract; address public minedToken; constructor(address mToken, address mkContract) public { minedToken = mToken; kingContract = mkContract; }",0,"subgraph cluster_672_DoubleKingsReward {
label=""DoubleKingsReward"";
""672_uintToBytesForAddress"" [label=""uintToBytesForAddress""];
""672_getBalance"" [label=""getBalance""];
""672_bytesToAddress"" [label=""bytesToAddress""];
""672_fallback"" [label=""fallback""];
""672_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""672_popFirstFromArray"" [label=""popFirstFromArray""];
""672_constructor"" [label=""constructor""];
""672_mintForwarder"" [label=""mintForwarder""];
""672_transferAnyERC20Token"" -> ""672_onlyOwner"";
""672_mintForwarder"" -> ""672_uintToBytesForAddress"";
""672_mintForwarder"" -> ""672_bytesToAddress"";
""672_mintForwarder"" -> ""672_popFirstFromArray"";
}
"
0x5b8aeecf9958a76054dae8bdc98b44ff9007d4ef.sol,SRNMagicBox,"contract SRNMagicBox is ServerControl, TokenReceiver { GirlOps girlOps; GenesFactory genesFactory; SRNG SRNGInstance; string public name; uint public keyRequired; address public keyAddress; address public prizePoolAddress; uint public boxPrice; uint[] public prizeIndex; uint[] public prizeRange; uint[] public NCards; uint[] public RCards; uint[] public SRCards; uint[] public SSRCards; event SendGirlFail(address _to, uint _type); constructor(string _name, address _girlAddress, address _SRNGAddress, address _genesFactoryAddress, address _prizePoolAddress, address _keyAddress, uint _keyRequired, uint _boxPrice) public { name = _name; girlOps = GirlOps(_girlAddress); SRNGInstance = SRNG(_SRNGAddress); genesFactory = GenesFactory(_genesFactoryAddress); prizePoolAddress = _prizePoolAddress; keyAddress = _keyAddress; keyRequired = _keyRequired; boxPrice = _boxPrice; }",0,"subgraph cluster_4530_SRNMagicBox {
label=""SRNMagicBox"";
""4530_getPrizeIndex"" [label=""getPrizeIndex""];
""4530__sendGirl"" [label=""_sendGirl""];
""4530__openBox"" [label=""_openBox""];
""4530_setupKeyRequired"" [label=""setupKeyRequired""];
""4530_setSRNG"" [label=""setSRNG""];
""4530_setGenesFactory"" [label=""setGenesFactory""];
""4530_getSSRCardsNumber"" [label=""getSSRCardsNumber""];
""4530_getRCardsNumber"" [label=""getRCardsNumber""];
""4530_setGirls"" [label=""setGirls""];
""4530_setGirlByRarity"" [label=""setGirlByRarity""];
""4530_getSRCardsNumber"" [label=""getSRCardsNumber""];
""4530_withDrawToken"" [label=""withDrawToken""];
""4530_setupPrize"" [label=""setupPrize""];
""4530_setGirlOps"" [label=""setGirlOps""];
""4530_setKeyAddress"" [label=""setKeyAddress""];
""4530_constructor"" [label=""constructor""];
""4530_setPrizePoolAddress"" [label=""setPrizePoolAddress""];
""4530_receiveApproval"" [label=""receiveApproval""];
""4530_withDrawBalance"" [label=""withDrawBalance""];
""4530_getNCardsNumber"" [label=""getNCardsNumber""];
""4530_canOpen"" [label=""canOpen""];
""4530_fallback"" [label=""fallback""];
""4530_setupBoxPrice"" [label=""setupBoxPrice""];
""4530_setKeyAddress"" -> ""4530_onlyOwner"";
""4530_setupBoxPrice"" -> ""4530_onlyOwner"";
""4530_fallback"" -> ""4530__openBox"";
""4530_setGirlOps"" -> ""4530_onlyOwner"";
""4530_setGirls"" -> ""4530_onlyOwner"";
""4530_setupPrize"" -> ""4530_onlyOwner"";
""4530_setGirlByRarity"" -> ""4530_onlyOwner"";
""4530__openBox"" -> ""4530_getPrizeIndex"";
""4530_receiveApproval"" -> ""4530__openBox"";
""4530_withDrawToken"" -> ""4530_onlyCFO"";
""4530_setupKeyRequired"" -> ""4530_onlyOwner"";
""4530_setGenesFactory"" -> ""4530_onlyOwner"";
""4530_setSRNG"" -> ""4530_onlyOwner"";
""4530_withDrawBalance"" -> ""4530_onlyCFO"";
""4530__openBox"" -> ""4530__sendGirl"";
""4530_setPrizePoolAddress"" -> ""4530_onlyOwner"";
}
"
0x6bc8b04d3904967989b0f2bc91b32494f36f82c2.sol,msc,"contract msc is Ownable, StandardToken { using SafeMath for uint256; uint8 public constant TOKEN_DECIMALS = 18; string public name = ; string public symbol = ; uint8 public decimals = TOKEN_DECIMALS; uint256 public totalSupply = 500000000 *(10**uint256(TOKEN_DECIMALS)); uint256 public soldSupply = 0; uint256 public sellSupply = 0; uint256 public buySupply = 0; bool public stopSell = true; bool public stopBuy = true; uint256 public crowdsaleStartTime = block.timestamp; uint256 public crowdsaleEndTime = block.timestamp; uint256 public crowdsaleTotal = 0; uint256 public buyExchangeRate = 10000; uint256 public sellExchangeRate = 60000; address public ethFundDeposit; bool public allowTransfers = true; mapping (address => bool) public frozenAccount; bool public enableInternalLock = true; mapping (address => bool) public internalLockAccount; mapping (address => uint256) public releaseLockAccount; event FrozenFunds(address target, bool frozen); event IncreaseSoldSaleSupply(uint256 _value); event DecreaseSoldSaleSupply(uint256 _value); function msc() public { balances[msg.sender] = totalSupply; ethFundDeposit = msg.sender; allowTransfers = false; }",0,"subgraph cluster_1537_msc {
label=""msc"";
""1537__isUserInternalLock"" [label=""_isUserInternalLock""];
""1537_msc"" [label=""msc""];
""1537_mintToken"" [label=""mintToken""];
""1537_decreaseSoldSaleSupply"" [label=""decreaseSoldSaleSupply""];
""1537_lockInternalAccount"" [label=""lockInternalAccount""];
""1537_setCrowdsaleTotal"" [label=""setCrowdsaleTotal""];
""1537_setExchangeRate"" [label=""setExchangeRate""];
""1537_transfer"" [label=""transfer""];
""1537_setAllowTransfers"" [label=""setAllowTransfers""];
""1537_transferFrom"" [label=""transferFrom""];
""1537_setCrowdsaleEndTime"" [label=""setCrowdsaleEndTime""];
""1537_destroyToken"" [label=""destroyToken""];
""1537_freezeAccount"" [label=""freezeAccount""];
""1537_setCrowdsaleStartTime"" [label=""setCrowdsaleStartTime""];
""1537_transferFromAdmin"" [label=""transferFromAdmin""];
""1537_setEthFundDeposit"" [label=""setEthFundDeposit""];
""1537_increaseSoldSaleSupply"" [label=""increaseSoldSaleSupply""];
""1537_setExchangeStatus"" [label=""setExchangeStatus""];
""1537_sell"" [label=""sell""];
""1537_getAccountLockState"" [label=""getAccountLockState""];
""1537_internalSellTokenFromAdmin"" [label=""internalSellTokenFromAdmin""];
""1537_fallback"" [label=""fallback""];
""1537_buy"" [label=""buy""];
""1537_transferETH"" [label=""transferETH""];
""1537_getAccountUnlockTime"" [label=""getAccountUnlockTime""];
""1537_setEnableInternalLock"" [label=""setEnableInternalLock""];
""1537_setEthFundDeposit"" -> ""1537_onlyOwner"";
""1537_mintToken"" -> ""1537_onlyOwner"";
""1537_freezeAccount"" -> ""1537_onlyOwner"";
""1537_increaseSoldSaleSupply"" -> ""1537_onlyOwner"";
""1537_setExchangeStatus"" -> ""1537_onlyOwner"";
""1537_setAllowTransfers"" -> ""1537_onlyOwner"";
""1537_setEnableInternalLock"" -> ""1537_onlyOwner"";
""1537_transfer"" -> ""1537_transfer"";
""1537_transferETH"" -> ""1537_onlyOwner"";
""1537_setCrowdsaleEndTime"" -> ""1537_onlyOwner"";
""1537_transferFrom"" -> ""1537_isOwner"";
""1537__isUserInternalLock"" -> ""1537_getAccountLockState"";
""1537_internalSellTokenFromAdmin"" -> ""1537_lockInternalAccount"";
""1537_decreaseSoldSaleSupply"" -> ""1537_onlyOwner"";
""1537_internalSellTokenFromAdmin"" -> ""1537_onlyOwner"";
""1537_setExchangeRate"" -> ""1537_onlyOwner"";
""1537_transferFromAdmin"" -> ""1537_onlyOwner"";
""1537_destroyToken"" -> ""1537_onlyOwner"";
""1537_transferFrom"" -> ""1537_transferFrom"";
""1537_setCrowdsaleTotal"" -> ""1537_onlyOwner"";
""1537_lockInternalAccount"" -> ""1537_onlyOwner"";
""1537_transferFrom"" -> ""1537__isUserInternalLock"";
""1537_fallback"" -> ""1537_buy"";
""1537_transfer"" -> ""1537__isUserInternalLock"";
""1537_transfer"" -> ""1537_isOwner"";
""1537_sell"" -> ""1537__isUserInternalLock"";
""1537_setCrowdsaleStartTime"" -> ""1537_onlyOwner"";
}
"
0x6da9b79cd36c8787ebd38de8e0c7767a4d7110b0.sol,GasRefundToken,contract GasRefundToken { uint256[] public gasRefundPool; function sponsorGas() external { uint256 len = gasRefundPool.length; uint256 refundPrice = 1; require(refundPrice > 0); gasRefundPool.length = len + 9; gasRefundPool[len] = refundPrice; gasRefundPool[len + 1] = refundPrice; gasRefundPool[len + 2] = refundPrice; gasRefundPool[len + 3] = refundPrice; gasRefundPool[len + 4] = refundPrice; gasRefundPool[len + 5] = refundPrice; gasRefundPool[len + 6] = refundPrice; gasRefundPool[len + 7] = refundPrice; gasRefundPool[len + 8] = refundPrice; },0,"subgraph cluster_201_GasRefundToken {
label=""GasRefundToken"";
""201_minimumGasPriceForRefund"" [label=""minimumGasPriceForRefund""];
""201_sponsorGas"" [label=""sponsorGas""];
""201_gasRefund"" [label=""gasRefund""];
""201_remainingSponsoredTransactions"" [label=""remainingSponsoredTransactions""];
""201_remainingGasRefundPool"" [label=""remainingGasRefundPool""];
}
"
0x0082f8addb9c0d6cc27783d41198300b4cd2e19b.sol,CryptoCelebrity,"contract CryptoCelebrity is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event PriceChange(uint256 tokenId, uint256 oldPrice, uint256 newPrice, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 100000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public personIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public personIndexToApproved; mapping (uint256 => uint256) private personIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Person { string name; }",0,"subgraph cluster_1083_CryptoCelebrity {
label=""CryptoCelebrity"";
""1083_setCEO"" [label=""setCEO""];
""1083_tokensOfOwner"" [label=""tokensOfOwner""];
""1083_transfer"" [label=""transfer""];
""1083_symbol"" [label=""symbol""];
""1083_transferFrom"" [label=""transferFrom""];
""1083__approved"" [label=""_approved""];
""1083_approve"" [label=""approve""];
""1083_createContractPerson"" [label=""createContractPerson""];
""1083_balanceOf"" [label=""balanceOf""];
""1083_getPerson"" [label=""getPerson""];
""1083__addressNotNull"" [label=""_addressNotNull""];
""1083_CryptoCelebrity"" [label=""CryptoCelebrity""];
""1083_purchase"" [label=""purchase""];
""1083_changePrice"" [label=""changePrice""];
""1083_takeOwnership"" [label=""takeOwnership""];
""1083_priceOf"" [label=""priceOf""];
""1083_ownerOf"" [label=""ownerOf""];
""1083_name"" [label=""name""];
""1083_setCOO"" [label=""setCOO""];
""1083__createPerson"" [label=""_createPerson""];
""1083_createPromoPerson"" [label=""createPromoPerson""];
""1083_payout"" [label=""payout""];
""1083__payout"" [label=""_payout""];
""1083_totalSupply"" [label=""totalSupply""];
""1083_implementsERC721"" [label=""implementsERC721""];
""1083_withdrawAmountTo"" [label=""withdrawAmountTo""];
""1083__owns"" [label=""_owns""];
""1083__transfer"" [label=""_transfer""];
""1083_tokensOfOwner"" -> ""1083_balanceOf"";
""1083_payout"" -> ""1083__payout"";
""1083_changePrice"" -> ""1083__owns"";
""1083_transfer"" -> ""1083__owns"";
""1083_transferFrom"" -> ""1083__owns"";
""1083_purchase"" -> ""1083__addressNotNull"";
""1083_purchase"" -> ""1083__transfer"";
""1083_transferFrom"" -> ""1083__transfer"";
""1083_setCEO"" -> ""1083_onlyCEO"";
""1083_withdrawAmountTo"" -> ""1083_onlyCLevel"";
""1083_createContractPerson"" -> ""1083__createPerson"";
""1083_setCOO"" -> ""1083_onlyCEO"";
""1083_transfer"" -> ""1083__addressNotNull"";
""1083_tokensOfOwner"" -> ""1083_totalSupply"";
""1083_approve"" -> ""1083__owns"";
""1083_transfer"" -> ""1083__transfer"";
""1083_takeOwnership"" -> ""1083__transfer"";
""1083__createPerson"" -> ""1083__transfer"";
""1083_createPromoPerson"" -> ""1083_onlyCOO"";
""1083_createContractPerson"" -> ""1083_onlyCOO"";
""1083_createPromoPerson"" -> ""1083__createPerson"";
""1083_takeOwnership"" -> ""1083__approved"";
""1083_takeOwnership"" -> ""1083__addressNotNull"";
""1083_transferFrom"" -> ""1083__addressNotNull"";
""1083_payout"" -> ""1083_onlyCLevel"";
""1083_transferFrom"" -> ""1083__approved"";
}
"
0xecff8fc2a19f83fc855618704f38725756dbcae3.sol,OK3D,"contract OK3D is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x5015A6E288FF4AC0c62bf1DA237c24c3Fb849188); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 private rndGap_ = 2 minutes; uint256 constant private rndInit_ = 12 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 24 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(28,10); fees_[1] = F3Ddatasets.TeamFee(36,10); fees_[2] = F3Ddatasets.TeamFee(51,10); fees_[3] = F3Ddatasets.TeamFee(40,10); potSplit_[0] = F3Ddatasets.PotSplit(25,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(20,20); activated_ = true; rID_ = 1; round_[1].strt = now + rndExtra_ - rndGap_; round_[1].end = now + rndInit_ + rndExtra_; }",0,"subgraph cluster_4376_OK3D {
label=""OK3D"";
""4376_iWantXKeys"" [label=""iWantXKeys""];
""4376_withdrawEarnings"" [label=""withdrawEarnings""];
""4376_updateMasks"" [label=""updateMasks""];
""4376_core"" [label=""core""];
""4376_fallback"" [label=""fallback""];
""4376_potSwap"" [label=""potSwap""];
""4376_endTx"" [label=""endTx""];
""4376_registerNameXname"" [label=""registerNameXname""];
""4376_getTimeLeft"" [label=""getTimeLeft""];
""4376_endRound"" [label=""endRound""];
""4376_buyXname"" [label=""buyXname""];
""4376_registerNameXaddr"" [label=""registerNameXaddr""];
""4376_withdraw"" [label=""withdraw""];
""4376_airdrop"" [label=""airdrop""];
""4376_calcKeysReceived"" [label=""calcKeysReceived""];
""4376_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4376_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4376_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4376_buyXaddr"" [label=""buyXaddr""];
""4376_distributeInvest"" [label=""distributeInvest""];
""4376_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4376_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4376_reLoadXid"" [label=""reLoadXid""];
""4376_getBuyPrice"" [label=""getBuyPrice""];
""4376_determinePID"" [label=""determinePID""];
""4376_verifyTeam"" [label=""verifyTeam""];
""4376_distributeExternal"" [label=""distributeExternal""];
""4376_updateGenVault"" [label=""updateGenVault""];
""4376_reLoadXname"" [label=""reLoadXname""];
""4376_getPlayerVaults"" [label=""getPlayerVaults""];
""4376_reLoadCore"" [label=""reLoadCore""];
""4376_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4376_activate"" [label=""activate""];
""4376_constructor"" [label=""constructor""];
""4376_registerNameXID"" [label=""registerNameXID""];
""4376_reLoadXaddr"" [label=""reLoadXaddr""];
""4376_managePlayer"" [label=""managePlayer""];
""4376_updateTimer"" [label=""updateTimer""];
""4376_buyXid"" [label=""buyXid""];
""4376_distributeInternal"" [label=""distributeInternal""];
""4376_buyCore"" [label=""buyCore""];
""4376_getPlayerInfoByAddress"" -> ""4376_calcUnMaskedEarnings"";
""4376_buyCore"" -> ""4376_endRound"";
""4376_buyXid"" -> ""4376_determinePID"";
""4376_reLoadXaddr"" -> ""4376_reLoadCore"";
""4376_getPlayerVaults"" -> ""4376_calcUnMaskedEarnings"";
""4376_withdraw"" -> ""4376_withdrawEarnings"";
""4376_withdraw"" -> ""4376_isHuman"";
""4376_buyCore"" -> ""4376_core"";
""4376_fallback"" -> ""4376_isActivated"";
""4376_buyXname"" -> ""4376_determinePID"";
""4376_registerNameXID"" -> ""4376_isHuman"";
""4376_registerNameXname"" -> ""4376_isHuman"";
""4376_distributeInternal"" -> ""4376_updateMasks"";
""4376_reLoadXname"" -> ""4376_verifyTeam"";
""4376_fallback"" -> ""4376_isHuman"";
""4376_withdraw"" -> ""4376_isActivated"";
""4376_buyXaddr"" -> ""4376_isActivated"";
""4376_reLoadXname"" -> ""4376_isActivated"";
""4376_buyXid"" -> ""4376_isWithinLimits"";
""4376_buyXid"" -> ""4376_buyCore"";
""4376_buyXaddr"" -> ""4376_buyCore"";
""4376_buyXaddr"" -> ""4376_verifyTeam"";
""4376_fallback"" -> ""4376_isWithinLimits"";
""4376_reLoadXid"" -> ""4376_reLoadCore"";
""4376_reLoadCore"" -> ""4376_endRound"";
""4376_buyXname"" -> ""4376_verifyTeam"";
""4376_buyXname"" -> ""4376_buyCore"";
""4376_registerNameXaddr"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_isWithinLimits"";
""4376_core"" -> ""4376_airdrop"";
""4376_withdrawEarnings"" -> ""4376_updateGenVault"";
""4376_buyXname"" -> ""4376_isActivated"";
""4376_reLoadCore"" -> ""4376_withdrawEarnings"";
""4376_withdraw"" -> ""4376_endRound"";
""4376_reLoadXaddr"" -> ""4376_isActivated"";
""4376_buyXname"" -> ""4376_isHuman"";
""4376_buyXaddr"" -> ""4376_determinePID"";
""4376_buyXaddr"" -> ""4376_isWithinLimits"";
""4376_buyXaddr"" -> ""4376_isHuman"";
""4376_managePlayer"" -> ""4376_updateGenVault"";
""4376_reLoadXname"" -> ""4376_isWithinLimits"";
""4376_reLoadXname"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_isHuman"";
""4376_core"" -> ""4376_distributeInternal"";
""4376_fallback"" -> ""4376_determinePID"";
""4376_updateGenVault"" -> ""4376_calcUnMaskedEarnings"";
""4376_buyXid"" -> ""4376_isHuman"";
""4376_fallback"" -> ""4376_buyCore"";
""4376_reLoadXaddr"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_verifyTeam"";
""4376_buyXid"" -> ""4376_isActivated"";
""4376_reLoadCore"" -> ""4376_core"";
""4376_core"" -> ""4376_managePlayer"";
""4376_reLoadXname"" -> ""4376_reLoadCore"";
""4376_core"" -> ""4376_distributeExternal"";
""4376_reLoadXaddr"" -> ""4376_verifyTeam"";
""4376_reLoadXaddr"" -> ""4376_isWithinLimits"";
""4376_buyXid"" -> ""4376_verifyTeam"";
""4376_core"" -> ""4376_endTx"";
""4376_buyXname"" -> ""4376_isWithinLimits"";
""4376_distributeExternal"" -> ""4376_distributeInvest"";
""4376_getPlayerVaults"" -> ""4376_getPlayerVaultsHelper"";
""4376_reLoadXid"" -> ""4376_isActivated"";
""4376_core"" -> ""4376_updateTimer"";
}
"
0x175937867e4053df3c881919f75b4b0a44a8ef6d.sol,eosBASE,"contract eosBASE is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 1000000000e8; uint256 private totalReserved = (totalSupply.div(100)).mul(25); uint256 private totalBounties = (totalSupply.div(100)).mul(25); uint256 public totalDistributed = totalReserved.add(totalBounties); uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value; uint256 public minReq; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1168_eosBASE {
label=""eosBASE"";
""1168_fallback"" [label=""fallback""];
""1168_allowance"" [label=""allowance""];
""1168_transferFrom"" [label=""transferFrom""];
""1168_enableWhitelist"" [label=""enableWhitelist""];
""1168_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1168_balanceOf"" [label=""balanceOf""];
""1168_withdraw"" [label=""withdraw""];
""1168_finishDistribution"" [label=""finishDistribution""];
""1168_burn"" [label=""burn""];
""1168_getTokenBalance"" [label=""getTokenBalance""];
""1168_distribution"" [label=""distribution""];
""1168_distributeAmounts"" [label=""distributeAmounts""];
""1168_disableWhitelist"" [label=""disableWhitelist""];
""1168_transfer"" [label=""transfer""];
""1168_distr"" [label=""distr""];
""1168_setParameters"" [label=""setParameters""];
""1168_approve"" [label=""approve""];
""1168_transferOwnership"" [label=""transferOwnership""];
""1168_getTokens"" [label=""getTokens""];
""1168_eosBASE"" [label=""eosBASE""];
""1168_airdrop"" [label=""airdrop""];
""1168_fallback"" -> ""1168_getTokens"";
""1168_burn"" -> ""1168_onlyOwner"";
""1168_enableWhitelist"" -> ""1168_onlyOwner"";
""1168_transfer"" -> ""1168_onlyPayloadSize"";
""1168_finishDistribution"" -> ""1168_canDistr"";
""1168_distribution"" -> ""1168_canDistr"";
""1168_distribution"" -> ""1168_distr"";
""1168_airdrop"" -> ""1168_distr"";
""1168_getTokens"" -> ""1168_onlyWhitelist"";
""1168_distribution"" -> ""1168_onlyOwner"";
""1168_transferOwnership"" -> ""1168_onlyOwner"";
""1168_finishDistribution"" -> ""1168_onlyOwner"";
""1168_withdraw"" -> ""1168_onlyOwner"";
""1168_withdrawForeignTokens"" -> ""1168_onlyOwner"";
""1168_setParameters"" -> ""1168_onlyOwner"";
""1168_distributeAmounts"" -> ""1168_canDistr"";
""1168_getTokens"" -> ""1168_distr"";
""1168_distributeAmounts"" -> ""1168_onlyOwner"";
""1168_airdrop"" -> ""1168_canDistr"";
""1168_airdrop"" -> ""1168_onlyOwner"";
""1168_disableWhitelist"" -> ""1168_onlyOwner"";
""1168_distr"" -> ""1168_canDistr"";
""1168_transferFrom"" -> ""1168_onlyPayloadSize"";
""1168_distributeAmounts"" -> ""1168_distr"";
""1168_getTokens"" -> ""1168_canDistr"";
}
"
0x1822435de9b923a7a8c4fbd2f6d0aa8f743d3010.sol,BONDS,contract BONDS { modifier onlyOwner(){ require(msg.sender == dev); _; },0,"subgraph cluster_1296_BONDS {
label=""BONDS"";
""1296_BONDS"" [label=""BONDS""];
""1296_gettotalBondDivs"" [label=""gettotalBondDivs""];
""1296_getBondPrice"" [label=""getBondPrice""];
""1296_getMyBalance"" [label=""getMyBalance""];
""1296_distributeYield"" [label=""distributeYield""];
""1296_addTotalBondValue"" [label=""addTotalBondValue""];
""1296_setName"" [label=""setName""];
""1296_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""1296_getOwnerBalance"" [label=""getOwnerBalance""];
""1296_withdraw"" [label=""withdraw""];
""1296_getTotalBondValue"" [label=""getTotalBondValue""];
""1296_setMaxbonds"" [label=""setMaxbonds""];
""1296_setBondPrice"" [label=""setBondPrice""];
""1296_getNextAvailableBond"" [label=""getNextAvailableBond""];
""1296_extDistributeBondFund"" [label=""extDistributeBondFund""];
""1296_setRates"" [label=""setRates""];
""1296_transfer"" [label=""transfer""];
""1296_setAutoNewbond"" [label=""setAutoNewbond""];
""1296_setAllowReferral"" [label=""setAllowReferral""];
""1296_setSymbol"" [label=""setSymbol""];
""1296_getBondOwner"" [label=""getBondOwner""];
""1296_setInitialPrice"" [label=""setInitialPrice""];
""1296_setLowerBondPrice"" [label=""setLowerBondPrice""];
""1296_buy"" [label=""buy""];
""1296_fallback"" [label=""fallback""];
""1296_addNewbond"" [label=""addNewbond""];
""1296_distributeBondFund"" [label=""distributeBondFund""];
""1296_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1296_withdrawPart"" [label=""withdrawPart""];
""1296_setBondPrice"" -> ""1296_onlyOwner"";
""1296_setSymbol"" -> ""1296_onlyOwner"";
""1296_withdrawPart"" -> ""1296_onlyOwner"";
""1296_setMaxbonds"" -> ""1296_onlyOwner"";
""1296_addNewbond"" -> ""1296_onlyOwner"";
""1296_setName"" -> ""1296_onlyOwner"";
""1296_buy"" -> ""1296_distributeYield"";
""1296_setRates"" -> ""1296_onlyOwner"";
""1296_addNewbond"" -> ""1296_addTotalBondValue"";
""1296_setAutoNewbond"" -> ""1296_onlyOwner"";
""1296_buy"" -> ""1296_distributeBondFund"";
""1296_extDistributeBondFund"" -> ""1296_onlyOwner"";
""1296_setInitialPrice"" -> ""1296_onlyOwner"";
""1296_setAllowReferral"" -> ""1296_onlyOwner"";
""1296_buy"" -> ""1296_addTotalBondValue"";
}
"
0x26bf81f017a7149576dc5d82323172fcae9fd469.sol,PhxGo,"contract PhxGo is Ownable{ using SafeMath for uint; event LogTokenMultiSent(address token,uint256 total); event LogGetToken(address token, address receiver, uint256 balance); address public receiverAddress; uint public txFee = 0.01 ether; uint public VIPFee = 1 ether; mapping(address => bool) public vipList; function getBalance(address _tokenAddress) onlyOwner public { address _receiverAddress = getReceiverAddress(); if(_tokenAddress == address(0)){ require(_receiverAddress.send(address(this).balance)); return; }",0,"subgraph cluster_1228_PhxGo {
label=""PhxGo"";
""1228_registerVIP"" [label=""registerVIP""];
""1228_multisendToken"" [label=""multisendToken""];
""1228_mutiSendCoinWithSameValue"" [label=""mutiSendCoinWithSameValue""];
""1228_setReceiverAddress"" [label=""setReceiverAddress""];
""1228_drop"" [label=""drop""];
""1228_removeFromVIPList"" [label=""removeFromVIPList""];
""1228_setTxFee"" [label=""setTxFee""];
""1228_ethSendSameValue"" [label=""ethSendSameValue""];
""1228_addToVIPList"" [label=""addToVIPList""];
""1228_ethSendDifferentValue"" [label=""ethSendDifferentValue""];
""1228_getReceiverAddress"" [label=""getReceiverAddress""];
""1228_mutiSendCoinWithDifferentValue"" [label=""mutiSendCoinWithDifferentValue""];
""1228_coinSendDifferentValue"" [label=""coinSendDifferentValue""];
""1228_sendEth"" [label=""sendEth""];
""1228_mutiSendETHWithDifferentValue"" [label=""mutiSendETHWithDifferentValue""];
""1228_setVIPFee"" [label=""setVIPFee""];
""1228_mutiSendETHWithSameValue"" [label=""mutiSendETHWithSameValue""];
""1228_multisend"" [label=""multisend""];
""1228_coinSendSameValue"" [label=""coinSendSameValue""];
""1228_isVIP"" [label=""isVIP""];
""1228_getBalance"" [label=""getBalance""];
""1228_mutiSendCoinWithDifferentValue"" -> ""1228_coinSendDifferentValue"";
""1228_drop"" -> ""1228_coinSendSameValue"";
""1228_ethSendDifferentValue"" -> ""1228_isVIP"";
""1228_multisend"" -> ""1228_ethSendDifferentValue"";
""1228_removeFromVIPList"" -> ""1228_onlyOwner"";
""1228_mutiSendCoinWithSameValue"" -> ""1228_coinSendSameValue"";
""1228_coinSendSameValue"" -> ""1228_isVIP"";
""1228_setTxFee"" -> ""1228_onlyOwner"";
""1228_getBalance"" -> ""1228_onlyOwner"";
""1228_setVIPFee"" -> ""1228_onlyOwner"";
""1228_ethSendSameValue"" -> ""1228_isVIP"";
""1228_multisendToken"" -> ""1228_coinSendDifferentValue"";
""1228_mutiSendETHWithSameValue"" -> ""1228_ethSendSameValue"";
""1228_mutiSendETHWithDifferentValue"" -> ""1228_ethSendDifferentValue"";
""1228_coinSendDifferentValue"" -> ""1228_isVIP"";
""1228_registerVIP"" -> ""1228_getReceiverAddress"";
""1228_getBalance"" -> ""1228_getReceiverAddress"";
""1228_setReceiverAddress"" -> ""1228_onlyOwner"";
""1228_sendEth"" -> ""1228_ethSendSameValue"";
""1228_addToVIPList"" -> ""1228_onlyOwner"";
}
"
0xe35ff61bbec1c56f5aa304de7bf173d29970d0ac.sol,lindyhanCoin,"contract lindyhanCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function lindyhanCoin() public { symbol = ; name = ; decimals = 0; _totalSupply = 1000000; balances[0x4427bC64b0f00C29393e5b03C164cc9629fF83E8] = _totalSupply; Transfer(address(0), 0x4427bC64b0f00C29393e5b03C164cc9629fF83E8, _totalSupply); }",0,"subgraph cluster_543_lindyhanCoin {
label=""lindyhanCoin"";
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_lindyhanCoin"" [label=""lindyhanCoin""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0xece83617db208ad255ad4f45daf81e25137535bb.sol,Invacio,"contract Invacio is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public initialSupply; function Invacio () { totalSupply = 60000000 * 10 ** decimals; balances[0xD5483f02d8bEd6A1D9deAb9B425aDa80cd1ed645] = totalSupply; initialSupply = totalSupply; Transfer(0, this, totalSupply); Transfer(this, 0xD5483f02d8bEd6A1D9deAb9B425aDa80cd1ed645, totalSupply); }",0,"subgraph cluster_452_Invacio {
label=""Invacio"";
""452_Invacio"" [label=""Invacio""];
}
"
0xdc7109afb8a3cc28f2429bf4a35f959a567a2610.sol,TokenLiquidityContract,contract TokenLiquidityContract { using SafeMath for uint256; address public admin; address public traded_token; uint256 public eth_seed_amount; uint256 public traded_token_seed_amount; uint256 public commission_ratio; uint256 public eth_balance; uint256 public traded_token_balance; bool public eth_is_seeded; bool public traded_token_is_seeded; bool public trading_deactivated; bool public admin_commission_activated; modifier only_admin() { require(msg.sender == admin); _; },0,"subgraph cluster_659_TokenLiquidityContract {
label=""TokenLiquidityContract"";
""659_transferETHToContract"" [label=""transferETHToContract""];
""659_deactivate_admin_comission"" [label=""deactivate_admin_comission""];
""659_change_admin_commission"" [label=""change_admin_commission""];
""659_market_is_open"" [label=""market_is_open""];
""659_buy_tokens"" [label=""buy_tokens""];
""659_get_amount_minus_commission"" [label=""get_amount_minus_commission""];
""659_withdraw_eth"" [label=""withdraw_eth""];
""659_set_traded_token_as_seeded"" [label=""set_traded_token_as_seeded""];
""659_activate_admin_commission"" [label=""activate_admin_commission""];
""659_transferTokensFromContract"" [label=""transferTokensFromContract""];
""659_complete_buy_exchange"" [label=""complete_buy_exchange""];
""659_sell_tokens"" [label=""sell_tokens""];
""659_deactivate_trading"" [label=""deactivate_trading""];
""659_transferTokensThroughProxyToContract"" [label=""transferTokensThroughProxyToContract""];
""659_reactivate_trading"" [label=""reactivate_trading""];
""659_seed_additional_eth"" [label=""seed_additional_eth""];
""659_constructor"" [label=""constructor""];
""659_get_amount_buy"" [label=""get_amount_buy""];
""659_deposit_token"" [label=""deposit_token""];
""659_seed_traded_token"" [label=""seed_traded_token""];
""659_withdraw_token"" [label=""withdraw_token""];
""659_transferETHFromContract"" [label=""transferETHFromContract""];
""659_complete_sell_exchange"" [label=""complete_sell_exchange""];
""659_seed_additional_token"" [label=""seed_additional_token""];
""659_fallback"" [label=""fallback""];
""659_get_amount_sell"" [label=""get_amount_sell""];
""659_set_eth_as_seeded"" [label=""set_eth_as_seeded""];
""659_seed_eth"" [label=""seed_eth""];
""659_deposit_eth"" [label=""deposit_eth""];
""659_sell_tokens"" -> ""659_market_is_open"";
""659_seed_traded_token"" -> ""659_only_admin"";
""659_withdraw_token"" -> ""659_transferTokensFromContract"";
""659_seed_additional_eth"" -> ""659_market_is_open"";
""659_complete_sell_exchange"" -> ""659_transferETHFromContract"";
""659_complete_buy_exchange"" -> ""659_transferTokensFromContract"";
""659_complete_sell_exchange"" -> ""659_transferTokensThroughProxyToContract"";
""659_seed_additional_eth"" -> ""659_deposit_eth"";
""659_activate_admin_commission"" -> ""659_only_admin"";
""659_seed_additional_token"" -> ""659_market_is_open"";
""659_reactivate_trading"" -> ""659_only_admin"";
""659_buy_tokens"" -> ""659_trading_activated"";
""659_deactivate_admin_comission"" -> ""659_only_admin"";
""659_complete_sell_exchange"" -> ""659_get_amount_minus_commission"";
""659_sell_tokens"" -> ""659_complete_sell_exchange"";
""659_seed_eth"" -> ""659_deposit_eth"";
""659_withdraw_eth"" -> ""659_only_admin"";
""659_seed_traded_token"" -> ""659_set_traded_token_as_seeded"";
""659_withdraw_token"" -> ""659_only_admin"";
""659_change_admin_commission"" -> ""659_only_admin"";
""659_seed_eth"" -> ""659_set_eth_as_seeded"";
""659_seed_additional_token"" -> ""659_deposit_token"";
""659_sell_tokens"" -> ""659_trading_activated"";
""659_deposit_token"" -> ""659_transferTokensThroughProxyToContract"";
""659_seed_additional_token"" -> ""659_only_admin"";
""659_seed_traded_token"" -> ""659_deposit_token"";
""659_seed_eth"" -> ""659_only_admin"";
""659_withdraw_eth"" -> ""659_transferETHFromContract"";
""659_complete_buy_exchange"" -> ""659_get_amount_buy"";
""659_buy_tokens"" -> ""659_complete_buy_exchange"";
""659_buy_tokens"" -> ""659_market_is_open"";
""659_complete_buy_exchange"" -> ""659_get_amount_minus_commission"";
""659_deactivate_trading"" -> ""659_only_admin"";
""659_deposit_eth"" -> ""659_transferETHToContract"";
""659_complete_buy_exchange"" -> ""659_transferETHToContract"";
""659_fallback"" -> ""659_buy_tokens"";
""659_seed_additional_eth"" -> ""659_only_admin"";
""659_complete_sell_exchange"" -> ""659_get_amount_sell"";
}
"
0xc32c4bd955cfd68bddbc13b4baef73bcef0e09da.sol,Draw,contract Draw is Ownable { address[9] private players; address public last_winner; uint public draw_number; uint public slots_left; uint private MAX_PLAYERS = players.length; uint private counter = 0; uint private t0 = now; uint private tdelta; uint private index; uint private owner_balance = 0 finney; function Draw() public { initGame(); draw_number = 1; last_winner = address(0); },0,"subgraph cluster_299_Draw {
label=""Draw"";
""299_fallback"" [label=""fallback""];
""299_joinGame"" [label=""joinGame""];
""299_Draw"" [label=""Draw""];
""299_getBalance"" [label=""getBalance""];
""299_endGame"" [label=""endGame""];
""299_withdrawlBalance"" [label=""withdrawlBalance""];
""299_initGame"" [label=""initGame""];
""299_withdrawlBalance"" -> ""299_onlyOwner"";
""299_joinGame"" -> ""299_endGame"";
""299_Draw"" -> ""299_initGame"";
""299_getBalance"" -> ""299_onlyOwner"";
""299_fallback"" -> ""299_joinGame"";
""299_endGame"" -> ""299_initGame"";
}
"
0x3a266f97425cd281c1770b71662fcf4415c29190.sol,CryptoProgramFactory,contract CryptoProgramFactory { bool status = false; using SafeMath for uint256; address public administrator; uint256 private BASE_PRICE = 0.1 ether; uint256 private BASE_TIME = 4 hours; MemoryFactoryInterface public Memory; CryptoMiningWarInterface public MiningWar; CryptoEngineerInterface public Engineer; mapping(uint256 => Factory) public factories; mapping(address => bool) public miniGames; struct Factory { uint256 level; uint256 crystals; uint256 programPriceByCrystals; uint256 programPriceByDarkCrystals; uint256 programValue; uint256 eth; uint256 time; },0,"subgraph cluster_1129_CryptoProgramFactory {
label=""CryptoProgramFactory"";
""1129_isContractMiniGame"" [label=""isContractMiniGame""];
""1129_setProgramValue"" [label=""setProgramValue""];
""1129_upgrade"" [label=""upgrade""];
""1129_setMemoryInterface"" [label=""setMemoryInterface""];
""1129_setEngineerInterface"" [label=""setEngineerInterface""];
""1129_setupMiniGame"" [label=""setupMiniGame""];
""1129_getProgramsValue"" [label=""getProgramsValue""];
""1129_setContractMiniGame"" [label=""setContractMiniGame""];
""1129_constructor"" [label=""constructor""];
""1129_setProgramPriceByDarkCrystals"" [label=""setProgramPriceByDarkCrystals""];
""1129_updateFactory"" [label=""updateFactory""];
""1129_fallback"" [label=""fallback""];
""1129_setProgramPriceByCrystals"" [label=""setProgramPriceByCrystals""];
""1129_devFee"" [label=""devFee""];
""1129_startGame"" [label=""startGame""];
""1129_subPrograms"" [label=""subPrograms""];
""1129_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1129_getData"" [label=""getData""];
""1129_initFactory"" [label=""initFactory""];
""1129_buyProgarams"" [label=""buyProgarams""];
""1129_addFactory"" [label=""addFactory""];
""1129_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1129_setContractMiniGame"" -> ""1129_isAdministrator"";
""1129_updateFactory"" -> ""1129_devFee"";
""1129_constructor"" -> ""1129_setEngineerInterface"";
""1129_constructor"" -> ""1129_setMiningWarInterface"";
""1129_setEngineerInterface"" -> ""1129_isAdministrator"";
""1129_constructor"" -> ""1129_setMemoryInterface"";
""1129_setProgramPriceByDarkCrystals"" -> ""1129_isAdministrator"";
""1129_setMemoryInterface"" -> ""1129_isAdministrator"";
""1129_startGame"" -> ""1129_initFactory"";
""1129_subPrograms"" -> ""1129_onlyContractsMiniGame"";
""1129_setMiningWarInterface"" -> ""1129_isAdministrator"";
""1129_setProgramValue"" -> ""1129_isAdministrator"";
""1129_addFactory"" -> ""1129_isAdministrator"";
""1129_setProgramPriceByCrystals"" -> ""1129_isAdministrator"";
""1129_removeContractMiniGame"" -> ""1129_isAdministrator"";
""1129_upgrade"" -> ""1129_isAdministrator"";
}
"
0x45125b61f06b2e9b8fc8a2ea688c35e27086d2ae.sol,OysterPearl,"contract OysterPearl { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public funds; address public director; bool public saleClosed; bool public directorLock; uint256 public claimAmount; uint256 public payAmount; uint256 public feeAmount; uint256 public epoch; uint256 public retentionMax; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public buried; mapping (address => uint256) public claimed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); event Bury(address indexed target, uint256 value); event Claim(address indexed target, address indexed payout, address indexed fee); function OysterPearl() public { director = msg.sender; name = ; symbol = ; decimals = 18; funds = 0; totalSupply = 0; saleClosed = true; directorLock = false; totalSupply += 25000000 * 10 ** uint256(decimals); totalSupply += 75000000 * 10 ** uint256(decimals); totalSupply += 1000000 * 10 ** uint256(decimals); balances[director] = totalSupply; claimAmount = 5 * 10 ** (uint256(decimals) - 1); payAmount = 4 * 10 ** (uint256(decimals) - 1); feeAmount = 1 * 10 ** (uint256(decimals) - 1); epoch = 31536001; retentionMax = 40 * 10 ** uint256(decimals); }",0,"subgraph cluster_1012_OysterPearl {
label=""OysterPearl"";
""1012_selfLock"" [label=""selfLock""];
""1012_burnFrom"" [label=""burnFrom""];
""1012_burn"" [label=""burn""];
""1012_transferFrom"" [label=""transferFrom""];
""1012_approve"" [label=""approve""];
""1012_amendEpoch"" [label=""amendEpoch""];
""1012_balanceOf"" [label=""balanceOf""];
""1012_amendClaim"" [label=""amendClaim""];
""1012_fallback"" [label=""fallback""];
""1012_approveAndCall"" [label=""approveAndCall""];
""1012_transferDirector"" [label=""transferDirector""];
""1012_withdrawFunds"" [label=""withdrawFunds""];
""1012_claim"" [label=""claim""];
""1012_bury"" [label=""bury""];
""1012__transfer"" [label=""_transfer""];
""1012_transfer"" [label=""transfer""];
""1012_OysterPearl"" [label=""OysterPearl""];
""1012_amendRetention"" [label=""amendRetention""];
""1012_closeSale"" [label=""closeSale""];
""1012_openSale"" [label=""openSale""];
""1012_selfLock"" -> ""1012_onlyDirector"";
""1012_amendEpoch"" -> ""1012_onlyDirector"";
""1012_transferFrom"" -> ""1012__transfer"";
""1012_approveAndCall"" -> ""1012_approve"";
""1012_transfer"" -> ""1012__transfer"";
""1012_withdrawFunds"" -> ""1012_onlyDirectorForce"";
""1012_openSale"" -> ""1012_onlyDirector"";
""1012_transferDirector"" -> ""1012_onlyDirectorForce"";
""1012_amendRetention"" -> ""1012_onlyDirector"";
""1012_closeSale"" -> ""1012_onlyDirector"";
""1012_amendClaim"" -> ""1012_onlyDirector"";
}
"
0x5b68a0d3e80020a54e85cdd457bc4ad8c49d8056.sol,OctaBlock,"contract OctaBlock is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 500000000e8; uint256 public totalDistributed = 0; uint256 public constant MIN_CONTRIBUTION = 1 ether / 1000; uint256 public tokensPerEth = 1200000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_944_OctaBlock {
label=""OctaBlock"";
""944_transferFrom"" [label=""transferFrom""];
""944_approve"" [label=""approve""];
""944_burn"" [label=""burn""];
""944_transfer"" [label=""transfer""];
""944_getTokens"" [label=""getTokens""];
""944_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""944_updateTokensPerEth"" [label=""updateTokensPerEth""];
""944_fallback"" [label=""fallback""];
""944_balanceOf"" [label=""balanceOf""];
""944_withdraw"" [label=""withdraw""];
""944_OctaBlock"" [label=""OctaBlock""];
""944_distr"" [label=""distr""];
""944_finishDistribution"" [label=""finishDistribution""];
""944_allowance"" [label=""allowance""];
""944_doAirdrop"" [label=""doAirdrop""];
""944_transferOwnership"" [label=""transferOwnership""];
""944_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""944_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""944_getTokenBalance"" [label=""getTokenBalance""];
""944_adminClaimAirdrop"" -> ""944_doAirdrop"";
""944_burn"" -> ""944_onlyOwner"";
""944_finishDistribution"" -> ""944_canDistr"";
""944_getTokens"" -> ""944_distr"";
""944_withdrawForeignTokens"" -> ""944_onlyOwner"";
""944_withdraw"" -> ""944_onlyOwner"";
""944_OctaBlock"" -> ""944_distr"";
""944_adminClaimAirdropMultiple"" -> ""944_onlyOwner"";
""944_adminClaimAirdrop"" -> ""944_onlyOwner"";
""944_transferOwnership"" -> ""944_onlyOwner"";
""944_finishDistribution"" -> ""944_onlyOwner"";
""944_transfer"" -> ""944_onlyPayloadSize"";
""944_transferFrom"" -> ""944_onlyPayloadSize"";
""944_distr"" -> ""944_canDistr"";
""944_fallback"" -> ""944_getTokens"";
""944_adminClaimAirdropMultiple"" -> ""944_doAirdrop"";
""944_getTokens"" -> ""944_canDistr"";
""944_updateTokensPerEth"" -> ""944_onlyOwner"";
}
"
0xb5fe93ccfec708145d6278b0c71ce60aa75ef925.sol,KetherHomepage,"contract KetherHomepage { event Buy( uint indexed idx, address owner, uint x, uint y, uint width, uint height ); event Publish( uint indexed idx, string link, string image, string title, bool NSFW ); event SetAdOwner( uint indexed idx, address from, address to ); uint public constant weiPixelPrice = 1000000000000000; uint public constant pixelsPerCell = 100; bool[100][100] public grid; address contractOwner; address withdrawWallet; struct Ad { address owner; uint x; uint y; uint width; uint height; string link; string image; string title; bool NSFW; bool forceNSFW; }",0,"subgraph cluster_403_KetherHomepage {
label=""KetherHomepage"";
""403_getAdsLength"" [label=""getAdsLength""];
""403_setAdOwner"" [label=""setAdOwner""];
""403_publish"" [label=""publish""];
""403_buy"" [label=""buy""];
""403_withdraw"" [label=""withdraw""];
""403_forceNSFW"" [label=""forceNSFW""];
""403_KetherHomepage"" [label=""KetherHomepage""];
}
"
0x33332025ad35a821eec5f1e10459222c8e4c62c3.sol,BytesUtils,"contract BytesUtils { function readBytes32(bytes data, uint256 index) internal pure returns (bytes32 o) { require(data.length / 32 > index); assembly { o := mload(add(data, add(32, mul(32, index)))) }",0,"subgraph cluster_250_BytesUtils {
label=""BytesUtils"";
""250_readBytes32"" [label=""readBytes32""];
}
"
0xec2b3c865c35b725c4787cedd0ed09276da31ada.sol,S26ICO,"contract S26ICO { using SafeMath for uint; enum IcoState {Running, Paused, Failed, Finished}",0,"subgraph cluster_2304_S26ICO {
label=""S26ICO"";
""2304_successICO"" [label=""successICO""];
""2304_hasFinished"" [label=""hasFinished""];
""2304_fallback"" [label=""fallback""];
""2304_failICO"" [label=""failICO""];
""2304_setRobot"" [label=""setRobot""];
""2304_isReachedLimit"" [label=""isReachedLimit""];
""2304_addToStat"" [label=""addToStat""];
""2304_setRate"" [label=""setRate""];
""2304_percent"" [label=""percent""];
""2304_min"" [label=""min""];
""2304_manageStatus"" [label=""manageStatus""];
""2304_pauseIco"" [label=""pauseIco""];
""2304_getBonus"" [label=""getBonus""];
""2304_startIco"" [label=""startIco""];
""2304_transferOwnership"" [label=""transferOwnership""];
""2304_refund"" [label=""refund""];
""2304_manualFinish"" [label=""manualFinish""];
""2304_hasStarted"" [label=""hasStarted""];
""2304_S26ICO"" [label=""S26ICO""];
""2304_calculateForValue"" [label=""calculateForValue""];
""2304_calculateTokens"" [label=""calculateTokens""];
""2304_finishICO"" [label=""finishICO""];
""2304_generateTeamTokens"" [label=""generateTeamTokens""];
""2304_withdraw"" [label=""withdraw""];
""2304_autoFinishTime"" [label=""autoFinishTime""];
""2304_robotRefund"" [label=""robotRefund""];
""2304_autoFinishTime"" -> ""2304_manageStatus"";
""2304_pauseIco"" -> ""2304_onlyOwner"";
""2304_robotRefund"" -> ""2304_ICOFailed"";
""2304_refund"" -> ""2304_ICOFailed"";
""2304_generateTeamTokens"" -> ""2304_addToStat"";
""2304_manageStatus"" -> ""2304_failICO"";
""2304_withdraw"" -> ""2304_onlyOwner"";
""2304_autoFinishTime"" -> ""2304_onlyTeam"";
""2304_manageStatus"" -> ""2304_finishICO"";
""2304_manualFinish"" -> ""2304_finishICO"";
""2304_hasFinished"" -> ""2304_isReachedLimit"";
""2304_fallback"" -> ""2304_ICOActive"";
""2304_generateTeamTokens"" -> ""2304_percent"";
""2304_fallback"" -> ""2304_addToStat"";
""2304_manageStatus"" -> ""2304_successICO"";
""2304_getBonus"" -> ""2304_percent"";
""2304_generateTeamTokens"" -> ""2304_ICOFinished"";
""2304_withdraw"" -> ""2304_successICOState"";
""2304_fallback"" -> ""2304_manageStatus"";
""2304_transferOwnership"" -> ""2304_onlyOwner"";
""2304_autoFinishTime"" -> ""2304_hasFinished"";
""2304_manualFinish"" -> ""2304_onlyTeam"";
""2304_manualFinish"" -> ""2304_hasFinished"";
""2304_autoFinishTime"" -> ""2304_generateTeamTokens"";
""2304_getBonus"" -> ""2304_min"";
""2304_startIco"" -> ""2304_onlyOwner"";
""2304_setRate"" -> ""2304_onlyTeam"";
""2304_calculateTokens"" -> ""2304_getBonus"";
""2304_finishICO"" -> ""2304_successICOState"";
""2304_manualFinish"" -> ""2304_generateTeamTokens"";
""2304_fallback"" -> ""2304_calculateTokens"";
""2304_setRobot"" -> ""2304_onlyOwner"";
""2304_calculateForValue"" -> ""2304_calculateTokens"";
""2304_robotRefund"" -> ""2304_onlyTeam"";
""2304_fallback"" -> ""2304_isReachedLimit"";
}
"
0x88355a32a8c5cc399aa09b9d21ebcba935ae5d2f.sol,Token,"contract Token { function transfer(address receiver, uint amount) public returns (bool) { (receiver); (amount); return false; }",0,"subgraph cluster_164_Token {
label=""Token"";
""164_approve"" [label=""approve""];
""164_balanceOf"" [label=""balanceOf""];
""164_transfer"" [label=""transfer""];
}
"
0x4042ff0b0ff691a1549d67ede0479a1f0d12f6ba.sol,Cosby,contract Cosby { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1323_Cosby {
label=""Cosby"";
""1323_setStakingRequirement"" [label=""setStakingRequirement""];
""1323_withdraw"" [label=""withdraw""];
""1323_buy"" [label=""buy""];
""1323_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1323_myTokens"" [label=""myTokens""];
""1323_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1323_fallback"" [label=""fallback""];
""1323_setSymbol"" [label=""setSymbol""];
""1323_Cosby"" [label=""Cosby""];
""1323_purchaseTokens"" [label=""purchaseTokens""];
""1323_myDividends"" [label=""myDividends""];
""1323_setAdministrator"" [label=""setAdministrator""];
""1323_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1323_sqrt"" [label=""sqrt""];
""1323_balanceOf"" [label=""balanceOf""];
""1323_transfer"" [label=""transfer""];
""1323_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1323_exit"" [label=""exit""];
""1323_setName"" [label=""setName""];
""1323_sellPrice"" [label=""sellPrice""];
""1323_dividendsOf"" [label=""dividendsOf""];
""1323_reinvest"" [label=""reinvest""];
""1323_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1323_buyPrice"" [label=""buyPrice""];
""1323_disableInitialStage"" [label=""disableInitialStage""];
""1323_totalSupply"" [label=""totalSupply""];
""1323_sell"" [label=""sell""];
""1323_exit"" -> ""1323_sell"";
""1323_transfer"" -> ""1323_onlyBagholders"";
""1323_exit"" -> ""1323_withdraw"";
""1323_setAdministrator"" -> ""1323_onlyAdministrator"";
""1323_purchaseTokens"" -> ""1323_antiEarlyWhale"";
""1323_reinvest"" -> ""1323_myDividends"";
""1323_buy"" -> ""1323_purchaseTokens"";
""1323_sell"" -> ""1323_tokensToEthereum_"";
""1323_disableInitialStage"" -> ""1323_onlyAdministrator"";
""1323_calculateTokensReceived"" -> ""1323_ethereumToTokens_"";
""1323_transfer"" -> ""1323_tokensToEthereum_"";
""1323_withdraw"" -> ""1323_onlyStronghands"";
""1323_transfer"" -> ""1323_withdraw"";
""1323_reinvest"" -> ""1323_purchaseTokens"";
""1323_calculateEthereumReceived"" -> ""1323_tokensToEthereum_"";
""1323_purchaseTokens"" -> ""1323_ethereumToTokens_"";
""1323_myDividends"" -> ""1323_dividendsOf"";
""1323_setSymbol"" -> ""1323_onlyAdministrator"";
""1323_sellPrice"" -> ""1323_tokensToEthereum_"";
""1323_setStakingRequirement"" -> ""1323_onlyAdministrator"";
""1323_withdraw"" -> ""1323_myDividends"";
""1323_buyPrice"" -> ""1323_tokensToEthereum_"";
""1323_setName"" -> ""1323_onlyAdministrator"";
""1323_reinvest"" -> ""1323_onlyStronghands"";
""1323_myTokens"" -> ""1323_balanceOf"";
""1323_fallback"" -> ""1323_purchaseTokens"";
""1323_transfer"" -> ""1323_myDividends"";
""1323_sell"" -> ""1323_onlyBagholders"";
""1323_ethereumToTokens_"" -> ""1323_sqrt"";
}
"
0x573e869ca9355299cddb3a912d444f137ded397c.sol,Fortis,contract Fortis { using SafeMath for uint; modifier onlyHolders() { require(myFrontEndTokens() > 0); _; },0,"subgraph cluster_2825_Fortis {
label=""Fortis"";
""2825_balanceOf"" [label=""balanceOf""];
""2825_transferFromInternal"" [label=""transferFromInternal""];
""2825_myReferralDividends"" [label=""myReferralDividends""];
""2825_startRegularPhase"" [label=""startRegularPhase""];
""2825_changeBankroll"" [label=""changeBankroll""];
""2825_injectEther"" [label=""injectEther""];
""2825_setStakingRequirement"" [label=""setStakingRequirement""];
""2825_theDividendsOf"" [label=""theDividendsOf""];
""2825_sqrt"" [label=""sqrt""];
""2825_totalSupply"" [label=""totalSupply""];
""2825_getDividendTokenSupply"" [label=""getDividendTokenSupply""];
""2825_transferFrom"" [label=""transferFrom""];
""2825_withdrawFrom"" [label=""withdrawFrom""];
""2825_calculateTokensReceived"" [label=""calculateTokensReceived""];
""2825_endICOPhase"" [label=""endICOPhase""];
""2825_withdraw"" [label=""withdraw""];
""2825_tokensToEthereum_"" [label=""tokensToEthereum_""];
""2825_transferTo"" [label=""transferTo""];
""2825_toPowerOfTwoThirds"" [label=""toPowerOfTwoThirds""];
""2825_reinvest"" [label=""reinvest""];
""2825_constructor"" [label=""constructor""];
""2825_buyAndTransfer"" [label=""buyAndTransfer""];
""2825_totalEthereumICOReceived"" [label=""totalEthereumICOReceived""];
""2825_getMyDividendRate"" [label=""getMyDividendRate""];
""2825_buyPrice"" [label=""buyPrice""];
""2825_transfer"" [label=""transfer""];
""2825_setName"" [label=""setName""];
""2825_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""2825_dividendsOf"" [label=""dividendsOf""];
""2825_purchaseTokens"" [label=""purchaseTokens""];
""2825_publicStartRegularPhase"" [label=""publicStartRegularPhase""];
""2825_ethereumToTokens_"" [label=""ethereumToTokens_""];
""2825_fallback"" [label=""fallback""];
""2825_myDividendTokens"" [label=""myDividendTokens""];
""2825_getUserAverageDividendRate"" [label=""getUserAverageDividendRate""];
""2825_toPowerOfThreeHalves"" [label=""toPowerOfThreeHalves""];
""2825_getFrontEndTokenSupply"" [label=""getFrontEndTokenSupply""];
""2825_sell"" [label=""sell""];
""2825_getFrontEndTokenBalanceOf"" [label=""getFrontEndTokenBalanceOf""];
""2825_exit"" [label=""exit""];
""2825_setAdministrator"" [label=""setAdministrator""];
""2825_cbrt"" [label=""cbrt""];
""2825_buy"" [label=""buy""];
""2825_myDividends"" [label=""myDividends""];
""2825_getMyAverageDividendRate"" [label=""getMyAverageDividendRate""];
""2825_buyAndSetDivPercentage"" [label=""buyAndSetDivPercentage""];
""2825_myFrontEndTokens"" [label=""myFrontEndTokens""];
""2825_setSymbol"" [label=""setSymbol""];
""2825_sellPrice"" [label=""sellPrice""];
""2825_getDividendTokenBalanceOf"" [label=""getDividendTokenBalanceOf""];
""2825_startICOPhase"" [label=""startICOPhase""];
""2825_totalEthereumBalance"" [label=""totalEthereumBalance""];
""2825_approve"" [label=""approve""];
""2825_injectEther"" -> ""2825_onlyAdministrator"";
""2825_theDividendsOf"" -> ""2825_dividendsOf"";
""2825_myReferralDividends"" -> ""2825_myDividends"";
""2825_buyAndTransfer"" -> ""2825_buyAndTransfer"";
""2825_transfer"" -> ""2825_onlyHolders"";
""2825_withdrawFrom"" -> ""2825_theDividendsOf"";
""2825_transferTo"" -> ""2825_transferFromInternal"";
""2825_buyAndTransfer"" -> ""2825_buyAndSetDivPercentage"";
""2825_exit"" -> ""2825_sell"";
""2825_withdraw"" -> ""2825_dividendHolder"";
""2825_ethereumToTokens_"" -> ""2825_toPowerOfThreeHalves"";
""2825_myDividendTokens"" -> ""2825_getDividendTokenBalanceOf"";
""2825_buyAndTransfer"" -> ""2825_purchaseTokens"";
""2825_buy"" -> ""2825_purchaseTokens"";
""2825_setAdministrator"" -> ""2825_onlyAdministrator"";
""2825_setStakingRequirement"" -> ""2825_onlyAdministrator"";
""2825_transferFromInternal"" -> ""2825_getUserAverageDividendRate"";
""2825_startRegularPhase"" -> ""2825_onlyAdministrator"";
""2825_sellPrice"" -> ""2825_getUserAverageDividendRate"";
""2825_transferFromInternal"" -> ""2825_withdrawFrom"";
""2825_toPowerOfThreeHalves"" -> ""2825_sqrt"";
""2825_startICOPhase"" -> ""2825_onlyAdministrator"";
""2825_purchaseTokens"" -> ""2825_ethereumToTokens_"";
""2825_transferFromInternal"" -> ""2825_theDividendsOf"";
""2825_reinvest"" -> ""2825_dividendHolder"";
""2825_exit"" -> ""2825_withdraw"";
""2825_transfer"" -> ""2825_transferFromInternal"";
""2825_setSymbol"" -> ""2825_onlyAdministrator"";
""2825_myFrontEndTokens"" -> ""2825_getFrontEndTokenBalanceOf"";
""2825_buyAndTransfer"" -> ""2825_transferTo"";
""2825_sell"" -> ""2825_onlyHolders"";
""2825_withdraw"" -> ""2825_myDividends"";
""2825_calculateEthereumReceived"" -> ""2825_tokensToEthereum_"";
""2825_balanceOf"" -> ""2825_getFrontEndTokenBalanceOf"";
""2825_reinvest"" -> ""2825_purchaseTokens"";
""2825_calculateTokensReceived"" -> ""2825_ethereumToTokens_"";
""2825_toPowerOfTwoThirds"" -> ""2825_cbrt"";
""2825_endICOPhase"" -> ""2825_onlyAdministrator"";
""2825_ethereumToTokens_"" -> ""2825_toPowerOfTwoThirds"";
""2825_changeBankroll"" -> ""2825_onlyAdministrator"";
""2825_fallback"" -> ""2825_purchaseTokens"";
""2825_reinvest"" -> ""2825_myDividends"";
""2825_buyAndSetDivPercentage"" -> ""2825_purchaseTokens"";
""2825_transferFrom"" -> ""2825_transferFromInternal"";
""2825_fallback"" -> ""2825_buyAndSetDivPercentage"";
""2825_buyPrice"" -> ""2825_ethereumToTokens_"";
""2825_getMyAverageDividendRate"" -> ""2825_getUserAverageDividendRate"";
""2825_myDividends"" -> ""2825_dividendsOf"";
""2825_tokensToEthereum_"" -> ""2825_toPowerOfThreeHalves"";
""2825_sellPrice"" -> ""2825_ethereumToTokens_"";
""2825_sell"" -> ""2825_getUserAverageDividendRate"";
""2825_sell"" -> ""2825_tokensToEthereum_"";
""2825_setName"" -> ""2825_onlyAdministrator"";
""2825_calculateEthereumReceived"" -> ""2825_getUserAverageDividendRate"";
}
"
0x06df6fdbf7629c71aee3f468ba1ab702fa0abec9.sol,Manager,"contract Manager is Pausable { using SafeMath for uint; mapping(address => bool) public ownerAccountsMap; mapping(address => bool) public exchangeAccountsMap; enum SettlementPhase { PREPARING, ONGOING, FINISHED }",0,"subgraph cluster_1826_Manager {
label=""Manager"";
""1826_startSettlementPreparation"" [label=""startSettlementPreparation""];
""1826_rmExchangeAccount"" [label=""rmExchangeAccount""];
""1826_finishSettlement"" [label=""finishSettlement""];
""1826_removeCustody"" [label=""removeCustody""];
""1826_createCustody"" [label=""createCustody""];
""1826_addOwnerAccount"" [label=""addOwnerAccount""];
""1826_isDailySettlementOnGoing"" [label=""isDailySettlementOnGoing""];
""1826_withdrawTokensFromCustody"" [label=""withdrawTokensFromCustody""];
""1826_settleBBDBatch"" [label=""settleBBDBatch""];
""1826_checkIfCustodiesServedETH"" [label=""checkIfCustodiesServedETH""];
""1826_isExchangeAlive"" [label=""isExchangeAlive""];
""1826_settleETHBatch"" [label=""settleETHBatch""];
""1826_unpause"" [label=""unpause""];
""1826_withdrawFromManager"" [label=""withdrawFromManager""];
""1826_constructor"" [label=""constructor""];
""1826_pause"" [label=""pause""];
""1826_setBBDPrice"" [label=""setBBDPrice""];
""1826_setCustodyFactory"" [label=""setCustodyFactory""];
""1826_updateHeartBeat"" [label=""updateHeartBeat""];
""1826_getTotalBalanceFor"" [label=""getTotalBalanceFor""];
""1826_withdrawFromCustody"" [label=""withdrawFromCustody""];
""1826_checkIfCustodiesServedBBD"" [label=""checkIfCustodiesServedBBD""];
""1826_fallback"" [label=""fallback""];
""1826_addExchangeAccount"" [label=""addExchangeAccount""];
""1826_finishSettlement"" -> ""1826_onlyAllowedInPhase"";
""1826_settleBBDBatch"" -> ""1826_onlyExchangeOrOwner"";
""1826_addExchangeAccount"" -> ""1826_whenNotPaused"";
""1826_updateHeartBeat"" -> ""1826_whenNotPaused"";
""1826_setBBDPrice"" -> ""1826_onlyExchangeOrOwner"";
""1826_createCustody"" -> ""1826_whenNotPaused"";
""1826_createCustody"" -> ""1826_onlyAllowedInPhase"";
""1826_finishSettlement"" -> ""1826_whenNotPaused"";
""1826_withdrawTokensFromCustody"" -> ""1826_onlyAllowedInPhase"";
""1826_withdrawTokensFromCustody"" -> ""1826_onlyExchangeOrOwner"";
""1826_settleBBDBatch"" -> ""1826_onlyAllowedInPhase"";
""1826_rmExchangeAccount"" -> ""1826_onlyOwner"";
""1826_withdrawFromCustody"" -> ""1826_onlyExchangeOrOwner"";
""1826_setBBDPrice"" -> ""1826_whenNotPaused"";
""1826_removeCustody"" -> ""1826_onlyExchangeOrOwner"";
""1826_withdrawTokensFromCustody"" -> ""1826_whenNotPaused"";
""1826_settleETHBatch"" -> ""1826_getTotalBalanceFor"";
""1826_withdrawFromCustody"" -> ""1826_onlyAllowedInPhase"";
""1826_settleBBDBatch"" -> ""1826_getTotalBalanceFor"";
""1826_unpause"" -> ""1826_onlyExchangeOrOwner"";
""1826_removeCustody"" -> ""1826_onlyAllowedInPhase"";
""1826_setCustodyFactory"" -> ""1826_onlyOwner"";
""1826_withdrawFromCustody"" -> ""1826_whenNotPaused"";
""1826_setBBDPrice"" -> ""1826_onlyAllowedInPhase"";
""1826_finishSettlement"" -> ""1826_onlyExchangeOrOwner"";
""1826_pause"" -> ""1826_onlyExchangeOrOwner"";
""1826_withdrawFromManager"" -> ""1826_onlyExchangeOrOwner"";
""1826_startSettlementPreparation"" -> ""1826_whenNotPaused"";
""1826_settleETHBatch"" -> ""1826_onlyAllowedInPhase"";
""1826_removeCustody"" -> ""1826_whenNotPaused"";
""1826_settleETHBatch"" -> ""1826_onlyExchangeOrOwner"";
""1826_rmExchangeAccount"" -> ""1826_whenNotPaused"";
""1826_startSettlementPreparation"" -> ""1826_onlyAllowedInPhase"";
""1826_settleETHBatch"" -> ""1826_whenNotPaused"";
""1826_settleBBDBatch"" -> ""1826_whenNotPaused"";
""1826_withdrawFromManager"" -> ""1826_onlyAllowedInPhase"";
""1826_updateHeartBeat"" -> ""1826_onlyOwner"";
""1826_startSettlementPreparation"" -> ""1826_onlyExchangeOrOwner"";
""1826_addExchangeAccount"" -> ""1826_onlyOwner"";
""1826_addOwnerAccount"" -> ""1826_onlyOwner"";
""1826_withdrawFromManager"" -> ""1826_whenNotPaused"";
}
"
0x4c478ac32725872e30bca49957abc7dbb325cb21.sol,daocrowdsale,"contract daocrowdsale is Ownable { using SafeMath for uint256; bytes32 constant password = keccak256(); bytes32 constant fin = keccak256(); COIN public DAO; uint256 public constant price = 500 finney; enum State {READY, LAUNCHED, STAGE1, STAGE2, STAGE3, FAIL}",0,"subgraph cluster_1086_daocrowdsale {
label=""daocrowdsale"";
""1086_TimeCheck"" [label=""TimeCheck""];
""1086_fallback"" [label=""fallback""];
""1086_masterBalanceOf"" [label=""masterBalanceOf""];
""1086_totalCoinSupply"" [label=""totalCoinSupply""];
""1086_buy"" [label=""buy""];
""1086_masterFns"" [label=""masterFns""];
""1086_StateShift"" [label=""StateShift""];
""1086_daocrowdsale"" [label=""daocrowdsale""];
""1086_StartNewStage"" [label=""StartNewStage""];
""1086_GetCurrentState"" [label=""GetCurrentState""];
""1086_masterBalanceOf"" -> ""1086_IsOutdated"";
""1086_buy"" -> ""1086_IsBought"";
""1086_masterBalanceOf"" -> ""1086_IsBought"";
""1086_buy"" -> ""1086_IsOutdated"";
}
"
0x3f9c0a5773817ffaa5a1061e1e33c1d9c8888dff.sol,Noblebit,"contract Noblebit is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 200000000e8; uint256 private totalReserved = (totalSupply.div(100)).mul(15); uint256 private totalBounties = (totalSupply.div(100)).mul(5); uint256 public totalDistributed = totalReserved.add(totalBounties); uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value; uint256 public minReq; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1168_Noblebit {
label=""Noblebit"";
""1168_getTokenBalance"" [label=""getTokenBalance""];
""1168_allowance"" [label=""allowance""];
""1168_transfer"" [label=""transfer""];
""1168_enableWhitelist"" [label=""enableWhitelist""];
""1168_fallback"" [label=""fallback""];
""1168_balanceOf"" [label=""balanceOf""];
""1168_withdraw"" [label=""withdraw""];
""1168_burn"" [label=""burn""];
""1168_approve"" [label=""approve""];
""1168_distribution"" [label=""distribution""];
""1168_disableWhitelist"" [label=""disableWhitelist""];
""1168_getTokens"" [label=""getTokens""];
""1168_finishDistribution"" [label=""finishDistribution""];
""1168_distr"" [label=""distr""];
""1168_transferFrom"" [label=""transferFrom""];
""1168_setParameters"" [label=""setParameters""];
""1168_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1168_transferOwnership"" [label=""transferOwnership""];
""1168_Noblebit"" [label=""Noblebit""];
""1168_airdrop"" [label=""airdrop""];
""1168_distributeAmounts"" [label=""distributeAmounts""];
""1168_distributeAmounts"" -> ""1168_onlyOwner"";
""1168_distribution"" -> ""1168_distr"";
""1168_getTokens"" -> ""1168_distr"";
""1168_distributeAmounts"" -> ""1168_canDistr"";
""1168_distributeAmounts"" -> ""1168_distr"";
""1168_finishDistribution"" -> ""1168_canDistr"";
""1168_transferFrom"" -> ""1168_onlyPayloadSize"";
""1168_setParameters"" -> ""1168_onlyOwner"";
""1168_enableWhitelist"" -> ""1168_onlyOwner"";
""1168_airdrop"" -> ""1168_onlyOwner"";
""1168_distribution"" -> ""1168_onlyOwner"";
""1168_getTokens"" -> ""1168_onlyWhitelist"";
""1168_burn"" -> ""1168_onlyOwner"";
""1168_distr"" -> ""1168_canDistr"";
""1168_transferOwnership"" -> ""1168_onlyOwner"";
""1168_withdraw"" -> ""1168_onlyOwner"";
""1168_getTokens"" -> ""1168_canDistr"";
""1168_transfer"" -> ""1168_onlyPayloadSize"";
""1168_finishDistribution"" -> ""1168_onlyOwner"";
""1168_airdrop"" -> ""1168_canDistr"";
""1168_withdrawForeignTokens"" -> ""1168_onlyOwner"";
""1168_airdrop"" -> ""1168_distr"";
""1168_fallback"" -> ""1168_getTokens"";
""1168_disableWhitelist"" -> ""1168_onlyOwner"";
""1168_distribution"" -> ""1168_canDistr"";
}
"
0x25f1638577b69186c1d7a2e6bb297a82cdc602f2.sol,StinkyLinky,contract StinkyLinky { address ceoAddress = 0xC0c8Dc6C1485060a72FCb629560371fE09666500; struct Sergey { address currentStinkyLinky; uint256 currentValue; },0,"subgraph cluster_343_StinkyLinky {
label=""StinkyLinky"";
""343_purchaseCollectible"" [label=""purchaseCollectible""];
""343_StinkyLinky"" [label=""StinkyLinky""];
""343_transactionFee"" [label=""transactionFee""];
""343_payPreviousOwner"" [label=""payPreviousOwner""];
""343_getCurrentStinkyLinkys"" [label=""getCurrentStinkyLinkys""];
""343_purchaseCollectible"" -> ""343_payPreviousOwner"";
""343_purchaseCollectible"" -> ""343_transactionFee"";
}
"
0x55c87c2e26f66fd3642645c3f25c9e81a75ec0f4.sol,XCPlugin,contract XCPlugin is XCPluginInterface { struct Admin { bool status; bytes32 platformName; bytes32 tokenSymbol; address account; },0,"subgraph cluster_1830_XCPlugin {
label=""XCPlugin"";
""1830__existPlatform"" [label=""_existPlatform""];
""1830_recover"" [label=""recover""];
""1830_addPlatform"" [label=""addPlatform""];
""1830_getCallers"" [label=""getCallers""];
""1830_XCPlugin"" [label=""XCPlugin""];
""1830__existPublicKey"" [label=""_existPublicKey""];
""1830_countOfPublicKey"" [label=""countOfPublicKey""];
""1830_deleteProposal"" [label=""deleteProposal""];
""1830_commitProposal"" [label=""commitProposal""];
""1830_existPlatform"" [label=""existPlatform""];
""1830_getAdmin"" [label=""getAdmin""];
""1830_getProposal"" [label=""getProposal""];
""1830_verifyProposal"" [label=""verifyProposal""];
""1830_stop"" [label=""stop""];
""1830_deletePlatform"" [label=""deletePlatform""];
""1830_init"" [label=""init""];
""1830_getStatus"" [label=""getStatus""];
""1830_voteProposal"" [label=""voteProposal""];
""1830_deletePublicKey"" [label=""deletePublicKey""];
""1830_getPlatformName"" [label=""getPlatformName""];
""1830_getWeight"" [label=""getWeight""];
""1830_existCaller"" [label=""existCaller""];
""1830_setAdmin"" [label=""setAdmin""];
""1830_setWeight"" [label=""setWeight""];
""1830_existPublicKey"" [label=""existPublicKey""];
""1830_transfer"" [label=""transfer""];
""1830_uintToStr"" [label=""uintToStr""];
""1830_addCaller"" [label=""addCaller""];
""1830_addPublicKey"" [label=""addPublicKey""];
""1830_changeVoters"" [label=""changeVoters""];
""1830_bytes32ToStr"" [label=""bytes32ToStr""];
""1830_hashMsg"" [label=""hashMsg""];
""1830_deleteCaller"" [label=""deleteCaller""];
""1830_start"" [label=""start""];
""1830__existCaller"" [label=""_existCaller""];
""1830_publicKeys"" [label=""publicKeys""];
""1830_verifyProposal"" -> ""1830__existPlatform"";
""1830_hashMsg"" -> ""1830_uintToStr"";
""1830_publicKeys"" -> ""1830__existPlatform"";
""1830_voteProposal"" -> ""1830_recover"";
""1830_setWeight"" -> ""1830__existPlatform"";
""1830_addPlatform"" -> ""1830__existPlatform"";
""1830_commitProposal"" -> ""1830__existPlatform"";
""1830_addCaller"" -> ""1830__existCaller"";
""1830_existPlatform"" -> ""1830__existPlatform"";
""1830_XCPlugin"" -> ""1830_init"";
""1830_voteProposal"" -> ""1830_hashMsg"";
""1830_addPublicKey"" -> ""1830__existPlatform"";
""1830_voteProposal"" -> ""1830__existPlatform"";
""1830_existCaller"" -> ""1830__existCaller"";
""1830_hashMsg"" -> ""1830_bytes32ToStr"";
""1830_countOfPublicKey"" -> ""1830__existPlatform"";
""1830_commitProposal"" -> ""1830__existCaller"";
""1830_deleteCaller"" -> ""1830__existCaller"";
""1830_getWeight"" -> ""1830__existPlatform"";
""1830_existPublicKey"" -> ""1830__existPublicKey"";
""1830_deletePlatform"" -> ""1830__existPlatform"";
""1830_getProposal"" -> ""1830__existPlatform"";
""1830_deleteProposal"" -> ""1830__existPlatform"";
""1830_voteProposal"" -> ""1830_changeVoters"";
""1830_deletePublicKey"" -> ""1830__existPlatform"";
""1830_voteProposal"" -> ""1830__existPublicKey"";
}
"
0x27421fa936230e577ee4e91f983e788adb85ac85.sol,Bingo,"contract Bingo { using SafeMath for uint; MegaballInterface constant public megaballContract = MegaballInterface(address(0x3Fe2B3e8FEB33ed523cE8F786c22Cb6556f8A33F)); DiviesInterface constant private Divies = DiviesInterface(address(0xc7029Ed9EBa97A096e72607f4340c34049C7AF48)); event CardCreated(address indexed ticketOwner, uint indexed playerTicket, uint indexed stage); event Payment(address indexed customerAddress, uint indexed stage); event NumberCalled(uint indexed number, uint indexed stage, uint indexed total); event OnWithdraw(address indexed customerAddress, uint256 ethereumWithdrawn); event StageCreated(uint indexed stageNumber); modifier hasBalance() { require(bingoVault[msg.sender] > 0); _; }",0,"subgraph cluster_5257_Bingo {
label=""Bingo"";
""5257_checkO"" [label=""checkO""];
""5257_withdraw"" [label=""withdraw""];
""5257_getCardRowB"" [label=""getCardRowB""];
""5257_calculateOnePercentTicketCostSplit"" [label=""calculateOnePercentTicketCostSplit""];
""5257_getPaybackPlayerCount"" [label=""getPaybackPlayerCount""];
""5257_calculatePayoutDenomination"" [label=""calculatePayoutDenomination""];
""5257_withdrawFromMB"" [label=""withdrawFromMB""];
""5257_createCard"" [label=""createCard""];
""5257_getMegaballStatus"" [label=""getMegaballStatus""];
""5257_checkH3"" [label=""checkH3""];
""5257_payCaller"" [label=""payCaller""];
""5257_initFirstStage"" [label=""initFirstStage""];
""5257_seedMegball"" [label=""seedMegball""];
""5257_makeCard"" [label=""makeCard""];
""5257_checkG"" [label=""checkG""];
""5257_payTicket"" [label=""payTicket""];
""5257_getStageStatus"" [label=""getStageStatus""];
""5257_CreateStage"" [label=""CreateStage""];
""5257_getCardRowI"" [label=""getCardRowI""];
""5257_resetDrawBlocks"" [label=""resetDrawBlocks""];
""5257_checkH4"" [label=""checkH4""];
""5257_checkI"" [label=""checkI""];
""5257_getCardRowN"" [label=""getCardRowN""];
""5257_claimBingo"" [label=""claimBingo""];
""5257_getCardRowO"" [label=""getCardRowO""];
""5257_constructor"" [label=""constructor""];
""5257_nextPaybacks"" [label=""nextPaybacks""];
""5257_checkBingo"" [label=""checkBingo""];
""5257_getNumberCallersCount"" [label=""getNumberCallersCount""];
""5257_getEntrantsPlayerCount"" [label=""getEntrantsPlayerCount""];
""5257_isWithinBounds"" [label=""isWithinBounds""];
""5257_callNumber"" [label=""callNumber""];
""5257_getStageBlocks"" [label=""getStageBlocks""];
""5257_sort_array"" [label=""sort_array""];
""5257_randomArr"" [label=""randomArr""];
""5257_isNumberCalled"" [label=""isNumberCalled""];
""5257_checkN"" [label=""checkN""];
""5257_stageMoveDetail"" [label=""stageMoveDetail""];
""5257_callNumbers"" [label=""callNumbers""];
""5257_getMBbalance"" [label=""getMBbalance""];
""5257_getBingoBalance"" [label=""getBingoBalance""];
""5257_payProgressive"" [label=""payProgressive""];
""5257_addToPaybacks"" [label=""addToPaybacks""];
""5257_fallback"" [label=""fallback""];
""5257_checkH1"" [label=""checkH1""];
""5257_repayment"" [label=""repayment""];
""5257_checkB"" [label=""checkB""];
""5257_checkD1"" [label=""checkD1""];
""5257_getPlayerCardsThisStage"" [label=""getPlayerCardsThisStage""];
""5257_getStageDrawTime"" [label=""getStageDrawTime""];
""5257_getCardRowG"" [label=""getCardRowG""];
""5257_isCallNumberAvailable"" [label=""isCallNumberAvailable""];
""5257_checkD2"" [label=""checkD2""];
""5257_checkH2"" [label=""checkH2""];
""5257_processPaybackQueue"" [label=""processPaybackQueue""];
""5257_makeRow"" [label=""makeRow""];
""5257_checkH5"" [label=""checkH5""];
""5257_getStageDenomination"" [label=""getStageDenomination""];
""5257_random"" [label=""random""];
""5257_sendDivi"" [label=""sendDivi""];
""5257_callNumbers"" -> ""5257_callNumber"";
""5257_checkBingo"" -> ""5257_checkO"";
""5257_claimBingo"" -> ""5257_processPaybackQueue"";
""5257_repayment"" -> ""5257_addToPaybacks"";
""5257_initFirstStage"" -> ""5257_CreateStage"";
""5257_makeRow"" -> ""5257_sort_array"";
""5257_checkN"" -> ""5257_isNumberCalled"";
""5257_checkO"" -> ""5257_isNumberCalled"";
""5257_makeCard"" -> ""5257_makeRow"";
""5257_CreateStage"" -> ""5257_calculateOnePercentTicketCostSplit"";
""5257_checkBingo"" -> ""5257_checkD2"";
""5257_claimBingo"" -> ""5257_payProgressive"";
""5257_checkBingo"" -> ""5257_checkN"";
""5257_checkH5"" -> ""5257_isNumberCalled"";
""5257_checkBingo"" -> ""5257_checkG"";
""5257_checkBingo"" -> ""5257_checkD1"";
""5257_CreateStage"" -> ""5257_sendDivi"";
""5257_callNumbers"" -> ""5257_CreateStage"";
""5257_checkI"" -> ""5257_isNumberCalled"";
""5257_checkD2"" -> ""5257_isNumberCalled"";
""5257_checkG"" -> ""5257_isNumberCalled"";
""5257_randomArr"" -> ""5257_random"";
""5257_payProgressive"" -> ""5257_calculateOnePercentTicketCostSplit"";
""5257_claimBingo"" -> ""5257_payTicket"";
""5257_CreateStage"" -> ""5257_calculatePayoutDenomination"";
""5257_claimBingo"" -> ""5257_repayment"";
""5257_withdraw"" -> ""5257_hasBalance"";
""5257_checkBingo"" -> ""5257_checkH1"";
""5257_callNumbers"" -> ""5257_isNumberCalled"";
""5257_checkH2"" -> ""5257_isNumberCalled"";
""5257_checkD1"" -> ""5257_isNumberCalled"";
""5257_checkH1"" -> ""5257_isNumberCalled"";
""5257_makeRow"" -> ""5257_randomArr"";
""5257_CreateStage"" -> ""5257_processPaybackQueue"";
""5257_claimBingo"" -> ""5257_payCaller"";
""5257_claimBingo"" -> ""5257_checkBingo"";
""5257_callNumbers"" -> ""5257_getMegaballStatus"";
""5257_checkH4"" -> ""5257_isNumberCalled"";
""5257_checkBingo"" -> ""5257_checkH5"";
""5257_checkBingo"" -> ""5257_checkH2"";
""5257_checkH3"" -> ""5257_isNumberCalled"";
""5257_checkBingo"" -> ""5257_checkB"";
""5257_checkBingo"" -> ""5257_checkH3"";
""5257_checkB"" -> ""5257_isNumberCalled"";
""5257_payProgressive"" -> ""5257_calculatePayoutDenomination"";
""5257_random"" -> ""5257_isWithinBounds"";
""5257_CreateStage"" -> ""5257_seedMegball"";
""5257_CreateStage"" -> ""5257_withdrawFromMB"";
""5257_callNumber"" -> ""5257_resetDrawBlocks"";
""5257_checkBingo"" -> ""5257_checkI"";
""5257_claimBingo"" -> ""5257_CreateStage"";
""5257_callNumbers"" -> ""5257_resetDrawBlocks"";
""5257_createCard"" -> ""5257_makeCard"";
""5257_checkBingo"" -> ""5257_checkH4"";
}
"
0x333c86f84343058cbf7762c5043c90e41129fc5b.sol,BancorFormula,"contract BancorFormula is Power { using SafeMath for uint256; string public version = ; uint32 private constant MAX_WEIGHT = 1000000; function calculatePurchaseReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _depositAmount) public constant returns (uint256) { require(_supply > 0 && _connectorBalance > 0 && _connectorWeight > 0 && _connectorWeight <= MAX_WEIGHT); if (_depositAmount == 0) return 0; if (_connectorWeight == MAX_WEIGHT) return _supply.mul(_depositAmount).div(_connectorBalance); uint256 result; uint8 precision; uint256 baseN = _depositAmount.add(_connectorBalance); (result, precision) = power(baseN, _connectorBalance, _connectorWeight, MAX_WEIGHT); uint256 temp = _supply.mul(result) >> precision; return temp - _supply; }",0,"subgraph cluster_2190_BancorFormula {
label=""BancorFormula"";
""2190_calculateSaleReturn"" [label=""calculateSaleReturn""];
""2190_calculatePurchaseReturn"" [label=""calculatePurchaseReturn""];
""2190_calculateSaleReturn"" -> ""2190_power"";
""2190_calculatePurchaseReturn"" -> ""2190_power"";
}
"
0x00676065a7854163c6a4d5f474496514d03e31c4.sol,CrystalDeposit,contract CrystalDeposit { using SafeMath for uint256; address public administrator; uint256 public HALF_TIME = 48 hours; uint256 public MIN_TIME_WITH_DEADLINE = 12 hours; uint256 public round = 0; CryptoEngineerInterface public Engineer; CryptoMiningWarInterface public MiningWar; address miningWarAddress; uint256 miningWarDeadline; uint256 constant private CRTSTAL_MINING_PERIOD = 86400; mapping(uint256 => Game) public games; mapping(address => Player) public players; mapping(address => bool) public miniGames; struct Game { uint256 round; uint256 crystals; uint256 prizePool; uint256 startTime; uint256 endTime; bool ended; },0,"subgraph cluster_1066_CrystalDeposit {
label=""CrystalDeposit"";
""1066_endRound"" [label=""endRound""];
""1066_upgrade"" [label=""upgrade""];
""1066_startRound"" [label=""startRound""];
""1066_getData"" [label=""getData""];
""1066_setupMiniGame"" [label=""setupMiniGame""];
""1066_calculateReward"" [label=""calculateReward""];
""1066_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1066_getPlayerData"" [label=""getPlayerData""];
""1066_setEngineerInterface"" [label=""setEngineerInterface""];
""1066_constructor"" [label=""constructor""];
""1066_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1066_startGame"" [label=""startGame""];
""1066_getCurrentGame"" [label=""getCurrentGame""];
""1066_updateReward"" [label=""updateReward""];
""1066_isDepositContract"" [label=""isDepositContract""];
""1066_share"" [label=""share""];
""1066_fallback"" [label=""fallback""];
""1066_getEngineerPrizePool"" [label=""getEngineerPrizePool""];
""1066_setContractsMiniGame"" [label=""setContractsMiniGame""];
""1066_withdrawReward"" [label=""withdrawReward""];
""1066_isContractMiniGame"" [label=""isContractMiniGame""];
""1066_getCurrentReward"" [label=""getCurrentReward""];
""1066_setContractsMiniGame"" -> ""1066_isAdministrator"";
""1066_withdrawReward"" -> ""1066_endRound"";
""1066_endRound"" -> ""1066_startRound"";
""1066_startGame"" -> ""1066_startRound"";
""1066_getData"" -> ""1066_getCurrentGame"";
""1066_withdrawReward"" -> ""1066_updateReward"";
""1066_upgrade"" -> ""1066_isAdministrator"";
""1066_setMiningWarInterface"" -> ""1066_isAdministrator"";
""1066_updateReward"" -> ""1066_calculateReward"";
""1066_share"" -> ""1066_updateReward"";
""1066_startRound"" -> ""1066_getEngineerPrizePool"";
""1066_setEngineerInterface"" -> ""1066_isAdministrator"";
""1066_getCurrentReward"" -> ""1066_calculateReward"";
""1066_share"" -> ""1066_endRound"";
""1066_share"" -> ""1066_disableContract"";
""1066_getData"" -> ""1066_getPlayerData"";
""1066_startGame"" -> ""1066_isAdministrator"";
""1066_constructor"" -> ""1066_setMiningWarInterface"";
""1066_getPlayerData"" -> ""1066_calculateReward"";
""1066_constructor"" -> ""1066_setEngineerInterface"";
""1066_removeContractMiniGame"" -> ""1066_isAdministrator"";
}
"
0xbed054a85299561c8e17b393cda91fa690d6bd28.sol,TTBCoin,contract TTBCoin is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 100000000000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; constructor () public { owner = msg.sender; },0,"subgraph cluster_815_TTBCoin {
label=""TTBCoin"";
""815_freezeTransfers"" [label=""freezeTransfers""];
""815_totalSupply"" [label=""totalSupply""];
""815_setOwner"" [label=""setOwner""];
""815_constructor"" [label=""constructor""];
""815_refundTokens"" [label=""refundTokens""];
""815_freezeAccount"" [label=""freezeAccount""];
""815_transfer"" [label=""transfer""];
""815_transferFrom"" [label=""transferFrom""];
""815_burn"" [label=""burn""];
""815_approve"" [label=""approve""];
""815_createTokens"" [label=""createTokens""];
""815_unfreezeTransfers"" [label=""unfreezeTransfers""];
""815_transferFrom"" -> ""815_transferFrom"";
""815_createTokens"" -> ""815_safeSub"";
""815_createTokens"" -> ""815_safeAdd"";
""815_approve"" -> ""815_allowance"";
""815_approve"" -> ""815_approve"";
""815_transfer"" -> ""815_transfer"";
""815_burn"" -> ""815_safeSub"";
}
"
0xc62c957c60bd4f632f6fb896ec42057b1eccc547.sol,ECN,"contract ECN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ECN( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_361_ECN {
label=""ECN"";
""361_approve"" [label=""approve""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_ECN"" [label=""ECN""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.sol,StandardToken,"contract StandardToken is ERC20, BasicToken { mapping (address => mapping (address => uint256)) internal allowed; function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) { require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); emit Transfer(_from, _to, _value); return true; }",0,"subgraph cluster_1443_StandardToken {
label=""StandardToken"";
""1443_increaseApproval"" [label=""increaseApproval""];
""1443_transferFrom"" [label=""transferFrom""];
""1443_approve"" [label=""approve""];
""1443_allowance"" [label=""allowance""];
""1443_decreaseApproval"" [label=""decreaseApproval""];
}
"
0x18dd9ae3383de623db1ea37d8da5dde1dc74d356.sol,DrawTicket,"contract DrawTicket is usingOraclize { address public owner; uint private _fromTicket; uint private _toTicket; string private _potName; event newRandomNumber_bytes(bytes number); event newRandomNumber_uint(uint number); event LogNewOraclizeQuery(string description); event LogResults(string potName, uint fromTicket, uint toTicket, uint winningTicket); function DrawTicket() { owner = msg.sender; oraclize_setProof(proofType_Ledger); }",0,"subgraph cluster_6222_DrawTicket {
label=""DrawTicket"";
""6222___callback"" [label=""__callback""];
""6222_DrawTicket"" [label=""DrawTicket""];
""6222_withdrawETH"" [label=""withdrawETH""];
""6222_getWinningTicket"" [label=""getWinningTicket""];
""6222_storeETH"" [label=""storeETH""];
""6222_getWinningTicket"" -> ""6222_oraclize_newRandomDSQuery"";
""6222_DrawTicket"" -> ""6222_oraclize_setProof"";
""6222_getWinningTicket"" -> ""6222_oraclize_getPrice"";
""6222_getWinningTicket"" -> ""6222_oraclize_setCustomGasPrice"";
""6222___callback"" -> ""6222_oraclize_randomDS_proofVerify__returnCode"";
""6222___callback"" -> ""6222_oraclize_cbAddress"";
}
"
0x6ed680055bd5a04c194c954f71019ee90145001c.sol,Game,contract Game is FixedSupplyToken { HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe); struct Village { address owner; uint defending; uint lastcollect; uint beginnerprotection; },0,"subgraph cluster_4971_Game {
label=""Game"";
""4971_playerinfo"" [label=""playerinfo""];
""4971_villageinfo"" [label=""villageinfo""];
""4971_batchcreatevillage"" [label=""batchcreatevillage""];
""4971_adddotchtooffer"" [label=""adddotchtooffer""];
""4971_preregvills"" [label=""preregvills""];
""4971_attackhill"" [label=""attackhill""];
""4971_fallback"" [label=""fallback""];
""4971_removedotchtooffer"" [label=""removedotchtooffer""];
""4971_supporthill"" [label=""supporthill""];
""4971_changebeginnerprotection"" [label=""changebeginnerprotection""];
""4971_collecttaxes"" [label=""collecttaxes""];
""4971_cheapredeemvillage"" [label=""cheapredeemvillage""];
""4971_constructor"" [label=""constructor""];
""4971_soldiersinfo"" [label=""soldiersinfo""];
""4971_createvillage"" [label=""createvillage""];
""4971_gotchinfo"" [label=""gotchinfo""];
""4971_offerchangeprice"" [label=""offerchangeprice""];
""4971_placeoffer"" [label=""placeoffer""];
""4971_Divsforall"" [label=""Divsforall""];
""4971_buyp3d"" [label=""buyp3d""];
""4971_Expand"" [label=""Expand""];
""4971_startnewround"" [label=""startnewround""];
""4971_redeemablevilsinfo"" [label=""redeemablevilsinfo""];
""4971_claimdivs"" [label=""claimdivs""];
""4971_takeoffer"" [label=""takeoffer""];
""4971_Divs"" [label=""Divs""];
""4971_changetradestatus"" [label=""changetradestatus""];
""4971_support"" [label=""support""];
""4971_changesoldierreplenishrate"" [label=""changesoldierreplenishrate""];
""4971_setdivsforall"" [label=""setdivsforall""];
""4971_renewbeginnerprotection"" [label=""renewbeginnerprotection""];
""4971_updatesolbuyrate"" [label=""updatesolbuyrate""];
""4971_buyDOTCH"" [label=""buyDOTCH""];
""4971_hillpayout"" [label=""hillpayout""];
""4971_harvestabledivs"" [label=""harvestabledivs""];
""4971_buysoldiers"" [label=""buysoldiers""];
""4971_attack"" [label=""attack""];
""4971_batchcollecttaxes"" [label=""batchcollecttaxes""];
""4971_updatesolsforhire"" [label=""updatesolsforhire""];
""4971_sellDOTCH"" [label=""sellDOTCH""];
""4971_preregvills"" -> ""4971_onlyOwner"";
""4971_createvillage"" -> ""4971_hillpayout"";
""4971_collecttaxes"" -> ""4971_hillpayout"";
""4971_changesoldierreplenishrate"" -> ""4971_onlyOwner"";
""4971_Divsforall"" -> ""4971_claimdivs"";
""4971_changetradestatus"" -> ""4971_onlyOwner"";
""4971_constructor"" -> ""4971_updatesolbuyrate"";
""4971_Expand"" -> ""4971_buyp3d"";
""4971_attack"" -> ""4971_hillpayout"";
""4971_attack"" -> ""4971_collecttaxes"";
""4971_buysoldiers"" -> ""4971_updatesolbuyrate"";
""4971_setdivsforall"" -> ""4971_onlyOwner"";
""4971_Divs"" -> ""4971_claimdivs"";
""4971_startnewround"" -> ""4971_updatesolbuyrate"";
""4971_attackhill"" -> ""4971_hillpayout"";
""4971_batchcreatevillage"" -> ""4971_hillpayout"";
""4971_buysoldiers"" -> ""4971_updatesolsforhire"";
""4971_changebeginnerprotection"" -> ""4971_onlyOwner"";
""4971_Divsforall"" -> ""4971_harvestabledivs"";
}
"
0xee52d05a2351151beabedb7a9e38cc1a2095a8ce.sol,PIPOT,"contract PIPOT is Owner { using SafeMath for uint256; event Game(uint _game, uint indexed _time); event ChangePrice(uint _price); event Ticket( address indexed _address, uint indexed _game, uint _number, uint _time, uint _price ); event ChangeFee(uint _fee); event Winner(address _winnerAddress, uint _price, uint _jackpot); event Lose(uint _price, uint _currentJackpot); uint public fee = 20; uint public game; uint public ticketPrice = 0.1 ether; uint public allTimeJackpot = 0; uint public allTimePlayers = 0; bool public isActive = true; bool public toogleStatus = false; uint[] public games; mapping(uint => uint) jackpot; mapping(uint => address[]) players; mapping(uint => mapping(uint => address[])) orders; address public fundsDistributor; modifier onlyOwner() { require(msg.sender == owner); _; }",0,"subgraph cluster_574_PIPOT {
label=""PIPOT"";
""574_getPlayersInGame"" [label=""getPlayersInGame""];
""574_changeFee"" [label=""changeFee""];
""574_getPlayedGamePlayers"" [label=""getPlayedGamePlayers""];
""574_pickTheWinner"" [label=""pickTheWinner""];
""574_PIPOT"" [label=""PIPOT""];
""574_toogleActive"" [label=""toogleActive""];
""574_changeTicketPrice"" [label=""changeTicketPrice""];
""574_getPlayedGameJackpot"" [label=""getPlayedGameJackpot""];
""574_getGameJackpot"" [label=""getGameJackpot""];
""574_startGame"" [label=""startGame""];
""574_buyTicket"" [label=""buyTicket""];
""574_start"" [label=""start""];
""574_PIPOT"" -> ""574_Owner"";
""574_start"" -> ""574_pickTheWinner"";
""574_start"" -> ""574_onlyOwner"";
""574_getPlayedGamePlayers"" -> ""574_getPlayersInGame"";
""574_changeFee"" -> ""574_onlyOwner"";
""574_changeTicketPrice"" -> ""574_onlyOwner"";
""574_toogleActive"" -> ""574_onlyOwner"";
""574_getPlayedGameJackpot"" -> ""574_getGameJackpot"";
""574_start"" -> ""574_startGame"";
""574_PIPOT"" -> ""574_startGame"";
}
"
0x37aa63c4cbd06a57f1ea35bceee4e46f0a7ce924.sol,UniContract,"contract UniContract is StandardToken, owned { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 0; address public multisig; address public founder; uint public start; uint public end; uint public launch; uint256 public PRICE = 217135; uint256 public OVERALLSOLD = 3148890; uint256 public MAXTOKENSOLD = 85000000; function UniContract() onlyOwner { founder = 0x204244062B04089b6Ef55981Ad82119cEBf54F88; multisig= 0x9FA2d2231FE8ac207831B376aa4aE35671619960; start = 1507543200; end = 1509098400; launch = 1509534000; balances[founder] = balances[founder].add(18148890); }",0,"subgraph cluster_1395_UniContract {
label=""UniContract"";
""1395_getSupply"" [label=""getSupply""];
""1395_getQueueLength"" [label=""getQueueLength""];
""1395_addMessageToQueue"" [label=""addMessageToQueue""];
""1395_getAddress"" [label=""getAddress""];
""1395_getSold"" [label=""getSold""];
""1395_getPrice"" [label=""getPrice""];
""1395_aSetStart"" [label=""aSetStart""];
""1395_submitEther"" [label=""submitEther""];
""1395_fallback"" [label=""fallback""];
""1395_feedUnicorn"" [label=""feedUnicorn""];
""1395_UniContract"" [label=""UniContract""];
""1395_aPurgeMessages"" [label=""aPurgeMessages""];
""1395_aSetEnd"" [label=""aSetEnd""];
""1395_aDeleteMessage"" [label=""aDeleteMessage""];
""1395_submitTokens"" [label=""submitTokens""];
""1395_aSetLaunch"" [label=""aSetLaunch""];
""1395_getUniCoinSize"" [label=""getUniCoinSize""];
""1395_getMessage"" [label=""getMessage""];
""1395_aSetStart"" -> ""1395_onlyOwner"";
""1395_aSetEnd"" -> ""1395_onlyOwner"";
""1395_aDeleteMessage"" -> ""1395_onlyOwner"";
""1395_aSetLaunch"" -> ""1395_onlyOwner"";
""1395_fallback"" -> ""1395_submitTokens"";
""1395_UniContract"" -> ""1395_onlyOwner"";
""1395_aPurgeMessages"" -> ""1395_onlyOwner"";
}
"
0x182f25111cdcf90889d2c261b6036ab6cbeaf35c.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 _totalSupply; modifier onlyPayloadSize(uint size) { if(msg.data.length < size + 4) { revert(); },0,"subgraph cluster_304_BasicToken {
label=""BasicToken"";
""304_balanceOf"" [label=""balanceOf""];
""304_totalSupply"" [label=""totalSupply""];
""304_transfer"" [label=""transfer""];
""304_transfer"" -> ""304_onlyPayloadSize"";
}
"
0x31cf75e0839a79c8914569465b6ce9e3d6fc9959.sol,EtherGenCore,"contract EtherGenCore is PlayersCollectionStorage, ERC721 { mapping(address => bool) private privilegedTransferModules; mapping(address => bool) private privilegedMintingModules; mapping(uint64 => address) private cardIdApproveds; uint64 private totalCardSupply; TransferRestrictionVerifier transferRestrictionVerifier = TransferRestrictionVerifier(0xd9861d9a6111bfbb9235a71151f654d0fe7ed954); address public owner = 0x08F4aE96b647B30177cc15B21195960625BA4163; bool public paused = false; function totalSupply() public view returns (uint256 cards) { return totalCardSupply; }",0,"subgraph cluster_2331_EtherGenCore {
label=""EtherGenCore"";
""2331_transferFrom"" [label=""transferFrom""];
""2331_approve"" [label=""approve""];
""2331_assignCardOwner"" [label=""assignCardOwner""];
""2331_removeCardOwner"" [label=""removeCardOwner""];
""2331_isApprovedTransferer"" [label=""isApprovedTransferer""];
""2331_unlockUntradeableCards"" [label=""unlockUntradeableCards""];
""2331_setPaused"" [label=""setPaused""];
""2331_updateOwner"" [label=""updateOwner""];
""2331_balanceOf"" [label=""balanceOf""];
""2331_manageApprovedTransferModule"" [label=""manageApprovedTransferModule""];
""2331_totalSupply"" [label=""totalSupply""];
""2331_tokensOfOwner"" [label=""tokensOfOwner""];
""2331_transfer"" [label=""transfer""];
""2331_ownerOf"" [label=""ownerOf""];
""2331_manageApprovedMintingModule"" [label=""manageApprovedMintingModule""];
""2331_updateTransferRestrictionVerifier"" [label=""updateTransferRestrictionVerifier""];
""2331_mintCard"" [label=""mintCard""];
""2331_transferFrom"" -> ""2331_removeCardOwner"";
""2331_transfer"" -> ""2331_isCardTradeable"";
""2331_transferFrom"" -> ""2331_isCardTradeable"";
""2331_transfer"" -> ""2331_assignCardOwner"";
""2331_transferFrom"" -> ""2331_isApprovedTransferer"";
""2331_transfer"" -> ""2331_removeCardOwner"";
""2331_transferFrom"" -> ""2331_assignCardOwner"";
}
"
0x4bb98d82fd0058e1ce97b71dc5c54b6d98c8c531.sol,InvestorsFeature,"contract InvestorsFeature is Ownable, StandardToken { using SafeMath for uint; address[] public investors; mapping(address => bool) isInvestor; function deposit(address investor, uint) internal { if(isInvestor[investor] == false) { investors.push(investor); isInvestor[investor] = true; }",0,"subgraph cluster_636_InvestorsFeature {
label=""InvestorsFeature"";
""636_deposit"" [label=""deposit""];
""636_sendp"" [label=""sendp""];
""636_sendp"" -> ""636_deposit"";
}
"
0x2021526a4a62a70f52c0340b0f67740a08b94e01.sol,Bcxss,"contract Bcxss { address public owner; string public name; string public symbol; uint public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); bool lock = false; constructor( uint256 initialSupply, string tokenName, string tokenSymbol, uint decimalUnits ) public { owner = msg.sender; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",0,"subgraph cluster_498_Bcxss {
label=""Bcxss"";
""498_approve"" [label=""approve""];
""498_transferFrom"" [label=""transferFrom""];
""498_burn"" [label=""burn""];
""498_constructor"" [label=""constructor""];
""498_transfer"" [label=""transfer""];
""498_mintToken"" [label=""mintToken""];
""498_transferOwnership"" [label=""transferOwnership""];
""498_burnFrom"" [label=""burnFrom""];
""498__transfer"" [label=""_transfer""];
""498_setLock"" [label=""setLock""];
""498_transferBatch"" [label=""transferBatch""];
""498_freezeAccount"" [label=""freezeAccount""];
""498_burn"" -> ""498_onlyOwner"";
""498_transfer"" -> ""498__transfer"";
""498_burnFrom"" -> ""498_onlyOwner"";
""498_setLock"" -> ""498_onlyOwner"";
""498_mintToken"" -> ""498_onlyOwner"";
""498_transferFrom"" -> ""498__transfer"";
""498_freezeAccount"" -> ""498_onlyOwner"";
""498_transferBatch"" -> ""498__transfer"";
""498_transferOwnership"" -> ""498_onlyOwner"";
""498__transfer"" -> ""498_isLock"";
}
"
0xaa57e849341a2899110ba676a49302c069251d19.sol,AuctionStorage,contract AuctionStorage is BaseStorage { struct Auction { address seller; uint128 startingPrice; uint128 endingPrice; uint64 duration; uint startedAt; bool byTeam; },0,"subgraph cluster_633_AuctionStorage {
label=""AuctionStorage"";
""633_addReleaseAuction"" [label=""addReleaseAuction""];
""633_addAuction"" [label=""addAuction""];
""633_getAuctionSeller"" [label=""getAuctionSeller""];
""633_getAuctionEnd"" [label=""getAuctionEnd""];
""633_isSecondary"" [label=""isSecondary""];
""633_getAuctionsCount"" [label=""getAuctionsCount""];
""633_isOnAuction"" [label=""isOnAuction""];
""633_canBeCanceled"" [label=""canBeCanceled""];
""633_getAuction"" [label=""getAuction""];
""633_removeAuction"" [label=""removeAuction""];
""633_initAuction"" [label=""initAuction""];
""633_getAuctionStartedAt"" [label=""getAuctionStartedAt""];
""633__isOnAuction"" [label=""_isOnAuction""];
""633_canBeCanceled"" -> ""633_getAuctionEnd"";
""633_addReleaseAuction"" -> ""633_initAuction"";
""633_initAuction"" -> ""633__isOnAuction"";
""633_removeAuction"" -> ""633_canWrite"";
""633_initAuction"" -> ""633_canWrite"";
""633_getAuction"" -> ""633__isOnAuction"";
""633_isOnAuction"" -> ""633__isOnAuction"";
""633_removeAuction"" -> ""633__isOnAuction"";
""633_addAuction"" -> ""633__isOnAuction"";
""633_addAuction"" -> ""633_canWrite"";
""633_addReleaseAuction"" -> ""633_canWrite"";
}
"
0xcb51a79c82ee07e6868ad5bd66deb2270d1de238.sol,SAMPLE,"contract SAMPLE is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; bool _stopTrade; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; event Burn(address indexed burner, uint256 value); constructor(address admin) Owned(admin) public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000 * 10**uint(decimals); _stopTrade = false; balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",0,"subgraph cluster_696_SAMPLE {
label=""SAMPLE"";
""696_constructor"" [label=""constructor""];
""696_burn"" [label=""burn""];
""696_totalSupply"" [label=""totalSupply""];
""696_balanceOf"" [label=""balanceOf""];
""696_stopTrade"" [label=""stopTrade""];
""696_approve"" [label=""approve""];
""696_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""696_transfer"" [label=""transfer""];
""696_fallback"" [label=""fallback""];
""696_transferFrom"" [label=""transferFrom""];
""696_allowance"" [label=""allowance""];
""696_startTrade"" [label=""startTrade""];
""696_approveAndCall"" [label=""approveAndCall""];
""696_transferAnyERC20Token"" -> ""696_onlyOwner"";
""696_transfer"" -> ""696_isOwner"";
""696_stopTrade"" -> ""696_onlyOwner"";
""696_constructor"" -> ""696_constructor"";
""696_startTrade"" -> ""696_onlyOwner"";
}
"
0xf0cdb03eeb1027bcaea7b7648293339c5bb12c58.sol,GMCToken,"contract GMCToken is CustomToken { string tokenName = ; string tokenSymbol = ; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); function GMCToken() CustomToken(tokenName, tokenSymbol) public {}",0,"subgraph cluster_639_GMCToken {
label=""GMCToken"";
""639_mintToken"" [label=""mintToken""];
""639__transfer"" [label=""_transfer""];
""639_GMCToken"" [label=""GMCToken""];
""639_burnFrom"" [label=""burnFrom""];
""639_burn"" [label=""burn""];
""639_freezeAccount"" [label=""freezeAccount""];
""639_mintToken"" -> ""639_onlyOwner"";
""639_burn"" -> ""639_onlyOwner"";
""639_GMCToken"" -> ""639_CustomToken"";
""639_burnFrom"" -> ""639_onlyOwner"";
""639_freezeAccount"" -> ""639_onlyOwner"";
}
"
0x7421eeb947c7bbabab27aeac6ee2f327e2917cb5.sol,GVE,"contract GVE is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; bool public transferEnabled = true; modifier validDestination( address to ) { require(to != address(0x0)); require(to != address(this) ); _; }",0,"subgraph cluster_558_GVE {
label=""GVE"";
""558_transfer"" [label=""transfer""];
""558_GVE"" [label=""GVE""];
""558_transferFrom"" [label=""transferFrom""];
""558_setTransferEnable"" [label=""setTransferEnable""];
""558_emergencyERC20Drain"" [label=""emergencyERC20Drain""];
""558_transfer"" -> ""558_validDestination"";
""558_setTransferEnable"" -> ""558_onlyOwner"";
""558_transferFrom"" -> ""558_validDestination"";
""558_transferFrom"" -> ""558_transferFrom"";
""558_GVE"" -> ""558_transferOwnership"";
""558_transfer"" -> ""558_transfer"";
""558_emergencyERC20Drain"" -> ""558_onlyOwner"";
}
"
0x1a7208627ffe43a69f13f3c393a41712fa4a7831.sol,ActionMining,"contract ActionMining is Random, AccessService { using SafeMath for uint256; event MiningOrderCreated(uint256 indexed index, address indexed miner, uint64 chestCnt); event MiningResolved(uint256 indexed index, address indexed miner, uint64 chestCnt); struct MiningOrder { address miner; uint64 chestCnt; uint64 tmCreate; uint64 tmResolve; }",0,"subgraph cluster_3640_ActionMining {
label=""ActionMining"";
""3640_setFashionSuitCount"" [label=""setFashionSuitCount""];
""3640_miningOneFree"" [label=""miningOneFree""];
""3640__getFashionParam"" [label=""_getFashionParam""];
""3640_ActionMining"" [label=""ActionMining""];
""3640_setDataMining"" [label=""setDataMining""];
""3640__transferHelper"" [label=""_transferHelper""];
""3640_setPrizePool"" [label=""setPrizePool""];
""3640_setMaxProtoId"" [label=""setMaxProtoId""];
""3640_setRecommendStatus"" [label=""setRecommendStatus""];
""3640_miningOneSelf"" [label=""miningOneSelf""];
""3640_miningOne"" [label=""miningOne""];
""3640_miningResolve"" [label=""miningResolve""];
""3640_miningThree"" [label=""miningThree""];
""3640_fallback"" [label=""fallback""];
""3640__addOrder"" [label=""_addOrder""];
""3640_getOrderCount"" [label=""getOrderCount""];
""3640_miningFive"" [label=""miningFive""];
""3640_miningTen"" [label=""miningTen""];
""3640_miningOneFree"" -> ""3640__rand"";
""3640_miningTen"" -> ""3640__addOrder"";
""3640_miningOneSelf"" -> ""3640__getFashionParam"";
""3640_miningOneFree"" -> ""3640_whenNotPaused"";
""3640_miningFive"" -> ""3640__addOrder"";
""3640_miningTen"" -> ""3640__transferHelper"";
""3640_miningFive"" -> ""3640__transferHelper"";
""3640_miningOneSelf"" -> ""3640__transferHelper"";
""3640_setDataMining"" -> ""3640_onlyAdmin"";
""3640_setRecommendStatus"" -> ""3640_onlyAdmin"";
""3640_miningOneSelf"" -> ""3640__rand"";
""3640_miningFive"" -> ""3640_whenNotPaused"";
""3640_miningThree"" -> ""3640_whenNotPaused"";
""3640_miningResolve"" -> ""3640__randBySeed"";
""3640_miningThree"" -> ""3640__transferHelper"";
""3640_miningOneSelf"" -> ""3640_whenNotPaused"";
""3640_miningOne"" -> ""3640__addOrder"";
""3640_setPrizePool"" -> ""3640_onlyAdmin"";
""3640_miningOne"" -> ""3640__transferHelper"";
""3640_miningResolve"" -> ""3640_onlyService"";
""3640_miningThree"" -> ""3640__addOrder"";
""3640_setFashionSuitCount"" -> ""3640_onlyAdmin"";
""3640_miningOneFree"" -> ""3640__getFashionParam"";
""3640_setMaxProtoId"" -> ""3640_onlyAdmin"";
""3640_miningResolve"" -> ""3640__getFashionParam"";
""3640_miningOne"" -> ""3640_whenNotPaused"";
""3640_miningTen"" -> ""3640_whenNotPaused"";
}
"
0xeeae9c7a726f5c9d52c45494577221054a2805b2.sol,Bingo,"contract Bingo { using SafeMath for uint; MegaballInterface constant public megaballContract = MegaballInterface(address(0x3Fe2B3e8FEB33ed523cE8F786c22Cb6556f8A33F)); DiviesInterface constant private Divies = DiviesInterface(address(0xc7029Ed9EBa97A096e72607f4340c34049C7AF48)); uint256 constant public AGENT_END_BLOCK = 232; uint256 constant public ICO_BLOCK = 200; uint256 constant public ICO_TIME = 3600; event CardCreated(address indexed ticketOwner, uint indexed playerTicket, uint indexed stage); event Payment(address indexed customerAddress, uint indexed stage); event NumberCalled(uint indexed number, uint indexed stage, uint indexed total); event OnWithdraw(address indexed customerAddress, uint256 ethereumWithdrawn); event StageCreated(uint indexed stageNumber); modifier hasBalance() { require(bingoVault[msg.sender] > 0); _; }",0,"subgraph cluster_5586_Bingo {
label=""Bingo"";
""5586_getNumberCallersCount"" [label=""getNumberCallersCount""];
""5586_checkBingo"" [label=""checkBingo""];
""5586_addToPaybacks"" [label=""addToPaybacks""];
""5586_withdraw"" [label=""withdraw""];
""5586_checkH3"" [label=""checkH3""];
""5586_payCaller"" [label=""payCaller""];
""5586_payTicket"" [label=""payTicket""];
""5586_payReferral"" [label=""payReferral""];
""5586_claimBingo"" [label=""claimBingo""];
""5586_checkO"" [label=""checkO""];
""5586_isNumberCalled"" [label=""isNumberCalled""];
""5586_checkH1"" [label=""checkH1""];
""5586_calculateOnePercentTicketCostSplit"" [label=""calculateOnePercentTicketCostSplit""];
""5586_constructor"" [label=""constructor""];
""5586_random"" [label=""random""];
""5586_getCardRowB"" [label=""getCardRowB""];
""5586_referralSpot"" [label=""referralSpot""];
""5586_processPaybackQueue"" [label=""processPaybackQueue""];
""5586_seedMain"" [label=""seedMain""];
""5586_getStageDrawTime"" [label=""getStageDrawTime""];
""5586_getPaybackPlayerCount"" [label=""getPaybackPlayerCount""];
""5586_stageMoveDetail"" [label=""stageMoveDetail""];
""5586_randomArr"" [label=""randomArr""];
""5586_callNumbers"" [label=""callNumbers""];
""5586_checkB"" [label=""checkB""];
""5586_checkD2"" [label=""checkD2""];
""5586_repayment"" [label=""repayment""];
""5586_resetDrawBlocks"" [label=""resetDrawBlocks""];
""5586_checkH5"" [label=""checkH5""];
""5586_getMegaballStatus"" [label=""getMegaballStatus""];
""5586_getCardRowO"" [label=""getCardRowO""];
""5586_callNumber"" [label=""callNumber""];
""5586_fallback"" [label=""fallback""];
""5586_calculatePayoutDenomination"" [label=""calculatePayoutDenomination""];
""5586_getStageDenomination"" [label=""getStageDenomination""];
""5586_sendDivi"" [label=""sendDivi""];
""5586_getEntrant"" [label=""getEntrant""];
""5586_getBingoBalance"" [label=""getBingoBalance""];
""5586_isWithinBounds"" [label=""isWithinBounds""];
""5586_getStageStatus"" [label=""getStageStatus""];
""5586_getCardRowI"" [label=""getCardRowI""];
""5586_roundTimeout"" [label=""roundTimeout""];
""5586_checkG"" [label=""checkG""];
""5586_getStageBlocks"" [label=""getStageBlocks""];
""5586_isCallNumberAvailable"" [label=""isCallNumberAvailable""];
""5586_payProgressive"" [label=""payProgressive""];
""5586_checkD1"" [label=""checkD1""];
""5586_getPlayerCardsThisStage"" [label=""getPlayerCardsThisStage""];
""5586_getCardRowG"" [label=""getCardRowG""];
""5586_makeRow"" [label=""makeRow""];
""5586_makeCard"" [label=""makeCard""];
""5586_checkI"" [label=""checkI""];
""5586_checkN"" [label=""checkN""];
""5586_getCardRowN"" [label=""getCardRowN""];
""5586_initFirstStage"" [label=""initFirstStage""];
""5586_CreateStage"" [label=""CreateStage""];
""5586_checkH2"" [label=""checkH2""];
""5586_getEntrantsPlayerCount"" [label=""getEntrantsPlayerCount""];
""5586_withdrawFromMB"" [label=""withdrawFromMB""];
""5586_getCalledNumbers"" [label=""getCalledNumbers""];
""5586_seedProgressive"" [label=""seedProgressive""];
""5586_nextPaybacks"" [label=""nextPaybacks""];
""5586_sort_array"" [label=""sort_array""];
""5586_createCard"" [label=""createCard""];
""5586_updateMegaballStatus"" [label=""updateMegaballStatus""];
""5586_getContractBalance"" [label=""getContractBalance""];
""5586_seedMegball"" [label=""seedMegball""];
""5586_getMBbalance"" [label=""getMBbalance""];
""5586_checkH4"" [label=""checkH4""];
""5586_CreateStage"" -> ""5586_calculateOnePercentTicketCostSplit"";
""5586_checkBingo"" -> ""5586_checkG"";
""5586_checkBingo"" -> ""5586_checkB"";
""5586_callNumbers"" -> ""5586_updateMegaballStatus"";
""5586_CreateStage"" -> ""5586_processPaybackQueue"";
""5586_checkBingo"" -> ""5586_checkH3"";
""5586_checkD2"" -> ""5586_isNumberCalled"";
""5586_claimBingo"" -> ""5586_repayment"";
""5586_checkB"" -> ""5586_isNumberCalled"";
""5586_initFirstStage"" -> ""5586_CreateStage"";
""5586_payProgressive"" -> ""5586_calculateOnePercentTicketCostSplit"";
""5586_createCard"" -> ""5586_getEntrant"";
""5586_callNumbers"" -> ""5586_isNumberCalled"";
""5586_makeRow"" -> ""5586_randomArr"";
""5586_payProgressive"" -> ""5586_calculatePayoutDenomination"";
""5586_checkH2"" -> ""5586_isNumberCalled"";
""5586_checkBingo"" -> ""5586_checkI"";
""5586_checkBingo"" -> ""5586_checkH2"";
""5586_checkN"" -> ""5586_isNumberCalled"";
""5586_CreateStage"" -> ""5586_calculatePayoutDenomination"";
""5586_createCard"" -> ""5586_payReferral"";
""5586_checkD1"" -> ""5586_isNumberCalled"";
""5586_checkG"" -> ""5586_isNumberCalled"";
""5586_withdraw"" -> ""5586_hasBalance"";
""5586_checkH4"" -> ""5586_isNumberCalled"";
""5586_checkBingo"" -> ""5586_checkH1"";
""5586_checkBingo"" -> ""5586_checkH4"";
""5586_createCard"" -> ""5586_referralSpot"";
""5586_claimBingo"" -> ""5586_processPaybackQueue"";
""5586_roundTimeout"" -> ""5586_CreateStage"";
""5586_claimBingo"" -> ""5586_CreateStage"";
""5586_checkBingo"" -> ""5586_checkN"";
""5586_CreateStage"" -> ""5586_withdrawFromMB"";
""5586_makeCard"" -> ""5586_makeRow"";
""5586_checkBingo"" -> ""5586_checkO"";
""5586_checkBingo"" -> ""5586_checkH5"";
""5586_claimBingo"" -> ""5586_payCaller"";
""5586_callNumbers"" -> ""5586_resetDrawBlocks"";
""5586_checkH1"" -> ""5586_isNumberCalled"";
""5586_checkO"" -> ""5586_isNumberCalled"";
""5586_CreateStage"" -> ""5586_seedMegball"";
""5586_checkBingo"" -> ""5586_checkD1"";
""5586_checkBingo"" -> ""5586_checkD2"";
""5586_callNumbers"" -> ""5586_getMegaballStatus"";
""5586_CreateStage"" -> ""5586_sendDivi"";
""5586_randomArr"" -> ""5586_random"";
""5586_createCard"" -> ""5586_makeCard"";
""5586_claimBingo"" -> ""5586_payProgressive"";
""5586_claimBingo"" -> ""5586_checkBingo"";
""5586_callNumbers"" -> ""5586_callNumber"";
""5586_checkH3"" -> ""5586_isNumberCalled"";
""5586_checkI"" -> ""5586_isNumberCalled"";
""5586_checkH5"" -> ""5586_isNumberCalled"";
""5586_repayment"" -> ""5586_addToPaybacks"";
""5586_claimBingo"" -> ""5586_payTicket"";
""5586_makeRow"" -> ""5586_sort_array"";
""5586_callNumber"" -> ""5586_resetDrawBlocks"";
}
"
0x3329a13218b9b311a7ee468dfe100f72c08ee2da.sol,PRECOE,"contract PRECOE { string public name = ; uint8 public decimals = 18; string public symbol = ; address public owner; address public devFeesAddr = 0x36Bdc3B60dC5491fbc7d74a05709E94d5b554321; address tierAdmin; uint256 public totalSupply = 71433000000000000000000; uint256 public mineableTokens = totalSupply; uint public tierLevel = 1; uint256 public fiatPerEth = 3.85E25; uint256 public circulatingSupply = 0; uint maxTier = 132; uint256 public devFees = 0; uint256 fees = 10000; bool public receiveEth = false; bool payFees = true; bool public canExchange = true; bool addTiers = true; bool public initialTiers = false; mapping (address => uint256) public balances; mapping (address => bool) public exchangePartners; mapping(uint => uint256) public scheduleTokens; mapping(uint => uint256) public scheduleRates; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint _value); event TokensExchanged(address indexed _owningWallet, address indexed _with, uint256 _value); function PRECOE() { owner = msg.sender; balances[owner] = add(balances[owner],4500000000000000000000); Transfer(this, owner, 4500000000000000000000); circulatingSupply = add(circulatingSupply, 4500000000000000000000); mineableTokens = sub(mineableTokens,4500000000000000000000); }",0,"subgraph cluster_1602_PRECOE {
label=""PRECOE"";
""1602_closeTierAddition"" [label=""closeTierAddition""];
""1602_handleTokensFromOtherContracts"" [label=""handleTokensFromOtherContracts""];
""1602_populateTierTokens"" [label=""populateTierTokens""];
""1602_fallback"" [label=""fallback""];
""1602_balanceOf"" [label=""balanceOf""];
""1602_balanceInSpecificTier"" [label=""balanceInSpecificTier""];
""1602_PRECOE"" [label=""PRECOE""];
""1602_addTierRateAndTokens"" [label=""addTierRateAndTokens""];
""1602_sub"" [label=""sub""];
""1602_setFiatPerEthRate"" [label=""setFiatPerEthRate""];
""1602_removeExchangePartnerTargetAddress"" [label=""removeExchangePartnerTargetAddress""];
""1602_updateFeeAmount"" [label=""updateFeeAmount""];
""1602_withdrawDevFees"" [label=""withdrawDevFees""];
""1602_changeDevFees"" [label=""changeDevFees""];
""1602_add"" [label=""add""];
""1602_requestTokensFromOtherContract"" [label=""requestTokensFromOtherContract""];
""1602_safeWithdrawal"" [label=""safeWithdrawal""];
""1602_addExchangePartnerTargetAddress"" [label=""addExchangePartnerTargetAddress""];
""1602_balanceInTier"" [label=""balanceInTier""];
""1602_payFeesToggle"" [label=""payFeesToggle""];
""1602_transfer"" [label=""transfer""];
""1602_canContractExchange"" [label=""canContractExchange""];
""1602_toggleTokenExchange"" [label=""toggleTokenExchange""];
""1602_toggleReceiveEth"" [label=""toggleReceiveEth""];
""1602_allocateTokens"" [label=""allocateTokens""];
""1602_populateTierRates"" [label=""populateTierRates""];
""1602_mul"" [label=""mul""];
""1602_convertEthToCents"" [label=""convertEthToCents""];
""1602_changeOwner"" [label=""changeOwner""];
""1602_exchange"" [label=""exchange""];
""1602_rateOfSpecificTier"" [label=""rateOfSpecificTier""];
""1602_div"" [label=""div""];
""1602_changeTierAdmin"" [label=""changeTierAdmin""];
""1602_allocateTokens"" -> ""1602_div"";
""1602_exchange"" -> ""1602_sub"";
""1602_PRECOE"" -> ""1602_sub"";
""1602_transfer"" -> ""1602_exchange"";
""1602_allocateTokens"" -> ""1602_mul"";
""1602_allocateTokens"" -> ""1602_allocateTokens"";
""1602_transfer"" -> ""1602_sub"";
""1602_exchange"" -> ""1602_balanceOf"";
""1602_transfer"" -> ""1602_add"";
""1602_convertEthToCents"" -> ""1602_mul"";
""1602_PRECOE"" -> ""1602_add"";
""1602_fallback"" -> ""1602_convertEthToCents"";
""1602_safeWithdrawal"" -> ""1602_withdrawDevFees"";
""1602_allocateTokens"" -> ""1602_add"";
""1602_allocateTokens"" -> ""1602_sub"";
""1602_fallback"" -> ""1602_add"";
""1602_fallback"" -> ""1602_allocateTokens"";
""1602_exchange"" -> ""1602_requestTokensFromOtherContract"";
}
"
0x330e24d4aa0a60acac8f9fe6d674d3cf1e8042c6.sol,LocalEthereumEscrows,contract LocalEthereumEscrows { address public arbitrator; address public owner; address public relayer; uint32 public requestCancellationMinimumTime; uint256 public feesAvailableForWithdraw; uint8 constant ACTION_SELLER_CANNOT_CANCEL = 0x01; uint8 constant ACTION_BUYER_CANCEL = 0x02; uint8 constant ACTION_SELLER_CANCEL = 0x03; uint8 constant ACTION_SELLER_REQUEST_CANCEL = 0x04; uint8 constant ACTION_RELEASE = 0x05; uint8 constant ACTION_DISPUTE = 0x06; event Created(bytes32 _tradeHash); event SellerCancelDisabled(bytes32 _tradeHash); event SellerRequestedCancel(bytes32 _tradeHash); event CancelledBySeller(bytes32 _tradeHash); event CancelledByBuyer(bytes32 _tradeHash); event Released(bytes32 _tradeHash); event DisputeResolved(bytes32 _tradeHash); struct Escrow { bool exists; uint32 sellerCanCancelAfter; uint128 totalGasFeesSpentByRelayer; },0,"subgraph cluster_1606_LocalEthereumEscrows {
label=""LocalEthereumEscrows"";
""1606_transferMinusFees"" [label=""transferMinusFees""];
""1606_doBuyerCancel"" [label=""doBuyerCancel""];
""1606_relay"" [label=""relay""];
""1606_getRelayedSender"" [label=""getRelayedSender""];
""1606_doDisableSellerCancel"" [label=""doDisableSellerCancel""];
""1606_getEscrowAndHash"" [label=""getEscrowAndHash""];
""1606_createEscrow"" [label=""createEscrow""];
""1606_batchRelay"" [label=""batchRelay""];
""1606_setArbitrator"" [label=""setArbitrator""];
""1606_resolveDispute"" [label=""resolveDispute""];
""1606_relaySellerCannotCancel"" [label=""relaySellerCannotCancel""];
""1606_setRelayer"" [label=""setRelayer""];
""1606_buyerCancel"" [label=""buyerCancel""];
""1606_relaySellerRequestCancel"" [label=""relaySellerRequestCancel""];
""1606_relayRelease"" [label=""relayRelease""];
""1606_LocalEthereumEscrows"" [label=""LocalEthereumEscrows""];
""1606_relayBuyerCancel"" [label=""relayBuyerCancel""];
""1606_setOwner"" [label=""setOwner""];
""1606_doSellerRequestCancel"" [label=""doSellerRequestCancel""];
""1606_withdrawFees"" [label=""withdrawFees""];
""1606_setRequestCancellationMinimumTime"" [label=""setRequestCancellationMinimumTime""];
""1606_approveToken"" [label=""approveToken""];
""1606_transferToken"" [label=""transferToken""];
""1606_sellerCancel"" [label=""sellerCancel""];
""1606_transferTokenFrom"" [label=""transferTokenFrom""];
""1606_increaseGasSpent"" [label=""increaseGasSpent""];
""1606_relaySellerCancel"" [label=""relaySellerCancel""];
""1606_sellerRequestCancel"" [label=""sellerRequestCancel""];
""1606_doRelease"" [label=""doRelease""];
""1606_disableSellerCancel"" [label=""disableSellerCancel""];
""1606_release"" [label=""release""];
""1606_doSellerCancel"" [label=""doSellerCancel""];
""1606_setRelayer"" -> ""1606_onlyOwner"";
""1606_relaySellerRequestCancel"" -> ""1606_relay"";
""1606_doSellerRequestCancel"" -> ""1606_getEscrowAndHash"";
""1606_approveToken"" -> ""1606_onlyOwner"";
""1606_doDisableSellerCancel"" -> ""1606_increaseGasSpent"";
""1606_relaySellerCannotCancel"" -> ""1606_relay"";
""1606_relaySellerCancel"" -> ""1606_relay"";
""1606_withdrawFees"" -> ""1606_onlyOwner"";
""1606_setOwner"" -> ""1606_onlyOwner"";
""1606_relayRelease"" -> ""1606_relay"";
""1606_transferTokenFrom"" -> ""1606_onlyOwner"";
""1606_transferToken"" -> ""1606_onlyOwner"";
""1606_relay"" -> ""1606_doRelease"";
""1606_relay"" -> ""1606_doSellerCancel"";
""1606_setArbitrator"" -> ""1606_onlyOwner"";
""1606_relay"" -> ""1606_doBuyerCancel"";
""1606_relay"" -> ""1606_doDisableSellerCancel"";
""1606_doSellerCancel"" -> ""1606_getEscrowAndHash"";
""1606_doSellerCancel"" -> ""1606_transferMinusFees"";
""1606_sellerRequestCancel"" -> ""1606_doSellerRequestCancel"";
""1606_resolveDispute"" -> ""1606_onlyArbitrator"";
""1606_doBuyerCancel"" -> ""1606_getEscrowAndHash"";
""1606_doRelease"" -> ""1606_getEscrowAndHash"";
""1606_disableSellerCancel"" -> ""1606_doDisableSellerCancel"";
""1606_release"" -> ""1606_doRelease"";
""1606_setRequestCancellationMinimumTime"" -> ""1606_onlyOwner"";
""1606_doSellerRequestCancel"" -> ""1606_increaseGasSpent"";
""1606_doDisableSellerCancel"" -> ""1606_getEscrowAndHash"";
""1606_buyerCancel"" -> ""1606_doBuyerCancel"";
""1606_relay"" -> ""1606_getRelayedSender"";
""1606_relayBuyerCancel"" -> ""1606_relay"";
""1606_doRelease"" -> ""1606_transferMinusFees"";
""1606_doBuyerCancel"" -> ""1606_transferMinusFees"";
""1606_resolveDispute"" -> ""1606_getEscrowAndHash"";
""1606_sellerCancel"" -> ""1606_doSellerCancel"";
""1606_batchRelay"" -> ""1606_relay"";
""1606_relay"" -> ""1606_doSellerRequestCancel"";
}
"
0xf028adee51533b1b47beaa890feb54a457f51e89.sol,BMToken,"contract BMToken { string public name = ; string public symbol = ; uint256 public decimals = 18; uint256 _supply = 0; mapping (address => uint256) _balances; mapping (address => mapping (address => uint256)) _approvals; event Transfer( address indexed from, address indexed to, uint value); event Approval( address indexed owner, address indexed spender, uint value); address ico_contract; address public owner; function BMToken(){ ico_contract = address(0x0); owner = msg.sender; }",0,"subgraph cluster_459_BMToken {
label=""BMToken"";
""459_mintTokens"" [label=""mintTokens""];
""459_transferFrom"" [label=""transferFrom""];
""459_BMToken"" [label=""BMToken""];
""459_transfer"" [label=""transfer""];
""459_sub"" [label=""sub""];
""459_add"" [label=""add""];
""459_changeOwner"" [label=""changeOwner""];
""459_allowance"" [label=""allowance""];
""459_balanceOf"" [label=""balanceOf""];
""459_totalSupply"" [label=""totalSupply""];
""459_setICOContract"" [label=""setICOContract""];
""459_approve"" [label=""approve""];
""459_transfer"" -> ""459_add"";
""459_transfer"" -> ""459_sub"";
""459_transferFrom"" -> ""459_add"";
""459_setICOContract"" -> ""459_isOwner"";
""459_transferFrom"" -> ""459_sub"";
""459_mintTokens"" -> ""459_add"";
""459_changeOwner"" -> ""459_isOwner"";
}
"
0xd52d09ce4c0118b227bd9496d973ed0bf98f8d5a.sol,Synthetix,"contract Synthetix is ExternStateToken { Synth[] public availableSynths; mapping(bytes4 => Synth) public synths; IFeePool public feePool; ISynthetixEscrow public escrow; ISynthetixEscrow public rewardEscrow; ExchangeRates public exchangeRates; SynthetixState public synthetixState; SupplySchedule public supplySchedule; bool private protectionCircuit = false; string constant TOKEN_NAME = ; string constant TOKEN_SYMBOL = ; uint8 constant DECIMALS = 18; bool public exchangeEnabled = true; constructor(address _proxy, TokenState _tokenState, SynthetixState _synthetixState, address _owner, ExchangeRates _exchangeRates, IFeePool _feePool, SupplySchedule _supplySchedule, ISynthetixEscrow _rewardEscrow, ISynthetixEscrow _escrow, uint _totalSupply ) ExternStateToken(_proxy, _tokenState, TOKEN_NAME, TOKEN_SYMBOL, _totalSupply, DECIMALS, _owner) public { synthetixState = _synthetixState; exchangeRates = _exchangeRates; feePool = _feePool; supplySchedule = _supplySchedule; rewardEscrow = _rewardEscrow; escrow = _escrow; }",0,"subgraph cluster_3497_SynthetixState {
label=""SynthetixState"";
""3497_setIssuanceRatio"" [label=""setIssuanceRatio""];
""3497_incrementTotalIssuerCount"" [label=""incrementTotalIssuerCount""];
""3497_lastDebtLedgerEntry"" [label=""lastDebtLedgerEntry""];
""3497_preferredCurrency"" [label=""preferredCurrency""];
""3497_appendDebtLedgerValue"" [label=""appendDebtLedgerValue""];
""3497_setPreferredCurrency"" [label=""setPreferredCurrency""];
""3497__addToDebtRegister"" [label=""_addToDebtRegister""];
""3497_issuanceData"" [label=""issuanceData""];
""3497_hasIssued"" [label=""hasIssued""];
""3497_setCurrentIssuanceData"" [label=""setCurrentIssuanceData""];
""3497_decrementTotalIssuerCount"" [label=""decrementTotalIssuerCount""];
""3497_issuanceRatio"" [label=""issuanceRatio""];
""3497_debtLedgerLength"" [label=""debtLedgerLength""];
""3497_constructor"" [label=""constructor""];
""3497_clearIssuanceData"" [label=""clearIssuanceData""];
""3497_importIssuerData"" [label=""importIssuerData""];
""3497_debtLedger"" [label=""debtLedger""];
""3497_importIssuerData"" -> ""3497__addToDebtRegister"";
""3497_importIssuerData"" -> ""3497_onlyOwner"";
""3497_appendDebtLedgerValue"" -> ""3497_onlyAssociatedContract"";
""3497_constructor"" -> ""3497_constructor"";
""3497_setCurrentIssuanceData"" -> ""3497_onlyAssociatedContract"";
""3497_incrementTotalIssuerCount"" -> ""3497_onlyAssociatedContract"";
""3497_setPreferredCurrency"" -> ""3497_onlyAssociatedContract"";
""3497_decrementTotalIssuerCount"" -> ""3497_onlyAssociatedContract"";
""3497_clearIssuanceData"" -> ""3497_onlyAssociatedContract"";
""3497_setIssuanceRatio"" -> ""3497_onlyOwner"";
""3497_importIssuerData"" -> ""3497_onlyDuringSetup"";
}
"
0xed462f6d5a89cc5cab505c0549c2a4e7bbd2522b.sol,EVOLUTION2,contract EVOLUTION2 { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1289_EVOLUTION2 {
label=""EVOLUTION2"";
""1289_activateWhitelist"" [label=""activateWhitelist""];
""1289_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1289_setSymbol"" [label=""setSymbol""];
""1289_transfer"" [label=""transfer""];
""1289_buyPrice"" [label=""buyPrice""];
""1289_redistribution"" [label=""redistribution""];
""1289_buy"" [label=""buy""];
""1289_constructor"" [label=""constructor""];
""1289_sell"" [label=""sell""];
""1289_setStakingRequirement"" [label=""setStakingRequirement""];
""1289_reinvest"" [label=""reinvest""];
""1289_disableWhitelist"" [label=""disableWhitelist""];
""1289_sqrt"" [label=""sqrt""];
""1289_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1289_fallback"" [label=""fallback""];
""1289_purchaseTokens"" [label=""purchaseTokens""];
""1289_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1289_myDividends"" [label=""myDividends""];
""1289_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1289_dividendsOf"" [label=""dividendsOf""];
""1289_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1289_withdraw"" [label=""withdraw""];
""1289_balanceOf"" [label=""balanceOf""];
""1289_setName"" [label=""setName""];
""1289_exit"" [label=""exit""];
""1289_sellPrice"" [label=""sellPrice""];
""1289_myTokens"" [label=""myTokens""];
""1289_totalSupply"" [label=""totalSupply""];
""1289_setAdministrator"" [label=""setAdministrator""];
""1289_transfer"" -> ""1289_withdraw"";
""1289_buyPrice"" -> ""1289_tokensToEthereum_"";
""1289_reinvest"" -> ""1289_purchaseTokens"";
""1289_reinvest"" -> ""1289_myDividends"";
""1289_myDividends"" -> ""1289_dividendsOf"";
""1289_sell"" -> ""1289_onlyBagholders"";
""1289_sell"" -> ""1289_tokensToEthereum_"";
""1289_setName"" -> ""1289_onlyAdministrator"";
""1289_ethereumToTokens_"" -> ""1289_sqrt"";
""1289_reinvest"" -> ""1289_onlyStronghands"";
""1289_setStakingRequirement"" -> ""1289_onlyAdministrator"";
""1289_calculateTokensReceived"" -> ""1289_ethereumToTokens_"";
""1289_purchaseTokens"" -> ""1289_ethereumToTokens_"";
""1289_sellPrice"" -> ""1289_tokensToEthereum_"";
""1289_fallback"" -> ""1289_purchaseTokens"";
""1289_exit"" -> ""1289_withdraw"";
""1289_buy"" -> ""1289_purchaseTokens"";
""1289_calculateEthereumReceived"" -> ""1289_tokensToEthereum_"";
""1289_transfer"" -> ""1289_myDividends"";
""1289_setAdministrator"" -> ""1289_onlyAdministrator"";
""1289_withdraw"" -> ""1289_onlyStronghands"";
""1289_transfer"" -> ""1289_onlyBagholders"";
""1289_withdraw"" -> ""1289_myDividends"";
""1289_myTokens"" -> ""1289_balanceOf"";
""1289_setSymbol"" -> ""1289_onlyAdministrator"";
""1289_exit"" -> ""1289_sell"";
}
"
0x2747fe8dc21d5efcc0787101dc986df028bd42b9.sol,HyperETH,contract HyperETH { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1888_HyperETH {
label=""HyperETH"";
""1888_disableInitialStage"" [label=""disableInitialStage""];
""1888_myDividends"" [label=""myDividends""];
""1888_isContract"" [label=""isContract""];
""1888_myLastRef"" [label=""myLastRef""];
""1888_buyPrice"" [label=""buyPrice""];
""1888_exit"" [label=""exit""];
""1888_setSymbol"" [label=""setSymbol""];
""1888_fallback"" [label=""fallback""];
""1888_setStakingRequirement"" [label=""setStakingRequirement""];
""1888_sell"" [label=""sell""];
""1888_transfer"" [label=""transfer""];
""1888_handleLastRef"" [label=""handleLastRef""];
""1888_payFund"" [label=""payFund""];
""1888_transferAndCall"" [label=""transferAndCall""];
""1888_setName"" [label=""setName""];
""1888_setCanAcceptTokens"" [label=""setCanAcceptTokens""];
""1888_etherToSendFund"" [label=""etherToSendFund""];
""1888_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1888_setAdministrator"" [label=""setAdministrator""];
""1888_purchaseInternal"" [label=""purchaseInternal""];
""1888_balanceOf"" [label=""balanceOf""];
""1888_sqrt"" [label=""sqrt""];
""1888_dividendsOf"" [label=""dividendsOf""];
""1888_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1888_withdraw"" [label=""withdraw""];
""1888_totalSupply"" [label=""totalSupply""];
""1888_myTokens"" [label=""myTokens""];
""1888_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1888_sellPrice"" [label=""sellPrice""];
""1888_buy"" [label=""buy""];
""1888_reinvest"" [label=""reinvest""];
""1888_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1888_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1888_purchaseTokens"" [label=""purchaseTokens""];
""1888_constructor"" [label=""constructor""];
""1888_fallback"" -> ""1888_purchaseInternal"";
""1888_withdraw"" -> ""1888_onlyStronghands"";
""1888_disableInitialStage"" -> ""1888_onlyAdministrator"";
""1888_sell"" -> ""1888_ambassAntiPumpAndDump"";
""1888_sell"" -> ""1888_tokensToEthereum_"";
""1888_calculateEthereumReceived"" -> ""1888_tokensToEthereum_"";
""1888_purchaseTokens"" -> ""1888_antiEarlyWhale"";
""1888_transferAndCall"" -> ""1888_transfer"";
""1888_buy"" -> ""1888_handleLastRef"";
""1888_reinvest"" -> ""1888_myDividends"";
""1888_sell"" -> ""1888_onlyBagholders"";
""1888_transfer"" -> ""1888_withdraw"";
""1888_calculateTokensReceived"" -> ""1888_ethereumToTokens_"";
""1888_buyPrice"" -> ""1888_tokensToEthereum_"";
""1888_fallback"" -> ""1888_handleLastRef"";
""1888_purchaseInternal"" -> ""1888_purchaseTokens"";
""1888_exit"" -> ""1888_withdraw"";
""1888_buy"" -> ""1888_purchaseInternal"";
""1888_purchaseTokens"" -> ""1888_ethereumToTokens_"";
""1888_myDividends"" -> ""1888_dividendsOf"";
""1888_setAdministrator"" -> ""1888_onlyAdministrator"";
""1888_transfer"" -> ""1888_ambassOnlyToAmbass"";
""1888_ethereumToTokens_"" -> ""1888_sqrt"";
""1888_reinvest"" -> ""1888_purchaseInternal"";
""1888_setName"" -> ""1888_onlyAdministrator"";
""1888_reinvest"" -> ""1888_handleLastRef"";
""1888_withdraw"" -> ""1888_myDividends"";
""1888_setStakingRequirement"" -> ""1888_onlyAdministrator"";
""1888_purchaseInternal"" -> ""1888_totalEthereumBalance"";
""1888_myTokens"" -> ""1888_balanceOf"";
""1888_sellPrice"" -> ""1888_tokensToEthereum_"";
""1888_exit"" -> ""1888_sell"";
""1888_reinvest"" -> ""1888_onlyStronghands"";
""1888_setCanAcceptTokens"" -> ""1888_onlyAdministrator"";
""1888_transfer"" -> ""1888_onlyBagholders"";
""1888_transfer"" -> ""1888_myDividends"";
""1888_setSymbol"" -> ""1888_onlyAdministrator"";
""1888_transferAndCall"" -> ""1888_isContract"";
}
"
0x4c3da77d8bce020d4128995d7f92c5bd0919fcc3.sol,Aeron,"contract Aeron { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply; uint256 public datboiSupply = 20000000; uint256 public buyPrice = 1000; address public creator; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event FundTransfer(address backer, uint amount, bool isContribution); function Aeron() public { totalSupply = datboiSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; creator = msg.sender; }",0,"subgraph cluster_207_Aeron {
label=""Aeron"";
""207__transfer"" [label=""_transfer""];
""207_transfer"" [label=""transfer""];
""207_fallback"" [label=""fallback""];
""207_Aeron"" [label=""Aeron""];
""207_transfer"" -> ""207__transfer"";
}
"
0x03b155af3f4459193a276395dd76e357bb472da1.sol,SwaceToken,"contract SwaceToken is DetailedERC20, PausableToken, CappedToken { event ChangeVestingAgent(address indexed oldVestingAgent, address indexed newVestingAgent); uint256 private constant TOKEN_UNIT = 10 ** uint256(18); uint256 public constant TOTAL_SUPPLY = 2.7e9 * TOKEN_UNIT; uint256 public constant VESTING_SUPPLY = 5.67e8 * TOKEN_UNIT; uint256 public constant IEO_SUPPLY = 1.35e8 * TOKEN_UNIT; address public ieoWallet; address public vestingAgent; modifier onlyVestingAgent() { require(msg.sender == vestingAgent, ); _; }",0,"subgraph cluster_1085_SwaceToken {
label=""SwaceToken"";
""1085_changeVestingAgent"" [label=""changeVestingAgent""];
""1085_constructor"" [label=""constructor""];
""1085_approve"" [label=""approve""];
""1085_constructor"" -> ""1085_mint"";
""1085_constructor"" -> ""1085_changeVestingAgent"";
""1085_constructor"" -> ""1085_finishMinting"";
""1085_constructor"" -> ""1085_constructor"";
""1085_changeVestingAgent"" -> ""1085_onlyOwner"";
""1085_approve"" -> ""1085_approve"";
}
"
0x5c743a35e903f6c584514ec617acee0611cf44f3.sol,ExyToken,"contract ExyToken is ERC223MintableToken, SignatoryPausable { using SafeMath for uint256; VestingAllocation private partnerTokensAllocation; VestingAllocation private companyTokensAllocation; BountyTokenAllocation private bountyTokensAllocation; uint256 private constant ICO_TOKENS = 14503506112248500000000000; address private constant ICO_TOKENS_ADDRESS = 0x97c967524d1eacAEb375d4269bE4171581a289C7; uint256 private constant SEED_TOKENS = 11700000000000000000000000; address private constant SEED_TOKENS_ADDRESS = 0x7C32c7649aA1335271aF00cd4280f87166474778; uint256 private constant COMPANY_TOKENS_PER_PERIOD = 727875169784680000000000; uint256 private constant COMPANY_PERIODS = 36; uint256 private constant MINUTES_IN_COMPANY_PERIOD = 60 * 24 * 365 / 12; uint256 private constant PARTNER_TOKENS_PER_PERIOD = 23821369192953200000000000; uint256 private constant PARTNER_PERIODS = 1; uint256 private constant MINUTES_IN_PARTNER_PERIOD = MINUTES_IN_COMPANY_PERIOD * 18; uint256 private constant BOUNTY_TOKENS = 2382136919295320000000000; uint256 private constant MARKETING_COST_TOKENS = 794045639765106000000000; address private constant MARKETING_COST_ADDRESS = 0xF133ef3BE68128c9Af16F5aF8F8707f7A7A51452; uint256 public INIT_DATE; string public constant name = ; bytes32 public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant totalSupply = ( COMPANY_TOKENS_PER_PERIOD * COMPANY_PERIODS + PARTNER_TOKENS_PER_PERIOD * PARTNER_PERIODS + BOUNTY_TOKENS + MARKETING_COST_TOKENS + ICO_TOKENS + SEED_TOKENS); function ExyToken(address signatory0, address signatory1, address signatory2) SignatoryPausable(signatory0, signatory1, signatory2) public { INIT_DATE = block.timestamp; companyTokensAllocation = new VestingAllocation( COMPANY_TOKENS_PER_PERIOD, COMPANY_PERIODS, MINUTES_IN_COMPANY_PERIOD, INIT_DATE); partnerTokensAllocation = new VestingAllocation( PARTNER_TOKENS_PER_PERIOD, PARTNER_PERIODS, MINUTES_IN_PARTNER_PERIOD, INIT_DATE); bountyTokensAllocation = new BountyTokenAllocation( BOUNTY_TOKENS ); mint(MARKETING_COST_ADDRESS, MARKETING_COST_TOKENS); mint(ICO_TOKENS_ADDRESS, ICO_TOKENS); mint(SEED_TOKENS_ADDRESS, SEED_TOKENS); }",0,"subgraph cluster_1457_ExyToken {
label=""ExyToken"";
""1457_approveCompanyAllocation"" [label=""approveCompanyAllocation""];
""1457_approveBountyTransfer"" [label=""approveBountyTransfer""];
""1457_proposeBountyTransfer"" [label=""proposeBountyTransfer""];
""1457_rejectPartnerAllocation"" [label=""rejectPartnerAllocation""];
""1457_rejectBountyTransfer"" [label=""rejectBountyTransfer""];
""1457_getPartnerAllocation"" [label=""getPartnerAllocation""];
""1457_approvePartnerAllocation"" [label=""approvePartnerAllocation""];
""1457_mint"" [label=""mint""];
""1457_claimTokens"" [label=""claimTokens""];
""1457_proposeCompanyAllocation"" [label=""proposeCompanyAllocation""];
""1457_getCompanyAllocation"" [label=""getCompanyAllocation""];
""1457_getBountyTransfers"" [label=""getBountyTransfers""];
""1457_proposePartnerAllocation"" [label=""proposePartnerAllocation""];
""1457_transfer"" [label=""transfer""];
""1457_getRemainingPartnerTokensAllocation"" [label=""getRemainingPartnerTokensAllocation""];
""1457_getRemainingBountyTokens"" [label=""getRemainingBountyTokens""];
""1457_getRemainingCompanyTokensAllocation"" [label=""getRemainingCompanyTokensAllocation""];
""1457_rejectCompanyAllocation"" [label=""rejectCompanyAllocation""];
""1457_erc20TokenTransfer"" [label=""erc20TokenTransfer""];
""1457_ExyToken"" [label=""ExyToken""];
""1457_approveBountyTransfer"" -> ""1457_onlySignatory"";
""1457_proposeBountyTransfer"" -> ""1457_onlySignatory"";
""1457_mint"" -> ""1457_whenPaused"";
""1457_approveBountyTransfer"" -> ""1457_mint"";
""1457_proposePartnerAllocation"" -> ""1457_onlyPayloadSize"";
""1457_rejectPartnerAllocation"" -> ""1457_onlySignatory"";
""1457_mint"" -> ""1457_mint"";
""1457_rejectBountyTransfer"" -> ""1457_onlySignatory"";
""1457_proposeCompanyAllocation"" -> ""1457_onlySignatory"";
""1457_erc20TokenTransfer"" -> ""1457_onlySignatory"";
""1457_rejectCompanyAllocation"" -> ""1457_onlySignatory"";
""1457_approveCompanyAllocation"" -> ""1457_onlySignatory"";
""1457_ExyToken"" -> ""1457_mint"";
""1457_ExyToken"" -> ""1457_SignatoryPausable"";
""1457_transfer"" -> ""1457_whenPaused"";
""1457_transfer"" -> ""1457_transfer"";
""1457_approvePartnerAllocation"" -> ""1457_onlySignatory"";
""1457_proposeBountyTransfer"" -> ""1457_onlyPayloadSize"";
""1457_claimTokens"" -> ""1457_mint"";
""1457_proposePartnerAllocation"" -> ""1457_onlySignatory"";
""1457_proposeCompanyAllocation"" -> ""1457_onlyPayloadSize"";
}
"
0xd8fce619d059c5506301f6e6271aff1202aebd20.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private admin = msg.sender; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },0,"subgraph cluster_20_PlayerBookReceiverInterface {
label=""PlayerBookReceiverInterface"";
""20_receivePlayerNameList"" [label=""receivePlayerNameList""];
""20_receivePlayerInfo"" [label=""receivePlayerInfo""];
}
"
0x211f01e59b425253c0a0e9a7bf612605b42ce82c.sol,Pinakion,contract Pinakion is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },0,"subgraph cluster_1079_Pinakion {
label=""Pinakion"";
""1079_totalSupplyAt"" [label=""totalSupplyAt""];
""1079_claimTokens"" [label=""claimTokens""];
""1079_doTransfer"" [label=""doTransfer""];
""1079_approve"" [label=""approve""];
""1079_Pinakion"" [label=""Pinakion""];
""1079_getValueAt"" [label=""getValueAt""];
""1079_balanceOfAt"" [label=""balanceOfAt""];
""1079_createCloneToken"" [label=""createCloneToken""];
""1079_min"" [label=""min""];
""1079_totalSupply"" [label=""totalSupply""];
""1079_updateValueAtNow"" [label=""updateValueAtNow""];
""1079_destroyTokens"" [label=""destroyTokens""];
""1079_isContract"" [label=""isContract""];
""1079_transfer"" [label=""transfer""];
""1079_approveAndCall"" [label=""approveAndCall""];
""1079_allowance"" [label=""allowance""];
""1079_enableTransfers"" [label=""enableTransfers""];
""1079_fallback"" [label=""fallback""];
""1079_balanceOf"" [label=""balanceOf""];
""1079_transferFrom"" [label=""transferFrom""];
""1079_generateTokens"" [label=""generateTokens""];
""1079_totalSupplyAt"" -> ""1079_getValueAt"";
""1079_totalSupplyAt"" -> ""1079_min"";
""1079_totalSupply"" -> ""1079_totalSupplyAt"";
""1079_generateTokens"" -> ""1079_totalSupply"";
""1079_balanceOf"" -> ""1079_balanceOfAt"";
""1079_enableTransfers"" -> ""1079_onlyController"";
""1079_transfer"" -> ""1079_doTransfer"";
""1079_doTransfer"" -> ""1079_updateValueAtNow"";
""1079_destroyTokens"" -> ""1079_onlyController"";
""1079_balanceOfAt"" -> ""1079_min"";
""1079_generateTokens"" -> ""1079_onlyController"";
""1079_doTransfer"" -> ""1079_isContract"";
""1079_transferFrom"" -> ""1079_doTransfer"";
""1079_balanceOfAt"" -> ""1079_getValueAt"";
""1079_approve"" -> ""1079_isContract"";
""1079_destroyTokens"" -> ""1079_totalSupply"";
""1079_approveAndCall"" -> ""1079_approve"";
""1079_doTransfer"" -> ""1079_balanceOfAt"";
""1079_fallback"" -> ""1079_isContract"";
""1079_destroyTokens"" -> ""1079_balanceOf"";
""1079_destroyTokens"" -> ""1079_updateValueAtNow"";
""1079_generateTokens"" -> ""1079_balanceOf"";
""1079_generateTokens"" -> ""1079_updateValueAtNow"";
""1079_claimTokens"" -> ""1079_onlyController"";
}
"
0xf1171e1e8df34ab97832342c7cbf04d9121a1ac3.sol,CSportsContest,"contract CSportsContest is CSportsAuth, CSportsContestBase { enum ContestStatus { Invalid, Active, Scoring, Paying, Paid, Canceled }",0,"subgraph cluster_3016_CSportsContest {
label=""CSportsContest"";
""3016__computeCut"" [label=""_computeCut""];
""3016_cancelContest"" [label=""cancelContest""];
""3016_setTeamContractAddress"" [label=""setTeamContractAddress""];
""3016_getContest"" [label=""getContest""];
""3016_getContestTeamCount"" [label=""getContestTeamCount""];
""3016_numWinnersToPay"" [label=""numWinnersToPay""];
""3016_unpause"" [label=""unpause""];
""3016_getIndexForTeamId"" [label=""getIndexForTeamId""];
""3016_payWinners"" [label=""payWinners""];
""3016_prepareToScore"" [label=""prepareToScore""];
""3016_releaseTeams"" [label=""releaseTeams""];
""3016_pause"" [label=""pause""];
""3016_scoreTeams"" [label=""scoreTeams""];
""3016_authorizedFundsAvailable"" [label=""authorizedFundsAvailable""];
""3016_exitContest"" [label=""exitContest""];
""3016_createContest"" [label=""createContest""];
""3016_closeContest"" [label=""closeContest""];
""3016_prepareToPayWinners"" [label=""prepareToPayWinners""];
""3016_getContestTeam"" [label=""getContestTeam""];
""3016_constructor"" [label=""constructor""];
""3016__authorizePayment"" [label=""_authorizePayment""];
""3016_getWinningPosition"" [label=""getWinningPosition""];
""3016_enterContest"" [label=""enterContest""];
""3016_getTotalAuthorizedForPayment"" [label=""getTotalAuthorizedForPayment""];
""3016_updateContestTeam"" [label=""updateContestTeam""];
""3016_transferApprovedFunds"" [label=""transferApprovedFunds""];
""3016_updateContestTeam"" -> ""3016_whenNotPaused"";
""3016_createContest"" -> ""3016_whenNotPaused"";
""3016_unpause"" -> ""3016_whenPaused"";
""3016_exitContest"" -> ""3016__authorizePayment"";
""3016_closeContest"" -> ""3016__authorizePayment"";
""3016_pause"" -> ""3016_onlyCLevel"";
""3016_enterContest"" -> ""3016_whenNotPaused"";
""3016_unpause"" -> ""3016_onlyCEO"";
""3016_releaseTeams"" -> ""3016__authorizePayment"";
""3016_payWinners"" -> ""3016__authorizePayment"";
""3016_setTeamContractAddress"" -> ""3016_onlyCEO"";
""3016_cancelContest"" -> ""3016__authorizePayment"";
""3016_pause"" -> ""3016_whenNotPaused"";
""3016_closeContest"" -> ""3016__computeCut"";
}
"
0x28df3fcb53b5efd091d816749d500c2e7c88d369.sol,Distribution,"contract Distribution { using SafeMath for uint256; enum State { AwaitingTokens, DistributingNormally, DistributingProRata, Done }",0,"subgraph cluster_393_Distribution {
label=""Distribution"";
""393_numTokensForContributor"" [label=""numTokensForContributor""];
""393_temporaryEscapeHatch"" [label=""temporaryEscapeHatch""];
""393_handleTokensReceived"" [label=""handleTokensReceived""];
""393__numTokensForContributor"" [label=""_numTokensForContributor""];
""393_doDistributionRange"" [label=""doDistributionRange""];
""393__handleTokensReceived"" [label=""_handleTokensReceived""];
""393_Distribution"" [label=""Distribution""];
""393_tokenFallback"" [label=""tokenFallback""];
""393_numTokensForContributor"" -> ""393__numTokensForContributor"";
""393_handleTokensReceived"" -> ""393__handleTokensReceived"";
""393_tokenFallback"" -> ""393__handleTokensReceived"";
""393_doDistributionRange"" -> ""393__numTokensForContributor"";
}
"
0xd64ad4eefaacb96a0865687cfeef4c4a2cfbfef2.sol,Lotthereum,"contract Lotthereum is Mortal, SafeMath { Game[] private games; mapping (address => uint) private balances; struct Game { uint id; uint pointer; uint maxNumberOfBets; uint minAmountByBet; uint prize; uint currentRound; Round[] rounds; }",0,"subgraph cluster_1217_Lotthereum {
label=""Lotthereum"";
""1217_getGames"" [label=""getGames""];
""1217_closeRound"" [label=""closeRound""];
""1217_getRoundBetNumber"" [label=""getRoundBetNumber""];
""1217_getGamePrize"" [label=""getGamePrize""];
""1217_createGame"" [label=""createGame""];
""1217_createGameRound"" [label=""createGameRound""];
""1217_getNumber"" [label=""getNumber""];
""1217_getRoundNumber"" [label=""getRoundNumber""];
""1217_getRoundPointer"" [label=""getRoundPointer""];
""1217_getPointer"" [label=""getPointer""];
""1217_getGameMaxNumberOfBets"" [label=""getGameMaxNumberOfBets""];
""1217_getGameRoundOpen"" [label=""getGameRoundOpen""];
""1217_placeBet"" [label=""placeBet""];
""1217_fallback"" [label=""fallback""];
""1217_getGameCurrentRoundId"" [label=""getGameCurrentRoundId""];
""1217_getRoundNumberOfBets"" [label=""getRoundNumberOfBets""];
""1217_withdraw"" [label=""withdraw""];
""1217_getGameMinAmountByBet"" [label=""getGameMinAmountByBet""];
""1217_getBalance"" [label=""getBalance""];
""1217_getRoundBetOrigin"" [label=""getRoundBetOrigin""];
""1217_getBlockHash"" [label=""getBlockHash""];
""1217_getRoundBetAmount"" [label=""getRoundBetAmount""];
""1217_payout"" [label=""payout""];
""1217_closeRound"" -> ""1217_payout"";
""1217_withdraw"" -> ""1217_getBalance"";
""1217_closeRound"" -> ""1217_getNumber"";
""1217_createGame"" -> ""1217_createGameRound"";
""1217_payout"" -> ""1217_divide"";
""1217_closeRound"" -> ""1217_getBlockHash"";
""1217_placeBet"" -> ""1217_closeRound"";
""1217_closeRound"" -> ""1217_createGameRound"";
""1217_createGame"" -> ""1217_onlyowner"";
""1217_payout"" -> ""1217_add"";
}
"
0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol,Pixereum,contract Pixereum { struct Pixel { address owner; string message; uint256 price; bool isSale; },0,"subgraph cluster_472_Pixereum {
label=""Pixereum"";
""472_fallback"" [label=""fallback""];
""472_setSaleState"" [label=""setSaleState""];
""472_setColor"" [label=""setColor""];
""472_getPixel"" [label=""getPixel""];
""472_setOwner"" [label=""setOwner""];
""472_buyPixel"" [label=""buyPixel""];
""472_getPixelNumber"" [label=""getPixelNumber""];
""472_getColors"" [label=""getColors""];
""472_Pixereum"" [label=""Pixereum""];
""472_getColor"" [label=""getColor""];
""472_deleteMessage"" [label=""deleteMessage""];
""472_setPrice"" [label=""setPrice""];
""472_setMessage"" [label=""setMessage""];
""472_setMessageStatus"" [label=""setMessageStatus""];
""472_setSaleState"" -> ""472_onlyPixelOwner"";
""472_buyPixel"" -> ""472_getPixel"";
""472_fallback"" -> ""472_buyPixel"";
""472_fallback"" -> ""472_getPixelNumber"";
""472_setPrice"" -> ""472_onlyPixelOwner"";
""472_setColor"" -> ""472_onlyPixelOwner"";
""472_deleteMessage"" -> ""472_onlyOwner"";
""472_fallback"" -> ""472_getColor"";
""472_setOwner"" -> ""472_onlyPixelOwner"";
""472_setMessageStatus"" -> ""472_onlyOwner"";
""472_setMessage"" -> ""472_onlyPixelOwner"";
""472_setMessage"" -> ""472_messageEnabled"";
}
"
0x40a835f8573c4b75e962e435591ea2200b74a714.sol,MyEtherTeller,contract MyEtherTeller { address public owner; struct EscrowStruct { address buyer; address seller; address escrow_agent; uint escrow_fee; uint amount; bool escrow_intervention; bool release_approval; bool refund_approval; bytes32 notes; },0,"subgraph cluster_1399_MyEtherTeller {
label=""MyEtherTeller"";
""1399_escrowDecision"" [label=""escrowDecision""];
""1399_SellerHistory"" [label=""SellerHistory""];
""1399_buyerFundRelease"" [label=""buyerFundRelease""];
""1399_newEscrow"" [label=""newEscrow""];
""1399_CheckBalance"" [label=""CheckBalance""];
""1399_checkStatus"" [label=""checkStatus""];
""1399_MyEtherTeller"" [label=""MyEtherTeller""];
""1399_EscrowEscalation"" [label=""EscrowEscalation""];
""1399_escrowHistory"" [label=""escrowHistory""];
""1399_getEscrowFee"" [label=""getEscrowFee""];
""1399_fallback"" [label=""fallback""];
""1399_sellerRefund"" [label=""sellerRefund""];
""1399_getNumTransactions"" [label=""getNumTransactions""];
""1399_buyerHistory"" [label=""buyerHistory""];
""1399_getSpecificTransaction"" [label=""getSpecificTransaction""];
""1399_WithdrawFunds"" [label=""WithdrawFunds""];
""1399_setEscrowFee"" [label=""setEscrowFee""];
""1399_SellerHistory"" -> ""1399_checkStatus"";
""1399_newEscrow"" -> ""1399_getEscrowFee"";
""1399_buyerHistory"" -> ""1399_checkStatus"";
""1399_getSpecificTransaction"" -> ""1399_checkStatus"";
""1399_escrowHistory"" -> ""1399_checkStatus"";
}
"
0xdb1f3030532a593a733f8ae6fce310aa91ac3a17.sol,XToken,contract XToken { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1359_XToken {
label=""XToken"";
""1359_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1359_withdraw"" [label=""withdraw""];
""1359_buyPrice"" [label=""buyPrice""];
""1359_sell"" [label=""sell""];
""1359_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1359_setAdministrator"" [label=""setAdministrator""];
""1359_dividendsOf"" [label=""dividendsOf""];
""1359_sqrt"" [label=""sqrt""];
""1359_exit"" [label=""exit""];
""1359_balanceOf"" [label=""balanceOf""];
""1359_sellPrice"" [label=""sellPrice""];
""1359_setStakingRequirement"" [label=""setStakingRequirement""];
""1359_myDividends"" [label=""myDividends""];
""1359_disableInitialStage"" [label=""disableInitialStage""];
""1359_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1359_totalSupply"" [label=""totalSupply""];
""1359_buy"" [label=""buy""];
""1359_transfer"" [label=""transfer""];
""1359_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1359_setName"" [label=""setName""];
""1359_purchaseTokens"" [label=""purchaseTokens""];
""1359_XToken"" [label=""XToken""];
""1359_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1359_setSymbol"" [label=""setSymbol""];
""1359_myTokens"" [label=""myTokens""];
""1359_fallback"" [label=""fallback""];
""1359_reinvest"" [label=""reinvest""];
""1359_exit"" -> ""1359_sell"";
""1359_ethereumToTokens_"" -> ""1359_sqrt"";
""1359_exit"" -> ""1359_withdraw"";
""1359_reinvest"" -> ""1359_onlyStronghands"";
""1359_sellPrice"" -> ""1359_tokensToEthereum_"";
""1359_setName"" -> ""1359_onlyAdministrator"";
""1359_fallback"" -> ""1359_purchaseTokens"";
""1359_transfer"" -> ""1359_withdraw"";
""1359_setStakingRequirement"" -> ""1359_onlyAdministrator"";
""1359_setSymbol"" -> ""1359_onlyAdministrator"";
""1359_purchaseTokens"" -> ""1359_antiEarlyWhale"";
""1359_myTokens"" -> ""1359_balanceOf"";
""1359_transfer"" -> ""1359_tokensToEthereum_"";
""1359_calculateEthereumReceived"" -> ""1359_tokensToEthereum_"";
""1359_transfer"" -> ""1359_onlyBagholders"";
""1359_purchaseTokens"" -> ""1359_ethereumToTokens_"";
""1359_disableInitialStage"" -> ""1359_onlyAdministrator"";
""1359_reinvest"" -> ""1359_purchaseTokens"";
""1359_reinvest"" -> ""1359_myDividends"";
""1359_withdraw"" -> ""1359_myDividends"";
""1359_buyPrice"" -> ""1359_tokensToEthereum_"";
""1359_calculateTokensReceived"" -> ""1359_ethereumToTokens_"";
""1359_setAdministrator"" -> ""1359_onlyAdministrator"";
""1359_myDividends"" -> ""1359_dividendsOf"";
""1359_transfer"" -> ""1359_myDividends"";
""1359_withdraw"" -> ""1359_onlyStronghands"";
""1359_buy"" -> ""1359_purchaseTokens"";
""1359_sell"" -> ""1359_tokensToEthereum_"";
""1359_sell"" -> ""1359_onlyBagholders"";
}
"
0x5304a4b788946f534088e9d8975ca8c1a3ded913.sol,Ozcar,"contract Ozcar is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Ozcar() public { symbol = ; name = ; decimals = 18; _totalSupply = 1250000000000000000000000000; balances[0xB9705a168AB4a92A78b1F3246fBb98cb5a4a8d6E] = _totalSupply; Transfer(address(0), 0xB9705a168AB4a92A78b1F3246fBb98cb5a4a8d6E, _totalSupply); }",0,"subgraph cluster_543_Ozcar {
label=""Ozcar"";
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_Ozcar"" [label=""Ozcar""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0xa2edca10311a70883c5019b51048f55fd1508fe6.sol,FoMo3DshortAgain,"contract FoMo3DshortAgain is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0xF6b8836492f8332D17B1496828d2bEE71ad511DA); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 30 minutes; uint256 private rndGap_ = 30 minutes; uint256 constant private rndInit_ = 30 minutes; uint256 constant private rndInc_ = 10 seconds; uint256 constant private rndMax_ = 30 minutes; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(30,6); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(56,10); fees_[3] = F3Ddatasets.TeamFee(43,8); potSplit_[0] = F3Ddatasets.PotSplit(15,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(30,10); }",0,"subgraph cluster_4209_FoMo3DshortAgain {
label=""FoMo3DshortAgain"";
""4209_determinePID"" [label=""determinePID""];
""4209_distributeInternal"" [label=""distributeInternal""];
""4209_reLoadCore"" [label=""reLoadCore""];
""4209_verifyTeam"" [label=""verifyTeam""];
""4209_reLoadXid"" [label=""reLoadXid""];
""4209_updateGenVault"" [label=""updateGenVault""];
""4209_reLoadXname"" [label=""reLoadXname""];
""4209_airdrop"" [label=""airdrop""];
""4209_fallback"" [label=""fallback""];
""4209_buyXid"" [label=""buyXid""];
""4209_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4209_getBuyPrice"" [label=""getBuyPrice""];
""4209_potSwap"" [label=""potSwap""];
""4209_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4209_buyXaddr"" [label=""buyXaddr""];
""4209_activate"" [label=""activate""];
""4209_constructor"" [label=""constructor""];
""4209_iWantXKeys"" [label=""iWantXKeys""];
""4209_getTimeLeft"" [label=""getTimeLeft""];
""4209_withdraw"" [label=""withdraw""];
""4209_registerNameXaddr"" [label=""registerNameXaddr""];
""4209_endTx"" [label=""endTx""];
""4209_managePlayer"" [label=""managePlayer""];
""4209_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4209_core"" [label=""core""];
""4209_buyXname"" [label=""buyXname""];
""4209_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4209_endRound"" [label=""endRound""];
""4209_registerNameXname"" [label=""registerNameXname""];
""4209_registerNameXID"" [label=""registerNameXID""];
""4209_updateTimer"" [label=""updateTimer""];
""4209_withdrawEarnings"" [label=""withdrawEarnings""];
""4209_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4209_calcKeysReceived"" [label=""calcKeysReceived""];
""4209_getPlayerVaults"" [label=""getPlayerVaults""];
""4209_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4209_distributeExternal"" [label=""distributeExternal""];
""4209_updateMasks"" [label=""updateMasks""];
""4209_buyCore"" [label=""buyCore""];
""4209_reLoadXaddr"" [label=""reLoadXaddr""];
""4209_buyXid"" -> ""4209_verifyTeam"";
""4209_buyXname"" -> ""4209_verifyTeam"";
""4209_reLoadCore"" -> ""4209_core"";
""4209_buyXaddr"" -> ""4209_verifyTeam"";
""4209_core"" -> ""4209_updateTimer"";
""4209_managePlayer"" -> ""4209_updateGenVault"";
""4209_buyXaddr"" -> ""4209_determinePID"";
""4209_reLoadXid"" -> ""4209_isHuman"";
""4209_buyXid"" -> ""4209_isActivated"";
""4209_buyCore"" -> ""4209_endRound"";
""4209_buyXname"" -> ""4209_determinePID"";
""4209_reLoadCore"" -> ""4209_endRound"";
""4209_getPlayerVaults"" -> ""4209_calcUnMaskedEarnings"";
""4209_buyXname"" -> ""4209_buyCore"";
""4209_buyXid"" -> ""4209_determinePID"";
""4209_reLoadXid"" -> ""4209_isActivated"";
""4209_reLoadXname"" -> ""4209_verifyTeam"";
""4209_withdraw"" -> ""4209_endRound"";
""4209_distributeInternal"" -> ""4209_updateMasks"";
""4209_fallback"" -> ""4209_buyCore"";
""4209_buyXid"" -> ""4209_isHuman"";
""4209_withdraw"" -> ""4209_isActivated"";
""4209_core"" -> ""4209_managePlayer"";
""4209_registerNameXname"" -> ""4209_isHuman"";
""4209_reLoadXaddr"" -> ""4209_isWithinLimits"";
""4209_reLoadXname"" -> ""4209_isWithinLimits"";
""4209_reLoadXname"" -> ""4209_isHuman"";
""4209_reLoadXid"" -> ""4209_reLoadCore"";
""4209_buyXaddr"" -> ""4209_isActivated"";
""4209_registerNameXaddr"" -> ""4209_isHuman"";
""4209_reLoadXaddr"" -> ""4209_reLoadCore"";
""4209_buyXaddr"" -> ""4209_isHuman"";
""4209_reLoadXname"" -> ""4209_isActivated"";
""4209_core"" -> ""4209_distributeExternal"";
""4209_buyXname"" -> ""4209_isActivated"";
""4209_buyXname"" -> ""4209_isHuman"";
""4209_reLoadXname"" -> ""4209_reLoadCore"";
""4209_fallback"" -> ""4209_isWithinLimits"";
""4209_reLoadXaddr"" -> ""4209_isActivated"";
""4209_fallback"" -> ""4209_isHuman"";
""4209_reLoadXaddr"" -> ""4209_verifyTeam"";
""4209_core"" -> ""4209_airdrop"";
""4209_fallback"" -> ""4209_determinePID"";
""4209_getPlayerInfoByAddress"" -> ""4209_calcUnMaskedEarnings"";
""4209_withdraw"" -> ""4209_withdrawEarnings"";
""4209_reLoadXid"" -> ""4209_isWithinLimits"";
""4209_buyXid"" -> ""4209_isWithinLimits"";
""4209_registerNameXID"" -> ""4209_isHuman"";
""4209_reLoadXid"" -> ""4209_verifyTeam"";
""4209_reLoadXaddr"" -> ""4209_isHuman"";
""4209_getPlayerVaults"" -> ""4209_getPlayerVaultsHelper"";
""4209_buyXaddr"" -> ""4209_buyCore"";
""4209_core"" -> ""4209_endTx"";
""4209_core"" -> ""4209_distributeInternal"";
""4209_updateGenVault"" -> ""4209_calcUnMaskedEarnings"";
""4209_buyXname"" -> ""4209_isWithinLimits"";
""4209_withdrawEarnings"" -> ""4209_updateGenVault"";
""4209_buyXid"" -> ""4209_buyCore"";
""4209_buyCore"" -> ""4209_core"";
""4209_withdraw"" -> ""4209_isHuman"";
""4209_fallback"" -> ""4209_isActivated"";
""4209_reLoadCore"" -> ""4209_withdrawEarnings"";
""4209_buyXaddr"" -> ""4209_isWithinLimits"";
}
"
0xeb5405e21d07fa5e3b6644d0ae7f391b47f17e27.sol,StrikersChecklist,"contract StrikersChecklist is StrikersPlayerList { enum DeployStep { WaitingForStepOne, WaitingForStepTwo, WaitingForStepThree, WaitingForStepFour, DoneInitialDeploy }",0,"subgraph cluster_2817_StrikersChecklist {
label=""StrikersChecklist"";
""2817_deployStepThree"" [label=""deployStepThree""];
""2817_limitForChecklistId"" [label=""limitForChecklistId""];
""2817__addOriginalChecklistItem"" [label=""_addOriginalChecklistItem""];
""2817_addUnreleasedChecklistItem"" [label=""addUnreleasedChecklistItem""];
""2817__addIconicChecklistItem"" [label=""_addIconicChecklistItem""];
""2817_originalsCount"" [label=""originalsCount""];
""2817_deployStepOne"" [label=""deployStepOne""];
""2817_unreleasedCount"" [label=""unreleasedCount""];
""2817_deployStepFour"" [label=""deployStepFour""];
""2817_iconicsCount"" [label=""iconicsCount""];
""2817_deployStepTwo"" [label=""deployStepTwo""];
""2817_deployStepThree"" -> ""2817_onlyOwner"";
""2817_deployStepOne"" -> ""2817__addOriginalChecklistItem"";
""2817_deployStepFour"" -> ""2817_onlyOwner"";
""2817_deployStepTwo"" -> ""2817_onlyOwner"";
""2817_limitForChecklistId"" -> ""2817_iconicsCount"";
""2817_addUnreleasedChecklistItem"" -> ""2817_onlyOwner"";
""2817_deployStepThree"" -> ""2817__addOriginalChecklistItem"";
""2817_deployStepFour"" -> ""2817__addIconicChecklistItem"";
""2817_deployStepTwo"" -> ""2817__addOriginalChecklistItem"";
""2817_limitForChecklistId"" -> ""2817_unreleasedCount"";
""2817_addUnreleasedChecklistItem"" -> ""2817_unreleasedCount"";
""2817_deployStepOne"" -> ""2817_onlyOwner"";
}
"
0x64bb42f7012cbfef9e036dd8929cbc9d61c7c3ca.sol,OneInTen,"contract OneInTen { function call_lucky(address contract_address, address contract_owner) public payable { uint8 guess = uint8(keccak256(now, contract_owner)) % 10; LuckyNumber(contract_address).takeAGuess.value(msg.value)(guess); require(this.balance > 0); msg.sender.transfer(this.balance); }",0,"subgraph cluster_59_OneInTen {
label=""OneInTen"";
""59_fallback"" [label=""fallback""];
""59_call_lucky"" [label=""call_lucky""];
}
"
0x40b10014a17e997e8e55594cbfb4f085c5ec815b.sol,MultiSig,"contract MultiSig is owned { uint constant public MAX_OWNER_COUNT = 50; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",0,"subgraph cluster_1127_MultiSigToken {
label=""MultiSigToken"";
""1127_MultiSigToken"" [label=""MultiSigToken""];
""1127_executeTransaction"" [label=""executeTransaction""];
""1127_fallback"" [label=""fallback""];
""1127_executeTransaction"" -> ""1127_isConfirmed"";
""1127_MultiSigToken"" -> ""1127_MultiSig"";
""1127_executeTransaction"" -> ""1127_notExecuted"";
}
"
0x6bc4cd236de09d6334c428c7d59212ac8ea704f8.sol,GMOON,contract GMOON { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1592_GMOON {
label=""GMOON"";
""1592_GMOON"" [label=""GMOON""];
""1592_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1592_fallback"" [label=""fallback""];
""1592_withdraw"" [label=""withdraw""];
""1592_buyPrice"" [label=""buyPrice""];
""1592_sellPrice"" [label=""sellPrice""];
""1592_setAdministrator"" [label=""setAdministrator""];
""1592_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1592_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1592_purchaseInternal"" [label=""purchaseInternal""];
""1592_transferAndCall"" [label=""transferAndCall""];
""1592_reinvest"" [label=""reinvest""];
""1592_totalSupply"" [label=""totalSupply""];
""1592_sqrt"" [label=""sqrt""];
""1592_setSymbol"" [label=""setSymbol""];
""1592_sell"" [label=""sell""];
""1592_buy"" [label=""buy""];
""1592_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1592_isContract"" [label=""isContract""];
""1592_setCanAcceptTokens"" [label=""setCanAcceptTokens""];
""1592_transfer"" [label=""transfer""];
""1592_balanceOf"" [label=""balanceOf""];
""1592_myTokens"" [label=""myTokens""];
""1592_purchaseTokens"" [label=""purchaseTokens""];
""1592_dividendsOf"" [label=""dividendsOf""];
""1592_disableInitialStage"" [label=""disableInitialStage""];
""1592_setStakingRequirement"" [label=""setStakingRequirement""];
""1592_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1592_myDividends"" [label=""myDividends""];
""1592_setName"" [label=""setName""];
""1592_exit"" [label=""exit""];
""1592_setStakingRequirement"" -> ""1592_onlyAdministrator"";
""1592_purchaseInternal"" -> ""1592_purchaseTokens"";
""1592_transferAndCall"" -> ""1592_transfer"";
""1592_withdraw"" -> ""1592_myDividends"";
""1592_purchaseTokens"" -> ""1592_antiEarlyWhale"";
""1592_transferAndCall"" -> ""1592_isContract"";
""1592_fallback"" -> ""1592_purchaseInternal"";
""1592_buyPrice"" -> ""1592_tokensToEthereum_"";
""1592_setName"" -> ""1592_onlyAdministrator"";
""1592_buy"" -> ""1592_purchaseInternal"";
""1592_reinvest"" -> ""1592_purchaseTokens"";
""1592_calculateTokensReceived"" -> ""1592_ethereumToTokens_"";
""1592_setSymbol"" -> ""1592_onlyAdministrator"";
""1592_disableInitialStage"" -> ""1592_onlyAdministrator"";
""1592_reinvest"" -> ""1592_onlyStronghands"";
""1592_calculateEthereumReceived"" -> ""1592_tokensToEthereum_"";
""1592_purchaseTokens"" -> ""1592_ethereumToTokens_"";
""1592_ethereumToTokens_"" -> ""1592_sqrt"";
""1592_transfer"" -> ""1592_onlyBagholders"";
""1592_myTokens"" -> ""1592_balanceOf"";
""1592_setCanAcceptTokens"" -> ""1592_onlyAdministrator"";
""1592_transfer"" -> ""1592_myDividends"";
""1592_sellPrice"" -> ""1592_tokensToEthereum_"";
""1592_transfer"" -> ""1592_withdraw"";
""1592_myDividends"" -> ""1592_dividendsOf"";
""1592_exit"" -> ""1592_withdraw"";
""1592_setAdministrator"" -> ""1592_onlyAdministrator"";
""1592_sell"" -> ""1592_tokensToEthereum_"";
""1592_exit"" -> ""1592_sell"";
""1592_withdraw"" -> ""1592_onlyStronghands"";
""1592_sell"" -> ""1592_onlyBagholders"";
""1592_purchaseInternal"" -> ""1592_notContract"";
""1592_reinvest"" -> ""1592_myDividends"";
}
"
0x4caecb46496b0af8b1b18d90773834ee8ccd8642.sol,CappedToken,contract CappedToken is MintableToken { uint256 public cap; constructor(uint256 _cap) public { require(_cap > 0); cap = _cap; },0,"subgraph cluster_695_CappedToken {
label=""CappedToken"";
""695_constructor"" [label=""constructor""];
""695_mint"" [label=""mint""];
""695_mint"" -> ""695_mint"";
}
"
0x3106526a07ee43ca97d794ec3ba3578a47d84cfb.sol,VirMYR,"contract VirMYR { string public name; string public symbol; uint8 public decimals = 2; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = 1000000000000000000000000000; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",0,"subgraph cluster_355_VirMYR {
label=""VirMYR"";
""355_TokenERC20"" [label=""TokenERC20""];
""355__transfer"" [label=""_transfer""];
""355_transferFrom"" [label=""transferFrom""];
""355_transfer"" [label=""transfer""];
""355_burnFrom"" [label=""burnFrom""];
""355_approve"" [label=""approve""];
""355_burn"" [label=""burn""];
""355_approveAndCall"" [label=""approveAndCall""];
""355_approveAndCall"" -> ""355_approve"";
""355_transfer"" -> ""355__transfer"";
""355_transferFrom"" -> ""355__transfer"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllCrowdsale,"contract ClinicAllCrowdsale is Crowdsale, FinalizableCrowdsale, MintedCrowdsale, ManagedWhitelist, Limited { constructor ( uint256 _tokenLimitSupply, uint256 _rate, address _wallet, address _privateSaleWallet, ERC20 _token, uint256 _openingTime, uint256 _closingTime, uint256 _discountTokenAmount, uint256 _discountTokenPercent, uint256 _preSaleClosingTime, uint256 _softCapLimit, ClinicAllRefundEscrow _vault, uint256 _buyLimitSupplyMin, uint256 _buyLimitSupplyMax, uint256 _kycLimitEliminator ) Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTime, _closingTime) public { privateSaleWallet = _privateSaleWallet; tokenSupplyLimit = _tokenLimitSupply; discountTokenAmount = _discountTokenAmount; discountTokenPercent = _discountTokenPercent; preSaleClosingTime = _preSaleClosingTime; softCapLimit = _softCapLimit; vault = _vault; buyLimitSupplyMin = _buyLimitSupplyMin; buyLimitSupplyMax = _buyLimitSupplyMax; kycLimitEliminator = _kycLimitEliminator; }",0,"subgraph cluster_4170_ClinicAllCrowdsale {
label=""ClinicAllCrowdsale"";
""4170_getRate"" [label=""getRate""];
""4170_getTokenAmount"" [label=""getTokenAmount""];
""4170_hasClosed"" [label=""hasClosed""];
""4170__preValidatePurchase"" [label=""_preValidatePurchase""];
""4170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""4170_transferToPrivateInvestor"" [label=""transferToPrivateInvestor""];
""4170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""4170_claimRefund"" [label=""claimRefund""];
""4170__getDiscountRate"" [label=""_getDiscountRate""];
""4170_manualRefund"" [label=""manualRefund""];
""4170_constructor"" [label=""constructor""];
""4170_goalReached"" [label=""goalReached""];
""4170_transferOff"" [label=""transferOff""];
""4170_allocatePrivateSaleFunds"" [label=""allocatePrivateSaleFunds""];
""4170_updateRate"" [label=""updateRate""];
""4170__getDiscountTokenAmount"" [label=""_getDiscountTokenAmount""];
""4170_redeemPrivateSaleFunds"" [label=""redeemPrivateSaleFunds""];
""4170_claimRefundChunk"" [label=""claimRefundChunk""];
""4170__getTokenAmount"" [label=""_getTokenAmount""];
""4170_updateKycLimitEliminator"" [label=""updateKycLimitEliminator""];
""4170__forwardFunds"" [label=""_forwardFunds""];
""4170_transferOn"" [label=""transferOn""];
""4170_supplyRest"" [label=""supplyRest""];
""4170_finalization"" [label=""finalization""];
""4170__processPurchase"" [label=""_processPurchase""];
""4170_isDiscount"" [label=""isDiscount""];
""4170_updateBuyLimitRange"" [label=""updateBuyLimitRange""];
""4170_transferTokensToReserve"" [label=""transferTokensToReserve""];
""4170_refundeesListLength"" [label=""refundeesListLength""];
""4170__getTokensWithDiscount"" [label=""_getTokensWithDiscount""];
""4170__getTokensWithDiscount"" -> ""4170__getDiscountRate"";
""4170__preValidatePurchase"" -> ""4170_isLimited"";
""4170_finalization"" -> ""4170_transferTokensToReserve"";
""4170_transferOn"" -> ""4170_onlyOwner"";
""4170_claimRefundChunk"" -> ""4170_onlyOwner"";
""4170_allocatePrivateSaleFunds"" -> ""4170__deliverTokens"";
""4170__forwardFunds"" -> ""4170__forwardFunds"";
""4170_transferTokensToReserve"" -> ""4170__deliverTokens"";
""4170_beneficiaryWithdrawAll"" -> ""4170_onlyOwner"";
""4170_claimRefund"" -> ""4170_goalReached"";
""4170_claimRefundChunk"" -> ""4170_goalReached"";
""4170__processPurchase"" -> ""4170_doesNotExceedLimit"";
""4170__preValidatePurchase"" -> ""4170_onlyIfWhitelisted"";
""4170_beneficiaryWithdrawChunk"" -> ""4170_onlyOwner"";
""4170__processPurchase"" -> ""4170__processPurchase"";
""4170_manualRefund"" -> ""4170_onlyOwner"";
""4170_updateRate"" -> ""4170_onlyManager"";
""4170__getTokenAmount"" -> ""4170_isDiscount"";
""4170_finalization"" -> ""4170_goalReached"";
""4170_refundeesListLength"" -> ""4170_onlyOwner"";
""4170_getTokenAmount"" -> ""4170__getTokenAmount"";
""4170__getDiscountTokenAmount"" -> ""4170__getDiscountRate"";
""4170_getRate"" -> ""4170__getDiscountRate"";
""4170_transferToPrivateInvestor"" -> ""4170_onlyPrivateSaleWallet"";
""4170_redeemPrivateSaleFunds"" -> ""4170_onlyPrivateSaleWallet"";
""4170__preValidatePurchase"" -> ""4170__getTokenAmount"";
""4170__getDiscountRate"" -> ""4170_isDiscount"";
""4170_constructor"" -> ""4170_constructor"";
""4170__getTokenAmount"" -> ""4170__getTokensWithDiscount"";
""4170_getRate"" -> ""4170_isDiscount"";
""4170__getTokensWithDiscount"" -> ""4170__getDiscountTokenAmount"";
""4170_finalization"" -> ""4170_finalization"";
""4170_transferOff"" -> ""4170_onlyOwner"";
""4170_updateKycLimitEliminator"" -> ""4170_onlyOwner"";
""4170__preValidatePurchase"" -> ""4170__preValidatePurchase"";
""4170_updateBuyLimitRange"" -> ""4170_onlyOwner"";
""4170_transferToPrivateInvestor"" -> ""4170_onlyIfWhitelisted"";
""4170_allocatePrivateSaleFunds"" -> ""4170_onlyOwner"";
}
"
0x184a35d15d3293728ec3bcc941d6bd175880bc02.sol,ICO,contract ICO is Ownable { using SafeMath for uint256; uint256 public rate; uint256 public bonus; TokenInterface public constant MEC = TokenInterface(0x064037ed6359c5d49a4ab6353345f46b687bbdd1); function ICO() public { rate = 2e7; bonus = 50; },0,"subgraph cluster_320_ICO {
label=""ICO"";
""320_ICO"" [label=""ICO""];
""320_changeRate"" [label=""changeRate""];
""320_fallback"" [label=""fallback""];
""320_changeBonus"" [label=""changeBonus""];
""320_buyTokens"" [label=""buyTokens""];
""320_withdrawMEC"" [label=""withdrawMEC""];
""320_changeBonus"" -> ""320_onlyOwner"";
""320_fallback"" -> ""320_buyTokens"";
""320_changeRate"" -> ""320_onlyOwner"";
""320_withdrawMEC"" -> ""320_onlyOwner"";
}
"
0xd25adb7e51e1f275c9007dc22b16916ae4849f58.sol,IMCUnlockRecord,"contract IMCUnlockRecord is Owned{ event UnlockRecordAdd(uint _date, bytes32 _hash, string _data, string _fileFormat, uint _stripLen); struct RecordInfo { uint date; bytes32 hash; string data; string fileFormat; uint stripLen; }",0,"subgraph cluster_177_IMCUnlockRecord {
label=""IMCUnlockRecord"";
""177_unlockRecordAdd"" [label=""unlockRecordAdd""];
""177_modifyExecutorAddr"" [label=""modifyExecutorAddr""];
""177_constructor"" [label=""constructor""];
""177_modifyExecutorAddr"" -> ""177_onlyOwner"";
}
"
0xee53ca3ae3d296c0f2a128138d12a0a3a60fa1f5.sol,ZlotsMulti,"contract ZlotsMulti is ZethrShell { using SafeMath for uint; event HouseRetrievedTake( uint timeTaken, uint tokensWithdrawn ); event TokensWagered( address _wagerer, uint _wagered ); event LogResult( address _wagerer, uint _result, uint _profit, uint _wagered, uint _category, bool _win ); event Loss(address _wagerer, uint _block); event ThreeMoonJackpot(address _wagerer, uint _block); event TwoMoonPrize(address _wagerer, uint _block); event ZTHPrize(address _wagerer, uint _block); event ThreeZSymbols(address _wagerer, uint _block); event ThreeTSymbols(address _wagerer, uint _block); event ThreeHSymbols(address _wagerer, uint _block); event ThreeEtherIcons(address _wagerer, uint _block); event ThreePurplePyramids(address _wagerer, uint _block); event ThreeGoldPyramids(address _wagerer, uint _block); event ThreeRockets(address _wagerer, uint _block); event OneMoonPrize(address _wagerer, uint _block); event OneOfEachPyramidPrize(address _wagerer, uint _block); event TwoZSymbols(address _wagerer, uint _block); event TwoTSymbols(address _wagerer, uint _block); event TwoHSymbols(address _wagerer, uint _block); event TwoEtherIcons(address _wagerer, uint _block); event TwoPurplePyramids(address _wagerer, uint _block); event TwoGoldPyramids(address _wagerer, uint _block); event TwoRockets(address _wagerer, uint _block); event SpinConcluded(address _wagerer, uint _block); modifier betIsValid(uint _betSize, uint divRate, uint8 spins) { require(_betSize.div(spins).mul(50) <= getMaxProfit(divRate)); require(_betSize.div(spins) >= minBet); _; }",0,"subgraph cluster_1828_ZlotsMulti {
label=""ZlotsMulti"";
""1828_constructor"" [label=""constructor""];
""1828_getNewMaxProfit"" [label=""getNewMaxProfit""];
""1828_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""1828_bankrollExternalUpdateTokens"" [label=""bankrollExternalUpdateTokens""];
""1828_maxRandom"" [label=""maxRandom""];
""1828_changeOwner"" [label=""changeOwner""];
""1828_pauseGame"" [label=""pauseGame""];
""1828_subContractBalance"" [label=""subContractBalance""];
""1828_ownerSetMinBet"" [label=""ownerSetMinBet""];
""1828__zthToken"" [label=""_zthToken""];
""1828_resumeGame"" [label=""resumeGame""];
""1828_changeBankroll"" [label=""changeBankroll""];
""1828_getMaxProfit"" [label=""getMaxProfit""];
""1828_random"" [label=""random""];
""1828_execute"" [label=""execute""];
""1828__finishSpin"" [label=""_finishSpin""];
""1828_setMaxProfit"" [label=""setMaxProfit""];
""1828_addContractBalance"" [label=""addContractBalance""];
""1828_fallback"" [label=""fallback""];
""1828_finishSpin"" [label=""finishSpin""];
""1828__spinTokens"" [label=""_spinTokens""];
""1828_ownerSetZlotsAddress"" [label=""ownerSetZlotsAddress""];
""1828__spinTokens"" -> ""1828__finishSpin"";
""1828_finishSpin"" -> ""1828__finishSpin"";
""1828__finishSpin"" -> ""1828_getNewMaxProfit"";
""1828_ownerSetMaxProfitAsPercentOfHouse"" -> ""1828_setMaxProfit"";
""1828__finishSpin"" -> ""1828_random"";
""1828_ownerSetZlotsAddress"" -> ""1828_onlyOwner"";
""1828_changeBankroll"" -> ""1828_onlyOwnerOrBankroll"";
""1828_ownerSetMaxProfitAsPercentOfHouse"" -> ""1828_onlyOwner"";
""1828_constructor"" -> ""1828_ownerSetMaxProfitAsPercentOfHouse"";
""1828_execute"" -> ""1828__spinTokens"";
""1828_finishSpin"" -> ""1828_gameIsActive"";
""1828_random"" -> ""1828_maxRandom"";
""1828__finishSpin"" -> ""1828_RequestBankrollPayment"";
""1828__spinTokens"" -> ""1828_betIsValid"";
""1828_constructor"" -> ""1828_setupBankrollInterface"";
""1828_constructor"" -> ""1828_ownerSetMinBet"";
""1828_changeOwner"" -> ""1828_onlyOwnerOrBankroll"";
""1828_ownerSetMinBet"" -> ""1828_onlyOwner"";
""1828_bankrollExternalUpdateTokens"" -> ""1828_fromBankroll"";
""1828_execute"" -> ""1828_fromBankroll"";
""1828_pauseGame"" -> ""1828_onlyOwnerOrBankroll"";
""1828__spinTokens"" -> ""1828_addContractBalance"";
""1828_resumeGame"" -> ""1828_onlyOwnerOrBankroll"";
""1828_bankrollExternalUpdateTokens"" -> ""1828_setMaxProfit"";
}
"
0x6c6d6e2971a85d3d3a1353ee15a08fb7c819ed8b.sol,Experiment,contract Experiment { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1694_Experiment {
label=""Experiment"";
""1694_sqrt"" [label=""sqrt""];
""1694_reinvest"" [label=""reinvest""];
""1694_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1694_setStakingRequirement"" [label=""setStakingRequirement""];
""1694_purchaseInternal"" [label=""purchaseInternal""];
""1694_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1694_exit"" [label=""exit""];
""1694_sellPrice"" [label=""sellPrice""];
""1694_fallback"" [label=""fallback""];
""1694_setSymbol"" [label=""setSymbol""];
""1694_buyPrice"" [label=""buyPrice""];
""1694_isContract"" [label=""isContract""];
""1694_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1694_etherToSendFund"" [label=""etherToSendFund""];
""1694_myDividends"" [label=""myDividends""];
""1694_Experiment"" [label=""Experiment""];
""1694_sell"" [label=""sell""];
""1694_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1694_buy"" [label=""buy""];
""1694_balanceOf"" [label=""balanceOf""];
""1694_withdraw"" [label=""withdraw""];
""1694_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1694_myTokens"" [label=""myTokens""];
""1694_transfer"" [label=""transfer""];
""1694_setCanAcceptTokens"" [label=""setCanAcceptTokens""];
""1694_setAdministrator"" [label=""setAdministrator""];
""1694_transferAndCall"" [label=""transferAndCall""];
""1694_purchaseTokens"" [label=""purchaseTokens""];
""1694_totalSupply"" [label=""totalSupply""];
""1694_dividendsOf"" [label=""dividendsOf""];
""1694_setName"" [label=""setName""];
""1694_payFund"" [label=""payFund""];
""1694_myTokens"" -> ""1694_balanceOf"";
""1694_sell"" -> ""1694_tokensToEthereum_"";
""1694_calculateEthereumReceived"" -> ""1694_tokensToEthereum_"";
""1694_myDividends"" -> ""1694_dividendsOf"";
""1694_buy"" -> ""1694_purchaseInternal"";
""1694_setName"" -> ""1694_onlyAdministrator"";
""1694_buyPrice"" -> ""1694_tokensToEthereum_"";
""1694_purchaseInternal"" -> ""1694_purchaseTokens"";
""1694_purchaseInternal"" -> ""1694_notContract"";
""1694_transfer"" -> ""1694_onlyBagholders"";
""1694_ethereumToTokens_"" -> ""1694_sqrt"";
""1694_calculateTokensReceived"" -> ""1694_ethereumToTokens_"";
""1694_reinvest"" -> ""1694_onlyStronghands"";
""1694_setSymbol"" -> ""1694_onlyAdministrator"";
""1694_transferAndCall"" -> ""1694_isContract"";
""1694_reinvest"" -> ""1694_myDividends"";
""1694_sellPrice"" -> ""1694_tokensToEthereum_"";
""1694_withdraw"" -> ""1694_myDividends"";
""1694_setStakingRequirement"" -> ""1694_onlyAdministrator"";
""1694_setCanAcceptTokens"" -> ""1694_onlyAdministrator"";
""1694_transfer"" -> ""1694_withdraw"";
""1694_exit"" -> ""1694_sell"";
""1694_sell"" -> ""1694_onlyBagholders"";
""1694_transfer"" -> ""1694_myDividends"";
""1694_purchaseTokens"" -> ""1694_antiEarlyWhale"";
""1694_transferAndCall"" -> ""1694_transfer"";
""1694_setAdministrator"" -> ""1694_onlyAdministrator"";
""1694_exit"" -> ""1694_withdraw"";
""1694_withdraw"" -> ""1694_onlyStronghands"";
""1694_purchaseTokens"" -> ""1694_ethereumToTokens_"";
""1694_fallback"" -> ""1694_purchaseInternal"";
""1694_reinvest"" -> ""1694_purchaseTokens"";
}
"
0x1d2aee5eaf5e4352965b710293513a5ad99796ff.sol,IMPERIVMCoin,contract IMPERIVMCoin is StandardToken { using SafeMath for uint; string public name = ; string public symbol = ; uint8 public decimals = 6; address owner; constructor(uint _initialSupply) public { totalSupply_ = _initialSupply * 10 ** uint(decimals); owner = msg.sender; balances[owner] = balances[owner].add(totalSupply_); },0,"subgraph cluster_573_IMPERIVMCoin {
label=""IMPERIVMCoin"";
""573_constructor"" [label=""constructor""];
}
"
0x1e2e9cabb5744c314de7978c081bd57c357e000d.sol,CryptoMyWord,"contract CryptoMyWord { using SafeMath for uint256; using strings for *; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); event NewWord(uint wordId, string name, uint price); address private owner; uint256 nameTokenId; uint256 tokenId; mapping (address => bool) private admins; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.8 ether; uint256 private increaseLimit2 = 1.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) public ownerOfItem; mapping (address => string) public nameOfOwner; mapping (address => string) public snsOfOwner; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => string) private nameOfItem; mapping (uint256 => string) private urlOfItem; mapping (uint256 => address[]) private borrowerOfItem; mapping (string => uint256[]) private nameToItems; mapping (uint256 => address) private approvedOfItem; mapping (string => uint256) private nameToParents; mapping (string => uint256) private nameToNameToken; mapping (string => string) private firstIdOfName; mapping (string => string) private secondIdOfName; function CryptoMyWord () public { owner = msg.sender; admins[owner] = true; }",0,"subgraph cluster_3428_CryptoMyWord {
label=""CryptoMyWord"";
""3428_enableERC721"" [label=""enableERC721""];
""3428_tokenExists"" [label=""tokenExists""];
""3428_approve"" [label=""approve""];
""3428__mint"" [label=""_mint""];
""3428_startingPriceOf"" [label=""startingPriceOf""];
""3428_getOwner"" [label=""getOwner""];
""3428_isAdmin"" [label=""isAdmin""];
""3428_balanceOf"" [label=""balanceOf""];
""3428_disableERC721"" [label=""disableERC721""];
""3428_name"" [label=""name""];
""3428_getNames"" [label=""getNames""];
""3428_buy"" [label=""buy""];
""3428_setUrl"" [label=""setUrl""];
""3428__transfer"" [label=""_transfer""];
""3428_transferFrom"" [label=""transferFrom""];
""3428_removeAdmin"" [label=""removeAdmin""];
""3428_ceil"" [label=""ceil""];
""3428_CryptoMyWord"" [label=""CryptoMyWord""];
""3428_composite"" [label=""composite""];
""3428_calculateFirstCut"" [label=""calculateFirstCut""];
""3428_withdrawAll"" [label=""withdrawAll""];
""3428_listItem"" [label=""listItem""];
""3428_addAdmin"" [label=""addAdmin""];
""3428_isContract"" [label=""isContract""];
""3428_transfer"" [label=""transfer""];
""3428_allOf"" [label=""allOf""];
""3428_tokensOf"" [label=""tokensOf""];
""3428_calculateDevCut"" [label=""calculateDevCut""];
""3428_calculateNextPrice"" [label=""calculateNextPrice""];
""3428_approvedFor"" [label=""approvedFor""];
""3428_allForPopulate"" [label=""allForPopulate""];
""3428_priceOf"" [label=""priceOf""];
""3428_withdrawAmount"" [label=""withdrawAmount""];
""3428_itemsByName"" [label=""itemsByName""];
""3428_ownerOf"" [label=""ownerOf""];
""3428_selfDestruct"" [label=""selfDestruct""];
""3428_symbol"" [label=""symbol""];
""3428_setOwner"" [label=""setOwner""];
""3428_implementsERC721"" [label=""implementsERC721""];
""3428_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""3428_totalSupply"" [label=""totalSupply""];
""3428_nameOf"" [label=""nameOf""];
""3428_nextPriceOf"" [label=""nextPriceOf""];
""3428_buy"" -> ""3428_ceil"";
""3428_buy"" -> ""3428_priceOf"";
""3428_allForPopulate"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428_ownerOf"";
""3428_approve"" -> ""3428_tokenExists"";
""3428_selfDestruct"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428__transfer"";
""3428_setOwner"" -> ""3428_onlyOwner"";
""3428_approve"" -> ""3428_ownerOf"";
""3428_withdrawAmount"" -> ""3428_onlyOwner"";
""3428_tokenExists"" -> ""3428_priceOf"";
""3428_buy"" -> ""3428_nameOf"";
""3428_allOf"" -> ""3428_startingPriceOf"";
""3428_transferFrom"" -> ""3428__transfer"";
""3428_allOf"" -> ""3428_nextPriceOf"";
""3428_composite"" -> ""3428__mint"";
""3428_nextPriceOf"" -> ""3428_calculateNextPrice"";
""3428_buy"" -> ""3428__mint"";
""3428_tokensOf"" -> ""3428_balanceOf"";
""3428_buy"" -> ""3428_isContract"";
""3428_setUrl"" -> ""3428_ownerOf"";
""3428_allForPopulate"" -> ""3428_nextPriceOf"";
""3428_removeAdmin"" -> ""3428_onlyOwner"";
""3428__transfer"" -> ""3428_ownerOf"";
""3428_enableERC721"" -> ""3428_onlyOwner"";
""3428_allOf"" -> ""3428_ownerOf"";
""3428_addAdmin"" -> ""3428_onlyOwner"";
""3428_transfer"" -> ""3428_onlyERC721"";
""3428_allForPopulate"" -> ""3428_priceOf"";
""3428_approve"" -> ""3428_onlyERC721"";
""3428__transfer"" -> ""3428_tokenExists"";
""3428_buy"" -> ""3428_calculateFirstCut"";
""3428_allOf"" -> ""3428_priceOf"";
""3428_buy"" -> ""3428_ownerOf"";
""3428_buy"" -> ""3428_nextPriceOf"";
""3428_allForPopulate"" -> ""3428_startingPriceOf"";
""3428_disableERC721"" -> ""3428_onlyOwner"";
""3428_withdrawAll"" -> ""3428_onlyOwner"";
""3428_listItem"" -> ""3428_onlyAdmins"";
""3428_allForPopulate"" -> ""3428_ownerOf"";
""3428_buy"" -> ""3428_calculateDevCut"";
""3428__mint"" -> ""3428_ownerOf"";
""3428_transferFrom"" -> ""3428_onlyERC721"";
""3428_nextPriceOf"" -> ""3428_priceOf"";
""3428_transferFrom"" -> ""3428_approvedFor"";
""3428_balanceOf"" -> ""3428_ownerOf"";
}
"
0x741658b62383113da09bb2ed58cc9030046b80ab.sol,MiniMeMintableToken,"contract MiniMeMintableToken is MiniMeToken { using SafeMath for uint256; event Mint(address indexed to, uint256 amount); event MintFinished(); bool public mintingFinished = false; mapping (address => uint256) issuedTokens; modifier canMint() { require(!mintingFinished); _; }",0,"subgraph cluster_1296_MiniMeMintableToken {
label=""MiniMeMintableToken"";
""1296_mint"" [label=""mint""];
""1296_finishMinting"" [label=""finishMinting""];
""1296_MiniMeMintableToken"" [label=""MiniMeMintableToken""];
""1296_mint"" -> ""1296_canMint"";
""1296_mint"" -> ""1296_onlyController"";
""1296_mint"" -> ""1296_generateTokens"";
""1296_finishMinting"" -> ""1296_canMint"";
""1296_finishMinting"" -> ""1296_onlyController"";
""1296_MiniMeMintableToken"" -> ""1296_MiniMeToken"";
}
"
0x18dfd8c468ed83397c0e1cadae01e1e65e86d275.sol,PacioToken,"contract PacioToken is ERC20Token { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 12; uint public tokensIssued; uint public tokensAvailable; uint public contributors; uint public founderTokensAllocated; uint public founderTokensVested; uint public foundationTokensAllocated; uint public foundationTokensVested; bool public icoCompleteB; address private pFounderToksA; address private pFoundationToksA; event LogIssue(address indexed Dst, uint Picos); event LogSaleCapReached(uint TokensIssued); event LogIcoCompleted(); event LogBurn(address Src, uint Picos); event LogDestroy(uint Picos); function Initialise(address vNewOwnerA) { require(totalSupply == 0); super.ChangeOwner(vNewOwnerA); founderTokensAllocated = 10**20; foundationTokensAllocated = 10**20; totalSupply = 10**21; iTokensOwnedM[ownerA] = 10**21; tokensAvailable = 8*(10**20); Transfer(0x0, ownerA, 10**21); }",0,"subgraph cluster_1036_PacioToken {
label=""PacioToken"";
""1036_SaleCapReached"" [label=""SaleCapReached""];
""1036_Mint"" [label=""Mint""];
""1036_Issue"" [label=""Issue""];
""1036_VestFFTokens"" [label=""VestFFTokens""];
""1036_Destroy"" [label=""Destroy""];
""1036_SetFFSettings"" [label=""SetFFSettings""];
""1036_IcoCompleted"" [label=""IcoCompleted""];
""1036_Burn"" [label=""Burn""];
""1036_fallback"" [label=""fallback""];
""1036_PrepareForSale"" [label=""PrepareForSale""];
""1036_ChangeOwner"" [label=""ChangeOwner""];
""1036_Initialise"" [label=""Initialise""];
""1036_Destroy"" -> ""1036_IsOwner"";
""1036_PrepareForSale"" -> ""1036_IsOwner"";
""1036_VestFFTokens"" -> ""1036_IsOwner"";
""1036_Initialise"" -> ""1036_ChangeOwner"";
""1036_Issue"" -> ""1036_IsActive"";
""1036_Mint"" -> ""1036_subMaxZero"";
""1036_IcoCompleted"" -> ""1036_IsOwner"";
""1036_Destroy"" -> ""1036_subMaxZero"";
""1036_SaleCapReached"" -> ""1036_IsActive"";
""1036_Destroy"" -> ""1036_IsActive"";
""1036_VestFFTokens"" -> ""1036_IsActive"";
""1036_IcoCompleted"" -> ""1036_IsActive"";
""1036_Issue"" -> ""1036_add"";
""1036_Issue"" -> ""1036_subMaxZero"";
""1036_Burn"" -> ""1036_IsActive"";
""1036_SaleCapReached"" -> ""1036_IsOwner"";
""1036_SetFFSettings"" -> ""1036_IsOwner"";
""1036_Burn"" -> ""1036_subMaxZero"";
""1036_Mint"" -> ""1036_add"";
""1036_Issue"" -> ""1036_IsOwner"";
""1036_VestFFTokens"" -> ""1036_add"";
""1036_ChangeOwner"" -> ""1036_ChangeOwner"";
""1036_ChangeOwner"" -> ""1036_transfer"";
""1036_VestFFTokens"" -> ""1036_sub"";
""1036_Burn"" -> ""1036_IsOwner"";
""1036_Mint"" -> ""1036_IsOwner"";
}
"
0xeb9b5d44ba6225eb74101549fc1c45576cb3c42e.sol,DRAGON,"contract DRAGON is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 200 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 150 * 1 days; uint256 public totalSupply = 10000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 5000; uint256 public tokensPerEth = 10000e8; uint public target0drop = 30000; uint public progress0drop = 0; address multisig = 0x618972f94fc60a13bb1f2045106d95a214569f07; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1263_DRAGON {
label=""DRAGON"";
""1263_transfer"" [label=""transfer""];
""1263_Distribute"" [label=""Distribute""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_approve"" [label=""approve""];
""1263_distr"" [label=""distr""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_fallback"" [label=""fallback""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_burn"" [label=""burn""];
""1263_add"" [label=""add""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_allowance"" [label=""allowance""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_getTokens"" [label=""getTokens""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_constructor"" [label=""constructor""];
""1263_withdraw"" [label=""withdraw""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_getTokens"" -> ""1263_distr"";
""1263_distr"" -> ""1263_canDistr"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_constructor"" -> ""1263_distr"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
}
"
0x37d9033151eaf64cea6b7531ee0e4fd6f6f9d6d0.sol,EthCrystal,contract EthCrystal { using SafeMath for *; struct TowersInfoList { string name; uint256 timeLimit; uint256 warriorToTime; uint256 currentRoundID; uint256 growthCoefficient; uint256 winnerShare; uint256 nextRound; uint256 dividendShare; mapping (uint256 => TowersInfo) RoundList; },0,"subgraph cluster_1370_EthCrystal {
label=""EthCrystal"";
""1370__playerRoundsInfo"" [label=""_playerRoundsInfo""];
""1370_buyWarriors"" [label=""buyWarriors""];
""1370__playerInfo"" [label=""_playerInfo""];
""1370_newRound"" [label=""newRound""];
""1370_referralCashout"" [label=""referralCashout""];
""1370_dividendCashout"" [label=""dividendCashout""];
""1370_constructor"" [label=""constructor""];
""1370_setNickname"" [label=""setNickname""];
""1370__playerBalance"" [label=""_playerBalance""];
""1370__TowerRoundDetails"" [label=""_TowerRoundDetails""];
""1370__currentPlayerAmountUnclaimed"" [label=""_currentPlayerAmountUnclaimed""];
""1370_buyWarriors"" -> ""1370_newRound"";
""1370__playerRoundsInfo"" -> ""1370__currentPlayerAmountUnclaimed"";
""1370_buyWarriors"" -> ""1370_setNickname"";
""1370_constructor"" -> ""1370_newRound"";
}
"
0xd91e45416bfbbec6e2d1ae4ac83b788a21acf583.sol,Etheroll,"contract Etheroll is usingOraclize, DSSafeAddSub { using strings for *; modifier betIsValid(uint _betSize, uint _playerNumber) { if(((((_betSize * (100-(safeSub(_playerNumber,1)))) / (safeSub(_playerNumber,1))+_betSize))*houseEdge/houseEdgeDivisor)-_betSize > maxProfit || _betSize < minBet || _playerNumber < minNumber || _playerNumber > maxNumber) throw; _; }",0,"subgraph cluster_8545_Etheroll {
label=""Etheroll"";
""8545_ownerSetTreasury"" [label=""ownerSetTreasury""];
""8545_Etheroll"" [label=""Etheroll""];
""8545_ownerSetHouseEdge"" [label=""ownerSetHouseEdge""];
""8545_ownerChangeOwner"" [label=""ownerChangeOwner""];
""8545_playerWithdrawPendingTransactions"" [label=""playerWithdrawPendingTransactions""];
""8545_ownerSetMinBet"" [label=""ownerSetMinBet""];
""8545_fallback"" [label=""fallback""];
""8545_ownerPauseGame"" [label=""ownerPauseGame""];
""8545_ownerPausePayouts"" [label=""ownerPausePayouts""];
""8545_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""8545_playerRollDice"" [label=""playerRollDice""];
""8545_playerGetPendingTxByAddress"" [label=""playerGetPendingTxByAddress""];
""8545_ownerSetOraclizeSafeGas"" [label=""ownerSetOraclizeSafeGas""];
""8545_setMaxProfit"" [label=""setMaxProfit""];
""8545_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""8545_ownerkill"" [label=""ownerkill""];
""8545___callback"" [label=""__callback""];
""8545_ownerTransferEther"" [label=""ownerTransferEther""];
""8545_ownerRefundPlayer"" [label=""ownerRefundPlayer""];
""8545_playerRollDice"" -> ""8545_gameIsActive"";
""8545_Etheroll"" -> ""8545_ownerSetHouseEdge"";
""8545___callback"" -> ""8545_parseInt"";
""8545_fallback"" -> ""8545_onlyTreasury"";
""8545_ownerPausePayouts"" -> ""8545_onlyOwner"";
""8545_ownerRefundPlayer"" -> ""8545_safeSub"";
""8545___callback"" -> ""8545_safeSub"";
""8545_ownerTransferEther"" -> ""8545_onlyOwner"";
""8545_playerRollDice"" -> ""8545_safeAdd"";
""8545___callback"" -> ""8545_onlyOraclize"";
""8545___callback"" -> ""8545_safeAdd"";
""8545_fallback"" -> ""8545_setMaxProfit"";
""8545_playerWithdrawPendingTransactions"" -> ""8545_payoutsAreActive"";
""8545___callback"" -> ""8545_payoutsAreActive"";
""8545_playerRollDice"" -> ""8545_oraclize_query"";
""8545_ownerSetMaxProfitAsPercentOfHouse"" -> ""8545_setMaxProfit"";
""8545_fallback"" -> ""8545_safeAdd"";
""8545_ownerPauseGame"" -> ""8545_onlyOwner"";
""8545_Etheroll"" -> ""8545_ownerSetMaxProfitAsPercentOfHouse"";
""8545_playerRollDice"" -> ""8545_betIsValid"";
""8545_Etheroll"" -> ""8545_oraclize_setNetwork"";
""8545_playerRollDice"" -> ""8545_safeSub"";
""8545___callback"" -> ""8545_setMaxProfit"";
""8545_ownerSetMinBet"" -> ""8545_onlyOwner"";
""8545_ownerChangeOwner"" -> ""8545_onlyOwner"";
""8545_ownerSetTreasury"" -> ""8545_onlyOwner"";
""8545_Etheroll"" -> ""8545_ownerSetMinBet"";
""8545_ownerSetMaxProfitAsPercentOfHouse"" -> ""8545_onlyOwner"";
""8545_Etheroll"" -> ""8545_oraclize_setProof"";
""8545_ownerkill"" -> ""8545_onlyOwner"";
""8545_ownerRefundPlayer"" -> ""8545_onlyOwner"";
""8545_ownerTransferEther"" -> ""8545_setMaxProfit"";
""8545_ownerSetOraclizeSafeGas"" -> ""8545_onlyOwner"";
""8545_ownerUpdateContractBalance"" -> ""8545_onlyOwner"";
""8545_ownerSetHouseEdge"" -> ""8545_onlyOwner"";
""8545_ownerTransferEther"" -> ""8545_safeSub"";
}
"
0xf11e1de7d9876a10b0742da19232f42456ead843.sol,DXEACoin,"contract DXEACoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 13 * 1 days; uint public round2 = now + 8 * 1 days; uint public round1 = now + 19 * 1 days; uint256 public totalSupply = 15000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 15500000e8; uint public target0drop = 30000; uint public progress0drop = 0; address multisig = 0x24aD8dC3119672F5a50C2ed25Fd4708FEe589281; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_1446_DXEACoin {
label=""DXEACoin"";
""1446_transferFrom"" [label=""transferFrom""];
""1446_getTokenBalance"" [label=""getTokenBalance""];
""1446_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1446_approve"" [label=""approve""];
""1446_finishDistribution"" [label=""finishDistribution""];
""1446_withdrawAll"" [label=""withdrawAll""];
""1446_burn"" [label=""burn""];
""1446_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1446_transferOwnership"" [label=""transferOwnership""];
""1446_distr"" [label=""distr""];
""1446_withdraw"" [label=""withdraw""];
""1446_transfer"" [label=""transfer""];
""1446_constructor"" [label=""constructor""];
""1446_getTokens"" [label=""getTokens""];
""1446_allowance"" [label=""allowance""];
""1446_add"" [label=""add""];
""1446_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1446_Distribute"" [label=""Distribute""];
""1446_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1446_balanceOf"" [label=""balanceOf""];
""1446_fallback"" [label=""fallback""];
""1446_DistributeAirdropMultiple"" -> ""1446_onlyOwner"";
""1446_Distribute"" -> ""1446_onlyOwner"";
""1446_finishDistribution"" -> ""1446_onlyOwner"";
""1446_getTokens"" -> ""1446_distr"";
""1446_withdrawAll"" -> ""1446_onlyOwner"";
""1446_withdraw"" -> ""1446_onlyOwner"";
""1446_distr"" -> ""1446_canDistr"";
""1446_DistributeAirdrop"" -> ""1446_Distribute"";
""1446_burn"" -> ""1446_onlyOwner"";
""1446_DistributeAirdropMultiple"" -> ""1446_Distribute"";
""1446_transferOwnership"" -> ""1446_onlyOwner"";
""1446_fallback"" -> ""1446_getTokens"";
""1446_updateTokensPerEth"" -> ""1446_onlyOwner"";
""1446_withdrawForeignTokens"" -> ""1446_onlyOwner"";
""1446_transferFrom"" -> ""1446_onlyPayloadSize"";
""1446_constructor"" -> ""1446_distr"";
""1446_transfer"" -> ""1446_onlyPayloadSize"";
""1446_getTokens"" -> ""1446_canDistr"";
""1446_add"" -> ""1446_onlyOwner"";
""1446_finishDistribution"" -> ""1446_canDistr"";
""1446_DistributeAirdrop"" -> ""1446_onlyOwner"";
}
"
0x32f14d71499fc2c1482eb275ec83ce5fb1d6c7ec.sol,QUICK_DEPOSIT_FOR_FUN,contract QUICK_DEPOSIT_FOR_FUN { address creator = msg.sender; uint256 public LastExtractTime; mapping (address=>uint256) public ExtractDepositTime; uint256 public freeEther; function Deposit() public payable { if(msg.value> 1 ether && freeEther >= 0.5 ether) { LastExtractTime = now + 1 days; ExtractDepositTime[msg.sender] = LastExtractTime; freeEther-=0.5 ether; },0,"subgraph cluster_127_QUICK_DEPOSIT_FOR_FUN {
label=""QUICK_DEPOSIT_FOR_FUN"";
""127_fallback"" [label=""fallback""];
""127_PutFreeEther"" [label=""PutFreeEther""];
""127_Kill"" [label=""Kill""];
""127_Deposit"" [label=""Deposit""];
""127_GetFreeEther"" [label=""GetFreeEther""];
}
"
0x87cdabc87128476d84462eb9c5a67a7acfa7889e.sol,PreSale,"contract PreSale is Ownable, Crowdsale, MilestoneCrowdsale { using SafeMath for uint256; uint256 public cap; uint256 public minimumContribution; uint256 public goal; bool public isFinalized = false; RefundEscrow private escrow; USDPrice private usdPrice; event Finalized(); constructor( uint256 _rate, address _wallet, ERC20 _token, uint256 _openingTime, uint256 _closingTime, uint256 _goal, uint256 _cap, uint256 _minimumContribution, USDPrice _usdPrice ) Crowdsale(_rate, _wallet, _token) MilestoneCrowdsale(_openingTime, _closingTime) public { require(_cap > 0); require(_minimumContribution > 0); require(_goal > 0); cap = _cap; minimumContribution = _minimumContribution; escrow = new RefundEscrow(wallet); goal = _goal; usdPrice = _usdPrice; }",0,"subgraph cluster_1687_PreSale {
label=""PreSale"";
""1687_finalize"" [label=""finalize""];
""1687__getTokenAmount"" [label=""_getTokenAmount""];
""1687_constructor"" [label=""constructor""];
""1687__preValidatePurchase"" [label=""_preValidatePurchase""];
""1687_goalReached"" [label=""goalReached""];
""1687_capReached"" [label=""capReached""];
""1687__forwardFunds"" [label=""_forwardFunds""];
""1687_claimRefund"" [label=""claimRefund""];
""1687__updatePurchasingState"" [label=""_updatePurchasingState""];
""1687__deliverTokens"" [label=""_deliverTokens""];
""1687_finalization"" [label=""finalization""];
""1687_claimRefund"" -> ""1687_goalReached"";
""1687__updatePurchasingState"" -> ""1687__updatePurchasingState"";
""1687_finalize"" -> ""1687_onlyOwner"";
""1687_finalize"" -> ""1687_hasClosed"";
""1687_finalize"" -> ""1687_finalization"";
""1687_finalization"" -> ""1687_goalReached"";
""1687_constructor"" -> ""1687_constructor"";
""1687_finalize"" -> ""1687_goalReached"";
""1687__getTokenAmount"" -> ""1687_getCurrentRate"";
""1687__preValidatePurchase"" -> ""1687__preValidatePurchase"";
}
"
0x3664be8ec8a66e8dab9dfa48e5092f576edab746.sol,FoMo3Dshort,"contract FoMo3Dshort is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x454b6ee7e3847d51456b4146f7ae2664dbc35af4); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 1 seconds; uint256 private rndGap_ = 1 seconds; uint256 constant private rndInit_ = 2400 hours; uint256 constant private rndInc_ = 10 seconds; uint256 constant private rndMax_ = 2400 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(30,6); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(56,10); fees_[3] = F3Ddatasets.TeamFee(43,8); potSplit_[0] = F3Ddatasets.PotSplit(15,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(30,10); }",0,"subgraph cluster_4126_FoMo3Dshort {
label=""FoMo3Dshort"";
""4126_calcKeysReceived"" [label=""calcKeysReceived""];
""4126_getPlayerVaults"" [label=""getPlayerVaults""];
""4126_reLoadXaddr"" [label=""reLoadXaddr""];
""4126_registerNameXaddr"" [label=""registerNameXaddr""];
""4126_getTimeLeft"" [label=""getTimeLeft""];
""4126_airdrop"" [label=""airdrop""];
""4126_distributeExternal"" [label=""distributeExternal""];
""4126_constructor"" [label=""constructor""];
""4126_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4126_buyCore"" [label=""buyCore""];
""4126_potSwap"" [label=""potSwap""];
""4126_verifyTeam"" [label=""verifyTeam""];
""4126_determinePID"" [label=""determinePID""];
""4126_reLoadCore"" [label=""reLoadCore""];
""4126_fallback"" [label=""fallback""];
""4126_endTx"" [label=""endTx""];
""4126_reLoadXid"" [label=""reLoadXid""];
""4126_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4126_endRound"" [label=""endRound""];
""4126_iWantXKeys"" [label=""iWantXKeys""];
""4126_updateMasks"" [label=""updateMasks""];
""4126_buyXaddr"" [label=""buyXaddr""];
""4126_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4126_getBuyPrice"" [label=""getBuyPrice""];
""4126_withdraw"" [label=""withdraw""];
""4126_registerNameXname"" [label=""registerNameXname""];
""4126_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4126_registerNameXID"" [label=""registerNameXID""];
""4126_withdrawEarnings"" [label=""withdrawEarnings""];
""4126_buyXid"" [label=""buyXid""];
""4126_core"" [label=""core""];
""4126_updateTimer"" [label=""updateTimer""];
""4126_activate"" [label=""activate""];
""4126_updateGenVault"" [label=""updateGenVault""];
""4126_distributeInternal"" [label=""distributeInternal""];
""4126_buyXname"" [label=""buyXname""];
""4126_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4126_managePlayer"" [label=""managePlayer""];
""4126_reLoadXname"" [label=""reLoadXname""];
""4126_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4126_core"" -> ""4126_endTx"";
""4126_reLoadXname"" -> ""4126_isWithinLimits"";
""4126_fallback"" -> ""4126_determinePID"";
""4126_buyXaddr"" -> ""4126_determinePID"";
""4126_buyCore"" -> ""4126_endRound"";
""4126_fallback"" -> ""4126_buyCore"";
""4126_buyXid"" -> ""4126_isHuman"";
""4126_withdraw"" -> ""4126_isActivated"";
""4126_fallback"" -> ""4126_isWithinLimits"";
""4126_reLoadXaddr"" -> ""4126_reLoadCore"";
""4126_buyXname"" -> ""4126_isWithinLimits"";
""4126_reLoadXid"" -> ""4126_isActivated"";
""4126_buyXid"" -> ""4126_determinePID"";
""4126_registerNameXaddr"" -> ""4126_isHuman"";
""4126_core"" -> ""4126_distributeInternal"";
""4126_getPlayerVaults"" -> ""4126_getPlayerVaultsHelper"";
""4126_registerNameXID"" -> ""4126_isHuman"";
""4126_buyXaddr"" -> ""4126_isWithinLimits"";
""4126_withdraw"" -> ""4126_withdrawEarnings"";
""4126_core"" -> ""4126_airdrop"";
""4126_reLoadXid"" -> ""4126_isWithinLimits"";
""4126_reLoadXid"" -> ""4126_reLoadCore"";
""4126_getPlayerInfoByAddress"" -> ""4126_calcUnMaskedEarnings"";
""4126_withdraw"" -> ""4126_isHuman"";
""4126_reLoadXid"" -> ""4126_isHuman"";
""4126_reLoadXaddr"" -> ""4126_isActivated"";
""4126_buyXaddr"" -> ""4126_isActivated"";
""4126_updateGenVault"" -> ""4126_calcUnMaskedEarnings"";
""4126_core"" -> ""4126_managePlayer"";
""4126_buyXaddr"" -> ""4126_isHuman"";
""4126_buyXaddr"" -> ""4126_verifyTeam"";
""4126_reLoadCore"" -> ""4126_withdrawEarnings"";
""4126_buyXname"" -> ""4126_isActivated"";
""4126_reLoadXid"" -> ""4126_verifyTeam"";
""4126_distributeInternal"" -> ""4126_updateMasks"";
""4126_buyXid"" -> ""4126_isWithinLimits"";
""4126_core"" -> ""4126_updateTimer"";
""4126_withdrawEarnings"" -> ""4126_updateGenVault"";
""4126_reLoadXaddr"" -> ""4126_isHuman"";
""4126_reLoadXaddr"" -> ""4126_isWithinLimits"";
""4126_reLoadXname"" -> ""4126_verifyTeam"";
""4126_reLoadXname"" -> ""4126_isActivated"";
""4126_fallback"" -> ""4126_isHuman"";
""4126_fallback"" -> ""4126_isActivated"";
""4126_buyXname"" -> ""4126_determinePID"";
""4126_buyXname"" -> ""4126_buyCore"";
""4126_buyXid"" -> ""4126_isActivated"";
""4126_buyXid"" -> ""4126_buyCore"";
""4126_buyXname"" -> ""4126_verifyTeam"";
""4126_getPlayerVaults"" -> ""4126_calcUnMaskedEarnings"";
""4126_buyCore"" -> ""4126_core"";
""4126_reLoadXname"" -> ""4126_isHuman"";
""4126_buyXname"" -> ""4126_isHuman"";
""4126_reLoadXaddr"" -> ""4126_verifyTeam"";
""4126_withdraw"" -> ""4126_endRound"";
""4126_reLoadCore"" -> ""4126_endRound"";
""4126_managePlayer"" -> ""4126_updateGenVault"";
""4126_registerNameXname"" -> ""4126_isHuman"";
""4126_buyXaddr"" -> ""4126_buyCore"";
""4126_buyXid"" -> ""4126_verifyTeam"";
""4126_reLoadCore"" -> ""4126_core"";
""4126_reLoadXname"" -> ""4126_reLoadCore"";
""4126_core"" -> ""4126_distributeExternal"";
}
"
0xf1afddbed214dba82cb98d46ad0a96e643f7f6f6.sol,StarbaseEarlyPurchaseAmendment,contract StarbaseEarlyPurchaseAmendment { event EarlyPurchaseInvalidated(uint256 epIdx); event EarlyPurchaseAmended(uint256 epIdx); AbstractStarbaseCrowdsale public starbaseCrowdsale; StarbaseEarlyPurchase public starbaseEarlyPurchase; address public owner; uint256[] public invalidEarlyPurchaseIndexes; uint256[] public amendedEarlyPurchaseIndexes; mapping (uint256 => StarbaseEarlyPurchase.EarlyPurchase) public amendedEarlyPurchases; modifier noEther() { require(msg.value == 0); _; },0,"subgraph cluster_1075_StarbaseEarlyPurchaseAmendment {
label=""StarbaseEarlyPurchaseAmendment"";
""1075_amendEarlyPurchase"" [label=""amendEarlyPurchase""];
""1075_totalAmountOfEarlyPurchases"" [label=""totalAmountOfEarlyPurchases""];
""1075_getEarlyPurchase"" [label=""getEarlyPurchase""];
""1075_isInvalidEarlyPurchase"" [label=""isInvalidEarlyPurchase""];
""1075_invalidateEarlyPurchase"" [label=""invalidateEarlyPurchase""];
""1075_setup"" [label=""setup""];
""1075_earlyPurchases"" [label=""earlyPurchases""];
""1075_numberOfEarlyPurchases"" [label=""numberOfEarlyPurchases""];
""1075_numberOfRawEarlyPurchases"" [label=""numberOfRawEarlyPurchases""];
""1075_StarbaseEarlyPurchaseAmendment"" [label=""StarbaseEarlyPurchaseAmendment""];
""1075_loadStarbaseEarlyPurchases"" [label=""loadStarbaseEarlyPurchases""];
""1075_starbaseEarlyPurchase"" [label=""starbaseEarlyPurchase""];
""1075_purchasedAmountBy"" [label=""purchasedAmountBy""];
""1075_amendedEarlyPurchases"" [label=""amendedEarlyPurchases""];
""1075_isAmendedEarlyPurchase"" [label=""isAmendedEarlyPurchase""];
""1075_normalizedEarlyPurchases"" [label=""normalizedEarlyPurchases""];
""1075_amendEarlyPurchase"" -> ""1075_onlyEarlyPurchasesLoaded"";
""1075_numberOfEarlyPurchases"" -> ""1075_noEther"";
""1075_amendEarlyPurchase"" -> ""1075_isInvalidEarlyPurchase"";
""1075_normalizedEarlyPurchases"" -> ""1075_numberOfRawEarlyPurchases"";
""1075_amendEarlyPurchase"" -> ""1075_noEther"";
""1075_loadStarbaseEarlyPurchases"" -> ""1075_onlyBeforeCrowdsale"";
""1075_loadStarbaseEarlyPurchases"" -> ""1075_onlyOwner"";
""1075_amendEarlyPurchase"" -> ""1075_isAmendedEarlyPurchase"";
""1075_getEarlyPurchase"" -> ""1075_onlyEarlyPurchasesLoaded"";
""1075_isInvalidEarlyPurchase"" -> ""1075_noEther"";
""1075_amendEarlyPurchase"" -> ""1075_onlyBeforeCrowdsale"";
""1075_isAmendedEarlyPurchase"" -> ""1075_numberOfRawEarlyPurchases"";
""1075_totalAmountOfEarlyPurchases"" -> ""1075_noEther"";
""1075_invalidateEarlyPurchase"" -> ""1075_onlyOwner"";
""1075_invalidateEarlyPurchase"" -> ""1075_noEther"";
""1075_normalizedEarlyPurchases"" -> ""1075_isAmendedEarlyPurchase"";
""1075_setup"" -> ""1075_noEther"";
""1075_invalidateEarlyPurchase"" -> ""1075_numberOfRawEarlyPurchases"";
""1075_normalizedEarlyPurchases"" -> ""1075_getEarlyPurchase"";
""1075_numberOfEarlyPurchases"" -> ""1075_normalizedEarlyPurchases"";
""1075_amendEarlyPurchase"" -> ""1075_onlyOwner"";
""1075_purchasedAmountBy"" -> ""1075_noEther"";
""1075_numberOfRawEarlyPurchases"" -> ""1075_onlyEarlyPurchasesLoaded"";
""1075_invalidateEarlyPurchase"" -> ""1075_onlyEarlyPurchasesLoaded"";
""1075_purchasedAmountBy"" -> ""1075_normalizedEarlyPurchases"";
""1075_totalAmountOfEarlyPurchases"" -> ""1075_normalizedEarlyPurchases"";
""1075_setup"" -> ""1075_onlyOwner"";
""1075_isInvalidEarlyPurchase"" -> ""1075_numberOfRawEarlyPurchases"";
""1075_amendEarlyPurchase"" -> ""1075_numberOfRawEarlyPurchases"";
""1075_isAmendedEarlyPurchase"" -> ""1075_noEther"";
""1075_invalidateEarlyPurchase"" -> ""1075_onlyBeforeCrowdsale"";
""1075_earlyPurchases"" -> ""1075_onlyEarlyPurchasesLoaded"";
""1075_StarbaseEarlyPurchaseAmendment"" -> ""1075_noEther"";
""1075_normalizedEarlyPurchases"" -> ""1075_isInvalidEarlyPurchase"";
""1075_loadStarbaseEarlyPurchases"" -> ""1075_noEther"";
}
"
0x18ee4d68180e8d0e007481f66c57f89a084891a7.sol,GTDNToken,contract GTDNToken is PausableToken { string public name = ; string public symbol = ; string public version = ; uint8 public decimals = 18; function GTDNToken() { totalSupply = 30 * 10000 * 10000 * (10**(uint256(decimals))); balances[msg.sender] = totalSupply; },0,"subgraph cluster_816_GTDNToken {
label=""GTDNToken"";
""816_fallback"" [label=""fallback""];
""816_GTDNToken"" [label=""GTDNToken""];
}
"
0xa48d3b79f43477224933e492e42f5cacf4091ecc.sol,AdvancedCOINSToken,"contract AdvancedCOINSToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",0,"subgraph cluster_660_AdvancedCOINSToken {
label=""AdvancedCOINSToken"";
""660_freezeAccount"" [label=""freezeAccount""];
""660_mintToken"" [label=""mintToken""];
""660__transfer"" [label=""_transfer""];
""660_setPrices"" [label=""setPrices""];
""660_constructor"" [label=""constructor""];
""660_buy"" [label=""buy""];
""660_sell"" [label=""sell""];
""660_mintToken"" -> ""660_onlyOwner"";
""660_sell"" -> ""660__transfer"";
""660_setPrices"" -> ""660_onlyOwner"";
""660_constructor"" -> ""660_constructor"";
""660_buy"" -> ""660__transfer"";
""660_freezeAccount"" -> ""660_onlyOwner"";
}
"
0x64b103aee34d1fa22fb4c45c4be105cbe1c4a179.sol,RainbowsEverywhere,contract RainbowsEverywhere { modifier onlyBagholders() { require(myTokens() > 0); _; },0,"subgraph cluster_1312_RainbowsEverywhere {
label=""RainbowsEverywhere"";
""1312_setStakingRequirement"" [label=""setStakingRequirement""];
""1312_balanceOf"" [label=""balanceOf""];
""1312_setName"" [label=""setName""];
""1312_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1312_withdraw"" [label=""withdraw""];
""1312_sqrt"" [label=""sqrt""];
""1312_purchaseTokens"" [label=""purchaseTokens""];
""1312_exit"" [label=""exit""];
""1312_transfer"" [label=""transfer""];
""1312_myDividends"" [label=""myDividends""];
""1312_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1312_totalSupply"" [label=""totalSupply""];
""1312_buy"" [label=""buy""];
""1312_dividendsOf"" [label=""dividendsOf""];
""1312_buyPrice"" [label=""buyPrice""];
""1312_setAdministrator"" [label=""setAdministrator""];
""1312_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1312_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1312_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1312_RainbowsEverywhere"" [label=""RainbowsEverywhere""];
""1312_sellPrice"" [label=""sellPrice""];
""1312_myTokens"" [label=""myTokens""];
""1312_disableInitialStage"" [label=""disableInitialStage""];
""1312_fallback"" [label=""fallback""];
""1312_sell"" [label=""sell""];
""1312_reinvest"" [label=""reinvest""];
""1312_setSymbol"" [label=""setSymbol""];
""1312_sell"" -> ""1312_tokensToEthereum_"";
""1312_buyPrice"" -> ""1312_tokensToEthereum_"";
""1312_setName"" -> ""1312_onlyAdministrator"";
""1312_transfer"" -> ""1312_onlyBagholders"";
""1312_calculateTokensReceived"" -> ""1312_ethereumToTokens_"";
""1312_buy"" -> ""1312_purchaseTokens"";
""1312_disableInitialStage"" -> ""1312_onlyAdministrator"";
""1312_reinvest"" -> ""1312_purchaseTokens"";
""1312_fallback"" -> ""1312_purchaseTokens"";
""1312_sellPrice"" -> ""1312_tokensToEthereum_"";
""1312_purchaseTokens"" -> ""1312_ethereumToTokens_"";
""1312_exit"" -> ""1312_sell"";
""1312_transfer"" -> ""1312_tokensToEthereum_"";
""1312_ethereumToTokens_"" -> ""1312_sqrt"";
""1312_withdraw"" -> ""1312_onlyStronghands"";
""1312_reinvest"" -> ""1312_myDividends"";
""1312_reinvest"" -> ""1312_onlyStronghands"";
""1312_sell"" -> ""1312_onlyBagholders"";
""1312_transfer"" -> ""1312_withdraw"";
""1312_setSymbol"" -> ""1312_onlyAdministrator"";
""1312_setStakingRequirement"" -> ""1312_onlyAdministrator"";
""1312_myTokens"" -> ""1312_balanceOf"";
""1312_exit"" -> ""1312_withdraw"";
""1312_setAdministrator"" -> ""1312_onlyAdministrator"";
""1312_withdraw"" -> ""1312_myDividends"";
""1312_purchaseTokens"" -> ""1312_antiEarlyWhale"";
""1312_calculateEthereumReceived"" -> ""1312_tokensToEthereum_"";
""1312_transfer"" -> ""1312_myDividends"";
""1312_myDividends"" -> ""1312_dividendsOf"";
}
"
0xf1c91ad5d541567eb90a8a56373556a851a53e12.sol,Jancok,contract Jancok is StandardToken { string public name = ; string public symbol = ; uint8 public decimals = 18; function Jancok() public { totalSupply_ = 3000000 * 1 ether; balances[msg.sender] = totalSupply_; },0,"subgraph cluster_601_Jancok {
label=""Jancok"";
""601_batchTransferSingleValue"" [label=""batchTransferSingleValue""];
""601_Jancok"" [label=""Jancok""];
""601_batchTransfer"" [label=""batchTransfer""];
""601_batchTransfer"" -> ""601_transfer"";
""601_batchTransferSingleValue"" -> ""601_transfer"";
}
"
0x4103fd474fc5b0784f847efe7d219c7cc6dd2b4e.sol,MyOwnToken,"contract MyOwnToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public blacklist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 20000000000e18; uint256 public totalDistributed = 15000000000e18; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 150000e18; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_876_MyOwnToken {
label=""MyOwnToken"";
""876_allowance"" [label=""allowance""];
""876_withdraw"" [label=""withdraw""];
""876_getTokenBalance"" [label=""getTokenBalance""];
""876_finishDistribution"" [label=""finishDistribution""];
""876_MyOwnToken"" [label=""MyOwnToken""];
""876_transferOwnership"" [label=""transferOwnership""];
""876_getTokens"" [label=""getTokens""];
""876_fallback"" [label=""fallback""];
""876_distr"" [label=""distr""];
""876_transfer"" [label=""transfer""];
""876_approve"" [label=""approve""];
""876_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""876_balanceOf"" [label=""balanceOf""];
""876_burn"" [label=""burn""];
""876_transferFrom"" [label=""transferFrom""];
""876_finishDistribution"" -> ""876_onlyOwner"";
""876_burn"" -> ""876_onlyOwner"";
""876_finishDistribution"" -> ""876_canDistr"";
""876_MyOwnToken"" -> ""876_distr"";
""876_transferOwnership"" -> ""876_onlyOwner"";
""876_withdrawForeignTokens"" -> ""876_onlyOwner"";
""876_distr"" -> ""876_canDistr"";
""876_getTokens"" -> ""876_onlyWhitelist"";
""876_fallback"" -> ""876_getTokens"";
""876_transfer"" -> ""876_onlyPayloadSize"";
""876_getTokens"" -> ""876_canDistr"";
""876_getTokens"" -> ""876_distr"";
""876_transferFrom"" -> ""876_onlyPayloadSize"";
""876_withdraw"" -> ""876_onlyOwner"";
}
"
0x0460dcb54214fdf68302b4c733ad7ed827dd6592.sol,evequiz,contract evequiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },0,"subgraph cluster_148_evequiz {
label=""evequiz"";
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_New"" [label=""New""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x1ce95ce5aebe5beb20d69c308cd0e21797873c38.sol,Authorizable,contract Authorizable is Ownable { mapping(address => bool) public authorized; modifier onlyAuthorized() { require(authorized[msg.sender]); _; },0,"subgraph cluster_597_Authorizable {
label=""Authorizable"";
""597_removeAuthorized"" [label=""removeAuthorized""];
""597_addAuthorized"" [label=""addAuthorized""];
""597_removeAuthorized"" -> ""597_onlyOwner"";
""597_addAuthorized"" -> ""597_onlyOwner"";
}
"
0xc6689eb9a6d724b8d7b1d923ffd65b7005da1b62.sol,SECToken,"contract SECToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function SECToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",0,"subgraph cluster_736_SECToken {
label=""SECToken"";
""736_setPrices"" [label=""setPrices""];
""736_freezeAccount"" [label=""freezeAccount""];
""736_buy"" [label=""buy""];
""736_SECToken"" [label=""SECToken""];
""736__transfer"" [label=""_transfer""];
""736_mintToken"" [label=""mintToken""];
""736_sell"" [label=""sell""];
""736_setPrices"" -> ""736_onlyOwner"";
""736_freezeAccount"" -> ""736_onlyOwner"";
""736_mintToken"" -> ""736_onlyOwner"";
""736_SECToken"" -> ""736_TokenERC20"";
""736_buy"" -> ""736__transfer"";
""736_sell"" -> ""736__transfer"";
}
"
0x3a92bd396aef82af98ebc0aa9030d25a23b11c6b.sol,TokenboxToken,"contract TokenboxToken is Token { string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; address constant public foundationReserve = address(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF); address constant public icoAllocation = address(0x1111111111111111111111111111111111111111); address constant public preIcoAllocation = address(0x2222222222222222222222222222222222222222); uint256 constant public vestingDateEnd = 1543406400; uint256 public totalPicoUSD = 0; uint8 constant public usdDecimals = 12; address public multisig; bool public migrationCompleted = false; event InvestmentInETH(address investor, uint256 tokenPriceInWei, uint256 investedInWei, uint256 investedInPicoUsd, uint256 tokensNumber, uint256 originalTransactionHash); event InvestmentInBTC(address investor, uint256 tokenPriceInSatoshi, uint256 investedInSatoshi, uint256 investedInPicoUsd, uint256 tokensNumber, string btcAddress); event InvestmentInUSD(address investor, uint256 tokenPriceInPicoUsd, uint256 investedInPicoUsd, uint256 tokensNumber); event PresaleInvestment(address investor, uint256 investedInPicoUsd, uint256 tokensNumber); function TokenboxToken(address _multisig, uint256 _preIcoTokens) public { totalSupply = withDecimals(31000000, decimals); uint preIcoTokens = withDecimals(_preIcoTokens, decimals); balances[preIcoAllocation] = preIcoTokens; balances[foundationReserve] = 0; balances[icoAllocation] = div(mul(totalSupply, 75), 100) - preIcoTokens; multisig = _multisig; }",0,"subgraph cluster_1255_TokenboxToken {
label=""TokenboxToken"";
""1255_finaliseICO"" [label=""finaliseICO""];
""1255_wireInvestment"" [label=""wireInvestment""];
""1255_migrateTransfer"" [label=""migrateTransfer""];
""1255_allowToWithdrawFromReserve"" [label=""allowToWithdrawFromReserve""];
""1255_totalUSD"" [label=""totalUSD""];
""1255_transferFrom"" [label=""transferFrom""];
""1255_btcInvestment"" [label=""btcInvestment""];
""1255_transfer"" [label=""transfer""];
""1255_withdrawFromReserve"" [label=""withdrawFromReserve""];
""1255_changeMultisig"" [label=""changeMultisig""];
""1255_ethInvestment"" [label=""ethInvestment""];
""1255_usdInvestment"" [label=""usdInvestment""];
""1255_TokenboxToken"" [label=""TokenboxToken""];
""1255_preIcoInvestment"" [label=""preIcoInvestment""];
""1255_btcInvestment"" -> ""1255_div"";
""1255_wireInvestment"" -> ""1255_withDecimals"";
""1255_changeMultisig"" -> ""1255_onlyOwner"";
""1255_withdrawFromReserve"" -> ""1255_transferFrom"";
""1255_finaliseICO"" -> ""1255_mul"";
""1255_btcInvestment"" -> ""1255_withDecimals"";
""1255_finaliseICO"" -> ""1255_balanceOf"";
""1255_ethInvestment"" -> ""1255_mul"";
""1255_btcInvestment"" -> ""1255_usdInvestment"";
""1255_ethInvestment"" -> ""1255_migrationIsActive"";
""1255_btcInvestment"" -> ""1255_onlyOwner"";
""1255_btcInvestment"" -> ""1255_migrationIsActive"";
""1255_btcInvestment"" -> ""1255_pow"";
""1255_ethInvestment"" -> ""1255_usdInvestment"";
""1255_migrateTransfer"" -> ""1255_onlyOwner"";
""1255_TokenboxToken"" -> ""1255_div"";
""1255_totalUSD"" -> ""1255_div"";
""1255_preIcoInvestment"" -> ""1255_migrationIsActive"";
""1255_withdrawFromReserve"" -> ""1255_migrationIsCompleted"";
""1255_ethInvestment"" -> ""1255_onlyOwner"";
""1255_finaliseICO"" -> ""1255_div"";
""1255_TokenboxToken"" -> ""1255_mul"";
""1255_totalUSD"" -> ""1255_pow"";
""1255_transferFrom"" -> ""1255_transferFrom"";
""1255_allowToWithdrawFromReserve"" -> ""1255_balanceOf"";
""1255_allowToWithdrawFromReserve"" -> ""1255_migrationIsCompleted"";
""1255_wireInvestment"" -> ""1255_onlyOwner"";
""1255_migrateTransfer"" -> ""1255_migrationIsActive"";
""1255_transfer"" -> ""1255_transfer"";
""1255_finaliseICO"" -> ""1255_sub"";
""1255_wireInvestment"" -> ""1255_div"";
""1255_withdrawFromReserve"" -> ""1255_onlyOwner"";
""1255_finaliseICO"" -> ""1255_onlyOwner"";
""1255_wireInvestment"" -> ""1255_migrationIsActive"";
""1255_usdInvestment"" -> ""1255_add"";
""1255_preIcoInvestment"" -> ""1255_withDecimals"";
""1255_allowToWithdrawFromReserve"" -> ""1255_onlyOwner"";
""1255_transfer"" -> ""1255_migrationIsCompleted"";
""1255_TokenboxToken"" -> ""1255_withDecimals"";
""1255_transferFrom"" -> ""1255_migrationIsCompleted"";
""1255_preIcoInvestment"" -> ""1255_add"";
""1255_btcInvestment"" -> ""1255_mul"";
""1255_ethInvestment"" -> ""1255_pow"";
""1255_wireInvestment"" -> ""1255_usdInvestment"";
""1255_finaliseICO"" -> ""1255_migrationIsActive"";
""1255_ethInvestment"" -> ""1255_withDecimals"";
""1255_ethInvestment"" -> ""1255_div"";
""1255_preIcoInvestment"" -> ""1255_onlyOwner"";
}
"
0xa21c9a3ae47103b1fd1dfa04766c4d00c19e1ff6.sol,CryptoOscarsToken,"contract CryptoOscarsToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",0,"subgraph cluster_930_CryptoOscarsToken {
label=""CryptoOscarsToken"";
""930_approve"" [label=""approve""];
""930_balanceOf"" [label=""balanceOf""];
""930_transfer"" [label=""transfer""];
""930_ownerOf"" [label=""ownerOf""];
""930_payout"" [label=""payout""];
""930_takeOwnership"" [label=""takeOwnership""];
""930_totalSupply"" [label=""totalSupply""];
""930__createMovie"" [label=""_createMovie""];
""930_setCOO"" [label=""setCOO""];
""930_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""930_setCEO"" [label=""setCEO""];
""930__payout"" [label=""_payout""];
""930_tokensOfOwner"" [label=""tokensOfOwner""];
""930__addressNotNull"" [label=""_addressNotNull""];
""930_priceOf"" [label=""priceOf""];
""930_createContractMovie"" [label=""createContractMovie""];
""930__transfer"" [label=""_transfer""];
""930_name"" [label=""name""];
""930_purchase"" [label=""purchase""];
""930__approved"" [label=""_approved""];
""930_createPromoMovie"" [label=""createPromoMovie""];
""930_symbol"" [label=""symbol""];
""930__owns"" [label=""_owns""];
""930_transferFrom"" [label=""transferFrom""];
""930_getMovie"" [label=""getMovie""];
""930_implementsERC721"" [label=""implementsERC721""];
""930_transferFrom"" -> ""930__addressNotNull"";
""930_takeOwnership"" -> ""930__approved"";
""930_transferFrom"" -> ""930__approved"";
""930_createContractMovie"" -> ""930_onlyCOO"";
""930_setCEO"" -> ""930_onlyCEO"";
""930_purchase"" -> ""930__transfer"";
""930_purchase"" -> ""930__addressNotNull"";
""930_payout"" -> ""930_onlyCLevel"";
""930__createMovie"" -> ""930__transfer"";
""930_payout"" -> ""930__payout"";
""930_createContractMovie"" -> ""930__createMovie"";
""930_createPromoMovie"" -> ""930_onlyCOO"";
""930_tokensOfOwner"" -> ""930_balanceOf"";
""930_createPromoMovie"" -> ""930__createMovie"";
""930_takeOwnership"" -> ""930__addressNotNull"";
""930_setCOO"" -> ""930_onlyCEO"";
""930_transferFrom"" -> ""930__transfer"";
""930_transferFrom"" -> ""930__owns"";
""930_tokensOfOwner"" -> ""930_totalSupply"";
""930_transfer"" -> ""930__owns"";
""930_takeOwnership"" -> ""930__transfer"";
""930_approve"" -> ""930__owns"";
""930_transfer"" -> ""930__addressNotNull"";
""930_transfer"" -> ""930__transfer"";
}
"
0xfef5497bc53a69875e02ae5b14eeff668f09a729.sol,Infinity,"contract Infinity { using SafeMath for uint256; string public name = ; string public symbol = ; uint256 public initAmount; uint256 public amountProportion; uint256 public dividend; uint256 public jackpot; uint256 public jackpotProportion; uint256 public scientists; uint256 public promotionRatio; uint256 public duration; bool public activated = false; address public developerAddr; uint256 public rId; uint256 public sId; mapping (uint256 => Indatasets.Round) public round; mapping (uint256 => mapping (uint256 => Indatasets.Stage)) public stage; mapping (address => Indatasets.Player) public player; mapping (uint256 => mapping (address => uint256)) public playerRoundAmount; mapping (uint256 => mapping (address => uint256)) public playerRoundSid; mapping (uint256 => mapping (address => uint256)) public playerRoundwithdrawAmountFlag; mapping (uint256 => mapping (uint256 => mapping (address => uint256))) public playerStageAmount; mapping (uint256 => mapping (uint256 => mapping (address => uint256))) public playerStageAccAmount; uint256[] amountLimit = [0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]; constructor() public { developerAddr = msg.sender; }",0,"subgraph cluster_2138_Infinity {
label=""Infinity"";
""2138_getPlayerDividendByRound"" [label=""getPlayerDividendByRound""];
""2138_getPlayerDividendByStage"" [label=""getPlayerDividendByStage""];
""2138_buyPlayerDataRecord"" [label=""buyPlayerDataRecord""];
""2138_getPlayerJackpot"" [label=""getPlayerJackpot""];
""2138_buyRoundDataRecord"" [label=""buyRoundDataRecord""];
""2138_fallback"" [label=""fallback""];
""2138_withdraw"" [label=""withdraw""];
""2138_getPersonalStatus"" [label=""getPersonalStatus""];
""2138_buy"" [label=""buy""];
""2138_activate"" [label=""activate""];
""2138_initStage"" [label=""initStage""];
""2138_promotionDataRecord"" [label=""promotionDataRecord""];
""2138_constructor"" [label=""constructor""];
""2138_endStage"" [label=""endStage""];
""2138_limitAmount"" [label=""limitAmount""];
""2138_getPlayerDividend"" [label=""getPlayerDividend""];
""2138_buyAnalysis"" [label=""buyAnalysis""];
""2138_getValueInfo"" [label=""getValueInfo""];
""2138_getHeadInfo"" [label=""getHeadInfo""];
""2138_endRound"" [label=""endRound""];
""2138_buyStageDataRecord"" [label=""buyStageDataRecord""];
""2138_withdraw"" -> ""2138_getPlayerDividendByStage"";
""2138_buy"" -> ""2138_senderVerify"";
""2138_buyAnalysis"" -> ""2138_buyPlayerDataRecord"";
""2138_fallback"" -> ""2138_buyAnalysis"";
""2138_getValueInfo"" -> ""2138_getPlayerDividend"";
""2138_buyStageDataRecord"" -> ""2138_stageVerify"";
""2138_buyAnalysis"" -> ""2138_promotionDataRecord"";
""2138_fallback"" -> ""2138_senderVerify"";
""2138_buy"" -> ""2138_buyAnalysis"";
""2138_getPlayerDividendByStage"" -> ""2138_getPlayerJackpot"";
""2138_getPlayerDividend"" -> ""2138_getPlayerDividendByRound"";
""2138_fallback"" -> ""2138_amountVerify"";
""2138_buyAnalysis"" -> ""2138_buyRoundDataRecord"";
""2138_fallback"" -> ""2138_isActivated"";
""2138_withdraw"" -> ""2138_playerVerify"";
""2138_buyAnalysis"" -> ""2138_limitAmount"";
""2138_withdraw"" -> ""2138_isActivated"";
""2138_buy"" -> ""2138_isActivated"";
""2138_buy"" -> ""2138_amountVerify"";
""2138_withdraw"" -> ""2138_senderVerify"";
""2138_getPersonalStatus"" -> ""2138_getPlayerDividendByRound"";
""2138_getPlayerDividendByRound"" -> ""2138_getPlayerJackpot"";
""2138_buyAnalysis"" -> ""2138_initStage"";
""2138_activate"" -> ""2138_initStage"";
""2138_buyAnalysis"" -> ""2138_endStage"";
""2138_buyAnalysis"" -> ""2138_endRound"";
""2138_buyAnalysis"" -> ""2138_buyStageDataRecord"";
}
"
0x6d3543d4b11683847697f5b9a3a9d116cf13dedd.sol,Ledger,contract Ledger { uint public total; struct Entry { uint balance; address next; address prev; },0,"subgraph cluster_474_Ledger {
label=""Ledger"";
""474_balances"" [label=""balances""];
""474_balanceOf"" [label=""balanceOf""];
""474_size"" [label=""size""];
""474_total"" [label=""total""];
""474_subtract"" [label=""subtract""];
""474_add"" [label=""add""];
""474_constructor"" [label=""constructor""];
""474_balances"" -> ""474_size"";
""474_add"" -> ""474_fromOwner"";
""474_subtract"" -> ""474_fromOwner"";
}
"
0x52ae12abe5d8bd778bd5397f99ca900624cfadd4.sol,ContractRegistry,"contract ContractRegistry is IContractRegistry, Owned, Utils, ContractIds { struct RegistryItem { address contractAddress; uint256 nameIndex; bool isSet; }",0,"subgraph cluster_227_IContractRegistry {
label=""IContractRegistry"";
""227_getAddress"" [label=""getAddress""];
""227_addressOf"" [label=""addressOf""];
}
"
0xeea59c2f2e85272fc2f7e38d6b556f25ce8e7d68.sol,eKRW,"contract eKRW { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",0,"subgraph cluster_380_eKRW {
label=""eKRW"";
""380_burn"" [label=""burn""];
""380_transfer"" [label=""transfer""];
""380_constructor"" [label=""constructor""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_approve"" [label=""approve""];
""380__transfer"" [label=""_transfer""];
""380_burnFrom"" [label=""burnFrom""];
""380_transferFrom"" [label=""transferFrom""];
""380_transferFrom"" -> ""380__transfer"";
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
}
"
0x0e9a0fe317da6c0ca0e1600704fea16211dc2c06.sol,BeardCoin,"contract BeardCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000; balances[0xf005910014c962378B2f179dc0034452Ad3Dc812] = _totalSupply; emit Transfer(address(0), 0xf005910014c962378B2f179dc0034452Ad3Dc812, _totalSupply); }",0,"subgraph cluster_543_BeardCoin {
label=""BeardCoin"";
""543_totalSupply"" [label=""totalSupply""];
""543_constructor"" [label=""constructor""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x6c780af4877ca70c68114ddbd8fc7134868fd053.sol,_0xBitcoinToken,"contract _0xBitcoinToken is ERC20Interface, Owned { using SafeMath for uint; using ExtendedMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public latestDifficultyPeriodStarted; uint public epochCount; uint public _BLOCKS_PER_READJUSTMENT = 1024; uint public _MINIMUM_TARGET = 2**16; uint public _MAXIMUM_TARGET = 2**234; uint public miningTarget; bytes32 public challengeNumber; uint public rewardEra; uint public maxSupplyForEra; address public lastRewardTo; uint public lastRewardAmount; uint public lastRewardEthBlockNumber; bool locked = false; mapping(bytes32 => bytes32) solutionForChallenge; uint public tokensMinted; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber); function _0xBitcoinToken() public onlyOwner{ symbol = ; name = ; decimals = 8; _totalSupply = 21000000 * 10**uint(decimals); if(locked) revert(); locked = true; tokensMinted = 0; rewardEra = 0; maxSupplyForEra = _totalSupply.div(2); miningTarget = _MAXIMUM_TARGET; latestDifficultyPeriodStarted = block.number; _startNewMiningEpoch(); }",0,"subgraph cluster_1045__0xBitcoinToken {
label=""_0xBitcoinToken"";
""1045_fallback"" [label=""fallback""];
""1045_getChallengeNumber"" [label=""getChallengeNumber""];
""1045_getMiningDifficulty"" [label=""getMiningDifficulty""];
""1045__reAdjustDifficulty"" [label=""_reAdjustDifficulty""];
""1045_checkMintSolution"" [label=""checkMintSolution""];
""1045_getMintDigest"" [label=""getMintDigest""];
""1045_approve"" [label=""approve""];
""1045__0xBitcoinToken"" [label=""_0xBitcoinToken""];
""1045_allowance"" [label=""allowance""];
""1045_transfer"" [label=""transfer""];
""1045_getMiningTarget"" [label=""getMiningTarget""];
""1045_transferFrom"" [label=""transferFrom""];
""1045_mint"" [label=""mint""];
""1045_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""1045_balanceOf"" [label=""balanceOf""];
""1045__startNewMiningEpoch"" [label=""_startNewMiningEpoch""];
""1045_totalSupply"" [label=""totalSupply""];
""1045_approveAndCall"" [label=""approveAndCall""];
""1045_getMiningReward"" [label=""getMiningReward""];
""1045_transferAnyERC20Token"" -> ""1045_onlyOwner"";
""1045__startNewMiningEpoch"" -> ""1045_getMiningReward"";
""1045__0xBitcoinToken"" -> ""1045_onlyOwner"";
""1045_mint"" -> ""1045__startNewMiningEpoch"";
""1045__0xBitcoinToken"" -> ""1045__startNewMiningEpoch"";
""1045__startNewMiningEpoch"" -> ""1045__reAdjustDifficulty"";
""1045_mint"" -> ""1045_getMiningReward"";
}
"
0x3420894bf786866a09937b0369d5b4781870c21f.sol,LikeCoin,"contract LikeCoin is ERC20, HasOperator { using SafeMath for uint256; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public supply = 0; mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; address public crowdsaleAddr = 0x0; address public contributorPoolAddr = 0x0; uint256 public contributorPoolMintQuota = 0; address[] public creatorsPoolAddrs; mapping(address => bool) isCreatorsPool; uint256 public creatorsPoolMintQuota = 0; mapping(address => uint256) public lockedBalances; uint public unlockTime = 0; SignatureChecker public signatureChecker = SignatureChecker(0x0); bool public signatureCheckerFreezed = false; address public signatureOwner = 0x0; bool public allowDelegate = true; mapping (address => mapping (uint256 => bool)) public usedNonce; mapping (address => bool) public transferAndCallWhitelist; event Lock(address indexed _addr, uint256 _value); event SignatureCheckerChanged(address _newSignatureChecker); function LikeCoin(uint256 _initialSupply, address _signatureOwner, address _sigCheckerAddr) public { supply = _initialSupply; balances[owner] = _initialSupply; signatureOwner = _signatureOwner; signatureChecker = SignatureChecker(_sigCheckerAddr); Transfer(0x0, owner, _initialSupply); }",0,"subgraph cluster_1696_LikeCoin {
label=""LikeCoin"";
""1696_switchDelegate"" [label=""switchDelegate""];
""1696_transfer"" [label=""transfer""];
""1696__transfer"" [label=""_transfer""];
""1696_transferDelegated"" [label=""transferDelegated""];
""1696_registerContributorPool"" [label=""registerContributorPool""];
""1696_registerCreatorsPools"" [label=""registerCreatorsPools""];
""1696_transferAndCall"" [label=""transferAndCall""];
""1696_transferMultipleDelegated"" [label=""transferMultipleDelegated""];
""1696__transferMultiple"" [label=""_transferMultiple""];
""1696_allowance"" [label=""allowance""];
""1696_totalSupply"" [label=""totalSupply""];
""1696_setSignatureChecker"" [label=""setSignatureChecker""];
""1696_removeTransferAndCallWhitelist"" [label=""removeTransferAndCallWhitelist""];
""1696__tryUnlockBalance"" [label=""_tryUnlockBalance""];
""1696_transferAndCallDelegated"" [label=""transferAndCallDelegated""];
""1696_mintForCreatorsPool"" [label=""mintForCreatorsPool""];
""1696_freezeSignatureChecker"" [label=""freezeSignatureChecker""];
""1696_LikeCoin"" [label=""LikeCoin""];
""1696_addTransferAndCallWhitelist"" [label=""addTransferAndCallWhitelist""];
""1696_transferMultiple"" [label=""transferMultiple""];
""1696_approve"" [label=""approve""];
""1696_registerCrowdsales"" [label=""registerCrowdsales""];
""1696_transferAndLock"" [label=""transferAndLock""];
""1696_balanceOf"" [label=""balanceOf""];
""1696_mintForContributorPool"" [label=""mintForContributorPool""];
""1696__transferAndCall"" [label=""_transferAndCall""];
""1696__isContract"" [label=""_isContract""];
""1696_transferFrom"" [label=""transferFrom""];
""1696_burn"" [label=""burn""];
""1696_transferMultipleDelegated"" -> ""1696__transferMultiple"";
""1696_transferAndCall"" -> ""1696__transferAndCall"";
""1696__transfer"" -> ""1696__tryUnlockBalance"";
""1696__transferAndCall"" -> ""1696__isContract"";
""1696_transferDelegated"" -> ""1696__transfer"";
""1696_registerContributorPool"" -> ""1696__isContract"";
""1696_registerCrowdsales"" -> ""1696__isContract"";
""1696_transferMultiple"" -> ""1696__transferMultiple"";
""1696_removeTransferAndCallWhitelist"" -> ""1696_ownerOrOperator"";
""1696_registerCrowdsales"" -> ""1696_onlyOwner"";
""1696_registerCreatorsPools"" -> ""1696_onlyOwner"";
""1696_transferFrom"" -> ""1696__transfer"";
""1696_transferDelegated"" -> ""1696_isDelegated"";
""1696_registerCreatorsPools"" -> ""1696__isContract"";
""1696_transferMultipleDelegated"" -> ""1696_isDelegated"";
""1696_switchDelegate"" -> ""1696_ownerOrOperator"";
""1696__transferMultiple"" -> ""1696__tryUnlockBalance"";
""1696__transferAndCall"" -> ""1696__transfer"";
""1696_transfer"" -> ""1696__transfer"";
""1696_addTransferAndCallWhitelist"" -> ""1696__isContract"";
""1696_addTransferAndCallWhitelist"" -> ""1696_ownerOrOperator"";
""1696_transferAndCallDelegated"" -> ""1696__transferAndCall"";
""1696_registerContributorPool"" -> ""1696_onlyOwner"";
""1696_transferAndCallDelegated"" -> ""1696_isDelegated"";
}
"
0x55886834ca9bbca9f9e49ee188e878e094b7431c.sol,_0xAE86Token,"contract _0xAE86Token is ERC20Interface, Owned { using SafeMath for uint; using ExtendedMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public latestDifficultyPeriodStarted; uint public epochCount; uint public _BLOCKS_PER_READJUSTMENT = 100; uint public _MINIMUM_TARGET = 2**16; uint public _MAXIMUM_TARGET = 2**234; uint public miningTarget; bytes32 public challengeNumber; uint public rewardEra; uint public maxSupplyForEra; address public lastRewardTo; uint public lastRewardAmount; uint public lastRewardEthBlockNumber; bool locked = false; mapping(bytes32 => bytes32) solutionForChallenge; uint public tokensMinted; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber); function _0xAE86Token() public onlyOwner{ symbol = ; name = ; decimals = 8; _totalSupply = 86000000 * 10**uint(decimals); if(locked) revert(); locked = true; tokensMinted = 860000 * 10**uint(decimals); rewardEra = 0; maxSupplyForEra = _totalSupply.div(2); miningTarget = _MAXIMUM_TARGET; latestDifficultyPeriodStarted = block.number; _startNewMiningEpoch(); balances[owner] = tokensMinted; Transfer(address(0), owner, tokensMinted); }",0,"subgraph cluster_1067__0xAE86Token {
label=""_0xAE86Token"";
""1067__startNewMiningEpoch"" [label=""_startNewMiningEpoch""];
""1067_getMiningTarget"" [label=""getMiningTarget""];
""1067_getMiningReward"" [label=""getMiningReward""];
""1067_getMiningDifficulty"" [label=""getMiningDifficulty""];
""1067_approve"" [label=""approve""];
""1067_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""1067_totalSupply"" [label=""totalSupply""];
""1067_fallback"" [label=""fallback""];
""1067_getChallengeNumber"" [label=""getChallengeNumber""];
""1067_transferFrom"" [label=""transferFrom""];
""1067_balanceOf"" [label=""balanceOf""];
""1067_approveAndCall"" [label=""approveAndCall""];
""1067_transfer"" [label=""transfer""];
""1067__0xAE86Token"" [label=""_0xAE86Token""];
""1067_mint"" [label=""mint""];
""1067_checkMintSolution"" [label=""checkMintSolution""];
""1067__reAdjustDifficulty"" [label=""_reAdjustDifficulty""];
""1067_allowance"" [label=""allowance""];
""1067_getMintDigest"" [label=""getMintDigest""];
""1067_mint"" -> ""1067__startNewMiningEpoch"";
""1067__startNewMiningEpoch"" -> ""1067__reAdjustDifficulty"";
""1067__0xAE86Token"" -> ""1067__startNewMiningEpoch"";
""1067__startNewMiningEpoch"" -> ""1067_getMiningReward"";
""1067_mint"" -> ""1067_getMiningReward"";
""1067__0xAE86Token"" -> ""1067_onlyOwner"";
""1067_transferAnyERC20Token"" -> ""1067_onlyOwner"";
}
"
0x7680082f18c06ca693441e23461be79d15ff2c7d.sol,Houton,"contract Houton is BurnableToken, Ownable { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public constant initialSupply = 350000000 * (10 ** uint256(decimals)); function Houton () public { totalSupply = initialSupply; balances[msg.sender] = initialSupply; }",0,"subgraph cluster_612_Houton {
label=""Houton"";
""612_Houton"" [label=""Houton""];
}
"
0xa5fd1a791c4dfcaacc963d4f73c6ae5824149ea7.sol,CommonModifiers,contract CommonModifiers is CommonModifiersInterface { function isContract(address _targetAddress) internal constant returns (bool) { require (_targetAddress != address(0x0)); uint256 length; assembly { length := extcodesize(_targetAddress) },0,"subgraph cluster_23_CommonModifiersInterface {
label=""CommonModifiersInterface"";
""23_isContract"" [label=""isContract""];
}
"
0xf4c5304366a87ff14bbae4ef8ae252c2c1243d8d.sol,MeshCrowdsale,"contract MeshCrowdsale is CappedCrowdsale, Ownable { using SafeMath for uint256; mapping (address => uint256) public weiLimits; mapping (address => uint256) public weiContributions; mapping (address => bool) public whitelistingAgents; uint256 public minimumContribution; address[] public beneficiaries; uint256[] public beneficiaryAmounts; bool public mintingFinished; function MeshCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap, uint256 _minimumContribution, MeshToken _token, address[] _beneficiaries, uint256[] _beneficiaryAmounts) CappedCrowdsale(_cap) Crowdsale(_startTime, _endTime, _rate, _wallet, _token) public { require(_beneficiaries.length == _beneficiaryAmounts.length); beneficiaries = _beneficiaries; beneficiaryAmounts = _beneficiaryAmounts; mintingFinished = false; minimumContribution = _minimumContribution; }",0,"subgraph cluster_1609_MeshCrowdsale {
label=""MeshCrowdsale"";
""1609_setRate"" [label=""setRate""];
""1609_setWhitelistingAgent"" [label=""setWhitelistingAgent""];
""1609_MeshCrowdsale"" [label=""MeshCrowdsale""];
""1609_transferTokenOwnership"" [label=""transferTokenOwnership""];
""1609_setLimit"" [label=""setLimit""];
""1609_setMinimumContribution"" [label=""setMinimumContribution""];
""1609_validPurchase"" [label=""validPurchase""];
""1609_mintPredefinedTokens"" [label=""mintPredefinedTokens""];
""1609_setCap"" [label=""setCap""];
""1609_buyTokens"" [label=""buyTokens""];
""1609_setCap"" -> ""1609_onlyOwner"";
""1609_transferTokenOwnership"" -> ""1609_onlyOwner"";
""1609_MeshCrowdsale"" -> ""1609_Crowdsale"";
""1609_setMinimumContribution"" -> ""1609_onlyOwner"";
""1609_validPurchase"" -> ""1609_validPurchase"";
""1609_buyTokens"" -> ""1609_buyTokens"";
""1609_setWhitelistingAgent"" -> ""1609_onlyOwner"";
""1609_MeshCrowdsale"" -> ""1609_CappedCrowdsale"";
""1609_setRate"" -> ""1609_onlyOwner"";
""1609_mintPredefinedTokens"" -> ""1609_onlyOwner"";
}
"
0x70d28b8d6c19f3074a3edf3033f0defa7a4ce4df.sol,AceDice,contract AceDice { uint constant HOUSE_EDGE_PERCENT = 2; uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0004 ether; uint constant MIN_JACKPOT_BET = 0.1 ether; uint constant JACKPOT_MODULO = 1000; uint constant JACKPOT_FEE = 0.001 ether; uint constant MIN_BET = 0.01 ether; uint constant MAX_AMOUNT = 300000 ether; uint constant MAX_MASK_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO; uint constant BET_EXPIRATION_BLOCKS = 250; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; address public owner; address private nextOwner; uint public maxProfit; address public secretSigner; uint128 public jackpotSize; uint public todaysRewardSize; uint128 public lockedInBets; struct Bet { uint amount; uint8 rollUnder; uint40 placeBlockNumber; uint40 mask; address gambler; address inviter; },0,"subgraph cluster_2036_AceDice {
label=""AceDice"";
""2036_thisBalance"" [label=""thisBalance""];
""2036_settleBet"" [label=""settleBet""];
""2036_constructor"" [label=""constructor""];
""2036_withdrawFunds"" [label=""withdrawFunds""];
""2036_settleBetCommon"" [label=""settleBetCommon""];
""2036_settleBetUncleMerkleProof"" [label=""settleBetUncleMerkleProof""];
""2036_setSecretSigner"" [label=""setSecretSigner""];
""2036_requireCorrectReceipt"" [label=""requireCorrectReceipt""];
""2036_approveNextOwner"" [label=""approveNextOwner""];
""2036_getProfile"" [label=""getProfile""];
""2036_getSecretSigner"" [label=""getSecretSigner""];
""2036_payTodayReward"" [label=""payTodayReward""];
""2036_getMyAccuAmount"" [label=""getMyAccuAmount""];
""2036_placeBetWithInviter"" [label=""placeBetWithInviter""];
""2036_verifyMerkleProof"" [label=""verifyMerkleProof""];
""2036_acceptNextOwner"" [label=""acceptNextOwner""];
""2036_encodePacketCommit"" [label=""encodePacketCommit""];
""2036_setAvatarIndex"" [label=""setAvatarIndex""];
""2036_applyVIPLevel"" [label=""applyVIPLevel""];
""2036_placeBet"" [label=""placeBet""];
""2036_memcpy"" [label=""memcpy""];
""2036_setMaxProfit"" [label=""setMaxProfit""];
""2036_refundBet"" [label=""refundBet""];
""2036_setNickName"" [label=""setNickName""];
""2036_setCroupier"" [label=""setCroupier""];
""2036_kill"" [label=""kill""];
""2036_increaseJackpot"" [label=""increaseJackpot""];
""2036_sendFunds"" [label=""sendFunds""];
""2036_verifyCommit"" [label=""verifyCommit""];
""2036_fallback"" [label=""fallback""];
""2036_getDiceWinAmount"" [label=""getDiceWinAmount""];
""2036_placeBet"" -> ""2036_getDiceWinAmount"";
""2036_settleBetUncleMerkleProof"" -> ""2036_verifyMerkleProof"";
""2036_placeBet"" -> ""2036_verifyCommit"";
""2036_setSecretSigner"" -> ""2036_onlyOwner"";
""2036_settleBetUncleMerkleProof"" -> ""2036_requireCorrectReceipt"";
""2036_setMaxProfit"" -> ""2036_onlyOwner"";
""2036_verifyMerkleProof"" -> ""2036_memcpy"";
""2036_payTodayReward"" -> ""2036_onlyOwner"";
""2036_settleBetCommon"" -> ""2036_applyVIPLevel"";
""2036_increaseJackpot"" -> ""2036_onlyOwner"";
""2036_refundBet"" -> ""2036_sendFunds"";
""2036_settleBetCommon"" -> ""2036_getDiceWinAmount"";
""2036_verifyCommit"" -> ""2036_encodePacketCommit"";
""2036_settleBetCommon"" -> ""2036_sendFunds"";
""2036_approveNextOwner"" -> ""2036_onlyOwner"";
""2036_settleBetUncleMerkleProof"" -> ""2036_settleBetCommon"";
""2036_withdrawFunds"" -> ""2036_sendFunds"";
""2036_settleBetUncleMerkleProof"" -> ""2036_onlyCroupier"";
""2036_placeBetWithInviter"" -> ""2036_getDiceWinAmount"";
""2036_settleBet"" -> ""2036_settleBetCommon"";
""2036_getSecretSigner"" -> ""2036_onlyOwner"";
""2036_withdrawFunds"" -> ""2036_onlyOwner"";
""2036_refundBet"" -> ""2036_getDiceWinAmount"";
""2036_kill"" -> ""2036_onlyOwner"";
""2036_settleBet"" -> ""2036_onlyCroupier"";
""2036_placeBetWithInviter"" -> ""2036_verifyCommit"";
""2036_setCroupier"" -> ""2036_onlyOwner"";
}
"
0x6f1172311042b4ff399feba5a8f49f24c0f468e0.sol,sethToken,"contract sethToken is ERC20Interface, Owned, SafeMath { string public symbol = ; string public TokenOwner = ; string public name = ; uint8 public decimals = 12; uint public _totalSupply = 1000000000000 * 10 ** uint256(decimals); uint256 public price = 10000; bool public started = true; address public ceo = 0x46c6CDc24606eF220c38c12AF8D129026072F829; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; uint256 public weiRaised; function sethToken() public { balances[ceo] = _totalSupply; Transfer(address(0), ceo, _totalSupply); }",0,"subgraph cluster_703_sethToken {
label=""sethToken"";
""703_transfer"" [label=""transfer""];
""703_sethToken"" [label=""sethToken""];
""703_changeWallet"" [label=""changeWallet""];
""703_validPurchase"" [label=""validPurchase""];
""703_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""703_approveAndCall"" [label=""approveAndCall""];
""703_balanceOf"" [label=""balanceOf""];
""703_approve"" [label=""approve""];
""703_setPrice"" [label=""setPrice""];
""703_totalSupply"" [label=""totalSupply""];
""703_stopSale"" [label=""stopSale""];
""703_fallback"" [label=""fallback""];
""703_allowance"" [label=""allowance""];
""703_startSale"" [label=""startSale""];
""703_transferFrom"" [label=""transferFrom""];
""703_transferFrom"" -> ""703_safeAdd"";
""703_fallback"" -> ""703_safeAdd"";
""703_fallback"" -> ""703_validPurchase"";
""703_transferFrom"" -> ""703_safeSub"";
""703_fallback"" -> ""703_safeSub"";
""703_transfer"" -> ""703_safeSub"";
""703_transferAnyERC20Token"" -> ""703_onlyOwner"";
""703_transfer"" -> ""703_safeAdd"";
}
"
0x888888ecb41d5abb38bdd9c5e2f653f411c70765.sol,Lottery,"contract Lottery { using SafeMath for uint256; modifier withdrawRight(){ require(msg.sender == address(bankContract), ); _; }",0,"subgraph cluster_3390_Lottery {
label=""Lottery"";
""3390_jackpot"" [label=""jackpot""];
""3390_getPMul"" [label=""getPMul""];
""3390_addTime"" [label=""addTime""];
""3390_constructor"" [label=""constructor""];
""3390_getWeightRange"" [label=""getWeightRange""];
""3390_isWinSlot"" [label=""isWinSlot""];
""3390_getSlideEndTime"" [label=""getSlideEndTime""];
""3390_getSeed"" [label=""getSeed""];
""3390_isLastRound"" [label=""isLastRound""];
""3390_finalize"" [label=""finalize""];
""3390_distributeSlotBuy"" [label=""distributeSlotBuy""];
""3390_getEstKeyBlockNr"" [label=""getEstKeyBlockNr""];
""3390_getPSlotLength"" [label=""getPSlotLength""];
""3390_getKeyBlockNr"" [label=""getKeyBlockNr""];
""3390_getSlotLength"" [label=""getSlotLength""];
""3390_getCurEarlyIncomeByAddress"" [label=""getCurEarlyIncomeByAddress""];
""3390_getEarlyIncomeByAddressRound"" [label=""getEarlyIncomeByAddressRound""];
""3390_mintReward"" [label=""mintReward""];
""3390_getSlotInfo"" [label=""getSlotInfo""];
""3390_claimEarlyIncomebyAddressRound"" [label=""claimEarlyIncomebyAddressRound""];
""3390_initRound"" [label=""initRound""];
""3390_getTMul"" [label=""getTMul""];
""3390_getTotalPot"" [label=""getTotalPot""];
""3390_claimEarlyIncomebyAddress"" [label=""claimEarlyIncomebyAddress""];
""3390_getTicketSumToRound"" [label=""getTicketSumToRound""];
""3390_pushToPot"" [label=""pushToPot""];
""3390_mintSlot"" [label=""mintSlot""];
""3390_genEstKeyBlockNr"" [label=""genEstKeyBlockNr""];
""3390_getCurRoundId"" [label=""getCurRoundId""];
""3390_buyFor"" [label=""buyFor""];
""3390_getSlotId"" [label=""getSlotId""];
""3390_getInvestedSumToRound"" [label=""getInvestedSumToRound""];
""3390_sBountyClaim"" [label=""sBountyClaim""];
""3390_getPTicketSumByRound"" [label=""getPTicketSumByRound""];
""3390_updateInvested"" [label=""updateInvested""];
""3390_getEarlyIncomeByAddress"" [label=""getEarlyIncomeByAddress""];
""3390_getTPrice"" [label=""getTPrice""];
""3390_getPInvestedSumByRound"" [label=""getPInvestedSumByRound""];
""3390_getFixedEndTime"" [label=""getFixedEndTime""];
""3390_addPot"" [label=""addPot""];
""3390_getWinSlot"" [label=""getWinSlot""];
""3390_endRound"" [label=""endRound""];
""3390_activeFirstRound"" [label=""activeFirstRound""];
""3390_cashoutable"" [label=""cashoutable""];
""3390_goNext"" [label=""goNext""];
""3390_getBonusTickets"" [label=""getBonusTickets""];
""3390_finalizeable"" [label=""finalizeable""];
""3390_checkpoint"" [label=""checkpoint""];
""3390_updateTicketSum"" [label=""updateTicketSum""];
""3390_buy"" [label=""buy""];
""3390_withdrawFor"" [label=""withdrawFor""];
""3390_updateEarlyIncome"" [label=""updateEarlyIncome""];
""3390_getCurEarlyIncomeByAddressRound"" [label=""getCurEarlyIncomeByAddressRound""];
""3390_joinNetwork"" [label=""joinNetwork""];
""3390_getRewardBalance"" [label=""getRewardBalance""];
""3390_setLastRound"" [label=""setLastRound""];
""3390_updateMulti"" [label=""updateMulti""];
""3390_checkpoint"" -> ""3390_genEstKeyBlockNr"";
""3390_mintSlot"" -> ""3390_updateTicketSum"";
""3390_sBountyClaim"" -> ""3390_mintSlot"";
""3390_finalize"" -> ""3390_finalizeable"";
""3390_finalize"" -> ""3390_endRound"";
""3390_endRound"" -> ""3390_getKeyBlockNr"";
""3390_endRound"" -> ""3390_getWinSlot"";
""3390_buyFor"" -> ""3390_distributeSlotBuy"";
""3390_getWinSlot"" -> ""3390_isWinSlot"";
""3390_activeFirstRound"" -> ""3390_onlyDevTeam"";
""3390_initRound"" -> ""3390_isLastRound"";
""3390_initRound"" -> ""3390_checkpoint"";
""3390_initRound"" -> ""3390_goNext"";
""3390_buyFor"" -> ""3390_addTime"";
""3390_claimEarlyIncomebyAddress"" -> ""3390_claimEarlyIncomebyAddressRound"";
""3390_sBountyClaim"" -> ""3390_notStarted"";
""3390_endRound"" -> ""3390_getSeed"";
""3390_getEarlyIncomeByAddress"" -> ""3390_getEarlyIncomeByAddressRound"";
""3390_distributeSlotBuy"" -> ""3390_addPot"";
""3390_jackpot"" -> ""3390_getSeed"";
""3390_buyFor"" -> ""3390_genEstKeyBlockNr"";
""3390_jackpot"" -> ""3390_mintReward"";
""3390_endRound"" -> ""3390_mintReward"";
""3390_buyFor"" -> ""3390_updateMulti"";
""3390_claimEarlyIncomebyAddressRound"" -> ""3390_getCurEarlyIncomeByAddressRound"";
""3390_setLastRound"" -> ""3390_onlyDevTeam"";
""3390_activeFirstRound"" -> ""3390_initRound"";
""3390_finalize"" -> ""3390_mintSlot"";
""3390_getCurEarlyIncomeByAddressRound"" -> ""3390_getEarlyIncomeByAddressRound"";
""3390_buyFor"" -> ""3390_updateEarlyIncome"";
""3390_buyFor"" -> ""3390_buyable"";
""3390_buyFor"" -> ""3390_getBonusTickets"";
""3390_buy"" -> ""3390_buyFor"";
""3390_initRound"" -> ""3390_updateMulti"";
""3390_buyFor"" -> ""3390_updateInvested"";
""3390_withdrawFor"" -> ""3390_withdrawRight"";
""3390_withdrawFor"" -> ""3390_claimEarlyIncomebyAddress"";
""3390_finalize"" -> ""3390_initRound"";
""3390_activeFirstRound"" -> ""3390_getWeightRange"";
""3390_cashoutable"" -> ""3390_getPTicketSumByRound"";
""3390_getCurEarlyIncomeByAddress"" -> ""3390_getCurEarlyIncomeByAddressRound"";
""3390_buyFor"" -> ""3390_jackpot"";
""3390_finalizeable"" -> ""3390_getEstKeyBlockNr"";
""3390_jackpot"" -> ""3390_getKeyBlockNr"";
""3390_pushToPot"" -> ""3390_addPot"";
""3390_buyFor"" -> ""3390_mintSlot"";
""3390_buyFor"" -> ""3390_getTMul"";
}
"
0xbe96a69b2836201d9cbad2c485681dc7a4cc39b9.sol,DailyRoiCardGame,contract DailyRoiCardGame { modifier onlyOwner(){ require(msg.sender == dev); _; },0,"subgraph cluster_1106_DailyRoiCardGame {
label=""DailyRoiCardGame"";
""1106_addNewcard"" [label=""addNewcard""];
""1106_getMyBalance"" [label=""getMyBalance""];
""1106_gettotalCardValue"" [label=""gettotalCardValue""];
""1106_setSymbol"" [label=""setSymbol""];
""1106_setName"" [label=""setName""];
""1106_addtotalCardValue"" [label=""addtotalCardValue""];
""1106_withdraw"" [label=""withdraw""];
""1106_constructor"" [label=""constructor""];
""1106_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""1106_getOwnerBalance"" [label=""getOwnerBalance""];
""1106_distributeDivs"" [label=""distributeDivs""];
""1106_getcardPrice"" [label=""getcardPrice""];
""1106_gettotalCards"" [label=""gettotalCards""];
""1106_setAllowReferral"" [label=""setAllowReferral""];
""1106_gettotalCardDivs"" [label=""gettotalCardDivs""];
""1106_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1106_buy"" [label=""buy""];
""1106_transfer"" [label=""transfer""];
""1106_getcardOwner"" [label=""getcardOwner""];
""1106_setcardPrice"" [label=""setcardPrice""];
""1106_setAllowReferral"" -> ""1106_onlyOwner"";
""1106_addNewcard"" -> ""1106_onlyOwner"";
""1106_setcardPrice"" -> ""1106_onlyOwner"";
""1106_buy"" -> ""1106_senderVerify"";
""1106_setName"" -> ""1106_onlyOwner"";
""1106_setSymbol"" -> ""1106_onlyOwner"";
""1106_buy"" -> ""1106_distributeDivs"";
""1106_buy"" -> ""1106_addtotalCardValue"";
}
"
0x19055b944806fba2717dc694cf0173a1eb2d1604.sol,C3Wallet,"contract C3Wallet is ERC223, Ownable { using SafeMath for uint; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 5e10 * 1e8; mapping (address => bool) public frozenAccount; mapping (address => uint256) public unlockUnixTime; constructor() public { balances[msg.sender] = totalSupply; }",0,"subgraph cluster_1523_C3Wallet {
label=""C3Wallet"";
""1523_balanceOf"" [label=""balanceOf""];
""1523_decimals"" [label=""decimals""];
""1523_unfreezeAccounts"" [label=""unfreezeAccounts""];
""1523_transfer"" [label=""transfer""];
""1523_symbol"" [label=""symbol""];
""1523_fallback"" [label=""fallback""];
""1523_lockAccounts"" [label=""lockAccounts""];
""1523_name"" [label=""name""];
""1523_totalSupply"" [label=""totalSupply""];
""1523_unlockAccounts"" [label=""unlockAccounts""];
""1523_approve"" [label=""approve""];
""1523_isContract"" [label=""isContract""];
""1523_transferFrom"" [label=""transferFrom""];
""1523_allowance"" [label=""allowance""];
""1523_constructor"" [label=""constructor""];
""1523_freezeAccounts"" [label=""freezeAccounts""];
""1523_transferToContract"" [label=""transferToContract""];
""1523_burn"" [label=""burn""];
""1523_multiTransfer"" [label=""multiTransfer""];
""1523_transferToAddress"" [label=""transferToAddress""];
""1523_lockAccounts"" -> ""1523_onlyOwner"";
""1523_freezeAccounts"" -> ""1523_onlyOwner"";
""1523_unlockAccounts"" -> ""1523_onlyOwner"";
""1523_transfer"" -> ""1523_isContract"";
""1523_transfer"" -> ""1523_transferToAddress"";
""1523_unfreezeAccounts"" -> ""1523_onlyOwner"";
""1523_burn"" -> ""1523_onlyOwner"";
""1523_transfer"" -> ""1523_transferToContract"";
}
"
0xf213d198b68b10654c63a9ed05a045e1d4a50f9f.sol,FootballerBase,"contract FootballerBase is FootballerAccessControl { using SafeMath for uint256; event Create(address owner, uint footballerId); event Transfer(address _from, address _to, uint256 tokenId); uint private randNonce = 0; struct footballer { uint price; uint defend; uint attack; uint quality; }",0,"subgraph cluster_420_FootballerBase {
label=""FootballerBase"";
""420_createFootballer"" [label=""createFootballer""];
""420__createFootballerStar"" [label=""_createFootballerStar""];
""420__randMod"" [label=""_randMod""];
""420__transfer"" [label=""_transfer""];
""420__createFootballerStar"" -> ""420_onlyManager"";
""420_createFootballer"" -> ""420__randMod"";
}
"
0x5b366f606dab2a1e221da2588f62bfe454760e78.sol,CryptoRichmanToken,contract CryptoRichmanToken { modifier onlyBagholders { require(myTokens() > 0); _; },0,"subgraph cluster_1253_CryptoRichmanToken {
label=""CryptoRichmanToken"";
""1253_dividendsOf"" [label=""dividendsOf""];
""1253_myTokens"" [label=""myTokens""];
""1253_sell"" [label=""sell""];
""1253_sqrt"" [label=""sqrt""];
""1253_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1253_totalSupply"" [label=""totalSupply""];
""1253_fallback"" [label=""fallback""];
""1253_transfer"" [label=""transfer""];
""1253_myDividends"" [label=""myDividends""];
""1253_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1253_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1253_purchaseTokens"" [label=""purchaseTokens""];
""1253_buyPrice"" [label=""buyPrice""];
""1253_exit"" [label=""exit""];
""1253_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1253_sellPrice"" [label=""sellPrice""];
""1253_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1253_reinvest"" [label=""reinvest""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_withdraw"" [label=""withdraw""];
""1253_buy"" [label=""buy""];
""1253_sell"" -> ""1253_buyPrice"";
""1253_exit"" -> ""1253_withdraw"";
""1253_reinvest"" -> ""1253_purchaseTokens"";
""1253_myTokens"" -> ""1253_balanceOf"";
""1253_exit"" -> ""1253_sell"";
""1253_purchaseTokens"" -> ""1253_ethereumToTokens_"";
""1253_calculateEthereumReceived"" -> ""1253_tokensToEthereum_"";
""1253_sell"" -> ""1253_tokensToEthereum_"";
""1253_transfer"" -> ""1253_onlyBagholders"";
""1253_transfer"" -> ""1253_tokensToEthereum_"";
""1253_withdraw"" -> ""1253_onlyStronghands"";
""1253_buy"" -> ""1253_purchaseTokens"";
""1253_reinvest"" -> ""1253_myDividends"";
""1253_purchaseTokens"" -> ""1253_buyPrice"";
""1253_sellPrice"" -> ""1253_tokensToEthereum_"";
""1253_ethereumToTokens_"" -> ""1253_sqrt"";
""1253_calculateTokensReceived"" -> ""1253_ethereumToTokens_"";
""1253_withdraw"" -> ""1253_myDividends"";
""1253_transfer"" -> ""1253_myDividends"";
""1253_fallback"" -> ""1253_purchaseTokens"";
""1253_transfer"" -> ""1253_withdraw"";
""1253_reinvest"" -> ""1253_onlyStronghands"";
""1253_myDividends"" -> ""1253_dividendsOf"";
""1253_sell"" -> ""1253_onlyBagholders"";
""1253_buyPrice"" -> ""1253_tokensToEthereum_"";
}
"
0xc37a236c1b27b7a3d8b8d57b9c770b70d8ccc566.sol,BurnableToken,"contract BurnableToken is BasicToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { _burn(msg.sender, _value); }",0,"subgraph cluster_495_BurnableToken {
label=""BurnableToken"";
""495__burn"" [label=""_burn""];
""495_burn"" [label=""burn""];
""495_burn"" -> ""495__burn"";
}
"
0xeb5aeb4b5e68896d59f17cfea0fcfafd5e1a5f1c.sol,GNBToken,contract GNBToken is ERC20{ using SafeMath for uint; address public platformAdmin; mapping(address=>uint256) public tokenRateArray; mapping(address=>uint256) public tokenRateSignArray; mapping(address=>bool) public tokenExchangeLock; uint256 public startTime=1575216000; uint256 public endTime=1581696000; mapping (address => bool) public frozenAccount; mapping (address => uint256) public frozenTimestamp; modifier onlyOwner() { require(msg.sender == platformAdmin); _; },0,"subgraph cluster_1542_GNBToken {
label=""GNBToken"";
""1542_transfer"" [label=""transfer""];
""1542_getTokenAllowance"" [label=""getTokenAllowance""];
""1542_setTokenExchangeLock"" [label=""setTokenExchangeLock""];
""1542_freezeWithTimestamp"" [label=""freezeWithTimestamp""];
""1542_approve"" [label=""approve""];
""1542_multiFreeze"" [label=""multiFreeze""];
""1542_getTokenBalance"" [label=""getTokenBalance""];
""1542_approveErc"" [label=""approveErc""];
""1542_multiWithdrawToken"" [label=""multiWithdrawToken""];
""1542_changeAdmin"" [label=""changeAdmin""];
""1542_getEthBalance"" [label=""getEthBalance""];
""1542_multiTransfer"" [label=""multiTransfer""];
""1542_transferFrom"" [label=""transferFrom""];
""1542_setTokenRate"" [label=""setTokenRate""];
""1542_freeze"" [label=""freeze""];
""1542_balanceOf"" [label=""balanceOf""];
""1542_multiFreezeWithTimestamp"" [label=""multiFreezeWithTimestamp""];
""1542_exChangeToken"" [label=""exChangeToken""];
""1542_setTokenArrRate"" [label=""setTokenArrRate""];
""1542_generateToken"" [label=""generateToken""];
""1542_getFrozenAccount"" [label=""getFrozenAccount""];
""1542_multiWithdraw"" [label=""multiWithdraw""];
""1542_allowance"" [label=""allowance""];
""1542_totalSupply"" [label=""totalSupply""];
""1542_getTokenDecimals"" [label=""getTokenDecimals""];
""1542_getFrozenTimestamp"" [label=""getFrozenTimestamp""];
""1542_constructor"" [label=""constructor""];
""1542_approveErc"" -> ""1542_onlyOwner"";
""1542_setTokenArrRate"" -> ""1542_onlyOwner"";
""1542_multiFreeze"" -> ""1542_onlyOwner"";
""1542_generateToken"" -> ""1542_onlyOwner"";
""1542_setTokenExchangeLock"" -> ""1542_onlyOwner"";
""1542_freezeWithTimestamp"" -> ""1542_onlyOwner"";
""1542_multiWithdraw"" -> ""1542_onlyOwner"";
""1542_freeze"" -> ""1542_onlyOwner"";
""1542_multiFreezeWithTimestamp"" -> ""1542_onlyOwner"";
""1542_changeAdmin"" -> ""1542_onlyOwner"";
""1542_multiWithdrawToken"" -> ""1542_onlyOwner"";
""1542_setTokenRate"" -> ""1542_onlyOwner"";
}
"
0x1f8e87aa0d8255a503d9f009f2e41a799b98706c.sol,AddressBook,contract AddressBook { struct AddressRelations { SlaveDictionary slaves; bool hasValue; },0,"subgraph cluster_602_AddressBook {
label=""AddressBook"";
""602_getMasterWallet"" [label=""getMasterWallet""];
""602_changeLinkedAddress"" [label=""changeLinkedAddress""];
""602_unLinkFromMasterWalletInternal"" [label=""unLinkFromMasterWalletInternal""];
""602_changeMasterAddress"" [label=""changeMasterAddress""];
""602_isLinkedWallet"" [label=""isLinkedWallet""];
""602_getLinkedWallets"" [label=""getLinkedWallets""];
""602_isMasterWallet"" [label=""isMasterWallet""];
""602_applyChangeWalletAddress"" [label=""applyChangeWalletAddress""];
""602_linkToMasterWalletInternal"" [label=""linkToMasterWalletInternal""];
""602_getOrAddMasterWallet"" [label=""getOrAddMasterWallet""];
""602_AddressBook"" [label=""AddressBook""];
""602_addMasterWallet"" [label=""addMasterWallet""];
""602_getOrAddMasterWallet"" -> ""602_getMasterWallet"";
""602_linkToMasterWalletInternal"" -> ""602_isMasterWallet"";
""602_applyChangeWalletAddress"" -> ""602_changeLinkedAddress"";
""602_getMasterWallet"" -> ""602_isMasterWallet"";
""602_linkToMasterWalletInternal"" -> ""602_isLinkedWallet"";
""602_applyChangeWalletAddress"" -> ""602_changeMasterAddress"";
""602_unLinkFromMasterWalletInternal"" -> ""602_getMasterWallet"";
""602_getOrAddMasterWallet"" -> ""602_addMasterWallet"";
""602_applyChangeWalletAddress"" -> ""602_isLinkedWallet"";
""602_applyChangeWalletAddress"" -> ""602_isMasterWallet"";
}
"
0x4d0528598f916fd1d8dc80e5f54a8feedcfd4b18.sol,Atoshi,"contract Atoshi is EIP20Interface { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function Atoshi( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",0,"subgraph cluster_289_Atoshi {
label=""Atoshi"";
""289_Atoshi"" [label=""Atoshi""];
""289_balanceOf"" [label=""balanceOf""];
""289_transfer"" [label=""transfer""];
""289_allowance"" [label=""allowance""];
""289_approve"" [label=""approve""];
""289_transferFrom"" [label=""transferFrom""];
}
"
0x284863ea96b1d8b28b7914fa57908f7502fdc273.sol,LETOCoins,"contract LETOCoins is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 11000000000e8; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 10000000e8; uint256 public constant minContribution = 1 ether / 10; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",0,"subgraph cluster_950_LETOCoins {
label=""LETOCoins"";
""950_approve"" [label=""approve""];
""950_burn"" [label=""burn""];
""950_doAirdrop"" [label=""doAirdrop""];
""950_allowance"" [label=""allowance""];
""950_finishDistribution"" [label=""finishDistribution""];
""950_distr"" [label=""distr""];
""950_balanceOf"" [label=""balanceOf""];
""950_withdraw"" [label=""withdraw""];
""950_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""950_fallback"" [label=""fallback""];
""950_transferFrom"" [label=""transferFrom""];
""950_LETOCoins"" [label=""LETOCoins""];
""950_withdrawAltcoinTokens"" [label=""withdrawAltcoinTokens""];
""950_updateTokensPerEth"" [label=""updateTokensPerEth""];
""950_getTokenBalance"" [label=""getTokenBalance""];
""950_getTokens"" [label=""getTokens""];
""950_transfer"" [label=""transfer""];
""950_transferOwnership"" [label=""transferOwnership""];
""950_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""950_finishDistribution"" -> ""950_onlyOwner"";
""950_distr"" -> ""950_canDistr"";
""950_adminClaimAirdropMultiple"" -> ""950_doAirdrop"";
""950_fallback"" -> ""950_getTokens"";
""950_updateTokensPerEth"" -> ""950_onlyOwner"";
""950_transferFrom"" -> ""950_onlyPayloadSize"";
""950_getTokens"" -> ""950_canDistr"";
""950_getTokens"" -> ""950_distr"";
""950_transfer"" -> ""950_onlyPayloadSize"";
""950_burn"" -> ""950_onlyOwner"";
""950_withdrawAltcoinTokens"" -> ""950_onlyOwner"";
""950_adminClaimAirdrop"" -> ""950_onlyOwner"";
""950_adminClaimAirdropMultiple"" -> ""950_onlyOwner"";
""950_LETOCoins"" -> ""950_distr"";
""950_transferOwnership"" -> ""950_onlyOwner"";
""950_withdraw"" -> ""950_onlyOwner"";
""950_adminClaimAirdrop"" -> ""950_doAirdrop"";
""950_finishDistribution"" -> ""950_canDistr"";
}
"
0x52ae0ca384dad6f74ead0cb595942c28b980c99c.sol,LynchpinToken,contract LynchpinToken is ERC20 { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; uint public totalSupply = 5000000 * (10 ** uint(decimals)); address public owner = 0xAc983022185b95eF2B2C7219143483BD0C65Ecda; mapping (address => uint) public balanceOf; mapping (address => mapping (address => uint)) public allowance; constructor() public { balanceOf[owner] = totalSupply; },0,"subgraph cluster_404_LynchpinToken {
label=""LynchpinToken"";
""404_balanceOf"" [label=""balanceOf""];
""404_approve"" [label=""approve""];
""404_constructor"" [label=""constructor""];
""404_fallback"" [label=""fallback""];
""404__transfer"" [label=""_transfer""];
""404_transfer"" [label=""transfer""];
""404_transferFrom"" [label=""transferFrom""];
""404_totalSupply"" [label=""totalSupply""];
""404_allowance"" [label=""allowance""];
""404_transferFrom"" -> ""404__transfer"";
""404_transfer"" -> ""404__transfer"";
}
"
0x1cb82f4228719a53a6f5fc98de74f12eebdc31ed.sol,Fusionchain,"contract Fusionchain is FusionchainInterface, FusionchainOwned, FusionchainSafeMath { string public symbol; string public name; uint public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Fusionchain () public { symbol = ; name = ; decimals = 7; _totalSupply = 7300000000*10**decimals; balances[0xAfa5b5e0C7cd2E1882e710B63EAb0D6f8cbDbf43] = _totalSupply; emit Transfer(address(0), 0xAfa5b5e0C7cd2E1882e710B63EAb0D6f8cbDbf43, _totalSupply); }",0,"subgraph cluster_96_FusionchainSafeMath {
label=""FusionchainSafeMath"";
""96_safeAdd"" [label=""safeAdd""];
""96_safeMul"" [label=""safeMul""];
""96_safeDiv"" [label=""safeDiv""];
""96_safeSub"" [label=""safeSub""];
}
"
0xec987914ade432ce9806f418787a4ed0b0e77000.sol,LuckyDice,"contract LuckyDice is DSSafeAddSub { modifier betIsValid(uint _betSize, uint minRollLimit, uint maxRollLimit) { if (_betSize < minBet || maxRollLimit < minNumber || minRollLimit > maxNumber || maxRollLimit - 1 <= minRollLimit) throw; _; }",0,"subgraph cluster_1265_LuckyDice {
label=""LuckyDice"";
""1265_ownerSetMaxProfit"" [label=""ownerSetMaxProfit""];
""1265_ownerTransferEther"" [label=""ownerTransferEther""];
""1265_ownerRefundPlayer"" [label=""ownerRefundPlayer""];
""1265_ownerSetCasino"" [label=""ownerSetCasino""];
""1265_playerMakeBet"" [label=""playerMakeBet""];
""1265_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""1265_getToJackpot"" [label=""getToJackpot""];
""1265_playerWithdrawPendingTransactions"" [label=""playerWithdrawPendingTransactions""];
""1265_withdraw"" [label=""withdraw""];
""1265_ownerSetJpMinBet"" [label=""ownerSetJpMinBet""];
""1265_playerGetPendingTxByAddress"" [label=""playerGetPendingTxByAddress""];
""1265_getFullProfit"" [label=""getFullProfit""];
""1265_LuckyDice"" [label=""LuckyDice""];
""1265_ownerChangeOwner"" [label=""ownerChangeOwner""];
""1265_ownerSetHouseEdge"" [label=""ownerSetHouseEdge""];
""1265_ownerkill"" [label=""ownerkill""];
""1265_ownerSetMinBet"" [label=""ownerSetMinBet""];
""1265_ownerPausePayouts"" [label=""ownerPausePayouts""];
""1265_ownerPauseGame"" [label=""ownerPauseGame""];
""1265_getProfit"" [label=""getProfit""];
""1265_fallback"" [label=""fallback""];
""1265_ownerTransferEther"" -> ""1265_safeSub"";
""1265_playerMakeBet"" -> ""1265_getProfit"";
""1265_playerMakeBet"" -> ""1265_gameIsActive"";
""1265_playerMakeBet"" -> ""1265_getFullProfit"";
""1265_fallback"" -> ""1265_safeAdd"";
""1265_playerMakeBet"" -> ""1265_getToJackpot"";
""1265_ownerSetMinBet"" -> ""1265_onlyOwner"";
""1265_playerMakeBet"" -> ""1265_safeSub"";
""1265_withdraw"" -> ""1265_payoutsAreActive"";
""1265_ownerRefundPlayer"" -> ""1265_safeSub"";
""1265_getFullProfit"" -> ""1265_safeSub"";
""1265_ownerSetMaxProfit"" -> ""1265_onlyOwner"";
""1265_ownerPausePayouts"" -> ""1265_onlyOwner"";
""1265_ownerSetJpMinBet"" -> ""1265_onlyOwner"";
""1265_withdraw"" -> ""1265_safeSub"";
""1265_ownerUpdateContractBalance"" -> ""1265_onlyOwner"";
""1265_LuckyDice"" -> ""1265_ownerSetHouseEdge"";
""1265_withdraw"" -> ""1265_safeAdd"";
""1265_playerMakeBet"" -> ""1265_safeAdd"";
""1265_fallback"" -> ""1265_onlyOwner"";
""1265_ownerSetCasino"" -> ""1265_onlyOwner"";
""1265_ownerkill"" -> ""1265_onlyOwner"";
""1265_LuckyDice"" -> ""1265_ownerSetMinBet"";
""1265_ownerRefundPlayer"" -> ""1265_onlyOwner"";
""1265_playerWithdrawPendingTransactions"" -> ""1265_payoutsAreActive"";
""1265_ownerTransferEther"" -> ""1265_onlyOwner"";
""1265_ownerPauseGame"" -> ""1265_onlyOwner"";
""1265_ownerSetHouseEdge"" -> ""1265_onlyOwner"";
""1265_playerMakeBet"" -> ""1265_betIsValid"";
""1265_ownerChangeOwner"" -> ""1265_onlyOwner"";
""1265_LuckyDice"" -> ""1265_ownerSetMaxProfit"";
}
"
0x8ac77770de6a3b690e9f3ec368fb64ba3c112cdd.sol,CrowdToken,contract CrowdToken is IERC20 { using SafeMath for uint256; uint private _totalSupply = 10000000; string public constant symbol =; string public constant name = ; uint8 public constant decimals = 3; uint256 public constant RATE = 350; address public owner; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; function () payable { createTokens(); },0,"subgraph cluster_502_CrowdToken {
label=""CrowdToken"";
""502_fallback"" [label=""fallback""];
""502_allowance"" [label=""allowance""];
""502_bytes32ToString"" [label=""bytes32ToString""];
""502_transfer"" [label=""transfer""];
""502_mul"" [label=""mul""];
""502_createTokens"" [label=""createTokens""];
""502_approve"" [label=""approve""];
""502_transferFrom"" [label=""transferFrom""];
""502_CrowdToken"" [label=""CrowdToken""];
""502_balanceOf"" [label=""balanceOf""];
""502_totalSupply"" [label=""totalSupply""];
""502_fallback"" -> ""502_createTokens"";
}
"
0xec2b3c865c35b725c4787cedd0ed09276da31ada.sol,S26ICO,"contract S26ICO { using SafeMath for uint; enum IcoState {Running, Paused, Failed, Finished}",0,"subgraph cluster_2304_S26ICO {
label=""S26ICO"";
""2304_successICO"" [label=""successICO""];
""2304_hasFinished"" [label=""hasFinished""];
""2304_fallback"" [label=""fallback""];
""2304_failICO"" [label=""failICO""];
""2304_setRobot"" [label=""setRobot""];
""2304_isReachedLimit"" [label=""isReachedLimit""];
""2304_addToStat"" [label=""addToStat""];
""2304_setRate"" [label=""setRate""];
""2304_percent"" [label=""percent""];
""2304_min"" [label=""min""];
""2304_manageStatus"" [label=""manageStatus""];
""2304_pauseIco"" [label=""pauseIco""];
""2304_getBonus"" [label=""getBonus""];
""2304_startIco"" [label=""startIco""];
""2304_transferOwnership"" [label=""transferOwnership""];
""2304_refund"" [label=""refund""];
""2304_manualFinish"" [label=""manualFinish""];
""2304_hasStarted"" [label=""hasStarted""];
""2304_S26ICO"" [label=""S26ICO""];
""2304_calculateForValue"" [label=""calculateForValue""];
""2304_calculateTokens"" [label=""calculateTokens""];
""2304_finishICO"" [label=""finishICO""];
""2304_generateTeamTokens"" [label=""generateTeamTokens""];
""2304_withdraw"" [label=""withdraw""];
""2304_autoFinishTime"" [label=""autoFinishTime""];
""2304_robotRefund"" [label=""robotRefund""];
""2304_autoFinishTime"" -> ""2304_manageStatus"";
""2304_pauseIco"" -> ""2304_onlyOwner"";
""2304_robotRefund"" -> ""2304_ICOFailed"";
""2304_refund"" -> ""2304_ICOFailed"";
""2304_generateTeamTokens"" -> ""2304_addToStat"";
""2304_manageStatus"" -> ""2304_failICO"";
""2304_withdraw"" -> ""2304_onlyOwner"";
""2304_autoFinishTime"" -> ""2304_onlyTeam"";
""2304_manageStatus"" -> ""2304_finishICO"";
""2304_manualFinish"" -> ""2304_finishICO"";
""2304_hasFinished"" -> ""2304_isReachedLimit"";
""2304_fallback"" -> ""2304_ICOActive"";
""2304_generateTeamTokens"" -> ""2304_percent"";
""2304_fallback"" -> ""2304_addToStat"";
""2304_manageStatus"" -> ""2304_successICO"";
""2304_getBonus"" -> ""2304_percent"";
""2304_generateTeamTokens"" -> ""2304_ICOFinished"";
""2304_withdraw"" -> ""2304_successICOState"";
""2304_fallback"" -> ""2304_manageStatus"";
""2304_transferOwnership"" -> ""2304_onlyOwner"";
""2304_autoFinishTime"" -> ""2304_hasFinished"";
""2304_manualFinish"" -> ""2304_onlyTeam"";
""2304_manualFinish"" -> ""2304_hasFinished"";
""2304_autoFinishTime"" -> ""2304_generateTeamTokens"";
""2304_getBonus"" -> ""2304_min"";
""2304_startIco"" -> ""2304_onlyOwner"";
""2304_setRate"" -> ""2304_onlyTeam"";
""2304_calculateTokens"" -> ""2304_getBonus"";
""2304_finishICO"" -> ""2304_successICOState"";
""2304_manualFinish"" -> ""2304_generateTeamTokens"";
""2304_fallback"" -> ""2304_calculateTokens"";
""2304_setRobot"" -> ""2304_onlyOwner"";
""2304_calculateForValue"" -> ""2304_calculateTokens"";
""2304_robotRefund"" -> ""2304_onlyTeam"";
""2304_fallback"" -> ""2304_isReachedLimit"";
}
"
0x1d40c0998131f4a0254468eaf3ce8fc1f21d9da6.sol,ANKRTokenVault,"contract ANKRTokenVault is Ownable { using SafeMath for uint256; address public opentokenAddress = 0x7B1f5F0FCa6434D7b01161552D335A774706b650; address public tokenmanAddress = 0xBB46219183f1F17364914e353A44F982de77eeC8; address public marketingAddress = 0xc2e96F45232134dD32B6DF4D51AC82248CA942cc; address public teamReserveWallet = 0x0AA7Aa665276A96acD25329354FeEa8F955CAf2b; address public communityReserveWallet = 0xeFA1f626670445271359940e1aC346Ac374019E7; uint256 public opentokenAllocation = 0.5 * (10 ** 9) * (10 ** 18); uint256 public tokenmanAllocation = 0.2 * (10 ** 9) * (10 ** 18); uint256 public marketingAllocation = 0.5 * (10 ** 9) * (10 ** 18); uint256 public teamReserveAllocation = 2.0 * (10 ** 9) * (10 ** 18); uint256 public communityReserveAllocation = 4.0 * (10 ** 9) * (10 ** 18); uint256 public totalAllocation = 10 * (10 ** 9) * (10 ** 18); uint256 public investorTimeLock = 183 days; uint256 public othersTimeLock = 3 * 365 days; uint256 public othersVestingStages = 3 * 12; mapping(address => uint256) public allocations; mapping(address => uint256) public timeLocks; mapping(address => uint256) public claimed; mapping(address => uint256) public lockedInvestors; address[] public lockedInvestorsIndices; mapping(address => uint256) public unLockedInvestors; address[] public unLockedInvestorsIndices; uint256 public lockedAt = 0; ERC20Basic public token; event Allocated(address wallet, uint256 value); event Distributed(address wallet, uint256 value); event Locked(uint256 lockTime); modifier onlyReserveWallets { require(allocations[msg.sender] > 0, ); _; }",0,"subgraph cluster_1125_ANKRTokenVault {
label=""ANKRTokenVault"";
""1125_getTotalBalance"" [label=""getTotalBalance""];
""1125_distributeInvestorsReserve"" [label=""distributeInvestorsReserve""];
""1125_nonInvestorVestingStage"" [label=""nonInvestorVestingStage""];
""1125_distribute"" [label=""distribute""];
""1125_recoverFailedLock"" [label=""recoverFailedLock""];
""1125_constructor"" [label=""constructor""];
""1125_allocate"" [label=""allocate""];
""1125_addLockedInvestor"" [label=""addLockedInvestor""];
""1125_claimTokenReserve"" [label=""claimTokenReserve""];
""1125_claimNonInvestorReserve"" [label=""claimNonInvestorReserve""];
""1125_lock"" [label=""lock""];
""1125_getLockedBalance"" [label=""getLockedBalance""];
""1125_preDistribute"" [label=""preDistribute""];
""1125_addUnlockedInvestor"" [label=""addUnlockedInvestor""];
""1125_allocate"" -> ""1125_notAllocated"";
""1125_distribute"" -> ""1125_claimTokenReserve"";
""1125_recoverFailedLock"" -> ""1125_onlyOwner"";
""1125_getLockedBalance"" -> ""1125_onlyReserveWallets"";
""1125_addUnlockedInvestor"" -> ""1125_notLocked"";
""1125_claimNonInvestorReserve"" -> ""1125_nonInvestorVestingStage"";
""1125_addUnlockedInvestor"" -> ""1125_onlyOwner"";
""1125_recoverFailedLock"" -> ""1125_notLocked"";
""1125_claimNonInvestorReserve"" -> ""1125_onlyOwner"";
""1125_distribute"" -> ""1125_onlyOwner"";
""1125_addLockedInvestor"" -> ""1125_notLocked"";
""1125_distributeInvestorsReserve"" -> ""1125_onlyOwner"";
""1125_addUnlockedInvestor"" -> ""1125_notAllocated"";
""1125_distribute"" -> ""1125_notLocked"";
""1125_allocate"" -> ""1125_preDistribute"";
""1125_preDistribute"" -> ""1125_claimTokenReserve"";
""1125_claimNonInvestorReserve"" -> ""1125_locked"";
""1125_distributeInvestorsReserve"" -> ""1125_locked"";
""1125_distributeInvestorsReserve"" -> ""1125_claimTokenReserve"";
""1125_distribute"" -> ""1125_lock"";
""1125_addLockedInvestor"" -> ""1125_onlyOwner"";
""1125_recoverFailedLock"" -> ""1125_notAllocated"";
""1125_allocate"" -> ""1125_onlyOwner"";
""1125_allocate"" -> ""1125_notLocked"";
""1125_addLockedInvestor"" -> ""1125_notAllocated"";
}
"
0xa181b8c9f6b43b8252c6c9826cf5feba362b542e.sol,CryptoStamps,"contract CryptoStamps is ERC721 { event stampBirth(uint256 tokenId, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private firstStepLimit = 1.28 ether; mapping (uint256 => address) public stampIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public stampIndexToApproved; mapping (uint256 => uint256) private stampIndexToPrice; mapping(uint256 => uint256) public stampIndextotransactions; uint256 public totaletherstransacted; uint256 public totaltransactions; uint256 public stampCreatedCount; mapping (uint256 => bool) public stampIndextodissolved; mapping (uint256 => address) public dissolvedIndexToApproved; struct Stamp { uint256 birthtime; }",0,"subgraph cluster_1375_CryptoStamps {
label=""CryptoStamps"";
""1375_transferFrom"" [label=""transferFrom""];
""1375_implementsERC721"" [label=""implementsERC721""];
""1375_priceOf"" [label=""priceOf""];
""1375_name"" [label=""name""];
""1375_transfer"" [label=""transfer""];
""1375_symbol"" [label=""symbol""];
""1375_getStamp"" [label=""getStamp""];
""1375_setnumber"" [label=""setnumber""];
""1375_takeOwnership"" [label=""takeOwnership""];
""1375_setcut"" [label=""setcut""];
""1375_setdissolveaddress"" [label=""setdissolveaddress""];
""1375_nextpriceOf"" [label=""nextpriceOf""];
""1375_approve"" [label=""approve""];
""1375_dissolve"" [label=""dissolve""];
""1375_pausecontract"" [label=""pausecontract""];
""1375_controlstampdissolution"" [label=""controlstampdissolution""];
""1375_payout"" [label=""payout""];
""1375_setCOO"" [label=""setCOO""];
""1375_CryptoStamps"" [label=""CryptoStamps""];
""1375__createStamp"" [label=""_createStamp""];
""1375_setCEO"" [label=""setCEO""];
""1375_createStamp"" [label=""createStamp""];
""1375_transferdissolvedFrom"" [label=""transferdissolvedFrom""];
""1375_setdissolvedcontract"" [label=""setdissolvedcontract""];
""1375__owns"" [label=""_owns""];
""1375__transfer"" [label=""_transfer""];
""1375_totalSupply"" [label=""totalSupply""];
""1375_ownerOf"" [label=""ownerOf""];
""1375_unpausecontract"" [label=""unpausecontract""];
""1375_balanceOf"" [label=""balanceOf""];
""1375_purchase"" [label=""purchase""];
""1375_tokensOfOwner"" [label=""tokensOfOwner""];
""1375__addressNotNull"" [label=""_addressNotNull""];
""1375__transferdissolved"" [label=""_transferdissolved""];
""1375__payout"" [label=""_payout""];
""1375_setdissolveprice"" [label=""setdissolveprice""];
""1375__approved"" [label=""_approved""];
""1375_transfer"" -> ""1375__transfer"";
""1375_setdissolveprice"" -> ""1375_onlyCEO"";
""1375_dissolve"" -> ""1375_approve"";
""1375_transferFrom"" -> ""1375__transfer"";
""1375_setcut"" -> ""1375_onlyCEO"";
""1375_transferdissolvedFrom"" -> ""1375__addressNotNull"";
""1375_setdissolveaddress"" -> ""1375_onlyCEO"";
""1375_takeOwnership"" -> ""1375__transfer"";
""1375_takeOwnership"" -> ""1375__addressNotNull"";
""1375_setnumber"" -> ""1375_onlyCEO"";
""1375_tokensOfOwner"" -> ""1375_balanceOf"";
""1375_approve"" -> ""1375__owns"";
""1375_dissolve"" -> ""1375_transfer"";
""1375_purchase"" -> ""1375__transfer"";
""1375_transferdissolvedFrom"" -> ""1375__transferdissolved"";
""1375_tokensOfOwner"" -> ""1375_totalSupply"";
""1375_pausecontract"" -> ""1375_onlyCLevel"";
""1375_controlstampdissolution"" -> ""1375_onlyCEO"";
""1375_setCOO"" -> ""1375_onlyCEO"";
""1375_setdissolvedcontract"" -> ""1375_onlyCEO"";
""1375_transfer"" -> ""1375__owns"";
""1375_unpausecontract"" -> ""1375_onlyCEO"";
""1375_takeOwnership"" -> ""1375__approved"";
""1375_dissolve"" -> ""1375_priceOf"";
""1375_purchase"" -> ""1375__addressNotNull"";
""1375_transferFrom"" -> ""1375__addressNotNull"";
""1375_transferFrom"" -> ""1375__owns"";
""1375_transferdissolvedFrom"" -> ""1375__owns"";
""1375_transferFrom"" -> ""1375__approved"";
""1375_payout"" -> ""1375__payout"";
""1375_createStamp"" -> ""1375__createStamp"";
""1375_createStamp"" -> ""1375_onlyCOO"";
""1375_setCEO"" -> ""1375_onlyCEO"";
""1375__createStamp"" -> ""1375__transfer"";
""1375_payout"" -> ""1375_onlyCLevel"";
""1375_dissolve"" -> ""1375__createStamp"";
""1375_transfer"" -> ""1375__addressNotNull"";
}
"
0x36ff29571ed2ff029df9fa6da076ca1484ceb9dc.sol,Vioscoin,"contract Vioscoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 5000000000000000000000000; balances[0x67e9911D9275389dB0599BE60b1Be5C8850Df7b1] = _totalSupply; emit Transfer(address(0), 0x67e9911D9275389dB0599BE60b1Be5C8850Df7b1, _totalSupply); }",0,"subgraph cluster_543_Vioscoin {
label=""Vioscoin"";
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_constructor"" [label=""constructor""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xdae5447cec97be20a187244d4a8b4338367680de.sol,GDC,contract GDC is Token{ constructor() public{ symbol = ; name = ; decimals = 4; totalSupply = 2000000000000; owner = msg.sender; balances[owner] = totalSupply; },0,"subgraph cluster_325_GDC {
label=""GDC"";
""325_fallback"" [label=""fallback""];
""325_constructor"" [label=""constructor""];
}
"
0xeeae9c7a726f5c9d52c45494577221054a2805b2.sol,Bingo,"contract Bingo { using SafeMath for uint; MegaballInterface constant public megaballContract = MegaballInterface(address(0x3Fe2B3e8FEB33ed523cE8F786c22Cb6556f8A33F)); DiviesInterface constant private Divies = DiviesInterface(address(0xc7029Ed9EBa97A096e72607f4340c34049C7AF48)); uint256 constant public AGENT_END_BLOCK = 232; uint256 constant public ICO_BLOCK = 200; uint256 constant public ICO_TIME = 3600; event CardCreated(address indexed ticketOwner, uint indexed playerTicket, uint indexed stage); event Payment(address indexed customerAddress, uint indexed stage); event NumberCalled(uint indexed number, uint indexed stage, uint indexed total); event OnWithdraw(address indexed customerAddress, uint256 ethereumWithdrawn); event StageCreated(uint indexed stageNumber); modifier hasBalance() { require(bingoVault[msg.sender] > 0); _; }",0,"subgraph cluster_5586_Bingo {
label=""Bingo"";
""5586_getNumberCallersCount"" [label=""getNumberCallersCount""];
""5586_checkBingo"" [label=""checkBingo""];
""5586_addToPaybacks"" [label=""addToPaybacks""];
""5586_withdraw"" [label=""withdraw""];
""5586_checkH3"" [label=""checkH3""];
""5586_payCaller"" [label=""payCaller""];
""5586_payTicket"" [label=""payTicket""];
""5586_payReferral"" [label=""payReferral""];
""5586_claimBingo"" [label=""claimBingo""];
""5586_checkO"" [label=""checkO""];
""5586_isNumberCalled"" [label=""isNumberCalled""];
""5586_checkH1"" [label=""checkH1""];
""5586_calculateOnePercentTicketCostSplit"" [label=""calculateOnePercentTicketCostSplit""];
""5586_constructor"" [label=""constructor""];
""5586_random"" [label=""random""];
""5586_getCardRowB"" [label=""getCardRowB""];
""5586_referralSpot"" [label=""referralSpot""];
""5586_processPaybackQueue"" [label=""processPaybackQueue""];
""5586_seedMain"" [label=""seedMain""];
""5586_getStageDrawTime"" [label=""getStageDrawTime""];
""5586_getPaybackPlayerCount"" [label=""getPaybackPlayerCount""];
""5586_stageMoveDetail"" [label=""stageMoveDetail""];
""5586_randomArr"" [label=""randomArr""];
""5586_callNumbers"" [label=""callNumbers""];
""5586_checkB"" [label=""checkB""];
""5586_checkD2"" [label=""checkD2""];
""5586_repayment"" [label=""repayment""];
""5586_resetDrawBlocks"" [label=""resetDrawBlocks""];
""5586_checkH5"" [label=""checkH5""];
""5586_getMegaballStatus"" [label=""getMegaballStatus""];
""5586_getCardRowO"" [label=""getCardRowO""];
""5586_callNumber"" [label=""callNumber""];
""5586_fallback"" [label=""fallback""];
""5586_calculatePayoutDenomination"" [label=""calculatePayoutDenomination""];
""5586_getStageDenomination"" [label=""getStageDenomination""];
""5586_sendDivi"" [label=""sendDivi""];
""5586_getEntrant"" [label=""getEntrant""];
""5586_getBingoBalance"" [label=""getBingoBalance""];
""5586_isWithinBounds"" [label=""isWithinBounds""];
""5586_getStageStatus"" [label=""getStageStatus""];
""5586_getCardRowI"" [label=""getCardRowI""];
""5586_roundTimeout"" [label=""roundTimeout""];
""5586_checkG"" [label=""checkG""];
""5586_getStageBlocks"" [label=""getStageBlocks""];
""5586_isCallNumberAvailable"" [label=""isCallNumberAvailable""];
""5586_payProgressive"" [label=""payProgressive""];
""5586_checkD1"" [label=""checkD1""];
""5586_getPlayerCardsThisStage"" [label=""getPlayerCardsThisStage""];
""5586_getCardRowG"" [label=""getCardRowG""];
""5586_makeRow"" [label=""makeRow""];
""5586_makeCard"" [label=""makeCard""];
""5586_checkI"" [label=""checkI""];
""5586_checkN"" [label=""checkN""];
""5586_getCardRowN"" [label=""getCardRowN""];
""5586_initFirstStage"" [label=""initFirstStage""];
""5586_CreateStage"" [label=""CreateStage""];
""5586_checkH2"" [label=""checkH2""];
""5586_getEntrantsPlayerCount"" [label=""getEntrantsPlayerCount""];
""5586_withdrawFromMB"" [label=""withdrawFromMB""];
""5586_getCalledNumbers"" [label=""getCalledNumbers""];
""5586_seedProgressive"" [label=""seedProgressive""];
""5586_nextPaybacks"" [label=""nextPaybacks""];
""5586_sort_array"" [label=""sort_array""];
""5586_createCard"" [label=""createCard""];
""5586_updateMegaballStatus"" [label=""updateMegaballStatus""];
""5586_getContractBalance"" [label=""getContractBalance""];
""5586_seedMegball"" [label=""seedMegball""];
""5586_getMBbalance"" [label=""getMBbalance""];
""5586_checkH4"" [label=""checkH4""];
""5586_CreateStage"" -> ""5586_calculateOnePercentTicketCostSplit"";
""5586_checkBingo"" -> ""5586_checkG"";
""5586_checkBingo"" -> ""5586_checkB"";
""5586_callNumbers"" -> ""5586_updateMegaballStatus"";
""5586_CreateStage"" -> ""5586_processPaybackQueue"";
""5586_checkBingo"" -> ""5586_checkH3"";
""5586_checkD2"" -> ""5586_isNumberCalled"";
""5586_claimBingo"" -> ""5586_repayment"";
""5586_checkB"" -> ""5586_isNumberCalled"";
""5586_initFirstStage"" -> ""5586_CreateStage"";
""5586_payProgressive"" -> ""5586_calculateOnePercentTicketCostSplit"";
""5586_createCard"" -> ""5586_getEntrant"";
""5586_callNumbers"" -> ""5586_isNumberCalled"";
""5586_makeRow"" -> ""5586_randomArr"";
""5586_payProgressive"" -> ""5586_calculatePayoutDenomination"";
""5586_checkH2"" -> ""5586_isNumberCalled"";
""5586_checkBingo"" -> ""5586_checkI"";
""5586_checkBingo"" -> ""5586_checkH2"";
""5586_checkN"" -> ""5586_isNumberCalled"";
""5586_CreateStage"" -> ""5586_calculatePayoutDenomination"";
""5586_createCard"" -> ""5586_payReferral"";
""5586_checkD1"" -> ""5586_isNumberCalled"";
""5586_checkG"" -> ""5586_isNumberCalled"";
""5586_withdraw"" -> ""5586_hasBalance"";
""5586_checkH4"" -> ""5586_isNumberCalled"";
""5586_checkBingo"" -> ""5586_checkH1"";
""5586_checkBingo"" -> ""5586_checkH4"";
""5586_createCard"" -> ""5586_referralSpot"";
""5586_claimBingo"" -> ""5586_processPaybackQueue"";
""5586_roundTimeout"" -> ""5586_CreateStage"";
""5586_claimBingo"" -> ""5586_CreateStage"";
""5586_checkBingo"" -> ""5586_checkN"";
""5586_CreateStage"" -> ""5586_withdrawFromMB"";
""5586_makeCard"" -> ""5586_makeRow"";
""5586_checkBingo"" -> ""5586_checkO"";
""5586_checkBingo"" -> ""5586_checkH5"";
""5586_claimBingo"" -> ""5586_payCaller"";
""5586_callNumbers"" -> ""5586_resetDrawBlocks"";
""5586_checkH1"" -> ""5586_isNumberCalled"";
""5586_checkO"" -> ""5586_isNumberCalled"";
""5586_CreateStage"" -> ""5586_seedMegball"";
""5586_checkBingo"" -> ""5586_checkD1"";
""5586_checkBingo"" -> ""5586_checkD2"";
""5586_callNumbers"" -> ""5586_getMegaballStatus"";
""5586_CreateStage"" -> ""5586_sendDivi"";
""5586_randomArr"" -> ""5586_random"";
""5586_createCard"" -> ""5586_makeCard"";
""5586_claimBingo"" -> ""5586_payProgressive"";
""5586_claimBingo"" -> ""5586_checkBingo"";
""5586_callNumbers"" -> ""5586_callNumber"";
""5586_checkH3"" -> ""5586_isNumberCalled"";
""5586_checkI"" -> ""5586_isNumberCalled"";
""5586_checkH5"" -> ""5586_isNumberCalled"";
""5586_repayment"" -> ""5586_addToPaybacks"";
""5586_claimBingo"" -> ""5586_payTicket"";
""5586_makeRow"" -> ""5586_sort_array"";
""5586_callNumber"" -> ""5586_resetDrawBlocks"";
}
"
0x6b106609bbea6f4c9ace8836aa3fb04c6b586c4e.sol,NewWorld,"contract NewWorld { using SafeMath for uint256; event Birth(uint256 tokenId, uint256 startPrice); event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner); event Transfer(address indexed from, address indexed to, uint256 tokenId); event Approval(address indexed owner, address indexed approved, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256[] private tokens; mapping (uint256 => address) public collectibleIndexToOwner; mapping (uint256 => address) public collectibleIndexToApproved; mapping (uint256 => uint256) public collectibleIndexToPrice; address public ceoAddress; address public cooAddress; mapping (uint => address) private subTokenCreator; uint16 constant MAX_CONTINENT_INDEX = 10; uint16 constant MAX_SUBCONTINENT_INDEX = 100; uint16 constant MAX_COUNTRY_INDEX = 10000; uint64 constant DOUBLE_TOKENS_INDEX = 10000000000000; uint128 constant TRIBLE_TOKENS_INDEX = 10000000000000000000000; uint128 constant FIFTY_TOKENS_INDEX = 10000000000000000000000000000000; uint256 private constant PROMO_CREATION_LIMIT = 50000; uint256 public promoCreatedCount; uint8 constant WORLD_TOKEN_ID = 0; uint256 constant START_PRICE_CITY = 1 finney; uint256 constant START_PRICE_COUNTRY = 10 finney; uint256 constant START_PRICE_SUBCONTINENT = 100 finney; uint256 constant START_PRICE_CONTINENT = 1 ether; uint256 constant START_PRICE_WORLD = 10 ether; function NewWorld() public { ceoAddress = msg.sender; cooAddress = msg.sender; }",0,"subgraph cluster_1335_NewWorld {
label=""NewWorld"";
""1335_approve"" [label=""approve""];
""1335_setCOO"" [label=""setCOO""];
""1335_payout"" [label=""payout""];
""1335_setCEO"" [label=""setCEO""];
""1335_implementsERC721"" [label=""implementsERC721""];
""1335_transferFrom"" [label=""transferFrom""];
""1335_priceOf"" [label=""priceOf""];
""1335_tokensOfOwner"" [label=""tokensOfOwner""];
""1335_getNextPrice"" [label=""getNextPrice""];
""1335_buyToken"" [label=""buyToken""];
""1335__approved"" [label=""_approved""];
""1335_NewWorld"" [label=""NewWorld""];
""1335_ownerOf"" [label=""ownerOf""];
""1335_transfer"" [label=""transfer""];
""1335_getInitialPriceOfToken"" [label=""getInitialPriceOfToken""];
""1335_createPromoCollectible"" [label=""createPromoCollectible""];
""1335_balanceOf"" [label=""balanceOf""];
""1335__addressNotNull"" [label=""_addressNotNull""];
""1335__owns"" [label=""_owns""];
""1335__createCollectible"" [label=""_createCollectible""];
""1335__payout"" [label=""_payout""];
""1335_name"" [label=""name""];
""1335__transfer"" [label=""_transfer""];
""1335_symbol"" [label=""symbol""];
""1335_takeOwnership"" [label=""takeOwnership""];
""1335_getTotalSupply"" [label=""getTotalSupply""];
""1335_changePrice"" [label=""changePrice""];
""1335_unlockPriceChange"" [label=""unlockPriceChange""];
""1335_getToken"" [label=""getToken""];
""1335_buyToken"" -> ""1335_getNextPrice"";
""1335_takeOwnership"" -> ""1335__approved"";
""1335_priceOf"" -> ""1335_getInitialPriceOfToken"";
""1335_createPromoCollectible"" -> ""1335__createCollectible"";
""1335_getToken"" -> ""1335_getNextPrice"";
""1335_payout"" -> ""1335_onlyCLevel"";
""1335_getToken"" -> ""1335_getInitialPriceOfToken"";
""1335_changePrice"" -> ""1335__owns"";
""1335_tokensOfOwner"" -> ""1335_getTotalSupply"";
""1335_takeOwnership"" -> ""1335__addressNotNull"";
""1335_createPromoCollectible"" -> ""1335__transfer"";
""1335_unlockPriceChange"" -> ""1335_onlyCOO"";
""1335_transferFrom"" -> ""1335__approved"";
""1335_approve"" -> ""1335__owns"";
""1335_transfer"" -> ""1335__transfer"";
""1335_createPromoCollectible"" -> ""1335_getInitialPriceOfToken"";
""1335_transfer"" -> ""1335__owns"";
""1335_transferFrom"" -> ""1335__addressNotNull"";
""1335_buyToken"" -> ""1335_getInitialPriceOfToken"";
""1335_payout"" -> ""1335__payout"";
""1335_transferFrom"" -> ""1335__owns"";
""1335_tokensOfOwner"" -> ""1335_balanceOf"";
""1335_createPromoCollectible"" -> ""1335_onlyCOO"";
""1335_transferFrom"" -> ""1335__transfer"";
""1335_setCOO"" -> ""1335_onlyCEO"";
""1335_transfer"" -> ""1335__addressNotNull"";
""1335_takeOwnership"" -> ""1335__transfer"";
""1335_setCEO"" -> ""1335_onlyCEO"";
}
"
0x128fa9cc962448d2b438047cdcec1197f63b0ef4.sol,Moon,contract Moon is usingOraclize{ using Strings for string; struct Ticket { uint amount; },0,"subgraph cluster_6657_Moon {
label=""Moon"";
""6657_getRandomNumber"" [label=""getRandomNumber""];
""6657_myEarnings"" [label=""myEarnings""];
""6657_getNumElements"" [label=""getNumElements""];
""6657_endGame"" [label=""endGame""];
""6657_getMyStake"" [label=""getMyStake""];
""6657_getTotalAmount"" [label=""getTotalAmount""];
""6657_getGameEnd"" [label=""getGameEnd""];
""6657___callback"" [label=""__callback""];
""6657_getGameNumber"" [label=""getGameNumber""];
""6657_withdraw"" [label=""withdraw""];
""6657_getNumberOfPlayers"" [label=""getNumberOfPlayers""];
""6657_chooseRandomNumber"" [label=""chooseRandomNumber""];
""6657_getAllGameAmount"" [label=""getAllGameAmount""];
""6657_getNumSums"" [label=""getNumSums""];
""6657_getGameAddresses"" [label=""getGameAddresses""];
""6657_getGameSums"" [label=""getGameSums""];
""6657_insertSums"" [label=""insertSums""];
""6657_clearSums"" [label=""clearSums""];
""6657_buyTicket"" [label=""buyTicket""];
""6657_clearAddresses"" [label=""clearAddresses""];
""6657_getWinnerAddress"" [label=""getWinnerAddress""];
""6657_Moon"" [label=""Moon""];
""6657_insertAddress"" [label=""insertAddress""];
""6657_getGameBegin"" [label=""getGameBegin""];
""6657_chooseRandomNumber"" -> ""6657_oraclize_query"";
""6657_chooseRandomNumber"" -> ""6657_uint2str"";
""6657_endGame"" -> ""6657_clearAddresses"";
""6657_chooseRandomNumber"" -> ""6657_strConcat"";
""6657___callback"" -> ""6657_parseInt"";
""6657_buyTicket"" -> ""6657_insertAddress"";
""6657_endGame"" -> ""6657_clearSums"";
""6657___callback"" -> ""6657_oraclize_cbAddress"";
""6657_buyTicket"" -> ""6657_insertSums"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllCrowdsale,"contract ClinicAllCrowdsale is Crowdsale, FinalizableCrowdsale, MintedCrowdsale, ManagedWhitelist, Limited { constructor ( uint256 _tokenLimitSupply, uint256 _rate, address _wallet, address _privateSaleWallet, ERC20 _token, uint256 _openingTime, uint256 _closingTime, uint256 _discountTokenAmount, uint256 _discountTokenPercent, uint256 _preSaleClosingTime, uint256 _softCapLimit, ClinicAllRefundEscrow _vault, uint256 _buyLimitSupplyMin, uint256 _buyLimitSupplyMax, uint256 _kycLimitEliminator ) Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTime, _closingTime) public { privateSaleWallet = _privateSaleWallet; tokenSupplyLimit = _tokenLimitSupply; discountTokenAmount = _discountTokenAmount; discountTokenPercent = _discountTokenPercent; preSaleClosingTime = _preSaleClosingTime; softCapLimit = _softCapLimit; vault = _vault; buyLimitSupplyMin = _buyLimitSupplyMin; buyLimitSupplyMax = _buyLimitSupplyMax; kycLimitEliminator = _kycLimitEliminator; }",0,"subgraph cluster_4170_ClinicAllCrowdsale {
label=""ClinicAllCrowdsale"";
""4170_getRate"" [label=""getRate""];
""4170_getTokenAmount"" [label=""getTokenAmount""];
""4170_hasClosed"" [label=""hasClosed""];
""4170__preValidatePurchase"" [label=""_preValidatePurchase""];
""4170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""4170_transferToPrivateInvestor"" [label=""transferToPrivateInvestor""];
""4170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""4170_claimRefund"" [label=""claimRefund""];
""4170__getDiscountRate"" [label=""_getDiscountRate""];
""4170_manualRefund"" [label=""manualRefund""];
""4170_constructor"" [label=""constructor""];
""4170_goalReached"" [label=""goalReached""];
""4170_transferOff"" [label=""transferOff""];
""4170_allocatePrivateSaleFunds"" [label=""allocatePrivateSaleFunds""];
""4170_updateRate"" [label=""updateRate""];
""4170__getDiscountTokenAmount"" [label=""_getDiscountTokenAmount""];
""4170_redeemPrivateSaleFunds"" [label=""redeemPrivateSaleFunds""];
""4170_claimRefundChunk"" [label=""claimRefundChunk""];
""4170__getTokenAmount"" [label=""_getTokenAmount""];
""4170_updateKycLimitEliminator"" [label=""updateKycLimitEliminator""];
""4170__forwardFunds"" [label=""_forwardFunds""];
""4170_transferOn"" [label=""transferOn""];
""4170_supplyRest"" [label=""supplyRest""];
""4170_finalization"" [label=""finalization""];
""4170__processPurchase"" [label=""_processPurchase""];
""4170_isDiscount"" [label=""isDiscount""];
""4170_updateBuyLimitRange"" [label=""updateBuyLimitRange""];
""4170_transferTokensToReserve"" [label=""transferTokensToReserve""];
""4170_refundeesListLength"" [label=""refundeesListLength""];
""4170__getTokensWithDiscount"" [label=""_getTokensWithDiscount""];
""4170__getTokensWithDiscount"" -> ""4170__getDiscountRate"";
""4170__preValidatePurchase"" -> ""4170_isLimited"";
""4170_finalization"" -> ""4170_transferTokensToReserve"";
""4170_transferOn"" -> ""4170_onlyOwner"";
""4170_claimRefundChunk"" -> ""4170_onlyOwner"";
""4170_allocatePrivateSaleFunds"" -> ""4170__deliverTokens"";
""4170__forwardFunds"" -> ""4170__forwardFunds"";
""4170_transferTokensToReserve"" -> ""4170__deliverTokens"";
""4170_beneficiaryWithdrawAll"" -> ""4170_onlyOwner"";
""4170_claimRefund"" -> ""4170_goalReached"";
""4170_claimRefundChunk"" -> ""4170_goalReached"";
""4170__processPurchase"" -> ""4170_doesNotExceedLimit"";
""4170__preValidatePurchase"" -> ""4170_onlyIfWhitelisted"";
""4170_beneficiaryWithdrawChunk"" -> ""4170_onlyOwner"";
""4170__processPurchase"" -> ""4170__processPurchase"";
""4170_manualRefund"" -> ""4170_onlyOwner"";
""4170_updateRate"" -> ""4170_onlyManager"";
""4170__getTokenAmount"" -> ""4170_isDiscount"";
""4170_finalization"" -> ""4170_goalReached"";
""4170_refundeesListLength"" -> ""4170_onlyOwner"";
""4170_getTokenAmount"" -> ""4170__getTokenAmount"";
""4170__getDiscountTokenAmount"" -> ""4170__getDiscountRate"";
""4170_getRate"" -> ""4170__getDiscountRate"";
""4170_transferToPrivateInvestor"" -> ""4170_onlyPrivateSaleWallet"";
""4170_redeemPrivateSaleFunds"" -> ""4170_onlyPrivateSaleWallet"";
""4170__preValidatePurchase"" -> ""4170__getTokenAmount"";
""4170__getDiscountRate"" -> ""4170_isDiscount"";
""4170_constructor"" -> ""4170_constructor"";
""4170__getTokenAmount"" -> ""4170__getTokensWithDiscount"";
""4170_getRate"" -> ""4170_isDiscount"";
""4170__getTokensWithDiscount"" -> ""4170__getDiscountTokenAmount"";
""4170_finalization"" -> ""4170_finalization"";
""4170_transferOff"" -> ""4170_onlyOwner"";
""4170_updateKycLimitEliminator"" -> ""4170_onlyOwner"";
""4170__preValidatePurchase"" -> ""4170__preValidatePurchase"";
""4170_updateBuyLimitRange"" -> ""4170_onlyOwner"";
""4170_transferToPrivateInvestor"" -> ""4170_onlyIfWhitelisted"";
""4170_allocatePrivateSaleFunds"" -> ""4170_onlyOwner"";
}
"
0xbf106842f8887e87f5848b008939fb2f44715679.sol,Pausable,contract Pausable is Ownable { using SafeMath for uint256; event Pause(); event Unpause(); bool public paused = false; address public crowdsale; mapping (address => uint256) public frozen; uint public unfreezeTimestamp; function Pausable() public { unfreezeTimestamp = now + 60 days; },0,"subgraph cluster_976_PausableToken {
label=""PausableToken"";
""976_decreaseApproval"" [label=""decreaseApproval""];
""976_transfer"" [label=""transfer""];
""976_increaseApproval"" [label=""increaseApproval""];
""976_transferFrom"" [label=""transferFrom""];
""976_approve"" [label=""approve""];
""976_increaseApproval"" -> ""976_increaseApproval"";
""976_decreaseApproval"" -> ""976_decreaseApproval"";
""976_transferFrom"" -> ""976_transferFrom"";
""976_transfer"" -> ""976_whenNotPaused"";
""976_approve"" -> ""976_approve"";
""976_transfer"" -> ""976_transfer"";
""976_transferFrom"" -> ""976_whenNotPaused"";
""976_transferFrom"" -> ""976_frozenTransferFromCheck"";
""976_approve"" -> ""976_whenNotPaused"";
""976_decreaseApproval"" -> ""976_whenNotPaused"";
""976_increaseApproval"" -> ""976_whenNotPaused"";
""976_transfer"" -> ""976_frozenTransferCheck"";
}
"
0xd344d3ee119668b11c18538797cf5e3454364c4e.sol,IMMFXCoin,contract IMMFXCoin { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint public _totalSupply = 1000000000000; uint256 public RATE = 1; bool public isMinting = true; string public constant generatedBy = ; using SafeMath for uint256; address public owner; modifier onlyOwner() { if (msg.sender != owner) { throw; },0,"subgraph cluster_516_IMMFXCoin {
label=""IMMFXCoin"";
""516_fallback"" [label=""fallback""];
""516_allowance"" [label=""allowance""];
""516_createTokens"" [label=""createTokens""];
""516_endCrowdsale"" [label=""endCrowdsale""];
""516_transfer"" [label=""transfer""];
""516_changeCrowdsaleRate"" [label=""changeCrowdsaleRate""];
""516_totalSupply"" [label=""totalSupply""];
""516_burnTokens"" [label=""burnTokens""];
""516_transferFrom"" [label=""transferFrom""];
""516_approve"" [label=""approve""];
""516_constructor"" [label=""constructor""];
""516_balanceOf"" [label=""balanceOf""];
""516_endCrowdsale"" -> ""516_onlyOwner"";
""516_burnTokens"" -> ""516_onlyOwner"";
""516_fallback"" -> ""516_createTokens"";
""516_changeCrowdsaleRate"" -> ""516_onlyOwner"";
}
"
0x303995ad2fbc92429dc7b4448a9787221a006ee6.sol,CFunIPBase,contract CFunIPBase is Ownable{ struct Copyright { uint256 copyrightID; string fingerprint; string title; uint256 recordDate; address author; address recorder; },0,"subgraph cluster_271_CFunIPBase {
label=""CFunIPBase"";
""271_saveCopyright"" [label=""saveCopyright""];
""271_unpause"" [label=""unpause""];
""271_isContract"" [label=""isContract""];
""271_copyrightCount"" [label=""copyrightCount""];
""271_pause"" [label=""pause""];
""271_toString"" [label=""toString""];
""271_saveCopyright"" -> ""271_whenNotPaused"";
""271_saveCopyright"" -> ""271_toString"";
""271_saveCopyright"" -> ""271_isContract"";
""271_pause"" -> ""271_onlyOwner"";
""271_pause"" -> ""271_whenNotPaused"";
""271_unpause"" -> ""271_whenPaused"";
""271_unpause"" -> ""271_onlyOwner"";
}
"
