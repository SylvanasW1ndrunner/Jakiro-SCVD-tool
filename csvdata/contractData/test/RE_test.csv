file,contract,code,label,graph
0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a.sol,BitSTDView,"contract BitSTDView { BitSTDLogic private logic; address public owner; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); function balanceOf(address add)constant public returns (uint256) { return logic.balanceOf(add); }",1,"subgraph cluster_1510_BitSTDView {
label=""BitSTDView"";
""1510_frozenAccount"" [label=""frozenAccount""];
""1510_decimals"" [label=""decimals""];
""1510_transferFrom"" [label=""transferFrom""];
""1510_buy"" [label=""buy""];
""1510_symbol"" [label=""symbol""];
""1510_mintToken"" [label=""mintToken""];
""1510_buyPrice"" [label=""buyPrice""];
""1510_freezeAccount"" [label=""freezeAccount""];
""1510_transferDataAuthority"" [label=""transferDataAuthority""];
""1510_transferAuthority"" [label=""transferAuthority""];
""1510_approve"" [label=""approve""];
""1510_sellPrice"" [label=""sellPrice""];
""1510_constructor"" [label=""constructor""];
""1510_burn"" [label=""burn""];
""1510_transferLogicAuthority"" [label=""transferLogicAuthority""];
""1510_totalSupply"" [label=""totalSupply""];
""1510_balanceOf"" [label=""balanceOf""];
""1510_migration"" [label=""migration""];
""1510_setBitSTD"" [label=""setBitSTD""];
""1510_transfer"" [label=""transfer""];
""1510_sell"" [label=""sell""];
""1510_allowance"" [label=""allowance""];
""1510_name"" [label=""name""];
""1510_burnFrom"" [label=""burnFrom""];
""1510_approveAndCall"" [label=""approveAndCall""];
""1510_mintToken"" -> ""1510_onlyOwner"";
""1510_transferAuthority"" -> ""1510_onlyOwner"";
""1510_transferLogicAuthority"" -> ""1510_onlyOwner"";
""1510_freezeAccount"" -> ""1510_onlyOwner"";
""1510_setBitSTD"" -> ""1510_onlyOwner"";
""1510_transferDataAuthority"" -> ""1510_onlyOwner"";
}
"
0x6dbc5978711cb22d7ba611bc18cec308ea12ea95.sol,PublicResolver,"contract PublicResolver { bytes4 constant INTERFACE_META_ID = 0x01ffc9a7; bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de; bytes4 constant NAME_INTERFACE_ID = 0x691f3431; bytes4 constant ABI_INTERFACE_ID = 0x2203ab56; bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233; bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c; bytes4 constant MULTIADDR_INTERFACE_ID = 0x4cb7724c; event AddrChanged(bytes32 indexed node, address a); event NameChanged(bytes32 indexed node, string name); event ABIChanged(bytes32 indexed node, uint256 indexed contentType); event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y); event TextChanged(bytes32 indexed node, string indexedKey, string key); event MultiaddrChanged(bytes32 indexed node, bytes addr); struct PublicKey { bytes32 x; bytes32 y; }",1,"subgraph cluster_533_PublicResolver {
label=""PublicResolver"";
""533_text"" [label=""text""];
""533_constructor"" [label=""constructor""];
""533_setPubkey"" [label=""setPubkey""];
""533_setName"" [label=""setName""];
""533_setAddr"" [label=""setAddr""];
""533_setABI"" [label=""setABI""];
""533_multiaddr"" [label=""multiaddr""];
""533_addr"" [label=""addr""];
""533_supportsInterface"" [label=""supportsInterface""];
""533_name"" [label=""name""];
""533_setText"" [label=""setText""];
""533_setMultiaddr"" [label=""setMultiaddr""];
""533_ABI"" [label=""ABI""];
""533_pubkey"" [label=""pubkey""];
""533_setText"" -> ""533_onlyOwner"";
""533_setABI"" -> ""533_onlyOwner"";
""533_setAddr"" -> ""533_onlyOwner"";
""533_setPubkey"" -> ""533_onlyOwner"";
""533_setMultiaddr"" -> ""533_onlyOwner"";
""533_setName"" -> ""533_onlyOwner"";
}
"
0x730f8c40a08d02349a2d64e3193cf207a2a2dfe7.sol,PG_Bank,"contract PG_Bank { function Put(uint _unlockTime) public payable { var acc = Acc[msg.sender]; acc.balance += msg.value; acc.unlockTime = _unlockTime>now?_unlockTime:now; LogFile.AddMessage(msg.sender,msg.value,); }",1,"subgraph cluster_128_PG_Bank {
label=""PG_Bank"";
""128_PG_Bank"" [label=""PG_Bank""];
""128_fallback"" [label=""fallback""];
""128_Put"" [label=""Put""];
""128_Collect"" [label=""Collect""];
""128_fallback"" -> ""128_Put"";
}
"
0x541ac3dbde0712b1a121bdd5e8c506ae594a4631.sol,XPTToken,contract XPTToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 10000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function XPTToken () { owner = msg.sender; },1,"subgraph cluster_756_XPTToken {
label=""XPTToken"";
""756_totalSupply"" [label=""totalSupply""];
""756_XPTToken"" [label=""XPTToken""];
""756_createTokens"" [label=""createTokens""];
""756_approve"" [label=""approve""];
""756_refundTokens"" [label=""refundTokens""];
""756_setOwner"" [label=""setOwner""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_transferFrom"" [label=""transferFrom""];
""756_transferFrom"" -> ""756_transferFrom"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_allowance"";
""756_approve"" -> ""756_approve"";
}
"
0xaa63c8683647ef91b3fdab4b4989ee9588da297b.sol,DSProxy,"contract DSProxy is DSAuth, DSNote { DSProxyCache public cache; function DSProxy(address _cacheAddr) public { require(setCache(_cacheAddr)); }",1,"subgraph cluster_390_DSProxyCache {
label=""DSProxyCache"";
""390_read"" [label=""read""];
""390_write"" [label=""write""];
}
"
0x6a3f85f8a86e7b3de0269c20e9ab066dd57b8e21.sol,AccRegCenter,contract AccRegCenter is Ownable { struct User { address useraddress; uint useramount; bool lastTransfer; },1,"subgraph cluster_443_AccRegCenter {
label=""AccRegCenter"";
""443_SetAddress"" [label=""SetAddress""];
""443_GetUser"" [label=""GetUser""];
""443_transfer"" [label=""transfer""];
""443_AddUser"" [label=""AddUser""];
""443_SetAmount"" [label=""SetAmount""];
""443_constructor"" [label=""constructor""];
""443_ResetAllAmount"" [label=""ResetAllAmount""];
""443_transfertoacc"" [label=""transfertoacc""];
""443_TransferToAllAccounts"" [label=""TransferToAllAccounts""];
""443_transfer"" -> ""443_onlyOwner"";
""443_transfertoacc"" -> ""443_onlyOwner"";
""443_SetAmount"" -> ""443_onlyOwner"";
""443_ResetAllAmount"" -> ""443_onlyOwner"";
""443_TransferToAllAccounts"" -> ""443_onlyOwner"";
""443_AddUser"" -> ""443_onlyOwner"";
""443_SetAddress"" -> ""443_onlyOwner"";
}
"
0x4b96bf1fef93a216914fc843d81207a027ce52b3.sol,VUULRVesting,"contract VUULRVesting is XClaimable, Salvageable { using SafeMath for uint; struct VestingSchedule { uint lockPeriod; uint numPeriods; uint tokens; uint amountWithdrawn; uint startTime; }",1,"subgraph cluster_1806_VUULRVesting {
label=""VUULRVesting"";
""1806_revokeSchedule"" [label=""revokeSchedule""];
""1806_emergencyERC20Drain"" [label=""emergencyERC20Drain""];
""1806_registerVestingSchedule"" [label=""registerVestingSchedule""];
""1806_changeVestingAddress"" [label=""changeVestingAddress""];
""1806_whichPeriod"" [label=""whichPeriod""];
""1806_withdrawVestedTokens"" [label=""withdrawVestedTokens""];
""1806_VUULRVesting"" [label=""VUULRVesting""];
""1806_withdrawable"" [label=""withdrawable""];
""1806_start"" [label=""start""];
""1806_vested"" [label=""vested""];
""1806_revokeSchedule"" -> ""1806_onlyOwner"";
""1806_emergencyERC20Drain"" -> ""1806_canOperate"";
""1806_withdrawVestedTokens"" -> ""1806_vested"";
""1806_revokeSchedule"" -> ""1806_vested"";
""1806_start"" -> ""1806_onlyOwner"";
""1806_withdrawable"" -> ""1806_vested"";
""1806_revokeSchedule"" -> ""1806_withdrawable"";
""1806_emergencyERC20Drain"" -> ""1806_emergencyERC20Drain"";
""1806_changeVestingAddress"" -> ""1806_onlyOwner"";
""1806_registerVestingSchedule"" -> ""1806_canOperate"";
""1806_withdrawVestedTokens"" -> ""1806_withdrawable"";
}
"
0x47fb9b34d4eca0ca1d25cafcb4924d8fc94e8170.sol,FlexibleTokenSale,"contract FlexibleTokenSale is Owned { using SafeMath for uint256; bool public suspended; uint256 public tokenPrice; uint256 public tokenPerEther; uint256 public contributionMin; uint256 public tokenConversionFactor; address public walletAddress; TokenTransfer token; uint256 public totalTokensSold; uint256 public totalEtherCollected; address public priceUpdateAddress; event Initialized(); event TokenPriceUpdated(uint256 _newValue); event TokenPerEtherUpdated(uint256 _newValue); event TokenMinUpdated(uint256 _newValue); event WalletAddressUpdated(address indexed _newAddress); event SaleSuspended(); event SaleResumed(); event TokensPurchased(address indexed _beneficiary, uint256 _cost, uint256 _tokens); event TokensReclaimed(uint256 _amount); event PriceAddressUpdated(address indexed _newAddress); function FlexibleTokenSale(address _tokenAddress,address _walletAddress,uint _tokenPerEther,address _priceUpdateAddress) public Owned() { require(_walletAddress != address(0)); require(_walletAddress != address(this)); require(address(token) == address(0)); require(address(_tokenAddress) != address(0)); require(address(_tokenAddress) != address(this)); require(address(_tokenAddress) != address(walletAddress)); walletAddress = _walletAddress; priceUpdateAddress = _priceUpdateAddress; token = TokenTransfer(_tokenAddress); suspended = false; tokenPrice = 100; tokenPerEther = _tokenPerEther; contributionMin = 5 * 10**18; totalTokensSold = 0; totalEtherCollected = 0; tokenConversionFactor = 10**(uint256(18).sub(token.decimals()).add(2)); assert(tokenConversionFactor > 0); }",1,"subgraph cluster_883_FlexibleTokenSale {
label=""FlexibleTokenSale"";
""883_buyTokens"" [label=""buyTokens""];
""883_buyTokensInternal"" [label=""buyTokensInternal""];
""883_FlexibleTokenSale"" [label=""FlexibleTokenSale""];
""883_updatePriceAddress"" [label=""updatePriceAddress""];
""883_reclaimTokens"" [label=""reclaimTokens""];
""883_suspend"" [label=""suspend""];
""883_fallback"" [label=""fallback""];
""883_updateTokenPerEther"" [label=""updateTokenPerEther""];
""883_setMinToken"" [label=""setMinToken""];
""883_resume"" [label=""resume""];
""883_setTokenPrice"" [label=""setTokenPrice""];
""883_setWalletAddress"" [label=""setWalletAddress""];
""883_setMinToken"" -> ""883_onlyOwner"";
""883_resume"" -> ""883_onlyOwner"";
""883_FlexibleTokenSale"" -> ""883_Owned"";
""883_buyTokens"" -> ""883_buyTokensInternal"";
""883_setTokenPrice"" -> ""883_onlyOwner"";
""883_suspend"" -> ""883_onlyOwner"";
""883_updatePriceAddress"" -> ""883_onlyOwner"";
""883_reclaimTokens"" -> ""883_onlyOwner"";
""883_setWalletAddress"" -> ""883_onlyOwner"";
""883_setWalletAddress"" -> ""883_isOwner"";
""883_fallback"" -> ""883_buyTokens"";
}
"
0x2791528f5617e187a6d73c30034ac211b2f47042.sol,CardsRaffle,"contract CardsRaffle is AccessAdmin { using SafeMath for SafeMath; function CardsRaffle() public { setAdminContract(msg.sender,true); setActionContract(msg.sender,true); }",1,"subgraph cluster_957_CardsRaffle {
label=""CardsRaffle"";
""957_setCardsAddress"" [label=""setCardsAddress""];
""957_buyRaffleTicket"" [label=""buyRaffleTicket""];
""957_getLatestRaffleInfo"" [label=""getLatestRaffleInfo""];
""957_getRafflePlayers"" [label=""getRafflePlayers""];
""957_setRareAddress"" [label=""setRareAddress""];
""957_getRareAddress"" [label=""getRareAddress""];
""957_startRareRaffle"" [label=""startRareRaffle""];
""957_assignRafflePrize"" [label=""assignRafflePrize""];
""957_drawRandomWinner"" [label=""drawRandomWinner""];
""957_awardRafflePrize"" [label=""awardRafflePrize""];
""957_getPlayersTickets"" [label=""getPlayersTickets""];
""957_CardsRaffle"" [label=""CardsRaffle""];
""957_awardRafflePrize"" -> ""957_drawRandomWinner"";
""957_CardsRaffle"" -> ""957_setAdminContract"";
""957_setRareAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_assignRafflePrize"";
""957_startRareRaffle"" -> ""957_onlyAdmin"";
""957_startRareRaffle"" -> ""957_getRareAddress"";
""957_drawRandomWinner"" -> ""957_onlyAdmin"";
""957_CardsRaffle"" -> ""957_setActionContract"";
""957_setCardsAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_getRareAddress"";
}
"
0x0000009a317684a5f840484357fa587aca76454c.sol,BurnableToken,"contract BurnableToken is BasicToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { require(_value <= balances.balanceOf(msg.sender)); address burner = msg.sender; balances.subBalance(burner, _value); totalSupply_ = totalSupply_.sub(_value); Burn(burner, _value); Transfer(burner, address(0), _value); }",1,"subgraph cluster_1429_BurnableToken {
label=""BurnableToken"";
""1429_burn"" [label=""burn""];
}
"
0x0000009a317684a5f840484357fa587aca76454c.sol,BurnableToken,"contract BurnableToken is BasicToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { require(_value <= balances.balanceOf(msg.sender)); address burner = msg.sender; balances.subBalance(burner, _value); totalSupply_ = totalSupply_.sub(_value); Burn(burner, _value); Transfer(burner, address(0), _value); }",1,"subgraph cluster_1429_BurnableToken {
label=""BurnableToken"";
""1429_burn"" [label=""burn""];
}
"
0x174bb5d84b78e9e2248e7aa2c789aeba82f72f68.sol,LuckyTree,"contract LuckyTree is Owned, SafeMath{ uint public leafPrice; uint public gameStart; uint public gameDuration; uint public tokenLockDuration; uint public totalParticipationAmount; uint public totalLockedAmount; uint public numberOfLeafs; uint public participantIndex; bool public fundsTransfered; address public winner; mapping(uint => address) public participants; mapping(uint => uint) public participationAmount; mapping(address => bool) public hasParticipated; mapping(address => bool) public hasWithdrawn; mapping(address => uint) public participantIndexes; mapping(uint => address) public leafOwners; event GameWinner(address winner); event GameEnded(uint block); event GameStarted(uint block); event GameFailed(uint block); event GameLocked(uint block); event GameUnlocked(uint block); enum state{ pending, running, paused, finished, closed, claimed }",1,"subgraph cluster_1043_LuckyTree {
label=""LuckyTree"";
""1043_random"" [label=""random""];
""1043_lockFunds"" [label=""lockFunds""];
""1043_processTransaction"" [label=""processTransaction""];
""1043_closeGame"" [label=""closeGame""];
""1043_pickWinner"" [label=""pickWinner""];
""1043_manuallyProcessTransaction"" [label=""manuallyProcessTransaction""];
""1043_unlockFunds"" [label=""unlockFunds""];
""1043_setCreditGameAddress"" [label=""setCreditGameAddress""];
""1043_checkInternalBalance"" [label=""checkInternalBalance""];
""1043_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""1043_setTokenAddress"" [label=""setTokenAddress""];
""1043_receiveApproval"" [label=""receiveApproval""];
""1043_LuckyTree"" [label=""LuckyTree""];
""1043_getVariablesForDapp"" [label=""getVariablesForDapp""];
""1043_manualLockFunds"" [label=""manualLockFunds""];
""1043_killContract"" [label=""killContract""];
""1043_salvageTokensFromContract"" -> ""1043_onlyOwner"";
""1043_manuallyProcessTransaction"" -> ""1043_onlyOwner"";
""1043_manualLockFunds"" -> ""1043_onlyOwner"";
""1043_setCreditGameAddress"" -> ""1043_onlyOwner"";
""1043_setTokenAddress"" -> ""1043_onlyOwner"";
""1043_pickWinner"" -> ""1043_random"";
""1043_closeGame"" -> ""1043_onlyOwner"";
""1043_killContract"" -> ""1043_onlyOwner"";
""1043_receiveApproval"" -> ""1043_processTransaction"";
""1043_manualLockFunds"" -> ""1043_pickWinner"";
""1043_pickWinner"" -> ""1043_lockFunds"";
""1043_processTransaction"" -> ""1043_pickWinner"";
""1043_manuallyProcessTransaction"" -> ""1043_processTransaction"";
}
"
0x750c1d91864171d7e1715a6b53ee28c72b8faa09.sol,EthicHubUser,"contract EthicHubUser is Ownable, EthicHubBase { event UserStatusChanged(address target, string profile, bool isRegistered); constructor(address _storageAddress) EthicHubBase(_storageAddress) public { version = 3; }",1,"subgraph cluster_660_EthicHubUser {
label=""EthicHubUser"";
""660_deleteUserStatus"" [label=""deleteUserStatus""];
""660_registerPaymentGateway"" [label=""registerPaymentGateway""];
""660_registerLocalNode"" [label=""registerLocalNode""];
""660_unregisterLocalNode"" [label=""unregisterLocalNode""];
""660_registerRepresentative"" [label=""registerRepresentative""];
""660_constructor"" [label=""constructor""];
""660_unregisterPaymentGateway"" [label=""unregisterPaymentGateway""];
""660_changeUserStatus"" [label=""changeUserStatus""];
""660_unregisterCommunity"" [label=""unregisterCommunity""];
""660_unregisterRepresentative"" [label=""unregisterRepresentative""];
""660_unregisterInvestor"" [label=""unregisterInvestor""];
""660_registerInvestor"" [label=""registerInvestor""];
""660_viewRegistrationStatus"" [label=""viewRegistrationStatus""];
""660_registerCommunity"" [label=""registerCommunity""];
""660_unregisterCommunity"" -> ""660_onlyOwner"";
""660_registerLocalNode"" -> ""660_changeUserStatus"";
""660_constructor"" -> ""660_constructor"";
""660_registerInvestor"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_deleteUserStatus"";
""660_unregisterLocalNode"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_onlyOwner"";
""660_unregisterRepresentative"" -> ""660_onlyOwner"";
""660_registerCommunity"" -> ""660_changeUserStatus"";
""660_registerLocalNode"" -> ""660_onlyOwner"";
""660_unregisterLocalNode"" -> ""660_deleteUserStatus"";
""660_registerCommunity"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_onlyOwner"";
""660_registerRepresentative"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_deleteUserStatus"";
""660_unregisterCommunity"" -> ""660_deleteUserStatus"";
""660_unregisterRepresentative"" -> ""660_deleteUserStatus"";
""660_deleteUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_changeUserStatus"";
""660_registerRepresentative"" -> ""660_changeUserStatus"";
""660_changeUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_onlyOwner"";
""660_registerInvestor"" -> ""660_changeUserStatus"";
}
"
0xc58f1f3ec051b51f10c4feb0cfd10d811d055ef5.sol,ldoh,"contract ldoh is EthereumSmartContract { event onCashbackCode (address indexed hodler, address cashbackcode); event onAffiliateBonus (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onClaimTokens (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onHoldplatform (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onAddContractAddress(address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime); event onHoldplatformsetting(address indexed Tokenairdrop, bool HPM_status, uint256 HPM_divider, uint256 HPM_ratio, uint256 datetime); event onHoldplatformdeposit(uint256 amount, uint256 newbalance, uint256 datetime); event onHoldplatformwithdraw(uint256 amount, uint256 newbalance, uint256 datetime); event onReceiveAirdrop(uint256 amount, uint256 datetime); address public DefaultToken; struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; bool cashbackstatus; }",1,"subgraph cluster_2349_ldoh {
label=""ldoh"";
""2349_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""2349_HodlTokens4"" [label=""HodlTokens4""];
""2349_GetUserSafesLength"" [label=""GetUserSafesLength""];
""2349_TokenPrice"" [label=""TokenPrice""];
""2349_div"" [label=""div""];
""2349_AddContractAddress"" [label=""AddContractAddress""];
""2349_fallback"" [label=""fallback""];
""2349_Holdplatform"" [label=""Holdplatform""];
""2349_UnlockToken2"" [label=""UnlockToken2""];
""2349_Holdplatform_Airdrop"" [label=""Holdplatform_Airdrop""];
""2349_UnlockToken3"" [label=""UnlockToken3""];
""2349_mul"" [label=""mul""];
""2349_CashbackCode"" [label=""CashbackCode""];
""2349_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""2349_constructor"" [label=""constructor""];
""2349_ClaimTokens"" [label=""ClaimTokens""];
""2349_ReturnAllTokens"" [label=""ReturnAllTokens""];
""2349_Holdplatform_Withdraw"" [label=""Holdplatform_Withdraw""];
""2349_Holdplatform_Deposit"" [label=""Holdplatform_Deposit""];
""2349_UnlockToken4"" [label=""UnlockToken4""];
""2349_HodlTokens3"" [label=""HodlTokens3""];
""2349_AirdropToken"" [label=""AirdropToken""];
""2349_GetSafe"" [label=""GetSafe""];
""2349_sub"" [label=""sub""];
""2349_add"" [label=""add""];
""2349_HodlTokens2"" [label=""HodlTokens2""];
""2349_PayToken"" [label=""PayToken""];
""2349_UnlockToken4"" -> ""2349_sub"";
""2349_Holdplatform_Airdrop"" -> ""2349_div"";
""2349_AirdropToken"" -> ""2349_div"";
""2349_Holdplatform_Deposit"" -> ""2349_restricted"";
""2349_HodlTokens2"" -> ""2349_HodlTokens3"";
""2349_HodlTokens3"" -> ""2349_sub"";
""2349_AddContractAddress"" -> ""2349_restricted"";
""2349_Holdplatform"" -> ""2349_HodlTokens2"";
""2349_HodlTokens2"" -> ""2349_div"";
""2349_Holdplatform_Withdraw"" -> ""2349_restricted"";
""2349_ReturnAllTokens"" -> ""2349_add"";
""2349_HodlTokens2"" -> ""2349_sub"";
""2349_UnlockToken2"" -> ""2349_mul"";
""2349_UnlockToken2"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_mul"";
""2349_AddContractAddress"" -> ""2349_mul"";
""2349_TokenPrice"" -> ""2349_restricted"";
""2349_WithdrawAffiliate"" -> ""2349_add"";
""2349_UnlockToken4"" -> ""2349_PayToken"";
""2349_HodlTokens4"" -> ""2349_add"";
""2349_UnlockToken4"" -> ""2349_mul"";
""2349_Holdplatform_Airdrop"" -> ""2349_restricted"";
""2349_UnlockToken3"" -> ""2349_div"";
""2349_AddContractAddress"" -> ""2349_div"";
""2349_HodlTokens3"" -> ""2349_mul"";
""2349_UnlockToken4"" -> ""2349_div"";
""2349_Holdplatform"" -> ""2349_add"";
""2349_Holdplatform_Deposit"" -> ""2349_add"";
""2349_UnlockToken2"" -> ""2349_add"";
""2349_PayToken"" -> ""2349_AirdropToken"";
""2349_Holdplatform_Withdraw"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_add"";
""2349_WithdrawAffiliate"" -> ""2349_sub"";
""2349_ReturnAllTokens"" -> ""2349_PayToken"";
""2349_UnlockToken2"" -> ""2349_UnlockToken3"";
""2349_UnlockToken2"" -> ""2349_PayToken"";
""2349_ReturnAllTokens"" -> ""2349_restricted"";
""2349_UnlockToken2"" -> ""2349_div"";
""2349_ClaimTokens"" -> ""2349_UnlockToken2"";
""2349_UnlockToken3"" -> ""2349_UnlockToken4"";
""2349_HodlTokens3"" -> ""2349_add"";
""2349_AirdropToken"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_sub"";
""2349_HodlTokens3"" -> ""2349_HodlTokens4"";
""2349_HodlTokens3"" -> ""2349_div"";
""2349_PayToken"" -> ""2349_sub"";
""2349_PayToken"" -> ""2349_add"";
}
"
0xf0ef703a04cf96212031b51d373e8469687f308e.sol,ESCToken,contract ESCToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 1000000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function ESCToken () { owner = msg.sender; },1,"subgraph cluster_756_ESCToken {
label=""ESCToken"";
""756_ESCToken"" [label=""ESCToken""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_approve"" [label=""approve""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_refundTokens"" [label=""refundTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_createTokens"" [label=""createTokens""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_transferFrom"" [label=""transferFrom""];
""756_setOwner"" [label=""setOwner""];
""756_transfer"" -> ""756_transfer"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0x0356e14c2f8de339131c668c1747def594467a9a.sol,Club1VIT,"contract Club1VIT is Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 0; uint256 public initialSupply = 1; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; event Transfer(address indexed from, address indexed to); function totalSupply() public view returns (uint256) { return initialSupply; }",1,"subgraph cluster_329_Club1VIT {
label=""Club1VIT"";
""329_transfer"" [label=""transfer""];
""329_Club1VIT"" [label=""Club1VIT""];
""329_transferFrom"" [label=""transferFrom""];
""329_totalSupply"" [label=""totalSupply""];
""329_balanceOf"" [label=""balanceOf""];
""329_transferFrom"" -> ""329_onlyOwner"";
}
"
0xed3762edcc5820a5587105d7b9f574c711c4a700.sol,FoMo3Dshort,"contract FoMo3Dshort is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0xF6b8836492f8332D17B1496828d2bEE71ad511DA); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 public rndExtra_ = 30 minutes; uint256 public rndGap_ = 1 hours; uint256 constant private rndInit_ = 1 hours; uint256 constant private rndInc_ = 5 seconds; uint256 constant private rndMax_ = 10 minutes; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(30,6); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(56,10); fees_[3] = F3Ddatasets.TeamFee(43,8); potSplit_[0] = F3Ddatasets.PotSplit(15,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(30,10); }",1,"subgraph cluster_4199_FoMo3Dshort {
label=""FoMo3Dshort"";
""4199_iWantXKeys"" [label=""iWantXKeys""];
""4199_getBuyPrice"" [label=""getBuyPrice""];
""4199_registerNameXID"" [label=""registerNameXID""];
""4199_withdraw"" [label=""withdraw""];
""4199_endTx"" [label=""endTx""];
""4199_buyXid"" [label=""buyXid""];
""4199_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4199_buyXname"" [label=""buyXname""];
""4199_registerNameXaddr"" [label=""registerNameXaddr""];
""4199_airdrop"" [label=""airdrop""];
""4199_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4199_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4199_updateGenVault"" [label=""updateGenVault""];
""4199_updateMasks"" [label=""updateMasks""];
""4199_activate"" [label=""activate""];
""4199_updateTimer"" [label=""updateTimer""];
""4199_buyCore"" [label=""buyCore""];
""4199_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4199_reLoadXname"" [label=""reLoadXname""];
""4199_withdrawEarnings"" [label=""withdrawEarnings""];
""4199_distributeExternal"" [label=""distributeExternal""];
""4199_determinePID"" [label=""determinePID""];
""4199_verifyTeam"" [label=""verifyTeam""];
""4199_endRound"" [label=""endRound""];
""4199_calcKeysReceived"" [label=""calcKeysReceived""];
""4199_reLoadCore"" [label=""reLoadCore""];
""4199_fallback"" [label=""fallback""];
""4199_getTimeLeft"" [label=""getTimeLeft""];
""4199_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4199_core"" [label=""core""];
""4199_buyXaddr"" [label=""buyXaddr""];
""4199_registerNameXname"" [label=""registerNameXname""];
""4199_constructor"" [label=""constructor""];
""4199_reLoadXaddr"" [label=""reLoadXaddr""];
""4199_reLoadXid"" [label=""reLoadXid""];
""4199_managePlayer"" [label=""managePlayer""];
""4199_potSwap"" [label=""potSwap""];
""4199_distributeInternal"" [label=""distributeInternal""];
""4199_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4199_getPlayerVaults"" [label=""getPlayerVaults""];
""4199_core"" -> ""4199_airdrop"";
""4199_withdraw"" -> ""4199_withdrawEarnings"";
""4199_reLoadXid"" -> ""4199_reLoadCore"";
""4199_reLoadXname"" -> ""4199_isActivated"";
""4199_reLoadXid"" -> ""4199_isActivated"";
""4199_fallback"" -> ""4199_determinePID"";
""4199_buyXid"" -> ""4199_isWithinLimits"";
""4199_buyXaddr"" -> ""4199_isWithinLimits"";
""4199_buyXaddr"" -> ""4199_determinePID"";
""4199_reLoadXname"" -> ""4199_reLoadCore"";
""4199_reLoadXname"" -> ""4199_isHuman"";
""4199_buyXid"" -> ""4199_verifyTeam"";
""4199_getPlayerInfoByAddress"" -> ""4199_calcUnMaskedEarnings"";
""4199_buyCore"" -> ""4199_endRound"";
""4199_buyXaddr"" -> ""4199_buyCore"";
""4199_fallback"" -> ""4199_buyCore"";
""4199_buyXid"" -> ""4199_buyCore"";
""4199_withdraw"" -> ""4199_endRound"";
""4199_core"" -> ""4199_managePlayer"";
""4199_reLoadXaddr"" -> ""4199_isHuman"";
""4199_buyXid"" -> ""4199_isHuman"";
""4199_managePlayer"" -> ""4199_updateGenVault"";
""4199_registerNameXaddr"" -> ""4199_isHuman"";
""4199_distributeInternal"" -> ""4199_updateMasks"";
""4199_core"" -> ""4199_updateTimer"";
""4199_updateGenVault"" -> ""4199_calcUnMaskedEarnings"";
""4199_buyXname"" -> ""4199_determinePID"";
""4199_core"" -> ""4199_distributeExternal"";
""4199_fallback"" -> ""4199_isActivated"";
""4199_reLoadXname"" -> ""4199_verifyTeam"";
""4199_buyXname"" -> ""4199_isActivated"";
""4199_reLoadCore"" -> ""4199_core"";
""4199_registerNameXname"" -> ""4199_isHuman"";
""4199_reLoadCore"" -> ""4199_withdrawEarnings"";
""4199_reLoadXaddr"" -> ""4199_reLoadCore"";
""4199_withdraw"" -> ""4199_isActivated"";
""4199_core"" -> ""4199_distributeInternal"";
""4199_buyXaddr"" -> ""4199_isActivated"";
""4199_buyXname"" -> ""4199_isWithinLimits"";
""4199_buyXid"" -> ""4199_isActivated"";
""4199_core"" -> ""4199_endTx"";
""4199_getPlayerVaults"" -> ""4199_getPlayerVaultsHelper"";
""4199_getPlayerVaults"" -> ""4199_calcUnMaskedEarnings"";
""4199_buyXname"" -> ""4199_verifyTeam"";
""4199_reLoadXid"" -> ""4199_verifyTeam"";
""4199_fallback"" -> ""4199_isWithinLimits"";
""4199_buyXid"" -> ""4199_determinePID"";
""4199_registerNameXID"" -> ""4199_isHuman"";
""4199_reLoadXaddr"" -> ""4199_verifyTeam"";
""4199_buyXname"" -> ""4199_isHuman"";
""4199_reLoadXaddr"" -> ""4199_isActivated"";
""4199_fallback"" -> ""4199_isHuman"";
""4199_withdrawEarnings"" -> ""4199_updateGenVault"";
""4199_buyXname"" -> ""4199_buyCore"";
""4199_reLoadXname"" -> ""4199_isWithinLimits"";
""4199_reLoadCore"" -> ""4199_endRound"";
""4199_reLoadXid"" -> ""4199_isHuman"";
""4199_buyXaddr"" -> ""4199_verifyTeam"";
""4199_reLoadXid"" -> ""4199_isWithinLimits"";
""4199_buyCore"" -> ""4199_core"";
""4199_buyXaddr"" -> ""4199_isHuman"";
""4199_withdraw"" -> ""4199_isHuman"";
""4199_reLoadXaddr"" -> ""4199_isWithinLimits"";
}
"
0x292d448b46f5419387e3886e89680ed4b7d62d09.sol,RegistrationBonus,"contract RegistrationBonus is Ownable { address public tokenAddr; uint256 constant bonusAmount = 1 * 1 ether; mapping (address => uint) public beneficiaryAddresses; mapping (uint => address) public beneficiaryUserIds; AbstractMintableToken token; event BonusEnrolled(address beneficiary, uint userId, uint256 amount); function RegistrationBonus(address _token){ tokenAddr = _token; token = AbstractMintableToken(tokenAddr); }",1,"subgraph cluster_155_RegistrationBonus {
label=""RegistrationBonus"";
""155_RegistrationBonus"" [label=""RegistrationBonus""];
""155_addBonusToken"" [label=""addBonusToken""];
""155_addBonusToken"" -> ""155_onlyOwner"";
}
"
0x56ffb3c578906ba9658fccb052fc1a5672275b6a.sol,OpiriaCrowdsale,"contract OpiriaCrowdsale is TimedPresaleCrowdsale, MintedCrowdsale, TokenCappedCrowdsale { using SafeMath for uint256; uint256 public presaleWeiLimit; address public tokensWallet; uint256 public totalBonus = 0; bool public hiddenCapTriggered; uint16 public additionalBonusPercent = 0; mapping(address => uint256) public bonusOf; constructor(ERC20 _token, uint16 _initialEtherUsdRate, address _wallet, address _tokensWallet, uint256 _presaleOpeningTime, uint256 _presaleClosingTime, uint256 _openingTime, uint256 _closingTime ) public TimedPresaleCrowdsale(_presaleOpeningTime, _presaleClosingTime, _openingTime, _closingTime) Crowdsale(_initialEtherUsdRate, _wallet, _token) { setEtherUsdRate(_initialEtherUsdRate); tokensWallet = _tokensWallet; require(PausableToken(token).paused()); }",1,"subgraph cluster_2370_OpiriaCrowdsale {
label=""OpiriaCrowdsale"";
""2370_claimReservedTokens"" [label=""claimReservedTokens""];
""2370_setEtherUsdRate"" [label=""setEtherUsdRate""];
""2370__getTokenAmount"" [label=""_getTokenAmount""];
""2370_constructor"" [label=""constructor""];
""2370_addBonusBatch"" [label=""addBonusBatch""];
""2370__preValidatePurchase"" [label=""_preValidatePurchase""];
""2370_triggerHiddenCap"" [label=""triggerHiddenCap""];
""2370_sendTokensTo"" [label=""sendTokensTo""];
""2370_increaseCap"" [label=""increaseCap""];
""2370_withdrawBonus"" [label=""withdrawBonus""];
""2370__getBonusAmount"" [label=""_getBonusAmount""];
""2370_unlockTokenTransfers"" [label=""unlockTokenTransfers""];
""2370_distributeBonus"" [label=""distributeBonus""];
""2370__processPurchase"" [label=""_processPurchase""];
""2370_sendTokensToBatch"" [label=""sendTokensToBatch""];
""2370__saveBonus"" [label=""_saveBonus""];
""2370__getBonusPercent"" [label=""_getBonusPercent""];
""2370_finalization"" [label=""finalization""];
""2370_setAdditionalBonusPercent"" [label=""setAdditionalBonusPercent""];
""2370__preValidatePurchase"" -> ""2370__getBonusAmount"";
""2370_claimReservedTokens"" -> ""2370_onlyOwner"";
""2370__preValidatePurchase"" -> ""2370__getTokenAmount"";
""2370_unlockTokenTransfers"" -> ""2370_onlyOwner"";
""2370_increaseCap"" -> ""2370_onlyOwner"";
""2370_triggerHiddenCap"" -> ""2370_onlyOwner"";
""2370_sendTokensToBatch"" -> ""2370_sendTokensTo"";
""2370_setEtherUsdRate"" -> ""2370_onlyOwner"";
""2370_addBonusBatch"" -> ""2370_notExceedingSaleCap"";
""2370_distributeBonus"" -> ""2370_onlyOwner"";
""2370_sendTokensTo"" -> ""2370_onlyOwner"";
""2370_finalization"" -> ""2370_finalization"";
""2370__preValidatePurchase"" -> ""2370_isPresale"";
""2370_setAdditionalBonusPercent"" -> ""2370_onlyOwner"";
""2370__saveBonus"" -> ""2370__getBonusAmount"";
""2370__preValidatePurchase"" -> ""2370_notExceedingSaleCap"";
""2370__getBonusAmount"" -> ""2370__getBonusPercent"";
""2370_addBonusBatch"" -> ""2370_onlyOwner"";
""2370_constructor"" -> ""2370_constructor"";
""2370__getBonusPercent"" -> ""2370_isPresale"";
""2370__processPurchase"" -> ""2370__deliverTokens"";
""2370__preValidatePurchase"" -> ""2370__preValidatePurchase"";
""2370_finalization"" -> ""2370__deliverTokens"";
""2370_constructor"" -> ""2370_setEtherUsdRate"";
""2370_withdrawBonus"" -> ""2370__deliverTokens"";
""2370_sendTokensTo"" -> ""2370_notExceedingSaleCap"";
""2370_sendTokensToBatch"" -> ""2370_onlyOwner"";
""2370__processPurchase"" -> ""2370__saveBonus"";
""2370_distributeBonus"" -> ""2370__deliverTokens"";
""2370_claimReservedTokens"" -> ""2370__deliverTokens"";
}
"
0xef86db910c71ffa3c80233bc9108dc51ad1e008a.sol,CommonWallet,"contract CommonWallet { mapping(address => mapping (address => uint256)) public tokenBalance; mapping(address => uint) etherBalance; address owner = msg.sender; function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) { uint256 z = _x + _y; assert(z >= _x); return z; }",1,"subgraph cluster_387_CommonWallet {
label=""CommonWallet"";
""387_sendTokenTo"" [label=""sendTokenTo""];
""387_wdEther"" [label=""wdEther""];
""387_safeAdd"" [label=""safeAdd""];
""387_wdToken"" [label=""wdToken""];
""387_sendEtherTo"" [label=""sendEtherTo""];
""387_depoEther"" [label=""depoEther""];
""387_getEtherBalance"" [label=""getEtherBalance""];
""387_safeSub"" [label=""safeSub""];
""387_depoToken"" [label=""depoToken""];
""387_getTokenBalance"" [label=""getTokenBalance""];
""387_sendEtherTo"" -> ""387_safeSub"";
""387_wdEther"" -> ""387_safeSub"";
""387_wdToken"" -> ""387_safeSub"";
""387_depoToken"" -> ""387_safeAdd"";
""387_sendTokenTo"" -> ""387_safeSub"";
}
"
0x6d4106c5c6cddeb5e0bbda23c4555a45dfaa92d7.sol,CucuSale,"contract CucuSale { address public beneficiary; uint public amountRaised; uint public price; uint public dynamicLocktime; uint public globalLocktime; uint public lockType = 0; token public tokenReward; uint public exchangeRate; mapping(address => uint256) public balanceOf; mapping(address => uint256) public tokenBalanceOf; mapping(address => uint256) public timelocksOf; address[] public founders; address public owner; event FundTransfer(address backer, uint amount, uint exchangeRate, uint token, uint time, uint timelock, bool isContribution); event IsCharged(bool isCharged); event TokensClaimed(address founder, uint tokens); event TransferOwnership(); event ChangeExchangeRate(uint oldExchangeRate, uint newExchangeRate); event NewGlobalLocktime(uint timelockUntil); event NewDynamicLocktime(uint timelockUntil); uint public tokenAvailable = 0; bool public charged = false; uint lastActionId = 0; constructor( address _beneficiary, address _addressOfTokenUsedAsReward, uint _globalLocktime, uint _dynamicLocktime, uint _exchangeRate ) public { beneficiary = _beneficiary; dynamicLocktime = _dynamicLocktime; tokenReward = token(_addressOfTokenUsedAsReward); globalLocktime = now + _globalLocktime * 1 minutes; exchangeRate = _exchangeRate; owner = msg.sender; }",1,"subgraph cluster_548_CucuSale {
label=""CucuSale"";
""548_transferRaisedFunds"" [label=""transferRaisedFunds""];
""548_setDynamicLocktime"" [label=""setDynamicLocktime""];
""548_transferOwnership"" [label=""transferOwnership""];
""548_constructor"" [label=""constructor""];
""548_setExchangeRate"" [label=""setExchangeRate""];
""548_unlockTokensFor"" [label=""unlockTokensFor""];
""548_doChargeCrowdsale"" [label=""doChargeCrowdsale""];
""548_resetLockFor"" [label=""resetLockFor""];
""548_setGlobalLocktime"" [label=""setGlobalLocktime""];
""548_fallback"" [label=""fallback""];
""548_setLockType"" [label=""setLockType""];
""548_claimTokens"" [label=""claimTokens""];
""548_getLeftOver"" [label=""getLeftOver""];
""548_unlockTokensFor"" -> ""548_onlyOwner"";
""548_getLeftOver"" -> ""548_onlyOwner"";
""548_doChargeCrowdsale"" -> ""548_onlyOwner"";
""548_setGlobalLocktime"" -> ""548_onlyOwner"";
""548_setDynamicLocktime"" -> ""548_onlyOwner"";
""548_transferRaisedFunds"" -> ""548_onlyOwner"";
""548_setLockType"" -> ""548_onlyOwner"";
""548_resetLockFor"" -> ""548_onlyOwner"";
""548_transferOwnership"" -> ""548_onlyOwner"";
""548_setExchangeRate"" -> ""548_onlyOwner"";
}
"
0x4c84949b55f21a376dba12e732958ede8b033b0e.sol,TokenVesting,contract TokenVesting { using SafeMath for uint256; struct VestingGrant { bool isGranted; address issuer; address beneficiary; uint256 grantJiffys; uint256 startTimestamp; uint256 cliffTimestamp; uint256 endTimestamp; bool isRevocable; uint256 releasedJiffys; },1,"subgraph cluster_591_TokenVesting {
label=""TokenVesting"";
""591_initialize"" [label=""initialize""];
""591_TokenVesting"" [label=""TokenVesting""];
""591_getGrantBalanceOf"" [label=""getGrantBalanceOf""];
""591_getGrantBeneficiaries"" [label=""getGrantBeneficiaries""];
""591_fallback"" [label=""fallback""];
""591_revoke"" [label=""revoke""];
""591_getGrantBalance"" [label=""getGrantBalance""];
""591_release"" [label=""release""];
""591_grant"" [label=""grant""];
""591_releaseFor"" [label=""releaseFor""];
""591_releaseFor"" -> ""591_requireIsOperational"";
""591_getGrantBalance"" -> ""591_getGrantBalanceOf"";
""591_grant"" -> ""591_releaseFor"";
""591_release"" -> ""591_releaseFor"";
""591_initialize"" -> ""591_grant"";
""591_revoke"" -> ""591_requireIsOperational"";
""591_grant"" -> ""591_requireIsOperational"";
}
"
0x174bb5d84b78e9e2248e7aa2c789aeba82f72f68.sol,LuckyTree,"contract LuckyTree is Owned, SafeMath{ uint public leafPrice; uint public gameStart; uint public gameDuration; uint public tokenLockDuration; uint public totalParticipationAmount; uint public totalLockedAmount; uint public numberOfLeafs; uint public participantIndex; bool public fundsTransfered; address public winner; mapping(uint => address) public participants; mapping(uint => uint) public participationAmount; mapping(address => bool) public hasParticipated; mapping(address => bool) public hasWithdrawn; mapping(address => uint) public participantIndexes; mapping(uint => address) public leafOwners; event GameWinner(address winner); event GameEnded(uint block); event GameStarted(uint block); event GameFailed(uint block); event GameLocked(uint block); event GameUnlocked(uint block); enum state{ pending, running, paused, finished, closed, claimed }",1,"subgraph cluster_1043_LuckyTree {
label=""LuckyTree"";
""1043_random"" [label=""random""];
""1043_lockFunds"" [label=""lockFunds""];
""1043_processTransaction"" [label=""processTransaction""];
""1043_closeGame"" [label=""closeGame""];
""1043_pickWinner"" [label=""pickWinner""];
""1043_manuallyProcessTransaction"" [label=""manuallyProcessTransaction""];
""1043_unlockFunds"" [label=""unlockFunds""];
""1043_setCreditGameAddress"" [label=""setCreditGameAddress""];
""1043_checkInternalBalance"" [label=""checkInternalBalance""];
""1043_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""1043_setTokenAddress"" [label=""setTokenAddress""];
""1043_receiveApproval"" [label=""receiveApproval""];
""1043_LuckyTree"" [label=""LuckyTree""];
""1043_getVariablesForDapp"" [label=""getVariablesForDapp""];
""1043_manualLockFunds"" [label=""manualLockFunds""];
""1043_killContract"" [label=""killContract""];
""1043_salvageTokensFromContract"" -> ""1043_onlyOwner"";
""1043_manuallyProcessTransaction"" -> ""1043_onlyOwner"";
""1043_manualLockFunds"" -> ""1043_onlyOwner"";
""1043_setCreditGameAddress"" -> ""1043_onlyOwner"";
""1043_setTokenAddress"" -> ""1043_onlyOwner"";
""1043_pickWinner"" -> ""1043_random"";
""1043_closeGame"" -> ""1043_onlyOwner"";
""1043_killContract"" -> ""1043_onlyOwner"";
""1043_receiveApproval"" -> ""1043_processTransaction"";
""1043_manualLockFunds"" -> ""1043_pickWinner"";
""1043_pickWinner"" -> ""1043_lockFunds"";
""1043_processTransaction"" -> ""1043_pickWinner"";
""1043_manuallyProcessTransaction"" -> ""1043_processTransaction"";
}
"
0x2682e3ad5358932ac5cd8f8616912cec76ad680c.sol,CupExchange,"contract CupExchange { using SafeMath for uint256; using SafeMath for int256; address public owner; token internal teamCup; token internal cup; uint256 public exchangePrice; bool public halting = true; event Halted(bool halting); event Exchange(address user, uint256 distributedAmount, uint256 collectedAmount); constructor(address cupToken, address teamCupToken) public { owner = msg.sender; teamCup = token(teamCupToken); cup = token(cupToken); }",1,"subgraph cluster_373_CupExchange {
label=""CupExchange"";
""373_exchange"" [label=""exchange""];
""373_safeWithdrawal"" [label=""safeWithdrawal""];
""373_setExchangePrice"" [label=""setExchangePrice""];
""373_constructor"" [label=""constructor""];
""373_halt"" [label=""halt""];
""373_unhalt"" [label=""unhalt""];
""373_safeWithdrawal"" -> ""373_onlyOwner"";
""373_unhalt"" -> ""373_onlyOwner"";
""373_halt"" -> ""373_onlyOwner"";
""373_setExchangePrice"" -> ""373_onlyOwner"";
}
"
0x2e59c87e9349242063793761780550374a3146cf.sol,THORToken,contract THORToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 500000000 * (10**8); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function THORToken () { owner = msg.sender; },1,"subgraph cluster_756_THORToken {
label=""THORToken"";
""756_transfer"" [label=""transfer""];
""756_setOwner"" [label=""setOwner""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transferFrom"" [label=""transferFrom""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_totalSupply"" [label=""totalSupply""];
""756_createTokens"" [label=""createTokens""];
""756_approve"" [label=""approve""];
""756_THORToken"" [label=""THORToken""];
""756_refundTokens"" [label=""refundTokens""];
""756_approve"" -> ""756_approve"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_createTokens"" -> ""756_safeSub"";
""756_transfer"" -> ""756_transfer"";
}
"
0x6f9e77dc013e6a7156a5aeb26fb095f3405fd911.sol,FlexibleTokenSale,"contract FlexibleTokenSale is Owned { using SafeMath for uint256; bool public suspended; uint256 public tokenPrice; uint256 public tokenPerEther; uint256 public contributionMin; uint256 public tokenConversionFactor; address public walletAddress; TokenTransfer token; uint256 public totalTokensSold; uint256 public totalEtherCollected; address public priceUpdateAddress; event Initialized(); event TokenPriceUpdated(uint256 _newValue); event TokenPerEtherUpdated(uint256 _newValue); event TokenMinUpdated(uint256 _newValue); event WalletAddressUpdated(address indexed _newAddress); event SaleSuspended(); event SaleResumed(); event TokensPurchased(address indexed _beneficiary, uint256 _cost, uint256 _tokens); event TokensReclaimed(uint256 _amount); event PriceAddressUpdated(address indexed _newAddress); function FlexibleTokenSale(address _tokenAddress,address _walletAddress,uint _tokenPerEther,address _priceUpdateAddress) public Owned() { require(_walletAddress != address(0)); require(_walletAddress != address(this)); require(address(token) == address(0)); require(address(_tokenAddress) != address(0)); require(address(_tokenAddress) != address(this)); require(address(_tokenAddress) != address(walletAddress)); walletAddress = _walletAddress; priceUpdateAddress = _priceUpdateAddress; token = TokenTransfer(_tokenAddress); suspended = false; tokenPrice = 100; tokenPerEther = _tokenPerEther; contributionMin = 5 * 10**18; totalTokensSold = 0; totalEtherCollected = 0; tokenConversionFactor = 10**(uint256(18).sub(token.decimals()).add(2)); assert(tokenConversionFactor > 0); }",1,"subgraph cluster_883_FlexibleTokenSale {
label=""FlexibleTokenSale"";
""883_setMinToken"" [label=""setMinToken""];
""883_setWalletAddress"" [label=""setWalletAddress""];
""883_suspend"" [label=""suspend""];
""883_buyTokensInternal"" [label=""buyTokensInternal""];
""883_updatePriceAddress"" [label=""updatePriceAddress""];
""883_reclaimTokens"" [label=""reclaimTokens""];
""883_buyTokens"" [label=""buyTokens""];
""883_resume"" [label=""resume""];
""883_setTokenPrice"" [label=""setTokenPrice""];
""883_fallback"" [label=""fallback""];
""883_updateTokenPerEther"" [label=""updateTokenPerEther""];
""883_FlexibleTokenSale"" [label=""FlexibleTokenSale""];
""883_setMinToken"" -> ""883_onlyOwner"";
""883_FlexibleTokenSale"" -> ""883_Owned"";
""883_suspend"" -> ""883_onlyOwner"";
""883_buyTokens"" -> ""883_buyTokensInternal"";
""883_resume"" -> ""883_onlyOwner"";
""883_reclaimTokens"" -> ""883_onlyOwner"";
""883_setWalletAddress"" -> ""883_isOwner"";
""883_setWalletAddress"" -> ""883_onlyOwner"";
""883_setTokenPrice"" -> ""883_onlyOwner"";
""883_fallback"" -> ""883_buyTokens"";
""883_updatePriceAddress"" -> ""883_onlyOwner"";
}
"
0x0e54b1b8ff833b5f2b0d17453d97d340cb7576e4.sol,ERC223Token,"contract ERC223Token is IERC223, SafeMath { mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 35000000 * 10**8; function ERC223Token() { balances[msg.sender] = totalSupply; }",1,"subgraph cluster_534_ERC223Token {
label=""ERC223Token"";
""534_ERC223Token"" [label=""ERC223Token""];
""534_symbol"" [label=""symbol""];
""534_totalSupply"" [label=""totalSupply""];
""534_transferToAddress"" [label=""transferToAddress""];
""534_balanceOf"" [label=""balanceOf""];
""534_transferToContract"" [label=""transferToContract""];
""534_transfer"" [label=""transfer""];
""534_name"" [label=""name""];
""534_isContract"" [label=""isContract""];
""534_decimals"" [label=""decimals""];
""534_transfer"" -> ""534_safeAdd"";
""534_transferToContract"" -> ""534_safeAdd"";
""534_transferToAddress"" -> ""534_balanceOf"";
""534_transferToContract"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_safeSub"";
""534_transferToAddress"" -> ""534_safeSub"";
""534_transferToContract"" -> ""534_safeSub"";
""534_transfer"" -> ""534_transferToAddress"";
""534_transfer"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_transferToContract"";
""534_transfer"" -> ""534_isContract"";
""534_transferToAddress"" -> ""534_safeAdd"";
}
"
0x261ace754fba8af93e1fecdff13640540402940f.sol,Phila_Token,"contract Phila_Token is ERC20Interface, Owned { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 0; uint private constant _totalSupply = 10000000; address public vaultAddress; bool public fundingEnabled; uint public totalCollected; uint public tokenPrice; mapping(address => uint) balances; constructor() public { balances[this] = _totalSupply; emit Transfer(address(0), this, _totalSupply); }",1,"subgraph cluster_499_Phila_Token {
label=""Phila_Token"";
""499_transfer"" [label=""transfer""];
""499_approve"" [label=""approve""];
""499_constructor"" [label=""constructor""];
""499_fallback"" [label=""fallback""];
""499_balanceOf"" [label=""balanceOf""];
""499_transferFrom"" [label=""transferFrom""];
""499_totalSupply"" [label=""totalSupply""];
""499_allowance"" [label=""allowance""];
""499_setVaultAddress"" [label=""setVaultAddress""];
""499_claimTokens"" [label=""claimTokens""];
""499_setFundingEnabled"" [label=""setFundingEnabled""];
""499_updateTokenPrice"" [label=""updateTokenPrice""];
""499_updateTokenPrice"" -> ""499_onlyOwner"";
""499_claimTokens"" -> ""499_onlyOwner"";
""499_setVaultAddress"" -> ""499_onlyOwner"";
""499_setFundingEnabled"" -> ""499_onlyOwner"";
}
"
0x4c129783b42833220ad57d48548f871189009d3f.sol,HoQuBurner,"contract HoQuBurner is Ownable { using SafeMath for uint256; HoQuToken public token; mapping(address => uint256) public claimed; mapping(uint32 => address) public transactionAddresses; mapping(uint32 => uint256) public transactionAmounts; uint32 public transactionsCount; event TokenBurned(address indexed _sender, uint256 _tokens); function HoQuBurner(address _tokenAddress) { token = HoQuToken(_tokenAddress); }",1,"subgraph cluster_647_HoQuBurner {
label=""HoQuBurner"";
""647_HoQuBurner"" [label=""HoQuBurner""];
""647_burnFrom"" [label=""burnFrom""];
""647_burn"" [label=""burn""];
""647_burnFrom"" -> ""647_onlyOwner"";
""647_burn"" -> ""647_burnFrom"";
}
"
0x3a966ffa8451cbf3769b7d1f94d5b47da254edb0.sol,Play0x_LottoBall,contract Play0x_LottoBall { using SafeMath for uint256; using SafeMath for uint128; using SafeMath for uint40; using SafeMath for uint8; uint public jackpotSize; uint public tokenJackpotSize; uint public MIN_BET; uint public MAX_BET; uint public MAX_AMOUNT; uint public maxProfit; uint public maxTokenProfit; uint8 public platformFeePercentage = 15; uint8 public jackpotFeePercentage = 5; uint8 public ERC20rewardMultiple = 5; uint constant BetExpirationBlocks = 250; uint public lockedInBets; uint public lockedTokenInBets; bytes32 bitComparisonMask = 0xF; address public owner; address private nextOwner; address public manager; address private nextManager; address[] public secretSignerList; address public ERC20ContractAddres; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Bet { uint amount; uint40 placeBlockNumber; address gambler; },1,"subgraph cluster_3084_Play0x_LottoBall {
label=""Play0x_LottoBall"";
""3084_setMaxProfit"" [label=""setMaxProfit""];
""3084_getJackpotWinBonus"" [label=""getJackpotWinBonus""];
""3084_sendFunds"" [label=""sendFunds""];
""3084_sendTokenFundsToManager"" [label=""sendTokenFundsToManager""];
""3084_updateMAX_AMOUNT"" [label=""updateMAX_AMOUNT""];
""3084_approveNextOwner"" [label=""approveNextOwner""];
""3084_getBonusPercentageByMachineMode"" [label=""getBonusPercentageByMachineMode""];
""3084_withdrawAlltokenFunds"" [label=""withdrawAlltokenFunds""];
""3084_updateBitComparisonMask"" [label=""updateBitComparisonMask""];
""3084_settleBetVerifi"" [label=""settleBetVerifi""];
""3084_withdrawToken"" [label=""withdrawToken""];
""3084_getPossibleWinAmount"" [label=""getPossibleWinAmount""];
""3084_setTokenAddress"" [label=""setTokenAddress""];
""3084_withdrawFunds"" [label=""withdrawFunds""];
""3084_updateJackpotFeePercentage"" [label=""updateJackpotFeePercentage""];
""3084_updatePlatformFeePercentage"" [label=""updatePlatformFeePercentage""];
""3084_refundBet"" [label=""refundBet""];
""3084_updateERC20rewardMultiple"" [label=""updateERC20rewardMultiple""];
""3084_updateMIN_BET"" [label=""updateMIN_BET""];
""3084_settleBet"" [label=""settleBet""];
""3084_clearProcessedBet"" [label=""clearProcessedBet""];
""3084_getContractInformation"" [label=""getContractInformation""];
""3084_withdrawAllFunds"" [label=""withdrawAllFunds""];
""3084_refundTokenBet"" [label=""refundTokenBet""];
""3084_updateWithdrawalModeByIndex"" [label=""updateWithdrawalModeByIndex""];
""3084_setSecretSignerByIndex"" [label=""setSecretSignerByIndex""];
""3084_runRotateTime"" [label=""runRotateTime""];
""3084_getContractAddress"" [label=""getContractAddress""];
""3084_initialParameter"" [label=""initialParameter""];
""3084_setSecretSignerList"" [label=""setSecretSignerList""];
""3084_fallback"" [label=""fallback""];
""3084_placeTokenBet"" [label=""placeTokenBet""];
""3084_sendFundsToOwner"" [label=""sendFundsToOwner""];
""3084_constructor"" [label=""constructor""];
""3084_acceptNextOwner"" [label=""acceptNextOwner""];
""3084_updateWithdrawalMode"" [label=""updateWithdrawalMode""];
""3084_sendFundsToManager"" [label=""sendFundsToManager""];
""3084_kill"" [label=""kill""];
""3084_acceptNextManager"" [label=""acceptNextManager""];
""3084_clearStorage"" [label=""clearStorage""];
""3084_updateMAX_BET"" [label=""updateMAX_BET""];
""3084_placeBet"" [label=""placeBet""];
""3084_approveNextManager"" [label=""approveNextManager""];
""3084_withdrawToken"" -> ""3084_onlyOwner"";
""3084_updateBitComparisonMask"" -> ""3084_onlyOwner"";
""3084_clearStorage"" -> ""3084_clearProcessedBet"";
""3084_withdrawAllFunds"" -> ""3084_onlyOwner"";
""3084_sendFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getPossibleWinAmount"";
""3084_updateJackpotFeePercentage"" -> ""3084_onlyOwner"";
""3084_setMaxProfit"" -> ""3084_onlyOwner"";
""3084_withdrawAlltokenFunds"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_sendFunds"";
""3084_setTokenAddress"" -> ""3084_onlyManager"";
""3084_updateWithdrawalModeByIndex"" -> ""3084_onlyManager"";
""3084_updateERC20rewardMultiple"" -> ""3084_onlyManager"";
""3084_updateMIN_BET"" -> ""3084_onlyManager"";
""3084_initialParameter"" -> ""3084_onlyOwner"";
""3084_setSecretSignerByIndex"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_onlyOwner"";
""3084_approveNextManager"" -> ""3084_onlyManager"";
""3084_setSecretSignerList"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_sendFunds"";
""3084_refundBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_sendTokenFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_kill"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_runRotateTime"";
""3084_sendFundsToOwner"" -> ""3084_onlyOwner"";
""3084_approveNextOwner"" -> ""3084_onlyOwner"";
""3084_updateMAX_AMOUNT"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_getPossibleWinAmount"";
""3084_updatePlatformFeePercentage"" -> ""3084_onlyOwner"";
""3084_settleBetVerifi"" -> ""3084_runRotateTime"";
""3084_updateWithdrawalMode"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_sendFunds"";
""3084_runRotateTime"" -> ""3084_getJackpotWinBonus"";
""3084_updateMAX_BET"" -> ""3084_onlyManager"";
}
"
0x20c476bb4c7aa64f919278fb9c09e880583beb4c.sol,X3ProfitMainFundTransfer,contract X3ProfitMainFundTransfer { uint public constant maxBalance = 340282366920938463463374607431768211456 wei; address public constant ADDRESS_EIFP2_CONTRACT = 0xf85D337017D9e6600a433c5036E0D18EdD0380f3; address public constant ADDRESS_ADMIN = 0x6249046Af9FB588bb4E70e62d9403DD69239bdF5; bool private isResend = false; function () external payable { if(msg.value == 0 || (msg.sender == ADDRESS_EIFP2_CONTRACT && msg.value >= 0.1 ether && !isResend)){ if(ADDRESS_EIFP2_CONTRACT.balance > maxBalance) { ADDRESS_ADMIN.transfer(address(this).balance); return; },1,"subgraph cluster_79_X3ProfitMainFundTransfer {
label=""X3ProfitMainFundTransfer"";
""79_fallback"" [label=""fallback""];
}
"
0x4bc78f6619991b029b867b6d88d39c196332aba3.sol,AlgoDEX,"contract AlgoDEX is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_AlgoDEX {
label=""AlgoDEX"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_trade"" [label=""trade""];
""1614_deposit"" [label=""deposit""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_depositToken"" [label=""depositToken""];
""1614_order"" [label=""order""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_constructor"" [label=""constructor""];
""1614_testTrade"" [label=""testTrade""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_withdraw"" -> ""1614_safeSub"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
}
"
0x514bc174df04a4b04ae2be81ee8c788c3796b06b.sol,Deco,contract Deco is ERC20ERC223 { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant totalSupply = 6*10**26; mapping(address => Account) private accounts; struct Account { uint256 balance; mapping(address => uint256) allowed; mapping(address => bool) isAllowanceAuthorized; },1,"subgraph cluster_615_Deco {
label=""Deco"";
""615_hasApproval"" [label=""hasApproval""];
""615_allowance"" [label=""allowance""];
""615_removeApproval"" [label=""removeApproval""];
""615_balanceOf"" [label=""balanceOf""];
""615_approve"" [label=""approve""];
""615_isContract"" [label=""isContract""];
""615_transfer"" [label=""transfer""];
""615_Deco"" [label=""Deco""];
""615_transferFrom"" [label=""transferFrom""];
""615_performTransfer"" [label=""performTransfer""];
""615_transfer"" -> ""615_performTransfer"";
""615_transferFrom"" -> ""615_performTransfer"";
""615_transferFrom"" -> ""615_hasApproval"";
""615_performTransfer"" -> ""615_isContract"";
""615_transfer"" -> ""615_onlyPayloadSize"";
""615_transferFrom"" -> ""615_onlyPayloadSize"";
}
"
0x89234fab776fb68ec3c33529aa66f09b69a7b5f0.sol,SynergisProxyDeposit,"contract SynergisProxyDeposit is Ownable { using SafeMath for uint256; enum Role {Fund, Team, Adviser}",1,"subgraph cluster_968_SynergisProxyDeposit {
label=""SynergisProxyDeposit"";
""968_withdraw"" [label=""withdraw""];
""968_newDeposit"" [label=""newDeposit""];
""968_deleteDeposit"" [label=""deleteDeposit""];
""968_removeSpecialOffer"" [label=""removeSpecialOffer""];
""968_constructor"" [label=""constructor""];
""968_checkBalance"" [label=""checkBalance""];
""968_distributeIncomeEther"" [label=""distributeIncomeEther""];
""968_addSpecialOffer"" [label=""addSpecialOffer""];
""968_getDepositID"" [label=""getDepositID""];
""968_sellTokens"" [label=""sellTokens""];
""968_fallback"" [label=""fallback""];
""968_setERC20address"" [label=""setERC20address""];
""968_distributeIncomeEther"" -> ""968_onlyOwner"";
""968_setERC20address"" -> ""968_onlyOwner"";
""968_deleteDeposit"" -> ""968_onlyOwner"";
""968_newDeposit"" -> ""968_onlyOwner"";
""968_deleteDeposit"" -> ""968_getDepositID"";
""968_fallback"" -> ""968_sellTokens"";
""968_withdraw"" -> ""968_getDepositID"";
""968_addSpecialOffer"" -> ""968_onlyOwner"";
""968_removeSpecialOffer"" -> ""968_onlyOwner"";
""968_newDeposit"" -> ""968_getDepositID"";
}
"
0x85b794252e7f1b2b24392a5267ff2086c0c3d7d1.sol,CashPokerProPreICO,"contract CashPokerProPreICO is Ownable, Pausable { using SafeMath for uint; address public tokenWallet; uint public tokensSold; uint public weiRaised; uint public investorCount; Token public token; uint constant minInvest = 0.01 ether; uint constant tokensLimit = 10000000 * 1 ether; uint256 public startTime = 1503770400; uint256 public endTime = 1504893600; uint price = 0.00017 * 1 ether; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function CashPokerProPreICO() { tokenWallet = msg.sender; }",1,"subgraph cluster_489_CashPokerProPreICO {
label=""CashPokerProPreICO"";
""489_fallback"" [label=""fallback""];
""489_setTokenWallet"" [label=""setTokenWallet""];
""489_withdrawal"" [label=""withdrawal""];
""489_setToken"" [label=""setToken""];
""489_buyTokens"" [label=""buyTokens""];
""489_transfer"" [label=""transfer""];
""489_CashPokerProPreICO"" [label=""CashPokerProPreICO""];
""489_setTokenWallet"" -> ""489_onlyOwner"";
""489_withdrawal"" -> ""489_onlyOwner"";
""489_setToken"" -> ""489_onlyOwner"";
""489_buyTokens"" -> ""489_whenNotPaused"";
""489_transfer"" -> ""489_onlyOwner"";
""489_fallback"" -> ""489_buyTokens"";
}
"
0x3a966ffa8451cbf3769b7d1f94d5b47da254edb0.sol,Play0x_LottoBall,contract Play0x_LottoBall { using SafeMath for uint256; using SafeMath for uint128; using SafeMath for uint40; using SafeMath for uint8; uint public jackpotSize; uint public tokenJackpotSize; uint public MIN_BET; uint public MAX_BET; uint public MAX_AMOUNT; uint public maxProfit; uint public maxTokenProfit; uint8 public platformFeePercentage = 15; uint8 public jackpotFeePercentage = 5; uint8 public ERC20rewardMultiple = 5; uint constant BetExpirationBlocks = 250; uint public lockedInBets; uint public lockedTokenInBets; bytes32 bitComparisonMask = 0xF; address public owner; address private nextOwner; address public manager; address private nextManager; address[] public secretSignerList; address public ERC20ContractAddres; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Bet { uint amount; uint40 placeBlockNumber; address gambler; },1,"subgraph cluster_3084_Play0x_LottoBall {
label=""Play0x_LottoBall"";
""3084_setMaxProfit"" [label=""setMaxProfit""];
""3084_getJackpotWinBonus"" [label=""getJackpotWinBonus""];
""3084_sendFunds"" [label=""sendFunds""];
""3084_sendTokenFundsToManager"" [label=""sendTokenFundsToManager""];
""3084_updateMAX_AMOUNT"" [label=""updateMAX_AMOUNT""];
""3084_approveNextOwner"" [label=""approveNextOwner""];
""3084_getBonusPercentageByMachineMode"" [label=""getBonusPercentageByMachineMode""];
""3084_withdrawAlltokenFunds"" [label=""withdrawAlltokenFunds""];
""3084_updateBitComparisonMask"" [label=""updateBitComparisonMask""];
""3084_settleBetVerifi"" [label=""settleBetVerifi""];
""3084_withdrawToken"" [label=""withdrawToken""];
""3084_getPossibleWinAmount"" [label=""getPossibleWinAmount""];
""3084_setTokenAddress"" [label=""setTokenAddress""];
""3084_withdrawFunds"" [label=""withdrawFunds""];
""3084_updateJackpotFeePercentage"" [label=""updateJackpotFeePercentage""];
""3084_updatePlatformFeePercentage"" [label=""updatePlatformFeePercentage""];
""3084_refundBet"" [label=""refundBet""];
""3084_updateERC20rewardMultiple"" [label=""updateERC20rewardMultiple""];
""3084_updateMIN_BET"" [label=""updateMIN_BET""];
""3084_settleBet"" [label=""settleBet""];
""3084_clearProcessedBet"" [label=""clearProcessedBet""];
""3084_getContractInformation"" [label=""getContractInformation""];
""3084_withdrawAllFunds"" [label=""withdrawAllFunds""];
""3084_refundTokenBet"" [label=""refundTokenBet""];
""3084_updateWithdrawalModeByIndex"" [label=""updateWithdrawalModeByIndex""];
""3084_setSecretSignerByIndex"" [label=""setSecretSignerByIndex""];
""3084_runRotateTime"" [label=""runRotateTime""];
""3084_getContractAddress"" [label=""getContractAddress""];
""3084_initialParameter"" [label=""initialParameter""];
""3084_setSecretSignerList"" [label=""setSecretSignerList""];
""3084_fallback"" [label=""fallback""];
""3084_placeTokenBet"" [label=""placeTokenBet""];
""3084_sendFundsToOwner"" [label=""sendFundsToOwner""];
""3084_constructor"" [label=""constructor""];
""3084_acceptNextOwner"" [label=""acceptNextOwner""];
""3084_updateWithdrawalMode"" [label=""updateWithdrawalMode""];
""3084_sendFundsToManager"" [label=""sendFundsToManager""];
""3084_kill"" [label=""kill""];
""3084_acceptNextManager"" [label=""acceptNextManager""];
""3084_clearStorage"" [label=""clearStorage""];
""3084_updateMAX_BET"" [label=""updateMAX_BET""];
""3084_placeBet"" [label=""placeBet""];
""3084_approveNextManager"" [label=""approveNextManager""];
""3084_withdrawToken"" -> ""3084_onlyOwner"";
""3084_updateBitComparisonMask"" -> ""3084_onlyOwner"";
""3084_clearStorage"" -> ""3084_clearProcessedBet"";
""3084_withdrawAllFunds"" -> ""3084_onlyOwner"";
""3084_sendFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getPossibleWinAmount"";
""3084_updateJackpotFeePercentage"" -> ""3084_onlyOwner"";
""3084_setMaxProfit"" -> ""3084_onlyOwner"";
""3084_withdrawAlltokenFunds"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_sendFunds"";
""3084_setTokenAddress"" -> ""3084_onlyManager"";
""3084_updateWithdrawalModeByIndex"" -> ""3084_onlyManager"";
""3084_updateERC20rewardMultiple"" -> ""3084_onlyManager"";
""3084_updateMIN_BET"" -> ""3084_onlyManager"";
""3084_initialParameter"" -> ""3084_onlyOwner"";
""3084_setSecretSignerByIndex"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_onlyOwner"";
""3084_approveNextManager"" -> ""3084_onlyManager"";
""3084_setSecretSignerList"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_sendFunds"";
""3084_refundBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_sendTokenFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_kill"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_runRotateTime"";
""3084_sendFundsToOwner"" -> ""3084_onlyOwner"";
""3084_approveNextOwner"" -> ""3084_onlyOwner"";
""3084_updateMAX_AMOUNT"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_getPossibleWinAmount"";
""3084_updatePlatformFeePercentage"" -> ""3084_onlyOwner"";
""3084_settleBetVerifi"" -> ""3084_runRotateTime"";
""3084_updateWithdrawalMode"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_sendFunds"";
""3084_runRotateTime"" -> ""3084_getJackpotWinBonus"";
""3084_updateMAX_BET"" -> ""3084_onlyManager"";
}
"
0x17f68886d00845867c154c912b4ccc506ec92fc7.sol,DelegatedShareholderAssociation,"contract DelegatedShareholderAssociation is TokenRecipient { uint public minimumQuorum; uint public debatingPeriodInMinutes; Proposal[] public proposals; uint public numProposals; ERC20 public sharesTokenAddress; mapping (address => address) public delegatesByDelegator; mapping (address => uint) public lockedDelegatingTokens; mapping (address => uint) public delegatedAmountsByDelegate; uint public totalLockedTokens; uint public requiredSharesToBeBoardMember; TokenLocker public tokenLocker; event ProposalAdded(uint proposalID, address recipient, uint amount, bytes metadataHash); event Voted(uint proposalID, bool position, address voter); event ProposalTallied(uint proposalID, uint yea, uint nay, uint quorum, bool active); event ChangeOfRules(uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newSharesTokenAddress); event TokensDelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); event TokensUndelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); struct Proposal { address recipient; uint amount; bytes metadataHash; uint timeCreated; uint votingDeadline; bool finalized; bool proposalPassed; uint numberOfVotes; bytes32 proposalHash; Vote[] votes; mapping (address => bool) voted; }",1,"subgraph cluster_1103_DelegatedShareholderAssociation {
label=""DelegatedShareholderAssociation"";
""1103_changeVotingRules"" [label=""changeVotingRules""];
""1103_hasVoted"" [label=""hasVoted""];
""1103_vote"" [label=""vote""];
""1103_executeProposal"" [label=""executeProposal""];
""1103_countVotes"" [label=""countVotes""];
""1103_checkProposalCode"" [label=""checkProposalCode""];
""1103_setDelegateAndLockTokens"" [label=""setDelegateAndLockTokens""];
""1103_clearDelegateAndUnlockTokens"" [label=""clearDelegateAndUnlockTokens""];
""1103_newProposal"" [label=""newProposal""];
""1103_newProposal"" -> ""1103_onlyBoardMembers"";
""1103_executeProposal"" -> ""1103_countVotes"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyShareholders"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyUndelegated"";
""1103_newProposal"" -> ""1103_notSelf"";
""1103_vote"" -> ""1103_onlyShareholders"";
""1103_vote"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_onlyDelegated"";
""1103_executeProposal"" -> ""1103_notSelf"";
""1103_changeVotingRules"" -> ""1103_onlySelf"";
""1103_setDelegateAndLockTokens"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_notSelf"";
}
"
0x32c62c965db5fdac0f94e6276d6884070068d4be.sol,MyAdvancedToken,contract MyAdvancedToken { address private constant OWNER = 0xb810aD480cF8e3643031bB36e6A002dC3B1d928e; function isSenderOwner(address sender) private pure returns (bool) { return sender == OWNER; },1,"subgraph cluster_337_MyAdvancedToken {
label=""MyAdvancedToken"";
""337_mint"" [label=""mint""];
""337_setCallback"" [label=""setCallback""];
""337_approve"" [label=""approve""];
""337_balanceOf"" [label=""balanceOf""];
""337_transferFrom"" [label=""transferFrom""];
""337_allowance"" [label=""allowance""];
""337_transfer"" [label=""transfer""];
""337_constructor"" [label=""constructor""];
""337_totalSupply"" [label=""totalSupply""];
""337_isSenderOwner"" [label=""isSenderOwner""];
""337_burn"" [label=""burn""];
""337_allowance"" -> ""337_whenNotPaused"";
""337_mint"" -> ""337_whenNotPaused"";
""337_burn"" -> ""337_whenNotPaused"";
""337_transfer"" -> ""337_whenNotPaused"";
""337_transferFrom"" -> ""337_whenNotPaused"";
""337_setCallback"" -> ""337_onlyOwner"";
""337_totalSupply"" -> ""337_whenNotPaused"";
""337_approve"" -> ""337_whenNotPaused"";
""337_balanceOf"" -> ""337_whenNotPaused"";
}
"
0x3a2fd07ec2ad6f355f93af695a7cf858f5967b78.sol,MTVote,contract MTVote is Ownable { address public TVTokenAddress; address public TVCrowdsaleAddress; address public manager; address public wallet; address internal checkAndBuySender; bytes4 constant TOKEN_RECEIVED = bytes4(keccak256()); bool pause = false; mapping(uint => uint) public targets; uint public targetIdsSize = 0; uint[] public targetIds; modifier onlyOwnerOrManager() { require(msg.sender == owner || manager == msg.sender); _; },1,"subgraph cluster_515_MTVote {
label=""MTVote"";
""515_changeTVTokenAddress"" [label=""changeTVTokenAddress""];
""515_convertBytesToBytes32"" [label=""convertBytesToBytes32""];
""515_toBytes"" [label=""toBytes""];
""515_setManager"" [label=""setManager""];
""515_changeTVCrowdsaleAddress"" [label=""changeTVCrowdsaleAddress""];
""515_setPause"" [label=""setPause""];
""515_bytesToUint"" [label=""bytesToUint""];
""515_constructor"" [label=""constructor""];
""515_clear"" [label=""clear""];
""515_onTokenReceived"" [label=""onTokenReceived""];
""515_changeAndVote"" [label=""changeAndVote""];
""515_setManager"" -> ""515_onlyOwner"";
""515_clear"" -> ""515_onlyOwnerOrManager"";
""515_onTokenReceived"" -> ""515_convertBytesToBytes32"";
""515_changeAndVote"" -> ""515_toBytes"";
""515_changeTVCrowdsaleAddress"" -> ""515_onlyOwnerOrManager"";
""515_setPause"" -> ""515_onlyOwnerOrManager"";
""515_changeTVTokenAddress"" -> ""515_onlyOwnerOrManager"";
}
"
0x548f7581e85b473da466ef9edbe85c5226eaa3b2.sol,ListingsERC20,contract ListingsERC20 is Ownable { using SafeMath for uint256; struct Listing { address seller; address tokenContractAddress; uint256 price; uint256 allowance; uint256 dateStarts; uint256 dateEnds; },1,"subgraph cluster_687_ListingsERC20 {
label=""ListingsERC20"";
""687_updateOwnerPercentage"" [label=""updateOwnerPercentage""];
""687_approveToken"" [label=""approveToken""];
""687_fallback"" [label=""fallback""];
""687_buyListing"" [label=""buyListing""];
""687_createListing"" [label=""createListing""];
""687_withdrawBalance"" [label=""withdrawBalance""];
""687_getAllowance"" [label=""getAllowance""];
""687_ListingsERC20"" [label=""ListingsERC20""];
""687_getHashInternal"" [label=""getHashInternal""];
""687_cancelListing"" [label=""cancelListing""];
""687_getBalance"" [label=""getBalance""];
""687_getHash"" [label=""getHash""];
""687_getHash"" -> ""687_getHashInternal"";
""687_approveToken"" -> ""687_onlyOwner"";
""687_updateOwnerPercentage"" -> ""687_onlyOwner"";
""687_withdrawBalance"" -> ""687_onlyOwner"";
""687_createListing"" -> ""687_getBalance"";
""687_buyListing"" -> ""687_getAllowance"";
""687_buyListing"" -> ""687_getBalance"";
""687_createListing"" -> ""687_getHashInternal"";
}
"
0x21ad0028fea5fafa55b9b60e9c065db9f1c0616e.sol,LikeCrowdsale,"contract LikeCrowdsale is HasOperator { using SafeMath for uint256; LikeCoin public like = LikeCoin(0x0); uint public start = 0; uint public end = 0; uint256 public coinsPerEth = 0; mapping (address => bool) public kycDone; bool finalized = false; event PriceChanged(uint256 _newPrice); event AddPrivateFund(address indexed _addr, uint256 _value); event RegisterKYC(address indexed _addr); event Purchase(address indexed _addr, uint256 _ethers, uint256 _coins); event LikeTransfer(address indexed _to, uint256 _value); event Finalize(); function LikeCrowdsale(address _likeAddr, uint _start, uint _end, uint256 _coinsPerEth) public { require(_coinsPerEth != 0); require(now < _start); require(_start < _end); owner = msg.sender; like = LikeCoin(_likeAddr); start = _start; end = _end; coinsPerEth = _coinsPerEth; }",1,"subgraph cluster_1949_LikeCrowdsale {
label=""LikeCrowdsale"";
""1949_LikeCrowdsale"" [label=""LikeCrowdsale""];
""1949_fallback"" [label=""fallback""];
""1949_finalize"" [label=""finalize""];
""1949_transferLike"" [label=""transferLike""];
""1949_addPrivateFund"" [label=""addPrivateFund""];
""1949_registerKYC"" [label=""registerKYC""];
""1949_changePrice"" [label=""changePrice""];
""1949_changePrice"" -> ""1949_onlyOwner"";
""1949_finalize"" -> ""1949_ownerOrOperator"";
""1949_transferLike"" -> ""1949_onlyOwner"";
""1949_registerKYC"" -> ""1949_ownerOrOperator"";
""1949_addPrivateFund"" -> ""1949_onlyOwner"";
}
"
0xd0080a841a8c5d2b6cd4bc640cdad7846de14dbf.sol,FtvTimelockFactory,"contract FtvTimelockFactory is BasicToken { ERC20 public token; address public tokenAssignmentControl; constructor (ERC20 _token, address _tokenAssignmentControl) { token = _token; tokenAssignmentControl = _tokenAssignmentControl; }",1,"subgraph cluster_400_FtvTimelockFactory {
label=""FtvTimelockFactory"";
""400_transfer"" [label=""transfer""];
""400_assignBalance"" [label=""assignBalance""];
""400_release"" [label=""release""];
""400_constructor"" [label=""constructor""];
""400_release"" -> ""400_balanceOf"";
""400_transfer"" -> ""400_release"";
}
"
0xf08a7fd4f4b75188e89d0d27c2ae474858402cea.sol,DroneShowCoinICOContract,"contract DroneShowCoinICOContract is Ownable { using SafeMath for uint256; Token token; uint256 public constant RATE = 650; uint256 public constant CAP = 15000; uint256 public constant START = 1510754400; uint256 public constant DAYS = 30; bool public initialized = false; uint256 public raisedAmount = 0; uint256 public bonusesGiven = 0; uint256 public numberOfTransactions = 0; event BoughtTokens(address indexed to, uint256 value); modifier whenSaleIsActive() { assert (isActive()); _; }",1,"subgraph cluster_454_DroneShowCoinICOContract {
label=""DroneShowCoinICOContract"";
""454_buyTokens"" [label=""buyTokens""];
""454_fallback"" [label=""fallback""];
""454_destroy"" [label=""destroy""];
""454_DroneShowCoinICOContract"" [label=""DroneShowCoinICOContract""];
""454_tokensAvailable"" [label=""tokensAvailable""];
""454_goalReached"" [label=""goalReached""];
""454_initialize"" [label=""initialize""];
""454_isActive"" [label=""isActive""];
""454_isActive"" -> ""454_goalReached"";
""454_initialize"" -> ""454_tokensAvailable"";
""454_destroy"" -> ""454_onlyOwner"";
""454_initialize"" -> ""454_onlyOwner"";
""454_buyTokens"" -> ""454_whenSaleIsActive"";
""454_fallback"" -> ""454_buyTokens"";
}
"
0x7982a79ee90eb3682dcee66e47ba79c1cba44062.sol,SaleClockAuction,"contract SaleClockAuction is ClockAuction { bool public isSaleClockAuction = true; uint256 public gen0SaleCount; uint256[5] public lastGen0SalePrices; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_2474_SaleClockAuction {
label=""SaleClockAuction"";
""2474_bid"" [label=""bid""];
""2474_averageGen0SalePrice"" [label=""averageGen0SalePrice""];
""2474_getSeller"" [label=""getSeller""];
""2474_computeCut"" [label=""computeCut""];
""2474_createAuction"" [label=""createAuction""];
""2474_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""2474_bidGift"" [label=""bidGift""];
""2474_constructor"" [label=""constructor""];
""2474_isSaleClockAuction"" [label=""isSaleClockAuction""];
""2474_createAuction"" -> ""2474__addAuction"";
""2474_bidGift"" -> ""2474__bid"";
""2474_createAuction"" -> ""2474__escrow"";
""2474_computeCut"" -> ""2474__computeCut"";
""2474_bidGift"" -> ""2474__transfer"";
""2474_bid"" -> ""2474__transfer"";
""2474_bid"" -> ""2474__bid"";
""2474_constructor"" -> ""2474_constructor"";
}
"
0x18f0cd26c06449d967ca6aef8b5f9d8ee9fd7992.sol,Exch,"contract Exch is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; mapping (address => bool) public whiteListERC20; mapping (address => bool) public whiteListERC223; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); modifier onlyAdmin() { require(msg.sender==admin); _; }",1,"subgraph cluster_1411_Exch {
label=""Exch"";
""1411_withdrawToken"" [label=""withdrawToken""];
""1411_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1411_setBlackListERC223"" [label=""setBlackListERC223""];
""1411_constructor"" [label=""constructor""];
""1411_amountFilled"" [label=""amountFilled""];
""1411_setWhiteListERC20"" [label=""setWhiteListERC20""];
""1411_changeFeeTake"" [label=""changeFeeTake""];
""1411_availableVolume"" [label=""availableVolume""];
""1411_trade"" [label=""trade""];
""1411_changeFeeMake"" [label=""changeFeeMake""];
""1411_depositToken"" [label=""depositToken""];
""1411_changeFeeRebate"" [label=""changeFeeRebate""];
""1411_tradeBalances"" [label=""tradeBalances""];
""1411_changeAdmin"" [label=""changeAdmin""];
""1411_withdraw"" [label=""withdraw""];
""1411_fallback"" [label=""fallback""];
""1411_balanceOf"" [label=""balanceOf""];
""1411_deposit"" [label=""deposit""];
""1411_cancelOrder"" [label=""cancelOrder""];
""1411_tokenFallback"" [label=""tokenFallback""];
""1411_setBlackListERC20"" [label=""setBlackListERC20""];
""1411_setWhiteListERC223"" [label=""setWhiteListERC223""];
""1411_changeFeeAccount"" [label=""changeFeeAccount""];
""1411_testTrade"" [label=""testTrade""];
""1411_order"" [label=""order""];
""1411_setWhiteListERC20"" -> ""1411_onlyAdmin"";
""1411_tokenFallback"" -> ""1411_safeAdd"";
""1411_depositToken"" -> ""1411_safeAdd"";
""1411_withdrawToken"" -> ""1411_safeSub"";
""1411_availableVolume"" -> ""1411_safeMul"";
""1411_availableVolume"" -> ""1411_safeSub"";
""1411_deposit"" -> ""1411_safeAdd"";
""1411_withdraw"" -> ""1411_safeSub"";
""1411_setBlackListERC20"" -> ""1411_onlyAdmin"";
""1411_setBlackListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeAccount"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_tradeBalances"";
""1411_changeFeeTake"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeSub"";
""1411_changeFeeRebate"" -> ""1411_onlyAdmin"";
""1411_testTrade"" -> ""1411_availableVolume"";
""1411_changeAccountLevelsAddr"" -> ""1411_onlyAdmin"";
""1411_changeAdmin"" -> ""1411_onlyAdmin"";
""1411_tradeBalances"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeMul"";
""1411_setWhiteListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeMake"" -> ""1411_onlyAdmin"";
}
"
0xc767b1cec507f1584469e8efe1a94ad4c75e02ed.sol,PremiumFactories,contract PremiumFactories { Bankroll constant bankroll = Bankroll(0x66a9f1e53173de33bec727ef76afa84956ae1b25); address owner; constructor() public { owner = msg.sender; },1,"subgraph cluster_619_PremiumFactories {
label=""PremiumFactories"";
""619_claimUnits"" [label=""claimUnits""];
""619_purchaseFactory"" [label=""purchaseFactory""];
""619_getFactories"" [label=""getFactories""];
""619_constructor"" [label=""constructor""];
""619_addFactory"" [label=""addFactory""];
""619_updateFactoryConfig"" [label=""updateFactoryConfig""];
""619_getFactoryPrice"" [label=""getFactoryPrice""];
""619_addPremiumUnit"" [label=""addPremiumUnit""];
""619_getFactories"" -> ""619_getFactoryPrice"";
""619_purchaseFactory"" -> ""619_getFactoryPrice"";
}
"
0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371.sol,SafeGuardsToken,contract SafeGuardsToken is CappedToken { string constant public name = ; string constant public symbol = ; uint constant public decimals = 18; address public canBurnAddress; mapping (address => bool) public frozenList; uint256 public frozenPauseTime = now + 180 days; uint256 public burnPausedTime = now + 180 days; constructor(address _canBurnAddress) CappedToken(61 * 1e6 * 1e18) public { require(_canBurnAddress != 0x0); canBurnAddress = _canBurnAddress; },1,"subgraph cluster_1102_SafeGuardsToken {
label=""SafeGuardsToken"";
""1102_burn"" [label=""burn""];
""1102_changeFrozenTime"" [label=""changeFrozenTime""];
""1102_changeBurnPausedTime"" [label=""changeBurnPausedTime""];
""1102_constructor"" [label=""constructor""];
""1102_mintFrozen"" [label=""mintFrozen""];
""1102_transfer"" [label=""transfer""];
""1102_transferFrom"" [label=""transferFrom""];
""1102_isContract"" [label=""isContract""];
""1102_transfer"" -> ""1102_isContract"";
""1102_mintFrozen"" -> ""1102_mint"";
""1102_mintFrozen"" -> ""1102_canMint"";
""1102_changeBurnPausedTime"" -> ""1102_onlyOwner"";
""1102_changeFrozenTime"" -> ""1102_onlyOwner"";
""1102_constructor"" -> ""1102_constructor"";
""1102_transfer"" -> ""1102_transfer"";
""1102_transferFrom"" -> ""1102_isContract"";
""1102_transferFrom"" -> ""1102_transferFrom"";
""1102_mintFrozen"" -> ""1102_onlyOwner"";
}
"
0x430e87a95a421437ccaa0af644ac57e22914b07a.sol,PoolOwners,contract PoolOwners is Ownable { using SafeMath for uint256; using itmap for itmap.itmap; struct Owner { uint256 key; uint256 percentage; uint256 shareTokens; mapping(address => uint256) balance; },1,"subgraph cluster_1598_PoolOwners {
label=""PoolOwners"";
""1598_distributeTokens"" [label=""distributeTokens""];
""1598_getCurrentOwners"" [label=""getCurrentOwners""];
""1598_setOwnerShare"" [label=""setOwnerShare""];
""1598_percent"" [label=""percent""];
""1598_isWhitelisted"" [label=""isWhitelisted""];
""1598_claimTokens"" [label=""claimTokens""];
""1598_setEthWallet"" [label=""setEthWallet""];
""1598_lockShares"" [label=""lockShares""];
""1598_hasClaimed"" [label=""hasClaimed""];
""1598_setContribution"" [label=""setContribution""];
""1598_getOwner"" [label=""getOwner""];
""1598_withdrawTokens"" [label=""withdrawTokens""];
""1598_contribute"" [label=""contribute""];
""1598_startContribution"" [label=""startContribution""];
""1598_whitelistWallet"" [label=""whitelistWallet""];
""1598_fallback"" [label=""fallback""];
""1598_getOwnerAddress"" [label=""getOwnerAddress""];
""1598_sendOwnership"" [label=""sendOwnership""];
""1598_setDistributionMinimum"" [label=""setDistributionMinimum""];
""1598_constructor"" [label=""constructor""];
""1598_getOwnerBalance"" [label=""getOwnerBalance""];
""1598_setOwnerShare"" -> ""1598_onlyOwner"";
""1598_setOwnerShare"" -> ""1598_percent"";
""1598_withdrawTokens"" -> ""1598_claimTokens"";
""1598_contribute"" -> ""1598_percent"";
""1598_setEthWallet"" -> ""1598_onlyOwner"";
""1598_startContribution"" -> ""1598_onlyOwner"";
""1598_setContribution"" -> ""1598_contribute"";
""1598_sendOwnership"" -> ""1598_onlyWhitelisted"";
""1598_fallback"" -> ""1598_contribute"";
""1598_setDistributionMinimum"" -> ""1598_onlyOwner"";
""1598_lockShares"" -> ""1598_onlyOwner"";
""1598_sendOwnership"" -> ""1598_percent"";
""1598_setContribution"" -> ""1598_onlyOwner"";
""1598_whitelistWallet"" -> ""1598_onlyOwner"";
""1598_distributeTokens"" -> ""1598_onlyWhitelisted"";
}
"
0x5c28d0683be8143e5ecdd5fd0b39d702d98b1bb9.sol,TemplateCrowdsale,"contract TemplateCrowdsale is Consts, MainCrowdsale , BonusableCrowdsale { event Initialized(); event TimesChanged(uint startTime, uint endTime, uint oldStartTime, uint oldEndTime); bool public initialized = false; constructor(MintableToken _token) public Crowdsale(9000 * TOKEN_DECIMAL_MULTIPLIER, 0xFB262Fe4620e7027424488F6C471b13DE7662A95, _token) TimedCrowdsale(START_TIME > now ? START_TIME : now, 1568917800) CappedCrowdsale(111111111111111111111111) { }",1,"subgraph cluster_2556_TemplateCrowdsale {
label=""TemplateCrowdsale"";
""2556_hasClosed"" [label=""hasClosed""];
""2556__preValidatePurchase"" [label=""_preValidatePurchase""];
""2556_setStartTime"" [label=""setStartTime""];
""2556_init"" [label=""init""];
""2556_setEndTime"" [label=""setEndTime""];
""2556_constructor"" [label=""constructor""];
""2556_setTimes"" [label=""setTimes""];
""2556_setEndTime"" -> ""2556_onlyOwner"";
""2556_setTimes"" -> ""2556_onlyOwner"";
""2556_hasClosed"" -> ""2556_hasClosed"";
""2556_init"" -> ""2556_onlyOwner"";
""2556_init"" -> ""2556_transferOwnership"";
""2556_constructor"" -> ""2556_constructor"";
""2556_setStartTime"" -> ""2556_onlyOwner"";
""2556__preValidatePurchase"" -> ""2556__preValidatePurchase"";
}
"
0x1d899280f446aab65971e41611b5bb5516dd47f9.sol,CryptoMiningWar,contract CryptoMiningWar is PullPayment { bool public initialized = false; uint256 public roundNumber = 0; uint256 public deadline; uint256 public CRTSTAL_MINING_PERIOD = 86400; uint256 public HALF_TIME = 8 hours; uint256 public ROUND_TIME = 86400 * 7; uint256 public prizePool = 0; uint256 BASE_PRICE = 0.005 ether; uint256 RANK_LIST_LIMIT = 10000; uint256 public totalMiniGame = 0; uint256 private numberOfMiners = 8; uint256 private numberOfBoosts = 5; uint256 private numberOfRank = 21; CryptoEngineerInterface public Engineer; mapping(uint256 => address) public miniGameAddress; mapping(uint256 => MinerData) private minerData; mapping(address => Player) public players; mapping(address => uint256) public boosterReward; mapping(uint256 => BoostData) private boostData; mapping(address => bool) public miniGames; address[21] rankList; address public administrator; struct Player { uint256 roundNumber; mapping(uint256 => uint256) minerCount; uint256 hashrate; uint256 crystals; uint256 lastUpdateTime; },1,"subgraph cluster_2761_CryptoMiningWar {
label=""CryptoMiningWar"";
""2761_buyBooster"" [label=""buyBooster""];
""2761_upgrade"" [label=""upgrade""];
""2761_lottery"" [label=""lottery""];
""2761_subHashrate"" [label=""subHashrate""];
""2761_admin"" [label=""admin""];
""2761_updateRankList"" [label=""updateRankList""];
""2761_getPlayerData"" [label=""getPlayerData""];
""2761_getHashratePerDay"" [label=""getHashratePerDay""];
""2761_getBoosterPrice"" [label=""getBoosterPrice""];
""2761_initMinerData"" [label=""initMinerData""];
""2761_getBalance"" [label=""getBalance""];
""2761_addHashrate"" [label=""addHashrate""];
""2761_startNewRound"" [label=""startNewRound""];
""2761_removeContractMiniGame"" [label=""removeContractMiniGame""];
""2761_updateCrystal"" [label=""updateCrystal""];
""2761_hasBooster"" [label=""hasBooster""];
""2761_isMiningWarContract"" [label=""isMiningWarContract""];
""2761_getBoosterData"" [label=""getBoosterData""];
""2761_setRoundNumber"" [label=""setRoundNumber""];
""2761_buyMiner"" [label=""buyMiner""];
""2761_calCurrentCrystals"" [label=""calCurrentCrystals""];
""2761_setContractsMiniGame"" [label=""setContractsMiniGame""];
""2761_initBoostData"" [label=""initBoostData""];
""2761_startGame"" [label=""startGame""];
""2761_updateHashrate"" [label=""updateHashrate""];
""2761_constructor"" [label=""constructor""];
""2761_withdrawReward"" [label=""withdrawReward""];
""2761_getCurrentPrice"" [label=""getCurrentPrice""];
""2761_addMiner"" [label=""addMiner""];
""2761_getCurrentReward"" [label=""getCurrentReward""];
""2761_setEngineerInterface"" [label=""setEngineerInterface""];
""2761_quickSort"" [label=""quickSort""];
""2761_getFreeMiner"" [label=""getFreeMiner""];
""2761_fallback"" [label=""fallback""];
""2761_getFreeMinerForMiniGame"" [label=""getFreeMinerForMiniGame""];
""2761_getCurrentLevel"" [label=""getCurrentLevel""];
""2761_devFee"" [label=""devFee""];
""2761_inRankList"" [label=""inRankList""];
""2761_addCrystal"" [label=""addCrystal""];
""2761_subCrystal"" [label=""subCrystal""];
""2761_getData"" [label=""getData""];
""2761_getRankList"" [label=""getRankList""];
""2761_setupMiniGame"" [label=""setupMiniGame""];
""2761_buyMiner"" -> ""2761_isNotOver"";
""2761_addMiner"" -> ""2761_isAdministrator"";
""2761_subHashrate"" -> ""2761_onlyContractsMiniGame"";
""2761_startNewRound"" -> ""2761_setupMiniGame"";
""2761_subCrystal"" -> ""2761_updateCrystal"";
""2761_buyBooster"" -> ""2761_isCurrentRound"";
""2761_subCrystal"" -> ""2761_isNotOver"";
""2761_setContractsMiniGame"" -> ""2761_isAdministrator"";
""2761_startGame"" -> ""2761_startNewRound"";
""2761_setEngineerInterface"" -> ""2761_isAdministrator"";
""2761_lottery"" -> ""2761_disableContract"";
""2761_addHashrate"" -> ""2761_isCurrentRound"";
""2761_addCrystal"" -> ""2761_isCurrentRound"";
""2761_getData"" -> ""2761_calCurrentCrystals"";
""2761_constructor"" -> ""2761_initMinerData"";
""2761_buyBooster"" -> ""2761_updateCrystal"";
""2761_updateRankList"" -> ""2761_quickSort"";
""2761_getBoosterData"" -> ""2761_getBoosterPrice"";
""2761_addMiner"" -> ""2761_updateHashrate"";
""2761_getFreeMiner"" -> ""2761_disableContract"";
""2761_updateRankList"" -> ""2761_inRankList"";
""2761_getPlayerData"" -> ""2761_hasBooster"";
""2761_getHashratePerDay"" -> ""2761_hasBooster"";
""2761_updateCrystal"" -> ""2761_calCurrentCrystals"";
""2761_addHashrate"" -> ""2761_isNotOver"";
""2761_getFreeMinerForMiniGame"" -> ""2761_isNotOver"";
""2761_startGame"" -> ""2761_isAdministrator"";
""2761_buyBooster"" -> ""2761_getBoosterPrice"";
""2761_upgrade"" -> ""2761_isAdministrator"";
""2761_addHashrate"" -> ""2761_onlyContractsMiniGame"";
""2761_buyMiner"" -> ""2761_updateHashrate"";
""2761_subHashrate"" -> ""2761_isNotOver"";
""2761_buyMiner"" -> ""2761_isCurrentRound"";
""2761_buyBooster"" -> ""2761_isNotOver"";
""2761_addMiner"" -> ""2761_isCurrentRound"";
""2761_quickSort"" -> ""2761_quickSort"";
""2761_getData"" -> ""2761_getPlayerData"";
""2761_addCrystal"" -> ""2761_onlyContractsMiniGame"";
""2761_buyBooster"" -> ""2761_devFee"";
""2761_lottery"" -> ""2761_startNewRound"";
""2761_addMiner"" -> ""2761_updateCrystal"";
""2761_subCrystal"" -> ""2761_isCurrentRound"";
""2761_addCrystal"" -> ""2761_isNotOver"";
""2761_getBoosterPrice"" -> ""2761_getCurrentPrice"";
""2761_getBoosterPrice"" -> ""2761_getCurrentLevel"";
""2761_updateHashrate"" -> ""2761_updateRankList"";
""2761_buyBooster"" -> ""2761_getCurrentLevel"";
""2761_subCrystal"" -> ""2761_onlyContractsMiniGame"";
""2761_getFreeMiner"" -> ""2761_isNotOver"";
""2761_removeContractMiniGame"" -> ""2761_isAdministrator"";
""2761_startNewRound"" -> ""2761_initBoostData"";
""2761_getFreeMinerForMiniGame"" -> ""2761_onlyContractsMiniGame"";
""2761_buyBooster"" -> ""2761_asyncSend"";
""2761_setRoundNumber"" -> ""2761_isAdministrator"";
""2761_buyMiner"" -> ""2761_updateCrystal"";
""2761_lottery"" -> ""2761_asyncSend"";
""2761_subHashrate"" -> ""2761_isCurrentRound"";
""2761_addMiner"" -> ""2761_isNotOver"";
""2761_calCurrentCrystals"" -> ""2761_getHashratePerDay"";
}
"
0xeb6486b13b56314b37aacac2ec6889d11a763de1.sol,BasicCGRID,contract BasicCGRID is ERC223 { using SafeMath for uint256; uint256 public constant decimals = 8; string public constant symbol = ; string public constant name = ; uint256 public _totalSupply = 10**17; address public owner; address public airdrop; bool public tradable = false; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_709_BasicCGRID {
label=""BasicCGRID"";
""709_totalSupply"" [label=""totalSupply""];
""709_transferFrom"" [label=""transferFrom""];
""709_balanceOf"" [label=""balanceOf""];
""709_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""709_approve"" [label=""approve""];
""709_updateAirdrop"" [label=""updateAirdrop""];
""709_turnOnTradable"" [label=""turnOnTradable""];
""709_transfer"" [label=""transfer""];
""709_BasicCGRID"" [label=""BasicCGRID""];
""709_isContract"" [label=""isContract""];
""709_allowance"" [label=""allowance""];
""709_updateAirdrop"" -> ""709_onlyOwner"";
""709_transfer"" -> ""709_isContract"";
""709_turnOnTradable"" -> ""709_onlyOwner"";
""709_transferFrom"" -> ""709_isTradable"";
""709_transfer"" -> ""709_isTradable"";
""709_transfer"" -> ""709_balanceOf"";
}
"
0x0da76de0916ef2da3c58a97e4d09d501c56a9f15.sol,Piggy_Bank,"contract Piggy_Bank { function Put(uint _unlockTime) public payable { var acc = Acc[msg.sender]; acc.balance += msg.value; acc.unlockTime = _unlockTime>now?_unlockTime:now; LogFile.AddMessage(msg.sender,msg.value,); }",1,"subgraph cluster_128_Piggy_Bank {
label=""Piggy_Bank"";
""128_fallback"" [label=""fallback""];
""128_Put"" [label=""Put""];
""128_Piggy_Bank"" [label=""Piggy_Bank""];
""128_Collect"" [label=""Collect""];
""128_fallback"" -> ""128_Put"";
}
"
0x5b3c6ac07f3729534b7483d31e48f15e6ce7c6e9.sol,Crowdsale,"contract Crowdsale is Ownable { using SafeMath for uint256; uint256 public constant rate = 17000; uint256 public constant cap = 80000000 ether / rate; bool public isFinalized = false; uint256 public endTime = 1522540800; ALT1Token public token; address public wallet; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event Finalized(); function Crowdsale (ALT1Token _ALT1, address _wallet) public { assert(address(_ALT1) != address(0)); assert(_wallet != address(0)); assert(endTime > now); assert(rate > 0); assert(cap > 0); token = _ALT1; wallet = _wallet; }",1,"subgraph cluster_591_Crowdsale {
label=""Crowdsale"";
""591_Crowdsale"" [label=""Crowdsale""];
""591_finalization"" [label=""finalization""];
""591_buyTokens"" [label=""buyTokens""];
""591_forwardFunds"" [label=""forwardFunds""];
""591_hasEnded"" [label=""hasEnded""];
""591_validPurchase"" [label=""validPurchase""];
""591_fallback"" [label=""fallback""];
""591_finalize"" [label=""finalize""];
""591_buyTokens"" -> ""591_forwardFunds"";
""591_fallback"" -> ""591_buyTokens"";
""591_buyTokens"" -> ""591_validPurchase"";
""591_finalize"" -> ""591_onlyOwner"";
""591_finalize"" -> ""591_finalization"";
}
"
0x74ceda99c44da280f2fd8ea8b5dd43f8b66912a8.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },1,"subgraph cluster_1975_ERC223BasicToken {
label=""ERC223BasicToken"";
""1975_transfer"" [label=""transfer""];
""1975_transfer"" -> ""1975_transfer"";
}
"
0x7982a79ee90eb3682dcee66e47ba79c1cba44062.sol,SaleClockAuction,"contract SaleClockAuction is ClockAuction { bool public isSaleClockAuction = true; uint256 public gen0SaleCount; uint256[5] public lastGen0SalePrices; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_2474_SaleClockAuction {
label=""SaleClockAuction"";
""2474_bid"" [label=""bid""];
""2474_averageGen0SalePrice"" [label=""averageGen0SalePrice""];
""2474_getSeller"" [label=""getSeller""];
""2474_computeCut"" [label=""computeCut""];
""2474_createAuction"" [label=""createAuction""];
""2474_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""2474_bidGift"" [label=""bidGift""];
""2474_constructor"" [label=""constructor""];
""2474_isSaleClockAuction"" [label=""isSaleClockAuction""];
""2474_createAuction"" -> ""2474__addAuction"";
""2474_bidGift"" -> ""2474__bid"";
""2474_createAuction"" -> ""2474__escrow"";
""2474_computeCut"" -> ""2474__computeCut"";
""2474_bidGift"" -> ""2474__transfer"";
""2474_bid"" -> ""2474__transfer"";
""2474_bid"" -> ""2474__bid"";
""2474_constructor"" -> ""2474_constructor"";
}
"
0x58bd394f3dfd9bbc15f4bc662b2def3e597e4e90.sol,AceTokenDistribution,"contract AceTokenDistribution is Ownable { using SafeMath for uint256; StarTokenInterface public token; event DistributionMint(address indexed to, uint256 amount); event ExtraMint(); function AceTokenDistribution (address _tokenAddress) { require(_tokenAddress != 0); token = StarTokenInterface(_tokenAddress); }",1,"subgraph cluster_632_AceTokenDistribution {
label=""AceTokenDistribution"";
""632_AceTokenDistribution"" [label=""AceTokenDistribution""];
""632_returnOwnership"" [label=""returnOwnership""];
""632_extraMint"" [label=""extraMint""];
""632_bulkMint"" [label=""bulkMint""];
""632_extraMint"" -> ""632_onlyOwner"";
""632_returnOwnership"" -> ""632_onlyOwner"";
""632_bulkMint"" -> ""632_onlyOwner"";
}
"
0xd95f7070c4d4abb344f79bb48ee22e751901d8df.sol,SingularDTVLaunch,"contract SingularDTVLaunch { string public version = ; event Contributed(address indexed contributor, uint contribution, uint tokens); AbstractSingularDTVToken public singularDTVToken; address public workshop; address public SingularDTVWorkshop = 0xc78310231aA53bD3D0FEA2F8c705C67730929D8f; uint public SingularDTVWorkshopFee; uint public CAP; uint public DURATION; uint public TOKEN_TARGET; enum Stages { Deployed, GoingAndGoalNotReached, EndedAndGoalNotReached, GoingAndGoalReached, EndedAndGoalReached }",1,"subgraph cluster_745_SingularDTVLaunch {
label=""SingularDTVLaunch"";
""745_start"" [label=""start""];
""745_updateStage"" [label=""updateStage""];
""745_changeValuePerToken"" [label=""changeValuePerToken""];
""745_withdrawContribution"" [label=""withdrawContribution""];
""745_checkInvariants"" [label=""checkInvariants""];
""745_fallback"" [label=""fallback""];
""745_withdrawUnsentTokensForOwner"" [label=""withdrawUnsentTokensForOwner""];
""745_fund"" [label=""fund""];
""745_withdrawForWorkshop"" [label=""withdrawForWorkshop""];
""745_SingularDTVLaunch"" [label=""SingularDTVLaunch""];
""745_emergencyCall"" [label=""emergencyCall""];
""745_withdrawContribution"" -> ""745_checkInvariants"";
""745_withdrawContribution"" -> ""745_atStage"";
""745_fallback"" -> ""745_withdrawContribution"";
""745_fund"" -> ""745_atStageOR"";
""745_fund"" -> ""745_checkInvariants"";
""745_withdrawUnsentTokensForOwner"" -> ""745_checkInvariants"";
""745_changeValuePerToken"" -> ""745_onlyOwner"";
""745_withdrawForWorkshop"" -> ""745_timedTransitions"";
""745_start"" -> ""745_onlyOwner"";
""745_start"" -> ""745_atStage"";
""745_fallback"" -> ""745_fund"";
""745_fund"" -> ""745_timedTransitions"";
""745_changeValuePerToken"" -> ""745_atStage"";
""745_withdrawUnsentTokensForOwner"" -> ""745_atStage"";
""745_withdrawContribution"" -> ""745_timedTransitions"";
""745_withdrawUnsentTokensForOwner"" -> ""745_timedTransitions"";
""745_withdrawForWorkshop"" -> ""745_checkInvariants"";
""745_withdrawForWorkshop"" -> ""745_atStage"";
""745_updateStage"" -> ""745_timedTransitions"";
""745_start"" -> ""745_checkInvariants"";
}
"
0x4cd988afbad37289baaf53c13e98e2bd46aaea8c.sol,DSToken,"contract DSToken is DSTokenBase(0), DSStop { bytes32 public symbol; uint256 public decimals = 18; address public generator; modifier onlyGenerator { if(msg.sender!=generator) throw; _; }",1,"subgraph cluster_1440_DSToken {
label=""DSToken"";
""1440_setName"" [label=""setName""];
""1440_push"" [label=""push""];
""1440_burn"" [label=""burn""];
""1440_DSToken"" [label=""DSToken""];
""1440_transferFrom"" [label=""transferFrom""];
""1440_transfer"" [label=""transfer""];
""1440_generatorTransfer"" [label=""generatorTransfer""];
""1440_approve"" [label=""approve""];
""1440_pull"" [label=""pull""];
""1440_mint"" [label=""mint""];
""1440_mint"" -> ""1440_stoppable"";
""1440_burn"" -> ""1440_sub"";
""1440_transferFrom"" -> ""1440_transferFrom"";
""1440_pull"" -> ""1440_transferFrom"";
""1440_transfer"" -> ""1440_transfer"";
""1440_approve"" -> ""1440_approve"";
""1440_generatorTransfer"" -> ""1440_onlyGenerator"";
""1440_burn"" -> ""1440_stoppable"";
""1440_transfer"" -> ""1440_note"";
""1440_generatorTransfer"" -> ""1440_transfer"";
""1440_generatorTransfer"" -> ""1440_note"";
""1440_setName"" -> ""1440_auth"";
""1440_push"" -> ""1440_transfer"";
""1440_approve"" -> ""1440_note"";
""1440_approve"" -> ""1440_stoppable"";
""1440_transfer"" -> ""1440_stoppable"";
""1440_mint"" -> ""1440_note"";
""1440_mint"" -> ""1440_add"";
""1440_mint"" -> ""1440_auth"";
""1440_transferFrom"" -> ""1440_stoppable"";
""1440_burn"" -> ""1440_auth"";
""1440_burn"" -> ""1440_note"";
""1440_transferFrom"" -> ""1440_note"";
}
"
0x475a8101fdde7f7246e31be77dd7dcb80f25d735.sol,Exchange,contract Exchange { struct Order { address creator; address token; bool buy; uint price; uint amount; },1,"subgraph cluster_1099_Exchange {
label=""Exchange"";
""1099_cancelOrder"" [label=""cancelOrder""];
""1099_depositToken"" [label=""depositToken""];
""1099_Exchange"" [label=""Exchange""];
""1099_balanceAdd"" [label=""balanceAdd""];
""1099_safeAdd"" [label=""safeAdd""];
""1099_decFeeDeposit"" [label=""decFeeDeposit""];
""1099_fillOrder"" [label=""fillOrder""];
""1099_balanceSub"" [label=""balanceSub""];
""1099_placeBuy"" [label=""placeBuy""];
""1099_placeSell"" [label=""placeSell""];
""1099_withdrawToken"" [label=""withdrawToken""];
""1099_fallback"" [label=""fallback""];
""1099_withdrawEther"" [label=""withdrawEther""];
""1099_transferOwnership"" [label=""transferOwnership""];
""1099_safeSub"" [label=""safeSub""];
""1099_safeMul"" [label=""safeMul""];
""1099_calcAmountEther"" [label=""calcAmountEther""];
""1099_cancelOrder"" -> ""1099_balanceAdd"";
""1099_placeSell"" -> ""1099_calcAmountEther"";
""1099_fillOrder"" -> ""1099_balanceSub"";
""1099_decFeeDeposit"" -> ""1099_onlyOwner"";
""1099_fillOrder"" -> ""1099_calcAmountEther"";
""1099_withdrawEther"" -> ""1099_balanceSub"";
""1099_transferOwnership"" -> ""1099_onlyOwner"";
""1099_placeBuy"" -> ""1099_calcAmountEther"";
""1099_placeBuy"" -> ""1099_balanceSub"";
""1099_decFeeDeposit"" -> ""1099_safeSub"";
""1099_depositToken"" -> ""1099_balanceAdd"";
""1099_fillOrder"" -> ""1099_balanceAdd"";
""1099_placeSell"" -> ""1099_balanceSub"";
""1099_withdrawToken"" -> ""1099_balanceSub"";
""1099_balanceAdd"" -> ""1099_safeAdd"";
""1099_calcAmountEther"" -> ""1099_safeMul"";
""1099_cancelOrder"" -> ""1099_calcAmountEther"";
""1099_balanceSub"" -> ""1099_safeSub"";
""1099_fallback"" -> ""1099_balanceAdd"";
}
"
0x00f634a0bb03416816f8829928ef7d776f798414.sol,KiOS,"contract KiOS { address public admin; mapping(address => uint) public rates; event Purchase(address indexed payer, address indexed token, uint price, uint amount); event Received(address indexed sender, address indexed token, uint amount); event Sent(address indexed recipient, address indexed token, uint amount); constructor() public { admin = msg.sender; }",1,"subgraph cluster_371_KiOS {
label=""KiOS"";
""371_changeAdmin"" [label=""changeAdmin""];
""371_getBalance"" [label=""getBalance""];
""371_fallback"" [label=""fallback""];
""371_payment"" [label=""payment""];
""371_check"" [label=""check""];
""371_pay"" [label=""pay""];
""371_setRate"" [label=""setRate""];
""371_buy"" [label=""buy""];
""371_constructor"" [label=""constructor""];
""371_pay"" -> ""371_getBalance"";
""371_pay"" -> ""371_check"";
""371_fallback"" -> ""371_payment"";
""371_buy"" -> ""371_getBalance"";
""371_buy"" -> ""371_check"";
""371_pay"" -> ""371_restrict"";
""371_setRate"" -> ""371_restrict"";
""371_changeAdmin"" -> ""371_check"";
""371_changeAdmin"" -> ""371_restrict"";
""371_setRate"" -> ""371_check"";
}
"
0x1f52b87c3503e537853e160adbf7e330ea0be7c4.sol,SaleClockAuction,contract SaleClockAuction is ClockAuction { function SaleClockAuction(uint256 _cut) public ClockAuction(_cut) {},1,"subgraph cluster_1012_SaleClockAuction {
label=""SaleClockAuction"";
""1012_bid"" [label=""bid""];
""1012_SaleClockAuction"" [label=""SaleClockAuction""];
""1012_createAuction"" [label=""createAuction""];
""1012_bid"" -> ""1012__bid"";
""1012_createAuction"" -> ""1012_canBeStoredWith128Bits"";
""1012_SaleClockAuction"" -> ""1012_ClockAuction"";
""1012_createAuction"" -> ""1012__escrow"";
""1012_bid"" -> ""1012__transfer"";
""1012_createAuction"" -> ""1012_canBeStoredWith64Bits"";
""1012_createAuction"" -> ""1012__addAuction"";
}
"
0x25d3b337e17ad34dbc8cb97d1a724545d90478fa.sol,AirdropiRide,contract AirdropiRide { Token public tokenReward; address public creator; address public owner = 0xd430B6C9706345760D94c4A8A14Cfa0164B04167; uint256 public startDate; uint256 public amount; modifier isCreator() { require(msg.sender == creator); _; },1,"subgraph cluster_238_AirdropiRide {
label=""AirdropiRide"";
""238_setCreator"" [label=""setCreator""];
""238_dropToken"" [label=""dropToken""];
""238_dropTokenV2"" [label=""dropTokenV2""];
""238_setAmount"" [label=""setAmount""];
""238_constructor"" [label=""constructor""];
""238_setStartDate"" [label=""setStartDate""];
""238_setOwner"" [label=""setOwner""];
""238_kill"" [label=""kill""];
""238_setToken"" [label=""setToken""];
""238_setToken"" -> ""238_isCreator"";
""238_dropToken"" -> ""238_isCreator"";
""238_setCreator"" -> ""238_isCreator"";
""238_setOwner"" -> ""238_isCreator"";
""238_setStartDate"" -> ""238_isCreator"";
""238_kill"" -> ""238_isCreator"";
""238_dropTokenV2"" -> ""238_isCreator"";
""238_setAmount"" -> ""238_isCreator"";
}
"
0x5165db3dffd92454c2d59faa8e2d907e54f174d3.sol,ViewlyBountyRewards,"contract ViewlyBountyRewards is DSAuth, DSMath { uint constant public MAX_TOKEN_REWARDS = 3000000 ether; DSToken public viewToken; uint public totalTokenRewards; mapping (address => uint) public tokenRewards; event LogTokenReward( address recipient, uint tokens ); function ViewlyBountyRewards(DSToken viewToken_) { viewToken = viewToken_; }",1,"subgraph cluster_1206_ViewlyBountyRewards {
label=""ViewlyBountyRewards"";
""1206_sendTokenReward"" [label=""sendTokenReward""];
""1206_ViewlyBountyRewards"" [label=""ViewlyBountyRewards""];
""1206_sendTokenReward"" -> ""1206_auth"";
""1206_sendTokenReward"" -> ""1206_add"";
}
"
0xaa652d53909b01c5a6b8e7cd814f9adea18c08f7.sol,TCRSale,"contract TCRSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; TCRToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1585_TCRSale {
label=""TCRSale"";
""1585_convertToMiniTcr"" [label=""convertToMiniTcr""];
""1585_terminate"" [label=""terminate""];
""1585_changeEndTime"" [label=""changeEndTime""];
""1585_safeWithdrawal"" [label=""safeWithdrawal""];
""1585_setRate"" [label=""setRate""];
""1585_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1585_changeStartTime"" [label=""changeStartTime""];
""1585_checkFundingGoal"" [label=""checkFundingGoal""];
""1585_checkFundingCap"" [label=""checkFundingCap""];
""1585_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1585_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1585_TCRSale"" [label=""TCRSale""];
""1585_fallback"" [label=""fallback""];
""1585_currentTime"" [label=""currentTime""];
""1585_fallback"" -> ""1585_whenNotPaused"";
""1585_ownerAllocateTokens"" -> ""1585_checkFundingGoal"";
""1585_fallback"" -> ""1585_beforeDeadline"";
""1585_fallback"" -> ""1585_checkFundingCap"";
""1585_ownerUnlockFund"" -> ""1585_onlyOwner"";
""1585_ownerSafeWithdrawal"" -> ""1585_onlyOwner"";
""1585_fallback"" -> ""1585_nonReentrant"";
""1585_ownerAllocateTokens"" -> ""1585_nonReentrant"";
""1585_ownerAllocateTokens"" -> ""1585_onlyOwner"";
""1585_setRate"" -> ""1585_onlyOwner"";
""1585_TCRSale"" -> ""1585_setRate"";
""1585_changeEndTime"" -> ""1585_onlyOwner"";
""1585_safeWithdrawal"" -> ""1585_afterDeadline"";
""1585_ownerAllocateTokens"" -> ""1585_checkFundingCap"";
""1585_fallback"" -> ""1585_checkFundingGoal"";
""1585_terminate"" -> ""1585_onlyOwner"";
""1585_ownerUnlockFund"" -> ""1585_afterDeadline"";
""1585_fallback"" -> ""1585_afterStartTime"";
""1585_changeStartTime"" -> ""1585_onlyOwner"";
""1585_safeWithdrawal"" -> ""1585_nonReentrant"";
""1585_ownerSafeWithdrawal"" -> ""1585_nonReentrant"";
""1585_fallback"" -> ""1585_saleNotClosed"";
}
"
0x3a266f97425cd281c1770b71662fcf4415c29190.sol,CryptoProgramFactory,contract CryptoProgramFactory { bool status = false; using SafeMath for uint256; address public administrator; uint256 private BASE_PRICE = 0.1 ether; uint256 private BASE_TIME = 4 hours; MemoryFactoryInterface public Memory; CryptoMiningWarInterface public MiningWar; CryptoEngineerInterface public Engineer; mapping(uint256 => Factory) public factories; mapping(address => bool) public miniGames; struct Factory { uint256 level; uint256 crystals; uint256 programPriceByCrystals; uint256 programPriceByDarkCrystals; uint256 programValue; uint256 eth; uint256 time; },1,"subgraph cluster_1129_CryptoProgramFactory {
label=""CryptoProgramFactory"";
""1129_isContractMiniGame"" [label=""isContractMiniGame""];
""1129_setProgramValue"" [label=""setProgramValue""];
""1129_upgrade"" [label=""upgrade""];
""1129_setMemoryInterface"" [label=""setMemoryInterface""];
""1129_setEngineerInterface"" [label=""setEngineerInterface""];
""1129_setupMiniGame"" [label=""setupMiniGame""];
""1129_getProgramsValue"" [label=""getProgramsValue""];
""1129_setContractMiniGame"" [label=""setContractMiniGame""];
""1129_constructor"" [label=""constructor""];
""1129_setProgramPriceByDarkCrystals"" [label=""setProgramPriceByDarkCrystals""];
""1129_updateFactory"" [label=""updateFactory""];
""1129_fallback"" [label=""fallback""];
""1129_setProgramPriceByCrystals"" [label=""setProgramPriceByCrystals""];
""1129_devFee"" [label=""devFee""];
""1129_startGame"" [label=""startGame""];
""1129_subPrograms"" [label=""subPrograms""];
""1129_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1129_getData"" [label=""getData""];
""1129_initFactory"" [label=""initFactory""];
""1129_buyProgarams"" [label=""buyProgarams""];
""1129_addFactory"" [label=""addFactory""];
""1129_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1129_setContractMiniGame"" -> ""1129_isAdministrator"";
""1129_updateFactory"" -> ""1129_devFee"";
""1129_constructor"" -> ""1129_setEngineerInterface"";
""1129_constructor"" -> ""1129_setMiningWarInterface"";
""1129_setEngineerInterface"" -> ""1129_isAdministrator"";
""1129_constructor"" -> ""1129_setMemoryInterface"";
""1129_setProgramPriceByDarkCrystals"" -> ""1129_isAdministrator"";
""1129_setMemoryInterface"" -> ""1129_isAdministrator"";
""1129_startGame"" -> ""1129_initFactory"";
""1129_subPrograms"" -> ""1129_onlyContractsMiniGame"";
""1129_setMiningWarInterface"" -> ""1129_isAdministrator"";
""1129_setProgramValue"" -> ""1129_isAdministrator"";
""1129_addFactory"" -> ""1129_isAdministrator"";
""1129_setProgramPriceByCrystals"" -> ""1129_isAdministrator"";
""1129_removeContractMiniGame"" -> ""1129_isAdministrator"";
""1129_upgrade"" -> ""1129_isAdministrator"";
}
"
0x74a12ce6eebc23c3f785c0ab50d02228587dcc1a.sol,FrozenToken,"contract FrozenToken is ERC20Token, ITokenRecipient { mapping (address => bool) frozeds; uint256 public frozedCount; bool public freezeEnabled = false; bool public autoFreeze = false; bool public mintFinished = false; event Freeze(address indexed wallet); event UnFreeze(address indexed wallet); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); event Mint(address indexed sender, address indexed wallet, uint256 amount); event ReceiveTokens(address indexed spender, address indexed token, uint256 value, bytes extraData); event ApproveAndCall(address indexed spender, uint256 value, bytes extraData); event Burn(address indexed sender, uint256 amount); event MintFinished(address indexed spender); modifier notFreeze { require(frozeds[msg.sender] == false || freezeEnabled == false); _; }",1,"subgraph cluster_1883_FrozenToken {
label=""FrozenToken"";
""1883_unFreeze"" [label=""unFreeze""];
""1883_transfer"" [label=""transfer""];
""1883_increaseApproval"" [label=""increaseApproval""];
""1883_decreaseApproval"" [label=""decreaseApproval""];
""1883_approveAndCall"" [label=""approveAndCall""];
""1883_mint"" [label=""mint""];
""1883_approve"" [label=""approve""];
""1883_freeze"" [label=""freeze""];
""1883_mintFinish"" [label=""mintFinish""];
""1883_isFreeze"" [label=""isFreeze""];
""1883_updAutoFreeze"" [label=""updAutoFreeze""];
""1883_burn"" [label=""burn""];
""1883_updFreezeEnabled"" [label=""updFreezeEnabled""];
""1883_receiveApproval"" [label=""receiveApproval""];
""1883_transferFrom"" [label=""transferFrom""];
""1883_mint"" -> ""1883_canMint"";
""1883_freeze"" -> ""1883_notOwner"";
""1883_transferFrom"" -> ""1883_transferFrom"";
""1883_approve"" -> ""1883_approve"";
""1883_mint"" -> ""1883_validAddress"";
""1883_increaseApproval"" -> ""1883_notFreezeFrom"";
""1883_approveAndCall"" -> ""1883_validAddress"";
""1883_unFreeze"" -> ""1883_validAddress"";
""1883_decreaseApproval"" -> ""1883_notFreezeFrom"";
""1883_freeze"" -> ""1883_authLevel"";
""1883_mintFinish"" -> ""1883_onlyOwner"";
""1883_transfer"" -> ""1883_transfer"";
""1883_receiveApproval"" -> ""1883_validAddress"";
""1883_approveAndCall"" -> ""1883_approve"";
""1883_receiveApproval"" -> ""1883_greaterThanZero"";
""1883_burn"" -> ""1883_validBalance"";
""1883_burn"" -> ""1883_greaterThanZero"";
""1883_increaseApproval"" -> ""1883_increaseApproval"";
""1883_transfer"" -> ""1883_notFreeze"";
""1883_mint"" -> ""1883_isAuthorized"";
""1883_isFreeze"" -> ""1883_validAddress"";
""1883_freeze"" -> ""1883_notThis"";
""1883_approve"" -> ""1883_notFreezeFrom"";
""1883_freeze"" -> ""1883_validAddress"";
""1883_transferFrom"" -> ""1883_notFreezeFrom"";
""1883_updFreezeEnabled"" -> ""1883_authLevel"";
""1883_unFreeze"" -> ""1883_authLevel"";
""1883_mint"" -> ""1883_isFreeze"";
""1883_updAutoFreeze"" -> ""1883_authLevel"";
""1883_mint"" -> ""1883_greaterThanZero"";
""1883_decreaseApproval"" -> ""1883_decreaseApproval"";
""1883_approveAndCall"" -> ""1883_greaterThanZero"";
""1883_burn"" -> ""1883_isFreeze"";
""1883_mint"" -> ""1883_authLevel"";
}
"
0x485b224c97ad56dc5b145eafdee71a7b5163f735.sol,PonziBet,contract PonziBet { using SafeMath for uint; EthPyramid public pyramid; address public admin; address public contractAddress; uint public minBet; uint public roundTime; uint public startPrice; uint public endPrice; uint[] public upBetRecords; uint[] public downBetRecords; mapping (address => uint) lastBet; mapping (address => bool) userBet; mapping (bool => uint) totalBalance; mapping (address => uint) feeBalance; mapping (address => mapping (bool => uint)) userBalances; function PonziBet() public { admin = msg.sender; },1,"subgraph cluster_599_PonziBet {
label=""PonziBet"";
""599_getUserBalances"" [label=""getUserBalances""];
""599_changeMinBet"" [label=""changeMinBet""];
""599_PonziBet"" [label=""PonziBet""];
""599_getUserBet"" [label=""getUserBet""];
""599_recordBet"" [label=""recordBet""];
""599_totalBalanceDown"" [label=""totalBalanceDown""];
""599_enterRound"" [label=""enterRound""];
""599_getUserBalancesLastBet"" [label=""getUserBalancesLastBet""];
""599_withdrawFromFeeBalance"" [label=""withdrawFromFeeBalance""];
""599_totalBalanceUp"" [label=""totalBalanceUp""];
""599_changeContractAddress"" [label=""changeContractAddress""];
""599_placeBet"" [label=""placeBet""];
""599_settleBet"" [label=""settleBet""];
""599_changeMinBet"" -> ""599_onlyAdmin"";
""599_enterRound"" -> ""599_recordBet"";
""599_withdrawFromFeeBalance"" -> ""599_onlyAdmin"";
""599_changeContractAddress"" -> ""599_onlyAdmin"";
""599_placeBet"" -> ""599_settleBet"";
}
"
0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol,FundingVault,contract FundingVault { bool public _initialized = false; address public vaultOwner ; address public outputAddress; address public managerAddress; bool public allFundingProcessed = false; bool public DirectFundingProcessed = false; ABIFunding FundingEntity; ABIFundingManager FundingManagerEntity; ABIMilestones MilestonesEntity; ABIProposals ProposalsEntity; ABITokenSCADAVariable TokenSCADAEntity; ABIToken TokenEntity ; uint256 public amount_direct = 0; uint256 public amount_milestone = 0; bool public emergencyFundReleased = false; uint8 emergencyFundPercentage = 0; uint256 BylawsCashBackOwnerMiaDuration; uint256 BylawsCashBackVoteRejectedDuration; uint256 BylawsProposalVotingDuration; struct PurchaseStruct { uint256 unix_time; uint8 payment_method; uint256 amount; uint8 funding_stage; uint16 index; },1,"subgraph cluster_2703_FundingVault {
label=""FundingVault"";
""2703_BalanceNum"" [label=""BalanceNum""];
""2703_checkFundingStateFailed"" [label=""checkFundingStateFailed""];
""2703_allFundingProcessed"" [label=""allFundingProcessed""];
""2703_tokenBalances"" [label=""tokenBalances""];
""2703_checkMilestoneStateInvestorVotedNoVotingEndedNo"" [label=""checkMilestoneStateInvestorVotedNoVotingEndedNo""];
""2703_releaseTokensAndEtherForEmergencyFund"" [label=""releaseTokensAndEtherForEmergencyFund""];
""2703_addPayment"" [label=""addPayment""];
""2703_initMilestoneTokenAndEtherBalances"" [label=""initMilestoneTokenAndEtherBalances""];
""2703_initialize"" [label=""initialize""];
""2703_ReleaseFundsAndTokens"" [label=""ReleaseFundsAndTokens""];
""2703_canCashBack"" [label=""canCashBack""];
""2703_checkOwnerFailedToSetTimeOnMeeting"" [label=""checkOwnerFailedToSetTimeOnMeeting""];
""2703_emergencyFundReleased"" [label=""emergencyFundReleased""];
""2703_getDirectBoughtTokens"" [label=""getDirectBoughtTokens""];
""2703_getBoughtTokens"" [label=""getBoughtTokens""];
""2703_ReleaseFundsToInvestor"" [label=""ReleaseFundsToInvestor""];
""2703_ReleaseFundsToInvestor"" -> ""2703_isOwner"";
""2703_releaseTokensAndEtherForEmergencyFund"" -> ""2703_onlyManager"";
""2703_ReleaseFundsAndTokens"" -> ""2703_canCashBack"";
""2703_addPayment"" -> ""2703_requireInitialised"";
""2703_releaseTokensAndEtherForEmergencyFund"" -> ""2703_requireInitialised"";
""2703_ReleaseFundsAndTokens"" -> ""2703_requireInitialised"";
""2703_ReleaseFundsToInvestor"" -> ""2703_canCashBack"";
""2703_canCashBack"" -> ""2703_checkFundingStateFailed"";
""2703_ReleaseFundsAndTokens"" -> ""2703_initMilestoneTokenAndEtherBalances"";
""2703_canCashBack"" -> ""2703_requireInitialised"";
""2703_ReleaseFundsAndTokens"" -> ""2703_getDirectBoughtTokens"";
""2703_ReleaseFundsToInvestor"" -> ""2703_requireInitialised"";
""2703_canCashBack"" -> ""2703_checkOwnerFailedToSetTimeOnMeeting"";
""2703_ReleaseFundsAndTokens"" -> ""2703_onlyManager"";
""2703_canCashBack"" -> ""2703_checkMilestoneStateInvestorVotedNoVotingEndedNo"";
""2703_addPayment"" -> ""2703_onlyManager"";
""2703_initialize"" -> ""2703_requireNotInitialised"";
}
"
0xebf0027ef3b4b7a742a148cddb0f2b14e5d8f0e9.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; ERC20 public token; address public wallet; uint256 public rate; uint256 public weiRaised; event TokenPurchase( address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount ); constructor(uint256 _rate, address _wallet, ERC20 _token) public { require(_rate > 0); require(_wallet != address(0)); require(_token != address(0)); rate = _rate; wallet = _wallet; token = _token; }",1,"subgraph cluster_706_Crowdsale {
label=""Crowdsale"";
""706__preValidatePurchase"" [label=""_preValidatePurchase""];
""706_fallback"" [label=""fallback""];
""706__postValidatePurchase"" [label=""_postValidatePurchase""];
""706__forwardFunds"" [label=""_forwardFunds""];
""706__processPurchase"" [label=""_processPurchase""];
""706__updatePurchasingState"" [label=""_updatePurchasingState""];
""706__deliverTokens"" [label=""_deliverTokens""];
""706__getTokenAmount"" [label=""_getTokenAmount""];
""706_constructor"" [label=""constructor""];
""706_buyTokens"" [label=""buyTokens""];
""706_buyTokens"" -> ""706__getTokenAmount"";
""706_buyTokens"" -> ""706__processPurchase"";
""706_buyTokens"" -> ""706__updatePurchasingState"";
""706_buyTokens"" -> ""706__forwardFunds"";
""706_buyTokens"" -> ""706__postValidatePurchase"";
""706_fallback"" -> ""706_buyTokens"";
""706__processPurchase"" -> ""706__deliverTokens"";
""706_buyTokens"" -> ""706__preValidatePurchase"";
}
"
0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol,LockinManager,contract LockinManager { using SafeMath for uint256; struct Lock { uint256 amount; uint256 unlockDate; uint256 lockedFor; },1,"subgraph cluster_1738_LockinManager {
label=""LockinManager"";
""1738_lockIt"" [label=""lockIt""];
""1738_getLocksLockedFor"" [label=""getLocksLockedFor""];
""1738_getLock"" [label=""getLock""];
""1738_ifInAllowedLocks"" [label=""ifInAllowedLocks""];
""1738_getLocks"" [label=""getLocks""];
""1738_removeAllowedLock"" [label=""removeAllowedLock""];
""1738_setDefaultAllowedLock"" [label=""setDefaultAllowedLock""];
""1738_LockinManager"" [label=""LockinManager""];
""1738_lockForDays"" [label=""lockForDays""];
""1738_addValidContract"" [label=""addValidContract""];
""1738_removeValidContract"" [label=""removeValidContract""];
""1738_defaultLockin"" [label=""defaultLockin""];
""1738_getLocksAmount"" [label=""getLocksAmount""];
""1738_addAllowedLock"" [label=""addAllowedLock""];
""1738_getLocksUnlockDate"" [label=""getLocksUnlockDate""];
""1738_getLocksUnlockDate"" -> ""1738_validContractOnly"";
""1738_removeValidContract"" -> ""1738_adminOnly"";
""1738_setDefaultAllowedLock"" -> ""1738_adminOnly"";
""1738_getLocksAmount"" -> ""1738_validContractOnly"";
""1738_getLocksLockedFor"" -> ""1738_validContractOnly"";
""1738_getLocks"" -> ""1738_validContractOnly"";
""1738_removeAllowedLock"" -> ""1738_adminOnly"";
""1738_getLock"" -> ""1738_validContractOnly"";
""1738_addAllowedLock"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_lockIt"";
""1738_lockForDays"" -> ""1738_ifInAllowedLocks"";
""1738_lockForDays"" -> ""1738_lockIt"";
""1738_addValidContract"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_validContractOnly"";
}
"
0xc4ab0f59c4d8bb15e237906a06a736d965a2c390.sol,AirdropLibraToken,"contract AirdropLibraToken is Ownable { using SafeMath for uint256; uint256 decimal = 10**uint256(18); uint256 distributedTotal = 0; uint256 airdropStartTime; uint256 airdropEndTime; LibraToken private token; mapping (address => bool) public airdropAdmins; mapping(address => uint256) public airdropDoneAmountMap; address[] public airdropDoneList; event Airdrop(address _receiver, uint256 amount); event AddAdmin(address _admin); event RemoveAdmin(address _admin); event UpdateEndTime(address _operator, uint256 _oldTime, uint256 _newTime); modifier onlyOwnerOrAdmin() { require(msg.sender == owner || airdropAdmins[msg.sender]); _; }",1,"subgraph cluster_1009_AirdropLibraToken {
label=""AirdropLibraToken"";
""1009_getDistributedTotal"" [label=""getDistributedTotal""];
""1009_getDoneAddresses"" [label=""getDoneAddresses""];
""1009_isAdmin"" [label=""isAdmin""];
""1009_airdropTokens"" [label=""airdropTokens""];
""1009_transferOutBalance"" [label=""transferOutBalance""];
""1009_getDoneAirdropAmount"" [label=""getDoneAirdropAmount""];
""1009_removeAdmin"" [label=""removeAdmin""];
""1009_airdropTokensBatch"" [label=""airdropTokensBatch""];
""1009_addAdmin"" [label=""addAdmin""];
""1009_AirdropLibraToken"" [label=""AirdropLibraToken""];
""1009_updateAirdropEndTime"" [label=""updateAirdropEndTime""];
""1009_balanceOfThis"" [label=""balanceOfThis""];
""1009_airdropTokensBatch"" -> ""1009_onlyWhileAirdropPhaseOpen"";
""1009_transferOutBalance"" -> ""1009_onlyOwner"";
""1009_removeAdmin"" -> ""1009_onlyOwner"";
""1009_airdropTokens"" -> ""1009_onlyOwnerOrAdmin"";
""1009_addAdmin"" -> ""1009_onlyOwner"";
""1009_removeAdmin"" -> ""1009_isAdmin"";
""1009_airdropTokensBatch"" -> ""1009_onlyOwnerOrAdmin"";
""1009_airdropTokens"" -> ""1009_onlyWhileAirdropPhaseOpen"";
""1009_updateAirdropEndTime"" -> ""1009_onlyOwnerOrAdmin"";
""1009_airdropTokensBatch"" -> ""1009_airdropTokens"";
}
"
0x000000c96e715a5b8cd3beaea66bdb749225fa2f.sol,BurnableToken,"contract BurnableToken is BasicToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { require(_value <= balances.balanceOf(msg.sender)); address burner = msg.sender; balances.subBalance(burner, _value); totalSupply_ = totalSupply_.sub(_value); Burn(burner, _value); Transfer(burner, address(0), _value); }",1,"subgraph cluster_1429_BurnableToken {
label=""BurnableToken"";
""1429_burn"" [label=""burn""];
}
"
0x0e8175729e02db48ca0e2ca80efb72fe84a7dedd.sol,MechanicKittyUnit,"contract MechanicKittyUnit is ERC20, PremiumUnit { using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint256 public constant unitId = 3; uint256 public unitProductionSeconds = 43200; uint8 public constant decimals = 0; Units constant units = Units(0xf936AA9e1f22C915Abf4A66a5a6e94eb8716BA5e); address constant factories = 0xC767B1CEc507f1584469E8efE1a94AD4c75e02ed; mapping(address => uint256) balances; mapping(address => uint256) lastEquipTime; mapping(address => mapping(address => uint256)) allowed; uint256 public totalSupply; function totalSupply() external view returns (uint) { return totalSupply.sub(balances[address(0)]); }",1,"subgraph cluster_501_MechanicKittyUnit {
label=""MechanicKittyUnit"";
""501_transfer"" [label=""transfer""];
""501_approveAndCall"" [label=""approveAndCall""];
""501_allowance"" [label=""allowance""];
""501_approve"" [label=""approve""];
""501_mintUnit"" [label=""mintUnit""];
""501_unequipUnit"" [label=""unequipUnit""];
""501_totalSupply"" [label=""totalSupply""];
""501_balanceOf"" [label=""balanceOf""];
""501_transferFrom"" [label=""transferFrom""];
""501_equipUnit"" [label=""equipUnit""];
}
"
0xeda8b016efa8b1161208cf041cd86972eee0f31e.sol,BonusFinalizeAgent,"contract BonusFinalizeAgent is FinalizeAgent, SafeMathLib { CrowdsaleToken public token; Crowdsale public crowdsale; uint256 public allocatedTokens; uint256 tokenCap; address walletAddress; function BonusFinalizeAgent(CrowdsaleToken _token, Crowdsale _crowdsale, uint256 _tokenCap, address _walletAddress) public { token = _token; crowdsale = _crowdsale; require(address(crowdsale) != 0); tokenCap = _tokenCap; walletAddress = _walletAddress; }",1,"subgraph cluster_2784_BonusFinalizeAgent {
label=""BonusFinalizeAgent"";
""2784_isSane"" [label=""isSane""];
""2784_finalizeCrowdsale"" [label=""finalizeCrowdsale""];
""2784_BonusFinalizeAgent"" [label=""BonusFinalizeAgent""];
""2784_finalizeCrowdsale"" -> ""2784_safeSub"";
}
"
0x57ae3a491f4555e1eed37338d1b8b5222935f28a.sol,PreSale,"contract PreSale is Ownable, ReentrancyGuard { using SafeMath for uint256; RicoToken public token; address tokenContractAddress; uint256 public startTime; uint256 public endTime; address public wallet; uint256 public rate; uint256 public minimumInvest; uint256 public softCap; uint256 public hardCap; mapping(address => uint) public balances; uint256 public weiRaised; uint256 bonusPercent; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function PreSale( uint256 _startTime, uint256 _period, address _wallet, address _token, uint256 _minimumInvest) public { require(_period != 0); require(_token != address(0)); startTime = _startTime; endTime = startTime + _period * 1 days; wallet = _wallet; token = RicoToken(_token); tokenContractAddress = _token; minimumInvest = _minimumInvest; rate = 1000; softCap = 150 * 1 ether; hardCap = 1500 * 1 ether; bonusPercent = 50; }",1,"subgraph cluster_1352_PreSale {
label=""PreSale"";
""1352_weiRaised"" [label=""weiRaised""];
""1352_finishPreSale"" [label=""finishPreSale""];
""1352_buyTokens"" [label=""buyTokens""];
""1352_PreSale"" [label=""PreSale""];
""1352_forwardFunds"" [label=""forwardFunds""];
""1352_fallback"" [label=""fallback""];
""1352_getTokenAmount"" [label=""getTokenAmount""];
""1352_refund"" [label=""refund""];
""1352_hasEnded"" [label=""hasEnded""];
""1352_changeTokenOwner"" [label=""changeTokenOwner""];
""1352_buyTokens"" -> ""1352_saleIsOn"";
""1352_finishPreSale"" -> ""1352_onlyOwner"";
""1352_buyTokens"" -> ""1352_isUnderHardCap"";
""1352_changeTokenOwner"" -> ""1352_onlyOwner"";
""1352_refund"" -> ""1352_refundAllowed"";
""1352_buyTokens"" -> ""1352_getTokenAmount"";
""1352_fallback"" -> ""1352_buyTokens"";
""1352_finishPreSale"" -> ""1352_forwardFunds"";
""1352_buyTokens"" -> ""1352_nonReentrant"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0xeee7c7e228eafb0f8945c5dbaa8ea4f6ee12b36d.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; address public wallet; address public addressOfTokenUsedAsReward; uint256 public price = 1818; token tokenReward; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale() { wallet = 0x5d467Dfc5e3FcA3ea4bd6C312275ca930d2f3E19; addressOfTokenUsedAsReward = 0xB6eC8C3a347f66a3d7C4F39D6DD68A422E69E81d ; tokenReward = token(addressOfTokenUsedAsReward); }",1,"subgraph cluster_347_Crowdsale {
label=""Crowdsale"";
""347_stopSale"" [label=""stopSale""];
""347_changeWallet"" [label=""changeWallet""];
""347_changeTokenReward"" [label=""changeTokenReward""];
""347_validPurchase"" [label=""validPurchase""];
""347_fallback"" [label=""fallback""];
""347_withdrawTokens"" [label=""withdrawTokens""];
""347_buyTokens"" [label=""buyTokens""];
""347_setPrice"" [label=""setPrice""];
""347_Crowdsale"" [label=""Crowdsale""];
""347_startSale"" [label=""startSale""];
""347_forwardFunds"" [label=""forwardFunds""];
""347_fallback"" -> ""347_buyTokens"";
""347_buyTokens"" -> ""347_validPurchase"";
""347_buyTokens"" -> ""347_forwardFunds"";
}
"
0x25cf23787ac0f92a3eafa61f458ad0b7c4b27c3d.sol,Zethroll,"contract Zethroll is ZTHReceivingContract { using SafeMath for uint; modifier betIsValid(uint _betSize, uint _playerNumber) { require( calculateProfit(_betSize, _playerNumber) < maxProfit && _betSize >= minBet && _playerNumber > minNumber && _playerNumber < maxNumber); _; }",1,"subgraph cluster_899_Zethroll {
label=""Zethroll"";
""899_constructor"" [label=""constructor""];
""899_ownerSetMinBet"" [label=""ownerSetMinBet""];
""899_ownerSetBankroll"" [label=""ownerSetBankroll""];
""899_random"" [label=""random""];
""899_maxRandom"" [label=""maxRandom""];
""899_tokenFallback"" [label=""tokenFallback""];
""899_fallback"" [label=""fallback""];
""899_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""899__zthToken"" [label=""_zthToken""];
""899_ownerPauseGame"" [label=""ownerPauseGame""];
""899_ownerTransferZTH"" [label=""ownerTransferZTH""];
""899_setMaxProfit"" [label=""setMaxProfit""];
""899_dumpdivs"" [label=""dumpdivs""];
""899_ownerChangeOwner"" [label=""ownerChangeOwner""];
""899_finishBet"" [label=""finishBet""];
""899_calculateProfit"" [label=""calculateProfit""];
""899_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""899__finishBet"" [label=""_finishBet""];
""899_ownerkill"" [label=""ownerkill""];
""899__playerRollDice"" [label=""_playerRollDice""];
""899_tokenFallback"" -> ""899__playerRollDice"";
""899_ownerTransferZTH"" -> ""899_setMaxProfit"";
""899_random"" -> ""899_maxRandom"";
""899_ownerSetBankroll"" -> ""899_onlyOwner"";
""899_constructor"" -> ""899_ownerSetMaxProfitAsPercentOfHouse"";
""899_ownerPauseGame"" -> ""899_onlyOwner"";
""899_ownerChangeOwner"" -> ""899_onlyOwner"";
""899_ownerSetMaxProfitAsPercentOfHouse"" -> ""899_onlyOwner"";
""899_ownerkill"" -> ""899_onlyOwner"";
""899_ownerSetMinBet"" -> ""899_onlyOwner"";
""899_tokenFallback"" -> ""899_setMaxProfit"";
""899_ownerTransferZTH"" -> ""899_onlyOwner"";
""899_finishBet"" -> ""899_gameIsActive"";
""899__playerRollDice"" -> ""899_betIsValid"";
""899__finishBet"" -> ""899_calculateProfit"";
""899__playerRollDice"" -> ""899__finishBet"";
""899__finishBet"" -> ""899_setMaxProfit"";
""899__playerRollDice"" -> ""899_gameIsActive"";
""899_finishBet"" -> ""899__finishBet"";
""899_ownerSetMaxProfitAsPercentOfHouse"" -> ""899_setMaxProfit"";
""899__finishBet"" -> ""899_random"";
""899_ownerUpdateContractBalance"" -> ""899_onlyOwner"";
""899__playerRollDice"" -> ""899__zthToken"";
""899_constructor"" -> ""899_ownerSetMinBet"";
}
"
0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol,TwoCoinsOneMoonGame,contract TwoCoinsOneMoonGame { struct Bettor { address account; uint256 amount; },1,"subgraph cluster_536_TwoCoinsOneMoonGame {
label=""TwoCoinsOneMoonGame"";
""536_getBetAmount"" [label=""getBetAmount""];
""536_constructor"" [label=""constructor""];
""536_addEvent"" [label=""addEvent""];
""536_depositBalance"" [label=""depositBalance""];
""536_putMessage"" [label=""putMessage""];
""536_checkMoon"" [label=""checkMoon""];
""536_withdraw"" [label=""withdraw""];
""536_betRedCoin"" [label=""betRedCoin""];
""536_betBlueCoin"" [label=""betBlueCoin""];
""536_burstBubble"" [label=""burstBubble""];
""536_checkMoon"" -> ""536_addEvent"";
""536_betBlueCoin"" -> ""536_getBetAmount"";
""536_burstBubble"" -> ""536_depositBalance"";
""536_burstBubble"" -> ""536_addEvent"";
""536_betRedCoin"" -> ""536_checkMoon"";
""536_checkMoon"" -> ""536_burstBubble"";
""536_betBlueCoin"" -> ""536_checkMoon"";
""536_betRedCoin"" -> ""536_getBetAmount"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,EtherNomin,"contract EtherNomin is ExternStateProxyFeeToken { address public oracle; Court public court; address public beneficiary; uint public nominPool; uint public poolFeeRate = UNIT / 200; uint constant MINIMUM_PURCHASE = UNIT / 100; uint constant MINIMUM_ISSUANCE_RATIO = 2 * UNIT; uint constant AUTO_LIQUIDATION_RATIO = UNIT; uint constant DEFAULT_LIQUIDATION_PERIOD = 90 days; uint constant MAX_LIQUIDATION_PERIOD = 180 days; uint public liquidationPeriod = DEFAULT_LIQUIDATION_PERIOD; uint public liquidationTimestamp = ~uint(0); uint public etherPrice; uint public lastPriceUpdate; uint public stalePeriod = 2 days; mapping(address => bool) public frozen; function EtherNomin(address _havven, address _oracle, address _beneficiary, uint initialEtherPrice, address _owner, TokenState initialState) ExternStateProxyFeeToken(, , 15 * UNIT / 10000, _havven, initialState, _owner) public { oracle = _oracle; beneficiary = _beneficiary; etherPrice = initialEtherPrice; lastPriceUpdate = now; emit PriceUpdated(etherPrice); frozen[this] = true; }",1,"subgraph cluster_3176_EtherNomin {
label=""EtherNomin"";
""3176_etherValue"" [label=""etherValue""];
""3176_frozen"" [label=""frozen""];
""3176_purchaseCostEther"" [label=""purchaseCostEther""];
""3176_etherValueAllowStale"" [label=""etherValueAllowStale""];
""3176_collateralisationRatio"" [label=""collateralisationRatio""];
""3176_fallback"" [label=""fallback""];
""3176_saleProceedsEtherAllowStale"" [label=""saleProceedsEtherAllowStale""];
""3176_poolFeeIncurred"" [label=""poolFeeIncurred""];
""3176_buy"" [label=""buy""];
""3176_sell"" [label=""sell""];
""3176_beginLiquidation"" [label=""beginLiquidation""];
""3176_updatePrice"" [label=""updatePrice""];
""3176_isLiquidating"" [label=""isLiquidating""];
""3176_terminateLiquidation"" [label=""terminateLiquidation""];
""3176_saleProceedsFiat"" [label=""saleProceedsFiat""];
""3176_EtherNomin"" [label=""EtherNomin""];
""3176_unfreezeAccount"" [label=""unfreezeAccount""];
""3176_confiscateBalance"" [label=""confiscateBalance""];
""3176_setStalePeriod"" [label=""setStalePeriod""];
""3176_setCourt"" [label=""setCourt""];
""3176_replenishPool"" [label=""replenishPool""];
""3176_fiatBalance"" [label=""fiatBalance""];
""3176_canSelfDestruct"" [label=""canSelfDestruct""];
""3176_transfer"" [label=""transfer""];
""3176_purchaseCostFiat"" [label=""purchaseCostFiat""];
""3176_setPoolFeeRate"" [label=""setPoolFeeRate""];
""3176_setBeneficiary"" [label=""setBeneficiary""];
""3176_transferFrom"" [label=""transferFrom""];
""3176_forceLiquidation"" [label=""forceLiquidation""];
""3176_selfDestruct"" [label=""selfDestruct""];
""3176__nominCap"" [label=""_nominCap""];
""3176_saleProceedsEther"" [label=""saleProceedsEther""];
""3176_diminishPool"" [label=""diminishPool""];
""3176_priceIsStale"" [label=""priceIsStale""];
""3176_setOracle"" [label=""setOracle""];
""3176_extendLiquidationPeriod"" [label=""extendLiquidationPeriod""];
""3176_fiatValue"" [label=""fiatValue""];
""3176_extendLiquidationPeriod"" -> ""3176_safeAdd"";
""3176_buy"" -> ""3176_safeAdd"";
""3176_poolFeeIncurred"" -> ""3176_safeMul_dec"";
""3176_sell"" -> ""3176_saleProceedsEtherAllowStale"";
""3176_buy"" -> ""3176_safeSub"";
""3176_replenishPool"" -> ""3176_safeMul_dec"";
""3176_forceLiquidation"" -> ""3176_notLiquidating"";
""3176_purchaseCostFiat"" -> ""3176_poolFeeIncurred"";
""3176_saleProceedsFiat"" -> ""3176_poolFeeIncurred"";
""3176_collateralisationRatio"" -> ""3176__nominCap"";
""3176_priceIsStale"" -> ""3176_safeAdd"";
""3176_setOracle"" -> ""3176_optionalProxy_onlyOwner"";
""3176_terminateLiquidation"" -> ""3176_isLiquidating"";
""3176_forceLiquidation"" -> ""3176_beginLiquidation"";
""3176_unfreezeAccount"" -> ""3176_optionalProxy_onlyOwner"";
""3176_saleProceedsEther"" -> ""3176_saleProceedsFiat"";
""3176_buy"" -> ""3176_notLiquidating"";
""3176_saleProceedsEtherAllowStale"" -> ""3176_saleProceedsFiat"";
""3176_collateralisationRatio"" -> ""3176_fiatBalance"";
""3176_buy"" -> ""3176_optionalProxy"";
""3176_canSelfDestruct"" -> ""3176_isLiquidating"";
""3176_etherValue"" -> ""3176_safeDiv_dec"";
""3176_transferFrom"" -> ""3176_optionalProxy"";
""3176_replenishPool"" -> ""3176_safeAdd"";
""3176_confiscateBalance"" -> ""3176_safeAdd"";
""3176_saleProceedsEtherAllowStale"" -> ""3176_etherValueAllowStale"";
""3176_buy"" -> ""3176_purchaseCostEther"";
""3176_fiatBalance"" -> ""3176_fiatValue"";
""3176_terminateLiquidation"" -> ""3176_priceNotStale"";
""3176_selfDestruct"" -> ""3176_optionalProxy_onlyOwner"";
""3176_setPoolFeeRate"" -> ""3176_optionalProxy_onlyOwner"";
""3176_transfer"" -> ""3176_optionalProxy"";
""3176_terminateLiquidation"" -> ""3176_optionalProxy_onlyOwner"";
""3176_etherValueAllowStale"" -> ""3176_safeDiv_dec"";
""3176_transferFrom"" -> ""3176__transferFrom_byProxy"";
""3176_replenishPool"" -> ""3176_fiatBalance"";
""3176_replenishPool"" -> ""3176_optionalProxy_onlyOwner"";
""3176_replenishPool"" -> ""3176__nominCap"";
""3176_sell"" -> ""3176_isLiquidating"";
""3176_fiatValue"" -> ""3176_priceNotStale"";
""3176_terminateLiquidation"" -> ""3176_collateralisationRatio"";
""3176_saleProceedsEther"" -> ""3176_etherValue"";
""3176_terminateLiquidation"" -> ""3176__nominCap"";
""3176_setCourt"" -> ""3176_optionalProxy_onlyOwner"";
""3176_sell"" -> ""3176_safeSub"";
""3176_EtherNomin"" -> ""3176_ExternStateProxyFeeToken"";
""3176_selfDestruct"" -> ""3176_canSelfDestruct"";
""3176__nominCap"" -> ""3176_safeAdd"";
""3176_diminishPool"" -> ""3176_optionalProxy_onlyOwner"";
""3176_updatePrice"" -> ""3176_postCheckAutoLiquidate"";
""3176_diminishPool"" -> ""3176_safeSub"";
""3176_setBeneficiary"" -> ""3176_optionalProxy_onlyOwner"";
""3176_sell"" -> ""3176_safeAdd"";
""3176_purchaseCostFiat"" -> ""3176_safeAdd"";
""3176_collateralisationRatio"" -> ""3176_safeDiv_dec"";
""3176_etherValue"" -> ""3176_priceNotStale"";
""3176_forceLiquidation"" -> ""3176_optionalProxy_onlyOwner"";
""3176_sell"" -> ""3176_saleProceedsEther"";
""3176_saleProceedsFiat"" -> ""3176_safeSub"";
""3176_sell"" -> ""3176_optionalProxy"";
""3176_fiatValue"" -> ""3176_safeMul_dec"";
""3176_purchaseCostEther"" -> ""3176_etherValue"";
""3176_extendLiquidationPeriod"" -> ""3176_isLiquidating"";
""3176_replenishPool"" -> ""3176_notLiquidating"";
""3176_extendLiquidationPeriod"" -> ""3176_optionalProxy_onlyOwner"";
""3176_setStalePeriod"" -> ""3176_optionalProxy_onlyOwner"";
""3176_purchaseCostEther"" -> ""3176_purchaseCostFiat"";
""3176_transfer"" -> ""3176__transfer_byProxy"";
}
"
0xc767b1cec507f1584469e8efe1a94ad4c75e02ed.sol,PremiumFactories,contract PremiumFactories { Bankroll constant bankroll = Bankroll(0x66a9f1e53173de33bec727ef76afa84956ae1b25); address owner; constructor() public { owner = msg.sender; },1,"subgraph cluster_619_PremiumFactories {
label=""PremiumFactories"";
""619_claimUnits"" [label=""claimUnits""];
""619_purchaseFactory"" [label=""purchaseFactory""];
""619_getFactories"" [label=""getFactories""];
""619_constructor"" [label=""constructor""];
""619_addFactory"" [label=""addFactory""];
""619_updateFactoryConfig"" [label=""updateFactoryConfig""];
""619_getFactoryPrice"" [label=""getFactoryPrice""];
""619_addPremiumUnit"" [label=""addPremiumUnit""];
""619_getFactories"" -> ""619_getFactoryPrice"";
""619_purchaseFactory"" -> ""619_getFactoryPrice"";
}
"
0x0002325fcaaac6ebf1254a626589147bde1a2394.sol,HorseyToken,"contract HorseyToken is EthorseHelpers,Pausable { using SafeMath for uint256; event Claimed(address raceAddress, address eth_address, uint256 tokenId); event Feeding(uint256 tokenId); event ReceivedCarrot(uint256 tokenId, bytes32 newDna); event FeedingFailed(uint256 tokenId); event HorseyRenamed(uint256 tokenId, string newName); event HorseyFreed(uint256 tokenId); RoyalStablesInterface public stables; uint8 public carrotsMultiplier = 1; uint8 public rarityMultiplier = 1; uint256 public claimingFee = 0.008 ether; struct FeedingData { uint256 blockNumber; uint256 horsey; }",1,"subgraph cluster_2145_HorseyToken {
label=""HorseyToken"";
""2145_addLegitDevAddress"" [label=""addLegitDevAddress""];
""2145_setClaimingCosts"" [label=""setClaimingCosts""];
""2145__feed"" [label=""_feed""];
""2145__shiftRight"" [label=""_shiftRight""];
""2145_getOwnedTokens"" [label=""getOwnedTokens""];
""2145_claim"" [label=""claim""];
""2145_addHorseIndex"" [label=""addHorseIndex""];
""2145_fallback"" [label=""fallback""];
""2145_freeForCarrots"" [label=""freeForCarrots""];
""2145_can_claim"" [label=""can_claim""];
""2145_feed"" [label=""feed""];
""2145_constructor"" [label=""constructor""];
""2145_getCarrotCredits"" [label=""getCarrotCredits""];
""2145__increaseRarity"" [label=""_increaseRarity""];
""2145_renameHorsey"" [label=""renameHorsey""];
""2145_setRarityMultiplier"" [label=""setRarityMultiplier""];
""2145__generate_special_horsey"" [label=""_generate_special_horsey""];
""2145_stopFeeding"" [label=""stopFeeding""];
""2145_withdraw"" [label=""withdraw""];
""2145_getHorsey"" [label=""getHorsey""];
""2145_setCarrotsMultiplier"" [label=""setCarrotsMultiplier""];
""2145__makeSpecialId"" [label=""_makeSpecialId""];
""2145__shiftLeft"" [label=""_shiftLeft""];
""2145_setRenamingCosts"" [label=""setRenamingCosts""];
""2145_withdraw"" -> ""2145_onlyOwner"";
""2145_freeForCarrots"" -> ""2145_onlyOwnerOf"";
""2145_addLegitDevAddress"" -> ""2145__addLegitOwner"";
""2145__generate_special_horsey"" -> ""2145__shiftRight"";
""2145_renameHorsey"" -> ""2145_costs"";
""2145_feed"" -> ""2145_onlyOwnerOf"";
""2145_setRarityMultiplier"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145_whenNotPaused"";
""2145_claim"" -> ""2145_costs"";
""2145_freeForCarrots"" -> ""2145_whenNotPaused"";
""2145_stopFeeding"" -> ""2145__feed"";
""2145_feed"" -> ""2145_noFeedingInProgress"";
""2145_setRenamingCosts"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145_can_claim"";
""2145_stopFeeding"" -> ""2145_feedingInProgress"";
""2145_addHorseIndex"" -> ""2145__addHorse"";
""2145_renameHorsey"" -> ""2145_whenNotPaused"";
""2145_claim"" -> ""2145__isWinnerOf"";
""2145_setClaimingCosts"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145__generate_special_horsey"";
""2145__generate_special_horsey"" -> ""2145__makeSpecialId"";
""2145_setCarrotsMultiplier"" -> ""2145_onlyOwner"";
""2145_can_claim"" -> ""2145__isWinnerOf"";
""2145_feed"" -> ""2145_carrotsMeetLevel"";
""2145__feed"" -> ""2145__increaseRarity"";
""2145__increaseRarity"" -> ""2145__shiftLeft"";
""2145_addLegitDevAddress"" -> ""2145_onlyOwner"";
""2145_feed"" -> ""2145_whenNotPaused"";
""2145_addHorseIndex"" -> ""2145_onlyOwner"";
""2145_renameHorsey"" -> ""2145_onlyOwnerOf"";
""2145_constructor"" -> ""2145_constructor"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,GoldBackedToken,"contract GoldBackedToken is Ownable, SafeMath, ERC20, Pausable { event Transfer(address indexed from, address indexed to, uint value); event Approval(address indexed owner, address indexed spender, uint value); event DeductFees(address indexed owner,uint256 amount); event TokenMinted(address destination, uint256 amount); event TokenBurned(address source, uint256 amount); string public name = ; string public symbol = ; uint256 constant public decimals = 18; uint256 constant public hgtDecimals = 8; uint256 constant public allocationPool = 1 * 10**9 * 10**hgtDecimals; uint256 constant public maxAllocation = 38 * 10**5 * 10**decimals; uint256 public totAllocation; address public feeCalculator; address public HGT; function setFeeCalculator(address newFC) onlyOwner { feeCalculator = newFC; }",1,"subgraph cluster_2164_GoldBackedToken {
label=""GoldBackedToken"";
""2164_update"" [label=""update""];
""2164_mintTokens"" [label=""mintTokens""];
""2164_updatedBalance"" [label=""updatedBalance""];
""2164_balanceOf"" [label=""balanceOf""];
""2164_GoldBackedToken"" [label=""GoldBackedToken""];
""2164_calcFees"" [label=""calcFees""];
""2164_burnTokens"" [label=""burnTokens""];
""2164_approve"" [label=""approve""];
""2164_addAllocationPartOne"" [label=""addAllocationPartOne""];
""2164_allowance"" [label=""allowance""];
""2164_transfer"" [label=""transfer""];
""2164_addAllocationPartTwo"" [label=""addAllocationPartTwo""];
""2164_setHGT"" [label=""setHGT""];
""2164_setMinter"" [label=""setMinter""];
""2164_aotLength"" [label=""aotLength""];
""2164_parentFees"" [label=""parentFees""];
""2164_parentChange"" [label=""parentChange""];
""2164_currentAllocationLength"" [label=""currentAllocationLength""];
""2164_setFeeCalculator"" [label=""setFeeCalculator""];
""2164_transferFrom"" [label=""transferFrom""];
""2164_partAllocationLength"" [label=""partAllocationLength""];
""2164_mintTokens"" -> ""2164_update"";
""2164_mintTokens"" -> ""2164_safeAdd"";
""2164_approve"" -> ""2164_whenNotPaused"";
""2164_transfer"" -> ""2164_safeAdd"";
""2164_transfer"" -> ""2164_update"";
""2164_transferFrom"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartTwo"" -> ""2164_calcFees"";
""2164_transfer"" -> ""2164_safeSub"";
""2164_setFeeCalculator"" -> ""2164_onlyOwner"";
""2164_parentChange"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartTwo"" -> ""2164_onlyOwner"";
""2164_setHGT"" -> ""2164_onlyOwner"";
""2164_addAllocationPartOne"" -> ""2164_onlyOwner"";
""2164_transfer"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartOne"" -> ""2164_calcFees"";
""2164_update"" -> ""2164_updatedBalance"";
""2164_parentFees"" -> ""2164_whenNotPaused"";
""2164_transferFrom"" -> ""2164_update"";
""2164_updatedBalance"" -> ""2164_calcFees"";
""2164_burnTokens"" -> ""2164_safeSub"";
""2164_burnTokens"" -> ""2164_update"";
""2164_transferFrom"" -> ""2164_safeAdd"";
""2164_transferFrom"" -> ""2164_safeSub"";
""2164_parentFees"" -> ""2164_update"";
""2164_balanceOf"" -> ""2164_updatedBalance"";
""2164_setMinter"" -> ""2164_onlyOwner"";
}
"
0x4802fe0bf7eb3b3b0dce3ede89c575341f10e3e0.sol,SynergisProxyDeposit,"contract SynergisProxyDeposit is Ownable { using SafeMath for uint256; enum Role {Fund, Team, Adviser}",1,"subgraph cluster_968_SynergisProxyDeposit {
label=""SynergisProxyDeposit"";
""968_withdraw"" [label=""withdraw""];
""968_newDeposit"" [label=""newDeposit""];
""968_deleteDeposit"" [label=""deleteDeposit""];
""968_setERC20address"" [label=""setERC20address""];
""968_checkBalance"" [label=""checkBalance""];
""968_constructor"" [label=""constructor""];
""968_getDepositID"" [label=""getDepositID""];
""968_distributeIncomeEther"" [label=""distributeIncomeEther""];
""968_fallback"" [label=""fallback""];
""968_addSpecialOffer"" [label=""addSpecialOffer""];
""968_sellTokens"" [label=""sellTokens""];
""968_removeSpecialOffer"" [label=""removeSpecialOffer""];
""968_fallback"" -> ""968_sellTokens"";
""968_distributeIncomeEther"" -> ""968_onlyOwner"";
""968_setERC20address"" -> ""968_onlyOwner"";
""968_withdraw"" -> ""968_getDepositID"";
""968_deleteDeposit"" -> ""968_onlyOwner"";
""968_newDeposit"" -> ""968_getDepositID"";
""968_addSpecialOffer"" -> ""968_onlyOwner"";
""968_deleteDeposit"" -> ""968_getDepositID"";
""968_newDeposit"" -> ""968_onlyOwner"";
""968_removeSpecialOffer"" -> ""968_onlyOwner"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllCrowdsale,"contract ClinicAllCrowdsale is Crowdsale, FinalizableCrowdsale, MintedCrowdsale, ManagedWhitelist, Limited { constructor ( uint256 _tokenLimitSupply, uint256 _rate, address _wallet, address _privateSaleWallet, ERC20 _token, uint256 _openingTime, uint256 _closingTime, uint256 _discountTokenAmount, uint256 _discountTokenPercent, uint256 _preSaleClosingTime, uint256 _softCapLimit, ClinicAllRefundEscrow _vault, uint256 _buyLimitSupplyMin, uint256 _buyLimitSupplyMax, uint256 _kycLimitEliminator ) Crowdsale(_rate, _wallet, _token) TimedCrowdsale(_openingTime, _closingTime) public { privateSaleWallet = _privateSaleWallet; tokenSupplyLimit = _tokenLimitSupply; discountTokenAmount = _discountTokenAmount; discountTokenPercent = _discountTokenPercent; preSaleClosingTime = _preSaleClosingTime; softCapLimit = _softCapLimit; vault = _vault; buyLimitSupplyMin = _buyLimitSupplyMin; buyLimitSupplyMax = _buyLimitSupplyMax; kycLimitEliminator = _kycLimitEliminator; }",1,"subgraph cluster_4170_ClinicAllCrowdsale {
label=""ClinicAllCrowdsale"";
""4170_getRate"" [label=""getRate""];
""4170_getTokenAmount"" [label=""getTokenAmount""];
""4170_hasClosed"" [label=""hasClosed""];
""4170__preValidatePurchase"" [label=""_preValidatePurchase""];
""4170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""4170_transferToPrivateInvestor"" [label=""transferToPrivateInvestor""];
""4170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""4170_claimRefund"" [label=""claimRefund""];
""4170__getDiscountRate"" [label=""_getDiscountRate""];
""4170_manualRefund"" [label=""manualRefund""];
""4170_constructor"" [label=""constructor""];
""4170_goalReached"" [label=""goalReached""];
""4170_transferOff"" [label=""transferOff""];
""4170_allocatePrivateSaleFunds"" [label=""allocatePrivateSaleFunds""];
""4170_updateRate"" [label=""updateRate""];
""4170__getDiscountTokenAmount"" [label=""_getDiscountTokenAmount""];
""4170_redeemPrivateSaleFunds"" [label=""redeemPrivateSaleFunds""];
""4170_claimRefundChunk"" [label=""claimRefundChunk""];
""4170__getTokenAmount"" [label=""_getTokenAmount""];
""4170_updateKycLimitEliminator"" [label=""updateKycLimitEliminator""];
""4170__forwardFunds"" [label=""_forwardFunds""];
""4170_transferOn"" [label=""transferOn""];
""4170_supplyRest"" [label=""supplyRest""];
""4170_finalization"" [label=""finalization""];
""4170__processPurchase"" [label=""_processPurchase""];
""4170_isDiscount"" [label=""isDiscount""];
""4170_updateBuyLimitRange"" [label=""updateBuyLimitRange""];
""4170_transferTokensToReserve"" [label=""transferTokensToReserve""];
""4170_refundeesListLength"" [label=""refundeesListLength""];
""4170__getTokensWithDiscount"" [label=""_getTokensWithDiscount""];
""4170__getTokensWithDiscount"" -> ""4170__getDiscountRate"";
""4170__preValidatePurchase"" -> ""4170_isLimited"";
""4170_finalization"" -> ""4170_transferTokensToReserve"";
""4170_transferOn"" -> ""4170_onlyOwner"";
""4170_claimRefundChunk"" -> ""4170_onlyOwner"";
""4170_allocatePrivateSaleFunds"" -> ""4170__deliverTokens"";
""4170__forwardFunds"" -> ""4170__forwardFunds"";
""4170_transferTokensToReserve"" -> ""4170__deliverTokens"";
""4170_beneficiaryWithdrawAll"" -> ""4170_onlyOwner"";
""4170_claimRefund"" -> ""4170_goalReached"";
""4170_claimRefundChunk"" -> ""4170_goalReached"";
""4170__processPurchase"" -> ""4170_doesNotExceedLimit"";
""4170__preValidatePurchase"" -> ""4170_onlyIfWhitelisted"";
""4170_beneficiaryWithdrawChunk"" -> ""4170_onlyOwner"";
""4170__processPurchase"" -> ""4170__processPurchase"";
""4170_manualRefund"" -> ""4170_onlyOwner"";
""4170_updateRate"" -> ""4170_onlyManager"";
""4170__getTokenAmount"" -> ""4170_isDiscount"";
""4170_finalization"" -> ""4170_goalReached"";
""4170_refundeesListLength"" -> ""4170_onlyOwner"";
""4170_getTokenAmount"" -> ""4170__getTokenAmount"";
""4170__getDiscountTokenAmount"" -> ""4170__getDiscountRate"";
""4170_getRate"" -> ""4170__getDiscountRate"";
""4170_transferToPrivateInvestor"" -> ""4170_onlyPrivateSaleWallet"";
""4170_redeemPrivateSaleFunds"" -> ""4170_onlyPrivateSaleWallet"";
""4170__preValidatePurchase"" -> ""4170__getTokenAmount"";
""4170__getDiscountRate"" -> ""4170_isDiscount"";
""4170_constructor"" -> ""4170_constructor"";
""4170__getTokenAmount"" -> ""4170__getTokensWithDiscount"";
""4170_getRate"" -> ""4170_isDiscount"";
""4170__getTokensWithDiscount"" -> ""4170__getDiscountTokenAmount"";
""4170_finalization"" -> ""4170_finalization"";
""4170_transferOff"" -> ""4170_onlyOwner"";
""4170_updateKycLimitEliminator"" -> ""4170_onlyOwner"";
""4170__preValidatePurchase"" -> ""4170__preValidatePurchase"";
""4170_updateBuyLimitRange"" -> ""4170_onlyOwner"";
""4170_transferToPrivateInvestor"" -> ""4170_onlyIfWhitelisted"";
""4170_allocatePrivateSaleFunds"" -> ""4170_onlyOwner"";
}
"
0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a.sol,BitSTDView,"contract BitSTDView { BitSTDLogic private logic; address public owner; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); function balanceOf(address add)constant public returns (uint256) { return logic.balanceOf(add); }",1,"subgraph cluster_1510_BitSTDView {
label=""BitSTDView"";
""1510_frozenAccount"" [label=""frozenAccount""];
""1510_decimals"" [label=""decimals""];
""1510_transferFrom"" [label=""transferFrom""];
""1510_buy"" [label=""buy""];
""1510_symbol"" [label=""symbol""];
""1510_mintToken"" [label=""mintToken""];
""1510_buyPrice"" [label=""buyPrice""];
""1510_freezeAccount"" [label=""freezeAccount""];
""1510_transferDataAuthority"" [label=""transferDataAuthority""];
""1510_transferAuthority"" [label=""transferAuthority""];
""1510_approve"" [label=""approve""];
""1510_sellPrice"" [label=""sellPrice""];
""1510_constructor"" [label=""constructor""];
""1510_burn"" [label=""burn""];
""1510_transferLogicAuthority"" [label=""transferLogicAuthority""];
""1510_totalSupply"" [label=""totalSupply""];
""1510_balanceOf"" [label=""balanceOf""];
""1510_migration"" [label=""migration""];
""1510_setBitSTD"" [label=""setBitSTD""];
""1510_transfer"" [label=""transfer""];
""1510_sell"" [label=""sell""];
""1510_allowance"" [label=""allowance""];
""1510_name"" [label=""name""];
""1510_burnFrom"" [label=""burnFrom""];
""1510_approveAndCall"" [label=""approveAndCall""];
""1510_mintToken"" -> ""1510_onlyOwner"";
""1510_transferAuthority"" -> ""1510_onlyOwner"";
""1510_transferLogicAuthority"" -> ""1510_onlyOwner"";
""1510_freezeAccount"" -> ""1510_onlyOwner"";
""1510_setBitSTD"" -> ""1510_onlyOwner"";
""1510_transferDataAuthority"" -> ""1510_onlyOwner"";
}
"
0x655f1cb6616d7f0550007498113e72d7d5c5d4bb.sol,MedalClaim,"contract MedalClaim is AccessControl, SafeMath { address public angelCardDataContract = 0x6D2E76213615925c5fc436565B5ee788Ee0E86DC; address public petCardDataContract = 0xB340686da996b8B3d486b4D27E38E38500A9E926; address public accessoryDataContract = 0x466c44812835f57b736ef9F63582b8a6693A14D0; address public leaderboardDataContract = 0x9A1C755305c6fbf361B4856c9b6b6Bbfe3aCE738; address public medalDataContract = 0x33A104dCBEd81961701900c06fD14587C908EAa3; event EventMedalSuccessful(address owner,uint64 Medal); struct Angel { uint64 angelId; uint8 angelCardSeriesId; address owner; uint16 battlePower; uint8 aura; uint16 experience; }",1,"subgraph cluster_2300_MedalClaim {
label=""MedalClaim"";
""2300_checkExistsOwnedPet"" [label=""checkExistsOwnedPet""];
""2300_claim1Ply"" [label=""claim1Ply""];
""2300_DataContacts"" [label=""DataContacts""];
""2300_claimPlatinum"" [label=""claimPlatinum""];
""2300_getAngelClaims"" [label=""getAngelClaims""];
""2300_getAddressClaims"" [label=""getAddressClaims""];
""2300_getPetCardSeries"" [label=""getPetCardSeries""];
""2300_claimSilver"" [label=""claimSilver""];
""2300_ClaimOrichalcum"" [label=""ClaimOrichalcum""];
""2300_claim2Ply"" [label=""claim2Ply""];
""2300_claimCardboard"" [label=""claimCardboard""];
""2300_claimStupidFluffyPink"" [label=""claimStupidFluffyPink""];
""2300_kill"" [label=""kill""];
""2300_claimGold"" [label=""claimGold""];
""2300_checkExistsOwnedAngel"" [label=""checkExistsOwnedAngel""];
""2300_getPetClaims"" [label=""getPetClaims""];
""2300_kill"" -> ""2300_onlyCREATOR"";
""2300_DataContacts"" -> ""2300_onlyCREATOR"";
""2300_claimStupidFluffyPink"" -> ""2300_getPetCardSeries"";
""2300_claimGold"" -> ""2300_getPetCardSeries"";
""2300_claimStupidFluffyPink"" -> ""2300_checkExistsOwnedPet"";
""2300_claimSilver"" -> ""2300_checkExistsOwnedAngel"";
""2300_claim2Ply"" -> ""2300_getPetCardSeries"";
""2300_claimPlatinum"" -> ""2300_checkExistsOwnedAngel"";
""2300_claimCardboard"" -> ""2300_checkExistsOwnedAngel"";
""2300_claim2Ply"" -> ""2300_checkExistsOwnedPet"";
""2300_claim1Ply"" -> ""2300_checkExistsOwnedAngel"";
""2300_claimGold"" -> ""2300_checkExistsOwnedPet"";
}
"
0xc710772a16fd040ed9c63de0679a57410981e3fc.sol,TokenVault,"contract TokenVault is Ownable { address owner; event TokenTransfer(address indexed to, address token, uint amount); function withdrawTokenTo(address token, address to) public onlyOwner returns (bool) { uint amount = balanceOfToken(token); if (amount > 0) { TokenTransfer(to, token, amount); return Token(token).transfer(to, amount); }",1,"subgraph cluster_122_TokenVault {
label=""TokenVault"";
""122_balanceOfToken"" [label=""balanceOfToken""];
""122_withdrawTokenTo"" [label=""withdrawTokenTo""];
""122_withdrawTokenTo"" -> ""122_onlyOwner"";
""122_withdrawTokenTo"" -> ""122_balanceOfToken"";
}
"
0xeb36a7650ef32f0643d39cf5b7fcefd4319febb9.sol,Arbitration,contract Arbitration is Owned { address public operator; uint public quorum = 3; struct Dispute { address icoRoundAddress; address investorAddress; bool pending; uint timestamp; uint milestone; string reason; uint votesForProject; uint votesForInvestor; mapping(address => bool) voters; },1,"subgraph cluster_2992_Arbitration {
label=""Arbitration"";
""2992_openDispute"" [label=""openDispute""];
""2992_setArbiters"" [label=""setArbiters""];
""2992_constructor"" [label=""constructor""];
""2992_isPending"" [label=""isPending""];
""2992_executeVerdict"" [label=""executeVerdict""];
""2992_vote"" [label=""vote""];
""2992_vote"" -> ""2992_executeVerdict"";
""2992_setArbiters"" -> ""2992_only"";
}
"
0x359a46571d4bc22a6a9310038b51e2d91163412f.sol,TokenSale,"contract TokenSale is Pausable { using SafeMath for uint256; ServusTokenInterface public servusToken; uint256 public totalWeiRaised; uint256 public tokensMinted; uint256 public totalSupply; uint256 public contributors; uint256 public decimalsMultiplier; uint256 public startTime; uint256 public endTime; uint256 public remainingTokens; uint256 public allocatedTokens; bool public finalized; bool public servusTokensAllocated; address public servusMultiSig = 0x0cc3e09c8a52fa0313154321be706635cdbdec37; uint256 public constant BASE_PRICE_IN_WEI = 1000000000000000; uint256 public constant PUBLIC_TOKENS = 100000000 * (10 ** 6); uint256 public constant TOTAL_PRESALE_TOKENS = 50000000 * (10 ** 6); uint256 public constant TOKENS_ALLOCATED_TO_SERVUS = 100000000 * (10 ** 6); uint256 public tokenCap = PUBLIC_TOKENS - TOTAL_PRESALE_TOKENS; uint256 public cap = tokenCap; uint256 public weiCap = cap * BASE_PRICE_IN_WEI; uint256 public firstDiscountPrice = (BASE_PRICE_IN_WEI * 85) / 100; uint256 public secondDiscountPrice = (BASE_PRICE_IN_WEI * 90) / 100; uint256 public thirdDiscountPrice = (BASE_PRICE_IN_WEI * 95) / 100; uint256 public firstDiscountCap = (weiCap * 5) / 100; uint256 public secondDiscountCap = (weiCap * 10) / 100; uint256 public thirdDiscountCap = (weiCap * 20) / 100; bool public started = false; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event NewClonedToken(address indexed _cloneToken); event OnTransfer(address _from, address _to, uint _amount); event OnApprove(address _owner, address _spender, uint _amount); event LogInt(string _name, uint256 _value); event Finalized(); function TokenSale(address _tokenAddress, uint256 _startTime, uint256 _endTime) public { require(_tokenAddress != 0x0); require(_startTime > 0); require(_endTime > _startTime); startTime = _startTime; endTime = _endTime; servusToken = ServusTokenInterface(_tokenAddress); decimalsMultiplier = (10 ** 6); }",1,"subgraph cluster_2025_TokenSale {
label=""TokenSale"";
""2025_finalize"" [label=""finalize""];
""2025_getPriceInWei"" [label=""getPriceInWei""];
""2025_enableMasterTransfers"" [label=""enableMasterTransfers""];
""2025_buyTokens"" [label=""buyTokens""];
""2025_enableTransfers"" [label=""enableTransfers""];
""2025_lockTransfers"" [label=""lockTransfers""];
""2025_forwardFunds"" [label=""forwardFunds""];
""2025_isContract"" [label=""isContract""];
""2025_TokenSale"" [label=""TokenSale""];
""2025_changeController"" [label=""changeController""];
""2025_validPurchase"" [label=""validPurchase""];
""2025_balanceOf"" [label=""balanceOf""];
""2025_allocateServusTokens"" [label=""allocateServusTokens""];
""2025_totalSupply"" [label=""totalSupply""];
""2025_fallback"" [label=""fallback""];
""2025_lockMasterTransfers"" [label=""lockMasterTransfers""];
""2025_forceStart"" [label=""forceStart""];
""2025_buyTokens"" -> ""2025_validPurchase"";
""2025_forceStart"" -> ""2025_onlyOwner"";
""2025_buyTokens"" -> ""2025_forwardFunds"";
""2025_buyTokens"" -> ""2025_whenNotFinalized"";
""2025_lockMasterTransfers"" -> ""2025_onlyOwner"";
""2025_buyTokens"" -> ""2025_getPriceInWei"";
""2025_allocateServusTokens"" -> ""2025_whenNotFinalized"";
""2025_buyTokens"" -> ""2025_whenNotPaused"";
""2025_finalize"" -> ""2025_onlyOwner"";
""2025_changeController"" -> ""2025_isContract"";
""2025_enableMasterTransfers"" -> ""2025_onlyOwner"";
""2025_fallback"" -> ""2025_buyTokens"";
""2025_lockTransfers"" -> ""2025_onlyOwner"";
""2025_allocateServusTokens"" -> ""2025_onlyOwner"";
}
"
0x74f887f5b336704be1591f8a2f2e419767134316.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; using Address for address; mapping(address => uint256) internal _balances; mapping(address => mapping(address => uint256)) private _allowed; uint256 internal _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },1,"subgraph cluster_552_ERC20 {
label=""ERC20"";
""552__burn"" [label=""_burn""];
""552__transfer"" [label=""_transfer""];
""552_totalSupply"" [label=""totalSupply""];
""552_allowance"" [label=""allowance""];
""552_increaseAllowance"" [label=""increaseAllowance""];
""552_transfer"" [label=""transfer""];
""552_balanceOf"" [label=""balanceOf""];
""552_decreaseAllowance"" [label=""decreaseAllowance""];
""552__burnFrom"" [label=""_burnFrom""];
""552_burn"" [label=""burn""];
""552_approve"" [label=""approve""];
""552__approve"" [label=""_approve""];
""552_transferFrom"" [label=""transferFrom""];
""552_transferFrom"" -> ""552__approve"";
""552_transferFrom"" -> ""552__transfer"";
""552_approve"" -> ""552__approve"";
""552__burnFrom"" -> ""552__approve"";
""552_transfer"" -> ""552__transfer"";
""552_increaseAllowance"" -> ""552__approve"";
""552__burnFrom"" -> ""552__burn"";
""552_decreaseAllowance"" -> ""552__approve"";
""552_burn"" -> ""552__burn"";
}
"
0x33b7a018934c6e90fd63189d7c4517f0f776142f.sol,ChronoBankAssetProxy,"contract ChronoBankAssetProxy is ERC20 { uint constant OK = 1; ChronoBankPlatform public chronoBankPlatform; bytes32 public smbl; string public name; string public symbol; function init(ChronoBankPlatform _chronoBankPlatform, string _symbol, string _name) returns(bool) { if (address(chronoBankPlatform) != 0x0) { return false; }",1,"subgraph cluster_966_ChronoBankAssetProxy {
label=""ChronoBankAssetProxy"";
""966_balanceOf"" [label=""balanceOf""];
""966_emitTransfer"" [label=""emitTransfer""];
""966_getLatestVersion"" [label=""getLatestVersion""];
""966_commitUpgrade"" [label=""commitUpgrade""];
""966_optIn"" [label=""optIn""];
""966_allowance"" [label=""allowance""];
""966_init"" [label=""init""];
""966_transferWithReference"" [label=""transferWithReference""];
""966_emitApprove"" [label=""emitApprove""];
""966_totalSupply"" [label=""totalSupply""];
""966___transferWithReference"" [label=""__transferWithReference""];
""966_proposeUpgrade"" [label=""proposeUpgrade""];
""966__getAsset"" [label=""_getAsset""];
""966___approve"" [label=""__approve""];
""966_transferFrom"" [label=""transferFrom""];
""966_stringToBytes32"" [label=""stringToBytes32""];
""966___transferFromWithReference"" [label=""__transferFromWithReference""];
""966_fallback"" [label=""fallback""];
""966_getPendingVersionTimestamp"" [label=""getPendingVersionTimestamp""];
""966_getVersionFor"" [label=""getVersionFor""];
""966_getPendingVersion"" [label=""getPendingVersion""];
""966_approve"" [label=""approve""];
""966_optOut"" [label=""optOut""];
""966_decimals"" [label=""decimals""];
""966_purgeUpgrade"" [label=""purgeUpgrade""];
""966__transferWithReference"" [label=""_transferWithReference""];
""966_transfer"" [label=""transfer""];
""966___transferWithReference"" -> ""966_onlyAccess"";
""966_emitApprove"" -> ""966_onlyChronoBankPlatform"";
""966_transferFrom"" -> ""966__getAsset"";
""966_init"" -> ""966_stringToBytes32"";
""966__getAsset"" -> ""966_getVersionFor"";
""966_approve"" -> ""966__getAsset"";
""966_transfer"" -> ""966__transferWithReference"";
""966__transferWithReference"" -> ""966__getAsset"";
""966_emitTransfer"" -> ""966_onlyChronoBankPlatform"";
""966_proposeUpgrade"" -> ""966_onlyAssetOwner"";
""966___transferFromWithReference"" -> ""966_onlyAccess"";
""966_transferWithReference"" -> ""966__transferWithReference"";
""966_purgeUpgrade"" -> ""966_onlyAssetOwner"";
""966___approve"" -> ""966_onlyAccess"";
""966_fallback"" -> ""966__getAsset"";
}
"
0xb4a3fb248d39370c1f8081b73fa7098167c8142b.sol,DSValue,"contract DSValue is DSThing { bool has; bytes32 val; function peek() public view returns (bytes32, bool) { return (val,has); }",1,"subgraph cluster_1193_DSValue {
label=""DSValue"";
""1193_void"" [label=""void""];
""1193_poke"" [label=""poke""];
""1193_peek"" [label=""peek""];
""1193_read"" [label=""read""];
""1193_poke"" -> ""1193_note"";
""1193_read"" -> ""1193_peek"";
""1193_void"" -> ""1193_auth"";
""1193_void"" -> ""1193_note"";
""1193_poke"" -> ""1193_auth"";
}
"
0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol,SharkPool,"contract SharkPool is Ownable, ReentrancyGuard { string constant public pool_name = ; uint256 public pool_percentage = 5; uint256 constant public max_users = 100; uint256 public total_users = 0; uint256 public constant divisible_units = 10000000; uint256 public contract_period = 100; uint256 public mined_blocks = 1; uint256 public claimed_blocks = 1; uint256 public blockCreationRate = 0; BitcoineumInterface base_contract; struct user { uint256 start_block; uint256 end_block; uint256 proportional_contribution; }",1,"subgraph cluster_893_SharkPool {
label=""SharkPool"";
""893_current_external_block"" [label=""current_external_block""];
""893_SharkPool"" [label=""SharkPool""];
""893_find_contribution"" [label=""find_contribution""];
""893_mine"" [label=""mine""];
""893_checkMiningAttempt"" [label=""checkMiningAttempt""];
""893_checkWinning"" [label=""checkWinning""];
""893_allocate_slot"" [label=""allocate_slot""];
""893_fallback"" [label=""fallback""];
""893_available_slots"" [label=""available_slots""];
""893_get_bitcoineum_contract_address"" [label=""get_bitcoineum_contract_address""];
""893_external_to_internal_block_number"" [label=""external_to_internal_block_number""];
""893_do_redemption"" [label=""do_redemption""];
""893_redeem"" [label=""redeem""];
""893_set_pool_percentage"" [label=""set_pool_percentage""];
""893_balanceOf"" [label=""balanceOf""];
""893_distribute_reward"" [label=""distribute_reward""];
""893_calculate_minimum_contribution"" [label=""calculate_minimum_contribution""];
""893_claim"" [label=""claim""];
""893_SharkPool"" -> ""893_get_bitcoineum_contract_address"";
""893_redeem"" -> ""893_do_redemption"";
""893_set_pool_percentage"" -> ""893_nonReentrant"";
""893_redeem"" -> ""893_nonReentrant"";
""893_set_pool_percentage"" -> ""893_onlyOwner"";
""893_mine"" -> ""893_external_to_internal_block_number"";
""893_fallback"" -> ""893_do_redemption"";
""893_claim"" -> ""893_distribute_reward"";
""893_mine"" -> ""893_current_external_block"";
""893_fallback"" -> ""893_allocate_slot"";
""893_fallback"" -> ""893_calculate_minimum_contribution"";
""893_claim"" -> ""893_nonReentrant"";
""893_mine"" -> ""893_nonReentrant"";
}
"
0x1d1811189e2a8dd8d5f22cdc164273bf3d6fdd43.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },1,"subgraph cluster_523_BasicToken {
label=""BasicToken"";
""523_balanceOf"" [label=""balanceOf""];
""523_transfer"" [label=""transfer""];
""523_totalSupply"" [label=""totalSupply""];
""523_isContract"" [label=""isContract""];
""523_transferToContract"" [label=""transferToContract""];
""523_transfer"" -> ""523_balanceOf"";
""523_transferToContract"" -> ""523_isContract"";
""523_transfer"" -> ""523_isContract"";
""523_transferToContract"" -> ""523_balanceOf"";
}
"
0x2791528f5617e187a6d73c30034ac211b2f47042.sol,CardsRaffle,"contract CardsRaffle is AccessAdmin { using SafeMath for SafeMath; function CardsRaffle() public { setAdminContract(msg.sender,true); setActionContract(msg.sender,true); }",1,"subgraph cluster_957_CardsRaffle {
label=""CardsRaffle"";
""957_setCardsAddress"" [label=""setCardsAddress""];
""957_buyRaffleTicket"" [label=""buyRaffleTicket""];
""957_getLatestRaffleInfo"" [label=""getLatestRaffleInfo""];
""957_getRafflePlayers"" [label=""getRafflePlayers""];
""957_setRareAddress"" [label=""setRareAddress""];
""957_getRareAddress"" [label=""getRareAddress""];
""957_startRareRaffle"" [label=""startRareRaffle""];
""957_assignRafflePrize"" [label=""assignRafflePrize""];
""957_drawRandomWinner"" [label=""drawRandomWinner""];
""957_awardRafflePrize"" [label=""awardRafflePrize""];
""957_getPlayersTickets"" [label=""getPlayersTickets""];
""957_CardsRaffle"" [label=""CardsRaffle""];
""957_awardRafflePrize"" -> ""957_drawRandomWinner"";
""957_CardsRaffle"" -> ""957_setAdminContract"";
""957_setRareAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_assignRafflePrize"";
""957_startRareRaffle"" -> ""957_onlyAdmin"";
""957_startRareRaffle"" -> ""957_getRareAddress"";
""957_drawRandomWinner"" -> ""957_onlyAdmin"";
""957_CardsRaffle"" -> ""957_setActionContract"";
""957_setCardsAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_getRareAddress"";
}
"
0x4d7edd5f94515b0f35b38f6fb2ea975a20823465.sol,CryptoSprites,contract CryptoSprites is ERC721 { address public owner; address KittyCoreAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d; address SaleClockAuctionAddress = 0xb1690C08E213a35Ed9bAb7B318DE14420FB57d8C; address charityAddress = 0xb30cb3b3E03A508Db2A0a3e07BA1297b47bb0fb1; uint public etherForOwner; uint public etherForCharity; uint public ownerCut = 15; uint public charityCut = 15; uint public featurePrice = 10**16; uint public priceMultiplier = 1; uint public priceDivider = 10; modifier onlyOwner { require(msg.sender == owner); _; },1,"subgraph cluster_1456_CryptoSprites {
label=""CryptoSprites"";
""1456_lookupKittyDetails1"" [label=""lookupKittyDetails1""];
""1456_balanceOf"" [label=""balanceOf""];
""1456_listSpriteForSale"" [label=""listSpriteForSale""];
""1456_transfer"" [label=""transfer""];
""1456_transferFrom"" [label=""transferFrom""];
""1456_lookupKitty"" [label=""lookupKitty""];
""1456_lookupFeaturedSprites"" [label=""lookupFeaturedSprites""];
""1456_usersSpriteOwningHistory"" [label=""usersSpriteOwningHistory""];
""1456_fallback"" [label=""fallback""];
""1456_approve"" [label=""approve""];
""1456_lookupKittyDetails2"" [label=""lookupKittyDetails2""];
""1456_featuredSpritesLength"" [label=""featuredSpritesLength""];
""1456_calculatePrice"" [label=""calculatePrice""];
""1456_lookupSprite"" [label=""lookupSprite""];
""1456_removeSpriteFromSale"" [label=""removeSpriteFromSale""];
""1456_lookupAllSprites"" [label=""lookupAllSprites""];
""1456_supportsInterface"" [label=""supportsInterface""];
""1456_totalSupply"" [label=""totalSupply""];
""1456_adjustCut"" [label=""adjustCut""];
""1456_withdraw"" [label=""withdraw""];
""1456_ownerOf"" [label=""ownerOf""];
""1456_allowance"" [label=""allowance""];
""1456_adjustDefaultSpritePrice"" [label=""adjustDefaultSpritePrice""];
""1456_adjustFeaturePrice"" [label=""adjustFeaturePrice""];
""1456_name"" [label=""name""];
""1456_CryptoSprites"" [label=""CryptoSprites""];
""1456_symbol"" [label=""symbol""];
""1456_featureSprite"" [label=""featureSprite""];
""1456_buySprite"" [label=""buySprite""];
""1456_adjustDefaultSpritePrice"" -> ""1456_onlyOwner"";
""1456_withdraw"" -> ""1456_onlyOwner"";
""1456_adjustCut"" -> ""1456_onlyOwner"";
""1456_adjustFeaturePrice"" -> ""1456_onlyOwner"";
}
"
0xb4a3fb248d39370c1f8081b73fa7098167c8142b.sol,DSToken,"contract DSToken is DSTokenBase(0), DSStop { bytes32 public symbol; uint256 public decimals = 18; function DSToken(bytes32 symbol_) public { symbol = symbol_; }",1,"subgraph cluster_1098_DSToken {
label=""DSToken"";
""1098_burn"" [label=""burn""];
""1098_transferFrom"" [label=""transferFrom""];
""1098_mint"" [label=""mint""];
""1098_approve"" [label=""approve""];
""1098_move"" [label=""move""];
""1098_DSToken"" [label=""DSToken""];
""1098_push"" [label=""push""];
""1098_setName"" [label=""setName""];
""1098_pull"" [label=""pull""];
""1098_approve"" -> ""1098_approve"";
""1098_burn"" -> ""1098_auth"";
""1098_pull"" -> ""1098_transferFrom"";
""1098_move"" -> ""1098_transferFrom"";
""1098_mint"" -> ""1098_mint"";
""1098_push"" -> ""1098_transferFrom"";
""1098_burn"" -> ""1098_sub"";
""1098_setName"" -> ""1098_auth"";
""1098_burn"" -> ""1098_burn"";
""1098_mint"" -> ""1098_add"";
""1098_transferFrom"" -> ""1098_sub"";
""1098_transferFrom"" -> ""1098_stoppable"";
""1098_mint"" -> ""1098_auth"";
""1098_burn"" -> ""1098_stoppable"";
""1098_transferFrom"" -> ""1098_add"";
""1098_mint"" -> ""1098_stoppable"";
""1098_approve"" -> ""1098_stoppable"";
}
"
0x1a661224edc279a3844ecd8bd0cd715daafb9cf7.sol,lockEtherPay,"contract lockEtherPay is Ownable { using SafeMath for uint256; token token_reward; address public beneficiary; bool public isLocked = false; bool public isReleased = false; uint256 public start_time; uint256 public end_time; uint256 public fifty_two_weeks = 27820800; event TokenReleased(address beneficiary, uint256 token_amount); constructor() public{ token_reward = token(0xAa1ae5e57dc05981D83eC7FcA0b3c7ee2565B7D6); beneficiary = 0x7eB71add7482F3462BAA46328f58a235E33dbD0e; }",1,"subgraph cluster_309_lockEtherPay {
label=""lockEtherPay"";
""309_lockOver"" [label=""lockOver""];
""309_release"" [label=""release""];
""309_constructor"" [label=""constructor""];
""309_tokenBalance"" [label=""tokenBalance""];
""309_lock"" [label=""lock""];
""309_release"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_tokenBalance"";
""309_lock"" -> ""309_onlyOwner"";
""309_release"" -> ""309_lockOver"";
""309_release"" -> ""309_tokenBalance"";
}
"
0xd1569ffd7ca4393311f66110e6f87184c4817113.sol,LudumAirdrop,"contract LudumAirdrop is Ownable { Token token; event TransferredToken(address indexed to, uint256 value); event FailedTransfer(address indexed to, uint256 value); modifier whenDropIsActive() { assert(isActive()); _; }",1,"subgraph cluster_281_LudumAirdrop {
label=""LudumAirdrop"";
""281_sendInternally"" [label=""sendInternally""];
""281_sendLudumToSingle"" [label=""sendLudumToSingle""];
""281_isActive"" [label=""isActive""];
""281_LudumAirdrop"" [label=""LudumAirdrop""];
""281_tokensAvailable"" [label=""tokensAvailable""];
""281_sendLudumToMany"" [label=""sendLudumToMany""];
""281_sendRemainsToOwner"" [label=""sendRemainsToOwner""];
""281_sendLudumToMany"" -> ""281_onlyOwner"";
""281_sendLudumToSingle"" -> ""281_onlyOwner"";
""281_sendInternally"" -> ""281_tokensAvailable"";
""281_sendRemainsToOwner"" -> ""281_onlyOwner"";
""281_sendLudumToMany"" -> ""281_whenDropIsActive"";
""281_sendRemainsToOwner"" -> ""281_tokensAvailable"";
""281_sendLudumToMany"" -> ""281_sendInternally"";
""281_sendLudumToSingle"" -> ""281_whenDropIsActive"";
""281_isActive"" -> ""281_tokensAvailable"";
""281_sendLudumToSingle"" -> ""281_sendInternally"";
}
"
0xb4a3fb248d39370c1f8081b73fa7098167c8142b.sol,DSStop,"contract DSStop is DSNote, DSAuth { bool public stopped; modifier stoppable { require(!stopped); _; }",1,"subgraph cluster_509_DSStop {
label=""DSStop"";
""509_stop"" [label=""stop""];
""509_start"" [label=""start""];
""509_start"" -> ""509_auth"";
""509_start"" -> ""509_note"";
""509_stop"" -> ""509_auth"";
""509_stop"" -> ""509_note"";
}
"
0x5c89736e9454200141b80c37eb28eaceca2ce8cb.sol,CherryToken,"contract CherryToken is ERC223, ERCAddressFrozenFund { using SafeMath for uint; string internal _name; string internal _symbol; uint8 internal _decimals; uint256 internal _totalSupply; address public fundsWallet; uint256 internal fundsWalletChanged; mapping (address => uint256) internal balances; mapping (address => mapping (address => uint256)) internal allowed; constructor() public { _symbol = ; _name = ; _decimals = 8; _totalSupply = 10000000000000000; balances[msg.sender] = _totalSupply; fundsWallet = msg.sender; owner = msg.sender; fundsWalletChanged = 0; }",1,"subgraph cluster_1340_CherryToken {
label=""CherryToken"";
""1340_transferFrom"" [label=""transferFrom""];
""1340_totalSupply"" [label=""totalSupply""];
""1340_decreaseApproval"" [label=""decreaseApproval""];
""1340_changeFundsWallet"" [label=""changeFundsWallet""];
""1340_fallback"" [label=""fallback""];
""1340_mintToken"" [label=""mintToken""];
""1340_burnToken"" [label=""burnToken""];
""1340_name"" [label=""name""];
""1340_approve"" [label=""approve""];
""1340_decimals"" [label=""decimals""];
""1340_allowance"" [label=""allowance""];
""1340_increaseApproval"" [label=""increaseApproval""];
""1340_isContract"" [label=""isContract""];
""1340_transferdata"" [label=""transferdata""];
""1340_transferMultiple"" [label=""transferMultiple""];
""1340_transfer"" [label=""transfer""];
""1340_symbol"" [label=""symbol""];
""1340_balanceOf"" [label=""balanceOf""];
""1340_constructor"" [label=""constructor""];
""1340_transfer"" -> ""1340_isContract"";
""1340_transferFrom"" -> ""1340_isContract"";
""1340_transferdata"" -> ""1340_isContract"";
""1340_transferMultiple"" -> ""1340_isContract"";
}
"
0xec841c878435ba4f28bf305a00c1483db0d96a20.sol,Events,contract Events { DBInterface public database; constructor(address _database) public{ database = DBInterface(_database); },1,"subgraph cluster_1000_Events {
label=""Events"";
""1000_escrow"" [label=""escrow""];
""1000_contractChange"" [label=""contractChange""];
""1000_consensus"" [label=""consensus""];
""1000_registration"" [label=""registration""];
""1000_operator"" [label=""operator""];
""1000_transaction"" [label=""transaction""];
""1000_asset"" [label=""asset""];
""1000_order"" [label=""order""];
""1000_message"" [label=""message""];
""1000_constructor"" [label=""constructor""];
""1000_exchange"" [label=""exchange""];
""1000_message"" -> ""1000_onlyApprovedContract"";
""1000_escrow"" -> ""1000_onlyApprovedContract"";
""1000_contractChange"" -> ""1000_onlyApprovedContract"";
""1000_exchange"" -> ""1000_onlyApprovedContract"";
""1000_registration"" -> ""1000_onlyApprovedContract"";
""1000_consensus"" -> ""1000_onlyApprovedContract"";
""1000_order"" -> ""1000_onlyApprovedContract"";
""1000_transaction"" -> ""1000_onlyApprovedContract"";
""1000_asset"" -> ""1000_onlyApprovedContract"";
""1000_operator"" -> ""1000_onlyApprovedContract"";
}
"
0x17a03553719001e05dc19a20f5e82ee76923a985.sol,Auction,"contract Auction is Pausable, AuctionBase { function withdrawBalance() external { address nftAddress = address(nonFungibleContract); require( msg.sender == owner || msg.sender == nftAddress ); nftAddress.transfer(address(this).balance); }",1,"subgraph cluster_641_AuctionBase {
label=""AuctionBase"";
""641__isOnAuction"" [label=""_isOnAuction""];
""641__currentPrice"" [label=""_currentPrice""];
""641__transfer"" [label=""_transfer""];
""641__addAuction"" [label=""_addAuction""];
""641__computeCut"" [label=""_computeCut""];
""641__escrow"" [label=""_escrow""];
""641_fallback"" [label=""fallback""];
""641__cancelAuction"" [label=""_cancelAuction""];
""641__owns"" [label=""_owns""];
""641__bid"" [label=""_bid""];
""641__removeAuction"" [label=""_removeAuction""];
""641__bid"" -> ""641__computeCut"";
""641__bid"" -> ""641__isOnAuction"";
""641__cancelAuction"" -> ""641__removeAuction"";
""641__bid"" -> ""641__currentPrice"";
""641__cancelAuction"" -> ""641__transfer"";
""641__bid"" -> ""641__removeAuction"";
}
"
0x4b958074cee6546e29cdb3c43494e7425b85f59c.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; ERC20 public token; address public wallet; uint256 public rate; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public { require(_rate > 0); require(_wallet != address(0)); require(_token != address(0)); rate = _rate; wallet = _wallet; token = _token; }",1,"subgraph cluster_1189_TimedCrowdsale {
label=""TimedCrowdsale"";
""1189_hasClosed"" [label=""hasClosed""];
""1189_TimedCrowdsale"" [label=""TimedCrowdsale""];
""1189__preValidatePurchase"" [label=""_preValidatePurchase""];
""1189__preValidatePurchase"" -> ""1189_onlyWhileOpen"";
""1189__preValidatePurchase"" -> ""1189__preValidatePurchase"";
}
"
0xb4a3fb248d39370c1f8081b73fa7098167c8142b.sol,DSToken,"contract DSToken is DSTokenBase(0), DSStop { bytes32 public symbol; uint256 public decimals = 18; function DSToken(bytes32 symbol_) public { symbol = symbol_; }",1,"subgraph cluster_1098_DSToken {
label=""DSToken"";
""1098_burn"" [label=""burn""];
""1098_transferFrom"" [label=""transferFrom""];
""1098_mint"" [label=""mint""];
""1098_approve"" [label=""approve""];
""1098_move"" [label=""move""];
""1098_DSToken"" [label=""DSToken""];
""1098_push"" [label=""push""];
""1098_setName"" [label=""setName""];
""1098_pull"" [label=""pull""];
""1098_approve"" -> ""1098_approve"";
""1098_burn"" -> ""1098_auth"";
""1098_pull"" -> ""1098_transferFrom"";
""1098_move"" -> ""1098_transferFrom"";
""1098_mint"" -> ""1098_mint"";
""1098_push"" -> ""1098_transferFrom"";
""1098_burn"" -> ""1098_sub"";
""1098_setName"" -> ""1098_auth"";
""1098_burn"" -> ""1098_burn"";
""1098_mint"" -> ""1098_add"";
""1098_transferFrom"" -> ""1098_sub"";
""1098_transferFrom"" -> ""1098_stoppable"";
""1098_mint"" -> ""1098_auth"";
""1098_burn"" -> ""1098_stoppable"";
""1098_transferFrom"" -> ""1098_add"";
""1098_mint"" -> ""1098_stoppable"";
""1098_approve"" -> ""1098_stoppable"";
}
"
0x78a06472d78bfef33270654319b6373d51cf0575.sol,EasyMineTokenWallet,contract EasyMineTokenWallet { uint256 constant public VESTING_PERIOD = 180 days; uint256 constant public DAILY_FUNDS_RELEASE = 15000 * 10**18; address public owner; address public withdrawalAddress; Token public easyMineToken; uint256 public startTime; uint256 public totalWithdrawn; modifier isOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_609_EasyMineTokenWallet {
label=""EasyMineTokenWallet"";
""609_EasyMineTokenWallet"" [label=""EasyMineTokenWallet""];
""609_maxPossibleWithdrawal"" [label=""maxPossibleWithdrawal""];
""609_setup"" [label=""setup""];
""609_withdraw"" [label=""withdraw""];
""609_withdraw"" -> ""609_maxPossibleWithdrawal"";
""609_withdraw"" -> ""609_isOwner"";
""609_setup"" -> ""609_isOwner"";
}
"
0x18f0cd26c06449d967ca6aef8b5f9d8ee9fd7992.sol,Exch,"contract Exch is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; mapping (address => bool) public whiteListERC20; mapping (address => bool) public whiteListERC223; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); modifier onlyAdmin() { require(msg.sender==admin); _; }",1,"subgraph cluster_1411_Exch {
label=""Exch"";
""1411_withdrawToken"" [label=""withdrawToken""];
""1411_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1411_setBlackListERC223"" [label=""setBlackListERC223""];
""1411_constructor"" [label=""constructor""];
""1411_amountFilled"" [label=""amountFilled""];
""1411_setWhiteListERC20"" [label=""setWhiteListERC20""];
""1411_changeFeeTake"" [label=""changeFeeTake""];
""1411_availableVolume"" [label=""availableVolume""];
""1411_trade"" [label=""trade""];
""1411_changeFeeMake"" [label=""changeFeeMake""];
""1411_depositToken"" [label=""depositToken""];
""1411_changeFeeRebate"" [label=""changeFeeRebate""];
""1411_tradeBalances"" [label=""tradeBalances""];
""1411_changeAdmin"" [label=""changeAdmin""];
""1411_withdraw"" [label=""withdraw""];
""1411_fallback"" [label=""fallback""];
""1411_balanceOf"" [label=""balanceOf""];
""1411_deposit"" [label=""deposit""];
""1411_cancelOrder"" [label=""cancelOrder""];
""1411_tokenFallback"" [label=""tokenFallback""];
""1411_setBlackListERC20"" [label=""setBlackListERC20""];
""1411_setWhiteListERC223"" [label=""setWhiteListERC223""];
""1411_changeFeeAccount"" [label=""changeFeeAccount""];
""1411_testTrade"" [label=""testTrade""];
""1411_order"" [label=""order""];
""1411_setWhiteListERC20"" -> ""1411_onlyAdmin"";
""1411_tokenFallback"" -> ""1411_safeAdd"";
""1411_depositToken"" -> ""1411_safeAdd"";
""1411_withdrawToken"" -> ""1411_safeSub"";
""1411_availableVolume"" -> ""1411_safeMul"";
""1411_availableVolume"" -> ""1411_safeSub"";
""1411_deposit"" -> ""1411_safeAdd"";
""1411_withdraw"" -> ""1411_safeSub"";
""1411_setBlackListERC20"" -> ""1411_onlyAdmin"";
""1411_setBlackListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeAccount"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_tradeBalances"";
""1411_changeFeeTake"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeSub"";
""1411_changeFeeRebate"" -> ""1411_onlyAdmin"";
""1411_testTrade"" -> ""1411_availableVolume"";
""1411_changeAccountLevelsAddr"" -> ""1411_onlyAdmin"";
""1411_changeAdmin"" -> ""1411_onlyAdmin"";
""1411_tradeBalances"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeMul"";
""1411_setWhiteListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeMake"" -> ""1411_onlyAdmin"";
}
"
0x750c1d91864171d7e1715a6b53ee28c72b8faa09.sol,EthicHubUser,"contract EthicHubUser is Ownable, EthicHubBase { event UserStatusChanged(address target, string profile, bool isRegistered); constructor(address _storageAddress) EthicHubBase(_storageAddress) public { version = 3; }",1,"subgraph cluster_660_EthicHubUser {
label=""EthicHubUser"";
""660_deleteUserStatus"" [label=""deleteUserStatus""];
""660_registerPaymentGateway"" [label=""registerPaymentGateway""];
""660_registerLocalNode"" [label=""registerLocalNode""];
""660_unregisterLocalNode"" [label=""unregisterLocalNode""];
""660_registerRepresentative"" [label=""registerRepresentative""];
""660_constructor"" [label=""constructor""];
""660_unregisterPaymentGateway"" [label=""unregisterPaymentGateway""];
""660_changeUserStatus"" [label=""changeUserStatus""];
""660_unregisterCommunity"" [label=""unregisterCommunity""];
""660_unregisterRepresentative"" [label=""unregisterRepresentative""];
""660_unregisterInvestor"" [label=""unregisterInvestor""];
""660_registerInvestor"" [label=""registerInvestor""];
""660_viewRegistrationStatus"" [label=""viewRegistrationStatus""];
""660_registerCommunity"" [label=""registerCommunity""];
""660_unregisterCommunity"" -> ""660_onlyOwner"";
""660_registerLocalNode"" -> ""660_changeUserStatus"";
""660_constructor"" -> ""660_constructor"";
""660_registerInvestor"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_deleteUserStatus"";
""660_unregisterLocalNode"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_onlyOwner"";
""660_unregisterRepresentative"" -> ""660_onlyOwner"";
""660_registerCommunity"" -> ""660_changeUserStatus"";
""660_registerLocalNode"" -> ""660_onlyOwner"";
""660_unregisterLocalNode"" -> ""660_deleteUserStatus"";
""660_registerCommunity"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_onlyOwner"";
""660_registerRepresentative"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_deleteUserStatus"";
""660_unregisterCommunity"" -> ""660_deleteUserStatus"";
""660_unregisterRepresentative"" -> ""660_deleteUserStatus"";
""660_deleteUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_changeUserStatus"";
""660_registerRepresentative"" -> ""660_changeUserStatus"";
""660_changeUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_onlyOwner"";
""660_registerInvestor"" -> ""660_changeUserStatus"";
}
"
0xef86db910c71ffa3c80233bc9108dc51ad1e008a.sol,CommonWallet,"contract CommonWallet { mapping(address => mapping (address => uint256)) public tokenBalance; mapping(address => uint) etherBalance; address owner = msg.sender; function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) { uint256 z = _x + _y; assert(z >= _x); return z; }",1,"subgraph cluster_387_CommonWallet {
label=""CommonWallet"";
""387_sendTokenTo"" [label=""sendTokenTo""];
""387_wdEther"" [label=""wdEther""];
""387_safeAdd"" [label=""safeAdd""];
""387_wdToken"" [label=""wdToken""];
""387_sendEtherTo"" [label=""sendEtherTo""];
""387_depoEther"" [label=""depoEther""];
""387_getEtherBalance"" [label=""getEtherBalance""];
""387_safeSub"" [label=""safeSub""];
""387_depoToken"" [label=""depoToken""];
""387_getTokenBalance"" [label=""getTokenBalance""];
""387_sendEtherTo"" -> ""387_safeSub"";
""387_wdEther"" -> ""387_safeSub"";
""387_wdToken"" -> ""387_safeSub"";
""387_depoToken"" -> ""387_safeAdd"";
""387_sendTokenTo"" -> ""387_safeSub"";
}
"
0x70cdbd16575651e3b78fa869a51eb8e991e079bb.sol,PRVTSToken,contract PRVTSToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 555000000 * (10**2); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function PRVTSToken () { owner = msg.sender; },1,"subgraph cluster_756_PRVTSToken {
label=""PRVTSToken"";
""756_transferFrom"" [label=""transferFrom""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_PRVTSToken"" [label=""PRVTSToken""];
""756_transfer"" [label=""transfer""];
""756_refundTokens"" [label=""refundTokens""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_createTokens"" [label=""createTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_setOwner"" [label=""setOwner""];
""756_totalSupply"" [label=""totalSupply""];
""756_approve"" [label=""approve""];
""756_approve"" -> ""756_approve"";
""756_approve"" -> ""756_allowance"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_createTokens"" -> ""756_safeAdd"";
""756_createTokens"" -> ""756_safeSub"";
""756_transfer"" -> ""756_transfer"";
}
"
0xc849a5fff9befa297d1c3a772bafac9f3c9004ec.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1018_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1018_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1018_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1018_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1018_constructor"" [label=""constructor""];
""1018_tokenFallback"" [label=""tokenFallback""];
""1018_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1018_depositToken"" [label=""depositToken""];
""1018_depositEther"" [label=""depositEther""];
""1018_approveToPullOutTokens"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmounts"" -> ""1018_onlyOwner"";
""1018_distributeWithTransferFrom"" -> ""1018_onlyOwner"";
""1018_tokenFallback"" -> ""1018_whenNotPaused"";
""1018_depositEther"" -> ""1018_whenNotPaused"";
""1018_depositToken"" -> ""1018_whenNotPaused"";
""1018_distributeTokenToAddress"" -> ""1018_onlyOwner"";
}
"
0x0002325fcaaac6ebf1254a626589147bde1a2394.sol,HorseyPilot,"contract HorseyPilot { using SafeMath for uint256; event NewProposal(uint8 methodId, uint parameter, address proposer); event ProposalPassed(uint8 methodId, uint parameter, address proposer); uint8 constant votingThreshold = 2; uint256 constant proposalLife = 7 days; uint256 constant proposalCooldown = 1 days; uint256 cooldownStart; address public jokerAddress; address public knightAddress; address public paladinAddress; address[3] public voters; uint8 constant public knightEquity = 40; uint8 constant public paladinEquity = 10; address public exchangeAddress; address public tokenAddress; mapping(address => uint) internal _cBalance; struct Proposal{ address proposer; uint256 timestamp; uint256 parameter; uint8 methodId; address[] yay; address[] nay; }",1,"subgraph cluster_3096_HorseyPilot {
label=""HorseyPilot"";
""3096_transferKnightOwnership"" [label=""transferKnightOwnership""];
""3096__updateDistribution"" [label=""_updateDistribution""];
""3096_voteOnProposal"" [label=""voteOnProposal""];
""3096_constructor"" [label=""constructor""];
""3096_withdrawCeo"" [label=""withdrawCeo""];
""3096_transferJokerOwnership"" [label=""transferJokerOwnership""];
""3096_transferPaladinOwnership"" [label=""transferPaladinOwnership""];
""3096_deployChildren"" [label=""deployChildren""];
""3096_syncFunds"" [label=""syncFunds""];
""3096_getNobleBalance"" [label=""getNobleBalance""];
""3096_makeProposal"" [label=""makeProposal""];
""3096__moveBalance"" [label=""_moveBalance""];
""3096__doProposal"" [label=""_doProposal""];
""3096_transferKnightOwnership"" -> ""3096_validAddress"";
""3096_makeProposal"" -> ""3096_proposalAvailable"";
""3096_makeProposal"" -> ""3096_cooledDown"";
""3096_transferPaladinOwnership"" -> ""3096_validAddress"";
""3096_voteOnProposal"" -> ""3096__doProposal"";
""3096_transferJokerOwnership"" -> ""3096_validAddress"";
""3096_withdrawCeo"" -> ""3096_onlyCLevelAccess"";
""3096_getNobleBalance"" -> ""3096_onlyCLevelAccess"";
""3096_voteOnProposal"" -> ""3096_onlyVoters"";
""3096_voteOnProposal"" -> ""3096_notVoted"";
""3096_makeProposal"" -> ""3096_onlyCLevelAccess"";
""3096_withdrawCeo"" -> ""3096_validAddress"";
""3096_transferPaladinOwnership"" -> ""3096__moveBalance"";
""3096_withdrawCeo"" -> ""3096__updateDistribution"";
""3096__moveBalance"" -> ""3096_validAddress"";
""3096_transferJokerOwnership"" -> ""3096__moveBalance"";
""3096_transferKnightOwnership"" -> ""3096__moveBalance"";
""3096_voteOnProposal"" -> ""3096_proposalPending"";
}
"
0x00676065a7854163c6a4d5f474496514d03e31c4.sol,CrystalDeposit,contract CrystalDeposit { using SafeMath for uint256; address public administrator; uint256 public HALF_TIME = 48 hours; uint256 public MIN_TIME_WITH_DEADLINE = 12 hours; uint256 public round = 0; CryptoEngineerInterface public Engineer; CryptoMiningWarInterface public MiningWar; address miningWarAddress; uint256 miningWarDeadline; uint256 constant private CRTSTAL_MINING_PERIOD = 86400; mapping(uint256 => Game) public games; mapping(address => Player) public players; mapping(address => bool) public miniGames; struct Game { uint256 round; uint256 crystals; uint256 prizePool; uint256 startTime; uint256 endTime; bool ended; },1,"subgraph cluster_1066_CrystalDeposit {
label=""CrystalDeposit"";
""1066_endRound"" [label=""endRound""];
""1066_upgrade"" [label=""upgrade""];
""1066_startRound"" [label=""startRound""];
""1066_getData"" [label=""getData""];
""1066_setupMiniGame"" [label=""setupMiniGame""];
""1066_calculateReward"" [label=""calculateReward""];
""1066_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1066_getPlayerData"" [label=""getPlayerData""];
""1066_setEngineerInterface"" [label=""setEngineerInterface""];
""1066_constructor"" [label=""constructor""];
""1066_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1066_startGame"" [label=""startGame""];
""1066_getCurrentGame"" [label=""getCurrentGame""];
""1066_updateReward"" [label=""updateReward""];
""1066_isDepositContract"" [label=""isDepositContract""];
""1066_share"" [label=""share""];
""1066_fallback"" [label=""fallback""];
""1066_getEngineerPrizePool"" [label=""getEngineerPrizePool""];
""1066_setContractsMiniGame"" [label=""setContractsMiniGame""];
""1066_withdrawReward"" [label=""withdrawReward""];
""1066_isContractMiniGame"" [label=""isContractMiniGame""];
""1066_getCurrentReward"" [label=""getCurrentReward""];
""1066_setContractsMiniGame"" -> ""1066_isAdministrator"";
""1066_withdrawReward"" -> ""1066_endRound"";
""1066_endRound"" -> ""1066_startRound"";
""1066_startGame"" -> ""1066_startRound"";
""1066_getData"" -> ""1066_getCurrentGame"";
""1066_withdrawReward"" -> ""1066_updateReward"";
""1066_upgrade"" -> ""1066_isAdministrator"";
""1066_setMiningWarInterface"" -> ""1066_isAdministrator"";
""1066_updateReward"" -> ""1066_calculateReward"";
""1066_share"" -> ""1066_updateReward"";
""1066_startRound"" -> ""1066_getEngineerPrizePool"";
""1066_setEngineerInterface"" -> ""1066_isAdministrator"";
""1066_getCurrentReward"" -> ""1066_calculateReward"";
""1066_share"" -> ""1066_endRound"";
""1066_share"" -> ""1066_disableContract"";
""1066_getData"" -> ""1066_getPlayerData"";
""1066_startGame"" -> ""1066_isAdministrator"";
""1066_constructor"" -> ""1066_setMiningWarInterface"";
""1066_getPlayerData"" -> ""1066_calculateReward"";
""1066_constructor"" -> ""1066_setEngineerInterface"";
""1066_removeContractMiniGame"" -> ""1066_isAdministrator"";
}
"
0x74ceda99c44da280f2fd8ea8b5dd43f8b66912a8.sol,DisbursementHandler,contract DisbursementHandler is Ownable { struct Disbursement { uint256 timestamp; uint256 tokens; },1,"subgraph cluster_962_DisbursementHandler {
label=""DisbursementHandler"";
""962_changeTimestamp"" [label=""changeTimestamp""];
""962_DisbursementHandler"" [label=""DisbursementHandler""];
""962_withdraw"" [label=""withdraw""];
""962_setupDisbursement"" [label=""setupDisbursement""];
""962_calcMaxWithdraw"" [label=""calcMaxWithdraw""];
""962_changeTimestamp"" -> ""962_onlyOwner"";
""962_setupDisbursement"" -> ""962_onlyOwner"";
""962_withdraw"" -> ""962_calcMaxWithdraw"";
}
"
0xec841c878435ba4f28bf305a00c1483db0d96a20.sol,Events,contract Events { DBInterface public database; constructor(address _database) public{ database = DBInterface(_database); },1,"subgraph cluster_1000_Events {
label=""Events"";
""1000_escrow"" [label=""escrow""];
""1000_contractChange"" [label=""contractChange""];
""1000_consensus"" [label=""consensus""];
""1000_registration"" [label=""registration""];
""1000_operator"" [label=""operator""];
""1000_transaction"" [label=""transaction""];
""1000_asset"" [label=""asset""];
""1000_order"" [label=""order""];
""1000_message"" [label=""message""];
""1000_constructor"" [label=""constructor""];
""1000_exchange"" [label=""exchange""];
""1000_message"" -> ""1000_onlyApprovedContract"";
""1000_escrow"" -> ""1000_onlyApprovedContract"";
""1000_contractChange"" -> ""1000_onlyApprovedContract"";
""1000_exchange"" -> ""1000_onlyApprovedContract"";
""1000_registration"" -> ""1000_onlyApprovedContract"";
""1000_consensus"" -> ""1000_onlyApprovedContract"";
""1000_order"" -> ""1000_onlyApprovedContract"";
""1000_transaction"" -> ""1000_onlyApprovedContract"";
""1000_asset"" -> ""1000_onlyApprovedContract"";
""1000_operator"" -> ""1000_onlyApprovedContract"";
}
"
0x27e1d539cb59518bf14e4525b1c3b4721aaa9080.sol,FourCrowdsale,"contract FourCrowdsale is TokenCappedCrowdsale, WhitelistCrowdsale, FinalizableCrowdsale { event RateChanged(uint256 newRate, string name); uint256 private constant E18 = 10**18; uint256 private TOKEN_SALE_CAP = 152000000 * E18; uint256 public constant TEAM_TOKENS = 50000000 * E18; address public constant TEAM_ADDRESS = 0x3EC2fC20c04656F4B0AA7372258A36FAfB1EF427; uint256 public constant ADVISORS_AND_CONTRIBUTORS_TOKENS = 39000000 * E18; address public constant ADVISORS_AND_CONTRIBUTORS_ADDRESS = 0x90adab6891514DC24411B9Adf2e11C0eD7739999; address public constant UNSOLD_ADDRESS = 0x4eC155995211C8639375Ae3106187bff3FF5DB46; uint256 public bonus; function FourCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _bonus, address _wallet, address _token) TokenCappedCrowdsale(TOKEN_SALE_CAP) Crowdsale(_startTime, _endTime, _rate, _wallet, _token) public { bonus = _bonus; }",1,"subgraph cluster_2547_FourCrowdsale {
label=""FourCrowdsale"";
""2547_finalization"" [label=""finalization""];
""2547_processPresaleOrEarlyContributors"" [label=""processPresaleOrEarlyContributors""];
""2547_FourCrowdsale"" [label=""FourCrowdsale""];
""2547_changeStartAndEndTime"" [label=""changeStartAndEndTime""];
""2547_setRate"" [label=""setRate""];
""2547_releaseTokenOwnership"" [label=""releaseTokenOwnership""];
""2547_recoverERC20Tokens"" [label=""recoverERC20Tokens""];
""2547_setCrowdsaleWallet"" [label=""setCrowdsaleWallet""];
""2547_changeEndTime"" [label=""changeEndTime""];
""2547_getTokenAmount"" [label=""getTokenAmount""];
""2547_setBonus"" [label=""setBonus""];
""2547_setRate"" -> ""2547_onlyOwner"";
""2547_FourCrowdsale"" -> ""2547_TokenCappedCrowdsale"";
""2547_setCrowdsaleWallet"" -> ""2547_onlyOwner"";
""2547_recoverERC20Tokens"" -> ""2547_onlyOwner"";
""2547_processPresaleOrEarlyContributors"" -> ""2547_onlyOwner"";
""2547_changeEndTime"" -> ""2547_onlyOwner"";
""2547_setBonus"" -> ""2547_onlyOwner"";
""2547_changeStartAndEndTime"" -> ""2547_onlyOwner"";
""2547_FourCrowdsale"" -> ""2547_Crowdsale"";
""2547_releaseTokenOwnership"" -> ""2547_onlyOwner"";
""2547_finalization"" -> ""2547_finalization"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,Havven,"contract Havven is ExternStateProxyToken, SelfDestructible { mapping(address => uint) public currentBalanceSum; mapping(address => uint) public lastAverageBalance; mapping(address => uint) public penultimateAverageBalance; mapping(address => uint) public lastTransferTimestamp; uint public feePeriodStartTime = 3; uint public lastFeePeriodStartTime = 2; uint public penultimateFeePeriodStartTime = 1; uint public targetFeePeriodDurationSeconds = 4 weeks; uint constant MIN_FEE_PERIOD_DURATION_SECONDS = 1 days; uint constant MAX_FEE_PERIOD_DURATION_SECONDS = 26 weeks; uint public lastFeesCollected; mapping(address => bool) public hasWithdrawnLastPeriodFees; EtherNomin public nomin; HavvenEscrow public escrow; function Havven(TokenState initialState, address _owner) ExternStateProxyToken(, , 1e8 * UNIT, address(this), initialState, _owner) SelfDestructible(_owner, _owner) public { lastTransferTimestamp[this] = now; feePeriodStartTime = now; lastFeePeriodStartTime = now - targetFeePeriodDurationSeconds; penultimateFeePeriodStartTime = now - 2*targetFeePeriodDurationSeconds; }",1,"subgraph cluster_4834_Havven {
label=""Havven"";
""4834_totalSupply"" [label=""totalSupply""];
""4834_endow"" [label=""endow""];
""4834_setEscrow"" [label=""setEscrow""];
""4834_rolloverFeePeriod"" [label=""rolloverFeePeriod""];
""4834_setTargetFeePeriodDuration"" [label=""setTargetFeePeriodDuration""];
""4834_recomputeLastAverageBalance"" [label=""recomputeLastAverageBalance""];
""4834_adjustFeeEntitlement"" [label=""adjustFeeEntitlement""];
""4834_emitTransferEvents"" [label=""emitTransferEvents""];
""4834_targetFeePeriodDurationSeconds"" [label=""targetFeePeriodDurationSeconds""];
""4834_rolloverFee"" [label=""rolloverFee""];
""4834__recomputeAccountLastAverageBalance"" [label=""_recomputeAccountLastAverageBalance""];
""4834_transfer"" [label=""transfer""];
""4834_feePeriodStartTime"" [label=""feePeriodStartTime""];
""4834_recomputeAccountLastAverageBalance"" [label=""recomputeAccountLastAverageBalance""];
""4834_transferFrom"" [label=""transferFrom""];
""4834_Havven"" [label=""Havven""];
""4834_checkFeePeriodRollover"" [label=""checkFeePeriodRollover""];
""4834_withdrawFeeEntitlement"" [label=""withdrawFeeEntitlement""];
""4834_penultimateAverageBalance"" [label=""penultimateAverageBalance""];
""4834_setNomin"" [label=""setNomin""];
""4834_lastAverageBalance"" [label=""lastAverageBalance""];
""4834__transfer"" [label=""_transfer""];
""4834_withdrawFeeEntitlement"" -> ""4834_safeAdd"";
""4834_withdrawFeeEntitlement"" -> ""4834_safeMul_dec"";
""4834_withdrawFeeEntitlement"" -> ""4834_preCheckFeePeriodRollover"";
""4834__recomputeAccountLastAverageBalance"" -> ""4834_preCheckFeePeriodRollover"";
""4834__transfer"" -> ""4834_adjustFeeEntitlement"";
""4834_setTargetFeePeriodDuration"" -> ""4834_postCheckFeePeriodRollover"";
""4834_transferFrom"" -> ""4834__transferFrom_byProxy"";
""4834_transfer"" -> ""4834__transfer"";
""4834_withdrawFeeEntitlement"" -> ""4834_optionalProxy"";
""4834_recomputeLastAverageBalance"" -> ""4834__recomputeAccountLastAverageBalance"";
""4834_rolloverFee"" -> ""4834_safeMul"";
""4834_transferFrom"" -> ""4834_preCheckFeePeriodRollover"";
""4834_rolloverFeePeriod"" -> ""4834_checkFeePeriodRollover"";
""4834_transferFrom"" -> ""4834_optionalProxy"";
""4834_recomputeAccountLastAverageBalance"" -> ""4834__recomputeAccountLastAverageBalance"";
""4834_Havven"" -> ""4834_ExternStateProxyToken"";
""4834__recomputeAccountLastAverageBalance"" -> ""4834_adjustFeeEntitlement"";
""4834_emitTransferEvents"" -> ""4834_onlyOwner"";
""4834_withdrawFeeEntitlement"" -> ""4834_rolloverFee"";
""4834__transfer"" -> ""4834__transfer_byProxy"";
""4834_transferFrom"" -> ""4834_adjustFeeEntitlement"";
""4834_adjustFeeEntitlement"" -> ""4834_rolloverFee"";
""4834_rolloverFee"" -> ""4834_safeAdd"";
""4834_setEscrow"" -> ""4834_optionalProxy_onlyOwner"";
""4834_adjustFeeEntitlement"" -> ""4834_safeAdd"";
""4834_setNomin"" -> ""4834_optionalProxy_onlyOwner"";
""4834_recomputeLastAverageBalance"" -> ""4834_optionalProxy"";
""4834_Havven"" -> ""4834_SelfDestructible"";
""4834_withdrawFeeEntitlement"" -> ""4834_safeDiv_dec"";
""4834_endow"" -> ""4834__transfer"";
""4834_adjustFeeEntitlement"" -> ""4834_safeMul"";
""4834_transfer"" -> ""4834_optionalProxy"";
""4834_rolloverFee"" -> ""4834_safeDiv"";
""4834__transfer"" -> ""4834_preCheckFeePeriodRollover"";
""4834_endow"" -> ""4834_optionalProxy_onlyOwner"";
""4834_setTargetFeePeriodDuration"" -> ""4834_optionalProxy_onlyOwner"";
}
"
0x6bd33d49d48f76abcd96652e5347e398aa3fda96.sol,BancorBuyer,contract BancorBuyer { mapping (address => uint) public balances; uint public reward; bool public bought_tokens; uint public time_bought; address sale = 0xBbc79794599b19274850492394004087cBf89710; address token = 0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C; address developer = 0x4e6A1c57CdBfd97e8efe831f8f4418b1F2A09e6e; function withdraw(){ uint amount = balances[msg.sender]; balances[msg.sender] = 0; msg.sender.transfer(amount); },1,"subgraph cluster_189_BancorBuyer {
label=""BancorBuyer"";
""189_withdraw"" [label=""withdraw""];
""189_buy"" [label=""buy""];
""189_default_helper"" [label=""default_helper""];
""189_fallback"" [label=""fallback""];
""189_add_reward"" [label=""add_reward""];
""189_fallback"" -> ""189_default_helper"";
}
"
0x0ee14f47320604d894fffffc8639772382937bee.sol,OpportyWhiteListHold,contract OpportyWhiteListHold is Ownable { using SafeMath for uint256; OpportyToken public OppToken; struct Holder { bool isActive; uint tokens; uint8 holdPeriod; uint holdPeriodTimestamp; bool withdrawed; },1,"subgraph cluster_1043_OpportyWhiteListHold {
label=""OpportyWhiteListHold"";
""1043_setToken"" [label=""setToken""];
""1043_unlockTokens"" [label=""unlockTokens""];
""1043_addHolder"" [label=""addHolder""];
""1043_getBalance"" [label=""getBalance""];
""1043_removeAssetsOwner"" [label=""removeAssetsOwner""];
""1043_getAssetsOwners"" [label=""getAssetsOwners""];
""1043_returnTokens"" [label=""returnTokens""];
""1043_changeHold"" [label=""changeHold""];
""1043_addAssetsOwner"" [label=""addAssetsOwner""];
""1043_getBalanceContract"" [label=""getBalanceContract""];
""1043_setToken"" -> ""1043_onlyOwner"";
""1043_returnTokens"" -> ""1043_onlyOwner"";
""1043_returnTokens"" -> ""1043_getBalance"";
""1043_changeHold"" -> ""1043_onlyAssetsOwners"";
""1043_getAssetsOwners"" -> ""1043_onlyOwner"";
""1043_addHolder"" -> ""1043_onlyAssetsOwners"";
""1043_removeAssetsOwner"" -> ""1043_onlyOwner"";
""1043_addAssetsOwner"" -> ""1043_onlyOwner"";
}
"
0x6b4df2aa3d64d8dc06120ef4391513e4170af4a7.sol,GeneralTransferManager,contract GeneralTransferManager is ITransferManager { using SafeMath for uint256; address public issuanceAddress = address(0); address public signingAddress = address(0); bytes32 public constant WHITELIST = ; bytes32 public constant FLAGS = ; struct TimeRestriction { uint256 fromTime; uint256 toTime; uint256 expiryTime; bool canBuyFromSTO; },1,"subgraph cluster_1917_GeneralTransferManager {
label=""GeneralTransferManager"";
""1917_changeAllowAllWhitelistTransfers"" [label=""changeAllowAllWhitelistTransfers""];
""1917_changeAllowAllTransfers"" [label=""changeAllowAllTransfers""];
""1917_isSTOAttached"" [label=""isSTOAttached""];
""1917_changeSigningAddress"" [label=""changeSigningAddress""];
""1917_checkSig"" [label=""checkSig""];
""1917_changeAllowAllWhitelistIssuances"" [label=""changeAllowAllWhitelistIssuances""];
""1917_getPermissions"" [label=""getPermissions""];
""1917_constructor"" [label=""constructor""];
""1917_onWhitelist"" [label=""onWhitelist""];
""1917_changeIssuanceAddress"" [label=""changeIssuanceAddress""];
""1917_modifyWhitelist"" [label=""modifyWhitelist""];
""1917_verifyTransfer"" [label=""verifyTransfer""];
""1917_modifyWhitelistMulti"" [label=""modifyWhitelistMulti""];
""1917_modifyWhitelistSigned"" [label=""modifyWhitelistSigned""];
""1917_changeAllowAllBurnTransfers"" [label=""changeAllowAllBurnTransfers""];
""1917_getInitFunction"" [label=""getInitFunction""];
""1917_changeSigningAddress"" -> ""1917_withPerm"";
""1917_verifyTransfer"" -> ""1917_isSTOAttached"";
""1917_changeAllowAllWhitelistTransfers"" -> ""1917_withPerm"";
""1917_changeAllowAllWhitelistIssuances"" -> ""1917_withPerm"";
""1917_modifyWhitelistMulti"" -> ""1917_withPerm"";
""1917_modifyWhitelistSigned"" -> ""1917_checkSig"";
""1917_constructor"" -> ""1917_constructor"";
""1917_changeIssuanceAddress"" -> ""1917_withPerm"";
""1917_modifyWhitelist"" -> ""1917_withPerm"";
""1917_modifyWhitelistMulti"" -> ""1917_modifyWhitelist"";
""1917_verifyTransfer"" -> ""1917_onWhitelist"";
""1917_changeAllowAllTransfers"" -> ""1917_withPerm"";
""1917_changeAllowAllBurnTransfers"" -> ""1917_withPerm"";
}
"
0x39e8082b00c9f19ebf553e40feb7cf8459acc693.sol,DSToken,"contract DSToken is DSTokenBase(0), DSStop { string public symbol = ; string public name = ; uint256 public decimals = 18; function DSToken( string symbol_, string name_ ) public { symbol = symbol_; name = name_; }",1,"subgraph cluster_1105_DSToken {
label=""DSToken"";
""1105_move"" [label=""move""];
""1105_owner"" [label=""owner""];
""1105_push"" [label=""push""];
""1105_DSToken"" [label=""DSToken""];
""1105_transferFrom"" [label=""transferFrom""];
""1105_approve"" [label=""approve""];
""1105_setName"" [label=""setName""];
""1105_burn"" [label=""burn""];
""1105_pull"" [label=""pull""];
""1105_mint"" [label=""mint""];
""1105_mint"" -> ""1105_add"";
""1105_transferFrom"" -> ""1105_stoppable"";
""1105_mint"" -> ""1105_auth"";
""1105_burn"" -> ""1105_sub"";
""1105_setName"" -> ""1105_auth"";
""1105_push"" -> ""1105_transferFrom"";
""1105_move"" -> ""1105_transferFrom"";
""1105_burn"" -> ""1105_auth"";
""1105_mint"" -> ""1105_mint"";
""1105_burn"" -> ""1105_burn"";
""1105_approve"" -> ""1105_stoppable"";
""1105_burn"" -> ""1105_stoppable"";
""1105_transferFrom"" -> ""1105_add"";
""1105_pull"" -> ""1105_transferFrom"";
""1105_mint"" -> ""1105_stoppable"";
""1105_approve"" -> ""1105_approve"";
""1105_transferFrom"" -> ""1105_sub"";
}
"
0x17a03553719001e05dc19a20f5e82ee76923a985.sol,Auction,"contract Auction is Pausable, AuctionBase { function withdrawBalance() external { address nftAddress = address(nonFungibleContract); require( msg.sender == owner || msg.sender == nftAddress ); nftAddress.transfer(address(this).balance); }",1,"subgraph cluster_641_AuctionBase {
label=""AuctionBase"";
""641__isOnAuction"" [label=""_isOnAuction""];
""641__currentPrice"" [label=""_currentPrice""];
""641__transfer"" [label=""_transfer""];
""641__addAuction"" [label=""_addAuction""];
""641__computeCut"" [label=""_computeCut""];
""641__escrow"" [label=""_escrow""];
""641_fallback"" [label=""fallback""];
""641__cancelAuction"" [label=""_cancelAuction""];
""641__owns"" [label=""_owns""];
""641__bid"" [label=""_bid""];
""641__removeAuction"" [label=""_removeAuction""];
""641__bid"" -> ""641__computeCut"";
""641__bid"" -> ""641__isOnAuction"";
""641__cancelAuction"" -> ""641__removeAuction"";
""641__bid"" -> ""641__currentPrice"";
""641__cancelAuction"" -> ""641__transfer"";
""641__bid"" -> ""641__removeAuction"";
}
"
0x797d713d8d7a2815ccf3dcf9719e3e9f1712c370.sol,Trustee,contract Trustee is Ownable { using SaferMath for uint256; StoxSmartToken public stox; struct Grant { uint256 value; uint256 start; uint256 cliff; uint256 end; uint256 transferred; bool revokable; },1,"subgraph cluster_1489_Trustee {
label=""Trustee"";
""1489_vestedTokens"" [label=""vestedTokens""];
""1489_revoke"" [label=""revoke""];
""1489_unlockVestedTokens"" [label=""unlockVestedTokens""];
""1489_grant"" [label=""grant""];
""1489_Trustee"" [label=""Trustee""];
""1489_calculateVestedTokens"" [label=""calculateVestedTokens""];
""1489_unlockVestedTokens"" -> ""1489_calculateVestedTokens"";
""1489_vestedTokens"" -> ""1489_calculateVestedTokens"";
""1489_grant"" -> ""1489_onlyOwner"";
""1489_revoke"" -> ""1489_onlyOwner"";
}
"
0x18f0cd26c06449d967ca6aef8b5f9d8ee9fd7992.sol,Exch,"contract Exch is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; mapping (address => bool) public whiteListERC20; mapping (address => bool) public whiteListERC223; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); modifier onlyAdmin() { require(msg.sender==admin); _; }",1,"subgraph cluster_1411_Exch {
label=""Exch"";
""1411_withdrawToken"" [label=""withdrawToken""];
""1411_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1411_setBlackListERC223"" [label=""setBlackListERC223""];
""1411_constructor"" [label=""constructor""];
""1411_amountFilled"" [label=""amountFilled""];
""1411_setWhiteListERC20"" [label=""setWhiteListERC20""];
""1411_changeFeeTake"" [label=""changeFeeTake""];
""1411_availableVolume"" [label=""availableVolume""];
""1411_trade"" [label=""trade""];
""1411_changeFeeMake"" [label=""changeFeeMake""];
""1411_depositToken"" [label=""depositToken""];
""1411_changeFeeRebate"" [label=""changeFeeRebate""];
""1411_tradeBalances"" [label=""tradeBalances""];
""1411_changeAdmin"" [label=""changeAdmin""];
""1411_withdraw"" [label=""withdraw""];
""1411_fallback"" [label=""fallback""];
""1411_balanceOf"" [label=""balanceOf""];
""1411_deposit"" [label=""deposit""];
""1411_cancelOrder"" [label=""cancelOrder""];
""1411_tokenFallback"" [label=""tokenFallback""];
""1411_setBlackListERC20"" [label=""setBlackListERC20""];
""1411_setWhiteListERC223"" [label=""setWhiteListERC223""];
""1411_changeFeeAccount"" [label=""changeFeeAccount""];
""1411_testTrade"" [label=""testTrade""];
""1411_order"" [label=""order""];
""1411_setWhiteListERC20"" -> ""1411_onlyAdmin"";
""1411_tokenFallback"" -> ""1411_safeAdd"";
""1411_depositToken"" -> ""1411_safeAdd"";
""1411_withdrawToken"" -> ""1411_safeSub"";
""1411_availableVolume"" -> ""1411_safeMul"";
""1411_availableVolume"" -> ""1411_safeSub"";
""1411_deposit"" -> ""1411_safeAdd"";
""1411_withdraw"" -> ""1411_safeSub"";
""1411_setBlackListERC20"" -> ""1411_onlyAdmin"";
""1411_setBlackListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeAccount"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_tradeBalances"";
""1411_changeFeeTake"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeSub"";
""1411_changeFeeRebate"" -> ""1411_onlyAdmin"";
""1411_testTrade"" -> ""1411_availableVolume"";
""1411_changeAccountLevelsAddr"" -> ""1411_onlyAdmin"";
""1411_changeAdmin"" -> ""1411_onlyAdmin"";
""1411_tradeBalances"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeMul"";
""1411_setWhiteListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeMake"" -> ""1411_onlyAdmin"";
}
"
0x211f01e59b425253c0a0e9a7bf612605b42ce82c.sol,Kleros,"contract Kleros is Arbitrator, ApproveAndCallFallBack { Pinakion public pinakion; uint public constant NON_PAYABLE_AMOUNT = (2**256 - 2) / 2; RNG public rng; uint public arbitrationFeePerJuror = 0.05 ether; uint16 public defaultNumberJuror = 3; uint public minActivatedToken = 0.1 * 1e18; uint[5] public timePerPeriod; uint public alpha = 2000; uint constant ALPHA_DIVISOR = 1e4; uint public maxAppeals = 5; address public governor; uint public session = 1; uint public lastPeriodChange; uint public segmentSize; uint public rnBlock; uint public randomNumber; enum Period { Activation, Draw, Vote, Appeal, Execution }",1,"subgraph cluster_4054_Kleros {
label=""Kleros"";
""4054_currentRuling"" [label=""currentRuling""];
""4054_isDrawn"" [label=""isDrawn""];
""4054_penalizeInactiveJuror"" [label=""penalizeInactiveJuror""];
""4054_setArbitrationFeePerJuror"" [label=""setArbitrationFeePerJuror""];
""4054_validDraws"" [label=""validDraws""];
""4054_createDispute"" [label=""createDispute""];
""4054_getLastSessionVote"" [label=""getLastSessionVote""];
""4054_appealCost"" [label=""appealCost""];
""4054_voteRuling"" [label=""voteRuling""];
""4054_setMaxAppeals"" [label=""setMaxAppeals""];
""4054_getVoteRuling"" [label=""getVoteRuling""];
""4054_getVoteCount"" [label=""getVoteCount""];
""4054_setAlpha"" [label=""setAlpha""];
""4054_disputeStatus"" [label=""disputeStatus""];
""4054_getStakePerDraw"" [label=""getStakePerDraw""];
""4054_withdraw"" [label=""withdraw""];
""4054_amountJurors"" [label=""amountJurors""];
""4054_setDefaultNumberJuror"" [label=""setDefaultNumberJuror""];
""4054_appeal"" [label=""appeal""];
""4054_setMinActivatedToken"" [label=""setMinActivatedToken""];
""4054_setGovernor"" [label=""setGovernor""];
""4054_activateTokens"" [label=""activateTokens""];
""4054_constructor"" [label=""constructor""];
""4054_getVoteAccount"" [label=""getVoteAccount""];
""4054_extraDataToNbJurors"" [label=""extraDataToNbJurors""];
""4054_setTimePerPeriod"" [label=""setTimePerPeriod""];
""4054_setRng"" [label=""setRng""];
""4054_multipleShotTokenRepartition"" [label=""multipleShotTokenRepartition""];
""4054_oneShotTokenRepartition"" [label=""oneShotTokenRepartition""];
""4054_executeOrder"" [label=""executeOrder""];
""4054_getWinningCount"" [label=""getWinningCount""];
""4054_passPeriod"" [label=""passPeriod""];
""4054_executeRuling"" [label=""executeRuling""];
""4054_arbitrationCost"" [label=""arbitrationCost""];
""4054_getWinningChoice"" [label=""getWinningChoice""];
""4054_receiveApproval"" [label=""receiveApproval""];
""4054_setGovernor"" -> ""4054_onlyGovernor"";
""4054_voteRuling"" -> ""4054_onlyDuring"";
""4054_multipleShotTokenRepartition"" -> ""4054_onlyDuring"";
""4054_oneShotTokenRepartition"" -> ""4054_onlyDuring"";
""4054_setMaxAppeals"" -> ""4054_onlyGovernor"";
""4054_createDispute"" -> ""4054_extraDataToNbJurors"";
""4054_receiveApproval"" -> ""4054_onlyBy"";
""4054_appealCost"" -> ""4054_amountJurors"";
""4054_voteRuling"" -> ""4054_getStakePerDraw"";
""4054_appeal"" -> ""4054_appeal"";
""4054_voteRuling"" -> ""4054_validDraws"";
""4054_setRng"" -> ""4054_onlyGovernor"";
""4054_validDraws"" -> ""4054_amountJurors"";
""4054_multipleShotTokenRepartition"" -> ""4054_getStakePerDraw"";
""4054_appeal"" -> ""4054_onlyDuring"";
""4054_executeOrder"" -> ""4054_onlyGovernor"";
""4054_penalizeInactiveJuror"" -> ""4054_validDraws"";
""4054_setTimePerPeriod"" -> ""4054_onlyGovernor"";
""4054_setAlpha"" -> ""4054_onlyGovernor"";
""4054_createDispute"" -> ""4054_arbitrationCost"";
""4054_setDefaultNumberJuror"" -> ""4054_onlyGovernor"";
""4054_appeal"" -> ""4054_appealCost"";
""4054_setArbitrationFeePerJuror"" -> ""4054_onlyGovernor"";
""4054_oneShotTokenRepartition"" -> ""4054_getStakePerDraw"";
""4054_setMinActivatedToken"" -> ""4054_onlyGovernor"";
""4054_isDrawn"" -> ""4054_amountJurors"";
""4054_activateTokens"" -> ""4054_onlyDuring"";
""4054_arbitrationCost"" -> ""4054_extraDataToNbJurors"";
}
"
0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol,LockinManager,contract LockinManager { using SafeMath for uint256; struct Lock { uint256 amount; uint256 unlockDate; uint256 lockedFor; },1,"subgraph cluster_1738_LockinManager {
label=""LockinManager"";
""1738_lockIt"" [label=""lockIt""];
""1738_getLocksLockedFor"" [label=""getLocksLockedFor""];
""1738_getLock"" [label=""getLock""];
""1738_ifInAllowedLocks"" [label=""ifInAllowedLocks""];
""1738_getLocks"" [label=""getLocks""];
""1738_removeAllowedLock"" [label=""removeAllowedLock""];
""1738_setDefaultAllowedLock"" [label=""setDefaultAllowedLock""];
""1738_LockinManager"" [label=""LockinManager""];
""1738_lockForDays"" [label=""lockForDays""];
""1738_addValidContract"" [label=""addValidContract""];
""1738_removeValidContract"" [label=""removeValidContract""];
""1738_defaultLockin"" [label=""defaultLockin""];
""1738_getLocksAmount"" [label=""getLocksAmount""];
""1738_addAllowedLock"" [label=""addAllowedLock""];
""1738_getLocksUnlockDate"" [label=""getLocksUnlockDate""];
""1738_getLocksUnlockDate"" -> ""1738_validContractOnly"";
""1738_removeValidContract"" -> ""1738_adminOnly"";
""1738_setDefaultAllowedLock"" -> ""1738_adminOnly"";
""1738_getLocksAmount"" -> ""1738_validContractOnly"";
""1738_getLocksLockedFor"" -> ""1738_validContractOnly"";
""1738_getLocks"" -> ""1738_validContractOnly"";
""1738_removeAllowedLock"" -> ""1738_adminOnly"";
""1738_getLock"" -> ""1738_validContractOnly"";
""1738_addAllowedLock"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_lockIt"";
""1738_lockForDays"" -> ""1738_ifInAllowedLocks"";
""1738_lockForDays"" -> ""1738_lockIt"";
""1738_addValidContract"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_validContractOnly"";
}
"
0x4cd988afbad37289baaf53c13e98e2bd46aaea8c.sol,DSStop,"contract DSStop is DSAuth, DSNote { bool public stopped; modifier stoppable { assert (!stopped); _; }",1,"subgraph cluster_1208_DSStop {
label=""DSStop"";
""1208_start"" [label=""start""];
""1208_stop"" [label=""stop""];
""1208_start"" -> ""1208_auth"";
""1208_start"" -> ""1208_note"";
""1208_stop"" -> ""1208_auth"";
""1208_stop"" -> ""1208_note"";
}
"
0x6f8544edb3f513845135b0efa907f4b6b9c2c92e.sol,BW,contract BW { address public owner; BWService private bwService; BWData private bwData; bool public paused = false; modifier isOwner { if (msg.sender != owner) { revert(); },1,"subgraph cluster_2976_BW {
label=""BW"";
""2976_depositBattleValue"" [label=""depositBattleValue""];
""2976_fallback"" [label=""fallback""];
""2976_moveBlockValue"" [label=""moveBlockValue""];
""2976_setPaused"" [label=""setPaused""];
""2976_transferTokens"" [label=""transferTokens""];
""2976_withdrawValue"" [label=""withdrawValue""];
""2976_updateUser"" [label=""updateUser""];
""2976_claimTilesForExistingUser"" [label=""claimTilesForExistingUser""];
""2976_transferTileFromOwner"" [label=""transferTileFromOwner""];
""2976_attackTileForExistingUser"" [label=""attackTileForExistingUser""];
""2976_kill"" [label=""kill""];
""2976_censorUser"" [label=""censorUser""];
""2976_attackTileForNewUser"" [label=""attackTileForNewUser""];
""2976_withdrawBattleValue"" [label=""withdrawBattleValue""];
""2976_createNewUser"" [label=""createNewUser""];
""2976_fortifyClaims"" [label=""fortifyClaims""];
""2976_claimTilesForNewUser"" [label=""claimTilesForNewUser""];
""2976_constructor"" [label=""constructor""];
""2976_attackTileForNewUser"" -> ""2976_isNotContractCaller"";
""2976_fortifyClaims"" -> ""2976_isNotContractCaller"";
""2976_createNewUser"" -> ""2976_isOwner"";
""2976_updateUser"" -> ""2976_isNotPaused"";
""2976_setPaused"" -> ""2976_isOwner"";
""2976_kill"" -> ""2976_isOwner"";
""2976_claimTilesForExistingUser"" -> ""2976_isNotPaused"";
""2976_attackTileForExistingUser"" -> ""2976_isNotContractCaller"";
""2976_withdrawValue"" -> ""2976_isOwner"";
""2976_fortifyClaims"" -> ""2976_isNotPaused"";
""2976_censorUser"" -> ""2976_isOwner"";
""2976_claimTilesForExistingUser"" -> ""2976_isNotContractCaller"";
""2976_claimTilesForNewUser"" -> ""2976_isNotPaused"";
""2976_transferTileFromOwner"" -> ""2976_isOwner"";
""2976_updateUser"" -> ""2976_isNotContractCaller"";
""2976_claimTilesForNewUser"" -> ""2976_isNotContractCaller"";
""2976_moveBlockValue"" -> ""2976_isNotPaused"";
""2976_depositBattleValue"" -> ""2976_isOwner"";
""2976_transferTokens"" -> ""2976_isOwner"";
""2976_withdrawBattleValue"" -> ""2976_isNotContractCaller"";
""2976_attackTileForNewUser"" -> ""2976_isNotPaused"";
""2976_attackTileForExistingUser"" -> ""2976_isNotPaused"";
""2976_moveBlockValue"" -> ""2976_isNotContractCaller"";
}
"
0x3ac86159fad58c90aaea1c61974d69d4f8ce8e77.sol,Crowdsale,contract Crowdsale is Ownable { using SafeMath for uint256; SingleTokenCoin public token; WrapperOraclize private wrapper = WrapperOraclize(0xfC484c66daE464CC6055d7a4782Ec8761dc9842F); uint256 private angel_sale_start; uint256 private angel_sale_finish; uint256 private pre_sale_start; uint256 private pre_sale_finish; uint256 private public_sale_start; uint256 private public_sale_finish; bool private isAngel; bool private isPreSale; bool private isPublic; uint256 private angel_rate; uint256 private public_rate; uint256 private decimals; uint256 private totalETH; address public coreTeamAddr; address public itDevAddr; address public futDevAddr; address public commFoundAddr; address public socWarefareAddr; address public marketingAddr; address public unsoldAddr; address public collectAddr; bool public mintingFinished = false; mapping(address => uint256) private founding_buyers_token; mapping(address => uint256) private angel_buyers_eth; mapping(address => uint256) private angel_buyers_token; mapping(address => uint256) private pre_sale_buyers_eth; mapping(address => uint256) private pre_sale_buyers_token; mapping(address => uint256) private pe_buyers_token; mapping(address => uint256) private public_buyers_eth; mapping(address => uint256) private public_buyers_token; address[] private founding_investors; address[] private pre_sale_investors; address[] private angel_investors; address[] private pe_investors; address[] private public_investors; uint256 private soldTokens; uint256 private maxcup; uint256 private totalAmount; uint256 private foundingAmount; uint256 private angelAmount; uint256 private preSaleAmount; uint256 private PEInvestorAmount; uint256 private publicSaleAmount; uint256 private coreTeamAmount; uint256 private coreTeamAuto; uint256 private coreTeamManual; uint256 private itDevAmount; uint256 private futDevAmount; uint256 private commFoundAmount; uint256 private socWarefareAmount; uint256 private marketingAmount; uint256 private angel_sale_sold; uint256 private pre_sale_sold; uint256 private public_sale_sold; uint256 private founding_sold; uint256 private peInvestors_sold; uint256 private angel_sale_totalETH; uint256 private pre_sale_totalETH; uint256 private public_sale_totalETH; uint256 private firstPhaseAmount; uint256 private secondPhaseAmount; uint256 private thirdPhaseAmount; uint256 private fourPhaseAmount; uint256 private firstPhaseDiscount; uint256 private secondPhaseDiscount; uint256 private thirdPhaseDiscount; uint256 private fourPhaseDiscount; uint256 private currentPhase; bool private moveTokens; bool withdrowTokensComplete = false; function Crowdsale(address token_addr) { token = SingleTokenCoin(token_addr); public_rate = 3546099290780141; angel_rate = 20; decimals = 35460992907801; angel_sale_start = now - 3 days; angel_sale_finish = 1510488000; pre_sale_start = 1510491600; pre_sale_finish = 1512561600; public_sale_start = 1512565200; public_sale_finish = public_sale_start + 14 days; moveTokens = false; isAngel = true; isPreSale = false; isPublic = false; currentPhase = 1; founding_sold = 0; peInvestors_sold = 0; angel_sale_sold = 0; pre_sale_sold = 0; public_sale_sold = 0; angel_sale_totalETH = 0; pre_sale_totalETH = 0; public_sale_totalETH = 0; firstPhaseAmount = 18750000E18; secondPhaseAmount = 37500000E18; thirdPhaseAmount = 56250000E18; fourPhaseAmount = 75000000E18; firstPhaseDiscount = 30; secondPhaseDiscount = 40; thirdPhaseDiscount = 50; fourPhaseDiscount = 60; totalAmount = 500000000E18; foundingAmount = 10000000E18; angelAmount = 25000000E18; preSaleAmount = 75000000E18; PEInvestorAmount = 50000000E18; publicSaleAmount = 100000000E18; coreTeamAmount = 100000000E18; coreTeamAuto = 60000000E18; coreTeamManual = 40000000E18; itDevAmount = 50000000E18; futDevAmount = 50000000E18; commFoundAmount = 15000000E18; socWarefareAmount = 10000000E18; marketingAmount = 15000000E18; mintingFinished = false; coreTeamAddr = 0xB0A3A845cfA5e2baCD3925Af85c59dE4D32D874f; itDevAddr = 0x61528ffdCd4BC26c81c88423018780b399Fbb8e7; futDevAddr = 0xA1f9C3F137496e6b8bA4445d15b0986CaA22FDe3; commFoundAddr = 0xC30a0E7FFad754A9AD2A1C1cFeB10e05f7C7aB6A; socWarefareAddr = 0xd5d692C89C83313579d02C94F4faE600fe30D1d9; marketingAddr = 0x5490510072b929273F65dba4B72c96cd45A99b5A; unsoldAddr = 0x18051b5b0F1FDb4D44eACF2FA49f19bB80105Fc1; collectAddr = 0xB338121B8e5dA0900a6E8580321293f3CF52E58D; },1,"subgraph cluster_2629_Crowdsale {
label=""Crowdsale"";
""2629_withdrowTokens"" [label=""withdrowTokens""];
""2629_getFinishStatus"" [label=""getFinishStatus""];
""2629_removeFreeze"" [label=""removeFreeze""];
""2629_getFinishDates"" [label=""getFinishDates""];
""2629_getTotalETH"" [label=""getTotalETH""];
""2629_finishMinting"" [label=""finishMinting""];
""2629_saveInfoAboutInvestors"" [label=""saveInfoAboutInvestors""];
""2629_getStartDates"" [label=""getStartDates""];
""2629_getWrapperData"" [label=""getWrapperData""];
""2629_sendToAddress"" [label=""sendToAddress""];
""2629_setTransferOwnership"" [label=""setTransferOwnership""];
""2629_getInvestorsCount"" [label=""getInvestorsCount""];
""2629_calculatePrice"" [label=""calculatePrice""];
""2629_calculateRate"" [label=""calculateRate""];
""2629_getCurrentPrice"" [label=""getCurrentPrice""];
""2629_getInvestorByIndex"" [label=""getInvestorByIndex""];
""2629_withdrowETH"" [label=""withdrowETH""];
""2629_setAngelDate"" [label=""setAngelDate""];
""2629_getOwner"" [label=""getOwner""];
""2629_fallback"" [label=""fallback""];
""2629_setFreeze"" [label=""setFreeze""];
""2629_getSoldToken"" [label=""getSoldToken""];
""2629_mint"" [label=""mint""];
""2629_setPublicSaleFinishDate"" [label=""setPublicSaleFinishDate""];
""2629_getBalanceContract"" [label=""getBalanceContract""];
""2629_getContractAddress"" [label=""getContractAddress""];
""2629_setPublicSaleDate"" [label=""setPublicSaleDate""];
""2629_moveUnsold"" [label=""moveUnsold""];
""2629_refund"" [label=""refund""];
""2629_sendOracleData"" [label=""sendOracleData""];
""2629_Crowdsale"" [label=""Crowdsale""];
""2629_getTotalToken"" [label=""getTotalToken""];
""2629_getInvestorsTokens"" [label=""getInvestorsTokens""];
""2629_getLeftToken"" [label=""getLeftToken""];
""2629_newTransferManualTokensnewTransfer"" [label=""newTransferManualTokensnewTransfer""];
""2629_setPreSaleDate"" [label=""setPreSaleDate""];
""2629_calculateMinorRefund"" [label=""calculateMinorRefund""];
""2629_setPreSaleFinishDate"" [label=""setPreSaleFinishDate""];
""2629_bytesToUInt"" [label=""bytesToUInt""];
""2629_setAngelFinishDate"" [label=""setAngelFinishDate""];
""2629_finishMinting"" -> ""2629_onlyOwner"";
""2629_setPublicSaleFinishDate"" -> ""2629_onlyOwner"";
""2629_mint"" -> ""2629_isICOFinished"";
""2629_sendToAddress"" -> ""2629_onlyOwner"";
""2629_calculateRate"" -> ""2629_getWrapperData"";
""2629_sendToAddress"" -> ""2629_canMint"";
""2629_setPreSaleDate"" -> ""2629_onlyOwner"";
""2629_setAngelFinishDate"" -> ""2629_onlyOwner"";
""2629_fallback"" -> ""2629_mint"";
""2629_getCurrentPrice"" -> ""2629_calculatePrice"";
""2629_mint"" -> ""2629_isAnyStage"";
""2629_mint"" -> ""2629_saveInfoAboutInvestors"";
""2629_mint"" -> ""2629_refund"";
""2629_mint"" -> ""2629_calculatePrice"";
""2629_setAngelDate"" -> ""2629_onlyOwner"";
""2629_mint"" -> ""2629_canMint"";
""2629_getCurrentPrice"" -> ""2629_calculateRate"";
""2629_mint"" -> ""2629_calculateMinorRefund"";
""2629_setTransferOwnership"" -> ""2629_onlyOwner"";
""2629_withdrowTokens"" -> ""2629_onlyOwner"";
""2629_withdrowETH"" -> ""2629_onlyOwner"";
""2629_moveUnsold"" -> ""2629_onlyOwner"";
""2629_newTransferManualTokensnewTransfer"" -> ""2629_onlyOwner"";
""2629_setPublicSaleDate"" -> ""2629_onlyOwner"";
""2629_setTransferOwnership"" -> ""2629_transferOwnership"";
""2629_setFreeze"" -> ""2629_onlyOwner"";
""2629_removeFreeze"" -> ""2629_onlyOwner"";
""2629_calculateRate"" -> ""2629_bytesToUInt"";
""2629_mint"" -> ""2629_calculateRate"";
""2629_setPreSaleFinishDate"" -> ""2629_onlyOwner"";
}
"
0xaf8eabf89f5664a2bc82ca415a4337821cd54d65.sol,Crowdsale,"contract Crowdsale is Bonus { using SafeMath for uint256; ERC20 public token; address public wallet; uint256 public rate; uint256 public openingTimePeriodOne; uint256 public closingTimePeriodOne; uint256 public openingTimePeriodTwo; uint256 public closingTimePeriodTwo; uint256 public bonusDeliverTime; uint256 public bonusRatePrivateSale; uint256 public bonusRatePeriodOne; uint256 public bonusRatePeriodTwo; uint256 decimals; uint256 public tokenUnsold; uint256 public bonusUnsold; uint256 public constant minPurchaseAmount = 0.1 ether; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event TokenBonus(address indexed purchaser, address indexed beneficiary, uint256 bonus); modifier onlyWhileOpen { require(block.timestamp <= closingTimePeriodTwo); _; }",1,"subgraph cluster_945_Crowdsale {
label=""Crowdsale"";
""945_returnBonus"" [label=""returnBonus""];
""945_returnToken"" [label=""returnToken""];
""945__validateMaxSellAmount"" [label=""_validateMaxSellAmount""];
""945__processPurchase"" [label=""_processPurchase""];
""945__deliverTokens"" [label=""_deliverTokens""];
""945__getTokenAmount"" [label=""_getTokenAmount""];
""945__forwardFunds"" [label=""_forwardFunds""];
""945_constructor"" [label=""constructor""];
""945__preValidatePurchase"" [label=""_preValidatePurchase""];
""945_isClosed"" [label=""isClosed""];
""945_privateCrowdsale"" [label=""privateCrowdsale""];
""945_isOpened"" [label=""isOpened""];
""945__getTokenBonus"" [label=""_getTokenBonus""];
""945_deliverBonus"" [label=""deliverBonus""];
""945_fallback"" [label=""fallback""];
""945_buyTokens"" [label=""buyTokens""];
""945__processPurchase"" -> ""945__validateMaxSellAmount"";
""945_fallback"" -> ""945_buyTokens"";
""945_buyTokens"" -> ""945__preValidatePurchase"";
""945_buyTokens"" -> ""945__addBonus"";
""945_buyTokens"" -> ""945__forwardFunds"";
""945_buyTokens"" -> ""945__processPurchase"";
""945__validateMaxSellAmount"" -> ""945_onlyWhileOpen"";
""945_privateCrowdsale"" -> ""945__getTokenAmount"";
""945_privateCrowdsale"" -> ""945_onlyOwner"";
""945_returnToken"" -> ""945_onlyOwner"";
""945_buyTokens"" -> ""945__getTokenAmount"";
""945_buyTokens"" -> ""945__getTokenBonus"";
""945_privateCrowdsale"" -> ""945__processPurchase"";
""945_deliverBonus"" -> ""945_onlyOwner"";
""945__processPurchase"" -> ""945__deliverTokens"";
""945_returnBonus"" -> ""945_onlyOwner"";
""945_privateCrowdsale"" -> ""945__addBonus"";
""945__preValidatePurchase"" -> ""945_onlyWhileOpen"";
""945_privateCrowdsale"" -> ""945__preValidatePurchase"";
}
"
0x3fe1bd3f808682e10cc16ccfc0e9476555ed93a7.sol,WFCToken,"contract WFCToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 625; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_817_WFCToken {
label=""WFCToken"";
""817_startFunding"" [label=""startFunding""];
""817_allocateToken"" [label=""allocateToken""];
""817_changeOwner"" [label=""changeOwner""];
""817_formatDecimals"" [label=""formatDecimals""];
""817_setMigrateContract"" [label=""setMigrateContract""];
""817_stopFunding"" [label=""stopFunding""];
""817_transferETH"" [label=""transferETH""];
""817_fallback"" [label=""fallback""];
""817_migrate"" [label=""migrate""];
""817_WFCToken"" [label=""WFCToken""];
""817_decreaseSupply"" [label=""decreaseSupply""];
""817_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""817_WFCToken"" -> ""817_formatDecimals"";
""817_startFunding"" -> ""817_isOwner"";
""817_setTokenExchangeRate"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_formatDecimals"";
""817_allocateToken"" -> ""817_safeAdd"";
""817_fallback"" -> ""817_safeAdd"";
""817_allocateToken"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_safeMult"";
""817_migrate"" -> ""817_safeAdd"";
""817_transferETH"" -> ""817_isOwner"";
""817_stopFunding"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_formatDecimals"";
""817_decreaseSupply"" -> ""817_safeSubtract"";
""817_fallback"" -> ""817_safeMult"";
""817_changeOwner"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_isOwner"";
""817_setMigrateContract"" -> ""817_isOwner"";
}
"
0x01d6208f95cf2292c350fc8bb1b1f29230352675.sol,DRCWalletManager,"contract DRCWalletManager is OwnerContract, Withdrawable, TokenDestructible { using SafeMath for uint256; struct WithdrawWallet { bytes32 name; address walletAddr; }",1,"subgraph cluster_1903_DRCWalletManager {
label=""DRCWalletManager"";
""1903_freezeTokens"" [label=""freezeTokens""];
""1903_withdrawWithFee"" [label=""withdrawWithFee""];
""1903_bindToken"" [label=""bindToken""];
""1903_getDepositInfo"" [label=""getDepositInfo""];
""1903_changeDefaultWithdraw"" [label=""changeDefaultWithdraw""];
""1903_getDepositWithdrawCount"" [label=""getDepositWithdrawCount""];
""1903_checkWithdrawAddress"" [label=""checkWithdrawAddress""];
""1903_withdrawFromThis"" [label=""withdrawFromThis""];
""1903_createDepositContract"" [label=""createDepositContract""];
""1903_getDepositWithdrawList"" [label=""getDepositWithdrawList""];
""1903_withdrawWithFee"" -> ""1903_onlyOwner"";
""1903_bindToken"" -> ""1903_onlyOwner"";
""1903_getDepositWithdrawCount"" -> ""1903_onlyOwner"";
""1903_freezeTokens"" -> ""1903_onlyOwner"";
""1903_withdrawWithFee"" -> ""1903_checkWithdrawAddress"";
""1903_withdrawWithFee"" -> ""1903_withdrawFromThis"";
""1903_getDepositWithdrawList"" -> ""1903_onlyOwner"";
""1903_createDepositContract"" -> ""1903_onlyOwner"";
""1903_withdrawWithFee"" -> ""1903_withdrawWithFee"";
""1903_getDepositInfo"" -> ""1903_onlyOwner"";
""1903_changeDefaultWithdraw"" -> ""1903_onlyOwner"";
}
"
0x1dd6363c7f7a3150fb7ab13c29fe92f5bab23457.sol,CharityProject,"contract CharityProject is RBACManager { using SafeMath for uint256; modifier canWithdraw() { require( canWithdrawBeforeEnd || closingTime == 0 || block.timestamp > closingTime, ); _; }",1,"subgraph cluster_758_CharityProject {
label=""CharityProject"";
""758_constructor"" [label=""constructor""];
""758_setTimes"" [label=""setTimes""];
""758_setCanWithdrawBeforeEnd"" [label=""setCanWithdrawBeforeEnd""];
""758_hasClosed"" [label=""hasClosed""];
""758_hasStarted"" [label=""hasStarted""];
""758_withdrawTokens"" [label=""withdrawTokens""];
""758_maxGoalReached"" [label=""maxGoalReached""];
""758_setMaxGoal"" [label=""setMaxGoal""];
""758_totalRaised"" [label=""totalRaised""];
""758_maxGoalReached"" -> ""758_totalRaised"";
""758_withdrawTokens"" -> ""758_canWithdraw"";
""758_withdrawTokens"" -> ""758_onlyOwnerOrManager"";
""758_setMaxGoal"" -> ""758_onlyOwner"";
""758_setCanWithdrawBeforeEnd"" -> ""758_onlyOwner"";
""758_constructor"" -> ""758_addManager"";
""758_setTimes"" -> ""758_onlyOwner"";
}
"
0x486681bb877703e4385c8fe9688bff776cbc11c4.sol,Escapable,"contract Escapable is Owned { address public escapeHatchCaller; address public escapeHatchDestination; mapping (address=>bool) private escapeBlacklist; function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) { escapeHatchCaller = _escapeHatchCaller; escapeHatchDestination = _escapeHatchDestination; }",1,"subgraph cluster_1503_Escapable {
label=""Escapable"";
""1503_changeHatchEscapeCaller"" [label=""changeHatchEscapeCaller""];
""1503_Escapable"" [label=""Escapable""];
""1503_escapeHatch"" [label=""escapeHatch""];
""1503_blacklistEscapeToken"" [label=""blacklistEscapeToken""];
""1503_isTokenEscapable"" [label=""isTokenEscapable""];
""1503_escapeHatch"" -> ""1503_onlyEscapeHatchCallerOrOwner"";
""1503_changeHatchEscapeCaller"" -> ""1503_onlyEscapeHatchCallerOrOwner"";
}
"
0x0e54b1b8ff833b5f2b0d17453d97d340cb7576e4.sol,ERC223Token,"contract ERC223Token is IERC223, SafeMath { mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 35000000 * 10**8; function ERC223Token() { balances[msg.sender] = totalSupply; }",1,"subgraph cluster_534_ERC223Token {
label=""ERC223Token"";
""534_ERC223Token"" [label=""ERC223Token""];
""534_symbol"" [label=""symbol""];
""534_totalSupply"" [label=""totalSupply""];
""534_transferToAddress"" [label=""transferToAddress""];
""534_balanceOf"" [label=""balanceOf""];
""534_transferToContract"" [label=""transferToContract""];
""534_transfer"" [label=""transfer""];
""534_name"" [label=""name""];
""534_isContract"" [label=""isContract""];
""534_decimals"" [label=""decimals""];
""534_transfer"" -> ""534_safeAdd"";
""534_transferToContract"" -> ""534_safeAdd"";
""534_transferToAddress"" -> ""534_balanceOf"";
""534_transferToContract"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_safeSub"";
""534_transferToAddress"" -> ""534_safeSub"";
""534_transferToContract"" -> ""534_safeSub"";
""534_transfer"" -> ""534_transferToAddress"";
""534_transfer"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_transferToContract"";
""534_transfer"" -> ""534_isContract"";
""534_transferToAddress"" -> ""534_safeAdd"";
}
"
0xaa63c8683647ef91b3fdab4b4989ee9588da297b.sol,DSProxy,"contract DSProxy is DSAuth, DSNote { DSProxyCache public cache; function DSProxy(address _cacheAddr) public { require(setCache(_cacheAddr)); }",1,"subgraph cluster_390_DSProxyCache {
label=""DSProxyCache"";
""390_read"" [label=""read""];
""390_write"" [label=""write""];
}
"
0xef86db910c71ffa3c80233bc9108dc51ad1e008a.sol,CommonWallet,"contract CommonWallet { mapping(address => mapping (address => uint256)) public tokenBalance; mapping(address => uint) etherBalance; address owner = msg.sender; function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) { uint256 z = _x + _y; assert(z >= _x); return z; }",1,"subgraph cluster_387_CommonWallet {
label=""CommonWallet"";
""387_sendTokenTo"" [label=""sendTokenTo""];
""387_wdEther"" [label=""wdEther""];
""387_safeAdd"" [label=""safeAdd""];
""387_wdToken"" [label=""wdToken""];
""387_sendEtherTo"" [label=""sendEtherTo""];
""387_depoEther"" [label=""depoEther""];
""387_getEtherBalance"" [label=""getEtherBalance""];
""387_safeSub"" [label=""safeSub""];
""387_depoToken"" [label=""depoToken""];
""387_getTokenBalance"" [label=""getTokenBalance""];
""387_sendEtherTo"" -> ""387_safeSub"";
""387_wdEther"" -> ""387_safeSub"";
""387_wdToken"" -> ""387_safeSub"";
""387_depoToken"" -> ""387_safeAdd"";
""387_sendTokenTo"" -> ""387_safeSub"";
}
"
0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e.sol,UnicornRefunds,"contract UnicornRefunds { using SafeMath for uint; address public cardboardUnicornTokenAddress; address public unicornRanchAddress; address public owner = msg.sender; uint public pricePerUnicorn = 1 finney; uint public rewardUnicornAmount = 100; mapping(address => uint) allowedAmounts; mapping(address => bool) rewardClaimed; event RewardClaimed(address indexed _who, uint _bookingIndex); event UnicornsSold(address indexed _who, uint _unicornCount, uint _unicornCost, uint _paymentTotal); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_534_UnicornRefunds {
label=""UnicornRefunds"";
""534_sell"" [label=""sell""];
""534_changeRewardAmount"" [label=""changeRewardAmount""];
""534_changeOwner"" [label=""changeOwner""];
""534_changeUnicornRanchAddress"" [label=""changeUnicornRanchAddress""];
""534_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""534_claimReward"" [label=""claimReward""];
""534_withdraw"" [label=""withdraw""];
""534_changePricePerUnicorn"" [label=""changePricePerUnicorn""];
""534_fallback"" [label=""fallback""];
""534_setAllowance"" [label=""setAllowance""];
""534_changeCardboardUnicornTokenAddress"" [label=""changeCardboardUnicornTokenAddress""];
""534_changeOwner"" -> ""534_onlyOwner"";
""534_changeUnicornRanchAddress"" -> ""534_onlyOwner"";
""534_changeRewardAmount"" -> ""534_onlyOwner"";
""534_changePricePerUnicorn"" -> ""534_onlyOwner"";
""534_changeCardboardUnicornTokenAddress"" -> ""534_onlyOwner"";
""534_setAllowance"" -> ""534_onlyOwner"";
""534_withdraw"" -> ""534_onlyOwner"";
""534_withdrawForeignTokens"" -> ""534_onlyOwner"";
}
"
0x58c3069023ed736f430d585003715058c2e3c671.sol,BTCPayment,"contract BTCPayment is Ownable, PresaleFallbackReceiver { using SafeMath for uint256; PaymentFallbackReceiver public presale; PaymentFallbackReceiver public mainsale; event NewPayment(address _beneficiary, uint256 _tokens); function addPayment(address _beneficiary, uint256 _tokens) public onlyOwner { if (!presaleFallBackCalled) { presale.paymentFallBack(_beneficiary, _tokens); }",1,"subgraph cluster_619_BTCPayment {
label=""BTCPayment"";
""619_setMainsale"" [label=""setMainsale""];
""619_setPresale"" [label=""setPresale""];
""619_addPayment"" [label=""addPayment""];
""619_presaleFallBack"" [label=""presaleFallBack""];
""619_setPresale"" -> ""619_onlyOwner"";
""619_addPayment"" -> ""619_onlyOwner"";
""619_setMainsale"" -> ""619_onlyOwner"";
}
"
0x5a6d9a69408ce19df15eb40347ded3028a77fcca.sol,EthicHubLending,"contract EthicHubLending is EthicHubBase, Ownable, Pausable { using SafeMath for uint256; enum LendingState { Uninitialized, AcceptingContributions, ExchangingToFiat, AwaitingReturn, ProjectNotFunded, ContributionReturned, Default }",1,"subgraph cluster_2464_EthicHubLending {
label=""EthicHubLending"";
""2464_getMaxDelayDays"" [label=""getMaxDelayDays""];
""2464_reclaimLeftoverEth"" [label=""reclaimLeftoverEth""];
""2464_saveInitialParametersToStorage"" [label=""saveInitialParametersToStorage""];
""2464_calculatePaymentGoal"" [label=""calculatePaymentGoal""];
""2464_declareProjectNotFunded"" [label=""declareProjectNotFunded""];
""2464_sendFundsToBorrower"" [label=""sendFundsToBorrower""];
""2464_setBorrower"" [label=""setBorrower""];
""2464_contributeForAddress"" [label=""contributeForAddress""];
""2464_reclaimLocalNodeFee"" [label=""reclaimLocalNodeFee""];
""2464_doReclaim"" [label=""doReclaim""];
""2464_reclaimSurplusEth"" [label=""reclaimSurplusEth""];
""2464_reclaimEthicHubTeamFee"" [label=""reclaimEthicHubTeamFee""];
""2464_getUserContributionReclaimStatus"" [label=""getUserContributionReclaimStatus""];
""2464_getDelayDays"" [label=""getDelayDays""];
""2464_declareProjectDefault"" [label=""declareProjectDefault""];
""2464_constructor"" [label=""constructor""];
""2464_checkInvestorReturns"" [label=""checkInvestorReturns""];
""2464_contributeWithAddress"" [label=""contributeWithAddress""];
""2464_returnBorrowedEth"" [label=""returnBorrowedEth""];
""2464_borrowerReturnFiatAmount"" [label=""borrowerReturnFiatAmount""];
""2464_setBorrowerReturnEthPerFiatRate"" [label=""setBorrowerReturnEthPerFiatRate""];
""2464_isContribPeriodRunning"" [label=""isContribPeriodRunning""];
""2464_reclaimContributionDefault"" [label=""reclaimContributionDefault""];
""2464_changeInvestorAddress"" [label=""changeInvestorAddress""];
""2464_fallback"" [label=""fallback""];
""2464_checkInvestorContribution"" [label=""checkInvestorContribution""];
""2464_sendBackSurplusEth"" [label=""sendBackSurplusEth""];
""2464_reclaimContribution"" [label=""reclaimContribution""];
""2464_investorInterest"" [label=""investorInterest""];
""2464_reclaimContributionWithInterest"" [label=""reclaimContributionWithInterest""];
""2464_lendingInterestRatePercentage"" [label=""lendingInterestRatePercentage""];
""2464_finishInitialExchangingPeriod"" [label=""finishInitialExchangingPeriod""];
""2464_borrowerReturnAmount"" [label=""borrowerReturnAmount""];
""2464_updateReputation"" [label=""updateReputation""];
""2464_borrowerReturnFiatAmount"" -> ""2464_lendingInterestRatePercentage"";
""2464_borrowerReturnAmount"" -> ""2464_borrowerReturnFiatAmount"";
""2464_reclaimSurplusEth"" -> ""2464_doReclaim"";
""2464_setBorrowerReturnEthPerFiatRate"" -> ""2464_onlyOwnerOrLocalNode"";
""2464_reclaimLeftoverEth"" -> ""2464_checkIfArbiter"";
""2464_investorInterest"" -> ""2464_getDelayDays"";
""2464_contributeForAddress"" -> ""2464_whenNotPaused"";
""2464_declareProjectDefault"" -> ""2464_onlyOwnerOrLocalNode"";
""2464_returnBorrowedEth"" -> ""2464_borrowerReturnAmount"";
""2464_reclaimContributionDefault"" -> ""2464_doReclaim"";
""2464_contributeForAddress"" -> ""2464_contributeWithAddress"";
""2464_returnBorrowedEth"" -> ""2464_calculatePaymentGoal"";
""2464_reclaimContributionWithInterest"" -> ""2464_checkInvestorReturns"";
""2464_declareProjectDefault"" -> ""2464_getMaxDelayDays"";
""2464_declareProjectNotFunded"" -> ""2464_onlyOwnerOrLocalNode"";
""2464_reclaimLocalNodeFee"" -> ""2464_doReclaim"";
""2464_contributeWithAddress"" -> ""2464_calculatePaymentGoal"";
""2464_contributeWithAddress"" -> ""2464_isContribPeriodRunning"";
""2464_fallback"" -> ""2464_returnBorrowedEth"";
""2464_lendingInterestRatePercentage"" -> ""2464_getDelayDays"";
""2464_fallback"" -> ""2464_sendBackSurplusEth"";
""2464_sendFundsToBorrower"" -> ""2464_onlyOwnerOrLocalNode"";
""2464_reclaimContribution"" -> ""2464_doReclaim"";
""2464_constructor"" -> ""2464_constructor"";
""2464_contributeWithAddress"" -> ""2464_whenNotPaused"";
""2464_setBorrower"" -> ""2464_checkIfArbiter"";
""2464_fallback"" -> ""2464_whenNotPaused"";
""2464_checkInvestorReturns"" -> ""2464_investorInterest"";
""2464_reclaimContributionDefault"" -> ""2464_checkInvestorReturns"";
""2464_reclaimEthicHubTeamFee"" -> ""2464_doReclaim"";
""2464_reclaimContributionWithInterest"" -> ""2464_doReclaim"";
""2464_changeInvestorAddress"" -> ""2464_checkIfArbiter"";
""2464_fallback"" -> ""2464_contributeWithAddress"";
""2464_declareProjectDefault"" -> ""2464_getDelayDays"";
""2464_saveInitialParametersToStorage"" -> ""2464_onlyOwnerOrLocalNode"";
""2464_finishInitialExchangingPeriod"" -> ""2464_onlyOwnerOrLocalNode"";
""2464_reclaimLeftoverEth"" -> ""2464_doReclaim"";
""2464_returnBorrowedEth"" -> ""2464_updateReputation"";
""2464_contributeForAddress"" -> ""2464_checkProfileRegistered"";
""2464_updateReputation"" -> ""2464_getDelayDays"";
}
"
0x750c1d91864171d7e1715a6b53ee28c72b8faa09.sol,EthicHubUser,"contract EthicHubUser is Ownable, EthicHubBase { event UserStatusChanged(address target, string profile, bool isRegistered); constructor(address _storageAddress) EthicHubBase(_storageAddress) public { version = 3; }",1,"subgraph cluster_660_EthicHubUser {
label=""EthicHubUser"";
""660_deleteUserStatus"" [label=""deleteUserStatus""];
""660_registerPaymentGateway"" [label=""registerPaymentGateway""];
""660_registerLocalNode"" [label=""registerLocalNode""];
""660_unregisterLocalNode"" [label=""unregisterLocalNode""];
""660_registerRepresentative"" [label=""registerRepresentative""];
""660_constructor"" [label=""constructor""];
""660_unregisterPaymentGateway"" [label=""unregisterPaymentGateway""];
""660_changeUserStatus"" [label=""changeUserStatus""];
""660_unregisterCommunity"" [label=""unregisterCommunity""];
""660_unregisterRepresentative"" [label=""unregisterRepresentative""];
""660_unregisterInvestor"" [label=""unregisterInvestor""];
""660_registerInvestor"" [label=""registerInvestor""];
""660_viewRegistrationStatus"" [label=""viewRegistrationStatus""];
""660_registerCommunity"" [label=""registerCommunity""];
""660_unregisterCommunity"" -> ""660_onlyOwner"";
""660_registerLocalNode"" -> ""660_changeUserStatus"";
""660_constructor"" -> ""660_constructor"";
""660_registerInvestor"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_deleteUserStatus"";
""660_unregisterLocalNode"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_onlyOwner"";
""660_unregisterRepresentative"" -> ""660_onlyOwner"";
""660_registerCommunity"" -> ""660_changeUserStatus"";
""660_registerLocalNode"" -> ""660_onlyOwner"";
""660_unregisterLocalNode"" -> ""660_deleteUserStatus"";
""660_registerCommunity"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_onlyOwner"";
""660_registerRepresentative"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_deleteUserStatus"";
""660_unregisterCommunity"" -> ""660_deleteUserStatus"";
""660_unregisterRepresentative"" -> ""660_deleteUserStatus"";
""660_deleteUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_changeUserStatus"";
""660_registerRepresentative"" -> ""660_changeUserStatus"";
""660_changeUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_onlyOwner"";
""660_registerInvestor"" -> ""660_changeUserStatus"";
}
"
0x330bebabc9a2a4136e3d1cb38ca521f5a95aec2e.sol,KoreaShow,"contract KoreaShow is TokenController, Controlled { using SafeMath for uint256; uint256 public startFundingTime; uint256 public endFundingTime; uint256 constant public maximumFunding = 100 ether; uint256 public tokensPerEther = 31000; uint256 constant oneDay = 86400; uint256 public totalCollected = 0; bool public paused; string public techProvider = ; Token public tokenContract; bool public finalized = false; bool public allowChange = true; bool private transfersEnabled = true; address private vaultAddress; bool private initialed = false; event Payment(address indexed _sender, uint256 _ethAmount, uint256 _tokenAmount); function KoreaShow( uint _startFundingTime, uint _endFundingTime, address _vaultAddress, address _tokenAddress ) public { require(_endFundingTime > now); require(_endFundingTime >= _startFundingTime); require(_vaultAddress != 0); require(_tokenAddress != 0); require(!initialed); startFundingTime = _startFundingTime; endFundingTime = _endFundingTime; vaultAddress = _vaultAddress; tokenContract = Token(_tokenAddress); paused = false; initialed = true; }",1,"subgraph cluster_1713_KoreaShow {
label=""KoreaShow"";
""1713_pauseContribution"" [label=""pauseContribution""];
""1713_claimTokens"" [label=""claimTokens""];
""1713_KoreaShow"" [label=""KoreaShow""];
""1713_fallback"" [label=""fallback""];
""1713_changeToken"" [label=""changeToken""];
""1713_allowTransfersEnabled"" [label=""allowTransfersEnabled""];
""1713_proxyPayment"" [label=""proxyPayment""];
""1713_doPayment"" [label=""doPayment""];
""1713_finalizeSale"" [label=""finalizeSale""];
""1713_resumeContribution"" [label=""resumeContribution""];
""1713_setTime"" [label=""setTime""];
""1713_isContract"" [label=""isContract""];
""1713_onApprove"" [label=""onApprove""];
""1713_onTransfer"" [label=""onTransfer""];
""1713_changeTokenController"" [label=""changeTokenController""];
""1713_changeTokensPerEther"" [label=""changeTokensPerEther""];
""1713_setTime"" -> ""1713_onlyController"";
""1713_proxyPayment"" -> ""1713_notPaused"";
""1713_claimTokens"" -> ""1713_onlyController"";
""1713_changeToken"" -> ""1713_onlyController"";
""1713_pauseContribution"" -> ""1713_onlyController"";
""1713_changeTokenController"" -> ""1713_onlyController"";
""1713_fallback"" -> ""1713_notPaused"";
""1713_changeTokensPerEther"" -> ""1713_onlyController"";
""1713_proxyPayment"" -> ""1713_doPayment"";
""1713_resumeContribution"" -> ""1713_onlyController"";
""1713_finalizeSale"" -> ""1713_onlyController"";
""1713_fallback"" -> ""1713_doPayment"";
""1713_allowTransfersEnabled"" -> ""1713_onlyController"";
}
"
0x025dce2d39a46296766db7cac8c322e8f59cd5d9.sol,EthToSmthSwaps,contract EthToSmthSwaps { using SafeMath for uint; address public owner; address public ratingContractAddress; uint256 SafeTime = 1 hours; struct Swap { bytes32 secret; bytes20 secretHash; uint256 createdAt; uint256 balance; },1,"subgraph cluster_679_EthToSmthSwaps {
label=""EthToSmthSwaps"";
""679_withdr"" [label=""withdr""];
""679_withdraw"" [label=""withdraw""];
""679_getSecret"" [label=""getSecret""];
""679_close"" [label=""close""];
""679_abort"" [label=""abort""];
""679_checkSign"" [label=""checkSign""];
""679_clean"" [label=""clean""];
""679_getBalance"" [label=""getBalance""];
""679_sign"" [label=""sign""];
""679_setReputationAddress"" [label=""setReputationAddress""];
""679_createSwap"" [label=""createSwap""];
""679_refund"" [label=""refund""];
""679_constructor"" [label=""constructor""];
""679_abort"" -> ""679_clean"";
""679_refund"" -> ""679_clean"";
""679_close"" -> ""679_clean"";
}
"
0x486cf19a550e2814aef970b14e509e93209a0151.sol,EventChainCrowdsale,"contract EventChainCrowdsale is Haltable { using SafeMath for uint256; enum State{Preparing, Prepared, Presale, Phase1, Phase2, Closed}",1,"subgraph cluster_1228_EventChainCrowdsale {
label=""EventChainCrowdsale"";
""1228_closeCrowdsale"" [label=""closeCrowdsale""];
""1228_startPhase2"" [label=""startPhase2""];
""1228_startPresale"" [label=""startPresale""];
""1228_EventChainCrowdsale"" [label=""EventChainCrowdsale""];
""1228_fallback"" [label=""fallback""];
""1228_mintFounderTokens"" [label=""mintFounderTokens""];
""1228_startPhase1"" [label=""startPhase1""];
""1228_currentStateToString"" [label=""currentStateToString""];
""1228_closeCrowdsale"" -> ""1228_inState"";
""1228_startPresale"" -> ""1228_inState"";
""1228_fallback"" -> ""1228_onlyWhenCrowdsaleIsOpen"";
""1228_fallback"" -> ""1228_requiresMinimumInvest"";
""1228_fallback"" -> ""1228_currentStateToString"";
""1228_startPhase1"" -> ""1228_onlyOwner"";
""1228_mintFounderTokens"" -> ""1228_inState"";
""1228_fallback"" -> ""1228_stopInEmergency"";
""1228_mintFounderTokens"" -> ""1228_onlyOwner"";
""1228_startPhase2"" -> ""1228_onlyOwner"";
""1228_closeCrowdsale"" -> ""1228_onlyOwner"";
""1228_startPhase2"" -> ""1228_inState"";
""1228_startPresale"" -> ""1228_onlyOwner"";
""1228_startPhase1"" -> ""1228_inState"";
}
"
0x020ddc98365d0199b4c7a2d769d685480789f67e.sol,EOSclassic,"contract EOSclassic is StandardToken, HasNoEther { string public constant NAME = ; string public constant SYMBOL = ; uint8 public constant DECIMALS = 18; uint public constant TOTAL_SUPPLY = 1000000000 * (10 ** uint(DECIMALS)); uint public constant foundersAllocation = 100000000 * (10 ** uint(DECIMALS)); address public constant eosTokenAddress = 0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0; address public constant eosCrowdsaleAddress = 0xd0a6E6C54DbC68Db5db3A091B171A77407Ff7ccf; mapping (address => string) public keys; mapping (address => bool) public eosClassicClaimed; event LogClaim (address user, uint amount); event LogRegister (address user, string key); constructor() public { totalSupply_ = TOTAL_SUPPLY; balances[address(this)] = TOTAL_SUPPLY; emit Transfer(0x0, address(this), TOTAL_SUPPLY); balances[address(this)] = balances[address(this)].sub(foundersAllocation); balances[msg.sender] = balances[msg.sender].add(foundersAllocation); emit Transfer(address(this), msg.sender, foundersAllocation); }",1,"subgraph cluster_947_EOSclassic {
label=""EOSclassic"";
""947_queryEOSTokenBalance"" [label=""queryEOSTokenBalance""];
""947_constructor"" [label=""constructor""];
""947_register"" [label=""register""];
""947_getEOSKeyFor"" [label=""getEOSKeyFor""];
""947_isClaimed"" [label=""isClaimed""];
""947_getMyEOSKey"" [label=""getMyEOSKey""];
""947_queryEOSCrowdsaleKey"" [label=""queryEOSCrowdsaleKey""];
""947_claimEOSclassicFor"" [label=""claimEOSclassicFor""];
""947_claimEOSclassic"" [label=""claimEOSclassic""];
""947_claimEOSclassic"" -> ""947_claimEOSclassicFor"";
""947_claimEOSclassicFor"" -> ""947_queryEOSTokenBalance"";
""947_getEOSKeyFor"" -> ""947_queryEOSCrowdsaleKey"";
""947_claimEOSclassicFor"" -> ""947_isClaimed"";
""947_getMyEOSKey"" -> ""947_getEOSKeyFor"";
}
"
0x486681bb877703e4385c8fe9688bff776cbc11c4.sol,Escapable,"contract Escapable is Owned { address public escapeHatchCaller; address public escapeHatchDestination; mapping (address=>bool) private escapeBlacklist; function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) { escapeHatchCaller = _escapeHatchCaller; escapeHatchDestination = _escapeHatchDestination; }",1,"subgraph cluster_1503_Escapable {
label=""Escapable"";
""1503_changeHatchEscapeCaller"" [label=""changeHatchEscapeCaller""];
""1503_Escapable"" [label=""Escapable""];
""1503_escapeHatch"" [label=""escapeHatch""];
""1503_blacklistEscapeToken"" [label=""blacklistEscapeToken""];
""1503_isTokenEscapable"" [label=""isTokenEscapable""];
""1503_escapeHatch"" -> ""1503_onlyEscapeHatchCallerOrOwner"";
""1503_changeHatchEscapeCaller"" -> ""1503_onlyEscapeHatchCallerOrOwner"";
}
"
0x4d2d7ea45162b91f0e584463ed2afb54ca558cb4.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; address public wallet; address public addressOfTokenUsedAsReward; uint256 public price = 2000; token tokenReward; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); constructor () public { wallet = 0x9F1D5D27c7FD3EaB394b65B6c06e4Ef22F333210; addressOfTokenUsedAsReward = 0x4bF62424385ddcD858535cAa1878e512314a9Aeb; tokenReward = token(addressOfTokenUsedAsReward); }",1,"subgraph cluster_327_Crowdsale {
label=""Crowdsale"";
""327_fallback"" [label=""fallback""];
""327_buyTokens"" [label=""buyTokens""];
""327_constructor"" [label=""constructor""];
""327_forwardFunds"" [label=""forwardFunds""];
""327_stopSale"" [label=""stopSale""];
""327_changeWallet"" [label=""changeWallet""];
""327_startSale"" [label=""startSale""];
""327_setPrice"" [label=""setPrice""];
""327_withdrawTokens"" [label=""withdrawTokens""];
""327_validPurchase"" [label=""validPurchase""];
""327_buyTokens"" -> ""327_validPurchase"";
""327_buyTokens"" -> ""327_forwardFunds"";
""327_fallback"" -> ""327_buyTokens"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,GoldBackedToken,"contract GoldBackedToken is Ownable, SafeMath, ERC20, Pausable { event Transfer(address indexed from, address indexed to, uint value); event Approval(address indexed owner, address indexed spender, uint value); event DeductFees(address indexed owner,uint256 amount); event TokenMinted(address destination, uint256 amount); event TokenBurned(address source, uint256 amount); string public name = ; string public symbol = ; uint256 constant public decimals = 18; uint256 constant public hgtDecimals = 8; uint256 constant public allocationPool = 1 * 10**9 * 10**hgtDecimals; uint256 constant public maxAllocation = 38 * 10**5 * 10**decimals; uint256 public totAllocation; address public feeCalculator; address public HGT; function setFeeCalculator(address newFC) onlyOwner { feeCalculator = newFC; }",1,"subgraph cluster_2164_GoldBackedToken {
label=""GoldBackedToken"";
""2164_update"" [label=""update""];
""2164_mintTokens"" [label=""mintTokens""];
""2164_updatedBalance"" [label=""updatedBalance""];
""2164_balanceOf"" [label=""balanceOf""];
""2164_GoldBackedToken"" [label=""GoldBackedToken""];
""2164_calcFees"" [label=""calcFees""];
""2164_burnTokens"" [label=""burnTokens""];
""2164_approve"" [label=""approve""];
""2164_addAllocationPartOne"" [label=""addAllocationPartOne""];
""2164_allowance"" [label=""allowance""];
""2164_transfer"" [label=""transfer""];
""2164_addAllocationPartTwo"" [label=""addAllocationPartTwo""];
""2164_setHGT"" [label=""setHGT""];
""2164_setMinter"" [label=""setMinter""];
""2164_aotLength"" [label=""aotLength""];
""2164_parentFees"" [label=""parentFees""];
""2164_parentChange"" [label=""parentChange""];
""2164_currentAllocationLength"" [label=""currentAllocationLength""];
""2164_setFeeCalculator"" [label=""setFeeCalculator""];
""2164_transferFrom"" [label=""transferFrom""];
""2164_partAllocationLength"" [label=""partAllocationLength""];
""2164_mintTokens"" -> ""2164_update"";
""2164_mintTokens"" -> ""2164_safeAdd"";
""2164_approve"" -> ""2164_whenNotPaused"";
""2164_transfer"" -> ""2164_safeAdd"";
""2164_transfer"" -> ""2164_update"";
""2164_transferFrom"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartTwo"" -> ""2164_calcFees"";
""2164_transfer"" -> ""2164_safeSub"";
""2164_setFeeCalculator"" -> ""2164_onlyOwner"";
""2164_parentChange"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartTwo"" -> ""2164_onlyOwner"";
""2164_setHGT"" -> ""2164_onlyOwner"";
""2164_addAllocationPartOne"" -> ""2164_onlyOwner"";
""2164_transfer"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartOne"" -> ""2164_calcFees"";
""2164_update"" -> ""2164_updatedBalance"";
""2164_parentFees"" -> ""2164_whenNotPaused"";
""2164_transferFrom"" -> ""2164_update"";
""2164_updatedBalance"" -> ""2164_calcFees"";
""2164_burnTokens"" -> ""2164_safeSub"";
""2164_burnTokens"" -> ""2164_update"";
""2164_transferFrom"" -> ""2164_safeAdd"";
""2164_transferFrom"" -> ""2164_safeSub"";
""2164_parentFees"" -> ""2164_update"";
""2164_balanceOf"" -> ""2164_updatedBalance"";
""2164_setMinter"" -> ""2164_onlyOwner"";
}
"
0x1b6c5864375b34af3ff5bd2e5f40bc425b4a8d79.sol,TopChainCoinDistribution,"contract TopChainCoinDistribution is Ownable, Authorizable { using SafeMath for uint; event AuthorizedCreateToPrivate(address recipient, uint pay_amount); event GameMining(address recipient, uint pay_amount); event CreateTokenToTeam(address recipient, uint pay_amount); event CreateTokenToMarket(address recipient, uint pay_amount); event CreateTokenToOperation(address recipient, uint pay_amount); event TopChainCoinMintFinished(); TopChainCoin public token = new TopChainCoin(); DateTime internal dateTime = new DateTime(); uint totalToken = 2100000000 * (10 ** 6); uint public privateTokenCap = 210000000 * (10 ** 6); uint public marketToken = 315000000 * (10 ** 6); uint public operationToken = 210000000 * (10 ** 6); uint public gameMiningTokenCap = 1155000000 * (10 ** 6); uint public teamToken2018 = 105000000 * (10 ** 6); uint public teamToken2019 = 105000000 * (10 ** 6); uint public privateToken = 0; address public teamAddress; address public operationAddress; address public marketAddress; bool public team2018TokenCreated = false; bool public team2019TokenCreated = false; bool public operationTokenCreated = false; bool public marketTokenCreated = false; mapping(uint16 => uint) public gameMiningToken; uint public firstYearGameMiningTokenCap = 577500000 * (10 ** 6); uint public gameMiningTokenStartTime = 1514736000; function isContract(address _addr) internal view returns(bool) { uint size; if (_addr == 0) return false; assembly { size := extcodesize(_addr) }",1,"subgraph cluster_2129_TopChainCoinDistribution {
label=""TopChainCoinDistribution"";
""2129_setOperationAddress"" [label=""setOperationAddress""];
""2129_gameMining"" [label=""gameMining""];
""2129_fallback"" [label=""fallback""];
""2129_setMarketAddress"" [label=""setMarketAddress""];
""2129__createTokenToTeam"" [label=""_createTokenToTeam""];
""2129_createTokenToTeam"" [label=""createTokenToTeam""];
""2129_createTokenToOperation"" [label=""createTokenToOperation""];
""2129_getCurrentYearGameMiningTokenCap"" [label=""getCurrentYearGameMiningTokenCap""];
""2129_getCurrentYearGameMiningRemainToken"" [label=""getCurrentYearGameMiningRemainToken""];
""2129_createTokenToMarket"" [label=""createTokenToMarket""];
""2129_finishMinting"" [label=""finishMinting""];
""2129_setTeamAddress"" [label=""setTeamAddress""];
""2129_isContract"" [label=""isContract""];
""2129_authorizedCreateTokensToPrivate"" [label=""authorizedCreateTokensToPrivate""];
""2129_authorizedCreateTokensToPrivate"" -> ""2129_onlyAuthorized"";
""2129_setMarketAddress"" -> ""2129_onlyAuthorized"";
""2129_setTeamAddress"" -> ""2129_onlyAuthorized"";
""2129_setOperationAddress"" -> ""2129_onlyAuthorized"";
""2129_createTokenToOperation"" -> ""2129_onlyAuthorized"";
""2129_createTokenToMarket"" -> ""2129_onlyAuthorized"";
""2129_createTokenToTeam"" -> ""2129__createTokenToTeam"";
""2129_gameMining"" -> ""2129_onlyAuthorized"";
""2129_finishMinting"" -> ""2129_onlyOwner"";
""2129_createTokenToTeam"" -> ""2129_onlyAuthorized"";
""2129_gameMining"" -> ""2129_getCurrentYearGameMiningRemainToken"";
""2129_getCurrentYearGameMiningRemainToken"" -> ""2129_getCurrentYearGameMiningTokenCap"";
}
"
0x182f2b554462230735699df74ec9606a3c4c0684.sol,BookERC20EthV1Dec,contract BookERC20EthV1Dec { enum BookType { ERC20EthV1 },1,"subgraph cluster_3343_BookERC20EthV1Dec {
label=""BookERC20EthV1Dec"";
""3343_cancelOrder"" [label=""cancelOrder""];
""3343_sumDepth"" [label=""sumDepth""];
""3343_transferFromBase"" [label=""transferFromBase""];
""3343_getOrderState"" [label=""getOrderState""];
""3343_debitFunds"" [label=""debitFunds""];
""3343_walkBook"" [label=""walkBook""];
""3343_init"" [label=""init""];
""3343_refundUnmatchedAndFinish"" [label=""refundUnmatchedAndFinish""];
""3343_withdrawCntr"" [label=""withdrawCntr""];
""3343_walkClientOrders"" [label=""walkClientOrders""];
""3343_transferFromRwrd"" [label=""transferFromRwrd""];
""3343_continueOrder"" [label=""continueOrder""];
""3343_processOrder"" [label=""processOrder""];
""3343_matchWithTheirs"" [label=""matchWithTheirs""];
""3343_computeCntrAmountUsingUnpacked"" [label=""computeCntrAmountUsingUnpacked""];
""3343_transferBase"" [label=""transferBase""];
""3343_matchAgainstBook"" [label=""matchAgainstBook""];
""3343_transferRwrd"" [label=""transferRwrd""];
""3343_changeFeeCollector"" [label=""changeFeeCollector""];
""3343_createOrder"" [label=""createOrder""];
""3343_getOrder"" [label=""getOrder""];
""3343_computeOppositePrice"" [label=""computeOppositePrice""];
""3343_isBuyPrice"" [label=""isBuyPrice""];
""3343_computeCntrAmountUsingPacked"" [label=""computeCntrAmountUsingPacked""];
""3343_BookERC20EthV1Dec"" [label=""BookERC20EthV1Dec""];
""3343_matchWithOccupiedPrice"" [label=""matchWithOccupiedPrice""];
""3343_creditExecutedFundsLessFees"" [label=""creditExecutedFundsLessFees""];
""3343_enterOrder"" [label=""enterOrder""];
""3343_removeOpenOrderFromBook"" [label=""removeOpenOrderFromBook""];
""3343_depositCntr"" [label=""depositCntr""];
""3343_getBookInfo"" [label=""getBookInfo""];
""3343_getClientBalances"" [label=""getClientBalances""];
""3343_recordTheirMatch"" [label=""recordTheirMatch""];
""3343_unpackPrice"" [label=""unpackPrice""];
""3343_matchWithTheirs"" -> ""3343_recordTheirMatch"";
""3343_processOrder"" -> ""3343_enterOrder"";
""3343_walkBook"" -> ""3343_isBuyPrice"";
""3343_recordTheirMatch"" -> ""3343_refundUnmatchedAndFinish"";
""3343_computeCntrAmountUsingPacked"" -> ""3343_computeCntrAmountUsingUnpacked"";
""3343_computeCntrAmountUsingPacked"" -> ""3343_unpackPrice"";
""3343_processOrder"" -> ""3343_unpackPrice"";
""3343_refundUnmatchedAndFinish"" -> ""3343_computeCntrAmountUsingPacked"";
""3343_createOrder"" -> ""3343_unpackPrice"";
""3343_createOrder"" -> ""3343_processOrder"";
""3343_processOrder"" -> ""3343_computeOppositePrice"";
""3343_createOrder"" -> ""3343_computeCntrAmountUsingUnpacked"";
""3343_createOrder"" -> ""3343_debitFunds"";
""3343_matchAgainstBook"" -> ""3343_matchWithOccupiedPrice"";
""3343_matchWithOccupiedPrice"" -> ""3343_matchWithTheirs"";
""3343_processOrder"" -> ""3343_refundUnmatchedAndFinish"";
""3343_matchWithTheirs"" -> ""3343_computeCntrAmountUsingPacked"";
""3343_recordTheirMatch"" -> ""3343_isBuyPrice"";
""3343_continueOrder"" -> ""3343_processOrder"";
""3343_processOrder"" -> ""3343_matchAgainstBook"";
""3343_cancelOrder"" -> ""3343_removeOpenOrderFromBook"";
""3343_processOrder"" -> ""3343_creditExecutedFundsLessFees"";
""3343_walkBook"" -> ""3343_sumDepth"";
""3343_cancelOrder"" -> ""3343_refundUnmatchedAndFinish"";
""3343_creditExecutedFundsLessFees"" -> ""3343_isBuyPrice"";
""3343_refundUnmatchedAndFinish"" -> ""3343_isBuyPrice"";
}
"
0x402fa04ccd2c2568e1a53dbecec1bd572303663a.sol,HarborPresale,"contract HarborPresale is Haltable { using SafeMath for uint256; HarborToken public token; uint256 public startTime; uint256 public endTime; address public wallet; uint256 public rate; uint256 public weiRaised; uint256 public cap; bool public isFinalized = false; uint256 public minimumFundingGoal; uint256 public minSend; RefundVault public vault; uint public tokensMinted; mapping (address => uint256) public tokenDeposited; event Finalized(); event TokenMinted(uint count); event Distributed(address investor, uint tokenAmount); event PeriodChanged(uint256 starttm,uint256 endtm); event TokenPurchase(address indexed purchaser, address indexed investor, uint256 value); function HarborPresale(address _token, uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap, uint256 _minimumFundingGoal, uint256 _minSend) { require(_startTime >= now); require(_endTime >= _startTime); require(_rate > 0); require(_wallet != 0x0); require(_cap > 0); require(_minimumFundingGoal > 0); token = HarborToken(_token); startTime = _startTime; endTime = _endTime; rate = _rate; wallet = _wallet; cap = _cap; vault = new RefundVault(_wallet); minimumFundingGoal = _minimumFundingGoal; minSend = _minSend; }",1,"subgraph cluster_1508_HarborPresale {
label=""HarborPresale"";
""1508_finalize"" [label=""finalize""];
""1508_minFundingGoalReached"" [label=""minFundingGoalReached""];
""1508_fallback"" [label=""fallback""];
""1508_claimTokenAddress"" [label=""claimTokenAddress""];
""1508_HarborPresale"" [label=""HarborPresale""];
""1508_claimRefund"" [label=""claimRefund""];
""1508_withdrawFund"" [label=""withdrawFund""];
""1508_claimToken"" [label=""claimToken""];
""1508_hasEnded"" [label=""hasEnded""];
""1508_finalization"" [label=""finalization""];
""1508_mintForEverybody"" [label=""mintForEverybody""];
""1508_setPeriod"" [label=""setPeriod""];
""1508_validPurchase"" [label=""validPurchase""];
""1508_buyTokens"" [label=""buyTokens""];
""1508_claimRefund"" -> ""1508_stopInEmergency"";
""1508_claimRefund"" -> ""1508_minFundingGoalReached"";
""1508_finalize"" -> ""1508_hasEnded"";
""1508_finalization"" -> ""1508_minFundingGoalReached"";
""1508_claimToken"" -> ""1508_stopInEmergency"";
""1508_buyTokens"" -> ""1508_validPurchase"";
""1508_fallback"" -> ""1508_buyTokens"";
""1508_claimToken"" -> ""1508_claimTokenAddress"";
""1508_finalize"" -> ""1508_stopInEmergency"";
""1508_mintForEverybody"" -> ""1508_onlyOwner"";
""1508_claimTokenAddress"" -> ""1508_stopInEmergency"";
""1508_setPeriod"" -> ""1508_onlyOwner"";
""1508_buyTokens"" -> ""1508_stopInEmergency"";
""1508_finalize"" -> ""1508_finalization"";
""1508_withdrawFund"" -> ""1508_onlyOwner"";
""1508_withdrawFund"" -> ""1508_minFundingGoalReached"";
""1508_finalize"" -> ""1508_onlyOwner"";
}
"
0x6faff25ef78e39c518687b0dd19113f9b29ac562.sol,ETHedgeToken,contract ETHedgeToken { modifier onlyBagholders { require(myTokens() > 0); _; },1,"subgraph cluster_1798_ETHedgeToken {
label=""ETHedgeToken"";
""1798_sellPrice"" [label=""sellPrice""];
""1798_fallback"" [label=""fallback""];
""1798_balanceOf"" [label=""balanceOf""];
""1798_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1798_buyPrice"" [label=""buyPrice""];
""1798_transfer"" [label=""transfer""];
""1798_exit"" [label=""exit""];
""1798_withdraw"" [label=""withdraw""];
""1798_purchaseTokens"" [label=""purchaseTokens""];
""1798_totalSupply"" [label=""totalSupply""];
""1798_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1798_sqrt"" [label=""sqrt""];
""1798_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1798_payDividends"" [label=""payDividends""];
""1798_transferOwnership"" [label=""transferOwnership""];
""1798_dividendsOf"" [label=""dividendsOf""];
""1798_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1798_allowance"" [label=""allowance""];
""1798_takeCapital"" [label=""takeCapital""];
""1798_buy"" [label=""buy""];
""1798_changeOuts"" [label=""changeOuts""];
""1798_payDivsValue"" [label=""payDivsValue""];
""1798_myDividends"" [label=""myDividends""];
""1798_approve"" [label=""approve""];
""1798_myTokens"" [label=""myTokens""];
""1798_reinvest"" [label=""reinvest""];
""1798_transferFrom"" [label=""transferFrom""];
""1798_burn"" [label=""burn""];
""1798_sell"" [label=""sell""];
""1798_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1798_refferedBy"" [label=""refferedBy""];
""1798_exit"" -> ""1798_withdraw"";
""1798_sellPrice"" -> ""1798_tokensToEthereum_"";
""1798_calculateTokensReceived"" -> ""1798_ethereumToTokens_"";
""1798_sell"" -> ""1798_onlyBagholders"";
""1798_payDividends"" -> ""1798_payDivsValue"";
""1798_fallback"" -> ""1798_withdraw"";
""1798_transfer"" -> ""1798_withdraw"";
""1798_transfer"" -> ""1798_myDividends"";
""1798_changeOuts"" -> ""1798_onlyOwner"";
""1798_reinvest"" -> ""1798_purchaseTokens"";
""1798_sell"" -> ""1798_buyPrice"";
""1798_burn"" -> ""1798_payDivsValue"";
""1798_myDividends"" -> ""1798_dividendsOf"";
""1798_transfer"" -> ""1798_tokensToEthereum_"";
""1798_purchaseTokens"" -> ""1798_takeCapital"";
""1798_exit"" -> ""1798_sell"";
""1798_burn"" -> ""1798_dividendsOf"";
""1798_withdraw"" -> ""1798_myDividends"";
""1798_reinvest"" -> ""1798_onlyStronghands"";
""1798_purchaseTokens"" -> ""1798_ethereumToTokens_"";
""1798_fallback"" -> ""1798_purchaseTokens"";
""1798_withdraw"" -> ""1798_onlyStronghands"";
""1798_fallback"" -> ""1798_reinvest"";
""1798_burn"" -> ""1798_sell"";
""1798_transfer"" -> ""1798_onlyBagholders"";
""1798_buyPrice"" -> ""1798_tokensToEthereum_"";
""1798_transferOwnership"" -> ""1798_onlyOwner"";
""1798_myTokens"" -> ""1798_balanceOf"";
""1798_purchaseTokens"" -> ""1798_buyPrice"";
""1798_ethereumToTokens_"" -> ""1798_sqrt"";
""1798_fallback"" -> ""1798_exit"";
""1798_sell"" -> ""1798_tokensToEthereum_"";
""1798_reinvest"" -> ""1798_myDividends"";
""1798_buy"" -> ""1798_purchaseTokens"";
""1798_calculateEthereumReceived"" -> ""1798_tokensToEthereum_"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,BreedingClockAuction,"contract BreedingClockAuction is ClockAuction { bool public isBreedingClockAuction = true; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_2882_BreedingClockAuction {
label=""BreedingClockAuction"";
""2882_createAuction"" [label=""createAuction""];
""2882_bid"" [label=""bid""];
""2882_isBreedingClockAuction"" [label=""isBreedingClockAuction""];
""2882_getCurrentPrice"" [label=""getCurrentPrice""];
""2882_constructor"" [label=""constructor""];
""2882_bid"" -> ""2882__transfer"";
""2882_createAuction"" -> ""2882__escrow"";
""2882_getCurrentPrice"" -> ""2882__isOnAuction"";
""2882_createAuction"" -> ""2882__addAuction"";
""2882_getCurrentPrice"" -> ""2882__currentPrice"";
""2882_bid"" -> ""2882__bid"";
""2882_constructor"" -> ""2882_constructor"";
}
"
0x514bc174df04a4b04ae2be81ee8c788c3796b06b.sol,Deco,contract Deco is ERC20ERC223 { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant totalSupply = 6*10**26; mapping(address => Account) private accounts; struct Account { uint256 balance; mapping(address => uint256) allowed; mapping(address => bool) isAllowanceAuthorized; },1,"subgraph cluster_615_Deco {
label=""Deco"";
""615_hasApproval"" [label=""hasApproval""];
""615_allowance"" [label=""allowance""];
""615_removeApproval"" [label=""removeApproval""];
""615_balanceOf"" [label=""balanceOf""];
""615_approve"" [label=""approve""];
""615_isContract"" [label=""isContract""];
""615_transfer"" [label=""transfer""];
""615_Deco"" [label=""Deco""];
""615_transferFrom"" [label=""transferFrom""];
""615_performTransfer"" [label=""performTransfer""];
""615_transfer"" -> ""615_performTransfer"";
""615_transferFrom"" -> ""615_performTransfer"";
""615_transferFrom"" -> ""615_hasApproval"";
""615_performTransfer"" -> ""615_isContract"";
""615_transfer"" -> ""615_onlyPayloadSize"";
""615_transferFrom"" -> ""615_onlyPayloadSize"";
}
"
0x4ca65f54f923be2fb3efc3a7758e88a6f910806e.sol,GamblicaEarlyAccess,"contract GamblicaEarlyAccess { enum State { CREATED, DEPOSIT, CLAIM }",1,"subgraph cluster_318_GamblicaEarlyAccess {
label=""GamblicaEarlyAccess"";
""318_registerDeposit"" [label=""registerDeposit""];
""318_addWinnigs"" [label=""addWinnigs""];
""318_constructor"" [label=""constructor""];
""318_claim"" [label=""claim""];
""318_die"" [label=""die""];
""318_end"" [label=""end""];
""318_start"" [label=""start""];
""318_fallback"" [label=""fallback""];
""318_addWinnigs"" -> ""318_onlyGamblica"";
""318_end"" -> ""318_onlyGamblica"";
""318_fallback"" -> ""318_claim"";
""318_die"" -> ""318_onlyGamblica"";
""318_registerDeposit"" -> ""318_onlyGamblica"";
""318_start"" -> ""318_onlyGamblica"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,Havven,"contract Havven is ExternStateProxyToken, SelfDestructible { mapping(address => uint) public currentBalanceSum; mapping(address => uint) public lastAverageBalance; mapping(address => uint) public penultimateAverageBalance; mapping(address => uint) public lastTransferTimestamp; uint public feePeriodStartTime = 3; uint public lastFeePeriodStartTime = 2; uint public penultimateFeePeriodStartTime = 1; uint public targetFeePeriodDurationSeconds = 4 weeks; uint constant MIN_FEE_PERIOD_DURATION_SECONDS = 1 days; uint constant MAX_FEE_PERIOD_DURATION_SECONDS = 26 weeks; uint public lastFeesCollected; mapping(address => bool) public hasWithdrawnLastPeriodFees; EtherNomin public nomin; HavvenEscrow public escrow; function Havven(TokenState initialState, address _owner) ExternStateProxyToken(, , 1e8 * UNIT, address(this), initialState, _owner) SelfDestructible(_owner, _owner) public { lastTransferTimestamp[this] = now; feePeriodStartTime = now; lastFeePeriodStartTime = now - targetFeePeriodDurationSeconds; penultimateFeePeriodStartTime = now - 2*targetFeePeriodDurationSeconds; }",1,"subgraph cluster_4834_Havven {
label=""Havven"";
""4834_totalSupply"" [label=""totalSupply""];
""4834_endow"" [label=""endow""];
""4834_setEscrow"" [label=""setEscrow""];
""4834_rolloverFeePeriod"" [label=""rolloverFeePeriod""];
""4834_setTargetFeePeriodDuration"" [label=""setTargetFeePeriodDuration""];
""4834_recomputeLastAverageBalance"" [label=""recomputeLastAverageBalance""];
""4834_adjustFeeEntitlement"" [label=""adjustFeeEntitlement""];
""4834_emitTransferEvents"" [label=""emitTransferEvents""];
""4834_targetFeePeriodDurationSeconds"" [label=""targetFeePeriodDurationSeconds""];
""4834_rolloverFee"" [label=""rolloverFee""];
""4834__recomputeAccountLastAverageBalance"" [label=""_recomputeAccountLastAverageBalance""];
""4834_transfer"" [label=""transfer""];
""4834_feePeriodStartTime"" [label=""feePeriodStartTime""];
""4834_recomputeAccountLastAverageBalance"" [label=""recomputeAccountLastAverageBalance""];
""4834_transferFrom"" [label=""transferFrom""];
""4834_Havven"" [label=""Havven""];
""4834_checkFeePeriodRollover"" [label=""checkFeePeriodRollover""];
""4834_withdrawFeeEntitlement"" [label=""withdrawFeeEntitlement""];
""4834_penultimateAverageBalance"" [label=""penultimateAverageBalance""];
""4834_setNomin"" [label=""setNomin""];
""4834_lastAverageBalance"" [label=""lastAverageBalance""];
""4834__transfer"" [label=""_transfer""];
""4834_withdrawFeeEntitlement"" -> ""4834_safeAdd"";
""4834_withdrawFeeEntitlement"" -> ""4834_safeMul_dec"";
""4834_withdrawFeeEntitlement"" -> ""4834_preCheckFeePeriodRollover"";
""4834__recomputeAccountLastAverageBalance"" -> ""4834_preCheckFeePeriodRollover"";
""4834__transfer"" -> ""4834_adjustFeeEntitlement"";
""4834_setTargetFeePeriodDuration"" -> ""4834_postCheckFeePeriodRollover"";
""4834_transferFrom"" -> ""4834__transferFrom_byProxy"";
""4834_transfer"" -> ""4834__transfer"";
""4834_withdrawFeeEntitlement"" -> ""4834_optionalProxy"";
""4834_recomputeLastAverageBalance"" -> ""4834__recomputeAccountLastAverageBalance"";
""4834_rolloverFee"" -> ""4834_safeMul"";
""4834_transferFrom"" -> ""4834_preCheckFeePeriodRollover"";
""4834_rolloverFeePeriod"" -> ""4834_checkFeePeriodRollover"";
""4834_transferFrom"" -> ""4834_optionalProxy"";
""4834_recomputeAccountLastAverageBalance"" -> ""4834__recomputeAccountLastAverageBalance"";
""4834_Havven"" -> ""4834_ExternStateProxyToken"";
""4834__recomputeAccountLastAverageBalance"" -> ""4834_adjustFeeEntitlement"";
""4834_emitTransferEvents"" -> ""4834_onlyOwner"";
""4834_withdrawFeeEntitlement"" -> ""4834_rolloverFee"";
""4834__transfer"" -> ""4834__transfer_byProxy"";
""4834_transferFrom"" -> ""4834_adjustFeeEntitlement"";
""4834_adjustFeeEntitlement"" -> ""4834_rolloverFee"";
""4834_rolloverFee"" -> ""4834_safeAdd"";
""4834_setEscrow"" -> ""4834_optionalProxy_onlyOwner"";
""4834_adjustFeeEntitlement"" -> ""4834_safeAdd"";
""4834_setNomin"" -> ""4834_optionalProxy_onlyOwner"";
""4834_recomputeLastAverageBalance"" -> ""4834_optionalProxy"";
""4834_Havven"" -> ""4834_SelfDestructible"";
""4834_withdrawFeeEntitlement"" -> ""4834_safeDiv_dec"";
""4834_endow"" -> ""4834__transfer"";
""4834_adjustFeeEntitlement"" -> ""4834_safeMul"";
""4834_transfer"" -> ""4834_optionalProxy"";
""4834_rolloverFee"" -> ""4834_safeDiv"";
""4834__transfer"" -> ""4834_preCheckFeePeriodRollover"";
""4834_endow"" -> ""4834_optionalProxy_onlyOwner"";
""4834_setTargetFeePeriodDuration"" -> ""4834_optionalProxy_onlyOwner"";
}
"
0x84f7c44b6fed1080f647e354d552595be2cc602f.sol,BigbomToken,"contract BigbomToken is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public totalSupply = 2000000000 * 1e18; uint public constant founderAmount = 200000000 * 1e18; uint public constant coreStaffAmount = 60000000 * 1e18; uint public constant advisorAmount = 140000000 * 1e18; uint public constant networkGrowthAmount = 600000000 * 1e18; uint public constant reserveAmount = 635000000 * 1e18; uint public constant bountyAmount = 40000000 * 1e18; uint public constant publicSaleAmount = 275000000 * 1e18; address public bbFounderCoreStaffWallet ; address public bbAdvisorWallet; address public bbAirdropWallet; address public bbNetworkGrowthWallet; address public bbReserveWallet; address public bbPublicSaleWallet; uint public saleStartTime; uint public saleEndTime; address public tokenSaleContract; BigbomPrivateSaleList public privateSaleList; mapping (address => bool) public frozenAccount; mapping (address => uint) public frozenTime; mapping (address => uint) public maxAllowedAmount; event FrozenFunds(address target, bool frozen, uint _seconds); function checkMaxAllowed(address target) public constant returns (uint) { var maxAmount = balances[target]; if(target == bbFounderCoreStaffWallet){ maxAmount = 10000000 * 1e18; }",1,"subgraph cluster_1697_BigbomTokenExtended {
label=""BigbomTokenExtended"";
""1697_selfFreeze"" [label=""selfFreeze""];
""1697_freezeAccount"" [label=""freezeAccount""];
""1697_airDrop"" [label=""airDrop""];
""1697_BigbomTokenExtended"" [label=""BigbomTokenExtended""];
""1697_freezeAccount"" -> ""1697_onlyOwner"";
""1697_airDrop"" -> ""1697_transfer"";
""1697_selfFreeze"" -> ""1697_validFrozenAccount"";
""1697_airDrop"" -> ""1697_onlyOwner"";
""1697_freezeAccount"" -> ""1697_validFrozenAccount"";
""1697_BigbomTokenExtended"" -> ""1697_BigbomToken"";
}
"
0xb471c695dd5ea02035275d4b88077490c1e380ba.sol,ERC20x,"contract ERC20x is ERC20xVariables { function transfer(address _to, uint256 _value) public returns (bool success) { _transferBalance(msg.sender, _to, _value); emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_81_ERC20xVariables {
label=""ERC20xVariables"";
""81_balanceOf"" [label=""balanceOf""];
""81_allowance"" [label=""allowance""];
}
"
0x17f68886d00845867c154c912b4ccc506ec92fc7.sol,DelegatedShareholderAssociation,"contract DelegatedShareholderAssociation is TokenRecipient { uint public minimumQuorum; uint public debatingPeriodInMinutes; Proposal[] public proposals; uint public numProposals; ERC20 public sharesTokenAddress; mapping (address => address) public delegatesByDelegator; mapping (address => uint) public lockedDelegatingTokens; mapping (address => uint) public delegatedAmountsByDelegate; uint public totalLockedTokens; uint public requiredSharesToBeBoardMember; TokenLocker public tokenLocker; event ProposalAdded(uint proposalID, address recipient, uint amount, bytes metadataHash); event Voted(uint proposalID, bool position, address voter); event ProposalTallied(uint proposalID, uint yea, uint nay, uint quorum, bool active); event ChangeOfRules(uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newSharesTokenAddress); event TokensDelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); event TokensUndelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); struct Proposal { address recipient; uint amount; bytes metadataHash; uint timeCreated; uint votingDeadline; bool finalized; bool proposalPassed; uint numberOfVotes; bytes32 proposalHash; Vote[] votes; mapping (address => bool) voted; }",1,"subgraph cluster_1103_DelegatedShareholderAssociation {
label=""DelegatedShareholderAssociation"";
""1103_changeVotingRules"" [label=""changeVotingRules""];
""1103_hasVoted"" [label=""hasVoted""];
""1103_vote"" [label=""vote""];
""1103_executeProposal"" [label=""executeProposal""];
""1103_countVotes"" [label=""countVotes""];
""1103_checkProposalCode"" [label=""checkProposalCode""];
""1103_setDelegateAndLockTokens"" [label=""setDelegateAndLockTokens""];
""1103_clearDelegateAndUnlockTokens"" [label=""clearDelegateAndUnlockTokens""];
""1103_newProposal"" [label=""newProposal""];
""1103_newProposal"" -> ""1103_onlyBoardMembers"";
""1103_executeProposal"" -> ""1103_countVotes"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyShareholders"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyUndelegated"";
""1103_newProposal"" -> ""1103_notSelf"";
""1103_vote"" -> ""1103_onlyShareholders"";
""1103_vote"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_onlyDelegated"";
""1103_executeProposal"" -> ""1103_notSelf"";
""1103_changeVotingRules"" -> ""1103_onlySelf"";
""1103_setDelegateAndLockTokens"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_notSelf"";
}
"
0x85b794252e7f1b2b24392a5267ff2086c0c3d7d1.sol,CashPokerProPreICO,"contract CashPokerProPreICO is Ownable, Pausable { using SafeMath for uint; address public tokenWallet; uint public tokensSold; uint public weiRaised; uint public investorCount; Token public token; uint constant minInvest = 0.01 ether; uint constant tokensLimit = 10000000 * 1 ether; uint256 public startTime = 1503770400; uint256 public endTime = 1504893600; uint price = 0.00017 * 1 ether; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function CashPokerProPreICO() { tokenWallet = msg.sender; }",1,"subgraph cluster_489_CashPokerProPreICO {
label=""CashPokerProPreICO"";
""489_fallback"" [label=""fallback""];
""489_setTokenWallet"" [label=""setTokenWallet""];
""489_withdrawal"" [label=""withdrawal""];
""489_setToken"" [label=""setToken""];
""489_buyTokens"" [label=""buyTokens""];
""489_transfer"" [label=""transfer""];
""489_CashPokerProPreICO"" [label=""CashPokerProPreICO""];
""489_setTokenWallet"" -> ""489_onlyOwner"";
""489_withdrawal"" -> ""489_onlyOwner"";
""489_setToken"" -> ""489_onlyOwner"";
""489_buyTokens"" -> ""489_whenNotPaused"";
""489_transfer"" -> ""489_onlyOwner"";
""489_fallback"" -> ""489_buyTokens"";
}
"
0x01d6208f95cf2292c350fc8bb1b1f29230352675.sol,DepositWithdraw,"contract DepositWithdraw is Claimable, Withdrawable { using SafeMath for uint256; struct TransferRecord { uint256 timeStamp; address account; uint256 value; }",1,"subgraph cluster_981_DepositWithdraw {
label=""DepositWithdraw"";
""981_checkWithdrawAmount"" [label=""checkWithdrawAmount""];
""981_setWithdrawWallet"" [label=""setWithdrawWallet""];
""981_recordWithdraw"" [label=""recordWithdraw""];
""981_getDepositNum"" [label=""getDepositNum""];
""981_getOneWithdrawRec"" [label=""getOneWithdrawRec""];
""981_withdrawTokenToDefault"" [label=""withdrawTokenToDefault""];
""981_bytesToBytes32"" [label=""bytesToBytes32""];
""981_receiveApproval"" [label=""receiveApproval""];
""981_getOneDepositRec"" [label=""getOneDepositRec""];
""981_constructor"" [label=""constructor""];
""981_withdrawToken"" [label=""withdrawToken""];
""981_getWithdrawNum"" [label=""getWithdrawNum""];
""981_recordWithdraw"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_checkWithdrawAmount"";
""981_withdrawTokenToDefault"" -> ""981_withdrawToken"";
""981_receiveApproval"" -> ""981_onlyOwner"";
""981_withdrawTokenToDefault"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_onlyOwner"";
""981_setWithdrawWallet"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_recordWithdraw"";
""981_receiveApproval"" -> ""981_bytesToBytes32"";
}
"
0x88355a32a8c5cc399aa09b9d21ebcba935ae5d2f.sol,BankWallet,"contract BankWallet is Pausable, RequiringAuthorization, SafeMath { address public edgelessToken; address public edgelessCasino; uint public maxFundAmount = 0.22 ether; event Withdrawal(address _token, uint _amount); event Deposit(address _receiver, uint _amount); event Fund(address _receiver, uint _amount); constructor(address _token, address _casino) public { edgelessToken = _token; edgelessCasino = _casino; owner = msg.sender; }",1,"subgraph cluster_666_BankWallet {
label=""BankWallet"";
""666_setMaxFundAmount"" [label=""setMaxFundAmount""];
""666_setCasinoContract"" [label=""setCasinoContract""];
""666_withdraw"" [label=""withdraw""];
""666_fallback"" [label=""fallback""];
""666_constructor"" [label=""constructor""];
""666__approveForCasino"" [label=""_approveForCasino""];
""666_approve"" [label=""approve""];
""666_deposit"" [label=""deposit""];
""666_fund"" [label=""fund""];
""666_withdraw"" -> ""666_onlyAdmin"";
""666_setMaxFundAmount"" -> ""666_onlyAdmin"";
""666_setCasinoContract"" -> ""666__approveForCasino"";
""666_setCasinoContract"" -> ""666_onlyAdmin"";
""666_fund"" -> ""666_onlyAuthorized"";
""666_deposit"" -> ""666_onlyAuthorized"";
""666_approve"" -> ""666__approveForCasino"";
""666_approve"" -> ""666_onlyAuthorized"";
}
"
0xaa63c8683647ef91b3fdab4b4989ee9588da297b.sol,DSProxy,"contract DSProxy is DSAuth, DSNote { DSProxyCache public cache; function DSProxy(address _cacheAddr) public { require(setCache(_cacheAddr)); }",1,"subgraph cluster_390_DSProxyCache {
label=""DSProxyCache"";
""390_read"" [label=""read""];
""390_write"" [label=""write""];
}
"
0xa227d444a52fd21c3a848c7650bc2cd5832f6487.sol,KTFForTestMigration,"contract KTFForTestMigration is PartialERC20, Ownable { string public name; string public symbol; uint32 public decimals; PrivateToken public pktf; uint32 public holderCount; constructor(PrivateToken _pktf) public { symbol = ; name = ; decimals = 18; _totalSupply = 0; _balances[msg.sender] = _totalSupply; pktf = _pktf; }",1,"subgraph cluster_1463_KTFForTestMigration {
label=""KTFForTestMigration"";
""1463_migrateFromPKTF"" [label=""migrateFromPKTF""];
""1463_constructor"" [label=""constructor""];
""1463_mint"" [label=""mint""];
""1463_mint"" -> ""1463_onlyOwner"";
""1463_migrateFromPKTF"" -> ""1463_onlyOwner"";
""1463_mint"" -> ""1463__mint"";
""1463_migrateFromPKTF"" -> ""1463_mint"";
}
"
0xbc97f1508fdeb0a63b25f3a4806b62ef5370e8ab.sol,CryptoBeginnerQuest,contract CryptoBeginnerQuest { using SafeMath for uint256; address private administrator; address public miningWarAddress; CryptoEngineerInterface public Engineer; CryptoDepositInterface public Deposit; CryptoMiningWarInterface public MiningWar; CryptoAirdropGameInterface public AirdropGame; CryptoBossWannaCryInterface public BossWannaCry; CryptoArenaInterface public Arena; uint256 private miningWarDeadline; uint256 private miningWarRound; mapping(address => Player) private players; mapping(address => MinerQuest) private minerQuests; mapping(address => EngineerQuest) private engineerQuests; mapping(address => DepositQuest) private depositQuests; mapping(address => JoinAirdropQuest) private joinAirdropQuests; mapping(address => AtkBossQuest) private atkBossQuests; mapping(address => AtkPlayerQuest) private atkPlayerQuests; mapping(address => BoosterQuest) private boosterQuests; mapping(address => RedbullQuest) private redbullQuests; struct Player { uint256 miningWarRound; uint256 currentQuest; },1,"subgraph cluster_2473_CryptoBeginnerQuest {
label=""CryptoBeginnerQuest"";
""2473_setMiningWarInterface"" [label=""setMiningWarInterface""];
""2473_confirmMinerQuest"" [label=""confirmMinerQuest""];
""2473_getPlayerDepositData"" [label=""getPlayerDepositData""];
""2473_getData"" [label=""getData""];
""2473_checkJoinAirdropQuest"" [label=""checkJoinAirdropQuest""];
""2473_upgrade"" [label=""upgrade""];
""2473_getMinerLv1"" [label=""getMinerLv1""];
""2473_addAtkBossQuest"" [label=""addAtkBossQuest""];
""2473_getPlayerBossWannaCryData"" [label=""getPlayerBossWannaCryData""];
""2473_checkRedbullQuest"" [label=""checkRedbullQuest""];
""2473_isContractMiniGame"" [label=""isContractMiniGame""];
""2473_confirmQuest"" [label=""confirmQuest""];
""2473_getMiningWarRoundOfPlayer"" [label=""getMiningWarRoundOfPlayer""];
""2473_addAtkPlayerQuest"" [label=""addAtkPlayerQuest""];
""2473_checkGetFreeQuest"" [label=""checkGetFreeQuest""];
""2473_checkAtkPlayerQuest"" [label=""checkAtkPlayerQuest""];
""2473_getPlayerAirdropGameData"" [label=""getPlayerAirdropGameData""];
""2473_checkBoosterQuest"" [label=""checkBoosterQuest""];
""2473_getMiningWarDealine"" [label=""getMiningWarDealine""];
""2473_getNextTimeAtkPlayer"" [label=""getNextTimeAtkPlayer""];
""2473_setArenaInterface"" [label=""setArenaInterface""];
""2473_addDepositQuest"" [label=""addDepositQuest""];
""2473_setupGame"" [label=""setupGame""];
""2473_confirmJoinAirdropQuest"" [label=""confirmJoinAirdropQuest""];
""2473_addEngineerQuest"" [label=""addEngineerQuest""];
""2473_getBoosters"" [label=""getBoosters""];
""2473_addLevelQuest"" [label=""addLevelQuest""];
""2473_addQuest"" [label=""addQuest""];
""2473_confirmAtkBossQuest"" [label=""confirmAtkBossQuest""];
""2473_setBossWannaCryInterface"" [label=""setBossWannaCryInterface""];
""2473_getEngineerLv1"" [label=""getEngineerLv1""];
""2473_getMiningWarRound"" [label=""getMiningWarRound""];
""2473_constructor"" [label=""constructor""];
""2473_getRedbulls"" [label=""getRedbulls""];
""2473_confirmEngineerQuest"" [label=""confirmEngineerQuest""];
""2473_fallback"" [label=""fallback""];
""2473_checkAtkBossQuest"" [label=""checkAtkBossQuest""];
""2473_addRedbullQuest"" [label=""addRedbullQuest""];
""2473_setupMiniGame"" [label=""setupMiniGame""];
""2473_confirmRedbullQuest"" [label=""confirmRedbullQuest""];
""2473_confirmGetFreeQuest"" [label=""confirmGetFreeQuest""];
""2473_addBoosterQuest"" [label=""addBoosterQuest""];
""2473_setDepositInterface"" [label=""setDepositInterface""];
""2473_checkEngineerQuest"" [label=""checkEngineerQuest""];
""2473_addMinerQuest"" [label=""addMinerQuest""];
""2473_confirmDepositQuest"" [label=""confirmDepositQuest""];
""2473_checkQuest"" [label=""checkQuest""];
""2473_setEngineerInterface"" [label=""setEngineerInterface""];
""2473_setAirdropGameInterface"" [label=""setAirdropGameInterface""];
""2473_addJoinAirdropQuest"" [label=""addJoinAirdropQuest""];
""2473_checkMinerQuest"" [label=""checkMinerQuest""];
""2473_confirmAtkPlayerQuest"" [label=""confirmAtkPlayerQuest""];
""2473_checkDepositQuest"" [label=""checkDepositQuest""];
""2473_confirmBoosterQuest"" [label=""confirmBoosterQuest""];
""2473_addQuest"" -> ""2473_addJoinAirdropQuest"";
""2473_confirmQuest"" -> ""2473_addQuest"";
""2473_confirmQuest"" -> ""2473_confirmDepositQuest"";
""2473_addLevelQuest"" -> ""2473_isAdministrator"";
""2473_checkQuest"" -> ""2473_checkJoinAirdropQuest"";
""2473_addQuest"" -> ""2473_addEngineerQuest"";
""2473_checkQuest"" -> ""2473_checkBoosterQuest"";
""2473_addLevelQuest"" -> ""2473_addDepositQuest"";
""2473_addLevelQuest"" -> ""2473_addAtkPlayerQuest"";
""2473_checkMinerQuest"" -> ""2473_getMinerLv1"";
""2473_checkQuest"" -> ""2473_checkGetFreeQuest"";
""2473_addQuest"" -> ""2473_addMinerQuest"";
""2473_constructor"" -> ""2473_setEngineerInterface"";
""2473_setEngineerInterface"" -> ""2473_isAdministrator"";
""2473_addQuest"" -> ""2473_addBoosterQuest"";
""2473_setAirdropGameInterface"" -> ""2473_isAdministrator"";
""2473_checkQuest"" -> ""2473_checkEngineerQuest"";
""2473_addDepositQuest"" -> ""2473_getPlayerDepositData"";
""2473_setupGame"" -> ""2473_getMiningWarDealine"";
""2473_upgrade"" -> ""2473_isAdministrator"";
""2473_checkBoosterQuest"" -> ""2473_getBoosters"";
""2473_addLevelQuest"" -> ""2473_addMinerQuest"";
""2473_setMiningWarInterface"" -> ""2473_isAdministrator"";
""2473_checkAtkBossQuest"" -> ""2473_getPlayerBossWannaCryData"";
""2473_addLevelQuest"" -> ""2473_addJoinAirdropQuest"";
""2473_addQuest"" -> ""2473_addDepositQuest"";
""2473_checkGetFreeQuest"" -> ""2473_getMiningWarRoundOfPlayer"";
""2473_constructor"" -> ""2473_setBossWannaCryInterface"";
""2473_addLevelQuest"" -> ""2473_addAtkBossQuest"";
""2473_checkRedbullQuest"" -> ""2473_getRedbulls"";
""2473_addLevelQuest"" -> ""2473_addRedbullQuest"";
""2473_checkQuest"" -> ""2473_checkAtkBossQuest"";
""2473_setArenaInterface"" -> ""2473_isAdministrator"";
""2473_confirmQuest"" -> ""2473_confirmEngineerQuest"";
""2473_addQuest"" -> ""2473_addAtkPlayerQuest"";
""2473_confirmQuest"" -> ""2473_confirmBoosterQuest"";
""2473_checkJoinAirdropQuest"" -> ""2473_getPlayerAirdropGameData"";
""2473_constructor"" -> ""2473_setArenaInterface"";
""2473_setBossWannaCryInterface"" -> ""2473_isAdministrator"";
""2473_checkEngineerQuest"" -> ""2473_getEngineerLv1"";
""2473_confirmQuest"" -> ""2473_confirmRedbullQuest"";
""2473_checkDepositQuest"" -> ""2473_getPlayerDepositData"";
""2473_addQuest"" -> ""2473_addRedbullQuest"";
""2473_confirmQuest"" -> ""2473_confirmJoinAirdropQuest"";
""2473_getData"" -> ""2473_checkQuest"";
""2473_setDepositInterface"" -> ""2473_isAdministrator"";
""2473_addQuest"" -> ""2473_addAtkBossQuest"";
""2473_confirmQuest"" -> ""2473_confirmGetFreeQuest"";
""2473_constructor"" -> ""2473_setMiningWarInterface"";
""2473_addAtkBossQuest"" -> ""2473_getPlayerBossWannaCryData"";
""2473_constructor"" -> ""2473_setAirdropGameInterface"";
""2473_setupGame"" -> ""2473_getMiningWarRound"";
""2473_checkAtkPlayerQuest"" -> ""2473_getNextTimeAtkPlayer"";
""2473_constructor"" -> ""2473_setDepositInterface"";
""2473_checkQuest"" -> ""2473_checkDepositQuest"";
""2473_checkQuest"" -> ""2473_checkMinerQuest"";
""2473_addLevelQuest"" -> ""2473_addEngineerQuest"";
""2473_addAtkPlayerQuest"" -> ""2473_getNextTimeAtkPlayer"";
""2473_checkQuest"" -> ""2473_checkRedbullQuest"";
""2473_addLevelQuest"" -> ""2473_addBoosterQuest"";
""2473_confirmQuest"" -> ""2473_confirmMinerQuest"";
""2473_confirmQuest"" -> ""2473_checkQuest"";
""2473_addJoinAirdropQuest"" -> ""2473_getPlayerAirdropGameData"";
""2473_confirmQuest"" -> ""2473_confirmAtkBossQuest"";
""2473_confirmQuest"" -> ""2473_confirmAtkPlayerQuest"";
""2473_checkQuest"" -> ""2473_checkAtkPlayerQuest"";
}
"
0x4720f2468eeb7a795945c5ffbc3b0178e32250e0.sol,ExternalContracts,contract ExternalContracts is Ownable { MixGenInterface public geneScience; RewardContract public reward; address public storeAddress; function setMixGenAddress(address _address) external onlyOwner { MixGenInterface candidateContract = MixGenInterface(_address); require(candidateContract.isMixGen()); geneScience = candidateContract; },1,"subgraph cluster_231_ExternalContracts {
label=""ExternalContracts"";
""231_setStoreAddress"" [label=""setStoreAddress""];
""231_setRewardAddress"" [label=""setRewardAddress""];
""231_setMixGenAddress"" [label=""setMixGenAddress""];
""231_setStoreAddress"" -> ""231_onlyOwner"";
""231_setMixGenAddress"" -> ""231_onlyOwner"";
""231_setRewardAddress"" -> ""231_onlyOwner"";
}
"
0xeb907a50921e052cbee233811beaf0839d2a98fd.sol,Advertisement,contract Advertisement { struct Filters { string countries; string packageName; uint[] vercodes; },1,"subgraph cluster_888_Advertisement {
label=""Advertisement"";
""888_cancelCampaign"" [label=""cancelCampaign""];
""888_payFromCampaign"" [label=""payFromCampaign""];
""888_getPackageNameOfCampaign"" [label=""getPackageNameOfCampaign""];
""888_getPriceOfCampaign"" [label=""getPriceOfCampaign""];
""888_getStartDateOfCampaign"" [label=""getStartDateOfCampaign""];
""888_division"" [label=""division""];
""888_getBidIdList"" [label=""getBidIdList""];
""888_getEndDateOfCampaign"" [label=""getEndDateOfCampaign""];
""888_getCountriesOfCampaign"" [label=""getCountriesOfCampaign""];
""888_addCampaignToCountryMap"" [label=""addCampaignToCountryMap""];
""888_registerPoA"" [label=""registerPoA""];
""888_getOwnerOfCampaign"" [label=""getOwnerOfCampaign""];
""888_getBudgetOfCampaign"" [label=""getBudgetOfCampaign""];
""888_getCampaignValidity"" [label=""getCampaignValidity""];
""888_getVercodesOfCampaign"" [label=""getVercodesOfCampaign""];
""888_Advertisement"" [label=""Advertisement""];
""888_getCountryList"" [label=""getCountryList""];
""888_getTotalCampaignsByCountry"" [label=""getTotalCampaignsByCountry""];
""888_addCampaign"" [label=""addCampaign""];
""888_uintToBytes"" [label=""uintToBytes""];
""888_getCampaignsByCountry"" [label=""getCampaignsByCountry""];
""888_createCampaign"" [label=""createCampaign""];
""888_setBudgetOfCampaign"" [label=""setBudgetOfCampaign""];
""888_setCampaignValidity"" [label=""setCampaignValidity""];
""888_payFromCampaign"" -> ""888_division"";
""888_createCampaign"" -> ""888_uintToBytes"";
""888_cancelCampaign"" -> ""888_getOwnerOfCampaign"";
""888_cancelCampaign"" -> ""888_setBudgetOfCampaign"";
""888_createCampaign"" -> ""888_addCampaign"";
""888_cancelCampaign"" -> ""888_getBudgetOfCampaign"";
""888_addCampaign"" -> ""888_addCampaignToCountryMap"";
""888_cancelCampaign"" -> ""888_setCampaignValidity"";
}
"
0xeb6486b13b56314b37aacac2ec6889d11a763de1.sol,BasicCGRID,contract BasicCGRID is ERC223 { using SafeMath for uint256; uint256 public constant decimals = 8; string public constant symbol = ; string public constant name = ; uint256 public _totalSupply = 10**17; address public owner; address public airdrop; bool public tradable = false; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_709_BasicCGRID {
label=""BasicCGRID"";
""709_totalSupply"" [label=""totalSupply""];
""709_transferFrom"" [label=""transferFrom""];
""709_balanceOf"" [label=""balanceOf""];
""709_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""709_approve"" [label=""approve""];
""709_updateAirdrop"" [label=""updateAirdrop""];
""709_turnOnTradable"" [label=""turnOnTradable""];
""709_transfer"" [label=""transfer""];
""709_BasicCGRID"" [label=""BasicCGRID""];
""709_isContract"" [label=""isContract""];
""709_allowance"" [label=""allowance""];
""709_updateAirdrop"" -> ""709_onlyOwner"";
""709_transfer"" -> ""709_isContract"";
""709_turnOnTradable"" -> ""709_onlyOwner"";
""709_transferFrom"" -> ""709_isTradable"";
""709_transfer"" -> ""709_isTradable"";
""709_transfer"" -> ""709_balanceOf"";
}
"
0xc0eb85285d83217cd7c891702bcbc0fc401e2d9d.sol,HVNToken,"contract HVNToken is ERC20Interface, SafeMath, Owned { mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 8; string public version = ; bool public transfersFrozen = false; modifier onlyPayloadSize(uint numwords) { assert(msg.data.length == numwords * 32 + 4); _; }",1,"subgraph cluster_651_HVNToken {
label=""HVNToken"";
""651_transfer"" [label=""transfer""];
""651_transferFrom"" [label=""transferFrom""];
""651_claimTokens"" [label=""claimTokens""];
""651_balanceOf"" [label=""balanceOf""];
""651_unfreezeTransfers"" [label=""unfreezeTransfers""];
""651_approveAndCall"" [label=""approveAndCall""];
""651_approve"" [label=""approve""];
""651_HVNToken"" [label=""HVNToken""];
""651_allowance"" [label=""allowance""];
""651_freezeTransfers"" [label=""freezeTransfers""];
""651_transfer"" -> ""651_onlyPayloadSize"";
""651_unfreezeTransfers"" -> ""651_ownerOnly"";
""651_freezeTransfers"" -> ""651_ownerOnly"";
""651_HVNToken"" -> ""651_ownerOnly"";
""651_allowance"" -> ""651_onlyPayloadSize"";
""651_transferFrom"" -> ""651_whenNotFrozen"";
""651_approveAndCall"" -> ""651_approve"";
""651_transfer"" -> ""651_whenNotFrozen"";
""651_transferFrom"" -> ""651_sub"";
""651_claimTokens"" -> ""651_ownerOnly"";
""651_transferFrom"" -> ""651_onlyPayloadSize"";
""651_transfer"" -> ""651_sub"";
}
"
0x2775f2a3c83bee1541d1d1bc308b3bb432b45151.sol,PLANETAGROToken,contract PLANETAGROToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 20000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function PLANETAGROToken () { owner = msg.sender; },1,"subgraph cluster_756_PLANETAGROToken {
label=""PLANETAGROToken"";
""756_freezeAccount"" [label=""freezeAccount""];
""756_transfer"" [label=""transfer""];
""756_createTokens"" [label=""createTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_transferFrom"" [label=""transferFrom""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_PLANETAGROToken"" [label=""PLANETAGROToken""];
""756_approve"" [label=""approve""];
""756_setOwner"" [label=""setOwner""];
""756_refundTokens"" [label=""refundTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_transfer"" -> ""756_transfer"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0x6c764fac2ed1c5fabf8bcd86bae68d8cdbe8290e.sol,BaseWallet,"contract BaseWallet { address public implementation; address public owner; mapping (address => bool) public authorised; mapping (bytes4 => address) public enabled; uint public modules; event AuthorisedModule(address indexed module, bool value); event EnabledStaticCall(address indexed module, bytes4 indexed method); event Invoked(address indexed module, address indexed target, uint indexed value, bytes data); event Received(uint indexed value, address indexed sender, bytes data); event OwnerChanged(address owner); modifier moduleOnly { require(authorised[msg.sender], ); _; }",1,"subgraph cluster_1406_BaseWallet {
label=""BaseWallet"";
""1406_init"" [label=""init""];
""1406_invoke"" [label=""invoke""];
""1406_fallback"" [label=""fallback""];
""1406_enableStaticCall"" [label=""enableStaticCall""];
""1406_authorised"" [label=""authorised""];
""1406_owner"" [label=""owner""];
""1406_authoriseModule"" [label=""authoriseModule""];
""1406_setOwner"" [label=""setOwner""];
""1406_setOwner"" -> ""1406_moduleOnly"";
""1406_invoke"" -> ""1406_moduleOnly"";
""1406_authoriseModule"" -> ""1406_moduleOnly"";
""1406_enableStaticCall"" -> ""1406_moduleOnly"";
}
"
0x40818f0d14325a9eba6b2a7d60bd61cb9e27ef0c.sol,Trade,"contract Trade is Registry { using SafeMath for uint; using SafeMath for uint256; event KyberTrade( address src, uint srcAmt, address dest, uint destAmt, address beneficiary, uint minConversionRate, address affiliate ); function executeTrade( address src, address dest, uint srcAmt, uint minConversionRate ) public payable returns (uint destAmt) { address protocolAdmin = getAddress(); uint ethQty; IERC20 tokenFunctions = IERC20(src); if (src == getAddress()) { require(msg.value == srcAmt, ); ethQty = srcAmt; }",1,"subgraph cluster_466_Trade {
label=""Trade"";
""466_approveKyber"" [label=""approveKyber""];
""466_getExpectedPrice"" [label=""getExpectedPrice""];
""466_executeTrade"" [label=""executeTrade""];
""466_getExpectedPrice"" -> ""466_getAddress"";
""466_executeTrade"" -> ""466_getAddress"";
""466_approveKyber"" -> ""466_getAddress"";
}
"
0x0f5d6ae470d3b93eb3347212d480bf9b3acfe4f9.sol,LYFToken,contract LYFToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 120000000 * (10**8); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function LYFToken () { owner = msg.sender; },1,"subgraph cluster_756_LYFToken {
label=""LYFToken"";
""756_totalSupply"" [label=""totalSupply""];
""756_createTokens"" [label=""createTokens""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_approve"" [label=""approve""];
""756_transfer"" [label=""transfer""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_setOwner"" [label=""setOwner""];
""756_LYFToken"" [label=""LYFToken""];
""756_transferFrom"" [label=""transferFrom""];
""756_refundTokens"" [label=""refundTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_allowance"";
""756_approve"" -> ""756_approve"";
""756_transfer"" -> ""756_transfer"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0x91db07e4401c2559c7eb8290a77a0feef50843fd.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; address public wallet; address public addressOfTokenUsedAsReward; uint256 public price = 3000; token tokenReward; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale() { wallet = 0x5daaAb630673a61f487965f90E13457a74F566D3; addressOfTokenUsedAsReward = 0x8aB10a31c97Af458Db24038Ed8b498590cf64d74; tokenReward = token(addressOfTokenUsedAsReward); }",1,"subgraph cluster_347_Crowdsale {
label=""Crowdsale"";
""347_changeWallet"" [label=""changeWallet""];
""347_Crowdsale"" [label=""Crowdsale""];
""347_changeTokenReward"" [label=""changeTokenReward""];
""347_stopSale"" [label=""stopSale""];
""347_buyTokens"" [label=""buyTokens""];
""347_startSale"" [label=""startSale""];
""347_setPrice"" [label=""setPrice""];
""347_forwardFunds"" [label=""forwardFunds""];
""347_fallback"" [label=""fallback""];
""347_withdrawTokens"" [label=""withdrawTokens""];
""347_validPurchase"" [label=""validPurchase""];
""347_buyTokens"" -> ""347_validPurchase"";
""347_fallback"" -> ""347_buyTokens"";
""347_buyTokens"" -> ""347_forwardFunds"";
}
"
0xecfe4b7afc47260cb590d3043d3f790a61bb7910.sol,EbyteDistribution,"contract EbyteDistribution { mapping (address => uint256) balances; mapping (address => bool) public blacklist; Token public ebyteToken; address public owner; uint256 public rate = 100000000; uint256 public percentage = 20; uint256 public ethBalance = 10000000000; uint256 public ebyteBalance = 100; bool public contractLocked = true; event sendTokens(address indexed to, uint256 value); event Locked(); event Unlocked(); function EbyteDistribution(address _tokenAddress, address _owner) { ebyteToken = Token(_tokenAddress); owner = _owner; }",1,"subgraph cluster_638_EbyteDistribution {
label=""EbyteDistribution"";
""638_getTokenBalance"" [label=""getTokenBalance""];
""638_setParameters"" [label=""setParameters""];
""638_disableWhitelist"" [label=""disableWhitelist""];
""638_unlockContract"" [label=""unlockContract""];
""638_withdraw"" [label=""withdraw""];
""638_transferOwnership"" [label=""transferOwnership""];
""638_distributeEbyteForEBYTE"" [label=""distributeEbyteForEBYTE""];
""638_EbyteDistribution"" [label=""EbyteDistribution""];
""638_lockContract"" [label=""lockContract""];
""638_distributeEbyteForETH"" [label=""distributeEbyteForETH""];
""638_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""638_enableWhitelist"" [label=""enableWhitelist""];
""638_distributeEbyte"" [label=""distributeEbyte""];
""638_distribution"" [label=""distribution""];
""638_fallback"" [label=""fallback""];
""638_getEthBalance"" [label=""getEthBalance""];
""638_tokensAvailable"" [label=""tokensAvailable""];
""638_balanceOf"" [label=""balanceOf""];
""638_withdraw"" -> ""638_onlyOwner"";
""638_fallback"" -> ""638_isUnlocked"";
""638_distributeEbyteForEBYTE"" -> ""638_getTokenBalance"";
""638_distributeEbyteForEBYTE"" -> ""638_onlyOwner"";
""638_withdrawForeignTokens"" -> ""638_onlyOwner"";
""638_fallback"" -> ""638_onlyWhitelist"";
""638_distribution"" -> ""638_distributeEbyteForEBYTE"";
""638_distribution"" -> ""638_onlyOwner"";
""638_enableWhitelist"" -> ""638_onlyOwner"";
""638_transferOwnership"" -> ""638_onlyOwner"";
""638_distribution"" -> ""638_distributeEbyteForETH"";
""638_unlockContract"" -> ""638_onlyOwner"";
""638_lockContract"" -> ""638_onlyOwner"";
""638_distributeEbyteForETH"" -> ""638_onlyOwner"";
""638_fallback"" -> ""638_getTokenBalance"";
""638_disableWhitelist"" -> ""638_onlyOwner"";
""638_distributeEbyte"" -> ""638_onlyOwner"";
""638_setParameters"" -> ""638_onlyOwner"";
""638_fallback"" -> ""638_getEthBalance"";
""638_distributeEbyteForETH"" -> ""638_getEthBalance"";
}
"
0xec841c878435ba4f28bf305a00c1483db0d96a20.sol,Events,contract Events { DBInterface public database; constructor(address _database) public{ database = DBInterface(_database); },1,"subgraph cluster_1000_Events {
label=""Events"";
""1000_escrow"" [label=""escrow""];
""1000_contractChange"" [label=""contractChange""];
""1000_consensus"" [label=""consensus""];
""1000_registration"" [label=""registration""];
""1000_operator"" [label=""operator""];
""1000_transaction"" [label=""transaction""];
""1000_asset"" [label=""asset""];
""1000_order"" [label=""order""];
""1000_message"" [label=""message""];
""1000_constructor"" [label=""constructor""];
""1000_exchange"" [label=""exchange""];
""1000_message"" -> ""1000_onlyApprovedContract"";
""1000_escrow"" -> ""1000_onlyApprovedContract"";
""1000_contractChange"" -> ""1000_onlyApprovedContract"";
""1000_exchange"" -> ""1000_onlyApprovedContract"";
""1000_registration"" -> ""1000_onlyApprovedContract"";
""1000_consensus"" -> ""1000_onlyApprovedContract"";
""1000_order"" -> ""1000_onlyApprovedContract"";
""1000_transaction"" -> ""1000_onlyApprovedContract"";
""1000_asset"" -> ""1000_onlyApprovedContract"";
""1000_operator"" -> ""1000_onlyApprovedContract"";
}
"
0x01d6208f95cf2292c350fc8bb1b1f29230352675.sol,DepositWithdraw,"contract DepositWithdraw is Claimable, Withdrawable { using SafeMath for uint256; struct TransferRecord { uint256 timeStamp; address account; uint256 value; }",1,"subgraph cluster_981_DepositWithdraw {
label=""DepositWithdraw"";
""981_checkWithdrawAmount"" [label=""checkWithdrawAmount""];
""981_setWithdrawWallet"" [label=""setWithdrawWallet""];
""981_recordWithdraw"" [label=""recordWithdraw""];
""981_getDepositNum"" [label=""getDepositNum""];
""981_getOneWithdrawRec"" [label=""getOneWithdrawRec""];
""981_withdrawTokenToDefault"" [label=""withdrawTokenToDefault""];
""981_bytesToBytes32"" [label=""bytesToBytes32""];
""981_receiveApproval"" [label=""receiveApproval""];
""981_getOneDepositRec"" [label=""getOneDepositRec""];
""981_constructor"" [label=""constructor""];
""981_withdrawToken"" [label=""withdrawToken""];
""981_getWithdrawNum"" [label=""getWithdrawNum""];
""981_recordWithdraw"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_checkWithdrawAmount"";
""981_withdrawTokenToDefault"" -> ""981_withdrawToken"";
""981_receiveApproval"" -> ""981_onlyOwner"";
""981_withdrawTokenToDefault"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_onlyOwner"";
""981_setWithdrawWallet"" -> ""981_onlyOwner"";
""981_withdrawToken"" -> ""981_recordWithdraw"";
""981_receiveApproval"" -> ""981_bytesToBytes32"";
}
"
0x44f958d420f0543353a5e4f14e827d73f01b4261.sol,EBBToken,"contract EBBToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 5963; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_849_EBBToken {
label=""EBBToken"";
""849_decreaseSupply"" [label=""decreaseSupply""];
""849_increaseSupply"" [label=""increaseSupply""];
""849_stopFunding"" [label=""stopFunding""];
""849_changeOwner"" [label=""changeOwner""];
""849_transferETH"" [label=""transferETH""];
""849_setMigrateContract"" [label=""setMigrateContract""];
""849_allocateToken"" [label=""allocateToken""];
""849_startFunding"" [label=""startFunding""];
""849_fallback"" [label=""fallback""];
""849_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""849_EBBToken"" [label=""EBBToken""];
""849_migrate"" [label=""migrate""];
""849_formatDecimals"" [label=""formatDecimals""];
""849_migrate"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_formatDecimals"";
""849_decreaseSupply"" -> ""849_safeSubtract"";
""849_transferETH"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_isOwner"";
""849_startFunding"" -> ""849_isOwner"";
""849_fallback"" -> ""849_safeMult"";
""849_allocateToken"" -> ""849_safeMult"";
""849_increaseSupply"" -> ""849_isOwner"";
""849_setMigrateContract"" -> ""849_isOwner"";
""849_EBBToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_safeAdd"";
""849_setTokenExchangeRate"" -> ""849_isOwner"";
""849_changeOwner"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_formatDecimals"";
""849_fallback"" -> ""849_safeAdd"";
""849_stopFunding"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_isOwner"";
}
"
0x183891e9cfaee0c9e2dbcdfefe1505626c696951.sol,Crowdsale,"contract Crowdsale is Lockable, Operable, Withdrawal, PriceStrategy, LockableCrowdsale, WhitelistedCrowdsale, PausableCrowdsale { using SafeMath for uint256; constructor(uint256 _rateETHtoCHF, uint256 _minInvestmentInCHF, address _withdrawWallet, CosquareToken _token) PriceStrategy(_rateETHtoCHF, _minInvestmentInCHF) Withdrawal(_withdrawWallet) BaseCrowdsale(_token) public { }",1,"subgraph cluster_1587_PausableCrowdsale {
label=""PausableCrowdsale"";
""1587__preValidatePurchase"" [label=""_preValidatePurchase""];
""1587__preValidatePurchase"" -> ""1587__preValidatePurchase"";
""1587__preValidatePurchase"" -> ""1587_whenNotPaused"";
}
"
0x3a773baa30d09f04da0bd869b142ea5503a31022.sol,MiniMeTokenSimple,"contract MiniMeTokenSimple is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; address public parentToken; uint public parentSnapShotBlock; uint public creationBlock; address public tokenFactory; function MiniMeTokenSimple( address _tokenFactory, address _parentToken, uint _parentSnapShotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled ) { tokenFactory = _tokenFactory; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; parentToken = _parentToken; parentSnapShotBlock = _parentSnapShotBlock; transfersEnabled = _transfersEnabled; creationBlock = block.number; }",1,"subgraph cluster_500_MiniMeTokenSimple {
label=""MiniMeTokenSimple"";
""500_MiniMeTokenSimple"" [label=""MiniMeTokenSimple""];
""500_claimTokens"" [label=""claimTokens""];
""500_claimTokens"" -> ""500_onlyController"";
}
"
0x750c1d91864171d7e1715a6b53ee28c72b8faa09.sol,EthicHubUser,"contract EthicHubUser is Ownable, EthicHubBase { event UserStatusChanged(address target, string profile, bool isRegistered); constructor(address _storageAddress) EthicHubBase(_storageAddress) public { version = 3; }",1,"subgraph cluster_660_EthicHubUser {
label=""EthicHubUser"";
""660_deleteUserStatus"" [label=""deleteUserStatus""];
""660_registerPaymentGateway"" [label=""registerPaymentGateway""];
""660_registerLocalNode"" [label=""registerLocalNode""];
""660_unregisterLocalNode"" [label=""unregisterLocalNode""];
""660_registerRepresentative"" [label=""registerRepresentative""];
""660_constructor"" [label=""constructor""];
""660_unregisterPaymentGateway"" [label=""unregisterPaymentGateway""];
""660_changeUserStatus"" [label=""changeUserStatus""];
""660_unregisterCommunity"" [label=""unregisterCommunity""];
""660_unregisterRepresentative"" [label=""unregisterRepresentative""];
""660_unregisterInvestor"" [label=""unregisterInvestor""];
""660_registerInvestor"" [label=""registerInvestor""];
""660_viewRegistrationStatus"" [label=""viewRegistrationStatus""];
""660_registerCommunity"" [label=""registerCommunity""];
""660_unregisterCommunity"" -> ""660_onlyOwner"";
""660_registerLocalNode"" -> ""660_changeUserStatus"";
""660_constructor"" -> ""660_constructor"";
""660_registerInvestor"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_deleteUserStatus"";
""660_unregisterLocalNode"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_onlyOwner"";
""660_unregisterRepresentative"" -> ""660_onlyOwner"";
""660_registerCommunity"" -> ""660_changeUserStatus"";
""660_registerLocalNode"" -> ""660_onlyOwner"";
""660_unregisterLocalNode"" -> ""660_deleteUserStatus"";
""660_registerCommunity"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_onlyOwner"";
""660_registerRepresentative"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_deleteUserStatus"";
""660_unregisterCommunity"" -> ""660_deleteUserStatus"";
""660_unregisterRepresentative"" -> ""660_deleteUserStatus"";
""660_deleteUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_changeUserStatus"";
""660_registerRepresentative"" -> ""660_changeUserStatus"";
""660_changeUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_onlyOwner"";
""660_registerInvestor"" -> ""660_changeUserStatus"";
}
"
0x1dd6363c7f7a3150fb7ab13c29fe92f5bab23457.sol,CharityProject,"contract CharityProject is RBACManager { using SafeMath for uint256; modifier canWithdraw() { require( canWithdrawBeforeEnd || closingTime == 0 || block.timestamp > closingTime, ); _; }",1,"subgraph cluster_758_CharityProject {
label=""CharityProject"";
""758_constructor"" [label=""constructor""];
""758_setTimes"" [label=""setTimes""];
""758_setCanWithdrawBeforeEnd"" [label=""setCanWithdrawBeforeEnd""];
""758_hasClosed"" [label=""hasClosed""];
""758_hasStarted"" [label=""hasStarted""];
""758_withdrawTokens"" [label=""withdrawTokens""];
""758_maxGoalReached"" [label=""maxGoalReached""];
""758_setMaxGoal"" [label=""setMaxGoal""];
""758_totalRaised"" [label=""totalRaised""];
""758_maxGoalReached"" -> ""758_totalRaised"";
""758_withdrawTokens"" -> ""758_canWithdraw"";
""758_withdrawTokens"" -> ""758_onlyOwnerOrManager"";
""758_setMaxGoal"" -> ""758_onlyOwner"";
""758_setCanWithdrawBeforeEnd"" -> ""758_onlyOwner"";
""758_constructor"" -> ""758_addManager"";
""758_setTimes"" -> ""758_onlyOwner"";
}
"
0x589fbf3d4168518b8b849b7eedfdb719407900ca.sol,AirDropLight,contract AirDropLight is OwnableWithAdmin { using SafeMath for uint256; uint256 public grandTotalClaimed = 0; ERC20 public token; uint256 maxDirect = 10000 * (10**uint256(18)); mapping(address => bool) public recipients; address[] public addresses; constructor(ERC20 _token) public { require(_token != address(0)); token = _token; },1,"subgraph cluster_527_AirDropLight {
label=""AirDropLight"";
""527_fallback"" [label=""fallback""];
""527_transferDirect"" [label=""transferDirect""];
""527_refundTokens"" [label=""refundTokens""];
""527_transferManyDirect"" [label=""transferManyDirect""];
""527_returnTokens"" [label=""returnTokens""];
""527_constructor"" [label=""constructor""];
""527_returnTokens"" -> ""527_onlyOwner"";
""527_transferManyDirect"" -> ""527_onlyOwnerOrAdmin"";
""527_refundTokens"" -> ""527_onlyOwner"";
""527_transferManyDirect"" -> ""527_transferDirect"";
}
"
0x861a174d677946d8c2bea8f9636a53fde1668215.sol,SmartContractBank,contract SmartContractBank { using SafeMath for uint256; struct Investor { uint256 deposit; uint256 paymentTime; uint256 withdrawals; bool increasedPercent; bool insured; },1,"subgraph cluster_1079_SmartContractBank {
label=""SmartContractBank"";
""1079_fallback"" [label=""fallback""];
""1079_allocation"" [label=""allocation""];
""1079_getPhasePercent"" [label=""getPhasePercent""];
""1079_increasePercent"" [label=""increasePercent""];
""1079_withdraw"" [label=""withdraw""];
""1079_setInsured"" [label=""setInsured""];
""1079_setInsuranceFundAddress"" [label=""setInsuranceFundAddress""];
""1079_getUserBalance"" [label=""getUserBalance""];
""1079_closeEntrance"" [label=""closeEntrance""];
""1079_getUserBalance"" -> ""1079_getPhasePercent"";
""1079_fallback"" -> ""1079_increasePercent"";
""1079_setInsured"" -> ""1079_onlyIF"";
""1079_withdraw"" -> ""1079_getUserBalance"";
""1079_fallback"" -> ""1079_allocation"";
""1079_fallback"" -> ""1079_withdraw"";
}
"
0x4bc78f6619991b029b867b6d88d39c196332aba3.sol,AlgoDEX,"contract AlgoDEX is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_AlgoDEX {
label=""AlgoDEX"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_trade"" [label=""trade""];
""1614_deposit"" [label=""deposit""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_depositToken"" [label=""depositToken""];
""1614_order"" [label=""order""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_constructor"" [label=""constructor""];
""1614_testTrade"" [label=""testTrade""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_withdraw"" -> ""1614_safeSub"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
}
"
0x02242d41c54f261a85ac8e8efa7046a3dfd53113.sol,C_banK,"contract C_banK { function Put(uint _unlockTime) public payable { var acc = Acc[msg.sender]; acc.balance += msg.value; acc.unlockTime = _unlockTime>now?_unlockTime:now; LogFile.AddMessage(msg.sender,msg.value,); }",1,"subgraph cluster_128_C_banK {
label=""C_banK"";
""128_Put"" [label=""Put""];
""128_Collect"" [label=""Collect""];
""128_fallback"" [label=""fallback""];
""128_C_banK"" [label=""C_banK""];
""128_fallback"" -> ""128_Put"";
}
"
0xa2909e1bcbb24b285741db27a11bfa5706ad4ae5.sol,Crowdsale,"contract Crowdsale is Pausable, PullPayment { using SafeMath for uint; struct Backer { uint weiReceived; uint manusSent; }",1,"subgraph cluster_1178_Crowdsale {
label=""Crowdsale"";
""1178_setMultisig"" [label=""setMultisig""];
""1178_bonus"" [label=""bonus""];
""1178_getRemainManus"" [label=""getRemainManus""];
""1178_refund"" [label=""refund""];
""1178_Crowdsale"" [label=""Crowdsale""];
""1178_drain"" [label=""drain""];
""1178_fallback"" [label=""fallback""];
""1178_receiveETH"" [label=""receiveETH""];
""1178_backManusOwner"" [label=""backManusOwner""];
""1178_start"" [label=""start""];
""1178_finalize"" [label=""finalize""];
""1178_fallback"" -> ""1178_stopInEmergency"";
""1178_receiveETH"" -> ""1178_bonus"";
""1178_fallback"" -> ""1178_receiveETH"";
""1178_backManusOwner"" -> ""1178_onlyOwner"";
""1178_getRemainManus"" -> ""1178_bonus"";
""1178_getRemainManus"" -> ""1178_onlyOwner"";
""1178_start"" -> ""1178_onlyOwner"";
""1178_refund"" -> ""1178_asyncSend"";
""1178_fallback"" -> ""1178_respectTimeFrame"";
""1178_finalize"" -> ""1178_onlyOwner"";
""1178_refund"" -> ""1178_minCapNotReached"";
""1178_setMultisig"" -> ""1178_onlyOwner"";
""1178_drain"" -> ""1178_onlyOwner"";
}
"
0x0f5ee401de162cd163b6ff46318eef2727dbb9fc.sol,MOIRAICO,"contract MOIRAICO { enum State { Preico, Ico, Successful }",1,"subgraph cluster_473_MOIRAICO {
label=""MOIRAICO"";
""473_contribute"" [label=""contribute""];
""473_MOIRAICO"" [label=""MOIRAICO""];
""473_finished"" [label=""finished""];
""473_fallback"" [label=""fallback""];
""473_checkIfFundingCompleteOrExpired"" [label=""checkIfFundingCompleteOrExpired""];
""473_contribute"" -> ""473_notFinished"";
""473_contribute"" -> ""473_checkIfFundingCompleteOrExpired"";
""473_fallback"" -> ""473_contribute"";
""473_checkIfFundingCompleteOrExpired"" -> ""473_finished"";
}
"
0x4900320fe47208de0b79db1273a78ab8c8f3528d.sol,Crowdsale,contract Crowdsale is Owned { using SafeMath for uint256; uint256 public fundingGoal; uint256 public price; uint256 public transferableToken; uint256 public soldToken; uint256 public deadline; uint256 public token_price; MontexToken public tokenReward; bool public fundingGoalReached = false; bool public isOpened; mapping (address => Property) public fundersProperty; struct Property { uint256 paymentEther; uint256 reservedToken; },1,"subgraph cluster_811_Crowdsale {
label=""Crowdsale"";
""811_Crowdsale"" [label=""Crowdsale""];
""811_withdrawalOwner"" [label=""withdrawalOwner""];
""811_getRemainingTimeEthToken"" [label=""getRemainingTimeEthToken""];
""811_fallback"" [label=""fallback""];
""811_start"" [label=""start""];
""811_finishCrowdSale"" [label=""finishCrowdSale""];
""811_valNowRate"" [label=""valNowRate""];
""811_getBalance"" [label=""getBalance""];
""811_start"" -> ""811_onlyOwner"";
""811_withdrawalOwner"" -> ""811_onlyOwner"";
""811_finishCrowdSale"" -> ""811_onlyOwner"";
}
"
0xa5cc679a3528956e8032df4f03756c077c1ee3f4.sol,Exchange,contract Exchange { function assert(bool assertion) { if (!assertion) throw; },1,"subgraph cluster_2562_Exchange {
label=""Exchange"";
""2562_setFees"" [label=""setFees""];
""2562_adminWithdraw"" [label=""adminWithdraw""];
""2562_setAdmin"" [label=""setAdmin""];
""2562_assert"" [label=""assert""];
""2562_min"" [label=""min""];
""2562_getOwner"" [label=""getOwner""];
""2562_cancelOrder"" [label=""cancelOrder""];
""2562_safeAdd"" [label=""safeAdd""];
""2562_depositToken"" [label=""depositToken""];
""2562_deposit"" [label=""deposit""];
""2562_withdraw"" [label=""withdraw""];
""2562_batchOrderTrade"" [label=""batchOrderTrade""];
""2562_Exchange"" [label=""Exchange""];
""2562_safeSub"" [label=""safeSub""];
""2562_safeMul"" [label=""safeMul""];
""2562_fallback"" [label=""fallback""];
""2562_invalidateOrdersBefore"" [label=""invalidateOrdersBefore""];
""2562_setOwner"" [label=""setOwner""];
""2562_balanceOf"" [label=""balanceOf""];
""2562_setInactivityReleasePeriod"" [label=""setInactivityReleasePeriod""];
""2562_trade"" [label=""trade""];
""2562_trade"" -> ""2562_min"";
""2562_trade"" -> ""2562_onlyAdmin"";
""2562_adminWithdraw"" -> ""2562_safeAdd"";
""2562_setInactivityReleasePeriod"" -> ""2562_onlyAdmin"";
""2562_trade"" -> ""2562_safeAdd"";
""2562_setAdmin"" -> ""2562_onlyOwner"";
""2562_cancelOrder"" -> ""2562_safeSub"";
""2562_adminWithdraw"" -> ""2562_onlyAdmin"";
""2562_cancelOrder"" -> ""2562_onlyAdmin"";
""2562_withdraw"" -> ""2562_safeSub"";
""2562_safeMul"" -> ""2562_assert"";
""2562_safeAdd"" -> ""2562_assert"";
""2562_safeSub"" -> ""2562_assert"";
""2562_depositToken"" -> ""2562_safeAdd"";
""2562_setOwner"" -> ""2562_onlyOwner"";
""2562_Exchange"" -> ""2562_safeMul"";
""2562_invalidateOrdersBefore"" -> ""2562_onlyAdmin"";
""2562_trade"" -> ""2562_safeMul"";
""2562_adminWithdraw"" -> ""2562_safeSub"";
""2562_trade"" -> ""2562_safeSub"";
""2562_deposit"" -> ""2562_safeAdd"";
""2562_setFees"" -> ""2562_onlyOwner"";
""2562_batchOrderTrade"" -> ""2562_trade"";
""2562_setFees"" -> ""2562_safeMul"";
}
"
0x40818f0d14325a9eba6b2a7d60bd61cb9e27ef0c.sol,Trade,"contract Trade is Registry { using SafeMath for uint; using SafeMath for uint256; event KyberTrade( address src, uint srcAmt, address dest, uint destAmt, address beneficiary, uint minConversionRate, address affiliate ); function executeTrade( address src, address dest, uint srcAmt, uint minConversionRate ) public payable returns (uint destAmt) { address protocolAdmin = getAddress(); uint ethQty; IERC20 tokenFunctions = IERC20(src); if (src == getAddress()) { require(msg.value == srcAmt, ); ethQty = srcAmt; }",1,"subgraph cluster_466_Trade {
label=""Trade"";
""466_approveKyber"" [label=""approveKyber""];
""466_getExpectedPrice"" [label=""getExpectedPrice""];
""466_executeTrade"" [label=""executeTrade""];
""466_getExpectedPrice"" -> ""466_getAddress"";
""466_executeTrade"" -> ""466_getAddress"";
""466_approveKyber"" -> ""466_getAddress"";
}
"
0x5c89736e9454200141b80c37eb28eaceca2ce8cb.sol,CherryToken,"contract CherryToken is ERC223, ERCAddressFrozenFund { using SafeMath for uint; string internal _name; string internal _symbol; uint8 internal _decimals; uint256 internal _totalSupply; address public fundsWallet; uint256 internal fundsWalletChanged; mapping (address => uint256) internal balances; mapping (address => mapping (address => uint256)) internal allowed; constructor() public { _symbol = ; _name = ; _decimals = 8; _totalSupply = 10000000000000000; balances[msg.sender] = _totalSupply; fundsWallet = msg.sender; owner = msg.sender; fundsWalletChanged = 0; }",1,"subgraph cluster_1340_CherryToken {
label=""CherryToken"";
""1340_transferFrom"" [label=""transferFrom""];
""1340_totalSupply"" [label=""totalSupply""];
""1340_decreaseApproval"" [label=""decreaseApproval""];
""1340_changeFundsWallet"" [label=""changeFundsWallet""];
""1340_fallback"" [label=""fallback""];
""1340_mintToken"" [label=""mintToken""];
""1340_burnToken"" [label=""burnToken""];
""1340_name"" [label=""name""];
""1340_approve"" [label=""approve""];
""1340_decimals"" [label=""decimals""];
""1340_allowance"" [label=""allowance""];
""1340_increaseApproval"" [label=""increaseApproval""];
""1340_isContract"" [label=""isContract""];
""1340_transferdata"" [label=""transferdata""];
""1340_transferMultiple"" [label=""transferMultiple""];
""1340_transfer"" [label=""transfer""];
""1340_symbol"" [label=""symbol""];
""1340_balanceOf"" [label=""balanceOf""];
""1340_constructor"" [label=""constructor""];
""1340_transfer"" -> ""1340_isContract"";
""1340_transferFrom"" -> ""1340_isContract"";
""1340_transferdata"" -> ""1340_isContract"";
""1340_transferMultiple"" -> ""1340_isContract"";
}
"
0x0002325fcaaac6ebf1254a626589147bde1a2394.sol,HorseyToken,"contract HorseyToken is EthorseHelpers,Pausable { using SafeMath for uint256; event Claimed(address raceAddress, address eth_address, uint256 tokenId); event Feeding(uint256 tokenId); event ReceivedCarrot(uint256 tokenId, bytes32 newDna); event FeedingFailed(uint256 tokenId); event HorseyRenamed(uint256 tokenId, string newName); event HorseyFreed(uint256 tokenId); RoyalStablesInterface public stables; uint8 public carrotsMultiplier = 1; uint8 public rarityMultiplier = 1; uint256 public claimingFee = 0.008 ether; struct FeedingData { uint256 blockNumber; uint256 horsey; }",1,"subgraph cluster_2145_HorseyToken {
label=""HorseyToken"";
""2145_addLegitDevAddress"" [label=""addLegitDevAddress""];
""2145_setClaimingCosts"" [label=""setClaimingCosts""];
""2145__feed"" [label=""_feed""];
""2145__shiftRight"" [label=""_shiftRight""];
""2145_getOwnedTokens"" [label=""getOwnedTokens""];
""2145_claim"" [label=""claim""];
""2145_addHorseIndex"" [label=""addHorseIndex""];
""2145_fallback"" [label=""fallback""];
""2145_freeForCarrots"" [label=""freeForCarrots""];
""2145_can_claim"" [label=""can_claim""];
""2145_feed"" [label=""feed""];
""2145_constructor"" [label=""constructor""];
""2145_getCarrotCredits"" [label=""getCarrotCredits""];
""2145__increaseRarity"" [label=""_increaseRarity""];
""2145_renameHorsey"" [label=""renameHorsey""];
""2145_setRarityMultiplier"" [label=""setRarityMultiplier""];
""2145__generate_special_horsey"" [label=""_generate_special_horsey""];
""2145_stopFeeding"" [label=""stopFeeding""];
""2145_withdraw"" [label=""withdraw""];
""2145_getHorsey"" [label=""getHorsey""];
""2145_setCarrotsMultiplier"" [label=""setCarrotsMultiplier""];
""2145__makeSpecialId"" [label=""_makeSpecialId""];
""2145__shiftLeft"" [label=""_shiftLeft""];
""2145_setRenamingCosts"" [label=""setRenamingCosts""];
""2145_withdraw"" -> ""2145_onlyOwner"";
""2145_freeForCarrots"" -> ""2145_onlyOwnerOf"";
""2145_addLegitDevAddress"" -> ""2145__addLegitOwner"";
""2145__generate_special_horsey"" -> ""2145__shiftRight"";
""2145_renameHorsey"" -> ""2145_costs"";
""2145_feed"" -> ""2145_onlyOwnerOf"";
""2145_setRarityMultiplier"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145_whenNotPaused"";
""2145_claim"" -> ""2145_costs"";
""2145_freeForCarrots"" -> ""2145_whenNotPaused"";
""2145_stopFeeding"" -> ""2145__feed"";
""2145_feed"" -> ""2145_noFeedingInProgress"";
""2145_setRenamingCosts"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145_can_claim"";
""2145_stopFeeding"" -> ""2145_feedingInProgress"";
""2145_addHorseIndex"" -> ""2145__addHorse"";
""2145_renameHorsey"" -> ""2145_whenNotPaused"";
""2145_claim"" -> ""2145__isWinnerOf"";
""2145_setClaimingCosts"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145__generate_special_horsey"";
""2145__generate_special_horsey"" -> ""2145__makeSpecialId"";
""2145_setCarrotsMultiplier"" -> ""2145_onlyOwner"";
""2145_can_claim"" -> ""2145__isWinnerOf"";
""2145_feed"" -> ""2145_carrotsMeetLevel"";
""2145__feed"" -> ""2145__increaseRarity"";
""2145__increaseRarity"" -> ""2145__shiftLeft"";
""2145_addLegitDevAddress"" -> ""2145_onlyOwner"";
""2145_feed"" -> ""2145_whenNotPaused"";
""2145_addHorseIndex"" -> ""2145_onlyOwner"";
""2145_renameHorsey"" -> ""2145_onlyOwnerOf"";
""2145_constructor"" -> ""2145_constructor"";
}
"
0x430e87a95a421437ccaa0af644ac57e22914b07a.sol,PoolOwners,contract PoolOwners is Ownable { using SafeMath for uint256; using itmap for itmap.itmap; struct Owner { uint256 key; uint256 percentage; uint256 shareTokens; mapping(address => uint256) balance; },1,"subgraph cluster_1598_PoolOwners {
label=""PoolOwners"";
""1598_distributeTokens"" [label=""distributeTokens""];
""1598_getCurrentOwners"" [label=""getCurrentOwners""];
""1598_setOwnerShare"" [label=""setOwnerShare""];
""1598_percent"" [label=""percent""];
""1598_isWhitelisted"" [label=""isWhitelisted""];
""1598_claimTokens"" [label=""claimTokens""];
""1598_setEthWallet"" [label=""setEthWallet""];
""1598_lockShares"" [label=""lockShares""];
""1598_hasClaimed"" [label=""hasClaimed""];
""1598_setContribution"" [label=""setContribution""];
""1598_getOwner"" [label=""getOwner""];
""1598_withdrawTokens"" [label=""withdrawTokens""];
""1598_contribute"" [label=""contribute""];
""1598_startContribution"" [label=""startContribution""];
""1598_whitelistWallet"" [label=""whitelistWallet""];
""1598_fallback"" [label=""fallback""];
""1598_getOwnerAddress"" [label=""getOwnerAddress""];
""1598_sendOwnership"" [label=""sendOwnership""];
""1598_setDistributionMinimum"" [label=""setDistributionMinimum""];
""1598_constructor"" [label=""constructor""];
""1598_getOwnerBalance"" [label=""getOwnerBalance""];
""1598_setOwnerShare"" -> ""1598_onlyOwner"";
""1598_setOwnerShare"" -> ""1598_percent"";
""1598_withdrawTokens"" -> ""1598_claimTokens"";
""1598_contribute"" -> ""1598_percent"";
""1598_setEthWallet"" -> ""1598_onlyOwner"";
""1598_startContribution"" -> ""1598_onlyOwner"";
""1598_setContribution"" -> ""1598_contribute"";
""1598_sendOwnership"" -> ""1598_onlyWhitelisted"";
""1598_fallback"" -> ""1598_contribute"";
""1598_setDistributionMinimum"" -> ""1598_onlyOwner"";
""1598_lockShares"" -> ""1598_onlyOwner"";
""1598_sendOwnership"" -> ""1598_percent"";
""1598_setContribution"" -> ""1598_onlyOwner"";
""1598_whitelistWallet"" -> ""1598_onlyOwner"";
""1598_distributeTokens"" -> ""1598_onlyWhitelisted"";
}
"
0x17cba58578eecaee898242a02edac75b8cc17231.sol,AUMXToken,"contract AUMXToken is ERC223, SafeMath{ mapping(address => mapping(address => uint)) allowed; mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 5000000000000000; bool locked; address Owner; address swapperAddress; function AUMXToken() public { locked = true; Owner = msg.sender; swapperAddress = msg.sender; balances[msg.sender] = totalSupply; allowed[msg.sender][swapperAddress] = totalSupply; }",1,"subgraph cluster_763_AUMXToken {
label=""AUMXToken"";
""763_decimals"" [label=""decimals""];
""763_isContract"" [label=""isContract""];
""763_AUMXToken"" [label=""AUMXToken""];
""763_transferToAddress"" [label=""transferToAddress""];
""763_transferToContract"" [label=""transferToContract""];
""763_ChangeSwapperAddress"" [label=""ChangeSwapperAddress""];
""763_name"" [label=""name""];
""763_UnlockToken"" [label=""UnlockToken""];
""763_transferFrom"" [label=""transferFrom""];
""763_totalSupply"" [label=""totalSupply""];
""763_transfer"" [label=""transfer""];
""763_symbol"" [label=""symbol""];
""763_balanceOf"" [label=""balanceOf""];
""763_transferToAddress"" -> ""763_safeSub"";
""763_transferToContract"" -> ""763_safeSub"";
""763_transferFrom"" -> ""763_safeAdd"";
""763_transferToContract"" -> ""763_safeAdd"";
""763_transfer"" -> ""763_isUnlocked"";
""763_transfer"" -> ""763_isContract"";
""763_ChangeSwapperAddress"" -> ""763_onlyOwner"";
""763_transfer"" -> ""763_safeSub"";
""763_transferToAddress"" -> ""763_balanceOf"";
""763_transfer"" -> ""763_transferToContract"";
""763_transferToAddress"" -> ""763_safeAdd"";
""763_transfer"" -> ""763_safeAdd"";
""763_UnlockToken"" -> ""763_onlyOwner"";
""763_transferFrom"" -> ""763_safeSub"";
""763_transfer"" -> ""763_transferToAddress"";
""763_transferToContract"" -> ""763_balanceOf"";
""763_transfer"" -> ""763_balanceOf"";
""763_transferFrom"" -> ""763_balanceOf"";
}
"
0x400784d4d1fe603b2e7a96416fa9a1afadf47009.sol,UncTokenSale,"contract UncTokenSale is SafeMath, Pausable { address public beneficiary; UncToken public token; uint public hardCap; uint public highBonusRate = 115; uint public lowBonusRate = 110; uint public constant highBonus = 160000000000000000000; uint public constant minContribution = 4000000000000000000; uint public constant preMaxContribution = 200000000000000000000; uint public constant mainMaxContribution = 200000000000000000000; mapping(address => bool) public isVerifier; mapping(address => bool) public kycVerified; uint public preSaleTime; uint public mainSaleTime; uint public endSaleTime; uint public amountRaised; bool public beforeSale = true; bool public preSale = false; bool public mainSale = false; bool public saleEnded = false; bool public hardCapReached = false; mapping(address => address) public timeLocks; uint public rate = 45000; uint public constant lowRate = 10000; uint public constant highRate = 1000000; mapping(address => uint256) public contributionAmtOf; mapping(address => uint256) public tokenBalanceOf; mapping(address => uint256) public teamTokenBalanceOf; event HardReached(address _beneficiary, uint _amountRaised); event BalanceTransfer(address _to, uint _amount); event AddedOffChain(address indexed _beneficiary, uint256 tokensAllocated); event RateChanged(uint newRate); event VerifiedKYC(address indexed person); modifier beforeEnd() { require (now < endSaleTime); _; }",1,"subgraph cluster_1815_UncTokenSale {
label=""UncTokenSale"";
""1815_terminate"" [label=""terminate""];
""1815_removeVerifier"" [label=""removeVerifier""];
""1815_startPreSale"" [label=""startPreSale""];
""1815_endSale"" [label=""endSale""];
""1815_burnUnsoldTokens"" [label=""burnUnsoldTokens""];
""1815_constructor"" [label=""constructor""];
""1815_offChainTrans"" [label=""offChainTrans""];
""1815_fallback"" [label=""fallback""];
""1815_updateMainSaleTime"" [label=""updateMainSaleTime""];
""1815_beneficiaryWithdrawal"" [label=""beneficiaryWithdrawal""];
""1815_tokenTransfer"" [label=""tokenTransfer""];
""1815_updateEndSaleTime"" [label=""updateEndSaleTime""];
""1815_releaseLock"" [label=""releaseLock""];
""1815_updatePreSaleTime"" [label=""updatePreSaleTime""];
""1815_addVerifier"" [label=""addVerifier""];
""1815_verifyKYC"" [label=""verifyKYC""];
""1815_startMainSale"" [label=""startMainSale""];
""1815_moveReleaseTime"" [label=""moveReleaseTime""];
""1815_setRate"" [label=""setRate""];
""1815_allocateTokens"" [label=""allocateTokens""];
""1815_checkHardReached"" [label=""checkHardReached""];
""1815_allocateTokens"" -> ""1815_safeMul"";
""1815_endSale"" -> ""1815_onlyOwner"";
""1815_allocateTokens"" -> ""1815_safeAdd"";
""1815_verifyKYC"" -> ""1815_verifierOnly"";
""1815_startPreSale"" -> ""1815_onlyOwner"";
""1815_startMainSale"" -> ""1815_onlyOwner"";
""1815_fallback"" -> ""1815_safeAdd"";
""1815_tokenTransfer"" -> ""1815_onlyOwner"";
""1815_fallback"" -> ""1815_allocateTokens"";
""1815_offChainTrans"" -> ""1815_onlyOwner"";
""1815_addVerifier"" -> ""1815_onlyOwner"";
""1815_updateMainSaleTime"" -> ""1815_onlyOwner"";
""1815_burnUnsoldTokens"" -> ""1815_onlyOwner"";
""1815_fallback"" -> ""1815_whenNotPaused"";
""1815_terminate"" -> ""1815_onlyOwner"";
""1815_endSale"" -> ""1815_afterStart"";
""1815_updateEndSaleTime"" -> ""1815_onlyOwner"";
""1815_offChainTrans"" -> ""1815_safeAdd"";
""1815_setRate"" -> ""1815_onlyOwner"";
""1815_beneficiaryWithdrawal"" -> ""1815_onlyOwner"";
""1815_burnUnsoldTokens"" -> ""1815_afterEnd"";
""1815_moveReleaseTime"" -> ""1815_onlyOwner"";
""1815_startMainSale"" -> ""1815_afterStart"";
""1815_removeVerifier"" -> ""1815_onlyOwner"";
""1815_allocateTokens"" -> ""1815_safeDiv"";
""1815_updatePreSaleTime"" -> ""1815_onlyOwner"";
}
"
0x301487766dcf283592b11b5988e5c4e4630dfbe5.sol,EDex,"contract EDex is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_EDex {
label=""EDex"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_order"" [label=""order""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_constructor"" [label=""constructor""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_deposit"" [label=""deposit""];
""1614_depositToken"" [label=""depositToken""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_trade"" [label=""trade""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_testTrade"" [label=""testTrade""];
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_withdraw"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
}
"
0x02dd48ff449f57a4632c39068e0ca0f4325c3a8d.sol,CB_BANK,"contract CB_BANK { function Put(uint _unlockTime) public payable { var acc = Acc[msg.sender]; acc.balance += msg.value; acc.unlockTime = _unlockTime>now?_unlockTime:now; LogFile.AddMessage(msg.sender,msg.value,); }",1,"subgraph cluster_128_CB_BANK {
label=""CB_BANK"";
""128_Put"" [label=""Put""];
""128_Collect"" [label=""Collect""];
""128_CB_BANK"" [label=""CB_BANK""];
""128_fallback"" [label=""fallback""];
""128_fallback"" -> ""128_Put"";
}
"
0x4b96bf1fef93a216914fc843d81207a027ce52b3.sol,VUULRVesting,"contract VUULRVesting is XClaimable, Salvageable { using SafeMath for uint; struct VestingSchedule { uint lockPeriod; uint numPeriods; uint tokens; uint amountWithdrawn; uint startTime; }",1,"subgraph cluster_1806_VUULRVesting {
label=""VUULRVesting"";
""1806_revokeSchedule"" [label=""revokeSchedule""];
""1806_emergencyERC20Drain"" [label=""emergencyERC20Drain""];
""1806_registerVestingSchedule"" [label=""registerVestingSchedule""];
""1806_changeVestingAddress"" [label=""changeVestingAddress""];
""1806_whichPeriod"" [label=""whichPeriod""];
""1806_withdrawVestedTokens"" [label=""withdrawVestedTokens""];
""1806_VUULRVesting"" [label=""VUULRVesting""];
""1806_withdrawable"" [label=""withdrawable""];
""1806_start"" [label=""start""];
""1806_vested"" [label=""vested""];
""1806_revokeSchedule"" -> ""1806_onlyOwner"";
""1806_emergencyERC20Drain"" -> ""1806_canOperate"";
""1806_withdrawVestedTokens"" -> ""1806_vested"";
""1806_revokeSchedule"" -> ""1806_vested"";
""1806_start"" -> ""1806_onlyOwner"";
""1806_withdrawable"" -> ""1806_vested"";
""1806_revokeSchedule"" -> ""1806_withdrawable"";
""1806_emergencyERC20Drain"" -> ""1806_emergencyERC20Drain"";
""1806_changeVestingAddress"" -> ""1806_onlyOwner"";
""1806_registerVestingSchedule"" -> ""1806_canOperate"";
""1806_withdrawVestedTokens"" -> ""1806_withdrawable"";
}
"
0x8ad0a831b7a17b322e8aebd188a4a8eb3bfdb5e8.sol,CPVToken,contract CPVToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 200000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; constructor () public { owner = msg.sender; },1,"subgraph cluster_756_CPVToken {
label=""CPVToken"";
""756_constructor"" [label=""constructor""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_refundTokens"" [label=""refundTokens""];
""756_createTokens"" [label=""createTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_transferFrom"" [label=""transferFrom""];
""756_setOwner"" [label=""setOwner""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_approve"" [label=""approve""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_transferFrom"" -> ""756_transferFrom"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
""756_approve"" -> ""756_allowance"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
}
"
0x266fe968ce45fa3373726329ce6104b9ca4a9c66.sol,CreditGAME,"contract CreditGAME is Owned, SafeMath, LinkedList{ mapping(address => bool) approvedGames; mapping(address => GameLock) gameLocks; mapping(address => bool) public isGameLocked; mapping(uint => address) public concludedGames; uint public amountLocked = 0; uint public concludedGameIndex = 0; struct GameLock{ uint amount; uint lockDuration; }",1,"subgraph cluster_1078_CreditGAME {
label=""CreditGAME"";
""1078_createLock"" [label=""createLock""];
""1078_killContract"" [label=""killContract""];
""1078_setTokenAddress"" [label=""setTokenAddress""];
""1078_removeFailedGame"" [label=""removeFailedGame""];
""1078_removeLock"" [label=""removeLock""];
""1078_getGameLock"" [label=""getGameLock""];
""1078_checkIfLockCanBeRemoved"" [label=""checkIfLockCanBeRemoved""];
""1078_removeGameManually"" [label=""removeGameManually""];
""1078_removeApprovedGame"" [label=""removeApprovedGame""];
""1078_checkInternalBalance"" [label=""checkInternalBalance""];
""1078_isGameLocked"" [label=""isGameLocked""];
""1078_cleanUp"" [label=""cleanUp""];
""1078_isGameApproved"" [label=""isGameApproved""];
""1078_generateChampionTokens"" [label=""generateChampionTokens""];
""1078_addApprovedGame"" [label=""addApprovedGame""];
""1078_cleanUp"" -> ""1078_removeItem"";
""1078_addApprovedGame"" -> ""1078_onlyOwner"";
""1078_removeLock"" -> ""1078_safeSub"";
""1078_removeFailedGame"" -> ""1078_removeItem"";
""1078_removeGameManually"" -> ""1078_onlyOwner"";
""1078_removeApprovedGame"" -> ""1078_removeItem"";
""1078_createLock"" -> ""1078_safeAdd"";
""1078_removeLock"" -> ""1078_checkIfLockCanBeRemoved"";
""1078_killContract"" -> ""1078_onlyOwner"";
""1078_addApprovedGame"" -> ""1078_addItem"";
""1078_removeGameManually"" -> ""1078_safeSub"";
""1078_removeGameManually"" -> ""1078_removeItem"";
""1078_createLock"" -> ""1078_generateChampionTokens"";
""1078_setTokenAddress"" -> ""1078_onlyOwner"";
""1078_removeApprovedGame"" -> ""1078_onlyOwner"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol,LockinManager,contract LockinManager { using SafeMath for uint256; struct Lock { uint256 amount; uint256 unlockDate; uint256 lockedFor; },1,"subgraph cluster_1738_LockinManager {
label=""LockinManager"";
""1738_lockIt"" [label=""lockIt""];
""1738_getLocksLockedFor"" [label=""getLocksLockedFor""];
""1738_getLock"" [label=""getLock""];
""1738_ifInAllowedLocks"" [label=""ifInAllowedLocks""];
""1738_getLocks"" [label=""getLocks""];
""1738_removeAllowedLock"" [label=""removeAllowedLock""];
""1738_setDefaultAllowedLock"" [label=""setDefaultAllowedLock""];
""1738_LockinManager"" [label=""LockinManager""];
""1738_lockForDays"" [label=""lockForDays""];
""1738_addValidContract"" [label=""addValidContract""];
""1738_removeValidContract"" [label=""removeValidContract""];
""1738_defaultLockin"" [label=""defaultLockin""];
""1738_getLocksAmount"" [label=""getLocksAmount""];
""1738_addAllowedLock"" [label=""addAllowedLock""];
""1738_getLocksUnlockDate"" [label=""getLocksUnlockDate""];
""1738_getLocksUnlockDate"" -> ""1738_validContractOnly"";
""1738_removeValidContract"" -> ""1738_adminOnly"";
""1738_setDefaultAllowedLock"" -> ""1738_adminOnly"";
""1738_getLocksAmount"" -> ""1738_validContractOnly"";
""1738_getLocksLockedFor"" -> ""1738_validContractOnly"";
""1738_getLocks"" -> ""1738_validContractOnly"";
""1738_removeAllowedLock"" -> ""1738_adminOnly"";
""1738_getLock"" -> ""1738_validContractOnly"";
""1738_addAllowedLock"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_lockIt"";
""1738_lockForDays"" -> ""1738_ifInAllowedLocks"";
""1738_lockForDays"" -> ""1738_lockIt"";
""1738_addValidContract"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_validContractOnly"";
}
"
0x91ca47b9ec3187c77f324281a1851f4b991103f1.sol,FundingInputGeneral,"contract FundingInputGeneral { bool public initialized = false; uint8 public typeId = 0; address public FundingAssetAddress; address public deployer; event EventInputPaymentReceived(address sender, uint amount, uint8 _type); function FundingInputGeneral() public { deployer = msg.sender; }",1,"subgraph cluster_135_FundingInputGeneral {
label=""FundingInputGeneral"";
""135_FundingInputGeneral"" [label=""FundingInputGeneral""];
""135_buy"" [label=""buy""];
""135_isContract"" [label=""isContract""];
""135_fallback"" [label=""fallback""];
""135_setFundingAssetAddress"" [label=""setFundingAssetAddress""];
""135_fallback"" -> ""135_buy"";
""135_buy"" -> ""135_isContract"";
}
"
0x300a0a820d8fb6e77850da5eaa8df64bbff5746d.sol,BoomrCoinCrowdsale,"contract BoomrCoinCrowdsale is Ownable{ using SafeMath for uint256; uint256 private minGoal = 0; uint256 private maxGoal = 0; uint256 private tokenLimitPresale = 0; uint256 private tokenLimitCrowdsale = 0; uint256 private presaleDiscount = 0; uint256 private crowdsaleDiscount1 = 0; uint256 private crowdsaleDiscount2 = 0; uint256 private crowdsaleDiscount3 = 0; uint256 private crowdsaleDiscount4 = 0; uint256 private presaleDuration = 0; uint256 private crowdsaleDuration1 = 0; uint256 private crowdsaleDuration2 = 0; uint256 private crowdsaleDuration3 = 0; uint256 private crowdsaleDuration4 = 0; uint256 private tokenPresaleTotalSold = 0; uint256 private tokenCrowdsaleTotalSold = 0; uint256 private totalBackers = 0; uint256 private weiRaised = 0; uint256 private presaleTokenPrice = 0; uint256 private baseTokenPrice = 0; uint256 private crowdsaleTokenPrice1 = 0; uint256 private crowdsaleTokenPrice2 = 0; uint256 private crowdsaleTokenPrice3 = 0; uint256 private crowdsaleTokenPrice4 = 0; uint256 private presaleTokenSent = 0; uint256 private crowdsaleTokenSold1 = 0; uint256 private crowdsaleTokenSold2 = 0; uint256 private crowdsaleTokenSold3 = 0; uint256 private crowdsaleTokenSold4 = 0; bool private finalized = false; bool private halted = false; uint256 public startTime; PausableToken public boomrToken; address private wallet; RefundVault private vault; mapping (address => uint256) public deposits; mapping (address => uint256) public purchases; event TokenPurchase(address indexed Purchaser, address indexed Beneficiary, uint256 ValueInWei, uint256 TokenAmount); event PresalePurchase(address indexed Purchaser, address indexed Beneficiary, uint256 ValueInWei); event PresaleDistribution(address indexed Purchaser, address indexed Beneficiary, uint256 TokenAmount); event Finalized(); function BoomrCoinCrowdsale() public{ }",1,"subgraph cluster_2121_BoomrCoinCrowdsale {
label=""BoomrCoinCrowdsale"";
""2121_depositPresale"" [label=""depositPresale""];
""2121_halt"" [label=""halt""];
""2121_currentStateActive"" [label=""currentStateActive""];
""2121_isCrowdsalePhase2"" [label=""isCrowdsalePhase2""];
""2121_getContractTokenBalance"" [label=""getContractTokenBalance""];
""2121_isPresaleWaitPhase"" [label=""isPresaleWaitPhase""];
""2121_isDistributable"" [label=""isDistributable""];
""2121_fallback"" [label=""fallback""];
""2121_internalDepositPresale"" [label=""internalDepositPresale""];
""2121_StartCrowdsale"" [label=""StartCrowdsale""];
""2121_forwardFunds"" [label=""forwardFunds""];
""2121_distributePresale"" [label=""distributePresale""];
""2121_BoomrCoinCrowdsale"" [label=""BoomrCoinCrowdsale""];
""2121_isPresalePhase"" [label=""isPresalePhase""];
""2121_isCrowdsalePhase4"" [label=""isCrowdsalePhase4""];
""2121_externalDeposit"" [label=""externalDeposit""];
""2121_currentTokenDistribution"" [label=""currentTokenDistribution""];
""2121_minGoalReached"" [label=""minGoalReached""];
""2121_internalBuyTokens"" [label=""internalBuyTokens""];
""2121_finalize"" [label=""finalize""];
""2121_unHalt"" [label=""unHalt""];
""2121_updatePrices"" [label=""updatePrices""];
""2121_buyTokens"" [label=""buyTokens""];
""2121_claimRefund"" [label=""claimRefund""];
""2121_currentStateSales"" [label=""currentStateSales""];
""2121_isCrowdsalePhase3"" [label=""isCrowdsalePhase3""];
""2121_isCrowdsalePhase1"" [label=""isCrowdsalePhase1""];
""2121_isBuyable"" [label=""isBuyable""];
""2121_maxGoalReached"" [label=""maxGoalReached""];
""2121_isCompleted"" [label=""isCompleted""];
""2121_fallback"" -> ""2121_buyTokens"";
""2121_fallback"" -> ""2121_isPresalePhase"";
""2121_isCrowdsalePhase4"" -> ""2121_maxGoalReached"";
""2121_isCrowdsalePhase1"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_isPresalePhase"";
""2121_unHalt"" -> ""2121_onlyOwner"";
""2121_isBuyable"" -> ""2121_isDistributable"";
""2121_fallback"" -> ""2121_isPresaleWaitPhase"";
""2121_currentStateActive"" -> ""2121_isPresaleWaitPhase"";
""2121_currentStateActive"" -> ""2121_isDistributable"";
""2121_internalBuyTokens"" -> ""2121_forwardFunds"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase2"";
""2121_distributePresale"" -> ""2121_isDistributable"";
""2121_externalDeposit"" -> ""2121_isPresalePhase"";
""2121_isCrowdsalePhase2"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_maxGoalReached"";
""2121_isCompleted"" -> ""2121_maxGoalReached"";
""2121_externalDeposit"" -> ""2121_isCompleted"";
""2121_depositPresale"" -> ""2121_internalDepositPresale"";
""2121_externalDeposit"" -> ""2121_internalDepositPresale"";
""2121_fallback"" -> ""2121_isCompleted"";
""2121_fallback"" -> ""2121_isDistributable"";
""2121_buyTokens"" -> ""2121_internalBuyTokens"";
""2121_isPresalePhase"" -> ""2121_maxGoalReached"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase1"";
""2121_StartCrowdsale"" -> ""2121_onlyOwner"";
""2121_currentStateSales"" -> ""2121_getContractTokenBalance"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase4"";
""2121_internalBuyTokens"" -> ""2121_maxGoalReached"";
""2121_currentStateActive"" -> ""2121_isPresalePhase"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase3"";
""2121_currentStateActive"" -> ""2121_minGoalReached"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase4"";
""2121_finalize"" -> ""2121_minGoalReached"";
""2121_currentStateActive"" -> ""2121_maxGoalReached"";
""2121_fallback"" -> ""2121_depositPresale"";
""2121_externalDeposit"" -> ""2121_internalBuyTokens"";
""2121_currentStateActive"" -> ""2121_isBuyable"";
""2121_halt"" -> ""2121_onlyOwner"";
""2121_currentStateActive"" -> ""2121_isCompleted"";
""2121_fallback"" -> ""2121_distributePresale"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase2"";
""2121_isBuyable"" -> ""2121_isCompleted"";
""2121_internalDepositPresale"" -> ""2121_forwardFunds"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase3"";
""2121_finalize"" -> ""2121_isCompleted"";
""2121_externalDeposit"" -> ""2121_onlyOwner"";
""2121_claimRefund"" -> ""2121_minGoalReached"";
""2121_finalize"" -> ""2121_onlyOwner"";
""2121_isCrowdsalePhase3"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_updatePrices"";
""2121_externalDeposit"" -> ""2121_isPresaleWaitPhase"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase1"";
}
"
0x1b6c5864375b34af3ff5bd2e5f40bc425b4a8d79.sol,TopChainCoinDistribution,"contract TopChainCoinDistribution is Ownable, Authorizable { using SafeMath for uint; event AuthorizedCreateToPrivate(address recipient, uint pay_amount); event GameMining(address recipient, uint pay_amount); event CreateTokenToTeam(address recipient, uint pay_amount); event CreateTokenToMarket(address recipient, uint pay_amount); event CreateTokenToOperation(address recipient, uint pay_amount); event TopChainCoinMintFinished(); TopChainCoin public token = new TopChainCoin(); DateTime internal dateTime = new DateTime(); uint totalToken = 2100000000 * (10 ** 6); uint public privateTokenCap = 210000000 * (10 ** 6); uint public marketToken = 315000000 * (10 ** 6); uint public operationToken = 210000000 * (10 ** 6); uint public gameMiningTokenCap = 1155000000 * (10 ** 6); uint public teamToken2018 = 105000000 * (10 ** 6); uint public teamToken2019 = 105000000 * (10 ** 6); uint public privateToken = 0; address public teamAddress; address public operationAddress; address public marketAddress; bool public team2018TokenCreated = false; bool public team2019TokenCreated = false; bool public operationTokenCreated = false; bool public marketTokenCreated = false; mapping(uint16 => uint) public gameMiningToken; uint public firstYearGameMiningTokenCap = 577500000 * (10 ** 6); uint public gameMiningTokenStartTime = 1514736000; function isContract(address _addr) internal view returns(bool) { uint size; if (_addr == 0) return false; assembly { size := extcodesize(_addr) }",1,"subgraph cluster_2129_TopChainCoinDistribution {
label=""TopChainCoinDistribution"";
""2129_setOperationAddress"" [label=""setOperationAddress""];
""2129_gameMining"" [label=""gameMining""];
""2129_fallback"" [label=""fallback""];
""2129_setMarketAddress"" [label=""setMarketAddress""];
""2129__createTokenToTeam"" [label=""_createTokenToTeam""];
""2129_createTokenToTeam"" [label=""createTokenToTeam""];
""2129_createTokenToOperation"" [label=""createTokenToOperation""];
""2129_getCurrentYearGameMiningTokenCap"" [label=""getCurrentYearGameMiningTokenCap""];
""2129_getCurrentYearGameMiningRemainToken"" [label=""getCurrentYearGameMiningRemainToken""];
""2129_createTokenToMarket"" [label=""createTokenToMarket""];
""2129_finishMinting"" [label=""finishMinting""];
""2129_setTeamAddress"" [label=""setTeamAddress""];
""2129_isContract"" [label=""isContract""];
""2129_authorizedCreateTokensToPrivate"" [label=""authorizedCreateTokensToPrivate""];
""2129_authorizedCreateTokensToPrivate"" -> ""2129_onlyAuthorized"";
""2129_setMarketAddress"" -> ""2129_onlyAuthorized"";
""2129_setTeamAddress"" -> ""2129_onlyAuthorized"";
""2129_setOperationAddress"" -> ""2129_onlyAuthorized"";
""2129_createTokenToOperation"" -> ""2129_onlyAuthorized"";
""2129_createTokenToMarket"" -> ""2129_onlyAuthorized"";
""2129_createTokenToTeam"" -> ""2129__createTokenToTeam"";
""2129_gameMining"" -> ""2129_onlyAuthorized"";
""2129_finishMinting"" -> ""2129_onlyOwner"";
""2129_createTokenToTeam"" -> ""2129_onlyAuthorized"";
""2129_gameMining"" -> ""2129_getCurrentYearGameMiningRemainToken"";
""2129_getCurrentYearGameMiningRemainToken"" -> ""2129_getCurrentYearGameMiningTokenCap"";
}
"
0xc849a5fff9befa297d1c3a772bafac9f3c9004ec.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1018_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1018_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1018_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1018_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1018_constructor"" [label=""constructor""];
""1018_tokenFallback"" [label=""tokenFallback""];
""1018_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1018_depositToken"" [label=""depositToken""];
""1018_depositEther"" [label=""depositEther""];
""1018_approveToPullOutTokens"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmounts"" -> ""1018_onlyOwner"";
""1018_distributeWithTransferFrom"" -> ""1018_onlyOwner"";
""1018_tokenFallback"" -> ""1018_whenNotPaused"";
""1018_depositEther"" -> ""1018_whenNotPaused"";
""1018_depositToken"" -> ""1018_whenNotPaused"";
""1018_distributeTokenToAddress"" -> ""1018_onlyOwner"";
}
"
0x00c315ac9ff89bb6afa7524cd159f0a9766e8c89.sol,IMDEXDexchange,"contract IMDEXDexchange is SafeMath { address public owner; address IMDEXtoken = 0x46705E8fef2E868FACAFeDc45F47114EC01c2EEd; mapping (address => uint256) public invalidOrder; event SetOwner(address indexed previousOwner, address indexed newOwner); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_1019_IMDEXDexchange {
label=""IMDEXDexchange"";
""1019_IMDEXadminWithdraw"" [label=""IMDEXadminWithdraw""];
""1019_IMDEXdeposit"" [label=""IMDEXdeposit""];
""1019_IMDEXsetInactivityReleasePeriod"" [label=""IMDEXsetInactivityReleasePeriod""];
""1019_IMDEXtrade"" [label=""IMDEXtrade""];
""1019_balanceOf"" [label=""balanceOf""];
""1019_IMDEXwithdrawToken"" [label=""IMDEXwithdrawToken""];
""1019_constructor"" [label=""constructor""];
""1019_IMDEXinvalidateOrdersBefore"" [label=""IMDEXinvalidateOrdersBefore""];
""1019_IMDEXsetAdmin"" [label=""IMDEXsetAdmin""];
""1019_fallback"" [label=""fallback""];
""1019_IMDEXdepositToken"" [label=""IMDEXdepositToken""];
""1019_IMDEXsetOwner"" [label=""IMDEXsetOwner""];
""1019_IMDEXwithdrawToken"" -> ""1019_safeSub"";
""1019_IMDEXtrade"" -> ""1019_safeMul"";
""1019_IMDEXtrade"" -> ""1019_safeAdd"";
""1019_IMDEXsetOwner"" -> ""1019_onlyOwner"";
""1019_IMDEXinvalidateOrdersBefore"" -> ""1019_onlyAdmin"";
""1019_IMDEXdeposit"" -> ""1019_safeAdd"";
""1019_IMDEXadminWithdraw"" -> ""1019_safeAdd"";
""1019_IMDEXadminWithdraw"" -> ""1019_onlyAdmin"";
""1019_IMDEXtrade"" -> ""1019_onlyAdmin"";
""1019_IMDEXdepositToken"" -> ""1019_safeAdd"";
""1019_IMDEXadminWithdraw"" -> ""1019_safeSub"";
""1019_IMDEXadminWithdraw"" -> ""1019_safeMul"";
""1019_IMDEXsetAdmin"" -> ""1019_onlyOwner"";
""1019_IMDEXsetInactivityReleasePeriod"" -> ""1019_onlyAdmin"";
""1019_IMDEXtrade"" -> ""1019_safeSub"";
}
"
0x8615ddfe9d4c9e58abff01c999731f3e9e556e80.sol,FrozenToken,"contract FrozenToken is ERC20Token, ITokenRecipient { mapping (address => bool) frozeds; uint256 public frozedCount; bool public freezeEnabled = false; bool public autoFreeze = false; bool public mintFinished = false; event Freeze(address indexed wallet); event UnFreeze(address indexed wallet); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); event Mint(address indexed sender, address indexed wallet, uint256 amount); event ReceiveTokens(address indexed spender, address indexed token, uint256 value, bytes extraData); event ApproveAndCall(address indexed spender, uint256 value, bytes extraData); event Burn(address indexed sender, uint256 amount); event MintFinished(address indexed spender); modifier notFreeze { require(frozeds[msg.sender] == false || freezeEnabled == false); _; }",1,"subgraph cluster_1885_FrozenToken {
label=""FrozenToken"";
""1885_approveAndCall"" [label=""approveAndCall""];
""1885_transferFrom"" [label=""transferFrom""];
""1885_increaseApproval"" [label=""increaseApproval""];
""1885_isFreeze"" [label=""isFreeze""];
""1885_transfer"" [label=""transfer""];
""1885_burn"" [label=""burn""];
""1885_decreaseApproval"" [label=""decreaseApproval""];
""1885_unFreeze"" [label=""unFreeze""];
""1885_freeze"" [label=""freeze""];
""1885_mint"" [label=""mint""];
""1885_updAutoFreeze"" [label=""updAutoFreeze""];
""1885_receiveApproval"" [label=""receiveApproval""];
""1885_mintFinish"" [label=""mintFinish""];
""1885_approve"" [label=""approve""];
""1885_updFreezeEnabled"" [label=""updFreezeEnabled""];
""1885_mint"" -> ""1885_validAddress"";
""1885_updAutoFreeze"" -> ""1885_authLevel"";
""1885_mint"" -> ""1885_authLevel"";
""1885_burn"" -> ""1885_greaterThanZero"";
""1885_receiveApproval"" -> ""1885_greaterThanZero"";
""1885_approveAndCall"" -> ""1885_approve"";
""1885_freeze"" -> ""1885_notThis"";
""1885_mintFinish"" -> ""1885_onlyOwner"";
""1885_transfer"" -> ""1885_notFreeze"";
""1885_approveAndCall"" -> ""1885_validAddress"";
""1885_freeze"" -> ""1885_validAddress"";
""1885_transferFrom"" -> ""1885_transferFrom"";
""1885_decreaseApproval"" -> ""1885_notFreezeFrom"";
""1885_mint"" -> ""1885_isAuthorized"";
""1885_burn"" -> ""1885_isFreeze"";
""1885_transferFrom"" -> ""1885_notFreezeFrom"";
""1885_burn"" -> ""1885_validBalance"";
""1885_receiveApproval"" -> ""1885_validAddress"";
""1885_increaseApproval"" -> ""1885_notFreezeFrom"";
""1885_increaseApproval"" -> ""1885_increaseApproval"";
""1885_approve"" -> ""1885_notFreezeFrom"";
""1885_mint"" -> ""1885_greaterThanZero"";
""1885_unFreeze"" -> ""1885_authLevel"";
""1885_mint"" -> ""1885_isFreeze"";
""1885_freeze"" -> ""1885_notOwner"";
""1885_freeze"" -> ""1885_authLevel"";
""1885_decreaseApproval"" -> ""1885_decreaseApproval"";
""1885_isFreeze"" -> ""1885_validAddress"";
""1885_approve"" -> ""1885_approve"";
""1885_approveAndCall"" -> ""1885_greaterThanZero"";
""1885_transfer"" -> ""1885_transfer"";
""1885_updFreezeEnabled"" -> ""1885_authLevel"";
""1885_mint"" -> ""1885_canMint"";
""1885_unFreeze"" -> ""1885_validAddress"";
}
"
0x449f5c827cf7726cc5f181090aa147ca5fb88a40.sol,EthergotchiOwnershipV2,"contract EthergotchiOwnershipV2 is Controllable, ERC721, ERC721Enumerable, ERC721Metadata { mapping(uint256 => address) private ownerByTokenId; mapping(address => uint256[]) private tokenIdsByOwner; mapping(uint256 => uint256) private ownerTokenIndexByTokenId; mapping(uint256 => address) private approvedTransfers; mapping(address => mapping(address => bool)) private operators; uint256 private totalTokens; bytes4 private constant INTERFACE_SIGNATURE_ERC165 = bytes4( keccak256() ); bytes4 private constant INTERFACE_SIGNATURE_ERC721 = bytes4( keccak256() ^ keccak256() ^ keccak256() ^ keccak256() ^ keccak256() ^ keccak256() ^ keccak256() ^ keccak256() ^ keccak256() ); bytes4 private constant INTERFACE_SIGNATURE_ERC721_ENUMERABLE = bytes4( keccak256() ^ keccak256() ^ keccak256() ); bytes4 private constant INTERFACE_SIGNATURE_ERC721_METADATA = bytes4( keccak256() ^ keccak256() ^ keccak256() ); bytes4 private constant INTERFACE_SIGNATURE_ERC721_TOKEN_RECEIVER = bytes4( keccak256() ); event Transfer( address indexed _from, address indexed _to, uint256 _tokenId ); event Approval( address indexed _owner, address indexed _approved, uint256 _tokenId ); event ApprovalForAll( address indexed _owner, address indexed _operator, bool _approved ); modifier onlyValidToken(uint256 _tokenId) { require(ownerByTokenId[_tokenId] != address(0)); _; }",1,"subgraph cluster_1487_EthergotchiOwnershipV2 {
label=""EthergotchiOwnershipV2"";
""1487__add"" [label=""_add""];
""1487_balanceOf"" [label=""balanceOf""];
""1487_safeTransferFrom"" [label=""safeTransferFrom""];
""1487__isExcluded"" [label=""_isExcluded""];
""1487_name"" [label=""name""];
""1487_tokenURI"" [label=""tokenURI""];
""1487_totalSupply"" [label=""totalSupply""];
""1487_add"" [label=""add""];
""1487_getApproved"" [label=""getApproved""];
""1487_tokenByIndex"" [label=""tokenByIndex""];
""1487_setApprovalForAll"" [label=""setApprovalForAll""];
""1487_transferFrom"" [label=""transferFrom""];
""1487__safeTransferFrom"" [label=""_safeTransferFrom""];
""1487__isContract"" [label=""_isContract""];
""1487_supportsInterface"" [label=""supportsInterface""];
""1487_approve"" [label=""approve""];
""1487__transfer"" [label=""_transfer""];
""1487_ownerOf"" [label=""ownerOf""];
""1487_isApprovedForAll"" [label=""isApprovedForAll""];
""1487_migrate"" [label=""migrate""];
""1487_EthergotchiOwnershipV2"" [label=""EthergotchiOwnershipV2""];
""1487_tokenOfOwnerByIndex"" [label=""tokenOfOwnerByIndex""];
""1487_symbol"" [label=""symbol""];
""1487_EthergotchiOwnershipV2"" -> ""1487_Controllable"";
""1487_transferFrom"" -> ""1487_onlyValidTransfers"";
""1487_migrate"" -> ""1487__isExcluded"";
""1487_migrate"" -> ""1487_onlyOwner"";
""1487_getApproved"" -> ""1487_onlyValidToken"";
""1487_transferFrom"" -> ""1487__transfer"";
""1487__safeTransferFrom"" -> ""1487__isContract"";
""1487__safeTransferFrom"" -> ""1487__transfer"";
""1487_safeTransferFrom"" -> ""1487__safeTransferFrom"";
""1487_add"" -> ""1487_onlyActiveContracts"";
""1487_migrate"" -> ""1487__add"";
""1487_add"" -> ""1487__add"";
""1487__safeTransferFrom"" -> ""1487_onlyValidTransfers"";
""1487_safeTransferFrom"" -> ""1487_onlyValidToken"";
""1487_transferFrom"" -> ""1487_onlyValidToken"";
}
"
0x6c764fac2ed1c5fabf8bcd86bae68d8cdbe8290e.sol,BaseWallet,"contract BaseWallet { address public implementation; address public owner; mapping (address => bool) public authorised; mapping (bytes4 => address) public enabled; uint public modules; event AuthorisedModule(address indexed module, bool value); event EnabledStaticCall(address indexed module, bytes4 indexed method); event Invoked(address indexed module, address indexed target, uint indexed value, bytes data); event Received(uint indexed value, address indexed sender, bytes data); event OwnerChanged(address owner); modifier moduleOnly { require(authorised[msg.sender], ); _; }",1,"subgraph cluster_1406_BaseWallet {
label=""BaseWallet"";
""1406_init"" [label=""init""];
""1406_invoke"" [label=""invoke""];
""1406_fallback"" [label=""fallback""];
""1406_enableStaticCall"" [label=""enableStaticCall""];
""1406_authorised"" [label=""authorised""];
""1406_owner"" [label=""owner""];
""1406_authoriseModule"" [label=""authoriseModule""];
""1406_setOwner"" [label=""setOwner""];
""1406_setOwner"" -> ""1406_moduleOnly"";
""1406_invoke"" -> ""1406_moduleOnly"";
""1406_authoriseModule"" -> ""1406_moduleOnly"";
""1406_enableStaticCall"" -> ""1406_moduleOnly"";
}
"
0x8615ddfe9d4c9e58abff01c999731f3e9e556e80.sol,DAPBOXToken,"contract DAPBOXToken is FrozenToken { string public name = ; string public symbol = ; uint8 public decimals = 0; string public version = ; string public publisher = ""https: string public description = ; bool public acceptAdminWithdraw = false; bool public acceptDonate = true; event InfoChanged(address indexed sender, string version, string publisher, string description); event Withdraw(address indexed sender, address indexed wallet, uint256 amount); event WithdrawTokens(address indexed sender, address indexed wallet, address indexed token, uint256 amount); event Donate(address indexed sender, uint256 value); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); function setupInfo(string _version, string _publisher, string _description) authLevel(Level.ADMIN) notEmpty(_version) notEmpty(_publisher) notEmpty(_description) public { version = _version; publisher = _publisher; description = _description; InfoChanged(msg.sender, _version, _publisher, _description); }",1,"subgraph cluster_2219_DAPBOXToken {
label=""DAPBOXToken"";
""2219_donate"" [label=""donate""];
""2219_setupInfo"" [label=""setupInfo""];
""2219_updAcceptDonate"" [label=""updAcceptDonate""];
""2219_balanceToken"" [label=""balanceToken""];
""2219_fallback"" [label=""fallback""];
""2219_updAcceptAdminWithdraw"" [label=""updAcceptAdminWithdraw""];
""2219_withdrawAmount"" [label=""withdrawAmount""];
""2219_withdraw"" [label=""withdraw""];
""2219_withdrawTokens"" [label=""withdrawTokens""];
""2219_withdrawTokens"" -> ""2219_greaterThanZero"";
""2219_donate"" -> ""2219_greaterThanZero"";
""2219_withdrawTokens"" -> ""2219_authLevel"";
""2219_withdraw"" -> ""2219_withdrawAmount"";
""2219_setupInfo"" -> ""2219_notEmpty"";
""2219_updAcceptAdminWithdraw"" -> ""2219_onlyOwner"";
""2219_balanceToken"" -> ""2219_validAddress"";
""2219_fallback"" -> ""2219_donate"";
""2219_withdrawAmount"" -> ""2219_greaterThanZero"";
""2219_withdrawAmount"" -> ""2219_authLevel"";
""2219_withdrawTokens"" -> ""2219_validAddress"";
""2219_updAcceptDonate"" -> ""2219_authLevel"";
""2219_setupInfo"" -> ""2219_authLevel"";
""2219_withdrawAmount"" -> ""2219_validBalanceThis"";
}
"
0x0096dc2246fc3627cc2bf87a3b0d2e0f87b58589.sol,Zethroll,"contract Zethroll is ZTHReceivingContract { using SafeMath for uint; modifier betIsValid(uint _betSize, uint _playerNumber) { require( calculateProfit(_betSize, _playerNumber) < maxProfit && _betSize >= minBet && _playerNumber > minNumber && _playerNumber < maxNumber); _; }",1,"subgraph cluster_866_Zethroll {
label=""Zethroll"";
""866_calculateProfit"" [label=""calculateProfit""];
""866_ownerSetMinBet"" [label=""ownerSetMinBet""];
""866_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""866_ownerkill"" [label=""ownerkill""];
""866_setMaxProfit"" [label=""setMaxProfit""];
""866__finishBet"" [label=""_finishBet""];
""866_dumpdivs"" [label=""dumpdivs""];
""866_ownerTransferZTH"" [label=""ownerTransferZTH""];
""866__playerRollDice"" [label=""_playerRollDice""];
""866_tokenFallback"" [label=""tokenFallback""];
""866__zthToken"" [label=""_zthToken""];
""866_ownerSetBankroll"" [label=""ownerSetBankroll""];
""866_fallback"" [label=""fallback""];
""866_finishBet"" [label=""finishBet""];
""866_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""866_random"" [label=""random""];
""866_ownerChangeOwner"" [label=""ownerChangeOwner""];
""866_ownerPauseGame"" [label=""ownerPauseGame""];
""866_maxRandom"" [label=""maxRandom""];
""866_constructor"" [label=""constructor""];
""866_random"" -> ""866_maxRandom"";
""866_ownerTransferZTH"" -> ""866_onlyOwner"";
""866_ownerChangeOwner"" -> ""866_onlyOwner"";
""866_tokenFallback"" -> ""866_setMaxProfit"";
""866__playerRollDice"" -> ""866_betIsValid"";
""866__playerRollDice"" -> ""866_gameIsActive"";
""866_ownerSetMaxProfitAsPercentOfHouse"" -> ""866_onlyOwner"";
""866_finishBet"" -> ""866_gameIsActive"";
""866_ownerPauseGame"" -> ""866_onlyOwner"";
""866__finishBet"" -> ""866_setMaxProfit"";
""866_constructor"" -> ""866_ownerSetMinBet"";
""866__playerRollDice"" -> ""866__zthToken"";
""866_constructor"" -> ""866_ownerSetMaxProfitAsPercentOfHouse"";
""866__playerRollDice"" -> ""866__finishBet"";
""866_ownerSetBankroll"" -> ""866_onlyOwner"";
""866__finishBet"" -> ""866_random"";
""866_ownerSetMinBet"" -> ""866_onlyOwner"";
""866_ownerSetMaxProfitAsPercentOfHouse"" -> ""866_setMaxProfit"";
""866__finishBet"" -> ""866_calculateProfit"";
""866_ownerkill"" -> ""866_onlyOwner"";
""866_ownerTransferZTH"" -> ""866_setMaxProfit"";
""866_tokenFallback"" -> ""866__playerRollDice"";
""866_ownerUpdateContractBalance"" -> ""866_onlyOwner"";
""866_finishBet"" -> ""866__finishBet"";
}
"
0x025dce2d39a46296766db7cac8c322e8f59cd5d9.sol,EthToSmthSwaps,contract EthToSmthSwaps { using SafeMath for uint; address public owner; address public ratingContractAddress; uint256 SafeTime = 1 hours; struct Swap { bytes32 secret; bytes20 secretHash; uint256 createdAt; uint256 balance; },1,"subgraph cluster_679_EthToSmthSwaps {
label=""EthToSmthSwaps"";
""679_withdr"" [label=""withdr""];
""679_withdraw"" [label=""withdraw""];
""679_getSecret"" [label=""getSecret""];
""679_close"" [label=""close""];
""679_abort"" [label=""abort""];
""679_checkSign"" [label=""checkSign""];
""679_clean"" [label=""clean""];
""679_getBalance"" [label=""getBalance""];
""679_sign"" [label=""sign""];
""679_setReputationAddress"" [label=""setReputationAddress""];
""679_createSwap"" [label=""createSwap""];
""679_refund"" [label=""refund""];
""679_constructor"" [label=""constructor""];
""679_abort"" -> ""679_clean"";
""679_refund"" -> ""679_clean"";
""679_close"" -> ""679_clean"";
}
"
0x26bfad55ad49fdfb0014f8c9deca55946848ad3e.sol,Broker,contract Broker is Claimable { using SafeMath for uint256; struct Offer { address maker; address offerAsset; address wantAsset; uint64 nonce; uint256 offerAmount; uint256 wantAmount; uint256 availableAmount; },1,"subgraph cluster_2268_Broker {
label=""Broker"";
""2268__recoverAddress"" [label=""_recoverAddress""];
""2268_emergencyWithdraw"" [label=""emergencyWithdraw""];
""2268_depositEther"" [label=""depositEther""];
""2268_spendFrom"" [label=""spendFrom""];
""2268_emergencyCancel"" [label=""emergencyCancel""];
""2268__withdraw"" [label=""_withdraw""];
""2268__fill"" [label=""_fill""];
""2268_announceWithdraw"" [label=""announceWithdraw""];
""2268_approveSpender"" [label=""approveSpender""];
""2268_setCancelAnnounceDelay"" [label=""setCancelAnnounceDelay""];
""2268_fillOffer"" [label=""fillOffer""];
""2268__increaseBalanceAndPayFees"" [label=""_increaseBalanceAndPayFees""];
""2268_rescindApproval"" [label=""rescindApproval""];
""2268_removeSpender"" [label=""removeSpender""];
""2268__payFees"" [label=""_payFees""];
""2268_depositERC20"" [label=""depositERC20""];
""2268__validateAndAddHash"" [label=""_validateAndAddHash""];
""2268_withdraw"" [label=""withdraw""];
""2268_slowCancel"" [label=""slowCancel""];
""2268_renounceOwnership"" [label=""renounceOwnership""];
""2268_makeOffer"" [label=""makeOffer""];
""2268__paySeparateFees"" [label=""_paySeparateFees""];
""2268_addSpender"" [label=""addSpender""];
""2268_constructor"" [label=""constructor""];
""2268__cancel"" [label=""_cancel""];
""2268__decreaseBalanceAndPayFees"" [label=""_decreaseBalanceAndPayFees""];
""2268__getSanitizedReturnValue"" [label=""_getSanitizedReturnValue""];
""2268_announceCancel"" [label=""announceCancel""];
""2268__validateAddress"" [label=""_validateAddress""];
""2268_fastCancel"" [label=""fastCancel""];
""2268_setOperator"" [label=""setOperator""];
""2268_fillOffers"" [label=""fillOffers""];
""2268_setCoordinator"" [label=""setCoordinator""];
""2268_setState"" [label=""setState""];
""2268_cancel"" [label=""cancel""];
""2268_setWithdrawAnnounceDelay"" [label=""setWithdrawAnnounceDelay""];
""2268_slowWithdraw"" [label=""slowWithdraw""];
""2268_withdraw"" -> ""2268__validateAndAddHash"";
""2268_cancel"" -> ""2268__recoverAddress"";
""2268_withdraw"" -> ""2268__recoverAddress"";
""2268_makeOffer"" -> ""2268__decreaseBalanceAndPayFees"";
""2268_emergencyWithdraw"" -> ""2268_onlyCoordinator"";
""2268_makeOffer"" -> ""2268_onlyActiveState"";
""2268_fillOffers"" -> ""2268_onlyCoordinator"";
""2268_emergencyCancel"" -> ""2268__cancel"";
""2268_spendFrom"" -> ""2268_unusedReasonCode"";
""2268_withdraw"" -> ""2268_onlyCoordinator"";
""2268_emergencyWithdraw"" -> ""2268__withdraw"";
""2268_makeOffer"" -> ""2268__recoverAddress"";
""2268_setWithdrawAnnounceDelay"" -> ""2268_onlyOwner"";
""2268_fillOffers"" -> ""2268__validateAndAddHash"";
""2268_emergencyCancel"" -> ""2268_onlyInactiveState"";
""2268__withdraw"" -> ""2268__decreaseBalanceAndPayFees"";
""2268_slowWithdraw"" -> ""2268__withdraw"";
""2268_fillOffers"" -> ""2268__paySeparateFees"";
""2268_depositERC20"" -> ""2268__getSanitizedReturnValue"";
""2268_setCancelAnnounceDelay"" -> ""2268_notMoreThanMaxDelay"";
""2268_cancel"" -> ""2268_onlyCoordinator"";
""2268_addSpender"" -> ""2268_onlyOwner"";
""2268_makeOffer"" -> ""2268_onlyCoordinator"";
""2268_emergencyWithdraw"" -> ""2268_onlyInactiveState"";
""2268_addSpender"" -> ""2268__validateAddress"";
""2268_depositEther"" -> ""2268_onlyActiveState"";
""2268_cancel"" -> ""2268__cancel"";
""2268_fillOffers"" -> ""2268_onlyActiveState"";
""2268_setCancelAnnounceDelay"" -> ""2268_onlyOwner"";
""2268_depositERC20"" -> ""2268_onlyActiveState"";
""2268_fillOffers"" -> ""2268__recoverAddress"";
""2268_removeSpender"" -> ""2268__validateAddress"";
""2268_fillOffer"" -> ""2268_onlyCoordinator"";
""2268_emergencyCancel"" -> ""2268_onlyCoordinator"";
""2268_fillOffer"" -> ""2268__recoverAddress"";
""2268_fastCancel"" -> ""2268_onlyCoordinator"";
""2268_setWithdrawAnnounceDelay"" -> ""2268_notMoreThanMaxDelay"";
""2268_setState"" -> ""2268_onlyOwner"";
""2268_fillOffer"" -> ""2268__fill"";
""2268_removeSpender"" -> ""2268_onlyOwner"";
""2268_setOperator"" -> ""2268_onlyOwner"";
""2268_spendFrom"" -> ""2268__validateAddress"";
""2268_slowCancel"" -> ""2268__cancel"";
""2268_fastCancel"" -> ""2268__cancel"";
""2268_fillOffer"" -> ""2268_onlyActiveState"";
""2268_setCoordinator"" -> ""2268__validateAddress"";
""2268_depositERC20"" -> ""2268_onlyCoordinator"";
""2268_makeOffer"" -> ""2268__validateAndAddHash"";
""2268_fillOffer"" -> ""2268__validateAndAddHash"";
""2268_setCoordinator"" -> ""2268_onlyOwner"";
""2268__decreaseBalanceAndPayFees"" -> ""2268__payFees"";
""2268_withdraw"" -> ""2268__withdraw"";
""2268__cancel"" -> ""2268__increaseBalanceAndPayFees"";
""2268__increaseBalanceAndPayFees"" -> ""2268__payFees"";
""2268__fill"" -> ""2268__increaseBalanceAndPayFees"";
""2268_setOperator"" -> ""2268__validateAddress"";
""2268__withdraw"" -> ""2268__getSanitizedReturnValue"";
""2268_fillOffers"" -> ""2268__fill"";
}
"
0x7976af0ae2124a0771d5287aa16017b3f9dd43a4.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; bool transferable; modifier isTransferable() { require(transferable || msg.sender == owner); _; },1,"subgraph cluster_443_BasicToken {
label=""BasicToken"";
""443_balanceOf"" [label=""balanceOf""];
""443_transfer"" [label=""transfer""];
""443_totalSupply"" [label=""totalSupply""];
""443_transfer"" -> ""443_isTransferable"";
}
"
0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol,AuctionContract,"contract AuctionContract { using SafeMath for uint; event BetPlacedEvent(address bidderAddress, uint amount); event RefundEvent(address bidderAddress, uint amount); event CreateAuctionContractEvent(address bidderAddress, uint amount); uint public auctionSlideSize = 30; uint public auctionCloseBlock; uint public closeAuctionAfterNBlocks; uint public bettingStep; mapping (address => uint) public bettingMap; address public firstBidder; address public secondBidder; address public winner; uint public biggestBet; uint public prize; address public firstBetContract; address public secondBetContract; uint public minimalPrize = 10000000000000000; uint public minimaBetStep = 10000000000000000; address public auctioneerAddress; bool public isActive; constructor (uint _closeAuctionAfterNBlocks, address _auctioneerAddress) payable public{ assert(msg.value >= minimalPrize); prize = msg.value; auctioneerAddress = _auctioneerAddress; closeAuctionAfterNBlocks = _closeAuctionAfterNBlocks; auctionCloseBlock = block.number.add(_closeAuctionAfterNBlocks); bettingStep = 0; biggestBet = 0; isActive = true; emit CreateAuctionContractEvent(this, prize); }",1,"subgraph cluster_565_AuctionContract {
label=""AuctionContract"";
""565_constructor"" [label=""constructor""];
""565_askForRefund"" [label=""askForRefund""];
""565_fallback"" [label=""fallback""];
""565_closeAuction"" [label=""closeAuction""];
}
"
0x54923b4f2e4433294c70559cc94d1812793f0451.sol,Future1Exchange,contract Future1Exchange { address public archon; mapping (address => mapping(address => uint256)) public _token; constructor() public { archon = msg.sender; },1,"subgraph cluster_241_Future1Exchange {
label=""Future1Exchange"";
""241_safeAdd"" [label=""safeAdd""];
""241_safeSub"" [label=""safeSub""];
""241_balanceOf"" [label=""balanceOf""];
""241_constructor"" [label=""constructor""];
""241_tokenWithdraw"" [label=""tokenWithdraw""];
""241_tokenTransfer"" [label=""tokenTransfer""];
""241_depositETH"" [label=""depositETH""];
""241_contract_bal"" [label=""contract_bal""];
""241_withdrawETH"" [label=""withdrawETH""];
""241_tokenWithdraw"" -> ""241_safeSub"";
""241_tokenTransfer"" -> ""241_safeAdd"";
}
"
0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol,ElepigCrowdsale,"contract ElepigCrowdsale is CappedCrowdsale, RefundableCrowdsale, ControlledAccess { using SafeMath for uint256; enum CrowdsaleStage { PreICO, ICO1, ICO2, ICO3, ICO4 }",1,"subgraph cluster_1578_ElepigCrowdsale {
label=""ElepigCrowdsale"";
""1578_ElepigCrowdsale"" [label=""ElepigCrowdsale""];
""1578_setCurrentRate"" [label=""setCurrentRate""];
""1578_finish"" [label=""finish""];
""1578_transferTokenOwnership"" [label=""transferTokenOwnership""];
""1578_airdropTokens"" [label=""airdropTokens""];
""1578_setCrowdsaleStage"" [label=""setCrowdsaleStage""];
""1578_donate"" [label=""donate""];
""1578_removeBlacklistAddress"" [label=""removeBlacklistAddress""];
""1578_addBlacklistAddress"" [label=""addBlacklistAddress""];
""1578_releaseVault"" [label=""releaseVault""];
""1578_fallback"" [label=""fallback""];
""1578_forwardFunds"" [label=""forwardFunds""];
""1578_forwardEndTime"" [label=""forwardEndTime""];
""1578_finish"" -> ""1578_finalize"";
""1578_forwardFunds"" -> ""1578_goalReached"";
""1578_releaseVault"" -> ""1578_goalReached"";
""1578_airdropTokens"" -> ""1578_onlyOwner"";
""1578_donate"" -> ""1578_onlyValidAccess"";
""1578_removeBlacklistAddress"" -> ""1578_onlyOwner"";
""1578_forwardFunds"" -> ""1578_forwardFunds"";
""1578_donate"" -> ""1578_forwardFunds"";
""1578_addBlacklistAddress"" -> ""1578_onlyOwner"";
""1578_ElepigCrowdsale"" -> ""1578_CappedCrowdsale"";
""1578_ElepigCrowdsale"" -> ""1578_Ownable"";
""1578_ElepigCrowdsale"" -> ""1578_Crowdsale"";
""1578_transferTokenOwnership"" -> ""1578_onlyOwner"";
""1578_setCrowdsaleStage"" -> ""1578_onlyOwner"";
""1578_releaseVault"" -> ""1578_onlyOwner"";
""1578_donate"" -> ""1578_validPurchase"";
""1578_finish"" -> ""1578_onlyOwner"";
""1578_ElepigCrowdsale"" -> ""1578_RefundableCrowdsale"";
}
"
0xc7bd5dac314a67a375a0347d72797c2ea1f1a672.sol,KlownGasDrop,contract KlownGasDrop { mapping(address => bool) public receivers; mapping ( address => uint256 ) public balances; uint256 amountToClaim = 50000000; uint256 public totalSent = 0; address _owner; address whoSent; uint256 dappBalance; uint public brpt = 0; uint public brpt1 = 0; IERC20 currentToken ; modifier onlyOwner() { require(msg.sender == _owner); _; },1,"subgraph cluster_277_KlownGasDrop {
label=""KlownGasDrop"";
""277_setGasClaim"" [label=""setGasClaim""];
""277_deposit"" [label=""deposit""];
""277_getGasClaimAmount"" [label=""getGasClaimAmount""];
""277_claimGasDrop"" [label=""claimGasDrop""];
""277_KlownGasDrop"" [label=""KlownGasDrop""];
""277_hasReceived"" [label=""hasReceived""];
""277_setCurrentToken"" [label=""setCurrentToken""];
""277_setGasClaim"" -> ""277_onlyOwner"";
""277_setCurrentToken"" -> ""277_onlyOwner"";
""277_deposit"" -> ""277_onlyOwner"";
}
"
0x6dbb4e882f967432fc0f9200e9ca577c916d8a68.sol,Bussiness,contract Bussiness is Ownable { IERC721 public erc721Address = IERC721(0x06012c8cf97bead5deae237070f9587f8e7a266d); ERC20BasicInterface public usdtToken = ERC20BasicInterface(0xdAC17F958D2ee523a2206206994597C13D831ec7); uint256 public ETHFee = 2; uint256 public HBWALLETFee = 1; uint256 public balance = address(this).balance; constructor() public {},1,"subgraph cluster_687_Bussiness {
label=""Bussiness"";
""687_buyByUsdt"" [label=""buyByUsdt""];
""687_setPrice"" [label=""setPrice""];
""687_getPrice"" [label=""getPrice""];
""687_ownerOf"" [label=""ownerOf""];
""687_constructor"" [label=""constructor""];
""687_resetPrice"" [label=""resetPrice""];
""687_setFee"" [label=""setFee""];
""687_withdraw"" [label=""withdraw""];
""687_setPriceFeeEth"" [label=""setPriceFeeEth""];
""687_removePrice"" [label=""removePrice""];
""687_buy"" [label=""buy""];
""687_buyByUsdt"" -> ""687_resetPrice"";
""687_setFee"" -> ""687_onlyOwner"";
""687_withdraw"" -> ""687_onlyOwner"";
""687_buy"" -> ""687_resetPrice"";
""687_getPrice"" -> ""687_resetPrice"";
""687_removePrice"" -> ""687_resetPrice"";
}
"
0x6b4df2aa3d64d8dc06120ef4391513e4170af4a7.sol,GeneralTransferManager,contract GeneralTransferManager is ITransferManager { using SafeMath for uint256; address public issuanceAddress = address(0); address public signingAddress = address(0); bytes32 public constant WHITELIST = ; bytes32 public constant FLAGS = ; struct TimeRestriction { uint256 fromTime; uint256 toTime; uint256 expiryTime; bool canBuyFromSTO; },1,"subgraph cluster_1917_GeneralTransferManager {
label=""GeneralTransferManager"";
""1917_changeAllowAllWhitelistTransfers"" [label=""changeAllowAllWhitelistTransfers""];
""1917_changeAllowAllTransfers"" [label=""changeAllowAllTransfers""];
""1917_isSTOAttached"" [label=""isSTOAttached""];
""1917_changeSigningAddress"" [label=""changeSigningAddress""];
""1917_checkSig"" [label=""checkSig""];
""1917_changeAllowAllWhitelistIssuances"" [label=""changeAllowAllWhitelistIssuances""];
""1917_getPermissions"" [label=""getPermissions""];
""1917_constructor"" [label=""constructor""];
""1917_onWhitelist"" [label=""onWhitelist""];
""1917_changeIssuanceAddress"" [label=""changeIssuanceAddress""];
""1917_modifyWhitelist"" [label=""modifyWhitelist""];
""1917_verifyTransfer"" [label=""verifyTransfer""];
""1917_modifyWhitelistMulti"" [label=""modifyWhitelistMulti""];
""1917_modifyWhitelistSigned"" [label=""modifyWhitelistSigned""];
""1917_changeAllowAllBurnTransfers"" [label=""changeAllowAllBurnTransfers""];
""1917_getInitFunction"" [label=""getInitFunction""];
""1917_changeSigningAddress"" -> ""1917_withPerm"";
""1917_verifyTransfer"" -> ""1917_isSTOAttached"";
""1917_changeAllowAllWhitelistTransfers"" -> ""1917_withPerm"";
""1917_changeAllowAllWhitelistIssuances"" -> ""1917_withPerm"";
""1917_modifyWhitelistMulti"" -> ""1917_withPerm"";
""1917_modifyWhitelistSigned"" -> ""1917_checkSig"";
""1917_constructor"" -> ""1917_constructor"";
""1917_changeIssuanceAddress"" -> ""1917_withPerm"";
""1917_modifyWhitelist"" -> ""1917_withPerm"";
""1917_modifyWhitelistMulti"" -> ""1917_modifyWhitelist"";
""1917_verifyTransfer"" -> ""1917_onWhitelist"";
""1917_changeAllowAllTransfers"" -> ""1917_withPerm"";
""1917_changeAllowAllBurnTransfers"" -> ""1917_withPerm"";
}
"
0x301487766dcf283592b11b5988e5c4e4630dfbe5.sol,EDex,"contract EDex is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_EDex {
label=""EDex"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_order"" [label=""order""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_constructor"" [label=""constructor""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_deposit"" [label=""deposit""];
""1614_depositToken"" [label=""depositToken""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_trade"" [label=""trade""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_testTrade"" [label=""testTrade""];
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_withdraw"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
}
"
0x020ddc98365d0199b4c7a2d769d685480789f67e.sol,EOSclassic,"contract EOSclassic is StandardToken, HasNoEther { string public constant NAME = ; string public constant SYMBOL = ; uint8 public constant DECIMALS = 18; uint public constant TOTAL_SUPPLY = 1000000000 * (10 ** uint(DECIMALS)); uint public constant foundersAllocation = 100000000 * (10 ** uint(DECIMALS)); address public constant eosTokenAddress = 0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0; address public constant eosCrowdsaleAddress = 0xd0a6E6C54DbC68Db5db3A091B171A77407Ff7ccf; mapping (address => string) public keys; mapping (address => bool) public eosClassicClaimed; event LogClaim (address user, uint amount); event LogRegister (address user, string key); constructor() public { totalSupply_ = TOTAL_SUPPLY; balances[address(this)] = TOTAL_SUPPLY; emit Transfer(0x0, address(this), TOTAL_SUPPLY); balances[address(this)] = balances[address(this)].sub(foundersAllocation); balances[msg.sender] = balances[msg.sender].add(foundersAllocation); emit Transfer(address(this), msg.sender, foundersAllocation); }",1,"subgraph cluster_947_EOSclassic {
label=""EOSclassic"";
""947_queryEOSTokenBalance"" [label=""queryEOSTokenBalance""];
""947_constructor"" [label=""constructor""];
""947_register"" [label=""register""];
""947_getEOSKeyFor"" [label=""getEOSKeyFor""];
""947_isClaimed"" [label=""isClaimed""];
""947_getMyEOSKey"" [label=""getMyEOSKey""];
""947_queryEOSCrowdsaleKey"" [label=""queryEOSCrowdsaleKey""];
""947_claimEOSclassicFor"" [label=""claimEOSclassicFor""];
""947_claimEOSclassic"" [label=""claimEOSclassic""];
""947_claimEOSclassic"" -> ""947_claimEOSclassicFor"";
""947_claimEOSclassicFor"" -> ""947_queryEOSTokenBalance"";
""947_getEOSKeyFor"" -> ""947_queryEOSCrowdsaleKey"";
""947_claimEOSclassicFor"" -> ""947_isClaimed"";
""947_getMyEOSKey"" -> ""947_getEOSKeyFor"";
}
"
0xeee7c7e228eafb0f8945c5dbaa8ea4f6ee12b36d.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; address public wallet; address public addressOfTokenUsedAsReward; uint256 public price = 1818; token tokenReward; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale() { wallet = 0x5d467Dfc5e3FcA3ea4bd6C312275ca930d2f3E19; addressOfTokenUsedAsReward = 0xB6eC8C3a347f66a3d7C4F39D6DD68A422E69E81d ; tokenReward = token(addressOfTokenUsedAsReward); }",1,"subgraph cluster_347_Crowdsale {
label=""Crowdsale"";
""347_stopSale"" [label=""stopSale""];
""347_changeWallet"" [label=""changeWallet""];
""347_changeTokenReward"" [label=""changeTokenReward""];
""347_validPurchase"" [label=""validPurchase""];
""347_fallback"" [label=""fallback""];
""347_withdrawTokens"" [label=""withdrawTokens""];
""347_buyTokens"" [label=""buyTokens""];
""347_setPrice"" [label=""setPrice""];
""347_Crowdsale"" [label=""Crowdsale""];
""347_startSale"" [label=""startSale""];
""347_forwardFunds"" [label=""forwardFunds""];
""347_fallback"" -> ""347_buyTokens"";
""347_buyTokens"" -> ""347_validPurchase"";
""347_buyTokens"" -> ""347_forwardFunds"";
}
"
0xc0952584ddd2735a237f844dab59bde737e7fe14.sol,lockEtherPay,"contract lockEtherPay is Ownable { using SafeMath for uint256; token token_reward; address public beneficiary; bool public isLocked = false; bool public isReleased = false; uint256 public start_time; uint256 public end_time; uint256 public fifty_two_weeks = 29980800; event TokenReleased(address beneficiary, uint256 token_amount); constructor() public{ token_reward = token(0xAa1ae5e57dc05981D83eC7FcA0b3c7ee2565B7D6); beneficiary = 0x51Ed81Fb25511a370207ca17f3D6Dbc7A1cFD43f; }",1,"subgraph cluster_309_lockEtherPay {
label=""lockEtherPay"";
""309_constructor"" [label=""constructor""];
""309_release"" [label=""release""];
""309_lock"" [label=""lock""];
""309_lockOver"" [label=""lockOver""];
""309_tokenBalance"" [label=""tokenBalance""];
""309_release"" -> ""309_onlyOwner"";
""309_release"" -> ""309_tokenBalance"";
""309_lock"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_tokenBalance"";
""309_release"" -> ""309_lockOver"";
}
"
0x3639d5dc956e35540fbd1de691870fb1318d6783.sol,SNTGiveaway,"contract SNTGiveaway is Controlled { mapping(address => bool) public sentToAddress; mapping(bytes5 => bool) public codeUsed; ERC20Token public SNT; uint public ethAmount; uint public sntAmount; bytes32 public root; event AddressFunded(address dest, bytes5 code, uint ethAmount, uint sntAmount); constructor(address _sntAddress, uint _ethAmount, uint _sntAmount, bytes32 _root) public { SNT = ERC20Token(_sntAddress); ethAmount = _ethAmount; sntAmount = _sntAmount; root = _root; }",1,"subgraph cluster_506_SNTGiveaway {
label=""SNTGiveaway"";
""506_updateSettings"" [label=""updateSettings""];
""506_constructor"" [label=""constructor""];
""506_processRequest"" [label=""processRequest""];
""506_manualSend"" [label=""manualSend""];
""506_retrieveFunds"" [label=""retrieveFunds""];
""506_validRequest"" [label=""validRequest""];
""506_fallback"" [label=""fallback""];
""506_boom"" [label=""boom""];
""506_processRequest"" -> ""506_onlyController"";
""506_manualSend"" -> ""506_onlyController"";
""506_boom"" -> ""506_onlyController"";
""506_updateSettings"" -> ""506_onlyController"";
""506_retrieveFunds"" -> ""506_onlyController"";
}
"
0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e.sol,UnicornRefunds,"contract UnicornRefunds { using SafeMath for uint; address public cardboardUnicornTokenAddress; address public unicornRanchAddress; address public owner = msg.sender; uint public pricePerUnicorn = 1 finney; uint public rewardUnicornAmount = 100; mapping(address => uint) allowedAmounts; mapping(address => bool) rewardClaimed; event RewardClaimed(address indexed _who, uint _bookingIndex); event UnicornsSold(address indexed _who, uint _unicornCount, uint _unicornCost, uint _paymentTotal); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_534_UnicornRefunds {
label=""UnicornRefunds"";
""534_sell"" [label=""sell""];
""534_changeRewardAmount"" [label=""changeRewardAmount""];
""534_changeOwner"" [label=""changeOwner""];
""534_changeUnicornRanchAddress"" [label=""changeUnicornRanchAddress""];
""534_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""534_claimReward"" [label=""claimReward""];
""534_withdraw"" [label=""withdraw""];
""534_changePricePerUnicorn"" [label=""changePricePerUnicorn""];
""534_fallback"" [label=""fallback""];
""534_setAllowance"" [label=""setAllowance""];
""534_changeCardboardUnicornTokenAddress"" [label=""changeCardboardUnicornTokenAddress""];
""534_changeOwner"" -> ""534_onlyOwner"";
""534_changeUnicornRanchAddress"" -> ""534_onlyOwner"";
""534_changeRewardAmount"" -> ""534_onlyOwner"";
""534_changePricePerUnicorn"" -> ""534_onlyOwner"";
""534_changeCardboardUnicornTokenAddress"" -> ""534_onlyOwner"";
""534_setAllowance"" -> ""534_onlyOwner"";
""534_withdraw"" -> ""534_onlyOwner"";
""534_withdrawForeignTokens"" -> ""534_onlyOwner"";
}
"
0x56853ab9006e0712b05c68b586372fcdde5236b9.sol,AirDrop,"contract AirDrop is Ownable { Token token; event TransferredToken(address indexed to, uint256 value); event FailedTransfer(address indexed to, uint256 value); modifier whenDropIsActive() { assert(isActive()); _; }",1,"subgraph cluster_282_AirDrop {
label=""AirDrop"";
""282_sendTokens"" [label=""sendTokens""];
""282_AirDrop"" [label=""AirDrop""];
""282_sendInternally"" [label=""sendInternally""];
""282_tokensAvailable"" [label=""tokensAvailable""];
""282_sendTokensSingleValue"" [label=""sendTokensSingleValue""];
""282_destroy"" [label=""destroy""];
""282_isActive"" [label=""isActive""];
""282_sendTokens"" -> ""282_sendInternally"";
""282_sendTokensSingleValue"" -> ""282_onlyOwner"";
""282_sendInternally"" -> ""282_tokensAvailable"";
""282_sendTokensSingleValue"" -> ""282_sendInternally"";
""282_sendTokens"" -> ""282_onlyOwner"";
""282_sendTokensSingleValue"" -> ""282_whenDropIsActive"";
""282_destroy"" -> ""282_onlyOwner"";
""282_destroy"" -> ""282_tokensAvailable"";
""282_sendTokens"" -> ""282_whenDropIsActive"";
""282_isActive"" -> ""282_tokensAvailable"";
}
"
0xa27f262391913a5e21216c70de5358a1e887de25.sol,VestingContractWTTEST,contract VestingContractWTTEST { struct AccountData { uint original_balance; uint limit_per_period; uint current_balance; uint current_limit; uint current_transferred; },1,"subgraph cluster_488_VestingContractWTTEST {
label=""VestingContractWTTEST"";
""488_setOwner"" [label=""setOwner""];
""488_fallback"" [label=""fallback""];
""488_transfer"" [label=""transfer""];
""488_tokenFallback"" [label=""tokenFallback""];
""488_initData"" [label=""initData""];
""488_VestingContractWTTEST"" [label=""VestingContractWTTEST""];
""488_getBalance"" [label=""getBalance""];
""488_ownerTransfer"" [label=""ownerTransfer""];
""488_updateCurrentPeriod"" [label=""updateCurrentPeriod""];
""488_setPeriod"" [label=""setPeriod""];
""488_setOwner"" -> ""488_onlyOwner"";
""488_transfer"" -> ""488_updateCurrentPeriod"";
""488_ownerTransfer"" -> ""488_onlyOwner"";
""488_ownerTransfer"" -> ""488_getBalance"";
""488_VestingContractWTTEST"" -> ""488_initData"";
}
"
0x301487766dcf283592b11b5988e5c4e4630dfbe5.sol,EDex,"contract EDex is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_EDex {
label=""EDex"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_order"" [label=""order""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_constructor"" [label=""constructor""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_deposit"" [label=""deposit""];
""1614_depositToken"" [label=""depositToken""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_trade"" [label=""trade""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_testTrade"" [label=""testTrade""];
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_withdraw"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
}
"
0x0317ada015cf35244b9f9c7d1f8f05c3651833ff.sol,TokenAbout,"contract TokenAbout is Controlled { event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount); function isContract(address _addr) constant internal returns (bool) { if (_addr == 0) { return false; }",1,"subgraph cluster_276_TokenAbout {
label=""TokenAbout"";
""276_claimTokens"" [label=""claimTokens""];
""276_isContract"" [label=""isContract""];
""276_claimTokens"" -> ""276_onlyController"";
}
"
0x4c129783b42833220ad57d48548f871189009d3f.sol,HoQuBurner,"contract HoQuBurner is Ownable { using SafeMath for uint256; HoQuToken public token; mapping(address => uint256) public claimed; mapping(uint32 => address) public transactionAddresses; mapping(uint32 => uint256) public transactionAmounts; uint32 public transactionsCount; event TokenBurned(address indexed _sender, uint256 _tokens); function HoQuBurner(address _tokenAddress) { token = HoQuToken(_tokenAddress); }",1,"subgraph cluster_647_HoQuBurner {
label=""HoQuBurner"";
""647_HoQuBurner"" [label=""HoQuBurner""];
""647_burnFrom"" [label=""burnFrom""];
""647_burn"" [label=""burn""];
""647_burnFrom"" -> ""647_onlyOwner"";
""647_burn"" -> ""647_burnFrom"";
}
"
0x46c9f93c3249c430c6ca19f02240ef9e038ba9d1.sol,Escapable,"contract Escapable is Owned { address public escapeHatchCaller; address public escapeHatchDestination; mapping (address=>bool) private escapeBlacklist; function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) { escapeHatchCaller = _escapeHatchCaller; escapeHatchDestination = _escapeHatchDestination; }",1,"subgraph cluster_371_Escapable {
label=""Escapable"";
""371_Escapable"" [label=""Escapable""];
""371_escapeHatch"" [label=""escapeHatch""];
""371_changeEscapeCaller"" [label=""changeEscapeCaller""];
""371_isTokenEscapable"" [label=""isTokenEscapable""];
""371_blacklistEscapeToken"" [label=""blacklistEscapeToken""];
""371_changeEscapeCaller"" -> ""371_onlyEscapeHatchCallerOrOwner"";
""371_escapeHatch"" -> ""371_onlyEscapeHatchCallerOrOwner"";
}
"
0x6d0a44fb6a416da6efe1c192560be1bccd01f6be.sol,PresaleMarket,contract PresaleMarket is PausableSimple { struct Auction { address seller; uint256 price; },1,"subgraph cluster_1133_PresaleMarket {
label=""PresaleMarket"";
""1133_PresaleMarket"" [label=""PresaleMarket""];
""1133_auctionsRunByUser"" [label=""auctionsRunByUser""];
""1133__isAuctionExist"" [label=""_isAuctionExist""];
""1133_getAuction"" [label=""getAuction""];
""1133_cancelAuctionEmergency"" [label=""cancelAuctionEmergency""];
""1133__cancelAuction"" [label=""_cancelAuction""];
""1133_createAuction"" [label=""createAuction""];
""1133__takeOwnership"" [label=""_takeOwnership""];
""1133_cancelAuction"" [label=""cancelAuction""];
""1133_bid"" [label=""bid""];
""1133_isPresaleMarket"" [label=""isPresaleMarket""];
""1133__owns"" [label=""_owns""];
""1133_withdraw"" [label=""withdraw""];
""1133__createAuction"" [label=""_createAuction""];
""1133_cancelAuctionEmergency"" -> ""1133_whenPaused"";
""1133_cancelAuction"" -> ""1133__isAuctionExist"";
""1133_createAuction"" -> ""1133__createAuction"";
""1133_getAuction"" -> ""1133__isAuctionExist"";
""1133_withdraw"" -> ""1133_onlyOwner"";
""1133_bid"" -> ""1133_whenNotPaused"";
""1133_cancelAuctionEmergency"" -> ""1133__isAuctionExist"";
""1133_bid"" -> ""1133__isAuctionExist"";
""1133_cancelAuctionEmergency"" -> ""1133_onlyOwner"";
""1133_createAuction"" -> ""1133__takeOwnership"";
""1133_cancelAuctionEmergency"" -> ""1133__cancelAuction"";
""1133_cancelAuction"" -> ""1133__cancelAuction"";
""1133_createAuction"" -> ""1133_whenNotPaused"";
}
"
0xc739ae9ba934f937636a2ebaaf1ecdf04e11ef2f.sol,NXTGToken,contract NXTGToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 7000000 * (10**5); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; constructor () public { owner = msg.sender; },1,"subgraph cluster_756_NXTGToken {
label=""NXTGToken"";
""756_approve"" [label=""approve""];
""756_transferFrom"" [label=""transferFrom""];
""756_refundTokens"" [label=""refundTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_setOwner"" [label=""setOwner""];
""756_constructor"" [label=""constructor""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_createTokens"" [label=""createTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_approve"" -> ""756_approve"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
}
"
0xc4ab0f59c4d8bb15e237906a06a736d965a2c390.sol,AirdropLibraToken,"contract AirdropLibraToken is Ownable { using SafeMath for uint256; uint256 decimal = 10**uint256(18); uint256 distributedTotal = 0; uint256 airdropStartTime; uint256 airdropEndTime; LibraToken private token; mapping (address => bool) public airdropAdmins; mapping(address => uint256) public airdropDoneAmountMap; address[] public airdropDoneList; event Airdrop(address _receiver, uint256 amount); event AddAdmin(address _admin); event RemoveAdmin(address _admin); event UpdateEndTime(address _operator, uint256 _oldTime, uint256 _newTime); modifier onlyOwnerOrAdmin() { require(msg.sender == owner || airdropAdmins[msg.sender]); _; }",1,"subgraph cluster_1009_AirdropLibraToken {
label=""AirdropLibraToken"";
""1009_getDistributedTotal"" [label=""getDistributedTotal""];
""1009_getDoneAddresses"" [label=""getDoneAddresses""];
""1009_isAdmin"" [label=""isAdmin""];
""1009_airdropTokens"" [label=""airdropTokens""];
""1009_transferOutBalance"" [label=""transferOutBalance""];
""1009_getDoneAirdropAmount"" [label=""getDoneAirdropAmount""];
""1009_removeAdmin"" [label=""removeAdmin""];
""1009_airdropTokensBatch"" [label=""airdropTokensBatch""];
""1009_addAdmin"" [label=""addAdmin""];
""1009_AirdropLibraToken"" [label=""AirdropLibraToken""];
""1009_updateAirdropEndTime"" [label=""updateAirdropEndTime""];
""1009_balanceOfThis"" [label=""balanceOfThis""];
""1009_airdropTokensBatch"" -> ""1009_onlyWhileAirdropPhaseOpen"";
""1009_transferOutBalance"" -> ""1009_onlyOwner"";
""1009_removeAdmin"" -> ""1009_onlyOwner"";
""1009_airdropTokens"" -> ""1009_onlyOwnerOrAdmin"";
""1009_addAdmin"" -> ""1009_onlyOwner"";
""1009_removeAdmin"" -> ""1009_isAdmin"";
""1009_airdropTokensBatch"" -> ""1009_onlyOwnerOrAdmin"";
""1009_airdropTokens"" -> ""1009_onlyWhileAirdropPhaseOpen"";
""1009_updateAirdropEndTime"" -> ""1009_onlyOwnerOrAdmin"";
""1009_airdropTokensBatch"" -> ""1009_airdropTokens"";
}
"
0x17f68886d00845867c154c912b4ccc506ec92fc7.sol,DelegatedShareholderAssociation,"contract DelegatedShareholderAssociation is TokenRecipient { uint public minimumQuorum; uint public debatingPeriodInMinutes; Proposal[] public proposals; uint public numProposals; ERC20 public sharesTokenAddress; mapping (address => address) public delegatesByDelegator; mapping (address => uint) public lockedDelegatingTokens; mapping (address => uint) public delegatedAmountsByDelegate; uint public totalLockedTokens; uint public requiredSharesToBeBoardMember; TokenLocker public tokenLocker; event ProposalAdded(uint proposalID, address recipient, uint amount, bytes metadataHash); event Voted(uint proposalID, bool position, address voter); event ProposalTallied(uint proposalID, uint yea, uint nay, uint quorum, bool active); event ChangeOfRules(uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newSharesTokenAddress); event TokensDelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); event TokensUndelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); struct Proposal { address recipient; uint amount; bytes metadataHash; uint timeCreated; uint votingDeadline; bool finalized; bool proposalPassed; uint numberOfVotes; bytes32 proposalHash; Vote[] votes; mapping (address => bool) voted; }",1,"subgraph cluster_1103_DelegatedShareholderAssociation {
label=""DelegatedShareholderAssociation"";
""1103_changeVotingRules"" [label=""changeVotingRules""];
""1103_hasVoted"" [label=""hasVoted""];
""1103_vote"" [label=""vote""];
""1103_executeProposal"" [label=""executeProposal""];
""1103_countVotes"" [label=""countVotes""];
""1103_checkProposalCode"" [label=""checkProposalCode""];
""1103_setDelegateAndLockTokens"" [label=""setDelegateAndLockTokens""];
""1103_clearDelegateAndUnlockTokens"" [label=""clearDelegateAndUnlockTokens""];
""1103_newProposal"" [label=""newProposal""];
""1103_newProposal"" -> ""1103_onlyBoardMembers"";
""1103_executeProposal"" -> ""1103_countVotes"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyShareholders"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyUndelegated"";
""1103_newProposal"" -> ""1103_notSelf"";
""1103_vote"" -> ""1103_onlyShareholders"";
""1103_vote"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_onlyDelegated"";
""1103_executeProposal"" -> ""1103_notSelf"";
""1103_changeVotingRules"" -> ""1103_onlySelf"";
""1103_setDelegateAndLockTokens"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_notSelf"";
}
"
0x0f1da17b33df90c078fd2fb4b9011a64af3c67a6.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; using Address for address; mapping(address => uint256) internal _balances; mapping(address => mapping(address => uint256)) private _allowed; uint256 internal _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },1,"subgraph cluster_552_ERC20 {
label=""ERC20"";
""552_balanceOf"" [label=""balanceOf""];
""552_increaseAllowance"" [label=""increaseAllowance""];
""552__transfer"" [label=""_transfer""];
""552_transferFrom"" [label=""transferFrom""];
""552__burn"" [label=""_burn""];
""552_totalSupply"" [label=""totalSupply""];
""552_allowance"" [label=""allowance""];
""552__burnFrom"" [label=""_burnFrom""];
""552_approve"" [label=""approve""];
""552_burn"" [label=""burn""];
""552__approve"" [label=""_approve""];
""552_decreaseAllowance"" [label=""decreaseAllowance""];
""552_transfer"" [label=""transfer""];
""552__burnFrom"" -> ""552__approve"";
""552_burn"" -> ""552__burn"";
""552__burnFrom"" -> ""552__burn"";
""552_decreaseAllowance"" -> ""552__approve"";
""552_increaseAllowance"" -> ""552__approve"";
""552_approve"" -> ""552__approve"";
""552_transferFrom"" -> ""552__transfer"";
""552_transfer"" -> ""552__transfer"";
""552_transferFrom"" -> ""552__approve"";
}
"
0x53c347888c54519820249ee629b30316f3b79974.sol,UCToken,contract UCToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 70000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function UCToken () { owner = msg.sender; },1,"subgraph cluster_756_UCToken {
label=""UCToken"";
""756_transfer"" [label=""transfer""];
""756_approve"" [label=""approve""];
""756_totalSupply"" [label=""totalSupply""];
""756_createTokens"" [label=""createTokens""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transferFrom"" [label=""transferFrom""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_setOwner"" [label=""setOwner""];
""756_refundTokens"" [label=""refundTokens""];
""756_UCToken"" [label=""UCToken""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_createTokens"" -> ""756_safeSub"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_allowance"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
""756_transfer"" -> ""756_transfer"";
}
"
0x6e82aabffe24f275ad3f703aca922dd4d8f86168.sol,BatchTransfer,"contract BatchTransfer is Ownable { using SafeMath for uint256; event Withdraw(address indexed receiver, address indexed token, uint amount); event TransferEther(address indexed sender, address indexed receiver, uint256 amount); modifier checkArrayArgument(address[] _receivers, uint256[] _amounts) { require(_receivers.length == _amounts.length && _receivers.length != 0); _; }",1,"subgraph cluster_538_BatchTransfer {
label=""BatchTransfer"";
""538_getTotalSendingAmount"" [label=""getTotalSendingAmount""];
""538_batchTransferToken"" [label=""batchTransferToken""];
""538_allowanceForContract"" [label=""allowanceForContract""];
""538_withdraw"" [label=""withdraw""];
""538_batchTransferEther"" [label=""batchTransferEther""];
""538_balanceOfContract"" [label=""balanceOfContract""];
""538_batchTransferToken"" -> ""538_getTotalSendingAmount"";
""538_batchTransferEther"" -> ""538_checkArrayArgument"";
""538_withdraw"" -> ""538_onlyOwner"";
""538_batchTransferToken"" -> ""538_allowanceForContract"";
""538_batchTransferToken"" -> ""538_checkArrayArgument"";
""538_batchTransferEther"" -> ""538_getTotalSendingAmount"";
}
"
0x1fab9d2996767db0ca6af12fd92c1f2aab2675a0.sol,JackpotHolding,"contract JackpotHolding is ERC223Receiving { uint public payOutNumber = 0; uint public payOutDivisor = 2; ZethrBankrollControllerInterface controller; Zethr zethr; constructor (address _controllerAddress, address _zethrAddress) public { controller = ZethrBankrollControllerInterface(_controllerAddress); zethr = Zethr(_zethrAddress); }",1,"subgraph cluster_5615_JackpotHolding {
label=""JackpotHolding"";
""5615_ownerWithdrawEth"" [label=""ownerWithdrawEth""];
""5615_fallback"" [label=""fallback""];
""5615_constructor"" [label=""constructor""];
""5615_gamePayOutWinner"" [label=""gamePayOutWinner""];
""5615_tokenFallback"" [label=""tokenFallback""];
""5615_getJackpotBalance"" [label=""getJackpotBalance""];
""5615_ownerSetControllerAddress"" [label=""ownerSetControllerAddress""];
""5615_ownerSetPayOutDivisor"" [label=""ownerSetPayOutDivisor""];
""5615_ownerWithdrawZth"" [label=""ownerWithdrawZth""];
""5615_ownerSetPayOutDivisor"" -> ""5615_ownerOnly"";
""5615_ownerWithdrawZth"" -> ""5615_ownerOnly"";
""5615_ownerSetControllerAddress"" -> ""5615_ownerOnly"";
""5615_ownerWithdrawEth"" -> ""5615_ownerOnly"";
""5615_gamePayOutWinner"" -> ""5615_gameOnly"";
}
"
0xb4a3fb248d39370c1f8081b73fa7098167c8142b.sol,DSValue,"contract DSValue is DSThing { bool has; bytes32 val; function peek() public view returns (bytes32, bool) { return (val,has); }",1,"subgraph cluster_1193_DSValue {
label=""DSValue"";
""1193_void"" [label=""void""];
""1193_poke"" [label=""poke""];
""1193_peek"" [label=""peek""];
""1193_read"" [label=""read""];
""1193_poke"" -> ""1193_note"";
""1193_read"" -> ""1193_peek"";
""1193_void"" -> ""1193_auth"";
""1193_void"" -> ""1193_note"";
""1193_poke"" -> ""1193_auth"";
}
"
0x01c627181089b6e10ee8316ec08516b3df7c4845.sol,BrickCrowdsale,contract BrickCrowdsale is Ownable { using SafeMath for uint256; uint256 public startTime; uint256 public endTime; uint256 public weiRaised; uint256 public limitDateSale; bool public isSoftCapHit = false; bool public isStarted = false; bool public isFinalized = false; uint256 icoPvtRate = 40; uint256 icoPreRate = 50; uint256 ico1Rate = 65; uint256 ico2Rate = 75; uint256 ico3Rate = 90; uint256 public pvtTokens = (40000) * (10**18); uint256 public preSaleTokens = (6000000) * (10**18); uint256 public ico1Tokens = (8000000) * (10**18); uint256 public ico2Tokens = (8000000) * (10**18); uint256 public ico3Tokens = (8000000) * (10**18); uint256 public totalTokens = (40000000)* (10**18); address public advisoryEthWallet = 0x0D7629d32546CD493bc33ADEF115D4489f5599Be; address public infraEthWallet = 0x536D36a05F6592aa29BB0beE30cda706B1272521; address public techDevelopmentEthWallet = 0x4d0B70d8E612b5dca3597C64643a8d1efd5965e1; address public operationsEthWallet = 0xbc67B82924eEc8643A4f2ceDa59B5acfd888A967; address public wallet = 0x44d44CA0f75bdd3AE8806D02515E8268459c554A; struct ContributorData { uint256 contributionAmountViewOnly; uint256 tokensIssuedViewOnly; uint256 contributionAmount; uint256 tokensIssued; },1,"subgraph cluster_2591_BrickCrowdsale {
label=""BrickCrowdsale"";
""2591_hasEnded"" [label=""hasEnded""];
""2591_starting"" [label=""starting""];
""2591_releaseAllTokens"" [label=""releaseAllTokens""];
""2591_isWithinSaleTimeLimit"" [label=""isWithinSaleTimeLimit""];
""2591_setRate"" [label=""setRate""];
""2591_setHardCap"" [label=""setHardCap""];
""2591_setPvtTokens"" [label=""setPvtTokens""];
""2591_isWithinTokenAllocLimit"" [label=""isWithinTokenAllocLimit""];
""2591_constructor"" [label=""constructor""];
""2591_currentTokenSupply"" [label=""currentTokenSupply""];
""2591_release"" [label=""release""];
""2591_endIcoSaleRound3"" [label=""endIcoSaleRound3""];
""2591_endIcoSaleRound2"" [label=""endIcoSaleRound2""];
""2591_getCurrentRateInCents"" [label=""getCurrentRateInCents""];
""2591_releaseTokens"" [label=""releaseTokens""];
""2591_setKycAddress"" [label=""setKycAddress""];
""2591_finalize"" [label=""finalize""];
""2591_endIcoSaleRound1"" [label=""endIcoSaleRound1""];
""2591_setSaleDuration"" [label=""setSaleDuration""];
""2591_investorCount"" [label=""investorCount""];
""2591_refundMoney"" [label=""refundMoney""];
""2591_setKYCRequiredToSendTokens"" [label=""setKYCRequiredToSendTokens""];
""2591_forwardAllRaisedFunds"" [label=""forwardAllRaisedFunds""];
""2591_tokenSendFailuresCount"" [label=""tokenSendFailuresCount""];
""2591_setSaleBonus"" [label=""setSaleBonus""];
""2591_updateRateInWei"" [label=""updateRateInWei""];
""2591_setIco2Tokens"" [label=""setIco2Tokens""];
""2591_transferTokenOwnership"" [label=""transferTokenOwnership""];
""2591_hasStarted"" [label=""hasStarted""];
""2591_setSoftCap"" [label=""setSoftCap""];
""2591_refundAllMoney"" [label=""refundAllMoney""];
""2591_setIco1Tokens"" [label=""setIco1Tokens""];
""2591_buyTokens"" [label=""buyTokens""];
""2591_endPvtSale"" [label=""endPvtSale""];
""2591_didSoftCapReached"" [label=""didSoftCapReached""];
""2591_setPreSaleTokens"" [label=""setPreSaleTokens""];
""2591_transferKycOwnerShip"" [label=""transferKycOwnerShip""];
""2591_finalization"" [label=""finalization""];
""2591_start"" [label=""start""];
""2591_endPreSale"" [label=""endPreSale""];
""2591_setKYCRequiredToReceiveFunds"" [label=""setKYCRequiredToReceiveFunds""];
""2591_setIco3Tokens"" [label=""setIco3Tokens""];
""2591_buyPhaseTokens"" [label=""buyPhaseTokens""];
""2591_validPurchase"" [label=""validPurchase""];
""2591_isWithinSaleLimit"" [label=""isWithinSaleLimit""];
""2591_setTokenAddress"" [label=""setTokenAddress""];
""2591_setTokensForCrowdSale"" [label=""setTokensForCrowdSale""];
""2591_computeTokens"" [label=""computeTokens""];
""2591_splitTokens"" [label=""splitTokens""];
""2591_fallback"" [label=""fallback""];
""2591_init"" [label=""init""];
""2591_init"" -> ""2591_setRate"";
""2591_finalization"" -> ""2591_splitTokens"";
""2591_setHardCap"" -> ""2591_onlyOwner"";
""2591_setIco3Tokens"" -> ""2591_onlyOwner"";
""2591_refundAllMoney"" -> ""2591_refundMoney"";
""2591_setPvtTokens"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_releaseTokens"";
""2591_releaseTokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleDuration"" -> ""2591_onlyOwner"";
""2591_setTokensForCrowdSale"" -> ""2591_onlyOwner"";
""2591_finalization"" -> ""2591_forwardAllRaisedFunds"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleTimeLimit"";
""2591_setSoftCap"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_buyTokens"";
""2591_transferKycOwnerShip"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToReceiveFunds"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSoftCap"";
""2591_start"" -> ""2591_hasStarted"";
""2591_setPreSaleTokens"" -> ""2591_onlyOwner"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleLimit"";
""2591_endIcoSaleRound1"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound1"" -> ""2591_updateRateInWei"";
""2591_validPurchase"" -> ""2591_isWithinSaleTimeLimit"";
""2591_start"" -> ""2591_starting"";
""2591_init"" -> ""2591_setSaleDuration"";
""2591_endPreSale"" -> ""2591_onlyOwner"";
""2591_finalize"" -> ""2591_onlyOwner"";
""2591_refundMoney"" -> ""2591_onlyOwner"";
""2591_fallback"" -> ""2591_buyPhaseTokens"";
""2591_setIco1Tokens"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound3"" -> ""2591_updateRateInWei"";
""2591_setKycAddress"" -> ""2591_onlyOwner"";
""2591_transferTokenOwnership"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToSendTokens"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSaleBonus"";
""2591_endIcoSaleRound2"" -> ""2591_onlyOwner"";
""2591_setIco2Tokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokenAddress"";
""2591_refundAllMoney"" -> ""2591_onlyOwner"";
""2591_setTokenAddress"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_validPurchase"";
""2591_init"" -> ""2591_setHardCap"";
""2591_finalize"" -> ""2591_finalization"";
""2591_releaseTokens"" -> ""2591_release"";
""2591_init"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_isWithinTokenAllocLimit"";
""2591_buyPhaseTokens"" -> ""2591_computeTokens"";
""2591_updateRateInWei"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleBonus"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokensForCrowdSale"";
""2591_init"" -> ""2591_setKycAddress"";
""2591_endIcoSaleRound2"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_onlyOwner"";
""2591_start"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_start"";
""2591_endIcoSaleRound3"" -> ""2591_onlyOwner"";
""2591_endPreSale"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_updateRateInWei"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,HavvenEscrow,"contract HavvenEscrow is Owned, LimitedSetup(8 weeks), SafeDecimalMath { Havven public havven; mapping(address => uint[2][]) public vestingSchedules; mapping(address => uint) public totalVestedAccountBalance; uint public totalVestedBalance; function HavvenEscrow(address _owner, Havven _havven) Owned(_owner) public { havven = _havven; }",1,"subgraph cluster_4045_HavvenEscrow {
label=""HavvenEscrow"";
""4045_addVestingSchedule"" [label=""addVestingSchedule""];
""4045_getNextVestingTime"" [label=""getNextVestingTime""];
""4045_HavvenEscrow"" [label=""HavvenEscrow""];
""4045_getNextVestingIndex"" [label=""getNextVestingIndex""];
""4045_getVestingScheduleEntry"" [label=""getVestingScheduleEntry""];
""4045_getVestingTime"" [label=""getVestingTime""];
""4045_getVestingQuantity"" [label=""getVestingQuantity""];
""4045_purgeAccount"" [label=""purgeAccount""];
""4045_numVestingEntries"" [label=""numVestingEntries""];
""4045_withdrawHavvens"" [label=""withdrawHavvens""];
""4045_setHavven"" [label=""setHavven""];
""4045_balanceOf"" [label=""balanceOf""];
""4045_appendVestingEntry"" [label=""appendVestingEntry""];
""4045_totalVestedAccountBalance"" [label=""totalVestedAccountBalance""];
""4045_vest"" [label=""vest""];
""4045_getNextVestingEntry"" [label=""getNextVestingEntry""];
""4045_getNextVestingQuantity"" [label=""getNextVestingQuantity""];
""4045_addVestingSchedule"" -> ""4045_onlyOwner"";
""4045_withdrawHavvens"" -> ""4045_onlyOwner"";
""4045_appendVestingEntry"" -> ""4045_onlyOwner"";
""4045_getNextVestingTime"" -> ""4045_getNextVestingIndex"";
""4045_appendVestingEntry"" -> ""4045_safeAdd"";
""4045_getNextVestingIndex"" -> ""4045_numVestingEntries"";
""4045_getNextVestingEntry"" -> ""4045_getNextVestingIndex"";
""4045_vest"" -> ""4045_numVestingEntries"";
""4045_getNextVestingEntry"" -> ""4045_getVestingScheduleEntry"";
""4045_purgeAccount"" -> ""4045_setupFunction"";
""4045_purgeAccount"" -> ""4045_onlyOwner"";
""4045_getNextVestingQuantity"" -> ""4045_getVestingQuantity"";
""4045_getNextVestingIndex"" -> ""4045_getVestingTime"";
""4045_purgeAccount"" -> ""4045_safeSub"";
""4045_getNextVestingTime"" -> ""4045_getVestingTime"";
""4045_appendVestingEntry"" -> ""4045_getVestingTime"";
""4045_setHavven"" -> ""4045_onlyOwner"";
""4045_vest"" -> ""4045_safeSub"";
""4045_getNextVestingTime"" -> ""4045_numVestingEntries"";
""4045_vest"" -> ""4045_getVestingTime"";
""4045_vest"" -> ""4045_safeAdd"";
""4045_addVestingSchedule"" -> ""4045_setupFunction"";
""4045_getNextVestingEntry"" -> ""4045_numVestingEntries"";
""4045_appendVestingEntry"" -> ""4045_setupFunction"";
""4045_withdrawHavvens"" -> ""4045_setupFunction"";
""4045_addVestingSchedule"" -> ""4045_appendVestingEntry"";
""4045_HavvenEscrow"" -> ""4045_Owned"";
""4045_getNextVestingQuantity"" -> ""4045_getNextVestingIndex"";
""4045_vest"" -> ""4045_getVestingQuantity"";
""4045_getNextVestingQuantity"" -> ""4045_numVestingEntries"";
""4045_appendVestingEntry"" -> ""4045_numVestingEntries"";
}
"
0x3a966ffa8451cbf3769b7d1f94d5b47da254edb0.sol,Play0x_LottoBall,contract Play0x_LottoBall { using SafeMath for uint256; using SafeMath for uint128; using SafeMath for uint40; using SafeMath for uint8; uint public jackpotSize; uint public tokenJackpotSize; uint public MIN_BET; uint public MAX_BET; uint public MAX_AMOUNT; uint public maxProfit; uint public maxTokenProfit; uint8 public platformFeePercentage = 15; uint8 public jackpotFeePercentage = 5; uint8 public ERC20rewardMultiple = 5; uint constant BetExpirationBlocks = 250; uint public lockedInBets; uint public lockedTokenInBets; bytes32 bitComparisonMask = 0xF; address public owner; address private nextOwner; address public manager; address private nextManager; address[] public secretSignerList; address public ERC20ContractAddres; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Bet { uint amount; uint40 placeBlockNumber; address gambler; },1,"subgraph cluster_3084_Play0x_LottoBall {
label=""Play0x_LottoBall"";
""3084_setMaxProfit"" [label=""setMaxProfit""];
""3084_getJackpotWinBonus"" [label=""getJackpotWinBonus""];
""3084_sendFunds"" [label=""sendFunds""];
""3084_sendTokenFundsToManager"" [label=""sendTokenFundsToManager""];
""3084_updateMAX_AMOUNT"" [label=""updateMAX_AMOUNT""];
""3084_approveNextOwner"" [label=""approveNextOwner""];
""3084_getBonusPercentageByMachineMode"" [label=""getBonusPercentageByMachineMode""];
""3084_withdrawAlltokenFunds"" [label=""withdrawAlltokenFunds""];
""3084_updateBitComparisonMask"" [label=""updateBitComparisonMask""];
""3084_settleBetVerifi"" [label=""settleBetVerifi""];
""3084_withdrawToken"" [label=""withdrawToken""];
""3084_getPossibleWinAmount"" [label=""getPossibleWinAmount""];
""3084_setTokenAddress"" [label=""setTokenAddress""];
""3084_withdrawFunds"" [label=""withdrawFunds""];
""3084_updateJackpotFeePercentage"" [label=""updateJackpotFeePercentage""];
""3084_updatePlatformFeePercentage"" [label=""updatePlatformFeePercentage""];
""3084_refundBet"" [label=""refundBet""];
""3084_updateERC20rewardMultiple"" [label=""updateERC20rewardMultiple""];
""3084_updateMIN_BET"" [label=""updateMIN_BET""];
""3084_settleBet"" [label=""settleBet""];
""3084_clearProcessedBet"" [label=""clearProcessedBet""];
""3084_getContractInformation"" [label=""getContractInformation""];
""3084_withdrawAllFunds"" [label=""withdrawAllFunds""];
""3084_refundTokenBet"" [label=""refundTokenBet""];
""3084_updateWithdrawalModeByIndex"" [label=""updateWithdrawalModeByIndex""];
""3084_setSecretSignerByIndex"" [label=""setSecretSignerByIndex""];
""3084_runRotateTime"" [label=""runRotateTime""];
""3084_getContractAddress"" [label=""getContractAddress""];
""3084_initialParameter"" [label=""initialParameter""];
""3084_setSecretSignerList"" [label=""setSecretSignerList""];
""3084_fallback"" [label=""fallback""];
""3084_placeTokenBet"" [label=""placeTokenBet""];
""3084_sendFundsToOwner"" [label=""sendFundsToOwner""];
""3084_constructor"" [label=""constructor""];
""3084_acceptNextOwner"" [label=""acceptNextOwner""];
""3084_updateWithdrawalMode"" [label=""updateWithdrawalMode""];
""3084_sendFundsToManager"" [label=""sendFundsToManager""];
""3084_kill"" [label=""kill""];
""3084_acceptNextManager"" [label=""acceptNextManager""];
""3084_clearStorage"" [label=""clearStorage""];
""3084_updateMAX_BET"" [label=""updateMAX_BET""];
""3084_placeBet"" [label=""placeBet""];
""3084_approveNextManager"" [label=""approveNextManager""];
""3084_withdrawToken"" -> ""3084_onlyOwner"";
""3084_updateBitComparisonMask"" -> ""3084_onlyOwner"";
""3084_clearStorage"" -> ""3084_clearProcessedBet"";
""3084_withdrawAllFunds"" -> ""3084_onlyOwner"";
""3084_sendFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getPossibleWinAmount"";
""3084_updateJackpotFeePercentage"" -> ""3084_onlyOwner"";
""3084_setMaxProfit"" -> ""3084_onlyOwner"";
""3084_withdrawAlltokenFunds"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_sendFunds"";
""3084_setTokenAddress"" -> ""3084_onlyManager"";
""3084_updateWithdrawalModeByIndex"" -> ""3084_onlyManager"";
""3084_updateERC20rewardMultiple"" -> ""3084_onlyManager"";
""3084_updateMIN_BET"" -> ""3084_onlyManager"";
""3084_initialParameter"" -> ""3084_onlyOwner"";
""3084_setSecretSignerByIndex"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_onlyOwner"";
""3084_approveNextManager"" -> ""3084_onlyManager"";
""3084_setSecretSignerList"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_sendFunds"";
""3084_refundBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_sendTokenFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_kill"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_runRotateTime"";
""3084_sendFundsToOwner"" -> ""3084_onlyOwner"";
""3084_approveNextOwner"" -> ""3084_onlyOwner"";
""3084_updateMAX_AMOUNT"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_getPossibleWinAmount"";
""3084_updatePlatformFeePercentage"" -> ""3084_onlyOwner"";
""3084_settleBetVerifi"" -> ""3084_runRotateTime"";
""3084_updateWithdrawalMode"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_sendFunds"";
""3084_runRotateTime"" -> ""3084_getJackpotWinBonus"";
""3084_updateMAX_BET"" -> ""3084_onlyManager"";
}
"
0xb4a448387403554616eb5b50aa4c48f75243a015.sol,Mobius2Dv2,"contract Mobius2Dv2 is UsingOraclizeRandom, DSMath { string public ipfsHash; string public ipfsHashType = ; MobiusToken public constant token = MobiusToken(0x54cdC9D889c28f55F59f6b136822868c7d4726fC); bool public upgraded; bool public initialized; address public nextVersion; LastVersion public constant lastVersion = LastVersion(0xA74642Aeae3e2Fd79150c910eB5368B64f864B1e); uint public previousRounds; uint public totalRevenue; uint public totalSharesSold; uint public totalEarningsGenerated; uint public totalDividendsPaid; uint public totalJackpotsWon; uint public constant DEV_DIVISOR = 20; uint public constant RETURNS_FRACTION = 60 * 10**16; uint public constant REFERRAL_FRACTION = 3 * 10**16; uint public constant JACKPOT_SEED_FRACTION = WAD / 20; uint public constant JACKPOT_FRACTION = 15 * 10**16; uint public constant DAILY_JACKPOT_FRACTION = 6 * 10**16; uint public constant DIVIDENDS_FRACTION = 9 * 10**16; uint public startingSharePrice = 1 finney; uint public _priceIncreasePeriod = 1 hours; uint public _priceMultiplier = 101 * 10**16; uint public _secondaryPrice = 100 finney; uint public maxDailyJackpot = 5 ether; uint public constant SOFT_DEADLINE_DURATION = 1 days; uint public constant DAILY_JACKPOT_PERIOD = 1 days; uint public constant TIME_PER_SHARE = 5 minutes; uint public nextRoundTime; uint public jackpotSeed; uint public devBalance; uint public unclaimedReturns; uint public constant MULTIPLIER = RAY; mapping (address => uint) public lastDailyEntry; struct Investor { uint lastCumulativeReturnsPoints; uint shares; }",1,"subgraph cluster_5179_Mobius2Dv2 {
label=""Mobius2Dv2"";
""5179_startNewRound"" [label=""startNewRound""];
""5179_roundInfo"" [label=""roundInfo""];
""5179_getSeed"" [label=""getSeed""];
""5179_finalizeAndRestart"" [label=""finalizeAndRestart""];
""5179__drawDailyJackpot"" [label=""_drawDailyJackpot""];
""5179__disburseReturns"" [label=""_disburseReturns""];
""5179_setNextRoundTimestamp"" [label=""setNextRoundTimestamp""];
""5179__outstandingReturns"" [label=""_outstandingReturns""];
""5179_reinvestReturns"" [label=""reinvestReturns""];
""5179_init"" [label=""init""];
""5179__finalizeRound"" [label=""_finalizeRound""];
""5179_upgrade"" [label=""upgrade""];
""5179_finalizeLastRound"" [label=""finalizeLastRound""];
""5179_totalsInfo"" [label=""totalsInfo""];
""5179_setMaxDailyJackpot"" [label=""setMaxDailyJackpot""];
""5179_withdrawDevShare"" [label=""withdrawDevShare""];
""5179__issueShares"" [label=""_issueShares""];
""5179__startNewDailyRound"" [label=""_startNewDailyRound""];
""5179_setIPFSHash"" [label=""setIPFSHash""];
""5179_setNextRoundDelay"" [label=""setNextRoundDelay""];
""5179__dailyJackpot"" [label=""_dailyJackpot""];
""5179__onRandom"" [label=""_onRandom""];
""5179__triggerOraclize"" [label=""_triggerOraclize""];
""5179_updateMyReturns"" [label=""updateMyReturns""];
""5179__updateReturns"" [label=""_updateReturns""];
""5179_investorInfo"" [label=""investorInfo""];
""5179_estimateReturns"" [label=""estimateReturns""];
""5179_hasReturns"" [label=""hasReturns""];
""5179__purchase"" [label=""_purchase""];
""5179_setRoundParams"" [label=""setRoundParams""];
""5179_constructor"" [label=""constructor""];
""5179__onRandomFailed"" [label=""_onRandomFailed""];
""5179_buyShares"" [label=""buyShares""];
""5179_setSecondaryPrice"" [label=""setSecondaryPrice""];
""5179_initOraclize"" [label=""initOraclize""];
""5179__splitRevenue"" [label=""_splitRevenue""];
""5179_fallback"" [label=""fallback""];
""5179_withdrawReturns"" [label=""withdrawReturns""];
""5179_initOraclize"" -> ""5179_auth"";
""5179__purchase"" -> ""5179__issueShares"";
""5179_initOraclize"" -> ""5179_oraclize_setNetwork"";
""5179__disburseReturns"" -> ""5179_wdiv"";
""5179_estimateReturns"" -> ""5179_hasReturns"";
""5179__triggerOraclize"" -> ""5179__requestRandom"";
""5179__purchase"" -> ""5179_min"";
""5179__purchase"" -> ""5179_mul"";
""5179__purchase"" -> ""5179_add"";
""5179_withdrawDevShare"" -> ""5179_auth"";
""5179_totalsInfo"" -> ""5179_wmul"";
""5179__issueShares"" -> ""5179_add"";
""5179_reinvestReturns"" -> ""5179__updateReturns"";
""5179_reinvestReturns"" -> ""5179_reinvestReturns"";
""5179_withdrawReturns"" -> ""5179_hasReturns"";
""5179__purchase"" -> ""5179__dailyJackpot"";
""5179_startNewRound"" -> ""5179__purchase"";
""5179__dailyJackpot"" -> ""5179__requestRandom"";
""5179_finalizeLastRound"" -> ""5179__finalizeRound"";
""5179__purchase"" -> ""5179__splitRevenue"";
""5179__issueShares"" -> ""5179_wdiv"";
""5179_withdrawReturns"" -> ""5179_sub"";
""5179__finalizeRound"" -> ""5179_wmul"";
""5179__dailyJackpot"" -> ""5179_oraclize_setCustomGasPrice"";
""5179_startNewRound"" -> ""5179__startNewDailyRound"";
""5179__outstandingReturns"" -> ""5179_mul"";
""5179__splitRevenue"" -> ""5179_wmul"";
""5179_init"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_min"";
""5179_upgrade"" -> ""5179_auth"";
""5179__splitRevenue"" -> ""5179_add"";
""5179_initOraclize"" -> ""5179_oraclize_setProof"";
""5179_setSecondaryPrice"" -> ""5179_auth"";
""5179_updateMyReturns"" -> ""5179__updateReturns"";
""5179_withdrawDevShare"" -> ""5179_sub"";
""5179__issueShares"" -> ""5179_mul"";
""5179__drawDailyJackpot"" -> ""5179__startNewDailyRound"";
""5179__triggerOraclize"" -> ""5179_auth"";
""5179__purchase"" -> ""5179__updateReturns"";
""5179_reinvestReturns"" -> ""5179_min"";
""5179__dailyJackpot"" -> ""5179_min"";
""5179__disburseReturns"" -> ""5179_mul"";
""5179_roundInfo"" -> ""5179_wmul"";
""5179__finalizeRound"" -> ""5179_add"";
""5179_setNextRoundTimestamp"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_sub"";
""5179_finalizeAndRestart"" -> ""5179_finalizeLastRound"";
""5179__disburseReturns"" -> ""5179_add"";
""5179_withdrawReturns"" -> ""5179__updateReturns"";
""5179_investorInfo"" -> ""5179_estimateReturns"";
""5179__updateReturns"" -> ""5179_add"";
""5179_reinvestReturns"" -> ""5179__purchase"";
""5179_finalizeAndRestart"" -> ""5179_startNewRound"";
""5179_estimateReturns"" -> ""5179__outstandingReturns"";
""5179_reinvestReturns"" -> ""5179_sub"";
""5179_setMaxDailyJackpot"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_add"";
""5179_setNextRoundDelay"" -> ""5179_auth"";
""5179__splitRevenue"" -> ""5179__disburseReturns"";
""5179__purchase"" -> ""5179_wmul"";
""5179_roundInfo"" -> ""5179_min"";
""5179__outstandingReturns"" -> ""5179_sub"";
""5179_buyShares"" -> ""5179__purchase"";
""5179_setIPFSHash"" -> ""5179_auth"";
""5179__updateReturns"" -> ""5179__outstandingReturns"";
""5179__onRandom"" -> ""5179__drawDailyJackpot"";
""5179_setRoundParams"" -> ""5179_auth"";
""5179_fallback"" -> ""5179_buyShares"";
}
"
0x402fa04ccd2c2568e1a53dbecec1bd572303663a.sol,HarborPresale,"contract HarborPresale is Haltable { using SafeMath for uint256; HarborToken public token; uint256 public startTime; uint256 public endTime; address public wallet; uint256 public rate; uint256 public weiRaised; uint256 public cap; bool public isFinalized = false; uint256 public minimumFundingGoal; uint256 public minSend; RefundVault public vault; uint public tokensMinted; mapping (address => uint256) public tokenDeposited; event Finalized(); event TokenMinted(uint count); event Distributed(address investor, uint tokenAmount); event PeriodChanged(uint256 starttm,uint256 endtm); event TokenPurchase(address indexed purchaser, address indexed investor, uint256 value); function HarborPresale(address _token, uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap, uint256 _minimumFundingGoal, uint256 _minSend) { require(_startTime >= now); require(_endTime >= _startTime); require(_rate > 0); require(_wallet != 0x0); require(_cap > 0); require(_minimumFundingGoal > 0); token = HarborToken(_token); startTime = _startTime; endTime = _endTime; rate = _rate; wallet = _wallet; cap = _cap; vault = new RefundVault(_wallet); minimumFundingGoal = _minimumFundingGoal; minSend = _minSend; }",1,"subgraph cluster_1508_HarborPresale {
label=""HarborPresale"";
""1508_finalize"" [label=""finalize""];
""1508_minFundingGoalReached"" [label=""minFundingGoalReached""];
""1508_fallback"" [label=""fallback""];
""1508_claimTokenAddress"" [label=""claimTokenAddress""];
""1508_HarborPresale"" [label=""HarborPresale""];
""1508_claimRefund"" [label=""claimRefund""];
""1508_withdrawFund"" [label=""withdrawFund""];
""1508_claimToken"" [label=""claimToken""];
""1508_hasEnded"" [label=""hasEnded""];
""1508_finalization"" [label=""finalization""];
""1508_mintForEverybody"" [label=""mintForEverybody""];
""1508_setPeriod"" [label=""setPeriod""];
""1508_validPurchase"" [label=""validPurchase""];
""1508_buyTokens"" [label=""buyTokens""];
""1508_claimRefund"" -> ""1508_stopInEmergency"";
""1508_claimRefund"" -> ""1508_minFundingGoalReached"";
""1508_finalize"" -> ""1508_hasEnded"";
""1508_finalization"" -> ""1508_minFundingGoalReached"";
""1508_claimToken"" -> ""1508_stopInEmergency"";
""1508_buyTokens"" -> ""1508_validPurchase"";
""1508_fallback"" -> ""1508_buyTokens"";
""1508_claimToken"" -> ""1508_claimTokenAddress"";
""1508_finalize"" -> ""1508_stopInEmergency"";
""1508_mintForEverybody"" -> ""1508_onlyOwner"";
""1508_claimTokenAddress"" -> ""1508_stopInEmergency"";
""1508_setPeriod"" -> ""1508_onlyOwner"";
""1508_buyTokens"" -> ""1508_stopInEmergency"";
""1508_finalize"" -> ""1508_finalization"";
""1508_withdrawFund"" -> ""1508_onlyOwner"";
""1508_withdrawFund"" -> ""1508_minFundingGoalReached"";
""1508_finalize"" -> ""1508_onlyOwner"";
}
"
0xc3e43d422d5e6f94315622d96a96058689c52ec8.sol,BitNauticCrowdsaleTokenDistributor,"contract BitNauticCrowdsaleTokenDistributor is Ownable { using SafeMath for uint256; uint256 public constant ICOStartTime = 1531267200; uint256 public constant ICOEndTime = 1536969600; uint256 public teamSupply = 3000000 * 10 ** 18; uint256 public bountySupply = 2500000 * 10 ** 18; uint256 public reserveSupply = 5000000 * 10 ** 18; uint256 public advisorSupply = 2500000 * 10 ** 18; uint256 public founderSupply = 2000000 * 10 ** 18; MintableToken public token; BitNauticWhitelist public whitelist; BitNauticCrowdsale public crowdsale; mapping (address => bool) public hasClaimedTokens; constructor(MintableToken _token, BitNauticWhitelist _whitelist, BitNauticCrowdsale _crowdsale) public { token = _token; whitelist = _whitelist; crowdsale = _crowdsale; }",1,"subgraph cluster_494_BitNauticCrowdsaleTokenDistributor {
label=""BitNauticCrowdsaleTokenDistributor"";
""494_privateSale"" [label=""privateSale""];
""494_constructor"" [label=""constructor""];
""494_transferTokenOwnership"" [label=""transferTokenOwnership""];
""494_claimBitNauticTokens"" [label=""claimBitNauticTokens""];
""494_grantAdvisorsTokens"" [label=""grantAdvisorsTokens""];
""494_grantBountyTokens"" [label=""grantBountyTokens""];
""494_grantFoundersTokens"" [label=""grantFoundersTokens""];
""494_grantReserveTokens"" [label=""grantReserveTokens""];
""494_grantTeamTokens"" [label=""grantTeamTokens""];
""494_grantContributorTokens"" [label=""grantContributorTokens""];
""494_grantFoundersTokens"" -> ""494_onlyOwner"";
""494_grantReserveTokens"" -> ""494_onlyOwner"";
""494_privateSale"" -> ""494_onlyOwner"";
""494_transferTokenOwnership"" -> ""494_onlyOwner"";
""494_claimBitNauticTokens"" -> ""494_grantContributorTokens"";
""494_grantTeamTokens"" -> ""494_onlyOwner"";
""494_grantBountyTokens"" -> ""494_onlyOwner"";
""494_grantAdvisorsTokens"" -> ""494_onlyOwner"";
}
"
0xc3e43d422d5e6f94315622d96a96058689c52ec8.sol,BitNauticCrowdsaleTokenDistributor,"contract BitNauticCrowdsaleTokenDistributor is Ownable { using SafeMath for uint256; uint256 public constant ICOStartTime = 1531267200; uint256 public constant ICOEndTime = 1536969600; uint256 public teamSupply = 3000000 * 10 ** 18; uint256 public bountySupply = 2500000 * 10 ** 18; uint256 public reserveSupply = 5000000 * 10 ** 18; uint256 public advisorSupply = 2500000 * 10 ** 18; uint256 public founderSupply = 2000000 * 10 ** 18; MintableToken public token; BitNauticWhitelist public whitelist; BitNauticCrowdsale public crowdsale; mapping (address => bool) public hasClaimedTokens; constructor(MintableToken _token, BitNauticWhitelist _whitelist, BitNauticCrowdsale _crowdsale) public { token = _token; whitelist = _whitelist; crowdsale = _crowdsale; }",1,"subgraph cluster_494_BitNauticCrowdsaleTokenDistributor {
label=""BitNauticCrowdsaleTokenDistributor"";
""494_privateSale"" [label=""privateSale""];
""494_constructor"" [label=""constructor""];
""494_transferTokenOwnership"" [label=""transferTokenOwnership""];
""494_claimBitNauticTokens"" [label=""claimBitNauticTokens""];
""494_grantAdvisorsTokens"" [label=""grantAdvisorsTokens""];
""494_grantBountyTokens"" [label=""grantBountyTokens""];
""494_grantFoundersTokens"" [label=""grantFoundersTokens""];
""494_grantReserveTokens"" [label=""grantReserveTokens""];
""494_grantTeamTokens"" [label=""grantTeamTokens""];
""494_grantContributorTokens"" [label=""grantContributorTokens""];
""494_grantFoundersTokens"" -> ""494_onlyOwner"";
""494_grantReserveTokens"" -> ""494_onlyOwner"";
""494_privateSale"" -> ""494_onlyOwner"";
""494_transferTokenOwnership"" -> ""494_onlyOwner"";
""494_claimBitNauticTokens"" -> ""494_grantContributorTokens"";
""494_grantTeamTokens"" -> ""494_onlyOwner"";
""494_grantBountyTokens"" -> ""494_onlyOwner"";
""494_grantAdvisorsTokens"" -> ""494_onlyOwner"";
}
"
0xc4aad17558fa95c8937d0856b2dad74c1a7a095f.sol,AgiCrowdsale,"contract AgiCrowdsale is Ownable, ReentrancyGuard { using SafeMath for uint256; uint256 public firstDayCap; uint256 public cap; uint256 public goal; uint256 public rate; uint256 public constant WEI_TO_COGS = 10**uint256(10); address public wallet; RefundVault public vault; SingularityNetToken public token; uint256 public startTime; uint256 public endTime; uint256 public firstDay; bool public isFinalized = false; uint256 public weiRaised; mapping(address => bool) public whitelist; mapping(address => uint256) public contribution; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event TokenRelease(address indexed beneficiary, uint256 amount); event TokenRefund(address indexed refundee, uint256 amount); event Finalized(); function AgiCrowdsale( address _token, address _wallet, uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _firstDayCap, uint256 _goal ) { require(_startTime >= getBlockTimestamp()); require(_endTime >= _startTime); require(_rate > 0); require(_goal > 0); require(_cap > 0); require(_wallet != 0x0); vault = new RefundVault(_wallet); token = SingularityNetToken(_token); wallet = _wallet; startTime = _startTime; endTime = _endTime; firstDay = startTime + 1 * 1 days; firstDayCap = _firstDayCap; rate = _rate; goal = _goal; cap = _cap; }",1,"subgraph cluster_1528_AgiCrowdsale {
label=""AgiCrowdsale"";
""1528_getBlockTimestamp"" [label=""getBlockTimestamp""];
""1528_getTokens"" [label=""getTokens""];
""1528_claimUnsold"" [label=""claimUnsold""];
""1528_finalize"" [label=""finalize""];
""1528_capReached"" [label=""capReached""];
""1528_buyTokens"" [label=""buyTokens""];
""1528_validPurchase"" [label=""validPurchase""];
""1528_claimRefund"" [label=""claimRefund""];
""1528_updateWhitelist"" [label=""updateWhitelist""];
""1528_forwardFunds"" [label=""forwardFunds""];
""1528_AgiCrowdsale"" [label=""AgiCrowdsale""];
""1528_goalReached"" [label=""goalReached""];
""1528_fallback"" [label=""fallback""];
""1528_isWhitelisted"" [label=""isWhitelisted""];
""1528_hasEnded"" [label=""hasEnded""];
""1528_claimRefund"" -> ""1528_goalReached"";
""1528_hasEnded"" -> ""1528_capReached"";
""1528_claimUnsold"" -> ""1528_getBlockTimestamp"";
""1528_AgiCrowdsale"" -> ""1528_getBlockTimestamp"";
""1528_buyTokens"" -> ""1528_getTokens"";
""1528_claimUnsold"" -> ""1528_onlyOwner"";
""1528_finalize"" -> ""1528_goalReached"";
""1528_claimRefund"" -> ""1528_nonReentrant"";
""1528_hasEnded"" -> ""1528_getBlockTimestamp"";
""1528_finalize"" -> ""1528_hasEnded"";
""1528_fallback"" -> ""1528_buyTokens"";
""1528_buyTokens"" -> ""1528_validPurchase"";
""1528_validPurchase"" -> ""1528_getBlockTimestamp"";
""1528_buyTokens"" -> ""1528_getBlockTimestamp"";
""1528_updateWhitelist"" -> ""1528_onlyOwner"";
""1528_finalize"" -> ""1528_onlyOwner"";
""1528_buyTokens"" -> ""1528_forwardFunds"";
}
"
0x6dbb4e882f967432fc0f9200e9ca577c916d8a68.sol,Bussiness,contract Bussiness is Ownable { IERC721 public erc721Address = IERC721(0x06012c8cf97bead5deae237070f9587f8e7a266d); ERC20BasicInterface public usdtToken = ERC20BasicInterface(0xdAC17F958D2ee523a2206206994597C13D831ec7); uint256 public ETHFee = 2; uint256 public HBWALLETFee = 1; uint256 public balance = address(this).balance; constructor() public {},1,"subgraph cluster_687_Bussiness {
label=""Bussiness"";
""687_buyByUsdt"" [label=""buyByUsdt""];
""687_setPrice"" [label=""setPrice""];
""687_getPrice"" [label=""getPrice""];
""687_ownerOf"" [label=""ownerOf""];
""687_constructor"" [label=""constructor""];
""687_resetPrice"" [label=""resetPrice""];
""687_setFee"" [label=""setFee""];
""687_withdraw"" [label=""withdraw""];
""687_setPriceFeeEth"" [label=""setPriceFeeEth""];
""687_removePrice"" [label=""removePrice""];
""687_buy"" [label=""buy""];
""687_buyByUsdt"" -> ""687_resetPrice"";
""687_setFee"" -> ""687_onlyOwner"";
""687_withdraw"" -> ""687_onlyOwner"";
""687_buy"" -> ""687_resetPrice"";
""687_getPrice"" -> ""687_resetPrice"";
""687_removePrice"" -> ""687_resetPrice"";
}
"
0x74a12ce6eebc23c3f785c0ab50d02228587dcc1a.sol,FrozenToken,"contract FrozenToken is ERC20Token, ITokenRecipient { mapping (address => bool) frozeds; uint256 public frozedCount; bool public freezeEnabled = false; bool public autoFreeze = false; bool public mintFinished = false; event Freeze(address indexed wallet); event UnFreeze(address indexed wallet); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); event Mint(address indexed sender, address indexed wallet, uint256 amount); event ReceiveTokens(address indexed spender, address indexed token, uint256 value, bytes extraData); event ApproveAndCall(address indexed spender, uint256 value, bytes extraData); event Burn(address indexed sender, uint256 amount); event MintFinished(address indexed spender); modifier notFreeze { require(frozeds[msg.sender] == false || freezeEnabled == false); _; }",1,"subgraph cluster_1883_FrozenToken {
label=""FrozenToken"";
""1883_unFreeze"" [label=""unFreeze""];
""1883_transfer"" [label=""transfer""];
""1883_increaseApproval"" [label=""increaseApproval""];
""1883_decreaseApproval"" [label=""decreaseApproval""];
""1883_approveAndCall"" [label=""approveAndCall""];
""1883_mint"" [label=""mint""];
""1883_approve"" [label=""approve""];
""1883_freeze"" [label=""freeze""];
""1883_mintFinish"" [label=""mintFinish""];
""1883_isFreeze"" [label=""isFreeze""];
""1883_updAutoFreeze"" [label=""updAutoFreeze""];
""1883_burn"" [label=""burn""];
""1883_updFreezeEnabled"" [label=""updFreezeEnabled""];
""1883_receiveApproval"" [label=""receiveApproval""];
""1883_transferFrom"" [label=""transferFrom""];
""1883_mint"" -> ""1883_canMint"";
""1883_freeze"" -> ""1883_notOwner"";
""1883_transferFrom"" -> ""1883_transferFrom"";
""1883_approve"" -> ""1883_approve"";
""1883_mint"" -> ""1883_validAddress"";
""1883_increaseApproval"" -> ""1883_notFreezeFrom"";
""1883_approveAndCall"" -> ""1883_validAddress"";
""1883_unFreeze"" -> ""1883_validAddress"";
""1883_decreaseApproval"" -> ""1883_notFreezeFrom"";
""1883_freeze"" -> ""1883_authLevel"";
""1883_mintFinish"" -> ""1883_onlyOwner"";
""1883_transfer"" -> ""1883_transfer"";
""1883_receiveApproval"" -> ""1883_validAddress"";
""1883_approveAndCall"" -> ""1883_approve"";
""1883_receiveApproval"" -> ""1883_greaterThanZero"";
""1883_burn"" -> ""1883_validBalance"";
""1883_burn"" -> ""1883_greaterThanZero"";
""1883_increaseApproval"" -> ""1883_increaseApproval"";
""1883_transfer"" -> ""1883_notFreeze"";
""1883_mint"" -> ""1883_isAuthorized"";
""1883_isFreeze"" -> ""1883_validAddress"";
""1883_freeze"" -> ""1883_notThis"";
""1883_approve"" -> ""1883_notFreezeFrom"";
""1883_freeze"" -> ""1883_validAddress"";
""1883_transferFrom"" -> ""1883_notFreezeFrom"";
""1883_updFreezeEnabled"" -> ""1883_authLevel"";
""1883_unFreeze"" -> ""1883_authLevel"";
""1883_mint"" -> ""1883_isFreeze"";
""1883_updAutoFreeze"" -> ""1883_authLevel"";
""1883_mint"" -> ""1883_greaterThanZero"";
""1883_decreaseApproval"" -> ""1883_decreaseApproval"";
""1883_approveAndCall"" -> ""1883_greaterThanZero"";
""1883_burn"" -> ""1883_isFreeze"";
""1883_mint"" -> ""1883_authLevel"";
}
"
0x3fd2371b53f2db38765220c90f2ffd4ddbe8afd1.sol,MonethaUsersClaimHandler,contract MonethaUsersClaimHandler is Contactable { string constant VERSION = ; MonethaUsersClaimStorage public storageContract; event StorageContractOwnerChanged(address indexed _newOwner); constructor(address _storageAddr) public { storageContract = MonethaUsersClaimStorage(_storageAddr); },1,"subgraph cluster_366_MonethaUsersClaimHandler {
label=""MonethaUsersClaimHandler"";
""366_deleteAccount"" [label=""deleteAccount""];
""366_constructor"" [label=""constructor""];
""366_changeOwnerOfMonethaUsersClaimStorage"" [label=""changeOwnerOfMonethaUsersClaimStorage""];
""366_deleteAccountsInBulk"" [label=""deleteAccountsInBulk""];
""366_claimTokens"" [label=""claimTokens""];
""366_claimTokensInBulk"" [label=""claimTokensInBulk""];
""366_deleteAccount"" -> ""366_onlyOwner"";
""366_deleteAccountsInBulk"" -> ""366_onlyOwner"";
""366_claimTokensInBulk"" -> ""366_onlyOwner"";
""366_changeOwnerOfMonethaUsersClaimStorage"" -> ""366_onlyOwner"";
""366_claimTokens"" -> ""366_onlyOwner"";
}
"
0x4bc78f6619991b029b867b6d88d39c196332aba3.sol,AlgoDEX,"contract AlgoDEX is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_AlgoDEX {
label=""AlgoDEX"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_trade"" [label=""trade""];
""1614_deposit"" [label=""deposit""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_depositToken"" [label=""depositToken""];
""1614_order"" [label=""order""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_constructor"" [label=""constructor""];
""1614_testTrade"" [label=""testTrade""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_withdraw"" -> ""1614_safeSub"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
}
"
0x2716d9189adc5ee2fb35f193b79b5578c3d7bcda.sol,EthereumLegitAirDrop,"contract EthereumLegitAirDrop is Ownable { uint public numDrops; uint public dropAmount; token myToken; function EthereumLegitAirDrop(address dropper, address tokenContractAddress) { myToken = token(tokenContractAddress); transferOwnership(dropper); }",1,"subgraph cluster_416_EthereumLegitAirDrop {
label=""EthereumLegitAirDrop"";
""416_EthereumLegitAirDrop"" [label=""EthereumLegitAirDrop""];
""416_emergencyDrain"" [label=""emergencyDrain""];
""416_airDrop"" [label=""airDrop""];
""416_EthereumLegitAirDrop"" -> ""416_transferOwnership"";
""416_emergencyDrain"" -> ""416_onlyOwner"";
""416_airDrop"" -> ""416_onlyOwner"";
}
"
0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol,SharkPool,"contract SharkPool is Ownable, ReentrancyGuard { string constant public pool_name = ; uint256 public pool_percentage = 5; uint256 constant public max_users = 100; uint256 public total_users = 0; uint256 public constant divisible_units = 10000000; uint256 public contract_period = 100; uint256 public mined_blocks = 1; uint256 public claimed_blocks = 1; uint256 public blockCreationRate = 0; BitcoineumInterface base_contract; struct user { uint256 start_block; uint256 end_block; uint256 proportional_contribution; }",1,"subgraph cluster_893_SharkPool {
label=""SharkPool"";
""893_current_external_block"" [label=""current_external_block""];
""893_SharkPool"" [label=""SharkPool""];
""893_find_contribution"" [label=""find_contribution""];
""893_mine"" [label=""mine""];
""893_checkMiningAttempt"" [label=""checkMiningAttempt""];
""893_checkWinning"" [label=""checkWinning""];
""893_allocate_slot"" [label=""allocate_slot""];
""893_fallback"" [label=""fallback""];
""893_available_slots"" [label=""available_slots""];
""893_get_bitcoineum_contract_address"" [label=""get_bitcoineum_contract_address""];
""893_external_to_internal_block_number"" [label=""external_to_internal_block_number""];
""893_do_redemption"" [label=""do_redemption""];
""893_redeem"" [label=""redeem""];
""893_set_pool_percentage"" [label=""set_pool_percentage""];
""893_balanceOf"" [label=""balanceOf""];
""893_distribute_reward"" [label=""distribute_reward""];
""893_calculate_minimum_contribution"" [label=""calculate_minimum_contribution""];
""893_claim"" [label=""claim""];
""893_SharkPool"" -> ""893_get_bitcoineum_contract_address"";
""893_redeem"" -> ""893_do_redemption"";
""893_set_pool_percentage"" -> ""893_nonReentrant"";
""893_redeem"" -> ""893_nonReentrant"";
""893_set_pool_percentage"" -> ""893_onlyOwner"";
""893_mine"" -> ""893_external_to_internal_block_number"";
""893_fallback"" -> ""893_do_redemption"";
""893_claim"" -> ""893_distribute_reward"";
""893_mine"" -> ""893_current_external_block"";
""893_fallback"" -> ""893_allocate_slot"";
""893_fallback"" -> ""893_calculate_minimum_contribution"";
""893_claim"" -> ""893_nonReentrant"";
""893_mine"" -> ""893_nonReentrant"";
}
"
0xeda8b016efa8b1161208cf041cd86972eee0f31e.sol,BonusFinalizeAgent,"contract BonusFinalizeAgent is FinalizeAgent, SafeMathLib { CrowdsaleToken public token; Crowdsale public crowdsale; uint256 public allocatedTokens; uint256 tokenCap; address walletAddress; function BonusFinalizeAgent(CrowdsaleToken _token, Crowdsale _crowdsale, uint256 _tokenCap, address _walletAddress) public { token = _token; crowdsale = _crowdsale; require(address(crowdsale) != 0); tokenCap = _tokenCap; walletAddress = _walletAddress; }",1,"subgraph cluster_2784_BonusFinalizeAgent {
label=""BonusFinalizeAgent"";
""2784_isSane"" [label=""isSane""];
""2784_finalizeCrowdsale"" [label=""finalizeCrowdsale""];
""2784_BonusFinalizeAgent"" [label=""BonusFinalizeAgent""];
""2784_finalizeCrowdsale"" -> ""2784_safeSub"";
}
"
0x269b4c23ddab676e2869ae72cd6ae4f24bdfea45.sol,IRBPreCrowdsale,"contract IRBPreCrowdsale is Ownable, Pausable { using SafeMath for uint; IRBToken public token; IRBPreRefundVault public vault; uint startTime = 1513065600; uint endTime = 1515963599; uint256 public constant minPresaleAmount = 108 * 10 ** 15; uint256 public constant goal = 1125 * 10 ** 18; uint256 public constant cap = 2250 * 10 ** 18; uint256 public weiRaised; bool public isFinalized = false; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event Finalized(); function IRBPreCrowdsale(address _tokenAddress, address _vaultAddress) { require(_tokenAddress != address(0)); require(_vaultAddress != address(0)); token = IRBToken(_tokenAddress); vault = IRBPreRefundVault(_vaultAddress); }",1,"subgraph cluster_1552_IRBPreCrowdsale {
label=""IRBPreCrowdsale"";
""1552_buyTokens"" [label=""buyTokens""];
""1552_withdraw"" [label=""withdraw""];
""1552_convertAmountToTokens"" [label=""convertAmountToTokens""];
""1552_IRBPreCrowdsale"" [label=""IRBPreCrowdsale""];
""1552_hasEnded"" [label=""hasEnded""];
""1552_kill"" [label=""kill""];
""1552_finalize"" [label=""finalize""];
""1552_claimRefund"" [label=""claimRefund""];
""1552_fallback"" [label=""fallback""];
""1552_validPurchase"" [label=""validPurchase""];
""1552_goalReached"" [label=""goalReached""];
""1552_buyTokens"" -> ""1552_convertAmountToTokens"";
""1552_withdraw"" -> ""1552_onlyOwner"";
""1552_fallback"" -> ""1552_buyTokens"";
""1552_buyTokens"" -> ""1552_validPurchase"";
""1552_buyTokens"" -> ""1552_whenNotPaused"";
""1552_kill"" -> ""1552_whenPaused"";
""1552_finalize"" -> ""1552_hasEnded"";
""1552_finalize"" -> ""1552_onlyOwner"";
""1552_kill"" -> ""1552_onlyOwner"";
""1552_finalize"" -> ""1552_goalReached"";
""1552_claimRefund"" -> ""1552_goalReached"";
""1552_withdraw"" -> ""1552_goalReached"";
}
"
0x32f1c992a32376fa0f723aecaa247119d3f7f8bd.sol,Zethroll,"contract Zethroll is ZTHReceivingContract { using SafeMath for uint; modifier betIsValid(uint _betSize, uint _playerNumber) { require( calculateProfit(_betSize, _playerNumber) < maxProfit && _betSize >= minBet && _playerNumber > minNumber && _playerNumber < maxNumber); _; }",1,"subgraph cluster_843_Zethroll {
label=""Zethroll"";
""843_calculateProfit"" [label=""calculateProfit""];
""843_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""843_tokenFallback"" [label=""tokenFallback""];
""843_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""843_ownerSetMinBet"" [label=""ownerSetMinBet""];
""843__playerRollDice"" [label=""_playerRollDice""];
""843__zthToken"" [label=""_zthToken""];
""843_fallback"" [label=""fallback""];
""843_random"" [label=""random""];
""843_ownerTransferZTH"" [label=""ownerTransferZTH""];
""843_constructor"" [label=""constructor""];
""843__finishBet"" [label=""_finishBet""];
""843_dumpdivs"" [label=""dumpdivs""];
""843_finishBet"" [label=""finishBet""];
""843_ownerPauseGame"" [label=""ownerPauseGame""];
""843_ownerSetBankroll"" [label=""ownerSetBankroll""];
""843_setMaxProfit"" [label=""setMaxProfit""];
""843_ownerChangeOwner"" [label=""ownerChangeOwner""];
""843_ownerkill"" [label=""ownerkill""];
""843_maxRandom"" [label=""maxRandom""];
""843__playerRollDice"" -> ""843__zthToken"";
""843_ownerTransferZTH"" -> ""843_onlyOwner"";
""843_ownerChangeOwner"" -> ""843_onlyOwner"";
""843_constructor"" -> ""843_ownerSetMaxProfitAsPercentOfHouse"";
""843_ownerPauseGame"" -> ""843_onlyOwner"";
""843_constructor"" -> ""843_ownerSetMinBet"";
""843_random"" -> ""843_maxRandom"";
""843_ownerSetMinBet"" -> ""843_onlyOwner"";
""843_tokenFallback"" -> ""843_setMaxProfit"";
""843_ownerUpdateContractBalance"" -> ""843_onlyOwner"";
""843_ownerSetMaxProfitAsPercentOfHouse"" -> ""843_setMaxProfit"";
""843__finishBet"" -> ""843_setMaxProfit"";
""843_ownerSetBankroll"" -> ""843_onlyOwner"";
""843__playerRollDice"" -> ""843_gameIsActive"";
""843_finishBet"" -> ""843__finishBet"";
""843__playerRollDice"" -> ""843_betIsValid"";
""843_finishBet"" -> ""843_gameIsActive"";
""843__finishBet"" -> ""843_random"";
""843_tokenFallback"" -> ""843__playerRollDice"";
""843_ownerSetMaxProfitAsPercentOfHouse"" -> ""843_onlyOwner"";
""843__finishBet"" -> ""843_calculateProfit"";
""843_ownerkill"" -> ""843_onlyOwner"";
""843_ownerTransferZTH"" -> ""843_setMaxProfit"";
""843__playerRollDice"" -> ""843__finishBet"";
}
"
0x70f90f6688cb26b6a924a2155b3d9529a0b36a90.sol,Crowdsale,"contract Crowdsale is Pausable{ using SafeMath for uint256; BurnableToken public token; address public wallet; uint256 public rate = 1883800000000000000000; uint256 tokensSold; uint256 public weiRaised; uint256 startTime; uint256 phaze1Start = 1564617600; uint256 phaze1End = 1567209600; uint256 phaze2Start = 1567296000; uint256 phaze2End = 1569801600; uint256 phaze3Start = 1569888000; uint256 phaze3End = 1572480000; uint256 rate1 = 3767600000000000000000; uint256 rate2 = 2354750000000000000000; uint256 rate3 = 2093100000000000000000; uint256 public hardcap = 250000000000000000000000000; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 time); event buyx(address buyer, address contractAddr, uint256 amount); constructor(address _wallet, BurnableToken _token, uint256 starttime, uint256 _cap) public{ require(_wallet != address(0)); require(_token != address(0)); wallet = _wallet; token = _token; startTime = starttime; hardcap = _cap; }",1,"subgraph cluster_1262_Crowdsale {
label=""Crowdsale"";
""1262_fallback"" [label=""fallback""];
""1262_setphase1"" [label=""setphase1""];
""1262_setphase2"" [label=""setphase2""];
""1262__postValidatePurchase"" [label=""_postValidatePurchase""];
""1262__getTokenAmount"" [label=""_getTokenAmount""];
""1262__deliverTokens"" [label=""_deliverTokens""];
""1262_constructor"" [label=""constructor""];
""1262__processPurchase"" [label=""_processPurchase""];
""1262_setphase3"" [label=""setphase3""];
""1262_setCrowdsale"" [label=""setCrowdsale""];
""1262_buyTokens"" [label=""buyTokens""];
""1262__updatePurchasingState"" [label=""_updatePurchasingState""];
""1262__preValidatePurchase"" [label=""_preValidatePurchase""];
""1262_setWallet"" [label=""setWallet""];
""1262__forwardFunds"" [label=""_forwardFunds""];
""1262_setphase2"" -> ""1262_onlyOwner"";
""1262_fallback"" -> ""1262_buyTokens"";
""1262_setphase1"" -> ""1262_onlyOwner"";
""1262_fallback"" -> ""1262_whenNotPaused"";
""1262_buyTokens"" -> ""1262__processPurchase"";
""1262_buyTokens"" -> ""1262__forwardFunds"";
""1262_setCrowdsale"" -> ""1262_onlyOwner"";
""1262_buyTokens"" -> ""1262__updatePurchasingState"";
""1262__processPurchase"" -> ""1262__deliverTokens"";
""1262_buyTokens"" -> ""1262__postValidatePurchase"";
""1262_fallback"" -> ""1262__getTokenAmount"";
""1262_setphase3"" -> ""1262_onlyOwner"";
""1262_setWallet"" -> ""1262_onlyOwner"";
""1262_buyTokens"" -> ""1262__getTokenAmount"";
""1262_buyTokens"" -> ""1262_whenNotPaused"";
}
"
0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol,XC,contract XC is XCInterface { struct Admin { uint8 status; bytes32 platformName; address account; },1,"subgraph cluster_228_XCPluginInterface {
label=""XCPluginInterface"";
""228_getTokenSymbol"" [label=""getTokenSymbol""];
""228_countOfPublicKey"" [label=""countOfPublicKey""];
""228_stop"" [label=""stop""];
""228_getPlatformName"" [label=""getPlatformName""];
""228_publicKeys"" [label=""publicKeys""];
""228_existCaller"" [label=""existCaller""];
""228_addPublicKey"" [label=""addPublicKey""];
""228_verifyProposal"" [label=""verifyProposal""];
""228_deleteCaller"" [label=""deleteCaller""];
""228_existPublicKey"" [label=""existPublicKey""];
""228_getWeight"" [label=""getWeight""];
""228_deleteProposal"" [label=""deleteProposal""];
""228_deletePublicKey"" [label=""deletePublicKey""];
""228_getAdmin"" [label=""getAdmin""];
""228_getProposal"" [label=""getProposal""];
""228_getStatus"" [label=""getStatus""];
""228_getTrustPlatform"" [label=""getTrustPlatform""];
""228_getCallers"" [label=""getCallers""];
""228_addCaller"" [label=""addCaller""];
""228_voteProposal"" [label=""voteProposal""];
""228_start"" [label=""start""];
""228_setAdmin"" [label=""setAdmin""];
""228_commitProposal"" [label=""commitProposal""];
""228_setWeight"" [label=""setWeight""];
}
"
0x3420894bf786866a09937b0369d5b4781870c21f.sol,LikeCoin,"contract LikeCoin is ERC20, HasOperator { using SafeMath for uint256; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public supply = 0; mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; address public crowdsaleAddr = 0x0; address public contributorPoolAddr = 0x0; uint256 public contributorPoolMintQuota = 0; address[] public creatorsPoolAddrs; mapping(address => bool) isCreatorsPool; uint256 public creatorsPoolMintQuota = 0; mapping(address => uint256) public lockedBalances; uint public unlockTime = 0; SignatureChecker public signatureChecker = SignatureChecker(0x0); bool public signatureCheckerFreezed = false; address public signatureOwner = 0x0; bool public allowDelegate = true; mapping (address => mapping (uint256 => bool)) public usedNonce; mapping (address => bool) public transferAndCallWhitelist; event Lock(address indexed _addr, uint256 _value); event SignatureCheckerChanged(address _newSignatureChecker); function LikeCoin(uint256 _initialSupply, address _signatureOwner, address _sigCheckerAddr) public { supply = _initialSupply; balances[owner] = _initialSupply; signatureOwner = _signatureOwner; signatureChecker = SignatureChecker(_sigCheckerAddr); Transfer(0x0, owner, _initialSupply); }",1,"subgraph cluster_1696_LikeCoin {
label=""LikeCoin"";
""1696_switchDelegate"" [label=""switchDelegate""];
""1696_transfer"" [label=""transfer""];
""1696__transfer"" [label=""_transfer""];
""1696_transferDelegated"" [label=""transferDelegated""];
""1696_registerContributorPool"" [label=""registerContributorPool""];
""1696_registerCreatorsPools"" [label=""registerCreatorsPools""];
""1696_transferAndCall"" [label=""transferAndCall""];
""1696_transferMultipleDelegated"" [label=""transferMultipleDelegated""];
""1696__transferMultiple"" [label=""_transferMultiple""];
""1696_allowance"" [label=""allowance""];
""1696_totalSupply"" [label=""totalSupply""];
""1696_setSignatureChecker"" [label=""setSignatureChecker""];
""1696_removeTransferAndCallWhitelist"" [label=""removeTransferAndCallWhitelist""];
""1696__tryUnlockBalance"" [label=""_tryUnlockBalance""];
""1696_transferAndCallDelegated"" [label=""transferAndCallDelegated""];
""1696_mintForCreatorsPool"" [label=""mintForCreatorsPool""];
""1696_freezeSignatureChecker"" [label=""freezeSignatureChecker""];
""1696_LikeCoin"" [label=""LikeCoin""];
""1696_addTransferAndCallWhitelist"" [label=""addTransferAndCallWhitelist""];
""1696_transferMultiple"" [label=""transferMultiple""];
""1696_approve"" [label=""approve""];
""1696_registerCrowdsales"" [label=""registerCrowdsales""];
""1696_transferAndLock"" [label=""transferAndLock""];
""1696_balanceOf"" [label=""balanceOf""];
""1696_mintForContributorPool"" [label=""mintForContributorPool""];
""1696__transferAndCall"" [label=""_transferAndCall""];
""1696__isContract"" [label=""_isContract""];
""1696_transferFrom"" [label=""transferFrom""];
""1696_burn"" [label=""burn""];
""1696_transferMultipleDelegated"" -> ""1696__transferMultiple"";
""1696_transferAndCall"" -> ""1696__transferAndCall"";
""1696__transfer"" -> ""1696__tryUnlockBalance"";
""1696__transferAndCall"" -> ""1696__isContract"";
""1696_transferDelegated"" -> ""1696__transfer"";
""1696_registerContributorPool"" -> ""1696__isContract"";
""1696_registerCrowdsales"" -> ""1696__isContract"";
""1696_transferMultiple"" -> ""1696__transferMultiple"";
""1696_removeTransferAndCallWhitelist"" -> ""1696_ownerOrOperator"";
""1696_registerCrowdsales"" -> ""1696_onlyOwner"";
""1696_registerCreatorsPools"" -> ""1696_onlyOwner"";
""1696_transferFrom"" -> ""1696__transfer"";
""1696_transferDelegated"" -> ""1696_isDelegated"";
""1696_registerCreatorsPools"" -> ""1696__isContract"";
""1696_transferMultipleDelegated"" -> ""1696_isDelegated"";
""1696_switchDelegate"" -> ""1696_ownerOrOperator"";
""1696__transferMultiple"" -> ""1696__tryUnlockBalance"";
""1696__transferAndCall"" -> ""1696__transfer"";
""1696_transfer"" -> ""1696__transfer"";
""1696_addTransferAndCallWhitelist"" -> ""1696__isContract"";
""1696_addTransferAndCallWhitelist"" -> ""1696_ownerOrOperator"";
""1696_transferAndCallDelegated"" -> ""1696__transferAndCall"";
""1696_registerContributorPool"" -> ""1696_onlyOwner"";
""1696_transferAndCallDelegated"" -> ""1696_isDelegated"";
}
"
0xc739ae9ba934f937636a2ebaaf1ecdf04e11ef2f.sol,NXTGToken,contract NXTGToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 7000000 * (10**5); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; constructor () public { owner = msg.sender; },1,"subgraph cluster_756_NXTGToken {
label=""NXTGToken"";
""756_approve"" [label=""approve""];
""756_transferFrom"" [label=""transferFrom""];
""756_refundTokens"" [label=""refundTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_setOwner"" [label=""setOwner""];
""756_constructor"" [label=""constructor""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_createTokens"" [label=""createTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_approve"" -> ""756_approve"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
}
"
0x4cd988afbad37289baaf53c13e98e2bd46aaea8c.sol,DSToken,"contract DSToken is DSTokenBase(0), DSStop { bytes32 public symbol; uint256 public decimals = 18; address public generator; modifier onlyGenerator { if(msg.sender!=generator) throw; _; }",1,"subgraph cluster_1440_DSToken {
label=""DSToken"";
""1440_setName"" [label=""setName""];
""1440_push"" [label=""push""];
""1440_burn"" [label=""burn""];
""1440_DSToken"" [label=""DSToken""];
""1440_transferFrom"" [label=""transferFrom""];
""1440_transfer"" [label=""transfer""];
""1440_generatorTransfer"" [label=""generatorTransfer""];
""1440_approve"" [label=""approve""];
""1440_pull"" [label=""pull""];
""1440_mint"" [label=""mint""];
""1440_mint"" -> ""1440_stoppable"";
""1440_burn"" -> ""1440_sub"";
""1440_transferFrom"" -> ""1440_transferFrom"";
""1440_pull"" -> ""1440_transferFrom"";
""1440_transfer"" -> ""1440_transfer"";
""1440_approve"" -> ""1440_approve"";
""1440_generatorTransfer"" -> ""1440_onlyGenerator"";
""1440_burn"" -> ""1440_stoppable"";
""1440_transfer"" -> ""1440_note"";
""1440_generatorTransfer"" -> ""1440_transfer"";
""1440_generatorTransfer"" -> ""1440_note"";
""1440_setName"" -> ""1440_auth"";
""1440_push"" -> ""1440_transfer"";
""1440_approve"" -> ""1440_note"";
""1440_approve"" -> ""1440_stoppable"";
""1440_transfer"" -> ""1440_stoppable"";
""1440_mint"" -> ""1440_note"";
""1440_mint"" -> ""1440_add"";
""1440_mint"" -> ""1440_auth"";
""1440_transferFrom"" -> ""1440_stoppable"";
""1440_burn"" -> ""1440_auth"";
""1440_burn"" -> ""1440_note"";
""1440_transferFrom"" -> ""1440_note"";
}
"
0xd73c51ce805c86046577b7b4e5cb2dde14d72a36.sol,EPTCrowdfund,"contract EPTCrowdfund { using SafeMath for uint256; EPTToken public token; address public beneficiaryAddress; address public founderAddress; uint256 public crowdfundStartTime = 1516579201; uint256 public crowdfundEndTime = 1518998399; uint256 public presaleStartTime = 1513123201; uint256 public presaleEndTime = 1516579199; uint256 public ethRaised; bool private tokenDeployed = false; uint256 public tokenSold; uint256 private ethRate; event ChangeFounderAddress(address indexed _newFounderAddress , uint256 _timestamp); event TokenPurchase(address indexed _beneficiary, uint256 _value, uint256 _amount); event CrowdFundClosed(uint256 _timestamp); enum State {PreSale, CrowdSale, Finish}",1,"subgraph cluster_1013_EPTCrowdfund {
label=""EPTCrowdfund"";
""1013_fundTransfer"" [label=""fundTransfer""];
""1013_getState"" [label=""getState""];
""1013_changeFounderWalletAddress"" [label=""changeFounderWalletAddress""];
""1013_fallback"" [label=""fallback""];
""1013_buyTokens"" [label=""buyTokens""];
""1013_getRate"" [label=""getRate""];
""1013_setEthRate"" [label=""setEthRate""];
""1013_endCrowdFund"" [label=""endCrowdFund""];
""1013_setToken"" [label=""setToken""];
""1013_EPTCrowdfund"" [label=""EPTCrowdfund""];
""1013_endCrowdFund"" -> ""1013_onlyfounder"";
""1013_getRate"" -> ""1013_getState"";
""1013_changeFounderWalletAddress"" -> ""1013_onlyfounder"";
""1013_fallback"" -> ""1013_buyTokens"";
""1013_changeFounderWalletAddress"" -> ""1013_nonZeroAddress"";
""1013_buyTokens"" -> ""1013_nonZeroEth"";
""1013_buyTokens"" -> ""1013_fundTransfer"";
""1013_setToken"" -> ""1013_nonZeroAddress"";
""1013_buyTokens"" -> ""1013_nonZeroAddress"";
""1013_buyTokens"" -> ""1013_isTokenDeployed"";
""1013_setEthRate"" -> ""1013_onlyfounder"";
""1013_buyTokens"" -> ""1013_onlyPublic"";
""1013_buyTokens"" -> ""1013_isBetween"";
""1013_buyTokens"" -> ""1013_getRate"";
""1013_setToken"" -> ""1013_onlyfounder"";
}
"
0x4bc78f6619991b029b867b6d88d39c196332aba3.sol,AlgoDEX,"contract AlgoDEX is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); constructor (address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public { admin = admin_; feeAccount = feeAccount_; accountLevelsAddr = accountLevelsAddr_; feeMake = feeMake_; feeTake = feeTake_; feeRebate = feeRebate_; }",1,"subgraph cluster_1614_AlgoDEX {
label=""AlgoDEX"";
""1614_changeFeeTake"" [label=""changeFeeTake""];
""1614_changeFeeMake"" [label=""changeFeeMake""];
""1614_fallback"" [label=""fallback""];
""1614_cancelOrder"" [label=""cancelOrder""];
""1614_trade"" [label=""trade""];
""1614_deposit"" [label=""deposit""];
""1614_availableVolume"" [label=""availableVolume""];
""1614_changeFeeRebate"" [label=""changeFeeRebate""];
""1614_depositToken"" [label=""depositToken""];
""1614_order"" [label=""order""];
""1614_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1614_balanceOf"" [label=""balanceOf""];
""1614_withdrawToken"" [label=""withdrawToken""];
""1614_changeAdmin"" [label=""changeAdmin""];
""1614_amountFilled"" [label=""amountFilled""];
""1614_withdraw"" [label=""withdraw""];
""1614_tradeBalances"" [label=""tradeBalances""];
""1614_constructor"" [label=""constructor""];
""1614_testTrade"" [label=""testTrade""];
""1614_changeFeeAccount"" [label=""changeFeeAccount""];
""1614_withdraw"" -> ""1614_safeSub"";
""1614_trade"" -> ""1614_tradeBalances"";
""1614_availableVolume"" -> ""1614_safeSub"";
""1614_depositToken"" -> ""1614_safeAdd"";
""1614_testTrade"" -> ""1614_availableVolume"";
""1614_withdrawToken"" -> ""1614_safeSub"";
""1614_deposit"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeSub"";
""1614_availableVolume"" -> ""1614_safeMul"";
""1614_trade"" -> ""1614_safeAdd"";
""1614_tradeBalances"" -> ""1614_safeMul"";
}
"
0x723aaf922709819c25344b81901dd8a9c84c0b89.sol,FinalizableCrowdsale,"contract FinalizableCrowdsale is Crowdsale, Ownable { using SafeMath for uint256; bool public isFinalized = false; event Finalized(); function FinalizableCrowdsale(uint32 _startTime, uint32 _endTime, uint _rate, uint _hardCap, address _wallet, address _token) Crowdsale(_startTime, _endTime, _rate, _hardCap, _wallet, _token) { }",1,"subgraph cluster_839_FinalizableCrowdsale {
label=""FinalizableCrowdsale"";
""839_finalize"" [label=""finalize""];
""839_finalization"" [label=""finalization""];
""839_FinalizableCrowdsale"" [label=""FinalizableCrowdsale""];
""839_finalize"" -> ""839_onlyOwner"";
""839_finalize"" -> ""839_finalization"";
""839_FinalizableCrowdsale"" -> ""839_Crowdsale"";
""839_finalize"" -> ""839_hasEnded"";
}
"
0xed8a2697d1af8f8cad0f6c5b9962d868d4ed2a41.sol,HUMPresale,"contract HUMPresale is WhitelistedCrowdsale, IndividuallyCappedCrowdsale { uint256 public constant minimum = 100000000000000000; bool public isOnSale = false; mapping(address => uint256) public bonusTokens; uint256 public bonusPercent; address[] public contributors; event DistrubuteBonusTokens(address indexed sender); event Withdraw(address indexed _from, uint256 _amount); constructor ( uint256 _rate, uint256 _bonusPercent, address _wallet, HUMToken _token, uint256 _individualCapEther ) public Crowdsale(_rate, _wallet, _token) IndividuallyCappedCrowdsale(_individualCapEther.mul(10 ** 18)) { bonusPercent = _bonusPercent; }",1,"subgraph cluster_1730_HUMPresale {
label=""HUMPresale"";
""1730_closeSale"" [label=""closeSale""];
""1730_getContributors"" [label=""getContributors""];
""1730_openSale"" [label=""openSale""];
""1730__processPurchase"" [label=""_processPurchase""];
""1730_modifyTokenPrice"" [label=""modifyTokenPrice""];
""1730_withdrawToken"" [label=""withdrawToken""];
""1730__preValidatePurchase"" [label=""_preValidatePurchase""];
""1730_constructor"" [label=""constructor""];
""1730_distributeBonusTokens"" [label=""distributeBonusTokens""];
""1730_getBonusList"" [label=""getBonusList""];
""1730_distributeBonusTokensByList"" [label=""distributeBonusTokensByList""];
""1730_constructor"" -> ""1730_constructor"";
""1730_withdrawToken"" -> ""1730_onlyOwner"";
""1730_getContributors"" -> ""1730_onlyOwner"";
""1730_openSale"" -> ""1730_onlyOwner"";
""1730_getBonusList"" -> ""1730_onlyOwner"";
""1730_modifyTokenPrice"" -> ""1730_onlyOwner"";
""1730_closeSale"" -> ""1730_onlyOwner"";
""1730__preValidatePurchase"" -> ""1730__preValidatePurchase"";
""1730_distributeBonusTokens"" -> ""1730_onlyOwner"";
""1730__processPurchase"" -> ""1730__processPurchase"";
""1730_closeSale"" -> ""1730_withdrawToken"";
""1730__preValidatePurchase"" -> ""1730_isWhitelisted"";
""1730_distributeBonusTokensByList"" -> ""1730_onlyOwner"";
}
"
0x74263f99e21db7c38a319e8ed40bfeca2da791f5.sol,CORENET,contract CORENET is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 36000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function CORENET () { owner = msg.sender; },1,"subgraph cluster_756_CORENET {
label=""CORENET"";
""756_transfer"" [label=""transfer""];
""756_approve"" [label=""approve""];
""756_setOwner"" [label=""setOwner""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_totalSupply"" [label=""totalSupply""];
""756_transferFrom"" [label=""transferFrom""];
""756_refundTokens"" [label=""refundTokens""];
""756_CORENET"" [label=""CORENET""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_createTokens"" [label=""createTokens""];
""756_transfer"" -> ""756_transfer"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeSub"";
""756_approve"" -> ""756_allowance"";
}
"
0x18dc28340ddde25fa8c3b51f5d6a82b1706c8e20.sol,WitnessJury,contract WitnessJury is SafeMath { mapping(address => uint) public balances; uint public limit = 10 ** 16; uint public numWitnessesBeforeLimit = 100; uint public totalBalance; uint public numWitnesses; uint public blockPeriod = 6000; uint public desiredWitnesses = 2; uint public desiredJurors = 3; uint public penalty = 50 * (10 ** 16); address public token; mapping(uint => Request) public requests; uint public numRequests; mapping(uint => uint) public requestsPerBlockGroup; uint public drmVolumeCap = 10000; uint public drmMinFee = 25 * (10 ** 16); uint public drmMaxFee = 50 * (10 ** 16); mapping(uint => bool) public juryNeeded; mapping(uint => mapping(address => bool)) public juryVoted; mapping(uint => uint) public juryYesCount; mapping(uint => uint) public juryNoCount; mapping(uint => address[]) public juryYesVoters; mapping(uint => address[]) public juryNoVoters; struct Request { string key; address witness1; address witness2; string answer1; string answer2; uint winner1; uint winner2; uint fee; address challenge; uint blockNumber; },1,"subgraph cluster_2502_WitnessJury {
label=""WitnessJury"";
""2502_resolve"" [label=""resolve""];
""2502_numRequests"" [label=""numRequests""];
""2502_newRequest"" [label=""newRequest""];
""2502_getWinner1"" [label=""getWinner1""];
""2502_isWitness"" [label=""isWitness""];
""2502_isJuror"" [label=""isJuror""];
""2502_deposit"" [label=""deposit""];
""2502_balanceOf"" [label=""balanceOf""];
""2502_juryNeeded"" [label=""juryNeeded""];
""2502_getWinner2"" [label=""getWinner2""];
""2502_report"" [label=""report""];
""2502_reportLogic"" [label=""reportLogic""];
""2502_withdraw"" [label=""withdraw""];
""2502_getRequest"" [label=""getRequest""];
""2502_WitnessJury"" [label=""WitnessJury""];
""2502_juryVote"" [label=""juryVote""];
""2502_reduceToLimit"" [label=""reduceToLimit""];
""2502_newRequest"" -> ""2502_safeAdd"";
""2502_juryVote"" -> ""2502_safeAdd"";
""2502_reduceToLimit"" -> ""2502_safeSub"";
""2502_reportLogic"" -> ""2502_reduceToLimit"";
""2502_reduceToLimit"" -> ""2502_safeMul"";
""2502_resolve"" -> ""2502_safeMul"";
""2502_juryVote"" -> ""2502_isJuror"";
""2502_resolve"" -> ""2502_safeAdd"";
""2502_report"" -> ""2502_reportLogic"";
""2502_resolve"" -> ""2502_safeSub"";
""2502_deposit"" -> ""2502_safeAdd"";
""2502_newRequest"" -> ""2502_safeMul"";
""2502_withdraw"" -> ""2502_safeSub"";
""2502_newRequest"" -> ""2502_safeSub"";
""2502_report"" -> ""2502_isWitness"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,SaleClockAuction,"contract SaleClockAuction is ClockAuction { bool public isSaleClockAuction = true; uint256 public gen0SaleCount; uint256[5] public lastGen0SalePrices; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_3179_SaleClockAuction {
label=""SaleClockAuction"";
""3179_getSeller"" [label=""getSeller""];
""3179_constructor"" [label=""constructor""];
""3179_isSaleClockAuction"" [label=""isSaleClockAuction""];
""3179_createAuction"" [label=""createAuction""];
""3179_bid"" [label=""bid""];
""3179_computeCut"" [label=""computeCut""];
""3179_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""3179_averageGen0SalePrice"" [label=""averageGen0SalePrice""];
""3179_bidGift"" [label=""bidGift""];
""3179_bidGift"" -> ""3179__transfer"";
""3179_constructor"" -> ""3179_constructor"";
""3179_bidGift"" -> ""3179__bid"";
""3179_createAuction"" -> ""3179__escrow"";
""3179_computeCut"" -> ""3179__computeCut"";
""3179_bid"" -> ""3179__bid"";
""3179_createAuction"" -> ""3179__addAuction"";
""3179_bid"" -> ""3179__transfer"";
}
"
0x567b27ae0d0ea4fca292f447d819aa1b366375c4.sol,DadiMaxCapSale,contract DadiMaxCapSale is Ownable { using SafeMath for uint256; StandardToken public token; address[] public saleWallets; struct WhitelistUser { uint index; },1,"subgraph cluster_1497_DadiMaxCapSale {
label=""DadiMaxCapSale"";
""1497_buyTokens"" [label=""buyTokens""];
""1497_calculateTokens"" [label=""calculateTokens""];
""1497_closeSale"" [label=""closeSale""];
""1497_DadiMaxCapSale"" [label=""DadiMaxCapSale""];
""1497_getTokensPurchased"" [label=""getTokensPurchased""];
""1497_getWhitelistUser"" [label=""getWhitelistUser""];
""1497_finalizeSale"" [label=""finalizeSale""];
""1497_distributeToAlternateAddress"" [label=""distributeToAlternateAddress""];
""1497_setState"" [label=""setState""];
""1497_isValidContribution"" [label=""isValidContribution""];
""1497_getInvestor"" [label=""getInvestor""];
""1497_addWhitelistUsers"" [label=""addWhitelistUsers""];
""1497_isWhitelisted"" [label=""isWhitelisted""];
""1497_isSuccessful"" [label=""isSuccessful""];
""1497_forwardFunds"" [label=""forwardFunds""];
""1497_addWhitelistUser"" [label=""addWhitelistUser""];
""1497_startSale"" [label=""startSale""];
""1497_isEqualOrBelowCap"" [label=""isEqualOrBelowCap""];
""1497_ethToUsd"" [label=""ethToUsd""];
""1497_setTokenDistribution"" [label=""setTokenDistribution""];
""1497_getInvestorCount"" [label=""getInvestorCount""];
""1497_redistributeTokens"" [label=""redistributeTokens""];
""1497_isInvested"" [label=""isInvested""];
""1497_addToInvestor"" [label=""addToInvestor""];
""1497_distributeTokens"" [label=""distributeTokens""];
""1497_updateSaleParameters"" [label=""updateSaleParameters""];
""1497_getRandom"" [label=""getRandom""];
""1497_getTokensAvailable"" [label=""getTokensAvailable""];
""1497_addSaleWallet"" [label=""addSaleWallet""];
""1497_fallback"" [label=""fallback""];
""1497_addToInvestor"" -> ""1497_isInvested"";
""1497_buyTokens"" -> ""1497_forwardFunds"";
""1497_distributeToAlternateAddress"" -> ""1497_onlyOwner"";
""1497_addWhitelistUsers"" -> ""1497_onlyOwner"";
""1497_buyTokens"" -> ""1497_isValidContribution"";
""1497_fallback"" -> ""1497_buyTokens"";
""1497_distributeTokens"" -> ""1497_onlyOwner"";
""1497_setTokenDistribution"" -> ""1497_onlyOwner"";
""1497_startSale"" -> ""1497_onlyOwner"";
""1497_closeSale"" -> ""1497_updateSaleParameters"";
""1497_isEqualOrBelowCap"" -> ""1497_ethToUsd"";
""1497_getWhitelistUser"" -> ""1497_isWhitelisted"";
""1497_addWhitelistUsers"" -> ""1497_addWhitelistUser"";
""1497_buyTokens"" -> ""1497_updateSaleParameters"";
""1497_buyTokens"" -> ""1497_getTokensAvailable"";
""1497_forwardFunds"" -> ""1497_getRandom"";
""1497_closeSale"" -> ""1497_onlyOwner"";
""1497_finalizeSale"" -> ""1497_forwardFunds"";
""1497_buyTokens"" -> ""1497_calculateTokens"";
""1497_closeSale"" -> ""1497_getTokensAvailable"";
""1497_buyTokens"" -> ""1497_addToInvestor"";
""1497_isValidContribution"" -> ""1497_isEqualOrBelowCap"";
""1497_addWhitelistUser"" -> ""1497_isWhitelisted"";
""1497_addSaleWallet"" -> ""1497_onlyOwner"";
""1497_fallback"" -> ""1497_nonZero"";
""1497_setState"" -> ""1497_onlyOwner"";
""1497_finalizeSale"" -> ""1497_onlyOwner"";
""1497_redistributeTokens"" -> ""1497_onlyOwner"";
""1497_getInvestor"" -> ""1497_isInvested"";
""1497_addWhitelistUser"" -> ""1497_onlyOwner"";
""1497_isValidContribution"" -> ""1497_isWhitelisted"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0xd41ee3317467ab60109d76d6360807777c10afd7.sol,ZJLTTokenVault,"contract ZJLTTokenVault is Ownable { using SafeMath for uint256; address public teamWallet = 0x1fd4C9206715703c209651c215f506555a40b7C0; uint256 public startLockTime; uint256 public totalAlloc = 25 * 10 ** 18; uint256 public perValue = 20833333 * 10 ** 11; uint256 public timeLockPeriod = 30 days; uint256 public teamVestingStages = 12; uint256 public latestUnlockStage = 0; mapping (address => uint256) public lockBalance; ZJLTToken public token; bool public isExec; event Alloc(address _wallet, uint256 _value); event Claim(address _wallet, uint256 _value); modifier unLocked { uint256 nextStage = latestUnlockStage.add(1); require(startLockTime > 0 && now >= startLockTime.add(nextStage.mul(timeLockPeriod))); _; }",1,"subgraph cluster_1216_ZJLTTokenVault {
label=""ZJLTTokenVault"";
""1216_isUnlocked"" [label=""isUnlocked""];
""1216_alloc"" [label=""alloc""];
""1216_ZJLTTokenVault"" [label=""ZJLTTokenVault""];
""1216_claim"" [label=""claim""];
""1216_claim"" -> ""1216_unLocked"";
""1216_claim"" -> ""1216_onlyOwner"";
""1216_alloc"" -> ""1216_onlyOwner"";
""1216_alloc"" -> ""1216_unExecd"";
}
"
0x742686bb1b136b396b59818f42e47a4fc3509394.sol,CommonSale,contract CommonSale is StagedCrowdsale { address public multisigWallet; address public foundersTokensWallet; address public bountyTokensWallet; uint public foundersPercent; uint public bountyTokensCount; uint public price; uint public percentRate = 100; bool public bountyMinted = false; CommonSale public nextSale; MintableToken public token; function setToken(address newToken) onlyOwner { token = MintableToken(newToken); },1,"subgraph cluster_1324_CommonSale {
label=""CommonSale"";
""1324_fallback"" [label=""fallback""];
""1324_finishMinting"" [label=""finishMinting""];
""1324_mintBounty"" [label=""mintBounty""];
""1324_setPrice"" [label=""setPrice""];
""1324_setNextSale"" [label=""setNextSale""];
""1324_setBountyTokensWallet"" [label=""setBountyTokensWallet""];
""1324_setPercentRate"" [label=""setPercentRate""];
""1324_setFoundersTokensWallet"" [label=""setFoundersTokensWallet""];
""1324_setBountyTokensCount"" [label=""setBountyTokensCount""];
""1324_setMultisigWallet"" [label=""setMultisigWallet""];
""1324_retrieveTokens"" [label=""retrieveTokens""];
""1324_createTokens"" [label=""createTokens""];
""1324_setFoundersPercent"" [label=""setFoundersPercent""];
""1324_setToken"" [label=""setToken""];
""1324_setToken"" -> ""1324_onlyOwner"";
""1324_retrieveTokens"" -> ""1324_onlyOwner"";
""1324_mintBounty"" -> ""1324_onlyOwner"";
""1324_setNextSale"" -> ""1324_onlyOwner"";
""1324_setBountyTokensWallet"" -> ""1324_onlyOwner"";
""1324_finishMinting"" -> ""1324_whenNotPaused"";
""1324_setPercentRate"" -> ""1324_onlyOwner"";
""1324_setBountyTokensCount"" -> ""1324_onlyOwner"";
""1324_setFoundersTokensWallet"" -> ""1324_onlyOwner"";
""1324_setPrice"" -> ""1324_onlyOwner"";
""1324_setFoundersPercent"" -> ""1324_onlyOwner"";
""1324_mintBounty"" -> ""1324_whenNotPaused"";
""1324_finishMinting"" -> ""1324_onlyOwner"";
""1324_createTokens"" -> ""1324_currentMilestone"";
""1324_createTokens"" -> ""1324_isUnderHardCap"";
""1324_createTokens"" -> ""1324_saleIsOn"";
""1324_createTokens"" -> ""1324_whenNotPaused"";
""1324_setMultisigWallet"" -> ""1324_onlyOwner"";
""1324_fallback"" -> ""1324_createTokens"";
}
"
0x2d3e7d4870a51b918919e7b851fe19983e4c38d5.sol,FreezeTokensWallet,contract FreezeTokensWallet is Ownable { using SafeMath for uint256; MintableToken public token; bool public started; uint public startLockPeriod = 180 days; uint public period = 360 days; uint public duration = 90 days; uint public startUnlock; uint public retrievedTokens; uint public startBalance; modifier notStarted() { require(!started); _; },1,"subgraph cluster_943_FreezeTokensWallet {
label=""FreezeTokensWallet"";
""943_setPeriod"" [label=""setPeriod""];
""943_setDuration"" [label=""setDuration""];
""943_setToken"" [label=""setToken""];
""943_retrieveTokens"" [label=""retrieveTokens""];
""943_setStartLockPeriod"" [label=""setStartLockPeriod""];
""943_start"" [label=""start""];
""943_setDuration"" -> ""943_onlyOwner"";
""943_start"" -> ""943_notStarted"";
""943_retrieveTokens"" -> ""943_onlyOwner"";
""943_setPeriod"" -> ""943_notStarted"";
""943_setStartLockPeriod"" -> ""943_notStarted"";
""943_setToken"" -> ""943_onlyOwner"";
""943_start"" -> ""943_onlyOwner"";
""943_setStartLockPeriod"" -> ""943_onlyOwner"";
""943_setDuration"" -> ""943_notStarted"";
""943_setPeriod"" -> ""943_onlyOwner"";
""943_setToken"" -> ""943_notStarted"";
}
"
0x4c478ac32725872e30bca49957abc7dbb325cb21.sol,daocrowdsale,"contract daocrowdsale is Ownable { using SafeMath for uint256; bytes32 constant password = keccak256(); bytes32 constant fin = keccak256(); COIN public DAO; uint256 public constant price = 500 finney; enum State {READY, LAUNCHED, STAGE1, STAGE2, STAGE3, FAIL}",1,"subgraph cluster_1086_daocrowdsale {
label=""daocrowdsale"";
""1086_TimeCheck"" [label=""TimeCheck""];
""1086_fallback"" [label=""fallback""];
""1086_masterBalanceOf"" [label=""masterBalanceOf""];
""1086_totalCoinSupply"" [label=""totalCoinSupply""];
""1086_buy"" [label=""buy""];
""1086_masterFns"" [label=""masterFns""];
""1086_StateShift"" [label=""StateShift""];
""1086_daocrowdsale"" [label=""daocrowdsale""];
""1086_StartNewStage"" [label=""StartNewStage""];
""1086_GetCurrentState"" [label=""GetCurrentState""];
""1086_masterBalanceOf"" -> ""1086_IsOutdated"";
""1086_buy"" -> ""1086_IsBought"";
""1086_masterBalanceOf"" -> ""1086_IsBought"";
""1086_buy"" -> ""1086_IsOutdated"";
}
"
0xdc919494349e803fbd2d4064106944418381edb3.sol,DSToken,"contract DSToken is DSTokenBase(0), DSStop { bytes32 public symbol; uint256 public decimals = 18; function DSToken(bytes32 symbol_) public { symbol = symbol_; }",1,"subgraph cluster_780_DSTokenBase {
label=""DSTokenBase"";
""780_totalSupply"" [label=""totalSupply""];
""780_balanceOf"" [label=""balanceOf""];
""780_transfer"" [label=""transfer""];
""780_approve"" [label=""approve""];
""780_allowance"" [label=""allowance""];
""780_DSTokenBase"" [label=""DSTokenBase""];
""780_transferFrom"" [label=""transferFrom""];
""780_transferFrom"" -> ""780_sub"";
""780_transfer"" -> ""780_transferFrom"";
""780_transferFrom"" -> ""780_add"";
}
"
0x0e6f6ed4581d25944d8c6a595b9f50e11431b754.sol,PaymentHolder,contract PaymentHolder is Ownable { modifier onlyAllowed() { require(allowed[msg.sender]); _; },1,"subgraph cluster_1744_PaymentHolder {
label=""PaymentHolder"";
""1744_prohibit"" [label=""prohibit""];
""1744_update"" [label=""update""];
""1744_setUpdater"" [label=""setUpdater""];
""1744_withdrawEth"" [label=""withdrawEth""];
""1744_migrate"" [label=""migrate""];
""1744_depositEth"" [label=""depositEth""];
""1744_withdrawToken"" [label=""withdrawToken""];
""1744_allow"" [label=""allow""];
""1744_setUpdater"" -> ""1744_onlyOwner"";
""1744_depositEth"" -> ""1744_onlyAllowed"";
""1744_withdrawEth"" -> ""1744_onlyAllowed"";
""1744_withdrawToken"" -> ""1744_onlyAllowed"";
""1744_update"" -> ""1744_onlyUpdater"";
""1744_prohibit"" -> ""1744_onlyOwner"";
""1744_migrate"" -> ""1744_onlyOwner"";
""1744_allow"" -> ""1744_onlyOwner"";
}
"
0x8615ddfe9d4c9e58abff01c999731f3e9e556e80.sol,DAPBOXToken,"contract DAPBOXToken is FrozenToken { string public name = ; string public symbol = ; uint8 public decimals = 0; string public version = ; string public publisher = ""https: string public description = ; bool public acceptAdminWithdraw = false; bool public acceptDonate = true; event InfoChanged(address indexed sender, string version, string publisher, string description); event Withdraw(address indexed sender, address indexed wallet, uint256 amount); event WithdrawTokens(address indexed sender, address indexed wallet, address indexed token, uint256 amount); event Donate(address indexed sender, uint256 value); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); function setupInfo(string _version, string _publisher, string _description) authLevel(Level.ADMIN) notEmpty(_version) notEmpty(_publisher) notEmpty(_description) public { version = _version; publisher = _publisher; description = _description; InfoChanged(msg.sender, _version, _publisher, _description); }",1,"subgraph cluster_2219_DAPBOXToken {
label=""DAPBOXToken"";
""2219_donate"" [label=""donate""];
""2219_setupInfo"" [label=""setupInfo""];
""2219_updAcceptDonate"" [label=""updAcceptDonate""];
""2219_balanceToken"" [label=""balanceToken""];
""2219_fallback"" [label=""fallback""];
""2219_updAcceptAdminWithdraw"" [label=""updAcceptAdminWithdraw""];
""2219_withdrawAmount"" [label=""withdrawAmount""];
""2219_withdraw"" [label=""withdraw""];
""2219_withdrawTokens"" [label=""withdrawTokens""];
""2219_withdrawTokens"" -> ""2219_greaterThanZero"";
""2219_donate"" -> ""2219_greaterThanZero"";
""2219_withdrawTokens"" -> ""2219_authLevel"";
""2219_withdraw"" -> ""2219_withdrawAmount"";
""2219_setupInfo"" -> ""2219_notEmpty"";
""2219_updAcceptAdminWithdraw"" -> ""2219_onlyOwner"";
""2219_balanceToken"" -> ""2219_validAddress"";
""2219_fallback"" -> ""2219_donate"";
""2219_withdrawAmount"" -> ""2219_greaterThanZero"";
""2219_withdrawAmount"" -> ""2219_authLevel"";
""2219_withdrawTokens"" -> ""2219_validAddress"";
""2219_updAcceptDonate"" -> ""2219_authLevel"";
""2219_setupInfo"" -> ""2219_authLevel"";
""2219_withdrawAmount"" -> ""2219_validBalanceThis"";
}
"
0x0e33ca464b1c76a384039eb1b7e9dc3b0416b5ae.sol,NamiCrowdSale,"contract NamiCrowdSale { using SafeMath for uint256; function NamiCrowdSale(address _escrow, address _namiMultiSigWallet, address _namiPresale) public { require(_namiMultiSigWallet != 0x0); escrow = _escrow; namiMultiSigWallet = _namiMultiSigWallet; namiPresale = _namiPresale; }",1,"subgraph cluster_2588_NamiCrowdSale {
label=""NamiCrowdSale"";
""2588_buy"" [label=""buy""];
""2588_transferForTeam"" [label=""transferForTeam""];
""2588_balanceOf"" [label=""balanceOf""];
""2588_changeBinaryAddress"" [label=""changeBinaryAddress""];
""2588_changeTransferable"" [label=""changeTransferable""];
""2588_transferToBuyer"" [label=""transferToBuyer""];
""2588_changeBinary"" [label=""changeBinary""];
""2588_setCrowdsaleManager"" [label=""setCrowdsaleManager""];
""2588_changeEscrow"" [label=""changeEscrow""];
""2588__transfer"" [label=""_transfer""];
""2588_transferToExchange"" [label=""transferToExchange""];
""2588_NamiCrowdSale"" [label=""NamiCrowdSale""];
""2588_approve"" [label=""approve""];
""2588_transferFrom"" [label=""transferFrom""];
""2588_approveAndCall"" [label=""approveAndCall""];
""2588__migrateToken"" [label=""_migrateToken""];
""2588_withdrawEther"" [label=""withdrawEther""];
""2588_getPrice"" [label=""getPrice""];
""2588_burnTokens"" [label=""burnTokens""];
""2588_migrateToken"" [label=""migrateToken""];
""2588_transfer"" [label=""transfer""];
""2588_safeWithdraw"" [label=""safeWithdraw""];
""2588_allowance"" [label=""allowance""];
""2588_migrateForInvestor"" [label=""migrateForInvestor""];
""2588_setPresalePhase"" [label=""setPresalePhase""];
""2588_fallback"" [label=""fallback""];
""2588_setPresalePhase"" -> ""2588_onlyEscrow"";
""2588_transfer"" -> ""2588_onlyTranferable"";
""2588_changeEscrow"" -> ""2588_onlyNamiMultisig"";
""2588_migrateToken"" -> ""2588_onlyEscrow"";
""2588_fallback"" -> ""2588_buy"";
""2588_burnTokens"" -> ""2588_onlyCrowdsaleManager"";
""2588_withdrawEther"" -> ""2588_onlyEscrow"";
""2588_approveAndCall"" -> ""2588_approve"";
""2588_buy"" -> ""2588_getPrice"";
""2588_approve"" -> ""2588_onlyTranferable"";
""2588_transferForTeam"" -> ""2588_onlyEscrow"";
""2588_transfer"" -> ""2588__transfer"";
""2588_approveAndCall"" -> ""2588_onlyTranferable"";
""2588_safeWithdraw"" -> ""2588_onlyEscrow"";
""2588_transferFrom"" -> ""2588_onlyTranferable"";
""2588_changeBinary"" -> ""2588_onlyEscrow"";
""2588_transferForTeam"" -> ""2588__transfer"";
""2588_migrateForInvestor"" -> ""2588__migrateToken"";
""2588_migrateToken"" -> ""2588__migrateToken"";
""2588_setCrowdsaleManager"" -> ""2588_onlyEscrow"";
""2588_changeTransferable"" -> ""2588_onlyEscrow"";
""2588_transferFrom"" -> ""2588__transfer"";
""2588_changeBinaryAddress"" -> ""2588_onlyEscrow"";
}
"
0x57775c09b07896b979bb192b1b13df5a268757bd.sol,FutureTokenSaleLockBox,"contract FutureTokenSaleLockBox is Owned { using SafeMath for uint256; ERC20Interface public simpleToken; TokenSaleInterface public tokenSale; uint256 public unlockDate; event UnlockDateExtended(uint256 _newDate); event TokensTransferred(address indexed _to, uint256 _value); function FutureTokenSaleLockBox(ERC20Interface _simpleToken, TokenSaleInterface _tokenSale) Owned() public { require(address(_simpleToken) != address(0)); require(address(_tokenSale) != address(0)); simpleToken = _simpleToken; tokenSale = _tokenSale; uint256 endTime = tokenSale.endTime(); require(endTime > 0); unlockDate = endTime.add(26 weeks); }",1,"subgraph cluster_439_FutureTokenSaleLockBox {
label=""FutureTokenSaleLockBox"";
""439_currentTime"" [label=""currentTime""];
""439_hasUnlockDatePassed"" [label=""hasUnlockDatePassed""];
""439_FutureTokenSaleLockBox"" [label=""FutureTokenSaleLockBox""];
""439_transfer"" [label=""transfer""];
""439_extendUnlockDate"" [label=""extendUnlockDate""];
""439_transfer"" -> ""439_onlyAfterUnlockDate"";
""439_hasUnlockDatePassed"" -> ""439_currentTime"";
""439_extendUnlockDate"" -> ""439_onlyOwner"";
""439_transfer"" -> ""439_onlyOwner"";
""439_FutureTokenSaleLockBox"" -> ""439_Owned"";
}
"
0xd1569ffd7ca4393311f66110e6f87184c4817113.sol,LudumAirdrop,"contract LudumAirdrop is Ownable { Token token; event TransferredToken(address indexed to, uint256 value); event FailedTransfer(address indexed to, uint256 value); modifier whenDropIsActive() { assert(isActive()); _; }",1,"subgraph cluster_281_LudumAirdrop {
label=""LudumAirdrop"";
""281_sendInternally"" [label=""sendInternally""];
""281_sendLudumToSingle"" [label=""sendLudumToSingle""];
""281_isActive"" [label=""isActive""];
""281_LudumAirdrop"" [label=""LudumAirdrop""];
""281_tokensAvailable"" [label=""tokensAvailable""];
""281_sendLudumToMany"" [label=""sendLudumToMany""];
""281_sendRemainsToOwner"" [label=""sendRemainsToOwner""];
""281_sendLudumToMany"" -> ""281_onlyOwner"";
""281_sendLudumToSingle"" -> ""281_onlyOwner"";
""281_sendInternally"" -> ""281_tokensAvailable"";
""281_sendRemainsToOwner"" -> ""281_onlyOwner"";
""281_sendLudumToMany"" -> ""281_whenDropIsActive"";
""281_sendRemainsToOwner"" -> ""281_tokensAvailable"";
""281_sendLudumToMany"" -> ""281_sendInternally"";
""281_sendLudumToSingle"" -> ""281_whenDropIsActive"";
""281_isActive"" -> ""281_tokensAvailable"";
""281_sendLudumToSingle"" -> ""281_sendInternally"";
}
"
0x0e752b742f744fdc2d93774da44c37b72c3e6952.sol,CraftyCrowdsale,"contract CraftyCrowdsale is Pausable { using SafeMath for uint256; mapping(address => uint256) received; MintableToken public token; uint256 public preSaleStart; uint256 public preSaleEnd; uint256 public saleStart; uint256 public saleEnd; uint256 public issuedTokens = 0; uint256 public constant hardCap = 5000000000 * 10**8; uint256 constant teamCap = 1450000000 * 10**8; uint256 constant advisorCap = 450000000 * 10**8; uint256 constant bountyCap = 100000000 * 10**8; uint256 constant fundCap = 3000000000 * 10**8; uint256 constant lockTime = 180 days; address public etherWallet; address public teamWallet; address public advisorWallet; address public fundWallet; address public bountyWallet; TokenTimelock teamTokens; uint256 public rate; enum State { BEFORE_START, SALE, REFUND, CLOSED }",1,"subgraph cluster_1475_CraftyCrowdsale {
label=""CraftyCrowdsale"";
""1475_releaseTeamTokens"" [label=""releaseTeamTokens""];
""1475_setWallets"" [label=""setWallets""];
""1475_setRate"" [label=""setRate""];
""1475_enableRefund"" [label=""enableRefund""];
""1475_receivedFrom"" [label=""receivedFrom""];
""1475_getRate"" [label=""getRate""];
""1475_generateTokens"" [label=""generateTokens""];
""1475_claimRefund"" [label=""claimRefund""];
""1475_reclaimEther"" [label=""reclaimEther""];
""1475_buyTokens"" [label=""buyTokens""];
""1475_CraftyCrowdsale"" [label=""CraftyCrowdsale""];
""1475_fallback"" [label=""fallback""];
""1475_finishCrowdsale"" [label=""finishCrowdsale""];
""1475_finishCrowdsale"" -> ""1475_inState"";
""1475_setWallets"" -> ""1475_inState"";
""1475_buyTokens"" -> ""1475_whenNotPaused"";
""1475_setRate"" -> ""1475_onlyOwner"";
""1475_claimRefund"" -> ""1475_whenNotPaused"";
""1475_buyTokens"" -> ""1475_saleIsOn"";
""1475_buyTokens"" -> ""1475_getRate"";
""1475_enableRefund"" -> ""1475_inState"";
""1475_enableRefund"" -> ""1475_onlyOwner"";
""1475_setRate"" -> ""1475_beforeSale"";
""1475_claimRefund"" -> ""1475_inState"";
""1475_reclaimEther"" -> ""1475_onlyOwner"";
""1475_finishCrowdsale"" -> ""1475_onlyOwner"";
""1475_generateTokens"" -> ""1475_onlyOwner"";
""1475_setWallets"" -> ""1475_onlyOwner"";
""1475_fallback"" -> ""1475_buyTokens"";
}
"
0x1fd2a7194c6bdc3c8f2c3b59b73f008a8f7a4818.sol,TokenTimelock,contract TokenTimelock is Ownable { using SafeERC20 for ERC20; using SafeMath for uint256; ERC20 public token; mapping(address => uint256) public balances; mapping(address => uint256) public releaseTime; constructor(ERC20 _token) public { token = _token; },1,"subgraph cluster_434_TokenTimelock {
label=""TokenTimelock"";
""434_constructor"" [label=""constructor""];
""434_getTokens"" [label=""getTokens""];
""434_addTokens"" [label=""addTokens""];
""434_addTokens"" -> ""434_onlyOwner"";
}
"
0x486cf19a550e2814aef970b14e509e93209a0151.sol,EventChainCrowdsale,"contract EventChainCrowdsale is Haltable { using SafeMath for uint256; enum State{Preparing, Prepared, Presale, Phase1, Phase2, Closed}",1,"subgraph cluster_1228_EventChainCrowdsale {
label=""EventChainCrowdsale"";
""1228_closeCrowdsale"" [label=""closeCrowdsale""];
""1228_startPhase2"" [label=""startPhase2""];
""1228_startPresale"" [label=""startPresale""];
""1228_EventChainCrowdsale"" [label=""EventChainCrowdsale""];
""1228_fallback"" [label=""fallback""];
""1228_mintFounderTokens"" [label=""mintFounderTokens""];
""1228_startPhase1"" [label=""startPhase1""];
""1228_currentStateToString"" [label=""currentStateToString""];
""1228_closeCrowdsale"" -> ""1228_inState"";
""1228_startPresale"" -> ""1228_inState"";
""1228_fallback"" -> ""1228_onlyWhenCrowdsaleIsOpen"";
""1228_fallback"" -> ""1228_requiresMinimumInvest"";
""1228_fallback"" -> ""1228_currentStateToString"";
""1228_startPhase1"" -> ""1228_onlyOwner"";
""1228_mintFounderTokens"" -> ""1228_inState"";
""1228_fallback"" -> ""1228_stopInEmergency"";
""1228_mintFounderTokens"" -> ""1228_onlyOwner"";
""1228_startPhase2"" -> ""1228_onlyOwner"";
""1228_closeCrowdsale"" -> ""1228_onlyOwner"";
""1228_startPhase2"" -> ""1228_inState"";
""1228_startPresale"" -> ""1228_onlyOwner"";
""1228_startPhase1"" -> ""1228_inState"";
}
"
0x35a1700ac75f6e9e096d9a5c90e3221b658096e0.sol,SpendableWallet,"contract SpendableWallet is Ownable { ERC20 public token; event ClaimedTokens( address indexed _token, address indexed _controller, uint256 _amount ); constructor(address _token, address _owner) public { token = ERC20(_token); owner = _owner; }",1,"subgraph cluster_307_SpendableWallet {
label=""SpendableWallet"";
""307_claimTokens"" [label=""claimTokens""];
""307_spend"" [label=""spend""];
""307_constructor"" [label=""constructor""];
""307_claimTokens"" -> ""307_onlyOwner"";
""307_spend"" -> ""307_onlyOwner"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,SaleClockAuction,"contract SaleClockAuction is ClockAuction { bool public isSaleClockAuction = true; uint256 public gen0SaleCount; uint256[5] public lastGen0SalePrices; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_3179_SaleClockAuction {
label=""SaleClockAuction"";
""3179_getSeller"" [label=""getSeller""];
""3179_constructor"" [label=""constructor""];
""3179_isSaleClockAuction"" [label=""isSaleClockAuction""];
""3179_createAuction"" [label=""createAuction""];
""3179_bid"" [label=""bid""];
""3179_computeCut"" [label=""computeCut""];
""3179_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""3179_averageGen0SalePrice"" [label=""averageGen0SalePrice""];
""3179_bidGift"" [label=""bidGift""];
""3179_bidGift"" -> ""3179__transfer"";
""3179_constructor"" -> ""3179_constructor"";
""3179_bidGift"" -> ""3179__bid"";
""3179_createAuction"" -> ""3179__escrow"";
""3179_computeCut"" -> ""3179__computeCut"";
""3179_bid"" -> ""3179__bid"";
""3179_createAuction"" -> ""3179__addAuction"";
""3179_bid"" -> ""3179__transfer"";
}
"
0x56c945f90c9cd1aafbcac78936f569e5fd2438bf.sol,HeroUp,"contract HeroUp is Ownable, CanReclaimToken { event HeroUpgraded(uint tokenId, address owner); HEROES_OLD public heroesOld; HEROES_NEW public heroesNew; constructor (HEROES_OLD _heroesOld, HEROES_NEW _heroesNew) public { require(address(_heroesOld) != address(0)); require(address(_heroesNew) != address(0)); heroesOld = _heroesOld; heroesNew = _heroesNew; }",1,"subgraph cluster_494_HeroUp {
label=""HeroUp"";
""494_setOld"" [label=""setOld""];
""494_upgrade"" [label=""upgrade""];
""494_constructor"" [label=""constructor""];
""494_fallback"" [label=""fallback""];
""494_setNew"" [label=""setNew""];
""494_setOld"" -> ""494_onlyOwner"";
""494_setNew"" -> ""494_onlyOwner"";
}
"
0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a.sol,BitSTDView,"contract BitSTDView { BitSTDLogic private logic; address public owner; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); function balanceOf(address add)constant public returns (uint256) { return logic.balanceOf(add); }",1,"subgraph cluster_1510_BitSTDView {
label=""BitSTDView"";
""1510_frozenAccount"" [label=""frozenAccount""];
""1510_decimals"" [label=""decimals""];
""1510_transferFrom"" [label=""transferFrom""];
""1510_buy"" [label=""buy""];
""1510_symbol"" [label=""symbol""];
""1510_mintToken"" [label=""mintToken""];
""1510_buyPrice"" [label=""buyPrice""];
""1510_freezeAccount"" [label=""freezeAccount""];
""1510_transferDataAuthority"" [label=""transferDataAuthority""];
""1510_transferAuthority"" [label=""transferAuthority""];
""1510_approve"" [label=""approve""];
""1510_sellPrice"" [label=""sellPrice""];
""1510_constructor"" [label=""constructor""];
""1510_burn"" [label=""burn""];
""1510_transferLogicAuthority"" [label=""transferLogicAuthority""];
""1510_totalSupply"" [label=""totalSupply""];
""1510_balanceOf"" [label=""balanceOf""];
""1510_migration"" [label=""migration""];
""1510_setBitSTD"" [label=""setBitSTD""];
""1510_transfer"" [label=""transfer""];
""1510_sell"" [label=""sell""];
""1510_allowance"" [label=""allowance""];
""1510_name"" [label=""name""];
""1510_burnFrom"" [label=""burnFrom""];
""1510_approveAndCall"" [label=""approveAndCall""];
""1510_mintToken"" -> ""1510_onlyOwner"";
""1510_transferAuthority"" -> ""1510_onlyOwner"";
""1510_transferLogicAuthority"" -> ""1510_onlyOwner"";
""1510_freezeAccount"" -> ""1510_onlyOwner"";
""1510_setBitSTD"" -> ""1510_onlyOwner"";
""1510_transferDataAuthority"" -> ""1510_onlyOwner"";
}
"
0x32f916bcfae02a2a385ec0219a07fa2374bae7bb.sol,NamiExchange,contract NamiExchange { using SafeMath for uint; function NamiExchange(address _namiAddress) public { NamiAddr = _namiAddress; },1,"subgraph cluster_3104_NamiExchange {
label=""NamiExchange"";
""3104_tokenFallback"" [label=""tokenFallback""];
""3104_closeBidOrder"" [label=""closeBidOrder""];
""3104_NamiExchange"" [label=""NamiExchange""];
""3104_placeBuyOrder"" [label=""placeBuyOrder""];
""3104_tokenFallbackExchange"" [label=""tokenFallbackExchange""];
""3104_fallback"" [label=""fallback""];
""3104_closeAskOrder"" [label=""closeAskOrder""];
""3104_tokenFallbackBuyer"" [label=""tokenFallbackBuyer""];
""3104_buyNac"" [label=""buyNac""];
""3104_tokenFallbackBuyer"" -> ""3104_onlyNami"";
""3104_tokenFallbackExchange"" -> ""3104_onlyNami"";
}
"
0x5af9ec6df6edea0761fa841ce56c2e4deb000b31.sol,ZebiMainCrowdsale,contract ZebiMainCrowdsale is Ownable{ using SafeMath for uint256; ZebiCoin public token; uint256 currentYearMinted; uint256 calenderYearMintCap; uint256 calenderYearStart; uint256 calenderYearEnd; uint256 vestedMintStartTime; uint256 zebiZCOShare; uint256 crowdsaleZCOCap; uint256 transStartTime; ZebiCoinCrowdsale public zcc; ZebiCoinTempMgr public tempMngr; uint64 public tokenDecimals; uint256 public startTime; uint256 public endTime; uint256 public goldListPeriod; uint256 public postGoldPeriod; uint256 public minTransAmount; uint256 public ethCap; mapping(address => uint256) mainContribution; mapping(address => bool) mainCancelledList; uint256 goldPeriodCap; bool goldListPeriodFlag; mapping(address=>uint256) goldListContribution; mapping(address => bool) goldList; mapping(address => bool) kycAcceptedList; address public wallet; bool public withinRefundPeriod; mapping(address => uint256) preSaleRefundsInMainSale; uint256 public tokens; uint256 public weiAmount; uint256 public ETHtoZWeirate; uint256 public mainWeiRaised; modifier inCancelledList { require(mainCancelledList[msg.sender]); _; },1,"subgraph cluster_3258_ZebiMainCrowdsale {
label=""ZebiMainCrowdsale"";
""3258_addCancellation"" [label=""addCancellation""];
""3258_enableRefundPeriod"" [label=""enableRefundPeriod""];
""3258_fallback"" [label=""fallback""];
""3258_viewGoldList"" [label=""viewGoldList""];
""3258_getTokenAmount"" [label=""getTokenAmount""];
""3258_viewContribution"" [label=""viewContribution""];
""3258_transferTokenOwnership"" [label=""transferTokenOwnership""];
""3258_resumeMint"" [label=""resumeMint""];
""3258_addToGoldList"" [label=""addToGoldList""];
""3258_addToKYCList"" [label=""addToKYCList""];
""3258_forwardFunds"" [label=""forwardFunds""];
""3258_withdraw"" [label=""withdraw""];
""3258_validPurchase"" [label=""validPurchase""];
""3258_viewKYCAccepted"" [label=""viewKYCAccepted""];
""3258_mintvestedTokens"" [label=""mintvestedTokens""];
""3258_endTransfer"" [label=""endTransfer""];
""3258_startTransfer"" [label=""startTransfer""];
""3258_viewCancelledList"" [label=""viewCancelledList""];
""3258_takeEth"" [label=""takeEth""];
""3258_disableRefundPeriod"" [label=""disableRefundPeriod""];
""3258_buyTokens"" [label=""buyTokens""];
""3258_viewPreSaleRefundsInMainSale"" [label=""viewPreSaleRefundsInMainSale""];
""3258_removeFromKYCList"" [label=""removeFromKYCList""];
""3258_ZebiMainCrowdsale"" [label=""ZebiMainCrowdsale""];
""3258_forcedRefund"" [label=""forcedRefund""];
""3258_finishMint"" [label=""finishMint""];
""3258_mintAndAllocateZCO"" [label=""mintAndAllocateZCO""];
""3258_refund"" [label=""refund""];
""3258_removeFromGoldList"" [label=""removeFromGoldList""];
""3258_fallback"" -> ""3258_buyTokens"";
""3258_mintAndAllocateZCO"" -> ""3258_onlyOwner"";
""3258_removeFromKYCList"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inCancelledList"";
""3258_forcedRefund"" -> ""3258_onlyOwner"";
""3258_removeFromGoldList"" -> ""3258_onlyOwner"";
""3258_endTransfer"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_forwardFunds"";
""3258_withdraw"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_validPurchase"";
""3258_startTransfer"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inRefundPeriod"";
""3258_finishMint"" -> ""3258_onlyOwner"";
""3258_transferTokenOwnership"" -> ""3258_onlyOwner"";
""3258_enableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_mintvestedTokens"" -> ""3258_onlyOwner"";
""3258_disableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_addToGoldList"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_getTokenAmount"";
""3258_addCancellation"" -> ""3258_onlyOwner"";
""3258_addToKYCList"" -> ""3258_onlyOwner"";
""3258_resumeMint"" -> ""3258_onlyOwner"";
}
"
0x26fb86579e371c7aedc461b2ddef0a8628c93d3b.sol,LockedToken,"contract LockedToken { ERC20Basic public token; address public donor; address public beneficiary; uint256 public releaseTime; bool public revocable; event Claim(address beneficiary, uint256 amount, uint256 releaseTime); event Revoke(address donor, uint256 amount); function LockedToken(ERC20Basic _token, address _donor, address _beneficiary, uint256 _releaseTime, bool _revocable) public { require(_token != address(0)); require(_donor != address(0)); require(_beneficiary != address(0)); require(_releaseTime > now); token = ERC20Basic(_token); donor = _donor; beneficiary = _beneficiary; releaseTime = _releaseTime; revocable = _revocable; }",1,"subgraph cluster_1065_LockedToken {
label=""LockedToken"";
""1065_balanceOf"" [label=""balanceOf""];
""1065_claim"" [label=""claim""];
""1065_revoke"" [label=""revoke""];
""1065_LockedToken"" [label=""LockedToken""];
}
"
0x890ee942fdce38034e3d3813344649c77a29e68f.sol,LemonSelfDrop1,contract LemonSelfDrop1 is Ownable { LemonToken public LemonContract; uint8 public dropNumber; uint256 public LemonsDroppedToTheWorld; uint256 public LemonsRemainingToDrop; uint256 public holderAmount; uint256 public basicReward; uint256 public holderReward; mapping (uint8 => uint256[]) donatorReward; uint8 donatorRewardLevels; uint8 public totalDropTransactions; mapping (address => uint8) participants; function LemonSelfDrop1 () { address c = 0x2089899d03607b2192afb2567874a3f287f2f1e4; LemonContract = LemonToken(c); dropNumber = 1; LemonsDroppedToTheWorld = 0; LemonsRemainingToDrop = 0; basicReward = 500; donatorRewardLevels = 1; totalDropTransactions = 0; },1,"subgraph cluster_436_LemonSelfDrop1 {
label=""LemonSelfDrop1"";
""436_withdrawToken"" [label=""withdrawToken""];
""436_setHolderAmount"" [label=""setHolderAmount""];
""436_donatorBonus"" [label=""donatorBonus""];
""436_setDonatorReward"" [label=""setDonatorReward""];
""436_withdrawAll"" [label=""withdrawAll""];
""436_setRewards"" [label=""setRewards""];
""436_updateKittenCoinsRemainingToDrop"" [label=""updateKittenCoinsRemainingToDrop""];
""436_LemonSelfDrop1"" [label=""LemonSelfDrop1""];
""436_setDropNumber"" [label=""setDropNumber""];
""436_fallback"" [label=""fallback""];
""436_participant"" [label=""participant""];
""436_withdrawKittenCoins"" [label=""withdrawKittenCoins""];
""436_fallback"" -> ""436_donatorBonus"";
""436_setRewards"" -> ""436_onlyOwner"";
""436_setDonatorReward"" -> ""436_onlyOwner"";
""436_withdrawKittenCoins"" -> ""436_onlyOwner"";
""436_withdrawToken"" -> ""436_onlyOwner"";
""436_withdrawAll"" -> ""436_onlyOwner"";
""436_setDropNumber"" -> ""436_onlyOwner"";
""436_setHolderAmount"" -> ""436_onlyOwner"";
}
"
0x286bbee3f20f1702e707e58d33dc28a69e7efd4e.sol,Contract,contract Contract is Controller { using SafeMath for uint256; struct Contributor { uint256 balance; uint256 fee; uint8 rounds; bool whitelisted; },1,"subgraph cluster_1157_Contract {
label=""Contract"";
""1157_change_individual_cap"" [label=""change_individual_cap""];
""1157_calculate_with_fees"" [label=""calculate_with_fees""];
""1157_withdraw_my_tokens"" [label=""withdraw_my_tokens""];
""1157_constructor"" [label=""constructor""];
""1157_emergency_token_withdraw"" [label=""emergency_token_withdraw""];
""1157_set_gas_price_max"" [label=""set_gas_price_max""];
""1157_set_allow_refunds"" [label=""set_allow_refunds""];
""1157_set_token_address"" [label=""set_token_address""];
""1157_set_allow_contributions"" [label=""set_allow_contributions""];
""1157_set_whitelist_enabled"" [label=""set_whitelist_enabled""];
""1157_provide_eth"" [label=""provide_eth""];
""1157_refund_my_ether"" [label=""refund_my_ether""];
""1157_partial_refund_my_ether"" [label=""partial_refund_my_ether""];
""1157_whitelist_addys"" [label=""whitelist_addys""];
""1157_refund"" [label=""refund""];
""1157_tokenFallback"" [label=""tokenFallback""];
""1157_fallback"" [label=""fallback""];
""1157_set_percent_reduction"" [label=""set_percent_reduction""];
""1157_emergency_eth_withdraw"" [label=""emergency_eth_withdraw""];
""1157_tokens_received"" [label=""tokens_received""];
""1157_partial_refund"" [label=""partial_refund""];
""1157_withdraw"" [label=""withdraw""];
""1157_change_fee"" [label=""change_fee""];
""1157_set_tokens_received"" [label=""set_tokens_received""];
""1157_take_fees_eth_dev"" [label=""take_fees_eth_dev""];
""1157_set_sale_address"" [label=""set_sale_address""];
""1157_take_fees_eth_owner"" [label=""take_fees_eth_owner""];
""1157_withdraw_tokens_for"" [label=""withdraw_tokens_for""];
""1157_change_max_amount"" [label=""change_max_amount""];
""1157_buy_the_tokens"" [label=""buy_the_tokens""];
""1157_tokenFallback"" -> ""1157_tokens_received"";
""1157_emergency_eth_withdraw"" -> ""1157_onlyOwner"";
""1157_partial_refund_my_ether"" -> ""1157_partial_refund"";
""1157_set_allow_refunds"" -> ""1157_onlyOwner"";
""1157_set_tokens_received"" -> ""1157_tokens_received"";
""1157_fallback"" -> ""1157_underMaxAmount"";
""1157_change_max_amount"" -> ""1157_onlyOwner"";
""1157_whitelist_addys"" -> ""1157_onlyOwner"";
""1157_set_token_address"" -> ""1157_onlyOwner"";
""1157_change_max_amount"" -> ""1157_calculate_with_fees"";
""1157_emergency_token_withdraw"" -> ""1157_onlyOwner"";
""1157_change_individual_cap"" -> ""1157_onlyOwner"";
""1157_constructor"" -> ""1157_calculate_with_fees"";
""1157_set_sale_address"" -> ""1157_onlyOwner"";
""1157_buy_the_tokens"" -> ""1157_take_fees_eth_owner"";
""1157_set_allow_contributions"" -> ""1157_onlyOwner"";
""1157_refund_my_ether"" -> ""1157_refund"";
""1157_change_fee"" -> ""1157_onlyOwner"";
""1157_set_gas_price_max"" -> ""1157_onlyOwner"";
""1157_set_percent_reduction"" -> ""1157_onlyOwner"";
""1157_withdraw_tokens_for"" -> ""1157_withdraw"";
""1157_set_whitelist_enabled"" -> ""1157_onlyOwner"";
""1157_buy_the_tokens"" -> ""1157_take_fees_eth_dev"";
""1157_buy_the_tokens"" -> ""1157_onlyOwner"";
""1157_set_tokens_received"" -> ""1157_onlyOwner"";
""1157_withdraw_my_tokens"" -> ""1157_withdraw"";
}
"
0x65061cfa23aa566316b0215c9eecabeafd4d9e81.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; address public wallet; address public addressOfTokenUsedAsReward1; address public addressOfTokenUsedAsReward2; address public addressOfTokenUsedAsReward3; address public addressOfTokenUsedAsReward4; address public addressOfTokenUsedAsReward5; uint256 public price = 7500; token tokenReward1; token tokenReward2; token tokenReward3; token tokenReward4; token tokenReward5; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale() { wallet = 0xE37C4541C34e4A8785DaAA9aEb5005DdD29854ac; addressOfTokenUsedAsReward1 = 0xBD17Dfe402f1Afa41Cda169297F8de48d6Dfb613; addressOfTokenUsedAsReward2 = 0x489DF6493C58642e6a4651dDcd4145eaFBAA1018; addressOfTokenUsedAsReward3 = 0x404a639086eda1B9C8abA3e34a5f8145B4B04ea5; addressOfTokenUsedAsReward4 = 0x00755562Dfc1F409ec05d38254158850E4e8362a; addressOfTokenUsedAsReward5 = 0xE7AE9dc8F5F572e4f80655C4D0Ffe32ec16fF0E3; tokenReward1 = token(addressOfTokenUsedAsReward1); tokenReward2 = token(addressOfTokenUsedAsReward2); tokenReward3 = token(addressOfTokenUsedAsReward3); tokenReward4 = token(addressOfTokenUsedAsReward4); tokenReward5 = token(addressOfTokenUsedAsReward5); }",1,"subgraph cluster_489_Crowdsale {
label=""Crowdsale"";
""489_buyTokens"" [label=""buyTokens""];
""489_withdrawTokens3"" [label=""withdrawTokens3""];
""489_forwardFunds"" [label=""forwardFunds""];
""489_withdrawTokens1"" [label=""withdrawTokens1""];
""489_fallback"" [label=""fallback""];
""489_withdrawTokens4"" [label=""withdrawTokens4""];
""489_withdrawTokens2"" [label=""withdrawTokens2""];
""489_Crowdsale"" [label=""Crowdsale""];
""489_withdrawTokens5"" [label=""withdrawTokens5""];
""489_setPrice"" [label=""setPrice""];
""489_stopSale"" [label=""stopSale""];
""489_startSale"" [label=""startSale""];
""489_changeWallet"" [label=""changeWallet""];
""489_validPurchase"" [label=""validPurchase""];
""489_fallback"" -> ""489_buyTokens"";
""489_buyTokens"" -> ""489_forwardFunds"";
""489_buyTokens"" -> ""489_validPurchase"";
}
"
0x18da8521c333aed9de8f512e847734cb7be42e38.sol,Crowdsale,"contract Crowdsale is Pausable, PullPayment { using SafeMath for uint; struct Backer { uint weiReceived; uint coinSent; }",1,"subgraph cluster_1189_Crowdsale {
label=""Crowdsale"";
""1189_setMultisig"" [label=""setMultisig""];
""1189_drain"" [label=""drain""];
""1189_receiveETH"" [label=""receiveETH""];
""1189_finalize"" [label=""finalize""];
""1189_getRemainCoins"" [label=""getRemainCoins""];
""1189_backProjectXOwner"" [label=""backProjectXOwner""];
""1189_refund"" [label=""refund""];
""1189_Crowdsale"" [label=""Crowdsale""];
""1189_bonus"" [label=""bonus""];
""1189_start"" [label=""start""];
""1189_fallback"" [label=""fallback""];
""1189_finalize"" -> ""1189_onlyOwner"";
""1189_drain"" -> ""1189_onlyOwner"";
""1189_receiveETH"" -> ""1189_bonus"";
""1189_getRemainCoins"" -> ""1189_bonus"";
""1189_backProjectXOwner"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_stopInEmergency"";
""1189_setMultisig"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_receiveETH"";
""1189_start"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_respectTimeFrame"";
""1189_getRemainCoins"" -> ""1189_onlyOwner"";
""1189_refund"" -> ""1189_asyncSend"";
""1189_refund"" -> ""1189_minCapNotReached"";
}
"
0x29880855d419c6fa0e8c7fdfd985c80f286d914e.sol,DadiPublicSale,contract DadiPublicSale is Ownable { using SafeMath for uint256; StandardToken public token; uint256 public tokenSupply; uint256 public tokensPurchased = 0; uint256 public individualCap = 5000 * 1000; uint256 public tokenPrice = 500; uint256 public ethRate; uint256 public maxGasPrice; address[] public saleWallets; mapping(address => Investor) private investors; address[] private investorIndex; struct Investor { uint256 tokens; uint256 contribution; bool distributed; uint index; },1,"subgraph cluster_1481_DadiPublicSale {
label=""DadiPublicSale"";
""1481_fallback"" [label=""fallback""];
""1481_ethToUsd"" [label=""ethToUsd""];
""1481_addSaleWallet"" [label=""addSaleWallet""];
""1481_calculateTokens"" [label=""calculateTokens""];
""1481_distributeToAlternateAddress"" [label=""distributeToAlternateAddress""];
""1481_setTokenDistribution"" [label=""setTokenDistribution""];
""1481_updateMaxGasPrice"" [label=""updateMaxGasPrice""];
""1481_getTokensAvailable"" [label=""getTokensAvailable""];
""1481_startPublicSale"" [label=""startPublicSale""];
""1481_getInvestor"" [label=""getInvestor""];
""1481_getRandom"" [label=""getRandom""];
""1481_forwardFunds"" [label=""forwardFunds""];
""1481_DadiPublicSale"" [label=""DadiPublicSale""];
""1481_offlineTransaction"" [label=""offlineTransaction""];
""1481_finalizeSale"" [label=""finalizeSale""];
""1481_distributeTokens"" [label=""distributeTokens""];
""1481_getInvestorCount"" [label=""getInvestorCount""];
""1481_updateSaleParameters"" [label=""updateSaleParameters""];
""1481_isValidContribution"" [label=""isValidContribution""];
""1481_isBelowCap"" [label=""isBelowCap""];
""1481_isInvested"" [label=""isInvested""];
""1481_addToInvestor"" [label=""addToInvestor""];
""1481_updateEthRate"" [label=""updateEthRate""];
""1481_setState"" [label=""setState""];
""1481_buyTokens"" [label=""buyTokens""];
""1481_closeSale"" [label=""closeSale""];
""1481_redistributeTokens"" [label=""redistributeTokens""];
""1481_getTokensPurchased"" [label=""getTokensPurchased""];
""1481_distributeTokens"" -> ""1481_onlyOwner"";
""1481_redistributeTokens"" -> ""1481_onlyOwner"";
""1481_buyTokens"" -> ""1481_isValidContribution"";
""1481_distributeToAlternateAddress"" -> ""1481_onlyOwner"";
""1481_offlineTransaction"" -> ""1481_updateSaleParameters"";
""1481_buyTokens"" -> ""1481_updateSaleParameters"";
""1481_updateEthRate"" -> ""1481_onlyOwner"";
""1481_setTokenDistribution"" -> ""1481_onlyOwner"";
""1481_startPublicSale"" -> ""1481_updateEthRate"";
""1481_updateMaxGasPrice"" -> ""1481_onlyOwner"";
""1481_closeSale"" -> ""1481_onlyOwner"";
""1481_buyTokens"" -> ""1481_addToInvestor"";
""1481_offlineTransaction"" -> ""1481_onlyOwner"";
""1481_getInvestor"" -> ""1481_isInvested"";
""1481_buyTokens"" -> ""1481_forwardFunds"";
""1481_finalizeSale"" -> ""1481_onlyOwner"";
""1481_fallback"" -> ""1481_nonZero"";
""1481_fallback"" -> ""1481_buyTokens"";
""1481_startPublicSale"" -> ""1481_onlyOwner"";
""1481_isValidContribution"" -> ""1481_isBelowCap"";
""1481_forwardFunds"" -> ""1481_getRandom"";
""1481_closeSale"" -> ""1481_updateSaleParameters"";
""1481_buyTokens"" -> ""1481_getTokensAvailable"";
""1481_addSaleWallet"" -> ""1481_onlyOwner"";
""1481_offlineTransaction"" -> ""1481_getTokensAvailable"";
""1481_addToInvestor"" -> ""1481_isInvested"";
""1481_offlineTransaction"" -> ""1481_addToInvestor"";
""1481_closeSale"" -> ""1481_getTokensAvailable"";
""1481_isBelowCap"" -> ""1481_ethToUsd"";
""1481_setState"" -> ""1481_onlyOwner"";
""1481_buyTokens"" -> ""1481_calculateTokens"";
""1481_finalizeSale"" -> ""1481_forwardFunds"";
}
"
0x302eb72befc8af539432ec32c39423525412748f.sol,ZRSToken,contract ZRSToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 24000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function ZRSToken () { owner = msg.sender; },1,"subgraph cluster_756_ZRSToken {
label=""ZRSToken"";
""756_refundTokens"" [label=""refundTokens""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_ZRSToken"" [label=""ZRSToken""];
""756_transfer"" [label=""transfer""];
""756_createTokens"" [label=""createTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_transferFrom"" [label=""transferFrom""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_totalSupply"" [label=""totalSupply""];
""756_setOwner"" [label=""setOwner""];
""756_approve"" [label=""approve""];
""756_createTokens"" -> ""756_safeSub"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_allowance"";
""756_transfer"" -> ""756_transfer"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
}
"
0x6593a7140f3718efff638b72a9b6083db47ce0d2.sol,Crowdsale,"contract Crowdsale is GuidedByRoles, ERC20Provider{ uint256 constant USER_UNPAUSE_TOKEN_TIMEOUT = 90 days; uint256 constant FORCED_REFUND_TIMEOUT1 = 400 days; uint256 constant FORCED_REFUND_TIMEOUT2 = 600 days; uint256 constant ROUND_PROLONGATE = 90 days; using SafeMath for uint256; enum TokenSaleType {round1, round2}",1,"subgraph cluster_2284_Crowdsale {
label=""Crowdsale"";
""2284_getProfitPercentForData"" [label=""getProfitPercentForData""];
""2284_prolong"" [label=""prolong""];
""2284_weiTotalRaised"" [label=""weiTotalRaised""];
""2284_calcFin"" [label=""calcFin""];
""2284_buyTokens"" [label=""buyTokens""];
""2284_getBeneficiaryCash"" [label=""getBeneficiaryCash""];
""2284_distructVault"" [label=""distructVault""];
""2284_goalReached"" [label=""goalReached""];
""2284_getPartnerCash"" [label=""getPartnerCash""];
""2284_totalSupply"" [label=""totalSupply""];
""2284_setCrowdsalePause"" [label=""setCrowdsalePause""];
""2284_getProfitPercent"" [label=""getProfitPercent""];
""2284_begin"" [label=""begin""];
""2284_finalization"" [label=""finalization""];
""2284_initialize"" [label=""initialize""];
""2284_lokedMint"" [label=""lokedMint""];
""2284_firstMintRound0"" [label=""firstMintRound0""];
""2284_paymentsInOtherCurrency"" [label=""paymentsInOtherCurrency""];
""2284_finalize2"" [label=""finalize2""];
""2284_hasEnded"" [label=""hasEnded""];
""2284_claimRefund"" [label=""claimRefund""];
""2284_initialization"" [label=""initialization""];
""2284_Crowdsale"" [label=""Crowdsale""];
""2284_forwardFunds"" [label=""forwardFunds""];
""2284_weiRaised"" [label=""weiRaised""];
""2284_firstMintRound0For"" [label=""firstMintRound0For""];
""2284_finalize"" [label=""finalize""];
""2284_validPurchase"" [label=""validPurchase""];
""2284_fallback"" [label=""fallback""];
""2284_updateInfo"" [label=""updateInfo""];
""2284_getBonuses"" [label=""getBonuses""];
""2284_setup"" [label=""setup""];
""2284_tokenUnpause"" [label=""tokenUnpause""];
""2284_calcAndGet"" [label=""calcAndGet""];
""2284_tokenPause"" [label=""tokenPause""];
""2284_buyTokens"" -> ""2284_getBonuses"";
""2284_buyTokens"" -> ""2284_forwardFunds"";
""2284_getPartnerCash"" -> ""2284_calcFin"";
""2284_finalize"" -> ""2284_hasEnded"";
""2284_setup"" -> ""2284_begin"";
""2284_goalReached"" -> ""2284_weiRaised"";
""2284_initialize"" -> ""2284_initialization"";
""2284_calcFin"" -> ""2284_weiTotalRaised"";
""2284_updateInfo"" -> ""2284_paymentsInOtherCurrency"";
""2284_buyTokens"" -> ""2284_lokedMint"";
""2284_buyTokens"" -> ""2284_validPurchase"";
""2284_firstMintRound0For"" -> ""2284_begin"";
""2284_tokenUnpause"" -> ""2284_goalReached"";
""2284_weiTotalRaised"" -> ""2284_weiRaised"";
""2284_getProfitPercent"" -> ""2284_getProfitPercentForData"";
""2284_finalization"" -> ""2284_weiRaised"";
""2284_calcAndGet"" -> ""2284_getBeneficiaryCash"";
""2284_getBeneficiaryCash"" -> ""2284_calcFin"";
""2284_hasEnded"" -> ""2284_goalReached"";
""2284_Crowdsale"" -> ""2284_GuidedByRoles"";
""2284_finalize"" -> ""2284_finalization"";
""2284_validPurchase"" -> ""2284_weiRaised"";
""2284_firstMintRound0"" -> ""2284_begin"";
""2284_hasEnded"" -> ""2284_weiRaised"";
""2284_fallback"" -> ""2284_buyTokens"";
""2284_buyTokens"" -> ""2284_getProfitPercent"";
""2284_initialize"" -> ""2284_begin"";
""2284_finalization"" -> ""2284_goalReached"";
}
"
0xcefa3e88393cf17c9b4dc6c9fe5357dfae8036d6.sol,Registry,contract Registry is Ownable { struct ContributorData { bool isActive; uint contributionETH; uint contributionUSD; uint tokensIssued; uint quoteUSD; uint contributionRNTB; },1,"subgraph cluster_639_Registry {
label=""Registry"";
""639_removeContribution"" [label=""removeContribution""];
""639_getContributorAmount"" [label=""getContributorAmount""];
""639_getContributionUSD"" [label=""getContributionUSD""];
""639_editContribution"" [label=""editContribution""];
""639_getContributionTokens"" [label=""getContributionTokens""];
""639_getContributionRNTB"" [label=""getContributionRNTB""];
""639_isActiveContributor"" [label=""isActiveContributor""];
""639_setCompleted"" [label=""setCompleted""];
""639_Registry"" [label=""Registry""];
""639_addContribution"" [label=""addContribution""];
""639_setPermissionManager"" [label=""setPermissionManager""];
""639_getContributionETH"" [label=""getContributionETH""];
""639_addContributor"" [label=""addContributor""];
""639_addRNTBContribution"" [label=""addRNTBContribution""];
""639_getContributorByIndex"" [label=""getContributorByIndex""];
""639_setCompleted"" -> ""639_onlyPermitted"";
""639_addRNTBContribution"" -> ""639_onlyPermitted"";
""639_addContributor"" -> ""639_onlyPermitted"";
""639_addContribution"" -> ""639_onlyPermitted"";
""639_removeContribution"" -> ""639_onlyPermitted"";
""639_setPermissionManager"" -> ""639_onlyOwner"";
""639_editContribution"" -> ""639_onlyPermitted"";
}
"
0x0ce95ef378059f38c5fa21e6d81a5895c0d9911b.sol,Game,contract Game { using GlobalTypes for GlobalTypes.Global; using MarketTypes for MarketTypes.MarketListing; using MissionParametersTypes for MissionParametersTypes.MissionParameters; using GameCommon for GameCommon.LaunchRocketStackFrame; address public m_Owner; AbstractDatabase public m_Database; AbstractGameHidden public m_GameHidden; bool public m_Paused; uint256 constant GlobalCategory = 0; uint256 constant RocketCategory = 1; uint256 constant OwnershipCategory = 2; uint256 constant InventoryCategory = 3; uint256 constant MarketCategory = 4; uint256 constant ProfitFundsCategory = 5; uint256 constant CompetitionFundsCategory = 6; uint256 constant MissionParametersCategory = 7; uint256 constant CompetitionScoresCategory = 8; uint256 constant WithdrawalFundsCategory = 9; uint256 constant ReferralCategory = 10; uint256 constant RocketStockCategory = 11; uint256 constant RocketStockInitializedCategory = 12; address constant NullAddress = 0; uint256 constant MaxCompetitionScores = 10; mapping(uint32 => RocketTypes.StockRocket) m_InitialRockets; modifier OnlyOwner() { require(msg.sender == m_Owner); _; },1,"subgraph cluster_4077_GameCommon {
label=""GameCommon"";
""4077_DeserializeRaw1"" [label=""DeserializeRaw1""];
""4077_DeserializeRaw2"" [label=""DeserializeRaw2""];
""4077_SerializeRaw3"" [label=""SerializeRaw3""];
""4077_DeserializeLaunchRocketStackFrame"" [label=""DeserializeLaunchRocketStackFrame""];
""4077_SerializeRaw1"" [label=""SerializeRaw1""];
""4077_SerializeRaw0"" [label=""SerializeRaw0""];
""4077_SerializeLaunchRocketStackFrame"" [label=""SerializeLaunchRocketStackFrame""];
""4077_DeserializeRaw0"" [label=""DeserializeRaw0""];
""4077_SerializeRaw2"" [label=""SerializeRaw2""];
""4077_DeserializeRaw3"" [label=""DeserializeRaw3""];
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw0"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw0"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw3"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw1"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw3"";
""4077_DeserializeLaunchRocketStackFrame"" -> ""4077_DeserializeRaw2"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw2"";
""4077_SerializeLaunchRocketStackFrame"" -> ""4077_SerializeRaw1"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,HavvenEscrow,"contract HavvenEscrow is Owned, LimitedSetup(8 weeks), SafeDecimalMath { Havven public havven; mapping(address => uint[2][]) public vestingSchedules; mapping(address => uint) public totalVestedAccountBalance; uint public totalVestedBalance; function HavvenEscrow(address _owner, Havven _havven) Owned(_owner) public { havven = _havven; }",1,"subgraph cluster_4045_HavvenEscrow {
label=""HavvenEscrow"";
""4045_addVestingSchedule"" [label=""addVestingSchedule""];
""4045_getNextVestingTime"" [label=""getNextVestingTime""];
""4045_HavvenEscrow"" [label=""HavvenEscrow""];
""4045_getNextVestingIndex"" [label=""getNextVestingIndex""];
""4045_getVestingScheduleEntry"" [label=""getVestingScheduleEntry""];
""4045_getVestingTime"" [label=""getVestingTime""];
""4045_getVestingQuantity"" [label=""getVestingQuantity""];
""4045_purgeAccount"" [label=""purgeAccount""];
""4045_numVestingEntries"" [label=""numVestingEntries""];
""4045_withdrawHavvens"" [label=""withdrawHavvens""];
""4045_setHavven"" [label=""setHavven""];
""4045_balanceOf"" [label=""balanceOf""];
""4045_appendVestingEntry"" [label=""appendVestingEntry""];
""4045_totalVestedAccountBalance"" [label=""totalVestedAccountBalance""];
""4045_vest"" [label=""vest""];
""4045_getNextVestingEntry"" [label=""getNextVestingEntry""];
""4045_getNextVestingQuantity"" [label=""getNextVestingQuantity""];
""4045_addVestingSchedule"" -> ""4045_onlyOwner"";
""4045_withdrawHavvens"" -> ""4045_onlyOwner"";
""4045_appendVestingEntry"" -> ""4045_onlyOwner"";
""4045_getNextVestingTime"" -> ""4045_getNextVestingIndex"";
""4045_appendVestingEntry"" -> ""4045_safeAdd"";
""4045_getNextVestingIndex"" -> ""4045_numVestingEntries"";
""4045_getNextVestingEntry"" -> ""4045_getNextVestingIndex"";
""4045_vest"" -> ""4045_numVestingEntries"";
""4045_getNextVestingEntry"" -> ""4045_getVestingScheduleEntry"";
""4045_purgeAccount"" -> ""4045_setupFunction"";
""4045_purgeAccount"" -> ""4045_onlyOwner"";
""4045_getNextVestingQuantity"" -> ""4045_getVestingQuantity"";
""4045_getNextVestingIndex"" -> ""4045_getVestingTime"";
""4045_purgeAccount"" -> ""4045_safeSub"";
""4045_getNextVestingTime"" -> ""4045_getVestingTime"";
""4045_appendVestingEntry"" -> ""4045_getVestingTime"";
""4045_setHavven"" -> ""4045_onlyOwner"";
""4045_vest"" -> ""4045_safeSub"";
""4045_getNextVestingTime"" -> ""4045_numVestingEntries"";
""4045_vest"" -> ""4045_getVestingTime"";
""4045_vest"" -> ""4045_safeAdd"";
""4045_addVestingSchedule"" -> ""4045_setupFunction"";
""4045_getNextVestingEntry"" -> ""4045_numVestingEntries"";
""4045_appendVestingEntry"" -> ""4045_setupFunction"";
""4045_withdrawHavvens"" -> ""4045_setupFunction"";
""4045_addVestingSchedule"" -> ""4045_appendVestingEntry"";
""4045_HavvenEscrow"" -> ""4045_Owned"";
""4045_getNextVestingQuantity"" -> ""4045_getNextVestingIndex"";
""4045_vest"" -> ""4045_getVestingQuantity"";
""4045_getNextVestingQuantity"" -> ""4045_numVestingEntries"";
""4045_appendVestingEntry"" -> ""4045_numVestingEntries"";
}
"
0x1c8654c680c3f18a3b3a0ee943d40848a9fffd0d.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; using SafeERC20 for ERC20; ERC20 public token; address public wallet; uint256 internal rate; uint256 public weiRaised; event TokenPurchase( address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount ); constructor(address _wallet, ERC20 _token) public { require(_wallet != address(0)); require(_token != address(0)); wallet = _wallet; token = _token; }",1,"subgraph cluster_555_Crowdsale {
label=""Crowdsale"";
""555_fallback"" [label=""fallback""];
""555__updatePurchasingState"" [label=""_updatePurchasingState""];
""555_constructor"" [label=""constructor""];
""555_buyTokens"" [label=""buyTokens""];
""555__getTokenAmount"" [label=""_getTokenAmount""];
""555__deliverTokens"" [label=""_deliverTokens""];
""555__preValidatePurchase"" [label=""_preValidatePurchase""];
""555__processPurchase"" [label=""_processPurchase""];
""555__postValidatePurchase"" [label=""_postValidatePurchase""];
""555__forwardFunds"" [label=""_forwardFunds""];
""555_buyTokens"" -> ""555__getTokenAmount"";
""555_buyTokens"" -> ""555__forwardFunds"";
""555__processPurchase"" -> ""555__deliverTokens"";
""555_buyTokens"" -> ""555__updatePurchasingState"";
""555_buyTokens"" -> ""555__postValidatePurchase"";
""555_fallback"" -> ""555_buyTokens"";
""555_buyTokens"" -> ""555__preValidatePurchase"";
""555_buyTokens"" -> ""555__processPurchase"";
}
"
0x0d853d20b54b8abfacb05fc5e81e8d4395021c01.sol,LxtBountyDistribution,contract LxtBountyDistribution is owned { using SafeMath for uint; LexitToken public LXT; address public LXT_OWNER; uint256 private constant decimalFactor = 10**uint256(18); uint256 public grandTotalClaimed = 0; struct Allocation { uint256 totalAllocated; uint256 amountClaimed; },1,"subgraph cluster_1283_LxtBountyDistribution {
label=""LxtBountyDistribution"";
""1283_transferToken"" [label=""transferToken""];
""1283_LxtBountyDistribution"" [label=""LxtBountyDistribution""];
""1283_updateLxtOwner"" [label=""updateLxtOwner""];
""1283_transferTokens"" [label=""transferTokens""];
""1283_setAllocation"" [label=""setAllocation""];
""1283_setAllocations"" [label=""setAllocations""];
""1283_updateAllocation"" [label=""updateAllocation""];
""1283_setAdmin"" [label=""setAdmin""];
""1283_updateAllocation"" -> ""1283_onlyOwnerOrAdmin"";
""1283_setAdmin"" -> ""1283_onlyOwnerOrAdmin"";
""1283_transferTokens"" -> ""1283_onlyOwnerOrAdmin"";
""1283_setAllocation"" -> ""1283_onlyOwnerOrAdmin"";
""1283_updateLxtOwner"" -> ""1283_onlyOwnerOrAdmin"";
""1283_setAllocations"" -> ""1283_onlyOwnerOrAdmin"";
""1283_transferToken"" -> ""1283_onlyOwnerOrAdmin"";
}
"
0xa1ad52ff49fc70b7920b7d02483a58beb15d492b.sol,FoMo3Dlong,"contract FoMo3Dlong is modularLong { using SafeMath for *; using NameFilter for string; using F3DKeysCalcLong for uint256; address private owner = 0x0c204d9C438553a107B29cdE1d1e7954673b29B3; address private opAddress = 0x0c204d9C438553a107B29cdE1d1e7954673b29B3; address private comAddress = 0x24D160101C72c035287f772a8ac2b744a477F489; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x0f717ffff71e639636fcdd33727ee8c17c4724bf); string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 constant private rndInit_ = 2 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 2 hours; uint256 constant private comDropGap_ = 24 hours; uint256 constant private rndNTR_ = 168 hours; uint256 public airDropPot_; uint256 public airDropPot2_; uint256 public airDropTracker_ = 0; uint256 public airDropTracker2_ = 0; uint256 public rID_; uint256 public comReWards_; uint256 public comAirDrop_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => uint256) public inviteCount_; mapping (address => bool) public addrLock_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => uint256[10]) public lastTen_; mapping (uint256 => uint256) public roundBetCount_; mapping (uint256 => mapping (uint256 =>uint256)) public comDropLastTime_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(48,0); fees_[1] = F3Ddatasets.TeamFee(33,0); fees_[2] = F3Ddatasets.TeamFee(18,0); potSplit_[0] = F3Ddatasets.PotSplit(10,20); potSplit_[1] = F3Ddatasets.PotSplit(5,20); potSplit_[2] = F3Ddatasets.PotSplit(20,20); }",1,"subgraph cluster_5035_FoMo3Dlong {
label=""FoMo3Dlong"";
""5035_shareLastTen"" [label=""shareLastTen""];
""5035_constructor"" [label=""constructor""];
""5035_verifyTeam"" [label=""verifyTeam""];
""5035_receivePlayerInfo"" [label=""receivePlayerInfo""];
""5035_receivePlayerNameList"" [label=""receivePlayerNameList""];
""5035_withdrawEarnings"" [label=""withdrawEarnings""];
""5035_core"" [label=""core""];
""5035_reLoadXaddr"" [label=""reLoadXaddr""];
""5035_buyXname"" [label=""buyXname""];
""5035_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""5035_updateMasks"" [label=""updateMasks""];
""5035_fallback"" [label=""fallback""];
""5035_updateTimer"" [label=""updateTimer""];
""5035_distributeExternal"" [label=""distributeExternal""];
""5035_withdraw"" [label=""withdraw""];
""5035_distributeInternal"" [label=""distributeInternal""];
""5035_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""5035_reLoadXname"" [label=""reLoadXname""];
""5035_getPlayerVaults"" [label=""getPlayerVaults""];
""5035_reLoadCore"" [label=""reLoadCore""];
""5035_getTimeLeft"" [label=""getTimeLeft""];
""5035_updateGenVault"" [label=""updateGenVault""];
""5035_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""5035_buyXid"" [label=""buyXid""];
""5035_affsend"" [label=""affsend""];
""5035_determinePID"" [label=""determinePID""];
""5035_potSwap"" [label=""potSwap""];
""5035_air2"" [label=""air2""];
""5035_endRound"" [label=""endRound""];
""5035_registerNameXID"" [label=""registerNameXID""];
""5035_airdrop2"" [label=""airdrop2""];
""5035_registerNameXname"" [label=""registerNameXname""];
""5035_activate"" [label=""activate""];
""5035_airdrop"" [label=""airdrop""];
""5035_managePlayer"" [label=""managePlayer""];
""5035_iWantXKeys"" [label=""iWantXKeys""];
""5035_registerNameXaddr"" [label=""registerNameXaddr""];
""5035_buyCore"" [label=""buyCore""];
""5035_getBuyPrice"" [label=""getBuyPrice""];
""5035_comDrop"" [label=""comDrop""];
""5035_buyXaddr"" [label=""buyXaddr""];
""5035_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""5035_reLoadXid"" [label=""reLoadXid""];
""5035_endTx"" [label=""endTx""];
""5035_calcKeysReceived"" [label=""calcKeysReceived""];
""5035_reLoadXid"" -> ""5035_isHuman"";
""5035_withdrawEarnings"" -> ""5035_updateGenVault"";
""5035_withdraw"" -> ""5035_isHuman"";
""5035_buyXid"" -> ""5035_isActivated"";
""5035_withdraw"" -> ""5035_isActivated"";
""5035_reLoadXaddr"" -> ""5035_reLoadCore"";
""5035_reLoadCore"" -> ""5035_withdrawEarnings"";
""5035_core"" -> ""5035_air2"";
""5035_buyXaddr"" -> ""5035_isWithinLimits"";
""5035_reLoadXname"" -> ""5035_isHuman"";
""5035_buyXname"" -> ""5035_buyCore"";
""5035_fallback"" -> ""5035_isActivated"";
""5035_registerNameXname"" -> ""5035_isHuman"";
""5035_core"" -> ""5035_comDrop"";
""5035_getPlayerInfoByAddress"" -> ""5035_calcUnMaskedEarnings"";
""5035_core"" -> ""5035_updateTimer"";
""5035_reLoadXid"" -> ""5035_isActivated"";
""5035_buyCore"" -> ""5035_endRound"";
""5035_fallback"" -> ""5035_isHuman"";
""5035_reLoadXaddr"" -> ""5035_verifyTeam"";
""5035_getPlayerVaults"" -> ""5035_calcUnMaskedEarnings"";
""5035_air2"" -> ""5035_airdrop2"";
""5035_reLoadXname"" -> ""5035_reLoadCore"";
""5035_buyXname"" -> ""5035_isHuman"";
""5035_updateGenVault"" -> ""5035_calcUnMaskedEarnings"";
""5035_core"" -> ""5035_airdrop"";
""5035_buyXaddr"" -> ""5035_isActivated"";
""5035_endRound"" -> ""5035_shareLastTen"";
""5035_buyXaddr"" -> ""5035_isHuman"";
""5035_reLoadXaddr"" -> ""5035_isWithinLimits"";
""5035_managePlayer"" -> ""5035_updateGenVault"";
""5035_fallback"" -> ""5035_determinePID"";
""5035_getPlayerVaults"" -> ""5035_getPlayerVaultsHelper"";
""5035_withdraw"" -> ""5035_withdrawEarnings"";
""5035_buyXname"" -> ""5035_verifyTeam"";
""5035_core"" -> ""5035_endTx"";
""5035_reLoadXaddr"" -> ""5035_isActivated"";
""5035_fallback"" -> ""5035_buyCore"";
""5035_reLoadXname"" -> ""5035_verifyTeam"";
""5035_core"" -> ""5035_managePlayer"";
""5035_buyCore"" -> ""5035_core"";
""5035_distributeInternal"" -> ""5035_updateMasks"";
""5035_buyXname"" -> ""5035_isActivated"";
""5035_buyXname"" -> ""5035_determinePID"";
""5035_reLoadXaddr"" -> ""5035_isHuman"";
""5035_core"" -> ""5035_distributeInternal"";
""5035_buyXaddr"" -> ""5035_buyCore"";
""5035_fallback"" -> ""5035_isWithinLimits"";
""5035_buyXaddr"" -> ""5035_verifyTeam"";
""5035_buyXid"" -> ""5035_buyCore"";
""5035_buyXid"" -> ""5035_determinePID"";
""5035_reLoadXid"" -> ""5035_isWithinLimits"";
""5035_withdraw"" -> ""5035_endRound"";
""5035_buyXid"" -> ""5035_isWithinLimits"";
""5035_buyXid"" -> ""5035_verifyTeam"";
""5035_registerNameXID"" -> ""5035_isHuman"";
""5035_distributeExternal"" -> ""5035_affsend"";
""5035_buyXaddr"" -> ""5035_determinePID"";
""5035_reLoadXid"" -> ""5035_verifyTeam"";
""5035_reLoadXname"" -> ""5035_isActivated"";
""5035_reLoadCore"" -> ""5035_core"";
""5035_core"" -> ""5035_distributeExternal"";
""5035_registerNameXaddr"" -> ""5035_isHuman"";
""5035_buyXname"" -> ""5035_isWithinLimits"";
""5035_reLoadXid"" -> ""5035_reLoadCore"";
""5035_reLoadXname"" -> ""5035_isWithinLimits"";
""5035_reLoadCore"" -> ""5035_endRound"";
""5035_buyXid"" -> ""5035_isHuman"";
}
"
0xb602f224523c89c80dd8e970573291c63beeb778.sol,Crowdsale,contract Crowdsale is Ownable{ using SafeMath for uint; uint public decimals = 3; BineuroToken public token; function Crowdsale(address _tokenAddress) public{ token = BineuroToken(_tokenAddress); techSupport = msg.sender; token.setCrowdsaleContract(this); owner = token.getOwner(); },1,"subgraph cluster_685_Crowdsale {
label=""Crowdsale"";
""685_volumeBasedBonus"" [label=""volumeBasedBonus""];
""685_endIco"" [label=""endIco""];
""685_etherToTokens"" [label=""etherToTokens""];
""685_fallback"" [label=""fallback""];
""685_timeBasedBonus"" [label=""timeBasedBonus""];
""685_manualSendTokens"" [label=""manualSendTokens""];
""685_isIco"" [label=""isIco""];
""685_Crowdsale"" [label=""Crowdsale""];
""685_changeIcoFinish"" [label=""changeIcoFinish""];
""685_buy"" [label=""buy""];
""685_fallback"" -> ""685_buy"";
""685_buy"" -> ""685_etherToTokens"";
""685_manualSendTokens"" -> ""685_onlyTechSupport"";
""685_fallback"" -> ""685_isIco"";
""685_changeIcoFinish"" -> ""685_onlyTechSupport"";
""685_etherToTokens"" -> ""685_timeBasedBonus"";
""685_etherToTokens"" -> ""685_volumeBasedBonus"";
}
"
0xa2909e1bcbb24b285741db27a11bfa5706ad4ae5.sol,Crowdsale,"contract Crowdsale is Pausable, PullPayment { using SafeMath for uint; struct Backer { uint weiReceived; uint manusSent; }",1,"subgraph cluster_1178_Crowdsale {
label=""Crowdsale"";
""1178_setMultisig"" [label=""setMultisig""];
""1178_bonus"" [label=""bonus""];
""1178_getRemainManus"" [label=""getRemainManus""];
""1178_refund"" [label=""refund""];
""1178_Crowdsale"" [label=""Crowdsale""];
""1178_drain"" [label=""drain""];
""1178_fallback"" [label=""fallback""];
""1178_receiveETH"" [label=""receiveETH""];
""1178_backManusOwner"" [label=""backManusOwner""];
""1178_start"" [label=""start""];
""1178_finalize"" [label=""finalize""];
""1178_fallback"" -> ""1178_stopInEmergency"";
""1178_receiveETH"" -> ""1178_bonus"";
""1178_fallback"" -> ""1178_receiveETH"";
""1178_backManusOwner"" -> ""1178_onlyOwner"";
""1178_getRemainManus"" -> ""1178_bonus"";
""1178_getRemainManus"" -> ""1178_onlyOwner"";
""1178_start"" -> ""1178_onlyOwner"";
""1178_refund"" -> ""1178_asyncSend"";
""1178_fallback"" -> ""1178_respectTimeFrame"";
""1178_finalize"" -> ""1178_onlyOwner"";
""1178_refund"" -> ""1178_minCapNotReached"";
""1178_setMultisig"" -> ""1178_onlyOwner"";
""1178_drain"" -> ""1178_onlyOwner"";
}
"
0xc4aad17558fa95c8937d0856b2dad74c1a7a095f.sol,AgiCrowdsale,"contract AgiCrowdsale is Ownable, ReentrancyGuard { using SafeMath for uint256; uint256 public firstDayCap; uint256 public cap; uint256 public goal; uint256 public rate; uint256 public constant WEI_TO_COGS = 10**uint256(10); address public wallet; RefundVault public vault; SingularityNetToken public token; uint256 public startTime; uint256 public endTime; uint256 public firstDay; bool public isFinalized = false; uint256 public weiRaised; mapping(address => bool) public whitelist; mapping(address => uint256) public contribution; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event TokenRelease(address indexed beneficiary, uint256 amount); event TokenRefund(address indexed refundee, uint256 amount); event Finalized(); function AgiCrowdsale( address _token, address _wallet, uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _firstDayCap, uint256 _goal ) { require(_startTime >= getBlockTimestamp()); require(_endTime >= _startTime); require(_rate > 0); require(_goal > 0); require(_cap > 0); require(_wallet != 0x0); vault = new RefundVault(_wallet); token = SingularityNetToken(_token); wallet = _wallet; startTime = _startTime; endTime = _endTime; firstDay = startTime + 1 * 1 days; firstDayCap = _firstDayCap; rate = _rate; goal = _goal; cap = _cap; }",1,"subgraph cluster_1528_AgiCrowdsale {
label=""AgiCrowdsale"";
""1528_getBlockTimestamp"" [label=""getBlockTimestamp""];
""1528_getTokens"" [label=""getTokens""];
""1528_claimUnsold"" [label=""claimUnsold""];
""1528_finalize"" [label=""finalize""];
""1528_capReached"" [label=""capReached""];
""1528_buyTokens"" [label=""buyTokens""];
""1528_validPurchase"" [label=""validPurchase""];
""1528_claimRefund"" [label=""claimRefund""];
""1528_updateWhitelist"" [label=""updateWhitelist""];
""1528_forwardFunds"" [label=""forwardFunds""];
""1528_AgiCrowdsale"" [label=""AgiCrowdsale""];
""1528_goalReached"" [label=""goalReached""];
""1528_fallback"" [label=""fallback""];
""1528_isWhitelisted"" [label=""isWhitelisted""];
""1528_hasEnded"" [label=""hasEnded""];
""1528_claimRefund"" -> ""1528_goalReached"";
""1528_hasEnded"" -> ""1528_capReached"";
""1528_claimUnsold"" -> ""1528_getBlockTimestamp"";
""1528_AgiCrowdsale"" -> ""1528_getBlockTimestamp"";
""1528_buyTokens"" -> ""1528_getTokens"";
""1528_claimUnsold"" -> ""1528_onlyOwner"";
""1528_finalize"" -> ""1528_goalReached"";
""1528_claimRefund"" -> ""1528_nonReentrant"";
""1528_hasEnded"" -> ""1528_getBlockTimestamp"";
""1528_finalize"" -> ""1528_hasEnded"";
""1528_fallback"" -> ""1528_buyTokens"";
""1528_buyTokens"" -> ""1528_validPurchase"";
""1528_validPurchase"" -> ""1528_getBlockTimestamp"";
""1528_buyTokens"" -> ""1528_getBlockTimestamp"";
""1528_updateWhitelist"" -> ""1528_onlyOwner"";
""1528_finalize"" -> ""1528_onlyOwner"";
""1528_buyTokens"" -> ""1528_forwardFunds"";
}
"
0x4160836bd96bf4f2ed931bfefb3e00b3e68ad8f6.sol,PRHXToken,contract PRHXToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 1200000000 * (10**0); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function PRHXToken () { owner = msg.sender; },1,"subgraph cluster_756_PRHXToken {
label=""PRHXToken"";
""756_transferFrom"" [label=""transferFrom""];
""756_setOwner"" [label=""setOwner""];
""756_PRHXToken"" [label=""PRHXToken""];
""756_totalSupply"" [label=""totalSupply""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_approve"" [label=""approve""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_transfer"" [label=""transfer""];
""756_createTokens"" [label=""createTokens""];
""756_refundTokens"" [label=""refundTokens""];
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
""756_createTokens"" -> ""756_safeSub"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_transfer"" -> ""756_transfer"";
""756_approve"" -> ""756_allowance"";
}
"
0xb602f224523c89c80dd8e970573291c63beeb778.sol,Crowdsale,contract Crowdsale is Ownable{ using SafeMath for uint; uint public decimals = 3; BineuroToken public token; function Crowdsale(address _tokenAddress) public{ token = BineuroToken(_tokenAddress); techSupport = msg.sender; token.setCrowdsaleContract(this); owner = token.getOwner(); },1,"subgraph cluster_685_Crowdsale {
label=""Crowdsale"";
""685_volumeBasedBonus"" [label=""volumeBasedBonus""];
""685_endIco"" [label=""endIco""];
""685_etherToTokens"" [label=""etherToTokens""];
""685_fallback"" [label=""fallback""];
""685_timeBasedBonus"" [label=""timeBasedBonus""];
""685_manualSendTokens"" [label=""manualSendTokens""];
""685_isIco"" [label=""isIco""];
""685_Crowdsale"" [label=""Crowdsale""];
""685_changeIcoFinish"" [label=""changeIcoFinish""];
""685_buy"" [label=""buy""];
""685_fallback"" -> ""685_buy"";
""685_buy"" -> ""685_etherToTokens"";
""685_manualSendTokens"" -> ""685_onlyTechSupport"";
""685_fallback"" -> ""685_isIco"";
""685_changeIcoFinish"" -> ""685_onlyTechSupport"";
""685_etherToTokens"" -> ""685_timeBasedBonus"";
""685_etherToTokens"" -> ""685_volumeBasedBonus"";
}
"
0x000000002bb43c83ece652d161ad0fa862129a2c.sol,AccountRegistry,"contract AccountRegistry is AccountRegistryInterface, TokenRescue { uint256 constant public registrationDeposit = 1 finney; uint256 constant public proposalCensorshipFee = 50 finney; address constant public burn = 0x000000003Ffc15cd9eA076d7ec40B8f516367Ca1; Vote public constant token = Vote(0x000000002647e16d9BaB9e46604D75591D289277); uint8 constant UNCONTACTED = 0; uint8 constant PROPOSER = 1; uint8 constant VOTER = 2; uint8 constant PENDING_PROPOSAL = 4; uint8 constant PROPOSAL = 8; uint8 constant PENDING_CABAL = 16; uint8 constant CABAL = 32; uint8 constant BOARD = 64; struct Account { uint256 lastAccess; uint8 membership; address appointer; address denouncer; address voucher; address devoucher; }",1,"subgraph cluster_103_AccountRegistryInterface {
label=""AccountRegistryInterface"";
""103_canVoteOnProposal"" [label=""canVoteOnProposal""];
}
"
0x4498f897505d0e6991edeab24bc7b5727d72de28.sol,RFCICO,"contract RFCICO { using SafeMath for uint256; address public wallet; address public RFC; uint256 public price = 303; token tokenReward; uint256 public weiRaised; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); constructor() public{ wallet = 0x1c46A08C940D9433297646cBa10Bc492c7D53A82; RFC = 0xed1CAa23883345098C7939C44Fb201AA622746aD; tokenReward = token(RFC); }",1,"subgraph cluster_362_RFCICO {
label=""RFCICO"";
""362_withdrawTokens"" [label=""withdrawTokens""];
""362_changeWallet"" [label=""changeWallet""];
""362_setPrice"" [label=""setPrice""];
""362_fallback"" [label=""fallback""];
""362_constructor"" [label=""constructor""];
""362_stopSale"" [label=""stopSale""];
""362_validPurchase"" [label=""validPurchase""];
""362_buyTokens"" [label=""buyTokens""];
""362_forwardFunds"" [label=""forwardFunds""];
""362_startSale"" [label=""startSale""];
""362_changeTokenReward"" [label=""changeTokenReward""];
""362_buyTokens"" -> ""362_validPurchase"";
""362_buyTokens"" -> ""362_forwardFunds"";
""362_fallback"" -> ""362_buyTokens"";
}
"
0x73e5451bcf4f7c47946abe89c772f3e6576909c3.sol,DragonCrowdsaleCore,"contract DragonCrowdsaleCore is Ownable, DragonPricing { using SafeMath for uint; address public beneficiary; address public charity; address public advisor; address public front; bool public advisorset; uint public tokensSold; uint public etherRaised; uint public presold; uint public presoldMax; uint public crowdsaleCounter; uint public advisorTotal; uint public advisorCut; Dragon public tokenReward; mapping ( address => bool ) public alreadyParticipated; modifier onlyFront() { if (msg.sender != front) { throw; }",1,"subgraph cluster_936_DragonCrowdsaleCore {
label=""DragonCrowdsaleCore"";
""936_advisorSiphon"" [label=""advisorSiphon""];
""936_crowdsale"" [label=""crowdsale""];
""936_DragonCrowdsaleCore"" [label=""DragonCrowdsaleCore""];
""936_transferCharity"" [label=""transferCharity""];
""936_withdrawCrowdsaleDragons"" [label=""withdrawCrowdsaleDragons""];
""936_manualSend"" [label=""manualSend""];
""936_precrowdsale"" [label=""precrowdsale""];
""936_setFront"" [label=""setFront""];
""936_transferBeneficiary"" [label=""transferBeneficiary""];
""936_setAdvisor"" [label=""setAdvisor""];
""936_setAdvisor"" -> ""936_onlyOwner"";
""936_precrowdsale"" -> ""936_advisorSiphon"";
""936_manualSend"" -> ""936_onlyOwner"";
""936_precrowdsale"" -> ""936_onlyFront"";
""936_transferBeneficiary"" -> ""936_onlyOwner"";
""936_transferCharity"" -> ""936_onlyOwner"";
""936_crowdsale"" -> ""936_advisorSiphon"";
""936_withdrawCrowdsaleDragons"" -> ""936_onlyOwner"";
""936_setFront"" -> ""936_onlyOwner"";
""936_crowdsale"" -> ""936_onlyFront"";
}
"
0x01c627181089b6e10ee8316ec08516b3df7c4845.sol,BrickCrowdsale,contract BrickCrowdsale is Ownable { using SafeMath for uint256; uint256 public startTime; uint256 public endTime; uint256 public weiRaised; uint256 public limitDateSale; bool public isSoftCapHit = false; bool public isStarted = false; bool public isFinalized = false; uint256 icoPvtRate = 40; uint256 icoPreRate = 50; uint256 ico1Rate = 65; uint256 ico2Rate = 75; uint256 ico3Rate = 90; uint256 public pvtTokens = (40000) * (10**18); uint256 public preSaleTokens = (6000000) * (10**18); uint256 public ico1Tokens = (8000000) * (10**18); uint256 public ico2Tokens = (8000000) * (10**18); uint256 public ico3Tokens = (8000000) * (10**18); uint256 public totalTokens = (40000000)* (10**18); address public advisoryEthWallet = 0x0D7629d32546CD493bc33ADEF115D4489f5599Be; address public infraEthWallet = 0x536D36a05F6592aa29BB0beE30cda706B1272521; address public techDevelopmentEthWallet = 0x4d0B70d8E612b5dca3597C64643a8d1efd5965e1; address public operationsEthWallet = 0xbc67B82924eEc8643A4f2ceDa59B5acfd888A967; address public wallet = 0x44d44CA0f75bdd3AE8806D02515E8268459c554A; struct ContributorData { uint256 contributionAmountViewOnly; uint256 tokensIssuedViewOnly; uint256 contributionAmount; uint256 tokensIssued; },1,"subgraph cluster_2591_BrickCrowdsale {
label=""BrickCrowdsale"";
""2591_hasEnded"" [label=""hasEnded""];
""2591_starting"" [label=""starting""];
""2591_releaseAllTokens"" [label=""releaseAllTokens""];
""2591_isWithinSaleTimeLimit"" [label=""isWithinSaleTimeLimit""];
""2591_setRate"" [label=""setRate""];
""2591_setHardCap"" [label=""setHardCap""];
""2591_setPvtTokens"" [label=""setPvtTokens""];
""2591_isWithinTokenAllocLimit"" [label=""isWithinTokenAllocLimit""];
""2591_constructor"" [label=""constructor""];
""2591_currentTokenSupply"" [label=""currentTokenSupply""];
""2591_release"" [label=""release""];
""2591_endIcoSaleRound3"" [label=""endIcoSaleRound3""];
""2591_endIcoSaleRound2"" [label=""endIcoSaleRound2""];
""2591_getCurrentRateInCents"" [label=""getCurrentRateInCents""];
""2591_releaseTokens"" [label=""releaseTokens""];
""2591_setKycAddress"" [label=""setKycAddress""];
""2591_finalize"" [label=""finalize""];
""2591_endIcoSaleRound1"" [label=""endIcoSaleRound1""];
""2591_setSaleDuration"" [label=""setSaleDuration""];
""2591_investorCount"" [label=""investorCount""];
""2591_refundMoney"" [label=""refundMoney""];
""2591_setKYCRequiredToSendTokens"" [label=""setKYCRequiredToSendTokens""];
""2591_forwardAllRaisedFunds"" [label=""forwardAllRaisedFunds""];
""2591_tokenSendFailuresCount"" [label=""tokenSendFailuresCount""];
""2591_setSaleBonus"" [label=""setSaleBonus""];
""2591_updateRateInWei"" [label=""updateRateInWei""];
""2591_setIco2Tokens"" [label=""setIco2Tokens""];
""2591_transferTokenOwnership"" [label=""transferTokenOwnership""];
""2591_hasStarted"" [label=""hasStarted""];
""2591_setSoftCap"" [label=""setSoftCap""];
""2591_refundAllMoney"" [label=""refundAllMoney""];
""2591_setIco1Tokens"" [label=""setIco1Tokens""];
""2591_buyTokens"" [label=""buyTokens""];
""2591_endPvtSale"" [label=""endPvtSale""];
""2591_didSoftCapReached"" [label=""didSoftCapReached""];
""2591_setPreSaleTokens"" [label=""setPreSaleTokens""];
""2591_transferKycOwnerShip"" [label=""transferKycOwnerShip""];
""2591_finalization"" [label=""finalization""];
""2591_start"" [label=""start""];
""2591_endPreSale"" [label=""endPreSale""];
""2591_setKYCRequiredToReceiveFunds"" [label=""setKYCRequiredToReceiveFunds""];
""2591_setIco3Tokens"" [label=""setIco3Tokens""];
""2591_buyPhaseTokens"" [label=""buyPhaseTokens""];
""2591_validPurchase"" [label=""validPurchase""];
""2591_isWithinSaleLimit"" [label=""isWithinSaleLimit""];
""2591_setTokenAddress"" [label=""setTokenAddress""];
""2591_setTokensForCrowdSale"" [label=""setTokensForCrowdSale""];
""2591_computeTokens"" [label=""computeTokens""];
""2591_splitTokens"" [label=""splitTokens""];
""2591_fallback"" [label=""fallback""];
""2591_init"" [label=""init""];
""2591_init"" -> ""2591_setRate"";
""2591_finalization"" -> ""2591_splitTokens"";
""2591_setHardCap"" -> ""2591_onlyOwner"";
""2591_setIco3Tokens"" -> ""2591_onlyOwner"";
""2591_refundAllMoney"" -> ""2591_refundMoney"";
""2591_setPvtTokens"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_releaseTokens"";
""2591_releaseTokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleDuration"" -> ""2591_onlyOwner"";
""2591_setTokensForCrowdSale"" -> ""2591_onlyOwner"";
""2591_finalization"" -> ""2591_forwardAllRaisedFunds"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleTimeLimit"";
""2591_setSoftCap"" -> ""2591_onlyOwner"";
""2591_releaseAllTokens"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_buyTokens"";
""2591_transferKycOwnerShip"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToReceiveFunds"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSoftCap"";
""2591_start"" -> ""2591_hasStarted"";
""2591_setPreSaleTokens"" -> ""2591_onlyOwner"";
""2591_isWithinTokenAllocLimit"" -> ""2591_isWithinSaleLimit"";
""2591_endIcoSaleRound1"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound1"" -> ""2591_updateRateInWei"";
""2591_validPurchase"" -> ""2591_isWithinSaleTimeLimit"";
""2591_start"" -> ""2591_starting"";
""2591_init"" -> ""2591_setSaleDuration"";
""2591_endPreSale"" -> ""2591_onlyOwner"";
""2591_finalize"" -> ""2591_onlyOwner"";
""2591_refundMoney"" -> ""2591_onlyOwner"";
""2591_fallback"" -> ""2591_buyPhaseTokens"";
""2591_setIco1Tokens"" -> ""2591_onlyOwner"";
""2591_endIcoSaleRound3"" -> ""2591_updateRateInWei"";
""2591_setKycAddress"" -> ""2591_onlyOwner"";
""2591_transferTokenOwnership"" -> ""2591_onlyOwner"";
""2591_setKYCRequiredToSendTokens"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setSaleBonus"";
""2591_endIcoSaleRound2"" -> ""2591_onlyOwner"";
""2591_setIco2Tokens"" -> ""2591_onlyOwner"";
""2591_setRate"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokenAddress"";
""2591_refundAllMoney"" -> ""2591_onlyOwner"";
""2591_setTokenAddress"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_validPurchase"";
""2591_init"" -> ""2591_setHardCap"";
""2591_finalize"" -> ""2591_finalization"";
""2591_releaseTokens"" -> ""2591_release"";
""2591_init"" -> ""2591_onlyOwner"";
""2591_buyPhaseTokens"" -> ""2591_isWithinTokenAllocLimit"";
""2591_buyPhaseTokens"" -> ""2591_computeTokens"";
""2591_updateRateInWei"" -> ""2591_getCurrentRateInCents"";
""2591_setSaleBonus"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_setTokensForCrowdSale"";
""2591_init"" -> ""2591_setKycAddress"";
""2591_endIcoSaleRound2"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_onlyOwner"";
""2591_start"" -> ""2591_onlyOwner"";
""2591_init"" -> ""2591_start"";
""2591_endIcoSaleRound3"" -> ""2591_onlyOwner"";
""2591_endPreSale"" -> ""2591_updateRateInWei"";
""2591_endPvtSale"" -> ""2591_updateRateInWei"";
}
"
0x91dfe531ff8ba876a505c8f1c98bafede6c7effc.sol,MatchingMarket,"contract MatchingMarket is MatchingEvents, ExpiringMarket, DSNote { bool public buyEnabled = true; bool public matchingEnabled = true; struct sortInfo { uint next; uint prev; uint delb; }",1,"subgraph cluster_3465_MatchingMarket {
label=""MatchingMarket"";
""3465__buys"" [label=""_buys""];
""3465_buyAllAmount"" [label=""buyAllAmount""];
""3465__sort"" [label=""_sort""];
""3465_isOfferSorted"" [label=""isOfferSorted""];
""3465_setMinSell"" [label=""setMinSell""];
""3465_getPayAmount"" [label=""getPayAmount""];
""3465_getNextUnsortedOffer"" [label=""getNextUnsortedOffer""];
""3465_remTokenPairWhitelist"" [label=""remTokenPairWhitelist""];
""3465_getBuyAmount"" [label=""getBuyAmount""];
""3465__find"" [label=""_find""];
""3465_getFirstUnsortedOffer"" [label=""getFirstUnsortedOffer""];
""3465_insert"" [label=""insert""];
""3465_getBetterOffer"" [label=""getBetterOffer""];
""3465__offeru"" [label=""_offeru""];
""3465_addTokenPairWhitelist"" [label=""addTokenPairWhitelist""];
""3465_sellAllAmount"" [label=""sellAllAmount""];
""3465_MatchingMarket"" [label=""MatchingMarket""];
""3465__findpos"" [label=""_findpos""];
""3465_getOfferCount"" [label=""getOfferCount""];
""3465_getBestOffer"" [label=""getBestOffer""];
""3465_del_rank"" [label=""del_rank""];
""3465_getWorseOffer"" [label=""getWorseOffer""];
""3465_setBuyEnabled"" [label=""setBuyEnabled""];
""3465__isPricedLtOrEq"" [label=""_isPricedLtOrEq""];
""3465_take"" [label=""take""];
""3465_make"" [label=""make""];
""3465_kill"" [label=""kill""];
""3465_cancel"" [label=""cancel""];
""3465__unsort"" [label=""_unsort""];
""3465_buy"" [label=""buy""];
""3465_isTokenPairWhitelisted"" [label=""isTokenPairWhitelisted""];
""3465_getMinSell"" [label=""getMinSell""];
""3465_offer"" [label=""offer""];
""3465_setMatchingEnabled"" [label=""setMatchingEnabled""];
""3465__matcho"" [label=""_matcho""];
""3465__hide"" [label=""_hide""];
""3465_setMinSell"" -> ""3465_note"";
""3465_buy"" -> ""3465_can_buy"";
""3465_sellAllAmount"" -> ""3465_rdiv"";
""3465__find"" -> ""3465__isPricedLtOrEq"";
""3465__findpos"" -> ""3465__find"";
""3465_cancel"" -> ""3465__unsort"";
""3465_getBuyAmount"" -> ""3465_add"";
""3465_getBuyAmount"" -> ""3465_getWorseOffer"";
""3465_buyAllAmount"" -> ""3465_sub"";
""3465_sellAllAmount"" -> ""3465_getBestOffer"";
""3465__matcho"" -> ""3465__sort"";
""3465_getPayAmount"" -> ""3465_getBestOffer"";
""3465_remTokenPairWhitelist"" -> ""3465_auth"";
""3465_sellAllAmount"" -> ""3465_take"";
""3465_getBuyAmount"" -> ""3465_getBestOffer"";
""3465__buys"" -> ""3465_buy"";
""3465__matcho"" -> ""3465_buy"";
""3465_getBuyAmount"" -> ""3465_rmul"";
""3465_getPayAmount"" -> ""3465_rmul"";
""3465_remTokenPairWhitelist"" -> ""3465_note"";
""3465_take"" -> ""3465_buy"";
""3465__matcho"" -> ""3465_isActive"";
""3465_cancel"" -> ""3465_cancel"";
""3465_sellAllAmount"" -> ""3465_sub"";
""3465_setBuyEnabled"" -> ""3465_auth"";
""3465_insert"" -> ""3465_isActive"";
""3465_kill"" -> ""3465_cancel"";
""3465__buys"" -> ""3465_isOfferSorted"";
""3465_buyAllAmount"" -> ""3465_add"";
""3465_setMatchingEnabled"" -> ""3465_auth"";
""3465_make"" -> ""3465_offer"";
""3465__hide"" -> ""3465_isOfferSorted"";
""3465_offer"" -> ""3465__matcho"";
""3465__matcho"" -> ""3465_mul"";
""3465_getBuyAmount"" -> ""3465_sub"";
""3465_getPayAmount"" -> ""3465_rdiv"";
""3465__matcho"" -> ""3465_sub"";
""3465_buyAllAmount"" -> ""3465_rmul"";
""3465__buys"" -> ""3465__unsort"";
""3465_buyAllAmount"" -> ""3465_take"";
""3465_addTokenPairWhitelist"" -> ""3465_isTokenPairWhitelisted"";
""3465__sort"" -> ""3465_isActive"";
""3465_addTokenPairWhitelist"" -> ""3465_note"";
""3465_getBuyAmount"" -> ""3465_rdiv"";
""3465_buyAllAmount"" -> ""3465_wdiv"";
""3465_cancel"" -> ""3465__hide"";
""3465_buyAllAmount"" -> ""3465_getBestOffer"";
""3465__findpos"" -> ""3465_isActive"";
""3465_sellAllAmount"" -> ""3465_wdiv"";
""3465__matcho"" -> ""3465_min"";
""3465__isPricedLtOrEq"" -> ""3465_mul"";
""3465_setMinSell"" -> ""3465_auth"";
""3465_getPayAmount"" -> ""3465_getWorseOffer"";
""3465_sellAllAmount"" -> ""3465_rmul"";
""3465_getPayAmount"" -> ""3465_add"";
""3465__findpos"" -> ""3465__isPricedLtOrEq"";
""3465_del_rank"" -> ""3465_isActive"";
""3465__sort"" -> ""3465__findpos"";
""3465_offer"" -> ""3465_can_offer"";
""3465__unsort"" -> ""3465_isOfferSorted"";
""3465_cancel"" -> ""3465_isOfferSorted"";
""3465_getPayAmount"" -> ""3465_sub"";
""3465__sort"" -> ""3465_isOfferSorted"";
""3465__sort"" -> ""3465__find"";
""3465_insert"" -> ""3465__hide"";
""3465_buyAllAmount"" -> ""3465_rdiv"";
""3465__matcho"" -> ""3465_offer"";
""3465_addTokenPairWhitelist"" -> ""3465_auth"";
""3465_remTokenPairWhitelist"" -> ""3465_isTokenPairWhitelisted"";
""3465_sellAllAmount"" -> ""3465_add"";
""3465_MatchingMarket"" -> ""3465_ExpiringMarket"";
""3465__offeru"" -> ""3465_offer"";
""3465_offer"" -> ""3465_isWhitelist"";
""3465_insert"" -> ""3465_isOfferSorted"";
""3465_insert"" -> ""3465__sort"";
""3465_offer"" -> ""3465_offer"";
""3465_cancel"" -> ""3465_can_cancel"";
}
"
0x6ddb328c94350b53a155e8cad141e3b972decc01.sol,BTCCMToken,contract BTCCMToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 100000000 * (10**8); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; constructor () public { owner = msg.sender; },1,"subgraph cluster_756_BTCCMToken {
label=""BTCCMToken"";
""756_transferFrom"" [label=""transferFrom""];
""756_approve"" [label=""approve""];
""756_setOwner"" [label=""setOwner""];
""756_createTokens"" [label=""createTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_refundTokens"" [label=""refundTokens""];
""756_constructor"" [label=""constructor""];
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeAdd"";
""756_transfer"" -> ""756_transfer"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0x4900320fe47208de0b79db1273a78ab8c8f3528d.sol,Crowdsale,contract Crowdsale is Owned { using SafeMath for uint256; uint256 public fundingGoal; uint256 public price; uint256 public transferableToken; uint256 public soldToken; uint256 public deadline; uint256 public token_price; MontexToken public tokenReward; bool public fundingGoalReached = false; bool public isOpened; mapping (address => Property) public fundersProperty; struct Property { uint256 paymentEther; uint256 reservedToken; },1,"subgraph cluster_811_Crowdsale {
label=""Crowdsale"";
""811_Crowdsale"" [label=""Crowdsale""];
""811_withdrawalOwner"" [label=""withdrawalOwner""];
""811_getRemainingTimeEthToken"" [label=""getRemainingTimeEthToken""];
""811_fallback"" [label=""fallback""];
""811_start"" [label=""start""];
""811_finishCrowdSale"" [label=""finishCrowdSale""];
""811_valNowRate"" [label=""valNowRate""];
""811_getBalance"" [label=""getBalance""];
""811_start"" -> ""811_onlyOwner"";
""811_withdrawalOwner"" -> ""811_onlyOwner"";
""811_finishCrowdSale"" -> ""811_onlyOwner"";
}
"
0x75a17c63c2121447655955b55aaa1a413e750232.sol,CryderCrowdsale,contract CryderCrowdsale is Ownable { using SafeMath for uint256; address public wallet; CryderToken public presaleToken; CryderToken public token; bool public isBountyAllocated = false; mapping(address => bool) tokenRequests; uint public START_TIME = 1516467600; uint public CLOSE_TIME = 1519146000; uint256 public HARDCAP = 400000000000000000000000000; uint256 public exchangeRate = 3000; address public bounty = 0xa258Eb1817aA122acBa4Af66A7A064AE6E10552A; function () payable public { require(msg.sender == tx.origin); buyTokens(msg.sender); },1,"subgraph cluster_1198_CryderCrowdsale {
label=""CryderCrowdsale"";
""1198_CryderCrowdsale"" [label=""CryderCrowdsale""];
""1198_withdraw"" [label=""withdraw""];
""1198_allocateBounty"" [label=""allocateBounty""];
""1198_setExchangeRate"" [label=""setExchangeRate""];
""1198_setTime"" [label=""setTime""];
""1198_requestTokens"" [label=""requestTokens""];
""1198_fallback"" [label=""fallback""];
""1198_buyTokens"" [label=""buyTokens""];
""1198_fallback"" -> ""1198_buyTokens"";
""1198_withdraw"" -> ""1198_onlyOwner"";
""1198_setExchangeRate"" -> ""1198_onlyOwner"";
""1198_setTime"" -> ""1198_onlyOwner"";
}
"
0x0d61178ce25bf05c5b19dc56f30e0f10cbbe9f2b.sol,Lottery,contract Lottery is Ownable { modifier secCheck(address aContract) { require(aContract != address(contractCall)); _; },1,"subgraph cluster_556_Lottery {
label=""Lottery"";
""556_myTokens"" [label=""myTokens""];
""556_changeThreshold"" [label=""changeThreshold""];
""556_imAlive"" [label=""imAlive""];
""556_donateToDev"" [label=""donateToDev""];
""556_constructor"" [label=""constructor""];
""556_payWinner"" [label=""payWinner""];
""556_returnAnyERC20Token"" [label=""returnAnyERC20Token""];
""556_giveawayFee"" [label=""giveawayFee""];
""556_buyTickets"" [label=""buyTickets""];
""556_changeTicketPrice"" [label=""changeTicketPrice""];
""556_adminIsDead"" [label=""adminIsDead""];
""556_myDividends"" [label=""myDividends""];
""556_payWinnerManually"" [label=""payWinnerManually""];
""556_fallback"" [label=""fallback""];
""556_PRNG"" [label=""PRNG""];
""556_payWinnerManually2"" [label=""payWinnerManually2""];
""556_returnAnyERC20Token"" -> ""556_onlyOwner"";
""556_payWinnerManually2"" -> ""556_payWinner"";
""556_changeThreshold"" -> ""556_onlyOwner"";
""556_returnAnyERC20Token"" -> ""556_secCheck"";
""556_payWinner"" -> ""556_PRNG"";
""556_payWinnerManually"" -> ""556_onlyOwner"";
""556_buyTickets"" -> ""556_payWinner"";
""556_payWinnerManually"" -> ""556_payWinner"";
""556_buyTickets"" -> ""556_giveawayFee"";
""556_changeTicketPrice"" -> ""556_onlyOwner"";
""556_imAlive"" -> ""556_onlyOwner"";
""556_adminIsDead"" -> ""556_payWinnerManually2"";
}
"
0x5af9ec6df6edea0761fa841ce56c2e4deb000b31.sol,ZebiMainCrowdsale,contract ZebiMainCrowdsale is Ownable{ using SafeMath for uint256; ZebiCoin public token; uint256 currentYearMinted; uint256 calenderYearMintCap; uint256 calenderYearStart; uint256 calenderYearEnd; uint256 vestedMintStartTime; uint256 zebiZCOShare; uint256 crowdsaleZCOCap; uint256 transStartTime; ZebiCoinCrowdsale public zcc; ZebiCoinTempMgr public tempMngr; uint64 public tokenDecimals; uint256 public startTime; uint256 public endTime; uint256 public goldListPeriod; uint256 public postGoldPeriod; uint256 public minTransAmount; uint256 public ethCap; mapping(address => uint256) mainContribution; mapping(address => bool) mainCancelledList; uint256 goldPeriodCap; bool goldListPeriodFlag; mapping(address=>uint256) goldListContribution; mapping(address => bool) goldList; mapping(address => bool) kycAcceptedList; address public wallet; bool public withinRefundPeriod; mapping(address => uint256) preSaleRefundsInMainSale; uint256 public tokens; uint256 public weiAmount; uint256 public ETHtoZWeirate; uint256 public mainWeiRaised; modifier inCancelledList { require(mainCancelledList[msg.sender]); _; },1,"subgraph cluster_3258_ZebiMainCrowdsale {
label=""ZebiMainCrowdsale"";
""3258_addCancellation"" [label=""addCancellation""];
""3258_enableRefundPeriod"" [label=""enableRefundPeriod""];
""3258_fallback"" [label=""fallback""];
""3258_viewGoldList"" [label=""viewGoldList""];
""3258_getTokenAmount"" [label=""getTokenAmount""];
""3258_viewContribution"" [label=""viewContribution""];
""3258_transferTokenOwnership"" [label=""transferTokenOwnership""];
""3258_resumeMint"" [label=""resumeMint""];
""3258_addToGoldList"" [label=""addToGoldList""];
""3258_addToKYCList"" [label=""addToKYCList""];
""3258_forwardFunds"" [label=""forwardFunds""];
""3258_withdraw"" [label=""withdraw""];
""3258_validPurchase"" [label=""validPurchase""];
""3258_viewKYCAccepted"" [label=""viewKYCAccepted""];
""3258_mintvestedTokens"" [label=""mintvestedTokens""];
""3258_endTransfer"" [label=""endTransfer""];
""3258_startTransfer"" [label=""startTransfer""];
""3258_viewCancelledList"" [label=""viewCancelledList""];
""3258_takeEth"" [label=""takeEth""];
""3258_disableRefundPeriod"" [label=""disableRefundPeriod""];
""3258_buyTokens"" [label=""buyTokens""];
""3258_viewPreSaleRefundsInMainSale"" [label=""viewPreSaleRefundsInMainSale""];
""3258_removeFromKYCList"" [label=""removeFromKYCList""];
""3258_ZebiMainCrowdsale"" [label=""ZebiMainCrowdsale""];
""3258_forcedRefund"" [label=""forcedRefund""];
""3258_finishMint"" [label=""finishMint""];
""3258_mintAndAllocateZCO"" [label=""mintAndAllocateZCO""];
""3258_refund"" [label=""refund""];
""3258_removeFromGoldList"" [label=""removeFromGoldList""];
""3258_fallback"" -> ""3258_buyTokens"";
""3258_mintAndAllocateZCO"" -> ""3258_onlyOwner"";
""3258_removeFromKYCList"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inCancelledList"";
""3258_forcedRefund"" -> ""3258_onlyOwner"";
""3258_removeFromGoldList"" -> ""3258_onlyOwner"";
""3258_endTransfer"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_forwardFunds"";
""3258_withdraw"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_validPurchase"";
""3258_startTransfer"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inRefundPeriod"";
""3258_finishMint"" -> ""3258_onlyOwner"";
""3258_transferTokenOwnership"" -> ""3258_onlyOwner"";
""3258_enableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_mintvestedTokens"" -> ""3258_onlyOwner"";
""3258_disableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_addToGoldList"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_getTokenAmount"";
""3258_addCancellation"" -> ""3258_onlyOwner"";
""3258_addToKYCList"" -> ""3258_onlyOwner"";
""3258_resumeMint"" -> ""3258_onlyOwner"";
}
"
0x5c89736e9454200141b80c37eb28eaceca2ce8cb.sol,CherryToken,"contract CherryToken is ERC223, ERCAddressFrozenFund { using SafeMath for uint; string internal _name; string internal _symbol; uint8 internal _decimals; uint256 internal _totalSupply; address public fundsWallet; uint256 internal fundsWalletChanged; mapping (address => uint256) internal balances; mapping (address => mapping (address => uint256)) internal allowed; constructor() public { _symbol = ; _name = ; _decimals = 8; _totalSupply = 10000000000000000; balances[msg.sender] = _totalSupply; fundsWallet = msg.sender; owner = msg.sender; fundsWalletChanged = 0; }",1,"subgraph cluster_1340_CherryToken {
label=""CherryToken"";
""1340_transferFrom"" [label=""transferFrom""];
""1340_totalSupply"" [label=""totalSupply""];
""1340_decreaseApproval"" [label=""decreaseApproval""];
""1340_changeFundsWallet"" [label=""changeFundsWallet""];
""1340_fallback"" [label=""fallback""];
""1340_mintToken"" [label=""mintToken""];
""1340_burnToken"" [label=""burnToken""];
""1340_name"" [label=""name""];
""1340_approve"" [label=""approve""];
""1340_decimals"" [label=""decimals""];
""1340_allowance"" [label=""allowance""];
""1340_increaseApproval"" [label=""increaseApproval""];
""1340_isContract"" [label=""isContract""];
""1340_transferdata"" [label=""transferdata""];
""1340_transferMultiple"" [label=""transferMultiple""];
""1340_transfer"" [label=""transfer""];
""1340_symbol"" [label=""symbol""];
""1340_balanceOf"" [label=""balanceOf""];
""1340_constructor"" [label=""constructor""];
""1340_transfer"" -> ""1340_isContract"";
""1340_transferFrom"" -> ""1340_isContract"";
""1340_transferdata"" -> ""1340_isContract"";
""1340_transferMultiple"" -> ""1340_isContract"";
}
"
0x031e8de47dee0fdde1969a93b64bb8f8fbcba65d.sol,lockEtherPay,"contract lockEtherPay is Ownable { using SafeMath for uint256; token token_reward; address public beneficiary; bool public isLocked = false; bool public isReleased = false; uint256 public start_time; uint256 public end_time; uint256 public fifty_two_weeks = 30412800; event TokenReleased(address beneficiary, uint256 token_amount); constructor() public{ token_reward = token(0xAa1ae5e57dc05981D83eC7FcA0b3c7ee2565B7D6); beneficiary = 0xae09643734a0A0054fB4C1B376Ea95cd2d552dee; }",1,"subgraph cluster_309_lockEtherPay {
label=""lockEtherPay"";
""309_lockOver"" [label=""lockOver""];
""309_tokenBalance"" [label=""tokenBalance""];
""309_constructor"" [label=""constructor""];
""309_lock"" [label=""lock""];
""309_release"" [label=""release""];
""309_release"" -> ""309_lockOver"";
""309_release"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_tokenBalance"";
""309_release"" -> ""309_tokenBalance"";
}
"
0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol,TwoCoinsOneMoonGame,contract TwoCoinsOneMoonGame { struct Bettor { address account; uint256 amount; },1,"subgraph cluster_536_TwoCoinsOneMoonGame {
label=""TwoCoinsOneMoonGame"";
""536_getBetAmount"" [label=""getBetAmount""];
""536_constructor"" [label=""constructor""];
""536_addEvent"" [label=""addEvent""];
""536_depositBalance"" [label=""depositBalance""];
""536_putMessage"" [label=""putMessage""];
""536_checkMoon"" [label=""checkMoon""];
""536_withdraw"" [label=""withdraw""];
""536_betRedCoin"" [label=""betRedCoin""];
""536_betBlueCoin"" [label=""betBlueCoin""];
""536_burstBubble"" [label=""burstBubble""];
""536_checkMoon"" -> ""536_addEvent"";
""536_betBlueCoin"" -> ""536_getBetAmount"";
""536_burstBubble"" -> ""536_depositBalance"";
""536_burstBubble"" -> ""536_addEvent"";
""536_betRedCoin"" -> ""536_checkMoon"";
""536_checkMoon"" -> ""536_burstBubble"";
""536_betBlueCoin"" -> ""536_checkMoon"";
""536_betRedCoin"" -> ""536_getBetAmount"";
}
"
0x3a2fd07ec2ad6f355f93af695a7cf858f5967b78.sol,MTVote,contract MTVote is Ownable { address public TVTokenAddress; address public TVCrowdsaleAddress; address public manager; address public wallet; address internal checkAndBuySender; bytes4 constant TOKEN_RECEIVED = bytes4(keccak256()); bool pause = false; mapping(uint => uint) public targets; uint public targetIdsSize = 0; uint[] public targetIds; modifier onlyOwnerOrManager() { require(msg.sender == owner || manager == msg.sender); _; },1,"subgraph cluster_515_MTVote {
label=""MTVote"";
""515_changeTVTokenAddress"" [label=""changeTVTokenAddress""];
""515_convertBytesToBytes32"" [label=""convertBytesToBytes32""];
""515_toBytes"" [label=""toBytes""];
""515_setManager"" [label=""setManager""];
""515_changeTVCrowdsaleAddress"" [label=""changeTVCrowdsaleAddress""];
""515_setPause"" [label=""setPause""];
""515_bytesToUint"" [label=""bytesToUint""];
""515_constructor"" [label=""constructor""];
""515_clear"" [label=""clear""];
""515_onTokenReceived"" [label=""onTokenReceived""];
""515_changeAndVote"" [label=""changeAndVote""];
""515_setManager"" -> ""515_onlyOwner"";
""515_clear"" -> ""515_onlyOwnerOrManager"";
""515_onTokenReceived"" -> ""515_convertBytesToBytes32"";
""515_changeAndVote"" -> ""515_toBytes"";
""515_changeTVCrowdsaleAddress"" -> ""515_onlyOwnerOrManager"";
""515_setPause"" -> ""515_onlyOwnerOrManager"";
""515_changeTVTokenAddress"" -> ""515_onlyOwnerOrManager"";
}
"
0x4d0dc912fcad3b070d187ab8ac89e63d2b532b8a.sol,BliBliToken,"contract BliBliToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 625; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_849_BliBliToken {
label=""BliBliToken"";
""849_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""849_transferETH"" [label=""transferETH""];
""849_fallback"" [label=""fallback""];
""849_startFunding"" [label=""startFunding""];
""849_decreaseSupply"" [label=""decreaseSupply""];
""849_allocateToken"" [label=""allocateToken""];
""849_formatDecimals"" [label=""formatDecimals""];
""849_changeOwner"" [label=""changeOwner""];
""849_migrate"" [label=""migrate""];
""849_setMigrateContract"" [label=""setMigrateContract""];
""849_increaseSupply"" [label=""increaseSupply""];
""849_stopFunding"" [label=""stopFunding""];
""849_BliBliToken"" [label=""BliBliToken""];
""849_fallback"" -> ""849_safeMult"";
""849_fallback"" -> ""849_safeAdd"";
""849_allocateToken"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_formatDecimals"";
""849_decreaseSupply"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_safeAdd"";
""849_increaseSupply"" -> ""849_safeAdd"";
""849_transferETH"" -> ""849_isOwner"";
""849_changeOwner"" -> ""849_isOwner"";
""849_decreaseSupply"" -> ""849_formatDecimals"";
""849_stopFunding"" -> ""849_isOwner"";
""849_setTokenExchangeRate"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_formatDecimals"";
""849_BliBliToken"" -> ""849_formatDecimals"";
""849_setMigrateContract"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_safeMult"";
""849_decreaseSupply"" -> ""849_safeSubtract"";
""849_startFunding"" -> ""849_isOwner"";
""849_migrate"" -> ""849_safeAdd"";
}
"
0x56ffb3c578906ba9658fccb052fc1a5672275b6a.sol,OpiriaCrowdsale,"contract OpiriaCrowdsale is TimedPresaleCrowdsale, MintedCrowdsale, TokenCappedCrowdsale { using SafeMath for uint256; uint256 public presaleWeiLimit; address public tokensWallet; uint256 public totalBonus = 0; bool public hiddenCapTriggered; uint16 public additionalBonusPercent = 0; mapping(address => uint256) public bonusOf; constructor(ERC20 _token, uint16 _initialEtherUsdRate, address _wallet, address _tokensWallet, uint256 _presaleOpeningTime, uint256 _presaleClosingTime, uint256 _openingTime, uint256 _closingTime ) public TimedPresaleCrowdsale(_presaleOpeningTime, _presaleClosingTime, _openingTime, _closingTime) Crowdsale(_initialEtherUsdRate, _wallet, _token) { setEtherUsdRate(_initialEtherUsdRate); tokensWallet = _tokensWallet; require(PausableToken(token).paused()); }",1,"subgraph cluster_2370_OpiriaCrowdsale {
label=""OpiriaCrowdsale"";
""2370_claimReservedTokens"" [label=""claimReservedTokens""];
""2370_setEtherUsdRate"" [label=""setEtherUsdRate""];
""2370__getTokenAmount"" [label=""_getTokenAmount""];
""2370_constructor"" [label=""constructor""];
""2370_addBonusBatch"" [label=""addBonusBatch""];
""2370__preValidatePurchase"" [label=""_preValidatePurchase""];
""2370_triggerHiddenCap"" [label=""triggerHiddenCap""];
""2370_sendTokensTo"" [label=""sendTokensTo""];
""2370_increaseCap"" [label=""increaseCap""];
""2370_withdrawBonus"" [label=""withdrawBonus""];
""2370__getBonusAmount"" [label=""_getBonusAmount""];
""2370_unlockTokenTransfers"" [label=""unlockTokenTransfers""];
""2370_distributeBonus"" [label=""distributeBonus""];
""2370__processPurchase"" [label=""_processPurchase""];
""2370_sendTokensToBatch"" [label=""sendTokensToBatch""];
""2370__saveBonus"" [label=""_saveBonus""];
""2370__getBonusPercent"" [label=""_getBonusPercent""];
""2370_finalization"" [label=""finalization""];
""2370_setAdditionalBonusPercent"" [label=""setAdditionalBonusPercent""];
""2370__preValidatePurchase"" -> ""2370__getBonusAmount"";
""2370_claimReservedTokens"" -> ""2370_onlyOwner"";
""2370__preValidatePurchase"" -> ""2370__getTokenAmount"";
""2370_unlockTokenTransfers"" -> ""2370_onlyOwner"";
""2370_increaseCap"" -> ""2370_onlyOwner"";
""2370_triggerHiddenCap"" -> ""2370_onlyOwner"";
""2370_sendTokensToBatch"" -> ""2370_sendTokensTo"";
""2370_setEtherUsdRate"" -> ""2370_onlyOwner"";
""2370_addBonusBatch"" -> ""2370_notExceedingSaleCap"";
""2370_distributeBonus"" -> ""2370_onlyOwner"";
""2370_sendTokensTo"" -> ""2370_onlyOwner"";
""2370_finalization"" -> ""2370_finalization"";
""2370__preValidatePurchase"" -> ""2370_isPresale"";
""2370_setAdditionalBonusPercent"" -> ""2370_onlyOwner"";
""2370__saveBonus"" -> ""2370__getBonusAmount"";
""2370__preValidatePurchase"" -> ""2370_notExceedingSaleCap"";
""2370__getBonusAmount"" -> ""2370__getBonusPercent"";
""2370_addBonusBatch"" -> ""2370_onlyOwner"";
""2370_constructor"" -> ""2370_constructor"";
""2370__getBonusPercent"" -> ""2370_isPresale"";
""2370__processPurchase"" -> ""2370__deliverTokens"";
""2370__preValidatePurchase"" -> ""2370__preValidatePurchase"";
""2370_finalization"" -> ""2370__deliverTokens"";
""2370_constructor"" -> ""2370_setEtherUsdRate"";
""2370_withdrawBonus"" -> ""2370__deliverTokens"";
""2370_sendTokensTo"" -> ""2370_notExceedingSaleCap"";
""2370_sendTokensToBatch"" -> ""2370_onlyOwner"";
""2370__processPurchase"" -> ""2370__saveBonus"";
""2370_distributeBonus"" -> ""2370__deliverTokens"";
""2370_claimReservedTokens"" -> ""2370__deliverTokens"";
}
"
0x48ec79ffdd733e72046533baafcc19864a976da0.sol,Richer3D,"contract Richer3D { using SafeMath for *; string constant public name = ; string constant public symbol = ; address constant private sysAdminAddress = 0x4A3913ce9e8882b418a0Be5A43d2C319c3F0a7Bd; address constant private sysInviterAddress = 0xC5E41EC7fa56C0656Bc6d7371a8706Eb9dfcBF61; address constant private sysDevelopAddress = 0xCf3A25b73A493F96C15c8198319F0218aE8cAA4A; address constant private p3dInviterAddress = 0x82Fc4514968b0c5FdDfA97ed005A01843d0E117d; uint256 constant cycleTime = 20 minutes; uint256 private roundNumber; uint256 private dayNumber; uint256 private totalPlayerNumber; uint256 private platformBalance; mapping(uint256=>DataModal.RoundInfo) private rInfoXrID; mapping(address=>DataModal.PlayerInfo) private pInfoXpAdd; mapping(address=>uint256) private pIDXpAdd; mapping(uint256=>address) private pAddXpID; HourglassInterface constant p3dContract = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe); mapping(uint256=>uint256) private p3dDividesXroundID; event newPlayerJoinGameEvent(address indexed _address,uint256 indexed _amount,bool indexed _JoinWithEth,uint256 _timestamp); event calculateTargetEvent(uint256 indexed _roundID); constructor() public { dayNumber = 1; }",1,"subgraph cluster_2609_Richer3D {
label=""Richer3D"";
""2609_getTransformRate"" [label=""getTransformRate""];
""2609_getPlatformBalance"" [label=""getPlatformBalance""];
""2609_getCurrentFieldBalanceAndTarget"" [label=""getCurrentFieldBalanceAndTarget""];
""2609_withdrawForAdmin"" [label=""withdrawForAdmin""];
""2609_getUserAddressList"" [label=""getUserAddressList""];
""2609_getDailyTarget"" [label=""getDailyTarget""];
""2609_constructor"" [label=""constructor""];
""2609_getIncreaseBalance"" [label=""getIncreaseBalance""];
""2609_getTransformMineInDay"" [label=""getTransformMineInDay""];
""2609_joinGameWithInviterID"" [label=""joinGameWithInviterID""];
""2609_getBounsEarnings"" [label=""getBounsEarnings""];
""2609_getMineInfoInDay"" [label=""getMineInfoInDay""];
""2609_calculateTotalMinePay"" [label=""calculateTotalMinePay""];
""2609_sendBalanceForDevelop"" [label=""sendBalanceForDevelop""];
""2609_p3dWithdrawForAdmin"" [label=""p3dWithdrawForAdmin""];
""2609_getHoldEarnings"" [label=""getHoldEarnings""];
""2609_getUserBalance"" [label=""getUserBalance""];
""2609_joinGameWithBalance"" [label=""joinGameWithBalance""];
""2609_getUserProperty"" [label=""getUserProperty""];
""2609_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""2609_getUserIDAndInviterEarnings"" [label=""getUserIDAndInviterEarnings""];
""2609_calculateTarget"" [label=""calculateTarget""];
""2609_fallback"" [label=""fallback""];
""2609_getP3DInfo"" [label=""getP3DInfo""];
""2609_getDefendPlayerList"" [label=""getDefendPlayerList""];
""2609_getAttackPlayerList"" [label=""getAttackPlayerList""];
""2609_registerWithInviterID"" [label=""registerWithInviterID""];
""2609_getUsersInfo"" [label=""getUsersInfo""];
""2609_getDataOfGame"" [label=""getDataOfGame""];
""2609_getBounsWithRoundID"" [label=""getBounsWithRoundID""];
""2609_getUserP3DDivEarnings"" [label=""getUserP3DDivEarnings""];
""2609_playerWithdraw"" [label=""playerWithdraw""];
""2609_buyCore"" [label=""buyCore""];
""2609_getDataOfGame"" -> ""2609_getBounsWithRoundID"";
""2609_joinGameWithBalance"" -> ""2609_getUserBalance"";
""2609_getCurrentFieldBalanceAndTarget"" -> ""2609_getDailyTarget"";
""2609_getUserBalance"" -> ""2609_getTransformMineInDay"";
""2609_getUserBalance"" -> ""2609_getUserP3DDivEarnings"";
""2609_getHoldEarnings"" -> ""2609_getMineInfoInDay"";
""2609_getCurrentFieldBalanceAndTarget"" -> ""2609_getIncreaseBalance"";
""2609_calculateTotalMinePay"" -> ""2609_getMineInfoInDay"";
""2609_getUserProperty"" -> ""2609_getUserBalance"";
""2609_getUsersInfo"" -> ""2609_getTransformMineInDay"";
""2609_calculateTarget"" -> ""2609_getDailyTarget"";
""2609_getDataOfGame"" -> ""2609_calculateTotalMinePay"";
""2609_getTransformRate"" -> ""2609_getMineInfoInDay"";
""2609_getCurrentFieldBalanceAndTarget"" -> ""2609_getBounsWithRoundID"";
""2609_getBounsEarnings"" -> ""2609_getBounsWithRoundID"";
""2609_calculateTarget"" -> ""2609_getBounsWithRoundID"";
""2609_calculateTarget"" -> ""2609_getIncreaseBalance"";
""2609_joinGameWithInviterID"" -> ""2609_registerWithInviterID"";
""2609_getDailyTarget"" -> ""2609_calculateTotalMinePay"";
""2609_getUserBalance"" -> ""2609_getHoldEarnings"";
""2609_getUsersInfo"" -> ""2609_getMineInfoInDay"";
""2609_getTransformMineInDay"" -> ""2609_getMineInfoInDay"";
""2609_getBounsWithRoundID"" -> ""2609_getTransformMineInDay"";
""2609_getTransformMineInDay"" -> ""2609_getTransformRate"";
""2609_getUsersInfo"" -> ""2609_getUserBalance"";
""2609_calculateTarget"" -> ""2609_sendBalanceForDevelop"";
""2609_getUserProperty"" -> ""2609_getMineInfoInDay"";
""2609_playerWithdraw"" -> ""2609_getUserBalance"";
""2609_getUserProperty"" -> ""2609_getTransformRate"";
""2609_getUsersInfo"" -> ""2609_getTransformRate"";
""2609_sendBalanceForDevelop"" -> ""2609_getBounsWithRoundID"";
""2609_getCurrentRoundInfo"" -> ""2609_getMineInfoInDay"";
""2609_joinGameWithInviterID"" -> ""2609_buyCore"";
""2609_getDataOfGame"" -> ""2609_getUserBalance"";
""2609_getUserProperty"" -> ""2609_getTransformMineInDay"";
""2609_joinGameWithBalance"" -> ""2609_buyCore"";
""2609_getUserBalance"" -> ""2609_getBounsEarnings"";
""2609_getHoldEarnings"" -> ""2609_getBounsWithRoundID"";
""2609_getDataOfGame"" -> ""2609_getIncreaseBalance"";
}
"
0x4c84949b55f21a376dba12e732958ede8b033b0e.sol,TokenVesting,contract TokenVesting { using SafeMath for uint256; struct VestingGrant { bool isGranted; address issuer; address beneficiary; uint256 grantJiffys; uint256 startTimestamp; uint256 cliffTimestamp; uint256 endTimestamp; bool isRevocable; uint256 releasedJiffys; },1,"subgraph cluster_591_TokenVesting {
label=""TokenVesting"";
""591_initialize"" [label=""initialize""];
""591_TokenVesting"" [label=""TokenVesting""];
""591_getGrantBalanceOf"" [label=""getGrantBalanceOf""];
""591_getGrantBeneficiaries"" [label=""getGrantBeneficiaries""];
""591_fallback"" [label=""fallback""];
""591_revoke"" [label=""revoke""];
""591_getGrantBalance"" [label=""getGrantBalance""];
""591_release"" [label=""release""];
""591_grant"" [label=""grant""];
""591_releaseFor"" [label=""releaseFor""];
""591_releaseFor"" -> ""591_requireIsOperational"";
""591_getGrantBalance"" -> ""591_getGrantBalanceOf"";
""591_grant"" -> ""591_releaseFor"";
""591_release"" -> ""591_releaseFor"";
""591_initialize"" -> ""591_grant"";
""591_revoke"" -> ""591_requireIsOperational"";
""591_grant"" -> ""591_requireIsOperational"";
}
"
0x8615ddfe9d4c9e58abff01c999731f3e9e556e80.sol,FrozenToken,"contract FrozenToken is ERC20Token, ITokenRecipient { mapping (address => bool) frozeds; uint256 public frozedCount; bool public freezeEnabled = false; bool public autoFreeze = false; bool public mintFinished = false; event Freeze(address indexed wallet); event UnFreeze(address indexed wallet); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); event Mint(address indexed sender, address indexed wallet, uint256 amount); event ReceiveTokens(address indexed spender, address indexed token, uint256 value, bytes extraData); event ApproveAndCall(address indexed spender, uint256 value, bytes extraData); event Burn(address indexed sender, uint256 amount); event MintFinished(address indexed spender); modifier notFreeze { require(frozeds[msg.sender] == false || freezeEnabled == false); _; }",1,"subgraph cluster_1885_FrozenToken {
label=""FrozenToken"";
""1885_approveAndCall"" [label=""approveAndCall""];
""1885_transferFrom"" [label=""transferFrom""];
""1885_increaseApproval"" [label=""increaseApproval""];
""1885_isFreeze"" [label=""isFreeze""];
""1885_transfer"" [label=""transfer""];
""1885_burn"" [label=""burn""];
""1885_decreaseApproval"" [label=""decreaseApproval""];
""1885_unFreeze"" [label=""unFreeze""];
""1885_freeze"" [label=""freeze""];
""1885_mint"" [label=""mint""];
""1885_updAutoFreeze"" [label=""updAutoFreeze""];
""1885_receiveApproval"" [label=""receiveApproval""];
""1885_mintFinish"" [label=""mintFinish""];
""1885_approve"" [label=""approve""];
""1885_updFreezeEnabled"" [label=""updFreezeEnabled""];
""1885_mint"" -> ""1885_validAddress"";
""1885_updAutoFreeze"" -> ""1885_authLevel"";
""1885_mint"" -> ""1885_authLevel"";
""1885_burn"" -> ""1885_greaterThanZero"";
""1885_receiveApproval"" -> ""1885_greaterThanZero"";
""1885_approveAndCall"" -> ""1885_approve"";
""1885_freeze"" -> ""1885_notThis"";
""1885_mintFinish"" -> ""1885_onlyOwner"";
""1885_transfer"" -> ""1885_notFreeze"";
""1885_approveAndCall"" -> ""1885_validAddress"";
""1885_freeze"" -> ""1885_validAddress"";
""1885_transferFrom"" -> ""1885_transferFrom"";
""1885_decreaseApproval"" -> ""1885_notFreezeFrom"";
""1885_mint"" -> ""1885_isAuthorized"";
""1885_burn"" -> ""1885_isFreeze"";
""1885_transferFrom"" -> ""1885_notFreezeFrom"";
""1885_burn"" -> ""1885_validBalance"";
""1885_receiveApproval"" -> ""1885_validAddress"";
""1885_increaseApproval"" -> ""1885_notFreezeFrom"";
""1885_increaseApproval"" -> ""1885_increaseApproval"";
""1885_approve"" -> ""1885_notFreezeFrom"";
""1885_mint"" -> ""1885_greaterThanZero"";
""1885_unFreeze"" -> ""1885_authLevel"";
""1885_mint"" -> ""1885_isFreeze"";
""1885_freeze"" -> ""1885_notOwner"";
""1885_freeze"" -> ""1885_authLevel"";
""1885_decreaseApproval"" -> ""1885_decreaseApproval"";
""1885_isFreeze"" -> ""1885_validAddress"";
""1885_approve"" -> ""1885_approve"";
""1885_approveAndCall"" -> ""1885_greaterThanZero"";
""1885_transfer"" -> ""1885_transfer"";
""1885_updFreezeEnabled"" -> ""1885_authLevel"";
""1885_mint"" -> ""1885_canMint"";
""1885_unFreeze"" -> ""1885_validAddress"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,SaleClockAuction,"contract SaleClockAuction is ClockAuction { bool public isSaleClockAuction = true; uint256 public gen0SaleCount; uint256[5] public lastGen0SalePrices; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_3179_SaleClockAuction {
label=""SaleClockAuction"";
""3179_getSeller"" [label=""getSeller""];
""3179_constructor"" [label=""constructor""];
""3179_isSaleClockAuction"" [label=""isSaleClockAuction""];
""3179_createAuction"" [label=""createAuction""];
""3179_bid"" [label=""bid""];
""3179_computeCut"" [label=""computeCut""];
""3179_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""3179_averageGen0SalePrice"" [label=""averageGen0SalePrice""];
""3179_bidGift"" [label=""bidGift""];
""3179_bidGift"" -> ""3179__transfer"";
""3179_constructor"" -> ""3179_constructor"";
""3179_bidGift"" -> ""3179__bid"";
""3179_createAuction"" -> ""3179__escrow"";
""3179_computeCut"" -> ""3179__computeCut"";
""3179_bid"" -> ""3179__bid"";
""3179_createAuction"" -> ""3179__addAuction"";
""3179_bid"" -> ""3179__transfer"";
}
"
0x3fde21c4118a7ac77e113920f76f68edd4fc144d.sol,BEBmining,contract BEBmining is Ownable{ tokenTransfer public bebTokenTransfer; uint8 decimals = 18; struct BebUser { address customerAddr; uint256 amount; uint256 bebtime; uint256 interest; },1,"subgraph cluster_876_BEBmining {
label=""BEBmining"";
""876_TotalRevenue"" [label=""TotalRevenue""];
""876_fallback"" [label=""fallback""];
""876_querYrevenue"" [label=""querYrevenue""];
""876_BebTomining"" [label=""BebTomining""];
""876_sellBeb"" [label=""sellBeb""];
""876_freeSettlement"" [label=""freeSettlement""];
""876_queryRate"" [label=""queryRate""];
""876_withdrawAmount"" [label=""withdrawAmount""];
""876_setioc"" [label=""setioc""];
""876_buyBeb"" [label=""buyBeb""];
""876_ETHwithdrawal"" [label=""ETHwithdrawal""];
""876_BEBmining"" [label=""BEBmining""];
""876_getTokenBalance"" [label=""getTokenBalance""];
""876_ModifyexchangeRate"" [label=""ModifyexchangeRate""];
""876_querBalance"" [label=""querBalance""];
""876_setioc"" -> ""876_onlyOwner"";
""876_ModifyexchangeRate"" -> ""876_onlyOwner"";
""876_withdrawAmount"" -> ""876_getTokenBalance"";
""876_ETHwithdrawal"" -> ""876_onlyOwner"";
""876_buyBeb"" -> ""876_getTokenBalance"";
""876_withdrawAmount"" -> ""876_onlyOwner"";
}
"
0x418d25d31c0a3c5559d8aa0c1c17d9cb3af9f59e.sol,Deposit,contract Deposit is Ownable { using SafeMath for uint256; struct ClientDeposit { uint256 balance; uint256 nextPaymentTotalAmount; uint256 nextPaymentDepositCommission; uint256 nextPaymentPlatformCommission; bool exists; bool isBlocked; },1,"subgraph cluster_593_Deposit {
label=""Deposit"";
""593_fromPaymentGateway"" [label=""fromPaymentGateway""];
""593_transferEthTo"" [label=""transferEthTo""];
""593_addClient"" [label=""addClient""];
""593_handleIncomingPayment"" [label=""handleIncomingPayment""];
""593_constructor"" [label=""constructor""];
""593_claim"" [label=""claim""];
""593_getClientBalance"" [label=""getClientBalance""];
""593_repeatedPayment"" [label=""repeatedPayment""];
""593_fallback"" [label=""fallback""];
""593_isClient"" [label=""isClient""];
""593_addEth"" [label=""addEth""];
""593_addClient"" -> ""593_onlyOwner"";
""593_fromPaymentGateway"" -> ""593_handleIncomingPayment"";
""593_claim"" -> ""593_onlyOwner"";
""593_transferEthTo"" -> ""593_onlyOwner"";
""593_fallback"" -> ""593_handleIncomingPayment"";
""593_isClient"" -> ""593_onlyOwner"";
""593_addEth"" -> ""593_onlyOwner"";
""593_repeatedPayment"" -> ""593_onlyOwner"";
}
"
0x77ceff4173a56cd22b6184fa59c668b364ae55b8.sol,CarTaxiIco,"contract CarTaxiIco is SafeMath { CarTaxiToken public cartaxiToken; AbstractToken public preIcoToken; enum State{ Pause, Init, Running, Stopped, Migrated }",1,"subgraph cluster_1433_CarTaxiIco {
label=""CarTaxiIco"";
""1433_setNewManager"" [label=""setNewManager""];
""1433_withdrawEther"" [label=""withdrawEther""];
""1433_fallback"" [label=""fallback""];
""1433_withdrawAllEther"" [label=""withdrawAllEther""];
""1433_burnTokens"" [label=""burnTokens""];
""1433_CarTaxiIco"" [label=""CarTaxiIco""];
""1433_sendTokensToFounders"" [label=""sendTokensToFounders""];
""1433_importTokens"" [label=""importTokens""];
""1433_buyTokens"" [label=""buyTokens""];
""1433_setBountyOwner"" [label=""setBountyOwner""];
""1433_setState"" [label=""setState""];
""1433_sendTokensToBountyOwner"" [label=""sendTokensToBountyOwner""];
""1433_init"" [label=""init""];
""1433_sendTokensToFounders"" -> ""1433_mulByFraction"";
""1433_sendTokensToBountyOwner"" -> ""1433_onlyManager"";
""1433_buyTokens"" -> ""1433_add"";
""1433_importTokens"" -> ""1433_add"";
""1433_withdrawEther"" -> ""1433_onlyManager"";
""1433_sendTokensToFounders"" -> ""1433_add"";
""1433_withdrawAllEther"" -> ""1433_onlyManager"";
""1433_fallback"" -> ""1433_buyTokens"";
""1433_buyTokens"" -> ""1433_dateBonus"";
""1433_importTokens"" -> ""1433_presaleVolumeBonus"";
""1433_buyTokens"" -> ""1433_mulByFraction"";
""1433_fallback"" -> ""1433_onIcoRunning"";
""1433_sendTokensToBountyOwner"" -> ""1433_mulByFraction"";
""1433_sendTokensToFounders"" -> ""1433_whenInitialized"";
""1433_setBountyOwner"" -> ""1433_onlyManager"";
""1433_buyTokens"" -> ""1433_volumeBonus"";
""1433_burnTokens"" -> ""1433_notMigrated"";
""1433_init"" -> ""1433_onlyManager"";
""1433_sendTokensToBountyOwner"" -> ""1433_whenInitialized"";
""1433_setState"" -> ""1433_onlyManager"";
""1433_sendTokensToBountyOwner"" -> ""1433_add"";
""1433_burnTokens"" -> ""1433_onlyManager"";
""1433_setNewManager"" -> ""1433_onlyManager"";
""1433_sendTokensToFounders"" -> ""1433_onlyManager"";
}
"
0x4c84949b55f21a376dba12e732958ede8b033b0e.sol,TokenVesting,contract TokenVesting { using SafeMath for uint256; struct VestingGrant { bool isGranted; address issuer; address beneficiary; uint256 grantJiffys; uint256 startTimestamp; uint256 cliffTimestamp; uint256 endTimestamp; bool isRevocable; uint256 releasedJiffys; },1,"subgraph cluster_591_TokenVesting {
label=""TokenVesting"";
""591_initialize"" [label=""initialize""];
""591_TokenVesting"" [label=""TokenVesting""];
""591_getGrantBalanceOf"" [label=""getGrantBalanceOf""];
""591_getGrantBeneficiaries"" [label=""getGrantBeneficiaries""];
""591_fallback"" [label=""fallback""];
""591_revoke"" [label=""revoke""];
""591_getGrantBalance"" [label=""getGrantBalance""];
""591_release"" [label=""release""];
""591_grant"" [label=""grant""];
""591_releaseFor"" [label=""releaseFor""];
""591_releaseFor"" -> ""591_requireIsOperational"";
""591_getGrantBalance"" -> ""591_getGrantBalanceOf"";
""591_grant"" -> ""591_releaseFor"";
""591_release"" -> ""591_releaseFor"";
""591_initialize"" -> ""591_grant"";
""591_revoke"" -> ""591_requireIsOperational"";
""591_grant"" -> ""591_requireIsOperational"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,GoldBackedToken,"contract GoldBackedToken is Ownable, SafeMath, ERC20, Pausable { event Transfer(address indexed from, address indexed to, uint value); event Approval(address indexed owner, address indexed spender, uint value); event DeductFees(address indexed owner,uint256 amount); event TokenMinted(address destination, uint256 amount); event TokenBurned(address source, uint256 amount); string public name = ; string public symbol = ; uint256 constant public decimals = 18; uint256 constant public hgtDecimals = 8; uint256 constant public allocationPool = 1 * 10**9 * 10**hgtDecimals; uint256 constant public maxAllocation = 38 * 10**5 * 10**decimals; uint256 public totAllocation; address public feeCalculator; address public HGT; function setFeeCalculator(address newFC) onlyOwner { feeCalculator = newFC; }",1,"subgraph cluster_2164_GoldBackedToken {
label=""GoldBackedToken"";
""2164_update"" [label=""update""];
""2164_mintTokens"" [label=""mintTokens""];
""2164_updatedBalance"" [label=""updatedBalance""];
""2164_balanceOf"" [label=""balanceOf""];
""2164_GoldBackedToken"" [label=""GoldBackedToken""];
""2164_calcFees"" [label=""calcFees""];
""2164_burnTokens"" [label=""burnTokens""];
""2164_approve"" [label=""approve""];
""2164_addAllocationPartOne"" [label=""addAllocationPartOne""];
""2164_allowance"" [label=""allowance""];
""2164_transfer"" [label=""transfer""];
""2164_addAllocationPartTwo"" [label=""addAllocationPartTwo""];
""2164_setHGT"" [label=""setHGT""];
""2164_setMinter"" [label=""setMinter""];
""2164_aotLength"" [label=""aotLength""];
""2164_parentFees"" [label=""parentFees""];
""2164_parentChange"" [label=""parentChange""];
""2164_currentAllocationLength"" [label=""currentAllocationLength""];
""2164_setFeeCalculator"" [label=""setFeeCalculator""];
""2164_transferFrom"" [label=""transferFrom""];
""2164_partAllocationLength"" [label=""partAllocationLength""];
""2164_mintTokens"" -> ""2164_update"";
""2164_mintTokens"" -> ""2164_safeAdd"";
""2164_approve"" -> ""2164_whenNotPaused"";
""2164_transfer"" -> ""2164_safeAdd"";
""2164_transfer"" -> ""2164_update"";
""2164_transferFrom"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartTwo"" -> ""2164_calcFees"";
""2164_transfer"" -> ""2164_safeSub"";
""2164_setFeeCalculator"" -> ""2164_onlyOwner"";
""2164_parentChange"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartTwo"" -> ""2164_onlyOwner"";
""2164_setHGT"" -> ""2164_onlyOwner"";
""2164_addAllocationPartOne"" -> ""2164_onlyOwner"";
""2164_transfer"" -> ""2164_whenNotPaused"";
""2164_addAllocationPartOne"" -> ""2164_calcFees"";
""2164_update"" -> ""2164_updatedBalance"";
""2164_parentFees"" -> ""2164_whenNotPaused"";
""2164_transferFrom"" -> ""2164_update"";
""2164_updatedBalance"" -> ""2164_calcFees"";
""2164_burnTokens"" -> ""2164_safeSub"";
""2164_burnTokens"" -> ""2164_update"";
""2164_transferFrom"" -> ""2164_safeAdd"";
""2164_transferFrom"" -> ""2164_safeSub"";
""2164_parentFees"" -> ""2164_update"";
""2164_balanceOf"" -> ""2164_updatedBalance"";
""2164_setMinter"" -> ""2164_onlyOwner"";
}
"
0xa304100e0d17a972f34ed8a961034ce2fc47f9ca.sol,FomoBet,contract FomoBet { using SafeMath for uint; struct bet { address maker; address taker; uint256 round; bool longOrShort; bool validated; uint256 betEnd; uint256 betSize; },1,"subgraph cluster_1090_FomoBet {
label=""FomoBet"";
""1090_vaultToWallet"" [label=""vaultToWallet""];
""1090_fallback"" [label=""fallback""];
""1090_getbetsInfo"" [label=""getbetsInfo""];
""1090_fomoroundInfo"" [label=""fomoroundInfo""];
""1090_addToExistingOffer"" [label=""addToExistingOffer""];
""1090_removeFromExistingOffer"" [label=""removeFromExistingOffer""];
""1090_fomoround"" [label=""fomoround""];
""1090_getOfferInfo"" [label=""getOfferInfo""];
""1090_validateBet"" [label=""validateBet""];
""1090_death"" [label=""death""];
""1090_setupOffer"" [label=""setupOffer""];
""1090_takeOffer"" [label=""takeOffer""];
""1090_validateBet"" -> ""1090_fomoroundInfo"";
}
"
0x00c315ac9ff89bb6afa7524cd159f0a9766e8c89.sol,IMDEXDexchange,"contract IMDEXDexchange is SafeMath { address public owner; address IMDEXtoken = 0x46705E8fef2E868FACAFeDc45F47114EC01c2EEd; mapping (address => uint256) public invalidOrder; event SetOwner(address indexed previousOwner, address indexed newOwner); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_1019_IMDEXDexchange {
label=""IMDEXDexchange"";
""1019_IMDEXadminWithdraw"" [label=""IMDEXadminWithdraw""];
""1019_IMDEXdeposit"" [label=""IMDEXdeposit""];
""1019_IMDEXsetInactivityReleasePeriod"" [label=""IMDEXsetInactivityReleasePeriod""];
""1019_IMDEXtrade"" [label=""IMDEXtrade""];
""1019_balanceOf"" [label=""balanceOf""];
""1019_IMDEXwithdrawToken"" [label=""IMDEXwithdrawToken""];
""1019_constructor"" [label=""constructor""];
""1019_IMDEXinvalidateOrdersBefore"" [label=""IMDEXinvalidateOrdersBefore""];
""1019_IMDEXsetAdmin"" [label=""IMDEXsetAdmin""];
""1019_fallback"" [label=""fallback""];
""1019_IMDEXdepositToken"" [label=""IMDEXdepositToken""];
""1019_IMDEXsetOwner"" [label=""IMDEXsetOwner""];
""1019_IMDEXwithdrawToken"" -> ""1019_safeSub"";
""1019_IMDEXtrade"" -> ""1019_safeMul"";
""1019_IMDEXtrade"" -> ""1019_safeAdd"";
""1019_IMDEXsetOwner"" -> ""1019_onlyOwner"";
""1019_IMDEXinvalidateOrdersBefore"" -> ""1019_onlyAdmin"";
""1019_IMDEXdeposit"" -> ""1019_safeAdd"";
""1019_IMDEXadminWithdraw"" -> ""1019_safeAdd"";
""1019_IMDEXadminWithdraw"" -> ""1019_onlyAdmin"";
""1019_IMDEXtrade"" -> ""1019_onlyAdmin"";
""1019_IMDEXdepositToken"" -> ""1019_safeAdd"";
""1019_IMDEXadminWithdraw"" -> ""1019_safeSub"";
""1019_IMDEXadminWithdraw"" -> ""1019_safeMul"";
""1019_IMDEXsetAdmin"" -> ""1019_onlyOwner"";
""1019_IMDEXsetInactivityReleasePeriod"" -> ""1019_onlyAdmin"";
""1019_IMDEXtrade"" -> ""1019_safeSub"";
}
"
0x21ad0028fea5fafa55b9b60e9c065db9f1c0616e.sol,LikeCrowdsale,"contract LikeCrowdsale is HasOperator { using SafeMath for uint256; LikeCoin public like = LikeCoin(0x0); uint public start = 0; uint public end = 0; uint256 public coinsPerEth = 0; mapping (address => bool) public kycDone; bool finalized = false; event PriceChanged(uint256 _newPrice); event AddPrivateFund(address indexed _addr, uint256 _value); event RegisterKYC(address indexed _addr); event Purchase(address indexed _addr, uint256 _ethers, uint256 _coins); event LikeTransfer(address indexed _to, uint256 _value); event Finalize(); function LikeCrowdsale(address _likeAddr, uint _start, uint _end, uint256 _coinsPerEth) public { require(_coinsPerEth != 0); require(now < _start); require(_start < _end); owner = msg.sender; like = LikeCoin(_likeAddr); start = _start; end = _end; coinsPerEth = _coinsPerEth; }",1,"subgraph cluster_1949_LikeCrowdsale {
label=""LikeCrowdsale"";
""1949_LikeCrowdsale"" [label=""LikeCrowdsale""];
""1949_fallback"" [label=""fallback""];
""1949_finalize"" [label=""finalize""];
""1949_transferLike"" [label=""transferLike""];
""1949_addPrivateFund"" [label=""addPrivateFund""];
""1949_registerKYC"" [label=""registerKYC""];
""1949_changePrice"" [label=""changePrice""];
""1949_changePrice"" -> ""1949_onlyOwner"";
""1949_finalize"" -> ""1949_ownerOrOperator"";
""1949_transferLike"" -> ""1949_onlyOwner"";
""1949_registerKYC"" -> ""1949_ownerOrOperator"";
""1949_addPrivateFund"" -> ""1949_onlyOwner"";
}
"
0x2898ca01df2dc4062e8b269806de4996295a1f5c.sol,SaleAuction,contract SaleAuction is AuctionBase { address public beneficiary = msg.sender; function SaleAuction(address _nftAddress) public { ERC721 candidateContract = ERC721(_nftAddress); nonFungibleContract = candidateContract; },1,"subgraph cluster_579_SaleAuction {
label=""SaleAuction"";
""579_getAuction"" [label=""getAuction""];
""579_createAuction"" [label=""createAuction""];
""579_SaleAuction"" [label=""SaleAuction""];
""579_withdrawBalance"" [label=""withdrawBalance""];
""579_bid"" [label=""bid""];
""579_bidCustomAuction"" [label=""bidCustomAuction""];
""579_bidCustomAuction"" -> ""579__transfer"";
""579_createAuction"" -> ""579__escrow"";
""579_createAuction"" -> ""579__addAuction"";
""579_bid"" -> ""579__transfer"";
""579_bid"" -> ""579__bid"";
""579_bidCustomAuction"" -> ""579__bid"";
}
"
0x797d713d8d7a2815ccf3dcf9719e3e9f1712c370.sol,Trustee,contract Trustee is Ownable { using SaferMath for uint256; StoxSmartToken public stox; struct Grant { uint256 value; uint256 start; uint256 cliff; uint256 end; uint256 transferred; bool revokable; },1,"subgraph cluster_1489_Trustee {
label=""Trustee"";
""1489_vestedTokens"" [label=""vestedTokens""];
""1489_revoke"" [label=""revoke""];
""1489_unlockVestedTokens"" [label=""unlockVestedTokens""];
""1489_grant"" [label=""grant""];
""1489_Trustee"" [label=""Trustee""];
""1489_calculateVestedTokens"" [label=""calculateVestedTokens""];
""1489_unlockVestedTokens"" -> ""1489_calculateVestedTokens"";
""1489_vestedTokens"" -> ""1489_calculateVestedTokens"";
""1489_grant"" -> ""1489_onlyOwner"";
""1489_revoke"" -> ""1489_onlyOwner"";
}
"
0x174bb5d84b78e9e2248e7aa2c789aeba82f72f68.sol,LuckyTree,"contract LuckyTree is Owned, SafeMath{ uint public leafPrice; uint public gameStart; uint public gameDuration; uint public tokenLockDuration; uint public totalParticipationAmount; uint public totalLockedAmount; uint public numberOfLeafs; uint public participantIndex; bool public fundsTransfered; address public winner; mapping(uint => address) public participants; mapping(uint => uint) public participationAmount; mapping(address => bool) public hasParticipated; mapping(address => bool) public hasWithdrawn; mapping(address => uint) public participantIndexes; mapping(uint => address) public leafOwners; event GameWinner(address winner); event GameEnded(uint block); event GameStarted(uint block); event GameFailed(uint block); event GameLocked(uint block); event GameUnlocked(uint block); enum state{ pending, running, paused, finished, closed, claimed }",1,"subgraph cluster_1043_LuckyTree {
label=""LuckyTree"";
""1043_random"" [label=""random""];
""1043_lockFunds"" [label=""lockFunds""];
""1043_processTransaction"" [label=""processTransaction""];
""1043_closeGame"" [label=""closeGame""];
""1043_pickWinner"" [label=""pickWinner""];
""1043_manuallyProcessTransaction"" [label=""manuallyProcessTransaction""];
""1043_unlockFunds"" [label=""unlockFunds""];
""1043_setCreditGameAddress"" [label=""setCreditGameAddress""];
""1043_checkInternalBalance"" [label=""checkInternalBalance""];
""1043_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""1043_setTokenAddress"" [label=""setTokenAddress""];
""1043_receiveApproval"" [label=""receiveApproval""];
""1043_LuckyTree"" [label=""LuckyTree""];
""1043_getVariablesForDapp"" [label=""getVariablesForDapp""];
""1043_manualLockFunds"" [label=""manualLockFunds""];
""1043_killContract"" [label=""killContract""];
""1043_salvageTokensFromContract"" -> ""1043_onlyOwner"";
""1043_manuallyProcessTransaction"" -> ""1043_onlyOwner"";
""1043_manualLockFunds"" -> ""1043_onlyOwner"";
""1043_setCreditGameAddress"" -> ""1043_onlyOwner"";
""1043_setTokenAddress"" -> ""1043_onlyOwner"";
""1043_pickWinner"" -> ""1043_random"";
""1043_closeGame"" -> ""1043_onlyOwner"";
""1043_killContract"" -> ""1043_onlyOwner"";
""1043_receiveApproval"" -> ""1043_processTransaction"";
""1043_manualLockFunds"" -> ""1043_pickWinner"";
""1043_pickWinner"" -> ""1043_lockFunds"";
""1043_processTransaction"" -> ""1043_pickWinner"";
""1043_manuallyProcessTransaction"" -> ""1043_processTransaction"";
}
"
0xc3e329ca5380c6b416cf095ed1a662c378a2b630.sol,TaurusPay,"contract TaurusPay is StandardToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 950 * 10**6 * (10**uint256(decimals)); address public owner; mapping (address => bool) public contractUsers; bool public mintingFinished; uint256 public tokenAllocated = 0; mapping (address => uint) public countClaimsToken; uint256 public priceToken = 950000; uint256 public priceClaim = 0.0005 ether; uint256 public numberClaimToken = 200 * (10**uint256(decimals)); uint256 public startTimeDay = 50400; uint256 public endTimeDay = 51300; event OwnerChanged(address indexed previousOwner, address indexed newOwner); event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount); event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken); event MinWeiLimitReached(address indexed sender, uint256 weiAmount); event Mint(address indexed to, uint256 amount); event MintFinished(); constructor(address _owner) public { totalSupply = INITIAL_SUPPLY; owner = _owner; balances[owner] = INITIAL_SUPPLY; transfersEnabled = true; mintingFinished = false; }",1,"subgraph cluster_1389_TaurusPay {
label=""TaurusPay"";
""1389_constructor"" [label=""constructor""];
""1389_enableTransfers"" [label=""enableTransfers""];
""1389_claim"" [label=""claim""];
""1389_claimTokensToOwner"" [label=""claimTokensToOwner""];
""1389_validPurchaseTokens"" [label=""validPurchaseTokens""];
""1389_setPriceClaim"" [label=""setPriceClaim""];
""1389_fallback"" [label=""fallback""];
""1389_validPurchaseTime"" [label=""validPurchaseTime""];
""1389_finishMinting"" [label=""finishMinting""];
""1389_buyTokens"" [label=""buyTokens""];
""1389_mint"" [label=""mint""];
""1389_calcAmount"" [label=""calcAmount""];
""1389_changeTime"" [label=""changeTime""];
""1389_setNumberClaimToken"" [label=""setNumberClaimToken""];
""1389_changeOwner"" [label=""changeOwner""];
""1389_changeOwner"" -> ""1389_onlyOwner"";
""1389_setNumberClaimToken"" -> ""1389_onlyOwner"";
""1389_finishMinting"" -> ""1389_onlyOwner"";
""1389_claim"" -> ""1389_calcAmount"";
""1389_claim"" -> ""1389_validPurchaseTime"";
""1389_calcAmount"" -> ""1389_canMint"";
""1389_buyTokens"" -> ""1389_validPurchaseTokens"";
""1389_buyTokens"" -> ""1389_mint"";
""1389_validPurchaseTime"" -> ""1389_canMint"";
""1389_fallback"" -> ""1389_buyTokens"";
""1389_setPriceClaim"" -> ""1389_onlyOwner"";
""1389_enableTransfers"" -> ""1389_onlyOwner"";
""1389_finishMinting"" -> ""1389_canMint"";
""1389_mint"" -> ""1389_canMint"";
""1389_claimTokensToOwner"" -> ""1389_onlyOwner"";
""1389_claim"" -> ""1389_canMint"";
}
"
0x0356e14c2f8de339131c668c1747def594467a9a.sol,Club1VIT,"contract Club1VIT is Ownable { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 0; uint256 public initialSupply = 1; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; event Transfer(address indexed from, address indexed to); function totalSupply() public view returns (uint256) { return initialSupply; }",1,"subgraph cluster_329_Club1VIT {
label=""Club1VIT"";
""329_transfer"" [label=""transfer""];
""329_Club1VIT"" [label=""Club1VIT""];
""329_transferFrom"" [label=""transferFrom""];
""329_totalSupply"" [label=""totalSupply""];
""329_balanceOf"" [label=""balanceOf""];
""329_transferFrom"" -> ""329_onlyOwner"";
}
"
0xaa63c8683647ef91b3fdab4b4989ee9588da297b.sol,DSProxyFactory,"contract DSProxyFactory { event Created(address indexed sender, address proxy, address cache); mapping(address=>bool) public isProxy; DSProxyCache public cache = new DSProxyCache(); function build() public returns (DSProxy proxy) { proxy = build(msg.sender); }",1,"subgraph cluster_346_DSProxyFactory {
label=""DSProxyFactory"";
""346_build"" [label=""build""];
""346_build"" -> ""346_build"";
}
"
0x861a174d677946d8c2bea8f9636a53fde1668215.sol,SmartContractBank,contract SmartContractBank { using SafeMath for uint256; struct Investor { uint256 deposit; uint256 paymentTime; uint256 withdrawals; bool increasedPercent; bool insured; },1,"subgraph cluster_1079_SmartContractBank {
label=""SmartContractBank"";
""1079_fallback"" [label=""fallback""];
""1079_allocation"" [label=""allocation""];
""1079_getPhasePercent"" [label=""getPhasePercent""];
""1079_increasePercent"" [label=""increasePercent""];
""1079_withdraw"" [label=""withdraw""];
""1079_setInsured"" [label=""setInsured""];
""1079_setInsuranceFundAddress"" [label=""setInsuranceFundAddress""];
""1079_getUserBalance"" [label=""getUserBalance""];
""1079_closeEntrance"" [label=""closeEntrance""];
""1079_getUserBalance"" -> ""1079_getPhasePercent"";
""1079_fallback"" -> ""1079_increasePercent"";
""1079_setInsured"" -> ""1079_onlyIF"";
""1079_withdraw"" -> ""1079_getUserBalance"";
""1079_fallback"" -> ""1079_allocation"";
""1079_fallback"" -> ""1079_withdraw"";
}
"
0x6fc22d1f6852af2bcea6cb749033ccb6b4d3177a.sol,BitSTDView,"contract BitSTDView { BitSTDLogic private logic; address public owner; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); function balanceOf(address add)constant public returns (uint256) { return logic.balanceOf(add); }",1,"subgraph cluster_1510_BitSTDView {
label=""BitSTDView"";
""1510_frozenAccount"" [label=""frozenAccount""];
""1510_decimals"" [label=""decimals""];
""1510_transferFrom"" [label=""transferFrom""];
""1510_buy"" [label=""buy""];
""1510_symbol"" [label=""symbol""];
""1510_mintToken"" [label=""mintToken""];
""1510_buyPrice"" [label=""buyPrice""];
""1510_freezeAccount"" [label=""freezeAccount""];
""1510_transferDataAuthority"" [label=""transferDataAuthority""];
""1510_transferAuthority"" [label=""transferAuthority""];
""1510_approve"" [label=""approve""];
""1510_sellPrice"" [label=""sellPrice""];
""1510_constructor"" [label=""constructor""];
""1510_burn"" [label=""burn""];
""1510_transferLogicAuthority"" [label=""transferLogicAuthority""];
""1510_totalSupply"" [label=""totalSupply""];
""1510_balanceOf"" [label=""balanceOf""];
""1510_migration"" [label=""migration""];
""1510_setBitSTD"" [label=""setBitSTD""];
""1510_transfer"" [label=""transfer""];
""1510_sell"" [label=""sell""];
""1510_allowance"" [label=""allowance""];
""1510_name"" [label=""name""];
""1510_burnFrom"" [label=""burnFrom""];
""1510_approveAndCall"" [label=""approveAndCall""];
""1510_mintToken"" -> ""1510_onlyOwner"";
""1510_transferAuthority"" -> ""1510_onlyOwner"";
""1510_transferLogicAuthority"" -> ""1510_onlyOwner"";
""1510_freezeAccount"" -> ""1510_onlyOwner"";
""1510_setBitSTD"" -> ""1510_onlyOwner"";
""1510_transferDataAuthority"" -> ""1510_onlyOwner"";
}
"
0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol,LockinManager,contract LockinManager { using SafeMath for uint256; struct Lock { uint256 amount; uint256 unlockDate; uint256 lockedFor; },1,"subgraph cluster_1738_LockinManager {
label=""LockinManager"";
""1738_lockIt"" [label=""lockIt""];
""1738_getLocksLockedFor"" [label=""getLocksLockedFor""];
""1738_getLock"" [label=""getLock""];
""1738_ifInAllowedLocks"" [label=""ifInAllowedLocks""];
""1738_getLocks"" [label=""getLocks""];
""1738_removeAllowedLock"" [label=""removeAllowedLock""];
""1738_setDefaultAllowedLock"" [label=""setDefaultAllowedLock""];
""1738_LockinManager"" [label=""LockinManager""];
""1738_lockForDays"" [label=""lockForDays""];
""1738_addValidContract"" [label=""addValidContract""];
""1738_removeValidContract"" [label=""removeValidContract""];
""1738_defaultLockin"" [label=""defaultLockin""];
""1738_getLocksAmount"" [label=""getLocksAmount""];
""1738_addAllowedLock"" [label=""addAllowedLock""];
""1738_getLocksUnlockDate"" [label=""getLocksUnlockDate""];
""1738_getLocksUnlockDate"" -> ""1738_validContractOnly"";
""1738_removeValidContract"" -> ""1738_adminOnly"";
""1738_setDefaultAllowedLock"" -> ""1738_adminOnly"";
""1738_getLocksAmount"" -> ""1738_validContractOnly"";
""1738_getLocksLockedFor"" -> ""1738_validContractOnly"";
""1738_getLocks"" -> ""1738_validContractOnly"";
""1738_removeAllowedLock"" -> ""1738_adminOnly"";
""1738_getLock"" -> ""1738_validContractOnly"";
""1738_addAllowedLock"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_lockIt"";
""1738_lockForDays"" -> ""1738_ifInAllowedLocks"";
""1738_lockForDays"" -> ""1738_lockIt"";
""1738_addValidContract"" -> ""1738_adminOnly"";
""1738_defaultLockin"" -> ""1738_validContractOnly"";
}
"
0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol,SharkPool,"contract SharkPool is Ownable, ReentrancyGuard { string constant public pool_name = ; uint256 public pool_percentage = 5; uint256 constant public max_users = 100; uint256 public total_users = 0; uint256 public constant divisible_units = 10000000; uint256 public contract_period = 100; uint256 public mined_blocks = 1; uint256 public claimed_blocks = 1; uint256 public blockCreationRate = 0; BitcoineumInterface base_contract; struct user { uint256 start_block; uint256 end_block; uint256 proportional_contribution; }",1,"subgraph cluster_893_SharkPool {
label=""SharkPool"";
""893_current_external_block"" [label=""current_external_block""];
""893_SharkPool"" [label=""SharkPool""];
""893_find_contribution"" [label=""find_contribution""];
""893_mine"" [label=""mine""];
""893_checkMiningAttempt"" [label=""checkMiningAttempt""];
""893_checkWinning"" [label=""checkWinning""];
""893_allocate_slot"" [label=""allocate_slot""];
""893_fallback"" [label=""fallback""];
""893_available_slots"" [label=""available_slots""];
""893_get_bitcoineum_contract_address"" [label=""get_bitcoineum_contract_address""];
""893_external_to_internal_block_number"" [label=""external_to_internal_block_number""];
""893_do_redemption"" [label=""do_redemption""];
""893_redeem"" [label=""redeem""];
""893_set_pool_percentage"" [label=""set_pool_percentage""];
""893_balanceOf"" [label=""balanceOf""];
""893_distribute_reward"" [label=""distribute_reward""];
""893_calculate_minimum_contribution"" [label=""calculate_minimum_contribution""];
""893_claim"" [label=""claim""];
""893_SharkPool"" -> ""893_get_bitcoineum_contract_address"";
""893_redeem"" -> ""893_do_redemption"";
""893_set_pool_percentage"" -> ""893_nonReentrant"";
""893_redeem"" -> ""893_nonReentrant"";
""893_set_pool_percentage"" -> ""893_onlyOwner"";
""893_mine"" -> ""893_external_to_internal_block_number"";
""893_fallback"" -> ""893_do_redemption"";
""893_claim"" -> ""893_distribute_reward"";
""893_mine"" -> ""893_current_external_block"";
""893_fallback"" -> ""893_allocate_slot"";
""893_fallback"" -> ""893_calculate_minimum_contribution"";
""893_claim"" -> ""893_nonReentrant"";
""893_mine"" -> ""893_nonReentrant"";
}
"
0x3a37dcda0503f92626c082540dfbc9d95104ab96.sol,EthernautsLogic,contract EthernautsLogic is EthernautsOwnership { address public newContractAddress; function EthernautsLogic() public { ceoAddress = msg.sender; ctoAddress = msg.sender; cooAddress = msg.sender; oracleAddress = msg.sender; paused = true; },1,"subgraph cluster_1987_EthernautsLogic {
label=""EthernautsLogic"";
""1987_withdrawBalances"" [label=""withdrawBalances""];
""1987_EthernautsLogic"" [label=""EthernautsLogic""];
""1987_unpause"" [label=""unpause""];
""1987_getBalance"" [label=""getBalance""];
""1987_setNewAddress"" [label=""setNewAddress""];
""1987_setEthernautsStorageContract"" [label=""setEthernautsStorageContract""];
""1987_unpause"" -> ""1987_whenPaused"";
""1987_unpause"" -> ""1987_unpause"";
""1987_unpause"" -> ""1987_onlyCEO"";
""1987_withdrawBalances"" -> ""1987_onlyCLevel"";
""1987_getBalance"" -> ""1987_onlyCLevel"";
""1987_setNewAddress"" -> ""1987_onlyCTO"";
""1987_setEthernautsStorageContract"" -> ""1987_onlyCLevel"";
""1987_setNewAddress"" -> ""1987_whenPaused"";
""1987_setEthernautsStorageContract"" -> ""1987_whenPaused"";
}
"
0x0e752b742f744fdc2d93774da44c37b72c3e6952.sol,CraftyCrowdsale,"contract CraftyCrowdsale is Pausable { using SafeMath for uint256; mapping(address => uint256) received; MintableToken public token; uint256 public preSaleStart; uint256 public preSaleEnd; uint256 public saleStart; uint256 public saleEnd; uint256 public issuedTokens = 0; uint256 public constant hardCap = 5000000000 * 10**8; uint256 constant teamCap = 1450000000 * 10**8; uint256 constant advisorCap = 450000000 * 10**8; uint256 constant bountyCap = 100000000 * 10**8; uint256 constant fundCap = 3000000000 * 10**8; uint256 constant lockTime = 180 days; address public etherWallet; address public teamWallet; address public advisorWallet; address public fundWallet; address public bountyWallet; TokenTimelock teamTokens; uint256 public rate; enum State { BEFORE_START, SALE, REFUND, CLOSED }",1,"subgraph cluster_1475_CraftyCrowdsale {
label=""CraftyCrowdsale"";
""1475_releaseTeamTokens"" [label=""releaseTeamTokens""];
""1475_setWallets"" [label=""setWallets""];
""1475_setRate"" [label=""setRate""];
""1475_enableRefund"" [label=""enableRefund""];
""1475_receivedFrom"" [label=""receivedFrom""];
""1475_getRate"" [label=""getRate""];
""1475_generateTokens"" [label=""generateTokens""];
""1475_claimRefund"" [label=""claimRefund""];
""1475_reclaimEther"" [label=""reclaimEther""];
""1475_buyTokens"" [label=""buyTokens""];
""1475_CraftyCrowdsale"" [label=""CraftyCrowdsale""];
""1475_fallback"" [label=""fallback""];
""1475_finishCrowdsale"" [label=""finishCrowdsale""];
""1475_finishCrowdsale"" -> ""1475_inState"";
""1475_setWallets"" -> ""1475_inState"";
""1475_buyTokens"" -> ""1475_whenNotPaused"";
""1475_setRate"" -> ""1475_onlyOwner"";
""1475_claimRefund"" -> ""1475_whenNotPaused"";
""1475_buyTokens"" -> ""1475_saleIsOn"";
""1475_buyTokens"" -> ""1475_getRate"";
""1475_enableRefund"" -> ""1475_inState"";
""1475_enableRefund"" -> ""1475_onlyOwner"";
""1475_setRate"" -> ""1475_beforeSale"";
""1475_claimRefund"" -> ""1475_inState"";
""1475_reclaimEther"" -> ""1475_onlyOwner"";
""1475_finishCrowdsale"" -> ""1475_onlyOwner"";
""1475_generateTokens"" -> ""1475_onlyOwner"";
""1475_setWallets"" -> ""1475_onlyOwner"";
""1475_fallback"" -> ""1475_buyTokens"";
}
"
0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol,Token,"contract Token { using SafeMath for uint256; mapping (address => uint256) public balances; mapping(address => mapping (address => uint256)) allowed; address[] allTokenHolders; string public name; string public symbol; uint8 public decimals; uint256 totalSupplyAmount = 0; address public refundManagerContractAddress; AuthenticationManager authenticationManager; LockinManager lockinManager; function availableBalance(address _owner) constant returns(uint256) { uint256 length = lockinManager.getLocks(_owner); uint256 lockedValue = 0; for(uint256 i = 0; i < length; i++) { if(lockinManager.getLocksUnlockDate(_owner, i) > now) { uint256 _value = lockinManager.getLocksAmount(_owner, i); lockedValue = lockedValue.add(_value); }",1,"subgraph cluster_1291_Token {
label=""Token"";
""1291_availableBalance"" [label=""availableBalance""];
""1291_mintTokens"" [label=""mintTokens""];
""1291_balanceOf"" [label=""balanceOf""];
""1291_tokenHolderCount"" [label=""tokenHolderCount""];
""1291_transfer"" [label=""transfer""];
""1291_totalSupply"" [label=""totalSupply""];
""1291_Token"" [label=""Token""];
""1291_tokenOwnerRemove"" [label=""tokenOwnerRemove""];
""1291_approve"" [label=""approve""];
""1291_setLockinManagerAddress"" [label=""setLockinManagerAddress""];
""1291_transferFrom"" [label=""transferFrom""];
""1291_allowance"" [label=""allowance""];
""1291_setRefundManagerContract"" [label=""setRefundManagerContract""];
""1291_tokenOwnerAdd"" [label=""tokenOwnerAdd""];
""1291_tokenHolder"" [label=""tokenHolder""];
""1291_destroyTokens"" [label=""destroyTokens""];
""1291_transferFrom"" -> ""1291_tokenOwnerRemove"";
""1291_transferFrom"" -> ""1291_tokenOwnerAdd"";
""1291_transfer"" -> ""1291_onlyPayloadSize"";
""1291_approve"" -> ""1291_onlyPayloadSize"";
""1291_mintTokens"" -> ""1291_onlyPayloadSize"";
""1291_transferFrom"" -> ""1291_onlyPayloadSize"";
""1291_mintTokens"" -> ""1291_tokenOwnerAdd"";
""1291_transfer"" -> ""1291_availableBalance"";
""1291_setLockinManagerAddress"" -> ""1291_adminOnly"";
""1291_transfer"" -> ""1291_tokenOwnerRemove"";
""1291_setRefundManagerContract"" -> ""1291_adminOnly"";
""1291_destroyTokens"" -> ""1291_availableBalance"";
""1291_tokenHolder"" -> ""1291_accountReaderOnly"";
""1291_destroyTokens"" -> ""1291_tokenOwnerRemove"";
""1291_tokenHolderCount"" -> ""1291_accountReaderOnly"";
""1291_transferFrom"" -> ""1291_availableBalance"";
""1291_transfer"" -> ""1291_tokenOwnerAdd"";
}
"
0x5af9ec6df6edea0761fa841ce56c2e4deb000b31.sol,ZebiMainCrowdsale,contract ZebiMainCrowdsale is Ownable{ using SafeMath for uint256; ZebiCoin public token; uint256 currentYearMinted; uint256 calenderYearMintCap; uint256 calenderYearStart; uint256 calenderYearEnd; uint256 vestedMintStartTime; uint256 zebiZCOShare; uint256 crowdsaleZCOCap; uint256 transStartTime; ZebiCoinCrowdsale public zcc; ZebiCoinTempMgr public tempMngr; uint64 public tokenDecimals; uint256 public startTime; uint256 public endTime; uint256 public goldListPeriod; uint256 public postGoldPeriod; uint256 public minTransAmount; uint256 public ethCap; mapping(address => uint256) mainContribution; mapping(address => bool) mainCancelledList; uint256 goldPeriodCap; bool goldListPeriodFlag; mapping(address=>uint256) goldListContribution; mapping(address => bool) goldList; mapping(address => bool) kycAcceptedList; address public wallet; bool public withinRefundPeriod; mapping(address => uint256) preSaleRefundsInMainSale; uint256 public tokens; uint256 public weiAmount; uint256 public ETHtoZWeirate; uint256 public mainWeiRaised; modifier inCancelledList { require(mainCancelledList[msg.sender]); _; },1,"subgraph cluster_3258_ZebiMainCrowdsale {
label=""ZebiMainCrowdsale"";
""3258_addCancellation"" [label=""addCancellation""];
""3258_enableRefundPeriod"" [label=""enableRefundPeriod""];
""3258_fallback"" [label=""fallback""];
""3258_viewGoldList"" [label=""viewGoldList""];
""3258_getTokenAmount"" [label=""getTokenAmount""];
""3258_viewContribution"" [label=""viewContribution""];
""3258_transferTokenOwnership"" [label=""transferTokenOwnership""];
""3258_resumeMint"" [label=""resumeMint""];
""3258_addToGoldList"" [label=""addToGoldList""];
""3258_addToKYCList"" [label=""addToKYCList""];
""3258_forwardFunds"" [label=""forwardFunds""];
""3258_withdraw"" [label=""withdraw""];
""3258_validPurchase"" [label=""validPurchase""];
""3258_viewKYCAccepted"" [label=""viewKYCAccepted""];
""3258_mintvestedTokens"" [label=""mintvestedTokens""];
""3258_endTransfer"" [label=""endTransfer""];
""3258_startTransfer"" [label=""startTransfer""];
""3258_viewCancelledList"" [label=""viewCancelledList""];
""3258_takeEth"" [label=""takeEth""];
""3258_disableRefundPeriod"" [label=""disableRefundPeriod""];
""3258_buyTokens"" [label=""buyTokens""];
""3258_viewPreSaleRefundsInMainSale"" [label=""viewPreSaleRefundsInMainSale""];
""3258_removeFromKYCList"" [label=""removeFromKYCList""];
""3258_ZebiMainCrowdsale"" [label=""ZebiMainCrowdsale""];
""3258_forcedRefund"" [label=""forcedRefund""];
""3258_finishMint"" [label=""finishMint""];
""3258_mintAndAllocateZCO"" [label=""mintAndAllocateZCO""];
""3258_refund"" [label=""refund""];
""3258_removeFromGoldList"" [label=""removeFromGoldList""];
""3258_fallback"" -> ""3258_buyTokens"";
""3258_mintAndAllocateZCO"" -> ""3258_onlyOwner"";
""3258_removeFromKYCList"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inCancelledList"";
""3258_forcedRefund"" -> ""3258_onlyOwner"";
""3258_removeFromGoldList"" -> ""3258_onlyOwner"";
""3258_endTransfer"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_forwardFunds"";
""3258_withdraw"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_validPurchase"";
""3258_startTransfer"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inRefundPeriod"";
""3258_finishMint"" -> ""3258_onlyOwner"";
""3258_transferTokenOwnership"" -> ""3258_onlyOwner"";
""3258_enableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_mintvestedTokens"" -> ""3258_onlyOwner"";
""3258_disableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_addToGoldList"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_getTokenAmount"";
""3258_addCancellation"" -> ""3258_onlyOwner"";
""3258_addToKYCList"" -> ""3258_onlyOwner"";
""3258_resumeMint"" -> ""3258_onlyOwner"";
}
"
0xdda80deeb2db6d63247b9be73bacd00184fbc83f.sol,OwnerContract,contract OwnerContract is Claimable { Claimable public ownedContract; address internal origOwner; function bindContract(address _contract) onlyOwner public returns (bool) { require(_contract != address(0)); ownedContract = Claimable(_contract); origOwner = ownedContract.owner(); ownedContract.claimOwnership(); return true; },1,"subgraph cluster_564_OwnerContract {
label=""OwnerContract"";
""564_bindContract"" [label=""bindContract""];
""564_changeOwnershipto"" [label=""changeOwnershipto""];
""564_transferOwnershipBack"" [label=""transferOwnershipBack""];
""564_changeOwnershipto"" -> ""564_onlyOwner"";
""564_transferOwnershipBack"" -> ""564_onlyOwner"";
""564_bindContract"" -> ""564_onlyOwner"";
}
"
0xec2e5c8d51fdd54fef83db8300399a3c2e167922.sol,CrowdsaleToken,"contract CrowdsaleToken is Manageable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public totalSupply; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; mapping (address => uint256) public releaseTime; bool public released; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Mint(address indexed _to, uint256 _value); event ReleaseTimeChanged(address indexed _owner, uint256 _oldReleaseTime, uint256 _newReleaseTime); event ReleasedChanged(bool _oldReleased, bool _newReleased); modifier canTransfer(address _from) { if (releaseTime[_from] == 0) { require(released); }",1,"subgraph cluster_860_CrowdsaleToken {
label=""CrowdsaleToken"";
""860_approve"" [label=""approve""];
""860_allocate"" [label=""allocate""];
""860_allowance"" [label=""allowance""];
""860_setReleaseTime"" [label=""setReleaseTime""];
""860_transferFrom"" [label=""transferFrom""];
""860_transfer"" [label=""transfer""];
""860_mint"" [label=""mint""];
""860_setReleased"" [label=""setReleased""];
""860_deallocate"" [label=""deallocate""];
""860_balanceOf"" [label=""balanceOf""];
""860_allocate"" -> ""860_onlyOwnerOrManager"";
""860_transfer"" -> ""860_canTransfer"";
""860_mint"" -> ""860_onlyOwnerOrManager"";
""860_transferFrom"" -> ""860_canTransfer"";
""860_setReleased"" -> ""860_onlyOwnerOrManager"";
""860_deallocate"" -> ""860_onlyOwnerOrManager"";
""860_setReleaseTime"" -> ""860_onlyOwnerOrManager"";
""860_mint"" -> ""860_setReleaseTime"";
}
"
0x2737e022e8bf733b05fa0706b0e80003a576ccb4.sol,TokenValueRelayer,contract TokenValueRelayer { struct TokenValueRepresentation { uint256 value; string currency; uint256 timestamp; },1,"subgraph cluster_540_TokenValueRelayer {
label=""TokenValueRelayer"";
""540_tokenValueCount"" [label=""tokenValueCount""];
""540_tokenValuePublish"" [label=""tokenValuePublish""];
""540_TokenValueRelayer"" [label=""TokenValueRelayer""];
""540_tokenValuePublish"" -> ""540_adminOnly"";
}
"
0x3325e30f4326f17bdd79146db0a3835175f0e982.sol,SAMIToken,contract SAMIToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 100000000000000000000 * (10**8); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function SAMIToken () { owner = msg.sender; },1,"subgraph cluster_756_SAMIToken {
label=""SAMIToken"";
""756_refundTokens"" [label=""refundTokens""];
""756_totalSupply"" [label=""totalSupply""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_SAMIToken"" [label=""SAMIToken""];
""756_transferFrom"" [label=""transferFrom""];
""756_approve"" [label=""approve""];
""756_transfer"" [label=""transfer""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_createTokens"" [label=""createTokens""];
""756_setOwner"" [label=""setOwner""];
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_allowance"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_approve"";
}
"
0x3a966ffa8451cbf3769b7d1f94d5b47da254edb0.sol,Play0x_LottoBall,contract Play0x_LottoBall { using SafeMath for uint256; using SafeMath for uint128; using SafeMath for uint40; using SafeMath for uint8; uint public jackpotSize; uint public tokenJackpotSize; uint public MIN_BET; uint public MAX_BET; uint public MAX_AMOUNT; uint public maxProfit; uint public maxTokenProfit; uint8 public platformFeePercentage = 15; uint8 public jackpotFeePercentage = 5; uint8 public ERC20rewardMultiple = 5; uint constant BetExpirationBlocks = 250; uint public lockedInBets; uint public lockedTokenInBets; bytes32 bitComparisonMask = 0xF; address public owner; address private nextOwner; address public manager; address private nextManager; address[] public secretSignerList; address public ERC20ContractAddres; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Bet { uint amount; uint40 placeBlockNumber; address gambler; },1,"subgraph cluster_3084_Play0x_LottoBall {
label=""Play0x_LottoBall"";
""3084_setMaxProfit"" [label=""setMaxProfit""];
""3084_getJackpotWinBonus"" [label=""getJackpotWinBonus""];
""3084_sendFunds"" [label=""sendFunds""];
""3084_sendTokenFundsToManager"" [label=""sendTokenFundsToManager""];
""3084_updateMAX_AMOUNT"" [label=""updateMAX_AMOUNT""];
""3084_approveNextOwner"" [label=""approveNextOwner""];
""3084_getBonusPercentageByMachineMode"" [label=""getBonusPercentageByMachineMode""];
""3084_withdrawAlltokenFunds"" [label=""withdrawAlltokenFunds""];
""3084_updateBitComparisonMask"" [label=""updateBitComparisonMask""];
""3084_settleBetVerifi"" [label=""settleBetVerifi""];
""3084_withdrawToken"" [label=""withdrawToken""];
""3084_getPossibleWinAmount"" [label=""getPossibleWinAmount""];
""3084_setTokenAddress"" [label=""setTokenAddress""];
""3084_withdrawFunds"" [label=""withdrawFunds""];
""3084_updateJackpotFeePercentage"" [label=""updateJackpotFeePercentage""];
""3084_updatePlatformFeePercentage"" [label=""updatePlatformFeePercentage""];
""3084_refundBet"" [label=""refundBet""];
""3084_updateERC20rewardMultiple"" [label=""updateERC20rewardMultiple""];
""3084_updateMIN_BET"" [label=""updateMIN_BET""];
""3084_settleBet"" [label=""settleBet""];
""3084_clearProcessedBet"" [label=""clearProcessedBet""];
""3084_getContractInformation"" [label=""getContractInformation""];
""3084_withdrawAllFunds"" [label=""withdrawAllFunds""];
""3084_refundTokenBet"" [label=""refundTokenBet""];
""3084_updateWithdrawalModeByIndex"" [label=""updateWithdrawalModeByIndex""];
""3084_setSecretSignerByIndex"" [label=""setSecretSignerByIndex""];
""3084_runRotateTime"" [label=""runRotateTime""];
""3084_getContractAddress"" [label=""getContractAddress""];
""3084_initialParameter"" [label=""initialParameter""];
""3084_setSecretSignerList"" [label=""setSecretSignerList""];
""3084_fallback"" [label=""fallback""];
""3084_placeTokenBet"" [label=""placeTokenBet""];
""3084_sendFundsToOwner"" [label=""sendFundsToOwner""];
""3084_constructor"" [label=""constructor""];
""3084_acceptNextOwner"" [label=""acceptNextOwner""];
""3084_updateWithdrawalMode"" [label=""updateWithdrawalMode""];
""3084_sendFundsToManager"" [label=""sendFundsToManager""];
""3084_kill"" [label=""kill""];
""3084_acceptNextManager"" [label=""acceptNextManager""];
""3084_clearStorage"" [label=""clearStorage""];
""3084_updateMAX_BET"" [label=""updateMAX_BET""];
""3084_placeBet"" [label=""placeBet""];
""3084_approveNextManager"" [label=""approveNextManager""];
""3084_withdrawToken"" -> ""3084_onlyOwner"";
""3084_updateBitComparisonMask"" -> ""3084_onlyOwner"";
""3084_clearStorage"" -> ""3084_clearProcessedBet"";
""3084_withdrawAllFunds"" -> ""3084_onlyOwner"";
""3084_sendFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getPossibleWinAmount"";
""3084_updateJackpotFeePercentage"" -> ""3084_onlyOwner"";
""3084_setMaxProfit"" -> ""3084_onlyOwner"";
""3084_withdrawAlltokenFunds"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_sendFunds"";
""3084_setTokenAddress"" -> ""3084_onlyManager"";
""3084_updateWithdrawalModeByIndex"" -> ""3084_onlyManager"";
""3084_updateERC20rewardMultiple"" -> ""3084_onlyManager"";
""3084_updateMIN_BET"" -> ""3084_onlyManager"";
""3084_initialParameter"" -> ""3084_onlyOwner"";
""3084_setSecretSignerByIndex"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_onlyOwner"";
""3084_approveNextManager"" -> ""3084_onlyManager"";
""3084_setSecretSignerList"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_sendFunds"";
""3084_refundBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_sendTokenFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_kill"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_runRotateTime"";
""3084_sendFundsToOwner"" -> ""3084_onlyOwner"";
""3084_approveNextOwner"" -> ""3084_onlyOwner"";
""3084_updateMAX_AMOUNT"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_getPossibleWinAmount"";
""3084_updatePlatformFeePercentage"" -> ""3084_onlyOwner"";
""3084_settleBetVerifi"" -> ""3084_runRotateTime"";
""3084_updateWithdrawalMode"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_sendFunds"";
""3084_runRotateTime"" -> ""3084_getJackpotWinBonus"";
""3084_updateMAX_BET"" -> ""3084_onlyManager"";
}
"
0x88355a32a8c5cc399aa09b9d21ebcba935ae5d2f.sol,BankWallet,"contract BankWallet is Pausable, RequiringAuthorization, SafeMath { address public edgelessToken; address public edgelessCasino; uint public maxFundAmount = 0.22 ether; event Withdrawal(address _token, uint _amount); event Deposit(address _receiver, uint _amount); event Fund(address _receiver, uint _amount); constructor(address _token, address _casino) public { edgelessToken = _token; edgelessCasino = _casino; owner = msg.sender; }",1,"subgraph cluster_666_BankWallet {
label=""BankWallet"";
""666_setMaxFundAmount"" [label=""setMaxFundAmount""];
""666_setCasinoContract"" [label=""setCasinoContract""];
""666_withdraw"" [label=""withdraw""];
""666_fallback"" [label=""fallback""];
""666_constructor"" [label=""constructor""];
""666__approveForCasino"" [label=""_approveForCasino""];
""666_approve"" [label=""approve""];
""666_deposit"" [label=""deposit""];
""666_fund"" [label=""fund""];
""666_withdraw"" -> ""666_onlyAdmin"";
""666_setMaxFundAmount"" -> ""666_onlyAdmin"";
""666_setCasinoContract"" -> ""666__approveForCasino"";
""666_setCasinoContract"" -> ""666_onlyAdmin"";
""666_fund"" -> ""666_onlyAuthorized"";
""666_deposit"" -> ""666_onlyAuthorized"";
""666_approve"" -> ""666__approveForCasino"";
""666_approve"" -> ""666_onlyAuthorized"";
}
"
0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol,DrainMe,"contract DrainMe { address public winner = 0x0; address public owner; address public firstTarget = 0x461ec7309F187dd4650EE6b4D25D93c922d7D56b; address public secondTarget = 0x1C3E062c77f09fC61550703bDd1D59842C22c766; address[] public players; mapping(address=>bool) approvedPlayers; uint256 public secret; uint256[] public seed = [951828771,158769871220]; uint256[] public balance; function DranMe() public payable{ owner = msg.sender; }",1,"subgraph cluster_387_DrainMe {
label=""DrainMe"";
""387_getPlayerCount"" [label=""getPlayerCount""];
""387_guessSeed"" [label=""guessSeed""];
""387_DranMe"" [label=""DranMe""];
""387_callFirstTarget"" [label=""callFirstTarget""];
""387_setSeed"" [label=""setSeed""];
""387_becomePlayer"" [label=""becomePlayer""];
""387_manipulateSecret"" [label=""manipulateSecret""];
""387_fallback"" [label=""fallback""];
""387_winPrize"" [label=""winPrize""];
""387_unlockSecret"" [label=""unlockSecret""];
""387_checkSecret"" [label=""checkSecret""];
""387_getPrize"" [label=""getPrize""];
""387_getLength"" [label=""getLength""];
""387_setSecret"" [label=""setSecret""];
""387_callSecondTarget"" [label=""callSecondTarget""];
""387_claimPrize"" [label=""claimPrize""];
""387_addSeed"" [label=""addSeed""];
""387_manipulateSecret"" -> ""387_unlockSecret"";
""387_winPrize"" -> ""387_onlyOwner"";
""387_checkSecret"" -> ""387_onlyPlayers"";
""387_manipulateSecret"" -> ""387_onlyPlayers"";
""387_callSecondTarget"" -> ""387_onlyPlayers"";
""387_setSecret"" -> ""387_onlyOwner"";
""387_callFirstTarget"" -> ""387_onlyPlayers"";
""387_addSeed"" -> ""387_onlyPlayers"";
""387_setSeed"" -> ""387_onlyPlayers"";
""387_claimPrize"" -> ""387_onlyWinner"";
""387_guessSeed"" -> ""387_onlyPlayers"";
}
"
0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol,EthicHubTokenDistributionStrategy,"contract EthicHubTokenDistributionStrategy is Ownable, WhitelistedDistributionStrategy { event UnsoldTokensReturned(address indexed destination, uint256 amount); function EthicHubTokenDistributionStrategy(EthixToken _token, uint256 _rate, uint256 _rateForWhitelisted) WhitelistedDistributionStrategy(_token, _rate, _rateForWhitelisted) public { }",1,"subgraph cluster_1658_EthicHubTokenDistributionStrategy {
label=""EthicHubTokenDistributionStrategy"";
""1658_returnUnsoldTokens"" [label=""returnUnsoldTokens""];
""1658_EthicHubTokenDistributionStrategy"" [label=""EthicHubTokenDistributionStrategy""];
""1658_initIntervals"" [label=""initIntervals""];
""1658_initIntervals"" -> ""1658_validateIntervals"";
""1658_initIntervals"" -> ""1658_onlyOwner"";
""1658_EthicHubTokenDistributionStrategy"" -> ""1658_WhitelistedDistributionStrategy"";
""1658_returnUnsoldTokens"" -> ""1658_onlyCrowdsale"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0x6fbc1b8f756f43cfbfd45085380cc375650ff3d6.sol,ZethrSnap,contract ZethrSnap { struct SnapEntry { uint blockNumber; uint profit; },1,"subgraph cluster_563_ZethrSnap {
label=""ZethrSnap"";
""563_walletSetWallet"" [label=""walletSetWallet""];
""563_withdraw"" [label=""withdraw""];
""563_walletCreateSnap"" [label=""walletCreateSnap""];
""563_tokenFallback"" [label=""tokenFallback""];
""563_walletSetSigner"" [label=""walletSetSigner""];
""563_walletWithdrawTokens"" [label=""walletWithdrawTokens""];
""563_constructor"" [label=""constructor""];
""563_getSnap"" [label=""getSnap""];
""563_toUint"" [label=""toUint""];
""563_toSig"" [label=""toSig""];
""563_fallback"" [label=""fallback""];
""563_getSnapsLength"" [label=""getSnapsLength""];
""563_claim"" [label=""claim""];
""563_ownerSetPaused"" [label=""ownerSetPaused""];
""563_walletSetWallet"" -> ""563_walletOnly"";
""563_walletWithdrawTokens"" -> ""563_walletOnly"";
""563_claim"" -> ""563_toSig"";
""563_walletSetSigner"" -> ""563_walletOnly"";
""563_toSig"" -> ""563_toUint"";
""563_walletCreateSnap"" -> ""563_walletOnly"";
""563_ownerSetPaused"" -> ""563_ownerOnly"";
}
"
0x402fa04ccd2c2568e1a53dbecec1bd572303663a.sol,HarborPresale,"contract HarborPresale is Haltable { using SafeMath for uint256; HarborToken public token; uint256 public startTime; uint256 public endTime; address public wallet; uint256 public rate; uint256 public weiRaised; uint256 public cap; bool public isFinalized = false; uint256 public minimumFundingGoal; uint256 public minSend; RefundVault public vault; uint public tokensMinted; mapping (address => uint256) public tokenDeposited; event Finalized(); event TokenMinted(uint count); event Distributed(address investor, uint tokenAmount); event PeriodChanged(uint256 starttm,uint256 endtm); event TokenPurchase(address indexed purchaser, address indexed investor, uint256 value); function HarborPresale(address _token, uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap, uint256 _minimumFundingGoal, uint256 _minSend) { require(_startTime >= now); require(_endTime >= _startTime); require(_rate > 0); require(_wallet != 0x0); require(_cap > 0); require(_minimumFundingGoal > 0); token = HarborToken(_token); startTime = _startTime; endTime = _endTime; rate = _rate; wallet = _wallet; cap = _cap; vault = new RefundVault(_wallet); minimumFundingGoal = _minimumFundingGoal; minSend = _minSend; }",1,"subgraph cluster_1508_HarborPresale {
label=""HarborPresale"";
""1508_finalize"" [label=""finalize""];
""1508_minFundingGoalReached"" [label=""minFundingGoalReached""];
""1508_fallback"" [label=""fallback""];
""1508_claimTokenAddress"" [label=""claimTokenAddress""];
""1508_HarborPresale"" [label=""HarborPresale""];
""1508_claimRefund"" [label=""claimRefund""];
""1508_withdrawFund"" [label=""withdrawFund""];
""1508_claimToken"" [label=""claimToken""];
""1508_hasEnded"" [label=""hasEnded""];
""1508_finalization"" [label=""finalization""];
""1508_mintForEverybody"" [label=""mintForEverybody""];
""1508_setPeriod"" [label=""setPeriod""];
""1508_validPurchase"" [label=""validPurchase""];
""1508_buyTokens"" [label=""buyTokens""];
""1508_claimRefund"" -> ""1508_stopInEmergency"";
""1508_claimRefund"" -> ""1508_minFundingGoalReached"";
""1508_finalize"" -> ""1508_hasEnded"";
""1508_finalization"" -> ""1508_minFundingGoalReached"";
""1508_claimToken"" -> ""1508_stopInEmergency"";
""1508_buyTokens"" -> ""1508_validPurchase"";
""1508_fallback"" -> ""1508_buyTokens"";
""1508_claimToken"" -> ""1508_claimTokenAddress"";
""1508_finalize"" -> ""1508_stopInEmergency"";
""1508_mintForEverybody"" -> ""1508_onlyOwner"";
""1508_claimTokenAddress"" -> ""1508_stopInEmergency"";
""1508_setPeriod"" -> ""1508_onlyOwner"";
""1508_buyTokens"" -> ""1508_stopInEmergency"";
""1508_finalize"" -> ""1508_finalization"";
""1508_withdrawFund"" -> ""1508_onlyOwner"";
""1508_withdrawFund"" -> ""1508_minFundingGoalReached"";
""1508_finalize"" -> ""1508_onlyOwner"";
}
"
0x56853ab9006e0712b05c68b586372fcdde5236b9.sol,AirDrop,"contract AirDrop is Ownable { Token token; event TransferredToken(address indexed to, uint256 value); event FailedTransfer(address indexed to, uint256 value); modifier whenDropIsActive() { assert(isActive()); _; }",1,"subgraph cluster_282_AirDrop {
label=""AirDrop"";
""282_sendTokens"" [label=""sendTokens""];
""282_AirDrop"" [label=""AirDrop""];
""282_sendInternally"" [label=""sendInternally""];
""282_tokensAvailable"" [label=""tokensAvailable""];
""282_sendTokensSingleValue"" [label=""sendTokensSingleValue""];
""282_destroy"" [label=""destroy""];
""282_isActive"" [label=""isActive""];
""282_sendTokens"" -> ""282_sendInternally"";
""282_sendTokensSingleValue"" -> ""282_onlyOwner"";
""282_sendInternally"" -> ""282_tokensAvailable"";
""282_sendTokensSingleValue"" -> ""282_sendInternally"";
""282_sendTokens"" -> ""282_onlyOwner"";
""282_sendTokensSingleValue"" -> ""282_whenDropIsActive"";
""282_destroy"" -> ""282_onlyOwner"";
""282_destroy"" -> ""282_tokensAvailable"";
""282_sendTokens"" -> ""282_whenDropIsActive"";
""282_isActive"" -> ""282_tokensAvailable"";
}
"
0x7868fc162988289062dbcdb670a3cf6c8da66f84.sol,CDMarketplace,contract CDMarketplace is Ownable { bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba; address public wallet; uint256 public fee_percentage; ERC721Basic public token; address public manager; address internal checkAndBuySender; address public TVTokenAddress; address public TVCrowdsaleAddress; bytes4 constant TOKEN_RECEIVED = bytes4(keccak256()); modifier onlyOwnerOrManager() { require(msg.sender == owner || manager == msg.sender); _; },1,"subgraph cluster_790_CDMarketplace {
label=""CDMarketplace"";
""790_changeTVCrowdsaleAddress"" [label=""changeTVCrowdsaleAddress""];
""790_onERC721Received"" [label=""onERC721Received""];
""790_changeFeePercentage"" [label=""changeFeePercentage""];
""790_changeAndBuy"" [label=""changeAndBuy""];
""790_setManager"" [label=""setManager""];
""790_constructor"" [label=""constructor""];
""790_setToken"" [label=""setToken""];
""790_changeTVTokenAddress"" [label=""changeTVTokenAddress""];
""790_setWallet"" [label=""setWallet""];
""790_convertBytesToBytes32"" [label=""convertBytesToBytes32""];
""790_toBytes"" [label=""toBytes""];
""790_onTokenReceived"" [label=""onTokenReceived""];
""790_cancel"" [label=""cancel""];
""790_changeTVCrowdsaleAddress"" -> ""790_onlyOwnerOrManager"";
""790_setToken"" -> ""790_onlyOwnerOrManager"";
""790_setWallet"" -> ""790_onlyOwnerOrManager"";
""790_changeTVTokenAddress"" -> ""790_onlyOwnerOrManager"";
""790_onTokenReceived"" -> ""790_convertBytesToBytes32"";
""790_onERC721Received"" -> ""790_convertBytesToBytes32"";
""790_changeFeePercentage"" -> ""790_onlyOwnerOrManager"";
""790_setManager"" -> ""790_onlyOwner"";
""790_changeAndBuy"" -> ""790_toBytes"";
}
"
0x85b794252e7f1b2b24392a5267ff2086c0c3d7d1.sol,CashPokerProPreICO,"contract CashPokerProPreICO is Ownable, Pausable { using SafeMath for uint; address public tokenWallet; uint public tokensSold; uint public weiRaised; uint public investorCount; Token public token; uint constant minInvest = 0.01 ether; uint constant tokensLimit = 10000000 * 1 ether; uint256 public startTime = 1503770400; uint256 public endTime = 1504893600; uint price = 0.00017 * 1 ether; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function CashPokerProPreICO() { tokenWallet = msg.sender; }",1,"subgraph cluster_489_CashPokerProPreICO {
label=""CashPokerProPreICO"";
""489_fallback"" [label=""fallback""];
""489_setTokenWallet"" [label=""setTokenWallet""];
""489_withdrawal"" [label=""withdrawal""];
""489_setToken"" [label=""setToken""];
""489_buyTokens"" [label=""buyTokens""];
""489_transfer"" [label=""transfer""];
""489_CashPokerProPreICO"" [label=""CashPokerProPreICO""];
""489_setTokenWallet"" -> ""489_onlyOwner"";
""489_withdrawal"" -> ""489_onlyOwner"";
""489_setToken"" -> ""489_onlyOwner"";
""489_buyTokens"" -> ""489_whenNotPaused"";
""489_transfer"" -> ""489_onlyOwner"";
""489_fallback"" -> ""489_buyTokens"";
}
"
0x514bc174df04a4b04ae2be81ee8c788c3796b06b.sol,Deco,contract Deco is ERC20ERC223 { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant totalSupply = 6*10**26; mapping(address => Account) private accounts; struct Account { uint256 balance; mapping(address => uint256) allowed; mapping(address => bool) isAllowanceAuthorized; },1,"subgraph cluster_615_Deco {
label=""Deco"";
""615_hasApproval"" [label=""hasApproval""];
""615_allowance"" [label=""allowance""];
""615_removeApproval"" [label=""removeApproval""];
""615_balanceOf"" [label=""balanceOf""];
""615_approve"" [label=""approve""];
""615_isContract"" [label=""isContract""];
""615_transfer"" [label=""transfer""];
""615_Deco"" [label=""Deco""];
""615_transferFrom"" [label=""transferFrom""];
""615_performTransfer"" [label=""performTransfer""];
""615_transfer"" -> ""615_performTransfer"";
""615_transferFrom"" -> ""615_performTransfer"";
""615_transferFrom"" -> ""615_hasApproval"";
""615_performTransfer"" -> ""615_isContract"";
""615_transfer"" -> ""615_onlyPayloadSize"";
""615_transferFrom"" -> ""615_onlyPayloadSize"";
}
"
0x18f0cd26c06449d967ca6aef8b5f9d8ee9fd7992.sol,Exch,"contract Exch is SafeMath { address public admin; address public feeAccount; address public accountLevelsAddr; uint public feeMake; uint public feeTake; uint public feeRebate; mapping (address => mapping (address => uint)) public tokens; mapping (address => mapping (bytes32 => bool)) public orders; mapping (address => mapping (bytes32 => uint)) public orderFills; mapping (address => bool) public whiteListERC20; mapping (address => bool) public whiteListERC223; event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user); event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s); event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give); event Deposit(address token, address user, uint amount, uint balance); event Withdraw(address token, address user, uint amount, uint balance); modifier onlyAdmin() { require(msg.sender==admin); _; }",1,"subgraph cluster_1411_Exch {
label=""Exch"";
""1411_withdrawToken"" [label=""withdrawToken""];
""1411_changeAccountLevelsAddr"" [label=""changeAccountLevelsAddr""];
""1411_setBlackListERC223"" [label=""setBlackListERC223""];
""1411_constructor"" [label=""constructor""];
""1411_amountFilled"" [label=""amountFilled""];
""1411_setWhiteListERC20"" [label=""setWhiteListERC20""];
""1411_changeFeeTake"" [label=""changeFeeTake""];
""1411_availableVolume"" [label=""availableVolume""];
""1411_trade"" [label=""trade""];
""1411_changeFeeMake"" [label=""changeFeeMake""];
""1411_depositToken"" [label=""depositToken""];
""1411_changeFeeRebate"" [label=""changeFeeRebate""];
""1411_tradeBalances"" [label=""tradeBalances""];
""1411_changeAdmin"" [label=""changeAdmin""];
""1411_withdraw"" [label=""withdraw""];
""1411_fallback"" [label=""fallback""];
""1411_balanceOf"" [label=""balanceOf""];
""1411_deposit"" [label=""deposit""];
""1411_cancelOrder"" [label=""cancelOrder""];
""1411_tokenFallback"" [label=""tokenFallback""];
""1411_setBlackListERC20"" [label=""setBlackListERC20""];
""1411_setWhiteListERC223"" [label=""setWhiteListERC223""];
""1411_changeFeeAccount"" [label=""changeFeeAccount""];
""1411_testTrade"" [label=""testTrade""];
""1411_order"" [label=""order""];
""1411_setWhiteListERC20"" -> ""1411_onlyAdmin"";
""1411_tokenFallback"" -> ""1411_safeAdd"";
""1411_depositToken"" -> ""1411_safeAdd"";
""1411_withdrawToken"" -> ""1411_safeSub"";
""1411_availableVolume"" -> ""1411_safeMul"";
""1411_availableVolume"" -> ""1411_safeSub"";
""1411_deposit"" -> ""1411_safeAdd"";
""1411_withdraw"" -> ""1411_safeSub"";
""1411_setBlackListERC20"" -> ""1411_onlyAdmin"";
""1411_setBlackListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeAccount"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_tradeBalances"";
""1411_changeFeeTake"" -> ""1411_onlyAdmin"";
""1411_trade"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeSub"";
""1411_changeFeeRebate"" -> ""1411_onlyAdmin"";
""1411_testTrade"" -> ""1411_availableVolume"";
""1411_changeAccountLevelsAddr"" -> ""1411_onlyAdmin"";
""1411_changeAdmin"" -> ""1411_onlyAdmin"";
""1411_tradeBalances"" -> ""1411_safeAdd"";
""1411_tradeBalances"" -> ""1411_safeMul"";
""1411_setWhiteListERC223"" -> ""1411_onlyAdmin"";
""1411_changeFeeMake"" -> ""1411_onlyAdmin"";
}
"
0x44f958d420f0543353a5e4f14e827d73f01b4261.sol,EBBToken,"contract EBBToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 5963; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_849_EBBToken {
label=""EBBToken"";
""849_decreaseSupply"" [label=""decreaseSupply""];
""849_increaseSupply"" [label=""increaseSupply""];
""849_stopFunding"" [label=""stopFunding""];
""849_changeOwner"" [label=""changeOwner""];
""849_transferETH"" [label=""transferETH""];
""849_setMigrateContract"" [label=""setMigrateContract""];
""849_allocateToken"" [label=""allocateToken""];
""849_startFunding"" [label=""startFunding""];
""849_fallback"" [label=""fallback""];
""849_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""849_EBBToken"" [label=""EBBToken""];
""849_migrate"" [label=""migrate""];
""849_formatDecimals"" [label=""formatDecimals""];
""849_migrate"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_formatDecimals"";
""849_decreaseSupply"" -> ""849_safeSubtract"";
""849_transferETH"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_isOwner"";
""849_startFunding"" -> ""849_isOwner"";
""849_fallback"" -> ""849_safeMult"";
""849_allocateToken"" -> ""849_safeMult"";
""849_increaseSupply"" -> ""849_isOwner"";
""849_setMigrateContract"" -> ""849_isOwner"";
""849_EBBToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_safeAdd"";
""849_setTokenExchangeRate"" -> ""849_isOwner"";
""849_changeOwner"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_formatDecimals"";
""849_fallback"" -> ""849_safeAdd"";
""849_stopFunding"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_isOwner"";
}
"
0x9ac36892387ed90df9af3de1b7082153f08f3ef8.sol,DSProxy,"contract DSProxy is DSAuth, DSNote { DSProxyCache public cache; constructor(address _cacheAddr) public { require(setCache(_cacheAddr)); }",1,"subgraph cluster_394_DSProxyCache {
label=""DSProxyCache"";
""394_write"" [label=""write""];
""394_read"" [label=""read""];
}
"
0xee91e81927bb047ea0f4b24e43dd5dc0684827a0.sol,BINGToken,contract BINGToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 1000000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function BINGToken () { owner = msg.sender; },1,"subgraph cluster_756_BINGToken {
label=""BINGToken"";
""756_setOwner"" [label=""setOwner""];
""756_totalSupply"" [label=""totalSupply""];
""756_BINGToken"" [label=""BINGToken""];
""756_createTokens"" [label=""createTokens""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_transfer"" [label=""transfer""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_approve"" [label=""approve""];
""756_transferFrom"" [label=""transferFrom""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_refundTokens"" [label=""refundTokens""];
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
""756_approve"" -> ""756_approve"";
""756_transfer"" -> ""756_transfer"";
""756_createTokens"" -> ""756_safeSub"";
}
"
0x5af9ec6df6edea0761fa841ce56c2e4deb000b31.sol,ZebiCoinTempMgr,contract ZebiCoinTempMgr is Ownable{ using SafeMath for uint256; address public wallet; ZebiCoinCrowdsale public preSaleCSSC; ZebiCoin public tsc; uint64 tokenDecimals; mapping(address => bool) preSaleCancelledList; mapping(address => uint256) noncsAllocations; bool public withinRefundPeriod; mapping(address => uint256) preSaleRefunds; modifier inPreSaleCancelledList { require(preSaleCancelledList[msg.sender]); _; },1,"subgraph cluster_1923_ZebiCoinTempMgr {
label=""ZebiCoinTempMgr"";
""1923_allocatenonCSTokens"" [label=""allocatenonCSTokens""];
""1923_endTransfer"" [label=""endTransfer""];
""1923_enableRefundPeriod"" [label=""enableRefundPeriod""];
""1923_takeEth"" [label=""takeEth""];
""1923_withdraw"" [label=""withdraw""];
""1923_viewNoncsallocations"" [label=""viewNoncsallocations""];
""1923_viewPreSaleRefunds"" [label=""viewPreSaleRefunds""];
""1923_disableRefundPeriod"" [label=""disableRefundPeriod""];
""1923_ZebiCoinTempMgr"" [label=""ZebiCoinTempMgr""];
""1923_resumeMint"" [label=""resumeMint""];
""1923_startTransfer"" [label=""startTransfer""];
""1923_revertNoncsallocation"" [label=""revertNoncsallocation""];
""1923_forcedRefund"" [label=""forcedRefund""];
""1923_finishMint"" [label=""finishMint""];
""1923_addCancellation"" [label=""addCancellation""];
""1923_transferTokenOwnership"" [label=""transferTokenOwnership""];
""1923_refund"" [label=""refund""];
""1923_viewPreSaleCancelledList"" [label=""viewPreSaleCancelledList""];
""1923_refund"" -> ""1923_inPreSaleCancelledList"";
""1923_addCancellation"" -> ""1923_onlyOwner"";
""1923_refund"" -> ""1923_inRefundPeriod"";
""1923_revertNoncsallocation"" -> ""1923_onlyOwner"";
""1923_disableRefundPeriod"" -> ""1923_onlyOwner"";
""1923_startTransfer"" -> ""1923_onlyOwner"";
""1923_transferTokenOwnership"" -> ""1923_onlyOwner"";
""1923_withdraw"" -> ""1923_onlyOwner"";
""1923_enableRefundPeriod"" -> ""1923_onlyOwner"";
""1923_allocatenonCSTokens"" -> ""1923_onlyOwner"";
""1923_endTransfer"" -> ""1923_onlyOwner"";
""1923_forcedRefund"" -> ""1923_onlyOwner"";
""1923_resumeMint"" -> ""1923_onlyOwner"";
""1923_finishMint"" -> ""1923_onlyOwner"";
}
"
0xa5e5be69c923c701ae6ac8f1f5936af3ae610c68.sol,Collectables,"contract Collectables is ERC721Full(, ), Ownable { using Strings for string; mapping(uint32 => address) public delegates; uint32[] public collectables; uint public delegateCount; event DelegateAdded(address indexed delegate, uint32 indexed delegateID); function addDelegate(address delegate) public onlyOwner { uint32 delegateID = uint32(delegateCount++); require(delegates[delegateID] == address(0), ); delegates[delegateID] = delegate; emit DelegateAdded(delegate, delegateID); }",1,"subgraph cluster_2118_Collectables {
label=""Collectables"";
""2118_getTokenDelegate"" [label=""getTokenDelegate""];
""2118_safeTransferFrom"" [label=""safeTransferFrom""];
""2118_addDelegate"" [label=""addDelegate""];
""2118_mint"" [label=""mint""];
""2118_getDelegate"" [label=""getDelegate""];
""2118_tokenURI"" [label=""tokenURI""];
""2118_transferFrom"" [label=""transferFrom""];
""2118_approve"" [label=""approve""];
""2118_approve"" -> ""2118_approve"";
""2118_addDelegate"" -> ""2118_onlyOwner"";
""2118_transferFrom"" -> ""2118_transferFrom"";
""2118_mint"" -> ""2118__mint"";
""2118_transferFrom"" -> ""2118_getTokenDelegate"";
""2118_approve"" -> ""2118_getTokenDelegate"";
""2118_tokenURI"" -> ""2118__exists"";
""2118_safeTransferFrom"" -> ""2118_getTokenDelegate"";
""2118_mint"" -> ""2118_getDelegate"";
""2118_safeTransferFrom"" -> ""2118_safeTransferFrom"";
}
"
0x4cf488387f035ff08c371515562cba712f9015d4.sol,WPR,"contract WPR is MintableToken, PausableToken { string constant public name = ; string constant public symbol = ; uint constant public decimals = 18; function WPR() { }",1,"subgraph cluster_880_WPR {
label=""WPR"";
""880_WPR"" [label=""WPR""];
""880_claimTokens"" [label=""claimTokens""];
""880_disown"" [label=""disown""];
""880_disown"" -> ""880_onlyOwner"";
""880_claimTokens"" -> ""880_onlyOwner"";
}
"
0xa2edca10311a70883c5019b51048f55fd1508fe6.sol,FoMo3DshortAgain,"contract FoMo3DshortAgain is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0xF6b8836492f8332D17B1496828d2bEE71ad511DA); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 30 minutes; uint256 private rndGap_ = 30 minutes; uint256 constant private rndInit_ = 30 minutes; uint256 constant private rndInc_ = 10 seconds; uint256 constant private rndMax_ = 30 minutes; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(30,6); fees_[1] = F3Ddatasets.TeamFee(43,0); fees_[2] = F3Ddatasets.TeamFee(56,10); fees_[3] = F3Ddatasets.TeamFee(43,8); potSplit_[0] = F3Ddatasets.PotSplit(15,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(30,10); }",1,"subgraph cluster_4209_FoMo3DshortAgain {
label=""FoMo3DshortAgain"";
""4209_determinePID"" [label=""determinePID""];
""4209_distributeInternal"" [label=""distributeInternal""];
""4209_reLoadCore"" [label=""reLoadCore""];
""4209_verifyTeam"" [label=""verifyTeam""];
""4209_reLoadXid"" [label=""reLoadXid""];
""4209_updateGenVault"" [label=""updateGenVault""];
""4209_reLoadXname"" [label=""reLoadXname""];
""4209_airdrop"" [label=""airdrop""];
""4209_fallback"" [label=""fallback""];
""4209_buyXid"" [label=""buyXid""];
""4209_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4209_getBuyPrice"" [label=""getBuyPrice""];
""4209_potSwap"" [label=""potSwap""];
""4209_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4209_buyXaddr"" [label=""buyXaddr""];
""4209_activate"" [label=""activate""];
""4209_constructor"" [label=""constructor""];
""4209_iWantXKeys"" [label=""iWantXKeys""];
""4209_getTimeLeft"" [label=""getTimeLeft""];
""4209_withdraw"" [label=""withdraw""];
""4209_registerNameXaddr"" [label=""registerNameXaddr""];
""4209_endTx"" [label=""endTx""];
""4209_managePlayer"" [label=""managePlayer""];
""4209_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4209_core"" [label=""core""];
""4209_buyXname"" [label=""buyXname""];
""4209_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4209_endRound"" [label=""endRound""];
""4209_registerNameXname"" [label=""registerNameXname""];
""4209_registerNameXID"" [label=""registerNameXID""];
""4209_updateTimer"" [label=""updateTimer""];
""4209_withdrawEarnings"" [label=""withdrawEarnings""];
""4209_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4209_calcKeysReceived"" [label=""calcKeysReceived""];
""4209_getPlayerVaults"" [label=""getPlayerVaults""];
""4209_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4209_distributeExternal"" [label=""distributeExternal""];
""4209_updateMasks"" [label=""updateMasks""];
""4209_buyCore"" [label=""buyCore""];
""4209_reLoadXaddr"" [label=""reLoadXaddr""];
""4209_buyXid"" -> ""4209_verifyTeam"";
""4209_buyXname"" -> ""4209_verifyTeam"";
""4209_reLoadCore"" -> ""4209_core"";
""4209_buyXaddr"" -> ""4209_verifyTeam"";
""4209_core"" -> ""4209_updateTimer"";
""4209_managePlayer"" -> ""4209_updateGenVault"";
""4209_buyXaddr"" -> ""4209_determinePID"";
""4209_reLoadXid"" -> ""4209_isHuman"";
""4209_buyXid"" -> ""4209_isActivated"";
""4209_buyCore"" -> ""4209_endRound"";
""4209_buyXname"" -> ""4209_determinePID"";
""4209_reLoadCore"" -> ""4209_endRound"";
""4209_getPlayerVaults"" -> ""4209_calcUnMaskedEarnings"";
""4209_buyXname"" -> ""4209_buyCore"";
""4209_buyXid"" -> ""4209_determinePID"";
""4209_reLoadXid"" -> ""4209_isActivated"";
""4209_reLoadXname"" -> ""4209_verifyTeam"";
""4209_withdraw"" -> ""4209_endRound"";
""4209_distributeInternal"" -> ""4209_updateMasks"";
""4209_fallback"" -> ""4209_buyCore"";
""4209_buyXid"" -> ""4209_isHuman"";
""4209_withdraw"" -> ""4209_isActivated"";
""4209_core"" -> ""4209_managePlayer"";
""4209_registerNameXname"" -> ""4209_isHuman"";
""4209_reLoadXaddr"" -> ""4209_isWithinLimits"";
""4209_reLoadXname"" -> ""4209_isWithinLimits"";
""4209_reLoadXname"" -> ""4209_isHuman"";
""4209_reLoadXid"" -> ""4209_reLoadCore"";
""4209_buyXaddr"" -> ""4209_isActivated"";
""4209_registerNameXaddr"" -> ""4209_isHuman"";
""4209_reLoadXaddr"" -> ""4209_reLoadCore"";
""4209_buyXaddr"" -> ""4209_isHuman"";
""4209_reLoadXname"" -> ""4209_isActivated"";
""4209_core"" -> ""4209_distributeExternal"";
""4209_buyXname"" -> ""4209_isActivated"";
""4209_buyXname"" -> ""4209_isHuman"";
""4209_reLoadXname"" -> ""4209_reLoadCore"";
""4209_fallback"" -> ""4209_isWithinLimits"";
""4209_reLoadXaddr"" -> ""4209_isActivated"";
""4209_fallback"" -> ""4209_isHuman"";
""4209_reLoadXaddr"" -> ""4209_verifyTeam"";
""4209_core"" -> ""4209_airdrop"";
""4209_fallback"" -> ""4209_determinePID"";
""4209_getPlayerInfoByAddress"" -> ""4209_calcUnMaskedEarnings"";
""4209_withdraw"" -> ""4209_withdrawEarnings"";
""4209_reLoadXid"" -> ""4209_isWithinLimits"";
""4209_buyXid"" -> ""4209_isWithinLimits"";
""4209_registerNameXID"" -> ""4209_isHuman"";
""4209_reLoadXid"" -> ""4209_verifyTeam"";
""4209_reLoadXaddr"" -> ""4209_isHuman"";
""4209_getPlayerVaults"" -> ""4209_getPlayerVaultsHelper"";
""4209_buyXaddr"" -> ""4209_buyCore"";
""4209_core"" -> ""4209_endTx"";
""4209_core"" -> ""4209_distributeInternal"";
""4209_updateGenVault"" -> ""4209_calcUnMaskedEarnings"";
""4209_buyXname"" -> ""4209_isWithinLimits"";
""4209_withdrawEarnings"" -> ""4209_updateGenVault"";
""4209_buyXid"" -> ""4209_buyCore"";
""4209_buyCore"" -> ""4209_core"";
""4209_withdraw"" -> ""4209_isHuman"";
""4209_fallback"" -> ""4209_isActivated"";
""4209_reLoadCore"" -> ""4209_withdrawEarnings"";
""4209_buyXaddr"" -> ""4209_isWithinLimits"";
}
"
0x5155a0722a45905dacf49598a02eff3777340acd.sol,RegistryUpdater,"contract RegistryUpdater is Ownable { address public polymathRegistry; address public moduleRegistry; address public securityTokenRegistry; address public featureRegistry; address public polyToken; constructor (address _polymathRegistry) public { require(_polymathRegistry != address(0), ); polymathRegistry = _polymathRegistry; }",1,"subgraph cluster_1350_RegistryUpdater {
label=""RegistryUpdater"";
""1350_constructor"" [label=""constructor""];
""1350_updateFromRegistry"" [label=""updateFromRegistry""];
""1350_updateFromRegistry"" -> ""1350_onlyOwner"";
}
"
0x3420894bf786866a09937b0369d5b4781870c21f.sol,LikeCoin,"contract LikeCoin is ERC20, HasOperator { using SafeMath for uint256; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public supply = 0; mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; address public crowdsaleAddr = 0x0; address public contributorPoolAddr = 0x0; uint256 public contributorPoolMintQuota = 0; address[] public creatorsPoolAddrs; mapping(address => bool) isCreatorsPool; uint256 public creatorsPoolMintQuota = 0; mapping(address => uint256) public lockedBalances; uint public unlockTime = 0; SignatureChecker public signatureChecker = SignatureChecker(0x0); bool public signatureCheckerFreezed = false; address public signatureOwner = 0x0; bool public allowDelegate = true; mapping (address => mapping (uint256 => bool)) public usedNonce; mapping (address => bool) public transferAndCallWhitelist; event Lock(address indexed _addr, uint256 _value); event SignatureCheckerChanged(address _newSignatureChecker); function LikeCoin(uint256 _initialSupply, address _signatureOwner, address _sigCheckerAddr) public { supply = _initialSupply; balances[owner] = _initialSupply; signatureOwner = _signatureOwner; signatureChecker = SignatureChecker(_sigCheckerAddr); Transfer(0x0, owner, _initialSupply); }",1,"subgraph cluster_1696_LikeCoin {
label=""LikeCoin"";
""1696_switchDelegate"" [label=""switchDelegate""];
""1696_transfer"" [label=""transfer""];
""1696__transfer"" [label=""_transfer""];
""1696_transferDelegated"" [label=""transferDelegated""];
""1696_registerContributorPool"" [label=""registerContributorPool""];
""1696_registerCreatorsPools"" [label=""registerCreatorsPools""];
""1696_transferAndCall"" [label=""transferAndCall""];
""1696_transferMultipleDelegated"" [label=""transferMultipleDelegated""];
""1696__transferMultiple"" [label=""_transferMultiple""];
""1696_allowance"" [label=""allowance""];
""1696_totalSupply"" [label=""totalSupply""];
""1696_setSignatureChecker"" [label=""setSignatureChecker""];
""1696_removeTransferAndCallWhitelist"" [label=""removeTransferAndCallWhitelist""];
""1696__tryUnlockBalance"" [label=""_tryUnlockBalance""];
""1696_transferAndCallDelegated"" [label=""transferAndCallDelegated""];
""1696_mintForCreatorsPool"" [label=""mintForCreatorsPool""];
""1696_freezeSignatureChecker"" [label=""freezeSignatureChecker""];
""1696_LikeCoin"" [label=""LikeCoin""];
""1696_addTransferAndCallWhitelist"" [label=""addTransferAndCallWhitelist""];
""1696_transferMultiple"" [label=""transferMultiple""];
""1696_approve"" [label=""approve""];
""1696_registerCrowdsales"" [label=""registerCrowdsales""];
""1696_transferAndLock"" [label=""transferAndLock""];
""1696_balanceOf"" [label=""balanceOf""];
""1696_mintForContributorPool"" [label=""mintForContributorPool""];
""1696__transferAndCall"" [label=""_transferAndCall""];
""1696__isContract"" [label=""_isContract""];
""1696_transferFrom"" [label=""transferFrom""];
""1696_burn"" [label=""burn""];
""1696_transferMultipleDelegated"" -> ""1696__transferMultiple"";
""1696_transferAndCall"" -> ""1696__transferAndCall"";
""1696__transfer"" -> ""1696__tryUnlockBalance"";
""1696__transferAndCall"" -> ""1696__isContract"";
""1696_transferDelegated"" -> ""1696__transfer"";
""1696_registerContributorPool"" -> ""1696__isContract"";
""1696_registerCrowdsales"" -> ""1696__isContract"";
""1696_transferMultiple"" -> ""1696__transferMultiple"";
""1696_removeTransferAndCallWhitelist"" -> ""1696_ownerOrOperator"";
""1696_registerCrowdsales"" -> ""1696_onlyOwner"";
""1696_registerCreatorsPools"" -> ""1696_onlyOwner"";
""1696_transferFrom"" -> ""1696__transfer"";
""1696_transferDelegated"" -> ""1696_isDelegated"";
""1696_registerCreatorsPools"" -> ""1696__isContract"";
""1696_transferMultipleDelegated"" -> ""1696_isDelegated"";
""1696_switchDelegate"" -> ""1696_ownerOrOperator"";
""1696__transferMultiple"" -> ""1696__tryUnlockBalance"";
""1696__transferAndCall"" -> ""1696__transfer"";
""1696_transfer"" -> ""1696__transfer"";
""1696_addTransferAndCallWhitelist"" -> ""1696__isContract"";
""1696_addTransferAndCallWhitelist"" -> ""1696_ownerOrOperator"";
""1696_transferAndCallDelegated"" -> ""1696__transferAndCall"";
""1696_registerContributorPool"" -> ""1696_onlyOwner"";
""1696_transferAndCallDelegated"" -> ""1696_isDelegated"";
}
"
0xb4a3fb248d39370c1f8081b73fa7098167c8142b.sol,LPCWalletReserveWrapper,"contract LPCWalletReserveWrapper is DSThing { ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee); address public walletReserve; WETH public weth; ERC20 public dai; SaiLPC public lpc; function LPCWalletReserveWrapper(address walletReserve_, WETH weth_, ERC20 dai_, SaiLPC lpc_) public { assert(address(walletReserve_) != 0); assert(address(weth_) != 0); assert(address(dai_) != 0); assert(address(lpc_) != 0); walletReserve = walletReserve_; weth = weth_; lpc = lpc_; dai = dai_; }",1,"subgraph cluster_1844_LPCWalletReserveWrapper {
label=""LPCWalletReserveWrapper"";
""1844_switchReserve"" [label=""switchReserve""];
""1844_withdraw"" [label=""withdraw""];
""1844_switchLPC"" [label=""switchLPC""];
""1844_approveToken"" [label=""approveToken""];
""1844_take"" [label=""take""];
""1844_LPCWalletReserveWrapper"" [label=""LPCWalletReserveWrapper""];
""1844_approveToken"" -> ""1844_note"";
""1844_switchReserve"" -> ""1844_note"";
""1844_take"" -> ""1844_wdiv"";
""1844_switchReserve"" -> ""1844_auth"";
""1844_switchLPC"" -> ""1844_auth"";
""1844_withdraw"" -> ""1844_note"";
""1844_take"" -> ""1844_auth"";
""1844_switchLPC"" -> ""1844_note"";
""1844_approveToken"" -> ""1844_auth"";
""1844_take"" -> ""1844_wmul"";
""1844_withdraw"" -> ""1844_auth"";
}
"
0xdc919494349e803fbd2d4064106944418381edb3.sol,SaiTub,"contract SaiTub is DSThing, SaiTubEvents { DSToken public sai; DSToken public sin; DSToken public skr; ERC20 public gem; DSToken public gov; SaiVox public vox; DSValue public pip; DSValue public pep; address public tap; address public pit; uint256 public axe; uint256 public cap; uint256 public mat; uint256 public tax; uint256 public fee; uint256 public gap; bool public off; bool public out; uint256 public fit; uint256 public rho; uint256 _chi; uint256 _rhi; uint256 public rum; uint256 public cupi; mapping (bytes32 => Cup) public cups; struct Cup { address lad; uint256 ink; uint256 art; uint256 ire; }",1,"subgraph cluster_2781_SaiTub {
label=""SaiTub"";
""2781_bite"" [label=""bite""];
""2781_ask"" [label=""ask""];
""2781_lad"" [label=""lad""];
""2781_drip"" [label=""drip""];
""2781_tag"" [label=""tag""];
""2781_air"" [label=""air""];
""2781_give"" [label=""give""];
""2781_chi"" [label=""chi""];
""2781_lock"" [label=""lock""];
""2781_era"" [label=""era""];
""2781_exit"" [label=""exit""];
""2781_per"" [label=""per""];
""2781_ink"" [label=""ink""];
""2781_free"" [label=""free""];
""2781_flow"" [label=""flow""];
""2781_setVox"" [label=""setVox""];
""2781_din"" [label=""din""];
""2781_join"" [label=""join""];
""2781_tab"" [label=""tab""];
""2781_shut"" [label=""shut""];
""2781_rhi"" [label=""rhi""];
""2781_turn"" [label=""turn""];
""2781_mold"" [label=""mold""];
""2781_open"" [label=""open""];
""2781_safe"" [label=""safe""];
""2781_wipe"" [label=""wipe""];
""2781_rap"" [label=""rap""];
""2781_draw"" [label=""draw""];
""2781_setPep"" [label=""setPep""];
""2781_setPip"" [label=""setPip""];
""2781_cage"" [label=""cage""];
""2781_pie"" [label=""pie""];
""2781_bid"" [label=""bid""];
""2781_SaiTub"" [label=""SaiTub""];
""2781_lock"" -> ""2781_add"";
""2781_chi"" -> ""2781_drip"";
""2781_open"" -> ""2781_add"";
""2781_wipe"" -> ""2781_wdiv"";
""2781_tag"" -> ""2781_per"";
""2781_open"" -> ""2781_note"";
""2781_give"" -> ""2781_note"";
""2781_ask"" -> ""2781_rmul"";
""2781_SaiTub"" -> ""2781_era"";
""2781_setPip"" -> ""2781_note"";
""2781_setPep"" -> ""2781_auth"";
""2781_wipe"" -> ""2781_rhi"";
""2781_cage"" -> ""2781_note"";
""2781_bite"" -> ""2781_sub"";
""2781_rap"" -> ""2781_tab"";
""2781_wipe"" -> ""2781_tab"";
""2781_free"" -> ""2781_safe"";
""2781_rap"" -> ""2781_sub"";
""2781_exit"" -> ""2781_note"";
""2781_drip"" -> ""2781_note"";
""2781_setPep"" -> ""2781_note"";
""2781_tab"" -> ""2781_rmul"";
""2781_rap"" -> ""2781_rhi"";
""2781_wipe"" -> ""2781_sub"";
""2781_free"" -> ""2781_note"";
""2781_bid"" -> ""2781_wmul"";
""2781_bite"" -> ""2781_rdiv"";
""2781_draw"" -> ""2781_note"";
""2781_drip"" -> ""2781_rmul"";
""2781_din"" -> ""2781_chi"";
""2781_flow"" -> ""2781_note"";
""2781_shut"" -> ""2781_tab"";
""2781_flow"" -> ""2781_auth"";
""2781_draw"" -> ""2781_chi"";
""2781_tag"" -> ""2781_wmul"";
""2781_mold"" -> ""2781_note"";
""2781_bite"" -> ""2781_note"";
""2781_rhi"" -> ""2781_drip"";
""2781_join"" -> ""2781_ask"";
""2781_drip"" -> ""2781_era"";
""2781_wipe"" -> ""2781_rdiv"";
""2781_mold"" -> ""2781_auth"";
""2781_wipe"" -> ""2781_note"";
""2781_safe"" -> ""2781_ink"";
""2781_wipe"" -> ""2781_rap"";
""2781_safe"" -> ""2781_rmul"";
""2781_per"" -> ""2781_pie"";
""2781_setVox"" -> ""2781_note"";
""2781_setVox"" -> ""2781_auth"";
""2781_ask"" -> ""2781_wmul"";
""2781_ask"" -> ""2781_per"";
""2781_bite"" -> ""2781_tag"";
""2781_cage"" -> ""2781_auth"";
""2781_din"" -> ""2781_rmul"";
""2781_tab"" -> ""2781_chi"";
""2781_draw"" -> ""2781_safe"";
""2781_wipe"" -> ""2781_add"";
""2781_safe"" -> ""2781_tag"";
""2781_setPip"" -> ""2781_auth"";
""2781_shut"" -> ""2781_wipe"";
""2781_safe"" -> ""2781_tab"";
""2781_drip"" -> ""2781_sub"";
""2781_bid"" -> ""2781_sub"";
""2781_mold"" -> ""2781_drip"";
""2781_drip"" -> ""2781_rpow"";
""2781_draw"" -> ""2781_rhi"";
""2781_bid"" -> ""2781_rmul"";
""2781_shut"" -> ""2781_ink"";
""2781_per"" -> ""2781_rdiv"";
""2781_lock"" -> ""2781_note"";
""2781_turn"" -> ""2781_note"";
""2781_wipe"" -> ""2781_rmul"";
""2781_wipe"" -> ""2781_chi"";
""2781_bite"" -> ""2781_safe"";
""2781_rap"" -> ""2781_rmul"";
""2781_bite"" -> ""2781_tab"";
""2781_shut"" -> ""2781_free"";
""2781_free"" -> ""2781_sub"";
""2781_draw"" -> ""2781_rdiv"";
""2781_join"" -> ""2781_note"";
""2781_draw"" -> ""2781_add"";
""2781_shut"" -> ""2781_note"";
""2781_bid"" -> ""2781_per"";
""2781_exit"" -> ""2781_bid"";
""2781_bite"" -> ""2781_rmul"";
}
"
0x6f9ef4d30498f23e7d3116e272b855597fba83bd.sol,P3DRaffle,contract P3DRaffle is Owned { using SafeMath for uint; HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe); function harvestabledivs() view public returns(uint256) { return ( P3Dcontract_.dividendsOf(address(this))) ; },1,"subgraph cluster_774_P3DRaffle {
label=""P3DRaffle"";
""774_raffleinfo"" [label=""raffleinfo""];
""774_harvestabledivs"" [label=""harvestabledivs""];
""774_devfeesoutstanding"" [label=""devfeesoutstanding""];
""774_startraffle"" [label=""startraffle""];
""774_validateraffle"" [label=""validateraffle""];
""774_nextlotnumber"" [label=""nextlotnumber""];
""774_pots"" [label=""pots""];
""774_nextrafflenumber"" [label=""nextrafflenumber""];
""774_FetchVanity"" [label=""FetchVanity""];
""774_buytickets"" [label=""buytickets""];
""774_fetchdivstopot"" [label=""fetchdivstopot""];
""774_devfeetodev"" [label=""devfeetodev""];
""774_fallback"" [label=""fallback""];
""774_changevanity"" [label=""changevanity""];
""774_constructor"" [label=""constructor""];
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0x359a46571d4bc22a6a9310038b51e2d91163412f.sol,TokenSale,"contract TokenSale is Pausable { using SafeMath for uint256; ServusTokenInterface public servusToken; uint256 public totalWeiRaised; uint256 public tokensMinted; uint256 public totalSupply; uint256 public contributors; uint256 public decimalsMultiplier; uint256 public startTime; uint256 public endTime; uint256 public remainingTokens; uint256 public allocatedTokens; bool public finalized; bool public servusTokensAllocated; address public servusMultiSig = 0x0cc3e09c8a52fa0313154321be706635cdbdec37; uint256 public constant BASE_PRICE_IN_WEI = 1000000000000000; uint256 public constant PUBLIC_TOKENS = 100000000 * (10 ** 6); uint256 public constant TOTAL_PRESALE_TOKENS = 50000000 * (10 ** 6); uint256 public constant TOKENS_ALLOCATED_TO_SERVUS = 100000000 * (10 ** 6); uint256 public tokenCap = PUBLIC_TOKENS - TOTAL_PRESALE_TOKENS; uint256 public cap = tokenCap; uint256 public weiCap = cap * BASE_PRICE_IN_WEI; uint256 public firstDiscountPrice = (BASE_PRICE_IN_WEI * 85) / 100; uint256 public secondDiscountPrice = (BASE_PRICE_IN_WEI * 90) / 100; uint256 public thirdDiscountPrice = (BASE_PRICE_IN_WEI * 95) / 100; uint256 public firstDiscountCap = (weiCap * 5) / 100; uint256 public secondDiscountCap = (weiCap * 10) / 100; uint256 public thirdDiscountCap = (weiCap * 20) / 100; bool public started = false; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event NewClonedToken(address indexed _cloneToken); event OnTransfer(address _from, address _to, uint _amount); event OnApprove(address _owner, address _spender, uint _amount); event LogInt(string _name, uint256 _value); event Finalized(); function TokenSale(address _tokenAddress, uint256 _startTime, uint256 _endTime) public { require(_tokenAddress != 0x0); require(_startTime > 0); require(_endTime > _startTime); startTime = _startTime; endTime = _endTime; servusToken = ServusTokenInterface(_tokenAddress); decimalsMultiplier = (10 ** 6); }",1,"subgraph cluster_2025_TokenSale {
label=""TokenSale"";
""2025_finalize"" [label=""finalize""];
""2025_getPriceInWei"" [label=""getPriceInWei""];
""2025_enableMasterTransfers"" [label=""enableMasterTransfers""];
""2025_buyTokens"" [label=""buyTokens""];
""2025_enableTransfers"" [label=""enableTransfers""];
""2025_lockTransfers"" [label=""lockTransfers""];
""2025_forwardFunds"" [label=""forwardFunds""];
""2025_isContract"" [label=""isContract""];
""2025_TokenSale"" [label=""TokenSale""];
""2025_changeController"" [label=""changeController""];
""2025_validPurchase"" [label=""validPurchase""];
""2025_balanceOf"" [label=""balanceOf""];
""2025_allocateServusTokens"" [label=""allocateServusTokens""];
""2025_totalSupply"" [label=""totalSupply""];
""2025_fallback"" [label=""fallback""];
""2025_lockMasterTransfers"" [label=""lockMasterTransfers""];
""2025_forceStart"" [label=""forceStart""];
""2025_buyTokens"" -> ""2025_validPurchase"";
""2025_forceStart"" -> ""2025_onlyOwner"";
""2025_buyTokens"" -> ""2025_forwardFunds"";
""2025_buyTokens"" -> ""2025_whenNotFinalized"";
""2025_lockMasterTransfers"" -> ""2025_onlyOwner"";
""2025_buyTokens"" -> ""2025_getPriceInWei"";
""2025_allocateServusTokens"" -> ""2025_whenNotFinalized"";
""2025_buyTokens"" -> ""2025_whenNotPaused"";
""2025_finalize"" -> ""2025_onlyOwner"";
""2025_changeController"" -> ""2025_isContract"";
""2025_enableMasterTransfers"" -> ""2025_onlyOwner"";
""2025_fallback"" -> ""2025_buyTokens"";
""2025_lockTransfers"" -> ""2025_onlyOwner"";
""2025_allocateServusTokens"" -> ""2025_onlyOwner"";
}
"
0x5af7af54e8bc34b293e356ef11fffe51d6f9ae78.sol,Sample,"contract Sample is Ownable { mapping (uint => address) internal tokensForOwner; mapping (address => uint[]) internal tokensOwned; mapping (uint => uint) internal tokenPosInArr; mapping (uint => uint) public tokenType; uint public numOfSamples; address public cryptoJingles; SampleStorage public sampleStorage; event Mint(address indexed _to, uint256 indexed _tokenId); modifier onlyCryptoJingles() { require(msg.sender == cryptoJingles); _; }",1,"subgraph cluster_256_SampleStorage {
label=""SampleStorage"";
""256_getType"" [label=""getType""];
""256_addNewSampleType"" [label=""addNewSampleType""];
""256_addNewSampleType"" -> ""256_onlyOwner"";
}
"
0x46c9f93c3249c430c6ca19f02240ef9e038ba9d1.sol,Escapable,"contract Escapable is Owned { address public escapeHatchCaller; address public escapeHatchDestination; mapping (address=>bool) private escapeBlacklist; function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) { escapeHatchCaller = _escapeHatchCaller; escapeHatchDestination = _escapeHatchDestination; }",1,"subgraph cluster_371_Escapable {
label=""Escapable"";
""371_Escapable"" [label=""Escapable""];
""371_escapeHatch"" [label=""escapeHatch""];
""371_changeEscapeCaller"" [label=""changeEscapeCaller""];
""371_isTokenEscapable"" [label=""isTokenEscapable""];
""371_blacklistEscapeToken"" [label=""blacklistEscapeToken""];
""371_changeEscapeCaller"" -> ""371_onlyEscapeHatchCallerOrOwner"";
""371_escapeHatch"" -> ""371_onlyEscapeHatchCallerOrOwner"";
}
"
0xc3e43d422d5e6f94315622d96a96058689c52ec8.sol,BitNauticCrowdsaleTokenDistributor,"contract BitNauticCrowdsaleTokenDistributor is Ownable { using SafeMath for uint256; uint256 public constant ICOStartTime = 1531267200; uint256 public constant ICOEndTime = 1536969600; uint256 public teamSupply = 3000000 * 10 ** 18; uint256 public bountySupply = 2500000 * 10 ** 18; uint256 public reserveSupply = 5000000 * 10 ** 18; uint256 public advisorSupply = 2500000 * 10 ** 18; uint256 public founderSupply = 2000000 * 10 ** 18; MintableToken public token; BitNauticWhitelist public whitelist; BitNauticCrowdsale public crowdsale; mapping (address => bool) public hasClaimedTokens; constructor(MintableToken _token, BitNauticWhitelist _whitelist, BitNauticCrowdsale _crowdsale) public { token = _token; whitelist = _whitelist; crowdsale = _crowdsale; }",1,"subgraph cluster_494_BitNauticCrowdsaleTokenDistributor {
label=""BitNauticCrowdsaleTokenDistributor"";
""494_privateSale"" [label=""privateSale""];
""494_constructor"" [label=""constructor""];
""494_transferTokenOwnership"" [label=""transferTokenOwnership""];
""494_claimBitNauticTokens"" [label=""claimBitNauticTokens""];
""494_grantAdvisorsTokens"" [label=""grantAdvisorsTokens""];
""494_grantBountyTokens"" [label=""grantBountyTokens""];
""494_grantFoundersTokens"" [label=""grantFoundersTokens""];
""494_grantReserveTokens"" [label=""grantReserveTokens""];
""494_grantTeamTokens"" [label=""grantTeamTokens""];
""494_grantContributorTokens"" [label=""grantContributorTokens""];
""494_grantFoundersTokens"" -> ""494_onlyOwner"";
""494_grantReserveTokens"" -> ""494_onlyOwner"";
""494_privateSale"" -> ""494_onlyOwner"";
""494_transferTokenOwnership"" -> ""494_onlyOwner"";
""494_claimBitNauticTokens"" -> ""494_grantContributorTokens"";
""494_grantTeamTokens"" -> ""494_onlyOwner"";
""494_grantBountyTokens"" -> ""494_onlyOwner"";
""494_grantAdvisorsTokens"" -> ""494_onlyOwner"";
}
"
0xec841c878435ba4f28bf305a00c1483db0d96a20.sol,Events,contract Events { DBInterface public database; constructor(address _database) public{ database = DBInterface(_database); },1,"subgraph cluster_1000_Events {
label=""Events"";
""1000_escrow"" [label=""escrow""];
""1000_contractChange"" [label=""contractChange""];
""1000_consensus"" [label=""consensus""];
""1000_registration"" [label=""registration""];
""1000_operator"" [label=""operator""];
""1000_transaction"" [label=""transaction""];
""1000_asset"" [label=""asset""];
""1000_order"" [label=""order""];
""1000_message"" [label=""message""];
""1000_constructor"" [label=""constructor""];
""1000_exchange"" [label=""exchange""];
""1000_message"" -> ""1000_onlyApprovedContract"";
""1000_escrow"" -> ""1000_onlyApprovedContract"";
""1000_contractChange"" -> ""1000_onlyApprovedContract"";
""1000_exchange"" -> ""1000_onlyApprovedContract"";
""1000_registration"" -> ""1000_onlyApprovedContract"";
""1000_consensus"" -> ""1000_onlyApprovedContract"";
""1000_order"" -> ""1000_onlyApprovedContract"";
""1000_transaction"" -> ""1000_onlyApprovedContract"";
""1000_asset"" -> ""1000_onlyApprovedContract"";
""1000_operator"" -> ""1000_onlyApprovedContract"";
}
"
0x29632c10d76bd1aed6b1524bf5bde4c992610670.sol,ApplicationEntity,"contract ApplicationEntity { bytes32 sourceCodeUrl; bool public _initialized = false; bool public _locked = false; uint8 public CurrentEntityState; mapping (bytes32 => uint8) public EntityStates; address public GatewayInterfaceAddress; ABIGatewayInterface GatewayInterfaceEntity; ABIProposals public ProposalsEntity; ABIFunding public FundingEntity; ABIMilestones public MilestonesEntity; ABIMeetings public MeetingsEntity; ABIBountyManager public BountyManagerEntity; ABITokenManager public TokenManagerEntity; ABIListingContract public ListingContractEntity; ABIFundingManager public FundingManagerEntity; ABINewsContract public NewsContractEntity; mapping (bytes32 => address) public AssetCollection; mapping (uint8 => bytes32) public AssetCollectionIdToName; uint8 public AssetCollectionNum = 0; event EventAppEntityReady ( address indexed _address ); event EventAppEntityCodeUpgradeProposal ( address indexed _address, bytes32 indexed _sourceCodeUrl ); event EventAppEntityInitAsset ( bytes32 indexed _name, address indexed _address ); event EventAppEntityInitAssetsToThis ( uint8 indexed _assetNum ); event EventAppEntityAssetsToNewApplication ( address indexed _address ); event EventAppEntityLocked ( address indexed _address ); address public deployerAddress; function ApplicationEntity() public { deployerAddress = msg.sender; setEntityStates(); CurrentEntityState = getEntityState(); }",1,"subgraph cluster_236_ApplicationEntityABI {
label=""ApplicationEntityABI"";
""236_extendedAnyAssetHasChanges"" [label=""extendedAnyAssetHasChanges""];
""236_getBylawBytes32"" [label=""getBylawBytes32""];
""236_getTimestamp"" [label=""getTimestamp""];
""236_setUpgradeState"" [label=""setUpgradeState""];
""236_createCodeUpgradeProposal"" [label=""createCodeUpgradeProposal""];
""236_addAssetBountyManager"" [label=""addAssetBountyManager""];
""236_setBylawUint256"" [label=""setBylawUint256""];
""236_getEntityState"" [label=""getEntityState""];
""236_addAssetMeetings"" [label=""addAssetMeetings""];
""236_lock"" [label=""lock""];
""236_ApplicationEntity"" [label=""ApplicationEntity""];
""236_hasRequiredStateChanges"" [label=""hasRequiredStateChanges""];
""236_addAssetFundingManager"" [label=""addAssetFundingManager""];
""236_linkToGateway"" [label=""linkToGateway""];
""236_getAssetAddressByName"" [label=""getAssetAddressByName""];
""236_doStateChanges"" [label=""doStateChanges""];
""236_anyAssetHasChanges"" [label=""anyAssetHasChanges""];
""236_initializeAssetsToThisApplication"" [label=""initializeAssetsToThisApplication""];
""236_addAssetProposals"" [label=""addAssetProposals""];
""236_setBylawBytes32"" [label=""setBylawBytes32""];
""236_acceptCodeUpgradeProposal"" [label=""acceptCodeUpgradeProposal""];
""236_addAssetTokenManager"" [label=""addAssetTokenManager""];
""236_getRequiredStateChanges"" [label=""getRequiredStateChanges""];
""236_initialize"" [label=""initialize""];
""236_getParentAddress"" [label=""getParentAddress""];
""236_transferAssetsToNewApplication"" [label=""transferAssetsToNewApplication""];
""236_addAssetListingContract"" [label=""addAssetListingContract""];
""236_addAssetFunding"" [label=""addAssetFunding""];
""236_canInitiateCodeUpgrade"" [label=""canInitiateCodeUpgrade""];
""236_addAssetMilestones"" [label=""addAssetMilestones""];
""236_addAssetNewsContract"" [label=""addAssetNewsContract""];
""236_getBylawUint256"" [label=""getBylawUint256""];
}
"
0x6d84769b1e287a27f282a938c8110b22714dbf78.sol,ABIO_preICO,"contract ABIO_preICO is ABIO_BaseICO{ address ICOAddress; ABIO_ICO ICO; uint finalDeadline; constructor(address _abioAddress, uint _lenInMins, uint _minWeiInvestment, address _treasury, uint _priceInWei, uint _goalInWei){ treasury = _treasury; abioToken = ABIO_Token(_abioAddress); weiPerABIO = _priceInWei; fundingGoal = _goalInWei; minInvestment = _minWeiInvestment; startDate = now; length = _lenInMins * 1 minutes; }",1,"subgraph cluster_638_ABIO_preICO {
label=""ABIO_preICO"";
""638_supplyICOContract"" [label=""supplyICOContract""];
""638_constructor"" [label=""constructor""];
""638_goalReached"" [label=""goalReached""];
""638_extGoalReached"" [label=""extGoalReached""];
""638_safeWithdrawal"" [label=""safeWithdrawal""];
""638_extGoalReached"" -> ""638_goalReached"";
""638_supplyICOContract"" -> ""638_onlyOwner"";
""638_safeWithdrawal"" -> ""638_afterDeadline"";
""638_safeWithdrawal"" -> ""638_stopOnPause"";
""638_extGoalReached"" -> ""638_afterDeadline"";
""638_supplyICOContract"" -> ""638_goalReached"";
}
"
0x5b82f83eeb171f829e5ca6d2c6205cd22ce7b821.sol,FBBCToken,"contract FBBCToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 625; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_817_FBBCToken {
label=""FBBCToken"";
""817_transferETH"" [label=""transferETH""];
""817_stopFunding"" [label=""stopFunding""];
""817_allocateToken"" [label=""allocateToken""];
""817_setMigrateContract"" [label=""setMigrateContract""];
""817_startFunding"" [label=""startFunding""];
""817_changeOwner"" [label=""changeOwner""];
""817_decreaseSupply"" [label=""decreaseSupply""];
""817_FBBCToken"" [label=""FBBCToken""];
""817_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""817_fallback"" [label=""fallback""];
""817_formatDecimals"" [label=""formatDecimals""];
""817_migrate"" [label=""migrate""];
""817_allocateToken"" -> ""817_safeAdd"";
""817_setMigrateContract"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_safeMult"";
""817_decreaseSupply"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_safeSubtract"";
""817_startFunding"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_formatDecimals"";
""817_stopFunding"" -> ""817_isOwner"";
""817_migrate"" -> ""817_safeAdd"";
""817_fallback"" -> ""817_safeMult"";
""817_fallback"" -> ""817_safeAdd"";
""817_FBBCToken"" -> ""817_formatDecimals"";
""817_changeOwner"" -> ""817_isOwner"";
""817_transferETH"" -> ""817_isOwner"";
""817_setTokenExchangeRate"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_formatDecimals"";
}
"
0x750c1d91864171d7e1715a6b53ee28c72b8faa09.sol,EthicHubUser,"contract EthicHubUser is Ownable, EthicHubBase { event UserStatusChanged(address target, string profile, bool isRegistered); constructor(address _storageAddress) EthicHubBase(_storageAddress) public { version = 3; }",1,"subgraph cluster_660_EthicHubUser {
label=""EthicHubUser"";
""660_deleteUserStatus"" [label=""deleteUserStatus""];
""660_registerPaymentGateway"" [label=""registerPaymentGateway""];
""660_registerLocalNode"" [label=""registerLocalNode""];
""660_unregisterLocalNode"" [label=""unregisterLocalNode""];
""660_registerRepresentative"" [label=""registerRepresentative""];
""660_constructor"" [label=""constructor""];
""660_unregisterPaymentGateway"" [label=""unregisterPaymentGateway""];
""660_changeUserStatus"" [label=""changeUserStatus""];
""660_unregisterCommunity"" [label=""unregisterCommunity""];
""660_unregisterRepresentative"" [label=""unregisterRepresentative""];
""660_unregisterInvestor"" [label=""unregisterInvestor""];
""660_registerInvestor"" [label=""registerInvestor""];
""660_viewRegistrationStatus"" [label=""viewRegistrationStatus""];
""660_registerCommunity"" [label=""registerCommunity""];
""660_unregisterCommunity"" -> ""660_onlyOwner"";
""660_registerLocalNode"" -> ""660_changeUserStatus"";
""660_constructor"" -> ""660_constructor"";
""660_registerInvestor"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_deleteUserStatus"";
""660_unregisterLocalNode"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_onlyOwner"";
""660_unregisterRepresentative"" -> ""660_onlyOwner"";
""660_registerCommunity"" -> ""660_changeUserStatus"";
""660_registerLocalNode"" -> ""660_onlyOwner"";
""660_unregisterLocalNode"" -> ""660_deleteUserStatus"";
""660_registerCommunity"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_onlyOwner"";
""660_registerRepresentative"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_deleteUserStatus"";
""660_unregisterCommunity"" -> ""660_deleteUserStatus"";
""660_unregisterRepresentative"" -> ""660_deleteUserStatus"";
""660_deleteUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_changeUserStatus"";
""660_registerRepresentative"" -> ""660_changeUserStatus"";
""660_changeUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_onlyOwner"";
""660_registerInvestor"" -> ""660_changeUserStatus"";
}
"
0x44f958d420f0543353a5e4f14e827d73f01b4261.sol,EBBToken,"contract EBBToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 5963; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_849_EBBToken {
label=""EBBToken"";
""849_decreaseSupply"" [label=""decreaseSupply""];
""849_increaseSupply"" [label=""increaseSupply""];
""849_stopFunding"" [label=""stopFunding""];
""849_changeOwner"" [label=""changeOwner""];
""849_transferETH"" [label=""transferETH""];
""849_setMigrateContract"" [label=""setMigrateContract""];
""849_allocateToken"" [label=""allocateToken""];
""849_startFunding"" [label=""startFunding""];
""849_fallback"" [label=""fallback""];
""849_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""849_EBBToken"" [label=""EBBToken""];
""849_migrate"" [label=""migrate""];
""849_formatDecimals"" [label=""formatDecimals""];
""849_migrate"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_formatDecimals"";
""849_decreaseSupply"" -> ""849_safeSubtract"";
""849_transferETH"" -> ""849_isOwner"";
""849_allocateToken"" -> ""849_isOwner"";
""849_startFunding"" -> ""849_isOwner"";
""849_fallback"" -> ""849_safeMult"";
""849_allocateToken"" -> ""849_safeMult"";
""849_increaseSupply"" -> ""849_isOwner"";
""849_setMigrateContract"" -> ""849_isOwner"";
""849_EBBToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_formatDecimals"";
""849_allocateToken"" -> ""849_safeAdd"";
""849_setTokenExchangeRate"" -> ""849_isOwner"";
""849_changeOwner"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_formatDecimals"";
""849_fallback"" -> ""849_safeAdd"";
""849_stopFunding"" -> ""849_isOwner"";
""849_increaseSupply"" -> ""849_safeAdd"";
""849_decreaseSupply"" -> ""849_isOwner"";
}
"
0xc58f1f3ec051b51f10c4feb0cfd10d811d055ef5.sol,ldoh,"contract ldoh is EthereumSmartContract { event onCashbackCode (address indexed hodler, address cashbackcode); event onAffiliateBonus (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onClaimTokens (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onHoldplatform (address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime); event onAddContractAddress(address indexed contracthodler, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime); event onHoldplatformsetting(address indexed Tokenairdrop, bool HPM_status, uint256 HPM_divider, uint256 HPM_ratio, uint256 datetime); event onHoldplatformdeposit(uint256 amount, uint256 newbalance, uint256 datetime); event onHoldplatformwithdraw(uint256 amount, uint256 newbalance, uint256 datetime); event onReceiveAirdrop(uint256 amount, uint256 datetime); address public DefaultToken; struct Safe { uint256 id; uint256 amount; uint256 endtime; address user; address tokenAddress; string tokenSymbol; uint256 amountbalance; uint256 cashbackbalance; uint256 lasttime; uint256 percentage; uint256 percentagereceive; uint256 tokenreceive; uint256 lastwithdraw; address referrer; bool cashbackstatus; }",1,"subgraph cluster_2349_ldoh {
label=""ldoh"";
""2349_WithdrawAffiliate"" [label=""WithdrawAffiliate""];
""2349_HodlTokens4"" [label=""HodlTokens4""];
""2349_GetUserSafesLength"" [label=""GetUserSafesLength""];
""2349_TokenPrice"" [label=""TokenPrice""];
""2349_div"" [label=""div""];
""2349_AddContractAddress"" [label=""AddContractAddress""];
""2349_fallback"" [label=""fallback""];
""2349_Holdplatform"" [label=""Holdplatform""];
""2349_UnlockToken2"" [label=""UnlockToken2""];
""2349_Holdplatform_Airdrop"" [label=""Holdplatform_Airdrop""];
""2349_UnlockToken3"" [label=""UnlockToken3""];
""2349_mul"" [label=""mul""];
""2349_CashbackCode"" [label=""CashbackCode""];
""2349_GetTotalAffiliate"" [label=""GetTotalAffiliate""];
""2349_constructor"" [label=""constructor""];
""2349_ClaimTokens"" [label=""ClaimTokens""];
""2349_ReturnAllTokens"" [label=""ReturnAllTokens""];
""2349_Holdplatform_Withdraw"" [label=""Holdplatform_Withdraw""];
""2349_Holdplatform_Deposit"" [label=""Holdplatform_Deposit""];
""2349_UnlockToken4"" [label=""UnlockToken4""];
""2349_HodlTokens3"" [label=""HodlTokens3""];
""2349_AirdropToken"" [label=""AirdropToken""];
""2349_GetSafe"" [label=""GetSafe""];
""2349_sub"" [label=""sub""];
""2349_add"" [label=""add""];
""2349_HodlTokens2"" [label=""HodlTokens2""];
""2349_PayToken"" [label=""PayToken""];
""2349_UnlockToken4"" -> ""2349_sub"";
""2349_Holdplatform_Airdrop"" -> ""2349_div"";
""2349_AirdropToken"" -> ""2349_div"";
""2349_Holdplatform_Deposit"" -> ""2349_restricted"";
""2349_HodlTokens2"" -> ""2349_HodlTokens3"";
""2349_HodlTokens3"" -> ""2349_sub"";
""2349_AddContractAddress"" -> ""2349_restricted"";
""2349_Holdplatform"" -> ""2349_HodlTokens2"";
""2349_HodlTokens2"" -> ""2349_div"";
""2349_Holdplatform_Withdraw"" -> ""2349_restricted"";
""2349_ReturnAllTokens"" -> ""2349_add"";
""2349_HodlTokens2"" -> ""2349_sub"";
""2349_UnlockToken2"" -> ""2349_mul"";
""2349_UnlockToken2"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_mul"";
""2349_AddContractAddress"" -> ""2349_mul"";
""2349_TokenPrice"" -> ""2349_restricted"";
""2349_WithdrawAffiliate"" -> ""2349_add"";
""2349_UnlockToken4"" -> ""2349_PayToken"";
""2349_HodlTokens4"" -> ""2349_add"";
""2349_UnlockToken4"" -> ""2349_mul"";
""2349_Holdplatform_Airdrop"" -> ""2349_restricted"";
""2349_UnlockToken3"" -> ""2349_div"";
""2349_AddContractAddress"" -> ""2349_div"";
""2349_HodlTokens3"" -> ""2349_mul"";
""2349_UnlockToken4"" -> ""2349_div"";
""2349_Holdplatform"" -> ""2349_add"";
""2349_Holdplatform_Deposit"" -> ""2349_add"";
""2349_UnlockToken2"" -> ""2349_add"";
""2349_PayToken"" -> ""2349_AirdropToken"";
""2349_Holdplatform_Withdraw"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_add"";
""2349_WithdrawAffiliate"" -> ""2349_sub"";
""2349_ReturnAllTokens"" -> ""2349_PayToken"";
""2349_UnlockToken2"" -> ""2349_UnlockToken3"";
""2349_UnlockToken2"" -> ""2349_PayToken"";
""2349_ReturnAllTokens"" -> ""2349_restricted"";
""2349_UnlockToken2"" -> ""2349_div"";
""2349_ClaimTokens"" -> ""2349_UnlockToken2"";
""2349_UnlockToken3"" -> ""2349_UnlockToken4"";
""2349_HodlTokens3"" -> ""2349_add"";
""2349_AirdropToken"" -> ""2349_sub"";
""2349_UnlockToken3"" -> ""2349_sub"";
""2349_HodlTokens3"" -> ""2349_HodlTokens4"";
""2349_HodlTokens3"" -> ""2349_div"";
""2349_PayToken"" -> ""2349_sub"";
""2349_PayToken"" -> ""2349_add"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,BreedingClockAuction,"contract BreedingClockAuction is ClockAuction { bool public isBreedingClockAuction = true; constructor(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_2882_BreedingClockAuction {
label=""BreedingClockAuction"";
""2882_createAuction"" [label=""createAuction""];
""2882_bid"" [label=""bid""];
""2882_isBreedingClockAuction"" [label=""isBreedingClockAuction""];
""2882_getCurrentPrice"" [label=""getCurrentPrice""];
""2882_constructor"" [label=""constructor""];
""2882_bid"" -> ""2882__transfer"";
""2882_createAuction"" -> ""2882__escrow"";
""2882_getCurrentPrice"" -> ""2882__isOnAuction"";
""2882_createAuction"" -> ""2882__addAuction"";
""2882_getCurrentPrice"" -> ""2882__currentPrice"";
""2882_bid"" -> ""2882__bid"";
""2882_constructor"" -> ""2882_constructor"";
}
"
0x003ffefefbc4a6f34a62a3ca7b7937a880065bcb.sol,Token,"contract Token is owned, TokenERC20 { address public ico_address; address public old_address; address public app_address; constructor() public { owner = msg.sender; }",1,"subgraph cluster_525_TokenERC20 {
label=""TokenERC20"";
""525_getOwner"" [label=""getOwner""];
""525_transfer"" [label=""transfer""];
""525_constructor"" [label=""constructor""];
""525_transferFrom"" [label=""transferFrom""];
""525_burn"" [label=""burn""];
""525__transfer"" [label=""_transfer""];
""525_getOwnerCount"" [label=""getOwnerCount""];
""525_totalSupply"" [label=""totalSupply""];
""525_approveAndCall"" [label=""approveAndCall""];
""525_approve"" [label=""approve""];
""525_burnFrom"" [label=""burnFrom""];
""525_transferFrom"" -> ""525__transfer"";
""525_transfer"" -> ""525__transfer"";
""525_approveAndCall"" -> ""525_approve"";
}
"
0xc45865b235a7c6693b9db5fed46ea8a3022d9b07.sol,DcorpCrowdsaleProxy,"contract DcorpCrowdsaleProxy is IDcorpCrowdsaleProxy, Ownership, TokenObserver, TokenRetriever { enum Stages { Deploying, Attached, Deployed }",1,"subgraph cluster_941_DcorpCrowdsaleProxy {
label=""DcorpCrowdsaleProxy"";
""941_retrieveTokens"" [label=""retrieveTokens""];
""941_deploy"" [label=""deploy""];
""941_requestTokensFromCrowdsale"" [label=""requestTokensFromCrowdsale""];
""941_setup"" [label=""setup""];
""941_attachCrowdsale"" [label=""attachCrowdsale""];
""941_createPersonalDepositAddress"" [label=""createPersonalDepositAddress""];
""941_contributedAmountOf"" [label=""contributedAmountOf""];
""941_hasRecord"" [label=""hasRecord""];
""941_balanceOf"" [label=""balanceOf""];
""941__handleTransaction"" [label=""_handleTransaction""];
""941_shareOf"" [label=""shareOf""];
""941_updateBalances"" [label=""updateBalances""];
""941_onTokensReceived"" [label=""onTokensReceived""];
""941_createPersonalDepositAddressFor"" [label=""createPersonalDepositAddressFor""];
""941_contributeFor"" [label=""contributeFor""];
""941_withdrawTokens"" [label=""withdrawTokens""];
""941_contribute"" [label=""contribute""];
""941_fallback"" [label=""fallback""];
""941_DcorpCrowdsaleProxy"" [label=""DcorpCrowdsaleProxy""];
""941__getWeight"" [label=""_getWeight""];
""941_withdrawTokens"" -> ""941_balanceOf"";
""941_fallback"" -> ""941__handleTransaction"";
""941_balanceOf"" -> ""941_shareOf"";
""941__handleTransaction"" -> ""941_hasRecord"";
""941_retrieveTokens"" -> ""941_retrieveTokens"";
""941_contributeFor"" -> ""941__handleTransaction"";
""941_attachCrowdsale"" -> ""941_only_owner"";
""941_setup"" -> ""941_only_owner"";
""941_deploy"" -> ""941_only_owner"";
""941_attachCrowdsale"" -> ""941_at_stage"";
""941_contribute"" -> ""941__handleTransaction"";
""941__handleTransaction"" -> ""941__getWeight"";
""941__handleTransaction"" -> ""941_only_when_not_updating"";
""941__handleTransaction"" -> ""941_at_stage"";
""941_updateBalances"" -> ""941_only_when_not_updating"";
""941_requestTokensFromCrowdsale"" -> ""941_only_when_not_updating"";
""941_retrieveTokens"" -> ""941_only_owner"";
""941_deploy"" -> ""941_at_stage"";
""941_withdrawTokens"" -> ""941_only_when_not_updating"";
""941_setup"" -> ""941_at_stage"";
""941_withdrawTokens"" -> ""941_only_when_ended"";
}
"
0x341f9c6c60c07fd11ef0bbc93586a2b9d68bfcf0.sol,VINContract,"contract VINContract is SafeMath { VINNDTokenContract public VINToken; enum Stage{ Pause, Init, Running, Stopped }",1,"subgraph cluster_1632_VINContract {
label=""VINContract"";
""1632_sendTokensToFounders"" [label=""sendTokensToFounders""];
""1632_setNewOwner"" [label=""setNewOwner""];
""1632_burnTokens"" [label=""burnTokens""];
""1632_emitTokensToOtherWallet"" [label=""emitTokensToOtherWallet""];
""1632_setStage"" [label=""setStage""];
""1632_buyTokens"" [label=""buyTokens""];
""1632_fallback"" [label=""fallback""];
""1632_setType"" [label=""setType""];
""1632_initialize"" [label=""initialize""];
""1632_VINContract"" [label=""VINContract""];
""1632_sendTokensToFounders"" -> ""1632_div"";
""1632_emitTokensToOtherWallet"" -> ""1632_buyTokens"";
""1632_setType"" -> ""1632_onlyManager"";
""1632_initialize"" -> ""1632_onlyManager"";
""1632_emitTokensToOtherWallet"" -> ""1632_onlyManager"";
""1632_emitTokensToOtherWallet"" -> ""1632_checkType"";
""1632_sendTokensToFounders"" -> ""1632_add"";
""1632_fallback"" -> ""1632_buyTokens"";
""1632_fallback"" -> ""1632_onStageRunning"";
""1632_setNewOwner"" -> ""1632_onlyManager"";
""1632_setType"" -> ""1632_onStageStopped"";
""1632_burnTokens"" -> ""1632_onlyManager"";
""1632_fallback"" -> ""1632_checkDateTime"";
""1632_sendTokensToFounders"" -> ""1632_mul"";
""1632_setStage"" -> ""1632_onlyManager"";
""1632_buyTokens"" -> ""1632_volumeBonus"";
""1632_fallback"" -> ""1632_checkType"";
""1632_sendTokensToFounders"" -> ""1632_whenInitialized"";
""1632_buyTokens"" -> ""1632_divToMul"";
""1632_buyTokens"" -> ""1632_add"";
""1632_sendTokensToFounders"" -> ""1632_onlyManager"";
""1632_buyTokens"" -> ""1632_dateBonus"";
}
"
0x75a17c63c2121447655955b55aaa1a413e750232.sol,CryderCrowdsale,contract CryderCrowdsale is Ownable { using SafeMath for uint256; address public wallet; CryderToken public presaleToken; CryderToken public token; bool public isBountyAllocated = false; mapping(address => bool) tokenRequests; uint public START_TIME = 1516467600; uint public CLOSE_TIME = 1519146000; uint256 public HARDCAP = 400000000000000000000000000; uint256 public exchangeRate = 3000; address public bounty = 0xa258Eb1817aA122acBa4Af66A7A064AE6E10552A; function () payable public { require(msg.sender == tx.origin); buyTokens(msg.sender); },1,"subgraph cluster_1198_CryderCrowdsale {
label=""CryderCrowdsale"";
""1198_CryderCrowdsale"" [label=""CryderCrowdsale""];
""1198_withdraw"" [label=""withdraw""];
""1198_allocateBounty"" [label=""allocateBounty""];
""1198_setExchangeRate"" [label=""setExchangeRate""];
""1198_setTime"" [label=""setTime""];
""1198_requestTokens"" [label=""requestTokens""];
""1198_fallback"" [label=""fallback""];
""1198_buyTokens"" [label=""buyTokens""];
""1198_fallback"" -> ""1198_buyTokens"";
""1198_withdraw"" -> ""1198_onlyOwner"";
""1198_setExchangeRate"" -> ""1198_onlyOwner"";
""1198_setTime"" -> ""1198_onlyOwner"";
}
"
0x9271a6512b8f27a5f8daa01a62bdc533709e859a.sol,LockToken,"contract LockToken is Ownable { using SafeMath for uint256; token token_reward; address public beneficiary; bool public isLocked = false; bool public isReleased = false; uint256 public start_time; uint256 public end_time; event TokenReleased(address beneficiary, uint256 token_amount); constructor(address tokenContractAddress, address _beneficiary) public{ token_reward = token(tokenContractAddress); beneficiary = _beneficiary; }",1,"subgraph cluster_309_LockToken {
label=""LockToken"";
""309_release"" [label=""release""];
""309_lock"" [label=""lock""];
""309_constructor"" [label=""constructor""];
""309_tokenBalance"" [label=""tokenBalance""];
""309_lockOver"" [label=""lockOver""];
""309_release"" -> ""309_lockOver"";
""309_lock"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_tokenBalance"";
""309_release"" -> ""309_onlyOwner"";
""309_release"" -> ""309_tokenBalance"";
}
"
0xedf19b437d1a67e18b15dd4a859dd52f9cfa012f.sol,ERC777TokenScheduledTimelock,"contract ERC777TokenScheduledTimelock is ERC820Implementer, ERC777TokensRecipient, Ownable { using SafeMath for uint256; ERC777Token public token; uint256 public totalVested; struct Timelock { uint256 till; uint256 amount; }",1,"subgraph cluster_1014_ERC777TokenScheduledTimelock {
label=""ERC777TokenScheduledTimelock"";
""1014_scheduleTimelock"" [label=""scheduleTimelock""];
""1014_release"" [label=""release""];
""1014_constructor"" [label=""constructor""];
""1014_getScheduledTimelockCount"" [label=""getScheduledTimelockCount""];
""1014_getNow"" [label=""getNow""];
""1014_tokensReceived"" [label=""tokensReceived""];
""1014_releaseBatch"" [label=""releaseBatch""];
""1014_release"" -> ""1014_getNow"";
""1014_constructor"" -> ""1014_interfaceAddr"";
""1014_scheduleTimelock"" -> ""1014_getNow"";
""1014_releaseBatch"" -> ""1014_release"";
""1014_constructor"" -> ""1014_setInterfaceImplementation"";
""1014_scheduleTimelock"" -> ""1014_onlyOwner"";
}
"
0x32c62c965db5fdac0f94e6276d6884070068d4be.sol,MyAdvancedToken,contract MyAdvancedToken { address private constant OWNER = 0xb810aD480cF8e3643031bB36e6A002dC3B1d928e; function isSenderOwner(address sender) private pure returns (bool) { return sender == OWNER; },1,"subgraph cluster_337_MyAdvancedToken {
label=""MyAdvancedToken"";
""337_mint"" [label=""mint""];
""337_setCallback"" [label=""setCallback""];
""337_approve"" [label=""approve""];
""337_balanceOf"" [label=""balanceOf""];
""337_transferFrom"" [label=""transferFrom""];
""337_allowance"" [label=""allowance""];
""337_transfer"" [label=""transfer""];
""337_constructor"" [label=""constructor""];
""337_totalSupply"" [label=""totalSupply""];
""337_isSenderOwner"" [label=""isSenderOwner""];
""337_burn"" [label=""burn""];
""337_allowance"" -> ""337_whenNotPaused"";
""337_mint"" -> ""337_whenNotPaused"";
""337_burn"" -> ""337_whenNotPaused"";
""337_transfer"" -> ""337_whenNotPaused"";
""337_transferFrom"" -> ""337_whenNotPaused"";
""337_setCallback"" -> ""337_onlyOwner"";
""337_totalSupply"" -> ""337_whenNotPaused"";
""337_approve"" -> ""337_whenNotPaused"";
""337_balanceOf"" -> ""337_whenNotPaused"";
}
"
0x1cca91a47db357445b89269f2fb4f647cd209968.sol,Distribution,"contract Distribution is Owned { using SafeMath for uint256; Token token; event TransferredToken(address indexed to, uint256 value); event FailedTransfer(address indexed to, uint256 value); modifier whenDropIsActive() { assert(isActive()); _; }",1,"subgraph cluster_326_Distribution {
label=""Distribution"";
""326_tokensAvailable"" [label=""tokensAvailable""];
""326_Distribution"" [label=""Distribution""];
""326_sendTokensSingleValue"" [label=""sendTokensSingleValue""];
""326_destroy"" [label=""destroy""];
""326_sendInternally"" [label=""sendInternally""];
""326_sendTokens"" [label=""sendTokens""];
""326_isActive"" [label=""isActive""];
""326_sendTokens"" -> ""326_onlyOwner"";
""326_sendTokensSingleValue"" -> ""326_whenDropIsActive"";
""326_sendInternally"" -> ""326_tokensAvailable"";
""326_sendTokens"" -> ""326_whenDropIsActive"";
""326_destroy"" -> ""326_onlyOwner"";
""326_destroy"" -> ""326_tokensAvailable"";
""326_sendTokens"" -> ""326_sendInternally"";
""326_sendTokensSingleValue"" -> ""326_onlyOwner"";
""326_isActive"" -> ""326_tokensAvailable"";
""326_sendTokensSingleValue"" -> ""326_sendInternally"";
}
"
0x17b031b3802789a458955b3d27c60a0379f187b4.sol,Bitbegin,"contract Bitbegin is BitbeginToken(, , 8, 20000000000000000), ERC20, ERC223 { address private _owner; struct LockAccount{ uint status; }",1,"subgraph cluster_869_Bitbegin {
label=""Bitbegin"";
""869_getLockAccount"" [label=""getLockAccount""];
""869_setLockAccount"" [label=""setLockAccount""];
""869_unLockAccount"" [label=""unLockAccount""];
""869_approve"" [label=""approve""];
""869_transfer"" [label=""transfer""];
""869_claimReward"" [label=""claimReward""];
""869_balanceOf"" [label=""balanceOf""];
""869_totalSupply"" [label=""totalSupply""];
""869_Bitbegin"" [label=""Bitbegin""];
""869_getLockAccounts"" [label=""getLockAccounts""];
""869_isLock"" [label=""isLock""];
""869_transferFrom"" [label=""transferFrom""];
""869_setReward"" [label=""setReward""];
""869_isContract"" [label=""isContract""];
""869_allowance"" [label=""allowance""];
""869_getReward"" [label=""getReward""];
""869_transfer"" -> ""869_isContract"";
""869_claimReward"" -> ""869_isContract"";
""869_transfer"" -> ""869_isLock"";
}
"
0x2d820ea3a6b9302c500feeb7f6361ba1ddfa5aba.sol,BancorLender,contract BancorLender { struct BorrowAgreement { address lender; address borrower; uint256 tokenAmount; uint256 collateralAmount; uint32 collateralRatio; uint expiration; },1,"subgraph cluster_2362_BancorLender {
label=""BancorLender"";
""2362_offerToLend"" [label=""offerToLend""];
""2362_addCollateral"" [label=""addCollateral""];
""2362_takeOffer"" [label=""takeOffer""];
""2362_forceClose"" [label=""forceClose""];
""2362_isCollateralWithinMargin"" [label=""isCollateralWithinMargin""];
""2362_returnLoan"" [label=""returnLoan""];
""2362_takeOffer"" -> ""2362_isCollateralWithinMargin"";
""2362_forceClose"" -> ""2362_isCollateralWithinMargin"";
}
"
0x25cf23787ac0f92a3eafa61f458ad0b7c4b27c3d.sol,Zethroll,"contract Zethroll is ZTHReceivingContract { using SafeMath for uint; modifier betIsValid(uint _betSize, uint _playerNumber) { require( calculateProfit(_betSize, _playerNumber) < maxProfit && _betSize >= minBet && _playerNumber > minNumber && _playerNumber < maxNumber); _; }",1,"subgraph cluster_899_Zethroll {
label=""Zethroll"";
""899_constructor"" [label=""constructor""];
""899_ownerSetMinBet"" [label=""ownerSetMinBet""];
""899_ownerSetBankroll"" [label=""ownerSetBankroll""];
""899_random"" [label=""random""];
""899_maxRandom"" [label=""maxRandom""];
""899_tokenFallback"" [label=""tokenFallback""];
""899_fallback"" [label=""fallback""];
""899_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""899__zthToken"" [label=""_zthToken""];
""899_ownerPauseGame"" [label=""ownerPauseGame""];
""899_ownerTransferZTH"" [label=""ownerTransferZTH""];
""899_setMaxProfit"" [label=""setMaxProfit""];
""899_dumpdivs"" [label=""dumpdivs""];
""899_ownerChangeOwner"" [label=""ownerChangeOwner""];
""899_finishBet"" [label=""finishBet""];
""899_calculateProfit"" [label=""calculateProfit""];
""899_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""899__finishBet"" [label=""_finishBet""];
""899_ownerkill"" [label=""ownerkill""];
""899__playerRollDice"" [label=""_playerRollDice""];
""899_tokenFallback"" -> ""899__playerRollDice"";
""899_ownerTransferZTH"" -> ""899_setMaxProfit"";
""899_random"" -> ""899_maxRandom"";
""899_ownerSetBankroll"" -> ""899_onlyOwner"";
""899_constructor"" -> ""899_ownerSetMaxProfitAsPercentOfHouse"";
""899_ownerPauseGame"" -> ""899_onlyOwner"";
""899_ownerChangeOwner"" -> ""899_onlyOwner"";
""899_ownerSetMaxProfitAsPercentOfHouse"" -> ""899_onlyOwner"";
""899_ownerkill"" -> ""899_onlyOwner"";
""899_ownerSetMinBet"" -> ""899_onlyOwner"";
""899_tokenFallback"" -> ""899_setMaxProfit"";
""899_ownerTransferZTH"" -> ""899_onlyOwner"";
""899_finishBet"" -> ""899_gameIsActive"";
""899__playerRollDice"" -> ""899_betIsValid"";
""899__finishBet"" -> ""899_calculateProfit"";
""899__playerRollDice"" -> ""899__finishBet"";
""899__finishBet"" -> ""899_setMaxProfit"";
""899__playerRollDice"" -> ""899_gameIsActive"";
""899_finishBet"" -> ""899__finishBet"";
""899_ownerSetMaxProfitAsPercentOfHouse"" -> ""899_setMaxProfit"";
""899__finishBet"" -> ""899_random"";
""899_ownerUpdateContractBalance"" -> ""899_onlyOwner"";
""899__playerRollDice"" -> ""899__zthToken"";
""899_constructor"" -> ""899_ownerSetMinBet"";
}
"
0x00ec5112673b69bd5f545dc6a3bede8674f878eb.sol,CCPToken,contract CCPToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 55000000 * (10**0); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; uint public totalCollected = 0; function CCPToken () { owner = msg.sender; },1,"subgraph cluster_818_CCPToken {
label=""CCPToken"";
""818_freezeAccount"" [label=""freezeAccount""];
""818_totalSupply"" [label=""totalSupply""];
""818_transferFrom"" [label=""transferFrom""];
""818_approve"" [label=""approve""];
""818_createTokens"" [label=""createTokens""];
""818_setOwner"" [label=""setOwner""];
""818_transfer"" [label=""transfer""];
""818_mintToken"" [label=""mintToken""];
""818_freezeTransfers"" [label=""freezeTransfers""];
""818_unfreezeTransfers"" [label=""unfreezeTransfers""];
""818_refundTokens"" [label=""refundTokens""];
""818_CCPToken"" [label=""CCPToken""];
""818_approve"" -> ""818_allowance"";
""818_mintToken"" -> ""818_safeAdd"";
""818_transferFrom"" -> ""818_transferFrom"";
""818_approve"" -> ""818_approve"";
""818_createTokens"" -> ""818_safeSub"";
""818_createTokens"" -> ""818_safeAdd"";
""818_transfer"" -> ""818_transfer"";
}
"
0x0e54b1b8ff833b5f2b0d17453d97d340cb7576e4.sol,ERC223Token,"contract ERC223Token is IERC223, SafeMath { mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 35000000 * 10**8; function ERC223Token() { balances[msg.sender] = totalSupply; }",1,"subgraph cluster_534_ERC223Token {
label=""ERC223Token"";
""534_ERC223Token"" [label=""ERC223Token""];
""534_symbol"" [label=""symbol""];
""534_totalSupply"" [label=""totalSupply""];
""534_transferToAddress"" [label=""transferToAddress""];
""534_balanceOf"" [label=""balanceOf""];
""534_transferToContract"" [label=""transferToContract""];
""534_transfer"" [label=""transfer""];
""534_name"" [label=""name""];
""534_isContract"" [label=""isContract""];
""534_decimals"" [label=""decimals""];
""534_transfer"" -> ""534_safeAdd"";
""534_transferToContract"" -> ""534_safeAdd"";
""534_transferToAddress"" -> ""534_balanceOf"";
""534_transferToContract"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_safeSub"";
""534_transferToAddress"" -> ""534_safeSub"";
""534_transferToContract"" -> ""534_safeSub"";
""534_transfer"" -> ""534_transferToAddress"";
""534_transfer"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_transferToContract"";
""534_transfer"" -> ""534_isContract"";
""534_transferToAddress"" -> ""534_safeAdd"";
}
"
0x5c2978a171033a19c1a455c84875f3609dab0a7e.sol,ETYCSale,"contract ETYCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 6000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; ETYCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1561_ETYCSale {
label=""ETYCSale"";
""1561_changeEndTime"" [label=""changeEndTime""];
""1561_terminate"" [label=""terminate""];
""1561_checkFundingCap"" [label=""checkFundingCap""];
""1561_setRate"" [label=""setRate""];
""1561_safeWithdrawal"" [label=""safeWithdrawal""];
""1561_currentTime"" [label=""currentTime""];
""1561_convertToMiniEtyc"" [label=""convertToMiniEtyc""];
""1561_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1561_checkFundingGoal"" [label=""checkFundingGoal""];
""1561_fallback"" [label=""fallback""];
""1561_ETYCSale"" [label=""ETYCSale""];
""1561_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1561_changeStartTime"" [label=""changeStartTime""];
""1561_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1561_ownerSafeWithdrawal"" -> ""1561_nonReentrant"";
""1561_changeStartTime"" -> ""1561_onlyOwner"";
""1561_ownerUnlockFund"" -> ""1561_onlyOwner"";
""1561_ownerUnlockFund"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_checkFundingGoal"";
""1561_fallback"" -> ""1561_checkFundingCap"";
""1561_safeWithdrawal"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_afterStartTime"";
""1561_ownerAllocateTokens"" -> ""1561_nonReentrant"";
""1561_ETYCSale"" -> ""1561_setRate"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingCap"";
""1561_setRate"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_saleNotClosed"";
""1561_fallback"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_whenNotPaused"";
""1561_changeEndTime"" -> ""1561_onlyOwner"";
""1561_ownerAllocateTokens"" -> ""1561_onlyOwner"";
""1561_safeWithdrawal"" -> ""1561_afterDeadline"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingGoal"";
""1561_terminate"" -> ""1561_onlyOwner"";
""1561_ownerSafeWithdrawal"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_beforeDeadline"";
}
"
0x271a0b465d5b453bb835afd2d671c76b2b76900e.sol,ClockAuction,"contract ClockAuction is ClockAuctionBase { bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d); bool public isSaleClockAuction = true; constructor(uint256 _ownerCut, uint256 _authorShare) public { require(_ownerCut <= 10000); require(_authorShare <= 10000); ownerCut = _ownerCut; authorShare = _authorShare; }",1,"subgraph cluster_1034_ClockAuctionBase {
label=""ClockAuctionBase"";
""1034__escrow"" [label=""_escrow""];
""1034__addAuction"" [label=""_addAuction""];
""1034__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""1034__interfaceByAddress"" [label=""_interfaceByAddress""];
""1034__currentPrice"" [label=""_currentPrice""];
""1034__isAddressSupportedContract"" [label=""_isAddressSupportedContract""];
""1034__owns"" [label=""_owns""];
""1034__transfer"" [label=""_transfer""];
""1034__cancelAuction"" [label=""_cancelAuction""];
""1034__bid"" [label=""_bid""];
""1034__removeAuction"" [label=""_removeAuction""];
""1034_addToonContract"" [label=""addToonContract""];
""1034__computeCut"" [label=""_computeCut""];
""1034__isOnAuction"" [label=""_isOnAuction""];
""1034_addToonContract"" -> ""1034_onlyOwner"";
""1034__bid"" -> ""1034__computeCut"";
""1034__cancelAuction"" -> ""1034__removeAuction"";
""1034__bid"" -> ""1034_addPendingWithdrawal"";
""1034__bid"" -> ""1034__isOnAuction"";
""1034__escrow"" -> ""1034__interfaceByAddress"";
""1034__bid"" -> ""1034__removeAuction"";
""1034__bid"" -> ""1034__interfaceByAddress"";
""1034__currentPrice"" -> ""1034__computeCurrentPrice"";
""1034__addAuction"" -> ""1034__isAddressSupportedContract"";
""1034__transfer"" -> ""1034__interfaceByAddress"";
""1034__cancelAuction"" -> ""1034__transfer"";
""1034__owns"" -> ""1034__interfaceByAddress"";
""1034__bid"" -> ""1034__currentPrice"";
}
"
0x74f887f5b336704be1591f8a2f2e419767134316.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; using Address for address; mapping(address => uint256) internal _balances; mapping(address => mapping(address => uint256)) private _allowed; uint256 internal _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },1,"subgraph cluster_552_ERC20 {
label=""ERC20"";
""552__burn"" [label=""_burn""];
""552__transfer"" [label=""_transfer""];
""552_totalSupply"" [label=""totalSupply""];
""552_allowance"" [label=""allowance""];
""552_increaseAllowance"" [label=""increaseAllowance""];
""552_transfer"" [label=""transfer""];
""552_balanceOf"" [label=""balanceOf""];
""552_decreaseAllowance"" [label=""decreaseAllowance""];
""552__burnFrom"" [label=""_burnFrom""];
""552_burn"" [label=""burn""];
""552_approve"" [label=""approve""];
""552__approve"" [label=""_approve""];
""552_transferFrom"" [label=""transferFrom""];
""552_transferFrom"" -> ""552__approve"";
""552_transferFrom"" -> ""552__transfer"";
""552_approve"" -> ""552__approve"";
""552__burnFrom"" -> ""552__approve"";
""552_transfer"" -> ""552__transfer"";
""552_increaseAllowance"" -> ""552__approve"";
""552__burnFrom"" -> ""552__burn"";
""552_decreaseAllowance"" -> ""552__approve"";
""552_burn"" -> ""552__burn"";
}
"
0xaa63c8683647ef91b3fdab4b4989ee9588da297b.sol,DSProxyFactory,"contract DSProxyFactory { event Created(address indexed sender, address proxy, address cache); mapping(address=>bool) public isProxy; DSProxyCache public cache = new DSProxyCache(); function build() public returns (DSProxy proxy) { proxy = build(msg.sender); }",1,"subgraph cluster_346_DSProxyFactory {
label=""DSProxyFactory"";
""346_build"" [label=""build""];
""346_build"" -> ""346_build"";
}
"
0x6c764fac2ed1c5fabf8bcd86bae68d8cdbe8290e.sol,BaseWallet,"contract BaseWallet { address public implementation; address public owner; mapping (address => bool) public authorised; mapping (bytes4 => address) public enabled; uint public modules; event AuthorisedModule(address indexed module, bool value); event EnabledStaticCall(address indexed module, bytes4 indexed method); event Invoked(address indexed module, address indexed target, uint indexed value, bytes data); event Received(uint indexed value, address indexed sender, bytes data); event OwnerChanged(address owner); modifier moduleOnly { require(authorised[msg.sender], ); _; }",1,"subgraph cluster_1406_BaseWallet {
label=""BaseWallet"";
""1406_init"" [label=""init""];
""1406_invoke"" [label=""invoke""];
""1406_fallback"" [label=""fallback""];
""1406_enableStaticCall"" [label=""enableStaticCall""];
""1406_authorised"" [label=""authorised""];
""1406_owner"" [label=""owner""];
""1406_authoriseModule"" [label=""authoriseModule""];
""1406_setOwner"" [label=""setOwner""];
""1406_setOwner"" -> ""1406_moduleOnly"";
""1406_invoke"" -> ""1406_moduleOnly"";
""1406_authoriseModule"" -> ""1406_moduleOnly"";
""1406_enableStaticCall"" -> ""1406_moduleOnly"";
}
"
0x25cf23787ac0f92a3eafa61f458ad0b7c4b27c3d.sol,Zethroll,"contract Zethroll is ZTHReceivingContract { using SafeMath for uint; modifier betIsValid(uint _betSize, uint _playerNumber) { require( calculateProfit(_betSize, _playerNumber) < maxProfit && _betSize >= minBet && _playerNumber > minNumber && _playerNumber < maxNumber); _; }",1,"subgraph cluster_899_Zethroll {
label=""Zethroll"";
""899_constructor"" [label=""constructor""];
""899_ownerSetMinBet"" [label=""ownerSetMinBet""];
""899_ownerSetBankroll"" [label=""ownerSetBankroll""];
""899_random"" [label=""random""];
""899_maxRandom"" [label=""maxRandom""];
""899_tokenFallback"" [label=""tokenFallback""];
""899_fallback"" [label=""fallback""];
""899_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""899__zthToken"" [label=""_zthToken""];
""899_ownerPauseGame"" [label=""ownerPauseGame""];
""899_ownerTransferZTH"" [label=""ownerTransferZTH""];
""899_setMaxProfit"" [label=""setMaxProfit""];
""899_dumpdivs"" [label=""dumpdivs""];
""899_ownerChangeOwner"" [label=""ownerChangeOwner""];
""899_finishBet"" [label=""finishBet""];
""899_calculateProfit"" [label=""calculateProfit""];
""899_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""899__finishBet"" [label=""_finishBet""];
""899_ownerkill"" [label=""ownerkill""];
""899__playerRollDice"" [label=""_playerRollDice""];
""899_tokenFallback"" -> ""899__playerRollDice"";
""899_ownerTransferZTH"" -> ""899_setMaxProfit"";
""899_random"" -> ""899_maxRandom"";
""899_ownerSetBankroll"" -> ""899_onlyOwner"";
""899_constructor"" -> ""899_ownerSetMaxProfitAsPercentOfHouse"";
""899_ownerPauseGame"" -> ""899_onlyOwner"";
""899_ownerChangeOwner"" -> ""899_onlyOwner"";
""899_ownerSetMaxProfitAsPercentOfHouse"" -> ""899_onlyOwner"";
""899_ownerkill"" -> ""899_onlyOwner"";
""899_ownerSetMinBet"" -> ""899_onlyOwner"";
""899_tokenFallback"" -> ""899_setMaxProfit"";
""899_ownerTransferZTH"" -> ""899_onlyOwner"";
""899_finishBet"" -> ""899_gameIsActive"";
""899__playerRollDice"" -> ""899_betIsValid"";
""899__finishBet"" -> ""899_calculateProfit"";
""899__playerRollDice"" -> ""899__finishBet"";
""899__finishBet"" -> ""899_setMaxProfit"";
""899__playerRollDice"" -> ""899_gameIsActive"";
""899_finishBet"" -> ""899__finishBet"";
""899_ownerSetMaxProfitAsPercentOfHouse"" -> ""899_setMaxProfit"";
""899__finishBet"" -> ""899_random"";
""899_ownerUpdateContractBalance"" -> ""899_onlyOwner"";
""899__playerRollDice"" -> ""899__zthToken"";
""899_constructor"" -> ""899_ownerSetMinBet"";
}
"
0x0002325fcaaac6ebf1254a626589147bde1a2394.sol,HorseyToken,"contract HorseyToken is EthorseHelpers,Pausable { using SafeMath for uint256; event Claimed(address raceAddress, address eth_address, uint256 tokenId); event Feeding(uint256 tokenId); event ReceivedCarrot(uint256 tokenId, bytes32 newDna); event FeedingFailed(uint256 tokenId); event HorseyRenamed(uint256 tokenId, string newName); event HorseyFreed(uint256 tokenId); RoyalStablesInterface public stables; uint8 public carrotsMultiplier = 1; uint8 public rarityMultiplier = 1; uint256 public claimingFee = 0.008 ether; struct FeedingData { uint256 blockNumber; uint256 horsey; }",1,"subgraph cluster_2145_HorseyToken {
label=""HorseyToken"";
""2145_addLegitDevAddress"" [label=""addLegitDevAddress""];
""2145_setClaimingCosts"" [label=""setClaimingCosts""];
""2145__feed"" [label=""_feed""];
""2145__shiftRight"" [label=""_shiftRight""];
""2145_getOwnedTokens"" [label=""getOwnedTokens""];
""2145_claim"" [label=""claim""];
""2145_addHorseIndex"" [label=""addHorseIndex""];
""2145_fallback"" [label=""fallback""];
""2145_freeForCarrots"" [label=""freeForCarrots""];
""2145_can_claim"" [label=""can_claim""];
""2145_feed"" [label=""feed""];
""2145_constructor"" [label=""constructor""];
""2145_getCarrotCredits"" [label=""getCarrotCredits""];
""2145__increaseRarity"" [label=""_increaseRarity""];
""2145_renameHorsey"" [label=""renameHorsey""];
""2145_setRarityMultiplier"" [label=""setRarityMultiplier""];
""2145__generate_special_horsey"" [label=""_generate_special_horsey""];
""2145_stopFeeding"" [label=""stopFeeding""];
""2145_withdraw"" [label=""withdraw""];
""2145_getHorsey"" [label=""getHorsey""];
""2145_setCarrotsMultiplier"" [label=""setCarrotsMultiplier""];
""2145__makeSpecialId"" [label=""_makeSpecialId""];
""2145__shiftLeft"" [label=""_shiftLeft""];
""2145_setRenamingCosts"" [label=""setRenamingCosts""];
""2145_withdraw"" -> ""2145_onlyOwner"";
""2145_freeForCarrots"" -> ""2145_onlyOwnerOf"";
""2145_addLegitDevAddress"" -> ""2145__addLegitOwner"";
""2145__generate_special_horsey"" -> ""2145__shiftRight"";
""2145_renameHorsey"" -> ""2145_costs"";
""2145_feed"" -> ""2145_onlyOwnerOf"";
""2145_setRarityMultiplier"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145_whenNotPaused"";
""2145_claim"" -> ""2145_costs"";
""2145_freeForCarrots"" -> ""2145_whenNotPaused"";
""2145_stopFeeding"" -> ""2145__feed"";
""2145_feed"" -> ""2145_noFeedingInProgress"";
""2145_setRenamingCosts"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145_can_claim"";
""2145_stopFeeding"" -> ""2145_feedingInProgress"";
""2145_addHorseIndex"" -> ""2145__addHorse"";
""2145_renameHorsey"" -> ""2145_whenNotPaused"";
""2145_claim"" -> ""2145__isWinnerOf"";
""2145_setClaimingCosts"" -> ""2145_onlyOwner"";
""2145_claim"" -> ""2145__generate_special_horsey"";
""2145__generate_special_horsey"" -> ""2145__makeSpecialId"";
""2145_setCarrotsMultiplier"" -> ""2145_onlyOwner"";
""2145_can_claim"" -> ""2145__isWinnerOf"";
""2145_feed"" -> ""2145_carrotsMeetLevel"";
""2145__feed"" -> ""2145__increaseRarity"";
""2145__increaseRarity"" -> ""2145__shiftLeft"";
""2145_addLegitDevAddress"" -> ""2145_onlyOwner"";
""2145_feed"" -> ""2145_whenNotPaused"";
""2145_addHorseIndex"" -> ""2145_onlyOwner"";
""2145_renameHorsey"" -> ""2145_onlyOwnerOf"";
""2145_constructor"" -> ""2145_constructor"";
}
"
0x517c8bbb18d69d7d8f059175f612d556670b22c3.sol,AirDropAFTKSeven,"contract AirDropAFTKSeven is Ownable { Token token; mapping(address => uint256) public redeemBalanceOf; event BalanceSet(address indexed beneficiary, uint256 value); event Redeemed(address indexed beneficiary, uint256 value); event BalanceCleared(address indexed beneficiary, uint256 value); event TokenSendStart(address indexed beneficiary, uint256 value); event TransferredToken(address indexed to, uint256 value); event FailedTransfer(address indexed to, uint256 value); function AirDropAFTKSeven() public { address _tokenAddr = 0x7fa2f70bd4c4120fdd539ebd55c04118ba336b9e; token = Token(_tokenAddr); }",1,"subgraph cluster_498_AirDropAFTKSeven {
label=""AirDropAFTKSeven"";
""498_sendTokensTo7"" [label=""sendTokensTo7""];
""498_destroy"" [label=""destroy""];
""498_AirDropAFTKSeven"" [label=""AirDropAFTKSeven""];
""498_sendTokensToOne"" [label=""sendTokensToOne""];
""498_sendTokensToOne"" -> ""498_onlyOwner"";
""498_destroy"" -> ""498_onlyOwner"";
""498_sendTokensTo7"" -> ""498_onlyOwner"";
}
"
0xc849a5fff9befa297d1c3a772bafac9f3c9004ec.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1018_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1018_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1018_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1018_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1018_constructor"" [label=""constructor""];
""1018_tokenFallback"" [label=""tokenFallback""];
""1018_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1018_depositToken"" [label=""depositToken""];
""1018_depositEther"" [label=""depositEther""];
""1018_approveToPullOutTokens"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmounts"" -> ""1018_onlyOwner"";
""1018_distributeWithTransferFrom"" -> ""1018_onlyOwner"";
""1018_tokenFallback"" -> ""1018_whenNotPaused"";
""1018_depositEther"" -> ""1018_whenNotPaused"";
""1018_depositToken"" -> ""1018_whenNotPaused"";
""1018_distributeTokenToAddress"" -> ""1018_onlyOwner"";
}
"
0x4176f0f2b7c95486a5ae06e3d1b29201a42e7630.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1026_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1026_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1026_constructor"" [label=""constructor""];
""1026_depositToken"" [label=""depositToken""];
""1026_tokenFallback"" [label=""tokenFallback""];
""1026_depositEther"" [label=""depositEther""];
""1026_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1026_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1026_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1026_distributeTokenToAddressesAndAmounts"" -> ""1026_onlyOwner"";
""1026_distributeWithTransferFrom"" -> ""1026_onlyOwner"";
""1026_approveToPullOutTokens"" -> ""1026_onlyOwner"";
""1026_depositEther"" -> ""1026_whenNotPaused"";
""1026_tokenFallback"" -> ""1026_whenNotPaused"";
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1026_onlyOwner"";
""1026_distributeTokenToAddress"" -> ""1026_onlyOwner"";
""1026_depositToken"" -> ""1026_whenNotPaused"";
}
"
0x27c48b2f1d99cab6f6f6ae143204a0029666e29b.sol,CardAuction,contract CardAuction is CardOwnership { ClockAuctionBase public saleAuction; function setSaleAuction(address _address) external onlyOwner { ClockAuctionBase candidateContract = ClockAuctionBase(_address); require(candidateContract.isSaleAuction()); saleAuction = candidateContract; },1,"subgraph cluster_979_CardAuction {
label=""CardAuction"";
""979_createSaleAuction"" [label=""createSaleAuction""];
""979_setSaleAuction"" [label=""setSaleAuction""];
""979_setSaleAuction"" -> ""979_onlyOwner"";
""979_createSaleAuction"" -> ""979__approve"";
}
"
0x190646e10b85fbcd631c23c8cd175e25df92c338.sol,EthBattle,"contract EthBattle is Ownable { using SafeMath for uint256; uint256 constant TOKEN_USE_BONUS = 15; uint256 constant REFERRAL_REWARD = 2 ether; uint256 constant MIN_PLAY_AMOUNT = 50 finney; uint256 public roundIndex = 0; mapping(uint256 => address) public rounds; address[] private currentRewardingAddresses; PlaySeedInterface private playSeedGenerator; GTAInterface public token; AMUStoreInterface public store; mapping(address => address) public referralBacklog; mapping(address => uint256) public tokens; event RoundCreated(address createdAddress, uint256 index); event Deposit(address user, uint amount, uint balance); event Withdraw(address user, uint amount, uint balance); function () public payable { getLastRound().getDevWallet().transfer(msg.value); }",1,"subgraph cluster_853_EthBattle {
label=""EthBattle"";
""853_fallback"" [label=""fallback""];
""853_play"" [label=""play""];
""853_getTokenSellPrice"" [label=""getTokenSellPrice""];
""853_balanceOf"" [label=""balanceOf""];
""853_constructor"" [label=""constructor""];
""853_getTokenBuyPrice"" [label=""getTokenBuyPrice""];
""853_getLastRound"" [label=""getLastRound""];
""853_getLastRoundAddress"" [label=""getLastRoundAddress""];
""853_claimSeedOwnership"" [label=""claimSeedOwnership""];
""853_aggregateBet"" [label=""aggregateBet""];
""853_setPlaySeed"" [label=""setPlaySeed""];
""853_findSeedAuthorized"" [label=""findSeedAuthorized""];
""853_interruptLastRound"" [label=""interruptLastRound""];
""853_prizeProjection"" [label=""prizeProjection""];
""853_win"" [label=""win""];
""853_transferInternally"" [label=""transferInternally""];
""853_setReferralsMap"" [label=""setReferralsMap""];
""853_prizeByNow"" [label=""prizeByNow""];
""853_withdrawGTA"" [label=""withdrawGTA""];
""853_startRound"" [label=""startRound""];
""853_setStore"" [label=""setStore""];
""853_finishLastRound"" [label=""finishLastRound""];
""853_depositGTA"" [label=""depositGTA""];
""853_prizeProjection"" -> ""853_aggregateBet"";
""853_finishLastRound"" -> ""853_getLastRound"";
""853_finishLastRound"" -> ""853_onlyOwner"";
""853_setPlaySeed"" -> ""853_onlyOwner"";
""853_play"" -> ""853_getLastRound"";
""853_interruptLastRound"" -> ""853_getLastRound"";
""853_play"" -> ""853_balanceOf"";
""853_play"" -> ""853_transferInternally"";
""853_setStore"" -> ""853_onlyOwner"";
""853_setReferralsMap"" -> ""853_onlyOwner"";
""853_claimSeedOwnership"" -> ""853_onlyOwner"";
""853_prizeByNow"" -> ""853_getLastRound"";
""853_play"" -> ""853_aggregateBet"";
""853_interruptLastRound"" -> ""853_onlyOwner"";
""853_startRound"" -> ""853_onlyOwner"";
""853_findSeedAuthorized"" -> ""853_onlyOwner"";
""853_win"" -> ""853_getLastRound"";
""853_prizeProjection"" -> ""853_getLastRound"";
""853_fallback"" -> ""853_getLastRound"";
}
"
0xa5cc679a3528956e8032df4f03756c077c1ee3f4.sol,Exchange,contract Exchange { function assert(bool assertion) { if (!assertion) throw; },1,"subgraph cluster_2562_Exchange {
label=""Exchange"";
""2562_setFees"" [label=""setFees""];
""2562_adminWithdraw"" [label=""adminWithdraw""];
""2562_setAdmin"" [label=""setAdmin""];
""2562_assert"" [label=""assert""];
""2562_min"" [label=""min""];
""2562_getOwner"" [label=""getOwner""];
""2562_cancelOrder"" [label=""cancelOrder""];
""2562_safeAdd"" [label=""safeAdd""];
""2562_depositToken"" [label=""depositToken""];
""2562_deposit"" [label=""deposit""];
""2562_withdraw"" [label=""withdraw""];
""2562_batchOrderTrade"" [label=""batchOrderTrade""];
""2562_Exchange"" [label=""Exchange""];
""2562_safeSub"" [label=""safeSub""];
""2562_safeMul"" [label=""safeMul""];
""2562_fallback"" [label=""fallback""];
""2562_invalidateOrdersBefore"" [label=""invalidateOrdersBefore""];
""2562_setOwner"" [label=""setOwner""];
""2562_balanceOf"" [label=""balanceOf""];
""2562_setInactivityReleasePeriod"" [label=""setInactivityReleasePeriod""];
""2562_trade"" [label=""trade""];
""2562_trade"" -> ""2562_min"";
""2562_trade"" -> ""2562_onlyAdmin"";
""2562_adminWithdraw"" -> ""2562_safeAdd"";
""2562_setInactivityReleasePeriod"" -> ""2562_onlyAdmin"";
""2562_trade"" -> ""2562_safeAdd"";
""2562_setAdmin"" -> ""2562_onlyOwner"";
""2562_cancelOrder"" -> ""2562_safeSub"";
""2562_adminWithdraw"" -> ""2562_onlyAdmin"";
""2562_cancelOrder"" -> ""2562_onlyAdmin"";
""2562_withdraw"" -> ""2562_safeSub"";
""2562_safeMul"" -> ""2562_assert"";
""2562_safeAdd"" -> ""2562_assert"";
""2562_safeSub"" -> ""2562_assert"";
""2562_depositToken"" -> ""2562_safeAdd"";
""2562_setOwner"" -> ""2562_onlyOwner"";
""2562_Exchange"" -> ""2562_safeMul"";
""2562_invalidateOrdersBefore"" -> ""2562_onlyAdmin"";
""2562_trade"" -> ""2562_safeMul"";
""2562_adminWithdraw"" -> ""2562_safeSub"";
""2562_trade"" -> ""2562_safeSub"";
""2562_deposit"" -> ""2562_safeAdd"";
""2562_setFees"" -> ""2562_onlyOwner"";
""2562_batchOrderTrade"" -> ""2562_trade"";
""2562_setFees"" -> ""2562_safeMul"";
}
"
0x56ce81f0ede8716a2f3b6349f805e0f13643c168.sol,TokenVesting,"contract TokenVesting is Ownable { using SafeMath for uint; ERC20 public token; address public receiver; uint256 public startTime; uint256 public cliff; uint256 public totalPeriods; uint256 public timePerPeriod; uint256 public totalTokens; uint256 public tokensClaimed; event VestingFunded(uint256 totalTokens); event TokensClaimed(uint256 tokensClaimed); event VestingKilled(); constructor( address _token, address _receiver, uint256 _startTime, uint256 _cliff, uint256 _totalPeriods, uint256 _timePerPeriod ) public { token = ERC20(_token); receiver = _receiver; startTime = _startTime; cliff = _cliff; totalPeriods = _totalPeriods; timePerPeriod = _timePerPeriod; }",1,"subgraph cluster_482_TokenVesting {
label=""TokenVesting"";
""482_fundVesting"" [label=""fundVesting""];
""482_claimTokens"" [label=""claimTokens""];
""482_killVesting"" [label=""killVesting""];
""482_changeReceiver"" [label=""changeReceiver""];
""482_constructor"" [label=""constructor""];
""482_changeReceiver"" -> ""482_onlyOwner"";
""482_killVesting"" -> ""482_onlyOwner"";
""482_fundVesting"" -> ""482_onlyOwner"";
}
"
0x0e6e19549a89c9bec84b5b632cd1674f8e066d06.sol,EtheremonAdventureItem,"contract EtheremonAdventureItem is NFTStandard(, ), BasicAccessControl { uint constant public MAX_OWNER_PERS_SITE = 10; uint constant public MAX_SITE_ID = 108; uint constant public MAX_SITE_TOKEN_ID = 1080; address public adventureHandler; struct Item { uint classId; uint value; }",1,"subgraph cluster_1937_EtheremonAdventureItem {
label=""EtheremonAdventureItem"";
""1937_spawnItem"" [label=""spawnItem""];
""1937_useMultipleItem"" [label=""useMultipleItem""];
""1937_getItemInfo"" [label=""getItemInfo""];
""1937_setTokenURI"" [label=""setTokenURI""];
""1937_spawnSite"" [label=""spawnSite""];
""1937_setAdventureHandler"" [label=""setAdventureHandler""];
""1937_useSingleItem"" [label=""useSingleItem""];
""1937_useMultipleItem"" -> ""1937_requireAdventureHandler"";
""1937_setTokenURI"" -> ""1937__setTokenUri"";
""1937_spawnItem"" -> ""1937_onlyModerators"";
""1937_useSingleItem"" -> ""1937__burn"";
""1937_spawnSite"" -> ""1937_onlyModerators"";
""1937_useSingleItem"" -> ""1937_requireAdventureHandler"";
""1937_useMultipleItem"" -> ""1937__burn"";
""1937_useSingleItem"" -> ""1937_isActive"";
""1937_setAdventureHandler"" -> ""1937_onlyModerators"";
""1937_spawnItem"" -> ""1937__mint"";
""1937_useMultipleItem"" -> ""1937_isActive"";
""1937_spawnSite"" -> ""1937__mint"";
""1937_setTokenURI"" -> ""1937_onlyModerators"";
}
"
0x0f1da17b33df90c078fd2fb4b9011a64af3c67a6.sol,ERC20,contract ERC20 is IERC20 { using SafeMath for uint256; using Address for address; mapping(address => uint256) internal _balances; mapping(address => mapping(address => uint256)) private _allowed; uint256 internal _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; },1,"subgraph cluster_552_ERC20 {
label=""ERC20"";
""552_balanceOf"" [label=""balanceOf""];
""552_increaseAllowance"" [label=""increaseAllowance""];
""552__transfer"" [label=""_transfer""];
""552_transferFrom"" [label=""transferFrom""];
""552__burn"" [label=""_burn""];
""552_totalSupply"" [label=""totalSupply""];
""552_allowance"" [label=""allowance""];
""552__burnFrom"" [label=""_burnFrom""];
""552_approve"" [label=""approve""];
""552_burn"" [label=""burn""];
""552__approve"" [label=""_approve""];
""552_decreaseAllowance"" [label=""decreaseAllowance""];
""552_transfer"" [label=""transfer""];
""552__burnFrom"" -> ""552__approve"";
""552_burn"" -> ""552__burn"";
""552__burnFrom"" -> ""552__burn"";
""552_decreaseAllowance"" -> ""552__approve"";
""552_increaseAllowance"" -> ""552__approve"";
""552_approve"" -> ""552__approve"";
""552_transferFrom"" -> ""552__transfer"";
""552_transfer"" -> ""552__transfer"";
""552_transferFrom"" -> ""552__approve"";
}
"
0xdcf67546f2253c9c90c2b55447e1efecebcf83d6.sol,HorseyToken,"contract HorseyToken is EthorseHelpers,Pausable { event Claimed(address raceAddress, address eth_address, uint256 tokenId); event Feeding(uint256 tokenId); event ReceivedCarrot(uint256 tokenId, bytes32 newDna); event FeedingFailed(uint256 tokenId); event HorseyRenamed(uint256 tokenId, string newName); event HorseyFreed(uint256 tokenId); RoyalStablesInterface public stables; uint8 public carrotsMultiplier = 1; uint8 public rarityMultiplier = 1; uint256 public claimingFee = 0.000 ether; struct FeedingData { uint256 blockNumber; uint256 horsey; }",1,"subgraph cluster_2083_HorseyToken {
label=""HorseyToken"";
""2083_setRarityMultiplier"" [label=""setRarityMultiplier""];
""2083_constructor"" [label=""constructor""];
""2083_setCarrotsMultiplier"" [label=""setCarrotsMultiplier""];
""2083_claim"" [label=""claim""];
""2083_fallback"" [label=""fallback""];
""2083_setRenamingCosts"" [label=""setRenamingCosts""];
""2083_stopFeeding"" [label=""stopFeeding""];
""2083__generate_special_horsey"" [label=""_generate_special_horsey""];
""2083_addHorseIndex"" [label=""addHorseIndex""];
""2083__shiftRight"" [label=""_shiftRight""];
""2083_getCarrotCredits"" [label=""getCarrotCredits""];
""2083__makeSpecialId"" [label=""_makeSpecialId""];
""2083_getHorsey"" [label=""getHorsey""];
""2083_freeForCarrots"" [label=""freeForCarrots""];
""2083__increaseRarity"" [label=""_increaseRarity""];
""2083_addLegitRaceAddress"" [label=""addLegitRaceAddress""];
""2083__shiftLeft"" [label=""_shiftLeft""];
""2083__feed"" [label=""_feed""];
""2083_withdraw"" [label=""withdraw""];
""2083_renameHorsey"" [label=""renameHorsey""];
""2083_setClaimingCosts"" [label=""setClaimingCosts""];
""2083_can_claim"" [label=""can_claim""];
""2083_feed"" [label=""feed""];
""2083_getOwnedTokens"" [label=""getOwnedTokens""];
""2083_stopFeeding"" -> ""2083__feed"";
""2083_feed"" -> ""2083_whenNotPaused"";
""2083_setClaimingCosts"" -> ""2083_onlyOwner"";
""2083_addHorseIndex"" -> ""2083_onlyOwner"";
""2083_setCarrotsMultiplier"" -> ""2083_onlyOwner"";
""2083_claim"" -> ""2083_costs"";
""2083_setRarityMultiplier"" -> ""2083_onlyOwner"";
""2083_feed"" -> ""2083_carrotsMeetLevel"";
""2083_claim"" -> ""2083__generate_special_horsey"";
""2083_withdraw"" -> ""2083_onlyOwner"";
""2083_addLegitRaceAddress"" -> ""2083__addLegitRace"";
""2083_addLegitRaceAddress"" -> ""2083_onlyOwner"";
""2083_can_claim"" -> ""2083__isWinnerOf"";
""2083__generate_special_horsey"" -> ""2083__shiftRight"";
""2083_claim"" -> ""2083__isWinnerOf"";
""2083_renameHorsey"" -> ""2083_whenNotPaused"";
""2083__feed"" -> ""2083__increaseRarity"";
""2083_feed"" -> ""2083_noFeedingInProgress"";
""2083_freeForCarrots"" -> ""2083_onlyOwnerOf"";
""2083__generate_special_horsey"" -> ""2083__makeSpecialId"";
""2083_renameHorsey"" -> ""2083_costs"";
""2083_freeForCarrots"" -> ""2083_whenNotPaused"";
""2083_stopFeeding"" -> ""2083_feedingInProgress"";
""2083_constructor"" -> ""2083_constructor"";
""2083__increaseRarity"" -> ""2083__shiftLeft"";
""2083_setRenamingCosts"" -> ""2083_onlyOwner"";
""2083_addHorseIndex"" -> ""2083__addHorse"";
""2083_renameHorsey"" -> ""2083_onlyOwnerOf"";
""2083_claim"" -> ""2083_whenNotPaused"";
""2083_feed"" -> ""2083_onlyOwnerOf"";
}
"
0xed6cd75aac7db5abbf382673dfe76e27c7399150.sol,VIPSToken,contract VIPSToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 60000000000 * (10**8); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function VIPSToken () { owner = msg.sender; },1,"subgraph cluster_756_VIPSToken {
label=""VIPSToken"";
""756_VIPSToken"" [label=""VIPSToken""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_totalSupply"" [label=""totalSupply""];
""756_approve"" [label=""approve""];
""756_refundTokens"" [label=""refundTokens""];
""756_setOwner"" [label=""setOwner""];
""756_transferFrom"" [label=""transferFrom""];
""756_transfer"" [label=""transfer""];
""756_createTokens"" [label=""createTokens""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_approve"" -> ""756_approve"";
""756_createTokens"" -> ""756_safeSub"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_transfer"" -> ""756_transfer"";
}
"
0x1d1811189e2a8dd8d5f22cdc164273bf3d6fdd43.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },1,"subgraph cluster_523_BasicToken {
label=""BasicToken"";
""523_balanceOf"" [label=""balanceOf""];
""523_transfer"" [label=""transfer""];
""523_totalSupply"" [label=""totalSupply""];
""523_isContract"" [label=""isContract""];
""523_transferToContract"" [label=""transferToContract""];
""523_transfer"" -> ""523_balanceOf"";
""523_transferToContract"" -> ""523_isContract"";
""523_transfer"" -> ""523_isContract"";
""523_transferToContract"" -> ""523_balanceOf"";
}
"
0xb3b3fa00a534ab0c7437bc5e9f4f97f1f98b930d.sol,LuckyCoin,"contract LuckyCoin is Coinevents{ using SafeMath for *; using NameFilter for string; string constant public name = ; string constant public symbol = ; uint256 constant private rndGap_ = 2 hours; uint256 ticketstotal_ = 1500; uint256 grouptotal_ = 250; uint256 jackpot = 10 ether; uint256 public rID_= 0; uint256 _headtickets = 500; bool public activated_ = false; address community_addr = 0x180A14aF38384dc15Ce96cbcabCfC8F47794AC3E; address prize_addr = 0x180A14aF38384dc15Ce96cbcabCfC8F47794AC3E; address activate_addr2 = 0x180A14aF38384dc15Ce96cbcabCfC8F47794AC3E; address activate_addr1 = 0x6C7DFE3c255a098Ea031f334436DD50345cFC737; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0xc87a693dbba31aefb9457683b7d245dad756db88); mapping (uint256 => Coindatasets.Round) public round_; event LogbuyNums(address addr, uint begin, uint end); mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Coindatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => Coindatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256=>mapping(uint=> mapping(uint=>uint))) orders; constructor() public{ }",1,"subgraph cluster_3190_LuckyCoin {
label=""LuckyCoin"";
""3190_distributeVault"" [label=""distributeVault""];
""3190_ticket"" [label=""ticket""];
""3190_reloadTickets"" [label=""reloadTickets""];
""3190_reloadEarnings"" [label=""reloadEarnings""];
""3190_calulateXticket"" [label=""calulateXticket""];
""3190_withdraw"" [label=""withdraw""];
""3190_getBuyPrice"" [label=""getBuyPrice""];
""3190_receivePlayerInfo"" [label=""receivePlayerInfo""];
""3190_managePlayer"" [label=""managePlayer""];
""3190_activate"" [label=""activate""];
""3190_getTimeLeft"" [label=""getTimeLeft""];
""3190_fallback"" [label=""fallback""];
""3190_registerNameXaddr"" [label=""registerNameXaddr""];
""3190_reLoadXaddr"" [label=""reLoadXaddr""];
""3190_calcTicketEarnings"" [label=""calcTicketEarnings""];
""3190_judgeWin"" [label=""judgeWin""];
""3190_searchtickets"" [label=""searchtickets""];
""3190_buyXid"" [label=""buyXid""];
""3190_updateTicketVault"" [label=""updateTicketVault""];
""3190_constructor"" [label=""constructor""];
""3190_registerNameXname"" [label=""registerNameXname""];
""3190_buyXaddr"" [label=""buyXaddr""];
""3190_searchTicketsXaddr"" [label=""searchTicketsXaddr""];
""3190_buyXname"" [label=""buyXname""];
""3190_randNums"" [label=""randNums""];
""3190_buyTicket"" [label=""buyTicket""];
""3190_withdrawEarnings"" [label=""withdrawEarnings""];
""3190_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""3190_reLoadXname"" [label=""reLoadXname""];
""3190_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""3190_receivePlayerNameList"" [label=""receivePlayerNameList""];
""3190_determinePID"" [label=""determinePID""];
""3190_endRound"" [label=""endRound""];
""3190_buyXid"" -> ""3190_isTicketsLimits"";
""3190_registerNameXname"" -> ""3190_isHuman"";
""3190_activate"" -> ""3190_isHuman"";
""3190_buyXname"" -> ""3190_isWithinLimits"";
""3190_reloadTickets"" -> ""3190_isActivated"";
""3190_buyXaddr"" -> ""3190_isWithinLimits"";
""3190_buyXid"" -> ""3190_isHuman"";
""3190_buyXname"" -> ""3190_isTicketsLimits"";
""3190_buyXid"" -> ""3190_isWithinLimits"";
""3190_buyXid"" -> ""3190_determinePID"";
""3190_reLoadXaddr"" -> ""3190_reloadTickets"";
""3190_buyTicket"" -> ""3190_ticket"";
""3190_reLoadXname"" -> ""3190_reloadTickets"";
""3190_reloadTickets"" -> ""3190_reloadEarnings"";
""3190_buyXid"" -> ""3190_buyTicket"";
""3190_buyXname"" -> ""3190_buyTicket"";
""3190_withdraw"" -> ""3190_withdrawEarnings"";
""3190_buyXaddr"" -> ""3190_isHuman"";
""3190_buyTicket"" -> ""3190_endRound"";
""3190_reloadTickets"" -> ""3190_ticket"";
""3190_buyXaddr"" -> ""3190_determinePID"";
""3190_endRound"" -> ""3190_randNums"";
""3190_registerNameXaddr"" -> ""3190_isHuman"";
""3190_reLoadXaddr"" -> ""3190_isHuman"";
""3190_reloadEarnings"" -> ""3190_updateTicketVault"";
""3190_reLoadXname"" -> ""3190_isActivated"";
""3190_fallback"" -> ""3190_activate"";
""3190_fallback"" -> ""3190_getBuyPrice"";
""3190_buyXname"" -> ""3190_determinePID"";
""3190_buyXname"" -> ""3190_isActivated"";
""3190_buyXid"" -> ""3190_isActivated"";
""3190_managePlayer"" -> ""3190_updateTicketVault"";
""3190_buyXname"" -> ""3190_isHuman"";
""3190_reloadTickets"" -> ""3190_getBuyPrice"";
""3190_buyXaddr"" -> ""3190_buyTicket"";
""3190_ticket"" -> ""3190_managePlayer"";
""3190_reLoadXname"" -> ""3190_isHuman"";
""3190_buyXaddr"" -> ""3190_isActivated"";
""3190_fallback"" -> ""3190_buyTicket"";
""3190_reLoadXname"" -> ""3190_isTicketsLimits"";
""3190_ticket"" -> ""3190_distributeVault"";
""3190_getPlayerInfoByAddress"" -> ""3190_judgeWin"";
""3190_getPlayerInfoByAddress"" -> ""3190_calcTicketEarnings"";
""3190_reLoadXaddr"" -> ""3190_isActivated"";
""3190_withdraw"" -> ""3190_isHuman"";
""3190_buyXaddr"" -> ""3190_isTicketsLimits"";
""3190_updateTicketVault"" -> ""3190_judgeWin"";
""3190_distributeVault"" -> ""3190_getBuyPrice"";
""3190_reLoadXaddr"" -> ""3190_isTicketsLimits"";
""3190_fallback"" -> ""3190_determinePID"";
""3190_reloadTickets"" -> ""3190_endRound"";
""3190_ticket"" -> ""3190_calulateXticket"";
""3190_withdrawEarnings"" -> ""3190_updateTicketVault"";
}
"
0x4d4377ef856e89cbf76f8e994ab3065445d82f4f.sol,Airdrop,"contract Airdrop is Pausable { using SafeMath for uint256; GenbbyToken public token; uint256 public tokens_sold; uint256 public constant decimals = 18; uint256 public constant factor = 10 ** decimals; uint256 public constant total_tokens = 500000 * factor; event Drop(address to, uint256 amount); function setToken(address tokenAddress) onlyOwner public { token = GenbbyToken(tokenAddress); }",1,"subgraph cluster_1306_Airdrop {
label=""Airdrop"";
""1306_drop"" [label=""drop""];
""1306_fallback"" [label=""fallback""];
""1306_setToken"" [label=""setToken""];
""1306_drop"" -> ""1306_whenNotPaused"";
""1306_drop"" -> ""1306_onlyOwner"";
""1306_setToken"" -> ""1306_onlyOwner"";
}
"
0x78a73b6cbc5d183ce56e786f6e905cadec63547b.sol,FabricTokenFundraiser,"contract FabricTokenFundraiser is FabricToken, FabricTokenFundraiserConfig, Whitelist { bool public finalized = false; address public beneficiary; uint public conversionRate; uint public startDate; uint public endDate; uint public hardCap; FabricTokenSafe public fabricTokenSafe; uint internal minimumContribution; uint internal individualLimit; uint private tokensSold; bool private partnerTokensClaimed = false; event FundsReceived(address indexed _address, uint _ethers, uint _tokens, uint _newTotalSupply, uint _conversionRate); event BeneficiaryChange(address _beneficiary); event ConversionRateChange(uint _conversionRate); event Finalized(address _beneficiary, uint _ethers, uint _totalSupply); function FabricTokenFundraiser(address _beneficiary) public FabricToken(0) Whitelist(msg.sender) { require(_beneficiary != 0); beneficiary = _beneficiary; conversionRate = CONVERSION_RATE; startDate = START_DATE; endDate = END_DATE; hardCap = TOKENS_HARD_CAP; tokensSold = 0; minimumContribution = MIN_CONTRIBUTION; individualLimit = INDIVIDUAL_ETHER_LIMIT * CONVERSION_RATE; fabricTokenSafe = new FabricTokenSafe(this); freeze(); }",1,"subgraph cluster_1539_FabricTokenFundraiser {
label=""FabricTokenFundraiser"";
""1539_FabricTokenFundraiser"" [label=""FabricTokenFundraiser""];
""1539_claimPartnerTokens"" [label=""claimPartnerTokens""];
""1539_setConversionRate"" [label=""setConversionRate""];
""1539_setBeneficiary"" [label=""setBeneficiary""];
""1539_finalize"" [label=""finalize""];
""1539_buyTokens"" [label=""buyTokens""];
""1539_fallback"" [label=""fallback""];
""1539_setBeneficiary"" -> ""1539_onlyOwner"";
""1539_fallback"" -> ""1539_buyTokens"";
""1539_finalize"" -> ""1539_unfreeze"";
""1539_FabricTokenFundraiser"" -> ""1539_Whitelist"";
""1539_FabricTokenFundraiser"" -> ""1539_FabricToken"";
""1539_finalize"" -> ""1539_onlyOwner"";
""1539_setConversionRate"" -> ""1539_onlyOwner"";
""1539_buyTokens"" -> ""1539_onlyWhitelisted"";
""1539_FabricTokenFundraiser"" -> ""1539_freeze"";
}
"
0x0096dc2246fc3627cc2bf87a3b0d2e0f87b58589.sol,Zethroll,"contract Zethroll is ZTHReceivingContract { using SafeMath for uint; modifier betIsValid(uint _betSize, uint _playerNumber) { require( calculateProfit(_betSize, _playerNumber) < maxProfit && _betSize >= minBet && _playerNumber > minNumber && _playerNumber < maxNumber); _; }",1,"subgraph cluster_866_Zethroll {
label=""Zethroll"";
""866_calculateProfit"" [label=""calculateProfit""];
""866_ownerSetMinBet"" [label=""ownerSetMinBet""];
""866_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""866_ownerkill"" [label=""ownerkill""];
""866_setMaxProfit"" [label=""setMaxProfit""];
""866__finishBet"" [label=""_finishBet""];
""866_dumpdivs"" [label=""dumpdivs""];
""866_ownerTransferZTH"" [label=""ownerTransferZTH""];
""866__playerRollDice"" [label=""_playerRollDice""];
""866_tokenFallback"" [label=""tokenFallback""];
""866__zthToken"" [label=""_zthToken""];
""866_ownerSetBankroll"" [label=""ownerSetBankroll""];
""866_fallback"" [label=""fallback""];
""866_finishBet"" [label=""finishBet""];
""866_ownerSetMaxProfitAsPercentOfHouse"" [label=""ownerSetMaxProfitAsPercentOfHouse""];
""866_random"" [label=""random""];
""866_ownerChangeOwner"" [label=""ownerChangeOwner""];
""866_ownerPauseGame"" [label=""ownerPauseGame""];
""866_maxRandom"" [label=""maxRandom""];
""866_constructor"" [label=""constructor""];
""866_random"" -> ""866_maxRandom"";
""866_ownerTransferZTH"" -> ""866_onlyOwner"";
""866_ownerChangeOwner"" -> ""866_onlyOwner"";
""866_tokenFallback"" -> ""866_setMaxProfit"";
""866__playerRollDice"" -> ""866_betIsValid"";
""866__playerRollDice"" -> ""866_gameIsActive"";
""866_ownerSetMaxProfitAsPercentOfHouse"" -> ""866_onlyOwner"";
""866_finishBet"" -> ""866_gameIsActive"";
""866_ownerPauseGame"" -> ""866_onlyOwner"";
""866__finishBet"" -> ""866_setMaxProfit"";
""866_constructor"" -> ""866_ownerSetMinBet"";
""866__playerRollDice"" -> ""866__zthToken"";
""866_constructor"" -> ""866_ownerSetMaxProfitAsPercentOfHouse"";
""866__playerRollDice"" -> ""866__finishBet"";
""866_ownerSetBankroll"" -> ""866_onlyOwner"";
""866__finishBet"" -> ""866_random"";
""866_ownerSetMinBet"" -> ""866_onlyOwner"";
""866_ownerSetMaxProfitAsPercentOfHouse"" -> ""866_setMaxProfit"";
""866__finishBet"" -> ""866_calculateProfit"";
""866_ownerkill"" -> ""866_onlyOwner"";
""866_ownerTransferZTH"" -> ""866_setMaxProfit"";
""866_tokenFallback"" -> ""866__playerRollDice"";
""866_ownerUpdateContractBalance"" -> ""866_onlyOwner"";
""866_finishBet"" -> ""866__finishBet"";
}
"
0x3fe1bd3f808682e10cc16ccfc0e9476555ed93a7.sol,WFCToken,"contract WFCToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public newContractAddr; bool public isFunding; uint256 public fundingStartBlock; uint256 public fundingStopBlock; uint256 public currentSupply; uint256 public tokenRaised = 0; uint256 public tokenMigrated = 0; uint256 public tokenExchangeRate = 625; event AllocateToken(address indexed _to, uint256 _value); event IssueToken(address indexed _to, uint256 _value); event IncreaseSupply(uint256 _value); event DecreaseSupply(uint256 _value); event Migrate(address indexed _to, uint256 _value); function formatDecimals(uint256 _value) internal returns (uint256 ) { return _value * 10 ** decimals; }",1,"subgraph cluster_817_WFCToken {
label=""WFCToken"";
""817_startFunding"" [label=""startFunding""];
""817_allocateToken"" [label=""allocateToken""];
""817_changeOwner"" [label=""changeOwner""];
""817_formatDecimals"" [label=""formatDecimals""];
""817_setMigrateContract"" [label=""setMigrateContract""];
""817_stopFunding"" [label=""stopFunding""];
""817_transferETH"" [label=""transferETH""];
""817_fallback"" [label=""fallback""];
""817_migrate"" [label=""migrate""];
""817_WFCToken"" [label=""WFCToken""];
""817_decreaseSupply"" [label=""decreaseSupply""];
""817_setTokenExchangeRate"" [label=""setTokenExchangeRate""];
""817_WFCToken"" -> ""817_formatDecimals"";
""817_startFunding"" -> ""817_isOwner"";
""817_setTokenExchangeRate"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_formatDecimals"";
""817_allocateToken"" -> ""817_safeAdd"";
""817_fallback"" -> ""817_safeAdd"";
""817_allocateToken"" -> ""817_isOwner"";
""817_allocateToken"" -> ""817_safeMult"";
""817_migrate"" -> ""817_safeAdd"";
""817_transferETH"" -> ""817_isOwner"";
""817_stopFunding"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_formatDecimals"";
""817_decreaseSupply"" -> ""817_safeSubtract"";
""817_fallback"" -> ""817_safeMult"";
""817_changeOwner"" -> ""817_isOwner"";
""817_decreaseSupply"" -> ""817_isOwner"";
""817_setMigrateContract"" -> ""817_isOwner"";
}
"
0x0692de52a966c107021e8a84db8486b4be57ecf1.sol,OQToken,contract OQToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 1000000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; function OQToken () { owner = msg.sender; },1,"subgraph cluster_756_OQToken {
label=""OQToken"";
""756_transferFrom"" [label=""transferFrom""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_refundTokens"" [label=""refundTokens""];
""756_transfer"" [label=""transfer""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_setOwner"" [label=""setOwner""];
""756_OQToken"" [label=""OQToken""];
""756_approve"" [label=""approve""];
""756_totalSupply"" [label=""totalSupply""];
""756_createTokens"" [label=""createTokens""];
""756_approve"" -> ""756_approve"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
""756_transferFrom"" -> ""756_transferFrom"";
""756_createTokens"" -> ""756_safeSub"";
""756_transfer"" -> ""756_transfer"";
}
"
0x797d713d8d7a2815ccf3dcf9719e3e9f1712c370.sol,Trustee,contract Trustee is Ownable { using SaferMath for uint256; StoxSmartToken public stox; struct Grant { uint256 value; uint256 start; uint256 cliff; uint256 end; uint256 transferred; bool revokable; },1,"subgraph cluster_1489_Trustee {
label=""Trustee"";
""1489_vestedTokens"" [label=""vestedTokens""];
""1489_revoke"" [label=""revoke""];
""1489_unlockVestedTokens"" [label=""unlockVestedTokens""];
""1489_grant"" [label=""grant""];
""1489_Trustee"" [label=""Trustee""];
""1489_calculateVestedTokens"" [label=""calculateVestedTokens""];
""1489_unlockVestedTokens"" -> ""1489_calculateVestedTokens"";
""1489_vestedTokens"" -> ""1489_calculateVestedTokens"";
""1489_grant"" -> ""1489_onlyOwner"";
""1489_revoke"" -> ""1489_onlyOwner"";
}
"
0xc4aad17558fa95c8937d0856b2dad74c1a7a095f.sol,AgiCrowdsale,"contract AgiCrowdsale is Ownable, ReentrancyGuard { using SafeMath for uint256; uint256 public firstDayCap; uint256 public cap; uint256 public goal; uint256 public rate; uint256 public constant WEI_TO_COGS = 10**uint256(10); address public wallet; RefundVault public vault; SingularityNetToken public token; uint256 public startTime; uint256 public endTime; uint256 public firstDay; bool public isFinalized = false; uint256 public weiRaised; mapping(address => bool) public whitelist; mapping(address => uint256) public contribution; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event TokenRelease(address indexed beneficiary, uint256 amount); event TokenRefund(address indexed refundee, uint256 amount); event Finalized(); function AgiCrowdsale( address _token, address _wallet, uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _firstDayCap, uint256 _goal ) { require(_startTime >= getBlockTimestamp()); require(_endTime >= _startTime); require(_rate > 0); require(_goal > 0); require(_cap > 0); require(_wallet != 0x0); vault = new RefundVault(_wallet); token = SingularityNetToken(_token); wallet = _wallet; startTime = _startTime; endTime = _endTime; firstDay = startTime + 1 * 1 days; firstDayCap = _firstDayCap; rate = _rate; goal = _goal; cap = _cap; }",1,"subgraph cluster_1528_AgiCrowdsale {
label=""AgiCrowdsale"";
""1528_getBlockTimestamp"" [label=""getBlockTimestamp""];
""1528_getTokens"" [label=""getTokens""];
""1528_claimUnsold"" [label=""claimUnsold""];
""1528_finalize"" [label=""finalize""];
""1528_capReached"" [label=""capReached""];
""1528_buyTokens"" [label=""buyTokens""];
""1528_validPurchase"" [label=""validPurchase""];
""1528_claimRefund"" [label=""claimRefund""];
""1528_updateWhitelist"" [label=""updateWhitelist""];
""1528_forwardFunds"" [label=""forwardFunds""];
""1528_AgiCrowdsale"" [label=""AgiCrowdsale""];
""1528_goalReached"" [label=""goalReached""];
""1528_fallback"" [label=""fallback""];
""1528_isWhitelisted"" [label=""isWhitelisted""];
""1528_hasEnded"" [label=""hasEnded""];
""1528_claimRefund"" -> ""1528_goalReached"";
""1528_hasEnded"" -> ""1528_capReached"";
""1528_claimUnsold"" -> ""1528_getBlockTimestamp"";
""1528_AgiCrowdsale"" -> ""1528_getBlockTimestamp"";
""1528_buyTokens"" -> ""1528_getTokens"";
""1528_claimUnsold"" -> ""1528_onlyOwner"";
""1528_finalize"" -> ""1528_goalReached"";
""1528_claimRefund"" -> ""1528_nonReentrant"";
""1528_hasEnded"" -> ""1528_getBlockTimestamp"";
""1528_finalize"" -> ""1528_hasEnded"";
""1528_fallback"" -> ""1528_buyTokens"";
""1528_buyTokens"" -> ""1528_validPurchase"";
""1528_validPurchase"" -> ""1528_getBlockTimestamp"";
""1528_buyTokens"" -> ""1528_getBlockTimestamp"";
""1528_updateWhitelist"" -> ""1528_onlyOwner"";
""1528_finalize"" -> ""1528_onlyOwner"";
""1528_buyTokens"" -> ""1528_forwardFunds"";
}
"
0x17f68886d00845867c154c912b4ccc506ec92fc7.sol,DelegatedShareholderAssociation,"contract DelegatedShareholderAssociation is TokenRecipient { uint public minimumQuorum; uint public debatingPeriodInMinutes; Proposal[] public proposals; uint public numProposals; ERC20 public sharesTokenAddress; mapping (address => address) public delegatesByDelegator; mapping (address => uint) public lockedDelegatingTokens; mapping (address => uint) public delegatedAmountsByDelegate; uint public totalLockedTokens; uint public requiredSharesToBeBoardMember; TokenLocker public tokenLocker; event ProposalAdded(uint proposalID, address recipient, uint amount, bytes metadataHash); event Voted(uint proposalID, bool position, address voter); event ProposalTallied(uint proposalID, uint yea, uint nay, uint quorum, bool active); event ChangeOfRules(uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newSharesTokenAddress); event TokensDelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); event TokensUndelegated(address indexed delegator, uint numberOfTokens, address indexed delegate); struct Proposal { address recipient; uint amount; bytes metadataHash; uint timeCreated; uint votingDeadline; bool finalized; bool proposalPassed; uint numberOfVotes; bytes32 proposalHash; Vote[] votes; mapping (address => bool) voted; }",1,"subgraph cluster_1103_DelegatedShareholderAssociation {
label=""DelegatedShareholderAssociation"";
""1103_changeVotingRules"" [label=""changeVotingRules""];
""1103_hasVoted"" [label=""hasVoted""];
""1103_vote"" [label=""vote""];
""1103_executeProposal"" [label=""executeProposal""];
""1103_countVotes"" [label=""countVotes""];
""1103_checkProposalCode"" [label=""checkProposalCode""];
""1103_setDelegateAndLockTokens"" [label=""setDelegateAndLockTokens""];
""1103_clearDelegateAndUnlockTokens"" [label=""clearDelegateAndUnlockTokens""];
""1103_newProposal"" [label=""newProposal""];
""1103_newProposal"" -> ""1103_onlyBoardMembers"";
""1103_executeProposal"" -> ""1103_countVotes"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyShareholders"";
""1103_setDelegateAndLockTokens"" -> ""1103_onlyUndelegated"";
""1103_newProposal"" -> ""1103_notSelf"";
""1103_vote"" -> ""1103_onlyShareholders"";
""1103_vote"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_onlyDelegated"";
""1103_executeProposal"" -> ""1103_notSelf"";
""1103_changeVotingRules"" -> ""1103_onlySelf"";
""1103_setDelegateAndLockTokens"" -> ""1103_notSelf"";
""1103_clearDelegateAndUnlockTokens"" -> ""1103_notSelf"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0x6fbc1b8f756f43cfbfd45085380cc375650ff3d6.sol,ZethrSnap,contract ZethrSnap { struct SnapEntry { uint blockNumber; uint profit; },1,"subgraph cluster_563_ZethrSnap {
label=""ZethrSnap"";
""563_walletSetWallet"" [label=""walletSetWallet""];
""563_withdraw"" [label=""withdraw""];
""563_walletCreateSnap"" [label=""walletCreateSnap""];
""563_tokenFallback"" [label=""tokenFallback""];
""563_walletSetSigner"" [label=""walletSetSigner""];
""563_walletWithdrawTokens"" [label=""walletWithdrawTokens""];
""563_constructor"" [label=""constructor""];
""563_getSnap"" [label=""getSnap""];
""563_toUint"" [label=""toUint""];
""563_toSig"" [label=""toSig""];
""563_fallback"" [label=""fallback""];
""563_getSnapsLength"" [label=""getSnapsLength""];
""563_claim"" [label=""claim""];
""563_ownerSetPaused"" [label=""ownerSetPaused""];
""563_walletSetWallet"" -> ""563_walletOnly"";
""563_walletWithdrawTokens"" -> ""563_walletOnly"";
""563_claim"" -> ""563_toSig"";
""563_walletSetSigner"" -> ""563_walletOnly"";
""563_toSig"" -> ""563_toUint"";
""563_walletCreateSnap"" -> ""563_walletOnly"";
""563_ownerSetPaused"" -> ""563_ownerOnly"";
}
"
0x0e69d0a2bbb30abcb7e5cfea0e4fde19c00a8d47.sol,ContractLock,"contract ContractLock is DSStop { uint public unlockTime; mapping (address => bool) public isAdmin; event LogAddAdmin(address whoAdded, address newAdmin); event LogRemoveAdmin(address whoRemoved, address admin); constructor(uint _unlockTime) public { unlockTime = _unlockTime; isAdmin[msg.sender] = true; emit LogAddAdmin(msg.sender, msg.sender); }",1,"subgraph cluster_1015_ContractLock {
label=""ContractLock"";
""1015_constructor"" [label=""constructor""];
""1015_addAdmin"" [label=""addAdmin""];
""1015_removeAdmin"" [label=""removeAdmin""];
""1015_setOwner"" [label=""setOwner""];
""1015_setUnlockTime"" [label=""setUnlockTime""];
""1015_setOwner"" -> ""1015_auth"";
""1015_setUnlockTime"" -> ""1015_auth"";
""1015_setOwner"" -> ""1015_addAdmin"";
""1015_addAdmin"" -> ""1015_auth"";
""1015_setOwner"" -> ""1015_removeAdmin"";
""1015_removeAdmin"" -> ""1015_auth"";
}
"
0x88355a32a8c5cc399aa09b9d21ebcba935ae5d2f.sol,BankWallet,"contract BankWallet is Pausable, RequiringAuthorization, SafeMath { address public edgelessToken; address public edgelessCasino; uint public maxFundAmount = 0.22 ether; event Withdrawal(address _token, uint _amount); event Deposit(address _receiver, uint _amount); event Fund(address _receiver, uint _amount); constructor(address _token, address _casino) public { edgelessToken = _token; edgelessCasino = _casino; owner = msg.sender; }",1,"subgraph cluster_666_BankWallet {
label=""BankWallet"";
""666_setMaxFundAmount"" [label=""setMaxFundAmount""];
""666_setCasinoContract"" [label=""setCasinoContract""];
""666_withdraw"" [label=""withdraw""];
""666_fallback"" [label=""fallback""];
""666_constructor"" [label=""constructor""];
""666__approveForCasino"" [label=""_approveForCasino""];
""666_approve"" [label=""approve""];
""666_deposit"" [label=""deposit""];
""666_fund"" [label=""fund""];
""666_withdraw"" -> ""666_onlyAdmin"";
""666_setMaxFundAmount"" -> ""666_onlyAdmin"";
""666_setCasinoContract"" -> ""666__approveForCasino"";
""666_setCasinoContract"" -> ""666_onlyAdmin"";
""666_fund"" -> ""666_onlyAuthorized"";
""666_deposit"" -> ""666_onlyAuthorized"";
""666_approve"" -> ""666__approveForCasino"";
""666_approve"" -> ""666_onlyAuthorized"";
}
"
0x27e1d539cb59518bf14e4525b1c3b4721aaa9080.sol,FourCrowdsale,"contract FourCrowdsale is TokenCappedCrowdsale, WhitelistCrowdsale, FinalizableCrowdsale { event RateChanged(uint256 newRate, string name); uint256 private constant E18 = 10**18; uint256 private TOKEN_SALE_CAP = 152000000 * E18; uint256 public constant TEAM_TOKENS = 50000000 * E18; address public constant TEAM_ADDRESS = 0x3EC2fC20c04656F4B0AA7372258A36FAfB1EF427; uint256 public constant ADVISORS_AND_CONTRIBUTORS_TOKENS = 39000000 * E18; address public constant ADVISORS_AND_CONTRIBUTORS_ADDRESS = 0x90adab6891514DC24411B9Adf2e11C0eD7739999; address public constant UNSOLD_ADDRESS = 0x4eC155995211C8639375Ae3106187bff3FF5DB46; uint256 public bonus; function FourCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _bonus, address _wallet, address _token) TokenCappedCrowdsale(TOKEN_SALE_CAP) Crowdsale(_startTime, _endTime, _rate, _wallet, _token) public { bonus = _bonus; }",1,"subgraph cluster_2547_FourCrowdsale {
label=""FourCrowdsale"";
""2547_finalization"" [label=""finalization""];
""2547_processPresaleOrEarlyContributors"" [label=""processPresaleOrEarlyContributors""];
""2547_FourCrowdsale"" [label=""FourCrowdsale""];
""2547_changeStartAndEndTime"" [label=""changeStartAndEndTime""];
""2547_setRate"" [label=""setRate""];
""2547_releaseTokenOwnership"" [label=""releaseTokenOwnership""];
""2547_recoverERC20Tokens"" [label=""recoverERC20Tokens""];
""2547_setCrowdsaleWallet"" [label=""setCrowdsaleWallet""];
""2547_changeEndTime"" [label=""changeEndTime""];
""2547_getTokenAmount"" [label=""getTokenAmount""];
""2547_setBonus"" [label=""setBonus""];
""2547_setRate"" -> ""2547_onlyOwner"";
""2547_FourCrowdsale"" -> ""2547_TokenCappedCrowdsale"";
""2547_setCrowdsaleWallet"" -> ""2547_onlyOwner"";
""2547_recoverERC20Tokens"" -> ""2547_onlyOwner"";
""2547_processPresaleOrEarlyContributors"" -> ""2547_onlyOwner"";
""2547_changeEndTime"" -> ""2547_onlyOwner"";
""2547_setBonus"" -> ""2547_onlyOwner"";
""2547_changeStartAndEndTime"" -> ""2547_onlyOwner"";
""2547_FourCrowdsale"" -> ""2547_Crowdsale"";
""2547_releaseTokenOwnership"" -> ""2547_onlyOwner"";
""2547_finalization"" -> ""2547_finalization"";
}
"
0x0e8175729e02db48ca0e2ca80efb72fe84a7dedd.sol,MechanicKittyUnit,"contract MechanicKittyUnit is ERC20, PremiumUnit { using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint256 public constant unitId = 3; uint256 public unitProductionSeconds = 43200; uint8 public constant decimals = 0; Units constant units = Units(0xf936AA9e1f22C915Abf4A66a5a6e94eb8716BA5e); address constant factories = 0xC767B1CEc507f1584469E8efE1a94AD4c75e02ed; mapping(address => uint256) balances; mapping(address => uint256) lastEquipTime; mapping(address => mapping(address => uint256)) allowed; uint256 public totalSupply; function totalSupply() external view returns (uint) { return totalSupply.sub(balances[address(0)]); }",1,"subgraph cluster_501_MechanicKittyUnit {
label=""MechanicKittyUnit"";
""501_transfer"" [label=""transfer""];
""501_approveAndCall"" [label=""approveAndCall""];
""501_allowance"" [label=""allowance""];
""501_approve"" [label=""approve""];
""501_mintUnit"" [label=""mintUnit""];
""501_unequipUnit"" [label=""unequipUnit""];
""501_totalSupply"" [label=""totalSupply""];
""501_balanceOf"" [label=""balanceOf""];
""501_transferFrom"" [label=""transferFrom""];
""501_equipUnit"" [label=""equipUnit""];
}
"
0xbccfe34a2c6c59e396d2873d0d5bcb4736c8e2e7.sol,SwapController,"contract SwapController is DSAuth, TokenController { TokenTransferGuard[] public guards; function SwapController(address[] _guards) { for (uint i=0; i<_guards.length; i++) { addGuard(_guards[i]); }",1,"subgraph cluster_405_SwapController {
label=""SwapController"";
""405_proxyPayment"" [label=""proxyPayment""];
""405_addGuard"" [label=""addGuard""];
""405_changeController"" [label=""changeController""];
""405_SwapController"" [label=""SwapController""];
""405_onTransfer"" [label=""onTransfer""];
""405_onApprove"" [label=""onApprove""];
""405_SwapController"" -> ""405_addGuard"";
""405_addGuard"" -> ""405_auth"";
""405_changeController"" -> ""405_auth"";
}
"
0x174bb5d84b78e9e2248e7aa2c789aeba82f72f68.sol,LuckyTree,"contract LuckyTree is Owned, SafeMath{ uint public leafPrice; uint public gameStart; uint public gameDuration; uint public tokenLockDuration; uint public totalParticipationAmount; uint public totalLockedAmount; uint public numberOfLeafs; uint public participantIndex; bool public fundsTransfered; address public winner; mapping(uint => address) public participants; mapping(uint => uint) public participationAmount; mapping(address => bool) public hasParticipated; mapping(address => bool) public hasWithdrawn; mapping(address => uint) public participantIndexes; mapping(uint => address) public leafOwners; event GameWinner(address winner); event GameEnded(uint block); event GameStarted(uint block); event GameFailed(uint block); event GameLocked(uint block); event GameUnlocked(uint block); enum state{ pending, running, paused, finished, closed, claimed }",1,"subgraph cluster_1043_LuckyTree {
label=""LuckyTree"";
""1043_random"" [label=""random""];
""1043_lockFunds"" [label=""lockFunds""];
""1043_processTransaction"" [label=""processTransaction""];
""1043_closeGame"" [label=""closeGame""];
""1043_pickWinner"" [label=""pickWinner""];
""1043_manuallyProcessTransaction"" [label=""manuallyProcessTransaction""];
""1043_unlockFunds"" [label=""unlockFunds""];
""1043_setCreditGameAddress"" [label=""setCreditGameAddress""];
""1043_checkInternalBalance"" [label=""checkInternalBalance""];
""1043_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""1043_setTokenAddress"" [label=""setTokenAddress""];
""1043_receiveApproval"" [label=""receiveApproval""];
""1043_LuckyTree"" [label=""LuckyTree""];
""1043_getVariablesForDapp"" [label=""getVariablesForDapp""];
""1043_manualLockFunds"" [label=""manualLockFunds""];
""1043_killContract"" [label=""killContract""];
""1043_salvageTokensFromContract"" -> ""1043_onlyOwner"";
""1043_manuallyProcessTransaction"" -> ""1043_onlyOwner"";
""1043_manualLockFunds"" -> ""1043_onlyOwner"";
""1043_setCreditGameAddress"" -> ""1043_onlyOwner"";
""1043_setTokenAddress"" -> ""1043_onlyOwner"";
""1043_pickWinner"" -> ""1043_random"";
""1043_closeGame"" -> ""1043_onlyOwner"";
""1043_killContract"" -> ""1043_onlyOwner"";
""1043_receiveApproval"" -> ""1043_processTransaction"";
""1043_manualLockFunds"" -> ""1043_pickWinner"";
""1043_pickWinner"" -> ""1043_lockFunds"";
""1043_processTransaction"" -> ""1043_pickWinner"";
""1043_manuallyProcessTransaction"" -> ""1043_processTransaction"";
}
"
0x39de38ba63d172b962db2fc2ee5e4376287c50bf.sol,ImmlaIco,"contract ImmlaIco is SafeMath { ImmlaToken public immlaToken; AbstractToken public preIcoToken; address public escrow; address public icoManager; address public tokenImporter = 0x0; address public founder1; address public founder2; address public founder3; address public team; address public bountyOwner; uint public constant teamsReward = 38548226701232220000000000; uint public constant bountyOwnersTokens = 9361712198870680000000000; uint constant BASE = 1000000000000000000; uint public constant defaultIcoStart = 1505422800; uint public icoStart = defaultIcoStart; uint public constant defaultIcoDeadline = 1508101200; uint public icoDeadline = defaultIcoDeadline; uint public constant defaultFoundersRewardTime = 1521061200; uint public foundersRewardTime = defaultFoundersRewardTime; uint public constant minIcoTokenLimit = 18000000 * BASE; uint public constant maxIcoTokenLimit = 434477177 * BASE; uint public importedTokens = 0; uint public soldTokensOnIco = 0; uint public constant soldTokensOnPreIco = 13232941687168431951684000; uint tokenPrice1 = 3640; uint tokenSupply1 = 170053520 * BASE; uint tokenPrice2 = 3549; uint tokenSupply2 = 103725856 * BASE; uint tokenPrice3 = 3458; uint tokenSupply3 = 100319718 * BASE; uint tokenPrice4 = 3367; uint tokenSupply4 = 60378083 * BASE; uint[] public tokenPrices; uint[] public tokenSupplies; bool public initialized = false; bool public migrated = false; bool public sentTokensToFounders = false; bool public icoStoppedManually = false; mapping (address => uint) public balances; event BuyTokens(address buyer, uint value, uint amount); event WithdrawEther(); event StopIcoManually(); event SendTokensToFounders(uint founder1Reward, uint founder2Reward, uint founder3Reward); event ReturnFundsFor(address account); modifier whenInitialized() { require(initialized); _; }",1,"subgraph cluster_1538_ImmlaIco {
label=""ImmlaIco"";
""1538_countTokens"" [label=""countTokens""];
""1538_setNewTokenImporter"" [label=""setNewTokenImporter""];
""1538_fallback"" [label=""fallback""];
""1538_removeTokens"" [label=""removeTokens""];
""1538_stopIco"" [label=""stopIco""];
""1538_ImmlaIco"" [label=""ImmlaIco""];
""1538_setNewManager"" [label=""setNewManager""];
""1538_buyTokens"" [label=""buyTokens""];
""1538_setStateMigrated"" [label=""setStateMigrated""];
""1538_sendTokensToFounders"" [label=""sendTokensToFounders""];
""1538_importTokens"" [label=""importTokens""];
""1538_burnTokens"" [label=""burnTokens""];
""1538_returnFundsFor"" [label=""returnFundsFor""];
""1538_withdrawEther"" [label=""withdrawEther""];
""1538_init"" [label=""init""];
""1538_importTokens"" -> ""1538_add"";
""1538_removeTokens"" -> ""1538_sub"";
""1538_buyTokens"" -> ""1538_add"";
""1538_init"" -> ""1538_onlyManager"";
""1538_withdrawEther"" -> ""1538_onGoalAchievedOrDeadline"";
""1538_sendTokensToFounders"" -> ""1538_add"";
""1538_sendTokensToFounders"" -> ""1538_whenInitialized"";
""1538_returnFundsFor"" -> ""1538_onGoalAchievedOrDeadline"";
""1538_fallback"" -> ""1538_onIcoRunning"";
""1538_sendTokensToFounders"" -> ""1538_onlyManager"";
""1538_buyTokens"" -> ""1538_countTokens"";
""1538_setStateMigrated"" -> ""1538_onlyManager"";
""1538_stopIco"" -> ""1538_onlyManager"";
""1538_sendTokensToFounders"" -> ""1538_mulByFraction"";
""1538_burnTokens"" -> ""1538_notMigrated"";
""1538_countTokens"" -> ""1538_div"";
""1538_countTokens"" -> ""1538_sub"";
""1538_buyTokens"" -> ""1538_removeTokens"";
""1538_setNewManager"" -> ""1538_onlyManager"";
""1538_setNewTokenImporter"" -> ""1538_onlyManager"";
""1538_countTokens"" -> ""1538_add"";
""1538_fallback"" -> ""1538_buyTokens"";
""1538_burnTokens"" -> ""1538_onlyManager"";
""1538_withdrawEther"" -> ""1538_returnFundsFor"";
}
"
0x39f89421c5bf8bb0d855c0216b00b45e3733b515.sol,DINOSale,"contract DINOSale is BaseDINOSale { using SafeMath for uint256; DINOToken public tokenReward; constructor( address ifSuccessfulSendTo, uint fundingGoalInEthers, uint fundingCapInEthers, uint minimumContribution, uint start, uint end, uint rateDINOToEther, address addressOfTokenUsedAsReward ) public { require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this), ); require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this), ); require(fundingGoalInEthers <= fundingCapInEthers, ); require(end > 0, ); beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; fundingCap = fundingCapInEthers * 1 ether; minContribution = minimumContribution * 1 ether; startTime = start; endTime = end; rate = rateDINOToEther; withdrawRate = rateDINOToEther; tokenReward = DINOToken(addressOfTokenUsedAsReward); }",1,"subgraph cluster_1796_DINOSale {
label=""DINOSale"";
""1796_fallback"" [label=""fallback""];
""1796_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1796_owner"" [label=""owner""];
""1796_withdrawToken"" [label=""withdrawToken""];
""1796_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1796_convertToMini"" [label=""convertToMini""];
""1796_safeWithdrawal"" [label=""safeWithdrawal""];
""1796_constructor"" [label=""constructor""];
""1796_fallback"" -> ""1796_checkFundingCap"";
""1796_ownerAllocateTokens"" -> ""1796_onlyOwner"";
""1796_withdrawToken"" -> ""1796_convertToMini"";
""1796_safeWithdrawal"" -> ""1796_afterDeadline"";
""1796_fallback"" -> ""1796_afterStartTime"";
""1796_fallback"" -> ""1796_saleNotClosed"";
""1796_fallback"" -> ""1796_beforeDeadline"";
""1796_fallback"" -> ""1796_checkFundingGoal"";
""1796_ownerAllocateTokens"" -> ""1796_checkFundingGoal"";
""1796_fallback"" -> ""1796_whenNotPaused"";
""1796_ownerAllocateTokens"" -> ""1796_checkFundingCap"";
""1796_safeWithdrawal"" -> ""1796_nonReentrant"";
""1796_fallback"" -> ""1796_nonReentrant"";
""1796_ownerAllocateTokens"" -> ""1796_nonReentrant"";
""1796_ownerSafeWithdrawal"" -> ""1796_nonReentrant"";
""1796_ownerSafeWithdrawal"" -> ""1796_onlyOwner"";
}
"
0xb44a823579aa618b96d6f20a3330901e85f96f73.sol,ClockAuction,"contract ClockAuction is Ownable, ClockAuctionBase { bytes4 public constant INTERFACE_SIGNATURE_ERC721 = bytes4(0x9a20483d); function ClockAuction(address _nftAddress, uint256 _cut) public { require(_cut <= 10000); ownerCut = _cut; ERC721 candidateContract = ERC721(_nftAddress); require(candidateContract.supportsInterface(INTERFACE_SIGNATURE_ERC721)); nonFungibleContract = candidateContract; }",1,"subgraph cluster_842_ClockAuction {
label=""ClockAuction"";
""842_getCurrentPrice"" [label=""getCurrentPrice""];
""842_ClockAuction"" [label=""ClockAuction""];
""842_cancelAuction"" [label=""cancelAuction""];
""842_createAuction"" [label=""createAuction""];
""842_bid"" [label=""bid""];
""842_getAuction"" [label=""getAuction""];
""842_withdrawBalance"" [label=""withdrawBalance""];
""842_cancelAuction"" -> ""842__cancelAuction"";
""842_createAuction"" -> ""842__addAuction"";
""842_getAuction"" -> ""842__isOnAuction"";
""842_bid"" -> ""842__bid"";
""842_getCurrentPrice"" -> ""842__isOnAuction"";
""842_bid"" -> ""842__transfer"";
""842_createAuction"" -> ""842__owns"";
""842_cancelAuction"" -> ""842__isOnAuction"";
""842_createAuction"" -> ""842__escrow"";
""842_getCurrentPrice"" -> ""842__currentPrice"";
}
"
0x6c26dab04c8f2bb07e60f205118e36850fe90981.sol,PoWMLottery,contract PoWMLottery { using SafeMath for uint256; bool public isLotteryOpen = false; address POWM_address = address(0xA146240bF2C04005A743032DC0D241ec0bB2BA2B); POWM maths = POWM(POWM_address); address owner; mapping (uint256 => address) public gamblers; mapping (address => uint256) public token_buyins; mapping (address => uint256) public last_round_bought; uint256 public num_tickets_current_round = 0; uint256 public current_round = 0; uint256 public numTokensInLottery = 0; address masternode_referrer; uint256 public MAX_TOKEN_BUYIN = 25; function PoWMLottery() public { current_round = 1; owner = msg.sender; masternode_referrer = msg.sender; },1,"subgraph cluster_349_PoWMLottery {
label=""PoWMLottery"";
""349_PoWMLottery"" [label=""PoWMLottery""];
""349_fallback"" [label=""fallback""];
""349_openLottery"" [label=""openLottery""];
""349_buyTickets"" [label=""buyTickets""];
""349_setMaxTokenBuyin"" [label=""setMaxTokenBuyin""];
""349_donateToLottery"" [label=""donateToLottery""];
""349_closeLotteryAndPickWinner"" [label=""closeLotteryAndPickWinner""];
""349_closeLotteryAndPickWinner"" -> ""349_onlyOwner"";
""349_setMaxTokenBuyin"" -> ""349_onlyOwner"";
""349_fallback"" -> ""349_buyTickets"";
""349_openLottery"" -> ""349_onlyOwner"";
}
"
0x18da8521c333aed9de8f512e847734cb7be42e38.sol,Crowdsale,"contract Crowdsale is Pausable, PullPayment { using SafeMath for uint; struct Backer { uint weiReceived; uint coinSent; }",1,"subgraph cluster_1189_Crowdsale {
label=""Crowdsale"";
""1189_setMultisig"" [label=""setMultisig""];
""1189_drain"" [label=""drain""];
""1189_receiveETH"" [label=""receiveETH""];
""1189_finalize"" [label=""finalize""];
""1189_getRemainCoins"" [label=""getRemainCoins""];
""1189_backProjectXOwner"" [label=""backProjectXOwner""];
""1189_refund"" [label=""refund""];
""1189_Crowdsale"" [label=""Crowdsale""];
""1189_bonus"" [label=""bonus""];
""1189_start"" [label=""start""];
""1189_fallback"" [label=""fallback""];
""1189_finalize"" -> ""1189_onlyOwner"";
""1189_drain"" -> ""1189_onlyOwner"";
""1189_receiveETH"" -> ""1189_bonus"";
""1189_getRemainCoins"" -> ""1189_bonus"";
""1189_backProjectXOwner"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_stopInEmergency"";
""1189_setMultisig"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_receiveETH"";
""1189_start"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_respectTimeFrame"";
""1189_getRemainCoins"" -> ""1189_onlyOwner"";
""1189_refund"" -> ""1189_asyncSend"";
""1189_refund"" -> ""1189_minCapNotReached"";
}
"
0x0e752b742f744fdc2d93774da44c37b72c3e6952.sol,CraftyCrowdsale,"contract CraftyCrowdsale is Pausable { using SafeMath for uint256; mapping(address => uint256) received; MintableToken public token; uint256 public preSaleStart; uint256 public preSaleEnd; uint256 public saleStart; uint256 public saleEnd; uint256 public issuedTokens = 0; uint256 public constant hardCap = 5000000000 * 10**8; uint256 constant teamCap = 1450000000 * 10**8; uint256 constant advisorCap = 450000000 * 10**8; uint256 constant bountyCap = 100000000 * 10**8; uint256 constant fundCap = 3000000000 * 10**8; uint256 constant lockTime = 180 days; address public etherWallet; address public teamWallet; address public advisorWallet; address public fundWallet; address public bountyWallet; TokenTimelock teamTokens; uint256 public rate; enum State { BEFORE_START, SALE, REFUND, CLOSED }",1,"subgraph cluster_1475_CraftyCrowdsale {
label=""CraftyCrowdsale"";
""1475_releaseTeamTokens"" [label=""releaseTeamTokens""];
""1475_setWallets"" [label=""setWallets""];
""1475_setRate"" [label=""setRate""];
""1475_enableRefund"" [label=""enableRefund""];
""1475_receivedFrom"" [label=""receivedFrom""];
""1475_getRate"" [label=""getRate""];
""1475_generateTokens"" [label=""generateTokens""];
""1475_claimRefund"" [label=""claimRefund""];
""1475_reclaimEther"" [label=""reclaimEther""];
""1475_buyTokens"" [label=""buyTokens""];
""1475_CraftyCrowdsale"" [label=""CraftyCrowdsale""];
""1475_fallback"" [label=""fallback""];
""1475_finishCrowdsale"" [label=""finishCrowdsale""];
""1475_finishCrowdsale"" -> ""1475_inState"";
""1475_setWallets"" -> ""1475_inState"";
""1475_buyTokens"" -> ""1475_whenNotPaused"";
""1475_setRate"" -> ""1475_onlyOwner"";
""1475_claimRefund"" -> ""1475_whenNotPaused"";
""1475_buyTokens"" -> ""1475_saleIsOn"";
""1475_buyTokens"" -> ""1475_getRate"";
""1475_enableRefund"" -> ""1475_inState"";
""1475_enableRefund"" -> ""1475_onlyOwner"";
""1475_setRate"" -> ""1475_beforeSale"";
""1475_claimRefund"" -> ""1475_inState"";
""1475_reclaimEther"" -> ""1475_onlyOwner"";
""1475_finishCrowdsale"" -> ""1475_onlyOwner"";
""1475_generateTokens"" -> ""1475_onlyOwner"";
""1475_setWallets"" -> ""1475_onlyOwner"";
""1475_fallback"" -> ""1475_buyTokens"";
}
"
0x020ddc98365d0199b4c7a2d769d685480789f67e.sol,EOSclassic,"contract EOSclassic is StandardToken, HasNoEther { string public constant NAME = ; string public constant SYMBOL = ; uint8 public constant DECIMALS = 18; uint public constant TOTAL_SUPPLY = 1000000000 * (10 ** uint(DECIMALS)); uint public constant foundersAllocation = 100000000 * (10 ** uint(DECIMALS)); address public constant eosTokenAddress = 0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0; address public constant eosCrowdsaleAddress = 0xd0a6E6C54DbC68Db5db3A091B171A77407Ff7ccf; mapping (address => string) public keys; mapping (address => bool) public eosClassicClaimed; event LogClaim (address user, uint amount); event LogRegister (address user, string key); constructor() public { totalSupply_ = TOTAL_SUPPLY; balances[address(this)] = TOTAL_SUPPLY; emit Transfer(0x0, address(this), TOTAL_SUPPLY); balances[address(this)] = balances[address(this)].sub(foundersAllocation); balances[msg.sender] = balances[msg.sender].add(foundersAllocation); emit Transfer(address(this), msg.sender, foundersAllocation); }",1,"subgraph cluster_947_EOSclassic {
label=""EOSclassic"";
""947_queryEOSTokenBalance"" [label=""queryEOSTokenBalance""];
""947_constructor"" [label=""constructor""];
""947_register"" [label=""register""];
""947_getEOSKeyFor"" [label=""getEOSKeyFor""];
""947_isClaimed"" [label=""isClaimed""];
""947_getMyEOSKey"" [label=""getMyEOSKey""];
""947_queryEOSCrowdsaleKey"" [label=""queryEOSCrowdsaleKey""];
""947_claimEOSclassicFor"" [label=""claimEOSclassicFor""];
""947_claimEOSclassic"" [label=""claimEOSclassic""];
""947_claimEOSclassic"" -> ""947_claimEOSclassicFor"";
""947_claimEOSclassicFor"" -> ""947_queryEOSTokenBalance"";
""947_getEOSKeyFor"" -> ""947_queryEOSCrowdsaleKey"";
""947_claimEOSclassicFor"" -> ""947_isClaimed"";
""947_getMyEOSKey"" -> ""947_getEOSKeyFor"";
}
"
0x51c22c78d753939c8aebae437c2f18eee43ca296.sol,PrivateSale,"contract PrivateSale is Ownable { LamdenTau public lamdenTau; address public buyer; uint256 public priceInWei; function PrivateSale(address _tokenContractAddress, address _buyer, uint256 _priceInWei) public { require(_buyer != address(0)); require(_tokenContractAddress != address(0)); require(_priceInWei > 0); buyer = _buyer; priceInWei = _priceInWei; lamdenTau = LamdenTau(_tokenContractAddress); }",1,"subgraph cluster_806_PrivateSale {
label=""PrivateSale"";
""806_endTokenSale"" [label=""endTokenSale""];
""806_buyTokens"" [label=""buyTokens""];
""806_fallback"" [label=""fallback""];
""806_issueTokensToBuyer"" [label=""issueTokensToBuyer""];
""806_transferWeiToWallet"" [label=""transferWeiToWallet""];
""806_PrivateSale"" [label=""PrivateSale""];
""806_buyTokens"" -> ""806_transferWeiToWallet"";
""806_endTokenSale"" -> ""806_onlyOwner"";
""806_fallback"" -> ""806_buyTokens"";
""806_buyTokens"" -> ""806_issueTokensToBuyer"";
}
"
0x750c1d91864171d7e1715a6b53ee28c72b8faa09.sol,EthicHubUser,"contract EthicHubUser is Ownable, EthicHubBase { event UserStatusChanged(address target, string profile, bool isRegistered); constructor(address _storageAddress) EthicHubBase(_storageAddress) public { version = 3; }",1,"subgraph cluster_660_EthicHubUser {
label=""EthicHubUser"";
""660_deleteUserStatus"" [label=""deleteUserStatus""];
""660_registerPaymentGateway"" [label=""registerPaymentGateway""];
""660_registerLocalNode"" [label=""registerLocalNode""];
""660_unregisterLocalNode"" [label=""unregisterLocalNode""];
""660_registerRepresentative"" [label=""registerRepresentative""];
""660_constructor"" [label=""constructor""];
""660_unregisterPaymentGateway"" [label=""unregisterPaymentGateway""];
""660_changeUserStatus"" [label=""changeUserStatus""];
""660_unregisterCommunity"" [label=""unregisterCommunity""];
""660_unregisterRepresentative"" [label=""unregisterRepresentative""];
""660_unregisterInvestor"" [label=""unregisterInvestor""];
""660_registerInvestor"" [label=""registerInvestor""];
""660_viewRegistrationStatus"" [label=""viewRegistrationStatus""];
""660_registerCommunity"" [label=""registerCommunity""];
""660_unregisterCommunity"" -> ""660_onlyOwner"";
""660_registerLocalNode"" -> ""660_changeUserStatus"";
""660_constructor"" -> ""660_constructor"";
""660_registerInvestor"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_deleteUserStatus"";
""660_unregisterLocalNode"" -> ""660_onlyOwner"";
""660_unregisterInvestor"" -> ""660_onlyOwner"";
""660_unregisterRepresentative"" -> ""660_onlyOwner"";
""660_registerCommunity"" -> ""660_changeUserStatus"";
""660_registerLocalNode"" -> ""660_onlyOwner"";
""660_unregisterLocalNode"" -> ""660_deleteUserStatus"";
""660_registerCommunity"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_onlyOwner"";
""660_registerRepresentative"" -> ""660_onlyOwner"";
""660_unregisterPaymentGateway"" -> ""660_deleteUserStatus"";
""660_unregisterCommunity"" -> ""660_deleteUserStatus"";
""660_unregisterRepresentative"" -> ""660_deleteUserStatus"";
""660_deleteUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_changeUserStatus"";
""660_registerRepresentative"" -> ""660_changeUserStatus"";
""660_changeUserStatus"" -> ""660_onlyOwner"";
""660_registerPaymentGateway"" -> ""660_onlyOwner"";
""660_registerInvestor"" -> ""660_changeUserStatus"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0xebbdf302c940c6bfd49c6b165f457fdb324649bc.sol,HydroToken,contract HydroToken is Ownable { using SafeMath for uint256; string public name = ; uint8 public decimals = 18; string public symbol = ; uint public totalSupply; address public raindropAddress = 0x0; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; function HydroToken() public { totalSupply = 11111111111 * 10**18; balances[msg.sender] = totalSupply; },1,"subgraph cluster_616_HydroToken {
label=""HydroToken"";
""616_transfer"" [label=""transfer""];
""616_doTransfer"" [label=""doTransfer""];
""616_authenticate"" [label=""authenticate""];
""616_approve"" [label=""approve""];
""616_setBalances"" [label=""setBalances""];
""616_transferFrom"" [label=""transferFrom""];
""616_HydroToken"" [label=""HydroToken""];
""616_setRaindropAddress"" [label=""setRaindropAddress""];
""616_allowance"" [label=""allowance""];
""616_balanceOf"" [label=""balanceOf""];
""616_burn"" [label=""burn""];
""616_approveAndCall"" [label=""approveAndCall""];
""616_totalSupply"" [label=""totalSupply""];
""616_setRaindropAddress"" -> ""616_onlyOwner"";
""616_authenticate"" -> ""616_doTransfer"";
""616_setBalances"" -> ""616_transfer"";
""616_burn"" -> ""616_onlyOwner"";
""616_transferFrom"" -> ""616_doTransfer"";
""616_approveAndCall"" -> ""616_approve"";
""616_setBalances"" -> ""616_onlyOwner"";
""616_transfer"" -> ""616_doTransfer"";
}
"
0x01e0f57c42bf976676ea1daa1b04d69aba6bdaf3.sol,BatchTransferWallet,"contract BatchTransferWallet is Ownable { using SafeMath for uint256; event LogWithdrawal(address indexed receiver, uint amount); function batchTransfer(address _tokenAddress, address[] _investors, uint256[] _tokenAmounts) public { ERC20BasicInterface token = ERC20BasicInterface(_tokenAddress); require(_investors.length == _tokenAmounts.length && _investors.length != 0); uint decimalsForCalc = 10 ** uint256(token.decimals()); for (uint i = 0; i < _investors.length; i++) { require(_tokenAmounts[i] > 0 && _investors[i] != 0x0); _tokenAmounts[i] = _tokenAmounts[i].mul(decimalsForCalc); require(token.transfer(_investors[i], _tokenAmounts[i])); }",1,"subgraph cluster_381_BatchTransferWallet {
label=""BatchTransferWallet"";
""381_withdraw"" [label=""withdraw""];
""381_balanceOfContract"" [label=""balanceOfContract""];
""381_batchTransfer"" [label=""batchTransfer""];
""381_withdraw"" -> ""381_onlyOwner"";
}
"
0x0e752b742f744fdc2d93774da44c37b72c3e6952.sol,CraftyCrowdsale,"contract CraftyCrowdsale is Pausable { using SafeMath for uint256; mapping(address => uint256) received; MintableToken public token; uint256 public preSaleStart; uint256 public preSaleEnd; uint256 public saleStart; uint256 public saleEnd; uint256 public issuedTokens = 0; uint256 public constant hardCap = 5000000000 * 10**8; uint256 constant teamCap = 1450000000 * 10**8; uint256 constant advisorCap = 450000000 * 10**8; uint256 constant bountyCap = 100000000 * 10**8; uint256 constant fundCap = 3000000000 * 10**8; uint256 constant lockTime = 180 days; address public etherWallet; address public teamWallet; address public advisorWallet; address public fundWallet; address public bountyWallet; TokenTimelock teamTokens; uint256 public rate; enum State { BEFORE_START, SALE, REFUND, CLOSED }",1,"subgraph cluster_1475_CraftyCrowdsale {
label=""CraftyCrowdsale"";
""1475_releaseTeamTokens"" [label=""releaseTeamTokens""];
""1475_setWallets"" [label=""setWallets""];
""1475_setRate"" [label=""setRate""];
""1475_enableRefund"" [label=""enableRefund""];
""1475_receivedFrom"" [label=""receivedFrom""];
""1475_getRate"" [label=""getRate""];
""1475_generateTokens"" [label=""generateTokens""];
""1475_claimRefund"" [label=""claimRefund""];
""1475_reclaimEther"" [label=""reclaimEther""];
""1475_buyTokens"" [label=""buyTokens""];
""1475_CraftyCrowdsale"" [label=""CraftyCrowdsale""];
""1475_fallback"" [label=""fallback""];
""1475_finishCrowdsale"" [label=""finishCrowdsale""];
""1475_finishCrowdsale"" -> ""1475_inState"";
""1475_setWallets"" -> ""1475_inState"";
""1475_buyTokens"" -> ""1475_whenNotPaused"";
""1475_setRate"" -> ""1475_onlyOwner"";
""1475_claimRefund"" -> ""1475_whenNotPaused"";
""1475_buyTokens"" -> ""1475_saleIsOn"";
""1475_buyTokens"" -> ""1475_getRate"";
""1475_enableRefund"" -> ""1475_inState"";
""1475_enableRefund"" -> ""1475_onlyOwner"";
""1475_setRate"" -> ""1475_beforeSale"";
""1475_claimRefund"" -> ""1475_inState"";
""1475_reclaimEther"" -> ""1475_onlyOwner"";
""1475_finishCrowdsale"" -> ""1475_onlyOwner"";
""1475_generateTokens"" -> ""1475_onlyOwner"";
""1475_setWallets"" -> ""1475_onlyOwner"";
""1475_fallback"" -> ""1475_buyTokens"";
}
"
0x019e41a2acdffafc0303e840fbd7934234e68f45.sol,contractDeployer,"contract contractDeployer is Ownable { event ContractCreated(address newAddress); address public tokenAddr; uint public tokenFee; uint public crowdsaleFee; uint public multisendFee; ERC20 token; cDeployer cdep; tDeployer tdep; function setUp(address _token, address _cdep, address _tdep) public onlyOwner { tokenAddr = _token; token = ERC20(tokenAddr); cdep = cDeployer(_cdep); tdep = tDeployer(_tdep); }",1,"subgraph cluster_393_contractDeployer {
label=""contractDeployer"";
""393_setUp"" [label=""setUp""];
""393_changeTokenFee"" [label=""changeTokenFee""];
""393_multiSender"" [label=""multiSender""];
""393_changeMultisendFee"" [label=""changeMultisendFee""];
""393_deployToken"" [label=""deployToken""];
""393_deployCrowdsale"" [label=""deployCrowdsale""];
""393_changeCrowdsaleFee"" [label=""changeCrowdsaleFee""];
""393_setUp"" -> ""393_onlyOwner"";
""393_changeCrowdsaleFee"" -> ""393_onlyOwner"";
""393_changeMultisendFee"" -> ""393_onlyOwner"";
""393_changeTokenFee"" -> ""393_onlyOwner"";
}
"
0x0dae7caf45d9c473a8f6ae0d4934e5c3b2dbc371.sol,SafeGuardsToken,contract SafeGuardsToken is CappedToken { string constant public name = ; string constant public symbol = ; uint constant public decimals = 18; address public canBurnAddress; mapping (address => bool) public frozenList; uint256 public frozenPauseTime = now + 180 days; uint256 public burnPausedTime = now + 180 days; constructor(address _canBurnAddress) CappedToken(61 * 1e6 * 1e18) public { require(_canBurnAddress != 0x0); canBurnAddress = _canBurnAddress; },1,"subgraph cluster_1102_SafeGuardsToken {
label=""SafeGuardsToken"";
""1102_burn"" [label=""burn""];
""1102_changeFrozenTime"" [label=""changeFrozenTime""];
""1102_changeBurnPausedTime"" [label=""changeBurnPausedTime""];
""1102_constructor"" [label=""constructor""];
""1102_mintFrozen"" [label=""mintFrozen""];
""1102_transfer"" [label=""transfer""];
""1102_transferFrom"" [label=""transferFrom""];
""1102_isContract"" [label=""isContract""];
""1102_transfer"" -> ""1102_isContract"";
""1102_mintFrozen"" -> ""1102_mint"";
""1102_mintFrozen"" -> ""1102_canMint"";
""1102_changeBurnPausedTime"" -> ""1102_onlyOwner"";
""1102_changeFrozenTime"" -> ""1102_onlyOwner"";
""1102_constructor"" -> ""1102_constructor"";
""1102_transfer"" -> ""1102_transfer"";
""1102_transferFrom"" -> ""1102_isContract"";
""1102_transferFrom"" -> ""1102_transferFrom"";
""1102_mintFrozen"" -> ""1102_onlyOwner"";
}
"
0x56ffb3c578906ba9658fccb052fc1a5672275b6a.sol,OpiriaCrowdsale,"contract OpiriaCrowdsale is TimedPresaleCrowdsale, MintedCrowdsale, TokenCappedCrowdsale { using SafeMath for uint256; uint256 public presaleWeiLimit; address public tokensWallet; uint256 public totalBonus = 0; bool public hiddenCapTriggered; uint16 public additionalBonusPercent = 0; mapping(address => uint256) public bonusOf; constructor(ERC20 _token, uint16 _initialEtherUsdRate, address _wallet, address _tokensWallet, uint256 _presaleOpeningTime, uint256 _presaleClosingTime, uint256 _openingTime, uint256 _closingTime ) public TimedPresaleCrowdsale(_presaleOpeningTime, _presaleClosingTime, _openingTime, _closingTime) Crowdsale(_initialEtherUsdRate, _wallet, _token) { setEtherUsdRate(_initialEtherUsdRate); tokensWallet = _tokensWallet; require(PausableToken(token).paused()); }",1,"subgraph cluster_2370_OpiriaCrowdsale {
label=""OpiriaCrowdsale"";
""2370_claimReservedTokens"" [label=""claimReservedTokens""];
""2370_setEtherUsdRate"" [label=""setEtherUsdRate""];
""2370__getTokenAmount"" [label=""_getTokenAmount""];
""2370_constructor"" [label=""constructor""];
""2370_addBonusBatch"" [label=""addBonusBatch""];
""2370__preValidatePurchase"" [label=""_preValidatePurchase""];
""2370_triggerHiddenCap"" [label=""triggerHiddenCap""];
""2370_sendTokensTo"" [label=""sendTokensTo""];
""2370_increaseCap"" [label=""increaseCap""];
""2370_withdrawBonus"" [label=""withdrawBonus""];
""2370__getBonusAmount"" [label=""_getBonusAmount""];
""2370_unlockTokenTransfers"" [label=""unlockTokenTransfers""];
""2370_distributeBonus"" [label=""distributeBonus""];
""2370__processPurchase"" [label=""_processPurchase""];
""2370_sendTokensToBatch"" [label=""sendTokensToBatch""];
""2370__saveBonus"" [label=""_saveBonus""];
""2370__getBonusPercent"" [label=""_getBonusPercent""];
""2370_finalization"" [label=""finalization""];
""2370_setAdditionalBonusPercent"" [label=""setAdditionalBonusPercent""];
""2370__preValidatePurchase"" -> ""2370__getBonusAmount"";
""2370_claimReservedTokens"" -> ""2370_onlyOwner"";
""2370__preValidatePurchase"" -> ""2370__getTokenAmount"";
""2370_unlockTokenTransfers"" -> ""2370_onlyOwner"";
""2370_increaseCap"" -> ""2370_onlyOwner"";
""2370_triggerHiddenCap"" -> ""2370_onlyOwner"";
""2370_sendTokensToBatch"" -> ""2370_sendTokensTo"";
""2370_setEtherUsdRate"" -> ""2370_onlyOwner"";
""2370_addBonusBatch"" -> ""2370_notExceedingSaleCap"";
""2370_distributeBonus"" -> ""2370_onlyOwner"";
""2370_sendTokensTo"" -> ""2370_onlyOwner"";
""2370_finalization"" -> ""2370_finalization"";
""2370__preValidatePurchase"" -> ""2370_isPresale"";
""2370_setAdditionalBonusPercent"" -> ""2370_onlyOwner"";
""2370__saveBonus"" -> ""2370__getBonusAmount"";
""2370__preValidatePurchase"" -> ""2370_notExceedingSaleCap"";
""2370__getBonusAmount"" -> ""2370__getBonusPercent"";
""2370_addBonusBatch"" -> ""2370_onlyOwner"";
""2370_constructor"" -> ""2370_constructor"";
""2370__getBonusPercent"" -> ""2370_isPresale"";
""2370__processPurchase"" -> ""2370__deliverTokens"";
""2370__preValidatePurchase"" -> ""2370__preValidatePurchase"";
""2370_finalization"" -> ""2370__deliverTokens"";
""2370_constructor"" -> ""2370_setEtherUsdRate"";
""2370_withdrawBonus"" -> ""2370__deliverTokens"";
""2370_sendTokensTo"" -> ""2370_notExceedingSaleCap"";
""2370_sendTokensToBatch"" -> ""2370_onlyOwner"";
""2370__processPurchase"" -> ""2370__saveBonus"";
""2370_distributeBonus"" -> ""2370__deliverTokens"";
""2370_claimReservedTokens"" -> ""2370__deliverTokens"";
}
"
0x6c602f1798a453f90f249e208e2b64c7c09226f7.sol,Mentoring,"contract Mentoring is Ownable, ReentrancyGuard, CanReclaimToken { using SafeMath for uint256; event BecomeMentor(uint256 indexed mentorId); event BreakMentoring(uint256 indexed mentorId); event ChangeLevelPrice(uint256 indexed mentorId, uint256 newLevelPrice); event Income(address source, uint256 amount); event StartLecture(uint256 indexed lectureId, uint256 indexed mentorId, uint256 indexed studentId, uint256 mentorLevel, uint256 studentLevel, uint256 levelUp, uint256 levelPrice, uint256 startedAt, uint256 endsAt); struct Lecture { uint256 mentorId; uint256 studentId; uint256 mentorLevel; uint256 studentLevel; uint256 levelUp; uint256 levelPrice; uint256 startedAt; uint256 endsAt; }",1,"subgraph cluster_1365_Mentoring {
label=""Mentoring"";
""1365_changeLevelPrice"" [label=""changeLevelPrice""];
""1365_getLastLecture"" [label=""getLastLecture""];
""1365_getLastLectureIdAsStudent"" [label=""getLastLectureIdAsStudent""];
""1365_getLastLectureIdAsMentor"" [label=""getLastLectureIdAsMentor""];
""1365_startLecture"" [label=""startLecture""];
""1365_inLecture"" [label=""inLecture""];
""1365_setFee"" [label=""setFee""];
""1365_lectureExists"" [label=""lectureExists""];
""1365_getMentor"" [label=""getMentor""];
""1365_calcCost"" [label=""calcCost""];
""1365_isMentor"" [label=""isMentor""];
""1365_breakMentoring"" [label=""breakMentoring""];
""1365_inMentoring"" [label=""inMentoring""];
""1365_setLevelUpTime"" [label=""setLevelUpTime""];
""1365_becomeMentor"" [label=""becomeMentor""];
""1365__distributePayment"" [label=""_distributePayment""];
""1365_inStudying"" [label=""inStudying""];
""1365__calcLevelIncrease"" [label=""_calcLevelIncrease""];
""1365_isRaceSuitable"" [label=""isRaceSuitable""];
""1365__getPercent"" [label=""_getPercent""];
""1365_fallback"" [label=""fallback""];
""1365__flushBalance"" [label=""_flushBalance""];
""1365_getLecture"" [label=""getLecture""];
""1365_constructor"" [label=""constructor""];
""1365_startLecture"" -> ""1365_isMentor"";
""1365_setFee"" -> ""1365_onlyOwner"";
""1365_fallback"" -> ""1365__flushBalance"";
""1365_startLecture"" -> ""1365__calcLevelIncrease"";
""1365_changeLevelPrice"" -> ""1365_isMentor"";
""1365_calcCost"" -> ""1365__calcLevelIncrease"";
""1365_startLecture"" -> ""1365_onlyOwnerOf"";
""1365__distributePayment"" -> ""1365__getPercent"";
""1365_getMentor"" -> ""1365_isMentor"";
""1365_inLecture"" -> ""1365_inMentoring"";
""1365_setLevelUpTime"" -> ""1365_onlyOwner"";
""1365_startLecture"" -> ""1365__flushBalance"";
""1365_getLastLecture"" -> ""1365_lectureExists"";
""1365_breakMentoring"" -> ""1365_onlyOwnerOf"";
""1365_getLastLecture"" -> ""1365_getLastLectureIdAsStudent"";
""1365_getLecture"" -> ""1365_lectureExists"";
""1365_inMentoring"" -> ""1365_getLastLectureIdAsMentor"";
""1365_inStudying"" -> ""1365_getLastLectureIdAsStudent"";
""1365_startLecture"" -> ""1365_isRaceSuitable"";
""1365_changeLevelPrice"" -> ""1365_onlyOwnerOf"";
""1365_getLastLecture"" -> ""1365_getLastLectureIdAsMentor"";
""1365_inLecture"" -> ""1365_inStudying"";
""1365_becomeMentor"" -> ""1365_onlyOwnerOf"";
""1365_startLecture"" -> ""1365__distributePayment"";
}
"
0x031e8de47dee0fdde1969a93b64bb8f8fbcba65d.sol,lockEtherPay,"contract lockEtherPay is Ownable { using SafeMath for uint256; token token_reward; address public beneficiary; bool public isLocked = false; bool public isReleased = false; uint256 public start_time; uint256 public end_time; uint256 public fifty_two_weeks = 30412800; event TokenReleased(address beneficiary, uint256 token_amount); constructor() public{ token_reward = token(0xAa1ae5e57dc05981D83eC7FcA0b3c7ee2565B7D6); beneficiary = 0xae09643734a0A0054fB4C1B376Ea95cd2d552dee; }",1,"subgraph cluster_309_lockEtherPay {
label=""lockEtherPay"";
""309_lockOver"" [label=""lockOver""];
""309_tokenBalance"" [label=""tokenBalance""];
""309_constructor"" [label=""constructor""];
""309_lock"" [label=""lock""];
""309_release"" [label=""release""];
""309_release"" -> ""309_lockOver"";
""309_release"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_tokenBalance"";
""309_release"" -> ""309_tokenBalance"";
}
"
0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol,SharkPool,"contract SharkPool is Ownable, ReentrancyGuard { string constant public pool_name = ; uint256 public pool_percentage = 5; uint256 constant public max_users = 100; uint256 public total_users = 0; uint256 public constant divisible_units = 10000000; uint256 public contract_period = 100; uint256 public mined_blocks = 1; uint256 public claimed_blocks = 1; uint256 public blockCreationRate = 0; BitcoineumInterface base_contract; struct user { uint256 start_block; uint256 end_block; uint256 proportional_contribution; }",1,"subgraph cluster_893_SharkPool {
label=""SharkPool"";
""893_current_external_block"" [label=""current_external_block""];
""893_SharkPool"" [label=""SharkPool""];
""893_find_contribution"" [label=""find_contribution""];
""893_mine"" [label=""mine""];
""893_checkMiningAttempt"" [label=""checkMiningAttempt""];
""893_checkWinning"" [label=""checkWinning""];
""893_allocate_slot"" [label=""allocate_slot""];
""893_fallback"" [label=""fallback""];
""893_available_slots"" [label=""available_slots""];
""893_get_bitcoineum_contract_address"" [label=""get_bitcoineum_contract_address""];
""893_external_to_internal_block_number"" [label=""external_to_internal_block_number""];
""893_do_redemption"" [label=""do_redemption""];
""893_redeem"" [label=""redeem""];
""893_set_pool_percentage"" [label=""set_pool_percentage""];
""893_balanceOf"" [label=""balanceOf""];
""893_distribute_reward"" [label=""distribute_reward""];
""893_calculate_minimum_contribution"" [label=""calculate_minimum_contribution""];
""893_claim"" [label=""claim""];
""893_SharkPool"" -> ""893_get_bitcoineum_contract_address"";
""893_redeem"" -> ""893_do_redemption"";
""893_set_pool_percentage"" -> ""893_nonReentrant"";
""893_redeem"" -> ""893_nonReentrant"";
""893_set_pool_percentage"" -> ""893_onlyOwner"";
""893_mine"" -> ""893_external_to_internal_block_number"";
""893_fallback"" -> ""893_do_redemption"";
""893_claim"" -> ""893_distribute_reward"";
""893_mine"" -> ""893_current_external_block"";
""893_fallback"" -> ""893_allocate_slot"";
""893_fallback"" -> ""893_calculate_minimum_contribution"";
""893_claim"" -> ""893_nonReentrant"";
""893_mine"" -> ""893_nonReentrant"";
}
"
0xebcf88fb2783bbb75b12df3f33627efa894afea4.sol,SPACEDICE,"contract SPACEDICE is Mortal, usingNRE{ uint minBet = 1000000000000000; event Roll(bool _won, uint256 _dice1, uint256 _dice2, uint256 _roll1, uint256 _roll2, uint _amount); constructor() payable public {}",1,"subgraph cluster_372_SPACEDICE {
label=""SPACEDICE"";
""372_checkContractBalance"" [label=""checkContractBalance""];
""372_collect"" [label=""collect""];
""372_constructor"" [label=""constructor""];
""372_fallback"" [label=""fallback""];
""372_bet"" [label=""bet""];
""372_collect"" -> ""372_onlyOwner"";
""372_bet"" -> ""372_ra"";
""372_bet"" -> ""372_rx"";
}
"
0x2791528f5617e187a6d73c30034ac211b2f47042.sol,CardsRaffle,"contract CardsRaffle is AccessAdmin { using SafeMath for SafeMath; function CardsRaffle() public { setAdminContract(msg.sender,true); setActionContract(msg.sender,true); }",1,"subgraph cluster_957_CardsRaffle {
label=""CardsRaffle"";
""957_setCardsAddress"" [label=""setCardsAddress""];
""957_buyRaffleTicket"" [label=""buyRaffleTicket""];
""957_getLatestRaffleInfo"" [label=""getLatestRaffleInfo""];
""957_getRafflePlayers"" [label=""getRafflePlayers""];
""957_setRareAddress"" [label=""setRareAddress""];
""957_getRareAddress"" [label=""getRareAddress""];
""957_startRareRaffle"" [label=""startRareRaffle""];
""957_assignRafflePrize"" [label=""assignRafflePrize""];
""957_drawRandomWinner"" [label=""drawRandomWinner""];
""957_awardRafflePrize"" [label=""awardRafflePrize""];
""957_getPlayersTickets"" [label=""getPlayersTickets""];
""957_CardsRaffle"" [label=""CardsRaffle""];
""957_awardRafflePrize"" -> ""957_drawRandomWinner"";
""957_CardsRaffle"" -> ""957_setAdminContract"";
""957_setRareAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_assignRafflePrize"";
""957_startRareRaffle"" -> ""957_onlyAdmin"";
""957_startRareRaffle"" -> ""957_getRareAddress"";
""957_drawRandomWinner"" -> ""957_onlyAdmin"";
""957_CardsRaffle"" -> ""957_setActionContract"";
""957_setCardsAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_getRareAddress"";
}
"
0x9271a6512b8f27a5f8daa01a62bdc533709e859a.sol,LockToken,"contract LockToken is Ownable { using SafeMath for uint256; token token_reward; address public beneficiary; bool public isLocked = false; bool public isReleased = false; uint256 public start_time; uint256 public end_time; event TokenReleased(address beneficiary, uint256 token_amount); constructor(address tokenContractAddress, address _beneficiary) public{ token_reward = token(tokenContractAddress); beneficiary = _beneficiary; }",1,"subgraph cluster_309_LockToken {
label=""LockToken"";
""309_release"" [label=""release""];
""309_lock"" [label=""lock""];
""309_constructor"" [label=""constructor""];
""309_tokenBalance"" [label=""tokenBalance""];
""309_lockOver"" [label=""lockOver""];
""309_release"" -> ""309_lockOver"";
""309_lock"" -> ""309_onlyOwner"";
""309_lock"" -> ""309_tokenBalance"";
""309_release"" -> ""309_onlyOwner"";
""309_release"" -> ""309_tokenBalance"";
}
"
0xf244176246168f24e3187f7288edbca29267739b.sol,ExternStateProxyToken,"contract ExternStateProxyToken is SafeDecimalMath, Proxyable { TokenState public state; string public name; string public symbol; uint public totalSupply; function ExternStateProxyToken(string _name, string _symbol, uint initialSupply, address initialBeneficiary, TokenState _state, address _owner) Proxyable(_owner) public { name = _name; symbol = _symbol; totalSupply = initialSupply; if (_state == TokenState(0)) { state = new TokenState(_owner, address(this)); state.setBalanceOf(initialBeneficiary, totalSupply); emit Transfer(address(0), initialBeneficiary, initialSupply); }",1,"subgraph cluster_3485_ExternStateProxyToken {
label=""ExternStateProxyToken"";
""3485_ExternStateProxyToken"" [label=""ExternStateProxyToken""];
""3485__transfer_byProxy"" [label=""_transfer_byProxy""];
""3485_balanceOf"" [label=""balanceOf""];
""3485_approve"" [label=""approve""];
""3485_setState"" [label=""setState""];
""3485__transferFrom_byProxy"" [label=""_transferFrom_byProxy""];
""3485_allowance"" [label=""allowance""];
""3485_ExternStateProxyToken"" -> ""3485_Proxyable"";
""3485__transferFrom_byProxy"" -> ""3485_safeSub"";
""3485_setState"" -> ""3485_optionalProxy_onlyOwner"";
""3485__transfer_byProxy"" -> ""3485_safeAdd"";
""3485__transfer_byProxy"" -> ""3485_safeSub"";
""3485_approve"" -> ""3485_optionalProxy"";
""3485__transferFrom_byProxy"" -> ""3485_safeAdd"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0x0e69d0a2bbb30abcb7e5cfea0e4fde19c00a8d47.sol,ContractLock,"contract ContractLock is DSStop { uint public unlockTime; mapping (address => bool) public isAdmin; event LogAddAdmin(address whoAdded, address newAdmin); event LogRemoveAdmin(address whoRemoved, address admin); constructor(uint _unlockTime) public { unlockTime = _unlockTime; isAdmin[msg.sender] = true; emit LogAddAdmin(msg.sender, msg.sender); }",1,"subgraph cluster_1015_ContractLock {
label=""ContractLock"";
""1015_constructor"" [label=""constructor""];
""1015_addAdmin"" [label=""addAdmin""];
""1015_removeAdmin"" [label=""removeAdmin""];
""1015_setOwner"" [label=""setOwner""];
""1015_setUnlockTime"" [label=""setUnlockTime""];
""1015_setOwner"" -> ""1015_auth"";
""1015_setUnlockTime"" -> ""1015_auth"";
""1015_setOwner"" -> ""1015_addAdmin"";
""1015_addAdmin"" -> ""1015_auth"";
""1015_setOwner"" -> ""1015_removeAdmin"";
""1015_removeAdmin"" -> ""1015_auth"";
}
"
0xeb86a173e0311a28cadc24f85dbad867bbf34f73.sol,Bussiness,contract Bussiness is Ownable { address public ceoAddress = address(0x6c3e879bdd20e9686cfd9bbd1bfd4b2dd6d47079); IERC721 public erc721Address = IERC721(0xdceaf1652a131f32a821468dc03a92df0edd86ea); ERC20BasicInterface public usdtToken = ERC20BasicInterface(0xdac17f958d2ee523a2206206994597c13d831ec7); uint256 public ETHFee = 2; uint256 public HBWALLETFee = 1; constructor() public {},1,"subgraph cluster_768_Bussiness {
label=""Bussiness"";
""768_getApproved"" [label=""getApproved""];
""768_resetPrice"" [label=""resetPrice""];
""768_setFee"" [label=""setFee""];
""768_setPriceFeeEth"" [label=""setPriceFeeEth""];
""768_ownerOf"" [label=""ownerOf""];
""768_constructor"" [label=""constructor""];
""768_buyWithoutCheckApproved"" [label=""buyWithoutCheckApproved""];
""768_balanceOf"" [label=""balanceOf""];
""768_buy"" [label=""buy""];
""768_buyByUsdt"" [label=""buyByUsdt""];
""768_removePrice"" [label=""removePrice""];
""768_setPrice"" [label=""setPrice""];
""768_getPrice"" [label=""getPrice""];
""768_withdraw"" [label=""withdraw""];
""768_setFee"" -> ""768_onlyOwner"";
""768_getPrice"" -> ""768_resetPrice"";
""768_buyByUsdt"" -> ""768_resetPrice"";
""768_buy"" -> ""768_getApproved"";
""768_withdraw"" -> ""768_onlyCeoAddress"";
""768_removePrice"" -> ""768_resetPrice"";
""768_buyWithoutCheckApproved"" -> ""768_resetPrice"";
""768_buy"" -> ""768_resetPrice"";
}
"
0x02f61fd266da6e8b102d4121f5ce7b992640cf98.sol,LikeCoin,"contract LikeCoin is ERC20, HasOperator { using SafeMath for uint256; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public supply = 0; mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; address public crowdsaleAddr = 0x0; address public contributorPoolAddr = 0x0; uint256 public contributorPoolMintQuota = 0; address[] public creatorsPoolAddrs; mapping(address => bool) isCreatorsPool; uint256 public creatorsPoolMintQuota = 0; mapping(address => uint256) public lockedBalances; uint public unlockTime = 0; SignatureChecker public signatureChecker = SignatureChecker(0x0); bool public signatureCheckerFreezed = false; address public signatureOwner = 0x0; bool public allowDelegate = true; mapping (address => mapping (uint256 => bool)) public usedNonce; mapping (address => bool) public transferAndCallWhitelist; event Lock(address indexed _addr, uint256 _value); event SignatureCheckerChanged(address _newSignatureChecker); function LikeCoin(uint256 _initialSupply, address _signatureOwner, address _sigCheckerAddr) public { supply = _initialSupply; balances[owner] = _initialSupply; signatureOwner = _signatureOwner; signatureChecker = SignatureChecker(_sigCheckerAddr); Transfer(0x0, owner, _initialSupply); }",1,"subgraph cluster_1596_LikeCoin {
label=""LikeCoin"";
""1596_transferAndCall"" [label=""transferAndCall""];
""1596__tryUnlockBalance"" [label=""_tryUnlockBalance""];
""1596_registerContributorPool"" [label=""registerContributorPool""];
""1596_switchDelegate"" [label=""switchDelegate""];
""1596_allowance"" [label=""allowance""];
""1596_LikeCoin"" [label=""LikeCoin""];
""1596_balanceOf"" [label=""balanceOf""];
""1596_transferMultiple"" [label=""transferMultiple""];
""1596_transferAndLock"" [label=""transferAndLock""];
""1596_totalSupply"" [label=""totalSupply""];
""1596_registerCrowdsales"" [label=""registerCrowdsales""];
""1596_transferFrom"" [label=""transferFrom""];
""1596__isContract"" [label=""_isContract""];
""1596__transferMultiple"" [label=""_transferMultiple""];
""1596_transfer"" [label=""transfer""];
""1596_setSignatureChecker"" [label=""setSignatureChecker""];
""1596_transferMultipleDelegated"" [label=""transferMultipleDelegated""];
""1596_approve"" [label=""approve""];
""1596__transferAndCall"" [label=""_transferAndCall""];
""1596_mintForCreatorsPool"" [label=""mintForCreatorsPool""];
""1596_transferAndCallDelegated"" [label=""transferAndCallDelegated""];
""1596_freezeSignatureChecker"" [label=""freezeSignatureChecker""];
""1596_removeTransferAndCallWhitelist"" [label=""removeTransferAndCallWhitelist""];
""1596_registerCreatorsPools"" [label=""registerCreatorsPools""];
""1596__transfer"" [label=""_transfer""];
""1596_transferDelegated"" [label=""transferDelegated""];
""1596_burn"" [label=""burn""];
""1596_addTransferAndCallWhitelist"" [label=""addTransferAndCallWhitelist""];
""1596_mintForContributorPool"" [label=""mintForContributorPool""];
""1596_transferMultiple"" -> ""1596__transferMultiple"";
""1596_registerCrowdsales"" -> ""1596__isContract"";
""1596_switchDelegate"" -> ""1596_ownerOrOperator"";
""1596_transferMultipleDelegated"" -> ""1596__transferMultiple"";
""1596_registerCreatorsPools"" -> ""1596_onlyOwner"";
""1596_addTransferAndCallWhitelist"" -> ""1596__isContract"";
""1596_registerContributorPool"" -> ""1596_onlyOwner"";
""1596_registerContributorPool"" -> ""1596__isContract"";
""1596_addTransferAndCallWhitelist"" -> ""1596_ownerOrOperator"";
""1596_transferDelegated"" -> ""1596__transfer"";
""1596_transferAndCallDelegated"" -> ""1596__transferAndCall"";
""1596_transferAndCallDelegated"" -> ""1596_isDelegated"";
""1596_registerCrowdsales"" -> ""1596_onlyOwner"";
""1596_transfer"" -> ""1596__transfer"";
""1596__transfer"" -> ""1596__tryUnlockBalance"";
""1596__transferAndCall"" -> ""1596__transfer"";
""1596_transferAndCall"" -> ""1596__transferAndCall"";
""1596_transferDelegated"" -> ""1596_isDelegated"";
""1596_transferMultipleDelegated"" -> ""1596_isDelegated"";
""1596_removeTransferAndCallWhitelist"" -> ""1596_ownerOrOperator"";
""1596_transferFrom"" -> ""1596__transfer"";
""1596__transferMultiple"" -> ""1596__tryUnlockBalance"";
""1596_registerCreatorsPools"" -> ""1596__isContract"";
""1596__transferAndCall"" -> ""1596__isContract"";
}
"
0x39f996a2cafca0e593d0c46b8365d3936b6cc1cf.sol,Etherauction,contract Etherauction is ContractOwner { using SafeMath for uint256; constructor() public payable { owner = msg.sender; gameId = 1; gameStartTime = block.timestamp; gameLastAuctionMoney = 10**15; gameLastAuctionTime = block.timestamp; gameSecondLeft = _getInitAuctionSeconds(); },1,"subgraph cluster_2251_Etherauction {
label=""Etherauction"";
""2251_getGameDataByIndex"" [label=""getGameDataByIndex""];
""2251_gameRoundEnd"" [label=""gameRoundEnd""];
""2251__getGameAuctionGap"" [label=""_getGameAuctionGap""];
""2251_auction"" [label=""auction""];
""2251_getCurrGameInfo"" [label=""getCurrGameInfo""];
""2251__claimReward"" [label=""_claimReward""];
""2251__getGameInfoPart2"" [label=""_getGameInfoPart2""];
""2251__getGameInfoPart1"" [label=""_getGameInfoPart1""];
""2251__getMinAuctionSeconds"" [label=""_getMinAuctionSeconds""];
""2251_adminPayout"" [label=""adminPayout""];
""2251_claimReward"" [label=""claimReward""];
""2251_getRandom"" [label=""getRandom""];
""2251__getInitAuctionSeconds"" [label=""_getInitAuctionSeconds""];
""2251__getGameStartAuctionMoney"" [label=""_getGameStartAuctionMoney""];
""2251__inMoney"" [label=""_inMoney""];
""2251__getMinAuctionStartPrice"" [label=""_getMinAuctionStartPrice""];
""2251_refund"" [label=""refund""];
""2251_addAuctionReward"" [label=""addAuctionReward""];
""2251__getMaxAuctionSeconds"" [label=""_getMaxAuctionSeconds""];
""2251_constructor"" [label=""constructor""];
""2251_getMinAuctionValue"" [label=""getMinAuctionValue""];
""2251_adminAddMoney"" [label=""adminAddMoney""];
""2251__startNewRound"" [label=""_startNewRound""];
""2251_setOracleAPIAddress"" [label=""setOracleAPIAddress""];
""2251_getCurrCanRefund"" [label=""getCurrCanRefund""];
""2251_getGameInfo"" [label=""getGameInfo""];
""2251_constructor"" -> ""2251__getInitAuctionSeconds"";
""2251_adminPayout"" -> ""2251_onlyOwner"";
""2251__claimReward"" -> ""2251__getGameInfoPart2"";
""2251_getGameInfo"" -> ""2251__getGameInfoPart1"";
""2251_claimReward"" -> ""2251__claimReward"";
""2251_auction"" -> ""2251_getRandom"";
""2251__claimReward"" -> ""2251__getGameInfoPart1"";
""2251_auction"" -> ""2251__getMaxAuctionSeconds"";
""2251_getGameInfo"" -> ""2251__getGameInfoPart2"";
""2251_gameRoundEnd"" -> ""2251__startNewRound"";
""2251__startNewRound"" -> ""2251__getMinAuctionStartPrice"";
""2251_auction"" -> ""2251__inMoney"";
""2251_getMinAuctionValue"" -> ""2251__getGameAuctionGap"";
""2251_gameRoundEnd"" -> ""2251__claimReward"";
""2251_getCurrGameInfo"" -> ""2251__getGameAuctionGap"";
""2251_setOracleAPIAddress"" -> ""2251_onlyOwner"";
""2251_auction"" -> ""2251__getGameAuctionGap"";
""2251_auction"" -> ""2251__getMinAuctionSeconds"";
""2251__startNewRound"" -> ""2251__getInitAuctionSeconds"";
}
"
0x0e54b1b8ff833b5f2b0d17453d97d340cb7576e4.sol,ERC223Token,"contract ERC223Token is IERC223, SafeMath { mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 35000000 * 10**8; function ERC223Token() { balances[msg.sender] = totalSupply; }",1,"subgraph cluster_534_ERC223Token {
label=""ERC223Token"";
""534_ERC223Token"" [label=""ERC223Token""];
""534_symbol"" [label=""symbol""];
""534_totalSupply"" [label=""totalSupply""];
""534_transferToAddress"" [label=""transferToAddress""];
""534_balanceOf"" [label=""balanceOf""];
""534_transferToContract"" [label=""transferToContract""];
""534_transfer"" [label=""transfer""];
""534_name"" [label=""name""];
""534_isContract"" [label=""isContract""];
""534_decimals"" [label=""decimals""];
""534_transfer"" -> ""534_safeAdd"";
""534_transferToContract"" -> ""534_safeAdd"";
""534_transferToAddress"" -> ""534_balanceOf"";
""534_transferToContract"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_safeSub"";
""534_transferToAddress"" -> ""534_safeSub"";
""534_transferToContract"" -> ""534_safeSub"";
""534_transfer"" -> ""534_transferToAddress"";
""534_transfer"" -> ""534_balanceOf"";
""534_transfer"" -> ""534_transferToContract"";
""534_transfer"" -> ""534_isContract"";
""534_transferToAddress"" -> ""534_safeAdd"";
}
"
0xb4a448387403554616eb5b50aa4c48f75243a015.sol,Mobius2Dv2,"contract Mobius2Dv2 is UsingOraclizeRandom, DSMath { string public ipfsHash; string public ipfsHashType = ; MobiusToken public constant token = MobiusToken(0x54cdC9D889c28f55F59f6b136822868c7d4726fC); bool public upgraded; bool public initialized; address public nextVersion; LastVersion public constant lastVersion = LastVersion(0xA74642Aeae3e2Fd79150c910eB5368B64f864B1e); uint public previousRounds; uint public totalRevenue; uint public totalSharesSold; uint public totalEarningsGenerated; uint public totalDividendsPaid; uint public totalJackpotsWon; uint public constant DEV_DIVISOR = 20; uint public constant RETURNS_FRACTION = 60 * 10**16; uint public constant REFERRAL_FRACTION = 3 * 10**16; uint public constant JACKPOT_SEED_FRACTION = WAD / 20; uint public constant JACKPOT_FRACTION = 15 * 10**16; uint public constant DAILY_JACKPOT_FRACTION = 6 * 10**16; uint public constant DIVIDENDS_FRACTION = 9 * 10**16; uint public startingSharePrice = 1 finney; uint public _priceIncreasePeriod = 1 hours; uint public _priceMultiplier = 101 * 10**16; uint public _secondaryPrice = 100 finney; uint public maxDailyJackpot = 5 ether; uint public constant SOFT_DEADLINE_DURATION = 1 days; uint public constant DAILY_JACKPOT_PERIOD = 1 days; uint public constant TIME_PER_SHARE = 5 minutes; uint public nextRoundTime; uint public jackpotSeed; uint public devBalance; uint public unclaimedReturns; uint public constant MULTIPLIER = RAY; mapping (address => uint) public lastDailyEntry; struct Investor { uint lastCumulativeReturnsPoints; uint shares; }",1,"subgraph cluster_5179_Mobius2Dv2 {
label=""Mobius2Dv2"";
""5179_startNewRound"" [label=""startNewRound""];
""5179_roundInfo"" [label=""roundInfo""];
""5179_getSeed"" [label=""getSeed""];
""5179_finalizeAndRestart"" [label=""finalizeAndRestart""];
""5179__drawDailyJackpot"" [label=""_drawDailyJackpot""];
""5179__disburseReturns"" [label=""_disburseReturns""];
""5179_setNextRoundTimestamp"" [label=""setNextRoundTimestamp""];
""5179__outstandingReturns"" [label=""_outstandingReturns""];
""5179_reinvestReturns"" [label=""reinvestReturns""];
""5179_init"" [label=""init""];
""5179__finalizeRound"" [label=""_finalizeRound""];
""5179_upgrade"" [label=""upgrade""];
""5179_finalizeLastRound"" [label=""finalizeLastRound""];
""5179_totalsInfo"" [label=""totalsInfo""];
""5179_setMaxDailyJackpot"" [label=""setMaxDailyJackpot""];
""5179_withdrawDevShare"" [label=""withdrawDevShare""];
""5179__issueShares"" [label=""_issueShares""];
""5179__startNewDailyRound"" [label=""_startNewDailyRound""];
""5179_setIPFSHash"" [label=""setIPFSHash""];
""5179_setNextRoundDelay"" [label=""setNextRoundDelay""];
""5179__dailyJackpot"" [label=""_dailyJackpot""];
""5179__onRandom"" [label=""_onRandom""];
""5179__triggerOraclize"" [label=""_triggerOraclize""];
""5179_updateMyReturns"" [label=""updateMyReturns""];
""5179__updateReturns"" [label=""_updateReturns""];
""5179_investorInfo"" [label=""investorInfo""];
""5179_estimateReturns"" [label=""estimateReturns""];
""5179_hasReturns"" [label=""hasReturns""];
""5179__purchase"" [label=""_purchase""];
""5179_setRoundParams"" [label=""setRoundParams""];
""5179_constructor"" [label=""constructor""];
""5179__onRandomFailed"" [label=""_onRandomFailed""];
""5179_buyShares"" [label=""buyShares""];
""5179_setSecondaryPrice"" [label=""setSecondaryPrice""];
""5179_initOraclize"" [label=""initOraclize""];
""5179__splitRevenue"" [label=""_splitRevenue""];
""5179_fallback"" [label=""fallback""];
""5179_withdrawReturns"" [label=""withdrawReturns""];
""5179_initOraclize"" -> ""5179_auth"";
""5179__purchase"" -> ""5179__issueShares"";
""5179_initOraclize"" -> ""5179_oraclize_setNetwork"";
""5179__disburseReturns"" -> ""5179_wdiv"";
""5179_estimateReturns"" -> ""5179_hasReturns"";
""5179__triggerOraclize"" -> ""5179__requestRandom"";
""5179__purchase"" -> ""5179_min"";
""5179__purchase"" -> ""5179_mul"";
""5179__purchase"" -> ""5179_add"";
""5179_withdrawDevShare"" -> ""5179_auth"";
""5179_totalsInfo"" -> ""5179_wmul"";
""5179__issueShares"" -> ""5179_add"";
""5179_reinvestReturns"" -> ""5179__updateReturns"";
""5179_reinvestReturns"" -> ""5179_reinvestReturns"";
""5179_withdrawReturns"" -> ""5179_hasReturns"";
""5179__purchase"" -> ""5179__dailyJackpot"";
""5179_startNewRound"" -> ""5179__purchase"";
""5179__dailyJackpot"" -> ""5179__requestRandom"";
""5179_finalizeLastRound"" -> ""5179__finalizeRound"";
""5179__purchase"" -> ""5179__splitRevenue"";
""5179__issueShares"" -> ""5179_wdiv"";
""5179_withdrawReturns"" -> ""5179_sub"";
""5179__finalizeRound"" -> ""5179_wmul"";
""5179__dailyJackpot"" -> ""5179_oraclize_setCustomGasPrice"";
""5179_startNewRound"" -> ""5179__startNewDailyRound"";
""5179__outstandingReturns"" -> ""5179_mul"";
""5179__splitRevenue"" -> ""5179_wmul"";
""5179_init"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_min"";
""5179_upgrade"" -> ""5179_auth"";
""5179__splitRevenue"" -> ""5179_add"";
""5179_initOraclize"" -> ""5179_oraclize_setProof"";
""5179_setSecondaryPrice"" -> ""5179_auth"";
""5179_updateMyReturns"" -> ""5179__updateReturns"";
""5179_withdrawDevShare"" -> ""5179_sub"";
""5179__issueShares"" -> ""5179_mul"";
""5179__drawDailyJackpot"" -> ""5179__startNewDailyRound"";
""5179__triggerOraclize"" -> ""5179_auth"";
""5179__purchase"" -> ""5179__updateReturns"";
""5179_reinvestReturns"" -> ""5179_min"";
""5179__dailyJackpot"" -> ""5179_min"";
""5179__disburseReturns"" -> ""5179_mul"";
""5179_roundInfo"" -> ""5179_wmul"";
""5179__finalizeRound"" -> ""5179_add"";
""5179_setNextRoundTimestamp"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_sub"";
""5179_finalizeAndRestart"" -> ""5179_finalizeLastRound"";
""5179__disburseReturns"" -> ""5179_add"";
""5179_withdrawReturns"" -> ""5179__updateReturns"";
""5179_investorInfo"" -> ""5179_estimateReturns"";
""5179__updateReturns"" -> ""5179_add"";
""5179_reinvestReturns"" -> ""5179__purchase"";
""5179_finalizeAndRestart"" -> ""5179_startNewRound"";
""5179_estimateReturns"" -> ""5179__outstandingReturns"";
""5179_reinvestReturns"" -> ""5179_sub"";
""5179_setMaxDailyJackpot"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_add"";
""5179_setNextRoundDelay"" -> ""5179_auth"";
""5179__splitRevenue"" -> ""5179__disburseReturns"";
""5179__purchase"" -> ""5179_wmul"";
""5179_roundInfo"" -> ""5179_min"";
""5179__outstandingReturns"" -> ""5179_sub"";
""5179_buyShares"" -> ""5179__purchase"";
""5179_setIPFSHash"" -> ""5179_auth"";
""5179__updateReturns"" -> ""5179__outstandingReturns"";
""5179__onRandom"" -> ""5179__drawDailyJackpot"";
""5179_setRoundParams"" -> ""5179_auth"";
""5179_fallback"" -> ""5179_buyShares"";
}
"
0xec8f9a0de90487e7aa172fe5291fd19ad7163aa1.sol,BDSMAirdrop,contract BDSMAirdrop { token public sharesTokenAddress; uint256 public tokenFree = 0; address owner; uint256 public defValue = 5000000; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_126_BDSMAirdrop {
label=""BDSMAirdrop"";
""126_BDSMAirdrop"" [label=""BDSMAirdrop""];
""126_changeAirdropValue"" [label=""changeAirdropValue""];
""126_tokensBack"" [label=""tokensBack""];
""126_multiSend"" [label=""multiSend""];
""126_multiSend"" -> ""126_onlyOwner"";
""126_changeAirdropValue"" -> ""126_onlyOwner"";
""126_tokensBack"" -> ""126_onlyOwner"";
}
"
0x00fa44d91d7541d16dd18a48dd6a011de5e887df.sol,Sale,"contract Sale is Ownable { Calculator calculator; ERC20 token; address tokenSeller; uint256 public minimalTokens = 100000000000; event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount); function Sale(address tokenAddress, address calculatorAddress) { tokenSeller = msg.sender; token = ERC20(tokenAddress); setCalculatorAddress(calculatorAddress); }",1,"subgraph cluster_267_Sale {
label=""Sale"";
""267_setMinimalTokens"" [label=""setMinimalTokens""];
""267_buyTokens"" [label=""buyTokens""];
""267_setCalculatorAddress"" [label=""setCalculatorAddress""];
""267_fallback"" [label=""fallback""];
""267_withdraw"" [label=""withdraw""];
""267_setTokenSeller"" [label=""setTokenSeller""];
""267_Sale"" [label=""Sale""];
""267_withdraw"" -> ""267_onlyOwner"";
""267_setCalculatorAddress"" -> ""267_onlyOwner"";
""267_Sale"" -> ""267_setCalculatorAddress"";
""267_fallback"" -> ""267_buyTokens"";
""267_setMinimalTokens"" -> ""267_onlyOwner"";
""267_setTokenSeller"" -> ""267_onlyOwner"";
}
"
0xdbe13bf528ca21bb6c306539109c21a304191f72.sol,HISToken,contract HISToken is AbstractToken { uint256 constant MAX_TOKEN_COUNT = 200000000 * (10**18); address private owner; mapping (address => bool) private frozenAccount; uint256 tokenCount = 0; bool frozen = false; constructor () public { owner = msg.sender; },1,"subgraph cluster_756_HISToken {
label=""HISToken"";
""756_totalSupply"" [label=""totalSupply""];
""756_freezeTransfers"" [label=""freezeTransfers""];
""756_freezeAccount"" [label=""freezeAccount""];
""756_constructor"" [label=""constructor""];
""756_unfreezeTransfers"" [label=""unfreezeTransfers""];
""756_setOwner"" [label=""setOwner""];
""756_transfer"" [label=""transfer""];
""756_approve"" [label=""approve""];
""756_refundTokens"" [label=""refundTokens""];
""756_createTokens"" [label=""createTokens""];
""756_transferFrom"" [label=""transferFrom""];
""756_transferFrom"" -> ""756_transferFrom"";
""756_approve"" -> ""756_allowance"";
""756_createTokens"" -> ""756_safeAdd"";
""756_createTokens"" -> ""756_safeSub"";
""756_approve"" -> ""756_approve"";
""756_transfer"" -> ""756_transfer"";
}
"
0xb471c695dd5ea02035275d4b88077490c1e380ba.sol,ERC20x,"contract ERC20x is ERC20xVariables { function transfer(address _to, uint256 _value) public returns (bool success) { _transferBalance(msg.sender, _to, _value); emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_81_ERC20xVariables {
label=""ERC20xVariables"";
""81_balanceOf"" [label=""balanceOf""];
""81_allowance"" [label=""allowance""];
}
"
0xf1a47b728439730e9f83054d7c352575bf13f0b4.sol,RPTCrowdsale,"contract RPTCrowdsale { using SafeMath for uint256; RPTToken public token; uint256 public totalWeiRaised; uint32 public exchangeRate = 3000; uint256 public preDistriToAcquiantancesStartTime = 1510876801; uint256 public preDistriToAcquiantancesEndTime = 1511827199; uint256 public presaleStartTime = 1511827200; uint256 public presaleEndTime = 1513036799; uint256 public crowdfundStartTime = 1513036800; uint256 public crowdfundEndTime = 1515628799; bool internal isTokenDeployed = false; address public founderMultiSigAddress; address public remainingTokenHolder; address public beneficiaryAddress; enum State { Acquiantances, PreSale, CrowdFund, Closed }",1,"subgraph cluster_1069_RPTCrowdsale {
label=""RPTCrowdsale"";
""1069_getBonus"" [label=""getBonus""];
""1069_setFounderMultiSigAddress"" [label=""setFounderMultiSigAddress""];
""1069_RPTCrowdsale"" [label=""RPTCrowdsale""];
""1069_getState"" [label=""getState""];
""1069_fallback"" [label=""fallback""];
""1069_setTokenAddress"" [label=""setTokenAddress""];
""1069_fundTransfer"" [label=""fundTransfer""];
""1069_getNoOfTokens"" [label=""getNoOfTokens""];
""1069_getCurrentBonusRate"" [label=""getCurrentBonusRate""];
""1069_buyTokens"" [label=""buyTokens""];
""1069_endCrowdfund"" [label=""endCrowdfund""];
""1069_buyTokens"" -> ""1069_nonZeroEth"";
""1069_getCurrentBonusRate"" -> ""1069_getState"";
""1069_buyTokens"" -> ""1069_tokenIsDeployed"";
""1069_setFounderMultiSigAddress"" -> ""1069_nonZeroAddress"";
""1069_getNoOfTokens"" -> ""1069_getCurrentBonusRate"";
""1069_buyTokens"" -> ""1069_inBetween"";
""1069_getBonus"" -> ""1069_getCurrentBonusRate"";
""1069_setTokenAddress"" -> ""1069_nonZeroAddress"";
""1069_buyTokens"" -> ""1069_fundTransfer"";
""1069_buyTokens"" -> ""1069_nonZeroAddress"";
""1069_fallback"" -> ""1069_buyTokens"";
""1069_setFounderMultiSigAddress"" -> ""1069_onlyFounders"";
""1069_setTokenAddress"" -> ""1069_onlyFounders"";
""1069_buyTokens"" -> ""1069_onlyPublic"";
""1069_buyTokens"" -> ""1069_getNoOfTokens"";
""1069_endCrowdfund"" -> ""1069_onlyFounders"";
}
"
0xcdf35c3fe4ccfacb3b1bbedfe71ca3a5ff6f2db1.sol,AdvisorsTokensHolder,"contract AdvisorsTokensHolder is Ownable { using SafeMath for uint256; GenericCrowdsale crowdsale; MyDFSToken token; event ClaimedTokens(address token, uint256 amount); event TokensWithdrawn(address holder, uint256 amount); function AdvisorsTokensHolder(address _crowdsale, address _token, address _owner) public { crowdsale = GenericCrowdsale(_crowdsale); token = MyDFSToken(_token); owner = _owner; }",1,"subgraph cluster_1416_AdvisorsTokensHolder {
label=""AdvisorsTokensHolder"";
""1416_tokenFallback"" [label=""tokenFallback""];
""1416_getTime"" [label=""getTime""];
""1416_AdvisorsTokensHolder"" [label=""AdvisorsTokensHolder""];
""1416_collectTokens"" [label=""collectTokens""];
""1416_claimTokens"" [label=""claimTokens""];
""1416_claimTokens"" -> ""1416_onlyOwner"";
""1416_collectTokens"" -> ""1416_onlyOwner"";
""1416_collectTokens"" -> ""1416_getTime"";
}
"
0xedf19b437d1a67e18b15dd4a859dd52f9cfa012f.sol,ERC777TokenScheduledTimelock,"contract ERC777TokenScheduledTimelock is ERC820Implementer, ERC777TokensRecipient, Ownable { using SafeMath for uint256; ERC777Token public token; uint256 public totalVested; struct Timelock { uint256 till; uint256 amount; }",1,"subgraph cluster_1014_ERC777TokenScheduledTimelock {
label=""ERC777TokenScheduledTimelock"";
""1014_scheduleTimelock"" [label=""scheduleTimelock""];
""1014_release"" [label=""release""];
""1014_constructor"" [label=""constructor""];
""1014_getScheduledTimelockCount"" [label=""getScheduledTimelockCount""];
""1014_getNow"" [label=""getNow""];
""1014_tokensReceived"" [label=""tokensReceived""];
""1014_releaseBatch"" [label=""releaseBatch""];
""1014_release"" -> ""1014_getNow"";
""1014_constructor"" -> ""1014_interfaceAddr"";
""1014_scheduleTimelock"" -> ""1014_getNow"";
""1014_releaseBatch"" -> ""1014_release"";
""1014_constructor"" -> ""1014_setInterfaceImplementation"";
""1014_scheduleTimelock"" -> ""1014_onlyOwner"";
}
"
