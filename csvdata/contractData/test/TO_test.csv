file,contract,code,label,graph
0x6c1bcb34142bffd35f57db626e0ac427af616a4d.sol,EnjinBuyer,contract EnjinBuyer { mapping (address => uint256) public balances; mapping (address => uint256) public balances_after_buy; bool public bought_tokens; bool public token_set; bool public refunded; uint256 public contract_eth_value; bool public kill_switch; bytes32 password_hash = 0x8bf0720c6e610aace867eba51b03ab8ca908b665898b10faddc95a96e829539d; address public developer = 0x0639C169D9265Ca4B4DEce693764CdA8ea5F3882; address public sale = 0xc4740f71323129669424d1Ae06c42AEE99da30e2; ERC20 public token; uint256 public eth_minimum = 3235 ether; function set_token(address _token) { require(msg.sender == developer); token = ERC20(_token); token_set = true; },1,"subgraph cluster_503_EnjinBuyer {
label=""EnjinBuyer"";
""503_set_token"" [label=""set_token""];
""503_fallback"" [label=""fallback""];
""503_purchase_tokens"" [label=""purchase_tokens""];
""503_activate_kill_switch"" [label=""activate_kill_switch""];
""503_set_refunded"" [label=""set_refunded""];
""503_withdraw"" [label=""withdraw""];
""503_personal_withdraw"" [label=""personal_withdraw""];
}
"
0x0033fb5561719b8b697b604466d6d39308c58191.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 500000000; uint256 public buyPrice = 2000; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public { }",1,"subgraph cluster_627_EncryptedToken {
label=""EncryptedToken"";
""627_fallback"" [label=""fallback""];
""627_balanceOfa"" [label=""balanceOfa""];
""627_mintToken"" [label=""mintToken""];
""627_freezeAccount"" [label=""freezeAccount""];
""627_setPrices"" [label=""setPrices""];
""627_selfdestructs"" [label=""selfdestructs""];
""627_getEth"" [label=""getEth""];
""627__transfer"" [label=""_transfer""];
""627_buy"" [label=""buy""];
""627_EncryptedToken"" [label=""EncryptedToken""];
""627_setPrices"" -> ""627_onlyOwner"";
""627_buy"" -> ""627__transfer"";
""627_fallback"" -> ""627__transfer"";
""627_EncryptedToken"" -> ""627_TokenERC20"";
""627_mintToken"" -> ""627_onlyOwner"";
""627_freezeAccount"" -> ""627_onlyOwner"";
}
"
0x1847825ea569501ca50dee126d31ea95f6c62a87.sol,LinCrowdSale,"contract LinCrowdSale is LinTokenMint, WhitelistedCrowdsale { uint constant Month = 60*60*24*30; uint constant SixMonth = 6 * Month; uint constant Year = 12 * Month; uint public StartTime = now; uint public EndTime = StartTime + SixMonth; uint public PrivateSaleEndTime = StartTime.add(Month); uint public PreSaleEndTime = PrivateSaleEndTime.add(Month); bool public SoftCapReached = false; bool public HardCapReached = false; bool public SaleClosed = false; bool private rentrancy_lock = false; uint public constant Private_rate = 2000; uint public constant Pre_rate = 1500; uint public constant Public = 1200; uint public MinInvestMent = 2 * (10 ** decimals); uint public HardCap = 500000000 * (10 ** decimals); uint public SoftCap = 10000000 * (10 ** decimals); uint public TotalAmountETH; uint public SaleAmountLIN; uint public RefundAmount; uint public InvestorNum; event SuccessCoreAccount(uint256 InvestorNum); event Burn(address burner, uint256 value); event SuccessInvestor(address RequestAddress, uint256 amount); event SuccessSoftCap(uint256 SaleAmountLin, uint256 time); event SuccessHardCap(uint256 SaleAmountLin, uint256 time); event SucessWithdraw(address who, uint256 AmountEth, uint256 time); event SuccessEthToOwner(address owner, uint256 AmountEth, uint256 time); event linTokenToInvestors(address InverstorAddress, uint256 Amount, uint256 now); event linTokenToCore(address CoreAddress, uint256 Amount, uint256 now); event FailsafeWithdrawal(address InverstorAddress, uint256 Amount, uint256 now); event FaillinTokenToInvestors(address InverstorAddress, uint256 Amount, uint256 now, uint256 ReleaseTime); event FaillinTokenToCore(address CoreAddress, uint256 Amount, uint256 now, uint256 ReleaseTime); event FailEthToOwner(address who, uint256 _amount, uint256 now); event safeWithdrawalTry(address who); modifier beforeDeadline() { require (now < EndTime); _; }",1,"subgraph cluster_1660_LinCrowdSale {
label=""LinCrowdSale"";
""1660_CheckHardCap"" [label=""CheckHardCap""];
""1660_LinTokenToInvestors"" [label=""LinTokenToInvestors""];
""1660_safeWithdrawal"" [label=""safeWithdrawal""];
""1660_LinTokenToCore"" [label=""LinTokenToCore""];
""1660_fallback"" [label=""fallback""];
""1660_CheckSoftCap"" [label=""CheckSoftCap""];
""1660_transferEthToOwner"" [label=""transferEthToOwner""];
""1660_constructor"" [label=""constructor""];
""1660_burn"" [label=""burn""];
""1660_safeWithdrawal"" -> ""1660_afterDeadline"";
""1660_fallback"" -> ""1660_isWhitelisted"";
""1660_safeWithdrawal"" -> ""1660_nonReentrant"";
""1660_burn"" -> ""1660_afterDeadline"";
""1660_transferEthToOwner"" -> ""1660_afterDeadline"";
""1660_transferEthToOwner"" -> ""1660_nonReentrant"";
""1660_transferEthToOwner"" -> ""1660_onlyOwner"";
""1660_LinTokenToCore"" -> ""1660_nonReentrant"";
""1660_burn"" -> ""1660_nonReentrant"";
""1660_burn"" -> ""1660_onlyOwner"";
""1660_fallback"" -> ""1660_CheckHardCap"";
""1660_fallback"" -> ""1660_afterStartTime"";
""1660_fallback"" -> ""1660_CheckSoftCap"";
""1660_LinTokenToInvestors"" -> ""1660_afterDeadline"";
""1660_fallback"" -> ""1660_whenNotPaused"";
""1660_LinTokenToInvestors"" -> ""1660_nonReentrant"";
""1660_LinTokenToCore"" -> ""1660_afterDeadline"";
""1660_LinTokenToCore"" -> ""1660_onlyOwner"";
""1660_fallback"" -> ""1660_beforeDeadline"";
""1660_LinTokenToInvestors"" -> ""1660_onlyOwner"";
""1660_fallback"" -> ""1660_nonReentrant"";
""1660_fallback"" -> ""1660_saleNotClosed"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllRefundEscrow,contract ClinicAllRefundEscrow is RefundEscrow { using Math for uint256; struct RefundeeRecord { bool isRefunded; uint256 index; },1,"subgraph cluster_2170_ClinicAllRefundEscrow {
label=""ClinicAllRefundEscrow"";
""2170_deposit"" [label=""deposit""];
""2170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""2170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""2170_withdrawChunk"" [label=""withdrawChunk""];
""2170_withdraw"" [label=""withdraw""];
""2170_close"" [label=""close""];
""2170_removeRefundeeByIndex"" [label=""removeRefundeeByIndex""];
""2170_refundeesListLength"" [label=""refundeesListLength""];
""2170_withdrawEverything"" [label=""withdrawEverything""];
""2170_depositsOf"" [label=""depositsOf""];
""2170_beneficiaryDepositsOf"" [label=""beneficiaryDepositsOf""];
""2170_constructor"" [label=""constructor""];
""2170_depositFunds"" [label=""depositFunds""];
""2170_manualRefund"" [label=""manualRefund""];
""2170_withdrawChunk"" -> ""2170_removeRefundeeByIndex"";
""2170_manualRefund"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_onlyOwner"";
""2170_close"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawChunk"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawAll"" -> ""2170_onlyOwner"";
""2170_constructor"" -> ""2170_constructor"";
""2170_close"" -> ""2170_close"";
""2170_manualRefund"" -> ""2170_depositsOf"";
""2170_manualRefund"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_withdrawChunk"";
""2170_depositFunds"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_depositsOf"";
""2170_refundeesListLength"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_depositsOf"";
}
"
0xef511cd832613f77a6c6cc8ab5ce6a8b4181c9ba.sol,ICOBuyer,"contract ICOBuyer { address public developer = 0xF23B127Ff5a6a8b60CC4cbF937e5683315894DDA; address public sale = 0x0; ERC20 public token; function set_addresses(address _sale, address _token) { require(msg.sender == developer); sale = _sale; token = ERC20(_token); }",1,"subgraph cluster_206_ICOBuyer {
label=""ICOBuyer"";
""206_set_addresses"" [label=""set_addresses""];
""206_withdrawToken"" [label=""withdrawToken""];
""206_fallback"" [label=""fallback""];
""206_buy"" [label=""buy""];
""206_withdrawETH"" [label=""withdrawETH""];
""206_buyWithAddress"" [label=""buyWithAddress""];
""206_buyWithFunction"" [label=""buyWithFunction""];
""206_buyWithAddressAndFunction"" [label=""buyWithAddressAndFunction""];
}
"
0x92dee36a50f66c603e15b9ac07338ec0046f902f.sol,IRideLiquidityPool,contract IRideLiquidityPool { Token public tokenReward; address public creator; address public owner = 0xBeDF65990326Ed2236C5A17432d9a30dbA3aBFEe; uint256 public price; uint256 public startDate; modifier isCreator() { require(msg.sender == creator); _; },1,"subgraph cluster_184_IRideLiquidityPool {
label=""IRideLiquidityPool"";
""184_setPrice"" [label=""setPrice""];
""184_setStartDate"" [label=""setStartDate""];
""184_setCreator"" [label=""setCreator""];
""184_IRideLiquidityPool"" [label=""IRideLiquidityPool""];
""184_setToken"" [label=""setToken""];
""184_fallback"" [label=""fallback""];
""184_kill"" [label=""kill""];
""184_setOwner"" [label=""setOwner""];
""184_setPrice"" -> ""184_isCreator"";
""184_setToken"" -> ""184_isCreator"";
""184_setStartDate"" -> ""184_isCreator"";
""184_setOwner"" -> ""184_isCreator"";
""184_kill"" -> ""184_isCreator"";
""184_setCreator"" -> ""184_isCreator"";
}
"
0xd1632efa392925089785b43410c529f8959a8d9a.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1092_MiniMeToken {
label=""MiniMeToken"";
""1092_balanceOf"" [label=""balanceOf""];
""1092_approveAndCall"" [label=""approveAndCall""];
""1092_enableTransfers"" [label=""enableTransfers""];
""1092_allowance"" [label=""allowance""];
""1092_approve"" [label=""approve""];
""1092_fallback"" [label=""fallback""];
""1092_MiniMeToken"" [label=""MiniMeToken""];
""1092_claimTokens"" [label=""claimTokens""];
""1092_getValueAt"" [label=""getValueAt""];
""1092_transferFrom"" [label=""transferFrom""];
""1092_balanceOfAt"" [label=""balanceOfAt""];
""1092_totalSupply"" [label=""totalSupply""];
""1092_min"" [label=""min""];
""1092_isContract"" [label=""isContract""];
""1092_generateTokens"" [label=""generateTokens""];
""1092_updateValueAtNow"" [label=""updateValueAtNow""];
""1092_totalSupplyAt"" [label=""totalSupplyAt""];
""1092_createCloneToken"" [label=""createCloneToken""];
""1092_transfer"" [label=""transfer""];
""1092_destroyTokens"" [label=""destroyTokens""];
""1092_doTransfer"" [label=""doTransfer""];
""1092_doTransfer"" -> ""1092_updateValueAtNow"";
""1092_doTransfer"" -> ""1092_balanceOfAt"";
""1092_totalSupplyAt"" -> ""1092_getValueAt"";
""1092_doTransfer"" -> ""1092_isContract"";
""1092_generateTokens"" -> ""1092_totalSupply"";
""1092_generateTokens"" -> ""1092_balanceOf"";
""1092_balanceOfAt"" -> ""1092_min"";
""1092_balanceOf"" -> ""1092_balanceOfAt"";
""1092_destroyTokens"" -> ""1092_onlyController"";
""1092_destroyTokens"" -> ""1092_updateValueAtNow"";
""1092_totalSupplyAt"" -> ""1092_min"";
""1092_destroyTokens"" -> ""1092_totalSupply"";
""1092_transfer"" -> ""1092_doTransfer"";
""1092_destroyTokens"" -> ""1092_balanceOf"";
""1092_approve"" -> ""1092_isContract"";
""1092_totalSupply"" -> ""1092_totalSupplyAt"";
""1092_generateTokens"" -> ""1092_updateValueAtNow"";
""1092_transferFrom"" -> ""1092_doTransfer"";
""1092_enableTransfers"" -> ""1092_onlyController"";
""1092_generateTokens"" -> ""1092_onlyController"";
""1092_claimTokens"" -> ""1092_onlyController"";
""1092_approveAndCall"" -> ""1092_approve"";
""1092_balanceOfAt"" -> ""1092_getValueAt"";
""1092_fallback"" -> ""1092_isContract"";
}
"
0x27a8e297fefa4f15e856aea59ba9336e0dbf3c74.sol,GIGA,contract GIGA { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_GIGA {
label=""GIGA"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_fallback"" [label=""fallback""];
""132_Start_giga"" [label=""Start_giga""];
""132_StopGame"" [label=""StopGame""];
""132_Try"" [label=""Try""];
""132_newQuestioner"" [label=""newQuestioner""];
}
"
0x35d76c3db8e826907d2a977500b54b3914ecc020.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_784_RefundVault {
label=""RefundVault"";
""784_refund"" [label=""refund""];
""784_RefundVault"" [label=""RefundVault""];
""784_enableRefunds"" [label=""enableRefunds""];
""784_deposit"" [label=""deposit""];
""784_close"" [label=""close""];
""784_enableRefunds"" -> ""784_onlyOwner"";
""784_close"" -> ""784_onlyOwner"";
""784_deposit"" -> ""784_onlyOwner"";
}
"
0x1bd4e709a076fb71ea1014293a739f2b19ca565d.sol,Labtorum,"contract Labtorum is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 50 * 1 days; uint public presaledeadline = now + 15 * 1 days; uint256 public totalSupply = 3000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 500; uint256 public tokensPerEth = 300000e8; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1182_Labtorum {
label=""Labtorum"";
""1182_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1182_getTokens"" [label=""getTokens""];
""1182_finishDistribution"" [label=""finishDistribution""];
""1182_distr"" [label=""distr""];
""1182_withdrawAll"" [label=""withdrawAll""];
""1182_transferOwnership"" [label=""transferOwnership""];
""1182_transferFrom"" [label=""transferFrom""];
""1182_getTokenBalance"" [label=""getTokenBalance""];
""1182_balanceOf"" [label=""balanceOf""];
""1182_transfer"" [label=""transfer""];
""1182_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1182_allowance"" [label=""allowance""];
""1182_fallback"" [label=""fallback""];
""1182_Distribute"" [label=""Distribute""];
""1182_approve"" [label=""approve""];
""1182_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1182_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1182_burn"" [label=""burn""];
""1182_withdraw"" [label=""withdraw""];
""1182_Distribute"" -> ""1182_onlyOwner"";
""1182_fallback"" -> ""1182_getTokens"";
""1182_DistributeAirdropMultiple"" -> ""1182_onlyOwner"";
""1182_DistributeAirdropMultiple"" -> ""1182_Distribute"";
""1182_DistributeAirdrop"" -> ""1182_onlyOwner"";
""1182_transferOwnership"" -> ""1182_onlyOwner"";
""1182_withdrawAll"" -> ""1182_onlyOwner"";
""1182_updateTokensPerEth"" -> ""1182_onlyOwner"";
""1182_finishDistribution"" -> ""1182_canDistr"";
""1182_withdraw"" -> ""1182_onlyOwner"";
""1182_finishDistribution"" -> ""1182_onlyOwner"";
""1182_distr"" -> ""1182_canDistr"";
""1182_transferFrom"" -> ""1182_onlyPayloadSize"";
""1182_getTokens"" -> ""1182_canDistr"";
""1182_DistributeAirdrop"" -> ""1182_Distribute"";
""1182_getTokens"" -> ""1182_distr"";
""1182_transfer"" -> ""1182_onlyPayloadSize"";
""1182_burn"" -> ""1182_onlyOwner"";
""1182_withdrawForeignTokens"" -> ""1182_onlyOwner"";
}
"
0x1bb0a576936bce5d983e676073ac48ba49f12e05.sol,PullPayment,"contract PullPayment { using SafeMath for uint; mapping(address => uint) public payments; event LogRefundETH(address to, uint value); function asyncSend(address dest, uint amount) internal { payments[dest] = payments[dest].add(amount); }",1,"subgraph cluster_417_PullPayment {
label=""PullPayment"";
""417_withdrawPayments"" [label=""withdrawPayments""];
""417_asyncSend"" [label=""asyncSend""];
}
"
0x447b4ccab1b370afbe5ae2e68c0b700be913a585.sol,AgileCycle,contract AgileCycle { using SafeMath for uint; address public operator; address public juryOperator; uint public promisedTokens; uint public raisedEther; bool public tokenReleaseAtStart; address public icoAddress; address public arbitrationAddress; bool public roundFailedToStart; address public projectWallet; address public juryOnlineWallet; struct Milestone { uint etherAmount; uint tokenAmount; uint startTime; uint finishTime; uint duration; string description; string result; },1,"subgraph cluster_3174_AgileCycle {
label=""AgileCycle"";
""3174_currentMilestone"" [label=""currentMilestone""];
""3174_assignPartition"" [label=""assignPartition""];
""3174_withdrawToken"" [label=""withdrawToken""];
""3174_finishedTimeStamp"" [label=""finishedTimeStamp""];
""3174_approveCycle"" [label=""approveCycle""];
""3174_sealTimestamp"" [label=""sealTimestamp""];
""3174_milestonesLength"" [label=""milestonesLength""];
""3174_editMilestone"" [label=""editMilestone""];
""3174_addMilestonesAndSeal"" [label=""addMilestonesAndSeal""];
""3174_payCommission"" [label=""payCommission""];
""3174_seal"" [label=""seal""];
""3174_addMilestone"" [label=""addMilestone""];
""3174_failSafe"" [label=""failSafe""];
""3174_startMilestone"" [label=""startMilestone""];
""3174_setToken"" [label=""setToken""];
""3174_disputeOpened"" [label=""disputeOpened""];
""3174_offerAccepted"" [label=""offerAccepted""];
""3174_promisedTokens"" [label=""promisedTokens""];
""3174_finishMilestone"" [label=""finishMilestone""];
""3174_withdrawEther"" [label=""withdrawEther""];
""3174_constructor"" [label=""constructor""];
""3174_investorExists"" [label=""investorExists""];
""3174_verdictExecuted"" [label=""verdictExecuted""];
""3174_addMilestone"" -> ""3174_only"";
""3174_startMilestone"" -> ""3174_payCommission"";
""3174_disputeOpened"" -> ""3174_only"";
""3174_startMilestone"" -> ""3174_sealed"";
""3174_setToken"" -> ""3174_only"";
""3174_offerAccepted"" -> ""3174_assignPartition"";
""3174_seal"" -> ""3174_only"";
""3174_addMilestonesAndSeal"" -> ""3174_only"";
""3174_addMilestonesAndSeal"" -> ""3174_notSealed"";
""3174_startMilestone"" -> ""3174_only"";
""3174_editMilestone"" -> ""3174_only"";
""3174_finishMilestone"" -> ""3174_only"";
""3174_seal"" -> ""3174_notSealed"";
""3174_verdictExecuted"" -> ""3174_only"";
""3174_addMilestone"" -> ""3174_notSealed"";
""3174_editMilestone"" -> ""3174_notSealed"";
""3174_offerAccepted"" -> ""3174_only"";
}
"
0x70bf9df6967dc96156e76cc43b928a7ef02e159a.sol,X_GAME,contract X_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_X_GAME {
label=""X_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_StopGame"" [label=""StopGame""];
}
"
0xe01ba6c593003b0edcd43b7839a7c36b00a44dfc.sol,SBITokenCrowdsale,"contract SBITokenCrowdsale is Owned, CrowdsaleParameters { using SafeMath for uint256; string public name = ; SBIToken private token; address public bank; address saleWalletAddress; uint private tokenMultiplier = 10; uint public totalCollected = 0; uint public saleStartTimestamp; uint public saleStopTimestamp; uint public saleGoal; bool public goalReached = false; uint public preicoTokensPerEth = 27314; uint public tokensPerEth = 10500; mapping (address => uint256) private investmentRecords; address crowdsaleAddress = this; uint256 public constant saleStartDate = 1530403200; uint256 public constant saleEndDate = 1535759940; uint256 public constant preSaleStartDate = 1529020800; uint256 public constant preSaleEndDate = 1530403140; uint public preSaleAmount = 5800000; event TokenSale(address indexed tokenReceiver, uint indexed etherAmount, uint indexed tokenAmount, uint tokensPerEther); event FundTransfer(address indexed from, address indexed to, uint indexed amount); function SBITokenCrowdsale(address _tokenAddress, address _bankAddress) public { token = SBIToken(_tokenAddress); bank = _bankAddress; tokenMultiplier = tokenMultiplier ** token.decimals(); saleWalletAddress = generalSaleWallet.addr; saleGoal = generalSaleWallet.amount; }",1,"subgraph cluster_1145_SBITokenCrowdsale {
label=""SBITokenCrowdsale"";
""1145_processPayment"" [label=""processPayment""];
""1145_SBITokenCrowdsale"" [label=""SBITokenCrowdsale""];
""1145_isICOActive"" [label=""isICOActive""];
""1145_fallback"" [label=""fallback""];
""1145_setTokenRate"" [label=""setTokenRate""];
""1145_safeWithdrawal"" [label=""safeWithdrawal""];
""1145_kill"" [label=""kill""];
""1145_processPayment"" -> ""1145_isICOActive"";
""1145_kill"" -> ""1145_onlyOwner"";
""1145_fallback"" -> ""1145_processPayment"";
""1145_safeWithdrawal"" -> ""1145_onlyOwner"";
""1145_kill"" -> ""1145_isICOActive"";
""1145_setTokenRate"" -> ""1145_onlyOwner"";
}
"
0xeafd8b734e32aec64c4b445e9da401427ef63a3a.sol,CryptoBossWannaCry,contract CryptoBossWannaCry is PullPayment{ bool init = false; address public administrator; uint256 public bossRoundNumber; uint256 private randNonce; uint256 constant public BOSS_HP_DEFAULT = 100000; uint256 public HALF_TIME_ATK_BOSS = 0; uint256 constant public VIRUS_MINING_PERIOD = 86400; uint256 public BOSS_DEF_DEFFAULT = 0; CryptoEngineerInterface public EngineerContract; CryptoMiningWarInterface public MiningwarContract; mapping(address => PlayerData) public players; mapping(uint256 => BossData) public bossData; struct PlayerData { uint256 currentBossRoundNumber; uint256 lastBossRoundNumber; uint256 win; uint256 share; uint256 dame; uint256 nextTimeAtk; },1,"subgraph cluster_1110_CryptoBossWannaCry {
label=""CryptoBossWannaCry"";
""1110_upgrade"" [label=""upgrade""];
""1110_fallback"" [label=""fallback""];
""1110_atkBoss"" [label=""atkBoss""];
""1110_startNewBoss"" [label=""startNewBoss""];
""1110_calculateShareETH"" [label=""calculateShareETH""];
""1110_isContractMiniGame"" [label=""isContractMiniGame""];
""1110_devFee"" [label=""devFee""];
""1110_randomNumber"" [label=""randomNumber""];
""1110_setDefenceBoss"" [label=""setDefenceBoss""];
""1110_setHalfTimeAtkBoss"" [label=""setHalfTimeAtkBoss""];
""1110_startGame"" [label=""startGame""];
""1110_getEngineerCurrentVirus"" [label=""getEngineerCurrentVirus""];
""1110_updateShareETH"" [label=""updateShareETH""];
""1110_constructor"" [label=""constructor""];
""1110_getEngineerPrizePool"" [label=""getEngineerPrizePool""];
""1110_withdrawReward"" [label=""withdrawReward""];
""1110_endAtkBoss"" [label=""endAtkBoss""];
""1110_setupMiniGame"" [label=""setupMiniGame""];
""1110_atkBoss"" -> ""1110_updateShareETH"";
""1110_atkBoss"" -> ""1110_endAtkBoss"";
""1110_withdrawReward"" -> ""1110_disableContract"";
""1110_withdrawReward"" -> ""1110_updateShareETH"";
""1110_atkBoss"" -> ""1110_randomNumber"";
""1110_atkBoss"" -> ""1110_getEngineerCurrentVirus"";
""1110_startGame"" -> ""1110_isAdministrator"";
""1110_setDefenceBoss"" -> ""1110_isAdministrator"";
""1110_startNewBoss"" -> ""1110_getEngineerPrizePool"";
""1110_startGame"" -> ""1110_startNewBoss"";
""1110_updateShareETH"" -> ""1110_calculateShareETH"";
""1110_endAtkBoss"" -> ""1110_startNewBoss"";
""1110_atkBoss"" -> ""1110_disableContract"";
""1110_setHalfTimeAtkBoss"" -> ""1110_isAdministrator"";
}
"
0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol,Token,"contract Token is ERC20, Stoppable { bytes32 public symbol; string public name; uint256 public decimals = 18; TokenLogic public logic; function Token(string name_, bytes32 symbol_) { name = name_; symbol = symbol_; }",1,"subgraph cluster_1370_Token {
label=""Token"";
""1370_payout"" [label=""payout""];
""1370_totalSupply"" [label=""totalSupply""];
""1370_setLogic"" [label=""setLogic""];
""1370_mint"" [label=""mint""];
""1370_transferEth"" [label=""transferEth""];
""1370_setSymbol"" [label=""setSymbol""];
""1370_setOwner"" [label=""setOwner""];
""1370_fallback"" [label=""fallback""];
""1370_setName"" [label=""setName""];
""1370_balanceOf"" [label=""balanceOf""];
""1370_burn"" [label=""burn""];
""1370_approve"" [label=""approve""];
""1370_transferFrom"" [label=""transferFrom""];
""1370_push"" [label=""push""];
""1370_transfer"" [label=""transfer""];
""1370_Token"" [label=""Token""];
""1370_allowance"" [label=""allowance""];
""1370_pull"" [label=""pull""];
""1370_triggerTansferEvent"" [label=""triggerTansferEvent""];
""1370_burn"" -> ""1370_auth"";
""1370_burn"" -> ""1370_note"";
""1370_transfer"" -> ""1370_note"";
""1370_pull"" -> ""1370_transferFrom"";
""1370_transfer"" -> ""1370_stoppable"";
""1370_setName"" -> ""1370_auth"";
""1370_mint"" -> ""1370_stoppable"";
""1370_mint"" -> ""1370_auth"";
""1370_setOwner"" -> ""1370_auth"";
""1370_burn"" -> ""1370_stoppable"";
""1370_approve"" -> ""1370_note"";
""1370_push"" -> ""1370_transfer"";
""1370_setOwner"" -> ""1370_setOwner"";
""1370_approve"" -> ""1370_stoppable"";
""1370_setSymbol"" -> ""1370_auth"";
""1370_mint"" -> ""1370_note"";
""1370_transferFrom"" -> ""1370_stoppable"";
""1370_payout"" -> ""1370_auth"";
""1370_transferFrom"" -> ""1370_note"";
""1370_setLogic"" -> ""1370_auth"";
""1370_setLogic"" -> ""1370_note"";
""1370_setOwner"" -> ""1370_balanceOf"";
}
"
0x7275f61c3abfba3596ae71f7128bdc3b0fc01fa9.sol,SignalsSociety,"contract SignalsSociety is Ownable, Memberships { event Deposited(address account, uint amount, uint balance, uint timestamp); event MembershipPaid(address account, Membership membership, uint timestamp); mapping (address => uint) public balances; function withdraw(address user) public { require(user == msg.sender); uint amount = balances[user]; balances[user] = 0; user.transfer(amount); }",1,"subgraph cluster_289_SignalsSociety {
label=""SignalsSociety"";
""289_fallback"" [label=""fallback""];
""289_deposit"" [label=""deposit""];
""289_withdraw"" [label=""withdraw""];
""289_acceptMembership"" [label=""acceptMembership""];
""289_fallback"" -> ""289_deposit"";
""289_acceptMembership"" -> ""289_onlyBot"";
""289_acceptMembership"" -> ""289_getMembershipPrice"";
}
"
0x03347abb58cc3071fdbba7f7bd7cca03c8e04229.sol,CompanyShare,contract CompanyShare { using SafeMath for *; mapping (address => uint256) public pIDxAddr_; mapping (uint256 => CompanySharedatasets.Player) public team_; modifier isHuman() { address _addr = msg.sender; uint256 _codeLength; assembly {_codeLength := extcodesize(_addr)},1,"subgraph cluster_371_CompanyShare {
label=""CompanyShare"";
""371_withdraw"" [label=""withdraw""];
""371_constructor"" [label=""constructor""];
""371_getGen"" [label=""getGen""];
""371_withdrawEarnings"" [label=""withdrawEarnings""];
""371_giveGen"" [label=""giveGen""];
""371_fallback"" [label=""fallback""];
""371_destroy"" [label=""destroy""];
""371_deposit"" [label=""deposit""];
""371_fallback"" -> ""371_giveGen"";
""371_withdraw"" -> ""371_isHuman"";
""371_withdraw"" -> ""371_withdrawEarnings"";
""371_deposit"" -> ""371_giveGen"";
}
"
0x0de197dc289d680e734ccab866d529505b2638db.sol,CryptoMiningWar,contract CryptoMiningWar is PullPayment { bool public initialized = false; uint256 public roundNumber = 0; uint256 public deadline; uint256 public CRTSTAL_MINING_PERIOD = 86400; uint256 public HALF_TIME = 8 hours; uint256 public ROUND_TIME = 86400 * 7; uint256 public prizePool = 0; uint256 BASE_PRICE = 0.005 ether; uint256 RANK_LIST_LIMIT = 10000; uint256 MINIMUM_LIMIT_SELL = 5000000; uint256 randNonce = 0; mapping(uint256 => MinerData) private minerData; uint256 private numberOfMiners; mapping(address => PlayerData) private players; uint256 private numberOfBoosts; mapping(uint256 => BoostData) private boostData; uint256 private numberOfOrders; mapping(uint256 => BuyOrderData) private buyOrderData; mapping(uint256 => SellOrderData) private sellOrderData; uint256 private numberOfRank; address[21] rankList; address public sponsor; uint256 public sponsorLevel; address public administrator; struct PlayerData { uint256 roundNumber; mapping(uint256 => uint256) minerCount; uint256 hashrate; uint256 crystals; uint256 lastUpdateTime; uint256 referral_count; uint256 noQuest; },1,"subgraph cluster_3300_CryptoMiningWar {
label=""CryptoMiningWar"";
""3300_getBalance"" [label=""getBalance""];
""3300_sellCrystal"" [label=""sellCrystal""];
""3300_updateHashrate"" [label=""updateHashrate""];
""3300_quickSort"" [label=""quickSort""];
""3300_getBuyDemand"" [label=""getBuyDemand""];
""3300_getCurrentLevel"" [label=""getCurrentLevel""];
""3300_updateRankList"" [label=""updateRankList""];
""3300_becomeSponsor"" [label=""becomeSponsor""];
""3300_startGame"" [label=""startGame""];
""3300_updateCrytal"" [label=""updateCrytal""];
""3300_getFreeMiner"" [label=""getFreeMiner""];
""3300_getRankList"" [label=""getRankList""];
""3300_getLowestUnitPriceIdxFromBuy"" [label=""getLowestUnitPriceIdxFromBuy""];
""3300_buyCrystal"" [label=""buyCrystal""];
""3300_getPlayerData"" [label=""getPlayerData""];
""3300_sellCrystalDemand"" [label=""sellCrystalDemand""];
""3300_withdrawBuyDemand"" [label=""withdrawBuyDemand""];
""3300_getSponsorFee"" [label=""getSponsorFee""];
""3300_getBoosterPrice"" [label=""getBoosterPrice""];
""3300_inRankList"" [label=""inRankList""];
""3300_addReferralHashrate"" [label=""addReferralHashrate""];
""3300_lottery"" [label=""lottery""];
""3300_devFee"" [label=""devFee""];
""3300_getHashratePerDay"" [label=""getHashratePerDay""];
""3300_getCurrentPrice"" [label=""getCurrentPrice""];
""3300_hasBooster"" [label=""hasBooster""];
""3300_doQuest"" [label=""doQuest""];
""3300_initData"" [label=""initData""];
""3300_buyMiner"" [label=""buyMiner""];
""3300_getBoosterData"" [label=""getBoosterData""];
""3300_buyCrystalDemand"" [label=""buyCrystalDemand""];
""3300_constructor"" [label=""constructor""];
""3300_getHighestUnitPriceIdxFromSell"" [label=""getHighestUnitPriceIdxFromSell""];
""3300_startNewRound"" [label=""startNewRound""];
""3300_getSellDemand"" [label=""getSellDemand""];
""3300_upgrade"" [label=""upgrade""];
""3300_getRandomNumber"" [label=""getRandomNumber""];
""3300_buyBooster"" [label=""buyBooster""];
""3300_fallback"" [label=""fallback""];
""3300_withdrawSellDemand"" [label=""withdrawSellDemand""];
""3300_withdrawBuyDemand"" -> ""3300_isNotOver"";
""3300_buyMiner"" -> ""3300_updateCrytal"";
""3300_sellCrystal"" -> ""3300_devFee"";
""3300_lottery"" -> ""3300_asyncSend"";
""3300_getPlayerData"" -> ""3300_hasBooster"";
""3300_buyBooster"" -> ""3300_isNotOver"";
""3300_sellCrystal"" -> ""3300_isCurrentRound"";
""3300_doQuest"" -> ""3300_isCurrentRound"";
""3300_buyCrystalDemand"" -> ""3300_getLowestUnitPriceIdxFromBuy"";
""3300_getHashratePerDay"" -> ""3300_addReferralHashrate"";
""3300_lottery"" -> ""3300_startNewRound"";
""3300_withdrawSellDemand"" -> ""3300_isNotOver"";
""3300_buyBooster"" -> ""3300_getCurrentLevel"";
""3300_updateRankList"" -> ""3300_quickSort"";
""3300_buyMiner"" -> ""3300_isNotOver"";
""3300_sellCrystalDemand"" -> ""3300_limitSell"";
""3300_buyCrystalDemand"" -> ""3300_asyncSend"";
""3300_startGame"" -> ""3300_startNewRound"";
""3300_sellCrystalDemand"" -> ""3300_isCurrentRound"";
""3300_becomeSponsor"" -> ""3300_getCurrentPrice"";
""3300_sellCrystal"" -> ""3300_asyncSend"";
""3300_buyMiner"" -> ""3300_isCurrentRound"";
""3300_sellCrystalDemand"" -> ""3300_isNotOver"";
""3300_getSponsorFee"" -> ""3300_getCurrentPrice"";
""3300_getBoosterData"" -> ""3300_getBoosterPrice"";
""3300_getFreeMiner"" -> ""3300_disableContract"";
""3300_getFreeMiner"" -> ""3300_isNotOver"";
""3300_getBoosterPrice"" -> ""3300_getCurrentPrice"";
""3300_buyBooster"" -> ""3300_updateCrytal"";
""3300_getHashratePerDay"" -> ""3300_hasBooster"";
""3300_getBoosterPrice"" -> ""3300_getCurrentLevel"";
""3300_withdrawBuyDemand"" -> ""3300_isCurrentRound"";
""3300_doQuest"" -> ""3300_disableContract"";
""3300_buyCrystalDemand"" -> ""3300_isNotOver"";
""3300_buyBooster"" -> ""3300_isCurrentRound"";
""3300_lottery"" -> ""3300_disableContract"";
""3300_updateRankList"" -> ""3300_inRankList"";
""3300_getPlayerData"" -> ""3300_addReferralHashrate"";
""3300_sellCrystal"" -> ""3300_isNotOver"";
""3300_buyCrystalDemand"" -> ""3300_isCurrentRound"";
""3300_withdrawSellDemand"" -> ""3300_isCurrentRound"";
""3300_buyMiner"" -> ""3300_updateHashrate"";
""3300_becomeSponsor"" -> ""3300_getSponsorFee"";
""3300_updateHashrate"" -> ""3300_updateRankList"";
""3300_quickSort"" -> ""3300_quickSort"";
""3300_buyBooster"" -> ""3300_devFee"";
""3300_buyBooster"" -> ""3300_getBoosterPrice"";
""3300_sellCrystal"" -> ""3300_updateCrytal"";
""3300_startNewRound"" -> ""3300_initData"";
""3300_doQuest"" -> ""3300_getRandomNumber"";
""3300_buyCrystal"" -> ""3300_asyncSend"";
""3300_becomeSponsor"" -> ""3300_isNotOver"";
""3300_sellCrystalDemand"" -> ""3300_getHighestUnitPriceIdxFromSell"";
""3300_sellCrystal"" -> ""3300_limitSell"";
""3300_sellCrystalDemand"" -> ""3300_updateCrytal"";
""3300_withdrawBuyDemand"" -> ""3300_asyncSend"";
""3300_updateCrytal"" -> ""3300_getHashratePerDay"";
""3300_becomeSponsor"" -> ""3300_asyncSend"";
""3300_buyCrystal"" -> ""3300_devFee"";
""3300_buyCrystal"" -> ""3300_isCurrentRound"";
""3300_buyCrystal"" -> ""3300_isNotOver"";
""3300_buyBooster"" -> ""3300_asyncSend"";
""3300_doQuest"" -> ""3300_isNotOver"";
}
"
0x5cac5ac21b93095490f736205df600fb4449aee1.sol,FazBitsCrowdsale,"contract FazBitsCrowdsale { uint public amountRaised; uint public resAmount; uint public soldTokens; mapping(address => uint256) public balanceOf; event GoalReached(address beneficiary, uint amountRaised); event FundTransfer(address backer, uint amount, bool isContribution); bool public crowdsaleClosed = false; bool public minimumTargetReached = false; address public beneficiary = 0x89464d51Af1C6edb2E116c28798C9A06e574d299; uint public price = 0.0015 ether; uint public minimumTarget = 100 * price; uint public maximumTarget = 250000 * price; uint public deadline = now + 10080 * 1 minutes; token public tokenReward = token(0xD8a19038Ca6d75227Ad5a5d7ec335a111ad6E141); function () payable { if (crowdsaleClosed || (maximumTarget - amountRaised) < msg.value) throw; uint amount = msg.value; balanceOf[msg.sender] += amount; amountRaised += amount; resAmount += amount; soldTokens += amount / price; tokenReward.transfer(msg.sender, amount / price); FundTransfer(msg.sender, amount, true); if (amountRaised >= minimumTarget && !minimumTargetReached) { minimumTargetReached = true; GoalReached(beneficiary, minimumTarget); }",1,"subgraph cluster_348_FazBitsCrowdsale {
label=""FazBitsCrowdsale"";
""348_returnTokens"" [label=""returnTokens""];
""348_safeWithdrawal"" [label=""safeWithdrawal""];
""348_fallback"" [label=""fallback""];
""348_closeCrowdsale"" [label=""closeCrowdsale""];
""348_devResWithdrawal"" [label=""devResWithdrawal""];
""348_checkTargetReached"" [label=""checkTargetReached""];
""348_devWithdrawal"" [label=""devWithdrawal""];
""348_safeWithdrawal"" -> ""348_afterDeadline"";
""348_checkTargetReached"" -> ""348_afterDeadline"";
""348_returnTokens"" -> ""348_afterDeadline"";
}
"
0xf2d54d17d3dc3810a0d62042a0b381df122ed162.sol,BeercoinICO,"contract BeercoinICO is GuardedBeercoinICO { Beercoin internal beercoin = Beercoin(0x7367A68039d4704f30BfBF6d948020C3B07DFC59); uint public constant price = 0.000006 ether; uint public constant softCap = 48 ether; uint public constant begin = 1526637600; uint public constant end = 1530395999; event FundTransfer(address backer, uint amount, bool isContribution); mapping(address => uint256) public balanceOf; uint public soldBeercoins = 0; uint public raisedEther = 0 ether; bool public paused = false; modifier isOpen { require(now >= begin && now <= end && !paused); _; }",1,"subgraph cluster_483_BeercoinICO {
label=""BeercoinICO"";
""483_withdraw"" [label=""withdraw""];
""483_transfer"" [label=""transfer""];
""483_pause"" [label=""pause""];
""483_resume"" [label=""resume""];
""483_fallback"" [label=""fallback""];
""483_claimFunds"" [label=""claimFunds""];
""483_claimBeercoins"" [label=""claimBeercoins""];
""483_fallback"" -> ""483_isOpen"";
""483_resume"" -> ""483_onlyOwner"";
""483_claimFunds"" -> ""483_goalReached"";
""483_transfer"" -> ""483_isOpen"";
""483_pause"" -> ""483_onlyOwner"";
""483_transfer"" -> ""483_onlyOwner"";
""483_claimFunds"" -> ""483_onlyOwner"";
""483_withdraw"" -> ""483_goalNotReached"";
""483_claimBeercoins"" -> ""483_onlyOwner"";
}
"
0xf17a9ad24372faaa27f0bb684e13413a3de84c4b.sol,SmokeCoinV_2,"contract SmokeCoinV_2 is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 200 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 150 * 1 days; uint256 public totalSupply = 754654e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 22220000000; uint public target0drop = 4222; uint public progress0drop = 0; address multisig = 0xb7Ef2B8514A27bf63e8F5397Fd6DBDCa95809883; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_SmokeCoinV_2 {
label=""SmokeCoinV_2"";
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_getTokens"" [label=""getTokens""];
""1263_transfer"" [label=""transfer""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_burn"" [label=""burn""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_constructor"" [label=""constructor""];
""1263_Distribute"" [label=""Distribute""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_approve"" [label=""approve""];
""1263_fallback"" [label=""fallback""];
""1263_allowance"" [label=""allowance""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_withdraw"" [label=""withdraw""];
""1263_add"" [label=""add""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_distr"" [label=""distr""];
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_getTokens"" -> ""1263_distr"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_constructor"" -> ""1263_distr"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
}
"
0x36cce24d6314445c11beb80f99f9f14b5ea9ecc2.sol,LynchpinPrivateICO,contract LynchpinPrivateICO is Ownable(0x1788A2Fe89a3Bfa58DB57aabbf1Ffa08ADED6cba) { using SafeMath for uint256; LynchpinToken public lynT = LynchpinToken(0xB0B1685f55843D03739c7D9b0A230F1B7DcF03D5); address public beneficiary = 0x1788A2Fe89a3Bfa58DB57aabbf1Ffa08ADED6cba; uint256 public tokeninOneEther; uint256 public maxTokensToSell = 2000000 * 10**18; uint256 public tokenSold; bool crowdsaleClosed = false; uint256 LOCK_PERIOD_START = 1556668800; uint256 LOCK_PERIOD_9_MONTH = 1580515200; uint256 LOCK_PERIOD_10_MONTH = 1583020800; uint256 LOCK_PERIOD_11_MONTH = 1585699200; uint256 LOCK_PERIOD_END = 1588291200; mapping(address => uint256) public tokensOwed; mapping(address => uint256) public ethContribution; mapping(address => bool) public isWhitelisted; event LogAddedToWhitelist(address indexed _contributor); event LogTokenRateUpdated(uint256 _newRate); event LogSaleClosed(); constructor(uint256 _tokeninOneEther) public { require (_tokeninOneEther > 0); isWhitelisted[owner] = true; tokeninOneEther = _tokeninOneEther; emit LogTokenRateUpdated(_tokeninOneEther); },1,"subgraph cluster_831_LynchpinPrivateICO {
label=""LynchpinPrivateICO"";
""831_withdrawMyTokens"" [label=""withdrawMyTokens""];
""831_constructor"" [label=""constructor""];
""831_fallback"" [label=""fallback""];
""831_closeSale"" [label=""closeSale""];
""831_updateTokenRate"" [label=""updateTokenRate""];
""831_addContributor"" [label=""addContributor""];
""831_withdrawPenaltyTokens"" [label=""withdrawPenaltyTokens""];
""831_addContributor"" -> ""831_onlyOwner"";
""831_withdrawPenaltyTokens"" -> ""831_onlyOwner"";
""831_closeSale"" -> ""831_onlyOwner"";
""831_updateTokenRate"" -> ""831_onlyOwner"";
}
"
0xe34cae5cdc42afd4c68727a936908918b5faa675.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1100_MiniMeToken {
label=""MiniMeToken"";
""1100_generateTokens"" [label=""generateTokens""];
""1100_approveAndCall"" [label=""approveAndCall""];
""1100_destroyTokens"" [label=""destroyTokens""];
""1100_balanceOf"" [label=""balanceOf""];
""1100_allowance"" [label=""allowance""];
""1100_transfer"" [label=""transfer""];
""1100_MiniMeToken"" [label=""MiniMeToken""];
""1100_balanceOfAt"" [label=""balanceOfAt""];
""1100_updateValueAtNow"" [label=""updateValueAtNow""];
""1100_claimTokens"" [label=""claimTokens""];
""1100_isContract"" [label=""isContract""];
""1100_transferFrom"" [label=""transferFrom""];
""1100_getValueAt"" [label=""getValueAt""];
""1100_doTransfer"" [label=""doTransfer""];
""1100_totalSupply"" [label=""totalSupply""];
""1100_approve"" [label=""approve""];
""1100_totalSupplyAt"" [label=""totalSupplyAt""];
""1100_enableTransfers"" [label=""enableTransfers""];
""1100_min"" [label=""min""];
""1100_fallback"" [label=""fallback""];
""1100_createCloneToken"" [label=""createCloneToken""];
""1100_transfer"" -> ""1100_doTransfer"";
""1100_enableTransfers"" -> ""1100_onlyController"";
""1100_balanceOfAt"" -> ""1100_min"";
""1100_generateTokens"" -> ""1100_onlyController"";
""1100_generateTokens"" -> ""1100_updateValueAtNow"";
""1100_destroyTokens"" -> ""1100_balanceOf"";
""1100_destroyTokens"" -> ""1100_updateValueAtNow"";
""1100_doTransfer"" -> ""1100_updateValueAtNow"";
""1100_totalSupplyAt"" -> ""1100_getValueAt"";
""1100_totalSupplyAt"" -> ""1100_min"";
""1100_generateTokens"" -> ""1100_balanceOf"";
""1100_approveAndCall"" -> ""1100_approve"";
""1100_fallback"" -> ""1100_isContract"";
""1100_approve"" -> ""1100_isContract"";
""1100_transferFrom"" -> ""1100_doTransfer"";
""1100_totalSupply"" -> ""1100_totalSupplyAt"";
""1100_claimTokens"" -> ""1100_onlyController"";
""1100_doTransfer"" -> ""1100_isContract"";
""1100_balanceOfAt"" -> ""1100_getValueAt"";
""1100_destroyTokens"" -> ""1100_totalSupply"";
""1100_balanceOf"" -> ""1100_balanceOfAt"";
""1100_destroyTokens"" -> ""1100_onlyController"";
""1100_generateTokens"" -> ""1100_totalSupply"";
""1100_doTransfer"" -> ""1100_balanceOfAt"";
}
"
0x708a64eba17df26cd7085c494b725160ba1a6b7d.sol,ConditionalEscrow,contract ConditionalEscrow is Escrow { function withdrawalAllowed(address _payee) public view returns (bool); function withdraw(address _payee) public { require(withdrawalAllowed(_payee)); super.withdraw(_payee); },1,"subgraph cluster_2092_ConditionalEscrow {
label=""ConditionalEscrow"";
""2092_withdrawalAllowed"" [label=""withdrawalAllowed""];
""2092_withdraw"" [label=""withdraw""];
""2092_withdraw"" -> ""2092_withdraw"";
""2092_withdraw"" -> ""2092_withdrawalAllowed"";
}
"
0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_2222_RefundVault {
label=""RefundVault"";
""2222_refund"" [label=""refund""];
""2222_enableRefunds"" [label=""enableRefunds""];
""2222_deposit"" [label=""deposit""];
""2222_close"" [label=""close""];
""2222_RefundVault"" [label=""RefundVault""];
""2222_deposit"" -> ""2222_onlyOwner"";
""2222_close"" -> ""2222_onlyOwner"";
""2222_enableRefunds"" -> ""2222_onlyOwner"";
}
"
0x6b9c8c4e246f43cac225a64aee0c50434e61d7a4.sol,Equio,"contract Equio { mapping (address => uint256) public balances; bool public bought_tokens; uint256 public time_bought; uint256 public contract_eth_value; bool public kill_switch; address public creator; string name; address public sale; ERC20 public token; bytes32 password_hash; uint256 earliest_buy_block; uint256 earliest_buy_time; function Equio( string _name, address _sale, address _token, bytes32 _password_hash, uint256 _earliest_buy_block, uint256 _earliest_buy_time ) payable { creator = msg.sender; name = _name; sale = _sale; token = ERC20(_token); password_hash = _password_hash; earliest_buy_block = _earliest_buy_block; earliest_buy_time = _earliest_buy_time; }",1,"subgraph cluster_332_EquioGenesis {
label=""EquioGenesis"";
""332_generate"" [label=""generate""];
}
"
0xf3cb4203e10f205c6bc91d8b0974eee520af6412.sol,D_Quiz,contract D_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_D_Quiz {
label=""D_Quiz"";
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x64d581770b541b5609140232fc12f47bbe0fe6bc.sol,MonetoSale,"contract MonetoSale { Moneto public token; address public beneficiary; address public alfatokenteam; uint public alfatokenFee; uint public amountRaised; uint public tokenSold; uint public constant PRE_SALE_START = 1523952000; uint public constant PRE_SALE_END = 1526543999; uint public constant SALE_START = 1528617600; uint public constant SALE_END = 1531209599; uint public constant PRE_SALE_MAX_CAP = 2531250 * 10**18; uint public constant SALE_MAX_CAP = 300312502 * 10**17; uint public constant SALE_MIN_CAP = 2500 ether; uint public constant PRE_SALE_PRICE = 1250; uint public constant SALE_PRICE = 1000; uint public constant PRE_SALE_MIN_BUY = 10 * 10**18; uint public constant SALE_MIN_BUY = 1 * 10**18; uint public constant PRE_SALE_1WEEK_BONUS = 35; uint public constant PRE_SALE_2WEEK_BONUS = 15; uint public constant PRE_SALE_3WEEK_BONUS = 5; uint public constant PRE_SALE_4WEEK_BONUS = 0; uint public constant SALE_1WEEK_BONUS = 10; uint public constant SALE_2WEEK_BONUS = 7; uint public constant SALE_3WEEK_BONUS = 5; uint public constant SALE_4WEEK_BONUS = 3; mapping (address => uint) public icoBuyers; Stages public stage; enum Stages { Deployed, Ready, Ended, Canceled }",1,"subgraph cluster_1216_MonetoSale {
label=""MonetoSale"";
""1216_endSale"" [label=""endSale""];
""1216_transferEther"" [label=""transferEther""];
""1216_takeEtherBack"" [label=""takeEtherBack""];
""1216_cancelSale"" [label=""cancelSale""];
""1216_setup"" [label=""setup""];
""1216_getPrice"" [label=""getPrice""];
""1216_fallback"" [label=""fallback""];
""1216_proxyTakeEtherBack"" [label=""proxyTakeEtherBack""];
""1216_getMinimumAmount"" [label=""getMinimumAmount""];
""1216_getBonus"" [label=""getBonus""];
""1216_MonetoSale"" [label=""MonetoSale""];
""1216_transferFee"" [label=""transferFee""];
""1216_setup"" -> ""1216_isOwner"";
""1216_proxyTakeEtherBack"" -> ""1216_atStage"";
""1216_takeEtherBack"" -> ""1216_atStage"";
""1216_setup"" -> ""1216_atStage"";
""1216_transferEther"" -> ""1216_isOwner"";
""1216_fallback"" -> ""1216_getMinimumAmount"";
""1216_fallback"" -> ""1216_atStage"";
""1216_takeEtherBack"" -> ""1216_proxyTakeEtherBack"";
""1216_endSale"" -> ""1216_isOwner"";
""1216_fallback"" -> ""1216_getPrice"";
""1216_fallback"" -> ""1216_getBonus"";
}
"
0xd0d6b03cb90ec013c6a00ff60e30c3a350c1df94.sol,NamiMultiSigWallet,"contract NamiMultiSigWallet { uint constant public MAX_OWNER_COUNT = 50; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1149_NamiMultiSigWallet {
label=""NamiMultiSigWallet"";
""1149_confirmTransaction"" [label=""confirmTransaction""];
""1149_isOwner"" [label=""isOwner""];
""1149_changeRequirement"" [label=""changeRequirement""];
""1149_executeTransaction"" [label=""executeTransaction""];
""1149_isConfirmed"" [label=""isConfirmed""];
""1149_addOwner"" [label=""addOwner""];
""1149_removeOwner"" [label=""removeOwner""];
""1149_fallback"" [label=""fallback""];
""1149_getTransactionCount"" [label=""getTransactionCount""];
""1149_revokeConfirmation"" [label=""revokeConfirmation""];
""1149_getConfirmations"" [label=""getConfirmations""];
""1149_getOwners"" [label=""getOwners""];
""1149_submitTransaction"" [label=""submitTransaction""];
""1149_constructor"" [label=""constructor""];
""1149_getConfirmationCount"" [label=""getConfirmationCount""];
""1149_getTransactionIds"" [label=""getTransactionIds""];
""1149_addTransaction"" [label=""addTransaction""];
""1149_replaceOwner"" [label=""replaceOwner""];
""1149_revokeConfirmation"" -> ""1149_notExecuted"";
""1149_submitTransaction"" -> ""1149_confirmTransaction"";
""1149_executeTransaction"" -> ""1149_isConfirmed"";
""1149_replaceOwner"" -> ""1149_ownerExists"";
""1149_revokeConfirmation"" -> ""1149_confirmed"";
""1149_executeTransaction"" -> ""1149_notExecuted"";
""1149_changeRequirement"" -> ""1149_onlyWallet"";
""1149_revokeConfirmation"" -> ""1149_ownerExists"";
""1149_confirmTransaction"" -> ""1149_ownerExists"";
""1149_addTransaction"" -> ""1149_notNull"";
""1149_confirmTransaction"" -> ""1149_transactionExists"";
""1149_addOwner"" -> ""1149_validRequirement"";
""1149_addOwner"" -> ""1149_onlyWallet"";
""1149_confirmTransaction"" -> ""1149_notConfirmed"";
""1149_changeRequirement"" -> ""1149_validRequirement"";
""1149_addOwner"" -> ""1149_ownerDoesNotExist"";
""1149_removeOwner"" -> ""1149_changeRequirement"";
""1149_removeOwner"" -> ""1149_onlyWallet"";
""1149_constructor"" -> ""1149_validRequirement"";
""1149_replaceOwner"" -> ""1149_onlyWallet"";
""1149_addOwner"" -> ""1149_notNull"";
""1149_submitTransaction"" -> ""1149_addTransaction"";
""1149_confirmTransaction"" -> ""1149_executeTransaction"";
""1149_replaceOwner"" -> ""1149_ownerDoesNotExist"";
""1149_removeOwner"" -> ""1149_ownerExists"";
}
"
0x707f0612cbbfa02284e02b0010b4f859bb7308ec.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_3237_DistributorRefundVault {
label=""DistributorRefundVault"";
""3237_DistributorRefundVault"" [label=""DistributorRefundVault""];
""3237_close"" [label=""close""];
""3237_taxValue"" [label=""taxValue""];
""3237_close"" -> ""3237_onlyOwner"";
""3237_DistributorRefundVault"" -> ""3237_RefundVault"";
}
"
0x1d86a854da490ff74dedc7abe281fb468f8c19ee.sol,MultiVesting,"contract MultiVesting is Ownable, Destroyable { using SafeMath for uint256; struct Beneficiary { string description; uint256 vested; uint256 released; uint256 start; uint256 cliff; uint256 duration; bool revoked; bool revocable; bool isBeneficiary; }",1,"subgraph cluster_903_MultiVesting {
label=""MultiVesting"";
""903_vestedAmount"" [label=""vestedAmount""];
""903_Balance"" [label=""Balance""];
""903_MultiVesting"" [label=""MultiVesting""];
""903_destroyBeneficiary"" [label=""destroyBeneficiary""];
""903_releasableAmount"" [label=""releasableAmount""];
""903_flushEth"" [label=""flushEth""];
""903_beneficiariesLength"" [label=""beneficiariesLength""];
""903_revoke"" [label=""revoke""];
""903_releaseTo"" [label=""releaseTo""];
""903_destroy"" [label=""destroy""];
""903_addBeneficiary"" [label=""addBeneficiary""];
""903_release"" [label=""release""];
""903_clearAll"" [label=""clearAll""];
""903_fallback"" [label=""fallback""];
""903_release"" -> ""903_release"";
""903_clearAll"" -> ""903_onlyOwner"";
""903_addBeneficiary"" -> ""903_onlyOwner"";
""903_destroy"" -> ""903_onlyOwner"";
""903_release"" -> ""903_releasableAmount"";
""903_fallback"" -> ""903_release"";
""903_releasableAmount"" -> ""903_vestedAmount"";
""903_flushEth"" -> ""903_onlyOwner"";
""903_releaseTo"" -> ""903_onlyOwner"";
""903_release"" -> ""903_isBeneficiary"";
""903_revoke"" -> ""903_releasableAmount"";
""903_addBeneficiary"" -> ""903_isNotBeneficiary"";
""903_destroyBeneficiary"" -> ""903_onlyOwner"";
""903_releaseTo"" -> ""903_release"";
""903_revoke"" -> ""903_onlyOwner"";
}
"
0x5a779aaeb53d2cba1755442c38dd6721c0cb31d0.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_335_RefundVault {
label=""RefundVault"";
""335_RefundVault"" [label=""RefundVault""];
""335_deposit"" [label=""deposit""];
""335_enableRefunds"" [label=""enableRefunds""];
""335_refund"" [label=""refund""];
""335_close"" [label=""close""];
""335_close"" -> ""335_onlyOwner"";
""335_enableRefunds"" -> ""335_onlyOwner"";
""335_deposit"" -> ""335_onlyOwner"";
}
"
0xee7477b1c42d173c0791cecf2592f6a8a4c16b0a.sol,BiddingBase,"contract BiddingBase is Pausable { uint40 public minTime = 60*10; uint public minBid = 50 finney - 1 szabo; address public operatorAddress; mapping(address => uint) public pendingReturns; uint public totalReturns; event Withdraw(address indexed bidder, uint256 value); function withdraw() public { uint amount = pendingReturns[msg.sender]; require (amount > 0); totalReturns -= amount; pendingReturns[msg.sender] -= amount; msg.sender.transfer(amount); emit Withdraw(msg.sender, amount); }",1,"subgraph cluster_277_BiddingBase {
label=""BiddingBase"";
""277_isContract"" [label=""isContract""];
""277_destroyContract"" [label=""destroyContract""];
""277_withdraw"" [label=""withdraw""];
""277_withdrawEthFromBalance"" [label=""withdrawEthFromBalance""];
""277_setOperator"" [label=""setOperator""];
""277_setMinTime"" [label=""setMinTime""];
""277_setMinBid"" [label=""setMinBid""];
""277_setOperator"" -> ""277_onlyOwner"";
""277_setMinBid"" -> ""277_onlyOwner"";
""277_destroyContract"" -> ""277_onlyOwner"";
""277_setMinTime"" -> ""277_onlyOwner"";
""277_withdrawEthFromBalance"" -> ""277_onlyOwner"";
}
"
0x46822ac3bc32db7ebd9845da3fe0886f824e9edf.sol,EBSCSale,"contract EBSCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 6000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; EBSCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1561_EBSCSale {
label=""EBSCSale"";
""1561_checkFundingCap"" [label=""checkFundingCap""];
""1561_checkFundingGoal"" [label=""checkFundingGoal""];
""1561_terminate"" [label=""terminate""];
""1561_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1561_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1561_convertToMiniEbsc"" [label=""convertToMiniEbsc""];
""1561_EBSCSale"" [label=""EBSCSale""];
""1561_changeStartTime"" [label=""changeStartTime""];
""1561_changeEndTime"" [label=""changeEndTime""];
""1561_fallback"" [label=""fallback""];
""1561_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1561_safeWithdrawal"" [label=""safeWithdrawal""];
""1561_setRate"" [label=""setRate""];
""1561_currentTime"" [label=""currentTime""];
""1561_fallback"" -> ""1561_afterStartTime"";
""1561_changeStartTime"" -> ""1561_onlyOwner"";
""1561_ownerAllocateTokens"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_nonReentrant"";
""1561_changeEndTime"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_beforeDeadline"";
""1561_ownerUnlockFund"" -> ""1561_onlyOwner"";
""1561_terminate"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_checkFundingCap"";
""1561_ownerUnlockFund"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_whenNotPaused"";
""1561_safeWithdrawal"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_checkFundingGoal"";
""1561_setRate"" -> ""1561_onlyOwner"";
""1561_EBSCSale"" -> ""1561_setRate"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingGoal"";
""1561_ownerAllocateTokens"" -> ""1561_onlyOwner"";
""1561_safeWithdrawal"" -> ""1561_nonReentrant"";
""1561_ownerSafeWithdrawal"" -> ""1561_onlyOwner"";
""1561_ownerSafeWithdrawal"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_saleNotClosed"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingCap"";
}
"
0x1fbf025ad94dde79f88732f79966a9a435f2772f.sol,BLITZQUIZ,contract BLITZQUIZ { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_BLITZQUIZ {
label=""BLITZQUIZ"";
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
}
"
0x40ef62929748b3e045fd2036322880ef486e4454.sol,IQ_GAME,contract IQ_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_IQ_GAME {
label=""IQ_GAME"";
""118_StopGame"" [label=""StopGame""];
""118_Play"" [label=""Play""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_fallback"" [label=""fallback""];
}
"
0x70785fec3fad3a3f855d939b74be05fca3ee9d7b.sol,f_game,contract f_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_f_game {
label=""f_game"";
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_constructor"" [label=""constructor""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x03eff7f353aeebea3ac5f23a6e9e844581ff5ef8.sol,PLAY_iQuiz,contract PLAY_iQuiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_PLAY_iQuiz {
label=""PLAY_iQuiz"";
""148_constructor"" [label=""constructor""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xdf4b22695eeb4a7a1cf9a42162285ce782b8427a.sol,Token,contract Token is TokenI { using SafeMath for uint256; string public techProvider = ; address public owner; struct FreezeInfo { address user; uint256 amount; },1,"subgraph cluster_1186_Token {
label=""Token"";
""1186_enableTransfers"" [label=""enableTransfers""];
""1186_balanceOf"" [label=""balanceOf""];
""1186_transfer"" [label=""transfer""];
""1186_transferMulti"" [label=""transferMulti""];
""1186_unFreeze"" [label=""unFreeze""];
""1186_destroyTokens"" [label=""destroyTokens""];
""1186_isContract"" [label=""isContract""];
""1186_freeze"" [label=""freeze""];
""1186_approve"" [label=""approve""];
""1186_generateTokens"" [label=""generateTokens""];
""1186_transferFrom"" [label=""transferFrom""];
""1186_approveAndCall"" [label=""approveAndCall""];
""1186_Token"" [label=""Token""];
""1186_claimTokens"" [label=""claimTokens""];
""1186_fallback"" [label=""fallback""];
""1186_changeOwner"" [label=""changeOwner""];
""1186_approveAndCall"" -> ""1186_approve"";
""1186_changeOwner"" -> ""1186_onlyOwner"";
""1186_approve"" -> ""1186_moreThanZero"";
""1186_claimTokens"" -> ""1186_onlyController"";
""1186_fallback"" -> ""1186_isContract"";
""1186_freeze"" -> ""1186_moreThanZero"";
""1186_transfer"" -> ""1186_realUser"";
""1186_transferFrom"" -> ""1186_realUser"";
""1186_transferFrom"" -> ""1186_moreThanZero"";
""1186_unFreeze"" -> ""1186_onlyOwner"";
""1186_destroyTokens"" -> ""1186_onlyOwner"";
""1186_transfer"" -> ""1186_moreThanZero"";
""1186_generateTokens"" -> ""1186_onlyController"";
""1186_enableTransfers"" -> ""1186_onlyOwner"";
""1186_freeze"" -> ""1186_onlyController"";
}
"
0x70fa6e7cf0ecf0e97415f3abbbc8eb67e0c2c588.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MyAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_657_MyAdvancedToken {
label=""MyAdvancedToken"";
""657_freezeAccount"" [label=""freezeAccount""];
""657_sell"" [label=""sell""];
""657_getEth"" [label=""getEth""];
""657_MyAdvancedToken"" [label=""MyAdvancedToken""];
""657_mintToken"" [label=""mintToken""];
""657__transfer"" [label=""_transfer""];
""657_setPrices"" [label=""setPrices""];
""657_buy"" [label=""buy""];
""657_selfdestructs"" [label=""selfdestructs""];
""657_fallback"" [label=""fallback""];
""657_mintToken"" -> ""657_onlyOwner"";
""657_buy"" -> ""657__transfer"";
""657_MyAdvancedToken"" -> ""657_TokenERC20"";
""657_fallback"" -> ""657__transfer"";
""657_sell"" -> ""657__transfer"";
""657_setPrices"" -> ""657_onlyOwner"";
""657_freezeAccount"" -> ""657_onlyOwner"";
}
"
0x791af5fcb5198c9f469d66b934864dab43d7f044.sol,Verus,"contract Verus is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 1000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 200000e18; uint public target0drop = 5000; uint public progress0drop = 0; address multisig = 0xCC1967c9EF99848803bc744e881eF84F59CE2b34 ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Verus {
label=""Verus"";
""1261_add"" [label=""add""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_burn"" [label=""burn""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_constructor"" [label=""constructor""];
""1261_getTokens"" [label=""getTokens""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_approve"" [label=""approve""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_fallback"" [label=""fallback""];
""1261_withdraw"" [label=""withdraw""];
""1261_allowance"" [label=""allowance""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_distr"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_fallback"" -> ""1261_getTokens"";
}
"
0xd16dfe7a7f447b00122a01efd5acb99a7aee7c04.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 300000000; uint256 public buyPrice = 2000; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public { }",1,"subgraph cluster_636_EncryptedToken {
label=""EncryptedToken"";
""636_getEth"" [label=""getEth""];
""636_selfdestructs"" [label=""selfdestructs""];
""636_mintToken"" [label=""mintToken""];
""636_fallback"" [label=""fallback""];
""636_freezeAccount"" [label=""freezeAccount""];
""636_buy"" [label=""buy""];
""636__transfer"" [label=""_transfer""];
""636_setPrices"" [label=""setPrices""];
""636_EncryptedToken"" [label=""EncryptedToken""];
""636_balanceOfa"" [label=""balanceOfa""];
""636_freezeAccount"" -> ""636_onlyOwner"";
""636_selfdestructs"" -> ""636_onlyOwner"";
""636_mintToken"" -> ""636_onlyOwner"";
""636_buy"" -> ""636__transfer"";
""636_setPrices"" -> ""636_onlyOwner"";
""636_EncryptedToken"" -> ""636_TokenERC20"";
""636_fallback"" -> ""636__transfer"";
}
"
0x75cb629408d1ea387df0a1f755e0bc371a5fa036.sol,GoodLuckCasino,"contract GoodLuckCasino is Ownable{ using SafeMath for uint; event LOG_Deposit(bytes32 userID, address walletAddr, uint amount); event LOG_Withdraw(address user, uint amount); event LOG_Bankroll(address sender, uint value); event LOG_OwnerWithdraw(address _to, uint _val); event LOG_ContractStopped(); event LOG_ContractResumed(); bool public isStopped; mapping (bytes32 => uint[]) depositList; modifier onlyIfNotStopped { require(!isStopped); _; }",1,"subgraph cluster_429_GoodLuckCasino {
label=""GoodLuckCasino"";
""429_userWithdraw"" [label=""userWithdraw""];
""429_bankroll"" [label=""bankroll""];
""429_ownerWithdraw"" [label=""ownerWithdraw""];
""429_getUserDeposit"" [label=""getUserDeposit""];
""429_resumeContract"" [label=""resumeContract""];
""429_stopContract"" [label=""stopContract""];
""429_userDeposit"" [label=""userDeposit""];
""429_constructor"" [label=""constructor""];
""429_fallback"" [label=""fallback""];
""429_getUserDepositList"" [label=""getUserDepositList""];
""429_ownerWithdraw"" -> ""429_onlyOwner"";
""429_userWithdraw"" -> ""429_onlyOwner"";
""429_stopContract"" -> ""429_onlyIfNotStopped"";
""429_userWithdraw"" -> ""429_onlyIfNotStopped"";
""429_bankroll"" -> ""429_onlyOwner"";
""429_stopContract"" -> ""429_onlyOwner"";
""429_resumeContract"" -> ""429_onlyIfStopped"";
""429_userDeposit"" -> ""429_onlyIfNotStopped"";
""429_resumeContract"" -> ""429_onlyOwner"";
}
"
0x219e0b7c4868add72a913eef492c228cd1f45cdd.sol,Firextoken,"contract Firextoken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 200 * 1 days; uint public round2 = now + 75 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 12000000000000000; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 1104000000000; uint public target0drop = 4500; uint public progress0drop = 0; address multisig = 0x0A8961D531805c7ABB4442123c1b08064dA705Ac; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_Firextoken {
label=""Firextoken"";
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_add"" [label=""add""];
""1263_Distribute"" [label=""Distribute""];
""1263_constructor"" [label=""constructor""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_fallback"" [label=""fallback""];
""1263_distr"" [label=""distr""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_transfer"" [label=""transfer""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_burn"" [label=""burn""];
""1263_getTokens"" [label=""getTokens""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_approve"" [label=""approve""];
""1263_withdraw"" [label=""withdraw""];
""1263_allowance"" [label=""allowance""];
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_distr"";
""1263_distr"" -> ""1263_canDistr"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_constructor"" -> ""1263_distr"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_getTokens"" -> ""1263_canDistr"";
}
"
0xf2f13b50e63454a5ce255f8355285561c13bb3cc.sol,BNCXCrowdsale,"contract BNCXCrowdsale { Token public tokenReward; address public creator; address public owner = 0x516A2F56A6a8f9A34AbF86C877d0252dC94AAA69; uint256 public startDate; uint256 public endDate; event FundTransfer(address backer, uint amount); constructor() public { creator = msg.sender; startDate = 1544832000; endDate = 1521331200; tokenReward = Token(0x5129bdfF6B065ce57cC7E7349bA681a0aC1D00cd); }",1,"subgraph cluster_273_BNCXCrowdsale {
label=""BNCXCrowdsale"";
""273_setEndtDate"" [label=""setEndtDate""];
""273_kill"" [label=""kill""];
""273_fallback"" [label=""fallback""];
""273_setOwner"" [label=""setOwner""];
""273_setCreator"" [label=""setCreator""];
""273_sendToken"" [label=""sendToken""];
""273_constructor"" [label=""constructor""];
""273_setToken"" [label=""setToken""];
""273_setStartDate"" [label=""setStartDate""];
}
"
0xe3ac32bbf9e3661c3aff4ee2f80706abaf7c7ea6.sol,Dividend,contract Dividend { struct Record { uint balance; uint shares; uint index; },1,"subgraph cluster_301_Dividend {
label=""Dividend"";
""301_Dividend"" [label=""Dividend""];
""301_invest"" [label=""invest""];
""301_withdraw"" [label=""withdraw""];
""301_investorCount"" [label=""investorCount""];
""301_fallback"" [label=""fallback""];
""301_allocateShares"" [label=""allocateShares""];
""301_Dividend"" -> ""301_allocateShares"";
""301_fallback"" -> ""301_withdraw"";
""301_fallback"" -> ""301_invest"";
""301_invest"" -> ""301_allocateShares"";
}
"
0x184c8624d79f41eff9b3a702737ee86eeef80e67.sol,EthMonsters,contract EthMonsters { address public owner; event BuyMonsterEvent( uint price ); uint public typesNumber = 0; uint public monstersNumber = 0; mapping (address => uint) public userMonstersCount; mapping (address => uint) goodContracts; monster[] public monsters; mapping (uint => address) public monsterToOwner; mapping (address => uint) public userBalance; mapping (address => uint[]) public userToMonsters; uint public contractFees = 0; monsterType[] public types; constructor() public { owner = msg.sender; },1,"subgraph cluster_873_EthMonsters {
label=""EthMonsters"";
""873_addNewType"" [label=""addNewType""];
""873_random"" [label=""random""];
""873_buyMonster"" [label=""buyMonster""];
""873_getType"" [label=""getType""];
""873_getMonster"" [label=""getMonster""];
""873_transferMonster"" [label=""transferMonster""];
""873_sendEarnings"" [label=""sendEarnings""];
""873_addGoodContract"" [label=""addGoodContract""];
""873_addExpToMonster"" [label=""addExpToMonster""];
""873_withdraw"" [label=""withdraw""];
""873_constructor"" [label=""constructor""];
""873_changeMonsterName"" [label=""changeMonsterName""];
""873_withdrawFees"" [label=""withdrawFees""];
""873_removeGoodContract"" [label=""removeGoodContract""];
""873_createMonster"" [label=""createMonster""];
""873_getUserMonster"" [label=""getUserMonster""];
""873_getUserMonstersCount"" [label=""getUserMonstersCount""];
""873_hatchEgg"" [label=""hatchEgg""];
""873_buyMonster"" -> ""873_random"";
""873_removeGoodContract"" -> ""873_onlyOwner"";
""873_changeMonsterName"" -> ""873_allowedContract"";
""873_buyMonster"" -> ""873_createMonster"";
""873_addExpToMonster"" -> ""873_allowedContract"";
""873_hatchEgg"" -> ""873_allowedContract"";
""873_transferMonster"" -> ""873_allowedContract"";
""873_addGoodContract"" -> ""873_onlyOwner"";
""873_withdrawFees"" -> ""873_onlyOwner"";
""873_buyMonster"" -> ""873_sendEarnings"";
""873_addNewType"" -> ""873_onlyOwner"";
}
"
0x05b04cb2c29691d3f9ce74e6aa3c69548da3bee2.sol,EtherStateEquivalentToken,contract EtherStateEquivalentToken { address public owner; mapping (address => uint256) public tokenBalance; mapping (address => uint256) public refBalance; uint256 public tokenPrice = 0.0004 ether; uint256 public tokenSupply = 0; uint256 constant public softCap = 2500000 ether; uint256 constant public hardCap = 10000000 ether; uint256 public start; uint256 public softCapMoment = 0; uint256 public softCapPeriod = 1483300; uint256 public hardCapPeriod = softCapPeriod; uint256 public investedTotal = 0; bool public softCapReached = false; modifier onlyOwner { require(msg.sender == owner); _; },1,"subgraph cluster_614_EtherStateEquivalentToken {
label=""EtherStateEquivalentToken"";
""614_constructor"" [label=""constructor""];
""614_transfer"" [label=""transfer""];
""614_invest"" [label=""invest""];
""614_deinvest"" [label=""deinvest""];
""614_fallback"" [label=""fallback""];
""614_withdraw"" [label=""withdraw""];
""614_withdrawAmountTo"" [label=""withdrawAmountTo""];
""614_buy"" [label=""buy""];
""614_withdrawAmount"" [label=""withdrawAmount""];
""614_goESM"" [label=""goESM""];
""614_fallback"" -> ""614_invest"";
""614_buy"" -> ""614_invest"";
""614_deinvest"" -> ""614_softCapFailed"";
}
"
0x50ec4b1f8434020e2d896c9cfb8a20d63af6136d.sol,Snip3D,contract Snip3D is Owned { using SafeMath for uint; uint public _totalSupply; mapping(address => uint256)public balances; mapping(address => uint256)public bullets; mapping(uint256 => address)public formation; uint256 public nextFormation; mapping(address => uint256)public lastMove; mapping(uint256 => address) public RefundWaitingLine; uint256 public NextInLine; uint256 public NextAtLineEnd; uint256 public Refundpot; uint256 public blocksBeforeSemiRandomShoot = 10; uint256 public blocksBeforeTargetShoot = 40; constructor() public { },1,"subgraph cluster_957_Snip3D {
label=""Snip3D"";
""957_fetchdivs"" [label=""fetchdivs""];
""957_constructor"" [label=""constructor""];
""957_Payoutnextrefund"" [label=""Payoutnextrefund""];
""957_P3DDivstocontract"" [label=""P3DDivstocontract""];
""957_amountofp3d"" [label=""amountofp3d""];
""957_shootTarget"" [label=""shootTarget""];
""957_disburse"" [label=""disburse""];
""957_die"" [label=""die""];
""957_dividendsOwing"" [label=""dividendsOwing""];
""957_changevanity"" [label=""changevanity""];
""957_shootSemiRandom"" [label=""shootSemiRandom""];
""957_sendInSoldier"" [label=""sendInSoldier""];
""957_harvestabledivs"" [label=""harvestabledivs""];
""957_fallback"" [label=""fallback""];
""957_sendInSoldier"" -> ""957_updateAccount"";
""957_shootTarget"" -> ""957_isAlive"";
""957_die"" -> ""957_onlyOwner"";
""957_shootSemiRandom"" -> ""957_fetchdivs"";
""957_P3DDivstocontract"" -> ""957_harvestabledivs"";
""957_shootTarget"" -> ""957_harvestabledivs"";
""957_fetchdivs"" -> ""957_updateAccount"";
""957_shootSemiRandom"" -> ""957_isAlive"";
""957_shootTarget"" -> ""957_fetchdivs"";
}
"
0xd37a7e9d4681da273e13d652ed9a789274d32bd7.sol,LUPXSale,"contract LUPXSale { IERC20Token public tokenContract ; address owner ; uint256 public tokensSold ; uint256 public LUPXPrice ; event sold(address buyer, uint256 amount) ; event priceAdjusted(uint256 oldPrice, uint256 newPrice) ; event endOfSale(uint256 timeStamp) ; constructor(IERC20Token _tokenContract, uint256 LUPXperETH) public { owner = msg.sender ; tokenContract = _tokenContract ; LUPXPrice = LUPXperETH ; }",1,"subgraph cluster_241_LUPXSale {
label=""LUPXSale"";
""241_fallback"" [label=""fallback""];
""241_endLUPXSale"" [label=""endLUPXSale""];
""241_constructor"" [label=""constructor""];
""241_safeMultiply"" [label=""safeMultiply""];
""241_withdrawETH"" [label=""withdrawETH""];
""241_withdrawETH"" -> ""241_onlyOwner"";
""241_endLUPXSale"" -> ""241_onlyOwner"";
""241_fallback"" -> ""241_safeMultiply"";
}
"
0xd7b45e0cdae4c65ef2c7e19152eeb3074e20f98f.sol,Owned,contract Owned { address internal _owner; function Owned() public { _owner = msg.sender; },1,"subgraph cluster_164_Owned {
label=""Owned"";
""164_Owned"" [label=""Owned""];
""164_kill"" [label=""kill""];
""164_fallback"" [label=""fallback""];
""164_harvest"" [label=""harvest""];
""164_kill"" -> ""164_onlyOwner"";
""164_harvest"" -> ""164_onlyOwner"";
}
"
0x714c1ef3854591d4118bd6887d4740bc4d5f5412.sol,KaasyToken,"contract KaasyToken is ERC20Interface, Pausable, SafeMath { string public symbol = ; string public name = ; uint8 public decimals = 18; uint public _totalSupply; uint public startDate; uint public bonusEnd20; uint public bonusEnd10; uint public bonusEnd05; uint public endDate; uint public tradingDate; uint public exchangeRate = 25000; uint256 public maxSupply; uint256 public soldSupply; uint256 public maxSellable; uint8 private teamWOVestingPercentage = 5; uint256 public minAmountETH; uint256 public maxAmountETH; address public currentRunningAddress; mapping(address => uint256) balances; mapping(address => uint256) ethDeposits; mapping(address => bool) kycAddressState; mapping(address => mapping(address => uint256)) allowed; mapping(address => uint256) burnedBalances; event MintingFinished(uint indexed moment); bool isMintingFinished = false; event OwnBlockchainLaunched(uint indexed moment); event TokensBurned(address indexed exOwner, uint256 indexed amount, uint indexed moment); bool isOwnBlockchainLaunched = false; uint momentOwnBlockchainLaunched = 0; uint8 public versionIndex = 1; address addrUniversity; address addrEarlySkills; address addrHackathons; address addrLegal; address addrMarketing; constructor() public { maxSupply = 500000000 * (10 ** 18); maxSellable = maxSupply * 60 / 100; currentRunningAddress = address(this); soldSupply = 0; startDate = 1535760000; bonusEnd20 = 1536969600; bonusEnd10 = 1538179200; bonusEnd05 = 1539388800; endDate = 1542240000; tradingDate = 1543536000; minAmountETH = safeDiv(1 ether, 10); maxAmountETH = safeMul(1 ether, 5000); uint256 teamAmount = maxSupply * 150 / 1000; balances[address(this)] = teamAmount * (100 - teamWOVestingPercentage) / 100; emit Transfer(address(0), address(this), balances[address(this)]); balances[owner] = teamAmount * teamWOVestingPercentage / 100; kycAddressState[owner] = true; emit Transfer(address(0), owner, balances[owner]); addrUniversity = 0x20D9846AB6c348AfF24e762150aBfa15D99e4Af5; balances[addrUniversity] = maxSupply * 50 / 1000; kycAddressState[addrUniversity] = true; emit Transfer(address(0), addrUniversity, balances[addrUniversity]); addrEarlySkills = 0x3CF15B214734bB3C9040f18033440a35d18746Ca; balances[addrEarlySkills] = maxSupply * 50 / 1000; kycAddressState[addrEarlySkills] = true; emit Transfer(address(0), addrEarlySkills, balances[addrEarlySkills]); addrHackathons = 0x3ACEB78ff4B064aEE870dcb844cCa43FC6DcBe7d; balances[addrHackathons] = maxSupply * 45 / 1000; kycAddressState[addrHackathons] = true; emit Transfer(address(0), addrHackathons, balances[addrHackathons]); addrLegal = 0x65e1af8d76af6d1d3E47F14014F3105286FFBcF2; balances[addrLegal] = maxSupply * 30 / 1000; kycAddressState[addrLegal] = true; emit Transfer(address(0), addrLegal, balances[addrLegal]); addrMarketing = 0x3d7Db960837aF96C457bdB481C3De7cE80366b2c; balances[addrMarketing] = maxSupply * 75 / 1000; kycAddressState[addrMarketing] = true; emit Transfer(address(0), addrMarketing, balances[addrMarketing]); _totalSupply = maxSupply * 40 / 100; }",1,"subgraph cluster_1893_KaasyToken {
label=""KaasyToken"";
""1893_SetNewBlockchainEnabled"" [label=""SetNewBlockchainEnabled""];
""1893_depositsOf"" [label=""depositsOf""];
""1893_fallback"" [label=""fallback""];
""1893_circulatingSupply"" [label=""circulatingSupply""];
""1893_symbol"" [label=""symbol""];
""1893_getExchangeRate"" [label=""getExchangeRate""];
""1893_transfer"" [label=""transfer""];
""1893_transferAllERC20Token"" [label=""transferAllERC20Token""];
""1893_burnedBalanceOf"" [label=""burnedBalanceOf""];
""1893_approveAndCall"" [label=""approveAndCall""];
""1893_name"" [label=""name""];
""1893_BurnMyTokensAndSetAmountForNewBlockchain"" [label=""BurnMyTokensAndSetAmountForNewBlockchain""];
""1893_decimals"" [label=""decimals""];
""1893_transferFrom"" [label=""transferFrom""];
""1893_updateExchangeRate"" [label=""updateExchangeRate""];
""1893_BurnTokensAndSetAmountForNewBlockchain"" [label=""BurnTokensAndSetAmountForNewBlockchain""];
""1893_transferVestingMonthlyAmount"" [label=""transferVestingMonthlyAmount""];
""1893_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""1893_getAmountToIssue"" [label=""getAmountToIssue""];
""1893_exchangeEthToEur"" [label=""exchangeEthToEur""];
""1893_allowance"" [label=""allowance""];
""1893_approve"" [label=""approve""];
""1893_internalFinishMinting"" [label=""internalFinishMinting""];
""1893_finishMinting"" [label=""finishMinting""];
""1893_setAddressKYC"" [label=""setAddressKYC""];
""1893_exchangeEurToEth"" [label=""exchangeEurToEth""];
""1893_updateEndDate"" [label=""updateEndDate""];
""1893_updateTokenNameSymbolAddress"" [label=""updateTokenNameSymbolAddress""];
""1893_balanceOf"" [label=""balanceOf""];
""1893_getAddressKYCState"" [label=""getAddressKYCState""];
""1893_constructor"" [label=""constructor""];
""1893_totalSupply"" [label=""totalSupply""];
""1893_transferFrom"" -> ""1893_finishMinting"";
""1893_BurnTokensAndSetAmountForNewBlockchain"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_exchangeEthToEur"" -> ""1893_safeMul"";
""1893_getAmountToIssue"" -> ""1893_exchangeEthToEur"";
""1893_transferFrom"" -> ""1893_whenNotPaused"";
""1893_SetNewBlockchainEnabled"" -> ""1893_onlyOwner"";
""1893_finishMinting"" -> ""1893_internalFinishMinting"";
""1893_BurnTokensAndSetAmountForNewBlockchain"" -> ""1893_safeAdd"";
""1893_fallback"" -> ""1893_finishMinting"";
""1893_transferVestingMonthlyAmount"" -> ""1893_onlyOwner"";
""1893_transferAllERC20Token"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_transfer"" -> ""1893_safeSub"";
""1893_approveAndCall"" -> ""1893_whenNotPaused"";
""1893_updateTokenNameSymbolAddress"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_exchangeEurToEth"" -> ""1893_safeDiv"";
""1893_setAddressKYC"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_exchangeEurToEth"" -> ""1893_safeMul"";
""1893_transfer"" -> ""1893_whenNotPaused"";
""1893_fallback"" -> ""1893_whenNotPaused"";
""1893_fallback"" -> ""1893_getAmountToIssue"";
""1893_transferFrom"" -> ""1893_safeAdd"";
""1893_updateTokenNameSymbolAddress"" -> ""1893_whenPaused"";
""1893_transfer"" -> ""1893_finishMinting"";
""1893_exchangeEthToEur"" -> ""1893_safeDiv"";
""1893_transferVestingMonthlyAmount"" -> ""1893_transferFrom"";
""1893_constructor"" -> ""1893_safeMul"";
""1893_updateExchangeRate"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_updateEndDate"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_transfer"" -> ""1893_safeAdd"";
""1893_fallback"" -> ""1893_safeAdd"";
""1893_BurnMyTokensAndSetAmountForNewBlockchain"" -> ""1893_safeAdd"";
""1893_transferAnyERC20Token"" -> ""1893_onlyOwnerOrOwnerAPI"";
""1893_transferFrom"" -> ""1893_safeSub"";
""1893_constructor"" -> ""1893_safeDiv"";
}
"
0x33d1a1a2d781d395eace70e69423c594e52f1a8b.sol,MultiOwner,"contract MultiOwner { event OwnerAdded(address newOwner); event OwnerRemoved(address oldOwner); event RequirementChanged(uint256 newRequirement); uint256 public ownerRequired; mapping (address => bool) public isOwner; mapping (address => bool) public RequireDispose; address[] owners; function MultiOwner(address[] _owners, uint256 _required) public { ownerRequired = _required; isOwner[msg.sender] = true; owners.push(msg.sender); for (uint256 i = 0; i < _owners.length; ++i){ require(!isOwner[_owners[i]]); isOwner[_owners[i]] = true; owners.push(_owners[i]); }",1,"subgraph cluster_488_MultiOwner {
label=""MultiOwner"";
""488_removeOwner"" [label=""removeOwner""];
""488_MultiOwner"" [label=""MultiOwner""];
""488_addOwner"" [label=""addOwner""];
""488_changeRequirement"" [label=""changeRequirement""];
""488_numberOwners"" [label=""numberOwners""];
""488_kill"" [label=""kill""];
""488_ConfirmDispose"" [label=""ConfirmDispose""];
""488_changeRequirement"" -> ""488_onlyOwner"";
""488_kill"" -> ""488_ConfirmDispose"";
""488_removeOwner"" -> ""488_onlyOwner"";
""488_ConfirmDispose"" -> ""488_onlyOwner"";
""488_kill"" -> ""488_onlyOwner"";
""488_addOwner"" -> ""488_onlyOwner"";
""488_removeOwner"" -> ""488_ownerExists"";
""488_addOwner"" -> ""488_ownerDoesNotExist"";
}
"
0x27369e8f43f44c26853a46da7e6cb52d203b59ce.sol,AgileCycleWithAssistance,contract AgileCycleWithAssistance { using SafeMath for uint; address public operator; address public juryOperator; uint public promisedTokens; uint public raisedEther; bool public tokenReleaseAtStart; address public icoAddress; address public arbitrationAddress; bool public roundFailedToStart; address public projectWallet; address public juryOnlineWallet; struct Milestone { uint etherAmount; uint tokenAmount; uint startTime; uint finishTime; uint duration; string description; string result; },1,"subgraph cluster_3191_AgileCycleWithAssistance {
label=""AgileCycleWithAssistance"";
""3191_addMilestone"" [label=""addMilestone""];
""3191_promisedTokens"" [label=""promisedTokens""];
""3191_editMilestone"" [label=""editMilestone""];
""3191_milestonesLength"" [label=""milestonesLength""];
""3191_investorExists"" [label=""investorExists""];
""3191_addMilestonesAndSeal"" [label=""addMilestonesAndSeal""];
""3191_failSafe"" [label=""failSafe""];
""3191_assignPartition"" [label=""assignPartition""];
""3191_finishedTimeStamp"" [label=""finishedTimeStamp""];
""3191_verdictExecuted"" [label=""verdictExecuted""];
""3191_constructor"" [label=""constructor""];
""3191_offerAccepted"" [label=""offerAccepted""];
""3191_disputeOpened"" [label=""disputeOpened""];
""3191_setToken"" [label=""setToken""];
""3191_payCommission"" [label=""payCommission""];
""3191_finishMilestone"" [label=""finishMilestone""];
""3191_startMilestone"" [label=""startMilestone""];
""3191_withdrawEther"" [label=""withdrawEther""];
""3191_seal"" [label=""seal""];
""3191_approveCycle"" [label=""approveCycle""];
""3191_withdrawToken"" [label=""withdrawToken""];
""3191_sealTimestamp"" [label=""sealTimestamp""];
""3191_currentMilestone"" [label=""currentMilestone""];
""3191_disputeOpened"" -> ""3191_only"";
""3191_seal"" -> ""3191_notSealed"";
""3191_finishMilestone"" -> ""3191_onlyAdmin"";
""3191_setToken"" -> ""3191_onlyAdmin"";
""3191_startMilestone"" -> ""3191_sealed"";
""3191_editMilestone"" -> ""3191_onlyAdmin"";
""3191_addMilestone"" -> ""3191_onlyAdmin"";
""3191_addMilestone"" -> ""3191_notSealed"";
""3191_verdictExecuted"" -> ""3191_only"";
""3191_startMilestone"" -> ""3191_payCommission"";
""3191_offerAccepted"" -> ""3191_only"";
""3191_startMilestone"" -> ""3191_onlyAdmin"";
""3191_addMilestonesAndSeal"" -> ""3191_onlyAdmin"";
""3191_offerAccepted"" -> ""3191_assignPartition"";
""3191_seal"" -> ""3191_onlyAdmin"";
""3191_editMilestone"" -> ""3191_notSealed"";
""3191_addMilestonesAndSeal"" -> ""3191_notSealed"";
}
"
0x6d84769b1e287a27f282a938c8110b22714dbf78.sol,ABIO_preICO,"contract ABIO_preICO is ABIO_BaseICO{ address ICOAddress; ABIO_ICO ICO; uint finalDeadline; constructor(address _abioAddress, uint _lenInMins, uint _minWeiInvestment, address _treasury, uint _priceInWei, uint _goalInWei){ treasury = _treasury; abioToken = ABIO_Token(_abioAddress); weiPerABIO = _priceInWei; fundingGoal = _goalInWei; minInvestment = _minWeiInvestment; startDate = now; length = _lenInMins * 1 minutes; }",1,"subgraph cluster_638_ABIO_preICO {
label=""ABIO_preICO"";
""638_supplyICOContract"" [label=""supplyICOContract""];
""638_constructor"" [label=""constructor""];
""638_goalReached"" [label=""goalReached""];
""638_extGoalReached"" [label=""extGoalReached""];
""638_safeWithdrawal"" [label=""safeWithdrawal""];
""638_extGoalReached"" -> ""638_goalReached"";
""638_supplyICOContract"" -> ""638_onlyOwner"";
""638_safeWithdrawal"" -> ""638_afterDeadline"";
""638_safeWithdrawal"" -> ""638_stopOnPause"";
""638_extGoalReached"" -> ""638_afterDeadline"";
""638_supplyICOContract"" -> ""638_goalReached"";
}
"
0xb39673a1f27ea2da6fd299368fe9fdbae4bc408f.sol,a_game,contract a_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_a_game {
label=""a_game"";
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x78a73b6cbc5d183ce56e786f6e905cadec63547b.sol,FabricTokenFundraiser,"contract FabricTokenFundraiser is FabricToken, FabricTokenFundraiserConfig, Whitelist { bool public finalized = false; address public beneficiary; uint public conversionRate; uint public startDate; uint public endDate; uint public hardCap; FabricTokenSafe public fabricTokenSafe; uint internal minimumContribution; uint internal individualLimit; uint private tokensSold; bool private partnerTokensClaimed = false; event FundsReceived(address indexed _address, uint _ethers, uint _tokens, uint _newTotalSupply, uint _conversionRate); event BeneficiaryChange(address _beneficiary); event ConversionRateChange(uint _conversionRate); event Finalized(address _beneficiary, uint _ethers, uint _totalSupply); function FabricTokenFundraiser(address _beneficiary) public FabricToken(0) Whitelist(msg.sender) { require(_beneficiary != 0); beneficiary = _beneficiary; conversionRate = CONVERSION_RATE; startDate = START_DATE; endDate = END_DATE; hardCap = TOKENS_HARD_CAP; tokensSold = 0; minimumContribution = MIN_CONTRIBUTION; individualLimit = INDIVIDUAL_ETHER_LIMIT * CONVERSION_RATE; fabricTokenSafe = new FabricTokenSafe(this); freeze(); }",1,"subgraph cluster_1539_FabricTokenFundraiser {
label=""FabricTokenFundraiser"";
""1539_FabricTokenFundraiser"" [label=""FabricTokenFundraiser""];
""1539_claimPartnerTokens"" [label=""claimPartnerTokens""];
""1539_setConversionRate"" [label=""setConversionRate""];
""1539_setBeneficiary"" [label=""setBeneficiary""];
""1539_finalize"" [label=""finalize""];
""1539_buyTokens"" [label=""buyTokens""];
""1539_fallback"" [label=""fallback""];
""1539_setBeneficiary"" -> ""1539_onlyOwner"";
""1539_fallback"" -> ""1539_buyTokens"";
""1539_finalize"" -> ""1539_unfreeze"";
""1539_FabricTokenFundraiser"" -> ""1539_Whitelist"";
""1539_FabricTokenFundraiser"" -> ""1539_FabricToken"";
""1539_finalize"" -> ""1539_onlyOwner"";
""1539_setConversionRate"" -> ""1539_onlyOwner"";
""1539_buyTokens"" -> ""1539_onlyWhitelisted"";
""1539_FabricTokenFundraiser"" -> ""1539_freeze"";
}
"
0x41b8d6336bdab8991ad1c48e3579d0693db17e79.sol,MNY,"contract MNY { string public name = ; uint8 public decimals = 18; string public symbol = ; address public _owner; address public _dev = 0xC96CfB18C39DC02FBa229B6EA698b1AD5576DF4c; address public _devFeesAddr; uint256 public _tokePerEth = 4877000000000000000000; bool public _coldStorage = true; bool public _receiveEth = true; bool _feesEnabled = false; bool _payFees = false; uint256 _fees; uint256 _lifeVal = 0; uint256 _feeLimit = 0; uint256 _devFees = 0; uint256 public _totalSupply = 1000000928 * 1 ether; uint256 public _frozenTokens = 0; event Transfer(address indexed _from, address indexed _to, uint _value); event Exchanged(address indexed _from, address indexed _to, uint _value); mapping (address => uint256) public balances; mapping (address => bool) public exchangePartners; mapping (address => uint256) public exchangeRates; function MNY() { _owner = msg.sender; preMine(); }",1,"subgraph cluster_1157_MNY {
label=""MNY"";
""1157_getBalance"" [label=""getBalance""];
""1157_transfer"" [label=""transfer""];
""1157_changePayRate"" [label=""changePayRate""];
""1157_changeDev"" [label=""changeDev""];
""1157_updateFeeAmount"" [label=""updateFeeAmount""];
""1157_exchange"" [label=""exchange""];
""1157_addExchangePartnerAddressAndRate"" [label=""addExchangePartnerAddressAndRate""];
""1157_safeWithdrawal"" [label=""safeWithdrawal""];
""1157_toggleReceiveEth"" [label=""toggleReceiveEth""];
""1157_mul"" [label=""mul""];
""1157_fallback"" [label=""fallback""];
""1157_payFeesToggle"" [label=""payFeesToggle""];
""1157_removeExchangePartnerTargetAddress"" [label=""removeExchangePartnerTargetAddress""];
""1157_sub"" [label=""sub""];
""1157_totalSupply"" [label=""totalSupply""];
""1157_defrostFrozenTokens"" [label=""defrostFrozenTokens""];
""1157_updateTokenBalance"" [label=""updateTokenBalance""];
""1157_preMine"" [label=""preMine""];
""1157_add"" [label=""add""];
""1157_changeOwner"" [label=""changeOwner""];
""1157_getLifeVal"" [label=""getLifeVal""];
""1157_canExchange"" [label=""canExchange""];
""1157_changeDevFeesAddr"" [label=""changeDevFeesAddr""];
""1157_exchangeTokensFromOtherContract"" [label=""exchangeTokensFromOtherContract""];
""1157_addExchangePartnerTargetAddress"" [label=""addExchangePartnerTargetAddress""];
""1157_balanceOf"" [label=""balanceOf""];
""1157_withdrawDevFees"" [label=""withdrawDevFees""];
""1157_div"" [label=""div""];
""1157_requestTokensFromOtherContract"" [label=""requestTokensFromOtherContract""];
""1157_MNY"" [label=""MNY""];
""1157_toggleFreezeTokensFlag"" [label=""toggleFreezeTokensFlag""];
""1157_contractExchangeRate"" [label=""contractExchangeRate""];
""1157_exchangeTokensFromOtherContract"" -> ""1157_mul"";
""1157_fallback"" -> ""1157_div"";
""1157_transfer"" -> ""1157_balanceOf"";
""1157_exchangeTokensFromOtherContract"" -> ""1157_sub"";
""1157_exchangeTokensFromOtherContract"" -> ""1157_add"";
""1157_transfer"" -> ""1157_add"";
""1157_MNY"" -> ""1157_preMine"";
""1157_defrostFrozenTokens"" -> ""1157_add"";
""1157_fallback"" -> ""1157_sub"";
""1157_fallback"" -> ""1157_add"";
""1157_fallback"" -> ""1157_mul"";
""1157_exchange"" -> ""1157_add"";
""1157_exchange"" -> ""1157_balanceOf"";
""1157_transfer"" -> ""1157_sub"";
""1157_exchange"" -> ""1157_sub"";
""1157_exchange"" -> ""1157_requestTokensFromOtherContract"";
}
"
0x2066a2e0cd7f19589f582e2fc9af9669cc9e02f1.sol,SetherToken,"contract SetherToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function SetherToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_SetherToken {
label=""SetherToken"";
""401_SetherToken"" [label=""SetherToken""];
""401_transfer"" [label=""transfer""];
""401_fallback"" [label=""fallback""];
""401_mintTo"" [label=""mintTo""];
""401_totalSupply"" [label=""totalSupply""];
""401_approve"" [label=""approve""];
""401_changeOwner"" [label=""changeOwner""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_killContract"" [label=""killContract""];
""401_transferFrom"" [label=""transferFrom""];
""401_balanceOf"" [label=""balanceOf""];
}
"
0xf2861ad8dd602269c21eddd4d18255903cca47c7.sol,ZethrMultiSigWallet,"contract ZethrMultiSigWallet is ERC223Receiving { using SafeMath for uint; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event WhiteListAddition(address indexed contractAddress); event WhiteListRemoval(address indexed contractAddress); event RequirementChange(uint required); event BankrollInvest(uint amountReceived); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; bool internal reEntered = false; uint constant public MAX_OWNER_COUNT = 15; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1272_ZethrMultiSigWallet {
label=""ZethrMultiSigWallet"";
""1272_isConfirmed"" [label=""isConfirmed""];
""1272_confirmTransaction"" [label=""confirmTransaction""];
""1272_replaceOwner"" [label=""replaceOwner""];
""1272_revokeConfirmation"" [label=""revokeConfirmation""];
""1272_addTransaction"" [label=""addTransaction""];
""1272_getConfirmations"" [label=""getConfirmations""];
""1272_fallback"" [label=""fallback""];
""1272_getTransactionIds"" [label=""getTransactionIds""];
""1272_constructor"" [label=""constructor""];
""1272_executeTransaction"" [label=""executeTransaction""];
""1272_getConfirmationCount"" [label=""getConfirmationCount""];
""1272_submitTransaction"" [label=""submitTransaction""];
""1272_getOwners"" [label=""getOwners""];
""1272_tokenFallback"" [label=""tokenFallback""];
""1272_removeOwner"" [label=""removeOwner""];
""1272_addOwner"" [label=""addOwner""];
""1272_changeRequirement"" [label=""changeRequirement""];
""1272_getTransactionCount"" [label=""getTransactionCount""];
""1272_addOwner"" -> ""1272_validRequirement"";
""1272_addOwner"" -> ""1272_onlyWallet"";
""1272_addOwner"" -> ""1272_notNull"";
""1272_removeOwner"" -> ""1272_changeRequirement"";
""1272_submitTransaction"" -> ""1272_confirmTransaction"";
""1272_revokeConfirmation"" -> ""1272_ownerExists"";
""1272_changeRequirement"" -> ""1272_validRequirement"";
""1272_executeTransaction"" -> ""1272_notExecuted"";
""1272_removeOwner"" -> ""1272_validRequirement"";
""1272_replaceOwner"" -> ""1272_ownerDoesNotExist"";
""1272_addOwner"" -> ""1272_ownerDoesNotExist"";
""1272_revokeConfirmation"" -> ""1272_notExecuted"";
""1272_changeRequirement"" -> ""1272_onlyWallet"";
""1272_replaceOwner"" -> ""1272_onlyWallet"";
""1272_revokeConfirmation"" -> ""1272_confirmed"";
""1272_submitTransaction"" -> ""1272_addTransaction"";
""1272_confirmTransaction"" -> ""1272_ownerExists"";
""1272_confirmTransaction"" -> ""1272_notConfirmed"";
""1272_addTransaction"" -> ""1272_notNull"";
""1272_confirmTransaction"" -> ""1272_executeTransaction"";
""1272_removeOwner"" -> ""1272_ownerExists"";
""1272_removeOwner"" -> ""1272_onlyWallet"";
""1272_confirmTransaction"" -> ""1272_transactionExists"";
""1272_executeTransaction"" -> ""1272_isConfirmed"";
""1272_replaceOwner"" -> ""1272_ownerExists"";
""1272_constructor"" -> ""1272_validRequirement"";
}
"
0x78c2a1e91b52bca4130b6ed9edd9fbcfd4671c37.sol,WhaleGiveaway1,contract WhaleGiveaway1 { address public Owner = msg.sender; uint constant public minEligibility = 0.999001 ether; function() public payable { },1,"subgraph cluster_93_WhaleGiveaway1 {
label=""WhaleGiveaway1"";
""93_fallback"" [label=""fallback""];
""93_Command"" [label=""Command""];
""93_withdraw"" [label=""withdraw""];
""93_redeem"" [label=""redeem""];
}
"
0xeef93ec835c7921038d55ee096671a94e961709b.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1447_RefundVault {
label=""RefundVault"";
""1447_deposit"" [label=""deposit""];
""1447_enableRefunds"" [label=""enableRefunds""];
""1447_setWallet"" [label=""setWallet""];
""1447_RefundVault"" [label=""RefundVault""];
""1447_close"" [label=""close""];
""1447_refund"" [label=""refund""];
""1447_deposit"" -> ""1447_onlyOwner"";
""1447_enableRefunds"" -> ""1447_onlyOwner"";
""1447_close"" -> ""1447_onlyOwner"";
""1447_setWallet"" -> ""1447_onlyOwner"";
}
"
0xf3cb4203e10f205c6bc91d8b0974eee520af6412.sol,D_Quiz,contract D_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_D_Quiz {
label=""D_Quiz"";
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x345ab5e5f971dbdbc92af2779ce7a8bbf1819e59.sol,TwentyDollars,contract TwentyDollars { struct Bid { address owner; uint256 amount; },1,"subgraph cluster_262_TwentyDollars {
label=""TwentyDollars"";
""262_winnerWithdraw"" [label=""winnerWithdraw""];
""262_biddingClosed"" [label=""biddingClosed""];
""262_ownerWithdraw"" [label=""ownerWithdraw""];
""262_getMyBalance"" [label=""getMyBalance""];
""262_constructor"" [label=""constructor""];
""262_getContractBalance"" [label=""getContractBalance""];
""262_bid"" [label=""bid""];
""262_withdraw"" [label=""withdraw""];
""262_fallback"" [label=""fallback""];
""262_ownerWithdraw"" -> ""262_onlyOwner"";
""262_winnerWithdraw"" -> ""262_onlyHighestBidder"";
""262_bid"" -> ""262_onlyBiddingOpen"";
""262_ownerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_winnerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_ownerWithdraw"" -> ""262_getContractBalance"";
""262_fallback"" -> ""262_bid"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,HelloGoldSale,"contract HelloGoldSale is Pausable, SafeMath { uint256 public decimals = 8; uint256 public startDate = 1503892800; uint256 public endDate = 1504497600; uint256 tranchePeriod = 1 weeks; HelloGoldToken token; uint256 constant MaxCoinsR1 = 80 * 10**6 * 10**8; uint256 public coinsRemaining = 80 * 10**6 * 10**8; uint256 coinsPerTier = 16 * 10**6 * 10**8; uint256 public coinsLeftInTier = 16 * 10**6 * 10**8; uint256 public minimumCap = 0; uint256 numTiers = 5; uint16 public tierNo; uint256 public preallocCoins; uint256 public purchasedCoins; uint256 public ethRaised; uint256 public personalMax = 10 ether; uint256 public contributors; address public cs; address public multiSig; address public HGT_Reserve; struct csAction { bool passedKYC; bool blocked; }",1,"subgraph cluster_3276_HelloGoldSale {
label=""HelloGoldSale"";
""3276_coinAddress"" [label=""coinAddress""];
""3276_when"" [label=""when""];
""3276_setHgtRates"" [label=""setHgtRates""];
""3276_funding"" [label=""funding""];
""3276_block"" [label=""block""];
""3276_success"" [label=""success""];
""3276_fallback"" [label=""fallback""];
""3276_HelloGoldSale"" [label=""HelloGoldSale""];
""3276_createTokens"" [label=""createTokens""];
""3276_withdraw"" [label=""withdraw""];
""3276_allocatedTokens"" [label=""allocatedTokens""];
""3276_approve"" [label=""approve""];
""3276_setPeriod"" [label=""setPeriod""];
""3276_linkCoin"" [label=""linkCoin""];
""3276_complete"" [label=""complete""];
""3276_newCs"" [label=""newCs""];
""3276_failed"" [label=""failed""];
""3276_unblock"" [label=""unblock""];
""3276_setStart"" [label=""setStart""];
""3276_createTokens"" -> ""3276_funding"";
""3276_allocatedTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_success"";
""3276_allocatedTokens"" -> ""3276_safeAdd"";
""3276_createTokens"" -> ""3276_safeDiv"";
""3276_fallback"" -> ""3276_createTokens"";
""3276_linkCoin"" -> ""3276_onlyOwner"";
""3276_approve"" -> ""3276_MustBeCs"";
""3276_unblock"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_min256"";
""3276_setHgtRates"" -> ""3276_onlyOwner"";
""3276_allocatedTokens"" -> ""3276_onlyOwner"";
""3276_withdraw"" -> ""3276_failed"";
""3276_newCs"" -> ""3276_onlyOwner"";
""3276_setPeriod"" -> ""3276_funding"";
""3276_setStart"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeAdd"";
""3276_fallback"" -> ""3276_whenNotPaused"";
""3276_setPeriod"" -> ""3276_onlyOwner"";
""3276_block"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeMul"";
""3276_fallback"" -> ""3276_MustBeEnabled"";
}
"
0x40da24a66f729d0bd0453681c5a6506bdc2a7a6a.sol,CrwdToken,"contract CrwdToken is StandardToken { enum States { Initial, ValuationSet, Ico, Underfunded, Operational, Paused }",1,"subgraph cluster_1496_CrwdToken {
label=""CrwdToken"";
""1496_transfer"" [label=""transfer""];
""1496_transferFrom"" [label=""transferFrom""];
""1496_issueTokensToUser"" [label=""issueTokensToUser""];
""1496_rescueToken"" [label=""rescueToken""];
""1496_addBonus"" [label=""addBonus""];
""1496_CrwdToken"" [label=""CrwdToken""];
""1496_balanceOf"" [label=""balanceOf""];
""1496_pause"" [label=""pause""];
""1496_resumeICO"" [label=""resumeICO""];
""1496_fallback"" [label=""fallback""];
""1496_abort"" [label=""abort""];
""1496_moveToState"" [label=""moveToState""];
""1496_setBonusPhase"" [label=""setBonusPhase""];
""1496_burnAndFinish"" [label=""burnAndFinish""];
""1496_anyoneEndICO"" [label=""anyoneEndICO""];
""1496_endICO"" [label=""endICO""];
""1496_startICO"" [label=""startICO""];
""1496_addPresaleAmount"" [label=""addPresaleAmount""];
""1496_addToWhitelist"" [label=""addToWhitelist""];
""1496_requestPayout"" [label=""requestPayout""];
""1496_getPhaseBonus"" [label=""getPhaseBonus""];
""1496_requestRefund"" [label=""requestRefund""];
""1496_updateEthICOThresholds"" [label=""updateEthICOThresholds""];
""1496_issuePercentToReserve"" [label=""issuePercentToReserve""];
""1496_transfer"" -> ""1496_transfer"";
""1496_addPresaleAmount"" -> ""1496_issueTokensToUser"";
""1496_anyoneEndICO"" -> ""1496_burnAndFinish"";
""1496_transfer"" -> ""1496_requireState"";
""1496_updateEthICOThresholds"" -> ""1496_onlyStateControl"";
""1496_pause"" -> ""1496_moveToState"";
""1496_anyoneEndICO"" -> ""1496_requireState"";
""1496_transferFrom"" -> ""1496_transferFrom"";
""1496_resumeICO"" -> ""1496_onlyStateControl"";
""1496_transferFrom"" -> ""1496_requireState"";
""1496_abort"" -> ""1496_moveToState"";
""1496_rescueToken"" -> ""1496_onlyTokenAssignmentControl"";
""1496_rescueToken"" -> ""1496_requireState"";
""1496_fallback"" -> ""1496_requireState"";
""1496_abort"" -> ""1496_requireState"";
""1496_CrwdToken"" -> ""1496_moveToState"";
""1496_endICO"" -> ""1496_burnAndFinish"";
""1496_anyoneEndICO"" -> ""1496_moveToState"";
""1496_fallback"" -> ""1496_addBonus"";
""1496_requestPayout"" -> ""1496_requireState"";
""1496_endICO"" -> ""1496_moveToState"";
""1496_pause"" -> ""1496_requireState"";
""1496_addPresaleAmount"" -> ""1496_onlyTokenAssignmentControl"";
""1496_requestPayout"" -> ""1496_onlyWithdraw"";
""1496_addBonus"" -> ""1496_getPhaseBonus"";
""1496_resumeICO"" -> ""1496_moveToState"";
""1496_resumeICO"" -> ""1496_requireState"";
""1496_startICO"" -> ""1496_onlyStateControl"";
""1496_setBonusPhase"" -> ""1496_onlyStateControl"";
""1496_startICO"" -> ""1496_moveToState"";
""1496_endICO"" -> ""1496_onlyStateControl"";
""1496_burnAndFinish"" -> ""1496_issuePercentToReserve"";
""1496_pause"" -> ""1496_onlyStateControl"";
""1496_abort"" -> ""1496_onlyStateControl"";
""1496_startICO"" -> ""1496_requireState"";
""1496_updateEthICOThresholds"" -> ""1496_moveToState"";
""1496_addToWhitelist"" -> ""1496_onlyWhitelist"";
""1496_endICO"" -> ""1496_requireState"";
""1496_fallback"" -> ""1496_issueTokensToUser"";
""1496_requestRefund"" -> ""1496_requireState"";
}
"
0xe159ab639cd6d5d8c83bcda4bd114480c9ce197b.sol,En_GAME,contract En_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_En_GAME {
label=""En_GAME"";
""148_New"" [label=""New""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Try"" [label=""Try""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,FlowerCore,"contract FlowerCore is FlowerAuction, Ownable { uint256 public constant PROMO_CREATION_LIMIT = 5000; uint256 public constant GEN0_CREATION_LIMIT = 45000; uint256 public constant GEN0_STARTING_PRICE = 10 finney; uint256 public constant GEN0_AUCTION_DURATION = 1 days; uint256 public promoCreatedCount; uint256 public gen0CreatedCount; constructor() public { stopped = true; rootAddress = msg.sender; adminAddress = msg.sender; _createFlower(0, 0, 0, uint256(-1), address(0)); }",1,"subgraph cluster_4300_FlowerCore {
label=""FlowerCore"";
""4300__computeNextGen0Price"" [label=""_computeNextGen0Price""];
""4300_getFlower"" [label=""getFlower""];
""4300_createPromoFlower"" [label=""createPromoFlower""];
""4300_unstop"" [label=""unstop""];
""4300_createGen0Auction"" [label=""createGen0Auction""];
""4300_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""4300_withdrawBalance"" [label=""withdrawBalance""];
""4300_setGiftHolderAddress"" [label=""setGiftHolderAddress""];
""4300_constructor"" [label=""constructor""];
""4300_createPromoFlower"" -> ""4300_onlyAdministrator"";
""4300_withdrawBalance"" -> ""4300_onlyAdministrator"";
""4300_setGen0SellerAddress"" -> ""4300_onlyAdministrator"";
""4300_createGen0Auction"" -> ""4300_onlyAdministrator"";
""4300_unstop"" -> ""4300_whenStopped"";
""4300_setGiftHolderAddress"" -> ""4300_onlyAdministrator"";
""4300_unstop"" -> ""4300_onlyAdministrator"";
""4300_constructor"" -> ""4300__createFlower"";
""4300_unstop"" -> ""4300_setStart"";
""4300_createGen0Auction"" -> ""4300__createFlower"";
""4300_createGen0Auction"" -> ""4300__computeNextGen0Price"";
""4300_createPromoFlower"" -> ""4300__createFlower"";
}
"
0x8cd06b5c327b0e277a7f6b08b9acea4d8ee36180.sol,JungleScratch,contract JungleScratch is Owned { using SafeMath for uint; uint public LimitBottom = 0.02 ether; uint public LimitTop = 0.1 ether; address public Drawer; struct Game { bytes32 SecretKey_P; bool isPlay; bool isPay; uint Result; uint Time; address Buyer; uint value; },1,"subgraph cluster_1109_JungleScratch {
label=""JungleScratch"";
""1109_fallback"" [label=""fallback""];
""1109_changeLimit"" [label=""changeLimit""];
""1109_changeDrawer"" [label=""changeDrawer""];
""1109_getTicketTime"" [label=""getTicketTime""];
""1109_submit"" [label=""submit""];
""1109_withdraw"" [label=""withdraw""];
""1109_getisPlay"" [label=""getisPlay""];
""1109_award"" [label=""award""];
""1109_chargeOwe"" [label=""chargeOwe""];
""1109_JungleScratch"" [label=""JungleScratch""];
""1109_withdraw"" -> ""1109_onlyOwner"";
""1109_changeDrawer"" -> ""1109_onlyOwner"";
""1109_changeLimit"" -> ""1109_onlyOwner"";
}
"
0xf2eefee3c99cdb30c11d57b487a16690e813309b.sol,SlotMachine,"contract SlotMachine { address public slotMachineFunds; uint256 public coinPrice = 0.1 ether; address owner; event Rolled(address sender, uint rand1, uint rand2, uint rand3); mapping (address => uint) pendingWithdrawals; modifier onlyOwner() { require(owner == msg.sender); _; }",1,"subgraph cluster_359_SlotMachine {
label=""SlotMachine"";
""359_cashout"" [label=""cashout""];
""359_fallback"" [label=""fallback""];
""359_contractBalance"" [label=""contractBalance""];
""359_constructor"" [label=""constructor""];
""359_addEther"" [label=""addEther""];
""359_withdraw"" [label=""withdraw""];
""359_balanceOf"" [label=""balanceOf""];
""359_setCoinPrice"" [label=""setCoinPrice""];
""359_calculatePrize"" [label=""calculatePrize""];
""359_killContract"" [label=""killContract""];
""359_randomGen"" [label=""randomGen""];
""359_oneRoll"" [label=""oneRoll""];
""359_oneRoll"" -> ""359_calculatePrize"";
""359_fallback"" -> ""359_onlyOwner"";
""359_setCoinPrice"" -> ""359_onlyOwner"";
""359_oneRoll"" -> ""359_randomGen"";
""359_killContract"" -> ""359_onlyOwner"";
""359_cashout"" -> ""359_onlyOwner"";
}
"
0x6b1dce414d998a28bd90f201a87f8e1bbf2f0aad.sol,fast_game,contract fast_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_fast_game {
label=""fast_game"";
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x33b44a1d150f3feaa40503ad20a75634adc39b18.sol,TimeCapsule,contract TimeCapsule is Ownable { address public Owner; mapping (address=>uint) public deposits; uint public openDate; function initCapsule(uint open) { Owner = msg.sender; openDate = open; },1,"subgraph cluster_130_TimeCapsule {
label=""TimeCapsule"";
""130_deposit"" [label=""deposit""];
""130_initCapsule"" [label=""initCapsule""];
""130_kill"" [label=""kill""];
""130_withdraw"" [label=""withdraw""];
""130_fallback"" [label=""fallback""];
""130_withdraw"" -> ""130_isOwner"";
""130_kill"" -> ""130_isOwner"";
""130_fallback"" -> ""130_deposit"";
}
"
0x9311f7ee5f48a807d598cdd68f43cd4e73ffa747.sol,GTO,contract GTO is ERC20Interface { uint8 public constant decimals = 5; string public constant symbol = ; string public constant name = ; bool public _selling = false; uint256 public _totalSupply = 10 ** 14; uint256 public _originalBuyPrice = 45 * 10**7; address public owner; mapping(address => uint256) private balances; mapping(address => mapping (address => uint256)) private allowed; mapping(address => bool) private approvedInvestorList; mapping(address => uint256) private deposit; address[] private buyers; uint8 public _icoPercent = 10; uint256 public _icoSupply = _totalSupply * _icoPercent / 100; uint256 public _minimumBuy = 3 * 10 ** 17; uint256 public _maximumBuy = 30 * 10 ** 18; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_778_GTO {
label=""GTO"";
""778_totalSupply"" [label=""totalSupply""];
""778_setMaximumBuy"" [label=""setMaximumBuy""];
""778_setIcoPercent"" [label=""setIcoPercent""];
""778_turnOnSale"" [label=""turnOnSale""];
""778_allowance"" [label=""allowance""];
""778_withdraw"" [label=""withdraw""];
""778_balanceOf"" [label=""balanceOf""];
""778_fallback"" [label=""fallback""];
""778_transfer"" [label=""transfer""];
""778_getBuyers"" [label=""getBuyers""];
""778_removeInvestorList"" [label=""removeInvestorList""];
""778_buyGifto"" [label=""buyGifto""];
""778_approve"" [label=""approve""];
""778_turnOffSale"" [label=""turnOffSale""];
""778_deliveryToken"" [label=""deliveryToken""];
""778_setBuyPrice"" [label=""setBuyPrice""];
""778_getDeposit"" [label=""getDeposit""];
""778_transferFrom"" [label=""transferFrom""];
""778_isApprovedInvestor"" [label=""isApprovedInvestor""];
""778_addInvestorList"" [label=""addInvestorList""];
""778_GTO"" [label=""GTO""];
""778_fallback"" -> ""778_buyGifto"";
""778_setIcoPercent"" -> ""778_onlyOwner"";
""778_buyGifto"" -> ""778_onSale"";
""778_addInvestorList"" -> ""778_onlyOwner"";
""778_deliveryToken"" -> ""778_onlyOwner"";
""778_removeInvestorList"" -> ""778_onlyOwner"";
""778_withdraw"" -> ""778_onlyOwner"";
""778_setBuyPrice"" -> ""778_onlyOwner"";
""778_deliveryToken"" -> ""778_validRange"";
""778_turnOffSale"" -> ""778_onlyOwner"";
""778_setMaximumBuy"" -> ""778_onlyOwner"";
""778_buyGifto"" -> ""778_validValue"";
""778_turnOnSale"" -> ""778_onlyOwner"";
""778_buyGifto"" -> ""778_validInvestor"";
}
"
0x6dbb4e882f967432fc0f9200e9ca577c916d8a68.sol,Bussiness,contract Bussiness is Ownable { IERC721 public erc721Address = IERC721(0x06012c8cf97bead5deae237070f9587f8e7a266d); ERC20BasicInterface public usdtToken = ERC20BasicInterface(0xdAC17F958D2ee523a2206206994597C13D831ec7); uint256 public ETHFee = 2; uint256 public HBWALLETFee = 1; uint256 public balance = address(this).balance; constructor() public {},1,"subgraph cluster_687_Bussiness {
label=""Bussiness"";
""687_buyByUsdt"" [label=""buyByUsdt""];
""687_setPrice"" [label=""setPrice""];
""687_getPrice"" [label=""getPrice""];
""687_ownerOf"" [label=""ownerOf""];
""687_constructor"" [label=""constructor""];
""687_resetPrice"" [label=""resetPrice""];
""687_setFee"" [label=""setFee""];
""687_withdraw"" [label=""withdraw""];
""687_setPriceFeeEth"" [label=""setPriceFeeEth""];
""687_removePrice"" [label=""removePrice""];
""687_buy"" [label=""buy""];
""687_buyByUsdt"" -> ""687_resetPrice"";
""687_setFee"" -> ""687_onlyOwner"";
""687_withdraw"" -> ""687_onlyOwner"";
""687_buy"" -> ""687_resetPrice"";
""687_getPrice"" -> ""687_resetPrice"";
""687_removePrice"" -> ""687_resetPrice"";
}
"
0xf099c6ecb16575393b3ba6ac57b4ead943353a52.sol,BuddhaTower,"contract BuddhaTower { event onBuy ( address indexed buyerAddress, uint256 amount, uint256 currentHeight ); event onSplit( uint round, uint luckyNumber, address luckyPlayer ); event onTimeup( uint round, address lastBuyer ); event onQualifySuccess( address applier ); struct RoundData { uint256 maxHeight; uint256 lotteryPool; uint256 peakPool; uint256 tokenPot; uint[][] buyinfo; address[] buyAddress; uint256 startTime; uint256 endTime; address[] lotteryWinners; address finalWinner; }",1,"subgraph cluster_1969_BuddhaTower {
label=""BuddhaTower"";
""1969_wipeAll"" [label=""wipeAll""];
""1969_emergencyStart"" [label=""emergencyStart""];
""1969_splitLottery"" [label=""splitLottery""];
""1969_getQualified"" [label=""getQualified""];
""1969_constructor"" [label=""constructor""];
""1969_getLotteryWinner"" [label=""getLotteryWinner""];
""1969_endTime"" [label=""endTime""];
""1969_emergencyClose"" [label=""emergencyClose""];
""1969_activate"" [label=""activate""];
""1969_getLotteryWinnerLength"" [label=""getLotteryWinnerLength""];
""1969_getBuyInfoLength"" [label=""getBuyInfoLength""];
""1969_takeDevCut"" [label=""takeDevCut""];
""1969_buy"" [label=""buy""];
""1969_moveFromBanlist"" [label=""moveFromBanlist""];
""1969_getBuyAddress"" [label=""getBuyAddress""];
""1969_deposit"" [label=""deposit""];
""1969_getBuyInfo"" [label=""getBuyInfo""];
""1969_withdrawEth"" [label=""withdrawEth""];
""1969_addToBanlist"" [label=""addToBanlist""];
""1969_emergencyClose"" -> ""1969_onlyOwner"";
""1969_wipeAll"" -> ""1969_onlyOwner"";
""1969_withdrawEth"" -> ""1969_isBaned"";
""1969_deposit"" -> ""1969_buy"";
""1969_moveFromBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_endTime"";
""1969_deposit"" -> ""1969_isHuman"";
""1969_deposit"" -> ""1969_isBaned"";
""1969_emergencyStart"" -> ""1969_onlyOwner"";
""1969_deposit"" -> ""1969_isActive"";
""1969_withdrawEth"" -> ""1969_isHuman"";
""1969_constructor"" -> ""1969_activate"";
""1969_deposit"" -> ""1969_isWithinLimits"";
""1969_addToBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_splitLottery"";
""1969_activate"" -> ""1969_onlyOwner"";
""1969_takeDevCut"" -> ""1969_onlyOwner"";
}
"
0x20461ad484795e3db0a18a825b34f55768f77819.sol,FF_Game,contract FF_Game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_FF_Game {
label=""FF_Game"";
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x72636c350431895fc6ee718b92bcc5b4fbd70304.sol,preSale3,contract preSale3 is Ownable { using SafeMath for uint; AgroTechFarmToken public token; bool public preSale3Finished = false; string public constant name = ; address public multisig; address public preSale = 0x02Dcc61022771015b1408323D29C790066CBe2e4; address public preSale1 = 0xfafbb19945fc2d79828e4c5813a619d5683074ba; address public preSale2 = 0x62451D37Ca2EC1f0499996Bc3C7e2BAF258E9729; uint public rate; uint public start; uint public end; uint public hardcap; address public restricted; uint public restrictedPercent; function preSale3() public { token = AgroTechFarmToken(0xa55ffAeA5c8cf32B550F663bf17d4F7b739534ff); multisig = 0x227917ac3C1F192874d43031cF4D40fd40Ae6127; rate = 83333333333000000000; start = 1520640000; end = 1522047600; hardcap = 500000000000000000000; restricted = 0xbcCd749ecCCee5B4898d0E38D2a536fa84Ea9Ef6; restrictedPercent = 35; },1,"subgraph cluster_731_preSale3 {
label=""preSale3"";
""731_fallback"" [label=""fallback""];
""731_finishPreSale3"" [label=""finishPreSale3""];
""731_preSale3"" [label=""preSale3""];
""731_createTokens"" [label=""createTokens""];
""731_balancePreSale3"" [label=""balancePreSale3""];
""731_finishPreSale3"" -> ""731_onlyOwner"";
""731_fallback"" -> ""731_createTokens"";
""731_createTokens"" -> ""731_isUnderHardCap"";
""731_createTokens"" -> ""731_saleIsOn"";
}
"
0x00f9f4f3ced5d4f6aedea8a92414206557df7167.sol,SNL,"contract SNL is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 500000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function SNL() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_SNL {
label=""SNL"";
""706__transfer"" [label=""_transfer""];
""706_SNL"" [label=""SNL""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x1807cf924199c0f8a85b73c15b5c0349aa3844e5.sol,PublickOffering,contract PublickOffering is Authority { struct investorInfo{ address investor; uint256 amount; uint utime; bool hadback; },1,"subgraph cluster_296_PublickOffering {
label=""PublickOffering"";
""296_PublickOffering"" [label=""PublickOffering""];
""296_fallback"" [label=""fallback""];
""296_drawETH"" [label=""drawETH""];
""296_backETH"" [label=""backETH""];
""296_drawETH"" -> ""296_alloweDrawEth"";
""296_drawETH"" -> ""296_onlyBeneficiary"";
""296_backETH"" -> ""296_onlyBeneficiary"";
}
"
0xeba4ce0d799fe901f3af52c0e0f088d026b11c81.sol,CFNDCrowdsale,contract CFNDCrowdsale { Token public tokenReward; address public creator; address public owner = 0x56D215183E48881f10D1FaEb9325cf02171B16B7; uint256 private price; modifier isCreator() { require(msg.sender == creator); _; },1,"subgraph cluster_252_CFNDCrowdsale {
label=""CFNDCrowdsale"";
""252_setPrice"" [label=""setPrice""];
""252_kill"" [label=""kill""];
""252_sendToken"" [label=""sendToken""];
""252_CFNDCrowdsale"" [label=""CFNDCrowdsale""];
""252_setToken"" [label=""setToken""];
""252_setOwner"" [label=""setOwner""];
""252_fallback"" [label=""fallback""];
""252_setCreator"" [label=""setCreator""];
""252_kill"" -> ""252_isCreator"";
""252_setOwner"" -> ""252_isCreator"";
""252_setCreator"" -> ""252_isCreator"";
""252_setPrice"" -> ""252_isCreator"";
""252_setToken"" -> ""252_isCreator"";
""252_sendToken"" -> ""252_isCreator"";
}
"
0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol,WorldCupWinner,"contract WorldCupWinner { using SafeMath for uint256; event BuyWinner(address indexed buyer, uint256 indexed traddingTime, uint256 first, uint256 second, uint256 three, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice); event BuyWinnerList(uint256 indexed first, uint256 indexed second, uint256 indexed third,address buyer, uint256 traddingTime, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice); event BuyWinnerTwo(address indexed buyer, uint256 indexed first, uint256 indexed gameid,uint256 traddingTime, uint256 buyType,uint256 buyPrice,uint buyTotal); event ShareBonus(address indexed buyer, uint256 indexed traddingTime, uint256 indexed buyerType, uint256 gameID, uint256 remainingAmount); address public owner; uint[] _teamIDs; struct Game{ uint256 _bouns; uint[] _teams; uint256[] _teamPrice; uint _playType; bool _stop; uint256 _beginTime; }",1,"subgraph cluster_746_WorldCupWinner {
label=""WorldCupWinner"";
""746_buy"" [label=""buy""];
""746_getListTeam"" [label=""getListTeam""];
""746_buyTwo"" [label=""buyTwo""];
""746_getPool"" [label=""getPool""];
""746_constructor"" [label=""constructor""];
""746_setTeamStatus"" [label=""setTeamStatus""];
""746_batchShareAmount"" [label=""batchShareAmount""];
""746_getBonusPoolTotal"" [label=""getBonusPoolTotal""];
""746_destroy"" [label=""destroy""];
""746_createGame"" [label=""createGame""];
""746_shareAmount"" [label=""shareAmount""];
""746_setTeamPrice"" [label=""setTeamPrice""];
""746_getListTeamByPlayType"" [label=""getListTeamByPlayType""];
""746_batchShareAmount"" -> ""746_onlyOwner"";
""746_setTeamPrice"" -> ""746_onlyOwner"";
""746_shareAmount"" -> ""746_onlyOwner"";
""746_destroy"" -> ""746_onlyOwner"";
""746_setTeamStatus"" -> ""746_onlyOwner"";
""746_createGame"" -> ""746_onlyOwner"";
}
"
0x6947335452cb7a452fc337c28cb0d597806c7672.sol,SmartWeddingContract,"contract SmartWeddingContract { event WrittenContractProposed(uint timestamp, string ipfsHash, address wallet); event Signed(uint timestamp, address wallet); event ContractSigned(uint timestamp); event AssetProposed(uint timestamp, string asset, address wallet); event AssetAddApproved(uint timestamp, string asset, address wallet); event AssetAdded(uint timestamp, string asset); event AssetRemoveApproved(uint timestamp, string asset, address wallet); event AssetRemoved(uint timestamp, string asset); event DivorceApproved(uint timestamp, address wallet); event Divorced(uint timestamp); event FundsSent(uint timestamp, address wallet, uint amount); event FundsReceived(uint timestamp, address wallet, uint amount); bool public signed = false; bool public divorced = false; mapping (address => bool) private hasSigned; mapping (address => bool) private hasDivorced; address public husbandAddress; address public wifeAddress; string public writtenContractIpfsHash; struct Asset { string data; uint husbandAllocation; uint wifeAllocation; bool added; bool removed; mapping (address => bool) hasApprovedAdd; mapping (address => bool) hasApprovedRemove; }",1,"subgraph cluster_823_SmartWeddingContract {
label=""SmartWeddingContract"";
""823_pay"" [label=""pay""];
""823_constructor"" [label=""constructor""];
""823_fallback"" [label=""fallback""];
""823_signContract"" [label=""signContract""];
""823_removeAsset"" [label=""removeAsset""];
""823_approveAsset"" [label=""approveAsset""];
""823_divorce"" [label=""divorce""];
""823_proposeWrittenContract"" [label=""proposeWrittenContract""];
""823_isSameString"" [label=""isSameString""];
""823_proposeAsset"" [label=""proposeAsset""];
""823_getAssetIds"" [label=""getAssetIds""];
""823_proposeAsset"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_isNotDivorced"";
""823_signContract"" -> ""823_isSameString"";
""823_fallback"" -> ""823_isNotDivorced"";
""823_proposeWrittenContract"" -> ""823_onlySpouse"";
""823_pay"" -> ""823_onlySpouse"";
""823_proposeAsset"" -> ""823_isNotDivorced"";
""823_pay"" -> ""823_isNotDivorced"";
""823_proposeAsset"" -> ""823_isSameString"";
""823_fallback"" -> ""823_isSigned"";
""823_approveAsset"" -> ""823_isNotDivorced"";
""823_approveAsset"" -> ""823_isSigned"";
""823_approveAsset"" -> ""823_onlySpouse"";
""823_proposeAsset"" -> ""823_isSigned"";
""823_signContract"" -> ""823_onlySpouse"";
""823_divorce"" -> ""823_isSigned"";
""823_pay"" -> ""823_isSigned"";
""823_divorce"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_isSigned"";
""823_divorce"" -> ""823_isNotDivorced"";
}
"
0x89b5eaec2702ab0ff33ca397b3e66c7d925d5144.sol,Soccer,"contract Soccer { using SafeMath for uint256; event Birth(uint256 tokenId, uint256 startPrice); event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner); event Transfer(address indexed from, address indexed to, uint256 tokenId); event Approval(address indexed owner, address indexed approved, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; struct Token { address owner; uint256 price; }",1,"subgraph cluster_1466_Soccer {
label=""Soccer"";
""1466__handle"" [label=""_handle""];
""1466_getInitialPriceOfToken"" [label=""getInitialPriceOfToken""];
""1466_symbol"" [label=""symbol""];
""1466__approved"" [label=""_approved""];
""1466_transfer"" [label=""transfer""];
""1466_unlockPriceChange"" [label=""unlockPriceChange""];
""1466_setCOO"" [label=""setCOO""];
""1466_Soccer"" [label=""Soccer""];
""1466__owns"" [label=""_owns""];
""1466_changePrice"" [label=""changePrice""];
""1466_ownerOf"" [label=""ownerOf""];
""1466__addressNotNull"" [label=""_addressNotNull""];
""1466__transfer"" [label=""_transfer""];
""1466_lockPriceChange"" [label=""lockPriceChange""];
""1466_getNextPrice"" [label=""getNextPrice""];
""1466_isContract"" [label=""isContract""];
""1466_getTotalSupply"" [label=""getTotalSupply""];
""1466_payout"" [label=""payout""];
""1466_takeOwnership"" [label=""takeOwnership""];
""1466_setCEO"" [label=""setCEO""];
""1466_buyToken"" [label=""buyToken""];
""1466_createPromoCollectible"" [label=""createPromoCollectible""];
""1466_approve"" [label=""approve""];
""1466__payout"" [label=""_payout""];
""1466_priceOf"" [label=""priceOf""];
""1466_name"" [label=""name""];
""1466_tokensOfOwner"" [label=""tokensOfOwner""];
""1466_balanceOf"" [label=""balanceOf""];
""1466_implementsERC721"" [label=""implementsERC721""];
""1466_transferFrom"" [label=""transferFrom""];
""1466__addLastOwner"" [label=""_addLastOwner""];
""1466_getToken"" [label=""getToken""];
""1466_buyToken"" -> ""1466__handle"";
""1466_buyToken"" -> ""1466_isContract"";
""1466_getToken"" -> ""1466_getInitialPriceOfToken"";
""1466_takeOwnership"" -> ""1466__approved"";
""1466_tokensOfOwner"" -> ""1466_getTotalSupply"";
""1466_changePrice"" -> ""1466__owns"";
""1466_createPromoCollectible"" -> ""1466_getInitialPriceOfToken"";
""1466_createPromoCollectible"" -> ""1466__transfer"";
""1466_takeOwnership"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__addressNotNull"";
""1466_transfer"" -> ""1466__transfer"";
""1466_createPromoCollectible"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466__addLastOwner"";
""1466_payout"" -> ""1466__payout"";
""1466_setCOO"" -> ""1466_onlyCEO"";
""1466_priceOf"" -> ""1466_getInitialPriceOfToken"";
""1466_setCEO"" -> ""1466_onlyCEO"";
""1466_unlockPriceChange"" -> ""1466_onlyCLevel"";
""1466_transferFrom"" -> ""1466__owns"";
""1466_lockPriceChange"" -> ""1466_onlyCLevel"";
""1466_payout"" -> ""1466_onlyCLevel"";
""1466_buyToken"" -> ""1466_getNextPrice"";
""1466_transferFrom"" -> ""1466__addressNotNull"";
""1466_transferFrom"" -> ""1466__approved"";
""1466_transfer"" -> ""1466__owns"";
""1466_takeOwnership"" -> ""1466__transfer"";
""1466_approve"" -> ""1466__owns"";
""1466_transferFrom"" -> ""1466__transfer"";
""1466_tokensOfOwner"" -> ""1466_balanceOf"";
""1466_getToken"" -> ""1466_getNextPrice"";
""1466_buyToken"" -> ""1466_getInitialPriceOfToken"";
}
"
0x56a4d4e31c09558f6a1619dfb857a482b3bb2fb6.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private admin = msg.sender; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },1,"subgraph cluster_1210_PlayerBook {
label=""PlayerBook"";
""1210_getPlayerID"" [label=""getPlayerID""];
""1210_addGame"" [label=""addGame""];
""1210_setRegistrationFee"" [label=""setRegistrationFee""];
""1210_getPlayerLAff"" [label=""getPlayerLAff""];
""1210_useMyOldName"" [label=""useMyOldName""];
""1210_registerNameXaddr"" [label=""registerNameXaddr""];
""1210_registerNameXnameFromDapp"" [label=""registerNameXnameFromDapp""];
""1210_getNameFee"" [label=""getNameFee""];
""1210_registerNameXIDFromDapp"" [label=""registerNameXIDFromDapp""];
""1210_registerNameXaddrFromDapp"" [label=""registerNameXaddrFromDapp""];
""1210_constructor"" [label=""constructor""];
""1210_getPlayerName"" [label=""getPlayerName""];
""1210_getPlayerAddr"" [label=""getPlayerAddr""];
""1210_registerNameCore"" [label=""registerNameCore""];
""1210_addMeToGame"" [label=""addMeToGame""];
""1210_determinePID"" [label=""determinePID""];
""1210_addMeToAllGames"" [label=""addMeToAllGames""];
""1210_registerNameXID"" [label=""registerNameXID""];
""1210_checkIfNameValid"" [label=""checkIfNameValid""];
""1210_registerNameXname"" [label=""registerNameXname""];
""1210_getPlayerID"" -> ""1210_isRegisteredGame"";
""1210_registerNameXnameFromDapp"" -> ""1210_registerNameCore"";
""1210_registerNameXID"" -> ""1210_registerNameCore"";
""1210_registerNameXaddrFromDapp"" -> ""1210_determinePID"";
""1210_registerNameXaddr"" -> ""1210_registerNameCore"";
""1210_registerNameXIDFromDapp"" -> ""1210_determinePID"";
""1210_registerNameXaddrFromDapp"" -> ""1210_isRegisteredGame"";
""1210_registerNameXaddr"" -> ""1210_determinePID"";
""1210_registerNameXaddrFromDapp"" -> ""1210_registerNameCore"";
""1210_registerNameXIDFromDapp"" -> ""1210_registerNameCore"";
""1210_registerNameXIDFromDapp"" -> ""1210_isRegisteredGame"";
""1210_addMeToGame"" -> ""1210_isHuman"";
""1210_getPlayerID"" -> ""1210_determinePID"";
""1210_registerNameXname"" -> ""1210_registerNameCore"";
""1210_registerNameXID"" -> ""1210_determinePID"";
""1210_registerNameXname"" -> ""1210_isHuman"";
""1210_registerNameXnameFromDapp"" -> ""1210_determinePID"";
""1210_useMyOldName"" -> ""1210_isHuman"";
""1210_addMeToAllGames"" -> ""1210_isHuman"";
""1210_registerNameXnameFromDapp"" -> ""1210_isRegisteredGame"";
""1210_setRegistrationFee"" -> ""1210_onlyAdmin"";
""1210_addGame"" -> ""1210_onlyAdmin"";
""1210_registerNameXID"" -> ""1210_isHuman"";
""1210_registerNameXaddr"" -> ""1210_isHuman"";
""1210_registerNameXname"" -> ""1210_determinePID"";
}
"
0x1b85440d66a5903deabb24807d739019ff1741e6.sol,Subrosa,"contract Subrosa { using SafeMath for uint256; event Deposit(address _from, uint256 _amount); event WithDraw(address _to, uint256 _amount); address public owner; address public contractAddress; modifier onlyOwner() { require (msg.sender == owner); _; }",1,"subgraph cluster_201_Subrosa {
label=""Subrosa"";
""201_getBalance"" [label=""getBalance""];
""201_withDraw"" [label=""withDraw""];
""201_withDrawAmount"" [label=""withDrawAmount""];
""201_fallback"" [label=""fallback""];
""201_Subrosa"" [label=""Subrosa""];
""201_withDrawAmount"" -> ""201_onlyOwner"";
""201_withDraw"" -> ""201_onlyOwner"";
}
"
0x728781e75735dc0962df3a51d7ef47e798a7107e.sol,WolkExchange,"contract WolkExchange is WolkProtocol, WolkTGE { uint256 public maxPerExchangeBP = 50; address public exchangeFormula; bool public exchangeIsRunning = false; modifier isExchangable { require(exchangeIsRunning && allSaleCompleted); _; }",1,"subgraph cluster_2452_WolkExchange {
label=""WolkExchange"";
""2452_sellWolk"" [label=""sellWolk""];
""2452_updateExchangeStatus"" [label=""updateExchangeStatus""];
""2452_purchaseWolk"" [label=""purchaseWolk""];
""2452_estLiquidationCap"" [label=""estLiquidationCap""];
""2452_sellWolkEstimate"" [label=""sellWolkEstimate""];
""2452_setMaxPerExchange"" [label=""setMaxPerExchange""];
""2452_fallback"" [label=""fallback""];
""2452_purchaseWolkEstimate"" [label=""purchaseWolkEstimate""];
""2452_setExchangeFormula"" [label=""setExchangeFormula""];
""2452_setExchangeFormula"" -> ""2452_sellWolkEstimate"";
""2452_updateExchangeStatus"" -> ""2452_onlyOwner"";
""2452_estLiquidationCap"" -> ""2452_safeMul"";
""2452_sellWolk"" -> ""2452_safeSub"";
""2452_sellWolk"" -> ""2452_isExchangable"";
""2452_purchaseWolk"" -> ""2452_safeAdd"";
""2452_purchaseWolk"" -> ""2452_purchaseWolkEstimate"";
""2452_updateExchangeStatus"" -> ""2452_purchaseWolkEstimate"";
""2452_updateExchangeStatus"" -> ""2452_sellWolkEstimate"";
""2452_sellWolk"" -> ""2452_sellWolkEstimate"";
""2452_estLiquidationCap"" -> ""2452_safeDiv"";
""2452_setMaxPerExchange"" -> ""2452_onlyOwner"";
""2452_setExchangeFormula"" -> ""2452_onlyOwner"";
""2452_purchaseWolk"" -> ""2452_isExchangable"";
""2452_sellWolk"" -> ""2452_estLiquidationCap"";
""2452_setExchangeFormula"" -> ""2452_purchaseWolkEstimate"";
}
"
0x6d54549975e0fef50cd954491a6abee84c6f4e61.sol,QuizTest,contract QuizTest { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_131_QuizTest {
label=""QuizTest"";
""131_NewQuestion"" [label=""NewQuestion""];
""131_Try"" [label=""Try""];
""131_StopGame"" [label=""StopGame""];
""131_newQuestioner"" [label=""newQuestioner""];
""131_start_quiz_game"" [label=""start_quiz_game""];
""131_fallback"" [label=""fallback""];
""131_StopGame"" -> ""131_onlyQuestionSender"";
""131_newQuestioner"" -> ""131_onlyQuestionSender"";
""131_NewQuestion"" -> ""131_onlyQuestionSender"";
}
"
0x7271f8fdd7693dca37b40403080abe89ae740168.sol,Game,contract Game { address constant private PROMO = 0x51A2BF880F4db7713E95498833308ffE4D61d080; uint constant public PROMO_PERCENT = 15; uint constant public MULTIPLIER = 120; uint constant public MAX_DEPOSIT = 1 ether; uint constant public MIN_DEPOSIT = 0.01 ether; uint constant public LAST_DEPOSIT_PERCENT = 5; LastDeposit public last; struct Deposit { address depositor; uint128 deposit; uint128 expect; },1,"subgraph cluster_474_Game {
label=""Game"";
""474_pay"" [label=""pay""];
""474_getDeposit"" [label=""getDeposit""];
""474_getDepositsCount"" [label=""getDepositsCount""];
""474_getDeposits"" [label=""getDeposits""];
""474_getQueueLength"" [label=""getQueueLength""];
""474_fallback"" [label=""fallback""];
""474_fallback"" -> ""474_pay"";
""474_getDeposits"" -> ""474_getDepositsCount"";
}
"
0x2aaefbac989f8951436c36474c304af7bf31bb26.sol,Administration,"contract Administration is SafeMath{ event Pause(); event Unpause(); event PriceRaise(); event PriceStop(); address public CEOAddress; address public CTOAddress; uint oneEth = 1 ether; uint public feeUnit = 1 finney; uint public preSaleDurance = 45 days; bool public paused = false; bool public pricePause = true; uint public startTime; uint public endTime; uint[3] raiseIndex = [ 3, 7, 5 ]; uint[3] rewardPercent = [ 15, 25, 30 ]; modifier onlyCEO() { require(msg.sender == CEOAddress); _; }",1,"subgraph cluster_486_Administration {
label=""Administration"";
""486_computePrice"" [label=""computePrice""];
""486_unPausePriceRaise"" [label=""unPausePriceRaise""];
""486_setPreSaleDurance"" [label=""setPreSaleDurance""];
""486_pausePriceRaise"" [label=""pausePriceRaise""];
""486_pause"" [label=""pause""];
""486_setCTO"" [label=""setCTO""];
""486__random"" [label=""_random""];
""486_unpause"" [label=""unpause""];
""486_withdrawBalance"" [label=""withdrawBalance""];
""486_setFeeUnit"" [label=""setFeeUnit""];
""486_WhoIsTheContractMaster"" [label=""WhoIsTheContractMaster""];
""486_withdrawBalanceAll"" [label=""withdrawBalanceAll""];
""486__computePrice"" [label=""_computePrice""];
""486_computePrice"" -> ""486__computePrice"";
""486_unpause"" -> ""486_whenPaused"";
""486_setCTO"" -> ""486_onlyCEO"";
""486_unpause"" -> ""486_onlyCEO"";
""486_setFeeUnit"" -> ""486_onlyCEO"";
""486_pause"" -> ""486_whenNotPaused"";
""486_unPausePriceRaise"" -> ""486_onlyCEO"";
""486__computePrice"" -> ""486_safeSub"";
""486_pausePriceRaise"" -> ""486_onlyCEO"";
""486_pause"" -> ""486_onlyCEO"";
""486_computePrice"" -> ""486_safeSub"";
""486_withdrawBalanceAll"" -> ""486_onlyAdmin"";
""486_withdrawBalance"" -> ""486_onlyAdmin"";
""486_setPreSaleDurance"" -> ""486_onlyCEO"";
}
"
0x75cb629408d1ea387df0a1f755e0bc371a5fa036.sol,GoodLuckCasino,"contract GoodLuckCasino is Ownable{ using SafeMath for uint; event LOG_Deposit(bytes32 userID, address walletAddr, uint amount); event LOG_Withdraw(address user, uint amount); event LOG_Bankroll(address sender, uint value); event LOG_OwnerWithdraw(address _to, uint _val); event LOG_ContractStopped(); event LOG_ContractResumed(); bool public isStopped; mapping (bytes32 => uint[]) depositList; modifier onlyIfNotStopped { require(!isStopped); _; }",1,"subgraph cluster_429_GoodLuckCasino {
label=""GoodLuckCasino"";
""429_userWithdraw"" [label=""userWithdraw""];
""429_bankroll"" [label=""bankroll""];
""429_ownerWithdraw"" [label=""ownerWithdraw""];
""429_getUserDeposit"" [label=""getUserDeposit""];
""429_resumeContract"" [label=""resumeContract""];
""429_stopContract"" [label=""stopContract""];
""429_userDeposit"" [label=""userDeposit""];
""429_constructor"" [label=""constructor""];
""429_fallback"" [label=""fallback""];
""429_getUserDepositList"" [label=""getUserDepositList""];
""429_ownerWithdraw"" -> ""429_onlyOwner"";
""429_userWithdraw"" -> ""429_onlyOwner"";
""429_stopContract"" -> ""429_onlyIfNotStopped"";
""429_userWithdraw"" -> ""429_onlyIfNotStopped"";
""429_bankroll"" -> ""429_onlyOwner"";
""429_stopContract"" -> ""429_onlyOwner"";
""429_resumeContract"" -> ""429_onlyIfStopped"";
""429_userDeposit"" -> ""429_onlyIfNotStopped"";
""429_resumeContract"" -> ""429_onlyOwner"";
}
"
0xf0cc17aa0ce1c6595e56c9c60b19c1c546ade50d.sol,Vault,"contract Vault is TokenVault { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event OpenDate(uint date); mapping (address => uint) public Deposits; uint minDeposit; bool Locked; uint Date; function init() payable open { Owner = msg.sender; minDeposit = 0.5 ether; Locked = false; deposit(); }",1,"subgraph cluster_115_TokenVault {
label=""TokenVault"";
""115_withdrawToken"" [label=""withdrawToken""];
""115_withdrawTokenTo"" [label=""withdrawTokenTo""];
""115_emtpyTo"" [label=""emtpyTo""];
""115_emtpyTo"" -> ""115_withdrawTokenTo"";
""115_withdrawToken"" -> ""115_withdrawTokenTo"";
""115_withdrawTokenTo"" -> ""115_onlyOwner"";
}
"
0x8668ef4534ec8716dede42807084a526ff4904e2.sol,BatchTransferContract,contract BatchTransferContract { using SafeMath for uint; using Math for uint; address public owner; function BatchTransferContract(address _owner) public { owner = _owner; },1,"subgraph cluster_309_BatchTransferContract {
label=""BatchTransferContract"";
""309_BatchTransferContract"" [label=""BatchTransferContract""];
""309_batchRefund"" [label=""batchRefund""];
""309_drain"" [label=""drain""];
""309_fallback"" [label=""fallback""];
}
"
0x515c5f699ba46bb43f720914b5615e00aa160871.sol,MultiSigWallet,"contract MultiSigWallet { uint constant public MAX_OWNER_COUNT = 50; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_962_MultiSigWallet {
label=""MultiSigWallet"";
""962_submitTransaction"" [label=""submitTransaction""];
""962_removeOwner"" [label=""removeOwner""];
""962_getConfirmationCount"" [label=""getConfirmationCount""];
""962_addOwner"" [label=""addOwner""];
""962_MultiSigWallet"" [label=""MultiSigWallet""];
""962_revokeConfirmation"" [label=""revokeConfirmation""];
""962_getOwners"" [label=""getOwners""];
""962_confirmTransaction"" [label=""confirmTransaction""];
""962_isConfirmed"" [label=""isConfirmed""];
""962_fallback"" [label=""fallback""];
""962_addTransaction"" [label=""addTransaction""];
""962_getConfirmations"" [label=""getConfirmations""];
""962_replaceOwner"" [label=""replaceOwner""];
""962_executeTransaction"" [label=""executeTransaction""];
""962_getTransactionCount"" [label=""getTransactionCount""];
""962_getTransactionIds"" [label=""getTransactionIds""];
""962_changeRequirement"" [label=""changeRequirement""];
""962_submitTransaction"" -> ""962_addTransaction"";
""962_removeOwner"" -> ""962_onlyWallet"";
""962_changeRequirement"" -> ""962_validRequirement"";
""962_confirmTransaction"" -> ""962_ownerExists"";
""962_replaceOwner"" -> ""962_ownerExists"";
""962_confirmTransaction"" -> ""962_notConfirmed"";
""962_addOwner"" -> ""962_ownerDoesNotExist"";
""962_removeOwner"" -> ""962_changeRequirement"";
""962_changeRequirement"" -> ""962_onlyWallet"";
""962_revokeConfirmation"" -> ""962_confirmed"";
""962_confirmTransaction"" -> ""962_transactionExists"";
""962_addTransaction"" -> ""962_notNull"";
""962_replaceOwner"" -> ""962_ownerDoesNotExist"";
""962_executeTransaction"" -> ""962_notExecuted"";
""962_addOwner"" -> ""962_validRequirement"";
""962_addOwner"" -> ""962_notNull"";
""962_confirmTransaction"" -> ""962_executeTransaction"";
""962_replaceOwner"" -> ""962_onlyWallet"";
""962_revokeConfirmation"" -> ""962_notExecuted"";
""962_submitTransaction"" -> ""962_confirmTransaction"";
""962_addOwner"" -> ""962_onlyWallet"";
""962_removeOwner"" -> ""962_ownerExists"";
""962_executeTransaction"" -> ""962_isConfirmed"";
""962_MultiSigWallet"" -> ""962_validRequirement"";
""962_revokeConfirmation"" -> ""962_ownerExists"";
}
"
0x0e915b35cc269b2dfc8bbd8e4a88ed4884a53efc.sol,CrowdSale,"contract CrowdSale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public startTime; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool public crowdsaleClosed = false ; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); event CrowdsaleClose(uint totalAmountRaised, bool fundingGoalReached); function CrowdSale( address ifSuccessfulSendTo, uint fundingGoalInEthers, uint startTimeInSeconds, uint durationInMinutes, uint szaboCostOfEachToken, address addressOfTokenUsedAsReward ) public { beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; startTime = startTimeInSeconds; deadline = startTimeInSeconds + durationInMinutes * 1 minutes; price = szaboCostOfEachToken * 1 finney; tokenReward = token(addressOfTokenUsedAsReward); }",1,"subgraph cluster_344_CrowdSale {
label=""CrowdSale"";
""344_safeWithdrawal"" [label=""safeWithdrawal""];
""344_CrowdSale"" [label=""CrowdSale""];
""344_closeCrowdsale"" [label=""closeCrowdsale""];
""344_checkGoalReached"" [label=""checkGoalReached""];
""344_purchase"" [label=""purchase""];
""344_shiftSalePurchase"" [label=""shiftSalePurchase""];
""344_fallback"" [label=""fallback""];
""344_closeCrowdsale"" -> ""344_isOwner"";
""344_safeWithdrawal"" -> ""344_isClosed"";
""344_fallback"" -> ""344_isOpen"";
""344_safeWithdrawal"" -> ""344_afterDeadline"";
""344_shiftSalePurchase"" -> ""344_purchase"";
""344_fallback"" -> ""344_purchase"";
""344_purchase"" -> ""344_checkGoalReached"";
""344_fallback"" -> ""344_afterStart"";
}
"
0xbcdc85a62e5f29930a43cc20d15fe96786873084.sol,ENJOY,contract ENJOY { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ENJOY {
label=""ENJOY"";
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x559cc6564ef51bd1ad9fbe752c9455cb6fb7feb1.sol,GuessNumber,contract GuessNumber { uint256 private randomNumber = uint256( keccak256(now) ) % 10 + 1; uint256 public lastPlayed; uint256 public minBet = 0.1 ether; address owner; struct GuessHistory { address player; uint256 number; },1,"subgraph cluster_122_GuessNumber {
label=""GuessNumber"";
""122_fallback"" [label=""fallback""];
""122_GuessNumber"" [label=""GuessNumber""];
""122_changeMinBet"" [label=""changeMinBet""];
""122_kill"" [label=""kill""];
""122_guessNumber"" [label=""guessNumber""];
""122_kill"" -> ""122_onlyOwner"";
""122_changeMinBet"" -> ""122_onlyOwner"";
}
"
0x0254ffd95dd7c8e27d4c7a32e24464196efcc852.sol,BEATA,"contract BEATA is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 10; uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function BEATA() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_BEATA {
label=""BEATA"";
""706__transfer"" [label=""_transfer""];
""706_BEATA"" [label=""BEATA""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x70bf9df6967dc96156e76cc43b928a7ef02e159a.sol,X_GAME,contract X_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_X_GAME {
label=""X_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_StopGame"" [label=""StopGame""];
}
"
0xd745a7883a6bd19389b6b9dc8580c2ff873f0cd1.sol,Earthpayment,"contract Earthpayment is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 7; uint256 public constant INITIAL_SUPPLY = 21000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function Earthpayment() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_Earthpayment {
label=""Earthpayment"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_Earthpayment"" [label=""Earthpayment""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x71a42fd60323204912468cd32a8283ed5d45a28f.sol,Slugroad,"contract Slugroad { using SafeMath for uint; event WithdrewBalance (address indexed player, uint eth); event BoughtSlug (address indexed player, uint eth, uint slug); event SkippedAhead (address indexed player, uint eth, uint slug); event TradedMile (address indexed player, uint eth, uint mile); event BecameDriver (address indexed player, uint eth); event TookWheel (address indexed player, uint eth); event ThrewSlug (address indexed player); event JumpedOut (address indexed player, uint eth); event TimeWarped (address indexed player, uint indexed loop, uint eth); event NewLoop (address indexed player, uint indexed loop); event PaidThrone (address indexed player, uint eth); event BoostedPot (address indexed player, uint eth); uint256 constant public RACE_TIMER_START = 604800; uint256 constant public HYPERSPEED_LENGTH = 3600; uint256 constant public THROW_SLUG_REQ = 200; uint256 constant public DRIVER_TIMER_BOOST = 360; uint256 constant public SLUG_COST_FLOOR = 0.000025 ether; uint256 constant public DIV_SLUG_COST = 10000; uint256 constant public TOKEN_MAX_BUY = 1 ether; uint256 constant public MIN_SPEED = 100; uint256 constant public MAX_SPEED = 1000; uint256 constant public ACCEL_FACTOR = 672; uint256 constant public MILE_REQ = 6000; address constant public SNAILTHRONE = 0x261d650a521103428C6827a11fc0CBCe96D74DBc; address public starter; bool public gameStarted; uint256 public loop; uint256 public timer; address public driver; bool public hyperSpeed = false; uint256 public lastHijack; uint256 public loopChest; uint256 public slugBank; uint256 public thronePot; uint256 public divPerSlug; uint256 public maxSlug; mapping (address => uint256) public slugNest; mapping (address => uint256) public playerBalance; mapping (address => uint256) public claimedDiv; mapping (address => uint256) public mile; constructor() public { starter = msg.sender; gameStarted = false; }",1,"subgraph cluster_1334_Slugroad {
label=""Slugroad"";
""1334_BecomeDriver"" [label=""BecomeDriver""];
""1334_ComputeSlugCost"" [label=""ComputeSlugCost""];
""1334_TradeMile"" [label=""TradeMile""];
""1334_StartRace"" [label=""StartRace""];
""1334_ComputeDiv"" [label=""ComputeDiv""];
""1334_ComputeMileDriven"" [label=""ComputeMileDriven""];
""1334_PotSplit"" [label=""PotSplit""];
""1334_PayThrone"" [label=""PayThrone""];
""1334_ComputeHyperReward"" [label=""ComputeHyperReward""];
""1334_GetBalance"" [label=""GetBalance""];
""1334_ComputeSpeed"" [label=""ComputeSpeed""];
""1334_TimeWarp"" [label=""TimeWarp""];
""1334_WithdrawBalance"" [label=""WithdrawBalance""];
""1334_GetMile"" [label=""GetMile""];
""1334_BuySlug"" [label=""BuySlug""];
""1334_fallback"" [label=""fallback""];
""1334_ComputeMileReward"" [label=""ComputeMileReward""];
""1334_ThrowSlug"" [label=""ThrowSlug""];
""1334_SkipAhead"" [label=""SkipAhead""];
""1334_GetNest"" [label=""GetNest""];
""1334_constructor"" [label=""constructor""];
""1334_ComputeBuy"" [label=""ComputeBuy""];
""1334_ClaimDiv"" [label=""ClaimDiv""];
""1334_JumpOut"" [label=""JumpOut""];
""1334_SkipAhead"" -> ""1334_BecomeDriver"";
""1334_JumpOut"" -> ""1334_ComputeHyperReward"";
""1334_ThrowSlug"" -> ""1334_ClaimDiv"";
""1334_JumpOut"" -> ""1334_ComputeMileDriven"";
""1334_BecomeDriver"" -> ""1334_ComputeMileDriven"";
""1334_TradeMile"" -> ""1334_ComputeMileReward"";
""1334_StartRace"" -> ""1334_BuySlug"";
""1334_TimeWarp"" -> ""1334_ComputeMileDriven"";
""1334_BuySlug"" -> ""1334_BecomeDriver"";
""1334_SkipAhead"" -> ""1334_ComputeBuy"";
""1334_BuySlug"" -> ""1334_ComputeBuy"";
""1334_ComputeBuy"" -> ""1334_ComputeSlugCost"";
""1334_ClaimDiv"" -> ""1334_ComputeDiv"";
""1334_ComputeMileDriven"" -> ""1334_ComputeSpeed"";
""1334_WithdrawBalance"" -> ""1334_ClaimDiv"";
""1334_ThrowSlug"" -> ""1334_BecomeDriver"";
""1334_SkipAhead"" -> ""1334_ClaimDiv"";
""1334_BuySlug"" -> ""1334_PotSplit"";
""1334_SkipAhead"" -> ""1334_PotSplit"";
}
"
0xd7afbf5141a7f1d6b0473175f7a6b0a7954ed3d2.sol,CryptoEngineer,contract CryptoEngineer is PullPayment{ address public administrator; uint256 public prizePool = 0; uint256 public numberOfEngineer = 8; uint256 public numberOfBoosts = 5; address public gameSponsor; uint256 public gameSponsorPrice = 0.32 ether; uint256 public VIRUS_MINING_PERIOD = 86400; uint256 public CRTSTAL_MINING_PERIOD = 86400; uint256 public BASE_PRICE = 0.01 ether; address public miningWarAddress; CryptoMiningWarInterface public MiningWar; mapping(address => Player) public players; mapping(uint256 => BoostData) public boostData; mapping(uint256 => EngineerData) public engineers; mapping(address => bool) public miniGames; struct Player { mapping(uint256 => uint256) engineersCount; uint256 virusNumber; uint256 research; uint256 lastUpdateTime; bool endLoadOldData; },1,"subgraph cluster_1963_CryptoEngineer {
label=""CryptoEngineer"";
""1963_buyBooster"" [label=""buyBooster""];
""1963_buyEngineer"" [label=""buyEngineer""];
""1963_hasBooster"" [label=""hasBooster""];
""1963_addVirus"" [label=""addVirus""];
""1963_setPlayerEngineersCount"" [label=""setPlayerEngineersCount""];
""1963_initBoostData"" [label=""initBoostData""];
""1963_devFee"" [label=""devFee""];
""1963_setGameSponsorInfo"" [label=""setGameSponsorInfo""];
""1963_getBoosterData"" [label=""getBoosterData""];
""1963_isEngineerContract"" [label=""isEngineerContract""];
""1963_becomeGameSponsor"" [label=""becomeGameSponsor""];
""1963_upgrade"" [label=""upgrade""];
""1963_setPlayerLastUpdateTime"" [label=""setPlayerLastUpdateTime""];
""1963_claimPrizePool"" [label=""claimPrizePool""];
""1963_updateVirus"" [label=""updateVirus""];
""1963_setBoostData"" [label=""setBoostData""];
""1963_addEngineer"" [label=""addEngineer""];
""1963_calCurrentCrystals"" [label=""calCurrentCrystals""];
""1963_calCurrentVirus"" [label=""calCurrentVirus""];
""1963_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1963_isContractMiniGame"" [label=""isContractMiniGame""];
""1963_addPrizePool"" [label=""addPrizePool""];
""1963_addMiningWarPrizePool"" [label=""addMiningWarPrizePool""];
""1963_getResearchPerDay"" [label=""getResearchPerDay""];
""1963_subVirus"" [label=""subVirus""];
""1963_setPlayerResearch"" [label=""setPlayerResearch""];
""1963_getPlayerData"" [label=""getPlayerData""];
""1963_initEngineer"" [label=""initEngineer""];
""1963_distributedToOwner"" [label=""distributedToOwner""];
""1963_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1963_subResearch"" [label=""subResearch""];
""1963_setupMiniGame"" [label=""setupMiniGame""];
""1963_constructor"" [label=""constructor""];
""1963_setContractsMiniGame"" [label=""setContractsMiniGame""];
""1963_updateResearch"" [label=""updateResearch""];
""1963_addResearch"" [label=""addResearch""];
""1963_fallback"" [label=""fallback""];
""1963_setPlayerVirusNumber"" [label=""setPlayerVirusNumber""];
""1963_getResearchPerDay"" -> ""1963_hasBooster"";
""1963_buyEngineer"" -> ""1963_devFee"";
""1963_buyEngineer"" -> ""1963_updateResearch"";
""1963_becomeGameSponsor"" -> ""1963_addPrizePool"";
""1963_setGameSponsorInfo"" -> ""1963_onlyContractsMiniGame"";
""1963_fallback"" -> ""1963_addPrizePool"";
""1963_buyBooster"" -> ""1963_distributedToOwner"";
""1963_setContractsMiniGame"" -> ""1963_isAdministrator"";
""1963_setBoostData"" -> ""1963_onlyContractsMiniGame"";
""1963_buyEngineer"" -> ""1963_addPrizePool"";
""1963_buyEngineer"" -> ""1963_distributedToOwner"";
""1963_addEngineer"" -> ""1963_isAdministrator"";
""1963_addResearch"" -> ""1963_updateVirus"";
""1963_setPlayerEngineersCount"" -> ""1963_onlyContractsMiniGame"";
""1963_setPlayerLastUpdateTime"" -> ""1963_onlyContractsMiniGame"";
""1963_becomeGameSponsor"" -> ""1963_disableContract"";
""1963_upgrade"" -> ""1963_isAdministrator"";
""1963_addResearch"" -> ""1963_onlyContractsMiniGame"";
""1963_updateVirus"" -> ""1963_calCurrentVirus"";
""1963_subVirus"" -> ""1963_updateVirus"";
""1963_getPlayerData"" -> ""1963_getResearchPerDay"";
""1963_setMiningWarInterface"" -> ""1963_isAdministrator"";
""1963_addEngineer"" -> ""1963_updateVirus"";
""1963_buyBooster"" -> ""1963_addMiningWarPrizePool"";
""1963_buyBooster"" -> ""1963_addPrizePool"";
""1963_buyEngineer"" -> ""1963_updateVirus"";
""1963_constructor"" -> ""1963_initEngineer"";
""1963_removeContractMiniGame"" -> ""1963_isAdministrator"";
""1963_constructor"" -> ""1963_setMiningWarInterface"";
""1963_calCurrentVirus"" -> ""1963_getResearchPerDay"";
""1963_claimPrizePool"" -> ""1963_onlyContractsMiniGame"";
""1963_buyEngineer"" -> ""1963_disableContract"";
""1963_getPlayerData"" -> ""1963_calCurrentVirus"";
""1963_subVirus"" -> ""1963_onlyContractsMiniGame"";
""1963_subResearch"" -> ""1963_onlyContractsMiniGame"";
""1963_addVirus"" -> ""1963_onlyContractsMiniGame"";
""1963_subResearch"" -> ""1963_updateVirus"";
""1963_buyBooster"" -> ""1963_devFee"";
""1963_buyBooster"" -> ""1963_updateVirus"";
""1963_setPlayerResearch"" -> ""1963_onlyContractsMiniGame"";
""1963_setPlayerVirusNumber"" -> ""1963_onlyContractsMiniGame"";
""1963_addEngineer"" -> ""1963_updateResearch"";
""1963_buyEngineer"" -> ""1963_addMiningWarPrizePool"";
""1963_constructor"" -> ""1963_initBoostData"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllRefundEscrow,contract ClinicAllRefundEscrow is RefundEscrow { using Math for uint256; struct RefundeeRecord { bool isRefunded; uint256 index; },1,"subgraph cluster_2170_ClinicAllRefundEscrow {
label=""ClinicAllRefundEscrow"";
""2170_deposit"" [label=""deposit""];
""2170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""2170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""2170_withdrawChunk"" [label=""withdrawChunk""];
""2170_withdraw"" [label=""withdraw""];
""2170_close"" [label=""close""];
""2170_removeRefundeeByIndex"" [label=""removeRefundeeByIndex""];
""2170_refundeesListLength"" [label=""refundeesListLength""];
""2170_withdrawEverything"" [label=""withdrawEverything""];
""2170_depositsOf"" [label=""depositsOf""];
""2170_beneficiaryDepositsOf"" [label=""beneficiaryDepositsOf""];
""2170_constructor"" [label=""constructor""];
""2170_depositFunds"" [label=""depositFunds""];
""2170_manualRefund"" [label=""manualRefund""];
""2170_withdrawChunk"" -> ""2170_removeRefundeeByIndex"";
""2170_manualRefund"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_onlyOwner"";
""2170_close"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawChunk"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawAll"" -> ""2170_onlyOwner"";
""2170_constructor"" -> ""2170_constructor"";
""2170_close"" -> ""2170_close"";
""2170_manualRefund"" -> ""2170_depositsOf"";
""2170_manualRefund"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_withdrawChunk"";
""2170_depositFunds"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_depositsOf"";
""2170_refundeesListLength"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_depositsOf"";
}
"
0x1e85407e080a5e6d20a3a95fcdddfc32146fc8e5.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1223_MiniMeToken {
label=""MiniMeToken"";
""1223_approve"" [label=""approve""];
""1223_createCloneToken"" [label=""createCloneToken""];
""1223_doApprove"" [label=""doApprove""];
""1223_isContract"" [label=""isContract""];
""1223_doTransfer"" [label=""doTransfer""];
""1223_destroyTokens"" [label=""destroyTokens""];
""1223_totalSupplyAt"" [label=""totalSupplyAt""];
""1223_constructor"" [label=""constructor""];
""1223_balanceOf"" [label=""balanceOf""];
""1223_updateValueAtNow"" [label=""updateValueAtNow""];
""1223_generateTokens"" [label=""generateTokens""];
""1223_balanceOfAt"" [label=""balanceOfAt""];
""1223_min"" [label=""min""];
""1223_claimTokens"" [label=""claimTokens""];
""1223_approveAndCall"" [label=""approveAndCall""];
""1223_transfer"" [label=""transfer""];
""1223_enableTransfers"" [label=""enableTransfers""];
""1223_allowance"" [label=""allowance""];
""1223_fallback"" [label=""fallback""];
""1223_transferFrom"" [label=""transferFrom""];
""1223_getValueAt"" [label=""getValueAt""];
""1223_totalSupply"" [label=""totalSupply""];
""1223_balanceOf"" -> ""1223_balanceOfAt"";
""1223_destroyTokens"" -> ""1223_updateValueAtNow"";
""1223_enableTransfers"" -> ""1223_onlyController"";
""1223_fallback"" -> ""1223_isContract"";
""1223_approveAndCall"" -> ""1223_approve"";
""1223_totalSupply"" -> ""1223_totalSupplyAt"";
""1223_destroyTokens"" -> ""1223_onlyController"";
""1223_claimTokens"" -> ""1223_onlyController"";
""1223_generateTokens"" -> ""1223_updateValueAtNow"";
""1223_doTransfer"" -> ""1223_balanceOfAt"";
""1223_destroyTokens"" -> ""1223_balanceOf"";
""1223_balanceOfAt"" -> ""1223_min"";
""1223_totalSupplyAt"" -> ""1223_min"";
""1223_doTransfer"" -> ""1223_isContract"";
""1223_transfer"" -> ""1223_doTransfer"";
""1223_generateTokens"" -> ""1223_balanceOf"";
""1223_generateTokens"" -> ""1223_totalSupply"";
""1223_destroyTokens"" -> ""1223_totalSupply"";
""1223_generateTokens"" -> ""1223_onlyController"";
""1223_doApprove"" -> ""1223_isContract"";
""1223_balanceOfAt"" -> ""1223_getValueAt"";
""1223_approve"" -> ""1223_doApprove"";
""1223_doTransfer"" -> ""1223_updateValueAtNow"";
""1223_transferFrom"" -> ""1223_doTransfer"";
""1223_totalSupplyAt"" -> ""1223_getValueAt"";
}
"
0x5094f35a78dbe896c4f357bf9165448be40309de.sol,Preallocation,"contract Preallocation is Ownable { using SafeMath for uint; address public investor; uint public maxBalance; enum States { Pending, Success, Fail }",1,"subgraph cluster_346_Preallocation {
label=""Preallocation"";
""346_setFailed"" [label=""setFailed""];
""346_buyTokens"" [label=""buyTokens""];
""346_setInvestor"" [label=""setInvestor""];
""346_Preallocation"" [label=""Preallocation""];
""346_withdraw"" [label=""withdraw""];
""346_fallback"" [label=""fallback""];
""346_stateIs"" [label=""stateIs""];
""346_setFailed"" -> ""346_onlyOwner"";
""346_withdraw"" -> ""346_notState"";
""346_setInvestor"" -> ""346_onlyOwner"";
""346_buyTokens"" -> ""346_onlyOwner"";
""346_withdraw"" -> ""346_onlyOwner"";
}
"
0x184b8e35fea87e75498705ea96f2326db8ee2470.sol,AirDrop,contract AirDrop is Ownable { Token public tokenInstance; constructor(address _tokenAddress) public { tokenInstance = Token(_tokenAddress); },1,"subgraph cluster_233_AirDrop {
label=""AirDrop"";
""233_doAirDrop"" [label=""doAirDrop""];
""233_transferEthToOnwer"" [label=""transferEthToOnwer""];
""233_constructor"" [label=""constructor""];
""233_fallback"" [label=""fallback""];
""233_sendBatch"" [label=""sendBatch""];
""233_kill"" [label=""kill""];
""233_transferEthToOnwer"" -> ""233_onlyOwner"";
""233_doAirDrop"" -> ""233_onlyOwner"";
""233_kill"" -> ""233_onlyOwner"";
""233_sendBatch"" -> ""233_onlyOwner"";
}
"
0x522055cdfabaed68f1fc579f18cd7a8a6e0ab79a.sol,AceDice,contract AceDice is usingOraclize { uint constant HOUSE_EDGE_PERCENT = 2; uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0004 ether; uint constant MIN_JACKPOT_BET = 0.1 ether; uint constant JACKPOT_MODULO = 1000; uint constant JACKPOT_FEE = 0.001 ether; uint constant MIN_BET = 0.01 ether; uint constant MAX_AMOUNT = 300000 ether; uint constant MAX_MASK_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO; uint constant BET_EXPIRATION_BLOCKS = 250; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; address public owner; address private nextOwner; uint public maxProfit; address public secretSigner; uint128 public jackpotSize; uint64 public oraclizeGasLimit; uint public oraclizeGasPrice; uint public todaysRewardSize; uint128 public lockedInBets; struct Bet { uint amount; uint8 rollUnder; uint40 placeBlockNumber; uint40 mask; address gambler; address inviter; },1,"subgraph cluster_7468_AceDice {
label=""AceDice"";
""7468_fallback"" [label=""fallback""];
""7468_setNickName"" [label=""setNickName""];
""7468_refundBet"" [label=""refundBet""];
""7468_getSecretSigner"" [label=""getSecretSigner""];
""7468_payTodayReward"" [label=""payTodayReward""];
""7468_setMaxProfit"" [label=""setMaxProfit""];
""7468_setAvatarIndex"" [label=""setAvatarIndex""];
""7468_increaseJackpot"" [label=""increaseJackpot""];
""7468_kill"" [label=""kill""];
""7468_placeBetWithInviter"" [label=""placeBetWithInviter""];
""7468___callback"" [label=""__callback""];
""7468_acceptNextOwner"" [label=""acceptNextOwner""];
""7468_setCroupier"" [label=""setCroupier""];
""7468_getMyAccuAmount"" [label=""getMyAccuAmount""];
""7468_setOraclizeGasLimit"" [label=""setOraclizeGasLimit""];
""7468_setSecretSigner"" [label=""setSecretSigner""];
""7468_setOraclizeGasPrice"" [label=""setOraclizeGasPrice""];
""7468_approveNextOwner"" [label=""approveNextOwner""];
""7468_sendFunds"" [label=""sendFunds""];
""7468_getDiceWinAmount"" [label=""getDiceWinAmount""];
""7468_thisBalance"" [label=""thisBalance""];
""7468_getProfile"" [label=""getProfile""];
""7468_applyVIPLevel"" [label=""applyVIPLevel""];
""7468_constructor"" [label=""constructor""];
""7468_settleBetCommon"" [label=""settleBetCommon""];
""7468_placeBet"" [label=""placeBet""];
""7468_withdrawFunds"" [label=""withdrawFunds""];
""7468___callback"" -> ""7468_parseInt"";
""7468_settleBetCommon"" -> ""7468_applyVIPLevel"";
""7468_placeBet"" -> ""7468_getDiceWinAmount"";
""7468_placeBetWithInviter"" -> ""7468_getDiceWinAmount"";
""7468_setOraclizeGasPrice"" -> ""7468_onlyOwner"";
""7468_setOraclizeGasLimit"" -> ""7468_onlyOwner"";
""7468___callback"" -> ""7468_onlyOraclize"";
""7468_setSecretSigner"" -> ""7468_onlyOwner"";
""7468_refundBet"" -> ""7468_sendFunds"";
""7468_approveNextOwner"" -> ""7468_onlyOwner"";
""7468_settleBetCommon"" -> ""7468_getDiceWinAmount"";
""7468_increaseJackpot"" -> ""7468_onlyOwner"";
""7468_setMaxProfit"" -> ""7468_onlyOwner"";
""7468_kill"" -> ""7468_onlyOwner"";
""7468_placeBet"" -> ""7468_oraclize_query"";
""7468_constructor"" -> ""7468_oraclize_setCustomGasPrice"";
""7468_constructor"" -> ""7468_oraclize_setNetwork"";
""7468_payTodayReward"" -> ""7468_onlyOwner"";
""7468_setOraclizeGasPrice"" -> ""7468_oraclize_setCustomGasPrice"";
""7468_withdrawFunds"" -> ""7468_onlyOwner"";
""7468_getSecretSigner"" -> ""7468_onlyOwner"";
""7468_settleBetCommon"" -> ""7468_sendFunds"";
""7468___callback"" -> ""7468_settleBetCommon"";
""7468_setCroupier"" -> ""7468_onlyOwner"";
""7468_withdrawFunds"" -> ""7468_sendFunds"";
""7468_placeBetWithInviter"" -> ""7468_oraclize_query"";
""7468_refundBet"" -> ""7468_getDiceWinAmount"";
}
"
0xdcb5410ef70f59a5a2839fc6d4d0b2ca981f5e2d.sol,CoinMmc,"contract CoinMmc { address public admin_address = 0x64b33dB1Cc804e7CA51D9c21F132567923D7BA00; address public account_address = 0x64b33dB1Cc804e7CA51D9c21F132567923D7BA00; mapping(address => uint256) balances; string public name = ; string public symbol = ; uint8 public decimals = 2; uint256 initSupply = 1000000000000; uint256 public totalSupply = 0; constructor() payable public { totalSupply = mul(initSupply, 10**uint256(decimals)); balances[account_address] = totalSupply; _add_lock_account(0x6efB62605A66E32582c37b835F81Bc91A6a8fb2e, mul(80000000000,10**uint256(decimals)), 1596815160); _add_lock_account(0x0ba46c0fC6a5C206855cEf215222e347E1559eDf, mul(120000000000,10**uint256(decimals)), 1596815160); _add_lock_account(0xE269695D497387DfEAFE12b0b3B54441683F63C8, mul(100000000000,10**uint256(decimals)), 1628351160); }",1,"subgraph cluster_1187_CoinMmc {
label=""CoinMmc"";
""1187_transfer"" [label=""transfer""];
""1187_constructor"" [label=""constructor""];
""1187_increaseApproval"" [label=""increaseApproval""];
""1187_div"" [label=""div""];
""1187_sub"" [label=""sub""];
""1187_allowance"" [label=""allowance""];
""1187_fallback"" [label=""fallback""];
""1187_withDraw"" [label=""withDraw""];
""1187_burn"" [label=""burn""];
""1187_setAdmin"" [label=""setAdmin""];
""1187_add"" [label=""add""];
""1187_setAirDrop"" [label=""setAirDrop""];
""1187_balanceOf"" [label=""balanceOf""];
""1187__add_lock_account"" [label=""_add_lock_account""];
""1187_buyTokens"" [label=""buyTokens""];
""1187_transferFrom"" [label=""transferFrom""];
""1187_mul"" [label=""mul""];
""1187_setDirectDrop"" [label=""setDirectDrop""];
""1187_decreaseApproval"" [label=""decreaseApproval""];
""1187__burn"" [label=""_burn""];
""1187_airDrop"" [label=""airDrop""];
""1187_approve"" [label=""approve""];
""1187_airDrop"" -> ""1187_add"";
""1187_constructor"" -> ""1187_mul"";
""1187_constructor"" -> ""1187__add_lock_account"";
""1187_buyTokens"" -> ""1187_mul"";
""1187_setAdmin"" -> ""1187_admin_only"";
""1187__burn"" -> ""1187_sub"";
""1187_setAirDrop"" -> ""1187_admin_only"";
""1187_buyTokens"" -> ""1187_div"";
""1187_increaseApproval"" -> ""1187_add"";
""1187_buyTokens"" -> ""1187_sub"";
""1187_buyTokens"" -> ""1187_add"";
""1187_airDrop"" -> ""1187_mul"";
""1187_decreaseApproval"" -> ""1187_sub"";
""1187_transferFrom"" -> ""1187_add"";
""1187_airDrop"" -> ""1187_sub"";
""1187_burn"" -> ""1187__burn"";
""1187_fallback"" -> ""1187_buyTokens"";
""1187_transfer"" -> ""1187_sub"";
""1187_fallback"" -> ""1187_airDrop"";
""1187_setDirectDrop"" -> ""1187_admin_only"";
""1187_transferFrom"" -> ""1187_sub"";
""1187_transfer"" -> ""1187_add"";
}
"
0xdccedb215833b58c8c624abe5b5c715844248816.sol,QuiZ_blIZ,contract QuiZ_blIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_QuiZ_blIZ {
label=""QuiZ_blIZ"";
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_New"" [label=""New""];
""148_Start"" [label=""Start""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_2222_RefundVault {
label=""RefundVault"";
""2222_refund"" [label=""refund""];
""2222_enableRefunds"" [label=""enableRefunds""];
""2222_deposit"" [label=""deposit""];
""2222_close"" [label=""close""];
""2222_RefundVault"" [label=""RefundVault""];
""2222_deposit"" -> ""2222_onlyOwner"";
""2222_close"" -> ""2222_onlyOwner"";
""2222_enableRefunds"" -> ""2222_onlyOwner"";
}
"
0xa4fd4ba726139d42d7b7cf18a064600cafac4f97.sol,TFTOKEN,"contract TFTOKEN is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 3; uint256 public constant INITIAL_SUPPLY = 70000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function TFTOKEN() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_TFTOKEN {
label=""TFTOKEN"";
""706_TFTOKEN"" [label=""TFTOKEN""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x72ebd62060f78d91dc4bc33e8d88f39307365f87.sol,SEA,"contract SEA { using SafeMath for uint256; string public name; string public symbol; uint256 public decimals; uint256 public totalSupply; address public owner; uint256 public basisPointsRate = 0; uint256 public maximumFee = 0; uint256 public minimumFee = 0; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezes; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed _from, address indexed _to, uint256 _value); event CollectFee(address indexed _from, address indexed _owner, uint256 fee); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Params(address indexed _owner, uint256 feeBasisPoints, uint256 minFee, uint256 maxFee); event Freeze(address indexed to, uint256 value); event Unfreeze(address indexed to, uint256 value); event Withdraw(address indexed to, uint256 value); constructor(uint256 initialSupply, uint8 decimalUnits, string tokenName, string tokenSymbol) public { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; owner = msg.sender; }",1,"subgraph cluster_827_SEA {
label=""SEA"";
""827_calFee"" [label=""calFee""];
""827_withdrawEther"" [label=""withdrawEther""];
""827_transferFrom"" [label=""transferFrom""];
""827_fallback"" [label=""fallback""];
""827_destructor"" [label=""destructor""];
""827_setParams"" [label=""setParams""];
""827_constructor"" [label=""constructor""];
""827_approve"" [label=""approve""];
""827_transfer"" [label=""transfer""];
""827_unfreeze"" [label=""unfreeze""];
""827_freeze"" [label=""freeze""];
""827_transferFrom"" -> ""827_calFee"";
""827_transfer"" -> ""827_calFee"";
}
"
0x4c0fbe1bb46612915e7967d2c3213cd4d87257ad.sol,ApisCrowdSale,contract ApisCrowdSale is Ownable { uint8 public constant decimals = 18; uint256 public fundingGoal; uint256 public fundingGoalCurrent; uint256 public priceOfApisPerFund; uint public startTime; uint public endTime; bool closed = false; SaleStatus public saleStatus; ApisToken internal tokenReward; WhiteList internal whiteList; mapping (address => Property) public fundersProperty; struct Property { uint256 reservedFunds; uint256 paidFunds; uint256 reservedApis; uint256 withdrawedApis; uint purchaseTime; },1,"subgraph cluster_2106_ApisCrowdSale {
label=""ApisCrowdSale"";
""2106_ApisCrowdSale"" [label=""ApisCrowdSale""];
""2106_claimMyApis"" [label=""claimMyApis""];
""2106_closeSale"" [label=""closeSale""];
""2106_whiteListOf"" [label=""whiteListOf""];
""2106_claimApis"" [label=""claimApis""];
""2106_isOpened"" [label=""isOpened""];
""2106_refundByOwner"" [label=""refundByOwner""];
""2106_isClaimable"" [label=""isClaimable""];
""2106_withdrawalFunds"" [label=""withdrawalFunds""];
""2106_fallback"" [label=""fallback""];
""2106_setCurrentFundingGoal"" [label=""setCurrentFundingGoal""];
""2106_buyToken"" [label=""buyToken""];
""2106_withdrawal"" [label=""withdrawal""];
""2106_setPriceOfApis"" [label=""setPriceOfApis""];
""2106_balanceOf"" [label=""balanceOf""];
""2106_closeSale"" -> ""2106_onlyOwner"";
""2106_buyToken"" -> ""2106_onSale"";
""2106_claimMyApis"" -> ""2106_claimable"";
""2106_setPriceOfApis"" -> ""2106_onlyOwner"";
""2106_buyToken"" -> ""2106_withdrawal"";
""2106_claimApis"" -> ""2106_withdrawal"";
""2106_withdrawalFunds"" -> ""2106_onlyOwner"";
""2106_claimMyApis"" -> ""2106_withdrawal"";
""2106_fallback"" -> ""2106_onSale"";
""2106_refundByOwner"" -> ""2106_onlyOwner"";
""2106_fallback"" -> ""2106_buyToken"";
""2106_setCurrentFundingGoal"" -> ""2106_onlyOwner"";
}
"
0x1860b26155ce3319ace6d1a7ad3a363b58bc97c5.sol,MatchBetting,contract MatchBetting { using SafeMath for uint256; struct Team { string name; mapping(address => uint) bettingContribution; mapping(address => uint) ledgerBettingContribution; uint totalAmount; uint totalParticipants; },1,"subgraph cluster_835_MatchBetting {
label=""MatchBetting"";
""835_placeBet"" [label=""placeBet""];
""835_getEther"" [label=""getEther""];
""835_compareStrings"" [label=""compareStrings""];
""835_setMatchOutcome"" [label=""setMatchOutcome""];
""835_getBetters"" [label=""getBetters""];
""835_getMatchInfo"" [label=""getMatchInfo""];
""835_ledgerUserBetContribution"" [label=""ledgerUserBetContribution""];
""835_setStopMatchBetting"" [label=""setStopMatchBetting""];
""835_MatchBetting"" [label=""MatchBetting""];
""835_userBetContribution"" [label=""userBetContribution""];
""835_setMatchOutcome"" -> ""835_onlyOwner"";
""835_setMatchOutcome"" -> ""835_compareStrings"";
""835_setStopMatchBetting"" -> ""835_onlyOwner"";
}
"
0x6e5dce687b949b52dad8bb1cc467d0205cb4b6e3.sol,CAC,"contract CAC is StandardToken, BurnableToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 50000000000 * (10 ** uint256(decimals)); mapping(address => uint256) public balanceLocked; mapping(address => uint256) public lockAtTime; uint public amountRaised; uint256 public buyPrice = 250000; bool public crowdsaleClosed; bool public transferEnabled = true; function CAC() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_1239_CAC {
label=""CAC"";
""1239_enableTransfer"" [label=""enableTransfer""];
""1239_getFreeBalances"" [label=""getFreeBalances""];
""1239_setPrices"" [label=""setPrices""];
""1239_lockAddress"" [label=""lockAddress""];
""1239_checkLocked"" [label=""checkLocked""];
""1239_CAC"" [label=""CAC""];
""1239__transfer"" [label=""_transfer""];
""1239_transferEx"" [label=""transferEx""];
""1239_transfer"" [label=""transfer""];
""1239_batchTransfer"" [label=""batchTransfer""];
""1239_unlockAddress"" [label=""unlockAddress""];
""1239__lock"" [label=""_lock""];
""1239_safeWithdrawal"" [label=""safeWithdrawal""];
""1239_transferFrom"" [label=""transferFrom""];
""1239_fallback"" [label=""fallback""];
""1239_transferFrom"" -> ""1239_transferFrom"";
""1239_setPrices"" -> ""1239_onlyOwner"";
""1239_transfer"" -> ""1239_transfer"";
""1239_lockAddress"" -> ""1239_onlyOwner"";
""1239_batchTransfer"" -> ""1239_onlyOwner"";
""1239_transferEx"" -> ""1239_onlyOwner"";
""1239_transfer"" -> ""1239_checkLocked"";
""1239_transferEx"" -> ""1239_transfer"";
""1239_fallback"" -> ""1239__transfer"";
""1239_safeWithdrawal"" -> ""1239_onlyOwner"";
""1239__transfer"" -> ""1239__lock"";
""1239_transferFrom"" -> ""1239_checkLocked"";
""1239_enableTransfer"" -> ""1239_onlyOwner"";
""1239_unlockAddress"" -> ""1239_onlyOwner"";
""1239_lockAddress"" -> ""1239__lock"";
}
"
0x07c206f253605a9ac4e21a9cf99d7841e8636468.sol,RYCSale,"contract RYCSale { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; address public owner; uint public amountRaised; uint public refundAmount; uint public rate = 5000; uint public constant LOW_RANGE_RATE = 1; uint public constant HIGH_RANGE_RATE = 30000; bool private rentrancy_lock = false; bool public paused = false; RYCToken public tokenReward; mapping(address => uint256) public balanceOf; mapping(address => uint256) public contributions; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); event Pause(); event Unpause(); modifier beforeDeadline() {require (currentTime() < endTime); _;}",1,"subgraph cluster_1603_RYCSale {
label=""RYCSale"";
""1603_unpause"" [label=""unpause""];
""1603_setRate"" [label=""setRate""];
""1603_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1603_checkFundingGoal"" [label=""checkFundingGoal""];
""1603_convertToMiniRYC"" [label=""convertToMiniRYC""];
""1603_changeStartTime"" [label=""changeStartTime""];
""1603_fallback"" [label=""fallback""];
""1603_pause"" [label=""pause""];
""1603_checkFundingCap"" [label=""checkFundingCap""];
""1603_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1603_constructor"" [label=""constructor""];
""1603_changeEndTime"" [label=""changeEndTime""];
""1603_terminate"" [label=""terminate""];
""1603_safeWithdrawal"" [label=""safeWithdrawal""];
""1603_currentTime"" [label=""currentTime""];
""1603_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1603_changeEndTime"" -> ""1603_onlyOwner"";
""1603_fallback"" -> ""1603_checkFundingCap"";
""1603_changeStartTime"" -> ""1603_onlyOwner"";
""1603_ownerSafeWithdrawal"" -> ""1603_onlyOwner"";
""1603_ownerAllocateTokens"" -> ""1603_checkFundingCap"";
""1603_unpause"" -> ""1603_onlyOwner"";
""1603_fallback"" -> ""1603_saleNotClosed"";
""1603_unpause"" -> ""1603_whenPaused"";
""1603_pause"" -> ""1603_whenNotPaused"";
""1603_setRate"" -> ""1603_onlyOwner"";
""1603_fallback"" -> ""1603_afterStartTime"";
""1603_ownerSafeWithdrawal"" -> ""1603_nonReentrant"";
""1603_ownerAllocateTokens"" -> ""1603_onlyOwner"";
""1603_fallback"" -> ""1603_nonReentrant"";
""1603_terminate"" -> ""1603_onlyOwner"";
""1603_ownerAllocateTokens"" -> ""1603_checkFundingGoal"";
""1603_pause"" -> ""1603_onlyOwner"";
""1603_safeWithdrawal"" -> ""1603_afterDeadline"";
""1603_fallback"" -> ""1603_beforeDeadline"";
""1603_ownerUnlockFund"" -> ""1603_afterDeadline"";
""1603_safeWithdrawal"" -> ""1603_nonReentrant"";
""1603_fallback"" -> ""1603_checkFundingGoal"";
""1603_fallback"" -> ""1603_whenNotPaused"";
""1603_ownerUnlockFund"" -> ""1603_onlyOwner"";
""1603_ownerAllocateTokens"" -> ""1603_nonReentrant"";
}
"
0xee53ca3ae3d296c0f2a128138d12a0a3a60fa1f5.sol,ZethrShell,contract ZethrShell is ZethrBankrollBridge { function WithdrawToBankroll() public { address(UsedBankrollAddresses[0]).transfer(address(this).balance); },1,"subgraph cluster_240_ZethrShell {
label=""ZethrShell"";
""240_WithdrawAndTransferToBankroll"" [label=""WithdrawAndTransferToBankroll""];
""240_WithdrawToBankroll"" [label=""WithdrawToBankroll""];
""240_WithdrawAndTransferToBankroll"" -> ""240_WithdrawToBankroll"";
}
"
0xf165c0df0b759e93e6166aecb667c7ec2a300525.sol,TokenICOGAT,contract TokenICOGAT is StandarTokentokenGAT{ address owner = msg.sender; function name() constant returns (string) { return ; },1,"subgraph cluster_854_TokenICOGAT {
label=""TokenICOGAT"";
""854_bonusCalculate"" [label=""bonusCalculate""];
""854_withdrawEtherHomeExternal"" [label=""withdrawEtherHomeExternal""];
""854_disablePurchasing"" [label=""disablePurchasing""];
""854_fallback"" [label=""fallback""];
""854_getStats"" [label=""getStats""];
""854_symbol"" [label=""symbol""];
""854_enablePurchasing"" [label=""enablePurchasing""];
""854_TokenICOGAT"" [label=""TokenICOGAT""];
""854_refund"" [label=""refund""];
""854_sendSurplusTokens"" [label=""sendSurplusTokens""];
""854_name"" [label=""name""];
""854_withdrawEtherHomeLocal"" [label=""withdrawEtherHomeLocal""];
""854_fallback"" -> ""854_bonusCalculate"";
}
"
0x264979ffd35d608e69b69681f4bbcba9877e6c4a.sol,qz_game,contract qz_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_127_qz_game {
label=""qz_game"";
""127_StopGame"" [label=""StopGame""];
""127_fallback"" [label=""fallback""];
""127_newQuestioner"" [label=""newQuestioner""];
""127_start_qz_game"" [label=""start_qz_game""];
""127_NewQuestion"" [label=""NewQuestion""];
""127_Try"" [label=""Try""];
""127_newQuestioner"" -> ""127_onlyQuestionSender"";
""127_StopGame"" -> ""127_onlyQuestionSender"";
""127_NewQuestion"" -> ""127_onlyQuestionSender"";
}
"
0xeee95f7af91b4611c0a707a0012e3ba06f7ca8d9.sol,quiz_game,contract quiz_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_quiz_game {
label=""quiz_game"";
""143_Activate"" [label=""Activate""];
""143_Try"" [label=""Try""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_StopGame"" [label=""StopGame""];
""143_fallback"" [label=""fallback""];
""143_newQuestioner"" [label=""newQuestioner""];
}
"
0xf0344800bd3ffa687e4d780357961b28995a5f46.sol,QUIZ_GAME,contract QUIZ_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_QUIZ_GAME {
label=""QUIZ_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_StartGame"" [label=""StartGame""];
}
"
0x447b4ccab1b370afbe5ae2e68c0b700be913a585.sol,AgileCycle,contract AgileCycle { using SafeMath for uint; address public operator; address public juryOperator; uint public promisedTokens; uint public raisedEther; bool public tokenReleaseAtStart; address public icoAddress; address public arbitrationAddress; bool public roundFailedToStart; address public projectWallet; address public juryOnlineWallet; struct Milestone { uint etherAmount; uint tokenAmount; uint startTime; uint finishTime; uint duration; string description; string result; },1,"subgraph cluster_3174_AgileCycle {
label=""AgileCycle"";
""3174_currentMilestone"" [label=""currentMilestone""];
""3174_assignPartition"" [label=""assignPartition""];
""3174_withdrawToken"" [label=""withdrawToken""];
""3174_finishedTimeStamp"" [label=""finishedTimeStamp""];
""3174_approveCycle"" [label=""approveCycle""];
""3174_sealTimestamp"" [label=""sealTimestamp""];
""3174_milestonesLength"" [label=""milestonesLength""];
""3174_editMilestone"" [label=""editMilestone""];
""3174_addMilestonesAndSeal"" [label=""addMilestonesAndSeal""];
""3174_payCommission"" [label=""payCommission""];
""3174_seal"" [label=""seal""];
""3174_addMilestone"" [label=""addMilestone""];
""3174_failSafe"" [label=""failSafe""];
""3174_startMilestone"" [label=""startMilestone""];
""3174_setToken"" [label=""setToken""];
""3174_disputeOpened"" [label=""disputeOpened""];
""3174_offerAccepted"" [label=""offerAccepted""];
""3174_promisedTokens"" [label=""promisedTokens""];
""3174_finishMilestone"" [label=""finishMilestone""];
""3174_withdrawEther"" [label=""withdrawEther""];
""3174_constructor"" [label=""constructor""];
""3174_investorExists"" [label=""investorExists""];
""3174_verdictExecuted"" [label=""verdictExecuted""];
""3174_addMilestone"" -> ""3174_only"";
""3174_startMilestone"" -> ""3174_payCommission"";
""3174_disputeOpened"" -> ""3174_only"";
""3174_startMilestone"" -> ""3174_sealed"";
""3174_setToken"" -> ""3174_only"";
""3174_offerAccepted"" -> ""3174_assignPartition"";
""3174_seal"" -> ""3174_only"";
""3174_addMilestonesAndSeal"" -> ""3174_only"";
""3174_addMilestonesAndSeal"" -> ""3174_notSealed"";
""3174_startMilestone"" -> ""3174_only"";
""3174_editMilestone"" -> ""3174_only"";
""3174_finishMilestone"" -> ""3174_only"";
""3174_seal"" -> ""3174_notSealed"";
""3174_verdictExecuted"" -> ""3174_only"";
""3174_addMilestone"" -> ""3174_notSealed"";
""3174_editMilestone"" -> ""3174_notSealed"";
""3174_offerAccepted"" -> ""3174_only"";
}
"
0xd2df59cfcd5086264532936afde48a5312ce96bb.sol,Auction,"contract Auction is Ownable { using SafeMath for uint256; event bidPlaced(uint bid, address _address); event etherTransfered(uint amount, address _address); string _itemName; address _highestBidder; uint _highestBid; uint _minStep; uint _end; uint _start; constructor() public { _itemName = ; _highestBid = 0; _highestBidder = address(this); _end = 1540339140; _start = _end - 3 days; _minStep = 10000000000000000; }",1,"subgraph cluster_427_Auction {
label=""Auction"";
""427_queryBid"" [label=""queryBid""];
""427_constructor"" [label=""constructor""];
""427_queryBalance"" [label=""queryBalance""];
""427_weiToOwner"" [label=""weiToOwner""];
""427_placeBid"" [label=""placeBid""];
""427_weiToOwner"" -> ""427_contract_onlyOwner"";
}
"
0x3a37dcda0503f92626c082540dfbc9d95104ab96.sol,EthernautsLogic,contract EthernautsLogic is EthernautsOwnership { address public newContractAddress; function EthernautsLogic() public { ceoAddress = msg.sender; ctoAddress = msg.sender; cooAddress = msg.sender; oracleAddress = msg.sender; paused = true; },1,"subgraph cluster_1987_EthernautsLogic {
label=""EthernautsLogic"";
""1987_withdrawBalances"" [label=""withdrawBalances""];
""1987_EthernautsLogic"" [label=""EthernautsLogic""];
""1987_unpause"" [label=""unpause""];
""1987_getBalance"" [label=""getBalance""];
""1987_setNewAddress"" [label=""setNewAddress""];
""1987_setEthernautsStorageContract"" [label=""setEthernautsStorageContract""];
""1987_unpause"" -> ""1987_whenPaused"";
""1987_unpause"" -> ""1987_unpause"";
""1987_unpause"" -> ""1987_onlyCEO"";
""1987_withdrawBalances"" -> ""1987_onlyCLevel"";
""1987_getBalance"" -> ""1987_onlyCLevel"";
""1987_setNewAddress"" -> ""1987_onlyCTO"";
""1987_setEthernautsStorageContract"" -> ""1987_onlyCLevel"";
""1987_setNewAddress"" -> ""1987_whenPaused"";
""1987_setEthernautsStorageContract"" -> ""1987_whenPaused"";
}
"
0x00676065a7854163c6a4d5f474496514d03e31c4.sol,CrystalDeposit,contract CrystalDeposit { using SafeMath for uint256; address public administrator; uint256 public HALF_TIME = 48 hours; uint256 public MIN_TIME_WITH_DEADLINE = 12 hours; uint256 public round = 0; CryptoEngineerInterface public Engineer; CryptoMiningWarInterface public MiningWar; address miningWarAddress; uint256 miningWarDeadline; uint256 constant private CRTSTAL_MINING_PERIOD = 86400; mapping(uint256 => Game) public games; mapping(address => Player) public players; mapping(address => bool) public miniGames; struct Game { uint256 round; uint256 crystals; uint256 prizePool; uint256 startTime; uint256 endTime; bool ended; },1,"subgraph cluster_1066_CrystalDeposit {
label=""CrystalDeposit"";
""1066_endRound"" [label=""endRound""];
""1066_upgrade"" [label=""upgrade""];
""1066_startRound"" [label=""startRound""];
""1066_getData"" [label=""getData""];
""1066_setupMiniGame"" [label=""setupMiniGame""];
""1066_calculateReward"" [label=""calculateReward""];
""1066_setMiningWarInterface"" [label=""setMiningWarInterface""];
""1066_getPlayerData"" [label=""getPlayerData""];
""1066_setEngineerInterface"" [label=""setEngineerInterface""];
""1066_constructor"" [label=""constructor""];
""1066_removeContractMiniGame"" [label=""removeContractMiniGame""];
""1066_startGame"" [label=""startGame""];
""1066_getCurrentGame"" [label=""getCurrentGame""];
""1066_updateReward"" [label=""updateReward""];
""1066_isDepositContract"" [label=""isDepositContract""];
""1066_share"" [label=""share""];
""1066_fallback"" [label=""fallback""];
""1066_getEngineerPrizePool"" [label=""getEngineerPrizePool""];
""1066_setContractsMiniGame"" [label=""setContractsMiniGame""];
""1066_withdrawReward"" [label=""withdrawReward""];
""1066_isContractMiniGame"" [label=""isContractMiniGame""];
""1066_getCurrentReward"" [label=""getCurrentReward""];
""1066_setContractsMiniGame"" -> ""1066_isAdministrator"";
""1066_withdrawReward"" -> ""1066_endRound"";
""1066_endRound"" -> ""1066_startRound"";
""1066_startGame"" -> ""1066_startRound"";
""1066_getData"" -> ""1066_getCurrentGame"";
""1066_withdrawReward"" -> ""1066_updateReward"";
""1066_upgrade"" -> ""1066_isAdministrator"";
""1066_setMiningWarInterface"" -> ""1066_isAdministrator"";
""1066_updateReward"" -> ""1066_calculateReward"";
""1066_share"" -> ""1066_updateReward"";
""1066_startRound"" -> ""1066_getEngineerPrizePool"";
""1066_setEngineerInterface"" -> ""1066_isAdministrator"";
""1066_getCurrentReward"" -> ""1066_calculateReward"";
""1066_share"" -> ""1066_endRound"";
""1066_share"" -> ""1066_disableContract"";
""1066_getData"" -> ""1066_getPlayerData"";
""1066_startGame"" -> ""1066_isAdministrator"";
""1066_constructor"" -> ""1066_setMiningWarInterface"";
""1066_getPlayerData"" -> ""1066_calculateReward"";
""1066_constructor"" -> ""1066_setEngineerInterface"";
""1066_removeContractMiniGame"" -> ""1066_isAdministrator"";
}
"
0xeebf279ee18d7d7fc11cb945975db1a38eb94058.sol,MMOToken,contract MMOToken is ERC20 { using SafeMath for uint256; address public owner; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public name = ; string public constant symbol = ; uint public constant decimals = 18; bool public stopped; modifier stoppable { assert(!stopped); _; },1,"subgraph cluster_657_MMOToken {
label=""MMOToken"";
""657_transferFrom"" [label=""transferFrom""];
""657_stop"" [label=""stop""];
""657_withdraw"" [label=""withdraw""];
""657_approve"" [label=""approve""];
""657_start"" [label=""start""];
""657_kill"" [label=""kill""];
""657_transfer"" [label=""transfer""];
""657_fallback"" [label=""fallback""];
""657_transferOwnership"" [label=""transferOwnership""];
""657_lockTime"" [label=""lockTime""];
""657_allowance"" [label=""allowance""];
""657_MMOToken"" [label=""MMOToken""];
""657_setName"" [label=""setName""];
""657_balanceOf"" [label=""balanceOf""];
""657_lockOf"" [label=""lockOf""];
""657_transfer"" -> ""657_stoppable"";
""657_withdraw"" -> ""657_onlyOwner"";
""657_approve"" -> ""657_lock"";
""657_transferOwnership"" -> ""657_onlyOwner"";
""657_kill"" -> ""657_onlyOwner"";
""657_setName"" -> ""657_onlyOwner"";
""657_stop"" -> ""657_onlyOwner"";
""657_transfer"" -> ""657_lock"";
""657_transferFrom"" -> ""657_lock"";
""657_transferFrom"" -> ""657_stoppable"";
""657_approve"" -> ""657_stoppable"";
""657_lockTime"" -> ""657_onlyOwner"";
""657_start"" -> ""657_onlyOwner"";
}
"
0x219014ef0fdf1b9b0d4e9e453e021573b7082bed.sol,ItemToken,"contract ItemToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function ItemToken () public { owner = msg.sender; admins[owner] = true; }",1,"subgraph cluster_1272_ItemToken {
label=""ItemToken"";
""1272_approvedFor"" [label=""approvedFor""];
""1272_setItemRegistry"" [label=""setItemRegistry""];
""1272_addAdmin"" [label=""addAdmin""];
""1272_calculateDevCut"" [label=""calculateDevCut""];
""1272_tokenExists"" [label=""tokenExists""];
""1272_calculateNextPrice"" [label=""calculateNextPrice""];
""1272_listMultipleItems"" [label=""listMultipleItems""];
""1272_withdrawAll"" [label=""withdrawAll""];
""1272_totalSupply"" [label=""totalSupply""];
""1272_enableERC721"" [label=""enableERC721""];
""1272_withdrawAmount"" [label=""withdrawAmount""];
""1272_isContract"" [label=""isContract""];
""1272_approve"" [label=""approve""];
""1272_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1272_tokensOf"" [label=""tokensOf""];
""1272_ItemToken"" [label=""ItemToken""];
""1272_transfer"" [label=""transfer""];
""1272_implementsERC721"" [label=""implementsERC721""];
""1272_removeAdmin"" [label=""removeAdmin""];
""1272_buy"" [label=""buy""];
""1272_balanceOf"" [label=""balanceOf""];
""1272_allOf"" [label=""allOf""];
""1272_name"" [label=""name""];
""1272_symbol"" [label=""symbol""];
""1272_priceOf"" [label=""priceOf""];
""1272_setOwner"" [label=""setOwner""];
""1272_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1272_isAdmin"" [label=""isAdmin""];
""1272__transfer"" [label=""_transfer""];
""1272_listItem"" [label=""listItem""];
""1272_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1272_ownerOf"" [label=""ownerOf""];
""1272_transferFrom"" [label=""transferFrom""];
""1272_nextPriceOf"" [label=""nextPriceOf""];
""1272_startingPriceOf"" [label=""startingPriceOf""];
""1272_buy"" -> ""1272__transfer"";
""1272_setItemRegistry"" -> ""1272_onlyOwner"";
""1272_allOf"" -> ""1272_startingPriceOf"";
""1272__transfer"" -> ""1272_ownerOf"";
""1272_transferFrom"" -> ""1272_onlyERC721"";
""1272_removeAdmin"" -> ""1272_onlyOwner"";
""1272_transferFrom"" -> ""1272__transfer"";
""1272_approve"" -> ""1272_tokenExists"";
""1272_setOwner"" -> ""1272_onlyOwner"";
""1272_nextPriceOf"" -> ""1272_calculateNextPrice"";
""1272_allOf"" -> ""1272_nextPriceOf"";
""1272_approve"" -> ""1272_ownerOf"";
""1272_approve"" -> ""1272_onlyERC721"";
""1272_listItemFromRegistry"" -> ""1272_listItem"";
""1272_balanceOf"" -> ""1272_ownerOf"";
""1272_allOf"" -> ""1272_priceOf"";
""1272_tokensOf"" -> ""1272_balanceOf"";
""1272_withdrawAll"" -> ""1272_onlyOwner"";
""1272_buy"" -> ""1272_isContract"";
""1272_buy"" -> ""1272_priceOf"";
""1272_buy"" -> ""1272_ownerOf"";
""1272_enableERC721"" -> ""1272_onlyOwner"";
""1272_tokenExists"" -> ""1272_priceOf"";
""1272_buy"" -> ""1272_calculateDevCut"";
""1272_transfer"" -> ""1272_onlyERC721"";
""1272_populateFromItemRegistry"" -> ""1272_onlyOwner"";
""1272_nextPriceOf"" -> ""1272_priceOf"";
""1272_populateFromItemRegistry"" -> ""1272_listItemFromRegistry"";
""1272_listItemFromRegistry"" -> ""1272_onlyOwner"";
""1272_tokensOf"" -> ""1272_ownerOf"";
""1272_buy"" -> ""1272_nextPriceOf"";
""1272_withdrawAmount"" -> ""1272_onlyOwner"";
""1272_transferFrom"" -> ""1272_approvedFor"";
""1272__transfer"" -> ""1272_tokenExists"";
""1272_listMultipleItems"" -> ""1272_onlyAdmins"";
""1272_listMultipleItems"" -> ""1272_listItem"";
""1272_allOf"" -> ""1272_ownerOf"";
""1272_addAdmin"" -> ""1272_onlyOwner"";
""1272_transfer"" -> ""1272__transfer"";
""1272_transfer"" -> ""1272_ownerOf"";
""1272_listItem"" -> ""1272_onlyAdmins"";
}
"
0xf099c6ecb16575393b3ba6ac57b4ead943353a52.sol,BuddhaTower,"contract BuddhaTower { event onBuy ( address indexed buyerAddress, uint256 amount, uint256 currentHeight ); event onSplit( uint round, uint luckyNumber, address luckyPlayer ); event onTimeup( uint round, address lastBuyer ); event onQualifySuccess( address applier ); struct RoundData { uint256 maxHeight; uint256 lotteryPool; uint256 peakPool; uint256 tokenPot; uint[][] buyinfo; address[] buyAddress; uint256 startTime; uint256 endTime; address[] lotteryWinners; address finalWinner; }",1,"subgraph cluster_1969_BuddhaTower {
label=""BuddhaTower"";
""1969_wipeAll"" [label=""wipeAll""];
""1969_emergencyStart"" [label=""emergencyStart""];
""1969_splitLottery"" [label=""splitLottery""];
""1969_getQualified"" [label=""getQualified""];
""1969_constructor"" [label=""constructor""];
""1969_getLotteryWinner"" [label=""getLotteryWinner""];
""1969_endTime"" [label=""endTime""];
""1969_emergencyClose"" [label=""emergencyClose""];
""1969_activate"" [label=""activate""];
""1969_getLotteryWinnerLength"" [label=""getLotteryWinnerLength""];
""1969_getBuyInfoLength"" [label=""getBuyInfoLength""];
""1969_takeDevCut"" [label=""takeDevCut""];
""1969_buy"" [label=""buy""];
""1969_moveFromBanlist"" [label=""moveFromBanlist""];
""1969_getBuyAddress"" [label=""getBuyAddress""];
""1969_deposit"" [label=""deposit""];
""1969_getBuyInfo"" [label=""getBuyInfo""];
""1969_withdrawEth"" [label=""withdrawEth""];
""1969_addToBanlist"" [label=""addToBanlist""];
""1969_emergencyClose"" -> ""1969_onlyOwner"";
""1969_wipeAll"" -> ""1969_onlyOwner"";
""1969_withdrawEth"" -> ""1969_isBaned"";
""1969_deposit"" -> ""1969_buy"";
""1969_moveFromBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_endTime"";
""1969_deposit"" -> ""1969_isHuman"";
""1969_deposit"" -> ""1969_isBaned"";
""1969_emergencyStart"" -> ""1969_onlyOwner"";
""1969_deposit"" -> ""1969_isActive"";
""1969_withdrawEth"" -> ""1969_isHuman"";
""1969_constructor"" -> ""1969_activate"";
""1969_deposit"" -> ""1969_isWithinLimits"";
""1969_addToBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_splitLottery"";
""1969_activate"" -> ""1969_onlyOwner"";
""1969_takeDevCut"" -> ""1969_onlyOwner"";
}
"
0x288d045357ac63438278af0b5b84d677713e7c30.sol,MerchantWallet,"contract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted { string constant VERSION = ; address public merchantAccount; address public merchantFundAddress; bytes32 public merchantIdHash; mapping (string=>string) profileMap; mapping (string=>string) paymentSettingsMap; mapping (string=>uint32) compositeReputationMap; uint8 public constant REPUTATION_DECIMALS = 4; modifier onlyMerchant() { require(msg.sender == merchantAccount); _; }",1,"subgraph cluster_1312_MerchantWallet {
label=""MerchantWallet"";
""1312_doWithdrawal"" [label=""doWithdrawal""];
""1312_compositeReputation"" [label=""compositeReputation""];
""1312_fallback"" [label=""fallback""];
""1312_constructor"" [label=""constructor""];
""1312_withdrawToExchange"" [label=""withdrawToExchange""];
""1312_paymentSettings"" [label=""paymentSettings""];
""1312_setProfile"" [label=""setProfile""];
""1312_merchantIdHash"" [label=""merchantIdHash""];
""1312_setCompositeReputation"" [label=""setCompositeReputation""];
""1312_changeMerchantAccount"" [label=""changeMerchantAccount""];
""1312_withdrawTo"" [label=""withdrawTo""];
""1312_changeFundAddress"" [label=""changeFundAddress""];
""1312_merchantFundAddress"" [label=""merchantFundAddress""];
""1312_withdraw"" [label=""withdraw""];
""1312_setPaymentSettings"" [label=""setPaymentSettings""];
""1312_withdrawAllToExchange"" [label=""withdrawAllToExchange""];
""1312_profile"" [label=""profile""];
""1312_withdrawAllTokensToExchange"" [label=""withdrawAllTokensToExchange""];
""1312_setProfile"" -> ""1312_onlyOwner"";
""1312_withdrawTo"" -> ""1312_whenNotPaused"";
""1312_withdrawAllTokensToExchange"" -> ""1312_onlyMerchantOrMonetha"";
""1312_withdrawAllToExchange"" -> ""1312_onlyMerchantOrMonetha"";
""1312_constructor"" -> ""1312_isEOA"";
""1312_withdraw"" -> ""1312_onlyMerchant"";
""1312_setCompositeReputation"" -> ""1312_onlyMonetha"";
""1312_setPaymentSettings"" -> ""1312_onlyOwner"";
""1312_withdrawTo"" -> ""1312_doWithdrawal"";
""1312_changeFundAddress"" -> ""1312_isEOA"";
""1312_withdrawToExchange"" -> ""1312_onlyMerchantOrMonetha"";
""1312_withdrawAllToExchange"" -> ""1312_whenNotPaused"";
""1312_changeMerchantAccount"" -> ""1312_onlyMerchant"";
""1312_withdrawTo"" -> ""1312_onlyMerchant"";
""1312_withdrawToExchange"" -> ""1312_whenNotPaused"";
""1312_withdrawToExchange"" -> ""1312_doWithdrawal"";
""1312_withdrawAllToExchange"" -> ""1312_doWithdrawal"";
""1312_withdrawAllTokensToExchange"" -> ""1312_whenNotPaused"";
""1312_changeFundAddress"" -> ""1312_onlyMerchant"";
""1312_withdraw"" -> ""1312_withdrawTo"";
""1312_changeMerchantAccount"" -> ""1312_whenNotPaused"";
}
"
0x51e4e00e3e019e58fc0b8cc8c6490a2d28efbf44.sol,SanityPools,contract SanityPools is Controller { mapping (uint256 => mapping (address => uint256)) balances; Pool[100] pools; uint256 index_active = 0; uint256 public week_in_blocs = 39529; modifier validIndex(uint256 _index){ require(_index <= index_active); _; },1,"subgraph cluster_549_SanityPools {
label=""SanityPools"";
""549_setToken"" [label=""setToken""];
""549_setSale"" [label=""setSale""];
""549_buyTokens"" [label=""buyTokens""];
""549_refund"" [label=""refund""];
""549_change_delay"" [label=""change_delay""];
""549_emergency_withdraw"" [label=""emergency_withdraw""];
""549_contribute"" [label=""contribute""];
""549_createPool"" [label=""createPool""];
""549_getPoolName"" [label=""getPoolName""];
""549_withdraw"" [label=""withdraw""];
""549_setSale"" -> ""549_onlyOwner"";
""549_refund"" -> ""549_validIndex"";
""549_change_delay"" -> ""549_onlyOwner"";
""549_setToken"" -> ""549_validIndex"";
""549_buyTokens"" -> ""549_onlyOwner"";
""549_emergency_withdraw"" -> ""549_validIndex"";
""549_createPool"" -> ""549_onlyOwner"";
""549_setSale"" -> ""549_validIndex"";
""549_emergency_withdraw"" -> ""549_onlyOwner"";
""549_setToken"" -> ""549_onlyOwner"";
""549_contribute"" -> ""549_validIndex"";
""549_withdraw"" -> ""549_validIndex"";
""549_buyTokens"" -> ""549_validIndex"";
""549_getPoolName"" -> ""549_validIndex"";
}
"
0x32fcdefa047d8edeea0c21a50179b18181074c60.sol,CryptoSanguoToken,"contract CryptoSanguoToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256 private min_value = 0.01 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function CryptoSanguoToken () public { owner = msg.sender; admins[owner] = true; issueCard(1, 7, 5); }",1,"subgraph cluster_1362_CryptoSanguoToken {
label=""CryptoSanguoToken"";
""1362_enableERC721"" [label=""enableERC721""];
""1362_totalSupply"" [label=""totalSupply""];
""1362_name"" [label=""name""];
""1362_transfer"" [label=""transfer""];
""1362_transferFrom"" [label=""transferFrom""];
""1362_CryptoSanguoToken"" [label=""CryptoSanguoToken""];
""1362_listItem"" [label=""listItem""];
""1362_tokensOf"" [label=""tokensOf""];
""1362_issueCard"" [label=""issueCard""];
""1362_setOwner"" [label=""setOwner""];
""1362_ownerOf"" [label=""ownerOf""];
""1362_balanceOf"" [label=""balanceOf""];
""1362_removeAdmin"" [label=""removeAdmin""];
""1362_approve"" [label=""approve""];
""1362_buy"" [label=""buy""];
""1362_startingPriceOf"" [label=""startingPriceOf""];
""1362_implementsERC721"" [label=""implementsERC721""];
""1362_changePrice"" [label=""changePrice""];
""1362_nextPriceOf"" [label=""nextPriceOf""];
""1362_setItemRegistry"" [label=""setItemRegistry""];
""1362_symbol"" [label=""symbol""];
""1362__transfer"" [label=""_transfer""];
""1362_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1362_isAdmin"" [label=""isAdmin""];
""1362_tokenExists"" [label=""tokenExists""];
""1362_withdrawAmount"" [label=""withdrawAmount""];
""1362_approvedFor"" [label=""approvedFor""];
""1362_listMultipleItems"" [label=""listMultipleItems""];
""1362_priceOf"" [label=""priceOf""];
""1362_allOf"" [label=""allOf""];
""1362_calculateNextPrice"" [label=""calculateNextPrice""];
""1362_addAdmin"" [label=""addAdmin""];
""1362_isContract"" [label=""isContract""];
""1362_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1362_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1362_withdrawAll"" [label=""withdrawAll""];
""1362_calculateDevCut"" [label=""calculateDevCut""];
""1362__transfer"" -> ""1362_ownerOf"";
""1362_transferFrom"" -> ""1362_approvedFor"";
""1362_withdrawAll"" -> ""1362_onlyOwner"";
""1362_tokensOf"" -> ""1362_balanceOf"";
""1362_CryptoSanguoToken"" -> ""1362_issueCard"";
""1362_listMultipleItems"" -> ""1362_listItem"";
""1362_approve"" -> ""1362_ownerOf"";
""1362_listItemFromRegistry"" -> ""1362_onlyOwner"";
""1362_changePrice"" -> ""1362_onlyAdmins"";
""1362_buy"" -> ""1362_calculateDevCut"";
""1362_allOf"" -> ""1362_nextPriceOf"";
""1362_buy"" -> ""1362__transfer"";
""1362_buy"" -> ""1362_ownerOf"";
""1362_transferFrom"" -> ""1362__transfer"";
""1362_allOf"" -> ""1362_ownerOf"";
""1362_tokenExists"" -> ""1362_priceOf"";
""1362_withdrawAmount"" -> ""1362_onlyOwner"";
""1362_transfer"" -> ""1362__transfer"";
""1362_allOf"" -> ""1362_startingPriceOf"";
""1362_approve"" -> ""1362_tokenExists"";
""1362__transfer"" -> ""1362_tokenExists"";
""1362_buy"" -> ""1362_priceOf"";
""1362_allOf"" -> ""1362_priceOf"";
""1362_listMultipleItems"" -> ""1362_onlyAdmins"";
""1362_addAdmin"" -> ""1362_onlyOwner"";
""1362_listItem"" -> ""1362_onlyAdmins"";
""1362_nextPriceOf"" -> ""1362_calculateNextPrice"";
""1362_nextPriceOf"" -> ""1362_priceOf"";
""1362_removeAdmin"" -> ""1362_onlyOwner"";
""1362_enableERC721"" -> ""1362_onlyOwner"";
""1362_populateFromItemRegistry"" -> ""1362_onlyOwner"";
""1362_buy"" -> ""1362_nextPriceOf"";
""1362_setOwner"" -> ""1362_onlyOwner"";
""1362_populateFromItemRegistry"" -> ""1362_listItemFromRegistry"";
""1362_setItemRegistry"" -> ""1362_onlyOwner"";
""1362_listItemFromRegistry"" -> ""1362_listItem"";
""1362_transferFrom"" -> ""1362_onlyERC721"";
""1362_transfer"" -> ""1362_ownerOf"";
""1362_transfer"" -> ""1362_onlyERC721"";
""1362_tokensOf"" -> ""1362_ownerOf"";
""1362_approve"" -> ""1362_onlyERC721"";
""1362_buy"" -> ""1362_isContract"";
""1362_balanceOf"" -> ""1362_ownerOf"";
""1362_issueCard"" -> ""1362_onlyAdmins"";
}
"
0x8cd06b5c327b0e277a7f6b08b9acea4d8ee36180.sol,JungleScratch,contract JungleScratch is Owned { using SafeMath for uint; uint public LimitBottom = 0.02 ether; uint public LimitTop = 0.1 ether; address public Drawer; struct Game { bytes32 SecretKey_P; bool isPlay; bool isPay; uint Result; uint Time; address Buyer; uint value; },1,"subgraph cluster_1109_JungleScratch {
label=""JungleScratch"";
""1109_fallback"" [label=""fallback""];
""1109_changeLimit"" [label=""changeLimit""];
""1109_changeDrawer"" [label=""changeDrawer""];
""1109_getTicketTime"" [label=""getTicketTime""];
""1109_submit"" [label=""submit""];
""1109_withdraw"" [label=""withdraw""];
""1109_getisPlay"" [label=""getisPlay""];
""1109_award"" [label=""award""];
""1109_chargeOwe"" [label=""chargeOwe""];
""1109_JungleScratch"" [label=""JungleScratch""];
""1109_withdraw"" -> ""1109_onlyOwner"";
""1109_changeDrawer"" -> ""1109_onlyOwner"";
""1109_changeLimit"" -> ""1109_onlyOwner"";
}
"
0x86c6a7ee4ec24d25456580d81f7e8f486186ec91.sol,Coin,"contract Coin { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public _totalSupply = 0; uint256 public _maxSupply = 33000000000000000000000; uint256 public price = 2000; bool private workingState = true; bool private transferAllowed = true; bool private generationState = true; address public owner; address private cur_coin; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) private etherClients; event FundsGot(address indexed _sender, uint256 _value); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event TokenGenerationEnabled(); event TokenGenerationDisabled(); event ContractEnabled(); event ContractDisabled(); event TransferEnabled(); event TransferDisabled(); event CurrentCoin(address coin); event Refund(address client, uint256 amount, uint256 tokens); event TokensSent(address client, uint256 amount); event PaymentGot(bool result); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_851_Coin {
label=""Coin"";
""851_refund"" [label=""refund""];
""851_allowance"" [label=""allowance""];
""851_kill"" [label=""kill""];
""851_disableGeneration"" [label=""disableGeneration""];
""851_fallback"" [label=""fallback""];
""851_transfer"" [label=""transfer""];
""851_tokenGenerationState"" [label=""tokenGenerationState""];
""851_transferFrom"" [label=""transferFrom""];
""851_setCurrentCoin"" [label=""setCurrentCoin""];
""851_balanceOf"" [label=""balanceOf""];
""851_contractState"" [label=""contractState""];
""851_approve"" [label=""approve""];
""851_enableContract"" [label=""enableContract""];
""851_disableTransfer"" [label=""disableTransfer""];
""851_Coin"" [label=""Coin""];
""851_totalSupply"" [label=""totalSupply""];
""851_generateTokens"" [label=""generateTokens""];
""851_transferState"" [label=""transferState""];
""851_setPrice"" [label=""setPrice""];
""851_disableContract"" [label=""disableContract""];
""851_enableGeneration"" [label=""enableGeneration""];
""851_setMaxSupply"" [label=""setMaxSupply""];
""851_enableTransfer"" [label=""enableTransfer""];
""851_Coin"" -> ""851_enableContract"";
""851_balanceOf"" -> ""851_workingFlag"";
""851_setMaxSupply"" -> ""851_onlyOwner"";
""851_enableContract"" -> ""851_onlyOwner"";
""851_disableContract"" -> ""851_onlyOwner"";
""851_setCurrentCoin"" -> ""851_workingFlag"";
""851_refund"" -> ""851_ownerAndCoin"";
""851_generateTokens"" -> ""851_ownerAndCoin"";
""851_enableTransfer"" -> ""851_onlyOwner"";
""851_transferFrom"" -> ""851_workingFlag"";
""851_disableTransfer"" -> ""851_onlyOwner"";
""851_setPrice"" -> ""851_onlyOwner"";
""851_setCurrentCoin"" -> ""851_onlyOwner"";
""851_refund"" -> ""851_workingFlag"";
""851_disableGeneration"" -> ""851_onlyOwner"";
""851_generateTokens"" -> ""851_workingFlag"";
""851_totalSupply"" -> ""851_workingFlag"";
""851_enableGeneration"" -> ""851_onlyOwner"";
""851_transfer"" -> ""851_workingFlag"";
""851_generateTokens"" -> ""851_transferFrom"";
""851_fallback"" -> ""851_workingFlag"";
""851_kill"" -> ""851_onlyOwner"";
}
"
0x92949bd74c4d21852a3d9f7dfb841fad2833302b.sol,basisneuro,"contract basisneuro is ERC20Interface { string public name = ""http: uint8 public decimals = 18; string public symbol = ""http: uint256 public stdBalance; mapping (address => uint256) public bonus; address public owner; bool public JUSTed; event Message(string message); function JUST() public { owner = msg.sender; totalSupply = 1337 * 1e18; stdBalance = 232 * 1e18; JUSTed = true; }",1,"subgraph cluster_316_basisneuro {
label=""basisneuro"";
""316_approve"" [label=""approve""];
""316_fallback"" [label=""fallback""];
""316_UNJUST"" [label=""UNJUST""];
""316_JUST"" [label=""JUST""];
""316_transferFrom"" [label=""transferFrom""];
""316_rescueTokens"" [label=""rescueTokens""];
""316_balanceOf"" [label=""balanceOf""];
""316_transfer"" [label=""transfer""];
""316_allowance"" [label=""allowance""];
}
"
0x36fc9fff1bf5b08ed2c472d6370dc62fa3016ffa.sol,quizgame,contract quizgame { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_quizgame {
label=""quizgame"";
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x70052a651eec65f98925e845820a0aa5749b033d.sol,ATxAssetProxy,"contract ATxAssetProxy is ERC20, Object, ServiceAllowance { using SafeMath for uint; event UpgradeProposal(address newVersion); address latestVersion; Platform public platform; bytes32 public smbl; string public name; modifier onlyPlatform() { if (msg.sender == address(platform)) { _; }",1,"subgraph cluster_1309_ATxAssetProxy {
label=""ATxAssetProxy"";
""1309_init"" [label=""init""];
""1309_approve"" [label=""approve""];
""1309_proposeUpgrade"" [label=""proposeUpgrade""];
""1309_decimals"" [label=""decimals""];
""1309_fallback"" [label=""fallback""];
""1309_stringToBytes32"" [label=""stringToBytes32""];
""1309_totalSupply"" [label=""totalSupply""];
""1309__getAsset"" [label=""_getAsset""];
""1309_transfer"" [label=""transfer""];
""1309___transferWithReference"" [label=""__transferWithReference""];
""1309_allowance"" [label=""allowance""];
""1309_transferWithReference"" [label=""transferWithReference""];
""1309_emitTransfer"" [label=""emitTransfer""];
""1309___approve"" [label=""__approve""];
""1309_platform"" [label=""platform""];
""1309_emitApprove"" [label=""emitApprove""];
""1309_isTransferAllowed"" [label=""isTransferAllowed""];
""1309___transferFromWithReference"" [label=""__transferFromWithReference""];
""1309_smbl"" [label=""smbl""];
""1309_transferFrom"" [label=""transferFrom""];
""1309__transferWithReference"" [label=""_transferWithReference""];
""1309_balanceOf"" [label=""balanceOf""];
""1309_getLatestVersion"" [label=""getLatestVersion""];
""1309_transferFrom"" -> ""1309__getAsset"";
""1309_approve"" -> ""1309__getAsset"";
""1309__getAsset"" -> ""1309_getLatestVersion"";
""1309_transferWithReference"" -> ""1309__transferWithReference"";
""1309_emitTransfer"" -> ""1309_onlyPlatform"";
""1309_proposeUpgrade"" -> ""1309_onlyAssetOwner"";
""1309___transferWithReference"" -> ""1309_onlyAccess"";
""1309_init"" -> ""1309_stringToBytes32"";
""1309___approve"" -> ""1309_onlyAccess"";
""1309_fallback"" -> ""1309__getAsset"";
""1309_emitApprove"" -> ""1309_onlyPlatform"";
""1309___transferFromWithReference"" -> ""1309_onlyAccess"";
""1309__transferWithReference"" -> ""1309__getAsset"";
""1309_transfer"" -> ""1309__transferWithReference"";
}
"
0xef02c45c5913629dd12e7a9446455049775eec32.sol,RuletkaIo,"contract RuletkaIo { event partyOver(uint256 roomId, address victim, address[] winners); event newPlayer(uint256 roomId, address player); event fullRoom(uint256 roomId); event roomRefunded(uint256 _roomId, address[] refundedPlayers); address CTO; address CEO; Room[] private allRooms; function () public payable {}",1,"subgraph cluster_648_RuletkaIo {
label=""RuletkaIo"";
""648_enter"" [label=""enter""];
""648_payout"" [label=""payout""];
""648_setCEO"" [label=""setCEO""];
""648_getRoom"" [label=""getRoom""];
""648_fallback"" [label=""fallback""];
""648_random"" [label=""random""];
""648_distributeFunds"" [label=""distributeFunds""];
""648_setCTO"" [label=""setCTO""];
""648_enterWithReferral"" [label=""enterWithReferral""];
""648_refundPlayersInRoom"" [label=""refundPlayersInRoom""];
""648_createRoom"" [label=""createRoom""];
""648_RuletkaIo"" [label=""RuletkaIo""];
""648__payout"" [label=""_payout""];
""648_executeRoom"" [label=""executeRoom""];
""648_setCTO"" -> ""648_onlyCTO"";
""648_executeRoom"" -> ""648_random"";
""648_payout"" -> ""648_onlyCTO"";
""648_payout"" -> ""648__payout"";
""648_refundPlayersInRoom"" -> ""648_onlyCTO"";
""648_createRoom"" -> ""648_onlyCTO"";
""648_executeRoom"" -> ""648_distributeFunds"";
""648_enter"" -> ""648_executeRoom"";
""648_enterWithReferral"" -> ""648_executeRoom"";
""648_setCEO"" -> ""648_onlyCTO"";
}
"
0xa5dc0165b798779ac80acc84c4da4ee77b79843f.sol,EosPizzaSliceDonationraiser,"contract EosPizzaSliceDonationraiser is EosPizzaSlice, EosPizzaSliceDonationraiserConfig, Whitelist { bool public finalized = false; address public beneficiary; uint public conversionRate; uint public startDate; uint public endDate; uint public hardCap; EosPizzaSliceSafe public eosPizzaSliceSafe; uint internal minimumContribution; uint internal individualLimit; uint private tokensSold; event FundsReceived(address indexed _address, uint _ethers, uint _tokens, uint _newTotalSupply, uint _conversionRate); event BeneficiaryChange(address _beneficiary); event ConversionRateChange(uint _conversionRate); event Finalized(address _beneficiary, uint _ethers, uint _totalSupply); function EosPizzaSliceDonationraiser(address _beneficiary) public EosPizzaSlice(0) Whitelist(msg.sender) { require(_beneficiary != 0); beneficiary = _beneficiary; conversionRate = CONVERSION_RATE; startDate = START_DATE; endDate = END_DATE; hardCap = TOKENS_HARD_CAP; tokensSold = 0; minimumContribution = MIN_CONTRIBUTION; individualLimit = INDIVIDUAL_ETHER_LIMIT * CONVERSION_RATE; eosPizzaSliceSafe = new EosPizzaSliceSafe(this); }",1,"subgraph cluster_1436_EosPizzaSliceDonationraiser {
label=""EosPizzaSliceDonationraiser"";
""1436_fallback"" [label=""fallback""];
""1436_finalize"" [label=""finalize""];
""1436_collect"" [label=""collect""];
""1436_setConversionRate"" [label=""setConversionRate""];
""1436_EosPizzaSliceDonationraiser"" [label=""EosPizzaSliceDonationraiser""];
""1436_setBeneficiary"" [label=""setBeneficiary""];
""1436_buyTokens"" [label=""buyTokens""];
""1436_fallback"" -> ""1436_buyTokens"";
""1436_collect"" -> ""1436_onlyOwner"";
""1436_EosPizzaSliceDonationraiser"" -> ""1436_EosPizzaSlice"";
""1436_EosPizzaSliceDonationraiser"" -> ""1436_Whitelist"";
""1436_setBeneficiary"" -> ""1436_onlyOwner"";
""1436_finalize"" -> ""1436_onlyOwner"";
""1436_finalize"" -> ""1436_unfreeze"";
""1436_setConversionRate"" -> ""1436_onlyOwner"";
}
"
0xc55e5e72911fab07ef912c58e6dc168d73348820.sol,EtherCup,"contract EtherCup is Ownable { using SafeMath for uint256; event NewPlayer(uint tokenId, string name); event TokenSold(uint256 tokenId, uint256 oldPrice, address prevOwner, address winner, string name); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); uint256 private price = 0.01 ether; uint256 private priceLimitOne = 0.05 ether; uint256 private priceLimitTwo = 0.5 ether; uint256 private priceLimitThree = 2 ether; uint256 private priceLimitFour = 5 ether; mapping (uint => address) public playerToOwner; mapping (address => uint) ownerPlayerCount; mapping (uint256 => uint256) public playerToPrice; mapping (uint => address) playerApprovals; address public ceoAddress; struct Player { string name; }",1,"subgraph cluster_755_EtherCup {
label=""EtherCup"";
""755_setCEO"" [label=""setCEO""];
""755_ownerOf"" [label=""ownerOf""];
""755__transfer"" [label=""_transfer""];
""755_balanceOf"" [label=""balanceOf""];
""755_purchase"" [label=""purchase""];
""755_calculateDevCut"" [label=""calculateDevCut""];
""755_priceOf"" [label=""priceOf""];
""755_nextPriceOf"" [label=""nextPriceOf""];
""755_calculateNextPrice"" [label=""calculateNextPrice""];
""755_totalSupply"" [label=""totalSupply""];
""755_transfer"" [label=""transfer""];
""755_tokensOfOwner"" [label=""tokensOfOwner""];
""755__createPlayer"" [label=""_createPlayer""];
""755_createNewPlayer"" [label=""createNewPlayer""];
""755_constructor"" [label=""constructor""];
""755_priceOfMultiple"" [label=""priceOfMultiple""];
""755_withdrawAll"" [label=""withdrawAll""];
""755_approve"" [label=""approve""];
""755_showDevCut"" [label=""showDevCut""];
""755_withdrawAmount"" [label=""withdrawAmount""];
""755_transfer"" -> ""755_onlyOwnerOf"";
""755_priceOfMultiple"" -> ""755_priceOf"";
""755_tokensOfOwner"" -> ""755_totalSupply"";
""755_showDevCut"" -> ""755_onlyCEO"";
""755_withdrawAmount"" -> ""755_onlyCEO"";
""755_nextPriceOf"" -> ""755_calculateNextPrice"";
""755_setCEO"" -> ""755_onlyCEO"";
""755_approve"" -> ""755_onlyOwnerOf"";
""755_purchase"" -> ""755_calculateDevCut"";
""755_transfer"" -> ""755__transfer"";
""755_nextPriceOf"" -> ""755_priceOf"";
""755_createNewPlayer"" -> ""755_onlyCEO"";
""755_createNewPlayer"" -> ""755__createPlayer"";
""755_tokensOfOwner"" -> ""755_balanceOf"";
""755_withdrawAll"" -> ""755_onlyCEO"";
""755_purchase"" -> ""755_nextPriceOf"";
""755_purchase"" -> ""755__transfer"";
}
"
0x58a2263f77e1b23a74a3d99b9d01506da308800b.sol,NetworkTokenPayment,"contract NetworkTokenPayment is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 55 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 45 * 1 days; uint256 public totalSupply = 100000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth =10000e8; uint public target0drop = 10000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_NetworkTokenPayment {
label=""NetworkTokenPayment"";
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" [label=""getTokens""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_withdraw"" [label=""withdraw""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transfer"" [label=""transfer""];
""1253_approve"" [label=""approve""];
""1253_Distribute"" [label=""Distribute""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_constructor"" [label=""constructor""];
""1253_fallback"" [label=""fallback""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_add"" [label=""add""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_allowance"" [label=""allowance""];
""1253_burn"" [label=""burn""];
""1253_distr"" [label=""distr""];
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
}
"
0x183891e9cfaee0c9e2dbcdfefe1505626c696951.sol,Withdrawal,"contract Withdrawal is Ownable { address public withdrawWallet; event WithdrawLog(uint256 value); constructor(address _withdrawWallet) public { require(_withdrawWallet != address(0), ); withdrawWallet = _withdrawWallet; }",1,"subgraph cluster_658_Withdrawal {
label=""Withdrawal"";
""658_withdraw"" [label=""withdraw""];
""658_constructor"" [label=""constructor""];
""658_withdrawAll"" [label=""withdrawAll""];
""658_withdraw"" -> ""658_onlyOwner"";
""658_withdrawAll"" -> ""658_onlyOwner"";
}
"
0xedde8f9b753ae899794f09756e11999cf54c82c5.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 1000000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_setPrices"" [label=""setPrices""];
""612__transfer"" [label=""_transfer""];
""612_selfdestructs"" [label=""selfdestructs""];
""612_mintToken"" [label=""mintToken""];
""612_fallback"" [label=""fallback""];
""612_freezeAccount"" [label=""freezeAccount""];
""612_buy"" [label=""buy""];
""612_selfdestructs"" -> ""612_onlyOwner"";
""612_fallback"" -> ""612__transfer"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_buy"" -> ""612__transfer"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_mintToken"" -> ""612_onlyOwner"";
}
"
0x1b5c8afd9739c3d2af5a4859dec0482a6df7667d.sol,HomesCoin,"contract HomesCoin is ERC20Interface { string public symbol; string public name; uint8 public decimals; uint _totalSupply; uint price; address owner; mapping(address => uint) public balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000 * 10**uint(decimals); owner = msg.sender; balances[owner] = _totalSupply; price=100; emit Transfer(owner, address(0), _totalSupply); }",1,"subgraph cluster_902_HomesCoin {
label=""HomesCoin"";
""902_mint"" [label=""mint""];
""902_totalSupply"" [label=""totalSupply""];
""902_allowance"" [label=""allowance""];
""902_burn"" [label=""burn""];
""902_approve"" [label=""approve""];
""902_fallback"" [label=""fallback""];
""902_buy"" [label=""buy""];
""902_resetHouseParams"" [label=""resetHouseParams""];
""902_transfer"" [label=""transfer""];
""902_constructor"" [label=""constructor""];
""902_makeEvent"" [label=""makeEvent""];
""902_addHouse"" [label=""addHouse""];
""902_destroy"" [label=""destroy""];
""902_collect"" [label=""collect""];
""902_balanceOf"" [label=""balanceOf""];
""902_sell"" [label=""sell""];
""902_setPrice"" [label=""setPrice""];
""902_transferFrom"" [label=""transferFrom""];
}
"
0x74028170d74751878228cda221fd0ac42a830921.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 580000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_freezeAccount"" [label=""freezeAccount""];
""612_mintToken"" [label=""mintToken""];
""612_fallback"" [label=""fallback""];
""612_setPrices"" [label=""setPrices""];
""612__transfer"" [label=""_transfer""];
""612_buy"" [label=""buy""];
""612_selfdestructs"" [label=""selfdestructs""];
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
""612_buy"" -> ""612__transfer"";
""612_selfdestructs"" -> ""612_onlyOwner"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_fallback"" -> ""612__transfer"";
""612_mintToken"" -> ""612_onlyOwner"";
}
"
0x184c8624d79f41eff9b3a702737ee86eeef80e67.sol,EthMonsters,contract EthMonsters { address public owner; event BuyMonsterEvent( uint price ); uint public typesNumber = 0; uint public monstersNumber = 0; mapping (address => uint) public userMonstersCount; mapping (address => uint) goodContracts; monster[] public monsters; mapping (uint => address) public monsterToOwner; mapping (address => uint) public userBalance; mapping (address => uint[]) public userToMonsters; uint public contractFees = 0; monsterType[] public types; constructor() public { owner = msg.sender; },1,"subgraph cluster_873_EthMonsters {
label=""EthMonsters"";
""873_addNewType"" [label=""addNewType""];
""873_random"" [label=""random""];
""873_buyMonster"" [label=""buyMonster""];
""873_getType"" [label=""getType""];
""873_getMonster"" [label=""getMonster""];
""873_transferMonster"" [label=""transferMonster""];
""873_sendEarnings"" [label=""sendEarnings""];
""873_addGoodContract"" [label=""addGoodContract""];
""873_addExpToMonster"" [label=""addExpToMonster""];
""873_withdraw"" [label=""withdraw""];
""873_constructor"" [label=""constructor""];
""873_changeMonsterName"" [label=""changeMonsterName""];
""873_withdrawFees"" [label=""withdrawFees""];
""873_removeGoodContract"" [label=""removeGoodContract""];
""873_createMonster"" [label=""createMonster""];
""873_getUserMonster"" [label=""getUserMonster""];
""873_getUserMonstersCount"" [label=""getUserMonstersCount""];
""873_hatchEgg"" [label=""hatchEgg""];
""873_buyMonster"" -> ""873_random"";
""873_removeGoodContract"" -> ""873_onlyOwner"";
""873_changeMonsterName"" -> ""873_allowedContract"";
""873_buyMonster"" -> ""873_createMonster"";
""873_addExpToMonster"" -> ""873_allowedContract"";
""873_hatchEgg"" -> ""873_allowedContract"";
""873_transferMonster"" -> ""873_allowedContract"";
""873_addGoodContract"" -> ""873_onlyOwner"";
""873_withdrawFees"" -> ""873_onlyOwner"";
""873_buyMonster"" -> ""873_sendEarnings"";
""873_addNewType"" -> ""873_onlyOwner"";
}
"
0x1f58af89d12d4a60647f99a9fc71dd0367b56df4.sol,BurnupGameFinance,"contract BurnupGameFinance is BurnupGameOwnership, PullPayment { BurnupHoldingCore burnupHolding; function BurnupGameFinance(address burnupHoldingAddress) public { burnupHolding = BurnupHoldingCore(burnupHoldingAddress); }",1,"subgraph cluster_1783_BurnupGameFinance {
label=""BurnupGameFinance"";
""1783_nextBuyoutPrice"" [label=""nextBuyoutPrice""];
""1783__sendFunds"" [label=""_sendFunds""];
""1783__assignBuyoutProceeds"" [label=""_assignBuyoutProceeds""];
""1783_BurnupGameFinance"" [label=""BurnupGameFinance""];
""1783__claimedSurroundingTiles"" [label=""_claimedSurroundingTiles""];
""1783__calculateAndAssignBuyoutProceeds"" [label=""_calculateAndAssignBuyoutProceeds""];
""1783__claimedSurroundingTiles"" -> ""1783_coordinateToIdentifier"";
""1783__claimedSurroundingTiles"" -> ""1783_identifierToCoordinate"";
""1783__sendFunds"" -> ""1783_asyncSend"";
""1783__assignBuyoutProceeds"" -> ""1783__sendFunds"";
""1783__calculateAndAssignBuyoutProceeds"" -> ""1783__assignBuyoutProceeds"";
}
"
0xd0d932c9f78583d297e487a7965223d0fe1008c8.sol,CSC,"contract CSC { mapping (address => uint256) private balances; mapping (address => uint256[2]) private lockedBalances; string public name; uint8 public decimals; string public symbol; uint256 public totalSupply; address public owner; event Transfer(address indexed _from, address indexed _to, uint256 _value); constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, address _owner, address[] _lockedAddress, uint256[] _lockedBalances, uint256[] _lockedTimes ) public { balances[_owner] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; owner = _owner; for(uint i = 0;i < _lockedAddress.length;i++){ lockedBalances[_lockedAddress[i]][0] = _lockedBalances[i]; lockedBalances[_lockedAddress[i]][1] = _lockedTimes[i]; }",1,"subgraph cluster_342_CSC {
label=""CSC"";
""342_makeCoin"" [label=""makeCoin""];
""342_withdrawTo"" [label=""withdrawTo""];
""342_transfer"" [label=""transfer""];
""342_constructor"" [label=""constructor""];
""342_balanceOf"" [label=""balanceOf""];
""342_withdraw"" [label=""withdraw""];
""342_burnFrom"" [label=""burnFrom""];
}
"
0x4176f0f2b7c95486a5ae06e3d1b29201a42e7630.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1026_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1026_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1026_constructor"" [label=""constructor""];
""1026_depositToken"" [label=""depositToken""];
""1026_tokenFallback"" [label=""tokenFallback""];
""1026_depositEther"" [label=""depositEther""];
""1026_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1026_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1026_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1026_distributeTokenToAddressesAndAmounts"" -> ""1026_onlyOwner"";
""1026_distributeWithTransferFrom"" -> ""1026_onlyOwner"";
""1026_approveToPullOutTokens"" -> ""1026_onlyOwner"";
""1026_depositEther"" -> ""1026_whenNotPaused"";
""1026_tokenFallback"" -> ""1026_whenNotPaused"";
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1026_onlyOwner"";
""1026_distributeTokenToAddress"" -> ""1026_onlyOwner"";
""1026_depositToken"" -> ""1026_whenNotPaused"";
}
"
0x50a667b73223bc612bcc43200120b5c46ee6b4e9.sol,RC,"contract RC is ICOEngineInterface, KYCBase { using SafeMath for uint256; TokenSale tokenSaleContract; uint256 public startTime; uint256 public endTime; uint256 public etherMinimum; uint256 public soldTokens; uint256 public remainingTokens; uint256 public oneTokenInFiatWei; mapping(address => uint256) public etherUser; mapping(address => uint256) public pendingTokenUser; mapping(address => uint256) public tokenUser; uint256[] public tokenThreshold; uint256[] public bonusThreshold; function RC(address _tokenSaleContract, uint256 _oneTokenInFiatWei, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) { require ( _tokenSaleContract != 0 ); require ( _oneTokenInFiatWei != 0 ); require( _remainingTokens != 0 ); require ( _tokenThreshold.length != 0 ); require ( _tokenThreshold.length == _bonusThreshold.length ); bonusThreshold = _bonusThreshold; tokenThreshold = _tokenThreshold; tokenSaleContract = TokenSale(_tokenSaleContract); tokenSaleContract.addMeByRC(); soldTokens = 0; remainingTokens = _remainingTokens; oneTokenInFiatWei = _oneTokenInFiatWei; etherMinimum = _etherMinimum; setTimeRC( _startTime, _endTime ); }",1,"subgraph cluster_1999_RCpro {
label=""RCpro"";
""1999_changeMinimum"" [label=""changeMinimum""];
""1999_totalTokens"" [label=""totalTokens""];
""1999_price"" [label=""price""];
""1999_userBalance"" [label=""userBalance""];
""1999_claimTokenBonus"" [label=""claimTokenBonus""];
""1999_startTime"" [label=""startTime""];
""1999_ended"" [label=""ended""];
""1999_fallback"" [label=""fallback""];
""1999_endTime"" [label=""endTime""];
""1999_giveToken"" [label=""giveToken""];
""1999_releaseTokensTo"" [label=""releaseTokensTo""];
""1999_withdraw"" [label=""withdraw""];
""1999_takeEther"" [label=""takeEther""];
""1999_refundEther"" [label=""refundEther""];
""1999_setTime"" [label=""setTime""];
""1999_setTimeRC"" [label=""setTimeRC""];
""1999_remainingTokens"" [label=""remainingTokens""];
""1999_started"" [label=""started""];
""1999_RCpro"" [label=""RCpro""];
""1999_RCpro"" -> ""1999_KYCBase"";
""1999_releaseTokensTo"" -> ""1999_takeEther"";
""1999_refundEther"" -> ""1999_onlyTokenSaleOwner"";
""1999_releaseTokensTo"" -> ""1999_giveToken"";
""1999_fallback"" -> ""1999_claimTokenBonus"";
""1999_changeMinimum"" -> ""1999_onlyTokenSaleOwner"";
""1999_fallback"" -> ""1999_takeEther"";
""1999_setTime"" -> ""1999_onlyTokenSaleOwner"";
""1999_withdraw"" -> ""1999_onlyTokenSaleOwner"";
""1999_RCpro"" -> ""1999_setTimeRC"";
}
"
0xaa3fbfaf03cd50e6a44d27d10eb14333d1c02e52.sol,ETH_GAME,contract ETH_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETH_GAME {
label=""ETH_GAME"";
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xf122d58b7a4083f103b7336ab05b78d7c6a02a37.sol,PresalePool,contract PresalePool { using SafeMath for uint; uint8 public contractStage = 1; address public owner; uint constant public contributionMin = 100000000000000000; uint public maxContractBalance; uint public feePct; address public receiverAddress; uint public finalBalance; uint[] public ethRefundAmount; address public activeToken; struct Contributor { uint ethRefund; uint balance; mapping (address => uint) tokensClaimed; },1,"subgraph cluster_1116_PresalePool {
label=""PresalePool"";
""1116_checkPoolBalance"" [label=""checkPoolBalance""];
""1116_withdraw"" [label=""withdraw""];
""1116_enableTokenWithdrawals"" [label=""enableTokenWithdrawals""];
""1116__toPct"" [label=""_toPct""];
""1116_checkAvailableTokens"" [label=""checkAvailableTokens""];
""1116__applyPct"" [label=""_applyPct""];
""1116__withdraw"" [label=""_withdraw""];
""1116_PresalePool"" [label=""PresalePool""];
""1116_submitPool"" [label=""submitPool""];
""1116__ethRefund"" [label=""_ethRefund""];
""1116_tokenFallback"" [label=""tokenFallback""];
""1116_fallback"" [label=""fallback""];
""1116__ethDeposit"" [label=""_ethDeposit""];
""1116_withdrawFor"" [label=""withdrawFor""];
""1116_modifyMaxContractBalance"" [label=""modifyMaxContractBalance""];
""1116_checkContributorBalance"" [label=""checkContributorBalance""];
""1116_reopenContributions"" [label=""reopenContributions""];
""1116_closeContributions"" [label=""closeContributions""];
""1116_checkAvailableTokens"" -> ""1116__applyPct"";
""1116_enableTokenWithdrawals"" -> ""1116__toPct"";
""1116_fallback"" -> ""1116__ethRefund"";
""1116_withdraw"" -> ""1116__withdraw"";
""1116_enableTokenWithdrawals"" -> ""1116_onlyOwner"";
""1116_submitPool"" -> ""1116_onlyOwner"";
""1116_withdrawFor"" -> ""1116_onlyOwner"";
""1116_modifyMaxContractBalance"" -> ""1116_onlyOwner"";
""1116__withdraw"" -> ""1116__toPct"";
""1116_withdrawFor"" -> ""1116__withdraw"";
""1116_enableTokenWithdrawals"" -> ""1116_noReentrancy"";
""1116__withdraw"" -> ""1116__applyPct"";
""1116_submitPool"" -> ""1116_noReentrancy"";
""1116_PresalePool"" -> ""1116__toPct"";
""1116_enableTokenWithdrawals"" -> ""1116__applyPct"";
""1116_fallback"" -> ""1116__ethDeposit"";
""1116_closeContributions"" -> ""1116_onlyOwner"";
""1116_reopenContributions"" -> ""1116_onlyOwner"";
}
"
0xeef93ec835c7921038d55ee096671a94e961709b.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1447_RefundVault {
label=""RefundVault"";
""1447_deposit"" [label=""deposit""];
""1447_enableRefunds"" [label=""enableRefunds""];
""1447_setWallet"" [label=""setWallet""];
""1447_RefundVault"" [label=""RefundVault""];
""1447_close"" [label=""close""];
""1447_refund"" [label=""refund""];
""1447_deposit"" -> ""1447_onlyOwner"";
""1447_enableRefunds"" -> ""1447_onlyOwner"";
""1447_close"" -> ""1447_onlyOwner"";
""1447_setWallet"" -> ""1447_onlyOwner"";
}
"
0xd1ceeeef70c61da45800bd81be3352160ad72f2a.sol,Dice2Win,"contract Dice2Win { uint256 constant JACKPOT_MODULO = 1000; uint256 constant HOUSE_EDGE_PERCENT = 2; uint256 constant JACKPOT_FEE_PERCENT = 50; uint256 constant MIN_BET = 0.02 ether; uint256 constant MIN_JACKPOT_BET = 0.1 ether; uint256 constant BLOCK_DELAY = 2; uint256 constant BET_EXPIRATION_BLOCKS = 100; address public owner; address public nextOwner; uint256 public maxBetCoinDice; uint256 public maxBetDoubleDice; uint128 public jackpotSize; uint128 public lockedInBets; enum GameId { CoinFlip, SingleDice, DoubleDice, MaxGameId }",1,"subgraph cluster_833_Dice2Win {
label=""Dice2Win"";
""833_refundBet"" [label=""refundBet""];
""833_getDiceWinAmount"" [label=""getDiceWinAmount""];
""833_changeMaxBetDoubleDice"" [label=""changeMaxBetDoubleDice""];
""833_approveNextOwner"" [label=""approveNextOwner""];
""833_sendFunds"" [label=""sendFunds""];
""833_changeMaxBetCoinDice"" [label=""changeMaxBetCoinDice""];
""833_getRollUnder"" [label=""getRollUnder""];
""833_getMaxBet"" [label=""getMaxBet""];
""833_constructor"" [label=""constructor""];
""833_getRollModulo"" [label=""getRollModulo""];
""833_placeBet"" [label=""placeBet""];
""833_acceptNextOwner"" [label=""acceptNextOwner""];
""833_getJackpotFee"" [label=""getJackpotFee""];
""833_settleBet"" [label=""settleBet""];
""833_kill"" [label=""kill""];
""833_withdrawFunds"" [label=""withdrawFunds""];
""833_fallback"" [label=""fallback""];
""833_increaseJackpot"" [label=""increaseJackpot""];
""833_placeBet"" -> ""833_getMaxBet"";
""833_settleBet"" -> ""833_getRollUnder"";
""833_placeBet"" -> ""833_getRollModulo"";
""833_settleBet"" -> ""833_getDiceWinAmount"";
""833_changeMaxBetDoubleDice"" -> ""833_onlyOwner"";
""833_withdrawFunds"" -> ""833_sendFunds"";
""833_settleBet"" -> ""833_getRollModulo"";
""833_increaseJackpot"" -> ""833_onlyOwner"";
""833_withdrawFunds"" -> ""833_onlyOwner"";
""833_placeBet"" -> ""833_getDiceWinAmount"";
""833_placeBet"" -> ""833_getJackpotFee"";
""833_approveNextOwner"" -> ""833_onlyOwner"";
""833_refundBet"" -> ""833_getRollUnder"";
""833_changeMaxBetCoinDice"" -> ""833_onlyOwner"";
""833_placeBet"" -> ""833_getRollUnder"";
""833_settleBet"" -> ""833_sendFunds"";
""833_kill"" -> ""833_onlyOwner"";
""833_refundBet"" -> ""833_getDiceWinAmount"";
""833_refundBet"" -> ""833_sendFunds"";
""833_refundBet"" -> ""833_getRollModulo"";
}
"
0x1eb0d4794d4067ed004c9d55ff6eb50620b27c58.sol,ProspectorsCrowdsale,"contract ProspectorsCrowdsale is Owned, DSMath { ProspectorsGoldToken public token; address public dev_multisig; uint public total_raised; uint public contributors_count = 0; uint public constant start_time = 1502377200; uint public constant end_time = 1505055600; uint public constant bonus_amount = 10000000 * 10**18; uint public constant start_amount = 60000000 * 10**18; uint public constant price = 0.0005 * 10**18; uint public constant bonus_price = 0.0004 * 10**18; uint public constant goal = 2000 ether; bool private closed = false; mapping(address => uint) funded; modifier in_time { if (time() < start_time || time() > end_time) revert(); _; }",1,"subgraph cluster_1077_ProspectorsCrowdsale {
label=""ProspectorsCrowdsale"";
""1077_my_token_balance"" [label=""my_token_balance""];
""1077_available_with_bonus"" [label=""available_with_bonus""];
""1077_refund"" [label=""refund""];
""1077_participate"" [label=""participate""];
""1077_is_success"" [label=""is_success""];
""1077_time"" [label=""time""];
""1077_available_without_bonus"" [label=""available_without_bonus""];
""1077_init"" [label=""init""];
""1077_closeCrowdsale"" [label=""closeCrowdsale""];
""1077_collect"" [label=""collect""];
""1077_destroy"" [label=""destroy""];
""1077_fallback"" [label=""fallback""];
""1077_min_balance_for_bonus"" [label=""min_balance_for_bonus""];
""1077_participate"" -> ""1077_add"";
""1077_fallback"" -> ""1077_participate"";
""1077_participate"" -> ""1077_in_time"";
""1077_participate"" -> ""1077_sub"";
""1077_destroy"" -> ""1077_onlyOwner"";
""1077_participate"" -> ""1077_wdiv"";
""1077_init"" -> ""1077_onlyOwner"";
""1077_participate"" -> ""1077_has_value"";
""1077_participate"" -> ""1077_min"";
""1077_closeCrowdsale"" -> ""1077_my_token_balance"";
""1077_destroy"" -> ""1077_time"";
""1077_participate"" -> ""1077_wmul"";
""1077_participate"" -> ""1077_available_with_bonus"";
""1077_available_without_bonus"" -> ""1077_my_token_balance"";
""1077_closeCrowdsale"" -> ""1077_time"";
""1077_available_with_bonus"" -> ""1077_my_token_balance"";
""1077_participate"" -> ""1077_my_token_balance"";
""1077_participate"" -> ""1077_cast"";
""1077_available_with_bonus"" -> ""1077_min_balance_for_bonus"";
""1077_closeCrowdsale"" -> ""1077_is_success"";
""1077_participate"" -> ""1077_hadd"";
""1077_available_without_bonus"" -> ""1077_min_balance_for_bonus"";
""1077_available_without_bonus"" -> ""1077_min"";
""1077_participate"" -> ""1077_available_without_bonus"";
}
"
0x4b368266adb3e159affe3f6fe85b8e0f789323c2.sol,TTS,contract TTS is Token { string public name; string public symbol; uint32 internal rate; uint32 internal consume; uint256 internal totalConsume; uint256 internal bigJackpot; uint256 internal smallJackpot; uint256 public consumeRule; address internal owner; modifier onlyOwner(){ require (msg.sender==owner); _; },1,"subgraph cluster_958_TTS {
label=""TTS"";
""958_balanceOf"" [label=""balanceOf""];
""958_transfer"" [label=""transfer""];
""958_approve"" [label=""approve""];
""958_TTS"" [label=""TTS""];
""958_getBalance"" [label=""getBalance""];
""958_getEth"" [label=""getEth""];
""958_getRate"" [label=""getRate""];
""958_setRate"" [label=""setRate""];
""958_trashOf"" [label=""trashOf""];
""958_inTrash"" [label=""inTrash""];
""958_smallCheckOut"" [label=""smallCheckOut""];
""958_getBigJackpot"" [label=""getBigJackpot""];
""958_getTotalConsume"" [label=""getTotalConsume""];
""958_fallback"" [label=""fallback""];
""958_tickets"" [label=""tickets""];
""958_transferFrom"" [label=""transferFrom""];
""958_getConsume"" [label=""getConsume""];
""958_sendAll"" [label=""sendAll""];
""958_allowance"" [label=""allowance""];
""958_ticketConsume"" [label=""ticketConsume""];
""958_setJackpot"" [label=""setJackpot""];
""958_bigCheckOut"" [label=""bigCheckOut""];
""958_getSmallJackpot"" [label=""getSmallJackpot""];
""958_getEth"" -> ""958_onlyOwner"";
""958_smallCheckOut"" -> ""958_onlyOwner"";
""958_bigCheckOut"" -> ""958_onlyOwner"";
""958_ticketConsume"" -> ""958_setJackpot"";
""958_sendAll"" -> ""958_onlyOwner"";
""958_setRate"" -> ""958_onlyOwner"";
}
"
0xee1f0f9731ee93736e219598e6aa441ad36ffc61.sol,ENIGMA,contract ENIGMA { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_ENIGMA {
label=""ENIGMA"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_Try"" [label=""Try""];
""132_StopGame"" [label=""StopGame""];
""132_set_game"" [label=""set_game""];
""132_fallback"" [label=""fallback""];
}
"
0xaab606817809841e8b1168be8779eeaf6744ef64.sol,DividendToken,"contract DividendToken is StandardToken, Ownable { using SafeMath for uint256; uint256 public claimTimeout = 20 days; uint256 public dividendCycleTime = 350 days; uint256 public currentDividend; mapping(address => uint256) unclaimedDividend; mapping(address => uint256) public lastUpdate; uint256 public lastDividendIncreaseDate; mapping(address => bool) public isTreasurer; uint256 public dividendEndTime = 0; event Payin(address _owner, uint256 _value, uint256 _endTime); event Payout(address _tokenHolder, uint256 _value); event Reclaimed(uint256 remainingBalance, uint256 _endTime, uint256 _now); event ChangedTreasurer(address treasurer, bool active); constructor() public { isTreasurer[owner] = true; }",1,"subgraph cluster_1282_DividendToken {
label=""DividendToken"";
""1282_transfer"" [label=""transfer""];
""1282_fallback"" [label=""fallback""];
""1282_getClaimableDividend"" [label=""getClaimableDividend""];
""1282_updateDividend"" [label=""updateDividend""];
""1282_claimDividend"" [label=""claimDividend""];
""1282_transferDividend"" [label=""transferDividend""];
""1282_requestUnclaimed"" [label=""requestUnclaimed""];
""1282_constructor"" [label=""constructor""];
""1282_setTreasurer"" [label=""setTreasurer""];
""1282_transferFrom"" [label=""transferFrom""];
""1282_calcDividend"" [label=""calcDividend""];
""1282_getClaimableDividend"" -> ""1282_calcDividend"";
""1282_transferDividend"" -> ""1282_updateDividend"";
""1282_requestUnclaimed"" -> ""1282_onlyOwner"";
""1282_transfer"" -> ""1282_transferDividend"";
""1282_claimDividend"" -> ""1282_updateDividend"";
""1282_transfer"" -> ""1282_transfer"";
""1282_setTreasurer"" -> ""1282_onlyOwner"";
""1282_transferFrom"" -> ""1282_transferDividend"";
""1282_transferDividend"" -> ""1282_balanceOf"";
""1282_calcDividend"" -> ""1282_balanceOf"";
""1282_updateDividend"" -> ""1282_calcDividend"";
""1282_transferFrom"" -> ""1282_transferFrom"";
}
"
0x70d28b8d6c19f3074a3edf3033f0defa7a4ce4df.sol,AceDice,contract AceDice { uint constant HOUSE_EDGE_PERCENT = 2; uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0004 ether; uint constant MIN_JACKPOT_BET = 0.1 ether; uint constant JACKPOT_MODULO = 1000; uint constant JACKPOT_FEE = 0.001 ether; uint constant MIN_BET = 0.01 ether; uint constant MAX_AMOUNT = 300000 ether; uint constant MAX_MASK_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO; uint constant BET_EXPIRATION_BLOCKS = 250; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; address public owner; address private nextOwner; uint public maxProfit; address public secretSigner; uint128 public jackpotSize; uint public todaysRewardSize; uint128 public lockedInBets; struct Bet { uint amount; uint8 rollUnder; uint40 placeBlockNumber; uint40 mask; address gambler; address inviter; },1,"subgraph cluster_2036_AceDice {
label=""AceDice"";
""2036_thisBalance"" [label=""thisBalance""];
""2036_settleBet"" [label=""settleBet""];
""2036_constructor"" [label=""constructor""];
""2036_withdrawFunds"" [label=""withdrawFunds""];
""2036_settleBetCommon"" [label=""settleBetCommon""];
""2036_settleBetUncleMerkleProof"" [label=""settleBetUncleMerkleProof""];
""2036_setSecretSigner"" [label=""setSecretSigner""];
""2036_requireCorrectReceipt"" [label=""requireCorrectReceipt""];
""2036_approveNextOwner"" [label=""approveNextOwner""];
""2036_getProfile"" [label=""getProfile""];
""2036_getSecretSigner"" [label=""getSecretSigner""];
""2036_payTodayReward"" [label=""payTodayReward""];
""2036_getMyAccuAmount"" [label=""getMyAccuAmount""];
""2036_placeBetWithInviter"" [label=""placeBetWithInviter""];
""2036_verifyMerkleProof"" [label=""verifyMerkleProof""];
""2036_acceptNextOwner"" [label=""acceptNextOwner""];
""2036_encodePacketCommit"" [label=""encodePacketCommit""];
""2036_setAvatarIndex"" [label=""setAvatarIndex""];
""2036_applyVIPLevel"" [label=""applyVIPLevel""];
""2036_placeBet"" [label=""placeBet""];
""2036_memcpy"" [label=""memcpy""];
""2036_setMaxProfit"" [label=""setMaxProfit""];
""2036_refundBet"" [label=""refundBet""];
""2036_setNickName"" [label=""setNickName""];
""2036_setCroupier"" [label=""setCroupier""];
""2036_kill"" [label=""kill""];
""2036_increaseJackpot"" [label=""increaseJackpot""];
""2036_sendFunds"" [label=""sendFunds""];
""2036_verifyCommit"" [label=""verifyCommit""];
""2036_fallback"" [label=""fallback""];
""2036_getDiceWinAmount"" [label=""getDiceWinAmount""];
""2036_placeBet"" -> ""2036_getDiceWinAmount"";
""2036_settleBetUncleMerkleProof"" -> ""2036_verifyMerkleProof"";
""2036_placeBet"" -> ""2036_verifyCommit"";
""2036_setSecretSigner"" -> ""2036_onlyOwner"";
""2036_settleBetUncleMerkleProof"" -> ""2036_requireCorrectReceipt"";
""2036_setMaxProfit"" -> ""2036_onlyOwner"";
""2036_verifyMerkleProof"" -> ""2036_memcpy"";
""2036_payTodayReward"" -> ""2036_onlyOwner"";
""2036_settleBetCommon"" -> ""2036_applyVIPLevel"";
""2036_increaseJackpot"" -> ""2036_onlyOwner"";
""2036_refundBet"" -> ""2036_sendFunds"";
""2036_settleBetCommon"" -> ""2036_getDiceWinAmount"";
""2036_verifyCommit"" -> ""2036_encodePacketCommit"";
""2036_settleBetCommon"" -> ""2036_sendFunds"";
""2036_approveNextOwner"" -> ""2036_onlyOwner"";
""2036_settleBetUncleMerkleProof"" -> ""2036_settleBetCommon"";
""2036_withdrawFunds"" -> ""2036_sendFunds"";
""2036_settleBetUncleMerkleProof"" -> ""2036_onlyCroupier"";
""2036_placeBetWithInviter"" -> ""2036_getDiceWinAmount"";
""2036_settleBet"" -> ""2036_settleBetCommon"";
""2036_getSecretSigner"" -> ""2036_onlyOwner"";
""2036_withdrawFunds"" -> ""2036_onlyOwner"";
""2036_refundBet"" -> ""2036_getDiceWinAmount"";
""2036_kill"" -> ""2036_onlyOwner"";
""2036_settleBet"" -> ""2036_onlyCroupier"";
""2036_placeBetWithInviter"" -> ""2036_verifyCommit"";
""2036_setCroupier"" -> ""2036_onlyOwner"";
}
"
0x553e3e5ba03e862c93c7834b80ca800018ba4736.sol,SamsungCryptoPayments,"contract SamsungCryptoPayments is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 2000000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e1; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0xf228A325c92d4002A159eb52Bf6A9C509C039CCA; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_SamsungCryptoPayments {
label=""SamsungCryptoPayments"";
""1261_transfer"" [label=""transfer""];
""1261_approve"" [label=""approve""];
""1261_allowance"" [label=""allowance""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_constructor"" [label=""constructor""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_add"" [label=""add""];
""1261_getTokens"" [label=""getTokens""];
""1261_distr"" [label=""distr""];
""1261_withdraw"" [label=""withdraw""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_burn"" [label=""burn""];
""1261_fallback"" [label=""fallback""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_Distribute"" [label=""Distribute""];
""1261_distr"" -> ""1261_canDistr"";
""1261_constructor"" -> ""1261_distr"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_getTokens"" -> ""1261_distr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
}
"
0xd7faef6fd3d3e22037619a756221e38f7f2c9c62.sol,Blogger,contract Blogger { address public author; uint public donationCount; uint public withdrawalDate; struct Donate { address funder; uint value; },1,"subgraph cluster_232_Blogger {
label=""Blogger"";
""232_withdraw"" [label=""withdraw""];
""232_constructor"" [label=""constructor""];
""232_requestRefund"" [label=""requestRefund""];
""232_donate"" [label=""donate""];
""232_getContractValue"" [label=""getContractValue""];
""232_getSummary"" [label=""getSummary""];
""232_withdraw"" -> ""232_restricted"";
}
"
0xbf008cb93c2b19c3ae0db4149bcfa465b2ea0888.sol,GameTable,contract GameTable { using SafeMath for uint; struct Player { address addr; uint amount; uint profit; },1,"subgraph cluster_1183_GameTable {
label=""GameTable"";
""1183_getPlayerAmount"" [label=""getPlayerAmount""];
""1183_GameTable"" [label=""GameTable""];
""1183_getOptionInfo"" [label=""getOptionInfo""];
""1183_kill"" [label=""kill""];
""1183_newGame"" [label=""newGame""];
""1183_getGameNum"" [label=""getGameNum""];
""1183_setWinner"" [label=""setWinner""];
""1183_getGameInfo"" [label=""getGameInfo""];
""1183_getPlayerPlayInfo"" [label=""getPlayerPlayInfo""];
""1183_contribute"" [label=""contribute""];
""1183_newOption"" [label=""newOption""];
""1183_safeWithdrawal"" [label=""safeWithdrawal""];
""1183_getGameWinner"" [label=""getGameWinner""];
""1183_setWinner"" -> ""1183_safeWithdrawal"";
}
"
0x383ece94bfdbdefe651aa2cba51e7fca2773b788.sol,PreSale,"contract PreSale is Ownable, ReentrancyGuard { using SafeMath for uint256; RicoToken public token; address tokenContractAddress; uint256 public startTime; uint256 public endTime; address public wallet; uint256 public rate; uint256 public minimumInvest; uint256 public softCap; uint256 public hardCap; mapping(address => uint) public balances; uint256 public weiRaised; uint256 bonusPercent; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function PreSale( uint256 _startTime, uint256 _period, address _wallet, address _token, uint256 _minimumInvest) public { require(_period != 0); require(_token != address(0)); startTime = _startTime; endTime = startTime + _period * 1 days; wallet = _wallet; token = RicoToken(_token); tokenContractAddress = _token; minimumInvest = _minimumInvest; rate = 6667; softCap = 150 * 1 ether; hardCap = 1500 * 1 ether; bonusPercent = 50; }",1,"subgraph cluster_1352_PreSale {
label=""PreSale"";
""1352_changeTokenOwner"" [label=""changeTokenOwner""];
""1352_getTokenAmount"" [label=""getTokenAmount""];
""1352_fallback"" [label=""fallback""];
""1352_forwardFunds"" [label=""forwardFunds""];
""1352_refund"" [label=""refund""];
""1352_finishPreSale"" [label=""finishPreSale""];
""1352_PreSale"" [label=""PreSale""];
""1352_hasEnded"" [label=""hasEnded""];
""1352_buyTokens"" [label=""buyTokens""];
""1352_buyTokens"" -> ""1352_getTokenAmount"";
""1352_changeTokenOwner"" -> ""1352_onlyOwner"";
""1352_fallback"" -> ""1352_buyTokens"";
""1352_buyTokens"" -> ""1352_saleIsOn"";
""1352_buyTokens"" -> ""1352_nonReentrant"";
""1352_finishPreSale"" -> ""1352_forwardFunds"";
""1352_refund"" -> ""1352_refundAllowed"";
""1352_finishPreSale"" -> ""1352_onlyOwner"";
""1352_buyTokens"" -> ""1352_isUnderHardCap"";
}
"
0xedbc41b7d0330860be1dd8d682b2e868ae6da6e4.sol,TokenERC20,"contract TokenERC20 is Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 18; uint256 public totalSupply; uint256 public currentTotalSupply = 0; uint256 public airdrop; uint256 public startBalance; uint256 public buyPrice ; mapping(address => bool) touched; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) internal allowed; mapping(address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Burn(address indexed burner, uint256 value); constructor( uint256 initialSupply ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_909_TokenERC20 {
label=""TokenERC20"";
""909_selfdestructs"" [label=""selfdestructs""];
""909_balanceOf"" [label=""balanceOf""];
""909_totalSupply"" [label=""totalSupply""];
""909_transferFrom"" [label=""transferFrom""];
""909_constructor"" [label=""constructor""];
""909_getBalance"" [label=""getBalance""];
""909_increaseApproval"" [label=""increaseApproval""];
""909_setPrices"" [label=""setPrices""];
""909_fallback"" [label=""fallback""];
""909_modifyairdrop"" [label=""modifyairdrop""];
""909_allowance"" [label=""allowance""];
""909__burn"" [label=""_burn""];
""909_getEth"" [label=""getEth""];
""909_burn"" [label=""burn""];
""909_freezeAccount"" [label=""freezeAccount""];
""909_decreaseApproval"" [label=""decreaseApproval""];
""909_approve"" [label=""approve""];
""909_transfer"" [label=""transfer""];
""909_mintToken"" [label=""mintToken""];
""909_modifyairdrop"" -> ""909_onlyOwner"";
""909_balanceOf"" -> ""909_getBalance"";
""909_freezeAccount"" -> ""909_onlyOwner"";
""909_selfdestructs"" -> ""909_onlyOwner"";
""909_setPrices"" -> ""909_onlyOwner"";
""909_getEth"" -> ""909_onlyOwner"";
""909_burn"" -> ""909__burn"";
""909_mintToken"" -> ""909_onlyOwner"";
}
"
0x4c4757b23526ba13876f8ef3efe973618266e3e8.sol,UZMINI_KO,contract UZMINI_KO { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_UZMINI_KO {
label=""UZMINI_KO"";
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
}
"
0xd3efa0d59dccd79a8f2011f5adf527e78f1f68b4.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 10000000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_selfdestructs"" [label=""selfdestructs""];
""612__transfer"" [label=""_transfer""];
""612_freezeAccount"" [label=""freezeAccount""];
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_mintToken"" [label=""mintToken""];
""612_buy"" [label=""buy""];
""612_fallback"" [label=""fallback""];
""612_setPrices"" [label=""setPrices""];
""612_selfdestructs"" -> ""612_onlyOwner"";
""612_fallback"" -> ""612__transfer"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_buy"" -> ""612__transfer"";
""612_mintToken"" -> ""612_onlyOwner"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
}
"
0xf3391a78b4d53b2a600ad9e663ae00f6d5bb41a4.sol,MillenniumNetwork,"contract MillenniumNetwork is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 330000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 1000000e8; uint public target0drop = 4000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_MillenniumNetwork {
label=""MillenniumNetwork"";
""1253_constructor"" [label=""constructor""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_distr"" [label=""distr""];
""1253_getTokens"" [label=""getTokens""];
""1253_fallback"" [label=""fallback""];
""1253_approve"" [label=""approve""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_withdraw"" [label=""withdraw""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_add"" [label=""add""];
""1253_transfer"" [label=""transfer""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_Distribute"" [label=""Distribute""];
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_distr"" -> ""1253_canDistr"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
}
"
0xee68907c93b57d57a1c4d60940ff1b310e18e467.sol,ICOBuyer,"contract ICOBuyer is Ownable { event EtherReceived(address indexed _contributor, uint256 _amount); event EtherWithdrawn(uint256 _amount); event TokensWithdrawn(uint256 _balance); event ICOPurchased(uint256 _amount); event ICOStartBlockChanged(uint256 _icoStartBlock); event ExecutorChanged(address _executor); event CrowdSaleChanged(address _crowdSale); event TokenChanged(address _token); event PurchaseCapChanged(uint256 _purchaseCap); uint256 public icoStartBlock; address public crowdSale; address public executor; uint256 public purchaseCap; modifier onlyExecutorOrOwner() { require((msg.sender == executor) || (msg.sender == owner)); _; }",1,"subgraph cluster_424_ICOBuyer {
label=""ICOBuyer"";
""424_withdrawEther"" [label=""withdrawEther""];
""424_ICOBuyer"" [label=""ICOBuyer""];
""424_withdrawTokens"" [label=""withdrawTokens""];
""424_changeCrowdSale"" [label=""changeCrowdSale""];
""424_changeExecutor"" [label=""changeExecutor""];
""424_fallback"" [label=""fallback""];
""424_getBlockNumber"" [label=""getBlockNumber""];
""424_buyICO"" [label=""buyICO""];
""424_changeICOStartBlock"" [label=""changeICOStartBlock""];
""424_changePurchaseCap"" [label=""changePurchaseCap""];
""424_changeICOStartBlock"" -> ""424_onlyOwner"";
""424_changePurchaseCap"" -> ""424_onlyOwner"";
""424_changeCrowdSale"" -> ""424_onlyOwner"";
""424_changeExecutor"" -> ""424_onlyOwner"";
""424_buyICO"" -> ""424_getBlockNumber"";
""424_withdrawTokens"" -> ""424_onlyOwner"";
""424_withdrawEther"" -> ""424_onlyOwner"";
""424_buyICO"" -> ""424_onlyExecutorOrOwner"";
}
"
0x44cf74e16bd4dfcf38cec1236f5cb7e92a4f9edf.sol,BC_GAME,contract BC_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_BC_GAME {
label=""BC_GAME"";
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x6de3cc59152e19f108378984f45e20a34c9f6338.sol,EtherSpin,"contract EtherSpin is usingOraclize, SafeMath { address public owner; uint public betCount; uint public minBet; uint public maxBet; uint public edgeRange; uint public payoutMultiplier; uint public gasLimit; uint public standardFee; uint public minimumNumber; uint public totalPlayerWinnings; uint public totalHouseWinnings; mapping (bytes32 => address) playerAddy; mapping (bytes32 => uint) playerBetSize; mapping (bytes32 => bool) playerHiLo; event LogBet(address indexed playerAddy, bool indexed HiLo, uint ActualRNGNumber, uint betSizing, bool WinLossResult); event LogErr(uint errcode); modifier onlyOwner { if (msg.sender != owner) throw; _; }",1,"subgraph cluster_6368_EtherSpin {
label=""EtherSpin"";
""6368_ownerSetEdgeRangeAndPayout"" [label=""ownerSetEdgeRangeAndPayout""];
""6368_ownerTransferEther"" [label=""ownerTransferEther""];
""6368___callback"" [label=""__callback""];
""6368_ownerSetGasLimit"" [label=""ownerSetGasLimit""];
""6368_ownerKillContract"" [label=""ownerKillContract""];
""6368_roll"" [label=""roll""];
""6368_ownerSetLimits"" [label=""ownerSetLimits""];
""6368_ownerDeposit"" [label=""ownerDeposit""];
""6368_fallback"" [label=""fallback""];
""6368_EtherSpin"" [label=""EtherSpin""];
""6368_rollLo"" [label=""rollLo""];
""6368_ownerSetStandardFee"" [label=""ownerSetStandardFee""];
""6368_ownerTransferEther"" -> ""6368_onlyOwner"";
""6368_EtherSpin"" -> ""6368_ownerSetGasLimit"";
""6368___callback"" -> ""6368_oraclize_randomDS_proofVerify__returnCode"";
""6368_ownerSetEdgeRangeAndPayout"" -> ""6368_onlyOwner"";
""6368_ownerSetStandardFee"" -> ""6368_onlyOwner"";
""6368_fallback"" -> ""6368_roll"";
""6368_ownerSetGasLimit"" -> ""6368_onlyOwner"";
""6368_ownerKillContract"" -> ""6368_onlyOwner"";
""6368_EtherSpin"" -> ""6368_ownerSetEdgeRangeAndPayout"";
""6368_EtherSpin"" -> ""6368_oraclize_setProof"";
""6368_roll"" -> ""6368_oraclize_newRandomDSQuery"";
""6368___callback"" -> ""6368_add"";
""6368_rollLo"" -> ""6368_oraclize_newRandomDSQuery"";
""6368_ownerSetLimits"" -> ""6368_onlyOwner"";
""6368_EtherSpin"" -> ""6368_ownerSetLimits"";
""6368_EtherSpin"" -> ""6368_ownerSetStandardFee"";
""6368___callback"" -> ""6368_onlyOraclize"";
}
"
0xedebe7749b91a475918750842256f23fbe8e3029.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private admin = msg.sender; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },1,"subgraph cluster_1164_PlayerBook {
label=""PlayerBook"";
""1164_getNameFee"" [label=""getNameFee""];
""1164_constructor"" [label=""constructor""];
""1164_addGame"" [label=""addGame""];
""1164_checkIfNameValid"" [label=""checkIfNameValid""];
""1164_setRegistrationFee"" [label=""setRegistrationFee""];
""1164_getPlayerName"" [label=""getPlayerName""];
""1164_determinePID"" [label=""determinePID""];
""1164_registerNameXaddr"" [label=""registerNameXaddr""];
""1164_registerNameCore"" [label=""registerNameCore""];
""1164_registerNameXIDFromDapp"" [label=""registerNameXIDFromDapp""];
""1164_getPlayerAddr"" [label=""getPlayerAddr""];
""1164_registerNameXID"" [label=""registerNameXID""];
""1164_registerNameXname"" [label=""registerNameXname""];
""1164_getPlayerLAff"" [label=""getPlayerLAff""];
""1164_registerNameXnameFromDapp"" [label=""registerNameXnameFromDapp""];
""1164_registerNameXaddrFromDapp"" [label=""registerNameXaddrFromDapp""];
""1164_useMyOldName"" [label=""useMyOldName""];
""1164_getPlayerID"" [label=""getPlayerID""];
""1164_addMeToGame"" [label=""addMeToGame""];
""1164_getPlayerID"" -> ""1164_determinePID"";
""1164_registerNameXaddr"" -> ""1164_isHuman"";
""1164_registerNameXnameFromDapp"" -> ""1164_determinePID"";
""1164_registerNameXIDFromDapp"" -> ""1164_determinePID"";
""1164_registerNameXIDFromDapp"" -> ""1164_isRegisteredGame"";
""1164_registerNameXaddrFromDapp"" -> ""1164_registerNameCore"";
""1164_registerNameXaddrFromDapp"" -> ""1164_determinePID"";
""1164_setRegistrationFee"" -> ""1164_onlyAdmin"";
""1164_registerNameXname"" -> ""1164_determinePID"";
""1164_registerNameXID"" -> ""1164_determinePID"";
""1164_registerNameXnameFromDapp"" -> ""1164_isRegisteredGame"";
""1164_useMyOldName"" -> ""1164_isHuman"";
""1164_registerNameXaddrFromDapp"" -> ""1164_isRegisteredGame"";
""1164_addMeToGame"" -> ""1164_isHuman"";
""1164_registerNameXID"" -> ""1164_isHuman"";
""1164_registerNameXID"" -> ""1164_registerNameCore"";
""1164_registerNameXaddr"" -> ""1164_registerNameCore"";
""1164_registerNameXname"" -> ""1164_registerNameCore"";
""1164_registerNameXnameFromDapp"" -> ""1164_registerNameCore"";
""1164_addGame"" -> ""1164_onlyAdmin"";
""1164_getPlayerID"" -> ""1164_isRegisteredGame"";
""1164_registerNameXaddr"" -> ""1164_determinePID"";
""1164_registerNameXname"" -> ""1164_isHuman"";
""1164_registerNameXIDFromDapp"" -> ""1164_registerNameCore"";
}
"
0x0180ec945191fda23c52b1d05eec64a2e3f68781.sol,BnsPresale,"contract BnsPresale { string public constant VERSION = ; uint public constant PRESALE_START = 4465500; uint public constant PRESALE_END = 4466550; uint public constant WITHDRAWAL_END = 4469000; address public constant OWNER = 0xcEAfe38b8d3802789A2A2cc45EA5d08bE8EA3b49; uint public constant MIN_TOTAL_AMOUNT_TO_RECEIVE_ETH = 0; uint public constant MAX_TOTAL_AMOUNT_TO_RECEIVE_ETH = 1; uint public constant MIN_ACCEPTED_AMOUNT_FINNEY = 1; string[5] private stateNames = [, , , , ]; enum State { BEFORE_START, PRESALE_RUNNING, WITHDRAWAL_RUNNING, REFUND_RUNNING, CLOSED }",1,"subgraph cluster_489_BnsPresale {
label=""BnsPresale"";
""489_withdrawFunds"" [label=""withdrawFunds""];
""489_sendRefund"" [label=""sendRefund""];
""489_currentState"" [label=""currentState""];
""489_receiveFunds"" [label=""receiveFunds""];
""489_stop"" [label=""stop""];
""489_refund"" [label=""refund""];
""489_BnsPresale"" [label=""BnsPresale""];
""489_state"" [label=""state""];
""489_fallback"" [label=""fallback""];
""489_min"" [label=""min""];
""489_abort"" [label=""abort""];
""489_sendRefund"" -> ""489_tokenHoldersOnly"";
""489_refund"" -> ""489_noReentrancy"";
""489_stop"" -> ""489_onlyOwner"";
""489_state"" -> ""489_currentState"";
""489_fallback"" -> ""489_sendRefund"";
""489_refund"" -> ""489_sendRefund"";
""489_withdrawFunds"" -> ""489_onlyOwner"";
""489_abort"" -> ""489_onlyOwner"";
""489_withdrawFunds"" -> ""489_noReentrancy"";
""489_BnsPresale"" -> ""489_validSetupOnly"";
""489_fallback"" -> ""489_currentState"";
""489_sendRefund"" -> ""489_min"";
""489_fallback"" -> ""489_receiveFunds"";
""489_refund"" -> ""489_inState"";
""489_receiveFunds"" -> ""489_notTooSmallAmountOnly"";
""489_stop"" -> ""489_inState"";
""489_fallback"" -> ""489_noReentrancy"";
""489_abort"" -> ""489_inStateBefore"";
}
"
0x3395465cb04b8ebd2ae2647cf37bcb2384d71d49.sol,Base,contract Base { using SafeMath for uint256; uint public createTime = now; address public owner; modifier onlyOwner { require(msg.sender == owner); _; },1,"subgraph cluster_274_Base {
label=""Base"";
""274_setLock"" [label=""setLock""];
""274_userRefund"" [label=""userRefund""];
""274_lock"" [label=""lock""];
""274_unLock"" [label=""unLock""];
""274__userRefund"" [label=""_userRefund""];
""274_setOwner"" [label=""setOwner""];
""274_getEventId"" [label=""getEventId""];
""274__userRefund"" -> ""274_lock"";
""274_setOwner"" -> ""274_onlyOwner"";
""274__userRefund"" -> ""274_unLock"";
""274_userRefund"" -> ""274__userRefund"";
""274_setLock"" -> ""274_onlyOwner"";
}
"
0x5085c5356129ee11bffb523e3166d7153ac13c75.sol,Casino,"contract Casino is Ownable, HouseAdmin { using SafeMath for uint; uint constant HOUSE_EDGE_PERCENT = 1; uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0003 ether; uint constant BET_AMOUNT_MIN = 0.01 ether; uint constant BET_AMOUNT_MAX = 1000 ether; uint constant BET_EXPIRATION_BLOCKS = 250; uint constant MAX_MASKABLE_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASKABLE_MODULO; uint constant POPCOUNT_MULT = 0x0000000000002000000000100000000008000000000400000000020000000001; uint constant POPCOUNT_MASK = 0x0001041041041041041041041041041041041041041041041041041041041041; uint constant POPCOUNT_MODULO = 0x3F; uint public bankFund; struct Bet { uint8 modulo; uint64 choice; uint amount; uint winAmount; uint placeBlockNumber; bool isActive; address player; }",1,"subgraph cluster_960_Casino {
label=""Casino"";
""960_closeBet"" [label=""closeBet""];
""960_getAvailableBalance"" [label=""getAvailableBalance""];
""960_recharge"" [label=""recharge""];
""960_constructor"" [label=""constructor""];
""960_placeBet"" [label=""placeBet""];
""960_withdraw"" [label=""withdraw""];
""960_refundBet"" [label=""refundBet""];
""960_closeBet"" -> ""960_onlyCroupier"";
""960_withdraw"" -> ""960_onlyOwner"";
""960_refundBet"" -> ""960_onlyCroupier"";
}
"
0x84cd9cf60bcb44f7bab8b75e6f03614c2c3b22b7.sol,ESmart,contract ESmart { uint constant public INVESTMENT = 0.05 ether; uint constant private START_TIME = 1541435400; address constant private TECH = 0x9A5B6966379a61388068bb765c518E5bC4D9B509; address constant private PROMO = 0xD6104cEca65db37925541A800870aEe09C8Fd78D; address constant private LAST_FUND = 0x357b9046f99eEC7E705980F328F00BAab4b3b6Be; uint constant public JACKPOT_PERCENT = 1; uint constant public TECH_PERCENT = 7; uint constant public PROMO_PERCENT = 13; uint constant public LAST_FUND_PERCENT = 10; uint constant public MAX_IDLE_TIME = 10 minutes; uint constant public NEXT_ROUND_TIME = 30 minutes; uint constant public MULTIPLIER = 120; struct Deposit { address depositor; uint128 deposit; uint128 expect; },1,"subgraph cluster_779_ESmart {
label=""ESmart"";
""779_getQueueLength"" [label=""getQueueLength""];
""779_getDeposits"" [label=""getDeposits""];
""779_proceedToNewStage"" [label=""proceedToNewStage""];
""779_pay"" [label=""pay""];
""779_addDeposit"" [label=""addDeposit""];
""779_getStartTime"" [label=""getStartTime""];
""779_getDeposit"" [label=""getDeposit""];
""779_checkAndUpdateStage"" [label=""checkAndUpdateStage""];
""779_withdrawPrize"" [label=""withdrawPrize""];
""779_getDepositsCount"" [label=""getDepositsCount""];
""779_getStageStartTime"" [label=""getStageStartTime""];
""779_push"" [label=""push""];
""779_fallback"" [label=""fallback""];
""779_getCurrentStageByTime"" [label=""getCurrentStageByTime""];
""779_fallback"" -> ""779_pay"";
""779_getStartTime"" -> ""779_getStageStartTime"";
""779_withdrawPrize"" -> ""779_getCurrentStageByTime"";
""779_fallback"" -> ""779_checkAndUpdateStage"";
""779_fallback"" -> ""779_withdrawPrize"";
""779_fallback"" -> ""779_addDeposit"";
""779_checkAndUpdateStage"" -> ""779_getCurrentStageByTime"";
""779_getDeposits"" -> ""779_getDepositsCount"";
""779_checkAndUpdateStage"" -> ""779_proceedToNewStage"";
""779_fallback"" -> ""779_getStartTime"";
""779_getStartTime"" -> ""779_getCurrentStageByTime"";
""779_proceedToNewStage"" -> ""779_getStageStartTime"";
""779_addDeposit"" -> ""779_push"";
}
"
0x86e4dc25259ee2191cd8ae40e1865b9f0319646c.sol,CryptoRomeControl,"contract CryptoRomeControl { event ContractUpgrade(address newContract); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); address public ownerPrimary; address public ownerSecondary; address public ownerWallet; address public cryptoRomeWallet; mapping(address => uint8) public otherOperators; address public improvementContract; bool public paused = false; constructor() public { ownerPrimary = msg.sender; ownerSecondary = msg.sender; ownerWallet = msg.sender; cryptoRomeWallet = msg.sender; }",1,"subgraph cluster_2408_CryptoRomeControl {
label=""CryptoRomeControl"";
""2408_setOtherOperator"" [label=""setOtherOperator""];
""2408_transferCryptoRomeWalletOwnership"" [label=""transferCryptoRomeWalletOwnership""];
""2408_setSecondaryOwner"" [label=""setSecondaryOwner""];
""2408_transferOwnerWalletOwnership"" [label=""transferOwnerWalletOwnership""];
""2408_withdrawBalance"" [label=""withdrawBalance""];
""2408_pause"" [label=""pause""];
""2408_setImprovementContract"" [label=""setImprovementContract""];
""2408_setPrimaryOwner"" [label=""setPrimaryOwner""];
""2408_unpause"" [label=""unpause""];
""2408_constructor"" [label=""constructor""];
""2408_pause"" -> ""2408_whenNotPaused"";
""2408_setSecondaryOwner"" -> ""2408_onlyOwner"";
""2408_unpause"" -> ""2408_onlyOwner"";
""2408_setOtherOperator"" -> ""2408_onlyOwner"";
""2408_setImprovementContract"" -> ""2408_onlyOwner"";
""2408_setPrimaryOwner"" -> ""2408_onlyOwner"";
""2408_withdrawBalance"" -> ""2408_onlyOwner"";
""2408_unpause"" -> ""2408_whenPaused"";
""2408_transferOwnerWalletOwnership"" -> ""2408_onlyOwner"";
""2408_pause"" -> ""2408_onlyOwner"";
""2408_transferCryptoRomeWalletOwnership"" -> ""2408_onlyOwner"";
}
"
0x3a966ffa8451cbf3769b7d1f94d5b47da254edb0.sol,Play0x_LottoBall,contract Play0x_LottoBall { using SafeMath for uint256; using SafeMath for uint128; using SafeMath for uint40; using SafeMath for uint8; uint public jackpotSize; uint public tokenJackpotSize; uint public MIN_BET; uint public MAX_BET; uint public MAX_AMOUNT; uint public maxProfit; uint public maxTokenProfit; uint8 public platformFeePercentage = 15; uint8 public jackpotFeePercentage = 5; uint8 public ERC20rewardMultiple = 5; uint constant BetExpirationBlocks = 250; uint public lockedInBets; uint public lockedTokenInBets; bytes32 bitComparisonMask = 0xF; address public owner; address private nextOwner; address public manager; address private nextManager; address[] public secretSignerList; address public ERC20ContractAddres; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Bet { uint amount; uint40 placeBlockNumber; address gambler; },1,"subgraph cluster_3084_Play0x_LottoBall {
label=""Play0x_LottoBall"";
""3084_setMaxProfit"" [label=""setMaxProfit""];
""3084_getJackpotWinBonus"" [label=""getJackpotWinBonus""];
""3084_sendFunds"" [label=""sendFunds""];
""3084_sendTokenFundsToManager"" [label=""sendTokenFundsToManager""];
""3084_updateMAX_AMOUNT"" [label=""updateMAX_AMOUNT""];
""3084_approveNextOwner"" [label=""approveNextOwner""];
""3084_getBonusPercentageByMachineMode"" [label=""getBonusPercentageByMachineMode""];
""3084_withdrawAlltokenFunds"" [label=""withdrawAlltokenFunds""];
""3084_updateBitComparisonMask"" [label=""updateBitComparisonMask""];
""3084_settleBetVerifi"" [label=""settleBetVerifi""];
""3084_withdrawToken"" [label=""withdrawToken""];
""3084_getPossibleWinAmount"" [label=""getPossibleWinAmount""];
""3084_setTokenAddress"" [label=""setTokenAddress""];
""3084_withdrawFunds"" [label=""withdrawFunds""];
""3084_updateJackpotFeePercentage"" [label=""updateJackpotFeePercentage""];
""3084_updatePlatformFeePercentage"" [label=""updatePlatformFeePercentage""];
""3084_refundBet"" [label=""refundBet""];
""3084_updateERC20rewardMultiple"" [label=""updateERC20rewardMultiple""];
""3084_updateMIN_BET"" [label=""updateMIN_BET""];
""3084_settleBet"" [label=""settleBet""];
""3084_clearProcessedBet"" [label=""clearProcessedBet""];
""3084_getContractInformation"" [label=""getContractInformation""];
""3084_withdrawAllFunds"" [label=""withdrawAllFunds""];
""3084_refundTokenBet"" [label=""refundTokenBet""];
""3084_updateWithdrawalModeByIndex"" [label=""updateWithdrawalModeByIndex""];
""3084_setSecretSignerByIndex"" [label=""setSecretSignerByIndex""];
""3084_runRotateTime"" [label=""runRotateTime""];
""3084_getContractAddress"" [label=""getContractAddress""];
""3084_initialParameter"" [label=""initialParameter""];
""3084_setSecretSignerList"" [label=""setSecretSignerList""];
""3084_fallback"" [label=""fallback""];
""3084_placeTokenBet"" [label=""placeTokenBet""];
""3084_sendFundsToOwner"" [label=""sendFundsToOwner""];
""3084_constructor"" [label=""constructor""];
""3084_acceptNextOwner"" [label=""acceptNextOwner""];
""3084_updateWithdrawalMode"" [label=""updateWithdrawalMode""];
""3084_sendFundsToManager"" [label=""sendFundsToManager""];
""3084_kill"" [label=""kill""];
""3084_acceptNextManager"" [label=""acceptNextManager""];
""3084_clearStorage"" [label=""clearStorage""];
""3084_updateMAX_BET"" [label=""updateMAX_BET""];
""3084_placeBet"" [label=""placeBet""];
""3084_approveNextManager"" [label=""approveNextManager""];
""3084_withdrawToken"" -> ""3084_onlyOwner"";
""3084_updateBitComparisonMask"" -> ""3084_onlyOwner"";
""3084_clearStorage"" -> ""3084_clearProcessedBet"";
""3084_withdrawAllFunds"" -> ""3084_onlyOwner"";
""3084_sendFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getPossibleWinAmount"";
""3084_updateJackpotFeePercentage"" -> ""3084_onlyOwner"";
""3084_setMaxProfit"" -> ""3084_onlyOwner"";
""3084_withdrawAlltokenFunds"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_sendFunds"";
""3084_setTokenAddress"" -> ""3084_onlyManager"";
""3084_updateWithdrawalModeByIndex"" -> ""3084_onlyManager"";
""3084_updateERC20rewardMultiple"" -> ""3084_onlyManager"";
""3084_updateMIN_BET"" -> ""3084_onlyManager"";
""3084_initialParameter"" -> ""3084_onlyOwner"";
""3084_setSecretSignerByIndex"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_onlyOwner"";
""3084_approveNextManager"" -> ""3084_onlyManager"";
""3084_setSecretSignerList"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_sendFunds"";
""3084_refundBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_sendTokenFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_kill"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_runRotateTime"";
""3084_sendFundsToOwner"" -> ""3084_onlyOwner"";
""3084_approveNextOwner"" -> ""3084_onlyOwner"";
""3084_updateMAX_AMOUNT"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_getPossibleWinAmount"";
""3084_updatePlatformFeePercentage"" -> ""3084_onlyOwner"";
""3084_settleBetVerifi"" -> ""3084_runRotateTime"";
""3084_updateWithdrawalMode"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_sendFunds"";
""3084_runRotateTime"" -> ""3084_getJackpotWinBonus"";
""3084_updateMAX_BET"" -> ""3084_onlyManager"";
}
"
0x5bf5436b367de54860d1b0be31203349a4d5caa7.sol,CryptoCarAuction,"contract CryptoCarAuction is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 45000000000000000000000000; uint256 public totalDistributed = 100000000000000000000000; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 2600000000000000000000; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_962_CryptoCarAuction {
label=""CryptoCarAuction"";
""962_getTokens"" [label=""getTokens""];
""962_updateTokensPerEth"" [label=""updateTokensPerEth""];
""962_constructor"" [label=""constructor""];
""962_transferFrom"" [label=""transferFrom""];
""962_transferOwnership"" [label=""transferOwnership""];
""962_burn"" [label=""burn""];
""962_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""962_doAirdrop"" [label=""doAirdrop""];
""962_finishDistribution"" [label=""finishDistribution""];
""962_getasall"" [label=""getasall""];
""962_balanceOf"" [label=""balanceOf""];
""962_approve"" [label=""approve""];
""962_distr"" [label=""distr""];
""962_allowance"" [label=""allowance""];
""962_getTokenBalance"" [label=""getTokenBalance""];
""962_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""962_fallback"" [label=""fallback""];
""962_transfer"" [label=""transfer""];
""962_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""962_getas"" [label=""getas""];
""962_fallback"" -> ""962_getTokens"";
""962_updateTokensPerEth"" -> ""962_onlyOwner"";
""962_adminClaimAirdrop"" -> ""962_onlyOwner"";
""962_getTokens"" -> ""962_distr"";
""962_burn"" -> ""962_onlyOwner"";
""962_getTokens"" -> ""962_canDistr"";
""962_transferOwnership"" -> ""962_onlyOwner"";
""962_getasall"" -> ""962_onlyOwner"";
""962_distr"" -> ""962_canDistr"";
""962_transfer"" -> ""962_onlyPayloadSize"";
""962_getas"" -> ""962_onlyOwner"";
""962_finishDistribution"" -> ""962_onlyOwner"";
""962_adminClaimAirdropMultiple"" -> ""962_onlyOwner"";
""962_adminClaimAirdrop"" -> ""962_doAirdrop"";
""962_finishDistribution"" -> ""962_canDistr"";
""962_adminClaimAirdropMultiple"" -> ""962_doAirdrop"";
""962_transferFrom"" -> ""962_onlyPayloadSize"";
""962_constructor"" -> ""962_distr"";
""962_withdrawForeignTokens"" -> ""962_onlyOwner"";
}
"
0x0dcfdb9f5496ed7f62dd0ac019c7daf184a66aef.sol,LVRCrowdsale,"contract LVRCrowdsale { Token public tokenReward; address public creator; address public owner = 0xC9167F51CDEa635634E6d92D25664379dde36484; uint256 public price; uint256 public startDate; uint256 public endDate; event FundTransfer(address backer, uint amount, bool isContribution); function LVRCrowdsale() public { creator = msg.sender; startDate = 1522839600; endDate = 1525431600; price = 1000; tokenReward = Token(0x7095E151aBD19e8C99abdfB4568F675f747f97F6); }",1,"subgraph cluster_285_LVRCrowdsale {
label=""LVRCrowdsale"";
""285_kill"" [label=""kill""];
""285_setOwner"" [label=""setOwner""];
""285_fallback"" [label=""fallback""];
""285_setCreator"" [label=""setCreator""];
""285_setStartDate"" [label=""setStartDate""];
""285_setEndtDate"" [label=""setEndtDate""];
""285_setPrice"" [label=""setPrice""];
""285_setToken"" [label=""setToken""];
""285_LVRCrowdsale"" [label=""LVRCrowdsale""];
}
"
0x7012ef33dcc79a7341ba05cf2c5699eaaa5e0d7d.sol,Transaction,contract Transaction is Ownable { struct TransactionNeoPlace { uint id; address seller; address buyer; bytes16 itemId; bytes8 typeItem; string location; string pictureHash; bytes16 receiptHash; string comment; bytes8 status; uint256 _price; },1,"subgraph cluster_738_Transaction {
label=""Transaction"";
""738_stringToBytes8"" [label=""stringToBytes8""];
""738_getPurchases"" [label=""getPurchases""];
""738_getSales"" [label=""getSales""];
""738_sendAmount"" [label=""sendAmount""];
""738_unlockFunds"" [label=""unlockFunds""];
""738_kill"" [label=""kill""];
""738_getNumberOfTransactions"" [label=""getNumberOfTransactions""];
""738_sendAdditionalFunds"" [label=""sendAdditionalFunds""];
""738_buyItem"" [label=""buyItem""];
""738_unlockFunds"" -> ""738_stringToBytes8"";
""738_kill"" -> ""738_onlyOwner"";
""738_sendAdditionalFunds"" -> ""738_stringToBytes8"";
}
"
0x53fedbfc3f34bcda66f7dbbff52c907e7707bbff.sol,BeezGold,"contract BeezGold is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 165 * 1 days; uint public round2 = now + 130 * 1 days; uint public round1 = now + 35 * 1 days; uint256 public totalSupply = 70000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 25700e8; uint public target0drop = 0; uint public progress0drop = 0; address multisig = 0x654186811320885fC24C318E70a119A43279c1BE; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_BeezGold {
label=""BeezGold"";
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_allowance"" [label=""allowance""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_Distribute"" [label=""Distribute""];
""1263_withdraw"" [label=""withdraw""];
""1263_add"" [label=""add""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_distr"" [label=""distr""];
""1263_getTokens"" [label=""getTokens""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_constructor"" [label=""constructor""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_fallback"" [label=""fallback""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_transfer"" [label=""transfer""];
""1263_burn"" [label=""burn""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_approve"" [label=""approve""];
""1263_add"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_constructor"" -> ""1263_distr"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_getTokens"" -> ""1263_distr"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
}
"
0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol,TydoPreIco,contract TydoPreIco is Owned { using SafeMath for uint256; uint256 public constant COINS_PER_ETH = 12000; uint256 public constant bonus = 25; mapping (address => uint256) public balances; mapping (address => uint256) ethBalances; uint256 public ethCollected; uint256 public tokenSold; uint256 constant tokenDecMult = 1 ether; uint8 public state = 0; AbstractERC20 public token; event SaleStart(); event SaleClosedSuccess(uint256 _tokenSold); event SaleClosedFail(uint256 _tokenSold); constructor(address _coinToken) Owned() public { token = AbstractERC20(_coinToken); },1,"subgraph cluster_656_TydoPreIco {
label=""TydoPreIco"";
""656_withdrawTokens"" [label=""withdrawTokens""];
""656_closeSuccess"" [label=""closeSuccess""];
""656_addBonus"" [label=""addBonus""];
""656_open"" [label=""open""];
""656_fallback"" [label=""fallback""];
""656_canBuy"" [label=""canBuy""];
""656_refund"" [label=""refund""];
""656_constructor"" [label=""constructor""];
""656_tokensLeft"" [label=""tokensLeft""];
""656_buy"" [label=""buy""];
""656_withdraw"" [label=""withdraw""];
""656_closeFail"" [label=""closeFail""];
""656_withdraw"" -> ""656_ownerOnly"";
""656_constructor"" -> ""656_constructor"";
""656_fallback"" -> ""656_withdrawTokens"";
""656_buy"" -> ""656_canBuy"";
""656_fallback"" -> ""656_buy"";
""656_open"" -> ""656_ownerOnly"";
""656_fallback"" -> ""656_refund"";
""656_closeFail"" -> ""656_ownerOnly"";
""656_closeSuccess"" -> ""656_ownerOnly"";
""656_buy"" -> ""656_addBonus"";
}
"
0x0d11511ab22ec6e7a87f439a663862f1ec6d4a4b.sol,SMCT,"contract SMCT is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function SMCT() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_SMCT {
label=""SMCT"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_SMCT"" [label=""SMCT""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x0091e27b9ef50427ad431be70dc441f9f6639d78.sol,COE,"contract COE { string public name = ; uint8 public decimals = 18; string public symbol = ; address public _owner; address public _dev = 0xC96CfB18C39DC02FBa229B6EA698b1AD5576DF4c; address public _devFeesAddr; uint256 public _tokePerEth = 177000000000000000; bool public _coldStorage = true; bool public _receiveEth = true; bool _feesEnabled = false; bool _payFees = false; uint256 _fees; uint256 _lifeVal = 0; uint256 _feeLimit = 0; uint256 _devFees = 0; uint256 public _totalSupply = 100000 * 1 ether; uint256 public _circulatingSupply = 0; uint256 public _frozenTokens = 0; event Transfer(address indexed _from, address indexed _to, uint _value); event Exchanged(address indexed _from, address indexed _to, uint _value); mapping (address => uint256) public balances; mapping (address => bool) public exchangePartners; mapping (address => uint256) public exchangeRates; function COE() { _owner = msg.sender; preMine(); }",1,"subgraph cluster_1189_COE {
label=""COE"";
""1189_canExchange"" [label=""canExchange""];
""1189_exchange"" [label=""exchange""];
""1189_changeDevFeesAddr"" [label=""changeDevFeesAddr""];
""1189_mul"" [label=""mul""];
""1189_preMine"" [label=""preMine""];
""1189_changeDev"" [label=""changeDev""];
""1189_exchangeTokensFromOtherContract"" [label=""exchangeTokensFromOtherContract""];
""1189_balanceOf"" [label=""balanceOf""];
""1189_getBalance"" [label=""getBalance""];
""1189_updateFeeAmount"" [label=""updateFeeAmount""];
""1189_requestTokensFromOtherContract"" [label=""requestTokensFromOtherContract""];
""1189_totalSupply"" [label=""totalSupply""];
""1189_toggleReceiveEth"" [label=""toggleReceiveEth""];
""1189_payFeesToggle"" [label=""payFeesToggle""];
""1189_withdrawDevFees"" [label=""withdrawDevFees""];
""1189_add"" [label=""add""];
""1189_changeOwner"" [label=""changeOwner""];
""1189_getLifeVal"" [label=""getLifeVal""];
""1189_contractExchangeRate"" [label=""contractExchangeRate""];
""1189_COE"" [label=""COE""];
""1189_addExchangePartnerAddressAndRate"" [label=""addExchangePartnerAddressAndRate""];
""1189_removeExchangePartnerTargetAddress"" [label=""removeExchangePartnerTargetAddress""];
""1189_defrostFrozenTokens"" [label=""defrostFrozenTokens""];
""1189_getCirculatingSupply"" [label=""getCirculatingSupply""];
""1189_transfer"" [label=""transfer""];
""1189_div"" [label=""div""];
""1189_safeWithdrawal"" [label=""safeWithdrawal""];
""1189_addExchangePartnerTargetAddress"" [label=""addExchangePartnerTargetAddress""];
""1189_changePayRate"" [label=""changePayRate""];
""1189_fallback"" [label=""fallback""];
""1189_sub"" [label=""sub""];
""1189_toggleFreezeTokensFlag"" [label=""toggleFreezeTokensFlag""];
""1189_transfer"" -> ""1189_add"";
""1189_transfer"" -> ""1189_balanceOf"";
""1189_exchangeTokensFromOtherContract"" -> ""1189_add"";
""1189_exchange"" -> ""1189_requestTokensFromOtherContract"";
""1189_transfer"" -> ""1189_exchange"";
""1189_safeWithdrawal"" -> ""1189_mul"";
""1189_fallback"" -> ""1189_mul"";
""1189_fallback"" -> ""1189_div"";
""1189_preMine"" -> ""1189_sub"";
""1189_exchangeTokensFromOtherContract"" -> ""1189_mul"";
""1189_COE"" -> ""1189_preMine"";
""1189_fallback"" -> ""1189_sub"";
""1189_exchangeTokensFromOtherContract"" -> ""1189_sub"";
""1189_exchange"" -> ""1189_add"";
""1189_exchange"" -> ""1189_balanceOf"";
""1189_defrostFrozenTokens"" -> ""1189_add"";
""1189_exchange"" -> ""1189_sub"";
""1189_transfer"" -> ""1189_sub"";
""1189_fallback"" -> ""1189_add"";
""1189_preMine"" -> ""1189_add"";
}
"
0x0dc11b7ed751594906bce3a7091952b30528ee7e.sol,DickMeasurementContest,contract DickMeasurementContest { uint lastBlock; address owner; modifier onlyowner { require (msg.sender == owner); _; },1,"subgraph cluster_90_DickMeasurementContest {
label=""DickMeasurementContest"";
""90_withdraw"" [label=""withdraw""];
""90_mineIsBigger"" [label=""mineIsBigger""];
""90_kill"" [label=""kill""];
""90_fallback"" [label=""fallback""];
""90_DickMeasurementContest"" [label=""DickMeasurementContest""];
""90_kill"" -> ""90_onlyowner"";
""90_withdraw"" -> ""90_onlyowner"";
}
"
0x5c529eda84ef12dba15aa1a12fefafeb8dee4ea7.sol,GarudaCoin,"contract GarudaCoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 900000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 1000000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0xe9E9252A68b475E20Fb23550D64A22A8A3329eB4; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_GarudaCoin {
label=""GarudaCoin"";
""1261_getTokens"" [label=""getTokens""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_withdraw"" [label=""withdraw""];
""1261_constructor"" [label=""constructor""];
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_burn"" [label=""burn""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_Distribute"" [label=""Distribute""];
""1261_distr"" [label=""distr""];
""1261_transfer"" [label=""transfer""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_add"" [label=""add""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_allowance"" [label=""allowance""];
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_constructor"" -> ""1261_distr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
}
"
0x36cce24d6314445c11beb80f99f9f14b5ea9ecc2.sol,LynchpinPrivateICO,contract LynchpinPrivateICO is Ownable(0x1788A2Fe89a3Bfa58DB57aabbf1Ffa08ADED6cba) { using SafeMath for uint256; LynchpinToken public lynT = LynchpinToken(0xB0B1685f55843D03739c7D9b0A230F1B7DcF03D5); address public beneficiary = 0x1788A2Fe89a3Bfa58DB57aabbf1Ffa08ADED6cba; uint256 public tokeninOneEther; uint256 public maxTokensToSell = 2000000 * 10**18; uint256 public tokenSold; bool crowdsaleClosed = false; uint256 LOCK_PERIOD_START = 1556668800; uint256 LOCK_PERIOD_9_MONTH = 1580515200; uint256 LOCK_PERIOD_10_MONTH = 1583020800; uint256 LOCK_PERIOD_11_MONTH = 1585699200; uint256 LOCK_PERIOD_END = 1588291200; mapping(address => uint256) public tokensOwed; mapping(address => uint256) public ethContribution; mapping(address => bool) public isWhitelisted; event LogAddedToWhitelist(address indexed _contributor); event LogTokenRateUpdated(uint256 _newRate); event LogSaleClosed(); constructor(uint256 _tokeninOneEther) public { require (_tokeninOneEther > 0); isWhitelisted[owner] = true; tokeninOneEther = _tokeninOneEther; emit LogTokenRateUpdated(_tokeninOneEther); },1,"subgraph cluster_831_LynchpinPrivateICO {
label=""LynchpinPrivateICO"";
""831_withdrawMyTokens"" [label=""withdrawMyTokens""];
""831_constructor"" [label=""constructor""];
""831_fallback"" [label=""fallback""];
""831_closeSale"" [label=""closeSale""];
""831_updateTokenRate"" [label=""updateTokenRate""];
""831_addContributor"" [label=""addContributor""];
""831_withdrawPenaltyTokens"" [label=""withdrawPenaltyTokens""];
""831_addContributor"" -> ""831_onlyOwner"";
""831_withdrawPenaltyTokens"" -> ""831_onlyOwner"";
""831_closeSale"" -> ""831_onlyOwner"";
""831_updateTokenRate"" -> ""831_onlyOwner"";
}
"
0x7241496a3fad5b8fd93b647399f57d7c835d2385.sol,TFTOKEN,"contract TFTOKEN is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 88000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function TFTOKEN() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_TFTOKEN {
label=""TFTOKEN"";
""706_TFTOKEN"" [label=""TFTOKEN""];
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x39f89421c5bf8bb0d855c0216b00b45e3733b515.sol,DINOSale,"contract DINOSale is BaseDINOSale { using SafeMath for uint256; DINOToken public tokenReward; constructor( address ifSuccessfulSendTo, uint fundingGoalInEthers, uint fundingCapInEthers, uint minimumContribution, uint start, uint end, uint rateDINOToEther, address addressOfTokenUsedAsReward ) public { require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this), ); require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this), ); require(fundingGoalInEthers <= fundingCapInEthers, ); require(end > 0, ); beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; fundingCap = fundingCapInEthers * 1 ether; minContribution = minimumContribution * 1 ether; startTime = start; endTime = end; rate = rateDINOToEther; withdrawRate = rateDINOToEther; tokenReward = DINOToken(addressOfTokenUsedAsReward); }",1,"subgraph cluster_1796_DINOSale {
label=""DINOSale"";
""1796_fallback"" [label=""fallback""];
""1796_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1796_owner"" [label=""owner""];
""1796_withdrawToken"" [label=""withdrawToken""];
""1796_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1796_convertToMini"" [label=""convertToMini""];
""1796_safeWithdrawal"" [label=""safeWithdrawal""];
""1796_constructor"" [label=""constructor""];
""1796_fallback"" -> ""1796_checkFundingCap"";
""1796_ownerAllocateTokens"" -> ""1796_onlyOwner"";
""1796_withdrawToken"" -> ""1796_convertToMini"";
""1796_safeWithdrawal"" -> ""1796_afterDeadline"";
""1796_fallback"" -> ""1796_afterStartTime"";
""1796_fallback"" -> ""1796_saleNotClosed"";
""1796_fallback"" -> ""1796_beforeDeadline"";
""1796_fallback"" -> ""1796_checkFundingGoal"";
""1796_ownerAllocateTokens"" -> ""1796_checkFundingGoal"";
""1796_fallback"" -> ""1796_whenNotPaused"";
""1796_ownerAllocateTokens"" -> ""1796_checkFundingCap"";
""1796_safeWithdrawal"" -> ""1796_nonReentrant"";
""1796_fallback"" -> ""1796_nonReentrant"";
""1796_ownerAllocateTokens"" -> ""1796_nonReentrant"";
""1796_ownerSafeWithdrawal"" -> ""1796_nonReentrant"";
""1796_ownerSafeWithdrawal"" -> ""1796_onlyOwner"";
}
"
0xece7814a9691a94e7f3d9354155e21cfb291e13b.sol,AlmightyKeyChain,"contract AlmightyKeyChain is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function AlmightyKeyChain() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_AlmightyKeyChain {
label=""AlmightyKeyChain"";
""706_AlmightyKeyChain"" [label=""AlmightyKeyChain""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0xf2b89f45cc4ebbf11a36bdb4a4b24eada8dd30a7.sol,AirDrop,contract AirDrop is Ownable { Token public tokenInstance; function AirDrop(address _tokenAddress){ tokenInstance = Token(_tokenAddress); },1,"subgraph cluster_188_AirDrop {
label=""AirDrop"";
""188_transferEthToOnwer"" [label=""transferEthToOnwer""];
""188_AirDrop"" [label=""AirDrop""];
""188_doAirDrop"" [label=""doAirDrop""];
""188_fallback"" [label=""fallback""];
""188_kill"" [label=""kill""];
""188_transferEthToOnwer"" -> ""188_onlyOwner"";
""188_doAirDrop"" -> ""188_onlyOwner"";
""188_kill"" -> ""188_onlyOwner"";
}
"
0xd37a7e9d4681da273e13d652ed9a789274d32bd7.sol,LUPXSale,"contract LUPXSale { IERC20Token public tokenContract ; address owner ; uint256 public tokensSold ; uint256 public LUPXPrice ; event sold(address buyer, uint256 amount) ; event priceAdjusted(uint256 oldPrice, uint256 newPrice) ; event endOfSale(uint256 timeStamp) ; constructor(IERC20Token _tokenContract, uint256 LUPXperETH) public { owner = msg.sender ; tokenContract = _tokenContract ; LUPXPrice = LUPXperETH ; }",1,"subgraph cluster_241_LUPXSale {
label=""LUPXSale"";
""241_fallback"" [label=""fallback""];
""241_endLUPXSale"" [label=""endLUPXSale""];
""241_constructor"" [label=""constructor""];
""241_safeMultiply"" [label=""safeMultiply""];
""241_withdrawETH"" [label=""withdrawETH""];
""241_withdrawETH"" -> ""241_onlyOwner"";
""241_endLUPXSale"" -> ""241_onlyOwner"";
""241_fallback"" -> ""241_safeMultiply"";
}
"
0xdf4b22695eeb4a7a1cf9a42162285ce782b8427a.sol,Token,contract Token is TokenI { using SafeMath for uint256; string public techProvider = ; address public owner; struct FreezeInfo { address user; uint256 amount; },1,"subgraph cluster_1186_Token {
label=""Token"";
""1186_enableTransfers"" [label=""enableTransfers""];
""1186_balanceOf"" [label=""balanceOf""];
""1186_transfer"" [label=""transfer""];
""1186_transferMulti"" [label=""transferMulti""];
""1186_unFreeze"" [label=""unFreeze""];
""1186_destroyTokens"" [label=""destroyTokens""];
""1186_isContract"" [label=""isContract""];
""1186_freeze"" [label=""freeze""];
""1186_approve"" [label=""approve""];
""1186_generateTokens"" [label=""generateTokens""];
""1186_transferFrom"" [label=""transferFrom""];
""1186_approveAndCall"" [label=""approveAndCall""];
""1186_Token"" [label=""Token""];
""1186_claimTokens"" [label=""claimTokens""];
""1186_fallback"" [label=""fallback""];
""1186_changeOwner"" [label=""changeOwner""];
""1186_approveAndCall"" -> ""1186_approve"";
""1186_changeOwner"" -> ""1186_onlyOwner"";
""1186_approve"" -> ""1186_moreThanZero"";
""1186_claimTokens"" -> ""1186_onlyController"";
""1186_fallback"" -> ""1186_isContract"";
""1186_freeze"" -> ""1186_moreThanZero"";
""1186_transfer"" -> ""1186_realUser"";
""1186_transferFrom"" -> ""1186_realUser"";
""1186_transferFrom"" -> ""1186_moreThanZero"";
""1186_unFreeze"" -> ""1186_onlyOwner"";
""1186_destroyTokens"" -> ""1186_onlyOwner"";
""1186_transfer"" -> ""1186_moreThanZero"";
""1186_generateTokens"" -> ""1186_onlyController"";
""1186_enableTransfers"" -> ""1186_onlyOwner"";
""1186_freeze"" -> ""1186_onlyController"";
}
"
0x91f2203f273677e68d47786b62efbd9497594698.sol,Simpl_Quiz,contract Simpl_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Simpl_Quiz {
label=""Simpl_Quiz"";
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_470_RefundVault {
label=""RefundVault"";
""470_deposit"" [label=""deposit""];
""470_RefundVault"" [label=""RefundVault""];
""470_refund"" [label=""refund""];
""470_enableRefunds"" [label=""enableRefunds""];
""470_close"" [label=""close""];
""470_enableRefunds"" -> ""470_onlyOwner"";
""470_deposit"" -> ""470_onlyOwner"";
""470_close"" -> ""470_onlyOwner"";
}
"
0x2f5c8d7259b48078c0b6c0a7cf6269e3817680e5.sol,Refund,contract Refund is Ownable{ using SafeMath for uint256; tokenInterface public xcc; mapping (address => uint256) public refunds; constructor(address _xcc) public { xcc = tokenInterface(_xcc); },1,"subgraph cluster_383_Refund {
label=""Refund"";
""383_constructor"" [label=""constructor""];
""383_withdraw"" [label=""withdraw""];
""383_withdrawTokens"" [label=""withdrawTokens""];
""383_cancelRefund"" [label=""cancelRefund""];
""383_fallback"" [label=""fallback""];
""383_setRefund"" [label=""setRefund""];
""383_withdraw"" -> ""383_onlyOwner"";
""383_withdrawTokens"" -> ""383_onlyOwner"";
""383_cancelRefund"" -> ""383_onlyOwner"";
""383_setRefund"" -> ""383_onlyOwner"";
}
"
0x0033fb5561719b8b697b604466d6d39308c58191.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 500000000; uint256 public buyPrice = 2000; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public { }",1,"subgraph cluster_627_EncryptedToken {
label=""EncryptedToken"";
""627_fallback"" [label=""fallback""];
""627_balanceOfa"" [label=""balanceOfa""];
""627_mintToken"" [label=""mintToken""];
""627_freezeAccount"" [label=""freezeAccount""];
""627_setPrices"" [label=""setPrices""];
""627_selfdestructs"" [label=""selfdestructs""];
""627_getEth"" [label=""getEth""];
""627__transfer"" [label=""_transfer""];
""627_buy"" [label=""buy""];
""627_EncryptedToken"" [label=""EncryptedToken""];
""627_setPrices"" -> ""627_onlyOwner"";
""627_buy"" -> ""627__transfer"";
""627_fallback"" -> ""627__transfer"";
""627_EncryptedToken"" -> ""627_TokenERC20"";
""627_mintToken"" -> ""627_onlyOwner"";
""627_freezeAccount"" -> ""627_onlyOwner"";
}
"
0xdc99adde3a358e5ff62fff3f26b2296f8cca2306.sol,TokenFactoryCN,"contract TokenFactoryCN is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 900000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function TokenFactoryCN() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_TokenFactoryCN {
label=""TokenFactoryCN"";
""706_TokenFactoryCN"" [label=""TokenFactoryCN""];
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x36995d4e1ab6ee76aa55f16736fc85ec6e7b6c1d.sol,HardcodedCrowdsale,"contract HardcodedCrowdsale { using SafeMath for uint256; enum ICOStateEnum {NotStarted, Started, Refunded, Successful}",1,"subgraph cluster_1142_HardcodedCrowdsale {
label=""HardcodedCrowdsale"";
""1142_refundICO"" [label=""refundICO""];
""1142_HardcodedCrowdsale"" [label=""HardcodedCrowdsale""];
""1142_cleanup"" [label=""cleanup""];
""1142_fallback"" [label=""fallback""];
""1142_transitionState"" [label=""transitionState""];
""1142_finalize"" [label=""finalize""];
""1142_withdrawFunds"" [label=""withdrawFunds""];
""1142_getBonusMultipierInPercents"" [label=""getBonusMultipierInPercents""];
""1142_ICOBuy"" [label=""ICOBuy""];
""1142_totalSupply"" [label=""totalSupply""];
""1142_balanceOf"" [label=""balanceOf""];
""1142_setNameAndTicker"" [label=""setNameAndTicker""];
""1142_recoverLeftoversICO"" [label=""recoverLeftoversICO""];
""1142_advanceState"" [label=""advanceState""];
""1142_calculateAmountBoughtICO"" [label=""calculateAmountBoughtICO""];
""1142_getWeekBonus"" [label=""getWeekBonus""];
""1142_transferOwnership"" [label=""transferOwnership""];
""1142_setHalt"" [label=""setHalt""];
""1142_setLedger"" [label=""setLedger""];
""1142_manualSendTokens"" [label=""manualSendTokens""];
""1142_calculateAmountBoughtICO"" -> ""1142_getWeekBonus"";
""1142_fallback"" -> ""1142_stateTransition"";
""1142_setHalt"" -> ""1142_onlyOwner"";
""1142_setLedger"" -> ""1142_onlyOwner"";
""1142_withdrawFunds"" -> ""1142_onlyOwner"";
""1142_recoverLeftoversICO"" -> ""1142_notHalted"";
""1142_ICOBuy"" -> ""1142_getBonusMultipierInPercents"";
""1142_ICOBuy"" -> ""1142_balanceOf"";
""1142_ICOBuy"" -> ""1142_notHalted"";
""1142_advanceState"" -> ""1142_transitionState"";
""1142_fallback"" -> ""1142_notHalted"";
""1142_cleanup"" -> ""1142_onlyOwner"";
""1142_refundICO"" -> ""1142_notHalted"";
""1142_ICOBuy"" -> ""1142_calculateAmountBoughtICO"";
""1142_transferOwnership"" -> ""1142_onlyOwner"";
""1142_refundICO"" -> ""1142_stateTransition"";
""1142_manualSendTokens"" -> ""1142_onlyOwner"";
""1142_finalize"" -> ""1142_stateTransition"";
""1142_recoverLeftoversICO"" -> ""1142_stateTransition"";
""1142_fallback"" -> ""1142_ICOBuy"";
""1142_setNameAndTicker"" -> ""1142_onlyOwner"";
}
"
0xd54920cedf704b87342fa26d5773efabf9037a77.sol,CryptoStars,contract CryptoStars { address owner; string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public initialPrice; uint256 public transferPrice; uint256 public MaxStarIndexAvailable; uint256 public MinStarIndexAvailable; uint public nextStarIndexToAssign = 0; uint public starsRemainingToAssign = 0; uint public numberOfStarsToReserve; uint public numberOfStarsReserved = 0; mapping (uint => address) public starIndexToAddress; mapping (uint => string) public starIndexToSTRZName; mapping (uint => string) public starIndexToSTRZMasterName; mapping (address => uint256) public balanceOf; struct Offer { bool isForSale; uint starIndex; address seller; uint minValue; address onlySellTo; },1,"subgraph cluster_1592_CryptoStars {
label=""CryptoStars"";
""1592_setGivenName"" [label=""setGivenName""];
""1592_offerStarForSale"" [label=""offerStarForSale""];
""1592_buyStar"" [label=""buyStar""];
""1592_setStarInitialPrice"" [label=""setStarInitialPrice""];
""1592_reserveStarsForOwner"" [label=""reserveStarsForOwner""];
""1592_offerStarForSaleToAddress"" [label=""offerStarForSaleToAddress""];
""1592_CryptoStars"" [label=""CryptoStars""];
""1592_setTransferPrice"" [label=""setTransferPrice""];
""1592_acceptBidForStar"" [label=""acceptBidForStar""];
""1592_getStar"" [label=""getStar""];
""1592_getMinMax"" [label=""getMinMax""];
""1592_buyStarInitial"" [label=""buyStarInitial""];
""1592_withdraw"" [label=""withdraw""];
""1592_setMinMax"" [label=""setMinMax""];
""1592_setMasterName"" [label=""setMasterName""];
""1592_starNoLongerForSale"" [label=""starNoLongerForSale""];
""1592_transferStar"" [label=""transferStar""];
""1592_withdrawBidForStar"" [label=""withdrawBidForStar""];
""1592_withdrawPartial"" [label=""withdrawPartial""];
""1592_enterBidForStar"" [label=""enterBidForStar""];
""1592_buyStar"" -> ""1592_starNoLongerForSale"";
}
"
0x1ed81e904acfa95ca1ffe224ee7aa89f2bf5ef9c.sol,En_GAME,contract En_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_En_GAME {
label=""En_GAME"";
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Try"" [label=""Try""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x1f0d1de1558582ad6f13763f477119a1455502af.sol,Exchange,contract Exchange is ContractReceiver { using SafeMath for uint256; using BytesLib for bytes; struct Order { address owner; bool active; address sellToken; address buyToken; address ring; uint256 amount; uint256 priceMul; uint256 priceDiv; },1,"subgraph cluster_1781_Exchange {
label=""Exchange"";
""1781_pullTokens"" [label=""pullTokens""];
""1781__topUpTradeMining"" [label=""_topUpTradeMining""];
""1781_fallback"" [label=""fallback""];
""1781_getBuyTokenAmount"" [label=""getBuyTokenAmount""];
""1781_sellEtherWithRing"" [label=""sellEtherWithRing""];
""1781_getBalance"" [label=""getBalance""];
""1781__executeTokenSwap"" [label=""_executeTokenSwap""];
""1781_buyOrderWithEth"" [label=""buyOrderWithEth""];
""1781__executeSellOrder"" [label=""_executeSellOrder""];
""1781_tokenFallback"" [label=""tokenFallback""];
""1781__executeOrder"" [label=""_executeOrder""];
""1781_sellERC20Token"" [label=""sellERC20Token""];
""1781_changeTradeMiningPrice"" [label=""changeTradeMiningPrice""];
""1781_sendTokensTo"" [label=""sendTokensTo""];
""1781_sellEther"" [label=""sellEther""];
""1781_Exchange"" [label=""Exchange""];
""1781_withdrawTradeMining"" [label=""withdrawTradeMining""];
""1781_buyOrderWithERC20Token"" [label=""buyOrderWithERC20Token""];
""1781_remainingAmount"" [label=""remainingAmount""];
""1781_calcFees"" [label=""calcFees""];
""1781_isOrderActive"" [label=""isOrderActive""];
""1781__tradeMiningAndFees"" [label=""_tradeMiningAndFees""];
""1781_tradeMiningAmount"" [label=""tradeMiningAmount""];
""1781_sellERC20TokenWithRing"" [label=""sellERC20TokenWithRing""];
""1781__executeBuyOrder"" [label=""_executeBuyOrder""];
""1781_cancelOrder"" [label=""cancelOrder""];
""1781__newOrder"" [label=""_newOrder""];
""1781__executeTokenSwap"" -> ""1781_sendTokensTo"";
""1781__tradeMiningAndFees"" -> ""1781_sendTokensTo"";
""1781_sellERC20Token"" -> ""1781__newOrder"";
""1781__executeBuyOrder"" -> ""1781_sendTokensTo"";
""1781_tokenFallback"" -> ""1781__newOrder"";
""1781_withdrawTradeMining"" -> ""1781_sendTokensTo"";
""1781__executeSellOrder"" -> ""1781_sendTokensTo"";
""1781_sellERC20TokenWithRing"" -> ""1781__newOrder"";
""1781_cancelOrder"" -> ""1781_sendTokensTo"";
""1781_sellERC20TokenWithRing"" -> ""1781_pullTokens"";
""1781_sellEther"" -> ""1781__newOrder"";
""1781_buyOrderWithEth"" -> ""1781__executeOrder"";
""1781_sellEtherWithRing"" -> ""1781__newOrder"";
""1781_buyOrderWithERC20Token"" -> ""1781__executeOrder"";
""1781__executeOrder"" -> ""1781__tradeMiningAndFees"";
""1781_sellERC20Token"" -> ""1781_pullTokens"";
""1781__executeOrder"" -> ""1781__executeBuyOrder"";
""1781_tokenFallback"" -> ""1781__topUpTradeMining"";
""1781__executeOrder"" -> ""1781__executeTokenSwap"";
""1781_buyOrderWithERC20Token"" -> ""1781_pullTokens"";
""1781__executeOrder"" -> ""1781__executeSellOrder"";
""1781_tokenFallback"" -> ""1781__executeOrder"";
}
"
0x945f171de4ea81a213dcc7a1e8c4f6feb3b4b806.sol,ECP_Token,"contract ECP_Token { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public remaining; address public owner; uint public icoStatus; address public benAddress; address public bkaddress; uint public allowTransferToken; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event TokenTransferEvent(address indexed from, address indexed to, uint256 value, string typex); function ECP_Token() public { totalSupply = 15000000000000000000000000000; owner = msg.sender; balanceOf[owner] = totalSupply; name = ; symbol = ; decimals = 18; remaining = totalSupply; icoStatus = 1; benAddress = 0xe4a7a715bE044186a3ac5C60c7Df7dD1215f7419; bkaddress = 0x44e00602e4B8F546f76983de2489d636CB443722; allowTransferToken = 1; }",1,"subgraph cluster_745_ECP_Token {
label=""ECP_Token"";
""745_withdraw_all"" [label=""withdraw_all""];
""745_freezeAccount"" [label=""freezeAccount""];
""745_withdraw"" [label=""withdraw""];
""745_transferOwnership"" [label=""transferOwnership""];
""745_sendTokenToSingleAccount"" [label=""sendTokenToSingleAccount""];
""745__transfer"" [label=""_transfer""];
""745_burn"" [label=""burn""];
""745_sendToMultipleAccount"" [label=""sendToMultipleAccount""];
""745_approveAndCall"" [label=""approveAndCall""];
""745_approve"" [label=""approve""];
""745_adm_trasfer"" [label=""adm_trasfer""];
""745_changeIcoStatus"" [label=""changeIcoStatus""];
""745_fallback"" [label=""fallback""];
""745_setTransferStatus"" [label=""setTransferStatus""];
""745_totalSupply"" [label=""totalSupply""];
""745_transferFrom"" [label=""transferFrom""];
""745_balanceOf"" [label=""balanceOf""];
""745_burnFrom"" [label=""burnFrom""];
""745_transfer"" [label=""transfer""];
""745_mintToken"" [label=""mintToken""];
""745_ECP_Token"" [label=""ECP_Token""];
""745_transfer"" -> ""745__transfer"";
""745_adm_trasfer"" -> ""745_onlyOwner"";
""745_transferFrom"" -> ""745__transfer"";
""745_withdraw_all"" -> ""745_onlyOwner"";
""745_setTransferStatus"" -> ""745_onlyOwner"";
""745_freezeAccount"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745__transfer"";
""745_sendToMultipleAccount"" -> ""745_onlyOwner"";
""745_mintToken"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745_onlyOwner"";
""745_transferOwnership"" -> ""745_onlyOwner"";
""745_sendToMultipleAccount"" -> ""745__transfer"";
""745_approveAndCall"" -> ""745_approve"";
""745_adm_trasfer"" -> ""745__transfer"";
""745_withdraw"" -> ""745_onlyOwner"";
""745_changeIcoStatus"" -> ""745_onlyOwner"";
}
"
0xead7adf1bf0df9f03b15429d82ea1f70ebd619f1.sol,Crowdsale,"contract Crowdsale is owned { address public beneficiary; uint256 public preICOLimit; uint256 public totalLimit; uint256 public pricePreICO; uint256 public priceICO; bool preICOClosed = false; bool ICOClosed = false; bool preICOWithdrawn = false; bool ICOWithdrawn = false; bool public preICOActive = false; bool public ICOActive = false; uint256 public preICORaised; uint256 public ICORaised; uint256 public totalRaised; token public tokenReward; event FundTransfer(address backer, uint256 amount, bool isContribution); mapping(address => uint256) public balanceOf; function Crowdsale() { preICOLimit = 5000000 * 1 ether; totalLimit = 45000000 * 1 ether; pricePreICO = 375; priceICO = 250; }",1,"subgraph cluster_402_Crowdsale {
label=""Crowdsale"";
""402_startICO"" [label=""startICO""];
""402_fallback"" [label=""fallback""];
""402_startPreICO"" [label=""startPreICO""];
""402_init"" [label=""init""];
""402_withdrawFunds"" [label=""withdrawFunds""];
""402_Crowdsale"" [label=""Crowdsale""];
""402_stopPreICO"" [label=""stopPreICO""];
""402_stopICO"" [label=""stopICO""];
""402_startICO"" -> ""402_onlyOwner"";
""402_init"" -> ""402_onlyOwner"";
""402_stopPreICO"" -> ""402_onlyOwner"";
""402_withdrawFunds"" -> ""402_onlyOwner"";
""402_stopICO"" -> ""402_onlyOwner"";
""402_startPreICO"" -> ""402_onlyOwner"";
}
"
0x3686986e559f257cfaccb44f17af5b245e45814f.sol,ZEROtoken,contract ZEROtoken { address owner = msg.sender; bool public purchasingAllowed = false; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalContribution = 0; uint256 public totalSupply = 0; function name() constant returns (string) { return ; },1,"subgraph cluster_524_ZEROtoken {
label=""ZEROtoken"";
""524_balanceOf"" [label=""balanceOf""];
""524_transferFrom"" [label=""transferFrom""];
""524_fallback"" [label=""fallback""];
""524_transfer"" [label=""transfer""];
""524_getStats"" [label=""getStats""];
""524_approve"" [label=""approve""];
""524_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""524_decimals"" [label=""decimals""];
""524_disablePurchasing"" [label=""disablePurchasing""];
""524_enablePurchasing"" [label=""enablePurchasing""];
""524_allowance"" [label=""allowance""];
""524_kill"" [label=""kill""];
""524_name"" [label=""name""];
""524_symbol"" [label=""symbol""];
}
"
0xec987914ade432ce9806f418787a4ed0b0e77000.sol,LuckyDice,"contract LuckyDice is DSSafeAddSub { modifier betIsValid(uint _betSize, uint minRollLimit, uint maxRollLimit) { if (_betSize < minBet || maxRollLimit < minNumber || minRollLimit > maxNumber || maxRollLimit - 1 <= minRollLimit) throw; _; }",1,"subgraph cluster_1265_LuckyDice {
label=""LuckyDice"";
""1265_ownerSetMaxProfit"" [label=""ownerSetMaxProfit""];
""1265_ownerTransferEther"" [label=""ownerTransferEther""];
""1265_ownerRefundPlayer"" [label=""ownerRefundPlayer""];
""1265_ownerSetCasino"" [label=""ownerSetCasino""];
""1265_playerMakeBet"" [label=""playerMakeBet""];
""1265_ownerUpdateContractBalance"" [label=""ownerUpdateContractBalance""];
""1265_getToJackpot"" [label=""getToJackpot""];
""1265_playerWithdrawPendingTransactions"" [label=""playerWithdrawPendingTransactions""];
""1265_withdraw"" [label=""withdraw""];
""1265_ownerSetJpMinBet"" [label=""ownerSetJpMinBet""];
""1265_playerGetPendingTxByAddress"" [label=""playerGetPendingTxByAddress""];
""1265_getFullProfit"" [label=""getFullProfit""];
""1265_LuckyDice"" [label=""LuckyDice""];
""1265_ownerChangeOwner"" [label=""ownerChangeOwner""];
""1265_ownerSetHouseEdge"" [label=""ownerSetHouseEdge""];
""1265_ownerkill"" [label=""ownerkill""];
""1265_ownerSetMinBet"" [label=""ownerSetMinBet""];
""1265_ownerPausePayouts"" [label=""ownerPausePayouts""];
""1265_ownerPauseGame"" [label=""ownerPauseGame""];
""1265_getProfit"" [label=""getProfit""];
""1265_fallback"" [label=""fallback""];
""1265_ownerTransferEther"" -> ""1265_safeSub"";
""1265_playerMakeBet"" -> ""1265_getProfit"";
""1265_playerMakeBet"" -> ""1265_gameIsActive"";
""1265_playerMakeBet"" -> ""1265_getFullProfit"";
""1265_fallback"" -> ""1265_safeAdd"";
""1265_playerMakeBet"" -> ""1265_getToJackpot"";
""1265_ownerSetMinBet"" -> ""1265_onlyOwner"";
""1265_playerMakeBet"" -> ""1265_safeSub"";
""1265_withdraw"" -> ""1265_payoutsAreActive"";
""1265_ownerRefundPlayer"" -> ""1265_safeSub"";
""1265_getFullProfit"" -> ""1265_safeSub"";
""1265_ownerSetMaxProfit"" -> ""1265_onlyOwner"";
""1265_ownerPausePayouts"" -> ""1265_onlyOwner"";
""1265_ownerSetJpMinBet"" -> ""1265_onlyOwner"";
""1265_withdraw"" -> ""1265_safeSub"";
""1265_ownerUpdateContractBalance"" -> ""1265_onlyOwner"";
""1265_LuckyDice"" -> ""1265_ownerSetHouseEdge"";
""1265_withdraw"" -> ""1265_safeAdd"";
""1265_playerMakeBet"" -> ""1265_safeAdd"";
""1265_fallback"" -> ""1265_onlyOwner"";
""1265_ownerSetCasino"" -> ""1265_onlyOwner"";
""1265_ownerkill"" -> ""1265_onlyOwner"";
""1265_LuckyDice"" -> ""1265_ownerSetMinBet"";
""1265_ownerRefundPlayer"" -> ""1265_onlyOwner"";
""1265_playerWithdrawPendingTransactions"" -> ""1265_payoutsAreActive"";
""1265_ownerTransferEther"" -> ""1265_onlyOwner"";
""1265_ownerPauseGame"" -> ""1265_onlyOwner"";
""1265_ownerSetHouseEdge"" -> ""1265_onlyOwner"";
""1265_playerMakeBet"" -> ""1265_betIsValid"";
""1265_ownerChangeOwner"" -> ""1265_onlyOwner"";
""1265_LuckyDice"" -> ""1265_ownerSetMaxProfit"";
}
"
0x4b5da69c6289bd71d643710d0a63bd4867808451.sol,CoolPandaToken,"contract CoolPandaToken is ERC20, Lockable { using SafeMath for uint256; uint256 public decimals = 18; address public fundWallet = 0x071961b88F848D09C3d988E8814F38cbAE755C44; uint256 public tokenPrice; function balanceOf(address _addr) external view returns (uint256) { return balances[_addr]; }",1,"subgraph cluster_642_CoolPandaToken {
label=""CoolPandaToken"";
""642_allowance"" [label=""allowance""];
""642_transferEth"" [label=""transferEth""];
""642_approveAndCall"" [label=""approveAndCall""];
""642_setTokenPrice"" [label=""setTokenPrice""];
""642_transfer"" [label=""transfer""];
""642_approve"" [label=""approve""];
""642_balanceOf"" [label=""balanceOf""];
""642_transferFrom"" [label=""transferFrom""];
""642_setFundWallet"" [label=""setFundWallet""];
""642_transfer"" -> ""642_isTokenTransfer"";
""642_transferEth"" -> ""642_onlyOwner"";
""642_approveAndCall"" -> ""642_approve"";
""642_setTokenPrice"" -> ""642_onlyOwner"";
""642_setFundWallet"" -> ""642_onlyOwner"";
""642_approveAndCall"" -> ""642_isTokenTransfer"";
""642_transferFrom"" -> ""642_isTokenTransfer"";
""642_approve"" -> ""642_isTokenTransfer"";
}
"
0xeece3bfd3c83715f1f801dfa6b735ac9093c5bc3.sol,SecuritySale,"contract SecuritySale is Ownable { bool public live; IInvestorList public investorList; event SaleLive(bool liveness); event EtherIn(address from, uint amount); event StartSale(); event EndSale(); constructor() public { live = false; }",1,"subgraph cluster_406_ISecuritySale {
label=""ISecuritySale"";
""406_setLive"" [label=""setLive""];
""406_setInvestorList"" [label=""setInvestorList""];
}
"
0xf331f7887d31714dce936d9a9846e6afbe82e0a0.sol,Ico,"contract Ico is Owned { enum State { Runned, Paused, Finished, Expired, Failed }",1,"subgraph cluster_1825_Ico {
label=""Ico"";
""1825_isRunningIco"" [label=""isRunningIco""];
""1825_isRunningPreIco"" [label=""isRunningPreIco""];
""1825_continueIco"" [label=""continueIco""];
""1825_isActive"" [label=""isActive""];
""1825_endIco"" [label=""endIco""];
""1825_getEthereum"" [label=""getEthereum""];
""1825_getEthereumFromPreIco"" [label=""getEthereumFromPreIco""];
""1825_pauseIco"" [label=""pauseIco""];
""1825_Ico"" [label=""Ico""];
""1825_fallback"" [label=""fallback""];
""1825_endIco"" -> ""1825_onlyOwner"";
""1825_getEthereum"" -> ""1825_onlyOwner"";
""1825_fallback"" -> ""1825_isRunningPreIco"";
""1825_continueIco"" -> ""1825_onlyOwner"";
""1825_pauseIco"" -> ""1825_onlyOwner"";
""1825_fallback"" -> ""1825_isRunningIco"";
""1825_getEthereumFromPreIco"" -> ""1825_onlyOwner"";
}
"
0x6f59c5e4a98bbeca595cd8f44d4ae6c1f055edbc.sol,PiperToken,"contract PiperToken is ERC223, SafeMath { mapping(address => uint) balances; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 0; uint256 exchange = 1000000; uint256 endICO = 0; address admin; constructor() public { balances[msg.sender]=1000000000000000000000000; admin = msg.sender; endICO=block.timestamp+(60*60*24*31); }",1,"subgraph cluster_698_PiperToken {
label=""PiperToken"";
""698_symbol"" [label=""symbol""];
""698_name"" [label=""name""];
""698_transfer"" [label=""transfer""];
""698_getCurrentTime"" [label=""getCurrentTime""];
""698_transferToAddress"" [label=""transferToAddress""];
""698_balanceOf"" [label=""balanceOf""];
""698_fallback"" [label=""fallback""];
""698_isContract"" [label=""isContract""];
""698_getEndICO"" [label=""getEndICO""];
""698_totalSupply"" [label=""totalSupply""];
""698_decimals"" [label=""decimals""];
""698_constructor"" [label=""constructor""];
""698_transferToContract"" [label=""transferToContract""];
""698_transfer"" -> ""698_transferToContract"";
""698_transferToAddress"" -> ""698_safeSub"";
""698_transferToContract"" -> ""698_balanceOf"";
""698_transfer"" -> ""698_safeAdd"";
""698_transferToAddress"" -> ""698_safeAdd"";
""698_transferToAddress"" -> ""698_balanceOf"";
""698_transfer"" -> ""698_isContract"";
""698_fallback"" -> ""698_safeAdd"";
""698_transfer"" -> ""698_balanceOf"";
""698_transferToContract"" -> ""698_safeAdd"";
""698_transfer"" -> ""698_transferToAddress"";
""698_transferToContract"" -> ""698_safeSub"";
""698_fallback"" -> ""698_safeMul"";
""698_transfer"" -> ""698_safeSub"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,ClinicAllRefundEscrow,contract ClinicAllRefundEscrow is RefundEscrow { using Math for uint256; struct RefundeeRecord { bool isRefunded; uint256 index; },1,"subgraph cluster_2170_ClinicAllRefundEscrow {
label=""ClinicAllRefundEscrow"";
""2170_deposit"" [label=""deposit""];
""2170_beneficiaryWithdrawChunk"" [label=""beneficiaryWithdrawChunk""];
""2170_beneficiaryWithdrawAll"" [label=""beneficiaryWithdrawAll""];
""2170_withdrawChunk"" [label=""withdrawChunk""];
""2170_withdraw"" [label=""withdraw""];
""2170_close"" [label=""close""];
""2170_removeRefundeeByIndex"" [label=""removeRefundeeByIndex""];
""2170_refundeesListLength"" [label=""refundeesListLength""];
""2170_withdrawEverything"" [label=""withdrawEverything""];
""2170_depositsOf"" [label=""depositsOf""];
""2170_beneficiaryDepositsOf"" [label=""beneficiaryDepositsOf""];
""2170_constructor"" [label=""constructor""];
""2170_depositFunds"" [label=""depositFunds""];
""2170_manualRefund"" [label=""manualRefund""];
""2170_withdrawChunk"" -> ""2170_removeRefundeeByIndex"";
""2170_manualRefund"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_onlyOwner"";
""2170_close"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawChunk"" -> ""2170_onlyOwner"";
""2170_beneficiaryWithdrawAll"" -> ""2170_onlyOwner"";
""2170_constructor"" -> ""2170_constructor"";
""2170_close"" -> ""2170_close"";
""2170_manualRefund"" -> ""2170_depositsOf"";
""2170_manualRefund"" -> ""2170_onlyOwner"";
""2170_withdrawEverything"" -> ""2170_withdrawChunk"";
""2170_depositFunds"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_depositsOf"";
""2170_refundeesListLength"" -> ""2170_onlyOwner"";
""2170_withdraw"" -> ""2170_removeRefundeeByIndex"";
""2170_withdrawChunk"" -> ""2170_depositsOf"";
}
"
0x1807cf924199c0f8a85b73c15b5c0349aa3844e5.sol,PublickOffering,contract PublickOffering is Authority { struct investorInfo{ address investor; uint256 amount; uint utime; bool hadback; },1,"subgraph cluster_296_PublickOffering {
label=""PublickOffering"";
""296_PublickOffering"" [label=""PublickOffering""];
""296_fallback"" [label=""fallback""];
""296_drawETH"" [label=""drawETH""];
""296_backETH"" [label=""backETH""];
""296_drawETH"" -> ""296_alloweDrawEth"";
""296_drawETH"" -> ""296_onlyBeneficiary"";
""296_backETH"" -> ""296_onlyBeneficiary"";
}
"
0x375fe03d186747e455e4ebbc235e9df083c7fe92.sol,QUEST_X,contract QUEST_X { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_QUEST_X {
label=""QUEST_X"";
""148_Try"" [label=""Try""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x00f90986cdd79744409f8a3c7747064afa4473b5.sol,SmartBillions,contract SmartBillions is StandardToken { string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; struct Wallet { uint208 balance; uint16 lastDividendPeriod; uint32 nextWithdrawBlock; },1,"subgraph cluster_2699_SmartBillions {
label=""SmartBillions"";
""2699_invest"" [label=""invest""];
""2699_setInvestStart"" [label=""setInvestStart""];
""2699_setBetMax"" [label=""setBetMax""];
""2699_calcHashes"" [label=""calcHashes""];
""2699_SmartBillions"" [label=""SmartBillions""];
""2699_getHash"" [label=""getHash""];
""2699_putHash"" [label=""putHash""];
""2699_fallback"" [label=""fallback""];
""2699_dividendsBlocks"" [label=""dividendsBlocks""];
""2699_betBlockNumberOf"" [label=""betBlockNumberOf""];
""2699_betHashOf"" [label=""betHashOf""];
""2699_addHashes128"" [label=""addHashes128""];
""2699_playRandom"" [label=""playRandom""];
""2699_disinvest"" [label=""disinvest""];
""2699_play"" [label=""play""];
""2699_walletPeriodOf"" [label=""walletPeriodOf""];
""2699_walletBlockOf"" [label=""walletBlockOf""];
""2699_changeOwner"" [label=""changeOwner""];
""2699_changeAnimator"" [label=""changeAnimator""];
""2699_betPrize"" [label=""betPrize""];
""2699_betValueOf"" [label=""betValueOf""];
""2699_coldStore"" [label=""coldStore""];
""2699_putHashes"" [label=""putHashes""];
""2699_playSystem"" [label=""playSystem""];
""2699_commitDividend"" [label=""commitDividend""];
""2699_betOf"" [label=""betOf""];
""2699_hotStore"" [label=""hotStore""];
""2699_hashesLength"" [label=""hashesLength""];
""2699_houseKeeping"" [label=""houseKeeping""];
""2699_pay"" [label=""pay""];
""2699_payDividends"" [label=""payDividends""];
""2699_won"" [label=""won""];
""2699_resetBet"" [label=""resetBet""];
""2699_payWallet"" [label=""payWallet""];
""2699_addHashes"" [label=""addHashes""];
""2699_walletBalanceOf"" [label=""walletBalanceOf""];
""2699_investDirect"" [label=""investDirect""];
""2699_resetBet"" -> ""2699_onlyOwner"";
""2699_putHash"" -> ""2699_calcHashes"";
""2699_betOf"" -> ""2699_getHash"";
""2699_disinvest"" -> ""2699_commitDividend"";
""2699_fallback"" -> ""2699_commitDividend"";
""2699_playSystem"" -> ""2699_won"";
""2699_payDividends"" -> ""2699_commitDividend"";
""2699_payDividends"" -> ""2699_payWallet"";
""2699_won"" -> ""2699_pay"";
""2699_changeAnimator"" -> ""2699_commitDividend"";
""2699_changeAnimator"" -> ""2699_onlyAnimator"";
""2699_disinvest"" -> ""2699_payWallet"";
""2699_won"" -> ""2699_betPrize"";
""2699_fallback"" -> ""2699_play"";
""2699_investDirect"" -> ""2699_invest"";
""2699_addHashes128"" -> ""2699_addHashes"";
""2699_coldStore"" -> ""2699_onlyOwner"";
""2699_won"" -> ""2699_getHash"";
""2699_hotStore"" -> ""2699_houseKeeping"";
""2699_pay"" -> ""2699_houseKeeping"";
""2699_changeOwner"" -> ""2699_onlyOwner"";
""2699_won"" -> ""2699_payWallet"";
""2699_setBetMax"" -> ""2699_onlyOwner"";
""2699_putHashes"" -> ""2699_putHash"";
""2699_setInvestStart"" -> ""2699_onlyOwner"";
""2699_coldStore"" -> ""2699_houseKeeping"";
""2699_playSystem"" -> ""2699_putHash"";
""2699_play"" -> ""2699_playSystem"";
""2699_fallback"" -> ""2699_won"";
""2699_payWallet"" -> ""2699_pay"";
""2699_playRandom"" -> ""2699_playSystem"";
""2699_betOf"" -> ""2699_betPrize"";
""2699_changeOwner"" -> ""2699_commitDividend"";
}
"
0x3a966ffa8451cbf3769b7d1f94d5b47da254edb0.sol,Play0x_LottoBall,contract Play0x_LottoBall { using SafeMath for uint256; using SafeMath for uint128; using SafeMath for uint40; using SafeMath for uint8; uint public jackpotSize; uint public tokenJackpotSize; uint public MIN_BET; uint public MAX_BET; uint public MAX_AMOUNT; uint public maxProfit; uint public maxTokenProfit; uint8 public platformFeePercentage = 15; uint8 public jackpotFeePercentage = 5; uint8 public ERC20rewardMultiple = 5; uint constant BetExpirationBlocks = 250; uint public lockedInBets; uint public lockedTokenInBets; bytes32 bitComparisonMask = 0xF; address public owner; address private nextOwner; address public manager; address private nextManager; address[] public secretSignerList; address public ERC20ContractAddres; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; struct Bet { uint amount; uint40 placeBlockNumber; address gambler; },1,"subgraph cluster_3084_Play0x_LottoBall {
label=""Play0x_LottoBall"";
""3084_setMaxProfit"" [label=""setMaxProfit""];
""3084_getJackpotWinBonus"" [label=""getJackpotWinBonus""];
""3084_sendFunds"" [label=""sendFunds""];
""3084_sendTokenFundsToManager"" [label=""sendTokenFundsToManager""];
""3084_updateMAX_AMOUNT"" [label=""updateMAX_AMOUNT""];
""3084_approveNextOwner"" [label=""approveNextOwner""];
""3084_getBonusPercentageByMachineMode"" [label=""getBonusPercentageByMachineMode""];
""3084_withdrawAlltokenFunds"" [label=""withdrawAlltokenFunds""];
""3084_updateBitComparisonMask"" [label=""updateBitComparisonMask""];
""3084_settleBetVerifi"" [label=""settleBetVerifi""];
""3084_withdrawToken"" [label=""withdrawToken""];
""3084_getPossibleWinAmount"" [label=""getPossibleWinAmount""];
""3084_setTokenAddress"" [label=""setTokenAddress""];
""3084_withdrawFunds"" [label=""withdrawFunds""];
""3084_updateJackpotFeePercentage"" [label=""updateJackpotFeePercentage""];
""3084_updatePlatformFeePercentage"" [label=""updatePlatformFeePercentage""];
""3084_refundBet"" [label=""refundBet""];
""3084_updateERC20rewardMultiple"" [label=""updateERC20rewardMultiple""];
""3084_updateMIN_BET"" [label=""updateMIN_BET""];
""3084_settleBet"" [label=""settleBet""];
""3084_clearProcessedBet"" [label=""clearProcessedBet""];
""3084_getContractInformation"" [label=""getContractInformation""];
""3084_withdrawAllFunds"" [label=""withdrawAllFunds""];
""3084_refundTokenBet"" [label=""refundTokenBet""];
""3084_updateWithdrawalModeByIndex"" [label=""updateWithdrawalModeByIndex""];
""3084_setSecretSignerByIndex"" [label=""setSecretSignerByIndex""];
""3084_runRotateTime"" [label=""runRotateTime""];
""3084_getContractAddress"" [label=""getContractAddress""];
""3084_initialParameter"" [label=""initialParameter""];
""3084_setSecretSignerList"" [label=""setSecretSignerList""];
""3084_fallback"" [label=""fallback""];
""3084_placeTokenBet"" [label=""placeTokenBet""];
""3084_sendFundsToOwner"" [label=""sendFundsToOwner""];
""3084_constructor"" [label=""constructor""];
""3084_acceptNextOwner"" [label=""acceptNextOwner""];
""3084_updateWithdrawalMode"" [label=""updateWithdrawalMode""];
""3084_sendFundsToManager"" [label=""sendFundsToManager""];
""3084_kill"" [label=""kill""];
""3084_acceptNextManager"" [label=""acceptNextManager""];
""3084_clearStorage"" [label=""clearStorage""];
""3084_updateMAX_BET"" [label=""updateMAX_BET""];
""3084_placeBet"" [label=""placeBet""];
""3084_approveNextManager"" [label=""approveNextManager""];
""3084_withdrawToken"" -> ""3084_onlyOwner"";
""3084_updateBitComparisonMask"" -> ""3084_onlyOwner"";
""3084_clearStorage"" -> ""3084_clearProcessedBet"";
""3084_withdrawAllFunds"" -> ""3084_onlyOwner"";
""3084_sendFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getPossibleWinAmount"";
""3084_updateJackpotFeePercentage"" -> ""3084_onlyOwner"";
""3084_setMaxProfit"" -> ""3084_onlyOwner"";
""3084_withdrawAlltokenFunds"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_sendFunds"";
""3084_setTokenAddress"" -> ""3084_onlyManager"";
""3084_updateWithdrawalModeByIndex"" -> ""3084_onlyManager"";
""3084_updateERC20rewardMultiple"" -> ""3084_onlyManager"";
""3084_updateMIN_BET"" -> ""3084_onlyManager"";
""3084_initialParameter"" -> ""3084_onlyOwner"";
""3084_setSecretSignerByIndex"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_onlyOwner"";
""3084_approveNextManager"" -> ""3084_onlyManager"";
""3084_setSecretSignerList"" -> ""3084_onlyOwner"";
""3084_withdrawFunds"" -> ""3084_sendFunds"";
""3084_refundBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_sendTokenFundsToManager"" -> ""3084_onlyOwner"";
""3084_refundTokenBet"" -> ""3084_getBonusPercentageByMachineMode"";
""3084_kill"" -> ""3084_onlyOwner"";
""3084_settleBet"" -> ""3084_runRotateTime"";
""3084_sendFundsToOwner"" -> ""3084_onlyOwner"";
""3084_approveNextOwner"" -> ""3084_onlyOwner"";
""3084_updateMAX_AMOUNT"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_getPossibleWinAmount"";
""3084_updatePlatformFeePercentage"" -> ""3084_onlyOwner"";
""3084_settleBetVerifi"" -> ""3084_runRotateTime"";
""3084_updateWithdrawalMode"" -> ""3084_onlyManager"";
""3084_refundBet"" -> ""3084_sendFunds"";
""3084_runRotateTime"" -> ""3084_getJackpotWinBonus"";
""3084_updateMAX_BET"" -> ""3084_onlyManager"";
}
"
0x548d32216d01617452892ea360bfce9ce8dc9729.sol,ChemistryCore,"contract ChemistryCore is ContractOfSale { function ChemistryCore() public { owner = msg.sender; authorized[msg.sender] = true; _createElement(, 2 ** 255); }",1,"subgraph cluster_1804_ChemistryCore {
label=""ChemistryCore"";
""1804_getElementView"" [label=""getElementView""];
""1804_getElementsFromIndex"" [label=""getElementsFromIndex""];
""1804_getElements"" [label=""getElements""];
""1804_fallback"" [label=""fallback""];
""1804_withdrawAmount"" [label=""withdrawAmount""];
""1804_withdrawAll"" [label=""withdrawAll""];
""1804_getElement"" [label=""getElement""];
""1804_ChemistryCore"" [label=""ChemistryCore""];
""1804_getElementOwners"" [label=""getElementOwners""];
""1804_getElementInfoView"" [label=""getElementInfoView""];
""1804_addElement"" [label=""addElement""];
""1804_getElementInfo"" [label=""getElementInfo""];
""1804__bytes32ToString"" [label=""_bytes32ToString""];
""1804_addElements"" [label=""addElements""];
""1804_getElementInfo"" -> ""1804_calculateNextPrice"";
""1804_withdrawAmount"" -> ""1804_onlyOwner"";
""1804_addElements"" -> ""1804_onlyAuthorized"";
""1804_addElement"" -> ""1804__createElement"";
""1804_getElementInfoView"" -> ""1804__bytes32ToString"";
""1804_getElementView"" -> ""1804__bytes32ToString"";
""1804_addElement"" -> ""1804_onlyAuthorized"";
""1804_addElements"" -> ""1804__createElement"";
""1804_getElementInfoView"" -> ""1804_calculateNextPrice"";
""1804_ChemistryCore"" -> ""1804__createElement"";
""1804_withdrawAll"" -> ""1804_onlyOwner"";
}
"
0xedde8f9b753ae899794f09756e11999cf54c82c5.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 1000000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_setPrices"" [label=""setPrices""];
""612__transfer"" [label=""_transfer""];
""612_selfdestructs"" [label=""selfdestructs""];
""612_mintToken"" [label=""mintToken""];
""612_fallback"" [label=""fallback""];
""612_freezeAccount"" [label=""freezeAccount""];
""612_buy"" [label=""buy""];
""612_selfdestructs"" -> ""612_onlyOwner"";
""612_fallback"" -> ""612__transfer"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_buy"" -> ""612__transfer"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_mintToken"" -> ""612_onlyOwner"";
}
"
0xa44fb3aa5c8465512b806145a8f9b60e74f3f851.sol,PITSTOP,"contract PITSTOP is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 10000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth =10000000e18; uint public target0drop = 500; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_PITSTOP {
label=""PITSTOP"";
""1253_distr"" [label=""distr""];
""1253_getTokens"" [label=""getTokens""];
""1253_constructor"" [label=""constructor""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_approve"" [label=""approve""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_Distribute"" [label=""Distribute""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_transfer"" [label=""transfer""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_add"" [label=""add""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_withdraw"" [label=""withdraw""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_burn"" -> ""1253_onlyOwner"";
}
"
0x361f5a02be315ed1241d8c2997d1fc35aaa27596.sol,DinarETHCrypto,"contract DinarETHCrypto is ERC20Interface, DinarETHInterface { using SafeMath for uint256; string public symbol = ; string public name = ; string public goldCertVerifier = ""https: uint8 public constant decimals = 8; uint256 public constant DNARtoGoldXchgRate = 10000000; uint256 public constant _totalSupply = 9900000000000000; address public owner; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; modifier onlyOwner() { require(msg.sender == owner); _; }",1,"subgraph cluster_699_DinarETHCrypto {
label=""DinarETHCrypto"";
""699_approve"" [label=""approve""];
""699_transferFrom"" [label=""transferFrom""];
""699_setGoldCertVerifier"" [label=""setGoldCertVerifier""];
""699_allowance"" [label=""allowance""];
""699_send"" [label=""send""];
""699_sendFrom"" [label=""sendFrom""];
""699_changeNameSymbol"" [label=""changeNameSymbol""];
""699_increaseApproval"" [label=""increaseApproval""];
""699_transfer"" [label=""transfer""];
""699_DinarETHCrypto"" [label=""DinarETHCrypto""];
""699_decreaseApproval"" [label=""decreaseApproval""];
""699_getGoldXchgRate"" [label=""getGoldXchgRate""];
""699_fallback"" [label=""fallback""];
""699_balanceOf"" [label=""balanceOf""];
""699_transferOwnership"" [label=""transferOwnership""];
""699_totalSupply"" [label=""totalSupply""];
""699_send"" -> ""699_notThisContract"";
""699_send"" -> ""699_transfer"";
""699_transferOwnership"" -> ""699_onlyOwner"";
""699_sendFrom"" -> ""699_transferFrom"";
""699_setGoldCertVerifier"" -> ""699_onlyOwner"";
""699_changeNameSymbol"" -> ""699_onlyOwner"";
""699_sendFrom"" -> ""699_notThisContract"";
""699_transfer"" -> ""699_notThisContract"";
""699_transferFrom"" -> ""699_notThisContract"";
}
"
0x70bf9df6967dc96156e76cc43b928a7ef02e159a.sol,X_GAME,contract X_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_X_GAME {
label=""X_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_StopGame"" [label=""StopGame""];
}
"
0xeca7f8aa63d1d28fafda5fdf021388b5d7166dee.sol,TryToPlay,contract TryToPlay { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_128_TryToPlay {
label=""TryToPlay"";
""128_newQuestioner"" [label=""newQuestioner""];
""128_NewQuestion"" [label=""NewQuestion""];
""128_StartTryToPlay"" [label=""StartTryToPlay""];
""128_fallback"" [label=""fallback""];
""128_StopGame"" [label=""StopGame""];
""128_Try"" [label=""Try""];
}
"
0x29c690419841e126b74981e4709e43916ac80f64.sol,QQ_game,contract QQ_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_QQ_game {
label=""QQ_game"";
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x4cf6e4b46d58d17bc51c6752381ae7d4149b04eb.sol,OXO,contract OXO is Token { string public name; string public symbol; uint32 internal rate; uint32 internal consume; uint256 internal totalConsume; uint256 internal bigJackpot; uint256 internal smallJackpot; uint256 public consumeRule; address internal owner; modifier onlyOwner(){ require (msg.sender==owner); _; },1,"subgraph cluster_964_OXO {
label=""OXO"";
""964_getBalance"" [label=""getBalance""];
""964_sendTransfer"" [label=""sendTransfer""];
""964_balanceOf"" [label=""balanceOf""];
""964_getSmallJackpot"" [label=""getSmallJackpot""];
""964_ticketConsume"" [label=""ticketConsume""];
""964_trashOf"" [label=""trashOf""];
""964_transferFrom"" [label=""transferFrom""];
""964_approve"" [label=""approve""];
""964_smallCheckOut"" [label=""smallCheckOut""];
""964_getBigJackpot"" [label=""getBigJackpot""];
""964_fallback"" [label=""fallback""];
""964_setJackpot"" [label=""setJackpot""];
""964_getEth"" [label=""getEth""];
""964_getRate"" [label=""getRate""];
""964_getConsume"" [label=""getConsume""];
""964_sendAll"" [label=""sendAll""];
""964_inTrash"" [label=""inTrash""];
""964_transfer"" [label=""transfer""];
""964_allowance"" [label=""allowance""];
""964_bigCheckOut"" [label=""bigCheckOut""];
""964_tickets"" [label=""tickets""];
""964_getTotalConsume"" [label=""getTotalConsume""];
""964_OXO"" [label=""OXO""];
""964_sendAll"" -> ""964_onlyOwner"";
""964_smallCheckOut"" -> ""964_onlyOwner"";
""964_bigCheckOut"" -> ""964_onlyOwner"";
""964_ticketConsume"" -> ""964_setJackpot"";
""964_getEth"" -> ""964_onlyOwner"";
""964_sendTransfer"" -> ""964_onlyOwner"";
""964_tickets"" -> ""964_setJackpot"";
}
"
0x479cbe1f6a7fa4d7e304ae983803c46e85ced870.sol,Slaughter3D,contract Slaughter3D { using SafeMath for uint; struct Stage { uint8 numberOfPlayers; uint256 blocknumber; bool finalized; mapping (uint8 => address) slotXplayer; mapping (address => bool) players; mapping (uint8 => address) setMN; },1,"subgraph cluster_1021_Slaughter3D {
label=""Slaughter3D"";
""1021_jackpotinfo"" [label=""jackpotinfo""];
""1021_previousstageloser"" [label=""previousstageloser""];
""1021_tryFinalizeStage"" [label=""tryFinalizeStage""];
""1021_acceptOffer"" [label=""acceptOffer""];
""1021_invalidateStage"" [label=""invalidateStage""];
""1021_fallback"" [label=""fallback""];
""1021_previousstageplayer1"" [label=""previousstageplayer1""];
""1021_currentstageplayer1"" [label=""currentstageplayer1""];
""1021_nextonetogetpaid"" [label=""nextonetogetpaid""];
""1021_playervanity"" [label=""playervanity""];
""1021_currentstageplayer2"" [label=""currentstageplayer2""];
""1021_contractownsthismanyP3D"" [label=""contractownsthismanyP3D""];
""1021_allocateSurvivorWinnings"" [label=""allocateSurvivorWinnings""];
""1021_Payoutnextrefund"" [label=""Payoutnextrefund""];
""1021_withdraw"" [label=""withdraw""];
""1021_offerAsSacrifice"" [label=""offerAsSacrifice""];
""1021_DonateToLosers"" [label=""DonateToLosers""];
""1021_currentPlayers"" [label=""currentPlayers""];
""1021_Expand"" [label=""Expand""];
""1021_constructor"" [label=""constructor""];
""1021_previousstageplayer2"" [label=""previousstageplayer2""];
""1021_offerAsSacrificeFromVault"" [label=""offerAsSacrificeFromVault""];
""1021_myEarnings"" [label=""myEarnings""];
""1021_changevanity"" [label=""changevanity""];
""1021_DivsToRefundpot"" [label=""DivsToRefundpot""];
""1021_checkstatus"" [label=""checkstatus""];
""1021_offerAsSacrificeFromVault"" -> ""1021_canPayFromVault"";
""1021_offerAsSacrifice"" -> ""1021_prepareStage"";
""1021_withdraw"" -> ""1021_tryFinalizeStage"";
""1021_offerAsSacrificeFromVault"" -> ""1021_isNewToStage"";
""1021_offerAsSacrificeFromVault"" -> ""1021_acceptOffer"";
""1021_offerAsSacrificeFromVault"" -> ""1021_prepareStage"";
""1021_tryFinalizeStage"" -> ""1021_invalidateStage"";
""1021_withdraw"" -> ""1021_hasEarnings"";
""1021_offerAsSacrificeFromVault"" -> ""1021_tryFinalizeStage"";
""1021_tryFinalizeStage"" -> ""1021_allocateSurvivorWinnings"";
""1021_offerAsSacrifice"" -> ""1021_isValidOffer"";
""1021_offerAsSacrifice"" -> ""1021_tryFinalizeStage"";
""1021_offerAsSacrifice"" -> ""1021_isNewToStage"";
""1021_offerAsSacrifice"" -> ""1021_acceptOffer"";
""1021_myEarnings"" -> ""1021_hasEarnings"";
}
"
0x5576250692275701efde5eeb51596e2d9460790b.sol,UserDataManager,contract UserDataManager { using NameFilter for string; address private admin = msg.sender; uint256 public registrationFee_ = 0; mapping(uint256 => UserDataManagerReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; struct Player { address addr; bytes32 name; uint256 laff; },1,"subgraph cluster_13_UserDataManagerReceiverInterface {
label=""UserDataManagerReceiverInterface"";
""13_receivePlayerInfo"" [label=""receivePlayerInfo""];
}
"
0x56e0dc284a913f7c1198c83f7c69bfec36d31eed.sol,NKYS,"contract NKYS is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 40 * 1 days; uint public round2 = now + 30 * 1 days; uint public round1 = now + 20 * 1 days; uint256 public totalSupply = 7000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 15000000e8; uint public target0drop = 35000; uint public progress0drop = 0; address multisig = 0xa30526D832d9A07596576c8D9de61BfEcCf08499; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_NKYS {
label=""NKYS"";
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_distr"" [label=""distr""];
""1263_withdraw"" [label=""withdraw""];
""1263_add"" [label=""add""];
""1263_fallback"" [label=""fallback""];
""1263_transfer"" [label=""transfer""];
""1263_getTokens"" [label=""getTokens""];
""1263_approve"" [label=""approve""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_constructor"" [label=""constructor""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_allowance"" [label=""allowance""];
""1263_burn"" [label=""burn""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_Distribute"" [label=""Distribute""];
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_getTokens"" -> ""1263_distr"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_constructor"" -> ""1263_distr"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
}
"
0x0114289efe38186b732d12c07a1ce4341e266513.sol,PreICO,"contract PreICO is ReentrancyGuard, Ownable, Stateful { using SafeMath for uint256; DLH public token; address public wallet; uint256 public startPreICOTime; uint256 public endPreICOTime; uint256 public rate; uint256 public priceUSD; uint256 public centRaised; uint256 public minimumInvest; uint256 public softCapPreSale; uint256 public hardCapPreSale; uint256 public hardCapPrivate; address public oracle; address public manager; mapping(address => uint) public balances; mapping(address => uint) public balancesInCent; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); function PreICO( address _wallet, address _token, uint256 _priceUSD, uint256 _minimumInvest) public { require(_priceUSD != 0); require(_wallet != address(0)); require(_token != address(0)); priceUSD = _priceUSD; rate = 250000000000000000; wallet = _wallet; token = DLH(_token); hardCapPrivate = 40000000; minimumInvest = _minimumInvest; }",1,"subgraph cluster_1322_PreICO {
label=""PreICO"";
""1322_finishPreSale"" [label=""finishPreSale""];
""1322_forwardFunds"" [label=""forwardFunds""];
""1322_manualTransfer"" [label=""manualTransfer""];
""1322_hasEnded"" [label=""hasEnded""];
""1322_PreICO"" [label=""PreICO""];
""1322_refund"" [label=""refund""];
""1322_setOracle"" [label=""setOracle""];
""1322_setManager"" [label=""setManager""];
""1322_changePriceUSD"" [label=""changePriceUSD""];
""1322_getTokenAmount"" [label=""getTokenAmount""];
""1322_startPreSale"" [label=""startPreSale""];
""1322_fallback"" [label=""fallback""];
""1322_buyTokens"" [label=""buyTokens""];
""1322_buyTokens"" -> ""1322_forwardFunds"";
""1322_finishPreSale"" -> ""1322_setState"";
""1322_refund"" -> ""1322_refundAllowed"";
""1322_finishPreSale"" -> ""1322_forwardFunds"";
""1322_manualTransfer"" -> ""1322_saleIsOn"";
""1322_manualTransfer"" -> ""1322_getTokenAmount"";
""1322_startPreSale"" -> ""1322_setState"";
""1322_startPreSale"" -> ""1322_onlyOwner"";
""1322_fallback"" -> ""1322_buyTokens"";
""1322_buyTokens"" -> ""1322_isUnderHardCap"";
""1322_changePriceUSD"" -> ""1322_onlyOracle"";
""1322_finishPreSale"" -> ""1322_onlyOwner"";
""1322_manualTransfer"" -> ""1322_isUnderHardCap"";
""1322_manualTransfer"" -> ""1322_onlyOwnerOrManager"";
""1322_buyTokens"" -> ""1322_getTokenAmount"";
""1322_setManager"" -> ""1322_onlyOwner"";
""1322_setOracle"" -> ""1322_onlyOwner"";
""1322_buyTokens"" -> ""1322_nonReentrant"";
""1322_buyTokens"" -> ""1322_saleIsOn"";
""1322_refund"" -> ""1322_nonReentrant"";
}
"
0xb42359b3aee091fd4a2fb798bf6a8839c7902ed3.sol,ButterCoin,"contract ButterCoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 370 * 1 days; uint public round2 = now + 320 * 1 days; uint public round1 = now + 220 * 1 days; uint256 public totalSupply = 5000000000000000000000000000; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 10000000000000; uint public target0drop = 10; uint public progress0drop = 0; address multisig = 0x686E275CE6Fe968d1064C102613E6c23c78DC58a ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_ButterCoin {
label=""ButterCoin"";
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_add"" [label=""add""];
""1261_Distribute"" [label=""Distribute""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_allowance"" [label=""allowance""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_constructor"" [label=""constructor""];
""1261_transfer"" [label=""transfer""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_burn"" [label=""burn""];
""1261_distr"" [label=""distr""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
}
"
0xaa8722fb1c9eec9b6c32a90dbe9aa4c9eff19f55.sol,OrganicumOrders,contract OrganicumOrders { struct order { uint256 balance; uint256 tokens; },1,"subgraph cluster_563_OrganicumOrders {
label=""OrganicumOrders"";
""563_fallback"" [label=""fallback""];
""563_vote"" [label=""vote""];
""563_OrganicumOrders"" [label=""OrganicumOrders""];
""563_changeEtherCost"" [label=""changeEtherCost""];
""563_refund"" [label=""refund""];
""563_takeInvest"" [label=""takeInvest""];
""563_orderFor"" [label=""orderFor""];
""563_getPrice"" [label=""getPrice""];
""563_changeOwner"" [label=""changeOwner""];
""563_takeInvest"" -> ""563_isOwner"";
""563_changeEtherCost"" -> ""563_isOwner"";
""563_orderFor"" -> ""563_getPrice"";
""563_fallback"" -> ""563_getPrice"";
""563_changeOwner"" -> ""563_isOwner"";
}
"
0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol,Token,"contract Token is ERC20, Stoppable { bytes32 public symbol; string public name; uint256 public decimals = 18; TokenLogic public logic; function Token(string name_, bytes32 symbol_) { name = name_; symbol = symbol_; }",1,"subgraph cluster_1370_Token {
label=""Token"";
""1370_payout"" [label=""payout""];
""1370_totalSupply"" [label=""totalSupply""];
""1370_setLogic"" [label=""setLogic""];
""1370_mint"" [label=""mint""];
""1370_transferEth"" [label=""transferEth""];
""1370_setSymbol"" [label=""setSymbol""];
""1370_setOwner"" [label=""setOwner""];
""1370_fallback"" [label=""fallback""];
""1370_setName"" [label=""setName""];
""1370_balanceOf"" [label=""balanceOf""];
""1370_burn"" [label=""burn""];
""1370_approve"" [label=""approve""];
""1370_transferFrom"" [label=""transferFrom""];
""1370_push"" [label=""push""];
""1370_transfer"" [label=""transfer""];
""1370_Token"" [label=""Token""];
""1370_allowance"" [label=""allowance""];
""1370_pull"" [label=""pull""];
""1370_triggerTansferEvent"" [label=""triggerTansferEvent""];
""1370_burn"" -> ""1370_auth"";
""1370_burn"" -> ""1370_note"";
""1370_transfer"" -> ""1370_note"";
""1370_pull"" -> ""1370_transferFrom"";
""1370_transfer"" -> ""1370_stoppable"";
""1370_setName"" -> ""1370_auth"";
""1370_mint"" -> ""1370_stoppable"";
""1370_mint"" -> ""1370_auth"";
""1370_setOwner"" -> ""1370_auth"";
""1370_burn"" -> ""1370_stoppable"";
""1370_approve"" -> ""1370_note"";
""1370_push"" -> ""1370_transfer"";
""1370_setOwner"" -> ""1370_setOwner"";
""1370_approve"" -> ""1370_stoppable"";
""1370_setSymbol"" -> ""1370_auth"";
""1370_mint"" -> ""1370_note"";
""1370_transferFrom"" -> ""1370_stoppable"";
""1370_payout"" -> ""1370_auth"";
""1370_transferFrom"" -> ""1370_note"";
""1370_setLogic"" -> ""1370_auth"";
""1370_setLogic"" -> ""1370_note"";
""1370_setOwner"" -> ""1370_balanceOf"";
}
"
0x379f2596d4c4a417ef1023b81c8b9ff5419b13d4.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 10000000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_setPrices"" [label=""setPrices""];
""612_freezeAccount"" [label=""freezeAccount""];
""612_mintToken"" [label=""mintToken""];
""612__transfer"" [label=""_transfer""];
""612_buy"" [label=""buy""];
""612_fallback"" [label=""fallback""];
""612_selfdestructs"" [label=""selfdestructs""];
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_buy"" -> ""612__transfer"";
""612_fallback"" -> ""612__transfer"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_mintToken"" -> ""612_onlyOwner"";
""612_selfdestructs"" -> ""612_onlyOwner"";
}
"
0x5b39afa22a9debd9247bf84b68a79b8736c2ba4e.sol,Quiz,contract Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_Quiz {
label=""Quiz"";
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_Try"" [label=""Try""];
""118_Start_quiz_g"" [label=""Start_quiz_g""];
}
"
0xefcc5dcaba4a93046b5f5c24c1281c685154214c.sol,CrypteloPreSale,"contract CrypteloPreSale { using SafeMath for uint256; mapping (address => bool) private owners; mapping (address => uint) private WhiteListed; mapping (address => uint256) private vestedTokens; mapping (address => uint256) private dateInvested; mapping (address => uint256) private firstDeadline; uint private firstGminimumWeiAmount = 100000000000000000; uint private secondGminimumWeiAmount = 40000000000000000000; uint public weiHardCap = 3625000000000000000000; uint public weiRaised = 0; uint private weiLeft = weiHardCap; uint private CRLTotal = 9062500000000000; uint private CRLToSell = CRLTotal.div(2); uint private totalVesting = 0; uint private totalCRLDistributed = 0; uint private CRLLeft = CRLTotal; uint public CRLperEther = 1250000000000; uint public CRLperMicroEther = CRLperEther.div(1000000); address public CrypteloERC20Address = 0x7123027d76a5135e66b3a365efaba2b55de18a62; address private forwardFundsWallet = 0xd6c56d07665D44159246517Bb4B2aC9bBeb040cf; uint firstTimeOffset = 1 years; event eRefund(address _addr, uint _weiAmount, string where); event eTokensToSend(address _addr, uint _CRLTokens); event eSendTokens(address _addr, uint _amount); function CrypteloPreSale(){ owners[msg.sender] = true; }",1,"subgraph cluster_573_CrypteloPreSale {
label=""CrypteloPreSale"";
""573_forwardFunds"" [label=""forwardFunds""];
""573_fallback"" [label=""fallback""];
""573_getTotalVesting"" [label=""getTotalVesting""];
""573_withdrawDistributionCRL"" [label=""withdrawDistributionCRL""];
""573_addWhiteList"" [label=""addWhiteList""];
""573_claimTokens"" [label=""claimTokens""];
""573_CrypteloPreSale"" [label=""CrypteloPreSale""];
""573_isWhiteList"" [label=""isWhiteList""];
""573_removeWhiteList"" [label=""removeWhiteList""];
""573_checkMyTokens"" [label=""checkMyTokens""];
""573_withdrawAllEther"" [label=""withdrawAllEther""];
""573_getTotalDistributed"" [label=""getTotalDistributed""];
""573_refund"" [label=""refund""];
""573_sendTokens"" [label=""sendTokens""];
""573_vestTokens"" [label=""vestTokens""];
""573_checkMyVestingPeriod"" [label=""checkMyVestingPeriod""];
""573_fallback"" -> ""573_sendTokens"";
""573_fallback"" -> ""573_refund"";
""573_fallback"" -> ""573_forwardFunds"";
""573_withdrawDistributionCRL"" -> ""573_sendTokens"";
""573_fallback"" -> ""573_vestTokens"";
""573_claimTokens"" -> ""573_sendTokens"";
}
"
0x56b7f2a2d6f70d88b991e6c7b8005e0a13a9b379.sol,CryptoCurrencyExchange,"contract CryptoCurrencyExchange is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 3000000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function CryptoCurrencyExchange() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_CryptoCurrencyExchange {
label=""CryptoCurrencyExchange"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_CryptoCurrencyExchange"" [label=""CryptoCurrencyExchange""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x03a897c8d7d21688ae0a49ea087836b2667c2cc8.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1308_RefundVault {
label=""RefundVault"";
""1308_close"" [label=""close""];
""1308_enableRefunds"" [label=""enableRefunds""];
""1308_refund"" [label=""refund""];
""1308_deposit"" [label=""deposit""];
""1308_constructor"" [label=""constructor""];
""1308_deposit"" -> ""1308_onlyOwner"";
""1308_close"" -> ""1308_onlyOwner"";
""1308_enableRefunds"" -> ""1308_onlyOwner"";
}
"
0xa2038ce672658f492fcd9e4fdaa1a3c530011a8a.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_630_RefundVault {
label=""RefundVault"";
""630_close"" [label=""close""];
""630_deposit"" [label=""deposit""];
""630_refund"" [label=""refund""];
""630_RefundVault"" [label=""RefundVault""];
""630_enableRefunds"" [label=""enableRefunds""];
""630_close"" -> ""630_onlyOwner"";
""630_deposit"" -> ""630_onlyOwner"";
""630_enableRefunds"" -> ""630_onlyOwner"";
}
"
0x6f3d1879cd84fa1a7eec7fe936af6a84b67f4567.sol,ERC721dAppCaps,"contract ERC721dAppCaps is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721, Ownable, Fallback { event BoughtToken(address indexed buyer, uint256 tokenId); string public constant company = ; string public constant contact = ""https: string public constant author = ; uint8 constant TITLE_MAX_LENGTH = 64; uint256 constant DESCRIPTION_MAX_LENGTH = 100000; uint256 currentPrice = 0; mapping(uint256 => uint256) tokenTypes; mapping(uint256 => string) tokenTitles; mapping(uint256 => string) tokenDescriptions; mapping(uint256 => string) specialQualities; mapping(uint256 => string) tokenClasses; mapping(uint256 => string) iptcKeywords; constructor(string _name, string _symbol) public { name_ = _name; symbol_ = _symbol; _registerInterface(InterfaceId_ERC721Enumerable); _registerInterface(InterfaceId_ERC721Metadata); }",1,"subgraph cluster_1671_ERC721dAppCaps {
label=""ERC721dAppCaps"";
""1671_setCurrentPrice"" [label=""setCurrentPrice""];
""1671_removeTokenFrom"" [label=""removeTokenFrom""];
""1671_tokenURI"" [label=""tokenURI""];
""1671_symbol"" [label=""symbol""];
""1671__mint"" [label=""_mint""];
""1671_tokenOfOwnerByIndex"" [label=""tokenOfOwnerByIndex""];
""1671_totalSupply"" [label=""totalSupply""];
""1671_constructor"" [label=""constructor""];
""1671_kill"" [label=""kill""];
""1671_myTokens"" [label=""myTokens""];
""1671_viewTokenMeta"" [label=""viewTokenMeta""];
""1671_getCurrentPrice"" [label=""getCurrentPrice""];
""1671_name"" [label=""name""];
""1671_buyToken"" [label=""buyToken""];
""1671_tokenByIndex"" [label=""tokenByIndex""];
""1671__setTokenURI"" [label=""_setTokenURI""];
""1671_addTokenTo"" [label=""addTokenTo""];
""1671_tokenByIndex"" -> ""1671_totalSupply"";
""1671_buyToken"" -> ""1671__mint"";
""1671_removeTokenFrom"" -> ""1671_removeTokenFrom"";
""1671__setTokenURI"" -> ""1671_onlyOwner"";
""1671_addTokenTo"" -> ""1671_addTokenTo"";
""1671_tokenURI"" -> ""1671_exists"";
""1671__setTokenURI"" -> ""1671_exists"";
""1671_constructor"" -> ""1671__registerInterface"";
""1671_setCurrentPrice"" -> ""1671_onlyOwner"";
""1671_tokenOfOwnerByIndex"" -> ""1671_balanceOf"";
""1671__mint"" -> ""1671__mint"";
""1671_buyToken"" -> ""1671_onlyOwner"";
}
"
0xd7faef6fd3d3e22037619a756221e38f7f2c9c62.sol,Blogger,contract Blogger { address public author; uint public donationCount; uint public withdrawalDate; struct Donate { address funder; uint value; },1,"subgraph cluster_232_Blogger {
label=""Blogger"";
""232_withdraw"" [label=""withdraw""];
""232_constructor"" [label=""constructor""];
""232_requestRefund"" [label=""requestRefund""];
""232_donate"" [label=""donate""];
""232_getContractValue"" [label=""getContractValue""];
""232_getSummary"" [label=""getSummary""];
""232_withdraw"" -> ""232_restricted"";
}
"
0x50ec4b1f8434020e2d896c9cfb8a20d63af6136d.sol,Snip3D,contract Snip3D is Owned { using SafeMath for uint; uint public _totalSupply; mapping(address => uint256)public balances; mapping(address => uint256)public bullets; mapping(uint256 => address)public formation; uint256 public nextFormation; mapping(address => uint256)public lastMove; mapping(uint256 => address) public RefundWaitingLine; uint256 public NextInLine; uint256 public NextAtLineEnd; uint256 public Refundpot; uint256 public blocksBeforeSemiRandomShoot = 10; uint256 public blocksBeforeTargetShoot = 40; constructor() public { },1,"subgraph cluster_957_Snip3D {
label=""Snip3D"";
""957_fetchdivs"" [label=""fetchdivs""];
""957_constructor"" [label=""constructor""];
""957_Payoutnextrefund"" [label=""Payoutnextrefund""];
""957_P3DDivstocontract"" [label=""P3DDivstocontract""];
""957_amountofp3d"" [label=""amountofp3d""];
""957_shootTarget"" [label=""shootTarget""];
""957_disburse"" [label=""disburse""];
""957_die"" [label=""die""];
""957_dividendsOwing"" [label=""dividendsOwing""];
""957_changevanity"" [label=""changevanity""];
""957_shootSemiRandom"" [label=""shootSemiRandom""];
""957_sendInSoldier"" [label=""sendInSoldier""];
""957_harvestabledivs"" [label=""harvestabledivs""];
""957_fallback"" [label=""fallback""];
""957_sendInSoldier"" -> ""957_updateAccount"";
""957_shootTarget"" -> ""957_isAlive"";
""957_die"" -> ""957_onlyOwner"";
""957_shootSemiRandom"" -> ""957_fetchdivs"";
""957_P3DDivstocontract"" -> ""957_harvestabledivs"";
""957_shootTarget"" -> ""957_harvestabledivs"";
""957_fetchdivs"" -> ""957_updateAccount"";
""957_shootSemiRandom"" -> ""957_isAlive"";
""957_shootTarget"" -> ""957_fetchdivs"";
}
"
0x46d1ebf7bb93044e078e0496e4661ec772607d9d.sol,TTCSale,"contract TTCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 30000; bool private rentrancy_lock = false; TTCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1578_TTCSale {
label=""TTCSale"";
""1578_checkFundingGoal"" [label=""checkFundingGoal""];
""1578_changeEndTime"" [label=""changeEndTime""];
""1578_checkFundingCap"" [label=""checkFundingCap""];
""1578_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1578_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1578_changeStartTime"" [label=""changeStartTime""];
""1578_terminate"" [label=""terminate""];
""1578_convertToMiniTtc"" [label=""convertToMiniTtc""];
""1578_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1578_currentTime"" [label=""currentTime""];
""1578_safeWithdrawal"" [label=""safeWithdrawal""];
""1578_TTCSale"" [label=""TTCSale""];
""1578_fallback"" [label=""fallback""];
""1578_setRate"" [label=""setRate""];
""1578_terminate"" -> ""1578_onlyOwner"";
""1578_fallback"" -> ""1578_checkFundingCap"";
""1578_ownerAllocateTokens"" -> ""1578_nonReentrant"";
""1578_ownerSafeWithdrawal"" -> ""1578_nonReentrant"";
""1578_ownerUnlockFund"" -> ""1578_afterDeadline"";
""1578_ownerAllocateTokens"" -> ""1578_onlyOwner"";
""1578_fallback"" -> ""1578_checkFundingGoal"";
""1578_fallback"" -> ""1578_afterStartTime"";
""1578_fallback"" -> ""1578_beforeDeadline"";
""1578_fallback"" -> ""1578_nonReentrant"";
""1578_ownerAllocateTokens"" -> ""1578_checkFundingCap"";
""1578_safeWithdrawal"" -> ""1578_nonReentrant"";
""1578_changeStartTime"" -> ""1578_onlyOwner"";
""1578_fallback"" -> ""1578_whenNotPaused"";
""1578_fallback"" -> ""1578_saleNotClosed"";
""1578_ownerAllocateTokens"" -> ""1578_checkFundingGoal"";
""1578_TTCSale"" -> ""1578_setRate"";
""1578_safeWithdrawal"" -> ""1578_afterDeadline"";
""1578_ownerUnlockFund"" -> ""1578_onlyOwner"";
""1578_changeEndTime"" -> ""1578_onlyOwner"";
""1578_ownerSafeWithdrawal"" -> ""1578_onlyOwner"";
""1578_setRate"" -> ""1578_onlyOwner"";
}
"
0xec6ce30daf8195a65c83a29025bd334bc9481ca0.sol,ZeroFeeXchange,"contract ZeroFeeXchange is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 33 * 1 days; uint public round2 = now + 20 * 1 days; uint public round1 = now + 15 * 1 days; uint256 public totalSupply = 21000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 60000e18; uint public target0drop = 200; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_ZeroFeeXchange {
label=""ZeroFeeXchange"";
""1253_Implt"" [label=""Implt""];
""1253_distr"" [label=""distr""];
""1253_burn"" [label=""burn""];
""1253_constructor"" [label=""constructor""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_Distribute"" [label=""Distribute""];
""1253_transfer"" [label=""transfer""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" [label=""getTokens""];
""1253_approve"" [label=""approve""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_ImplAll"" [label=""ImplAll""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_fallback"" [label=""fallback""];
""1253_allowance"" [label=""allowance""];
""1253_add"" [label=""add""];
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_ImplAll"" -> ""1253_onlyOwner"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_constructor"" -> ""1253_distr"";
""1253_Implt"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
}
"
0xe1dbbce4570b815b6ce3434bb3097dc9f453c565.sol,MobiusRED,"contract MobiusRED is DSMath, DSAuth { string public ipfsHash; string public ipfsHashType = ; MobiusRedToken public token; bool public upgraded; address public nextVersion; uint public totalSharesSold; uint public totalEarningsGenerated; uint public totalDividendsPaid; uint public totalJackpotsWon; uint public constant DEV_FRACTION = WAD / 20; uint public constant DEV_DIVISOR = 20; uint public constant RETURNS_FRACTION = 65 * 10**16; uint public constant REFERRAL_FRACTION = 1 * 10**16; uint public constant JACKPOT_SEED_FRACTION = WAD / 20; uint public constant JACKPOT_FRACTION = 15 * 10**16; uint public constant AIRDROP_FRACTION = WAD / 100; uint public constant DIVIDENDS_FRACTION = 9 * 10**16; uint public constant STARTING_SHARE_PRICE = 1 finney; uint public constant PRICE_INCREASE_PERIOD = 1 hours; uint public constant HARD_DEADLINE_DURATION = 10 days; uint public constant SOFT_DEADLINE_DURATION = 1 days; uint public constant TIME_PER_SHARE = 5 minutes; uint public jackpotSeed; uint public devBalance; uint public raisedICO; uint public unclaimedReturns; uint public constant MULTIPLIER = RAY; struct Investor { uint lastCumulativeReturnsPoints; uint shares; }",1,"subgraph cluster_2284_MobiusRED {
label=""MobiusRED"";
""2284_fallback"" [label=""fallback""];
""2284_constructor"" [label=""constructor""];
""2284__outstandingReturns"" [label=""_outstandingReturns""];
""2284_buyShares"" [label=""buyShares""];
""2284__airDrop"" [label=""_airDrop""];
""2284__purchase"" [label=""_purchase""];
""2284_upgrade"" [label=""upgrade""];
""2284__updateReturns"" [label=""_updateReturns""];
""2284_withdrawDevShare"" [label=""withdrawDevShare""];
""2284_updateMyReturns"" [label=""updateMyReturns""];
""2284__finalizeRound"" [label=""_finalizeRound""];
""2284__issueShares"" [label=""_issueShares""];
""2284_finalizeLastRound"" [label=""finalizeLastRound""];
""2284__splitRevenue"" [label=""_splitRevenue""];
""2284_finalizeAndRestart"" [label=""finalizeAndRestart""];
""2284_totalsInfo"" [label=""totalsInfo""];
""2284__disburseReturns"" [label=""_disburseReturns""];
""2284_reinvestReturns"" [label=""reinvestReturns""];
""2284_startNewRound"" [label=""startNewRound""];
""2284_setIPFSHash"" [label=""setIPFSHash""];
""2284_hasReturns"" [label=""hasReturns""];
""2284_roundInfo"" [label=""roundInfo""];
""2284_withdrawReturns"" [label=""withdrawReturns""];
""2284_investorInfo"" [label=""investorInfo""];
""2284_estimateReturns"" [label=""estimateReturns""];
""2284__outstandingReturns"" -> ""2284_mul"";
""2284__finalizeRound"" -> ""2284_add"";
""2284_finalizeAndRestart"" -> ""2284_startNewRound"";
""2284__finalizeRound"" -> ""2284_wmul"";
""2284__purchase"" -> ""2284_add"";
""2284__issueShares"" -> ""2284_add"";
""2284_reinvestReturns"" -> ""2284_min"";
""2284_upgrade"" -> ""2284_auth"";
""2284_roundInfo"" -> ""2284_wmul"";
""2284_fallback"" -> ""2284_buyShares"";
""2284_withdrawDevShare"" -> ""2284_auth"";
""2284_reinvestReturns"" -> ""2284_reinvestReturns"";
""2284__outstandingReturns"" -> ""2284_sub"";
""2284__disburseReturns"" -> ""2284_wdiv"";
""2284_reinvestReturns"" -> ""2284__purchase"";
""2284_finalizeLastRound"" -> ""2284__finalizeRound"";
""2284_buyShares"" -> ""2284__purchase"";
""2284__splitRevenue"" -> ""2284_wmul"";
""2284__issueShares"" -> ""2284_wdiv"";
""2284__updateReturns"" -> ""2284_add"";
""2284_withdrawReturns"" -> ""2284__updateReturns"";
""2284_investorInfo"" -> ""2284_estimateReturns"";
""2284__splitRevenue"" -> ""2284__disburseReturns"";
""2284_reinvestReturns"" -> ""2284__updateReturns"";
""2284__updateReturns"" -> ""2284__outstandingReturns"";
""2284__disburseReturns"" -> ""2284_add"";
""2284__airDrop"" -> ""2284_add"";
""2284_reinvestReturns"" -> ""2284_sub"";
""2284_totalsInfo"" -> ""2284_wmul"";
""2284_setIPFSHash"" -> ""2284_auth"";
""2284__purchase"" -> ""2284_mul"";
""2284_finalizeAndRestart"" -> ""2284_finalizeLastRound"";
""2284__purchase"" -> ""2284__issueShares"";
""2284__purchase"" -> ""2284__updateReturns"";
""2284_withdrawReturns"" -> ""2284_sub"";
""2284__purchase"" -> ""2284_min"";
""2284__purchase"" -> ""2284__airDrop"";
""2284__issueShares"" -> ""2284_mul"";
""2284_estimateReturns"" -> ""2284__outstandingReturns"";
""2284__purchase"" -> ""2284__splitRevenue"";
""2284__splitRevenue"" -> ""2284_add"";
""2284_estimateReturns"" -> ""2284_hasReturns"";
""2284_withdrawReturns"" -> ""2284_hasReturns"";
""2284_updateMyReturns"" -> ""2284__updateReturns"";
""2284_startNewRound"" -> ""2284__purchase"";
""2284__disburseReturns"" -> ""2284_mul"";
}
"
0xee58ee0b1519bb47801812a3a9c83ab600c63d81.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_645_SafeDestructible {
label=""SafeDestructible"";
""645_destroy"" [label=""destroy""];
""645_destroy"" -> ""645_onlyOwner"";
}
"
0xeb62b8c5c4f0f5d59a7f060554c13e8f38f4de9f.sol,HODL,contract HODL { address hodl = msg.sender; function() external payable {},1,"subgraph cluster_47_HODL {
label=""HODL"";
""47_get"" [label=""get""];
""47_end"" [label=""end""];
""47_fallback"" [label=""fallback""];
}
"
0x6de3cc59152e19f108378984f45e20a34c9f6338.sol,EtherSpin,"contract EtherSpin is usingOraclize, SafeMath { address public owner; uint public betCount; uint public minBet; uint public maxBet; uint public edgeRange; uint public payoutMultiplier; uint public gasLimit; uint public standardFee; uint public minimumNumber; uint public totalPlayerWinnings; uint public totalHouseWinnings; mapping (bytes32 => address) playerAddy; mapping (bytes32 => uint) playerBetSize; mapping (bytes32 => bool) playerHiLo; event LogBet(address indexed playerAddy, bool indexed HiLo, uint ActualRNGNumber, uint betSizing, bool WinLossResult); event LogErr(uint errcode); modifier onlyOwner { if (msg.sender != owner) throw; _; }",1,"subgraph cluster_6368_EtherSpin {
label=""EtherSpin"";
""6368_ownerSetEdgeRangeAndPayout"" [label=""ownerSetEdgeRangeAndPayout""];
""6368_ownerTransferEther"" [label=""ownerTransferEther""];
""6368___callback"" [label=""__callback""];
""6368_ownerSetGasLimit"" [label=""ownerSetGasLimit""];
""6368_ownerKillContract"" [label=""ownerKillContract""];
""6368_roll"" [label=""roll""];
""6368_ownerSetLimits"" [label=""ownerSetLimits""];
""6368_ownerDeposit"" [label=""ownerDeposit""];
""6368_fallback"" [label=""fallback""];
""6368_EtherSpin"" [label=""EtherSpin""];
""6368_rollLo"" [label=""rollLo""];
""6368_ownerSetStandardFee"" [label=""ownerSetStandardFee""];
""6368_ownerTransferEther"" -> ""6368_onlyOwner"";
""6368_EtherSpin"" -> ""6368_ownerSetGasLimit"";
""6368___callback"" -> ""6368_oraclize_randomDS_proofVerify__returnCode"";
""6368_ownerSetEdgeRangeAndPayout"" -> ""6368_onlyOwner"";
""6368_ownerSetStandardFee"" -> ""6368_onlyOwner"";
""6368_fallback"" -> ""6368_roll"";
""6368_ownerSetGasLimit"" -> ""6368_onlyOwner"";
""6368_ownerKillContract"" -> ""6368_onlyOwner"";
""6368_EtherSpin"" -> ""6368_ownerSetEdgeRangeAndPayout"";
""6368_EtherSpin"" -> ""6368_oraclize_setProof"";
""6368_roll"" -> ""6368_oraclize_newRandomDSQuery"";
""6368___callback"" -> ""6368_add"";
""6368_rollLo"" -> ""6368_oraclize_newRandomDSQuery"";
""6368_ownerSetLimits"" -> ""6368_onlyOwner"";
""6368_EtherSpin"" -> ""6368_ownerSetLimits"";
""6368_EtherSpin"" -> ""6368_ownerSetStandardFee"";
""6368___callback"" -> ""6368_onlyOraclize"";
}
"
0x6c602f1798a453f90f249e208e2b64c7c09226f7.sol,Mentoring,"contract Mentoring is Ownable, ReentrancyGuard, CanReclaimToken { using SafeMath for uint256; event BecomeMentor(uint256 indexed mentorId); event BreakMentoring(uint256 indexed mentorId); event ChangeLevelPrice(uint256 indexed mentorId, uint256 newLevelPrice); event Income(address source, uint256 amount); event StartLecture(uint256 indexed lectureId, uint256 indexed mentorId, uint256 indexed studentId, uint256 mentorLevel, uint256 studentLevel, uint256 levelUp, uint256 levelPrice, uint256 startedAt, uint256 endsAt); struct Lecture { uint256 mentorId; uint256 studentId; uint256 mentorLevel; uint256 studentLevel; uint256 levelUp; uint256 levelPrice; uint256 startedAt; uint256 endsAt; }",1,"subgraph cluster_1365_Mentoring {
label=""Mentoring"";
""1365_changeLevelPrice"" [label=""changeLevelPrice""];
""1365_getLastLecture"" [label=""getLastLecture""];
""1365_getLastLectureIdAsStudent"" [label=""getLastLectureIdAsStudent""];
""1365_getLastLectureIdAsMentor"" [label=""getLastLectureIdAsMentor""];
""1365_startLecture"" [label=""startLecture""];
""1365_inLecture"" [label=""inLecture""];
""1365_setFee"" [label=""setFee""];
""1365_lectureExists"" [label=""lectureExists""];
""1365_getMentor"" [label=""getMentor""];
""1365_calcCost"" [label=""calcCost""];
""1365_isMentor"" [label=""isMentor""];
""1365_breakMentoring"" [label=""breakMentoring""];
""1365_inMentoring"" [label=""inMentoring""];
""1365_setLevelUpTime"" [label=""setLevelUpTime""];
""1365_becomeMentor"" [label=""becomeMentor""];
""1365__distributePayment"" [label=""_distributePayment""];
""1365_inStudying"" [label=""inStudying""];
""1365__calcLevelIncrease"" [label=""_calcLevelIncrease""];
""1365_isRaceSuitable"" [label=""isRaceSuitable""];
""1365__getPercent"" [label=""_getPercent""];
""1365_fallback"" [label=""fallback""];
""1365__flushBalance"" [label=""_flushBalance""];
""1365_getLecture"" [label=""getLecture""];
""1365_constructor"" [label=""constructor""];
""1365_startLecture"" -> ""1365_isMentor"";
""1365_setFee"" -> ""1365_onlyOwner"";
""1365_fallback"" -> ""1365__flushBalance"";
""1365_startLecture"" -> ""1365__calcLevelIncrease"";
""1365_changeLevelPrice"" -> ""1365_isMentor"";
""1365_calcCost"" -> ""1365__calcLevelIncrease"";
""1365_startLecture"" -> ""1365_onlyOwnerOf"";
""1365__distributePayment"" -> ""1365__getPercent"";
""1365_getMentor"" -> ""1365_isMentor"";
""1365_inLecture"" -> ""1365_inMentoring"";
""1365_setLevelUpTime"" -> ""1365_onlyOwner"";
""1365_startLecture"" -> ""1365__flushBalance"";
""1365_getLastLecture"" -> ""1365_lectureExists"";
""1365_breakMentoring"" -> ""1365_onlyOwnerOf"";
""1365_getLastLecture"" -> ""1365_getLastLectureIdAsStudent"";
""1365_getLecture"" -> ""1365_lectureExists"";
""1365_inMentoring"" -> ""1365_getLastLectureIdAsMentor"";
""1365_inStudying"" -> ""1365_getLastLectureIdAsStudent"";
""1365_startLecture"" -> ""1365_isRaceSuitable"";
""1365_changeLevelPrice"" -> ""1365_onlyOwnerOf"";
""1365_getLastLecture"" -> ""1365_getLastLectureIdAsMentor"";
""1365_inLecture"" -> ""1365_inStudying"";
""1365_becomeMentor"" -> ""1365_onlyOwnerOf"";
""1365_startLecture"" -> ""1365__distributePayment"";
}
"
0x0595d187cac88f04466371eff3a6b6d1b12fb013.sol,GIFT_1_ETH,contract GIFT_1_ETH { function GetGift(bytes pass) external payable { if(hashPass == keccak256(pass) && now>giftTime) { msg.sender.transfer(this.balance); },1,"subgraph cluster_164_GIFT_1_ETH {
label=""GIFT_1_ETH"";
""164_GetHash"" [label=""GetHash""];
""164_SetPass"" [label=""SetPass""];
""164_GetGift"" [label=""GetGift""];
""164_fallback"" [label=""fallback""];
""164_SetGiftTime"" [label=""SetGiftTime""];
""164_SetReciver"" [label=""SetReciver""];
""164_PassHasBeenSet"" [label=""PassHasBeenSet""];
}
"
0xcdcbb474268703da1b6744c540500e8a2a39e8dc.sol,knf,"contract knf is StandardToken { string public name; string public symbol; mapping(address => uint256) airdroped; uint8 public decimals; uint256 DropedThisWeek; string constant public version = ; uint256 lastWeek; uint256 decimate; uint256 weekly_limit; uint256 air_drop; address control; address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); function availableSupply() public view returns (uint256) { return balances[owner]; }",1,"subgraph cluster_1094_knf {
label=""knf"";
""1094_transfer"" [label=""transfer""];
""1094_transferOwnership"" [label=""transferOwnership""];
""1094_availableSupply"" [label=""availableSupply""];
""1094_changeName"" [label=""changeName""];
""1094_thisweek"" [label=""thisweek""];
""1094_cleanup"" [label=""cleanup""];
""1094_transferFrom"" [label=""transferFrom""];
""1094_balanceOf"" [label=""balanceOf""];
""1094_RecordTransfer"" [label=""RecordTransfer""];
""1094_transferControl"" [label=""transferControl""];
""1094_transfererc20"" [label=""transfererc20""];
""1094_transferBalance"" [label=""transferBalance""];
""1094_knf"" [label=""knf""];
""1094_Award"" [label=""Award""];
""1094_availableAirdrop"" [label=""availableAirdrop""];
""1094_fallback"" [label=""fallback""];
""1094_balanceOf"" -> ""1094_availableAirdrop"";
""1094_transfererc20"" -> ""1094_onlyControl"";
""1094_RecordTransfer"" -> ""1094_thisweek"";
""1094_transfer"" -> ""1094_RecordTransfer"";
""1094_changeName"" -> ""1094_onlyControl"";
""1094_transferControl"" -> ""1094_onlyControl"";
""1094_availableAirdrop"" -> ""1094_thisweek"";
""1094_transfer"" -> ""1094_availableAirdrop"";
""1094_transferFrom"" -> ""1094_availableAirdrop"";
""1094_cleanup"" -> ""1094_onlyControl"";
""1094_Award"" -> ""1094_RecordTransfer"";
""1094_Award"" -> ""1094_onlyControl"";
""1094_transferBalance"" -> ""1094_onlyControl"";
""1094_knf"" -> ""1094_RecordTransfer"";
""1094_transferOwnership"" -> ""1094_onlyControl"";
""1094_transferFrom"" -> ""1094_RecordTransfer"";
}
"
0x55654a38372617aedd583009f76e28700e48fdad.sol,CarnieGamesBlackBox,contract CarnieGamesBlackBox { address public Owner = msg.sender; bytes32 public key = keccak256(block.timestamp); function() public payable{},1,"subgraph cluster_81_CarnieGamesBlackBox {
label=""CarnieGamesBlackBox"";
""81_GetHash"" [label=""GetHash""];
""81_Withdraw"" [label=""Withdraw""];
""81_OpenBox"" [label=""OpenBox""];
""81_fallback"" [label=""fallback""];
}
"
0xa23a42b2bb161b0ab7bbcbd72bea54952e5299fc.sol,zeepay,"contract zeepay is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 1000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 10000; uint256 public tokensPerEth = 15000000e8; uint public target0drop = 1000; uint public progress0drop = 0; address multisig = 0x3c93bcB8dc2b78570B343dB9c6F56397Fe77164b ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_zeepay {
label=""zeepay"";
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_allowance"" [label=""allowance""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdraw"" [label=""withdraw""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_Distribute"" [label=""Distribute""];
""1261_constructor"" [label=""constructor""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_distr"" [label=""distr""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_add"" [label=""add""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_fallback"" [label=""fallback""];
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_add"" -> ""1261_onlyOwner"";
}
"
0x8d46facfb889740a345755e624942257dc87b5ac.sol,UpgradeableToken,"contract UpgradeableToken is Owner, Token { address public migrationAgent; event Upgrade(address indexed from, address indexed to, uint256 value); event UpgradeAgentSet(address agent); function migrate() public { require(migrationAgent != 0); uint value = balances[msg.sender]; balances[msg.sender] = balances[msg.sender].sub(value); totalSupply = totalSupply.sub(value); MigrationAgent(migrationAgent).migrateFrom(msg.sender, value); emit Upgrade(msg.sender, migrationAgent, value); }",1,"subgraph cluster_1017_UpgradeableToken {
label=""UpgradeableToken"";
""1017_fallback"" [label=""fallback""];
""1017_setMigrationAgent"" [label=""setMigrationAgent""];
""1017_migrate"" [label=""migrate""];
""1017_setMigrationAgent"" -> ""1017_onlyOwner"";
""1017_fallback"" -> ""1017_migrate"";
}
"
0x5ab883cfde389e09c623c049939d7553f312ac43.sol,Core,"contract Core is Control { function random(uint256 _min, uint256 _max) public constant returns(uint256) { return uint256(sha3(block.blockhash(block.number - 1))) % (_min + _max) - _min; }",1,"subgraph cluster_978_Core {
label=""Core"";
""978_getAgentsNum"" [label=""getAgentsNum""];
""978_getOverBalanceWEIInfo"" [label=""getOverBalanceWEIInfo""];
""978_withdrawOverBalanceWEI"" [label=""withdrawOverBalanceWEI""];
""978_getAgentBetsSum"" [label=""getAgentBetsSum""];
""978_random"" [label=""random""];
""978__play"" [label=""_play""];
""978_changeGameSettings"" [label=""changeGameSettings""];
""978_withdrawCommissionBalanceWEI"" [label=""withdrawCommissionBalanceWEI""];
""978_bet"" [label=""bet""];
""978_playForcibly"" [label=""playForcibly""];
""978_getBankBalanceWEIInfo"" [label=""getBankBalanceWEIInfo""];
""978_getCommissionBalanceWEIInfo"" [label=""getCommissionBalanceWEIInfo""];
""978_Core"" [label=""Core""];
""978_getAgentBankBalanceWEI"" [label=""getAgentBankBalanceWEI""];
""978_getAgentId"" [label=""getAgentId""];
""978_getAgentAdress"" [label=""getAgentAdress""];
""978_getPositionBetAgent"" [label=""getPositionBetAgent""];
""978_playForcibly"" -> ""978_onlyRun"";
""978_playForcibly"" -> ""978__play"";
""978_playForcibly"" -> ""978_onlyADM"";
""978_bet"" -> ""978__play"";
""978_bet"" -> ""978_getAgentBetsSum"";
""978_changeGameSettings"" -> ""978_onlyADM"";
""978_bet"" -> ""978_getAgentBankBalanceWEI"";
""978_getCommissionBalanceWEIInfo"" -> ""978_onlyADM"";
""978_withdrawCommissionBalanceWEI"" -> ""978_onlyADM"";
""978_bet"" -> ""978_onlyRun"";
""978__play"" -> ""978_random"";
""978_getBankBalanceWEIInfo"" -> ""978_onlyADM"";
""978_getOverBalanceWEIInfo"" -> ""978_onlyADM"";
""978__play"" -> ""978_getAgentBankBalanceWEI"";
""978__play"" -> ""978_getAgentAdress"";
""978_withdrawOverBalanceWEI"" -> ""978_onlyADM"";
""978_bet"" -> ""978_getAgentId"";
""978__play"" -> ""978_getAgentBetsSum"";
}
"
0xd0306dd978c2deced267a29b25290f353149450a.sol,Slaughter3D,contract Slaughter3D is Owned { using SafeMath for uint; struct Stage { uint8 numberOfPlayers; uint256 blocknumber; bool finalized; mapping (uint8 => address) slotXplayer; mapping (address => bool) players; mapping (uint8 => address) setMN; },1,"subgraph cluster_1314_Slaughter3D {
label=""Slaughter3D"";
""1314_currentstageplayer1"" [label=""currentstageplayer1""];
""1314_dividendsOwing"" [label=""dividendsOwing""];
""1314_offerAsSacrificeFromVaultForce"" [label=""offerAsSacrificeFromVaultForce""];
""1314_checkstatus"" [label=""checkstatus""];
""1314_contractownsthismanyP3D"" [label=""contractownsthismanyP3D""];
""1314_withdraw"" [label=""withdraw""];
""1314_myEarnings"" [label=""myEarnings""];
""1314_offerAsSacrificeFromVault"" [label=""offerAsSacrificeFromVault""];
""1314_allocateSurvivorWinnings"" [label=""allocateSurvivorWinnings""];
""1314_DivsToRefundpot"" [label=""DivsToRefundpot""];
""1314_DonateToLosers"" [label=""DonateToLosers""];
""1314_nextonetogetpaid"" [label=""nextonetogetpaid""];
""1314_previousstageplayer2"" [label=""previousstageplayer2""];
""1314_disburse"" [label=""disburse""];
""1314_acceptOffer"" [label=""acceptOffer""];
""1314_currentstageplayer2"" [label=""currentstageplayer2""];
""1314_invalidateStage"" [label=""invalidateStage""];
""1314_legacyStart"" [label=""legacyStart""];
""1314_currentPlayers"" [label=""currentPlayers""];
""1314_Payoutnextrefund"" [label=""Payoutnextrefund""];
""1314_fallback"" [label=""fallback""];
""1314_offerAsSacrifice"" [label=""offerAsSacrifice""];
""1314_tryFinalizeStage"" [label=""tryFinalizeStage""];
""1314_previousstageplayer1"" [label=""previousstageplayer1""];
""1314_previousstageloser"" [label=""previousstageloser""];
""1314_constructor"" [label=""constructor""];
""1314_fetchdivs"" [label=""fetchdivs""];
""1314_offerAsSacrifice"" -> ""1314_tryFinalizeStage"";
""1314_tryFinalizeStage"" -> ""1314_fetchdivs"";
""1314_offerAsSacrificeFromVault"" -> ""1314_acceptOffer"";
""1314_offerAsSacrifice"" -> ""1314_acceptOffer"";
""1314_fetchdivs"" -> ""1314_updateAccount"";
""1314_offerAsSacrificeFromVault"" -> ""1314_isNewToStage"";
""1314_offerAsSacrifice"" -> ""1314_prepareStage"";
""1314_myEarnings"" -> ""1314_hasEarnings"";
""1314_offerAsSacrificeFromVault"" -> ""1314_canPayFromVault"";
""1314_offerAsSacrifice"" -> ""1314_isValidOffer"";
""1314_withdraw"" -> ""1314_hasEarnings"";
""1314_offerAsSacrificeFromVaultForce"" -> ""1314_tryFinalizeStage"";
""1314_offerAsSacrificeFromVault"" -> ""1314_tryFinalizeStage"";
""1314_offerAsSacrifice"" -> ""1314_isNewToStage"";
""1314_legacyStart"" -> ""1314_onlyOwner"";
""1314_offerAsSacrificeFromVault"" -> ""1314_prepareStage"";
""1314_withdraw"" -> ""1314_tryFinalizeStage"";
""1314_tryFinalizeStage"" -> ""1314_allocateSurvivorWinnings"";
""1314_offerAsSacrificeFromVaultForce"" -> ""1314_prepareStage"";
""1314_tryFinalizeStage"" -> ""1314_invalidateStage"";
}
"
0x55654a38372617aedd583009f76e28700e48fdad.sol,CarnieGamesBlackBox,contract CarnieGamesBlackBox { address public Owner = msg.sender; bytes32 public key = keccak256(block.timestamp); function() public payable{},1,"subgraph cluster_81_CarnieGamesBlackBox {
label=""CarnieGamesBlackBox"";
""81_GetHash"" [label=""GetHash""];
""81_Withdraw"" [label=""Withdraw""];
""81_OpenBox"" [label=""OpenBox""];
""81_fallback"" [label=""fallback""];
}
"
0x333b20d643b58263e1558de655fda9cf7d07c401.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1002_RefundVault {
label=""RefundVault"";
""1002_deposit"" [label=""deposit""];
""1002_refund"" [label=""refund""];
""1002_RefundVault"" [label=""RefundVault""];
""1002_enableRefunds"" [label=""enableRefunds""];
""1002_close"" [label=""close""];
""1002_close"" -> ""1002_onlyOwner"";
""1002_enableRefunds"" -> ""1002_onlyOwner"";
""1002_deposit"" -> ""1002_onlyOwner"";
}
"
0x50f37df80a4e804a03275b21f83ebf5d5a668d39.sol,AuctionPotato,"contract AuctionPotato is Ownable { using SafeMath for uint256; string name; uint public startTime; uint public endTime; uint auctionDuration; uint public potato; uint oldPotato; uint oldHighestBindingBid; bool public canceled; uint public highestBindingBid; address public highestBidder; bool blockerPay; bool blockerWithdraw; mapping(address => uint256) public fundsByBidder; bool ownerHasWithdrawn; event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid); event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount); event LogCanceled(); event Withdraw(address owner, uint amount); constructor() public { blockerWithdraw = false; blockerPay = false; highestBindingBid = 3000000000000000; potato = 0; auctionDuration = 3 hours; startTime = 1546794000; endTime = startTime + auctionDuration; name = ; }",1,"subgraph cluster_620_AuctionPotato {
label=""AuctionPotato"";
""620_withdraw"" [label=""withdraw""];
""620_nextNextBid"" [label=""nextNextBid""];
""620_setStartTime"" [label=""setStartTime""];
""620_nextBid"" [label=""nextBid""];
""620_queryAuction"" [label=""queryAuction""];
""620_constructor"" [label=""constructor""];
""620_balance"" [label=""balance""];
""620_cancelAuction"" [label=""cancelAuction""];
""620_placeBid"" [label=""placeBid""];
""620_withdraw"" -> ""620_onlyOwner"";
""620_cancelAuction"" -> ""620_onlyBeforeEnd"";
""620_placeBid"" -> ""620_onlyAfterStart"";
""620_queryAuction"" -> ""620_nextBid"";
""620_cancelAuction"" -> ""620_onlyNotCanceled"";
""620_placeBid"" -> ""620_onlyNotCanceled"";
""620_setStartTime"" -> ""620_onlyOwner"";
""620_cancelAuction"" -> ""620_onlyOwner"";
""620_placeBid"" -> ""620_onlyBeforeEnd"";
}
"
0x7012ef33dcc79a7341ba05cf2c5699eaaa5e0d7d.sol,Transaction,contract Transaction is Ownable { struct TransactionNeoPlace { uint id; address seller; address buyer; bytes16 itemId; bytes8 typeItem; string location; string pictureHash; bytes16 receiptHash; string comment; bytes8 status; uint256 _price; },1,"subgraph cluster_738_Transaction {
label=""Transaction"";
""738_stringToBytes8"" [label=""stringToBytes8""];
""738_getPurchases"" [label=""getPurchases""];
""738_getSales"" [label=""getSales""];
""738_sendAmount"" [label=""sendAmount""];
""738_unlockFunds"" [label=""unlockFunds""];
""738_kill"" [label=""kill""];
""738_getNumberOfTransactions"" [label=""getNumberOfTransactions""];
""738_sendAdditionalFunds"" [label=""sendAdditionalFunds""];
""738_buyItem"" [label=""buyItem""];
""738_unlockFunds"" -> ""738_stringToBytes8"";
""738_kill"" -> ""738_onlyOwner"";
""738_sendAdditionalFunds"" -> ""738_stringToBytes8"";
}
"
0x0e6f6ed4581d25944d8c6a595b9f50e11431b754.sol,PaymentHolder,contract PaymentHolder is Ownable { modifier onlyAllowed() { require(allowed[msg.sender]); _; },1,"subgraph cluster_1744_PaymentHolder {
label=""PaymentHolder"";
""1744_prohibit"" [label=""prohibit""];
""1744_update"" [label=""update""];
""1744_setUpdater"" [label=""setUpdater""];
""1744_withdrawEth"" [label=""withdrawEth""];
""1744_migrate"" [label=""migrate""];
""1744_depositEth"" [label=""depositEth""];
""1744_withdrawToken"" [label=""withdrawToken""];
""1744_allow"" [label=""allow""];
""1744_setUpdater"" -> ""1744_onlyOwner"";
""1744_depositEth"" -> ""1744_onlyAllowed"";
""1744_withdrawEth"" -> ""1744_onlyAllowed"";
""1744_withdrawToken"" -> ""1744_onlyAllowed"";
""1744_update"" -> ""1744_onlyUpdater"";
""1744_prohibit"" -> ""1744_onlyOwner"";
""1744_migrate"" -> ""1744_onlyOwner"";
""1744_allow"" -> ""1744_onlyOwner"";
}
"
0xefe17f088be79ba802b60ea84ebafb255ea18aa4.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_249_AccessService {
label=""AccessService"";
""249_setService"" [label=""setService""];
""249_setFinance"" [label=""setFinance""];
""249_withdraw"" [label=""withdraw""];
}
"
0xeb156f1722c1357518fe2599bd8362fb19a56757.sol,Lucky_2020,"contract Lucky_2020 is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; uint public deadline = now + 1000 * 1 days; uint public round2 = now + 500 * 1 days; uint public round1 = now + 500 * 1 days; uint256 public totalSupply = 2020000000000e0; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 2020000000000e0; uint public target0drop = 0; uint public progress0drop = 0; address multisig = 0xf72a54D87E7d787167c39c7BCe4680E40253B69b; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1288_Lucky_2020 {
label=""Lucky_2020"";
""1288_balanceOf"" [label=""balanceOf""];
""1288_allowance"" [label=""allowance""];
""1288_getTokens"" [label=""getTokens""];
""1288_distr"" [label=""distr""];
""1288_add"" [label=""add""];
""1288_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1288_withdraw"" [label=""withdraw""];
""1288_burn"" [label=""burn""];
""1288_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1288_withdrawAll"" [label=""withdrawAll""];
""1288_getTokenBalance"" [label=""getTokenBalance""];
""1288_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1288_transferOwnership"" [label=""transferOwnership""];
""1288_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1288_finishDistribution"" [label=""finishDistribution""];
""1288_transfer"" [label=""transfer""];
""1288_constructor"" [label=""constructor""];
""1288_fallback"" [label=""fallback""];
""1288_approve"" [label=""approve""];
""1288_Distribute"" [label=""Distribute""];
""1288_transferFrom"" [label=""transferFrom""];
""1288_DistributeAirdrop"" -> ""1288_Distribute"";
""1288_transferOwnership"" -> ""1288_onlyOwner"";
""1288_finishDistribution"" -> ""1288_canDistr"";
""1288_withdrawAll"" -> ""1288_onlyOwner"";
""1288_finishDistribution"" -> ""1288_onlyOwner"";
""1288_transferFrom"" -> ""1288_onlyPayloadSize"";
""1288_fallback"" -> ""1288_getTokens"";
""1288_burn"" -> ""1288_onlyOwner"";
""1288_withdraw"" -> ""1288_onlyOwner"";
""1288_constructor"" -> ""1288_distr"";
""1288_Distribute"" -> ""1288_onlyOwner"";
""1288_DistributeAirdropMultiple"" -> ""1288_Distribute"";
""1288_getTokens"" -> ""1288_canDistr"";
""1288_getTokens"" -> ""1288_distr"";
""1288_updateTokensPerEth"" -> ""1288_onlyOwner"";
""1288_DistributeAirdropMultiple"" -> ""1288_onlyOwner"";
""1288_add"" -> ""1288_onlyOwner"";
""1288_transfer"" -> ""1288_onlyPayloadSize"";
""1288_DistributeAirdrop"" -> ""1288_onlyOwner"";
""1288_withdrawForeignTokens"" -> ""1288_onlyOwner"";
""1288_distr"" -> ""1288_canDistr"";
}
"
0x6c4fe5b5b3f8a60fd5d036940afef65c73e4d2ae.sol,MCFitCrowdsale,"contract MCFitCrowdsale is Ownable, Crowdsale, MintableToken { using SafeMath for uint256; enum State {Active, Closed}",1,"subgraph cluster_1523_MCFitCrowdsale {
label=""MCFitCrowdsale"";
""1523_MCFitCrowdsale"" [label=""MCFitCrowdsale""];
""1523_fallback"" [label=""fallback""];
""1523_getDeposited"" [label=""getDeposited""];
""1523_buyTokens"" [label=""buyTokens""];
""1523_getTotalAmountOfTokens"" [label=""getTotalAmountOfTokens""];
""1523_deposit"" [label=""deposit""];
""1523_removeContract"" [label=""removeContract""];
""1523_mintToSpecialFund"" [label=""mintToSpecialFund""];
""1523_close"" [label=""close""];
""1523_changeRateUSD"" [label=""changeRateUSD""];
""1523_changeCheckDate"" [label=""changeCheckDate""];
""1523_changeCheckDate"" -> ""1523_onlyOwner"";
""1523_buyTokens"" -> ""1523_deposit"";
""1523_MCFitCrowdsale"" -> ""1523_Crowdsale"";
""1523_close"" -> ""1523_finishMinting"";
""1523_changeRateUSD"" -> ""1523_onlyOwner"";
""1523_buyTokens"" -> ""1523_mint"";
""1523_close"" -> ""1523_hasEnded"";
""1523_close"" -> ""1523_onlyOwner"";
""1523_fallback"" -> ""1523_buyTokens"";
""1523_buyTokens"" -> ""1523_getTotalAmountOfTokens"";
""1523_close"" -> ""1523_finalize"";
""1523_MCFitCrowdsale"" -> ""1523_mintToSpecialFund"";
""1523_mintToSpecialFund"" -> ""1523_onlyOwner"";
""1523_removeContract"" -> ""1523_onlyOwner"";
}
"
0x000000002bb43c83ece652d161ad0fa862129a2c.sol,AccountRegistry,"contract AccountRegistry is AccountRegistryInterface, TokenRescue { uint256 constant public registrationDeposit = 1 finney; uint256 constant public proposalCensorshipFee = 50 finney; address constant public burn = 0x000000003Ffc15cd9eA076d7ec40B8f516367Ca1; Vote public constant token = Vote(0x000000002647e16d9BaB9e46604D75591D289277); uint8 constant UNCONTACTED = 0; uint8 constant PROPOSER = 1; uint8 constant VOTER = 2; uint8 constant PENDING_PROPOSAL = 4; uint8 constant PROPOSAL = 8; uint8 constant PENDING_CABAL = 16; uint8 constant CABAL = 32; uint8 constant BOARD = 64; struct Account { uint256 lastAccess; uint8 membership; address appointer; address denouncer; address voucher; address devoucher; }",1,"subgraph cluster_103_AccountRegistryInterface {
label=""AccountRegistryInterface"";
""103_canVoteOnProposal"" [label=""canVoteOnProposal""];
}
"
0x549b38e8e5fb1ba4acd4187d8b7c8a04deb53206.sol,LotteryAdmin,"contract LotteryAdmin { address public owner; address public admin; address public proposedOwner; address public ethereumLottery; uint public dailyAdminAllowance; uint public lastAllowancePaymentTimestamp; uint public nextProfile; event Deposit(address indexed _from, uint _value); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_282_LotteryAdmin {
label=""LotteryAdmin"";
""282_setLottery"" [label=""setLottery""];
""282_destruct"" [label=""destruct""];
""282_proposeOwner"" [label=""proposeOwner""];
""282_setConfiguration"" [label=""setConfiguration""];
""282_withdraw"" [label=""withdraw""];
""282_allowsAllowance"" [label=""allowsAllowance""];
""282_acceptOwnership"" [label=""acceptOwnership""];
""282_requestAllowance"" [label=""requestAllowance""];
""282_needsInitialization"" [label=""needsInitialization""];
""282_setAdmin"" [label=""setAdmin""];
""282_fallback"" [label=""fallback""];
""282_initLottery"" [label=""initLottery""];
""282_LotteryAdmin"" [label=""LotteryAdmin""];
""282_requestAllowance"" -> ""282_allowsAllowance"";
""282_setConfiguration"" -> ""282_onlyOwner"";
""282_withdraw"" -> ""282_onlyOwner"";
""282_destruct"" -> ""282_onlyOwner"";
""282_setLottery"" -> ""282_onlyOwner"";
""282_requestAllowance"" -> ""282_onlyAdminOrOwner"";
""282_proposeOwner"" -> ""282_onlyOwner"";
""282_setAdmin"" -> ""282_onlyOwner"";
""282_initLottery"" -> ""282_onlyAdminOrOwner"";
}
"
0x5838f878000fe44b6f6c677bbf839e12f097c147.sol,Q_GAME,contract Q_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_Q_GAME {
label=""Q_GAME"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_set_game"" [label=""set_game""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_Try"" [label=""Try""];
}
"
0x46822ac3bc32db7ebd9845da3fe0886f824e9edf.sol,EBSCSale,"contract EBSCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 6000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; EBSCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1561_EBSCSale {
label=""EBSCSale"";
""1561_checkFundingCap"" [label=""checkFundingCap""];
""1561_checkFundingGoal"" [label=""checkFundingGoal""];
""1561_terminate"" [label=""terminate""];
""1561_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1561_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1561_convertToMiniEbsc"" [label=""convertToMiniEbsc""];
""1561_EBSCSale"" [label=""EBSCSale""];
""1561_changeStartTime"" [label=""changeStartTime""];
""1561_changeEndTime"" [label=""changeEndTime""];
""1561_fallback"" [label=""fallback""];
""1561_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1561_safeWithdrawal"" [label=""safeWithdrawal""];
""1561_setRate"" [label=""setRate""];
""1561_currentTime"" [label=""currentTime""];
""1561_fallback"" -> ""1561_afterStartTime"";
""1561_changeStartTime"" -> ""1561_onlyOwner"";
""1561_ownerAllocateTokens"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_nonReentrant"";
""1561_changeEndTime"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_beforeDeadline"";
""1561_ownerUnlockFund"" -> ""1561_onlyOwner"";
""1561_terminate"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_checkFundingCap"";
""1561_ownerUnlockFund"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_whenNotPaused"";
""1561_safeWithdrawal"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_checkFundingGoal"";
""1561_setRate"" -> ""1561_onlyOwner"";
""1561_EBSCSale"" -> ""1561_setRate"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingGoal"";
""1561_ownerAllocateTokens"" -> ""1561_onlyOwner"";
""1561_safeWithdrawal"" -> ""1561_nonReentrant"";
""1561_ownerSafeWithdrawal"" -> ""1561_onlyOwner"";
""1561_ownerSafeWithdrawal"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_saleNotClosed"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingCap"";
}
"
0xd7f4aea7c2b8d633d88c449eab91d7d5ef89427e.sol,EDAX,"contract EDAX is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 500000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 1000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0x15CA3e11C9887FAC531FC8a2C95394F2c84E654a; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_EDAX {
label=""EDAX"";
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_burn"" [label=""burn""];
""1261_approve"" [label=""approve""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_transfer"" [label=""transfer""];
""1261_distr"" [label=""distr""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_allowance"" [label=""allowance""];
""1261_add"" [label=""add""];
""1261_constructor"" [label=""constructor""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_fallback"" [label=""fallback""];
""1261_withdraw"" [label=""withdraw""];
""1261_Distribute"" [label=""Distribute""];
""1261_getTokens"" -> ""1261_distr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_distr"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
}
"
0x6bd26bb09c992e09d2156b48f723e56e52eead9c.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1282_MiniMeToken {
label=""MiniMeToken"";
""1282_doTransfer"" [label=""doTransfer""];
""1282_isContract"" [label=""isContract""];
""1282_fallback"" [label=""fallback""];
""1282_destroyTokens"" [label=""destroyTokens""];
""1282_balanceOf"" [label=""balanceOf""];
""1282_updateValueAtNow"" [label=""updateValueAtNow""];
""1282_approveAndCall"" [label=""approveAndCall""];
""1282_getValueAt"" [label=""getValueAt""];
""1282_createCloneToken"" [label=""createCloneToken""];
""1282_transfer"" [label=""transfer""];
""1282_generateTokens"" [label=""generateTokens""];
""1282_approve"" [label=""approve""];
""1282_MiniMeToken"" [label=""MiniMeToken""];
""1282_allowance"" [label=""allowance""];
""1282_balanceOfAt"" [label=""balanceOfAt""];
""1282_transferFrom"" [label=""transferFrom""];
""1282_claimTokens"" [label=""claimTokens""];
""1282_min"" [label=""min""];
""1282_totalSupplyAt"" [label=""totalSupplyAt""];
""1282_totalSupply"" [label=""totalSupply""];
""1282_enableTransfers"" [label=""enableTransfers""];
""1282_balanceOfAt"" -> ""1282_getValueAt"";
""1282_destroyTokens"" -> ""1282_totalSupply"";
""1282_totalSupplyAt"" -> ""1282_min"";
""1282_generateTokens"" -> ""1282_updateValueAtNow"";
""1282_enableTransfers"" -> ""1282_onlyController"";
""1282_destroyTokens"" -> ""1282_onlyController"";
""1282_approve"" -> ""1282_isContract"";
""1282_totalSupply"" -> ""1282_totalSupplyAt"";
""1282_fallback"" -> ""1282_isContract"";
""1282_balanceOfAt"" -> ""1282_min"";
""1282_doTransfer"" -> ""1282_isContract"";
""1282_transfer"" -> ""1282_doTransfer"";
""1282_totalSupplyAt"" -> ""1282_getValueAt"";
""1282_generateTokens"" -> ""1282_onlyController"";
""1282_doTransfer"" -> ""1282_balanceOfAt"";
""1282_destroyTokens"" -> ""1282_balanceOf"";
""1282_destroyTokens"" -> ""1282_updateValueAtNow"";
""1282_approveAndCall"" -> ""1282_approve"";
""1282_transferFrom"" -> ""1282_doTransfer"";
""1282_doTransfer"" -> ""1282_updateValueAtNow"";
""1282_balanceOf"" -> ""1282_balanceOfAt"";
""1282_generateTokens"" -> ""1282_totalSupply"";
""1282_generateTokens"" -> ""1282_balanceOf"";
""1282_claimTokens"" -> ""1282_onlyController"";
}
"
0xe3dd9bb9022c805660a2cd5914f89e92014229c1.sol,go_to_play,contract go_to_play { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_go_to_play {
label=""go_to_play"";
""143_StopGame"" [label=""StopGame""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_Activate"" [label=""Activate""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
""143_fallback"" [label=""fallback""];
}
"
0xcdf35c3fe4ccfacb3b1bbedfe71ca3a5ff6f2db1.sol,GenericCrowdsale,"contract GenericCrowdsale is Ownable { using SafeMath for uint256; enum State { Initialized, PreIco, PreIcoFinished, Ico, IcoFinished}",1,"subgraph cluster_2437_GenericCrowdsale {
label=""GenericCrowdsale"";
""2437_sendDevTokens"" [label=""sendDevTokens""];
""2437_sendAdvisorsTokens"" [label=""sendAdvisorsTokens""];
""2437_withdrawFunding"" [label=""withdrawFunding""];
""2437_finishTime"" [label=""finishTime""];
""2437_fallback"" [label=""fallback""];
""2437_preIco"" [label=""preIco""];
""2437_ico"" [label=""ico""];
""2437_checkGoals"" [label=""checkGoals""];
""2437_tokenFallback"" [label=""tokenFallback""];
""2437_claimRefund"" [label=""claimRefund""];
""2437_finishSale"" [label=""finishSale""];
""2437_getTime"" [label=""getTime""];
""2437_foreignPurchase"" [label=""foreignPurchase""];
""2437_initDiscounts"" [label=""initDiscounts""];
""2437_emergencyUnpause"" [label=""emergencyUnpause""];
""2437_emergencyPause"" [label=""emergencyPause""];
""2437_buyTokens"" [label=""buyTokens""];
""2437_successed"" [label=""successed""];
""2437_getDiscountOf"" [label=""getDiscountOf""];
""2437_GenericCrowdsale"" [label=""GenericCrowdsale""];
""2437_ceilTokens"" [label=""ceilTokens""];
""2437_withdrawFunding"" -> ""2437_onlyOwner"";
""2437_fallback"" -> ""2437_checkGoals"";
""2437_buyTokens"" -> ""2437_getDiscountOf"";
""2437_foreignPurchase"" -> ""2437_onlyOwner"";
""2437_foreignPurchase"" -> ""2437_buyTokens"";
""2437_emergencyPause"" -> ""2437_onlyOwner"";
""2437_buyTokens"" -> ""2437_getTime"";
""2437_fallback"" -> ""2437_sellActive"";
""2437_ico"" -> ""2437_onlyOwner"";
""2437_ico"" -> ""2437_initDiscounts"";
""2437_preIco"" -> ""2437_initDiscounts"";
""2437_withdrawFunding"" -> ""2437_successed"";
""2437_foreignPurchase"" -> ""2437_sellActive"";
""2437_sendDevTokens"" -> ""2437_onlyOwner"";
""2437_foreignPurchase"" -> ""2437_checkGoals"";
""2437_fallback"" -> ""2437_buyTokens"";
""2437_sendAdvisorsTokens"" -> ""2437_onlyOwner"";
""2437_sendAdvisorsTokens"" -> ""2437_successed"";
""2437_claimRefund"" -> ""2437_goalNotReached"";
""2437_buyTokens"" -> ""2437_ceilTokens"";
""2437_preIco"" -> ""2437_onlyOwner"";
""2437_finishSale"" -> ""2437_onlyOwner"";
""2437_emergencyUnpause"" -> ""2437_onlyOwner"";
""2437_sendDevTokens"" -> ""2437_successed"";
}
"
0xf1171e1e8df34ab97832342c7cbf04d9121a1ac3.sol,CSportsContest,"contract CSportsContest is CSportsAuth, CSportsContestBase { enum ContestStatus { Invalid, Active, Scoring, Paying, Paid, Canceled }",1,"subgraph cluster_3016_CSportsContest {
label=""CSportsContest"";
""3016__computeCut"" [label=""_computeCut""];
""3016_cancelContest"" [label=""cancelContest""];
""3016_setTeamContractAddress"" [label=""setTeamContractAddress""];
""3016_getContest"" [label=""getContest""];
""3016_getContestTeamCount"" [label=""getContestTeamCount""];
""3016_numWinnersToPay"" [label=""numWinnersToPay""];
""3016_unpause"" [label=""unpause""];
""3016_getIndexForTeamId"" [label=""getIndexForTeamId""];
""3016_payWinners"" [label=""payWinners""];
""3016_prepareToScore"" [label=""prepareToScore""];
""3016_releaseTeams"" [label=""releaseTeams""];
""3016_pause"" [label=""pause""];
""3016_scoreTeams"" [label=""scoreTeams""];
""3016_authorizedFundsAvailable"" [label=""authorizedFundsAvailable""];
""3016_exitContest"" [label=""exitContest""];
""3016_createContest"" [label=""createContest""];
""3016_closeContest"" [label=""closeContest""];
""3016_prepareToPayWinners"" [label=""prepareToPayWinners""];
""3016_getContestTeam"" [label=""getContestTeam""];
""3016_constructor"" [label=""constructor""];
""3016__authorizePayment"" [label=""_authorizePayment""];
""3016_getWinningPosition"" [label=""getWinningPosition""];
""3016_enterContest"" [label=""enterContest""];
""3016_getTotalAuthorizedForPayment"" [label=""getTotalAuthorizedForPayment""];
""3016_updateContestTeam"" [label=""updateContestTeam""];
""3016_transferApprovedFunds"" [label=""transferApprovedFunds""];
""3016_updateContestTeam"" -> ""3016_whenNotPaused"";
""3016_createContest"" -> ""3016_whenNotPaused"";
""3016_unpause"" -> ""3016_whenPaused"";
""3016_exitContest"" -> ""3016__authorizePayment"";
""3016_closeContest"" -> ""3016__authorizePayment"";
""3016_pause"" -> ""3016_onlyCLevel"";
""3016_enterContest"" -> ""3016_whenNotPaused"";
""3016_unpause"" -> ""3016_onlyCEO"";
""3016_releaseTeams"" -> ""3016__authorizePayment"";
""3016_payWinners"" -> ""3016__authorizePayment"";
""3016_setTeamContractAddress"" -> ""3016_onlyCEO"";
""3016_cancelContest"" -> ""3016__authorizePayment"";
""3016_pause"" -> ""3016_whenNotPaused"";
""3016_closeContest"" -> ""3016__computeCut"";
}
"
0x6f91e584f4c150951386b133e21aa769c8b7d060.sol,BigbomTokenSale,"contract BigbomTokenSale { address public admin; address public bigbomMultiSigWallet; BigbomToken public token; uint public raisedWei; bool public haltSale; uint public openSaleStartTime; uint public openSaleEndTime; BigbomContributorWhiteList public list; mapping(address=>uint) public participated; using SafeMath for uint; function BigbomTokenSale( address _admin, address _bigbomMultiSigWallet, BigbomContributorWhiteList _whilteListContract, uint _publicSaleStartTime, uint _publicSaleEndTime, BigbomToken _token) public { require (_publicSaleStartTime < _publicSaleEndTime); require (_admin != address(0x0)); require (_bigbomMultiSigWallet != address(0x0)); require (_whilteListContract != address(0x0)); require (_token != address(0x0)); admin = _admin; bigbomMultiSigWallet = _bigbomMultiSigWallet; list = _whilteListContract; openSaleStartTime = _publicSaleStartTime; openSaleEndTime = _publicSaleEndTime; token = _token; }",1,"subgraph cluster_2101_BigbomTokenSale {
label=""BigbomTokenSale"";
""2101_checkMaxCap"" [label=""checkMaxCap""];
""2101_debugBuy"" [label=""debugBuy""];
""2101_getBonus"" [label=""getBonus""];
""2101_saleStarted"" [label=""saleStarted""];
""2101_fallback"" [label=""fallback""];
""2101_contributorMinCap"" [label=""contributorMinCap""];
""2101_BigbomTokenSale"" [label=""BigbomTokenSale""];
""2101_finalizeSale"" [label=""finalizeSale""];
""2101_saleEnded"" [label=""saleEnded""];
""2101_setHaltSale"" [label=""setHaltSale""];
""2101_contributorMaxCap"" [label=""contributorMaxCap""];
""2101_sendETHToMultiSig"" [label=""sendETHToMultiSig""];
""2101_emergencyDrain"" [label=""emergencyDrain""];
""2101_buy"" [label=""buy""];
""2101_buy"" -> ""2101_saleStarted"";
""2101_fallback"" -> ""2101_buy"";
""2101_buy"" -> ""2101_contributorMinCap"";
""2101_emergencyDrain"" -> ""2101_saleEnded"";
""2101_finalizeSale"" -> ""2101_saleEnded"";
""2101_buy"" -> ""2101_checkMaxCap"";
""2101_debugBuy"" -> ""2101_sendETHToMultiSig"";
""2101_checkMaxCap"" -> ""2101_contributorMaxCap"";
""2101_emergencyDrain"" -> ""2101_sendETHToMultiSig"";
""2101_buy"" -> ""2101_sendETHToMultiSig"";
""2101_buy"" -> ""2101_getBonus"";
""2101_buy"" -> ""2101_saleEnded"";
}
"
0xbf2000b42c1ba2eb9e5163a0b7e2fe987ed124b4.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_processTransaction"" [label=""processTransaction""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_pullBalance"" [label=""pullBalance""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_fallback"" -> ""928_refundTransaction"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_processTransaction"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
}
"
0xc80205befdb86a1891019969001e90b064d5735a.sol,MILO,"contract MILO is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 950000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 100000000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0xCf7Ac628f8A0fa38059BF77b0134efaD8bF329A3; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_MILO {
label=""MILO"";
""1261_burn"" [label=""burn""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_add"" [label=""add""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_constructor"" [label=""constructor""];
""1261_Distribute"" [label=""Distribute""];
""1261_getTokens"" [label=""getTokens""];
""1261_distr"" [label=""distr""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_transfer"" [label=""transfer""];
""1261_withdraw"" [label=""withdraw""];
""1261_allowance"" [label=""allowance""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_getTokens"" -> ""1261_distr"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
}
"
0x217aff4ee5bc1dfcabd8d5c3a36e0b430b02ab9d.sol,ETher_game,contract ETher_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETher_game {
label=""ETher_game"";
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x8d46facfb889740a345755e624942257dc87b5ac.sol,Mortal,contract Mortal is Owner { function close() external onlyOwner { selfdestruct(owner); },1,"subgraph cluster_106_Mortal {
label=""Mortal"";
""106_close"" [label=""close""];
""106_close"" -> ""106_onlyOwner"";
}
"
0x025dce2d39a46296766db7cac8c322e8f59cd5d9.sol,EthToSmthSwaps,contract EthToSmthSwaps { using SafeMath for uint; address public owner; address public ratingContractAddress; uint256 SafeTime = 1 hours; struct Swap { bytes32 secret; bytes20 secretHash; uint256 createdAt; uint256 balance; },1,"subgraph cluster_679_EthToSmthSwaps {
label=""EthToSmthSwaps"";
""679_withdr"" [label=""withdr""];
""679_withdraw"" [label=""withdraw""];
""679_getSecret"" [label=""getSecret""];
""679_close"" [label=""close""];
""679_abort"" [label=""abort""];
""679_checkSign"" [label=""checkSign""];
""679_clean"" [label=""clean""];
""679_getBalance"" [label=""getBalance""];
""679_sign"" [label=""sign""];
""679_setReputationAddress"" [label=""setReputationAddress""];
""679_createSwap"" [label=""createSwap""];
""679_refund"" [label=""refund""];
""679_constructor"" [label=""constructor""];
""679_abort"" -> ""679_clean"";
""679_refund"" -> ""679_clean"";
""679_close"" -> ""679_clean"";
}
"
0x6d074dfa6111404ee8be2c9f024e32c9fffda1b7.sol,CrowdsaleToken,"contract CrowdsaleToken is StandardToken, Configurable, Ownable { enum Stages { none, icoStart, icoEnd }",1,"subgraph cluster_852_CrowdsaleToken {
label=""CrowdsaleToken"";
""852_startIco"" [label=""startIco""];
""852_endIco"" [label=""endIco""];
""852_constructor"" [label=""constructor""];
""852_finalizeIco"" [label=""finalizeIco""];
""852_fallback"" [label=""fallback""];
""852_startIco"" -> ""852_onlyOwner"";
""852_finalizeIco"" -> ""852_onlyOwner"";
""852_finalizeIco"" -> ""852_endIco"";
}
"
0x32e78bdc108565c3f3811a8dc00da797b6c96dfe.sol,AddressWarsBeta,"contract AddressWarsBeta { address public dev; uint256 constant devTax = 2; uint256 constant enlistingFee = 0; uint256 constant wageringFee = 0; uint256 constant CLAIM_LIMIT = 10; uint256 constant MAX_UNIQUE_CARDS_PER_ADDRESS = 8; uint256 private _seed; enum TYPE { NORMAL, FIRE, WATER, NATURE }",1,"subgraph cluster_4886_AddressWarsBeta {
label=""AddressWarsBeta"";
""4886_wagerCardForAmount"" [label=""wagerCardForAmount""];
""4886_generateCardsFromClaimForOpponent"" [label=""generateCardsFromClaimForOpponent""];
""4886_getAllCardsAddress"" [label=""getAllCardsAddress""];
""4886_withdrawAll"" [label=""withdrawAll""];
""4886_ownerHasCard"" [label=""ownerHasCard""];
""4886_getAllCardsAttack"" [label=""getAllCardsAttack""];
""4886_getAllCardsType"" [label=""getAllCardsType""];
""4886_cancelWagerOfCard"" [label=""cancelWagerOfCard""];
""4886_cardAddressExists"" [label=""cardAddressExists""];
""4886_tmpShuffleSeed"" [label=""tmpShuffleSeed""];
""4886_transferCardTo"" [label=""transferCardTo""];
""4886_tmpQuerySeed"" [label=""tmpQuerySeed""];
""4886_ownerCountOfCard"" [label=""ownerCountOfCard""];
""4886_getAllCardsModifierSecondaryVal"" [label=""getAllCardsModifierSecondaryVal""];
""4886_getAllOwnersClaimPriceOfCard"" [label=""getAllOwnersClaimPriceOfCard""];
""4886_ownerCanClaimCard"" [label=""ownerCanClaimCard""];
""4886_getCard"" [label=""getCard""];
""4886_calculateAdjustedFiguresForBattle"" [label=""calculateAdjustedFiguresForBattle""];
""4886_getAllCardAddressesOfOwner"" [label=""getAllCardAddressesOfOwner""];
""4886_getBalanceOfSender"" [label=""getBalanceOfSender""];
""4886_getAllCardsModifierPrimaryVal"" [label=""getAllCardsModifierPrimaryVal""];
""4886_getTotalUniqueCards"" [label=""getTotalUniqueCards""];
""4886_getAllCardsModifier"" [label=""getAllCardsModifier""];
""4886_getAllCardsClaimContender"" [label=""getAllCardsClaimContender""];
""4886_shuffleSeed"" [label=""shuffleSeed""];
""4886_getAllCardAddressesPriceOfOwner"" [label=""getAllCardAddressesPriceOfOwner""];
""4886_transferCard"" [label=""transferCard""];
""4886_getCardIndexOfOwner"" [label=""getCardIndexOfOwner""];
""4886_getAllOwnersOfCard"" [label=""getAllOwnersOfCard""];
""4886_getAllCardAddressesCountOfOwner"" [label=""getAllCardAddressesCountOfOwner""];
""4886_cumulativeIndexOf"" [label=""cumulativeIndexOf""];
""4886_AddressWarsBeta"" [label=""AddressWarsBeta""];
""4886_getCheapestCardWager"" [label=""getCheapestCardWager""];
""4886_getAllCardsLowestPrice"" [label=""getAllCardsLowestPrice""];
""4886_getAllCardsDefence"" [label=""getAllCardsDefence""];
""4886_getAllCardsForClaim"" [label=""getAllCardsForClaim""];
""4886_indexOfCardAddress"" [label=""indexOfCardAddress""];
""4886_getAllCardsClaimed"" [label=""getAllCardsClaimed""];
""4886_enlist"" [label=""enlist""];
""4886_attemptToClaimCard"" [label=""attemptToClaimCard""];
""4886_withdrawAmount"" [label=""withdrawAmount""];
""4886_getOwnerOfCardsCheapestWager"" [label=""getOwnerOfCardsCheapestWager""];
""4886_updateCardStatistics"" [label=""updateCardStatistics""];
""4886_ownerHasCardSimple"" [label=""ownerHasCardSimple""];
""4886_querySeed"" [label=""querySeed""];
""4886_getCardIndexOfOwner"" -> ""4886_ownerHasCardSimple"";
""4886_getAllOwnersClaimPriceOfCard"" -> ""4886_cardAddressExists"";
""4886_indexOfCardAddress"" -> ""4886_cardAddressExists"";
""4886_transferCard"" -> ""4886_cardAddressExists"";
""4886_AddressWarsBeta"" -> ""4886_shuffleSeed"";
""4886_getCheapestCardWager"" -> ""4886_cardAddressExists"";
""4886_cancelWagerOfCard"" -> ""4886_getOwnerOfCardsCheapestWager"";
""4886_shuffleSeed"" -> ""4886_tmpShuffleSeed"";
""4886_querySeed"" -> ""4886_tmpQuerySeed"";
""4886_generateCardsFromClaimForOpponent"" -> ""4886_ownerHasCardSimple"";
""4886_transferCard"" -> ""4886_ownerHasCardSimple"";
""4886_updateCardStatistics"" -> ""4886_getCheapestCardWager"";
""4886_getAllCardAddressesPriceOfOwner"" -> ""4886_cardAddressExists"";
""4886_ownerCanClaimCard"" -> ""4886_ownerHasCardSimple"";
""4886_attemptToClaimCard"" -> ""4886_generateCardsFromClaimForOpponent"";
""4886_ownerHasCard"" -> ""4886_ownerCountOfCard"";
""4886_enlist"" -> ""4886_tmpQuerySeed"";
""4886_generateCardsFromClaimForOpponent"" -> ""4886_cardAddressExists"";
""4886_getAllCardAddressesCountOfOwner"" -> ""4886_cardAddressExists"";
""4886_attemptToClaimCard"" -> ""4886_transferCard"";
""4886_cancelWagerOfCard"" -> ""4886_updateCardStatistics"";
""4886_ownerCanClaimCard"" -> ""4886_cardAddressExists"";
""4886_wagerCardForAmount"" -> ""4886_updateCardStatistics"";
""4886_attemptToClaimCard"" -> ""4886_ownerCanClaimCard"";
""4886_getAllOwnersOfCard"" -> ""4886_cardAddressExists"";
""4886_getAllCardAddressesPriceOfOwner"" -> ""4886_getOwnerOfCardsCheapestWager"";
""4886_generateCardsFromClaimForOpponent"" -> ""4886_tmpQuerySeed"";
""4886_wagerCardForAmount"" -> ""4886_cardAddressExists"";
""4886_cancelWagerOfCard"" -> ""4886_cardAddressExists"";
""4886_enlist"" -> ""4886_cardAddressExists"";
""4886_attemptToClaimCard"" -> ""4886_updateCardStatistics"";
""4886_transferCardTo"" -> ""4886_transferCard"";
""4886_getCard"" -> ""4886_cardAddressExists"";
""4886_transferCard"" -> ""4886_getCardIndexOfOwner"";
""4886_getAllCardAddressesOfOwner"" -> ""4886_cardAddressExists"";
""4886_tmpQuerySeed"" -> ""4886_tmpShuffleSeed"";
""4886_getOwnerOfCardsCheapestWager"" -> ""4886_ownerHasCard"";
""4886_enlist"" -> ""4886_cumulativeIndexOf"";
""4886_attemptToClaimCard"" -> ""4886_calculateAdjustedFiguresForBattle"";
""4886_generateCardsFromClaimForOpponent"" -> ""4886_tmpShuffleSeed"";
""4886_ownerHasCard"" -> ""4886_cardAddressExists"";
""4886_ownerCanClaimCard"" -> ""4886_getCheapestCardWager"";
""4886_ownerCountOfCard"" -> ""4886_cardAddressExists"";
""4886_ownerHasCardSimple"" -> ""4886_ownerHasCard"";
""4886_enlist"" -> ""4886_tmpShuffleSeed"";
""4886_getCardIndexOfOwner"" -> ""4886_cardAddressExists"";
""4886_transferCard"" -> ""4886_getOwnerOfCardsCheapestWager"";
""4886_getAllCardAddressesCountOfOwner"" -> ""4886_ownerCountOfCard"";
""4886_wagerCardForAmount"" -> ""4886_getOwnerOfCardsCheapestWager"";
}
"
0x1cf6949f4b661018b3195f3ff98effe12f587263.sol,AtlantToken,"contract AtlantToken { string public name = ; string public symbol = ; uint8 public constant decimals = 8; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function AtlantToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_AtlantToken {
label=""AtlantToken"";
""401_transfer"" [label=""transfer""];
""401_transferFrom"" [label=""transferFrom""];
""401_totalSupply"" [label=""totalSupply""];
""401_AtlantToken"" [label=""AtlantToken""];
""401_killContract"" [label=""killContract""];
""401_fallback"" [label=""fallback""];
""401_balanceOf"" [label=""balanceOf""];
""401_mintTo"" [label=""mintTo""];
""401_changeOwner"" [label=""changeOwner""];
""401_approve"" [label=""approve""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
}
"
0x44f12955189e3f01be5daf1dd9002ee4d774f42b.sol,AfterSchoolCrowdsaleToken,"contract AfterSchoolCrowdsaleToken is StandardToken, Ownable { string public standard = ; string public name = ; string public symbol = ; uint public decimals = 18; address public multisig = 0x8Dab59292A76114776B4933aD6F1246Bf647aB90; uint PRICE = 5800; struct ContributorData { uint contributionAmount; uint tokensIssued; }",1,"subgraph cluster_1460_AfterSchoolCrowdsaleToken {
label=""AfterSchoolCrowdsaleToken"";
""1460_setMultisigAddress"" [label=""setMultisigAddress""];
""1460_AfterSchoolCrowdsaleToken"" [label=""AfterSchoolCrowdsaleToken""];
""1460_getPrice"" [label=""getPrice""];
""1460_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""1460_fallback"" [label=""fallback""];
""1460_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""1460_calculateEthToAfterschool"" [label=""calculateEthToAfterschool""];
""1460_createTokens"" [label=""createTokens""];
""1460_transferToContributor"" [label=""transferToContributor""];
""1460_getAmountBonus"" [label=""getAmountBonus""];
""1460_getStageBonus"" [label=""getStageBonus""];
""1460_refundTransaction"" [label=""refundTransaction""];
""1460_calculateEthToAfterschool"" -> ""1460_getStageBonus"";
""1460_setMultisigAddress"" -> ""1460_onlyOwner"";
""1460_createTokens"" -> ""1460_transferToContributor"";
""1460_calculateEthToAfterschool"" -> ""1460_getPrice"";
""1460_fallback"" -> ""1460_refundTransaction"";
""1460_fallback"" -> ""1460_checkCrowdsaleState"";
""1460_calculateEthToAfterschool"" -> ""1460_getAmountBonus"";
""1460_fallback"" -> ""1460_createTokens"";
""1460_createTokens"" -> ""1460_calculateEthToAfterschool"";
""1460_batchReturnEthIfFailed"" -> ""1460_onlyOwner"";
}
"
0xd88577ed936819807612c0d4a17ade05adcdf1d3.sol,ZTRTokenSale,contract ZTRTokenSale { using SafeMath for uint; mapping (address => uint) public balanceOf; mapping (address => uint) public ethBalance; address public owner; address ZTRTokenContract; uint public fundingGoal; uint public fundingMax; uint public amountRaised; uint public start; uint public duration; uint public deadline; uint public unlockTime; uint public ZTR_ETH_initial_price; uint public ZTR_ETH_extra_price; uint public remaining; modifier admin { if (msg.sender == owner) _; },1,"subgraph cluster_544_ZTRTokenSale {
label=""ZTRTokenSale"";
""544_fallback"" [label=""fallback""];
""544_withdrawBeneficiary"" [label=""withdrawBeneficiary""];
""544_setStart"" [label=""setStart""];
""544_withdraw"" [label=""withdraw""];
""544_setDeadline"" [label=""setDeadline""];
""544_ZTRTokenSale"" [label=""ZTRTokenSale""];
""544_suicide"" [label=""suicide""];
""544_withdrawBeneficiary"" -> ""544_afterDeadline"";
""544_withdraw"" -> ""544_afterDeadline"";
""544_suicide"" -> ""544_afterUnlock"";
""544_setDeadline"" -> ""544_admin"";
""544_withdrawBeneficiary"" -> ""544_admin"";
""544_setStart"" -> ""544_admin"";
}
"
0x0002325fcaaac6ebf1254a626589147bde1a2394.sol,HorseyPilot,"contract HorseyPilot { using SafeMath for uint256; event NewProposal(uint8 methodId, uint parameter, address proposer); event ProposalPassed(uint8 methodId, uint parameter, address proposer); uint8 constant votingThreshold = 2; uint256 constant proposalLife = 7 days; uint256 constant proposalCooldown = 1 days; uint256 cooldownStart; address public jokerAddress; address public knightAddress; address public paladinAddress; address[3] public voters; uint8 constant public knightEquity = 40; uint8 constant public paladinEquity = 10; address public exchangeAddress; address public tokenAddress; mapping(address => uint) internal _cBalance; struct Proposal{ address proposer; uint256 timestamp; uint256 parameter; uint8 methodId; address[] yay; address[] nay; }",1,"subgraph cluster_3096_HorseyPilot {
label=""HorseyPilot"";
""3096_transferKnightOwnership"" [label=""transferKnightOwnership""];
""3096__updateDistribution"" [label=""_updateDistribution""];
""3096_voteOnProposal"" [label=""voteOnProposal""];
""3096_constructor"" [label=""constructor""];
""3096_withdrawCeo"" [label=""withdrawCeo""];
""3096_transferJokerOwnership"" [label=""transferJokerOwnership""];
""3096_transferPaladinOwnership"" [label=""transferPaladinOwnership""];
""3096_deployChildren"" [label=""deployChildren""];
""3096_syncFunds"" [label=""syncFunds""];
""3096_getNobleBalance"" [label=""getNobleBalance""];
""3096_makeProposal"" [label=""makeProposal""];
""3096__moveBalance"" [label=""_moveBalance""];
""3096__doProposal"" [label=""_doProposal""];
""3096_transferKnightOwnership"" -> ""3096_validAddress"";
""3096_makeProposal"" -> ""3096_proposalAvailable"";
""3096_makeProposal"" -> ""3096_cooledDown"";
""3096_transferPaladinOwnership"" -> ""3096_validAddress"";
""3096_voteOnProposal"" -> ""3096__doProposal"";
""3096_transferJokerOwnership"" -> ""3096_validAddress"";
""3096_withdrawCeo"" -> ""3096_onlyCLevelAccess"";
""3096_getNobleBalance"" -> ""3096_onlyCLevelAccess"";
""3096_voteOnProposal"" -> ""3096_onlyVoters"";
""3096_voteOnProposal"" -> ""3096_notVoted"";
""3096_makeProposal"" -> ""3096_onlyCLevelAccess"";
""3096_withdrawCeo"" -> ""3096_validAddress"";
""3096_transferPaladinOwnership"" -> ""3096__moveBalance"";
""3096_withdrawCeo"" -> ""3096__updateDistribution"";
""3096__moveBalance"" -> ""3096_validAddress"";
""3096_transferJokerOwnership"" -> ""3096__moveBalance"";
""3096_transferKnightOwnership"" -> ""3096__moveBalance"";
""3096_voteOnProposal"" -> ""3096_proposalPending"";
}
"
0x009ef15c147ff4c0eb373e1abd2f4d184e5cb916.sol,CampaignContract,contract CampaignContract { using SafeMath for uint256; address internal owner; uint256 public minUSD; uint256 public maxUSD; uint256 public maxContribution; uint256 public minContribution; struct KYCObject { bytes32 phone; bytes32 name; bytes32 occupation; bytes32 addressOne; bytes32 addressTwo; },1,"subgraph cluster_1022_CampaignContract {
label=""CampaignContract"";
""1022_getName"" [label=""getName""];
""1022_retrieveAssets"" [label=""retrieveAssets""];
""1022_changeOwner"" [label=""changeOwner""];
""1022_getAmountContributed"" [label=""getAmountContributed""];
""1022_getAddressTwo"" [label=""getAddressTwo""];
""1022_acceptContribution"" [label=""acceptContribution""];
""1022_getOccupation"" [label=""getOccupation""];
""1022_CampaignContract"" [label=""CampaignContract""];
""1022_getAmountAttempted"" [label=""getAmountAttempted""];
""1022_getPhone"" [label=""getPhone""];
""1022_getPotentialAmount"" [label=""getPotentialAmount""];
""1022_killContract"" [label=""killContract""];
""1022_rejectContribution"" [label=""rejectContribution""];
""1022_getAddressOne"" [label=""getAddressOne""];
""1022_withdrawToWallet"" [label=""withdrawToWallet""];
""1022_contribute"" [label=""contribute""];
""1022_resetKYC"" [label=""resetKYC""];
""1022_verifyKYC"" [label=""verifyKYC""];
""1022_withdrawContribution"" [label=""withdrawContribution""];
""1022_changeLimits"" [label=""changeLimits""];
""1022_retrieveAssets"" -> ""1022_onlyOwner"";
""1022_changeLimits"" -> ""1022_onlyOwner"";
""1022_rejectContribution"" -> ""1022_onlyOwner"";
""1022_withdrawToWallet"" -> ""1022_onlyOwner"";
""1022_acceptContribution"" -> ""1022_onlyOwner"";
""1022_killContract"" -> ""1022_onlyOwner"";
""1022_resetKYC"" -> ""1022_hasKYCInfo"";
""1022_resetKYC"" -> ""1022_onlyOwner"";
""1022_acceptContribution"" -> ""1022_hasKYCInfo"";
""1022_withdrawContribution"" -> ""1022_hasKYCInfo"";
""1022_contribute"" -> ""1022_hasKYCInfo"";
""1022_changeOwner"" -> ""1022_onlyOwner"";
}
"
0x0dcb6d4a156206da89177aa53c891e5a87d9da45.sol,ALFA_Quiz,contract ALFA_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ALFA_Quiz {
label=""ALFA_Quiz"";
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x35b5abaedeed12c63e04029120fa6bb084342b4d.sol,BLITZ_GAME,contract BLITZ_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_BLITZ_GAME {
label=""BLITZ_GAME"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_set_game"" [label=""set_game""];
""132_Try"" [label=""Try""];
}
"
0x70bf9df6967dc96156e76cc43b928a7ef02e159a.sol,X_GAME,contract X_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_X_GAME {
label=""X_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_StopGame"" [label=""StopGame""];
}
"
0x0838524d3ba16e7f9433ab7f914847f1d38b53e8.sol,RTDAirDrop,"contract RTDAirDrop is owned { address public token_address; string public detail; string public website; event AirDropCoin(address target, uint256 amount); constructor() public { owner = msg.sender; }",1,"subgraph cluster_136_RTDAirDrop {
label=""RTDAirDrop"";
""136_fallback"" [label=""fallback""];
""136_setDetail"" [label=""setDetail""];
""136_setWebsite"" [label=""setWebsite""];
""136_constructor"" [label=""constructor""];
""136_setToken"" [label=""setToken""];
""136_airDrop"" [label=""airDrop""];
""136_withdrawEther"" [label=""withdrawEther""];
""136_setDetail"" -> ""136_onlyOwner"";
""136_withdrawEther"" -> ""136_onlyOwner"";
""136_airDrop"" -> ""136_onlyOwner"";
""136_setToken"" -> ""136_onlyOwner"";
""136_setWebsite"" -> ""136_onlyOwner"";
}
"
0x72f1295238a6a0d95631ad9f81b829c486861057.sol,Simpl_quiz,contract Simpl_quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Simpl_quiz {
label=""Simpl_quiz"";
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x9adc8a707ee86497461472c4055e039d99e70d6d.sol,Iou_Token,"contract Iou_Token is ERC20Interface { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public constant maxTokens = 800*10**6*10**18; uint256 public constant ownerSupply = maxTokens*30/100; uint256 _totalSupply = ownerSupply; uint256 public constant token_price = 10**18*1/800; uint256 public pre_ico_start = 1528416000; uint256 public ico_start = 1531008000; uint256 public ico_finish = 1541635200; uint public constant minValuePre = 10**18*1/1000000; uint public constant minValue = 10**18*1/1000000; uint public constant maxValue = 3000*10**18; uint public coef = 102; using SafeMath for uint; address public owner; address public moderator; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; mapping(address => uint256) public orders_sell_amount; mapping(address => uint256) public orders_sell_price; address[] public orders_sell_list; event Order_sell(address indexed _owner, uint256 _max_amount, uint256 _price); event Order_execute(address indexed _from, address indexed _to, uint256 _amount, uint256 _price); modifier onlyOwner() { if (msg.sender != owner) { throw; }",1,"subgraph cluster_1550_Iou_Token {
label=""Iou_Token"";
""1550_balanceOf"" [label=""balanceOf""];
""1550_transferFrom"" [label=""transferFrom""];
""1550_get_orders_sell_amount"" [label=""get_orders_sell_amount""];
""1550_approve"" [label=""approve""];
""1550_orders_sell_total"" [label=""orders_sell_total""];
""1550_order_sell"" [label=""order_sell""];
""1550_changeModerator"" [label=""changeModerator""];
""1550_fallback"" [label=""fallback""];
""1550_change_pre_ico_start"" [label=""change_pre_ico_start""];
""1550_change_coef"" [label=""change_coef""];
""1550_change_ico_start"" [label=""change_ico_start""];
""1550_totalSupply"" [label=""totalSupply""];
""1550_withdraw"" [label=""withdraw""];
""1550_order_buy"" [label=""order_buy""];
""1550_changeOwner"" [label=""changeOwner""];
""1550_tokens_buy"" [label=""tokens_buy""];
""1550_transfer"" [label=""transfer""];
""1550_allowance"" [label=""allowance""];
""1550_change_ico_finish"" [label=""change_ico_finish""];
""1550_Iou_Token"" [label=""Iou_Token""];
""1550_order_buy"" -> ""1550_get_orders_sell_amount"";
""1550_change_ico_start"" -> ""1550_onlyModerator"";
""1550_fallback"" -> ""1550_tokens_buy"";
""1550_change_coef"" -> ""1550_onlyOwner"";
""1550_withdraw"" -> ""1550_onlyOwner"";
""1550_get_orders_sell_amount"" -> ""1550_balanceOf"";
""1550_changeModerator"" -> ""1550_onlyOwner"";
""1550_change_ico_finish"" -> ""1550_onlyModerator"";
""1550_change_pre_ico_start"" -> ""1550_onlyModerator"";
""1550_changeOwner"" -> ""1550_onlyOwner"";
}
"
0x01d28329619796bae733e849696f80a764422700.sol,Token,contract Token is TokenI { using SafeMath for uint256; address public owner; uint256 public maximumToken = 10 * 10**8 * 10**18; struct FreezeInfo { address user; uint256 amount; },1,"subgraph cluster_1057_Token {
label=""Token"";
""1057_transferFrom"" [label=""transferFrom""];
""1057_enableTransfers"" [label=""enableTransfers""];
""1057_changeOwner"" [label=""changeOwner""];
""1057_approveAndCall"" [label=""approveAndCall""];
""1057_unFreeze"" [label=""unFreeze""];
""1057_fallback"" [label=""fallback""];
""1057_transfer"" [label=""transfer""];
""1057_claimTokens"" [label=""claimTokens""];
""1057_generateTokens"" [label=""generateTokens""];
""1057_freeze"" [label=""freeze""];
""1057_balanceOf"" [label=""balanceOf""];
""1057_Token"" [label=""Token""];
""1057_approve"" [label=""approve""];
""1057_isContract"" [label=""isContract""];
""1057_destroyTokens"" [label=""destroyTokens""];
""1057_fallback"" -> ""1057_isContract"";
""1057_transfer"" -> ""1057_moreThanZero"";
""1057_transferFrom"" -> ""1057_realUser"";
""1057_freeze"" -> ""1057_moreThanZero"";
""1057_approve"" -> ""1057_moreThanZero"";
""1057_freeze"" -> ""1057_onlyController"";
""1057_generateTokens"" -> ""1057_onlyController"";
""1057_enableTransfers"" -> ""1057_onlyController"";
""1057_approveAndCall"" -> ""1057_approve"";
""1057_claimTokens"" -> ""1057_onlyController"";
""1057_unFreeze"" -> ""1057_onlyController"";
""1057_transfer"" -> ""1057_realUser"";
""1057_destroyTokens"" -> ""1057_onlyController"";
""1057_transferFrom"" -> ""1057_moreThanZero"";
""1057_changeOwner"" -> ""1057_onlyOwner"";
}
"
0xd871a7ce9bcf9cfbefbca3ede0ce53ba1787dfc9.sol,try_to_play,contract try_to_play { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_try_to_play {
label=""try_to_play"";
""143_NewQuestion"" [label=""NewQuestion""];
""143_fallback"" [label=""fallback""];
""143_StopGame"" [label=""StopGame""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
""143_ActivateContract"" [label=""ActivateContract""];
}
"
0x6a3cfb5aeefb9138a28b28f3852a8fee81216df3.sol,RxEALSaleContract,"contract RxEALSaleContract { using SafeMath for uint256; RxEALTokenContract public token; uint256 public startTime = 1520856000; uint256 public endTime = 1523448000; address public wallet1 = 0x56E4e5d451dF045827e214FE10bBF99D730d9683; address public wallet2 = 0x8C0988711E60CfF153359Ab6CFC8d45565C6ce79; address public wallet3 = 0x0EdF5c34ddE2573f162CcfEede99EeC6aCF1c2CB; address public wallet4 = 0xcBdC5eE000f77f3bCc0eFeF0dc47d38911CBD45B; uint256 public tier_rate_1 = 1800; uint256 public tier_cap_1 = 4800000; uint256 public tier_rate_2 = 1440; uint256 public tier_cap_2 = 14400000; uint256 public tier_rate_3 = 1320; uint256 public tier_cap_3 = 14400000; uint256 public tier_rate_4 = 1200; uint256 public tier_cap_4 = 14400000; uint256 public hard_cap; uint8 public current_tier = 1; uint256 public weiRaised; uint256 public soldTokens; uint256 public current_tier_sold_tokens; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 tokens); function RxEALSaleContract() { token = RxEALTokenContract(0xD6682Db9106e0cfB530B697cA0EcDC8F5597CD15); tier_cap_1 = tier_cap_1 * (10 ** token.decimals()); tier_cap_2 = tier_cap_2 * (10 ** token.decimals()); tier_cap_3 = tier_cap_3 * (10 ** token.decimals()); tier_cap_4 = tier_cap_4 * (10 ** token.decimals()); hard_cap = tier_cap_1 + tier_cap_2 + tier_cap_3 + tier_cap_4; }",1,"subgraph cluster_1190_RxEALSaleContract {
label=""RxEALSaleContract"";
""1190_validPurchase"" [label=""validPurchase""];
""1190_fallback"" [label=""fallback""];
""1190_RxEALSaleContract"" [label=""RxEALSaleContract""];
""1190_tier_action"" [label=""tier_action""];
""1190_forwardFunds"" [label=""forwardFunds""];
""1190_hasEnded"" [label=""hasEnded""];
""1190_buyTokens"" [label=""buyTokens""];
""1190_fallback"" -> ""1190_buyTokens"";
""1190_buyTokens"" -> ""1190_forwardFunds"";
""1190_buyTokens"" -> ""1190_tier_action"";
""1190_buyTokens"" -> ""1190_validPurchase"";
}
"
0x65171746deb1d6eee256455f77c350eceda34ae2.sol,AgroNest,"contract AgroNest is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 10000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 10000000e18; uint public target0drop = 1000; uint public progress0drop = 0; address multisig = 0x37351E066e89621B0356b970be2C7e3CAE979a9D ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_AgroNest {
label=""AgroNest"";
""1261_distr"" [label=""distr""];
""1261_fallback"" [label=""fallback""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_withdraw"" [label=""withdraw""];
""1261_constructor"" [label=""constructor""];
""1261_Distribute"" [label=""Distribute""];
""1261_allowance"" [label=""allowance""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_add"" [label=""add""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_getTokens"" [label=""getTokens""];
""1261_approve"" [label=""approve""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_transfer"" [label=""transfer""];
""1261_burn"" [label=""burn""];
""1261_constructor"" -> ""1261_distr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_getTokens"" -> ""1261_distr"";
}
"
0x87cdabc87128476d84462eb9c5a67a7acfa7889e.sol,RefundEscrow,"contract RefundEscrow is Ownable, ConditionalEscrow { enum State { Active, Refunding, Closed }",1,"subgraph cluster_512_RefundEscrow {
label=""RefundEscrow"";
""512_beneficiaryWithdraw"" [label=""beneficiaryWithdraw""];
""512_close"" [label=""close""];
""512_deposit"" [label=""deposit""];
""512_enableRefunds"" [label=""enableRefunds""];
""512_constructor"" [label=""constructor""];
""512_withdrawalAllowed"" [label=""withdrawalAllowed""];
""512_enableRefunds"" -> ""512_onlyOwner"";
""512_deposit"" -> ""512_deposit"";
""512_close"" -> ""512_onlyOwner"";
}
"
0x35d76c3db8e826907d2a977500b54b3914ecc020.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_784_RefundVault {
label=""RefundVault"";
""784_refund"" [label=""refund""];
""784_RefundVault"" [label=""RefundVault""];
""784_enableRefunds"" [label=""enableRefunds""];
""784_deposit"" [label=""deposit""];
""784_close"" [label=""close""];
""784_enableRefunds"" -> ""784_onlyOwner"";
""784_close"" -> ""784_onlyOwner"";
""784_deposit"" -> ""784_onlyOwner"";
}
"
0x7275f61c3abfba3596ae71f7128bdc3b0fc01fa9.sol,Ownable,contract Ownable { address public owner; address public bot; function Ownable() public { owner = msg.sender; },1,"subgraph cluster_78_Ownable {
label=""Ownable"";
""78_kill"" [label=""kill""];
""78_changeBot"" [label=""changeBot""];
""78_Ownable"" [label=""Ownable""];
""78_changeOwner"" [label=""changeOwner""];
""78_changeOwner"" -> ""78_onlyOwner"";
""78_kill"" -> ""78_onlyOwner"";
""78_changeBot"" -> ""78_onlyOwner"";
}
"
0xece0429a5130ebe0616363939067eefca4fbaceb.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1095_MiniMeToken {
label=""MiniMeToken"";
""1095_balanceOfAt"" [label=""balanceOfAt""];
""1095_MiniMeToken"" [label=""MiniMeToken""];
""1095_destroyTokens"" [label=""destroyTokens""];
""1095_isContract"" [label=""isContract""];
""1095_fallback"" [label=""fallback""];
""1095_totalSupplyAt"" [label=""totalSupplyAt""];
""1095_createCloneToken"" [label=""createCloneToken""];
""1095_getValueAt"" [label=""getValueAt""];
""1095_allowance"" [label=""allowance""];
""1095_transferFrom"" [label=""transferFrom""];
""1095_enableTransfers"" [label=""enableTransfers""];
""1095_doTransfer"" [label=""doTransfer""];
""1095_transfer"" [label=""transfer""];
""1095_approve"" [label=""approve""];
""1095_min"" [label=""min""];
""1095_approveAndCall"" [label=""approveAndCall""];
""1095_balanceOf"" [label=""balanceOf""];
""1095_generateTokens"" [label=""generateTokens""];
""1095_claimTokens"" [label=""claimTokens""];
""1095_totalSupply"" [label=""totalSupply""];
""1095_updateValueAtNow"" [label=""updateValueAtNow""];
""1095_generateTokens"" -> ""1095_totalSupply"";
""1095_approve"" -> ""1095_isContract"";
""1095_transferFrom"" -> ""1095_doTransfer"";
""1095_transfer"" -> ""1095_doTransfer"";
""1095_balanceOfAt"" -> ""1095_getValueAt"";
""1095_totalSupplyAt"" -> ""1095_getValueAt"";
""1095_claimTokens"" -> ""1095_onlyController"";
""1095_approveAndCall"" -> ""1095_approve"";
""1095_doTransfer"" -> ""1095_balanceOfAt"";
""1095_destroyTokens"" -> ""1095_onlyController"";
""1095_totalSupply"" -> ""1095_totalSupplyAt"";
""1095_doTransfer"" -> ""1095_isContract"";
""1095_destroyTokens"" -> ""1095_totalSupply"";
""1095_fallback"" -> ""1095_isContract"";
""1095_generateTokens"" -> ""1095_onlyController"";
""1095_totalSupplyAt"" -> ""1095_min"";
""1095_generateTokens"" -> ""1095_updateValueAtNow"";
""1095_generateTokens"" -> ""1095_balanceOf"";
""1095_balanceOfAt"" -> ""1095_min"";
""1095_destroyTokens"" -> ""1095_updateValueAtNow"";
""1095_enableTransfers"" -> ""1095_onlyController"";
""1095_doTransfer"" -> ""1095_updateValueAtNow"";
""1095_destroyTokens"" -> ""1095_balanceOf"";
""1095_balanceOf"" -> ""1095_balanceOfAt"";
}
"
0x347925b22d0217a4797f470faa2afebbdb150b7a.sol,Nanotechnology,"contract Nanotechnology is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 860000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 2000000e1; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0x5F6557aF8922D4031Ae506d2F02595039D16Ab5a; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Nanotechnology {
label=""Nanotechnology"";
""1261_withdraw"" [label=""withdraw""];
""1261_distr"" [label=""distr""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_add"" [label=""add""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_constructor"" [label=""constructor""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_transfer"" [label=""transfer""];
""1261_getTokens"" [label=""getTokens""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_burn"" [label=""burn""];
""1261_Distribute"" [label=""Distribute""];
""1261_allowance"" [label=""allowance""];
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_add"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
}
"
0xf0a0116885943f5466cb50ed8cf50b15b3d45801.sol,EthercraftFarm,"contract EthercraftFarm is Ownable, ReentrancyGuard, Destructible, TokenDestructible, Pausable { using SafeMath for uint8; using SafeMath for uint256; event Prepped(address indexed shop, address indexed object, uint256 iterations); event Reapped(address indexed object, uint256 balance); mapping (address => mapping (address => uint256)) public balanceOfToken; mapping (address => uint256) public totalOfToken; function() payable public { }",1,"subgraph cluster_687_EthercraftFarm {
label=""EthercraftFarm"";
""687_totalOfToken"" [label=""totalOfToken""];
""687_prep"" [label=""prep""];
""687_fallback"" [label=""fallback""];
""687_reap"" [label=""reap""];
""687_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""687_prep"" -> ""687_whenNotPaused"";
""687_prep"" -> ""687_nonReentrant"";
""687_reap"" -> ""687_nonReentrant"";
""687_transferAnyERC20Token"" -> ""687_onlyOwner"";
}
"
0xf17a9ad24372faaa27f0bb684e13413a3de84c4b.sol,SmokeCoinV_2,"contract SmokeCoinV_2 is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 200 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 150 * 1 days; uint256 public totalSupply = 754654e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 22220000000; uint public target0drop = 4222; uint public progress0drop = 0; address multisig = 0xb7Ef2B8514A27bf63e8F5397Fd6DBDCa95809883; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_SmokeCoinV_2 {
label=""SmokeCoinV_2"";
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_getTokens"" [label=""getTokens""];
""1263_transfer"" [label=""transfer""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_burn"" [label=""burn""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_constructor"" [label=""constructor""];
""1263_Distribute"" [label=""Distribute""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_approve"" [label=""approve""];
""1263_fallback"" [label=""fallback""];
""1263_allowance"" [label=""allowance""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_withdraw"" [label=""withdraw""];
""1263_add"" [label=""add""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_distr"" [label=""distr""];
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_getTokens"" -> ""1263_distr"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_constructor"" -> ""1263_distr"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
}
"
0x1c3bed5bd4b0e6a8389efd0d2876f948a907ab5b.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1092_MiniMeToken {
label=""MiniMeToken"";
""1092_balanceOfAt"" [label=""balanceOfAt""];
""1092_allowance"" [label=""allowance""];
""1092_generateTokens"" [label=""generateTokens""];
""1092_transfer"" [label=""transfer""];
""1092_getValueAt"" [label=""getValueAt""];
""1092_approve"" [label=""approve""];
""1092_createCloneToken"" [label=""createCloneToken""];
""1092_min"" [label=""min""];
""1092_transferFrom"" [label=""transferFrom""];
""1092_totalSupply"" [label=""totalSupply""];
""1092_isContract"" [label=""isContract""];
""1092_claimTokens"" [label=""claimTokens""];
""1092_balanceOf"" [label=""balanceOf""];
""1092_MiniMeToken"" [label=""MiniMeToken""];
""1092_totalSupplyAt"" [label=""totalSupplyAt""];
""1092_fallback"" [label=""fallback""];
""1092_approveAndCall"" [label=""approveAndCall""];
""1092_enableTransfers"" [label=""enableTransfers""];
""1092_updateValueAtNow"" [label=""updateValueAtNow""];
""1092_destroyTokens"" [label=""destroyTokens""];
""1092_doTransfer"" [label=""doTransfer""];
""1092_destroyTokens"" -> ""1092_totalSupply"";
""1092_approve"" -> ""1092_isContract"";
""1092_balanceOfAt"" -> ""1092_min"";
""1092_doTransfer"" -> ""1092_isContract"";
""1092_generateTokens"" -> ""1092_onlyController"";
""1092_generateTokens"" -> ""1092_updateValueAtNow"";
""1092_doTransfer"" -> ""1092_updateValueAtNow"";
""1092_totalSupplyAt"" -> ""1092_getValueAt"";
""1092_enableTransfers"" -> ""1092_onlyController"";
""1092_destroyTokens"" -> ""1092_updateValueAtNow"";
""1092_totalSupply"" -> ""1092_totalSupplyAt"";
""1092_transferFrom"" -> ""1092_doTransfer"";
""1092_claimTokens"" -> ""1092_onlyController"";
""1092_balanceOf"" -> ""1092_balanceOfAt"";
""1092_generateTokens"" -> ""1092_balanceOf"";
""1092_doTransfer"" -> ""1092_balanceOfAt"";
""1092_approveAndCall"" -> ""1092_approve"";
""1092_destroyTokens"" -> ""1092_balanceOf"";
""1092_fallback"" -> ""1092_isContract"";
""1092_transfer"" -> ""1092_doTransfer"";
""1092_destroyTokens"" -> ""1092_onlyController"";
""1092_generateTokens"" -> ""1092_totalSupply"";
""1092_balanceOfAt"" -> ""1092_getValueAt"";
""1092_totalSupplyAt"" -> ""1092_min"";
}
"
0x01d28329619796bae733e849696f80a764422700.sol,Token,contract Token is TokenI { using SafeMath for uint256; address public owner; uint256 public maximumToken = 10 * 10**8 * 10**18; struct FreezeInfo { address user; uint256 amount; },1,"subgraph cluster_1057_Token {
label=""Token"";
""1057_transferFrom"" [label=""transferFrom""];
""1057_enableTransfers"" [label=""enableTransfers""];
""1057_changeOwner"" [label=""changeOwner""];
""1057_approveAndCall"" [label=""approveAndCall""];
""1057_unFreeze"" [label=""unFreeze""];
""1057_fallback"" [label=""fallback""];
""1057_transfer"" [label=""transfer""];
""1057_claimTokens"" [label=""claimTokens""];
""1057_generateTokens"" [label=""generateTokens""];
""1057_freeze"" [label=""freeze""];
""1057_balanceOf"" [label=""balanceOf""];
""1057_Token"" [label=""Token""];
""1057_approve"" [label=""approve""];
""1057_isContract"" [label=""isContract""];
""1057_destroyTokens"" [label=""destroyTokens""];
""1057_fallback"" -> ""1057_isContract"";
""1057_transfer"" -> ""1057_moreThanZero"";
""1057_transferFrom"" -> ""1057_realUser"";
""1057_freeze"" -> ""1057_moreThanZero"";
""1057_approve"" -> ""1057_moreThanZero"";
""1057_freeze"" -> ""1057_onlyController"";
""1057_generateTokens"" -> ""1057_onlyController"";
""1057_enableTransfers"" -> ""1057_onlyController"";
""1057_approveAndCall"" -> ""1057_approve"";
""1057_claimTokens"" -> ""1057_onlyController"";
""1057_unFreeze"" -> ""1057_onlyController"";
""1057_transfer"" -> ""1057_realUser"";
""1057_destroyTokens"" -> ""1057_onlyController"";
""1057_transferFrom"" -> ""1057_moreThanZero"";
""1057_changeOwner"" -> ""1057_onlyOwner"";
}
"
0x0dd88f1d1cbc9bcdda5ddd9e9fc86e8183f8f3b9.sol,XenoxCoin,"contract XenoxCoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 100000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000e18; uint public target0drop = 1000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event DistrRestarted(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1274_XenoxCoin {
label=""XenoxCoin"";
""1274_transferOwnership"" [label=""transferOwnership""];
""1274_getTokens"" [label=""getTokens""];
""1274_finishDistribution"" [label=""finishDistribution""];
""1274_reDistribution"" [label=""reDistribution""];
""1274_constructor"" [label=""constructor""];
""1274_withdraw"" [label=""withdraw""];
""1274_allowance"" [label=""allowance""];
""1274_balanceOf"" [label=""balanceOf""];
""1274_getTokenBalance"" [label=""getTokenBalance""];
""1274_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1274_transfer"" [label=""transfer""];
""1274_approve"" [label=""approve""];
""1274_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1274_Distribute"" [label=""Distribute""];
""1274_withdrawAll"" [label=""withdrawAll""];
""1274_burn"" [label=""burn""];
""1274_add"" [label=""add""];
""1274_distr"" [label=""distr""];
""1274_fallback"" [label=""fallback""];
""1274_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1274_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1274_transferFrom"" [label=""transferFrom""];
""1274_finishDistribution"" -> ""1274_onlyOwner"";
""1274_distr"" -> ""1274_canDistr"";
""1274_burn"" -> ""1274_onlyOwner"";
""1274_withdrawForeignTokens"" -> ""1274_onlyOwner"";
""1274_updateTokensPerEth"" -> ""1274_onlyOwner"";
""1274_constructor"" -> ""1274_distr"";
""1274_transferOwnership"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_canDistr"";
""1274_withdrawAll"" -> ""1274_onlyOwner"";
""1274_Distribute"" -> ""1274_onlyOwner"";
""1274_fallback"" -> ""1274_getTokens"";
""1274_getTokens"" -> ""1274_distr"";
""1274_DistributeAirdrop"" -> ""1274_onlyOwner"";
""1274_transfer"" -> ""1274_onlyPayloadSize"";
""1274_DistributeAirdropMultiple"" -> ""1274_Distribute"";
""1274_finishDistribution"" -> ""1274_canDistr"";
""1274_reDistribution"" -> ""1274_onlyOwner"";
""1274_withdraw"" -> ""1274_onlyOwner"";
""1274_add"" -> ""1274_onlyOwner"";
""1274_transferFrom"" -> ""1274_onlyPayloadSize"";
""1274_DistributeAirdropMultiple"" -> ""1274_onlyOwner"";
""1274_DistributeAirdrop"" -> ""1274_Distribute"";
""1274_reDistribution"" -> ""1274_canDistr"";
}
"
0xd3a97d46fd0c28a5a035a4e0813afe7c2c1376bd.sol,InterCrypto,"contract InterCrypto is Ownable, myUsingOracalize { struct Transaction { address returnAddress; uint amount; }",1,"subgraph cluster_1446_InterCrypto {
label=""InterCrypto"";
""1446___callback"" [label=""__callback""];
""1446_kill"" [label=""kill""];
""1446_nibbleToChar"" [label=""nibbleToChar""];
""1446_InterCrypto"" [label=""InterCrypto""];
""1446_recover"" [label=""recover""];
""1446_concatBytes"" [label=""concatBytes""];
""1446_fallback"" [label=""fallback""];
""1446_cancelTransaction"" [label=""cancelTransaction""];
""1446_sendToOtherBlockchain1"" [label=""sendToOtherBlockchain1""];
""1446_getInterCryptoPrice"" [label=""getInterCryptoPrice""];
""1446_engine"" [label=""engine""];
""1446_sendToOtherBlockchain2"" [label=""sendToOtherBlockchain2""];
""1446_isValidateParameter"" [label=""isValidateParameter""];
""1446_createShapeShiftTransactionPost"" [label=""createShapeShiftTransactionPost""];
""1446_addressToBytes"" [label=""addressToBytes""];
""1446_createShapeShiftTransactionPost"" -> ""1446_addressToBytes"";
""1446_engine"" -> ""1446_oraclize_query"";
""1446_engine"" -> ""1446_getInterCryptoPrice"";
""1446_sendToOtherBlockchain1"" -> ""1446_engine"";
""1446_createShapeShiftTransactionPost"" -> ""1446_concatBytes"";
""1446___callback"" -> ""1446_parseAddr"";
""1446_addressToBytes"" -> ""1446_nibbleToChar"";
""1446_sendToOtherBlockchain2"" -> ""1446_engine"";
""1446_engine"" -> ""1446_isValidateParameter"";
""1446_getInterCryptoPrice"" -> ""1446_oraclize_getPrice"";
""1446_kill"" -> ""1446_onlyOwner"";
""1446_engine"" -> ""1446_createShapeShiftTransactionPost"";
}
"
0xee58ee0b1519bb47801812a3a9c83ab600c63d81.sol,MerchantWallet,"contract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted { string constant VERSION = ; address public merchantAccount; address public merchantFundAddress; bytes32 public merchantIdHash; mapping (string=>string) profileMap; mapping (string=>string) paymentSettingsMap; mapping (string=>uint32) compositeReputationMap; uint8 public constant REPUTATION_DECIMALS = 4; modifier onlyMerchant() { require(msg.sender == merchantAccount); _; }",1,"subgraph cluster_996_MerchantWallet {
label=""MerchantWallet"";
""996_profile"" [label=""profile""];
""996_merchantIdHash"" [label=""merchantIdHash""];
""996_withdrawTo"" [label=""withdrawTo""];
""996_withdrawAllToExchange"" [label=""withdrawAllToExchange""];
""996_setCompositeReputation"" [label=""setCompositeReputation""];
""996_withdrawToExchange"" [label=""withdrawToExchange""];
""996_compositeReputation"" [label=""compositeReputation""];
""996_merchantFundAddress"" [label=""merchantFundAddress""];
""996_setPaymentSettings"" [label=""setPaymentSettings""];
""996_setProfile"" [label=""setProfile""];
""996_changeFundAddress"" [label=""changeFundAddress""];
""996_fallback"" [label=""fallback""];
""996_MerchantWallet"" [label=""MerchantWallet""];
""996_doWithdrawal"" [label=""doWithdrawal""];
""996_withdraw"" [label=""withdraw""];
""996_changeMerchantAccount"" [label=""changeMerchantAccount""];
""996_paymentSettings"" [label=""paymentSettings""];
""996_withdrawAllToExchange"" -> ""996_whenNotPaused"";
""996_changeFundAddress"" -> ""996_isEOA"";
""996_changeMerchantAccount"" -> ""996_whenNotPaused"";
""996_withdrawTo"" -> ""996_whenNotPaused"";
""996_withdraw"" -> ""996_onlyMerchant"";
""996_setPaymentSettings"" -> ""996_onlyOwner"";
""996_withdrawToExchange"" -> ""996_doWithdrawal"";
""996_changeFundAddress"" -> ""996_onlyMerchant"";
""996_setProfile"" -> ""996_onlyOwner"";
""996_withdrawTo"" -> ""996_onlyMerchant"";
""996_setCompositeReputation"" -> ""996_onlyMonetha"";
""996_withdrawAllToExchange"" -> ""996_onlyMerchantOrMonetha"";
""996_withdraw"" -> ""996_withdrawTo"";
""996_MerchantWallet"" -> ""996_isEOA"";
""996_withdrawAllToExchange"" -> ""996_doWithdrawal"";
""996_withdrawToExchange"" -> ""996_whenNotPaused"";
""996_changeMerchantAccount"" -> ""996_onlyMerchant"";
""996_withdrawTo"" -> ""996_doWithdrawal"";
""996_withdrawToExchange"" -> ""996_onlyMerchantOrMonetha"";
}
"
0x0232ba609782cea145ec3663f52cf7aeb4ac773c.sol,Withdrawable,"contract Withdrawable is PermissionGroups { event TokenWithdraw(ERC20 token, uint amount, address sendTo); function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin { require(token.transfer(sendTo, amount)); TokenWithdraw(token, amount, sendTo); }",1,"subgraph cluster_856_Withdrawable {
label=""Withdrawable"";
""856_withdrawEther"" [label=""withdrawEther""];
""856_withdrawToken"" [label=""withdrawToken""];
""856_withdrawToken"" -> ""856_onlyAdmin"";
""856_withdrawEther"" -> ""856_onlyAdmin"";
}
"
0x5085c5356129ee11bffb523e3166d7153ac13c75.sol,Casino,"contract Casino is Ownable, HouseAdmin { using SafeMath for uint; uint constant HOUSE_EDGE_PERCENT = 1; uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0003 ether; uint constant BET_AMOUNT_MIN = 0.01 ether; uint constant BET_AMOUNT_MAX = 1000 ether; uint constant BET_EXPIRATION_BLOCKS = 250; uint constant MAX_MASKABLE_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASKABLE_MODULO; uint constant POPCOUNT_MULT = 0x0000000000002000000000100000000008000000000400000000020000000001; uint constant POPCOUNT_MASK = 0x0001041041041041041041041041041041041041041041041041041041041041; uint constant POPCOUNT_MODULO = 0x3F; uint public bankFund; struct Bet { uint8 modulo; uint64 choice; uint amount; uint winAmount; uint placeBlockNumber; bool isActive; address player; }",1,"subgraph cluster_960_Casino {
label=""Casino"";
""960_closeBet"" [label=""closeBet""];
""960_getAvailableBalance"" [label=""getAvailableBalance""];
""960_recharge"" [label=""recharge""];
""960_constructor"" [label=""constructor""];
""960_placeBet"" [label=""placeBet""];
""960_withdraw"" [label=""withdraw""];
""960_refundBet"" [label=""refundBet""];
""960_closeBet"" -> ""960_onlyCroupier"";
""960_withdraw"" -> ""960_onlyOwner"";
""960_refundBet"" -> ""960_onlyCroupier"";
}
"
0x70d0907b064ab5c86849d391124f62ce9bcbf597.sol,Fastbitcoin,"contract Fastbitcoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 99 * 1 days; uint public round2 = now + 15 * 1 days; uint public round1 = now + 5 * 1 days; uint256 public totalSupply = 100000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 10000; uint256 public tokensPerEth = 2500000e8; uint public target0drop = 4000; uint public progress0drop = 0; address multisig = 0x25CB79CB502E58697C47e8cD29411fc4250879a6; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Fastbitcoin {
label=""Fastbitcoin"";
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_constructor"" [label=""constructor""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_approve"" [label=""approve""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_allowance"" [label=""allowance""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokens"" [label=""getTokens""];
""1261_add"" [label=""add""];
""1261_fallback"" [label=""fallback""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_transfer"" [label=""transfer""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_burn"" [label=""burn""];
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
}
"
0x496676b297799eeb9446b9d808c6051d33c6cb58.sol,the_game,contract the_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_the_game {
label=""the_game"";
""143_Try"" [label=""Try""];
""143_StopGame"" [label=""StopGame""];
""143_fallback"" [label=""fallback""];
""143_Activate"" [label=""Activate""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_newQuestioner"" [label=""newQuestioner""];
}
"
0x549b38e8e5fb1ba4acd4187d8b7c8a04deb53206.sol,LotteryAdmin,"contract LotteryAdmin { address public owner; address public admin; address public proposedOwner; address public ethereumLottery; uint public dailyAdminAllowance; uint public lastAllowancePaymentTimestamp; uint public nextProfile; event Deposit(address indexed _from, uint _value); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_282_LotteryAdmin {
label=""LotteryAdmin"";
""282_setLottery"" [label=""setLottery""];
""282_destruct"" [label=""destruct""];
""282_proposeOwner"" [label=""proposeOwner""];
""282_setConfiguration"" [label=""setConfiguration""];
""282_withdraw"" [label=""withdraw""];
""282_allowsAllowance"" [label=""allowsAllowance""];
""282_acceptOwnership"" [label=""acceptOwnership""];
""282_requestAllowance"" [label=""requestAllowance""];
""282_needsInitialization"" [label=""needsInitialization""];
""282_setAdmin"" [label=""setAdmin""];
""282_fallback"" [label=""fallback""];
""282_initLottery"" [label=""initLottery""];
""282_LotteryAdmin"" [label=""LotteryAdmin""];
""282_requestAllowance"" -> ""282_allowsAllowance"";
""282_setConfiguration"" -> ""282_onlyOwner"";
""282_withdraw"" -> ""282_onlyOwner"";
""282_destruct"" -> ""282_onlyOwner"";
""282_setLottery"" -> ""282_onlyOwner"";
""282_requestAllowance"" -> ""282_onlyAdminOrOwner"";
""282_proposeOwner"" -> ""282_onlyOwner"";
""282_setAdmin"" -> ""282_onlyOwner"";
""282_initLottery"" -> ""282_onlyAdminOrOwner"";
}
"
0x35bab7165a301e99c75c3e59b48817856b4d5e5c.sol,Bet,"contract Bet is Ownable, DataCenterBridge { using SafeMath for uint; event LogDistributeReward(address addr, uint reward, uint index); event LogGameResult(bytes32 indexed category, bytes32 indexed gameId, uint leftPts, uint rightPts); event LogParticipant(address addr, uint choice, uint betAmount); event LogRefund(address addr, uint betAmount); event LogBetClosed(bool isRefund, uint timestamp); event LogDealerWithdraw(address addr, uint withdrawAmount); struct BetInfo { bytes32 category; bytes32 gameId; uint8 spread; uint8 flag; uint16 leftOdds; uint16 middleOdds; uint16 rightOdds; uint minimumBet; uint startTime; uint deposit; address dealer; }",1,"subgraph cluster_1524_BetCenter {
label=""BetCenter"";
""1524_createBet"" [label=""createBet""];
""1524_fallback"" [label=""fallback""];
""1524_getBetsByCategory"" [label=""getBetsByCategory""];
""1524_getGameIdsByCategory"" [label=""getGameIdsByCategory""];
}
"
0xe3ec74dbce6ee1d8680e38714b67ab5535c95bdb.sol,try_it,contract try_it { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_try_it {
label=""try_it"";
""143_StopGame"" [label=""StopGame""];
""143_Activate"" [label=""Activate""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
""143_fallback"" [label=""fallback""];
""143_NewQuestion"" [label=""NewQuestion""];
}
"
0x56cd53067e5acd557dbbfb4c66580dfb9722962a.sol,CryptoMoviesToken,"contract CryptoMoviesToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; uint256 private firstStepLimit = 1.2 ether; uint256 private secondStepLimit = 5 ether; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",1,"subgraph cluster_975_CryptoMoviesToken {
label=""CryptoMoviesToken"";
""975_transfer"" [label=""transfer""];
""975_createContractMovie"" [label=""createContractMovie""];
""975_getMovie"" [label=""getMovie""];
""975_name"" [label=""name""];
""975_transferFrom"" [label=""transferFrom""];
""975__transfer"" [label=""_transfer""];
""975__createMovie"" [label=""_createMovie""];
""975_payout"" [label=""payout""];
""975__payout"" [label=""_payout""];
""975_takeOwnership"" [label=""takeOwnership""];
""975_balanceOf"" [label=""balanceOf""];
""975__owns"" [label=""_owns""];
""975__approved"" [label=""_approved""];
""975_symbol"" [label=""symbol""];
""975__addressNotNull"" [label=""_addressNotNull""];
""975_purchase"" [label=""purchase""];
""975_approve"" [label=""approve""];
""975_setCEO"" [label=""setCEO""];
""975_setCOO"" [label=""setCOO""];
""975_ownerOf"" [label=""ownerOf""];
""975_implementsERC721"" [label=""implementsERC721""];
""975_totalSupply"" [label=""totalSupply""];
""975_tokensOfOwner"" [label=""tokensOfOwner""];
""975_createPromoMovie"" [label=""createPromoMovie""];
""975_priceOf"" [label=""priceOf""];
""975_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""975_transfer"" -> ""975__addressNotNull"";
""975_tokensOfOwner"" -> ""975_totalSupply"";
""975__createMovie"" -> ""975__transfer"";
""975_createPromoMovie"" -> ""975__createMovie"";
""975_payout"" -> ""975__payout"";
""975_transfer"" -> ""975__transfer"";
""975_transferFrom"" -> ""975__addressNotNull"";
""975_takeOwnership"" -> ""975__approved"";
""975_approve"" -> ""975__owns"";
""975_transferFrom"" -> ""975__transfer"";
""975_createContractMovie"" -> ""975__createMovie"";
""975_purchase"" -> ""975__transfer"";
""975_createPromoMovie"" -> ""975_onlyCOO"";
""975_setCEO"" -> ""975_onlyCEO"";
""975_transfer"" -> ""975__owns"";
""975_transferFrom"" -> ""975__owns"";
""975_setCOO"" -> ""975_onlyCEO"";
""975_createContractMovie"" -> ""975_onlyCOO"";
""975_transferFrom"" -> ""975__approved"";
""975_takeOwnership"" -> ""975__transfer"";
""975_payout"" -> ""975_onlyCLevel"";
""975_tokensOfOwner"" -> ""975_balanceOf"";
""975_takeOwnership"" -> ""975__addressNotNull"";
""975_purchase"" -> ""975__addressNotNull"";
}
"
0x2920e0b7d86ab76aa09bcddffedef081faaf6e2c.sol,BloomToken,"contract BloomToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function BloomToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_BloomToken {
label=""BloomToken"";
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_mintTo"" [label=""mintTo""];
""401_changeOwner"" [label=""changeOwner""];
""401_balanceOf"" [label=""balanceOf""];
""401_totalSupply"" [label=""totalSupply""];
""401_transfer"" [label=""transfer""];
""401_BloomToken"" [label=""BloomToken""];
""401_approve"" [label=""approve""];
""401_killContract"" [label=""killContract""];
""401_fallback"" [label=""fallback""];
""401_transferFrom"" [label=""transferFrom""];
}
"
0x9c4d051974cdf3deb4d504ec24eac42b5e4e8847.sol,omexchange,"contract omexchange is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 5000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 10000; uint256 public tokensPerEth = 9500000e8; uint public target0drop = 800; uint public progress0drop = 0; address multisig = 0x25801F00B4138a981FA93771a86Fb50a8c94C809 ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_omexchange {
label=""omexchange"";
""1261_add"" [label=""add""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_Distribute"" [label=""Distribute""];
""1261_getTokens"" [label=""getTokens""];
""1261_transfer"" [label=""transfer""];
""1261_withdraw"" [label=""withdraw""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_distr"" [label=""distr""];
""1261_burn"" [label=""burn""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_constructor"" [label=""constructor""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_allowance"" [label=""allowance""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_distr"";
""1261_constructor"" -> ""1261_distr"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
}
"
0x0e2354b2ea4a6312009b228d5171bf6a02c51150.sol,THE_GAME,contract THE_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_THE_GAME {
label=""THE_GAME"";
""143_NewQuestion"" [label=""NewQuestion""];
""143_StopGame"" [label=""StopGame""];
""143_fallback"" [label=""fallback""];
""143_Try"" [label=""Try""];
""143_ActivateContract"" [label=""ActivateContract""];
""143_newQuestioner"" [label=""newQuestioner""];
}
"
0x3a858b6aa825c23621e339677a5016cfc4ff8b12.sol,Enigma_X,contract Enigma_X { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Enigma_X {
label=""Enigma_X"";
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_New"" [label=""New""];
""148_Start"" [label=""Start""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x00416b9d728069edb0ceb04bc2b203fa7336d1f1.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_processTransaction"" [label=""processTransaction""];
""928_pullBalance"" [label=""pullBalance""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_refundTransaction"";
""928_fallback"" -> ""928_processTransaction"";
}
"
0x3639d5dc956e35540fbd1de691870fb1318d6783.sol,SNTGiveaway,"contract SNTGiveaway is Controlled { mapping(address => bool) public sentToAddress; mapping(bytes5 => bool) public codeUsed; ERC20Token public SNT; uint public ethAmount; uint public sntAmount; bytes32 public root; event AddressFunded(address dest, bytes5 code, uint ethAmount, uint sntAmount); constructor(address _sntAddress, uint _ethAmount, uint _sntAmount, bytes32 _root) public { SNT = ERC20Token(_sntAddress); ethAmount = _ethAmount; sntAmount = _sntAmount; root = _root; }",1,"subgraph cluster_506_SNTGiveaway {
label=""SNTGiveaway"";
""506_updateSettings"" [label=""updateSettings""];
""506_constructor"" [label=""constructor""];
""506_processRequest"" [label=""processRequest""];
""506_manualSend"" [label=""manualSend""];
""506_retrieveFunds"" [label=""retrieveFunds""];
""506_validRequest"" [label=""validRequest""];
""506_fallback"" [label=""fallback""];
""506_boom"" [label=""boom""];
""506_processRequest"" -> ""506_onlyController"";
""506_manualSend"" -> ""506_onlyController"";
""506_boom"" -> ""506_onlyController"";
""506_updateSettings"" -> ""506_onlyController"";
""506_retrieveFunds"" -> ""506_onlyController"";
}
"
0xedebe7749b91a475918750842256f23fbe8e3029.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private admin = msg.sender; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },1,"subgraph cluster_1164_PlayerBook {
label=""PlayerBook"";
""1164_getNameFee"" [label=""getNameFee""];
""1164_constructor"" [label=""constructor""];
""1164_addGame"" [label=""addGame""];
""1164_checkIfNameValid"" [label=""checkIfNameValid""];
""1164_setRegistrationFee"" [label=""setRegistrationFee""];
""1164_getPlayerName"" [label=""getPlayerName""];
""1164_determinePID"" [label=""determinePID""];
""1164_registerNameXaddr"" [label=""registerNameXaddr""];
""1164_registerNameCore"" [label=""registerNameCore""];
""1164_registerNameXIDFromDapp"" [label=""registerNameXIDFromDapp""];
""1164_getPlayerAddr"" [label=""getPlayerAddr""];
""1164_registerNameXID"" [label=""registerNameXID""];
""1164_registerNameXname"" [label=""registerNameXname""];
""1164_getPlayerLAff"" [label=""getPlayerLAff""];
""1164_registerNameXnameFromDapp"" [label=""registerNameXnameFromDapp""];
""1164_registerNameXaddrFromDapp"" [label=""registerNameXaddrFromDapp""];
""1164_useMyOldName"" [label=""useMyOldName""];
""1164_getPlayerID"" [label=""getPlayerID""];
""1164_addMeToGame"" [label=""addMeToGame""];
""1164_getPlayerID"" -> ""1164_determinePID"";
""1164_registerNameXaddr"" -> ""1164_isHuman"";
""1164_registerNameXnameFromDapp"" -> ""1164_determinePID"";
""1164_registerNameXIDFromDapp"" -> ""1164_determinePID"";
""1164_registerNameXIDFromDapp"" -> ""1164_isRegisteredGame"";
""1164_registerNameXaddrFromDapp"" -> ""1164_registerNameCore"";
""1164_registerNameXaddrFromDapp"" -> ""1164_determinePID"";
""1164_setRegistrationFee"" -> ""1164_onlyAdmin"";
""1164_registerNameXname"" -> ""1164_determinePID"";
""1164_registerNameXID"" -> ""1164_determinePID"";
""1164_registerNameXnameFromDapp"" -> ""1164_isRegisteredGame"";
""1164_useMyOldName"" -> ""1164_isHuman"";
""1164_registerNameXaddrFromDapp"" -> ""1164_isRegisteredGame"";
""1164_addMeToGame"" -> ""1164_isHuman"";
""1164_registerNameXID"" -> ""1164_isHuman"";
""1164_registerNameXID"" -> ""1164_registerNameCore"";
""1164_registerNameXaddr"" -> ""1164_registerNameCore"";
""1164_registerNameXname"" -> ""1164_registerNameCore"";
""1164_registerNameXnameFromDapp"" -> ""1164_registerNameCore"";
""1164_addGame"" -> ""1164_onlyAdmin"";
""1164_getPlayerID"" -> ""1164_isRegisteredGame"";
""1164_registerNameXaddr"" -> ""1164_determinePID"";
""1164_registerNameXname"" -> ""1164_isHuman"";
""1164_registerNameXIDFromDapp"" -> ""1164_registerNameCore"";
}
"
0x93143d3e34a50aebab466368c3455fd858f77ad3.sol,FourOutOfFive,contract FourOutOfFive { struct GroupData { uint groupId; address[] participants; uint timestamp; uint betSize; uint rewardSize; uint8 rewardsAvailable; address[] rewardedParticipants; bool completed; },1,"subgraph cluster_670_FourOutOfFive {
label=""FourOutOfFive"";
""670__getContactOwnerBalance"" [label=""_getContactOwnerBalance""];
""670_withdrawOwnerMaxPossibleSafe"" [label=""withdrawOwnerMaxPossibleSafe""];
""670_placeBet"" [label=""placeBet""];
""670__getGroupRewardSize"" [label=""_getGroupRewardSize""];
""670_setMaxAndMinBet"" [label=""setMaxAndMinBet""];
""670__getGroupParticipants"" [label=""_getGroupParticipants""];
""670__getGroupIds"" [label=""_getGroupIds""];
""670_constructor"" [label=""constructor""];
""670__getGroupComplete"" [label=""_getGroupComplete""];
""670__getMaxWithdraw"" [label=""_getMaxWithdraw""];
""670__getGroupRewardedParticipants"" [label=""_getGroupRewardedParticipants""];
""670__getContactBalance"" [label=""_getContactBalance""];
""670_claimReward"" [label=""claimReward""];
""670__getMaxPossibleWithdraw"" [label=""_getMaxPossibleWithdraw""];
""670__getGroupRewardsAvailable"" [label=""_getGroupRewardsAvailable""];
""670_constructor"" -> ""670_setMaxAndMinBet"";
""670_withdrawOwnerMaxPossibleSafe"" -> ""670_onlyOwner"";
""670_setMaxAndMinBet"" -> ""670_onlyOwner"";
}
"
0xf1a3dc9de80f17a22b43acecaae62f5480063111.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1047_RefundVault {
label=""RefundVault"";
""1047_close"" [label=""close""];
""1047_refund"" [label=""refund""];
""1047_enableRefunds"" [label=""enableRefunds""];
""1047_RefundVault"" [label=""RefundVault""];
""1047_deposit"" [label=""deposit""];
""1047_close"" -> ""1047_onlyOwner"";
""1047_deposit"" -> ""1047_onlyOwner"";
""1047_enableRefunds"" -> ""1047_onlyOwner"";
}
"
0x279f9f9b73bfdbe14e4912a6d5f7442ecdf97b37.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_239_Destructible {
label=""Destructible"";
""239_destroy"" [label=""destroy""];
""239_destroyAndSend"" [label=""destroyAndSend""];
""239_Destructible"" [label=""Destructible""];
""239_destroy"" -> ""239_onlyOwner"";
""239_destroyAndSend"" -> ""239_onlyOwner"";
}
"
0xd587cb111d3e506ffafdf4b1c5d19008086c4e5a.sol,IartistChain,"contract IartistChain is owned, TokenERC20 { uint256 INITIAL_SUPPLY =500000000; uint256 public buyPrice = 1; event FrozenFunds(address target, bool frozen); function IartistChain(uint256 initialSupply, string tokenName, string tokenSymbol) TokenERC20(INITIAL_SUPPLY, , ) payable { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_572_IartistChain {
label=""IartistChain"";
""572__transfer"" [label=""_transfer""];
""572_IartistChain"" [label=""IartistChain""];
""572_selfdestructs"" [label=""selfdestructs""];
""572_fallback"" [label=""fallback""];
""572_setPrices"" [label=""setPrices""];
""572_buy"" [label=""buy""];
""572_buy"" -> ""572__transfer"";
""572_selfdestructs"" -> ""572_onlyOwner"";
""572_IartistChain"" -> ""572_TokenERC20"";
""572_setPrices"" -> ""572_onlyOwner"";
""572_fallback"" -> ""572__transfer"";
}
"
0xc780b0272bbe7caedb6b47157d88ce51b324da58.sol,CashFlow,"contract CashFlow { address public depositAddress = 0xbb02b2754386f0c76a2ad7f70ca4b272d29372f2; address public owner; modifier onlyOwner { require(owner == msg.sender, ); _; }",1,"subgraph cluster_97_CashFlow {
label=""CashFlow"";
""97_withdraw"" [label=""withdraw""];
""97_constructor"" [label=""constructor""];
""97_ownerkill"" [label=""ownerkill""];
""97_setOwner"" [label=""setOwner""];
""97_fallback"" [label=""fallback""];
""97_setDepositAddress"" [label=""setDepositAddress""];
""97_setDepositAddress"" -> ""97_onlyOwner"";
""97_setOwner"" -> ""97_onlyOwner"";
""97_withdraw"" -> ""97_onlyOwner"";
""97_ownerkill"" -> ""97_onlyOwner"";
}
"
0x7275f61c3abfba3596ae71f7128bdc3b0fc01fa9.sol,Ownable,contract Ownable { address public owner; address public bot; function Ownable() public { owner = msg.sender; },1,"subgraph cluster_78_Ownable {
label=""Ownable"";
""78_kill"" [label=""kill""];
""78_changeBot"" [label=""changeBot""];
""78_Ownable"" [label=""Ownable""];
""78_changeOwner"" [label=""changeOwner""];
""78_changeOwner"" -> ""78_onlyOwner"";
""78_kill"" -> ""78_onlyOwner"";
""78_changeBot"" -> ""78_onlyOwner"";
}
"
0x50f37df80a4e804a03275b21f83ebf5d5a668d39.sol,AuctionPotato,"contract AuctionPotato is Ownable { using SafeMath for uint256; string name; uint public startTime; uint public endTime; uint auctionDuration; uint public potato; uint oldPotato; uint oldHighestBindingBid; bool public canceled; uint public highestBindingBid; address public highestBidder; bool blockerPay; bool blockerWithdraw; mapping(address => uint256) public fundsByBidder; bool ownerHasWithdrawn; event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid); event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount); event LogCanceled(); event Withdraw(address owner, uint amount); constructor() public { blockerWithdraw = false; blockerPay = false; highestBindingBid = 3000000000000000; potato = 0; auctionDuration = 3 hours; startTime = 1546794000; endTime = startTime + auctionDuration; name = ; }",1,"subgraph cluster_620_AuctionPotato {
label=""AuctionPotato"";
""620_withdraw"" [label=""withdraw""];
""620_nextNextBid"" [label=""nextNextBid""];
""620_setStartTime"" [label=""setStartTime""];
""620_nextBid"" [label=""nextBid""];
""620_queryAuction"" [label=""queryAuction""];
""620_constructor"" [label=""constructor""];
""620_balance"" [label=""balance""];
""620_cancelAuction"" [label=""cancelAuction""];
""620_placeBid"" [label=""placeBid""];
""620_withdraw"" -> ""620_onlyOwner"";
""620_cancelAuction"" -> ""620_onlyBeforeEnd"";
""620_placeBid"" -> ""620_onlyAfterStart"";
""620_queryAuction"" -> ""620_nextBid"";
""620_cancelAuction"" -> ""620_onlyNotCanceled"";
""620_placeBid"" -> ""620_onlyNotCanceled"";
""620_setStartTime"" -> ""620_onlyOwner"";
""620_cancelAuction"" -> ""620_onlyOwner"";
""620_placeBid"" -> ""620_onlyBeforeEnd"";
}
"
0xf3f3dd2b5d9f3de1b1ceb6ad84683bf31adf29d1.sol,SAFE_GIFT,contract SAFE_GIFT { function GetGift(bytes pass) external payable { if(hashPass == keccak256(pass) && now>giftTime) { msg.sender.transfer(this.balance); },1,"subgraph cluster_164_SAFE_GIFT {
label=""SAFE_GIFT"";
""164_GetGift"" [label=""GetGift""];
""164_SetGiftTime"" [label=""SetGiftTime""];
""164_SetPass"" [label=""SetPass""];
""164_fallback"" [label=""fallback""];
""164_GetHash"" [label=""GetHash""];
""164_PassHasBeenSet"" [label=""PassHasBeenSet""];
""164_SetReciver"" [label=""SetReciver""];
}
"
0x2066a2e0cd7f19589f582e2fc9af9669cc9e02f1.sol,SetherToken,"contract SetherToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function SetherToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_SetherToken {
label=""SetherToken"";
""401_SetherToken"" [label=""SetherToken""];
""401_transfer"" [label=""transfer""];
""401_fallback"" [label=""fallback""];
""401_mintTo"" [label=""mintTo""];
""401_totalSupply"" [label=""totalSupply""];
""401_approve"" [label=""approve""];
""401_changeOwner"" [label=""changeOwner""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_killContract"" [label=""killContract""];
""401_transferFrom"" [label=""transferFrom""];
""401_balanceOf"" [label=""balanceOf""];
}
"
0xc80205befdb86a1891019969001e90b064d5735a.sol,MILO,"contract MILO is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 950000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 100000000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0xCf7Ac628f8A0fa38059BF77b0134efaD8bF329A3; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_MILO {
label=""MILO"";
""1261_burn"" [label=""burn""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_add"" [label=""add""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_constructor"" [label=""constructor""];
""1261_Distribute"" [label=""Distribute""];
""1261_getTokens"" [label=""getTokens""];
""1261_distr"" [label=""distr""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_transfer"" [label=""transfer""];
""1261_withdraw"" [label=""withdraw""];
""1261_allowance"" [label=""allowance""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_getTokens"" -> ""1261_distr"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,FlowerCore,"contract FlowerCore is FlowerAuction, Ownable { uint256 public constant PROMO_CREATION_LIMIT = 5000; uint256 public constant GEN0_CREATION_LIMIT = 45000; uint256 public constant GEN0_STARTING_PRICE = 10 finney; uint256 public constant GEN0_AUCTION_DURATION = 1 days; uint256 public promoCreatedCount; uint256 public gen0CreatedCount; constructor() public { stopped = true; rootAddress = msg.sender; adminAddress = msg.sender; _createFlower(0, 0, 0, uint256(-1), address(0)); }",1,"subgraph cluster_4300_FlowerCore {
label=""FlowerCore"";
""4300__computeNextGen0Price"" [label=""_computeNextGen0Price""];
""4300_getFlower"" [label=""getFlower""];
""4300_createPromoFlower"" [label=""createPromoFlower""];
""4300_unstop"" [label=""unstop""];
""4300_createGen0Auction"" [label=""createGen0Auction""];
""4300_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""4300_withdrawBalance"" [label=""withdrawBalance""];
""4300_setGiftHolderAddress"" [label=""setGiftHolderAddress""];
""4300_constructor"" [label=""constructor""];
""4300_createPromoFlower"" -> ""4300_onlyAdministrator"";
""4300_withdrawBalance"" -> ""4300_onlyAdministrator"";
""4300_setGen0SellerAddress"" -> ""4300_onlyAdministrator"";
""4300_createGen0Auction"" -> ""4300_onlyAdministrator"";
""4300_unstop"" -> ""4300_whenStopped"";
""4300_setGiftHolderAddress"" -> ""4300_onlyAdministrator"";
""4300_unstop"" -> ""4300_onlyAdministrator"";
""4300_constructor"" -> ""4300__createFlower"";
""4300_unstop"" -> ""4300_setStart"";
""4300_createGen0Auction"" -> ""4300__createFlower"";
""4300_createGen0Auction"" -> ""4300__computeNextGen0Price"";
""4300_createPromoFlower"" -> ""4300__createFlower"";
}
"
0xde745420248e0dde0cf774b5db8d59c96982b3a2.sol,Payout,contract Payout { ERC20Basic HorseToken; address payoutPoolAddress; address owner; address dev; address devTokensVestingAddress; bool payoutPaused; bool payoutSetup; uint256 public payoutPoolAmount; mapping(address => bool) public hasClaimed; constructor() public { HorseToken = ERC20Basic(0x5B0751713b2527d7f002c0c4e2a37e1219610A6B); payoutPoolAddress = address(0xf783A81F046448c38f3c863885D9e99D10209779); dev = address(0x1F92771237Bd5eae04e91B4B6F1d1a78D41565a2); devTokensVestingAddress = address(0x44935883932b0260C6B1018Cf6436650BD52a257); owner = msg.sender; },1,"subgraph cluster_297_Payout {
label=""Payout"";
""297_constructor"" [label=""constructor""];
""297_getTokenBalance"" [label=""getTokenBalance""];
""297_claim"" [label=""claim""];
""297_payoutControlSwitch"" [label=""payoutControlSwitch""];
""297_setupPayout"" [label=""setupPayout""];
""297_extractFund"" [label=""extractFund""];
""297_getRewardEstimate"" [label=""getRewardEstimate""];
""297_claim"" -> ""297_isPayoutSetup"";
""297_claim"" -> ""297_getRewardEstimate"";
""297_payoutControlSwitch"" -> ""297_onlyOwner"";
""297_getRewardEstimate"" -> ""297_isPayoutSetup"";
""297_claim"" -> ""297_isPayoutPaused"";
""297_getRewardEstimate"" -> ""297_getTokenBalance"";
""297_extractFund"" -> ""297_onlyOwner"";
""297_claim"" -> ""297_hasNotClaimed"";
}
"
0xd029de67c3f46d046c635f60efeb41d5b92a74ae.sol,Owned,contract Owned { address public contractOwner; address public pendingContractOwner; function Owned() { contractOwner = msg.sender; },1,"subgraph cluster_82_Owned {
label=""Owned"";
""82_changeContractOwnership"" [label=""changeContractOwnership""];
""82_claimContractOwnership"" [label=""claimContractOwnership""];
""82_destroy"" [label=""destroy""];
""82_Owned"" [label=""Owned""];
""82_destroy"" -> ""82_onlyContractOwner"";
""82_changeContractOwnership"" -> ""82_onlyContractOwner"";
}
"
0x479cbe1f6a7fa4d7e304ae983803c46e85ced870.sol,Slaughter3D,contract Slaughter3D { using SafeMath for uint; struct Stage { uint8 numberOfPlayers; uint256 blocknumber; bool finalized; mapping (uint8 => address) slotXplayer; mapping (address => bool) players; mapping (uint8 => address) setMN; },1,"subgraph cluster_1021_Slaughter3D {
label=""Slaughter3D"";
""1021_jackpotinfo"" [label=""jackpotinfo""];
""1021_previousstageloser"" [label=""previousstageloser""];
""1021_tryFinalizeStage"" [label=""tryFinalizeStage""];
""1021_acceptOffer"" [label=""acceptOffer""];
""1021_invalidateStage"" [label=""invalidateStage""];
""1021_fallback"" [label=""fallback""];
""1021_previousstageplayer1"" [label=""previousstageplayer1""];
""1021_currentstageplayer1"" [label=""currentstageplayer1""];
""1021_nextonetogetpaid"" [label=""nextonetogetpaid""];
""1021_playervanity"" [label=""playervanity""];
""1021_currentstageplayer2"" [label=""currentstageplayer2""];
""1021_contractownsthismanyP3D"" [label=""contractownsthismanyP3D""];
""1021_allocateSurvivorWinnings"" [label=""allocateSurvivorWinnings""];
""1021_Payoutnextrefund"" [label=""Payoutnextrefund""];
""1021_withdraw"" [label=""withdraw""];
""1021_offerAsSacrifice"" [label=""offerAsSacrifice""];
""1021_DonateToLosers"" [label=""DonateToLosers""];
""1021_currentPlayers"" [label=""currentPlayers""];
""1021_Expand"" [label=""Expand""];
""1021_constructor"" [label=""constructor""];
""1021_previousstageplayer2"" [label=""previousstageplayer2""];
""1021_offerAsSacrificeFromVault"" [label=""offerAsSacrificeFromVault""];
""1021_myEarnings"" [label=""myEarnings""];
""1021_changevanity"" [label=""changevanity""];
""1021_DivsToRefundpot"" [label=""DivsToRefundpot""];
""1021_checkstatus"" [label=""checkstatus""];
""1021_offerAsSacrificeFromVault"" -> ""1021_canPayFromVault"";
""1021_offerAsSacrifice"" -> ""1021_prepareStage"";
""1021_withdraw"" -> ""1021_tryFinalizeStage"";
""1021_offerAsSacrificeFromVault"" -> ""1021_isNewToStage"";
""1021_offerAsSacrificeFromVault"" -> ""1021_acceptOffer"";
""1021_offerAsSacrificeFromVault"" -> ""1021_prepareStage"";
""1021_tryFinalizeStage"" -> ""1021_invalidateStage"";
""1021_withdraw"" -> ""1021_hasEarnings"";
""1021_offerAsSacrificeFromVault"" -> ""1021_tryFinalizeStage"";
""1021_tryFinalizeStage"" -> ""1021_allocateSurvivorWinnings"";
""1021_offerAsSacrifice"" -> ""1021_isValidOffer"";
""1021_offerAsSacrifice"" -> ""1021_tryFinalizeStage"";
""1021_offerAsSacrifice"" -> ""1021_isNewToStage"";
""1021_offerAsSacrifice"" -> ""1021_acceptOffer"";
""1021_myEarnings"" -> ""1021_hasEarnings"";
}
"
0x5b39afa22a9debd9247bf84b68a79b8736c2ba4e.sol,Quiz,contract Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_Quiz {
label=""Quiz"";
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_Try"" [label=""Try""];
""118_Start_quiz_g"" [label=""Start_quiz_g""];
}
"
0x3f96c0e80b82458c1a96a3b7d7d2297f55df4965.sol,Treethereum,contract Treethereum { uint timeout; mapping (address => address) inviter; function bytesToAddr (bytes b) constant returns (address) { uint result = 0; for (uint i = b.length-1; i+1 > 0; i--) { uint c = uint(b[i]); uint to_inc = c * ( 16 ** ((b.length - i-1) * 2)); result += to_inc; },1,"subgraph cluster_217_Treethereum {
label=""Treethereum"";
""217_addrecruit"" [label=""addrecruit""];
""217_fallback"" [label=""fallback""];
""217_bytesToAddr"" [label=""bytesToAddr""];
""217_fallback"" -> ""217_bytesToAddr"";
""217_fallback"" -> ""217_addrecruit"";
}
"
0xcf377dfd654676940e2b5a87cf2673def25aeaed.sol,GreenEthereusPromo,"contract GreenEthereusPromo { string public constant name = ; string public constant symbol = ; event Transfer(address indexed from, address indexed to, uint256 value); address owner; uint public index; constructor() public { owner = msg.sender; }",1,"subgraph cluster_149_GreenEthereusPromo {
label=""GreenEthereusPromo"";
""149_fallback"" [label=""fallback""];
""149_resetIndex"" [label=""resetIndex""];
""149_withdrawBalance"" [label=""withdrawBalance""];
""149_constructor"" [label=""constructor""];
""149_massSending"" [label=""massSending""];
""149_transferOwnership"" [label=""transferOwnership""];
""149_transferOwnership"" -> ""149_onlyOwner"";
""149_resetIndex"" -> ""149_onlyOwner"";
""149_withdrawBalance"" -> ""149_onlyOwner"";
""149_massSending"" -> ""149_onlyOwner"";
}
"
0xd16dfe7a7f447b00122a01efd5acb99a7aee7c04.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 300000000; uint256 public buyPrice = 2000; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public { }",1,"subgraph cluster_636_EncryptedToken {
label=""EncryptedToken"";
""636_getEth"" [label=""getEth""];
""636_selfdestructs"" [label=""selfdestructs""];
""636_mintToken"" [label=""mintToken""];
""636_fallback"" [label=""fallback""];
""636_freezeAccount"" [label=""freezeAccount""];
""636_buy"" [label=""buy""];
""636__transfer"" [label=""_transfer""];
""636_setPrices"" [label=""setPrices""];
""636_EncryptedToken"" [label=""EncryptedToken""];
""636_balanceOfa"" [label=""balanceOfa""];
""636_freezeAccount"" -> ""636_onlyOwner"";
""636_selfdestructs"" -> ""636_onlyOwner"";
""636_mintToken"" -> ""636_onlyOwner"";
""636_buy"" -> ""636__transfer"";
""636_setPrices"" -> ""636_onlyOwner"";
""636_EncryptedToken"" -> ""636_TokenERC20"";
""636_fallback"" -> ""636__transfer"";
}
"
0xa2201234a4652a704f5539058ccb9ab6ebcd486b.sol,MultiSigWallet,"contract MultiSigWallet { uint constant public MAX_OWNER_COUNT = 5; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1014_MultiSigWallet {
label=""MultiSigWallet"";
""1014_addOwner"" [label=""addOwner""];
""1014_getTransactionIds"" [label=""getTransactionIds""];
""1014_addTransaction"" [label=""addTransaction""];
""1014_revokeConfirmation"" [label=""revokeConfirmation""];
""1014_confirmTransaction"" [label=""confirmTransaction""];
""1014_getConfirmationCount"" [label=""getConfirmationCount""];
""1014_getConfirmations"" [label=""getConfirmations""];
""1014_getOwners"" [label=""getOwners""];
""1014_removeOwner"" [label=""removeOwner""];
""1014_changeRequirement"" [label=""changeRequirement""];
""1014_getTransactionCount"" [label=""getTransactionCount""];
""1014_submitTransaction"" [label=""submitTransaction""];
""1014_executeTransaction"" [label=""executeTransaction""];
""1014_isConfirmed"" [label=""isConfirmed""];
""1014_replaceOwner"" [label=""replaceOwner""];
""1014_fallback"" [label=""fallback""];
""1014_MultiSigWallet"" [label=""MultiSigWallet""];
""1014_revokeConfirmation"" -> ""1014_notExecuted"";
""1014_confirmTransaction"" -> ""1014_ownerExists"";
""1014_confirmTransaction"" -> ""1014_transactionExists"";
""1014_confirmTransaction"" -> ""1014_executeTransaction"";
""1014_removeOwner"" -> ""1014_ownerExists"";
""1014_addOwner"" -> ""1014_validRequirement"";
""1014_replaceOwner"" -> ""1014_ownerExists"";
""1014_removeOwner"" -> ""1014_onlyWallet"";
""1014_executeTransaction"" -> ""1014_notExecuted"";
""1014_revokeConfirmation"" -> ""1014_ownerExists"";
""1014_submitTransaction"" -> ""1014_confirmTransaction"";
""1014_replaceOwner"" -> ""1014_ownerDoesNotExist"";
""1014_revokeConfirmation"" -> ""1014_confirmed"";
""1014_changeRequirement"" -> ""1014_onlyWallet"";
""1014_confirmTransaction"" -> ""1014_notConfirmed"";
""1014_removeOwner"" -> ""1014_changeRequirement"";
""1014_executeTransaction"" -> ""1014_isConfirmed"";
""1014_addTransaction"" -> ""1014_notNull"";
""1014_addOwner"" -> ""1014_notNull"";
""1014_submitTransaction"" -> ""1014_addTransaction"";
""1014_addOwner"" -> ""1014_onlyWallet"";
""1014_changeRequirement"" -> ""1014_validRequirement"";
""1014_replaceOwner"" -> ""1014_onlyWallet"";
""1014_addOwner"" -> ""1014_ownerDoesNotExist"";
}
"
0x8d40e75ed0bcc4ca13aa4113738898f9779858be.sol,STEShop,"contract STEShop is Ownable { ERC20 public tokenAddress; uint256 public currentPrice; uint256 public minPrice; uint256 public maxPrice; uint256 public tokensForSale; uint256 public unsoldAmount; address[2] internal foundersAddresses = [ 0x2f072F00328B6176257C21E64925760990561001, 0x2640d4b3baF3F6CF9bB5732Fe37fE1a9735a32CE ]; constructor () public { tokensForSale = 979915263825780; unsoldAmount = tokensForSale; minPrice = 4000000; currentPrice = 4000000; maxPrice = 100000000; }",1,"subgraph cluster_589_STEShop {
label=""STEShop"";
""589_setTokenAddress"" [label=""setTokenAddress""];
""589_setMaxPrice"" [label=""setMaxPrice""];
""589_setTokensForSale"" [label=""setTokensForSale""];
""589_withdrawToFounders"" [label=""withdrawToFounders""];
""589_setMinPrice"" [label=""setMinPrice""];
""589_fallback"" [label=""fallback""];
""589_setUnsoldAmount"" [label=""setUnsoldAmount""];
""589_constructor"" [label=""constructor""];
""589_setCurentPrice"" [label=""setCurentPrice""];
""589_setTokensForSale"" -> ""589_onlyOwner"";
""589_setMaxPrice"" -> ""589_onlyOwner"";
""589_setUnsoldAmount"" -> ""589_onlyOwner"";
""589_setCurentPrice"" -> ""589_onlyOwner"";
""589_setMinPrice"" -> ""589_onlyOwner"";
""589_withdrawToFounders"" -> ""589_onlyOwner"";
""589_setTokenAddress"" -> ""589_onlyOwner"";
}
"
0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol,TydoPreIco,contract TydoPreIco is Owned { using SafeMath for uint256; uint256 public constant COINS_PER_ETH = 12000; uint256 public constant bonus = 25; mapping (address => uint256) public balances; mapping (address => uint256) ethBalances; uint256 public ethCollected; uint256 public tokenSold; uint256 constant tokenDecMult = 1 ether; uint8 public state = 0; AbstractERC20 public token; event SaleStart(); event SaleClosedSuccess(uint256 _tokenSold); event SaleClosedFail(uint256 _tokenSold); constructor(address _coinToken) Owned() public { token = AbstractERC20(_coinToken); },1,"subgraph cluster_656_TydoPreIco {
label=""TydoPreIco"";
""656_withdrawTokens"" [label=""withdrawTokens""];
""656_closeSuccess"" [label=""closeSuccess""];
""656_addBonus"" [label=""addBonus""];
""656_open"" [label=""open""];
""656_fallback"" [label=""fallback""];
""656_canBuy"" [label=""canBuy""];
""656_refund"" [label=""refund""];
""656_constructor"" [label=""constructor""];
""656_tokensLeft"" [label=""tokensLeft""];
""656_buy"" [label=""buy""];
""656_withdraw"" [label=""withdraw""];
""656_closeFail"" [label=""closeFail""];
""656_withdraw"" -> ""656_ownerOnly"";
""656_constructor"" -> ""656_constructor"";
""656_fallback"" -> ""656_withdrawTokens"";
""656_buy"" -> ""656_canBuy"";
""656_fallback"" -> ""656_buy"";
""656_open"" -> ""656_ownerOnly"";
""656_fallback"" -> ""656_refund"";
""656_closeFail"" -> ""656_ownerOnly"";
""656_closeSuccess"" -> ""656_ownerOnly"";
""656_buy"" -> ""656_addBonus"";
}
"
0xed29ff5874fa64dcf47ed7dacb770857a5d164fb.sol,Vault,"contract Vault is TokenVault { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event OpenDate(uint date); mapping (address => uint) public Deposits; uint minDeposit; bool Locked; uint Date; function initVault() payable open { Owner = msg.sender; minDeposit = 0.25 ether; Locked = false; deposit(); }",1,"subgraph cluster_115_TokenVault {
label=""TokenVault"";
""115_withdrawTokenTo"" [label=""withdrawTokenTo""];
""115_withdrawToken"" [label=""withdrawToken""];
""115_emtpyTo"" [label=""emtpyTo""];
""115_withdrawToken"" -> ""115_withdrawTokenTo"";
""115_withdrawTokenTo"" -> ""115_onlyOwner"";
""115_emtpyTo"" -> ""115_withdrawTokenTo"";
}
"
0x36fc9fff1bf5b08ed2c472d6370dc62fa3016ffa.sol,quizgame,contract quizgame { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_quizgame {
label=""quizgame"";
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xed29ff5874fa64dcf47ed7dacb770857a5d164fb.sol,Vault,"contract Vault is TokenVault { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event OpenDate(uint date); mapping (address => uint) public Deposits; uint minDeposit; bool Locked; uint Date; function initVault() payable open { Owner = msg.sender; minDeposit = 0.25 ether; Locked = false; deposit(); }",1,"subgraph cluster_115_TokenVault {
label=""TokenVault"";
""115_withdrawTokenTo"" [label=""withdrawTokenTo""];
""115_withdrawToken"" [label=""withdrawToken""];
""115_emtpyTo"" [label=""emtpyTo""];
""115_withdrawToken"" -> ""115_withdrawTokenTo"";
""115_withdrawTokenTo"" -> ""115_onlyOwner"";
""115_emtpyTo"" -> ""115_withdrawTokenTo"";
}
"
0x553e3e5ba03e862c93c7834b80ca800018ba4736.sol,SamsungCryptoPayments,"contract SamsungCryptoPayments is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 2000000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e1; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0xf228A325c92d4002A159eb52Bf6A9C509C039CCA; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_SamsungCryptoPayments {
label=""SamsungCryptoPayments"";
""1261_transfer"" [label=""transfer""];
""1261_approve"" [label=""approve""];
""1261_allowance"" [label=""allowance""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_constructor"" [label=""constructor""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_add"" [label=""add""];
""1261_getTokens"" [label=""getTokens""];
""1261_distr"" [label=""distr""];
""1261_withdraw"" [label=""withdraw""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_burn"" [label=""burn""];
""1261_fallback"" [label=""fallback""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_Distribute"" [label=""Distribute""];
""1261_distr"" -> ""1261_canDistr"";
""1261_constructor"" -> ""1261_distr"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_getTokens"" -> ""1261_distr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
}
"
0x0dcfdb9f5496ed7f62dd0ac019c7daf184a66aef.sol,LVRCrowdsale,"contract LVRCrowdsale { Token public tokenReward; address public creator; address public owner = 0xC9167F51CDEa635634E6d92D25664379dde36484; uint256 public price; uint256 public startDate; uint256 public endDate; event FundTransfer(address backer, uint amount, bool isContribution); function LVRCrowdsale() public { creator = msg.sender; startDate = 1522839600; endDate = 1525431600; price = 1000; tokenReward = Token(0x7095E151aBD19e8C99abdfB4568F675f747f97F6); }",1,"subgraph cluster_285_LVRCrowdsale {
label=""LVRCrowdsale"";
""285_kill"" [label=""kill""];
""285_setOwner"" [label=""setOwner""];
""285_fallback"" [label=""fallback""];
""285_setCreator"" [label=""setCreator""];
""285_setStartDate"" [label=""setStartDate""];
""285_setEndtDate"" [label=""setEndtDate""];
""285_setPrice"" [label=""setPrice""];
""285_setToken"" [label=""setToken""];
""285_LVRCrowdsale"" [label=""LVRCrowdsale""];
}
"
0x0d9a437282ba395664ed7d26df2377659a7e16af.sol,SaleTracker,"contract SaleTracker is Pausable { using SafeMath for uint256; event PurchaseMade (address indexed _from, bytes8 _paymentCode, uint256 _value); mapping(address => uint256) public purchases; address[] public purchaserAddresses; bool public enforceAddressMatch; function SaleTracker(bool _enforceAddressMatch) { enforceAddressMatch = _enforceAddressMatch; pause(); }",1,"subgraph cluster_359_SaleTracker {
label=""SaleTracker"";
""359_getPurchaserAddressCount"" [label=""getPurchaserAddressCount""];
""359_setEnforceAddressMatch"" [label=""setEnforceAddressMatch""];
""359_SaleTracker"" [label=""SaleTracker""];
""359_sweep"" [label=""sweep""];
""359_purchase"" [label=""purchase""];
""359_setEnforceAddressMatch"" -> ""359_onlyOwner"";
""359_SaleTracker"" -> ""359_pause"";
""359_sweep"" -> ""359_onlyOwner"";
""359_purchase"" -> ""359_whenNotPaused"";
}
"
0xf17a9ad24372faaa27f0bb684e13413a3de84c4b.sol,SmokeCoinV_2,"contract SmokeCoinV_2 is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 200 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 150 * 1 days; uint256 public totalSupply = 754654e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 22220000000; uint public target0drop = 4222; uint public progress0drop = 0; address multisig = 0xb7Ef2B8514A27bf63e8F5397Fd6DBDCa95809883; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_SmokeCoinV_2 {
label=""SmokeCoinV_2"";
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_getTokens"" [label=""getTokens""];
""1263_transfer"" [label=""transfer""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_burn"" [label=""burn""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_constructor"" [label=""constructor""];
""1263_Distribute"" [label=""Distribute""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_approve"" [label=""approve""];
""1263_fallback"" [label=""fallback""];
""1263_allowance"" [label=""allowance""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_withdraw"" [label=""withdraw""];
""1263_add"" [label=""add""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_distr"" [label=""distr""];
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_getTokens"" -> ""1263_distr"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_constructor"" -> ""1263_distr"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
}
"
0x403860568bcd726ec403f8a1ca67f374e842f16c.sol,CrowdCoinICO,"contract CrowdCoinICO is Owned, DSMath, CrowdCoinSaleBonus, CrowdCoinManualSell { uint public total_raised; uint public start_time = 0; uint public end_time = 0; uint public constant goal = 350 ether; uint256 public constant default_price = 0.005 * 10**18; mapping (uint => uint256) public price; mapping(address => uint) funded; modifier in_time { if (time() < start_time || time() > end_time) revert(); _; }",1,"subgraph cluster_1967_CrowdCoinICO {
label=""CrowdCoinICO"";
""1967_time"" [label=""time""];
""1967_refund"" [label=""refund""];
""1967_init"" [label=""init""];
""1967_fallback"" [label=""fallback""];
""1967_get_current_price"" [label=""get_current_price""];
""1967_collect"" [label=""collect""];
""1967_current_week"" [label=""current_week""];
""1967_successfully_closed"" [label=""successfully_closed""];
""1967_CrowdCoinICO"" [label=""CrowdCoinICO""];
""1967_fallback"" -> ""1967_min"";
""1967_successfully_closed"" -> ""1967_my_token_balance"";
""1967_successfully_closed"" -> ""1967_time"";
""1967_fallback"" -> ""1967_cast"";
""1967_fallback"" -> ""1967_has_value"";
""1967_init"" -> ""1967_onlyOwner"";
""1967_fallback"" -> ""1967_get_bonus"";
""1967_fallback"" -> ""1967_wadd"";
""1967_fallback"" -> ""1967_my_token_balance"";
""1967_current_week"" -> ""1967_sub"";
""1967_fallback"" -> ""1967_get_current_price"";
""1967_refund"" -> ""1967_time"";
""1967_fallback"" -> ""1967_add"";
""1967_fallback"" -> ""1967_in_time"";
""1967_get_current_price"" -> ""1967_current_week"";
""1967_fallback"" -> ""1967_wdiv"";
}
"
0x889a32263d237872b4f7985ead9c29ebfe8b464d.sol,CaviarToken,"contract CaviarToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function CaviarToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_CaviarToken {
label=""CaviarToken"";
""401_fallback"" [label=""fallback""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_CaviarToken"" [label=""CaviarToken""];
""401_totalSupply"" [label=""totalSupply""];
""401_mintTo"" [label=""mintTo""];
""401_transferFrom"" [label=""transferFrom""];
""401_balanceOf"" [label=""balanceOf""];
""401_transfer"" [label=""transfer""];
""401_killContract"" [label=""killContract""];
""401_approve"" [label=""approve""];
""401_changeOwner"" [label=""changeOwner""];
}
"
0x887e1988f7d697df22aea1207a5e1831ad3065ef.sol,Manageable,"contract Manageable is Ownable { address public manager; bool public contractLock; event ManagerTransferred(address indexed previousManager, address indexed newManager); event ContractLockChanged(address admin, bool state); function Manageable() public { manager = msg.sender; contractLock = false; }",1,"subgraph cluster_410_Manageable {
label=""Manageable"";
""410_withdrawFunds"" [label=""withdrawFunds""];
""410_Manageable"" [label=""Manageable""];
""410_setContractLock"" [label=""setContractLock""];
""410_transferManager"" [label=""transferManager""];
""410_payout"" [label=""payout""];
""410_transferManager"" -> ""410_onlyAdmin"";
""410_setContractLock"" -> ""410_onlyAdmin"";
""410_payout"" -> ""410_onlyOwner"";
""410_withdrawFunds"" -> ""410_onlyOwner"";
}
"
0xa1d38ef843553322a338cdd7d6134565ffba97ab.sol,LEVT,"contract LEVT is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 public totalSupply = 22222222222e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 11111111e8; uint256 public totalDonation; uint public target0drop = 400000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1061_LEVT {
label=""LEVT"";
""1061_balanceOf"" [label=""balanceOf""];
""1061_fallback"" [label=""fallback""];
""1061_transfer"" [label=""transfer""];
""1061_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1061_getTokens"" [label=""getTokens""];
""1061_approve"" [label=""approve""];
""1061_getTokenBalance"" [label=""getTokenBalance""];
""1061_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1061_allowance"" [label=""allowance""];
""1061_burn"" [label=""burn""];
""1061_withdraw"" [label=""withdraw""];
""1061_withdrawAll"" [label=""withdrawAll""];
""1061_distr"" [label=""distr""];
""1061_transferOwnership"" [label=""transferOwnership""];
""1061_Distribute"" [label=""Distribute""];
""1061_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1061_constructor"" [label=""constructor""];
""1061_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1061_finishDistribution"" [label=""finishDistribution""];
""1061_totalDonationnETH"" [label=""totalDonationnETH""];
""1061_transferFrom"" [label=""transferFrom""];
""1061_DistributeAirdrop"" -> ""1061_onlyOwner"";
""1061_DistributeAirdropMultiple"" -> ""1061_Distribute"";
""1061_burn"" -> ""1061_onlyOwner"";
""1061_getTokens"" -> ""1061_canDistr"";
""1061_getTokens"" -> ""1061_distr"";
""1061_withdrawForeignTokens"" -> ""1061_onlyOwner"";
""1061_transferFrom"" -> ""1061_onlyPayloadSize"";
""1061_Distribute"" -> ""1061_onlyOwner"";
""1061_transfer"" -> ""1061_onlyPayloadSize"";
""1061_distr"" -> ""1061_canDistr"";
""1061_DistributeAirdropMultiple"" -> ""1061_onlyOwner"";
""1061_finishDistribution"" -> ""1061_onlyOwner"";
""1061_updateTokensPerEth"" -> ""1061_onlyOwner"";
""1061_withdrawAll"" -> ""1061_onlyOwner"";
""1061_finishDistribution"" -> ""1061_canDistr"";
""1061_transferOwnership"" -> ""1061_onlyOwner"";
""1061_DistributeAirdrop"" -> ""1061_Distribute"";
""1061_withdraw"" -> ""1061_onlyOwner"";
""1061_constructor"" -> ""1061_distr"";
""1061_fallback"" -> ""1061_getTokens"";
}
"
0x1fdedef5c2da1ed9db44d80003a9592dfa18163c.sol,Syndicate,contract Syndicate is Ownable{ uint256 public numberSyndicateMembers; uint256 public totalSyndicateShares = 20000; uint256 public playersShareAllocation = 5000; uint256 public availableBuyInShares = 5000; uint256 public minimumBuyIn = 10; uint256 public buyInSharePrice = 1000000000000000; uint256 public shareCycleSessionSize = 1000; uint256 public shareCycleIndex = 0; uint256 public shareCycle = 1; uint256 public currentSyndicateValue = 0; uint256 public precision = 1000000000000000; uint256 public maxCyclePlayersConsidered = 100; address[] public cyclePlayers; uint256 public numberOfCyclePlayers = 0; struct somePlayer { uint256 playCount; uint256 profitShare; uint256 shareCycle; uint256 winnings; },1,"subgraph cluster_869_Syndicate {
label=""Syndicate"";
""869_roundIt"" [label=""roundIt""];
""869_claimPlayerWinnings"" [label=""claimPlayerWinnings""];
""869_playerStatus"" [label=""playerStatus""];
""869_setShareCycleSessionSize"" [label=""setShareCycleSessionSize""];
""869_insertCyclePlayer"" [label=""insertCyclePlayer""];
""869_addMember"" [label=""addMember""];
""869_allocateWinnings"" [label=""allocateWinnings""];
""869_updatePlayCount"" [label=""updatePlayCount""];
""869_Syndicate"" [label=""Syndicate""];
""869_setMaxCyclePlayersConsidered"" [label=""setMaxCyclePlayersConsidered""];
""869_claimPlayerProfit"" [label=""claimPlayerProfit""];
""869_buyIntoSyndicate"" [label=""buyIntoSyndicate""];
""869_memberShareCount"" [label=""memberShareCount""];
""869_min"" [label=""min""];
""869_allocateShares"" [label=""allocateShares""];
""869_distributeProfit"" [label=""distributeProfit""];
""869_memberProfitShare"" [label=""memberProfitShare""];
""869_claimProfit"" [label=""claimProfit""];
""869_setMaxCyclePlayersConsidered"" -> ""869_onlyOwner"";
""869_distributeProfit"" -> ""869_min"";
""869_buyIntoSyndicate"" -> ""869_addMember"";
""869_allocateShares"" -> ""869_addMember"";
""869_distributeProfit"" -> ""869_roundIt"";
""869_setShareCycleSessionSize"" -> ""869_onlyOwner"";
""869_updatePlayCount"" -> ""869_insertCyclePlayer"";
""869_allocateShares"" -> ""869_onlyOwner"";
}
"
0xa2e59b1c5e64130d06f08a99cd5eda8af9c68b8a.sol,Broker,"contract Broker is Administration { event BrokerRegistered(uint indexed brokerId, address indexed broker); event AppendSubBroker(uint indexed brokerId, uint indexed subBrokerId, address indexed subBroker); event BrokerTransfer(address indexed newBroker, uint indexed brokerId, uint indexed subBrokerId); event BrokerFeeDistrubution(address indexed vipBroker, uint indexed vipShare, address indexed broker, uint share); event BrokerFeeClaim(address indexed broker, uint indexed fee); mapping (uint => address[]) BrokerIdToBrokers; mapping (uint => uint) BrokerIdToSpots; mapping (address => uint) BrokerIncoming; uint public vipBrokerFee = 5 ether; uint public brokerFee = 1.5 ether; uint public vipBrokerNum = 1000; uint public subBrokerNum = 5; function _brokerFeeDistribute(uint _price, uint _type, uint _brokerId, uint _subBrokerId) internal { address vipBroker = getBrokerAddress(_brokerId, 0); address broker = getBrokerAddress(_brokerId, _subBrokerId); require(vipBroker != address(0) && broker != address(0)); uint totalShare = _price*rewardPercent[_type]/100; BrokerIncoming[vipBroker] = BrokerIncoming[vipBroker] + totalShare*15/100; BrokerIncoming[broker] = BrokerIncoming[broker] + totalShare*85/100; emit BrokerFeeDistrubution(vipBroker, totalShare*15/100, broker, totalShare*85/100); }",1,"subgraph cluster_911_Broker {
label=""Broker"";
""911_claimBrokerFee"" [label=""claimBrokerFee""];
""911_getBrokerIncoming"" [label=""getBrokerIncoming""];
""911_getBrokerInfo"" [label=""getBrokerInfo""];
""911_registerBroker"" [label=""registerBroker""];
""911_assignSubBroker"" [label=""assignSubBroker""];
""911__brokerFeeDistribute"" [label=""_brokerFeeDistribute""];
""911_getBrokerAddress"" [label=""getBrokerAddress""];
""911_transferBroker"" [label=""transferBroker""];
""911_getVipBrokerNum"" [label=""getVipBrokerNum""];
""911_transferBroker"" -> ""911_whenNotPaused"";
""911__brokerFeeDistribute"" -> ""911_getBrokerAddress"";
""911_claimBrokerFee"" -> ""911_whenNotPaused"";
""911_getVipBrokerNum"" -> ""911_safeSub"";
}
"
0x4cdee773fd90f91e98b7d33db5c12376deee3b08.sol,NEBC,"contract NEBC is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 390000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function NEBC() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_NEBC {
label=""NEBC"";
""706_NEBC"" [label=""NEBC""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x1a7208627ffe43a69f13f3c393a41712fa4a7831.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_369_AccessService {
label=""AccessService"";
""369_withdraw"" [label=""withdraw""];
""369_setService"" [label=""setService""];
""369_setFinance"" [label=""setFinance""];
}
"
0xd6aca5b766853f7879d153fdb7567be356dd46ec.sol,ExeniumToken,"contract ExeniumToken is FrozenToken { string public name = ; string public symbol = ; uint8 public decimals = 8; string public version = ; string public publisher = ""https: string public description = ; bool public acceptAdminWithdraw = false; bool public acceptDonate = true; event InfoChanged(address indexed sender, string version, string publisher, string description); event Withdraw(address indexed sender, address indexed wallet, uint256 amount); event WithdrawTokens(address indexed sender, address indexed wallet, address indexed token, uint256 amount); event Donate(address indexed sender, uint256 value); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); function ExeniumToken() public {}",1,"subgraph cluster_2235_ExeniumToken {
label=""ExeniumToken"";
""2235_ExeniumToken"" [label=""ExeniumToken""];
""2235_setupInfo"" [label=""setupInfo""];
""2235_fallback"" [label=""fallback""];
""2235_balanceToken"" [label=""balanceToken""];
""2235_donate"" [label=""donate""];
""2235_withdrawAmount"" [label=""withdrawAmount""];
""2235_updAcceptAdminWithdraw"" [label=""updAcceptAdminWithdraw""];
""2235_withdraw"" [label=""withdraw""];
""2235_updAcceptDonate"" [label=""updAcceptDonate""];
""2235_withdrawTokens"" [label=""withdrawTokens""];
""2235_fallback"" -> ""2235_donate"";
""2235_balanceToken"" -> ""2235_validAddress"";
""2235_withdrawAmount"" -> ""2235_greaterThanZero"";
""2235_withdrawAmount"" -> ""2235_authLevel"";
""2235_setupInfo"" -> ""2235_notEmpty"";
""2235_withdraw"" -> ""2235_withdrawAmount"";
""2235_updAcceptAdminWithdraw"" -> ""2235_onlyOwner"";
""2235_donate"" -> ""2235_greaterThanZero"";
""2235_withdrawTokens"" -> ""2235_validAddress"";
""2235_updAcceptDonate"" -> ""2235_authLevel"";
""2235_withdrawTokens"" -> ""2235_authLevel"";
""2235_withdrawAmount"" -> ""2235_validBalanceThis"";
""2235_setupInfo"" -> ""2235_authLevel"";
""2235_withdrawTokens"" -> ""2235_greaterThanZero"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,ClockAuction,"contract ClockAuction is Pausable, ClockAuctionBase { bytes4 constant InterfaceSignature_ERC721 = bytes4(0x80ac58cd); constructor(address _nftAddress, uint256 _cut) public { require(_cut <= 10000); ownerCut = _cut; ERC721Token candidateContract = ERC721Token(_nftAddress); require(candidateContract.supportsInterface(InterfaceSignature_ERC721)); nonFungibleContract = candidateContract; }",1,"subgraph cluster_2307_ClockAuctionBase {
label=""ClockAuctionBase"";
""2307__transfer"" [label=""_transfer""];
""2307__computeCut"" [label=""_computeCut""];
""2307__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""2307__escrow"" [label=""_escrow""];
""2307__cancelAuction"" [label=""_cancelAuction""];
""2307__isOnAuction"" [label=""_isOnAuction""];
""2307__currentPrice"" [label=""_currentPrice""];
""2307__bid"" [label=""_bid""];
""2307__addAuction"" [label=""_addAuction""];
""2307__removeAuction"" [label=""_removeAuction""];
""2307_isOwnerOf"" [label=""isOwnerOf""];
""2307__bid"" -> ""2307__computeCut"";
""2307__cancelAuction"" -> ""2307__removeAuction"";
""2307__currentPrice"" -> ""2307__computeCurrentPrice"";
""2307__bid"" -> ""2307__isOnAuction"";
""2307__bid"" -> ""2307__currentPrice"";
""2307__cancelAuction"" -> ""2307__transfer"";
""2307__bid"" -> ""2307__removeAuction"";
}
"
0x6c940a8d477922f1cffe012449321098e06db3f7.sol,CryptoGain,contract CryptoGain { using SafeMath for uint256; struct Bid { address player; uint8 slot_from; uint8 slot_to; },1,"subgraph cluster_649_CryptoGain {
label=""CryptoGain"";
""649_set_admin"" [label=""set_admin""];
""649_is_slot_in_bid"" [label=""is_slot_in_bid""];
""649_destruct"" [label=""destruct""];
""649_CryptoGain"" [label=""CryptoGain""];
""649_fallback"" [label=""fallback""];
""649_run"" [label=""run""];
""649_get_foreign_balance"" [label=""get_foreign_balance""];
""649_playout"" [label=""playout""];
""649_bid"" [label=""bid""];
""649_restart"" [label=""restart""];
""649_search_winner_bid_address"" [label=""search_winner_bid_address""];
""649_reset"" [label=""reset""];
""649_withdraw"" [label=""withdraw""];
""649_remove_exceed"" [label=""remove_exceed""];
""649_get_balance"" [label=""get_balance""];
""649_search_winner_bid_address"" -> ""649_is_slot_in_bid"";
""649_reset"" -> ""649_onlyOwner"";
""649_run"" -> ""649_playout"";
""649_reset"" -> ""649_restart"";
""649_fallback"" -> ""649_run"";
""649_bid"" -> ""649_remove_exceed"";
""649_run"" -> ""649_onlyAlive"";
""649_run"" -> ""649_bid"";
""649_run"" -> ""649_remove_exceed"";
""649_playout"" -> ""649_search_winner_bid_address"";
""649_destruct"" -> ""649_onlyOwner"";
""649_set_admin"" -> ""649_onlyOwner"";
""649_playout"" -> ""649_restart"";
""649_withdraw"" -> ""649_onlyAlive"";
}
"
0x1fe3825a3012e581843a483df1452fc2fa4f0bad.sol,JcashRegistrar,"contract JcashRegistrar is CommonModifiers, Ownable, Manageable, Pausable, JNTPayableService, JcashRegistrarInterface { mapping (bytes32 => bool) processedTxs; event ReceiveEthEvent(address indexed from, uint256 value); event RefundEthEvent(bytes32 txhash, address indexed to, uint256 value); event TransferEthEvent(bytes32 txhash, address indexed to, uint256 value); event RefundTokenEvent(bytes32 txhash, address indexed tokenaddress, address indexed to, uint256 value); event TransferTokenEvent(bytes32 txhash, address indexed tokenaddress, address indexed to, uint256 value); event ReplenishEthEvent(address indexed from, uint256 value); event WithdrawEthEvent(address indexed to, uint256 value); event WithdrawTokenEvent(address indexed tokenaddress, address indexed to, uint256 value); event PauseEvent(); event UnpauseEvent(); modifier onlyPayloadSize(uint256 size) { require(msg.data.length == (size + 4)); _; }",1,"subgraph cluster_1985_JcashRegistrar {
label=""JcashRegistrar"";
""1985_withdrawToken"" [label=""withdrawToken""];
""1985_transferToken"" [label=""transferToken""];
""1985_refundToken"" [label=""refundToken""];
""1985_fallback"" [label=""fallback""];
""1985_isProcessedTx"" [label=""isProcessedTx""];
""1985_withdrawEth"" [label=""withdrawEth""];
""1985_refundEth"" [label=""refundEth""];
""1985_transferEth"" [label=""transferEth""];
""1985_transferToken"" -> ""1985_initChargeJNT"";
""1985_transferToken"" -> ""1985_onlyAllowedManager"";
""1985_transferToken"" -> ""1985_whenContractNotPaused"";
""1985_fallback"" -> ""1985_getPaused"";
""1985_refundToken"" -> ""1985_onlyPayloadSize"";
""1985_refundEth"" -> ""1985_whenContractNotPaused"";
""1985_refundEth"" -> ""1985_onlyPayloadSize"";
""1985_withdrawToken"" -> ""1985_onlyPayloadSize"";
""1985_withdrawEth"" -> ""1985_onlyAllowedManager"";
""1985_transferToken"" -> ""1985_onlyPayloadSize"";
""1985_fallback"" -> ""1985_isManagerAllowed"";
""1985_refundToken"" -> ""1985_onlyAllowedManager"";
""1985_transferToken"" -> ""1985_getActionPrice"";
""1985_isProcessedTx"" -> ""1985_onlyPayloadSize"";
""1985_withdrawEth"" -> ""1985_onlyPayloadSize"";
""1985_transferEth"" -> ""1985_onlyAllowedManager"";
""1985_transferEth"" -> ""1985_getActionPrice"";
""1985_refundToken"" -> ""1985_whenContractNotPaused"";
""1985_refundEth"" -> ""1985_onlyAllowedManager"";
""1985_transferEth"" -> ""1985_whenContractNotPaused"";
""1985_withdrawToken"" -> ""1985_onlyAllowedManager"";
""1985_transferEth"" -> ""1985_initChargeJNT"";
""1985_transferEth"" -> ""1985_onlyPayloadSize"";
}
"
0x2d92102bf50c111d59b93f7a10bafd13e770ed61.sol,Ownable,"contract Ownable { address public owner; event OwnershipRenounced(address indexed previousOwner); event OwnershipTransferred( address indexed previousOwner, address indexed newOwner ); constructor() public { owner = msg.sender; }",1,"subgraph cluster_95_Ownable {
label=""Ownable"";
""95_kill"" [label=""kill""];
""95__transferOwnership"" [label=""_transferOwnership""];
""95_constructor"" [label=""constructor""];
""95_transferOwnership"" [label=""transferOwnership""];
""95_renounceOwnership"" [label=""renounceOwnership""];
""95_renounceOwnership"" -> ""95_onlyOwner"";
""95_transferOwnership"" -> ""95__transferOwnership"";
""95_kill"" -> ""95_onlyOwner"";
""95_transferOwnership"" -> ""95_onlyOwner"";
}
"
0x93143d3e34a50aebab466368c3455fd858f77ad3.sol,FourOutOfFive,contract FourOutOfFive { struct GroupData { uint groupId; address[] participants; uint timestamp; uint betSize; uint rewardSize; uint8 rewardsAvailable; address[] rewardedParticipants; bool completed; },1,"subgraph cluster_670_FourOutOfFive {
label=""FourOutOfFive"";
""670__getContactOwnerBalance"" [label=""_getContactOwnerBalance""];
""670_withdrawOwnerMaxPossibleSafe"" [label=""withdrawOwnerMaxPossibleSafe""];
""670_placeBet"" [label=""placeBet""];
""670__getGroupRewardSize"" [label=""_getGroupRewardSize""];
""670_setMaxAndMinBet"" [label=""setMaxAndMinBet""];
""670__getGroupParticipants"" [label=""_getGroupParticipants""];
""670__getGroupIds"" [label=""_getGroupIds""];
""670_constructor"" [label=""constructor""];
""670__getGroupComplete"" [label=""_getGroupComplete""];
""670__getMaxWithdraw"" [label=""_getMaxWithdraw""];
""670__getGroupRewardedParticipants"" [label=""_getGroupRewardedParticipants""];
""670__getContactBalance"" [label=""_getContactBalance""];
""670_claimReward"" [label=""claimReward""];
""670__getMaxPossibleWithdraw"" [label=""_getMaxPossibleWithdraw""];
""670__getGroupRewardsAvailable"" [label=""_getGroupRewardsAvailable""];
""670_constructor"" -> ""670_setMaxAndMinBet"";
""670_withdrawOwnerMaxPossibleSafe"" -> ""670_onlyOwner"";
""670_setMaxAndMinBet"" -> ""670_onlyOwner"";
}
"
0x035611f47a13f3603109152952f0034c674959ba.sol,ReservationFund,"contract ReservationFund is ICrowdsaleReservationFund, Ownable, SafeMath { bool public crowdsaleFinished = false; mapping(address => uint256) contributions; mapping(address => uint256) tokensToIssue; mapping(address => uint256) bonusTokensToIssue; ISimpleCrowdsale public crowdsale; event RefundPayment(address contributor, uint256 etherAmount); event TransferToFund(address contributor, uint256 etherAmount); event FinishCrowdsale(); function ReservationFund(address _owner) public Ownable(_owner) { }",1,"subgraph cluster_558_ReservationFund {
label=""ReservationFund"";
""558_onCrowdsaleEnd"" [label=""onCrowdsaleEnd""];
""558_contributionsOf"" [label=""contributionsOf""];
""558_ReservationFund"" [label=""ReservationFund""];
""558_completeContribution"" [label=""completeContribution""];
""558_refundPayment"" [label=""refundPayment""];
""558_processContribution"" [label=""processContribution""];
""558_setCrowdsaleAddress"" [label=""setCrowdsaleAddress""];
""558_canCompleteContribution"" [label=""canCompleteContribution""];
""558_setCrowdsaleAddress"" -> ""558_onlyOwner"";
""558_ReservationFund"" -> ""558_Ownable"";
""558_onCrowdsaleEnd"" -> ""558_onlyCrowdsale"";
""558_processContribution"" -> ""558_safeAdd"";
""558_processContribution"" -> ""558_onlyCrowdsale"";
}
"
0x33dcb440beb0c640fa75ac297bc2e048e6853844.sol,Bonds,contract Bonds { uint ACTIVATION_TIME = 1539302400; modifier onlyOwner(){ require(msg.sender == dev); _; },1,"subgraph cluster_1302_Bonds {
label=""Bonds"";
""1302_extDistributeBondFund"" [label=""extDistributeBondFund""];
""1302_getMyBalance"" [label=""getMyBalance""];
""1302_buy"" [label=""buy""];
""1302_distributeYield"" [label=""distributeYield""];
""1302_withdrawPart"" [label=""withdrawPart""];
""1302_setAllowReferral"" [label=""setAllowReferral""];
""1302_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""1302_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1302_setMaxbonds"" [label=""setMaxbonds""];
""1302_gettotalBondDivs"" [label=""gettotalBondDivs""];
""1302_getBondOwner"" [label=""getBondOwner""];
""1302_constructor"" [label=""constructor""];
""1302_setAutoNewbond"" [label=""setAutoNewbond""];
""1302_setInitialPrice"" [label=""setInitialPrice""];
""1302_addTotalBondValue"" [label=""addTotalBondValue""];
""1302_setBondPrice"" [label=""setBondPrice""];
""1302_addNewbond"" [label=""addNewbond""];
""1302_distributeBondFund"" [label=""distributeBondFund""];
""1302_setSymbol"" [label=""setSymbol""];
""1302_fallback"" [label=""fallback""];
""1302_transfer"" [label=""transfer""];
""1302_getTotalBondValue"" [label=""getTotalBondValue""];
""1302_getOwnerBalance"" [label=""getOwnerBalance""];
""1302_getBondPrice"" [label=""getBondPrice""];
""1302_getNextAvailableBond"" [label=""getNextAvailableBond""];
""1302_getBondDivShare"" [label=""getBondDivShare""];
""1302_withdraw"" [label=""withdraw""];
""1302_setName"" [label=""setName""];
""1302_setSymbol"" -> ""1302_onlyOwner"";
""1302_buy"" -> ""1302_addTotalBondValue"";
""1302_setBondPrice"" -> ""1302_onlyOwner"";
""1302_setAllowReferral"" -> ""1302_onlyOwner"";
""1302_setAutoNewbond"" -> ""1302_onlyOwner"";
""1302_setMaxbonds"" -> ""1302_onlyOwner"";
""1302_buy"" -> ""1302_distributeYield"";
""1302_buy"" -> ""1302_distributeBondFund"";
""1302_addNewbond"" -> ""1302_onlyOwner"";
""1302_extDistributeBondFund"" -> ""1302_onlyOwner"";
""1302_setName"" -> ""1302_onlyOwner"";
""1302_buy"" -> ""1302_isActivated"";
""1302_setInitialPrice"" -> ""1302_onlyOwner"";
""1302_withdrawPart"" -> ""1302_onlyOwner"";
""1302_addNewbond"" -> ""1302_addTotalBondValue"";
}
"
0x52b5a68d069a6c9b2f36f279e9d936557fe8d29c.sol,BridgeX_Network,"contract BridgeX_Network is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 25000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 15000000e8; uint public target0drop = 2000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_BridgeX_Network {
label=""BridgeX_Network"";
""1253_balanceOf"" [label=""balanceOf""];
""1253_approve"" [label=""approve""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_Distribute"" [label=""Distribute""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_fallback"" [label=""fallback""];
""1253_constructor"" [label=""constructor""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_getTokens"" [label=""getTokens""];
""1253_burn"" [label=""burn""];
""1253_transfer"" [label=""transfer""];
""1253_withdraw"" [label=""withdraw""];
""1253_add"" [label=""add""];
""1253_distr"" [label=""distr""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_allowance"" [label=""allowance""];
""1253_add"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_constructor"" -> ""1253_distr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
}
"
0xd359e3f53b5d4e11b8b11dc0772448f380accf3c.sol,Manageable,"contract Manageable is Ownable { address public manager; bool public contractLock; event ManagerTransferred(address indexed previousManager, address indexed newManager); event ContractLockChanged(address admin, bool state); function Manageable() public { manager = msg.sender; contractLock = false; }",1,"subgraph cluster_410_Manageable {
label=""Manageable"";
""410_payout"" [label=""payout""];
""410_Manageable"" [label=""Manageable""];
""410_transferManager"" [label=""transferManager""];
""410_withdrawFunds"" [label=""withdrawFunds""];
""410_setContractLock"" [label=""setContractLock""];
""410_withdrawFunds"" -> ""410_onlyOwner"";
""410_setContractLock"" -> ""410_onlyAdmin"";
""410_transferManager"" -> ""410_onlyAdmin"";
""410_payout"" -> ""410_onlyOwner"";
}
"
0xd74186459dd2e4aaff9330129ba68331761f38ae.sol,alfa_QUIZ,contract alfa_QUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_alfa_QUIZ {
label=""alfa_QUIZ"";
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x000621424c60951cb69e9d75d64b79813846d498.sol,HasNoEther,contract HasNoEther is Ownable { function HasNoEther() payable { require(msg.value == 0); },1,"subgraph cluster_197_HasNoEther {
label=""HasNoEther"";
""197_HasNoEther"" [label=""HasNoEther""];
""197_reclaimEther"" [label=""reclaimEther""];
""197_fallback"" [label=""fallback""];
""197_reclaimEther"" -> ""197_onlyOwner"";
}
"
0x46cefba4dd7512b2449e1ac4b730bfb7f77d1407.sol,DecentralizedExchangeHotPotato,contract DecentralizedExchangeHotPotato { address private owner; mapping (address => bool) private admins; struct Order { address creator; address owner; address issuer; uint256 tokenId; uint256 price; uint256 startTime; uint256 endTime; },1,"subgraph cluster_515_DecentralizedExchangeHotPotato {
label=""DecentralizedExchangeHotPotato"";
""515_put"" [label=""put""];
""515_isContract"" [label=""isContract""];
""515_totalOrder"" [label=""totalOrder""];
""515_allOf"" [label=""allOf""];
""515_withdrawAmount"" [label=""withdrawAmount""];
""515_DecentralizedExchangeHotPotato"" [label=""DecentralizedExchangeHotPotato""];
""515_withdrawAll"" [label=""withdrawAll""];
""515_removeAdmin"" [label=""removeAdmin""];
""515_revoke"" [label=""revoke""];
""515_getNextPrice"" [label=""getNextPrice""];
""515_addAdmin"" [label=""addAdmin""];
""515_buy"" [label=""buy""];
""515_isAdmin"" [label=""isAdmin""];
""515_name"" [label=""name""];
""515_setOwner"" [label=""setOwner""];
""515_removeAdmin"" -> ""515_onlyOwner"";
""515_withdrawAmount"" -> ""515_onlyAdmins"";
""515_setOwner"" -> ""515_onlyOwner"";
""515_buy"" -> ""515_isContract"";
""515_withdrawAll"" -> ""515_onlyAdmins"";
""515_buy"" -> ""515_getNextPrice"";
""515_addAdmin"" -> ""515_onlyOwner"";
}
"
0x6bd33d49d48f76abcd96652e5347e398aa3fda96.sol,BancorBuyer,contract BancorBuyer { mapping (address => uint) public balances; uint public reward; bool public bought_tokens; uint public time_bought; address sale = 0xBbc79794599b19274850492394004087cBf89710; address token = 0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C; address developer = 0x4e6A1c57CdBfd97e8efe831f8f4418b1F2A09e6e; function withdraw(){ uint amount = balances[msg.sender]; balances[msg.sender] = 0; msg.sender.transfer(amount); },1,"subgraph cluster_189_BancorBuyer {
label=""BancorBuyer"";
""189_withdraw"" [label=""withdraw""];
""189_buy"" [label=""buy""];
""189_default_helper"" [label=""default_helper""];
""189_fallback"" [label=""fallback""];
""189_add_reward"" [label=""add_reward""];
""189_fallback"" -> ""189_default_helper"";
}
"
0xd2df59cfcd5086264532936afde48a5312ce96bb.sol,Auction,"contract Auction is Ownable { using SafeMath for uint256; event bidPlaced(uint bid, address _address); event etherTransfered(uint amount, address _address); string _itemName; address _highestBidder; uint _highestBid; uint _minStep; uint _end; uint _start; constructor() public { _itemName = ; _highestBid = 0; _highestBidder = address(this); _end = 1540339140; _start = _end - 3 days; _minStep = 10000000000000000; }",1,"subgraph cluster_427_Auction {
label=""Auction"";
""427_queryBid"" [label=""queryBid""];
""427_constructor"" [label=""constructor""];
""427_queryBalance"" [label=""queryBalance""];
""427_weiToOwner"" [label=""weiToOwner""];
""427_placeBid"" [label=""placeBid""];
""427_weiToOwner"" -> ""427_contract_onlyOwner"";
}
"
0x000621424c60951cb69e9d75d64b79813846d498.sol,Destructible,contract Destructible is Ownable { function Destructible() payable { },1,"subgraph cluster_165_Destructible {
label=""Destructible"";
""165_Destructible"" [label=""Destructible""];
""165_destroy"" [label=""destroy""];
""165_destroyAndSend"" [label=""destroyAndSend""];
""165_destroy"" -> ""165_onlyOwner"";
""165_destroyAndSend"" -> ""165_onlyOwner"";
}
"
0xf2b89f45cc4ebbf11a36bdb4a4b24eada8dd30a7.sol,AirDrop,contract AirDrop is Ownable { Token public tokenInstance; function AirDrop(address _tokenAddress){ tokenInstance = Token(_tokenAddress); },1,"subgraph cluster_188_AirDrop {
label=""AirDrop"";
""188_transferEthToOnwer"" [label=""transferEthToOnwer""];
""188_AirDrop"" [label=""AirDrop""];
""188_doAirDrop"" [label=""doAirDrop""];
""188_fallback"" [label=""fallback""];
""188_kill"" [label=""kill""];
""188_transferEthToOnwer"" -> ""188_onlyOwner"";
""188_doAirDrop"" -> ""188_onlyOwner"";
""188_kill"" -> ""188_onlyOwner"";
}
"
0x5ae96153d99dfdd7a6b471451afe0f564e10b934.sol,CommonSale,contract CommonSale is StagedCrowdsale { address public multisigWallet; address public foundersTokensWallet; address public bountyTokensWallet; uint public foundersTokensPercent; uint public bountyTokensPercent; uint public price; uint public percentRate = 100; uint public softcap; bool public refundOn = false; bool public isSoftcapOn = false; mapping (address => uint) balances; CommonSale public nextSale; MintableToken public token; function setSoftcap(uint newSoftcap) onlyOwner { isSoftcapOn = true; softcap = newSoftcap; },1,"subgraph cluster_1467_CommonSale {
label=""CommonSale"";
""1467_setNextSale"" [label=""setNextSale""];
""1467_finishMinting"" [label=""finishMinting""];
""1467_fallback"" [label=""fallback""];
""1467_createTokens"" [label=""createTokens""];
""1467_setSoftcap"" [label=""setSoftcap""];
""1467_setBountyTokensPercent"" [label=""setBountyTokensPercent""];
""1467_refund"" [label=""refund""];
""1467_setToken"" [label=""setToken""];
""1467_setFoundersTokensPercent"" [label=""setFoundersTokensPercent""];
""1467_retrieveTokens"" [label=""retrieveTokens""];
""1467_setBountyTokensWallet"" [label=""setBountyTokensWallet""];
""1467_setFoundersTokensWallet"" [label=""setFoundersTokensWallet""];
""1467_setPrice"" [label=""setPrice""];
""1467_setMultisigWallet"" [label=""setMultisigWallet""];
""1467_setPercentRate"" [label=""setPercentRate""];
""1467_createTokens"" -> ""1467_whenNotPaused"";
""1467_createTokens"" -> ""1467_saleIsOn"";
""1467_createTokens"" -> ""1467_currentMilestone"";
""1467_setBountyTokensWallet"" -> ""1467_onlyOwner"";
""1467_setFoundersTokensPercent"" -> ""1467_onlyOwner"";
""1467_setPercentRate"" -> ""1467_onlyOwner"";
""1467_setSoftcap"" -> ""1467_onlyOwner"";
""1467_setMultisigWallet"" -> ""1467_onlyOwner"";
""1467_retrieveTokens"" -> ""1467_onlyOwner"";
""1467_setToken"" -> ""1467_onlyOwner"";
""1467_setPrice"" -> ""1467_onlyOwner"";
""1467_finishMinting"" -> ""1467_whenNotPaused"";
""1467_fallback"" -> ""1467_createTokens"";
""1467_createTokens"" -> ""1467_isUnderHardCap"";
""1467_finishMinting"" -> ""1467_onlyOwner"";
""1467_setBountyTokensPercent"" -> ""1467_onlyOwner"";
""1467_refund"" -> ""1467_whenNotPaused"";
""1467_setNextSale"" -> ""1467_onlyOwner"";
""1467_setFoundersTokensWallet"" -> ""1467_onlyOwner"";
}
"
0x1ff54baa4cfca0826e125e6e1e312a53748c2637.sol,LimeEyes,contract LimeEyes { address private _dev; struct Artwork { string _title; address _owner; bool _visible; uint256 _basePrice; uint256 _purchases; address[] _shareholders; mapping (address => bool) _hasShares; mapping (address => uint256) _shares; },1,"subgraph cluster_826_LimeEyes {
label=""LimeEyes"";
""826_getArtwork"" [label=""getArtwork""];
""826_stringToBytes32"" [label=""stringToBytes32""];
""826_purchaseSharesOfArtwork"" [label=""purchaseSharesOfArtwork""];
""826__exists"" [label=""_exists""];
""826_getAllShareholdersOfArtwork"" [label=""getAllShareholdersOfArtwork""];
""826_renameArtwork"" [label=""renameArtwork""];
""826_LimeEyes"" [label=""LimeEyes""];
""826_withdrawAmount"" [label=""withdrawAmount""];
""826_toggleArtworkVisibility"" [label=""toggleArtworkVisibility""];
""826_createArtwork"" [label=""createArtwork""];
""826_getAllArtworks"" [label=""getAllArtworks""];
""826_withdrawAll"" [label=""withdrawAll""];
""826_createArtwork"" -> ""826_onlyDev"";
""826_withdrawAll"" -> ""826_onlyDev"";
""826_renameArtwork"" -> ""826__exists"";
""826_purchaseSharesOfArtwork"" -> ""826__exists"";
""826_purchaseSharesOfArtwork"" -> ""826_getArtwork"";
""826_renameArtwork"" -> ""826_onlyDev"";
""826_withdrawAmount"" -> ""826_onlyDev"";
""826_getArtwork"" -> ""826__exists"";
""826_getAllArtworks"" -> ""826_getArtwork"";
""826_toggleArtworkVisibility"" -> ""826_onlyDev"";
""826_getAllShareholdersOfArtwork"" -> ""826__exists"";
""826_getAllArtworks"" -> ""826_stringToBytes32"";
""826_toggleArtworkVisibility"" -> ""826__exists"";
}
"
0x41a322b28d0ff354040e2cbc676f0320d8c8850d.sol,SupeRare,"contract SupeRare is ERC721Token, Ownable, ERC721Metadata { using SafeMath for uint256; uint256 public maintainerPercentage = 30; uint256 public creatorPercentage = 100; mapping(uint256 => address) private tokenBidder; mapping(uint256 => uint256) private tokenCurrentBid; mapping(uint256 => uint256) private tokenSalePrice; mapping(uint256 => address) private tokenCreator; mapping(uint256 => string) private tokenToURI; mapping(string => uint256) private uriOriginalToken; mapping(uint256 => bool) private tokenSold; mapping(address => bool) private creatorWhitelist; event WhitelistCreator(address indexed _creator); event Bid(address indexed _bidder, uint256 indexed _amount, uint256 indexed _tokenId); event AcceptBid(address indexed _bidder, address indexed _seller, uint256 _amount, uint256 indexed _tokenId); event CancelBid(address indexed _bidder, uint256 indexed _amount, uint256 indexed _tokenId); event Sold(address indexed _buyer, address indexed _seller, uint256 _amount, uint256 indexed _tokenId); event SalePriceSet(uint256 indexed _tokenId, uint256 indexed _price); modifier uniqueURI(string _uri) { require(uriOriginalToken[_uri] == 0); _; }",1,"subgraph cluster_1587_SupeRare {
label=""SupeRare"";
""1587_acceptBid"" [label=""acceptBid""];
""1587_returnCurrentBid"" [label=""returnCurrentBid""];
""1587_cancelBid"" [label=""cancelBid""];
""1587_buy"" [label=""buy""];
""1587_salePriceOfToken"" [label=""salePriceOfToken""];
""1587_symbol"" [label=""symbol""];
""1587_setSalePrice"" [label=""setSalePrice""];
""1587_transfer"" [label=""transfer""];
""1587_currentBidDetailsOfToken"" [label=""currentBidDetailsOfToken""];
""1587_clearBid"" [label=""clearBid""];
""1587_addNewToken"" [label=""addNewToken""];
""1587_payout"" [label=""payout""];
""1587_isWhitelisted"" [label=""isWhitelisted""];
""1587_isGreaterBid"" [label=""isGreaterBid""];
""1587_createToken"" [label=""createToken""];
""1587_addNewTokenWithEditions"" [label=""addNewTokenWithEditions""];
""1587_creatorOfToken"" [label=""creatorOfToken""];
""1587_tokenURI"" [label=""tokenURI""];
""1587_approve"" [label=""approve""];
""1587_bid"" [label=""bid""];
""1587_name"" [label=""name""];
""1587_whitelistCreator"" [label=""whitelistCreator""];
""1587_originalTokenOfUri"" [label=""originalTokenOfUri""];
""1587_setMaintainerPercentage"" [label=""setMaintainerPercentage""];
""1587_setCreatorPercentage"" [label=""setCreatorPercentage""];
""1587_setCreatorPercentage"" -> ""1587_onlyOwner"";
""1587_createToken"" -> ""1587_totalSupply"";
""1587_transfer"" -> ""1587_clearApprovalAndTransfer"";
""1587_addNewTokenWithEditions"" -> ""1587_onlyCreator"";
""1587_whitelistCreator"" -> ""1587_onlyOwner"";
""1587_tokenURI"" -> ""1587_ownerOf"";
""1587_bid"" -> ""1587_returnCurrentBid"";
""1587_setSalePrice"" -> ""1587_onlyOwnerOf"";
""1587_originalTokenOfUri"" -> ""1587_ownerOf"";
""1587_addNewToken"" -> ""1587_createToken"";
""1587_buy"" -> ""1587_clearBid"";
""1587_acceptBid"" -> ""1587_clearBid"";
""1587_acceptBid"" -> ""1587_ownerOf"";
""1587_cancelBid"" -> ""1587_clearBid"";
""1587_buy"" -> ""1587_ownerOf"";
""1587_bid"" -> ""1587_isGreaterBid"";
""1587_createToken"" -> ""1587__mint"";
""1587_acceptBid"" -> ""1587_onlyOwnerOf"";
""1587_addNewToken"" -> ""1587_uniqueURI"";
""1587_bid"" -> ""1587_notOwnerOf"";
""1587_buy"" -> ""1587_returnCurrentBid"";
""1587_acceptBid"" -> ""1587_payout"";
""1587_addNewTokenWithEditions"" -> ""1587_uniqueURI"";
""1587_buy"" -> ""1587_payout"";
""1587_setMaintainerPercentage"" -> ""1587_onlyOwner"";
""1587_addNewTokenWithEditions"" -> ""1587_createToken"";
""1587_addNewToken"" -> ""1587_onlyCreator"";
""1587_buy"" -> ""1587_notOwnerOf"";
""1587_acceptBid"" -> ""1587_clearApprovalAndTransfer"";
""1587_buy"" -> ""1587_clearApprovalAndTransfer"";
""1587_transfer"" -> ""1587_onlyOwnerOf"";
}
"
0x3a858b6aa825c23621e339677a5016cfc4ff8b12.sol,Enigma_X,contract Enigma_X { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Enigma_X {
label=""Enigma_X"";
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_New"" [label=""New""];
""148_Start"" [label=""Start""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x18b67380942d56c09001a3764ce1aa9e64644433.sol,TokenERC20,"contract TokenERC20 is Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 18; uint256 public totalSupply; uint256 public currentTotalSupply = 0; uint256 public airdrop; uint256 public startBalance; uint256 public buyPrice ; mapping(address => bool) touched; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) internal allowed; mapping(address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Burn(address indexed burner, uint256 value); constructor( uint256 initialSupply ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_909_TokenERC20 {
label=""TokenERC20"";
""909_selfdestructs"" [label=""selfdestructs""];
""909_increaseApproval"" [label=""increaseApproval""];
""909_allowance"" [label=""allowance""];
""909_mintToken"" [label=""mintToken""];
""909_getBalance"" [label=""getBalance""];
""909_burn"" [label=""burn""];
""909_decreaseApproval"" [label=""decreaseApproval""];
""909_modifyairdrop"" [label=""modifyairdrop""];
""909_freezeAccount"" [label=""freezeAccount""];
""909_setPrices"" [label=""setPrices""];
""909_getEth"" [label=""getEth""];
""909__burn"" [label=""_burn""];
""909_approve"" [label=""approve""];
""909_transferFrom"" [label=""transferFrom""];
""909_constructor"" [label=""constructor""];
""909_balanceOf"" [label=""balanceOf""];
""909_totalSupply"" [label=""totalSupply""];
""909_fallback"" [label=""fallback""];
""909_transfer"" [label=""transfer""];
""909_getEth"" -> ""909_onlyOwner"";
""909_modifyairdrop"" -> ""909_onlyOwner"";
""909_balanceOf"" -> ""909_getBalance"";
""909_selfdestructs"" -> ""909_onlyOwner"";
""909_burn"" -> ""909__burn"";
""909_freezeAccount"" -> ""909_onlyOwner"";
""909_setPrices"" -> ""909_onlyOwner"";
""909_mintToken"" -> ""909_onlyOwner"";
}
"
0xeece3bfd3c83715f1f801dfa6b735ac9093c5bc3.sol,SecuritySale,"contract SecuritySale is Ownable { bool public live; IInvestorList public investorList; event SaleLive(bool liveness); event EtherIn(address from, uint amount); event StartSale(); event EndSale(); constructor() public { live = false; }",1,"subgraph cluster_406_ISecuritySale {
label=""ISecuritySale"";
""406_setLive"" [label=""setLive""];
""406_setInvestorList"" [label=""setInvestorList""];
}
"
0x5576250692275701efde5eeb51596e2d9460790b.sol,UserDataManager,contract UserDataManager { using NameFilter for string; address private admin = msg.sender; uint256 public registrationFee_ = 0; mapping(uint256 => UserDataManagerReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; struct Player { address addr; bytes32 name; uint256 laff; },1,"subgraph cluster_13_UserDataManagerReceiverInterface {
label=""UserDataManagerReceiverInterface"";
""13_receivePlayerInfo"" [label=""receivePlayerInfo""];
}
"
0x32fcdefa047d8edeea0c21a50179b18181074c60.sol,CryptoSanguoToken,"contract CryptoSanguoToken { using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; bool private erc721Enabled = false; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256 private min_value = 0.01 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private startingPriceOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function CryptoSanguoToken () public { owner = msg.sender; admins[owner] = true; issueCard(1, 7, 5); }",1,"subgraph cluster_1362_CryptoSanguoToken {
label=""CryptoSanguoToken"";
""1362_enableERC721"" [label=""enableERC721""];
""1362_totalSupply"" [label=""totalSupply""];
""1362_name"" [label=""name""];
""1362_transfer"" [label=""transfer""];
""1362_transferFrom"" [label=""transferFrom""];
""1362_CryptoSanguoToken"" [label=""CryptoSanguoToken""];
""1362_listItem"" [label=""listItem""];
""1362_tokensOf"" [label=""tokensOf""];
""1362_issueCard"" [label=""issueCard""];
""1362_setOwner"" [label=""setOwner""];
""1362_ownerOf"" [label=""ownerOf""];
""1362_balanceOf"" [label=""balanceOf""];
""1362_removeAdmin"" [label=""removeAdmin""];
""1362_approve"" [label=""approve""];
""1362_buy"" [label=""buy""];
""1362_startingPriceOf"" [label=""startingPriceOf""];
""1362_implementsERC721"" [label=""implementsERC721""];
""1362_changePrice"" [label=""changePrice""];
""1362_nextPriceOf"" [label=""nextPriceOf""];
""1362_setItemRegistry"" [label=""setItemRegistry""];
""1362_symbol"" [label=""symbol""];
""1362__transfer"" [label=""_transfer""];
""1362_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1362_isAdmin"" [label=""isAdmin""];
""1362_tokenExists"" [label=""tokenExists""];
""1362_withdrawAmount"" [label=""withdrawAmount""];
""1362_approvedFor"" [label=""approvedFor""];
""1362_listMultipleItems"" [label=""listMultipleItems""];
""1362_priceOf"" [label=""priceOf""];
""1362_allOf"" [label=""allOf""];
""1362_calculateNextPrice"" [label=""calculateNextPrice""];
""1362_addAdmin"" [label=""addAdmin""];
""1362_isContract"" [label=""isContract""];
""1362_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1362_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1362_withdrawAll"" [label=""withdrawAll""];
""1362_calculateDevCut"" [label=""calculateDevCut""];
""1362__transfer"" -> ""1362_ownerOf"";
""1362_transferFrom"" -> ""1362_approvedFor"";
""1362_withdrawAll"" -> ""1362_onlyOwner"";
""1362_tokensOf"" -> ""1362_balanceOf"";
""1362_CryptoSanguoToken"" -> ""1362_issueCard"";
""1362_listMultipleItems"" -> ""1362_listItem"";
""1362_approve"" -> ""1362_ownerOf"";
""1362_listItemFromRegistry"" -> ""1362_onlyOwner"";
""1362_changePrice"" -> ""1362_onlyAdmins"";
""1362_buy"" -> ""1362_calculateDevCut"";
""1362_allOf"" -> ""1362_nextPriceOf"";
""1362_buy"" -> ""1362__transfer"";
""1362_buy"" -> ""1362_ownerOf"";
""1362_transferFrom"" -> ""1362__transfer"";
""1362_allOf"" -> ""1362_ownerOf"";
""1362_tokenExists"" -> ""1362_priceOf"";
""1362_withdrawAmount"" -> ""1362_onlyOwner"";
""1362_transfer"" -> ""1362__transfer"";
""1362_allOf"" -> ""1362_startingPriceOf"";
""1362_approve"" -> ""1362_tokenExists"";
""1362__transfer"" -> ""1362_tokenExists"";
""1362_buy"" -> ""1362_priceOf"";
""1362_allOf"" -> ""1362_priceOf"";
""1362_listMultipleItems"" -> ""1362_onlyAdmins"";
""1362_addAdmin"" -> ""1362_onlyOwner"";
""1362_listItem"" -> ""1362_onlyAdmins"";
""1362_nextPriceOf"" -> ""1362_calculateNextPrice"";
""1362_nextPriceOf"" -> ""1362_priceOf"";
""1362_removeAdmin"" -> ""1362_onlyOwner"";
""1362_enableERC721"" -> ""1362_onlyOwner"";
""1362_populateFromItemRegistry"" -> ""1362_onlyOwner"";
""1362_buy"" -> ""1362_nextPriceOf"";
""1362_setOwner"" -> ""1362_onlyOwner"";
""1362_populateFromItemRegistry"" -> ""1362_listItemFromRegistry"";
""1362_setItemRegistry"" -> ""1362_onlyOwner"";
""1362_listItemFromRegistry"" -> ""1362_listItem"";
""1362_transferFrom"" -> ""1362_onlyERC721"";
""1362_transfer"" -> ""1362_ownerOf"";
""1362_transfer"" -> ""1362_onlyERC721"";
""1362_tokensOf"" -> ""1362_ownerOf"";
""1362_approve"" -> ""1362_onlyERC721"";
""1362_buy"" -> ""1362_isContract"";
""1362_balanceOf"" -> ""1362_ownerOf"";
""1362_issueCard"" -> ""1362_onlyAdmins"";
}
"
0x6fdfce60998725f4cfb4cc57505a3abdbb6d0646.sol,SelfKeyToken,"contract SelfKeyToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function SelfKeyToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_SelfKeyToken {
label=""SelfKeyToken"";
""401_balanceOf"" [label=""balanceOf""];
""401_approve"" [label=""approve""];
""401_transferFrom"" [label=""transferFrom""];
""401_mintTo"" [label=""mintTo""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_totalSupply"" [label=""totalSupply""];
""401_transfer"" [label=""transfer""];
""401_changeOwner"" [label=""changeOwner""];
""401_SelfKeyToken"" [label=""SelfKeyToken""];
""401_fallback"" [label=""fallback""];
""401_killContract"" [label=""killContract""];
}
"
0x00416b9d728069edb0ceb04bc2b203fa7336d1f1.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_processTransaction"" [label=""processTransaction""];
""928_pullBalance"" [label=""pullBalance""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_refundTransaction"";
""928_fallback"" -> ""928_processTransaction"";
}
"
0x1ac68e35dbd49a7250fa1b1ceb9dbd3110edaf50.sol,VikkyToken,"contract VikkyToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public airdropClaimed; mapping (address => bool) public refundClaimed; mapping (address => bool) public locked; mapping(address => uint) public icoEtherContributed; mapping(address => uint) public icoTokensReceived; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint constant E18 = 10**18; uint constant E6 = 10**6; uint public totalSupply = 1000 * E6 * E18; uint public totalDistributed = 220 * E6 * E18; uint public totalRemaining = totalSupply.sub(totalDistributed); uint public tokensPerEth = 20000 * E18; uint public tokensAirdrop = 266 * E18; uint public tokensClaimedAirdrop = 0; uint public totalDistributedAirdrop = 20 * E6 * E18; uint public constant MIN_CONTRIBUTION = 1 ether / 100; uint public constant MIN_CONTRIBUTION_PRESALE = 1 ether; uint public constant MAX_CONTRIBUTION = 100 ether; uint public constant MIN_FUNDING_GOAL = 5000 ether; uint public constant DATE_PRESALE_START = 1523862000; uint public constant DATE_PRESALE_END = 1524466800; uint public constant DATE_ICO_START = 1524466860; uint public constant DATE_ICO_END = 1530342000; uint public constant BONUS_PRESALE = 30; uint public constant BONUS_ICO_ROUND1 = 20; uint public constant BONUS_ICO_ROUND2 = 10; uint public constant BONUS_ICO_ROUND3 = 5; event TokensPerEthUpdated(uint _tokensPerEth); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Refund(address indexed _owner, uint _amount, uint _tokens); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event Burn(address indexed burner, uint256 value); event LockRemoved(address indexed _participant); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1633_VikkyToken {
label=""VikkyToken"";
""1633_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1633_finishDistribution"" [label=""finishDistribution""];
""1633_approve"" [label=""approve""];
""1633_balanceOf"" [label=""balanceOf""];
""1633_removeLock"" [label=""removeLock""];
""1633_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""1633_icoThresholdReached"" [label=""icoThresholdReached""];
""1633_systemClaimAirdropMultiple"" [label=""systemClaimAirdropMultiple""];
""1633_allowance"" [label=""allowance""];
""1633_distr"" [label=""distr""];
""1633_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""1633_transfer"" [label=""transfer""];
""1633_atNow"" [label=""atNow""];
""1633_buyTokens"" [label=""buyTokens""];
""1633_reclaimFund"" [label=""reclaimFund""];
""1633_reclaimFundMultiple"" [label=""reclaimFundMultiple""];
""1633_doAirdrop"" [label=""doAirdrop""];
""1633_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1633_getTokenBalance"" [label=""getTokenBalance""];
""1633_distribution"" [label=""distribution""];
""1633_removeLockMultiple"" [label=""removeLockMultiple""];
""1633_transferFrom"" [label=""transferFrom""];
""1633_distributeAmounts"" [label=""distributeAmounts""];
""1633_VikkyToken"" [label=""VikkyToken""];
""1633_fallback"" [label=""fallback""];
""1633_transferOwnership"" [label=""transferOwnership""];
""1633_withdraw"" [label=""withdraw""];
""1633_burn"" [label=""burn""];
""1633_reclaimFund"" -> ""1633_atNow"";
""1633_removeLockMultiple"" -> ""1633_removeLock"";
""1633_distribution"" -> ""1633_distr"";
""1633_withdraw"" -> ""1633_onlyOwner"";
""1633_distributeAmounts"" -> ""1633_distr"";
""1633_distr"" -> ""1633_canDistr"";
""1633_adminClaimAirdropMultiple"" -> ""1633_doAirdrop"";
""1633_finishDistribution"" -> ""1633_onlyOwner"";
""1633_transferOwnership"" -> ""1633_onlyOwner"";
""1633_fallback"" -> ""1633_buyTokens"";
""1633_buyTokens"" -> ""1633_distr"";
""1633_transfer"" -> ""1633_onlyPayloadSize"";
""1633_systemClaimAirdropMultiple"" -> ""1633_doAirdrop"";
""1633_distribution"" -> ""1633_onlyOwner"";
""1633_VikkyToken"" -> ""1633_distr"";
""1633_updateTokensPerEth"" -> ""1633_atNow"";
""1633_transferFrom"" -> ""1633_onlyPayloadSize"";
""1633_reclaimFundMultiple"" -> ""1633_reclaimFund"";
""1633_withdrawForeignTokens"" -> ""1633_onlyOwner"";
""1633_reclaimFund"" -> ""1633_icoThresholdReached"";
""1633_finishDistribution"" -> ""1633_canDistr"";
""1633_distribution"" -> ""1633_canDistr"";
""1633_buyTokens"" -> ""1633_atNow"";
""1633_distributeAmounts"" -> ""1633_onlyOwner"";
""1633_buyTokens"" -> ""1633_canDistr"";
""1633_adminClaimAirdrop"" -> ""1633_doAirdrop"";
""1633_burn"" -> ""1633_onlyOwner"";
""1633_updateTokensPerEth"" -> ""1633_onlyOwner"";
""1633_distributeAmounts"" -> ""1633_canDistr"";
}
"
0xee68907c93b57d57a1c4d60940ff1b310e18e467.sol,ICOBuyer,"contract ICOBuyer is Ownable { event EtherReceived(address indexed _contributor, uint256 _amount); event EtherWithdrawn(uint256 _amount); event TokensWithdrawn(uint256 _balance); event ICOPurchased(uint256 _amount); event ICOStartBlockChanged(uint256 _icoStartBlock); event ExecutorChanged(address _executor); event CrowdSaleChanged(address _crowdSale); event TokenChanged(address _token); event PurchaseCapChanged(uint256 _purchaseCap); uint256 public icoStartBlock; address public crowdSale; address public executor; uint256 public purchaseCap; modifier onlyExecutorOrOwner() { require((msg.sender == executor) || (msg.sender == owner)); _; }",1,"subgraph cluster_424_ICOBuyer {
label=""ICOBuyer"";
""424_withdrawEther"" [label=""withdrawEther""];
""424_ICOBuyer"" [label=""ICOBuyer""];
""424_withdrawTokens"" [label=""withdrawTokens""];
""424_changeCrowdSale"" [label=""changeCrowdSale""];
""424_changeExecutor"" [label=""changeExecutor""];
""424_fallback"" [label=""fallback""];
""424_getBlockNumber"" [label=""getBlockNumber""];
""424_buyICO"" [label=""buyICO""];
""424_changeICOStartBlock"" [label=""changeICOStartBlock""];
""424_changePurchaseCap"" [label=""changePurchaseCap""];
""424_changeICOStartBlock"" -> ""424_onlyOwner"";
""424_changePurchaseCap"" -> ""424_onlyOwner"";
""424_changeCrowdSale"" -> ""424_onlyOwner"";
""424_changeExecutor"" -> ""424_onlyOwner"";
""424_buyICO"" -> ""424_getBlockNumber"";
""424_withdrawTokens"" -> ""424_onlyOwner"";
""424_withdrawEther"" -> ""424_onlyOwner"";
""424_buyICO"" -> ""424_onlyExecutorOrOwner"";
}
"
0x722baa20d3b42fc1ec0b63fb84ba3fda47da4a26.sol,Presale,"contract Presale is AccessService, Random { ELHeroToken tokenContract; mapping (uint16 => uint16) public cardPresaleCounter; mapping (address => uint16[]) OwnerToPresale; uint256 public jackpotBalance; event CardPreSelled(address indexed buyer, uint16 protoId); event Jackpot(address indexed _winner, uint256 _value, uint16 _type); constructor(address _nftAddr) public { addrAdmin = msg.sender; addrService = msg.sender; addrFinance = msg.sender; tokenContract = ELHeroToken(_nftAddr); cardPresaleCounter[1] = 20; cardPresaleCounter[2] = 20; cardPresaleCounter[3] = 20; cardPresaleCounter[4] = 20; cardPresaleCounter[5] = 20; cardPresaleCounter[6] = 20; cardPresaleCounter[7] = 20; cardPresaleCounter[8] = 20; cardPresaleCounter[9] = 20; cardPresaleCounter[10] = 20; cardPresaleCounter[11] = 20; cardPresaleCounter[12] = 20; cardPresaleCounter[13] = 20; cardPresaleCounter[14] = 20; cardPresaleCounter[15] = 20; cardPresaleCounter[16] = 20; cardPresaleCounter[17] = 20; cardPresaleCounter[18] = 20; cardPresaleCounter[19] = 20; cardPresaleCounter[20] = 20; cardPresaleCounter[21] = 20; cardPresaleCounter[22] = 20; cardPresaleCounter[23] = 20; cardPresaleCounter[24] = 20; cardPresaleCounter[25] = 20; }",1,"subgraph cluster_2545_Presale {
label=""Presale"";
""2545_withdraw"" [label=""withdraw""];
""2545_getBuyArray"" [label=""getBuyArray""];
""2545_cardPresale"" [label=""cardPresale""];
""2545_getCardCanPresaleCount"" [label=""getCardCanPresaleCount""];
""2545_constructor"" [label=""constructor""];
""2545_fallback"" [label=""fallback""];
""2545_setELHeroTokenAddr"" [label=""setELHeroTokenAddr""];
""2545_eventPirze"" [label=""eventPirze""];
""2545_getBuyCount"" [label=""getBuyCount""];
""2545_setELHeroTokenAddr"" -> ""2545_onlyAdmin"";
""2545_cardPresale"" -> ""2545_whenNotPaused"";
""2545_cardPresale"" -> ""2545__rand"";
""2545_eventPirze"" -> ""2545_onlyAdmin"";
}
"
0x7638a5f444eab0281ca1abff2c8029cbb806a566.sol,XOXOCoin,"contract XOXOCoin is ERC20 { using SafeMath for uint256; address owner1 = msg.sender; address owner2; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) times; mapping (address => mapping (uint256 => uint256)) dorpnum; mapping (address => mapping (uint256 => uint256)) dorptime; mapping (address => mapping (uint256 => uint256)) freeday; mapping (address => bool) public frozenAccount; mapping (address => bool) public airlist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint256 _Rate = 10 ** decimals; uint256 public totalSupply = 200000000 * _Rate; uint256 public totalDistributed = 0; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value; uint256 public _per = 1; bool public distributionClosed = true; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event FrozenFunds(address target, bool frozen); event Distr(address indexed to, uint256 amount); event DistrClosed(bool Closed); modifier onlyOwner() { require(msg.sender == owner1 || msg.sender == owner2); _; }",1,"subgraph cluster_1210_XOXOCoin {
label=""XOXOCoin"";
""1210_Set_per"" [label=""Set_per""];
""1210_getTokens"" [label=""getTokens""];
""1210_transfer"" [label=""transfer""];
""1210_freezeAccount"" [label=""freezeAccount""];
""1210_fallback"" [label=""fallback""];
""1210_closeDistribution"" [label=""closeDistribution""];
""1210_XOXOCoin"" [label=""XOXOCoin""];
""1210_transferFrom"" [label=""transferFrom""];
""1210_lockOf"" [label=""lockOf""];
""1210_freeze"" [label=""freeze""];
""1210_distr"" [label=""distr""];
""1210_nowInSeconds"" [label=""nowInSeconds""];
""1210_allowance"" [label=""allowance""];
""1210_transferOwnership"" [label=""transferOwnership""];
""1210_distribute"" [label=""distribute""];
""1210_approve"" [label=""approve""];
""1210_withdraw"" [label=""withdraw""];
""1210_balanceOf"" [label=""balanceOf""];
""1210_closeDistribution"" -> ""1210_onlyOwner"";
""1210_distribute"" -> ""1210_onlyOwner"";
""1210_transfer"" -> ""1210_lockOf"";
""1210_transferFrom"" -> ""1210_lockOf"";
""1210_transfer"" -> ""1210_onlyPayloadSize"";
""1210_transferOwnership"" -> ""1210_onlyOwner"";
""1210_freeze"" -> ""1210_onlyOwner"";
""1210_withdraw"" -> ""1210_onlyOwner"";
""1210_transferFrom"" -> ""1210_onlyPayloadSize"";
""1210_Set_per"" -> ""1210_onlyOwner"";
""1210_distribute"" -> ""1210_distr"";
""1210_fallback"" -> ""1210_getTokens"";
""1210_freeze"" -> ""1210_freezeAccount"";
}
"
0x33ac37240f71629294de98e0b51f904fda17a366.sol,enigma,contract enigma { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_enigma {
label=""enigma"";
""143_fallback"" [label=""fallback""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_StopGame"" [label=""StopGame""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_Activate"" [label=""Activate""];
""143_Try"" [label=""Try""];
}
"
0x39e568276531f17da3c76d54400cfd8300201652.sol,CSC,"contract CSC { mapping (address => uint256) private balances; mapping (address => uint256[2]) private lockedBalances; string public name; uint8 public decimals; string public symbol; uint256 public totalSupply; address public owner; uint256 private icoLockUntil = 1543593540; event Transfer(address indexed _from, address indexed _to, uint256 _value); constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, address _owner, address[] _lockedAddress, uint256[] _lockedBalances, uint256[] _lockedTimes ) public { balances[_owner] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; owner = _owner; for(uint i = 0;i < _lockedAddress.length;i++){ lockedBalances[_lockedAddress[i]][0] = _lockedBalances[i]; lockedBalances[_lockedAddress[i]][1] = _lockedTimes[i]; }",1,"subgraph cluster_373_CSC {
label=""CSC"";
""373_balanceOf"" [label=""balanceOf""];
""373_withdraw"" [label=""withdraw""];
""373_burnFrom"" [label=""burnFrom""];
""373_setIcoLockUntil"" [label=""setIcoLockUntil""];
""373_transfer"" [label=""transfer""];
""373_withdrawTo"" [label=""withdrawTo""];
""373_constructor"" [label=""constructor""];
""373_makeCoin"" [label=""makeCoin""];
}
"
0x70052a651eec65f98925e845820a0aa5749b033d.sol,ATxBuyback,"contract ATxBuyback is Object, ATxBuybackInterface, ServiceAllowance { using SafeMath for uint; struct FeeData { uint feeValue; uint feeDecimals; }",1,"subgraph cluster_1767_ATxBuyback {
label=""ATxBuyback"";
""1767_tokenFallback"" [label=""tokenFallback""];
""1767_withdrawAllEth"" [label=""withdrawAllEth""];
""1767_fallback"" [label=""fallback""];
""1767_getRdFee"" [label=""getRdFee""];
""1767__takeRdFee"" [label=""_takeRdFee""];
""1767_setPrice"" [label=""setPrice""];
""1767_isTransferAllowed"" [label=""isTransferAllowed""];
""1767_setRdFee"" [label=""setRdFee""];
""1767_ATxBuyback"" [label=""ATxBuyback""];
""1767_setRdCollectorAddress"" [label=""setRdCollectorAddress""];
""1767_setActive"" [label=""setActive""];
""1767__validFee"" [label=""_validFee""];
""1767_withdrawAllEth"" -> ""1767_onlyContractOwner"";
""1767_setActive"" -> ""1767_onlyContractOwner"";
""1767_tokenFallback"" -> ""1767__takeRdFee"";
""1767_setPrice"" -> ""1767_onlyContractOwner"";
""1767_isTransferAllowed"" -> ""1767_onlyActive"";
""1767_setRdCollectorAddress"" -> ""1767_onlyContractOwner"";
""1767__takeRdFee"" -> ""1767__validFee"";
""1767_setRdFee"" -> ""1767_onlyContractOwner"";
""1767_setRdFee"" -> ""1767__validFee"";
}
"
0xf051a2f404435d3413337aae24171342fddc8571.sol,FoxicoPool,"contract FoxicoPool is Ownable { using SafeMath for uint256; mapping (address => uint256) public deposited; mapping (address => uint256) public claimed; uint256 public startTime; uint256 public endTime; address public wallet; bool public refundEnabled; event Refunded(address indexed beneficiary, uint256 weiAmount); event AddDeposit(address indexed beneficiary, uint256 value); function setStartTime(uint256 _startTime) public onlyOwner{ startTime = _startTime; }",1,"subgraph cluster_477_FoxicoPool {
label=""FoxicoPool"";
""477_deposit"" [label=""deposit""];
""477_FoxicoPool"" [label=""FoxicoPool""];
""477_setRefundEnabled"" [label=""setRefundEnabled""];
""477_setWallet"" [label=""setWallet""];
""477_refundFunds"" [label=""refundFunds""];
""477_fallback"" [label=""fallback""];
""477_setStartTime"" [label=""setStartTime""];
""477_addFunds"" [label=""addFunds""];
""477_validPurchase"" [label=""validPurchase""];
""477_forwardFunds"" [label=""forwardFunds""];
""477_refundWallet"" [label=""refundWallet""];
""477_setEndTime"" [label=""setEndTime""];
""477_claimRefund"" [label=""claimRefund""];
""477_setWallet"" -> ""477_onlyOwner"";
""477_deposit"" -> ""477_validPurchase"";
""477_setEndTime"" -> ""477_onlyOwner"";
""477_fallback"" -> ""477_deposit"";
""477_claimRefund"" -> ""477_refundFunds"";
""477_forwardFunds"" -> ""477_onlyOwner"";
""477_addFunds"" -> ""477_onlyOwner"";
""477_refundWallet"" -> ""477_refundFunds"";
""477_setStartTime"" -> ""477_onlyOwner"";
""477_setRefundEnabled"" -> ""477_onlyOwner"";
""477_refundWallet"" -> ""477_onlyOwner"";
}
"
0xeed618c15d12c635c3c319aee7bded2e2879aea0.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private _owner; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },1,"subgraph cluster_20_PlayerBookReceiverInterface {
label=""PlayerBookReceiverInterface"";
""20_receivePlayerInfo"" [label=""receivePlayerInfo""];
""20_receivePlayerNameList"" [label=""receivePlayerNameList""];
}
"
0x86e4dc25259ee2191cd8ae40e1865b9f0319646c.sol,CryptoRomeLandDistribution,"contract CryptoRomeLandDistribution is CryptoRomeControl { using SafeMath for uint256; address public newContractAddress; CryptoRomeLandComposableNFT public cryptoRomeLandNFTContract; ImprovementGeneration public improvementGenContract; uint256 public villageInventoryPrice; uint256 public numImprovementsPerVillage; uint256 constant public LOWEST_VILLAGE_INVENTORY_PRICE = 100000000000000000; constructor (address _cryptoRomeLandNFTContractAddress, address _improvementGenContractAddress) public { require (_cryptoRomeLandNFTContractAddress != address(0)); require (_improvementGenContractAddress != address(0)); paused = true; cryptoRomeLandNFTContract = CryptoRomeLandComposableNFT(_cryptoRomeLandNFTContractAddress); improvementGenContract = ImprovementGeneration(_improvementGenContractAddress); villageInventoryPrice = LOWEST_VILLAGE_INVENTORY_PRICE; numImprovementsPerVillage = 3; }",1,"subgraph cluster_3912_CryptoRomeLandDistribution {
label=""CryptoRomeLandDistribution"";
""3912_setNumImprovementsPerVillage"" [label=""setNumImprovementsPerVillage""];
""3912_batchIssueLand"" [label=""batchIssueLand""];
""3912_createLand"" [label=""createLand""];
""3912_batchCreateVillages"" [label=""batchCreateVillages""];
""3912_purchaseFromVillageInventory"" [label=""purchaseFromVillageInventory""];
""3912_setNewAddress"" [label=""setNewAddress""];
""3912_batchIssueVillages"" [label=""batchIssueVillages""];
""3912_computeFee"" [label=""computeFee""];
""3912_setCryptoRomeLandNFTContract"" [label=""setCryptoRomeLandNFTContract""];
""3912_constructor"" [label=""constructor""];
""3912_setVillageInventoryPrice"" [label=""setVillageInventoryPrice""];
""3912_issueVillageWithImprovementsForPromo"" [label=""issueVillageWithImprovementsForPromo""];
""3912_batchTransferTo"" [label=""batchTransferTo""];
""3912__createLandWithImprovements"" [label=""_createLandWithImprovements""];
""3912__createVillageWithImprovements"" [label=""_createVillageWithImprovements""];
""3912_transferTo"" [label=""transferTo""];
""3912_batchCreateLand"" [label=""batchCreateLand""];
""3912__createVillageWithImprovementsFromInv"" [label=""_createVillageWithImprovementsFromInv""];
""3912_issueLand"" [label=""issueLand""];
""3912_setImprovementGenContract"" [label=""setImprovementGenContract""];
""3912_createLand"" -> ""3912__createLandWithImprovements"";
""3912_setNewAddress"" -> ""3912_onlyOwner"";
""3912_purchaseFromVillageInventory"" -> ""3912__createVillageWithImprovementsFromInv"";
""3912_setImprovementGenContract"" -> ""3912_onlyOwner"";
""3912_issueLand"" -> ""3912_onlyOwner"";
""3912_transferTo"" -> ""3912_onlyOwner"";
""3912_batchIssueVillages"" -> ""3912_onlyOwner"";
""3912__createLandWithImprovements"" -> ""3912__createVillageWithImprovements"";
""3912_createLand"" -> ""3912_onlyOwner"";
""3912_batchCreateVillages"" -> ""3912__createVillageWithImprovements"";
""3912_purchaseFromVillageInventory"" -> ""3912_whenNotPaused"";
""3912__createLandWithImprovements"" -> ""3912__createLandWithImprovements"";
""3912_batchCreateVillages"" -> ""3912_onlyOwner"";
""3912_issueLand"" -> ""3912__createLandWithImprovements"";
""3912_setCryptoRomeLandNFTContract"" -> ""3912_onlyOwner"";
""3912_batchIssueLand"" -> ""3912_issueLand"";
""3912_batchTransferTo"" -> ""3912_onlyOwner"";
""3912_purchaseFromVillageInventory"" -> ""3912_computeFee"";
""3912_issueVillageWithImprovementsForPromo"" -> ""3912_onlyOwner"";
""3912_batchIssueLand"" -> ""3912_onlyOwner"";
""3912_setVillageInventoryPrice"" -> ""3912_onlyOwner"";
""3912_batchIssueVillages"" -> ""3912__createVillageWithImprovements"";
""3912_batchCreateLand"" -> ""3912_onlyOwner"";
""3912_batchCreateLand"" -> ""3912__createLandWithImprovements"";
""3912_setNumImprovementsPerVillage"" -> ""3912_onlyOwner"";
}
"
0x261ace754fba8af93e1fecdff13640540402940f.sol,Phila_Token,"contract Phila_Token is ERC20Interface, Owned { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 0; uint private constant _totalSupply = 10000000; address public vaultAddress; bool public fundingEnabled; uint public totalCollected; uint public tokenPrice; mapping(address => uint) balances; constructor() public { balances[this] = _totalSupply; emit Transfer(address(0), this, _totalSupply); }",1,"subgraph cluster_499_Phila_Token {
label=""Phila_Token"";
""499_transfer"" [label=""transfer""];
""499_approve"" [label=""approve""];
""499_constructor"" [label=""constructor""];
""499_fallback"" [label=""fallback""];
""499_balanceOf"" [label=""balanceOf""];
""499_transferFrom"" [label=""transferFrom""];
""499_totalSupply"" [label=""totalSupply""];
""499_allowance"" [label=""allowance""];
""499_setVaultAddress"" [label=""setVaultAddress""];
""499_claimTokens"" [label=""claimTokens""];
""499_setFundingEnabled"" [label=""setFundingEnabled""];
""499_updateTokenPrice"" [label=""updateTokenPrice""];
""499_updateTokenPrice"" -> ""499_onlyOwner"";
""499_claimTokens"" -> ""499_onlyOwner"";
""499_setVaultAddress"" -> ""499_onlyOwner"";
""499_setFundingEnabled"" -> ""499_onlyOwner"";
}
"
0xf030b8fbe57c4498298449fc78a0f7054a5ef76d.sol,ArkToken,"contract ArkToken is ERC721, Ownable { using SafeMath for uint256; uint256 private totalTokens; uint256 public developerCut; mapping (uint256 => Animal) public arkData; mapping (uint256 => address) private tokenOwner; mapping (uint256 => uint256) public babies; mapping (uint256 => uint256[2]) public babyMommas; mapping (uint256 => uint256) public mates; mapping (uint256 => uint256) public babyMakinPrice; mapping (uint256 => address) private tokenApprovals; mapping (address => uint256[]) private ownedTokens; mapping(uint256 => uint256) private ownedTokensIndex; mapping (address => uint256) public birtherBalances; event Purchase(uint256 indexed _tokenId, address indexed _buyer, address indexed _seller, uint256 _purchasePrice); event Birth(address indexed _birther, uint256 indexed _mom, uint256 _dad, uint256 indexed _baby); uint256 private firstCap = 0.5 ether; uint256 private secondCap = 1.0 ether; uint256 private thirdCap = 1.5 ether; uint256 private finalCap = 3.0 ether; struct Animal { uint256 price; uint256 lastPrice; address owner; address birther; uint256 birtherPct; uint8 gender; }",1,"subgraph cluster_1673_ArkToken {
label=""ArkToken"";
""1673_createToken"" [label=""createToken""];
""1673_clearApproval"" [label=""clearApproval""];
""1673_transfer"" [label=""transfer""];
""1673_getBabyMommas"" [label=""getBabyMommas""];
""1673_approve"" [label=""approve""];
""1673_checkBalance"" [label=""checkBalance""];
""1673_clearApprovalAndTransfer"" [label=""clearApprovalAndTransfer""];
""1673_buyToken"" [label=""buyToken""];
""1673_isApprovedFor"" [label=""isApprovedFor""];
""1673_transferToken"" [label=""transferToken""];
""1673_removeToken"" [label=""removeToken""];
""1673_tokenExists"" [label=""tokenExists""];
""1673_createBabies"" [label=""createBabies""];
""1673_getArkData"" [label=""getArkData""];
""1673_withdrawBalance"" [label=""withdrawBalance""];
""1673_balanceOf"" [label=""balanceOf""];
""1673_name"" [label=""name""];
""1673_totalSupply"" [label=""totalSupply""];
""1673_checkBirth"" [label=""checkBirth""];
""1673_getNextPrice"" [label=""getNextPrice""];
""1673__mint"" [label=""_mint""];
""1673_createMultiple"" [label=""createMultiple""];
""1673_takeOwnership"" [label=""takeOwnership""];
""1673_getBabyMakinPrice"" [label=""getBabyMakinPrice""];
""1673_approvedFor"" [label=""approvedFor""];
""1673_addToken"" [label=""addToken""];
""1673_createBaby"" [label=""createBaby""];
""1673_withdraw"" [label=""withdraw""];
""1673_getBirthCut"" [label=""getBirthCut""];
""1673_symbol"" [label=""symbol""];
""1673_tokensOf"" [label=""tokensOf""];
""1673_ownerOf"" [label=""ownerOf""];
""1673_autoBirth"" [label=""autoBirth""];
""1673_checkBirth"" -> ""1673_autoBirth"";
""1673_removeToken"" -> ""1673_balanceOf"";
""1673_takeOwnership"" -> ""1673_clearApprovalAndTransfer"";
""1673_createToken"" -> ""1673_onlyAdmin"";
""1673_createMultiple"" -> ""1673_createToken"";
""1673_transferToken"" -> ""1673_addToken"";
""1673_transferToken"" -> ""1673_clearApproval"";
""1673_isApprovedFor"" -> ""1673_approvedFor"";
""1673_createBabies"" -> ""1673_createBaby"";
""1673_approve"" -> ""1673_ownerOf"";
""1673_takeOwnership"" -> ""1673_isApprovedFor"";
""1673_transfer"" -> ""1673_onlyOwnerOf"";
""1673_autoBirth"" -> ""1673_transferToken"";
""1673_addToken"" -> ""1673_balanceOf"";
""1673_buyToken"" -> ""1673_isNotContract"";
""1673_createBaby"" -> ""1673_onlyAdmin"";
""1673_buyToken"" -> ""1673_getNextPrice"";
""1673_transferToken"" -> ""1673_removeToken"";
""1673_clearApprovalAndTransfer"" -> ""1673_ownerOf"";
""1673_createToken"" -> ""1673__mint"";
""1673_approve"" -> ""1673_approvedFor"";
""1673_approve"" -> ""1673_onlyOwnerOf"";
""1673_createMultiple"" -> ""1673_onlyAdmin"";
""1673_createBabies"" -> ""1673_onlyAdmin"";
""1673_removeToken"" -> ""1673_ownerOf"";
""1673_transferToken"" -> ""1673_tokenExists"";
""1673_getArkData"" -> ""1673_getNextPrice"";
""1673_clearApprovalAndTransfer"" -> ""1673_isNotContract"";
""1673_transfer"" -> ""1673_clearApprovalAndTransfer"";
""1673_clearApprovalAndTransfer"" -> ""1673_addToken"";
""1673__mint"" -> ""1673_addToken"";
""1673_buyToken"" -> ""1673_transferToken"";
""1673_withdraw"" -> ""1673_onlyAdmin"";
""1673_clearApproval"" -> ""1673_ownerOf"";
""1673_takeOwnership"" -> ""1673_ownerOf"";
""1673_clearApprovalAndTransfer"" -> ""1673_removeToken"";
""1673_clearApprovalAndTransfer"" -> ""1673_clearApproval"";
""1673_buyToken"" -> ""1673_checkBirth"";
}
"
0xe01ba6c593003b0edcd43b7839a7c36b00a44dfc.sol,SBITokenCrowdsale,"contract SBITokenCrowdsale is Owned, CrowdsaleParameters { using SafeMath for uint256; string public name = ; SBIToken private token; address public bank; address saleWalletAddress; uint private tokenMultiplier = 10; uint public totalCollected = 0; uint public saleStartTimestamp; uint public saleStopTimestamp; uint public saleGoal; bool public goalReached = false; uint public preicoTokensPerEth = 27314; uint public tokensPerEth = 10500; mapping (address => uint256) private investmentRecords; address crowdsaleAddress = this; uint256 public constant saleStartDate = 1530403200; uint256 public constant saleEndDate = 1535759940; uint256 public constant preSaleStartDate = 1529020800; uint256 public constant preSaleEndDate = 1530403140; uint public preSaleAmount = 5800000; event TokenSale(address indexed tokenReceiver, uint indexed etherAmount, uint indexed tokenAmount, uint tokensPerEther); event FundTransfer(address indexed from, address indexed to, uint indexed amount); function SBITokenCrowdsale(address _tokenAddress, address _bankAddress) public { token = SBIToken(_tokenAddress); bank = _bankAddress; tokenMultiplier = tokenMultiplier ** token.decimals(); saleWalletAddress = generalSaleWallet.addr; saleGoal = generalSaleWallet.amount; }",1,"subgraph cluster_1145_SBITokenCrowdsale {
label=""SBITokenCrowdsale"";
""1145_processPayment"" [label=""processPayment""];
""1145_SBITokenCrowdsale"" [label=""SBITokenCrowdsale""];
""1145_isICOActive"" [label=""isICOActive""];
""1145_fallback"" [label=""fallback""];
""1145_setTokenRate"" [label=""setTokenRate""];
""1145_safeWithdrawal"" [label=""safeWithdrawal""];
""1145_kill"" [label=""kill""];
""1145_processPayment"" -> ""1145_isICOActive"";
""1145_kill"" -> ""1145_onlyOwner"";
""1145_fallback"" -> ""1145_processPayment"";
""1145_safeWithdrawal"" -> ""1145_onlyOwner"";
""1145_kill"" -> ""1145_isICOActive"";
""1145_setTokenRate"" -> ""1145_onlyOwner"";
}
"
0xed616b87b2b441e4a36d23f27a660ea0f0faccbd.sol,Destructible,contract Destructible is Ownable { function Destructible() payable { },1,"subgraph cluster_234_Destructible {
label=""Destructible"";
""234_destroy"" [label=""destroy""];
""234_destroyAndSend"" [label=""destroyAndSend""];
""234_Destructible"" [label=""Destructible""];
""234_destroy"" -> ""234_onlyOwner"";
""234_destroyAndSend"" -> ""234_onlyOwner"";
}
"
0x4145492ad5039b802bd7e58098c8d71706a2cd14.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_470_RefundVault {
label=""RefundVault"";
""470_deposit"" [label=""deposit""];
""470_RefundVault"" [label=""RefundVault""];
""470_refund"" [label=""refund""];
""470_enableRefunds"" [label=""enableRefunds""];
""470_close"" [label=""close""];
""470_enableRefunds"" -> ""470_onlyOwner"";
""470_deposit"" -> ""470_onlyOwner"";
""470_close"" -> ""470_onlyOwner"";
}
"
0x4c1ef44b89fdadaea76a6a8004a1b7a5b6a7f603.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_183_Destructible {
label=""Destructible"";
""183_Destructible"" [label=""Destructible""];
""183_destroy"" [label=""destroy""];
""183_destroyAndSend"" [label=""destroyAndSend""];
""183_destroyAndSend"" -> ""183_onlyOwner"";
""183_destroy"" -> ""183_onlyOwner"";
}
"
0x929e488770ae5218cf4bb5387a390bd36b2135dd.sol,QUIZ_QUIZ,contract QUIZ_QUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_QUIZ_QUIZ {
label=""QUIZ_QUIZ"";
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_New"" [label=""New""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_fallback"" [label=""fallback""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x36ed5fbd27abf98f7081f1692ce48abab37db172.sol,Quiz_BliZ,contract Quiz_BliZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Quiz_BliZ {
label=""Quiz_BliZ"";
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0xf099c6ecb16575393b3ba6ac57b4ead943353a52.sol,BuddhaTower,"contract BuddhaTower { event onBuy ( address indexed buyerAddress, uint256 amount, uint256 currentHeight ); event onSplit( uint round, uint luckyNumber, address luckyPlayer ); event onTimeup( uint round, address lastBuyer ); event onQualifySuccess( address applier ); struct RoundData { uint256 maxHeight; uint256 lotteryPool; uint256 peakPool; uint256 tokenPot; uint[][] buyinfo; address[] buyAddress; uint256 startTime; uint256 endTime; address[] lotteryWinners; address finalWinner; }",1,"subgraph cluster_1969_BuddhaTower {
label=""BuddhaTower"";
""1969_wipeAll"" [label=""wipeAll""];
""1969_emergencyStart"" [label=""emergencyStart""];
""1969_splitLottery"" [label=""splitLottery""];
""1969_getQualified"" [label=""getQualified""];
""1969_constructor"" [label=""constructor""];
""1969_getLotteryWinner"" [label=""getLotteryWinner""];
""1969_endTime"" [label=""endTime""];
""1969_emergencyClose"" [label=""emergencyClose""];
""1969_activate"" [label=""activate""];
""1969_getLotteryWinnerLength"" [label=""getLotteryWinnerLength""];
""1969_getBuyInfoLength"" [label=""getBuyInfoLength""];
""1969_takeDevCut"" [label=""takeDevCut""];
""1969_buy"" [label=""buy""];
""1969_moveFromBanlist"" [label=""moveFromBanlist""];
""1969_getBuyAddress"" [label=""getBuyAddress""];
""1969_deposit"" [label=""deposit""];
""1969_getBuyInfo"" [label=""getBuyInfo""];
""1969_withdrawEth"" [label=""withdrawEth""];
""1969_addToBanlist"" [label=""addToBanlist""];
""1969_emergencyClose"" -> ""1969_onlyOwner"";
""1969_wipeAll"" -> ""1969_onlyOwner"";
""1969_withdrawEth"" -> ""1969_isBaned"";
""1969_deposit"" -> ""1969_buy"";
""1969_moveFromBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_endTime"";
""1969_deposit"" -> ""1969_isHuman"";
""1969_deposit"" -> ""1969_isBaned"";
""1969_emergencyStart"" -> ""1969_onlyOwner"";
""1969_deposit"" -> ""1969_isActive"";
""1969_withdrawEth"" -> ""1969_isHuman"";
""1969_constructor"" -> ""1969_activate"";
""1969_deposit"" -> ""1969_isWithinLimits"";
""1969_addToBanlist"" -> ""1969_onlyOwner"";
""1969_buy"" -> ""1969_splitLottery"";
""1969_activate"" -> ""1969_onlyOwner"";
""1969_takeDevCut"" -> ""1969_onlyOwner"";
}
"
0x7562eacac20093065c37ec6111baae15f152958c.sol,AICrypto,"contract AICrypto is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function AICrypto() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_AICrypto {
label=""AICrypto"";
""706_AICrypto"" [label=""AICrypto""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0xd871a7ce9bcf9cfbefbca3ede0ce53ba1787dfc9.sol,try_to_play,contract try_to_play { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_try_to_play {
label=""try_to_play"";
""143_NewQuestion"" [label=""NewQuestion""];
""143_fallback"" [label=""fallback""];
""143_StopGame"" [label=""StopGame""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
""143_ActivateContract"" [label=""ActivateContract""];
}
"
0x708a64eba17df26cd7085c494b725160ba1a6b7d.sol,RefundEscrow,"contract RefundEscrow is Ownable, ConditionalEscrow { enum State {Active, Refunding, Closed}",1,"subgraph cluster_2226_RefundEscrow {
label=""RefundEscrow"";
""2226_beneficiaryWithdraw"" [label=""beneficiaryWithdraw""];
""2226_withdrawalAllowed"" [label=""withdrawalAllowed""];
""2226_close"" [label=""close""];
""2226_deposit"" [label=""deposit""];
""2226_constructor"" [label=""constructor""];
""2226_enableRefunds"" [label=""enableRefunds""];
""2226_enableRefunds"" -> ""2226_onlyOwner"";
""2226_deposit"" -> ""2226_deposit"";
""2226_close"" -> ""2226_onlyOwner"";
}
"
0x6f5c1ed62a4fa41cfc332d81fafd3cd38aacbd85.sol,Vault,"contract Vault is TokenVault { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event OpenDate(uint date); mapping (address => uint) public Deposits; uint minDeposit; bool Locked; uint Date; function initVault() payable open { Owner = msg.sender; minDeposit = 0.25 ether; Locked = false; deposit(); }",1,"subgraph cluster_115_TokenVault {
label=""TokenVault"";
""115_withdrawToken"" [label=""withdrawToken""];
""115_emtpyTo"" [label=""emtpyTo""];
""115_withdrawTokenTo"" [label=""withdrawTokenTo""];
""115_withdrawTokenTo"" -> ""115_onlyOwner"";
""115_emtpyTo"" -> ""115_withdrawTokenTo"";
""115_withdrawToken"" -> ""115_withdrawTokenTo"";
}
"
0x7229bb50da9c01b28b9f1aace7711605d88afbd3.sol,OysterPrePearl,"contract OysterPrePearl { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 0; uint256 public funds = 0; address public owner; address public partner; bool public saleClosed = false; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function OysterPrePearl() public { owner = msg.sender; partner = 0x0524Fe637b77A6F5f0b3a024f7fD9Fe1E688A291; }",1,"subgraph cluster_522_OysterPrePearl {
label=""OysterPrePearl"";
""522_fallback"" [label=""fallback""];
""522_OysterPrePearl"" [label=""OysterPrePearl""];
""522_transfer"" [label=""transfer""];
""522__transfer"" [label=""_transfer""];
""522_openSale"" [label=""openSale""];
""522_approve"" [label=""approve""];
""522_closeSale"" [label=""closeSale""];
""522_burnFrom"" [label=""burnFrom""];
""522_transferFrom"" [label=""transferFrom""];
""522_approveAndCall"" [label=""approveAndCall""];
""522_burn"" [label=""burn""];
""522_withdrawFunds"" [label=""withdrawFunds""];
""522_openSale"" -> ""522_onlyOwner"";
""522_withdrawFunds"" -> ""522_onlyAuth"";
""522_transfer"" -> ""522__transfer"";
""522_transferFrom"" -> ""522__transfer"";
""522_closeSale"" -> ""522_onlyOwner"";
""522_approveAndCall"" -> ""522_approve"";
}
"
0xeb71e963645f1e76f233f70e1b0815e8f089bbc8.sol,SimplePHXExchange,contract SimplePHXExchange { uint public ScaleFactor = 10 ** 18; address[] public tknOfferors; mapping(address => uint256) public tknAddrNdx; mapping(address => uint256) public tknTokensOffered; mapping(address => uint256) public tknPricePerToken; address[] public ethOfferors; mapping(address => uint256) public ethAddrNdx; mapping(address => uint256) public ethEtherOffered; mapping(address => uint256) public ethPricePerToken; ERC20Token public phxCoin; function SimplePHXExchange() public { phxCoin = ERC20Token(0x14b759A158879B133710f4059d32565b4a66140C); tknOfferors.push(0x0); ethOfferors.push(0x0); },1,"subgraph cluster_657_SimplePHXExchange {
label=""SimplePHXExchange"";
""657_getTknOfferor"" [label=""getTknOfferor""];
""657_cancelTknOffer"" [label=""cancelTknOffer""];
""657_buyEth"" [label=""buyEth""];
""657_getNumEthOfferors"" [label=""getNumEthOfferors""];
""657__cancelTknOffer"" [label=""_cancelTknOffer""];
""657_getEthOfferPrice"" [label=""getEthOfferPrice""];
""657_SimplePHXExchange"" [label=""SimplePHXExchange""];
""657_cancelEthOffer"" [label=""cancelEthOffer""];
""657_updateTknPrice"" [label=""updateTknPrice""];
""657_getEthOfferor"" [label=""getEthOfferor""];
""657__cancelEthOffer"" [label=""_cancelEthOffer""];
""657_getTknOfferPrice"" [label=""getTknOfferPrice""];
""657_buyTkn"" [label=""buyTkn""];
""657_offerTkn"" [label=""offerTkn""];
""657_getEthOfferAmount"" [label=""getEthOfferAmount""];
""657_offerEth"" [label=""offerEth""];
""657_getNumTknOfferors"" [label=""getNumTknOfferors""];
""657_getTknOfferAmount"" [label=""getTknOfferAmount""];
""657_updateEthPrice"" [label=""updateEthPrice""];
""657__humanSender"" [label=""_humanSender""];
""657_offerEth"" -> ""657__humanSender"";
""657_cancelEthOffer"" -> ""657__cancelEthOffer"";
""657_buyEth"" -> ""657__humanSender"";
""657_offerTkn"" -> ""657__humanSender"";
""657_buyTkn"" -> ""657__humanSender"";
""657_cancelTknOffer"" -> ""657__cancelTknOffer"";
""657_buyEth"" -> ""657__cancelEthOffer"";
""657_buyTkn"" -> ""657__cancelTknOffer"";
}
"
0x50a667b73223bc612bcc43200120b5c46ee6b4e9.sol,RC,"contract RC is ICOEngineInterface, KYCBase { using SafeMath for uint256; TokenSale tokenSaleContract; uint256 public startTime; uint256 public endTime; uint256 public etherMinimum; uint256 public soldTokens; uint256 public remainingTokens; uint256 public oneTokenInFiatWei; mapping(address => uint256) public etherUser; mapping(address => uint256) public pendingTokenUser; mapping(address => uint256) public tokenUser; uint256[] public tokenThreshold; uint256[] public bonusThreshold; function RC(address _tokenSaleContract, uint256 _oneTokenInFiatWei, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) { require ( _tokenSaleContract != 0 ); require ( _oneTokenInFiatWei != 0 ); require( _remainingTokens != 0 ); require ( _tokenThreshold.length != 0 ); require ( _tokenThreshold.length == _bonusThreshold.length ); bonusThreshold = _bonusThreshold; tokenThreshold = _tokenThreshold; tokenSaleContract = TokenSale(_tokenSaleContract); tokenSaleContract.addMeByRC(); soldTokens = 0; remainingTokens = _remainingTokens; oneTokenInFiatWei = _oneTokenInFiatWei; etherMinimum = _etherMinimum; setTimeRC( _startTime, _endTime ); }",1,"subgraph cluster_1999_RCpro {
label=""RCpro"";
""1999_changeMinimum"" [label=""changeMinimum""];
""1999_totalTokens"" [label=""totalTokens""];
""1999_price"" [label=""price""];
""1999_userBalance"" [label=""userBalance""];
""1999_claimTokenBonus"" [label=""claimTokenBonus""];
""1999_startTime"" [label=""startTime""];
""1999_ended"" [label=""ended""];
""1999_fallback"" [label=""fallback""];
""1999_endTime"" [label=""endTime""];
""1999_giveToken"" [label=""giveToken""];
""1999_releaseTokensTo"" [label=""releaseTokensTo""];
""1999_withdraw"" [label=""withdraw""];
""1999_takeEther"" [label=""takeEther""];
""1999_refundEther"" [label=""refundEther""];
""1999_setTime"" [label=""setTime""];
""1999_setTimeRC"" [label=""setTimeRC""];
""1999_remainingTokens"" [label=""remainingTokens""];
""1999_started"" [label=""started""];
""1999_RCpro"" [label=""RCpro""];
""1999_RCpro"" -> ""1999_KYCBase"";
""1999_releaseTokensTo"" -> ""1999_takeEther"";
""1999_refundEther"" -> ""1999_onlyTokenSaleOwner"";
""1999_releaseTokensTo"" -> ""1999_giveToken"";
""1999_fallback"" -> ""1999_claimTokenBonus"";
""1999_changeMinimum"" -> ""1999_onlyTokenSaleOwner"";
""1999_fallback"" -> ""1999_takeEther"";
""1999_setTime"" -> ""1999_onlyTokenSaleOwner"";
""1999_withdraw"" -> ""1999_onlyTokenSaleOwner"";
""1999_RCpro"" -> ""1999_setTimeRC"";
}
"
0x887834d3b8d450b6bab109c252df3da286d73ce4.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1161_MiniMeToken {
label=""MiniMeToken"";
""1161_approveAndCall"" [label=""approveAndCall""];
""1161_totalSupply"" [label=""totalSupply""];
""1161_balanceOf"" [label=""balanceOf""];
""1161_updateValueAtNow"" [label=""updateValueAtNow""];
""1161_min"" [label=""min""];
""1161_createCloneToken"" [label=""createCloneToken""];
""1161_totalSupplyAt"" [label=""totalSupplyAt""];
""1161_enableTransfers"" [label=""enableTransfers""];
""1161_isContract"" [label=""isContract""];
""1161_balanceOfAt"" [label=""balanceOfAt""];
""1161_destroyTokens"" [label=""destroyTokens""];
""1161_getValueAt"" [label=""getValueAt""];
""1161_allowance"" [label=""allowance""];
""1161_MiniMeToken"" [label=""MiniMeToken""];
""1161_transferFrom"" [label=""transferFrom""];
""1161_fallback"" [label=""fallback""];
""1161_doTransfer"" [label=""doTransfer""];
""1161_claimTokens"" [label=""claimTokens""];
""1161_getBlockNumber"" [label=""getBlockNumber""];
""1161_transfer"" [label=""transfer""];
""1161_generateTokens"" [label=""generateTokens""];
""1161_approve"" [label=""approve""];
""1161_totalSupply"" -> ""1161_totalSupplyAt"";
""1161_destroyTokens"" -> ""1161_onlyController"";
""1161_balanceOfAt"" -> ""1161_min"";
""1161_generateTokens"" -> ""1161_balanceOf"";
""1161_MiniMeToken"" -> ""1161_getBlockNumber"";
""1161_doTransfer"" -> ""1161_isContract"";
""1161_generateTokens"" -> ""1161_onlyController"";
""1161_totalSupplyAt"" -> ""1161_getValueAt"";
""1161_balanceOf"" -> ""1161_balanceOfAt"";
""1161_generateTokens"" -> ""1161_updateValueAtNow"";
""1161_enableTransfers"" -> ""1161_onlyController"";
""1161_generateTokens"" -> ""1161_getValueAt"";
""1161_doTransfer"" -> ""1161_updateValueAtNow"";
""1161_destroyTokens"" -> ""1161_updateValueAtNow"";
""1161_destroyTokens"" -> ""1161_getBlockNumber"";
""1161_doTransfer"" -> ""1161_getBlockNumber"";
""1161_approve"" -> ""1161_isContract"";
""1161_totalSupplyAt"" -> ""1161_min"";
""1161_balanceOfAt"" -> ""1161_getValueAt"";
""1161_totalSupply"" -> ""1161_getBlockNumber"";
""1161_destroyTokens"" -> ""1161_balanceOf"";
""1161_transferFrom"" -> ""1161_doTransfer"";
""1161_balanceOf"" -> ""1161_getBlockNumber"";
""1161_doTransfer"" -> ""1161_balanceOfAt"";
""1161_destroyTokens"" -> ""1161_getValueAt"";
""1161_generateTokens"" -> ""1161_getBlockNumber"";
""1161_claimTokens"" -> ""1161_onlyController"";
""1161_createCloneToken"" -> ""1161_getBlockNumber"";
""1161_fallback"" -> ""1161_isContract"";
""1161_updateValueAtNow"" -> ""1161_getBlockNumber"";
""1161_transfer"" -> ""1161_doTransfer"";
""1161_approveAndCall"" -> ""1161_approve"";
}
"
0xa2388330bcb4b3d5f6395a3f5999fecb73960af3.sol,BTRCTOKEN,"contract BTRCTOKEN { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public constant _maxSupply = 33000000000000000000000000; uint256 public _totalSupply = 0; uint256 private price = 2500; bool public workingState = true; bool public transferAllowed = true; bool private generationState = true; address private owner; address private cur_coin; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) private etherClients; event FundsGot(address indexed _sender, uint256 _value); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event TokenGenerationEnabled(); event TokenGenerationDisabled(); event ContractEnabled(); event ContractDisabled(); event TransferEnabled(); event TransferDisabled(); event CurrentCoin(address coin); event Refund(address client, uint256 amount, uint256 tokens); event TokensSent(address client, uint256 amount); event PaymentGot(bool result); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_904_BTRCTOKEN {
label=""BTRCTOKEN"";
""904_transfer"" [label=""transfer""];
""904_balanceOf"" [label=""balanceOf""];
""904_totalSupply"" [label=""totalSupply""];
""904_fallback"" [label=""fallback""];
""904_transferFrom"" [label=""transferFrom""];
""904_enableContract"" [label=""enableContract""];
""904_disableContract"" [label=""disableContract""];
""904_setCurrentCoin"" [label=""setCurrentCoin""];
""904_disableTransfer"" [label=""disableTransfer""];
""904_BTRCTOKEN"" [label=""BTRCTOKEN""];
""904_allowance"" [label=""allowance""];
""904_contractState"" [label=""contractState""];
""904_getPrice"" [label=""getPrice""];
""904_generateTokens"" [label=""generateTokens""];
""904_refund"" [label=""refund""];
""904_transferState"" [label=""transferState""];
""904_disableGeneration"" [label=""disableGeneration""];
""904_enableGeneration"" [label=""enableGeneration""];
""904_approve"" [label=""approve""];
""904_setPrice"" [label=""setPrice""];
""904_enableTransfer"" [label=""enableTransfer""];
""904_kill"" [label=""kill""];
""904_tokenGenerationState"" [label=""tokenGenerationState""];
""904_balanceOf"" -> ""904_workingFlag"";
""904_enableTransfer"" -> ""904_onlyOwner"";
""904_BTRCTOKEN"" -> ""904_enableContract"";
""904_setCurrentCoin"" -> ""904_onlyOwner"";
""904_refund"" -> ""904_ownerAndCoin"";
""904_disableGeneration"" -> ""904_onlyOwner"";
""904_setPrice"" -> ""904_onlyOwner"";
""904_setCurrentCoin"" -> ""904_workingFlag"";
""904_generateTokens"" -> ""904_transferFrom"";
""904_fallback"" -> ""904_workingFlag"";
""904_totalSupply"" -> ""904_workingFlag"";
""904_disableTransfer"" -> ""904_onlyOwner"";
""904_transfer"" -> ""904_workingFlag"";
""904_disableContract"" -> ""904_onlyOwner"";
""904_refund"" -> ""904_workingFlag"";
""904_transferFrom"" -> ""904_workingFlag"";
""904_generateTokens"" -> ""904_producibleFlag"";
""904_kill"" -> ""904_onlyOwner"";
""904_generateTokens"" -> ""904_workingFlag"";
""904_enableGeneration"" -> ""904_onlyOwner"";
""904_generateTokens"" -> ""904_ownerAndCoin"";
""904_enableContract"" -> ""904_onlyOwner"";
}
"
0x37e3efe76ee6cec50559bc07565eaf36ddc05467.sol,ControlledToken,"contract ControlledToken is ERC20, Controlled { uint256 constant MAX_UINT256 = 2**256 - 1; event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount); string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public totalSupply; function ControlledToken( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_627_ControlledToken {
label=""ControlledToken"";
""627_allowance"" [label=""allowance""];
""627_isContract"" [label=""isContract""];
""627_generateTokens"" [label=""generateTokens""];
""627_controller"" [label=""controller""];
""627_approve"" [label=""approve""];
""627_claimTokens"" [label=""claimTokens""];
""627_ControlledToken"" [label=""ControlledToken""];
""627_transferFrom"" [label=""transferFrom""];
""627_balanceOf"" [label=""balanceOf""];
""627_fallback"" [label=""fallback""];
""627_destroyTokens"" [label=""destroyTokens""];
""627_transfer"" [label=""transfer""];
""627_transfer"" -> ""627_isContract"";
""627_transferFrom"" -> ""627_isContract"";
""627_destroyTokens"" -> ""627_onlyController"";
""627_destroyTokens"" -> ""627_balanceOf"";
""627_claimTokens"" -> ""627_onlyController"";
""627_fallback"" -> ""627_isContract"";
""627_approve"" -> ""627_isContract"";
""627_generateTokens"" -> ""627_onlyController"";
""627_generateTokens"" -> ""627_balanceOf"";
}
"
0x67d9be79f2f13b7d3c9684d3782bc646f5ba6d63.sol,MilinfinityToken,"contract MilinfinityToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 230000000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 500; uint256 public tokensPerEth = 300000000e1; uint public target0drop = 20000; uint public progress0drop = 0; address multisig = 0x88A97d97413a6c2290f748D34aa204619d96b1a1; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_MilinfinityToken {
label=""MilinfinityToken"";
""1261_getTokens"" [label=""getTokens""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_allowance"" [label=""allowance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_distr"" [label=""distr""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_fallback"" [label=""fallback""];
""1261_add"" [label=""add""];
""1261_Distribute"" [label=""Distribute""];
""1261_constructor"" [label=""constructor""];
""1261_transfer"" [label=""transfer""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_getTokens"" -> ""1261_canDistr"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
}
"
0xd0792ac0de7ef31197c5f452b21a34389ecc725f.sol,CryptoWaterMargin,"contract CryptoWaterMargin is ERC721{ using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function CryptoWaterMargin () public { owner = msg.sender; admins[owner] = true; issueCard(1, 6, 0.1 ether); }",1,"subgraph cluster_1354_CryptoWaterMargin {
label=""CryptoWaterMargin"";
""1354_nextPriceOf"" [label=""nextPriceOf""];
""1354_withdrawAll"" [label=""withdrawAll""];
""1354_approve"" [label=""approve""];
""1354_balanceOf"" [label=""balanceOf""];
""1354_removeAdmin"" [label=""removeAdmin""];
""1354_totalSupply"" [label=""totalSupply""];
""1354_changePrice"" [label=""changePrice""];
""1354_listItem"" [label=""listItem""];
""1354_setOwner"" [label=""setOwner""];
""1354_calculateNextPrice"" [label=""calculateNextPrice""];
""1354_issueCard"" [label=""issueCard""];
""1354_approvedFor"" [label=""approvedFor""];
""1354_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1354_allOf"" [label=""allOf""];
""1354_withdrawAmount"" [label=""withdrawAmount""];
""1354_name"" [label=""name""];
""1354__transfer"" [label=""_transfer""];
""1354_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1354_priceOf"" [label=""priceOf""];
""1354_symbol"" [label=""symbol""];
""1354_listMultipleItems"" [label=""listMultipleItems""];
""1354_transfer"" [label=""transfer""];
""1354_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1354_ownerOf"" [label=""ownerOf""];
""1354_transferFrom"" [label=""transferFrom""];
""1354_tokensOf"" [label=""tokensOf""];
""1354_setItemRegistry"" [label=""setItemRegistry""];
""1354_CryptoWaterMargin"" [label=""CryptoWaterMargin""];
""1354_calculateDevCut"" [label=""calculateDevCut""];
""1354_isAdmin"" [label=""isAdmin""];
""1354_buy"" [label=""buy""];
""1354_addAdmin"" [label=""addAdmin""];
""1354_isContract"" [label=""isContract""];
""1354_tokenExists"" [label=""tokenExists""];
""1354_populateFromItemRegistry"" -> ""1354_onlyOwner"";
""1354_allOf"" -> ""1354_ownerOf"";
""1354_approve"" -> ""1354_tokenExists"";
""1354_setItemRegistry"" -> ""1354_onlyOwner"";
""1354_allOf"" -> ""1354_nextPriceOf"";
""1354_tokenExists"" -> ""1354_priceOf"";
""1354__transfer"" -> ""1354_tokenExists"";
""1354_transfer"" -> ""1354__transfer"";
""1354_transferFrom"" -> ""1354_approvedFor"";
""1354__transfer"" -> ""1354_ownerOf"";
""1354_listMultipleItems"" -> ""1354_listItem"";
""1354_transfer"" -> ""1354_ownerOf"";
""1354_balanceOf"" -> ""1354_ownerOf"";
""1354_populateFromItemRegistry"" -> ""1354_listItemFromRegistry"";
""1354_removeAdmin"" -> ""1354_onlyOwner"";
""1354_buy"" -> ""1354_ownerOf"";
""1354_transferFrom"" -> ""1354__transfer"";
""1354_listItemFromRegistry"" -> ""1354_listItem"";
""1354_approve"" -> ""1354_ownerOf"";
""1354_setOwner"" -> ""1354_onlyOwner"";
""1354_nextPriceOf"" -> ""1354_priceOf"";
""1354_tokensOf"" -> ""1354_ownerOf"";
""1354_issueCard"" -> ""1354_onlyAdmins"";
""1354_listMultipleItems"" -> ""1354_onlyAdmins"";
""1354_withdrawAll"" -> ""1354_onlyAdmins"";
""1354_addAdmin"" -> ""1354_onlyOwner"";
""1354_withdrawAmount"" -> ""1354_onlyAdmins"";
""1354_allOf"" -> ""1354_priceOf"";
""1354_buy"" -> ""1354_priceOf"";
""1354_changePrice"" -> ""1354_onlyAdmins"";
""1354_buy"" -> ""1354_calculateDevCut"";
""1354_buy"" -> ""1354_nextPriceOf"";
""1354_buy"" -> ""1354_isContract"";
""1354_listItemFromRegistry"" -> ""1354_onlyOwner"";
""1354_listItem"" -> ""1354_onlyAdmins"";
""1354_nextPriceOf"" -> ""1354_calculateNextPrice"";
""1354_buy"" -> ""1354__transfer"";
""1354_CryptoWaterMargin"" -> ""1354_issueCard"";
""1354_tokensOf"" -> ""1354_balanceOf"";
}
"
0xc7db6a0e78efb4d64bb06359faf83420f04cfb52.sol,play_IQUIZ,contract play_IQUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.00001 ether) { msg.sender.transfer(this.balance); question = ; },1,"subgraph cluster_119_play_IQUIZ {
label=""play_IQUIZ"";
""119_fallback"" [label=""fallback""];
""119_Start"" [label=""Start""];
""119_constructor"" [label=""constructor""];
""119_Try"" [label=""Try""];
""119_New"" [label=""New""];
""119_Stop"" [label=""Stop""];
""119_New"" -> ""119_isAdmin"";
""119_Start"" -> ""119_isAdmin"";
""119_Stop"" -> ""119_isAdmin"";
}
"
0xa21c9a3ae47103b1fd1dfa04766c4d00c19e1ff6.sol,CryptoOscarsToken,"contract CryptoOscarsToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",1,"subgraph cluster_930_CryptoOscarsToken {
label=""CryptoOscarsToken"";
""930_approve"" [label=""approve""];
""930_balanceOf"" [label=""balanceOf""];
""930_transfer"" [label=""transfer""];
""930_ownerOf"" [label=""ownerOf""];
""930_payout"" [label=""payout""];
""930_takeOwnership"" [label=""takeOwnership""];
""930_totalSupply"" [label=""totalSupply""];
""930__createMovie"" [label=""_createMovie""];
""930_setCOO"" [label=""setCOO""];
""930_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""930_setCEO"" [label=""setCEO""];
""930__payout"" [label=""_payout""];
""930_tokensOfOwner"" [label=""tokensOfOwner""];
""930__addressNotNull"" [label=""_addressNotNull""];
""930_priceOf"" [label=""priceOf""];
""930_createContractMovie"" [label=""createContractMovie""];
""930__transfer"" [label=""_transfer""];
""930_name"" [label=""name""];
""930_purchase"" [label=""purchase""];
""930__approved"" [label=""_approved""];
""930_createPromoMovie"" [label=""createPromoMovie""];
""930_symbol"" [label=""symbol""];
""930__owns"" [label=""_owns""];
""930_transferFrom"" [label=""transferFrom""];
""930_getMovie"" [label=""getMovie""];
""930_implementsERC721"" [label=""implementsERC721""];
""930_transferFrom"" -> ""930__addressNotNull"";
""930_takeOwnership"" -> ""930__approved"";
""930_transferFrom"" -> ""930__approved"";
""930_createContractMovie"" -> ""930_onlyCOO"";
""930_setCEO"" -> ""930_onlyCEO"";
""930_purchase"" -> ""930__transfer"";
""930_purchase"" -> ""930__addressNotNull"";
""930_payout"" -> ""930_onlyCLevel"";
""930__createMovie"" -> ""930__transfer"";
""930_payout"" -> ""930__payout"";
""930_createContractMovie"" -> ""930__createMovie"";
""930_createPromoMovie"" -> ""930_onlyCOO"";
""930_tokensOfOwner"" -> ""930_balanceOf"";
""930_createPromoMovie"" -> ""930__createMovie"";
""930_takeOwnership"" -> ""930__addressNotNull"";
""930_setCOO"" -> ""930_onlyCEO"";
""930_transferFrom"" -> ""930__transfer"";
""930_transferFrom"" -> ""930__owns"";
""930_tokensOfOwner"" -> ""930_totalSupply"";
""930_transfer"" -> ""930__owns"";
""930_takeOwnership"" -> ""930__transfer"";
""930_approve"" -> ""930__owns"";
""930_transfer"" -> ""930__addressNotNull"";
""930_transfer"" -> ""930__transfer"";
}
"
0x42fbfb1d1994a99de3bc52c2172d8370cd3d6671.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_571_Destructible {
label=""Destructible"";
""571_destroyAndSend"" [label=""destroyAndSend""];
""571_destroy"" [label=""destroy""];
""571_Destructible"" [label=""Destructible""];
""571_destroyAndSend"" -> ""571_onlyOwner"";
""571_destroy"" -> ""571_onlyOwner"";
}
"
0x1fbf025ad94dde79f88732f79966a9a435f2772f.sol,BLITZQUIZ,contract BLITZQUIZ { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_BLITZQUIZ {
label=""BLITZQUIZ"";
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
}
"
0xef86db910c71ffa3c80233bc9108dc51ad1e008a.sol,CommonWallet,"contract CommonWallet { mapping(address => mapping (address => uint256)) public tokenBalance; mapping(address => uint) etherBalance; address owner = msg.sender; function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) { uint256 z = _x + _y; assert(z >= _x); return z; }",1,"subgraph cluster_387_CommonWallet {
label=""CommonWallet"";
""387_sendTokenTo"" [label=""sendTokenTo""];
""387_wdEther"" [label=""wdEther""];
""387_safeAdd"" [label=""safeAdd""];
""387_wdToken"" [label=""wdToken""];
""387_sendEtherTo"" [label=""sendEtherTo""];
""387_depoEther"" [label=""depoEther""];
""387_getEtherBalance"" [label=""getEtherBalance""];
""387_safeSub"" [label=""safeSub""];
""387_depoToken"" [label=""depoToken""];
""387_getTokenBalance"" [label=""getTokenBalance""];
""387_sendEtherTo"" -> ""387_safeSub"";
""387_wdEther"" -> ""387_safeSub"";
""387_wdToken"" -> ""387_safeSub"";
""387_depoToken"" -> ""387_safeAdd"";
""387_sendTokenTo"" -> ""387_safeSub"";
}
"
0xaa3fbfaf03cd50e6a44d27d10eb14333d1c02e52.sol,ETH_GAME,contract ETH_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETH_GAME {
label=""ETH_GAME"";
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,RefundEscrow,"contract RefundEscrow is Ownable, ConditionalEscrow { enum State { Active, Refunding, Closed }",1,"subgraph cluster_1492_RefundEscrow {
label=""RefundEscrow"";
""1492_withdrawalAllowed"" [label=""withdrawalAllowed""];
""1492_constructor"" [label=""constructor""];
""1492_deposit"" [label=""deposit""];
""1492_enableRefunds"" [label=""enableRefunds""];
""1492_close"" [label=""close""];
""1492_beneficiaryWithdraw"" [label=""beneficiaryWithdraw""];
""1492_deposit"" -> ""1492_deposit"";
""1492_close"" -> ""1492_onlyOwner"";
""1492_enableRefunds"" -> ""1492_onlyOwner"";
}
"
0x5b8aeecf9958a76054dae8bdc98b44ff9007d4ef.sol,SRNMagicBox,"contract SRNMagicBox is ServerControl, TokenReceiver { GirlOps girlOps; GenesFactory genesFactory; SRNG SRNGInstance; string public name; uint public keyRequired; address public keyAddress; address public prizePoolAddress; uint public boxPrice; uint[] public prizeIndex; uint[] public prizeRange; uint[] public NCards; uint[] public RCards; uint[] public SRCards; uint[] public SSRCards; event SendGirlFail(address _to, uint _type); constructor(string _name, address _girlAddress, address _SRNGAddress, address _genesFactoryAddress, address _prizePoolAddress, address _keyAddress, uint _keyRequired, uint _boxPrice) public { name = _name; girlOps = GirlOps(_girlAddress); SRNGInstance = SRNG(_SRNGAddress); genesFactory = GenesFactory(_genesFactoryAddress); prizePoolAddress = _prizePoolAddress; keyAddress = _keyAddress; keyRequired = _keyRequired; boxPrice = _boxPrice; }",1,"subgraph cluster_4530_SRNMagicBox {
label=""SRNMagicBox"";
""4530_getPrizeIndex"" [label=""getPrizeIndex""];
""4530__sendGirl"" [label=""_sendGirl""];
""4530__openBox"" [label=""_openBox""];
""4530_setupKeyRequired"" [label=""setupKeyRequired""];
""4530_setSRNG"" [label=""setSRNG""];
""4530_setGenesFactory"" [label=""setGenesFactory""];
""4530_getSSRCardsNumber"" [label=""getSSRCardsNumber""];
""4530_getRCardsNumber"" [label=""getRCardsNumber""];
""4530_setGirls"" [label=""setGirls""];
""4530_setGirlByRarity"" [label=""setGirlByRarity""];
""4530_getSRCardsNumber"" [label=""getSRCardsNumber""];
""4530_withDrawToken"" [label=""withDrawToken""];
""4530_setupPrize"" [label=""setupPrize""];
""4530_setGirlOps"" [label=""setGirlOps""];
""4530_setKeyAddress"" [label=""setKeyAddress""];
""4530_constructor"" [label=""constructor""];
""4530_setPrizePoolAddress"" [label=""setPrizePoolAddress""];
""4530_receiveApproval"" [label=""receiveApproval""];
""4530_withDrawBalance"" [label=""withDrawBalance""];
""4530_getNCardsNumber"" [label=""getNCardsNumber""];
""4530_canOpen"" [label=""canOpen""];
""4530_fallback"" [label=""fallback""];
""4530_setupBoxPrice"" [label=""setupBoxPrice""];
""4530_setKeyAddress"" -> ""4530_onlyOwner"";
""4530_setupBoxPrice"" -> ""4530_onlyOwner"";
""4530_fallback"" -> ""4530__openBox"";
""4530_setGirlOps"" -> ""4530_onlyOwner"";
""4530_setGirls"" -> ""4530_onlyOwner"";
""4530_setupPrize"" -> ""4530_onlyOwner"";
""4530_setGirlByRarity"" -> ""4530_onlyOwner"";
""4530__openBox"" -> ""4530_getPrizeIndex"";
""4530_receiveApproval"" -> ""4530__openBox"";
""4530_withDrawToken"" -> ""4530_onlyCFO"";
""4530_setupKeyRequired"" -> ""4530_onlyOwner"";
""4530_setGenesFactory"" -> ""4530_onlyOwner"";
""4530_setSRNG"" -> ""4530_onlyOwner"";
""4530_withDrawBalance"" -> ""4530_onlyCFO"";
""4530__openBox"" -> ""4530__sendGirl"";
""4530_setPrizePoolAddress"" -> ""4530_onlyOwner"";
}
"
0x01bbef7b099128a2675d619567ab449ec9a04fe1.sol,ether_game,contract ether_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ether_game {
label=""ether_game"";
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xc801e2ca666fdfcb43cf29b972d7f3731436e4a1.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MyAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_669_MyAdvancedToken {
label=""MyAdvancedToken"";
""669_sell"" [label=""sell""];
""669_MyAdvancedToken"" [label=""MyAdvancedToken""];
""669_getEth"" [label=""getEth""];
""669_newinitialSupply"" [label=""newinitialSupply""];
""669_freezeAccount"" [label=""freezeAccount""];
""669_mintToken"" [label=""mintToken""];
""669_buy"" [label=""buy""];
""669_fallback"" [label=""fallback""];
""669_selfdestructs"" [label=""selfdestructs""];
""669__transfer"" [label=""_transfer""];
""669_setPrices"" [label=""setPrices""];
""669_MyAdvancedToken"" -> ""669_TokenERC20"";
""669_mintToken"" -> ""669_onlyOwner"";
""669_freezeAccount"" -> ""669_onlyOwner"";
""669_sell"" -> ""669__transfer"";
""669_fallback"" -> ""669__transfer"";
""669_setPrices"" -> ""669_onlyOwner"";
""669_buy"" -> ""669__transfer"";
""669_newinitialSupply"" -> ""669_onlyOwner"";
}
"
0x723aaf922709819c25344b81901dd8a9c84c0b89.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State {Active, Refunding, Closed}",1,"subgraph cluster_402_RefundVault {
label=""RefundVault"";
""402_enableRefunds"" [label=""enableRefunds""];
""402_deposit"" [label=""deposit""];
""402_close"" [label=""close""];
""402_RefundVault"" [label=""RefundVault""];
""402_refund"" [label=""refund""];
""402_refund"" -> ""402_onlyOwner"";
""402_enableRefunds"" -> ""402_onlyOwner"";
""402_close"" -> ""402_onlyOwner"";
""402_deposit"" -> ""402_onlyOwner"";
}
"
0xe34cae5cdc42afd4c68727a936908918b5faa675.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1100_MiniMeToken {
label=""MiniMeToken"";
""1100_generateTokens"" [label=""generateTokens""];
""1100_approveAndCall"" [label=""approveAndCall""];
""1100_destroyTokens"" [label=""destroyTokens""];
""1100_balanceOf"" [label=""balanceOf""];
""1100_allowance"" [label=""allowance""];
""1100_transfer"" [label=""transfer""];
""1100_MiniMeToken"" [label=""MiniMeToken""];
""1100_balanceOfAt"" [label=""balanceOfAt""];
""1100_updateValueAtNow"" [label=""updateValueAtNow""];
""1100_claimTokens"" [label=""claimTokens""];
""1100_isContract"" [label=""isContract""];
""1100_transferFrom"" [label=""transferFrom""];
""1100_getValueAt"" [label=""getValueAt""];
""1100_doTransfer"" [label=""doTransfer""];
""1100_totalSupply"" [label=""totalSupply""];
""1100_approve"" [label=""approve""];
""1100_totalSupplyAt"" [label=""totalSupplyAt""];
""1100_enableTransfers"" [label=""enableTransfers""];
""1100_min"" [label=""min""];
""1100_fallback"" [label=""fallback""];
""1100_createCloneToken"" [label=""createCloneToken""];
""1100_transfer"" -> ""1100_doTransfer"";
""1100_enableTransfers"" -> ""1100_onlyController"";
""1100_balanceOfAt"" -> ""1100_min"";
""1100_generateTokens"" -> ""1100_onlyController"";
""1100_generateTokens"" -> ""1100_updateValueAtNow"";
""1100_destroyTokens"" -> ""1100_balanceOf"";
""1100_destroyTokens"" -> ""1100_updateValueAtNow"";
""1100_doTransfer"" -> ""1100_updateValueAtNow"";
""1100_totalSupplyAt"" -> ""1100_getValueAt"";
""1100_totalSupplyAt"" -> ""1100_min"";
""1100_generateTokens"" -> ""1100_balanceOf"";
""1100_approveAndCall"" -> ""1100_approve"";
""1100_fallback"" -> ""1100_isContract"";
""1100_approve"" -> ""1100_isContract"";
""1100_transferFrom"" -> ""1100_doTransfer"";
""1100_totalSupply"" -> ""1100_totalSupplyAt"";
""1100_claimTokens"" -> ""1100_onlyController"";
""1100_doTransfer"" -> ""1100_isContract"";
""1100_balanceOfAt"" -> ""1100_getValueAt"";
""1100_destroyTokens"" -> ""1100_totalSupply"";
""1100_balanceOf"" -> ""1100_balanceOfAt"";
""1100_destroyTokens"" -> ""1100_onlyController"";
""1100_generateTokens"" -> ""1100_totalSupply"";
""1100_doTransfer"" -> ""1100_balanceOfAt"";
}
"
0x6bd26bb09c992e09d2156b48f723e56e52eead9c.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1282_MiniMeToken {
label=""MiniMeToken"";
""1282_doTransfer"" [label=""doTransfer""];
""1282_isContract"" [label=""isContract""];
""1282_fallback"" [label=""fallback""];
""1282_destroyTokens"" [label=""destroyTokens""];
""1282_balanceOf"" [label=""balanceOf""];
""1282_updateValueAtNow"" [label=""updateValueAtNow""];
""1282_approveAndCall"" [label=""approveAndCall""];
""1282_getValueAt"" [label=""getValueAt""];
""1282_createCloneToken"" [label=""createCloneToken""];
""1282_transfer"" [label=""transfer""];
""1282_generateTokens"" [label=""generateTokens""];
""1282_approve"" [label=""approve""];
""1282_MiniMeToken"" [label=""MiniMeToken""];
""1282_allowance"" [label=""allowance""];
""1282_balanceOfAt"" [label=""balanceOfAt""];
""1282_transferFrom"" [label=""transferFrom""];
""1282_claimTokens"" [label=""claimTokens""];
""1282_min"" [label=""min""];
""1282_totalSupplyAt"" [label=""totalSupplyAt""];
""1282_totalSupply"" [label=""totalSupply""];
""1282_enableTransfers"" [label=""enableTransfers""];
""1282_balanceOfAt"" -> ""1282_getValueAt"";
""1282_destroyTokens"" -> ""1282_totalSupply"";
""1282_totalSupplyAt"" -> ""1282_min"";
""1282_generateTokens"" -> ""1282_updateValueAtNow"";
""1282_enableTransfers"" -> ""1282_onlyController"";
""1282_destroyTokens"" -> ""1282_onlyController"";
""1282_approve"" -> ""1282_isContract"";
""1282_totalSupply"" -> ""1282_totalSupplyAt"";
""1282_fallback"" -> ""1282_isContract"";
""1282_balanceOfAt"" -> ""1282_min"";
""1282_doTransfer"" -> ""1282_isContract"";
""1282_transfer"" -> ""1282_doTransfer"";
""1282_totalSupplyAt"" -> ""1282_getValueAt"";
""1282_generateTokens"" -> ""1282_onlyController"";
""1282_doTransfer"" -> ""1282_balanceOfAt"";
""1282_destroyTokens"" -> ""1282_balanceOf"";
""1282_destroyTokens"" -> ""1282_updateValueAtNow"";
""1282_approveAndCall"" -> ""1282_approve"";
""1282_transferFrom"" -> ""1282_doTransfer"";
""1282_doTransfer"" -> ""1282_updateValueAtNow"";
""1282_balanceOf"" -> ""1282_balanceOfAt"";
""1282_generateTokens"" -> ""1282_totalSupply"";
""1282_generateTokens"" -> ""1282_balanceOf"";
""1282_claimTokens"" -> ""1282_onlyController"";
}
"
0xee53ca3ae3d296c0f2a128138d12a0a3a60fa1f5.sol,ZethrShell,contract ZethrShell is ZethrBankrollBridge { function WithdrawToBankroll() public { address(UsedBankrollAddresses[0]).transfer(address(this).balance); },1,"subgraph cluster_240_ZethrShell {
label=""ZethrShell"";
""240_WithdrawAndTransferToBankroll"" [label=""WithdrawAndTransferToBankroll""];
""240_WithdrawToBankroll"" [label=""WithdrawToBankroll""];
""240_WithdrawAndTransferToBankroll"" -> ""240_WithdrawToBankroll"";
}
"
0x483a816f1672e276416d7e18e905226f15c7e698.sol,eth_GAME,contract eth_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_eth_GAME {
label=""eth_GAME"";
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_New"" [label=""New""];
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x28e0d54349c00607505aadc713147140fb60ea12.sol,TheQuizGame,contract TheQuizGame { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_128_TheQuizGame {
label=""TheQuizGame"";
""128_StartTheGame"" [label=""StartTheGame""];
""128_NewQuestion"" [label=""NewQuestion""];
""128_Try"" [label=""Try""];
""128_StopGame"" [label=""StopGame""];
""128_newQuestioner"" [label=""newQuestioner""];
""128_fallback"" [label=""fallback""];
}
"
0x0174312e4aef436606ffdeb4d05d22fb68f36ba0.sol,LatiumSeller,contract LatiumSeller { address private constant _latiumAddress = 0xBb31037f997553BEc50510a635d231A35F8EC640; Latium private constant _latium = Latium(_latiumAddress); uint256 private _etherAmount = 0; uint256 private constant _tokenPrice = 10 finney; uint256 private _minimumPurchase = 10 * 10 ** uint256(_latium.decimals()); address public owner; function LatiumSeller() { owner = msg.sender; },1,"subgraph cluster_342_LatiumSeller {
label=""LatiumSeller"";
""342_fallback"" [label=""fallback""];
""342_withdrawLatium"" [label=""withdrawLatium""];
""342_LatiumSeller"" [label=""LatiumSeller""];
""342__tokensToSell"" [label=""_tokensToSell""];
""342_minimumPurchase"" [label=""minimumPurchase""];
""342_tokenPrice"" [label=""tokenPrice""];
""342_withdrawEther"" [label=""withdrawEther""];
""342_withdrawLatium"" -> ""342__tokensToSell"";
""342_withdrawEther"" -> ""342_onlyOwner"";
""342_fallback"" -> ""342__tokensToSell"";
""342_withdrawLatium"" -> ""342_onlyOwner"";
}
"
0x64d581770b541b5609140232fc12f47bbe0fe6bc.sol,MonetoSale,"contract MonetoSale { Moneto public token; address public beneficiary; address public alfatokenteam; uint public alfatokenFee; uint public amountRaised; uint public tokenSold; uint public constant PRE_SALE_START = 1523952000; uint public constant PRE_SALE_END = 1526543999; uint public constant SALE_START = 1528617600; uint public constant SALE_END = 1531209599; uint public constant PRE_SALE_MAX_CAP = 2531250 * 10**18; uint public constant SALE_MAX_CAP = 300312502 * 10**17; uint public constant SALE_MIN_CAP = 2500 ether; uint public constant PRE_SALE_PRICE = 1250; uint public constant SALE_PRICE = 1000; uint public constant PRE_SALE_MIN_BUY = 10 * 10**18; uint public constant SALE_MIN_BUY = 1 * 10**18; uint public constant PRE_SALE_1WEEK_BONUS = 35; uint public constant PRE_SALE_2WEEK_BONUS = 15; uint public constant PRE_SALE_3WEEK_BONUS = 5; uint public constant PRE_SALE_4WEEK_BONUS = 0; uint public constant SALE_1WEEK_BONUS = 10; uint public constant SALE_2WEEK_BONUS = 7; uint public constant SALE_3WEEK_BONUS = 5; uint public constant SALE_4WEEK_BONUS = 3; mapping (address => uint) public icoBuyers; Stages public stage; enum Stages { Deployed, Ready, Ended, Canceled }",1,"subgraph cluster_1216_MonetoSale {
label=""MonetoSale"";
""1216_endSale"" [label=""endSale""];
""1216_transferEther"" [label=""transferEther""];
""1216_takeEtherBack"" [label=""takeEtherBack""];
""1216_cancelSale"" [label=""cancelSale""];
""1216_setup"" [label=""setup""];
""1216_getPrice"" [label=""getPrice""];
""1216_fallback"" [label=""fallback""];
""1216_proxyTakeEtherBack"" [label=""proxyTakeEtherBack""];
""1216_getMinimumAmount"" [label=""getMinimumAmount""];
""1216_getBonus"" [label=""getBonus""];
""1216_MonetoSale"" [label=""MonetoSale""];
""1216_transferFee"" [label=""transferFee""];
""1216_setup"" -> ""1216_isOwner"";
""1216_proxyTakeEtherBack"" -> ""1216_atStage"";
""1216_takeEtherBack"" -> ""1216_atStage"";
""1216_setup"" -> ""1216_atStage"";
""1216_transferEther"" -> ""1216_isOwner"";
""1216_fallback"" -> ""1216_getMinimumAmount"";
""1216_fallback"" -> ""1216_atStage"";
""1216_takeEtherBack"" -> ""1216_proxyTakeEtherBack"";
""1216_endSale"" -> ""1216_isOwner"";
""1216_fallback"" -> ""1216_getPrice"";
""1216_fallback"" -> ""1216_getBonus"";
}
"
0x6f4e647f553397dc999382ad3a9c5336c5de27aa.sol,YouCollectBase,"contract YouCollectBase is Owned { using SafeMath for uint256; string public constant NAME = ; string public constant SYMBOL = ; uint8 public constant DECIMALS = 18; uint256 public totalSupply; uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function name() public pure returns (string) { return NAME; }",1,"subgraph cluster_609_YouCollectBase {
label=""YouCollectBase"";
""609_transfer"" [label=""transfer""];
""609_decimals"" [label=""decimals""];
""609_name"" [label=""name""];
""609_approve"" [label=""approve""];
""609_payout"" [label=""payout""];
""609_approveAndCall"" [label=""approveAndCall""];
""609__payout"" [label=""_payout""];
""609_balanceOf"" [label=""balanceOf""];
""609_transferFrom"" [label=""transferFrom""];
""609_allowance"" [label=""allowance""];
""609_symbol"" [label=""symbol""];
""609_payout"" -> ""609__payout"";
""609_payout"" -> ""609_onlyCLevel"";
}
"
0x6bd26bb09c992e09d2156b48f723e56e52eead9c.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1282_MiniMeToken {
label=""MiniMeToken"";
""1282_doTransfer"" [label=""doTransfer""];
""1282_isContract"" [label=""isContract""];
""1282_fallback"" [label=""fallback""];
""1282_destroyTokens"" [label=""destroyTokens""];
""1282_balanceOf"" [label=""balanceOf""];
""1282_updateValueAtNow"" [label=""updateValueAtNow""];
""1282_approveAndCall"" [label=""approveAndCall""];
""1282_getValueAt"" [label=""getValueAt""];
""1282_createCloneToken"" [label=""createCloneToken""];
""1282_transfer"" [label=""transfer""];
""1282_generateTokens"" [label=""generateTokens""];
""1282_approve"" [label=""approve""];
""1282_MiniMeToken"" [label=""MiniMeToken""];
""1282_allowance"" [label=""allowance""];
""1282_balanceOfAt"" [label=""balanceOfAt""];
""1282_transferFrom"" [label=""transferFrom""];
""1282_claimTokens"" [label=""claimTokens""];
""1282_min"" [label=""min""];
""1282_totalSupplyAt"" [label=""totalSupplyAt""];
""1282_totalSupply"" [label=""totalSupply""];
""1282_enableTransfers"" [label=""enableTransfers""];
""1282_balanceOfAt"" -> ""1282_getValueAt"";
""1282_destroyTokens"" -> ""1282_totalSupply"";
""1282_totalSupplyAt"" -> ""1282_min"";
""1282_generateTokens"" -> ""1282_updateValueAtNow"";
""1282_enableTransfers"" -> ""1282_onlyController"";
""1282_destroyTokens"" -> ""1282_onlyController"";
""1282_approve"" -> ""1282_isContract"";
""1282_totalSupply"" -> ""1282_totalSupplyAt"";
""1282_fallback"" -> ""1282_isContract"";
""1282_balanceOfAt"" -> ""1282_min"";
""1282_doTransfer"" -> ""1282_isContract"";
""1282_transfer"" -> ""1282_doTransfer"";
""1282_totalSupplyAt"" -> ""1282_getValueAt"";
""1282_generateTokens"" -> ""1282_onlyController"";
""1282_doTransfer"" -> ""1282_balanceOfAt"";
""1282_destroyTokens"" -> ""1282_balanceOf"";
""1282_destroyTokens"" -> ""1282_updateValueAtNow"";
""1282_approveAndCall"" -> ""1282_approve"";
""1282_transferFrom"" -> ""1282_doTransfer"";
""1282_doTransfer"" -> ""1282_updateValueAtNow"";
""1282_balanceOf"" -> ""1282_balanceOfAt"";
""1282_generateTokens"" -> ""1282_totalSupply"";
""1282_generateTokens"" -> ""1282_balanceOf"";
""1282_claimTokens"" -> ""1282_onlyController"";
}
"
0xa23a42b2bb161b0ab7bbcbd72bea54952e5299fc.sol,zeepay,"contract zeepay is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 1000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 10000; uint256 public tokensPerEth = 15000000e8; uint public target0drop = 1000; uint public progress0drop = 0; address multisig = 0x3c93bcB8dc2b78570B343dB9c6F56397Fe77164b ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_zeepay {
label=""zeepay"";
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_allowance"" [label=""allowance""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdraw"" [label=""withdraw""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_Distribute"" [label=""Distribute""];
""1261_constructor"" [label=""constructor""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_distr"" [label=""distr""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_add"" [label=""add""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_fallback"" [label=""fallback""];
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_add"" -> ""1261_onlyOwner"";
}
"
0x33dcb440beb0c640fa75ac297bc2e048e6853844.sol,Bonds,contract Bonds { uint ACTIVATION_TIME = 1539302400; modifier onlyOwner(){ require(msg.sender == dev); _; },1,"subgraph cluster_1302_Bonds {
label=""Bonds"";
""1302_extDistributeBondFund"" [label=""extDistributeBondFund""];
""1302_getMyBalance"" [label=""getMyBalance""];
""1302_buy"" [label=""buy""];
""1302_distributeYield"" [label=""distributeYield""];
""1302_withdrawPart"" [label=""withdrawPart""];
""1302_setAllowReferral"" [label=""setAllowReferral""];
""1302_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""1302_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1302_setMaxbonds"" [label=""setMaxbonds""];
""1302_gettotalBondDivs"" [label=""gettotalBondDivs""];
""1302_getBondOwner"" [label=""getBondOwner""];
""1302_constructor"" [label=""constructor""];
""1302_setAutoNewbond"" [label=""setAutoNewbond""];
""1302_setInitialPrice"" [label=""setInitialPrice""];
""1302_addTotalBondValue"" [label=""addTotalBondValue""];
""1302_setBondPrice"" [label=""setBondPrice""];
""1302_addNewbond"" [label=""addNewbond""];
""1302_distributeBondFund"" [label=""distributeBondFund""];
""1302_setSymbol"" [label=""setSymbol""];
""1302_fallback"" [label=""fallback""];
""1302_transfer"" [label=""transfer""];
""1302_getTotalBondValue"" [label=""getTotalBondValue""];
""1302_getOwnerBalance"" [label=""getOwnerBalance""];
""1302_getBondPrice"" [label=""getBondPrice""];
""1302_getNextAvailableBond"" [label=""getNextAvailableBond""];
""1302_getBondDivShare"" [label=""getBondDivShare""];
""1302_withdraw"" [label=""withdraw""];
""1302_setName"" [label=""setName""];
""1302_setSymbol"" -> ""1302_onlyOwner"";
""1302_buy"" -> ""1302_addTotalBondValue"";
""1302_setBondPrice"" -> ""1302_onlyOwner"";
""1302_setAllowReferral"" -> ""1302_onlyOwner"";
""1302_setAutoNewbond"" -> ""1302_onlyOwner"";
""1302_setMaxbonds"" -> ""1302_onlyOwner"";
""1302_buy"" -> ""1302_distributeYield"";
""1302_buy"" -> ""1302_distributeBondFund"";
""1302_addNewbond"" -> ""1302_onlyOwner"";
""1302_extDistributeBondFund"" -> ""1302_onlyOwner"";
""1302_setName"" -> ""1302_onlyOwner"";
""1302_buy"" -> ""1302_isActivated"";
""1302_setInitialPrice"" -> ""1302_onlyOwner"";
""1302_withdrawPart"" -> ""1302_onlyOwner"";
""1302_addNewbond"" -> ""1302_addTotalBondValue"";
}
"
0x549b38e8e5fb1ba4acd4187d8b7c8a04deb53206.sol,LotteryAdmin,"contract LotteryAdmin { address public owner; address public admin; address public proposedOwner; address public ethereumLottery; uint public dailyAdminAllowance; uint public lastAllowancePaymentTimestamp; uint public nextProfile; event Deposit(address indexed _from, uint _value); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_282_LotteryAdmin {
label=""LotteryAdmin"";
""282_setLottery"" [label=""setLottery""];
""282_destruct"" [label=""destruct""];
""282_proposeOwner"" [label=""proposeOwner""];
""282_setConfiguration"" [label=""setConfiguration""];
""282_withdraw"" [label=""withdraw""];
""282_allowsAllowance"" [label=""allowsAllowance""];
""282_acceptOwnership"" [label=""acceptOwnership""];
""282_requestAllowance"" [label=""requestAllowance""];
""282_needsInitialization"" [label=""needsInitialization""];
""282_setAdmin"" [label=""setAdmin""];
""282_fallback"" [label=""fallback""];
""282_initLottery"" [label=""initLottery""];
""282_LotteryAdmin"" [label=""LotteryAdmin""];
""282_requestAllowance"" -> ""282_allowsAllowance"";
""282_setConfiguration"" -> ""282_onlyOwner"";
""282_withdraw"" -> ""282_onlyOwner"";
""282_destruct"" -> ""282_onlyOwner"";
""282_setLottery"" -> ""282_onlyOwner"";
""282_requestAllowance"" -> ""282_onlyAdminOrOwner"";
""282_proposeOwner"" -> ""282_onlyOwner"";
""282_setAdmin"" -> ""282_onlyOwner"";
""282_initLottery"" -> ""282_onlyAdminOrOwner"";
}
"
0xeafd8b734e32aec64c4b445e9da401427ef63a3a.sol,PullPayment,contract PullPayment { using SafeMath for uint256; mapping(address => uint256) public payments; uint256 public totalPayments; function withdrawPayments() public { address payee = msg.sender; uint256 payment = payments[payee]; require(payment != 0); require(address(this).balance >= payment); totalPayments = totalPayments.sub(payment); payments[payee] = 0; payee.transfer(payment); },1,"subgraph cluster_199_PullPayment {
label=""PullPayment"";
""199_withdrawPayments"" [label=""withdrawPayments""];
""199_asyncSend"" [label=""asyncSend""];
}
"
0x013620bf5142f9d8487e92c1d514c38e1b086613.sol,Etherumble,contract Etherumble { struct PlayerBets { address addPlayer; uint amount; },1,"subgraph cluster_384_Etherumble {
label=""Etherumble"";
""384_callback"" [label=""callback""];
""384_getPlayerAddress"" [label=""getPlayerAddress""];
""384_Lottery"" [label=""Lottery""];
""384_getPlayerBet"" [label=""getPlayerBet""];
""384_getLastWinnerTicket"" [label=""getLastWinnerTicket""];
""384_fallback"" [label=""fallback""];
""384_getActivePlayers"" [label=""getActivePlayers""];
""384_withrawFee"" [label=""withrawFee""];
""384_getLastWinner"" [label=""getLastWinner""];
""384_withrawWin"" [label=""withrawWin""];
""384_getTotalGames"" [label=""getTotalGames""];
""384_endLottery"" [label=""endLottery""];
""384_getEndBlock"" [label=""getEndBlock""];
""384_destroykill"" [label=""destroykill""];
""384_checkinter"" [label=""checkinter""];
""384_withrawFee"" -> ""384_isOwner"";
""384_endLottery"" -> ""384_withrawWin"";
""384_destroykill"" -> ""384_isOwner"";
""384_fallback"" -> ""384_hasValue"";
""384_callback"" -> ""384_endLottery"";
""384_checkinter"" -> ""384_endLottery"";
""384_callback"" -> ""384_isOwner"";
""384_fallback"" -> ""384_checkinter"";
}
"
0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol,WorldCupWinner,"contract WorldCupWinner { using SafeMath for uint256; event BuyWinner(address indexed buyer, uint256 indexed traddingTime, uint256 first, uint256 second, uint256 three, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice); event BuyWinnerList(uint256 indexed first, uint256 indexed second, uint256 indexed third,address buyer, uint256 traddingTime, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice); event BuyWinnerTwo(address indexed buyer, uint256 indexed first, uint256 indexed gameid,uint256 traddingTime, uint256 buyType,uint256 buyPrice,uint buyTotal); event ShareBonus(address indexed buyer, uint256 indexed traddingTime, uint256 indexed buyerType, uint256 gameID, uint256 remainingAmount); address public owner; uint[] _teamIDs; struct Game{ uint256 _bouns; uint[] _teams; uint256[] _teamPrice; uint _playType; bool _stop; uint256 _beginTime; }",1,"subgraph cluster_746_WorldCupWinner {
label=""WorldCupWinner"";
""746_buy"" [label=""buy""];
""746_getListTeam"" [label=""getListTeam""];
""746_buyTwo"" [label=""buyTwo""];
""746_getPool"" [label=""getPool""];
""746_constructor"" [label=""constructor""];
""746_setTeamStatus"" [label=""setTeamStatus""];
""746_batchShareAmount"" [label=""batchShareAmount""];
""746_getBonusPoolTotal"" [label=""getBonusPoolTotal""];
""746_destroy"" [label=""destroy""];
""746_createGame"" [label=""createGame""];
""746_shareAmount"" [label=""shareAmount""];
""746_setTeamPrice"" [label=""setTeamPrice""];
""746_getListTeamByPlayType"" [label=""getListTeamByPlayType""];
""746_batchShareAmount"" -> ""746_onlyOwner"";
""746_setTeamPrice"" -> ""746_onlyOwner"";
""746_shareAmount"" -> ""746_onlyOwner"";
""746_destroy"" -> ""746_onlyOwner"";
""746_setTeamStatus"" -> ""746_onlyOwner"";
""746_createGame"" -> ""746_onlyOwner"";
}
"
0x28a9824cc26361fe97417a60d5bd1225853db46d.sol,TTS,contract TTS is Token { string public name; string public symbol; uint32 internal rate; uint32 internal consume; uint256 internal totalConsume; uint256 internal bigJackpot; uint256 internal smallJackpot; uint256 public consumeRule; address internal owner; modifier onlyOwner(){ require (msg.sender==owner); _; },1,"subgraph cluster_964_TTS {
label=""TTS"";
""964_getRate"" [label=""getRate""];
""964_smallCheckOut"" [label=""smallCheckOut""];
""964_getTotalConsume"" [label=""getTotalConsume""];
""964_setJackpot"" [label=""setJackpot""];
""964_transferFrom"" [label=""transferFrom""];
""964_approve"" [label=""approve""];
""964_getBigJackpot"" [label=""getBigJackpot""];
""964_getConsume"" [label=""getConsume""];
""964_allowance"" [label=""allowance""];
""964_transfer"" [label=""transfer""];
""964_bigCheckOut"" [label=""bigCheckOut""];
""964_tickets"" [label=""tickets""];
""964_TTS"" [label=""TTS""];
""964_ticketConsume"" [label=""ticketConsume""];
""964_sendAll"" [label=""sendAll""];
""964_balanceOf"" [label=""balanceOf""];
""964_getEth"" [label=""getEth""];
""964_trashOf"" [label=""trashOf""];
""964_getSmallJackpot"" [label=""getSmallJackpot""];
""964_getBalance"" [label=""getBalance""];
""964_fallback"" [label=""fallback""];
""964_sendTransfer"" [label=""sendTransfer""];
""964_inTrash"" [label=""inTrash""];
""964_sendTransfer"" -> ""964_onlyOwner"";
""964_getEth"" -> ""964_onlyOwner"";
""964_bigCheckOut"" -> ""964_onlyOwner"";
""964_tickets"" -> ""964_setJackpot"";
""964_ticketConsume"" -> ""964_setJackpot"";
""964_sendAll"" -> ""964_onlyOwner"";
""964_smallCheckOut"" -> ""964_onlyOwner"";
}
"
0x26bf81f017a7149576dc5d82323172fcae9fd469.sol,PhxGo,"contract PhxGo is Ownable{ using SafeMath for uint; event LogTokenMultiSent(address token,uint256 total); event LogGetToken(address token, address receiver, uint256 balance); address public receiverAddress; uint public txFee = 0.01 ether; uint public VIPFee = 1 ether; mapping(address => bool) public vipList; function getBalance(address _tokenAddress) onlyOwner public { address _receiverAddress = getReceiverAddress(); if(_tokenAddress == address(0)){ require(_receiverAddress.send(address(this).balance)); return; }",1,"subgraph cluster_1228_PhxGo {
label=""PhxGo"";
""1228_registerVIP"" [label=""registerVIP""];
""1228_multisendToken"" [label=""multisendToken""];
""1228_mutiSendCoinWithSameValue"" [label=""mutiSendCoinWithSameValue""];
""1228_setReceiverAddress"" [label=""setReceiverAddress""];
""1228_drop"" [label=""drop""];
""1228_removeFromVIPList"" [label=""removeFromVIPList""];
""1228_setTxFee"" [label=""setTxFee""];
""1228_ethSendSameValue"" [label=""ethSendSameValue""];
""1228_addToVIPList"" [label=""addToVIPList""];
""1228_ethSendDifferentValue"" [label=""ethSendDifferentValue""];
""1228_getReceiverAddress"" [label=""getReceiverAddress""];
""1228_mutiSendCoinWithDifferentValue"" [label=""mutiSendCoinWithDifferentValue""];
""1228_coinSendDifferentValue"" [label=""coinSendDifferentValue""];
""1228_sendEth"" [label=""sendEth""];
""1228_mutiSendETHWithDifferentValue"" [label=""mutiSendETHWithDifferentValue""];
""1228_setVIPFee"" [label=""setVIPFee""];
""1228_mutiSendETHWithSameValue"" [label=""mutiSendETHWithSameValue""];
""1228_multisend"" [label=""multisend""];
""1228_coinSendSameValue"" [label=""coinSendSameValue""];
""1228_isVIP"" [label=""isVIP""];
""1228_getBalance"" [label=""getBalance""];
""1228_mutiSendCoinWithDifferentValue"" -> ""1228_coinSendDifferentValue"";
""1228_drop"" -> ""1228_coinSendSameValue"";
""1228_ethSendDifferentValue"" -> ""1228_isVIP"";
""1228_multisend"" -> ""1228_ethSendDifferentValue"";
""1228_removeFromVIPList"" -> ""1228_onlyOwner"";
""1228_mutiSendCoinWithSameValue"" -> ""1228_coinSendSameValue"";
""1228_coinSendSameValue"" -> ""1228_isVIP"";
""1228_setTxFee"" -> ""1228_onlyOwner"";
""1228_getBalance"" -> ""1228_onlyOwner"";
""1228_setVIPFee"" -> ""1228_onlyOwner"";
""1228_ethSendSameValue"" -> ""1228_isVIP"";
""1228_multisendToken"" -> ""1228_coinSendDifferentValue"";
""1228_mutiSendETHWithSameValue"" -> ""1228_ethSendSameValue"";
""1228_mutiSendETHWithDifferentValue"" -> ""1228_ethSendDifferentValue"";
""1228_coinSendDifferentValue"" -> ""1228_isVIP"";
""1228_registerVIP"" -> ""1228_getReceiverAddress"";
""1228_getBalance"" -> ""1228_getReceiverAddress"";
""1228_setReceiverAddress"" -> ""1228_onlyOwner"";
""1228_sendEth"" -> ""1228_ethSendSameValue"";
""1228_addToVIPList"" -> ""1228_onlyOwner"";
}
"
0xf1171e1e8df34ab97832342c7cbf04d9121a1ac3.sol,CSportsAuth,contract CSportsAuth is CSportsConstants { event ContractUpgrade(address newContract); address public ceoAddress; address public cfoAddress; address public cooAddress; address public commissionerAddress; bool public paused = false; bool public isDevelopment = true; modifier onlyUnderDevelopment() { require(isDevelopment == true); _; },1,"subgraph cluster_344_CSportsAuth {
label=""CSportsAuth"";
""344_withdrawBalance"" [label=""withdrawBalance""];
""344_setCOO"" [label=""setCOO""];
""344_unpause"" [label=""unpause""];
""344_setCommissioner"" [label=""setCommissioner""];
""344_setCEO"" [label=""setCEO""];
""344_pause"" [label=""pause""];
""344_setCLevelAddresses"" [label=""setCLevelAddresses""];
""344_setCFO"" [label=""setCFO""];
""344_setProduction"" [label=""setProduction""];
""344_unpause"" -> ""344_onlyCEO"";
""344_setCOO"" -> ""344_onlyCEO"";
""344_withdrawBalance"" -> ""344_onlyCFO"";
""344_unpause"" -> ""344_whenPaused"";
""344_pause"" -> ""344_whenNotPaused"";
""344_setProduction"" -> ""344_onlyCEO"";
""344_pause"" -> ""344_onlyCLevel"";
""344_setCommissioner"" -> ""344_onlyCEO"";
""344_setProduction"" -> ""344_onlyUnderDevelopment"";
""344_setCFO"" -> ""344_onlyCEO"";
""344_setCEO"" -> ""344_onlyCEO"";
""344_setCLevelAddresses"" -> ""344_onlyCEO"";
}
"
0x38c83b225eb17d44f33f8bb3bdc23d86733838db.sol,try_to_play,contract try_to_play { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_127_try_to_play {
label=""try_to_play"";
""127_start_try_to_play"" [label=""start_try_to_play""];
""127_Try"" [label=""Try""];
""127_StopGame"" [label=""StopGame""];
""127_NewQuestion"" [label=""NewQuestion""];
""127_fallback"" [label=""fallback""];
""127_newQuestioner"" [label=""newQuestioner""];
""127_NewQuestion"" -> ""127_onlyQuestionSender"";
""127_StopGame"" -> ""127_onlyQuestionSender"";
""127_newQuestioner"" -> ""127_onlyQuestionSender"";
}
"
0xed710216da4b1416a78768790ca9aa3633ca110f.sol,PLAY_AND_GAIN,"contract PLAY_AND_GAIN { string public question; address questionSender; bytes32 responseHash; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_PLAY_AND_GAIN {
label=""PLAY_AND_GAIN"";
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
}
"
0xf070aaa3149c73626d543e02d4c8826c1762ea71.sol,LUX,"contract LUX is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 80 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 45 * 1 days; uint256 public totalSupply = 800000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000e8; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0x6066C5C29Fedb817B2fBF494b771163254d62295; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1288_LUX {
label=""LUX"";
""1288_Distribute"" [label=""Distribute""];
""1288_transferOwnership"" [label=""transferOwnership""];
""1288_transfer"" [label=""transfer""];
""1288_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1288_allowance"" [label=""allowance""];
""1288_transferFrom"" [label=""transferFrom""];
""1288_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1288_distr"" [label=""distr""];
""1288_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1288_approve"" [label=""approve""];
""1288_withdraw"" [label=""withdraw""];
""1288_add"" [label=""add""];
""1288_getTokenBalance"" [label=""getTokenBalance""];
""1288_finishDistribution"" [label=""finishDistribution""];
""1288_constructor"" [label=""constructor""];
""1288_burn"" [label=""burn""];
""1288_getTokens"" [label=""getTokens""];
""1288_balanceOf"" [label=""balanceOf""];
""1288_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1288_withdrawAll"" [label=""withdrawAll""];
""1288_fallback"" [label=""fallback""];
""1288_transferFrom"" -> ""1288_onlyPayloadSize"";
""1288_updateTokensPerEth"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_canDistr"";
""1288_finishDistribution"" -> ""1288_onlyOwner"";
""1288_DistributeAirdropMultiple"" -> ""1288_onlyOwner"";
""1288_burn"" -> ""1288_onlyOwner"";
""1288_add"" -> ""1288_onlyOwner"";
""1288_transferOwnership"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_distr"";
""1288_DistributeAirdrop"" -> ""1288_onlyOwner"";
""1288_withdraw"" -> ""1288_onlyOwner"";
""1288_distr"" -> ""1288_canDistr"";
""1288_DistributeAirdrop"" -> ""1288_Distribute"";
""1288_withdrawAll"" -> ""1288_onlyOwner"";
""1288_fallback"" -> ""1288_getTokens"";
""1288_Distribute"" -> ""1288_onlyOwner"";
""1288_transfer"" -> ""1288_onlyPayloadSize"";
""1288_DistributeAirdropMultiple"" -> ""1288_Distribute"";
""1288_constructor"" -> ""1288_distr"";
""1288_finishDistribution"" -> ""1288_canDistr"";
""1288_withdrawForeignTokens"" -> ""1288_onlyOwner"";
}
"
0x264979ffd35d608e69b69681f4bbcba9877e6c4a.sol,qz_game,contract qz_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_127_qz_game {
label=""qz_game"";
""127_StopGame"" [label=""StopGame""];
""127_fallback"" [label=""fallback""];
""127_newQuestioner"" [label=""newQuestioner""];
""127_start_qz_game"" [label=""start_qz_game""];
""127_NewQuestion"" [label=""NewQuestion""];
""127_Try"" [label=""Try""];
""127_newQuestioner"" -> ""127_onlyQuestionSender"";
""127_StopGame"" -> ""127_onlyQuestionSender"";
""127_NewQuestion"" -> ""127_onlyQuestionSender"";
}
"
0xbf008cb93c2b19c3ae0db4149bcfa465b2ea0888.sol,GameTable,contract GameTable { using SafeMath for uint; struct Player { address addr; uint amount; uint profit; },1,"subgraph cluster_1183_GameTable {
label=""GameTable"";
""1183_getPlayerAmount"" [label=""getPlayerAmount""];
""1183_GameTable"" [label=""GameTable""];
""1183_getOptionInfo"" [label=""getOptionInfo""];
""1183_kill"" [label=""kill""];
""1183_newGame"" [label=""newGame""];
""1183_getGameNum"" [label=""getGameNum""];
""1183_setWinner"" [label=""setWinner""];
""1183_getGameInfo"" [label=""getGameInfo""];
""1183_getPlayerPlayInfo"" [label=""getPlayerPlayInfo""];
""1183_contribute"" [label=""contribute""];
""1183_newOption"" [label=""newOption""];
""1183_safeWithdrawal"" [label=""safeWithdrawal""];
""1183_getGameWinner"" [label=""getGameWinner""];
""1183_setWinner"" -> ""1183_safeWithdrawal"";
}
"
0xdc8a6ef9a8a4114773e806dc24bb8e7b6f3d92eb.sol,PullPayment,contract PullPayment { using SafeMath for uint256; mapping(address => uint256) public payments; uint256 public totalPayments; function withdrawPayments() public { address payee = msg.sender; uint256 payment = payments[payee]; require(payment != 0); require(address(this).balance >= payment); totalPayments = totalPayments.sub(payment); payments[payee] = 0; payee.transfer(payment); },1,"subgraph cluster_199_PullPayment {
label=""PullPayment"";
""199_asyncSend"" [label=""asyncSend""];
""199_withdrawPayments"" [label=""withdrawPayments""];
}
"
0x0e2354b2ea4a6312009b228d5171bf6a02c51150.sol,THE_GAME,contract THE_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_THE_GAME {
label=""THE_GAME"";
""143_NewQuestion"" [label=""NewQuestion""];
""143_StopGame"" [label=""StopGame""];
""143_fallback"" [label=""fallback""];
""143_Try"" [label=""Try""];
""143_ActivateContract"" [label=""ActivateContract""];
""143_newQuestioner"" [label=""newQuestioner""];
}
"
0xdb209c97e0de799bbf14e3377307780ddc26be4e.sol,DarkPay,"contract DarkPay is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 365 * 1 days; uint public round1 = now + 364 * 1 days; uint256 public totalSupply = 1000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 16000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0x024bf21EDAd749461Bf2E0830bC1F7b282bcea7C; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_DarkPay {
label=""DarkPay"";
""1261_transfer"" [label=""transfer""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_add"" [label=""add""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_burn"" [label=""burn""];
""1261_constructor"" [label=""constructor""];
""1261_distr"" [label=""distr""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_allowance"" [label=""allowance""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_approve"" [label=""approve""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
}
"
0x01e53a2e7122a63845b1c329d4fce8124dda5b06.sol,Loan,contract Loan is Base { struct Creditor { uint Time; uint Invested; },1,"subgraph cluster_496_Loan {
label=""Loan"";
""496_SetPrcntRate"" [label=""SetPrcntRate""];
""496_Wthdraw"" [label=""Wthdraw""];
""496_StartRefound"" [label=""StartRefound""];
""496_initLoan"" [label=""initLoan""];
""496_InvestFund"" [label=""InvestFund""];
""496_CheckProfit"" [label=""CheckProfit""];
""496_ToLend"" [label=""ToLend""];
""496_WithdrawToInvestor"" [label=""WithdrawToInvestor""];
""496_fallback"" [label=""fallback""];
""496_SetScndOwner"" [label=""SetScndOwner""];
""496_SetThrdOwner"" [label=""SetThrdOwner""];
""496_TakeBack"" [label=""TakeBack""];
""496_isOwner"" [label=""isOwner""];
""496_WithdrawToInvestor"" -> ""496_isOwner"";
""496_fallback"" -> ""496_InvestFund"";
""496_TakeBack"" -> ""496_CheckProfit"";
}
"
0x7271f8fdd7693dca37b40403080abe89ae740168.sol,Game,contract Game { address constant private PROMO = 0x51A2BF880F4db7713E95498833308ffE4D61d080; uint constant public PROMO_PERCENT = 15; uint constant public MULTIPLIER = 120; uint constant public MAX_DEPOSIT = 1 ether; uint constant public MIN_DEPOSIT = 0.01 ether; uint constant public LAST_DEPOSIT_PERCENT = 5; LastDeposit public last; struct Deposit { address depositor; uint128 deposit; uint128 expect; },1,"subgraph cluster_474_Game {
label=""Game"";
""474_pay"" [label=""pay""];
""474_getDeposit"" [label=""getDeposit""];
""474_getDepositsCount"" [label=""getDepositsCount""];
""474_getDeposits"" [label=""getDeposits""];
""474_getQueueLength"" [label=""getQueueLength""];
""474_fallback"" [label=""fallback""];
""474_fallback"" -> ""474_pay"";
""474_getDeposits"" -> ""474_getDepositsCount"";
}
"
0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_2222_RefundVault {
label=""RefundVault"";
""2222_refund"" [label=""refund""];
""2222_enableRefunds"" [label=""enableRefunds""];
""2222_deposit"" [label=""deposit""];
""2222_close"" [label=""close""];
""2222_RefundVault"" [label=""RefundVault""];
""2222_deposit"" -> ""2222_onlyOwner"";
""2222_close"" -> ""2222_onlyOwner"";
""2222_enableRefunds"" -> ""2222_onlyOwner"";
}
"
0x3008a6c26e54399fd0ece8fd2e5e06b3d807509c.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_369_AccessService {
label=""AccessService"";
""369_setFinance"" [label=""setFinance""];
""369_withdraw"" [label=""withdraw""];
""369_setService"" [label=""setService""];
}
"
0x345ab5e5f971dbdbc92af2779ce7a8bbf1819e59.sol,TwentyDollars,contract TwentyDollars { struct Bid { address owner; uint256 amount; },1,"subgraph cluster_262_TwentyDollars {
label=""TwentyDollars"";
""262_winnerWithdraw"" [label=""winnerWithdraw""];
""262_biddingClosed"" [label=""biddingClosed""];
""262_ownerWithdraw"" [label=""ownerWithdraw""];
""262_getMyBalance"" [label=""getMyBalance""];
""262_constructor"" [label=""constructor""];
""262_getContractBalance"" [label=""getContractBalance""];
""262_bid"" [label=""bid""];
""262_withdraw"" [label=""withdraw""];
""262_fallback"" [label=""fallback""];
""262_ownerWithdraw"" -> ""262_onlyOwner"";
""262_winnerWithdraw"" -> ""262_onlyHighestBidder"";
""262_bid"" -> ""262_onlyBiddingOpen"";
""262_ownerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_winnerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_ownerWithdraw"" -> ""262_getContractBalance"";
""262_fallback"" -> ""262_bid"";
}
"
0xe386b139ed3715ca4b18fd52671bdcea1cdfe4b1.sol,Crowdsale,"contract Crowdsale is Owned, Stateful { uint public etherPriceUSDWEI; address public beneficiary; uint public totalLimitUSDWEI; uint public minimalSuccessUSDWEI; uint public collectedUSDWEI; uint public crowdsaleStartTime; uint public crowdsaleFinishTime; struct Investor { uint amountTokens; uint amountWei; }",1,"subgraph cluster_1286_Crowdsale {
label=""Crowdsale"";
""1286_getTokenPriceUSDWEI"" [label=""getTokenPriceUSDWEI""];
""1286_returnInvestmentsTo"" [label=""returnInvestmentsTo""];
""1286_setEtherPriceUSDWEI"" [label=""setEtherPriceUSDWEI""];
""1286_fallback"" [label=""fallback""];
""1286_returnInvestmentsToInternal"" [label=""returnInvestmentsToInternal""];
""1286_emitAdditionalTokens"" [label=""emitAdditionalTokens""];
""1286_withdrawFunds"" [label=""withdrawFunds""];
""1286_emitTokensFor"" [label=""emitTokensFor""];
""1286_finishPrivateSaleAndStartPreSale"" [label=""finishPrivateSaleAndStartPreSale""];
""1286_returnInvestments"" [label=""returnInvestments""];
""1286_startPrivateSale"" [label=""startPrivateSale""];
""1286_withdrawBack"" [label=""withdrawBack""];
""1286_startSale"" [label=""startSale""];
""1286_Crowdsale"" [label=""Crowdsale""];
""1286_burnTokens"" [label=""burnTokens""];
""1286_depositUSD"" [label=""depositUSD""];
""1286_emitTokens"" [label=""emitTokens""];
""1286_completeSale"" [label=""completeSale""];
""1286_finishPreSale"" [label=""finishPreSale""];
""1286_depositBTC"" [label=""depositBTC""];
""1286_setBeneficiary"" [label=""setBeneficiary""];
""1286_failSale"" [label=""failSale""];
""1286_startSale"" -> ""1286_setState"";
""1286_startSale"" -> ""1286_onlyOwner"";
""1286_finishPrivateSaleAndStartPreSale"" -> ""1286_setState"";
""1286_startPrivateSale"" -> ""1286_setState"";
""1286_setBeneficiary"" -> ""1286_onlyOwner"";
""1286_depositBTC"" -> ""1286_emitTokensFor"";
""1286_depositBTC"" -> ""1286_limitNotExceeded"";
""1286_emitTokensFor"" -> ""1286_emitTokens"";
""1286_fallback"" -> ""1286_emitTokensFor"";
""1286_withdrawFunds"" -> ""1286_onlyOwner"";
""1286_depositBTC"" -> ""1286_onlyOwnerOrBtcOracle"";
""1286_failSale"" -> ""1286_setState"";
""1286_completeSale"" -> ""1286_onlyOwner"";
""1286_startPrivateSale"" -> ""1286_onlyOwner"";
""1286_withdrawBack"" -> ""1286_saleFailedState"";
""1286_completeSale"" -> ""1286_emitAdditionalTokens"";
""1286_returnInvestmentsTo"" -> ""1286_saleFailedState"";
""1286_fallback"" -> ""1286_crowdsaleState"";
""1286_finishPreSale"" -> ""1286_setState"";
""1286_finishPrivateSaleAndStartPreSale"" -> ""1286_onlyOwner"";
""1286_failSale"" -> ""1286_burnTokens"";
""1286_Crowdsale"" -> ""1286_Owned"";
""1286_returnInvestments"" -> ""1286_saleFailedState"";
""1286_setEtherPriceUSDWEI"" -> ""1286_onlyOwnerOrOracle"";
""1286_withdrawBack"" -> ""1286_returnInvestmentsToInternal"";
""1286_fallback"" -> ""1286_limitNotExceeded"";
""1286_depositBTC"" -> ""1286_crowdsaleState"";
""1286_depositUSD"" -> ""1286_limitNotExceeded"";
""1286_depositUSD"" -> ""1286_getTokenPriceUSDWEI"";
""1286_completeSale"" -> ""1286_setState"";
""1286_depositUSD"" -> ""1286_emitTokensFor"";
""1286_fallback"" -> ""1286_getTokenPriceUSDWEI"";
""1286_depositUSD"" -> ""1286_onlyOwner"";
""1286_depositBTC"" -> ""1286_getTokenPriceUSDWEI"";
""1286_finishPreSale"" -> ""1286_onlyOwner"";
""1286_depositUSD"" -> ""1286_crowdsaleState"";
""1286_returnInvestments"" -> ""1286_returnInvestmentsToInternal"";
""1286_returnInvestmentsTo"" -> ""1286_returnInvestmentsToInternal"";
}
"
0xaa652d53909b01c5a6b8e7cd814f9adea18c08f7.sol,TCRSale,"contract TCRSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; TCRToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1585_TCRSale {
label=""TCRSale"";
""1585_convertToMiniTcr"" [label=""convertToMiniTcr""];
""1585_terminate"" [label=""terminate""];
""1585_changeEndTime"" [label=""changeEndTime""];
""1585_safeWithdrawal"" [label=""safeWithdrawal""];
""1585_setRate"" [label=""setRate""];
""1585_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1585_changeStartTime"" [label=""changeStartTime""];
""1585_checkFundingGoal"" [label=""checkFundingGoal""];
""1585_checkFundingCap"" [label=""checkFundingCap""];
""1585_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1585_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1585_TCRSale"" [label=""TCRSale""];
""1585_fallback"" [label=""fallback""];
""1585_currentTime"" [label=""currentTime""];
""1585_fallback"" -> ""1585_whenNotPaused"";
""1585_ownerAllocateTokens"" -> ""1585_checkFundingGoal"";
""1585_fallback"" -> ""1585_beforeDeadline"";
""1585_fallback"" -> ""1585_checkFundingCap"";
""1585_ownerUnlockFund"" -> ""1585_onlyOwner"";
""1585_ownerSafeWithdrawal"" -> ""1585_onlyOwner"";
""1585_fallback"" -> ""1585_nonReentrant"";
""1585_ownerAllocateTokens"" -> ""1585_nonReentrant"";
""1585_ownerAllocateTokens"" -> ""1585_onlyOwner"";
""1585_setRate"" -> ""1585_onlyOwner"";
""1585_TCRSale"" -> ""1585_setRate"";
""1585_changeEndTime"" -> ""1585_onlyOwner"";
""1585_safeWithdrawal"" -> ""1585_afterDeadline"";
""1585_ownerAllocateTokens"" -> ""1585_checkFundingCap"";
""1585_fallback"" -> ""1585_checkFundingGoal"";
""1585_terminate"" -> ""1585_onlyOwner"";
""1585_ownerUnlockFund"" -> ""1585_afterDeadline"";
""1585_fallback"" -> ""1585_afterStartTime"";
""1585_changeStartTime"" -> ""1585_onlyOwner"";
""1585_safeWithdrawal"" -> ""1585_nonReentrant"";
""1585_ownerSafeWithdrawal"" -> ""1585_nonReentrant"";
""1585_fallback"" -> ""1585_saleNotClosed"";
}
"
0xcf91d43b85a5c53d85c567d4eed972965335aeea.sol,Slaughter3D,contract Slaughter3D is Owned { using SafeMath for uint; Snip3DInterface constant Snip3Dcontract_ = Snip3DInterface(0xb172BB8BAae74F27Ade3211E0c145388d3b4f8d8); function harvestableBalance() view public returns(uint256) { return ( address(this).balance) ; },1,"subgraph cluster_263_Slaughter3D {
label=""Slaughter3D"";
""263_fetchBalance"" [label=""fetchBalance""];
""263_validate"" [label=""validate""];
""263_fallback"" [label=""fallback""];
""263_fetchvault"" [label=""fetchvault""];
""263_harvestableBalance"" [label=""harvestableBalance""];
""263_sacUp"" [label=""sacUp""];
""263_unfetchedVault"" [label=""unfetchedVault""];
""263_fetchBalance"" -> ""263_onlyOwner"";
""263_sacUp"" -> ""263_onlyOwner"";
""263_validate"" -> ""263_onlyOwner"";
}
"
0xf3391a78b4d53b2a600ad9e663ae00f6d5bb41a4.sol,MillenniumNetwork,"contract MillenniumNetwork is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 330000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 1000000e8; uint public target0drop = 4000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_MillenniumNetwork {
label=""MillenniumNetwork"";
""1253_constructor"" [label=""constructor""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_distr"" [label=""distr""];
""1253_getTokens"" [label=""getTokens""];
""1253_fallback"" [label=""fallback""];
""1253_approve"" [label=""approve""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_withdraw"" [label=""withdraw""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_add"" [label=""add""];
""1253_transfer"" [label=""transfer""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_Distribute"" [label=""Distribute""];
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_distr"" -> ""1253_canDistr"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
}
"
0x1e200a9af1ab6a0d74cd44c489bf65744bc7d961.sol,BountyBG,"contract BountyBG { address public owner; uint256 public bountyCount = 0; uint256 public minBounty = 10 finney; uint256 public bountyFee = 2 finney; uint256 public bountyFeeCount = 0; uint256 public bountyBeneficiariesCount = 2; uint256 public bountyDuration = 30 hours; mapping(uint256 => Bounty) bountyAt; event BountyStatus(string _msg, uint256 _id, address _from, uint256 _amount); event RewardStatus(string _msg, uint256 _id, address _to, uint256 _amount); event ErrorStatus(string _msg, uint256 _id, address _to, uint256 _amount); struct Bounty { uint256 id; address owner; uint256 bounty; uint256 remainingBounty; uint256 startTime; uint256 endTime; bool ended; bool retracted; }",1,"subgraph cluster_551_BountyBG {
label=""BountyBG"";
""551_rewardUser"" [label=""rewardUser""];
""551_getBounty"" [label=""getBounty""];
""551_withdrawFee"" [label=""withdrawFee""];
""551_setMinBounty"" [label=""setMinBounty""];
""551_rewardUsers"" [label=""rewardUsers""];
""551_createBounty"" [label=""createBounty""];
""551_BountyBG"" [label=""BountyBG""];
""551_cancelBounty"" [label=""cancelBounty""];
""551_setBountyDuration"" [label=""setBountyDuration""];
""551_setBountyBeneficiariesCount"" [label=""setBountyBeneficiariesCount""];
""551_getBalance"" [label=""getBalance""];
""551_setBountyDuration"" -> ""551_onlyOwner"";
""551_rewardUser"" -> ""551_onlyOwner"";
""551_withdrawFee"" -> ""551_onlyOwner"";
""551_setMinBounty"" -> ""551_onlyOwner"";
""551_setBountyBeneficiariesCount"" -> ""551_onlyOwner"";
""551_rewardUsers"" -> ""551_onlyOwner"";
}
"
0xce51f6cac9fb2695d944f2d5e2699d68aa7b656e.sol,Locksmith,"contract Locksmith is owned, logger, helper { uint public nonce; uint public m_proofs; bool public didProve; bytes32 public lock; string public protocol = ; struct proof { address prover; address receiver; string key; bytes32 lock; }",1,"subgraph cluster_605_Locksmith {
label=""Locksmith"";
""605_kill"" [label=""kill""];
""605_fallback"" [label=""fallback""];
""605_logEvent"" [label=""logEvent""];
""605_unlock"" [label=""unlock""];
""605_Locksmith"" [label=""Locksmith""];
""605_sendTo"" [label=""sendTo""];
""605_setLock"" [label=""setLock""];
""605_setLock"" -> ""605_onlyOwner"";
""605_sendTo"" -> ""605_onlyOwner"";
""605_unlock"" -> ""605_logEvent"";
""605_kill"" -> ""605_onlyOwner"";
""605_sendTo"" -> ""605_logEvent"";
""605_setLock"" -> ""605_logEvent"";
}
"
0x4933dea7ea497a87d41acc5d8048ac2d8e6cedfb.sol,OrganizeFunds,contract OrganizeFunds { struct ActivityAccount { uint credited; uint balance; uint pctx10; address addr; string name; },1,"subgraph cluster_518_OrganizeFunds {
label=""OrganizeFunds"";
""518_fallback"" [label=""fallback""];
""518_hariKari"" [label=""hariKari""];
""518_setName"" [label=""setName""];
""518_addActivityAccount"" [label=""addActivityAccount""];
""518_setWitdrawGas"" [label=""setWitdrawGas""];
""518_getActivityAccountInfo"" [label=""getActivityAccountInfo""];
""518_reset"" [label=""reset""];
""518_getTotalPctx10"" [label=""getTotalPctx10""];
""518_distribute"" [label=""distribute""];
""518_withdraw"" [label=""withdraw""];
""518_lock"" [label=""lock""];
""518_OrganizeFunds"" [label=""OrganizeFunds""];
""518_lock"" -> ""518_ownerOnly"";
""518_setWitdrawGas"" -> ""518_ownerOnly"";
""518_addActivityAccount"" -> ""518_ownerOnly"";
""518_hariKari"" -> ""518_unlockedOnly"";
""518_reset"" -> ""518_unlockedOnly"";
""518_addActivityAccount"" -> ""518_unlockedOnly"";
""518_setName"" -> ""518_ownerOnly"";
""518_reset"" -> ""518_ownerOnly"";
""518_hariKari"" -> ""518_ownerOnly"";
}
"
0x6947335452cb7a452fc337c28cb0d597806c7672.sol,SmartWeddingContract,"contract SmartWeddingContract { event WrittenContractProposed(uint timestamp, string ipfsHash, address wallet); event Signed(uint timestamp, address wallet); event ContractSigned(uint timestamp); event AssetProposed(uint timestamp, string asset, address wallet); event AssetAddApproved(uint timestamp, string asset, address wallet); event AssetAdded(uint timestamp, string asset); event AssetRemoveApproved(uint timestamp, string asset, address wallet); event AssetRemoved(uint timestamp, string asset); event DivorceApproved(uint timestamp, address wallet); event Divorced(uint timestamp); event FundsSent(uint timestamp, address wallet, uint amount); event FundsReceived(uint timestamp, address wallet, uint amount); bool public signed = false; bool public divorced = false; mapping (address => bool) private hasSigned; mapping (address => bool) private hasDivorced; address public husbandAddress; address public wifeAddress; string public writtenContractIpfsHash; struct Asset { string data; uint husbandAllocation; uint wifeAllocation; bool added; bool removed; mapping (address => bool) hasApprovedAdd; mapping (address => bool) hasApprovedRemove; }",1,"subgraph cluster_823_SmartWeddingContract {
label=""SmartWeddingContract"";
""823_pay"" [label=""pay""];
""823_constructor"" [label=""constructor""];
""823_fallback"" [label=""fallback""];
""823_signContract"" [label=""signContract""];
""823_removeAsset"" [label=""removeAsset""];
""823_approveAsset"" [label=""approveAsset""];
""823_divorce"" [label=""divorce""];
""823_proposeWrittenContract"" [label=""proposeWrittenContract""];
""823_isSameString"" [label=""isSameString""];
""823_proposeAsset"" [label=""proposeAsset""];
""823_getAssetIds"" [label=""getAssetIds""];
""823_proposeAsset"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_isNotDivorced"";
""823_signContract"" -> ""823_isSameString"";
""823_fallback"" -> ""823_isNotDivorced"";
""823_proposeWrittenContract"" -> ""823_onlySpouse"";
""823_pay"" -> ""823_onlySpouse"";
""823_proposeAsset"" -> ""823_isNotDivorced"";
""823_pay"" -> ""823_isNotDivorced"";
""823_proposeAsset"" -> ""823_isSameString"";
""823_fallback"" -> ""823_isSigned"";
""823_approveAsset"" -> ""823_isNotDivorced"";
""823_approveAsset"" -> ""823_isSigned"";
""823_approveAsset"" -> ""823_onlySpouse"";
""823_proposeAsset"" -> ""823_isSigned"";
""823_signContract"" -> ""823_onlySpouse"";
""823_divorce"" -> ""823_isSigned"";
""823_pay"" -> ""823_isSigned"";
""823_divorce"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_isSigned"";
""823_divorce"" -> ""823_isNotDivorced"";
}
"
0xd39ff379cb1f4d6f2aade581c039c15db2cb28f8.sol,BackMeApp,contract BackMeApp { address public owner; uint256 public minEsteemAmount; bool public isShutDown; struct EtherBox { bytes32 label; address owner; uint256 expiration; string ownerUrl; },1,"subgraph cluster_437_BackMeApp {
label=""BackMeApp"";
""437_esteem"" [label=""esteem""];
""437_setMinEsteemAmount"" [label=""setMinEsteemAmount""];
""437_getEtherBoxes"" [label=""getEtherBoxes""];
""437_constructor"" [label=""constructor""];
""437_deleteEtherBox"" [label=""deleteEtherBox""];
""437_publishEtherBox"" [label=""publishEtherBox""];
""437_toggleFactoryPower"" [label=""toggleFactoryPower""];
""437_destroyFactory"" [label=""destroyFactory""];
""437_isExpired"" [label=""isExpired""];
""437_publishEtherBox"" -> ""437_onlyWhenRunning"";
""437_toggleFactoryPower"" -> ""437_onlyOwner"";
""437_destroyFactory"" -> ""437_onlyOwner"";
""437_setMinEsteemAmount"" -> ""437_onlyOwner"";
}
"
0x006ff3494c04680cfbf39b0396054486f3f6ad32.sol,PLAY_NOW,contract PLAY_NOW { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>=1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_PLAY_NOW {
label=""PLAY_NOW"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_Try"" [label=""Try""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_SetupPlay"" [label=""SetupPlay""];
""132_newQuestioner"" [label=""newQuestioner""];
}
"
0x1767856bc75cf070de5e6ba3d0c718440f008c66.sol,TimeCapsuleEvent,"contract TimeCapsuleEvent is Ownable { address public Owner; mapping (address=>uint) public deposits; uint public openDate; event Initialized(address indexed owner, uint openOn); function initCapsule(uint open) { Owner = msg.sender; openDate = open; Initialized(Owner, openDate); }",1,"subgraph cluster_181_TimeCapsuleEvent {
label=""TimeCapsuleEvent"";
""181_withdraw"" [label=""withdraw""];
""181_fallback"" [label=""fallback""];
""181_kill"" [label=""kill""];
""181_deposit"" [label=""deposit""];
""181_initCapsule"" [label=""initCapsule""];
""181_kill"" -> ""181_onlyOwner"";
""181_withdraw"" -> ""181_onlyOwner"";
""181_fallback"" -> ""181_deposit"";
}
"
0x325f89386b72087530440e0bceb8490d78b47f21.sol,EtherStore,contract EtherStore is Managable{ bool public WrapperisEnabled; address public EtherWrapper; modifier WrapperEnabled{ require(WrapperisEnabled); _; },1,"subgraph cluster_1412_EtherStore {
label=""EtherStore"";
""1412_deposit"" [label=""deposit""];
""1412_deployWrapper"" [label=""deployWrapper""];
""1412_withdrawTo"" [label=""withdrawTo""];
""1412_depositTo"" [label=""depositTo""];
""1412_EtherStore"" [label=""EtherStore""];
""1412_setupWrapper"" [label=""setupWrapper""];
""1412_fallback"" [label=""fallback""];
""1412_withdraw"" [label=""withdraw""];
""1412_changeWrapper"" [label=""changeWrapper""];
""1412_deployWrapper"" -> ""1412_PreWrapper"";
""1412_changeWrapper"" -> ""1412_WrapperEnabled"";
""1412_EtherStore"" -> ""1412_Managable"";
""1412_fallback"" -> ""1412_deposit"";
""1412_withdrawTo"" -> ""1412_WrapperEnabled"";
""1412_withdraw"" -> ""1412_WrapperEnabled"";
""1412_setupWrapper"" -> ""1412_onlyAdmin"";
""1412_deployWrapper"" -> ""1412_onlyAdmin"";
""1412_deposit"" -> ""1412_WrapperEnabled"";
""1412_changeWrapper"" -> ""1412_onlyAdmin"";
""1412_depositTo"" -> ""1412_WrapperEnabled"";
""1412_setupWrapper"" -> ""1412_PreWrapper"";
}
"
0x8cd06b5c327b0e277a7f6b08b9acea4d8ee36180.sol,JungleScratch,contract JungleScratch is Owned { using SafeMath for uint; uint public LimitBottom = 0.02 ether; uint public LimitTop = 0.1 ether; address public Drawer; struct Game { bytes32 SecretKey_P; bool isPlay; bool isPay; uint Result; uint Time; address Buyer; uint value; },1,"subgraph cluster_1109_JungleScratch {
label=""JungleScratch"";
""1109_fallback"" [label=""fallback""];
""1109_changeLimit"" [label=""changeLimit""];
""1109_changeDrawer"" [label=""changeDrawer""];
""1109_getTicketTime"" [label=""getTicketTime""];
""1109_submit"" [label=""submit""];
""1109_withdraw"" [label=""withdraw""];
""1109_getisPlay"" [label=""getisPlay""];
""1109_award"" [label=""award""];
""1109_chargeOwe"" [label=""chargeOwe""];
""1109_JungleScratch"" [label=""JungleScratch""];
""1109_withdraw"" -> ""1109_onlyOwner"";
""1109_changeDrawer"" -> ""1109_onlyOwner"";
""1109_changeLimit"" -> ""1109_onlyOwner"";
}
"
0x83d3abc4e75885db350ace57f99c3a3e00286fe8.sol,BetaCoin,"contract BetaCoin is ERC20 { using SafeMath for uint256; address owner1 = msg.sender; address owner2; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) times; mapping (address => mapping (uint256 => uint256)) dorpnum; mapping (address => mapping (uint256 => uint256)) dorptime; mapping (address => mapping (uint256 => uint256)) freeday; mapping (address => bool) public frozenAccount; mapping (address => bool) public airlist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 _Rate = 10 ** decimals; uint256 public totalSupply = 10000000000 * _Rate; uint256 public totalDistributed = 0; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 200 * _Rate; uint256 public _per = 1; bool public distributionClosed = true; bool key; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event FrozenFunds(address target, bool frozen); event Distr(address indexed to, uint256 amount); event DistrClosed(bool Closed); modifier onlyOwner() { require(msg.sender == owner1 || msg.sender == owner2); _; }",1,"subgraph cluster_1230_BetaCoin {
label=""BetaCoin"";
""1230_approve"" [label=""approve""];
""1230_closeDistribution"" [label=""closeDistribution""];
""1230_freezeAccount"" [label=""freezeAccount""];
""1230_balanceOf"" [label=""balanceOf""];
""1230_BetaCoin"" [label=""BetaCoin""];
""1230_fallback"" [label=""fallback""];
""1230_Set_per"" [label=""Set_per""];
""1230_freeze"" [label=""freeze""];
""1230_distr"" [label=""distr""];
""1230_getTokens"" [label=""getTokens""];
""1230_transfer"" [label=""transfer""];
""1230_distribute"" [label=""distribute""];
""1230_transferOwnership"" [label=""transferOwnership""];
""1230_nowInSeconds"" [label=""nowInSeconds""];
""1230_withdraw"" [label=""withdraw""];
""1230_allowance"" [label=""allowance""];
""1230_transferFrom"" [label=""transferFrom""];
""1230_lockOf"" [label=""lockOf""];
""1230_distribute"" -> ""1230_distr"";
""1230_closeDistribution"" -> ""1230_onlyOwner"";
""1230_transferOwnership"" -> ""1230_onlyOwner"";
""1230_transferFrom"" -> ""1230_onlyPayloadSize"";
""1230_freeze"" -> ""1230_freezeAccount"";
""1230_transferFrom"" -> ""1230_lockOf"";
""1230_transfer"" -> ""1230_onlyPayloadSize"";
""1230_transfer"" -> ""1230_lockOf"";
""1230_fallback"" -> ""1230_getTokens"";
""1230_withdraw"" -> ""1230_onlyOwner"";
""1230_distribute"" -> ""1230_onlyOwner"";
""1230_freeze"" -> ""1230_onlyOwner"";
""1230_Set_per"" -> ""1230_onlyOwner"";
}
"
0x6ace03f517ae15f1a8d1b6811d23f7aa8c295be0.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_342_RefundVault {
label=""RefundVault"";
""342_enableRefunds"" [label=""enableRefunds""];
""342_refund"" [label=""refund""];
""342_constructor"" [label=""constructor""];
""342_close"" [label=""close""];
""342_deposit"" [label=""deposit""];
""342_enableRefunds"" -> ""342_onlyOwner"";
""342_deposit"" -> ""342_onlyOwner"";
""342_close"" -> ""342_onlyOwner"";
}
"
0xb387be1e10d56bd7c6849b7be9d6aad564854d72.sol,Alfa_quiZ,contract Alfa_quiZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Alfa_quiZ {
label=""Alfa_quiZ"";
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x78c2a1e91b52bca4130b6ed9edd9fbcfd4671c37.sol,WhaleGiveaway1,contract WhaleGiveaway1 { address public Owner = msg.sender; uint constant public minEligibility = 0.999001 ether; function() public payable { },1,"subgraph cluster_93_WhaleGiveaway1 {
label=""WhaleGiveaway1"";
""93_fallback"" [label=""fallback""];
""93_Command"" [label=""Command""];
""93_withdraw"" [label=""withdraw""];
""93_redeem"" [label=""redeem""];
}
"
0x1bee0ba6c6dee64b3ea062ba2f779e0e8ff4d733.sol,SIMPLECOIN,"contract SIMPLECOIN is StandardToken, Ownable { using SafeMath for uint; string public name = ; string public symbol = ; uint public decimals = 18; uint public constant WEI = 1000000000000000000; uint public constant INITIAL_SUPPLY = 500000000 * WEI; uint public constant ICO_START_TIME = 1507572447; uint public constant PRICE = 600; uint public constant _ONE = 1 * WEI; uint public constant _FIFTY = 50 * WEI; uint public constant _HUNDRED = 100 * WEI; uint public constant _FIVEHUNDRED = 500 * WEI; uint public constant _THOUSAND = 1000 * WEI; uint public constant _FIVETHOUSAND = 5000 * WEI; address public TEAM_WALLET = 0x08FB9bF8645c5f1B2540436C6352dA23eE843b50; address public ICO_ADDRESS = 0x1c01C01C01C01c01C01c01c01c01C01c01c01c01; uint public current_supply = 0; uint public ico_starting_supply = 0; bool public preMarketingSharesDistributed = false; bool public isPreICOPrivateOpened = false; bool public isPreICOPrivateClosed = false; bool public isPreICOPublicOpened = false; bool public isPreICOPublicClosed = false; bool public isICOOpened = false; bool public isICOClosed = false; event PreICOPrivateOpened(); event PreICOPrivateClosed(); event PreICOPublicOpened(); event PreICOPublicClosed(); event ICOOpened(); event ICOClosed(); event SupplyChanged(uint supply, uint old_supply); event SMPAcquired(address account, uint amount_in_wei, uint amount_in_rkc); function SIMPLECOIN() { distributeMarketingShares(); }",1,"subgraph cluster_1524_SIMPLECOIN {
label=""SIMPLECOIN"";
""1524_SIMPLECOIN"" [label=""SIMPLECOIN""];
""1524_closePreICOPrivate"" [label=""closePreICOPrivate""];
""1524_openPreICOPrivate"" [label=""openPreICOPrivate""];
""1524_openICO"" [label=""openICO""];
""1524_getBalance"" [label=""getBalance""];
""1524_transfer"" [label=""transfer""];
""1524_pullEtherFromContractAfterPreICOPublic"" [label=""pullEtherFromContractAfterPreICOPublic""];
""1524_transferFrom"" [label=""transferFrom""];
""1524_closeICO"" [label=""closeICO""];
""1524_getSMPTokensAmountPerWei"" [label=""getSMPTokensAmountPerWei""];
""1524_buy"" [label=""buy""];
""1524_fallback"" [label=""fallback""];
""1524_getSupply"" [label=""getSupply""];
""1524_getPriceSMPTokensPerWei"" [label=""getPriceSMPTokensPerWei""];
""1524_distributeMarketingShares"" [label=""distributeMarketingShares""];
""1524_pullEtherFromContractAfterPreICOPrivate"" [label=""pullEtherFromContractAfterPreICOPrivate""];
""1524_closePreICOPublic"" [label=""closePreICOPublic""];
""1524_openPreICOPublic"" [label=""openPreICOPublic""];
""1524_getSMPTokensAmountPerEthInternal"" [label=""getSMPTokensAmountPerEthInternal""];
""1524_pullEtherFromContractAfterICO"" [label=""pullEtherFromContractAfterICO""];
""1524_getSMPTokensLeftForICO"" [label=""getSMPTokensLeftForICO""];
""1524_getSMPTokensBoughtInICO"" [label=""getSMPTokensBoughtInICO""];
""1524_pullEtherFromContractAfterPreICOPrivate"" -> ""1524_onlyOwner"";
""1524_openPreICOPrivate"" -> ""1524_onlyOwner"";
""1524_getSMPTokensAmountPerWei"" -> ""1524_getSMPTokensAmountPerEthInternal"";
""1524_transferFrom"" -> ""1524_allowedPayments"";
""1524_closePreICOPrivate"" -> ""1524_onlyOwner"";
""1524_SIMPLECOIN"" -> ""1524_distributeMarketingShares"";
""1524_buy"" -> ""1524_getSMPTokensAmountPerEthInternal"";
""1524_transfer"" -> ""1524_allowedPayments"";
""1524_distributeMarketingShares"" -> ""1524_onlyOwner"";
""1524_closePreICOPublic"" -> ""1524_onlyOwner"";
""1524_pullEtherFromContractAfterICO"" -> ""1524_onlyOwner"";
""1524_transferFrom"" -> ""1524_transferFrom"";
""1524_getSMPTokensBoughtInICO"" -> ""1524_getSMPTokensLeftForICO"";
""1524_pullEtherFromContractAfterPreICOPublic"" -> ""1524_onlyOwner"";
""1524_openICO"" -> ""1524_onlyOwner"";
""1524_closeICO"" -> ""1524_onlyOwner"";
""1524_transfer"" -> ""1524_transfer"";
""1524_openPreICOPublic"" -> ""1524_onlyOwner"";
""1524_transfer"" -> ""1524_onlyPayloadSize"";
""1524_fallback"" -> ""1524_buy"";
}
"
0x7fceafdefc16b0f703a43ffb0451ddd2a7cbd6dc.sol,alfa_Quiz,contract alfa_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_147_alfa_Quiz {
label=""alfa_Quiz"";
""147_Start"" [label=""Start""];
""147_Try"" [label=""Try""];
""147_Stop"" [label=""Stop""];
""147_fallback"" [label=""fallback""];
""147_constructor"" [label=""constructor""];
""147_New"" [label=""New""];
""147_New"" -> ""147_isAdmin"";
""147_Start"" -> ""147_isAdmin"";
""147_Stop"" -> ""147_isAdmin"";
}
"
0x2aaefbac989f8951436c36474c304af7bf31bb26.sol,Broker,"contract Broker is Administration { event BrokerRegistered(uint indexed brokerId, address indexed broker); event AppendSubBroker(uint indexed brokerId, uint indexed subBrokerId, address indexed subBroker); event BrokerTransfer(address indexed newBroker, uint indexed brokerId, uint indexed subBrokerId); event BrokerFeeDistrubution(uint brokerId, address indexed vipBroker, uint indexed vipShare, uint subBrokerId, address indexed broker, uint share); event BrokerFeeClaim(address indexed broker, uint indexed fee); mapping (uint => address[]) BrokerIdToBrokers; mapping (uint => uint) BrokerIdToSpots; mapping (address => uint) BrokerIncoming; mapping (address => bool) UserToIfBroker; uint public vipBrokerFee = 5 ether; uint public brokerFee = 1.5 ether; uint public vipBrokerNum = 1000; uint public subBrokerNum = 5; function _brokerFeeDistribute(uint _price, uint _type, uint _brokerId, uint _subBrokerId) internal { address vipBroker = getBrokerAddress(_brokerId, 0); address broker = getBrokerAddress(_brokerId, _subBrokerId); require(vipBroker != address(0) && broker != address(0)); uint totalShare = _price*rewardPercent[_type]/100; BrokerIncoming[vipBroker] = BrokerIncoming[vipBroker] + totalShare*15/100; BrokerIncoming[broker] = BrokerIncoming[broker] + totalShare*85/100; emit BrokerFeeDistrubution(_brokerId, vipBroker, totalShare*15/100, _subBrokerId, broker, totalShare*85/100); }",1,"subgraph cluster_967_Broker {
label=""Broker"";
""967_transferBroker"" [label=""transferBroker""];
""967__brokerFeeDistribute"" [label=""_brokerFeeDistribute""];
""967_assignSubBroker"" [label=""assignSubBroker""];
""967_getBrokerAddress"" [label=""getBrokerAddress""];
""967_getVipBrokerNum"" [label=""getVipBrokerNum""];
""967_getBrokerInfo"" [label=""getBrokerInfo""];
""967_getBrokerIncoming"" [label=""getBrokerIncoming""];
""967_claimBrokerFee"" [label=""claimBrokerFee""];
""967_registerBroker"" [label=""registerBroker""];
""967_claimBrokerFee"" -> ""967_whenNotPaused"";
""967_transferBroker"" -> ""967_whenNotPaused"";
""967_getVipBrokerNum"" -> ""967_safeSub"";
""967__brokerFeeDistribute"" -> ""967_getBrokerAddress"";
}
"
0x1f4215fe007ee5b170391241656a28a8bd13826e.sol,VVToken,"contract VVToken is MultiOwner{ event SubmitTransaction(bytes32 transactionHash); event Confirmation(address sender, bytes32 transactionHash); event Execution(bytes32 transactionHash); event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event FeePaid(address indexed from, address indexed to, uint256 value); event VoidAccount(address indexed from, address indexed to, uint256 value); event Bonus(uint256 value); event Burn(uint256 value); string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 3000000000 * 10 ** uint256(decimals); uint256 public EthPerToken = 300000; uint256 public ChargeFee = 2; mapping(address => uint256) public balanceOf; mapping(address => bool) public frozenAccount; mapping (bytes32 => mapping (address => bool)) public Confirmations; mapping (bytes32 => Transaction) public Transactions; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1242_VVToken {
label=""VVToken"";
""1242__transfer"" [label=""_transfer""];
""1242_isConfirmed"" [label=""isConfirmed""];
""1242__collect_fee"" [label=""_collect_fee""];
""1242_executeTransaction"" [label=""executeTransaction""];
""1242_transferFrom"" [label=""transferFrom""];
""1242_setPrices"" [label=""setPrices""];
""1242_addConfirmation"" [label=""addConfirmation""];
""1242_confirmTransaction"" [label=""confirmTransaction""];
""1242_burn"" [label=""burn""];
""1242_AccountVoid"" [label=""AccountVoid""];
""1242_freezeAccount"" [label=""freezeAccount""];
""1242_bonus"" [label=""bonus""];
""1242_remainBalanced"" [label=""remainBalanced""];
""1242_VVToken"" [label=""VVToken""];
""1242_fallback"" [label=""fallback""];
""1242_execute"" [label=""execute""];
""1242_confirmationCount"" [label=""confirmationCount""];
""1242_addTransaction"" [label=""addTransaction""];
""1242_transfer"" [label=""transfer""];
""1242_setFee"" [label=""setFee""];
""1242_addConfirmation"" -> ""1242_onlyOwner"";
""1242_executeTransaction"" -> ""1242_isConfirmed"";
""1242_fallback"" -> ""1242__transfer"";
""1242_executeTransaction"" -> ""1242_notExecuted"";
""1242_transfer"" -> ""1242__transfer"";
""1242_execute"" -> ""1242_notNull"";
""1242_execute"" -> ""1242_onlyOwner"";
""1242_AccountVoid"" -> ""1242_onlyOwner"";
""1242_confirmTransaction"" -> ""1242_executeTransaction"";
""1242_addTransaction"" -> ""1242_notNull"";
""1242_setFee"" -> ""1242_onlyOwner"";
""1242_transferFrom"" -> ""1242__transfer"";
""1242_transferFrom"" -> ""1242__collect_fee"";
""1242_execute"" -> ""1242_confirmTransaction"";
""1242_bonus"" -> ""1242_onlyOwner"";
""1242_addConfirmation"" -> ""1242_notConfirmed"";
""1242_confirmTransaction"" -> ""1242_addConfirmation"";
""1242_transferFrom"" -> ""1242_onlyOwner"";
""1242_setPrices"" -> ""1242_onlyOwner"";
""1242_execute"" -> ""1242_addTransaction"";
""1242_confirmTransaction"" -> ""1242_onlyOwner"";
""1242_burn"" -> ""1242_onlyOwner"";
""1242_freezeAccount"" -> ""1242_onlyOwner"";
""1242_VVToken"" -> ""1242_MultiOwner"";
}
"
0x777777764382a3ae5e7631570583893bfdea7e05.sol,Destructible,contract Destructible is Ownable { function Destructible() payable public { },1,"subgraph cluster_177_Destructible {
label=""Destructible"";
""177_destroy"" [label=""destroy""];
""177_destroyAndSend"" [label=""destroyAndSend""];
""177_Destructible"" [label=""Destructible""];
""177_destroy"" -> ""177_onlyOwner"";
""177_destroyAndSend"" -> ""177_onlyOwner"";
}
"
0xee7477b1c42d173c0791cecf2592f6a8a4c16b0a.sol,BiddingBase,"contract BiddingBase is Pausable { uint40 public minTime = 60*10; uint public minBid = 50 finney - 1 szabo; address public operatorAddress; mapping(address => uint) public pendingReturns; uint public totalReturns; event Withdraw(address indexed bidder, uint256 value); function withdraw() public { uint amount = pendingReturns[msg.sender]; require (amount > 0); totalReturns -= amount; pendingReturns[msg.sender] -= amount; msg.sender.transfer(amount); emit Withdraw(msg.sender, amount); }",1,"subgraph cluster_277_BiddingBase {
label=""BiddingBase"";
""277_isContract"" [label=""isContract""];
""277_destroyContract"" [label=""destroyContract""];
""277_withdraw"" [label=""withdraw""];
""277_withdrawEthFromBalance"" [label=""withdrawEthFromBalance""];
""277_setOperator"" [label=""setOperator""];
""277_setMinTime"" [label=""setMinTime""];
""277_setMinBid"" [label=""setMinBid""];
""277_setOperator"" -> ""277_onlyOwner"";
""277_setMinBid"" -> ""277_onlyOwner"";
""277_destroyContract"" -> ""277_onlyOwner"";
""277_setMinTime"" -> ""277_onlyOwner"";
""277_withdrawEthFromBalance"" -> ""277_onlyOwner"";
}
"
0x35bab7165a301e99c75c3e59b48817856b4d5e5c.sol,Bet,"contract Bet is Ownable, DataCenterBridge { using SafeMath for uint; event LogDistributeReward(address addr, uint reward, uint index); event LogGameResult(bytes32 indexed category, bytes32 indexed gameId, uint leftPts, uint rightPts); event LogParticipant(address addr, uint choice, uint betAmount); event LogRefund(address addr, uint betAmount); event LogBetClosed(bool isRefund, uint timestamp); event LogDealerWithdraw(address addr, uint withdrawAmount); struct BetInfo { bytes32 category; bytes32 gameId; uint8 spread; uint8 flag; uint16 leftOdds; uint16 middleOdds; uint16 rightOdds; uint minimumBet; uint startTime; uint deposit; address dealer; }",1,"subgraph cluster_1524_BetCenter {
label=""BetCenter"";
""1524_createBet"" [label=""createBet""];
""1524_fallback"" [label=""fallback""];
""1524_getBetsByCategory"" [label=""getBetsByCategory""];
""1524_getGameIdsByCategory"" [label=""getGameIdsByCategory""];
}
"
0x4ee1ba168551379fd8a59e2e918ff9ee109a6abf.sol,PlayerBook,"contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private owner; TeamDreamHubInterface public TeamDreamHub_; TeamDreamInterface public TeamDream_; MSFun.Data private msData; function multiSigDev(bytes32 _whatFunction) private returns (bool) {return(MSFun.multiSig(msData, TeamDream_.requiredDevSignatures(), _whatFunction));}",1,"subgraph cluster_1675_PlayerBook {
label=""PlayerBook"";
""1675_addMeToAllGames"" [label=""addMeToAllGames""];
""1675_registerNameXID"" [label=""registerNameXID""];
""1675_checkSignersByName"" [label=""checkSignersByName""];
""1675_setRegistrationFee"" [label=""setRegistrationFee""];
""1675_getPlayerLAff"" [label=""getPlayerLAff""];
""1675_checkSignersByAddress"" [label=""checkSignersByAddress""];
""1675_multiSigDev"" [label=""multiSigDev""];
""1675_deleteProposal"" [label=""deleteProposal""];
""1675_registerNameCore"" [label=""registerNameCore""];
""1675_useMyOldName"" [label=""useMyOldName""];
""1675_deleteAnyProposal"" [label=""deleteAnyProposal""];
""1675_registerNameXaddrFromDapp"" [label=""registerNameXaddrFromDapp""];
""1675_registerNameXnameFromDapp"" [label=""registerNameXnameFromDapp""];
""1675_registerNameXaddr"" [label=""registerNameXaddr""];
""1675_getPlayerID"" [label=""getPlayerID""];
""1675_checkData"" [label=""checkData""];
""1675_registerNameXname"" [label=""registerNameXname""];
""1675_checkIfNameValid"" [label=""checkIfNameValid""];
""1675_getNameFee"" [label=""getNameFee""];
""1675_addMeToGame"" [label=""addMeToGame""];
""1675_addGame"" [label=""addGame""];
""1675_determinePID"" [label=""determinePID""];
""1675_getPlayerAddr"" [label=""getPlayerAddr""];
""1675_constructor"" [label=""constructor""];
""1675_getPlayerName"" [label=""getPlayerName""];
""1675_registerNameXIDFromDapp"" [label=""registerNameXIDFromDapp""];
""1675_registerNameXID"" -> ""1675_isHuman"";
""1675_registerNameXIDFromDapp"" -> ""1675_isRegisteredGame"";
""1675_registerNameXID"" -> ""1675_registerNameCore"";
""1675_checkSignersByName"" -> ""1675_onlyDevs"";
""1675_checkSignersByAddress"" -> ""1675_onlyDevs"";
""1675_registerNameXIDFromDapp"" -> ""1675_registerNameCore"";
""1675_registerNameXaddrFromDapp"" -> ""1675_determinePID"";
""1675_addGame"" -> ""1675_multiSigDev"";
""1675_registerNameXname"" -> ""1675_isHuman"";
""1675_addGame"" -> ""1675_deleteProposal"";
""1675_setRegistrationFee"" -> ""1675_deleteProposal"";
""1675_addGame"" -> ""1675_onlyDevs"";
""1675_registerNameXnameFromDapp"" -> ""1675_isRegisteredGame"";
""1675_useMyOldName"" -> ""1675_isHuman"";
""1675_getPlayerID"" -> ""1675_isRegisteredGame"";
""1675_addMeToAllGames"" -> ""1675_isHuman"";
""1675_registerNameXnameFromDapp"" -> ""1675_registerNameCore"";
""1675_registerNameXname"" -> ""1675_determinePID"";
""1675_addMeToGame"" -> ""1675_isHuman"";
""1675_registerNameXaddr"" -> ""1675_registerNameCore"";
""1675_registerNameXnameFromDapp"" -> ""1675_determinePID"";
""1675_checkData"" -> ""1675_onlyDevs"";
""1675_registerNameXaddr"" -> ""1675_isHuman"";
""1675_setRegistrationFee"" -> ""1675_multiSigDev"";
""1675_setRegistrationFee"" -> ""1675_onlyDevs"";
""1675_registerNameXID"" -> ""1675_determinePID"";
""1675_registerNameXaddr"" -> ""1675_determinePID"";
""1675_registerNameXaddrFromDapp"" -> ""1675_registerNameCore"";
""1675_deleteAnyProposal"" -> ""1675_onlyDevs"";
""1675_registerNameXaddrFromDapp"" -> ""1675_isRegisteredGame"";
""1675_registerNameXname"" -> ""1675_registerNameCore"";
""1675_registerNameXIDFromDapp"" -> ""1675_determinePID"";
""1675_getPlayerID"" -> ""1675_determinePID"";
}
"
0x56b7f2a2d6f70d88b991e6c7b8005e0a13a9b379.sol,CryptoCurrencyExchange,"contract CryptoCurrencyExchange is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 3000000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function CryptoCurrencyExchange() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_CryptoCurrencyExchange {
label=""CryptoCurrencyExchange"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_CryptoCurrencyExchange"" [label=""CryptoCurrencyExchange""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x6bfe93d41c21dc9b72ac5785c12aa400bf205b31.sol,Zedd,"contract Zedd is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 12; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 300000000e12; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 50000e12; address multisig = 0x478E1dD0fb8aE01bE6F23a052CCAdd3037FF0c9F ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1152_Zedd {
label=""Zedd"";
""1152_Distribute"" [label=""Distribute""];
""1152_fallback"" [label=""fallback""];
""1152_transfer"" [label=""transfer""];
""1152_balanceOf"" [label=""balanceOf""];
""1152_constructor"" [label=""constructor""];
""1152_transferOwnership"" [label=""transferOwnership""];
""1152_allowance"" [label=""allowance""];
""1152_burn"" [label=""burn""];
""1152_transferFrom"" [label=""transferFrom""];
""1152_withdraw"" [label=""withdraw""];
""1152_finishDistribution"" [label=""finishDistribution""];
""1152_getTokenBalance"" [label=""getTokenBalance""];
""1152_distr"" [label=""distr""];
""1152_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1152_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1152_add"" [label=""add""];
""1152_approve"" [label=""approve""];
""1152_withdrawAll"" [label=""withdrawAll""];
""1152_getTokens"" [label=""getTokens""];
""1152_Distribute"" -> ""1152_onlyOwner"";
""1152_transferOwnership"" -> ""1152_onlyOwner"";
""1152_getTokens"" -> ""1152_distr"";
""1152_distr"" -> ""1152_canDistr"";
""1152_getTokens"" -> ""1152_canDistr"";
""1152_transfer"" -> ""1152_onlyPayloadSize"";
""1152_updateTokensPerEth"" -> ""1152_onlyOwner"";
""1152_finishDistribution"" -> ""1152_onlyOwner"";
""1152_add"" -> ""1152_onlyOwner"";
""1152_constructor"" -> ""1152_distr"";
""1152_burn"" -> ""1152_onlyOwner"";
""1152_withdrawForeignTokens"" -> ""1152_onlyOwner"";
""1152_withdrawAll"" -> ""1152_onlyOwner"";
""1152_finishDistribution"" -> ""1152_canDistr"";
""1152_withdraw"" -> ""1152_onlyOwner"";
""1152_transferFrom"" -> ""1152_onlyPayloadSize"";
""1152_fallback"" -> ""1152_getTokens"";
}
"
0x5c3536c7cd64c3bcb6ea01c00c2919bcd5053aba.sol,BlastBox,"contract BlastBox is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 10; uint public deadline = now + 15 * 1 days; uint public round2 = now + 15 * 1 days; uint public round1 = now + 1 * 1 days; uint256 public totalSupply = 275000e10; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 5000e10; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0x9d4C38355d267C567ca431BCb8585cC010aF1ED0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_BlastBox {
label=""BlastBox"";
""1263_withdraw"" [label=""withdraw""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_add"" [label=""add""];
""1263_approve"" [label=""approve""];
""1263_distr"" [label=""distr""];
""1263_burn"" [label=""burn""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_transfer"" [label=""transfer""];
""1263_fallback"" [label=""fallback""];
""1263_getTokens"" [label=""getTokens""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_Distribute"" [label=""Distribute""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_constructor"" [label=""constructor""];
""1263_allowance"" [label=""allowance""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_constructor"" -> ""1263_distr"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_distr"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_distr"" -> ""1263_canDistr"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
}
"
0xee58ee0b1519bb47801812a3a9c83ab600c63d81.sol,PrivatePaymentProcessor,"contract PrivatePaymentProcessor is Pausable, Destructible, Contactable, Restricted { using SafeMath for uint256; string constant VERSION = ; event OrderPaidInEther( uint indexed _orderId, address indexed _originAddress, uint _price, uint _monethaFee ); event OrderPaidInToken( uint indexed _orderId, address indexed _originAddress, address indexed _tokenAddress, uint _price, uint _monethaFee ); event PaymentsProcessed( address indexed _merchantAddress, uint _amount, uint _fee ); event PaymentRefunding( uint indexed _orderId, address indexed _clientAddress, uint _amount, string _refundReason ); event PaymentWithdrawn( uint indexed _orderId, address indexed _clientAddress, uint amount ); MonethaGateway public monethaGateway; MerchantWallet public merchantWallet; bytes32 public merchantIdHash; enum WithdrawState {Null, Pending, Withdrawn}",1,"subgraph cluster_1609_PrivatePaymentProcessor {
label=""PrivatePaymentProcessor"";
""1609_withdrawRefund"" [label=""withdrawRefund""];
""1609_withdrawTokenRefund"" [label=""withdrawTokenRefund""];
""1609_payForOrder"" [label=""payForOrder""];
""1609_PrivatePaymentProcessor"" [label=""PrivatePaymentProcessor""];
""1609_payForOrderInTokens"" [label=""payForOrderInTokens""];
""1609_refundTokenPayment"" [label=""refundTokenPayment""];
""1609_refundPayment"" [label=""refundPayment""];
""1609_setMonethaGateway"" [label=""setMonethaGateway""];
""1609_setMerchantWallet"" [label=""setMerchantWallet""];
""1609_withdrawRefund"" -> ""1609_whenNotPaused"";
""1609_withdrawTokenRefund"" -> ""1609_whenNotPaused"";
""1609_PrivatePaymentProcessor"" -> ""1609_setMonethaGateway"";
""1609_refundPayment"" -> ""1609_onlyMonetha"";
""1609_PrivatePaymentProcessor"" -> ""1609_setMerchantWallet"";
""1609_payForOrderInTokens"" -> ""1609_whenNotPaused"";
""1609_payForOrder"" -> ""1609_whenNotPaused"";
""1609_setMerchantWallet"" -> ""1609_onlyOwner"";
""1609_refundTokenPayment"" -> ""1609_whenNotPaused"";
""1609_refundPayment"" -> ""1609_whenNotPaused"";
""1609_setMonethaGateway"" -> ""1609_onlyOwner"";
""1609_refundTokenPayment"" -> ""1609_onlyMonetha"";
}
"
0x2628e13a3cbdc52ed96b4b8d6b1041d3ef3a409e.sol,Participant,"contract Participant { address constant smartolution = 0xe0ae35fe7Df8b86eF08557b535B89bB6cb036C23; address public owner; uint public daily; constructor(address _owner, uint _daily) public { owner = _owner; daily = _daily; }",1,"subgraph cluster_406_Participant {
label=""Participant"";
""406_constructor"" [label=""constructor""];
""406_daily"" [label=""daily""];
""406_processPayment"" [label=""processPayment""];
""406_fallback"" [label=""fallback""];
}
"
0xeaac4254f43b1802a32c2b2eeb0241ddc39eb561.sol,Hanabira,"contract Hanabira is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 5000000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 5000000000e8; uint public target0drop = 70000; uint public progress0drop = 0; address multisig = 0x587aF154ddFB78fe97B7F02FC17D4Eca338AF325; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Hanabira {
label=""Hanabira"";
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_fallback"" [label=""fallback""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_transfer"" [label=""transfer""];
""1261_burn"" [label=""burn""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_constructor"" [label=""constructor""];
""1261_Distribute"" [label=""Distribute""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_add"" [label=""add""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_distr"" [label=""distr""];
""1261_allowance"" [label=""allowance""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_approve"" [label=""approve""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_constructor"" -> ""1261_distr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
}
"
0x287fc5e0c7055660b2d05b4718a049141bb7e1ee.sol,Bqt_Token,"contract Bqt_Token is ERC20Interface { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public constant maxTokens = 800*10**6*10**18; uint256 public constant ownerSupply = maxTokens*51/100; uint256 _totalSupply = ownerSupply; uint256 public constant token_price = 10**18*1/800; uint256 public pre_ico_start = 1531872000; uint256 public ico_start = 1533081600; uint256 public ico_finish = 1540944000; uint public constant minValuePre = 10**18*1/1000000; uint public constant minValue = 10**18*1/1000000; uint public constant maxValue = 3000*10**18; uint8 public constant exchange_coefficient = 102; using SafeMath for uint; address public owner; address public moderator; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; mapping(address => uint256) public orders_sell_amount; mapping(address => uint256) public orders_sell_price; address[] public orders_sell_list; event Order_sell(address indexed _owner, uint256 _max_amount, uint256 _price); event Order_execute(address indexed _from, address indexed _to, uint256 _amount, uint256 _price); modifier onlyOwner() { if (msg.sender != owner) { throw; }",1,"subgraph cluster_1525_Bqt_Token {
label=""Bqt_Token"";
""1525_withdraw"" [label=""withdraw""];
""1525_change_pre_ico_start"" [label=""change_pre_ico_start""];
""1525_fallback"" [label=""fallback""];
""1525_change_ico_finish"" [label=""change_ico_finish""];
""1525_orders_sell_total"" [label=""orders_sell_total""];
""1525_allowance"" [label=""allowance""];
""1525_totalSupply"" [label=""totalSupply""];
""1525_get_orders_sell_amount"" [label=""get_orders_sell_amount""];
""1525_order_buy"" [label=""order_buy""];
""1525_changeOwner"" [label=""changeOwner""];
""1525_transfer"" [label=""transfer""];
""1525_changeModerator"" [label=""changeModerator""];
""1525_order_sell"" [label=""order_sell""];
""1525_Bqt_Token"" [label=""Bqt_Token""];
""1525_balanceOf"" [label=""balanceOf""];
""1525_change_ico_start"" [label=""change_ico_start""];
""1525_transferFrom"" [label=""transferFrom""];
""1525_approve"" [label=""approve""];
""1525_tokens_buy"" [label=""tokens_buy""];
""1525_get_orders_sell_amount"" -> ""1525_balanceOf"";
""1525_changeModerator"" -> ""1525_onlyOwner"";
""1525_change_ico_start"" -> ""1525_onlyModerator"";
""1525_order_buy"" -> ""1525_get_orders_sell_amount"";
""1525_fallback"" -> ""1525_tokens_buy"";
""1525_change_pre_ico_start"" -> ""1525_onlyModerator"";
""1525_changeOwner"" -> ""1525_onlyOwner"";
""1525_withdraw"" -> ""1525_onlyOwner"";
""1525_change_ico_finish"" -> ""1525_onlyModerator"";
}
"
0x0cfa149c0a843e1f8d9bc5c6e6bebf901845cebe.sol,ENVELOPE,contract ENVELOPE { bytes32 public hashPass; bool closed = false; address sender; uint unlockTime; function GetHash(bytes pass) public pure returns (bytes32) {return keccak256(pass);},1,"subgraph cluster_150_ENVELOPE {
label=""ENVELOPE"";
""150_GetHash"" [label=""GetHash""];
""150_fallback"" [label=""fallback""];
""150_SetPass"" [label=""SetPass""];
""150_SetGiftTime"" [label=""SetGiftTime""];
""150_GetGift"" [label=""GetGift""];
""150_PassHasBeenSet"" [label=""PassHasBeenSet""];
""150_Revoce"" [label=""Revoce""];
""150_GetGift"" -> ""150_canOpen"";
""150_Revoce"" -> ""150_canOpen"";
}
"
0xf1171e1e8df34ab97832342c7cbf04d9121a1ac3.sol,CSportsAuth,contract CSportsAuth is CSportsConstants { event ContractUpgrade(address newContract); address public ceoAddress; address public cfoAddress; address public cooAddress; address public commissionerAddress; bool public paused = false; bool public isDevelopment = true; modifier onlyUnderDevelopment() { require(isDevelopment == true); _; },1,"subgraph cluster_344_CSportsAuth {
label=""CSportsAuth"";
""344_withdrawBalance"" [label=""withdrawBalance""];
""344_setCOO"" [label=""setCOO""];
""344_unpause"" [label=""unpause""];
""344_setCommissioner"" [label=""setCommissioner""];
""344_setCEO"" [label=""setCEO""];
""344_pause"" [label=""pause""];
""344_setCLevelAddresses"" [label=""setCLevelAddresses""];
""344_setCFO"" [label=""setCFO""];
""344_setProduction"" [label=""setProduction""];
""344_unpause"" -> ""344_onlyCEO"";
""344_setCOO"" -> ""344_onlyCEO"";
""344_withdrawBalance"" -> ""344_onlyCFO"";
""344_unpause"" -> ""344_whenPaused"";
""344_pause"" -> ""344_whenNotPaused"";
""344_setProduction"" -> ""344_onlyCEO"";
""344_pause"" -> ""344_onlyCLevel"";
""344_setCommissioner"" -> ""344_onlyCEO"";
""344_setProduction"" -> ""344_onlyUnderDevelopment"";
""344_setCFO"" -> ""344_onlyCEO"";
""344_setCEO"" -> ""344_onlyCEO"";
""344_setCLevelAddresses"" -> ""344_onlyCEO"";
}
"
0xdcb5410ef70f59a5a2839fc6d4d0b2ca981f5e2d.sol,CoinMmc,"contract CoinMmc { address public admin_address = 0x64b33dB1Cc804e7CA51D9c21F132567923D7BA00; address public account_address = 0x64b33dB1Cc804e7CA51D9c21F132567923D7BA00; mapping(address => uint256) balances; string public name = ; string public symbol = ; uint8 public decimals = 2; uint256 initSupply = 1000000000000; uint256 public totalSupply = 0; constructor() payable public { totalSupply = mul(initSupply, 10**uint256(decimals)); balances[account_address] = totalSupply; _add_lock_account(0x6efB62605A66E32582c37b835F81Bc91A6a8fb2e, mul(80000000000,10**uint256(decimals)), 1596815160); _add_lock_account(0x0ba46c0fC6a5C206855cEf215222e347E1559eDf, mul(120000000000,10**uint256(decimals)), 1596815160); _add_lock_account(0xE269695D497387DfEAFE12b0b3B54441683F63C8, mul(100000000000,10**uint256(decimals)), 1628351160); }",1,"subgraph cluster_1187_CoinMmc {
label=""CoinMmc"";
""1187_transfer"" [label=""transfer""];
""1187_constructor"" [label=""constructor""];
""1187_increaseApproval"" [label=""increaseApproval""];
""1187_div"" [label=""div""];
""1187_sub"" [label=""sub""];
""1187_allowance"" [label=""allowance""];
""1187_fallback"" [label=""fallback""];
""1187_withDraw"" [label=""withDraw""];
""1187_burn"" [label=""burn""];
""1187_setAdmin"" [label=""setAdmin""];
""1187_add"" [label=""add""];
""1187_setAirDrop"" [label=""setAirDrop""];
""1187_balanceOf"" [label=""balanceOf""];
""1187__add_lock_account"" [label=""_add_lock_account""];
""1187_buyTokens"" [label=""buyTokens""];
""1187_transferFrom"" [label=""transferFrom""];
""1187_mul"" [label=""mul""];
""1187_setDirectDrop"" [label=""setDirectDrop""];
""1187_decreaseApproval"" [label=""decreaseApproval""];
""1187__burn"" [label=""_burn""];
""1187_airDrop"" [label=""airDrop""];
""1187_approve"" [label=""approve""];
""1187_airDrop"" -> ""1187_add"";
""1187_constructor"" -> ""1187_mul"";
""1187_constructor"" -> ""1187__add_lock_account"";
""1187_buyTokens"" -> ""1187_mul"";
""1187_setAdmin"" -> ""1187_admin_only"";
""1187__burn"" -> ""1187_sub"";
""1187_setAirDrop"" -> ""1187_admin_only"";
""1187_buyTokens"" -> ""1187_div"";
""1187_increaseApproval"" -> ""1187_add"";
""1187_buyTokens"" -> ""1187_sub"";
""1187_buyTokens"" -> ""1187_add"";
""1187_airDrop"" -> ""1187_mul"";
""1187_decreaseApproval"" -> ""1187_sub"";
""1187_transferFrom"" -> ""1187_add"";
""1187_airDrop"" -> ""1187_sub"";
""1187_burn"" -> ""1187__burn"";
""1187_fallback"" -> ""1187_buyTokens"";
""1187_transfer"" -> ""1187_sub"";
""1187_fallback"" -> ""1187_airDrop"";
""1187_setDirectDrop"" -> ""1187_admin_only"";
""1187_transferFrom"" -> ""1187_sub"";
""1187_transfer"" -> ""1187_add"";
}
"
0x2cf02304f36effd519be79850d21335684c6073e.sol,AccEthRegCenter,contract AccEthRegCenter is Ownable { struct User { address useraddress; uint useramount; bool lastTransfer; },1,"subgraph cluster_412_AccEthRegCenter {
label=""AccEthRegCenter"";
""412_SetAmount"" [label=""SetAmount""];
""412_transfer"" [label=""transfer""];
""412_fallback"" [label=""fallback""];
""412_transfertoacc"" [label=""transfertoacc""];
""412_GetUser"" [label=""GetUser""];
""412_ResetAllAmount"" [label=""ResetAllAmount""];
""412_AddUser"" [label=""AddUser""];
""412_TransferToAllAccounts"" [label=""TransferToAllAccounts""];
""412_SetAddress"" [label=""SetAddress""];
""412_SetAddress"" -> ""412_onlyOwner"";
""412_transfer"" -> ""412_onlyOwner"";
""412_SetAmount"" -> ""412_onlyOwner"";
""412_TransferToAllAccounts"" -> ""412_onlyOwner"";
""412_AddUser"" -> ""412_onlyOwner"";
""412_transfertoacc"" -> ""412_onlyOwner"";
""412_ResetAllAmount"" -> ""412_onlyOwner"";
}
"
0x7909209a3d78a66f6d71885f10b6ea7c6c58177b.sol,Try_Me,contract Try_Me { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_Try_Me {
label=""Try_Me"";
""118_start_round"" [label=""start_round""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_Try"" [label=""Try""];
}
"
0xec9a75a532311b6102d91d439e1db055dc9414d9.sol,PD88,contract PD88 is Owned { modifier isHuman() { address _addr = msg.sender; require (_addr == tx.origin); uint256 _codeLength; assembly {_codeLength := extcodesize(_addr)},1,"subgraph cluster_1409_PD88 {
label=""PD88"";
""1409_getFullround"" [label=""getFullround""];
""1409_luckyBuy"" [label=""luckyBuy""];
""1409_withdraw"" [label=""withdraw""];
""1409_updateTimer"" [label=""updateTimer""];
""1409_win"" [label=""win""];
""1409_withdrawOwner"" [label=""withdrawOwner""];
""1409_getDonationPrice"" [label=""getDonationPrice""];
""1409_reducetime"" [label=""reducetime""];
""1409_getTimeLeft"" [label=""getTimeLeft""];
""1409_buyDonation"" [label=""buyDonation""];
""1409_getMyRevenue"" [label=""getMyRevenue""];
""1409_buyDonation"" -> ""1409_isHuman"";
""1409_buyDonation"" -> ""1409_updateTimer"";
""1409_win"" -> ""1409_isHuman"";
""1409_withdrawOwner"" -> ""1409_onlyOwner"";
""1409_buyDonation"" -> ""1409_luckyBuy"";
""1409_getFullround"" -> ""1409_getMyRevenue"";
""1409_withdraw"" -> ""1409_isHuman"";
""1409_reducetime"" -> ""1409_isHuman"";
""1409_withdraw"" -> ""1409_getMyRevenue"";
}
"
0xb429ecbd7cda1cb82cbe0ae9044310d2f74de67c.sol,SmzTradingContract,contract SmzTradingContract { address public constant RECEIVER_ADDRESS = 0xf3eB3CA356c111ECb418D457e55A3A3D185faf61; uint256 public constant ACCEPTED_AMOUNT = 3 ether; uint256 public RECEIVER_PAYOUT_THRESHOLD = 100 ether; address public constant END_ADDRESS = 0x3559e34004b944906Bc727a40d7568a98bDc42d3; uint256 public constant END_AMOUNT = 0.39 ether; bool public ended = false; mapping(address => bool) public addressesAllowed; mapping(address => bool) public addressesDeposited; address public manager; function SmzTradingContract() public { manager = msg.sender; },1,"subgraph cluster_248_SmzTradingContract {
label=""SmzTradingContract"";
""248_removeMultipleAllowedAddresses"" [label=""removeMultipleAllowedAddresses""];
""248_SmzTradingContract"" [label=""SmzTradingContract""];
""248_addAllowedAddress"" [label=""addAllowedAddress""];
""248_removeAllowedAddress"" [label=""removeAllowedAddress""];
""248_addMultipleAllowedAddresses"" [label=""addMultipleAllowedAddresses""];
""248_fallback"" [label=""fallback""];
""248_setManager"" [label=""setManager""];
}
"
0x28e0d54349c00607505aadc713147140fb60ea12.sol,TheQuizGame,contract TheQuizGame { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_128_TheQuizGame {
label=""TheQuizGame"";
""128_StartTheGame"" [label=""StartTheGame""];
""128_NewQuestion"" [label=""NewQuestion""];
""128_Try"" [label=""Try""];
""128_StopGame"" [label=""StopGame""];
""128_newQuestioner"" [label=""newQuestioner""];
""128_fallback"" [label=""fallback""];
}
"
0xbd6a3418cb51418c94cc11d2d49012a2b79e10fe.sol,WeaponSales,"contract WeaponSales is WeaponToken { event Purchase(address indexed owner, uint256 unitPrice, uint32 amount); function buyWeapon(uint256 _weaponId) public payable returns (uint256 id) { id = _generateWeapon(msg.sender, _weaponId); Transfer(address(0), msg.sender, id); Purchase(msg.sender, weaponModels[_weaponId].price, 1); }",1,"subgraph cluster_966_WeaponSales {
label=""WeaponSales"";
""966_withdrawBalance"" [label=""withdrawBalance""];
""966_buyWeapon"" [label=""buyWeapon""];
""966_withdrawBalance"" -> ""966_onlyOwner"";
""966_buyWeapon"" -> ""966__generateWeapon"";
}
"
0x4c60e311d8fba04e313f7e7b3dec61b3028726d1.sol,EtherWorldCup,"contract EtherWorldCup { using SafeMath for uint; address internal constant administrator = 0x4F4eBF556CFDc21c3424F85ff6572C77c514Fcae; address internal constant givethAddress = 0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc; string name = ; string symbol = ; mapping (string => int8) worldCupGameID; mapping (int8 => bool) gameFinished; mapping (int8 => uint) gameLocked; mapping (int8 => string) gameResult; int8 internal latestGameFinished; uint internal prizePool; uint internal givethPool; int registeredPlayers; mapping (address => bool) playerRegistered; mapping (address => mapping (int8 => bool)) playerMadePrediction; mapping (address => mapping (int8 => string)) playerPredictions; mapping (address => int8[64]) playerPointArray; mapping (address => int8) playerGamesScored; mapping (address => uint) playerStreak; address[] playerList; event Registration( address _player ); event PlayerLoggedPrediction( address _player, int _gameID, string _prediction ); event PlayerUpdatedScore( address _player, int _lastGamePlayed ); event Comparison( address _player, uint _gameID, string _myGuess, string _result, bool _correct ); event StartAutoScoring( address _player ); event StartScoring( address _player, uint _gameID ); event DidNotPredict( address _player, uint _gameID ); event RipcordRefund( address _player ); constructor () public { worldCupGameID[] = 1; gameLocked[1] = 1528988400; worldCupGameID[] = 2; worldCupGameID[] = 3; worldCupGameID[] = 4; gameLocked[2] = 1529064000; gameLocked[3] = 1529074800; gameLocked[4] = 1529085600; worldCupGameID[] = 5; worldCupGameID[] = 6; worldCupGameID[] = 7; worldCupGameID[] = 8; gameLocked[5] = 1529143200; gameLocked[6] = 1529154000; gameLocked[7] = 1529164800; gameLocked[8] = 1529175600; worldCupGameID[] = 9; worldCupGameID[] = 10; worldCupGameID[] = 11; gameLocked[9] = 1529236800; gameLocked[10] = 1529247600; gameLocked[11] = 1529258400; worldCupGameID[] = 12; worldCupGameID[] = 13; worldCupGameID[] = 14; gameLocked[12] = 1529323200; gameLocked[13] = 1529334000; gameLocked[14] = 1529344800; worldCupGameID[] = 15; worldCupGameID[] = 16; worldCupGameID[] = 17; gameLocked[15] = 1529409600; gameLocked[16] = 1529420400; gameLocked[17] = 1529431200; worldCupGameID[] = 18; worldCupGameID[] = 19; worldCupGameID[] = 20; gameLocked[18] = 1529496000; gameLocked[19] = 1529506800; gameLocked[20] = 1529517600; worldCupGameID[] = 21; worldCupGameID[] = 22; worldCupGameID[] = 23; gameLocked[21] = 1529582400; gameLocked[22] = 1529593200; gameLocked[23] = 1529604000; worldCupGameID[] = 24; worldCupGameID[] = 25; worldCupGameID[] = 26; gameLocked[24] = 1529668800; gameLocked[25] = 1529679600; gameLocked[26] = 1529690400; worldCupGameID[] = 27; worldCupGameID[] = 28; worldCupGameID[] = 29; gameLocked[27] = 1529755200; gameLocked[28] = 1529766000; gameLocked[29] = 1529776800; worldCupGameID[] = 30; worldCupGameID[] = 31; worldCupGameID[] = 32; gameLocked[30] = 1529841600; gameLocked[31] = 1529852400; gameLocked[32] = 1529863200; worldCupGameID[] = 33; worldCupGameID[] = 34; worldCupGameID[] = 35; worldCupGameID[] = 36; gameLocked[33] = 1529935200; gameLocked[34] = 1529935200; gameLocked[35] = 1529949600; gameLocked[36] = 1529949600; worldCupGameID[] = 37; worldCupGameID[] = 38; worldCupGameID[] = 39; worldCupGameID[] = 40; gameLocked[37] = 1530021600; gameLocked[38] = 1530021600; gameLocked[39] = 1530036000; gameLocked[40] = 1530036000; worldCupGameID[] = 41; worldCupGameID[] = 42; worldCupGameID[] = 43; worldCupGameID[] = 44; gameLocked[41] = 1530108000; gameLocked[42] = 1530108000; gameLocked[43] = 1530122400; gameLocked[44] = 1530122400; worldCupGameID[] = 45; worldCupGameID[] = 46; worldCupGameID[] = 47; worldCupGameID[] = 48; gameLocked[45] = 1530194400; gameLocked[46] = 1530194400; gameLocked[47] = 1530208800; gameLocked[48] = 1530208800; worldCupGameID[] = 49; worldCupGameID[] = 50; gameLocked[49] = 1530367200; gameLocked[50] = 1530381600; worldCupGameID[] = 51; worldCupGameID[] = 52; gameLocked[51] = 1530453600; gameLocked[52] = 1530468000; worldCupGameID[] = 53; worldCupGameID[] = 54; gameLocked[53] = 1530540000; gameLocked[54] = 1530554400; worldCupGameID[] = 55; worldCupGameID[] = 56; gameLocked[55] = 1530626400; gameLocked[56] = 1530640800; worldCupGameID[] = 57; worldCupGameID[] = 58; gameLocked[57] = 1530885600; gameLocked[58] = 1530900000; worldCupGameID[] = 59; worldCupGameID[] = 60; gameLocked[59] = 1530972000; gameLocked[60] = 1530986400; worldCupGameID[] = 61; gameLocked[61] = 1531245600; worldCupGameID[] = 62; gameLocked[62] = 1531332000; worldCupGameID[] = 63; gameLocked[63] = 1531576800; worldCupGameID[] = 64; gameLocked[64] = 1531666800; latestGameFinished = 0; }",1,"subgraph cluster_1938_EtherWorldCup {
label=""EtherWorldCup"";
""1938_pullRipCord"" [label=""pullRipCord""];
""1938_equalStrings"" [label=""equalStrings""];
""1938_calculateScore"" [label=""calculateScore""];
""1938_gameResultsLogged"" [label=""gameResultsLogged""];
""1938_addNewGame"" [label=""addNewGame""];
""1938_viewScore"" [label=""viewScore""];
""1938_playerGuess"" [label=""playerGuess""];
""1938_playerLastScoredGame"" [label=""playerLastScoredGame""];
""1938_compare"" [label=""compare""];
""1938_concludeTournament"" [label=""concludeTournament""];
""1938_playerIsRegistered"" [label=""playerIsRegistered""];
""1938_makePrediction"" [label=""makePrediction""];
""1938_countParticipants"" [label=""countParticipants""];
""1938_constructor"" [label=""constructor""];
""1938__isCorrectBuyin"" [label=""_isCorrectBuyin""];
""1938_updateAllScores"" [label=""updateAllScores""];
""1938_correctResult"" [label=""correctResult""];
""1938_logResult"" [label=""logResult""];
""1938_showPlayerScores"" [label=""showPlayerScores""];
""1938_register"" [label=""register""];
""1938_updateScore"" [label=""updateScore""];
""1938_logResult"" -> ""1938_equalStrings"";
""1938_makePrediction"" -> ""1938_equalStrings"";
""1938_updateAllScores"" -> ""1938_updateScore"";
""1938_equalStrings"" -> ""1938_compare"";
""1938_viewScore"" -> ""1938_equalStrings"";
""1938_updateScore"" -> ""1938_equalStrings"";
""1938_logResult"" -> ""1938_isAdministrator"";
""1938_concludeTournament"" -> ""1938_playerIsRegistered"";
""1938_addNewGame"" -> ""1938_isAdministrator"";
""1938_pullRipCord"" -> ""1938_isAdministrator"";
""1938_concludeTournament"" -> ""1938_isAdministrator"";
""1938_register"" -> ""1938__isCorrectBuyin"";
}
"
0x333b20d643b58263e1558de655fda9cf7d07c401.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1002_RefundVault {
label=""RefundVault"";
""1002_deposit"" [label=""deposit""];
""1002_refund"" [label=""refund""];
""1002_RefundVault"" [label=""RefundVault""];
""1002_enableRefunds"" [label=""enableRefunds""];
""1002_close"" [label=""close""];
""1002_close"" -> ""1002_onlyOwner"";
""1002_enableRefunds"" -> ""1002_onlyOwner"";
""1002_deposit"" -> ""1002_onlyOwner"";
}
"
0x5c8951c94b059900d05b10d592b44c78574196c5.sol,EtherCityToken,"contract EtherCityToken is ERC721 { event CityCreated(uint256 tokenId, string name, string country, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name, string country); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.005 ether; uint256 private secondStepLimit = 0.055 ether; uint256 private thirdStepLimit = 0.5 ether; uint256 private fourthStepLimit = 10.0 ether; mapping (uint256 => address) public cityIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public cityIndexToApproved; mapping (uint256 => uint256) private cityIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct City { string name; string country; }",1,"subgraph cluster_1081_EtherCityToken {
label=""EtherCityToken"";
""1081__approved"" [label=""_approved""];
""1081_totalSupply"" [label=""totalSupply""];
""1081_takeOwnership"" [label=""takeOwnership""];
""1081__createCity"" [label=""_createCity""];
""1081_setCOO"" [label=""setCOO""];
""1081__transfer"" [label=""_transfer""];
""1081_transferFrom"" [label=""transferFrom""];
""1081_payout"" [label=""payout""];
""1081_name"" [label=""name""];
""1081__addressNotNull"" [label=""_addressNotNull""];
""1081_balanceOf"" [label=""balanceOf""];
""1081_symbol"" [label=""symbol""];
""1081__withdrawFunds"" [label=""_withdrawFunds""];
""1081__payout"" [label=""_payout""];
""1081_setCEO"" [label=""setCEO""];
""1081_createContractCity"" [label=""createContractCity""];
""1081_EtherCityToken"" [label=""EtherCityToken""];
""1081_implementsERC721"" [label=""implementsERC721""];
""1081_createPromoCity"" [label=""createPromoCity""];
""1081_tokensOfOwner"" [label=""tokensOfOwner""];
""1081_purchase"" [label=""purchase""];
""1081_priceOf"" [label=""priceOf""];
""1081_approve"" [label=""approve""];
""1081_getCity"" [label=""getCity""];
""1081_transfer"" [label=""transfer""];
""1081__owns"" [label=""_owns""];
""1081_ownerOf"" [label=""ownerOf""];
""1081_transfer"" -> ""1081__owns"";
""1081_setCEO"" -> ""1081_onlyCEO"";
""1081_takeOwnership"" -> ""1081__approved"";
""1081_transfer"" -> ""1081__transfer"";
""1081_payout"" -> ""1081__payout"";
""1081_createPromoCity"" -> ""1081__createCity"";
""1081_createPromoCity"" -> ""1081_onlyCOO"";
""1081_tokensOfOwner"" -> ""1081_balanceOf"";
""1081_takeOwnership"" -> ""1081__transfer"";
""1081_setCOO"" -> ""1081_onlyCEO"";
""1081_transferFrom"" -> ""1081__transfer"";
""1081_createContractCity"" -> ""1081_onlyCOO"";
""1081_transfer"" -> ""1081__addressNotNull"";
""1081_transferFrom"" -> ""1081__approved"";
""1081_purchase"" -> ""1081__transfer"";
""1081__createCity"" -> ""1081__transfer"";
""1081_approve"" -> ""1081__owns"";
""1081_payout"" -> ""1081_onlyCLevel"";
""1081_createContractCity"" -> ""1081__createCity"";
""1081_purchase"" -> ""1081__addressNotNull"";
""1081_transferFrom"" -> ""1081__owns"";
""1081_transferFrom"" -> ""1081__addressNotNull"";
""1081_tokensOfOwner"" -> ""1081_totalSupply"";
""1081_takeOwnership"" -> ""1081__addressNotNull"";
}
"
0xf2d54d17d3dc3810a0d62042a0b381df122ed162.sol,BeercoinICO,"contract BeercoinICO is GuardedBeercoinICO { Beercoin internal beercoin = Beercoin(0x7367A68039d4704f30BfBF6d948020C3B07DFC59); uint public constant price = 0.000006 ether; uint public constant softCap = 48 ether; uint public constant begin = 1526637600; uint public constant end = 1530395999; event FundTransfer(address backer, uint amount, bool isContribution); mapping(address => uint256) public balanceOf; uint public soldBeercoins = 0; uint public raisedEther = 0 ether; bool public paused = false; modifier isOpen { require(now >= begin && now <= end && !paused); _; }",1,"subgraph cluster_483_BeercoinICO {
label=""BeercoinICO"";
""483_withdraw"" [label=""withdraw""];
""483_transfer"" [label=""transfer""];
""483_pause"" [label=""pause""];
""483_resume"" [label=""resume""];
""483_fallback"" [label=""fallback""];
""483_claimFunds"" [label=""claimFunds""];
""483_claimBeercoins"" [label=""claimBeercoins""];
""483_fallback"" -> ""483_isOpen"";
""483_resume"" -> ""483_onlyOwner"";
""483_claimFunds"" -> ""483_goalReached"";
""483_transfer"" -> ""483_isOpen"";
""483_pause"" -> ""483_onlyOwner"";
""483_transfer"" -> ""483_onlyOwner"";
""483_claimFunds"" -> ""483_onlyOwner"";
""483_withdraw"" -> ""483_goalNotReached"";
""483_claimBeercoins"" -> ""483_onlyOwner"";
}
"
0xec7ba2ff3c46b9417d34ca9941ae2f62268c5add.sol,AllYours,contract AllYours { address private _platformAddress = 0xbE9C1088FEEB8B48A96Da0231062eA757D0a9613; uint private _totalEth = 0.06 ether; uint128 private _oneceEth = 0.02 ether; uint256 private _period = 1; address private _owner; constructor() public{ _owner = msg.sender; },1,"subgraph cluster_765_AllYours {
label=""AllYours"";
""765_draw"" [label=""draw""];
""765_fallback"" [label=""fallback""];
""765_getHistory"" [label=""getHistory""];
""765_kill"" [label=""kill""];
""765_getPeriod"" [label=""getPeriod""];
""765_clear"" [label=""clear""];
""765_addressToString"" [label=""addressToString""];
""765_strConcat"" [label=""strConcat""];
""765_getCurrentJoinPersonNumber"" [label=""getCurrentJoinPersonNumber""];
""765_uint2str"" [label=""uint2str""];
""765_toBytes"" [label=""toBytes""];
""765_constructor"" [label=""constructor""];
""765_getCurrentBalance"" [label=""getCurrentBalance""];
""765_fallback"" -> ""765_uint2str"";
""765_fallback"" -> ""765_strConcat"";
""765_fallback"" -> ""765_draw"";
""765_fallback"" -> ""765_clear"";
""765_fallback"" -> ""765_addressToString"";
""765_draw"" -> ""765_toBytes"";
}
"
0xcf377dfd654676940e2b5a87cf2673def25aeaed.sol,GreenEthereusPromo,"contract GreenEthereusPromo { string public constant name = ; string public constant symbol = ; event Transfer(address indexed from, address indexed to, uint256 value); address owner; uint public index; constructor() public { owner = msg.sender; }",1,"subgraph cluster_149_GreenEthereusPromo {
label=""GreenEthereusPromo"";
""149_fallback"" [label=""fallback""];
""149_resetIndex"" [label=""resetIndex""];
""149_withdrawBalance"" [label=""withdrawBalance""];
""149_constructor"" [label=""constructor""];
""149_massSending"" [label=""massSending""];
""149_transferOwnership"" [label=""transferOwnership""];
""149_transferOwnership"" -> ""149_onlyOwner"";
""149_resetIndex"" -> ""149_onlyOwner"";
""149_withdrawBalance"" -> ""149_onlyOwner"";
""149_massSending"" -> ""149_onlyOwner"";
}
"
0x4176f0f2b7c95486a5ae06e3d1b29201a42e7630.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1026_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1026_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1026_constructor"" [label=""constructor""];
""1026_depositToken"" [label=""depositToken""];
""1026_tokenFallback"" [label=""tokenFallback""];
""1026_depositEther"" [label=""depositEther""];
""1026_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1026_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1026_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1026_distributeTokenToAddressesAndAmounts"" -> ""1026_onlyOwner"";
""1026_distributeWithTransferFrom"" -> ""1026_onlyOwner"";
""1026_approveToPullOutTokens"" -> ""1026_onlyOwner"";
""1026_depositEther"" -> ""1026_whenNotPaused"";
""1026_tokenFallback"" -> ""1026_whenNotPaused"";
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1026_onlyOwner"";
""1026_distributeTokenToAddress"" -> ""1026_onlyOwner"";
""1026_depositToken"" -> ""1026_whenNotPaused"";
}
"
0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol,TwoCoinsOneMoonGame,contract TwoCoinsOneMoonGame { struct Bettor { address account; uint256 amount; },1,"subgraph cluster_536_TwoCoinsOneMoonGame {
label=""TwoCoinsOneMoonGame"";
""536_getBetAmount"" [label=""getBetAmount""];
""536_constructor"" [label=""constructor""];
""536_addEvent"" [label=""addEvent""];
""536_depositBalance"" [label=""depositBalance""];
""536_putMessage"" [label=""putMessage""];
""536_checkMoon"" [label=""checkMoon""];
""536_withdraw"" [label=""withdraw""];
""536_betRedCoin"" [label=""betRedCoin""];
""536_betBlueCoin"" [label=""betBlueCoin""];
""536_burstBubble"" [label=""burstBubble""];
""536_checkMoon"" -> ""536_addEvent"";
""536_betBlueCoin"" -> ""536_getBetAmount"";
""536_burstBubble"" -> ""536_depositBalance"";
""536_burstBubble"" -> ""536_addEvent"";
""536_betRedCoin"" -> ""536_checkMoon"";
""536_checkMoon"" -> ""536_burstBubble"";
""536_betBlueCoin"" -> ""536_checkMoon"";
""536_betRedCoin"" -> ""536_getBetAmount"";
}
"
0x1fdedef5c2da1ed9db44d80003a9592dfa18163c.sol,Syndicate,contract Syndicate is Ownable{ uint256 public numberSyndicateMembers; uint256 public totalSyndicateShares = 20000; uint256 public playersShareAllocation = 5000; uint256 public availableBuyInShares = 5000; uint256 public minimumBuyIn = 10; uint256 public buyInSharePrice = 1000000000000000; uint256 public shareCycleSessionSize = 1000; uint256 public shareCycleIndex = 0; uint256 public shareCycle = 1; uint256 public currentSyndicateValue = 0; uint256 public precision = 1000000000000000; uint256 public maxCyclePlayersConsidered = 100; address[] public cyclePlayers; uint256 public numberOfCyclePlayers = 0; struct somePlayer { uint256 playCount; uint256 profitShare; uint256 shareCycle; uint256 winnings; },1,"subgraph cluster_869_Syndicate {
label=""Syndicate"";
""869_roundIt"" [label=""roundIt""];
""869_claimPlayerWinnings"" [label=""claimPlayerWinnings""];
""869_playerStatus"" [label=""playerStatus""];
""869_setShareCycleSessionSize"" [label=""setShareCycleSessionSize""];
""869_insertCyclePlayer"" [label=""insertCyclePlayer""];
""869_addMember"" [label=""addMember""];
""869_allocateWinnings"" [label=""allocateWinnings""];
""869_updatePlayCount"" [label=""updatePlayCount""];
""869_Syndicate"" [label=""Syndicate""];
""869_setMaxCyclePlayersConsidered"" [label=""setMaxCyclePlayersConsidered""];
""869_claimPlayerProfit"" [label=""claimPlayerProfit""];
""869_buyIntoSyndicate"" [label=""buyIntoSyndicate""];
""869_memberShareCount"" [label=""memberShareCount""];
""869_min"" [label=""min""];
""869_allocateShares"" [label=""allocateShares""];
""869_distributeProfit"" [label=""distributeProfit""];
""869_memberProfitShare"" [label=""memberProfitShare""];
""869_claimProfit"" [label=""claimProfit""];
""869_setMaxCyclePlayersConsidered"" -> ""869_onlyOwner"";
""869_distributeProfit"" -> ""869_min"";
""869_buyIntoSyndicate"" -> ""869_addMember"";
""869_allocateShares"" -> ""869_addMember"";
""869_distributeProfit"" -> ""869_roundIt"";
""869_setShareCycleSessionSize"" -> ""869_onlyOwner"";
""869_updatePlayCount"" -> ""869_insertCyclePlayer"";
""869_allocateShares"" -> ""869_onlyOwner"";
}
"
0xf2017c92b068935bf56fea38f9d2c01f184ef14c.sol,WorldToken,"contract WorldToken is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 268000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function WorldToken() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_WorldToken {
label=""WorldToken"";
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706__transfer"" [label=""_transfer""];
""706_WorldToken"" [label=""WorldToken""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x44cf74e16bd4dfcf38cec1236f5cb7e92a4f9edf.sol,BC_GAME,contract BC_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_BC_GAME {
label=""BC_GAME"";
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0x70fa6e7cf0ecf0e97415f3abbbc8eb67e0c2c588.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MyAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_657_MyAdvancedToken {
label=""MyAdvancedToken"";
""657_freezeAccount"" [label=""freezeAccount""];
""657_sell"" [label=""sell""];
""657_getEth"" [label=""getEth""];
""657_MyAdvancedToken"" [label=""MyAdvancedToken""];
""657_mintToken"" [label=""mintToken""];
""657__transfer"" [label=""_transfer""];
""657_setPrices"" [label=""setPrices""];
""657_buy"" [label=""buy""];
""657_selfdestructs"" [label=""selfdestructs""];
""657_fallback"" [label=""fallback""];
""657_mintToken"" -> ""657_onlyOwner"";
""657_buy"" -> ""657__transfer"";
""657_MyAdvancedToken"" -> ""657_TokenERC20"";
""657_fallback"" -> ""657__transfer"";
""657_sell"" -> ""657__transfer"";
""657_setPrices"" -> ""657_onlyOwner"";
""657_freezeAccount"" -> ""657_onlyOwner"";
}
"
0x5838f878000fe44b6f6c677bbf839e12f097c147.sol,Q_GAME,contract Q_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_Q_GAME {
label=""Q_GAME"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_set_game"" [label=""set_game""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_Try"" [label=""Try""];
}
"
0x1b332629b45136a3614fafcd927c8ea31d7cd717.sol,Bandit,"contract Bandit is usingOraclize, DSSafeAddSub { function () public payable {}",1,"subgraph cluster_8793_Bandit {
label=""Bandit"";
""8793_playerGetPendingTxByAddress"" [label=""playerGetPendingTxByAddress""];
""8793_playerPull"" [label=""playerPull""];
""8793_ownerSetMaxBet"" [label=""ownerSetMaxBet""];
""8793_ownerRefundPlayer"" [label=""ownerRefundPlayer""];
""8793_fallback"" [label=""fallback""];
""8793_ownerSetMinBet"" [label=""ownerSetMinBet""];
""8793_ownerPauseGame"" [label=""ownerPauseGame""];
""8793_ownerkill"" [label=""ownerkill""];
""8793_ownerChangeOwner"" [label=""ownerChangeOwner""];
""8793_playerWithdrawPendingTransactions"" [label=""playerWithdrawPendingTransactions""];
""8793_ownerSetOraclizeSafeGas"" [label=""ownerSetOraclizeSafeGas""];
""8793_withdrawBalance"" [label=""withdrawBalance""];
""8793_Bandit"" [label=""Bandit""];
""8793___callback"" [label=""__callback""];
""8793_Bandit"" -> ""8793_ownerSetMinBet"";
""8793_playerPull"" -> ""8793_uint2str"";
""8793_withdrawBalance"" -> ""8793_onlyOwner"";
""8793_ownerPauseGame"" -> ""8793_onlyOwner"";
""8793___callback"" -> ""8793_parseInt"";
""8793_playerPull"" -> ""8793_betIsValid"";
""8793_ownerkill"" -> ""8793_onlyOwner"";
""8793_ownerSetMaxBet"" -> ""8793_onlyOwner"";
""8793_playerPull"" -> ""8793_gameIsActive"";
""8793_Bandit"" -> ""8793_ownerSetMaxBet"";
""8793_Bandit"" -> ""8793_oraclize_setCustomGasPrice"";
""8793_ownerSetOraclizeSafeGas"" -> ""8793_onlyOwner"";
""8793_ownerRefundPlayer"" -> ""8793_onlyOwner"";
""8793_ownerSetMinBet"" -> ""8793_onlyOwner"";
""8793_ownerChangeOwner"" -> ""8793_onlyOwner"";
""8793_Bandit"" -> ""8793_oraclize_setProof"";
""8793___callback"" -> ""8793_onlyOraclize"";
""8793___callback"" -> ""8793_safeAdd"";
""8793_playerPull"" -> ""8793_oraclize_query"";
}
"
0x3688587725ed6dda84bcd25aeeb04997415da50a.sol,BFreeContract,"contract BFreeContract is ERC20Interface, owned{ string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; uint256 public _totalSupply = 2240000; uint256 public icoMin = 300000; uint256 public preIcoLimit = 600000; uint256 public countHolders = 0; uint256 public amountOfInvestments = 0; uint256 preICOprice; uint256 ICOprice; uint256 public currentTokenPrice; uint256 public sellPrice; bool public preIcoIsRunning; bool public minimalGoalReached; bool public icoIsClosed; bool icoExitIsPossible; mapping (address => uint256) public tokenBalanceOf; mapping(address => mapping (address => uint256)) allowed; mapping(address => bool) frozenAccount; event FrozenFunds(address initiator, address account, string status); event BonusChanged(uint8 bonusOld, uint8 bonusNew); event minGoalReached(uint256 minIcoAmount, string notice); event preIcoEnded(uint256 preIcoAmount, string notice); event priceUpdated(uint256 oldPrice, uint256 newPrice, string notice); event withdrawed(address _to, uint256 summe, string notice); event deposited(address _from, uint256 summe, string notice); event orderToTransfer(address initiator, address _from, address _to, uint256 summe, string notice); event tokenCreated(address _creator, uint256 summe, string notice); event tokenDestroyed(address _destroyer, uint256 summe, string notice); event icoStatusUpdated(address _initiator, string status); function BFreeContract() { preIcoIsRunning = true; minimalGoalReached = false; icoExitIsPossible = false; icoIsClosed = false; tokenBalanceOf[this] += _totalSupply; allowed[this][owner] = _totalSupply; allowed[this][supervisor] = _totalSupply; currentTokenPrice = 0.024340770791075100 * 1 ether; preICOprice = 0.024340770791075100 * 1 ether; ICOprice = 0.040567951318458400 * 1 ether; sellPrice = 0; updatePrices(); }",1,"subgraph cluster_1780_BFreeContract {
label=""BFreeContract"";
""1780_destroyToken"" [label=""destroyToken""];
""1780_buyToken"" [label=""buyToken""];
""1780_sellMaximumPossibleAmountOfTokens"" [label=""sellMaximumPossibleAmountOfTokens""];
""1780_setSellPrice"" [label=""setSellPrice""];
""1780_calculateTheEndPrice"" [label=""calculateTheEndPrice""];
""1780_transferOwnership"" [label=""transferOwnership""];
""1780_setPreICOPrice"" [label=""setPreICOPrice""];
""1780_balanceOf"" [label=""balanceOf""];
""1780_freezeAccount"" [label=""freezeAccount""];
""1780_checkMinimalGoal"" [label=""checkMinimalGoal""];
""1780_allowIcoExit"" [label=""allowIcoExit""];
""1780_approve"" [label=""approve""];
""1780_checkPreIcoStatus"" [label=""checkPreIcoStatus""];
""1780__transfer"" [label=""_transfer""];
""1780_fallback"" [label=""fallback""];
""1780_buy"" [label=""buy""];
""1780_exitThisIcoForHalfOfTokenPrice"" [label=""exitThisIcoForHalfOfTokenPrice""];
""1780_getAllMyTokensForAllEtherOnContract"" [label=""getAllMyTokensForAllEtherOnContract""];
""1780_withdraw"" [label=""withdraw""];
""1780_collect"" [label=""collect""];
""1780_setICOPrice"" [label=""setICOPrice""];
""1780_sell"" [label=""sell""];
""1780_setPrices"" [label=""setPrices""];
""1780_updatePrices"" [label=""updatePrices""];
""1780_BFreeContract"" [label=""BFreeContract""];
""1780_deposit"" [label=""deposit""];
""1780_mintToken"" [label=""mintToken""];
""1780_stopThisIco"" [label=""stopThisIco""];
""1780_checkFrozenAccounts"" [label=""checkFrozenAccounts""];
""1780_transfer"" [label=""transfer""];
""1780_allowance"" [label=""allowance""];
""1780_transferFrom"" [label=""transferFrom""];
""1780_totalSupply"" [label=""totalSupply""];
""1780_destroyToken"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780_checkMinimalGoal"";
""1780_sell"" -> ""1780__transfer"";
""1780_setSellPrice"" -> ""1780_isOwner"";
""1780_exitThisIcoForHalfOfTokenPrice"" -> ""1780__transfer"";
""1780_transferFrom"" -> ""1780__transfer"";
""1780_collect"" -> ""1780_isOwner"";
""1780_fallback"" -> ""1780_buyToken"";
""1780_sellMaximumPossibleAmountOfTokens"" -> ""1780_sell"";
""1780_transferOwnership"" -> ""1780_isOwner"";
""1780_setPrices"" -> ""1780_isOwner"";
""1780_deposit"" -> ""1780_isOwner"";
""1780_setPreICOPrice"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_updatePrices"";
""1780_BFreeContract"" -> ""1780_updatePrices"";
""1780_buy"" -> ""1780_buyToken"";
""1780_buyToken"" -> ""1780_updatePrices"";
""1780_setPreICOPrice"" -> ""1780_isOwner"";
""1780_transfer"" -> ""1780__transfer"";
""1780_stopThisIco"" -> ""1780_isOwner"";
""1780_collect"" -> ""1780_withdraw"";
""1780_withdraw"" -> ""1780_isOwner"";
""1780_allowIcoExit"" -> ""1780_isOwner"";
""1780_freezeAccount"" -> ""1780_isOwner"";
""1780_mintToken"" -> ""1780_isOwner"";
""1780_getAllMyTokensForAllEtherOnContract"" -> ""1780__transfer"";
""1780_setPrices"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780__transfer"";
""1780_updatePrices"" -> ""1780_checkPreIcoStatus"";
}
"
0x18da8521c333aed9de8f512e847734cb7be42e38.sol,Crowdsale,"contract Crowdsale is Pausable, PullPayment { using SafeMath for uint; struct Backer { uint weiReceived; uint coinSent; }",1,"subgraph cluster_1189_Crowdsale {
label=""Crowdsale"";
""1189_setMultisig"" [label=""setMultisig""];
""1189_drain"" [label=""drain""];
""1189_receiveETH"" [label=""receiveETH""];
""1189_finalize"" [label=""finalize""];
""1189_getRemainCoins"" [label=""getRemainCoins""];
""1189_backProjectXOwner"" [label=""backProjectXOwner""];
""1189_refund"" [label=""refund""];
""1189_Crowdsale"" [label=""Crowdsale""];
""1189_bonus"" [label=""bonus""];
""1189_start"" [label=""start""];
""1189_fallback"" [label=""fallback""];
""1189_finalize"" -> ""1189_onlyOwner"";
""1189_drain"" -> ""1189_onlyOwner"";
""1189_receiveETH"" -> ""1189_bonus"";
""1189_getRemainCoins"" -> ""1189_bonus"";
""1189_backProjectXOwner"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_stopInEmergency"";
""1189_setMultisig"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_receiveETH"";
""1189_start"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_respectTimeFrame"";
""1189_getRemainCoins"" -> ""1189_onlyOwner"";
""1189_refund"" -> ""1189_asyncSend"";
""1189_refund"" -> ""1189_minCapNotReached"";
}
"
0x72f1295238a6a0d95631ad9f81b829c486861057.sol,Simpl_quiz,contract Simpl_quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Simpl_quiz {
label=""Simpl_quiz"";
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x25d3b1550e518ba8d7581cad811285e005902faa.sol,SheetMusic,"contract SheetMusic is OwnableContract { enum NoteLength { WHOLE_NOTE, DOTTED_HALF_NOTE, HALF_NOTE, DOTTED_QUARTER_NOTE, QUARTER_NOTE, DOTTED_EIGHTH_NOTE, EIGHTH_NOTE, DOTTED_SIXTEENTH_NOTE, SIXTEENTH_NOTE }",1,"subgraph cluster_638_SheetMusic {
label=""SheetMusic"";
""638_setMilestone"" [label=""setMilestone""];
""638_setMinDonation"" [label=""setMinDonation""];
""638_donate"" [label=""donate""];
""638_getDonatee"" [label=""getDonatee""];
""638_fallback"" [label=""fallback""];
""638_createBeat"" [label=""createBeat""];
""638_createPassage"" [label=""createPassage""];
""638_checkGoal"" [label=""checkGoal""];
""638_splice"" [label=""splice""];
""638_getBeat"" [label=""getBeat""];
""638_checkMidiNoteValue"" [label=""checkMidiNoteValue""];
""638_getNumberOfBeats"" [label=""getNumberOfBeats""];
""638_SheetMusic"" [label=""SheetMusic""];
""638_getTotalDonated"" [label=""getTotalDonated""];
""638_checkMidiNotesValue"" [label=""checkMidiNotesValue""];
""638_transferMilestone"" [label=""transferMilestone""];
""638_getDonationStats"" [label=""getDonationStats""];
""638_createBeat"" -> ""638_checkMidiNotesValue"";
""638_setMinDonation"" -> ""638_onlyOwner"";
""638_fallback"" -> ""638_checkGoal"";
""638_checkGoal"" -> ""638_transferMilestone"";
""638_createBeat"" -> ""638_checkGoal"";
""638_donate"" -> ""638_checkGoal"";
""638_setMilestone"" -> ""638_onlyOwner"";
""638_createPassage"" -> ""638_checkGoal"";
""638_createPassage"" -> ""638_splice"";
""638_checkMidiNotesValue"" -> ""638_checkMidiNoteValue"";
""638_createPassage"" -> ""638_checkMidiNotesValue"";
}
"
0xe1dbbce4570b815b6ce3434bb3097dc9f453c565.sol,MobiusRED,"contract MobiusRED is DSMath, DSAuth { string public ipfsHash; string public ipfsHashType = ; MobiusRedToken public token; bool public upgraded; address public nextVersion; uint public totalSharesSold; uint public totalEarningsGenerated; uint public totalDividendsPaid; uint public totalJackpotsWon; uint public constant DEV_FRACTION = WAD / 20; uint public constant DEV_DIVISOR = 20; uint public constant RETURNS_FRACTION = 65 * 10**16; uint public constant REFERRAL_FRACTION = 1 * 10**16; uint public constant JACKPOT_SEED_FRACTION = WAD / 20; uint public constant JACKPOT_FRACTION = 15 * 10**16; uint public constant AIRDROP_FRACTION = WAD / 100; uint public constant DIVIDENDS_FRACTION = 9 * 10**16; uint public constant STARTING_SHARE_PRICE = 1 finney; uint public constant PRICE_INCREASE_PERIOD = 1 hours; uint public constant HARD_DEADLINE_DURATION = 10 days; uint public constant SOFT_DEADLINE_DURATION = 1 days; uint public constant TIME_PER_SHARE = 5 minutes; uint public jackpotSeed; uint public devBalance; uint public raisedICO; uint public unclaimedReturns; uint public constant MULTIPLIER = RAY; struct Investor { uint lastCumulativeReturnsPoints; uint shares; }",1,"subgraph cluster_2284_MobiusRED {
label=""MobiusRED"";
""2284_fallback"" [label=""fallback""];
""2284_constructor"" [label=""constructor""];
""2284__outstandingReturns"" [label=""_outstandingReturns""];
""2284_buyShares"" [label=""buyShares""];
""2284__airDrop"" [label=""_airDrop""];
""2284__purchase"" [label=""_purchase""];
""2284_upgrade"" [label=""upgrade""];
""2284__updateReturns"" [label=""_updateReturns""];
""2284_withdrawDevShare"" [label=""withdrawDevShare""];
""2284_updateMyReturns"" [label=""updateMyReturns""];
""2284__finalizeRound"" [label=""_finalizeRound""];
""2284__issueShares"" [label=""_issueShares""];
""2284_finalizeLastRound"" [label=""finalizeLastRound""];
""2284__splitRevenue"" [label=""_splitRevenue""];
""2284_finalizeAndRestart"" [label=""finalizeAndRestart""];
""2284_totalsInfo"" [label=""totalsInfo""];
""2284__disburseReturns"" [label=""_disburseReturns""];
""2284_reinvestReturns"" [label=""reinvestReturns""];
""2284_startNewRound"" [label=""startNewRound""];
""2284_setIPFSHash"" [label=""setIPFSHash""];
""2284_hasReturns"" [label=""hasReturns""];
""2284_roundInfo"" [label=""roundInfo""];
""2284_withdrawReturns"" [label=""withdrawReturns""];
""2284_investorInfo"" [label=""investorInfo""];
""2284_estimateReturns"" [label=""estimateReturns""];
""2284__outstandingReturns"" -> ""2284_mul"";
""2284__finalizeRound"" -> ""2284_add"";
""2284_finalizeAndRestart"" -> ""2284_startNewRound"";
""2284__finalizeRound"" -> ""2284_wmul"";
""2284__purchase"" -> ""2284_add"";
""2284__issueShares"" -> ""2284_add"";
""2284_reinvestReturns"" -> ""2284_min"";
""2284_upgrade"" -> ""2284_auth"";
""2284_roundInfo"" -> ""2284_wmul"";
""2284_fallback"" -> ""2284_buyShares"";
""2284_withdrawDevShare"" -> ""2284_auth"";
""2284_reinvestReturns"" -> ""2284_reinvestReturns"";
""2284__outstandingReturns"" -> ""2284_sub"";
""2284__disburseReturns"" -> ""2284_wdiv"";
""2284_reinvestReturns"" -> ""2284__purchase"";
""2284_finalizeLastRound"" -> ""2284__finalizeRound"";
""2284_buyShares"" -> ""2284__purchase"";
""2284__splitRevenue"" -> ""2284_wmul"";
""2284__issueShares"" -> ""2284_wdiv"";
""2284__updateReturns"" -> ""2284_add"";
""2284_withdrawReturns"" -> ""2284__updateReturns"";
""2284_investorInfo"" -> ""2284_estimateReturns"";
""2284__splitRevenue"" -> ""2284__disburseReturns"";
""2284_reinvestReturns"" -> ""2284__updateReturns"";
""2284__updateReturns"" -> ""2284__outstandingReturns"";
""2284__disburseReturns"" -> ""2284_add"";
""2284__airDrop"" -> ""2284_add"";
""2284_reinvestReturns"" -> ""2284_sub"";
""2284_totalsInfo"" -> ""2284_wmul"";
""2284_setIPFSHash"" -> ""2284_auth"";
""2284__purchase"" -> ""2284_mul"";
""2284_finalizeAndRestart"" -> ""2284_finalizeLastRound"";
""2284__purchase"" -> ""2284__issueShares"";
""2284__purchase"" -> ""2284__updateReturns"";
""2284_withdrawReturns"" -> ""2284_sub"";
""2284__purchase"" -> ""2284_min"";
""2284__purchase"" -> ""2284__airDrop"";
""2284__issueShares"" -> ""2284_mul"";
""2284_estimateReturns"" -> ""2284__outstandingReturns"";
""2284__purchase"" -> ""2284__splitRevenue"";
""2284__splitRevenue"" -> ""2284_add"";
""2284_estimateReturns"" -> ""2284_hasReturns"";
""2284_withdrawReturns"" -> ""2284_hasReturns"";
""2284_updateMyReturns"" -> ""2284__updateReturns"";
""2284_startNewRound"" -> ""2284__purchase"";
""2284__disburseReturns"" -> ""2284_mul"";
}
"
0x873e4037cfacfaa6837c913604c2de51f2b179d0.sol,IRideSale,contract IRideSale { Token public tokenReward; address public creator; address public owner = 0xBeDF65990326Ed2236C5A17432d9a30dbA3aBFEe; uint256 public price; uint256 public startDate; uint256 public endDate; modifier isCreator() { require(msg.sender == creator); _; },1,"subgraph cluster_220_IRideSale {
label=""IRideSale"";
""220_fallback"" [label=""fallback""];
""220_setStartDate"" [label=""setStartDate""];
""220_constructor"" [label=""constructor""];
""220_kill"" [label=""kill""];
""220_setPrice"" [label=""setPrice""];
""220_setCreator"" [label=""setCreator""];
""220_setEndtDate"" [label=""setEndtDate""];
""220_setOwner"" [label=""setOwner""];
""220_setToken"" [label=""setToken""];
""220_setEndtDate"" -> ""220_isCreator"";
""220_setCreator"" -> ""220_isCreator"";
""220_kill"" -> ""220_isCreator"";
""220_setOwner"" -> ""220_isCreator"";
""220_setPrice"" -> ""220_isCreator"";
""220_setToken"" -> ""220_isCreator"";
""220_setStartDate"" -> ""220_isCreator"";
}
"
0x1fdedef5c2da1ed9db44d80003a9592dfa18163c.sol,Syndicate,contract Syndicate is Ownable{ uint256 public numberSyndicateMembers; uint256 public totalSyndicateShares = 20000; uint256 public playersShareAllocation = 5000; uint256 public availableBuyInShares = 5000; uint256 public minimumBuyIn = 10; uint256 public buyInSharePrice = 1000000000000000; uint256 public shareCycleSessionSize = 1000; uint256 public shareCycleIndex = 0; uint256 public shareCycle = 1; uint256 public currentSyndicateValue = 0; uint256 public precision = 1000000000000000; uint256 public maxCyclePlayersConsidered = 100; address[] public cyclePlayers; uint256 public numberOfCyclePlayers = 0; struct somePlayer { uint256 playCount; uint256 profitShare; uint256 shareCycle; uint256 winnings; },1,"subgraph cluster_869_Syndicate {
label=""Syndicate"";
""869_roundIt"" [label=""roundIt""];
""869_claimPlayerWinnings"" [label=""claimPlayerWinnings""];
""869_playerStatus"" [label=""playerStatus""];
""869_setShareCycleSessionSize"" [label=""setShareCycleSessionSize""];
""869_insertCyclePlayer"" [label=""insertCyclePlayer""];
""869_addMember"" [label=""addMember""];
""869_allocateWinnings"" [label=""allocateWinnings""];
""869_updatePlayCount"" [label=""updatePlayCount""];
""869_Syndicate"" [label=""Syndicate""];
""869_setMaxCyclePlayersConsidered"" [label=""setMaxCyclePlayersConsidered""];
""869_claimPlayerProfit"" [label=""claimPlayerProfit""];
""869_buyIntoSyndicate"" [label=""buyIntoSyndicate""];
""869_memberShareCount"" [label=""memberShareCount""];
""869_min"" [label=""min""];
""869_allocateShares"" [label=""allocateShares""];
""869_distributeProfit"" [label=""distributeProfit""];
""869_memberProfitShare"" [label=""memberProfitShare""];
""869_claimProfit"" [label=""claimProfit""];
""869_setMaxCyclePlayersConsidered"" -> ""869_onlyOwner"";
""869_distributeProfit"" -> ""869_min"";
""869_buyIntoSyndicate"" -> ""869_addMember"";
""869_allocateShares"" -> ""869_addMember"";
""869_distributeProfit"" -> ""869_roundIt"";
""869_setShareCycleSessionSize"" -> ""869_onlyOwner"";
""869_updatePlayCount"" -> ""869_insertCyclePlayer"";
""869_allocateShares"" -> ""869_onlyOwner"";
}
"
0x1c3bed5bd4b0e6a8389efd0d2876f948a907ab5b.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1092_MiniMeToken {
label=""MiniMeToken"";
""1092_balanceOfAt"" [label=""balanceOfAt""];
""1092_allowance"" [label=""allowance""];
""1092_generateTokens"" [label=""generateTokens""];
""1092_transfer"" [label=""transfer""];
""1092_getValueAt"" [label=""getValueAt""];
""1092_approve"" [label=""approve""];
""1092_createCloneToken"" [label=""createCloneToken""];
""1092_min"" [label=""min""];
""1092_transferFrom"" [label=""transferFrom""];
""1092_totalSupply"" [label=""totalSupply""];
""1092_isContract"" [label=""isContract""];
""1092_claimTokens"" [label=""claimTokens""];
""1092_balanceOf"" [label=""balanceOf""];
""1092_MiniMeToken"" [label=""MiniMeToken""];
""1092_totalSupplyAt"" [label=""totalSupplyAt""];
""1092_fallback"" [label=""fallback""];
""1092_approveAndCall"" [label=""approveAndCall""];
""1092_enableTransfers"" [label=""enableTransfers""];
""1092_updateValueAtNow"" [label=""updateValueAtNow""];
""1092_destroyTokens"" [label=""destroyTokens""];
""1092_doTransfer"" [label=""doTransfer""];
""1092_destroyTokens"" -> ""1092_totalSupply"";
""1092_approve"" -> ""1092_isContract"";
""1092_balanceOfAt"" -> ""1092_min"";
""1092_doTransfer"" -> ""1092_isContract"";
""1092_generateTokens"" -> ""1092_onlyController"";
""1092_generateTokens"" -> ""1092_updateValueAtNow"";
""1092_doTransfer"" -> ""1092_updateValueAtNow"";
""1092_totalSupplyAt"" -> ""1092_getValueAt"";
""1092_enableTransfers"" -> ""1092_onlyController"";
""1092_destroyTokens"" -> ""1092_updateValueAtNow"";
""1092_totalSupply"" -> ""1092_totalSupplyAt"";
""1092_transferFrom"" -> ""1092_doTransfer"";
""1092_claimTokens"" -> ""1092_onlyController"";
""1092_balanceOf"" -> ""1092_balanceOfAt"";
""1092_generateTokens"" -> ""1092_balanceOf"";
""1092_doTransfer"" -> ""1092_balanceOfAt"";
""1092_approveAndCall"" -> ""1092_approve"";
""1092_destroyTokens"" -> ""1092_balanceOf"";
""1092_fallback"" -> ""1092_isContract"";
""1092_transfer"" -> ""1092_doTransfer"";
""1092_destroyTokens"" -> ""1092_onlyController"";
""1092_generateTokens"" -> ""1092_totalSupply"";
""1092_balanceOfAt"" -> ""1092_getValueAt"";
""1092_totalSupplyAt"" -> ""1092_min"";
}
"
0x26b5962250b779ab0f33970738a46fcfb00a70b9.sol,NewLottery,"contract NewLottery is Owned { uint256 private maxTickets; uint256 public minimumBounty; uint256 public ticketPrice; uint256 public lottoIndex; uint256 lastTicketTime; uint8 _direction; uint256 numtickets; uint256 totalBounty; address owner; event NewTicket(address indexed fromAddress, bool success); event LottoComplete(address indexed fromAddress, uint indexed lottoIndex, uint256 reward); function LottoCount() public payable { owner = msg.sender; ticketPrice = 0.101 * 10**18; minimumBounty = 1 * 10**18; maxTickets = 10; _direction = 0; lottoIndex = 1; lastTicketTime = 0; numtickets = 0; totalBounty = msg.value; require(totalBounty >= minimumBounty); }",1,"subgraph cluster_354_NewLottery {
label=""NewLottery"";
""354_getLastTicketTime"" [label=""getLastTicketTime""];
""354_getBalance"" [label=""getBalance""];
""354_shutdown"" [label=""shutdown""];
""354_withdraw"" [label=""withdraw""];
""354_LottoCount"" [label=""LottoCount""];
""354_PayWinner"" [label=""PayWinner""];
""354_AddTicket"" [label=""AddTicket""];
""354_withdraw"" -> ""354_onlyOwner"";
""354_shutdown"" -> ""354_onlyOwner"";
""354_AddTicket"" -> ""354_PayWinner"";
}
"
0x3688587725ed6dda84bcd25aeeb04997415da50a.sol,BFreeContract,"contract BFreeContract is ERC20Interface, owned{ string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; uint256 public _totalSupply = 2240000; uint256 public icoMin = 300000; uint256 public preIcoLimit = 600000; uint256 public countHolders = 0; uint256 public amountOfInvestments = 0; uint256 preICOprice; uint256 ICOprice; uint256 public currentTokenPrice; uint256 public sellPrice; bool public preIcoIsRunning; bool public minimalGoalReached; bool public icoIsClosed; bool icoExitIsPossible; mapping (address => uint256) public tokenBalanceOf; mapping(address => mapping (address => uint256)) allowed; mapping(address => bool) frozenAccount; event FrozenFunds(address initiator, address account, string status); event BonusChanged(uint8 bonusOld, uint8 bonusNew); event minGoalReached(uint256 minIcoAmount, string notice); event preIcoEnded(uint256 preIcoAmount, string notice); event priceUpdated(uint256 oldPrice, uint256 newPrice, string notice); event withdrawed(address _to, uint256 summe, string notice); event deposited(address _from, uint256 summe, string notice); event orderToTransfer(address initiator, address _from, address _to, uint256 summe, string notice); event tokenCreated(address _creator, uint256 summe, string notice); event tokenDestroyed(address _destroyer, uint256 summe, string notice); event icoStatusUpdated(address _initiator, string status); function BFreeContract() { preIcoIsRunning = true; minimalGoalReached = false; icoExitIsPossible = false; icoIsClosed = false; tokenBalanceOf[this] += _totalSupply; allowed[this][owner] = _totalSupply; allowed[this][supervisor] = _totalSupply; currentTokenPrice = 0.024340770791075100 * 1 ether; preICOprice = 0.024340770791075100 * 1 ether; ICOprice = 0.040567951318458400 * 1 ether; sellPrice = 0; updatePrices(); }",1,"subgraph cluster_1780_BFreeContract {
label=""BFreeContract"";
""1780_destroyToken"" [label=""destroyToken""];
""1780_buyToken"" [label=""buyToken""];
""1780_sellMaximumPossibleAmountOfTokens"" [label=""sellMaximumPossibleAmountOfTokens""];
""1780_setSellPrice"" [label=""setSellPrice""];
""1780_calculateTheEndPrice"" [label=""calculateTheEndPrice""];
""1780_transferOwnership"" [label=""transferOwnership""];
""1780_setPreICOPrice"" [label=""setPreICOPrice""];
""1780_balanceOf"" [label=""balanceOf""];
""1780_freezeAccount"" [label=""freezeAccount""];
""1780_checkMinimalGoal"" [label=""checkMinimalGoal""];
""1780_allowIcoExit"" [label=""allowIcoExit""];
""1780_approve"" [label=""approve""];
""1780_checkPreIcoStatus"" [label=""checkPreIcoStatus""];
""1780__transfer"" [label=""_transfer""];
""1780_fallback"" [label=""fallback""];
""1780_buy"" [label=""buy""];
""1780_exitThisIcoForHalfOfTokenPrice"" [label=""exitThisIcoForHalfOfTokenPrice""];
""1780_getAllMyTokensForAllEtherOnContract"" [label=""getAllMyTokensForAllEtherOnContract""];
""1780_withdraw"" [label=""withdraw""];
""1780_collect"" [label=""collect""];
""1780_setICOPrice"" [label=""setICOPrice""];
""1780_sell"" [label=""sell""];
""1780_setPrices"" [label=""setPrices""];
""1780_updatePrices"" [label=""updatePrices""];
""1780_BFreeContract"" [label=""BFreeContract""];
""1780_deposit"" [label=""deposit""];
""1780_mintToken"" [label=""mintToken""];
""1780_stopThisIco"" [label=""stopThisIco""];
""1780_checkFrozenAccounts"" [label=""checkFrozenAccounts""];
""1780_transfer"" [label=""transfer""];
""1780_allowance"" [label=""allowance""];
""1780_transferFrom"" [label=""transferFrom""];
""1780_totalSupply"" [label=""totalSupply""];
""1780_destroyToken"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780_checkMinimalGoal"";
""1780_sell"" -> ""1780__transfer"";
""1780_setSellPrice"" -> ""1780_isOwner"";
""1780_exitThisIcoForHalfOfTokenPrice"" -> ""1780__transfer"";
""1780_transferFrom"" -> ""1780__transfer"";
""1780_collect"" -> ""1780_isOwner"";
""1780_fallback"" -> ""1780_buyToken"";
""1780_sellMaximumPossibleAmountOfTokens"" -> ""1780_sell"";
""1780_transferOwnership"" -> ""1780_isOwner"";
""1780_setPrices"" -> ""1780_isOwner"";
""1780_deposit"" -> ""1780_isOwner"";
""1780_setPreICOPrice"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_updatePrices"";
""1780_BFreeContract"" -> ""1780_updatePrices"";
""1780_buy"" -> ""1780_buyToken"";
""1780_buyToken"" -> ""1780_updatePrices"";
""1780_setPreICOPrice"" -> ""1780_isOwner"";
""1780_transfer"" -> ""1780__transfer"";
""1780_stopThisIco"" -> ""1780_isOwner"";
""1780_collect"" -> ""1780_withdraw"";
""1780_withdraw"" -> ""1780_isOwner"";
""1780_allowIcoExit"" -> ""1780_isOwner"";
""1780_freezeAccount"" -> ""1780_isOwner"";
""1780_mintToken"" -> ""1780_isOwner"";
""1780_getAllMyTokensForAllEtherOnContract"" -> ""1780__transfer"";
""1780_setPrices"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780__transfer"";
""1780_updatePrices"" -> ""1780_checkPreIcoStatus"";
}
"
0x1f313e1015d362a50a16a479f857637bbb36a353.sol,LineOfTransfers,"contract LineOfTransfers { address[] public accounts; uint[] public values; uint public transferPointer = 0; address public owner; event Transfer(address to, uint amount); modifier hasBalance(uint index) { require(this.balance >= values[index]); _; }",1,"subgraph cluster_203_LineOfTransfers {
label=""LineOfTransfers"";
""203_getBalance"" [label=""getBalance""];
""203_LineOfTransfers"" [label=""LineOfTransfers""];
""203_terminate"" [label=""terminate""];
""203_addData"" [label=""addData""];
""203_fallback"" [label=""fallback""];
""203_transferTo"" [label=""transferTo""];
""203_makeTransfer"" [label=""makeTransfer""];
""203_transferTo"" -> ""203_existingIndex"";
""203_makeTransfer"" -> ""203_transferTo"";
""203_terminate"" -> ""203_onlyOwner"";
""203_addData"" -> ""203_onlyOwner"";
""203_transferTo"" -> ""203_hasBalance"";
}
"
0x5bf5436b367de54860d1b0be31203349a4d5caa7.sol,CryptoCarAuction,"contract CryptoCarAuction is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 45000000000000000000000000; uint256 public totalDistributed = 100000000000000000000000; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 2600000000000000000000; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_962_CryptoCarAuction {
label=""CryptoCarAuction"";
""962_getTokens"" [label=""getTokens""];
""962_updateTokensPerEth"" [label=""updateTokensPerEth""];
""962_constructor"" [label=""constructor""];
""962_transferFrom"" [label=""transferFrom""];
""962_transferOwnership"" [label=""transferOwnership""];
""962_burn"" [label=""burn""];
""962_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""962_doAirdrop"" [label=""doAirdrop""];
""962_finishDistribution"" [label=""finishDistribution""];
""962_getasall"" [label=""getasall""];
""962_balanceOf"" [label=""balanceOf""];
""962_approve"" [label=""approve""];
""962_distr"" [label=""distr""];
""962_allowance"" [label=""allowance""];
""962_getTokenBalance"" [label=""getTokenBalance""];
""962_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""962_fallback"" [label=""fallback""];
""962_transfer"" [label=""transfer""];
""962_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""962_getas"" [label=""getas""];
""962_fallback"" -> ""962_getTokens"";
""962_updateTokensPerEth"" -> ""962_onlyOwner"";
""962_adminClaimAirdrop"" -> ""962_onlyOwner"";
""962_getTokens"" -> ""962_distr"";
""962_burn"" -> ""962_onlyOwner"";
""962_getTokens"" -> ""962_canDistr"";
""962_transferOwnership"" -> ""962_onlyOwner"";
""962_getasall"" -> ""962_onlyOwner"";
""962_distr"" -> ""962_canDistr"";
""962_transfer"" -> ""962_onlyPayloadSize"";
""962_getas"" -> ""962_onlyOwner"";
""962_finishDistribution"" -> ""962_onlyOwner"";
""962_adminClaimAirdropMultiple"" -> ""962_onlyOwner"";
""962_adminClaimAirdrop"" -> ""962_doAirdrop"";
""962_finishDistribution"" -> ""962_canDistr"";
""962_adminClaimAirdropMultiple"" -> ""962_doAirdrop"";
""962_transferFrom"" -> ""962_onlyPayloadSize"";
""962_constructor"" -> ""962_distr"";
""962_withdrawForeignTokens"" -> ""962_onlyOwner"";
}
"
0xce51f6cac9fb2695d944f2d5e2699d68aa7b656e.sol,Locksmith,"contract Locksmith is owned, logger, helper { uint public nonce; uint public m_proofs; bool public didProve; bytes32 public lock; string public protocol = ; struct proof { address prover; address receiver; string key; bytes32 lock; }",1,"subgraph cluster_605_Locksmith {
label=""Locksmith"";
""605_kill"" [label=""kill""];
""605_fallback"" [label=""fallback""];
""605_logEvent"" [label=""logEvent""];
""605_unlock"" [label=""unlock""];
""605_Locksmith"" [label=""Locksmith""];
""605_sendTo"" [label=""sendTo""];
""605_setLock"" [label=""setLock""];
""605_setLock"" -> ""605_onlyOwner"";
""605_sendTo"" -> ""605_onlyOwner"";
""605_unlock"" -> ""605_logEvent"";
""605_kill"" -> ""605_onlyOwner"";
""605_sendTo"" -> ""605_logEvent"";
""605_setLock"" -> ""605_logEvent"";
}
"
0x46822ac3bc32db7ebd9845da3fe0886f824e9edf.sol,EBSCSale,"contract EBSCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 6000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 20000; bool private rentrancy_lock = false; EBSCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1561_EBSCSale {
label=""EBSCSale"";
""1561_checkFundingCap"" [label=""checkFundingCap""];
""1561_checkFundingGoal"" [label=""checkFundingGoal""];
""1561_terminate"" [label=""terminate""];
""1561_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1561_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1561_convertToMiniEbsc"" [label=""convertToMiniEbsc""];
""1561_EBSCSale"" [label=""EBSCSale""];
""1561_changeStartTime"" [label=""changeStartTime""];
""1561_changeEndTime"" [label=""changeEndTime""];
""1561_fallback"" [label=""fallback""];
""1561_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1561_safeWithdrawal"" [label=""safeWithdrawal""];
""1561_setRate"" [label=""setRate""];
""1561_currentTime"" [label=""currentTime""];
""1561_fallback"" -> ""1561_afterStartTime"";
""1561_changeStartTime"" -> ""1561_onlyOwner"";
""1561_ownerAllocateTokens"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_nonReentrant"";
""1561_changeEndTime"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_beforeDeadline"";
""1561_ownerUnlockFund"" -> ""1561_onlyOwner"";
""1561_terminate"" -> ""1561_onlyOwner"";
""1561_fallback"" -> ""1561_checkFundingCap"";
""1561_ownerUnlockFund"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_whenNotPaused"";
""1561_safeWithdrawal"" -> ""1561_afterDeadline"";
""1561_fallback"" -> ""1561_checkFundingGoal"";
""1561_setRate"" -> ""1561_onlyOwner"";
""1561_EBSCSale"" -> ""1561_setRate"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingGoal"";
""1561_ownerAllocateTokens"" -> ""1561_onlyOwner"";
""1561_safeWithdrawal"" -> ""1561_nonReentrant"";
""1561_ownerSafeWithdrawal"" -> ""1561_onlyOwner"";
""1561_ownerSafeWithdrawal"" -> ""1561_nonReentrant"";
""1561_fallback"" -> ""1561_saleNotClosed"";
""1561_ownerAllocateTokens"" -> ""1561_checkFundingCap"";
}
"
0x548d32216d01617452892ea360bfce9ce8dc9729.sol,ChemistryCore,"contract ChemistryCore is ContractOfSale { function ChemistryCore() public { owner = msg.sender; authorized[msg.sender] = true; _createElement(, 2 ** 255); }",1,"subgraph cluster_1804_ChemistryCore {
label=""ChemistryCore"";
""1804_getElementView"" [label=""getElementView""];
""1804_getElementsFromIndex"" [label=""getElementsFromIndex""];
""1804_getElements"" [label=""getElements""];
""1804_fallback"" [label=""fallback""];
""1804_withdrawAmount"" [label=""withdrawAmount""];
""1804_withdrawAll"" [label=""withdrawAll""];
""1804_getElement"" [label=""getElement""];
""1804_ChemistryCore"" [label=""ChemistryCore""];
""1804_getElementOwners"" [label=""getElementOwners""];
""1804_getElementInfoView"" [label=""getElementInfoView""];
""1804_addElement"" [label=""addElement""];
""1804_getElementInfo"" [label=""getElementInfo""];
""1804__bytes32ToString"" [label=""_bytes32ToString""];
""1804_addElements"" [label=""addElements""];
""1804_getElementInfo"" -> ""1804_calculateNextPrice"";
""1804_withdrawAmount"" -> ""1804_onlyOwner"";
""1804_addElements"" -> ""1804_onlyAuthorized"";
""1804_addElement"" -> ""1804__createElement"";
""1804_getElementInfoView"" -> ""1804__bytes32ToString"";
""1804_getElementView"" -> ""1804__bytes32ToString"";
""1804_addElement"" -> ""1804_onlyAuthorized"";
""1804_addElements"" -> ""1804__createElement"";
""1804_getElementInfoView"" -> ""1804_calculateNextPrice"";
""1804_ChemistryCore"" -> ""1804__createElement"";
""1804_withdrawAll"" -> ""1804_onlyOwner"";
}
"
0xec91fcca41e8ab83dd5bc2bbcc2ffb71e314ba25.sol,TaolCash,"contract TaolCash is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 90 * 1 days; uint public round2 = now + 60 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 1000000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth =1000000000e18; uint public target0drop = 5000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_TaolCash {
label=""TaolCash"";
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_distr"" [label=""distr""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_approve"" [label=""approve""];
""1253_burn"" [label=""burn""];
""1253_add"" [label=""add""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_allowance"" [label=""allowance""];
""1253_constructor"" [label=""constructor""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_transfer"" [label=""transfer""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_Distribute"" [label=""Distribute""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_fallback"" [label=""fallback""];
""1253_getTokens"" [label=""getTokens""];
""1253_withdraw"" [label=""withdraw""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_constructor"" -> ""1253_distr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
}
"
0x18da8521c333aed9de8f512e847734cb7be42e38.sol,Crowdsale,"contract Crowdsale is Pausable, PullPayment { using SafeMath for uint; struct Backer { uint weiReceived; uint coinSent; }",1,"subgraph cluster_1189_Crowdsale {
label=""Crowdsale"";
""1189_setMultisig"" [label=""setMultisig""];
""1189_drain"" [label=""drain""];
""1189_receiveETH"" [label=""receiveETH""];
""1189_finalize"" [label=""finalize""];
""1189_getRemainCoins"" [label=""getRemainCoins""];
""1189_backProjectXOwner"" [label=""backProjectXOwner""];
""1189_refund"" [label=""refund""];
""1189_Crowdsale"" [label=""Crowdsale""];
""1189_bonus"" [label=""bonus""];
""1189_start"" [label=""start""];
""1189_fallback"" [label=""fallback""];
""1189_finalize"" -> ""1189_onlyOwner"";
""1189_drain"" -> ""1189_onlyOwner"";
""1189_receiveETH"" -> ""1189_bonus"";
""1189_getRemainCoins"" -> ""1189_bonus"";
""1189_backProjectXOwner"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_stopInEmergency"";
""1189_setMultisig"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_receiveETH"";
""1189_start"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_respectTimeFrame"";
""1189_getRemainCoins"" -> ""1189_onlyOwner"";
""1189_refund"" -> ""1189_asyncSend"";
""1189_refund"" -> ""1189_minCapNotReached"";
}
"
0xf5587929c51017cfa8d0ead672fcc6b39f1496b0.sol,RippleCredit,"contract RippleCredit is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 500000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000e8; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0xFF84C3EAB550CBAb11725CA50F5bee01d9670fD9; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1288_RippleCredit {
label=""RippleCredit"";
""1288_balanceOf"" [label=""balanceOf""];
""1288_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1288_transfer"" [label=""transfer""];
""1288_getTokenBalance"" [label=""getTokenBalance""];
""1288_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1288_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1288_burn"" [label=""burn""];
""1288_Distribute"" [label=""Distribute""];
""1288_distr"" [label=""distr""];
""1288_getTokens"" [label=""getTokens""];
""1288_transferFrom"" [label=""transferFrom""];
""1288_constructor"" [label=""constructor""];
""1288_fallback"" [label=""fallback""];
""1288_add"" [label=""add""];
""1288_withdraw"" [label=""withdraw""];
""1288_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1288_transferOwnership"" [label=""transferOwnership""];
""1288_approve"" [label=""approve""];
""1288_finishDistribution"" [label=""finishDistribution""];
""1288_withdrawAll"" [label=""withdrawAll""];
""1288_allowance"" [label=""allowance""];
""1288_burn"" -> ""1288_onlyOwner"";
""1288_add"" -> ""1288_onlyOwner"";
""1288_distr"" -> ""1288_canDistr"";
""1288_withdrawAll"" -> ""1288_onlyOwner"";
""1288_withdraw"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_distr"";
""1288_transfer"" -> ""1288_onlyPayloadSize"";
""1288_DistributeAirdrop"" -> ""1288_Distribute"";
""1288_finishDistribution"" -> ""1288_onlyOwner"";
""1288_transferFrom"" -> ""1288_onlyPayloadSize"";
""1288_fallback"" -> ""1288_getTokens"";
""1288_transferOwnership"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_canDistr"";
""1288_withdrawForeignTokens"" -> ""1288_onlyOwner"";
""1288_finishDistribution"" -> ""1288_canDistr"";
""1288_DistributeAirdropMultiple"" -> ""1288_onlyOwner"";
""1288_DistributeAirdropMultiple"" -> ""1288_Distribute"";
""1288_updateTokensPerEth"" -> ""1288_onlyOwner"";
""1288_Distribute"" -> ""1288_onlyOwner"";
""1288_DistributeAirdrop"" -> ""1288_onlyOwner"";
""1288_constructor"" -> ""1288_distr"";
}
"
0x330bebabc9a2a4136e3d1cb38ca521f5a95aec2e.sol,KoreaShow,"contract KoreaShow is TokenController, Controlled { using SafeMath for uint256; uint256 public startFundingTime; uint256 public endFundingTime; uint256 constant public maximumFunding = 100 ether; uint256 public tokensPerEther = 31000; uint256 constant oneDay = 86400; uint256 public totalCollected = 0; bool public paused; string public techProvider = ; Token public tokenContract; bool public finalized = false; bool public allowChange = true; bool private transfersEnabled = true; address private vaultAddress; bool private initialed = false; event Payment(address indexed _sender, uint256 _ethAmount, uint256 _tokenAmount); function KoreaShow( uint _startFundingTime, uint _endFundingTime, address _vaultAddress, address _tokenAddress ) public { require(_endFundingTime > now); require(_endFundingTime >= _startFundingTime); require(_vaultAddress != 0); require(_tokenAddress != 0); require(!initialed); startFundingTime = _startFundingTime; endFundingTime = _endFundingTime; vaultAddress = _vaultAddress; tokenContract = Token(_tokenAddress); paused = false; initialed = true; }",1,"subgraph cluster_1713_KoreaShow {
label=""KoreaShow"";
""1713_pauseContribution"" [label=""pauseContribution""];
""1713_claimTokens"" [label=""claimTokens""];
""1713_KoreaShow"" [label=""KoreaShow""];
""1713_fallback"" [label=""fallback""];
""1713_changeToken"" [label=""changeToken""];
""1713_allowTransfersEnabled"" [label=""allowTransfersEnabled""];
""1713_proxyPayment"" [label=""proxyPayment""];
""1713_doPayment"" [label=""doPayment""];
""1713_finalizeSale"" [label=""finalizeSale""];
""1713_resumeContribution"" [label=""resumeContribution""];
""1713_setTime"" [label=""setTime""];
""1713_isContract"" [label=""isContract""];
""1713_onApprove"" [label=""onApprove""];
""1713_onTransfer"" [label=""onTransfer""];
""1713_changeTokenController"" [label=""changeTokenController""];
""1713_changeTokensPerEther"" [label=""changeTokensPerEther""];
""1713_setTime"" -> ""1713_onlyController"";
""1713_proxyPayment"" -> ""1713_notPaused"";
""1713_claimTokens"" -> ""1713_onlyController"";
""1713_changeToken"" -> ""1713_onlyController"";
""1713_pauseContribution"" -> ""1713_onlyController"";
""1713_changeTokenController"" -> ""1713_onlyController"";
""1713_fallback"" -> ""1713_notPaused"";
""1713_changeTokensPerEther"" -> ""1713_onlyController"";
""1713_proxyPayment"" -> ""1713_doPayment"";
""1713_resumeContribution"" -> ""1713_onlyController"";
""1713_finalizeSale"" -> ""1713_onlyController"";
""1713_fallback"" -> ""1713_doPayment"";
""1713_allowTransfersEnabled"" -> ""1713_onlyController"";
}
"
0xebcf88fb2783bbb75b12df3f33627efa894afea4.sol,SPACEDICE,"contract SPACEDICE is Mortal, usingNRE{ uint minBet = 1000000000000000; event Roll(bool _won, uint256 _dice1, uint256 _dice2, uint256 _roll1, uint256 _roll2, uint _amount); constructor() payable public {}",1,"subgraph cluster_372_SPACEDICE {
label=""SPACEDICE"";
""372_checkContractBalance"" [label=""checkContractBalance""];
""372_collect"" [label=""collect""];
""372_constructor"" [label=""constructor""];
""372_fallback"" [label=""fallback""];
""372_bet"" [label=""bet""];
""372_collect"" -> ""372_onlyOwner"";
""372_bet"" -> ""372_ra"";
""372_bet"" -> ""372_rx"";
}
"
0x402cd1fa4ba4296f5503d1e86214b77ec7cfe840.sol,Crowdsale,"contract Crowdsale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; uint public starttime; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); function Crowdsale( address ifSuccessfulSendTo, uint fundingGoalInEthers, uint durationInMinutes, uint weiCostOfEachToken, address addressOfTokenUsedAsReward ) public { beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; deadline = now + durationInMinutes * 1 minutes; price = weiCostOfEachToken; tokenReward = token(addressOfTokenUsedAsReward); starttime = now; }",1,"subgraph cluster_360_Crowdsale {
label=""Crowdsale"";
""360_fallback"" [label=""fallback""];
""360_Crowdsale"" [label=""Crowdsale""];
""360_checkGoalReached"" [label=""checkGoalReached""];
""360_safeWithdrawal"" [label=""safeWithdrawal""];
""360_safeWithdrawal"" -> ""360_afterDeadline"";
""360_checkGoalReached"" -> ""360_afterDeadline"";
}
"
0x7287bef78619e10c32a1eee82046fa3c4a29f17d.sol,CryptoPornSmartContract,"contract CryptoPornSmartContract is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address newOwner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.01 ether; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public personIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public personIndexToApproved; address public ceoAddress; address[4] public cooAddresses; struct Person { string name; uint256 sellingPrice; }",1,"subgraph cluster_972_CryptoPornSmartContract {
label=""CryptoPornSmartContract"";
""972_takeOwnership"" [label=""takeOwnership""];
""972_getPerson"" [label=""getPerson""];
""972_transferFrom"" [label=""transferFrom""];
""972__transfer"" [label=""_transfer""];
""972_symbol"" [label=""symbol""];
""972_balanceOf"" [label=""balanceOf""];
""972_name"" [label=""name""];
""972_setCOO"" [label=""setCOO""];
""972_CryptoPornSmartContract"" [label=""CryptoPornSmartContract""];
""972_createNewPerson"" [label=""createNewPerson""];
""972_approve"" [label=""approve""];
""972__owns"" [label=""_owns""];
""972_payout"" [label=""payout""];
""972__createPerson"" [label=""_createPerson""];
""972_priceOf"" [label=""priceOf""];
""972_transfer"" [label=""transfer""];
""972_totalSupply"" [label=""totalSupply""];
""972__payout"" [label=""_payout""];
""972_purchase"" [label=""purchase""];
""972_ownerOf"" [label=""ownerOf""];
""972_implementsERC721"" [label=""implementsERC721""];
""972__approved"" [label=""_approved""];
""972_tokensOfOwner"" [label=""tokensOfOwner""];
""972__addressNotNull"" [label=""_addressNotNull""];
""972_takeOwnership"" -> ""972__addressNotNull"";
""972_payout"" -> ""972__payout"";
""972_approve"" -> ""972__owns"";
""972_transfer"" -> ""972__addressNotNull"";
""972_transferFrom"" -> ""972__owns"";
""972_purchase"" -> ""972__transfer"";
""972_createNewPerson"" -> ""972__createPerson"";
""972_createNewPerson"" -> ""972_onlyCLevel"";
""972_tokensOfOwner"" -> ""972_balanceOf"";
""972__transfer"" -> ""972__addressNotNull"";
""972_transfer"" -> ""972__owns"";
""972_transferFrom"" -> ""972__addressNotNull"";
""972_takeOwnership"" -> ""972__transfer"";
""972__createPerson"" -> ""972__transfer"";
""972_transferFrom"" -> ""972__transfer"";
""972_payout"" -> ""972_onlyCLevel"";
""972_purchase"" -> ""972__addressNotNull"";
""972_takeOwnership"" -> ""972__approved"";
""972_tokensOfOwner"" -> ""972_totalSupply"";
""972_transferFrom"" -> ""972__approved"";
""972_setCOO"" -> ""972_onlyCEO"";
""972_createNewPerson"" -> ""972__addressNotNull"";
""972_transfer"" -> ""972__transfer"";
}
"
0x6c1bcb34142bffd35f57db626e0ac427af616a4d.sol,EnjinBuyer,contract EnjinBuyer { mapping (address => uint256) public balances; mapping (address => uint256) public balances_after_buy; bool public bought_tokens; bool public token_set; bool public refunded; uint256 public contract_eth_value; bool public kill_switch; bytes32 password_hash = 0x8bf0720c6e610aace867eba51b03ab8ca908b665898b10faddc95a96e829539d; address public developer = 0x0639C169D9265Ca4B4DEce693764CdA8ea5F3882; address public sale = 0xc4740f71323129669424d1Ae06c42AEE99da30e2; ERC20 public token; uint256 public eth_minimum = 3235 ether; function set_token(address _token) { require(msg.sender == developer); token = ERC20(_token); token_set = true; },1,"subgraph cluster_503_EnjinBuyer {
label=""EnjinBuyer"";
""503_set_token"" [label=""set_token""];
""503_fallback"" [label=""fallback""];
""503_purchase_tokens"" [label=""purchase_tokens""];
""503_activate_kill_switch"" [label=""activate_kill_switch""];
""503_set_refunded"" [label=""set_refunded""];
""503_withdraw"" [label=""withdraw""];
""503_personal_withdraw"" [label=""personal_withdraw""];
}
"
0xeef93ec835c7921038d55ee096671a94e961709b.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1447_RefundVault {
label=""RefundVault"";
""1447_deposit"" [label=""deposit""];
""1447_enableRefunds"" [label=""enableRefunds""];
""1447_setWallet"" [label=""setWallet""];
""1447_RefundVault"" [label=""RefundVault""];
""1447_close"" [label=""close""];
""1447_refund"" [label=""refund""];
""1447_deposit"" -> ""1447_onlyOwner"";
""1447_enableRefunds"" -> ""1447_onlyOwner"";
""1447_close"" -> ""1447_onlyOwner"";
""1447_setWallet"" -> ""1447_onlyOwner"";
}
"
0xc849a5fff9befa297d1c3a772bafac9f3c9004ec.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1018_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1018_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1018_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1018_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1018_constructor"" [label=""constructor""];
""1018_tokenFallback"" [label=""tokenFallback""];
""1018_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1018_depositToken"" [label=""depositToken""];
""1018_depositEther"" [label=""depositEther""];
""1018_approveToPullOutTokens"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmounts"" -> ""1018_onlyOwner"";
""1018_distributeWithTransferFrom"" -> ""1018_onlyOwner"";
""1018_tokenFallback"" -> ""1018_whenNotPaused"";
""1018_depositEther"" -> ""1018_whenNotPaused"";
""1018_depositToken"" -> ""1018_whenNotPaused"";
""1018_distributeTokenToAddress"" -> ""1018_onlyOwner"";
}
"
0xc4aad17558fa95c8937d0856b2dad74c1a7a095f.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_335_RefundVault {
label=""RefundVault"";
""335_RefundVault"" [label=""RefundVault""];
""335_enableRefunds"" [label=""enableRefunds""];
""335_close"" [label=""close""];
""335_deposit"" [label=""deposit""];
""335_refund"" [label=""refund""];
""335_deposit"" -> ""335_onlyOwner"";
""335_enableRefunds"" -> ""335_onlyOwner"";
""335_close"" -> ""335_onlyOwner"";
}
"
0x5592a2704ba651f8af4cb6f330415f9877483ad2.sol,NamiMultiSigWallet,"contract NamiMultiSigWallet { uint constant public MAX_OWNER_COUNT = 50; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_988_NamiMultiSigWallet {
label=""NamiMultiSigWallet"";
""988_getTransactionCount"" [label=""getTransactionCount""];
""988_confirmTransaction"" [label=""confirmTransaction""];
""988_isOwner"" [label=""isOwner""];
""988_changeRequirement"" [label=""changeRequirement""];
""988_getConfirmations"" [label=""getConfirmations""];
""988_constructor"" [label=""constructor""];
""988_getOwners"" [label=""getOwners""];
""988_addOwner"" [label=""addOwner""];
""988_addTransaction"" [label=""addTransaction""];
""988_getConfirmationCount"" [label=""getConfirmationCount""];
""988_replaceOwner"" [label=""replaceOwner""];
""988_fallback"" [label=""fallback""];
""988_getTransactionIds"" [label=""getTransactionIds""];
""988_submitTransaction"" [label=""submitTransaction""];
""988_executeTransaction"" [label=""executeTransaction""];
""988_removeOwner"" [label=""removeOwner""];
""988_isConfirmed"" [label=""isConfirmed""];
""988_revokeConfirmation"" [label=""revokeConfirmation""];
""988_addTransaction"" -> ""988_notNull"";
""988_constructor"" -> ""988_validRequirement"";
""988_addOwner"" -> ""988_validRequirement"";
""988_replaceOwner"" -> ""988_ownerDoesNotExist"";
""988_addOwner"" -> ""988_onlyWallet"";
""988_submitTransaction"" -> ""988_addTransaction"";
""988_addOwner"" -> ""988_notNull"";
""988_replaceOwner"" -> ""988_onlyWallet"";
""988_confirmTransaction"" -> ""988_ownerExists"";
""988_revokeConfirmation"" -> ""988_ownerExists"";
""988_executeTransaction"" -> ""988_notExecuted"";
""988_removeOwner"" -> ""988_changeRequirement"";
""988_changeRequirement"" -> ""988_validRequirement"";
""988_removeOwner"" -> ""988_onlyWallet"";
""988_confirmTransaction"" -> ""988_notConfirmed"";
""988_removeOwner"" -> ""988_ownerExists"";
""988_changeRequirement"" -> ""988_onlyWallet"";
""988_confirmTransaction"" -> ""988_executeTransaction"";
""988_addOwner"" -> ""988_ownerDoesNotExist"";
""988_revokeConfirmation"" -> ""988_confirmed"";
""988_submitTransaction"" -> ""988_confirmTransaction"";
""988_confirmTransaction"" -> ""988_transactionExists"";
""988_replaceOwner"" -> ""988_ownerExists"";
""988_revokeConfirmation"" -> ""988_notExecuted"";
""988_executeTransaction"" -> ""988_isConfirmed"";
}
"
0x728781e75735dc0962df3a51d7ef47e798a7107e.sol,WolkTGE,"contract WolkTGE is Wolk { mapping (address => uint256) contribution; mapping (address => uint256) presaleLimit; mapping (address => bool) presaleContributor; uint256 public constant tokenGenerationMin = 50 * 10**6 * 10**decimals; uint256 public constant tokenGenerationMax = 150 * 10**6 * 10**decimals; uint256 public presale_start_block; uint256 public start_block; uint256 public end_block; function wolkGenesis(uint256 _presaleStartBlock, uint256 _startBlock, uint256 _endBlock, address _wolkWallet, address _wolkSale) onlyOwner returns (bool success){ require((totalTokens < 1) && (block.number <= _startBlock) && (_endBlock > _startBlock) && (_startBlock > _presaleStartBlock)); presale_start_block = _presaleStartBlock; start_block = _startBlock; end_block = _endBlock; multisigWallet = _wolkWallet; wolkSale = _wolkSale; settlers[msg.sender] = true; return true; }",1,"subgraph cluster_1265_WolkTGE {
label=""WolkTGE"";
""1265_finalize"" [label=""finalize""];
""1265_removeParticipant"" [label=""removeParticipant""];
""1265_addParticipant"" [label=""addParticipant""];
""1265_tokenGenerationEvent"" [label=""tokenGenerationEvent""];
""1265_wolkGenesis"" [label=""wolkGenesis""];
""1265_refund"" [label=""refund""];
""1265_finalizeOpenSale"" [label=""finalizeOpenSale""];
""1265_participantBalance"" [label=""participantBalance""];
""1265_finalizeOpenSale"" -> ""1265_safeMul"";
""1265_finalize"" -> ""1265_safeAdd"";
""1265_finalizeOpenSale"" -> ""1265_safeDiv"";
""1265_finalize"" -> ""1265_safeMul"";
""1265_refund"" -> ""1265_safeSub"";
""1265_finalizeOpenSale"" -> ""1265_onlyOwner"";
""1265_finalize"" -> ""1265_onlyWolk"";
""1265_wolkGenesis"" -> ""1265_onlyOwner"";
""1265_removeParticipant"" -> ""1265_onlyOwner"";
""1265_tokenGenerationEvent"" -> ""1265_safeSub"";
""1265_addParticipant"" -> ""1265_onlyOwner"";
""1265_finalizeOpenSale"" -> ""1265_safeSub"";
""1265_addParticipant"" -> ""1265_safeMul"";
""1265_finalize"" -> ""1265_safeDiv"";
""1265_tokenGenerationEvent"" -> ""1265_safeMul"";
""1265_tokenGenerationEvent"" -> ""1265_safeAdd"";
}
"
0x67d9be79f2f13b7d3c9684d3782bc646f5ba6d63.sol,MilinfinityToken,"contract MilinfinityToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 230000000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 500; uint256 public tokensPerEth = 300000000e1; uint public target0drop = 20000; uint public progress0drop = 0; address multisig = 0x88A97d97413a6c2290f748D34aa204619d96b1a1; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_MilinfinityToken {
label=""MilinfinityToken"";
""1261_getTokens"" [label=""getTokens""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_approve"" [label=""approve""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_allowance"" [label=""allowance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_distr"" [label=""distr""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_fallback"" [label=""fallback""];
""1261_add"" [label=""add""];
""1261_Distribute"" [label=""Distribute""];
""1261_constructor"" [label=""constructor""];
""1261_transfer"" [label=""transfer""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_getTokens"" -> ""1261_canDistr"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
}
"
0x9214ec02cb71cba0ada6896b8da260736a67ab10.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1092_MiniMeToken {
label=""MiniMeToken"";
""1092_getValueAt"" [label=""getValueAt""];
""1092_totalSupply"" [label=""totalSupply""];
""1092_claimTokens"" [label=""claimTokens""];
""1092_MiniMeToken"" [label=""MiniMeToken""];
""1092_isContract"" [label=""isContract""];
""1092_enableTransfers"" [label=""enableTransfers""];
""1092_generateTokens"" [label=""generateTokens""];
""1092_balanceOfAt"" [label=""balanceOfAt""];
""1092_totalSupplyAt"" [label=""totalSupplyAt""];
""1092_allowance"" [label=""allowance""];
""1092_approveAndCall"" [label=""approveAndCall""];
""1092_transfer"" [label=""transfer""];
""1092_approve"" [label=""approve""];
""1092_fallback"" [label=""fallback""];
""1092_balanceOf"" [label=""balanceOf""];
""1092_updateValueAtNow"" [label=""updateValueAtNow""];
""1092_destroyTokens"" [label=""destroyTokens""];
""1092_doTransfer"" [label=""doTransfer""];
""1092_createCloneToken"" [label=""createCloneToken""];
""1092_transferFrom"" [label=""transferFrom""];
""1092_min"" [label=""min""];
""1092_doTransfer"" -> ""1092_updateValueAtNow"";
""1092_totalSupply"" -> ""1092_totalSupplyAt"";
""1092_transfer"" -> ""1092_doTransfer"";
""1092_generateTokens"" -> ""1092_onlyController"";
""1092_destroyTokens"" -> ""1092_updateValueAtNow"";
""1092_fallback"" -> ""1092_isContract"";
""1092_approveAndCall"" -> ""1092_approve"";
""1092_doTransfer"" -> ""1092_isContract"";
""1092_claimTokens"" -> ""1092_onlyController"";
""1092_generateTokens"" -> ""1092_updateValueAtNow"";
""1092_generateTokens"" -> ""1092_totalSupply"";
""1092_transferFrom"" -> ""1092_doTransfer"";
""1092_destroyTokens"" -> ""1092_totalSupply"";
""1092_generateTokens"" -> ""1092_balanceOf"";
""1092_doTransfer"" -> ""1092_balanceOfAt"";
""1092_balanceOfAt"" -> ""1092_min"";
""1092_enableTransfers"" -> ""1092_onlyController"";
""1092_destroyTokens"" -> ""1092_onlyController"";
""1092_totalSupplyAt"" -> ""1092_min"";
""1092_destroyTokens"" -> ""1092_balanceOf"";
""1092_balanceOf"" -> ""1092_balanceOfAt"";
""1092_balanceOfAt"" -> ""1092_getValueAt"";
""1092_totalSupplyAt"" -> ""1092_getValueAt"";
""1092_approve"" -> ""1092_isContract"";
}
"
0x217aff4ee5bc1dfcabd8d5c3a36e0b430b02ab9d.sol,ETher_game,contract ETher_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETher_game {
label=""ETher_game"";
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0xa44fb3aa5c8465512b806145a8f9b60e74f3f851.sol,PITSTOP,"contract PITSTOP is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 10000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth =10000000e18; uint public target0drop = 500; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_PITSTOP {
label=""PITSTOP"";
""1253_distr"" [label=""distr""];
""1253_getTokens"" [label=""getTokens""];
""1253_constructor"" [label=""constructor""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_approve"" [label=""approve""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_Distribute"" [label=""Distribute""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_transfer"" [label=""transfer""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_add"" [label=""add""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_withdraw"" [label=""withdraw""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_burn"" -> ""1253_onlyOwner"";
}
"
0x55914aad05640d89448a7803a03ed0eabcbc6a22.sol,EthereumCrystal,"contract EthereumCrystal is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 75000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000000e8; uint public target0drop = 200000; uint public progress0drop = 0; address multisig = 0xF4ea201ba0c2ca99E8942f047a5220bc98286763; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_EthereumCrystal {
label=""EthereumCrystal"";
""1263_transferFrom"" [label=""transferFrom""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_transfer"" [label=""transfer""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_distr"" [label=""distr""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_constructor"" [label=""constructor""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_allowance"" [label=""allowance""];
""1263_getTokens"" [label=""getTokens""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_add"" [label=""add""];
""1263_approve"" [label=""approve""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_Distribute"" [label=""Distribute""];
""1263_fallback"" [label=""fallback""];
""1263_burn"" [label=""burn""];
""1263_withdraw"" [label=""withdraw""];
""1263_getTokens"" -> ""1263_canDistr"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_distr"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_constructor"" -> ""1263_distr"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_distr"" -> ""1263_canDistr"";
}
"
0xf5587929c51017cfa8d0ead672fcc6b39f1496b0.sol,RippleCredit,"contract RippleCredit is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 500000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000e8; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0xFF84C3EAB550CBAb11725CA50F5bee01d9670fD9; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1288_RippleCredit {
label=""RippleCredit"";
""1288_balanceOf"" [label=""balanceOf""];
""1288_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1288_transfer"" [label=""transfer""];
""1288_getTokenBalance"" [label=""getTokenBalance""];
""1288_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1288_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1288_burn"" [label=""burn""];
""1288_Distribute"" [label=""Distribute""];
""1288_distr"" [label=""distr""];
""1288_getTokens"" [label=""getTokens""];
""1288_transferFrom"" [label=""transferFrom""];
""1288_constructor"" [label=""constructor""];
""1288_fallback"" [label=""fallback""];
""1288_add"" [label=""add""];
""1288_withdraw"" [label=""withdraw""];
""1288_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1288_transferOwnership"" [label=""transferOwnership""];
""1288_approve"" [label=""approve""];
""1288_finishDistribution"" [label=""finishDistribution""];
""1288_withdrawAll"" [label=""withdrawAll""];
""1288_allowance"" [label=""allowance""];
""1288_burn"" -> ""1288_onlyOwner"";
""1288_add"" -> ""1288_onlyOwner"";
""1288_distr"" -> ""1288_canDistr"";
""1288_withdrawAll"" -> ""1288_onlyOwner"";
""1288_withdraw"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_distr"";
""1288_transfer"" -> ""1288_onlyPayloadSize"";
""1288_DistributeAirdrop"" -> ""1288_Distribute"";
""1288_finishDistribution"" -> ""1288_onlyOwner"";
""1288_transferFrom"" -> ""1288_onlyPayloadSize"";
""1288_fallback"" -> ""1288_getTokens"";
""1288_transferOwnership"" -> ""1288_onlyOwner"";
""1288_getTokens"" -> ""1288_canDistr"";
""1288_withdrawForeignTokens"" -> ""1288_onlyOwner"";
""1288_finishDistribution"" -> ""1288_canDistr"";
""1288_DistributeAirdropMultiple"" -> ""1288_onlyOwner"";
""1288_DistributeAirdropMultiple"" -> ""1288_Distribute"";
""1288_updateTokensPerEth"" -> ""1288_onlyOwner"";
""1288_Distribute"" -> ""1288_onlyOwner"";
""1288_DistributeAirdrop"" -> ""1288_onlyOwner"";
""1288_constructor"" -> ""1288_distr"";
}
"
0xaab606817809841e8b1168be8779eeaf6744ef64.sol,DividendToken,"contract DividendToken is StandardToken, Ownable { using SafeMath for uint256; uint256 public claimTimeout = 20 days; uint256 public dividendCycleTime = 350 days; uint256 public currentDividend; mapping(address => uint256) unclaimedDividend; mapping(address => uint256) public lastUpdate; uint256 public lastDividendIncreaseDate; mapping(address => bool) public isTreasurer; uint256 public dividendEndTime = 0; event Payin(address _owner, uint256 _value, uint256 _endTime); event Payout(address _tokenHolder, uint256 _value); event Reclaimed(uint256 remainingBalance, uint256 _endTime, uint256 _now); event ChangedTreasurer(address treasurer, bool active); constructor() public { isTreasurer[owner] = true; }",1,"subgraph cluster_1282_DividendToken {
label=""DividendToken"";
""1282_transfer"" [label=""transfer""];
""1282_fallback"" [label=""fallback""];
""1282_getClaimableDividend"" [label=""getClaimableDividend""];
""1282_updateDividend"" [label=""updateDividend""];
""1282_claimDividend"" [label=""claimDividend""];
""1282_transferDividend"" [label=""transferDividend""];
""1282_requestUnclaimed"" [label=""requestUnclaimed""];
""1282_constructor"" [label=""constructor""];
""1282_setTreasurer"" [label=""setTreasurer""];
""1282_transferFrom"" [label=""transferFrom""];
""1282_calcDividend"" [label=""calcDividend""];
""1282_getClaimableDividend"" -> ""1282_calcDividend"";
""1282_transferDividend"" -> ""1282_updateDividend"";
""1282_requestUnclaimed"" -> ""1282_onlyOwner"";
""1282_transfer"" -> ""1282_transferDividend"";
""1282_claimDividend"" -> ""1282_updateDividend"";
""1282_transfer"" -> ""1282_transfer"";
""1282_setTreasurer"" -> ""1282_onlyOwner"";
""1282_transferFrom"" -> ""1282_transferDividend"";
""1282_transferDividend"" -> ""1282_balanceOf"";
""1282_calcDividend"" -> ""1282_balanceOf"";
""1282_updateDividend"" -> ""1282_calcDividend"";
""1282_transferFrom"" -> ""1282_transferFrom"";
}
"
0xf0344800bd3ffa687e4d780357961b28995a5f46.sol,QUIZ_GAME,contract QUIZ_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_QUIZ_GAME {
label=""QUIZ_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_StartGame"" [label=""StartGame""];
}
"
0x692b856117039d424cfac420f93ab2451f3c9eb5.sol,RunAway,contract RunAway { using SafeMath for uint256; using SafeMathInt for int256; modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_2263_RunAway {
label=""RunAway"";
""2263_setSymbol"" [label=""setSymbol""];
""2263_purchaseTokens"" [label=""purchaseTokens""];
""2263_withdrawComm1"" [label=""withdrawComm1""];
""2263_transfer"" [label=""transfer""];
""2263_setAdministrator"" [label=""setAdministrator""];
""2263_sell"" [label=""sell""];
""2263_setName"" [label=""setName""];
""2263_constructor"" [label=""constructor""];
""2263_myDividends"" [label=""myDividends""];
""2263_withdraw"" [label=""withdraw""];
""2263_dividendsOf"" [label=""dividendsOf""];
""2263_withdrawComm2"" [label=""withdrawComm2""];
""2263_totalSupply"" [label=""totalSupply""];
""2263_roundPayoutsTo"" [label=""roundPayoutsTo""];
""2263_roundDividends"" [label=""roundDividends""];
""2263_roundNetBuySum"" [label=""roundNetBuySum""];
""2263_roundProfitPerShare"" [label=""roundProfitPerShare""];
""2263_startNextRound"" [label=""startNextRound""];
""2263_ethereumToTokens_"" [label=""ethereumToTokens_""];
""2263_roundUserNetBuy"" [label=""roundUserNetBuy""];
""2263_balanceOf"" [label=""balanceOf""];
""2263_disableInitialStage"" [label=""disableInitialStage""];
""2263_sqrt"" [label=""sqrt""];
""2263_totalEthereumBalance"" [label=""totalEthereumBalance""];
""2263_sellPrice"" [label=""sellPrice""];
""2263_endCurrentRound"" [label=""endCurrentRound""];
""2263_roundEndTime"" [label=""roundEndTime""];
""2263_roundEnded"" [label=""roundEnded""];
""2263_reinvest"" [label=""reinvest""];
""2263_taxDividends"" [label=""taxDividends""];
""2263_calculateTokensReceived"" [label=""calculateTokensReceived""];
""2263_exit"" [label=""exit""];
""2263_roundTotalPayouts"" [label=""roundTotalPayouts""];
""2263_buy"" [label=""buy""];
""2263_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""2263_estimateDividends"" [label=""estimateDividends""];
""2263_fallback"" [label=""fallback""];
""2263_activate"" [label=""activate""];
""2263_transferExpiredDividends"" [label=""transferExpiredDividends""];
""2263_acquireDividends"" [label=""acquireDividends""];
""2263_tokensToEthereum_"" [label=""tokensToEthereum_""];
""2263_myTokens"" [label=""myTokens""];
""2263_buyPrice"" [label=""buyPrice""];
""2263_roundStartTime"" [label=""roundStartTime""];
""2263_setSymbol"" -> ""2263_onlyAdministrator"";
""2263_exit"" -> ""2263_onlyHuman"";
""2263_purchaseTokens"" -> ""2263_isActivated"";
""2263_withdrawComm2"" -> ""2263_onlyComm2"";
""2263_sellPrice"" -> ""2263_tokensToEthereum_"";
""2263_withdrawComm1"" -> ""2263_onlyComm1"";
""2263_withdrawComm1"" -> ""2263_isActivated"";
""2263_fallback"" -> ""2263_purchaseTokens"";
""2263_transfer"" -> ""2263_taxDividends"";
""2263_exit"" -> ""2263_acquireDividends"";
""2263_exit"" -> ""2263_sell"";
""2263_transfer"" -> ""2263_checkRoundStatus"";
""2263_sell"" -> ""2263_onlyBagholders"";
""2263_transfer"" -> ""2263_tokensToEthereum_"";
""2263_activate"" -> ""2263_onlyAdministrator"";
""2263_withdrawComm2"" -> ""2263_checkRoundStatus"";
""2263_purchaseTokens"" -> ""2263_checkRoundStatus"";
""2263_ethereumToTokens_"" -> ""2263_sqrt"";
""2263_sell"" -> ""2263_taxDividends"";
""2263_acquireDividends"" -> ""2263_onlyHuman"";
""2263_acquireDividends"" -> ""2263_myDividends"";
""2263_calculateTokensReceived"" -> ""2263_ethereumToTokens_"";
""2263_sell"" -> ""2263_onlyHuman"";
""2263_reinvest"" -> ""2263_onlyHuman"";
""2263_reinvest"" -> ""2263_purchaseTokens"";
""2263_sell"" -> ""2263_isActivated"";
""2263_purchaseTokens"" -> ""2263_onlyHuman"";
""2263_transfer"" -> ""2263_onlyBagholders"";
""2263_transfer"" -> ""2263_onlyHuman"";
""2263_withdraw"" -> ""2263_onlyHuman"";
""2263_setAdministrator"" -> ""2263_onlyAdministrator"";
""2263_exit"" -> ""2263_withdraw"";
""2263_calculateEthereumReceived"" -> ""2263_tokensToEthereum_"";
""2263_reinvest"" -> ""2263_isActivated"";
""2263_transferExpiredDividends"" -> ""2263_checkRoundStatus"";
""2263_myTokens"" -> ""2263_balanceOf"";
""2263_buyPrice"" -> ""2263_tokensToEthereum_"";
""2263_acquireDividends"" -> ""2263_isActivated"";
""2263_withdrawComm2"" -> ""2263_isActivated"";
""2263_transferExpiredDividends"" -> ""2263_onlyHuman"";
""2263_exit"" -> ""2263_checkRoundStatus"";
""2263_sell"" -> ""2263_checkRoundStatus"";
""2263_disableInitialStage"" -> ""2263_onlyAdministrator"";
""2263_purchaseTokens"" -> ""2263_antiEarlyWhale"";
""2263_transfer"" -> ""2263_isActivated"";
""2263_reinvest"" -> ""2263_checkRoundStatus"";
""2263_withdrawComm2"" -> ""2263_onlyHuman"";
""2263_buy"" -> ""2263_purchaseTokens"";
""2263_setName"" -> ""2263_onlyAdministrator"";
""2263_myDividends"" -> ""2263_dividendsOf"";
""2263_exit"" -> ""2263_isActivated"";
""2263_withdraw"" -> ""2263_isActivated"";
""2263_purchaseTokens"" -> ""2263_ethereumToTokens_"";
""2263_acquireDividends"" -> ""2263_checkRoundStatus"";
""2263_withdraw"" -> ""2263_checkRoundStatus"";
""2263_withdrawComm1"" -> ""2263_checkRoundStatus"";
""2263_sell"" -> ""2263_tokensToEthereum_"";
""2263_transferExpiredDividends"" -> ""2263_isActivated"";
""2263_withdrawComm1"" -> ""2263_onlyHuman"";
}
"
0xd74ac22ffc06d6f96cb41eef4e0fdb836889c3ff.sol,AHF_PreSale,contract AHF_PreSale is Owned { ERC20Interface public tokenContract; address public vaultAddress; bool public fundingEnabled; uint public totalCollected; uint public tokenPrice; function setTokenAddress(address _tokenAddress) public onlyOwner { tokenContract = ERC20Interface(_tokenAddress); return; },1,"subgraph cluster_314_AHF_PreSale {
label=""AHF_PreSale"";
""314_setTokenAddress"" [label=""setTokenAddress""];
""314_updateTokenPrice"" [label=""updateTokenPrice""];
""314_fallback"" [label=""fallback""];
""314_claimTokens"" [label=""claimTokens""];
""314_setFundingEnabled"" [label=""setFundingEnabled""];
""314_setVaultAddress"" [label=""setVaultAddress""];
""314_setFundingEnabled"" -> ""314_onlyOwner"";
""314_claimTokens"" -> ""314_onlyOwner"";
""314_updateTokenPrice"" -> ""314_onlyOwner"";
""314_setVaultAddress"" -> ""314_onlyOwner"";
""314_setTokenAddress"" -> ""314_onlyOwner"";
}
"
0xed2725cdfc48a24aa71d9b9621d431db0705a55a.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1280_MiniMeTokenFactory {
label=""MiniMeTokenFactory"";
""1280_createCloneToken"" [label=""createCloneToken""];
}
"
0x21ae174c592cbb476819344a895d0e9219f5cc79.sol,BO3KMain,"contract BO3KMain is modularLong { using SafeMath for *; using BO3KCalcLong for uint256; address constant public Admin = 0x3ac98F5Ea4946f58439d551E20Ed12091AF0F597; uint256 constant public LEADER_FEE = 0.03 ether; uint256 private adminFee = 0; uint256 private adminRevenue = 0; uint256 private winTeamValue = 0; uint private winTeamID = 0; string constant public name = ; string constant public symbol = ; uint256 constant private DISCOUNT_PROB = 200; uint256 constant private DISCOUNT_VALUE_5PER_OFF = 50; uint256 constant private DISCOUNT_VALUE_10PER_OFF = 100; uint256 constant private DISCOUNT_VALUE_15PER_OFF = 150; uint256 constant private DENOMINATOR = 1000; uint256 constant private _nextRoundSettingTime = 1 hours; uint256 constant private _flagBuyingInterval = 30 seconds; uint256 constant private _maxDuration = 24 hours; uint256 constant private _officerCommission = 150; bool _activated = false; bool mutex = false; uint256 public roundID; uint public _teamID; BO3Kdatasets.PotSplit potSplit; BO3Kdatasets.FlagInfo Flag; mapping (uint256 => BO3Kdatasets.Team) team; mapping (uint256 => mapping (uint256 => BO3Kdatasets.TeamData) ) teamData; mapping (uint256 => BO3Kdatasets.Round) round; mapping (uint256 => mapping (address => BO3Kdatasets.Player) ) player; mapping (address => uint256) playerFlags; constructor () public { team[1] = BO3Kdatasets.Team(0, 500, 250, 150, 50, 50, 0, 0 ); team[2] = BO3Kdatasets.Team(1, 250, 500, 150, 50, 50, 0, 0 ); team[3] = BO3Kdatasets.Team(2, 375, 375, 150, 50, 50, 0, 0 ); potSplit = BO3Kdatasets.PotSplit(450, 450, 50, 50); Flag = BO3Kdatasets.FlagInfo( 10000000000000000, now ); }",1,"subgraph cluster_2291_BO3KMain {
label=""BO3KMain"";
""2291_buyCore"" [label=""buyCore""];
""2291_getTime"" [label=""getTime""];
""2291_random"" [label=""random""];
""2291_getFlagPriceByFlags"" [label=""getFlagPriceByFlags""];
""2291_getGeneral"" [label=""getGeneral""];
""2291_getAllWithdrawableRevenue"" [label=""getAllWithdrawableRevenue""];
""2291_buyFlag"" [label=""buyFlag""];
""2291_getRoundData"" [label=""getRoundData""];
""2291_getDistributedETH"" [label=""getDistributedETH""];
""2291_getFlagPrice"" [label=""getFlagPrice""];
""2291_getFlagRevenue"" [label=""getFlagRevenue""];
""2291_withdrawAdminRevenue"" [label=""withdrawAdminRevenue""];
""2291_getAllRevenue"" [label=""getAllRevenue""];
""2291_getTotalFlagAmount"" [label=""getTotalFlagAmount""];
""2291_getPot"" [label=""getPot""];
""2291_activate"" [label=""activate""];
""2291_getTeamData"" [label=""getTeamData""];
""2291_isLegalTime"" [label=""isLegalTime""];
""2291_getTeamBonus"" [label=""getTeamBonus""];
""2291_getPlayerFlagAmount"" [label=""getPlayerFlagAmount""];
""2291_getUpdatedTime"" [label=""getUpdatedTime""];
""2291_getBonus"" [label=""getBonus""];
""2291_withdraw"" [label=""withdraw""];
""2291_getTeam"" [label=""getTeam""];
""2291_getTotalEth"" [label=""getTotalEth""];
""2291_getGeneralProfit"" [label=""getGeneralProfit""];
""2291_getAdminRevenue"" [label=""getAdminRevenue""];
""2291_getIsActive"" [label=""getIsActive""];
""2291_getRemainTime"" [label=""getRemainTime""];
""2291_updateTimer"" [label=""updateTimer""];
""2291_constructor"" [label=""constructor""];
""2291_endRound"" [label=""endRound""];
""2291_becomeGeneral"" [label=""becomeGeneral""];
""2291_withdraw"" -> ""2291_getFlagRevenue"";
""2291_buyCore"" -> ""2291_random"";
""2291_getAllRevenue"" -> ""2291_getTeamBonus"";
""2291_buyFlag"" -> ""2291_isWithinLimits"";
""2291_withdraw"" -> ""2291_isLegalTime"";
""2291_buyFlag"" -> ""2291_isLegalTime"";
""2291_buyFlag"" -> ""2291_isActivated"";
""2291_buyFlag"" -> ""2291_isHuman"";
""2291_getAllWithdrawableRevenue"" -> ""2291_getFlagRevenue"";
""2291_buyFlag"" -> ""2291_buyCore"";
""2291_buyCore"" -> ""2291_isWithinLimits"";
""2291_getTime"" -> ""2291_isLegalTime"";
""2291_withdraw"" -> ""2291_isHuman"";
""2291_getAllWithdrawableRevenue"" -> ""2291_isLegalTime"";
""2291_buyFlag"" -> ""2291_updateTimer"";
""2291_withdraw"" -> ""2291_getTeamBonus"";
""2291_getRemainTime"" -> ""2291_isActivated"";
""2291_getFlagPrice"" -> ""2291_isLegalTime"";
""2291_withdraw"" -> ""2291_isActivated"";
""2291_buyFlag"" -> ""2291_endRound"";
""2291_getTeamBonus"" -> ""2291_isLegalTime"";
""2291_getAllWithdrawableRevenue"" -> ""2291_getTeamBonus"";
""2291_endRound"" -> ""2291_isActivated"";
""2291_getAllRevenue"" -> ""2291_getFlagRevenue"";
""2291_buyCore"" -> ""2291_isActivated"";
""2291_endRound"" -> ""2291_isLegalTime"";
}
"
0x845bfe096fbe3eabe473edc3953d8af1b19bbbc7.sol,IndTokenPayment,"contract IndTokenPayment is Ownable, ReentrancyGuard { IERC20Token[] public path; address public destinationWallet; uint256 public minConversionRate; IContractRegistry public bancorRegistry; bytes32 public constant BANCOR_NETWORK = ; event conversionSucceded(address from,uint256 fromTokenVal,address dest,uint256 destTokenVal); constructor(IERC20Token[] _path, address destWalletAddr, address bancorRegistryAddr, uint256 minConvRate){ path = _path; bancorRegistry = IContractRegistry(bancorRegistryAddr); destinationWallet = destWalletAddr; minConversionRate = minConvRate; }",1,"subgraph cluster_543_IndTokenPayment {
label=""IndTokenPayment"";
""543_constructor"" [label=""constructor""];
""543_convertToInd"" [label=""convertToInd""];
""543_withdrawToken"" [label=""withdrawToken""];
""543_setConversionPath"" [label=""setConversionPath""];
""543_withdrawEther"" [label=""withdrawEther""];
""543_getBancorContractAddress"" [label=""getBancorContractAddress""];
""543_fallback"" [label=""fallback""];
""543_setBancorRegistry"" [label=""setBancorRegistry""];
""543_setDestinationWallet"" [label=""setDestinationWallet""];
""543_setMinConversionRate"" [label=""setMinConversionRate""];
""543_withdrawEther"" -> ""543_onlyOwner"";
""543_fallback"" -> ""543_convertToInd"";
""543_setMinConversionRate"" -> ""543_onlyOwner"";
""543_setDestinationWallet"" -> ""543_onlyOwner"";
""543_setConversionPath"" -> ""543_onlyOwner"";
""543_convertToInd"" -> ""543_nonReentrant"";
""543_withdrawToken"" -> ""543_onlyOwner"";
""543_setBancorRegistry"" -> ""543_onlyOwner"";
""543_withdrawToken"" -> ""543_nonReentrant"";
""543_withdrawEther"" -> ""543_nonReentrant"";
}
"
0xdb1c55f6926e7d847ddf8678905ad871a68199d2.sol,FreeEth,contract FreeEth { address public Owner = msg.sender; function() public payable{},1,"subgraph cluster_90_FreeEth {
label=""FreeEth"";
""90_Command"" [label=""Command""];
""90_GetFreebie"" [label=""GetFreebie""];
""90_withdraw"" [label=""withdraw""];
""90_fallback"" [label=""fallback""];
}
"
0x38e308c4ac50fd6c31c5f53d7b25f25116d80a3a.sol,ScriniumPresale,"contract ScriniumPresale { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function ScriniumPresale() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_ScriniumPresale {
label=""ScriniumPresale"";
""401_ScriniumPresale"" [label=""ScriniumPresale""];
""401_balanceOf"" [label=""balanceOf""];
""401_killContract"" [label=""killContract""];
""401_transfer"" [label=""transfer""];
""401_changeOwner"" [label=""changeOwner""];
""401_approve"" [label=""approve""];
""401_transferFrom"" [label=""transferFrom""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_totalSupply"" [label=""totalSupply""];
""401_fallback"" [label=""fallback""];
""401_mintTo"" [label=""mintTo""];
}
"
0x5c15d6ac5db1a093ad57c383ffe11bde48b8241e.sol,PerfectCoinControl,contract PerfectCoinControl is PerfectCoin { function PerfectCoinControl() payable PerfectCoin() public {},1,"subgraph cluster_447_PerfectCoinControl {
label=""PerfectCoinControl"";
""447_killMe"" [label=""killMe""];
""447_withdraw"" [label=""withdraw""];
""447_PerfectCoinControl"" [label=""PerfectCoinControl""];
""447_killMe"" -> ""447_onlyOwner"";
""447_withdraw"" -> ""447_onlyOwner"";
""447_PerfectCoinControl"" -> ""447_PerfectCoin"";
}
"
0x5aeb706c39a76c31fa89bf726de1a6f7d6bc1a51.sol,EtherColor,"contract EtherColor is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private firstStepLimit = 0.05 ether; uint256 private secondStepLimit = 0.5 ether; mapping (uint256 => address) public colorIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public colorIndexToApproved; mapping (uint256 => uint256) private colorIndexToPrice; mapping (uint256 => uint256) private colorIndexToPreviousPrice; mapping (uint256 => address[5]) private colorIndexToPreviousOwners; address public ceoAddress; address public cooAddress; struct Color { string name; }",1,"subgraph cluster_1160_EtherColor {
label=""EtherColor"";
""1160_totalSupply"" [label=""totalSupply""];
""1160_getColor"" [label=""getColor""];
""1160_ownerOf"" [label=""ownerOf""];
""1160_purchase"" [label=""purchase""];
""1160_transferFrom"" [label=""transferFrom""];
""1160_payout"" [label=""payout""];
""1160_createContractColor"" [label=""createContractColor""];
""1160_setCOO"" [label=""setCOO""];
""1160_name"" [label=""name""];
""1160__payout"" [label=""_payout""];
""1160_EtherColor"" [label=""EtherColor""];
""1160__owns"" [label=""_owns""];
""1160_symbol"" [label=""symbol""];
""1160__transfer"" [label=""_transfer""];
""1160_implementsERC721"" [label=""implementsERC721""];
""1160_setCEO"" [label=""setCEO""];
""1160_balanceOf"" [label=""balanceOf""];
""1160_approve"" [label=""approve""];
""1160__approved"" [label=""_approved""];
""1160_tokensOfOwner"" [label=""tokensOfOwner""];
""1160__createColor"" [label=""_createColor""];
""1160_takeOwnership"" [label=""takeOwnership""];
""1160_priceOf"" [label=""priceOf""];
""1160_transfer"" [label=""transfer""];
""1160__addressNotNull"" [label=""_addressNotNull""];
""1160_takeOwnership"" -> ""1160__addressNotNull"";
""1160_transfer"" -> ""1160__owns"";
""1160_createContractColor"" -> ""1160_onlyCOO"";
""1160_takeOwnership"" -> ""1160__approved"";
""1160_transferFrom"" -> ""1160__transfer"";
""1160_transfer"" -> ""1160__addressNotNull"";
""1160_payout"" -> ""1160__payout"";
""1160_approve"" -> ""1160__owns"";
""1160_tokensOfOwner"" -> ""1160_balanceOf"";
""1160_transferFrom"" -> ""1160__owns"";
""1160__createColor"" -> ""1160__transfer"";
""1160_takeOwnership"" -> ""1160__transfer"";
""1160_setCOO"" -> ""1160_onlyCEO"";
""1160_tokensOfOwner"" -> ""1160_totalSupply"";
""1160_payout"" -> ""1160_onlyCLevel"";
""1160_createContractColor"" -> ""1160__createColor"";
""1160_purchase"" -> ""1160__addressNotNull"";
""1160_purchase"" -> ""1160__transfer"";
""1160_transferFrom"" -> ""1160__approved"";
""1160_transfer"" -> ""1160__transfer"";
""1160_transferFrom"" -> ""1160__addressNotNull"";
""1160_setCEO"" -> ""1160_onlyCEO"";
}
"
0x5b5a39a9a08725aca0f699e5cc9f6e81f95ff6d8.sol,SPACEDICE,"contract SPACEDICE is Mortal, usingNRE{ uint minBet = 1000000000000000; event Roll(bool _won, uint256 _dice1, uint256 _dice2, uint256 _roll1, uint256 _roll2, uint _amount); constructor() payable public {}",1,"subgraph cluster_376_SPACEDICE {
label=""SPACEDICE"";
""376_collect"" [label=""collect""];
""376_checkContractBalance"" [label=""checkContractBalance""];
""376_fallback"" [label=""fallback""];
""376_constructor"" [label=""constructor""];
""376_bet"" [label=""bet""];
""376_collect"" -> ""376_onlyOwner"";
""376_bet"" -> ""376_ra"";
""376_bet"" -> ""376_rx"";
}
"
0x6c1bcb34142bffd35f57db626e0ac427af616a4d.sol,EnjinBuyer,contract EnjinBuyer { mapping (address => uint256) public balances; mapping (address => uint256) public balances_after_buy; bool public bought_tokens; bool public token_set; bool public refunded; uint256 public contract_eth_value; bool public kill_switch; bytes32 password_hash = 0x8bf0720c6e610aace867eba51b03ab8ca908b665898b10faddc95a96e829539d; address public developer = 0x0639C169D9265Ca4B4DEce693764CdA8ea5F3882; address public sale = 0xc4740f71323129669424d1Ae06c42AEE99da30e2; ERC20 public token; uint256 public eth_minimum = 3235 ether; function set_token(address _token) { require(msg.sender == developer); token = ERC20(_token); token_set = true; },1,"subgraph cluster_503_EnjinBuyer {
label=""EnjinBuyer"";
""503_set_token"" [label=""set_token""];
""503_fallback"" [label=""fallback""];
""503_purchase_tokens"" [label=""purchase_tokens""];
""503_activate_kill_switch"" [label=""activate_kill_switch""];
""503_set_refunded"" [label=""set_refunded""];
""503_withdraw"" [label=""withdraw""];
""503_personal_withdraw"" [label=""personal_withdraw""];
}
"
0x70f187ea2ebcf5b94aa7819f41c92f9a9dc4c200.sol,LifePasswordAI,"contract LifePasswordAI is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 8; uint256 public constant INITIAL_SUPPLY = 680000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function LifePasswordAI() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_LifePasswordAI {
label=""LifePasswordAI"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_LifePasswordAI"" [label=""LifePasswordAI""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x8d4b2cffe2dcbbf06eaa5920401db86ca5fb8177.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1199_RefundVault {
label=""RefundVault"";
""1199_RefundVault"" [label=""RefundVault""];
""1199_refund"" [label=""refund""];
""1199_close"" [label=""close""];
""1199_enableRefunds"" [label=""enableRefunds""];
""1199_deposit"" [label=""deposit""];
""1199_enableRefunds"" -> ""1199_onlyOwner"";
""1199_deposit"" -> ""1199_onlyOwner"";
""1199_close"" -> ""1199_onlyOwner"";
}
"
0x720608228bda773fe22e816ee72463040f11c19e.sol,Presale,"contract Presale is CommonCrowdsale { uint public devLimit; uint public softcap; bool public refundOn; bool public softcapAchieved; bool public devWithdrawn; address public devWallet; address public nextSaleAgent; mapping (address => uint) public balances; function Presale() public { minInvestedLimit = 10000000000000000; price = 1000000000000000000000; bountyTokensPercent = 3; advisorsTokensPercent = 1; devTokensPercent = 4; foundersTokensPercent = 10; softcap = 20000000000000000000; hardcap = 63000000000000000000000; addBonus(7,42); addBonus(7,25); addBonus(7,11); start = 1513774800; end = 1516885200; devLimit = 7000000000000000000; wallet = 0x72EcAEB966176c50CfFc0Db53E4A2D3DbC0d538B; devWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770; bountyTokensWallet = 0x7E513B54e3a45B60d6f92c6CECE10C68977EEA8c; foundersTokensWallet = 0x4227859C5A9Bb4391Cc4735Aa655e980a3DD4380; advisorsTokensWallet = 0x6e740ef8618A7d822238F867c622373Df8B54a22; devTokensWallet = 0xCaDca9387E12F55997F46870DA28F0af1626A6d4; }",1,"subgraph cluster_1684_Presale {
label=""Presale"";
""1684_setSoftcap"" [label=""setSoftcap""];
""1684_setNextSaleAgent"" [label=""setNextSaleAgent""];
""1684_refund"" [label=""refund""];
""1684_createTokens"" [label=""createTokens""];
""1684_withdrawDev"" [label=""withdrawDev""];
""1684_setDevLimit"" [label=""setDevLimit""];
""1684_withdraw"" [label=""withdraw""];
""1684_Presale"" [label=""Presale""];
""1684_finishMinting"" [label=""finishMinting""];
""1684_setDevWallet"" [label=""setDevWallet""];
""1684_createTokens"" -> ""1684_calculateAndTransferTokens"";
""1684_setDevWallet"" -> ""1684_notLocked"";
""1684_setDevLimit"" -> ""1684_notLocked"";
""1684_setDevLimit"" -> ""1684_onlyOwner"";
""1684_setSoftcap"" -> ""1684_onlyOwner"";
""1684_setNextSaleAgent"" -> ""1684_onlyOwner"";
""1684_finishMinting"" -> ""1684_mintExtendedTokens"";
""1684_finishMinting"" -> ""1684_onlyOwner"";
""1684_Presale"" -> ""1684_addBonus"";
""1684_setDevWallet"" -> ""1684_onlyOwner"";
""1684_createTokens"" -> ""1684_saleIsOn"";
""1684_withdraw"" -> ""1684_withdrawDev"";
}
"
0x5c15d6ac5db1a093ad57c383ffe11bde48b8241e.sol,PerfectCoinControl,contract PerfectCoinControl is PerfectCoin { function PerfectCoinControl() payable PerfectCoin() public {},1,"subgraph cluster_447_PerfectCoinControl {
label=""PerfectCoinControl"";
""447_killMe"" [label=""killMe""];
""447_withdraw"" [label=""withdraw""];
""447_PerfectCoinControl"" [label=""PerfectCoinControl""];
""447_killMe"" -> ""447_onlyOwner"";
""447_withdraw"" -> ""447_onlyOwner"";
""447_PerfectCoinControl"" -> ""447_PerfectCoin"";
}
"
0x45afe0ff6a92bc9f346fc440a9d2a881d42094ff.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_1042_Destructible {
label=""Destructible"";
""1042_Destructible"" [label=""Destructible""];
""1042_destroy"" [label=""destroy""];
""1042_destroyAndSend"" [label=""destroyAndSend""];
""1042_destroy"" -> ""1042_onlyOwner"";
""1042_destroyAndSend"" -> ""1042_onlyOwner"";
}
"
0x7609a798cf9e86622364326f5d1e523a030e19b4.sol,XenoxToken,"contract XenoxToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 100000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000e18; uint public target0drop = 1000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event DistrRestarted(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1274_XenoxToken {
label=""XenoxToken"";
""1274_withdrawAll"" [label=""withdrawAll""];
""1274_withdraw"" [label=""withdraw""];
""1274_distr"" [label=""distr""];
""1274_transferOwnership"" [label=""transferOwnership""];
""1274_transfer"" [label=""transfer""];
""1274_getTokens"" [label=""getTokens""];
""1274_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1274_getTokenBalance"" [label=""getTokenBalance""];
""1274_approve"" [label=""approve""];
""1274_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1274_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1274_add"" [label=""add""];
""1274_fallback"" [label=""fallback""];
""1274_finishDistribution"" [label=""finishDistribution""];
""1274_constructor"" [label=""constructor""];
""1274_reDistribution"" [label=""reDistribution""];
""1274_balanceOf"" [label=""balanceOf""];
""1274_Distribute"" [label=""Distribute""];
""1274_transferFrom"" [label=""transferFrom""];
""1274_burn"" [label=""burn""];
""1274_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1274_allowance"" [label=""allowance""];
""1274_updateTokensPerEth"" -> ""1274_onlyOwner"";
""1274_transferFrom"" -> ""1274_onlyPayloadSize"";
""1274_reDistribution"" -> ""1274_canDistr"";
""1274_DistributeAirdropMultiple"" -> ""1274_onlyOwner"";
""1274_distr"" -> ""1274_canDistr"";
""1274_DistributeAirdrop"" -> ""1274_onlyOwner"";
""1274_add"" -> ""1274_onlyOwner"";
""1274_constructor"" -> ""1274_distr"";
""1274_transfer"" -> ""1274_onlyPayloadSize"";
""1274_fallback"" -> ""1274_getTokens"";
""1274_finishDistribution"" -> ""1274_onlyOwner"";
""1274_withdrawForeignTokens"" -> ""1274_onlyOwner"";
""1274_withdrawAll"" -> ""1274_onlyOwner"";
""1274_burn"" -> ""1274_onlyOwner"";
""1274_finishDistribution"" -> ""1274_canDistr"";
""1274_DistributeAirdropMultiple"" -> ""1274_Distribute"";
""1274_Distribute"" -> ""1274_onlyOwner"";
""1274_withdraw"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_canDistr"";
""1274_reDistribution"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_distr"";
""1274_DistributeAirdrop"" -> ""1274_Distribute"";
""1274_transferOwnership"" -> ""1274_onlyOwner"";
}
"
0xef5eb9a12981bfbcdc5648ad7852f298c091cbc5.sol,Exash,"contract Exash is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e8; uint public target0drop = 30000; uint public progress0drop = 0; address multisig = 0xCf7Ac628f8A0fa38059BF77b0134efaD8bF329A3; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Exash {
label=""Exash"";
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_Distribute"" [label=""Distribute""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_constructor"" [label=""constructor""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transfer"" [label=""transfer""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokens"" [label=""getTokens""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_add"" [label=""add""];
""1261_distr"" [label=""distr""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_allowance"" [label=""allowance""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
}
"
0x5149474fd339e95271304b5b28f6e456a24c0e25.sol,MNSPAY,"contract MNSPAY is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 210000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function MNSPAY() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_MNSPAY {
label=""MNSPAY"";
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706__transfer"" [label=""_transfer""];
""706_MNSPAY"" [label=""MNSPAY""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x006ff3494c04680cfbf39b0396054486f3f6ad32.sol,PLAY_NOW,contract PLAY_NOW { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>=1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_PLAY_NOW {
label=""PLAY_NOW"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_Try"" [label=""Try""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_SetupPlay"" [label=""SetupPlay""];
""132_newQuestioner"" [label=""newQuestioner""];
}
"
0x2992221bc5f79681635c2b490cca47cac0a2bd7c.sol,try_me,contract try_me { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_try_me {
label=""try_me"";
""143_StopGame"" [label=""StopGame""];
""143_ActivateContract"" [label=""ActivateContract""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_fallback"" [label=""fallback""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
}
"
0xc849a5fff9befa297d1c3a772bafac9f3c9004ec.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1018_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1018_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1018_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1018_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1018_constructor"" [label=""constructor""];
""1018_tokenFallback"" [label=""tokenFallback""];
""1018_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1018_depositToken"" [label=""depositToken""];
""1018_depositEther"" [label=""depositEther""];
""1018_approveToPullOutTokens"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1018_onlyOwner"";
""1018_distributeTokenToAddressesAndAmounts"" -> ""1018_onlyOwner"";
""1018_distributeWithTransferFrom"" -> ""1018_onlyOwner"";
""1018_tokenFallback"" -> ""1018_whenNotPaused"";
""1018_depositEther"" -> ""1018_whenNotPaused"";
""1018_depositToken"" -> ""1018_whenNotPaused"";
""1018_distributeTokenToAddress"" -> ""1018_onlyOwner"";
}
"
0xeb62b8c5c4f0f5d59a7f060554c13e8f38f4de9f.sol,HODL,contract HODL { address hodl = msg.sender; function() external payable {},1,"subgraph cluster_47_HODL {
label=""HODL"";
""47_get"" [label=""get""];
""47_end"" [label=""end""];
""47_fallback"" [label=""fallback""];
}
"
0xecec76db2f65a2669437b2bca5703c7e07b8d12a.sol,play_with_me,contract play_with_me { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_play_with_me {
label=""play_with_me"";
""143_NewQuestion"" [label=""NewQuestion""];
""143_fallback"" [label=""fallback""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Activate"" [label=""Activate""];
""143_StopGame"" [label=""StopGame""];
""143_Try"" [label=""Try""];
}
"
0x56609c7dcb32cbedf7c5896cbb29b227bf4ec6a1.sol,EFTCrowdsale,contract EFTCrowdsale { Token public tokenReward; address public creator; address public owner = 0x515C1c5bA34880Bc00937B4a483E026b0956B364; uint256 public price; uint256 public startDate; uint256 public endDate; modifier isCreator() { require(msg.sender == creator); _; },1,"subgraph cluster_301_EFTCrowdsale {
label=""EFTCrowdsale"";
""301_setPrice"" [label=""setPrice""];
""301_setOwner"" [label=""setOwner""];
""301_setStartDate"" [label=""setStartDate""];
""301_EFTCrowdsale"" [label=""EFTCrowdsale""];
""301_setCreator"" [label=""setCreator""];
""301_setEndtDate"" [label=""setEndtDate""];
""301_kill"" [label=""kill""];
""301_fallback"" [label=""fallback""];
""301_setToken"" [label=""setToken""];
""301_sendToken"" [label=""sendToken""];
""301_setPrice"" -> ""301_isCreator"";
""301_sendToken"" -> ""301_isCreator"";
""301_setEndtDate"" -> ""301_isCreator"";
""301_setOwner"" -> ""301_isCreator"";
""301_setCreator"" -> ""301_isCreator"";
""301_setStartDate"" -> ""301_isCreator"";
""301_kill"" -> ""301_isCreator"";
""301_setToken"" -> ""301_isCreator"";
}
"
0x2ada0cddb716033e52c3d591ad12a59103230e52.sol,SGEICO,contract SGEICO { Token public tokenReward; address public creator; address public owner = 0x8dfFcCE1d47C6325340712AB1B8fD7328075730C; uint256 public price; uint256 public startDate; uint256 public endDate; modifier isCreator() { require(msg.sender == creator); _; },1,"subgraph cluster_218_SGEICO {
label=""SGEICO"";
""218_fallback"" [label=""fallback""];
""218_setStartDate"" [label=""setStartDate""];
""218_kill"" [label=""kill""];
""218_setToken"" [label=""setToken""];
""218_setPrice"" [label=""setPrice""];
""218_setOwner"" [label=""setOwner""];
""218_setCreator"" [label=""setCreator""];
""218_setEndtDate"" [label=""setEndtDate""];
""218_constructor"" [label=""constructor""];
""218_setStartDate"" -> ""218_isCreator"";
""218_setOwner"" -> ""218_isCreator"";
""218_setCreator"" -> ""218_isCreator"";
""218_setToken"" -> ""218_isCreator"";
""218_kill"" -> ""218_isCreator"";
""218_setEndtDate"" -> ""218_isCreator"";
""218_setPrice"" -> ""218_isCreator"";
}
"
0xf4f5271c9d6f23cc00f93625b502f88d289a1607.sol,WithdrawConfirmation,"contract WithdrawConfirmation is Owned { event Confirmation(address indexed sender, uint indexed withdrawId); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event WithdrawCreated(address indexed destination, uint indexed value, uint indexed id); event Execution(uint indexed withdrawId); event ExecutionFailure(uint indexed withdrawId); mapping(address => bool) public isOwner; mapping(uint => Withdraw) public withdraws; mapping(uint => mapping(address => bool)) public confirmations; address[] public owners; uint public withdrawCount; struct Withdraw { address destination; uint value; bool executed; }",1,"subgraph cluster_657_WithdrawConfirmation {
label=""WithdrawConfirmation"";
""657_createWithdraw"" [label=""createWithdraw""];
""657_constructor"" [label=""constructor""];
""657_addOwner"" [label=""addOwner""];
""657_removeOwner"" [label=""removeOwner""];
""657_executeWithdraw"" [label=""executeWithdraw""];
""657_isConfirmed"" [label=""isConfirmed""];
""657_confirmWithdraw"" [label=""confirmWithdraw""];
""657_createWithdraw"" -> ""657_notNull"";
""657_executeWithdraw"" -> ""657_confirmed"";
""657_confirmWithdraw"" -> ""657_executeWithdraw"";
""657_createWithdraw"" -> ""657_ownerExists"";
""657_confirmWithdraw"" -> ""657_notConfirmed"";
""657_removeOwner"" -> ""657_ownerExists"";
""657_createWithdraw"" -> ""657_executeWithdraw"";
""657_confirmWithdraw"" -> ""657_withdrawExists"";
""657_executeWithdraw"" -> ""657_isConfirmed"";
""657_executeWithdraw"" -> ""657_notExecuted"";
""657_addOwner"" -> ""657_hasPermission"";
""657_confirmWithdraw"" -> ""657_ownerExists"";
""657_executeWithdraw"" -> ""657_ownerExists"";
""657_removeOwner"" -> ""657_hasPermission"";
""657_addOwner"" -> ""657_ownerDoesNotExist"";
}
"
0xd1ceeeef70c61da45800bd81be3352160ad72f2a.sol,Dice2Win,"contract Dice2Win { uint256 constant JACKPOT_MODULO = 1000; uint256 constant HOUSE_EDGE_PERCENT = 2; uint256 constant JACKPOT_FEE_PERCENT = 50; uint256 constant MIN_BET = 0.02 ether; uint256 constant MIN_JACKPOT_BET = 0.1 ether; uint256 constant BLOCK_DELAY = 2; uint256 constant BET_EXPIRATION_BLOCKS = 100; address public owner; address public nextOwner; uint256 public maxBetCoinDice; uint256 public maxBetDoubleDice; uint128 public jackpotSize; uint128 public lockedInBets; enum GameId { CoinFlip, SingleDice, DoubleDice, MaxGameId }",1,"subgraph cluster_833_Dice2Win {
label=""Dice2Win"";
""833_refundBet"" [label=""refundBet""];
""833_getDiceWinAmount"" [label=""getDiceWinAmount""];
""833_changeMaxBetDoubleDice"" [label=""changeMaxBetDoubleDice""];
""833_approveNextOwner"" [label=""approveNextOwner""];
""833_sendFunds"" [label=""sendFunds""];
""833_changeMaxBetCoinDice"" [label=""changeMaxBetCoinDice""];
""833_getRollUnder"" [label=""getRollUnder""];
""833_getMaxBet"" [label=""getMaxBet""];
""833_constructor"" [label=""constructor""];
""833_getRollModulo"" [label=""getRollModulo""];
""833_placeBet"" [label=""placeBet""];
""833_acceptNextOwner"" [label=""acceptNextOwner""];
""833_getJackpotFee"" [label=""getJackpotFee""];
""833_settleBet"" [label=""settleBet""];
""833_kill"" [label=""kill""];
""833_withdrawFunds"" [label=""withdrawFunds""];
""833_fallback"" [label=""fallback""];
""833_increaseJackpot"" [label=""increaseJackpot""];
""833_placeBet"" -> ""833_getMaxBet"";
""833_settleBet"" -> ""833_getRollUnder"";
""833_placeBet"" -> ""833_getRollModulo"";
""833_settleBet"" -> ""833_getDiceWinAmount"";
""833_changeMaxBetDoubleDice"" -> ""833_onlyOwner"";
""833_withdrawFunds"" -> ""833_sendFunds"";
""833_settleBet"" -> ""833_getRollModulo"";
""833_increaseJackpot"" -> ""833_onlyOwner"";
""833_withdrawFunds"" -> ""833_onlyOwner"";
""833_placeBet"" -> ""833_getDiceWinAmount"";
""833_placeBet"" -> ""833_getJackpotFee"";
""833_approveNextOwner"" -> ""833_onlyOwner"";
""833_refundBet"" -> ""833_getRollUnder"";
""833_changeMaxBetCoinDice"" -> ""833_onlyOwner"";
""833_placeBet"" -> ""833_getRollUnder"";
""833_settleBet"" -> ""833_sendFunds"";
""833_kill"" -> ""833_onlyOwner"";
""833_refundBet"" -> ""833_getDiceWinAmount"";
""833_refundBet"" -> ""833_sendFunds"";
""833_refundBet"" -> ""833_getRollModulo"";
}
"
0x55ae5792903b179915e10065e26610435832a3f7.sol,CofounditICO,"contract CofounditICO is owned{ uint256 public startBlock; uint256 public endBlock; uint256 public minEthToRaise; uint256 public maxEthToRaise; uint256 public totalEthRaised; address public multisigAddress; uint256 public icoSupply; uint256 public strategicReserveSupply; uint256 public cashilaTokenSupply; uint256 public iconomiTokenSupply; uint256 public coreTeamTokenSupply; ICofounditToken cofounditTokenContract; mapping (address => bool) presaleContributorAllowance; uint256 nextFreeParticipantIndex; mapping (uint => address) participantIndex; mapping (address => uint256) participantContribution; uint256 usedIcoSupply; uint256 usedStrategicReserveSupply; uint256 usedCashilaTokenSupply; uint256 usedIconomiTokenSupply; uint256 usedCoreTeamTokenSupply; bool icoHasStarted; bool minTresholdReached; bool icoHasSucessfulyEnded; uint256 lastEthReturnIndex; mapping (address => bool) hasClaimedEthWhenFail; uint256 lastCfiIssuanceIndex; string icoStartedMessage = ; string icoMinTresholdReachedMessage = ; string icoEndedSuccessfulyMessage = ; string icoEndedSuccessfulyWithCapMessage = ; string icoFailedMessage = ; event ICOStarted(uint256 _blockNumber, string _message); event ICOMinTresholdReached(uint256 _blockNumber, string _message); event ICOEndedSuccessfuly(uint256 _blockNumber, uint256 _amountRaised, string _message); event ICOFailed(uint256 _blockNumber, uint256 _ammountRaised, string _message); event ErrorSendingETH(address _from, uint256 _amount); function CofounditICO(uint256 _startBlock, uint256 _endBlock, address _multisigAddress) { startBlock = _startBlock; endBlock = _endBlock; minEthToRaise = 4525 * 10**18; maxEthToRaise = 56565 * 10**18; multisigAddress = _multisigAddress; icoSupply = 125000000 * 10**18; strategicReserveSupply = 125000000 * 10**18; cashilaTokenSupply = 100000000 * 10**18; iconomiTokenSupply = 50000000 * 10**18; coreTeamTokenSupply = 100000000 * 10**18; }",1,"subgraph cluster_976_CofounditICO {
label=""CofounditICO"";
""976_claimEthIfFailed"" [label=""claimEthIfFailed""];
""976_fallback"" [label=""fallback""];
""976_batchIssueTokens"" [label=""batchIssueTokens""];
""976_withdrawEth"" [label=""withdrawEth""];
""976_icoInProgress"" [label=""icoInProgress""];
""976_participantContributionInEth"" [label=""participantContributionInEth""];
""976_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""976_removePresaleContributor"" [label=""removePresaleContributor""];
""976_getCofounditTokenAddress"" [label=""getCofounditTokenAddress""];
""976_CofounditICO"" [label=""CofounditICO""];
""976_getCfiEstimation"" [label=""getCfiEstimation""];
""976_claimReservedTokens"" [label=""claimReservedTokens""];
""976_addPresaleContributors"" [label=""addPresaleContributors""];
""976_isAddressAllowedInPresale"" [label=""isAddressAllowedInPresale""];
""976_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""976_setTokenContract"" [label=""setTokenContract""];
""976_changeMultisigAddress"" [label=""changeMultisigAddress""];
""976_claimReservedTokens"" -> ""976_onlyOwner"";
""976_removePresaleContributor"" -> ""976_onlyOwner"";
""976_withdrawRemainingBalanceForManualRecovery"" -> ""976_onlyOwner"";
""976_addPresaleContributors"" -> ""976_onlyOwner"";
""976_changeMultisigAddress"" -> ""976_onlyOwner"";
""976_withdrawEth"" -> ""976_onlyOwner"";
""976_batchIssueTokens"" -> ""976_onlyOwner"";
""976_batchReturnEthIfFailed"" -> ""976_onlyOwner"";
""976_setTokenContract"" -> ""976_onlyOwner"";
}
"
0x70ab487ec48b4b9571d346348da0f10737d48a54.sol,PredictionHandshake,contract PredictionHandshake { struct Market { address creator; uint fee; bytes32 source; uint closingTime; uint reportTime; uint disputeTime; uint state; uint outcome; uint totalMatchedStake; uint totalOpenStake; uint disputeMatchedStake; bool resolved; mapping(uint => uint) outcomeMatchedStake; mapping(address => mapping(uint => Order)) open; mapping(address => mapping(uint => Order)) matched; mapping(address => bool) disputed; },1,"subgraph cluster_2253_PredictionHandshake {
label=""PredictionHandshake"";
""2253__createMarket"" [label=""_createMarket""];
""2253_report"" [label=""report""];
""2253_disputeTestDrive"" [label=""disputeTestDrive""];
""2253_shake"" [label=""shake""];
""2253__shake"" [label=""_shake""];
""2253_collectTestDrive"" [label=""collectTestDrive""];
""2253_createMarketForShurikenUser"" [label=""createMarketForShurikenUser""];
""2253__collect"" [label=""_collect""];
""2253__dispute"" [label=""_dispute""];
""2253_initTestDrive"" [label=""initTestDrive""];
""2253_collect"" [label=""collect""];
""2253_resolve"" [label=""resolve""];
""2253_uninitTestDrive"" [label=""uninitTestDrive""];
""2253_getMatchedData"" [label=""getMatchedData""];
""2253_constructor"" [label=""constructor""];
""2253_uninit"" [label=""uninit""];
""2253_withdrawTrial"" [label=""withdrawTrial""];
""2253_dispute"" [label=""dispute""];
""2253_getOpenData"" [label=""getOpenData""];
""2253_init"" [label=""init""];
""2253_shakeTestDrive"" [label=""shakeTestDrive""];
""2253_refund"" [label=""refund""];
""2253__init"" [label=""_init""];
""2253_createMarket"" [label=""createMarket""];
""2253_withdrawTrial"" -> ""2253_onlyRoot"";
""2253_dispute"" -> ""2253_onlyPredictor"";
""2253_dispute"" -> ""2253__dispute"";
""2253_collectTestDrive"" -> ""2253__collect"";
""2253_shakeTestDrive"" -> ""2253_onlyRoot"";
""2253_collect"" -> ""2253__collect"";
""2253_resolve"" -> ""2253_onlyRoot"";
""2253_createMarket"" -> ""2253__createMarket"";
""2253_collectTestDrive"" -> ""2253_onlyRoot"";
""2253_getOpenData"" -> ""2253_onlyRoot"";
""2253_init"" -> ""2253__init"";
""2253_refund"" -> ""2253_onlyPredictor"";
""2253_shakeTestDrive"" -> ""2253__shake"";
""2253_disputeTestDrive"" -> ""2253_onlyRoot"";
""2253_uninit"" -> ""2253_onlyPredictor"";
""2253_getMatchedData"" -> ""2253_onlyRoot"";
""2253_createMarketForShurikenUser"" -> ""2253__createMarket"";
""2253_disputeTestDrive"" -> ""2253__dispute"";
""2253_initTestDrive"" -> ""2253_onlyRoot"";
""2253_createMarketForShurikenUser"" -> ""2253_onlyRoot"";
""2253_uninitTestDrive"" -> ""2253_onlyRoot"";
""2253_shake"" -> ""2253__shake"";
""2253_initTestDrive"" -> ""2253__init"";
""2253_collect"" -> ""2253_onlyPredictor"";
}
"
0xda830afa460526071d3d149e898fead664f0a4bb.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1315_MiniMeToken {
label=""MiniMeToken"";
""1315_allowance"" [label=""allowance""];
""1315_doTransfer"" [label=""doTransfer""];
""1315_updateValueAtNow"" [label=""updateValueAtNow""];
""1315_fallback"" [label=""fallback""];
""1315_isContract"" [label=""isContract""];
""1315_transferFrom"" [label=""transferFrom""];
""1315_approveAndCall"" [label=""approveAndCall""];
""1315_transfer"" [label=""transfer""];
""1315_MiniMeToken"" [label=""MiniMeToken""];
""1315_approve"" [label=""approve""];
""1315_getValueAt"" [label=""getValueAt""];
""1315_balanceOfAt"" [label=""balanceOfAt""];
""1315_balanceOf"" [label=""balanceOf""];
""1315_createCloneToken"" [label=""createCloneToken""];
""1315_destroyTokens"" [label=""destroyTokens""];
""1315_claimTokens"" [label=""claimTokens""];
""1315_totalSupply"" [label=""totalSupply""];
""1315_generateTokens"" [label=""generateTokens""];
""1315_min"" [label=""min""];
""1315_enableTransfers"" [label=""enableTransfers""];
""1315_totalSupplyAt"" [label=""totalSupplyAt""];
""1315_balanceOfAt"" -> ""1315_min"";
""1315_totalSupply"" -> ""1315_totalSupplyAt"";
""1315_generateTokens"" -> ""1315_balanceOf"";
""1315_doTransfer"" -> ""1315_isContract"";
""1315_approveAndCall"" -> ""1315_approve"";
""1315_totalSupplyAt"" -> ""1315_getValueAt"";
""1315_doTransfer"" -> ""1315_updateValueAtNow"";
""1315_generateTokens"" -> ""1315_onlyController"";
""1315_generateTokens"" -> ""1315_totalSupply"";
""1315_generateTokens"" -> ""1315_updateValueAtNow"";
""1315_balanceOf"" -> ""1315_balanceOfAt"";
""1315_enableTransfers"" -> ""1315_onlyController"";
""1315_destroyTokens"" -> ""1315_totalSupply"";
""1315_transfer"" -> ""1315_doTransfer"";
""1315_doTransfer"" -> ""1315_balanceOfAt"";
""1315_destroyTokens"" -> ""1315_onlyController"";
""1315_fallback"" -> ""1315_isContract"";
""1315_approve"" -> ""1315_isContract"";
""1315_balanceOfAt"" -> ""1315_getValueAt"";
""1315_transferFrom"" -> ""1315_doTransfer"";
""1315_destroyTokens"" -> ""1315_balanceOf"";
""1315_totalSupplyAt"" -> ""1315_min"";
""1315_claimTokens"" -> ""1315_onlyController"";
""1315_destroyTokens"" -> ""1315_updateValueAtNow"";
}
"
0x50a667b73223bc612bcc43200120b5c46ee6b4e9.sol,RCpro,"contract RCpro is ICOEngineInterface, KYCBase { using SafeMath for uint256; TokenSale tokenSaleContract; uint256 public startTime; uint256 public endTime; uint256 public etherMinimum; uint256 public soldTokens; uint256 public remainingTokens; uint256[] public oneTokenInFiatWei; uint256[] public sendThreshold; mapping(address => uint256) public etherUser; mapping(address => uint256) public pendingTokenUser; mapping(address => uint256) public tokenUser; uint256[] public tokenThreshold; uint256[] public bonusThreshold; function RCpro(address _tokenSaleContract, uint256[] _oneTokenInFiatWei, uint256[] _sendThreshold, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) { require ( _tokenSaleContract != 0 ); require ( _oneTokenInFiatWei[0] != 0 ); require ( _oneTokenInFiatWei.length == _sendThreshold.length ); require( _remainingTokens != 0 ); require ( _tokenThreshold.length != 0 ); require ( _tokenThreshold.length == _bonusThreshold.length ); bonusThreshold = _bonusThreshold; tokenThreshold = _tokenThreshold; tokenSaleContract = TokenSale(_tokenSaleContract); tokenSaleContract.addMeByRC(); soldTokens = 0; remainingTokens = _remainingTokens; oneTokenInFiatWei = _oneTokenInFiatWei; sendThreshold = _sendThreshold; etherMinimum = _etherMinimum; setTimeRC( _startTime, _endTime ); }",1,"subgraph cluster_1999_RCpro {
label=""RCpro"";
""1999_changeMinimum"" [label=""changeMinimum""];
""1999_totalTokens"" [label=""totalTokens""];
""1999_price"" [label=""price""];
""1999_userBalance"" [label=""userBalance""];
""1999_claimTokenBonus"" [label=""claimTokenBonus""];
""1999_startTime"" [label=""startTime""];
""1999_ended"" [label=""ended""];
""1999_fallback"" [label=""fallback""];
""1999_endTime"" [label=""endTime""];
""1999_giveToken"" [label=""giveToken""];
""1999_releaseTokensTo"" [label=""releaseTokensTo""];
""1999_withdraw"" [label=""withdraw""];
""1999_takeEther"" [label=""takeEther""];
""1999_refundEther"" [label=""refundEther""];
""1999_setTime"" [label=""setTime""];
""1999_setTimeRC"" [label=""setTimeRC""];
""1999_remainingTokens"" [label=""remainingTokens""];
""1999_started"" [label=""started""];
""1999_RCpro"" [label=""RCpro""];
""1999_RCpro"" -> ""1999_KYCBase"";
""1999_releaseTokensTo"" -> ""1999_takeEther"";
""1999_refundEther"" -> ""1999_onlyTokenSaleOwner"";
""1999_releaseTokensTo"" -> ""1999_giveToken"";
""1999_fallback"" -> ""1999_claimTokenBonus"";
""1999_changeMinimum"" -> ""1999_onlyTokenSaleOwner"";
""1999_fallback"" -> ""1999_takeEther"";
""1999_setTime"" -> ""1999_onlyTokenSaleOwner"";
""1999_withdraw"" -> ""1999_onlyTokenSaleOwner"";
""1999_RCpro"" -> ""1999_setTimeRC"";
}
"
0x39de38ba63d172b962db2fc2ee5e4376287c50bf.sol,ImmlaIco,"contract ImmlaIco is SafeMath { ImmlaToken public immlaToken; AbstractToken public preIcoToken; address public escrow; address public icoManager; address public tokenImporter = 0x0; address public founder1; address public founder2; address public founder3; address public team; address public bountyOwner; uint public constant teamsReward = 38548226701232220000000000; uint public constant bountyOwnersTokens = 9361712198870680000000000; uint constant BASE = 1000000000000000000; uint public constant defaultIcoStart = 1505422800; uint public icoStart = defaultIcoStart; uint public constant defaultIcoDeadline = 1508101200; uint public icoDeadline = defaultIcoDeadline; uint public constant defaultFoundersRewardTime = 1521061200; uint public foundersRewardTime = defaultFoundersRewardTime; uint public constant minIcoTokenLimit = 18000000 * BASE; uint public constant maxIcoTokenLimit = 434477177 * BASE; uint public importedTokens = 0; uint public soldTokensOnIco = 0; uint public constant soldTokensOnPreIco = 13232941687168431951684000; uint tokenPrice1 = 3640; uint tokenSupply1 = 170053520 * BASE; uint tokenPrice2 = 3549; uint tokenSupply2 = 103725856 * BASE; uint tokenPrice3 = 3458; uint tokenSupply3 = 100319718 * BASE; uint tokenPrice4 = 3367; uint tokenSupply4 = 60378083 * BASE; uint[] public tokenPrices; uint[] public tokenSupplies; bool public initialized = false; bool public migrated = false; bool public sentTokensToFounders = false; bool public icoStoppedManually = false; mapping (address => uint) public balances; event BuyTokens(address buyer, uint value, uint amount); event WithdrawEther(); event StopIcoManually(); event SendTokensToFounders(uint founder1Reward, uint founder2Reward, uint founder3Reward); event ReturnFundsFor(address account); modifier whenInitialized() { require(initialized); _; }",1,"subgraph cluster_1538_ImmlaIco {
label=""ImmlaIco"";
""1538_countTokens"" [label=""countTokens""];
""1538_setNewTokenImporter"" [label=""setNewTokenImporter""];
""1538_fallback"" [label=""fallback""];
""1538_removeTokens"" [label=""removeTokens""];
""1538_stopIco"" [label=""stopIco""];
""1538_ImmlaIco"" [label=""ImmlaIco""];
""1538_setNewManager"" [label=""setNewManager""];
""1538_buyTokens"" [label=""buyTokens""];
""1538_setStateMigrated"" [label=""setStateMigrated""];
""1538_sendTokensToFounders"" [label=""sendTokensToFounders""];
""1538_importTokens"" [label=""importTokens""];
""1538_burnTokens"" [label=""burnTokens""];
""1538_returnFundsFor"" [label=""returnFundsFor""];
""1538_withdrawEther"" [label=""withdrawEther""];
""1538_init"" [label=""init""];
""1538_importTokens"" -> ""1538_add"";
""1538_removeTokens"" -> ""1538_sub"";
""1538_buyTokens"" -> ""1538_add"";
""1538_init"" -> ""1538_onlyManager"";
""1538_withdrawEther"" -> ""1538_onGoalAchievedOrDeadline"";
""1538_sendTokensToFounders"" -> ""1538_add"";
""1538_sendTokensToFounders"" -> ""1538_whenInitialized"";
""1538_returnFundsFor"" -> ""1538_onGoalAchievedOrDeadline"";
""1538_fallback"" -> ""1538_onIcoRunning"";
""1538_sendTokensToFounders"" -> ""1538_onlyManager"";
""1538_buyTokens"" -> ""1538_countTokens"";
""1538_setStateMigrated"" -> ""1538_onlyManager"";
""1538_stopIco"" -> ""1538_onlyManager"";
""1538_sendTokensToFounders"" -> ""1538_mulByFraction"";
""1538_burnTokens"" -> ""1538_notMigrated"";
""1538_countTokens"" -> ""1538_div"";
""1538_countTokens"" -> ""1538_sub"";
""1538_buyTokens"" -> ""1538_removeTokens"";
""1538_setNewManager"" -> ""1538_onlyManager"";
""1538_setNewTokenImporter"" -> ""1538_onlyManager"";
""1538_countTokens"" -> ""1538_add"";
""1538_fallback"" -> ""1538_buyTokens"";
""1538_burnTokens"" -> ""1538_onlyManager"";
""1538_withdrawEther"" -> ""1538_returnFundsFor"";
}
"
0x4c7c98c4d64c29ef8103b005eeccf5145cfdf8c1.sol,Savings,"contract Savings is Ownable { address public Owner; mapping (address => uint) public deposits; uint public openDate; event Initialized(address indexed Owner, uint OpenDate); event Deposit(address indexed Depositor, uint Amount); event Withdrawal(address indexed Withdrawer, uint Amount); function init(uint open) payable { Owner = msg.sender; openDate = open; Initialized(Owner, open); }",1,"subgraph cluster_162_Savings {
label=""Savings"";
""162_init"" [label=""init""];
""162_kill"" [label=""kill""];
""162_fallback"" [label=""fallback""];
""162_deposit"" [label=""deposit""];
""162_withdraw"" [label=""withdraw""];
""162_fallback"" -> ""162_deposit"";
""162_kill"" -> ""162_isOwner"";
""162_withdraw"" -> ""162_isOwner"";
}
"
0xd587cb111d3e506ffafdf4b1c5d19008086c4e5a.sol,IartistChain,"contract IartistChain is owned, TokenERC20 { uint256 INITIAL_SUPPLY =500000000; uint256 public buyPrice = 1; event FrozenFunds(address target, bool frozen); function IartistChain(uint256 initialSupply, string tokenName, string tokenSymbol) TokenERC20(INITIAL_SUPPLY, , ) payable { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_572_IartistChain {
label=""IartistChain"";
""572__transfer"" [label=""_transfer""];
""572_IartistChain"" [label=""IartistChain""];
""572_selfdestructs"" [label=""selfdestructs""];
""572_fallback"" [label=""fallback""];
""572_setPrices"" [label=""setPrices""];
""572_buy"" [label=""buy""];
""572_buy"" -> ""572__transfer"";
""572_selfdestructs"" -> ""572_onlyOwner"";
""572_IartistChain"" -> ""572_TokenERC20"";
""572_setPrices"" -> ""572_onlyOwner"";
""572_fallback"" -> ""572__transfer"";
}
"
0xbf2000b42c1ba2eb9e5163a0b7e2fe987ed124b4.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_processTransaction"" [label=""processTransaction""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_pullBalance"" [label=""pullBalance""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_fallback"" -> ""928_refundTransaction"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_processTransaction"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
}
"
0xef5eb9a12981bfbcdc5648ad7852f298c091cbc5.sol,Exash,"contract Exash is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e8; uint public target0drop = 30000; uint public progress0drop = 0; address multisig = 0xCf7Ac628f8A0fa38059BF77b0134efaD8bF329A3; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Exash {
label=""Exash"";
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_Distribute"" [label=""Distribute""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_constructor"" [label=""constructor""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transfer"" [label=""transfer""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokens"" [label=""getTokens""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_add"" [label=""add""];
""1261_distr"" [label=""distr""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_allowance"" [label=""allowance""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,HelloGoldSale,"contract HelloGoldSale is Pausable, SafeMath { uint256 public decimals = 8; uint256 public startDate = 1503892800; uint256 public endDate = 1504497600; uint256 tranchePeriod = 1 weeks; HelloGoldToken token; uint256 constant MaxCoinsR1 = 80 * 10**6 * 10**8; uint256 public coinsRemaining = 80 * 10**6 * 10**8; uint256 coinsPerTier = 16 * 10**6 * 10**8; uint256 public coinsLeftInTier = 16 * 10**6 * 10**8; uint256 public minimumCap = 0; uint256 numTiers = 5; uint16 public tierNo; uint256 public preallocCoins; uint256 public purchasedCoins; uint256 public ethRaised; uint256 public personalMax = 10 ether; uint256 public contributors; address public cs; address public multiSig; address public HGT_Reserve; struct csAction { bool passedKYC; bool blocked; }",1,"subgraph cluster_3276_HelloGoldSale {
label=""HelloGoldSale"";
""3276_coinAddress"" [label=""coinAddress""];
""3276_when"" [label=""when""];
""3276_setHgtRates"" [label=""setHgtRates""];
""3276_funding"" [label=""funding""];
""3276_block"" [label=""block""];
""3276_success"" [label=""success""];
""3276_fallback"" [label=""fallback""];
""3276_HelloGoldSale"" [label=""HelloGoldSale""];
""3276_createTokens"" [label=""createTokens""];
""3276_withdraw"" [label=""withdraw""];
""3276_allocatedTokens"" [label=""allocatedTokens""];
""3276_approve"" [label=""approve""];
""3276_setPeriod"" [label=""setPeriod""];
""3276_linkCoin"" [label=""linkCoin""];
""3276_complete"" [label=""complete""];
""3276_newCs"" [label=""newCs""];
""3276_failed"" [label=""failed""];
""3276_unblock"" [label=""unblock""];
""3276_setStart"" [label=""setStart""];
""3276_createTokens"" -> ""3276_funding"";
""3276_allocatedTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_success"";
""3276_allocatedTokens"" -> ""3276_safeAdd"";
""3276_createTokens"" -> ""3276_safeDiv"";
""3276_fallback"" -> ""3276_createTokens"";
""3276_linkCoin"" -> ""3276_onlyOwner"";
""3276_approve"" -> ""3276_MustBeCs"";
""3276_unblock"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_min256"";
""3276_setHgtRates"" -> ""3276_onlyOwner"";
""3276_allocatedTokens"" -> ""3276_onlyOwner"";
""3276_withdraw"" -> ""3276_failed"";
""3276_newCs"" -> ""3276_onlyOwner"";
""3276_setPeriod"" -> ""3276_funding"";
""3276_setStart"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeAdd"";
""3276_fallback"" -> ""3276_whenNotPaused"";
""3276_setPeriod"" -> ""3276_onlyOwner"";
""3276_block"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeMul"";
""3276_fallback"" -> ""3276_MustBeEnabled"";
}
"
0x54d445898cbafb7cf48597e495251183207767ae.sol,FasterProfit,contract FasterProfit { address constant private PROMO = 0xA93c13B3E3561e5e2A1a20239486D03A16d1Fc4b; uint constant public MULTIPLIER = 110; uint constant public MAX_DEPOSIT = 1 ether; uint public currentReceiverIndex = 0; uint public MIN_DEPOSIT = 0.01 ether; uint public txnCount = 0; uint private PROMO_PERCENT = 0; uint constant public LAST_DEPOSIT_PERCENT = 20; LastDeposit public last; struct Deposit { address depositor; uint128 deposit; uint128 expect; },1,"subgraph cluster_598_FasterProfit {
label=""FasterProfit"";
""598_fallback"" [label=""fallback""];
""598_getDepositsCount"" [label=""getDepositsCount""];
""598_getDeposit"" [label=""getDeposit""];
""598_pay"" [label=""pay""];
""598_getDeposits"" [label=""getDeposits""];
""598_getQueueLength"" [label=""getQueueLength""];
""598_fallback"" -> ""598_pay"";
""598_getDeposits"" -> ""598_getDepositsCount"";
}
"
0x3008a6c26e54399fd0ece8fd2e5e06b3d807509c.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_369_AccessService {
label=""AccessService"";
""369_setFinance"" [label=""setFinance""];
""369_withdraw"" [label=""withdraw""];
""369_setService"" [label=""setService""];
}
"
0x5a757fb240ac70dbead4f9e1508f24a91da70ee5.sol,SilentToken,"contract SilentToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 30 * 1 days; uint public round1 = now + 20 * 1 days; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e8; uint public target0drop = 2500; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event DistrRestarted(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1274_SilentToken {
label=""SilentToken"";
""1274_transfer"" [label=""transfer""];
""1274_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1274_fallback"" [label=""fallback""];
""1274_finishDistribution"" [label=""finishDistribution""];
""1274_withdraw"" [label=""withdraw""];
""1274_transferOwnership"" [label=""transferOwnership""];
""1274_getTokens"" [label=""getTokens""];
""1274_reDistribution"" [label=""reDistribution""];
""1274_transferFrom"" [label=""transferFrom""];
""1274_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1274_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1274_approve"" [label=""approve""];
""1274_balanceOf"" [label=""balanceOf""];
""1274_distr"" [label=""distr""];
""1274_constructor"" [label=""constructor""];
""1274_burn"" [label=""burn""];
""1274_Distribute"" [label=""Distribute""];
""1274_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1274_add"" [label=""add""];
""1274_allowance"" [label=""allowance""];
""1274_getTokenBalance"" [label=""getTokenBalance""];
""1274_withdrawAll"" [label=""withdrawAll""];
""1274_getTokens"" -> ""1274_distr"";
""1274_fallback"" -> ""1274_getTokens"";
""1274_finishDistribution"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_canDistr"";
""1274_withdrawAll"" -> ""1274_onlyOwner"";
""1274_add"" -> ""1274_onlyOwner"";
""1274_DistributeAirdropMultiple"" -> ""1274_Distribute"";
""1274_DistributeAirdropMultiple"" -> ""1274_onlyOwner"";
""1274_burn"" -> ""1274_onlyOwner"";
""1274_transferFrom"" -> ""1274_onlyPayloadSize"";
""1274_DistributeAirdrop"" -> ""1274_onlyOwner"";
""1274_transfer"" -> ""1274_onlyPayloadSize"";
""1274_finishDistribution"" -> ""1274_canDistr"";
""1274_reDistribution"" -> ""1274_onlyOwner"";
""1274_DistributeAirdrop"" -> ""1274_Distribute"";
""1274_transferOwnership"" -> ""1274_onlyOwner"";
""1274_withdrawForeignTokens"" -> ""1274_onlyOwner"";
""1274_constructor"" -> ""1274_distr"";
""1274_Distribute"" -> ""1274_onlyOwner"";
""1274_reDistribution"" -> ""1274_canDistr"";
""1274_distr"" -> ""1274_canDistr"";
""1274_withdraw"" -> ""1274_onlyOwner"";
""1274_updateTokensPerEth"" -> ""1274_onlyOwner"";
}
"
0x27369e8f43f44c26853a46da7e6cb52d203b59ce.sol,AgileCycleWithAssistance,contract AgileCycleWithAssistance { using SafeMath for uint; address public operator; address public juryOperator; uint public promisedTokens; uint public raisedEther; bool public tokenReleaseAtStart; address public icoAddress; address public arbitrationAddress; bool public roundFailedToStart; address public projectWallet; address public juryOnlineWallet; struct Milestone { uint etherAmount; uint tokenAmount; uint startTime; uint finishTime; uint duration; string description; string result; },1,"subgraph cluster_3191_AgileCycleWithAssistance {
label=""AgileCycleWithAssistance"";
""3191_addMilestone"" [label=""addMilestone""];
""3191_promisedTokens"" [label=""promisedTokens""];
""3191_editMilestone"" [label=""editMilestone""];
""3191_milestonesLength"" [label=""milestonesLength""];
""3191_investorExists"" [label=""investorExists""];
""3191_addMilestonesAndSeal"" [label=""addMilestonesAndSeal""];
""3191_failSafe"" [label=""failSafe""];
""3191_assignPartition"" [label=""assignPartition""];
""3191_finishedTimeStamp"" [label=""finishedTimeStamp""];
""3191_verdictExecuted"" [label=""verdictExecuted""];
""3191_constructor"" [label=""constructor""];
""3191_offerAccepted"" [label=""offerAccepted""];
""3191_disputeOpened"" [label=""disputeOpened""];
""3191_setToken"" [label=""setToken""];
""3191_payCommission"" [label=""payCommission""];
""3191_finishMilestone"" [label=""finishMilestone""];
""3191_startMilestone"" [label=""startMilestone""];
""3191_withdrawEther"" [label=""withdrawEther""];
""3191_seal"" [label=""seal""];
""3191_approveCycle"" [label=""approveCycle""];
""3191_withdrawToken"" [label=""withdrawToken""];
""3191_sealTimestamp"" [label=""sealTimestamp""];
""3191_currentMilestone"" [label=""currentMilestone""];
""3191_disputeOpened"" -> ""3191_only"";
""3191_seal"" -> ""3191_notSealed"";
""3191_finishMilestone"" -> ""3191_onlyAdmin"";
""3191_setToken"" -> ""3191_onlyAdmin"";
""3191_startMilestone"" -> ""3191_sealed"";
""3191_editMilestone"" -> ""3191_onlyAdmin"";
""3191_addMilestone"" -> ""3191_onlyAdmin"";
""3191_addMilestone"" -> ""3191_notSealed"";
""3191_verdictExecuted"" -> ""3191_only"";
""3191_startMilestone"" -> ""3191_payCommission"";
""3191_offerAccepted"" -> ""3191_only"";
""3191_startMilestone"" -> ""3191_onlyAdmin"";
""3191_addMilestonesAndSeal"" -> ""3191_onlyAdmin"";
""3191_offerAccepted"" -> ""3191_assignPartition"";
""3191_seal"" -> ""3191_onlyAdmin"";
""3191_editMilestone"" -> ""3191_notSealed"";
""3191_addMilestonesAndSeal"" -> ""3191_notSealed"";
}
"
0x889a32263d237872b4f7985ead9c29ebfe8b464d.sol,CaviarToken,"contract CaviarToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function CaviarToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_CaviarToken {
label=""CaviarToken"";
""401_fallback"" [label=""fallback""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_CaviarToken"" [label=""CaviarToken""];
""401_totalSupply"" [label=""totalSupply""];
""401_mintTo"" [label=""mintTo""];
""401_transferFrom"" [label=""transferFrom""];
""401_balanceOf"" [label=""balanceOf""];
""401_transfer"" [label=""transfer""];
""401_killContract"" [label=""killContract""];
""401_approve"" [label=""approve""];
""401_changeOwner"" [label=""changeOwner""];
}
"
0xd64ad4eefaacb96a0865687cfeef4c4a2cfbfef2.sol,Lotthereum,"contract Lotthereum is Mortal, SafeMath { Game[] private games; mapping (address => uint) private balances; struct Game { uint id; uint pointer; uint maxNumberOfBets; uint minAmountByBet; uint prize; uint currentRound; Round[] rounds; }",1,"subgraph cluster_1217_Lotthereum {
label=""Lotthereum"";
""1217_getGames"" [label=""getGames""];
""1217_closeRound"" [label=""closeRound""];
""1217_getRoundBetNumber"" [label=""getRoundBetNumber""];
""1217_getGamePrize"" [label=""getGamePrize""];
""1217_createGame"" [label=""createGame""];
""1217_createGameRound"" [label=""createGameRound""];
""1217_getNumber"" [label=""getNumber""];
""1217_getRoundNumber"" [label=""getRoundNumber""];
""1217_getRoundPointer"" [label=""getRoundPointer""];
""1217_getPointer"" [label=""getPointer""];
""1217_getGameMaxNumberOfBets"" [label=""getGameMaxNumberOfBets""];
""1217_getGameRoundOpen"" [label=""getGameRoundOpen""];
""1217_placeBet"" [label=""placeBet""];
""1217_fallback"" [label=""fallback""];
""1217_getGameCurrentRoundId"" [label=""getGameCurrentRoundId""];
""1217_getRoundNumberOfBets"" [label=""getRoundNumberOfBets""];
""1217_withdraw"" [label=""withdraw""];
""1217_getGameMinAmountByBet"" [label=""getGameMinAmountByBet""];
""1217_getBalance"" [label=""getBalance""];
""1217_getRoundBetOrigin"" [label=""getRoundBetOrigin""];
""1217_getBlockHash"" [label=""getBlockHash""];
""1217_getRoundBetAmount"" [label=""getRoundBetAmount""];
""1217_payout"" [label=""payout""];
""1217_closeRound"" -> ""1217_payout"";
""1217_withdraw"" -> ""1217_getBalance"";
""1217_closeRound"" -> ""1217_getNumber"";
""1217_createGame"" -> ""1217_createGameRound"";
""1217_payout"" -> ""1217_divide"";
""1217_closeRound"" -> ""1217_getBlockHash"";
""1217_placeBet"" -> ""1217_closeRound"";
""1217_closeRound"" -> ""1217_createGameRound"";
""1217_createGame"" -> ""1217_onlyowner"";
""1217_payout"" -> ""1217_add"";
}
"
0xf2eefee3c99cdb30c11d57b487a16690e813309b.sol,SlotMachine,"contract SlotMachine { address public slotMachineFunds; uint256 public coinPrice = 0.1 ether; address owner; event Rolled(address sender, uint rand1, uint rand2, uint rand3); mapping (address => uint) pendingWithdrawals; modifier onlyOwner() { require(owner == msg.sender); _; }",1,"subgraph cluster_359_SlotMachine {
label=""SlotMachine"";
""359_cashout"" [label=""cashout""];
""359_fallback"" [label=""fallback""];
""359_contractBalance"" [label=""contractBalance""];
""359_constructor"" [label=""constructor""];
""359_addEther"" [label=""addEther""];
""359_withdraw"" [label=""withdraw""];
""359_balanceOf"" [label=""balanceOf""];
""359_setCoinPrice"" [label=""setCoinPrice""];
""359_calculatePrize"" [label=""calculatePrize""];
""359_killContract"" [label=""killContract""];
""359_randomGen"" [label=""randomGen""];
""359_oneRoll"" [label=""oneRoll""];
""359_oneRoll"" -> ""359_calculatePrize"";
""359_fallback"" -> ""359_onlyOwner"";
""359_setCoinPrice"" -> ""359_onlyOwner"";
""359_oneRoll"" -> ""359_randomGen"";
""359_killContract"" -> ""359_onlyOwner"";
""359_cashout"" -> ""359_onlyOwner"";
}
"
0x588f4ee97a2085c95420a45684a898d4b5906ba1.sol,SPAM,contract SPAM is ERC20Interface { string public name = ; uint8 public decimals = 18; string public symbol = ; uint256 public stdBalance; mapping (address => uint256) public bonus; address public owner; bool public SPAMed; event Message(string message); function SPAM() public { owner = msg.sender; totalSupply = 9999 * 1e18; stdBalance = 9999 * 1e18; SPAMed = true; },1,"subgraph cluster_316_SPAM {
label=""SPAM"";
""316_rescueTokens"" [label=""rescueTokens""];
""316_UNSPAM"" [label=""UNSPAM""];
""316_approve"" [label=""approve""];
""316_balanceOf"" [label=""balanceOf""];
""316_transferFrom"" [label=""transferFrom""];
""316_fallback"" [label=""fallback""];
""316_allowance"" [label=""allowance""];
""316_SPAM"" [label=""SPAM""];
""316_transfer"" [label=""transfer""];
}
"
0x704079e823e42a936bbaac5163434c2515473836.sol,CONUNDRUM,"contract CONUNDRUM { string public question; address questionSender; bytes32 responseHash; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_CONUNDRUM {
label=""CONUNDRUM"";
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_StopGame"" [label=""StopGame""];
""118_NewQuestion"" [label=""NewQuestion""];
}
"
0x33b44a1d150f3feaa40503ad20a75634adc39b18.sol,TimeCapsule,contract TimeCapsule is Ownable { address public Owner; mapping (address=>uint) public deposits; uint public openDate; function initCapsule(uint open) { Owner = msg.sender; openDate = open; },1,"subgraph cluster_130_TimeCapsule {
label=""TimeCapsule"";
""130_deposit"" [label=""deposit""];
""130_initCapsule"" [label=""initCapsule""];
""130_kill"" [label=""kill""];
""130_withdraw"" [label=""withdraw""];
""130_fallback"" [label=""fallback""];
""130_withdraw"" -> ""130_isOwner"";
""130_kill"" -> ""130_isOwner"";
""130_fallback"" -> ""130_deposit"";
}
"
0xf1add8bf553d0066be17768d6816f3730c476237.sol,EasySmartolution,"contract EasySmartolution { address constant smartolution = 0xe0ae35fe7Df8b86eF08557b535B89bB6cb036C23; event ParticipantAdded(address _sender); event ParticipantRemoved(address _sender); event ReferrerAdded(address _contract, address _sender); mapping (address => address) public participants; mapping (address => bool) public referrers; address private processing; constructor(address _processing) public { processing = _processing; }",1,"subgraph cluster_426_EasySmartolutionRef {
label=""EasySmartolutionRef"";
""426_setReferrer"" [label=""setReferrer""];
""426_constructor"" [label=""constructor""];
""426_setSmartolution"" [label=""setSmartolution""];
""426_fallback"" [label=""fallback""];
}
"
0x0e0a86c97a07856d68bf3387aeb9430dbab93245.sol,InterbetCore,contract InterbetCore { uint constant oddsDecimals = 2; uint constant feeRateDecimals = 1; uint public minMakerBetFund = 100 * 1 finney; uint public maxAllowedTakerBetsPerMakerBet = 100; uint public minAllowedStakeInPercentage = 1; address private owner; mapping(address => bool) private admins; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_2196_InterbetCore {
label=""InterbetCore"";
""2196_isAdmin"" [label=""isAdmin""];
""2196_fallback"" [label=""fallback""];
""2196_addFund"" [label=""addFund""];
""2196_constructor"" [label=""constructor""];
""2196_changeOwner"" [label=""changeOwner""];
""2196_updateOdds"" [label=""updateOdds""];
""2196_makeBet"" [label=""makeBet""];
""2196_getMakerBetDetails"" [label=""getMakerBetDetails""];
""2196_add"" [label=""add""];
""2196_withdraw"" [label=""withdraw""];
""2196_changeMinMakerBetFund"" [label=""changeMinMakerBetFund""];
""2196_payVerifier"" [label=""payVerifier""];
""2196_updateVerifier"" [label=""updateVerifier""];
""2196_sub"" [label=""sub""];
""2196_getMakerBetBasicInfo"" [label=""getMakerBetBasicInfo""];
""2196_getOwner"" [label=""getOwner""];
""2196_takeBet"" [label=""takeBet""];
""2196_payTaker"" [label=""payTaker""];
""2196_removeAdmin"" [label=""removeAdmin""];
""2196_pauseBet"" [label=""pauseBet""];
""2196_payMaker"" [label=""payMaker""];
""2196_closeBet"" [label=""closeBet""];
""2196_getTakerBet"" [label=""getTakerBet""];
""2196_mul"" [label=""mul""];
""2196_getVerifier"" [label=""getVerifier""];
""2196_settleBet"" [label=""settleBet""];
""2196_reopenBet"" [label=""reopenBet""];
""2196_addAdmin"" [label=""addAdmin""];
""2196_changeTakerBetConstraints"" [label=""changeTakerBetConstraints""];
""2196_payMaker"" -> ""2196_sub"";
""2196_payVerifier"" -> ""2196_add"";
""2196_payTaker"" -> ""2196_sub"";
""2196_withdraw"" -> ""2196_payTaker"";
""2196_settleBet"" -> ""2196_payMaker"";
""2196_changeOwner"" -> ""2196_onlyOwner"";
""2196_changeMinMakerBetFund"" -> ""2196_mul"";
""2196_payMaker"" -> ""2196_mul"";
""2196_closeBet"" -> ""2196_add"";
""2196_payVerifier"" -> ""2196_mul"";
""2196_settleBet"" -> ""2196_payVerifier"";
""2196_withdraw"" -> ""2196_payVerifier"";
""2196_changeTakerBetConstraints"" -> ""2196_onlyAdmin"";
""2196_closeBet"" -> ""2196_sub"";
""2196_takeBet"" -> ""2196_sub"";
""2196_removeAdmin"" -> ""2196_onlyOwner"";
""2196_payTaker"" -> ""2196_add"";
""2196_addFund"" -> ""2196_add"";
""2196_changeMinMakerBetFund"" -> ""2196_onlyAdmin"";
""2196_payTaker"" -> ""2196_mul"";
""2196_payMaker"" -> ""2196_add"";
""2196_makeBet"" -> ""2196_sub"";
""2196_addAdmin"" -> ""2196_onlyOwner"";
""2196_withdraw"" -> ""2196_payMaker"";
""2196_takeBet"" -> ""2196_add"";
""2196_takeBet"" -> ""2196_mul"";
}
"
0x6dbb4e882f967432fc0f9200e9ca577c916d8a68.sol,Bussiness,contract Bussiness is Ownable { IERC721 public erc721Address = IERC721(0x06012c8cf97bead5deae237070f9587f8e7a266d); ERC20BasicInterface public usdtToken = ERC20BasicInterface(0xdAC17F958D2ee523a2206206994597C13D831ec7); uint256 public ETHFee = 2; uint256 public HBWALLETFee = 1; uint256 public balance = address(this).balance; constructor() public {},1,"subgraph cluster_687_Bussiness {
label=""Bussiness"";
""687_buyByUsdt"" [label=""buyByUsdt""];
""687_setPrice"" [label=""setPrice""];
""687_getPrice"" [label=""getPrice""];
""687_ownerOf"" [label=""ownerOf""];
""687_constructor"" [label=""constructor""];
""687_resetPrice"" [label=""resetPrice""];
""687_setFee"" [label=""setFee""];
""687_withdraw"" [label=""withdraw""];
""687_setPriceFeeEth"" [label=""setPriceFeeEth""];
""687_removePrice"" [label=""removePrice""];
""687_buy"" [label=""buy""];
""687_buyByUsdt"" -> ""687_resetPrice"";
""687_setFee"" -> ""687_onlyOwner"";
""687_withdraw"" -> ""687_onlyOwner"";
""687_buy"" -> ""687_resetPrice"";
""687_getPrice"" -> ""687_resetPrice"";
""687_removePrice"" -> ""687_resetPrice"";
}
"
0x4ee1d7720a04072142b2efc9d2c7d5d77ad63939.sol,ARXpresale,"contract ARXpresale is owned, safeMath { address public admin = owner; ERC20Interface public tokenReward; address public foundationWallet; address public beneficiaryWallet; uint256 public tokensPerEthPrice; uint256 public amountRaisedInWei; uint256 public fundingMinCapInWei; uint256 public fundingMaxCapInWei; uint256 public fundingRemainingAvailableInEth; string public currentStatus = ; uint256 public fundingStartBlock; uint256 public fundingEndBlock; bool public isPresaleClosed = false; bool public isPresaleSetup = false; event Buy(address indexed _sender, uint256 _eth, uint256 _ARX); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Refund(address indexed _refunder, uint256 _value); event Burn(address _from, uint256 _value); mapping(address => uint256) balances; mapping(address => uint256) fundValue; function ARXpresale() onlyOwner { admin = msg.sender; currentStatus = ; }",1,"subgraph cluster_920_ARXpresale {
label=""ARXpresale"";
""920_beneficiaryMultiSigWithdraw"" [label=""beneficiaryMultiSigWithdraw""];
""920_checkGoalandPrice"" [label=""checkGoalandPrice""];
""920_refund"" [label=""refund""];
""920_fallback"" [label=""fallback""];
""920_updateStatus"" [label=""updateStatus""];
""920_BuyARXtokens"" [label=""BuyARXtokens""];
""920_withdrawRemainingTokens"" [label=""withdrawRemainingTokens""];
""920_ARXpresale"" [label=""ARXpresale""];
""920_Setuppresale"" [label=""Setuppresale""];
""920_setPrice"" [label=""setPrice""];
""920_BuyARXtokens"" -> ""920_setPrice"";
""920_BuyARXtokens"" -> ""920_safeSub"";
""920_Setuppresale"" -> ""920_safeDiv"";
""920_BuyARXtokens"" -> ""920_safeMul"";
""920_BuyARXtokens"" -> ""920_safeAdd"";
""920_checkGoalandPrice"" -> ""920_setPrice"";
""920_Setuppresale"" -> ""920_onlyOwner"";
""920_BuyARXtokens"" -> ""920_safeDiv"";
""920_ARXpresale"" -> ""920_onlyOwner"";
""920_checkGoalandPrice"" -> ""920_onlyOwner"";
""920_fallback"" -> ""920_BuyARXtokens"";
""920_updateStatus"" -> ""920_onlyOwner"";
""920_Setuppresale"" -> ""920_setPrice"";
""920_beneficiaryMultiSigWithdraw"" -> ""920_onlyOwner"";
""920_withdrawRemainingTokens"" -> ""920_onlyOwner"";
}
"
0xa181b8c9f6b43b8252c6c9826cf5feba362b542e.sol,CryptoStamps,"contract CryptoStamps is ERC721 { event stampBirth(uint256 tokenId, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private firstStepLimit = 1.28 ether; mapping (uint256 => address) public stampIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public stampIndexToApproved; mapping (uint256 => uint256) private stampIndexToPrice; mapping(uint256 => uint256) public stampIndextotransactions; uint256 public totaletherstransacted; uint256 public totaltransactions; uint256 public stampCreatedCount; mapping (uint256 => bool) public stampIndextodissolved; mapping (uint256 => address) public dissolvedIndexToApproved; struct Stamp { uint256 birthtime; }",1,"subgraph cluster_1375_CryptoStamps {
label=""CryptoStamps"";
""1375_transferFrom"" [label=""transferFrom""];
""1375_implementsERC721"" [label=""implementsERC721""];
""1375_priceOf"" [label=""priceOf""];
""1375_name"" [label=""name""];
""1375_transfer"" [label=""transfer""];
""1375_symbol"" [label=""symbol""];
""1375_getStamp"" [label=""getStamp""];
""1375_setnumber"" [label=""setnumber""];
""1375_takeOwnership"" [label=""takeOwnership""];
""1375_setcut"" [label=""setcut""];
""1375_setdissolveaddress"" [label=""setdissolveaddress""];
""1375_nextpriceOf"" [label=""nextpriceOf""];
""1375_approve"" [label=""approve""];
""1375_dissolve"" [label=""dissolve""];
""1375_pausecontract"" [label=""pausecontract""];
""1375_controlstampdissolution"" [label=""controlstampdissolution""];
""1375_payout"" [label=""payout""];
""1375_setCOO"" [label=""setCOO""];
""1375_CryptoStamps"" [label=""CryptoStamps""];
""1375__createStamp"" [label=""_createStamp""];
""1375_setCEO"" [label=""setCEO""];
""1375_createStamp"" [label=""createStamp""];
""1375_transferdissolvedFrom"" [label=""transferdissolvedFrom""];
""1375_setdissolvedcontract"" [label=""setdissolvedcontract""];
""1375__owns"" [label=""_owns""];
""1375__transfer"" [label=""_transfer""];
""1375_totalSupply"" [label=""totalSupply""];
""1375_ownerOf"" [label=""ownerOf""];
""1375_unpausecontract"" [label=""unpausecontract""];
""1375_balanceOf"" [label=""balanceOf""];
""1375_purchase"" [label=""purchase""];
""1375_tokensOfOwner"" [label=""tokensOfOwner""];
""1375__addressNotNull"" [label=""_addressNotNull""];
""1375__transferdissolved"" [label=""_transferdissolved""];
""1375__payout"" [label=""_payout""];
""1375_setdissolveprice"" [label=""setdissolveprice""];
""1375__approved"" [label=""_approved""];
""1375_transfer"" -> ""1375__transfer"";
""1375_setdissolveprice"" -> ""1375_onlyCEO"";
""1375_dissolve"" -> ""1375_approve"";
""1375_transferFrom"" -> ""1375__transfer"";
""1375_setcut"" -> ""1375_onlyCEO"";
""1375_transferdissolvedFrom"" -> ""1375__addressNotNull"";
""1375_setdissolveaddress"" -> ""1375_onlyCEO"";
""1375_takeOwnership"" -> ""1375__transfer"";
""1375_takeOwnership"" -> ""1375__addressNotNull"";
""1375_setnumber"" -> ""1375_onlyCEO"";
""1375_tokensOfOwner"" -> ""1375_balanceOf"";
""1375_approve"" -> ""1375__owns"";
""1375_dissolve"" -> ""1375_transfer"";
""1375_purchase"" -> ""1375__transfer"";
""1375_transferdissolvedFrom"" -> ""1375__transferdissolved"";
""1375_tokensOfOwner"" -> ""1375_totalSupply"";
""1375_pausecontract"" -> ""1375_onlyCLevel"";
""1375_controlstampdissolution"" -> ""1375_onlyCEO"";
""1375_setCOO"" -> ""1375_onlyCEO"";
""1375_setdissolvedcontract"" -> ""1375_onlyCEO"";
""1375_transfer"" -> ""1375__owns"";
""1375_unpausecontract"" -> ""1375_onlyCEO"";
""1375_takeOwnership"" -> ""1375__approved"";
""1375_dissolve"" -> ""1375_priceOf"";
""1375_purchase"" -> ""1375__addressNotNull"";
""1375_transferFrom"" -> ""1375__addressNotNull"";
""1375_transferFrom"" -> ""1375__owns"";
""1375_transferdissolvedFrom"" -> ""1375__owns"";
""1375_transferFrom"" -> ""1375__approved"";
""1375_payout"" -> ""1375__payout"";
""1375_createStamp"" -> ""1375__createStamp"";
""1375_createStamp"" -> ""1375_onlyCOO"";
""1375_setCEO"" -> ""1375_onlyCEO"";
""1375__createStamp"" -> ""1375__transfer"";
""1375_payout"" -> ""1375_onlyCLevel"";
""1375_dissolve"" -> ""1375__createStamp"";
""1375_transfer"" -> ""1375__addressNotNull"";
}
"
0x6e776e93291620dac8f3dde4a0b98c42a5359293.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1209_RefundVault {
label=""RefundVault"";
""1209_enableRefunds"" [label=""enableRefunds""];
""1209_RefundVault"" [label=""RefundVault""];
""1209_refund"" [label=""refund""];
""1209_close"" [label=""close""];
""1209_deposit"" [label=""deposit""];
""1209_enableRefunds"" -> ""1209_onlyOwner"";
""1209_close"" -> ""1209_onlyOwner"";
""1209_deposit"" -> ""1209_onlyOwner"";
}
"
0x72ebd62060f78d91dc4bc33e8d88f39307365f87.sol,SEA,"contract SEA { using SafeMath for uint256; string public name; string public symbol; uint256 public decimals; uint256 public totalSupply; address public owner; uint256 public basisPointsRate = 0; uint256 public maximumFee = 0; uint256 public minimumFee = 0; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezes; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed _from, address indexed _to, uint256 _value); event CollectFee(address indexed _from, address indexed _owner, uint256 fee); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Params(address indexed _owner, uint256 feeBasisPoints, uint256 minFee, uint256 maxFee); event Freeze(address indexed to, uint256 value); event Unfreeze(address indexed to, uint256 value); event Withdraw(address indexed to, uint256 value); constructor(uint256 initialSupply, uint8 decimalUnits, string tokenName, string tokenSymbol) public { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; owner = msg.sender; }",1,"subgraph cluster_827_SEA {
label=""SEA"";
""827_calFee"" [label=""calFee""];
""827_withdrawEther"" [label=""withdrawEther""];
""827_transferFrom"" [label=""transferFrom""];
""827_fallback"" [label=""fallback""];
""827_destructor"" [label=""destructor""];
""827_setParams"" [label=""setParams""];
""827_constructor"" [label=""constructor""];
""827_approve"" [label=""approve""];
""827_transfer"" [label=""transfer""];
""827_unfreeze"" [label=""unfreeze""];
""827_freeze"" [label=""freeze""];
""827_transferFrom"" -> ""827_calFee"";
""827_transfer"" -> ""827_calFee"";
}
"
0xd37df7051977462c84d2a89cd78a0a91ff85d645.sol,MultiSigWallet,"contract MultiSigWallet { event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); uint constant public MAX_OWNER_COUNT = 50; mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1004_MultiSigWallet {
label=""MultiSigWallet"";
""1004_getTransactionCount"" [label=""getTransactionCount""];
""1004_replaceOwner"" [label=""replaceOwner""];
""1004_fallback"" [label=""fallback""];
""1004_addTransaction"" [label=""addTransaction""];
""1004_confirmTransaction"" [label=""confirmTransaction""];
""1004_external_call"" [label=""external_call""];
""1004_getTransactionIds"" [label=""getTransactionIds""];
""1004_revokeConfirmation"" [label=""revokeConfirmation""];
""1004_MultiSigWallet"" [label=""MultiSigWallet""];
""1004_getConfirmationCount"" [label=""getConfirmationCount""];
""1004_addOwner"" [label=""addOwner""];
""1004_getConfirmations"" [label=""getConfirmations""];
""1004_getOwners"" [label=""getOwners""];
""1004_executeTransaction"" [label=""executeTransaction""];
""1004_isConfirmed"" [label=""isConfirmed""];
""1004_submitTransaction"" [label=""submitTransaction""];
""1004_removeOwner"" [label=""removeOwner""];
""1004_changeRequirement"" [label=""changeRequirement""];
""1004_executeTransaction"" -> ""1004_external_call"";
""1004_addOwner"" -> ""1004_ownerDoesNotExist"";
""1004_confirmTransaction"" -> ""1004_executeTransaction"";
""1004_addTransaction"" -> ""1004_notNull"";
""1004_removeOwner"" -> ""1004_changeRequirement"";
""1004_replaceOwner"" -> ""1004_ownerDoesNotExist"";
""1004_changeRequirement"" -> ""1004_validRequirement"";
""1004_submitTransaction"" -> ""1004_confirmTransaction"";
""1004_revokeConfirmation"" -> ""1004_notExecuted"";
""1004_executeTransaction"" -> ""1004_notExecuted"";
""1004_MultiSigWallet"" -> ""1004_validRequirement"";
""1004_executeTransaction"" -> ""1004_isConfirmed"";
""1004_executeTransaction"" -> ""1004_ownerExists"";
""1004_confirmTransaction"" -> ""1004_notConfirmed"";
""1004_changeRequirement"" -> ""1004_onlyWallet"";
""1004_executeTransaction"" -> ""1004_confirmed"";
""1004_confirmTransaction"" -> ""1004_transactionExists"";
""1004_removeOwner"" -> ""1004_onlyWallet"";
""1004_revokeConfirmation"" -> ""1004_confirmed"";
""1004_addOwner"" -> ""1004_notNull"";
""1004_revokeConfirmation"" -> ""1004_ownerExists"";
""1004_addOwner"" -> ""1004_validRequirement"";
""1004_confirmTransaction"" -> ""1004_ownerExists"";
""1004_submitTransaction"" -> ""1004_addTransaction"";
""1004_removeOwner"" -> ""1004_ownerExists"";
""1004_addOwner"" -> ""1004_onlyWallet"";
""1004_replaceOwner"" -> ""1004_onlyWallet"";
""1004_replaceOwner"" -> ""1004_ownerExists"";
}
"
0x845bfe096fbe3eabe473edc3953d8af1b19bbbc7.sol,IndTokenPayment,"contract IndTokenPayment is Ownable, ReentrancyGuard { IERC20Token[] public path; address public destinationWallet; uint256 public minConversionRate; IContractRegistry public bancorRegistry; bytes32 public constant BANCOR_NETWORK = ; event conversionSucceded(address from,uint256 fromTokenVal,address dest,uint256 destTokenVal); constructor(IERC20Token[] _path, address destWalletAddr, address bancorRegistryAddr, uint256 minConvRate){ path = _path; bancorRegistry = IContractRegistry(bancorRegistryAddr); destinationWallet = destWalletAddr; minConversionRate = minConvRate; }",1,"subgraph cluster_543_IndTokenPayment {
label=""IndTokenPayment"";
""543_constructor"" [label=""constructor""];
""543_convertToInd"" [label=""convertToInd""];
""543_withdrawToken"" [label=""withdrawToken""];
""543_setConversionPath"" [label=""setConversionPath""];
""543_withdrawEther"" [label=""withdrawEther""];
""543_getBancorContractAddress"" [label=""getBancorContractAddress""];
""543_fallback"" [label=""fallback""];
""543_setBancorRegistry"" [label=""setBancorRegistry""];
""543_setDestinationWallet"" [label=""setDestinationWallet""];
""543_setMinConversionRate"" [label=""setMinConversionRate""];
""543_withdrawEther"" -> ""543_onlyOwner"";
""543_fallback"" -> ""543_convertToInd"";
""543_setMinConversionRate"" -> ""543_onlyOwner"";
""543_setDestinationWallet"" -> ""543_onlyOwner"";
""543_setConversionPath"" -> ""543_onlyOwner"";
""543_convertToInd"" -> ""543_nonReentrant"";
""543_withdrawToken"" -> ""543_onlyOwner"";
""543_setBancorRegistry"" -> ""543_onlyOwner"";
""543_withdrawToken"" -> ""543_nonReentrant"";
""543_withdrawEther"" -> ""543_nonReentrant"";
}
"
0x1d9be4a5681374c54b1821d0beac3a678ad128a4.sol,StorageController,"contract StorageController is SafeMath, CreatorEnabled, StringMover { Storage public stor; IMNTP public mntpToken; IGold public goldToken; IGoldIssueBurnFee public goldIssueBurnFee; address public managerAddress = 0x0; event TokenBuyRequest(address _from, string _userId, uint _reference, uint _amount, uint indexed _index); event TokenSellRequest(address _from, string _userId, uint _reference, uint _amount, uint indexed _index); event RequestCancelled(uint indexed _index); event RequestProcessed(uint indexed _index); event RequestFailed(uint indexed _index); modifier onlyManagerOrCreator() { require(msg.sender == managerAddress || msg.sender == creator); _; }",1,"subgraph cluster_2767_StorageController {
label=""StorageController"";
""2767_isHotWallet"" [label=""isHotWallet""];
""2767_processRequest"" [label=""processRequest""];
""2767_getDocCount"" [label=""getDocCount""];
""2767_getRequestBaseInfo"" [label=""getRequestBaseInfo""];
""2767_addSellTokensRequest"" [label=""addSellTokensRequest""];
""2767_processSellRequest"" [label=""processSellRequest""];
""2767_fallback"" [label=""fallback""];
""2767_setHotWalletAddress"" [label=""setHotWalletAddress""];
""2767_getRequest"" [label=""getRequest""];
""2767_addGoldTransaction"" [label=""addGoldTransaction""];
""2767_cancelRequest"" [label=""cancelRequest""];
""2767_changeGoldIssueBurnFeeContract"" [label=""changeGoldIssueBurnFeeContract""];
""2767_getAllGoldTransactionsCount"" [label=""getAllGoldTransactionsCount""];
""2767_StorageController"" [label=""StorageController""];
""2767_getHotWalletAddress"" [label=""getHotWalletAddress""];
""2767_processBuyRequestFiat"" [label=""processBuyRequestFiat""];
""2767_processBuyRequest"" [label=""processBuyRequest""];
""2767_getUserHotGoldBalance"" [label=""getUserHotGoldBalance""];
""2767_transferGoldFromHotWallet"" [label=""transferGoldFromHotWallet""];
""2767_getRequestsCount"" [label=""getRequestsCount""];
""2767_issueGoldTokens"" [label=""issueGoldTokens""];
""2767_setManagerAddress"" [label=""setManagerAddress""];
""2767_withdrawEth"" [label=""withdrawEth""];
""2767_getDoc"" [label=""getDoc""];
""2767_processSellRequestFiat"" [label=""processSellRequestFiat""];
""2767_addBuyTokensRequest"" [label=""addBuyTokensRequest""];
""2767_getGoldTransaction"" [label=""getGoldTransaction""];
""2767_processInternalRequest"" [label=""processInternalRequest""];
""2767_addDoc"" [label=""addDoc""];
""2767_getGoldTransactionsCount"" [label=""getGoldTransactionsCount""];
""2767_burnGoldTokens"" [label=""burnGoldTokens""];
""2767_withdrawTokens"" [label=""withdrawTokens""];
""2767_changeController"" [label=""changeController""];
""2767_processInternalRequest"" -> ""2767_getHotWalletAddress"";
""2767_transferGoldFromHotWallet"" -> ""2767_getUserHotGoldBalance"";
""2767_processSellRequest"" -> ""2767_issueGoldTokens"";
""2767_processInternalRequest"" -> ""2767_processBuyRequest"";
""2767_changeGoldIssueBurnFeeContract"" -> ""2767_onlyCreator"";
""2767_addGoldTransaction"" -> ""2767_onlyManagerOrCreator"";
""2767_processSellRequestFiat"" -> ""2767_getRequest"";
""2767_processSellRequest"" -> ""2767_safeSub"";
""2767_processSellRequestFiat"" -> ""2767_safeSub"";
""2767_transferGoldFromHotWallet"" -> ""2767_addGoldTransaction"";
""2767_withdrawEth"" -> ""2767_onlyManagerOrCreator"";
""2767_processBuyRequest"" -> ""2767_addGoldTransaction"";
""2767_processSellRequestFiat"" -> ""2767_onlyManagerOrCreator"";
""2767_processRequest"" -> ""2767_onlyManagerOrCreator"";
""2767_processRequest"" -> ""2767_processBuyRequest"";
""2767_transferGoldFromHotWallet"" -> ""2767_getHotWalletAddress"";
""2767_processRequest"" -> ""2767_getRequest"";
""2767_processInternalRequest"" -> ""2767_processSellRequest"";
""2767_addSellTokensRequest"" -> ""2767_burnGoldTokens"";
""2767_getRequest"" -> ""2767_bytes32ToString"";
""2767_transferGoldFromHotWallet"" -> ""2767_onlyManagerOrCreator"";
""2767_processBuyRequest"" -> ""2767_safeDiv"";
""2767_processSellRequest"" -> ""2767_isHotWallet"";
""2767_withdrawTokens"" -> ""2767_issueGoldTokens"";
""2767_setHotWalletAddress"" -> ""2767_onlyCreator"";
""2767_processBuyRequestFiat"" -> ""2767_onlyManagerOrCreator"";
""2767_cancelRequest"" -> ""2767_getRequest"";
""2767_processSellRequest"" -> ""2767_addGoldTransaction"";
""2767_addDoc"" -> ""2767_onlyManagerOrCreator"";
""2767_processRequest"" -> ""2767_processSellRequest"";
""2767_processBuyRequestFiat"" -> ""2767_processBuyRequest"";
""2767_isHotWallet"" -> ""2767_getHotWalletAddress"";
""2767_setManagerAddress"" -> ""2767_onlyCreator"";
""2767_processInternalRequest"" -> ""2767_onlyManagerOrCreator"";
""2767_withdrawTokens"" -> ""2767_onlyManagerOrCreator"";
""2767_processBuyRequest"" -> ""2767_isHotWallet"";
""2767_processBuyRequest"" -> ""2767_safeSub"";
""2767_processRequest"" -> ""2767_getRequestsCount"";
""2767_processSellRequest"" -> ""2767_safeMul"";
""2767_processSellRequestFiat"" -> ""2767_getRequestsCount"";
""2767_getDoc"" -> ""2767_bytes64ToString"";
""2767_processBuyRequest"" -> ""2767_issueGoldTokens"";
""2767_cancelRequest"" -> ""2767_onlyManagerOrCreator"";
""2767_withdrawTokens"" -> ""2767_burnGoldTokens"";
""2767_changeController"" -> ""2767_onlyCreator"";
}
"
0x86c6a7ee4ec24d25456580d81f7e8f486186ec91.sol,Coin,"contract Coin { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public _totalSupply = 0; uint256 public _maxSupply = 33000000000000000000000; uint256 public price = 2000; bool private workingState = true; bool private transferAllowed = true; bool private generationState = true; address public owner; address private cur_coin; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) private etherClients; event FundsGot(address indexed _sender, uint256 _value); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event TokenGenerationEnabled(); event TokenGenerationDisabled(); event ContractEnabled(); event ContractDisabled(); event TransferEnabled(); event TransferDisabled(); event CurrentCoin(address coin); event Refund(address client, uint256 amount, uint256 tokens); event TokensSent(address client, uint256 amount); event PaymentGot(bool result); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_851_Coin {
label=""Coin"";
""851_refund"" [label=""refund""];
""851_allowance"" [label=""allowance""];
""851_kill"" [label=""kill""];
""851_disableGeneration"" [label=""disableGeneration""];
""851_fallback"" [label=""fallback""];
""851_transfer"" [label=""transfer""];
""851_tokenGenerationState"" [label=""tokenGenerationState""];
""851_transferFrom"" [label=""transferFrom""];
""851_setCurrentCoin"" [label=""setCurrentCoin""];
""851_balanceOf"" [label=""balanceOf""];
""851_contractState"" [label=""contractState""];
""851_approve"" [label=""approve""];
""851_enableContract"" [label=""enableContract""];
""851_disableTransfer"" [label=""disableTransfer""];
""851_Coin"" [label=""Coin""];
""851_totalSupply"" [label=""totalSupply""];
""851_generateTokens"" [label=""generateTokens""];
""851_transferState"" [label=""transferState""];
""851_setPrice"" [label=""setPrice""];
""851_disableContract"" [label=""disableContract""];
""851_enableGeneration"" [label=""enableGeneration""];
""851_setMaxSupply"" [label=""setMaxSupply""];
""851_enableTransfer"" [label=""enableTransfer""];
""851_Coin"" -> ""851_enableContract"";
""851_balanceOf"" -> ""851_workingFlag"";
""851_setMaxSupply"" -> ""851_onlyOwner"";
""851_enableContract"" -> ""851_onlyOwner"";
""851_disableContract"" -> ""851_onlyOwner"";
""851_setCurrentCoin"" -> ""851_workingFlag"";
""851_refund"" -> ""851_ownerAndCoin"";
""851_generateTokens"" -> ""851_ownerAndCoin"";
""851_enableTransfer"" -> ""851_onlyOwner"";
""851_transferFrom"" -> ""851_workingFlag"";
""851_disableTransfer"" -> ""851_onlyOwner"";
""851_setPrice"" -> ""851_onlyOwner"";
""851_setCurrentCoin"" -> ""851_onlyOwner"";
""851_refund"" -> ""851_workingFlag"";
""851_disableGeneration"" -> ""851_onlyOwner"";
""851_generateTokens"" -> ""851_workingFlag"";
""851_totalSupply"" -> ""851_workingFlag"";
""851_enableGeneration"" -> ""851_onlyOwner"";
""851_transfer"" -> ""851_workingFlag"";
""851_generateTokens"" -> ""851_transferFrom"";
""851_fallback"" -> ""851_workingFlag"";
""851_kill"" -> ""851_onlyOwner"";
}
"
0xdb09aba26e7a54f95951defc0a56b7f11a5ef023.sol,Presale,"contract Presale is Haltable { using SafeMath for uint256; Token public token; uint256 constant public startTime = 1511892000; uint256 constant public endTime = 1513641600; uint256 constant public tokenCap = uint256(8*1e6*1e8); address public withdrawAddress; uint256 public default_rate = 2500000; uint256 public weiRaised; uint256 public tokenSold; bool public initiated = false; bool public finalized = false; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); mapping (address => uint256) purchasedTokens; mapping (address => uint256) receivedFunds; enum State{Unknown, Prepairing, PreFunding, Funding, Success, Failure, Finalized, Refunding}",1,"subgraph cluster_1264_Presale {
label=""Presale"";
""1264_manualWithdrawal"" [label=""manualWithdrawal""];
""1264_rate"" [label=""rate""];
""1264_getReceivedFunds"" [label=""getReceivedFunds""];
""1264_fallback"" [label=""fallback""];
""1264_finalize"" [label=""finalize""];
""1264_emergencyTokenWithdrawal"" [label=""emergencyTokenWithdrawal""];
""1264_initiate"" [label=""initiate""];
""1264_claim"" [label=""claim""];
""1264_claimTokens"" [label=""claimTokens""];
""1264_validPurchase"" [label=""validPurchase""];
""1264_buyTokens"" [label=""buyTokens""];
""1264_refund"" [label=""refund""];
""1264_Presale"" [label=""Presale""];
""1264_delegatedRefund"" [label=""delegatedRefund""];
""1264_withdraw"" [label=""withdraw""];
""1264_getState"" [label=""getState""];
""1264_getPurchasedTokens"" [label=""getPurchasedTokens""];
""1264_emergencyWithdrawal"" [label=""emergencyWithdrawal""];
""1264_emergencyWithdrawal"" -> ""1264_onlyInEmergency"";
""1264_initiate"" -> ""1264_onlyOwner"";
""1264_emergencyWithdrawal"" -> ""1264_onlyOwner"";
""1264_refund"" -> ""1264_inState"";
""1264_claim"" -> ""1264_claimTokens"";
""1264_withdraw"" -> ""1264_onlyOwner"";
""1264_manualWithdrawal"" -> ""1264_inState"";
""1264_delegatedRefund"" -> ""1264_inState"";
""1264_manualWithdrawal"" -> ""1264_stopInEmergency"";
""1264_withdraw"" -> ""1264_stopInEmergency"";
""1264_withdraw"" -> ""1264_inState"";
""1264_claimTokens"" -> ""1264_stopInEmergency"";
""1264_manualWithdrawal"" -> ""1264_onlyOwner"";
""1264_emergencyTokenWithdrawal"" -> ""1264_onlyOwner"";
""1264_refund"" -> ""1264_delegatedRefund"";
""1264_buyTokens"" -> ""1264_validPurchase"";
""1264_refund"" -> ""1264_stopInEmergency"";
""1264_buyTokens"" -> ""1264_rate"";
""1264_emergencyTokenWithdrawal"" -> ""1264_onlyInEmergency"";
""1264_fallback"" -> ""1264_stopInEmergency"";
""1264_finalize"" -> ""1264_inState"";
""1264_finalize"" -> ""1264_onlyOwner"";
""1264_delegatedRefund"" -> ""1264_stopInEmergency"";
""1264_finalize"" -> ""1264_stopInEmergency"";
""1264_claimTokens"" -> ""1264_inState"";
""1264_fallback"" -> ""1264_buyTokens"";
""1264_buyTokens"" -> ""1264_inState"";
""1264_claim"" -> ""1264_stopInEmergency"";
""1264_claim"" -> ""1264_inState"";
""1264_buyTokens"" -> ""1264_stopInEmergency"";
}
"
0x46d1ebf7bb93044e078e0496e4661ec772607d9d.sol,TTCSale,"contract TTCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 30000; bool private rentrancy_lock = false; TTCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1578_TTCSale {
label=""TTCSale"";
""1578_checkFundingGoal"" [label=""checkFundingGoal""];
""1578_changeEndTime"" [label=""changeEndTime""];
""1578_checkFundingCap"" [label=""checkFundingCap""];
""1578_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1578_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1578_changeStartTime"" [label=""changeStartTime""];
""1578_terminate"" [label=""terminate""];
""1578_convertToMiniTtc"" [label=""convertToMiniTtc""];
""1578_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1578_currentTime"" [label=""currentTime""];
""1578_safeWithdrawal"" [label=""safeWithdrawal""];
""1578_TTCSale"" [label=""TTCSale""];
""1578_fallback"" [label=""fallback""];
""1578_setRate"" [label=""setRate""];
""1578_terminate"" -> ""1578_onlyOwner"";
""1578_fallback"" -> ""1578_checkFundingCap"";
""1578_ownerAllocateTokens"" -> ""1578_nonReentrant"";
""1578_ownerSafeWithdrawal"" -> ""1578_nonReentrant"";
""1578_ownerUnlockFund"" -> ""1578_afterDeadline"";
""1578_ownerAllocateTokens"" -> ""1578_onlyOwner"";
""1578_fallback"" -> ""1578_checkFundingGoal"";
""1578_fallback"" -> ""1578_afterStartTime"";
""1578_fallback"" -> ""1578_beforeDeadline"";
""1578_fallback"" -> ""1578_nonReentrant"";
""1578_ownerAllocateTokens"" -> ""1578_checkFundingCap"";
""1578_safeWithdrawal"" -> ""1578_nonReentrant"";
""1578_changeStartTime"" -> ""1578_onlyOwner"";
""1578_fallback"" -> ""1578_whenNotPaused"";
""1578_fallback"" -> ""1578_saleNotClosed"";
""1578_ownerAllocateTokens"" -> ""1578_checkFundingGoal"";
""1578_TTCSale"" -> ""1578_setRate"";
""1578_safeWithdrawal"" -> ""1578_afterDeadline"";
""1578_ownerUnlockFund"" -> ""1578_onlyOwner"";
""1578_changeEndTime"" -> ""1578_onlyOwner"";
""1578_ownerSafeWithdrawal"" -> ""1578_onlyOwner"";
""1578_setRate"" -> ""1578_onlyOwner"";
}
"
0x533ec971484b1014215422010978e892eacac430.sol,MortifyAsset,"contract MortifyAsset is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 100 * 1 days; uint public round2 = now + 95 * 1 days; uint public round1 = now + 70 * 1 days; uint256 public totalSupply = 25000000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000000000e18; uint public target0drop = 1; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_MortifyAsset {
label=""MortifyAsset"";
""1253_withdraw"" [label=""withdraw""];
""1253_transfer"" [label=""transfer""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" [label=""getTokens""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_constructor"" [label=""constructor""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_Distribute"" [label=""Distribute""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_add"" [label=""add""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_approve"" [label=""approve""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_distr"" [label=""distr""];
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_constructor"" -> ""1253_distr"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_distr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
}
"
0x93143d3e34a50aebab466368c3455fd858f77ad3.sol,FourOutOfFive,contract FourOutOfFive { struct GroupData { uint groupId; address[] participants; uint timestamp; uint betSize; uint rewardSize; uint8 rewardsAvailable; address[] rewardedParticipants; bool completed; },1,"subgraph cluster_670_FourOutOfFive {
label=""FourOutOfFive"";
""670__getContactOwnerBalance"" [label=""_getContactOwnerBalance""];
""670_withdrawOwnerMaxPossibleSafe"" [label=""withdrawOwnerMaxPossibleSafe""];
""670_placeBet"" [label=""placeBet""];
""670__getGroupRewardSize"" [label=""_getGroupRewardSize""];
""670_setMaxAndMinBet"" [label=""setMaxAndMinBet""];
""670__getGroupParticipants"" [label=""_getGroupParticipants""];
""670__getGroupIds"" [label=""_getGroupIds""];
""670_constructor"" [label=""constructor""];
""670__getGroupComplete"" [label=""_getGroupComplete""];
""670__getMaxWithdraw"" [label=""_getMaxWithdraw""];
""670__getGroupRewardedParticipants"" [label=""_getGroupRewardedParticipants""];
""670__getContactBalance"" [label=""_getContactBalance""];
""670_claimReward"" [label=""claimReward""];
""670__getMaxPossibleWithdraw"" [label=""_getMaxPossibleWithdraw""];
""670__getGroupRewardsAvailable"" [label=""_getGroupRewardsAvailable""];
""670_constructor"" -> ""670_setMaxAndMinBet"";
""670_withdrawOwnerMaxPossibleSafe"" -> ""670_onlyOwner"";
""670_setMaxAndMinBet"" -> ""670_onlyOwner"";
}
"
0xd64e5b228561225b437dc38b81891c15fe98cfee.sol,NYXAccount,"contract NYXAccount { bytes32 emergencyHash; address authority; address public owner; bytes32 resqueHash; bytes32 keywordHash; bytes32[10] photoHashes; uint resqueRequestTime; uint authorityRequestTime; uint lastExpenseTime; bool public lastChanceEnabled = false; bool lastChanceUseResqueAccountAddress = true; event NYXDecentralizedIdentificationRequest(string swarmLinkPhoto, string swarmLinkVideo); enum Stages { Normal, ResqueRequested, AuthorityRequested }",1,"subgraph cluster_412_NYXAccount {
label=""NYXAccount"";
""412_fallback"" [label=""fallback""];
""412_transferByOwner"" [label=""transferByOwner""];
""412_NYXAccount"" [label=""NYXAccount""];
""412_withdrawByEmergency"" [label=""withdrawByEmergency""];
""412_lastChance"" [label=""lastChance""];
""412_toggleLastChance"" [label=""toggleLastChance""];
""412_withdrawByResque"" [label=""withdrawByResque""];
""412_setEmergencyAccount"" [label=""setEmergencyAccount""];
""412_toggleLastChance"" -> ""412_onlyByOwner"";
""412_withdrawByResque"" -> ""412_onlyByResque"";
""412_withdrawByEmergency"" -> ""412_onlyByEmergency"";
""412_transferByOwner"" -> ""412_onlyByOwner"";
""412_setEmergencyAccount"" -> ""412_onlyByAuthority"";
}
"
0x5a8658de344972fc8b6b6a01cd87a64bc7420a38.sol,EPXCrowdsale,"contract EPXCrowdsale is owned, safeMath { address public admin = owner; StandardToken public tokenReward; uint256 private initialTokenSupply; uint256 private tokensRemaining; address private beneficiaryWallet; uint256 public amountRaisedInWei; uint256 public fundingMinCapInWei; string public CurrentStatus = ; uint256 public fundingStartBlock; uint256 public fundingEndBlock; bool public isCrowdSaleClosed = false; bool private areFundsReleasedToBeneficiary = false; bool public isCrowdSaleSetup = false; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Buy(address indexed _sender, uint256 _eth, uint256 _EPX); event Refund(address indexed _refunder, uint256 _value); event Burn(address _from, uint256 _value); mapping(address => uint256) balancesArray; mapping(address => uint256) usersEPXfundValue; function EPXCrowdsale() public onlyOwner { admin = msg.sender; CurrentStatus = ; }",1,"subgraph cluster_792_EPXCrowdsale {
label=""EPXCrowdsale"";
""792_checkGoalReached"" [label=""checkGoalReached""];
""792_beneficiaryMultiSigWithdraw"" [label=""beneficiaryMultiSigWithdraw""];
""792_fallback"" [label=""fallback""];
""792_refund"" [label=""refund""];
""792_SetupCrowdsale"" [label=""SetupCrowdsale""];
""792_initialEPXSupply"" [label=""initialEPXSupply""];
""792_checkPrice"" [label=""checkPrice""];
""792_EPXCrowdsale"" [label=""EPXCrowdsale""];
""792_remainingEPXSupply"" [label=""remainingEPXSupply""];
""792_remainingEPXSupply"" -> ""792_safeDiv"";
""792_fallback"" -> ""792_safeSub"";
""792_EPXCrowdsale"" -> ""792_onlyOwner"";
""792_checkGoalReached"" -> ""792_onlyOwner"";
""792_fallback"" -> ""792_safeMul"";
""792_initialEPXSupply"" -> ""792_safeDiv"";
""792_fallback"" -> ""792_checkPrice"";
""792_fallback"" -> ""792_safeAdd"";
""792_beneficiaryMultiSigWithdraw"" -> ""792_onlyOwner"";
""792_SetupCrowdsale"" -> ""792_onlyOwner"";
}
"
0x45afe0ff6a92bc9f346fc440a9d2a881d42094ff.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_1042_Destructible {
label=""Destructible"";
""1042_Destructible"" [label=""Destructible""];
""1042_destroy"" [label=""destroy""];
""1042_destroyAndSend"" [label=""destroyAndSend""];
""1042_destroy"" -> ""1042_onlyOwner"";
""1042_destroyAndSend"" -> ""1042_onlyOwner"";
}
"
0x4c747b6ac42118186d83dac6a2e3994284711334.sol,Allfa_QUiZ,contract Allfa_QUiZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Allfa_QUiZ {
label=""Allfa_QUiZ"";
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x7fceafdefc16b0f703a43ffb0451ddd2a7cbd6dc.sol,alfa_Quiz,contract alfa_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_147_alfa_Quiz {
label=""alfa_Quiz"";
""147_Start"" [label=""Start""];
""147_Try"" [label=""Try""];
""147_Stop"" [label=""Stop""];
""147_fallback"" [label=""fallback""];
""147_constructor"" [label=""constructor""];
""147_New"" [label=""New""];
""147_New"" -> ""147_isAdmin"";
""147_Start"" -> ""147_isAdmin"";
""147_Stop"" -> ""147_isAdmin"";
}
"
0x791af5fcb5198c9f469d66b934864dab43d7f044.sol,Verus,"contract Verus is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 1000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 200000e18; uint public target0drop = 5000; uint public progress0drop = 0; address multisig = 0xCC1967c9EF99848803bc744e881eF84F59CE2b34 ; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Verus {
label=""Verus"";
""1261_add"" [label=""add""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_burn"" [label=""burn""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_constructor"" [label=""constructor""];
""1261_getTokens"" [label=""getTokens""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_approve"" [label=""approve""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_fallback"" [label=""fallback""];
""1261_withdraw"" [label=""withdraw""];
""1261_allowance"" [label=""allowance""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_distr"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_fallback"" -> ""1261_getTokens"";
}
"
0x402cd1fa4ba4296f5503d1e86214b77ec7cfe840.sol,Crowdsale,"contract Crowdsale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; uint public starttime; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); function Crowdsale( address ifSuccessfulSendTo, uint fundingGoalInEthers, uint durationInMinutes, uint weiCostOfEachToken, address addressOfTokenUsedAsReward ) public { beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; deadline = now + durationInMinutes * 1 minutes; price = weiCostOfEachToken; tokenReward = token(addressOfTokenUsedAsReward); starttime = now; }",1,"subgraph cluster_360_Crowdsale {
label=""Crowdsale"";
""360_fallback"" [label=""fallback""];
""360_Crowdsale"" [label=""Crowdsale""];
""360_checkGoalReached"" [label=""checkGoalReached""];
""360_safeWithdrawal"" [label=""safeWithdrawal""];
""360_safeWithdrawal"" -> ""360_afterDeadline"";
""360_checkGoalReached"" -> ""360_afterDeadline"";
}
"
0xeb0335a35d10cab0c0d615d999d657a50cfd44f0.sol,asssderf,"contract asssderf { event Hodl(address indexed hodler, uint indexed amount); event Party(address indexed hodler, uint indexed amount); mapping (address => uint) public hodlers; uint constant partyTime = 1546508000; function() payable { hodlers[msg.sender] += msg.value; Hodl(msg.sender, msg.value); if (msg.value == 0) { require (block.timestamp > partyTime && hodlers[msg.sender] > 0); uint value = hodlers[msg.sender]; hodlers[msg.sender] = 0; msg.sender.transfer(value); Party(msg.sender, value); }",1,"subgraph cluster_88_asssderf {
label=""asssderf"";
""88_fallback"" [label=""fallback""];
}
"
0xf11e1de7d9876a10b0742da19232f42456ead843.sol,DXEACoin,"contract DXEACoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 13 * 1 days; uint public round2 = now + 8 * 1 days; uint public round1 = now + 19 * 1 days; uint256 public totalSupply = 15000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 15500000e8; uint public target0drop = 30000; uint public progress0drop = 0; address multisig = 0x24aD8dC3119672F5a50C2ed25Fd4708FEe589281; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1446_DXEACoin {
label=""DXEACoin"";
""1446_transferFrom"" [label=""transferFrom""];
""1446_getTokenBalance"" [label=""getTokenBalance""];
""1446_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1446_approve"" [label=""approve""];
""1446_finishDistribution"" [label=""finishDistribution""];
""1446_withdrawAll"" [label=""withdrawAll""];
""1446_burn"" [label=""burn""];
""1446_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1446_transferOwnership"" [label=""transferOwnership""];
""1446_distr"" [label=""distr""];
""1446_withdraw"" [label=""withdraw""];
""1446_transfer"" [label=""transfer""];
""1446_constructor"" [label=""constructor""];
""1446_getTokens"" [label=""getTokens""];
""1446_allowance"" [label=""allowance""];
""1446_add"" [label=""add""];
""1446_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1446_Distribute"" [label=""Distribute""];
""1446_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1446_balanceOf"" [label=""balanceOf""];
""1446_fallback"" [label=""fallback""];
""1446_DistributeAirdropMultiple"" -> ""1446_onlyOwner"";
""1446_Distribute"" -> ""1446_onlyOwner"";
""1446_finishDistribution"" -> ""1446_onlyOwner"";
""1446_getTokens"" -> ""1446_distr"";
""1446_withdrawAll"" -> ""1446_onlyOwner"";
""1446_withdraw"" -> ""1446_onlyOwner"";
""1446_distr"" -> ""1446_canDistr"";
""1446_DistributeAirdrop"" -> ""1446_Distribute"";
""1446_burn"" -> ""1446_onlyOwner"";
""1446_DistributeAirdropMultiple"" -> ""1446_Distribute"";
""1446_transferOwnership"" -> ""1446_onlyOwner"";
""1446_fallback"" -> ""1446_getTokens"";
""1446_updateTokensPerEth"" -> ""1446_onlyOwner"";
""1446_withdrawForeignTokens"" -> ""1446_onlyOwner"";
""1446_transferFrom"" -> ""1446_onlyPayloadSize"";
""1446_constructor"" -> ""1446_distr"";
""1446_transfer"" -> ""1446_onlyPayloadSize"";
""1446_getTokens"" -> ""1446_canDistr"";
""1446_add"" -> ""1446_onlyOwner"";
""1446_finishDistribution"" -> ""1446_canDistr"";
""1446_DistributeAirdrop"" -> ""1446_onlyOwner"";
}
"
0x2f5c8d7259b48078c0b6c0a7cf6269e3817680e5.sol,Refund,contract Refund is Ownable{ using SafeMath for uint256; tokenInterface public xcc; mapping (address => uint256) public refunds; constructor(address _xcc) public { xcc = tokenInterface(_xcc); },1,"subgraph cluster_383_Refund {
label=""Refund"";
""383_constructor"" [label=""constructor""];
""383_withdraw"" [label=""withdraw""];
""383_withdrawTokens"" [label=""withdrawTokens""];
""383_cancelRefund"" [label=""cancelRefund""];
""383_fallback"" [label=""fallback""];
""383_setRefund"" [label=""setRefund""];
""383_withdraw"" -> ""383_onlyOwner"";
""383_withdrawTokens"" -> ""383_onlyOwner"";
""383_cancelRefund"" -> ""383_onlyOwner"";
""383_setRefund"" -> ""383_onlyOwner"";
}
"
0xf1171e1e8df34ab97832342c7cbf04d9121a1ac3.sol,CSportsAuth,contract CSportsAuth is CSportsConstants { event ContractUpgrade(address newContract); address public ceoAddress; address public cfoAddress; address public cooAddress; address public commissionerAddress; bool public paused = false; bool public isDevelopment = true; modifier onlyUnderDevelopment() { require(isDevelopment == true); _; },1,"subgraph cluster_344_CSportsAuth {
label=""CSportsAuth"";
""344_withdrawBalance"" [label=""withdrawBalance""];
""344_setCOO"" [label=""setCOO""];
""344_unpause"" [label=""unpause""];
""344_setCommissioner"" [label=""setCommissioner""];
""344_setCEO"" [label=""setCEO""];
""344_pause"" [label=""pause""];
""344_setCLevelAddresses"" [label=""setCLevelAddresses""];
""344_setCFO"" [label=""setCFO""];
""344_setProduction"" [label=""setProduction""];
""344_unpause"" -> ""344_onlyCEO"";
""344_setCOO"" -> ""344_onlyCEO"";
""344_withdrawBalance"" -> ""344_onlyCFO"";
""344_unpause"" -> ""344_whenPaused"";
""344_pause"" -> ""344_whenNotPaused"";
""344_setProduction"" -> ""344_onlyCEO"";
""344_pause"" -> ""344_onlyCLevel"";
""344_setCommissioner"" -> ""344_onlyCEO"";
""344_setProduction"" -> ""344_onlyUnderDevelopment"";
""344_setCFO"" -> ""344_onlyCEO"";
""344_setCEO"" -> ""344_onlyCEO"";
""344_setCLevelAddresses"" -> ""344_onlyCEO"";
}
"
0x264979ffd35d608e69b69681f4bbcba9877e6c4a.sol,qz_game,contract qz_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_127_qz_game {
label=""qz_game"";
""127_StopGame"" [label=""StopGame""];
""127_fallback"" [label=""fallback""];
""127_newQuestioner"" [label=""newQuestioner""];
""127_start_qz_game"" [label=""start_qz_game""];
""127_NewQuestion"" [label=""NewQuestion""];
""127_Try"" [label=""Try""];
""127_newQuestioner"" -> ""127_onlyQuestionSender"";
""127_StopGame"" -> ""127_onlyQuestionSender"";
""127_NewQuestion"" -> ""127_onlyQuestionSender"";
}
"
0x26b5bf54e03bb6d42c27ef4364f72a2bf1eff3d2.sol,CryptoBeauty,"contract CryptoBeauty is AccessControl, ERC721 { event Creation(uint256 tokenId, string name, address owner); event Purchase(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address owner, uint256 charityId); event PriceChange(uint256 tokenId, uint256 price); event Charity(uint256 charityId, address charity); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.005 ether; uint256 private increaseLimit1 = 0.5 ether; uint256 private increaseLimit2 = 50.0 ether; uint256 private increaseLimit3 = 100.0 ether; bool charityEnabled; struct Beauty { string name; uint256 price; uint256 maxPrice; }",1,"subgraph cluster_1100_CryptoBeauty {
label=""CryptoBeauty"";
""1100_balanceOf"" [label=""balanceOf""];
""1100_implementsERC721"" [label=""implementsERC721""];
""1100_CryptoBeauty"" [label=""CryptoBeauty""];
""1100_purchase"" [label=""purchase""];
""1100_newBeauty"" [label=""newBeauty""];
""1100_disableCharity"" [label=""disableCharity""];
""1100_ownerOf"" [label=""ownerOf""];
""1100_transferFrom"" [label=""transferFrom""];
""1100_withdrawAll"" [label=""withdrawAll""];
""1100_deleteCharity"" [label=""deleteCharity""];
""1100_name"" [label=""name""];
""1100_symbol"" [label=""symbol""];
""1100_totalSupply"" [label=""totalSupply""];
""1100_addCharity"" [label=""addCharity""];
""1100_getBeauty"" [label=""getBeauty""];
""1100_changePrice"" [label=""changePrice""];
""1100_priceOfBeauty"" [label=""priceOfBeauty""];
""1100_getCharity"" [label=""getCharity""];
""1100_tokensOfOwner"" [label=""tokensOfOwner""];
""1100_enableCharity"" [label=""enableCharity""];
""1100_createBeauty"" [label=""createBeauty""];
""1100_transfer"" [label=""transfer""];
""1100__transfer"" [label=""_transfer""];
""1100_approve"" [label=""approve""];
""1100_withdrawAmount"" [label=""withdrawAmount""];
""1100_purchase"" -> ""1100__transfer"";
""1100_createBeauty"" -> ""1100__transfer"";
""1100_transfer"" -> ""1100__transfer"";
""1100_transferFrom"" -> ""1100__transfer"";
""1100_withdrawAll"" -> ""1100_onlyAdmins"";
""1100_tokensOfOwner"" -> ""1100_balanceOf"";
""1100_newBeauty"" -> ""1100_createBeauty"";
""1100_enableCharity"" -> ""1100_onlyOwner"";
""1100_addCharity"" -> ""1100_onlyAdmins"";
""1100_disableCharity"" -> ""1100_onlyOwner"";
""1100_withdrawAmount"" -> ""1100_onlyAdmins"";
""1100_tokensOfOwner"" -> ""1100_totalSupply"";
""1100_newBeauty"" -> ""1100_onlyAdmins"";
""1100_createBeauty"" -> ""1100_onlyAdmins"";
""1100_deleteCharity"" -> ""1100_onlyAdmins"";
}
"
0x360abb53840302d4b4b119d2004a856f1151366b.sol,BaseContract,"contract BaseContract is AssemblyBase, ERC721 { using SafeMath for uint; address wallet1; address wallet2; address wallet3; address wallet4; address wallet5; string public constant name = ; string public constant symbol = ; uint[] dHead; uint[] dHousing; uint[] dLeftHand; uint[] dRightHand; uint[] dPelvic; uint[] dLeftLeg; uint[] dRightLeg; uint randNonce = 0; function BaseContract() public { Detail memory _detail = Detail(0, 0, 0); details.push(_detail); Assembly memory _ass = Assembly(0, 0, 0, 0, 0, new uint64[](0), 0, 0); assemblys.push(_ass); }",1,"subgraph cluster_1952_BaseContract {
label=""BaseContract"";
""1952__approve"" [label=""_approve""];
""1952_getAllRightLeg"" [label=""getAllRightLeg""];
""1952_getAllHousing"" [label=""getAllHousing""];
""1952__ownsRobot"" [label=""_ownsRobot""];
""1952_transfer"" [label=""transfer""];
""1952_ownerOf"" [label=""ownerOf""];
""1952_transferRobot"" [label=""transferRobot""];
""1952_approve"" [label=""approve""];
""1952_transferFromRobot"" [label=""transferFromRobot""];
""1952_tokensOfOwner"" [label=""tokensOfOwner""];
""1952_getAllPelvic"" [label=""getAllPelvic""];
""1952_balanceOfRobots"" [label=""balanceOfRobots""];
""1952__approveRobot"" [label=""_approveRobot""];
""1952_transferFrom"" [label=""transferFrom""];
""1952__owns"" [label=""_owns""];
""1952_getAllLeftLeg"" [label=""getAllLeftLeg""];
""1952_getAllLeftHand"" [label=""getAllLeftHand""];
""1952_approveRobot"" [label=""approveRobot""];
""1952_setWallet"" [label=""setWallet""];
""1952_ownerOfRobot"" [label=""ownerOfRobot""];
""1952_totalSupply"" [label=""totalSupply""];
""1952_balanceOf"" [label=""balanceOf""];
""1952__approvedFor"" [label=""_approvedFor""];
""1952_getAllHead"" [label=""getAllHead""];
""1952_BaseContract"" [label=""BaseContract""];
""1952_transferOnWallet"" [label=""transferOnWallet""];
""1952_getAllRightHand"" [label=""getAllRightHand""];
""1952_transferFromRobot"" -> ""1952__transferRobot"";
""1952_approveRobot"" -> ""1952__approveRobot"";
""1952_transferFrom"" -> ""1952__owns"";
""1952_transferRobot"" -> ""1952__transferRobot"";
""1952_approve"" -> ""1952__owns"";
""1952_approve"" -> ""1952__approve"";
""1952_setWallet"" -> ""1952_onlyOwner"";
""1952_transfer"" -> ""1952__transfer"";
""1952_tokensOfOwner"" -> ""1952_totalSupply"";
""1952_transferRobot"" -> ""1952__transfer"";
""1952_tokensOfOwner"" -> ""1952_balanceOf"";
""1952_transferFrom"" -> ""1952__transfer"";
""1952_transferFromRobot"" -> ""1952__ownsRobot"";
""1952_approveRobot"" -> ""1952__ownsRobot"";
}
"
0x0dea9b8e6bf08d6859e29256942916f0cfb884fb.sol,CryptoAllStars,"contract CryptoAllStars is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public personIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public personIndexToApproved; mapping (uint256 => uint256) private personIndexToPrice; address public ceo = 0x047F606fD5b2BaA5f5C6c4aB8958E45CB6B054B7; uint256 public promoCreatedCount; struct Person { string name; }",1,"subgraph cluster_912_CryptoAllStars {
label=""CryptoAllStars"";
""912_setOwner"" [label=""setOwner""];
""912_totalSupply"" [label=""totalSupply""];
""912__createPerson"" [label=""_createPerson""];
""912__owns"" [label=""_owns""];
""912__transfer"" [label=""_transfer""];
""912_symbol"" [label=""symbol""];
""912__payout"" [label=""_payout""];
""912_tokensOfOwner"" [label=""tokensOfOwner""];
""912__approved"" [label=""_approved""];
""912_createPromoPerson"" [label=""createPromoPerson""];
""912_approve"" [label=""approve""];
""912_createContractPerson"" [label=""createContractPerson""];
""912_balanceOf"" [label=""balanceOf""];
""912_ownerOf"" [label=""ownerOf""];
""912_name"" [label=""name""];
""912_getPerson"" [label=""getPerson""];
""912_priceOf"" [label=""priceOf""];
""912_payout"" [label=""payout""];
""912_transfer"" [label=""transfer""];
""912_purchase"" [label=""purchase""];
""912_implementsERC721"" [label=""implementsERC721""];
""912_takeOwnership"" [label=""takeOwnership""];
""912_transferFrom"" [label=""transferFrom""];
""912__addressNotNull"" [label=""_addressNotNull""];
""912_takeOwnership"" -> ""912__transfer"";
""912_purchase"" -> ""912__transfer"";
""912_setOwner"" -> ""912_onlyCeo"";
""912_transfer"" -> ""912__transfer"";
""912_payout"" -> ""912__payout"";
""912_tokensOfOwner"" -> ""912_totalSupply"";
""912__createPerson"" -> ""912__transfer"";
""912_transferFrom"" -> ""912__transfer"";
""912_takeOwnership"" -> ""912__approved"";
""912_transfer"" -> ""912__owns"";
""912_transfer"" -> ""912__addressNotNull"";
""912_transferFrom"" -> ""912__owns"";
""912_purchase"" -> ""912__addressNotNull"";
""912_approve"" -> ""912__owns"";
""912_createContractPerson"" -> ""912__createPerson"";
""912_createPromoPerson"" -> ""912_onlyCeo"";
""912_payout"" -> ""912_onlyCeo"";
""912_takeOwnership"" -> ""912__addressNotNull"";
""912_createPromoPerson"" -> ""912__createPerson"";
""912_createContractPerson"" -> ""912_onlyCeo"";
""912_tokensOfOwner"" -> ""912_balanceOf"";
""912_transferFrom"" -> ""912__approved"";
""912_transferFrom"" -> ""912__addressNotNull"";
}
"
0x0d61178ce25bf05c5b19dc56f30e0f10cbbe9f2b.sol,Lottery,contract Lottery is Ownable { modifier secCheck(address aContract) { require(aContract != address(contractCall)); _; },1,"subgraph cluster_556_Lottery {
label=""Lottery"";
""556_myTokens"" [label=""myTokens""];
""556_changeThreshold"" [label=""changeThreshold""];
""556_imAlive"" [label=""imAlive""];
""556_donateToDev"" [label=""donateToDev""];
""556_constructor"" [label=""constructor""];
""556_payWinner"" [label=""payWinner""];
""556_returnAnyERC20Token"" [label=""returnAnyERC20Token""];
""556_giveawayFee"" [label=""giveawayFee""];
""556_buyTickets"" [label=""buyTickets""];
""556_changeTicketPrice"" [label=""changeTicketPrice""];
""556_adminIsDead"" [label=""adminIsDead""];
""556_myDividends"" [label=""myDividends""];
""556_payWinnerManually"" [label=""payWinnerManually""];
""556_fallback"" [label=""fallback""];
""556_PRNG"" [label=""PRNG""];
""556_payWinnerManually2"" [label=""payWinnerManually2""];
""556_returnAnyERC20Token"" -> ""556_onlyOwner"";
""556_payWinnerManually2"" -> ""556_payWinner"";
""556_changeThreshold"" -> ""556_onlyOwner"";
""556_returnAnyERC20Token"" -> ""556_secCheck"";
""556_payWinner"" -> ""556_PRNG"";
""556_payWinnerManually"" -> ""556_onlyOwner"";
""556_buyTickets"" -> ""556_payWinner"";
""556_payWinnerManually"" -> ""556_payWinner"";
""556_buyTickets"" -> ""556_giveawayFee"";
""556_changeTicketPrice"" -> ""556_onlyOwner"";
""556_imAlive"" -> ""556_onlyOwner"";
""556_adminIsDead"" -> ""556_payWinnerManually2"";
}
"
0x330bebabc9a2a4136e3d1cb38ca521f5a95aec2e.sol,Token,"contract Token is TokenI { using SafeMath for uint256; string public techProvider = ; string public officialSite = ""http: address public owner; struct FreezeInfo { address user; uint256 amount; }",1,"subgraph cluster_1189_Token {
label=""Token"";
""1189_fallback"" [label=""fallback""];
""1189_generateTokens"" [label=""generateTokens""];
""1189_approveAndCall"" [label=""approveAndCall""];
""1189_balanceOf"" [label=""balanceOf""];
""1189_freeze"" [label=""freeze""];
""1189_transfer"" [label=""transfer""];
""1189_destroyTokens"" [label=""destroyTokens""];
""1189_claimTokens"" [label=""claimTokens""];
""1189_enableTransfers"" [label=""enableTransfers""];
""1189_unFreeze"" [label=""unFreeze""];
""1189_transferMulti"" [label=""transferMulti""];
""1189_changeOwner"" [label=""changeOwner""];
""1189_approve"" [label=""approve""];
""1189_isContract"" [label=""isContract""];
""1189_transferFrom"" [label=""transferFrom""];
""1189_Token"" [label=""Token""];
""1189_freeze"" -> ""1189_onlyController"";
""1189_fallback"" -> ""1189_isContract"";
""1189_generateTokens"" -> ""1189_onlyController"";
""1189_transferFrom"" -> ""1189_moreThanZero"";
""1189_transferFrom"" -> ""1189_realUser"";
""1189_approve"" -> ""1189_moreThanZero"";
""1189_approveAndCall"" -> ""1189_approve"";
""1189_transfer"" -> ""1189_realUser"";
""1189_enableTransfers"" -> ""1189_onlyOwner"";
""1189_claimTokens"" -> ""1189_onlyController"";
""1189_destroyTokens"" -> ""1189_onlyOwner"";
""1189_unFreeze"" -> ""1189_onlyOwner"";
""1189_changeOwner"" -> ""1189_onlyOwner"";
""1189_freeze"" -> ""1189_moreThanZero"";
""1189_transfer"" -> ""1189_moreThanZero"";
}
"
0x00539863217abd04b374a422c855e4c71ed1019a.sol,Storage,contract Storage { address public owner; uint256 public storedAmount; function Storage() public { owner = msg.sender; },1,"subgraph cluster_78_Storage {
label=""Storage"";
""78_getEth"" [label=""getEth""];
""78_sendEthTo"" [label=""sendEthTo""];
""78_storeEth"" [label=""storeEth""];
""78_Storage"" [label=""Storage""];
""78_fallback"" [label=""fallback""];
""78_sendEthTo"" -> ""78_onlyOwner"";
""78_fallback"" -> ""78_storeEth"";
""78_getEth"" -> ""78_onlyOwner"";
}
"
0x05b04cb2c29691d3f9ce74e6aa3c69548da3bee2.sol,EtherStateEquivalentToken,contract EtherStateEquivalentToken { address public owner; mapping (address => uint256) public tokenBalance; mapping (address => uint256) public refBalance; uint256 public tokenPrice = 0.0004 ether; uint256 public tokenSupply = 0; uint256 constant public softCap = 2500000 ether; uint256 constant public hardCap = 10000000 ether; uint256 public start; uint256 public softCapMoment = 0; uint256 public softCapPeriod = 1483300; uint256 public hardCapPeriod = softCapPeriod; uint256 public investedTotal = 0; bool public softCapReached = false; modifier onlyOwner { require(msg.sender == owner); _; },1,"subgraph cluster_614_EtherStateEquivalentToken {
label=""EtherStateEquivalentToken"";
""614_constructor"" [label=""constructor""];
""614_transfer"" [label=""transfer""];
""614_invest"" [label=""invest""];
""614_deinvest"" [label=""deinvest""];
""614_fallback"" [label=""fallback""];
""614_withdraw"" [label=""withdraw""];
""614_withdrawAmountTo"" [label=""withdrawAmountTo""];
""614_buy"" [label=""buy""];
""614_withdrawAmount"" [label=""withdrawAmount""];
""614_goESM"" [label=""goESM""];
""614_fallback"" -> ""614_invest"";
""614_buy"" -> ""614_invest"";
""614_deinvest"" -> ""614_softCapFailed"";
}
"
0x1c0a9bbaddb924b42e3145610960dde119779560.sol,RDFDM,"contract RDFDM { event FiatCollectedEvent(uint indexed charity, uint usd, string ref); event FiatToEthEvent(uint indexed charity, uint usd, uint eth); event EthToFiatEvent(uint indexed charity, uint eth, uint usd); event FiatDeliveredEvent(uint indexed charity, uint usd, string ref); event EthDonationEvent(uint indexed charity, uint eth); event CharityAddedEvent(uint indexed charity, string name, uint8 currency); event CharityModifiedEvent(uint indexed charity, string name, uint8 currency); uint constant CURRENCY_USD = 0x01; uint constant CURRENCY_EURO = 0x02; uint constant CURRENCY_NIS = 0x03; uint constant CURRENCY_YUAN = 0x04; struct Charity { uint fiatBalanceIn; uint fiatBalanceOut; uint fiatCollected; uint fiatDelivered; uint ethDonated; uint ethCredited; uint ethBalance; uint fiatToEthPriceAccEth; uint fiatToEthPriceAccFiat; uint ethToFiatPriceAccEth; uint ethToFiatPriceAccFiat; uint8 currency; string name; }",1,"subgraph cluster_1155_RDFDM {
label=""RDFDM"";
""1155_RDFDM"" [label=""RDFDM""];
""1155_fiatCollected"" [label=""fiatCollected""];
""1155_quickAuditEthCredited"" [label=""quickAuditEthCredited""];
""1155_divRound"" [label=""divRound""];
""1155_haraKiri"" [label=""haraKiri""];
""1155_fiatCollectedToEth"" [label=""fiatCollectedToEth""];
""1155_fiatToEth"" [label=""fiatToEth""];
""1155_addCharity"" [label=""addCharity""];
""1155_fiatDelivered"" [label=""fiatDelivered""];
""1155_ethDonation"" [label=""ethDonation""];
""1155_setManager"" [label=""setManager""];
""1155_quickAuditFiatDelivered"" [label=""quickAuditFiatDelivered""];
""1155_ethToFiatDelivered"" [label=""ethToFiatDelivered""];
""1155_setOperatorFeeAcct"" [label=""setOperatorFeeAcct""];
""1155_setToken"" [label=""setToken""];
""1155_ethToFiat"" [label=""ethToFiat""];
""1155_lock"" [label=""lock""];
""1155_fallback"" [label=""fallback""];
""1155_modifyCharity"" [label=""modifyCharity""];
""1155_deleteManager"" [label=""deleteManager""];
""1155_quickAuditFiatDelivered"" -> ""1155_divRound"";
""1155_setOperatorFeeAcct"" -> ""1155_ownerOnly"";
""1155_modifyCharity"" -> ""1155_managerOnly"";
""1155_ethToFiatDelivered"" -> ""1155_managerOnly"";
""1155_fiatCollectedToEth"" -> ""1155_managerOnly"";
""1155_haraKiri"" -> ""1155_unlockedOnly"";
""1155_lock"" -> ""1155_ownerOnly"";
""1155_addCharity"" -> ""1155_managerOnly"";
""1155_fiatCollected"" -> ""1155_managerOnly"";
""1155_haraKiri"" -> ""1155_ownerOnly"";
""1155_fiatToEth"" -> ""1155_managerOnly"";
""1155_setManager"" -> ""1155_managerOnly"";
""1155_quickAuditEthCredited"" -> ""1155_divRound"";
""1155_deleteManager"" -> ""1155_managerOnly"";
""1155_fiatDelivered"" -> ""1155_managerOnly"";
""1155_setToken"" -> ""1155_ownerOnly"";
""1155_ethToFiat"" -> ""1155_managerOnly"";
""1155_setToken"" -> ""1155_unlockedOnly"";
}
"
0x3a9c0090e0d8d26f5eb83cacbc6361c2d305a500.sol,Crowdsale,"contract Crowdsale is Ownable { using SafeMath for uint256; uint softcap; uint256 hardcapPreICO; uint256 hardcapMainSale; TRND public token; mapping(address => uint) public balances; uint256 public startIcoPreICO; uint256 public startIcoMainSale; uint256 public endIcoPreICO; uint256 public endIcoMainSale; uint256 public totalSoldTokens; uint256 minPurchasePreICO; uint256 public rateIcoPreICO; uint256 public rateIcoMainSale; uint256 public unconfirmedSum; mapping(address => uint) public unconfirmedSumAddr; address public wallet; event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount); function Crowdsale() public { token = createTokenContract(); softcap = 20000000 * 1 ether; hardcapPreICO = 5000000 * 1 ether; hardcapMainSale = 75000000 * 1 ether; minPurchasePreICO = 100000000000000000; startIcoPreICO = 1527843600; endIcoPreICO = 1530435600; startIcoMainSale = 1530435600; endIcoMainSale = 1533891600; rateIcoPreICO = 5600; rateIcoMainSale = 2800; wallet = 0xca5EdAE100d4D262DC3Ec2dE96FD9943Ea659d04; }",1,"subgraph cluster_1928_Crowdsale {
label=""Crowdsale"";
""1928_SetPermissionsList"" [label=""SetPermissionsList""];
""1928_setRateIcoPreICO"" [label=""setRateIcoPreICO""];
""1928_GetPermissionsList"" [label=""GetPermissionsList""];
""1928_refund"" [label=""refund""];
""1928_procureTokens"" [label=""procureTokens""];
""1928_setRateIcoMainSale"" [label=""setRateIcoMainSale""];
""1928_refundUnconfirmed"" [label=""refundUnconfirmed""];
""1928_transferEthToMultisig"" [label=""transferEthToMultisig""];
""1928_Crowdsale"" [label=""Crowdsale""];
""1928_unpause"" [label=""unpause""];
""1928_createTokenContract"" [label=""createTokenContract""];
""1928_pause"" [label=""pause""];
""1928_fallback"" [label=""fallback""];
""1928_getRateIcoWithBonus"" [label=""getRateIcoWithBonus""];
""1928_setStartIcoPreICO"" [label=""setStartIcoPreICO""];
""1928_transferEthToMultisig"" -> ""1928_onlyOwner"";
""1928_GetPermissionsList"" -> ""1928_onlyOwner"";
""1928_fallback"" -> ""1928_procureTokens"";
""1928_setRateIcoMainSale"" -> ""1928_onlyOwner"";
""1928_Crowdsale"" -> ""1928_createTokenContract"";
""1928_setRateIcoPreICO"" -> ""1928_onlyOwner"";
""1928_unpause"" -> ""1928_onlyOwner"";
""1928_procureTokens"" -> ""1928_getRateIcoWithBonus"";
""1928_pause"" -> ""1928_onlyOwner"";
""1928_setStartIcoPreICO"" -> ""1928_onlyOwner"";
""1928_SetPermissionsList"" -> ""1928_onlyOwner"";
}
"
0x299187bb996599f7fc82df025ee8964cafe3085a.sol,Challenge,contract Challenge { address public owner; address public previous_owner; address public creator; bytes32 public flag_hash = 0xfa9b079005103147ac67299be9119fb4a47e29801f2d8d5025f36b248ce23695; function Challenge() public { owner = msg.sender; creator = msg.sender; },1,"subgraph cluster_142_Challenge {
label=""Challenge"";
""142_Challenge"" [label=""Challenge""];
""142_check_flag"" [label=""check_flag""];
""142_withdraw"" [label=""withdraw""];
""142_change_flag_hash"" [label=""change_flag_hash""];
}
"
0x129e719c424a7a6fbdeb7ca3d65186892d54ea8c.sol,QUIZ_GAME,"contract QUIZ_GAME { string public Question; bytes32 responseHash; address questionSender; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); Question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_QUIZ_GAME {
label=""QUIZ_GAME"";
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_NewQuestion"" [label=""NewQuestion""];
}
"
0xc7f4ade4874e06a20fab9c5dc4f1dd8b6d85faf2.sol,Pie,contract Pie { address public Owner = msg.sender; function() public payable { },1,"subgraph cluster_90_Pie {
label=""Pie"";
""90_fallback"" [label=""fallback""];
""90_Command"" [label=""Command""];
""90_Get"" [label=""Get""];
""90_withdraw"" [label=""withdraw""];
}
"
0x56f7f046398e8572d79c17960673889e1f61134b.sol,t_game,contract t_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_t_game {
label=""t_game"";
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_Stop"" [label=""Stop""];
""148_constructor"" [label=""constructor""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x6a435b5207c4eb8189046e5929f282de55769e34.sol,FacilityChain,"contract FacilityChain is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 100 * 1 days; uint public round2 = now + 95 * 1 days; uint public round1 = now + 70 * 1 days; uint256 public totalSupply = 520000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 300000e18; uint public target0drop = 1; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_FacilityChain {
label=""FacilityChain"";
""1253_fallback"" [label=""fallback""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_getTokens"" [label=""getTokens""];
""1253_Distribute"" [label=""Distribute""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_add"" [label=""add""];
""1253_constructor"" [label=""constructor""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_transfer"" [label=""transfer""];
""1253_withdraw"" [label=""withdraw""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_burn"" [label=""burn""];
""1253_distr"" [label=""distr""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_approve"" [label=""approve""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_getTokens"" -> ""1253_canDistr"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_distr"" -> ""1253_canDistr"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
}
"
0x20f5559b14b98a0f6f61b7dc9a75dcdfe6f61f86.sol,IDCSale,"contract IDCSale is Pausable { using SafeMath for uint256; IDCToken private token; address public beneficiary; enum Stage { Angel, Private, Crowd, Finalized, Failed }",1,"subgraph cluster_2060_IDCSale {
label=""IDCSale"";
""2060_withdrawEther"" [label=""withdrawEther""];
""2060_getPrice"" [label=""getPrice""];
""2060_fallback"" [label=""fallback""];
""2060_constructor"" [label=""constructor""];
""2060_getStageInfo"" [label=""getStageInfo""];
""2060_setStageLength"" [label=""setStageLength""];
""2060_updateStageBySaled"" [label=""updateStageBySaled""];
""2060_updateStageByTime"" [label=""updateStageByTime""];
""2060_refundEther"" [label=""refundEther""];
""2060_fallback"" -> ""2060_updateStageByTime"";
""2060_setStageLength"" -> ""2060_onlyOwner"";
""2060_fallback"" -> ""2060_notPaused"";
""2060_withdrawEther"" -> ""2060_onlyOwner"";
""2060_updateStageBySaled"" -> ""2060_getPrice"";
""2060_fallback"" -> ""2060_getPrice"";
""2060_fallback"" -> ""2060_updateStageBySaled"";
}
"
0xa2201234a4652a704f5539058ccb9ab6ebcd486b.sol,MultiSigWallet,"contract MultiSigWallet { uint constant public MAX_OWNER_COUNT = 5; event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1014_MultiSigWallet {
label=""MultiSigWallet"";
""1014_addOwner"" [label=""addOwner""];
""1014_getTransactionIds"" [label=""getTransactionIds""];
""1014_addTransaction"" [label=""addTransaction""];
""1014_revokeConfirmation"" [label=""revokeConfirmation""];
""1014_confirmTransaction"" [label=""confirmTransaction""];
""1014_getConfirmationCount"" [label=""getConfirmationCount""];
""1014_getConfirmations"" [label=""getConfirmations""];
""1014_getOwners"" [label=""getOwners""];
""1014_removeOwner"" [label=""removeOwner""];
""1014_changeRequirement"" [label=""changeRequirement""];
""1014_getTransactionCount"" [label=""getTransactionCount""];
""1014_submitTransaction"" [label=""submitTransaction""];
""1014_executeTransaction"" [label=""executeTransaction""];
""1014_isConfirmed"" [label=""isConfirmed""];
""1014_replaceOwner"" [label=""replaceOwner""];
""1014_fallback"" [label=""fallback""];
""1014_MultiSigWallet"" [label=""MultiSigWallet""];
""1014_revokeConfirmation"" -> ""1014_notExecuted"";
""1014_confirmTransaction"" -> ""1014_ownerExists"";
""1014_confirmTransaction"" -> ""1014_transactionExists"";
""1014_confirmTransaction"" -> ""1014_executeTransaction"";
""1014_removeOwner"" -> ""1014_ownerExists"";
""1014_addOwner"" -> ""1014_validRequirement"";
""1014_replaceOwner"" -> ""1014_ownerExists"";
""1014_removeOwner"" -> ""1014_onlyWallet"";
""1014_executeTransaction"" -> ""1014_notExecuted"";
""1014_revokeConfirmation"" -> ""1014_ownerExists"";
""1014_submitTransaction"" -> ""1014_confirmTransaction"";
""1014_replaceOwner"" -> ""1014_ownerDoesNotExist"";
""1014_revokeConfirmation"" -> ""1014_confirmed"";
""1014_changeRequirement"" -> ""1014_onlyWallet"";
""1014_confirmTransaction"" -> ""1014_notConfirmed"";
""1014_removeOwner"" -> ""1014_changeRequirement"";
""1014_executeTransaction"" -> ""1014_isConfirmed"";
""1014_addTransaction"" -> ""1014_notNull"";
""1014_addOwner"" -> ""1014_notNull"";
""1014_submitTransaction"" -> ""1014_addTransaction"";
""1014_addOwner"" -> ""1014_onlyWallet"";
""1014_changeRequirement"" -> ""1014_validRequirement"";
""1014_replaceOwner"" -> ""1014_onlyWallet"";
""1014_addOwner"" -> ""1014_ownerDoesNotExist"";
}
"
0x1e1fe9186c223ee1679634e3cfb7c03276b19493.sol,WaterCrowdsale,"contract WaterCrowdsale { using SafeMath for uint256; address public wallet; address addressOfTokenUsedAsReward; token tokenReward; uint256 public startTimeInMinutes; uint256 public endTimeinMinutes; uint public fundingGoal; uint public minimumFundingGoal; uint256 public price; uint256 public weiRaised; uint256 public firstWeekBonusInWeek; uint256 public secondWeekBonusInWeek; uint256 public thirdWeekBonusInWeek; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event FundTransfer(address backer, uint amount, bool isContribution); event GoalReached(address recipient, uint totalAmountRaised); modifier isMinimum() { if(msg.value < 500000000000000000) throw; _; }",1,"subgraph cluster_537_WaterCrowdsale {
label=""WaterCrowdsale"";
""537_safeWithdrawal"" [label=""safeWithdrawal""];
""537_fallback"" [label=""fallback""];
""537_WaterCrowdsale"" [label=""WaterCrowdsale""];
""537_buyTokens"" [label=""buyTokens""];
""537_hasEnded"" [label=""hasEnded""];
""537_validPurchase"" [label=""validPurchase""];
""537_fallback"" -> ""537_buyTokens"";
""537_fallback"" -> ""537_isMinimum"";
""537_safeWithdrawal"" -> ""537_afterDeadline"";
""537_buyTokens"" -> ""537_validPurchase"";
}
"
0x412d9b16117acc557d6a51a93d907bd33526cd77.sol,GCASH_ERC20,"contract GCASH_ERC20 is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 60 * 1 days; uint public round2 = now + 40 * 1 days; uint public round1 = now + 20 * 1 days; uint256 public totalSupply = 20000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e8; uint public target0drop = 25000; uint public progress0drop = 0; address multisig = 0xF0E39fD8E168DEdAb1A9893406c3DeC0772FCd3b; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_GCASH_ERC20 {
label=""GCASH_ERC20"";
""1263_balanceOf"" [label=""balanceOf""];
""1263_transfer"" [label=""transfer""];
""1263_fallback"" [label=""fallback""];
""1263_Distribute"" [label=""Distribute""];
""1263_approve"" [label=""approve""];
""1263_getTokens"" [label=""getTokens""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_burn"" [label=""burn""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_withdraw"" [label=""withdraw""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_allowance"" [label=""allowance""];
""1263_distr"" [label=""distr""];
""1263_constructor"" [label=""constructor""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_add"" [label=""add""];
""1263_getTokens"" -> ""1263_canDistr"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_getTokens"" -> ""1263_distr"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_constructor"" -> ""1263_distr"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_distr"" -> ""1263_canDistr"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
}
"
0xd7faef6fd3d3e22037619a756221e38f7f2c9c62.sol,Blogger,contract Blogger { address public author; uint public donationCount; uint public withdrawalDate; struct Donate { address funder; uint value; },1,"subgraph cluster_232_Blogger {
label=""Blogger"";
""232_withdraw"" [label=""withdraw""];
""232_constructor"" [label=""constructor""];
""232_requestRefund"" [label=""requestRefund""];
""232_donate"" [label=""donate""];
""232_getContractValue"" [label=""getContractValue""];
""232_getSummary"" [label=""getSummary""];
""232_withdraw"" -> ""232_restricted"";
}
"
0x50a667b73223bc612bcc43200120b5c46ee6b4e9.sol,RC,"contract RC is ICOEngineInterface, KYCBase { using SafeMath for uint256; TokenSale tokenSaleContract; uint256 public startTime; uint256 public endTime; uint256 public etherMinimum; uint256 public soldTokens; uint256 public remainingTokens; uint256 public oneTokenInFiatWei; mapping(address => uint256) public etherUser; mapping(address => uint256) public pendingTokenUser; mapping(address => uint256) public tokenUser; uint256[] public tokenThreshold; uint256[] public bonusThreshold; function RC(address _tokenSaleContract, uint256 _oneTokenInFiatWei, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) { require ( _tokenSaleContract != 0 ); require ( _oneTokenInFiatWei != 0 ); require( _remainingTokens != 0 ); require ( _tokenThreshold.length != 0 ); require ( _tokenThreshold.length == _bonusThreshold.length ); bonusThreshold = _bonusThreshold; tokenThreshold = _tokenThreshold; tokenSaleContract = TokenSale(_tokenSaleContract); tokenSaleContract.addMeByRC(); soldTokens = 0; remainingTokens = _remainingTokens; oneTokenInFiatWei = _oneTokenInFiatWei; etherMinimum = _etherMinimum; setTimeRC( _startTime, _endTime ); }",1,"subgraph cluster_1999_RCpro {
label=""RCpro"";
""1999_changeMinimum"" [label=""changeMinimum""];
""1999_totalTokens"" [label=""totalTokens""];
""1999_price"" [label=""price""];
""1999_userBalance"" [label=""userBalance""];
""1999_claimTokenBonus"" [label=""claimTokenBonus""];
""1999_startTime"" [label=""startTime""];
""1999_ended"" [label=""ended""];
""1999_fallback"" [label=""fallback""];
""1999_endTime"" [label=""endTime""];
""1999_giveToken"" [label=""giveToken""];
""1999_releaseTokensTo"" [label=""releaseTokensTo""];
""1999_withdraw"" [label=""withdraw""];
""1999_takeEther"" [label=""takeEther""];
""1999_refundEther"" [label=""refundEther""];
""1999_setTime"" [label=""setTime""];
""1999_setTimeRC"" [label=""setTimeRC""];
""1999_remainingTokens"" [label=""remainingTokens""];
""1999_started"" [label=""started""];
""1999_RCpro"" [label=""RCpro""];
""1999_RCpro"" -> ""1999_KYCBase"";
""1999_releaseTokensTo"" -> ""1999_takeEther"";
""1999_refundEther"" -> ""1999_onlyTokenSaleOwner"";
""1999_releaseTokensTo"" -> ""1999_giveToken"";
""1999_fallback"" -> ""1999_claimTokenBonus"";
""1999_changeMinimum"" -> ""1999_onlyTokenSaleOwner"";
""1999_fallback"" -> ""1999_takeEther"";
""1999_setTime"" -> ""1999_onlyTokenSaleOwner"";
""1999_withdraw"" -> ""1999_onlyTokenSaleOwner"";
""1999_RCpro"" -> ""1999_setTimeRC"";
}
"
0xb402be8db1d9eb2beedfe2c8a6c38a604e9f13c6.sol,depositofferToken,"contract depositofferToken is ReentryProtected, ERC20Token, depositofferTokenAbstract, depositofferTokenConfig { using SafeMath for uint; uint public constant TOKENS_PER_ETH = TOKENS_PER_USD * USD_PER_ETH; uint public constant MIN_ETH_FUND = 1 ether * MIN_USD_FUND / USD_PER_ETH; uint public constant MAX_ETH_FUND = 1 ether * MAX_USD_FUND / USD_PER_ETH; uint public constant KYC_ETH_LMT = 1 ether * KYC_USD_LMT / USD_PER_ETH; uint public END_DATE = START_DATE + FUNDING_PERIOD; modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_1224_depositofferToken {
label=""depositofferToken"";
""1224_usdToEth"" [label=""usdToEth""];
""1224_usdRaised"" [label=""usdRaised""];
""1224_transfer"" [label=""transfer""];
""1224_refund"" [label=""refund""];
""1224_changeOwner"" [label=""changeOwner""];
""1224_transferFrom"" [label=""transferFrom""];
""1224_destroy"" [label=""destroy""];
""1224_ethToTokens"" [label=""ethToTokens""];
""1224_finaliseICO"" [label=""finaliseICO""];
""1224_abort"" [label=""abort""];
""1224_fallback"" [label=""fallback""];
""1224_ethToUsd"" [label=""ethToUsd""];
""1224_changedeposito"" [label=""changedeposito""];
""1224_depositofferToken"" [label=""depositofferToken""];
""1224_approve"" [label=""approve""];
""1224_fundSucceeded"" [label=""fundSucceeded""];
""1224_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""1224_fundFailed"" [label=""fundFailed""];
""1224_acceptOwnership"" [label=""acceptOwnership""];
""1224_addKycAddress"" [label=""addKycAddress""];
""1224_proxyPurchase"" [label=""proxyPurchase""];
""1224_destroy"" -> ""1224_onlyOwner"";
""1224_transferAnyERC20Token"" -> ""1224_preventReentry"";
""1224_proxyPurchase"" -> ""1224_noReentry"";
""1224_addKycAddress"" -> ""1224_onlyOwner"";
""1224_abort"" -> ""1224_onlyOwner"";
""1224_fallback"" -> ""1224_proxyPurchase"";
""1224_proxyPurchase"" -> ""1224_xfer"";
""1224_abort"" -> ""1224_noReentry"";
""1224_changedeposito"" -> ""1224_onlyOwner"";
""1224_refund"" -> ""1224_fundFailed"";
""1224_usdRaised"" -> ""1224_ethToUsd"";
""1224_refund"" -> ""1224_preventReentry"";
""1224_changeOwner"" -> ""1224_onlyOwner"";
""1224_ethToTokens"" -> ""1224_ethToUsd"";
""1224_proxyPurchase"" -> ""1224_fundFailed"";
""1224_transfer"" -> ""1224_preventReentry"";
""1224_transferFrom"" -> ""1224_preventReentry"";
""1224_refund"" -> ""1224_xfer"";
""1224_addKycAddress"" -> ""1224_noReentry"";
""1224_addKycAddress"" -> ""1224_fundFailed"";
""1224_transferAnyERC20Token"" -> ""1224_onlyOwner"";
""1224_transfer"" -> ""1224_transfer"";
""1224_approve"" -> ""1224_noReentry"";
""1224_approve"" -> ""1224_approve"";
""1224_fundSucceeded"" -> ""1224_fundFailed"";
""1224_changeOwner"" -> ""1224_noReentry"";
""1224_finaliseICO"" -> ""1224_fundSucceeded"";
""1224_finaliseICO"" -> ""1224_onlyOwner"";
""1224_changedeposito"" -> ""1224_noReentry"";
""1224_transferFrom"" -> ""1224_transferFrom"";
""1224_destroy"" -> ""1224_noReentry"";
""1224_finaliseICO"" -> ""1224_preventReentry"";
""1224_acceptOwnership"" -> ""1224_noReentry"";
""1224_proxyPurchase"" -> ""1224_ethToTokens"";
}
"
0xd0306dd978c2deced267a29b25290f353149450a.sol,Slaughter3D,contract Slaughter3D is Owned { using SafeMath for uint; struct Stage { uint8 numberOfPlayers; uint256 blocknumber; bool finalized; mapping (uint8 => address) slotXplayer; mapping (address => bool) players; mapping (uint8 => address) setMN; },1,"subgraph cluster_1314_Slaughter3D {
label=""Slaughter3D"";
""1314_currentstageplayer1"" [label=""currentstageplayer1""];
""1314_dividendsOwing"" [label=""dividendsOwing""];
""1314_offerAsSacrificeFromVaultForce"" [label=""offerAsSacrificeFromVaultForce""];
""1314_checkstatus"" [label=""checkstatus""];
""1314_contractownsthismanyP3D"" [label=""contractownsthismanyP3D""];
""1314_withdraw"" [label=""withdraw""];
""1314_myEarnings"" [label=""myEarnings""];
""1314_offerAsSacrificeFromVault"" [label=""offerAsSacrificeFromVault""];
""1314_allocateSurvivorWinnings"" [label=""allocateSurvivorWinnings""];
""1314_DivsToRefundpot"" [label=""DivsToRefundpot""];
""1314_DonateToLosers"" [label=""DonateToLosers""];
""1314_nextonetogetpaid"" [label=""nextonetogetpaid""];
""1314_previousstageplayer2"" [label=""previousstageplayer2""];
""1314_disburse"" [label=""disburse""];
""1314_acceptOffer"" [label=""acceptOffer""];
""1314_currentstageplayer2"" [label=""currentstageplayer2""];
""1314_invalidateStage"" [label=""invalidateStage""];
""1314_legacyStart"" [label=""legacyStart""];
""1314_currentPlayers"" [label=""currentPlayers""];
""1314_Payoutnextrefund"" [label=""Payoutnextrefund""];
""1314_fallback"" [label=""fallback""];
""1314_offerAsSacrifice"" [label=""offerAsSacrifice""];
""1314_tryFinalizeStage"" [label=""tryFinalizeStage""];
""1314_previousstageplayer1"" [label=""previousstageplayer1""];
""1314_previousstageloser"" [label=""previousstageloser""];
""1314_constructor"" [label=""constructor""];
""1314_fetchdivs"" [label=""fetchdivs""];
""1314_offerAsSacrifice"" -> ""1314_tryFinalizeStage"";
""1314_tryFinalizeStage"" -> ""1314_fetchdivs"";
""1314_offerAsSacrificeFromVault"" -> ""1314_acceptOffer"";
""1314_offerAsSacrifice"" -> ""1314_acceptOffer"";
""1314_fetchdivs"" -> ""1314_updateAccount"";
""1314_offerAsSacrificeFromVault"" -> ""1314_isNewToStage"";
""1314_offerAsSacrifice"" -> ""1314_prepareStage"";
""1314_myEarnings"" -> ""1314_hasEarnings"";
""1314_offerAsSacrificeFromVault"" -> ""1314_canPayFromVault"";
""1314_offerAsSacrifice"" -> ""1314_isValidOffer"";
""1314_withdraw"" -> ""1314_hasEarnings"";
""1314_offerAsSacrificeFromVaultForce"" -> ""1314_tryFinalizeStage"";
""1314_offerAsSacrificeFromVault"" -> ""1314_tryFinalizeStage"";
""1314_offerAsSacrifice"" -> ""1314_isNewToStage"";
""1314_legacyStart"" -> ""1314_onlyOwner"";
""1314_offerAsSacrificeFromVault"" -> ""1314_prepareStage"";
""1314_withdraw"" -> ""1314_tryFinalizeStage"";
""1314_tryFinalizeStage"" -> ""1314_allocateSurvivorWinnings"";
""1314_offerAsSacrificeFromVaultForce"" -> ""1314_prepareStage"";
""1314_tryFinalizeStage"" -> ""1314_invalidateStage"";
}
"
0xd3a97d46fd0c28a5a035a4e0813afe7c2c1376bd.sol,InterCrypto,"contract InterCrypto is Ownable, myUsingOracalize { struct Transaction { address returnAddress; uint amount; }",1,"subgraph cluster_1446_InterCrypto {
label=""InterCrypto"";
""1446___callback"" [label=""__callback""];
""1446_kill"" [label=""kill""];
""1446_nibbleToChar"" [label=""nibbleToChar""];
""1446_InterCrypto"" [label=""InterCrypto""];
""1446_recover"" [label=""recover""];
""1446_concatBytes"" [label=""concatBytes""];
""1446_fallback"" [label=""fallback""];
""1446_cancelTransaction"" [label=""cancelTransaction""];
""1446_sendToOtherBlockchain1"" [label=""sendToOtherBlockchain1""];
""1446_getInterCryptoPrice"" [label=""getInterCryptoPrice""];
""1446_engine"" [label=""engine""];
""1446_sendToOtherBlockchain2"" [label=""sendToOtherBlockchain2""];
""1446_isValidateParameter"" [label=""isValidateParameter""];
""1446_createShapeShiftTransactionPost"" [label=""createShapeShiftTransactionPost""];
""1446_addressToBytes"" [label=""addressToBytes""];
""1446_createShapeShiftTransactionPost"" -> ""1446_addressToBytes"";
""1446_engine"" -> ""1446_oraclize_query"";
""1446_engine"" -> ""1446_getInterCryptoPrice"";
""1446_sendToOtherBlockchain1"" -> ""1446_engine"";
""1446_createShapeShiftTransactionPost"" -> ""1446_concatBytes"";
""1446___callback"" -> ""1446_parseAddr"";
""1446_addressToBytes"" -> ""1446_nibbleToChar"";
""1446_sendToOtherBlockchain2"" -> ""1446_engine"";
""1446_engine"" -> ""1446_isValidateParameter"";
""1446_getInterCryptoPrice"" -> ""1446_oraclize_getPrice"";
""1446_kill"" -> ""1446_onlyOwner"";
""1446_engine"" -> ""1446_createShapeShiftTransactionPost"";
}
"
0x00346fddca107aec034a367b7324f0d6419bf4b9.sol,Crowdsale,"contract Crowdsale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); function Crowdsale( address ifSuccessfulSendTo, uint fundingGoalInEthers, address addressOfTokenUsedAsReward ) public{ beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; price = (0.00001 ether)/100000 ; tokenReward = token(addressOfTokenUsedAsReward); }",1,"subgraph cluster_229_Crowdsale {
label=""Crowdsale"";
""229_checkGoalReached"" [label=""checkGoalReached""];
""229_Crowdsale"" [label=""Crowdsale""];
""229_safeWithdrawal"" [label=""safeWithdrawal""];
""229_fallback"" [label=""fallback""];
""229_checkGoalReached"" -> ""229_afterDeadline"";
""229_safeWithdrawal"" -> ""229_afterDeadline"";
}
"
0x6f8544edb3f513845135b0efa907f4b6b9c2c92e.sol,BW,contract BW { address public owner; BWService private bwService; BWData private bwData; bool public paused = false; modifier isOwner { if (msg.sender != owner) { revert(); },1,"subgraph cluster_2976_BW {
label=""BW"";
""2976_depositBattleValue"" [label=""depositBattleValue""];
""2976_fallback"" [label=""fallback""];
""2976_moveBlockValue"" [label=""moveBlockValue""];
""2976_setPaused"" [label=""setPaused""];
""2976_transferTokens"" [label=""transferTokens""];
""2976_withdrawValue"" [label=""withdrawValue""];
""2976_updateUser"" [label=""updateUser""];
""2976_claimTilesForExistingUser"" [label=""claimTilesForExistingUser""];
""2976_transferTileFromOwner"" [label=""transferTileFromOwner""];
""2976_attackTileForExistingUser"" [label=""attackTileForExistingUser""];
""2976_kill"" [label=""kill""];
""2976_censorUser"" [label=""censorUser""];
""2976_attackTileForNewUser"" [label=""attackTileForNewUser""];
""2976_withdrawBattleValue"" [label=""withdrawBattleValue""];
""2976_createNewUser"" [label=""createNewUser""];
""2976_fortifyClaims"" [label=""fortifyClaims""];
""2976_claimTilesForNewUser"" [label=""claimTilesForNewUser""];
""2976_constructor"" [label=""constructor""];
""2976_attackTileForNewUser"" -> ""2976_isNotContractCaller"";
""2976_fortifyClaims"" -> ""2976_isNotContractCaller"";
""2976_createNewUser"" -> ""2976_isOwner"";
""2976_updateUser"" -> ""2976_isNotPaused"";
""2976_setPaused"" -> ""2976_isOwner"";
""2976_kill"" -> ""2976_isOwner"";
""2976_claimTilesForExistingUser"" -> ""2976_isNotPaused"";
""2976_attackTileForExistingUser"" -> ""2976_isNotContractCaller"";
""2976_withdrawValue"" -> ""2976_isOwner"";
""2976_fortifyClaims"" -> ""2976_isNotPaused"";
""2976_censorUser"" -> ""2976_isOwner"";
""2976_claimTilesForExistingUser"" -> ""2976_isNotContractCaller"";
""2976_claimTilesForNewUser"" -> ""2976_isNotPaused"";
""2976_transferTileFromOwner"" -> ""2976_isOwner"";
""2976_updateUser"" -> ""2976_isNotContractCaller"";
""2976_claimTilesForNewUser"" -> ""2976_isNotContractCaller"";
""2976_moveBlockValue"" -> ""2976_isNotPaused"";
""2976_depositBattleValue"" -> ""2976_isOwner"";
""2976_transferTokens"" -> ""2976_isOwner"";
""2976_withdrawBattleValue"" -> ""2976_isNotContractCaller"";
""2976_attackTileForNewUser"" -> ""2976_isNotPaused"";
""2976_attackTileForExistingUser"" -> ""2976_isNotPaused"";
""2976_moveBlockValue"" -> ""2976_isNotContractCaller"";
}
"
0x288d045357ac63438278af0b5b84d677713e7c30.sol,Destructible,contract Destructible is Ownable { function destroy() public onlyOwner { selfdestruct(owner); },1,"subgraph cluster_259_Destructible {
label=""Destructible"";
""259_destroyAndSend"" [label=""destroyAndSend""];
""259_destroy"" [label=""destroy""];
""259_destroyAndSend"" -> ""259_onlyOwner"";
""259_destroy"" -> ""259_onlyOwner"";
}
"
0x48ee772b8c8927d8d32afc8961fbc177fb723637.sol,Contribution,"contract Contribution is SafeMath, Owned { uint256 public constant MIN_FUND = (0.01 ether); uint256 public constant CRAWDSALE_START_DAY = 1; uint256 public constant CRAWDSALE_END_DAY = 7; uint256 public dayCycle = 24 hours; uint256 public fundingStartTime = 0; address public ethFundDeposit = 0; address public investorDeposit = 0; bool public isFinalize = false; bool public isPause = false; mapping (uint => uint) public dailyTotals; mapping (uint => mapping (address => uint)) public userBuys; uint256 public totalContributedETH = 0; event LogBuy (uint window, address user, uint amount); event LogCreate (address ethFundDeposit, address investorDeposit, uint fundingStartTime, uint dayCycle); event LogFinalize (uint finalizeTime); event LogPause (uint finalizeTime, bool pause); function Contribution (address _ethFundDeposit, address _investorDeposit, uint256 _fundingStartTime, uint256 _dayCycle) { require( now < _fundingStartTime ); require( _ethFundDeposit != address(0) ); fundingStartTime = _fundingStartTime; dayCycle = _dayCycle; ethFundDeposit = _ethFundDeposit; investorDeposit = _investorDeposit; LogCreate(_ethFundDeposit, _investorDeposit, _fundingStartTime,_dayCycle); }",1,"subgraph cluster_903_Contribution {
label=""Contribution"";
""903_buy"" [label=""buy""];
""903_fallback"" [label=""fallback""];
""903_pause"" [label=""pause""];
""903_kill"" [label=""kill""];
""903_Contribution"" [label=""Contribution""];
""903_importExchangeSale"" [label=""importExchangeSale""];
""903_finalize"" [label=""finalize""];
""903_today"" [label=""today""];
""903_kill"" -> ""903_onlyOwner"";
""903_fallback"" -> ""903_today"";
""903_today"" -> ""903_sub"";
""903_importExchangeSale"" -> ""903_onlyOwner"";
""903_pause"" -> ""903_onlyOwner"";
""903_fallback"" -> ""903_buy"";
""903_finalize"" -> ""903_onlyOwner"";
""903_importExchangeSale"" -> ""903_buy"";
}
"
0xd67aa6a98e99f979f23bf0da772d113fe6dbe50a.sol,Crowdsale,"contract Crowdsale { address public beneficiary; uint public amountRaised; uint public allAmountRaised; uint public deadline; uint public price; uint public limitTransfer; token public tokenReward; mapping(address => uint256) public balanceOf; bool crowdsaleClosed = false; bool public crowdsalePaused = false; event FundTransfer(address backer, uint amount, bool isContribution); modifier onlyOwner { require(msg.sender == beneficiary); _; }",1,"subgraph cluster_254_Crowdsale {
label=""Crowdsale"";
""254_changeDeadline"" [label=""changeDeadline""];
""254_changePrice"" [label=""changePrice""];
""254_Crowdsale"" [label=""Crowdsale""];
""254_runCrowdsale"" [label=""runCrowdsale""];
""254_fallback"" [label=""fallback""];
""254_sendToBeneficiary"" [label=""sendToBeneficiary""];
""254_pauseCrowdsale"" [label=""pauseCrowdsale""];
""254_changeDeadline"" -> ""254_onlyOwner"";
""254_runCrowdsale"" -> ""254_onlyOwner"";
""254_pauseCrowdsale"" -> ""254_onlyOwner"";
""254_sendToBeneficiary"" -> ""254_onlyOwner"";
""254_changePrice"" -> ""254_onlyOwner"";
}
"
0x211f01e59b425253c0a0e9a7bf612605b42ce82c.sol,Pinakion,contract Pinakion is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1079_Pinakion {
label=""Pinakion"";
""1079_totalSupplyAt"" [label=""totalSupplyAt""];
""1079_claimTokens"" [label=""claimTokens""];
""1079_doTransfer"" [label=""doTransfer""];
""1079_approve"" [label=""approve""];
""1079_Pinakion"" [label=""Pinakion""];
""1079_getValueAt"" [label=""getValueAt""];
""1079_balanceOfAt"" [label=""balanceOfAt""];
""1079_createCloneToken"" [label=""createCloneToken""];
""1079_min"" [label=""min""];
""1079_totalSupply"" [label=""totalSupply""];
""1079_updateValueAtNow"" [label=""updateValueAtNow""];
""1079_destroyTokens"" [label=""destroyTokens""];
""1079_isContract"" [label=""isContract""];
""1079_transfer"" [label=""transfer""];
""1079_approveAndCall"" [label=""approveAndCall""];
""1079_allowance"" [label=""allowance""];
""1079_enableTransfers"" [label=""enableTransfers""];
""1079_fallback"" [label=""fallback""];
""1079_balanceOf"" [label=""balanceOf""];
""1079_transferFrom"" [label=""transferFrom""];
""1079_generateTokens"" [label=""generateTokens""];
""1079_totalSupplyAt"" -> ""1079_getValueAt"";
""1079_totalSupplyAt"" -> ""1079_min"";
""1079_totalSupply"" -> ""1079_totalSupplyAt"";
""1079_generateTokens"" -> ""1079_totalSupply"";
""1079_balanceOf"" -> ""1079_balanceOfAt"";
""1079_enableTransfers"" -> ""1079_onlyController"";
""1079_transfer"" -> ""1079_doTransfer"";
""1079_doTransfer"" -> ""1079_updateValueAtNow"";
""1079_destroyTokens"" -> ""1079_onlyController"";
""1079_balanceOfAt"" -> ""1079_min"";
""1079_generateTokens"" -> ""1079_onlyController"";
""1079_doTransfer"" -> ""1079_isContract"";
""1079_transferFrom"" -> ""1079_doTransfer"";
""1079_balanceOfAt"" -> ""1079_getValueAt"";
""1079_approve"" -> ""1079_isContract"";
""1079_destroyTokens"" -> ""1079_totalSupply"";
""1079_approveAndCall"" -> ""1079_approve"";
""1079_doTransfer"" -> ""1079_balanceOfAt"";
""1079_fallback"" -> ""1079_isContract"";
""1079_destroyTokens"" -> ""1079_balanceOf"";
""1079_destroyTokens"" -> ""1079_updateValueAtNow"";
""1079_generateTokens"" -> ""1079_balanceOf"";
""1079_generateTokens"" -> ""1079_updateValueAtNow"";
""1079_claimTokens"" -> ""1079_onlyController"";
}
"
0x75cb629408d1ea387df0a1f755e0bc371a5fa036.sol,GoodLuckCasino,"contract GoodLuckCasino is Ownable{ using SafeMath for uint; event LOG_Deposit(bytes32 userID, address walletAddr, uint amount); event LOG_Withdraw(address user, uint amount); event LOG_Bankroll(address sender, uint value); event LOG_OwnerWithdraw(address _to, uint _val); event LOG_ContractStopped(); event LOG_ContractResumed(); bool public isStopped; mapping (bytes32 => uint[]) depositList; modifier onlyIfNotStopped { require(!isStopped); _; }",1,"subgraph cluster_429_GoodLuckCasino {
label=""GoodLuckCasino"";
""429_userWithdraw"" [label=""userWithdraw""];
""429_bankroll"" [label=""bankroll""];
""429_ownerWithdraw"" [label=""ownerWithdraw""];
""429_getUserDeposit"" [label=""getUserDeposit""];
""429_resumeContract"" [label=""resumeContract""];
""429_stopContract"" [label=""stopContract""];
""429_userDeposit"" [label=""userDeposit""];
""429_constructor"" [label=""constructor""];
""429_fallback"" [label=""fallback""];
""429_getUserDepositList"" [label=""getUserDepositList""];
""429_ownerWithdraw"" -> ""429_onlyOwner"";
""429_userWithdraw"" -> ""429_onlyOwner"";
""429_stopContract"" -> ""429_onlyIfNotStopped"";
""429_userWithdraw"" -> ""429_onlyIfNotStopped"";
""429_bankroll"" -> ""429_onlyOwner"";
""429_stopContract"" -> ""429_onlyOwner"";
""429_resumeContract"" -> ""429_onlyIfStopped"";
""429_userDeposit"" -> ""429_onlyIfNotStopped"";
""429_resumeContract"" -> ""429_onlyOwner"";
}
"
0xecfeb4a1bb01e0a9530b40fd6bbe3954529393ec.sol,EnJoy,contract EnJoy { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_EnJoy {
label=""EnJoy"";
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0xec7ba2ff3c46b9417d34ca9941ae2f62268c5add.sol,AllYours,contract AllYours { address private _platformAddress = 0xbE9C1088FEEB8B48A96Da0231062eA757D0a9613; uint private _totalEth = 0.06 ether; uint128 private _oneceEth = 0.02 ether; uint256 private _period = 1; address private _owner; constructor() public{ _owner = msg.sender; },1,"subgraph cluster_765_AllYours {
label=""AllYours"";
""765_draw"" [label=""draw""];
""765_fallback"" [label=""fallback""];
""765_getHistory"" [label=""getHistory""];
""765_kill"" [label=""kill""];
""765_getPeriod"" [label=""getPeriod""];
""765_clear"" [label=""clear""];
""765_addressToString"" [label=""addressToString""];
""765_strConcat"" [label=""strConcat""];
""765_getCurrentJoinPersonNumber"" [label=""getCurrentJoinPersonNumber""];
""765_uint2str"" [label=""uint2str""];
""765_toBytes"" [label=""toBytes""];
""765_constructor"" [label=""constructor""];
""765_getCurrentBalance"" [label=""getCurrentBalance""];
""765_fallback"" -> ""765_uint2str"";
""765_fallback"" -> ""765_strConcat"";
""765_fallback"" -> ""765_draw"";
""765_fallback"" -> ""765_clear"";
""765_fallback"" -> ""765_addressToString"";
""765_draw"" -> ""765_toBytes"";
}
"
0xd64ad4eefaacb96a0865687cfeef4c4a2cfbfef2.sol,Mortal,contract Mortal is Owned { function kill() { if (msg.sender == owner) selfdestruct(owner); },1,"subgraph cluster_228_Mortal {
label=""Mortal"";
""228_kill"" [label=""kill""];
}
"
0x00416b9d728069edb0ceb04bc2b203fa7336d1f1.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_processTransaction"" [label=""processTransaction""];
""928_pullBalance"" [label=""pullBalance""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_refundTransaction"";
""928_fallback"" -> ""928_processTransaction"";
}
"
0x83e969a451253f1026e388ba2e3eef6aaa4cbca4.sol,MultiSigWallet,"contract MultiSigWallet { event Confirmation(address indexed sender, uint indexed transactionId); event Revocation(address indexed sender, uint indexed transactionId); event Submission(uint indexed transactionId); event Execution(uint indexed transactionId); event ExecutionFailure(uint indexed transactionId); event Deposit(address indexed sender, uint value); event OwnerAddition(address indexed owner); event OwnerRemoval(address indexed owner); event RequirementChange(uint required); uint constant public MAX_OWNER_COUNT = 50; mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; mapping (address => bool) public isOwner; address[] public owners; uint public required; uint public transactionCount; struct Transaction { address destination; uint value; bytes data; bool executed; }",1,"subgraph cluster_1004_MultiSigWallet {
label=""MultiSigWallet"";
""1004_removeOwner"" [label=""removeOwner""];
""1004_MultiSigWallet"" [label=""MultiSigWallet""];
""1004_getConfirmations"" [label=""getConfirmations""];
""1004_getConfirmationCount"" [label=""getConfirmationCount""];
""1004_fallback"" [label=""fallback""];
""1004_getTransactionCount"" [label=""getTransactionCount""];
""1004_addOwner"" [label=""addOwner""];
""1004_executeTransaction"" [label=""executeTransaction""];
""1004_replaceOwner"" [label=""replaceOwner""];
""1004_external_call"" [label=""external_call""];
""1004_changeRequirement"" [label=""changeRequirement""];
""1004_isConfirmed"" [label=""isConfirmed""];
""1004_addTransaction"" [label=""addTransaction""];
""1004_confirmTransaction"" [label=""confirmTransaction""];
""1004_revokeConfirmation"" [label=""revokeConfirmation""];
""1004_submitTransaction"" [label=""submitTransaction""];
""1004_getTransactionIds"" [label=""getTransactionIds""];
""1004_getOwners"" [label=""getOwners""];
""1004_addOwner"" -> ""1004_validRequirement"";
""1004_executeTransaction"" -> ""1004_external_call"";
""1004_confirmTransaction"" -> ""1004_notConfirmed"";
""1004_revokeConfirmation"" -> ""1004_confirmed"";
""1004_executeTransaction"" -> ""1004_notExecuted"";
""1004_replaceOwner"" -> ""1004_onlyWallet"";
""1004_removeOwner"" -> ""1004_changeRequirement"";
""1004_executeTransaction"" -> ""1004_confirmed"";
""1004_changeRequirement"" -> ""1004_validRequirement"";
""1004_revokeConfirmation"" -> ""1004_notExecuted"";
""1004_addTransaction"" -> ""1004_notNull"";
""1004_submitTransaction"" -> ""1004_confirmTransaction"";
""1004_addOwner"" -> ""1004_onlyWallet"";
""1004_removeOwner"" -> ""1004_ownerExists"";
""1004_MultiSigWallet"" -> ""1004_validRequirement"";
""1004_submitTransaction"" -> ""1004_addTransaction"";
""1004_removeOwner"" -> ""1004_onlyWallet"";
""1004_confirmTransaction"" -> ""1004_executeTransaction"";
""1004_confirmTransaction"" -> ""1004_ownerExists"";
""1004_confirmTransaction"" -> ""1004_transactionExists"";
""1004_revokeConfirmation"" -> ""1004_ownerExists"";
""1004_replaceOwner"" -> ""1004_ownerDoesNotExist"";
""1004_addOwner"" -> ""1004_ownerDoesNotExist"";
""1004_executeTransaction"" -> ""1004_ownerExists"";
""1004_addOwner"" -> ""1004_notNull"";
""1004_executeTransaction"" -> ""1004_isConfirmed"";
""1004_changeRequirement"" -> ""1004_onlyWallet"";
""1004_replaceOwner"" -> ""1004_ownerExists"";
}
"
0x025dce2d39a46296766db7cac8c322e8f59cd5d9.sol,EthToSmthSwaps,contract EthToSmthSwaps { using SafeMath for uint; address public owner; address public ratingContractAddress; uint256 SafeTime = 1 hours; struct Swap { bytes32 secret; bytes20 secretHash; uint256 createdAt; uint256 balance; },1,"subgraph cluster_679_EthToSmthSwaps {
label=""EthToSmthSwaps"";
""679_withdr"" [label=""withdr""];
""679_withdraw"" [label=""withdraw""];
""679_getSecret"" [label=""getSecret""];
""679_close"" [label=""close""];
""679_abort"" [label=""abort""];
""679_checkSign"" [label=""checkSign""];
""679_clean"" [label=""clean""];
""679_getBalance"" [label=""getBalance""];
""679_sign"" [label=""sign""];
""679_setReputationAddress"" [label=""setReputationAddress""];
""679_createSwap"" [label=""createSwap""];
""679_refund"" [label=""refund""];
""679_constructor"" [label=""constructor""];
""679_abort"" -> ""679_clean"";
""679_refund"" -> ""679_clean"";
""679_close"" -> ""679_clean"";
}
"
0xc55a13e36d93371a5b036a21d913a31cd2804ba4.sol,NoteOfExchange,"contract NoteOfExchange is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; mapping (address => bool) public joinOnce; mapping (address => uint256) public frozenAccount; string internal name_ = ; string internal symbol_ = ; uint8 internal decimals_ = 8; uint256 internal totalSupply_ = 200000000e8; uint256 internal transGain=1; uint256 public totalDistributed = 0; uint256 public tokensPerEth = 100000e8; uint256 public airdropBy0Eth = 1000e8; uint256 public officialHold = totalSupply_.mul(15).div(100); uint256 public minContribution = 1 ether / 10; bool internal distributionFinished = false; bool internal EthGetFinished = false; bool internal airdropBy0EthFinished = false; bool internal transferGainFinished = true; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event LockedFunds(address indexed target, uint256 locktime); modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1142_NoteOfExchange {
label=""NoteOfExchange"";
""1142_withdrawOtherTokens"" [label=""withdrawOtherTokens""];
""1142_startTransferGet"" [label=""startTransferGet""];
""1142_withdraw"" [label=""withdraw""];
""1142_balanceOf"" [label=""balanceOf""];
""1142_transferFrom"" [label=""transferFrom""];
""1142_getTokens"" [label=""getTokens""];
""1142_constructor"" [label=""constructor""];
""1142_startAirdropBy0Eth"" [label=""startAirdropBy0Eth""];
""1142_transferOwnership"" [label=""transferOwnership""];
""1142_name"" [label=""name""];
""1142_selfLockFunds"" [label=""selfLockFunds""];
""1142_startDistribution"" [label=""startDistribution""];
""1142_finishEthGet"" [label=""finishEthGet""];
""1142_totalSupply"" [label=""totalSupply""];
""1142_approve"" [label=""approve""];
""1142_allowance"" [label=""allowance""];
""1142_symbol"" [label=""symbol""];
""1142_updateParameter"" [label=""updateParameter""];
""1142_transfer"" [label=""transfer""];
""1142_finishAirdropBy0Eth"" [label=""finishAirdropBy0Eth""];
""1142_finishTransferGet"" [label=""finishTransferGet""];
""1142_fallback"" [label=""fallback""];
""1142_decimals"" [label=""decimals""];
""1142_burnFromAddress"" [label=""burnFromAddress""];
""1142_startEthGet"" [label=""startEthGet""];
""1142_burnFromTotal"" [label=""burnFromTotal""];
""1142_finishDistribution"" [label=""finishDistribution""];
""1142_distr"" [label=""distr""];
""1142_transfer"" -> ""1142_distr"";
""1142_transferOwnership"" -> ""1142_onlyOwner"";
""1142_finishAirdropBy0Eth"" -> ""1142_onlyOwner"";
""1142_finishEthGet"" -> ""1142_onlyOwner"";
""1142_getTokens"" -> ""1142_canDistr"";
""1142_distr"" -> ""1142_canDistr"";
""1142_fallback"" -> ""1142_getTokens"";
""1142_finishDistribution"" -> ""1142_onlyOwner"";
""1142_finishTransferGet"" -> ""1142_onlyOwner"";
""1142_startTransferGet"" -> ""1142_onlyOwner"";
""1142_startDistribution"" -> ""1142_onlyOwner"";
""1142_withdrawOtherTokens"" -> ""1142_onlyOwner"";
""1142_getTokens"" -> ""1142_distr"";
""1142_burnFromTotal"" -> ""1142_onlyOwner"";
""1142_constructor"" -> ""1142_distr"";
""1142_updateParameter"" -> ""1142_onlyOwner"";
""1142_withdraw"" -> ""1142_onlyOwner"";
""1142_startEthGet"" -> ""1142_onlyOwner"";
""1142_startAirdropBy0Eth"" -> ""1142_onlyOwner"";
""1142_transferFrom"" -> ""1142_onlyPayloadSize"";
""1142_burnFromAddress"" -> ""1142_onlyOwner"";
""1142_transfer"" -> ""1142_onlyPayloadSize"";
}
"
0x000621424c60951cb69e9d75d64b79813846d498.sol,HasNoEther,contract HasNoEther is Ownable { function HasNoEther() payable { require(msg.value == 0); },1,"subgraph cluster_197_HasNoEther {
label=""HasNoEther"";
""197_HasNoEther"" [label=""HasNoEther""];
""197_reclaimEther"" [label=""reclaimEther""];
""197_fallback"" [label=""fallback""];
""197_reclaimEther"" -> ""197_onlyOwner"";
}
"
0xd41d48be0a81690a785bf1df336163f7b78eadca.sol,Crypland,contract Crypland { struct Element {uint worth; uint level; uint cooldown;},1,"subgraph cluster_1579_Crypland {
label=""Crypland"";
""1579_publicGetElement"" [label=""publicGetElement""];
""1579_ownerWithdraw"" [label=""ownerWithdraw""];
""1579_calcAssetBuyPrice"" [label=""calcAssetBuyPrice""];
""1579_userAssignElement"" [label=""userAssignElement""];
""1579_calcElementCooldown"" [label=""calcElementCooldown""];
""1579_calcAssetWorthIndex"" [label=""calcAssetWorthIndex""];
""1579_ownerDestroy"" [label=""ownerDestroy""];
""1579_ownerUnpause"" [label=""ownerUnpause""];
""1579_publicGetElementOffer"" [label=""publicGetElementOffer""];
""1579_userOfferCancelElement"" [label=""userOfferCancelElement""];
""1579_userOfferAcceptElement"" [label=""userOfferAcceptElement""];
""1579_userUpgradeElement"" [label=""userUpgradeElement""];
""1579_calcElementCurrentPrice"" [label=""calcElementCurrentPrice""];
""1579_calcAssetMax"" [label=""calcAssetMax""];
""1579_ownerPause"" [label=""ownerPause""];
""1579_publicGetAsset"" [label=""publicGetAsset""];
""1579_calcAssetUpgradePrice"" [label=""calcAssetUpgradePrice""];
""1579_calcAssetAssigned"" [label=""calcAssetAssigned""];
""1579_userOfferSubmitElement"" [label=""userOfferSubmitElement""];
""1579_calcElementWorth"" [label=""calcElementWorth""];
""1579_Crypland"" [label=""Crypland""];
""1579_ownerDestroy"" -> ""1579_whenOwner"";
""1579_publicGetAsset"" -> ""1579_calcAssetWorthIndex"";
""1579_userOfferCancelElement"" -> ""1579_whenElementHolder"";
""1579_userUpgradeElement"" -> ""1579_calcElementWorth"";
""1579_userAssignElement"" -> ""1579_calcAssetMax"";
""1579_userAssignElement"" -> ""1579_whenNotPaused"";
""1579_ownerPause"" -> ""1579_whenNotPaused"";
""1579_userUpgradeElement"" -> ""1579_calcAssetUpgradePrice"";
""1579_publicGetAsset"" -> ""1579_calcAssetMax"";
""1579_userOfferCancelElement"" -> ""1579_whenNotPaused"";
""1579_userOfferAcceptElement"" -> ""1579_whenNotPaused"";
""1579_ownerUnpause"" -> ""1579_whenOwner"";
""1579_userOfferAcceptElement"" -> ""1579_whenNotElementHolder"";
""1579_userOfferAcceptElement"" -> ""1579_calcElementWorth"";
""1579_userAssignElement"" -> ""1579_calcAssetAssigned"";
""1579_ownerPause"" -> ""1579_whenOwner"";
""1579_userAssignElement"" -> ""1579_calcAssetBuyPrice"";
""1579_userUpgradeElement"" -> ""1579_whenElementHolder"";
""1579_calcAssetUpgradePrice"" -> ""1579_calcAssetWorthIndex"";
""1579_publicGetElement"" -> ""1579_calcElementWorth"";
""1579_ownerUnpause"" -> ""1579_whenPaused"";
""1579_userOfferSubmitElement"" -> ""1579_whenNotPaused"";
""1579_publicGetElement"" -> ""1579_calcElementCooldown"";
""1579_userOfferSubmitElement"" -> ""1579_whenElementHolder"";
""1579_userOfferAcceptElement"" -> ""1579_calcElementCurrentPrice"";
""1579_publicGetAsset"" -> ""1579_calcAssetAssigned"";
""1579_publicGetElement"" -> ""1579_calcElementCurrentPrice"";
""1579_publicGetAsset"" -> ""1579_calcAssetUpgradePrice"";
""1579_ownerWithdraw"" -> ""1579_whenOwner"";
""1579_calcElementWorth"" -> ""1579_calcAssetWorthIndex"";
""1579_publicGetAsset"" -> ""1579_calcAssetBuyPrice"";
""1579_userUpgradeElement"" -> ""1579_whenNotPaused"";
}
"
0xcf91d43b85a5c53d85c567d4eed972965335aeea.sol,Slaughter3D,contract Slaughter3D is Owned { using SafeMath for uint; Snip3DInterface constant Snip3Dcontract_ = Snip3DInterface(0xb172BB8BAae74F27Ade3211E0c145388d3b4f8d8); function harvestableBalance() view public returns(uint256) { return ( address(this).balance) ; },1,"subgraph cluster_263_Slaughter3D {
label=""Slaughter3D"";
""263_fetchBalance"" [label=""fetchBalance""];
""263_validate"" [label=""validate""];
""263_fallback"" [label=""fallback""];
""263_fetchvault"" [label=""fetchvault""];
""263_harvestableBalance"" [label=""harvestableBalance""];
""263_sacUp"" [label=""sacUp""];
""263_unfetchedVault"" [label=""unfetchedVault""];
""263_fetchBalance"" -> ""263_onlyOwner"";
""263_sacUp"" -> ""263_onlyOwner"";
""263_validate"" -> ""263_onlyOwner"";
}
"
0x1ca6a09e02480be25c10284372cd21fde7d35a79.sol,ExhibationLinkingCoin,contract ExhibationLinkingCoin is ERC20Interface { function totalSupply()public constant returns (uint) { return totalEXLCSupply; },1,"subgraph cluster_1901_ExhibationLinkingCoin {
label=""ExhibationLinkingCoin"";
""1901_allowance"" [label=""allowance""];
""1901_sendMarketByOwner"" [label=""sendMarketByOwner""];
""1901_fallback"" [label=""fallback""];
""1901_transfer"" [label=""transfer""];
""1901_safeToNextIdx"" [label=""safeToNextIdx""];
""1901_sendMinerByOwner"" [label=""sendMinerByOwner""];
""1901_TryUnLockBalance"" [label=""TryUnLockBalance""];
""1901_StartIco"" [label=""StartIco""];
""1901_miningEveryDay"" [label=""miningEveryDay""];
""1901_sendCreatorByOwner"" [label=""sendCreatorByOwner""];
""1901_changeAutherOwner"" [label=""changeAutherOwner""];
""1901_sendJigouByOwner"" [label=""sendJigouByOwner""];
""1901_destruct"" [label=""destruct""];
""1901_StopIco"" [label=""StopIco""];
""1901_transferFrom"" [label=""transferFrom""];
""1901_balanceOf"" [label=""balanceOf""];
""1901_setOperater"" [label=""setOperater""];
""1901_totalSupply"" [label=""totalSupply""];
""1901_sendBussinessByOwner"" [label=""sendBussinessByOwner""];
""1901_constructor"" [label=""constructor""];
""1901_QueryUnlockTime"" [label=""QueryUnlockTime""];
""1901_Save"" [label=""Save""];
""1901_sendICOByOwner"" [label=""sendICOByOwner""];
""1901_approve"" [label=""approve""];
""1901_sendICOByOwner"" -> ""1901_safeToNextIdx"";
""1901_sendJigouByOwner"" -> ""1901_safeToNextIdx"";
""1901_sendMinerByOwner"" -> ""1901_safeToNextIdx"";
""1901_transferFrom"" -> ""1901_TryUnLockBalance"";
""1901_sendCreatorByOwner"" -> ""1901_safeToNextIdx"";
""1901_sendMarketByOwner"" -> ""1901_safeToNextIdx"";
""1901_fallback"" -> ""1901_safeToNextIdx"";
""1901_sendBussinessByOwner"" -> ""1901_safeToNextIdx"";
""1901_transfer"" -> ""1901_TryUnLockBalance"";
}
"
0x3ac0d29eaf16eb423e07387274a05a1e16a8472b.sol,LuckyNumber,"contract LuckyNumber { address owner; uint winningNumber = uint(keccak256(now, owner)) % 10; function LuckyNumber() public { owner = msg.sender; }",1,"subgraph cluster_106_LuckyNumber {
label=""LuckyNumber"";
""106_kill"" [label=""kill""];
""106_LuckyNumber"" [label=""LuckyNumber""];
""106_getOwner"" [label=""getOwner""];
""106_takeAGuess"" [label=""takeAGuess""];
""106_fallback"" [label=""fallback""];
""106_addBalance"" [label=""addBalance""];
""106_getBalance"" [label=""getBalance""];
}
"
0xc398891b43f1b91158dca87c63a88b80d000c248.sol,IBIT,"contract IBIT is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 45 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 950000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 1000021e8; uint public target0drop = 5000000; uint public progress0drop = 0; address multisig = 0x723D0666908ADdc626C29407F0B5e7C0881b5185; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_IBIT {
label=""IBIT"";
""1261_add"" [label=""add""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_constructor"" [label=""constructor""];
""1261_fallback"" [label=""fallback""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_approve"" [label=""approve""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_allowance"" [label=""allowance""];
""1261_burn"" [label=""burn""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdraw"" [label=""withdraw""];
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_distr"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
}
"
0x18aaad578e74913df4255c126f2a0bd9e3399ec7.sol,test_contract,contract test_contract { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_test_contract {
label=""test_contract"";
""143_fallback"" [label=""fallback""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_StopGame"" [label=""StopGame""];
""143_ActivateContract"" [label=""ActivateContract""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
}
"
0xecfeb4a1bb01e0a9530b40fd6bbe3954529393ec.sol,EnJoy,contract EnJoy { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_EnJoy {
label=""EnJoy"";
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x376cbf6b8b7583f52192009e0cee250855ca9ea5.sol,TTCSale,"contract TTCSale is Pausable { using SafeMath for uint256; address public beneficiary; uint public fundingGoal; uint public fundingCap; uint public minContribution; bool public fundingGoalReached = false; bool public fundingCapReached = false; bool public saleClosed = false; uint public startTime; uint public endTime; uint public amountRaised; uint public refundAmount; uint public rate = 10000; uint public constant LOW_RANGE_RATE = 500; uint public constant HIGH_RANGE_RATE = 30000; bool private rentrancy_lock = false; TTCToken public tokenReward; mapping(address => uint256) public balanceOf; event GoalReached(address _beneficiary, uint _amountRaised); event CapReached(address _beneficiary, uint _amountRaised); event FundTransfer(address _backer, uint _amount, bool _isContribution); modifier beforeDeadline() { require (currentTime() < endTime); _; }",1,"subgraph cluster_1575_TTCSale {
label=""TTCSale"";
""1575_checkFundingGoal"" [label=""checkFundingGoal""];
""1575_changeStartTime"" [label=""changeStartTime""];
""1575_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1575_fallback"" [label=""fallback""];
""1575_setRate"" [label=""setRate""];
""1575_currentTime"" [label=""currentTime""];
""1575_terminate"" [label=""terminate""];
""1575_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1575_checkFundingCap"" [label=""checkFundingCap""];
""1575_TTCSale"" [label=""TTCSale""];
""1575_safeWithdrawal"" [label=""safeWithdrawal""];
""1575_changeEndTime"" [label=""changeEndTime""];
""1575_convertToMiniTtc"" [label=""convertToMiniTtc""];
""1575_ownerUnlockFund"" [label=""ownerUnlockFund""];
""1575_fallback"" -> ""1575_whenNotPaused"";
""1575_ownerAllocateTokens"" -> ""1575_checkFundingGoal"";
""1575_changeEndTime"" -> ""1575_onlyOwner"";
""1575_fallback"" -> ""1575_saleNotClosed"";
""1575_terminate"" -> ""1575_onlyOwner"";
""1575_fallback"" -> ""1575_checkFundingGoal"";
""1575_ownerUnlockFund"" -> ""1575_onlyOwner"";
""1575_ownerSafeWithdrawal"" -> ""1575_nonReentrant"";
""1575_changeStartTime"" -> ""1575_onlyOwner"";
""1575_ownerSafeWithdrawal"" -> ""1575_onlyOwner"";
""1575_fallback"" -> ""1575_checkFundingCap"";
""1575_fallback"" -> ""1575_beforeDeadline"";
""1575_ownerAllocateTokens"" -> ""1575_onlyOwner"";
""1575_ownerAllocateTokens"" -> ""1575_nonReentrant"";
""1575_fallback"" -> ""1575_afterStartTime"";
""1575_ownerAllocateTokens"" -> ""1575_checkFundingCap"";
""1575_fallback"" -> ""1575_nonReentrant"";
""1575_ownerUnlockFund"" -> ""1575_afterDeadline"";
""1575_TTCSale"" -> ""1575_setRate"";
""1575_safeWithdrawal"" -> ""1575_afterDeadline"";
""1575_setRate"" -> ""1575_onlyOwner"";
""1575_safeWithdrawal"" -> ""1575_nonReentrant"";
}
"
0x9b2f30c69f31559c99a04dcdfa19de1b1cf9d265.sol,Destructible,contract Destructible is Ownable { constructor() public payable { },1,"subgraph cluster_238_Destructible {
label=""Destructible"";
""238_destroyAndSend"" [label=""destroyAndSend""];
""238_destroy"" [label=""destroy""];
""238_constructor"" [label=""constructor""];
""238_destroyAndSend"" -> ""238_onlyOwner"";
""238_destroy"" -> ""238_onlyOwner"";
}
"
0xc710772a16fd040ed9c63de0679a57410981e3fc.sol,EthVault,"contract EthVault is TokenVault { string public constant version = ; event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event OpenDate(uint date); mapping (address => uint) public Deposits; uint minDeposit; bool Locked; uint Date; function init() payable open { Owner = msg.sender; minDeposit = 0.25 ether; Locked = false; deposit(); }",1,"subgraph cluster_350_EthVault {
label=""EthVault"";
""350_MinimumDeposit"" [label=""MinimumDeposit""];
""350_lock"" [label=""lock""];
""350_fallback"" [label=""fallback""];
""350_withdraw"" [label=""withdraw""];
""350_getOwner"" [label=""getOwner""];
""350_deposit"" [label=""deposit""];
""350_kill"" [label=""kill""];
""350_init"" [label=""init""];
""350_WithdrawEnabled"" [label=""WithdrawEnabled""];
""350_ReleaseDate"" [label=""ReleaseDate""];
""350_setRelease"" [label=""setRelease""];
""350_fallback"" -> ""350_deposit"";
""350_deposit"" -> ""350_MinimumDeposit"";
""350_init"" -> ""350_open"";
""350_init"" -> ""350_deposit"";
""350_withdraw"" -> ""350_onlyOwner"";
""350_withdraw"" -> ""350_WithdrawEnabled"";
}
"
0x269b4c23ddab676e2869ae72cd6ae4f24bdfea45.sol,IRBPreRefundVault,"contract IRBPreRefundVault is Ownable { using SafeMath for uint256; enum State {Active, Refunding, Closed}",1,"subgraph cluster_1155_IRBPreRefundVault {
label=""IRBPreRefundVault"";
""1155_kill"" [label=""kill""];
""1155_IRBPreRefundVault"" [label=""IRBPreRefundVault""];
""1155_refund"" [label=""refund""];
""1155_withdraw"" [label=""withdraw""];
""1155_close"" [label=""close""];
""1155_deposit"" [label=""deposit""];
""1155_enableRefunds"" [label=""enableRefunds""];
""1155_setPreCrowdsaleAddress"" [label=""setPreCrowdsaleAddress""];
""1155_setPreCrowdsaleAddress"" -> ""1155_onlyOwner"";
""1155_enableRefunds"" -> ""1155_onlyCrowdsaleContract"";
""1155_close"" -> ""1155_onlyCrowdsaleContract"";
""1155_withdraw"" -> ""1155_onlyCrowdsaleContract"";
""1155_kill"" -> ""1155_onlyOwner"";
""1155_deposit"" -> ""1155_onlyCrowdsaleContract"";
}
"
0x17478cc05e51da20a27bbdf66fbe4a16aae81842.sol,AuctionPotato,"contract AuctionPotato { using SafeMath for uint256; address public owner; uint public startTime; uint public endTime; string public infoUrl; string name; bool started; uint public potato; uint oldPotato; uint oldHighestBindingBid; address creatureOwner; address creature_newOwner; event CreatureOwnershipTransferred(address indexed _from, address indexed _to); bool public canceled; uint public highestBindingBid; address public highestBidder; bool blockerPay; bool blockerWithdraw; mapping(address => uint256) public fundsByBidder; bool ownerHasWithdrawn; event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid); event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount); event LogCanceled(); constructor() public { blockerWithdraw = false; blockerPay = false; owner = msg.sender; creatureOwner = owner; highestBindingBid = 2000000000000000; potato = 0; started = false; name = ; infoUrl = ""https: }",1,"subgraph cluster_771_AuctionPotato {
label=""AuctionPotato"";
""771_getHighestBid"" [label=""getHighestBid""];
""771_acceptCreatureOwnership"" [label=""acceptCreatureOwnership""];
""771_timeLeft"" [label=""timeLeft""];
""771_nextNextBid"" [label=""nextNextBid""];
""771_placeBid"" [label=""placeBid""];
""771_nextBid"" [label=""nextBid""];
""771_ownerCanWithdraw"" [label=""ownerCanWithdraw""];
""771_constructor"" [label=""constructor""];
""771_fuelContract"" [label=""fuelContract""];
""771_cancelAuction"" [label=""cancelAuction""];
""771_balance"" [label=""balance""];
""771_auctionName"" [label=""auctionName""];
""771_withdraw"" [label=""withdraw""];
""771_queryCreatureOwner"" [label=""queryCreatureOwner""];
""771_startAuction"" [label=""startAuction""];
""771_isStarted"" [label=""isStarted""];
""771_transferCreatureOwnership"" [label=""transferCreatureOwnership""];
""771_cancelAuction"" -> ""771_onlyNotCanceled"";
""771_cancelAuction"" -> ""771_onlyBeforeEnd"";
""771_placeBid"" -> ""771_onlyBeforeEnd"";
""771_placeBid"" -> ""771_onlyNotOwner"";
""771_placeBid"" -> ""771_onlyAfterStart"";
""771_cancelAuction"" -> ""771_onlyOwner"";
""771_fuelContract"" -> ""771_onlyOwner"";
""771_placeBid"" -> ""771_onlyNotCanceled"";
""771_startAuction"" -> ""771_onlyOwner"";
}
"
0x945f171de4ea81a213dcc7a1e8c4f6feb3b4b806.sol,ECP_Token,"contract ECP_Token { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public remaining; address public owner; uint public icoStatus; address public benAddress; address public bkaddress; uint public allowTransferToken; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event TokenTransferEvent(address indexed from, address indexed to, uint256 value, string typex); function ECP_Token() public { totalSupply = 15000000000000000000000000000; owner = msg.sender; balanceOf[owner] = totalSupply; name = ; symbol = ; decimals = 18; remaining = totalSupply; icoStatus = 1; benAddress = 0xe4a7a715bE044186a3ac5C60c7Df7dD1215f7419; bkaddress = 0x44e00602e4B8F546f76983de2489d636CB443722; allowTransferToken = 1; }",1,"subgraph cluster_745_ECP_Token {
label=""ECP_Token"";
""745_withdraw_all"" [label=""withdraw_all""];
""745_freezeAccount"" [label=""freezeAccount""];
""745_withdraw"" [label=""withdraw""];
""745_transferOwnership"" [label=""transferOwnership""];
""745_sendTokenToSingleAccount"" [label=""sendTokenToSingleAccount""];
""745__transfer"" [label=""_transfer""];
""745_burn"" [label=""burn""];
""745_sendToMultipleAccount"" [label=""sendToMultipleAccount""];
""745_approveAndCall"" [label=""approveAndCall""];
""745_approve"" [label=""approve""];
""745_adm_trasfer"" [label=""adm_trasfer""];
""745_changeIcoStatus"" [label=""changeIcoStatus""];
""745_fallback"" [label=""fallback""];
""745_setTransferStatus"" [label=""setTransferStatus""];
""745_totalSupply"" [label=""totalSupply""];
""745_transferFrom"" [label=""transferFrom""];
""745_balanceOf"" [label=""balanceOf""];
""745_burnFrom"" [label=""burnFrom""];
""745_transfer"" [label=""transfer""];
""745_mintToken"" [label=""mintToken""];
""745_ECP_Token"" [label=""ECP_Token""];
""745_transfer"" -> ""745__transfer"";
""745_adm_trasfer"" -> ""745_onlyOwner"";
""745_transferFrom"" -> ""745__transfer"";
""745_withdraw_all"" -> ""745_onlyOwner"";
""745_setTransferStatus"" -> ""745_onlyOwner"";
""745_freezeAccount"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745__transfer"";
""745_sendToMultipleAccount"" -> ""745_onlyOwner"";
""745_mintToken"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745_onlyOwner"";
""745_transferOwnership"" -> ""745_onlyOwner"";
""745_sendToMultipleAccount"" -> ""745__transfer"";
""745_approveAndCall"" -> ""745_approve"";
""745_adm_trasfer"" -> ""745__transfer"";
""745_withdraw"" -> ""745_onlyOwner"";
""745_changeIcoStatus"" -> ""745_onlyOwner"";
}
"
0x50a667b73223bc612bcc43200120b5c46ee6b4e9.sol,RCpro,"contract RCpro is ICOEngineInterface, KYCBase { using SafeMath for uint256; TokenSale tokenSaleContract; uint256 public startTime; uint256 public endTime; uint256 public etherMinimum; uint256 public soldTokens; uint256 public remainingTokens; uint256[] public oneTokenInFiatWei; uint256[] public sendThreshold; mapping(address => uint256) public etherUser; mapping(address => uint256) public pendingTokenUser; mapping(address => uint256) public tokenUser; uint256[] public tokenThreshold; uint256[] public bonusThreshold; function RCpro(address _tokenSaleContract, uint256[] _oneTokenInFiatWei, uint256[] _sendThreshold, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) { require ( _tokenSaleContract != 0 ); require ( _oneTokenInFiatWei[0] != 0 ); require ( _oneTokenInFiatWei.length == _sendThreshold.length ); require( _remainingTokens != 0 ); require ( _tokenThreshold.length != 0 ); require ( _tokenThreshold.length == _bonusThreshold.length ); bonusThreshold = _bonusThreshold; tokenThreshold = _tokenThreshold; tokenSaleContract = TokenSale(_tokenSaleContract); tokenSaleContract.addMeByRC(); soldTokens = 0; remainingTokens = _remainingTokens; oneTokenInFiatWei = _oneTokenInFiatWei; sendThreshold = _sendThreshold; etherMinimum = _etherMinimum; setTimeRC( _startTime, _endTime ); }",1,"subgraph cluster_1999_RCpro {
label=""RCpro"";
""1999_changeMinimum"" [label=""changeMinimum""];
""1999_totalTokens"" [label=""totalTokens""];
""1999_price"" [label=""price""];
""1999_userBalance"" [label=""userBalance""];
""1999_claimTokenBonus"" [label=""claimTokenBonus""];
""1999_startTime"" [label=""startTime""];
""1999_ended"" [label=""ended""];
""1999_fallback"" [label=""fallback""];
""1999_endTime"" [label=""endTime""];
""1999_giveToken"" [label=""giveToken""];
""1999_releaseTokensTo"" [label=""releaseTokensTo""];
""1999_withdraw"" [label=""withdraw""];
""1999_takeEther"" [label=""takeEther""];
""1999_refundEther"" [label=""refundEther""];
""1999_setTime"" [label=""setTime""];
""1999_setTimeRC"" [label=""setTimeRC""];
""1999_remainingTokens"" [label=""remainingTokens""];
""1999_started"" [label=""started""];
""1999_RCpro"" [label=""RCpro""];
""1999_RCpro"" -> ""1999_KYCBase"";
""1999_releaseTokensTo"" -> ""1999_takeEther"";
""1999_refundEther"" -> ""1999_onlyTokenSaleOwner"";
""1999_releaseTokensTo"" -> ""1999_giveToken"";
""1999_fallback"" -> ""1999_claimTokenBonus"";
""1999_changeMinimum"" -> ""1999_onlyTokenSaleOwner"";
""1999_fallback"" -> ""1999_takeEther"";
""1999_setTime"" -> ""1999_onlyTokenSaleOwner"";
""1999_withdraw"" -> ""1999_onlyTokenSaleOwner"";
""1999_RCpro"" -> ""1999_setTimeRC"";
}
"
0xf29a03e88c425116c979892d475f5cddf1f742ce.sol,Crowdsale,"contract Crowdsale { using SafeMath for uint256; address public owner; uint256 public amountRaised; uint256 public amountRaisedPhase; uint256 public price; token public tokenReward; mapping(address => uint256) public balanceOf; event FundTransfer(address backer, uint amount, bool isContribution); modifier onlyOwner() { require(msg.sender == owner); _; }",1,"subgraph cluster_270_Crowdsale {
label=""Crowdsale"";
""270_fallback"" [label=""fallback""];
""270_Crowdsale"" [label=""Crowdsale""];
""270_destroy"" [label=""destroy""];
""270_destroyAndSend"" [label=""destroyAndSend""];
""270_safeWithdrawal"" [label=""safeWithdrawal""];
""270_destroyAndSend"" -> ""270_onlyOwner"";
""270_destroy"" -> ""270_onlyOwner"";
""270_safeWithdrawal"" -> ""270_onlyOwner"";
}
"
0x0460dcb54214fdf68302b4c733ad7ed827dd6592.sol,evequiz,contract evequiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_evequiz {
label=""evequiz"";
""148_Stop"" [label=""Stop""];
""148_Start"" [label=""Start""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_New"" [label=""New""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x733237b46b1fd6bd3266c9b6daae1c018a9d9493.sol,TFTOKEN,"contract TFTOKEN is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 8; uint256 public constant INITIAL_SUPPLY = 65000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function TFTOKEN() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_TFTOKEN {
label=""TFTOKEN"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_TFTOKEN"" [label=""TFTOKEN""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x029606e5ec44cad1346d6a1273a53b971fa93ad6.sol,Owned,contract Owned { address private Owner; function Owned() public{ Owner = msg.sender; },1,"subgraph cluster_150_Owned {
label=""Owned"";
""150_Terminate"" [label=""Terminate""];
""150_TransferOwner"" [label=""TransferOwner""];
""150_Owned"" [label=""Owned""];
""150_IsOwner"" [label=""IsOwner""];
""150_Terminate"" -> ""150_onlyOwner"";
""150_TransferOwner"" -> ""150_onlyOwner"";
}
"
0x1d91b86e5c7b5e85a61eaaea9762958747712826.sol,Token,contract Token is TokenI { using SafeMath for uint256; address public owner; struct FreezeInfo { address user; uint256 amount; },1,"subgraph cluster_229_TokenController {
label=""TokenController"";
""229_onTransfer"" [label=""onTransfer""];
""229_onApprove"" [label=""onApprove""];
""229_proxyPayment"" [label=""proxyPayment""];
}
"
0x50a667b73223bc612bcc43200120b5c46ee6b4e9.sol,RCpro,"contract RCpro is ICOEngineInterface, KYCBase { using SafeMath for uint256; TokenSale tokenSaleContract; uint256 public startTime; uint256 public endTime; uint256 public etherMinimum; uint256 public soldTokens; uint256 public remainingTokens; uint256[] public oneTokenInFiatWei; uint256[] public sendThreshold; mapping(address => uint256) public etherUser; mapping(address => uint256) public pendingTokenUser; mapping(address => uint256) public tokenUser; uint256[] public tokenThreshold; uint256[] public bonusThreshold; function RCpro(address _tokenSaleContract, uint256[] _oneTokenInFiatWei, uint256[] _sendThreshold, uint256 _remainingTokens, uint256 _etherMinimum, uint256 _startTime , uint256 _endTime, address [] kycSigner, uint256[] _tokenThreshold, uint256[] _bonusThreshold ) public KYCBase(kycSigner) { require ( _tokenSaleContract != 0 ); require ( _oneTokenInFiatWei[0] != 0 ); require ( _oneTokenInFiatWei.length == _sendThreshold.length ); require( _remainingTokens != 0 ); require ( _tokenThreshold.length != 0 ); require ( _tokenThreshold.length == _bonusThreshold.length ); bonusThreshold = _bonusThreshold; tokenThreshold = _tokenThreshold; tokenSaleContract = TokenSale(_tokenSaleContract); tokenSaleContract.addMeByRC(); soldTokens = 0; remainingTokens = _remainingTokens; oneTokenInFiatWei = _oneTokenInFiatWei; sendThreshold = _sendThreshold; etherMinimum = _etherMinimum; setTimeRC( _startTime, _endTime ); }",1,"subgraph cluster_1999_RCpro {
label=""RCpro"";
""1999_changeMinimum"" [label=""changeMinimum""];
""1999_totalTokens"" [label=""totalTokens""];
""1999_price"" [label=""price""];
""1999_userBalance"" [label=""userBalance""];
""1999_claimTokenBonus"" [label=""claimTokenBonus""];
""1999_startTime"" [label=""startTime""];
""1999_ended"" [label=""ended""];
""1999_fallback"" [label=""fallback""];
""1999_endTime"" [label=""endTime""];
""1999_giveToken"" [label=""giveToken""];
""1999_releaseTokensTo"" [label=""releaseTokensTo""];
""1999_withdraw"" [label=""withdraw""];
""1999_takeEther"" [label=""takeEther""];
""1999_refundEther"" [label=""refundEther""];
""1999_setTime"" [label=""setTime""];
""1999_setTimeRC"" [label=""setTimeRC""];
""1999_remainingTokens"" [label=""remainingTokens""];
""1999_started"" [label=""started""];
""1999_RCpro"" [label=""RCpro""];
""1999_RCpro"" -> ""1999_KYCBase"";
""1999_releaseTokensTo"" -> ""1999_takeEther"";
""1999_refundEther"" -> ""1999_onlyTokenSaleOwner"";
""1999_releaseTokensTo"" -> ""1999_giveToken"";
""1999_fallback"" -> ""1999_claimTokenBonus"";
""1999_changeMinimum"" -> ""1999_onlyTokenSaleOwner"";
""1999_fallback"" -> ""1999_takeEther"";
""1999_setTime"" -> ""1999_onlyTokenSaleOwner"";
""1999_withdraw"" -> ""1999_onlyTokenSaleOwner"";
""1999_RCpro"" -> ""1999_setTimeRC"";
}
"
0x6f84faf2ce621f5a4ba161f055a56daffbf78b04.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_817_Destructible {
label=""Destructible"";
""817_destroy"" [label=""destroy""];
""817_destroyAndSend"" [label=""destroyAndSend""];
""817_Destructible"" [label=""Destructible""];
""817_destroyAndSend"" -> ""817_onlyOwner"";
""817_destroy"" -> ""817_onlyOwner"";
}
"
0x2736d225f85740f42d17987100dc8d58e9e16252.sol,ServerRegistry,"contract ServerRegistry { event LogServerRegistered(string url, uint props, address owner, uint deposit); event LogServerUnregisterRequested(string url, address owner, address caller); event LogServerUnregisterCanceled(string url, address owner); event LogServerConvicted(string url, address owner); event LogServerRemoved(string url, address owner); struct In3Server { string url; address owner; uint deposit; uint props; uint128 unregisterTime; uint128 unregisterDeposit; address unregisterCaller; }",1,"subgraph cluster_663_ServerRegistry {
label=""ServerRegistry"";
""663_updateServer"" [label=""updateServer""];
""663_convict"" [label=""convict""];
""663_checkLimits"" [label=""checkLimits""];
""663_requestUnregisteringServer"" [label=""requestUnregisteringServer""];
""663_totalServers"" [label=""totalServers""];
""663_cancelUnregisteringServer"" [label=""cancelUnregisteringServer""];
""663_calcUnregisterDeposit"" [label=""calcUnregisterDeposit""];
""663_confirmUnregisteringServer"" [label=""confirmUnregisteringServer""];
""663_registerServer"" [label=""registerServer""];
""663_removeServer"" [label=""removeServer""];
""663_requestUnregisteringServer"" -> ""663_calcUnregisterDeposit"";
""663_confirmUnregisteringServer"" -> ""663_removeServer"";
""663_registerServer"" -> ""663_checkLimits"";
""663_updateServer"" -> ""663_checkLimits"";
""663_convict"" -> ""663_removeServer"";
}
"
0x32ceb540334300bcd53836a25a4bd64d607babd8.sol,BetGame,contract BetGame is DSStop { using SafeMath for uint256; struct Bet { address player; bytes32 secretHash; uint256 amount; uint roundId; bool isRevealed; uint nonce; bool guessOdd; bytes32 secret; },1,"subgraph cluster_1932_BetGame {
label=""BetGame"";
""1932_BetGame"" [label=""BetGame""];
""1932_getBlockNumber"" [label=""getBlockNumber""];
""1932_onTokenTransfer"" [label=""onTokenTransfer""];
""1932_startRoundWithFirstBet"" [label=""startRoundWithFirstBet""];
""1932_getJackpotResults"" [label=""getJackpotResults""];
""1932_claimTokens"" [label=""claimTokens""];
""1932_receiveToken"" [label=""receiveToken""];
""1932_withdraw"" [label=""withdraw""];
""1932_claimFromPool"" [label=""claimFromPool""];
""1932_betRevealed"" [label=""betRevealed""];
""1932_getBetSizeAtRound"" [label=""getBetSizeAtRound""];
""1932_addRound"" [label=""addRound""];
""1932_revealBet"" [label=""revealBet""];
""1932_finalizeRewardForBet"" [label=""finalizeRewardForBet""];
""1932_getBetIdAtRound"" [label=""getBetIdAtRound""];
""1932_tokenFallback"" [label=""tokenFallback""];
""1932_finalizeRound"" [label=""finalizeRound""];
""1932_calculateSecretHash"" [label=""calculateSecretHash""];
""1932_betWithRound"" [label=""betWithRound""];
""1932_finalizeRewardForRound"" [label=""finalizeRewardForRound""];
""1932_isPlayerInRound"" [label=""isPlayerInRound""];
""1932_getBetIds"" [label=""getBetIds""];
""1932_addBet"" [label=""addBet""];
""1932_startRoundWithFirstBet"" -> ""1932_addBet"";
""1932_finalizeRewardForRound"" -> ""1932_finalizeRewardForBet"";
""1932_claimFromPool"" -> ""1932_auth"";
""1932_startRoundWithFirstBet"" -> ""1932_addRound"";
""1932_betWithRound"" -> ""1932_isPlayerInRound"";
""1932_betWithRound"" -> ""1932_getBlockNumber"";
""1932_finalizeRound"" -> ""1932_finalizeRewardForRound"";
""1932_betWithRound"" -> ""1932_tokenPayable"";
""1932_addBet"" -> ""1932_notNull"";
""1932_finalizeRewardForRound"" -> ""1932_getJackpotResults"";
""1932_finalizeRound"" -> ""1932_getBlockNumber"";
""1932_addRound"" -> ""1932_getBlockNumber"";
""1932_startRoundWithFirstBet"" -> ""1932_tokenPayable"";
""1932_finalizeRound"" -> ""1932_betRevealed"";
""1932_claimTokens"" -> ""1932_auth"";
""1932_betWithRound"" -> ""1932_addBet"";
}
"
0x8b548505babfd983fc45210499b44e340bb85d76.sol,Hedgely,"contract Hedgely is Ownable, Syndicate { address[] private players; mapping(address => bool) private activePlayers; uint256 numPlayers = 0; mapping(address => uint256 [10] ) private playerPortfolio; uint256 public totalHedgelyWinnings; uint256 public totalHedgelyInvested; uint256[10] private marketOptions; uint256 public totalInvested; uint256 private seedInvestment; uint256 public numberOfInvestments; uint256 public numberWinner; uint256 public startingBlock; uint256 public endingBlock; uint256 public sessionBlockSize; uint256 public sessionNumber; uint256 public currentLowest; uint256 public currentLowestCount; uint256 public precision = 1000000000000000; uint256 public minimumStake = 1 finney; event Invest( address _from, uint256 _option, uint256 _value, uint256[10] _marketOptions, uint _blockNumber ); event EndSession( uint256 _sessionNumber, uint256 _winningOption, uint256[10] _marketOptions, uint256 _blockNumber ); event StartSession( uint256 _sessionNumber, uint256 _sessionBlockSize, uint256[10] _marketOptions, uint256 _blockNumber ); bool locked; modifier noReentrancy() { require(!locked); locked = true; _; locked = false; }",1,"subgraph cluster_1163_Hedgely {
label=""Hedgely"";
""1163_rand"" [label=""rand""];
""1163_random"" [label=""random""];
""1163_Hedgely"" [label=""Hedgely""];
""1163_distributeWinnings"" [label=""distributeWinnings""];
""1163_withdraw"" [label=""withdraw""];
""1163_getPlayerPortfolio"" [label=""getPlayerPortfolio""];
""1163_numberOfInvestors"" [label=""numberOfInvestors""];
""1163_getMarketOptions"" [label=""getMarketOptions""];
""1163_resetMarket"" [label=""resetMarket""];
""1163_fallback"" [label=""fallback""];
""1163_findCurrentLowest"" [label=""findCurrentLowest""];
""1163_kill"" [label=""kill""];
""1163_insertPlayer"" [label=""insertPlayer""];
""1163_roundIt"" [label=""roundIt""];
""1163_setsessionBlockSize"" [label=""setsessionBlockSize""];
""1163_invest"" [label=""invest""];
""1163_resetMarket"" -> ""1163_findCurrentLowest"";
""1163_distributeWinnings"" -> ""1163_resetMarket"";
""1163_resetMarket"" -> ""1163_insertPlayer"";
""1163_setsessionBlockSize"" -> ""1163_onlyOwner"";
""1163_invest"" -> ""1163_distributeWinnings"";
""1163_invest"" -> ""1163_noReentrancy"";
""1163_invest"" -> ""1163_roundIt"";
""1163_kill"" -> ""1163_onlyOwner"";
""1163_resetMarket"" -> ""1163_rand"";
""1163_invest"" -> ""1163_findCurrentLowest"";
""1163_rand"" -> ""1163_random"";
""1163_distributeWinnings"" -> ""1163_distributeProfit"";
""1163_withdraw"" -> ""1163_onlyOwner"";
""1163_Hedgely"" -> ""1163_resetMarket"";
""1163_invest"" -> ""1163_allocateEarlyPlayerShare"";
""1163_invest"" -> ""1163_insertPlayer"";
}
"
0x0254ffd95dd7c8e27d4c7a32e24464196efcc852.sol,BEATA,"contract BEATA is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 10; uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function BEATA() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_BEATA {
label=""BEATA"";
""706__transfer"" [label=""_transfer""];
""706_BEATA"" [label=""BEATA""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0xc5005344d52758ee2264be257a198b50f884711b.sol,illume,"contract illume is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 50 * 1 days; uint public round2 = now + 40 * 1 days; uint public round1 = now + 20 * 1 days; uint256 public totalSupply = 10000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth =20000000e18; uint public target0drop = 5000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_illume {
label=""illume"";
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_getTokens"" [label=""getTokens""];
""1253_fallback"" [label=""fallback""];
""1253_allowance"" [label=""allowance""];
""1253_transfer"" [label=""transfer""];
""1253_distr"" [label=""distr""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_burn"" [label=""burn""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_approve"" [label=""approve""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_Distribute"" [label=""Distribute""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_constructor"" [label=""constructor""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_add"" [label=""add""];
""1253_withdraw"" [label=""withdraw""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" -> ""1253_canDistr"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_getTokens"" -> ""1253_distr"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_distr"" -> ""1253_canDistr"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
}
"
0x533ec971484b1014215422010978e892eacac430.sol,MortifyAsset,"contract MortifyAsset is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 100 * 1 days; uint public round2 = now + 95 * 1 days; uint public round1 = now + 70 * 1 days; uint256 public totalSupply = 25000000000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 100000000000e18; uint public target0drop = 1; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_MortifyAsset {
label=""MortifyAsset"";
""1253_withdraw"" [label=""withdraw""];
""1253_transfer"" [label=""transfer""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" [label=""getTokens""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_constructor"" [label=""constructor""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_Distribute"" [label=""Distribute""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_add"" [label=""add""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_approve"" [label=""approve""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_distr"" [label=""distr""];
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_constructor"" -> ""1253_distr"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_distr"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
}
"
0x5b2028602af2693d50b4157f4acf84d632ec8208.sol,Savings,"contract Savings is Ownable { address public Owner; mapping (address => uint) public deposits; uint public openDate; event Initialized(uint OpenDate); event Deposit(address indexed Depositor, uint Amount); event Withdrawal(address indexed Withdrawer, uint Amount); function init(uint open) payable { Owner = msg.sender; openDate = open; Initialized(open); }",1,"subgraph cluster_164_Savings {
label=""Savings"";
""164_kill"" [label=""kill""];
""164_fallback"" [label=""fallback""];
""164_withdraw"" [label=""withdraw""];
""164_init"" [label=""init""];
""164_deposit"" [label=""deposit""];
""164_withdraw"" -> ""164_isOwner"";
""164_fallback"" -> ""164_deposit"";
""164_kill"" -> ""164_isOwner"";
}
"
0xecbd0854075009d23360c62da07047efc2312144.sol,Crowdsale,"contract Crowdsale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); function Crowdsale () public { beneficiary = 0x1e19E36928bA65184669d8A7e7A37d8B061B9022; fundingGoal = 0.0022 * 1 ether; deadline = now + 40 * 1 minutes; price = 0.00058 * 1 ether; tokenReward = token(0xe8EF8d9d9Ff515720A62d2E2f14f3b5b677C6670); }",1,"subgraph cluster_230_Crowdsale {
label=""Crowdsale"";
""230_safeWithdrawal"" [label=""safeWithdrawal""];
""230_Crowdsale"" [label=""Crowdsale""];
""230_fallback"" [label=""fallback""];
""230_checkGoalReached"" [label=""checkGoalReached""];
""230_safeWithdrawal"" -> ""230_afterDeadline"";
""230_checkGoalReached"" -> ""230_afterDeadline"";
}
"
0xead7adf1bf0df9f03b15429d82ea1f70ebd619f1.sol,Crowdsale,"contract Crowdsale is owned { address public beneficiary; uint256 public preICOLimit; uint256 public totalLimit; uint256 public pricePreICO; uint256 public priceICO; bool preICOClosed = false; bool ICOClosed = false; bool preICOWithdrawn = false; bool ICOWithdrawn = false; bool public preICOActive = false; bool public ICOActive = false; uint256 public preICORaised; uint256 public ICORaised; uint256 public totalRaised; token public tokenReward; event FundTransfer(address backer, uint256 amount, bool isContribution); mapping(address => uint256) public balanceOf; function Crowdsale() { preICOLimit = 5000000 * 1 ether; totalLimit = 45000000 * 1 ether; pricePreICO = 375; priceICO = 250; }",1,"subgraph cluster_402_Crowdsale {
label=""Crowdsale"";
""402_startICO"" [label=""startICO""];
""402_fallback"" [label=""fallback""];
""402_startPreICO"" [label=""startPreICO""];
""402_init"" [label=""init""];
""402_withdrawFunds"" [label=""withdrawFunds""];
""402_Crowdsale"" [label=""Crowdsale""];
""402_stopPreICO"" [label=""stopPreICO""];
""402_stopICO"" [label=""stopICO""];
""402_startICO"" -> ""402_onlyOwner"";
""402_init"" -> ""402_onlyOwner"";
""402_stopPreICO"" -> ""402_onlyOwner"";
""402_withdrawFunds"" -> ""402_onlyOwner"";
""402_stopICO"" -> ""402_onlyOwner"";
""402_startPreICO"" -> ""402_onlyOwner"";
}
"
0xeece3bfd3c83715f1f801dfa6b735ac9093c5bc3.sol,SecuritySale,"contract SecuritySale is Ownable { bool public live; IInvestorList public investorList; event SaleLive(bool liveness); event EtherIn(address from, uint amount); event StartSale(); event EndSale(); constructor() public { live = false; }",1,"subgraph cluster_406_ISecuritySale {
label=""ISecuritySale"";
""406_setLive"" [label=""setLive""];
""406_setInvestorList"" [label=""setInvestorList""];
}
"
0x3ac86159fad58c90aaea1c61974d69d4f8ce8e77.sol,Crowdsale,contract Crowdsale is Ownable { using SafeMath for uint256; SingleTokenCoin public token; WrapperOraclize private wrapper = WrapperOraclize(0xfC484c66daE464CC6055d7a4782Ec8761dc9842F); uint256 private angel_sale_start; uint256 private angel_sale_finish; uint256 private pre_sale_start; uint256 private pre_sale_finish; uint256 private public_sale_start; uint256 private public_sale_finish; bool private isAngel; bool private isPreSale; bool private isPublic; uint256 private angel_rate; uint256 private public_rate; uint256 private decimals; uint256 private totalETH; address public coreTeamAddr; address public itDevAddr; address public futDevAddr; address public commFoundAddr; address public socWarefareAddr; address public marketingAddr; address public unsoldAddr; address public collectAddr; bool public mintingFinished = false; mapping(address => uint256) private founding_buyers_token; mapping(address => uint256) private angel_buyers_eth; mapping(address => uint256) private angel_buyers_token; mapping(address => uint256) private pre_sale_buyers_eth; mapping(address => uint256) private pre_sale_buyers_token; mapping(address => uint256) private pe_buyers_token; mapping(address => uint256) private public_buyers_eth; mapping(address => uint256) private public_buyers_token; address[] private founding_investors; address[] private pre_sale_investors; address[] private angel_investors; address[] private pe_investors; address[] private public_investors; uint256 private soldTokens; uint256 private maxcup; uint256 private totalAmount; uint256 private foundingAmount; uint256 private angelAmount; uint256 private preSaleAmount; uint256 private PEInvestorAmount; uint256 private publicSaleAmount; uint256 private coreTeamAmount; uint256 private coreTeamAuto; uint256 private coreTeamManual; uint256 private itDevAmount; uint256 private futDevAmount; uint256 private commFoundAmount; uint256 private socWarefareAmount; uint256 private marketingAmount; uint256 private angel_sale_sold; uint256 private pre_sale_sold; uint256 private public_sale_sold; uint256 private founding_sold; uint256 private peInvestors_sold; uint256 private angel_sale_totalETH; uint256 private pre_sale_totalETH; uint256 private public_sale_totalETH; uint256 private firstPhaseAmount; uint256 private secondPhaseAmount; uint256 private thirdPhaseAmount; uint256 private fourPhaseAmount; uint256 private firstPhaseDiscount; uint256 private secondPhaseDiscount; uint256 private thirdPhaseDiscount; uint256 private fourPhaseDiscount; uint256 private currentPhase; bool private moveTokens; bool withdrowTokensComplete = false; function Crowdsale(address token_addr) { token = SingleTokenCoin(token_addr); public_rate = 3546099290780141; angel_rate = 20; decimals = 35460992907801; angel_sale_start = now - 3 days; angel_sale_finish = 1510488000; pre_sale_start = 1510491600; pre_sale_finish = 1512561600; public_sale_start = 1512565200; public_sale_finish = public_sale_start + 14 days; moveTokens = false; isAngel = true; isPreSale = false; isPublic = false; currentPhase = 1; founding_sold = 0; peInvestors_sold = 0; angel_sale_sold = 0; pre_sale_sold = 0; public_sale_sold = 0; angel_sale_totalETH = 0; pre_sale_totalETH = 0; public_sale_totalETH = 0; firstPhaseAmount = 18750000E18; secondPhaseAmount = 37500000E18; thirdPhaseAmount = 56250000E18; fourPhaseAmount = 75000000E18; firstPhaseDiscount = 30; secondPhaseDiscount = 40; thirdPhaseDiscount = 50; fourPhaseDiscount = 60; totalAmount = 500000000E18; foundingAmount = 10000000E18; angelAmount = 25000000E18; preSaleAmount = 75000000E18; PEInvestorAmount = 50000000E18; publicSaleAmount = 100000000E18; coreTeamAmount = 100000000E18; coreTeamAuto = 60000000E18; coreTeamManual = 40000000E18; itDevAmount = 50000000E18; futDevAmount = 50000000E18; commFoundAmount = 15000000E18; socWarefareAmount = 10000000E18; marketingAmount = 15000000E18; mintingFinished = false; coreTeamAddr = 0xB0A3A845cfA5e2baCD3925Af85c59dE4D32D874f; itDevAddr = 0x61528ffdCd4BC26c81c88423018780b399Fbb8e7; futDevAddr = 0xA1f9C3F137496e6b8bA4445d15b0986CaA22FDe3; commFoundAddr = 0xC30a0E7FFad754A9AD2A1C1cFeB10e05f7C7aB6A; socWarefareAddr = 0xd5d692C89C83313579d02C94F4faE600fe30D1d9; marketingAddr = 0x5490510072b929273F65dba4B72c96cd45A99b5A; unsoldAddr = 0x18051b5b0F1FDb4D44eACF2FA49f19bB80105Fc1; collectAddr = 0xB338121B8e5dA0900a6E8580321293f3CF52E58D; },1,"subgraph cluster_2629_Crowdsale {
label=""Crowdsale"";
""2629_withdrowTokens"" [label=""withdrowTokens""];
""2629_getFinishStatus"" [label=""getFinishStatus""];
""2629_removeFreeze"" [label=""removeFreeze""];
""2629_getFinishDates"" [label=""getFinishDates""];
""2629_getTotalETH"" [label=""getTotalETH""];
""2629_finishMinting"" [label=""finishMinting""];
""2629_saveInfoAboutInvestors"" [label=""saveInfoAboutInvestors""];
""2629_getStartDates"" [label=""getStartDates""];
""2629_getWrapperData"" [label=""getWrapperData""];
""2629_sendToAddress"" [label=""sendToAddress""];
""2629_setTransferOwnership"" [label=""setTransferOwnership""];
""2629_getInvestorsCount"" [label=""getInvestorsCount""];
""2629_calculatePrice"" [label=""calculatePrice""];
""2629_calculateRate"" [label=""calculateRate""];
""2629_getCurrentPrice"" [label=""getCurrentPrice""];
""2629_getInvestorByIndex"" [label=""getInvestorByIndex""];
""2629_withdrowETH"" [label=""withdrowETH""];
""2629_setAngelDate"" [label=""setAngelDate""];
""2629_getOwner"" [label=""getOwner""];
""2629_fallback"" [label=""fallback""];
""2629_setFreeze"" [label=""setFreeze""];
""2629_getSoldToken"" [label=""getSoldToken""];
""2629_mint"" [label=""mint""];
""2629_setPublicSaleFinishDate"" [label=""setPublicSaleFinishDate""];
""2629_getBalanceContract"" [label=""getBalanceContract""];
""2629_getContractAddress"" [label=""getContractAddress""];
""2629_setPublicSaleDate"" [label=""setPublicSaleDate""];
""2629_moveUnsold"" [label=""moveUnsold""];
""2629_refund"" [label=""refund""];
""2629_sendOracleData"" [label=""sendOracleData""];
""2629_Crowdsale"" [label=""Crowdsale""];
""2629_getTotalToken"" [label=""getTotalToken""];
""2629_getInvestorsTokens"" [label=""getInvestorsTokens""];
""2629_getLeftToken"" [label=""getLeftToken""];
""2629_newTransferManualTokensnewTransfer"" [label=""newTransferManualTokensnewTransfer""];
""2629_setPreSaleDate"" [label=""setPreSaleDate""];
""2629_calculateMinorRefund"" [label=""calculateMinorRefund""];
""2629_setPreSaleFinishDate"" [label=""setPreSaleFinishDate""];
""2629_bytesToUInt"" [label=""bytesToUInt""];
""2629_setAngelFinishDate"" [label=""setAngelFinishDate""];
""2629_finishMinting"" -> ""2629_onlyOwner"";
""2629_setPublicSaleFinishDate"" -> ""2629_onlyOwner"";
""2629_mint"" -> ""2629_isICOFinished"";
""2629_sendToAddress"" -> ""2629_onlyOwner"";
""2629_calculateRate"" -> ""2629_getWrapperData"";
""2629_sendToAddress"" -> ""2629_canMint"";
""2629_setPreSaleDate"" -> ""2629_onlyOwner"";
""2629_setAngelFinishDate"" -> ""2629_onlyOwner"";
""2629_fallback"" -> ""2629_mint"";
""2629_getCurrentPrice"" -> ""2629_calculatePrice"";
""2629_mint"" -> ""2629_isAnyStage"";
""2629_mint"" -> ""2629_saveInfoAboutInvestors"";
""2629_mint"" -> ""2629_refund"";
""2629_mint"" -> ""2629_calculatePrice"";
""2629_setAngelDate"" -> ""2629_onlyOwner"";
""2629_mint"" -> ""2629_canMint"";
""2629_getCurrentPrice"" -> ""2629_calculateRate"";
""2629_mint"" -> ""2629_calculateMinorRefund"";
""2629_setTransferOwnership"" -> ""2629_onlyOwner"";
""2629_withdrowTokens"" -> ""2629_onlyOwner"";
""2629_withdrowETH"" -> ""2629_onlyOwner"";
""2629_moveUnsold"" -> ""2629_onlyOwner"";
""2629_newTransferManualTokensnewTransfer"" -> ""2629_onlyOwner"";
""2629_setPublicSaleDate"" -> ""2629_onlyOwner"";
""2629_setTransferOwnership"" -> ""2629_transferOwnership"";
""2629_setFreeze"" -> ""2629_onlyOwner"";
""2629_removeFreeze"" -> ""2629_onlyOwner"";
""2629_calculateRate"" -> ""2629_bytesToUInt"";
""2629_mint"" -> ""2629_calculateRate"";
""2629_setPreSaleFinishDate"" -> ""2629_onlyOwner"";
}
"
0x2af8b34f04e93c79ee3a1f300a019f29869d896a.sol,SiliconValleyToken,"contract SiliconValleyToken is FrozenToken { string public name = ; string public symbol = ; uint8 public decimals = 18; string public version = ; string public publisher = ""https: string public description = ; bool public acceptAdminWithdraw = false; bool public acceptDonate = true; event InfoChanged(address indexed sender, string version, string publisher, string description); event Withdraw(address indexed sender, address indexed wallet, uint256 amount); event WithdrawTokens(address indexed sender, address indexed wallet, address indexed token, uint256 amount); event Donate(address indexed sender, uint256 value); event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue); function SiliconValleyToken() public {}",1,"subgraph cluster_2239_SiliconValleyToken {
label=""SiliconValleyToken"";
""2239_fallback"" [label=""fallback""];
""2239_withdrawTokens"" [label=""withdrawTokens""];
""2239_setupInfo"" [label=""setupInfo""];
""2239_withdrawAmount"" [label=""withdrawAmount""];
""2239_withdraw"" [label=""withdraw""];
""2239_balanceToken"" [label=""balanceToken""];
""2239_donate"" [label=""donate""];
""2239_updAcceptAdminWithdraw"" [label=""updAcceptAdminWithdraw""];
""2239_updAcceptDonate"" [label=""updAcceptDonate""];
""2239_SiliconValleyToken"" [label=""SiliconValleyToken""];
""2239_balanceToken"" -> ""2239_validAddress"";
""2239_withdrawTokens"" -> ""2239_validAddress"";
""2239_updAcceptAdminWithdraw"" -> ""2239_onlyOwner"";
""2239_withdrawTokens"" -> ""2239_greaterThanZero"";
""2239_withdrawAmount"" -> ""2239_validBalanceThis"";
""2239_updAcceptDonate"" -> ""2239_authLevel"";
""2239_withdraw"" -> ""2239_withdrawAmount"";
""2239_setupInfo"" -> ""2239_notEmpty"";
""2239_withdrawTokens"" -> ""2239_authLevel"";
""2239_withdrawAmount"" -> ""2239_authLevel"";
""2239_donate"" -> ""2239_greaterThanZero"";
""2239_fallback"" -> ""2239_donate"";
""2239_withdrawAmount"" -> ""2239_greaterThanZero"";
""2239_setupInfo"" -> ""2239_authLevel"";
}
"
0x4bfed6f4fd57a1709b469e1a8918c6921e82a4f9.sol,ALFA_QUIZ,contract ALFA_QUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ALFA_QUIZ {
label=""ALFA_QUIZ"";
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x379f2596d4c4a417ef1023b81c8b9ff5419b13d4.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 10000000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_setPrices"" [label=""setPrices""];
""612_freezeAccount"" [label=""freezeAccount""];
""612_mintToken"" [label=""mintToken""];
""612__transfer"" [label=""_transfer""];
""612_buy"" [label=""buy""];
""612_fallback"" [label=""fallback""];
""612_selfdestructs"" [label=""selfdestructs""];
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_buy"" -> ""612__transfer"";
""612_fallback"" -> ""612__transfer"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_mintToken"" -> ""612_onlyOwner"";
""612_selfdestructs"" -> ""612_onlyOwner"";
}
"
0xef078a64e1593afee09912d18097bc49fa74c7a9.sol,ETHER_Game,contract ETHER_Game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETHER_Game {
label=""ETHER_Game"";
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x46c9f93c3249c430c6ca19f02240ef9e038ba9d1.sol,FundForwarder,"contract FundForwarder is Escapable { Campaign public beneficiary; function FundForwarder( Campaign _beneficiary, address _escapeHatchCaller, address _escapeHatchDestination ) Escapable(_escapeHatchCaller, _escapeHatchDestination) { beneficiary = _beneficiary; }",1,"subgraph cluster_437_FundForwarder {
label=""FundForwarder"";
""437_fallback"" [label=""fallback""];
""437_FundForwarder"" [label=""FundForwarder""];
""437_FundForwarder"" -> ""437_Escapable"";
}
"
0x4d3b775a793aa40e52e5ebd76d1904318fcf4989.sol,TokenERC20,contract TokenERC20 is Ownable{ token public tokenReward = token(0x778E763C4a09c74b2de221b4D3c92d8c7f27a038); uint256 public bili = 7500; uint256 public endtime = 1540051199; uint256 public amount; address public addr = 0x2aCf431877107176c88B6300830C6b696d744344; address public addr2 = 0x6090275ca0AD1b36e651bCd3C696622b96a25cFF; function TokenERC20( ) public { },1,"subgraph cluster_176_TokenERC20 {
label=""TokenERC20"";
""176_setbili"" [label=""setbili""];
""176_fallback"" [label=""fallback""];
""176_TokenERC20"" [label=""TokenERC20""];
""176_setbili"" -> ""176_onlyOwner"";
}
"
0x410af23334e26aa13c1f3e630bae006bdd313264.sol,ClearToken,"contract ClearToken is StandardToken { enum States { Initial, ValuationSet, Ico, Underfunded, Operational, Paused }",1,"subgraph cluster_1608_ClearToken {
label=""ClearToken"";
""1608_ClearToken"" [label=""ClearToken""];
""1608_rescueToken"" [label=""rescueToken""];
""1608_issueTokensToUser"" [label=""issueTokensToUser""];
""1608_updateEthICOVariables"" [label=""updateEthICOVariables""];
""1608_endICO"" [label=""endICO""];
""1608_resumeICO"" [label=""resumeICO""];
""1608_startICO"" [label=""startICO""];
""1608_moveToState"" [label=""moveToState""];
""1608_requestRefund"" [label=""requestRefund""];
""1608_abort"" [label=""abort""];
""1608_anyoneEndICO"" [label=""anyoneEndICO""];
""1608_addPresaleAmount"" [label=""addPresaleAmount""];
""1608_updateETHNZD"" [label=""updateETHNZD""];
""1608_fallback"" [label=""fallback""];
""1608_addToWhitelist"" [label=""addToWhitelist""];
""1608_finishMinting"" [label=""finishMinting""];
""1608_transfer"" [label=""transfer""];
""1608_requestPayout"" [label=""requestPayout""];
""1608_balanceOf"" [label=""balanceOf""];
""1608_pause"" [label=""pause""];
""1608_calcBonus"" [label=""calcBonus""];
""1608_transferFrom"" [label=""transferFrom""];
""1608_endICO"" -> ""1608_onlyStateControl"";
""1608_ClearToken"" -> ""1608_moveToState"";
""1608_addToWhitelist"" -> ""1608_onlyWhitelist"";
""1608_requestPayout"" -> ""1608_requireState"";
""1608_updateEthICOVariables"" -> ""1608_moveToState"";
""1608_resumeICO"" -> ""1608_onlyStateControl"";
""1608_updateETHNZD"" -> ""1608_onlyTokenAssignmentControl"";
""1608_anyoneEndICO"" -> ""1608_moveToState"";
""1608_rescueToken"" -> ""1608_requireState"";
""1608_endICO"" -> ""1608_finishMinting"";
""1608_anyoneEndICO"" -> ""1608_requireState"";
""1608_transferFrom"" -> ""1608_transferFrom"";
""1608_requestPayout"" -> ""1608_onlyWithdraw"";
""1608_abort"" -> ""1608_onlyStateControl"";
""1608_anyoneEndICO"" -> ""1608_finishMinting"";
""1608_abort"" -> ""1608_requireState"";
""1608_updateEthICOVariables"" -> ""1608_onlyStateControl"";
""1608_abort"" -> ""1608_moveToState"";
""1608_addPresaleAmount"" -> ""1608_onlyTokenAssignmentControl"";
""1608_transfer"" -> ""1608_transfer"";
""1608_resumeICO"" -> ""1608_requireState"";
""1608_addPresaleAmount"" -> ""1608_issueTokensToUser"";
""1608_transfer"" -> ""1608_requireState"";
""1608_rescueToken"" -> ""1608_onlyTokenAssignmentControl"";
""1608_pause"" -> ""1608_moveToState"";
""1608_endICO"" -> ""1608_moveToState"";
""1608_pause"" -> ""1608_onlyStateControl"";
""1608_startICO"" -> ""1608_moveToState"";
""1608_transferFrom"" -> ""1608_requireState"";
""1608_fallback"" -> ""1608_calcBonus"";
""1608_pause"" -> ""1608_requireState"";
""1608_startICO"" -> ""1608_requireState"";
""1608_endICO"" -> ""1608_requireState"";
""1608_resumeICO"" -> ""1608_moveToState"";
""1608_updateETHNZD"" -> ""1608_requireState"";
""1608_fallback"" -> ""1608_issueTokensToUser"";
""1608_fallback"" -> ""1608_requireState"";
""1608_startICO"" -> ""1608_onlyStateControl"";
""1608_requestRefund"" -> ""1608_requireState"";
}
"
0x299187bb996599f7fc82df025ee8964cafe3085a.sol,Challenge,contract Challenge { address public owner; address public previous_owner; address public creator; bytes32 public flag_hash = 0xfa9b079005103147ac67299be9119fb4a47e29801f2d8d5025f36b248ce23695; function Challenge() public { owner = msg.sender; creator = msg.sender; },1,"subgraph cluster_142_Challenge {
label=""Challenge"";
""142_Challenge"" [label=""Challenge""];
""142_check_flag"" [label=""check_flag""];
""142_withdraw"" [label=""withdraw""];
""142_change_flag_hash"" [label=""change_flag_hash""];
}
"
0x365ec7b439abcc8a3a2c4289f0868a4adcd996e9.sol,EtherRacingCore,"contract EtherRacingCore is Ownable, Pausable { uint64 _seed = 0; function random(uint64 upper) internal returns (uint64) { _seed = uint64(keccak256(keccak256(block.blockhash(block.number), _seed), now)); return _seed % upper; }",1,"subgraph cluster_1857_EtherRacingCore {
label=""EtherRacingCore"";
""1857_bid"" [label=""bid""];
""1857_EtherRacingCore"" [label=""EtherRacingCore""];
""1857_getCarProductEarning"" [label=""getCarProductEarning""];
""1857_addAuction"" [label=""addAuction""];
""1857_getCarProductName"" [label=""getCarProductName""];
""1857_getPlayerBalance"" [label=""getPlayerBalance""];
""1857_getCarProduct"" [label=""getCarProduct""];
""1857_cancelAuction"" [label=""cancelAuction""];
""1857_cashOutCar"" [label=""cashOutCar""];
""1857_getCarDetails"" [label=""getCarDetails""];
""1857_getCarProductCurrentPrice"" [label=""getCarProductCurrentPrice""];
""1857_addCarInit"" [label=""addCarInit""];
""1857_CompleteInit"" [label=""CompleteInit""];
""1857_getCarCurrentPriceAuction"" [label=""getCarCurrentPriceAuction""];
""1857_getCarAuctionID"" [label=""getCarAuctionID""];
""1857_getCarSelling"" [label=""getCarSelling""];
""1857_getCarEarning"" [label=""getCarEarning""];
""1857_getCarCount"" [label=""getCarCount""];
""1857_setUpgradeAddress"" [label=""setUpgradeAddress""];
""1857_cashOut"" [label=""cashOut""];
""1857_getCarOwner"" [label=""getCarOwner""];
""1857_buyCar"" [label=""buyCar""];
""1857_random"" [label=""random""];
""1857_addCarProduct"" [label=""addCarProduct""];
""1857_levelUpCar"" [label=""levelUpCar""];
""1857_endSaleCarProduct"" [label=""endSaleCarProduct""];
""1857__transfer"" [label=""_transfer""];
""1857_upgradeCar"" [label=""upgradeCar""];
""1857__transferAction"" [label=""_transferAction""];
""1857_getCarProductCount"" [label=""getCarProductCount""];
""1857_cashOutCar"" -> ""1857_whenNotPaused"";
""1857_getCarCurrentPriceAuction"" -> ""1857_getCarSelling"";
""1857__transferAction"" -> ""1857_whenNotPaused"";
""1857_cancelAuction"" -> ""1857_whenNotPaused"";
""1857_setUpgradeAddress"" -> ""1857_onlyMaster"";
""1857_buyCar"" -> ""1857_random"";
""1857_addCarInit"" -> ""1857_onlyMaster"";
""1857_EtherRacingCore"" -> ""1857_addCarProduct"";
""1857_addAuction"" -> ""1857_whenNotPaused"";
""1857_bid"" -> ""1857_getCarCurrentPriceAuction"";
""1857_upgradeCar"" -> ""1857_whenNotPaused"";
""1857_cashOutCar"" -> ""1857_getCarEarning"";
""1857_addCarProduct"" -> ""1857_onlyMaster"";
""1857_CompleteInit"" -> ""1857_onlyMaster"";
""1857__transfer"" -> ""1857_whenNotPaused"";
""1857_bid"" -> ""1857_whenNotPaused"";
""1857_cashOut"" -> ""1857_whenNotPaused"";
""1857_endSaleCarProduct"" -> ""1857_onlyMaster"";
""1857_levelUpCar"" -> ""1857_onlyMaster"";
}
"
0xf28460e6c571f1d1e481c81dd84973f9b00e1b7b.sol,KpopItem,contract KpopItem is ERC721 { address public author; address public coauthor; address public manufacturer; string public constant NAME = ; string public constant SYMBOL = ; uint public GROWTH_BUMP = 0.4 ether; uint public MIN_STARTING_PRICE = 0.001 ether; uint public PRICE_INCREASE_SCALE = 120; uint public DIVIDEND = 3; address public KPOP_CELEB_CONTRACT_ADDRESS = 0x0; address public KPOP_ARENA_CONTRACT_ADDRESS = 0x0; struct Item { string name; },1,"subgraph cluster_1238_KpopItem {
label=""KpopItem"";
""1238_withdraw"" [label=""withdraw""];
""1238_KpopItem"" [label=""KpopItem""];
""1238_setGrowthBump"" [label=""setGrowthBump""];
""1238_setCoAuthor"" [label=""setCoAuthor""];
""1238_transferToWinner"" [label=""transferToWinner""];
""1238_approve"" [label=""approve""];
""1238_setDividend"" [label=""setDividend""];
""1238_getItem"" [label=""getItem""];
""1238_setKpopArenaContractAddress"" [label=""setKpopArenaContractAddress""];
""1238_transfer"" [label=""transfer""];
""1238_balanceOf"" [label=""balanceOf""];
""1238_buy"" [label=""buy""];
""1238_isApproved"" [label=""isApproved""];
""1238_setKpopCelebContractAddress"" [label=""setKpopCelebContractAddress""];
""1238_updateItem"" [label=""updateItem""];
""1238__transfer"" [label=""_transfer""];
""1238_setPriceIncreaseScale"" [label=""setPriceIncreaseScale""];
""1238_ownerOf"" [label=""ownerOf""];
""1238_celebOf"" [label=""celebOf""];
""1238_takeOwnership"" [label=""takeOwnership""];
""1238_setMinStartingPrice"" [label=""setMinStartingPrice""];
""1238_withdrawAll"" [label=""withdrawAll""];
""1238_totalSupply"" [label=""totalSupply""];
""1238_transferFrom"" [label=""transferFrom""];
""1238_createItem"" [label=""createItem""];
""1238_isNullAddress"" [label=""isNullAddress""];
""1238_implementsERC721"" [label=""implementsERC721""];
""1238_setManufacturer"" [label=""setManufacturer""];
""1238_transferToWinner"" -> ""1238_ownerOf"";
""1238_setMinStartingPrice"" -> ""1238_onlyAuthors"";
""1238_setManufacturer"" -> ""1238_onlyAuthors"";
""1238_approve"" -> ""1238_ownerOf"";
""1238_buy"" -> ""1238_celebOf"";
""1238_transferToWinner"" -> ""1238_isNullAddress"";
""1238_transferFrom"" -> ""1238_isNullAddress"";
""1238_buy"" -> ""1238_ownerOf"";
""1238_buy"" -> ""1238_isNullAddress"";
""1238_withdraw"" -> ""1238_isNullAddress"";
""1238_transfer"" -> ""1238__transfer"";
""1238_takeOwnership"" -> ""1238__transfer"";
""1238_withdraw"" -> ""1238_onlyAuthors"";
""1238_takeOwnership"" -> ""1238_isApproved"";
""1238_withdrawAll"" -> ""1238_onlyAuthors"";
""1238_setDividend"" -> ""1238_onlyAuthors"";
""1238_setManufacturer"" -> ""1238_isNullAddress"";
""1238_setKpopCelebContractAddress"" -> ""1238_onlyAuthors"";
""1238__transfer"" -> ""1238_ownerOf"";
""1238_updateItem"" -> ""1238_totalSupply"";
""1238__transfer"" -> ""1238_isNullAddress"";
""1238_setKpopArenaContractAddress"" -> ""1238_onlyAuthors"";
""1238_getItem"" -> ""1238_celebOf"";
""1238_setGrowthBump"" -> ""1238_onlyAuthors"";
""1238_transferToWinner"" -> ""1238_onlyArena"";
""1238_takeOwnership"" -> ""1238_isNullAddress"";
""1238_updateItem"" -> ""1238_onlyAuthors"";
""1238__transfer"" -> ""1238_balanceOf"";
""1238_setCoAuthor"" -> ""1238_isNullAddress"";
""1238_buy"" -> ""1238__transfer"";
""1238_transferFrom"" -> ""1238__transfer"";
""1238_createItem"" -> ""1238_onlyManufacturer"";
""1238_transferFrom"" -> ""1238_ownerOf"";
""1238_transferFrom"" -> ""1238_isApproved"";
""1238_setCoAuthor"" -> ""1238_onlyAuthor"";
""1238_transferToWinner"" -> ""1238__transfer"";
""1238_setPriceIncreaseScale"" -> ""1238_onlyAuthors"";
}
"
0x4209f9bbb4e4dd48dbd84701fcaaab1d492b5a05.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_369_AccessService {
label=""AccessService"";
""369_setFinance"" [label=""setFinance""];
""369_setService"" [label=""setService""];
""369_withdraw"" [label=""withdraw""];
}
"
0x1847825ea569501ca50dee126d31ea95f6c62a87.sol,LinCrowdSale,"contract LinCrowdSale is LinTokenMint, WhitelistedCrowdsale { uint constant Month = 60*60*24*30; uint constant SixMonth = 6 * Month; uint constant Year = 12 * Month; uint public StartTime = now; uint public EndTime = StartTime + SixMonth; uint public PrivateSaleEndTime = StartTime.add(Month); uint public PreSaleEndTime = PrivateSaleEndTime.add(Month); bool public SoftCapReached = false; bool public HardCapReached = false; bool public SaleClosed = false; bool private rentrancy_lock = false; uint public constant Private_rate = 2000; uint public constant Pre_rate = 1500; uint public constant Public = 1200; uint public MinInvestMent = 2 * (10 ** decimals); uint public HardCap = 500000000 * (10 ** decimals); uint public SoftCap = 10000000 * (10 ** decimals); uint public TotalAmountETH; uint public SaleAmountLIN; uint public RefundAmount; uint public InvestorNum; event SuccessCoreAccount(uint256 InvestorNum); event Burn(address burner, uint256 value); event SuccessInvestor(address RequestAddress, uint256 amount); event SuccessSoftCap(uint256 SaleAmountLin, uint256 time); event SuccessHardCap(uint256 SaleAmountLin, uint256 time); event SucessWithdraw(address who, uint256 AmountEth, uint256 time); event SuccessEthToOwner(address owner, uint256 AmountEth, uint256 time); event linTokenToInvestors(address InverstorAddress, uint256 Amount, uint256 now); event linTokenToCore(address CoreAddress, uint256 Amount, uint256 now); event FailsafeWithdrawal(address InverstorAddress, uint256 Amount, uint256 now); event FaillinTokenToInvestors(address InverstorAddress, uint256 Amount, uint256 now, uint256 ReleaseTime); event FaillinTokenToCore(address CoreAddress, uint256 Amount, uint256 now, uint256 ReleaseTime); event FailEthToOwner(address who, uint256 _amount, uint256 now); event safeWithdrawalTry(address who); modifier beforeDeadline() { require (now < EndTime); _; }",1,"subgraph cluster_1660_LinCrowdSale {
label=""LinCrowdSale"";
""1660_CheckHardCap"" [label=""CheckHardCap""];
""1660_LinTokenToInvestors"" [label=""LinTokenToInvestors""];
""1660_safeWithdrawal"" [label=""safeWithdrawal""];
""1660_LinTokenToCore"" [label=""LinTokenToCore""];
""1660_fallback"" [label=""fallback""];
""1660_CheckSoftCap"" [label=""CheckSoftCap""];
""1660_transferEthToOwner"" [label=""transferEthToOwner""];
""1660_constructor"" [label=""constructor""];
""1660_burn"" [label=""burn""];
""1660_safeWithdrawal"" -> ""1660_afterDeadline"";
""1660_fallback"" -> ""1660_isWhitelisted"";
""1660_safeWithdrawal"" -> ""1660_nonReentrant"";
""1660_burn"" -> ""1660_afterDeadline"";
""1660_transferEthToOwner"" -> ""1660_afterDeadline"";
""1660_transferEthToOwner"" -> ""1660_nonReentrant"";
""1660_transferEthToOwner"" -> ""1660_onlyOwner"";
""1660_LinTokenToCore"" -> ""1660_nonReentrant"";
""1660_burn"" -> ""1660_nonReentrant"";
""1660_burn"" -> ""1660_onlyOwner"";
""1660_fallback"" -> ""1660_CheckHardCap"";
""1660_fallback"" -> ""1660_afterStartTime"";
""1660_fallback"" -> ""1660_CheckSoftCap"";
""1660_LinTokenToInvestors"" -> ""1660_afterDeadline"";
""1660_fallback"" -> ""1660_whenNotPaused"";
""1660_LinTokenToInvestors"" -> ""1660_nonReentrant"";
""1660_LinTokenToCore"" -> ""1660_afterDeadline"";
""1660_LinTokenToCore"" -> ""1660_onlyOwner"";
""1660_fallback"" -> ""1660_beforeDeadline"";
""1660_LinTokenToInvestors"" -> ""1660_onlyOwner"";
""1660_fallback"" -> ""1660_nonReentrant"";
""1660_fallback"" -> ""1660_saleNotClosed"";
}
"
0x009ef15c147ff4c0eb373e1abd2f4d184e5cb916.sol,CampaignContract,contract CampaignContract { using SafeMath for uint256; address internal owner; uint256 public minUSD; uint256 public maxUSD; uint256 public maxContribution; uint256 public minContribution; struct KYCObject { bytes32 phone; bytes32 name; bytes32 occupation; bytes32 addressOne; bytes32 addressTwo; },1,"subgraph cluster_1022_CampaignContract {
label=""CampaignContract"";
""1022_getName"" [label=""getName""];
""1022_retrieveAssets"" [label=""retrieveAssets""];
""1022_changeOwner"" [label=""changeOwner""];
""1022_getAmountContributed"" [label=""getAmountContributed""];
""1022_getAddressTwo"" [label=""getAddressTwo""];
""1022_acceptContribution"" [label=""acceptContribution""];
""1022_getOccupation"" [label=""getOccupation""];
""1022_CampaignContract"" [label=""CampaignContract""];
""1022_getAmountAttempted"" [label=""getAmountAttempted""];
""1022_getPhone"" [label=""getPhone""];
""1022_getPotentialAmount"" [label=""getPotentialAmount""];
""1022_killContract"" [label=""killContract""];
""1022_rejectContribution"" [label=""rejectContribution""];
""1022_getAddressOne"" [label=""getAddressOne""];
""1022_withdrawToWallet"" [label=""withdrawToWallet""];
""1022_contribute"" [label=""contribute""];
""1022_resetKYC"" [label=""resetKYC""];
""1022_verifyKYC"" [label=""verifyKYC""];
""1022_withdrawContribution"" [label=""withdrawContribution""];
""1022_changeLimits"" [label=""changeLimits""];
""1022_retrieveAssets"" -> ""1022_onlyOwner"";
""1022_changeLimits"" -> ""1022_onlyOwner"";
""1022_rejectContribution"" -> ""1022_onlyOwner"";
""1022_withdrawToWallet"" -> ""1022_onlyOwner"";
""1022_acceptContribution"" -> ""1022_onlyOwner"";
""1022_killContract"" -> ""1022_onlyOwner"";
""1022_resetKYC"" -> ""1022_hasKYCInfo"";
""1022_resetKYC"" -> ""1022_onlyOwner"";
""1022_acceptContribution"" -> ""1022_hasKYCInfo"";
""1022_withdrawContribution"" -> ""1022_hasKYCInfo"";
""1022_contribute"" -> ""1022_hasKYCInfo"";
""1022_changeOwner"" -> ""1022_onlyOwner"";
}
"
0x2d04c7051112c47ee74a41c723f791b499aa6b1a.sol,YHToken,"contract YHToken is StandardBurnableToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 constant private kAutoCombineBonusesCount = 50; struct Bonus { uint256 payment; uint256 currentTotalSupply; }",1,"subgraph cluster_1875_YHToken {
label=""YHToken"";
""1875_getUserInfos"" [label=""getUserInfos""];
""1875_computeRoundBonuses"" [label=""computeRoundBonuses""];
""1875_withdrawForBet"" [label=""withdrawForBet""];
""1875__burn"" [label=""_burn""];
""1875_balanceSnapshot"" [label=""balanceSnapshot""];
""1875_mint"" [label=""mint""];
""1875_balanceOf"" [label=""balanceOf""];
""1875_transferFrom"" [label=""transferFrom""];
""1875_transfer"" [label=""transfer""];
""1875_getBalanceSnapshot"" [label=""getBalanceSnapshot""];
""1875_transferExtraEarnings"" [label=""transferExtraEarnings""];
""1875_mintToFounder"" [label=""mintToFounder""];
""1875_mintToNormal"" [label=""mintToNormal""];
""1875_combineBonuses"" [label=""combineBonuses""];
""1875_withdraw"" [label=""withdraw""];
""1875_checkLastMint"" [label=""checkLastMint""];
""1875_getEarnings"" [label=""getEarnings""];
""1875_computeSnapshotBonuses"" [label=""computeSnapshotBonuses""];
""1875_unused"" [label=""unused""];
""1875_transferBonusEarnings"" [label=""transferBonusEarnings""];
""1875_constructor"" [label=""constructor""];
""1875_start"" [label=""start""];
""1875_start"" -> ""1875_onlyOwner"";
""1875_getEarnings"" -> ""1875_computeSnapshotBonuses"";
""1875__burn"" -> ""1875_balanceSnapshot"";
""1875_balanceSnapshot"" -> ""1875_balanceSnapshot"";
""1875_transferFrom"" -> ""1875_balanceSnapshot"";
""1875_transfer"" -> ""1875_checkLastMint"";
""1875__burn"" -> ""1875__burn"";
""1875_withdraw"" -> ""1875_combineBonuses"";
""1875_getUserInfos"" -> ""1875_balanceOf"";
""1875_mint"" -> ""1875_balanceSnapshot"";
""1875_combineBonuses"" -> ""1875_computeSnapshotBonuses"";
""1875_mintToNormal"" -> ""1875_mint"";
""1875__burn"" -> ""1875_checkLastMint"";
""1875_balanceOf"" -> ""1875_unused"";
""1875_mintToFounder"" -> ""1875_checkLastMint"";
""1875_transferFrom"" -> ""1875_checkLastMint"";
""1875_withdrawForBet"" -> ""1875_combineBonuses"";
""1875_mintToFounder"" -> ""1875_mint"";
""1875_transferFrom"" -> ""1875_transferFrom"";
""1875_getUserInfos"" -> ""1875_getEarnings"";
""1875_balanceSnapshot"" -> ""1875_computeRoundBonuses"";
""1875_withdrawForBet"" -> ""1875_isLottery"";
""1875_mintToFounder"" -> ""1875_isLottery"";
""1875_computeSnapshotBonuses"" -> ""1875_computeRoundBonuses"";
""1875_getEarnings"" -> ""1875_computeRoundBonuses"";
""1875_transfer"" -> ""1875_transfer"";
""1875_combineBonuses"" -> ""1875_checkLastMint"";
""1875_mintToNormal"" -> ""1875_isLottery"";
""1875_transfer"" -> ""1875_balanceSnapshot"";
}
"
0xfef5497bc53a69875e02ae5b14eeff668f09a729.sol,Infinity,"contract Infinity { using SafeMath for uint256; string public name = ; string public symbol = ; uint256 public initAmount; uint256 public amountProportion; uint256 public dividend; uint256 public jackpot; uint256 public jackpotProportion; uint256 public scientists; uint256 public promotionRatio; uint256 public duration; bool public activated = false; address public developerAddr; uint256 public rId; uint256 public sId; mapping (uint256 => Indatasets.Round) public round; mapping (uint256 => mapping (uint256 => Indatasets.Stage)) public stage; mapping (address => Indatasets.Player) public player; mapping (uint256 => mapping (address => uint256)) public playerRoundAmount; mapping (uint256 => mapping (address => uint256)) public playerRoundSid; mapping (uint256 => mapping (address => uint256)) public playerRoundwithdrawAmountFlag; mapping (uint256 => mapping (uint256 => mapping (address => uint256))) public playerStageAmount; mapping (uint256 => mapping (uint256 => mapping (address => uint256))) public playerStageAccAmount; uint256[] amountLimit = [0, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]; constructor() public { developerAddr = msg.sender; }",1,"subgraph cluster_2138_Infinity {
label=""Infinity"";
""2138_getPlayerDividendByRound"" [label=""getPlayerDividendByRound""];
""2138_getPlayerDividendByStage"" [label=""getPlayerDividendByStage""];
""2138_buyPlayerDataRecord"" [label=""buyPlayerDataRecord""];
""2138_getPlayerJackpot"" [label=""getPlayerJackpot""];
""2138_buyRoundDataRecord"" [label=""buyRoundDataRecord""];
""2138_fallback"" [label=""fallback""];
""2138_withdraw"" [label=""withdraw""];
""2138_getPersonalStatus"" [label=""getPersonalStatus""];
""2138_buy"" [label=""buy""];
""2138_activate"" [label=""activate""];
""2138_initStage"" [label=""initStage""];
""2138_promotionDataRecord"" [label=""promotionDataRecord""];
""2138_constructor"" [label=""constructor""];
""2138_endStage"" [label=""endStage""];
""2138_limitAmount"" [label=""limitAmount""];
""2138_getPlayerDividend"" [label=""getPlayerDividend""];
""2138_buyAnalysis"" [label=""buyAnalysis""];
""2138_getValueInfo"" [label=""getValueInfo""];
""2138_getHeadInfo"" [label=""getHeadInfo""];
""2138_endRound"" [label=""endRound""];
""2138_buyStageDataRecord"" [label=""buyStageDataRecord""];
""2138_withdraw"" -> ""2138_getPlayerDividendByStage"";
""2138_buy"" -> ""2138_senderVerify"";
""2138_buyAnalysis"" -> ""2138_buyPlayerDataRecord"";
""2138_fallback"" -> ""2138_buyAnalysis"";
""2138_getValueInfo"" -> ""2138_getPlayerDividend"";
""2138_buyStageDataRecord"" -> ""2138_stageVerify"";
""2138_buyAnalysis"" -> ""2138_promotionDataRecord"";
""2138_fallback"" -> ""2138_senderVerify"";
""2138_buy"" -> ""2138_buyAnalysis"";
""2138_getPlayerDividendByStage"" -> ""2138_getPlayerJackpot"";
""2138_getPlayerDividend"" -> ""2138_getPlayerDividendByRound"";
""2138_fallback"" -> ""2138_amountVerify"";
""2138_buyAnalysis"" -> ""2138_buyRoundDataRecord"";
""2138_fallback"" -> ""2138_isActivated"";
""2138_withdraw"" -> ""2138_playerVerify"";
""2138_buyAnalysis"" -> ""2138_limitAmount"";
""2138_withdraw"" -> ""2138_isActivated"";
""2138_buy"" -> ""2138_isActivated"";
""2138_buy"" -> ""2138_amountVerify"";
""2138_withdraw"" -> ""2138_senderVerify"";
""2138_getPersonalStatus"" -> ""2138_getPlayerDividendByRound"";
""2138_getPlayerDividendByRound"" -> ""2138_getPlayerJackpot"";
""2138_buyAnalysis"" -> ""2138_initStage"";
""2138_activate"" -> ""2138_initStage"";
""2138_buyAnalysis"" -> ""2138_endStage"";
""2138_buyAnalysis"" -> ""2138_endRound"";
""2138_buyAnalysis"" -> ""2138_buyStageDataRecord"";
}
"
0xd7f4aea7c2b8d633d88c449eab91d7d5ef89427e.sol,EDAX,"contract EDAX is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 500000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 1000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0x15CA3e11C9887FAC531FC8a2C95394F2c84E654a; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_EDAX {
label=""EDAX"";
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_burn"" [label=""burn""];
""1261_approve"" [label=""approve""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_transfer"" [label=""transfer""];
""1261_distr"" [label=""distr""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_allowance"" [label=""allowance""];
""1261_add"" [label=""add""];
""1261_constructor"" [label=""constructor""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_fallback"" [label=""fallback""];
""1261_withdraw"" [label=""withdraw""];
""1261_Distribute"" [label=""Distribute""];
""1261_getTokens"" -> ""1261_distr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_distr"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
}
"
0xef078a64e1593afee09912d18097bc49fa74c7a9.sol,ETHER_Game,contract ETHER_Game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETHER_Game {
label=""ETHER_Game"";
""148_constructor"" [label=""constructor""];
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x41104edb2cefbb66cc28b17d507f0b4ba559f455.sol,CrowdsaleToken,"contract CrowdsaleToken is StandardToken, Configurable, Ownable { enum Stages { none, icoStart, icoEnd }",1,"subgraph cluster_852_CrowdsaleToken {
label=""CrowdsaleToken"";
""852_constructor"" [label=""constructor""];
""852_fallback"" [label=""fallback""];
""852_startIco"" [label=""startIco""];
""852_finalizeIco"" [label=""finalizeIco""];
""852_endIco"" [label=""endIco""];
""852_finalizeIco"" -> ""852_endIco"";
""852_startIco"" -> ""852_onlyOwner"";
""852_finalizeIco"" -> ""852_onlyOwner"";
}
"
0x297ac8bc7540bc241f065fcc22c570b40170b573.sol,TraceTokenSale,"contract TraceTokenSale is Ownable{ using SafeMath for uint256; TraceToken public token; uint256 public constant TOTAL_NUM_TOKENS = 5e26; uint256 public constant tokensForSale = 25e25; uint256 public totalEthers = 0; uint256 public constant softCap = 3984.064 ether; uint256 public constant hardCap = 17928.287 ether; uint256 public constant presaleLimit = 7968.127 ether; bool public presaleLimitReached = false; uint256 public constant min_investment_eth = 0.5 ether; uint256 public constant max_investment_eth = 398.4064 ether; uint256 public constant min_investment_presale_eth = 5 ether; bool public refundAllowed = false; bool public paused = false; uint256 public constant bountyReward = 1e25; uint256 public constant preicoAndAdvisors = 4e25; uint256 public constant liquidityPool = 25e24; uint256 public constant futureDevelopment = 1e26; uint256 public constant teamAndFounders = 75e24; uint256 public leftOverTokens = 0; uint256[8] public founderAmounts = [uint256(teamAndFounders.div(8)),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8)]; uint256[2] public preicoAndAdvisorsAmounts = [ uint256(preicoAndAdvisors.mul(2).div(5)),preicoAndAdvisors.mul(2).div(5)]; address public wallet; address public teamAndFoundersWallet; address public advisorsAndPreICO; uint256 public constant token_per_wei = 12550; uint256 public startTime; uint256 public endTime; uint256 private constant weekInSeconds = 86400 * 7; mapping(address => uint256) public whitelist; mapping(address => uint256) public etherBalances; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event Whitelist(address indexed beneficiary, uint256 value); event SoftCapReached(); event Finalized(); function TraceTokenSale(uint256 _startTime, address traceTokenAddress, address _wallet, address _teamAndFoundersWallet, address _advisorsAndPreICO) public { require(_startTime >= now); require(_wallet != 0x0); require(_teamAndFoundersWallet != 0x0); require(_advisorsAndPreICO != 0x0); token = TraceToken(traceTokenAddress); wallet = _wallet; teamAndFoundersWallet = _teamAndFoundersWallet; advisorsAndPreICO = _advisorsAndPreICO; startTime = _startTime; endTime = _startTime + 4 * weekInSeconds; }",1,"subgraph cluster_1968_TraceTokenSale {
label=""TraceTokenSale"";
""1968_balanceOf"" [label=""balanceOf""];
""1968_withdrawTokensToAdvisors"" [label=""withdrawTokensToAdvisors""];
""1968_validPurchase"" [label=""validPurchase""];
""1968_hasEnded"" [label=""hasEnded""];
""1968_addWhitelists"" [label=""addWhitelists""];
""1968_pauseSale"" [label=""pauseSale""];
""1968_fallback"" [label=""fallback""];
""1968_hardCapReached"" [label=""hardCapReached""];
""1968_checkWhitelist"" [label=""checkWhitelist""];
""1968_finishCrowdsale"" [label=""finishCrowdsale""];
""1968_withdrawTokenToFounders"" [label=""withdrawTokenToFounders""];
""1968_calcAmount"" [label=""calcAmount""];
""1968_unpauseSale"" [label=""unpauseSale""];
""1968_hasStarted"" [label=""hasStarted""];
""1968_refund"" [label=""refund""];
""1968_addWhitelist"" [label=""addWhitelist""];
""1968_TraceTokenSale"" [label=""TraceTokenSale""];
""1968_isPaused"" [label=""isPaused""];
""1968_softCapReached"" [label=""softCapReached""];
""1968_withdraw"" [label=""withdraw""];
""1968_buyTokens"" [label=""buyTokens""];
""1968_refund"" -> ""1968_softCapReached"";
""1968_addWhitelist"" -> ""1968_hasEnded"";
""1968_withdrawTokensToAdvisors"" -> ""1968_onlyOwner"";
""1968_addWhitelists"" -> ""1968_addWhitelist"";
""1968_unpauseSale"" -> ""1968_onlyOwner"";
""1968_buyTokens"" -> ""1968_checkWhitelist"";
""1968_buyTokens"" -> ""1968_isPaused"";
""1968_fallback"" -> ""1968_buyTokens"";
""1968_withdraw"" -> ""1968_softCapReached"";
""1968_refund"" -> ""1968_hasEnded"";
""1968_buyTokens"" -> ""1968_hasEnded"";
""1968_withdrawTokensToAdvisors"" -> ""1968_softCapReached"";
""1968_withdrawTokenToFounders"" -> ""1968_hasEnded"";
""1968_finishCrowdsale"" -> ""1968_onlyOwner"";
""1968_finishCrowdsale"" -> ""1968_hasEnded"";
""1968_addWhitelist"" -> ""1968_onlyOwner"";
""1968_addWhitelists"" -> ""1968_onlyOwner"";
""1968_withdrawTokenToFounders"" -> ""1968_onlyOwner"";
""1968_withdrawTokenToFounders"" -> ""1968_softCapReached"";
""1968_buyTokens"" -> ""1968_validPurchase"";
""1968_addWhitelists"" -> ""1968_hasEnded"";
""1968_finishCrowdsale"" -> ""1968_softCapReached"";
""1968_pauseSale"" -> ""1968_onlyOwner"";
""1968_finishCrowdsale"" -> ""1968_hardCapReached"";
""1968_buyTokens"" -> ""1968_calcAmount"";
""1968_withdraw"" -> ""1968_onlyOwner"";
""1968_withdrawTokensToAdvisors"" -> ""1968_hasEnded"";
}
"
0xb42ce9d2a22061b7d5e569753f92edbaa2dad37b.sol,Exchanger,"contract Exchanger is Administered { bool public enabled = false; ITradeableAsset public tokenContract; IYeekFormula public formulaContract; uint32 public weight; constructor(address _token, uint32 _weight, address _formulaContract) { require (_weight > 0 && weight <= 1000000); weight = _weight; tokenContract = ITradeableAsset(_token); formulaContract = IYeekFormula(_formulaContract); }",1,"subgraph cluster_567_Exchanger {
label=""Exchanger"";
""567_depositTokens"" [label=""depositTokens""];
""567_buy"" [label=""buy""];
""567_withdrawEther"" [label=""withdrawEther""];
""567_constructor"" [label=""constructor""];
""567_getPurchasePrice"" [label=""getPurchasePrice""];
""567_enable"" [label=""enable""];
""567_sell"" [label=""sell""];
""567_depositEther"" [label=""depositEther""];
""567_getReserveBalances"" [label=""getReserveBalances""];
""567_disable"" [label=""disable""];
""567_withdrawTokens"" [label=""withdrawTokens""];
""567_getQuotePrice"" [label=""getQuotePrice""];
""567_getSalePrice"" [label=""getSalePrice""];
""567_setReserveWeight"" [label=""setReserveWeight""];
""567_setReserveWeight"" -> ""567_onlyAdmin"";
""567_depositEther"" -> ""567_onlyOwner"";
""567_withdrawTokens"" -> ""567_onlyOwner"";
""567_withdrawEther"" -> ""567_onlyOwner"";
""567_depositTokens"" -> ""567_onlyOwner"";
""567_enable"" -> ""567_onlyAdmin"";
""567_disable"" -> ""567_onlyAdmin"";
}
"
0x5211475520dc4a13fee1cc7c2c0c1167998bcbb8.sol,AuctionContract,"contract AuctionContract { using SafeMath for uint; event BetPlacedEvent(address bidderAddress, uint amount); event RefundEvent(address bidderAddress, uint amount); event CreateAuctionContractEvent(address bidderAddress, uint amount); uint public auctionSlideSize = 30; uint public auctionCloseBlock; uint public closeAuctionAfterNBlocks; uint public bettingStep; mapping (address => uint) public bettingMap; address public firstBidder; address public secondBidder; address public winner; uint public biggestBet; uint public prize; address public firstBetContract; address public secondBetContract; uint public minimalPrize = 10000000000000000; uint public minimaBetStep = 10000000000000000; address public auctioneerAddress; bool public isActive; constructor (uint _closeAuctionAfterNBlocks, address _auctioneerAddress) payable public{ assert(msg.value >= minimalPrize); prize = msg.value; auctioneerAddress = _auctioneerAddress; closeAuctionAfterNBlocks = _closeAuctionAfterNBlocks; auctionCloseBlock = block.number.add(_closeAuctionAfterNBlocks); bettingStep = 0; biggestBet = 0; isActive = true; emit CreateAuctionContractEvent(this, prize); }",1,"subgraph cluster_565_AuctionContract {
label=""AuctionContract"";
""565_constructor"" [label=""constructor""];
""565_askForRefund"" [label=""askForRefund""];
""565_fallback"" [label=""fallback""];
""565_closeAuction"" [label=""closeAuction""];
}
"
0x4c7c98c4d64c29ef8103b005eeccf5145cfdf8c1.sol,Savings,"contract Savings is Ownable { address public Owner; mapping (address => uint) public deposits; uint public openDate; event Initialized(address indexed Owner, uint OpenDate); event Deposit(address indexed Depositor, uint Amount); event Withdrawal(address indexed Withdrawer, uint Amount); function init(uint open) payable { Owner = msg.sender; openDate = open; Initialized(Owner, open); }",1,"subgraph cluster_162_Savings {
label=""Savings"";
""162_init"" [label=""init""];
""162_kill"" [label=""kill""];
""162_fallback"" [label=""fallback""];
""162_deposit"" [label=""deposit""];
""162_withdraw"" [label=""withdraw""];
""162_fallback"" -> ""162_deposit"";
""162_kill"" -> ""162_isOwner"";
""162_withdraw"" -> ""162_isOwner"";
}
"
0x468b9ec0747e3da866a06a10cff67d4f49ad9765.sol,ProofOfLongHodlV2,"contract ProofOfLongHodlV2 { using SafeMath for uint256; event Deposit(address user, uint amount); event Withdraw(address user, uint amount); event Claim(address user, uint dividends); event Reinvest(address user, uint dividends); address owner; mapping(address => bool) preauthorized; bool gameStarted = true; uint constant depositTaxDivisor = 25; uint constant withdrawalTaxDivisor = 25; uint constant lotteryFee = 25; uint constant weeklyLotteryFee = 1; mapping(address => uint) public investment; mapping(address => uint) public stake; uint public totalStake; uint stakeValue; mapping(address => uint) dividendCredit; mapping(address => uint) dividendDebit; function ProofOfLongHodlV2() public { owner = msg.sender; preauthorized[owner] = true; }",1,"subgraph cluster_943_ProofOfLongHodlV2 {
label=""ProofOfLongHodlV2"";
""943_preauthorize"" [label=""preauthorize""];
""943_deposit"" [label=""deposit""];
""943_getLotteryData"" [label=""getLotteryData""];
""943_closeGame"" [label=""closeGame""];
""943_reinvest"" [label=""reinvest""];
""943_withdraw"" [label=""withdraw""];
""943_startGame"" [label=""startGame""];
""943_claim"" [label=""claim""];
""943_sqrt"" [label=""sqrt""];
""943_checkIfEligable"" [label=""checkIfEligable""];
""943_depositHelper"" [label=""depositHelper""];
""943_min"" [label=""min""];
""943_ProofOfLongHodlV2"" [label=""ProofOfLongHodlV2""];
""943_rand"" [label=""rand""];
""943_claimHelper"" [label=""claimHelper""];
""943_lotteryParticipants"" [label=""lotteryParticipants""];
""943_dividendsForUser"" [label=""dividendsForUser""];
""943_withdraw"" -> ""943_min"";
""943_depositHelper"" -> ""943_sqrt"";
""943_deposit"" -> ""943_depositHelper"";
""943_withdraw"" -> ""943_rand"";
""943_reinvest"" -> ""943_depositHelper"";
""943_claim"" -> ""943_claimHelper"";
""943_closeGame"" -> ""943_onlyOwner"";
""943_reinvest"" -> ""943_claimHelper"";
}
"
0x7982a79ee90eb3682dcee66e47ba79c1cba44062.sol,FlowerCore,contract FlowerCore is FlowerMinting { address public newContractAddress; function setGen0SellerAddress(address _newAddress) external onlyAdministrator { gen0SellerAddress = _newAddress; saleAuction.setGen0SellerAddress(_newAddress); },1,"subgraph cluster_3573_FlowerCore {
label=""FlowerCore"";
""3573_constructor"" [label=""constructor""];
""3573_getContractBalance"" [label=""getContractBalance""];
""3573_setNewAddress"" [label=""setNewAddress""];
""3573_withdrawBalance"" [label=""withdrawBalance""];
""3573_getFlower"" [label=""getFlower""];
""3573_setGen0SellerAddress"" [label=""setGen0SellerAddress""];
""3573_unstop"" [label=""unstop""];
""3573_setNewAddress"" -> ""3573_whenStopped"";
""3573_unstop"" -> ""3573_setStart"";
""3573_setNewAddress"" -> ""3573_onlyAdministrator"";
""3573_withdrawBalance"" -> ""3573_onlyAdministrator"";
""3573_unstop"" -> ""3573_whenStopped"";
""3573_constructor"" -> ""3573__createFlower"";
""3573_setGen0SellerAddress"" -> ""3573_onlyAdministrator"";
""3573_unstop"" -> ""3573_onlyAdministrator"";
}
"
0x574fb6d9d090042a04d0d12a4e87217f8303a5ca.sol,HelloGoldSale,"contract HelloGoldSale is Pausable, SafeMath { uint256 public decimals = 8; uint256 public startDate = 1503892800; uint256 public endDate = 1504497600; uint256 tranchePeriod = 1 weeks; HelloGoldToken token; uint256 constant MaxCoinsR1 = 80 * 10**6 * 10**8; uint256 public coinsRemaining = 80 * 10**6 * 10**8; uint256 coinsPerTier = 16 * 10**6 * 10**8; uint256 public coinsLeftInTier = 16 * 10**6 * 10**8; uint256 public minimumCap = 0; uint256 numTiers = 5; uint16 public tierNo; uint256 public preallocCoins; uint256 public purchasedCoins; uint256 public ethRaised; uint256 public personalMax = 10 ether; uint256 public contributors; address public cs; address public multiSig; address public HGT_Reserve; struct csAction { bool passedKYC; bool blocked; }",1,"subgraph cluster_3276_HelloGoldSale {
label=""HelloGoldSale"";
""3276_coinAddress"" [label=""coinAddress""];
""3276_when"" [label=""when""];
""3276_setHgtRates"" [label=""setHgtRates""];
""3276_funding"" [label=""funding""];
""3276_block"" [label=""block""];
""3276_success"" [label=""success""];
""3276_fallback"" [label=""fallback""];
""3276_HelloGoldSale"" [label=""HelloGoldSale""];
""3276_createTokens"" [label=""createTokens""];
""3276_withdraw"" [label=""withdraw""];
""3276_allocatedTokens"" [label=""allocatedTokens""];
""3276_approve"" [label=""approve""];
""3276_setPeriod"" [label=""setPeriod""];
""3276_linkCoin"" [label=""linkCoin""];
""3276_complete"" [label=""complete""];
""3276_newCs"" [label=""newCs""];
""3276_failed"" [label=""failed""];
""3276_unblock"" [label=""unblock""];
""3276_setStart"" [label=""setStart""];
""3276_createTokens"" -> ""3276_funding"";
""3276_allocatedTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_success"";
""3276_allocatedTokens"" -> ""3276_safeAdd"";
""3276_createTokens"" -> ""3276_safeDiv"";
""3276_fallback"" -> ""3276_createTokens"";
""3276_linkCoin"" -> ""3276_onlyOwner"";
""3276_approve"" -> ""3276_MustBeCs"";
""3276_unblock"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_min256"";
""3276_setHgtRates"" -> ""3276_onlyOwner"";
""3276_allocatedTokens"" -> ""3276_onlyOwner"";
""3276_withdraw"" -> ""3276_failed"";
""3276_newCs"" -> ""3276_onlyOwner"";
""3276_setPeriod"" -> ""3276_funding"";
""3276_setStart"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeAdd"";
""3276_fallback"" -> ""3276_whenNotPaused"";
""3276_setPeriod"" -> ""3276_onlyOwner"";
""3276_block"" -> ""3276_MustBeCs"";
""3276_createTokens"" -> ""3276_safeSub"";
""3276_complete"" -> ""3276_onlyOwner"";
""3276_createTokens"" -> ""3276_safeMul"";
""3276_fallback"" -> ""3276_MustBeEnabled"";
}
"
0x4ee1d7720a04072142b2efc9d2c7d5d77ad63939.sol,ARXpresale,"contract ARXpresale is owned, safeMath { address public admin = owner; ERC20Interface public tokenReward; address public foundationWallet; address public beneficiaryWallet; uint256 public tokensPerEthPrice; uint256 public amountRaisedInWei; uint256 public fundingMinCapInWei; uint256 public fundingMaxCapInWei; uint256 public fundingRemainingAvailableInEth; string public currentStatus = ; uint256 public fundingStartBlock; uint256 public fundingEndBlock; bool public isPresaleClosed = false; bool public isPresaleSetup = false; event Buy(address indexed _sender, uint256 _eth, uint256 _ARX); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Refund(address indexed _refunder, uint256 _value); event Burn(address _from, uint256 _value); mapping(address => uint256) balances; mapping(address => uint256) fundValue; function ARXpresale() onlyOwner { admin = msg.sender; currentStatus = ; }",1,"subgraph cluster_920_ARXpresale {
label=""ARXpresale"";
""920_beneficiaryMultiSigWithdraw"" [label=""beneficiaryMultiSigWithdraw""];
""920_checkGoalandPrice"" [label=""checkGoalandPrice""];
""920_refund"" [label=""refund""];
""920_fallback"" [label=""fallback""];
""920_updateStatus"" [label=""updateStatus""];
""920_BuyARXtokens"" [label=""BuyARXtokens""];
""920_withdrawRemainingTokens"" [label=""withdrawRemainingTokens""];
""920_ARXpresale"" [label=""ARXpresale""];
""920_Setuppresale"" [label=""Setuppresale""];
""920_setPrice"" [label=""setPrice""];
""920_BuyARXtokens"" -> ""920_setPrice"";
""920_BuyARXtokens"" -> ""920_safeSub"";
""920_Setuppresale"" -> ""920_safeDiv"";
""920_BuyARXtokens"" -> ""920_safeMul"";
""920_BuyARXtokens"" -> ""920_safeAdd"";
""920_checkGoalandPrice"" -> ""920_setPrice"";
""920_Setuppresale"" -> ""920_onlyOwner"";
""920_BuyARXtokens"" -> ""920_safeDiv"";
""920_ARXpresale"" -> ""920_onlyOwner"";
""920_checkGoalandPrice"" -> ""920_onlyOwner"";
""920_fallback"" -> ""920_BuyARXtokens"";
""920_updateStatus"" -> ""920_onlyOwner"";
""920_Setuppresale"" -> ""920_setPrice"";
""920_beneficiaryMultiSigWithdraw"" -> ""920_onlyOwner"";
""920_withdrawRemainingTokens"" -> ""920_onlyOwner"";
}
"
0xa2038ce672658f492fcd9e4fdaa1a3c530011a8a.sol,MultiHolderVault,"contract MultiHolderVault is HolderBase, RefundVault { using SafeMath for uint256; function MultiHolderVault(address _wallet, uint256 _ratioCoeff) public HolderBase(_ratioCoeff) RefundVault(_wallet) {}",1,"subgraph cluster_679_MultiHolderVault {
label=""MultiHolderVault"";
""679_MultiHolderVault"" [label=""MultiHolderVault""];
""679_close"" [label=""close""];
""679_close"" -> ""679_close"";
""679_MultiHolderVault"" -> ""679_HolderBase"";
""679_close"" -> ""679_distribute"";
""679_close"" -> ""679_onlyOwner"";
""679_MultiHolderVault"" -> ""679_RefundVault"";
}
"
0x720608228bda773fe22e816ee72463040f11c19e.sol,Presale,"contract Presale is CommonCrowdsale { uint public devLimit; uint public softcap; bool public refundOn; bool public softcapAchieved; bool public devWithdrawn; address public devWallet; address public nextSaleAgent; mapping (address => uint) public balances; function Presale() public { minInvestedLimit = 10000000000000000; price = 1000000000000000000000; bountyTokensPercent = 3; advisorsTokensPercent = 1; devTokensPercent = 4; foundersTokensPercent = 10; softcap = 20000000000000000000; hardcap = 63000000000000000000000; addBonus(7,42); addBonus(7,25); addBonus(7,11); start = 1513774800; end = 1516885200; devLimit = 7000000000000000000; wallet = 0x72EcAEB966176c50CfFc0Db53E4A2D3DbC0d538B; devWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770; bountyTokensWallet = 0x7E513B54e3a45B60d6f92c6CECE10C68977EEA8c; foundersTokensWallet = 0x4227859C5A9Bb4391Cc4735Aa655e980a3DD4380; advisorsTokensWallet = 0x6e740ef8618A7d822238F867c622373Df8B54a22; devTokensWallet = 0xCaDca9387E12F55997F46870DA28F0af1626A6d4; }",1,"subgraph cluster_1684_Presale {
label=""Presale"";
""1684_setSoftcap"" [label=""setSoftcap""];
""1684_setNextSaleAgent"" [label=""setNextSaleAgent""];
""1684_refund"" [label=""refund""];
""1684_createTokens"" [label=""createTokens""];
""1684_withdrawDev"" [label=""withdrawDev""];
""1684_setDevLimit"" [label=""setDevLimit""];
""1684_withdraw"" [label=""withdraw""];
""1684_Presale"" [label=""Presale""];
""1684_finishMinting"" [label=""finishMinting""];
""1684_setDevWallet"" [label=""setDevWallet""];
""1684_createTokens"" -> ""1684_calculateAndTransferTokens"";
""1684_setDevWallet"" -> ""1684_notLocked"";
""1684_setDevLimit"" -> ""1684_notLocked"";
""1684_setDevLimit"" -> ""1684_onlyOwner"";
""1684_setSoftcap"" -> ""1684_onlyOwner"";
""1684_setNextSaleAgent"" -> ""1684_onlyOwner"";
""1684_finishMinting"" -> ""1684_mintExtendedTokens"";
""1684_finishMinting"" -> ""1684_onlyOwner"";
""1684_Presale"" -> ""1684_addBonus"";
""1684_setDevWallet"" -> ""1684_onlyOwner"";
""1684_createTokens"" -> ""1684_saleIsOn"";
""1684_withdraw"" -> ""1684_withdrawDev"";
}
"
0x93143d3e34a50aebab466368c3455fd858f77ad3.sol,FourOutOfFive,contract FourOutOfFive { struct GroupData { uint groupId; address[] participants; uint timestamp; uint betSize; uint rewardSize; uint8 rewardsAvailable; address[] rewardedParticipants; bool completed; },1,"subgraph cluster_670_FourOutOfFive {
label=""FourOutOfFive"";
""670__getContactOwnerBalance"" [label=""_getContactOwnerBalance""];
""670_withdrawOwnerMaxPossibleSafe"" [label=""withdrawOwnerMaxPossibleSafe""];
""670_placeBet"" [label=""placeBet""];
""670__getGroupRewardSize"" [label=""_getGroupRewardSize""];
""670_setMaxAndMinBet"" [label=""setMaxAndMinBet""];
""670__getGroupParticipants"" [label=""_getGroupParticipants""];
""670__getGroupIds"" [label=""_getGroupIds""];
""670_constructor"" [label=""constructor""];
""670__getGroupComplete"" [label=""_getGroupComplete""];
""670__getMaxWithdraw"" [label=""_getMaxWithdraw""];
""670__getGroupRewardedParticipants"" [label=""_getGroupRewardedParticipants""];
""670__getContactBalance"" [label=""_getContactBalance""];
""670_claimReward"" [label=""claimReward""];
""670__getMaxPossibleWithdraw"" [label=""_getMaxPossibleWithdraw""];
""670__getGroupRewardsAvailable"" [label=""_getGroupRewardsAvailable""];
""670_constructor"" -> ""670_setMaxAndMinBet"";
""670_withdrawOwnerMaxPossibleSafe"" -> ""670_onlyOwner"";
""670_setMaxAndMinBet"" -> ""670_onlyOwner"";
}
"
0x39f89421c5bf8bb0d855c0216b00b45e3733b515.sol,DINOSale,"contract DINOSale is BaseDINOSale { using SafeMath for uint256; DINOToken public tokenReward; constructor( address ifSuccessfulSendTo, uint fundingGoalInEthers, uint fundingCapInEthers, uint minimumContribution, uint start, uint end, uint rateDINOToEther, address addressOfTokenUsedAsReward ) public { require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this), ); require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this), ); require(fundingGoalInEthers <= fundingCapInEthers, ); require(end > 0, ); beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; fundingCap = fundingCapInEthers * 1 ether; minContribution = minimumContribution * 1 ether; startTime = start; endTime = end; rate = rateDINOToEther; withdrawRate = rateDINOToEther; tokenReward = DINOToken(addressOfTokenUsedAsReward); }",1,"subgraph cluster_1796_DINOSale {
label=""DINOSale"";
""1796_fallback"" [label=""fallback""];
""1796_ownerSafeWithdrawal"" [label=""ownerSafeWithdrawal""];
""1796_owner"" [label=""owner""];
""1796_withdrawToken"" [label=""withdrawToken""];
""1796_ownerAllocateTokens"" [label=""ownerAllocateTokens""];
""1796_convertToMini"" [label=""convertToMini""];
""1796_safeWithdrawal"" [label=""safeWithdrawal""];
""1796_constructor"" [label=""constructor""];
""1796_fallback"" -> ""1796_checkFundingCap"";
""1796_ownerAllocateTokens"" -> ""1796_onlyOwner"";
""1796_withdrawToken"" -> ""1796_convertToMini"";
""1796_safeWithdrawal"" -> ""1796_afterDeadline"";
""1796_fallback"" -> ""1796_afterStartTime"";
""1796_fallback"" -> ""1796_saleNotClosed"";
""1796_fallback"" -> ""1796_beforeDeadline"";
""1796_fallback"" -> ""1796_checkFundingGoal"";
""1796_ownerAllocateTokens"" -> ""1796_checkFundingGoal"";
""1796_fallback"" -> ""1796_whenNotPaused"";
""1796_ownerAllocateTokens"" -> ""1796_checkFundingCap"";
""1796_safeWithdrawal"" -> ""1796_nonReentrant"";
""1796_fallback"" -> ""1796_nonReentrant"";
""1796_ownerAllocateTokens"" -> ""1796_nonReentrant"";
""1796_ownerSafeWithdrawal"" -> ""1796_nonReentrant"";
""1796_ownerSafeWithdrawal"" -> ""1796_onlyOwner"";
}
"
0xb42ce9d2a22061b7d5e569753f92edbaa2dad37b.sol,Exchanger,"contract Exchanger is Administered { bool public enabled = false; ITradeableAsset public tokenContract; IYeekFormula public formulaContract; uint32 public weight; constructor(address _token, uint32 _weight, address _formulaContract) { require (_weight > 0 && weight <= 1000000); weight = _weight; tokenContract = ITradeableAsset(_token); formulaContract = IYeekFormula(_formulaContract); }",1,"subgraph cluster_567_Exchanger {
label=""Exchanger"";
""567_depositTokens"" [label=""depositTokens""];
""567_buy"" [label=""buy""];
""567_withdrawEther"" [label=""withdrawEther""];
""567_constructor"" [label=""constructor""];
""567_getPurchasePrice"" [label=""getPurchasePrice""];
""567_enable"" [label=""enable""];
""567_sell"" [label=""sell""];
""567_depositEther"" [label=""depositEther""];
""567_getReserveBalances"" [label=""getReserveBalances""];
""567_disable"" [label=""disable""];
""567_withdrawTokens"" [label=""withdrawTokens""];
""567_getQuotePrice"" [label=""getQuotePrice""];
""567_getSalePrice"" [label=""getSalePrice""];
""567_setReserveWeight"" [label=""setReserveWeight""];
""567_setReserveWeight"" -> ""567_onlyAdmin"";
""567_depositEther"" -> ""567_onlyOwner"";
""567_withdrawTokens"" -> ""567_onlyOwner"";
""567_withdrawEther"" -> ""567_onlyOwner"";
""567_depositTokens"" -> ""567_onlyOwner"";
""567_enable"" -> ""567_onlyAdmin"";
""567_disable"" -> ""567_onlyAdmin"";
}
"
0x7777777189c4e413bbe6ea9df6c2b4f34f53cdd3.sol,Destructible,contract Destructible is Ownable { function Destructible() payable public { },1,"subgraph cluster_177_Destructible {
label=""Destructible"";
""177_destroy"" [label=""destroy""];
""177_Destructible"" [label=""Destructible""];
""177_destroyAndSend"" [label=""destroyAndSend""];
""177_destroyAndSend"" -> ""177_onlyOwner"";
""177_destroy"" -> ""177_onlyOwner"";
}
"
0xeb36a7650ef32f0643d39cf5b7fcefd4319febb9.sol,Cycle,contract Cycle { using SafeMath for uint; address public juryOperator; address public operator; address public icoAddress; address public juryOnlineWallet; address public projectWallet; address public arbitrationAddress; Token public token; address public jotter; bool public saveMe; struct Milestone { uint etherAmount; uint tokenAmount; uint startTime; uint finishTime; uint duration; string description; string result; },1,"subgraph cluster_2650_Cycle {
label=""Cycle"";
""2650_disputeOpened"" [label=""disputeOpened""];
""2650_withdrawOffer"" [label=""withdrawOffer""];
""2650_isDisputing"" [label=""isDisputing""];
""2650_startMilestone"" [label=""startMilestone""];
""2650_withdrawToken"" [label=""withdrawToken""];
""2650_constructor"" [label=""constructor""];
""2650_editMilestone"" [label=""editMilestone""];
""2650_withdrawEther"" [label=""withdrawEther""];
""2650_acceptOffer"" [label=""acceptOffer""];
""2650_activate"" [label=""activate""];
""2650_setCurrentFundingRound"" [label=""setCurrentFundingRound""];
""2650_seal"" [label=""seal""];
""2650_assignPartition"" [label=""assignPartition""];
""2650_failSafe"" [label=""failSafe""];
""2650_verdictExecuted"" [label=""verdictExecuted""];
""2650_fallback"" [label=""fallback""];
""2650_addRoundPrice"" [label=""addRoundPrice""];
""2650_milestonesLength"" [label=""milestonesLength""];
""2650_investorExists"" [label=""investorExists""];
""2650_addMilestone"" [label=""addMilestone""];
""2650_finishMilestone"" [label=""finishMilestone""];
""2650_payCommission"" [label=""payCommission""];
""2650_setRate"" [label=""setRate""];
""2650_setJotter"" [label=""setJotter""];
""2650_currentMilestone"" [label=""currentMilestone""];
""2650_acceptOffer"" -> ""2650_sealed"";
""2650_startMilestone"" -> ""2650_payCommission"";
""2650_seal"" -> ""2650_notSealed"";
""2650_addMilestone"" -> ""2650_notSealed"";
""2650_startMilestone"" -> ""2650_sealed"";
""2650_seal"" -> ""2650_onlyOperator"";
""2650_failSafe"" -> ""2650_onlyAdmin"";
""2650_startMilestone"" -> ""2650_onlyOperator"";
""2650_activate"" -> ""2650_notSealed"";
""2650_setCurrentFundingRound"" -> ""2650_onlyOperator"";
""2650_setRate"" -> ""2650_onlyOperator"";
""2650_finishMilestone"" -> ""2650_onlyOperator"";
""2650_acceptOffer"" -> ""2650_assignPartition"";
""2650_addMilestone"" -> ""2650_onlyOperator"";
""2650_editMilestone"" -> ""2650_onlyOperator"";
""2650_acceptOffer"" -> ""2650_onlyOperator"";
""2650_activate"" -> ""2650_onlyAdmin"";
""2650_editMilestone"" -> ""2650_notSealed"";
""2650_addRoundPrice"" -> ""2650_onlyOperator"";
}
"
0xf2b89f45cc4ebbf11a36bdb4a4b24eada8dd30a7.sol,AirDrop,contract AirDrop is Ownable { Token public tokenInstance; function AirDrop(address _tokenAddress){ tokenInstance = Token(_tokenAddress); },1,"subgraph cluster_188_AirDrop {
label=""AirDrop"";
""188_transferEthToOnwer"" [label=""transferEthToOnwer""];
""188_AirDrop"" [label=""AirDrop""];
""188_doAirDrop"" [label=""doAirDrop""];
""188_fallback"" [label=""fallback""];
""188_kill"" [label=""kill""];
""188_transferEthToOnwer"" -> ""188_onlyOwner"";
""188_doAirDrop"" -> ""188_onlyOwner"";
""188_kill"" -> ""188_onlyOwner"";
}
"
0x0e752b742f744fdc2d93774da44c37b72c3e6952.sol,CraftyCrowdsale,"contract CraftyCrowdsale is Pausable { using SafeMath for uint256; mapping(address => uint256) received; MintableToken public token; uint256 public preSaleStart; uint256 public preSaleEnd; uint256 public saleStart; uint256 public saleEnd; uint256 public issuedTokens = 0; uint256 public constant hardCap = 5000000000 * 10**8; uint256 constant teamCap = 1450000000 * 10**8; uint256 constant advisorCap = 450000000 * 10**8; uint256 constant bountyCap = 100000000 * 10**8; uint256 constant fundCap = 3000000000 * 10**8; uint256 constant lockTime = 180 days; address public etherWallet; address public teamWallet; address public advisorWallet; address public fundWallet; address public bountyWallet; TokenTimelock teamTokens; uint256 public rate; enum State { BEFORE_START, SALE, REFUND, CLOSED }",1,"subgraph cluster_1475_CraftyCrowdsale {
label=""CraftyCrowdsale"";
""1475_releaseTeamTokens"" [label=""releaseTeamTokens""];
""1475_setWallets"" [label=""setWallets""];
""1475_setRate"" [label=""setRate""];
""1475_enableRefund"" [label=""enableRefund""];
""1475_receivedFrom"" [label=""receivedFrom""];
""1475_getRate"" [label=""getRate""];
""1475_generateTokens"" [label=""generateTokens""];
""1475_claimRefund"" [label=""claimRefund""];
""1475_reclaimEther"" [label=""reclaimEther""];
""1475_buyTokens"" [label=""buyTokens""];
""1475_CraftyCrowdsale"" [label=""CraftyCrowdsale""];
""1475_fallback"" [label=""fallback""];
""1475_finishCrowdsale"" [label=""finishCrowdsale""];
""1475_finishCrowdsale"" -> ""1475_inState"";
""1475_setWallets"" -> ""1475_inState"";
""1475_buyTokens"" -> ""1475_whenNotPaused"";
""1475_setRate"" -> ""1475_onlyOwner"";
""1475_claimRefund"" -> ""1475_whenNotPaused"";
""1475_buyTokens"" -> ""1475_saleIsOn"";
""1475_buyTokens"" -> ""1475_getRate"";
""1475_enableRefund"" -> ""1475_inState"";
""1475_enableRefund"" -> ""1475_onlyOwner"";
""1475_setRate"" -> ""1475_beforeSale"";
""1475_claimRefund"" -> ""1475_inState"";
""1475_reclaimEther"" -> ""1475_onlyOwner"";
""1475_finishCrowdsale"" -> ""1475_onlyOwner"";
""1475_generateTokens"" -> ""1475_onlyOwner"";
""1475_setWallets"" -> ""1475_onlyOwner"";
""1475_fallback"" -> ""1475_buyTokens"";
}
"
0xc0a1f89bbcaddab4b736e786b6b16c67bc92ed35.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1152_MiniMeToken {
label=""MiniMeToken"";
""1152_destroyTokens"" [label=""destroyTokens""];
""1152_totalSupplyAt"" [label=""totalSupplyAt""];
""1152_MiniMeToken"" [label=""MiniMeToken""];
""1152_claimTokens"" [label=""claimTokens""];
""1152_controller"" [label=""controller""];
""1152_createCloneToken"" [label=""createCloneToken""];
""1152_generateTokens"" [label=""generateTokens""];
""1152_allowance"" [label=""allowance""];
""1152_balanceOf"" [label=""balanceOf""];
""1152_min"" [label=""min""];
""1152_balanceOfAt"" [label=""balanceOfAt""];
""1152_fallback"" [label=""fallback""];
""1152_updateValueAtNow"" [label=""updateValueAtNow""];
""1152_transferFrom"" [label=""transferFrom""];
""1152_totalSupply"" [label=""totalSupply""];
""1152_getValueAt"" [label=""getValueAt""];
""1152_doTransfer"" [label=""doTransfer""];
""1152_transfer"" [label=""transfer""];
""1152_isContract"" [label=""isContract""];
""1152_enableTransfers"" [label=""enableTransfers""];
""1152_approveAndCall"" [label=""approveAndCall""];
""1152_approve"" [label=""approve""];
""1152_transferFrom"" -> ""1152_doTransfer"";
""1152_doTransfer"" -> ""1152_isContract"";
""1152_destroyTokens"" -> ""1152_updateValueAtNow"";
""1152_generateTokens"" -> ""1152_onlyController"";
""1152_totalSupply"" -> ""1152_totalSupplyAt"";
""1152_balanceOfAt"" -> ""1152_min"";
""1152_doTransfer"" -> ""1152_balanceOfAt"";
""1152_totalSupplyAt"" -> ""1152_min"";
""1152_generateTokens"" -> ""1152_balanceOf"";
""1152_enableTransfers"" -> ""1152_onlyController"";
""1152_generateTokens"" -> ""1152_updateValueAtNow"";
""1152_destroyTokens"" -> ""1152_balanceOf"";
""1152_destroyTokens"" -> ""1152_getValueAt"";
""1152_fallback"" -> ""1152_isContract"";
""1152_destroyTokens"" -> ""1152_onlyController"";
""1152_balanceOfAt"" -> ""1152_getValueAt"";
""1152_totalSupplyAt"" -> ""1152_getValueAt"";
""1152_doTransfer"" -> ""1152_updateValueAtNow"";
""1152_transfer"" -> ""1152_doTransfer"";
""1152_claimTokens"" -> ""1152_onlyController"";
""1152_approve"" -> ""1152_isContract"";
""1152_balanceOf"" -> ""1152_balanceOfAt"";
""1152_approveAndCall"" -> ""1152_approve"";
""1152_generateTokens"" -> ""1152_getValueAt"";
}
"
0xd54920cedf704b87342fa26d5773efabf9037a77.sol,CryptoStars,contract CryptoStars { address owner; string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public initialPrice; uint256 public transferPrice; uint256 public MaxStarIndexAvailable; uint256 public MinStarIndexAvailable; uint public nextStarIndexToAssign = 0; uint public starsRemainingToAssign = 0; uint public numberOfStarsToReserve; uint public numberOfStarsReserved = 0; mapping (uint => address) public starIndexToAddress; mapping (uint => string) public starIndexToSTRZName; mapping (uint => string) public starIndexToSTRZMasterName; mapping (address => uint256) public balanceOf; struct Offer { bool isForSale; uint starIndex; address seller; uint minValue; address onlySellTo; },1,"subgraph cluster_1592_CryptoStars {
label=""CryptoStars"";
""1592_setGivenName"" [label=""setGivenName""];
""1592_offerStarForSale"" [label=""offerStarForSale""];
""1592_buyStar"" [label=""buyStar""];
""1592_setStarInitialPrice"" [label=""setStarInitialPrice""];
""1592_reserveStarsForOwner"" [label=""reserveStarsForOwner""];
""1592_offerStarForSaleToAddress"" [label=""offerStarForSaleToAddress""];
""1592_CryptoStars"" [label=""CryptoStars""];
""1592_setTransferPrice"" [label=""setTransferPrice""];
""1592_acceptBidForStar"" [label=""acceptBidForStar""];
""1592_getStar"" [label=""getStar""];
""1592_getMinMax"" [label=""getMinMax""];
""1592_buyStarInitial"" [label=""buyStarInitial""];
""1592_withdraw"" [label=""withdraw""];
""1592_setMinMax"" [label=""setMinMax""];
""1592_setMasterName"" [label=""setMasterName""];
""1592_starNoLongerForSale"" [label=""starNoLongerForSale""];
""1592_transferStar"" [label=""transferStar""];
""1592_withdrawBidForStar"" [label=""withdrawBidForStar""];
""1592_withdrawPartial"" [label=""withdrawPartial""];
""1592_enterBidForStar"" [label=""enterBidForStar""];
""1592_buyStar"" -> ""1592_starNoLongerForSale"";
}
"
0x1b5c8afd9739c3d2af5a4859dec0482a6df7667d.sol,HomesCoin,"contract HomesCoin is ERC20Interface { string public symbol; string public name; uint8 public decimals; uint _totalSupply; uint price; address owner; mapping(address => uint) public balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000 * 10**uint(decimals); owner = msg.sender; balances[owner] = _totalSupply; price=100; emit Transfer(owner, address(0), _totalSupply); }",1,"subgraph cluster_902_HomesCoin {
label=""HomesCoin"";
""902_mint"" [label=""mint""];
""902_totalSupply"" [label=""totalSupply""];
""902_allowance"" [label=""allowance""];
""902_burn"" [label=""burn""];
""902_approve"" [label=""approve""];
""902_fallback"" [label=""fallback""];
""902_buy"" [label=""buy""];
""902_resetHouseParams"" [label=""resetHouseParams""];
""902_transfer"" [label=""transfer""];
""902_constructor"" [label=""constructor""];
""902_makeEvent"" [label=""makeEvent""];
""902_addHouse"" [label=""addHouse""];
""902_destroy"" [label=""destroy""];
""902_collect"" [label=""collect""];
""902_balanceOf"" [label=""balanceOf""];
""902_sell"" [label=""sell""];
""902_setPrice"" [label=""setPrice""];
""902_transferFrom"" [label=""transferFrom""];
}
"
0x3688587725ed6dda84bcd25aeeb04997415da50a.sol,BFreeContract,"contract BFreeContract is ERC20Interface, owned{ string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; uint256 public _totalSupply = 2240000; uint256 public icoMin = 300000; uint256 public preIcoLimit = 600000; uint256 public countHolders = 0; uint256 public amountOfInvestments = 0; uint256 preICOprice; uint256 ICOprice; uint256 public currentTokenPrice; uint256 public sellPrice; bool public preIcoIsRunning; bool public minimalGoalReached; bool public icoIsClosed; bool icoExitIsPossible; mapping (address => uint256) public tokenBalanceOf; mapping(address => mapping (address => uint256)) allowed; mapping(address => bool) frozenAccount; event FrozenFunds(address initiator, address account, string status); event BonusChanged(uint8 bonusOld, uint8 bonusNew); event minGoalReached(uint256 minIcoAmount, string notice); event preIcoEnded(uint256 preIcoAmount, string notice); event priceUpdated(uint256 oldPrice, uint256 newPrice, string notice); event withdrawed(address _to, uint256 summe, string notice); event deposited(address _from, uint256 summe, string notice); event orderToTransfer(address initiator, address _from, address _to, uint256 summe, string notice); event tokenCreated(address _creator, uint256 summe, string notice); event tokenDestroyed(address _destroyer, uint256 summe, string notice); event icoStatusUpdated(address _initiator, string status); function BFreeContract() { preIcoIsRunning = true; minimalGoalReached = false; icoExitIsPossible = false; icoIsClosed = false; tokenBalanceOf[this] += _totalSupply; allowed[this][owner] = _totalSupply; allowed[this][supervisor] = _totalSupply; currentTokenPrice = 0.024340770791075100 * 1 ether; preICOprice = 0.024340770791075100 * 1 ether; ICOprice = 0.040567951318458400 * 1 ether; sellPrice = 0; updatePrices(); }",1,"subgraph cluster_1780_BFreeContract {
label=""BFreeContract"";
""1780_destroyToken"" [label=""destroyToken""];
""1780_buyToken"" [label=""buyToken""];
""1780_sellMaximumPossibleAmountOfTokens"" [label=""sellMaximumPossibleAmountOfTokens""];
""1780_setSellPrice"" [label=""setSellPrice""];
""1780_calculateTheEndPrice"" [label=""calculateTheEndPrice""];
""1780_transferOwnership"" [label=""transferOwnership""];
""1780_setPreICOPrice"" [label=""setPreICOPrice""];
""1780_balanceOf"" [label=""balanceOf""];
""1780_freezeAccount"" [label=""freezeAccount""];
""1780_checkMinimalGoal"" [label=""checkMinimalGoal""];
""1780_allowIcoExit"" [label=""allowIcoExit""];
""1780_approve"" [label=""approve""];
""1780_checkPreIcoStatus"" [label=""checkPreIcoStatus""];
""1780__transfer"" [label=""_transfer""];
""1780_fallback"" [label=""fallback""];
""1780_buy"" [label=""buy""];
""1780_exitThisIcoForHalfOfTokenPrice"" [label=""exitThisIcoForHalfOfTokenPrice""];
""1780_getAllMyTokensForAllEtherOnContract"" [label=""getAllMyTokensForAllEtherOnContract""];
""1780_withdraw"" [label=""withdraw""];
""1780_collect"" [label=""collect""];
""1780_setICOPrice"" [label=""setICOPrice""];
""1780_sell"" [label=""sell""];
""1780_setPrices"" [label=""setPrices""];
""1780_updatePrices"" [label=""updatePrices""];
""1780_BFreeContract"" [label=""BFreeContract""];
""1780_deposit"" [label=""deposit""];
""1780_mintToken"" [label=""mintToken""];
""1780_stopThisIco"" [label=""stopThisIco""];
""1780_checkFrozenAccounts"" [label=""checkFrozenAccounts""];
""1780_transfer"" [label=""transfer""];
""1780_allowance"" [label=""allowance""];
""1780_transferFrom"" [label=""transferFrom""];
""1780_totalSupply"" [label=""totalSupply""];
""1780_destroyToken"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780_checkMinimalGoal"";
""1780_sell"" -> ""1780__transfer"";
""1780_setSellPrice"" -> ""1780_isOwner"";
""1780_exitThisIcoForHalfOfTokenPrice"" -> ""1780__transfer"";
""1780_transferFrom"" -> ""1780__transfer"";
""1780_collect"" -> ""1780_isOwner"";
""1780_fallback"" -> ""1780_buyToken"";
""1780_sellMaximumPossibleAmountOfTokens"" -> ""1780_sell"";
""1780_transferOwnership"" -> ""1780_isOwner"";
""1780_setPrices"" -> ""1780_isOwner"";
""1780_deposit"" -> ""1780_isOwner"";
""1780_setPreICOPrice"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_updatePrices"";
""1780_BFreeContract"" -> ""1780_updatePrices"";
""1780_buy"" -> ""1780_buyToken"";
""1780_buyToken"" -> ""1780_updatePrices"";
""1780_setPreICOPrice"" -> ""1780_isOwner"";
""1780_transfer"" -> ""1780__transfer"";
""1780_stopThisIco"" -> ""1780_isOwner"";
""1780_collect"" -> ""1780_withdraw"";
""1780_withdraw"" -> ""1780_isOwner"";
""1780_allowIcoExit"" -> ""1780_isOwner"";
""1780_freezeAccount"" -> ""1780_isOwner"";
""1780_mintToken"" -> ""1780_isOwner"";
""1780_getAllMyTokensForAllEtherOnContract"" -> ""1780__transfer"";
""1780_setPrices"" -> ""1780_updatePrices"";
""1780_setICOPrice"" -> ""1780_isOwner"";
""1780_buyToken"" -> ""1780__transfer"";
""1780_updatePrices"" -> ""1780_checkPreIcoStatus"";
}
"
0x4c4757b23526ba13876f8ef3efe973618266e3e8.sol,UZMINI_KO,contract UZMINI_KO { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_UZMINI_KO {
label=""UZMINI_KO"";
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
}
"
0xda11e959bcaaba5f88dbf4d866e270c78bc84b76.sol,EBP,"contract EBP is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 20000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 15000000e8; uint public target0drop = 2000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_EBP {
label=""EBP"";
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_Distribute"" [label=""Distribute""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_add"" [label=""add""];
""1253_getTokens"" [label=""getTokens""];
""1253_constructor"" [label=""constructor""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_transfer"" [label=""transfer""];
""1253_approve"" [label=""approve""];
""1253_fallback"" [label=""fallback""];
""1253_burn"" [label=""burn""];
""1253_allowance"" [label=""allowance""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_distr"" [label=""distr""];
""1253_withdraw"" [label=""withdraw""];
""1253_getTokens"" -> ""1253_canDistr"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
}
"
0x32d782c283924f1e40b2a839b8121564b7b9142e.sol,SUPER_Q,contract SUPER_Q { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_SUPER_Q {
label=""SUPER_Q"";
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xd5670cdb0d6e6d9eedfdbaceb97d5774466f0b23.sol,YouCollectBase,"contract YouCollectBase is Owned { using SafeMath for uint256; event RedButton(uint value, uint totalSupply); function payout(address _to) public onlyCLevel { _payout(_to, this.balance); }",1,"subgraph cluster_664_YouCollectBase {
label=""YouCollectBase"";
""664_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""664_payout"" [label=""payout""];
""664__payout"" [label=""_payout""];
""664_payout"" -> ""664__payout"";
""664_payout"" -> ""664_onlyCLevel"";
""664_transferAnyERC20Token"" -> ""664_onlyCEO"";
}
"
0x58a2263f77e1b23a74a3d99b9d01506da308800b.sol,NetworkTokenPayment,"contract NetworkTokenPayment is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 55 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 45 * 1 days; uint256 public totalSupply = 100000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth =10000e8; uint public target0drop = 10000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_NetworkTokenPayment {
label=""NetworkTokenPayment"";
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_getTokens"" [label=""getTokens""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_withdraw"" [label=""withdraw""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_transfer"" [label=""transfer""];
""1253_approve"" [label=""approve""];
""1253_Distribute"" [label=""Distribute""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_constructor"" [label=""constructor""];
""1253_fallback"" [label=""fallback""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_add"" [label=""add""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_allowance"" [label=""allowance""];
""1253_burn"" [label=""burn""];
""1253_distr"" [label=""distr""];
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
""1253_distr"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
}
"
0x6947335452cb7a452fc337c28cb0d597806c7672.sol,SmartWeddingContract,"contract SmartWeddingContract { event WrittenContractProposed(uint timestamp, string ipfsHash, address wallet); event Signed(uint timestamp, address wallet); event ContractSigned(uint timestamp); event AssetProposed(uint timestamp, string asset, address wallet); event AssetAddApproved(uint timestamp, string asset, address wallet); event AssetAdded(uint timestamp, string asset); event AssetRemoveApproved(uint timestamp, string asset, address wallet); event AssetRemoved(uint timestamp, string asset); event DivorceApproved(uint timestamp, address wallet); event Divorced(uint timestamp); event FundsSent(uint timestamp, address wallet, uint amount); event FundsReceived(uint timestamp, address wallet, uint amount); bool public signed = false; bool public divorced = false; mapping (address => bool) private hasSigned; mapping (address => bool) private hasDivorced; address public husbandAddress; address public wifeAddress; string public writtenContractIpfsHash; struct Asset { string data; uint husbandAllocation; uint wifeAllocation; bool added; bool removed; mapping (address => bool) hasApprovedAdd; mapping (address => bool) hasApprovedRemove; }",1,"subgraph cluster_823_SmartWeddingContract {
label=""SmartWeddingContract"";
""823_pay"" [label=""pay""];
""823_constructor"" [label=""constructor""];
""823_fallback"" [label=""fallback""];
""823_signContract"" [label=""signContract""];
""823_removeAsset"" [label=""removeAsset""];
""823_approveAsset"" [label=""approveAsset""];
""823_divorce"" [label=""divorce""];
""823_proposeWrittenContract"" [label=""proposeWrittenContract""];
""823_isSameString"" [label=""isSameString""];
""823_proposeAsset"" [label=""proposeAsset""];
""823_getAssetIds"" [label=""getAssetIds""];
""823_proposeAsset"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_isNotDivorced"";
""823_signContract"" -> ""823_isSameString"";
""823_fallback"" -> ""823_isNotDivorced"";
""823_proposeWrittenContract"" -> ""823_onlySpouse"";
""823_pay"" -> ""823_onlySpouse"";
""823_proposeAsset"" -> ""823_isNotDivorced"";
""823_pay"" -> ""823_isNotDivorced"";
""823_proposeAsset"" -> ""823_isSameString"";
""823_fallback"" -> ""823_isSigned"";
""823_approveAsset"" -> ""823_isNotDivorced"";
""823_approveAsset"" -> ""823_isSigned"";
""823_approveAsset"" -> ""823_onlySpouse"";
""823_proposeAsset"" -> ""823_isSigned"";
""823_signContract"" -> ""823_onlySpouse"";
""823_divorce"" -> ""823_isSigned"";
""823_pay"" -> ""823_isSigned"";
""823_divorce"" -> ""823_onlySpouse"";
""823_removeAsset"" -> ""823_isSigned"";
""823_divorce"" -> ""823_isNotDivorced"";
}
"
0xc3a684140448995f6abeb361c56110207da04d57.sol,SignalsSociety,"contract SignalsSociety is Ownable, Memberships { event Deposited(address account, uint amount, uint balance, uint timestamp); event MembershipPaid(address account, Membership membership, uint timestamp); mapping (address => uint) public balances; function deposit(address account, uint amount) public { balances[account] += amount; Deposited(account, amount, balances[account], now); }",1,"subgraph cluster_258_SignalsSociety {
label=""SignalsSociety"";
""258_acceptMembership"" [label=""acceptMembership""];
""258_deposit"" [label=""deposit""];
""258_fallback"" [label=""fallback""];
""258_acceptMembership"" -> ""258_getMembershipPrice"";
""258_acceptMembership"" -> ""258_onlyBot"";
""258_fallback"" -> ""258_deposit"";
}
"
0xa1f1fc153936a3880412743d1b180fa65b63eece.sol,DONC,"contract DONC is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 40 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 199000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 18000e8; uint public target0drop = 30000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1255_DONC {
label=""DONC"";
""1255_constructor"" [label=""constructor""];
""1255_approve"" [label=""approve""];
""1255_withdrawAll"" [label=""withdrawAll""];
""1255_transferOwnership"" [label=""transferOwnership""];
""1255_getTokens"" [label=""getTokens""];
""1255_getTokenBalance"" [label=""getTokenBalance""];
""1255_withdraw"" [label=""withdraw""];
""1255_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1255_burn"" [label=""burn""];
""1255_balanceOf"" [label=""balanceOf""];
""1255_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1255_Distribute"" [label=""Distribute""];
""1255_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1255_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1255_transferFrom"" [label=""transferFrom""];
""1255_fallback"" [label=""fallback""];
""1255_transfer"" [label=""transfer""];
""1255_distr"" [label=""distr""];
""1255_allowance"" [label=""allowance""];
""1255_finishDistribution"" [label=""finishDistribution""];
""1255_add"" [label=""add""];
""1255_DistributeAirdrop"" -> ""1255_onlyOwner"";
""1255_add"" -> ""1255_onlyOwner"";
""1255_DistributeAirdropMultiple"" -> ""1255_Distribute"";
""1255_getTokens"" -> ""1255_canDistr"";
""1255_transferFrom"" -> ""1255_onlyPayloadSize"";
""1255_finishDistribution"" -> ""1255_onlyOwner"";
""1255_DistributeAirdrop"" -> ""1255_Distribute"";
""1255_finishDistribution"" -> ""1255_canDistr"";
""1255_transferOwnership"" -> ""1255_onlyOwner"";
""1255_withdrawAll"" -> ""1255_onlyOwner"";
""1255_withdraw"" -> ""1255_onlyOwner"";
""1255_getTokens"" -> ""1255_distr"";
""1255_Distribute"" -> ""1255_onlyOwner"";
""1255_distr"" -> ""1255_canDistr"";
""1255_constructor"" -> ""1255_distr"";
""1255_burn"" -> ""1255_onlyOwner"";
""1255_updateTokensPerEth"" -> ""1255_onlyOwner"";
""1255_transfer"" -> ""1255_onlyPayloadSize"";
""1255_DistributeAirdropMultiple"" -> ""1255_onlyOwner"";
""1255_withdrawForeignTokens"" -> ""1255_onlyOwner"";
""1255_fallback"" -> ""1255_getTokens"";
}
"
0x1f4215fe007ee5b170391241656a28a8bd13826e.sol,MultiOwner,"contract MultiOwner { event OwnerAdded(address newOwner); event OwnerRemoved(address oldOwner); event RequirementChanged(uint256 newRequirement); uint256 public ownerRequired; mapping (address => bool) public isOwner; mapping (address => bool) public RequireDispose; address[] owners; function MultiOwner(address[] _owners, uint256 _required) public { ownerRequired = _required; isOwner[msg.sender] = true; owners.push(msg.sender); for (uint256 i = 0; i < _owners.length; ++i){ require(!isOwner[_owners[i]]); isOwner[_owners[i]] = true; owners.push(_owners[i]); }",1,"subgraph cluster_327_MultiOwner {
label=""MultiOwner"";
""327_addOwner"" [label=""addOwner""];
""327_removeOwner"" [label=""removeOwner""];
""327_numberOwners"" [label=""numberOwners""];
""327_ConfirmDispose"" [label=""ConfirmDispose""];
""327_MultiOwner"" [label=""MultiOwner""];
""327_kill"" [label=""kill""];
""327_changeRequirement"" [label=""changeRequirement""];
""327_addOwner"" -> ""327_onlyOwner"";
""327_changeRequirement"" -> ""327_onlyOwner"";
""327_removeOwner"" -> ""327_ownerExists"";
""327_addOwner"" -> ""327_ownerDoesNotExist"";
""327_kill"" -> ""327_onlyOwner"";
""327_removeOwner"" -> ""327_onlyOwner"";
""327_ConfirmDispose"" -> ""327_onlyOwner"";
""327_kill"" -> ""327_ConfirmDispose"";
}
"
0x297ac8bc7540bc241f065fcc22c570b40170b573.sol,TraceTokenSale,"contract TraceTokenSale is Ownable{ using SafeMath for uint256; TraceToken public token; uint256 public constant TOTAL_NUM_TOKENS = 5e26; uint256 public constant tokensForSale = 25e25; uint256 public totalEthers = 0; uint256 public constant softCap = 3984.064 ether; uint256 public constant hardCap = 17928.287 ether; uint256 public constant presaleLimit = 7968.127 ether; bool public presaleLimitReached = false; uint256 public constant min_investment_eth = 0.5 ether; uint256 public constant max_investment_eth = 398.4064 ether; uint256 public constant min_investment_presale_eth = 5 ether; bool public refundAllowed = false; bool public paused = false; uint256 public constant bountyReward = 1e25; uint256 public constant preicoAndAdvisors = 4e25; uint256 public constant liquidityPool = 25e24; uint256 public constant futureDevelopment = 1e26; uint256 public constant teamAndFounders = 75e24; uint256 public leftOverTokens = 0; uint256[8] public founderAmounts = [uint256(teamAndFounders.div(8)),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8),teamAndFounders.div(8)]; uint256[2] public preicoAndAdvisorsAmounts = [ uint256(preicoAndAdvisors.mul(2).div(5)),preicoAndAdvisors.mul(2).div(5)]; address public wallet; address public teamAndFoundersWallet; address public advisorsAndPreICO; uint256 public constant token_per_wei = 12550; uint256 public startTime; uint256 public endTime; uint256 private constant weekInSeconds = 86400 * 7; mapping(address => uint256) public whitelist; mapping(address => uint256) public etherBalances; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); event Whitelist(address indexed beneficiary, uint256 value); event SoftCapReached(); event Finalized(); function TraceTokenSale(uint256 _startTime, address traceTokenAddress, address _wallet, address _teamAndFoundersWallet, address _advisorsAndPreICO) public { require(_startTime >= now); require(_wallet != 0x0); require(_teamAndFoundersWallet != 0x0); require(_advisorsAndPreICO != 0x0); token = TraceToken(traceTokenAddress); wallet = _wallet; teamAndFoundersWallet = _teamAndFoundersWallet; advisorsAndPreICO = _advisorsAndPreICO; startTime = _startTime; endTime = _startTime + 4 * weekInSeconds; }",1,"subgraph cluster_1968_TraceTokenSale {
label=""TraceTokenSale"";
""1968_balanceOf"" [label=""balanceOf""];
""1968_withdrawTokensToAdvisors"" [label=""withdrawTokensToAdvisors""];
""1968_validPurchase"" [label=""validPurchase""];
""1968_hasEnded"" [label=""hasEnded""];
""1968_addWhitelists"" [label=""addWhitelists""];
""1968_pauseSale"" [label=""pauseSale""];
""1968_fallback"" [label=""fallback""];
""1968_hardCapReached"" [label=""hardCapReached""];
""1968_checkWhitelist"" [label=""checkWhitelist""];
""1968_finishCrowdsale"" [label=""finishCrowdsale""];
""1968_withdrawTokenToFounders"" [label=""withdrawTokenToFounders""];
""1968_calcAmount"" [label=""calcAmount""];
""1968_unpauseSale"" [label=""unpauseSale""];
""1968_hasStarted"" [label=""hasStarted""];
""1968_refund"" [label=""refund""];
""1968_addWhitelist"" [label=""addWhitelist""];
""1968_TraceTokenSale"" [label=""TraceTokenSale""];
""1968_isPaused"" [label=""isPaused""];
""1968_softCapReached"" [label=""softCapReached""];
""1968_withdraw"" [label=""withdraw""];
""1968_buyTokens"" [label=""buyTokens""];
""1968_refund"" -> ""1968_softCapReached"";
""1968_addWhitelist"" -> ""1968_hasEnded"";
""1968_withdrawTokensToAdvisors"" -> ""1968_onlyOwner"";
""1968_addWhitelists"" -> ""1968_addWhitelist"";
""1968_unpauseSale"" -> ""1968_onlyOwner"";
""1968_buyTokens"" -> ""1968_checkWhitelist"";
""1968_buyTokens"" -> ""1968_isPaused"";
""1968_fallback"" -> ""1968_buyTokens"";
""1968_withdraw"" -> ""1968_softCapReached"";
""1968_refund"" -> ""1968_hasEnded"";
""1968_buyTokens"" -> ""1968_hasEnded"";
""1968_withdrawTokensToAdvisors"" -> ""1968_softCapReached"";
""1968_withdrawTokenToFounders"" -> ""1968_hasEnded"";
""1968_finishCrowdsale"" -> ""1968_onlyOwner"";
""1968_finishCrowdsale"" -> ""1968_hasEnded"";
""1968_addWhitelist"" -> ""1968_onlyOwner"";
""1968_addWhitelists"" -> ""1968_onlyOwner"";
""1968_withdrawTokenToFounders"" -> ""1968_onlyOwner"";
""1968_withdrawTokenToFounders"" -> ""1968_softCapReached"";
""1968_buyTokens"" -> ""1968_validPurchase"";
""1968_addWhitelists"" -> ""1968_hasEnded"";
""1968_finishCrowdsale"" -> ""1968_softCapReached"";
""1968_pauseSale"" -> ""1968_onlyOwner"";
""1968_finishCrowdsale"" -> ""1968_hardCapReached"";
""1968_buyTokens"" -> ""1968_calcAmount"";
""1968_withdraw"" -> ""1968_onlyOwner"";
""1968_withdrawTokensToAdvisors"" -> ""1968_hasEnded"";
}
"
0xb387be1e10d56bd7c6849b7be9d6aad564854d72.sol,Alfa_quiZ,contract Alfa_quiZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_Alfa_quiZ {
label=""Alfa_quiZ"";
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0xeed618c15d12c635c3c319aee7bded2e2879aea0.sol,PlayerBook,contract PlayerBook { using NameFilter for string; using SafeMath for uint256; address private _owner; uint256 public registrationFee_ = 10 finney; mapping(uint256 => PlayerBookReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },1,"subgraph cluster_20_PlayerBookReceiverInterface {
label=""PlayerBookReceiverInterface"";
""20_receivePlayerInfo"" [label=""receivePlayerInfo""];
""20_receivePlayerNameList"" [label=""receivePlayerNameList""];
}
"
0x5bcbb71ef20825120774e35cba72f1a15a9d27ba.sol,ENIGMA,contract ENIGMA { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ENIGMA {
label=""ENIGMA"";
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_Stop"" [label=""Stop""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_New"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
}
"
0x330ac216a5a8ccd493f3b9e33a524be3c7124217.sol,Bonds,contract Bonds { modifier onlyOwner(){ require(msg.sender == dev); _; },1,"subgraph cluster_1287_Bonds {
label=""Bonds"";
""1287_getBondPrice"" [label=""getBondPrice""];
""1287_setInitialPrice"" [label=""setInitialPrice""];
""1287_getTotalBondValue"" [label=""getTotalBondValue""];
""1287_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1287_extDistributeBondFund"" [label=""extDistributeBondFund""];
""1287_setAllowReferral"" [label=""setAllowReferral""];
""1287_distributeYield"" [label=""distributeYield""];
""1287_withdraw"" [label=""withdraw""];
""1287_buy"" [label=""buy""];
""1287_fallback"" [label=""fallback""];
""1287_getMyBalance"" [label=""getMyBalance""];
""1287_getBondOwner"" [label=""getBondOwner""];
""1287_setMaxbonds"" [label=""setMaxbonds""];
""1287_getBondDivShare"" [label=""getBondDivShare""];
""1287_distributeBondFund"" [label=""distributeBondFund""];
""1287_transfer"" [label=""transfer""];
""1287_setName"" [label=""setName""];
""1287_setSymbol"" [label=""setSymbol""];
""1287_addNewbond"" [label=""addNewbond""];
""1287_setAutoNewbond"" [label=""setAutoNewbond""];
""1287_getNextAvailableBond"" [label=""getNextAvailableBond""];
""1287_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""1287_constructor"" [label=""constructor""];
""1287_getOwnerBalance"" [label=""getOwnerBalance""];
""1287_setBondPrice"" [label=""setBondPrice""];
""1287_addTotalBondValue"" [label=""addTotalBondValue""];
""1287_gettotalBondDivs"" [label=""gettotalBondDivs""];
""1287_withdrawPart"" [label=""withdrawPart""];
""1287_setInitialPrice"" -> ""1287_onlyOwner"";
""1287_addNewbond"" -> ""1287_onlyOwner"";
""1287_setName"" -> ""1287_onlyOwner"";
""1287_buy"" -> ""1287_addTotalBondValue"";
""1287_setBondPrice"" -> ""1287_onlyOwner"";
""1287_buy"" -> ""1287_distributeBondFund"";
""1287_setAllowReferral"" -> ""1287_onlyOwner"";
""1287_withdrawPart"" -> ""1287_onlyOwner"";
""1287_extDistributeBondFund"" -> ""1287_onlyOwner"";
""1287_addNewbond"" -> ""1287_addTotalBondValue"";
""1287_buy"" -> ""1287_distributeYield"";
""1287_setMaxbonds"" -> ""1287_onlyOwner"";
""1287_setSymbol"" -> ""1287_onlyOwner"";
""1287_setAutoNewbond"" -> ""1287_onlyOwner"";
}
"
0x1d9be4a5681374c54b1821d0beac3a678ad128a4.sol,StorageController,"contract StorageController is SafeMath, CreatorEnabled, StringMover { Storage public stor; IMNTP public mntpToken; IGold public goldToken; IGoldIssueBurnFee public goldIssueBurnFee; address public managerAddress = 0x0; event TokenBuyRequest(address _from, string _userId, uint _reference, uint _amount, uint indexed _index); event TokenSellRequest(address _from, string _userId, uint _reference, uint _amount, uint indexed _index); event RequestCancelled(uint indexed _index); event RequestProcessed(uint indexed _index); event RequestFailed(uint indexed _index); modifier onlyManagerOrCreator() { require(msg.sender == managerAddress || msg.sender == creator); _; }",1,"subgraph cluster_2767_StorageController {
label=""StorageController"";
""2767_isHotWallet"" [label=""isHotWallet""];
""2767_processRequest"" [label=""processRequest""];
""2767_getDocCount"" [label=""getDocCount""];
""2767_getRequestBaseInfo"" [label=""getRequestBaseInfo""];
""2767_addSellTokensRequest"" [label=""addSellTokensRequest""];
""2767_processSellRequest"" [label=""processSellRequest""];
""2767_fallback"" [label=""fallback""];
""2767_setHotWalletAddress"" [label=""setHotWalletAddress""];
""2767_getRequest"" [label=""getRequest""];
""2767_addGoldTransaction"" [label=""addGoldTransaction""];
""2767_cancelRequest"" [label=""cancelRequest""];
""2767_changeGoldIssueBurnFeeContract"" [label=""changeGoldIssueBurnFeeContract""];
""2767_getAllGoldTransactionsCount"" [label=""getAllGoldTransactionsCount""];
""2767_StorageController"" [label=""StorageController""];
""2767_getHotWalletAddress"" [label=""getHotWalletAddress""];
""2767_processBuyRequestFiat"" [label=""processBuyRequestFiat""];
""2767_processBuyRequest"" [label=""processBuyRequest""];
""2767_getUserHotGoldBalance"" [label=""getUserHotGoldBalance""];
""2767_transferGoldFromHotWallet"" [label=""transferGoldFromHotWallet""];
""2767_getRequestsCount"" [label=""getRequestsCount""];
""2767_issueGoldTokens"" [label=""issueGoldTokens""];
""2767_setManagerAddress"" [label=""setManagerAddress""];
""2767_withdrawEth"" [label=""withdrawEth""];
""2767_getDoc"" [label=""getDoc""];
""2767_processSellRequestFiat"" [label=""processSellRequestFiat""];
""2767_addBuyTokensRequest"" [label=""addBuyTokensRequest""];
""2767_getGoldTransaction"" [label=""getGoldTransaction""];
""2767_processInternalRequest"" [label=""processInternalRequest""];
""2767_addDoc"" [label=""addDoc""];
""2767_getGoldTransactionsCount"" [label=""getGoldTransactionsCount""];
""2767_burnGoldTokens"" [label=""burnGoldTokens""];
""2767_withdrawTokens"" [label=""withdrawTokens""];
""2767_changeController"" [label=""changeController""];
""2767_processInternalRequest"" -> ""2767_getHotWalletAddress"";
""2767_transferGoldFromHotWallet"" -> ""2767_getUserHotGoldBalance"";
""2767_processSellRequest"" -> ""2767_issueGoldTokens"";
""2767_processInternalRequest"" -> ""2767_processBuyRequest"";
""2767_changeGoldIssueBurnFeeContract"" -> ""2767_onlyCreator"";
""2767_addGoldTransaction"" -> ""2767_onlyManagerOrCreator"";
""2767_processSellRequestFiat"" -> ""2767_getRequest"";
""2767_processSellRequest"" -> ""2767_safeSub"";
""2767_processSellRequestFiat"" -> ""2767_safeSub"";
""2767_transferGoldFromHotWallet"" -> ""2767_addGoldTransaction"";
""2767_withdrawEth"" -> ""2767_onlyManagerOrCreator"";
""2767_processBuyRequest"" -> ""2767_addGoldTransaction"";
""2767_processSellRequestFiat"" -> ""2767_onlyManagerOrCreator"";
""2767_processRequest"" -> ""2767_onlyManagerOrCreator"";
""2767_processRequest"" -> ""2767_processBuyRequest"";
""2767_transferGoldFromHotWallet"" -> ""2767_getHotWalletAddress"";
""2767_processRequest"" -> ""2767_getRequest"";
""2767_processInternalRequest"" -> ""2767_processSellRequest"";
""2767_addSellTokensRequest"" -> ""2767_burnGoldTokens"";
""2767_getRequest"" -> ""2767_bytes32ToString"";
""2767_transferGoldFromHotWallet"" -> ""2767_onlyManagerOrCreator"";
""2767_processBuyRequest"" -> ""2767_safeDiv"";
""2767_processSellRequest"" -> ""2767_isHotWallet"";
""2767_withdrawTokens"" -> ""2767_issueGoldTokens"";
""2767_setHotWalletAddress"" -> ""2767_onlyCreator"";
""2767_processBuyRequestFiat"" -> ""2767_onlyManagerOrCreator"";
""2767_cancelRequest"" -> ""2767_getRequest"";
""2767_processSellRequest"" -> ""2767_addGoldTransaction"";
""2767_addDoc"" -> ""2767_onlyManagerOrCreator"";
""2767_processRequest"" -> ""2767_processSellRequest"";
""2767_processBuyRequestFiat"" -> ""2767_processBuyRequest"";
""2767_isHotWallet"" -> ""2767_getHotWalletAddress"";
""2767_setManagerAddress"" -> ""2767_onlyCreator"";
""2767_processInternalRequest"" -> ""2767_onlyManagerOrCreator"";
""2767_withdrawTokens"" -> ""2767_onlyManagerOrCreator"";
""2767_processBuyRequest"" -> ""2767_isHotWallet"";
""2767_processBuyRequest"" -> ""2767_safeSub"";
""2767_processRequest"" -> ""2767_getRequestsCount"";
""2767_processSellRequest"" -> ""2767_safeMul"";
""2767_processSellRequestFiat"" -> ""2767_getRequestsCount"";
""2767_getDoc"" -> ""2767_bytes64ToString"";
""2767_processBuyRequest"" -> ""2767_issueGoldTokens"";
""2767_cancelRequest"" -> ""2767_onlyManagerOrCreator"";
""2767_withdrawTokens"" -> ""2767_burnGoldTokens"";
""2767_changeController"" -> ""2767_onlyCreator"";
}
"
0xe3ec74dbce6ee1d8680e38714b67ab5535c95bdb.sol,try_it,contract try_it { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_try_it {
label=""try_it"";
""143_StopGame"" [label=""StopGame""];
""143_Activate"" [label=""Activate""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
""143_fallback"" [label=""fallback""];
""143_NewQuestion"" [label=""NewQuestion""];
}
"
0xf2f13b50e63454a5ce255f8355285561c13bb3cc.sol,BNCXCrowdsale,"contract BNCXCrowdsale { Token public tokenReward; address public creator; address public owner = 0x516A2F56A6a8f9A34AbF86C877d0252dC94AAA69; uint256 public startDate; uint256 public endDate; event FundTransfer(address backer, uint amount); constructor() public { creator = msg.sender; startDate = 1544832000; endDate = 1521331200; tokenReward = Token(0x5129bdfF6B065ce57cC7E7349bA681a0aC1D00cd); }",1,"subgraph cluster_273_BNCXCrowdsale {
label=""BNCXCrowdsale"";
""273_setEndtDate"" [label=""setEndtDate""];
""273_kill"" [label=""kill""];
""273_fallback"" [label=""fallback""];
""273_setOwner"" [label=""setOwner""];
""273_setCreator"" [label=""setCreator""];
""273_sendToken"" [label=""sendToken""];
""273_constructor"" [label=""constructor""];
""273_setToken"" [label=""setToken""];
""273_setStartDate"" [label=""setStartDate""];
}
"
0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol,DrainMe,"contract DrainMe { address public winner = 0x0; address public owner; address public firstTarget = 0x461ec7309F187dd4650EE6b4D25D93c922d7D56b; address public secondTarget = 0x1C3E062c77f09fC61550703bDd1D59842C22c766; address[] public players; mapping(address=>bool) approvedPlayers; uint256 public secret; uint256[] public seed = [951828771,158769871220]; uint256[] public balance; function DranMe() public payable{ owner = msg.sender; }",1,"subgraph cluster_387_DrainMe {
label=""DrainMe"";
""387_getPlayerCount"" [label=""getPlayerCount""];
""387_guessSeed"" [label=""guessSeed""];
""387_DranMe"" [label=""DranMe""];
""387_callFirstTarget"" [label=""callFirstTarget""];
""387_setSeed"" [label=""setSeed""];
""387_becomePlayer"" [label=""becomePlayer""];
""387_manipulateSecret"" [label=""manipulateSecret""];
""387_fallback"" [label=""fallback""];
""387_winPrize"" [label=""winPrize""];
""387_unlockSecret"" [label=""unlockSecret""];
""387_checkSecret"" [label=""checkSecret""];
""387_getPrize"" [label=""getPrize""];
""387_getLength"" [label=""getLength""];
""387_setSecret"" [label=""setSecret""];
""387_callSecondTarget"" [label=""callSecondTarget""];
""387_claimPrize"" [label=""claimPrize""];
""387_addSeed"" [label=""addSeed""];
""387_manipulateSecret"" -> ""387_unlockSecret"";
""387_winPrize"" -> ""387_onlyOwner"";
""387_checkSecret"" -> ""387_onlyPlayers"";
""387_manipulateSecret"" -> ""387_onlyPlayers"";
""387_callSecondTarget"" -> ""387_onlyPlayers"";
""387_setSecret"" -> ""387_onlyOwner"";
""387_callFirstTarget"" -> ""387_onlyPlayers"";
""387_addSeed"" -> ""387_onlyPlayers"";
""387_setSeed"" -> ""387_onlyPlayers"";
""387_claimPrize"" -> ""387_onlyWinner"";
""387_guessSeed"" -> ""387_onlyPlayers"";
}
"
0x518c55ad0cc887f78e2c7fe23b14c33a34586edc.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_758_RefundVault {
label=""RefundVault"";
""758_enableRefunds"" [label=""enableRefunds""];
""758_refund"" [label=""refund""];
""758_close"" [label=""close""];
""758_deposit"" [label=""deposit""];
""758_constructor"" [label=""constructor""];
""758_enableRefunds"" -> ""758_onlyOwner"";
""758_close"" -> ""758_onlyOwner"";
""758_deposit"" -> ""758_onlyOwner"";
}
"
0x17478cc05e51da20a27bbdf66fbe4a16aae81842.sol,AuctionPotato,"contract AuctionPotato { using SafeMath for uint256; address public owner; uint public startTime; uint public endTime; string public infoUrl; string name; bool started; uint public potato; uint oldPotato; uint oldHighestBindingBid; address creatureOwner; address creature_newOwner; event CreatureOwnershipTransferred(address indexed _from, address indexed _to); bool public canceled; uint public highestBindingBid; address public highestBidder; bool blockerPay; bool blockerWithdraw; mapping(address => uint256) public fundsByBidder; bool ownerHasWithdrawn; event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid); event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount); event LogCanceled(); constructor() public { blockerWithdraw = false; blockerPay = false; owner = msg.sender; creatureOwner = owner; highestBindingBid = 2000000000000000; potato = 0; started = false; name = ; infoUrl = ""https: }",1,"subgraph cluster_771_AuctionPotato {
label=""AuctionPotato"";
""771_getHighestBid"" [label=""getHighestBid""];
""771_acceptCreatureOwnership"" [label=""acceptCreatureOwnership""];
""771_timeLeft"" [label=""timeLeft""];
""771_nextNextBid"" [label=""nextNextBid""];
""771_placeBid"" [label=""placeBid""];
""771_nextBid"" [label=""nextBid""];
""771_ownerCanWithdraw"" [label=""ownerCanWithdraw""];
""771_constructor"" [label=""constructor""];
""771_fuelContract"" [label=""fuelContract""];
""771_cancelAuction"" [label=""cancelAuction""];
""771_balance"" [label=""balance""];
""771_auctionName"" [label=""auctionName""];
""771_withdraw"" [label=""withdraw""];
""771_queryCreatureOwner"" [label=""queryCreatureOwner""];
""771_startAuction"" [label=""startAuction""];
""771_isStarted"" [label=""isStarted""];
""771_transferCreatureOwnership"" [label=""transferCreatureOwnership""];
""771_cancelAuction"" -> ""771_onlyNotCanceled"";
""771_cancelAuction"" -> ""771_onlyBeforeEnd"";
""771_placeBid"" -> ""771_onlyBeforeEnd"";
""771_placeBid"" -> ""771_onlyNotOwner"";
""771_placeBid"" -> ""771_onlyAfterStart"";
""771_cancelAuction"" -> ""771_onlyOwner"";
""771_fuelContract"" -> ""771_onlyOwner"";
""771_placeBid"" -> ""771_onlyNotCanceled"";
""771_startAuction"" -> ""771_onlyOwner"";
}
"
0xb4a448387403554616eb5b50aa4c48f75243a015.sol,Mobius2Dv2,"contract Mobius2Dv2 is UsingOraclizeRandom, DSMath { string public ipfsHash; string public ipfsHashType = ; MobiusToken public constant token = MobiusToken(0x54cdC9D889c28f55F59f6b136822868c7d4726fC); bool public upgraded; bool public initialized; address public nextVersion; LastVersion public constant lastVersion = LastVersion(0xA74642Aeae3e2Fd79150c910eB5368B64f864B1e); uint public previousRounds; uint public totalRevenue; uint public totalSharesSold; uint public totalEarningsGenerated; uint public totalDividendsPaid; uint public totalJackpotsWon; uint public constant DEV_DIVISOR = 20; uint public constant RETURNS_FRACTION = 60 * 10**16; uint public constant REFERRAL_FRACTION = 3 * 10**16; uint public constant JACKPOT_SEED_FRACTION = WAD / 20; uint public constant JACKPOT_FRACTION = 15 * 10**16; uint public constant DAILY_JACKPOT_FRACTION = 6 * 10**16; uint public constant DIVIDENDS_FRACTION = 9 * 10**16; uint public startingSharePrice = 1 finney; uint public _priceIncreasePeriod = 1 hours; uint public _priceMultiplier = 101 * 10**16; uint public _secondaryPrice = 100 finney; uint public maxDailyJackpot = 5 ether; uint public constant SOFT_DEADLINE_DURATION = 1 days; uint public constant DAILY_JACKPOT_PERIOD = 1 days; uint public constant TIME_PER_SHARE = 5 minutes; uint public nextRoundTime; uint public jackpotSeed; uint public devBalance; uint public unclaimedReturns; uint public constant MULTIPLIER = RAY; mapping (address => uint) public lastDailyEntry; struct Investor { uint lastCumulativeReturnsPoints; uint shares; }",1,"subgraph cluster_5179_Mobius2Dv2 {
label=""Mobius2Dv2"";
""5179_startNewRound"" [label=""startNewRound""];
""5179_roundInfo"" [label=""roundInfo""];
""5179_getSeed"" [label=""getSeed""];
""5179_finalizeAndRestart"" [label=""finalizeAndRestart""];
""5179__drawDailyJackpot"" [label=""_drawDailyJackpot""];
""5179__disburseReturns"" [label=""_disburseReturns""];
""5179_setNextRoundTimestamp"" [label=""setNextRoundTimestamp""];
""5179__outstandingReturns"" [label=""_outstandingReturns""];
""5179_reinvestReturns"" [label=""reinvestReturns""];
""5179_init"" [label=""init""];
""5179__finalizeRound"" [label=""_finalizeRound""];
""5179_upgrade"" [label=""upgrade""];
""5179_finalizeLastRound"" [label=""finalizeLastRound""];
""5179_totalsInfo"" [label=""totalsInfo""];
""5179_setMaxDailyJackpot"" [label=""setMaxDailyJackpot""];
""5179_withdrawDevShare"" [label=""withdrawDevShare""];
""5179__issueShares"" [label=""_issueShares""];
""5179__startNewDailyRound"" [label=""_startNewDailyRound""];
""5179_setIPFSHash"" [label=""setIPFSHash""];
""5179_setNextRoundDelay"" [label=""setNextRoundDelay""];
""5179__dailyJackpot"" [label=""_dailyJackpot""];
""5179__onRandom"" [label=""_onRandom""];
""5179__triggerOraclize"" [label=""_triggerOraclize""];
""5179_updateMyReturns"" [label=""updateMyReturns""];
""5179__updateReturns"" [label=""_updateReturns""];
""5179_investorInfo"" [label=""investorInfo""];
""5179_estimateReturns"" [label=""estimateReturns""];
""5179_hasReturns"" [label=""hasReturns""];
""5179__purchase"" [label=""_purchase""];
""5179_setRoundParams"" [label=""setRoundParams""];
""5179_constructor"" [label=""constructor""];
""5179__onRandomFailed"" [label=""_onRandomFailed""];
""5179_buyShares"" [label=""buyShares""];
""5179_setSecondaryPrice"" [label=""setSecondaryPrice""];
""5179_initOraclize"" [label=""initOraclize""];
""5179__splitRevenue"" [label=""_splitRevenue""];
""5179_fallback"" [label=""fallback""];
""5179_withdrawReturns"" [label=""withdrawReturns""];
""5179_initOraclize"" -> ""5179_auth"";
""5179__purchase"" -> ""5179__issueShares"";
""5179_initOraclize"" -> ""5179_oraclize_setNetwork"";
""5179__disburseReturns"" -> ""5179_wdiv"";
""5179_estimateReturns"" -> ""5179_hasReturns"";
""5179__triggerOraclize"" -> ""5179__requestRandom"";
""5179__purchase"" -> ""5179_min"";
""5179__purchase"" -> ""5179_mul"";
""5179__purchase"" -> ""5179_add"";
""5179_withdrawDevShare"" -> ""5179_auth"";
""5179_totalsInfo"" -> ""5179_wmul"";
""5179__issueShares"" -> ""5179_add"";
""5179_reinvestReturns"" -> ""5179__updateReturns"";
""5179_reinvestReturns"" -> ""5179_reinvestReturns"";
""5179_withdrawReturns"" -> ""5179_hasReturns"";
""5179__purchase"" -> ""5179__dailyJackpot"";
""5179_startNewRound"" -> ""5179__purchase"";
""5179__dailyJackpot"" -> ""5179__requestRandom"";
""5179_finalizeLastRound"" -> ""5179__finalizeRound"";
""5179__purchase"" -> ""5179__splitRevenue"";
""5179__issueShares"" -> ""5179_wdiv"";
""5179_withdrawReturns"" -> ""5179_sub"";
""5179__finalizeRound"" -> ""5179_wmul"";
""5179__dailyJackpot"" -> ""5179_oraclize_setCustomGasPrice"";
""5179_startNewRound"" -> ""5179__startNewDailyRound"";
""5179__outstandingReturns"" -> ""5179_mul"";
""5179__splitRevenue"" -> ""5179_wmul"";
""5179_init"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_min"";
""5179_upgrade"" -> ""5179_auth"";
""5179__splitRevenue"" -> ""5179_add"";
""5179_initOraclize"" -> ""5179_oraclize_setProof"";
""5179_setSecondaryPrice"" -> ""5179_auth"";
""5179_updateMyReturns"" -> ""5179__updateReturns"";
""5179_withdrawDevShare"" -> ""5179_sub"";
""5179__issueShares"" -> ""5179_mul"";
""5179__drawDailyJackpot"" -> ""5179__startNewDailyRound"";
""5179__triggerOraclize"" -> ""5179_auth"";
""5179__purchase"" -> ""5179__updateReturns"";
""5179_reinvestReturns"" -> ""5179_min"";
""5179__dailyJackpot"" -> ""5179_min"";
""5179__disburseReturns"" -> ""5179_mul"";
""5179_roundInfo"" -> ""5179_wmul"";
""5179__finalizeRound"" -> ""5179_add"";
""5179_setNextRoundTimestamp"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_sub"";
""5179_finalizeAndRestart"" -> ""5179_finalizeLastRound"";
""5179__disburseReturns"" -> ""5179_add"";
""5179_withdrawReturns"" -> ""5179__updateReturns"";
""5179_investorInfo"" -> ""5179_estimateReturns"";
""5179__updateReturns"" -> ""5179_add"";
""5179_reinvestReturns"" -> ""5179__purchase"";
""5179_finalizeAndRestart"" -> ""5179_startNewRound"";
""5179_estimateReturns"" -> ""5179__outstandingReturns"";
""5179_reinvestReturns"" -> ""5179_sub"";
""5179_setMaxDailyJackpot"" -> ""5179_auth"";
""5179__drawDailyJackpot"" -> ""5179_add"";
""5179_setNextRoundDelay"" -> ""5179_auth"";
""5179__splitRevenue"" -> ""5179__disburseReturns"";
""5179__purchase"" -> ""5179_wmul"";
""5179_roundInfo"" -> ""5179_min"";
""5179__outstandingReturns"" -> ""5179_sub"";
""5179_buyShares"" -> ""5179__purchase"";
""5179_setIPFSHash"" -> ""5179_auth"";
""5179__updateReturns"" -> ""5179__outstandingReturns"";
""5179__onRandom"" -> ""5179__drawDailyJackpot"";
""5179_setRoundParams"" -> ""5179_auth"";
""5179_fallback"" -> ""5179_buyShares"";
}
"
0x7012ef33dcc79a7341ba05cf2c5699eaaa5e0d7d.sol,Transaction,contract Transaction is Ownable { struct TransactionNeoPlace { uint id; address seller; address buyer; bytes16 itemId; bytes8 typeItem; string location; string pictureHash; bytes16 receiptHash; string comment; bytes8 status; uint256 _price; },1,"subgraph cluster_738_Transaction {
label=""Transaction"";
""738_stringToBytes8"" [label=""stringToBytes8""];
""738_getPurchases"" [label=""getPurchases""];
""738_getSales"" [label=""getSales""];
""738_sendAmount"" [label=""sendAmount""];
""738_unlockFunds"" [label=""unlockFunds""];
""738_kill"" [label=""kill""];
""738_getNumberOfTransactions"" [label=""getNumberOfTransactions""];
""738_sendAdditionalFunds"" [label=""sendAdditionalFunds""];
""738_buyItem"" [label=""buyItem""];
""738_unlockFunds"" -> ""738_stringToBytes8"";
""738_kill"" -> ""738_onlyOwner"";
""738_sendAdditionalFunds"" -> ""738_stringToBytes8"";
}
"
0x6f5ac8fda08c00c38380777f00e265d4951b6f59.sol,QUIZ,contract QUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>=1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_QUIZ {
label=""QUIZ"";
""132_StopGame"" [label=""StopGame""];
""132_NewQuestion"" [label=""NewQuestion""];
""132_fallback"" [label=""fallback""];
""132_SetupQUIZ"" [label=""SetupQUIZ""];
""132_Try"" [label=""Try""];
""132_newQuestioner"" [label=""newQuestioner""];
}
"
0x728781e75735dc0962df3a51d7ef47e798a7107e.sol,WolkExchange,"contract WolkExchange is WolkProtocol, WolkTGE { uint256 public maxPerExchangeBP = 50; address public exchangeFormula; bool public exchangeIsRunning = false; modifier isExchangable { require(exchangeIsRunning && allSaleCompleted); _; }",1,"subgraph cluster_2452_WolkExchange {
label=""WolkExchange"";
""2452_sellWolk"" [label=""sellWolk""];
""2452_updateExchangeStatus"" [label=""updateExchangeStatus""];
""2452_purchaseWolk"" [label=""purchaseWolk""];
""2452_estLiquidationCap"" [label=""estLiquidationCap""];
""2452_sellWolkEstimate"" [label=""sellWolkEstimate""];
""2452_setMaxPerExchange"" [label=""setMaxPerExchange""];
""2452_fallback"" [label=""fallback""];
""2452_purchaseWolkEstimate"" [label=""purchaseWolkEstimate""];
""2452_setExchangeFormula"" [label=""setExchangeFormula""];
""2452_setExchangeFormula"" -> ""2452_sellWolkEstimate"";
""2452_updateExchangeStatus"" -> ""2452_onlyOwner"";
""2452_estLiquidationCap"" -> ""2452_safeMul"";
""2452_sellWolk"" -> ""2452_safeSub"";
""2452_sellWolk"" -> ""2452_isExchangable"";
""2452_purchaseWolk"" -> ""2452_safeAdd"";
""2452_purchaseWolk"" -> ""2452_purchaseWolkEstimate"";
""2452_updateExchangeStatus"" -> ""2452_purchaseWolkEstimate"";
""2452_updateExchangeStatus"" -> ""2452_sellWolkEstimate"";
""2452_sellWolk"" -> ""2452_sellWolkEstimate"";
""2452_estLiquidationCap"" -> ""2452_safeDiv"";
""2452_setMaxPerExchange"" -> ""2452_onlyOwner"";
""2452_setExchangeFormula"" -> ""2452_onlyOwner"";
""2452_purchaseWolk"" -> ""2452_isExchangable"";
""2452_sellWolk"" -> ""2452_estLiquidationCap"";
""2452_setExchangeFormula"" -> ""2452_purchaseWolkEstimate"";
}
"
0x6a5e59fbaea3e07737fbafceb600cbde5a295f24.sol,RefundEscrow,"contract RefundEscrow is Ownable, ConditionalEscrow { enum State { Active, Refunding, Closed }",1,"subgraph cluster_1379_RefundEscrow {
label=""RefundEscrow"";
""1379_close"" [label=""close""];
""1379_deposit"" [label=""deposit""];
""1379_beneficiaryWithdraw"" [label=""beneficiaryWithdraw""];
""1379_withdrawalAllowed"" [label=""withdrawalAllowed""];
""1379_constructor"" [label=""constructor""];
""1379_enableRefunds"" [label=""enableRefunds""];
""1379_deposit"" -> ""1379_deposit"";
""1379_close"" -> ""1379_onlyOwner"";
""1379_enableRefunds"" -> ""1379_onlyOwner"";
}
"
0xdb209c97e0de799bbf14e3377307780ddc26be4e.sol,DarkPay,"contract DarkPay is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 365 * 1 days; uint public round1 = now + 364 * 1 days; uint256 public totalSupply = 1000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 1000; uint256 public tokensPerEth = 16000000e8; uint public target0drop = 50000; uint public progress0drop = 0; address multisig = 0x024bf21EDAd749461Bf2E0830bC1F7b282bcea7C; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_DarkPay {
label=""DarkPay"";
""1261_transfer"" [label=""transfer""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_add"" [label=""add""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_burn"" [label=""burn""];
""1261_constructor"" [label=""constructor""];
""1261_distr"" [label=""distr""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_allowance"" [label=""allowance""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_approve"" [label=""approve""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
}
"
0x83d3abc4e75885db350ace57f99c3a3e00286fe8.sol,BetaCoin,"contract BetaCoin is ERC20 { using SafeMath for uint256; address owner1 = msg.sender; address owner2; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) times; mapping (address => mapping (uint256 => uint256)) dorpnum; mapping (address => mapping (uint256 => uint256)) dorptime; mapping (address => mapping (uint256 => uint256)) freeday; mapping (address => bool) public frozenAccount; mapping (address => bool) public airlist; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 _Rate = 10 ** decimals; uint256 public totalSupply = 10000000000 * _Rate; uint256 public totalDistributed = 0; uint256 public totalRemaining = totalSupply.sub(totalDistributed); uint256 public value = 200 * _Rate; uint256 public _per = 1; bool public distributionClosed = true; bool key; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event FrozenFunds(address target, bool frozen); event Distr(address indexed to, uint256 amount); event DistrClosed(bool Closed); modifier onlyOwner() { require(msg.sender == owner1 || msg.sender == owner2); _; }",1,"subgraph cluster_1230_BetaCoin {
label=""BetaCoin"";
""1230_approve"" [label=""approve""];
""1230_closeDistribution"" [label=""closeDistribution""];
""1230_freezeAccount"" [label=""freezeAccount""];
""1230_balanceOf"" [label=""balanceOf""];
""1230_BetaCoin"" [label=""BetaCoin""];
""1230_fallback"" [label=""fallback""];
""1230_Set_per"" [label=""Set_per""];
""1230_freeze"" [label=""freeze""];
""1230_distr"" [label=""distr""];
""1230_getTokens"" [label=""getTokens""];
""1230_transfer"" [label=""transfer""];
""1230_distribute"" [label=""distribute""];
""1230_transferOwnership"" [label=""transferOwnership""];
""1230_nowInSeconds"" [label=""nowInSeconds""];
""1230_withdraw"" [label=""withdraw""];
""1230_allowance"" [label=""allowance""];
""1230_transferFrom"" [label=""transferFrom""];
""1230_lockOf"" [label=""lockOf""];
""1230_distribute"" -> ""1230_distr"";
""1230_closeDistribution"" -> ""1230_onlyOwner"";
""1230_transferOwnership"" -> ""1230_onlyOwner"";
""1230_transferFrom"" -> ""1230_onlyPayloadSize"";
""1230_freeze"" -> ""1230_freezeAccount"";
""1230_transferFrom"" -> ""1230_lockOf"";
""1230_transfer"" -> ""1230_onlyPayloadSize"";
""1230_transfer"" -> ""1230_lockOf"";
""1230_fallback"" -> ""1230_getTokens"";
""1230_withdraw"" -> ""1230_onlyOwner"";
""1230_distribute"" -> ""1230_onlyOwner"";
""1230_freeze"" -> ""1230_onlyOwner"";
""1230_Set_per"" -> ""1230_onlyOwner"";
}
"
0x290d7f8b8d7da1e92903405a74667c934ca8f086.sol,Wallet,"contract Wallet { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event TransferOwnership(address indexed from, address indexed to); address Owner; function transferOwnership(address to) onlyOwner { TransferOwnership(Owner, to); Owner = to; }",1,"subgraph cluster_307_Wallet {
label=""Wallet"";
""307_fallback"" [label=""fallback""];
""307_transferOwnership"" [label=""transferOwnership""];
""307_withdrawTokenTo"" [label=""withdrawTokenTo""];
""307_withdraw"" [label=""withdraw""];
""307_initWallet"" [label=""initWallet""];
""307_WithdrawalEnabled"" [label=""WithdrawalEnabled""];
""307_SetReleaseDate"" [label=""SetReleaseDate""];
""307_withdrawTo"" [label=""withdrawTo""];
""307_deposit"" [label=""deposit""];
""307_MinimumDeposit"" [label=""MinimumDeposit""];
""307_ReleaseDate"" [label=""ReleaseDate""];
""307_lock"" [label=""lock""];
""307_withdrawToken"" [label=""withdrawToken""];
""307_withdrawToken"" -> ""307_WithdrawalEnabled"";
""307_initWallet"" -> ""307_open"";
""307_withdrawTo"" -> ""307_WithdrawalEnabled"";
""307_withdraw"" -> ""307_withdrawTo"";
""307_deposit"" -> ""307_MinimumDeposit"";
""307_withdrawTokenTo"" -> ""307_WithdrawalEnabled"";
""307_withdrawToken"" -> ""307_withdrawTokenTo"";
""307_fallback"" -> ""307_deposit"";
""307_withdrawToken"" -> ""307_onlyOwner"";
""307_transferOwnership"" -> ""307_onlyOwner"";
""307_withdrawTokenTo"" -> ""307_onlyOwner"";
""307_withdrawTo"" -> ""307_onlyOwner"";
""307_initWallet"" -> ""307_deposit"";
}
"
0x508404d6f5342b4a11a08e8be3f9bb2ddbdc189f.sol,EtherItem23,"contract EtherItem23 is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; mapping (uint256 => address) public item23IndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public item23IndexToApproved; mapping (uint256 => uint256) private item23IndexToPrice; mapping (uint256 => uint256) private item23IndexToPreviousPrice; mapping (uint256 => address[5]) private item23IndexToPreviousOwners; address public ceoAddress; address public cooAddress; struct Item23 { string name; }",1,"subgraph cluster_1287_EtherItem23 {
label=""EtherItem23"";
""1287_createContractItem23"" [label=""createContractItem23""];
""1287__transfer"" [label=""_transfer""];
""1287_totalSupply"" [label=""totalSupply""];
""1287_priceOf"" [label=""priceOf""];
""1287_name"" [label=""name""];
""1287_balanceOf"" [label=""balanceOf""];
""1287_symbol"" [label=""symbol""];
""1287_stringToUint"" [label=""stringToUint""];
""1287_implementsERC721"" [label=""implementsERC721""];
""1287_payout"" [label=""payout""];
""1287_takeOwnership"" [label=""takeOwnership""];
""1287_ownerOf"" [label=""ownerOf""];
""1287_approve"" [label=""approve""];
""1287_setCOO"" [label=""setCOO""];
""1287_EtherItem23"" [label=""EtherItem23""];
""1287__payout"" [label=""_payout""];
""1287_getItem23"" [label=""getItem23""];
""1287_purchase"" [label=""purchase""];
""1287__addressNotNull"" [label=""_addressNotNull""];
""1287_transfer"" [label=""transfer""];
""1287__createItem23"" [label=""_createItem23""];
""1287_setCEO"" [label=""setCEO""];
""1287__approved"" [label=""_approved""];
""1287_transferFrom"" [label=""transferFrom""];
""1287__owns"" [label=""_owns""];
""1287_tokensOfOwner"" [label=""tokensOfOwner""];
""1287_createContractItem23"" -> ""1287__createItem23"";
""1287_payout"" -> ""1287_onlyCLevel"";
""1287_purchase"" -> ""1287__addressNotNull"";
""1287_createContractItem23"" -> ""1287_onlyCOO"";
""1287_createContractItem23"" -> ""1287_stringToUint"";
""1287__createItem23"" -> ""1287__transfer"";
""1287_transferFrom"" -> ""1287__addressNotNull"";
""1287_transferFrom"" -> ""1287__approved"";
""1287_transfer"" -> ""1287__addressNotNull"";
""1287_approve"" -> ""1287__owns"";
""1287_transferFrom"" -> ""1287__transfer"";
""1287_tokensOfOwner"" -> ""1287_totalSupply"";
""1287_setCEO"" -> ""1287_onlyCEO"";
""1287_purchase"" -> ""1287__transfer"";
""1287_tokensOfOwner"" -> ""1287_balanceOf"";
""1287_takeOwnership"" -> ""1287__transfer"";
""1287_payout"" -> ""1287__payout"";
""1287_setCOO"" -> ""1287_onlyCEO"";
""1287_transferFrom"" -> ""1287__owns"";
""1287_takeOwnership"" -> ""1287__addressNotNull"";
""1287_transfer"" -> ""1287__transfer"";
""1287_transfer"" -> ""1287__owns"";
""1287_takeOwnership"" -> ""1287__approved"";
}
"
0xd7b45e0cdae4c65ef2c7e19152eeb3074e20f98f.sol,Owned,contract Owned { address internal _owner; function Owned() public { _owner = msg.sender; },1,"subgraph cluster_164_Owned {
label=""Owned"";
""164_Owned"" [label=""Owned""];
""164_kill"" [label=""kill""];
""164_fallback"" [label=""fallback""];
""164_harvest"" [label=""harvest""];
""164_kill"" -> ""164_onlyOwner"";
""164_harvest"" -> ""164_onlyOwner"";
}
"
0x0174312e4aef436606ffdeb4d05d22fb68f36ba0.sol,LatiumSeller,contract LatiumSeller { address private constant _latiumAddress = 0xBb31037f997553BEc50510a635d231A35F8EC640; Latium private constant _latium = Latium(_latiumAddress); uint256 private _etherAmount = 0; uint256 private constant _tokenPrice = 10 finney; uint256 private _minimumPurchase = 10 * 10 ** uint256(_latium.decimals()); address public owner; function LatiumSeller() { owner = msg.sender; },1,"subgraph cluster_342_LatiumSeller {
label=""LatiumSeller"";
""342_fallback"" [label=""fallback""];
""342_withdrawLatium"" [label=""withdrawLatium""];
""342_LatiumSeller"" [label=""LatiumSeller""];
""342__tokensToSell"" [label=""_tokensToSell""];
""342_minimumPurchase"" [label=""minimumPurchase""];
""342_tokenPrice"" [label=""tokenPrice""];
""342_withdrawEther"" [label=""withdrawEther""];
""342_withdrawLatium"" -> ""342__tokensToSell"";
""342_withdrawEther"" -> ""342_onlyOwner"";
""342_fallback"" -> ""342__tokensToSell"";
""342_withdrawLatium"" -> ""342_onlyOwner"";
}
"
0xed42398a3df99e482039c2aec8000dba75296ee9.sol,enigma,contract enigma { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_enigma {
label=""enigma"";
""143_newQuestioner"" [label=""newQuestioner""];
""143_StopGame"" [label=""StopGame""];
""143_fallback"" [label=""fallback""];
""143_Try"" [label=""Try""];
""143_ActivateContract"" [label=""ActivateContract""];
""143_NewQuestion"" [label=""NewQuestion""];
}
"
0x744a31ede5422355d9c2bd8c44c710404336ca84.sol,NFTsCrowdsaleBase,"contract NFTsCrowdsaleBase is Superuser, INFTsCrowdsale { using SafeMath for uint256; ERC20 public erc20Contract; ERC721 public erc721Contract; uint public eth2erc20; struct Auction { bytes32 id; address seller; uint256 price; uint256 startAt; uint256 endAt; uint256 tokenId; }",1,"subgraph cluster_1478_NFTsCrowdsaleBase {
label=""NFTsCrowdsaleBase"";
""1478__transfer"" [label=""_transfer""];
""1478_constructor"" [label=""constructor""];
""1478__cancelEscrow"" [label=""_cancelEscrow""];
""1478__payByEth"" [label=""_payByEth""];
""1478__isOnAuction"" [label=""_isOnAuction""];
""1478_isOnAuction"" [label=""isOnAuction""];
""1478_getAuction"" [label=""getAuction""];
""1478__isTokenOwner"" [label=""_isTokenOwner""];
""1478__newAuction"" [label=""_newAuction""];
""1478__cancelAuction"" [label=""_cancelAuction""];
""1478_isOnPreAuction"" [label=""isOnPreAuction""];
""1478__payByErc20"" [label=""_payByErc20""];
""1478__escrow"" [label=""_escrow""];
""1478__payByErc20"" -> ""1478__isOnAuction"";
""1478__payByEth"" -> ""1478__transfer"";
""1478__newAuction"" -> ""1478__isTokenOwner"";
""1478__newAuction"" -> ""1478__escrow"";
""1478__payByErc20"" -> ""1478__transfer"";
""1478__cancelAuction"" -> ""1478__cancelEscrow"";
""1478__payByEth"" -> ""1478__isOnAuction"";
}
"
0xbf2000b42c1ba2eb9e5163a0b7e2fe987ed124b4.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_processTransaction"" [label=""processTransaction""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_pullBalance"" [label=""pullBalance""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_fallback"" -> ""928_refundTransaction"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_processTransaction"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
}
"
0xdc8d902c34f2257b8569dc9bc4f58cc149ed6e48.sol,GitmanIssue,"contract GitmanIssue { address private mediator; address public parent; string public owner; string public repository; string public issue; constructor (string ownerId, string repositoryId, string issueId, address mediatorAddress) public payable { parent = msg.sender; mediator = mediatorAddress; owner = ownerId; repository = repositoryId; issue = issueId; }",1,"subgraph cluster_79_GitmanIssue {
label=""GitmanIssue"";
""79_resolve"" [label=""resolve""];
""79_recall"" [label=""recall""];
""79_constructor"" [label=""constructor""];
}
"
0x03eff7f353aeebea3ac5f23a6e9e844581ff5ef8.sol,PLAY_iQuiz,contract PLAY_iQuiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_PLAY_iQuiz {
label=""PLAY_iQuiz"";
""148_constructor"" [label=""constructor""];
""148_New"" [label=""New""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x658b3573f8222c2d792ff1199933a88680b12973.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_369_AccessService {
label=""AccessService"";
""369_withdraw"" [label=""withdraw""];
""369_setFinance"" [label=""setFinance""];
""369_setService"" [label=""setService""];
}
"
0x845581267b3ffcde72a1a98efcffee48cb9ae0de.sol,ENIGMA_X,contract ENIGMA_X { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ENIGMA_X {
label=""ENIGMA_X"";
""148_New"" [label=""New""];
""148_Stop"" [label=""Stop""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_fallback"" [label=""fallback""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xece0429a5130ebe0616363939067eefca4fbaceb.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1095_MiniMeToken {
label=""MiniMeToken"";
""1095_balanceOfAt"" [label=""balanceOfAt""];
""1095_MiniMeToken"" [label=""MiniMeToken""];
""1095_destroyTokens"" [label=""destroyTokens""];
""1095_isContract"" [label=""isContract""];
""1095_fallback"" [label=""fallback""];
""1095_totalSupplyAt"" [label=""totalSupplyAt""];
""1095_createCloneToken"" [label=""createCloneToken""];
""1095_getValueAt"" [label=""getValueAt""];
""1095_allowance"" [label=""allowance""];
""1095_transferFrom"" [label=""transferFrom""];
""1095_enableTransfers"" [label=""enableTransfers""];
""1095_doTransfer"" [label=""doTransfer""];
""1095_transfer"" [label=""transfer""];
""1095_approve"" [label=""approve""];
""1095_min"" [label=""min""];
""1095_approveAndCall"" [label=""approveAndCall""];
""1095_balanceOf"" [label=""balanceOf""];
""1095_generateTokens"" [label=""generateTokens""];
""1095_claimTokens"" [label=""claimTokens""];
""1095_totalSupply"" [label=""totalSupply""];
""1095_updateValueAtNow"" [label=""updateValueAtNow""];
""1095_generateTokens"" -> ""1095_totalSupply"";
""1095_approve"" -> ""1095_isContract"";
""1095_transferFrom"" -> ""1095_doTransfer"";
""1095_transfer"" -> ""1095_doTransfer"";
""1095_balanceOfAt"" -> ""1095_getValueAt"";
""1095_totalSupplyAt"" -> ""1095_getValueAt"";
""1095_claimTokens"" -> ""1095_onlyController"";
""1095_approveAndCall"" -> ""1095_approve"";
""1095_doTransfer"" -> ""1095_balanceOfAt"";
""1095_destroyTokens"" -> ""1095_onlyController"";
""1095_totalSupply"" -> ""1095_totalSupplyAt"";
""1095_doTransfer"" -> ""1095_isContract"";
""1095_destroyTokens"" -> ""1095_totalSupply"";
""1095_fallback"" -> ""1095_isContract"";
""1095_generateTokens"" -> ""1095_onlyController"";
""1095_totalSupplyAt"" -> ""1095_min"";
""1095_generateTokens"" -> ""1095_updateValueAtNow"";
""1095_generateTokens"" -> ""1095_balanceOf"";
""1095_balanceOfAt"" -> ""1095_min"";
""1095_destroyTokens"" -> ""1095_updateValueAtNow"";
""1095_enableTransfers"" -> ""1095_onlyController"";
""1095_doTransfer"" -> ""1095_updateValueAtNow"";
""1095_destroyTokens"" -> ""1095_balanceOf"";
""1095_balanceOf"" -> ""1095_balanceOfAt"";
}
"
0xd14b221dfb7c7a4d19d464e41affe3e2e182c90e.sol,TokenTrader,"contract TokenTrader is Owned { using SafeMath for uint256; address public asset; address public exchange; address public baseowner; uint256 public units; uint256 public buyPrice; uint256 public sellPrice; uint256 public exchFee; bool public buysTokens; bool public sellsTokens; event ActivatedEvent(bool buys, bool sells); event MakerDepositedEther(uint256 amount); event MakerWithdrewAsset(uint256 tokens); event MakerTransferredAsset(address toTokenTrader, uint256 tokens); event MakerWithdrewERC20Token(address tokenAddress, uint256 tokens); event MakerWithdrewEther(uint256 ethers); event MakerTransferredEther(address toTokenTrader, uint256 ethers); event TakerBoughtAsset(address indexed buyer, uint256 ethersSent, uint256 ethersReturned, uint256 tokensBought); event TakerSoldAsset(address indexed seller, uint256 amountOfTokensToSell, uint256 tokensSold, uint256 etherValueOfTokensSold); function TokenTrader ( address _asset, address _baseowner, address _exchange, uint256 _exchFee, uint256 _units, uint256 _buyPrice, uint256 _sellPrice, bool _buysTokens, bool _sellsTokens ) { asset = _asset; units = _units; buyPrice = _buyPrice; baseowner = _baseowner; exchange = _exchange; exchFee = _exchFee; sellPrice = _sellPrice; buysTokens = _buysTokens; sellsTokens = _sellsTokens; ActivatedEvent(buysTokens, sellsTokens); }",1,"subgraph cluster_2200_TokenTrader {
label=""TokenTrader"";
""2200_takerSellAsset"" [label=""takerSellAsset""];
""2200_makerWithdrawEther"" [label=""makerWithdrawEther""];
""2200_buysTokens"" [label=""buysTokens""];
""2200_units"" [label=""units""];
""2200_takerBuyAsset"" [label=""takerBuyAsset""];
""2200_makerTransferAsset"" [label=""makerTransferAsset""];
""2200_activate"" [label=""activate""];
""2200_owner"" [label=""owner""];
""2200_makerWithdrawERC20Token"" [label=""makerWithdrawERC20Token""];
""2200_sellPrice"" [label=""sellPrice""];
""2200_makerWithdrawAsset"" [label=""makerWithdrawAsset""];
""2200_asset"" [label=""asset""];
""2200_fallback"" [label=""fallback""];
""2200_sellsTokens"" [label=""sellsTokens""];
""2200_TokenTrader"" [label=""TokenTrader""];
""2200_makerTransferEther"" [label=""makerTransferEther""];
""2200_buyPrice"" [label=""buyPrice""];
""2200_makerDepositEther"" [label=""makerDepositEther""];
""2200_makerDepositEther"" -> ""2200_onlyOwner"";
""2200_makerWithdrawERC20Token"" -> ""2200_onlyOwner"";
""2200_makerWithdrawEther"" -> ""2200_onlyOwner"";
""2200_fallback"" -> ""2200_takerBuyAsset"";
""2200_makerWithdrawAsset"" -> ""2200_onlyOwner"";
""2200_makerTransferEther"" -> ""2200_onlyOwner"";
""2200_activate"" -> ""2200_onlyOwner"";
""2200_makerTransferAsset"" -> ""2200_onlyOwner"";
}
"
0x1eafd303c88b6cd638c77b40596de3dcf001b249.sol,NoOwnerEx,contract NoOwnerEx is NoOwner { function reclaimEther(address _to) external onlyOwner { _to.transfer(address(this).balance); },1,"subgraph cluster_621_NoOwnerEx {
label=""NoOwnerEx"";
""621_reclaimToken"" [label=""reclaimToken""];
""621_reclaimEther"" [label=""reclaimEther""];
""621_reclaimEther"" -> ""621_onlyOwner"";
""621_reclaimToken"" -> ""621_onlyOwner"";
}
"
0xc336e10dee4cab01248cf3b1747b52d78394c77a.sol,HoardPresale,contract HoardPresale is Ownable { using SafeMathLib for uint; mapping (address => bool) public presaleParticipantWhitelist; address[] public investors; mapping (address => bool) private investorsMapping; mapping(address => uint) public balances; mapping(address => uint256) public tokenDue; uint public freezeEndsAt; uint public weiRaised = 0; uint public maxFundLimit = 5333000000000000000000; HoardCrowdsale public crowdsale; struct Tranche { uint amount; uint price; },1,"subgraph cluster_891_HoardPresale {
label=""HoardPresale"";
""891_participateCrowdsaleAll"" [label=""participateCrowdsaleAll""];
""891_refund"" [label=""refund""];
""891_setCrowdsale"" [label=""setCrowdsale""];
""891_setFreezeEnd"" [label=""setFreezeEnd""];
""891_fallback"" [label=""fallback""];
""891_getInvestorsCount"" [label=""getInvestorsCount""];
""891_setPricing"" [label=""setPricing""];
""891_getCurrentPrice"" [label=""getCurrentPrice""];
""891_constructor"" [label=""constructor""];
""891_calculatePrice"" [label=""calculatePrice""];
""891_participateCrowdsaleInvestor"" [label=""participateCrowdsaleInvestor""];
""891_getFirstTranche"" [label=""getFirstTranche""];
""891_getLastTranche"" [label=""getLastTranche""];
""891_getPricingStartsAt"" [label=""getPricingStartsAt""];
""891_participateCrowdsaleSelected"" [label=""participateCrowdsaleSelected""];
""891_getCurrentTranche"" [label=""getCurrentTranche""];
""891_getTranche"" [label=""getTranche""];
""891_getPricingEndsAt"" [label=""getPricingEndsAt""];
""891_setPresaleParticipantWhitelist"" [label=""setPresaleParticipantWhitelist""];
""891_participateCrowdsaleAll"" -> ""891_onlyOwner"";
""891_setCrowdsale"" -> ""891_onlyOwner"";
""891_calculatePrice"" -> ""891_getCurrentPrice"";
""891_setPricing"" -> ""891_onlyOwner"";
""891_setFreezeEnd"" -> ""891_onlyOwner"";
""891_setPresaleParticipantWhitelist"" -> ""891_onlyOwner"";
""891_fallback"" -> ""891_calculatePrice"";
""891_getCurrentPrice"" -> ""891_getCurrentTranche"";
""891_participateCrowdsaleAll"" -> ""891_participateCrowdsaleInvestor"";
""891_getPricingStartsAt"" -> ""891_getFirstTranche"";
""891_participateCrowdsaleSelected"" -> ""891_participateCrowdsaleInvestor"";
""891_participateCrowdsaleSelected"" -> ""891_onlyOwner"";
""891_getPricingEndsAt"" -> ""891_getLastTranche"";
""891_participateCrowdsaleInvestor"" -> ""891_onlyOwner"";
}
"
0x29c690419841e126b74981e4709e43916ac80f64.sol,QQ_game,contract QQ_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_QQ_game {
label=""QQ_game"";
""148_Stop"" [label=""Stop""];
""148_fallback"" [label=""fallback""];
""148_constructor"" [label=""constructor""];
""148_Try"" [label=""Try""];
""148_Start"" [label=""Start""];
""148_New"" [label=""New""];
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x6c221dea36d48512947bde8aeb58811db50dbf6f.sol,PartnerContract,contract PartnerContract { function() external payable { if(msg.value == 0) { uint part = address(this).balance / 2; address(0x6B6e4B338b4D5f7D847DaB5492106751C57b7Ff0).transfer(part); address(0xe09f3630663B6b86e82D750b00206f8F8C6F8aD4).transfer(part); },1,"subgraph cluster_35_PartnerContract {
label=""PartnerContract"";
""35_fallback"" [label=""fallback""];
}
"
0x330bebabc9a2a4136e3d1cb38ca521f5a95aec2e.sol,KoreaShow,"contract KoreaShow is TokenController, Controlled { using SafeMath for uint256; uint256 public startFundingTime; uint256 public endFundingTime; uint256 constant public maximumFunding = 100 ether; uint256 public tokensPerEther = 31000; uint256 constant oneDay = 86400; uint256 public totalCollected = 0; bool public paused; string public techProvider = ; Token public tokenContract; bool public finalized = false; bool public allowChange = true; bool private transfersEnabled = true; address private vaultAddress; bool private initialed = false; event Payment(address indexed _sender, uint256 _ethAmount, uint256 _tokenAmount); function KoreaShow( uint _startFundingTime, uint _endFundingTime, address _vaultAddress, address _tokenAddress ) public { require(_endFundingTime > now); require(_endFundingTime >= _startFundingTime); require(_vaultAddress != 0); require(_tokenAddress != 0); require(!initialed); startFundingTime = _startFundingTime; endFundingTime = _endFundingTime; vaultAddress = _vaultAddress; tokenContract = Token(_tokenAddress); paused = false; initialed = true; }",1,"subgraph cluster_1713_KoreaShow {
label=""KoreaShow"";
""1713_pauseContribution"" [label=""pauseContribution""];
""1713_claimTokens"" [label=""claimTokens""];
""1713_KoreaShow"" [label=""KoreaShow""];
""1713_fallback"" [label=""fallback""];
""1713_changeToken"" [label=""changeToken""];
""1713_allowTransfersEnabled"" [label=""allowTransfersEnabled""];
""1713_proxyPayment"" [label=""proxyPayment""];
""1713_doPayment"" [label=""doPayment""];
""1713_finalizeSale"" [label=""finalizeSale""];
""1713_resumeContribution"" [label=""resumeContribution""];
""1713_setTime"" [label=""setTime""];
""1713_isContract"" [label=""isContract""];
""1713_onApprove"" [label=""onApprove""];
""1713_onTransfer"" [label=""onTransfer""];
""1713_changeTokenController"" [label=""changeTokenController""];
""1713_changeTokensPerEther"" [label=""changeTokensPerEther""];
""1713_setTime"" -> ""1713_onlyController"";
""1713_proxyPayment"" -> ""1713_notPaused"";
""1713_claimTokens"" -> ""1713_onlyController"";
""1713_changeToken"" -> ""1713_onlyController"";
""1713_pauseContribution"" -> ""1713_onlyController"";
""1713_changeTokenController"" -> ""1713_onlyController"";
""1713_fallback"" -> ""1713_notPaused"";
""1713_changeTokensPerEther"" -> ""1713_onlyController"";
""1713_proxyPayment"" -> ""1713_doPayment"";
""1713_resumeContribution"" -> ""1713_onlyController"";
""1713_finalizeSale"" -> ""1713_onlyController"";
""1713_fallback"" -> ""1713_doPayment"";
""1713_allowTransfersEnabled"" -> ""1713_onlyController"";
}
"
0x496676b297799eeb9446b9d808c6051d33c6cb58.sol,the_game,contract the_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_the_game {
label=""the_game"";
""143_Try"" [label=""Try""];
""143_StopGame"" [label=""StopGame""];
""143_fallback"" [label=""fallback""];
""143_Activate"" [label=""Activate""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_newQuestioner"" [label=""newQuestioner""];
}
"
0x00f9f4f3ced5d4f6aedea8a92414206557df7167.sol,SNL,"contract SNL is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant INITIAL_SUPPLY = 500000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function SNL() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_SNL {
label=""SNL"";
""706__transfer"" [label=""_transfer""];
""706_SNL"" [label=""SNL""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x5bf5436b367de54860d1b0be31203349a4d5caa7.sol,CryptoCarAuction,"contract CryptoCarAuction is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint256 public totalSupply = 45000000000000000000000000; uint256 public totalDistributed = 100000000000000000000000; uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; uint256 public tokensPerEth = 2600000000000000000000; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_962_CryptoCarAuction {
label=""CryptoCarAuction"";
""962_getTokens"" [label=""getTokens""];
""962_updateTokensPerEth"" [label=""updateTokensPerEth""];
""962_constructor"" [label=""constructor""];
""962_transferFrom"" [label=""transferFrom""];
""962_transferOwnership"" [label=""transferOwnership""];
""962_burn"" [label=""burn""];
""962_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""962_doAirdrop"" [label=""doAirdrop""];
""962_finishDistribution"" [label=""finishDistribution""];
""962_getasall"" [label=""getasall""];
""962_balanceOf"" [label=""balanceOf""];
""962_approve"" [label=""approve""];
""962_distr"" [label=""distr""];
""962_allowance"" [label=""allowance""];
""962_getTokenBalance"" [label=""getTokenBalance""];
""962_adminClaimAirdrop"" [label=""adminClaimAirdrop""];
""962_fallback"" [label=""fallback""];
""962_transfer"" [label=""transfer""];
""962_adminClaimAirdropMultiple"" [label=""adminClaimAirdropMultiple""];
""962_getas"" [label=""getas""];
""962_fallback"" -> ""962_getTokens"";
""962_updateTokensPerEth"" -> ""962_onlyOwner"";
""962_adminClaimAirdrop"" -> ""962_onlyOwner"";
""962_getTokens"" -> ""962_distr"";
""962_burn"" -> ""962_onlyOwner"";
""962_getTokens"" -> ""962_canDistr"";
""962_transferOwnership"" -> ""962_onlyOwner"";
""962_getasall"" -> ""962_onlyOwner"";
""962_distr"" -> ""962_canDistr"";
""962_transfer"" -> ""962_onlyPayloadSize"";
""962_getas"" -> ""962_onlyOwner"";
""962_finishDistribution"" -> ""962_onlyOwner"";
""962_adminClaimAirdropMultiple"" -> ""962_onlyOwner"";
""962_adminClaimAirdrop"" -> ""962_doAirdrop"";
""962_finishDistribution"" -> ""962_canDistr"";
""962_adminClaimAirdropMultiple"" -> ""962_doAirdrop"";
""962_transferFrom"" -> ""962_onlyPayloadSize"";
""962_constructor"" -> ""962_distr"";
""962_withdrawForeignTokens"" -> ""962_onlyOwner"";
}
"
0x25d3b1550e518ba8d7581cad811285e005902faa.sol,SheetMusic,"contract SheetMusic is OwnableContract { enum NoteLength { WHOLE_NOTE, DOTTED_HALF_NOTE, HALF_NOTE, DOTTED_QUARTER_NOTE, QUARTER_NOTE, DOTTED_EIGHTH_NOTE, EIGHTH_NOTE, DOTTED_SIXTEENTH_NOTE, SIXTEENTH_NOTE }",1,"subgraph cluster_638_SheetMusic {
label=""SheetMusic"";
""638_setMilestone"" [label=""setMilestone""];
""638_setMinDonation"" [label=""setMinDonation""];
""638_donate"" [label=""donate""];
""638_getDonatee"" [label=""getDonatee""];
""638_fallback"" [label=""fallback""];
""638_createBeat"" [label=""createBeat""];
""638_createPassage"" [label=""createPassage""];
""638_checkGoal"" [label=""checkGoal""];
""638_splice"" [label=""splice""];
""638_getBeat"" [label=""getBeat""];
""638_checkMidiNoteValue"" [label=""checkMidiNoteValue""];
""638_getNumberOfBeats"" [label=""getNumberOfBeats""];
""638_SheetMusic"" [label=""SheetMusic""];
""638_getTotalDonated"" [label=""getTotalDonated""];
""638_checkMidiNotesValue"" [label=""checkMidiNotesValue""];
""638_transferMilestone"" [label=""transferMilestone""];
""638_getDonationStats"" [label=""getDonationStats""];
""638_createBeat"" -> ""638_checkMidiNotesValue"";
""638_setMinDonation"" -> ""638_onlyOwner"";
""638_fallback"" -> ""638_checkGoal"";
""638_checkGoal"" -> ""638_transferMilestone"";
""638_createBeat"" -> ""638_checkGoal"";
""638_donate"" -> ""638_checkGoal"";
""638_setMilestone"" -> ""638_onlyOwner"";
""638_createPassage"" -> ""638_checkGoal"";
""638_createPassage"" -> ""638_splice"";
""638_checkMidiNotesValue"" -> ""638_checkMidiNoteValue"";
""638_createPassage"" -> ""638_checkMidiNotesValue"";
}
"
0xc780b0272bbe7caedb6b47157d88ce51b324da58.sol,CashFlow,"contract CashFlow { address public depositAddress = 0xbb02b2754386f0c76a2ad7f70ca4b272d29372f2; address public owner; modifier onlyOwner { require(owner == msg.sender, ); _; }",1,"subgraph cluster_97_CashFlow {
label=""CashFlow"";
""97_withdraw"" [label=""withdraw""];
""97_constructor"" [label=""constructor""];
""97_ownerkill"" [label=""ownerkill""];
""97_setOwner"" [label=""setOwner""];
""97_fallback"" [label=""fallback""];
""97_setDepositAddress"" [label=""setDepositAddress""];
""97_setDepositAddress"" -> ""97_onlyOwner"";
""97_setOwner"" -> ""97_onlyOwner"";
""97_withdraw"" -> ""97_onlyOwner"";
""97_ownerkill"" -> ""97_onlyOwner"";
}
"
0x1d4ccc31dab6ea20f461d329a0562c1c58412515.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1234_RefundVault {
label=""RefundVault"";
""1234_close"" [label=""close""];
""1234_RefundVault"" [label=""RefundVault""];
""1234_refund"" [label=""refund""];
""1234_deposit"" [label=""deposit""];
""1234_enableRefunds"" [label=""enableRefunds""];
""1234_close"" -> ""1234_onlyOwner"";
""1234_deposit"" -> ""1234_onlyOwner"";
""1234_enableRefunds"" -> ""1234_onlyOwner"";
}
"
0xeb914da749340266ac474f930c65c2ed4df89922.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_946_Destructible {
label=""Destructible"";
""946_destroyAndSend"" [label=""destroyAndSend""];
""946_Destructible"" [label=""Destructible""];
""946_destroy"" [label=""destroy""];
""946_destroyAndSend"" -> ""946_onlyOwner"";
""946_destroy"" -> ""946_onlyOwner"";
}
"
0x1ec7345ee1780d847b29f65aa0ecf70cb278966e.sol,EtherTv,"contract EtherTv is Ownable { using SafeMath for uint256; Show[] private shows; uint256 public devOwed; mapping (address => uint256) public userDividends; event ShowPurchased( uint256 _tokenId, address oldOwner, address newOwner, uint256 price, uint256 nextPrice ); uint256 constant private FIRST_CAP = 0.5 ether; uint256 constant private SECOND_CAP = 1.0 ether; uint256 constant private THIRD_CAP = 3.0 ether; uint256 constant private FINAL_CAP = 5.0 ether; struct Show { uint256 price; uint256 payout; address owner; }",1,"subgraph cluster_684_EtherTv {
label=""EtherTv"";
""684_createMultipleShows"" [label=""createMultipleShows""];
""684_getNextPrice"" [label=""getNextPrice""];
""684_purchaseShow"" [label=""purchaseShow""];
""684_distributeDividends"" [label=""distributeDividends""];
""684_withdrawDividends"" [label=""withdrawDividends""];
""684_getShow"" [label=""getShow""];
""684_createShow"" [label=""createShow""];
""684_withdraw"" [label=""withdraw""];
""684_getTotalPayout"" [label=""getTotalPayout""];
""684_calculatePoolCut"" [label=""calculatePoolCut""];
""684_purchaseShow"" -> ""684_distributeDividends"";
""684_createMultipleShows"" -> ""684_onlyOwner"";
""684_distributeDividends"" -> ""684_getTotalPayout"";
""684_getShow"" -> ""684_getNextPrice"";
""684_createMultipleShows"" -> ""684_createShow"";
""684_purchaseShow"" -> ""684_calculatePoolCut"";
""684_createShow"" -> ""684_onlyOwner"";
""684_withdraw"" -> ""684_onlyOwner"";
""684_getShow"" -> ""684_getTotalPayout"";
""684_purchaseShow"" -> ""684_getNextPrice"";
}
"
0xaa4250216f77a79fd9983642a987f708f1fe7504.sol,CutiePluginBase,"contract CutiePluginBase is PluginInterface, Pausable { function isPluginInterface() public pure returns (bool) { return true; }",1,"subgraph cluster_462_CutiePluginBase {
label=""CutiePluginBase"";
""462__isOwner"" [label=""_isOwner""];
""462_setFee"" [label=""setFee""];
""462_onRemove"" [label=""onRemove""];
""462__transfer"" [label=""_transfer""];
""462__computeFee"" [label=""_computeFee""];
""462_isPluginInterface"" [label=""isPluginInterface""];
""462_withdraw"" [label=""withdraw""];
""462__escrow"" [label=""_escrow""];
""462_setup"" [label=""setup""];
""462_onRemove"" -> ""462_onlyCore"";
""462_onRemove"" -> ""462_withdraw"";
}
"
0x5b566b473bb0ea8dc0fc6047dd623e5fa3b42307.sol,Base,contract Base { using SafeMath for uint256; uint public createTime = now; address public owner; modifier onlyOwner { require(msg.sender == owner); _; },1,"subgraph cluster_274_Base {
label=""Base"";
""274_unLock"" [label=""unLock""];
""274_setOwner"" [label=""setOwner""];
""274__userRefund"" [label=""_userRefund""];
""274_userRefund"" [label=""userRefund""];
""274_lock"" [label=""lock""];
""274_getEventId"" [label=""getEventId""];
""274_setLock"" [label=""setLock""];
""274_userRefund"" -> ""274__userRefund"";
""274__userRefund"" -> ""274_unLock"";
""274__userRefund"" -> ""274_lock"";
""274_setOwner"" -> ""274_onlyOwner"";
""274_setLock"" -> ""274_onlyOwner"";
}
"
0x009ef15c147ff4c0eb373e1abd2f4d184e5cb916.sol,CampaignContract,contract CampaignContract { using SafeMath for uint256; address internal owner; uint256 public minUSD; uint256 public maxUSD; uint256 public maxContribution; uint256 public minContribution; struct KYCObject { bytes32 phone; bytes32 name; bytes32 occupation; bytes32 addressOne; bytes32 addressTwo; },1,"subgraph cluster_1022_CampaignContract {
label=""CampaignContract"";
""1022_getName"" [label=""getName""];
""1022_retrieveAssets"" [label=""retrieveAssets""];
""1022_changeOwner"" [label=""changeOwner""];
""1022_getAmountContributed"" [label=""getAmountContributed""];
""1022_getAddressTwo"" [label=""getAddressTwo""];
""1022_acceptContribution"" [label=""acceptContribution""];
""1022_getOccupation"" [label=""getOccupation""];
""1022_CampaignContract"" [label=""CampaignContract""];
""1022_getAmountAttempted"" [label=""getAmountAttempted""];
""1022_getPhone"" [label=""getPhone""];
""1022_getPotentialAmount"" [label=""getPotentialAmount""];
""1022_killContract"" [label=""killContract""];
""1022_rejectContribution"" [label=""rejectContribution""];
""1022_getAddressOne"" [label=""getAddressOne""];
""1022_withdrawToWallet"" [label=""withdrawToWallet""];
""1022_contribute"" [label=""contribute""];
""1022_resetKYC"" [label=""resetKYC""];
""1022_verifyKYC"" [label=""verifyKYC""];
""1022_withdrawContribution"" [label=""withdrawContribution""];
""1022_changeLimits"" [label=""changeLimits""];
""1022_retrieveAssets"" -> ""1022_onlyOwner"";
""1022_changeLimits"" -> ""1022_onlyOwner"";
""1022_rejectContribution"" -> ""1022_onlyOwner"";
""1022_withdrawToWallet"" -> ""1022_onlyOwner"";
""1022_acceptContribution"" -> ""1022_onlyOwner"";
""1022_killContract"" -> ""1022_onlyOwner"";
""1022_resetKYC"" -> ""1022_hasKYCInfo"";
""1022_resetKYC"" -> ""1022_onlyOwner"";
""1022_acceptContribution"" -> ""1022_hasKYCInfo"";
""1022_withdrawContribution"" -> ""1022_hasKYCInfo"";
""1022_contribute"" -> ""1022_hasKYCInfo"";
""1022_changeOwner"" -> ""1022_onlyOwner"";
}
"
0x1d899280f446aab65971e41611b5bb5516dd47f9.sol,CryptoMiningWar,contract CryptoMiningWar is PullPayment { bool public initialized = false; uint256 public roundNumber = 0; uint256 public deadline; uint256 public CRTSTAL_MINING_PERIOD = 86400; uint256 public HALF_TIME = 8 hours; uint256 public ROUND_TIME = 86400 * 7; uint256 public prizePool = 0; uint256 BASE_PRICE = 0.005 ether; uint256 RANK_LIST_LIMIT = 10000; uint256 public totalMiniGame = 0; uint256 private numberOfMiners = 8; uint256 private numberOfBoosts = 5; uint256 private numberOfRank = 21; CryptoEngineerInterface public Engineer; mapping(uint256 => address) public miniGameAddress; mapping(uint256 => MinerData) private minerData; mapping(address => Player) public players; mapping(address => uint256) public boosterReward; mapping(uint256 => BoostData) private boostData; mapping(address => bool) public miniGames; address[21] rankList; address public administrator; struct Player { uint256 roundNumber; mapping(uint256 => uint256) minerCount; uint256 hashrate; uint256 crystals; uint256 lastUpdateTime; },1,"subgraph cluster_2761_CryptoMiningWar {
label=""CryptoMiningWar"";
""2761_buyBooster"" [label=""buyBooster""];
""2761_upgrade"" [label=""upgrade""];
""2761_lottery"" [label=""lottery""];
""2761_subHashrate"" [label=""subHashrate""];
""2761_admin"" [label=""admin""];
""2761_updateRankList"" [label=""updateRankList""];
""2761_getPlayerData"" [label=""getPlayerData""];
""2761_getHashratePerDay"" [label=""getHashratePerDay""];
""2761_getBoosterPrice"" [label=""getBoosterPrice""];
""2761_initMinerData"" [label=""initMinerData""];
""2761_getBalance"" [label=""getBalance""];
""2761_addHashrate"" [label=""addHashrate""];
""2761_startNewRound"" [label=""startNewRound""];
""2761_removeContractMiniGame"" [label=""removeContractMiniGame""];
""2761_updateCrystal"" [label=""updateCrystal""];
""2761_hasBooster"" [label=""hasBooster""];
""2761_isMiningWarContract"" [label=""isMiningWarContract""];
""2761_getBoosterData"" [label=""getBoosterData""];
""2761_setRoundNumber"" [label=""setRoundNumber""];
""2761_buyMiner"" [label=""buyMiner""];
""2761_calCurrentCrystals"" [label=""calCurrentCrystals""];
""2761_setContractsMiniGame"" [label=""setContractsMiniGame""];
""2761_initBoostData"" [label=""initBoostData""];
""2761_startGame"" [label=""startGame""];
""2761_updateHashrate"" [label=""updateHashrate""];
""2761_constructor"" [label=""constructor""];
""2761_withdrawReward"" [label=""withdrawReward""];
""2761_getCurrentPrice"" [label=""getCurrentPrice""];
""2761_addMiner"" [label=""addMiner""];
""2761_getCurrentReward"" [label=""getCurrentReward""];
""2761_setEngineerInterface"" [label=""setEngineerInterface""];
""2761_quickSort"" [label=""quickSort""];
""2761_getFreeMiner"" [label=""getFreeMiner""];
""2761_fallback"" [label=""fallback""];
""2761_getFreeMinerForMiniGame"" [label=""getFreeMinerForMiniGame""];
""2761_getCurrentLevel"" [label=""getCurrentLevel""];
""2761_devFee"" [label=""devFee""];
""2761_inRankList"" [label=""inRankList""];
""2761_addCrystal"" [label=""addCrystal""];
""2761_subCrystal"" [label=""subCrystal""];
""2761_getData"" [label=""getData""];
""2761_getRankList"" [label=""getRankList""];
""2761_setupMiniGame"" [label=""setupMiniGame""];
""2761_buyMiner"" -> ""2761_isNotOver"";
""2761_addMiner"" -> ""2761_isAdministrator"";
""2761_subHashrate"" -> ""2761_onlyContractsMiniGame"";
""2761_startNewRound"" -> ""2761_setupMiniGame"";
""2761_subCrystal"" -> ""2761_updateCrystal"";
""2761_buyBooster"" -> ""2761_isCurrentRound"";
""2761_subCrystal"" -> ""2761_isNotOver"";
""2761_setContractsMiniGame"" -> ""2761_isAdministrator"";
""2761_startGame"" -> ""2761_startNewRound"";
""2761_setEngineerInterface"" -> ""2761_isAdministrator"";
""2761_lottery"" -> ""2761_disableContract"";
""2761_addHashrate"" -> ""2761_isCurrentRound"";
""2761_addCrystal"" -> ""2761_isCurrentRound"";
""2761_getData"" -> ""2761_calCurrentCrystals"";
""2761_constructor"" -> ""2761_initMinerData"";
""2761_buyBooster"" -> ""2761_updateCrystal"";
""2761_updateRankList"" -> ""2761_quickSort"";
""2761_getBoosterData"" -> ""2761_getBoosterPrice"";
""2761_addMiner"" -> ""2761_updateHashrate"";
""2761_getFreeMiner"" -> ""2761_disableContract"";
""2761_updateRankList"" -> ""2761_inRankList"";
""2761_getPlayerData"" -> ""2761_hasBooster"";
""2761_getHashratePerDay"" -> ""2761_hasBooster"";
""2761_updateCrystal"" -> ""2761_calCurrentCrystals"";
""2761_addHashrate"" -> ""2761_isNotOver"";
""2761_getFreeMinerForMiniGame"" -> ""2761_isNotOver"";
""2761_startGame"" -> ""2761_isAdministrator"";
""2761_buyBooster"" -> ""2761_getBoosterPrice"";
""2761_upgrade"" -> ""2761_isAdministrator"";
""2761_addHashrate"" -> ""2761_onlyContractsMiniGame"";
""2761_buyMiner"" -> ""2761_updateHashrate"";
""2761_subHashrate"" -> ""2761_isNotOver"";
""2761_buyMiner"" -> ""2761_isCurrentRound"";
""2761_buyBooster"" -> ""2761_isNotOver"";
""2761_addMiner"" -> ""2761_isCurrentRound"";
""2761_quickSort"" -> ""2761_quickSort"";
""2761_getData"" -> ""2761_getPlayerData"";
""2761_addCrystal"" -> ""2761_onlyContractsMiniGame"";
""2761_buyBooster"" -> ""2761_devFee"";
""2761_lottery"" -> ""2761_startNewRound"";
""2761_addMiner"" -> ""2761_updateCrystal"";
""2761_subCrystal"" -> ""2761_isCurrentRound"";
""2761_addCrystal"" -> ""2761_isNotOver"";
""2761_getBoosterPrice"" -> ""2761_getCurrentPrice"";
""2761_getBoosterPrice"" -> ""2761_getCurrentLevel"";
""2761_updateHashrate"" -> ""2761_updateRankList"";
""2761_buyBooster"" -> ""2761_getCurrentLevel"";
""2761_subCrystal"" -> ""2761_onlyContractsMiniGame"";
""2761_getFreeMiner"" -> ""2761_isNotOver"";
""2761_removeContractMiniGame"" -> ""2761_isAdministrator"";
""2761_startNewRound"" -> ""2761_initBoostData"";
""2761_getFreeMinerForMiniGame"" -> ""2761_onlyContractsMiniGame"";
""2761_buyBooster"" -> ""2761_asyncSend"";
""2761_setRoundNumber"" -> ""2761_isAdministrator"";
""2761_buyMiner"" -> ""2761_updateCrystal"";
""2761_lottery"" -> ""2761_asyncSend"";
""2761_subHashrate"" -> ""2761_isCurrentRound"";
""2761_addMiner"" -> ""2761_isNotOver"";
""2761_calCurrentCrystals"" -> ""2761_getHashratePerDay"";
}
"
0xe01ba6c593003b0edcd43b7839a7c36b00a44dfc.sol,SBITokenCrowdsale,"contract SBITokenCrowdsale is Owned, CrowdsaleParameters { using SafeMath for uint256; string public name = ; SBIToken private token; address public bank; address saleWalletAddress; uint private tokenMultiplier = 10; uint public totalCollected = 0; uint public saleStartTimestamp; uint public saleStopTimestamp; uint public saleGoal; bool public goalReached = false; uint public preicoTokensPerEth = 27314; uint public tokensPerEth = 10500; mapping (address => uint256) private investmentRecords; address crowdsaleAddress = this; uint256 public constant saleStartDate = 1530403200; uint256 public constant saleEndDate = 1535759940; uint256 public constant preSaleStartDate = 1529020800; uint256 public constant preSaleEndDate = 1530403140; uint public preSaleAmount = 5800000; event TokenSale(address indexed tokenReceiver, uint indexed etherAmount, uint indexed tokenAmount, uint tokensPerEther); event FundTransfer(address indexed from, address indexed to, uint indexed amount); function SBITokenCrowdsale(address _tokenAddress, address _bankAddress) public { token = SBIToken(_tokenAddress); bank = _bankAddress; tokenMultiplier = tokenMultiplier ** token.decimals(); saleWalletAddress = generalSaleWallet.addr; saleGoal = generalSaleWallet.amount; }",1,"subgraph cluster_1145_SBITokenCrowdsale {
label=""SBITokenCrowdsale"";
""1145_processPayment"" [label=""processPayment""];
""1145_SBITokenCrowdsale"" [label=""SBITokenCrowdsale""];
""1145_isICOActive"" [label=""isICOActive""];
""1145_fallback"" [label=""fallback""];
""1145_setTokenRate"" [label=""setTokenRate""];
""1145_safeWithdrawal"" [label=""safeWithdrawal""];
""1145_kill"" [label=""kill""];
""1145_processPayment"" -> ""1145_isICOActive"";
""1145_kill"" -> ""1145_onlyOwner"";
""1145_fallback"" -> ""1145_processPayment"";
""1145_safeWithdrawal"" -> ""1145_onlyOwner"";
""1145_kill"" -> ""1145_isICOActive"";
""1145_setTokenRate"" -> ""1145_onlyOwner"";
}
"
0x7fceafdefc16b0f703a43ffb0451ddd2a7cbd6dc.sol,alfa_Quiz,contract alfa_Quiz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_147_alfa_Quiz {
label=""alfa_Quiz"";
""147_Start"" [label=""Start""];
""147_Try"" [label=""Try""];
""147_Stop"" [label=""Stop""];
""147_fallback"" [label=""fallback""];
""147_constructor"" [label=""constructor""];
""147_New"" [label=""New""];
""147_New"" -> ""147_isAdmin"";
""147_Start"" -> ""147_isAdmin"";
""147_Stop"" -> ""147_isAdmin"";
}
"
0x2873f3dfa8b9cdcda9b619b0c3a62c2cd9daf5c5.sol,Lottery,"contract Lottery { using SafeMath for *; address public owner_; uint256 public investmentBalance_; uint256 public developerBalance_; uint256 public topBonus500Balance_; uint256 public jackpotSplit = 50; uint256 public nextJackpotSplit = 15; uint256 public bonus500Split = 5; uint256 public investorDividendSplit = 10; uint256 public developerDividendSplit = 10; uint256 public referrerDividendSplit = 10; uint256[6] public jpSplit_ = [0, 50, 25, 12, 8, 5]; uint256 public rID_; uint256 public jackpotBalance_; uint256 public jackpotNextBalance_; uint256 public jackpotLeftBalance_; uint256 public kID_; struct Key { uint key; uint tID; uint pID; }",1,"subgraph cluster_2018_Lottery {
label=""Lottery"";
""2018_getPlayerID"" [label=""getPlayerID""];
""2018_buyAKeyWithAmount"" [label=""buyAKeyWithAmount""];
""2018_addBalance"" [label=""addBalance""];
""2018_showJackpotNextRd"" [label=""showJackpotNextRd""];
""2018_showDevBalance"" [label=""showDevBalance""];
""2018_getPlayerReferrerID"" [label=""getPlayerReferrerID""];
""2018_updateJackpotLeft"" [label=""updateJackpotLeft""];
""2018_gameDestroy"" [label=""gameDestroy""];
""2018_updatePlayedNum"" [label=""updatePlayedNum""];
""2018_determinReferrer"" [label=""determinReferrer""];
""2018_showKeys"" [label=""showKeys""];
""2018_getPlayerHistories"" [label=""getPlayerHistories""];
""2018_changePrizeSplits"" [label=""changePrizeSplits""];
""2018_subAccountBalance"" [label=""subAccountBalance""];
""2018_changeOwner"" [label=""changeOwner""];
""2018_pay"" [label=""pay""];
""2018_roundStart"" [label=""roundStart""];
""2018_showRdWonNum"" [label=""showRdWonNum""];
""2018_getTeamPlayersNum"" [label=""getTeamPlayersNum""];
""2018_updateKeyPrice"" [label=""updateKeyPrice""];
""2018_roundEnd"" [label=""roundEnd""];
""2018_updateWonNums"" [label=""updateWonNums""];
""2018_showJackpotThisRd"" [label=""showJackpotThisRd""];
""2018_getPlayerAccountBalance"" [label=""getPlayerAccountBalance""];
""2018_addRefBalance"" [label=""addRefBalance""];
""2018_showInvestBalance"" [label=""showInvestBalance""];
""2018_showTopBonusBalance"" [label=""showTopBonusBalance""];
""2018_createPlayer"" [label=""createPlayer""];
""2018_getReferrerAddr"" [label=""getReferrerAddr""];
""2018_transferDividendBalance"" [label=""transferDividendBalance""];
""2018_getPlayerPlayedTimes"" [label=""getPlayerPlayedTimes""];
""2018_withdrawBalance"" [label=""withdrawBalance""];
""2018_transferDevBalance"" [label=""transferDevBalance""];
""2018_showTopsPlayer"" [label=""showTopsPlayer""];
""2018_constructor"" [label=""constructor""];
""2018_showRoundNum"" [label=""showRoundNum""];
""2018_changeIncomesSplits"" [label=""changeIncomesSplits""];
""2018_buyAKeyWithDeposit"" [label=""buyAKeyWithDeposit""];
""2018_gameDestroy"" -> ""2018_pay"";
""2018_buyAKeyWithAmount"" -> ""2018_determinReferrer"";
""2018_buyAKeyWithAmount"" -> ""2018_getPlayerAccountBalance"";
""2018_getReferrerAddr"" -> ""2018_getPlayerID"";
""2018_roundStart"" -> ""2018_onlyOwner"";
""2018_transferDevBalance"" -> ""2018_pay"";
""2018_buyAKeyWithDeposit"" -> ""2018_determinReferrer"";
""2018_addBalance"" -> ""2018_getPlayerPlayedTimes"";
""2018_changeIncomesSplits"" -> ""2018_onlyOwner"";
""2018_transferDevBalance"" -> ""2018_onlyOwner"";
""2018_buyAKeyWithAmount"" -> ""2018_addRefBalance"";
""2018_addBalance"" -> ""2018_onlyOwner"";
""2018_determinReferrer"" -> ""2018_getPlayerID"";
""2018_getPlayerAccountBalance"" -> ""2018_getPlayerID"";
""2018_buyAKeyWithAmount"" -> ""2018_subAccountBalance"";
""2018_buyAKeyWithDeposit"" -> ""2018_pay"";
""2018_buyAKeyWithAmount"" -> ""2018_updatePlayedNum"";
""2018_getReferrerAddr"" -> ""2018_determinReferrer"";
""2018_updatePlayedNum"" -> ""2018_getPlayerID"";
""2018_buyAKeyWithDeposit"" -> ""2018_updatePlayedNum"";
""2018_withdrawBalance"" -> ""2018_pay"";
""2018_changePrizeSplits"" -> ""2018_onlyOwner"";
""2018_createPlayer"" -> ""2018_getPlayerPlayedTimes"";
""2018_subAccountBalance"" -> ""2018_getPlayerID"";
""2018_transferDividendBalance"" -> ""2018_pay"";
""2018_updateWonNums"" -> ""2018_onlyOwner"";
""2018_getPlayerHistories"" -> ""2018_getPlayerID"";
""2018_transferDividendBalance"" -> ""2018_onlyOwner"";
""2018_buyAKeyWithDeposit"" -> ""2018_addRefBalance"";
""2018_updateKeyPrice"" -> ""2018_onlyOwner"";
""2018_updatePlayedNum"" -> ""2018_createPlayer"";
""2018_determinReferrer"" -> ""2018_getPlayerPlayedTimes"";
""2018_createPlayer"" -> ""2018_getPlayerID"";
""2018_changeOwner"" -> ""2018_onlyOwner"";
""2018_gameDestroy"" -> ""2018_onlyOwner"";
""2018_updateJackpotLeft"" -> ""2018_onlyOwner"";
""2018_withdrawBalance"" -> ""2018_getPlayerID"";
""2018_addRefBalance"" -> ""2018_getPlayerID"";
""2018_roundEnd"" -> ""2018_onlyOwner"";
}
"
0x1da73fc09ea07781482994036a0eecc7e6952dfb.sol,TydoIco,"contract TydoIco is Owned { using SafeMath for uint256; uint256 public constant COINS_PER_ETH = 12000; mapping (address => uint256) public balances; mapping (address => uint256) ethBalances; uint256 public ethCollected; uint256 public tokenSold; uint256 constant tokenDecMult = 1 ether; uint8 public state = 0; uint256[] public bonuses; uint256[] public bonusEnds; AbstractERC20 public token; event SaleStart(); event SaleClosedSuccess(uint256 _tokenSold); event SaleClosedFail(uint256 _tokenSold); constructor(address _coinToken, uint256[] _bonuses, uint256[] _bonusEnds) Owned() public { require(_bonuses.length == _bonusEnds.length); for(uint8 i = 0; i < _bonuses.length; i++) { require(_bonuses[i] > 0); if (i > 0) { }",1,"subgraph cluster_749_TydoIco {
label=""TydoIco"";
""749_closeFail"" [label=""closeFail""];
""749_fallback"" [label=""fallback""];
""749_withdrawTokens"" [label=""withdrawTokens""];
""749_canBuy"" [label=""canBuy""];
""749_withdraw"" [label=""withdraw""];
""749_refund"" [label=""refund""];
""749_addBonus"" [label=""addBonus""];
""749_constructor"" [label=""constructor""];
""749_buy"" [label=""buy""];
""749_open"" [label=""open""];
""749_getBonus"" [label=""getBonus""];
""749_closeSuccess"" [label=""closeSuccess""];
""749_tokensLeft"" [label=""tokensLeft""];
""749_closeFail"" -> ""749_ownerOnly"";
""749_closeSuccess"" -> ""749_ownerOnly"";
""749_withdraw"" -> ""749_ownerOnly"";
""749_constructor"" -> ""749_constructor"";
""749_buy"" -> ""749_canBuy"";
""749_fallback"" -> ""749_buy"";
""749_buy"" -> ""749_addBonus"";
""749_addBonus"" -> ""749_getBonus"";
""749_fallback"" -> ""749_withdrawTokens"";
""749_fallback"" -> ""749_refund"";
""749_open"" -> ""749_ownerOnly"";
}
"
0x50f37df80a4e804a03275b21f83ebf5d5a668d39.sol,AuctionPotato,"contract AuctionPotato is Ownable { using SafeMath for uint256; string name; uint public startTime; uint public endTime; uint auctionDuration; uint public potato; uint oldPotato; uint oldHighestBindingBid; bool public canceled; uint public highestBindingBid; address public highestBidder; bool blockerPay; bool blockerWithdraw; mapping(address => uint256) public fundsByBidder; bool ownerHasWithdrawn; event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid); event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount); event LogCanceled(); event Withdraw(address owner, uint amount); constructor() public { blockerWithdraw = false; blockerPay = false; highestBindingBid = 3000000000000000; potato = 0; auctionDuration = 3 hours; startTime = 1546794000; endTime = startTime + auctionDuration; name = ; }",1,"subgraph cluster_620_AuctionPotato {
label=""AuctionPotato"";
""620_withdraw"" [label=""withdraw""];
""620_nextNextBid"" [label=""nextNextBid""];
""620_setStartTime"" [label=""setStartTime""];
""620_nextBid"" [label=""nextBid""];
""620_queryAuction"" [label=""queryAuction""];
""620_constructor"" [label=""constructor""];
""620_balance"" [label=""balance""];
""620_cancelAuction"" [label=""cancelAuction""];
""620_placeBid"" [label=""placeBid""];
""620_withdraw"" -> ""620_onlyOwner"";
""620_cancelAuction"" -> ""620_onlyBeforeEnd"";
""620_placeBid"" -> ""620_onlyAfterStart"";
""620_queryAuction"" -> ""620_nextBid"";
""620_cancelAuction"" -> ""620_onlyNotCanceled"";
""620_placeBid"" -> ""620_onlyNotCanceled"";
""620_setStartTime"" -> ""620_onlyOwner"";
""620_cancelAuction"" -> ""620_onlyOwner"";
""620_placeBid"" -> ""620_onlyBeforeEnd"";
}
"
0x56d06701fd44a4a857cb96b266f505a2832950c5.sol,Child,contract Child is Base { Main g_Main; constructor(Main main) public { require(main != address(0)); g_Main = main; g_Main.SetAuth(this); },1,"subgraph cluster_4048_Child {
label=""Child"";
""4048_constructor"" [label=""constructor""];
""4048_GenRandom"" [label=""GenRandom""];
""4048_kill"" [label=""kill""];
""4048_AddBonus"" [label=""AddBonus""];
""4048_kill"" -> ""4048_CreatorAble"";
}
"
0x18aaad578e74913df4255c126f2a0bd9e3399ec7.sol,test_contract,contract test_contract { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_test_contract {
label=""test_contract"";
""143_fallback"" [label=""fallback""];
""143_NewQuestion"" [label=""NewQuestion""];
""143_StopGame"" [label=""StopGame""];
""143_ActivateContract"" [label=""ActivateContract""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
}
"
0xd1ceeee3ecfff60d9532c37c9d24f68ca0e96453.sol,Dice2Win,contract Dice2Win { uint constant JACKPOT_MODULO = 1000; uint constant HOUSE_EDGE_PERCENT = 2; uint constant JACKPOT_FEE_PERCENT = 50; uint constant MIN_BET = 0.01 ether; uint constant MAX_AMOUNT = 300000 ether; uint constant MIN_JACKPOT_BET = 0.1 ether; uint constant MAX_MODULO = 100; uint constant MAX_MASK_MODULO = 40; uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO; uint constant BET_EXPIRATION_BLOCKS = 250; address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; address public owner; address private nextOwner; uint public maxProfit; address public secretSigner; uint128 public jackpotSize; uint128 public lockedInBets; struct Bet { uint amount; uint8 modulo; uint8 rollUnder; uint40 placeBlockNumber; uint40 mask; address gambler; },1,"subgraph cluster_1266_Dice2Win {
label=""Dice2Win"";
""1266_kill"" [label=""kill""];
""1266_constructor"" [label=""constructor""];
""1266_placeBet"" [label=""placeBet""];
""1266_fallback"" [label=""fallback""];
""1266_refundBet"" [label=""refundBet""];
""1266_sendFunds"" [label=""sendFunds""];
""1266_clearStorage"" [label=""clearStorage""];
""1266_acceptNextOwner"" [label=""acceptNextOwner""];
""1266_withdrawFunds"" [label=""withdrawFunds""];
""1266_clearProcessedBet"" [label=""clearProcessedBet""];
""1266_setMaxProfit"" [label=""setMaxProfit""];
""1266_approveNextOwner"" [label=""approveNextOwner""];
""1266_settleBet"" [label=""settleBet""];
""1266_getJackpotFee"" [label=""getJackpotFee""];
""1266_getDiceWinAmount"" [label=""getDiceWinAmount""];
""1266_setSecretSigner"" [label=""setSecretSigner""];
""1266_increaseJackpot"" [label=""increaseJackpot""];
""1266_settleBet"" -> ""1266_clearProcessedBet"";
""1266_refundBet"" -> ""1266_getDiceWinAmount"";
""1266_withdrawFunds"" -> ""1266_onlyOwner"";
""1266_clearStorage"" -> ""1266_clearProcessedBet"";
""1266_withdrawFunds"" -> ""1266_sendFunds"";
""1266_increaseJackpot"" -> ""1266_onlyOwner"";
""1266_kill"" -> ""1266_onlyOwner"";
""1266_settleBet"" -> ""1266_sendFunds"";
""1266_setSecretSigner"" -> ""1266_onlyOwner"";
""1266_approveNextOwner"" -> ""1266_onlyOwner"";
""1266_placeBet"" -> ""1266_getDiceWinAmount"";
""1266_setMaxProfit"" -> ""1266_onlyOwner"";
""1266_refundBet"" -> ""1266_sendFunds"";
""1266_settleBet"" -> ""1266_getDiceWinAmount"";
""1266_placeBet"" -> ""1266_getJackpotFee"";
}
"
0x17f0badcdf99b0a94429478d2e9ddb1ff13174f7.sol,knf,"contract knf is StandardToken { string public name; string public symbol; uint8 public decimals; uint256 DropedThisWeek; uint256 lastWeek; uint256 decimate; uint256 weekly_limit; uint256 air_drop; mapping(address => uint256) airdroped; address control; address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); function availableSupply() public view returns (uint256) { return balances[owner]; }",1,"subgraph cluster_1093_knf {
label=""knf"";
""1093_transferBalance"" [label=""transferBalance""];
""1093_fallback"" [label=""fallback""];
""1093_Award"" [label=""Award""];
""1093_transfererc20"" [label=""transfererc20""];
""1093_RecordTransfer"" [label=""RecordTransfer""];
""1093_transferFrom"" [label=""transferFrom""];
""1093_thisweek"" [label=""thisweek""];
""1093_transfer"" [label=""transfer""];
""1093_changeName"" [label=""changeName""];
""1093_transferControl"" [label=""transferControl""];
""1093_balanceOf"" [label=""balanceOf""];
""1093_transferOwnership"" [label=""transferOwnership""];
""1093_availableSupply"" [label=""availableSupply""];
""1093_knf"" [label=""knf""];
""1093_destroy"" [label=""destroy""];
""1093_availableAirdrop"" [label=""availableAirdrop""];
""1093_knf"" -> ""1093_RecordTransfer"";
""1093_availableAirdrop"" -> ""1093_thisweek"";
""1093_Award"" -> ""1093_onlyControl"";
""1093_destroy"" -> ""1093_onlyControl"";
""1093_transferBalance"" -> ""1093_onlyControl"";
""1093_transferFrom"" -> ""1093_availableAirdrop"";
""1093_transferOwnership"" -> ""1093_onlyControl"";
""1093_RecordTransfer"" -> ""1093_thisweek"";
""1093_Award"" -> ""1093_RecordTransfer"";
""1093_transferControl"" -> ""1093_onlyControl"";
""1093_transfererc20"" -> ""1093_onlyControl"";
""1093_transferFrom"" -> ""1093_RecordTransfer"";
""1093_transfer"" -> ""1093_availableAirdrop"";
""1093_balanceOf"" -> ""1093_availableAirdrop"";
""1093_changeName"" -> ""1093_onlyControl"";
""1093_transfer"" -> ""1093_RecordTransfer"";
}
"
0x5838f878000fe44b6f6c677bbf839e12f097c147.sol,Q_GAME,contract Q_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_Q_GAME {
label=""Q_GAME"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_set_game"" [label=""set_game""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_Try"" [label=""Try""];
}
"
0x41a322b28d0ff354040e2cbc676f0320d8c8850d.sol,SupeRare,"contract SupeRare is ERC721Token, Ownable, ERC721Metadata { using SafeMath for uint256; uint256 public maintainerPercentage = 30; uint256 public creatorPercentage = 100; mapping(uint256 => address) private tokenBidder; mapping(uint256 => uint256) private tokenCurrentBid; mapping(uint256 => uint256) private tokenSalePrice; mapping(uint256 => address) private tokenCreator; mapping(uint256 => string) private tokenToURI; mapping(string => uint256) private uriOriginalToken; mapping(uint256 => bool) private tokenSold; mapping(address => bool) private creatorWhitelist; event WhitelistCreator(address indexed _creator); event Bid(address indexed _bidder, uint256 indexed _amount, uint256 indexed _tokenId); event AcceptBid(address indexed _bidder, address indexed _seller, uint256 _amount, uint256 indexed _tokenId); event CancelBid(address indexed _bidder, uint256 indexed _amount, uint256 indexed _tokenId); event Sold(address indexed _buyer, address indexed _seller, uint256 _amount, uint256 indexed _tokenId); event SalePriceSet(uint256 indexed _tokenId, uint256 indexed _price); modifier uniqueURI(string _uri) { require(uriOriginalToken[_uri] == 0); _; }",1,"subgraph cluster_1587_SupeRare {
label=""SupeRare"";
""1587_acceptBid"" [label=""acceptBid""];
""1587_returnCurrentBid"" [label=""returnCurrentBid""];
""1587_cancelBid"" [label=""cancelBid""];
""1587_buy"" [label=""buy""];
""1587_salePriceOfToken"" [label=""salePriceOfToken""];
""1587_symbol"" [label=""symbol""];
""1587_setSalePrice"" [label=""setSalePrice""];
""1587_transfer"" [label=""transfer""];
""1587_currentBidDetailsOfToken"" [label=""currentBidDetailsOfToken""];
""1587_clearBid"" [label=""clearBid""];
""1587_addNewToken"" [label=""addNewToken""];
""1587_payout"" [label=""payout""];
""1587_isWhitelisted"" [label=""isWhitelisted""];
""1587_isGreaterBid"" [label=""isGreaterBid""];
""1587_createToken"" [label=""createToken""];
""1587_addNewTokenWithEditions"" [label=""addNewTokenWithEditions""];
""1587_creatorOfToken"" [label=""creatorOfToken""];
""1587_tokenURI"" [label=""tokenURI""];
""1587_approve"" [label=""approve""];
""1587_bid"" [label=""bid""];
""1587_name"" [label=""name""];
""1587_whitelistCreator"" [label=""whitelistCreator""];
""1587_originalTokenOfUri"" [label=""originalTokenOfUri""];
""1587_setMaintainerPercentage"" [label=""setMaintainerPercentage""];
""1587_setCreatorPercentage"" [label=""setCreatorPercentage""];
""1587_setCreatorPercentage"" -> ""1587_onlyOwner"";
""1587_createToken"" -> ""1587_totalSupply"";
""1587_transfer"" -> ""1587_clearApprovalAndTransfer"";
""1587_addNewTokenWithEditions"" -> ""1587_onlyCreator"";
""1587_whitelistCreator"" -> ""1587_onlyOwner"";
""1587_tokenURI"" -> ""1587_ownerOf"";
""1587_bid"" -> ""1587_returnCurrentBid"";
""1587_setSalePrice"" -> ""1587_onlyOwnerOf"";
""1587_originalTokenOfUri"" -> ""1587_ownerOf"";
""1587_addNewToken"" -> ""1587_createToken"";
""1587_buy"" -> ""1587_clearBid"";
""1587_acceptBid"" -> ""1587_clearBid"";
""1587_acceptBid"" -> ""1587_ownerOf"";
""1587_cancelBid"" -> ""1587_clearBid"";
""1587_buy"" -> ""1587_ownerOf"";
""1587_bid"" -> ""1587_isGreaterBid"";
""1587_createToken"" -> ""1587__mint"";
""1587_acceptBid"" -> ""1587_onlyOwnerOf"";
""1587_addNewToken"" -> ""1587_uniqueURI"";
""1587_bid"" -> ""1587_notOwnerOf"";
""1587_buy"" -> ""1587_returnCurrentBid"";
""1587_acceptBid"" -> ""1587_payout"";
""1587_addNewTokenWithEditions"" -> ""1587_uniqueURI"";
""1587_buy"" -> ""1587_payout"";
""1587_setMaintainerPercentage"" -> ""1587_onlyOwner"";
""1587_addNewTokenWithEditions"" -> ""1587_createToken"";
""1587_addNewToken"" -> ""1587_onlyCreator"";
""1587_buy"" -> ""1587_notOwnerOf"";
""1587_acceptBid"" -> ""1587_clearApprovalAndTransfer"";
""1587_buy"" -> ""1587_clearApprovalAndTransfer"";
""1587_transfer"" -> ""1587_onlyOwnerOf"";
}
"
0x299187bb996599f7fc82df025ee8964cafe3085a.sol,Challenge,contract Challenge { address public owner; address public previous_owner; address public creator; bytes32 public flag_hash = 0xfa9b079005103147ac67299be9119fb4a47e29801f2d8d5025f36b248ce23695; function Challenge() public { owner = msg.sender; creator = msg.sender; },1,"subgraph cluster_142_Challenge {
label=""Challenge"";
""142_Challenge"" [label=""Challenge""];
""142_check_flag"" [label=""check_flag""];
""142_withdraw"" [label=""withdraw""];
""142_change_flag_hash"" [label=""change_flag_hash""];
}
"
0x1e85407e080a5e6d20a3a95fcdddfc32146fc8e5.sol,MiniMeToken,contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; },1,"subgraph cluster_1223_MiniMeToken {
label=""MiniMeToken"";
""1223_approve"" [label=""approve""];
""1223_createCloneToken"" [label=""createCloneToken""];
""1223_doApprove"" [label=""doApprove""];
""1223_isContract"" [label=""isContract""];
""1223_doTransfer"" [label=""doTransfer""];
""1223_destroyTokens"" [label=""destroyTokens""];
""1223_totalSupplyAt"" [label=""totalSupplyAt""];
""1223_constructor"" [label=""constructor""];
""1223_balanceOf"" [label=""balanceOf""];
""1223_updateValueAtNow"" [label=""updateValueAtNow""];
""1223_generateTokens"" [label=""generateTokens""];
""1223_balanceOfAt"" [label=""balanceOfAt""];
""1223_min"" [label=""min""];
""1223_claimTokens"" [label=""claimTokens""];
""1223_approveAndCall"" [label=""approveAndCall""];
""1223_transfer"" [label=""transfer""];
""1223_enableTransfers"" [label=""enableTransfers""];
""1223_allowance"" [label=""allowance""];
""1223_fallback"" [label=""fallback""];
""1223_transferFrom"" [label=""transferFrom""];
""1223_getValueAt"" [label=""getValueAt""];
""1223_totalSupply"" [label=""totalSupply""];
""1223_balanceOf"" -> ""1223_balanceOfAt"";
""1223_destroyTokens"" -> ""1223_updateValueAtNow"";
""1223_enableTransfers"" -> ""1223_onlyController"";
""1223_fallback"" -> ""1223_isContract"";
""1223_approveAndCall"" -> ""1223_approve"";
""1223_totalSupply"" -> ""1223_totalSupplyAt"";
""1223_destroyTokens"" -> ""1223_onlyController"";
""1223_claimTokens"" -> ""1223_onlyController"";
""1223_generateTokens"" -> ""1223_updateValueAtNow"";
""1223_doTransfer"" -> ""1223_balanceOfAt"";
""1223_destroyTokens"" -> ""1223_balanceOf"";
""1223_balanceOfAt"" -> ""1223_min"";
""1223_totalSupplyAt"" -> ""1223_min"";
""1223_doTransfer"" -> ""1223_isContract"";
""1223_transfer"" -> ""1223_doTransfer"";
""1223_generateTokens"" -> ""1223_balanceOf"";
""1223_generateTokens"" -> ""1223_totalSupply"";
""1223_destroyTokens"" -> ""1223_totalSupply"";
""1223_generateTokens"" -> ""1223_onlyController"";
""1223_doApprove"" -> ""1223_isContract"";
""1223_balanceOfAt"" -> ""1223_getValueAt"";
""1223_approve"" -> ""1223_doApprove"";
""1223_doTransfer"" -> ""1223_updateValueAtNow"";
""1223_transferFrom"" -> ""1223_doTransfer"";
""1223_totalSupplyAt"" -> ""1223_getValueAt"";
}
"
0x1db9cf016fe7ce4d9f4ba2d8fd2834e72d43198c.sol,LUNO,"contract LUNO is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 35 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 750000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 1000000e8; uint public target0drop = 500000; uint public progress0drop = 0; address multisig = 0xCf7Ac628f8A0fa38059BF77b0134efaD8bF329A3; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_LUNO {
label=""LUNO"";
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_Distribute"" [label=""Distribute""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_constructor"" [label=""constructor""];
""1261_getTokens"" [label=""getTokens""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_distr"" [label=""distr""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_allowance"" [label=""allowance""];
""1261_burn"" [label=""burn""];
""1261_add"" [label=""add""];
""1261_withdraw"" [label=""withdraw""];
""1261_approve"" [label=""approve""];
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_Distribute"" -> ""1261_onlyOwner"";
}
"
0xaa3fbfaf03cd50e6a44d27d10eb14333d1c02e52.sol,ETH_GAME,contract ETH_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETH_GAME {
label=""ETH_GAME"";
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0x6cd3409ec07e5aa64baaeb08c6a038f30e831090.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_180_Destructible {
label=""Destructible"";
""180_destroyAndSend"" [label=""destroyAndSend""];
""180_Destructible"" [label=""Destructible""];
""180_destroy"" [label=""destroy""];
""180_destroy"" -> ""180_onlyOwner"";
""180_destroyAndSend"" -> ""180_onlyOwner"";
}
"
0xee58ee0b1519bb47801812a3a9c83ab600c63d81.sol,Destructible,contract Destructible is Ownable { function Destructible() public payable { },1,"subgraph cluster_645_SafeDestructible {
label=""SafeDestructible"";
""645_destroy"" [label=""destroy""];
""645_destroy"" -> ""645_onlyOwner"";
}
"
0x3686986e559f257cfaccb44f17af5b245e45814f.sol,ZEROtoken,contract ZEROtoken { address owner = msg.sender; bool public purchasingAllowed = false; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalContribution = 0; uint256 public totalSupply = 0; function name() constant returns (string) { return ; },1,"subgraph cluster_524_ZEROtoken {
label=""ZEROtoken"";
""524_balanceOf"" [label=""balanceOf""];
""524_transferFrom"" [label=""transferFrom""];
""524_fallback"" [label=""fallback""];
""524_transfer"" [label=""transfer""];
""524_getStats"" [label=""getStats""];
""524_approve"" [label=""approve""];
""524_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""524_decimals"" [label=""decimals""];
""524_disablePurchasing"" [label=""disablePurchasing""];
""524_enablePurchasing"" [label=""enablePurchasing""];
""524_allowance"" [label=""allowance""];
""524_kill"" [label=""kill""];
""524_name"" [label=""name""];
""524_symbol"" [label=""symbol""];
}
"
0x5c3536c7cd64c3bcb6ea01c00c2919bcd5053aba.sol,BlastBox,"contract BlastBox is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 10; uint public deadline = now + 15 * 1 days; uint public round2 = now + 15 * 1 days; uint public round1 = now + 1 * 1 days; uint256 public totalSupply = 275000e10; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 5000e10; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0x9d4C38355d267C567ca431BCb8585cC010aF1ED0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_BlastBox {
label=""BlastBox"";
""1263_withdraw"" [label=""withdraw""];
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_add"" [label=""add""];
""1263_approve"" [label=""approve""];
""1263_distr"" [label=""distr""];
""1263_burn"" [label=""burn""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_transfer"" [label=""transfer""];
""1263_fallback"" [label=""fallback""];
""1263_getTokens"" [label=""getTokens""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_Distribute"" [label=""Distribute""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_constructor"" [label=""constructor""];
""1263_allowance"" [label=""allowance""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_fallback"" -> ""1263_getTokens"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_constructor"" -> ""1263_distr"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_getTokens"" -> ""1263_distr"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_distr"" -> ""1263_canDistr"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
}
"
0xd587cb111d3e506ffafdf4b1c5d19008086c4e5a.sol,IartistChain,"contract IartistChain is owned, TokenERC20 { uint256 INITIAL_SUPPLY =500000000; uint256 public buyPrice = 1; event FrozenFunds(address target, bool frozen); function IartistChain(uint256 initialSupply, string tokenName, string tokenSymbol) TokenERC20(INITIAL_SUPPLY, , ) payable { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_572_IartistChain {
label=""IartistChain"";
""572__transfer"" [label=""_transfer""];
""572_IartistChain"" [label=""IartistChain""];
""572_selfdestructs"" [label=""selfdestructs""];
""572_fallback"" [label=""fallback""];
""572_setPrices"" [label=""setPrices""];
""572_buy"" [label=""buy""];
""572_buy"" -> ""572__transfer"";
""572_selfdestructs"" -> ""572_onlyOwner"";
""572_IartistChain"" -> ""572_TokenERC20"";
""572_setPrices"" -> ""572_onlyOwner"";
""572_fallback"" -> ""572__transfer"";
}
"
0xa41aa09607ca80ee60d2ce166d4c02a71860e5c5.sol,XTVToken,"contract XTVToken is XTVNetworkGuard, ERC20Token { using SafeMath for uint256; string public name = ; string public symbol = ; uint public decimals = 18; address public fullfillTeamAddress; address public fullfillFounder; address public fullfillAdvisors; address public XTVNetworkContractAddress; bool public airdropActive; uint public startTime; uint public endTime; uint public XTVAirDropped; uint public XTVBurned; mapping(address => bool) public claimed; uint256 public constant INITIAL_SUPPLY = 500000000; uint256 public constant EXPECTED_TOTAL_SUPPLY = 1000000000; uint256 private constant TOKEN_MULTIPLIER = 1000000; uint256 public constant ALLOC_TEAM = 330 * TOKEN_MULTIPLIER; uint256 public constant ALLOC_ADVISORS = 70 * TOKEN_MULTIPLIER; uint256 public constant ALLOC_FOUNDER = 100 * TOKEN_MULTIPLIER; uint256 public constant ALLOC_AIRDROP = 500 * TOKEN_MULTIPLIER; uint256 public constant AIRDROP_CLAIM_AMMOUNT = 500; modifier isAirdropActive() { require(airdropActive); _; }",1,"subgraph cluster_1242_XTVToken {
label=""XTVToken"";
""1242_drain"" [label=""drain""];
""1242_constructor"" [label=""constructor""];
""1242_setXTVNetworkEndorser"" [label=""setXTVNetworkEndorser""];
""1242_burnTokens"" [label=""burnTokens""];
""1242_setXTVNetworkContractAddress"" [label=""setXTVNetworkContractAddress""];
""1242_claim"" [label=""claim""];
""1242_setXTVTokenAirdropStatus"" [label=""setXTVTokenAirdropStatus""];
""1242_setXTVTokenAirdropStatus"" -> ""1242_onlyOwner"";
""1242_drain"" -> ""1242_onlyOwner"";
""1242_setXTVNetworkEndorser"" -> ""1242_onlyOwner"";
""1242_setXTVNetworkContractAddress"" -> ""1242_onlyOwner"";
""1242_claim"" -> ""1242_isAirdropActive"";
""1242_claim"" -> ""1242_validateSignature"";
""1242_claim"" -> ""1242_canClaimTokens"";
}
"
0x5a6dcd18e7e8e7844a8cbb02390c3392e165036a.sol,RubikProtocol,"contract RubikProtocol is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 40 * 1 days; uint public round2 = now + 20 * 1 days; uint public round1 = now + 15 * 1 days; uint256 public totalSupply = 10000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000000e8; uint public target0drop = 40000; uint public progress0drop = 0; address multisig = 0x460BE721deB36B617DE80Fe116938662d10ac7aA; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_RubikProtocol {
label=""RubikProtocol"";
""1261_balanceOf"" [label=""balanceOf""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_add"" [label=""add""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_fallback"" [label=""fallback""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_distr"" [label=""distr""];
""1261_transfer"" [label=""transfer""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_constructor"" [label=""constructor""];
""1261_approve"" [label=""approve""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_withdraw"" [label=""withdraw""];
""1261_burn"" [label=""burn""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_allowance"" [label=""allowance""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_getTokens"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_distr"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
}
"
0x52629dd14923d9f60deafdd373ff6e1145866f09.sol,LandGrabToken,"contract LandGrabToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public cityIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public cityIndexToApproved; mapping (uint256 => uint256) private cityIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct City { string name; }",1,"subgraph cluster_975_LandGrabToken {
label=""LandGrabToken"";
""975_setCOO"" [label=""setCOO""];
""975_createPromoCity"" [label=""createPromoCity""];
""975__addressNotNull"" [label=""_addressNotNull""];
""975__owns"" [label=""_owns""];
""975_takeOwnership"" [label=""takeOwnership""];
""975__createCity"" [label=""_createCity""];
""975_getCity"" [label=""getCity""];
""975_transfer"" [label=""transfer""];
""975_implementsERC721"" [label=""implementsERC721""];
""975_payout"" [label=""payout""];
""975__payout"" [label=""_payout""];
""975_createContractCity"" [label=""createContractCity""];
""975_transferFrom"" [label=""transferFrom""];
""975_purchase"" [label=""purchase""];
""975_ownerOf"" [label=""ownerOf""];
""975_name"" [label=""name""];
""975_balanceOf"" [label=""balanceOf""];
""975__approved"" [label=""_approved""];
""975__transfer"" [label=""_transfer""];
""975_totalSupply"" [label=""totalSupply""];
""975_LandGrabToken"" [label=""LandGrabToken""];
""975_setCEO"" [label=""setCEO""];
""975_priceOf"" [label=""priceOf""];
""975_symbol"" [label=""symbol""];
""975_tokensOfOwner"" [label=""tokensOfOwner""];
""975_approve"" [label=""approve""];
""975_payout"" -> ""975__payout"";
""975_takeOwnership"" -> ""975__addressNotNull"";
""975_payout"" -> ""975_onlyCLevel"";
""975_takeOwnership"" -> ""975__approved"";
""975_transfer"" -> ""975__addressNotNull"";
""975_takeOwnership"" -> ""975__transfer"";
""975_setCEO"" -> ""975_onlyCEO"";
""975_createContractCity"" -> ""975_onlyCOO"";
""975_tokensOfOwner"" -> ""975_totalSupply"";
""975_transferFrom"" -> ""975__transfer"";
""975_transferFrom"" -> ""975__owns"";
""975_createPromoCity"" -> ""975_onlyCOO"";
""975_approve"" -> ""975__owns"";
""975_purchase"" -> ""975__addressNotNull"";
""975__createCity"" -> ""975__transfer"";
""975_purchase"" -> ""975__transfer"";
""975_setCOO"" -> ""975_onlyCEO"";
""975_transferFrom"" -> ""975__addressNotNull"";
""975_transferFrom"" -> ""975__approved"";
""975_createContractCity"" -> ""975__createCity"";
""975_tokensOfOwner"" -> ""975_balanceOf"";
""975_createPromoCity"" -> ""975__createCity"";
""975_transfer"" -> ""975__transfer"";
""975_transfer"" -> ""975__owns"";
}
"
0x6ace03f517ae15f1a8d1b6811d23f7aa8c295be0.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_342_RefundVault {
label=""RefundVault"";
""342_enableRefunds"" [label=""enableRefunds""];
""342_refund"" [label=""refund""];
""342_constructor"" [label=""constructor""];
""342_close"" [label=""close""];
""342_deposit"" [label=""deposit""];
""342_enableRefunds"" -> ""342_onlyOwner"";
""342_deposit"" -> ""342_onlyOwner"";
""342_close"" -> ""342_onlyOwner"";
}
"
0xdfa66ec49cf0102fb8906ee3dd6a70597d9720d4.sol,DEKS,"contract DEKS is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 45 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 500000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 10000e8; uint public target0drop = 12000; uint public progress0drop = 0; address multisig = 0xae4B0D603B563A3b26a585e5cF43f1Fb6f75295C; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_DEKS {
label=""DEKS"";
""1261_getTokens"" [label=""getTokens""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_burn"" [label=""burn""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_add"" [label=""add""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_transfer"" [label=""transfer""];
""1261_fallback"" [label=""fallback""];
""1261_approve"" [label=""approve""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_constructor"" [label=""constructor""];
""1261_withdraw"" [label=""withdraw""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_allowance"" [label=""allowance""];
""1261_distr"" [label=""distr""];
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
}
"
0xee1f0f9731ee93736e219598e6aa441ad36ffc61.sol,ENIGMA,contract ENIGMA { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_ENIGMA {
label=""ENIGMA"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_Try"" [label=""Try""];
""132_StopGame"" [label=""StopGame""];
""132_set_game"" [label=""set_game""];
""132_fallback"" [label=""fallback""];
}
"
0x345ab5e5f971dbdbc92af2779ce7a8bbf1819e59.sol,TwentyDollars,contract TwentyDollars { struct Bid { address owner; uint256 amount; },1,"subgraph cluster_262_TwentyDollars {
label=""TwentyDollars"";
""262_winnerWithdraw"" [label=""winnerWithdraw""];
""262_biddingClosed"" [label=""biddingClosed""];
""262_ownerWithdraw"" [label=""ownerWithdraw""];
""262_getMyBalance"" [label=""getMyBalance""];
""262_constructor"" [label=""constructor""];
""262_getContractBalance"" [label=""getContractBalance""];
""262_bid"" [label=""bid""];
""262_withdraw"" [label=""withdraw""];
""262_fallback"" [label=""fallback""];
""262_ownerWithdraw"" -> ""262_onlyOwner"";
""262_winnerWithdraw"" -> ""262_onlyHighestBidder"";
""262_bid"" -> ""262_onlyBiddingOpen"";
""262_ownerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_winnerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_ownerWithdraw"" -> ""262_getContractBalance"";
""262_fallback"" -> ""262_bid"";
}
"
0xa28b5854df048bcd5eec522fada1c6b7ea006aae.sol,FIREDICE,"contract FIREDICE is Mortal, usingNRE{ uint minBet = 1000000000000000; event Roll(bool _won, uint256 _dice1, uint256 _dice2, uint256 _roll1, uint256 _roll2, uint _amount); constructor() payable public {}",1,"subgraph cluster_607_FIREDICE {
label=""FIREDICE"";
""607_fallback"" [label=""fallback""];
""607_constructor"" [label=""constructor""];
""607_checkContractBalance"" [label=""checkContractBalance""];
""607_bet"" [label=""bet""];
""607_collect"" [label=""collect""];
""607_collect"" -> ""607_onlyOwner"";
""607_bet"" -> ""607_ra"";
""607_bet"" -> ""607_rx"";
}
"
0x347925b22d0217a4797f470faa2afebbdb150b7a.sol,Nanotechnology,"contract Nanotechnology is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 1; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 860000000e1; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 2000000e1; uint public target0drop = 1; uint public progress0drop = 0; address multisig = 0x5F6557aF8922D4031Ae506d2F02595039D16Ab5a; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Nanotechnology {
label=""Nanotechnology"";
""1261_withdraw"" [label=""withdraw""];
""1261_distr"" [label=""distr""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_add"" [label=""add""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_constructor"" [label=""constructor""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_transfer"" [label=""transfer""];
""1261_getTokens"" [label=""getTokens""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_burn"" [label=""burn""];
""1261_Distribute"" [label=""Distribute""];
""1261_allowance"" [label=""allowance""];
""1261_approve"" [label=""approve""];
""1261_fallback"" [label=""fallback""];
""1261_add"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_distr"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
}
"
0xe3ec74dbce6ee1d8680e38714b67ab5535c95bdb.sol,try_it,contract try_it { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_143_try_it {
label=""try_it"";
""143_StopGame"" [label=""StopGame""];
""143_Activate"" [label=""Activate""];
""143_newQuestioner"" [label=""newQuestioner""];
""143_Try"" [label=""Try""];
""143_fallback"" [label=""fallback""];
""143_NewQuestion"" [label=""NewQuestion""];
}
"
0x0dd88f1d1cbc9bcdda5ddd9e9fc86e8183f8f3b9.sol,XenoxCoin,"contract XenoxCoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 100000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000e18; uint public target0drop = 1000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event DistrRestarted(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1274_XenoxCoin {
label=""XenoxCoin"";
""1274_transferOwnership"" [label=""transferOwnership""];
""1274_getTokens"" [label=""getTokens""];
""1274_finishDistribution"" [label=""finishDistribution""];
""1274_reDistribution"" [label=""reDistribution""];
""1274_constructor"" [label=""constructor""];
""1274_withdraw"" [label=""withdraw""];
""1274_allowance"" [label=""allowance""];
""1274_balanceOf"" [label=""balanceOf""];
""1274_getTokenBalance"" [label=""getTokenBalance""];
""1274_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1274_transfer"" [label=""transfer""];
""1274_approve"" [label=""approve""];
""1274_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1274_Distribute"" [label=""Distribute""];
""1274_withdrawAll"" [label=""withdrawAll""];
""1274_burn"" [label=""burn""];
""1274_add"" [label=""add""];
""1274_distr"" [label=""distr""];
""1274_fallback"" [label=""fallback""];
""1274_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1274_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1274_transferFrom"" [label=""transferFrom""];
""1274_finishDistribution"" -> ""1274_onlyOwner"";
""1274_distr"" -> ""1274_canDistr"";
""1274_burn"" -> ""1274_onlyOwner"";
""1274_withdrawForeignTokens"" -> ""1274_onlyOwner"";
""1274_updateTokensPerEth"" -> ""1274_onlyOwner"";
""1274_constructor"" -> ""1274_distr"";
""1274_transferOwnership"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_canDistr"";
""1274_withdrawAll"" -> ""1274_onlyOwner"";
""1274_Distribute"" -> ""1274_onlyOwner"";
""1274_fallback"" -> ""1274_getTokens"";
""1274_getTokens"" -> ""1274_distr"";
""1274_DistributeAirdrop"" -> ""1274_onlyOwner"";
""1274_transfer"" -> ""1274_onlyPayloadSize"";
""1274_DistributeAirdropMultiple"" -> ""1274_Distribute"";
""1274_finishDistribution"" -> ""1274_canDistr"";
""1274_reDistribution"" -> ""1274_onlyOwner"";
""1274_withdraw"" -> ""1274_onlyOwner"";
""1274_add"" -> ""1274_onlyOwner"";
""1274_transferFrom"" -> ""1274_onlyPayloadSize"";
""1274_DistributeAirdropMultiple"" -> ""1274_onlyOwner"";
""1274_DistributeAirdrop"" -> ""1274_Distribute"";
""1274_reDistribution"" -> ""1274_canDistr"";
}
"
0x8bf1e43e3ca6f5c25c380803154ae687d682ad32.sol,RDFDM,"contract RDFDM { event FiatCollectedEvent(uint indexed charity, uint usd, string ref); event FiatToEthEvent(uint indexed charity, uint usd, uint eth); event EthToFiatEvent(uint indexed charity, uint eth, uint usd); event FiatDeliveredEvent(uint indexed charity, uint usd, string ref); event EthDonationEvent(uint indexed charity, uint eth); event CharityAddedEvent(uint indexed charity, string name, uint8 currency); event CharityModifiedEvent(uint indexed charity, string name, uint8 currency); uint constant CURRENCY_USD = 0x01; uint constant CURRENCY_EURO = 0x02; uint constant CURRENCY_NIS = 0x03; uint constant CURRENCY_YUAN = 0x04; struct Charity { uint fiatBalanceIn; uint fiatBalanceOut; uint fiatCollected; uint fiatDelivered; uint ethDonated; uint ethCredited; uint ethBalance; uint fiatToEthPriceAccEth; uint fiatToEthPriceAccFiat; uint ethToFiatPriceAccEth; uint ethToFiatPriceAccFiat; uint8 currency; string name; }",1,"subgraph cluster_1141_RDFDM {
label=""RDFDM"";
""1141_quickAuditFiatDelivered"" [label=""quickAuditFiatDelivered""];
""1141_deleteManager"" [label=""deleteManager""];
""1141_ethToFiatDelivered"" [label=""ethToFiatDelivered""];
""1141_fiatCollected"" [label=""fiatCollected""];
""1141_fallback"" [label=""fallback""];
""1141_setToken"" [label=""setToken""];
""1141_modifyCharity"" [label=""modifyCharity""];
""1141_fiatToEth"" [label=""fiatToEth""];
""1141_addCharity"" [label=""addCharity""];
""1141_setManager"" [label=""setManager""];
""1141_RDFDM"" [label=""RDFDM""];
""1141_setOperatorFeeAcct"" [label=""setOperatorFeeAcct""];
""1141_ethToFiat"" [label=""ethToFiat""];
""1141_quickAuditEthCredited"" [label=""quickAuditEthCredited""];
""1141_fiatDelivered"" [label=""fiatDelivered""];
""1141_fiatCollectedToEth"" [label=""fiatCollectedToEth""];
""1141_ethDonation"" [label=""ethDonation""];
""1141_lock"" [label=""lock""];
""1141_haraKiri"" [label=""haraKiri""];
""1141_modifyCharity"" -> ""1141_managerOnly"";
""1141_lock"" -> ""1141_ownerOnly"";
""1141_addCharity"" -> ""1141_managerOnly"";
""1141_setManager"" -> ""1141_managerOnly"";
""1141_ethToFiat"" -> ""1141_managerOnly"";
""1141_fiatCollectedToEth"" -> ""1141_managerOnly"";
""1141_setOperatorFeeAcct"" -> ""1141_ownerOnly"";
""1141_setToken"" -> ""1141_ownerOnly"";
""1141_haraKiri"" -> ""1141_unlockedOnly"";
""1141_haraKiri"" -> ""1141_ownerOnly"";
""1141_setToken"" -> ""1141_unlockedOnly"";
""1141_fiatToEth"" -> ""1141_managerOnly"";
""1141_fiatCollected"" -> ""1141_managerOnly"";
""1141_fiatDelivered"" -> ""1141_managerOnly"";
""1141_ethToFiatDelivered"" -> ""1141_managerOnly"";
""1141_deleteManager"" -> ""1141_managerOnly"";
}
"
0xbd6a3418cb51418c94cc11d2d49012a2b79e10fe.sol,WeaponSales,"contract WeaponSales is WeaponToken { event Purchase(address indexed owner, uint256 unitPrice, uint32 amount); function buyWeapon(uint256 _weaponId) public payable returns (uint256 id) { id = _generateWeapon(msg.sender, _weaponId); Transfer(address(0), msg.sender, id); Purchase(msg.sender, weaponModels[_weaponId].price, 1); }",1,"subgraph cluster_966_WeaponSales {
label=""WeaponSales"";
""966_withdrawBalance"" [label=""withdrawBalance""];
""966_buyWeapon"" [label=""buyWeapon""];
""966_withdrawBalance"" -> ""966_onlyOwner"";
""966_buyWeapon"" -> ""966__generateWeapon"";
}
"
0x2671bf62fdf173cfcb4b178d1a563ca84a349dc3.sol,D_QUIZ,contract D_QUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_147_D_QUIZ {
label=""D_QUIZ"";
""147_Try"" [label=""Try""];
""147_New"" [label=""New""];
""147_fallback"" [label=""fallback""];
""147_constructor"" [label=""constructor""];
""147_Start"" [label=""Start""];
""147_Stop"" [label=""Stop""];
""147_Stop"" -> ""147_isAdmin"";
""147_Start"" -> ""147_isAdmin"";
""147_New"" -> ""147_isAdmin"";
}
"
0x33147d0f721ddfd82408dd1c890eff4ad7ecd80e.sol,TokenERC20,"contract TokenERC20 is Ownable { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 18; uint256 public totalSupply; uint256 public currentTotalSupply = 0; uint256 public airdrop; uint256 public startBalance; uint256 public buyPrice ; mapping(address => bool) touched; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) internal allowed; mapping(address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Burn(address indexed burner, uint256 value); function TokenERC20( uint256 initialSupply ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_909_TokenERC20 {
label=""TokenERC20"";
""909_fallback"" [label=""fallback""];
""909_freezeAccount"" [label=""freezeAccount""];
""909_getEth"" [label=""getEth""];
""909_modifyairdrop"" [label=""modifyairdrop""];
""909_totalSupply"" [label=""totalSupply""];
""909_setPrices"" [label=""setPrices""];
""909_mintToken"" [label=""mintToken""];
""909_increaseApproval"" [label=""increaseApproval""];
""909_getBalance"" [label=""getBalance""];
""909_transferFrom"" [label=""transferFrom""];
""909_TokenERC20"" [label=""TokenERC20""];
""909_selfdestructs"" [label=""selfdestructs""];
""909_transfer"" [label=""transfer""];
""909_approve"" [label=""approve""];
""909_balanceOf"" [label=""balanceOf""];
""909_allowance"" [label=""allowance""];
""909_decreaseApproval"" [label=""decreaseApproval""];
""909_burn"" [label=""burn""];
""909__burn"" [label=""_burn""];
""909_burn"" -> ""909__burn"";
""909_getEth"" -> ""909_onlyOwner"";
""909_mintToken"" -> ""909_onlyOwner"";
""909_setPrices"" -> ""909_onlyOwner"";
""909_selfdestructs"" -> ""909_onlyOwner"";
""909_balanceOf"" -> ""909_getBalance"";
""909_modifyairdrop"" -> ""909_onlyOwner"";
""909_freezeAccount"" -> ""909_onlyOwner"";
}
"
0xd745a7883a6bd19389b6b9dc8580c2ff873f0cd1.sol,Earthpayment,"contract Earthpayment is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 7; uint256 public constant INITIAL_SUPPLY = 21000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function Earthpayment() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_Earthpayment {
label=""Earthpayment"";
""706__transfer"" [label=""_transfer""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_Earthpayment"" [label=""Earthpayment""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x555744471e00a4bf8ec403c47e06f38db6096a02.sol,InitialSaleSQD,"contract InitialSaleSQD { address public beneficiary; uint public preICOSaleStart; uint public ICOSaleStart; uint public ICOSaleEnd; uint public preICOPrice; uint public ICOPrice; uint public amountRaised; uint public incomingTokensTransactions; SQDExtendedToken public tokenReward; event TokenFallback( address indexed from, uint256 value); modifier onlyOwner() { if(msg.sender != beneficiary) revert(); _; }",1,"subgraph cluster_1560_InitialSaleSQD {
label=""InitialSaleSQD"";
""1560_WithdrawTokens"" [label=""WithdrawTokens""];
""1560_InitialSaleSQD"" [label=""InitialSaleSQD""];
""1560_fallback"" [label=""fallback""];
""1560_ChangeICOEnd"" [label=""ChangeICOEnd""];
""1560_ChangeICOStart"" [label=""ChangeICOStart""];
""1560_WithdrawAllETH"" [label=""WithdrawAllETH""];
""1560_ChangeCost"" [label=""ChangeCost""];
""1560_WithdrawETH"" [label=""WithdrawETH""];
""1560_tokenFallback"" [label=""tokenFallback""];
""1560_ChangePreICOStart"" [label=""ChangePreICOStart""];
""1560_transferOwnership"" [label=""transferOwnership""];
""1560_WithdrawAllETH"" -> ""1560_onlyOwner"";
""1560_WithdrawETH"" -> ""1560_onlyOwner"";
""1560_WithdrawTokens"" -> ""1560_onlyOwner"";
""1560_ChangeICOEnd"" -> ""1560_onlyOwner"";
""1560_ChangeICOStart"" -> ""1560_onlyOwner"";
""1560_ChangePreICOStart"" -> ""1560_onlyOwner"";
""1560_ChangeCost"" -> ""1560_onlyOwner"";
""1560_transferOwnership"" -> ""1560_onlyOwner"";
}
"
0x6ceb458fac48cf87b420f23b0d890534655683e0.sol,FrostByte,"contract FrostByte is FBT { event tokenBought(uint256 totalTokensBought, uint256 Price); event etherSent(uint256 total); string public name; uint8 public decimals; string public symbol; string public version = ; function FrostByte() { name = ; decimals = 4; symbol = ; pieceprice = 1 ether / 256; datestart = now; }",1,"subgraph cluster_630_FrostByte {
label=""FrostByte"";
""630_approveAndCall"" [label=""approveAndCall""];
""630_feeBank"" [label=""feeBank""];
""630_getPrice"" [label=""getPrice""];
""630_getAddressLevel"" [label=""getAddressLevel""];
""630_sendEther"" [label=""sendEther""];
""630_fallback"" [label=""fallback""];
""630_FrostByte"" [label=""FrostByte""];
""630_sendEther"" -> ""630_refundFees"";
""630_fallback"" -> ""630_getPrice"";
""630_fallback"" -> ""630_getAddressLevel"";
""630_fallback"" -> ""630_refundFees"";
}
"
0x579fa0a1872459138aad423644c9c5038fa31807.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_249_AccessService {
label=""AccessService"";
""249_withdraw"" [label=""withdraw""];
""249_setFinance"" [label=""setFinance""];
""249_setService"" [label=""setService""];
}
"
0x53c3c2eae35cbd790c3a90d8f1b2878ba523f01b.sol,GreenEthereusPromo,"contract GreenEthereusPromo { string public constant name = ; string public constant symbol = ; event Transfer(address indexed from, address indexed to, uint256 value); address owner; uint public index; constructor() public { owner = msg.sender; }",1,"subgraph cluster_130_GreenEthereusPromo {
label=""GreenEthereusPromo"";
""130_resetIndex"" [label=""resetIndex""];
""130_transferOwnership"" [label=""transferOwnership""];
""130_constructor"" [label=""constructor""];
""130_withdrawBalance"" [label=""withdrawBalance""];
""130_fallback"" [label=""fallback""];
""130_massSending"" [label=""massSending""];
""130_withdrawBalance"" -> ""130_onlyOwner"";
""130_resetIndex"" -> ""130_onlyOwner"";
""130_massSending"" -> ""130_onlyOwner"";
""130_transferOwnership"" -> ""130_onlyOwner"";
}
"
0x3a4b1eca26955fba4b99f78ee36153eacdceae85.sol,EdexStore,"contract EdexStore is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 1000000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 800000e8; uint public target0drop = 1000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1253_EdexStore {
label=""EdexStore"";
""1253_burn"" [label=""burn""];
""1253_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1253_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1253_transferFrom"" [label=""transferFrom""];
""1253_add"" [label=""add""];
""1253_transferOwnership"" [label=""transferOwnership""];
""1253_constructor"" [label=""constructor""];
""1253_approve"" [label=""approve""];
""1253_allowance"" [label=""allowance""];
""1253_finishDistribution"" [label=""finishDistribution""];
""1253_balanceOf"" [label=""balanceOf""];
""1253_distr"" [label=""distr""];
""1253_transfer"" [label=""transfer""];
""1253_withdraw"" [label=""withdraw""];
""1253_fallback"" [label=""fallback""];
""1253_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1253_Distribute"" [label=""Distribute""];
""1253_getTokenBalance"" [label=""getTokenBalance""];
""1253_withdrawAll"" [label=""withdrawAll""];
""1253_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1253_getTokens"" [label=""getTokens""];
""1253_transferFrom"" -> ""1253_onlyPayloadSize"";
""1253_add"" -> ""1253_onlyOwner"";
""1253_DistributeAirdrop"" -> ""1253_Distribute"";
""1253_burn"" -> ""1253_onlyOwner"";
""1253_distr"" -> ""1253_canDistr"";
""1253_withdraw"" -> ""1253_onlyOwner"";
""1253_fallback"" -> ""1253_getTokens"";
""1253_DistributeAirdropMultiple"" -> ""1253_Distribute"";
""1253_getTokens"" -> ""1253_canDistr"";
""1253_DistributeAirdrop"" -> ""1253_onlyOwner"";
""1253_finishDistribution"" -> ""1253_canDistr"";
""1253_Distribute"" -> ""1253_onlyOwner"";
""1253_withdrawForeignTokens"" -> ""1253_onlyOwner"";
""1253_updateTokensPerEth"" -> ""1253_onlyOwner"";
""1253_withdrawAll"" -> ""1253_onlyOwner"";
""1253_getTokens"" -> ""1253_distr"";
""1253_finishDistribution"" -> ""1253_onlyOwner"";
""1253_transfer"" -> ""1253_onlyPayloadSize"";
""1253_transferOwnership"" -> ""1253_onlyOwner"";
""1253_DistributeAirdropMultiple"" -> ""1253_onlyOwner"";
""1253_constructor"" -> ""1253_distr"";
}
"
0x4cda22125752e0f17fe27add1c3f3e9669876c98.sol,PLAY_QZ,contract PLAY_QZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_147_PLAY_QZ {
label=""PLAY_QZ"";
""147_Start"" [label=""Start""];
""147_New"" [label=""New""];
""147_Stop"" [label=""Stop""];
""147_fallback"" [label=""fallback""];
""147_constructor"" [label=""constructor""];
""147_Try"" [label=""Try""];
""147_Stop"" -> ""147_isAdmin"";
""147_Start"" -> ""147_isAdmin"";
""147_New"" -> ""147_isAdmin"";
}
"
0x6a2b112e5314a3462a3df18c0b73a2de14fd6b06.sol,ClockAuction,"contract ClockAuction is Pausable, ClockAuctionBase { bytes4 constant InterfaceSignature_ERC721 = bytes4(0x80ac58cd); constructor(address _nftAddress, uint256 _cut) public { require(_cut <= 10000); ownerCut = _cut; ERC721Token candidateContract = ERC721Token(_nftAddress); require(candidateContract.supportsInterface(InterfaceSignature_ERC721)); nonFungibleContract = candidateContract; }",1,"subgraph cluster_2307_ClockAuctionBase {
label=""ClockAuctionBase"";
""2307__transfer"" [label=""_transfer""];
""2307__computeCut"" [label=""_computeCut""];
""2307__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""2307__escrow"" [label=""_escrow""];
""2307__cancelAuction"" [label=""_cancelAuction""];
""2307__isOnAuction"" [label=""_isOnAuction""];
""2307__currentPrice"" [label=""_currentPrice""];
""2307__bid"" [label=""_bid""];
""2307__addAuction"" [label=""_addAuction""];
""2307__removeAuction"" [label=""_removeAuction""];
""2307_isOwnerOf"" [label=""isOwnerOf""];
""2307__bid"" -> ""2307__computeCut"";
""2307__cancelAuction"" -> ""2307__removeAuction"";
""2307__currentPrice"" -> ""2307__computeCurrentPrice"";
""2307__bid"" -> ""2307__isOnAuction"";
""2307__bid"" -> ""2307__currentPrice"";
""2307__cancelAuction"" -> ""2307__transfer"";
""2307__bid"" -> ""2307__removeAuction"";
}
"
0x70d0907b064ab5c86849d391124f62ce9bcbf597.sol,Fastbitcoin,"contract Fastbitcoin is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 99 * 1 days; uint public round2 = now + 15 * 1 days; uint public round1 = now + 5 * 1 days; uint256 public totalSupply = 100000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 10000; uint256 public tokensPerEth = 2500000e8; uint public target0drop = 4000; uint public progress0drop = 0; address multisig = 0x25CB79CB502E58697C47e8cD29411fc4250879a6; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_Fastbitcoin {
label=""Fastbitcoin"";
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_constructor"" [label=""constructor""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_approve"" [label=""approve""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_allowance"" [label=""allowance""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokens"" [label=""getTokens""];
""1261_add"" [label=""add""];
""1261_fallback"" [label=""fallback""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_withdraw"" [label=""withdraw""];
""1261_transfer"" [label=""transfer""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_burn"" [label=""burn""];
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_distr"" -> ""1261_canDistr"";
}
"
0x313df3fac623a824c8e64b4c47cf62fe0b75809e.sol,TiqpitCrowdsale,"contract TiqpitCrowdsale is Pausable, Whitelistable { using SafeMath for uint256; uint256 constant private DECIMALS = 18; uint256 constant public RESERVED_TOKENS_BOUNTY = 10e6 * (10 ** DECIMALS); uint256 constant public RESERVED_TOKENS_FOUNDERS = 25e6 * (10 ** DECIMALS); uint256 constant public RESERVED_TOKENS_ADVISORS = 25e5 * (10 ** DECIMALS); uint256 constant public RESERVED_TOKENS_TIQPIT_SOLUTIONS = 625e5 * (10 ** DECIMALS); uint256 constant public MIN_INVESTMENT = 200 * (10 ** DECIMALS); uint256 constant public MINCAP_TOKENS_PRE_ICO = 1e6 * (10 ** DECIMALS); uint256 constant public MAXCAP_TOKENS_PRE_ICO = 75e5 * (10 ** DECIMALS); uint256 constant public MINCAP_TOKENS_ICO = 5e6 * (10 ** DECIMALS); uint256 constant public MAXCAP_TOKENS_ICO = 3925e5 * (10 ** DECIMALS); uint256 public tokensRemainingIco = MAXCAP_TOKENS_ICO; uint256 public tokensRemainingPreIco = MAXCAP_TOKENS_PRE_ICO; uint256 public soldTokensPreIco = 0; uint256 public soldTokensIco = 0; uint256 public soldTokensTotal = 0; uint256 public preIcoRate = 2857; uint256 public firstRate = 2500; uint256 public secondRate = 2222; uint256 public thirdRate = 2000; uint256 public startTimePreIco = 0; uint256 public endTimePreIco = 0; uint256 public startTimeIco = 0; uint256 public endTimeIco = 0; uint256 public weiRaisedPreIco = 0; uint256 public weiRaisedIco = 0; uint256 public weiRaisedTotal = 0; TiqpitToken public token = new TiqpitToken(this); mapping (address => address) private lockedList; address private tiqpitSolutionsWallet; address private foundersWallet; address private advisorsWallet; address private bountyWallet; address public backendAddress; bool private hasPreIcoFailed = false; bool private hasIcoFailed = false; bool private isInitialDistributionDone = false; struct Purchase { uint256 refundableWei; uint256 burnableTiqs; }",1,"subgraph cluster_2350_TiqpitCrowdsale {
label=""TiqpitCrowdsale"";
""2350_lockTokens"" [label=""lockTokens""];
""2350_refundPreIco"" [label=""refundPreIco""];
""2350_manualSendTokens"" [label=""manualSendTokens""];
""2350_setBackendAddress"" [label=""setBackendAddress""];
""2350_currentIcoRate"" [label=""currentIcoRate""];
""2350_triggerFailFlags"" [label=""triggerFailFlags""];
""2350_sellTokens"" [label=""sellTokens""];
""2350_getPreIcoPurchase"" [label=""getPreIcoPurchase""];
""2350_addIcoPurchaseInfo"" [label=""addIcoPurchaseInfo""];
""2350_burnTokens"" [label=""burnTokens""];
""2350_TiqpitCrowdsale"" [label=""TiqpitCrowdsale""];
""2350_getLockedContractAddress"" [label=""getLockedContractAddress""];
""2350_addPreIcoPurchaseInfo"" [label=""addPreIcoPurchaseInfo""];
""2350_isPreIco"" [label=""isPreIco""];
""2350_getIcoPurchase"" [label=""getIcoPurchase""];
""2350_initialDistribution"" [label=""initialDistribution""];
""2350_burnRemainingTokens"" [label=""burnRemainingTokens""];
""2350_refundIco"" [label=""refundIco""];
""2350_fallback"" [label=""fallback""];
""2350_isIco"" [label=""isIco""];
""2350_sellTokens"" -> ""2350_currentIcoRate"";
""2350_manualSendTokens"" -> ""2350_onlyPrivilegedAddresses"";
""2350_manualSendTokens"" -> ""2350_addIcoPurchaseInfo"";
""2350_manualSendTokens"" -> ""2350_whenWhitelisted"";
""2350_TiqpitCrowdsale"" -> ""2350_Whitelistable"";
""2350_sellTokens"" -> ""2350_whenNotPaused"";
""2350_triggerFailFlags"" -> ""2350_onlyOwner"";
""2350_burnRemainingTokens"" -> ""2350_onlyOwner"";
""2350_sellTokens"" -> ""2350_whenWhitelisted"";
""2350_sellTokens"" -> ""2350_addPreIcoPurchaseInfo"";
""2350_manualSendTokens"" -> ""2350_isIco"";
""2350_initialDistribution"" -> ""2350_lockTokens"";
""2350_sellTokens"" -> ""2350_isIco"";
""2350_manualSendTokens"" -> ""2350_addPreIcoPurchaseInfo"";
""2350_sellTokens"" -> ""2350_addIcoPurchaseInfo"";
""2350_burnTokens"" -> ""2350_onlyOwner"";
""2350_sellTokens"" -> ""2350_isPreIco"";
""2350_fallback"" -> ""2350_sellTokens"";
""2350_manualSendTokens"" -> ""2350_isPreIco"";
""2350_setBackendAddress"" -> ""2350_onlyOwner"";
""2350_initialDistribution"" -> ""2350_onlyOwner"";
}
"
0x48ee772b8c8927d8d32afc8961fbc177fb723637.sol,Contribution,"contract Contribution is SafeMath, Owned { uint256 public constant MIN_FUND = (0.01 ether); uint256 public constant CRAWDSALE_START_DAY = 1; uint256 public constant CRAWDSALE_END_DAY = 7; uint256 public dayCycle = 24 hours; uint256 public fundingStartTime = 0; address public ethFundDeposit = 0; address public investorDeposit = 0; bool public isFinalize = false; bool public isPause = false; mapping (uint => uint) public dailyTotals; mapping (uint => mapping (address => uint)) public userBuys; uint256 public totalContributedETH = 0; event LogBuy (uint window, address user, uint amount); event LogCreate (address ethFundDeposit, address investorDeposit, uint fundingStartTime, uint dayCycle); event LogFinalize (uint finalizeTime); event LogPause (uint finalizeTime, bool pause); function Contribution (address _ethFundDeposit, address _investorDeposit, uint256 _fundingStartTime, uint256 _dayCycle) { require( now < _fundingStartTime ); require( _ethFundDeposit != address(0) ); fundingStartTime = _fundingStartTime; dayCycle = _dayCycle; ethFundDeposit = _ethFundDeposit; investorDeposit = _investorDeposit; LogCreate(_ethFundDeposit, _investorDeposit, _fundingStartTime,_dayCycle); }",1,"subgraph cluster_903_Contribution {
label=""Contribution"";
""903_buy"" [label=""buy""];
""903_fallback"" [label=""fallback""];
""903_pause"" [label=""pause""];
""903_kill"" [label=""kill""];
""903_Contribution"" [label=""Contribution""];
""903_importExchangeSale"" [label=""importExchangeSale""];
""903_finalize"" [label=""finalize""];
""903_today"" [label=""today""];
""903_kill"" -> ""903_onlyOwner"";
""903_fallback"" -> ""903_today"";
""903_today"" -> ""903_sub"";
""903_importExchangeSale"" -> ""903_onlyOwner"";
""903_pause"" -> ""903_onlyOwner"";
""903_fallback"" -> ""903_buy"";
""903_finalize"" -> ""903_onlyOwner"";
""903_importExchangeSale"" -> ""903_buy"";
}
"
0x28a40acf39b1d3c932f42dd8068ad00a5ad6448f.sol,LudumToken,contract LudumToken is StandardToken { using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint public constant maximumSupply = 100000000000000000000000000; address public ethDepositAddress; address public teamFundAddress; address public operationsFundAddress; address public marketingFundAddress; bool public isFinalized; uint public constant crowdsaleStart = 1503921600; uint public constant crowdsaleEnd = 1506340800; uint public constant teamPercent = 10; uint public constant operationsPercent = 10; uint public constant marketingPercent = 5; function ludumTokensPerEther() constant returns(uint) { if (now < crowdsaleStart || now > crowdsaleEnd) { return 0; },1,"subgraph cluster_716_LudumToken {
label=""LudumToken"";
""716_finalizeCrowdsale"" [label=""finalizeCrowdsale""];
""716_ludumTokensPerEther"" [label=""ludumTokensPerEther""];
""716_LudumToken"" [label=""LudumToken""];
""716_makeTokens"" [label=""makeTokens""];
""716_fallback"" [label=""fallback""];
""716_makeTokens"" -> ""716_ludumTokensPerEther"";
""716_fallback"" -> ""716_makeTokens"";
}
"
0x58a687bb4a7a4220e65f9b6f913580e5bec4a7bc.sol,EnergiPlus,"contract EnergiPlus is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 150 * 1 days; uint public round2 = now + 50 * 1 days; uint public round1 = now + 100 * 1 days; uint256 public totalSupply = 100000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 35000e8; uint public target0drop = 5000; uint public progress0drop = 0; address multisig = 0x4e0134dB37A5c67E1572BE270C1E34C5f67cdBc0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1263_EnergiPlus {
label=""EnergiPlus"";
""1263_withdrawAll"" [label=""withdrawAll""];
""1263_finishDistribution"" [label=""finishDistribution""];
""1263_transferFrom"" [label=""transferFrom""];
""1263_Distribute"" [label=""Distribute""];
""1263_transfer"" [label=""transfer""];
""1263_balanceOf"" [label=""balanceOf""];
""1263_allowance"" [label=""allowance""];
""1263_add"" [label=""add""];
""1263_getTokens"" [label=""getTokens""];
""1263_withdraw"" [label=""withdraw""];
""1263_transferOwnership"" [label=""transferOwnership""];
""1263_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1263_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1263_distr"" [label=""distr""];
""1263_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1263_fallback"" [label=""fallback""];
""1263_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1263_constructor"" [label=""constructor""];
""1263_getTokenBalance"" [label=""getTokenBalance""];
""1263_burn"" [label=""burn""];
""1263_approve"" [label=""approve""];
""1263_constructor"" -> ""1263_distr"";
""1263_transferFrom"" -> ""1263_onlyPayloadSize"";
""1263_DistributeAirdrop"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_canDistr"";
""1263_Distribute"" -> ""1263_onlyOwner"";
""1263_transferOwnership"" -> ""1263_onlyOwner"";
""1263_withdraw"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_Distribute"";
""1263_withdrawForeignTokens"" -> ""1263_onlyOwner"";
""1263_finishDistribution"" -> ""1263_onlyOwner"";
""1263_updateTokensPerEth"" -> ""1263_onlyOwner"";
""1263_burn"" -> ""1263_onlyOwner"";
""1263_DistributeAirdropMultiple"" -> ""1263_onlyOwner"";
""1263_DistributeAirdrop"" -> ""1263_Distribute"";
""1263_getTokens"" -> ""1263_canDistr"";
""1263_distr"" -> ""1263_canDistr"";
""1263_getTokens"" -> ""1263_distr"";
""1263_add"" -> ""1263_onlyOwner"";
""1263_withdrawAll"" -> ""1263_onlyOwner"";
""1263_transfer"" -> ""1263_onlyPayloadSize"";
""1263_fallback"" -> ""1263_getTokens"";
}
"
0x184b8e35fea87e75498705ea96f2326db8ee2470.sol,AirDrop,contract AirDrop is Ownable { Token public tokenInstance; constructor(address _tokenAddress) public { tokenInstance = Token(_tokenAddress); },1,"subgraph cluster_233_AirDrop {
label=""AirDrop"";
""233_doAirDrop"" [label=""doAirDrop""];
""233_transferEthToOnwer"" [label=""transferEthToOnwer""];
""233_constructor"" [label=""constructor""];
""233_fallback"" [label=""fallback""];
""233_sendBatch"" [label=""sendBatch""];
""233_kill"" [label=""kill""];
""233_transferEthToOnwer"" -> ""233_onlyOwner"";
""233_doAirDrop"" -> ""233_onlyOwner"";
""233_kill"" -> ""233_onlyOwner"";
""233_sendBatch"" -> ""233_onlyOwner"";
}
"
0xd9e982e827d19a9dca6fe607be4c52d0ff14a697.sol,UserDataManager,contract UserDataManager { using NameFilter for string; using SafeMath for uint256; address private admin = msg.sender; uint256 public registrationFee_ = 0; mapping(uint256 => UserDataManagerReceiverInterface) public games_; mapping(address => bytes32) public gameNames_; mapping(address => uint256) public gameIDs_; uint256 public gID_; uint256 public pID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => Player) public plyr_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; struct Player { address addr; bytes32 name; uint256 laff; uint256 names; },1,"subgraph cluster_1328_UserDataManager {
label=""UserDataManager"";
""1328_getPlayerAddr"" [label=""getPlayerAddr""];
""1328_checkIfNameValid"" [label=""checkIfNameValid""];
""1328_getNameFee"" [label=""getNameFee""];
""1328_registerNameXaddrFromDapp"" [label=""registerNameXaddrFromDapp""];
""1328_getPlayerLAff"" [label=""getPlayerLAff""];
""1328_registerNameXID"" [label=""registerNameXID""];
""1328_setRegistrationFee"" [label=""setRegistrationFee""];
""1328_registerNameXIDFromDapp"" [label=""registerNameXIDFromDapp""];
""1328_getPlayerID"" [label=""getPlayerID""];
""1328_registerNameXaddr"" [label=""registerNameXaddr""];
""1328_addGame"" [label=""addGame""];
""1328_addMeToGame"" [label=""addMeToGame""];
""1328_useMyOldName"" [label=""useMyOldName""];
""1328_registerNameCore"" [label=""registerNameCore""];
""1328_addMeToAllGames"" [label=""addMeToAllGames""];
""1328_getPlayerName"" [label=""getPlayerName""];
""1328_determinePID"" [label=""determinePID""];
""1328_registerNameXname"" [label=""registerNameXname""];
""1328_registerNameXnameFromDapp"" [label=""registerNameXnameFromDapp""];
""1328_constructor"" [label=""constructor""];
""1328_registerNameXname"" -> ""1328_determinePID"";
""1328_getPlayerID"" -> ""1328_determinePID"";
""1328_registerNameXID"" -> ""1328_registerNameCore"";
""1328_registerNameXaddrFromDapp"" -> ""1328_determinePID"";
""1328_registerNameXID"" -> ""1328_determinePID"";
""1328_registerNameXnameFromDapp"" -> ""1328_isRegisteredGame"";
""1328_registerNameXaddr"" -> ""1328_determinePID"";
""1328_useMyOldName"" -> ""1328_isHuman"";
""1328_addMeToAllGames"" -> ""1328_isHuman"";
""1328_getPlayerID"" -> ""1328_isRegisteredGame"";
""1328_addGame"" -> ""1328_onlyDevs"";
""1328_registerNameXname"" -> ""1328_registerNameCore"";
""1328_setRegistrationFee"" -> ""1328_onlyDevs"";
""1328_registerNameXnameFromDapp"" -> ""1328_determinePID"";
""1328_registerNameXIDFromDapp"" -> ""1328_determinePID"";
""1328_registerNameXaddr"" -> ""1328_registerNameCore"";
""1328_registerNameXaddr"" -> ""1328_isHuman"";
""1328_registerNameXnameFromDapp"" -> ""1328_registerNameCore"";
""1328_addMeToGame"" -> ""1328_isHuman"";
""1328_registerNameXname"" -> ""1328_isHuman"";
""1328_registerNameXaddrFromDapp"" -> ""1328_registerNameCore"";
""1328_registerNameXID"" -> ""1328_isHuman"";
""1328_registerNameXIDFromDapp"" -> ""1328_isRegisteredGame"";
""1328_registerNameXaddrFromDapp"" -> ""1328_isRegisteredGame"";
""1328_registerNameXIDFromDapp"" -> ""1328_registerNameCore"";
}
"
0x92ccb32f34ca7abf1e0f5ba9b0167b607ea6b5ac.sol,LO_QUIZ,contract LO_QUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.4 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_LO_QUIZ {
label=""LO_QUIZ"";
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_New"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_Start"" -> ""148_isAdmin"";
}
"
0xefcc5dcaba4a93046b5f5c24c1281c685154214c.sol,CrypteloPreSale,"contract CrypteloPreSale { using SafeMath for uint256; mapping (address => bool) private owners; mapping (address => uint) private WhiteListed; mapping (address => uint256) private vestedTokens; mapping (address => uint256) private dateInvested; mapping (address => uint256) private firstDeadline; uint private firstGminimumWeiAmount = 100000000000000000; uint private secondGminimumWeiAmount = 40000000000000000000; uint public weiHardCap = 3625000000000000000000; uint public weiRaised = 0; uint private weiLeft = weiHardCap; uint private CRLTotal = 9062500000000000; uint private CRLToSell = CRLTotal.div(2); uint private totalVesting = 0; uint private totalCRLDistributed = 0; uint private CRLLeft = CRLTotal; uint public CRLperEther = 1250000000000; uint public CRLperMicroEther = CRLperEther.div(1000000); address public CrypteloERC20Address = 0x7123027d76a5135e66b3a365efaba2b55de18a62; address private forwardFundsWallet = 0xd6c56d07665D44159246517Bb4B2aC9bBeb040cf; uint firstTimeOffset = 1 years; event eRefund(address _addr, uint _weiAmount, string where); event eTokensToSend(address _addr, uint _CRLTokens); event eSendTokens(address _addr, uint _amount); function CrypteloPreSale(){ owners[msg.sender] = true; }",1,"subgraph cluster_573_CrypteloPreSale {
label=""CrypteloPreSale"";
""573_forwardFunds"" [label=""forwardFunds""];
""573_fallback"" [label=""fallback""];
""573_getTotalVesting"" [label=""getTotalVesting""];
""573_withdrawDistributionCRL"" [label=""withdrawDistributionCRL""];
""573_addWhiteList"" [label=""addWhiteList""];
""573_claimTokens"" [label=""claimTokens""];
""573_CrypteloPreSale"" [label=""CrypteloPreSale""];
""573_isWhiteList"" [label=""isWhiteList""];
""573_removeWhiteList"" [label=""removeWhiteList""];
""573_checkMyTokens"" [label=""checkMyTokens""];
""573_withdrawAllEther"" [label=""withdrawAllEther""];
""573_getTotalDistributed"" [label=""getTotalDistributed""];
""573_refund"" [label=""refund""];
""573_sendTokens"" [label=""sendTokens""];
""573_vestTokens"" [label=""vestTokens""];
""573_checkMyVestingPeriod"" [label=""checkMyVestingPeriod""];
""573_fallback"" -> ""573_sendTokens"";
""573_fallback"" -> ""573_refund"";
""573_fallback"" -> ""573_forwardFunds"";
""573_withdrawDistributionCRL"" -> ""573_sendTokens"";
""573_fallback"" -> ""573_vestTokens"";
""573_claimTokens"" -> ""573_sendTokens"";
}
"
0x56cd53067e5acd557dbbfb4c66580dfb9722962a.sol,CryptoMoviesToken,"contract CryptoMoviesToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 20000; uint256 private firstStepLimit = 1.2 ether; uint256 private secondStepLimit = 5 ether; mapping (uint256 => address) public movieIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public movieIndexToApproved; mapping (uint256 => uint256) private movieIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Movie { string name; }",1,"subgraph cluster_975_CryptoMoviesToken {
label=""CryptoMoviesToken"";
""975_transfer"" [label=""transfer""];
""975_createContractMovie"" [label=""createContractMovie""];
""975_getMovie"" [label=""getMovie""];
""975_name"" [label=""name""];
""975_transferFrom"" [label=""transferFrom""];
""975__transfer"" [label=""_transfer""];
""975__createMovie"" [label=""_createMovie""];
""975_payout"" [label=""payout""];
""975__payout"" [label=""_payout""];
""975_takeOwnership"" [label=""takeOwnership""];
""975_balanceOf"" [label=""balanceOf""];
""975__owns"" [label=""_owns""];
""975__approved"" [label=""_approved""];
""975_symbol"" [label=""symbol""];
""975__addressNotNull"" [label=""_addressNotNull""];
""975_purchase"" [label=""purchase""];
""975_approve"" [label=""approve""];
""975_setCEO"" [label=""setCEO""];
""975_setCOO"" [label=""setCOO""];
""975_ownerOf"" [label=""ownerOf""];
""975_implementsERC721"" [label=""implementsERC721""];
""975_totalSupply"" [label=""totalSupply""];
""975_tokensOfOwner"" [label=""tokensOfOwner""];
""975_createPromoMovie"" [label=""createPromoMovie""];
""975_priceOf"" [label=""priceOf""];
""975_CryptoMoviesToken"" [label=""CryptoMoviesToken""];
""975_transfer"" -> ""975__addressNotNull"";
""975_tokensOfOwner"" -> ""975_totalSupply"";
""975__createMovie"" -> ""975__transfer"";
""975_createPromoMovie"" -> ""975__createMovie"";
""975_payout"" -> ""975__payout"";
""975_transfer"" -> ""975__transfer"";
""975_transferFrom"" -> ""975__addressNotNull"";
""975_takeOwnership"" -> ""975__approved"";
""975_approve"" -> ""975__owns"";
""975_transferFrom"" -> ""975__transfer"";
""975_createContractMovie"" -> ""975__createMovie"";
""975_purchase"" -> ""975__transfer"";
""975_createPromoMovie"" -> ""975_onlyCOO"";
""975_setCEO"" -> ""975_onlyCEO"";
""975_transfer"" -> ""975__owns"";
""975_transferFrom"" -> ""975__owns"";
""975_setCOO"" -> ""975_onlyCEO"";
""975_createContractMovie"" -> ""975_onlyCOO"";
""975_transferFrom"" -> ""975__approved"";
""975_takeOwnership"" -> ""975__transfer"";
""975_payout"" -> ""975_onlyCLevel"";
""975_tokensOfOwner"" -> ""975_balanceOf"";
""975_takeOwnership"" -> ""975__addressNotNull"";
""975_purchase"" -> ""975__addressNotNull"";
}
"
0x6d3543d4b11683847697f5b9a3a9d116cf13dedd.sol,VideoPoker,"contract VideoPoker is VideoPokerUtils, Bankrollable, UsingAdmin { struct Game { uint32 userId; uint64 bet; uint16 payTableId; uint32 iBlock; uint32 iHand; uint8 draws; uint32 dBlock; uint32 dHand; uint8 handRank; }",1,"subgraph cluster_3760_VideoPoker {
label=""VideoPoker"";
""3760_addCredits"" [label=""addCredits""];
""3760_constructor"" [label=""constructor""];
""3760_betFromGame"" [label=""betFromGame""];
""3760_totalCredits"" [label=""totalCredits""];
""3760_totalWagered"" [label=""totalWagered""];
""3760_totalWon"" [label=""totalWon""];
""3760_curUserId"" [label=""curUserId""];
""3760_numPayTables"" [label=""numPayTables""];
""3760_changeSettings"" [label=""changeSettings""];
""3760__createNewGame"" [label=""_createNewGame""];
""3760_getCurPayTable"" [label=""getCurPayTable""];
""3760__finalize"" [label=""_finalize""];
""3760__draw"" [label=""_draw""];
""3760_getCollateral"" [label=""getCollateral""];
""3760__betFailure"" [label=""_betFailure""];
""3760_addPayTable"" [label=""addPayTable""];
""3760_draw"" [label=""draw""];
""3760__finalizeFailure"" [label=""_finalizeFailure""];
""3760__addPayTable"" [label=""_addPayTable""];
""3760_getDHand"" [label=""getDHand""];
""3760__creditUser"" [label=""_creditUser""];
""3760_curId"" [label=""curId""];
""3760_finalize"" [label=""finalize""];
""3760_getDHandRank"" [label=""getDHandRank""];
""3760_bet"" [label=""bet""];
""3760_curMaxBet"" [label=""curMaxBet""];
""3760_getIHand"" [label=""getIHand""];
""3760_minBet"" [label=""minBet""];
""3760_getPayTable"" [label=""getPayTable""];
""3760_curPayTableId"" [label=""curPayTableId""];
""3760_cashOut"" [label=""cashOut""];
""3760__drawFailure"" [label=""_drawFailure""];
""3760_effectiveMaxBet"" [label=""effectiveMaxBet""];
""3760_getWhitelistOwner"" [label=""getWhitelistOwner""];
""3760_betWithCredits"" [label=""betWithCredits""];
""3760_maxBet"" [label=""maxBet""];
""3760__uncreditUser"" [label=""_uncreditUser""];
""3760_constructor"" -> ""3760__addPayTable"";
""3760_getCurPayTable"" -> ""3760_getPayTable"";
""3760_addPayTable"" -> ""3760_fromAdmin"";
""3760_cashOut"" -> ""3760__uncreditUser"";
""3760_betFromGame"" -> ""3760_betWithCredits"";
""3760_constructor"" -> ""3760_constructor"";
""3760_bet"" -> ""3760__createNewGame"";
""3760_getIHand"" -> ""3760_getHand"";
""3760__finalize"" -> ""3760_getHand"";
""3760_getDHandRank"" -> ""3760_getDHand"";
""3760_addCredits"" -> ""3760__creditUser"";
""3760_betFromGame"" -> ""3760__betFailure"";
""3760_betWithCredits"" -> ""3760_curMaxBet"";
""3760__finalize"" -> ""3760_drawToHand"";
""3760_getDHand"" -> ""3760_drawToHand"";
""3760_getDHandRank"" -> ""3760_getHandRank"";
""3760_finalize"" -> ""3760__finalize"";
""3760_bet"" -> ""3760_curMaxBet"";
""3760_finalize"" -> ""3760__finalizeFailure"";
""3760__draw"" -> ""3760__drawFailure"";
""3760_betWithCredits"" -> ""3760__createNewGame"";
""3760__finalize"" -> ""3760__finalizeFailure"";
""3760_bet"" -> ""3760__betFailure"";
""3760_effectiveMaxBet"" -> ""3760_curMaxBet"";
""3760_draw"" -> ""3760__drawFailure"";
""3760__finalize"" -> ""3760_getHandRank"";
""3760_changeSettings"" -> ""3760_fromAdmin"";
""3760_betFromGame"" -> ""3760_finalize"";
""3760_getWhitelistOwner"" -> ""3760_getAdmin"";
""3760__finalize"" -> ""3760__creditUser"";
""3760__draw"" -> ""3760_getHand"";
""3760_draw"" -> ""3760__draw"";
""3760_addPayTable"" -> ""3760__addPayTable"";
""3760_curMaxBet"" -> ""3760_bankrollAvailable"";
""3760_betWithCredits"" -> ""3760__betFailure"";
}
"
0x7609a798cf9e86622364326f5d1e523a030e19b4.sol,XenoxToken,"contract XenoxToken is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public deadline = now + 37 * 1 days; uint public round2 = now + 32 * 1 days; uint public round1 = now + 22 * 1 days; uint256 public totalSupply = 100000000e18; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 100; uint256 public tokensPerEth = 10000e18; uint public target0drop = 1000; uint public progress0drop = 0; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event DistrRestarted(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1274_XenoxToken {
label=""XenoxToken"";
""1274_withdrawAll"" [label=""withdrawAll""];
""1274_withdraw"" [label=""withdraw""];
""1274_distr"" [label=""distr""];
""1274_transferOwnership"" [label=""transferOwnership""];
""1274_transfer"" [label=""transfer""];
""1274_getTokens"" [label=""getTokens""];
""1274_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1274_getTokenBalance"" [label=""getTokenBalance""];
""1274_approve"" [label=""approve""];
""1274_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1274_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1274_add"" [label=""add""];
""1274_fallback"" [label=""fallback""];
""1274_finishDistribution"" [label=""finishDistribution""];
""1274_constructor"" [label=""constructor""];
""1274_reDistribution"" [label=""reDistribution""];
""1274_balanceOf"" [label=""balanceOf""];
""1274_Distribute"" [label=""Distribute""];
""1274_transferFrom"" [label=""transferFrom""];
""1274_burn"" [label=""burn""];
""1274_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1274_allowance"" [label=""allowance""];
""1274_updateTokensPerEth"" -> ""1274_onlyOwner"";
""1274_transferFrom"" -> ""1274_onlyPayloadSize"";
""1274_reDistribution"" -> ""1274_canDistr"";
""1274_DistributeAirdropMultiple"" -> ""1274_onlyOwner"";
""1274_distr"" -> ""1274_canDistr"";
""1274_DistributeAirdrop"" -> ""1274_onlyOwner"";
""1274_add"" -> ""1274_onlyOwner"";
""1274_constructor"" -> ""1274_distr"";
""1274_transfer"" -> ""1274_onlyPayloadSize"";
""1274_fallback"" -> ""1274_getTokens"";
""1274_finishDistribution"" -> ""1274_onlyOwner"";
""1274_withdrawForeignTokens"" -> ""1274_onlyOwner"";
""1274_withdrawAll"" -> ""1274_onlyOwner"";
""1274_burn"" -> ""1274_onlyOwner"";
""1274_finishDistribution"" -> ""1274_canDistr"";
""1274_DistributeAirdropMultiple"" -> ""1274_Distribute"";
""1274_Distribute"" -> ""1274_onlyOwner"";
""1274_withdraw"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_canDistr"";
""1274_reDistribution"" -> ""1274_onlyOwner"";
""1274_getTokens"" -> ""1274_distr"";
""1274_DistributeAirdrop"" -> ""1274_Distribute"";
""1274_transferOwnership"" -> ""1274_onlyOwner"";
}
"
0xd0792ac0de7ef31197c5f452b21a34389ecc725f.sol,CryptoWaterMargin,"contract CryptoWaterMargin is ERC721{ using SafeMath for uint256; event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); address private owner; mapping (address => bool) private admins; IItemRegistry private itemRegistry; uint256 private increaseLimit1 = 0.02 ether; uint256 private increaseLimit2 = 0.5 ether; uint256 private increaseLimit3 = 2.0 ether; uint256 private increaseLimit4 = 5.0 ether; uint256[] private listedItems; mapping (uint256 => address) private ownerOfItem; mapping (uint256 => uint256) private priceOfItem; mapping (uint256 => address) private approvedOfItem; function CryptoWaterMargin () public { owner = msg.sender; admins[owner] = true; issueCard(1, 6, 0.1 ether); }",1,"subgraph cluster_1354_CryptoWaterMargin {
label=""CryptoWaterMargin"";
""1354_nextPriceOf"" [label=""nextPriceOf""];
""1354_withdrawAll"" [label=""withdrawAll""];
""1354_approve"" [label=""approve""];
""1354_balanceOf"" [label=""balanceOf""];
""1354_removeAdmin"" [label=""removeAdmin""];
""1354_totalSupply"" [label=""totalSupply""];
""1354_changePrice"" [label=""changePrice""];
""1354_listItem"" [label=""listItem""];
""1354_setOwner"" [label=""setOwner""];
""1354_calculateNextPrice"" [label=""calculateNextPrice""];
""1354_issueCard"" [label=""issueCard""];
""1354_approvedFor"" [label=""approvedFor""];
""1354_populateFromItemRegistry"" [label=""populateFromItemRegistry""];
""1354_allOf"" [label=""allOf""];
""1354_withdrawAmount"" [label=""withdrawAmount""];
""1354_name"" [label=""name""];
""1354__transfer"" [label=""_transfer""];
""1354_itemsForSaleLimit"" [label=""itemsForSaleLimit""];
""1354_priceOf"" [label=""priceOf""];
""1354_symbol"" [label=""symbol""];
""1354_listMultipleItems"" [label=""listMultipleItems""];
""1354_transfer"" [label=""transfer""];
""1354_listItemFromRegistry"" [label=""listItemFromRegistry""];
""1354_ownerOf"" [label=""ownerOf""];
""1354_transferFrom"" [label=""transferFrom""];
""1354_tokensOf"" [label=""tokensOf""];
""1354_setItemRegistry"" [label=""setItemRegistry""];
""1354_CryptoWaterMargin"" [label=""CryptoWaterMargin""];
""1354_calculateDevCut"" [label=""calculateDevCut""];
""1354_isAdmin"" [label=""isAdmin""];
""1354_buy"" [label=""buy""];
""1354_addAdmin"" [label=""addAdmin""];
""1354_isContract"" [label=""isContract""];
""1354_tokenExists"" [label=""tokenExists""];
""1354_populateFromItemRegistry"" -> ""1354_onlyOwner"";
""1354_allOf"" -> ""1354_ownerOf"";
""1354_approve"" -> ""1354_tokenExists"";
""1354_setItemRegistry"" -> ""1354_onlyOwner"";
""1354_allOf"" -> ""1354_nextPriceOf"";
""1354_tokenExists"" -> ""1354_priceOf"";
""1354__transfer"" -> ""1354_tokenExists"";
""1354_transfer"" -> ""1354__transfer"";
""1354_transferFrom"" -> ""1354_approvedFor"";
""1354__transfer"" -> ""1354_ownerOf"";
""1354_listMultipleItems"" -> ""1354_listItem"";
""1354_transfer"" -> ""1354_ownerOf"";
""1354_balanceOf"" -> ""1354_ownerOf"";
""1354_populateFromItemRegistry"" -> ""1354_listItemFromRegistry"";
""1354_removeAdmin"" -> ""1354_onlyOwner"";
""1354_buy"" -> ""1354_ownerOf"";
""1354_transferFrom"" -> ""1354__transfer"";
""1354_listItemFromRegistry"" -> ""1354_listItem"";
""1354_approve"" -> ""1354_ownerOf"";
""1354_setOwner"" -> ""1354_onlyOwner"";
""1354_nextPriceOf"" -> ""1354_priceOf"";
""1354_tokensOf"" -> ""1354_ownerOf"";
""1354_issueCard"" -> ""1354_onlyAdmins"";
""1354_listMultipleItems"" -> ""1354_onlyAdmins"";
""1354_withdrawAll"" -> ""1354_onlyAdmins"";
""1354_addAdmin"" -> ""1354_onlyOwner"";
""1354_withdrawAmount"" -> ""1354_onlyAdmins"";
""1354_allOf"" -> ""1354_priceOf"";
""1354_buy"" -> ""1354_priceOf"";
""1354_changePrice"" -> ""1354_onlyAdmins"";
""1354_buy"" -> ""1354_calculateDevCut"";
""1354_buy"" -> ""1354_nextPriceOf"";
""1354_buy"" -> ""1354_isContract"";
""1354_listItemFromRegistry"" -> ""1354_onlyOwner"";
""1354_listItem"" -> ""1354_onlyAdmins"";
""1354_nextPriceOf"" -> ""1354_calculateNextPrice"";
""1354_buy"" -> ""1354__transfer"";
""1354_CryptoWaterMargin"" -> ""1354_issueCard"";
""1354_tokensOf"" -> ""1354_balanceOf"";
}
"
0xb42fc86a49d6b772bb43cd031157d4aa557e387a.sol,CrowdsaleToken,"contract CrowdsaleToken is StandardToken, Configurable, Ownable { enum Stages { none, icoStart, icoEnd }",1,"subgraph cluster_856_CrowdsaleToken {
label=""CrowdsaleToken"";
""856_endIco"" [label=""endIco""];
""856_fallback"" [label=""fallback""];
""856_startIco"" [label=""startIco""];
""856_finalizeIco"" [label=""finalizeIco""];
""856_constructor"" [label=""constructor""];
""856_startIco"" -> ""856_onlyOwner"";
""856_finalizeIco"" -> ""856_onlyOwner"";
""856_finalizeIco"" -> ""856_endIco"";
}
"
0x1822435de9b923a7a8c4fbd2f6d0aa8f743d3010.sol,BONDS,contract BONDS { modifier onlyOwner(){ require(msg.sender == dev); _; },1,"subgraph cluster_1296_BONDS {
label=""BONDS"";
""1296_BONDS"" [label=""BONDS""];
""1296_gettotalBondDivs"" [label=""gettotalBondDivs""];
""1296_getBondPrice"" [label=""getBondPrice""];
""1296_getMyBalance"" [label=""getMyBalance""];
""1296_distributeYield"" [label=""distributeYield""];
""1296_addTotalBondValue"" [label=""addTotalBondValue""];
""1296_setName"" [label=""setName""];
""1296_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""1296_getOwnerBalance"" [label=""getOwnerBalance""];
""1296_withdraw"" [label=""withdraw""];
""1296_getTotalBondValue"" [label=""getTotalBondValue""];
""1296_setMaxbonds"" [label=""setMaxbonds""];
""1296_setBondPrice"" [label=""setBondPrice""];
""1296_getNextAvailableBond"" [label=""getNextAvailableBond""];
""1296_extDistributeBondFund"" [label=""extDistributeBondFund""];
""1296_setRates"" [label=""setRates""];
""1296_transfer"" [label=""transfer""];
""1296_setAutoNewbond"" [label=""setAutoNewbond""];
""1296_setAllowReferral"" [label=""setAllowReferral""];
""1296_setSymbol"" [label=""setSymbol""];
""1296_getBondOwner"" [label=""getBondOwner""];
""1296_setInitialPrice"" [label=""setInitialPrice""];
""1296_setLowerBondPrice"" [label=""setLowerBondPrice""];
""1296_buy"" [label=""buy""];
""1296_fallback"" [label=""fallback""];
""1296_addNewbond"" [label=""addNewbond""];
""1296_distributeBondFund"" [label=""distributeBondFund""];
""1296_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1296_withdrawPart"" [label=""withdrawPart""];
""1296_setBondPrice"" -> ""1296_onlyOwner"";
""1296_setSymbol"" -> ""1296_onlyOwner"";
""1296_withdrawPart"" -> ""1296_onlyOwner"";
""1296_setMaxbonds"" -> ""1296_onlyOwner"";
""1296_addNewbond"" -> ""1296_onlyOwner"";
""1296_setName"" -> ""1296_onlyOwner"";
""1296_buy"" -> ""1296_distributeYield"";
""1296_setRates"" -> ""1296_onlyOwner"";
""1296_addNewbond"" -> ""1296_addTotalBondValue"";
""1296_setAutoNewbond"" -> ""1296_onlyOwner"";
""1296_buy"" -> ""1296_distributeBondFund"";
""1296_extDistributeBondFund"" -> ""1296_onlyOwner"";
""1296_setInitialPrice"" -> ""1296_onlyOwner"";
""1296_setAllowReferral"" -> ""1296_onlyOwner"";
""1296_buy"" -> ""1296_addTotalBondValue"";
}
"
0xeef93ec835c7921038d55ee096671a94e961709b.sol,RefundVault,"contract RefundVault is Ownable { using SafeMath for uint256; enum State { Active, Refunding, Closed }",1,"subgraph cluster_1447_RefundVault {
label=""RefundVault"";
""1447_deposit"" [label=""deposit""];
""1447_enableRefunds"" [label=""enableRefunds""];
""1447_setWallet"" [label=""setWallet""];
""1447_RefundVault"" [label=""RefundVault""];
""1447_close"" [label=""close""];
""1447_refund"" [label=""refund""];
""1447_deposit"" -> ""1447_onlyOwner"";
""1447_enableRefunds"" -> ""1447_onlyOwner"";
""1447_close"" -> ""1447_onlyOwner"";
""1447_setWallet"" -> ""1447_onlyOwner"";
}
"
0xaa3fbfaf03cd50e6a44d27d10eb14333d1c02e52.sol,ETH_GAME,contract ETH_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_148_ETH_GAME {
label=""ETH_GAME"";
""148_fallback"" [label=""fallback""];
""148_Stop"" [label=""Stop""];
""148_New"" [label=""New""];
""148_Try"" [label=""Try""];
""148_constructor"" [label=""constructor""];
""148_Start"" [label=""Start""];
""148_Start"" -> ""148_isAdmin"";
""148_Stop"" -> ""148_isAdmin"";
""148_New"" -> ""148_isAdmin"";
}
"
0xc398891b43f1b91158dca87c63a88b80d000c248.sol,IBIT,"contract IBIT is ERC20 { using SafeMath for uint256; address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => bool) public Claimed; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public deadline = now + 45 * 1 days; uint public round2 = now + 35 * 1 days; uint public round1 = now + 30 * 1 days; uint256 public totalSupply = 950000000e8; uint256 public totalDistributed; uint256 public constant requestMinimum = 1 ether / 200; uint256 public tokensPerEth = 1000021e8; uint public target0drop = 5000000; uint public progress0drop = 0; address multisig = 0x723D0666908ADdc626C29407F0B5e7C0881b5185; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Distr(address indexed to, uint256 amount); event DistrFinished(); event Airdrop(address indexed _owner, uint _amount, uint _balance); event TokensPerEthUpdated(uint _tokensPerEth); event Burn(address indexed burner, uint256 value); event Add(uint256 value); bool public distributionFinished = false; modifier canDistr() { require(!distributionFinished); _; }",1,"subgraph cluster_1261_IBIT {
label=""IBIT"";
""1261_add"" [label=""add""];
""1261_withdrawAll"" [label=""withdrawAll""];
""1261_constructor"" [label=""constructor""];
""1261_fallback"" [label=""fallback""];
""1261_updateTokensPerEth"" [label=""updateTokensPerEth""];
""1261_transfer"" [label=""transfer""];
""1261_DistributeAirdrop"" [label=""DistributeAirdrop""];
""1261_finishDistribution"" [label=""finishDistribution""];
""1261_getTokenBalance"" [label=""getTokenBalance""];
""1261_approve"" [label=""approve""];
""1261_balanceOf"" [label=""balanceOf""];
""1261_allowance"" [label=""allowance""];
""1261_burn"" [label=""burn""];
""1261_transferFrom"" [label=""transferFrom""];
""1261_DistributeAirdropMultiple"" [label=""DistributeAirdropMultiple""];
""1261_transferOwnership"" [label=""transferOwnership""];
""1261_getTokens"" [label=""getTokens""];
""1261_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""1261_distr"" [label=""distr""];
""1261_Distribute"" [label=""Distribute""];
""1261_withdraw"" [label=""withdraw""];
""1261_updateTokensPerEth"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_canDistr"";
""1261_distr"" -> ""1261_canDistr"";
""1261_add"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_onlyOwner"";
""1261_transfer"" -> ""1261_onlyPayloadSize"";
""1261_transferFrom"" -> ""1261_onlyPayloadSize"";
""1261_withdrawForeignTokens"" -> ""1261_onlyOwner"";
""1261_fallback"" -> ""1261_getTokens"";
""1261_withdraw"" -> ""1261_onlyOwner"";
""1261_finishDistribution"" -> ""1261_onlyOwner"";
""1261_constructor"" -> ""1261_distr"";
""1261_transferOwnership"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_distr"";
""1261_burn"" -> ""1261_onlyOwner"";
""1261_Distribute"" -> ""1261_onlyOwner"";
""1261_getTokens"" -> ""1261_canDistr"";
""1261_DistributeAirdropMultiple"" -> ""1261_onlyOwner"";
""1261_DistributeAirdrop"" -> ""1261_Distribute"";
""1261_DistributeAirdropMultiple"" -> ""1261_Distribute"";
""1261_withdrawAll"" -> ""1261_onlyOwner"";
}
"
0xdda80deeb2db6d63247b9be73bacd00184fbc83f.sol,withdrawable,"contract withdrawable is Ownable { event ReceiveEther(address _from, uint256 _value); event WithdrawEther(address _to, uint256 _value); event WithdrawToken(address _token, address _to, uint256 _value); function () payable public { emit ReceiveEther(msg.sender, msg.value); }",1,"subgraph cluster_333_withdrawable {
label=""withdrawable"";
""333_withdrawToken"" [label=""withdrawToken""];
""333_withdraw"" [label=""withdraw""];
""333_fallback"" [label=""fallback""];
""333_withdrawToken"" -> ""333_onlyOwner"";
""333_withdraw"" -> ""333_onlyOwner"";
}
"
0xf122d58b7a4083f103b7336ab05b78d7c6a02a37.sol,PresalePool,contract PresalePool { using SafeMath for uint; uint8 public contractStage = 1; address public owner; uint constant public contributionMin = 100000000000000000; uint public maxContractBalance; uint public feePct; address public receiverAddress; uint public finalBalance; uint[] public ethRefundAmount; address public activeToken; struct Contributor { uint ethRefund; uint balance; mapping (address => uint) tokensClaimed; },1,"subgraph cluster_1116_PresalePool {
label=""PresalePool"";
""1116_checkPoolBalance"" [label=""checkPoolBalance""];
""1116_withdraw"" [label=""withdraw""];
""1116_enableTokenWithdrawals"" [label=""enableTokenWithdrawals""];
""1116__toPct"" [label=""_toPct""];
""1116_checkAvailableTokens"" [label=""checkAvailableTokens""];
""1116__applyPct"" [label=""_applyPct""];
""1116__withdraw"" [label=""_withdraw""];
""1116_PresalePool"" [label=""PresalePool""];
""1116_submitPool"" [label=""submitPool""];
""1116__ethRefund"" [label=""_ethRefund""];
""1116_tokenFallback"" [label=""tokenFallback""];
""1116_fallback"" [label=""fallback""];
""1116__ethDeposit"" [label=""_ethDeposit""];
""1116_withdrawFor"" [label=""withdrawFor""];
""1116_modifyMaxContractBalance"" [label=""modifyMaxContractBalance""];
""1116_checkContributorBalance"" [label=""checkContributorBalance""];
""1116_reopenContributions"" [label=""reopenContributions""];
""1116_closeContributions"" [label=""closeContributions""];
""1116_checkAvailableTokens"" -> ""1116__applyPct"";
""1116_enableTokenWithdrawals"" -> ""1116__toPct"";
""1116_fallback"" -> ""1116__ethRefund"";
""1116_withdraw"" -> ""1116__withdraw"";
""1116_enableTokenWithdrawals"" -> ""1116_onlyOwner"";
""1116_submitPool"" -> ""1116_onlyOwner"";
""1116_withdrawFor"" -> ""1116_onlyOwner"";
""1116_modifyMaxContractBalance"" -> ""1116_onlyOwner"";
""1116__withdraw"" -> ""1116__toPct"";
""1116_withdrawFor"" -> ""1116__withdraw"";
""1116_enableTokenWithdrawals"" -> ""1116_noReentrancy"";
""1116__withdraw"" -> ""1116__applyPct"";
""1116_submitPool"" -> ""1116_noReentrancy"";
""1116_PresalePool"" -> ""1116__toPct"";
""1116_enableTokenWithdrawals"" -> ""1116__applyPct"";
""1116_fallback"" -> ""1116__ethDeposit"";
""1116_closeContributions"" -> ""1116_onlyOwner"";
""1116_reopenContributions"" -> ""1116_onlyOwner"";
}
"
0xc3a684140448995f6abeb361c56110207da04d57.sol,SignalsSociety,"contract SignalsSociety is Ownable, Memberships { event Deposited(address account, uint amount, uint balance, uint timestamp); event MembershipPaid(address account, Membership membership, uint timestamp); mapping (address => uint) public balances; function deposit(address account, uint amount) public { balances[account] += amount; Deposited(account, amount, balances[account], now); }",1,"subgraph cluster_258_SignalsSociety {
label=""SignalsSociety"";
""258_acceptMembership"" [label=""acceptMembership""];
""258_deposit"" [label=""deposit""];
""258_fallback"" [label=""fallback""];
""258_acceptMembership"" -> ""258_getMembershipPrice"";
""258_acceptMembership"" -> ""258_onlyBot"";
""258_fallback"" -> ""258_deposit"";
}
"
0x46580533db92c418a79f91b46df70283daef7f99.sol,MultipleArbitrableTransaction,"contract MultipleArbitrableTransaction is IArbitrable { uint8 constant AMOUNT_OF_CHOICES = 2; uint8 constant SENDER_WINS = 1; uint8 constant RECEIVER_WINS = 2; enum Party {Sender, Receiver}",1,"subgraph cluster_1906_MultipleArbitrableTransaction {
label=""MultipleArbitrableTransaction"";
""1906_timeOutByReceiver"" [label=""timeOutByReceiver""];
""1906_reimburse"" [label=""reimburse""];
""1906_pay"" [label=""pay""];
""1906_getTransactionIDsByAddress"" [label=""getTransactionIDsByAddress""];
""1906_appeal"" [label=""appeal""];
""1906_rule"" [label=""rule""];
""1906_executeRuling"" [label=""executeRuling""];
""1906_timeOutBySender"" [label=""timeOutBySender""];
""1906_payArbitrationFeeByReceiver"" [label=""payArbitrationFeeByReceiver""];
""1906_payArbitrationFeeBySender"" [label=""payArbitrationFeeBySender""];
""1906_createTransaction"" [label=""createTransaction""];
""1906_raiseDispute"" [label=""raiseDispute""];
""1906_executeTransaction"" [label=""executeTransaction""];
""1906_submitEvidence"" [label=""submitEvidence""];
""1906_constructor"" [label=""constructor""];
""1906_getCountTransactions"" [label=""getCountTransactions""];
""1906_payArbitrationFeeByReceiver"" -> ""1906_raiseDispute"";
""1906_timeOutByReceiver"" -> ""1906_executeRuling"";
""1906_rule"" -> ""1906_executeRuling"";
""1906_timeOutBySender"" -> ""1906_executeRuling"";
""1906_payArbitrationFeeBySender"" -> ""1906_raiseDispute"";
}
"
0x881f21d3e2d2d4f48d815f41bea8dbdcf0e24e50.sol,DepositVault,"contract DepositVault { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event TransferOwnership(address indexed from, address indexed to); address Owner; function transferOwnership(address to) onlyOwner { TransferOwnership(Owner, to); Owner = to; }",1,"subgraph cluster_280_DepositVault {
label=""DepositVault"";
""280_transferOwnership"" [label=""transferOwnership""];
""280_Vault"" [label=""Vault""];
""280_deposit"" [label=""deposit""];
""280_withdraw"" [label=""withdraw""];
""280_WithdrawalEnabled"" [label=""WithdrawalEnabled""];
""280_lock"" [label=""lock""];
""280_ReleaseDate"" [label=""ReleaseDate""];
""280_withdrawTo"" [label=""withdrawTo""];
""280_SetReleaseDate"" [label=""SetReleaseDate""];
""280_fallback"" [label=""fallback""];
""280_MinimumDeposit"" [label=""MinimumDeposit""];
""280_withdrawToken"" [label=""withdrawToken""];
""280_Vault"" -> ""280_open"";
""280_transferOwnership"" -> ""280_onlyOwner"";
""280_withdrawTo"" -> ""280_onlyOwner"";
""280_fallback"" -> ""280_deposit"";
""280_Vault"" -> ""280_deposit"";
""280_withdrawTo"" -> ""280_WithdrawalEnabled"";
""280_deposit"" -> ""280_MinimumDeposit"";
""280_withdrawToken"" -> ""280_onlyOwner"";
""280_withdraw"" -> ""280_withdrawTo"";
}
"
0x704079e823e42a936bbaac5163434c2515473836.sol,CONUNDRUM,"contract CONUNDRUM { string public question; address questionSender; bytes32 responseHash; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_CONUNDRUM {
label=""CONUNDRUM"";
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_StopGame"" [label=""StopGame""];
""118_NewQuestion"" [label=""NewQuestion""];
}
"
0x0002325fcaaac6ebf1254a626589147bde1a2394.sol,HorseyPilot,"contract HorseyPilot { using SafeMath for uint256; event NewProposal(uint8 methodId, uint parameter, address proposer); event ProposalPassed(uint8 methodId, uint parameter, address proposer); uint8 constant votingThreshold = 2; uint256 constant proposalLife = 7 days; uint256 constant proposalCooldown = 1 days; uint256 cooldownStart; address public jokerAddress; address public knightAddress; address public paladinAddress; address[3] public voters; uint8 constant public knightEquity = 40; uint8 constant public paladinEquity = 10; address public exchangeAddress; address public tokenAddress; mapping(address => uint) internal _cBalance; struct Proposal{ address proposer; uint256 timestamp; uint256 parameter; uint8 methodId; address[] yay; address[] nay; }",1,"subgraph cluster_3096_HorseyPilot {
label=""HorseyPilot"";
""3096_transferKnightOwnership"" [label=""transferKnightOwnership""];
""3096__updateDistribution"" [label=""_updateDistribution""];
""3096_voteOnProposal"" [label=""voteOnProposal""];
""3096_constructor"" [label=""constructor""];
""3096_withdrawCeo"" [label=""withdrawCeo""];
""3096_transferJokerOwnership"" [label=""transferJokerOwnership""];
""3096_transferPaladinOwnership"" [label=""transferPaladinOwnership""];
""3096_deployChildren"" [label=""deployChildren""];
""3096_syncFunds"" [label=""syncFunds""];
""3096_getNobleBalance"" [label=""getNobleBalance""];
""3096_makeProposal"" [label=""makeProposal""];
""3096__moveBalance"" [label=""_moveBalance""];
""3096__doProposal"" [label=""_doProposal""];
""3096_transferKnightOwnership"" -> ""3096_validAddress"";
""3096_makeProposal"" -> ""3096_proposalAvailable"";
""3096_makeProposal"" -> ""3096_cooledDown"";
""3096_transferPaladinOwnership"" -> ""3096_validAddress"";
""3096_voteOnProposal"" -> ""3096__doProposal"";
""3096_transferJokerOwnership"" -> ""3096_validAddress"";
""3096_withdrawCeo"" -> ""3096_onlyCLevelAccess"";
""3096_getNobleBalance"" -> ""3096_onlyCLevelAccess"";
""3096_voteOnProposal"" -> ""3096_onlyVoters"";
""3096_voteOnProposal"" -> ""3096_notVoted"";
""3096_makeProposal"" -> ""3096_onlyCLevelAccess"";
""3096_withdrawCeo"" -> ""3096_validAddress"";
""3096_transferPaladinOwnership"" -> ""3096__moveBalance"";
""3096_withdrawCeo"" -> ""3096__updateDistribution"";
""3096__moveBalance"" -> ""3096_validAddress"";
""3096_transferJokerOwnership"" -> ""3096__moveBalance"";
""3096_transferKnightOwnership"" -> ""3096__moveBalance"";
""3096_voteOnProposal"" -> ""3096_proposalPending"";
}
"
0xf0344800bd3ffa687e4d780357961b28995a5f46.sol,QUIZ_GAME,contract QUIZ_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_QUIZ_GAME {
label=""QUIZ_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_StartGame"" [label=""StartGame""];
}
"
0x658b3573f8222c2d792ff1199933a88680b12973.sol,AccessService,contract AccessService is AccessAdmin { address public addrService; address public addrFinance; modifier onlyService() { require(msg.sender == addrService); _; },1,"subgraph cluster_369_AccessService {
label=""AccessService"";
""369_withdraw"" [label=""withdraw""];
""369_setFinance"" [label=""setFinance""];
""369_setService"" [label=""setService""];
}
"
0xc35d0837d49aa399022e133ba141b85d8809b137.sol,FUS,"contract FUS is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 5; uint256 public constant INITIAL_SUPPLY = 100000000000 * (10 ** uint256(decimals)); mapping(address => bool) touched; function FUS() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_706_FUS {
label=""FUS"";
""706__transfer"" [label=""_transfer""];
""706_FUS"" [label=""FUS""];
""706_safeWithdrawal"" [label=""safeWithdrawal""];
""706_safeWithdrawal"" -> ""706_onlyOwner"";
}
"
0x013183d8e0a14a843aa3bc170a29f959d9614d28.sol,DetherBank,"contract DetherBank is ERC223ReceivingContract, Ownable, SafeMath { using BytesLib for bytes; event receiveDth(address _from, uint amount); event receiveEth(address _from, uint amount); event sendDth(address _from, uint amount); event sendEth(address _from, uint amount); mapping(address => uint) public dthShopBalance; mapping(address => uint) public dthTellerBalance; mapping(address => uint) public ethShopBalance; mapping(address => uint) public ethTellerBalance; ERC223Basic public dth; bool public isInit = false; function setDth (address _dth) external onlyOwner { require(!isInit); dth = ERC223Basic(_dth); isInit = true; }",1,"subgraph cluster_612_DetherBank {
label=""DetherBank"";
""612_withdrawDthTeller"" [label=""withdrawDthTeller""];
""612_withdrawEth"" [label=""withdrawEth""];
""612_withdrawDthShop"" [label=""withdrawDthShop""];
""612_addEthTeller"" [label=""addEthTeller""];
""612_refundEth"" [label=""refundEth""];
""612_addTokenTeller"" [label=""addTokenTeller""];
""612_getDthShop"" [label=""getDthShop""];
""612_setDth"" [label=""setDth""];
""612_tokenFallback"" [label=""tokenFallback""];
""612_getDthTeller"" [label=""getDthTeller""];
""612_withdrawDthShopAdmin"" [label=""withdrawDthShopAdmin""];
""612_addTokenShop"" [label=""addTokenShop""];
""612_getEthBalTeller"" [label=""getEthBalTeller""];
""612_setDth"" -> ""612_onlyOwner"";
""612_withdrawEth"" -> ""612_onlyOwner"";
""612_refundEth"" -> ""612_onlyOwner"";
""612_withdrawDthShopAdmin"" -> ""612_onlyOwner"";
""612_addEthTeller"" -> ""612_add"";
""612_addTokenShop"" -> ""612_onlyOwner"";
""612_withdrawEth"" -> ""612_sub"";
""612_addTokenTeller"" -> ""612_add"";
""612_addEthTeller"" -> ""612_onlyOwner"";
""612_withdrawDthShop"" -> ""612_onlyOwner"";
""612_withdrawDthTeller"" -> ""612_onlyOwner"";
""612_addTokenShop"" -> ""612_add"";
""612_addTokenTeller"" -> ""612_onlyOwner"";
}
"
