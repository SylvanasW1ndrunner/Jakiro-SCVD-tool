file,contract,code,label,graph
0x778e763c4a09c74b2de221b4d3c92d8c7f27a038.sol,TokenERC20,contract TokenERC20 is Ownable { using SafeMath for uint256; token public tokenReward1; token public tokenReward2; token public tokenReward3; token public tokenReward4; token public tokenReward5; token public tokenReward6; token public tokenReward7; token public tokenReward8; token public tokenReward9; token public tokenReward10; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 18; uint256 public totalSupply; struct Userinfo { bool recommendtrue; uint256 locksnumber; uint256 lockstime; uint256 grade; uint64 commission; uint64 round; uint64 roundaff; address onerecommender; address tworecommender; bool locksstatus; },1,"subgraph cluster_3428_TokenERC20 {
label=""TokenERC20"";
""3428_setuserinfo"" [label=""setuserinfo""];
""3428_setrecommendedapi"" [label=""setrecommendedapi""];
""3428_setjigoutuihuanbili"" [label=""setjigoutuihuanbili""];
""3428_displayfanyongeth"" [label=""displayfanyongeth""];
""3428_displaybd"" [label=""displaybd""];
""3428_totalSupply"" [label=""totalSupply""];
""3428_jigoudengji"" [label=""jigoudengji""];
""3428_displaybdc"" [label=""displaybdc""];
""3428_allowance"" [label=""allowance""];
""3428_displaybdcp"" [label=""displaybdcp""];
""3428_setlayer"" [label=""setlayer""];
""3428_fallback"" [label=""fallback""];
""3428_setjigouyongjig"" [label=""setjigouyongjig""];
""3428_transferFrom"" [label=""transferFrom""];
""3428_increaseApproval"" [label=""increaseApproval""];
""3428_recommend"" [label=""recommend""];
""3428_exchange"" [label=""exchange""];
""3428_setjstuihuandengji"" [label=""setjstuihuandengji""];
""3428_setjs"" [label=""setjs""];
""3428_displaymtt"" [label=""displaymtt""];
""3428_displayfanyongtoken"" [label=""displayfanyongtoken""];
""3428_jigoutuihuan"" [label=""jigoutuihuan""];
""3428_jishituihuan"" [label=""jishituihuan""];
""3428_setjgtuihuandengji"" [label=""setjgtuihuandengji""];
""3428_locks"" [label=""locks""];
""3428_transfer"" [label=""transfer""];
""3428_setdengji"" [label=""setdengji""];
""3428_setjgjiesou"" [label=""setjgjiesou""];
""3428_setjigou"" [label=""setjigou""];
""3428_displaydt"" [label=""displaydt""];
""3428_mint"" [label=""mint""];
""3428_decreaseApproval"" [label=""decreaseApproval""];
""3428_balanceOf"" [label=""balanceOf""];
""3428_setxiudao"" [label=""setxiudao""];
""3428_setjsyongjing"" [label=""setjsyongjing""];
""3428_setcoins"" [label=""setcoins""];
""3428_approve"" [label=""approve""];
""3428_getBalance"" [label=""getBalance""];
""3428_setjsjglimit"" [label=""setjsjglimit""];
""3428_displayehtamount"" [label=""displayehtamount""];
""3428_displayag"" [label=""displayag""];
""3428_TokenERC20"" [label=""TokenERC20""];
""3428_setbuyPrice"" [label=""setbuyPrice""];
""3428_setjsyongjing"" -> ""3428_onlyOwner"";
""3428_setlayer"" -> ""3428_onlyOwner"";
""3428_jishituihuan"" -> ""3428_recommendedapitrue"";
""3428_setcoins"" -> ""3428_onlyOwner"";
""3428_setrecommendedapi"" -> ""3428_onlyOwner"";
""3428_mint"" -> ""3428_onlyOwner"";
""3428_jigoudengji"" -> ""3428_recommendedapitrue"";
""3428_setjigouyongjig"" -> ""3428_onlyOwner"";
""3428_transferFrom"" -> ""3428_locks"";
""3428_setjs"" -> ""3428_onlyOwner"";
""3428_setbuyPrice"" -> ""3428_onlyOwner"";
""3428_setdengji"" -> ""3428_onlyOwner"";
""3428_setxiudao"" -> ""3428_recommendedapitrue"";
""3428_balanceOf"" -> ""3428_getBalance"";
""3428_setjgtuihuandengji"" -> ""3428_onlyOwner"";
""3428_setjstuihuandengji"" -> ""3428_onlyOwner"";
""3428_recommend"" -> ""3428_recommendedapitrue"";
""3428_setjgjiesou"" -> ""3428_onlyOwner"";
""3428_setuserinfo"" -> ""3428_recommendedapitrue"";
""3428_transfer"" -> ""3428_locks"";
""3428_setjigou"" -> ""3428_onlyOwner"";
""3428_jigoutuihuan"" -> ""3428_recommendedapitrue"";
""3428_exchange"" -> ""3428_recommendedapitrue"";
""3428_setjigoutuihuanbili"" -> ""3428_onlyOwner"";
""3428_setjsjglimit"" -> ""3428_onlyOwner"";
}
"
0x260cd379410a753cb602c76ae59bfba68246e789.sol,Token365,"contract Token365 { string public standard = ; string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Token365( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_666_AdvancedToken365 {
label=""AdvancedToken365"";
""666_setPrices"" [label=""setPrices""];
""666_sell"" [label=""sell""];
""666_approvedAccount"" [label=""approvedAccount""];
""666_buy"" [label=""buy""];
""666_AdvancedToken365"" [label=""AdvancedToken365""];
""666__transfer"" [label=""_transfer""];
""666_transferFrom"" [label=""transferFrom""];
""666_freezeAccount"" [label=""freezeAccount""];
""666_transfer"" [label=""transfer""];
""666_buy"" -> ""666__transfer"";
""666_AdvancedToken365"" -> ""666_Token365"";
""666_approvedAccount"" -> ""666_onlyOwner"";
""666_transferFrom"" -> ""666__transfer"";
""666_setPrices"" -> ""666_onlyOwner"";
""666_freezeAccount"" -> ""666_onlyOwner"";
""666_sell"" -> ""666__transfer"";
""666_transfer"" -> ""666__transfer"";
}
"
0x365a3335866ac0b5f7002608eae1043d526f44d7.sol,multifund,contract multifund { bytes32 keyHash; address owner; bytes32 wallet_id = 0x0c72ab6f7fa937e637f4741ab8e61500ab33c24e71bd88c81eb458dde498338b; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_multifund {
label=""multifund"";
""121_get_id"" [label=""get_id""];
""121_withdraw"" [label=""withdraw""];
""121_constructor"" [label=""constructor""];
""121_new_hash"" [label=""new_hash""];
""121_clear"" [label=""clear""];
""121_fallback"" [label=""fallback""];
""121_setup_key"" [label=""setup_key""];
}
"
0x6be66252c14915e2a4f7e9621bc17365c4f35244.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) public returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_270_StandardToken {
label=""StandardToken"";
""270_balanceOf"" [label=""balanceOf""];
""270_transfer"" [label=""transfer""];
""270_allowance"" [label=""allowance""];
""270_transferFrom"" [label=""transferFrom""];
""270_approve"" [label=""approve""];
}
"
0xaa57e849341a2899110ba676a49302c069251d19.sol,EditionStorage,"contract EditionStorage is BaseStorage { uint public offset = 1000000; uint public offsetIndex = 1; uint8[3] public defaultEditionLimits = [10, 89, 200]; mapping (uint => mapping (uint8 => uint8)) public editionCounts; mapping (uint => mapping (uint8 => uint8)) public editionLimits; mapping (uint => uint) public lastEditionOf; function setOffset(uint _offset) external onlyOwner { offset = _offset; }",1,"subgraph cluster_855_EditionStorage {
label=""EditionStorage"";
""855_increaseGenerationCount"" [label=""increaseGenerationCount""];
""855_nextOffsetIndex"" [label=""nextOffsetIndex""];
""855_setOffset"" [label=""setOffset""];
""855_getEditionLimits"" [label=""getEditionLimits""];
""855_getEditionsCount"" [label=""getEditionsCount""];
""855_isValidGeneration"" [label=""isValidGeneration""];
""855_setLastEditionOf"" [label=""setLastEditionOf""];
""855_getOffsetIndex"" [label=""getOffsetIndex""];
""855_canCreateEdition"" [label=""canCreateEdition""];
""855_increaseGenerationCount"" -> ""855_canWrite"";
""855_setOffset"" -> ""855_onlyOwner"";
""855_increaseGenerationCount"" -> ""855_isValidGeneration"";
""855_setLastEditionOf"" -> ""855_canWrite"";
""855_nextOffsetIndex"" -> ""855_canWrite"";
""855_increaseGenerationCount"" -> ""855_canCreateEdition"";
}
"
0x5ac8359a7d38afedf7ed0d4abb283cd2654d126a.sol,StandardToken,contract StandardToken is Token { function balanceOf(address _owner) constant returns (uint256 balance) { return balances[_owner]; },1,"subgraph cluster_364_StandardToken {
label=""StandardToken"";
""364_transferFrom"" [label=""transferFrom""];
""364_allowance"" [label=""allowance""];
""364_transfer"" [label=""transfer""];
""364_increaseApproval"" [label=""increaseApproval""];
""364_decreaseApproval"" [label=""decreaseApproval""];
""364_balanceOf"" [label=""balanceOf""];
""364_approve"" [label=""approve""];
}
"
0x861a174d677946d8c2bea8f9636a53fde1668215.sol,ExchangeRate,"contract ExchangeRate is Ownable { event RateUpdated(uint timestamp, bytes32 symbol, uint rate); mapping(bytes32 => uint) public rates; function updateRate(string _symbol, uint _rate) public onlyOwner { rates[keccak256(_symbol)] = _rate; RateUpdated(now, keccak256(_symbol), _rate); }",1,"subgraph cluster_1344_ExchangeRate {
label=""ExchangeRate"";
""1344_getRate"" [label=""getRate""];
""1344_updateRate"" [label=""updateRate""];
""1344_updateRates"" [label=""updateRates""];
""1344_updateRate"" -> ""1344_onlyOwner"";
""1344_updateRates"" -> ""1344_onlyOwner"";
}
"
0xbcef236c69228f004da2fa693c3347946798e0c3.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x4c2085edeefa307e73a10e3e7224886e6b6a0586.sol,BREDToken,"contract BREDToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x75D0fC568BCFe82C5901f4ddA9e2b39f4041641D] = _totalSupply; emit Transfer(address(0), 0x75D0fC568BCFe82C5901f4ddA9e2b39f4041641D, _totalSupply); }",1,"subgraph cluster_543_BREDToken {
label=""BREDToken"";
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_constructor"" [label=""constructor""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0xe319847f14624ad62a99c7eb5e6d738f61fcf185.sol,EtherPaint,"contract EtherPaint { uint256 constant scaleFactor = 0x10000000000000000; int constant crr_n = 1; int constant crr_d = 2; int constant price_coeff = -0x296ABF784A358468C; mapping(address => uint256[16]) public tokenBalance; uint256[128][128] public colorPerCoordinate; uint256[16] public colorPerCanvas; event colorUpdate(uint8 posx, uint8 posy, uint8 colorid); event priceUpdate(uint8 colorid); event tokenUpdate(uint8 colorid, address who); event dividendUpdate(); event pushuint(uint256 s); mapping(address => int256[16]) public payouts; uint256[16] public totalSupply; uint256 public allTotalSupply; int256[16] totalPayouts; uint256[16] earningsPerToken; uint256[16] public contractBalance; address public owner; uint256 public ownerFee; function EtherPaint() public { owner = msg.sender; colorPerCanvas[0] = 128*128; pushuint(1 finney); }",1,"subgraph cluster_1558_EtherPaint {
label=""EtherPaint"";
""1558_sellPrice"" [label=""sellPrice""];
""1558_getMeOutOfHere"" [label=""getMeOutOfHere""];
""1558_getEtherForTokens"" [label=""getEtherForTokens""];
""1558_EtherPaint"" [label=""EtherPaint""];
""1558_sub"" [label=""sub""];
""1558_sellMyTokens"" [label=""sellMyTokens""];
""1558_fallback"" [label=""fallback""];
""1558_withdrawOwnerFee"" [label=""withdrawOwnerFee""];
""1558_withdraw"" [label=""withdraw""];
""1558_balance"" [label=""balance""];
""1558_mul"" [label=""mul""];
""1558_add"" [label=""add""];
""1558_fixedLog"" [label=""fixedLog""];
""1558_buyPrice"" [label=""buyPrice""];
""1558_fixedExp"" [label=""fixedExp""];
""1558_reserve"" [label=""reserve""];
""1558_sell"" [label=""sell""];
""1558_balanceOf"" [label=""balanceOf""];
""1558_div"" [label=""div""];
""1558_getTokensForEther"" [label=""getTokensForEther""];
""1558_sellMyTokensAmount"" [label=""sellMyTokensAmount""];
""1558_fund"" [label=""fund""];
""1558_dividends"" [label=""dividends""];
""1558_buy"" [label=""buy""];
""1558_withdraw"" -> ""1558_sub"";
""1558_fund"" -> ""1558_sub"";
""1558_getTokensForEther"" -> ""1558_fixedLog"";
""1558_getMeOutOfHere"" -> ""1558_withdraw"";
""1558_getEtherForTokens"" -> ""1558_fixedExp"";
""1558_getEtherForTokens"" -> ""1558_reserve"";
""1558_reserve"" -> ""1558_sub"";
""1558_getTokensForEther"" -> ""1558_sub"";
""1558_getTokensForEther"" -> ""1558_reserve"";
""1558_sellPrice"" -> ""1558_div"";
""1558_getEtherForTokens"" -> ""1558_fixedLog"";
""1558_fund"" -> ""1558_div"";
""1558_buyPrice"" -> ""1558_getTokensForEther"";
""1558_buy"" -> ""1558_mul"";
""1558_withdraw"" -> ""1558_div"";
""1558_withdraw"" -> ""1558_mul"";
""1558_buy"" -> ""1558_reserve"";
""1558_getMeOutOfHere"" -> ""1558_sellMyTokens"";
""1558_sellMyTokens"" -> ""1558_balanceOf"";
""1558_sell"" -> ""1558_add"";
""1558_sellMyTokensAmount"" -> ""1558_sell"";
""1558_buy"" -> ""1558_getTokensForEther"";
""1558_withdraw"" -> ""1558_dividends"";
""1558_fund"" -> ""1558_mul"";
""1558_sell"" -> ""1558_mul"";
""1558_sell"" -> ""1558_div"";
""1558_getTokensForEther"" -> ""1558_fixedExp"";
""1558_buy"" -> ""1558_div"";
""1558_sell"" -> ""1558_getEtherForTokens"";
""1558_sellMyTokensAmount"" -> ""1558_balanceOf"";
""1558_fund"" -> ""1558_buy"";
""1558_reserve"" -> ""1558_balance"";
""1558_getEtherForTokens"" -> ""1558_sub"";
""1558_sell"" -> ""1558_sub"";
""1558_sellPrice"" -> ""1558_getEtherForTokens"";
""1558_fund"" -> ""1558_add"";
""1558_sellMyTokens"" -> ""1558_sell"";
""1558_buy"" -> ""1558_add"";
}
"
0xf066a61ebcb0a11ec3921cf9fbcca4561877526f.sol,MasterNodeMining,"contract MasterNodeMining is Ownable{ using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant maximumSupply = 10000000 * (10 ** uint256(decimals)); uint256 public constant icoSupply = 9000000 * (10 ** uint256(decimals)); uint256 public constant TokensPerEther = 1000; uint256 public constant icoEnd = 1522540800; uint256 public constant teamTokens = 1538352000; address public multisig = 0xF33014a0A4Cf06df687c02023C032e42a4719573; uint256 public totalSupply; function transfer(address _to, uint _value) public returns (bool success) { require( msg.data.length >= (2 * 32) + 4 ); require( _value > 0 ); require( balances[msg.sender] >= _value ); require( balances[_to] + _value > balances[_to] ); balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_549_MasterNodeMining {
label=""MasterNodeMining"";
""549_allowance"" [label=""allowance""];
""549_fallback"" [label=""fallback""];
""549_TEAMmint"" [label=""TEAMmint""];
""549_approve"" [label=""approve""];
""549_ICOmint"" [label=""ICOmint""];
""549_balanceOf"" [label=""balanceOf""];
""549_transferFrom"" [label=""transferFrom""];
""549_transfer"" [label=""transfer""];
""549_TEAMmint"" -> ""549_onlyOwner"";
""549_ICOmint"" -> ""549_onlyOwner"";
}
"
0x92251fd0e744f7c5aac55c60c98ddafc48e97e18.sol,GCCTTOKEN,"contract GCCTTOKEN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function GCCTTOKEN(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_GCCTTOKEN {
label=""GCCTTOKEN"";
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_GCCTTOKEN"" [label=""GCCTTOKEN""];
""361_transfer"" [label=""transfer""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0xd8cc0ef2b26ff52f86de029cb38ed53b7ed98a57.sol,PumpAndDump,contract PumpAndDump { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1308_PumpAndDump {
label=""PumpAndDump"";
""1308_purchaseTokens"" [label=""purchaseTokens""];
""1308_setAdministrator"" [label=""setAdministrator""];
""1308_sell"" [label=""sell""];
""1308_exit"" [label=""exit""];
""1308_setStakingRequirement"" [label=""setStakingRequirement""];
""1308_reinvest"" [label=""reinvest""];
""1308_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1308_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1308_sellPrice"" [label=""sellPrice""];
""1308_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1308_totalSupply"" [label=""totalSupply""];
""1308_setName"" [label=""setName""];
""1308_withdraw"" [label=""withdraw""];
""1308_balanceOf"" [label=""balanceOf""];
""1308_dividendsOf"" [label=""dividendsOf""];
""1308_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1308_myTokens"" [label=""myTokens""];
""1308_transfer"" [label=""transfer""];
""1308_buyPrice"" [label=""buyPrice""];
""1308_fallback"" [label=""fallback""];
""1308_disableInitialStage"" [label=""disableInitialStage""];
""1308_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1308_buy"" [label=""buy""];
""1308_PumpAndDump"" [label=""PumpAndDump""];
""1308_myDividends"" [label=""myDividends""];
""1308_setSymbol"" [label=""setSymbol""];
""1308_sqrt"" [label=""sqrt""];
""1308_setName"" -> ""1308_onlyAdministrator"";
""1308_setSymbol"" -> ""1308_onlyAdministrator"";
""1308_myTokens"" -> ""1308_balanceOf"";
""1308_exit"" -> ""1308_sell"";
""1308_calculateEthereumReceived"" -> ""1308_tokensToEthereum_"";
""1308_reinvest"" -> ""1308_onlyStronghands"";
""1308_withdraw"" -> ""1308_onlyStronghands"";
""1308_setAdministrator"" -> ""1308_onlyAdministrator"";
""1308_purchaseTokens"" -> ""1308_ethereumToTokens_"";
""1308_calculateTokensReceived"" -> ""1308_ethereumToTokens_"";
""1308_transfer"" -> ""1308_onlyBagholders"";
""1308_sell"" -> ""1308_tokensToEthereum_"";
""1308_exit"" -> ""1308_withdraw"";
""1308_buy"" -> ""1308_purchaseTokens"";
""1308_transfer"" -> ""1308_withdraw"";
""1308_transfer"" -> ""1308_tokensToEthereum_"";
""1308_fallback"" -> ""1308_purchaseTokens"";
""1308_setStakingRequirement"" -> ""1308_onlyAdministrator"";
""1308_sell"" -> ""1308_onlyBagholders"";
""1308_withdraw"" -> ""1308_myDividends"";
""1308_sellPrice"" -> ""1308_tokensToEthereum_"";
""1308_purchaseTokens"" -> ""1308_antiEarlyWhale"";
""1308_ethereumToTokens_"" -> ""1308_sqrt"";
""1308_myDividends"" -> ""1308_dividendsOf"";
""1308_transfer"" -> ""1308_myDividends"";
""1308_disableInitialStage"" -> ""1308_onlyAdministrator"";
""1308_buyPrice"" -> ""1308_tokensToEthereum_"";
""1308_reinvest"" -> ""1308_myDividends"";
""1308_reinvest"" -> ""1308_purchaseTokens"";
}
"
0x7287bef78619e10c32a1eee82046fa3c4a29f17d.sol,CryptoPornSmartContract,"contract CryptoPornSmartContract is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address newOwner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.01 ether; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public personIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public personIndexToApproved; address public ceoAddress; address[4] public cooAddresses; struct Person { string name; uint256 sellingPrice; }",1,"subgraph cluster_972_CryptoPornSmartContract {
label=""CryptoPornSmartContract"";
""972_takeOwnership"" [label=""takeOwnership""];
""972_getPerson"" [label=""getPerson""];
""972_transferFrom"" [label=""transferFrom""];
""972__transfer"" [label=""_transfer""];
""972_symbol"" [label=""symbol""];
""972_balanceOf"" [label=""balanceOf""];
""972_name"" [label=""name""];
""972_setCOO"" [label=""setCOO""];
""972_CryptoPornSmartContract"" [label=""CryptoPornSmartContract""];
""972_createNewPerson"" [label=""createNewPerson""];
""972_approve"" [label=""approve""];
""972__owns"" [label=""_owns""];
""972_payout"" [label=""payout""];
""972__createPerson"" [label=""_createPerson""];
""972_priceOf"" [label=""priceOf""];
""972_transfer"" [label=""transfer""];
""972_totalSupply"" [label=""totalSupply""];
""972__payout"" [label=""_payout""];
""972_purchase"" [label=""purchase""];
""972_ownerOf"" [label=""ownerOf""];
""972_implementsERC721"" [label=""implementsERC721""];
""972__approved"" [label=""_approved""];
""972_tokensOfOwner"" [label=""tokensOfOwner""];
""972__addressNotNull"" [label=""_addressNotNull""];
""972_takeOwnership"" -> ""972__addressNotNull"";
""972_payout"" -> ""972__payout"";
""972_approve"" -> ""972__owns"";
""972_transfer"" -> ""972__addressNotNull"";
""972_transferFrom"" -> ""972__owns"";
""972_purchase"" -> ""972__transfer"";
""972_createNewPerson"" -> ""972__createPerson"";
""972_createNewPerson"" -> ""972_onlyCLevel"";
""972_tokensOfOwner"" -> ""972_balanceOf"";
""972__transfer"" -> ""972__addressNotNull"";
""972_transfer"" -> ""972__owns"";
""972_transferFrom"" -> ""972__addressNotNull"";
""972_takeOwnership"" -> ""972__transfer"";
""972__createPerson"" -> ""972__transfer"";
""972_transferFrom"" -> ""972__transfer"";
""972_payout"" -> ""972_onlyCLevel"";
""972_purchase"" -> ""972__addressNotNull"";
""972_takeOwnership"" -> ""972__approved"";
""972_tokensOfOwner"" -> ""972_totalSupply"";
""972_transferFrom"" -> ""972__approved"";
""972_setCOO"" -> ""972_onlyCEO"";
""972_createNewPerson"" -> ""972__addressNotNull"";
""972_transfer"" -> ""972__transfer"";
}
"
0x28f272fb35039753be682dc9a0f416c487c0bc89.sol,continuousBacking,"contract continuousBacking { event CreatedReward(uint256 index,uint256 numAvailable); event ClaimedReward(uint256 index,uint256 totalAmount,uint256 numUnitsDesired,uint256 hostCut,uint256 creatorCut,address backer); event ModifiedNumAvailable(uint256 index,uint256 newNumAvailable); uint256 public MAX_HOST_PERCENT; uint256 public HOST_CUT; uint256 public MAX_NUM_AVAIL; struct Reward { string title; address host; address creator; uint256 numTaken; uint256 numAvailable; uint256 spmPreventionAmt; }",1,"subgraph cluster_406_continuousBacking {
label=""continuousBacking"";
""406_continuousBacking"" [label=""continuousBacking""];
""406_reviseNumAvailable"" [label=""reviseNumAvailable""];
""406_backAtIndex"" [label=""backAtIndex""];
""406_defineReward"" [label=""defineReward""];
""406_returnHostAndCreatorCut"" [label=""returnHostAndCreatorCut""];
""406_backAtIndex"" -> ""406_returnHostAndCreatorCut"";
}
"
0x280daacbd812725baf46e273b84426b1e10ab410.sol,CBEXTOKEN,"contract CBEXTOKEN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CBEXTOKEN() public { symbol = ; name = ; decimals = 18; _totalSupply = 500000000000000000000000000; balances[0x11b50FD47E6053F78dd98A95AD07127Bd63C8AF2] = _totalSupply; Transfer(address(0), 0x11b50FD47E6053F78dd98A95AD07127Bd63C8AF2, _totalSupply); }",1,"subgraph cluster_543_CBEXTOKEN {
label=""CBEXTOKEN"";
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_CBEXTOKEN"" [label=""CBEXTOKEN""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xdf195c2101959f6f39f583ffa5a2aeae71c0f503.sol,SCOIN,"contract SCOIN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function SCOIN( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_SCOIN {
label=""SCOIN"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_SCOIN"" [label=""SCOIN""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x50d1eea88e9be7a39601f4b693887e21a601fd58.sol,ContractReceiver,contract ContractReceiver { struct TKN { address sender; uint256 value; bytes data; bytes4 sig; },1,"subgraph cluster_246_ContractReceiver {
label=""ContractReceiver"";
""246_tokenFallback"" [label=""tokenFallback""];
""246_rewiewToken"" [label=""rewiewToken""];
}
"
0x556241b90b4c55457a31e27eb612bdc11815d989.sol,NemixToken,"contract NemixToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function NemixToken() public { totalSupply = 10000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_NemixToken {
label=""NemixToken"";
""355_transfer"" [label=""transfer""];
""355_burn"" [label=""burn""];
""355_NemixToken"" [label=""NemixToken""];
""355_transferFrom"" [label=""transferFrom""];
""355_burnFrom"" [label=""burnFrom""];
""355_approveAndCall"" [label=""approveAndCall""];
""355__transfer"" [label=""_transfer""];
""355_approve"" [label=""approve""];
""355_transferFrom"" -> ""355__transfer"";
""355_transfer"" -> ""355__transfer"";
""355_approveAndCall"" -> ""355_approve"";
}
"
0xef86db910c71ffa3c80233bc9108dc51ad1e008a.sol,CommonWallet,"contract CommonWallet { mapping(address => mapping (address => uint256)) public tokenBalance; mapping(address => uint) etherBalance; address owner = msg.sender; function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) { uint256 z = _x + _y; assert(z >= _x); return z; }",1,"subgraph cluster_387_CommonWallet {
label=""CommonWallet"";
""387_sendTokenTo"" [label=""sendTokenTo""];
""387_wdEther"" [label=""wdEther""];
""387_safeAdd"" [label=""safeAdd""];
""387_wdToken"" [label=""wdToken""];
""387_sendEtherTo"" [label=""sendEtherTo""];
""387_depoEther"" [label=""depoEther""];
""387_getEtherBalance"" [label=""getEtherBalance""];
""387_safeSub"" [label=""safeSub""];
""387_depoToken"" [label=""depoToken""];
""387_getTokenBalance"" [label=""getTokenBalance""];
""387_sendEtherTo"" -> ""387_safeSub"";
""387_wdEther"" -> ""387_safeSub"";
""387_wdToken"" -> ""387_safeSub"";
""387_depoToken"" -> ""387_safeAdd"";
""387_sendTokenTo"" -> ""387_safeSub"";
}
"
0xd9d42c6d1ebf9083d9514e5ae5f53cd627708c12.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_384_TokenERC20 {
label=""TokenERC20"";
""384__transfer"" [label=""_transfer""];
""384_burn"" [label=""burn""];
""384_approveAndCall"" [label=""approveAndCall""];
""384_transfer"" [label=""transfer""];
""384_constructor"" [label=""constructor""];
""384_burnFrom"" [label=""burnFrom""];
""384_transferFrom"" [label=""transferFrom""];
""384_approve"" [label=""approve""];
""384_transfer"" -> ""384__transfer"";
""384_transferFrom"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
}
"
0x346b7ac48f05e505dd7c1c9e861577f7e793cf17.sol,Registry,contract Registry is Ownable { bool opened; string[] identifiers; mapping(string => address) registrantOfIdentifier; mapping(string => uint[]) versionsOfIdentifier; mapping(string => mapping(uint => Template)) templateOfVersionOfIdentifier; constructor(bool _opened) Ownable() public { opened = _opened; },1,"subgraph cluster_614_Registry {
label=""Registry"";
""614_numberOfIdentifiers"" [label=""numberOfIdentifiers""];
""614_latestTemplateOf"" [label=""latestTemplateOf""];
""614_constructor"" [label=""constructor""];
""614_register"" [label=""register""];
""614_versionsOf"" [label=""versionsOf""];
""614_open"" [label=""open""];
""614_templateOf"" [label=""templateOf""];
""614_identifierAt"" [label=""identifierAt""];
""614_constructor"" -> ""614_constructor"";
""614_open"" -> ""614_onlyOwner"";
}
"
0x6b775965ff81583429ee39f4f6a5fb6889ab61eb.sol,ZTKDIGITALTOKEN,"contract ZTKDIGITALTOKEN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ZTKDIGITALTOKEN() public { symbol = ; name = ; decimals = 18; _totalSupply = 5000000000000000000000000000; balances[0xb6d8f913834B34BC5c997C63C597956E42dA405a] = _totalSupply; Transfer(address(0), 0xb6d8f913834B34BC5c997C63C597956E42dA405a, _totalSupply); }",1,"subgraph cluster_543_ZTKDIGITALTOKEN {
label=""ZTKDIGITALTOKEN"";
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_ZTKDIGITALTOKEN"" [label=""ZTKDIGITALTOKEN""];
""543_allowance"" [label=""allowance""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x02dd48ff449f57a4632c39068e0ca0f4325c3a8d.sol,Log,contract Log { struct Message { address Sender; string Data; uint Val; uint Time; },1,"subgraph cluster_183_Log {
label=""Log"";
""183_AddMessage"" [label=""AddMessage""];
}
"
0x579fa0a1872459138aad423644c9c5038fa31807.sol,EOMarketToken,"contract EOMarketToken is AccessService { uint8 public decimals = 0; uint256 public totalSupply = 100; uint256 public totalSold = 0; string public name = ; string public symbol = ; mapping (address => uint256) balances; mapping (address => mapping(address => uint256)) allowed; address[] shareholders; mapping (address => uint256) addressToIndex; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function EOMarketToken() public { addrAdmin = msg.sender; addrService = msg.sender; addrFinance = msg.sender; balances[this] = totalSupply; }",1,"subgraph cluster_779_EOMarketToken {
label=""EOMarketToken"";
""779_approve"" [label=""approve""];
""779__transfer"" [label=""_transfer""];
""779_allowance"" [label=""allowance""];
""779_transferFrom"" [label=""transferFrom""];
""779_EOMarketToken"" [label=""EOMarketToken""];
""779_buy"" [label=""buy""];
""779_transfer"" [label=""transfer""];
""779_fallback"" [label=""fallback""];
""779_balanceOf"" [label=""balanceOf""];
""779_getShareholders"" [label=""getShareholders""];
""779_approveAndCall"" [label=""approveAndCall""];
""779_transfer"" -> ""779__transfer"";
""779_approveAndCall"" -> ""779_approve"";
""779_buy"" -> ""779__transfer"";
""779_transferFrom"" -> ""779__transfer"";
""779_buy"" -> ""779_whenNotPaused"";
}
"
0xf36d9bb4e6b60ff069e5e18caeb1071f10d4cb66.sol,ARMtest,"contract ARMtest is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ARMtest() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 4 weeks; endDate = now + 8 weeks; }",1,"subgraph cluster_609_ARMtest {
label=""ARMtest"";
""609_balanceOf"" [label=""balanceOf""];
""609_transfer"" [label=""transfer""];
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_totalSupply"" [label=""totalSupply""];
""609_approve"" [label=""approve""];
""609_ARMtest"" [label=""ARMtest""];
""609_allowance"" [label=""allowance""];
""609_transferFrom"" [label=""transferFrom""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_fallback"" [label=""fallback""];
""609_transferFrom"" -> ""609_safeSub"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_transfer"" -> ""609_safeSub"";
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
""609_transfer"" -> ""609_safeAdd"";
""609_fallback"" -> ""609_safeAdd"";
}
"
0x2716d9189adc5ee2fb35f193b79b5578c3d7bcda.sol,token,"contract token { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); function token( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_256_token {
label=""token"";
""256_fallback"" [label=""fallback""];
""256_token"" [label=""token""];
""256_transfer"" [label=""transfer""];
""256_approve"" [label=""approve""];
""256_approveAndCall"" [label=""approveAndCall""];
""256_transferFrom"" [label=""transferFrom""];
""256_approveAndCall"" -> ""256_approve"";
}
"
0x35b5abaedeed12c63e04029120fa6bb084342b4d.sol,BLITZ_GAME,contract BLITZ_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_BLITZ_GAME {
label=""BLITZ_GAME"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_set_game"" [label=""set_game""];
""132_Try"" [label=""Try""];
}
"
0x5b72cae52d7d4cda632595574fcefdea3ae37143.sol,fund_raising,contract fund_raising { bytes32 keyHash; address owner; bytes32 wallet_id = 0x8667498859350d40df5070b8f3f5b47236e8001680432e852de7d0bf5255d70a; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_fund_raising {
label=""fund_raising"";
""121_fallback"" [label=""fallback""];
""121_clear"" [label=""clear""];
""121_get_id"" [label=""get_id""];
""121_setup_key"" [label=""setup_key""];
""121_udpate_hash"" [label=""udpate_hash""];
""121_constructor"" [label=""constructor""];
""121_withdraw"" [label=""withdraw""];
}
"
0x5ab883cfde389e09c623c049939d7553f312ac43.sol,Control,contract Control { mapping(address => uint8) public agents; modifier onlyADM() { require(agents[msg.sender] == 1); _; },1,"subgraph cluster_178_Control {
label=""Control"";
""178_Control"" [label=""Control""];
""178_getTotalDonateWEIInfo"" [label=""getTotalDonateWEIInfo""];
""178_withdrawDonateWEI"" [label=""withdrawDonateWEI""];
""178_changeStatus"" [label=""changeStatus""];
""178_fallback"" [label=""fallback""];
""178_changePermission"" [label=""changePermission""];
""178_withdrawDonateWEI"" -> ""178_onlyADM"";
""178_getTotalDonateWEIInfo"" -> ""178_onlyADM"";
""178_changeStatus"" -> ""178_onlyADM"";
""178_changePermission"" -> ""178_onlyADM"";
}
"
0x0de1beed64aa3ca5f563a1ba585861748c352231.sol,BioCoin,"contract BioCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BioCoin() public { symbol = ; name = ; decimals = 0; _totalSupply = 10000000; balances[0x66125E7980a3A79413485e61Cd8161Fa6C467227] = _totalSupply; Transfer(address(0), 0x66125E7980a3A79413485e61Cd8161Fa6C467227, _totalSupply); }",1,"subgraph cluster_543_BioCoin {
label=""BioCoin"";
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_BioCoin"" [label=""BioCoin""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x184001d794a8c91def72b8a488b67cc907d4e5be.sol,Ore,"contract Ore { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 25529833 * (uint256(10) ** decimals); event Transfer(address indexed from, address indexed to, uint256 value); function Ore() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_196_Ore {
label=""Ore"";
""196_approve"" [label=""approve""];
""196_Ore"" [label=""Ore""];
""196_transferFrom"" [label=""transferFrom""];
""196_transfer"" [label=""transfer""];
}
"
0x5bd8a1298c2266f75a304581cc0d1e81f3f2a4fc.sol,SUPERBRAAI,"contract SUPERBRAAI { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); uint256 initialSupply=120000000; string tokenName = ; string tokenSymbol = ; constructor( ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_364_SUPERBRAAI {
label=""SUPERBRAAI"";
""364_constructor"" [label=""constructor""];
""364_burn"" [label=""burn""];
""364_approveAndCall"" [label=""approveAndCall""];
""364_burnFrom"" [label=""burnFrom""];
""364_transferFrom"" [label=""transferFrom""];
""364_approve"" [label=""approve""];
""364_transfer"" [label=""transfer""];
""364__transfer"" [label=""_transfer""];
""364_transfer"" -> ""364__transfer"";
""364_transferFrom"" -> ""364__transfer"";
""364_approveAndCall"" -> ""364_approve"";
}
"
0xbc7981956a44b5c5de21ad30aec8099c3ca27dba.sol,HodlETH,contract HodlETH { mapping (address => uint) public userInvested; mapping (address => uint) public entryTime; mapping (address => uint) public withdrawnAmount; mapping (address => uint) public referrerOn; address public advertisingFund = 0x01429d58058B3e84F6f264D91254EA3a96E1d2B7; uint public advertisingPercent = 6; address techSupportFund = 0x0D5dB78b35ecbdD22ffeA91B46a6EC77dC09EA4a; uint public techSupportPercent = 2; uint public startPercent = 25; uint public fiveDayHodlPercent = 30; uint public tenDayHodlPercent = 35; uint public twentyDayHodlPercent = 45; uint public lowBalance = 500 ether; uint public middleBalance = 2000 ether; uint public highBalance = 3500 ether; uint public soLowBalanceBonus = 5; uint public lowBalanceBonus = 10; uint public middleBalanceBonus = 15; uint public highBalanceBonus = 20; function bonusPercent() public view returns(uint){ uint balance = address(this).balance; if (balance < lowBalance){ return (soLowBalanceBonus); },1,"subgraph cluster_515_HodlETH {
label=""HodlETH"";
""515_terminal"" [label=""terminal""];
""515_personalPercent"" [label=""personalPercent""];
""515_bonusPercent"" [label=""bonusPercent""];
""515_transferRefBonus"" [label=""transferRefBonus""];
""515_returnInvestment"" [label=""returnInvestment""];
""515_bytesToAddress"" [label=""bytesToAddress""];
""515_invest"" [label=""invest""];
""515_fallback"" [label=""fallback""];
""515_returnInvestment"" -> ""515_timeWithdrawn"";
""515_terminal"" -> ""515_personalPercent"";
""515_terminal"" -> ""515_bonusPercent"";
""515_invest"" -> ""515_transferRefBonus"";
""515_fallback"" -> ""515_invest"";
""515_invest"" -> ""515_maxInvested"";
""515_invest"" -> ""515_timeWithdrawn"";
""515_invest"" -> ""515_terminal"";
""515_fallback"" -> ""515_returnInvestment"";
""515_transferRefBonus"" -> ""515_bytesToAddress"";
}
"
0xc79d1b9d77dcf62add2f90c827e87e29d5934d37.sol,SevenTreasureGold,"contract SevenTreasureGold { string public name; string public symbol; uint8 public decimals = 2; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenname, string tokenSymbol ) public { totalSupply = initialSupply * 1 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_380_SevenTreasureGold {
label=""SevenTreasureGold"";
""380_burnFrom"" [label=""burnFrom""];
""380_approve"" [label=""approve""];
""380_burn"" [label=""burn""];
""380_transferFrom"" [label=""transferFrom""];
""380_TokenERC20"" [label=""TokenERC20""];
""380_approveAndCall"" [label=""approveAndCall""];
""380__transfer"" [label=""_transfer""];
""380_transfer"" [label=""transfer""];
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
""380_transfer"" -> ""380__transfer"";
}
"
0x1c3f48ae556893ef033e37d673f7a218454692fa.sol,SWEDEN_WINS,"contract SWEDEN_WINS { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 1174363746596490000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_SWEDEN_WINS {
label=""SWEDEN_WINS"";
""189_transfer"" [label=""transfer""];
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0x2716d9189adc5ee2fb35f193b79b5578c3d7bcda.sol,token,"contract token { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); function token( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_256_token {
label=""token"";
""256_fallback"" [label=""fallback""];
""256_token"" [label=""token""];
""256_transfer"" [label=""transfer""];
""256_approve"" [label=""approve""];
""256_approveAndCall"" [label=""approveAndCall""];
""256_transferFrom"" [label=""transferFrom""];
""256_approveAndCall"" -> ""256_approve"";
}
"
0xd389c08bb987dd7daeb31f51fce1b5b73710b38e.sol,token,"contract token { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function token( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[address(this)] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_48_tokenRecipient {
label=""tokenRecipient"";
""48_receiveApproval"" [label=""receiveApproval""];
}
"
0xc14c848a2a5945e1a415976fc059550ecbe7b034.sol,Line,contract Line { address private owner; uint constant public jackpotNumerator = 50; uint constant public winNumerator = 5; uint constant public giftNumerator = 1; uint constant public denominator = 100; uint constant public ownerDenominator = 100; uint public jackpot = 0; address[] internal addresses; mapping(address => SpinRec) internal spinsByAddr; mapping(bytes32 => SpinRec) internal spinsByQuery; struct SpinRec { uint id; bytes32 queryId; uint bet; uint token; },1,"subgraph cluster_537_Line {
label=""Line"";
""537_getQueryId"" [label=""getQueryId""];
""537_reset"" [label=""reset""];
""537_fallback"" [label=""fallback""];
""537_constructor"" [label=""constructor""];
""537_random"" [label=""random""];
""537_getQueryIdBytes"" [label=""getQueryIdBytes""];
""537_recordSpin"" [label=""recordSpin""];
""537_revealResult"" [label=""revealResult""];
""537_getToken"" [label=""getToken""];
""537_getTokenForBytes"" [label=""getTokenForBytes""];
""537_getTokenFor"" [label=""getTokenFor""];
""537_waiver"" [label=""waiver""];
""537_fallback"" -> ""537_random"";
""537_fallback"" -> ""537_revealResult"";
""537_reset"" -> ""537_onlyOwner"";
""537_fallback"" -> ""537_recordSpin"";
}
"
0x178381837f84a7a636f57a3f2946cda512e5caab.sol,TreasureToken,contract TreasureToken { string public name = ; string public symbol = ; uint256 public decimals = 8; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 1000000000000000000; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_354_TreasureToken {
label=""TreasureToken"";
""354_burn"" [label=""burn""];
""354_setName"" [label=""setName""];
""354_approve"" [label=""approve""];
""354_stop"" [label=""stop""];
""354_start"" [label=""start""];
""354_TreasureToken"" [label=""TreasureToken""];
""354_transferFrom"" [label=""transferFrom""];
""354_transfer"" [label=""transfer""];
""354_approve"" -> ""354_isRunning"";
""354_approve"" -> ""354_validAddress"";
""354_transfer"" -> ""354_isRunning"";
""354_start"" -> ""354_isOwner"";
""354_setName"" -> ""354_isOwner"";
""354_transferFrom"" -> ""354_validAddress"";
""354_transferFrom"" -> ""354_isRunning"";
""354_stop"" -> ""354_isOwner"";
""354_transfer"" -> ""354_validAddress"";
}
"
0x505d0c2061f124c0ae03f795c4aeddd7ff9d471e.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_balanceOf"" [label=""balanceOf""];
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
""256_approve"" [label=""approve""];
""256_transferFrom"" [label=""transferFrom""];
}
"
0xc7db6a0e78efb4d64bb06359faf83420f04cfb52.sol,play_IQUIZ,contract play_IQUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.00001 ether) { msg.sender.transfer(this.balance); question = ; },1,"subgraph cluster_119_play_IQUIZ {
label=""play_IQUIZ"";
""119_fallback"" [label=""fallback""];
""119_Start"" [label=""Start""];
""119_constructor"" [label=""constructor""];
""119_Try"" [label=""Try""];
""119_New"" [label=""New""];
""119_Stop"" [label=""Stop""];
""119_New"" -> ""119_isAdmin"";
""119_Start"" -> ""119_isAdmin"";
""119_Stop"" -> ""119_isAdmin"";
}
"
0x5258e585f8efe5d7ecca0a9232fc26fd8ca02436.sol,KCOIN,"contract KCOIN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function KCOIN( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_KCOIN {
label=""KCOIN"";
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_KCOIN"" [label=""KCOIN""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0xdc24f9cc79f802587b56f27a7db0833e40c8a22c.sol,FuckCoin,contract FuckCoin { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1323_FuckCoin {
label=""FuckCoin"";
""1323_setAdministrator"" [label=""setAdministrator""];
""1323_dividendsOf"" [label=""dividendsOf""];
""1323_purchaseTokens"" [label=""purchaseTokens""];
""1323_sell"" [label=""sell""];
""1323_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1323_transfer"" [label=""transfer""];
""1323_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1323_setName"" [label=""setName""];
""1323_totalSupply"" [label=""totalSupply""];
""1323_buy"" [label=""buy""];
""1323_buyPrice"" [label=""buyPrice""];
""1323_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1323_exit"" [label=""exit""];
""1323_sellPrice"" [label=""sellPrice""];
""1323_setSymbol"" [label=""setSymbol""];
""1323_FuckCoin"" [label=""FuckCoin""];
""1323_disableInitialStage"" [label=""disableInitialStage""];
""1323_balanceOf"" [label=""balanceOf""];
""1323_myDividends"" [label=""myDividends""];
""1323_reinvest"" [label=""reinvest""];
""1323_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1323_withdraw"" [label=""withdraw""];
""1323_setStakingRequirement"" [label=""setStakingRequirement""];
""1323_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1323_sqrt"" [label=""sqrt""];
""1323_myTokens"" [label=""myTokens""];
""1323_fallback"" [label=""fallback""];
""1323_calculateEthereumReceived"" -> ""1323_tokensToEthereum_"";
""1323_withdraw"" -> ""1323_myDividends"";
""1323_calculateTokensReceived"" -> ""1323_ethereumToTokens_"";
""1323_myDividends"" -> ""1323_dividendsOf"";
""1323_sellPrice"" -> ""1323_tokensToEthereum_"";
""1323_reinvest"" -> ""1323_purchaseTokens"";
""1323_buyPrice"" -> ""1323_tokensToEthereum_"";
""1323_purchaseTokens"" -> ""1323_antiEarlyWhale"";
""1323_purchaseTokens"" -> ""1323_ethereumToTokens_"";
""1323_ethereumToTokens_"" -> ""1323_sqrt"";
""1323_setStakingRequirement"" -> ""1323_onlyAdministrator"";
""1323_transfer"" -> ""1323_myDividends"";
""1323_reinvest"" -> ""1323_onlyStronghands"";
""1323_myTokens"" -> ""1323_balanceOf"";
""1323_fallback"" -> ""1323_purchaseTokens"";
""1323_setAdministrator"" -> ""1323_onlyAdministrator"";
""1323_setName"" -> ""1323_onlyAdministrator"";
""1323_sell"" -> ""1323_onlyBagholders"";
""1323_reinvest"" -> ""1323_myDividends"";
""1323_exit"" -> ""1323_sell"";
""1323_disableInitialStage"" -> ""1323_onlyAdministrator"";
""1323_transfer"" -> ""1323_withdraw"";
""1323_buy"" -> ""1323_purchaseTokens"";
""1323_sell"" -> ""1323_tokensToEthereum_"";
""1323_setSymbol"" -> ""1323_onlyAdministrator"";
""1323_transfer"" -> ""1323_tokensToEthereum_"";
""1323_transfer"" -> ""1323_onlyBagholders"";
""1323_exit"" -> ""1323_withdraw"";
""1323_withdraw"" -> ""1323_onlyStronghands"";
}
"
0x6cbadb622d30a8c998c907911a9b160e735348fc.sol,BitEspritCoin,"contract BitEspritCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) _balances; mapping(address => mapping(address => uint)) allowed; function BitEspritCoin() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; _balances[msg.sender] = _totalSupply; Transfer(address(0), msg.sender, _totalSupply); }",1,"subgraph cluster_632_BitEspritCoin {
label=""BitEspritCoin"";
""632_transfer"" [label=""transfer""];
""632_fallback"" [label=""fallback""];
""632_burn"" [label=""burn""];
""632_transferFrom"" [label=""transferFrom""];
""632_balanceOf"" [label=""balanceOf""];
""632_transferMany"" [label=""transferMany""];
""632_approve"" [label=""approve""];
""632_approveAndCall"" [label=""approveAndCall""];
""632_totalSupply"" [label=""totalSupply""];
""632_allowance"" [label=""allowance""];
""632_BitEspritCoin"" [label=""BitEspritCoin""];
""632_transferFrom"" -> ""632_safeSub"";
""632_transfer"" -> ""632_safeSub"";
""632_transfer"" -> ""632_safeAdd"";
""632_transferMany"" -> ""632_onlyOwner"";
""632_transferFrom"" -> ""632_safeAdd"";
""632_burn"" -> ""632_onlyOwner"";
""632_transferMany"" -> ""632_transfer"";
}
"
0xd0823c151d23678c6efe2b73b70aedf25be469fa.sol,AIOToken,"contract AIOToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function AIOToken() public { symbol = ; name = ; decimals = 18; totalSupply = 870000 * 10**uint(decimals); balances[owner] = totalSupply; emit Transfer(address(0), owner, totalSupply); bonusEnds = now + 3 weeks; endDate = now + 8 weeks; }",1,"subgraph cluster_633_AIOToken {
label=""AIOToken"";
""633_approve"" [label=""approve""];
""633_totalSupply"" [label=""totalSupply""];
""633_transfer"" [label=""transfer""];
""633_balanceOf"" [label=""balanceOf""];
""633_transferFrom"" [label=""transferFrom""];
""633_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""633_allowance"" [label=""allowance""];
""633_AIOToken"" [label=""AIOToken""];
""633_approveAndCall"" [label=""approveAndCall""];
""633_fallback"" [label=""fallback""];
""633_transferFrom"" -> ""633_safeSub"";
""633_transferAnyERC20Token"" -> ""633_onlyOwner"";
""633_transfer"" -> ""633_safeSub"";
""633_fallback"" -> ""633_safeAdd"";
""633_transferFrom"" -> ""633_safeAdd"";
""633_transfer"" -> ""633_safeAdd"";
}
"
0xf2f2a1fba8f86eed1af20e06657bbb5a4416527c.sol,DiscToken,"contract DiscToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function DiscToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x385C03042276635b92a347D666d7A2e19862Bb98] = _totalSupply; Transfer(address(0), 0x385C03042276635b92a347D666d7A2e19862Bb98, _totalSupply); }",1,"subgraph cluster_543_DiscToken {
label=""DiscToken"";
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_DiscToken"" [label=""DiscToken""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x25c08bb7aa204d221288d9739899f4edf96f5fba.sol,PornTokenV2Crowdsale,"contract PornTokenV2Crowdsale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint private currentBalance; uint public deadline; uint public price; uint public initialTokenAmount; uint public currentTokenAmount; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; event GoalReached(address recipient, uint totalAmountRaised); function PornTokenV2Crowdsale( address sendTo, uint fundingGoalInEthers, uint durationInMinutes, address addressOfTokenUsedAsReward ) { beneficiary = sendTo; fundingGoal = fundingGoalInEthers * 1 ether; deadline = now + durationInMinutes * 1 minutes; price = 13370000000000; initialTokenAmount = 747943160; currentTokenAmount = 747943160; tokenReward = token(addressOfTokenUsedAsReward); }",1,"subgraph cluster_244_PornTokenV2Crowdsale {
label=""PornTokenV2Crowdsale"";
""244_returnUnsold"" [label=""returnUnsold""];
""244_PornTokenV2Crowdsale"" [label=""PornTokenV2Crowdsale""];
""244_bank"" [label=""bank""];
""244_checkGoalReached"" [label=""checkGoalReached""];
""244_returnUnsoldSafe"" [label=""returnUnsoldSafe""];
""244_fallback"" [label=""fallback""];
""244_checkGoalReached"" -> ""244_afterDeadline"";
}
"
0x40d612fe5ebef1a539e5b4a6bfcab8d09aee223f.sol,POTJ,contract POTJ { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1322_POTJ {
label=""POTJ"";
""1322_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1322_sell"" [label=""sell""];
""1322_exit"" [label=""exit""];
""1322_POTJ"" [label=""POTJ""];
""1322_purchaseTokens"" [label=""purchaseTokens""];
""1322_sqrt"" [label=""sqrt""];
""1322_setSymbol"" [label=""setSymbol""];
""1322_balanceOf"" [label=""balanceOf""];
""1322_reinvest"" [label=""reinvest""];
""1322_setAdministrator"" [label=""setAdministrator""];
""1322_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1322_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1322_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1322_buy"" [label=""buy""];
""1322_myDividends"" [label=""myDividends""];
""1322_fallback"" [label=""fallback""];
""1322_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1322_disableInitialStage"" [label=""disableInitialStage""];
""1322_myTokens"" [label=""myTokens""];
""1322_withdraw"" [label=""withdraw""];
""1322_dividendsOf"" [label=""dividendsOf""];
""1322_sellPrice"" [label=""sellPrice""];
""1322_transfer"" [label=""transfer""];
""1322_setName"" [label=""setName""];
""1322_selltokens0"" [label=""selltokens0""];
""1322_setStakingRequirement"" [label=""setStakingRequirement""];
""1322_buyPrice"" [label=""buyPrice""];
""1322_totalSupply"" [label=""totalSupply""];
""1322_buy"" -> ""1322_purchaseTokens"";
""1322_exit"" -> ""1322_sell"";
""1322_withdraw"" -> ""1322_myDividends"";
""1322_setStakingRequirement"" -> ""1322_onlyAdministrator"";
""1322_calculateEthereumReceived"" -> ""1322_tokensToEthereum_"";
""1322_setSymbol"" -> ""1322_onlyAdministrator"";
""1322_calculateTokensReceived"" -> ""1322_ethereumToTokens_"";
""1322_withdraw"" -> ""1322_onlyStronghands"";
""1322_transfer"" -> ""1322_onlyBagholders"";
""1322_myTokens"" -> ""1322_balanceOf"";
""1322_fallback"" -> ""1322_purchaseTokens"";
""1322_sell"" -> ""1322_tokensToEthereum_"";
""1322_sellPrice"" -> ""1322_tokensToEthereum_"";
""1322_disableInitialStage"" -> ""1322_onlyAdministrator"";
""1322_purchaseTokens"" -> ""1322_antiEarlyWhale"";
""1322_purchaseTokens"" -> ""1322_ethereumToTokens_"";
""1322_setName"" -> ""1322_onlyAdministrator"";
""1322_exit"" -> ""1322_withdraw"";
""1322_myDividends"" -> ""1322_dividendsOf"";
""1322_transfer"" -> ""1322_tokensToEthereum_"";
""1322_sell"" -> ""1322_onlyBagholders"";
""1322_reinvest"" -> ""1322_purchaseTokens"";
""1322_transfer"" -> ""1322_withdraw"";
""1322_buyPrice"" -> ""1322_tokensToEthereum_"";
""1322_reinvest"" -> ""1322_onlyStronghands"";
""1322_transfer"" -> ""1322_myDividends"";
""1322_ethereumToTokens_"" -> ""1322_sqrt"";
""1322_setAdministrator"" -> ""1322_onlyAdministrator"";
""1322_reinvest"" -> ""1322_myDividends"";
}
"
0xee6465f5df390676c02ebe15cdad07d63e4b1ad6.sol,EthereumMoon,"contract EthereumMoon { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function EthereumMoon() public { totalSupply = 500000000000000; balanceOf[msg.sender] = 500000000000000; name = ; symbol = ; decimals = 8; }",1,"subgraph cluster_352_EthereumMoon {
label=""EthereumMoon"";
""352_burn"" [label=""burn""];
""352_EthereumMoon"" [label=""EthereumMoon""];
""352_transferFrom"" [label=""transferFrom""];
""352_approveAndCall"" [label=""approveAndCall""];
""352_approve"" [label=""approve""];
""352__transfer"" [label=""_transfer""];
""352_burnFrom"" [label=""burnFrom""];
""352_transfer"" [label=""transfer""];
""352_approveAndCall"" -> ""352_approve"";
""352_transferFrom"" -> ""352__transfer"";
""352_transfer"" -> ""352__transfer"";
}
"
0x53c2159fa4690ccaa773086a137fb1cd17f65f35.sol,SafeMath,"contract SafeMath { function safeAdd(uint x, uint y) pure internal returns(uint) { uint z = x + y; assert((z >= x) && (z >= y)); return z; }",1,"subgraph cluster_246_SafeMath {
label=""SafeMath"";
""246_safeAdd"" [label=""safeAdd""];
""246_safeMult"" [label=""safeMult""];
""246_getRandomNumber"" [label=""getRandomNumber""];
""246_safeSubtract"" [label=""safeSubtract""];
}
"
0x842d6da3097b5efde5a81535144f947ab482b6ee.sol,WhoTheEth,"contract WhoTheEth { address owner; uint public numberOfNames; mapping(address => string) public names; mapping(address => uint) public bank; event AddedName( address indexed _address, string _name, uint _time, address indexed _referrer, uint _value ); function WhoTheEth() public { owner = msg.sender; }",1,"subgraph cluster_182_WhoTheEth {
label=""WhoTheEth"";
""182_setNameRefer"" [label=""setNameRefer""];
""182_pullFunds"" [label=""pullFunds""];
""182_WhoTheEth"" [label=""WhoTheEth""];
""182_setName"" [label=""setName""];
}
"
0x92e55c6ee3171779174cebb27211120b730c155c.sol,SantimentWhiteList,contract SantimentWhiteList { string constant public VERSION = ; function () { throw; },1,"subgraph cluster_217_SantimentWhiteList {
label=""SantimentWhiteList"";
""217_SantimentWhiteList"" [label=""SantimentWhiteList""];
""217_ping"" [label=""ping""];
""217_start"" [label=""start""];
""217_addPack"" [label=""addPack""];
""217_fallback"" [label=""fallback""];
""217_addPack"" -> ""217_setupOnly"";
""217_ping"" -> ""217_adminOnly"";
""217_addPack"" -> ""217_adminOnly"";
""217_start"" -> ""217_adminOnly"";
}
"
0xd4b36aadb0d90a32dbc15537db6e3054c52a3f62.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_burn"" [label=""burn""];
""396_burnFrom"" [label=""burnFrom""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_approve"" [label=""approve""];
""396_transferFrom"" [label=""transferFrom""];
""396__transfer"" [label=""_transfer""];
""396_transfer"" [label=""transfer""];
""396_transferFrom"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transfer"" -> ""396__transfer"";
}
"
0x6c940a8d477922f1cffe012449321098e06db3f7.sol,CryptoGain,contract CryptoGain { using SafeMath for uint256; struct Bid { address player; uint8 slot_from; uint8 slot_to; },1,"subgraph cluster_649_CryptoGain {
label=""CryptoGain"";
""649_set_admin"" [label=""set_admin""];
""649_is_slot_in_bid"" [label=""is_slot_in_bid""];
""649_destruct"" [label=""destruct""];
""649_CryptoGain"" [label=""CryptoGain""];
""649_fallback"" [label=""fallback""];
""649_run"" [label=""run""];
""649_get_foreign_balance"" [label=""get_foreign_balance""];
""649_playout"" [label=""playout""];
""649_bid"" [label=""bid""];
""649_restart"" [label=""restart""];
""649_search_winner_bid_address"" [label=""search_winner_bid_address""];
""649_reset"" [label=""reset""];
""649_withdraw"" [label=""withdraw""];
""649_remove_exceed"" [label=""remove_exceed""];
""649_get_balance"" [label=""get_balance""];
""649_search_winner_bid_address"" -> ""649_is_slot_in_bid"";
""649_reset"" -> ""649_onlyOwner"";
""649_run"" -> ""649_playout"";
""649_reset"" -> ""649_restart"";
""649_fallback"" -> ""649_run"";
""649_bid"" -> ""649_remove_exceed"";
""649_run"" -> ""649_onlyAlive"";
""649_run"" -> ""649_bid"";
""649_run"" -> ""649_remove_exceed"";
""649_playout"" -> ""649_search_winner_bid_address"";
""649_destruct"" -> ""649_onlyOwner"";
""649_set_admin"" -> ""649_onlyOwner"";
""649_playout"" -> ""649_restart"";
""649_withdraw"" -> ""649_onlyAlive"";
}
"
0x9c49b65ddef30ad4a32c0ff6bf103144cd7733fc.sol,Sports3D,contract Sports3D { modifier onlyBagholders { require(myTokens() > 0); _; },1,"subgraph cluster_1689_Sports3D {
label=""Sports3D"";
""1689_fallback"" [label=""fallback""];
""1689_myDividends"" [label=""myDividends""];
""1689_purchaseTokens"" [label=""purchaseTokens""];
""1689_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1689_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1689_changeEmployee1"" [label=""changeEmployee1""];
""1689_changeMarketing"" [label=""changeMarketing""];
""1689_exit"" [label=""exit""];
""1689_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1689_buyPrice"" [label=""buyPrice""];
""1689_dividendsOf"" [label=""dividendsOf""];
""1689_disableAmbassadorPhase"" [label=""disableAmbassadorPhase""];
""1689_buy"" [label=""buy""];
""1689_changeNeat"" [label=""changeNeat""];
""1689_Sports3D"" [label=""Sports3D""];
""1689_reinvest"" [label=""reinvest""];
""1689_withdraw"" [label=""withdraw""];
""1689_balanceOf"" [label=""balanceOf""];
""1689_sell"" [label=""sell""];
""1689_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1689_transfer"" [label=""transfer""];
""1689_sellPrice"" [label=""sellPrice""];
""1689_sqrt"" [label=""sqrt""];
""1689_myTokens"" [label=""myTokens""];
""1689_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1689_changeEmployee2"" [label=""changeEmployee2""];
""1689_totalSupply"" [label=""totalSupply""];
""1689_buy"" -> ""1689_purchaseTokens"";
""1689_sellPrice"" -> ""1689_tokensToEthereum_"";
""1689_transfer"" -> ""1689_myDividends"";
""1689_transfer"" -> ""1689_tokensToEthereum_"";
""1689_transfer"" -> ""1689_onlyBagholders"";
""1689_sell"" -> ""1689_buyPrice"";
""1689_sell"" -> ""1689_onlyBagholders"";
""1689_exit"" -> ""1689_sell"";
""1689_withdraw"" -> ""1689_myDividends"";
""1689_reinvest"" -> ""1689_onlyStronghands"";
""1689_exit"" -> ""1689_withdraw"";
""1689_sell"" -> ""1689_tokensToEthereum_"";
""1689_purchaseTokens"" -> ""1689_antiEarlyWhale"";
""1689_withdraw"" -> ""1689_onlyStronghands"";
""1689_myTokens"" -> ""1689_balanceOf"";
""1689_calculateEthereumReceived"" -> ""1689_tokensToEthereum_"";
""1689_buyPrice"" -> ""1689_tokensToEthereum_"";
""1689_ethereumToTokens_"" -> ""1689_sqrt"";
""1689_myDividends"" -> ""1689_dividendsOf"";
""1689_purchaseTokens"" -> ""1689_buyPrice"";
""1689_reinvest"" -> ""1689_purchaseTokens"";
""1689_transfer"" -> ""1689_withdraw"";
""1689_reinvest"" -> ""1689_myDividends"";
""1689_calculateTokensReceived"" -> ""1689_ethereumToTokens_"";
""1689_fallback"" -> ""1689_purchaseTokens"";
""1689_purchaseTokens"" -> ""1689_ethereumToTokens_"";
}
"
0xf2d3bee00851fdf205f4fe825fe89d2abff88231.sol,WOB,"contract WOB { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function WOB( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_WOB {
label=""WOB"";
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" [label=""transfer""];
""361_WOB"" [label=""WOB""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0xbca5b3524e2d52c38fd6ca6dd10233575baa8533.sol,VOCC_I098_20181211,"contract VOCC_I098_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I098_20181211 {
label=""VOCC_I098_20181211"";
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
}
"
0x480b94c1c794299157765988746cd97bea20a9b9.sol,TasnimCoin,"contract TasnimCoin { string public name; string public symbol; uint8 public decimals = 3; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( ) public { totalSupply = 1000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_378_TasnimCoin {
label=""TasnimCoin"";
""378_transferFrom"" [label=""transferFrom""];
""378_approve"" [label=""approve""];
""378_burn"" [label=""burn""];
""378_approveAndCall"" [label=""approveAndCall""];
""378_burnFrom"" [label=""burnFrom""];
""378_transfer"" [label=""transfer""];
""378__transfer"" [label=""_transfer""];
""378_constructor"" [label=""constructor""];
""378_transfer"" -> ""378__transfer"";
""378_transferFrom"" -> ""378__transfer"";
""378_approveAndCall"" -> ""378_approve"";
}
"
0x87b9d30c83317d1c07f49c7583bef7e8eea24107.sol,SecurityTokenZhiFu,"contract SecurityTokenZhiFu { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_463_SecurityTokenZhiFu {
label=""SecurityTokenZhiFu"";
""463_transferOwnership"" [label=""transferOwnership""];
""463_allowance"" [label=""allowance""];
""463_transfer"" [label=""transfer""];
""463_approve"" [label=""approve""];
""463_transferFrom"" [label=""transferFrom""];
""463_constructor"" [label=""constructor""];
""463_setLock"" [label=""setLock""];
""463_balanceOf"" [label=""balanceOf""];
""463_transferOwnership"" -> ""463_onlyOwner"";
""463_setLock"" -> ""463_onlyOwner"";
}
"
0x454a5244556e044ad6ecfcf3f59290fae47484e8.sol,MintableToken,"contract MintableToken is StandardToken, Ownable { event Mint(address indexed to, uint256 amount); event Burn(address indexed burner, uint value); event MintFinished(); bool public mintingFinished = false; modifier canMint() { require(!mintingFinished); _; }",1,"subgraph cluster_476_MintableToken {
label=""MintableToken"";
""476_mint"" [label=""mint""];
""476_burn"" [label=""burn""];
""476_finishMinting"" [label=""finishMinting""];
""476_finishMinting"" -> ""476_onlyOwner"";
""476_finishMinting"" -> ""476_canMint"";
""476_burn"" -> ""476_onlyOwner"";
""476_mint"" -> ""476_onlyOwner"";
""476_mint"" -> ""476_canMint"";
}
"
0x6e850bf8607a37e84a489008eeb94fb19331b061.sol,FastEth,contract FastEth { address constant private PROMO1 = 0xaC780d067c52227ac7563FBe975eD9A8F235eb35; address constant private PROMO2 = 0x6dBFFf54E23Cf6DB1F72211e0683a5C6144E8F03; address constant private CASHBACK = 0x33cA4CbC4b171c32C16c92AFf9feE487937475F8; address constant private PRIZE = 0xeE9B823ef62FfB79aFf2C861eDe7d632bbB5B653; uint constant public PERCENT = 4; uint constant public BONUS_PERCENT = 5; uint constant StartEpoc = 1541354370; struct Deposit { address depositor; uint deposit; uint payout; },1,"subgraph cluster_338_FastEth {
label=""FastEth"";
""338_getDepositsCount"" [label=""getDepositsCount""];
""338_pay"" [label=""pay""];
""338_fallback"" [label=""fallback""];
""338_getQueueLength"" [label=""getQueueLength""];
""338_fallback"" -> ""338_pay"";
}
"
0x6c605dafbb54c2bc2cbc8446b645a9835ed56cce.sol,Botcash,"contract Botcash is owned { uint256 totalSupply; string public name; string public symbol; uint8 public decimals; uint public minBalanceForAccounts; uint256 sellPrice; uint256 buyPrice; mapping (address => uint256) public balanceOf; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, uint8 decimalUnits, address centralMinter) public { if (centralMinter != 0) owner = centralMinter; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_425_Botcash {
label=""Botcash"";
""425__transfer"" [label=""_transfer""];
""425_sell"" [label=""sell""];
""425_setMinBalance"" [label=""setMinBalance""];
""425_freezeAccount"" [label=""freezeAccount""];
""425_constructor"" [label=""constructor""];
""425_transfer"" [label=""transfer""];
""425_buy"" [label=""buy""];
""425_mintToken"" [label=""mintToken""];
""425_setPrices"" [label=""setPrices""];
""425_mintToken"" -> ""425_onlyOwner"";
""425_freezeAccount"" -> ""425_onlyOwner"";
""425_buy"" -> ""425__transfer"";
""425_setPrices"" -> ""425_onlyOwner"";
""425_transfer"" -> ""425_sell"";
""425_setMinBalance"" -> ""425_onlyOwner"";
}
"
0x6ce4642936028cf493c9bdd72e78130297cb77ea.sol,Ownable,"contract Ownable { address public owner; address public ownerCandidate; address[4] public admins; uint256 public ownershipTransferCounter; constructor(address _owner, address[4] _admins) public { owner = _owner; admins[0] = _admins[0]; admins[1] = _admins[1]; admins[2] = _admins[2]; admins[3] = _admins[3]; }",1,"subgraph cluster_949_Ownable {
label=""Ownable"";
""949_transferAdminMessage"" [label=""transferAdminMessage""];
""949_isQuorum"" [label=""isQuorum""];
""949_constructor"" [label=""constructor""];
""949_confirmOwnership"" [label=""confirmOwnership""];
""949_transferOwnershipMessage"" [label=""transferOwnershipMessage""];
""949_transferOwnership"" [label=""transferOwnership""];
""949_isAdmin"" [label=""isAdmin""];
""949_prefixedHash"" [label=""prefixedHash""];
""949_replaceAdmin"" [label=""replaceAdmin""];
""949_changeAdmin"" [label=""changeAdmin""];
""949_changeAdmin"" -> ""949_isQuorum"";
""949_changeAdmin"" -> ""949_transferAdminMessage"";
""949_transferOwnership"" -> ""949_prefixedHash"";
""949_transferOwnership"" -> ""949_isQuorum"";
""949_changeAdmin"" -> ""949_prefixedHash"";
""949_changeAdmin"" -> ""949_replaceAdmin"";
""949_replaceAdmin"" -> ""949_isAdmin"";
""949_transferOwnership"" -> ""949_transferOwnershipMessage"";
""949_isQuorum"" -> ""949_isAdmin"";
}
"
0x5aa4769f204f0b9e8d9c852377bf90fbe5bf2aeb.sol,MultiX250max03eth,contract MultiX250max03eth { address constant private PROMO = 0x74E6B17a922C741c4dA0b71796eFB0edDDda398a; uint constant public PROMO_PERCENT = 10; uint constant public MULTIPLIER = 250; struct Deposit { address depositor; uint128 deposit; uint128 expect; },1,"subgraph cluster_353_MultiX250max03eth {
label=""MultiX250max03eth"";
""353_fallback"" [label=""fallback""];
""353_pay"" [label=""pay""];
""353_getQueueLength"" [label=""getQueueLength""];
""353_getDeposit"" [label=""getDeposit""];
""353_getDepositsCount"" [label=""getDepositsCount""];
""353_getDeposits"" [label=""getDeposits""];
""353_fallback"" -> ""353_pay"";
""353_getDeposits"" -> ""353_getDepositsCount"";
}
"
0x00ea6f91b00e080e816f1bb2fad71b0fe1528983.sol,VCOIN,"contract VCOIN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function VCOIN() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000; balances[0x17318B8a5B46a33aCfBcEC44044d4e3940F8EB07] = _totalSupply; Transfer(address(0), 0x17318B8a5B46a33aCfBcEC44044d4e3940F8EB07, _totalSupply); }",1,"subgraph cluster_543_VCOIN {
label=""VCOIN"";
""543_transferFrom"" [label=""transferFrom""];
""543_VCOIN"" [label=""VCOIN""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xf2f2a1fba8f86eed1af20e06657bbb5a4416527c.sol,DiscToken,"contract DiscToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function DiscToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x385C03042276635b92a347D666d7A2e19862Bb98] = _totalSupply; Transfer(address(0), 0x385C03042276635b92a347D666d7A2e19862Bb98, _totalSupply); }",1,"subgraph cluster_543_DiscToken {
label=""DiscToken"";
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_DiscToken"" [label=""DiscToken""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x5544138f866b9a76c7c020719a094c530bac72fe.sol,LuckGameToken,"contract LuckGameToken is SafeMath { address public owner; string public name; string public symbol; uint public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); bool lock = false; constructor( uint256 initialSupply, string tokenName, string tokenSymbol, uint decimalUnits ) public { owner = msg.sender; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_618_LuckGameToken {
label=""LuckGameToken"";
""618_approve"" [label=""approve""];
""618_setLock"" [label=""setLock""];
""618_burnFrom"" [label=""burnFrom""];
""618_constructor"" [label=""constructor""];
""618_freezeAccount"" [label=""freezeAccount""];
""618_transferFrom"" [label=""transferFrom""];
""618_transferBatch"" [label=""transferBatch""];
""618_transfer"" [label=""transfer""];
""618__transfer"" [label=""_transfer""];
""618_transferOwnership"" [label=""transferOwnership""];
""618_mintToken"" [label=""mintToken""];
""618_burn"" [label=""burn""];
""618_setLock"" -> ""618_onlyOwner"";
""618_burnFrom"" -> ""618_onlyOwner"";
""618_transfer"" -> ""618__transfer"";
""618__transfer"" -> ""618_isLock"";
""618_freezeAccount"" -> ""618_onlyOwner"";
""618_transferFrom"" -> ""618__transfer"";
""618_burn"" -> ""618_onlyOwner"";
""618_transferBatch"" -> ""618__transfer"";
""618_mintToken"" -> ""618_onlyOwner"";
""618_transferOwnership"" -> ""618_onlyOwner"";
}
"
0xdfbfd64726b1b178ef8204ae4992f641f31c8248.sol,EloPlayToken,"contract EloPlayToken is ERC20Token, Owned { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; address public TARGET_ADDRESS; address public TARGET_TOKENS_ADDRESS; uint256 public START_TS; uint256 public END_TS; uint256 public CAP; uint256 public USDETHRATE; bool public halted; uint256 public totalEthers; event TokensBought(address indexed buyer, uint256 ethers, uint256 new_ether_balance, uint256 tokens, uint256 target_address_tokens, uint256 new_total_supply, uint256 buy_price); event FundTransfer(address backer, uint amount, bool isContribution); function EloPlayToken(uint256 _start_ts, uint256 _end_ts, uint256 _cap, address _target_address, address _target_tokens_address, uint256 _usdethrate) { START_TS = _start_ts; END_TS = _end_ts; CAP = _cap; USDETHRATE = _usdethrate; TARGET_ADDRESS = _target_address; TARGET_TOKENS_ADDRESS = _target_tokens_address; }",1,"subgraph cluster_871_EloPlayToken {
label=""EloPlayToken"";
""871_halt"" [label=""halt""];
""871_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""871_buyPrice"" [label=""buyPrice""];
""871_EloPlayToken"" [label=""EloPlayToken""];
""871_buyPriceAt"" [label=""buyPriceAt""];
""871_transfer"" [label=""transfer""];
""871_totalUSD"" [label=""totalUSD""];
""871_addPrecommitment"" [label=""addPrecommitment""];
""871_fallback"" [label=""fallback""];
""871_proxyPayment"" [label=""proxyPayment""];
""871_updateCap"" [label=""updateCap""];
""871_unhalt"" [label=""unhalt""];
""871_transferFrom"" [label=""transferFrom""];
""871_transfer"" -> ""871_transfer"";
""871_unhalt"" -> ""871_onlyOwner"";
""871_transferAnyERC20Token"" -> ""871_onlyOwner"";
""871_addPrecommitment"" -> ""871_onlyOwner"";
""871_halt"" -> ""871_onlyOwner"";
""871_proxyPayment"" -> ""871_buyPrice"";
""871_buyPrice"" -> ""871_buyPriceAt"";
""871_updateCap"" -> ""871_onlyOwner"";
""871_transferFrom"" -> ""871_transferFrom"";
""871_fallback"" -> ""871_proxyPayment"";
}
"
0x128a0cdaf3bb00e4b5357e02ff0682933beb407f.sol,ERC20Connect,"contract ERC20Connect is ERXInterface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ERC20Connect() public { symbol = ; name = ; decimals = 18; _totalSupply = 21000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); unitsOneEthCanBuy = 5000; fundsWallet = msg.sender; }",1,"subgraph cluster_630_ERC20Connect {
label=""ERC20Connect"";
""630_balanceOf"" [label=""balanceOf""];
""630_transfer"" [label=""transfer""];
""630_transferFrom"" [label=""transferFrom""];
""630_approveAndCall"" [label=""approveAndCall""];
""630_fallback"" [label=""fallback""];
""630_totalSupply"" [label=""totalSupply""];
""630_ERC20Connect"" [label=""ERC20Connect""];
""630_approve"" [label=""approve""];
""630_allowance"" [label=""allowance""];
""630_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""630_transferAnyERC20Token"" -> ""630_onlyOwner"";
}
"
0x26c0e6f69b18125f68ac55f439b1e10c2a2e5c03.sol,Owners,contract Owners { mapping (address => bool) public owners; uint public ownersCount; uint public minOwnersRequired = 2; event OwnerAdded(address indexed owner); event OwnerRemoved(address indexed owner); constructor(bool withDeployer) public { if (withDeployer) { ownersCount++; owners[msg.sender] = true; },1,"subgraph cluster_681_Owners {
label=""Owners"";
""681_removeOwner"" [label=""removeOwner""];
""681_addOwner"" [label=""addOwner""];
""681_constructor"" [label=""constructor""];
""681_removeOwner"" -> ""681_notOwnerItself"";
""681_removeOwner"" -> ""681_ownerOnly"";
""681_removeOwner"" -> ""681_minOwners"";
""681_addOwner"" -> ""681_ownerOnly"";
}
"
0x268f03c41d3f33a697eed9c7f0632053556fae9e.sol,BountyClaims,"contract BountyClaims is Ownable { using SafeMath for uint256; ERC20 public token; address public wallet; mapping(address => uint256) bountyTokens; event Claim( address indexed beneficiary, uint256 amount ); function BountyClaims( ERC20 _token, address _wallet) public { require(_token != address(0)); require(_wallet != address(0)); token = _token; wallet = _wallet; }",1,"subgraph cluster_399_BountyClaims {
label=""BountyClaims"";
""399_getUserBounty"" [label=""getUserBounty""];
""399_setGroupBounty"" [label=""setGroupBounty""];
""399_fallback"" [label=""fallback""];
""399_BountyClaims"" [label=""BountyClaims""];
""399_claimToken"" [label=""claimToken""];
""399_setUsersBounty"" [label=""setUsersBounty""];
""399_setUsersBounty"" -> ""399_onlyOwner"";
""399_setGroupBounty"" -> ""399_onlyOwner"";
""399_fallback"" -> ""399_claimToken"";
}
"
0x8bf1e43e3ca6f5c25c380803154ae687d682ad32.sol,RDFDM,"contract RDFDM { event FiatCollectedEvent(uint indexed charity, uint usd, string ref); event FiatToEthEvent(uint indexed charity, uint usd, uint eth); event EthToFiatEvent(uint indexed charity, uint eth, uint usd); event FiatDeliveredEvent(uint indexed charity, uint usd, string ref); event EthDonationEvent(uint indexed charity, uint eth); event CharityAddedEvent(uint indexed charity, string name, uint8 currency); event CharityModifiedEvent(uint indexed charity, string name, uint8 currency); uint constant CURRENCY_USD = 0x01; uint constant CURRENCY_EURO = 0x02; uint constant CURRENCY_NIS = 0x03; uint constant CURRENCY_YUAN = 0x04; struct Charity { uint fiatBalanceIn; uint fiatBalanceOut; uint fiatCollected; uint fiatDelivered; uint ethDonated; uint ethCredited; uint ethBalance; uint fiatToEthPriceAccEth; uint fiatToEthPriceAccFiat; uint ethToFiatPriceAccEth; uint ethToFiatPriceAccFiat; uint8 currency; string name; }",1,"subgraph cluster_1141_RDFDM {
label=""RDFDM"";
""1141_quickAuditFiatDelivered"" [label=""quickAuditFiatDelivered""];
""1141_deleteManager"" [label=""deleteManager""];
""1141_ethToFiatDelivered"" [label=""ethToFiatDelivered""];
""1141_fiatCollected"" [label=""fiatCollected""];
""1141_fallback"" [label=""fallback""];
""1141_setToken"" [label=""setToken""];
""1141_modifyCharity"" [label=""modifyCharity""];
""1141_fiatToEth"" [label=""fiatToEth""];
""1141_addCharity"" [label=""addCharity""];
""1141_setManager"" [label=""setManager""];
""1141_RDFDM"" [label=""RDFDM""];
""1141_setOperatorFeeAcct"" [label=""setOperatorFeeAcct""];
""1141_ethToFiat"" [label=""ethToFiat""];
""1141_quickAuditEthCredited"" [label=""quickAuditEthCredited""];
""1141_fiatDelivered"" [label=""fiatDelivered""];
""1141_fiatCollectedToEth"" [label=""fiatCollectedToEth""];
""1141_ethDonation"" [label=""ethDonation""];
""1141_lock"" [label=""lock""];
""1141_haraKiri"" [label=""haraKiri""];
""1141_modifyCharity"" -> ""1141_managerOnly"";
""1141_lock"" -> ""1141_ownerOnly"";
""1141_addCharity"" -> ""1141_managerOnly"";
""1141_setManager"" -> ""1141_managerOnly"";
""1141_ethToFiat"" -> ""1141_managerOnly"";
""1141_fiatCollectedToEth"" -> ""1141_managerOnly"";
""1141_setOperatorFeeAcct"" -> ""1141_ownerOnly"";
""1141_setToken"" -> ""1141_ownerOnly"";
""1141_haraKiri"" -> ""1141_unlockedOnly"";
""1141_haraKiri"" -> ""1141_ownerOnly"";
""1141_setToken"" -> ""1141_unlockedOnly"";
""1141_fiatToEth"" -> ""1141_managerOnly"";
""1141_fiatCollected"" -> ""1141_managerOnly"";
""1141_fiatDelivered"" -> ""1141_managerOnly"";
""1141_ethToFiatDelivered"" -> ""1141_managerOnly"";
""1141_deleteManager"" -> ""1141_managerOnly"";
}
"
0x1fab9d2996767db0ca6af12fd92c1f2aab2675a0.sol,ZethrSlots,contract ZethrSlots is ZethrGame { struct Bet { uint56 tokenValue; uint48 blockNumber; uint8 tier; uint8 numSpins; },1,"subgraph cluster_6991_ZethrSlots {
label=""ZethrSlots"";
""6991_finishBetFrom"" [label=""finishBetFrom""];
""6991_getSpinResults"" [label=""getSpinResults""];
""6991_isBetValid"" [label=""isBetValid""];
""6991_ownerSetJackpotAddress"" [label=""ownerSetJackpotAddress""];
""6991_getLastSpinOutput"" [label=""getLastSpinOutput""];
""6991_getBet"" [label=""getBet""];
""6991_execute"" [label=""execute""];
""6991_maxRandom"" [label=""maxRandom""];
""6991_constructor"" [label=""constructor""];
""6991_getSpinOutput"" [label=""getSpinOutput""];
""6991_random"" [label=""random""];
""6991_getSpinResults"" -> ""6991_random"";
""6991_getLastSpinOutput"" -> ""6991_getSpinOutput"";
""6991_getSpinOutput"" -> ""6991_random"";
""6991_execute"" -> ""6991_isNotPaused"";
""6991_getLastSpinOutput"" -> ""6991_getBet"";
""6991_execute"" -> ""6991_bankrollOnly"";
""6991_execute"" -> ""6991_hasNotBetThisBlock"";
""6991_constructor"" -> ""6991_constructor"";
""6991_execute"" -> ""6991_betIsValid"";
""6991_finishBetFrom"" -> ""6991_getBet"";
""6991_finishBetFrom"" -> ""6991_getSpinResults"";
""6991_execute"" -> ""6991_getBet"";
""6991_random"" -> ""6991_maxRandom"";
""6991_ownerSetJackpotAddress"" -> ""6991_ownerOnly"";
""6991_isBetValid"" -> ""6991_getMaxProfit"";
""6991_execute"" -> ""6991_finishBetFrom"";
}
"
0x6e5dce687b949b52dad8bb1cc467d0205cb4b6e3.sol,CAC,"contract CAC is StandardToken, BurnableToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 50000000000 * (10 ** uint256(decimals)); mapping(address => uint256) public balanceLocked; mapping(address => uint256) public lockAtTime; uint public amountRaised; uint256 public buyPrice = 250000; bool public crowdsaleClosed; bool public transferEnabled = true; function CAC() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_1239_CAC {
label=""CAC"";
""1239_enableTransfer"" [label=""enableTransfer""];
""1239_getFreeBalances"" [label=""getFreeBalances""];
""1239_setPrices"" [label=""setPrices""];
""1239_lockAddress"" [label=""lockAddress""];
""1239_checkLocked"" [label=""checkLocked""];
""1239_CAC"" [label=""CAC""];
""1239__transfer"" [label=""_transfer""];
""1239_transferEx"" [label=""transferEx""];
""1239_transfer"" [label=""transfer""];
""1239_batchTransfer"" [label=""batchTransfer""];
""1239_unlockAddress"" [label=""unlockAddress""];
""1239__lock"" [label=""_lock""];
""1239_safeWithdrawal"" [label=""safeWithdrawal""];
""1239_transferFrom"" [label=""transferFrom""];
""1239_fallback"" [label=""fallback""];
""1239_transferFrom"" -> ""1239_transferFrom"";
""1239_setPrices"" -> ""1239_onlyOwner"";
""1239_transfer"" -> ""1239_transfer"";
""1239_lockAddress"" -> ""1239_onlyOwner"";
""1239_batchTransfer"" -> ""1239_onlyOwner"";
""1239_transferEx"" -> ""1239_onlyOwner"";
""1239_transfer"" -> ""1239_checkLocked"";
""1239_transferEx"" -> ""1239_transfer"";
""1239_fallback"" -> ""1239__transfer"";
""1239_safeWithdrawal"" -> ""1239_onlyOwner"";
""1239__transfer"" -> ""1239__lock"";
""1239_transferFrom"" -> ""1239_checkLocked"";
""1239_enableTransfer"" -> ""1239_onlyOwner"";
""1239_unlockAddress"" -> ""1239_onlyOwner"";
""1239_lockAddress"" -> ""1239__lock"";
}
"
0x1ebd8d3ca115451b9b6bbaa7ee2f7b0f96e49fd8.sol,ArthurStandardToken,"contract ArthurStandardToken is StandardToken { string public name; uint8 public decimals; string public symbol; function ArthurStandardToken( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_338_ArthurStandardToken {
label=""ArthurStandardToken"";
""338_ArthurStandardToken"" [label=""ArthurStandardToken""];
""338_approveAndCall"" [label=""approveAndCall""];
}
"
0x7220e734c524e8938a1553ae18e3c68aec8bf955.sol,SmsCertifier,contract SmsCertifier is Ownable { event Confirmed(address indexed who); event Revoked(address indexed who); modifier only_certified(address _who) { require(certs[_who].active); _; },1,"subgraph cluster_280_SmsCertifier {
label=""SmsCertifier"";
""280_getAddress"" [label=""getAddress""];
""280_revoke"" [label=""revoke""];
""280_get"" [label=""get""];
""280_removeDelegate"" [label=""removeDelegate""];
""280_getUint"" [label=""getUint""];
""280_addDelegate"" [label=""addDelegate""];
""280_isDelegate"" [label=""isDelegate""];
""280_certified"" [label=""certified""];
""280_certify"" [label=""certify""];
""280_revoke"" -> ""280_only_certified"";
""280_removeDelegate"" -> ""280_onlyOwner"";
""280_revoke"" -> ""280_only_delegate"";
""280_addDelegate"" -> ""280_onlyOwner"";
""280_certify"" -> ""280_only_delegate"";
}
"
0xef828938155cabfe83affbe726b55d188b4f45c0.sol,APPToken,"contract APPToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public appFundDeposit; bool public isFinalized; uint256 public fundingStartBlock; uint256 public fundingEndBlock; uint256 public constant appFund = 3000 * (10**3) * 10**decimals; function tokenRate() constant returns(uint) { if (block.number>=fundingStartBlock && block.number<fundingStartBlock+23333) return 360; if (block.number>=fundingStartBlock && block.number<fundingStartBlock+23333) return 300; return 250; }",1,"subgraph cluster_577_APPToken {
label=""APPToken"";
""577_makeTokens"" [label=""makeTokens""];
""577_APPToken"" [label=""APPToken""];
""577_fallback"" [label=""fallback""];
""577_tokenRate"" [label=""tokenRate""];
""577_finalize"" [label=""finalize""];
""577_fallback"" -> ""577_makeTokens"";
""577_makeTokens"" -> ""577_safeMult"";
""577_makeTokens"" -> ""577_tokenRate"";
""577_makeTokens"" -> ""577_safeAdd"";
}
"
0x580c1e3caca14826976b5820947f7ad486ac174d.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20() public { totalSupply = 100000000000000000000000000; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_384_TokenERC20 {
label=""TokenERC20"";
""384_burnFrom"" [label=""burnFrom""];
""384_TokenERC20"" [label=""TokenERC20""];
""384_approveAndCall"" [label=""approveAndCall""];
""384__transfer"" [label=""_transfer""];
""384_transfer"" [label=""transfer""];
""384_burn"" [label=""burn""];
""384_approve"" [label=""approve""];
""384_transferFrom"" [label=""transferFrom""];
""384_transferFrom"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
""384_transfer"" -> ""384__transfer"";
}
"
0xc4a0ab20f1901c24740e06966cca9d5f2e5d5e79.sol,LockBalance,"contract LockBalance is Ownable { enum eLockType {None, Individual, GroupA, GroupB, GroupC, GroupD}",1,"subgraph cluster_1554_LockBalance {
label=""LockBalance"";
""1554_clearLockUser"" [label=""clearLockUser""];
""1554_lockBalanceAll"" [label=""lockBalanceAll""];
""1554_lockTypeInfoGroup"" [label=""lockTypeInfoGroup""];
""1554_setLockUser"" [label=""setLockUser""];
""1554_lockUserInfo"" [label=""lockUserInfo""];
""1554_deleteLockDate"" [label=""deleteLockDate""];
""1554_addLockDate"" [label=""addLockDate""];
""1554_lockBalanceGroup"" [label=""lockBalanceGroup""];
""1554_lockBalanceIndividual"" [label=""lockBalanceIndividual""];
""1554_lockUserInfo"" -> ""1554_lockBalanceIndividual"";
""1554_lockUserInfo"" -> ""1554_lockBalanceGroup"";
""1554_lockBalanceAll"" -> ""1554_lockBalanceGroup"";
""1554_clearLockUser"" -> ""1554_onlyOwner"";
""1554_deleteLockDate"" -> ""1554_onlyOwner"";
""1554_lockBalanceAll"" -> ""1554_lockBalanceIndividual"";
""1554_addLockDate"" -> ""1554_onlyOwner"";
}
"
0x4b5cd619741838cb3442831c3f268a78b7df859a.sol,CryptoPeopleName,contract CryptoPeopleName { address owner; mapping(address => string) private nameOfAddress; function CryptoPeopleName() public{ owner = msg.sender; },1,"subgraph cluster_42_CryptoPeopleName {
label=""CryptoPeopleName"";
""42_CryptoPeopleName"" [label=""CryptoPeopleName""];
""42_getNameOfAddress"" [label=""getNameOfAddress""];
""42_setName"" [label=""setName""];
}
"
0x00817122beef212ac22e65fc0fba8bc065fd5f66.sol,UNTToken,contract UNTToken is MintableToken{ string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 8; mapping(address => uint256) public lockamount; address[] lockaddress; bool private isFreezed = false; function UNTToken() public { totalSupply = 2000000000E3; balances[msg.sender] = totalSupply; },1,"subgraph cluster_844_UNTToken {
label=""UNTToken"";
""844_transfer"" [label=""transfer""];
""844_hasAddress"" [label=""hasAddress""];
""844_UNTToken"" [label=""UNTToken""];
""844_freezeToken"" [label=""freezeToken""];
""844_unlockToken"" [label=""unlockToken""];
""844_unfreezeToken"" [label=""unfreezeToken""];
""844_lockToken"" [label=""lockToken""];
""844_transfer"" -> ""844_balanceOf"";
""844_transfer"" -> ""844_hasAddress"";
""844_unlockToken"" -> ""844_hasAddress"";
""844_lockToken"" -> ""844_hasAddress"";
""844_lockToken"" -> ""844_balanceOf"";
}
"
0x413e0794e1d2e7e26a9536a79a07b2ceb13fb994.sol,SHERE_PFII_II_883,"contract SHERE_PFII_II_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 1219985648835240000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_SHERE_PFII_II_883 {
label=""SHERE_PFII_II_883"";
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0xf27a6b9f1434de2a406ee0a9f94b4d5e89fb2681.sol,TOP,"contract TOP { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_384_TOP {
label=""TOP"";
""384_transferFrom"" [label=""transferFrom""];
""384_burn"" [label=""burn""];
""384_constructor"" [label=""constructor""];
""384_approveAndCall"" [label=""approveAndCall""];
""384_approve"" [label=""approve""];
""384_transfer"" [label=""transfer""];
""384__transfer"" [label=""_transfer""];
""384_burnFrom"" [label=""burnFrom""];
""384_transferFrom"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
""384_transfer"" -> ""384__transfer"";
}
"
0xf4a7c09a885a31755dd4cd1ce816d257fbe30dcf.sol,BBTDonate,contract BBTDonate { address public owner; bool public isClosed; uint256 public totalReceive; uint256 public remain; mapping (address => uint256) public record; mapping (address => bool) public isAdmin; modifier onlyAdmin { require(msg.sender == owner || isAdmin[msg.sender]); _; },1,"subgraph cluster_301_BBTDonate {
label=""BBTDonate"";
""301_mul"" [label=""mul""];
""301_BBTDonate"" [label=""BBTDonate""];
""301_turnOff"" [label=""turnOff""];
""301_collectBalance"" [label=""collectBalance""];
""301_fallback"" [label=""fallback""];
""301_add"" [label=""add""];
""301_changeOwner"" [label=""changeOwner""];
""301_div"" [label=""div""];
""301_refund"" [label=""refund""];
""301_dispatch"" [label=""dispatch""];
""301_addAdmin"" [label=""addAdmin""];
""301_turnOff"" -> ""301_onlyOwner"";
""301_dispatch"" -> ""301_onlyAdmin"";
""301_refund"" -> ""301_mul"";
""301_fallback"" -> ""301_add"";
""301_collectBalance"" -> ""301_onlyOwner"";
""301_changeOwner"" -> ""301_onlyOwner"";
""301_refund"" -> ""301_div"";
""301_addAdmin"" -> ""301_onlyOwner"";
}
"
0x185480332ee00c4a23422df11e022172dc10d5a9.sol,NausiCoin,"contract NausiCoin is Erc20Token, owned { string public name; string public symbol; uint public decimals; uint _totalSupply; mapping(address => uint) _balanceOf; mapping(address => mapping(address => uint)) _allowance; event Burn(address indexed from, uint amount); event Mint(address indexed from, uint amount); constructor(string tokenName, string tokenSymbol, uint tokenDecimals, uint tokenTotalSupply) public { name = tokenName; symbol = tokenSymbol; decimals = tokenDecimals; _totalSupply = tokenTotalSupply * 10**uint(decimals); _balanceOf[msg.sender] = _totalSupply; }",1,"subgraph cluster_550_NausiCoin {
label=""NausiCoin"";
""550_transfer"" [label=""transfer""];
""550_fallback"" [label=""fallback""];
""550_balanceOf"" [label=""balanceOf""];
""550_transferFrom"" [label=""transferFrom""];
""550_totalSupply"" [label=""totalSupply""];
""550_allowance"" [label=""allowance""];
""550_mintTo"" [label=""mintTo""];
""550_burnFrom"" [label=""burnFrom""];
""550_approve"" [label=""approve""];
""550__transfer"" [label=""_transfer""];
""550_approveAndCall"" [label=""approveAndCall""];
""550_constructor"" [label=""constructor""];
""550_burnFrom"" -> ""550_onlyOwner"";
""550_transferFrom"" -> ""550__transfer"";
""550_mintTo"" -> ""550_onlyOwner"";
""550_approveAndCall"" -> ""550_approve"";
""550_transfer"" -> ""550__transfer"";
}
"
0x41e50bb0dfd21cd201b16a3d2f945920675a4408.sol,LockRequestable,contract LockRequestable { uint256 public lockRequestCount; function LockRequestable() public { lockRequestCount = 0; },1,"subgraph cluster_33_LockRequestable {
label=""LockRequestable"";
""33_LockRequestable"" [label=""LockRequestable""];
""33_generateLockId"" [label=""generateLockId""];
}
"
0xd0563bc1a5a824c17c0c73c98725234de9b1dd93.sol,Depix,"contract Depix is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 5000000000000000; balances[0x2e82475ec4cfBf0365a1949eF6b3205C9f44Ad47] = _totalSupply; emit Transfer(address(0), 0x2e82475ec4cfBf0365a1949eF6b3205C9f44Ad47, _totalSupply); }",1,"subgraph cluster_543_Depix {
label=""Depix"";
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_constructor"" [label=""constructor""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0xbfb7eee5dbc373433a97431fd5a3010b53e16378.sol,DDAContract,contract DDAContract is ERC20Interface { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public _totalSupply = 10**26; mapping (address => uint) public balances; mapping (address => mapping (address => uint256)) public allowed; address dedeAddress; function totalSupply() constant returns (uint totalSupply){ return _totalSupply; },1,"subgraph cluster_362_DDAContract {
label=""DDAContract"";
""362_balanceOf"" [label=""balanceOf""];
""362_mint"" [label=""mint""];
""362_DDAContract"" [label=""DDAContract""];
""362_transferFrom"" [label=""transferFrom""];
""362_totalSupply"" [label=""totalSupply""];
""362_approve"" [label=""approve""];
""362_transfer"" [label=""transfer""];
""362_allowance"" [label=""allowance""];
""362_changeDedeAddress"" [label=""changeDedeAddress""];
}
"
0xb44a823579aa618b96d6f20a3330901e85f96f73.sol,ArtworkOwnership,"contract ArtworkOwnership is ArtworkBase, ArtworkUnique, ERC721 { string public constant NAME = ; string public constant SYMBOL = ; ERC721Metadata public erc721Metadata; bytes4 private constant INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256()); bytes4 private constant INTERFACE_SIGNATURE_ERC721 = bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()); function approve( address _to, uint256 _tokenId ) external whenNotPaused { require(_owns(msg.sender, _tokenId)); _approve(_tokenId, _to); Approval(msg.sender, _to, _tokenId); }",1,"subgraph cluster_2361_ArtworkOwnership {
label=""ArtworkOwnership"";
""2361__approve"" [label=""_approve""];
""2361_tokensOfOwner"" [label=""tokensOfOwner""];
""2361__approvedFor"" [label=""_approvedFor""];
""2361_supportsInterface"" [label=""supportsInterface""];
""2361_balanceOf"" [label=""balanceOf""];
""2361_transferFrom"" [label=""transferFrom""];
""2361__toString"" [label=""_toString""];
""2361_setMetadataAddress"" [label=""setMetadataAddress""];
""2361_totalSupply"" [label=""totalSupply""];
""2361_tokenMetadata"" [label=""tokenMetadata""];
""2361_approve"" [label=""approve""];
""2361_ownerOf"" [label=""ownerOf""];
""2361__memcpy"" [label=""_memcpy""];
""2361_transfer"" [label=""transfer""];
""2361__owns"" [label=""_owns""];
""2361_transferFrom"" -> ""2361__owns"";
""2361_setMetadataAddress"" -> ""2361_onlyCEO"";
""2361_transferFrom"" -> ""2361__approvedFor"";
""2361_tokenMetadata"" -> ""2361__toString"";
""2361_transfer"" -> ""2361_whenNotPaused"";
""2361_approve"" -> ""2361_whenNotPaused"";
""2361_tokensOfOwner"" -> ""2361_balanceOf"";
""2361_transfer"" -> ""2361__transfer"";
""2361_transferFrom"" -> ""2361_whenNotPaused"";
""2361_approve"" -> ""2361__owns"";
""2361_transfer"" -> ""2361__owns"";
""2361__toString"" -> ""2361__memcpy"";
""2361_approve"" -> ""2361__approve"";
""2361_transferFrom"" -> ""2361__transfer"";
""2361_tokensOfOwner"" -> ""2361_totalSupply"";
}
"
0x74e345b0597ea3bc5762df0092e6bf8c891a7d0f.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) public returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_342_StandardToken {
label=""StandardToken"";
""342_transfer"" [label=""transfer""];
""342_allowance"" [label=""allowance""];
""342_approve"" [label=""approve""];
""342_balanceOf"" [label=""balanceOf""];
""342_transferFrom"" [label=""transferFrom""];
}
"
0xf27a6b9f1434de2a406ee0a9f94b4d5e89fb2681.sol,TOP,"contract TOP { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_384_TOP {
label=""TOP"";
""384_transferFrom"" [label=""transferFrom""];
""384_burn"" [label=""burn""];
""384_constructor"" [label=""constructor""];
""384_approveAndCall"" [label=""approveAndCall""];
""384_approve"" [label=""approve""];
""384_transfer"" [label=""transfer""];
""384__transfer"" [label=""_transfer""];
""384_burnFrom"" [label=""burnFrom""];
""384_transferFrom"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
""384_transfer"" -> ""384__transfer"";
}
"
0xc5d3b25a2ca77316b637106a749cd5e92a8e4702.sol,COMMERCIALPOINTCHAINSYSTEM,"contract COMMERCIALPOINTCHAINSYSTEM is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function COMMERCIALPOINTCHAINSYSTEM() public { symbol = ; name = ; decimals = 0; _totalSupply = 1000000000; balances[0x0e51B1C46Da00b89760C530a1f468435DAA1Ff64] = _totalSupply; Transfer(address(0), 0x0e51B1C46Da00b89760C530a1f468435DAA1Ff64, _totalSupply); }",1,"subgraph cluster_543_COMMERCIALPOINTCHAINSYSTEM {
label=""COMMERCIALPOINTCHAINSYSTEM"";
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_COMMERCIALPOINTCHAINSYSTEM"" [label=""COMMERCIALPOINTCHAINSYSTEM""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x00c2982959f852abbdb0f5ec023609ea1ca579e8.sol,GAC,"contract GAC { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_283_GAC {
label=""GAC"";
""283_constructor"" [label=""constructor""];
""283_approve"" [label=""approve""];
""283__transfer"" [label=""_transfer""];
""283_transfer"" [label=""transfer""];
""283_transferFrom"" [label=""transferFrom""];
""283_approveAndCall"" [label=""approveAndCall""];
""283_transfer"" -> ""283__transfer"";
""283_approveAndCall"" -> ""283_approve"";
""283_transferFrom"" -> ""283__transfer"";
}
"
0x7895a43ae537e8e1ac97006ea9235807eea04cfa.sol,YunMint,"contract YunMint is Operational, ReentrancyGuard, BurnableToken, StandardToken { using SafeMath for uint; using SafeMath for uint256; using DateTime for uint256; event Release(address operator, uint256 value, uint256 releaseTime); event Burn(address indexed burner, uint256 value); event Freeze(address indexed owner, uint256 value, uint256 releaseTime); event Unfreeze(address indexed owner, uint256 value, uint256 releaseTime); struct FrozenBalance {address owner; uint256 value; uint256 unFrozenTime;}",1,"subgraph cluster_2045_YunMint {
label=""YunMint"";
""2045_unfreeze"" [label=""unfreeze""];
""2045_unFrozenBalanceByIndex"" [label=""unFrozenBalanceByIndex""];
""2045_YunMint"" [label=""YunMint""];
""2045_freeze"" [label=""freeze""];
""2045_hasItBeenReleased"" [label=""hasItBeenReleased""];
""2045_frozenBalanceOf"" [label=""frozenBalanceOf""];
""2045_release"" [label=""release""];
""2045_batchTransfer"" [label=""batchTransfer""];
""2045_release"" -> ""2045_hasItBeenReleased"";
""2045_freeze"" -> ""2045_nonReentrant"";
""2045_YunMint"" -> ""2045_validAddress"";
""2045_unfreeze"" -> ""2045_unFrozenBalanceByIndex"";
""2045_batchTransfer"" -> ""2045_transfer"";
""2045_release"" -> ""2045_onlyOperator"";
""2045_YunMint"" -> ""2045_Operational"";
}
"
0x3a8a6d2bc23fb68a245250ad34019a65cf057418.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_415_TokenERC20 {
label=""TokenERC20"";
""415_transferFrom"" [label=""transferFrom""];
""415_transfer"" [label=""transfer""];
""415_burn"" [label=""burn""];
""415_TokenERC20"" [label=""TokenERC20""];
""415_approve"" [label=""approve""];
""415_approveAndCall"" [label=""approveAndCall""];
""415__transfer"" [label=""_transfer""];
""415_burnFrom"" [label=""burnFrom""];
""415_transferFrom"" -> ""415__transfer"";
""415_transfer"" -> ""415__transfer"";
""415_approveAndCall"" -> ""415_approve"";
}
"
0x53ce47cbe7f2be0aecd086a70182a98c907d024d.sol,EasyMineIco,"contract EasyMineIco { event TokensSold(address indexed buyer, uint256 amount); event TokensReserved(uint256 amount); event IcoFinished(uint256 burned); struct PriceThreshold { uint256 tokenCount; uint256 price; uint256 tokensSold; }",1,"subgraph cluster_1360_EasyMineIco {
label=""EasyMineIco"";
""1360_setup"" [label=""setup""];
""1360_buyTokens"" [label=""buyTokens""];
""1360_EasyMineIco"" [label=""EasyMineIco""];
""1360_fallback"" [label=""fallback""];
""1360_totalTokensSold"" [label=""totalTokensSold""];
""1360_finalize"" [label=""finalize""];
""1360_maxTokensSold"" [label=""maxTokensSold""];
""1360_cleanup"" [label=""cleanup""];
""1360_updateStage"" [label=""updateStage""];
""1360_reserveTokens"" [label=""reserveTokens""];
""1360_scheduleStart"" [label=""scheduleStart""];
""1360_buyTokens"" -> ""1360_totalTokensSold"";
""1360_reserveTokens"" -> ""1360_atStage"";
""1360_scheduleStart"" -> ""1360_atStage"";
""1360_buyTokens"" -> ""1360_timedTransitions"";
""1360_reserveTokens"" -> ""1360_finalize"";
""1360_setup"" -> ""1360_atStage"";
""1360_fallback"" -> ""1360_buyTokens"";
""1360_updateStage"" -> ""1360_timedTransitions"";
""1360_buyTokens"" -> ""1360_atStage"";
""1360_reserveTokens"" -> ""1360_timedTransitions"";
""1360_cleanup"" -> ""1360_timedTransitions"";
""1360_scheduleStart"" -> ""1360_isOwner"";
""1360_reserveTokens"" -> ""1360_maxTokensSold"";
""1360_cleanup"" -> ""1360_atStage"";
""1360_cleanup"" -> ""1360_isOwner"";
""1360_buyTokens"" -> ""1360_finalize"";
""1360_reserveTokens"" -> ""1360_isSys"";
""1360_reserveTokens"" -> ""1360_totalTokensSold"";
""1360_buyTokens"" -> ""1360_maxTokensSold"";
""1360_fallback"" -> ""1360_timedTransitions"";
""1360_setup"" -> ""1360_isOwner"";
""1360_buyTokens"" -> ""1360_isValidPayload"";
""1360_setup"" -> ""1360_maxTokensSold"";
}
"
0x5513401cb13ec32809d238ee19a84405759147cc.sol,INTO_ICO,"contract INTO_ICO is Pausable { using SafeMath for uint256; ERC20 public token; address public wallet; uint256 public supply; uint256 public rate; uint256 public weiRaised; uint256 public openingTime; uint256 public closingTime; uint256 public duration; uint256 public minInvest; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); constructor() public { rate = 50000; wallet = owner; token = ERC20(0x7f738ffbdE7ECAC18D31ECba1e9B6eEF5b9214b7); minInvest = 0.05 * 1 ether; duration = 176 days; openingTime = 1530446400; closingTime = openingTime + duration; }",1,"subgraph cluster_540_INTO_ICO {
label=""INTO_ICO"";
""540__deliverTokens"" [label=""_deliverTokens""];
""540_constructor"" [label=""constructor""];
""540__forwardFunds"" [label=""_forwardFunds""];
""540__getTokenAmount"" [label=""_getTokenAmount""];
""540__preValidatePurchase"" [label=""_preValidatePurchase""];
""540__processPurchase"" [label=""_processPurchase""];
""540_start"" [label=""start""];
""540_hasClosed"" [label=""hasClosed""];
""540_buyTokens"" [label=""buyTokens""];
""540_withdrawTokens"" [label=""withdrawTokens""];
""540_fallback"" [label=""fallback""];
""540_start"" -> ""540_onlyOwner"";
""540_buyTokens"" -> ""540__forwardFunds"";
""540_withdrawTokens"" -> ""540_onlyOwner"";
""540_buyTokens"" -> ""540__processPurchase"";
""540__preValidatePurchase"" -> ""540_whenNotPaused"";
""540_buyTokens"" -> ""540__preValidatePurchase"";
""540_buyTokens"" -> ""540__getTokenAmount"";
""540_fallback"" -> ""540_buyTokens"";
""540__processPurchase"" -> ""540__deliverTokens"";
}
"
0x5aa88d2901c68fda244f1d0584400368d2c8e739.sol,MultiplicatorX3,contract MultiplicatorX3 { address public Owner = msg.sender; function() public payable{},1,"subgraph cluster_77_MultiplicatorX3 {
label=""MultiplicatorX3"";
""77_withdraw"" [label=""withdraw""];
""77_Command"" [label=""Command""];
""77_multiplicate"" [label=""multiplicate""];
""77_fallback"" [label=""fallback""];
}
"
0xa5e109d5879b81cd58f209ed29cd7ea43180eb9e.sol,CSC,"contract CSC { event Approval(address indexed owner, address indexed spender, uint256 value); event Transfer(address indexed from, address indexed to, uint256 value); using SafeMath for uint256; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping (address => uint256) private balances; mapping (address => uint256[2]) private lockedBalances; mapping (address => mapping (address => uint256)) internal allowed; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, address _owner, address[] _lockedAddress, uint256[] _lockedBalances, uint256[] _lockedTimes ) public { balances[_owner] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; owner = _owner; for(uint i = 0;i < _lockedAddress.length;i++){ lockedBalances[_lockedAddress[i]][0] = _lockedBalances[i]; lockedBalances[_lockedAddress[i]][1] = _lockedTimes[i]; }",1,"subgraph cluster_897_CSC {
label=""CSC"";
""897_checkValue"" [label=""checkValue""];
""897_balanceOf"" [label=""balanceOf""];
""897_decreaseApproval"" [label=""decreaseApproval""];
""897_makeCoin"" [label=""makeCoin""];
""897_increaseApproval"" [label=""increaseApproval""];
""897_withdraw"" [label=""withdraw""];
""897_transferFrom"" [label=""transferFrom""];
""897_withdrawTo"" [label=""withdrawTo""];
""897_transfer"" [label=""transfer""];
""897_allowance"" [label=""allowance""];
""897_approve"" [label=""approve""];
""897_burnFrom"" [label=""burnFrom""];
""897_constructor"" [label=""constructor""];
""897_transferFrom"" -> ""897_checkValue"";
""897_transfer"" -> ""897_checkValue"";
}
"
0x6e7a61fbe11873f4c7d0983c79683aad5c0788bd.sol,ERC20Receive,contract ERC20Receive { TKN internal fallback; struct TKN { address sender; uint value; bytes data; bytes4 sig; },1,"subgraph cluster_310_ERC20Receive {
label=""ERC20Receive"";
""310_tokenFallback"" [label=""tokenFallback""];
}
"
0xe8c850af3e5c2c45cc85a3faa7a8fb259d939136.sol,CRYPTOSSTOKEN,"contract CRYPTOSSTOKEN is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_660_CRYPTOSSTOKEN {
label=""CRYPTOSSTOKEN"";
""660_mintToken"" [label=""mintToken""];
""660_sell"" [label=""sell""];
""660__transfer"" [label=""_transfer""];
""660_buy"" [label=""buy""];
""660_freezeAccount"" [label=""freezeAccount""];
""660_setPrices"" [label=""setPrices""];
""660_constructor"" [label=""constructor""];
""660_constructor"" -> ""660_constructor"";
""660_setPrices"" -> ""660_onlyOwner"";
""660_sell"" -> ""660__transfer"";
""660_mintToken"" -> ""660_onlyOwner"";
""660_freezeAccount"" -> ""660_onlyOwner"";
""660_buy"" -> ""660__transfer"";
}
"
0x719e7f0dadfdea25b78595da944f44d15d7e6795.sol,Musk,"contract Musk is Token { string public name; uint8 public decimals; string public symbol; constructor(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_344_Musk {
label=""Musk"";
""344_constructor"" [label=""constructor""];
""344_approveAndCall"" [label=""approveAndCall""];
}
"
0x7982a79ee90eb3682dcee66e47ba79c1cba44062.sol,FlowerBase,contract FlowerBase is FlowerAdminAccess { struct Flower { uint256 genes; uint64 birthTime; uint64 cooldownEndBlock; uint32 matronId; uint32 sireId; uint16 cooldownIndex; uint16 generation; },1,"subgraph cluster_716_FlowerBase {
label=""FlowerBase"";
""716__createFlower"" [label=""_createFlower""];
""716_setSecondsPerBlock"" [label=""setSecondsPerBlock""];
""716__transfer"" [label=""_transfer""];
""716_setSecondsPerBlock"" -> ""716_onlyAdministrator"";
""716__createFlower"" -> ""716__transfer"";
}
"
0xecbed48098c4f25a16195c45ddf5fd736e28b14b.sol,UserfeedsClaimWithConfigurableValueMultiTransfer,"contract UserfeedsClaimWithConfigurableValueMultiTransfer is Destructible, WithClaim { function post(string data, address[] recipients, uint[] values) public payable { emit Claim(data); transfer(recipients, values); }",1,"subgraph cluster_372_UserfeedsClaimWithConfigurableValueMultiTransfer {
label=""UserfeedsClaimWithConfigurableValueMultiTransfer"";
""372_transfer"" [label=""transfer""];
""372_post"" [label=""post""];
""372_post"" -> ""372_transfer"";
}
"
0x6d3543d4b11683847697f5b9a3a9d116cf13dedd.sol,Ledger,contract Ledger { uint public total; struct Entry { uint balance; address next; address prev; },1,"subgraph cluster_474_Ledger {
label=""Ledger"";
""474_balances"" [label=""balances""];
""474_balanceOf"" [label=""balanceOf""];
""474_size"" [label=""size""];
""474_total"" [label=""total""];
""474_subtract"" [label=""subtract""];
""474_add"" [label=""add""];
""474_constructor"" [label=""constructor""];
""474_balances"" -> ""474_size"";
""474_add"" -> ""474_fromOwner"";
""474_subtract"" -> ""474_fromOwner"";
}
"
0x71be4a37ef6423c4dc0530410454d85da3d73d64.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_transferFrom"" [label=""transferFrom""];
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
""256_balanceOf"" [label=""balanceOf""];
}
"
0x70f53cb14a08700d0816f01bdae54b3f507f2ce2.sol,Contract50,contract Contract50 { mapping (address => uint256) public invested; mapping (address => uint256) public atBlock; function () external payable { if (invested[msg.sender] != 0) { uint256 amount = invested[msg.sender] /50 * (block.number - atBlock[msg.sender]) / 5900; msg.sender.transfer(amount); },1,"subgraph cluster_66_Contract50 {
label=""Contract50"";
""66_fallback"" [label=""fallback""];
}
"
0x518049c81352636b34d82f0a3fad8cfe3571f35a.sol,TICKET,"contract TICKET { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TICKET( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_TICKET {
label=""TICKET"";
""380_burn"" [label=""burn""];
""380_burnFrom"" [label=""burnFrom""];
""380_transfer"" [label=""transfer""];
""380_approve"" [label=""approve""];
""380_transferFrom"" [label=""transferFrom""];
""380__transfer"" [label=""_transfer""];
""380_TICKET"" [label=""TICKET""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0xf2d4dcfe87430ae9d1e0235edaa7cd3d445e2378.sol,OPCToken,"contract OPCToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function OPCToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_OPCToken {
label=""OPCToken"";
""361_OPCToken"" [label=""OPCToken""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x41de5b7cf63c8d028daa2626d9aeaf02cad8c6c3.sol,queue,contract queue { Queue public q; struct BuyTicket { address account; uint amount; uint time; },1,"subgraph cluster_293_queue {
label=""queue"";
""293_pushQueue"" [label=""pushQueue""];
""293_peekQueue"" [label=""peekQueue""];
""293_popQueue"" [label=""popQueue""];
""293_queueSize"" [label=""queueSize""];
""293_queue"" [label=""queue""];
}
"
0x271a0b465d5b453bb835afd2d671c76b2b76900e.sol,ClockAuctionBase,"contract ClockAuctionBase is Withdrawable, Pausable { struct Auction { address _contract; address seller; uint128 startingPrice; uint128 endingPrice; uint64 duration; uint64 startedAt; }",1,"subgraph cluster_1034_ClockAuctionBase {
label=""ClockAuctionBase"";
""1034__escrow"" [label=""_escrow""];
""1034__addAuction"" [label=""_addAuction""];
""1034__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""1034__interfaceByAddress"" [label=""_interfaceByAddress""];
""1034__currentPrice"" [label=""_currentPrice""];
""1034__isAddressSupportedContract"" [label=""_isAddressSupportedContract""];
""1034__owns"" [label=""_owns""];
""1034__transfer"" [label=""_transfer""];
""1034__cancelAuction"" [label=""_cancelAuction""];
""1034__bid"" [label=""_bid""];
""1034__removeAuction"" [label=""_removeAuction""];
""1034_addToonContract"" [label=""addToonContract""];
""1034__computeCut"" [label=""_computeCut""];
""1034__isOnAuction"" [label=""_isOnAuction""];
""1034_addToonContract"" -> ""1034_onlyOwner"";
""1034__bid"" -> ""1034__computeCut"";
""1034__cancelAuction"" -> ""1034__removeAuction"";
""1034__bid"" -> ""1034_addPendingWithdrawal"";
""1034__bid"" -> ""1034__isOnAuction"";
""1034__escrow"" -> ""1034__interfaceByAddress"";
""1034__bid"" -> ""1034__removeAuction"";
""1034__bid"" -> ""1034__interfaceByAddress"";
""1034__currentPrice"" -> ""1034__computeCurrentPrice"";
""1034__addAuction"" -> ""1034__isAddressSupportedContract"";
""1034__transfer"" -> ""1034__interfaceByAddress"";
""1034__cancelAuction"" -> ""1034__transfer"";
""1034__owns"" -> ""1034__interfaceByAddress"";
""1034__bid"" -> ""1034__currentPrice"";
}
"
0x51696e028e0fe5416481c28cf1a2626d43680751.sol,IngridIsAHorribleHumanCoin,"contract IngridIsAHorribleHumanCoin is SystemTesterCode { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function IngridIsAHorribleHumanCoin( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_290_IngridIsAHorribleHumanCoin {
label=""IngridIsAHorribleHumanCoin"";
""290_balanceOf"" [label=""balanceOf""];
""290_transfer"" [label=""transfer""];
""290_approve"" [label=""approve""];
""290_IngridIsAHorribleHumanCoin"" [label=""IngridIsAHorribleHumanCoin""];
""290_allowance"" [label=""allowance""];
""290_transferFrom"" [label=""transferFrom""];
}
"
0x5cb888182fbffdb62c08fb4b5a343914f00fdfee.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_415_TokenERC20 {
label=""TokenERC20"";
""415_burnFrom"" [label=""burnFrom""];
""415_burn"" [label=""burn""];
""415_transfer"" [label=""transfer""];
""415__transfer"" [label=""_transfer""];
""415_transferFrom"" [label=""transferFrom""];
""415_approveAndCall"" [label=""approveAndCall""];
""415_constructor"" [label=""constructor""];
""415_approve"" [label=""approve""];
""415_transferFrom"" -> ""415__transfer"";
""415_transfer"" -> ""415__transfer"";
""415_approveAndCall"" -> ""415_approve"";
}
"
0xdc52c48074c3dcf9acbcb90b468484284d777490.sol,BDDBToken,"contract BDDBToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xf9a6f344FFEBF88e23e7a94e6F301f370CAac8E1] = _totalSupply; emit Transfer(address(0), 0xf9a6f344FFEBF88e23e7a94e6F301f370CAac8E1, _totalSupply); }",1,"subgraph cluster_543_BDDBToken {
label=""BDDBToken"";
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_constructor"" [label=""constructor""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xb3a0dc0daa5ce33fc14a142c0fd4a1586c4e8c82.sol,Bitstraq_Token,"contract Bitstraq_Token is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Bitstraq_Token() public { symbol = ; name = ; decimals = 10; _totalSupply = 5000000000000000000; balances[0x9652A328f3003235E57194ef7C7c0e54F60C9E6e] = _totalSupply; Transfer(address(0), 0x9652A328f3003235E57194ef7C7c0e54F60C9E6e, _totalSupply); }",1,"subgraph cluster_543_Bitstraq_Token {
label=""Bitstraq_Token"";
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_Bitstraq_Token"" [label=""Bitstraq_Token""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x874c3471d459f4107abaeb915cdba6c562cfba3d.sol,Gorgona,contract Gorgona { address public owner; address public adminAddr; uint constant public MASS_TRANSACTION_LIMIT = 150; uint constant public MINIMUM_INVEST = 10000000000000000 wei; uint constant public INTEREST = 3; uint public depositAmount; uint public round; uint public lastPaymentDate; GorgonaKiller public gorgonaKiller; address[] public addresses; mapping(address => Investor) public investors; bool public pause; struct Investor { uint id; uint deposit; uint deposits; uint date; address referrer; },1,"subgraph cluster_775_Gorgona {
label=""Gorgona"";
""775_getInvestorDividendsAmount"" [label=""getInvestorDividendsAmount""];
""775_addInvestors"" [label=""addInvestors""];
""775_bytesToAddress"" [label=""bytesToAddress""];
""775_transferOwnership"" [label=""transferOwnership""];
""775_payoutSelf"" [label=""payoutSelf""];
""775_constructor"" [label=""constructor""];
""775_fallback"" [label=""fallback""];
""775_doRestart"" [label=""doRestart""];
""775_getInvestorCount"" [label=""getInvestorCount""];
""775_payout"" [label=""payout""];
""775_addInvestors"" -> ""775_onlyOwner"";
""775_payout"" -> ""775_getInvestorDividendsAmount"";
""775_transferOwnership"" -> ""775_onlyOwner"";
""775_payout"" -> ""775_doRestart"";
""775_payoutSelf"" -> ""775_getInvestorDividendsAmount"";
""775_fallback"" -> ""775_bytesToAddress"";
""775_fallback"" -> ""775_payoutSelf"";
}
"
0x029fa59111136ce592e136760a1df1d4a6cd564b.sol,RetailLoyaltySystemBase,"contract RetailLoyaltySystemBase is ERC20 { string public name; string public symbol; uint8 public decimals = 18; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowances; event Burn(address indexed from, uint256 value); function RetailLoyaltySystemBase(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals) public { name = _tokenName; symbol = _tokenSymbol; decimals = _decimals; totalSupply = _initialSupply * 10 ** uint256(decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_574_RetailLoyaltySystemBase {
label=""RetailLoyaltySystemBase"";
""574__transfer"" [label=""_transfer""];
""574_RetailLoyaltySystemBase"" [label=""RetailLoyaltySystemBase""];
""574_transferFrom"" [label=""transferFrom""];
""574_allowance"" [label=""allowance""];
""574_burn"" [label=""burn""];
""574_approveAndCall"" [label=""approveAndCall""];
""574_balanceOf"" [label=""balanceOf""];
""574_increaseApproval"" [label=""increaseApproval""];
""574_approve"" [label=""approve""];
""574_transfer"" [label=""transfer""];
""574_decreaseApproval"" [label=""decreaseApproval""];
""574_burnFrom"" [label=""burnFrom""];
""574_approveAndCall"" -> ""574_approve"";
""574_transferFrom"" -> ""574__transfer"";
""574_transfer"" -> ""574__transfer"";
}
"
0xd0a024e4b057024f941051dc19220a3bab4b5d45.sol,RelexLife,"contract RelexLife { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor ( ) public { totalSupply = 1000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_RelexLife {
label=""RelexLife"";
""355__transfer"" [label=""_transfer""];
""355_approve"" [label=""approve""];
""355_burn"" [label=""burn""];
""355_transfer"" [label=""transfer""];
""355_constructor"" [label=""constructor""];
""355_transferFrom"" [label=""transferFrom""];
""355_burnFrom"" [label=""burnFrom""];
""355_approveAndCall"" [label=""approveAndCall""];
""355_transferFrom"" -> ""355__transfer"";
""355_transfer"" -> ""355__transfer"";
""355_approveAndCall"" -> ""355_approve"";
}
"
0x78dd22e93357d6f926fa0f7cb860c5e6e1bcf484.sol,LETSY,"contract LETSY is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 500000000000000000000000000; balances[0x3aa9C81C14cE1799533C5e24b1e90c00344c5A9c] = _totalSupply; emit Transfer(address(0), 0x3aa9C81C14cE1799533C5e24b1e90c00344c5A9c, _totalSupply); }",1,"subgraph cluster_575_LETSY {
label=""LETSY"";
""575_transferFrom"" [label=""transferFrom""];
""575_transfer"" [label=""transfer""];
""575_balanceOf"" [label=""balanceOf""];
""575_addTokenToTotalSupply"" [label=""addTokenToTotalSupply""];
""575_totalSupply"" [label=""totalSupply""];
""575_allowance"" [label=""allowance""];
""575_approve"" [label=""approve""];
""575_approveAndCall"" [label=""approveAndCall""];
""575_fallback"" [label=""fallback""];
""575_constructor"" [label=""constructor""];
""575_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""575_addTokenToTotalSupply"" -> ""575_onlyOwner"";
""575_transferFrom"" -> ""575_safeSub"";
""575_transferFrom"" -> ""575_safeAdd"";
""575_transfer"" -> ""575_safeAdd"";
""575_transferAnyERC20Token"" -> ""575_onlyOwner"";
""575_transfer"" -> ""575_safeSub"";
}
"
0x03a9458d77dd705829fa758c64dbe770385295cc.sol,PolicyRegistry,"contract PolicyRegistry { event PolicyUpdate(uint indexed _subcourtID, string _policy); address public governor; mapping(uint => string) public policies; modifier onlyByGovernor() {require(governor == msg.sender, ); _;}",1,"subgraph cluster_71_PolicyRegistry {
label=""PolicyRegistry"";
""71_setPolicy"" [label=""setPolicy""];
""71_changeGovernor"" [label=""changeGovernor""];
""71_constructor"" [label=""constructor""];
""71_setPolicy"" -> ""71_onlyByGovernor"";
""71_changeGovernor"" -> ""71_onlyByGovernor"";
}
"
0x48e3ec3d717ca867fa5b4ab61f6874dd0e3b8500.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_415_TokenERC20 {
label=""TokenERC20"";
""415_burn"" [label=""burn""];
""415_TokenERC20"" [label=""TokenERC20""];
""415_approve"" [label=""approve""];
""415__transfer"" [label=""_transfer""];
""415_approveAndCall"" [label=""approveAndCall""];
""415_transferFrom"" [label=""transferFrom""];
""415_transfer"" [label=""transfer""];
""415_burnFrom"" [label=""burnFrom""];
""415_transferFrom"" -> ""415__transfer"";
""415_approveAndCall"" -> ""415_approve"";
""415_transfer"" -> ""415__transfer"";
}
"
0x8c28350a9449397f6ccbc61dd724601193a5dea0.sol,MGTToken,contract MGTToken { string public name = ; string public symbol = ; uint256 public decimals = 8; string public constant PRICE_PRESALE = ; address public adminWallet; mapping(address => uint256) public balanceOf; mapping(address => mapping(address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint public constant TOKEN_SUPPLY_TOTAL = 20000000000000000; uint public tokensIssuedIco = 14000000000000000; uint256 constant valueFounder = TOKEN_SUPPLY_TOTAL; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_379_MGTToken {
label=""MGTToken"";
""379_burn"" [label=""burn""];
""379_approve"" [label=""approve""];
""379_setName"" [label=""setName""];
""379_MGTToken"" [label=""MGTToken""];
""379_transferFrom"" [label=""transferFrom""];
""379_stop"" [label=""stop""];
""379_start"" [label=""start""];
""379_transfer"" [label=""transfer""];
""379_setSymbol"" [label=""setSymbol""];
""379_approve"" -> ""379_isRunning"";
""379_stop"" -> ""379_isOwner"";
""379_setSymbol"" -> ""379_isOwner"";
""379_transfer"" -> ""379_validAddress"";
""379_approve"" -> ""379_validAddress"";
""379_transferFrom"" -> ""379_isRunning"";
""379_start"" -> ""379_isOwner"";
""379_transfer"" -> ""379_isRunning"";
""379_setName"" -> ""379_isOwner"";
""379_transferFrom"" -> ""379_validAddress"";
}
"
0x264979ffd35d608e69b69681f4bbcba9877e6c4a.sol,qz_game,contract qz_game { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_127_qz_game {
label=""qz_game"";
""127_StopGame"" [label=""StopGame""];
""127_fallback"" [label=""fallback""];
""127_newQuestioner"" [label=""newQuestioner""];
""127_start_qz_game"" [label=""start_qz_game""];
""127_NewQuestion"" [label=""NewQuestion""];
""127_Try"" [label=""Try""];
""127_newQuestioner"" -> ""127_onlyQuestionSender"";
""127_StopGame"" -> ""127_onlyQuestionSender"";
""127_NewQuestion"" -> ""127_onlyQuestionSender"";
}
"
0x282d74cc2203e5c19b522876ca6fdee59d3b800b.sol,RegularToken,"contract RegularToken is Token { function transfer(address _to, uint _value) returns (bool) { if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_268_RegularToken {
label=""RegularToken"";
""268_allowance"" [label=""allowance""];
""268_transferFrom"" [label=""transferFrom""];
""268_balanceOf"" [label=""balanceOf""];
""268_approve"" [label=""approve""];
""268_transfer"" [label=""transfer""];
}
"
0x722baa20d3b42fc1ec0b63fb84ba3fda47da4a26.sol,ELHeroToken,"contract ELHeroToken is ERC721,AccessAdmin{ struct Card { uint16 protoId; uint16 hero; uint16 quality; uint16 feature; uint16 level; uint16 attrExt1; uint16 attrExt2; }",1,"subgraph cluster_1837_ELHeroToken {
label=""ELHeroToken"";
""1837_setActionContract"" [label=""setActionContract""];
""1837_totalSupply"" [label=""totalSupply""];
""1837_isApprovedForAll"" [label=""isApprovedForAll""];
""1837_supportsInterface"" [label=""supportsInterface""];
""1837_approve"" [label=""approve""];
""1837_safeTransferFrom"" [label=""safeTransferFrom""];
""1837__safeTransferFrom"" [label=""_safeTransferFrom""];
""1837_setApprovalForAll"" [label=""setApprovalForAll""];
""1837__changeAttrByIndex"" [label=""_changeAttrByIndex""];
""1837_destroyCard"" [label=""destroyCard""];
""1837_transferFrom"" [label=""transferFrom""];
""1837__transfer"" [label=""_transfer""];
""1837_constructor"" [label=""constructor""];
""1837_balanceOf"" [label=""balanceOf""];
""1837_getApproved"" [label=""getApproved""];
""1837_ownerOf"" [label=""ownerOf""];
""1837_getOwnCard"" [label=""getOwnCard""];
""1837_symbol"" [label=""symbol""];
""1837_getCardAttrs"" [label=""getCardAttrs""];
""1837_safeTransferByContract"" [label=""safeTransferByContract""];
""1837_createCard"" [label=""createCard""];
""1837_getCard"" [label=""getCard""];
""1837_getActionContract"" [label=""getActionContract""];
""1837_changeCardAttr"" [label=""changeCardAttr""];
""1837_name"" [label=""name""];
""1837__safeTransferFrom"" -> ""1837_isValidToken"";
""1837__safeTransferFrom"" -> ""1837__transfer"";
""1837_setApprovalForAll"" -> ""1837_whenNotPaused"";
""1837_setActionContract"" -> ""1837_onlyAdmin"";
""1837_transferFrom"" -> ""1837__transfer"";
""1837_changeCardAttr"" -> ""1837_whenNotPaused"";
""1837__safeTransferFrom"" -> ""1837_canTransfer"";
""1837_transferFrom"" -> ""1837_isValidToken"";
""1837_transferFrom"" -> ""1837_whenNotPaused"";
""1837_getCard"" -> ""1837_isValidToken"";
""1837_changeCardAttr"" -> ""1837__changeAttrByIndex"";
""1837_getApproved"" -> ""1837_isValidToken"";
""1837_getActionContract"" -> ""1837_onlyAdmin"";
""1837_createCard"" -> ""1837__transfer"";
""1837_safeTransferByContract"" -> ""1837_whenNotPaused"";
""1837_safeTransferFrom"" -> ""1837__safeTransferFrom"";
""1837_approve"" -> ""1837_whenNotPaused"";
""1837_createCard"" -> ""1837_whenNotPaused"";
""1837_changeCardAttr"" -> ""1837_isValidToken"";
""1837_destroyCard"" -> ""1837_whenNotPaused"";
""1837_transferFrom"" -> ""1837_canTransfer"";
""1837_destroyCard"" -> ""1837_isValidToken"";
""1837_safeTransferByContract"" -> ""1837__transfer"";
""1837_safeTransferFrom"" -> ""1837_whenNotPaused"";
}
"
0x20d2f8fdd0951f2f5249c86b3cdc2be7656f2c01.sol,MyTokenEVC,"contract MyTokenEVC is owned { string public name; string public symbol; uint8 public decimals = 18; uint256 public _totalSupply; mapping (address => uint256) public _balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function MyTokenEVC() public { _totalSupply = 0 * 10 ** uint256(decimals); _balanceOf[msg.sender] = _totalSupply; name = ; symbol = ; }",1,"subgraph cluster_492_MyTokenEVC {
label=""MyTokenEVC"";
""492_burn"" [label=""burn""];
""492_MyTokenEVC"" [label=""MyTokenEVC""];
""492_transferFrom"" [label=""transferFrom""];
""492_freezeAccount"" [label=""freezeAccount""];
""492_burnFrom"" [label=""burnFrom""];
""492_totalSupply"" [label=""totalSupply""];
""492_decimals"" [label=""decimals""];
""492_balanceOf"" [label=""balanceOf""];
""492_transfer"" [label=""transfer""];
""492_approveAndCall"" [label=""approveAndCall""];
""492_name"" [label=""name""];
""492__transfer"" [label=""_transfer""];
""492_mintToken"" [label=""mintToken""];
""492_approve"" [label=""approve""];
""492_symbol"" [label=""symbol""];
""492_burn"" -> ""492_onlyOwner"";
""492_mintToken"" -> ""492_onlyOwner"";
""492_burnFrom"" -> ""492_onlyOwner"";
""492_transferFrom"" -> ""492__transfer"";
""492_approveAndCall"" -> ""492_approve"";
""492_transfer"" -> ""492__transfer"";
""492_freezeAccount"" -> ""492_onlyOwner"";
}
"
0x6543cde961213e82001594bf4c34706579ce34ec.sol,Whitelist,"contract Whitelist is Ownable, RBAC { string public constant ROLE_WHITELISTED = ; modifier onlyIfWhitelisted(address _operator) { checkRole(_operator, ROLE_WHITELISTED); _; }",1,"subgraph cluster_3263_ManagedWhitelist {
label=""ManagedWhitelist"";
""3263_removeAddressesFromWhitelist"" [label=""removeAddressesFromWhitelist""];
""3263_removeAddressFromWhitelist"" [label=""removeAddressFromWhitelist""];
""3263_addAddressesToWhitelist"" [label=""addAddressesToWhitelist""];
""3263_addAddressToWhitelist"" [label=""addAddressToWhitelist""];
""3263_addAddressesToWhitelist"" -> ""3263_onlyManager"";
""3263_removeAddressesFromWhitelist"" -> ""3263_onlyManager"";
""3263_addAddressesToWhitelist"" -> ""3263_addAddressToWhitelist"";
""3263_addAddressToWhitelist"" -> ""3263_onlyManager"";
""3263_removeAddressesFromWhitelist"" -> ""3263_removeAddressFromWhitelist"";
""3263_addAddressToWhitelist"" -> ""3263_addRole"";
""3263_removeAddressFromWhitelist"" -> ""3263_onlyManager"";
""3263_removeAddressFromWhitelist"" -> ""3263_removeRole"";
}
"
0xefc1b11ad4b183ad859ef220a9c498cb04716a31.sol,Counter,"contract Counter { event Won(address winner, uint amount); uint public i; address public owner; function Counter() public { owner = msg.sender; }",1,"subgraph cluster_79_Counter {
label=""Counter"";
""79_inc"" [label=""inc""];
""79_Counter"" [label=""Counter""];
""79_reset"" [label=""reset""];
}
"
0x704079e823e42a936bbaac5163434c2515473836.sol,CONUNDRUM,"contract CONUNDRUM { string public question; address questionSender; bytes32 responseHash; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_CONUNDRUM {
label=""CONUNDRUM"";
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_StopGame"" [label=""StopGame""];
""118_NewQuestion"" [label=""NewQuestion""];
}
"
0x296b3fc8e3cc768f834152586e5ad708bfe8f163.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_transferFrom"" [label=""transferFrom""];
""256_approve"" [label=""approve""];
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
""256_balanceOf"" [label=""balanceOf""];
}
"
0x5abaff0b83f81dc061c590aadcba013c69237fd7.sol,CryptoJade,"contract CryptoJade is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CryptoJade() public { symbol = ; name = ; decimals = 18; _totalSupply = 125000000000000000000000000; balances[0x5E77C4cf41618A897759b3A2A32665C85BC2aF21] = _totalSupply; Transfer(address(0), 0x5E77C4cf41618A897759b3A2A32665C85BC2aF21, _totalSupply); }",1,"subgraph cluster_543_CryptoJade {
label=""CryptoJade"";
""543_fallback"" [label=""fallback""];
""543_CryptoJade"" [label=""CryptoJade""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x219b9040eb7d8d8c2e8e84b87ce9ac1c83071980.sol,RegularToken,"contract RegularToken is Token { function transfer(address _to, uint _value) returns (bool) { if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_355_UnboundedRegularToken {
label=""UnboundedRegularToken"";
""355_transferFrom"" [label=""transferFrom""];
}
"
0x1cd74dd56b0929f1505c6e1f9bdf57fb31d60631.sol,BugisContract,"contract BugisContract { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public initialSupply = 600000; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function BugisContract( ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_352_BugisContract {
label=""BugisContract"";
""352__transfer"" [label=""_transfer""];
""352_burn"" [label=""burn""];
""352_transferFrom"" [label=""transferFrom""];
""352_BugisContract"" [label=""BugisContract""];
""352_approve"" [label=""approve""];
""352_transfer"" [label=""transfer""];
""352_approveAndCall"" [label=""approveAndCall""];
""352_burnFrom"" [label=""burnFrom""];
""352_transfer"" -> ""352__transfer"";
""352_transferFrom"" -> ""352__transfer"";
""352_approveAndCall"" -> ""352_approve"";
}
"
0xa3fa17c51a77a79808f3c21948de3ea70391ce6a.sol,CryptoAllStars,"contract CryptoAllStars is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public personIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public personIndexToApproved; mapping (uint256 => uint256) private personIndexToPrice; address public ceo = 0x047F606fD5b2BaA5f5C6c4aB8958E45CB6B054B7; uint256 public promoCreatedCount; struct Person { string name; }",1,"subgraph cluster_913_CryptoAllStars {
label=""CryptoAllStars"";
""913__addressNotNull"" [label=""_addressNotNull""];
""913_approve"" [label=""approve""];
""913_balanceOf"" [label=""balanceOf""];
""913__owns"" [label=""_owns""];
""913_totalSupply"" [label=""totalSupply""];
""913_implementsERC721"" [label=""implementsERC721""];
""913_purchase"" [label=""purchase""];
""913__createPerson"" [label=""_createPerson""];
""913_name"" [label=""name""];
""913_priceOf"" [label=""priceOf""];
""913_createPromoPerson"" [label=""createPromoPerson""];
""913__payout"" [label=""_payout""];
""913_transfer"" [label=""transfer""];
""913_ownerOf"" [label=""ownerOf""];
""913_takeOwnership"" [label=""takeOwnership""];
""913_payout"" [label=""payout""];
""913_tokensOfOwner"" [label=""tokensOfOwner""];
""913_symbol"" [label=""symbol""];
""913_createContractPerson"" [label=""createContractPerson""];
""913_getPerson"" [label=""getPerson""];
""913__transfer"" [label=""_transfer""];
""913_transferFrom"" [label=""transferFrom""];
""913_setOwner"" [label=""setOwner""];
""913__approved"" [label=""_approved""];
""913_takeOwnership"" -> ""913__addressNotNull"";
""913_payout"" -> ""913_onlyCeo"";
""913_transfer"" -> ""913__transfer"";
""913_transferFrom"" -> ""913__addressNotNull"";
""913_transfer"" -> ""913__owns"";
""913_createPromoPerson"" -> ""913_onlyCeo"";
""913_tokensOfOwner"" -> ""913_balanceOf"";
""913_createContractPerson"" -> ""913_onlyCeo"";
""913_payout"" -> ""913__payout"";
""913_createPromoPerson"" -> ""913__createPerson"";
""913_transferFrom"" -> ""913__approved"";
""913_purchase"" -> ""913__transfer"";
""913_transfer"" -> ""913__addressNotNull"";
""913_tokensOfOwner"" -> ""913_totalSupply"";
""913_setOwner"" -> ""913_onlyCeo"";
""913_createContractPerson"" -> ""913__createPerson"";
""913_transferFrom"" -> ""913__transfer"";
""913_purchase"" -> ""913__addressNotNull"";
""913_takeOwnership"" -> ""913__transfer"";
""913_approve"" -> ""913__owns"";
""913__createPerson"" -> ""913__transfer"";
""913_transferFrom"" -> ""913__owns"";
""913_takeOwnership"" -> ""913__approved"";
}
"
0x41c23bf53117806ce77ca65003d435c4d944f519.sol,Contractus,contract Contractus { mapping (address => uint256) public balances; mapping (address => uint256) public timestamp; mapping (address => uint256) public receiveFunds; uint256 internal totalFunds; address support; address marketing; constructor() public { support = msg.sender; marketing = 0x53B83d7be0D19b9935363Af1911b7702Cc73805e; },1,"subgraph cluster_231_Contractus {
label=""Contractus"";
""231_showProfit"" [label=""showProfit""];
""231_showBalance"" [label=""showBalance""];
""231_isLastWithdraw"" [label=""isLastWithdraw""];
""231_calcProfit"" [label=""calcProfit""];
""231_constructor"" [label=""constructor""];
""231_fallback"" [label=""fallback""];
""231_showTotal"" [label=""showTotal""];
""231_isLastWithdraw"" -> ""231_calcProfit"";
""231_fallback"" -> ""231_isLastWithdraw"";
""231_fallback"" -> ""231_calcProfit"";
}
"
0x3a03afa73623b99eedaa6180a869dd5bde17a601.sol,CheapLambos,contract CheapLambos { string public name = ; string public symbol = ; uint256 public decimals = 18; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; address owner; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_396_CheapLambos {
label=""CheapLambos"";
""396_mint"" [label=""mint""];
""396_Lambo"" [label=""Lambo""];
""396_transfer"" [label=""transfer""];
""396_approve"" [label=""approve""];
""396_burn"" [label=""burn""];
""396__mint"" [label=""_mint""];
""396_mintMore"" [label=""mintMore""];
""396_transferFrom"" [label=""transferFrom""];
""396_transferFrom"" -> ""396_validAddress"";
""396_approve"" -> ""396_validAddress"";
""396_transfer"" -> ""396_validAddress"";
""396_Lambo"" -> ""396_mint"";
""396_mint"" -> ""396__mint"";
""396_mintMore"" -> ""396__mint"";
}
"
0xdbbb7c56a5c8f60a9e5a38501a168f673cd61754.sol,AvPresale,"contract AvPresale { string public constant RELEASE = ; uint public constant PRESALE_START = 5307500; uint public constant PRESALE_END = 5309227; uint public constant WITHDRAWAL_END = 5314027; address public constant OWNER = 0x32Bac79f4B6395DEa37f0c2B68b6e26ce24a59EA; uint public constant MIN_TOTAL_AMOUNT_GET_ETH = 1; uint public constant MAX_TOTAL_AMOUNT_GET_ETH = 2; uint public constant MIN_GET_AMOUNT_FINNEY = 10; string[5] private standingNames = [, , , , ]; enum State { BEFORE_START, PRESALE_RUNNING, WITHDRAWAL_RUNNING, MONEY_BACK_RUNNING, CLOSED }",1,"subgraph cluster_495_AvPresale {
label=""AvPresale"";
""495_moneyBack"" [label=""moneyBack""];
""495_termination"" [label=""termination""];
""495_AvPresale"" [label=""AvPresale""];
""495_min"" [label=""min""];
""495_currentStanding"" [label=""currentStanding""];
""495_standing"" [label=""standing""];
""495_fallback"" [label=""fallback""];
""495_sendMoneyOwner"" [label=""sendMoneyOwner""];
""495_sendMoneyBack"" [label=""sendMoneyBack""];
""495_stop"" [label=""stop""];
""495_getMoney"" [label=""getMoney""];
""495_termination"" -> ""495_onlyOwner"";
""495_fallback"" -> ""495_noReentrancy"";
""495_fallback"" -> ""495_getMoney"";
""495_stop"" -> ""495_onlyOwner"";
""495_sendMoneyOwner"" -> ""495_onlyOwner"";
""495_AvPresale"" -> ""495_checkSettings"";
""495_moneyBack"" -> ""495_sendMoneyBack"";
""495_fallback"" -> ""495_currentStanding"";
""495_getMoney"" -> ""495_notTooSmallAmountOnly"";
""495_standing"" -> ""495_currentStanding"";
""495_moneyBack"" -> ""495_inStanding"";
""495_sendMoneyOwner"" -> ""495_noReentrancy"";
""495_sendMoneyBack"" -> ""495_min"";
""495_fallback"" -> ""495_sendMoneyBack"";
""495_sendMoneyOwner"" -> ""495_inStanding"";
""495_termination"" -> ""495_inStandingBefore"";
""495_moneyBack"" -> ""495_noReentrancy"";
""495_sendMoneyBack"" -> ""495_tokenHoldersOnly"";
""495_stop"" -> ""495_inStanding"";
}
"
0x2c82c73d5b34aa015989462b2948cd616a37641f.sol,MiniMeTokenFactory,"contract MiniMeTokenFactory { function createCloneToken( address _parentToken, uint _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled ) returns (MiniMeToken) { MiniMeToken newToken = new MiniMeToken( this, _parentToken, _snapshotBlock, _tokenName, _decimalUnits, _tokenSymbol, _transfersEnabled ); newToken.changeController(msg.sender); return newToken; }",1,"subgraph cluster_1290_MiniMeTokenFactory {
label=""MiniMeTokenFactory"";
""1290_createCloneToken"" [label=""createCloneToken""];
}
"
0x6bef7336e8176ce577d32a4ffc8c7e87b726d4a3.sol,FixedSupplyToken,"contract FixedSupplyToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function FixedSupplyToken() public { symbol = ; name = ; decimals = 4; _totalSupply = 5000000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_550_FixedSupplyToken {
label=""FixedSupplyToken"";
""550_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""550_totalSupply"" [label=""totalSupply""];
""550_balanceOf"" [label=""balanceOf""];
""550_approve"" [label=""approve""];
""550_transfer"" [label=""transfer""];
""550_allowance"" [label=""allowance""];
""550_approveAndCall"" [label=""approveAndCall""];
""550_fallback"" [label=""fallback""];
""550_transferFrom"" [label=""transferFrom""];
""550_FixedSupplyToken"" [label=""FixedSupplyToken""];
""550_transferAnyERC20Token"" -> ""550_onlyOwner"";
}
"
0xc41585205b83b7c643a37b87887c97cf31cb8867.sol,QINTAR,"contract QINTAR is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 5; _totalSupply = 100000000000; balances[0x64a2AA7edFA7D698Ede1dA333804B66AaF1Fa49b] = _totalSupply; emit Transfer(address(0), 0x64a2AA7edFA7D698Ede1dA333804B66AaF1Fa49b, _totalSupply); }",1,"subgraph cluster_543_QINTAR {
label=""QINTAR"";
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_constructor"" [label=""constructor""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x332eeaa966e0d7dcf2c5373b9b9c88f8be2eee15.sol,EGFToken,"contract EGFToken is ERC20, owned { mapping (address => bool) public frozenAccount; event AddSupply(uint amount); event FrozenFunds(address target, bool frozen); event Burn(address target, uint amount); constructor () ERC20() public { }",1,"subgraph cluster_626_EGFToken {
label=""EGFToken"";
""626__transfer"" [label=""_transfer""];
""626_transferFrom"" [label=""transferFrom""];
""626_transfer"" [label=""transfer""];
""626_mine"" [label=""mine""];
""626_constructor"" [label=""constructor""];
""626_burnFrom"" [label=""burnFrom""];
""626_freezeAccount"" [label=""freezeAccount""];
""626_burn"" [label=""burn""];
""626_freezeAccount"" -> ""626_onlyOwner"";
""626_transfer"" -> ""626__transfer"";
""626_constructor"" -> ""626_constructor"";
""626_transferFrom"" -> ""626__transfer"";
""626_mine"" -> ""626_onlyOwner"";
}
"
0x17c8d8b7659141273a1c2223030c89b96713a44a.sol,XPS,"contract XPS { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function XPS( ) public { totalSupply = 20000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_XPS {
label=""XPS"";
""355_approveAndCall"" [label=""approveAndCall""];
""355_burn"" [label=""burn""];
""355_approve"" [label=""approve""];
""355_transfer"" [label=""transfer""];
""355_burnFrom"" [label=""burnFrom""];
""355_XPS"" [label=""XPS""];
""355_transferFrom"" [label=""transferFrom""];
""355__transfer"" [label=""_transfer""];
""355_approveAndCall"" -> ""355_approve"";
""355_transfer"" -> ""355__transfer"";
""355_transferFrom"" -> ""355__transfer"";
}
"
0x7476c85d6dfc144c6b196d8956b4cc2bbfb860f2.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" [label=""transferFrom""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x1f9033b3fdf74e1d7619447bc491d73a36967d71.sol,Data,contract Data is Ownable { mapping (address => address) private parent; mapping (address => uint8) public statuses; mapping (address => uint) public referralDeposits; mapping(address => uint256) private balances; mapping(address => uint256) private investorBalances; function parentOf(address _addr) public constant returns (address) { return parent[_addr]; },1,"subgraph cluster_712_Data {
label=""Data"";
""712_addBalance"" [label=""addBalance""];
""712_statuses"" [label=""statuses""];
""712_subtrInvestorBalance"" [label=""subtrInvestorBalance""];
""712_Data"" [label=""Data""];
""712_addInvestorBalance"" [label=""addInvestorBalance""];
""712_setStatus"" [label=""setStatus""];
""712_investorBalanceOf"" [label=""investorBalanceOf""];
""712_parentOf"" [label=""parentOf""];
""712_balanceOf"" [label=""balanceOf""];
""712_addReferralDeposit"" [label=""addReferralDeposit""];
""712_subtrBalance"" [label=""subtrBalance""];
""712_setParent"" [label=""setParent""];
""712_referralDeposits"" [label=""referralDeposits""];
""712_subtrBalance"" -> ""712_onlyOwner"";
""712_subtrInvestorBalance"" -> ""712_onlyOwner"";
""712_addBalance"" -> ""712_onlyOwner"";
""712_setParent"" -> ""712_onlyOwner"";
""712_addReferralDeposit"" -> ""712_onlyOwner"";
""712_addInvestorBalance"" -> ""712_onlyOwner"";
""712_setStatus"" -> ""712_onlyOwner"";
}
"
0x1d26883a84a81b3046e027bbcbe7506a90e6b5a5.sol,PiToken,"contract PiToken { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function PiToken ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 3141592653589793238 ** uint256(decimals); balanceOf[msg.sender] = totalSupply = 3141592653589793238; tokenName = ; tokenSymbol = ; }",1,"subgraph cluster_400_PiToken {
label=""PiToken"";
""400__transfer"" [label=""_transfer""];
""400_approve"" [label=""approve""];
""400_transferFrom"" [label=""transferFrom""];
""400_PiToken"" [label=""PiToken""];
""400_burnFrom"" [label=""burnFrom""];
""400_approveAndCall"" [label=""approveAndCall""];
""400_burn"" [label=""burn""];
""400_transfer"" [label=""transfer""];
""400_approveAndCall"" -> ""400_approve"";
""400_transfer"" -> ""400__transfer"";
""400_transferFrom"" -> ""400__transfer"";
}
"
0x3595279a9f0658eb2649976f155111bae1ae9de6.sol,GGE,"contract GGE { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function GGE( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_GGE {
label=""GGE"";
""380_burnFrom"" [label=""burnFrom""];
""380_burn"" [label=""burn""];
""380__transfer"" [label=""_transfer""];
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_GGE"" [label=""GGE""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0xa15b24b7b883aac6bc6582b0057c09d62a7a1b2c.sol,Simply10,contract Simply10 { mapping (address => uint256) dates; mapping (address => uint256) invests; function() external payable { address sender = msg.sender; if (invests[sender] != 0) { uint256 payout = invests[sender] / 100 * 10 * (now - dates[sender]) / 1 days; if (payout > address(this).balance) { payout = address(this).balance; },1,"subgraph cluster_79_Simply10 {
label=""Simply10"";
""79_fallback"" [label=""fallback""];
}
"
0x18835a9009a2a1a1dc1dce33ba7e417f9cee1154.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_allowance"" [label=""allowance""];
""256_approve"" [label=""approve""];
""256_balanceOf"" [label=""balanceOf""];
""256_transfer"" [label=""transfer""];
""256_transferFrom"" [label=""transferFrom""];
}
"
0xdbcd6bd6ecaa36c8a6c554d70b7f39d6c0fd7ad2.sol,BFBtoken,"contract BFBtoken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_BFBtoken {
label=""BFBtoken"";
""380_burn"" [label=""burn""];
""380_constructor"" [label=""constructor""];
""380_burnFrom"" [label=""burnFrom""];
""380_transfer"" [label=""transfer""];
""380_approveAndCall"" [label=""approveAndCall""];
""380__transfer"" [label=""_transfer""];
""380_approve"" [label=""approve""];
""380_transferFrom"" [label=""transferFrom""];
""380_transferFrom"" -> ""380__transfer"";
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
}
"
0xc3c412b97dc3355f1bd060223e75fb047c869197.sol,HngCoinSale,"contract HngCoinSale is owned, HngCoin { mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function HngCoinSale( uint256 initialSupply, string tokenName, string tokenSymbol ) HngCoin(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_810_HngCoinSale {
label=""HngCoinSale"";
""810_multiply"" [label=""multiply""];
""810_setPrices"" [label=""setPrices""];
""810_mintToken"" [label=""mintToken""];
""810_freezeAccount"" [label=""freezeAccount""];
""810__transfer"" [label=""_transfer""];
""810_HngCoinSale"" [label=""HngCoinSale""];
""810_freezeAccount"" -> ""810_onlyOwner"";
""810_setPrices"" -> ""810_onlyOwner"";
""810_mintToken"" -> ""810_onlyOwner"";
""810_HngCoinSale"" -> ""810_HngCoin"";
}
"
0x0d67440946949fe293b45c52efd8a9b3d51e2522.sol,MultipleArbitrableTransaction,"contract MultipleArbitrableTransaction is IArbitrable { uint8 constant AMOUNT_OF_CHOICES = 2; uint8 constant SENDER_WINS = 1; uint8 constant RECEIVER_WINS = 2; enum Party {Sender, Receiver}",1,"subgraph cluster_1928_MultipleArbitrableTransaction {
label=""MultipleArbitrableTransaction"";
""1928_rule"" [label=""rule""];
""1928_executeTransaction"" [label=""executeTransaction""];
""1928_timeOutBySender"" [label=""timeOutBySender""];
""1928_pay"" [label=""pay""];
""1928_createTransaction"" [label=""createTransaction""];
""1928_payArbitrationFeeByReceiver"" [label=""payArbitrationFeeByReceiver""];
""1928_getCountTransactions"" [label=""getCountTransactions""];
""1928_payArbitrationFeeBySender"" [label=""payArbitrationFeeBySender""];
""1928_reimburse"" [label=""reimburse""];
""1928_executeRuling"" [label=""executeRuling""];
""1928_getTransactionIDsByAddress"" [label=""getTransactionIDsByAddress""];
""1928_timeOutByReceiver"" [label=""timeOutByReceiver""];
""1928_raiseDispute"" [label=""raiseDispute""];
""1928_appeal"" [label=""appeal""];
""1928_submitEvidence"" [label=""submitEvidence""];
""1928_constructor"" [label=""constructor""];
""1928_payArbitrationFeeBySender"" -> ""1928_raiseDispute"";
""1928_rule"" -> ""1928_executeRuling"";
""1928_timeOutBySender"" -> ""1928_executeRuling"";
""1928_timeOutByReceiver"" -> ""1928_executeRuling"";
""1928_payArbitrationFeeByReceiver"" -> ""1928_raiseDispute"";
}
"
0x36cc5160e243f91157d8c14222f2ed5c52cf3d05.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_384_TokenERC20 {
label=""TokenERC20"";
""384_approve"" [label=""approve""];
""384_constructor"" [label=""constructor""];
""384_burnFrom"" [label=""burnFrom""];
""384_burn"" [label=""burn""];
""384_approveAndCall"" [label=""approveAndCall""];
""384_transfer"" [label=""transfer""];
""384_transferFrom"" [label=""transferFrom""];
""384__transfer"" [label=""_transfer""];
""384_transferFrom"" -> ""384__transfer"";
""384_transfer"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
}
"
0x78af82f8924f99cec0afef357105382b8a44708f.sol,EraTokens,"contract EraTokens is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 60000000000 * 10**uint(decimals); balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_603_EraTokens {
label=""EraTokens"";
""603_constructor"" [label=""constructor""];
""603_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""603_totalSupply"" [label=""totalSupply""];
""603_BurnToken"" [label=""BurnToken""];
""603_transferFrom"" [label=""transferFrom""];
""603_approve"" [label=""approve""];
""603_transfer"" [label=""transfer""];
""603_balanceOf"" [label=""balanceOf""];
""603_fallback"" [label=""fallback""];
""603_allowance"" [label=""allowance""];
""603_approveAndCall"" [label=""approveAndCall""];
""603_transferAnyERC20Token"" -> ""603_onlyOwner"";
}
"
0x71fbecb11e291f824fd5dc9e760f56a5239e4702.sol,HodlDAO,contract HodlDAO { string public version = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => withdrawalRequest) public withdrawalRequests; struct withdrawalRequest { uint sinceTime; uint256 amount; },1,"subgraph cluster_706_HodlDAO {
label=""HodlDAO"";
""706_transferFrom"" [label=""transferFrom""];
""706_doWithdrawal"" [label=""doWithdrawal""];
""706_calculateFee"" [label=""calculateFee""];
""706_approve"" [label=""approve""];
""706_quickWithdraw"" [label=""quickWithdraw""];
""706_transfer"" [label=""transfer""];
""706_calculateReward"" [label=""calculateReward""];
""706_fallback"" [label=""fallback""];
""706_withdrawalInitiate"" [label=""withdrawalInitiate""];
""706_withdrawalComplete"" [label=""withdrawalComplete""];
""706_HodlDAO"" [label=""HodlDAO""];
""706_approveAndCall"" [label=""approveAndCall""];
""706_quickWithdraw"" -> ""706_notPendingWithdrawal"";
""706_withdrawalComplete"" -> ""706_doWithdrawal"";
""706_approveAndCall"" -> ""706_notPendingWithdrawal"";
""706_transfer"" -> ""706_notPendingWithdrawal"";
""706_approve"" -> ""706_notPendingWithdrawal"";
""706_fallback"" -> ""706_notPendingWithdrawal"";
""706_quickWithdraw"" -> ""706_doWithdrawal"";
""706_approveAndCall"" -> ""706_approve"";
""706_quickWithdraw"" -> ""706_calculateFee"";
""706_withdrawalComplete"" -> ""706_calculateReward"";
""706_withdrawalInitiate"" -> ""706_notPendingWithdrawal"";
}
"
0x32d55157bd2ae652f4b6be48ee4a7a1686d28a3f.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_transfer"" [label=""transfer""];
""396_approve"" [label=""approve""];
""396_burn"" [label=""burn""];
""396_burnFrom"" [label=""burnFrom""];
""396_transferFrom"" [label=""transferFrom""];
""396_approveAndCall"" [label=""approveAndCall""];
""396__transfer"" [label=""_transfer""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_transfer"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transferFrom"" -> ""396__transfer"";
}
"
0x945f171de4ea81a213dcc7a1e8c4f6feb3b4b806.sol,ECP_Token,"contract ECP_Token { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public remaining; address public owner; uint public icoStatus; address public benAddress; address public bkaddress; uint public allowTransferToken; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event TokenTransferEvent(address indexed from, address indexed to, uint256 value, string typex); function ECP_Token() public { totalSupply = 15000000000000000000000000000; owner = msg.sender; balanceOf[owner] = totalSupply; name = ; symbol = ; decimals = 18; remaining = totalSupply; icoStatus = 1; benAddress = 0xe4a7a715bE044186a3ac5C60c7Df7dD1215f7419; bkaddress = 0x44e00602e4B8F546f76983de2489d636CB443722; allowTransferToken = 1; }",1,"subgraph cluster_745_ECP_Token {
label=""ECP_Token"";
""745_withdraw_all"" [label=""withdraw_all""];
""745_freezeAccount"" [label=""freezeAccount""];
""745_withdraw"" [label=""withdraw""];
""745_transferOwnership"" [label=""transferOwnership""];
""745_sendTokenToSingleAccount"" [label=""sendTokenToSingleAccount""];
""745__transfer"" [label=""_transfer""];
""745_burn"" [label=""burn""];
""745_sendToMultipleAccount"" [label=""sendToMultipleAccount""];
""745_approveAndCall"" [label=""approveAndCall""];
""745_approve"" [label=""approve""];
""745_adm_trasfer"" [label=""adm_trasfer""];
""745_changeIcoStatus"" [label=""changeIcoStatus""];
""745_fallback"" [label=""fallback""];
""745_setTransferStatus"" [label=""setTransferStatus""];
""745_totalSupply"" [label=""totalSupply""];
""745_transferFrom"" [label=""transferFrom""];
""745_balanceOf"" [label=""balanceOf""];
""745_burnFrom"" [label=""burnFrom""];
""745_transfer"" [label=""transfer""];
""745_mintToken"" [label=""mintToken""];
""745_ECP_Token"" [label=""ECP_Token""];
""745_transfer"" -> ""745__transfer"";
""745_adm_trasfer"" -> ""745_onlyOwner"";
""745_transferFrom"" -> ""745__transfer"";
""745_withdraw_all"" -> ""745_onlyOwner"";
""745_setTransferStatus"" -> ""745_onlyOwner"";
""745_freezeAccount"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745__transfer"";
""745_sendToMultipleAccount"" -> ""745_onlyOwner"";
""745_mintToken"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745_onlyOwner"";
""745_transferOwnership"" -> ""745_onlyOwner"";
""745_sendToMultipleAccount"" -> ""745__transfer"";
""745_approveAndCall"" -> ""745_approve"";
""745_adm_trasfer"" -> ""745__transfer"";
""745_withdraw"" -> ""745_onlyOwner"";
""745_changeIcoStatus"" -> ""745_onlyOwner"";
}
"
0x4027c7262554ba72ccc3e346c6b71794299d3b99.sol,CWT,"contract CWT { string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function CWT( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_CWT {
label=""CWT"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_CWT"" [label=""CWT""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_approve"" [label=""approve""];
""361_transferFrom"" [label=""transferFrom""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0xf355164187e533b1969b4de46737c4e8bc9ae7e2.sol,MASToken,"contract MASToken { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function MASToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_MASToken {
label=""MASToken"";
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_MASToken"" [label=""MASToken""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x41dcc20e5fc42e21087afb0864683101be5a95ff.sol,Farmcoin,"contract Farmcoin { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Farmcoin( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_Farmcoin {
label=""Farmcoin"";
""361_Farmcoin"" [label=""Farmcoin""];
""361__transfer"" [label=""_transfer""];
""361_approve"" [label=""approve""];
""361_transfer"" [label=""transfer""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol,XCPlugin,contract XCPlugin is XCPluginInterface { struct Admin { bool status; bytes32 platformName; bytes32 tokenSymbol; address account; string version; },1,"subgraph cluster_228_XCPluginInterface {
label=""XCPluginInterface"";
""228_getTokenSymbol"" [label=""getTokenSymbol""];
""228_countOfPublicKey"" [label=""countOfPublicKey""];
""228_stop"" [label=""stop""];
""228_getPlatformName"" [label=""getPlatformName""];
""228_publicKeys"" [label=""publicKeys""];
""228_existCaller"" [label=""existCaller""];
""228_addPublicKey"" [label=""addPublicKey""];
""228_verifyProposal"" [label=""verifyProposal""];
""228_deleteCaller"" [label=""deleteCaller""];
""228_existPublicKey"" [label=""existPublicKey""];
""228_getWeight"" [label=""getWeight""];
""228_deleteProposal"" [label=""deleteProposal""];
""228_deletePublicKey"" [label=""deletePublicKey""];
""228_getAdmin"" [label=""getAdmin""];
""228_getProposal"" [label=""getProposal""];
""228_getStatus"" [label=""getStatus""];
""228_getTrustPlatform"" [label=""getTrustPlatform""];
""228_getCallers"" [label=""getCallers""];
""228_addCaller"" [label=""addCaller""];
""228_voteProposal"" [label=""voteProposal""];
""228_start"" [label=""start""];
""228_setAdmin"" [label=""setAdmin""];
""228_commitProposal"" [label=""commitProposal""];
""228_setWeight"" [label=""setWeight""];
}
"
0x519e5585540ac8d5770cfcd8175bbbd2a6430367.sol,Ethereum_Nika_Database_Service,contract Ethereum_Nika_Database_Service { NikaToken public token; struct VariableAmounts { bool isset; address blank_address; uint256 large_amount; uint256 large_amount2; string string1; string string2; string string3; string string4; string string5; string string6; string string7; string string8; },1,"subgraph cluster_584_Ethereum_Nika_Database_Service {
label=""Ethereum_Nika_Database_Service"";
""584_Return_String8"" [label=""Return_String8""];
""584_Create_Database"" [label=""Create_Database""];
""584_Return_String6"" [label=""Return_String6""];
""584_return_slot"" [label=""return_slot""];
""584_Return_String5"" [label=""Return_String5""];
""584_Return_String3"" [label=""Return_String3""];
""584_Edit_Strings_3_through_4"" [label=""Edit_Strings_3_through_4""];
""584_Return_String1"" [label=""Return_String1""];
""584_setup"" [label=""setup""];
""584_Return_Number1"" [label=""Return_Number1""];
""584_Edit_Strings_5_through_6"" [label=""Edit_Strings_5_through_6""];
""584_Return_String2"" [label=""Return_String2""];
""584_constructor"" [label=""constructor""];
""584_Return_Address"" [label=""Return_Address""];
""584_Return_Number2"" [label=""Return_Number2""];
""584_Edit_Only_Address"" [label=""Edit_Only_Address""];
""584_Edit_Strings_1_through_2"" [label=""Edit_Strings_1_through_2""];
""584_Edit_Only_Numbers"" [label=""Edit_Only_Numbers""];
""584_Edit_Strings_7_through_8"" [label=""Edit_Strings_7_through_8""];
""584_Return_String7"" [label=""Return_String7""];
""584_Return_String4"" [label=""Return_String4""];
""584_Choose_Your_Slot"" [label=""Choose_Your_Slot""];
""584_Create_Database"" -> ""584_setup"";
""584_Edit_Strings_5_through_6"" -> ""584_is_setup"";
""584_Edit_Strings_7_through_8"" -> ""584_is_setup"";
""584_Edit_Strings_3_through_4"" -> ""584_is_setup"";
""584_Edit_Only_Numbers"" -> ""584_is_setup"";
""584_Edit_Strings_1_through_2"" -> ""584_is_setup"";
""584_Edit_Only_Address"" -> ""584_is_setup"";
}
"
0x2612bb62eaa42991d12be0892c27040d4143e037.sol,ToknTalkToken,"contract ToknTalkToken { event Transfer(address indexed from, address indexed to, uint amount); event Approval(address indexed owner, address indexed spender, uint amount); uint private constant MAX_UINT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; address public mintSigner = msg.sender; string public constant name = ; string public constant symbol = ; uint public constant decimals = 0; uint public totalSupply = 0; mapping (address => uint) public balanceOf; mapping (address => mapping (address => uint)) public allowance; mapping (address => uint) public mintedBy; function transfer(address to, uint amount) external returns (bool) { require(to != address(this)); require(to != 0); uint balanceOfMsgSender = balanceOf[msg.sender]; require(balanceOfMsgSender >= amount); balanceOf[msg.sender] = balanceOfMsgSender - amount; balanceOf[to] += amount; emit Transfer(msg.sender, to, amount); return true; }",1,"subgraph cluster_460_ToknTalkToken {
label=""ToknTalkToken"";
""460_toHexString"" [label=""toHexString""];
""460_transferFrom"" [label=""transferFrom""];
""460_mintUsingSignature"" [label=""mintUsingSignature""];
""460_setMintSigner"" [label=""setMintSigner""];
""460_toString"" [label=""toString""];
""460_transfer"" [label=""transfer""];
""460_approve"" [label=""approve""];
""460_mintUsingSignature"" -> ""460_toHexString"";
""460_mintUsingSignature"" -> ""460_toString"";
}
"
0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94.sol,Token,"contract Token { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_Token {
label=""Token"";
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_TokenERC20"" [label=""TokenERC20""];
""380_burnFrom"" [label=""burnFrom""];
""380__transfer"" [label=""_transfer""];
""380_burn"" [label=""burn""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0x400c73395bbc01d9e757f02f267925e1de0779f8.sol,TokenDrop,contract TokenDrop { ERC20 token; function TokenDrop() { token = ERC20(0xec662B61C129fcF9fc6DD6F1A672021A539CE45d); },1,"subgraph cluster_88_TokenDrop {
label=""TokenDrop"";
""88_balanceOf"" [label=""balanceOf""];
""88_multiTransfer"" [label=""multiTransfer""];
""88_TokenDrop"" [label=""TokenDrop""];
""88_tokenFallback"" [label=""tokenFallback""];
}
"
0x31a6ba952064f3895e29a5a7f0731287368ab89e.sol,NutrioCoin,contract NutrioCoin { string public name = ; string public symbol = ; uint256 public decimals = 18; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 50000000 * (10**decimals); address public owner; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_287_NutrioCoin {
label=""NutrioCoin"";
""287_setName"" [label=""setName""];
""287_approve"" [label=""approve""];
""287_transfer"" [label=""transfer""];
""287_burnTotalSupply"" [label=""burnTotalSupply""];
""287_transferFrom"" [label=""transferFrom""];
""287_burnSupply"" [label=""burnSupply""];
""287_NutrioCoin"" [label=""NutrioCoin""];
""287_burnSupply"" -> ""287_isOwner"";
""287_setName"" -> ""287_isOwner"";
""287_burnTotalSupply"" -> ""287_isOwner"";
}
"
0x31d4c5be1082a88f2abafea549b6c189c2cf057f.sol,ClockAuctionBase,contract ClockAuctionBase { struct Auction { address seller; uint128 startingPrice; uint128 endingPrice; uint64 duration; uint64 startedAt; },1,"subgraph cluster_1888_ClockAuctionBase {
label=""ClockAuctionBase"";
""1888__addAuction"" [label=""_addAuction""];
""1888__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""1888__isOnAuction"" [label=""_isOnAuction""];
""1888__currentPrice"" [label=""_currentPrice""];
""1888__owns"" [label=""_owns""];
""1888__escrow"" [label=""_escrow""];
""1888__bid"" [label=""_bid""];
""1888__transfer"" [label=""_transfer""];
""1888__cancelAuction"" [label=""_cancelAuction""];
""1888__computeCut"" [label=""_computeCut""];
""1888_fallback"" [label=""fallback""];
""1888__removeAuction"" [label=""_removeAuction""];
""1888__bid"" -> ""1888__isOnAuction"";
""1888__bid"" -> ""1888__removeAuction"";
""1888__cancelAuction"" -> ""1888__removeAuction"";
""1888__cancelAuction"" -> ""1888__transfer"";
""1888__bid"" -> ""1888__currentPrice"";
""1888__currentPrice"" -> ""1888__computeCurrentPrice"";
""1888__bid"" -> ""1888__computeCut"";
}
"
0x1ba2626b5753b7a6cfe785ed9e28fb1c85793fa6.sol,SLUTZToken,"contract SLUTZToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function SLUTZToken() public { symbol = ; name = ; decimals = 8; _totalSupply = 25000000000000000; balances[0x2a590BE07c6178c1A743C1ddD94ECA1cAfc97FA1] = _totalSupply; Transfer(address(25000000000000000), 0x2a590BE07c6178c1A743C1ddD94ECA1cAfc97FA1, _totalSupply); }",1,"subgraph cluster_543_SLUTZToken {
label=""SLUTZToken"";
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_SLUTZToken"" [label=""SLUTZToken""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0xcd6cb1b25006603382b9e9a832b8686ae240373b.sol,EtheramaCore,"contract EtheramaCore is EtheramaGasPriceLimit { uint256 constant public MAGNITUDE = 2**64; uint256 constant public MIN_TOKEN_DEAL_VAL = 0.1 ether; uint256 constant public MAX_TOKEN_DEAL_VAL = 1000000 ether; uint256 constant public MIN_ETH_DEAL_VAL = 0.001 ether; uint256 constant public MAX_ETH_DEAL_VAL = 200000 ether; uint256 public _bigPromoPercent = 5 ether; uint256 public _quickPromoPercent = 5 ether; uint256 public _devRewardPercent = 15 ether; uint256 public _tokenOwnerRewardPercent = 30 ether; uint256 public _shareRewardPercent = 25 ether; uint256 public _refBonusPercent = 20 ether; uint128 public _bigPromoBlockInterval = 9999; uint128 public _quickPromoBlockInterval = 100; uint256 public _promoMinPurchaseEth = 1 ether; uint256 public _minRefEthPurchase = 0.5 ether; uint256 public _totalIncomeFeePercent = 100 ether; uint256 public _currentBigPromoBonus; uint256 public _currentQuickPromoBonus; uint256 public _devReward; uint256 public _initBlockNum; mapping(address => bool) private _controllerContracts; mapping(uint256 => address) private _controllerIndexer; uint256 private _controllerContractCount; mapping(address => mapping(address => uint256)) private _userTokenLocalBalances; mapping(address => mapping(address => uint256)) private _rewardPayouts; mapping(address => mapping(address => uint256)) private _refBalances; mapping(address => mapping(address => uint256)) private _promoQuickBonuses; mapping(address => mapping(address => uint256)) private _promoBigBonuses; mapping(address => mapping(address => uint256)) private _userEthVolumeSaldos; mapping(address => uint256) private _bonusesPerShare; mapping(address => uint256) private _buyCounts; mapping(address => uint256) private _sellCounts; mapping(address => uint256) private _totalVolumeEth; mapping(address => uint256) private _totalVolumeToken; event onWithdrawUserBonus(address indexed userAddress, uint256 ethWithdrawn); modifier onlyController() { require(_controllerContracts[msg.sender]); _; }",1,"subgraph cluster_2025_EtheramaCore {
label=""EtheramaCore"";
""2025_getBonusPerShare"" [label=""getBonusPerShare""];
""2025__promoMinPurchaseEth"" [label=""_promoMinPurchaseEth""];
""2025__currentQuickPromoBonus"" [label=""_currentQuickPromoBonus""];
""2025_getSellCount"" [label=""getSellCount""];
""2025_getCurrentUserPromoBonus"" [label=""getCurrentUserPromoBonus""];
""2025_MIN_ETH_DEAL_VAL"" [label=""MIN_ETH_DEAL_VAL""];
""2025__totalIncomeFeePercent"" [label=""_totalIncomeFeePercent""];
""2025_getTotalSellCount"" [label=""getTotalSellCount""];
""2025_addUserTokenLocalBalance"" [label=""addUserTokenLocalBalance""];
""2025__bigPromoPercent"" [label=""_bigPromoPercent""];
""2025_setPromoMinPurchaseEth"" [label=""setPromoMinPurchaseEth""];
""2025_getCurrentUserReward"" [label=""getCurrentUserReward""];
""2025_withdrawUserReward"" [label=""withdrawUserReward""];
""2025_addBigPromoBonus"" [label=""addBigPromoBonus""];
""2025_changeControllerContract"" [label=""changeControllerContract""];
""2025__quickPromoBlockInterval"" [label=""_quickPromoBlockInterval""];
""2025_getUserTotalReward"" [label=""getUserTotalReward""];
""2025__quickPromoPercent"" [label=""_quickPromoPercent""];
""2025_setTotalIncomeFeePercent"" [label=""setTotalIncomeFeePercent""];
""2025_getBuyCount"" [label=""getBuyCount""];
""2025_addQuickPromoBonus"" [label=""addQuickPromoBonus""];
""2025_addUserRewardPayouts"" [label=""addUserRewardPayouts""];
""2025_setMinRefEthPurchase"" [label=""setMinRefEthPurchase""];
""2025_getUserBigPromoBonus"" [label=""getUserBigPromoBonus""];
""2025_setRewardPercentages"" [label=""setRewardPercentages""];
""2025_MIN_TOKEN_DEAL_VAL"" [label=""MIN_TOKEN_DEAL_VAL""];
""2025_trackBuy"" [label=""trackBuy""];
""2025_addControllerContract"" [label=""addControllerContract""];
""2025_trackSell"" [label=""trackSell""];
""2025_MAX_ETH_DEAL_VAL"" [label=""MAX_ETH_DEAL_VAL""];
""2025_setQuickPromoInterval"" [label=""setQuickPromoInterval""];
""2025_getCurrentUserShareBonus"" [label=""getCurrentUserShareBonus""];
""2025__devRewardPercent"" [label=""_devRewardPercent""];
""2025_addDevReward"" [label=""addDevReward""];
""2025_getUserReward"" [label=""getUserReward""];
""2025_convertRealTo256"" [label=""convertRealTo256""];
""2025_getBigPromoRemainingBlocks"" [label=""getBigPromoRemainingBlocks""];
""2025_calcPercent"" [label=""calcPercent""];
""2025__tokenOwnerRewardPercent"" [label=""_tokenOwnerRewardPercent""];
""2025__refBonusPercent"" [label=""_refBonusPercent""];
""2025_addBonusPerShare"" [label=""addBonusPerShare""];
""2025_MAX_GAS_PRICE"" [label=""MAX_GAS_PRICE""];
""2025_getCurrentUserRefBonus"" [label=""getCurrentUserRefBonus""];
""2025_constructor"" [label=""constructor""];
""2025_addUserRefBalance"" [label=""addUserRefBalance""];
""2025__bigPromoBlockInterval"" [label=""_bigPromoBlockInterval""];
""2025_MAGNITUDE"" [label=""MAGNITUDE""];
""2025_getTotalCollectedPromoBonus"" [label=""getTotalCollectedPromoBonus""];
""2025_withdrawRemainingEthAfterAll"" [label=""withdrawRemainingEthAfterAll""];
""2025_getUserEthVolumeSaldo"" [label=""getUserEthVolumeSaldo""];
""2025_resetUserPromoBonus"" [label=""resetUserPromoBonus""];
""2025_setBigPromoInterval"" [label=""setBigPromoInterval""];
""2025_getTotalVolumeToken"" [label=""getTotalVolumeToken""];
""2025_convert256ToReal"" [label=""convert256ToReal""];
""2025_getRewardAndPrepareWithdraw"" [label=""getRewardAndPrepareWithdraw""];
""2025_getUserRefBalance"" [label=""getUserRefBalance""];
""2025_resetUserRefBalance"" [label=""resetUserRefBalance""];
""2025_getTotalVolumeEth"" [label=""getTotalVolumeEth""];
""2025__minRefEthPurchase"" [label=""_minRefEthPurchase""];
""2025_getInitBlockNum"" [label=""getInitBlockNum""];
""2025_getBlockNumSinceInit"" [label=""getBlockNumSinceInit""];
""2025_getTotalBuyCount"" [label=""getTotalBuyCount""];
""2025__shareRewardPercent"" [label=""_shareRewardPercent""];
""2025_getUserTotalEthVolumeSaldo"" [label=""getUserTotalEthVolumeSaldo""];
""2025_trackTotalVolume"" [label=""trackTotalVolume""];
""2025_getTotalBonusPerShare"" [label=""getTotalBonusPerShare""];
""2025_removeControllerContract"" [label=""removeControllerContract""];
""2025_getUserQuickPromoBonus"" [label=""getUserQuickPromoBonus""];
""2025_getUserTotalPromoBonus"" [label=""getUserTotalPromoBonus""];
""2025_subUserTokenLocalBalance"" [label=""subUserTokenLocalBalance""];
""2025_getUserTokenLocalBalance"" [label=""getUserTokenLocalBalance""];
""2025_getUserRewardPayouts"" [label=""getUserRewardPayouts""];
""2025_getQuickPromoRemainingBlocks"" [label=""getQuickPromoRemainingBlocks""];
""2025_isRefAvailable"" [label=""isRefAvailable""];
""2025_withdrawDevReward"" [label=""withdrawDevReward""];
""2025_getCurrentUserTotalReward"" [label=""getCurrentUserTotalReward""];
""2025_MAX_TOKEN_DEAL_VAL"" [label=""MAX_TOKEN_DEAL_VAL""];
""2025_payoutQuickBonus"" [label=""payoutQuickBonus""];
""2025__currentBigPromoBonus"" [label=""_currentBigPromoBonus""];
""2025_payoutBigBonus"" [label=""payoutBigBonus""];
""2025_getCurrentUserShareBonus"" -> ""2025_getUserTotalReward"";
""2025_addUserRewardPayouts"" -> ""2025_addUserRewardPayouts"";
""2025_withdrawDevReward"" -> ""2025_onlyAdministrator"";
""2025_isRefAvailable"" -> ""2025_getUserTotalEthVolumeSaldo"";
""2025_setRewardPercentages"" -> ""2025_onlyAdministrator"";
""2025_setTotalIncomeFeePercent"" -> ""2025_onlyController"";
""2025_addControllerContract"" -> ""2025_onlyAdministrator"";
""2025_getCurrentUserTotalReward"" -> ""2025_getUserTotalReward"";
""2025_resetUserRefBalance"" -> ""2025_onlyController"";
""2025_resetUserPromoBonus"" -> ""2025_resetUserPromoBonus"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_addUserRewardPayouts"";
""2025_resetUserPromoBonus"" -> ""2025_onlyController"";
""2025_addUserRewardPayouts"" -> ""2025_onlyController"";
""2025_getCurrentUserRefBonus"" -> ""2025_getUserTotalReward"";
""2025_withdrawUserReward"" -> ""2025_getRewardAndPrepareWithdraw"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserTotalPromoBonus"";
""2025_setQuickPromoInterval"" -> ""2025_onlyAdministrator"";
""2025_getCurrentUserReward"" -> ""2025_getUserTotalReward"";
""2025_constructor"" -> ""2025_constructor"";
""2025_addBonusPerShare"" -> ""2025_onlyController"";
""2025_addDevReward"" -> ""2025_onlyController"";
""2025_trackSell"" -> ""2025_trackTotalVolume"";
""2025_getBigPromoRemainingBlocks"" -> ""2025_getBlockNumSinceInit"";
""2025_trackBuy"" -> ""2025_onlyController"";
""2025_withdrawRemainingEthAfterAll"" -> ""2025_onlyAdministrator"";
""2025_resetUserRefBalance"" -> ""2025_resetUserRefBalance"";
""2025_addQuickPromoBonus"" -> ""2025_onlyController"";
""2025_setMinRefEthPurchase"" -> ""2025_onlyAdministrator"";
""2025_changeControllerContract"" -> ""2025_onlyAdministrator"";
""2025_subUserTokenLocalBalance"" -> ""2025_onlyController"";
""2025_getBlockNumSinceInit"" -> ""2025_getInitBlockNum"";
""2025_setBigPromoInterval"" -> ""2025_onlyAdministrator"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserRefBalance"";
""2025_payoutQuickBonus"" -> ""2025_onlyController"";
""2025_payoutBigBonus"" -> ""2025_onlyController"";
""2025_trackBuy"" -> ""2025_trackTotalVolume"";
""2025_addUserTokenLocalBalance"" -> ""2025_onlyController"";
""2025_addUserRefBalance"" -> ""2025_onlyController"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_resetUserPromoBonus"";
""2025_getUserTotalReward"" -> ""2025_getUserReward"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_getUserReward"";
""2025_trackSell"" -> ""2025_onlyController"";
""2025_getQuickPromoRemainingBlocks"" -> ""2025_getBlockNumSinceInit"";
""2025_addBigPromoBonus"" -> ""2025_onlyController"";
""2025_removeControllerContract"" -> ""2025_onlyAdministrator"";
""2025_getRewardAndPrepareWithdraw"" -> ""2025_resetUserRefBalance"";
""2025_getCurrentUserPromoBonus"" -> ""2025_getUserTotalReward"";
""2025_isRefAvailable"" -> ""2025_isRefAvailable"";
""2025_setPromoMinPurchaseEth"" -> ""2025_onlyAdministrator"";
}
"
0x261bb5e1c53248860f4bc405abaae3e0bfc12874.sol,LockBalance,"contract LockBalance is Ownable { enum eLockType {None, Individual, GroupA, GroupB, GroupC, GroupD}",1,"subgraph cluster_1554_LockBalance {
label=""LockBalance"";
""1554_clearLockUser"" [label=""clearLockUser""];
""1554_deleteLockDate"" [label=""deleteLockDate""];
""1554_lockBalanceIndividual"" [label=""lockBalanceIndividual""];
""1554_addLockDate"" [label=""addLockDate""];
""1554_lockTypeInfoGroup"" [label=""lockTypeInfoGroup""];
""1554_setLockUser"" [label=""setLockUser""];
""1554_lockBalanceAll"" [label=""lockBalanceAll""];
""1554_lockUserInfo"" [label=""lockUserInfo""];
""1554_lockBalanceGroup"" [label=""lockBalanceGroup""];
""1554_lockUserInfo"" -> ""1554_lockBalanceIndividual"";
""1554_addLockDate"" -> ""1554_onlyOwner"";
""1554_deleteLockDate"" -> ""1554_onlyOwner"";
""1554_clearLockUser"" -> ""1554_onlyOwner"";
""1554_lockUserInfo"" -> ""1554_lockBalanceGroup"";
""1554_lockBalanceAll"" -> ""1554_lockBalanceIndividual"";
""1554_lockBalanceAll"" -> ""1554_lockBalanceGroup"";
}
"
0x74a31dc20802cb1e41201af055ce7dfcd31d291d.sol,m10fanclub,"contract m10fanclub is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function m10fanclub() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 12 weeks; endDate = now + 52 weeks; }",1,"subgraph cluster_609_m10fanclub {
label=""m10fanclub"";
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_totalSupply"" [label=""totalSupply""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_transferFrom"" [label=""transferFrom""];
""609_m10fanclub"" [label=""m10fanclub""];
""609_approve"" [label=""approve""];
""609_allowance"" [label=""allowance""];
""609_transfer"" [label=""transfer""];
""609_fallback"" [label=""fallback""];
""609_balanceOf"" [label=""balanceOf""];
""609_fallback"" -> ""609_safeAdd"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_transferFrom"" -> ""609_safeSub"";
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
""609_transfer"" -> ""609_safeAdd"";
""609_transfer"" -> ""609_safeSub"";
}
"
0x17d0582dee50a5401bb8f65ac29ec2da50c670ea.sol,Slot,"contract Slot { uint constant BET_EXPIRATION_BLOCKS = 250; uint constant MIN_BET = 0.01 ether; uint constant MAX_BET = 300000 ether; uint constant JACKPOT_PERCENT = 10; uint constant MINIPOT_PERCENT = 10; uint[][] REELS = [ [1,2,1,3,1,4,5,3,5,6], [1,2,1,3,1,4,1,3,1,6], [4,5,3,5,4,2,4,3,5,6] ]; uint[] SYMBOL_MASK = [0, 1, 2, 4, 8, 16, 32]; uint[][] PAYTABLE = [ [0x010100, 2], [0x010120, 4], [0x010110, 4], [0x040402, 8], [0x040404, 8], [0x080802, 12], [0x080808, 12], [0x202002, 16], [0x020220, 16], [0x202020, 100], [0x020202, 9999] ]; address owner; address pendingOwner; uint acceptPrice; uint public pendingBetAmount; uint public jackpotPool; uint public minipotPool; uint public rollTimes; uint public minipotTimes; struct Roll { uint bet; uint8 lines; uint8 rollCount; uint blocknum; address next; }",1,"subgraph cluster_1139_Slot {
label=""Slot"";
""1139_doRoll"" [label=""doRoll""];
""1139_kill"" [label=""kill""];
""1139_fallback"" [label=""fallback""];
""1139_constructor"" [label=""constructor""];
""1139_acceptOwner"" [label=""acceptOwner""];
""1139_minipot"" [label=""minipot""];
""1139_distribute"" [label=""distribute""];
""1139_getBonus"" [label=""getBonus""];
""1139_getPartnersCount"" [label=""getPartnersCount""];
""1139_calcPayout"" [label=""calcPayout""];
""1139_calcRoll"" [label=""calcRoll""];
""1139_roll"" [label=""roll""];
""1139_check"" [label=""check""];
""1139_setOwner"" [label=""setOwner""];
""1139_checkRoll"" [label=""checkRoll""];
""1139_jackpot"" [label=""jackpot""];
""1139_rollBlockNumber"" [label=""rollBlockNumber""];
""1139_calcRoll"" -> ""1139_calcPayout"";
""1139_kill"" -> ""1139_distribute"";
""1139_checkRoll"" -> ""1139_doRoll"";
""1139_doRoll"" -> ""1139_calcRoll"";
""1139_distribute"" -> ""1139_getBonus"";
""1139_check"" -> ""1139_checkRoll"";
}
"
0x00416b9d728069edb0ceb04bc2b203fa7336d1f1.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_processTransaction"" [label=""processTransaction""];
""928_pullBalance"" [label=""pullBalance""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_refundTransaction"";
""928_fallback"" -> ""928_processTransaction"";
}
"
0x37d82a4e03e93529c1a32429984e12e7875ea1d8.sol,OMGCatCoin,"contract OMGCatCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function OMGCatCoin() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000 * 10**uint(decimals); balances[0x921beCA00339c458342cF09b4B0f4adb3942e332] = _totalSupply; Transfer(address(0), 0x921beCA00339c458342cF09b4B0f4adb3942e332, _totalSupply); }",1,"subgraph cluster_549_OMGCatCoin {
label=""OMGCatCoin"";
""549_fallback"" [label=""fallback""];
""549_approveAndCall"" [label=""approveAndCall""];
""549_balanceOf"" [label=""balanceOf""];
""549_transferFrom"" [label=""transferFrom""];
""549_allowance"" [label=""allowance""];
""549_transfer"" [label=""transfer""];
""549_approve"" [label=""approve""];
""549_OMGCatCoin"" [label=""OMGCatCoin""];
""549_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""549_totalSupply"" [label=""totalSupply""];
""549_transfer"" -> ""549_safeAdd"";
""549_transferFrom"" -> ""549_safeAdd"";
""549_transferFrom"" -> ""549_safeSub"";
""549_transfer"" -> ""549_safeSub"";
""549_transferAnyERC20Token"" -> ""549_onlyOwner"";
}
"
0x33b44a1d150f3feaa40503ad20a75634adc39b18.sol,TimeCapsule,contract TimeCapsule is Ownable { address public Owner; mapping (address=>uint) public deposits; uint public openDate; function initCapsule(uint open) { Owner = msg.sender; openDate = open; },1,"subgraph cluster_130_TimeCapsule {
label=""TimeCapsule"";
""130_deposit"" [label=""deposit""];
""130_initCapsule"" [label=""initCapsule""];
""130_kill"" [label=""kill""];
""130_withdraw"" [label=""withdraw""];
""130_fallback"" [label=""fallback""];
""130_withdraw"" -> ""130_isOwner"";
""130_kill"" -> ""130_isOwner"";
""130_fallback"" -> ""130_deposit"";
}
"
0x0094110c81183740c23d561818500ce0c8222d8b.sol,Bitscreen,contract Bitscreen { struct IPFSHash { bytes32 hash; uint8 hashFunction; uint8 size; },1,"subgraph cluster_747_Bitscreen {
label=""Bitscreen"";
""747_emergencyOverwrite"" [label=""emergencyOverwrite""];
""747_getBadAddresses"" [label=""getBadAddresses""];
""747_calculateCurrDynamicPrice"" [label=""calculateCurrDynamicPrice""];
""747_truncToThreeDecimals"" [label=""truncToThreeDecimals""];
""747_calcuCurrTxDividend"" [label=""calcuCurrTxDividend""];
""747_fallback"" [label=""fallback""];
""747_changeRules"" [label=""changeRules""];
""747_inquireDividentAmount"" [label=""inquireDividentAmount""];
""747_changeBid"" [label=""changeBid""];
""747_changePriceDecreasePercent"" [label=""changePriceDecreasePercent""];
""747_withdrawOwnerAmount"" [label=""withdrawOwnerAmount""];
""747_Bitscreen"" [label=""Bitscreen""];
""747_withdrawDividend"" [label=""withdrawDividend""];
""747_changePriceDecreasePeriod"" [label=""changePriceDecreasePeriod""];
""747_withdrawDividend"" -> ""747_calcuCurrTxDividend"";
""747_inquireDividentAmount"" -> ""747_calcuCurrTxDividend"";
""747_changeBid"" -> ""747_truncToThreeDecimals"";
""747_changeBid"" -> ""747_calculateCurrDynamicPrice"";
}
"
0xdc448e8a2a92a5ce799b197e982d773c605318a4.sol,YESToken,"contract YESToken is Ownable, BriantToken { function YESToken() BriantToken () {}",1,"subgraph cluster_751_YESToken {
label=""YESToken"";
""751_transfer"" [label=""transfer""];
""751_allowance"" [label=""allowance""];
""751_approve"" [label=""approve""];
""751_mintToken"" [label=""mintToken""];
""751_transferFrom"" [label=""transferFrom""];
""751_YESToken"" [label=""YESToken""];
""751_transferFrom"" -> ""751_onlyPayloadSize"";
""751_mintToken"" -> ""751_onlyOwner"";
""751_YESToken"" -> ""751_Ownable"";
}
"
0xcfca01488643501cab56d1855921c897d5ee4b1b.sol,BitcoinInw,"contract BitcoinInw is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 21000000000000000000000000; balances[0xbcceFb33F12FbBfE0eD87b11187B5C78Dcd13b6c] = _totalSupply; emit Transfer(address(0), 0xbcceFb33F12FbBfE0eD87b11187B5C78Dcd13b6c, _totalSupply); }",1,"subgraph cluster_543_BitcoinInw {
label=""BitcoinInw"";
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_constructor"" [label=""constructor""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x1f9033b3fdf74e1d7619447bc491d73a36967d71.sol,MintableToken,"contract MintableToken is StandardToken, Ownable { event Mint(address indexed to, uint256 amount); event Burn(address indexed burner, uint value); event MintFinished(); bool public mintingFinished = false; modifier canMint() { require(!mintingFinished); _; }",1,"subgraph cluster_476_MintableToken {
label=""MintableToken"";
""476_mint"" [label=""mint""];
""476_burn"" [label=""burn""];
""476_finishMinting"" [label=""finishMinting""];
""476_mint"" -> ""476_canMint"";
""476_finishMinting"" -> ""476_onlyOwner"";
""476_burn"" -> ""476_onlyOwner"";
""476_mint"" -> ""476_onlyOwner"";
""476_finishMinting"" -> ""476_canMint"";
}
"
0xd54920cedf704b87342fa26d5773efabf9037a77.sol,CryptoStars,contract CryptoStars { address owner; string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public initialPrice; uint256 public transferPrice; uint256 public MaxStarIndexAvailable; uint256 public MinStarIndexAvailable; uint public nextStarIndexToAssign = 0; uint public starsRemainingToAssign = 0; uint public numberOfStarsToReserve; uint public numberOfStarsReserved = 0; mapping (uint => address) public starIndexToAddress; mapping (uint => string) public starIndexToSTRZName; mapping (uint => string) public starIndexToSTRZMasterName; mapping (address => uint256) public balanceOf; struct Offer { bool isForSale; uint starIndex; address seller; uint minValue; address onlySellTo; },1,"subgraph cluster_1592_CryptoStars {
label=""CryptoStars"";
""1592_setGivenName"" [label=""setGivenName""];
""1592_offerStarForSale"" [label=""offerStarForSale""];
""1592_buyStar"" [label=""buyStar""];
""1592_setStarInitialPrice"" [label=""setStarInitialPrice""];
""1592_reserveStarsForOwner"" [label=""reserveStarsForOwner""];
""1592_offerStarForSaleToAddress"" [label=""offerStarForSaleToAddress""];
""1592_CryptoStars"" [label=""CryptoStars""];
""1592_setTransferPrice"" [label=""setTransferPrice""];
""1592_acceptBidForStar"" [label=""acceptBidForStar""];
""1592_getStar"" [label=""getStar""];
""1592_getMinMax"" [label=""getMinMax""];
""1592_buyStarInitial"" [label=""buyStarInitial""];
""1592_withdraw"" [label=""withdraw""];
""1592_setMinMax"" [label=""setMinMax""];
""1592_setMasterName"" [label=""setMasterName""];
""1592_starNoLongerForSale"" [label=""starNoLongerForSale""];
""1592_transferStar"" [label=""transferStar""];
""1592_withdrawBidForStar"" [label=""withdrawBidForStar""];
""1592_withdrawPartial"" [label=""withdrawPartial""];
""1592_enterBidForStar"" [label=""enterBidForStar""];
""1592_buyStar"" -> ""1592_starNoLongerForSale"";
}
"
0x341492c5f449ca8accae37d73aed8fcd21995ef9.sol,WEIPAY,"contract WEIPAY { string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_WEIPAY {
label=""WEIPAY"";
""361_transfer"" [label=""transfer""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_constructor"" [label=""constructor""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x31a5f35f32756fe35d39bafe85607d93185b23f2.sol,GNNM,"contract GNNM { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function GNNM( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_GNNM {
label=""GNNM"";
""380_transfer"" [label=""transfer""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_transferFrom"" [label=""transferFrom""];
""380__transfer"" [label=""_transfer""];
""380_burnFrom"" [label=""burnFrom""];
""380_GNNM"" [label=""GNNM""];
""380_burn"" [label=""burn""];
""380_transferFrom"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
}
"
0xeca0415f309789ade195a51988d760b6d51f5de9.sol,GreenMed,"contract GreenMed is ERC20Interface { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 _totalSupply = 100000000000000000000000000; address public owner; uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; modifier onlyOwner() { if (msg.sender != owner) { throw; }",1,"subgraph cluster_503_GreenMed {
label=""GreenMed"";
""503_setPrices"" [label=""setPrices""];
""503_sell"" [label=""sell""];
""503_buy"" [label=""buy""];
""503_GreenMed"" [label=""GreenMed""];
""503_freezeAccount"" [label=""freezeAccount""];
""503_approveAndCall"" [label=""approveAndCall""];
""503_transferFrom"" [label=""transferFrom""];
""503_balanceOf"" [label=""balanceOf""];
""503_allowance"" [label=""allowance""];
""503_totalSupply"" [label=""totalSupply""];
""503_transfer"" [label=""transfer""];
""503_approve"" [label=""approve""];
""503_approveAndCall"" -> ""503_approve"";
""503_freezeAccount"" -> ""503_onlyOwner"";
""503_setPrices"" -> ""503_onlyOwner"";
}
"
0xf4702b0918a8a89dfc38459ce42198834818f26b.sol,multiowned,contract multiowned { struct PendingState { uint yetNeeded; uint ownersDone; uint index; },1,"subgraph cluster_717_multiowned {
label=""multiowned"";
""717_changeRequirement"" [label=""changeRequirement""];
""717_changeOwner"" [label=""changeOwner""];
""717_isOwner"" [label=""isOwner""];
""717_multiowned"" [label=""multiowned""];
""717_reorganizeOwners"" [label=""reorganizeOwners""];
""717_clearPending"" [label=""clearPending""];
""717_hasConfirmed"" [label=""hasConfirmed""];
""717_revoke"" [label=""revoke""];
""717_getOwner"" [label=""getOwner""];
""717_addOwner"" [label=""addOwner""];
""717_removeOwner"" [label=""removeOwner""];
""717_confirmAndCheck"" [label=""confirmAndCheck""];
""717_addOwner"" -> ""717_onlymanyowners"";
""717_changeOwner"" -> ""717_isOwner"";
""717_removeOwner"" -> ""717_reorganizeOwners"";
""717_addOwner"" -> ""717_clearPending"";
""717_changeOwner"" -> ""717_clearPending"";
""717_changeRequirement"" -> ""717_clearPending"";
""717_changeRequirement"" -> ""717_onlymanyowners"";
""717_addOwner"" -> ""717_reorganizeOwners"";
""717_removeOwner"" -> ""717_onlymanyowners"";
""717_addOwner"" -> ""717_isOwner"";
""717_changeOwner"" -> ""717_onlymanyowners"";
""717_removeOwner"" -> ""717_clearPending"";
}
"
0x87e960f996e789ca2c8415fc449e4720adbe0497.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_allowance"" [label=""allowance""];
""256_transferFrom"" [label=""transferFrom""];
""256_approve"" [label=""approve""];
""256_balanceOf"" [label=""balanceOf""];
""256_transfer"" [label=""transfer""];
}
"
0xed17658ad6b3fe87c7dc7323d0e77c4116a23626.sol,Deploy,"contract Deploy is Ownable, Arbitrage { function transfer(address _to, uint256 _value) { require(balances[msg.sender] > _value); require(balances[_to] + _value > balances[_to]); balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); }",1,"subgraph cluster_643_Deploy {
label=""Deploy"";
""643_transfer"" [label=""transfer""];
""643_mintToken"" [label=""mintToken""];
""643_mintToken"" -> ""643_onlyOwner"";
}
"
0x05215fce25902366480696f38c3093e31dbce69a.sol,REV1,contract REV1 { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1447_REV1 {
label=""REV1"";
""1447_balanceOf"" [label=""balanceOf""];
""1447_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1447_totalSupply"" [label=""totalSupply""];
""1447_buyPrice"" [label=""buyPrice""];
""1447_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1447_setName"" [label=""setName""];
""1447_setSymbol"" [label=""setSymbol""];
""1447_excludeAmbassadors"" [label=""excludeAmbassadors""];
""1447_fallback"" [label=""fallback""];
""1447_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1447_sell"" [label=""sell""];
""1447_disableWhitelist"" [label=""disableWhitelist""];
""1447_myTokens"" [label=""myTokens""];
""1447_exit"" [label=""exit""];
""1447_setAdministrator"" [label=""setAdministrator""];
""1447_sqrt"" [label=""sqrt""];
""1447_buy"" [label=""buy""];
""1447_purchaseTokens"" [label=""purchaseTokens""];
""1447_reinvest"" [label=""reinvest""];
""1447_sellPrice"" [label=""sellPrice""];
""1447_withdraw"" [label=""withdraw""];
""1447_transfer"" [label=""transfer""];
""1447_constructor"" [label=""constructor""];
""1447_myDividends"" [label=""myDividends""];
""1447_setStakingRequirement"" [label=""setStakingRequirement""];
""1447_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1447_dividendsOf"" [label=""dividendsOf""];
""1447_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1447_exit"" -> ""1447_sell"";
""1447_sell"" -> ""1447_onlyBagholders"";
""1447_purchaseTokens"" -> ""1447_limitBuy"";
""1447_ethereumToTokens_"" -> ""1447_sqrt"";
""1447_calculateEthereumReceived"" -> ""1447_tokensToEthereum_"";
""1447_transfer"" -> ""1447_myDividends"";
""1447_sellPrice"" -> ""1447_tokensToEthereum_"";
""1447_buyPrice"" -> ""1447_tokensToEthereum_"";
""1447_buy"" -> ""1447_excludeAmbassadors"";
""1447_transfer"" -> ""1447_onlyBagholders"";
""1447_withdraw"" -> ""1447_onlyStronghands"";
""1447_setStakingRequirement"" -> ""1447_onlyAdministrator"";
""1447_excludeAmbassadors"" -> ""1447_purchaseTokens"";
""1447_setAdministrator"" -> ""1447_onlyAdministrator"";
""1447_myTokens"" -> ""1447_balanceOf"";
""1447_calculateTokensReceived"" -> ""1447_ethereumToTokens_"";
""1447_transfer"" -> ""1447_withdraw"";
""1447_setName"" -> ""1447_onlyAdministrator"";
""1447_fallback"" -> ""1447_excludeAmbassadors"";
""1447_withdraw"" -> ""1447_myDividends"";
""1447_purchaseTokens"" -> ""1447_ethereumToTokens_"";
""1447_reinvest"" -> ""1447_purchaseTokens"";
""1447_sell"" -> ""1447_tokensToEthereum_"";
""1447_myDividends"" -> ""1447_dividendsOf"";
""1447_setSymbol"" -> ""1447_onlyAdministrator"";
""1447_reinvest"" -> ""1447_onlyStronghands"";
""1447_exit"" -> ""1447_withdraw"";
""1447_reinvest"" -> ""1447_myDividends"";
}
"
0x8815df7e7e92b9b038658f0870e062548136e8cd.sol,LDC,"contract LDC is owned { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event FrozenFunds(address target, bool frozen); function freezeAccount(address target, bool freeze) onlyOwner { frozenAccount[target] = freeze; FrozenFunds(target, freeze); }",1,"subgraph cluster_457_LDC {
label=""LDC"";
""457_LDC"" [label=""LDC""];
""457_burnFrom"" [label=""burnFrom""];
""457_mintToken"" [label=""mintToken""];
""457_approve"" [label=""approve""];
""457_freezeAccount"" [label=""freezeAccount""];
""457_approveAndCall"" [label=""approveAndCall""];
""457_transferFrom"" [label=""transferFrom""];
""457_transfer"" [label=""transfer""];
""457__transfer"" [label=""_transfer""];
""457_burn"" [label=""burn""];
""457_transferFrom"" -> ""457__transfer"";
""457_freezeAccount"" -> ""457_onlyOwner"";
""457_approveAndCall"" -> ""457_approve"";
""457_mintToken"" -> ""457_onlyOwner"";
""457_transfer"" -> ""457__transfer"";
}
"
0xd4b36aadb0d90a32dbc15537db6e3054c52a3f62.sol,WncToken,"contract WncToken is owned, TokenERC20 { uint256 public buyPrice = 1 ether; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function WncToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_607_WncToken {
label=""WncToken"";
""607_mintToken"" [label=""mintToken""];
""607__transfer"" [label=""_transfer""];
""607_withdraw"" [label=""withdraw""];
""607_setPrices"" [label=""setPrices""];
""607_WncToken"" [label=""WncToken""];
""607_freezeAccount"" [label=""freezeAccount""];
""607_buy"" [label=""buy""];
""607_freezeAccount"" -> ""607_onlyOwner"";
""607_setPrices"" -> ""607_onlyOwner"";
""607_buy"" -> ""607__transfer"";
""607_mintToken"" -> ""607_onlyOwner"";
""607_withdraw"" -> ""607_onlyOwner"";
""607_WncToken"" -> ""607_TokenERC20"";
}
"
0x036ba95116edf4f79d5c0da9639ed1f31b1ebcd9.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_balanceOf"" [label=""balanceOf""];
""256_approve"" [label=""approve""];
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
""256_transferFrom"" [label=""transferFrom""];
}
"
0x84d5c939ddfdc3ea033f03e18213a6906f94e0c3.sol,CryptoSagaDungeonProgress,"contract CryptoSagaDungeonProgress is Claimable, AccessDeploy { mapping(address => uint32[25]) public addressToProgress; function getProgressOfAddressAndId(address _address, uint32 _id) external view returns (uint32) { var _progressList = addressToProgress[_address]; return _progressList[_id]; }",1,"subgraph cluster_3297_CryptoSagaDungeonProgress {
label=""CryptoSagaDungeonProgress"";
""3297_getProgressOfAddressAndId"" [label=""getProgressOfAddressAndId""];
""3297_incrementProgressOfAddressAndId"" [label=""incrementProgressOfAddressAndId""];
""3297_incrementProgressOfAddressAndId"" -> ""3297_onlyAccessDeploy"";
}
"
0xf1e6b7f94bb0d70d8a19187f684e4270b0a0c989.sol,ERC20TokenCPN,contract ERC20TokenCPN { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 0; address public regulator; uint8 public regulatorStatus; uint internal amount; struct agent { uint balance; mapping (address => uint) allowed; uint8 permission; },1,"subgraph cluster_633_ERC20TokenCPN {
label=""ERC20TokenCPN"";
""633_changeAgentPermission"" [label=""changeAgentPermission""];
""633_burn"" [label=""burn""];
""633_changeRegulator"" [label=""changeRegulator""];
""633_totalSupply"" [label=""totalSupply""];
""633_approve"" [label=""approve""];
""633_transferFrom"" [label=""transferFrom""];
""633_changeRegulatorStatus"" [label=""changeRegulatorStatus""];
""633_agentPermission"" [label=""agentPermission""];
""633_ERC20TokenCPN"" [label=""ERC20TokenCPN""];
""633_destroy"" [label=""destroy""];
""633_transfer"" [label=""transfer""];
""633_allowance"" [label=""allowance""];
""633_balanceOf"" [label=""balanceOf""];
""633_mint"" [label=""mint""];
""633_mint"" -> ""633_transfer"";
""633_ERC20TokenCPN"" -> ""633_changeRegulatorStatus"";
""633_ERC20TokenCPN"" -> ""633_mint"";
""633_ERC20TokenCPN"" -> ""633_changeRegulator"";
}
"
0xd8d94cfa0dc8898d13e6f9a1618c490f68c160dd.sol,MichaelCoin,"contract MichaelCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function MichaelCoin() public { symbol = ; name = ; decimals = 0; _totalSupply = 100; balances[0xD67dc8F225D649B908EA5c6f0886FDd25cc4bC25] = _totalSupply; Transfer(address(0), 0xD67dc8F225D649B908EA5c6f0886FDd25cc4bC25, _totalSupply); }",1,"subgraph cluster_543_MichaelCoin {
label=""MichaelCoin"";
""543_totalSupply"" [label=""totalSupply""];
""543_MichaelCoin"" [label=""MichaelCoin""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_fallback"" [label=""fallback""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0xf208f8cdf637e49b5e6219fa76b014d49287894f.sol,Gainz,contract Gainz { address owner; constructor () public { owner = msg.sender; },1,"subgraph cluster_111_Gainz {
label=""Gainz"";
""111_paymentDue"" [label=""paymentDue""];
""111_balanceOf"" [label=""balanceOf""];
""111_constructor"" [label=""constructor""];
""111_fallback"" [label=""fallback""];
""111_fallback"" -> ""111_paymentDue"";
}
"
0x3ac96bbe8b60d715fd818b3fe242edf9def20571.sol,MyBoToken,"contract MyBoToken is owned, token { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); function MyBoToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}",1,"subgraph cluster_652_MyBoToken {
label=""MyBoToken"";
""652_sell"" [label=""sell""];
""652_MyBoToken"" [label=""MyBoToken""];
""652_transfer"" [label=""transfer""];
""652_buy"" [label=""buy""];
""652_freezeAccount"" [label=""freezeAccount""];
""652_mintToken"" [label=""mintToken""];
""652_burn"" [label=""burn""];
""652_setPrices"" [label=""setPrices""];
""652_transferFrom"" [label=""transferFrom""];
""652_freezeAccount"" -> ""652_onlyOwner"";
""652_MyBoToken"" -> ""652_token"";
""652_mintToken"" -> ""652_onlyOwner"";
""652_burn"" -> ""652_onlyOwner"";
""652_setPrices"" -> ""652_onlyOwner"";
}
"
0x5abaff0b83f81dc061c590aadcba013c69237fd7.sol,CryptoJade,"contract CryptoJade is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CryptoJade() public { symbol = ; name = ; decimals = 18; _totalSupply = 125000000000000000000000000; balances[0x5E77C4cf41618A897759b3A2A32665C85BC2aF21] = _totalSupply; Transfer(address(0), 0x5E77C4cf41618A897759b3A2A32665C85BC2aF21, _totalSupply); }",1,"subgraph cluster_543_CryptoJade {
label=""CryptoJade"";
""543_fallback"" [label=""fallback""];
""543_CryptoJade"" [label=""CryptoJade""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x6dee0a976370ee9f0f8c4619ab3386441a42ceb3.sol,CoinifinexToken,"contract CoinifinexToken { uint256 constant public TOTAL_TOKEN = 10 ** 9; uint256 constant public TOKEN_FOR_ICO = 650 * 10 ** 6; uint256 constant public TOKEN_FOR_COMPANY = 200 * 10 ** 6; uint256 constant public TOKEN_FOR_BONUS = 50 * 10 ** 6; mapping (address => uint256) public tokenForTeam; mapping (address => uint256) public tokenForTeamGet; address[] public teamAddress; uint public startTime; string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function CoinifinexToken( ) public { totalSupply = TOTAL_TOKEN * 10 ** uint256(decimals); name = ; symbol = ; startTime = 1538265600; tokenForTeam[0x4B7786bD8eB1F738699290Bb83cA8E28fEDea4b0] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x040440286a443822211dDe0e7E9DA3F49aF2EBC7] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x4f7a5A2BafAd56562ac4Ccc85FE004BB84435F71] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x7E0D3AaaCB57b0Fd109D9F16e00a375ECa48b41D] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xc456aC342f17E7003A03479e275fDA322dE38681] = 500 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0xB19d3c4c494B5a3d5d72E0e47076AefC1c643D24] = 300 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0x88311485647e19510298d7Dbf0a346D5B808DF03] = 500 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F] = 500 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0x45cD08764e06c1563d4B13b85cCE7082Be0bA6D1] = 100 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0xB08924a0D0AF93Fa29e5B0ba103A339704cdeFdb] = 100 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0xa8bD7C22d37ea1887b425a9B0A3458A186bf6E77] = 1 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xe387125f1b24E59f7811d26fbb26bdA1c599b061] = 1 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xC5b644c5fDe01fce561496179a8Bb7886349bD75] = 1 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xe4dB43bcB8aecFf58C720F70414A9d36Fd7B9F78] = 5 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xf28edB52E808cd9DCe18A87fD94D373D6B9f65ae] = 5 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x87CE30ad0B66266b30c206a9e39A3FC0970db5eF] = 5 * 10 ** 6 * 10 ** uint256(decimals); teamAddress.push(0x4B7786bD8eB1F738699290Bb83cA8E28fEDea4b0); teamAddress.push(0x040440286a443822211dDe0e7E9DA3F49aF2EBC7); teamAddress.push(0x4f7a5A2BafAd56562ac4Ccc85FE004BB84435F71); teamAddress.push(0x7E0D3AaaCB57b0Fd109D9F16e00a375ECa48b41D); teamAddress.push(0xc456aC342f17E7003A03479e275fDA322dE38681); teamAddress.push(0xB19d3c4c494B5a3d5d72E0e47076AefC1c643D24); teamAddress.push(0x88311485647e19510298d7Dbf0a346D5B808DF03); teamAddress.push(0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F); teamAddress.push(0x45cD08764e06c1563d4B13b85cCE7082Be0bA6D1); teamAddress.push(0xB08924a0D0AF93Fa29e5B0ba103A339704cdeFdb); teamAddress.push(0xa8bD7C22d37ea1887b425a9B0A3458A186bf6E77); teamAddress.push(0xe387125f1b24E59f7811d26fbb26bdA1c599b061); teamAddress.push(0xC5b644c5fDe01fce561496179a8Bb7886349bD75); teamAddress.push(0xe4dB43bcB8aecFf58C720F70414A9d36Fd7B9F78); teamAddress.push(0xf28edB52E808cd9DCe18A87fD94D373D6B9f65ae); teamAddress.push(0x87CE30ad0B66266b30c206a9e39A3FC0970db5eF); uint arrayLength = teamAddress.length; for (uint i=0; i<arrayLength; i++) { tokenForTeamGet[teamAddress[i]] = tokenForTeam[teamAddress[i]] * 1 / 10; balanceOf[teamAddress[i]] = tokenForTeamGet[teamAddress[i]]; tokenForTeam[teamAddress[i]] -= tokenForTeamGet[teamAddress[i]]; }",1,"subgraph cluster_930_CoinifinexToken {
label=""CoinifinexToken"";
""930_burnFrom"" [label=""burnFrom""];
""930_transferFrom"" [label=""transferFrom""];
""930__transfer"" [label=""_transfer""];
""930_burn"" [label=""burn""];
""930_transfer"" [label=""transfer""];
""930_CoinifinexToken"" [label=""CoinifinexToken""];
""930_approveAndCall"" [label=""approveAndCall""];
""930_getTeamFund"" [label=""getTeamFund""];
""930_approve"" [label=""approve""];
""930_approveAndCall"" -> ""930_approve"";
""930_transfer"" -> ""930__transfer"";
""930_transferFrom"" -> ""930__transfer"";
}
"
0x7123027d76a5135e66b3a365efaba2b55de18a62.sol,CrypteloERC20,"contract CrypteloERC20 { string public name; string public symbol; uint256 public decimals; uint256 public totalSupply; uint256 public totalSupplyICO; uint256 public totalSupplyPrivateSale; uint256 public totalSupplyTeamTokens; uint256 public totalSupplyExpansionTokens; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Supply(uint256 supply); function CrypteloERC20() public { name = ; symbol = ; decimals = 8; totalSupply = 500000000; totalSupplyICO = 150000000; totalSupplyPrivateSale = 100000000; totalSupplyTeamTokens = 125000000; totalSupplyExpansionTokens = 125000000; address privateW = 0xb3d9c613a4B680A5Ffd28E08258dBd7BA77102A2; address ICOW = 0xF2b3Fc7196D5Ec9bD9111AF5B6D79c9FE26d729F; address companyW = 0xeC23f509E328100C08646389a3b6C45e9290AA42; address expansionW = 0xf799aa9cA15D6137eDAEb204016378112064ECa3; balanceOf[ICOW] = totalSupplyICO * ( 10 ** decimals); balanceOf[privateW] = totalSupplyPrivateSale * ( 10 ** decimals); balanceOf[companyW] = totalSupplyTeamTokens * ( 10 ** decimals); balanceOf[expansionW] = totalSupplyExpansionTokens * ( 10 ** decimals); Supply(totalSupplyICO * ( 10 ** decimals)); }",1,"subgraph cluster_442_CrypteloERC20 {
label=""CrypteloERC20"";
""442_burnFrom"" [label=""burnFrom""];
""442_transfer"" [label=""transfer""];
""442_approveAndCall"" [label=""approveAndCall""];
""442_burn"" [label=""burn""];
""442__transfer"" [label=""_transfer""];
""442_CrypteloERC20"" [label=""CrypteloERC20""];
""442_approve"" [label=""approve""];
""442_transferFrom"" [label=""transferFrom""];
""442_transfer"" -> ""442__transfer"";
""442_transferFrom"" -> ""442__transfer"";
""442_approveAndCall"" -> ""442_approve"";
}
"
0xd0d916322b02b7a8095af4bb69bea0e9d93cf3b1.sol,WTI_10_20210916,"contract WTI_10_20210916 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 14693280768000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_WTI_10_20210916 {
label=""WTI_10_20210916"";
""189_approve"" [label=""approve""];
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0xf079dd66fd50624d1ea26185ea3bf41ca4606187.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_balanceOf"" [label=""balanceOf""];
""256_approve"" [label=""approve""];
""256_transfer"" [label=""transfer""];
""256_transferFrom"" [label=""transferFrom""];
""256_allowance"" [label=""allowance""];
}
"
0x5862ae475da22367076b89a6f782ea6711eb2949.sol,ZToken,"contract ZToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function ZToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_621_ZToken {
label=""ZToken"";
""621_sell"" [label=""sell""];
""621_ZToken"" [label=""ZToken""];
""621_freezeAccount"" [label=""freezeAccount""];
""621_setPrices"" [label=""setPrices""];
""621__transfer"" [label=""_transfer""];
""621_mintToken"" [label=""mintToken""];
""621_buy"" [label=""buy""];
""621_ZToken"" -> ""621_TokenERC20"";
""621_mintToken"" -> ""621_onlyOwner"";
""621_buy"" -> ""621__transfer"";
""621_sell"" -> ""621__transfer"";
""621_freezeAccount"" -> ""621_onlyOwner"";
""621_setPrices"" -> ""621_onlyOwner"";
}
"
0x39e568276531f17da3c76d54400cfd8300201652.sol,CSC,"contract CSC { mapping (address => uint256) private balances; mapping (address => uint256[2]) private lockedBalances; string public name; uint8 public decimals; string public symbol; uint256 public totalSupply; address public owner; uint256 private icoLockUntil = 1543593540; event Transfer(address indexed _from, address indexed _to, uint256 _value); constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, address _owner, address[] _lockedAddress, uint256[] _lockedBalances, uint256[] _lockedTimes ) public { balances[_owner] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; owner = _owner; for(uint i = 0;i < _lockedAddress.length;i++){ lockedBalances[_lockedAddress[i]][0] = _lockedBalances[i]; lockedBalances[_lockedAddress[i]][1] = _lockedTimes[i]; }",1,"subgraph cluster_373_CSC {
label=""CSC"";
""373_balanceOf"" [label=""balanceOf""];
""373_withdraw"" [label=""withdraw""];
""373_burnFrom"" [label=""burnFrom""];
""373_setIcoLockUntil"" [label=""setIcoLockUntil""];
""373_transfer"" [label=""transfer""];
""373_withdrawTo"" [label=""withdrawTo""];
""373_constructor"" [label=""constructor""];
""373_makeCoin"" [label=""makeCoin""];
}
"
0x1e4e36b3f011d862fd70006804da8fcefe89d3d8.sol,VenusToken,"contract VenusToken { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 54053687735; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function VenusToken ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_309_VenusToken {
label=""VenusToken"";
""309_burn"" [label=""burn""];
""309_approve"" [label=""approve""];
""309_transfer"" [label=""transfer""];
""309__transfer"" [label=""_transfer""];
""309_transferFrom"" [label=""transferFrom""];
""309_VenusToken"" [label=""VenusToken""];
""309_approveAndCall"" [label=""approveAndCall""];
""309_transferFrom"" -> ""309__transfer"";
""309_approveAndCall"" -> ""309_approve"";
""309_transfer"" -> ""309__transfer"";
}
"
0x36cac7291719e907276d795c330dbc2fcf66df54.sol,DogCash,"contract DogCash is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor () public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000; balances[0x0C09EA03E90dEE7F0527b5a4Ce51f2F516F93eF3] = _totalSupply; emit Transfer(address(0), 0x0C09EA03E90dEE7F0527b5a4Ce51f2F516F93eF3, _totalSupply); }",1,"subgraph cluster_543_DogCash {
label=""DogCash"";
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_constructor"" [label=""constructor""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x52fe31c97e5c29ea63cbcfb045e1171427bb9248.sol,NewRich,"contract NewRich is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function NewRich() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x08652C395d8E23fe7e9f436e882DF7C418dB2f3a] = _totalSupply; Transfer(address(0), 0x08652C395d8E23fe7e9f436e882DF7C418dB2f3a, _totalSupply); }",1,"subgraph cluster_543_NewRich {
label=""NewRich"";
""543_NewRich"" [label=""NewRich""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x40d6ab35c171cddc7fc81187e8a20d6711717ef0.sol,ProofOfBible,contract ProofOfBible { modifier onlyBagholders { require(myTokens() > 0); _; },1,"subgraph cluster_1180_ProofOfBible {
label=""ProofOfBible"";
""1180_balanceOf"" [label=""balanceOf""];
""1180_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1180_purchaseTokens"" [label=""purchaseTokens""];
""1180_reinvest"" [label=""reinvest""];
""1180_myTokens"" [label=""myTokens""];
""1180_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1180_buyPrice"" [label=""buyPrice""];
""1180_withdraw"" [label=""withdraw""];
""1180_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1180_transfer"" [label=""transfer""];
""1180_sell"" [label=""sell""];
""1180_dividendsOf"" [label=""dividendsOf""];
""1180_sellPrice"" [label=""sellPrice""];
""1180_buy"" [label=""buy""];
""1180_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1180_exit"" [label=""exit""];
""1180_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1180_fallback"" [label=""fallback""];
""1180_myDividends"" [label=""myDividends""];
""1180_sqrt"" [label=""sqrt""];
""1180_totalSupply"" [label=""totalSupply""];
""1180_exit"" -> ""1180_withdraw"";
""1180_transfer"" -> ""1180_onlyBagholders"";
""1180_calculateTokensReceived"" -> ""1180_ethereumToTokens_"";
""1180_reinvest"" -> ""1180_purchaseTokens"";
""1180_sell"" -> ""1180_onlyBagholders"";
""1180_myDividends"" -> ""1180_dividendsOf"";
""1180_transfer"" -> ""1180_myDividends"";
""1180_ethereumToTokens_"" -> ""1180_sqrt"";
""1180_purchaseTokens"" -> ""1180_ethereumToTokens_"";
""1180_transfer"" -> ""1180_tokensToEthereum_"";
""1180_withdraw"" -> ""1180_onlyStronghands"";
""1180_buyPrice"" -> ""1180_tokensToEthereum_"";
""1180_myTokens"" -> ""1180_balanceOf"";
""1180_sellPrice"" -> ""1180_tokensToEthereum_"";
""1180_calculateEthereumReceived"" -> ""1180_tokensToEthereum_"";
""1180_fallback"" -> ""1180_purchaseTokens"";
""1180_withdraw"" -> ""1180_myDividends"";
""1180_reinvest"" -> ""1180_onlyStronghands"";
""1180_sell"" -> ""1180_tokensToEthereum_"";
""1180_transfer"" -> ""1180_withdraw"";
""1180_buy"" -> ""1180_purchaseTokens"";
""1180_reinvest"" -> ""1180_myDividends"";
""1180_exit"" -> ""1180_sell"";
""1180_purchaseTokens"" -> ""1180_buyPrice"";
""1180_sell"" -> ""1180_buyPrice"";
}
"
0x02c60d28be3338014fef3fdf50a3218b946c0609.sol,EasyInvest3,contract EasyInvest3 { mapping (address => uint256) public invested; mapping (address => uint256) public atBlock; function () external payable { if (invested[msg.sender] != 0) { uint256 amount = invested[msg.sender] * 3 / 100 * (block.number - atBlock[msg.sender]) / 5900; msg.sender.transfer(amount); },1,"subgraph cluster_68_EasyInvest3 {
label=""EasyInvest3"";
""68_fallback"" [label=""fallback""];
}
"
0x00416b9d728069edb0ceb04bc2b203fa7336d1f1.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_processTransaction"" [label=""processTransaction""];
""928_pullBalance"" [label=""pullBalance""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_refundTransaction"";
""928_fallback"" -> ""928_processTransaction"";
}
"
0x33bd43ba9c71968c132f61246a79c18f9bdf0267.sol,BouncyCoinSelfdrop,"contract BouncyCoinSelfdrop { event TokensSold(address buyer, uint256 tokensAmount, uint256 ethAmount); uint256 public constant MAX_TOKENS_SOLD = 14000000000 * 10**18; uint256 public constant PRICE = 0.00000006665 * 10**18; uint256 public constant MIN_CONTRIBUTION = 0.01 ether; uint256 public constant HARD_CAP = 500 ether; uint256 oct_17 = 1539734400; uint256 oct_24 = 1540339200; uint256 oct_28 = 1540684800; uint256 public first_round_base_multiplier = 40; uint256 public second_round_base_multiplier = 20; uint256 public third_round_base_multiplier = 0; address public owner; address public wallet; uint256 public tokensSold; uint256 public totalReceived; ERC20 public bouncyCoinToken; Stages public stage; enum Stages { Deployed, Started, Ended }",1,"subgraph cluster_488_BouncyCoinSelfdrop {
label=""BouncyCoinSelfdrop"";
""488_stop"" [label=""stop""];
""488_constructor"" [label=""constructor""];
""488_transferERC20Token"" [label=""transferERC20Token""];
""488_fallback"" [label=""fallback""];
""488_finalize"" [label=""finalize""];
""488_buyTokens"" [label=""buyTokens""];
""488_withdraw"" [label=""withdraw""];
""488_start"" [label=""start""];
""488_stop"" -> ""488_isOwner"";
""488_buyTokens"" -> ""488_finalize"";
""488_fallback"" -> ""488_buyTokens"";
""488_start"" -> ""488_isOwner"";
""488_stop"" -> ""488_finalize"";
""488_withdraw"" -> ""488_isOwner"";
""488_transferERC20Token"" -> ""488_isOwner"";
""488_buyTokens"" -> ""488_atStage"";
}
"
0x44b1cdc06c3afa610e125a3cbcc9b8cce7c366dc.sol,VOCC_I060_20181211,"contract VOCC_I060_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I060_20181211 {
label=""VOCC_I060_20181211"";
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
}
"
0x3fde21c4118a7ac77e113920f76f68edd4fc144d.sol,BEBmining,contract BEBmining is Ownable{ tokenTransfer public bebTokenTransfer; uint8 decimals = 18; struct BebUser { address customerAddr; uint256 amount; uint256 bebtime; uint256 interest; },1,"subgraph cluster_876_BEBmining {
label=""BEBmining"";
""876_TotalRevenue"" [label=""TotalRevenue""];
""876_fallback"" [label=""fallback""];
""876_querYrevenue"" [label=""querYrevenue""];
""876_BebTomining"" [label=""BebTomining""];
""876_sellBeb"" [label=""sellBeb""];
""876_freeSettlement"" [label=""freeSettlement""];
""876_queryRate"" [label=""queryRate""];
""876_withdrawAmount"" [label=""withdrawAmount""];
""876_setioc"" [label=""setioc""];
""876_buyBeb"" [label=""buyBeb""];
""876_ETHwithdrawal"" [label=""ETHwithdrawal""];
""876_BEBmining"" [label=""BEBmining""];
""876_getTokenBalance"" [label=""getTokenBalance""];
""876_ModifyexchangeRate"" [label=""ModifyexchangeRate""];
""876_querBalance"" [label=""querBalance""];
""876_setioc"" -> ""876_onlyOwner"";
""876_ModifyexchangeRate"" -> ""876_onlyOwner"";
""876_withdrawAmount"" -> ""876_getTokenBalance"";
""876_ETHwithdrawal"" -> ""876_onlyOwner"";
""876_buyBeb"" -> ""876_getTokenBalance"";
""876_withdrawAmount"" -> ""876_onlyOwner"";
}
"
0xf2a95300326adf582a43b63218742e4528f82b01.sol,MultiSend,contract MultiSend { TokenERC20 public _ERC20Contract; address public _multiSendOwner; function MultiSend () { address c = 0xc3761eb917cd790b30dad99f6cc5b4ff93c4f9ea; _ERC20Contract = TokenERC20(c); _multiSendOwner = msg.sender; },1,"subgraph cluster_82_MultiSend {
label=""MultiSend"";
""82_MultiSend"" [label=""MultiSend""];
""82_dropCoins"" [label=""dropCoins""];
}
"
0x26fa4ab937bf885d06cfb3eabb89eeef9af1978a.sol,digithothToken,"contract digithothToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply = 500000000; uint public startDate; uint public bonusEnds; uint public presaleEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function digithothToken() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 2 weeks; presaleEnds = now + 6 weeks; endDate = now + 10 weeks; }",1,"subgraph cluster_630_digithothToken {
label=""digithothToken"";
""630_approveAndCall"" [label=""approveAndCall""];
""630_fallback"" [label=""fallback""];
""630_totalSupply"" [label=""totalSupply""];
""630_allowance"" [label=""allowance""];
""630_approve"" [label=""approve""];
""630_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""630_digithothToken"" [label=""digithothToken""];
""630_transfer"" [label=""transfer""];
""630_balanceOf"" [label=""balanceOf""];
""630_transferFrom"" [label=""transferFrom""];
""630_transfer"" -> ""630_safeAdd"";
""630_fallback"" -> ""630_safeAdd"";
""630_transferFrom"" -> ""630_safeSub"";
""630_transferAnyERC20Token"" -> ""630_onlyOwner"";
""630_transfer"" -> ""630_safeSub"";
""630_transferFrom"" -> ""630_safeAdd"";
}
"
0xaa6bf83784570ce6e114aec683b6b23ca30cf763.sol,BasicToken,contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_ - balances[address(0)]; },1,"subgraph cluster_213_BasicToken {
label=""BasicToken"";
""213_balanceOf"" [label=""balanceOf""];
""213_totalSupply"" [label=""totalSupply""];
""213_transfer"" [label=""transfer""];
}
"
0x57db9d1890eb580a5ba18926a7c76f7abaa1831d.sol,BdpOwnershipStorage,contract BdpOwnershipStorage is BdpBase { using SafeMath for uint256; mapping (uint256 => address) public tokenOwner; mapping (uint256 => address) public tokenApprovals; mapping (address => uint256) public ownedArea; mapping (address => uint256[]) public ownedTokens; mapping(uint256 => uint256) public ownedTokensIndex; uint256[] public tokenIds; mapping (uint256 => uint256) public tokenIdsIndex; function getTokenOwner(uint256 _tokenId) view public returns (address) { return tokenOwner[_tokenId]; },1,"subgraph cluster_1736_BdpOwnershipStorage {
label=""BdpOwnershipStorage"";
""1736_pushTokenId"" [label=""pushTokenId""];
""1736_setOwnedTokensIndex"" [label=""setOwnedTokensIndex""];
""1736_setTokenApproval"" [label=""setTokenApproval""];
""1736_decrementOwnedTokensLength"" [label=""decrementOwnedTokensLength""];
""1736_getTokenIdsIndex"" [label=""getTokenIdsIndex""];
""1736_getOwnedTokensLength"" [label=""getOwnedTokensLength""];
""1736_getTokenIdsLength"" [label=""getTokenIdsLength""];
""1736_getOwnedArea"" [label=""getOwnedArea""];
""1736_setTokenIdsIndex"" [label=""setTokenIdsIndex""];
""1736_getOwnedTokensIndex"" [label=""getOwnedTokensIndex""];
""1736_BdpOwnershipStorage"" [label=""BdpOwnershipStorage""];
""1736_pushOwnedToken"" [label=""pushOwnedToken""];
""1736_decrementTokenIdsLength"" [label=""decrementTokenIdsLength""];
""1736_getTokenApproval"" [label=""getTokenApproval""];
""1736_setTokenOwner"" [label=""setTokenOwner""];
""1736_setOwnedArea"" [label=""setOwnedArea""];
""1736_getTokenIdByIndex"" [label=""getTokenIdByIndex""];
""1736_getTokenOwner"" [label=""getTokenOwner""];
""1736_decrementOwnedArea"" [label=""decrementOwnedArea""];
""1736_setOwnedToken"" [label=""setOwnedToken""];
""1736_getOwnedToken"" [label=""getOwnedToken""];
""1736_setTokenIdByIndex"" [label=""setTokenIdByIndex""];
""1736_incrementOwnedArea"" [label=""incrementOwnedArea""];
""1736_pushTokenId"" -> ""1736_storageAccessControl"";
""1736_setOwnedTokensIndex"" -> ""1736_storageAccessControl"";
""1736_setOwnedToken"" -> ""1736_storageAccessControl"";
""1736_pushOwnedToken"" -> ""1736_storageAccessControl"";
""1736_setTokenIdByIndex"" -> ""1736_storageAccessControl"";
""1736_decrementTokenIdsLength"" -> ""1736_storageAccessControl"";
""1736_setOwnedArea"" -> ""1736_storageAccessControl"";
""1736_incrementOwnedArea"" -> ""1736_storageAccessControl"";
""1736_setTokenApproval"" -> ""1736_storageAccessControl"";
""1736_decrementOwnedTokensLength"" -> ""1736_storageAccessControl"";
""1736_setTokenIdsIndex"" -> ""1736_storageAccessControl"";
""1736_setTokenOwner"" -> ""1736_storageAccessControl"";
""1736_decrementOwnedArea"" -> ""1736_storageAccessControl"";
}
"
0x17fd666fa0784885fa1afec8ac624d9b7e72b752.sol,FLiK,"contract FLiK is owned { string public standard = ; string public name; string public symbol; uint8 public decimals = 14; uint256 public totalSupply; bool public locked; uint256 public icoSince; uint256 public icoTill; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event IcoFinished(); uint256 public buyPrice = 1; function FLiK( uint256 initialSupply, string tokenName, string tokenSymbol, uint256 _icoSince, uint256 _icoTill ) { totalSupply = initialSupply; balanceOf[this] = totalSupply / 100 * 90; name = tokenName; symbol = tokenSymbol; balanceOf[msg.sender] = totalSupply / 100 * 10; Transfer(this, msg.sender, balanceOf[msg.sender]); if(_icoSince == 0 && _icoTill == 0) { icoSince = 1503187200; icoTill = 1505865600; }",1,"subgraph cluster_536_FLiK {
label=""FLiK"";
""536_fallback"" [label=""fallback""];
""536_icoFinished"" [label=""icoFinished""];
""536_transfer"" [label=""transfer""];
""536_setLocked"" [label=""setLocked""];
""536_FLiK"" [label=""FLiK""];
""536_internalIcoFinished"" [label=""internalIcoFinished""];
""536_approveAndCall"" [label=""approveAndCall""];
""536_buy"" [label=""buy""];
""536_transferEthers"" [label=""transferEthers""];
""536_setBuyPrice"" [label=""setBuyPrice""];
""536_transferFrom"" [label=""transferFrom""];
""536_approve"" [label=""approve""];
""536_icoFinished"" -> ""536_internalIcoFinished"";
""536_icoFinished"" -> ""536_onlyOwner"";
""536_setLocked"" -> ""536_onlyOwner"";
""536_setBuyPrice"" -> ""536_onlyOwner"";
""536_transferEthers"" -> ""536_onlyOwner"";
""536_fallback"" -> ""536_buy"";
""536_approveAndCall"" -> ""536_approve"";
}
"
0x53caa71f4a8a2617592fd55f0001a0948a16ec67.sol,TOAB,"contract TOAB { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 10000000000000000000000000000; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); function TOAB() public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_243_TOAB {
label=""TOAB"";
""243_transfer"" [label=""transfer""];
""243_approve"" [label=""approve""];
""243_approveAndCall"" [label=""approveAndCall""];
""243_transferFrom"" [label=""transferFrom""];
""243_TOAB"" [label=""TOAB""];
""243__transfer"" [label=""_transfer""];
""243_transfer"" -> ""243__transfer"";
""243_transferFrom"" -> ""243__transfer"";
""243_approveAndCall"" -> ""243_approve"";
}
"
0xbc4976ceaeae6c019f826a1e89a6d9cb1a2970bc.sol,ERC20,"contract ERC20 is ERC20Template { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function ERC20(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_65_ERC20Template {
label=""ERC20Template"";
""65_allowance"" [label=""allowance""];
""65_transferFrom"" [label=""transferFrom""];
""65_balanceOf"" [label=""balanceOf""];
""65_approve"" [label=""approve""];
""65_transfer"" [label=""transfer""];
}
"
0x37eba68380f5a549532f658244f82619ac733c03.sol,VOCC_I042_20181211,"contract VOCC_I042_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I042_20181211 {
label=""VOCC_I042_20181211"";
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0xf47cd932ee150f60cd611c3cfdba51bd33b27ad1.sol,BurnToken,"contract BurnToken is BaseToken { event Burn(address indexed from, uint256 value); function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); balanceOf[msg.sender] -= _value; totalSupply -= _value; Burn(msg.sender, _value); return true; }",1,"subgraph cluster_299_BurnToken {
label=""BurnToken"";
""299_burnFrom"" [label=""burnFrom""];
""299_burn"" [label=""burn""];
}
"
0x5adf3e3ba4a8f3f4cf80f9c3bd0eea7cc562877e.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_transfer"" [label=""transfer""];
""256_balanceOf"" [label=""balanceOf""];
""256_transferFrom"" [label=""transferFrom""];
""256_allowance"" [label=""allowance""];
""256_approve"" [label=""approve""];
}
"
0x52553a82adbc45eda6af687f9b5246fc51863b50.sol,GlobalCashChain,"contract GlobalCashChain { string public name; string public symbol; uint8 public decimals = 2; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_GlobalCashChain {
label=""GlobalCashChain"";
""380_constructor"" [label=""constructor""];
""380_transfer"" [label=""transfer""];
""380_burn"" [label=""burn""];
""380__transfer"" [label=""_transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_burnFrom"" [label=""burnFrom""];
""380_approve"" [label=""approve""];
""380_transferFrom"" -> ""380__transfer"";
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
}
"
0x6d2e76213615925c5fc436565b5ee788ee0e86dc.sol,AccessControl,contract AccessControl { address public creatorAddress; uint16 public totalSeraphims = 0; mapping (address => bool) public seraphims; bool public isMaintenanceMode = true; modifier onlyCREATOR() { require(msg.sender == creatorAddress); _; },1,"subgraph cluster_118_AccessControl {
label=""AccessControl"";
""118_removeSERAPHIM"" [label=""removeSERAPHIM""];
""118_addSERAPHIM"" [label=""addSERAPHIM""];
""118_updateMaintenanceMode"" [label=""updateMaintenanceMode""];
""118_AccessControl"" [label=""AccessControl""];
""118_removeSERAPHIM"" -> ""118_onlyCREATOR"";
""118_addSERAPHIM"" -> ""118_onlyCREATOR"";
""118_updateMaintenanceMode"" -> ""118_onlyCREATOR"";
}
"
0xed19698c0abde8635413ae7ad7224df6ee30bf22.sol,ImmortalToken,"contract ImmortalToken is Owned, SafeMath, TokenERC20 { mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint8 public constant decimals = 0; uint8 public constant totalSupply = 100; string public constant name = ; string public constant symbol = ; string public constant version = ; function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] < _value) return false; balances[msg.sender] = safeSub(balances[msg.sender], _value); assert(balances[msg.sender] >= 0); balances[_to] = safeAdd(balances[_to], _value); assert(balances[_to] <= totalSupply); Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_456_ImmortalToken {
label=""ImmortalToken"";
""456_approve"" [label=""approve""];
""456_balanceOf"" [label=""balanceOf""];
""456_transferFrom"" [label=""transferFrom""];
""456_allowance"" [label=""allowance""];
""456_approveAndCall"" [label=""approveAndCall""];
""456_transfer"" [label=""transfer""];
""456_transferFrom"" -> ""456_safeSub"";
""456_transferFrom"" -> ""456_safeAdd"";
""456_transfer"" -> ""456_safeSub"";
""456_transfer"" -> ""456_safeAdd"";
""456_approveAndCall"" -> ""456_approve"";
}
"
0x8564e222115248d10593cf4a6719fa6d82194e62.sol,ITube,"contract ITube is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ITube() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 5 weeks; endDate = now + 15 weeks; }",1,"subgraph cluster_609_ITube {
label=""ITube"";
""609_approve"" [label=""approve""];
""609_fallback"" [label=""fallback""];
""609_ITube"" [label=""ITube""];
""609_transfer"" [label=""transfer""];
""609_allowance"" [label=""allowance""];
""609_totalSupply"" [label=""totalSupply""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_balanceOf"" [label=""balanceOf""];
""609_transferFrom"" [label=""transferFrom""];
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
""609_transferFrom"" -> ""609_safeSub"";
""609_transfer"" -> ""609_safeSub"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_fallback"" -> ""609_safeAdd"";
""609_transfer"" -> ""609_safeAdd"";
}
"
0xdb18bf96d5b00fe57dbfcd42b48e280624670f90.sol,WillTestament,"contract WillTestament is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function WillTestament() public { symbol = ; name = ; decimals = 18; _totalSupply = 7795482309000000000000000000; balances[0x9Ffc7727A6895d6beEc409249486a422a1648416] = _totalSupply; Transfer(address(0), 0x9Ffc7727A6895d6beEc409249486a422a1648416, _totalSupply); }",1,"subgraph cluster_543_WillTestament {
label=""WillTestament"";
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_WillTestament"" [label=""WillTestament""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
}
"
0xd29decbfd29766d8aba8215587f915162c5bd8d8.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_419_TokenERC20 {
label=""TokenERC20"";
""419_burnFrom"" [label=""burnFrom""];
""419__transfer"" [label=""_transfer""];
""419_transferFrom"" [label=""transferFrom""];
""419_approve"" [label=""approve""];
""419_transfer"" [label=""transfer""];
""419_burn"" [label=""burn""];
""419_constructor"" [label=""constructor""];
""419_approveAndCall"" [label=""approveAndCall""];
""419_transfer"" -> ""419__transfer"";
""419_transferFrom"" -> ""419__transfer"";
""419_approveAndCall"" -> ""419_approve"";
}
"
0x3482665b52c01076ef4939a0089a9b62222fe824.sol,BtcSweetCoin,"contract BtcSweetCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000; balances[0xf1071b75AB3688bc9Be87D66892c2383d40a3EBd] = _totalSupply; emit Transfer(address(0), 0xf1071b75AB3688bc9Be87D66892c2383d40a3EBd, _totalSupply); }",1,"subgraph cluster_543_BtcSweetCoin {
label=""BtcSweetCoin"";
""543_constructor"" [label=""constructor""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xe1291032766b81488dc565479503a103489f78d7.sol,x32323,"contract x32323 is owned{ mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => bool) initialized; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); function freezeAccount(address target, bool freeze) onlyOwner { frozenAccount[target] = freeze; FrozenFunds(target, freeze); }",1,"subgraph cluster_638_x32323 {
label=""x32323"";
""638_approve"" [label=""approve""];
""638_sell"" [label=""sell""];
""638_approveAndCall"" [label=""approveAndCall""];
""638_initialize"" [label=""initialize""];
""638_TokenERC20"" [label=""TokenERC20""];
""638__transfer"" [label=""_transfer""];
""638_buy"" [label=""buy""];
""638_freezeAccount"" [label=""freezeAccount""];
""638_transferFrom"" [label=""transferFrom""];
""638_reward"" [label=""reward""];
""638_transfer"" [label=""transfer""];
""638_setMinBalance"" [label=""setMinBalance""];
""638_setPrices"" [label=""setPrices""];
""638_setMinBalance"" -> ""638_onlyOwner"";
""638_approveAndCall"" -> ""638_approve"";
""638_transfer"" -> ""638__transfer"";
""638_transfer"" -> ""638_sell"";
""638__transfer"" -> ""638_reward"";
""638_setPrices"" -> ""638_onlyOwner"";
""638_transferFrom"" -> ""638__transfer"";
""638_freezeAccount"" -> ""638_onlyOwner"";
""638__transfer"" -> ""638_initialize"";
}
"
0x512b4e460fc59123e334c9c74344c4e94dc6389d.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_transferFrom"" [label=""transferFrom""];
""256_approve"" [label=""approve""];
""256_transfer"" [label=""transfer""];
""256_balanceOf"" [label=""balanceOf""];
""256_allowance"" [label=""allowance""];
}
"
0x34570cf88db31d4c518dee6057ff78e895dd80f1.sol,IDRT,"contract IDRT is owned, IDRTokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function IDRT( uint256 initialSupply, string tokenName, string tokenSymbol ) IDRTokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_635_IDRT {
label=""IDRT"";
""635_buy"" [label=""buy""];
""635__transfer"" [label=""_transfer""];
""635_IDRT"" [label=""IDRT""];
""635_freezeAccount"" [label=""freezeAccount""];
""635_setPrices"" [label=""setPrices""];
""635_sell"" [label=""sell""];
""635_mintToken"" [label=""mintToken""];
""635_sell"" -> ""635__transfer"";
""635_freezeAccount"" -> ""635_onlyOwner"";
""635_setPrices"" -> ""635_onlyOwner"";
""635_buy"" -> ""635__transfer"";
""635_mintToken"" -> ""635_onlyOwner"";
""635_IDRT"" -> ""635_IDRTokenERC20"";
}
"
0x4cee97ddd88f0bec86dd4b4163ca499a9790c3df.sol,Raven,"contract Raven is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Raven() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 1 weeks; endDate = now + 7 weeks; }",1,"subgraph cluster_609_Raven {
label=""Raven"";
""609_approve"" [label=""approve""];
""609_transfer"" [label=""transfer""];
""609_balanceOf"" [label=""balanceOf""];
""609_Raven"" [label=""Raven""];
""609_fallback"" [label=""fallback""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_allowance"" [label=""allowance""];
""609_transferFrom"" [label=""transferFrom""];
""609_totalSupply"" [label=""totalSupply""];
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_transferFrom"" -> ""609_safeSub"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_transfer"" -> ""609_safeAdd"";
""609_transfer"" -> ""609_safeSub"";
""609_fallback"" -> ""609_safeAdd"";
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
}
"
0x482f35aba9fb3dc1c4942dacb29b9a22cb648482.sol,NAST,"contract NAST { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function NAST() public { totalSupply = 34550000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_NAST {
label=""NAST"";
""355_NAST"" [label=""NAST""];
""355_burn"" [label=""burn""];
""355_transferFrom"" [label=""transferFrom""];
""355_burnFrom"" [label=""burnFrom""];
""355_transfer"" [label=""transfer""];
""355_approve"" [label=""approve""];
""355_approveAndCall"" [label=""approveAndCall""];
""355__transfer"" [label=""_transfer""];
""355_transferFrom"" -> ""355__transfer"";
""355_transfer"" -> ""355__transfer"";
""355_approveAndCall"" -> ""355_approve"";
}
"
0x0f2a1a06024f6d2ceb2adf937732f9029ca97045.sol,Capital,contract Capital { uint constant public CASH_BACK_PERCENT = 3; uint constant public PROJECT_FEE_PERCENT = 20; uint constant public PER_BLOCK = 48; uint constant public MINIMUM_INVEST = 10000000000000000 wei; uint public wave; address public owner; address public admin; address[] public addresses; bool public pause; mapping(address => Investor) public investors; TheStrongest public boss; modifier onlyOwner { require(owner == msg.sender); _; },1,"subgraph cluster_497_Capital {
label=""Capital"";
""497_Restart"" [label=""Restart""];
""497_payout"" [label=""payout""];
""497_transferOwnership"" [label=""transferOwnership""];
""497_getInvestorCount"" [label=""getInvestorCount""];
""497_getInvestorDividendsAmount"" [label=""getInvestorDividendsAmount""];
""497_fallback"" [label=""fallback""];
""497_bytesToAddress"" [label=""bytesToAddress""];
""497_constructor"" [label=""constructor""];
""497_payout"" -> ""497_Restart"";
""497_fallback"" -> ""497_getInvestorDividendsAmount"";
""497_fallback"" -> ""497_bytesToAddress"";
""497_payout"" -> ""497_getInvestorDividendsAmount"";
""497_transferOwnership"" -> ""497_onlyOwner"";
}
"
0x0180ec945191fda23c52b1d05eec64a2e3f68781.sol,BnsPresale,"contract BnsPresale { string public constant VERSION = ; uint public constant PRESALE_START = 4465500; uint public constant PRESALE_END = 4466550; uint public constant WITHDRAWAL_END = 4469000; address public constant OWNER = 0xcEAfe38b8d3802789A2A2cc45EA5d08bE8EA3b49; uint public constant MIN_TOTAL_AMOUNT_TO_RECEIVE_ETH = 0; uint public constant MAX_TOTAL_AMOUNT_TO_RECEIVE_ETH = 1; uint public constant MIN_ACCEPTED_AMOUNT_FINNEY = 1; string[5] private stateNames = [, , , , ]; enum State { BEFORE_START, PRESALE_RUNNING, WITHDRAWAL_RUNNING, REFUND_RUNNING, CLOSED }",1,"subgraph cluster_489_BnsPresale {
label=""BnsPresale"";
""489_withdrawFunds"" [label=""withdrawFunds""];
""489_sendRefund"" [label=""sendRefund""];
""489_currentState"" [label=""currentState""];
""489_receiveFunds"" [label=""receiveFunds""];
""489_stop"" [label=""stop""];
""489_refund"" [label=""refund""];
""489_BnsPresale"" [label=""BnsPresale""];
""489_state"" [label=""state""];
""489_fallback"" [label=""fallback""];
""489_min"" [label=""min""];
""489_abort"" [label=""abort""];
""489_sendRefund"" -> ""489_tokenHoldersOnly"";
""489_refund"" -> ""489_noReentrancy"";
""489_stop"" -> ""489_onlyOwner"";
""489_state"" -> ""489_currentState"";
""489_fallback"" -> ""489_sendRefund"";
""489_refund"" -> ""489_sendRefund"";
""489_withdrawFunds"" -> ""489_onlyOwner"";
""489_abort"" -> ""489_onlyOwner"";
""489_withdrawFunds"" -> ""489_noReentrancy"";
""489_BnsPresale"" -> ""489_validSetupOnly"";
""489_fallback"" -> ""489_currentState"";
""489_sendRefund"" -> ""489_min"";
""489_fallback"" -> ""489_receiveFunds"";
""489_refund"" -> ""489_inState"";
""489_receiveFunds"" -> ""489_notTooSmallAmountOnly"";
""489_stop"" -> ""489_inState"";
""489_fallback"" -> ""489_noReentrancy"";
""489_abort"" -> ""489_inStateBefore"";
}
"
0x7897ed74a2448c6d539b64c8b3c9b42fc19abc1f.sol,Hourglass,contract Hourglass { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1311_Hourglass {
label=""Hourglass"";
""1311_setAdministrator"" [label=""setAdministrator""];
""1311_fallback"" [label=""fallback""];
""1311_sellPrice"" [label=""sellPrice""];
""1311_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1311_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1311_disableInitialStage"" [label=""disableInitialStage""];
""1311_exit"" [label=""exit""];
""1311_setName"" [label=""setName""];
""1311_buy"" [label=""buy""];
""1311_Hourglass"" [label=""Hourglass""];
""1311_transfer"" [label=""transfer""];
""1311_sqrt"" [label=""sqrt""];
""1311_myDividends"" [label=""myDividends""];
""1311_balanceOf"" [label=""balanceOf""];
""1311_totalSupply"" [label=""totalSupply""];
""1311_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1311_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1311_setSymbol"" [label=""setSymbol""];
""1311_buyPrice"" [label=""buyPrice""];
""1311_setStakingRequirement"" [label=""setStakingRequirement""];
""1311_sell"" [label=""sell""];
""1311_myTokens"" [label=""myTokens""];
""1311_purchaseTokens"" [label=""purchaseTokens""];
""1311_withdraw"" [label=""withdraw""];
""1311_reinvest"" [label=""reinvest""];
""1311_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1311_dividendsOf"" [label=""dividendsOf""];
""1311_reinvest"" -> ""1311_purchaseTokens"";
""1311_calculateTokensReceived"" -> ""1311_ethereumToTokens_"";
""1311_withdraw"" -> ""1311_onlyStronghands"";
""1311_sellPrice"" -> ""1311_tokensToEthereum_"";
""1311_transfer"" -> ""1311_onlyBagholders"";
""1311_sell"" -> ""1311_tokensToEthereum_"";
""1311_myDividends"" -> ""1311_dividendsOf"";
""1311_reinvest"" -> ""1311_myDividends"";
""1311_purchaseTokens"" -> ""1311_ethereumToTokens_"";
""1311_transfer"" -> ""1311_myDividends"";
""1311_reinvest"" -> ""1311_onlyStronghands"";
""1311_purchaseTokens"" -> ""1311_antiEarlyWhale"";
""1311_exit"" -> ""1311_withdraw"";
""1311_setAdministrator"" -> ""1311_onlyAdministrator"";
""1311_setName"" -> ""1311_onlyAdministrator"";
""1311_withdraw"" -> ""1311_myDividends"";
""1311_transfer"" -> ""1311_tokensToEthereum_"";
""1311_fallback"" -> ""1311_purchaseTokens"";
""1311_setSymbol"" -> ""1311_onlyAdministrator"";
""1311_calculateEthereumReceived"" -> ""1311_tokensToEthereum_"";
""1311_ethereumToTokens_"" -> ""1311_sqrt"";
""1311_disableInitialStage"" -> ""1311_onlyAdministrator"";
""1311_sell"" -> ""1311_onlyBagholders"";
""1311_transfer"" -> ""1311_withdraw"";
""1311_myTokens"" -> ""1311_balanceOf"";
""1311_setStakingRequirement"" -> ""1311_onlyAdministrator"";
""1311_buyPrice"" -> ""1311_tokensToEthereum_"";
""1311_exit"" -> ""1311_sell"";
""1311_buy"" -> ""1311_purchaseTokens"";
}
"
0x880016750db7d4b040a0d9b15aad966fa47cfea4.sol,CCD_KOHLE_7_20190411,"contract CCD_KOHLE_7_20190411 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_CCD_KOHLE_7_20190411 {
label=""CCD_KOHLE_7_20190411"";
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
}
"
0x74028170d74751878228cda221fd0ac42a830921.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 580000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_freezeAccount"" [label=""freezeAccount""];
""612_mintToken"" [label=""mintToken""];
""612_fallback"" [label=""fallback""];
""612_setPrices"" [label=""setPrices""];
""612__transfer"" [label=""_transfer""];
""612_buy"" [label=""buy""];
""612_selfdestructs"" [label=""selfdestructs""];
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
""612_buy"" -> ""612__transfer"";
""612_selfdestructs"" -> ""612_onlyOwner"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_fallback"" -> ""612__transfer"";
""612_mintToken"" -> ""612_onlyOwner"";
}
"
0x29946bc47b8e8a64562816bd6c62e9aa023dfb92.sol,GHANIANCIDIDIGITALTETHER,"contract GHANIANCIDIDIGITALTETHER { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor( ) public { totalSupply = 2000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_GHANIANCIDIDIGITALTETHER {
label=""GHANIANCIDIDIGITALTETHER"";
""355__transfer"" [label=""_transfer""];
""355_burn"" [label=""burn""];
""355_burnFrom"" [label=""burnFrom""];
""355_approveAndCall"" [label=""approveAndCall""];
""355_transferFrom"" [label=""transferFrom""];
""355_approve"" [label=""approve""];
""355_constructor"" [label=""constructor""];
""355_transfer"" [label=""transfer""];
""355_approveAndCall"" -> ""355_approve"";
""355_transferFrom"" -> ""355__transfer"";
""355_transfer"" -> ""355__transfer"";
}
"
0x887e1988f7d697df22aea1207a5e1831ad3065ef.sol,TokenLayer,"contract TokenLayer is ERC721, Manageable { using SafeMath for uint256; event TokenCreated(uint256 tokenId, bytes32 name, uint256 parentId, address owner); event TokenDeleted(uint256 tokenId); event TokenSold( uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, bytes32 name, uint256 parentId ); event PriceChanged(uint256 tokenId, uint256 oldPrice, uint256 newPrice); event ParentChanged(uint256 tokenId, uint256 oldParentId, uint256 newParentId); event NameChanged(uint256 tokenId, bytes32 oldName, bytes32 newName); event MetaDataChanged(uint256 tokenId, bytes32 oldMeta, bytes32 newMeta); uint256 private constant DEFAULTPARENT = 123456789; mapping (uint256 => Token) private tokenIndexToToken; mapping (address => uint256) private ownershipTokenCount; address public gameAddress; address public parentAddr; uint256 private totalTokens; uint256 public devFee = 50; uint256 public ownerFee = 200; uint256[10] private chainFees = [10]; struct Token { bool exists; address approved; address owner; bytes32 metadata; bytes32 name; uint256 lastBlock; uint256 parentId; uint256 price; }",1,"subgraph cluster_2131_TokenLayer {
label=""TokenLayer"";
""2131_getPriceOf"" [label=""getPriceOf""];
""2131_name"" [label=""name""];
""2131_setChainFees"" [label=""setChainFees""];
""2131__transferFrom"" [label=""_transferFrom""];
""2131_ownerOf"" [label=""ownerOf""];
""2131_symbol"" [label=""symbol""];
""2131_getChainFees"" [label=""getChainFees""];
""2131_createToken"" [label=""createToken""];
""2131__transfer"" [label=""_transfer""];
""2131_setDevFee"" [label=""setDevFee""];
""2131_setOwnerFee"" [label=""setOwnerFee""];
""2131_takeOwnership"" [label=""takeOwnership""];
""2131__approved"" [label=""_approved""];
""2131_bundleToken"" [label=""bundleToken""];
""2131_getMetadataOf"" [label=""getMetadataOf""];
""2131_setLayerParent"" [label=""setLayerParent""];
""2131_implementsERC721"" [label=""implementsERC721""];
""2131_parentAddr"" [label=""parentAddr""];
""2131_approve"" [label=""approve""];
""2131_balanceOf"" [label=""balanceOf""];
""2131__owns"" [label=""_owns""];
""2131_setParent"" [label=""setParent""];
""2131_transferFrom"" [label=""transferFrom""];
""2131_blocked"" [label=""blocked""];
""2131_transfer"" [label=""transfer""];
""2131_setMetadata"" [label=""setMetadata""];
""2131__approve"" [label=""_approve""];
""2131__getChainLength"" [label=""_getChainLength""];
""2131_getToken"" [label=""getToken""];
""2131_setPrice"" [label=""setPrice""];
""2131_getChainFeeArray"" [label=""getChainFeeArray""];
""2131__addressNotNull"" [label=""_addressNotNull""];
""2131_totalSupply"" [label=""totalSupply""];
""2131_exists"" [label=""exists""];
""2131_TokenLayer"" [label=""TokenLayer""];
""2131__getNextPrice"" [label=""_getNextPrice""];
""2131_setGame"" [label=""setGame""];
""2131_tokensOfOwner"" [label=""tokensOfOwner""];
""2131_incrementPrice"" [label=""incrementPrice""];
""2131_setName"" [label=""setName""];
""2131_getParentOf"" [label=""getParentOf""];
""2131_createTokens"" [label=""createTokens""];
""2131_getChain"" [label=""getChain""];
""2131_deleteToken"" [label=""deleteToken""];
""2131__checkThenTransfer"" [label=""_checkThenTransfer""];
""2131__takeOwnership"" [label=""_takeOwnership""];
""2131_setName"" -> ""2131_exists"";
""2131__checkThenTransfer"" -> ""2131__transfer"";
""2131__getChainLength"" -> ""2131_getParentOf"";
""2131_takeOwnership"" -> ""2131_onlySystem"";
""2131_getParentOf"" -> ""2131_exists"";
""2131_getToken"" -> ""2131_getChainFees"";
""2131__transferFrom"" -> ""2131__owns"";
""2131__transferFrom"" -> ""2131__transfer"";
""2131_tokensOfOwner"" -> ""2131_balanceOf"";
""2131__checkThenTransfer"" -> ""2131_exists"";
""2131__takeOwnership"" -> ""2131__approved"";
""2131_setDevFee"" -> ""2131_onlyAdmin"";
""2131_transfer"" -> ""2131_isUnlocked"";
""2131_transferFrom"" -> ""2131__transferFrom"";
""2131_setChainFees"" -> ""2131_onlyAdmin"";
""2131__takeOwnership"" -> ""2131__transfer"";
""2131_createTokens"" -> ""2131_onlyAdmin"";
""2131_transferFrom"" -> ""2131_onlySystem"";
""2131__checkThenTransfer"" -> ""2131__addressNotNull"";
""2131_ownerOf"" -> ""2131_exists"";
""2131__transferFrom"" -> ""2131__addressNotNull"";
""2131__checkThenTransfer"" -> ""2131__owns"";
""2131_setLayerParent"" -> ""2131_onlyAdmin"";
""2131_bundleToken"" -> ""2131_getChainFees"";
""2131_getChain"" -> ""2131__addressNotNull"";
""2131_incrementPrice"" -> ""2131_exists"";
""2131_transfer"" -> ""2131_onlySystem"";
""2131_createToken"" -> ""2131__transfer"";
""2131_setPrice"" -> ""2131__owns"";
""2131_incrementPrice"" -> ""2131_onlySystem"";
""2131_createToken"" -> ""2131_onlyAdmin"";
""2131_transfer"" -> ""2131__checkThenTransfer"";
""2131_deleteToken"" -> ""2131_onlyAdmin"";
""2131_getMetadataOf"" -> ""2131_exists"";
""2131_setMetadata"" -> ""2131_onlyAdmin"";
""2131_approve"" -> ""2131__approve"";
""2131_getToken"" -> ""2131__getNextPrice"";
""2131_bundleToken"" -> ""2131__getNextPrice"";
""2131_approve"" -> ""2131_isUnlocked"";
""2131_getChain"" -> ""2131_getParentOf"";
""2131_getChain"" -> ""2131_exists"";
""2131__transferFrom"" -> ""2131__approved"";
""2131_setParent"" -> ""2131_exists"";
""2131_tokensOfOwner"" -> ""2131_exists"";
""2131_setPrice"" -> ""2131_onlySystem"";
""2131_deleteToken"" -> ""2131_exists"";
""2131_setGame"" -> ""2131_onlyAdmin"";
""2131_incrementPrice"" -> ""2131_getChainFees"";
""2131_takeOwnership"" -> ""2131_isUnlocked"";
""2131_createTokens"" -> ""2131_createToken"";
""2131__getNextPrice"" -> ""2131_getChainFees"";
""2131_setName"" -> ""2131_onlyAdmin"";
""2131_setOwnerFee"" -> ""2131_onlyAdmin"";
""2131__getChainLength"" -> ""2131__addressNotNull"";
""2131_createToken"" -> ""2131_exists"";
""2131__approve"" -> ""2131__owns"";
""2131_getChainFees"" -> ""2131__getChainLength"";
""2131_approve"" -> ""2131_onlySystem"";
""2131_setMetadata"" -> ""2131_exists"";
""2131_transferFrom"" -> ""2131_isUnlocked"";
""2131__takeOwnership"" -> ""2131__addressNotNull"";
""2131_setParent"" -> ""2131_onlyAdmin"";
""2131_tokensOfOwner"" -> ""2131_totalSupply"";
""2131_createToken"" -> ""2131__addressNotNull"";
""2131_getPriceOf"" -> ""2131_exists"";
""2131_takeOwnership"" -> ""2131__takeOwnership"";
}
"
0xf23fd8e6c2eda7e4d2a5638c8256bd516f7c6a73.sol,XPortDigitals,contract XPortDigitals is ERC20 { address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalSupply = 86000000000 * 100; function name() public constant returns (string) { return ; },1,"subgraph cluster_553_XPortDigitals {
label=""XPortDigitals"";
""553_name"" [label=""name""];
""553_getEthBalance"" [label=""getEthBalance""];
""553_balanceOf"" [label=""balanceOf""];
""553_transferFrom"" [label=""transferFrom""];
""553_XPortDigitals"" [label=""XPortDigitals""];
""553_approve"" [label=""approve""];
""553_finishDistribution"" [label=""finishDistribution""];
""553_symbol"" [label=""symbol""];
""553_distributeXPDS"" [label=""distributeXPDS""];
""553_transfer"" [label=""transfer""];
""553_transferOwnership"" [label=""transferOwnership""];
""553_allowance"" [label=""allowance""];
""553_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""553_decimals"" [label=""decimals""];
""553_transferOwnership"" -> ""553_onlyOwner"";
""553_distributeXPDS"" -> ""553_onlyOwner"";
""553_finishDistribution"" -> ""553_onlyOwner"";
""553_transferFrom"" -> ""553_onlyPayloadSize"";
""553_distributeXPDS"" -> ""553_canDistr"";
""553_distributeXPDS"" -> ""553_getEthBalance"";
""553_transfer"" -> ""553_onlyPayloadSize"";
}
"
0xd2d6158683aee4cc838067727209a0aaf4359de3.sol,AddressWhitelist,contract AddressWhitelist is Ownable { mapping (address => bool) public whitelisted; function AddressWhitelist() public { },1,"subgraph cluster_181_AddressWhitelist {
label=""AddressWhitelist"";
""181_removeFromWhitelist"" [label=""removeFromWhitelist""];
""181_addToWhitelist"" [label=""addToWhitelist""];
""181_AddressWhitelist"" [label=""AddressWhitelist""];
""181_isWhitelisted"" [label=""isWhitelisted""];
""181_removeFromWhitelist"" -> ""181_onlyOwner"";
""181_addToWhitelist"" -> ""181_onlyOwner"";
}
"
0x6d2cfe7c64087b1d6d2f7e77039de64dcd232ced.sol,ERC777BaseToken,"contract ERC777BaseToken is ERC777Token, ERC820Implementer { using SafeMath for uint256; string internal mName; string internal mSymbol; uint256 internal mGranularity; uint256 internal mTotalSupply; mapping(address => uint) internal mBalances; mapping(address => mapping(address => bool)) internal mAuthorized; address[] internal mDefaultOperators; mapping(address => bool) internal mIsDefaultOperator; mapping(address => mapping(address => bool)) internal mRevokedDefaultOperator; function ERC777BaseToken(string _name, string _symbol, uint256 _granularity, address[] _defaultOperators) internal { mName = _name; mSymbol = _symbol; mTotalSupply = 0; require(_granularity >= 1); mGranularity = _granularity; mDefaultOperators = _defaultOperators; for (uint i = 0; i < mDefaultOperators.length; i++) { mIsDefaultOperator[mDefaultOperators[i]] = true; }",1,"subgraph cluster_1158_ERC777BaseToken {
label=""ERC777BaseToken"";
""1158_isOperatorFor"" [label=""isOperatorFor""];
""1158_send"" [label=""send""];
""1158_burn"" [label=""burn""];
""1158_revokeOperator"" [label=""revokeOperator""];
""1158_requireMultiple"" [label=""requireMultiple""];
""1158_operatorBurn"" [label=""operatorBurn""];
""1158_symbol"" [label=""symbol""];
""1158_balanceOf"" [label=""balanceOf""];
""1158_granularity"" [label=""granularity""];
""1158_totalSupply"" [label=""totalSupply""];
""1158_defaultOperators"" [label=""defaultOperators""];
""1158_ERC777BaseToken"" [label=""ERC777BaseToken""];
""1158_authorizeOperator"" [label=""authorizeOperator""];
""1158_doSend"" [label=""doSend""];
""1158_callSender"" [label=""callSender""];
""1158_callRecipient"" [label=""callRecipient""];
""1158_name"" [label=""name""];
""1158_doBurn"" [label=""doBurn""];
""1158_isRegularAddress"" [label=""isRegularAddress""];
""1158_operatorSend"" [label=""operatorSend""];
""1158_callRecipient"" -> ""1158_isRegularAddress"";
""1158_callSender"" -> ""1158_interfaceAddr"";
""1158_burn"" -> ""1158_doBurn"";
""1158_doSend"" -> ""1158_callSender"";
""1158_doBurn"" -> ""1158_balanceOf"";
""1158_send"" -> ""1158_doSend"";
""1158_callRecipient"" -> ""1158_interfaceAddr"";
""1158_operatorBurn"" -> ""1158_isOperatorFor"";
""1158_doBurn"" -> ""1158_requireMultiple"";
""1158_operatorSend"" -> ""1158_doSend"";
""1158_ERC777BaseToken"" -> ""1158_setInterfaceImplementation"";
""1158_operatorSend"" -> ""1158_isOperatorFor"";
""1158_operatorBurn"" -> ""1158_doBurn"";
""1158_doBurn"" -> ""1158_callSender"";
""1158_doSend"" -> ""1158_callRecipient"";
""1158_doSend"" -> ""1158_requireMultiple"";
}
"
0x849919acec8627dde44da59e1a9737985d022b9d.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_burn"" [label=""burn""];
""396_transfer"" [label=""transfer""];
""396_approve"" [label=""approve""];
""396_burnFrom"" [label=""burnFrom""];
""396_transferFrom"" [label=""transferFrom""];
""396__transfer"" [label=""_transfer""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_transferFrom"" -> ""396__transfer"";
""396_transfer"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
}
"
0xf213d198b68b10654c63a9ed05a045e1d4a50f9f.sol,FootballerBase,"contract FootballerBase is FootballerAccessControl { using SafeMath for uint256; event Create(address owner, uint footballerId); event Transfer(address _from, address _to, uint256 tokenId); uint private randNonce = 0; struct footballer { uint price; uint defend; uint attack; uint quality; }",1,"subgraph cluster_420_FootballerBase {
label=""FootballerBase"";
""420_createFootballer"" [label=""createFootballer""];
""420__createFootballerStar"" [label=""_createFootballerStar""];
""420__randMod"" [label=""_randMod""];
""420__transfer"" [label=""_transfer""];
""420__createFootballerStar"" -> ""420_onlyManager"";
""420_createFootballer"" -> ""420__randMod"";
}
"
0x319fe5e87a37967a70c21598090c1f19ace5d1f2.sol,BICKCOIN,"contract BICKCOIN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function BICKCOIN( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_BICKCOIN {
label=""BICKCOIN"";
""380_approve"" [label=""approve""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_burnFrom"" [label=""burnFrom""];
""380_burn"" [label=""burn""];
""380_BICKCOIN"" [label=""BICKCOIN""];
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380__transfer"" [label=""_transfer""];
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0x203616a35d987b144fa6727e4f878add71401e91.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_balanceOf"" [label=""balanceOf""];
""256_transfer"" [label=""transfer""];
""256_transferFrom"" [label=""transferFrom""];
""256_allowance"" [label=""allowance""];
}
"
0x5acd19b9c91e596b1f062f18e3d02da7ed8d1e50.sol,BTClite,"contract BTClite is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 8; uint256 public constant SUPPLY_CAP = 21000000 * (10 ** uint256(decimals)); address NULL_ADDRESS = address(0); event NoteChanged(string newNote); string public note = ; function setNote(string note_) public onlyOwner { note = note_; NoteChanged(note); }",1,"subgraph cluster_682_BTClite {
label=""BTClite"";
""682_drop"" [label=""drop""];
""682_setNote"" [label=""setNote""];
""682_BTClite"" [label=""BTClite""];
""682_setNote"" -> ""682_onlyOwner"";
""682_drop"" -> ""682_onlyOwner"";
}
"
0x26fa4ab937bf885d06cfb3eabb89eeef9af1978a.sol,digithothToken,"contract digithothToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply = 500000000; uint public startDate; uint public bonusEnds; uint public presaleEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function digithothToken() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 2 weeks; presaleEnds = now + 6 weeks; endDate = now + 10 weeks; }",1,"subgraph cluster_630_digithothToken {
label=""digithothToken"";
""630_approveAndCall"" [label=""approveAndCall""];
""630_fallback"" [label=""fallback""];
""630_totalSupply"" [label=""totalSupply""];
""630_allowance"" [label=""allowance""];
""630_approve"" [label=""approve""];
""630_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""630_digithothToken"" [label=""digithothToken""];
""630_transfer"" [label=""transfer""];
""630_balanceOf"" [label=""balanceOf""];
""630_transferFrom"" [label=""transferFrom""];
""630_transfer"" -> ""630_safeAdd"";
""630_fallback"" -> ""630_safeAdd"";
""630_transferFrom"" -> ""630_safeSub"";
""630_transferAnyERC20Token"" -> ""630_onlyOwner"";
""630_transfer"" -> ""630_safeSub"";
""630_transferFrom"" -> ""630_safeAdd"";
}
"
0x5129bdff6b065ce57cc7e7349ba681a0ac1d00cd.sol,BNCXToken,"contract BNCXToken { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor() public { totalSupply = 50000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_307_BNCXToken {
label=""BNCXToken"";
""307_approve"" [label=""approve""];
""307_transferFrom"" [label=""transferFrom""];
""307_burn"" [label=""burn""];
""307_constructor"" [label=""constructor""];
""307_burnFrom"" [label=""burnFrom""];
""307_transfer"" [label=""transfer""];
""307__transfer"" [label=""_transfer""];
""307_transferFrom"" -> ""307__transfer"";
""307_transfer"" -> ""307__transfer"";
}
"
0x72a2384d0920b6c46f97ebe4c23c092acce485ac.sol,RGEToken,contract RGEToken is EIP20 { string public name = ; string public symbol = ; uint8 public decimals = 8; address owner; address public crowdsale; uint public endTGE; string public version = ; uint256 public totalSupply = 1000000000 * 10**uint(decimals); uint256 public reserveY1 = 300000000 * 10**uint(decimals); uint256 public reserveY2 = 200000000 * 10**uint(decimals); modifier onlyBy(address _account) { require(msg.sender == _account); _; },1,"subgraph cluster_633_RGEToken {
label=""RGEToken"";
""633_startCrowdsaleY0"" [label=""startCrowdsaleY0""];
""633_burn"" [label=""burn""];
""633_startCrowdsaleY2"" [label=""startCrowdsaleY2""];
""633_startCrowdsaleY1"" [label=""startCrowdsaleY1""];
""633_constructor"" [label=""constructor""];
""633_endCrowdsale"" [label=""endCrowdsale""];
""633_constructor"" -> ""633_EIP20"";
""633_startCrowdsaleY2"" -> ""633_onlyBy"";
""633_startCrowdsaleY0"" -> ""633_onlyBy"";
""633_endCrowdsale"" -> ""633_onlyBy"";
""633_startCrowdsaleY1"" -> ""633_onlyBy"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0xd4973b9a96e1030ed260781e36544756249045ce.sol,ERC20Standard,contract ERC20Standard { uint public totalSupply; string public name; uint8 public decimals; string public symbol; string public version; mapping (address => uint256) balances; mapping (address => mapping (address => uint)) allowed; modifier onlyPayloadSize(uint size) { assert(msg.data.length == size + 4); _; },1,"subgraph cluster_210_ERC20Standard {
label=""ERC20Standard"";
""210_allowance"" [label=""allowance""];
""210_transferFrom"" [label=""transferFrom""];
""210_approve"" [label=""approve""];
""210_balanceOf"" [label=""balanceOf""];
""210_transfer"" [label=""transfer""];
""210_transfer"" -> ""210_onlyPayloadSize"";
}
"
0x2e061fdfbb2c63a43e4490465d3862094b38f394.sol,AxaToken,"contract AxaToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 250000000000000000000000000; balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_543_AxaToken {
label=""AxaToken"";
""543_constructor"" [label=""constructor""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x5b566b473bb0ea8dc0fc6047dd623e5fa3b42307.sol,Beneficial,contract Beneficial is Base { address public shareholder; bool public shareholderIsToken = false; string public officialUrl; function setOfficialUrl(string _newOfficialUrl) public onlyOwner{ officialUrl = _newOfficialUrl; },1,"subgraph cluster_374_Beneficial {
label=""Beneficial"";
""374_setOfficialUrl"" [label=""setOfficialUrl""];
""374__userRefund"" [label=""_userRefund""];
""374__userRefund"" -> ""374_lock"";
""374_setOfficialUrl"" -> ""374_onlyOwner"";
""374__userRefund"" -> ""374_unLock"";
}
"
0x7220e734c524e8938a1553ae18e3c68aec8bf955.sol,SmsCertifier,contract SmsCertifier is Ownable { event Confirmed(address indexed who); event Revoked(address indexed who); modifier only_certified(address _who) { require(certs[_who].active); _; },1,"subgraph cluster_280_SmsCertifier {
label=""SmsCertifier"";
""280_getAddress"" [label=""getAddress""];
""280_revoke"" [label=""revoke""];
""280_get"" [label=""get""];
""280_removeDelegate"" [label=""removeDelegate""];
""280_getUint"" [label=""getUint""];
""280_addDelegate"" [label=""addDelegate""];
""280_isDelegate"" [label=""isDelegate""];
""280_certified"" [label=""certified""];
""280_certify"" [label=""certify""];
""280_revoke"" -> ""280_only_certified"";
""280_removeDelegate"" -> ""280_onlyOwner"";
""280_revoke"" -> ""280_only_delegate"";
""280_addDelegate"" -> ""280_onlyOwner"";
""280_certify"" -> ""280_only_delegate"";
}
"
0xed04927a3849fc9db3f3341a17b7d844a6c551a8.sol,CrowdInvestment,"contract CrowdInvestment { uint private restAmountToInvest; uint private maxGasPrice; address private creator; mapping(address => uint) private perUserInvestments; mapping(address => uint) private additionalCaps; uint private limitPerInvestor; function CrowdInvestment(uint totalCap, uint maxGasPriceParam, uint capForEverybody) public { restAmountToInvest = totalCap; creator = msg.sender; maxGasPrice = maxGasPriceParam; limitPerInvestor = capForEverybody; }",1,"subgraph cluster_188_CrowdInvestment {
label=""CrowdInvestment"";
""188_getCap"" [label=""getCap""];
""188_addPersonalCap"" [label=""addPersonalCap""];
""188_addPersonalCaps"" [label=""addPersonalCaps""];
""188_CrowdInvestment"" [label=""CrowdInvestment""];
""188_getTotalCap"" [label=""getTotalCap""];
""188_fallback"" [label=""fallback""];
""188_withdraw"" [label=""withdraw""];
""188_fallback"" -> ""188_getCap"";
}
"
0x4c4757b23526ba13876f8ef3efe973618266e3e8.sol,UZMINI_KO,contract UZMINI_KO { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_UZMINI_KO {
label=""UZMINI_KO"";
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
}
"
0x01eacc3ae59ee7fbbc191d63e8e1ccfdac11628c.sol,FairWin,contract FairWin { uint ethWei = 1 ether; uint allCount = 0; uint oneDayCount = 0; uint totalMoney = 0; uint totalCount = 0; uint private beginTime = 1; uint lineCountTimes = 1; uint private currentIndex = 0; address private owner; uint private actStu = 0; constructor () public { owner = msg.sender; },1,"subgraph cluster_48_UtilFairWin {
label=""UtilFairWin"";
""48_compareStr"" [label=""compareStr""];
""48_getScBylevel"" [label=""getScBylevel""];
""48_getFireScBylevel"" [label=""getFireScBylevel""];
""48_getLineLevel"" [label=""getLineLevel""];
""48_getRecommendScaleBylevelandTim"" [label=""getRecommendScaleBylevelandTim""];
""48_getlevel"" [label=""getlevel""];
}
"
0x56aca8618b2b4240d609104f31c87183682065e0.sol,hkchain,"contract hkchain { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function hkchain( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_hkchain {
label=""hkchain"";
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_hkchain"" [label=""hkchain""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x6e3990c89bd13397f3c080500805863275cc85ec.sol,POSV,contract POSV { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1310_POSV {
label=""POSV"";
""1310_exit"" [label=""exit""];
""1310_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1310_disableInitialStage"" [label=""disableInitialStage""];
""1310_sell"" [label=""sell""];
""1310_dividendsOf"" [label=""dividendsOf""];
""1310_sellPrice"" [label=""sellPrice""];
""1310_reinvest"" [label=""reinvest""];
""1310_fallback"" [label=""fallback""];
""1310_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1310_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1310_totalSupply"" [label=""totalSupply""];
""1310_buy"" [label=""buy""];
""1310_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1310_myTokens"" [label=""myTokens""];
""1310_transfer"" [label=""transfer""];
""1310_withdraw"" [label=""withdraw""];
""1310_setName"" [label=""setName""];
""1310_setAdministrator"" [label=""setAdministrator""];
""1310_myDividends"" [label=""myDividends""];
""1310_purchaseTokens"" [label=""purchaseTokens""];
""1310_sqrt"" [label=""sqrt""];
""1310_buyPrice"" [label=""buyPrice""];
""1310_setStakingRequirement"" [label=""setStakingRequirement""];
""1310_balanceOf"" [label=""balanceOf""];
""1310_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1310_setSymbol"" [label=""setSymbol""];
""1310_investtokens"" [label=""investtokens""];
""1310_withdraw"" -> ""1310_myDividends"";
""1310_setSymbol"" -> ""1310_onlyAdministrator"";
""1310_transfer"" -> ""1310_withdraw"";
""1310_transfer"" -> ""1310_tokensToEthereum_"";
""1310_withdraw"" -> ""1310_onlyStronghands"";
""1310_setStakingRequirement"" -> ""1310_onlyAdministrator"";
""1310_sell"" -> ""1310_onlyBagholders"";
""1310_setName"" -> ""1310_onlyAdministrator"";
""1310_exit"" -> ""1310_withdraw"";
""1310_sell"" -> ""1310_tokensToEthereum_"";
""1310_calculateEthereumReceived"" -> ""1310_tokensToEthereum_"";
""1310_calculateTokensReceived"" -> ""1310_ethereumToTokens_"";
""1310_myTokens"" -> ""1310_balanceOf"";
""1310_reinvest"" -> ""1310_purchaseTokens"";
""1310_fallback"" -> ""1310_purchaseTokens"";
""1310_disableInitialStage"" -> ""1310_onlyAdministrator"";
""1310_purchaseTokens"" -> ""1310_antiEarlyWhale"";
""1310_buy"" -> ""1310_purchaseTokens"";
""1310_myDividends"" -> ""1310_dividendsOf"";
""1310_purchaseTokens"" -> ""1310_ethereumToTokens_"";
""1310_sellPrice"" -> ""1310_tokensToEthereum_"";
""1310_reinvest"" -> ""1310_onlyStronghands"";
""1310_setAdministrator"" -> ""1310_onlyAdministrator"";
""1310_reinvest"" -> ""1310_myDividends"";
""1310_transfer"" -> ""1310_onlyBagholders"";
""1310_transfer"" -> ""1310_myDividends"";
""1310_buyPrice"" -> ""1310_tokensToEthereum_"";
""1310_ethereumToTokens_"" -> ""1310_sqrt"";
""1310_exit"" -> ""1310_sell"";
}
"
0x411079f1b50ac2583a458a7cce1d1afdf4f8842e.sol,MSToken,"contract MSToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 400000000000000000000000000; balances[0x1a30697cc47bd23add663fa9dc7bbb26adee655b] = _totalSupply; emit Transfer(address(0), 0x1a30697cc47bd23add663fa9dc7bbb26adee655b, _totalSupply); }",1,"subgraph cluster_543_MSToken {
label=""MSToken"";
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_constructor"" [label=""constructor""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x29946bc47b8e8a64562816bd6c62e9aa023dfb92.sol,GHANIANCIDIDIGITALTETHER,"contract GHANIANCIDIDIGITALTETHER { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor( ) public { totalSupply = 2000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_GHANIANCIDIDIGITALTETHER {
label=""GHANIANCIDIDIGITALTETHER"";
""355__transfer"" [label=""_transfer""];
""355_burn"" [label=""burn""];
""355_burnFrom"" [label=""burnFrom""];
""355_approveAndCall"" [label=""approveAndCall""];
""355_transferFrom"" [label=""transferFrom""];
""355_approve"" [label=""approve""];
""355_constructor"" [label=""constructor""];
""355_transfer"" [label=""transfer""];
""355_approveAndCall"" -> ""355_approve"";
""355_transferFrom"" -> ""355__transfer"";
""355_transfer"" -> ""355__transfer"";
}
"
0x5833dbb0749887174b254ba4a5df747ff523a905.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_464_TokenERC20 {
label=""TokenERC20"";
""464_transfer"" [label=""transfer""];
""464_burn"" [label=""burn""];
""464_transferFrom"" [label=""transferFrom""];
""464_constructor"" [label=""constructor""];
""464__transfer"" [label=""_transfer""];
""464_approveAndCall"" [label=""approveAndCall""];
""464_approve"" [label=""approve""];
""464_burnFrom"" [label=""burnFrom""];
""464_approveAndCall"" -> ""464_approve"";
""464_transferFrom"" -> ""464__transfer"";
""464_transfer"" -> ""464__transfer"";
}
"
0x53ec8bca4d14737f7ea33415bfe392f32e331b35.sol,SOLUSToken,"contract SOLUSToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function SOLUSToken() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 4 weeks; endDate = now + 32 weeks; }",1,"subgraph cluster_609_SOLUSToken {
label=""SOLUSToken"";
""609_transfer"" [label=""transfer""];
""609_SOLUSToken"" [label=""SOLUSToken""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_approve"" [label=""approve""];
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_fallback"" [label=""fallback""];
""609_transferFrom"" [label=""transferFrom""];
""609_balanceOf"" [label=""balanceOf""];
""609_totalSupply"" [label=""totalSupply""];
""609_allowance"" [label=""allowance""];
""609_transferFrom"" -> ""609_safeSub"";
""609_transfer"" -> ""609_safeAdd"";
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
""609_transfer"" -> ""609_safeSub"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_fallback"" -> ""609_safeAdd"";
}
"
0x0033fb5561719b8b697b604466d6d39308c58191.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 500000000; uint256 public buyPrice = 2000; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public { }",1,"subgraph cluster_627_EncryptedToken {
label=""EncryptedToken"";
""627_fallback"" [label=""fallback""];
""627_balanceOfa"" [label=""balanceOfa""];
""627_mintToken"" [label=""mintToken""];
""627_freezeAccount"" [label=""freezeAccount""];
""627_setPrices"" [label=""setPrices""];
""627_selfdestructs"" [label=""selfdestructs""];
""627_getEth"" [label=""getEth""];
""627__transfer"" [label=""_transfer""];
""627_buy"" [label=""buy""];
""627_EncryptedToken"" [label=""EncryptedToken""];
""627_setPrices"" -> ""627_onlyOwner"";
""627_buy"" -> ""627__transfer"";
""627_fallback"" -> ""627__transfer"";
""627_EncryptedToken"" -> ""627_TokenERC20"";
""627_mintToken"" -> ""627_onlyOwner"";
""627_freezeAccount"" -> ""627_onlyOwner"";
}
"
0x332eeaa966e0d7dcf2c5373b9b9c88f8be2eee15.sol,EGFToken,"contract EGFToken is ERC20, owned { mapping (address => bool) public frozenAccount; event AddSupply(uint amount); event FrozenFunds(address target, bool frozen); event Burn(address target, uint amount); constructor () ERC20() public { }",1,"subgraph cluster_626_EGFToken {
label=""EGFToken"";
""626__transfer"" [label=""_transfer""];
""626_transferFrom"" [label=""transferFrom""];
""626_transfer"" [label=""transfer""];
""626_mine"" [label=""mine""];
""626_constructor"" [label=""constructor""];
""626_burnFrom"" [label=""burnFrom""];
""626_freezeAccount"" [label=""freezeAccount""];
""626_burn"" [label=""burn""];
""626_freezeAccount"" -> ""626_onlyOwner"";
""626_transfer"" -> ""626__transfer"";
""626_constructor"" -> ""626_constructor"";
""626_transferFrom"" -> ""626__transfer"";
""626_mine"" -> ""626_onlyOwner"";
}
"
0x8432a5a61cf1cc5ca5bc5ab919d0665427fb513c.sol,IcoToken,"contract IcoToken is SafeMath, StandardToken, Pausable { string public name; string public symbol; uint256 public decimals; string public version; address public icoContract; constructor( string _name, string _symbol, uint256 _decimals, string _version ) public { name = _name; symbol = _symbol; decimals = _decimals; version = _version; }",1,"subgraph cluster_1002_IcoToken {
label=""IcoToken"";
""1002_approve"" [label=""approve""];
""1002_transfer"" [label=""transfer""];
""1002_setIcoContract"" [label=""setIcoContract""];
""1002_balanceOf"" [label=""balanceOf""];
""1002_sell"" [label=""sell""];
""1002_constructor"" [label=""constructor""];
""1002_setIcoContract"" -> ""1002_onlyOwner"";
""1002_transfer"" -> ""1002_whenNotPaused"";
""1002_approve"" -> ""1002_approve"";
""1002_balanceOf"" -> ""1002_balanceOf"";
""1002_sell"" -> ""1002_whenNotPaused"";
""1002_transfer"" -> ""1002_transfer"";
""1002_approve"" -> ""1002_whenNotPaused"";
}
"
0x1fdedef5c2da1ed9db44d80003a9592dfa18163c.sol,Syndicate,contract Syndicate is Ownable{ uint256 public numberSyndicateMembers; uint256 public totalSyndicateShares = 20000; uint256 public playersShareAllocation = 5000; uint256 public availableBuyInShares = 5000; uint256 public minimumBuyIn = 10; uint256 public buyInSharePrice = 1000000000000000; uint256 public shareCycleSessionSize = 1000; uint256 public shareCycleIndex = 0; uint256 public shareCycle = 1; uint256 public currentSyndicateValue = 0; uint256 public precision = 1000000000000000; uint256 public maxCyclePlayersConsidered = 100; address[] public cyclePlayers; uint256 public numberOfCyclePlayers = 0; struct somePlayer { uint256 playCount; uint256 profitShare; uint256 shareCycle; uint256 winnings; },1,"subgraph cluster_869_Syndicate {
label=""Syndicate"";
""869_roundIt"" [label=""roundIt""];
""869_claimPlayerWinnings"" [label=""claimPlayerWinnings""];
""869_playerStatus"" [label=""playerStatus""];
""869_setShareCycleSessionSize"" [label=""setShareCycleSessionSize""];
""869_insertCyclePlayer"" [label=""insertCyclePlayer""];
""869_addMember"" [label=""addMember""];
""869_allocateWinnings"" [label=""allocateWinnings""];
""869_updatePlayCount"" [label=""updatePlayCount""];
""869_Syndicate"" [label=""Syndicate""];
""869_setMaxCyclePlayersConsidered"" [label=""setMaxCyclePlayersConsidered""];
""869_claimPlayerProfit"" [label=""claimPlayerProfit""];
""869_buyIntoSyndicate"" [label=""buyIntoSyndicate""];
""869_memberShareCount"" [label=""memberShareCount""];
""869_min"" [label=""min""];
""869_allocateShares"" [label=""allocateShares""];
""869_distributeProfit"" [label=""distributeProfit""];
""869_memberProfitShare"" [label=""memberProfitShare""];
""869_claimProfit"" [label=""claimProfit""];
""869_setMaxCyclePlayersConsidered"" -> ""869_onlyOwner"";
""869_distributeProfit"" -> ""869_min"";
""869_buyIntoSyndicate"" -> ""869_addMember"";
""869_allocateShares"" -> ""869_addMember"";
""869_distributeProfit"" -> ""869_roundIt"";
""869_setShareCycleSessionSize"" -> ""869_onlyOwner"";
""869_updatePlayCount"" -> ""869_insertCyclePlayer"";
""869_allocateShares"" -> ""869_onlyOwner"";
}
"
0x55c4b50c93a5fa213078f96fbf0834cba17ebc43.sol,Egypt,"contract Egypt { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor() public { symbol = ; name = ; decimals = 18; totalSupply = 1500000000000000000000000000; balanceOf[0x2D12749695305bbde9bA7e1E12fA481C71314F28] = totalSupply; emit Transfer(address(0), 0x2D12749695305bbde9bA7e1E12fA481C71314F28, totalSupply); }",1,"subgraph cluster_317_Egypt {
label=""Egypt"";
""317_approveAndCall"" [label=""approveAndCall""];
""317_approve"" [label=""approve""];
""317_totalSupply"" [label=""totalSupply""];
""317_constructor"" [label=""constructor""];
""317_giveBlockReward"" [label=""giveBlockReward""];
""317__transfer"" [label=""_transfer""];
""317_transferFrom"" [label=""transferFrom""];
""317_transfer"" [label=""transfer""];
""317_approveAndCall"" -> ""317_approve"";
""317_transfer"" -> ""317__transfer"";
""317_transferFrom"" -> ""317__transfer"";
}
"
0x5c591aaa5b18d6411b01c9e6862b155f0433a6c2.sol,PiaoPiaoToken,contract PiaoPiaoToken is LoveToken { mapping (address => uint256) balances; string public name; uint8 public decimals; string public symbol; string public loveUrl; function PiaoPiaoToken() { balances[msg.sender] = 5201314; totalSupply = 5201314; name = ; decimals = 0; symbol = ; },1,"subgraph cluster_195_PiaoPiaoToken {
label=""PiaoPiaoToken"";
""195_setLoveUrl"" [label=""setLoveUrl""];
""195_transfer"" [label=""transfer""];
""195_PiaoPiaoToken"" [label=""PiaoPiaoToken""];
""195_balanceOf"" [label=""balanceOf""];
""195_setLoveUrl"" -> ""195_onlyOwner"";
}
"
0xd0059e9d822c471f394ae5974d783e86b2aa0853.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_245_StandardToken {
label=""StandardToken"";
""245_allowance"" [label=""allowance""];
""245_transferFrom"" [label=""transferFrom""];
""245_balanceOf"" [label=""balanceOf""];
""245_approve"" [label=""approve""];
""245_transfer"" [label=""transfer""];
}
"
0xd294fb1b8b1169dc634017f60d9ca36a5701bd7d.sol,TokenBCCO,"contract TokenBCCO { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenBCCO( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenBCCO {
label=""TokenBCCO"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_TokenBCCO"" [label=""TokenBCCO""];
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0xc729c50c19d3b2f0049c9eec809b5cc175dbf489.sol,PDGToken,"contract PDGToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function PDGToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_PDGToken {
label=""PDGToken"";
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_PDGToken"" [label=""PDGToken""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x039b5649a59967e3e936d7471f9c3700100ee1ab.sol,MyToken,"contract MyToken { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function MyToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_174_MyToken {
label=""MyToken"";
""174_transfer"" [label=""transfer""];
""174_burn"" [label=""burn""];
""174__transfer"" [label=""_transfer""];
""174_MyToken"" [label=""MyToken""];
""174_transfer"" -> ""174__transfer"";
}
"
0x036a98e540599dae4a9778335ffabe6ca01ca705.sol,cwallet,contract cwallet { bytes32 keyHash; address owner; bytes32 wallet_id = 0x41691d0d4fa9d63aa73129998c6d22eda519ff3623f1881c379406b1650e4823; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_cwallet {
label=""cwallet"";
""121_clear"" [label=""clear""];
""121_constructor"" [label=""constructor""];
""121_update_new_hash"" [label=""update_new_hash""];
""121_setup_key"" [label=""setup_key""];
""121_withdraw"" [label=""withdraw""];
""121_fallback"" [label=""fallback""];
""121_get_id"" [label=""get_id""];
}
"
0x02dbe2f315e059743376abcd22ab4908ea9fb02d.sol,ContractReceiver,contract ContractReceiver { struct TKN { address sender; uint value; bytes data; bytes4 sig; },1,"subgraph cluster_238_ContractReceiver {
label=""ContractReceiver"";
""238_tokenFallback"" [label=""tokenFallback""];
}
"
0xe8d5a2fc2ff2d5de90c98daa6aaed8b250d7965b.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( ) public { totalSupply = 100000000; name = ; decimals = 18; symbol = ; }",1,"subgraph cluster_381_TokenERC20 {
label=""TokenERC20"";
""381_approve"" [label=""approve""];
""381_burnFrom"" [label=""burnFrom""];
""381_TokenERC20"" [label=""TokenERC20""];
""381_transfer"" [label=""transfer""];
""381_burn"" [label=""burn""];
""381_transferFrom"" [label=""transferFrom""];
""381__transfer"" [label=""_transfer""];
""381_approveAndCall"" [label=""approveAndCall""];
""381_approveAndCall"" -> ""381_approve"";
""381_transferFrom"" -> ""381__transfer"";
""381_transfer"" -> ""381__transfer"";
}
"
0xef68e7c694f40c8202821edf525de3782458639f.sol,LoopringToken,"contract LoopringToken is StandardToken { string public constant NAME = ; string public constant SYMBOL = ; uint public constant DECIMALS = 18; uint8[10] public bonusPercentages = [ 20, 16, 14, 12, 10, 8, 6, 4, 2, 0 ]; uint public constant NUM_OF_PHASE = 10; uint16 public constant BLOCKS_PER_PHASE = 15250; address public target; uint public firstblock = 0; bool public unsoldTokenIssued = false; uint256 public constant GOAL = 50000 ether; uint256 public constant HARD_CAP = 120000 ether; uint public constant MAX_UNSOLD_RATIO = 675; uint256 public constant BASE_RATE = 5000; uint public totalEthReceived = 0; uint public issueIndex = 0; event SaleStarted(); event SaleEnded(); event InvalidCaller(address caller); event InvalidState(bytes msg); event Issue(uint issueIndex, address addr, uint ethAmount, uint tokenAmount); event SaleSucceeded(); event SaleFailed(); modifier onlyOwner { if (target == msg.sender) { _; }",1,"subgraph cluster_940_LoopringToken {
label=""LoopringToken"";
""940_hardCapReached"" [label=""hardCapReached""];
""940_price"" [label=""price""];
""940_close"" [label=""close""];
""940_start"" [label=""start""];
""940_issueUnsoldToken"" [label=""issueUnsoldToken""];
""940_saleStarted"" [label=""saleStarted""];
""940_saleEnded"" [label=""saleEnded""];
""940_LoopringToken"" [label=""LoopringToken""];
""940_issueToken"" [label=""issueToken""];
""940_fallback"" [label=""fallback""];
""940_computeTokenAmount"" [label=""computeTokenAmount""];
""940_saleDue"" [label=""saleDue""];
""940_close"" -> ""940_onlyOwner"";
""940_saleEnded"" -> ""940_saleDue"";
""940_saleEnded"" -> ""940_hardCapReached"";
""940_start"" -> ""940_beforeStart"";
""940_issueToken"" -> ""940_computeTokenAmount"";
""940_fallback"" -> ""940_issueToken"";
""940_close"" -> ""940_afterEnd"";
""940_close"" -> ""940_issueUnsoldToken"";
""940_start"" -> ""940_onlyOwner"";
""940_price"" -> ""940_computeTokenAmount"";
""940_issueToken"" -> ""940_inProgress"";
}
"
0xf4609d26a58598d6b80b11f451a00477f61d8804.sol,Tcthereum,"contract Tcthereum { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Tcthereum( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_Tcthereum {
label=""Tcthereum"";
""361_Tcthereum"" [label=""Tcthereum""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x128a0cdaf3bb00e4b5357e02ff0682933beb407f.sol,ERC20Connect,"contract ERC20Connect is ERXInterface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ERC20Connect() public { symbol = ; name = ; decimals = 18; _totalSupply = 21000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); unitsOneEthCanBuy = 5000; fundsWallet = msg.sender; }",1,"subgraph cluster_630_ERC20Connect {
label=""ERC20Connect"";
""630_balanceOf"" [label=""balanceOf""];
""630_transfer"" [label=""transfer""];
""630_transferFrom"" [label=""transferFrom""];
""630_approveAndCall"" [label=""approveAndCall""];
""630_fallback"" [label=""fallback""];
""630_totalSupply"" [label=""totalSupply""];
""630_ERC20Connect"" [label=""ERC20Connect""];
""630_approve"" [label=""approve""];
""630_allowance"" [label=""allowance""];
""630_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""630_transferAnyERC20Token"" -> ""630_onlyOwner"";
}
"
0xd389c08bb987dd7daeb31f51fce1b5b73710b38e.sol,token,"contract token { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function token( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[address(this)] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_48_tokenRecipient {
label=""tokenRecipient"";
""48_receiveApproval"" [label=""receiveApproval""];
}
"
0x369d0db2c7d56b095d758379b75f64085953528a.sol,TokenERC20,"contract TokenERC20 is owned { string public name; string public symbol; uint8 public decimals = 2; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply ; balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_406_TokenERC20 {
label=""TokenERC20"";
""406_burn"" [label=""burn""];
""406_approve"" [label=""approve""];
""406_TokenERC20"" [label=""TokenERC20""];
""406_approveAndCall"" [label=""approveAndCall""];
""406__transfer"" [label=""_transfer""];
""406_transferFrom"" [label=""transferFrom""];
""406_transfer"" [label=""transfer""];
""406_burnFrom"" [label=""burnFrom""];
""406_transfer"" -> ""406__transfer"";
""406_approveAndCall"" -> ""406_approve"";
""406_transferFrom"" -> ""406__transfer"";
}
"
0x332124f226e80c3afdbb59271f550881b20604a1.sol,PlazaToken,"contract PlazaToken is owned, TokenERC20 { mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function PlazaToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_547_PlazaToken {
label=""PlazaToken"";
""547_mintToken"" [label=""mintToken""];
""547_freezeAccount"" [label=""freezeAccount""];
""547_PlazaToken"" [label=""PlazaToken""];
""547__transfer"" [label=""_transfer""];
""547_PlazaToken"" -> ""547_TokenERC20"";
""547_freezeAccount"" -> ""547_onlyOwner"";
""547_mintToken"" -> ""547_onlyOwner"";
}
"
0xbc4976ceaeae6c019f826a1e89a6d9cb1a2970bc.sol,UbiatarPlay,contract UbiatarPlay is ERC20 { string public name = ; string public symbol = ; uint8 public decimals = 8; address owner; address public crowdsale; string public version = ; uint256 public totalSupply = 1000000000 * 10**uint(decimals); modifier onlyBy(address _account) { require(msg.sender == _account); _; },1,"subgraph cluster_409_UbiatarPlay {
label=""UbiatarPlay"";
""409_burn"" [label=""burn""];
""409_constructor"" [label=""constructor""];
""409_constructor"" -> ""409_ERC20"";
}
"
0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol,Exchanger,"contract Exchanger is Administered, tokenRecipient { bool public enabled = false; ITradeableAsset public tokenContract; IYeekFormula public formulaContract; uint32 public weight; uint32 public fee=5000; uint32 public multiplier=1; uint32 public collectedFees=0; constructor(address _token, uint32 _weight, address _formulaContract) { require (_weight > 0 && weight <= 1000000); weight = _weight; tokenContract = ITradeableAsset(_token); formulaContract = IYeekFormula(_formulaContract); }",1,"subgraph cluster_811_Exchanger {
label=""Exchanger"";
""811_getPurchasePrice"" [label=""getPurchasePrice""];
""811_sellOneStep"" [label=""sellOneStep""];
""811_sell"" [label=""sell""];
""811_receiveApproval"" [label=""receiveApproval""];
""811_withdrawTokens"" [label=""withdrawTokens""];
""811_disable"" [label=""disable""];
""811_withdrawEther"" [label=""withdrawEther""];
""811_depositTokens"" [label=""depositTokens""];
""811_getReserveBalances"" [label=""getReserveBalances""];
""811_enable"" [label=""enable""];
""811_depositEther"" [label=""depositEther""];
""811_getSalePrice"" [label=""getSalePrice""];
""811_setReserveWeight"" [label=""setReserveWeight""];
""811_buy"" [label=""buy""];
""811_constructor"" [label=""constructor""];
""811_setMultiplier"" [label=""setMultiplier""];
""811_setFee"" [label=""setFee""];
""811_enable"" -> ""811_onlyAdmin"";
""811_depositTokens"" -> ""811_onlyOwner"";
""811_setFee"" -> ""811_onlyAdmin"";
""811_disable"" -> ""811_onlyAdmin"";
""811_withdrawTokens"" -> ""811_onlyOwner"";
""811_withdrawEther"" -> ""811_onlyOwner"";
""811_depositEther"" -> ""811_onlyOwner"";
""811_setMultiplier"" -> ""811_onlyAdmin"";
""811_receiveApproval"" -> ""811_sellOneStep"";
""811_setReserveWeight"" -> ""811_onlyAdmin"";
}
"
0x6d14421da39b403baab1cb0eac158ee658590798.sol,Agencies,"contract Agencies { mapping (address => string) private agencyOfOwner; mapping (string => address) private ownerOfAgency; event Set (string indexed _agency, address indexed _owner); event Unset (string indexed _agency, address indexed _owner); function Agencies () public { }",1,"subgraph cluster_163_Agencies {
label=""Agencies"";
""163_agencyOf"" [label=""agencyOf""];
""163_set"" [label=""set""];
""163_ownerOf"" [label=""ownerOf""];
""163_unset"" [label=""unset""];
""163_Agencies"" [label=""Agencies""];
""163_set"" -> ""163_ownerOf"";
}
"
0x2c82c73d5b34aa015989462b2948cd616a37641f.sol,MiniMeTokenFactory,"contract MiniMeTokenFactory { function createCloneToken( address _parentToken, uint _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled ) returns (MiniMeToken) { MiniMeToken newToken = new MiniMeToken( this, _parentToken, _snapshotBlock, _tokenName, _decimalUnits, _tokenSymbol, _transfersEnabled ); newToken.changeController(msg.sender); return newToken; }",1,"subgraph cluster_1290_MiniMeTokenFactory {
label=""MiniMeTokenFactory"";
""1290_createCloneToken"" [label=""createCloneToken""];
}
"
0xf1e6b7f94bb0d70d8a19187f684e4270b0a0c989.sol,ERC20TokenCPN,contract ERC20TokenCPN { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 0; address public regulator; uint8 public regulatorStatus; uint internal amount; struct agent { uint balance; mapping (address => uint) allowed; uint8 permission; },1,"subgraph cluster_633_ERC20TokenCPN {
label=""ERC20TokenCPN"";
""633_changeAgentPermission"" [label=""changeAgentPermission""];
""633_burn"" [label=""burn""];
""633_changeRegulator"" [label=""changeRegulator""];
""633_totalSupply"" [label=""totalSupply""];
""633_approve"" [label=""approve""];
""633_transferFrom"" [label=""transferFrom""];
""633_changeRegulatorStatus"" [label=""changeRegulatorStatus""];
""633_agentPermission"" [label=""agentPermission""];
""633_ERC20TokenCPN"" [label=""ERC20TokenCPN""];
""633_destroy"" [label=""destroy""];
""633_transfer"" [label=""transfer""];
""633_allowance"" [label=""allowance""];
""633_balanceOf"" [label=""balanceOf""];
""633_mint"" [label=""mint""];
""633_mint"" -> ""633_transfer"";
""633_ERC20TokenCPN"" -> ""633_changeRegulatorStatus"";
""633_ERC20TokenCPN"" -> ""633_mint"";
""633_ERC20TokenCPN"" -> ""633_changeRegulator"";
}
"
0x32a44d9d49a05f9049cd7f8eb0e3d19c90dd2421.sol,DragonDistributions,contract DragonDistributions { address public dragon; uint256 public clock; address public prime; address public film; address public northadvisor; address public southadvisor; uint public filmamount; bool public filmpaid; mapping ( address => uint256 ) public balanceOf; mapping ( address => bool ) public distributionOne; mapping ( address => bool ) public distributionTwo; mapping ( address => bool ) public distributionThree; mapping ( address => bool ) public advisors; uint256 public awardAmount = 45000000000000; uint256 public awardAmountPrime = 100000000000000; function DragonDistributions () { dragon = 0x814F67fA286f7572B041D041b1D99b432c9155Ee; prime = 0x243098c1e16973c7e3e969c289c5b87808e359c1; film = 0xdFCf69C8FeD25F5150Db719BAd4EfAb64F628d31; northadvisor = 0x74Fc8fA4F99b6c19C250E4Fc6952051a95F6060D; southadvisor = 0xCC3c6A89B5b8a054f21bCEff58B6429447cd8e5E; clock = now; filmamount = 2500000000000; balanceOf[ film ] = awardAmount + filmamount; balanceOf[ northadvisor ] = awardAmount; balanceOf[ southadvisor ] = awardAmount; balanceOf[ prime ] = awardAmountPrime; advisors [ film ] = true; advisors [ northadvisor ] = true; advisors [ southadvisor ] = true; filmpaid = false; },1,"subgraph cluster_346_DragonDistributions {
label=""DragonDistributions"";
""346_withdrawDragons"" [label=""withdrawDragons""];
""346_DragonDistributions"" [label=""DragonDistributions""];
""346_withdrawDragonsPrime"" [label=""withdrawDragonsPrime""];
""346_withdrawDragonsFilm"" [label=""withdrawDragonsFilm""];
""346_withdrawDragonsPrime"" -> ""346_onlyPrime"";
""346_withdrawDragonsFilm"" -> ""346_onlyFilm"";
}
"
0x04874548a2c233f57ba13c4d4cdee73c29811322.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
""256_balanceOf"" [label=""balanceOf""];
""256_transferFrom"" [label=""transferFrom""];
""256_approve"" [label=""approve""];
}
"
0x0e21902d93573c18fd0acbadac4a5464e9732f54.sol,TempleOfETH,contract TempleOfETH { modifier onlyBagholders { require(myTokens() > 0); _; },1,"subgraph cluster_1475_TempleOfETH {
label=""TempleOfETH"";
""1475_myDividends"" [label=""myDividends""];
""1475_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1475_sqrt"" [label=""sqrt""];
""1475_totalSupply"" [label=""totalSupply""];
""1475_isStarted"" [label=""isStarted""];
""1475_setStartTime"" [label=""setStartTime""];
""1475_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1475_transferInternal"" [label=""transferInternal""];
""1475_fallback"" [label=""fallback""];
""1475_calculateUntaxedEthereumReceived"" [label=""calculateUntaxedEthereumReceived""];
""1475_purchaseTokens"" [label=""purchaseTokens""];
""1475_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1475_transfer"" [label=""transfer""];
""1475_buyPrice"" [label=""buyPrice""];
""1475_balanceOf"" [label=""balanceOf""];
""1475_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1475_buy"" [label=""buy""];
""1475_dividendsOf"" [label=""dividendsOf""];
""1475_exit"" [label=""exit""];
""1475_entryFee"" [label=""entryFee""];
""1475_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1475_sell"" [label=""sell""];
""1475_sellPrice"" [label=""sellPrice""];
""1475_reinvest"" [label=""reinvest""];
""1475_myTokens"" [label=""myTokens""];
""1475_withdraw"" [label=""withdraw""];
""1475_constructor"" [label=""constructor""];
""1475_isPremine"" [label=""isPremine""];
""1475_purchaseFor"" [label=""purchaseFor""];
""1475_purchaseFor"" -> ""1475_antiEarlyWhale"";
""1475_exit"" -> ""1475_sell"";
""1475_purchaseTokens"" -> ""1475_ethereumToTokens_"";
""1475_transfer"" -> ""1475_myDividends"";
""1475_sellPrice"" -> ""1475_tokensToEthereum_"";
""1475_myTokens"" -> ""1475_balanceOf"";
""1475_fallback"" -> ""1475_easyOnTheGas"";
""1475_sell"" -> ""1475_tokensToEthereum_"";
""1475_calculateUntaxedEthereumReceived"" -> ""1475_tokensToEthereum_"";
""1475_sell"" -> ""1475_buyPrice"";
""1475_transfer"" -> ""1475_transferInternal"";
""1475_withdraw"" -> ""1475_onlyStronghands"";
""1475_fallback"" -> ""1475_isControlled"";
""1475_buy"" -> ""1475_purchaseTokens"";
""1475_buy"" -> ""1475_easyOnTheGas"";
""1475_setStartTime"" -> ""1475_isStarted"";
""1475_calculateTokensReceived"" -> ""1475_entryFee"";
""1475_reinvest"" -> ""1475_myDividends"";
""1475_purchaseFor"" -> ""1475_purchaseTokens"";
""1475_buyPrice"" -> ""1475_entryFee"";
""1475_reinvest"" -> ""1475_purchaseTokens"";
""1475_sell"" -> ""1475_onlyBagholders"";
""1475_ethereumToTokens_"" -> ""1475_sqrt"";
""1475_fallback"" -> ""1475_antiEarlyWhale"";
""1475_reinvest"" -> ""1475_onlyStronghands"";
""1475_transfer"" -> ""1475_withdraw"";
""1475_buyPrice"" -> ""1475_tokensToEthereum_"";
""1475_purchaseFor"" -> ""1475_easyOnTheGas"";
""1475_calculateEthereumReceived"" -> ""1475_tokensToEthereum_"";
""1475_withdraw"" -> ""1475_myDividends"";
""1475_myDividends"" -> ""1475_dividendsOf"";
""1475_buy"" -> ""1475_isControlled"";
""1475_calculateTokensReceived"" -> ""1475_ethereumToTokens_"";
""1475_purchaseTokens"" -> ""1475_entryFee"";
""1475_transfer"" -> ""1475_onlyBagholders"";
""1475_purchaseTokens"" -> ""1475_buyPrice"";
""1475_fallback"" -> ""1475_purchaseTokens"";
""1475_exit"" -> ""1475_withdraw"";
""1475_purchaseFor"" -> ""1475_isControlled"";
""1475_buy"" -> ""1475_antiEarlyWhale"";
}
"
0xf2f5d3bccf2c84dff7da4838c4d741abf3608ab8.sol,KEDU,"contract KEDU { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor() public { totalSupply = 100000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_378_KEDU {
label=""KEDU"";
""378_approveAndCall"" [label=""approveAndCall""];
""378_burnFrom"" [label=""burnFrom""];
""378_approve"" [label=""approve""];
""378_constructor"" [label=""constructor""];
""378__transfer"" [label=""_transfer""];
""378_transferFrom"" [label=""transferFrom""];
""378_burn"" [label=""burn""];
""378_transfer"" [label=""transfer""];
""378_approveAndCall"" -> ""378_approve"";
""378_transferFrom"" -> ""378__transfer"";
""378_transfer"" -> ""378__transfer"";
}
"
0x3fab284a3cd0a6d88d18d0fda4bc1a76cdacd68a.sol,qui_qz,contract qui_qz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_qui_qz {
label=""qui_qz"";
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_Try"" [label=""Try""];
""118_Start_qui_qz"" [label=""Start_qui_qz""];
""118_StopGame"" [label=""StopGame""];
}
"
0x5b527c8cc72ea4b8681e44754be6248b107c5229.sol,SmartHomeCoin,"contract SmartHomeCoin is owned, TokenERC20 { mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function SmartHomeCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_547_SmartHomeCoin {
label=""SmartHomeCoin"";
""547_mintToken"" [label=""mintToken""];
""547_SmartHomeCoin"" [label=""SmartHomeCoin""];
""547__transfer"" [label=""_transfer""];
""547_freezeAccount"" [label=""freezeAccount""];
""547_mintToken"" -> ""547_onlyOwner"";
""547_freezeAccount"" -> ""547_onlyOwner"";
""547_SmartHomeCoin"" -> ""547_TokenERC20"";
}
"
0x6be9ad54d8ad5510d61690a7bd3823d0790c71b6.sol,IRAN_WINS,"contract IRAN_WINS { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 5206357752953970000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_IRAN_WINS {
label=""IRAN_WINS"";
""189_approve"" [label=""approve""];
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x7703c35cffdc5cda8d27aa3df2f9ba6964544b6e.sol,PylonToken,"contract PylonToken is owned { string public standard = ; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 3750000000000000000000000; mapping (address => uint256) public balanceOf; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); using SafeMath for uint256; address public beneficiary = 0xAE0151Ca8C9b6A1A7B50Ce80Bf7436400E22b535; uint256 public fundingGoal = 21230434782608700000000; uint256 public amountRaised; uint256 public deadline; uint256 public price = 6608695652173910; uint256 public totalTokensToSend = 3250000000000000000000000; uint256 public maxEtherInvestment = 826086956521739000000; uint256 public maxTokens = 297619047619048000000000; uint256 public bonusCap = 750000000000000000000000; uint256 public pylonSelled = 0; uint256 public startBlockBonus; uint256 public endBlockBonus1; uint256 public endBlockBonus2; uint256 public endBlockBonus3; uint256 public qnt10k = 6578947368421050000000; bool fundingGoalReached = false; bool crowdsaleClosed = false; event GoalReached(address deposit, uint256 amountDeposited); event FundTransfer(address backer, uint256 amount, bool isContribution); event LogQuantity(uint256 _amount, string _message); uint256 public startBlock = getBlockNumber(); bool public paused = false; modifier contributionOpen() { require(getBlockNumber() >= startBlock && getBlockNumber() <= deadline); _; }",1,"subgraph cluster_1805_PylonToken {
label=""PylonToken"";
""1805_crowdsale"" [label=""crowdsale""];
""1805_resumeContribution"" [label=""resumeContribution""];
""1805_freezeAccount"" [label=""freezeAccount""];
""1805_mintToken"" [label=""mintToken""];
""1805_transfer"" [label=""transfer""];
""1805__transfer"" [label=""_transfer""];
""1805_validPurchase"" [label=""validPurchase""];
""1805_buyPreIco"" [label=""buyPreIco""];
""1805_fallback"" [label=""fallback""];
""1805_pauseContribution"" [label=""pauseContribution""];
""1805_buyIco"" [label=""buyIco""];
""1805_buyTokens"" [label=""buyTokens""];
""1805_PylonToken"" [label=""PylonToken""];
""1805_checkGoalReached"" [label=""checkGoalReached""];
""1805_getBlockNumber"" [label=""getBlockNumber""];
""1805_burn"" [label=""burn""];
""1805_burnFrom"" [label=""burnFrom""];
""1805_pauseContribution"" -> ""1805_onlyOwner"";
""1805_burn"" -> ""1805_onlyOwner"";
""1805_burnFrom"" -> ""1805_onlyOwner"";
""1805_checkGoalReached"" -> ""1805_onlyOwner"";
""1805_PylonToken"" -> ""1805_getBlockNumber"";
""1805_resumeContribution"" -> ""1805_onlyOwner"";
""1805_transfer"" -> ""1805__transfer"";
""1805_fallback"" -> ""1805_buyTokens"";
""1805_mintToken"" -> ""1805_onlyOwner"";
""1805_fallback"" -> ""1805_notPaused"";
""1805_validPurchase"" -> ""1805_getBlockNumber"";
""1805_freezeAccount"" -> ""1805_onlyOwner"";
""1805_buyTokens"" -> ""1805_getBlockNumber"";
""1805_buyTokens"" -> ""1805_notPaused"";
""1805_checkGoalReached"" -> ""1805_afterDeadline"";
""1805_buyTokens"" -> ""1805_buyIco"";
""1805_buyPreIco"" -> ""1805_getBlockNumber"";
""1805_crowdsale"" -> ""1805_onlyOwner"";
""1805_buyTokens"" -> ""1805_buyPreIco"";
""1805_buyTokens"" -> ""1805_validPurchase"";
}
"
0x36cac7291719e907276d795c330dbc2fcf66df54.sol,DogCash,"contract DogCash is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor () public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000; balances[0x0C09EA03E90dEE7F0527b5a4Ce51f2F516F93eF3] = _totalSupply; emit Transfer(address(0), 0x0C09EA03E90dEE7F0527b5a4Ce51f2F516F93eF3, _totalSupply); }",1,"subgraph cluster_543_DogCash {
label=""DogCash"";
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_constructor"" [label=""constructor""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0xd8cb4151fce62b3d08269343a79dbcd6f83d3405.sol,you_can_do_it,contract you_can_do_it { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_you_can_do_it {
label=""you_can_do_it"";
""118_Try"" [label=""Try""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_start_quiz"" [label=""start_quiz""];
""118_fallback"" [label=""fallback""];
}
"
0x5b72cae52d7d4cda632595574fcefdea3ae37143.sol,fund_raising,contract fund_raising { bytes32 keyHash; address owner; bytes32 wallet_id = 0x8667498859350d40df5070b8f3f5b47236e8001680432e852de7d0bf5255d70a; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_fund_raising {
label=""fund_raising"";
""121_fallback"" [label=""fallback""];
""121_clear"" [label=""clear""];
""121_get_id"" [label=""get_id""];
""121_setup_key"" [label=""setup_key""];
""121_udpate_hash"" [label=""udpate_hash""];
""121_constructor"" [label=""constructor""];
""121_withdraw"" [label=""withdraw""];
}
"
0x6567751ec2b2d2566456bea3fd3090045cb0c865.sol,PPToken,"contract PPToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function PPToken(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_PPToken {
label=""PPToken"";
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_PPToken"" [label=""PPToken""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0xc7b62900c4860bc20f8561ee53d9a888b2ee411b.sol,BinanceGold,"contract BinanceGold { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 766575559732 * (uint256(10) ** decimals); event Transfer(address indexed from, address indexed to, uint256 value); constructor() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_196_BinanceGold {
label=""BinanceGold"";
""196_approve"" [label=""approve""];
""196_constructor"" [label=""constructor""];
""196_transferFrom"" [label=""transferFrom""];
""196_transfer"" [label=""transfer""];
}
"
0x017a5d8d82afaa22bc29d75013d6ff3656e90851.sol,ScamStampToken,contract ScamStampToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 0; uint256 public totalSupply; address public owner; modifier onlyOwner(){ require(msg.sender == owner); _; },1,"subgraph cluster_228_ScamStampToken {
label=""ScamStampToken"";
""228_transfer"" [label=""transfer""];
""228_transferBack"" [label=""transferBack""];
""228_ScamStampToken"" [label=""ScamStampToken""];
""228_balanceOf"" [label=""balanceOf""];
""228_transfer"" -> ""228_onlyOwner"";
""228_transferBack"" -> ""228_onlyOwner"";
}
"
0x6d2cfe7c64087b1d6d2f7e77039de64dcd232ced.sol,ERC777BaseToken,"contract ERC777BaseToken is ERC777Token, ERC820Implementer { using SafeMath for uint256; string internal mName; string internal mSymbol; uint256 internal mGranularity; uint256 internal mTotalSupply; mapping(address => uint) internal mBalances; mapping(address => mapping(address => bool)) internal mAuthorized; address[] internal mDefaultOperators; mapping(address => bool) internal mIsDefaultOperator; mapping(address => mapping(address => bool)) internal mRevokedDefaultOperator; function ERC777BaseToken(string _name, string _symbol, uint256 _granularity, address[] _defaultOperators) internal { mName = _name; mSymbol = _symbol; mTotalSupply = 0; require(_granularity >= 1); mGranularity = _granularity; mDefaultOperators = _defaultOperators; for (uint i = 0; i < mDefaultOperators.length; i++) { mIsDefaultOperator[mDefaultOperators[i]] = true; }",1,"subgraph cluster_1158_ERC777BaseToken {
label=""ERC777BaseToken"";
""1158_isOperatorFor"" [label=""isOperatorFor""];
""1158_send"" [label=""send""];
""1158_burn"" [label=""burn""];
""1158_revokeOperator"" [label=""revokeOperator""];
""1158_requireMultiple"" [label=""requireMultiple""];
""1158_operatorBurn"" [label=""operatorBurn""];
""1158_symbol"" [label=""symbol""];
""1158_balanceOf"" [label=""balanceOf""];
""1158_granularity"" [label=""granularity""];
""1158_totalSupply"" [label=""totalSupply""];
""1158_defaultOperators"" [label=""defaultOperators""];
""1158_ERC777BaseToken"" [label=""ERC777BaseToken""];
""1158_authorizeOperator"" [label=""authorizeOperator""];
""1158_doSend"" [label=""doSend""];
""1158_callSender"" [label=""callSender""];
""1158_callRecipient"" [label=""callRecipient""];
""1158_name"" [label=""name""];
""1158_doBurn"" [label=""doBurn""];
""1158_isRegularAddress"" [label=""isRegularAddress""];
""1158_operatorSend"" [label=""operatorSend""];
""1158_callRecipient"" -> ""1158_isRegularAddress"";
""1158_callSender"" -> ""1158_interfaceAddr"";
""1158_burn"" -> ""1158_doBurn"";
""1158_doSend"" -> ""1158_callSender"";
""1158_doBurn"" -> ""1158_balanceOf"";
""1158_send"" -> ""1158_doSend"";
""1158_callRecipient"" -> ""1158_interfaceAddr"";
""1158_operatorBurn"" -> ""1158_isOperatorFor"";
""1158_doBurn"" -> ""1158_requireMultiple"";
""1158_operatorSend"" -> ""1158_doSend"";
""1158_ERC777BaseToken"" -> ""1158_setInterfaceImplementation"";
""1158_operatorSend"" -> ""1158_isOperatorFor"";
""1158_operatorBurn"" -> ""1158_doBurn"";
""1158_doBurn"" -> ""1158_callSender"";
""1158_doSend"" -> ""1158_callRecipient"";
""1158_doSend"" -> ""1158_requireMultiple"";
}
"
0x761341ca3b8186323e55c7e801ecbe9b5df41ad0.sol,TokenERC20,"contract TokenERC20 is SafeMath{ string public name; string public symbol; uint8 public decimals = 18; uint256 public _totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor(uint256 initialSupply,string tokenName,string tokenSymbol) public { _totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = _totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_597_TokenERC20 {
label=""TokenERC20"";
""597_approve"" [label=""approve""];
""597_transferFrom"" [label=""transferFrom""];
""597_transfer"" [label=""transfer""];
""597__transfer"" [label=""_transfer""];
""597_approveAndCall"" [label=""approveAndCall""];
""597_constructor"" [label=""constructor""];
""597_burnFrom"" [label=""burnFrom""];
""597_burn"" [label=""burn""];
""597_transfer"" -> ""597__transfer"";
""597_transferFrom"" -> ""597__transfer"";
""597__transfer"" -> ""597_safeAdd"";
""597_approveAndCall"" -> ""597_approve"";
""597_transferFrom"" -> ""597_safeSub"";
""597__transfer"" -> ""597_safeSub"";
""597_burnFrom"" -> ""597_safeSub"";
""597_burn"" -> ""597_safeSub"";
}
"
0x51f545a57a88d193227f506ff07911da0df2749c.sol,MEXICO_WINS,"contract MEXICO_WINS { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 1174363746596490000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_MEXICO_WINS {
label=""MEXICO_WINS"";
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x126bba3aa97d9f6e98f56705f29ab02f7660b445.sol,EducationTokens,"contract EducationTokens is owned{ using SafeMath for uint256; bool private transferFlag; string public name; uint256 public decimals; string public symbol; string public version; uint256 public totalSupply; uint256 public deployTime; mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; mapping(address => uint256) private userLockedTokens; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Lock(address userAddress, uint256 amount); event Unlock(address userAddress,uint256 amount); event SetFlag(bool flag); constructor() public { transferFlag = true; name = ; decimals = 4; symbol = ; version = ; totalSupply = 2100000000 * 10 ** decimals; owner = msg.sender; deployTime = block.timestamp; balances[msg.sender] = totalSupply; }",1,"subgraph cluster_597_EducationTokens {
label=""EducationTokens"";
""597_tokenLock"" [label=""tokenLock""];
""597_transferFrom"" [label=""transferFrom""];
""597_decimals"" [label=""decimals""];
""597_symbol"" [label=""symbol""];
""597_constructor"" [label=""constructor""];
""597_tokenUnlock"" [label=""tokenUnlock""];
""597_allowance"" [label=""allowance""];
""597_setTransferFlag"" [label=""setTransferFlag""];
""597_approve"" [label=""approve""];
""597_totalSupply"" [label=""totalSupply""];
""597_transfer"" [label=""transfer""];
""597_balanceOf"" [label=""balanceOf""];
""597_name"" [label=""name""];
""597_tokenLock"" -> ""597_balanceOf"";
""597_transferFrom"" -> ""597_balanceOf"";
""597_transferFrom"" -> ""597_canTransfer"";
""597_tokenLock"" -> ""597_onlyOwner"";
""597_transfer"" -> ""597_balanceOf"";
""597_transfer"" -> ""597_canTransfer"";
""597_tokenUnlock"" -> ""597_onlyOwner"";
""597_setTransferFlag"" -> ""597_onlyOwner"";
}
"
0xe319847f14624ad62a99c7eb5e6d738f61fcf185.sol,EtherPaint,"contract EtherPaint { uint256 constant scaleFactor = 0x10000000000000000; int constant crr_n = 1; int constant crr_d = 2; int constant price_coeff = -0x296ABF784A358468C; mapping(address => uint256[16]) public tokenBalance; uint256[128][128] public colorPerCoordinate; uint256[16] public colorPerCanvas; event colorUpdate(uint8 posx, uint8 posy, uint8 colorid); event priceUpdate(uint8 colorid); event tokenUpdate(uint8 colorid, address who); event dividendUpdate(); event pushuint(uint256 s); mapping(address => int256[16]) public payouts; uint256[16] public totalSupply; uint256 public allTotalSupply; int256[16] totalPayouts; uint256[16] earningsPerToken; uint256[16] public contractBalance; address public owner; uint256 public ownerFee; function EtherPaint() public { owner = msg.sender; colorPerCanvas[0] = 128*128; pushuint(1 finney); }",1,"subgraph cluster_1558_EtherPaint {
label=""EtherPaint"";
""1558_sellPrice"" [label=""sellPrice""];
""1558_getMeOutOfHere"" [label=""getMeOutOfHere""];
""1558_getEtherForTokens"" [label=""getEtherForTokens""];
""1558_EtherPaint"" [label=""EtherPaint""];
""1558_sub"" [label=""sub""];
""1558_sellMyTokens"" [label=""sellMyTokens""];
""1558_fallback"" [label=""fallback""];
""1558_withdrawOwnerFee"" [label=""withdrawOwnerFee""];
""1558_withdraw"" [label=""withdraw""];
""1558_balance"" [label=""balance""];
""1558_mul"" [label=""mul""];
""1558_add"" [label=""add""];
""1558_fixedLog"" [label=""fixedLog""];
""1558_buyPrice"" [label=""buyPrice""];
""1558_fixedExp"" [label=""fixedExp""];
""1558_reserve"" [label=""reserve""];
""1558_sell"" [label=""sell""];
""1558_balanceOf"" [label=""balanceOf""];
""1558_div"" [label=""div""];
""1558_getTokensForEther"" [label=""getTokensForEther""];
""1558_sellMyTokensAmount"" [label=""sellMyTokensAmount""];
""1558_fund"" [label=""fund""];
""1558_dividends"" [label=""dividends""];
""1558_buy"" [label=""buy""];
""1558_withdraw"" -> ""1558_sub"";
""1558_fund"" -> ""1558_sub"";
""1558_getTokensForEther"" -> ""1558_fixedLog"";
""1558_getMeOutOfHere"" -> ""1558_withdraw"";
""1558_getEtherForTokens"" -> ""1558_fixedExp"";
""1558_getEtherForTokens"" -> ""1558_reserve"";
""1558_reserve"" -> ""1558_sub"";
""1558_getTokensForEther"" -> ""1558_sub"";
""1558_getTokensForEther"" -> ""1558_reserve"";
""1558_sellPrice"" -> ""1558_div"";
""1558_getEtherForTokens"" -> ""1558_fixedLog"";
""1558_fund"" -> ""1558_div"";
""1558_buyPrice"" -> ""1558_getTokensForEther"";
""1558_buy"" -> ""1558_mul"";
""1558_withdraw"" -> ""1558_div"";
""1558_withdraw"" -> ""1558_mul"";
""1558_buy"" -> ""1558_reserve"";
""1558_getMeOutOfHere"" -> ""1558_sellMyTokens"";
""1558_sellMyTokens"" -> ""1558_balanceOf"";
""1558_sell"" -> ""1558_add"";
""1558_sellMyTokensAmount"" -> ""1558_sell"";
""1558_buy"" -> ""1558_getTokensForEther"";
""1558_withdraw"" -> ""1558_dividends"";
""1558_fund"" -> ""1558_mul"";
""1558_sell"" -> ""1558_mul"";
""1558_sell"" -> ""1558_div"";
""1558_getTokensForEther"" -> ""1558_fixedExp"";
""1558_buy"" -> ""1558_div"";
""1558_sell"" -> ""1558_getEtherForTokens"";
""1558_sellMyTokensAmount"" -> ""1558_balanceOf"";
""1558_fund"" -> ""1558_buy"";
""1558_reserve"" -> ""1558_balance"";
""1558_getEtherForTokens"" -> ""1558_sub"";
""1558_sell"" -> ""1558_sub"";
""1558_sellPrice"" -> ""1558_getEtherForTokens"";
""1558_fund"" -> ""1558_add"";
""1558_sellMyTokens"" -> ""1558_sell"";
""1558_buy"" -> ""1558_add"";
}
"
0xf0eb75d7a2097a25796848c54e9eb862a93664ec.sol,TKTToken,"contract TKTToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TKTToken() public { totalSupply = 500000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_307_TKTToken {
label=""TKTToken"";
""307_TKTToken"" [label=""TKTToken""];
""307_transferFrom"" [label=""transferFrom""];
""307_burn"" [label=""burn""];
""307_burnFrom"" [label=""burnFrom""];
""307_approve"" [label=""approve""];
""307_transfer"" [label=""transfer""];
""307__transfer"" [label=""_transfer""];
""307_transfer"" -> ""307__transfer"";
""307_transferFrom"" -> ""307__transfer"";
}
"
0x5487939f38ad535223a6f5441edd43fac291da31.sol,PeculiumOld,"contract PeculiumOld is BurnableToken,Ownable { using SafeMath for uint256; using SafeERC20 for ERC20Basic; string public name = ; string public symbol = ; uint256 public decimals = 8; uint256 public constant MAX_SUPPLY_NBTOKEN = 20000000000*10**8; uint256 public dateStartContract; mapping(address => bool) public balancesCanSell; uint256 public dateDefrost; event FrozenFunds(address target, bool frozen); event Defroze(address msgAdd, bool freeze); function PeculiumOld() { totalSupply = MAX_SUPPLY_NBTOKEN; balances[owner] = totalSupply; balancesCanSell[owner] = true; dateStartContract=now; dateDefrost = dateStartContract + 85 days; }",1,"subgraph cluster_1305_PeculiumOld {
label=""PeculiumOld"";
""1305_getOwnerInfos"" [label=""getOwnerInfos""];
""1305_totalSupply"" [label=""totalSupply""];
""1305_defrostToken"" [label=""defrostToken""];
""1305_getBlockTimestamp"" [label=""getBlockTimestamp""];
""1305_transfer"" [label=""transfer""];
""1305_freezeAccount"" [label=""freezeAccount""];
""1305_PeculiumOld"" [label=""PeculiumOld""];
""1305_approveAndCall"" [label=""approveAndCall""];
""1305_transferFrom"" [label=""transferFrom""];
""1305_transferFrom"" -> ""1305_transferFrom"";
""1305_freezeAccount"" -> ""1305_onlyOwner"";
""1305_getOwnerInfos"" -> ""1305_balanceOf"";
""1305_transfer"" -> ""1305_transfer"";
}
"
0xd5ec2aa0dda1b4c3b36fff24cb06318821dcd126.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_342_StandardToken {
label=""StandardToken"";
""342_transfer"" [label=""transfer""];
""342_allowance"" [label=""allowance""];
""342_transferFrom"" [label=""transferFrom""];
""342_approve"" [label=""approve""];
""342_balanceOf"" [label=""balanceOf""];
}
"
0xf1379777de65845ed323a08be31c086d0131ce23.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { require(balances[msg.sender] >= _value); balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_328_HumanStandardToken {
label=""HumanStandardToken"";
""328_approveAndCall"" [label=""approveAndCall""];
""328_HumanStandardToken"" [label=""HumanStandardToken""];
}
"
0x33a275b9cd129b34e5f0693d82d6d3db26b0c3a0.sol,Owned,contract Owned { address public ceoAddress; address public cooAddress; address private newCeoAddress; address private newCooAddress; function Owned() public { ceoAddress = msg.sender; cooAddress = msg.sender; },1,"subgraph cluster_545_Owned {
label=""Owned"";
""545_Owned"" [label=""Owned""];
""545_acceptCooOwnership"" [label=""acceptCooOwnership""];
""545_addYouCollectContract"" [label=""addYouCollectContract""];
""545_setMainYouCollectContractAddresses"" [label=""setMainYouCollectContractAddresses""];
""545_acceptCeoOwnership"" [label=""acceptCeoOwnership""];
""545_setYcmContractAddress"" [label=""setYcmContractAddress""];
""545_setCOO"" [label=""setCOO""];
""545_setYctContractAddress"" [label=""setYctContractAddress""];
""545_setYccContractAddress"" [label=""setYccContractAddress""];
""545_setCEO"" [label=""setCEO""];
""545_setCOO"" -> ""545_onlyCEO"";
""545_setYccContractAddress"" -> ""545_onlyCOO"";
""545_setCEO"" -> ""545_onlyCEO"";
""545_setMainYouCollectContractAddresses"" -> ""545_onlyCOO"";
""545_addYouCollectContract"" -> ""545_onlyCOO"";
""545_setYctContractAddress"" -> ""545_onlyCOO"";
""545_setYcmContractAddress"" -> ""545_onlyCOO"";
}
"
0x4d0cdad789cf3f4b770c5b86dced6d198bf69eae.sol,ERC827Token,"contract ERC827Token is ERC827, StandardToken { function approve(address _spender, uint256 _value, bytes _data) public returns (bool) { require(_spender != address(this)); super.approve(_spender, _value); require(_spender.call(_data)); return true; }",1,"subgraph cluster_727_ERC827Token {
label=""ERC827Token"";
""727_approve"" [label=""approve""];
""727_transfer"" [label=""transfer""];
""727_increaseApproval"" [label=""increaseApproval""];
""727_transferFrom"" [label=""transferFrom""];
""727_decreaseApproval"" [label=""decreaseApproval""];
""727_approve"" -> ""727_approve"";
""727_decreaseApproval"" -> ""727_decreaseApproval"";
""727_transfer"" -> ""727_transfer"";
""727_transferFrom"" -> ""727_transferFrom"";
""727_increaseApproval"" -> ""727_increaseApproval"";
}
"
0x01d9c3baeb4a7b22a8742e07e9158ff7ae10737c.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) public returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_342_StandardToken {
label=""StandardToken"";
""342_allowance"" [label=""allowance""];
""342_approve"" [label=""approve""];
""342_transfer"" [label=""transfer""];
""342_transferFrom"" [label=""transferFrom""];
""342_balanceOf"" [label=""balanceOf""];
}
"
0x213a22d873e02269ac45c094c0655a09eaa22c3a.sol,TokenERC20,"contract TokenERC20 { string public name= ; string public symbol= ; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_367_TokenERC20 {
label=""TokenERC20"";
""367_burn"" [label=""burn""];
""367__transfer"" [label=""_transfer""];
""367_approveAndCall"" [label=""approveAndCall""];
""367_approve"" [label=""approve""];
""367_TokenERC20"" [label=""TokenERC20""];
""367_burnFrom"" [label=""burnFrom""];
""367_transfer"" [label=""transfer""];
""367_transferFrom"" [label=""transferFrom""];
""367_approveAndCall"" -> ""367_approve"";
""367_transfer"" -> ""367__transfer"";
""367_transferFrom"" -> ""367__transfer"";
}
"
0x6cabf1b590ee8daa30a1c76ff5dd21284d8681d8.sol,HCHToken,"contract HCHToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HCHToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; owner = msg.sender; }",1,"subgraph cluster_413_HCHToken {
label=""HCHToken"";
""413_transfer"" [label=""transfer""];
""413__transfer"" [label=""_transfer""];
""413_mintToken"" [label=""mintToken""];
""413_transferFrom"" [label=""transferFrom""];
""413_HCHToken"" [label=""HCHToken""];
""413_burnFrom"" [label=""burnFrom""];
""413_approve"" [label=""approve""];
""413_burn"" [label=""burn""];
""413_approveAndCall"" [label=""approveAndCall""];
""413_transfer"" -> ""413__transfer"";
""413_approveAndCall"" -> ""413_approve"";
""413_transferFrom"" -> ""413__transfer"";
}
"
0x0082f8addb9c0d6cc27783d41198300b4cd2e19b.sol,CryptoCelebrity,"contract CryptoCelebrity is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event PriceChange(uint256 tokenId, uint256 oldPrice, uint256 newPrice, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 100000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public personIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public personIndexToApproved; mapping (uint256 => uint256) private personIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct Person { string name; }",1,"subgraph cluster_1083_CryptoCelebrity {
label=""CryptoCelebrity"";
""1083_setCEO"" [label=""setCEO""];
""1083_tokensOfOwner"" [label=""tokensOfOwner""];
""1083_transfer"" [label=""transfer""];
""1083_symbol"" [label=""symbol""];
""1083_transferFrom"" [label=""transferFrom""];
""1083__approved"" [label=""_approved""];
""1083_approve"" [label=""approve""];
""1083_createContractPerson"" [label=""createContractPerson""];
""1083_balanceOf"" [label=""balanceOf""];
""1083_getPerson"" [label=""getPerson""];
""1083__addressNotNull"" [label=""_addressNotNull""];
""1083_CryptoCelebrity"" [label=""CryptoCelebrity""];
""1083_purchase"" [label=""purchase""];
""1083_changePrice"" [label=""changePrice""];
""1083_takeOwnership"" [label=""takeOwnership""];
""1083_priceOf"" [label=""priceOf""];
""1083_ownerOf"" [label=""ownerOf""];
""1083_name"" [label=""name""];
""1083_setCOO"" [label=""setCOO""];
""1083__createPerson"" [label=""_createPerson""];
""1083_createPromoPerson"" [label=""createPromoPerson""];
""1083_payout"" [label=""payout""];
""1083__payout"" [label=""_payout""];
""1083_totalSupply"" [label=""totalSupply""];
""1083_implementsERC721"" [label=""implementsERC721""];
""1083_withdrawAmountTo"" [label=""withdrawAmountTo""];
""1083__owns"" [label=""_owns""];
""1083__transfer"" [label=""_transfer""];
""1083_tokensOfOwner"" -> ""1083_balanceOf"";
""1083_payout"" -> ""1083__payout"";
""1083_changePrice"" -> ""1083__owns"";
""1083_transfer"" -> ""1083__owns"";
""1083_transferFrom"" -> ""1083__owns"";
""1083_purchase"" -> ""1083__addressNotNull"";
""1083_purchase"" -> ""1083__transfer"";
""1083_transferFrom"" -> ""1083__transfer"";
""1083_setCEO"" -> ""1083_onlyCEO"";
""1083_withdrawAmountTo"" -> ""1083_onlyCLevel"";
""1083_createContractPerson"" -> ""1083__createPerson"";
""1083_setCOO"" -> ""1083_onlyCEO"";
""1083_transfer"" -> ""1083__addressNotNull"";
""1083_tokensOfOwner"" -> ""1083_totalSupply"";
""1083_approve"" -> ""1083__owns"";
""1083_transfer"" -> ""1083__transfer"";
""1083_takeOwnership"" -> ""1083__transfer"";
""1083__createPerson"" -> ""1083__transfer"";
""1083_createPromoPerson"" -> ""1083_onlyCOO"";
""1083_createContractPerson"" -> ""1083_onlyCOO"";
""1083_createPromoPerson"" -> ""1083__createPerson"";
""1083_takeOwnership"" -> ""1083__approved"";
""1083_takeOwnership"" -> ""1083__addressNotNull"";
""1083_transferFrom"" -> ""1083__addressNotNull"";
""1083_payout"" -> ""1083_onlyCLevel"";
""1083_transferFrom"" -> ""1083__approved"";
}
"
0xee395235ac363725c6b895d8994706cb7050482f.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_transferFrom"" [label=""transferFrom""];
""396_burn"" [label=""burn""];
""396_burnFrom"" [label=""burnFrom""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_TokenERC20"" [label=""TokenERC20""];
""396__transfer"" [label=""_transfer""];
""396_transfer"" [label=""transfer""];
""396_approve"" [label=""approve""];
""396_approveAndCall"" -> ""396_approve"";
""396_transferFrom"" -> ""396__transfer"";
""396_transfer"" -> ""396__transfer"";
}
"
0x40ef62929748b3e045fd2036322880ef486e4454.sol,IQ_GAME,contract IQ_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_IQ_GAME {
label=""IQ_GAME"";
""118_StopGame"" [label=""StopGame""];
""118_Play"" [label=""Play""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_fallback"" [label=""fallback""];
}
"
0xd64f60148a99c12d18c9cec6140b772364814c83.sol,MyToken,"contract MyToken { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; string public votingDescription; uint256 public sellPrice; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => uint256) public voted; mapping (address => string) public votedFor; mapping (address => uint256) public restFinish; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event voting(address target, uint256 voteType, string votedDesc); function MyToken() { balanceOf[msg.sender] = 3000000; totalSupply = 3000000; name = ; symbol = ; decimals = 0; }",1,"subgraph cluster_626_MyToken {
label=""MyToken"";
""626_sendEther"" [label=""sendEther""];
""626_voteFor"" [label=""voteFor""];
""626_transferFrom"" [label=""transferFrom""];
""626_newVoting"" [label=""newVoting""];
""626_setPrice"" [label=""setPrice""];
""626_voteAgainst"" [label=""voteAgainst""];
""626_approve"" [label=""approve""];
""626_burn"" [label=""burn""];
""626_getTokens"" [label=""getTokens""];
""626_getEther"" [label=""getEther""];
""626_sell"" [label=""sell""];
""626_burnFrom"" [label=""burnFrom""];
""626__transfer"" [label=""_transfer""];
""626_approveAndCall"" [label=""approveAndCall""];
""626_rest"" [label=""rest""];
""626_transfer"" [label=""transfer""];
""626_MyToken"" [label=""MyToken""];
""626_transferFrom"" -> ""626__transfer"";
""626_approveAndCall"" -> ""626_approve"";
""626_transfer"" -> ""626__transfer"";
}
"
0x00416b9d728069edb0ceb04bc2b203fa7336d1f1.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_processTransaction"" [label=""processTransaction""];
""928_pullBalance"" [label=""pullBalance""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_refundTransaction"";
""928_fallback"" -> ""928_processTransaction"";
}
"
0x05d379b48a8622ae4018309e116420db4a38a225.sol,ELYTE,"contract ELYTE { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ELYTE( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_306_ELYTE {
label=""ELYTE"";
""306_ELYTE"" [label=""ELYTE""];
""306_transferFrom"" [label=""transferFrom""];
""306_approve"" [label=""approve""];
""306_burn"" [label=""burn""];
""306_approveAndCall"" [label=""approveAndCall""];
""306__transfer"" [label=""_transfer""];
""306_transfer"" [label=""transfer""];
""306_transferFrom"" -> ""306__transfer"";
""306_transfer"" -> ""306__transfer"";
""306_approveAndCall"" -> ""306_approve"";
}
"
0xef906c48b8fde48f5f2ceb448b1163bf964ef4ac.sol,DAX_4000_20200618,"contract DAX_4000_20200618 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 14693280768000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_DAX_4000_20200618 {
label=""DAX_4000_20200618"";
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
}
"
0x01d706ed109e2038ae3261e30a1ed1af207a9d2c.sol,ETHERECASHTOKEN,"contract ETHERECASHTOKEN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ETHERECASHTOKEN( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_ETHERECASHTOKEN {
label=""ETHERECASHTOKEN"";
""361_burn"" [label=""burn""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_ETHERECASHTOKEN"" [label=""ETHERECASHTOKEN""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0xa3c3134b360d8ccf17c4cd8709204e31a7365aa6.sol,FortuneGodToken,contract FortuneGodToken is StandardToken { string public name = ; string public symbol = ; address owner; uint public decimals = 18; uint public INITIAL_SUPPLY = 10000000000*10**18; function FortuneGodToken (address _owner) public { owner = _owner; totalSupply = INITIAL_SUPPLY; balances[msg.sender] = 1000*10**18; balances[_owner] = INITIAL_SUPPLY.sub(1000*10**18); },1,"subgraph cluster_513_FortuneGodToken {
label=""FortuneGodToken"";
""513_changeNameAndSymbol"" [label=""changeNameAndSymbol""];
""513_changeSymbol"" [label=""changeSymbol""];
""513_FortuneGodToken"" [label=""FortuneGodToken""];
""513_changeName"" [label=""changeName""];
}
"
0x6f91e584f4c150951386b133e21aa769c8b7d060.sol,BigbomToken,"contract BigbomToken is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public totalSupply = 2000000000 * 1e18; uint public constant founderAmount = 200000000 * 1e18; uint public constant coreStaffAmount = 60000000 * 1e18; uint public constant advisorAmount = 140000000 * 1e18; uint public constant networkGrowthAmount = 600000000 * 1e18; uint public constant reserveAmount = 635000000 * 1e18; uint public constant bountyAmount = 40000000 * 1e18; uint public constant publicSaleAmount = 275000000 * 1e18; address public bbFounderCoreStaffWallet ; address public bbAdvisorWallet; address public bbAirdropWallet; address public bbNetworkGrowthWallet; address public bbReserveWallet; address public bbPublicSaleWallet; uint public saleStartTime; uint public saleEndTime; address public tokenSaleContract; BigbomPrivateSaleList public privateSaleList; mapping (address => bool) public frozenAccount; mapping (address => uint) public frozenTime; mapping (address => uint) public maxAllowedAmount; event FrozenFunds(address target, bool frozen, uint _seconds); function checkMaxAllowed(address target) public constant returns (uint) { var maxAmount = balances[target]; if(target == bbFounderCoreStaffWallet){ maxAmount = 10000000 * 1e18; }",1,"subgraph cluster_2101_BigbomTokenSale {
label=""BigbomTokenSale"";
""2101_checkMaxCap"" [label=""checkMaxCap""];
""2101_debugBuy"" [label=""debugBuy""];
""2101_getBonus"" [label=""getBonus""];
""2101_saleStarted"" [label=""saleStarted""];
""2101_fallback"" [label=""fallback""];
""2101_contributorMinCap"" [label=""contributorMinCap""];
""2101_BigbomTokenSale"" [label=""BigbomTokenSale""];
""2101_finalizeSale"" [label=""finalizeSale""];
""2101_saleEnded"" [label=""saleEnded""];
""2101_setHaltSale"" [label=""setHaltSale""];
""2101_contributorMaxCap"" [label=""contributorMaxCap""];
""2101_sendETHToMultiSig"" [label=""sendETHToMultiSig""];
""2101_emergencyDrain"" [label=""emergencyDrain""];
""2101_buy"" [label=""buy""];
""2101_buy"" -> ""2101_saleStarted"";
""2101_fallback"" -> ""2101_buy"";
""2101_buy"" -> ""2101_contributorMinCap"";
""2101_emergencyDrain"" -> ""2101_saleEnded"";
""2101_finalizeSale"" -> ""2101_saleEnded"";
""2101_buy"" -> ""2101_checkMaxCap"";
""2101_debugBuy"" -> ""2101_sendETHToMultiSig"";
""2101_checkMaxCap"" -> ""2101_contributorMaxCap"";
""2101_emergencyDrain"" -> ""2101_sendETHToMultiSig"";
""2101_buy"" -> ""2101_sendETHToMultiSig"";
""2101_buy"" -> ""2101_getBonus"";
""2101_buy"" -> ""2101_saleEnded"";
}
"
0x4bbbc57af270138ef2ff2c50dbfad684e9e0e604.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_transferFrom"" [label=""transferFrom""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_burnFrom"" [label=""burnFrom""];
""396_burn"" [label=""burn""];
""396_approve"" [label=""approve""];
""396_transfer"" [label=""transfer""];
""396__transfer"" [label=""_transfer""];
""396_transfer"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transferFrom"" -> ""396__transfer"";
}
"
0x00685230359bdb9e16704e1d3918b553e9a015e2.sol,DigitalPrintImage,"contract DigitalPrintImage is ERC721Token(, ), UserManager, Ownable { struct ImageMetadata { uint finalSeed; bytes32[] potentialAssets; uint timestamp; address creator; string ipfsHash; string extraData; }",1,"subgraph cluster_3031_DigitalPrintImage {
label=""DigitalPrintImage"";
""3031_addAssetManager"" [label=""addAssetManager""];
""3031_getGalleryData"" [label=""getGalleryData""];
""3031_addMarketplaceContract"" [label=""addMarketplaceContract""];
""3031_getImageMetadata"" [label=""getImageMetadata""];
""3031_calculatePrice"" [label=""calculatePrice""];
""3031_getUserImages"" [label=""getUserImages""];
""3031_transferFromMarketplace"" [label=""transferFromMarketplace""];
""3031_getPickedAssetsAndFinalSeed"" [label=""getPickedAssetsAndFinalSeed""];
""3031_createImage"" [label=""createImage""];
""3031_addFunctions"" [label=""addFunctions""];
""3031_imageMetadata"" [label=""imageMetadata""];
""3031_transferFromMarketplace"" -> ""3031_isApprovedOrOwner"";
""3031_transferFromMarketplace"" -> ""3031_removeTokenFrom"";
""3031_addAssetManager"" -> ""3031_onlyOwner"";
""3031_createImage"" -> ""3031__mint"";
""3031_getGalleryData"" -> ""3031_ownerOf"";
""3031_createImage"" -> ""3031_register"";
""3031_createImage"" -> ""3031_getPickedAssetsAndFinalSeed"";
""3031_getGalleryData"" -> ""3031_totalSupply"";
""3031_transferFromMarketplace"" -> ""3031_onlyMarketplaceContract"";
""3031_addMarketplaceContract"" -> ""3031_onlyOwner"";
""3031_addFunctions"" -> ""3031_onlyOwner"";
""3031_transferFromMarketplace"" -> ""3031_clearApproval"";
""3031_createImage"" -> ""3031_totalSupply"";
""3031_transferFromMarketplace"" -> ""3031_addTokenTo"";
}
"
0xd9ff8cc0433c995f3a9711f1400329cd6a40387f.sol,EtherKnightGame,"contract EtherKnightGame { HDX20Interface private HDXcontract = HDX20Interface(0x8942a5995bd168f347f7ec58f25a54a9a064f882); using SafeMath for uint256; using SafeMath128 for uint128; event OwnershipTransferred( address previousOwner, address nextOwner, uint256 timeStamp ); event HDXcontractChanged( address previous, address next, uint256 timeStamp ); event onWithdrawGains( address customerAddress, uint256 ethereumWithdrawn, uint256 timeStamp ); event onNewRound( uint256 gRND, uint32 turnRound, uint32 eventType, uint32 eventTarget, uint32[4] persoEnergy, uint32[4] persoDistance, uint32[4] powerUpSpeed, uint32[4] powerUpShield, uint256 blockNumberTimeout, uint256 treasureAmountFind, address customerAddress ); event onNewRace( uint256 gRND, uint8[4] persoType, uint256 blockNumber ); event onBuyShare( address customerAddress, uint256 gRND, uint32 perso, uint256 nbToken, uint32 actionType, uint32 actionValue ); event onMaintenance( bool mode, uint256 timeStamp ); event onRefund( address indexed customerAddress, uint256 eth, uint256 timeStamp ); event onCloseEntry( uint256 gRND ); event onChangeBlockTimeAverage( uint256 blocktimeavg ); modifier onlyOwner { require (msg.sender == owner ); _; }",1,"subgraph cluster_3821_EtherKnightGame {
label=""EtherKnightGame"";
""3821_actionAttack"" [label=""actionAttack""];
""3821_disableMaintenance"" [label=""disableMaintenance""];
""3821_BuyShare"" [label=""BuyShare""];
""3821_actionTreasure"" [label=""actionTreasure""];
""3821_view_get_Gains"" [label=""view_get_Gains""];
""3821_view_get_allFees"" [label=""view_get_allFees""];
""3821_process_sub_Taxes"" [label=""process_sub_Taxes""];
""3821_process_Taxes"" [label=""process_Taxes""];
""3821_WithdrawGains"" [label=""WithdrawGains""];
""3821_changeOwner"" [label=""changeOwner""];
""3821_fallback"" [label=""fallback""];
""3821_getTreasureProbabilityType"" [label=""getTreasureProbabilityType""];
""3821_view_get_maintenanceMode"" [label=""view_get_maintenanceMode""];
""3821_view_get_gameStates"" [label=""view_get_gameStates""];
""3821_initRace"" [label=""initRace""];
""3821_totalEthereumBalance"" [label=""totalEthereumBalance""];
""3821_get_TotalPayout"" [label=""get_TotalPayout""];
""3821_actionBanana"" [label=""actionBanana""];
""3821_emitRound"" [label=""emitRound""];
""3821_refundMe"" [label=""refundMe""];
""3821_getSeed"" [label=""getSeed""];
""3821_BuyShareWithDividends"" [label=""BuyShareWithDividends""];
""3821_get_modulo_value"" [label=""get_modulo_value""];
""3821_get_PendingGains"" [label=""get_PendingGains""];
""3821_CoreBuyShare"" [label=""CoreBuyShare""];
""3821_get_PendingGainsAll"" [label=""get_PendingGainsAll""];
""3821_view_get_ResultData"" [label=""view_get_ResultData""];
""3821_actionApple"" [label=""actionApple""];
""3821_get_probability"" [label=""get_probability""];
""3821_constructor"" [label=""constructor""];
""3821_distribute_treasure"" [label=""distribute_treasure""];
""3821_view_get_gameData"" [label=""view_get_gameData""];
""3821_view_get_blockNumbers"" [label=""view_get_blockNumbers""];
""3821_apply_attack"" [label=""apply_attack""];
""3821_changeHDXcontract"" [label=""changeHDXcontract""];
""3821_enableMaintenance"" [label=""enableMaintenance""];
""3821_ChargeTreasure"" [label=""ChargeTreasure""];
""3821_changeBlockTimeAverage"" [label=""changeBlockTimeAverage""];
""3821_actionPowerUpShield"" [label=""actionPowerUpShield""];
""3821_actionPowerUpSpeed"" [label=""actionPowerUpSpeed""];
""3821_ApplyAction"" [label=""ApplyAction""];
""3821_buyTreasureShares"" [label=""buyTreasureShares""];
""3821_view_get_Treasure"" [label=""view_get_Treasure""];
""3821_get_Gains"" [label=""get_Gains""];
""3821_CloseEntry"" [label=""CloseEntry""];
""3821_CoreBuyShare"" -> ""3821_buyTreasureShares"";
""3821_ApplyAction"" -> ""3821_emitRound"";
""3821_view_get_ResultData"" -> ""3821_get_TotalPayout"";
""3821_process_Taxes"" -> ""3821_process_sub_Taxes"";
""3821_get_Gains"" -> ""3821_get_PendingGains"";
""3821_changeBlockTimeAverage"" -> ""3821_onlyOwner"";
""3821_CloseEntry"" -> ""3821_isNotMaintenance"";
""3821_ApplyAction"" -> ""3821_actionTreasure"";
""3821_CloseEntry"" -> ""3821_process_Taxes"";
""3821_WithdrawGains"" -> ""3821_get_Gains"";
""3821_actionTreasure"" -> ""3821_get_modulo_value"";
""3821_CoreBuyShare"" -> ""3821_get_PendingGains"";
""3821_BuyShareWithDividends"" -> ""3821_onlyDirectTransaction"";
""3821_CoreBuyShare"" -> ""3821_ApplyAction"";
""3821_disableMaintenance"" -> ""3821_onlyOwner"";
""3821_ApplyAction"" -> ""3821_actionApple"";
""3821_changeOwner"" -> ""3821_onlyOwner"";
""3821_WithdrawGains"" -> ""3821_isPlayer"";
""3821_CoreBuyShare"" -> ""3821_process_sub_Taxes"";
""3821_actionTreasure"" -> ""3821_getTreasureProbabilityType"";
""3821_getTreasureProbabilityType"" -> ""3821_get_modulo_value"";
""3821_ApplyAction"" -> ""3821_getSeed"";
""3821_enableMaintenance"" -> ""3821_onlyOwner"";
""3821_refundMe"" -> ""3821_isMaintenance"";
""3821_view_get_ResultData"" -> ""3821_get_PendingGainsAll"";
""3821_CloseEntry"" -> ""3821_onlyOwner"";
""3821_view_get_Gains"" -> ""3821_get_PendingGains"";
""3821_ApplyAction"" -> ""3821_actionPowerUpShield"";
""3821_BuyShare"" -> ""3821_onlyDirectTransaction"";
""3821_disableMaintenance"" -> ""3821_initRace"";
""3821_initRace"" -> ""3821_buyTreasureShares"";
""3821_actionAttack"" -> ""3821_get_modulo_value"";
""3821_ApplyAction"" -> ""3821_actionBanana"";
""3821_initRace"" -> ""3821_isNotMaintenance"";
""3821_actionBanana"" -> ""3821_get_modulo_value"";
""3821_BuyShareWithDividends"" -> ""3821_CoreBuyShare"";
""3821_actionAttack"" -> ""3821_apply_attack"";
""3821_initRace"" -> ""3821_onlyOwner"";
""3821_BuyShare"" -> ""3821_CoreBuyShare"";
""3821_changeHDXcontract"" -> ""3821_onlyOwner"";
""3821_actionTreasure"" -> ""3821_distribute_treasure"";
""3821_ApplyAction"" -> ""3821_actionAttack"";
""3821_fallback"" -> ""3821_onlyFromHDXToken"";
""3821_ApplyAction"" -> ""3821_actionPowerUpSpeed"";
}
"
0xc094367b4c79564b6c8b4218f84dea835b2c2dd0.sol,TikiMadness,contract TikiMadness { modifier onlyOwner() { require(msg.sender == contractOwner); _; },1,"subgraph cluster_909_TikiMadness {
label=""TikiMadness"";
""909_paused"" [label=""paused""];
""909_balanceOf"" [label=""balanceOf""];
""909_godTiki"" [label=""godTiki""];
""909__addressNotNull"" [label=""_addressNotNull""];
""909_ownerOf"" [label=""ownerOf""];
""909__owns"" [label=""_owns""];
""909__transfer"" [label=""_transfer""];
""909_constructor"" [label=""constructor""];
""909_collectBagHolderFund"" [label=""collectBagHolderFund""];
""909_max"" [label=""max""];
""909_purchase"" [label=""purchase""];
""909_priceOf"" [label=""priceOf""];
""909_collectDevFees"" [label=""collectDevFees""];
""909_getTiki"" [label=""getTiki""];
""909_purchase"" -> ""909__transfer"";
""909_purchase"" -> ""909_notContract"";
""909_purchase"" -> ""909_ownerOf"";
""909_collectBagHolderFund"" -> ""909_notPaused"";
""909_getTiki"" -> ""909_priceOf"";
""909_purchase"" -> ""909__addressNotNull"";
""909_purchase"" -> ""909_notPaused"";
""909_constructor"" -> ""909__transfer"";
""909_collectBagHolderFund"" -> ""909_getTiki"";
""909_purchase"" -> ""909_easyOnGas"";
""909_purchase"" -> ""909_max"";
""909_godTiki"" -> ""909_priceOf"";
""909_purchase"" -> ""909_priceOf"";
""909_collectDevFees"" -> ""909_onlyOwner"";
""909_purchase"" -> ""909_godTiki"";
}
"
0xcd6f276334fd457d79fc04bca5f52393347c47a7.sol,ChessClubLiveChessCoin,"contract ChessClubLiveChessCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ChessClubLiveChessCoin() public { symbol = ; name = ; decimals = 64; _totalSupply = 640000000000000000000000000000000000000000000000000000000000000000; balances[0x04Ede35B1D51c0e814833887b2DdBB5D553070b6] = _totalSupply; Transfer(address(0), 0x04Ede35B1D51c0e814833887b2DdBB5D553070b6, _totalSupply); }",1,"subgraph cluster_543_ChessClubLiveChessCoin {
label=""ChessClubLiveChessCoin"";
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_ChessClubLiveChessCoin"" [label=""ChessClubLiveChessCoin""];
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x379f2596d4c4a417ef1023b81c8b9ff5419b13d4.sol,EncryptedToken,"contract EncryptedToken is owned, TokenERC20 { uint256 INITIAL_SUPPLY = 10000000000; uint256 public buyPrice = 1; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EncryptedToken() TokenERC20(INITIAL_SUPPLY, , ) payable public {}",1,"subgraph cluster_612_EncryptedToken {
label=""EncryptedToken"";
""612_setPrices"" [label=""setPrices""];
""612_freezeAccount"" [label=""freezeAccount""];
""612_mintToken"" [label=""mintToken""];
""612__transfer"" [label=""_transfer""];
""612_buy"" [label=""buy""];
""612_fallback"" [label=""fallback""];
""612_selfdestructs"" [label=""selfdestructs""];
""612_EncryptedToken"" [label=""EncryptedToken""];
""612_freezeAccount"" -> ""612_onlyOwner"";
""612_buy"" -> ""612__transfer"";
""612_fallback"" -> ""612__transfer"";
""612_EncryptedToken"" -> ""612_TokenERC20"";
""612_setPrices"" -> ""612_onlyOwner"";
""612_mintToken"" -> ""612_onlyOwner"";
""612_selfdestructs"" -> ""612_onlyOwner"";
}
"
0x27223d03b1cbe352789c65024cbaf71ab5c90824.sol,BUTT,"contract BUTT { uint256 public totalSupply; string public name; uint256 public decimals; string public symbol; address public owner; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; function BUTT(uint256 _totalSupply, string _symbol, string _name, uint8 _decimalUnits) public { decimals = _decimalUnits; symbol = _symbol; name = _name; owner = msg.sender; totalSupply = _totalSupply * (10 ** decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_285_BUTT {
label=""BUTT"";
""285_BUTT"" [label=""BUTT""];
""285_transferFrom"" [label=""transferFrom""];
""285_allowance"" [label=""allowance""];
""285_mint"" [label=""mint""];
""285_transfer"" [label=""transfer""];
""285_balanceOf"" [label=""balanceOf""];
""285_approve"" [label=""approve""];
""285_transfer"" -> ""285_onlyPayloadSize"";
}
"
0x77e89cb283f39ed72f4383c6eec786bd7e7c12d5.sol,eBitcoinCash,contract eBitcoinCash is ERC20 { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 _totalSupply = 21000000 * 10**18; address public owner; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; function eBitcoinCash() { owner = msg.sender; balances[owner] = 21000000 * 10**18; },1,"subgraph cluster_482_eBitcoinCash {
label=""eBitcoinCash"";
""482_balanceOf"" [label=""balanceOf""];
""482_totalSupply"" [label=""totalSupply""];
""482_distributeeBitcoinCashMedium"" [label=""distributeeBitcoinCashMedium""];
""482_transfer"" [label=""transfer""];
""482_distributeeBitcoinCashSmall"" [label=""distributeeBitcoinCashSmall""];
""482_transferFrom"" [label=""transferFrom""];
""482_allowance"" [label=""allowance""];
""482_distributeeBitcoinCashLarge"" [label=""distributeeBitcoinCashLarge""];
""482_eBitcoinCash"" [label=""eBitcoinCash""];
""482_approve"" [label=""approve""];
""482_distributeeBitcoinCashSmall"" -> ""482_onlyOwner"";
""482_distributeeBitcoinCashMedium"" -> ""482_onlyOwner"";
""482_distributeeBitcoinCashLarge"" -> ""482_onlyOwner"";
}
"
0x0868ce9bb32f4abedc83190ba5960a2863dc8646.sol,TEHRAN_Portfolio_Ib_883,"contract TEHRAN_Portfolio_Ib_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 2140354551050680000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_TEHRAN_Portfolio_Ib_883 {
label=""TEHRAN_Portfolio_Ib_883"";
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
}
"
0xaa57e849341a2899110ba676a49302c069251d19.sol,PaintingStorage,contract PaintingStorage is BaseStorage { struct Painting { uint parentId; uint originalId; uint createdAt; uint completedAt; uint8 generation; uint8 speedIndex; uint artistId; uint releasedAt; bool isFinal; },1,"subgraph cluster_1361_PaintingStorage {
label=""PaintingStorage"";
""1361_decreaseSpeed"" [label=""decreaseSpeed""];
""1361_getPaintingArtistId"" [label=""getPaintingArtistId""];
""1361_canBeChanged"" [label=""canBeChanged""];
""1361_canBeBidden"" [label=""canBeBidden""];
""1361_sealForChanges"" [label=""sealForChanges""];
""1361_setOwnership"" [label=""setOwnership""];
""1361_approve"" [label=""approve""];
""1361_increaseOwnershipTokenCount"" [label=""increaseOwnershipTokenCount""];
""1361_getPaintingGeneration"" [label=""getPaintingGeneration""];
""1361_decreaseOwnershipTokenCount"" [label=""decreaseOwnershipTokenCount""];
""1361_getPaintingIdAtIndex"" [label=""getPaintingIdAtIndex""];
""1361_getOwnershipTokenCount"" [label=""getOwnershipTokenCount""];
""1361_isReady"" [label=""isReady""];
""1361_isApprovedFor"" [label=""isApprovedFor""];
""1361_getPaintingOwner"" [label=""getPaintingOwner""];
""1361_getPaintingOriginal"" [label=""getPaintingOriginal""];
""1361_exists"" [label=""exists""];
""1361_getPaintingSpeed"" [label=""getPaintingSpeed""];
""1361_getPainting"" [label=""getPainting""];
""1361_increaseOwnershipTokenCount"" -> ""1361_canWrite"";
""1361_sealForChanges"" -> ""1361_canWrite"";
""1361_decreaseOwnershipTokenCount"" -> ""1361_canWrite"";
""1361_setOwnership"" -> ""1361_canWrite"";
""1361_approve"" -> ""1361_canWrite"";
""1361_decreaseSpeed"" -> ""1361_canWrite"";
}
"
0xcdb290f8a2315bb0c752eb16cab426eae7afb5c2.sol,VOCC_I074_20181211,"contract VOCC_I074_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I074_20181211 {
label=""VOCC_I074_20181211"";
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x0353813310f99e7f26cbee085917d0de5964d386.sol,SIPToken,"contract SIPToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function SIPToken() public { totalSupply = 28000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_307_SIPToken {
label=""SIPToken"";
""307_approve"" [label=""approve""];
""307_burnFrom"" [label=""burnFrom""];
""307_burn"" [label=""burn""];
""307_transfer"" [label=""transfer""];
""307_SIPToken"" [label=""SIPToken""];
""307_transferFrom"" [label=""transferFrom""];
""307__transfer"" [label=""_transfer""];
""307_transferFrom"" -> ""307__transfer"";
""307_transfer"" -> ""307__transfer"";
}
"
0x6fa8b7532cae4e8feedadfb4a757a43ae5243165.sol,BING,"contract BING is Ownable { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function BING( uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_417_BING {
label=""BING"";
""417_approveAndCall"" [label=""approveAndCall""];
""417__transfer"" [label=""_transfer""];
""417_transferFrom"" [label=""transferFrom""];
""417_burnFrom"" [label=""burnFrom""];
""417_transfer"" [label=""transfer""];
""417_approve"" [label=""approve""];
""417_BING"" [label=""BING""];
""417_burn"" [label=""burn""];
""417_transfer"" -> ""417__transfer"";
""417_transferFrom"" -> ""417__transfer"";
""417_approveAndCall"" -> ""417_approve"";
}
"
0x02e492fc1ef9466260d91d087057de601b874b7d.sol,Bitcoinpremier,"contract Bitcoinpremier is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Bitcoinpremier() public { symbol = ; name = ; decimals = 18; _totalSupply = 35000000000000000000000000000; balances[0xE4b0F089fcEBA22dA87470e1Bb7BB0bb977BaDfa] = _totalSupply; Transfer(address(0), 0xE4b0F089fcEBA22dA87470e1Bb7BB0bb977BaDfa, _totalSupply); }",1,"subgraph cluster_543_Bitcoinpremier {
label=""Bitcoinpremier"";
""543_Bitcoinpremier"" [label=""Bitcoinpremier""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x29daf1dc4eb5c8b519b24d06812a0f92a5d973ae.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_approve"" [label=""approve""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x00285f9aad90013a782fb6c85584d97f120b54d8.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_415_TokenERC20 {
label=""TokenERC20"";
""415_transfer"" [label=""transfer""];
""415_TokenERC20"" [label=""TokenERC20""];
""415_approveAndCall"" [label=""approveAndCall""];
""415_burn"" [label=""burn""];
""415_transferFrom"" [label=""transferFrom""];
""415__transfer"" [label=""_transfer""];
""415_approve"" [label=""approve""];
""415_burnFrom"" [label=""burnFrom""];
""415_approveAndCall"" -> ""415_approve"";
""415_transferFrom"" -> ""415__transfer"";
""415_transfer"" -> ""415__transfer"";
}
"
0x74e711f1179f559e1cd7817050cf198b67129269.sol,BitcoinRed,"contract BitcoinRed is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor () public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000; balances[0xb86249Da1e02f1faE5653F74fA48EE08097b110F] = _totalSupply; emit Transfer(address(0), 0xb86249Da1e02f1faE5653F74fA48EE08097b110F, _totalSupply); }",1,"subgraph cluster_543_BitcoinRed {
label=""BitcoinRed"";
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_constructor"" [label=""constructor""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x2e8d19eebcd9ff385b8c00f206ddd32e883189c5.sol,HeavenlyHoundCoin,"contract HeavenlyHoundCoin is SafeMath { address public owner; string public name; string public symbol; uint public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); bool lock = false; constructor( uint256 initialSupply, string tokenName, string tokenSymbol, uint decimalUnits ) public { owner = msg.sender; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_618_HeavenlyHoundCoin {
label=""HeavenlyHoundCoin"";
""618_transferBatch"" [label=""transferBatch""];
""618_burn"" [label=""burn""];
""618_approve"" [label=""approve""];
""618_constructor"" [label=""constructor""];
""618_transferOwnership"" [label=""transferOwnership""];
""618_transfer"" [label=""transfer""];
""618_setLock"" [label=""setLock""];
""618_transferFrom"" [label=""transferFrom""];
""618_mintToken"" [label=""mintToken""];
""618__transfer"" [label=""_transfer""];
""618_freezeAccount"" [label=""freezeAccount""];
""618_burnFrom"" [label=""burnFrom""];
""618__transfer"" -> ""618_isLock"";
""618_transfer"" -> ""618__transfer"";
""618_burnFrom"" -> ""618_onlyOwner"";
""618_setLock"" -> ""618_onlyOwner"";
""618_transferBatch"" -> ""618__transfer"";
""618_freezeAccount"" -> ""618_onlyOwner"";
""618_transferOwnership"" -> ""618_onlyOwner"";
""618_mintToken"" -> ""618_onlyOwner"";
""618_transferFrom"" -> ""618__transfer"";
""618_burn"" -> ""618_onlyOwner"";
}
"
0xf4702b0918a8a89dfc38459ce42198834818f26b.sol,multiowned,contract multiowned { struct PendingState { uint yetNeeded; uint ownersDone; uint index; },1,"subgraph cluster_717_multiowned {
label=""multiowned"";
""717_changeRequirement"" [label=""changeRequirement""];
""717_changeOwner"" [label=""changeOwner""];
""717_isOwner"" [label=""isOwner""];
""717_multiowned"" [label=""multiowned""];
""717_reorganizeOwners"" [label=""reorganizeOwners""];
""717_clearPending"" [label=""clearPending""];
""717_hasConfirmed"" [label=""hasConfirmed""];
""717_revoke"" [label=""revoke""];
""717_getOwner"" [label=""getOwner""];
""717_addOwner"" [label=""addOwner""];
""717_removeOwner"" [label=""removeOwner""];
""717_confirmAndCheck"" [label=""confirmAndCheck""];
""717_addOwner"" -> ""717_onlymanyowners"";
""717_changeOwner"" -> ""717_isOwner"";
""717_removeOwner"" -> ""717_reorganizeOwners"";
""717_addOwner"" -> ""717_clearPending"";
""717_changeOwner"" -> ""717_clearPending"";
""717_changeRequirement"" -> ""717_clearPending"";
""717_changeRequirement"" -> ""717_onlymanyowners"";
""717_addOwner"" -> ""717_reorganizeOwners"";
""717_removeOwner"" -> ""717_onlymanyowners"";
""717_addOwner"" -> ""717_isOwner"";
""717_changeOwner"" -> ""717_onlymanyowners"";
""717_removeOwner"" -> ""717_clearPending"";
}
"
0x53e3a7ec57132173ce615debb9a303fd2cd86789.sol,CityToken,"contract CityToken is ERC721 { event CityCreated(uint256 tokenId, string name, string country, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name, string country); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.05 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; mapping (uint256 => address) public cityIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public cityIndexToApproved; mapping (uint256 => uint256) private cityIndexToPrice; address public ceoAddress; address public cooAddress; uint256 public promoCreatedCount; struct City { string name; string country; }",1,"subgraph cluster_957_CityToken {
label=""CityToken"";
""957_takeOwnership"" [label=""takeOwnership""];
""957_purchase"" [label=""purchase""];
""957_setCEO"" [label=""setCEO""];
""957_totalSupply"" [label=""totalSupply""];
""957_ownerOf"" [label=""ownerOf""];
""957_approve"" [label=""approve""];
""957__addressNotNull"" [label=""_addressNotNull""];
""957__createCity"" [label=""_createCity""];
""957__owns"" [label=""_owns""];
""957_getCity"" [label=""getCity""];
""957_transfer"" [label=""transfer""];
""957_balanceOf"" [label=""balanceOf""];
""957_name"" [label=""name""];
""957__payout"" [label=""_payout""];
""957_setCOO"" [label=""setCOO""];
""957_CityToken"" [label=""CityToken""];
""957_createContractCity"" [label=""createContractCity""];
""957_implementsERC721"" [label=""implementsERC721""];
""957_symbol"" [label=""symbol""];
""957_tokensOfOwner"" [label=""tokensOfOwner""];
""957__approved"" [label=""_approved""];
""957_priceOf"" [label=""priceOf""];
""957_transferFrom"" [label=""transferFrom""];
""957__transfer"" [label=""_transfer""];
""957_createPromoCity"" [label=""createPromoCity""];
""957_payout"" [label=""payout""];
""957_transfer"" -> ""957__addressNotNull"";
""957_approve"" -> ""957__owns"";
""957_tokensOfOwner"" -> ""957_totalSupply"";
""957_transfer"" -> ""957__owns"";
""957_payout"" -> ""957_onlyCLevel"";
""957_takeOwnership"" -> ""957__approved"";
""957_transferFrom"" -> ""957__transfer"";
""957_transfer"" -> ""957__transfer"";
""957_transferFrom"" -> ""957__approved"";
""957_purchase"" -> ""957__addressNotNull"";
""957_takeOwnership"" -> ""957__transfer"";
""957_transferFrom"" -> ""957__addressNotNull"";
""957_tokensOfOwner"" -> ""957_balanceOf"";
""957_createPromoCity"" -> ""957__createCity"";
""957_takeOwnership"" -> ""957__addressNotNull"";
""957_setCEO"" -> ""957_onlyCEO"";
""957_payout"" -> ""957__payout"";
""957_createContractCity"" -> ""957_onlyCOO"";
""957_purchase"" -> ""957__transfer"";
""957__createCity"" -> ""957__transfer"";
""957_setCOO"" -> ""957_onlyCEO"";
""957_transferFrom"" -> ""957__owns"";
""957_createContractCity"" -> ""957__createCity"";
""957_createPromoCity"" -> ""957_onlyCOO"";
}
"
0x6eedd095c335a7dae40db56832607093e1ae6311.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; emit Transfer(address(this), msg.sender, totalSupply); }",1,"subgraph cluster_370_TokenERC20 {
label=""TokenERC20"";
""370_burn"" [label=""burn""];
""370_burnFrom"" [label=""burnFrom""];
""370_transferFrom"" [label=""transferFrom""];
""370_approveAndCall"" [label=""approveAndCall""];
""370_TokenERC20"" [label=""TokenERC20""];
""370_approve"" [label=""approve""];
""370_transfer"" [label=""transfer""];
""370__transfer"" [label=""_transfer""];
""370_transferFrom"" -> ""370__transfer"";
""370_approveAndCall"" -> ""370_approve"";
""370_transfer"" -> ""370__transfer"";
}
"
0xec71870d02ba5c392ec8f64837e314b28afa4222.sol,BillionRewardsToken,contract BillionRewardsToken is owned { string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint constant ONETOKEN = 10 ** uint(decimals); uint constant MILLION = 1000000; uint public totalSupply; uint public Devs_Supply; uint public Bounty_Supply; bool public Dev_TokenReleased = false; uint public Token_ExchangeValue; bool public Accept_Payment; bool public Token_Unlocked; uint public Eth_Collected; uint public Sold_Token; uint public Burnt_Token; address public etherWallet = 0xacEF4B8808a78BF70dbC39B8A2274d8BbfF2dB28; constructor() public { Accept_Payment = true; Token_Unlocked = true; Token_ExchangeValue = 1999995 * ONETOKEN; totalSupply = 550000 * MILLION * ONETOKEN; Devs_Supply = 10000 * MILLION * ONETOKEN; Bounty_Supply = 40000 * MILLION * ONETOKEN; totalSupply -= Devs_Supply + Bounty_Supply; balanceOf[msg.sender] = totalSupply; },1,"subgraph cluster_714_BillionRewardsToken {
label=""BillionRewardsToken"";
""714__transferBilrew"" [label=""_transferBilrew""];
""714_burn"" [label=""burn""];
""714_fallback"" [label=""fallback""];
""714_setAcceptPayment"" [label=""setAcceptPayment""];
""714_setTokenTransfer"" [label=""setTokenTransfer""];
""714_computeReturnBonus"" [label=""computeReturnBonus""];
""714_mint"" [label=""mint""];
""714__transfer"" [label=""_transfer""];
""714_constructor"" [label=""constructor""];
""714_send_bounty_token"" [label=""send_bounty_token""];
""714_unlockDevSupply"" [label=""unlockDevSupply""];
""714_transfer"" [label=""transfer""];
""714_withdrawEther"" [label=""withdrawEther""];
""714_send_bounty_token"" -> ""714_onlyOwner"";
""714_unlockDevSupply"" -> ""714_onlyOwner"";
""714_fallback"" -> ""714_computeReturnBonus"";
""714_transfer"" -> ""714_notLocked"";
""714_transfer"" -> ""714__transferBilrew"";
""714_setAcceptPayment"" -> ""714_onlyOwner"";
""714_fallback"" -> ""714__transfer"";
""714_setTokenTransfer"" -> ""714_onlyOwner"";
""714_withdrawEther"" -> ""714_onlyOwner"";
""714_mint"" -> ""714_onlyOwner"";
""714_fallback"" -> ""714_buyingToken"";
}
"
0xf24c63438ae11cb3facb84006f4cfa75458126ed.sol,ClockAuctionBase,contract ClockAuctionBase { struct Auction { address seller; uint128 startingPrice; uint128 endingPrice; uint64 duration; uint64 startedAt; },1,"subgraph cluster_2396_ClockAuctionBase {
label=""ClockAuctionBase"";
""2396__cancelAuction"" [label=""_cancelAuction""];
""2396__removeAuction"" [label=""_removeAuction""];
""2396__isOnAuction"" [label=""_isOnAuction""];
""2396__bid"" [label=""_bid""];
""2396__transfer"" [label=""_transfer""];
""2396__computeCut"" [label=""_computeCut""];
""2396__escrow"" [label=""_escrow""];
""2396__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""2396__addAuction"" [label=""_addAuction""];
""2396__currentPrice"" [label=""_currentPrice""];
""2396__owns"" [label=""_owns""];
""2396__bid"" -> ""2396__computeCut"";
""2396__cancelAuction"" -> ""2396__removeAuction"";
""2396__cancelAuction"" -> ""2396__transfer"";
""2396__currentPrice"" -> ""2396__computeCurrentPrice"";
""2396__bid"" -> ""2396__currentPrice"";
""2396__bid"" -> ""2396__isOnAuction"";
""2396__bid"" -> ""2396__removeAuction"";
}
"
0x6b0d7b8357bb851de9f1953199c39c7bc4675796.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MyAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_551_MyAdvancedToken {
label=""MyAdvancedToken"";
""551_freezeAccount"" [label=""freezeAccount""];
""551_mintToken"" [label=""mintToken""];
""551_MyAdvancedToken"" [label=""MyAdvancedToken""];
""551__transfer"" [label=""_transfer""];
""551_freezeAccount"" -> ""551_onlyOwner"";
""551_mintToken"" -> ""551_onlyOwner"";
""551_MyAdvancedToken"" -> ""551_TokenERC20"";
}
"
0x5838f878000fe44b6f6c677bbf839e12f097c147.sol,Q_GAME,contract Q_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_Q_GAME {
label=""Q_GAME"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_set_game"" [label=""set_game""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_Try"" [label=""Try""];
}
"
0xdd89d6ab3aca67ed697492ba4de2f2763490224b.sol,NFTYToken,"contract NFTYToken { event Transfer(address indexed from, address indexed to, uint amount); event Approval(address indexed owner, address indexed spender, uint amount); uint private constant MAX_UINT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; string public constant name = ; string public constant symbol = ; uint public constant decimals = 3; uint public constant totalSupply = 100000 * 10 ** decimals; mapping (address => uint) public balanceOf; mapping (address => mapping (address => uint)) public allowance; constructor() public { balanceOf[msg.sender] = totalSupply; emit Transfer(0, msg.sender, totalSupply); }",1,"subgraph cluster_245_NFTYToken {
label=""NFTYToken"";
""245_approve"" [label=""approve""];
""245_transfer"" [label=""transfer""];
""245_constructor"" [label=""constructor""];
""245_transferFrom"" [label=""transferFrom""];
}
"
0xa1506902f8ca82dace3176575e740c78aa29fc02.sol,Storage,"contract Storage { bytes32[] public data; bool readOnly; function uploadData(bytes _data) public { require(readOnly != true); uint index = data.length; for(uint i = 0; i < _data.length / 32; i++) { bytes32 word; assembly { word:= mload(add(_data, add(32, mul(i, 32)))) }",1,"subgraph cluster_102_Storage {
label=""Storage"";
""102_uploadData"" [label=""uploadData""];
""102_uploadFinish"" [label=""uploadFinish""];
""102_getData"" [label=""getData""];
}
"
0xf4609d26a58598d6b80b11f451a00477f61d8804.sol,Tcthereum,"contract Tcthereum { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Tcthereum( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_Tcthereum {
label=""Tcthereum"";
""361_Tcthereum"" [label=""Tcthereum""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0xf208c7a5682d3835a58dadce8e249453ebd0ec0b.sol,FOIN,"contract FOIN { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); uint256 initialSupply = 100000; string tokenName = ; string tokenSymbol = ; constructor() public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_335_FOIN {
label=""FOIN"";
""335_burn"" [label=""burn""];
""335_constructor"" [label=""constructor""];
""335_transferFrom"" [label=""transferFrom""];
""335_transfer"" [label=""transfer""];
""335_approve"" [label=""approve""];
""335_burnFrom"" [label=""burnFrom""];
""335__transfer"" [label=""_transfer""];
""335_transfer"" -> ""335__transfer"";
""335_transferFrom"" -> ""335__transfer"";
}
"
0x4042ff0b0ff691a1549d67ede0479a1f0d12f6ba.sol,Cosby,contract Cosby { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1323_Cosby {
label=""Cosby"";
""1323_setStakingRequirement"" [label=""setStakingRequirement""];
""1323_withdraw"" [label=""withdraw""];
""1323_buy"" [label=""buy""];
""1323_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1323_myTokens"" [label=""myTokens""];
""1323_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1323_fallback"" [label=""fallback""];
""1323_setSymbol"" [label=""setSymbol""];
""1323_Cosby"" [label=""Cosby""];
""1323_purchaseTokens"" [label=""purchaseTokens""];
""1323_myDividends"" [label=""myDividends""];
""1323_setAdministrator"" [label=""setAdministrator""];
""1323_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1323_sqrt"" [label=""sqrt""];
""1323_balanceOf"" [label=""balanceOf""];
""1323_transfer"" [label=""transfer""];
""1323_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1323_exit"" [label=""exit""];
""1323_setName"" [label=""setName""];
""1323_sellPrice"" [label=""sellPrice""];
""1323_dividendsOf"" [label=""dividendsOf""];
""1323_reinvest"" [label=""reinvest""];
""1323_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1323_buyPrice"" [label=""buyPrice""];
""1323_disableInitialStage"" [label=""disableInitialStage""];
""1323_totalSupply"" [label=""totalSupply""];
""1323_sell"" [label=""sell""];
""1323_exit"" -> ""1323_sell"";
""1323_transfer"" -> ""1323_onlyBagholders"";
""1323_exit"" -> ""1323_withdraw"";
""1323_setAdministrator"" -> ""1323_onlyAdministrator"";
""1323_purchaseTokens"" -> ""1323_antiEarlyWhale"";
""1323_reinvest"" -> ""1323_myDividends"";
""1323_buy"" -> ""1323_purchaseTokens"";
""1323_sell"" -> ""1323_tokensToEthereum_"";
""1323_disableInitialStage"" -> ""1323_onlyAdministrator"";
""1323_calculateTokensReceived"" -> ""1323_ethereumToTokens_"";
""1323_transfer"" -> ""1323_tokensToEthereum_"";
""1323_withdraw"" -> ""1323_onlyStronghands"";
""1323_transfer"" -> ""1323_withdraw"";
""1323_reinvest"" -> ""1323_purchaseTokens"";
""1323_calculateEthereumReceived"" -> ""1323_tokensToEthereum_"";
""1323_purchaseTokens"" -> ""1323_ethereumToTokens_"";
""1323_myDividends"" -> ""1323_dividendsOf"";
""1323_setSymbol"" -> ""1323_onlyAdministrator"";
""1323_sellPrice"" -> ""1323_tokensToEthereum_"";
""1323_setStakingRequirement"" -> ""1323_onlyAdministrator"";
""1323_withdraw"" -> ""1323_myDividends"";
""1323_buyPrice"" -> ""1323_tokensToEthereum_"";
""1323_setName"" -> ""1323_onlyAdministrator"";
""1323_reinvest"" -> ""1323_onlyStronghands"";
""1323_myTokens"" -> ""1323_balanceOf"";
""1323_fallback"" -> ""1323_purchaseTokens"";
""1323_transfer"" -> ""1323_myDividends"";
""1323_sell"" -> ""1323_onlyBagholders"";
""1323_ethereumToTokens_"" -> ""1323_sqrt"";
}
"
0x71a06988b97070a7091f81117b0a4bdee7a68357.sol,BITWORKCOIN,"contract BITWORKCOIN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BITWORKCOIN() public { symbol = ; name = ; decimals = 9; _totalSupply = 1000000000000000000; balances[0x503dCFb25379C33c0Ac7c0107b1A9e9e51Dac07f] = _totalSupply; Transfer(address(0), 0x503dCFb25379C33c0Ac7c0107b1A9e9e51Dac07f, _totalSupply); }",1,"subgraph cluster_543_BITWORKCOIN {
label=""BITWORKCOIN"";
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_BITWORKCOIN"" [label=""BITWORKCOIN""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x006ff3494c04680cfbf39b0396054486f3f6ad32.sol,PLAY_NOW,contract PLAY_NOW { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>=1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_PLAY_NOW {
label=""PLAY_NOW"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_Try"" [label=""Try""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_SetupPlay"" [label=""SetupPlay""];
""132_newQuestioner"" [label=""newQuestioner""];
}
"
0x6f8e8e44e02963f11d494be759afbe24cf55cd39.sol,DemocracyVote,"contract DemocracyVote { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 99000000 * (uint256(10) ** decimals); event Transfer(address indexed from, address indexed to, uint256 value); function DemocracyVote() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_196_DemocracyVote {
label=""DemocracyVote"";
""196_DemocracyVote"" [label=""DemocracyVote""];
""196_transfer"" [label=""transfer""];
""196_transferFrom"" [label=""transferFrom""];
""196_approve"" [label=""approve""];
}
"
0x55aa079e2fb0c8b68a0a08efbff3f1aa5472f1a2.sol,WannabeSmartInvestor,contract WannabeSmartInvestor { address private owner; mapping(address => uint) public incomeFrom; constructor() public { owner = msg.sender; },1,"subgraph cluster_82_WannabeSmartInvestor {
label=""WannabeSmartInvestor"";
""82_constructor"" [label=""constructor""];
""82_fallback"" [label=""fallback""];
""82_invest"" [label=""invest""];
""82_withdraw"" [label=""withdraw""];
}
"
0x749f35ff65932e68267dd82f6cd85eea735d700e.sol,CCLToken,"contract CCLToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CCLToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 4000000000000000000000000000; balances[0xf835bF0285c99102eaedd684b4401272eF36aF65] = _totalSupply; Transfer(address(0), 0xf835bF0285c99102eaedd684b4401272eF36aF65, _totalSupply); }",1,"subgraph cluster_543_CCLToken {
label=""CCLToken"";
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_CCLToken"" [label=""CCLToken""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" [label=""transferFrom""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x87af260d1f637661dcecb6e4efcb4f74963c9539.sol,VINCI_301201,"contract VINCI_301201 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 11063890721038700000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VINCI_301201 {
label=""VINCI_301201"";
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
}
"
0x3595279a9f0658eb2649976f155111bae1ae9de6.sol,GGE,"contract GGE { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function GGE( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_GGE {
label=""GGE"";
""380_burnFrom"" [label=""burnFrom""];
""380_burn"" [label=""burn""];
""380__transfer"" [label=""_transfer""];
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_GGE"" [label=""GGE""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0x46a0fb6c0f540e825889f4b82005afef43d2cd71.sol,ArchiveCreation,contract ArchiveCreation { struct Archive { string projectNameToken; },1,"subgraph cluster_73_ArchiveCreation {
label=""ArchiveCreation"";
""73_ArchiveCreation"" [label=""ArchiveCreation""];
""73_getRecordNameToken"" [label=""getRecordNameToken""];
""73_signArchive"" [label=""signArchive""];
""73_getRecords"" [label=""getRecords""];
}
"
0xf4be3da9df0c12e69115bb5614334786fbaf5ace.sol,MiBoodleToken,"contract MiBoodleToken is ERC20,SafeMath,Haltable { bool public isMiBoodleToken = false; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => mapping (address => uint256)) allowedToBurn; mapping (address => uint256) investment; address public upgradeMaster; UpgradeAgent public upgradeAgent; uint256 public totalUpgraded; bool public upgradeAgentStatus = false; uint256 public start; uint256 public end; uint256 public preFundingStart; uint256 public preFundingtokens; uint256 public fundingTokens; uint256 public maxTokenSupply = 600000000 ether; uint256 public maxTokenSale = 200000000 ether; uint256 public maxTokenForPreSale = 100000000 ether; address public multisig; address public vault; bool public isCrowdSaleFinalized = false; uint256 minInvest = 1 ether; uint256 maxInvest = 50 ether; bool public isTransferEnable = false; bool public isReleasedOnce = false; event Allocate(address _address,uint256 _value); event Burn(address owner,uint256 _value); event ApproveBurner(address owner, address canBurn, uint256 value); event BurnFrom(address _from,uint256 _value); event Upgrade(address indexed _from, address indexed _to, uint256 _value); event UpgradeAgentSet(address agent); event Deposit(address _investor,uint256 _value); function MiBoodleToken(uint256 _preFundingtokens,uint256 _fundingTokens,uint256 _preFundingStart,uint256 _start,uint256 _end) public { upgradeMaster = msg.sender; isMiBoodleToken = true; preFundingtokens = _preFundingtokens; fundingTokens = _fundingTokens; preFundingStart = safeAdd(now, _preFundingStart); start = safeAdd(now, _start); end = safeAdd(now, _end); }",1,"subgraph cluster_1492_MiBoodleToken {
label=""MiBoodleToken"";
""1492_MiBoodleToken"" [label=""MiBoodleToken""];
""1492_burn"" [label=""burn""];
""1492_assignTokens"" [label=""assignTokens""];
""1492_allowanceToBurn"" [label=""allowanceToBurn""];
""1492_transferFrom"" [label=""transferFrom""];
""1492_cashInvestment"" [label=""cashInvestment""];
""1492_allowance"" [label=""allowance""];
""1492_setTransferEnable"" [label=""setTransferEnable""];
""1492_fallback"" [label=""fallback""];
""1492_approve"" [label=""approve""];
""1492_setFundingtokens"" [label=""setFundingtokens""];
""1492_setFundingStartTime"" [label=""setFundingStartTime""];
""1492_setUpgradeAgent"" [label=""setUpgradeAgent""];
""1492_approveForBurn"" [label=""approveForBurn""];
""1492_setMiBoodleVault"" [label=""setMiBoodleVault""];
""1492_balanceOf"" [label=""balanceOf""];
""1492_setPreFundingtokens"" [label=""setPreFundingtokens""];
""1492_setMaximumEtherToAccept"" [label=""setMaximumEtherToAccept""];
""1492_withdraw"" [label=""withdraw""];
""1492_transfer"" [label=""transfer""];
""1492_setMultisigWallet"" [label=""setMultisigWallet""];
""1492_setFundingEndTime"" [label=""setFundingEndTime""];
""1492_burnFrom"" [label=""burnFrom""];
""1492_setUpgradeMaster"" [label=""setUpgradeMaster""];
""1492_finalizeCrowdSale"" [label=""finalizeCrowdSale""];
""1492_setPreFundingStartTime"" [label=""setPreFundingStartTime""];
""1492_setMinimumEtherToAccept"" [label=""setMinimumEtherToAccept""];
""1492_upgrade"" [label=""upgrade""];
""1492_setFundingStartTime"" -> ""1492_onlyOwner"";
""1492_upgrade"" -> ""1492_safeAdd"";
""1492_setMinimumEtherToAccept"" -> ""1492_stopIfHalted"";
""1492_setMinimumEtherToAccept"" -> ""1492_onlyOwner"";
""1492_finalizeCrowdSale"" -> ""1492_safeAdd"";
""1492_setFundingEndTime"" -> ""1492_onlyOwner"";
""1492_setFundingStartTime"" -> ""1492_stopIfHalted"";
""1492_cashInvestment"" -> ""1492_stopIfHalted"";
""1492_setMaximumEtherToAccept"" -> ""1492_stopIfHalted"";
""1492_setMaximumEtherToAccept"" -> ""1492_onlyOwner"";
""1492_transfer"" -> ""1492_safeSub"";
""1492_upgrade"" -> ""1492_safeSub"";
""1492_burnFrom"" -> ""1492_safeSub"";
""1492_fallback"" -> ""1492_stopIfHalted"";
""1492_cashInvestment"" -> ""1492_assignTokens"";
""1492_finalizeCrowdSale"" -> ""1492_assignTokens"";
""1492_fallback"" -> ""1492_safeMul"";
""1492_MiBoodleToken"" -> ""1492_safeAdd"";
""1492_setPreFundingtokens"" -> ""1492_onlyOwner"";
""1492_fallback"" -> ""1492_assignTokens"";
""1492_setTransferEnable"" -> ""1492_onlyOwner"";
""1492_setMiBoodleVault"" -> ""1492_onlyOwner"";
""1492_transferFrom"" -> ""1492_safeSub"";
""1492_setPreFundingStartTime"" -> ""1492_onlyOwner"";
""1492_fallback"" -> ""1492_safeAdd"";
""1492_setTransferEnable"" -> ""1492_stopIfHalted"";
""1492_setUpgradeAgent"" -> ""1492_onlyOwner"";
""1492_setMultisigWallet"" -> ""1492_onlyOwner"";
""1492_cashInvestment"" -> ""1492_onlyOwner"";
""1492_setFundingtokens"" -> ""1492_stopIfHalted"";
""1492_transferFrom"" -> ""1492_safeAdd"";
""1492_setFundingtokens"" -> ""1492_onlyOwner"";
""1492_setPreFundingtokens"" -> ""1492_stopIfHalted"";
""1492_burn"" -> ""1492_safeSub"";
""1492_withdraw"" -> ""1492_onlyOwner"";
""1492_assignTokens"" -> ""1492_safeAdd"";
""1492_transfer"" -> ""1492_safeAdd"";
""1492_cashInvestment"" -> ""1492_safeAdd"";
""1492_setPreFundingStartTime"" -> ""1492_stopIfHalted"";
""1492_setFundingEndTime"" -> ""1492_stopIfHalted"";
}
"
0xc4581e49d306f4df9e672ac9b31a7b2da5fe1d5b.sol,LowcarbonToken,"contract LowcarbonToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public hourlyProduction; uint public accumulatedHours; uint public last_mint; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; event Mint(address indexed to, uint256 amount); function LowcarbonToken() public { symbol = ; name = ; decimals = 1; last_mint = 0; hourlyProduction = 114155; accumulatedHours = 0; _totalSupply = 1000000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_647_LowcarbonToken {
label=""LowcarbonToken"";
""647_transferFrom"" [label=""transferFrom""];
""647_balanceOf"" [label=""balanceOf""];
""647_allowance"" [label=""allowance""];
""647_transfer"" [label=""transfer""];
""647_totalSupply"" [label=""totalSupply""];
""647_LowcarbonToken"" [label=""LowcarbonToken""];
""647_approve"" [label=""approve""];
""647_fallback"" [label=""fallback""];
""647_mint"" [label=""mint""];
""647_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""647_transferAnyERC20Token"" -> ""647_onlyOwner"";
""647_mint"" -> ""647_onlyOwner"";
}
"
0x2f50ab197f950e0c2184cf5d804f4141502cd987.sol,LoggedDividend,"contract LoggedDividend is Ownable, LoggedERC20 { struct Dividend { uint256 id; uint256 block; uint256 time; uint256 amount; uint256 claimedAmount; uint256 transferedBack; uint256 totalSupply; uint256 recycleTime; bool recycled; mapping (address => bool) claimed; }",1,"subgraph cluster_980_LoggedDividend {
label=""LoggedDividend"";
""980_refundUnclaimedEthers"" [label=""refundUnclaimedEthers""];
""980_addDividend"" [label=""addDividend""];
""980_claimDividends"" [label=""claimDividends""];
""980_recycleDividend"" [label=""recycleDividend""];
""980_claimDividend"" [label=""claimDividend""];
""980_LoggedDividend"" [label=""LoggedDividend""];
""980_addDividend"" -> ""980_onlyOwner"";
""980_addDividend"" -> ""980_valueAt"";
""980_recycleDividend"" -> ""980_onlyOwner"";
""980_claimDividends"" -> ""980_claimDividend"";
""980_LoggedDividend"" -> ""980_LoggedERC20"";
""980_refundUnclaimedEthers"" -> ""980_onlyOwner"";
""980_claimDividend"" -> ""980_valueAt"";
}
"
0x26998144da0e9e7a960ee1d6cdfd7bf8c6b496a2.sol,AILiteCoin,"contract AILiteCoin { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_463_AILiteCoin {
label=""AILiteCoin"";
""463_balanceOf"" [label=""balanceOf""];
""463_approve"" [label=""approve""];
""463_transfer"" [label=""transfer""];
""463_constructor"" [label=""constructor""];
""463_allowance"" [label=""allowance""];
""463_transferOwnership"" [label=""transferOwnership""];
""463_transferFrom"" [label=""transferFrom""];
""463_setLock"" [label=""setLock""];
""463_setLock"" -> ""463_onlyOwner"";
""463_transferOwnership"" -> ""463_onlyOwner"";
}
"
0xe1dbbce4570b815b6ce3434bb3097dc9f453c565.sol,MobiusRED,"contract MobiusRED is DSMath, DSAuth { string public ipfsHash; string public ipfsHashType = ; MobiusRedToken public token; bool public upgraded; address public nextVersion; uint public totalSharesSold; uint public totalEarningsGenerated; uint public totalDividendsPaid; uint public totalJackpotsWon; uint public constant DEV_FRACTION = WAD / 20; uint public constant DEV_DIVISOR = 20; uint public constant RETURNS_FRACTION = 65 * 10**16; uint public constant REFERRAL_FRACTION = 1 * 10**16; uint public constant JACKPOT_SEED_FRACTION = WAD / 20; uint public constant JACKPOT_FRACTION = 15 * 10**16; uint public constant AIRDROP_FRACTION = WAD / 100; uint public constant DIVIDENDS_FRACTION = 9 * 10**16; uint public constant STARTING_SHARE_PRICE = 1 finney; uint public constant PRICE_INCREASE_PERIOD = 1 hours; uint public constant HARD_DEADLINE_DURATION = 10 days; uint public constant SOFT_DEADLINE_DURATION = 1 days; uint public constant TIME_PER_SHARE = 5 minutes; uint public jackpotSeed; uint public devBalance; uint public raisedICO; uint public unclaimedReturns; uint public constant MULTIPLIER = RAY; struct Investor { uint lastCumulativeReturnsPoints; uint shares; }",1,"subgraph cluster_2284_MobiusRED {
label=""MobiusRED"";
""2284_fallback"" [label=""fallback""];
""2284_constructor"" [label=""constructor""];
""2284__outstandingReturns"" [label=""_outstandingReturns""];
""2284_buyShares"" [label=""buyShares""];
""2284__airDrop"" [label=""_airDrop""];
""2284__purchase"" [label=""_purchase""];
""2284_upgrade"" [label=""upgrade""];
""2284__updateReturns"" [label=""_updateReturns""];
""2284_withdrawDevShare"" [label=""withdrawDevShare""];
""2284_updateMyReturns"" [label=""updateMyReturns""];
""2284__finalizeRound"" [label=""_finalizeRound""];
""2284__issueShares"" [label=""_issueShares""];
""2284_finalizeLastRound"" [label=""finalizeLastRound""];
""2284__splitRevenue"" [label=""_splitRevenue""];
""2284_finalizeAndRestart"" [label=""finalizeAndRestart""];
""2284_totalsInfo"" [label=""totalsInfo""];
""2284__disburseReturns"" [label=""_disburseReturns""];
""2284_reinvestReturns"" [label=""reinvestReturns""];
""2284_startNewRound"" [label=""startNewRound""];
""2284_setIPFSHash"" [label=""setIPFSHash""];
""2284_hasReturns"" [label=""hasReturns""];
""2284_roundInfo"" [label=""roundInfo""];
""2284_withdrawReturns"" [label=""withdrawReturns""];
""2284_investorInfo"" [label=""investorInfo""];
""2284_estimateReturns"" [label=""estimateReturns""];
""2284__outstandingReturns"" -> ""2284_mul"";
""2284__finalizeRound"" -> ""2284_add"";
""2284_finalizeAndRestart"" -> ""2284_startNewRound"";
""2284__finalizeRound"" -> ""2284_wmul"";
""2284__purchase"" -> ""2284_add"";
""2284__issueShares"" -> ""2284_add"";
""2284_reinvestReturns"" -> ""2284_min"";
""2284_upgrade"" -> ""2284_auth"";
""2284_roundInfo"" -> ""2284_wmul"";
""2284_fallback"" -> ""2284_buyShares"";
""2284_withdrawDevShare"" -> ""2284_auth"";
""2284_reinvestReturns"" -> ""2284_reinvestReturns"";
""2284__outstandingReturns"" -> ""2284_sub"";
""2284__disburseReturns"" -> ""2284_wdiv"";
""2284_reinvestReturns"" -> ""2284__purchase"";
""2284_finalizeLastRound"" -> ""2284__finalizeRound"";
""2284_buyShares"" -> ""2284__purchase"";
""2284__splitRevenue"" -> ""2284_wmul"";
""2284__issueShares"" -> ""2284_wdiv"";
""2284__updateReturns"" -> ""2284_add"";
""2284_withdrawReturns"" -> ""2284__updateReturns"";
""2284_investorInfo"" -> ""2284_estimateReturns"";
""2284__splitRevenue"" -> ""2284__disburseReturns"";
""2284_reinvestReturns"" -> ""2284__updateReturns"";
""2284__updateReturns"" -> ""2284__outstandingReturns"";
""2284__disburseReturns"" -> ""2284_add"";
""2284__airDrop"" -> ""2284_add"";
""2284_reinvestReturns"" -> ""2284_sub"";
""2284_totalsInfo"" -> ""2284_wmul"";
""2284_setIPFSHash"" -> ""2284_auth"";
""2284__purchase"" -> ""2284_mul"";
""2284_finalizeAndRestart"" -> ""2284_finalizeLastRound"";
""2284__purchase"" -> ""2284__issueShares"";
""2284__purchase"" -> ""2284__updateReturns"";
""2284_withdrawReturns"" -> ""2284_sub"";
""2284__purchase"" -> ""2284_min"";
""2284__purchase"" -> ""2284__airDrop"";
""2284__issueShares"" -> ""2284_mul"";
""2284_estimateReturns"" -> ""2284__outstandingReturns"";
""2284__purchase"" -> ""2284__splitRevenue"";
""2284__splitRevenue"" -> ""2284_add"";
""2284_estimateReturns"" -> ""2284_hasReturns"";
""2284_withdrawReturns"" -> ""2284_hasReturns"";
""2284_updateMyReturns"" -> ""2284__updateReturns"";
""2284_startNewRound"" -> ""2284__purchase"";
""2284__disburseReturns"" -> ""2284_mul"";
}
"
0x0d09b8d474e312eda0996cb420aa9f5c6b2c1993.sol,ProfytPro,contract ProfytPro is Owned{ struct User{ string username; uint balance; },1,"subgraph cluster_420_ProfytPro {
label=""ProfytPro"";
""420_setTotalSupply"" [label=""setTotalSupply""];
""420_setDecimals"" [label=""setDecimals""];
""420_ProfytPro"" [label=""ProfytPro""];
""420_setReserve"" [label=""setReserve""];
""420_getUser"" [label=""getUser""];
""420_transfer"" [label=""transfer""];
""420_getUsers"" [label=""getUsers""];
""420_buy"" [label=""buy""];
""420_sell"" [label=""sell""];
""420_setSymbol"" [label=""setSymbol""];
""420_setPrices"" [label=""setPrices""];
""420_transferFrom"" [label=""transferFrom""];
""420_setUser"" [label=""setUser""];
""420_countUsers"" [label=""countUsers""];
""420_setSymbol"" -> ""420_onlyOwner"";
""420_transfer"" -> ""420_onlyOwner"";
""420_sell"" -> ""420_transferFrom"";
""420_buy"" -> ""420_transfer"";
""420_setTotalSupply"" -> ""420_onlyOwner"";
""420_setReserve"" -> ""420_onlyOwner"";
""420_setPrices"" -> ""420_onlyOwner"";
""420_setDecimals"" -> ""420_onlyOwner"";
}
"
0x28f4ae3275f38015c6e6eeefd9288a2d7bc7d023.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_balanceOf"" [label=""balanceOf""];
""256_transfer"" [label=""transfer""];
""256_transferFrom"" [label=""transferFrom""];
""256_allowance"" [label=""allowance""];
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0x2118840b16aaf95a0f0027b7ac32f5986925d935.sol,TokenERC20,"contract TokenERC20 { uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function _transfer(address _from, address _to, uint _value) internal { require(_to != 0x0); require(balanceOf[_from] >= _value); require(balanceOf[_to] + _value > balanceOf[_to]); uint previousBalances = balanceOf[_from] + balanceOf[_to]; balanceOf[_from] -= _value; balanceOf[_to] += _value; Transfer(_from, _to, _value); assert(balanceOf[_from] + balanceOf[_to] == previousBalances); }",1,"subgraph cluster_460_TokenERC20 {
label=""TokenERC20"";
""460_burnFrom"" [label=""burnFrom""];
""460_transfer"" [label=""transfer""];
""460_burn"" [label=""burn""];
""460__transfer"" [label=""_transfer""];
""460_approveAndCall"" [label=""approveAndCall""];
""460_approve"" [label=""approve""];
""460_transferFrom"" [label=""transferFrom""];
""460_transfer"" -> ""460__transfer"";
""460_approveAndCall"" -> ""460_approve"";
""460_transferFrom"" -> ""460__transfer"";
}
"
0x6fdbcd375f348325d4b8c1fac374753ec1b07c92.sol,WSKYToken,"contract WSKYToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function WSKYToken() public { symbol = ; name = ; decimals = 6; _totalSupply = 9600000 * 10**uint(decimals); balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_550_WSKYToken {
label=""WSKYToken"";
""550_approve"" [label=""approve""];
""550_transfer"" [label=""transfer""];
""550_allowance"" [label=""allowance""];
""550_WSKYToken"" [label=""WSKYToken""];
""550_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""550_fallback"" [label=""fallback""];
""550_approveAndCall"" [label=""approveAndCall""];
""550_transferFrom"" [label=""transferFrom""];
""550_totalSupply"" [label=""totalSupply""];
""550_balanceOf"" [label=""balanceOf""];
""550_transferAnyERC20Token"" -> ""550_onlyOwner"";
}
"
0xef47dd38cc0c2856a27fb1964b066ec33426e979.sol,DBXCContract,"contract DBXCContract { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowed; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_496_DBXCContract {
label=""DBXCContract"";
""496_allowance"" [label=""allowance""];
""496_transfer"" [label=""transfer""];
""496_increaseApproval"" [label=""increaseApproval""];
""496_approve"" [label=""approve""];
""496__transfer"" [label=""_transfer""];
""496_approveAndCall"" [label=""approveAndCall""];
""496_constructor"" [label=""constructor""];
""496_decreaseApproval"" [label=""decreaseApproval""];
""496_transferFrom"" [label=""transferFrom""];
""496_approveAndCall"" -> ""496_approve"";
""496_transferFrom"" -> ""496__transfer"";
""496_transfer"" -> ""496__transfer"";
}
"
0xbc5e7120e1e917c6ba34e94b3a29016f64bbd2c1.sol,RocketCash,contract RocketCash { uint constant public start = 1541678400; address constant public administrationFund = 0x97a121027a529B96f1a71135457Ab8e353060811; mapping (address => uint) public invested; mapping (address => uint) private lastInvestmentTime; mapping (address => uint) private collected; mapping (address => Refer[]) public referrers; mapping (address => Refer[]) public referrals; uint public investedTotal; uint public investorsCount; struct Refer { address investor; uint time; uint amount; uint percent; },1,"subgraph cluster_428_RocketCash {
label=""RocketCash"";
""428_availableDividends"" [label=""availableDividends""];
""428_fallback"" [label=""fallback""];
""428__bytesToAddress"" [label=""_bytesToAddress""];
""428_dailyDividends"" [label=""dailyDividends""];
""428_availableWithdraw"" [label=""availableWithdraw""];
""428_fallback"" -> ""428_availableDividends"";
""428_availableDividends"" -> ""428_dailyDividends"";
""428_availableWithdraw"" -> ""428_availableDividends"";
""428_fallback"" -> ""428_availableWithdraw"";
""428_fallback"" -> ""428__bytesToAddress"";
}
"
0x6f8544edb3f513845135b0efa907f4b6b9c2c92e.sol,BW,contract BW { address public owner; BWService private bwService; BWData private bwData; bool public paused = false; modifier isOwner { if (msg.sender != owner) { revert(); },1,"subgraph cluster_2976_BW {
label=""BW"";
""2976_depositBattleValue"" [label=""depositBattleValue""];
""2976_fallback"" [label=""fallback""];
""2976_moveBlockValue"" [label=""moveBlockValue""];
""2976_setPaused"" [label=""setPaused""];
""2976_transferTokens"" [label=""transferTokens""];
""2976_withdrawValue"" [label=""withdrawValue""];
""2976_updateUser"" [label=""updateUser""];
""2976_claimTilesForExistingUser"" [label=""claimTilesForExistingUser""];
""2976_transferTileFromOwner"" [label=""transferTileFromOwner""];
""2976_attackTileForExistingUser"" [label=""attackTileForExistingUser""];
""2976_kill"" [label=""kill""];
""2976_censorUser"" [label=""censorUser""];
""2976_attackTileForNewUser"" [label=""attackTileForNewUser""];
""2976_withdrawBattleValue"" [label=""withdrawBattleValue""];
""2976_createNewUser"" [label=""createNewUser""];
""2976_fortifyClaims"" [label=""fortifyClaims""];
""2976_claimTilesForNewUser"" [label=""claimTilesForNewUser""];
""2976_constructor"" [label=""constructor""];
""2976_attackTileForNewUser"" -> ""2976_isNotContractCaller"";
""2976_fortifyClaims"" -> ""2976_isNotContractCaller"";
""2976_createNewUser"" -> ""2976_isOwner"";
""2976_updateUser"" -> ""2976_isNotPaused"";
""2976_setPaused"" -> ""2976_isOwner"";
""2976_kill"" -> ""2976_isOwner"";
""2976_claimTilesForExistingUser"" -> ""2976_isNotPaused"";
""2976_attackTileForExistingUser"" -> ""2976_isNotContractCaller"";
""2976_withdrawValue"" -> ""2976_isOwner"";
""2976_fortifyClaims"" -> ""2976_isNotPaused"";
""2976_censorUser"" -> ""2976_isOwner"";
""2976_claimTilesForExistingUser"" -> ""2976_isNotContractCaller"";
""2976_claimTilesForNewUser"" -> ""2976_isNotPaused"";
""2976_transferTileFromOwner"" -> ""2976_isOwner"";
""2976_updateUser"" -> ""2976_isNotContractCaller"";
""2976_claimTilesForNewUser"" -> ""2976_isNotContractCaller"";
""2976_moveBlockValue"" -> ""2976_isNotPaused"";
""2976_depositBattleValue"" -> ""2976_isOwner"";
""2976_transferTokens"" -> ""2976_isOwner"";
""2976_withdrawBattleValue"" -> ""2976_isNotContractCaller"";
""2976_attackTileForNewUser"" -> ""2976_isNotPaused"";
""2976_attackTileForExistingUser"" -> ""2976_isNotPaused"";
""2976_moveBlockValue"" -> ""2976_isNotContractCaller"";
}
"
0x0ce6d5a093d4166237c7a9ff8e0553b0293214a1.sol,InfoBurnableToken,"contract InfoBurnableToken is BurnableToken, StandardToken { string message = ; address public manager; event NoFunds(address _who, string _message); modifier onlyManager() { require(msg.sender == manager); _; }",1,"subgraph cluster_843_InfoBurnableToken {
label=""InfoBurnableToken"";
""843_constructor"" [label=""constructor""];
""843_burn"" [label=""burn""];
""843_transferManager"" [label=""transferManager""];
""843_burnPassportToken"" [label=""burnPassportToken""];
""843_burnPassportToken"" -> ""843_onlyManager"";
""843_burn"" -> ""843__burn"";
""843_transferManager"" -> ""843_onlyManager"";
""843_burnPassportToken"" -> ""843__burn"";
}
"
0x1fab9d2996767db0ca6af12fd92c1f2aab2675a0.sol,ZethrSlots,contract ZethrSlots is ZethrGame { struct Bet { uint56 tokenValue; uint48 blockNumber; uint8 tier; uint8 numSpins; },1,"subgraph cluster_6991_ZethrSlots {
label=""ZethrSlots"";
""6991_finishBetFrom"" [label=""finishBetFrom""];
""6991_getSpinResults"" [label=""getSpinResults""];
""6991_isBetValid"" [label=""isBetValid""];
""6991_ownerSetJackpotAddress"" [label=""ownerSetJackpotAddress""];
""6991_getLastSpinOutput"" [label=""getLastSpinOutput""];
""6991_getBet"" [label=""getBet""];
""6991_execute"" [label=""execute""];
""6991_maxRandom"" [label=""maxRandom""];
""6991_constructor"" [label=""constructor""];
""6991_getSpinOutput"" [label=""getSpinOutput""];
""6991_random"" [label=""random""];
""6991_getSpinResults"" -> ""6991_random"";
""6991_getLastSpinOutput"" -> ""6991_getSpinOutput"";
""6991_getSpinOutput"" -> ""6991_random"";
""6991_execute"" -> ""6991_isNotPaused"";
""6991_getLastSpinOutput"" -> ""6991_getBet"";
""6991_execute"" -> ""6991_bankrollOnly"";
""6991_execute"" -> ""6991_hasNotBetThisBlock"";
""6991_constructor"" -> ""6991_constructor"";
""6991_execute"" -> ""6991_betIsValid"";
""6991_finishBetFrom"" -> ""6991_getBet"";
""6991_finishBetFrom"" -> ""6991_getSpinResults"";
""6991_execute"" -> ""6991_getBet"";
""6991_random"" -> ""6991_maxRandom"";
""6991_ownerSetJackpotAddress"" -> ""6991_ownerOnly"";
""6991_isBetValid"" -> ""6991_getMaxProfit"";
""6991_execute"" -> ""6991_finishBetFrom"";
}
"
0x5064ec168fac380a866e8061b422d75b73470ad9.sol,ElectricCoin,"contract ElectricCoin { string public version = ; string public name; string public symbol; uint8 public decimals; address public owner; uint256 public _totalSupply; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowances; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Burn(address indexed from, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function ElectricCoin() public { balances[msg.sender] = 30000000000000000; _totalSupply = 30000000000000000; name = ; symbol = ; decimals = 8; owner = msg.sender; }",1,"subgraph cluster_410_ElectricCoin {
label=""ElectricCoin"";
""410_balanceOf"" [label=""balanceOf""];
""410_transfer"" [label=""transfer""];
""410_allowance"" [label=""allowance""];
""410_approveAndCall"" [label=""approveAndCall""];
""410_ElectricCoin"" [label=""ElectricCoin""];
""410_burn"" [label=""burn""];
""410_burnFrom"" [label=""burnFrom""];
""410_approve"" [label=""approve""];
""410_totalSupply"" [label=""totalSupply""];
""410_transferFrom"" [label=""transferFrom""];
""410_approveAndCall"" -> ""410_approve"";
}
"
0x6d54549975e0fef50cd954491a6abee84c6f4e61.sol,QuizTest,contract QuizTest { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_131_QuizTest {
label=""QuizTest"";
""131_NewQuestion"" [label=""NewQuestion""];
""131_Try"" [label=""Try""];
""131_StopGame"" [label=""StopGame""];
""131_newQuestioner"" [label=""newQuestioner""];
""131_start_quiz_game"" [label=""start_quiz_game""];
""131_fallback"" [label=""fallback""];
""131_StopGame"" -> ""131_onlyQuestionSender"";
""131_newQuestioner"" -> ""131_onlyQuestionSender"";
""131_NewQuestion"" -> ""131_onlyQuestionSender"";
}
"
0xf3dac8e171a13066f8964f74a7c87fd518e4e162.sol,safe,contract safe { bytes32 keyHash; address owner; bytes32 wallet_id = 0x9b604aaf4d2d08b6a570b6961c857ea3828d224d425db6104ac364f354211fa1; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_safe {
label=""safe"";
""121_setup_key"" [label=""setup_key""];
""121_change_answer_hash"" [label=""change_answer_hash""];
""121_fallback"" [label=""fallback""];
""121_get_id"" [label=""get_id""];
""121_clear"" [label=""clear""];
""121_withdraw"" [label=""withdraw""];
""121_constructor"" [label=""constructor""];
}
"
0xb417fa71a03a9badbf962589f2478353fd5693e2.sol,CoinDisplayNetwork,"contract CoinDisplayNetwork is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CoinDisplayNetwork() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xd76618b352D0bFC8014Fc44BF31Bd0F947331660] = _totalSupply; Transfer(address(0), 0xd76618b352D0bFC8014Fc44BF31Bd0F947331660, _totalSupply); }",1,"subgraph cluster_543_CoinDisplayNetwork {
label=""CoinDisplayNetwork"";
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_CoinDisplayNetwork"" [label=""CoinDisplayNetwork""];
""543_allowance"" [label=""allowance""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x6bff83c6d87b1adff6679c75abac82fe7c38d7cf.sol,EasyInvestTurbo,contract EasyInvestTurbo { mapping (address => uint256) public invested; mapping (address => uint256) public atBlock; function () external payable { if (invested[msg.sender] != 0) { uint256 amount = invested[msg.sender] * 12 / 100 * (block.number - atBlock[msg.sender]) / 5900; msg.sender.transfer(amount); },1,"subgraph cluster_96_EasyInvestTurbo {
label=""EasyInvestTurbo"";
""96_constructor"" [label=""constructor""];
""96_fallback"" [label=""fallback""];
""96_p"" [label=""p""];
}
"
0x411be588940376ae23e58274ad4fe175f85e5ca1.sol,FLICoin,"contract FLICoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 4; _totalSupply = 10000000000; balances[0xe03766D5219C40970126a6f139aae20dDA81Dcf5] = _totalSupply; emit Transfer(address(0), 0xe03766D5219C40970126a6f139aae20dDA81Dcf5, _totalSupply); }",1,"subgraph cluster_575_FLICoin {
label=""FLICoin"";
""575_fallback"" [label=""fallback""];
""575_approve"" [label=""approve""];
""575_constructor"" [label=""constructor""];
""575_balanceOf"" [label=""balanceOf""];
""575_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""575_allowance"" [label=""allowance""];
""575_transferFrom"" [label=""transferFrom""];
""575_totalSupply"" [label=""totalSupply""];
""575_transfer"" [label=""transfer""];
""575_approveAndCall"" [label=""approveAndCall""];
""575_transferFrom"" -> ""575_safeAdd"";
""575_transfer"" -> ""575_safeSub"";
""575_transfer"" -> ""575_safeAdd"";
""575_transferFrom"" -> ""575_safeSub"";
""575_transferAnyERC20Token"" -> ""575_onlyOwner"";
}
"
0xc3a684140448995f6abeb361c56110207da04d57.sol,SignalsSociety,"contract SignalsSociety is Ownable, Memberships { event Deposited(address account, uint amount, uint balance, uint timestamp); event MembershipPaid(address account, Membership membership, uint timestamp); mapping (address => uint) public balances; function deposit(address account, uint amount) public { balances[account] += amount; Deposited(account, amount, balances[account], now); }",1,"subgraph cluster_258_SignalsSociety {
label=""SignalsSociety"";
""258_acceptMembership"" [label=""acceptMembership""];
""258_deposit"" [label=""deposit""];
""258_fallback"" [label=""fallback""];
""258_acceptMembership"" -> ""258_getMembershipPrice"";
""258_acceptMembership"" -> ""258_onlyBot"";
""258_fallback"" -> ""258_deposit"";
}
"
0x207c92740ccbe446ac2e2f43fe1da52651cd8d3c.sol,TJK,"contract TJK { uint256 public totalSupply; string public name; uint256 public decimals; string public symbol; address public owner; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; function TJK(uint256 _totalSupply, string _symbol, string _name, uint8 _decimalUnits) public { decimals = _decimalUnits; symbol = _symbol; name = _name; owner = msg.sender; totalSupply = _totalSupply * (10 ** decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_285_TJK {
label=""TJK"";
""285_transfer"" [label=""transfer""];
""285_allowance"" [label=""allowance""];
""285_approve"" [label=""approve""];
""285_balanceOf"" [label=""balanceOf""];
""285_TJK"" [label=""TJK""];
""285_transferFrom"" [label=""transferFrom""];
""285_mint"" [label=""mint""];
""285_transfer"" -> ""285_onlyPayloadSize"";
}
"
0x36ebdbe660c0b988b83c257a779b908697d41615.sol,ArteufToken,contract ArteufToken is Ownable{ string public name = ; string public symbol = ; uint256 public decimals = 18; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 100000000 * 10**18; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_414_ArteufToken {
label=""ArteufToken"";
""414_stop"" [label=""stop""];
""414_setName"" [label=""setName""];
""414_burn"" [label=""burn""];
""414_start"" [label=""start""];
""414_ArteufToken"" [label=""ArteufToken""];
""414_approve"" [label=""approve""];
""414_transferFrom"" [label=""transferFrom""];
""414_transfer"" [label=""transfer""];
""414_transferFrom"" -> ""414_validAddress"";
""414_setName"" -> ""414_isOwner"";
""414_approve"" -> ""414_validAddress"";
""414_approve"" -> ""414_isRunning"";
""414_transferFrom"" -> ""414_isRunning"";
""414_stop"" -> ""414_isOwner"";
""414_transfer"" -> ""414_validAddress"";
""414_start"" -> ""414_isOwner"";
""414_transfer"" -> ""414_isRunning"";
}
"
0x6c72582241de57e6fd501a99d85c650924039a50.sol,WHC,"contract WHC { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function WHC ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_WHC {
label=""WHC"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_WHC"" [label=""WHC""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x4d5ed54e732cc6cd3ebcce015e3d80c6dc181b06.sol,TokenTWL,"contract TokenTWL { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenTWL( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_TokenTWL {
label=""TokenTWL"";
""380_approve"" [label=""approve""];
""380_approveAndCall"" [label=""approveAndCall""];
""380__transfer"" [label=""_transfer""];
""380_TokenTWL"" [label=""TokenTWL""];
""380_burnFrom"" [label=""burnFrom""];
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_burn"" [label=""burn""];
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0x33116db6c6942903653e74d9580f0f7c7abe1cbe.sol,VanityLib,"contract VanityLib { uint constant m = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f; function lengthOfCommonPrefix(bytes a, bytes b) public pure returns(uint) { uint len = (a.length <= b.length) ? a.length : b.length; for (uint i = 0; i < len; i++) { if (a[i] != b[i]) { return i; }",1,"subgraph cluster_1536_VanityLib {
label=""VanityLib"";
""1536_equalBytes32ToBytes"" [label=""equalBytes32ToBytes""];
""1536_toBase58Checked"" [label=""toBase58Checked""];
""1536_complexityForBtcAddressPrefix"" [label=""complexityForBtcAddressPrefix""];
""1536_doubleXY"" [label=""doubleXY""];
""1536_complexityForBtcAddressPrefixWithLength"" [label=""complexityForBtcAddressPrefixWithLength""];
""1536_addXY"" [label=""addXY""];
""1536_lengthOfCommonPrefix32"" [label=""lengthOfCommonPrefix32""];
""1536_lengthOfCommonPrefix"" [label=""lengthOfCommonPrefix""];
""1536_isValidPublicKey"" [label=""isValidPublicKey""];
""1536_lengthOfCommonPrefix3232"" [label=""lengthOfCommonPrefix3232""];
""1536_invmod"" [label=""invmod""];
""1536_createBtcAddressHex"" [label=""createBtcAddressHex""];
""1536_mulXY"" [label=""mulXY""];
""1536_bytesToBytes32"" [label=""bytesToBytes32""];
""1536_bitcoinPublicKey"" [label=""bitcoinPublicKey""];
""1536_createBtcAddress"" [label=""createBtcAddress""];
""1536_equalBytesToBytes"" [label=""equalBytesToBytes""];
""1536_isValidBicoinAddressPrefix"" [label=""isValidBicoinAddressPrefix""];
""1536_submod"" [label=""submod""];
""1536_countBtcAddressLeadingOnes"" [label=""countBtcAddressLeadingOnes""];
""1536_addXY"" -> ""1536_submod"";
""1536_createBtcAddress"" -> ""1536_createBtcAddressHex"";
""1536_addXY"" -> ""1536_invmod"";
""1536_complexityForBtcAddressPrefixWithLength"" -> ""1536_countBtcAddressLeadingOnes"";
""1536_complexityForBtcAddressPrefix"" -> ""1536_complexityForBtcAddressPrefixWithLength"";
""1536_mulXY"" -> ""1536_addXY"";
""1536_toBase58Checked"" -> ""1536_bytesToBytes32"";
""1536_mulXY"" -> ""1536_doubleXY"";
""1536_doubleXY"" -> ""1536_invmod"";
""1536_bitcoinPublicKey"" -> ""1536_mulXY"";
""1536_createBtcAddressHex"" -> ""1536_bytesToBytes32"";
""1536_doubleXY"" -> ""1536_submod"";
""1536_createBtcAddress"" -> ""1536_toBase58Checked"";
}
"
0x0e8d6b471e332f140e7d9dbb99e5e3822f728da6.sol,MultiOwnable,contract MultiOwnable { address public manager; address[] public owners; mapping(address => bool) public ownerByAddress; event SetOwners(address[] owners); modifier onlyOwner() { require(ownerByAddress[msg.sender] == true); _; },1,"subgraph cluster_122_MultiOwnable {
label=""MultiOwnable"";
""122_MultiOwnable"" [label=""MultiOwnable""];
""122__setOwners"" [label=""_setOwners""];
""122_setOwners"" [label=""setOwners""];
""122_getOwners"" [label=""getOwners""];
""122_setOwners"" -> ""122__setOwners"";
}
"
0xf3dce610acbfbcbb4efc12c4c2e3be063128baad.sol,NumbersToken2,"contract NumbersToken2 { uint256 constant PRECISION = 0x10000000000000000; int constant CRRN = 1; int constant CRRD = 2; int constant LOGC = -0x296ABF784A358468C; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public totalSupply; mapping(address => uint256) public balanceOfOld; mapping(address => mapping(address => uint256)) public allowance; mapping(address => int256) payouts; int256 totalPayouts; uint256 earningsPerShare; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function NumbersToken() public { }",1,"subgraph cluster_987_NumbersToken2 {
label=""NumbersToken2"";
""987_getTokensForEther"" [label=""getTokensForEther""];
""987_transferTokens"" [label=""transferTokens""];
""987_buy"" [label=""buy""];
""987_sell"" [label=""sell""];
""987_buyPrice"" [label=""buyPrice""];
""987_fallback"" [label=""fallback""];
""987_balanceOf"" [label=""balanceOf""];
""987_fixedLog"" [label=""fixedLog""];
""987_transfer"" [label=""transfer""];
""987_dividends"" [label=""dividends""];
""987_fixedExp"" [label=""fixedExp""];
""987_balance"" [label=""balance""];
""987_reserve"" [label=""reserve""];
""987_sellMyTokensDaddy"" [label=""sellMyTokensDaddy""];
""987_NumbersToken"" [label=""NumbersToken""];
""987_fund"" [label=""fund""];
""987_getEtherForTokens"" [label=""getEtherForTokens""];
""987_transferFrom"" [label=""transferFrom""];
""987_withdrawOld"" [label=""withdrawOld""];
""987_sellPrice"" [label=""sellPrice""];
""987_approve"" [label=""approve""];
""987_withdraw"" [label=""withdraw""];
""987_getMeOutOfHere"" [label=""getMeOutOfHere""];
""987_getMeOutOfHere"" -> ""987_sellMyTokensDaddy"";
""987_withdrawOld"" -> ""987_dividends"";
""987_buy"" -> ""987_reserve"";
""987_reserve"" -> ""987_balance"";
""987_sell"" -> ""987_getEtherForTokens"";
""987_fund"" -> ""987_buy"";
""987_getTokensForEther"" -> ""987_reserve"";
""987_getTokensForEther"" -> ""987_fixedExp"";
""987_getEtherForTokens"" -> ""987_reserve"";
""987_buyPrice"" -> ""987_getTokensForEther"";
""987_fallback"" -> ""987_buy"";
""987_getEtherForTokens"" -> ""987_fixedLog"";
""987_sellMyTokensDaddy"" -> ""987_transferTokens"";
""987_getEtherForTokens"" -> ""987_fixedExp"";
""987_sellPrice"" -> ""987_getEtherForTokens"";
""987_buy"" -> ""987_getTokensForEther"";
""987_sellMyTokensDaddy"" -> ""987_balanceOf"";
""987_transferFrom"" -> ""987_transferTokens"";
""987_withdraw"" -> ""987_dividends"";
""987_transferTokens"" -> ""987_sell"";
""987_getTokensForEther"" -> ""987_fixedLog"";
""987_getMeOutOfHere"" -> ""987_withdraw"";
""987_fallback"" -> ""987_withdrawOld"";
""987_transfer"" -> ""987_transferTokens"";
}
"
0x1b27c2c096ae7e408eef72731fa5ea7e753054de.sol,SUSIToken,"contract SUSIToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function SUSIToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_SUSIToken {
label=""SUSIToken"";
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_SUSIToken"" [label=""SUSIToken""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x742a56a727dac07e0889920b8887d482325f659b.sol,InfiniCoin,"contract InfiniCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 2; _totalSupply = 2100000; balances[0x70Fe2224D604424e7e574Dc0E0B96DB609Bb40B9] = _totalSupply; emit Transfer(address(0), 0x70Fe2224D604424e7e574Dc0E0B96DB609Bb40B9, _totalSupply); }",1,"subgraph cluster_543_InfiniCoin {
label=""InfiniCoin"";
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_constructor"" [label=""constructor""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x37d9033151eaf64cea6b7531ee0e4fd6f6f9d6d0.sol,EthCrystal,contract EthCrystal { using SafeMath for *; struct TowersInfoList { string name; uint256 timeLimit; uint256 warriorToTime; uint256 currentRoundID; uint256 growthCoefficient; uint256 winnerShare; uint256 nextRound; uint256 dividendShare; mapping (uint256 => TowersInfo) RoundList; },1,"subgraph cluster_1370_EthCrystal {
label=""EthCrystal"";
""1370__playerRoundsInfo"" [label=""_playerRoundsInfo""];
""1370_buyWarriors"" [label=""buyWarriors""];
""1370__playerInfo"" [label=""_playerInfo""];
""1370_newRound"" [label=""newRound""];
""1370_referralCashout"" [label=""referralCashout""];
""1370_dividendCashout"" [label=""dividendCashout""];
""1370_constructor"" [label=""constructor""];
""1370_setNickname"" [label=""setNickname""];
""1370__playerBalance"" [label=""_playerBalance""];
""1370__TowerRoundDetails"" [label=""_TowerRoundDetails""];
""1370__currentPlayerAmountUnclaimed"" [label=""_currentPlayerAmountUnclaimed""];
""1370_buyWarriors"" -> ""1370_newRound"";
""1370__playerRoundsInfo"" -> ""1370__currentPlayerAmountUnclaimed"";
""1370_buyWarriors"" -> ""1370_setNickname"";
""1370_constructor"" -> ""1370_newRound"";
}
"
0x4c29be83d5dc0bb45faffa6af3f35a7b5862ff54.sol,BurnToken,"contract BurnToken is BaseToken { event Burn(address indexed from, uint256 value); function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); balanceOf[msg.sender] -= _value; totalSupply -= _value; Burn(msg.sender, _value); return true; }",1,"subgraph cluster_299_BurnToken {
label=""BurnToken"";
""299_burnFrom"" [label=""burnFrom""];
""299_burn"" [label=""burn""];
}
"
0x454a5244556e044ad6ecfcf3f59290fae47484e8.sol,BasicToken,"contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; function transfer(address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_202_BasicToken {
label=""BasicToken"";
""202_transfer"" [label=""transfer""];
""202_balanceOf"" [label=""balanceOf""];
}
"
0x35ae44bc4e3186ca732efa09a459cf93fa491a47.sol,XMLYToken,"contract XMLYToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; mapping(address => bool) freezed; mapping(address => uint) freezeAmount; mapping(address => uint) unlockTime; function XMLYToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000000; balances[0x5B807E379170d42f3B099C01A5399a2e1e58963B] = _totalSupply; Transfer(address(0), 0x5B807E379170d42f3B099C01A5399a2e1e58963B, _totalSupply); }",1,"subgraph cluster_799_XMLYToken {
label=""XMLYToken"";
""799_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""799_XMLYToken"" [label=""XMLYToken""];
""799_allowance"" [label=""allowance""];
""799_unFreeze"" [label=""unFreeze""];
""799_approve"" [label=""approve""];
""799_freeze"" [label=""freeze""];
""799_ifFreeze"" [label=""ifFreeze""];
""799_balanceOf"" [label=""balanceOf""];
""799_totalSupply"" [label=""totalSupply""];
""799_burn"" [label=""burn""];
""799_fallback"" [label=""fallback""];
""799_transfer"" [label=""transfer""];
""799_transferFrom"" [label=""transferFrom""];
""799_approveAndCall"" [label=""approveAndCall""];
""799_burn"" -> ""799_safeSub"";
""799_burn"" -> ""799_onlyOwner"";
""799_freeze"" -> ""799_onlyOwner"";
""799_transferFrom"" -> ""799_safeSub"";
""799_transferFrom"" -> ""799_safeAdd"";
""799_transfer"" -> ""799_safeAdd"";
""799_transferAnyERC20Token"" -> ""799_onlyOwner"";
""799_transfer"" -> ""799_safeSub"";
}
"
0xf02904cbf8e5134aeaf45626e96b782ed233fe04.sol,BWCToken,contract BWCToken is Ownable{ uint256 public totalSupply; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 4; uint constant start = 1517418000; uint constant period = 87; uint256 public constant hardcap = 25 * 1000000 * (10 ** uint256(decimals)); bool public transferAllowed = true; bool public mintingFinished = false; modifier whenTransferAllowed() { if(msg.sender != owner){ require(transferAllowed); },1,"subgraph cluster_579_BWCToken {
label=""BWCToken"";
""579_burn"" [label=""burn""];
""579_allowance"" [label=""allowance""];
""579_transfer"" [label=""transfer""];
""579_allowTransfer"" [label=""allowTransfer""];
""579_balanceOf"" [label=""balanceOf""];
""579_finishMinting"" [label=""finishMinting""];
""579_transferFrom"" [label=""transferFrom""];
""579_approve"" [label=""approve""];
""579_mint"" [label=""mint""];
""579_burnFrom"" [label=""burnFrom""];
""579_mint"" -> ""579_saleIsOn"";
""579_transfer"" -> ""579_whenTransferAllowed"";
""579_finishMinting"" -> ""579_onlyOwner"";
""579_allowTransfer"" -> ""579_onlyOwner"";
""579_mint"" -> ""579_canMint"";
""579_mint"" -> ""579_transfer"";
""579_transferFrom"" -> ""579_whenTransferAllowed"";
""579_mint"" -> ""579_onlyOwner"";
}
"
0xf165c0df0b759e93e6166aecb667c7ec2a300525.sol,StandarTokentokenGAT,"contract StandarTokentokenGAT is tokenGAT{ mapping (address => uint256) balances; mapping (address => uint256 ) weirecives; mapping (address => mapping (address => uint256)) allowed; function allowance(address _owner, address _spender) constant returns (uint256) { return allowed[_owner][_spender]; }",1,"subgraph cluster_306_StandarTokentokenGAT {
label=""StandarTokentokenGAT"";
""306_approve"" [label=""approve""];
""306_transferFrom"" [label=""transferFrom""];
""306_allowance"" [label=""allowance""];
""306_transfer"" [label=""transfer""];
""306_balanceOf"" [label=""balanceOf""];
}
"
0x587be3718e68f144f6dade2e50f28af95dd4be7e.sol,Fast20,contract Fast20 { mapping (address => uint256) dates; mapping (address => uint256) invests; function() external payable { address sender = msg.sender; if (invests[sender] != 0) { uint256 payout = invests[sender] / 100 * 20 * (now - dates[sender]) / 1 days; if (payout > address(this).balance) { payout = address(this).balance; },1,"subgraph cluster_79_Fast20 {
label=""Fast20"";
""79_fallback"" [label=""fallback""];
}
"
0x5a82601f0fd69ed6eb496e258fde8ca1b7b77696.sol,VOCC_I003_20181211,"contract VOCC_I003_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I003_20181211 {
label=""VOCC_I003_20181211"";
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x266fe968ce45fa3373726329ce6104b9ca4a9c66.sol,LinkedList,contract LinkedList { struct Element { uint previous; uint next; address data; },1,"subgraph cluster_511_LinkedList {
label=""LinkedList"";
""511_addItem"" [label=""addItem""];
""511_getAllElements"" [label=""getAllElements""];
""511_getElementAt"" [label=""getElementAt""];
""511_getNextElement"" [label=""getNextElement""];
""511_removeItem"" [label=""removeItem""];
""511_getElementLocation"" [label=""getElementLocation""];
}
"
0xf46f049967ed63b864a7f6cdf91d6dac9ea23b2c.sol,WhaleKiller,contract WhaleKiller { address WhaleAddr; uint constant interest = 5; uint constant whalefee = 1; uint constant maxRoi = 150; uint256 amount = 0; mapping (address => uint256) invested; mapping (address => uint256) timeInvest; mapping (address => uint256) rewards; constructor() public { WhaleAddr = msg.sender; },1,"subgraph cluster_266_WhaleKiller {
label=""WhaleKiller"";
""266_showUnpaidInterest"" [label=""showUnpaidInterest""];
""266_showDeposit"" [label=""showDeposit""];
""266_showWhaleAddr"" [label=""showWhaleAddr""];
""266_fallback"" [label=""fallback""];
""266_showRewards"" [label=""showRewards""];
""266_constructor"" [label=""constructor""];
}
"
0x48ee772b8c8927d8d32afc8961fbc177fb723637.sol,Contribution,"contract Contribution is SafeMath, Owned { uint256 public constant MIN_FUND = (0.01 ether); uint256 public constant CRAWDSALE_START_DAY = 1; uint256 public constant CRAWDSALE_END_DAY = 7; uint256 public dayCycle = 24 hours; uint256 public fundingStartTime = 0; address public ethFundDeposit = 0; address public investorDeposit = 0; bool public isFinalize = false; bool public isPause = false; mapping (uint => uint) public dailyTotals; mapping (uint => mapping (address => uint)) public userBuys; uint256 public totalContributedETH = 0; event LogBuy (uint window, address user, uint amount); event LogCreate (address ethFundDeposit, address investorDeposit, uint fundingStartTime, uint dayCycle); event LogFinalize (uint finalizeTime); event LogPause (uint finalizeTime, bool pause); function Contribution (address _ethFundDeposit, address _investorDeposit, uint256 _fundingStartTime, uint256 _dayCycle) { require( now < _fundingStartTime ); require( _ethFundDeposit != address(0) ); fundingStartTime = _fundingStartTime; dayCycle = _dayCycle; ethFundDeposit = _ethFundDeposit; investorDeposit = _investorDeposit; LogCreate(_ethFundDeposit, _investorDeposit, _fundingStartTime,_dayCycle); }",1,"subgraph cluster_903_Contribution {
label=""Contribution"";
""903_buy"" [label=""buy""];
""903_fallback"" [label=""fallback""];
""903_pause"" [label=""pause""];
""903_kill"" [label=""kill""];
""903_Contribution"" [label=""Contribution""];
""903_importExchangeSale"" [label=""importExchangeSale""];
""903_finalize"" [label=""finalize""];
""903_today"" [label=""today""];
""903_kill"" -> ""903_onlyOwner"";
""903_fallback"" -> ""903_today"";
""903_today"" -> ""903_sub"";
""903_importExchangeSale"" -> ""903_onlyOwner"";
""903_pause"" -> ""903_onlyOwner"";
""903_fallback"" -> ""903_buy"";
""903_finalize"" -> ""903_onlyOwner"";
""903_importExchangeSale"" -> ""903_buy"";
}
"
0x1edcb0dcc0ee685bbea86f5a31a776029f02c7d3.sol,TokenDistribute,contract TokenDistribute is OwnerHelper { uint public E18 = 10 ** 18; constructor() public { },1,"subgraph cluster_166_TokenDistribute {
label=""TokenDistribute"";
""166_constructor"" [label=""constructor""];
""166_multipleTokenDistribute"" [label=""multipleTokenDistribute""];
""166_multipleTokenDistribute"" -> ""166_onlyOwner"";
}
"
0x268ec2ff9bb1c27b744f465ff25be9d578096c1e.sol,ASBTToken,"contract ASBTToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 500000000 * 10**uint(decimals); balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_603_ASBTToken {
label=""ASBTToken"";
""603_totalSupply"" [label=""totalSupply""];
""603_BurnToken"" [label=""BurnToken""];
""603_transfer"" [label=""transfer""];
""603_allowance"" [label=""allowance""];
""603_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""603_balanceOf"" [label=""balanceOf""];
""603_fallback"" [label=""fallback""];
""603_approve"" [label=""approve""];
""603_approveAndCall"" [label=""approveAndCall""];
""603_constructor"" [label=""constructor""];
""603_transferFrom"" [label=""transferFrom""];
""603_transferAnyERC20Token"" -> ""603_onlyOwner"";
}
"
0x6ce17d826a1c50e97678810954943c83ebd10066.sol,StandardToken,"contract StandardToken is Token { uint256 constant MAX_UINT256 = 2**256 - 1; function transfer(address _to, uint256 _value) public returns (bool success) { require(balances[msg.sender] >= _value); balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_249_StandardToken {
label=""StandardToken"";
""249_transfer"" [label=""transfer""];
""249_transferFrom"" [label=""transferFrom""];
""249_allowance"" [label=""allowance""];
""249_balanceOf"" [label=""balanceOf""];
""249_approve"" [label=""approve""];
}
"
0x5258e585f8efe5d7ecca0a9232fc26fd8ca02436.sol,KCOIN,"contract KCOIN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function KCOIN( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_KCOIN {
label=""KCOIN"";
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_KCOIN"" [label=""KCOIN""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x1dcadad44aa14154e2393d83edf6c7c6f83cb795.sol,DoggyEthPics,"contract DoggyEthPics is ERC721, Ownable { event DoggyCreated(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.01 ether; mapping (uint256 => address) public doggyIdToOwner; mapping (uint256 => address) public doggyIdToDivs; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public doggyIdToApproved; mapping (uint256 => uint256) private doggyIdToPrice; struct Doggy { string name; }",1,"subgraph cluster_1221_DoggyEthPics {
label=""DoggyEthPics"";
""1221_symbol"" [label=""symbol""];
""1221_takeOwnership"" [label=""takeOwnership""];
""1221_changeDoggy"" [label=""changeDoggy""];
""1221_implementsERC721"" [label=""implementsERC721""];
""1221__owns"" [label=""_owns""];
""1221__approved"" [label=""_approved""];
""1221_create3DoggiesTokens"" [label=""create3DoggiesTokens""];
""1221_totalSupply"" [label=""totalSupply""];
""1221_transfer"" [label=""transfer""];
""1221_ownerOf"" [label=""ownerOf""];
""1221_getDoggy"" [label=""getDoggy""];
""1221_purchase"" [label=""purchase""];
""1221_tokensOfOwner"" [label=""tokensOfOwner""];
""1221_name"" [label=""name""];
""1221__createDoggy"" [label=""_createDoggy""];
""1221_priceOf"" [label=""priceOf""];
""1221__addressNotNull"" [label=""_addressNotNull""];
""1221_ALLownersANDprices"" [label=""ALLownersANDprices""];
""1221_transferFrom"" [label=""transferFrom""];
""1221_createDoggyToken"" [label=""createDoggyToken""];
""1221_approve"" [label=""approve""];
""1221__transfer"" [label=""_transfer""];
""1221_balanceOf"" [label=""balanceOf""];
""1221_createDoggyToken"" -> ""1221__createDoggy"";
""1221_tokensOfOwner"" -> ""1221_balanceOf"";
""1221_transfer"" -> ""1221__addressNotNull"";
""1221_purchase"" -> ""1221__addressNotNull"";
""1221_create3DoggiesTokens"" -> ""1221_onlyContractOwner"";
""1221_transferFrom"" -> ""1221__owns"";
""1221_transferFrom"" -> ""1221__transfer"";
""1221_approve"" -> ""1221__owns"";
""1221_takeOwnership"" -> ""1221__addressNotNull"";
""1221_takeOwnership"" -> ""1221__transfer"";
""1221_tokensOfOwner"" -> ""1221_totalSupply"";
""1221_transferFrom"" -> ""1221__addressNotNull"";
""1221_transfer"" -> ""1221__transfer"";
""1221_takeOwnership"" -> ""1221__approved"";
""1221_transferFrom"" -> ""1221__approved"";
""1221_create3DoggiesTokens"" -> ""1221__createDoggy"";
""1221_changeDoggy"" -> ""1221_createDoggyToken"";
""1221_purchase"" -> ""1221__transfer"";
""1221_ALLownersANDprices"" -> ""1221_totalSupply"";
""1221__createDoggy"" -> ""1221__transfer"";
""1221_transfer"" -> ""1221__owns"";
}
"
0x267398927b5886df921b235afe9dbbe47fbcc37d.sol,NobarToken,"contract NobarToken { string public name; string public symbol; uint8 public decimals = 2; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function NobarToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_NobarToken {
label=""NobarToken"";
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_NobarToken"" [label=""NobarToken""];
""361_approve"" [label=""approve""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0xc398fb8a6c71a7b130043bf5a3f05d9d51c2cac8.sol,CHAD,"contract CHAD is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CHAD() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x8F210dbB8FADa47bc090d7923E935267BF53160D] = _totalSupply; Transfer(address(0), 0x8F210dbB8FADa47bc090d7923E935267BF53160D, _totalSupply); }",1,"subgraph cluster_543_CHAD {
label=""CHAD"";
""543_fallback"" [label=""fallback""];
""543_CHAD"" [label=""CHAD""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xb44a823579aa618b96d6f20a3330901e85f96f73.sol,ClockAuctionBase,contract ClockAuctionBase { struct Auction { address seller; uint128 startingPrice; uint128 endingPrice; uint64 duration; uint64 startedAt; },1,"subgraph cluster_569_ClockAuctionBase {
label=""ClockAuctionBase"";
""569__removeAuction"" [label=""_removeAuction""];
""569__bid"" [label=""_bid""];
""569__escrow"" [label=""_escrow""];
""569__owns"" [label=""_owns""];
""569__addAuction"" [label=""_addAuction""];
""569__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""569__isOnAuction"" [label=""_isOnAuction""];
""569__computeCut"" [label=""_computeCut""];
""569__currentPrice"" [label=""_currentPrice""];
""569__transfer"" [label=""_transfer""];
""569__cancelAuction"" [label=""_cancelAuction""];
""569__cancelAuction"" -> ""569__transfer"";
""569__bid"" -> ""569__currentPrice"";
""569__bid"" -> ""569__removeAuction"";
""569__currentPrice"" -> ""569__computeCurrentPrice"";
""569__bid"" -> ""569__isOnAuction"";
""569__bid"" -> ""569__computeCut"";
""569__cancelAuction"" -> ""569__removeAuction"";
}
"
0x5292eb1d4f669e697ad14e55d151013969485711.sol,WorkValley,"contract WorkValley { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function WorkValley( ) public { totalSupply = 1000000000 * 10 ** 8; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_353_WorkValley {
label=""WorkValley"";
""353_burn"" [label=""burn""];
""353_approve"" [label=""approve""];
""353_transferFrom"" [label=""transferFrom""];
""353_transfer"" [label=""transfer""];
""353_approveAndCall"" [label=""approveAndCall""];
""353_burnFrom"" [label=""burnFrom""];
""353_WorkValley"" [label=""WorkValley""];
""353__transfer"" [label=""_transfer""];
""353_transferFrom"" -> ""353__transfer"";
""353_approveAndCall"" -> ""353_approve"";
""353_transfer"" -> ""353__transfer"";
}
"
0x34737a1ed7508ca6bda6747825c901831f3cd8c0.sol,Weko,"contract Weko { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public funds; address public director; bool public saleClosed; bool public directorLock; uint256 public claimAmount; uint256 public payAmount; uint256 public feeAmount; uint256 public epoch; uint256 public retentionMax; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public buried; mapping (address => uint256) public claimed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed _from, uint256 _value); event Bury(address indexed _target, uint256 _value); event Claim(address indexed _target, address indexed _payout, address indexed _fee); function Weko() public { director = msg.sender; name = ; symbol = ; decimals = 8; saleClosed = true; directorLock = false; funds = 0; totalSupply = 0; totalSupply += 20000000 * 10 ** uint256(decimals); balances[director] = totalSupply; claimAmount = 20 * 10 ** (uint256(decimals) - 1); payAmount = 10 * 10 ** (uint256(decimals) - 1); feeAmount = 10 * 10 ** (uint256(decimals) - 1); epoch = 31536000; retentionMax = 40 * 10 ** uint256(decimals); }",1,"subgraph cluster_1028_Weko {
label=""Weko"";
""1028_selfLock"" [label=""selfLock""];
""1028_openSale"" [label=""openSale""];
""1028_burnFrom"" [label=""burnFrom""];
""1028_approve"" [label=""approve""];
""1028_closeSale"" [label=""closeSale""];
""1028_bury"" [label=""bury""];
""1028_claim"" [label=""claim""];
""1028_approveAndCall"" [label=""approveAndCall""];
""1028_amendEpoch"" [label=""amendEpoch""];
""1028_balanceOf"" [label=""balanceOf""];
""1028_fallback"" [label=""fallback""];
""1028_transferDirector"" [label=""transferDirector""];
""1028_amendRetention"" [label=""amendRetention""];
""1028_transferFrom"" [label=""transferFrom""];
""1028_amendClaim"" [label=""amendClaim""];
""1028_transfer"" [label=""transfer""];
""1028__transfer"" [label=""_transfer""];
""1028_withdrawFunds"" [label=""withdrawFunds""];
""1028_burn"" [label=""burn""];
""1028_Weko"" [label=""Weko""];
""1028_amendClaim"" -> ""1028_onlyDirector"";
""1028_withdrawFunds"" -> ""1028_onlyDirectorForce"";
""1028_transferDirector"" -> ""1028_onlyDirectorForce"";
""1028_transferFrom"" -> ""1028__transfer"";
""1028_amendEpoch"" -> ""1028_onlyDirector"";
""1028_transfer"" -> ""1028__transfer"";
""1028_selfLock"" -> ""1028_onlyDirector"";
""1028_approveAndCall"" -> ""1028_approve"";
""1028_amendRetention"" -> ""1028_onlyDirector"";
""1028_openSale"" -> ""1028_onlyDirector"";
""1028_closeSale"" -> ""1028_onlyDirector"";
}
"
0x40b5ccf92f9c980fbc6f2f0c0af7a4afff0f7c48.sol,TokenERC20,"contract TokenERC20 { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 100000000; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { require(initialSupply > 100); totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_370_TokenERC20 {
label=""TokenERC20"";
""370__transfer"" [label=""_transfer""];
""370_burn"" [label=""burn""];
""370_transferFrom"" [label=""transferFrom""];
""370_approve"" [label=""approve""];
""370_constructor"" [label=""constructor""];
""370_transfer"" [label=""transfer""];
""370_burnFrom"" [label=""burnFrom""];
""370_approveAndCall"" [label=""approveAndCall""];
""370_approveAndCall"" -> ""370_approve"";
""370_transferFrom"" -> ""370__transfer"";
""370_transfer"" -> ""370__transfer"";
}
"
0xbe4411737170e852ea275d235145ceab77e0fe73.sol,VouchCoin,"contract VouchCoin is Ownable, ERC20Interface { using SafeMath for uint; uint public _totalSupply = 10000000000000000; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; string public standard = ; mapping (address => uint) balances; mapping (address => mapping (address => uint)) allowances; event Burn(address indexed _from, uint _value); function VouchCoin() public { balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_525_VouchCoin {
label=""VouchCoin"";
""525_approveAndCall"" [label=""approveAndCall""];
""525_totalSupply"" [label=""totalSupply""];
""525_VouchCoin"" [label=""VouchCoin""];
""525_approve"" [label=""approve""];
""525_transfer"" [label=""transfer""];
""525_balanceOf"" [label=""balanceOf""];
""525_burnTokens"" [label=""burnTokens""];
""525_transferFrom"" [label=""transferFrom""];
""525_allowance"" [label=""allowance""];
""525_burnTokens"" -> ""525_onlyOwner"";
""525_approveAndCall"" -> ""525_approve"";
}
"
0x5bd7b9cd17cee4d2fae01d9695e83098cf409488.sol,Queue,contract Queue { address constant private PROMO1 = 0x0569E1777f2a7247D27375DB1c6c2AF9CE9a9C15; address constant private PROMO2 = 0xF892380E9880Ad0843bB9600D060BA744365EaDf; address constant private PROMO3 = 0x35aAF2c74F173173d28d1A7ce9d255f639ac1625; address constant private PRIZE = 0xa93E50526B63760ccB5fAD6F5107FA70d36ABC8b; uint constant public PROMO_PERCENT = 2; uint constant public BONUS_PERCENT = 3; struct Deposit { address depositor; uint deposit; uint payout; },1,"subgraph cluster_336_Queue {
label=""Queue"";
""336_fallback"" [label=""fallback""];
""336_getQueueLength"" [label=""getQueueLength""];
""336_getDepositsCount"" [label=""getDepositsCount""];
""336_pay"" [label=""pay""];
""336_fallback"" -> ""336_pay"";
}
"
0x28f01187b61d799f6d90a7c8c5325a9de95f025d.sol,Sender,contract Sender is admined { token public DEEM; function Sender (token _addressOfToken) public { DEEM = _addressOfToken; },1,"subgraph cluster_126_Sender {
label=""Sender"";
""126_Sender"" [label=""Sender""];
""126_fallback"" [label=""fallback""];
""126_batch"" [label=""batch""];
""126_batch"" -> ""126_onlyAdmin"";
}
"
0x0dfb14c2db6c9824d3210ed7e2689e1a51a8e954.sol,PriceGet,contract PriceGet { using SafeMath for uint; Oasis market; address public marketAddress; address public dai = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359; address public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; mapping( address => uint256 ) public locked; mapping( address => uint256 ) public tokenBalance; constructor(address addr) public { marketAddress = addr; market = Oasis(marketAddress); },1,"subgraph cluster_284_PriceGet {
label=""PriceGet"";
""284_deposit"" [label=""deposit""];
""284_burn"" [label=""burn""];
""284_mint"" [label=""mint""];
""284_tokenValue"" [label=""tokenValue""];
""284_withdraw"" [label=""withdraw""];
""284_constructor"" [label=""constructor""];
""284_getPrice"" [label=""getPrice""];
""284_mint"" -> ""284_getPrice"";
""284_tokenValue"" -> ""284_getPrice"";
}
"
0x1ea9fa167fdc4ae4c13e9e904d26aadf010d097b.sol,Token,"contract Token is EIP20Interface, Ownable, SafeMath, Mintable, Lockable, FeeCalculator { mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; mapping(address => bool) frozenAddresses; string public name; uint8 public decimals; string public symbol; bool public isBurnable; bool public canAnyoneBurn; modifier notFrozen(address target) { require(!frozenAddresses[target]); _; }",1,"subgraph cluster_850_Token {
label=""Token"";
""850_isAddressFrozen"" [label=""isAddressFrozen""];
""850_allowance"" [label=""allowance""];
""850_Token"" [label=""Token""];
""850_transfer"" [label=""transfer""];
""850_subtractFee"" [label=""subtractFee""];
""850_withdrawFees"" [label=""withdrawFees""];
""850_freezeAddress"" [label=""freezeAddress""];
""850_burn"" [label=""burn""];
""850_balanceOf"" [label=""balanceOf""];
""850_transferFrom"" [label=""transferFrom""];
""850_mint"" [label=""mint""];
""850_setBurnPolicy"" [label=""setBurnPolicy""];
""850_approve"" [label=""approve""];
""850_transfer"" -> ""850_transfer"";
""850_freezeAddress"" -> ""850_onlyOwner"";
""850_transfer"" -> ""850_subtractFee"";
""850_transferFrom"" -> ""850_notLocked"";
""850_burn"" -> ""850_safeSub"";
""850_transferFrom"" -> ""850_safeSub"";
""850_mint"" -> ""850_safeAdd"";
""850_transferFrom"" -> ""850_subtractFee"";
""850_transfer"" -> ""850_notLocked"";
""850_transfer"" -> ""850_safeAdd"";
""850_transfer"" -> ""850_notFrozen"";
""850_subtractFee"" -> ""850_safeAdd"";
""850_transferFrom"" -> ""850_notFrozen"";
""850_transferFrom"" -> ""850_safeAdd"";
""850_transfer"" -> ""850_safeSub"";
""850_withdrawFees"" -> ""850_transfer"";
""850_withdrawFees"" -> ""850_onlyOwner"";
""850_approve"" -> ""850_notLocked"";
""850_mint"" -> ""850_onlyMinter"";
""850_subtractFee"" -> ""850_calculateFee"";
}
"
0x28cb4e001f87dacd8e97250e1312008668bd78a8.sol,multi_user_wallet,contract multi_user_wallet { bytes32 keyHash; address owner; bytes32 wallet_id = 0xcdbb6bf672a7088809e37cb8ce69daed19bf9761445769788e2a2668c46ff036; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_multi_user_wallet {
label=""multi_user_wallet"";
""121_fallback"" [label=""fallback""];
""121_setup_key"" [label=""setup_key""];
""121_constructor"" [label=""constructor""];
""121_withdraw"" [label=""withdraw""];
""121_clear"" [label=""clear""];
""121_get_id"" [label=""get_id""];
""121_new_hash"" [label=""new_hash""];
}
"
0xee522a9bbe2507546aec572cea7be0f250cba0cb.sol,CentaToken,"contract CentaToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CentaToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xFa064973Ad2EF28Ce8e3a306c36CB57cBb9A1d82] = _totalSupply; Transfer(address(0), 0xFa064973Ad2EF28Ce8e3a306c36CB57cBb9A1d82, _totalSupply); }",1,"subgraph cluster_543_CentaToken {
label=""CentaToken"";
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_CentaToken"" [label=""CentaToken""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xec193241dc1ca3bbe3165de6d37a793585b4504e.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); constructor() public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_516_MyAdvancedToken {
label=""MyAdvancedToken"";
""516__transfer"" [label=""_transfer""];
""516_constructor"" [label=""constructor""];
""516_freezeAccount"" [label=""freezeAccount""];
""516_mintToken"" [label=""mintToken""];
""516_freezeAccount"" -> ""516_onlyOwner"";
""516_mintToken"" -> ""516_onlyOwner"";
}
"
0x32cff49cd98e8af9dd2ba3ac370949fb06f6a412.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; uint256 initialSupply=1000000000; string tokenName=; string tokenSymbol=; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_399_TokenERC20 {
label=""TokenERC20"";
""399_burnFrom"" [label=""burnFrom""];
""399_TokenERC20"" [label=""TokenERC20""];
""399_burn"" [label=""burn""];
""399_approveAndCall"" [label=""approveAndCall""];
""399_approve"" [label=""approve""];
""399__transfer"" [label=""_transfer""];
""399_transfer"" [label=""transfer""];
""399_transferFrom"" [label=""transferFrom""];
""399_approveAndCall"" -> ""399_approve"";
""399_transfer"" -> ""399__transfer"";
""399_transferFrom"" -> ""399__transfer"";
}
"
0x70409a44060fbc75a9e44170d025c049c929059e.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_transferFrom"" [label=""transferFrom""];
""256_allowance"" [label=""allowance""];
""256_transfer"" [label=""transfer""];
""256_approve"" [label=""approve""];
""256_balanceOf"" [label=""balanceOf""];
}
"
0xc801e2ca666fdfcb43cf29b972d7f3731436e4a1.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396__transfer"" [label=""_transfer""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_burn"" [label=""burn""];
""396_burnFrom"" [label=""burnFrom""];
""396_transfer"" [label=""transfer""];
""396_transferFrom"" [label=""transferFrom""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_approve"" [label=""approve""];
""396_transfer"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transferFrom"" -> ""396__transfer"";
}
"
0x6ced978feaa31ad4c2acdd5eae4e034f2ac3919b.sol,SlowMoon,contract SlowMoon { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1425_SlowMoon {
label=""SlowMoon"";
""1425_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1425_sell"" [label=""sell""];
""1425_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1425_transfer"" [label=""transfer""];
""1425_setAdministrator"" [label=""setAdministrator""];
""1425_buy"" [label=""buy""];
""1425_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1425_setName"" [label=""setName""];
""1425_setSymbol"" [label=""setSymbol""];
""1425_sqrt"" [label=""sqrt""];
""1425_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1425_disableInitialStage"" [label=""disableInitialStage""];
""1425_constructor"" [label=""constructor""];
""1425_fallback"" [label=""fallback""];
""1425_dividendsOf"" [label=""dividendsOf""];
""1425_myTokens"" [label=""myTokens""];
""1425_SetGasSell"" [label=""SetGasSell""];
""1425_purchaseTokens"" [label=""purchaseTokens""];
""1425_sellPrice"" [label=""sellPrice""];
""1425_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1425_setStakingRequirement"" [label=""setStakingRequirement""];
""1425_totalSupply"" [label=""totalSupply""];
""1425_buyPrice"" [label=""buyPrice""];
""1425_withdraw"" [label=""withdraw""];
""1425_balanceOf"" [label=""balanceOf""];
""1425_exit"" [label=""exit""];
""1425_SetGasBuy"" [label=""SetGasBuy""];
""1425_myDividends"" [label=""myDividends""];
""1425_reinvest"" [label=""reinvest""];
""1425_withdraw"" -> ""1425_myDividends"";
""1425_purchaseTokens"" -> ""1425_GAS"";
""1425_setName"" -> ""1425_onlyAdministrator"";
""1425_exit"" -> ""1425_sell"";
""1425_constructor"" -> ""1425_maxBuy"";
""1425_transfer"" -> ""1425_tokensToEthereum_"";
""1425_reinvest"" -> ""1425_myDividends"";
""1425_purchaseTokens"" -> ""1425_contractsBTFO"";
""1425_buyPrice"" -> ""1425_tokensToEthereum_"";
""1425_calculateTokensReceived"" -> ""1425_ethereumToTokens_"";
""1425_fallback"" -> ""1425_maxBuy"";
""1425_buy"" -> ""1425_purchaseTokens"";
""1425_reinvest"" -> ""1425_purchaseTokens"";
""1425_sell"" -> ""1425_onlyBagholders"";
""1425_sell"" -> ""1425_tokensToEthereum_"";
""1425_setStakingRequirement"" -> ""1425_onlyAdministrator"";
""1425_myTokens"" -> ""1425_balanceOf"";
""1425_transfer"" -> ""1425_withdraw"";
""1425_setSymbol"" -> ""1425_onlyAdministrator"";
""1425_exit"" -> ""1425_withdraw"";
""1425_transfer"" -> ""1425_onlyBagholders"";
""1425_ethereumToTokens_"" -> ""1425_sqrt"";
""1425_constructor"" -> ""1425_purchaseTokens"";
""1425_fallback"" -> ""1425_purchaseTokens"";
""1425_withdraw"" -> ""1425_onlyStronghands"";
""1425_SetGasBuy"" -> ""1425_onlyAdministrator"";
""1425_transfer"" -> ""1425_myDividends"";
""1425_setAdministrator"" -> ""1425_onlyAdministrator"";
""1425_withdraw"" -> ""1425_GAS"";
""1425_sellPrice"" -> ""1425_tokensToEthereum_"";
""1425_calculateEthereumReceived"" -> ""1425_tokensToEthereum_"";
""1425_myDividends"" -> ""1425_dividendsOf"";
""1425_sell"" -> ""1425_GAS"";
""1425_purchaseTokens"" -> ""1425_ethereumToTokens_"";
""1425_buy"" -> ""1425_maxBuy"";
""1425_purchaseTokens"" -> ""1425_nopause"";
""1425_disableInitialStage"" -> ""1425_onlyAdministrator"";
""1425_SetGasSell"" -> ""1425_onlyAdministrator"";
""1425_reinvest"" -> ""1425_onlyStronghands"";
}
"
0x5c6d8bb345f4299c76f24fc771ef04dd160c4d36.sol,EthCrystal,contract EthCrystal { using SafeMath for *; struct TowersInfoList { string name; uint256 timeLimit; uint256 warriorToTime; uint256 currentRoundID; uint256 timerType; uint256 growthCoefficient; uint256 winnerShare; uint256 nextRound; uint256 dividendShare; mapping (uint256 => TowersInfo) RoundList; },1,"subgraph cluster_1546_EthCrystal {
label=""EthCrystal"";
""1546__playerRoundsInfo"" [label=""_playerRoundsInfo""];
""1546_setNickname"" [label=""setNickname""];
""1546_buyWarriors"" [label=""buyWarriors""];
""1546_referralCashout"" [label=""referralCashout""];
""1546__currentWarriorPrice"" [label=""_currentWarriorPrice""];
""1546_constructor"" [label=""constructor""];
""1546_newRound"" [label=""newRound""];
""1546__playerInfo"" [label=""_playerInfo""];
""1546__playerBalance"" [label=""_playerBalance""];
""1546__currentPlayerAmountUnclaimed"" [label=""_currentPlayerAmountUnclaimed""];
""1546__TowerRoundDetails"" [label=""_TowerRoundDetails""];
""1546__currentPlayerAmountUnclaimedAll"" [label=""_currentPlayerAmountUnclaimedAll""];
""1546_WarriorTotalPrice"" [label=""WarriorTotalPrice""];
""1546_dividendCashout"" [label=""dividendCashout""];
""1546_constructor"" -> ""1546_newRound"";
""1546_buyWarriors"" -> ""1546_newRound"";
""1546__playerRoundsInfo"" -> ""1546__currentPlayerAmountUnclaimed"";
""1546__currentPlayerAmountUnclaimedAll"" -> ""1546__currentPlayerAmountUnclaimed"";
""1546_buyWarriors"" -> ""1546_setNickname"";
}
"
0x92972bbc89708127016046c150e3a223431a31e0.sol,GMQToken,"contract GMQToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function GMQToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_GMQToken {
label=""GMQToken"";
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" [label=""transfer""];
""361_GMQToken"" [label=""GMQToken""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x1c242bc9af8aa768a54222ed47bb756f1a1a757b.sol,LockableFreezableBurnablePausableERC20Token,contract LockableFreezableBurnablePausableERC20Token is FreezableBurnablePausableERC20Token { struct LockAtt { uint256 initLockAmount; uint256 lockAmount; uint256 startLockTime; uint256 cliff; uint256 interval; uint256 releaseCount; bool revocable; address revocAddress; },1,"subgraph cluster_1879_LockableFreezableBurnablePausableERC20Token {
label=""LockableFreezableBurnablePausableERC20Token"";
""1879_refreshLockStatus"" [label=""refreshLockStatus""];
""1879_transfer"" [label=""transfer""];
""1879_burn"" [label=""burn""];
""1879_transferFrom"" [label=""transferFrom""];
""1879_revoc"" [label=""revoc""];
""1879_setRevocable"" [label=""setRevocable""];
""1879_burnFrom"" [label=""burnFrom""];
""1879_lockTransfer"" [label=""lockTransfer""];
""1879_burnFrom"" -> ""1879_whenNotPaused"";
""1879_transfer"" -> ""1879_refreshLockStatus"";
""1879_transfer"" -> ""1879_transfer"";
""1879_transferFrom"" -> ""1879_whenNotPaused"";
""1879_revoc"" -> ""1879_whenNotPaused"";
""1879_refreshLockStatus"" -> ""1879_whenNotPaused"";
""1879_transferFrom"" -> ""1879_refreshLockStatus"";
""1879_revoc"" -> ""1879_refreshLockStatus"";
""1879_setRevocable"" -> ""1879_whenNotPaused"";
""1879_burn"" -> ""1879_refreshLockStatus"";
""1879_burn"" -> ""1879_burn"";
""1879_lockTransfer"" -> ""1879_refreshLockStatus"";
""1879_transfer"" -> ""1879_whenNotPaused"";
""1879_burnFrom"" -> ""1879_burnFrom"";
""1879_lockTransfer"" -> ""1879_whenNotPaused"";
""1879_burn"" -> ""1879_whenNotPaused"";
""1879_transferFrom"" -> ""1879_transferFrom"";
""1879_burnFrom"" -> ""1879_refreshLockStatus"";
}
"
0xbf2000b42c1ba2eb9e5163a0b7e2fe987ed124b4.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_processTransaction"" [label=""processTransaction""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_pullBalance"" [label=""pullBalance""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_fallback"" -> ""928_refundTransaction"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_processTransaction"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
}
"
0xf4dc44f1c618a5e4b6f372347e033ac5e77971a5.sol,CONTINENTAL_AG,"contract CONTINENTAL_AG { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 10651142832031200000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_CONTINENTAL_AG {
label=""CONTINENTAL_AG"";
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0x1b413506fc42e2f04a4e8c57710f850b234d6653.sol,EpiphanyCoin,"contract EpiphanyCoin is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EpiphanyCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_619_EpiphanyCoin {
label=""EpiphanyCoin"";
""619_sell"" [label=""sell""];
""619_buy"" [label=""buy""];
""619_EpiphanyCoin"" [label=""EpiphanyCoin""];
""619__transfer"" [label=""_transfer""];
""619_mintToken"" [label=""mintToken""];
""619_freezeAccount"" [label=""freezeAccount""];
""619_setPrices"" [label=""setPrices""];
""619_sell"" -> ""619__transfer"";
""619_freezeAccount"" -> ""619_onlyOwner"";
""619_EpiphanyCoin"" -> ""619_TokenERC20"";
""619_buy"" -> ""619__transfer"";
""619_setPrices"" -> ""619_onlyOwner"";
""619_mintToken"" -> ""619_onlyOwner"";
}
"
0x446f174bc64cbca8b9fe81087798a156cfb863b7.sol,Voting2018,contract Voting2018 is Ownable { string public version = ; struct File { string content; string contentTime; string md5; string sha256; string sha1; string hashTime; },1,"subgraph cluster_217_Voting2018 {
label=""Voting2018"";
""217_setContent"" [label=""setContent""];
""217_getFile"" [label=""getFile""];
""217_setHashes"" [label=""setHashes""];
""217_setContent"" -> ""217_onlyOwner"";
""217_setHashes"" -> ""217_onlyOwner"";
}
"
0x1d8ed4b0a3147ed17ea09582b46e0c9635396720.sol,TokenERC20,"contract TokenERC20 { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( ) public { totalSupply = 100000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_384_TokenERC20 {
label=""TokenERC20"";
""384_approveAndCall"" [label=""approveAndCall""];
""384_TokenERC20"" [label=""TokenERC20""];
""384_burn"" [label=""burn""];
""384__transfer"" [label=""_transfer""];
""384_approve"" [label=""approve""];
""384_transferFrom"" [label=""transferFrom""];
""384_burnFrom"" [label=""burnFrom""];
""384_transfer"" [label=""transfer""];
""384_transferFrom"" -> ""384__transfer"";
""384_transfer"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
}
"
0x70bf9df6967dc96156e76cc43b928a7ef02e159a.sol,X_GAME,contract X_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_X_GAME {
label=""X_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_StopGame"" [label=""StopGame""];
}
"
0x656038e97cee7c095673f7b9fad695b323a6f098.sol,WheelOf0xBitcoin,contract WheelOf0xBitcoin { using SafeMath for uint; modifier nonContract() { require(tx.origin == msg.sender); _; },1,"subgraph cluster_1398_WheelOf0xBitcoin {
label=""WheelOf0xBitcoin"";
""1398_panicButton"" [label=""panicButton""];
""1398_updateMinBet"" [label=""updateMinBet""];
""1398_determinePrize"" [label=""determinePrize""];
""1398_withdraw"" [label=""withdraw""];
""1398_getDevBalance"" [label=""getDevBalance""];
""1398_startSpin"" [label=""startSpin""];
""1398_random"" [label=""random""];
""1398_lose"" [label=""lose""];
""1398_updateMaxBet"" [label=""updateMaxBet""];
""1398__finishSpin"" [label=""_finishSpin""];
""1398_win"" [label=""win""];
""1398_finishSpin"" [label=""finishSpin""];
""1398_refundUser"" [label=""refundUser""];
""1398_constructor"" [label=""constructor""];
""1398_depositAndSpin"" [label=""depositAndSpin""];
""1398_maxRandom"" [label=""maxRandom""];
""1398_withdrawAll"" [label=""withdrawAll""];
""1398_spinTokens"" [label=""spinTokens""];
""1398_tokenBalanceOf"" [label=""tokenBalanceOf""];
""1398_receiveApproval"" [label=""receiveApproval""];
""1398_withdrawDevFees"" [label=""withdrawDevFees""];
""1398_spinAll"" [label=""spinAll""];
""1398_getBalance"" [label=""getBalance""];
""1398_betPool"" [label=""betPool""];
""1398_deposit"" [label=""deposit""];
""1398__finishSpin"" -> ""1398_random"";
""1398_refundUser"" -> ""1398_onlyAdmin"";
""1398__finishSpin"" -> ""1398_determinePrize"";
""1398_lose"" -> ""1398_tokenBalanceOf"";
""1398_deposit"" -> ""1398_gameActive"";
""1398_lose"" -> ""1398_betPool"";
""1398_deposit"" -> ""1398_tokenBalanceOf"";
""1398_betPool"" -> ""1398_tokenBalanceOf"";
""1398_betPool"" -> ""1398_getBalance"";
""1398_withdraw"" -> ""1398_getBalance"";
""1398_depositAndSpin"" -> ""1398_gameActive"";
""1398_receiveApproval"" -> ""1398_depositAndSpin"";
""1398_refundUser"" -> ""1398_getBalance"";
""1398_refundUser"" -> ""1398_tokenBalanceOf"";
""1398_spinTokens"" -> ""1398_nonContract"";
""1398_spinAll"" -> ""1398_nonContract"";
""1398_spinTokens"" -> ""1398_tokenBalanceOf"";
""1398_depositAndSpin"" -> ""1398_getBalance"";
""1398_withdrawAll"" -> ""1398_getBalance"";
""1398_updateMinBet"" -> ""1398_onlyAdmin"";
""1398_spinAll"" -> ""1398_betPool"";
""1398_spinTokens"" -> ""1398_gameActive"";
""1398_spinAll"" -> ""1398_startSpin"";
""1398_win"" -> ""1398_tokenBalanceOf"";
""1398_win"" -> ""1398_betPool"";
""1398_spinTokens"" -> ""1398_betPool"";
""1398_withdraw"" -> ""1398_tokenBalanceOf"";
""1398__finishSpin"" -> ""1398_tokenBalanceOf"";
""1398_receiveApproval"" -> ""1398_deposit"";
""1398_depositAndSpin"" -> ""1398_startSpin"";
""1398_withdrawAll"" -> ""1398_tokenBalanceOf"";
""1398_spinTokens"" -> ""1398_startSpin"";
""1398_depositAndSpin"" -> ""1398_tokenBalanceOf"";
""1398_finishSpin"" -> ""1398__finishSpin"";
""1398__finishSpin"" -> ""1398_win"";
""1398_deposit"" -> ""1398_getBalance"";
""1398_startSpin"" -> ""1398_lose"";
""1398_spinAll"" -> ""1398_gameActive"";
""1398_panicButton"" -> ""1398_onlyAdmin"";
""1398_depositAndSpin"" -> ""1398_betPool"";
""1398_spinAll"" -> ""1398_tokenBalanceOf"";
""1398_random"" -> ""1398_maxRandom"";
""1398_startSpin"" -> ""1398__finishSpin"";
""1398_updateMaxBet"" -> ""1398_onlyAdmin"";
}
"
0x295b52907435bfa10e6edaa7d11d976e6e97ca1e.sol,LiteCoinW_Plus,contract LiteCoinW_Plus is ERC20 { address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalSupply = 84000000 * 10**8; function name() public constant returns (string) { return ; },1,"subgraph cluster_543_LiteCoinW_Plus {
label=""LiteCoinW_Plus"";
""543_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferOwnership"" [label=""transferOwnership""];
""543_transfer"" [label=""transfer""];
""543_getEthBalance"" [label=""getEthBalance""];
""543_name"" [label=""name""];
""543_distributeLCWP"" [label=""distributeLCWP""];
""543_LiteCoinW_Plus"" [label=""LiteCoinW_Plus""];
""543_decimals"" [label=""decimals""];
""543_approve"" [label=""approve""];
""543_symbol"" [label=""symbol""];
""543_allowance"" [label=""allowance""];
""543_finishDistribution"" [label=""finishDistribution""];
""543_distributeLCWP"" -> ""543_onlyOwner"";
""543_finishDistribution"" -> ""543_onlyOwner"";
""543_distributeLCWP"" -> ""543_canDistr"";
""543_transferOwnership"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_onlyPayloadSize"";
""543_transferFrom"" -> ""543_onlyPayloadSize"";
}
"
0x4b57471c5cf63b747e111bf9bd6f79e8aa6996f8.sol,COSHATokenHKD,"contract COSHATokenHKD { string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 1 * 10 ** (10 + uint256(decimals)); initialSupply = totalSupply; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; tokenName = name; tokenSymbol = symbol; }",1,"subgraph cluster_377_COSHATokenHKD {
label=""COSHATokenHKD"";
""377_TokenERC20"" [label=""TokenERC20""];
""377_approveAndCall"" [label=""approveAndCall""];
""377_transfer"" [label=""transfer""];
""377_transferFrom"" [label=""transferFrom""];
""377_burn"" [label=""burn""];
""377_burnFrom"" [label=""burnFrom""];
""377__transfer"" [label=""_transfer""];
""377_approve"" [label=""approve""];
""377_approveAndCall"" -> ""377_approve"";
""377_transferFrom"" -> ""377__transfer"";
""377_transfer"" -> ""377__transfer"";
}
"
0x4afea0f1252335e5e6be870139de87725e16560b.sol,NatminToken,"contract NatminToken is ERC20Standard, ERC223Standard, Ownable, NatminVesting, BurnToken { using SafeMath for uint256; string _name = ; string _symbol = ; string _standard = ; uint256 _decimals = 18; uint256 _totalSupply; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; constructor(uint256 _supply) public { require(_supply != 0); _totalSupply = _supply * (10 ** 18); balances[contractOwner] = _totalSupply; }",1,"subgraph cluster_986_NatminToken {
label=""NatminToken"";
""986_decimals"" [label=""decimals""];
""986_allowance"" [label=""allowance""];
""986_name"" [label=""name""];
""986_getVestingEndTime"" [label=""getVestingEndTime""];
""986_totalSupply"" [label=""totalSupply""];
""986_transferToAddress"" [label=""transferToAddress""];
""986_addVesting"" [label=""addVesting""];
""986_endVesting"" [label=""endVesting""];
""986_transfer"" [label=""transfer""];
""986__burn"" [label=""_burn""];
""986_balanceOf"" [label=""balanceOf""];
""986_symbol"" [label=""symbol""];
""986_constructor"" [label=""constructor""];
""986_isContract"" [label=""isContract""];
""986_vestingEnded"" [label=""vestingEnded""];
""986_transferFrom"" [label=""transferFrom""];
""986_approve"" [label=""approve""];
""986_transferToContract"" [label=""transferToContract""];
""986_getVestedAmount"" [label=""getVestedAmount""];
""986_burn"" [label=""burn""];
""986_fallback"" [label=""fallback""];
""986_standard"" [label=""standard""];
""986__burn"" -> ""986_ownerOnly"";
""986_transferFrom"" -> ""986_vestingEnded"";
""986_transfer"" -> ""986_isContract"";
""986_transfer"" -> ""986_transferToContract"";
""986_transferToContract"" -> ""986_vestingEnded"";
""986_transfer"" -> ""986_transferToAddress"";
""986_burn"" -> ""986_ownerOnly"";
""986_endVesting"" -> ""986_ownerOnly"";
""986_burn"" -> ""986__burn"";
""986_addVesting"" -> ""986_ownerOnly"";
""986_transferToAddress"" -> ""986_vestingEnded"";
}
"
0x41e50bb0dfd21cd201b16a3d2f945920675a4408.sol,ERC20Impl,contract ERC20Impl is CustodianUpgradeable { struct PendingPrint { address receiver; uint256 value; },1,"subgraph cluster_1550_ERC20Impl {
label=""ERC20Impl"";
""1550_allowance"" [label=""allowance""];
""1550_enableSweep"" [label=""enableSweep""];
""1550_ERC20Impl"" [label=""ERC20Impl""];
""1550_requestPrint"" [label=""requestPrint""];
""1550_approveWithSender"" [label=""approveWithSender""];
""1550_confirmPrint"" [label=""confirmPrint""];
""1550_totalSupply"" [label=""totalSupply""];
""1550_burn"" [label=""burn""];
""1550_transferFromWithSender"" [label=""transferFromWithSender""];
""1550_decreaseApprovalWithSender"" [label=""decreaseApprovalWithSender""];
""1550_transferWithSender"" [label=""transferWithSender""];
""1550_balanceOf"" [label=""balanceOf""];
""1550_replaySweep"" [label=""replaySweep""];
""1550_increaseApprovalWithSender"" [label=""increaseApprovalWithSender""];
""1550_batchTransfer"" [label=""batchTransfer""];
""1550_transferWithSender"" -> ""1550_onlyProxy"";
""1550_enableSweep"" -> ""1550_onlySweeper"";
""1550_increaseApprovalWithSender"" -> ""1550_onlyProxy"";
""1550_ERC20Impl"" -> ""1550_CustodianUpgradeable"";
""1550_requestPrint"" -> ""1550_generateLockId"";
""1550_confirmPrint"" -> ""1550_onlyCustodian"";
""1550_approveWithSender"" -> ""1550_onlyProxy"";
""1550_decreaseApprovalWithSender"" -> ""1550_onlyProxy"";
""1550_replaySweep"" -> ""1550_onlySweeper"";
""1550_transferFromWithSender"" -> ""1550_onlyProxy"";
}
"
0x3693c8bf129116bf3b3244404e9b8f0e26b40749.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_allowance"" [label=""allowance""];
""256_transferFrom"" [label=""transferFrom""];
""256_transfer"" [label=""transfer""];
""256_approve"" [label=""approve""];
""256_balanceOf"" [label=""balanceOf""];
}
"
0x1dc8c35fa368f6ec96e9b95d8c47834e20576cd6.sol,HECFinalToken,"contract HECFinalToken is StandardToken,owned { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public initialSupply; uint256 public deploymentTime = now; uint256 public burnTime = now + 2 minutes; uint256 public sellPrice; uint256 public buyPrice; event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); mapping (address => bool) public frozenAccount; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; constructor( )public { initialSupply =10000000000*100000000; balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = ; symbol = ; decimals = 8; owner = msg.sender; }",1,"subgraph cluster_690_HECFinalToken {
label=""HECFinalToken"";
""690_transferFrom"" [label=""transferFrom""];
""690__transfer"" [label=""_transfer""];
""690_transfer"" [label=""transfer""];
""690_constructor"" [label=""constructor""];
""690_setPrices"" [label=""setPrices""];
""690_sell"" [label=""sell""];
""690_burnFrom"" [label=""burnFrom""];
""690_buy"" [label=""buy""];
""690_freezeAccount"" [label=""freezeAccount""];
""690_burn"" [label=""burn""];
""690_buy"" -> ""690__transfer"";
""690_freezeAccount"" -> ""690_onlyOwner"";
""690_sell"" -> ""690__transfer"";
""690_setPrices"" -> ""690_onlyOwner"";
}
"
0xb462d45329f4f3b4c670790ac355fb26eace41c8.sol,TerraformReserve,"contract TerraformReserve is Ownable { mapping (address => uint256) public lockedBalance; uint public totalLocked; ERC20 public manaToken; address public landClaim; bool public acceptingDeposits; event LockedBalance(address user, uint mana); event LandClaimContractSet(address target); event LandClaimExecuted(address user, uint value, bytes data); event AcceptingDepositsChanged(bool _acceptingDeposits); function TerraformReserve(address _token) { require(_token != 0); manaToken = ERC20(_token); acceptingDeposits = true; }",1,"subgraph cluster_303_TerraformReserve {
label=""TerraformReserve"";
""303_TerraformReserve"" [label=""TerraformReserve""];
""303_fallback"" [label=""fallback""];
""303_lockMana"" [label=""lockMana""];
""303_changeContractState"" [label=""changeContractState""];
""303_setTargetContract"" [label=""setTargetContract""];
""303_changeContractState"" -> ""303_onlyOwner"";
""303_setTargetContract"" -> ""303_onlyOwner"";
}
"
0x88496dd0bb932b060e9c7c4ddc8e1b72b1e39451.sol,tokenTrust,"contract tokenTrust { event Hodl(address indexed hodler, uint indexed amount); event Party(address indexed hodler, uint indexed amount); mapping (address => uint) public hodlers; uint partyTime = 1522095322; function() payable { hodlers[msg.sender] += msg.value; Hodl(msg.sender, msg.value); }",1,"subgraph cluster_159_tokenTrust {
label=""tokenTrust"";
""159_fallback"" [label=""fallback""];
""159_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""159_party"" [label=""party""];
}
"
0x6c3d74c06f5b41ee0427504a4c9abb78db7e1ef6.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_400_TokenERC20 {
label=""TokenERC20"";
""400_approve"" [label=""approve""];
""400_TokenERC20"" [label=""TokenERC20""];
""400_approveAndCall"" [label=""approveAndCall""];
""400_transfer"" [label=""transfer""];
""400_transferFrom"" [label=""transferFrom""];
""400_burn"" [label=""burn""];
""400_burnFrom"" [label=""burnFrom""];
""400__transfer"" [label=""_transfer""];
""400_transferFrom"" -> ""400__transfer"";
""400_approveAndCall"" -> ""400_approve"";
""400_transfer"" -> ""400__transfer"";
}
"
0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol,MultiSigTokenWallet,contract MultiSigTokenWallet { address[] public owners; address[] public tokens; mapping (uint => Transaction) public transactions; mapping (uint => mapping (address => bool)) public confirmations; uint public transactionCount; mapping (address => uint) public tokenBalances; mapping (address => bool) public isOwner; mapping (address => address[]) public userList; uint public required; uint public nonce; struct Transaction { address destination; uint value; bytes data; bool executed; },1,"subgraph cluster_1537_MultiSigTokenWallet {
label=""MultiSigTokenWallet"";
""1537_submitTransaction"" [label=""submitTransaction""];
""1537_setMyTokenList"" [label=""setMyTokenList""];
""1537_withdrawToken"" [label=""withdrawToken""];
""1537_getTransactionCount"" [label=""getTransactionCount""];
""1537_executeTransaction"" [label=""executeTransaction""];
""1537_setTokenList"" [label=""setTokenList""];
""1537_addTransaction"" [label=""addTransaction""];
""1537_depositToken"" [label=""depositToken""];
""1537_addOwner"" [label=""addOwner""];
""1537_removeOwner"" [label=""removeOwner""];
""1537_releaseWallet"" [label=""releaseWallet""];
""1537_changeRequirement"" [label=""changeRequirement""];
""1537_receiveApproval"" [label=""receiveApproval""];
""1537_getConfirmations"" [label=""getConfirmations""];
""1537__deposited"" [label=""_deposited""];
""1537_fallback"" [label=""fallback""];
""1537_watch"" [label=""watch""];
""1537_revokeConfirmation"" [label=""revokeConfirmation""];
""1537_getTokenList"" [label=""getTokenList""];
""1537_withdrawAllTokens"" [label=""withdrawAllTokens""];
""1537_tokenFallback"" [label=""tokenFallback""];
""1537_getTransactionIds"" [label=""getTransactionIds""];
""1537_withdrawEverything"" [label=""withdrawEverything""];
""1537_constructor"" [label=""constructor""];
""1537_isConfirmed"" [label=""isConfirmed""];
""1537_getConfirmationCount"" [label=""getConfirmationCount""];
""1537_getOwners"" [label=""getOwners""];
""1537_confirmTransaction"" [label=""confirmTransaction""];
""1537_replaceOwner"" [label=""replaceOwner""];
""1537_deposit"" [label=""deposit""];
""1537_watch"" -> ""1537__deposited"";
""1537_addOwner"" -> ""1537_validRequirement"";
""1537_releaseWallet"" -> ""1537_notNull"";
""1537_releaseWallet"" -> ""1537_onlyWallet"";
""1537_withdrawEverything"" -> ""1537_withdrawAllTokens"";
""1537_addOwner"" -> ""1537_ownerDoesNotExist"";
""1537_revokeConfirmation"" -> ""1537_notExecuted"";
""1537_deposit"" -> ""1537__deposited"";
""1537_setTokenList"" -> ""1537_onlyWallet"";
""1537_withdrawToken"" -> ""1537_notNull"";
""1537_replaceOwner"" -> ""1537_ownerExists"";
""1537_submitTransaction"" -> ""1537_confirmTransaction"";
""1537_changeRequirement"" -> ""1537_onlyWallet"";
""1537_tokenFallback"" -> ""1537__deposited"";
""1537_constructor"" -> ""1537_validRequirement"";
""1537_revokeConfirmation"" -> ""1537_ownerExists"";
""1537_receiveApproval"" -> ""1537_deposit"";
""1537_depositToken"" -> ""1537_deposit"";
""1537_addOwner"" -> ""1537_notNull"";
""1537_confirmTransaction"" -> ""1537_executeTransaction"";
""1537_removeOwner"" -> ""1537_changeRequirement"";
""1537_withdrawAllTokens"" -> ""1537_notNull"";
""1537_removeOwner"" -> ""1537_onlyWallet"";
""1537_addTransaction"" -> ""1537_notNull"";
""1537_changeRequirement"" -> ""1537_validRequirement"";
""1537_releaseWallet"" -> ""1537_addOwner"";
""1537_submitTransaction"" -> ""1537_addTransaction"";
""1537_revokeConfirmation"" -> ""1537_confirmed"";
""1537_withdrawToken"" -> ""1537_onlyWallet"";
""1537_releaseWallet"" -> ""1537_removeOwner"";
""1537_removeOwner"" -> ""1537_ownerExists"";
""1537_executeTransaction"" -> ""1537_isConfirmed"";
""1537_releaseWallet"" -> ""1537_ownerDoesNotExist"";
""1537_executeTransaction"" -> ""1537_notExecuted"";
""1537_addOwner"" -> ""1537_onlyWallet"";
""1537_replaceOwner"" -> ""1537_ownerDoesNotExist"";
""1537_withdrawEverything"" -> ""1537_notNull"";
""1537_confirmTransaction"" -> ""1537_ownerExists"";
""1537_confirmTransaction"" -> ""1537_notConfirmed"";
""1537_replaceOwner"" -> ""1537_onlyWallet"";
""1537_watch"" -> ""1537_ownerExists"";
""1537_confirmTransaction"" -> ""1537_transactionExists"";
""1537_withdrawEverything"" -> ""1537_onlyWallet"";
""1537_withdrawAllTokens"" -> ""1537_onlyWallet"";
}
"
0x78af82f8924f99cec0afef357105382b8a44708f.sol,EraTokens,"contract EraTokens is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 60000000000 * 10**uint(decimals); balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_603_EraTokens {
label=""EraTokens"";
""603_constructor"" [label=""constructor""];
""603_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""603_totalSupply"" [label=""totalSupply""];
""603_BurnToken"" [label=""BurnToken""];
""603_transferFrom"" [label=""transferFrom""];
""603_approve"" [label=""approve""];
""603_transfer"" [label=""transfer""];
""603_balanceOf"" [label=""balanceOf""];
""603_fallback"" [label=""fallback""];
""603_allowance"" [label=""allowance""];
""603_approveAndCall"" [label=""approveAndCall""];
""603_transferAnyERC20Token"" -> ""603_onlyOwner"";
}
"
0x1c040c4ab9acce984d0d4c135576598013950e52.sol,HurricaneNetwork,"contract HurricaneNetwork { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HurricaneNetwork ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_HurricaneNetwork {
label=""HurricaneNetwork"";
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_HurricaneNetwork"" [label=""HurricaneNetwork""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x1c040c4ab9acce984d0d4c135576598013950e52.sol,HurricaneNetwork,"contract HurricaneNetwork { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HurricaneNetwork ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_HurricaneNetwork {
label=""HurricaneNetwork"";
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_HurricaneNetwork"" [label=""HurricaneNetwork""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0xf4ada683181837c150cd0c33881dd874230eb5ae.sol,BaseToken,"contract BaseToken { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function _transfer(address _from, address _to, uint _value) internal { require(_to != 0x0); require(balanceOf[_from] >= _value); require(balanceOf[_to] + _value > balanceOf[_to]); uint previousBalances = balanceOf[_from] + balanceOf[_to]; balanceOf[_from] -= _value; balanceOf[_to] += _value; assert(balanceOf[_from] + balanceOf[_to] == previousBalances); Transfer(_from, _to, _value); }",1,"subgraph cluster_199_BaseToken {
label=""BaseToken"";
""199_transfer"" [label=""transfer""];
""199_approve"" [label=""approve""];
""199__transfer"" [label=""_transfer""];
""199_transferFrom"" [label=""transferFrom""];
""199_transfer"" -> ""199__transfer"";
""199_transferFrom"" -> ""199__transfer"";
}
"
0xef906c48b8fde48f5f2ceb448b1163bf964ef4ac.sol,DAX_4000_20200618,"contract DAX_4000_20200618 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 14693280768000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_DAX_4000_20200618 {
label=""DAX_4000_20200618"";
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
}
"
0x0704d3952dc50e8a36a8cb53f84d8c39895cd5cf.sol,MagicCube,"contract MagicCube is SafeMath { address public owner; string public name; string public symbol; uint public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); bool lock = false; constructor( uint256 initialSupply, string tokenName, string tokenSymbol, uint decimalUnits ) public { owner = msg.sender; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_618_MagicCube {
label=""MagicCube"";
""618__transfer"" [label=""_transfer""];
""618_burn"" [label=""burn""];
""618_approve"" [label=""approve""];
""618_freezeAccount"" [label=""freezeAccount""];
""618_transferBatch"" [label=""transferBatch""];
""618_mintToken"" [label=""mintToken""];
""618_transferFrom"" [label=""transferFrom""];
""618_transfer"" [label=""transfer""];
""618_setLock"" [label=""setLock""];
""618_constructor"" [label=""constructor""];
""618_burnFrom"" [label=""burnFrom""];
""618_transferOwnership"" [label=""transferOwnership""];
""618_freezeAccount"" -> ""618_onlyOwner"";
""618_burn"" -> ""618_onlyOwner"";
""618__transfer"" -> ""618_isLock"";
""618_transfer"" -> ""618__transfer"";
""618_setLock"" -> ""618_onlyOwner"";
""618_mintToken"" -> ""618_onlyOwner"";
""618_transferOwnership"" -> ""618_onlyOwner"";
""618_transferBatch"" -> ""618__transfer"";
""618_transferFrom"" -> ""618__transfer"";
""618_burnFrom"" -> ""618_onlyOwner"";
}
"
0xa3fa17c51a77a79808f3c21948de3ea70391ce6a.sol,CryptoAllStars,"contract CryptoAllStars is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public personIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public personIndexToApproved; mapping (uint256 => uint256) private personIndexToPrice; address public ceo = 0x047F606fD5b2BaA5f5C6c4aB8958E45CB6B054B7; uint256 public promoCreatedCount; struct Person { string name; }",1,"subgraph cluster_913_CryptoAllStars {
label=""CryptoAllStars"";
""913__addressNotNull"" [label=""_addressNotNull""];
""913_approve"" [label=""approve""];
""913_balanceOf"" [label=""balanceOf""];
""913__owns"" [label=""_owns""];
""913_totalSupply"" [label=""totalSupply""];
""913_implementsERC721"" [label=""implementsERC721""];
""913_purchase"" [label=""purchase""];
""913__createPerson"" [label=""_createPerson""];
""913_name"" [label=""name""];
""913_priceOf"" [label=""priceOf""];
""913_createPromoPerson"" [label=""createPromoPerson""];
""913__payout"" [label=""_payout""];
""913_transfer"" [label=""transfer""];
""913_ownerOf"" [label=""ownerOf""];
""913_takeOwnership"" [label=""takeOwnership""];
""913_payout"" [label=""payout""];
""913_tokensOfOwner"" [label=""tokensOfOwner""];
""913_symbol"" [label=""symbol""];
""913_createContractPerson"" [label=""createContractPerson""];
""913_getPerson"" [label=""getPerson""];
""913__transfer"" [label=""_transfer""];
""913_transferFrom"" [label=""transferFrom""];
""913_setOwner"" [label=""setOwner""];
""913__approved"" [label=""_approved""];
""913_takeOwnership"" -> ""913__addressNotNull"";
""913_payout"" -> ""913_onlyCeo"";
""913_transfer"" -> ""913__transfer"";
""913_transferFrom"" -> ""913__addressNotNull"";
""913_transfer"" -> ""913__owns"";
""913_createPromoPerson"" -> ""913_onlyCeo"";
""913_tokensOfOwner"" -> ""913_balanceOf"";
""913_createContractPerson"" -> ""913_onlyCeo"";
""913_payout"" -> ""913__payout"";
""913_createPromoPerson"" -> ""913__createPerson"";
""913_transferFrom"" -> ""913__approved"";
""913_purchase"" -> ""913__transfer"";
""913_transfer"" -> ""913__addressNotNull"";
""913_tokensOfOwner"" -> ""913_totalSupply"";
""913_setOwner"" -> ""913_onlyCeo"";
""913_createContractPerson"" -> ""913__createPerson"";
""913_transferFrom"" -> ""913__transfer"";
""913_purchase"" -> ""913__addressNotNull"";
""913_takeOwnership"" -> ""913__transfer"";
""913_approve"" -> ""913__owns"";
""913__createPerson"" -> ""913__transfer"";
""913_transferFrom"" -> ""913__owns"";
""913_takeOwnership"" -> ""913__approved"";
}
"
0x0747af71e2034bc2d2fcad388a264f5ccdff505c.sol,BlockVentureCoin,"contract BlockVentureCoin is ERC20 { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping( address => uint256) public balanceOf; mapping( uint => address) public accountIndex; uint accountCount; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed spender, uint value); event Message ( address a, uint256 amount ); event Burn(address indexed from, uint256 value); function BlockVentureCoin() { uint supply = 10000000000000000; appendTokenHolders( msg.sender ); balanceOf[msg.sender] = supply; totalSupply = supply; name = ; symbol = ; decimals = 8; }",1,"subgraph cluster_542_BlockVentureCoin {
label=""BlockVentureCoin"";
""542_BlockVentureCoin"" [label=""BlockVentureCoin""];
""542_balanceOf"" [label=""balanceOf""];
""542_approve"" [label=""approve""];
""542_allowance"" [label=""allowance""];
""542_approveAndCall"" [label=""approveAndCall""];
""542_transferFrom"" [label=""transferFrom""];
""542_burnFrom"" [label=""burnFrom""];
""542_getAccountCount"" [label=""getAccountCount""];
""542_getAddress"" [label=""getAddress""];
""542_appendTokenHolders"" [label=""appendTokenHolders""];
""542_totalSupply"" [label=""totalSupply""];
""542_burn"" [label=""burn""];
""542_transfer"" [label=""transfer""];
""542_transfer"" -> ""542_appendTokenHolders"";
""542_approveAndCall"" -> ""542_approve"";
""542_BlockVentureCoin"" -> ""542_appendTokenHolders"";
""542_transferFrom"" -> ""542_appendTokenHolders"";
}
"
0xebb060f9d0029082a04f78d84b9fb9d3d26f9a93.sol,Data,contract Data is Ownable { mapping (address => address) private parent; mapping (address => uint8) public statuses; mapping (address => uint) public referralDeposits; mapping(address => uint256) private balances; mapping(address => uint256) private investorBalances; function parentOf(address _addr) public constant returns (address) { return parent[_addr]; },1,"subgraph cluster_1042_Data {
label=""Data"";
""1042_parentOf"" [label=""parentOf""];
""1042_subtrReferralDeposit"" [label=""subtrReferralDeposit""];
""1042_referralDeposits"" [label=""referralDeposits""];
""1042_addBalance"" [label=""addBalance""];
""1042_setParent"" [label=""setParent""];
""1042_addInvestorBalance"" [label=""addInvestorBalance""];
""1042_balanceOf"" [label=""balanceOf""];
""1042_constructor"" [label=""constructor""];
""1042_subtrBalance"" [label=""subtrBalance""];
""1042_subtrInvestorBalance"" [label=""subtrInvestorBalance""];
""1042_setStatus"" [label=""setStatus""];
""1042_statuses"" [label=""statuses""];
""1042_investorBalanceOf"" [label=""investorBalanceOf""];
""1042_addReferralDeposit"" [label=""addReferralDeposit""];
""1042_subtrReferralDeposit"" -> ""1042_onlyOwner"";
""1042_addInvestorBalance"" -> ""1042_onlyOwner"";
""1042_setParent"" -> ""1042_onlyOwner"";
""1042_addBalance"" -> ""1042_onlyOwner"";
""1042_addReferralDeposit"" -> ""1042_onlyOwner"";
""1042_subtrInvestorBalance"" -> ""1042_onlyOwner"";
""1042_subtrBalance"" -> ""1042_onlyOwner"";
""1042_setStatus"" -> ""1042_onlyOwner"";
}
"
0xc378bb8f3e155e5e561eb4caa337c4a35c34c2ba.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_burn"" [label=""burn""];
""396_transfer"" [label=""transfer""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_burnFrom"" [label=""burnFrom""];
""396_approve"" [label=""approve""];
""396_transferFrom"" [label=""transferFrom""];
""396_TokenERC20"" [label=""TokenERC20""];
""396__transfer"" [label=""_transfer""];
""396_approveAndCall"" -> ""396_approve"";
""396_transfer"" -> ""396__transfer"";
""396_transferFrom"" -> ""396__transfer"";
}
"
0x6d3543d4b11683847697f5b9a3a9d116cf13dedd.sol,Ledger,contract Ledger { uint public total; struct Entry { uint balance; address next; address prev; },1,"subgraph cluster_474_Ledger {
label=""Ledger"";
""474_balances"" [label=""balances""];
""474_balanceOf"" [label=""balanceOf""];
""474_size"" [label=""size""];
""474_total"" [label=""total""];
""474_subtract"" [label=""subtract""];
""474_add"" [label=""add""];
""474_constructor"" [label=""constructor""];
""474_balances"" -> ""474_size"";
""474_add"" -> ""474_fromOwner"";
""474_subtract"" -> ""474_fromOwner"";
}
"
0x33bb55835499b4013686e39de293ee4d832bbca4.sol,LockBalance,"contract LockBalance is Ownable { enum eLockType {None, Individual, GroupA, GroupB, GroupC, GroupD, GroupE, GroupF, GroupG, GroupH, GroupI, GroupJ}",1,"subgraph cluster_1557_LockBalance {
label=""LockBalance"";
""1557_clearLockUser"" [label=""clearLockUser""];
""1557_setLockUser"" [label=""setLockUser""];
""1557_lockBalanceAll"" [label=""lockBalanceAll""];
""1557_deleteLockDate"" [label=""deleteLockDate""];
""1557_lockBalanceGroup"" [label=""lockBalanceGroup""];
""1557_addLockDate"" [label=""addLockDate""];
""1557_lockBalanceIndividual"" [label=""lockBalanceIndividual""];
""1557_lockTypeInfoGroup"" [label=""lockTypeInfoGroup""];
""1557_lockUserInfo"" [label=""lockUserInfo""];
""1557_addLockDate"" -> ""1557_onlyOwner"";
""1557_lockUserInfo"" -> ""1557_lockBalanceIndividual"";
""1557_lockUserInfo"" -> ""1557_lockBalanceGroup"";
""1557_lockBalanceAll"" -> ""1557_lockBalanceGroup"";
""1557_clearLockUser"" -> ""1557_onlyOwner"";
""1557_lockBalanceAll"" -> ""1557_lockBalanceIndividual"";
""1557_deleteLockDate"" -> ""1557_onlyOwner"";
}
"
0x0704d3952dc50e8a36a8cb53f84d8c39895cd5cf.sol,MagicCube,"contract MagicCube is SafeMath { address public owner; string public name; string public symbol; uint public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); bool lock = false; constructor( uint256 initialSupply, string tokenName, string tokenSymbol, uint decimalUnits ) public { owner = msg.sender; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_618_MagicCube {
label=""MagicCube"";
""618__transfer"" [label=""_transfer""];
""618_burn"" [label=""burn""];
""618_approve"" [label=""approve""];
""618_freezeAccount"" [label=""freezeAccount""];
""618_transferBatch"" [label=""transferBatch""];
""618_mintToken"" [label=""mintToken""];
""618_transferFrom"" [label=""transferFrom""];
""618_transfer"" [label=""transfer""];
""618_setLock"" [label=""setLock""];
""618_constructor"" [label=""constructor""];
""618_burnFrom"" [label=""burnFrom""];
""618_transferOwnership"" [label=""transferOwnership""];
""618_freezeAccount"" -> ""618_onlyOwner"";
""618_burn"" -> ""618_onlyOwner"";
""618__transfer"" -> ""618_isLock"";
""618_transfer"" -> ""618__transfer"";
""618_setLock"" -> ""618_onlyOwner"";
""618_mintToken"" -> ""618_onlyOwner"";
""618_transferOwnership"" -> ""618_onlyOwner"";
""618_transferBatch"" -> ""618__transfer"";
""618_transferFrom"" -> ""618__transfer"";
""618_burnFrom"" -> ""618_onlyOwner"";
}
"
0x01d706ed109e2038ae3261e30a1ed1af207a9d2c.sol,ETHERECASHTOKEN,"contract ETHERECASHTOKEN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ETHERECASHTOKEN( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_ETHERECASHTOKEN {
label=""ETHERECASHTOKEN"";
""361_burn"" [label=""burn""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_ETHERECASHTOKEN"" [label=""ETHERECASHTOKEN""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x6cb816569ab4665bdc2ba78a64aff87201608bc6.sol,Bitmos,"contract Bitmos is EIP20Interface { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function Bitmos( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_290_Bitmos {
label=""Bitmos"";
""290_allowance"" [label=""allowance""];
""290_balanceOf"" [label=""balanceOf""];
""290_transferFrom"" [label=""transferFrom""];
""290_transfer"" [label=""transfer""];
""290_approve"" [label=""approve""];
""290_Bitmos"" [label=""Bitmos""];
}
"
0xf208f8cdf637e49b5e6219fa76b014d49287894f.sol,Gainz,contract Gainz { address owner; constructor () public { owner = msg.sender; },1,"subgraph cluster_111_Gainz {
label=""Gainz"";
""111_paymentDue"" [label=""paymentDue""];
""111_balanceOf"" [label=""balanceOf""];
""111_constructor"" [label=""constructor""];
""111_fallback"" [label=""fallback""];
""111_fallback"" -> ""111_paymentDue"";
}
"
0x5064ef946f91e8d94f845cf9a403acb1b9739eb2.sol,TheGame,contract TheGame { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_128_TheGame {
label=""TheGame"";
""128_StopGame"" [label=""StopGame""];
""128_fallback"" [label=""fallback""];
""128_NewQuestion"" [label=""NewQuestion""];
""128_StartTheGame"" [label=""StartTheGame""];
""128_newQuestioner"" [label=""newQuestioner""];
""128_Try"" [label=""Try""];
}
"
0x77e89cb283f39ed72f4383c6eec786bd7e7c12d5.sol,eBitcoinCash,contract eBitcoinCash is ERC20 { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 _totalSupply = 21000000 * 10**18; address public owner; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; function eBitcoinCash() { owner = msg.sender; balances[owner] = 21000000 * 10**18; },1,"subgraph cluster_482_eBitcoinCash {
label=""eBitcoinCash"";
""482_balanceOf"" [label=""balanceOf""];
""482_totalSupply"" [label=""totalSupply""];
""482_distributeeBitcoinCashMedium"" [label=""distributeeBitcoinCashMedium""];
""482_transfer"" [label=""transfer""];
""482_distributeeBitcoinCashSmall"" [label=""distributeeBitcoinCashSmall""];
""482_transferFrom"" [label=""transferFrom""];
""482_allowance"" [label=""allowance""];
""482_distributeeBitcoinCashLarge"" [label=""distributeeBitcoinCashLarge""];
""482_eBitcoinCash"" [label=""eBitcoinCash""];
""482_approve"" [label=""approve""];
""482_distributeeBitcoinCashSmall"" -> ""482_onlyOwner"";
""482_distributeeBitcoinCashMedium"" -> ""482_onlyOwner"";
""482_distributeeBitcoinCashLarge"" -> ""482_onlyOwner"";
}
"
0x126bba3aa97d9f6e98f56705f29ab02f7660b445.sol,EducationTokens,"contract EducationTokens is owned{ using SafeMath for uint256; bool private transferFlag; string public name; uint256 public decimals; string public symbol; string public version; uint256 public totalSupply; uint256 public deployTime; mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; mapping(address => uint256) private userLockedTokens; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Lock(address userAddress, uint256 amount); event Unlock(address userAddress,uint256 amount); event SetFlag(bool flag); constructor() public { transferFlag = true; name = ; decimals = 4; symbol = ; version = ; totalSupply = 2100000000 * 10 ** decimals; owner = msg.sender; deployTime = block.timestamp; balances[msg.sender] = totalSupply; }",1,"subgraph cluster_597_EducationTokens {
label=""EducationTokens"";
""597_tokenLock"" [label=""tokenLock""];
""597_transferFrom"" [label=""transferFrom""];
""597_decimals"" [label=""decimals""];
""597_symbol"" [label=""symbol""];
""597_constructor"" [label=""constructor""];
""597_tokenUnlock"" [label=""tokenUnlock""];
""597_allowance"" [label=""allowance""];
""597_setTransferFlag"" [label=""setTransferFlag""];
""597_approve"" [label=""approve""];
""597_totalSupply"" [label=""totalSupply""];
""597_transfer"" [label=""transfer""];
""597_balanceOf"" [label=""balanceOf""];
""597_name"" [label=""name""];
""597_tokenLock"" -> ""597_balanceOf"";
""597_transferFrom"" -> ""597_balanceOf"";
""597_transferFrom"" -> ""597_canTransfer"";
""597_tokenLock"" -> ""597_onlyOwner"";
""597_transfer"" -> ""597_balanceOf"";
""597_transfer"" -> ""597_canTransfer"";
""597_tokenUnlock"" -> ""597_onlyOwner"";
""597_setTransferFlag"" -> ""597_onlyOwner"";
}
"
0xeb907a50921e052cbee233811beaf0839d2a98fd.sol,Advertisement,contract Advertisement { struct Filters { string countries; string packageName; uint[] vercodes; },1,"subgraph cluster_888_Advertisement {
label=""Advertisement"";
""888_cancelCampaign"" [label=""cancelCampaign""];
""888_payFromCampaign"" [label=""payFromCampaign""];
""888_getPackageNameOfCampaign"" [label=""getPackageNameOfCampaign""];
""888_getPriceOfCampaign"" [label=""getPriceOfCampaign""];
""888_getStartDateOfCampaign"" [label=""getStartDateOfCampaign""];
""888_division"" [label=""division""];
""888_getBidIdList"" [label=""getBidIdList""];
""888_getEndDateOfCampaign"" [label=""getEndDateOfCampaign""];
""888_getCountriesOfCampaign"" [label=""getCountriesOfCampaign""];
""888_addCampaignToCountryMap"" [label=""addCampaignToCountryMap""];
""888_registerPoA"" [label=""registerPoA""];
""888_getOwnerOfCampaign"" [label=""getOwnerOfCampaign""];
""888_getBudgetOfCampaign"" [label=""getBudgetOfCampaign""];
""888_getCampaignValidity"" [label=""getCampaignValidity""];
""888_getVercodesOfCampaign"" [label=""getVercodesOfCampaign""];
""888_Advertisement"" [label=""Advertisement""];
""888_getCountryList"" [label=""getCountryList""];
""888_getTotalCampaignsByCountry"" [label=""getTotalCampaignsByCountry""];
""888_addCampaign"" [label=""addCampaign""];
""888_uintToBytes"" [label=""uintToBytes""];
""888_getCampaignsByCountry"" [label=""getCampaignsByCountry""];
""888_createCampaign"" [label=""createCampaign""];
""888_setBudgetOfCampaign"" [label=""setBudgetOfCampaign""];
""888_setCampaignValidity"" [label=""setCampaignValidity""];
""888_payFromCampaign"" -> ""888_division"";
""888_createCampaign"" -> ""888_uintToBytes"";
""888_cancelCampaign"" -> ""888_getOwnerOfCampaign"";
""888_cancelCampaign"" -> ""888_setBudgetOfCampaign"";
""888_createCampaign"" -> ""888_addCampaign"";
""888_cancelCampaign"" -> ""888_getBudgetOfCampaign"";
""888_addCampaign"" -> ""888_addCampaignToCountryMap"";
""888_cancelCampaign"" -> ""888_setCampaignValidity"";
}
"
0x71a982a028c9d4b0566041a78df12b810462e155.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_approve"" [label=""approve""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_burnFrom"" [label=""burnFrom""];
""396__transfer"" [label=""_transfer""];
""396_burn"" [label=""burn""];
""396_transferFrom"" [label=""transferFrom""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_transfer"" [label=""transfer""];
""396_transferFrom"" -> ""396__transfer"";
""396_transfer"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
}
"
0xf12bc22c88c4c770b1e116853cc0500bb70a81ca.sol,GLADLIVEToken,"contract GLADLIVEToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_388_GLADLIVEToken {
label=""GLADLIVEToken"";
""388__burn"" [label=""_burn""];
""388_burnFrom"" [label=""burnFrom""];
""388_approveAndCall"" [label=""approveAndCall""];
""388_transferFrom"" [label=""transferFrom""];
""388_burn"" [label=""burn""];
""388_constructor"" [label=""constructor""];
""388_approve"" [label=""approve""];
""388_transfer"" [label=""transfer""];
""388__transfer"" [label=""_transfer""];
""388_transferFrom"" -> ""388__transfer"";
""388_approveAndCall"" -> ""388_approve"";
""388_burnFrom"" -> ""388__burn"";
""388_transfer"" -> ""388__transfer"";
""388_burn"" -> ""388__burn"";
}
"
0xaacfbd1f81351a7e748f4a4a43c31d892a33f27d.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_transferFrom"" [label=""transferFrom""];
""256_balanceOf"" [label=""balanceOf""];
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
""256_approve"" [label=""approve""];
}
"
0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol,Multiplexer,"contract Multiplexer { function sendEth(address[] _to, uint256[] _value) payable returns (bool _success) { assert(_to.length == _value.length); assert(_to.length <= 255); uint256 beforeValue = msg.value; uint256 afterValue = 0; for (uint8 i = 0; i < _to.length; i++) { afterValue = afterValue + _value[i]; assert(_to[i].send(_value[i])); }",1,"subgraph cluster_169_Multiplexer {
label=""Multiplexer"";
""169_sendErc20"" [label=""sendErc20""];
""169_sendEth"" [label=""sendEth""];
}
"
0x0374b22e0727302e0d8db783726c7ec4989f88ad.sol,GINI,"contract GINI is ERC20, Ownable, Pausable { using SafeMath for uint256; string public name; string public symbol; uint8 constant public decimals =18; uint256 internal initialSupply; uint256 internal totalSupply_; mapping(address => uint256) internal balances; mapping(address => mapping(address => uint256)) internal allowed; event Burn(address indexed owner, uint256 value); constructor() public { name = ; symbol = ; initialSupply = 122500000; totalSupply_ = initialSupply * 10 ** uint(decimals); balances[owner] = totalSupply_; emit Transfer(address(0), owner, totalSupply_); }",1,"subgraph cluster_812_GINI {
label=""GINI"";
""812_approve"" [label=""approve""];
""812_allowance"" [label=""allowance""];
""812_distribute"" [label=""distribute""];
""812_transfer"" [label=""transfer""];
""812_isContract"" [label=""isContract""];
""812_burn"" [label=""burn""];
""812_totalSupply"" [label=""totalSupply""];
""812_balanceOf"" [label=""balanceOf""];
""812_transferFrom"" [label=""transferFrom""];
""812_constructor"" [label=""constructor""];
""812_approveAndCall"" [label=""approveAndCall""];
""812_claimToken"" [label=""claimToken""];
""812_claimToken"" -> ""812_onlyOwner"";
""812_approve"" -> ""812_whenNotPaused"";
""812_approveAndCall"" -> ""812_approve"";
""812_transfer"" -> ""812_whenNotPaused"";
""812_approveAndCall"" -> ""812_isContract"";
""812_burn"" -> ""812_onlyOwner"";
""812_transferFrom"" -> ""812_whenNotPaused"";
""812_distribute"" -> ""812_onlyOwner"";
}
"
0x05dab93a76f33fdb225e0a05cafbdd41612b88b6.sol,TeikhosBounty,contract TeikhosBounty { address public bipedaljoe = 0x4c5D24A7Ca972aeA90Cc040DA6770A13Fc7D4d9A; SHA3_512 public sha3_512 = SHA3_512(0xbD6361cC42fD113ED9A9fdbEDF7eea27b325a222); struct Commit { uint timestamp; bytes signature; },1,"subgraph cluster_504_TeikhosBounty {
label=""TeikhosBounty"";
""504_reveal"" [label=""reveal""];
""504_fallback"" [label=""fallback""];
""504_commit"" [label=""commit""];
""504_getHash"" [label=""getHash""];
""504_reward"" [label=""reward""];
""504_authenticate"" [label=""authenticate""];
""504_authenticate"" -> ""504_getHash"";
""504_reveal"" -> ""504_inState"";
""504_reward"" -> ""504_inState"";
""504_authenticate"" -> ""504_inState"";
""504_commit"" -> ""504_inState"";
}
"
0x69ceaea78e28d62bc1ac68491d77f6a761edce01.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_342_StandardToken {
label=""StandardToken"";
""342_balanceOf"" [label=""balanceOf""];
""342_transferFrom"" [label=""transferFrom""];
""342_approve"" [label=""approve""];
""342_transfer"" [label=""transfer""];
""342_allowance"" [label=""allowance""];
}
"
0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol,Log,contract Log { struct Message { address Sender; string Data; uint Val; uint Time; },1,"subgraph cluster_183_Log {
label=""Log"";
""183_AddMessage"" [label=""AddMessage""];
}
"
0x1848df8d1728a8ce654c7faf833b2d7296744fe4.sol,WorldToken,contract WorldToken { string public name = ; string public symbol = ; uint256 public decimals = 6; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 420000000000000; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_354_WorldToken {
label=""WorldToken"";
""354_transfer"" [label=""transfer""];
""354_burn"" [label=""burn""];
""354_start"" [label=""start""];
""354_stop"" [label=""stop""];
""354_approve"" [label=""approve""];
""354_transferFrom"" [label=""transferFrom""];
""354_WorldToken"" [label=""WorldToken""];
""354_setName"" [label=""setName""];
""354_transfer"" -> ""354_isRunning"";
""354_approve"" -> ""354_validAddress"";
""354_transfer"" -> ""354_validAddress"";
""354_stop"" -> ""354_isOwner"";
""354_transferFrom"" -> ""354_isRunning"";
""354_approve"" -> ""354_isRunning"";
""354_setName"" -> ""354_isOwner"";
""354_start"" -> ""354_isOwner"";
""354_transferFrom"" -> ""354_validAddress"";
}
"
0xed04927a3849fc9db3f3341a17b7d844a6c551a8.sol,CrowdInvestment,"contract CrowdInvestment { uint private restAmountToInvest; uint private maxGasPrice; address private creator; mapping(address => uint) private perUserInvestments; mapping(address => uint) private additionalCaps; uint private limitPerInvestor; function CrowdInvestment(uint totalCap, uint maxGasPriceParam, uint capForEverybody) public { restAmountToInvest = totalCap; creator = msg.sender; maxGasPrice = maxGasPriceParam; limitPerInvestor = capForEverybody; }",1,"subgraph cluster_188_CrowdInvestment {
label=""CrowdInvestment"";
""188_getCap"" [label=""getCap""];
""188_addPersonalCap"" [label=""addPersonalCap""];
""188_addPersonalCaps"" [label=""addPersonalCaps""];
""188_CrowdInvestment"" [label=""CrowdInvestment""];
""188_getTotalCap"" [label=""getTotalCap""];
""188_fallback"" [label=""fallback""];
""188_withdraw"" [label=""withdraw""];
""188_fallback"" -> ""188_getCap"";
}
"
0x3798b1c6e7bad3f0720c0e9ddcdb018857e13a4c.sol,RareCards,"contract RareCards is AccessAdmin, ERC721 { using SafeMath for SafeMath; event eCreateRare(uint256 tokenId, uint256 price, address owner); event Transfer(address indexed _from, address indexed _to, uint256 _tokenId); event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId); event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved); struct RareCard { uint256 rareId; uint256 rareClass; uint256 cardId; uint256 rareValue; }",1,"subgraph cluster_1405_RareCards {
label=""RareCards"";
""1405_setRarePrice"" [label=""setRarePrice""];
""1405_isApprovedForAll"" [label=""isApprovedForAll""];
""1405_approve"" [label=""approve""];
""1405_getApproved"" [label=""getApproved""];
""1405__transfer"" [label=""_transfer""];
""1405_tokensOfOwner"" [label=""tokensOfOwner""];
""1405_RareCards"" [label=""RareCards""];
""1405_ownerOf"" [label=""ownerOf""];
""1405_totalSupply"" [label=""totalSupply""];
""1405_safeTransferFrom"" [label=""safeTransferFrom""];
""1405_tokenOfOwnerByIndex"" [label=""tokenOfOwnerByIndex""];
""1405_getRarePLATInfo"" [label=""getRarePLATInfo""];
""1405_getRareInfo"" [label=""getRareInfo""];
""1405_transferToken"" [label=""transferToken""];
""1405_getRareItemsOwner"" [label=""getRareItemsOwner""];
""1405_transferFrom"" [label=""transferFrom""];
""1405_createRareCard"" [label=""createRareCard""];
""1405_tokenByIndex"" [label=""tokenByIndex""];
""1405_getRareItemsPrice"" [label=""getRareItemsPrice""];
""1405__createRareCard"" [label=""_createRareCard""];
""1405_balanceOf"" [label=""balanceOf""];
""1405_getRareItemsPLATPrice"" [label=""getRareItemsPLATPrice""];
""1405_transferTokenByContract"" [label=""transferTokenByContract""];
""1405__safeTransferFrom"" [label=""_safeTransferFrom""];
""1405_rareStartPrice"" [label=""rareStartPrice""];
""1405_getRareItemInfo"" [label=""getRareItemInfo""];
""1405_setApprovalForAll"" [label=""setApprovalForAll""];
""1405_setRarePrice"" -> ""1405_onlyAccess"";
""1405_approve"" -> ""1405_isValidToken"";
""1405_transferFrom"" -> ""1405__transfer"";
""1405_transferToken"" -> ""1405_onlyAccess"";
""1405_transferTokenByContract"" -> ""1405__transfer"";
""1405_createRareCard"" -> ""1405__createRareCard"";
""1405__safeTransferFrom"" -> ""1405_isValidToken"";
""1405__safeTransferFrom"" -> ""1405__transfer"";
""1405_approve"" -> ""1405_onlyOwnerOf"";
""1405__createRareCard"" -> ""1405__transfer"";
""1405_transferFrom"" -> ""1405_isValidToken"";
""1405_safeTransferFrom"" -> ""1405__safeTransferFrom"";
""1405__safeTransferFrom"" -> ""1405_onlyOwnerOf"";
""1405_transferFrom"" -> ""1405_onlyOwnerOf"";
""1405_getApproved"" -> ""1405_isValidToken"";
""1405_transferTokenByContract"" -> ""1405_onlyAccess"";
""1405_RareCards"" -> ""1405_setAdminContract"";
""1405_createRareCard"" -> ""1405_onlyOwner"";
""1405_RareCards"" -> ""1405_setActionContract"";
""1405_transferToken"" -> ""1405__transfer"";
}
"
0xced350d7ef320c38cc5090c89e7475dfd2e0fff4.sol,BimuyuCoin,"contract BimuyuCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BimuyuCoin() public { symbol = ; name = ; decimals = 18; _totalSupply = 10000000000000000000000000000; balances[0x32473D19cD9009E1a9203dEb7117C89F5E359DF3] = _totalSupply; Transfer(address(0), 0x32473D19cD9009E1a9203dEb7117C89F5E359DF3, _totalSupply); }",1,"subgraph cluster_543_BimuyuCoin {
label=""BimuyuCoin"";
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_BimuyuCoin"" [label=""BimuyuCoin""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x899850f5b7f34d213a01802c727e7a59a88487a1.sol,MessageToken,"contract MessageToken { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function MessageToken() { balanceOf[msg.sender] = 10000; totalSupply = 10000; name = ; symbol = ; decimals = 0; }",1,"subgraph cluster_358_MessageToken {
label=""MessageToken"";
""358_mintToken"" [label=""mintToken""];
""358_burnFrom"" [label=""burnFrom""];
""358_burn"" [label=""burn""];
""358_MessageToken"" [label=""MessageToken""];
""358_transfer"" [label=""transfer""];
""358_approve"" [label=""approve""];
""358_approveAndCall"" [label=""approveAndCall""];
""358_transferFrom"" [label=""transferFrom""];
""358_approveAndCall"" -> ""358_approve"";
}
"
0x05d2b0239e6646765865abe47a72202916caf559.sol,Ethernext,"contract Ethernext { string public name = ; string public symbol = ; uint256 public decimals = 8; uint256 public totalSupply = 825*1000*1000*10**decimals; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Ethernext( ) public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_348_Ethernext {
label=""Ethernext"";
""348_burnFrom"" [label=""burnFrom""];
""348_approveAndCall"" [label=""approveAndCall""];
""348_transferFrom"" [label=""transferFrom""];
""348_Ethernext"" [label=""Ethernext""];
""348_approve"" [label=""approve""];
""348_burn"" [label=""burn""];
""348_transfer"" [label=""transfer""];
""348__transfer"" [label=""_transfer""];
""348_approveAndCall"" -> ""348_approve"";
""348_transferFrom"" -> ""348__transfer"";
""348_transfer"" -> ""348__transfer"";
}
"
0xf04605be6f8cbf23d66533da283c816534686f80.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_allowance"" [label=""allowance""];
""256_approve"" [label=""approve""];
""256_transferFrom"" [label=""transferFrom""];
""256_balanceOf"" [label=""balanceOf""];
""256_transfer"" [label=""transfer""];
}
"
0x6c91c0104677d08cded353b1459b68415f278c38.sol,FastEth,contract FastEth { address constant private PROMO1 = 0xaC780d067c52227ac7563FBe975eD9A8F235eb35; address constant private PROMO2 = 0x6dBFFf54E23Cf6DB1F72211e0683a5C6144E8F03; address constant private CASHBACK = 0x33cA4CbC4b171c32C16c92AFf9feE487937475F8; address constant private PRIZE = 0xeE9B823ef62FfB79aFf2C861eDe7d632bbB5B653; uint constant public PERCENT = 4; uint constant public BONUS_PERCENT = 5; uint constant StartEpoc = 1541329170; struct Deposit { address depositor; uint deposit; uint payout; },1,"subgraph cluster_338_FastEth {
label=""FastEth"";
""338_pay"" [label=""pay""];
""338_fallback"" [label=""fallback""];
""338_getQueueLength"" [label=""getQueueLength""];
""338_getDepositsCount"" [label=""getDepositsCount""];
""338_fallback"" -> ""338_pay"";
}
"
0xecfbc0c5bc5cf4a266c1a90db0a4fe79c82bcd93.sol,HYIPToken,"contract HYIPToken is BurnableToken, UpgradeableToken { string public name; string public symbol; uint public decimals; address public owner; mapping (address => bool) public mintAgents; event MintingAgentChanged(address addr, bool state); function mint(address receiver, uint amount) onlyMintAgent public { totalSupply = totalSupply + amount; balances[receiver] = balances[receiver] + amount; Transfer(0, receiver, amount); }",1,"subgraph cluster_1023_HYIPToken {
label=""HYIPToken"";
""1023_mint"" [label=""mint""];
""1023_HYIPToken"" [label=""HYIPToken""];
""1023_setMintAgent"" [label=""setMintAgent""];
""1023_setMintAgent"" -> ""1023_onlyOwner"";
""1023_mint"" -> ""1023_onlyMintAgent"";
""1023_HYIPToken"" -> ""1023_UpgradeableToken"";
}
"
0x55fe4eaae4c2636d1f0ae63542617564c3832edf.sol,FoMo3DFast,contract FoMo3DFast is F3Devents { using SafeMath for *; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0xF2940f868fcD1Fbe8D1E1c02d2eaF68d8D7Db338); address private admin = msg.sender; uint256 constant private rndInc_ = 60 seconds; uint256 constant private smallTime_ = 5 minutes; uint256 constant private rndMax_ = 24 hours; uint256 public rID_; uint256 constant public keyPricePot_ = 10000000000000000; mapping(address => uint256) public pIDxAddr_; mapping(uint256 => F3Ddatasets.PlayerVault) public plyr_; mapping(uint256 => mapping(uint256 => F3Ddatasets.PlayerRound)) public plyrRnds_; mapping(uint256 => F3Ddatasets.Auction) public auction_; mapping(uint256 => F3Ddatasets.BigPot) public bigPot_; F3Ddatasets.SmallPot public smallPot_; mapping(uint256 => uint256) public rndTmEth_; uint256 private keyMax_ = 0; address private keyMaxAddress_ = address(0); uint256 private affKeyMax_ = 0; uint256 private affKeyMaxPlayId_ = 0; constructor() public { },1,"subgraph cluster_2875_FoMo3DFast {
label=""FoMo3DFast"";
""2875_buy"" [label=""buy""];
""2875_updateMasks"" [label=""updateMasks""];
""2875_determinePID"" [label=""determinePID""];
""2875_getAuctionTimer"" [label=""getAuctionTimer""];
""2875_activate"" [label=""activate""];
""2875_endRound"" [label=""endRound""];
""2875_getPlayerInfoById"" [label=""getPlayerInfoById""];
""2875_getAdmin"" [label=""getAdmin""];
""2875_distributeBuy"" [label=""distributeBuy""];
""2875_buyXQR"" [label=""buyXQR""];
""2875_withdrawXQR"" [label=""withdrawXQR""];
""2875_getSmallPotInfo"" [label=""getSmallPotInfo""];
""2875_getTimeLeft"" [label=""getTimeLeft""];
""2875_receivePlayerInfo"" [label=""receivePlayerInfo""];
""2875_getPlayerInfoxAddr"" [label=""getPlayerInfoxAddr""];
""2875_managePlayer"" [label=""managePlayer""];
""2875_getrID"" [label=""getrID""];
""2875_constructor"" [label=""constructor""];
""2875_getPlayerVaults"" [label=""getPlayerVaults""];
""2875_updateGenVault"" [label=""updateGenVault""];
""2875_getPlayerVaultxAddr"" [label=""getPlayerVaultxAddr""];
""2875_withdrawEarnings"" [label=""withdrawEarnings""];
""2875_getCurrentRoundBigPotInfo"" [label=""getCurrentRoundBigPotInfo""];
""2875_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""2875_fallback"" [label=""fallback""];
""2875_getPlayerIdxAddr"" [label=""getPlayerIdxAddr""];
""2875_updateTimer"" [label=""updateTimer""];
""2875_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""2875_smallPot"" [label=""smallPot""];
""2875_withdrawXQR"" -> ""2875_withdrawEarnings"";
""2875_getPlayerVaults"" -> ""2875_calcUnMaskedEarnings"";
""2875_buyXQR"" -> ""2875_determinePID"";
""2875_buy"" -> ""2875_managePlayer"";
""2875_managePlayer"" -> ""2875_updateGenVault"";
""2875_withdrawXQR"" -> ""2875_isActivated"";
""2875_updateGenVault"" -> ""2875_calcUnMaskedEarnings"";
""2875_buy"" -> ""2875_updateTimer"";
""2875_fallback"" -> ""2875_isWithinLimits"";
""2875_buyXQR"" -> ""2875_isWithinLimits"";
""2875_fallback"" -> ""2875_determinePID"";
""2875_buy"" -> ""2875_smallPot"";
""2875_buyXQR"" -> ""2875_buy"";
""2875_withdrawXQR"" -> ""2875_endRound"";
""2875_buy"" -> ""2875_distributeBuy"";
""2875_buyXQR"" -> ""2875_isActivated"";
""2875_buy"" -> ""2875_updateMasks"";
""2875_fallback"" -> ""2875_buy"";
""2875_fallback"" -> ""2875_isHuman"";
""2875_buyXQR"" -> ""2875_endRound"";
""2875_withdrawEarnings"" -> ""2875_updateGenVault"";
""2875_fallback"" -> ""2875_isActivated"";
""2875_fallback"" -> ""2875_endRound"";
}
"
0xd86f790b2bfca7b224165662ae5bb21663a999a1.sol,GCRTokenERC20,"contract GCRTokenERC20 { string public constant _myTokeName = ; string public constant _mySymbol = ; uint public constant _myinitialSupply = 100000000; uint8 public constant _myDecimal = 18; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function GCRTokenERC20() { totalSupply = 100000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = 100000000; name = ; symbol = ; }",1,"subgraph cluster_401_GCRTokenERC20 {
label=""GCRTokenERC20"";
""401_transfer"" [label=""transfer""];
""401__transfer"" [label=""_transfer""];
""401_burnFrom"" [label=""burnFrom""];
""401_burn"" [label=""burn""];
""401_GCRTokenERC20"" [label=""GCRTokenERC20""];
""401_approveAndCall"" [label=""approveAndCall""];
""401_transferFrom"" [label=""transferFrom""];
""401_approve"" [label=""approve""];
""401_transfer"" -> ""401__transfer"";
""401_approveAndCall"" -> ""401_approve"";
""401_transferFrom"" -> ""401__transfer"";
}
"
0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol,Log,contract Log { struct Message { address Sender; string Data; uint Val; uint Time; },1,"subgraph cluster_212_Log {
label=""Log"";
""212_AddMessage"" [label=""AddMessage""];
}
"
0xcfd2047eb61412e9b8de511dc2087e07003829ee.sol,FifteenPlus,contract FifteenPlus { address owner; address ths = this; mapping (address => uint256) balance; mapping (address => uint256) overallPayment; mapping (address => uint256) timestamp; mapping (address => uint256) prtime; mapping (address => uint16) rate; constructor() public { owner = msg.sender;},1,"subgraph cluster_151_FifteenPlus {
label=""FifteenPlus"";
""151_constructor"" [label=""constructor""];
""151_fallback"" [label=""fallback""];
}
"
0x3f922acba2ee567a93933fa4392c2690e4706d42.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x267398927b5886df921b235afe9dbbe47fbcc37d.sol,NobarToken,"contract NobarToken { string public name; string public symbol; uint8 public decimals = 2; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function NobarToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_NobarToken {
label=""NobarToken"";
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_NobarToken"" [label=""NobarToken""];
""361_approve"" [label=""approve""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x6b87999be87358065bbde41e8a0fe0b7b1cd2514.sol,TeslaWatt,"contract TeslaWatt is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000 * 10**uint(decimals); balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_550_TeslaWatt {
label=""TeslaWatt"";
""550_allowance"" [label=""allowance""];
""550_fallback"" [label=""fallback""];
""550_constructor"" [label=""constructor""];
""550_transfer"" [label=""transfer""];
""550_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""550_approve"" [label=""approve""];
""550_totalSupply"" [label=""totalSupply""];
""550_approveAndCall"" [label=""approveAndCall""];
""550_balanceOf"" [label=""balanceOf""];
""550_transferFrom"" [label=""transferFrom""];
""550_transferAnyERC20Token"" -> ""550_onlyOwner"";
}
"
0x4200942093f5c8c2ce865e17b3fdec9148de8c49.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_burnFrom"" [label=""burnFrom""];
""396_transfer"" [label=""transfer""];
""396_burn"" [label=""burn""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_transferFrom"" [label=""transferFrom""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_approve"" [label=""approve""];
""396__transfer"" [label=""_transfer""];
""396_transfer"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transferFrom"" -> ""396__transfer"";
}
"
0x5b6696ed1e4e74c2a73a3f27186ab315f4fa55d8.sol,TkoWhitelist,"contract TkoWhitelist is Ownable{ using SafeMath for uint256; address public admin; mapping(address => uint256) internal totalIndividualWeiAmount; mapping(address => bool) internal whitelist; event AdminChanged(address indexed previousAdmin, address indexed newAdmin); function TkoWhitelist (address _admin) public { require(_admin != address(0)); admin = _admin; }",1,"subgraph cluster_355_TkoWhitelist {
label=""TkoWhitelist"";
""355_changeAdmin"" [label=""changeAdmin""];
""355_isWhitelisted"" [label=""isWhitelisted""];
""355_removeFromWhitelist"" [label=""removeFromWhitelist""];
""355_addTotalIndividualWeiAmount"" [label=""addTotalIndividualWeiAmount""];
""355_addManyToWhitelist"" [label=""addManyToWhitelist""];
""355_getTotalIndividualWeiAmount"" [label=""getTotalIndividualWeiAmount""];
""355_TkoWhitelist"" [label=""TkoWhitelist""];
""355_setTotalIndividualWeiAmount"" [label=""setTotalIndividualWeiAmount""];
""355_addToWhitelist"" [label=""addToWhitelist""];
""355_setTotalIndividualWeiAmount"" -> ""355_onlyOwner"";
""355_addManyToWhitelist"" -> ""355_onlyOwnerOrAdmin"";
""355_removeFromWhitelist"" -> ""355_onlyOwnerOrAdmin"";
""355_isWhitelisted"" -> ""355_onlyOwnerOrAdmin"";
""355_addToWhitelist"" -> ""355_onlyOwnerOrAdmin"";
""355_addTotalIndividualWeiAmount"" -> ""355_onlyOwner"";
""355_getTotalIndividualWeiAmount"" -> ""355_onlyOwnerOrAdmin"";
""355_changeAdmin"" -> ""355_onlyOwner"";
}
"
0x291fe087234eaa19f8b16b5d341b4e4540c220aa.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 initialSupply=4000000000; uint256 MAX_CAP = 4000000000; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20() public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_452_TokenERC20 {
label=""TokenERC20"";
""452_burn"" [label=""burn""];
""452_approve"" [label=""approve""];
""452_transferFrom"" [label=""transferFrom""];
""452_burnFrom"" [label=""burnFrom""];
""452_TokenERC20"" [label=""TokenERC20""];
""452_approveAndCall"" [label=""approveAndCall""];
""452__transfer"" [label=""_transfer""];
""452_transfer"" [label=""transfer""];
""452_transfer"" -> ""452__transfer"";
""452_transferFrom"" -> ""452__transfer"";
""452_approveAndCall"" -> ""452_approve"";
}
"
0x7747aeb32d89e527e5ebbf646871ca79805989ad.sol,LitecoinCash,contract LitecoinCash is ERC20 { address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalSupply = 12000000 * 10**8; function name() public constant returns (string) { return ; },1,"subgraph cluster_555_LitecoinCash {
label=""LitecoinCash"";
""555_allowance"" [label=""allowance""];
""555_name"" [label=""name""];
""555_approve"" [label=""approve""];
""555_getEthBalance"" [label=""getEthBalance""];
""555_decimals"" [label=""decimals""];
""555_distributeLCASH"" [label=""distributeLCASH""];
""555_LitecoinCash"" [label=""LitecoinCash""];
""555_finishDistribution"" [label=""finishDistribution""];
""555_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""555_transfer"" [label=""transfer""];
""555_transferFrom"" [label=""transferFrom""];
""555_transferOwnership"" [label=""transferOwnership""];
""555_balanceOf"" [label=""balanceOf""];
""555_symbol"" [label=""symbol""];
""555_transferFrom"" -> ""555_onlyPayloadSize"";
""555_distributeLCASH"" -> ""555_onlyOwner"";
""555_distributeLCASH"" -> ""555_getEthBalance"";
""555_transfer"" -> ""555_onlyPayloadSize"";
""555_distributeLCASH"" -> ""555_canDistr"";
""555_finishDistribution"" -> ""555_onlyOwner"";
""555_transferOwnership"" -> ""555_onlyOwner"";
}
"
0x65244ee745288952f347d82ba69690fa9a9843c0.sol,BEX,contract BEX is ERC20Interface { function totalSupply()public constant returns (uint) { return totalBEXSupply; },1,"subgraph cluster_480_BEX {
label=""BEX"";
""480_allowance"" [label=""allowance""];
""480_balanceOf"" [label=""balanceOf""];
""480_sendByOwner"" [label=""sendByOwner""];
""480_transferFrom"" [label=""transferFrom""];
""480_BEX"" [label=""BEX""];
""480_approve"" [label=""approve""];
""480_transfer"" [label=""transfer""];
""480_setOperater"" [label=""setOperater""];
""480_safeToNextIdx"" [label=""safeToNextIdx""];
""480_totalSupply"" [label=""totalSupply""];
""480_changeOwner"" [label=""changeOwner""];
""480_destruct"" [label=""destruct""];
""480_sendByOwner"" -> ""480_safeToNextIdx"";
}
"
0xf4be3da9df0c12e69115bb5614334786fbaf5ace.sol,MiBoodleToken,"contract MiBoodleToken is ERC20,SafeMath,Haltable { bool public isMiBoodleToken = false; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => mapping (address => uint256)) allowedToBurn; mapping (address => uint256) investment; address public upgradeMaster; UpgradeAgent public upgradeAgent; uint256 public totalUpgraded; bool public upgradeAgentStatus = false; uint256 public start; uint256 public end; uint256 public preFundingStart; uint256 public preFundingtokens; uint256 public fundingTokens; uint256 public maxTokenSupply = 600000000 ether; uint256 public maxTokenSale = 200000000 ether; uint256 public maxTokenForPreSale = 100000000 ether; address public multisig; address public vault; bool public isCrowdSaleFinalized = false; uint256 minInvest = 1 ether; uint256 maxInvest = 50 ether; bool public isTransferEnable = false; bool public isReleasedOnce = false; event Allocate(address _address,uint256 _value); event Burn(address owner,uint256 _value); event ApproveBurner(address owner, address canBurn, uint256 value); event BurnFrom(address _from,uint256 _value); event Upgrade(address indexed _from, address indexed _to, uint256 _value); event UpgradeAgentSet(address agent); event Deposit(address _investor,uint256 _value); function MiBoodleToken(uint256 _preFundingtokens,uint256 _fundingTokens,uint256 _preFundingStart,uint256 _start,uint256 _end) public { upgradeMaster = msg.sender; isMiBoodleToken = true; preFundingtokens = _preFundingtokens; fundingTokens = _fundingTokens; preFundingStart = safeAdd(now, _preFundingStart); start = safeAdd(now, _start); end = safeAdd(now, _end); }",1,"subgraph cluster_1492_MiBoodleToken {
label=""MiBoodleToken"";
""1492_MiBoodleToken"" [label=""MiBoodleToken""];
""1492_burn"" [label=""burn""];
""1492_assignTokens"" [label=""assignTokens""];
""1492_allowanceToBurn"" [label=""allowanceToBurn""];
""1492_transferFrom"" [label=""transferFrom""];
""1492_cashInvestment"" [label=""cashInvestment""];
""1492_allowance"" [label=""allowance""];
""1492_setTransferEnable"" [label=""setTransferEnable""];
""1492_fallback"" [label=""fallback""];
""1492_approve"" [label=""approve""];
""1492_setFundingtokens"" [label=""setFundingtokens""];
""1492_setFundingStartTime"" [label=""setFundingStartTime""];
""1492_setUpgradeAgent"" [label=""setUpgradeAgent""];
""1492_approveForBurn"" [label=""approveForBurn""];
""1492_setMiBoodleVault"" [label=""setMiBoodleVault""];
""1492_balanceOf"" [label=""balanceOf""];
""1492_setPreFundingtokens"" [label=""setPreFundingtokens""];
""1492_setMaximumEtherToAccept"" [label=""setMaximumEtherToAccept""];
""1492_withdraw"" [label=""withdraw""];
""1492_transfer"" [label=""transfer""];
""1492_setMultisigWallet"" [label=""setMultisigWallet""];
""1492_setFundingEndTime"" [label=""setFundingEndTime""];
""1492_burnFrom"" [label=""burnFrom""];
""1492_setUpgradeMaster"" [label=""setUpgradeMaster""];
""1492_finalizeCrowdSale"" [label=""finalizeCrowdSale""];
""1492_setPreFundingStartTime"" [label=""setPreFundingStartTime""];
""1492_setMinimumEtherToAccept"" [label=""setMinimumEtherToAccept""];
""1492_upgrade"" [label=""upgrade""];
""1492_setFundingStartTime"" -> ""1492_onlyOwner"";
""1492_upgrade"" -> ""1492_safeAdd"";
""1492_setMinimumEtherToAccept"" -> ""1492_stopIfHalted"";
""1492_setMinimumEtherToAccept"" -> ""1492_onlyOwner"";
""1492_finalizeCrowdSale"" -> ""1492_safeAdd"";
""1492_setFundingEndTime"" -> ""1492_onlyOwner"";
""1492_setFundingStartTime"" -> ""1492_stopIfHalted"";
""1492_cashInvestment"" -> ""1492_stopIfHalted"";
""1492_setMaximumEtherToAccept"" -> ""1492_stopIfHalted"";
""1492_setMaximumEtherToAccept"" -> ""1492_onlyOwner"";
""1492_transfer"" -> ""1492_safeSub"";
""1492_upgrade"" -> ""1492_safeSub"";
""1492_burnFrom"" -> ""1492_safeSub"";
""1492_fallback"" -> ""1492_stopIfHalted"";
""1492_cashInvestment"" -> ""1492_assignTokens"";
""1492_finalizeCrowdSale"" -> ""1492_assignTokens"";
""1492_fallback"" -> ""1492_safeMul"";
""1492_MiBoodleToken"" -> ""1492_safeAdd"";
""1492_setPreFundingtokens"" -> ""1492_onlyOwner"";
""1492_fallback"" -> ""1492_assignTokens"";
""1492_setTransferEnable"" -> ""1492_onlyOwner"";
""1492_setMiBoodleVault"" -> ""1492_onlyOwner"";
""1492_transferFrom"" -> ""1492_safeSub"";
""1492_setPreFundingStartTime"" -> ""1492_onlyOwner"";
""1492_fallback"" -> ""1492_safeAdd"";
""1492_setTransferEnable"" -> ""1492_stopIfHalted"";
""1492_setUpgradeAgent"" -> ""1492_onlyOwner"";
""1492_setMultisigWallet"" -> ""1492_onlyOwner"";
""1492_cashInvestment"" -> ""1492_onlyOwner"";
""1492_setFundingtokens"" -> ""1492_stopIfHalted"";
""1492_transferFrom"" -> ""1492_safeAdd"";
""1492_setFundingtokens"" -> ""1492_onlyOwner"";
""1492_setPreFundingtokens"" -> ""1492_stopIfHalted"";
""1492_burn"" -> ""1492_safeSub"";
""1492_withdraw"" -> ""1492_onlyOwner"";
""1492_assignTokens"" -> ""1492_safeAdd"";
""1492_transfer"" -> ""1492_safeAdd"";
""1492_cashInvestment"" -> ""1492_safeAdd"";
""1492_setPreFundingStartTime"" -> ""1492_stopIfHalted"";
""1492_setFundingEndTime"" -> ""1492_stopIfHalted"";
}
"
0x3ac96bbe8b60d715fd818b3fe242edf9def20571.sol,token,"contract token { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); function token( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_290_token {
label=""token"";
""290_token"" [label=""token""];
""290_transferFrom"" [label=""transferFrom""];
""290_approve"" [label=""approve""];
""290_fallback"" [label=""fallback""];
""290_approveAndCall"" [label=""approveAndCall""];
""290_transfer"" [label=""transfer""];
""290_approveAndCall"" -> ""290_approve"";
}
"
0x2793a23341012e0970cf478bab08606b56504c3e.sol,EternalStorage,contract EternalStorage is Administratable { struct Storage { mapping(bytes32 => bool) _bool; mapping(bytes32 => int) _int; mapping(bytes32 => uint256) _uint; mapping(bytes32 => string) _string; mapping(bytes32 => address) _address; mapping(bytes32 => bytes) _bytes; },1,"subgraph cluster_689_EternalStorage {
label=""EternalStorage"";
""689_setString"" [label=""setString""];
""689_getAddress"" [label=""getAddress""];
""689_setAddress"" [label=""setAddress""];
""689_setUint"" [label=""setUint""];
""689_setBytes"" [label=""setBytes""];
""689_getBytes"" [label=""getBytes""];
""689_getString"" [label=""getString""];
""689_setBoolean"" [label=""setBoolean""];
""689_getBoolean"" [label=""getBoolean""];
""689_getInt"" [label=""getInt""];
""689_setInt"" [label=""setInt""];
""689_getUint"" [label=""getUint""];
""689_setUint"" -> ""689_onlyAdmins"";
""689_setBytes"" -> ""689_onlyAdmins"";
""689_setBoolean"" -> ""689_onlyAdmins"";
""689_setString"" -> ""689_onlyAdmins"";
""689_setAddress"" -> ""689_onlyAdmins"";
""689_setInt"" -> ""689_onlyAdmins"";
}
"
0x88d4f99341de4afdd94cfb7c1c67c885b79ba6bc.sol,Deed,contract Deed { address constant burn = 0xdead; address public registrar; address public owner; address public previousOwner; uint public creationDate; uint public value; bool active; event OwnerChanged(address newOwner); event DeedClosed(); modifier onlyRegistrar { require(msg.sender == registrar); _; },1,"subgraph cluster_1422_Deed {
label=""Deed"";
""1422_creationDate"" [label=""creationDate""];
""1422_setBalance"" [label=""setBalance""];
""1422_setOwner"" [label=""setOwner""];
""1422_value"" [label=""value""];
""1422_destroyDeed"" [label=""destroyDeed""];
""1422_previousOwner"" [label=""previousOwner""];
""1422_Deed"" [label=""Deed""];
""1422_setRegistrar"" [label=""setRegistrar""];
""1422_closeDeed"" [label=""closeDeed""];
""1422_owner"" [label=""owner""];
""1422_setBalance"" -> ""1422_onlyActive"";
""1422_setOwner"" -> ""1422_onlyRegistrar"";
""1422_setBalance"" -> ""1422_onlyRegistrar"";
""1422_closeDeed"" -> ""1422_onlyRegistrar"";
""1422_closeDeed"" -> ""1422_destroyDeed"";
""1422_setRegistrar"" -> ""1422_onlyRegistrar"";
""1422_closeDeed"" -> ""1422_onlyActive"";
}
"
0xf0344800bd3ffa687e4d780357961b28995a5f46.sol,QUIZ_GAME,contract QUIZ_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_QUIZ_GAME {
label=""QUIZ_GAME"";
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_StartGame"" [label=""StartGame""];
}
"
0x4902c062f1384654bd075b719c6a26a83ef7aaf0.sol,TokenERC20,contract TokenERC20 { address public owner; uint256 public feesA = 1; uint256 public feesB = 1; uint256 public feesC = 1; uint256 public feesD = 1; address public addressA = 0xC61994B01607Ed7351e1D4FEE93fb0e661ceE39c; address public addressB = 0x821D44F1d04936e8b95D2FFAE91DFDD6E6EA39F9; address public addressC = 0xf193c2EC62466fd338710afab04574E7Eeb6C0e2; address public addressD = 0x3105889390F894F8ee1d3f8f75E2c4dde57735bA; function founder() private { owner = msg.sender; },1,"subgraph cluster_716_TokenERC20 {
label=""TokenERC20"";
""716_burn"" [label=""burn""];
""716_setaddress"" [label=""setaddress""];
""716_transfer"" [label=""transfer""];
""716_TokenERC20"" [label=""TokenERC20""];
""716_setfees"" [label=""setfees""];
""716_approveAndCall"" [label=""approveAndCall""];
""716_change_owner"" [label=""change_owner""];
""716__transfer"" [label=""_transfer""];
""716_transferFrom"" [label=""transferFrom""];
""716_Reissue"" [label=""Reissue""];
""716_founder"" [label=""founder""];
""716_burnFrom"" [label=""burnFrom""];
""716_approve"" [label=""approve""];
""716_transfer"" -> ""716__transfer"";
""716_approveAndCall"" -> ""716_approve"";
""716_transferFrom"" -> ""716__transfer"";
}
"
0x586927ff87bf40aada74afbff5e2409b865be023.sol,HashBet,contract HashBet { constructor() public {},1,"subgraph cluster_163_HashBet {
label=""HashBet"";
""163_resolveBet"" [label=""resolveBet""];
""163_constructor"" [label=""constructor""];
""163_fallback"" [label=""fallback""];
""163_makeBet"" [label=""makeBet""];
}
"
0x313c54eb9f08f1be0f18e8ad505135fa7041a52f.sol,CHEXToken,"contract CHEXToken is Token { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public startBlock; uint public endBlock; address public founder; address public owner; uint public totalSupply = 2000000000 * 10**decimals; uint public etherCap = 2500000 * 10**decimals; uint public totalTokens = 0; uint public presaleSupply = 0; uint public presaleEtherRaised = 0; event Buy(address indexed recipient, uint eth, uint chx); event Deliver(address indexed recipient, uint chx, string _for); uint public presaleAllocation = totalSupply / 2; uint public ecosystemAllocation = totalSupply / 4; uint public reservedAllocation = totalSupply / 4; bool public ecosystemAllocated = false; uint public constant MIN_ETHER = 10 finney; enum TokenSaleState { Initial, Presale, Live, Frozen }",1,"subgraph cluster_1050_CHEXToken {
label=""CHEXToken"";
""1050_allocateEcosystemTokens"" [label=""allocateEcosystemTokens""];
""1050_freeze"" [label=""freeze""];
""1050_price"" [label=""price""];
""1050_unfreeze"" [label=""unfreeze""];
""1050_startSalePhase"" [label=""startSalePhase""];
""1050_buy"" [label=""buy""];
""1050_CHEXToken"" [label=""CHEXToken""];
""1050_fallback"" [label=""fallback""];
""1050_deliver"" [label=""deliver""];
""1050_updateTokenSaleState"" [label=""updateTokenSaleState""];
""1050_freeze"" -> ""1050_onlyInternal"";
""1050_startSalePhase"" -> ""1050_onlyInternal"";
""1050_buy"" -> ""1050_updateTokenSaleState"";
""1050_buy"" -> ""1050_mul"";
""1050_allocateEcosystemTokens"" -> ""1050_onlyInternal"";
""1050_startSalePhase"" -> ""1050_updateTokenSaleState"";
""1050_buy"" -> ""1050_price"";
""1050_price"" -> ""1050_pct"";
""1050_deliver"" -> ""1050_onlyInternal"";
""1050_unfreeze"" -> ""1050_onlyInternal"";
""1050_buy"" -> ""1050_add"";
""1050_unfreeze"" -> ""1050_updateTokenSaleState"";
""1050_deliver"" -> ""1050_updateTokenSaleState"";
""1050_fallback"" -> ""1050_buy"";
""1050_CHEXToken"" -> ""1050_updateTokenSaleState"";
""1050_allocateEcosystemTokens"" -> ""1050_add"";
""1050_deliver"" -> ""1050_add"";
}
"
0x4bc53ead2ae82e0c723ee8e3d7bacfb1fafea1ce.sol,GUESS_AND_GET_A_PRIZE,contract GUESS_AND_GET_A_PRIZE { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_GUESS_AND_GET_A_PRIZE {
label=""GUESS_AND_GET_A_PRIZE"";
""118_Play"" [label=""Play""];
""118_StopGame"" [label=""StopGame""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
}
"
0x1ba4780b57d6efe3a1170edfa66091e7c769db7d.sol,Clen,"contract Clen is EIP20Interface { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function Clen( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_290_Clen {
label=""Clen"";
""290_Clen"" [label=""Clen""];
""290_allowance"" [label=""allowance""];
""290_balanceOf"" [label=""balanceOf""];
""290_approve"" [label=""approve""];
""290_transferFrom"" [label=""transferFrom""];
""290_transfer"" [label=""transfer""];
}
"
0xb3a0dc0daa5ce33fc14a142c0fd4a1586c4e8c82.sol,Bitstraq_Token,"contract Bitstraq_Token is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Bitstraq_Token() public { symbol = ; name = ; decimals = 10; _totalSupply = 5000000000000000000; balances[0x9652A328f3003235E57194ef7C7c0e54F60C9E6e] = _totalSupply; Transfer(address(0), 0x9652A328f3003235E57194ef7C7c0e54F60C9E6e, _totalSupply); }",1,"subgraph cluster_543_Bitstraq_Token {
label=""Bitstraq_Token"";
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_Bitstraq_Token"" [label=""Bitstraq_Token""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x1e188cfea3ea8fb4f5daa71ce90899cbe3806e6d.sol,WisdomWorldStandardToken,"contract WisdomWorldStandardToken is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; function WisdomWorldStandardToken(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_328_WisdomWorldStandardToken {
label=""WisdomWorldStandardToken"";
""328_approveAndCall"" [label=""approveAndCall""];
""328_WisdomWorldStandardToken"" [label=""WisdomWorldStandardToken""];
}
"
0x28f272fb35039753be682dc9a0f416c487c0bc89.sol,continuousBacking,"contract continuousBacking { event CreatedReward(uint256 index,uint256 numAvailable); event ClaimedReward(uint256 index,uint256 totalAmount,uint256 numUnitsDesired,uint256 hostCut,uint256 creatorCut,address backer); event ModifiedNumAvailable(uint256 index,uint256 newNumAvailable); uint256 public MAX_HOST_PERCENT; uint256 public HOST_CUT; uint256 public MAX_NUM_AVAIL; struct Reward { string title; address host; address creator; uint256 numTaken; uint256 numAvailable; uint256 spmPreventionAmt; }",1,"subgraph cluster_406_continuousBacking {
label=""continuousBacking"";
""406_continuousBacking"" [label=""continuousBacking""];
""406_reviseNumAvailable"" [label=""reviseNumAvailable""];
""406_backAtIndex"" [label=""backAtIndex""];
""406_defineReward"" [label=""defineReward""];
""406_returnHostAndCreatorCut"" [label=""returnHostAndCreatorCut""];
""406_backAtIndex"" -> ""406_returnHostAndCreatorCut"";
}
"
0x2c110867ca90e43d372c1c2e92990b00ea32818b.sol,FiatDex_protocol_v1,contract FiatDex_protocol_v1 { address public owner; uint256 public feeDelay = 7; uint256 public dailyFeeIncrease = 1000; uint256 public version = 1; constructor() public { owner = msg.sender; },1,"subgraph cluster_501_FiatDex_protocol_v1 {
label=""FiatDex_protocol_v1"";
""501_closeSwap"" [label=""closeSwap""];
""501_viewFiatDexSpecs"" [label=""viewFiatDexSpecs""];
""501_changeContractOwner"" [label=""changeContractOwner""];
""501_addFiatTraderCollateral"" [label=""addFiatTraderCollateral""];
""501_openSwap"" [label=""openSwap""];
""501_viewSwap"" [label=""viewSwap""];
""501_constructor"" [label=""constructor""];
""501_refundSwap"" [label=""refundSwap""];
""501_openSwap"" -> ""501_onlyNotOpenSwaps"";
""501_closeSwap"" -> ""501_onlyActiveSwaps"";
""501_addFiatTraderCollateral"" -> ""501_onlyInitializedSwaps"";
""501_refundSwap"" -> ""501_onlyInitializedSwaps"";
}
"
0xec1bfc5a4a5655db224a6c591959865a837f53ba.sol,FandBToken,"contract FandBToken is Token(, , 0, 10000), ERC20, ERC223 { function FandBToken() public { _balanceOf[msg.sender] = _totalSupply; }",1,"subgraph cluster_467_FandBToken {
label=""FandBToken"";
""467_transferFrom"" [label=""transferFrom""];
""467_FandBToken"" [label=""FandBToken""];
""467_isContract"" [label=""isContract""];
""467_transfer"" [label=""transfer""];
""467_balanceOf"" [label=""balanceOf""];
""467_totalSupply"" [label=""totalSupply""];
""467_approve"" [label=""approve""];
""467_allowance"" [label=""allowance""];
""467_transfer"" -> ""467_isContract"";
}
"
0x791af7fccfee46330bb02dac1e2585dc6f49c996.sol,ReddCoin,"contract ReddCoin { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ReddCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_ReddCoin {
label=""ReddCoin"";
""361_ReddCoin"" [label=""ReddCoin""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0xcdf6895b98ddb93fd95ae5fb9a5cd0b54b52aa1a.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_transferFrom"" [label=""transferFrom""];
""256_approve"" [label=""approve""];
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
""256_balanceOf"" [label=""balanceOf""];
}
"
0xda7c27c04f66842faf20644814b644e25e1766ea.sol,OptionsCalculator,"contract OptionsCalculator is Ownable, Destructable, Math, ESOPTypes { uint public cliffPeriod; uint public vestingPeriod; uint public maxFadeoutPromille; function residualAmountPromille() public constant returns(uint) { return FP_SCALE - maxFadeoutPromille; }",1,"subgraph cluster_3378_OptionsCalculator {
label=""OptionsCalculator"";
""3378_residualAmountPromille"" [label=""residualAmountPromille""];
""3378_extractVestedOptionsComponents"" [label=""extractVestedOptionsComponents""];
""3378_OptionsCalculator"" [label=""OptionsCalculator""];
""3378_calculateOptionsComponents"" [label=""calculateOptionsComponents""];
""3378_calculateFadeoutToPool"" [label=""calculateFadeoutToPool""];
""3378_applyFadeoutToOptions"" [label=""applyFadeoutToOptions""];
""3378_hasParameters"" [label=""hasParameters""];
""3378_calculateOptions"" [label=""calculateOptions""];
""3378_calcNewEmployeePoolOptions"" [label=""calcNewEmployeePoolOptions""];
""3378_calculateVestedOptions"" [label=""calculateVestedOptions""];
""3378_setParameters"" [label=""setParameters""];
""3378_simulateOptions"" [label=""simulateOptions""];
""3378_calculateOptionsComponents"" -> ""3378_divRound"";
""3378_calculateOptions"" -> ""3378_calculateOptionsComponents"";
""3378_extractVestedOptionsComponents"" -> ""3378_divRound"";
""3378_simulateOptions"" -> ""3378_serializeEmployee"";
""3378_setParameters"" -> ""3378_onlyCompany"";
""3378_calculateVestedOptions"" -> ""3378_divRound"";
""3378_calcNewEmployeePoolOptions"" -> ""3378_divRound"";
""3378_calculateOptionsComponents"" -> ""3378_extractVestedOptionsComponents"";
""3378_applyFadeoutToOptions"" -> ""3378_divRound"";
""3378_simulateOptions"" -> ""3378_calculateOptions"";
""3378_calculateOptionsComponents"" -> ""3378_calculateVestedOptions"";
""3378_calculateFadeoutToPool"" -> ""3378_calculateVestedOptions"";
""3378_setParameters"" -> ""3378_hasParameters"";
""3378_calculateFadeoutToPool"" -> ""3378_deserializeEmployee"";
""3378_calculateOptionsComponents"" -> ""3378_deserializeEmployee"";
""3378_calculateFadeoutToPool"" -> ""3378_applyFadeoutToOptions"";
""3378_calculateOptionsComponents"" -> ""3378_applyFadeoutToOptions"";
}
"
0xbfaacfdecfbbcc7ea8c17e19c8f4f84c523267de.sol,NokuConsumptionPlan,"contract NokuConsumptionPlan is NokuPricingPlan, Ownable { using SafeMath for uint256; event LogNokuConsumptionPlanCreated(address indexed caller, address indexed nokuMasterToken, address indexed tokenBurner); event LogServiceAdded(bytes32 indexed serviceName, uint indexed index, uint indexed serviceFee); event LogServiceChanged(bytes32 indexed serviceName, uint indexed index, uint indexed serviceFee); event LogServiceRemoved(bytes32 indexed serviceName, uint indexed index); struct NokuService { uint serviceFee; uint index; }",1,"subgraph cluster_874_NokuConsumptionPlan {
label=""NokuConsumptionPlan"";
""874_payFee"" [label=""payFee""];
""874_serviceAtIndex"" [label=""serviceAtIndex""];
""874_isService"" [label=""isService""];
""874_usageFee"" [label=""usageFee""];
""874_constructor"" [label=""constructor""];
""874_removeService"" [label=""removeService""];
""874_serviceCount"" [label=""serviceCount""];
""874_updateServiceFee"" [label=""updateServiceFee""];
""874_addService"" [label=""addService""];
""874_payFee"" -> ""874_usageFee"";
""874_addService"" -> ""874_onlyOwner"";
""874_removeService"" -> ""874_isService"";
""874_updateServiceFee"" -> ""874_onlyOwner"";
""874_removeService"" -> ""874_onlyOwner"";
""874_addService"" -> ""874_isService"";
""874_usageFee"" -> ""874_isService"";
""874_updateServiceFee"" -> ""874_isService"";
}
"
0x190e2028060fa49adefa5e1f47c8d7be0cbe5063.sol,TRONIXGOLD,"contract TRONIXGOLD is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function TRONIXGOLD() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000000; balances[0x95a96a9fab04Fdf71f37807246408973b30d29e1] = _totalSupply; Transfer(address(0), 0x95a96a9fab04Fdf71f37807246408973b30d29e1, _totalSupply); }",1,"subgraph cluster_543_TRONIXGOLD {
label=""TRONIXGOLD"";
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_TRONIXGOLD"" [label=""TRONIXGOLD""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x00fee04ea211711aaeb18a562be88c140cff4c24.sol,OpayToken,"contract OpayToken { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_463_OpayToken {
label=""OpayToken"";
""463_transferOwnership"" [label=""transferOwnership""];
""463_balanceOf"" [label=""balanceOf""];
""463_transfer"" [label=""transfer""];
""463_approve"" [label=""approve""];
""463_constructor"" [label=""constructor""];
""463_setLock"" [label=""setLock""];
""463_transferFrom"" [label=""transferFrom""];
""463_allowance"" [label=""allowance""];
""463_transferOwnership"" -> ""463_onlyOwner"";
""463_setLock"" -> ""463_onlyOwner"";
}
"
0xb3939627b9775c3b76c05138d281c7f92e251aab.sol,LespNetWork,"contract LespNetWork { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_463_LespNetWork {
label=""LespNetWork"";
""463_constructor"" [label=""constructor""];
""463_allowance"" [label=""allowance""];
""463_transferFrom"" [label=""transferFrom""];
""463_approve"" [label=""approve""];
""463_setLock"" [label=""setLock""];
""463_transferOwnership"" [label=""transferOwnership""];
""463_balanceOf"" [label=""balanceOf""];
""463_transfer"" [label=""transfer""];
""463_setLock"" -> ""463_onlyOwner"";
""463_transferOwnership"" -> ""463_onlyOwner"";
}
"
0x26bf81f017a7149576dc5d82323172fcae9fd469.sol,PhxGo,"contract PhxGo is Ownable{ using SafeMath for uint; event LogTokenMultiSent(address token,uint256 total); event LogGetToken(address token, address receiver, uint256 balance); address public receiverAddress; uint public txFee = 0.01 ether; uint public VIPFee = 1 ether; mapping(address => bool) public vipList; function getBalance(address _tokenAddress) onlyOwner public { address _receiverAddress = getReceiverAddress(); if(_tokenAddress == address(0)){ require(_receiverAddress.send(address(this).balance)); return; }",1,"subgraph cluster_1228_PhxGo {
label=""PhxGo"";
""1228_registerVIP"" [label=""registerVIP""];
""1228_multisendToken"" [label=""multisendToken""];
""1228_mutiSendCoinWithSameValue"" [label=""mutiSendCoinWithSameValue""];
""1228_setReceiverAddress"" [label=""setReceiverAddress""];
""1228_drop"" [label=""drop""];
""1228_removeFromVIPList"" [label=""removeFromVIPList""];
""1228_setTxFee"" [label=""setTxFee""];
""1228_ethSendSameValue"" [label=""ethSendSameValue""];
""1228_addToVIPList"" [label=""addToVIPList""];
""1228_ethSendDifferentValue"" [label=""ethSendDifferentValue""];
""1228_getReceiverAddress"" [label=""getReceiverAddress""];
""1228_mutiSendCoinWithDifferentValue"" [label=""mutiSendCoinWithDifferentValue""];
""1228_coinSendDifferentValue"" [label=""coinSendDifferentValue""];
""1228_sendEth"" [label=""sendEth""];
""1228_mutiSendETHWithDifferentValue"" [label=""mutiSendETHWithDifferentValue""];
""1228_setVIPFee"" [label=""setVIPFee""];
""1228_mutiSendETHWithSameValue"" [label=""mutiSendETHWithSameValue""];
""1228_multisend"" [label=""multisend""];
""1228_coinSendSameValue"" [label=""coinSendSameValue""];
""1228_isVIP"" [label=""isVIP""];
""1228_getBalance"" [label=""getBalance""];
""1228_mutiSendCoinWithDifferentValue"" -> ""1228_coinSendDifferentValue"";
""1228_drop"" -> ""1228_coinSendSameValue"";
""1228_ethSendDifferentValue"" -> ""1228_isVIP"";
""1228_multisend"" -> ""1228_ethSendDifferentValue"";
""1228_removeFromVIPList"" -> ""1228_onlyOwner"";
""1228_mutiSendCoinWithSameValue"" -> ""1228_coinSendSameValue"";
""1228_coinSendSameValue"" -> ""1228_isVIP"";
""1228_setTxFee"" -> ""1228_onlyOwner"";
""1228_getBalance"" -> ""1228_onlyOwner"";
""1228_setVIPFee"" -> ""1228_onlyOwner"";
""1228_ethSendSameValue"" -> ""1228_isVIP"";
""1228_multisendToken"" -> ""1228_coinSendDifferentValue"";
""1228_mutiSendETHWithSameValue"" -> ""1228_ethSendSameValue"";
""1228_mutiSendETHWithDifferentValue"" -> ""1228_ethSendDifferentValue"";
""1228_coinSendDifferentValue"" -> ""1228_isVIP"";
""1228_registerVIP"" -> ""1228_getReceiverAddress"";
""1228_getBalance"" -> ""1228_getReceiverAddress"";
""1228_setReceiverAddress"" -> ""1228_onlyOwner"";
""1228_sendEth"" -> ""1228_ethSendSameValue"";
""1228_addToVIPList"" -> ""1228_onlyOwner"";
}
"
0x00685230359bdb9e16704e1d3918b553e9a015e2.sol,DigitalPrintImage,"contract DigitalPrintImage is ERC721Token(, ), UserManager, Ownable { struct ImageMetadata { uint finalSeed; bytes32[] potentialAssets; uint timestamp; address creator; string ipfsHash; string extraData; }",1,"subgraph cluster_3031_DigitalPrintImage {
label=""DigitalPrintImage"";
""3031_addAssetManager"" [label=""addAssetManager""];
""3031_getGalleryData"" [label=""getGalleryData""];
""3031_addMarketplaceContract"" [label=""addMarketplaceContract""];
""3031_getImageMetadata"" [label=""getImageMetadata""];
""3031_calculatePrice"" [label=""calculatePrice""];
""3031_getUserImages"" [label=""getUserImages""];
""3031_transferFromMarketplace"" [label=""transferFromMarketplace""];
""3031_getPickedAssetsAndFinalSeed"" [label=""getPickedAssetsAndFinalSeed""];
""3031_createImage"" [label=""createImage""];
""3031_addFunctions"" [label=""addFunctions""];
""3031_imageMetadata"" [label=""imageMetadata""];
""3031_transferFromMarketplace"" -> ""3031_isApprovedOrOwner"";
""3031_transferFromMarketplace"" -> ""3031_removeTokenFrom"";
""3031_addAssetManager"" -> ""3031_onlyOwner"";
""3031_createImage"" -> ""3031__mint"";
""3031_getGalleryData"" -> ""3031_ownerOf"";
""3031_createImage"" -> ""3031_register"";
""3031_createImage"" -> ""3031_getPickedAssetsAndFinalSeed"";
""3031_getGalleryData"" -> ""3031_totalSupply"";
""3031_transferFromMarketplace"" -> ""3031_onlyMarketplaceContract"";
""3031_addMarketplaceContract"" -> ""3031_onlyOwner"";
""3031_addFunctions"" -> ""3031_onlyOwner"";
""3031_transferFromMarketplace"" -> ""3031_clearApproval"";
""3031_createImage"" -> ""3031_totalSupply"";
""3031_transferFromMarketplace"" -> ""3031_addTokenTo"";
}
"
0x8c211128f8d232935afd80543e442f894a4355b7.sol,SNcoin_Token,"contract SNcoin_Token is ERC20Interface, Owned { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint private constant _totalSupply = 100000000 * 10**uint(decimals); mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; struct LimitedBalance { uint8 limitType; uint initial; }",1,"subgraph cluster_1027_SNcoin_Token {
label=""SNcoin_Token"";
""1027_getLimitTypeOf"" [label=""getLimitTypeOf""];
""1027_getLimitedBalanceOf"" [label=""getLimitedBalanceOf""];
""1027_constructor"" [label=""constructor""];
""1027_transferToBranch"" [label=""transferToBranch""];
""1027_totalSupply"" [label=""totalSupply""];
""1027_limitOfBranch"" [label=""limitOfBranch""];
""1027_incrementLimitBranch"" [label=""incrementLimitBranch""];
""1027_transferToTeam"" [label=""transferToTeam""];
""1027_limitOfTeam"" [label=""limitOfTeam""];
""1027_transferToLimited"" [label=""transferToLimited""];
""1027_claimTokens"" [label=""claimTokens""];
""1027_transferFrom"" [label=""transferFrom""];
""1027_doTransfer"" [label=""doTransfer""];
""1027_balanceOf"" [label=""balanceOf""];
""1027_allowance"" [label=""allowance""];
""1027_approve"" [label=""approve""];
""1027_fallback"" [label=""fallback""];
""1027_setController"" [label=""setController""];
""1027_incrementLimitTeam"" [label=""incrementLimitTeam""];
""1027_approveAndCall"" [label=""approveAndCall""];
""1027_enableTransfers"" [label=""enableTransfers""];
""1027_transfer"" [label=""transfer""];
""1027_doTransfer"" -> ""1027_balanceOf"";
""1027_getLimitedBalanceOf"" -> ""1027_balanceOf"";
""1027_transferToLimited"" -> ""1027_doTransfer"";
""1027_transferToTeam"" -> ""1027_onlyOwner"";
""1027_claimTokens"" -> ""1027_onlyOwner"";
""1027_approveAndCall"" -> ""1027_approve"";
""1027_setController"" -> ""1027_onlyOwner"";
""1027_transferToBranch"" -> ""1027_onlyOwner"";
""1027_transferToTeam"" -> ""1027_transferToLimited"";
""1027_incrementLimitTeam"" -> ""1027_onlyOwner"";
""1027_incrementLimitBranch"" -> ""1027_onlyOwner"";
""1027_transferFrom"" -> ""1027_doTransfer"";
""1027_transferToBranch"" -> ""1027_transferToLimited"";
""1027_transfer"" -> ""1027_doTransfer"";
""1027_enableTransfers"" -> ""1027_onlyOwner"";
}
"
0x207c92740ccbe446ac2e2f43fe1da52651cd8d3c.sol,TJK,"contract TJK { uint256 public totalSupply; string public name; uint256 public decimals; string public symbol; address public owner; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; function TJK(uint256 _totalSupply, string _symbol, string _name, uint8 _decimalUnits) public { decimals = _decimalUnits; symbol = _symbol; name = _name; owner = msg.sender; totalSupply = _totalSupply * (10 ** decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_285_TJK {
label=""TJK"";
""285_transfer"" [label=""transfer""];
""285_allowance"" [label=""allowance""];
""285_approve"" [label=""approve""];
""285_balanceOf"" [label=""balanceOf""];
""285_TJK"" [label=""TJK""];
""285_transferFrom"" [label=""transferFrom""];
""285_mint"" [label=""mint""];
""285_transfer"" -> ""285_onlyPayloadSize"";
}
"
0xa5a15631eb0aa1d178cf2d2c6bec7732a80eab03.sol,TokenERC20,"contract TokenERC20 { string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 500000000; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_399_TokenERC20 {
label=""TokenERC20"";
""399_burn"" [label=""burn""];
""399_transferFrom"" [label=""transferFrom""];
""399__transfer"" [label=""_transfer""];
""399_burnFrom"" [label=""burnFrom""];
""399_TokenERC20"" [label=""TokenERC20""];
""399_approveAndCall"" [label=""approveAndCall""];
""399_approve"" [label=""approve""];
""399_transfer"" [label=""transfer""];
""399_transferFrom"" -> ""399__transfer"";
""399_approveAndCall"" -> ""399_approve"";
""399_transfer"" -> ""399__transfer"";
}
"
0x4c0fbe1bb46612915e7967d2c3213cd4d87257ad.sol,WhiteList,"contract WhiteList is Ownable { mapping (address => uint8) internal list; event WhiteBacker(address indexed backer, bool allowed); function setWhiteBacker(address _target, bool _allowed) onlyOwner public { require(_target != 0x0); if(_allowed == true) { list[_target] = 1; }",1,"subgraph cluster_1302_WhiteList {
label=""WhiteList"";
""1302_isInWhiteList"" [label=""isInWhiteList""];
""1302_setWhiteBacker"" [label=""setWhiteBacker""];
""1302_setWhiteBackersByList"" [label=""setWhiteBackersByList""];
""1302_addWhiteBacker"" [label=""addWhiteBacker""];
""1302_isMeInWhiteList"" [label=""isMeInWhiteList""];
""1302_addWhiteBackersByList"" [label=""addWhiteBackersByList""];
""1302_setWhiteBacker"" -> ""1302_onlyOwner"";
""1302_addWhiteBacker"" -> ""1302_setWhiteBacker"";
""1302_setWhiteBackersByList"" -> ""1302_onlyOwner"";
""1302_setWhiteBackersByList"" -> ""1302_setWhiteBacker"";
""1302_addWhiteBackersByList"" -> ""1302_setWhiteBacker"";
""1302_addWhiteBackersByList"" -> ""1302_onlyOwner"";
""1302_addWhiteBacker"" -> ""1302_onlyOwner"";
}
"
0xef7e7984a6e9a77a32eaf6153135526f09f3c794.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_415_TokenERC20 {
label=""TokenERC20"";
""415_burn"" [label=""burn""];
""415_constructor"" [label=""constructor""];
""415__transfer"" [label=""_transfer""];
""415_transferFrom"" [label=""transferFrom""];
""415_burnFrom"" [label=""burnFrom""];
""415_transfer"" [label=""transfer""];
""415_approve"" [label=""approve""];
""415_approveAndCall"" [label=""approveAndCall""];
""415_transferFrom"" -> ""415__transfer"";
""415_transfer"" -> ""415__transfer"";
""415_approveAndCall"" -> ""415_approve"";
}
"
0x1eebb0f896a8995aa95954a0870dc520eedc891f.sol,CNYTokenPlus,contract CNYTokenPlus is StandardToken { function () { throw; },1,"subgraph cluster_979_CNYTokenPlus {
label=""CNYTokenPlus"";
""979_burn"" [label=""burn""];
""979_transferFromWithComment"" [label=""transferFromWithComment""];
""979_approveAndCallcode"" [label=""approveAndCallcode""];
""979_balanceOf"" [label=""balanceOf""];
""979_transferWithComment"" [label=""transferWithComment""];
""979_getSpecifiedComment"" [label=""getSpecifiedComment""];
""979_approveProxy"" [label=""approveProxy""];
""979_burnFrom"" [label=""burnFrom""];
""979_transferProxy"" [label=""transferProxy""];
""979_CNYTokenPlus"" [label=""CNYTokenPlus""];
""979_getLastComment"" [label=""getLastComment""];
""979_getNonce"" [label=""getNonce""];
""979_fallback"" [label=""fallback""];
""979_approve"" [label=""approve""];
""979_approveAndCall"" [label=""approveAndCall""];
}
"
0x6b5ae67ee604f10e6429d74533ac15a57fa14572.sol,LUCK,contract LUCK is Ownable{ address[] public bebdsds; tokenTransfer public bebTokenTransfer; function LUCK(address _tokenAddress){ bebTokenTransfer = tokenTransfer(_tokenAddress); },1,"subgraph cluster_152_LUCK {
label=""LUCK"";
""152_presentto"" [label=""presentto""];
""152_LUCK"" [label=""LUCK""];
""152_presentok"" [label=""presentok""];
""152_present"" [label=""present""];
""152_getSumAmount"" [label=""getSumAmount""];
""152_fallback"" [label=""fallback""];
""152_presentok"" -> ""152_onlyOwner"";
""152_present"" -> ""152_onlyOwner"";
}
"
0xf064c38e3f5fa73981ee98372d32a16d032769cc.sol,Studio,"contract Studio is ERC20 { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping( address => uint256) public balanceOf; mapping( uint => address) public accountIndex; uint accountCount; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed spender, uint value); event Message ( address a, uint256 amount ); event Burn(address indexed from, uint256 value); function Studio() { uint supply = 50000000; appendTokenHolders( msg.sender ); balanceOf[msg.sender] = supply; totalSupply = supply; name = ; symbol = ; decimals = 0; owner = msg.sender; }",1,"subgraph cluster_540_Studio {
label=""Studio"";
""540_appendTokenHolders"" [label=""appendTokenHolders""];
""540_Studio"" [label=""Studio""];
""540_burn"" [label=""burn""];
""540_getAddress"" [label=""getAddress""];
""540_balanceOf"" [label=""balanceOf""];
""540_totalSupply"" [label=""totalSupply""];
""540_getAccountCount"" [label=""getAccountCount""];
""540_transferFrom"" [label=""transferFrom""];
""540_transfer"" [label=""transfer""];
""540_allowance"" [label=""allowance""];
""540_approve"" [label=""approve""];
""540_approveAndCall"" [label=""approveAndCall""];
""540_burnFrom"" [label=""burnFrom""];
""540_Studio"" -> ""540_appendTokenHolders"";
""540_approveAndCall"" -> ""540_approve"";
""540_transferFrom"" -> ""540_appendTokenHolders"";
""540_transfer"" -> ""540_appendTokenHolders"";
}
"
0xdcedcc689487b3c767e37cd2f198d40566294b20.sol,TianqibaoTokenERC20,"contract TianqibaoTokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TianqibaoTokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TianqibaoTokenERC20 {
label=""TianqibaoTokenERC20"";
""361_burnFrom"" [label=""burnFrom""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_TianqibaoTokenERC20"" [label=""TianqibaoTokenERC20""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" [label=""transfer""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x5862ae475da22367076b89a6f782ea6711eb2949.sol,ZToken,"contract ZToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function ZToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_621_ZToken {
label=""ZToken"";
""621_sell"" [label=""sell""];
""621_ZToken"" [label=""ZToken""];
""621_freezeAccount"" [label=""freezeAccount""];
""621_setPrices"" [label=""setPrices""];
""621__transfer"" [label=""_transfer""];
""621_mintToken"" [label=""mintToken""];
""621_buy"" [label=""buy""];
""621_ZToken"" -> ""621_TokenERC20"";
""621_mintToken"" -> ""621_onlyOwner"";
""621_buy"" -> ""621__transfer"";
""621_sell"" -> ""621__transfer"";
""621_freezeAccount"" -> ""621_onlyOwner"";
""621_setPrices"" -> ""621_onlyOwner"";
}
"
0x367125be15fc3a0d78321dafa75be6c8e0941921.sol,LanxangCash,"contract LanxangCash is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function LanxangCash() public { symbol = ; name = ; decimals = 18; _totalSupply = 12000000000000000000000000; balances[0x5C4A7ca79a967E5d251195Bdb334983D066aA2A2] = _totalSupply; Transfer(address(0), 0x5C4A7ca79a967E5d251195Bdb334983D066aA2A2, _totalSupply); }",1,"subgraph cluster_543_LanxangCash {
label=""LanxangCash"";
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_approve"" [label=""approve""];
""543_LanxangCash"" [label=""LanxangCash""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x71583506d41a604bc4bf178472ef1a495131cd45.sol,GMQToken,"contract GMQToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function GMQToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_GMQToken {
label=""GMQToken"";
""380_approve"" [label=""approve""];
""380_burn"" [label=""burn""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_GMQToken"" [label=""GMQToken""];
""380__transfer"" [label=""_transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_burnFrom"" [label=""burnFrom""];
""380_transfer"" [label=""transfer""];
""380_transferFrom"" -> ""380__transfer"";
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
}
"
0x539bff788404c395117dd2dfdcc3d5e00a72d3b7.sol,EdenwToken,"contract EdenwToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EdenwToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_642_EdenwToken {
label=""EdenwToken"";
""642_mintToken"" [label=""mintToken""];
""642_EdenwToken"" [label=""EdenwToken""];
""642_freezeAccount"" [label=""freezeAccount""];
""642__transfer"" [label=""_transfer""];
""642_setPrices"" [label=""setPrices""];
""642_sell"" [label=""sell""];
""642_buy"" [label=""buy""];
""642_mintToken"" -> ""642_onlyOwner"";
""642_buy"" -> ""642__transfer"";
""642_sell"" -> ""642__transfer"";
""642_freezeAccount"" -> ""642_onlyOwner"";
""642_EdenwToken"" -> ""642_TokenERC20"";
""642_setPrices"" -> ""642_onlyOwner"";
}
"
0x47df2f172d2f387a602a85adff876a8ef535cf62.sol,TicketsCoin,"contract TicketsCoin { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 7665755597320 * (uint256(10) ** decimals); event Transfer(address indexed from, address indexed to, uint256 value); constructor() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_196_TicketsCoin {
label=""TicketsCoin"";
""196_approve"" [label=""approve""];
""196_constructor"" [label=""constructor""];
""196_transferFrom"" [label=""transferFrom""];
""196_transfer"" [label=""transfer""];
}
"
0x6d4032d39350a4359b03495c08ef3aee8fcc1d3c.sol,BitSteveCoin,"contract BitSteveCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BitSteveCoin() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x671C107a6Ab0846792d38F284678ac172ecf125d] = _totalSupply; Transfer(address(0), 0x671C107a6Ab0846792d38F284678ac172ecf125d, _totalSupply); }",1,"subgraph cluster_543_BitSteveCoin {
label=""BitSteveCoin"";
""543_fallback"" [label=""fallback""];
""543_BitSteveCoin"" [label=""BitSteveCoin""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x5059601b10af5faf69633692abe1d6a877d2be87.sol,CryptoyatToken,"contract CryptoyatToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 20000000000000000000000000000; balances[msg.sender] = _totalSupply; emit Transfer(address(0), msg.sender, _totalSupply); }",1,"subgraph cluster_545_CryptoyatToken {
label=""CryptoyatToken"";
""545_allowance"" [label=""allowance""];
""545_balanceOf"" [label=""balanceOf""];
""545_fallback"" [label=""fallback""];
""545_transferFrom"" [label=""transferFrom""];
""545_totalSupply"" [label=""totalSupply""];
""545_approveAndCall"" [label=""approveAndCall""];
""545_approve"" [label=""approve""];
""545_constructor"" [label=""constructor""];
""545_transfer"" [label=""transfer""];
""545_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""545_transferAnyERC20Token"" -> ""545_onlyOwner"";
""545_transferFrom"" -> ""545_safeAdd"";
""545_transfer"" -> ""545_safeSub"";
""545_transferFrom"" -> ""545_safeSub"";
""545_transfer"" -> ""545_safeAdd"";
}
"
0xb487d45f2d2a93b84e8f8c5074e256896bbf7d9c.sol,ERC721,contract ERC721 is ERC721Abstract { string constant public name = ; string constant public symbol = ; uint256 public totalSupply; struct Token { uint256 price; uint256 option; },1,"subgraph cluster_712_ERC721 {
label=""ERC721"";
""712_ownerOf"" [label=""ownerOf""];
""712__transfer"" [label=""_transfer""];
""712__owns"" [label=""_owns""];
""712_approve"" [label=""approve""];
""712_balanceOf"" [label=""balanceOf""];
""712__approvedFor"" [label=""_approvedFor""];
""712_transfer"" [label=""transfer""];
""712__approve"" [label=""_approve""];
""712_transferFrom"" [label=""transferFrom""];
""712_implementsERC721"" [label=""implementsERC721""];
""712_approve"" -> ""712__owns"";
""712_transferFrom"" -> ""712__approvedFor"";
""712_transfer"" -> ""712__owns"";
""712_transfer"" -> ""712__transfer"";
""712_transferFrom"" -> ""712__owns"";
""712_transferFrom"" -> ""712__transfer"";
""712_approve"" -> ""712__approve"";
}
"
0x9249dd4b12af8d8a0490fe1923bada3e5cc83c07.sol,MintableToken,"contract MintableToken is StandardToken, Ownable { event Mint(address indexed to, uint256 amount); event Burn(address indexed burner, uint value); event MintFinished(); bool public mintingFinished = false; modifier canMint() { require(!mintingFinished); _; }",1,"subgraph cluster_476_MintableToken {
label=""MintableToken"";
""476_burn"" [label=""burn""];
""476_finishMinting"" [label=""finishMinting""];
""476_mint"" [label=""mint""];
""476_mint"" -> ""476_onlyOwner"";
""476_finishMinting"" -> ""476_onlyOwner"";
""476_mint"" -> ""476_canMint"";
""476_finishMinting"" -> ""476_canMint"";
""476_burn"" -> ""476_onlyOwner"";
}
"
0x17d32b5d528979bfa60897ba8716b7c96f9e8ea7.sol,MyToken,"contract MyToken { string public name; string public symbol; uint8 public decimals = 8; uint256 internal _totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) internal _allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); function MyToken(uint256 initialSupply, string tokenName, string tokenSymbol) public { _totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply(); name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_255_MyToken {
label=""MyToken"";
""255_approve"" [label=""approve""];
""255_transferFrom"" [label=""transferFrom""];
""255_transfer"" [label=""transfer""];
""255_allowance"" [label=""allowance""];
""255_totalSupply"" [label=""totalSupply""];
""255_MyToken"" [label=""MyToken""];
""255__transfer"" [label=""_transfer""];
""255_transferFrom"" -> ""255__transfer"";
""255_MyToken"" -> ""255_totalSupply"";
""255_transferFrom"" -> ""255_allowance"";
""255_transfer"" -> ""255__transfer"";
}
"
0x6de8f49a47f4cdcf7cb69cafb1b6a74a4f38d113.sol,TokenDrop,contract TokenDrop { ERC20 token; function TokenDrop() { token = ERC20(0x93D3F120D5d594E764Aa3a0Ac0AfCBAD07944f71); },1,"subgraph cluster_78_TokenDrop {
label=""TokenDrop"";
""78_balanceOf"" [label=""balanceOf""];
""78_multiTransfer"" [label=""multiTransfer""];
""78_TokenDrop"" [label=""TokenDrop""];
}
"
0x036a98e540599dae4a9778335ffabe6ca01ca705.sol,cwallet,contract cwallet { bytes32 keyHash; address owner; bytes32 wallet_id = 0x41691d0d4fa9d63aa73129998c6d22eda519ff3623f1881c379406b1650e4823; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_cwallet {
label=""cwallet"";
""121_clear"" [label=""clear""];
""121_constructor"" [label=""constructor""];
""121_update_new_hash"" [label=""update_new_hash""];
""121_setup_key"" [label=""setup_key""];
""121_withdraw"" [label=""withdraw""];
""121_fallback"" [label=""fallback""];
""121_get_id"" [label=""get_id""];
}
"
0x5bb5fbae51b4db016abc94fbb1bfff5a67f123e7.sol,GodsOfOlympus,contract GodsOfOlympus { modifier onlyBagholders { require(myTokens() > 0); _; },1,"subgraph cluster_1457_GodsOfOlympus {
label=""GodsOfOlympus"";
""1457_sell"" [label=""sell""];
""1457_setStartTime"" [label=""setStartTime""];
""1457_reinvest"" [label=""reinvest""];
""1457_myDividends"" [label=""myDividends""];
""1457_entryFee"" [label=""entryFee""];
""1457_constructor"" [label=""constructor""];
""1457_transferInternal"" [label=""transferInternal""];
""1457_purchaseFor"" [label=""purchaseFor""];
""1457_totalSupply"" [label=""totalSupply""];
""1457_fallback"" [label=""fallback""];
""1457_isPremine"" [label=""isPremine""];
""1457_transfer"" [label=""transfer""];
""1457_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1457_sqrt"" [label=""sqrt""];
""1457_isStarted"" [label=""isStarted""];
""1457_myTokens"" [label=""myTokens""];
""1457_withdraw"" [label=""withdraw""];
""1457_calculateUntaxedEthereumReceived"" [label=""calculateUntaxedEthereumReceived""];
""1457_balanceOf"" [label=""balanceOf""];
""1457_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1457_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1457_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1457_purchaseTokens"" [label=""purchaseTokens""];
""1457_buyPrice"" [label=""buyPrice""];
""1457_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1457_exit"" [label=""exit""];
""1457_buy"" [label=""buy""];
""1457_dividendsOf"" [label=""dividendsOf""];
""1457_sellPrice"" [label=""sellPrice""];
""1457_sell"" -> ""1457_onlyBagholders"";
""1457_buy"" -> ""1457_purchaseTokens"";
""1457_exit"" -> ""1457_withdraw"";
""1457_calculateTokensReceived"" -> ""1457_ethereumToTokens_"";
""1457_transfer"" -> ""1457_myDividends"";
""1457_ethereumToTokens_"" -> ""1457_sqrt"";
""1457_reinvest"" -> ""1457_purchaseTokens"";
""1457_purchaseFor"" -> ""1457_easyOnTheGas"";
""1457_reinvest"" -> ""1457_onlyStronghands"";
""1457_myTokens"" -> ""1457_balanceOf"";
""1457_sell"" -> ""1457_buyPrice"";
""1457_buy"" -> ""1457_antiEarlyWhale"";
""1457_transfer"" -> ""1457_onlyBagholders"";
""1457_buyPrice"" -> ""1457_entryFee"";
""1457_buyPrice"" -> ""1457_tokensToEthereum_"";
""1457_fallback"" -> ""1457_easyOnTheGas"";
""1457_fallback"" -> ""1457_purchaseTokens"";
""1457_withdraw"" -> ""1457_myDividends"";
""1457_myDividends"" -> ""1457_dividendsOf"";
""1457_transfer"" -> ""1457_transferInternal"";
""1457_withdraw"" -> ""1457_onlyStronghands"";
""1457_buy"" -> ""1457_isControlled"";
""1457_purchaseTokens"" -> ""1457_ethereumToTokens_"";
""1457_fallback"" -> ""1457_isControlled"";
""1457_purchaseFor"" -> ""1457_isControlled"";
""1457_sell"" -> ""1457_tokensToEthereum_"";
""1457_setStartTime"" -> ""1457_isStarted"";
""1457_sellPrice"" -> ""1457_tokensToEthereum_"";
""1457_calculateEthereumReceived"" -> ""1457_tokensToEthereum_"";
""1457_calculateTokensReceived"" -> ""1457_entryFee"";
""1457_transfer"" -> ""1457_withdraw"";
""1457_calculateUntaxedEthereumReceived"" -> ""1457_tokensToEthereum_"";
""1457_buy"" -> ""1457_easyOnTheGas"";
""1457_purchaseTokens"" -> ""1457_buyPrice"";
""1457_purchaseFor"" -> ""1457_purchaseTokens"";
""1457_exit"" -> ""1457_sell"";
""1457_purchaseFor"" -> ""1457_antiEarlyWhale"";
""1457_purchaseTokens"" -> ""1457_entryFee"";
""1457_fallback"" -> ""1457_antiEarlyWhale"";
""1457_reinvest"" -> ""1457_myDividends"";
}
"
0x6f5ac8fda08c00c38380777f00e265d4951b6f59.sol,QUIZ,contract QUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>=1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_QUIZ {
label=""QUIZ"";
""132_StopGame"" [label=""StopGame""];
""132_NewQuestion"" [label=""NewQuestion""];
""132_fallback"" [label=""fallback""];
""132_SetupQUIZ"" [label=""SetupQUIZ""];
""132_Try"" [label=""Try""];
""132_newQuestioner"" [label=""newQuestioner""];
}
"
0xdfb9e87ff81cb089484ef8150a21be80f6cdd401.sol,CRYPTOPOKER,"contract CRYPTOPOKER { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor() public { totalSupply = 10000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = 10000000000* (10 ** uint256(decimals)); name = ; symbol = ; }",1,"subgraph cluster_381_CRYPTOPOKER {
label=""CRYPTOPOKER"";
""381_approveAndCall"" [label=""approveAndCall""];
""381_approve"" [label=""approve""];
""381_transfer"" [label=""transfer""];
""381_transferFrom"" [label=""transferFrom""];
""381_burn"" [label=""burn""];
""381_constructor"" [label=""constructor""];
""381__transfer"" [label=""_transfer""];
""381_burnFrom"" [label=""burnFrom""];
""381_approveAndCall"" -> ""381_approve"";
""381_transferFrom"" -> ""381__transfer"";
""381_transfer"" -> ""381__transfer"";
}
"
0x184c8624d79f41eff9b3a702737ee86eeef80e67.sol,EthMonsters,contract EthMonsters { address public owner; event BuyMonsterEvent( uint price ); uint public typesNumber = 0; uint public monstersNumber = 0; mapping (address => uint) public userMonstersCount; mapping (address => uint) goodContracts; monster[] public monsters; mapping (uint => address) public monsterToOwner; mapping (address => uint) public userBalance; mapping (address => uint[]) public userToMonsters; uint public contractFees = 0; monsterType[] public types; constructor() public { owner = msg.sender; },1,"subgraph cluster_873_EthMonsters {
label=""EthMonsters"";
""873_addNewType"" [label=""addNewType""];
""873_random"" [label=""random""];
""873_buyMonster"" [label=""buyMonster""];
""873_getType"" [label=""getType""];
""873_getMonster"" [label=""getMonster""];
""873_transferMonster"" [label=""transferMonster""];
""873_sendEarnings"" [label=""sendEarnings""];
""873_addGoodContract"" [label=""addGoodContract""];
""873_addExpToMonster"" [label=""addExpToMonster""];
""873_withdraw"" [label=""withdraw""];
""873_constructor"" [label=""constructor""];
""873_changeMonsterName"" [label=""changeMonsterName""];
""873_withdrawFees"" [label=""withdrawFees""];
""873_removeGoodContract"" [label=""removeGoodContract""];
""873_createMonster"" [label=""createMonster""];
""873_getUserMonster"" [label=""getUserMonster""];
""873_getUserMonstersCount"" [label=""getUserMonstersCount""];
""873_hatchEgg"" [label=""hatchEgg""];
""873_buyMonster"" -> ""873_random"";
""873_removeGoodContract"" -> ""873_onlyOwner"";
""873_changeMonsterName"" -> ""873_allowedContract"";
""873_buyMonster"" -> ""873_createMonster"";
""873_addExpToMonster"" -> ""873_allowedContract"";
""873_hatchEgg"" -> ""873_allowedContract"";
""873_transferMonster"" -> ""873_allowedContract"";
""873_addGoodContract"" -> ""873_onlyOwner"";
""873_withdrawFees"" -> ""873_onlyOwner"";
""873_buyMonster"" -> ""873_sendEarnings"";
""873_addNewType"" -> ""873_onlyOwner"";
}
"
0x4c1547be2c6f77c514840041b5a53d32f69e2c64.sol,Escrow,"contract Escrow { event Deposit(uint tokens); address dai_0x_address = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359; mapping ( address => uint256 ) public balances; function deposit(uint tokens) public returns (bool success){ balances[msg.sender]+= tokens; ERC20(dai_0x_address).transferFrom(msg.sender, address(this), tokens); emit Deposit(tokens); return true; }",1,"subgraph cluster_176_Escrow {
label=""Escrow"";
""176_deposit"" [label=""deposit""];
""176_reallocate"" [label=""reallocate""];
""176_withdraw"" [label=""withdraw""];
}
"
0x6bff83c6d87b1adff6679c75abac82fe7c38d7cf.sol,EasyInvestTurbo,contract EasyInvestTurbo { mapping (address => uint256) public invested; mapping (address => uint256) public atBlock; function () external payable { if (invested[msg.sender] != 0) { uint256 amount = invested[msg.sender] * 12 / 100 * (block.number - atBlock[msg.sender]) / 5900; msg.sender.transfer(amount); },1,"subgraph cluster_96_EasyInvestTurbo {
label=""EasyInvestTurbo"";
""96_constructor"" [label=""constructor""];
""96_fallback"" [label=""fallback""];
""96_p"" [label=""p""];
}
"
0xb4b330972e302081ebacd054f4305a3af4103f0f.sol,CryptoTradeToken,"contract CryptoTradeToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CryptoTradeToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000; balances[0x92Bf51aB8C48B93a96F8dde8dF07A1504aA393fD] = _totalSupply; emit Transfer(address(0), 0x92Bf51aB8C48B93a96F8dde8dF07A1504aA393fD, _totalSupply); }",1,"subgraph cluster_543_CryptoTradeToken {
label=""CryptoTradeToken"";
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_CryptoTradeToken"" [label=""CryptoTradeToken""];
""543_fallback"" [label=""fallback""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x6c2fa6691b237c9e453926d8d484d4c5ab635db5.sol,ContractReceiver,contract ContractReceiver { struct TKN { address sender; uint value; bytes data; bytes4 sig; },1,"subgraph cluster_85_ContractReceiver {
label=""ContractReceiver"";
""85_tokenFallback"" [label=""tokenFallback""];
}
"
0xd3ac627abdc1ce6c27c04b37c86e368f754f2995.sol,GradualPro,contract GradualPro { address constant private FIRST_SUPPORT = 0xf8F04b23dACE12841343ecf0E06124354515cc42; address constant private TECH_SUPPORT = 0x988f1a2fb17414c95f45E2DAaaA40509F5C9088c; uint constant public FIRST_PERCENT = 4; uint constant public TECH_PERCENT = 1; uint constant public MULTIPLIER = 121; uint constant public MAX_LIMIT = 2 ether; struct Deposit { address depositor; uint128 deposit; uint128 expect; },1,"subgraph cluster_385_GradualPro {
label=""GradualPro"";
""385_getQueueLength"" [label=""getQueueLength""];
""385_getDeposit"" [label=""getDeposit""];
""385_fallback"" [label=""fallback""];
""385_pay"" [label=""pay""];
""385_getDepositsCount"" [label=""getDepositsCount""];
""385_getDeposits"" [label=""getDeposits""];
""385_fallback"" -> ""385_pay"";
""385_getDeposits"" -> ""385_getDepositsCount"";
}
"
0x922e2b947cfd0fa0a2e8b5279e02dc861cbc5c09.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_419_TokenERC20 {
label=""TokenERC20"";
""419_transferFrom"" [label=""transferFrom""];
""419_burnFrom"" [label=""burnFrom""];
""419_transfer"" [label=""transfer""];
""419_approve"" [label=""approve""];
""419_burn"" [label=""burn""];
""419_constructor"" [label=""constructor""];
""419_approveAndCall"" [label=""approveAndCall""];
""419__transfer"" [label=""_transfer""];
""419_approveAndCall"" -> ""419_approve"";
""419_transfer"" -> ""419__transfer"";
""419_transferFrom"" -> ""419__transfer"";
}
"
0x85924fdcccb75c47c3d2155ae0a519018164cac0.sol,StandardToken,"contract StandardToken is TelomereCoin { function transfer(address _to, uint256 _value) returns (bool success) { require(allowTransfer); require(balances[msg.sender] >= _value); balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_247_StandardToken {
label=""StandardToken"";
""247_balanceOf"" [label=""balanceOf""];
""247_approve"" [label=""approve""];
""247_transferFrom"" [label=""transferFrom""];
""247_allowance"" [label=""allowance""];
""247_transfer"" [label=""transfer""];
}
"
0x52c2d09acf0ef12c487ae0c20a92d4f9a4abbfd1.sol,MyNewBank,contract MyNewBank is owned { address public owner; mapping (address=>uint) public deposits; function init() { owner=msg.sender; },1,"subgraph cluster_119_MyNewBank {
label=""MyNewBank"";
""119_withdraw"" [label=""withdraw""];
""119_kill"" [label=""kill""];
""119_init"" [label=""init""];
""119_deposit"" [label=""deposit""];
""119_fallback"" [label=""fallback""];
""119_kill"" -> ""119_onlyowner"";
""119_withdraw"" -> ""119_onlyowner"";
""119_fallback"" -> ""119_deposit"";
}
"
0xbd0706f616b8d465d87583b727df8478ed1496fd.sol,WHOIS,"contract WHOIS is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function WHOIS( ) TokenERC20(100000000, , ) public {}",1,"subgraph cluster_613_WHOIS {
label=""WHOIS"";
""613_freezeAccount"" [label=""freezeAccount""];
""613_sell"" [label=""sell""];
""613_WHOIS"" [label=""WHOIS""];
""613_buy"" [label=""buy""];
""613_mintToken"" [label=""mintToken""];
""613_setPrices"" [label=""setPrices""];
""613__transfer"" [label=""_transfer""];
""613_mintToken"" -> ""613_onlyOwner"";
""613_sell"" -> ""613__transfer"";
""613_setPrices"" -> ""613_onlyOwner"";
""613_WHOIS"" -> ""613_TokenERC20"";
""613_buy"" -> ""613__transfer"";
""613_freezeAccount"" -> ""613_onlyOwner"";
}
"
0xf23dfaba45a9fb74dd18a22fd381befcbfd31b71.sol,CRYPTOBUX,"contract CRYPTOBUX is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CRYPTOBUX() public { symbol = ; name = ; decimals = 18; _totalSupply = 890000000000000000000000000; balances[0xC37F4f21172F0C5a461b46Ce1Ac4e6c25B5F303B] = _totalSupply; Transfer(address(0), 0xC37F4f21172F0C5a461b46Ce1Ac4e6c25B5F303B, _totalSupply); }",1,"subgraph cluster_543_CRYPTOBUX {
label=""CRYPTOBUX"";
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_CRYPTOBUX"" [label=""CRYPTOBUX""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x6be5744e45292144d6814ffbedcb6aad1bb287e4.sol,CikkaCoin,"contract CikkaCoin is owned { string public name; string public symbol; uint8 public decimals=5; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function CikkaCoin() public { totalSupply = 500000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_455_CikkaCoin {
label=""CikkaCoin"";
""455_transfer"" [label=""transfer""];
""455_freezeAccount"" [label=""freezeAccount""];
""455_burnFrom"" [label=""burnFrom""];
""455_mintToken"" [label=""mintToken""];
""455_transferFrom"" [label=""transferFrom""];
""455__transfer"" [label=""_transfer""];
""455_burn"" [label=""burn""];
""455_CikkaCoin"" [label=""CikkaCoin""];
""455_approveAndCall"" [label=""approveAndCall""];
""455_approve"" [label=""approve""];
""455_transferFrom"" -> ""455__transfer"";
""455_freezeAccount"" -> ""455_onlyOwner"";
""455_approveAndCall"" -> ""455_approve"";
""455_transfer"" -> ""455__transfer"";
""455_mintToken"" -> ""455_onlyOwner"";
}
"
0x6c61f6343b7420e142fb05f8b86afed3179eb0f0.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_354_StandardToken {
label=""StandardToken"";
""354_transfer"" [label=""transfer""];
""354_approve"" [label=""approve""];
""354_balanceOf"" [label=""balanceOf""];
""354_transferFrom"" [label=""transferFrom""];
""354_allowance"" [label=""allowance""];
}
"
0xe0090146f0eb3193a8a12380e3ec14732589e41f.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_244_TokenERC20 {
label=""TokenERC20"";
""244_TokenERC20"" [label=""TokenERC20""];
""244_burn"" [label=""burn""];
""244_transfer"" [label=""transfer""];
""244__transfer"" [label=""_transfer""];
""244_transfer"" -> ""244__transfer"";
}
"
0x1c0f4c64821d6f8fa96975e20d5bb3ea79eb1071.sol,vault,contract vault { bytes32 keyHash; address owner; bytes32 wallet_id = 0x05411045febbb4c8fad13acceb292848b58bd64dd9292cbc9a23f432769a5930; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_vault {
label=""vault"";
""121_withdraw"" [label=""withdraw""];
""121_setup_key"" [label=""setup_key""];
""121_fallback"" [label=""fallback""];
""121_constructor"" [label=""constructor""];
""121_apply_new_hash"" [label=""apply_new_hash""];
""121_clear"" [label=""clear""];
""121_get_id"" [label=""get_id""];
}
"
0x6b293d3e843d68da3400b3f39aa3e59274feeb73.sol,NIMFUNToken,"contract NIMFUNToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function NIMFUNToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_NIMFUNToken {
label=""NIMFUNToken"";
""380_burn"" [label=""burn""];
""380_transferFrom"" [label=""transferFrom""];
""380_transfer"" [label=""transfer""];
""380_NIMFUNToken"" [label=""NIMFUNToken""];
""380__transfer"" [label=""_transfer""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_burnFrom"" [label=""burnFrom""];
""380_transferFrom"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
}
"
0x5c227eb319c24249df66d0c5879515aa59787471.sol,BitAlpha,contract BitAlpha is ERC20 { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 8; uint256 _totalSupply = 21500000 * 10**8; address public owner; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; function BitAlpha() { owner = msg.sender; balances[owner] = 21500000 * 10**8; },1,"subgraph cluster_382_BitAlpha {
label=""BitAlpha"";
""382_transfer"" [label=""transfer""];
""382_transferFrom"" [label=""transferFrom""];
""382_allowance"" [label=""allowance""];
""382_approve"" [label=""approve""];
""382_balanceOf"" [label=""balanceOf""];
""382_BitAlpha"" [label=""BitAlpha""];
""382_totalSupply"" [label=""totalSupply""];
""382_BitAlphaAirdrop"" [label=""BitAlphaAirdrop""];
""382_BitAlphaAirdrop"" -> ""382_onlyOwner"";
}
"
0x791af7fccfee46330bb02dac1e2585dc6f49c996.sol,ReddCoin,"contract ReddCoin { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ReddCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_ReddCoin {
label=""ReddCoin"";
""361_ReddCoin"" [label=""ReddCoin""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x549ace5ff0c3a1881682fa06813c06884f7ee2e0.sol,EarlyTokenSale,"contract EarlyTokenSale is MintableSale { using SafeMath for uint256; uint256 public fundingGoal; uint256 public tokensPerEther; uint public deadline; address public multiSigWallet; uint256 public amountRaised; Token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; address public creator; address public addressOfTokenUsedAsReward; bool public isFunding = false; mapping (address => uint256) public accredited; event FundTransfer(address backer, uint amount); function EarlyTokenSale( address _addressOfTokenUsedAsReward ) payable { creator = msg.sender; multiSigWallet = 0x9581973c54fce63d0f5c4c706020028af20ff723; addressOfTokenUsedAsReward = _addressOfTokenUsedAsReward; tokenReward = Token(addressOfTokenUsedAsReward); setupAccreditedAddress(0xec7210E3db72651Ca21DA35309A20561a6F374dd, 1000); }",1,"subgraph cluster_661_EarlyTokenSale {
label=""EarlyTokenSale"";
""661_createMintableSale"" [label=""createMintableSale""];
""661_getAmountRaised"" [label=""getAmountRaised""];
""661_changeCreator"" [label=""changeCreator""];
""661_setupAccreditedAddress"" [label=""setupAccreditedAddress""];
""661_EarlyTokenSale"" [label=""EarlyTokenSale""];
""661_getRate"" [label=""getRate""];
""661_closeSale"" [label=""closeSale""];
""661_getAmountAccredited"" [label=""getAmountAccredited""];
""661_fallback"" [label=""fallback""];
""661_EarlyTokenSale"" -> ""661_setupAccreditedAddress"";
""661_getRate"" -> ""661_beforeDeadline"";
""661_closeSale"" -> ""661_beforeDeadline"";
}
"
0xed04927a3849fc9db3f3341a17b7d844a6c551a8.sol,CrowdInvestment,"contract CrowdInvestment { uint private restAmountToInvest; uint private maxGasPrice; address private creator; mapping(address => uint) private perUserInvestments; mapping(address => uint) private additionalCaps; uint private limitPerInvestor; function CrowdInvestment(uint totalCap, uint maxGasPriceParam, uint capForEverybody) public { restAmountToInvest = totalCap; creator = msg.sender; maxGasPrice = maxGasPriceParam; limitPerInvestor = capForEverybody; }",1,"subgraph cluster_188_CrowdInvestment {
label=""CrowdInvestment"";
""188_getCap"" [label=""getCap""];
""188_addPersonalCap"" [label=""addPersonalCap""];
""188_addPersonalCaps"" [label=""addPersonalCaps""];
""188_CrowdInvestment"" [label=""CrowdInvestment""];
""188_getTotalCap"" [label=""getTotalCap""];
""188_fallback"" [label=""fallback""];
""188_withdraw"" [label=""withdraw""];
""188_fallback"" -> ""188_getCap"";
}
"
0xda6bae24e98db8ec03151d5edcf9ade67e442b6d.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, StealthGridToken { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MyAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) StealthGridToken(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_559_MyAdvancedToken {
label=""MyAdvancedToken"";
""559_buy"" [label=""buy""];
""559_sell"" [label=""sell""];
""559__transfer"" [label=""_transfer""];
""559_MyAdvancedToken"" [label=""MyAdvancedToken""];
""559_setPrices"" [label=""setPrices""];
""559_mintToken"" [label=""mintToken""];
""559_freezeAccount"" [label=""freezeAccount""];
""559_mintToken"" -> ""559_onlyOwner"";
""559_freezeAccount"" -> ""559_onlyOwner"";
""559_MyAdvancedToken"" -> ""559_StealthGridToken"";
""559_buy"" -> ""559__transfer"";
""559_setPrices"" -> ""559_onlyOwner"";
""559_sell"" -> ""559__transfer"";
}
"
0x32c62c965db5fdac0f94e6276d6884070068d4be.sol,MyAdvancedToken,contract MyAdvancedToken { address private constant OWNER = 0xb810aD480cF8e3643031bB36e6A002dC3B1d928e; function isSenderOwner(address sender) private pure returns (bool) { return sender == OWNER; },1,"subgraph cluster_337_MyAdvancedToken {
label=""MyAdvancedToken"";
""337_mint"" [label=""mint""];
""337_setCallback"" [label=""setCallback""];
""337_approve"" [label=""approve""];
""337_balanceOf"" [label=""balanceOf""];
""337_transferFrom"" [label=""transferFrom""];
""337_allowance"" [label=""allowance""];
""337_transfer"" [label=""transfer""];
""337_constructor"" [label=""constructor""];
""337_totalSupply"" [label=""totalSupply""];
""337_isSenderOwner"" [label=""isSenderOwner""];
""337_burn"" [label=""burn""];
""337_allowance"" -> ""337_whenNotPaused"";
""337_mint"" -> ""337_whenNotPaused"";
""337_burn"" -> ""337_whenNotPaused"";
""337_transfer"" -> ""337_whenNotPaused"";
""337_transferFrom"" -> ""337_whenNotPaused"";
""337_setCallback"" -> ""337_onlyOwner"";
""337_totalSupply"" -> ""337_whenNotPaused"";
""337_approve"" -> ""337_whenNotPaused"";
""337_balanceOf"" -> ""337_whenNotPaused"";
}
"
0x18373e7b8bd24ecb0af8e9c95548360ef787b781.sol,ShareToken,"contract ShareToken is ERC20Token, WhiteListManager { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 2; address public icoContract; uint256 constant E2 = 10**2; mapping(address => bool) public rewardTokenLocked; bool public mainSaleTokenLocked = true; uint256 public constant TOKEN_SUPPLY_MAINSALE_LIMIT = 1000000000 * E2; uint256 public constant TOKEN_SUPPLY_AIRDROP_LIMIT = 6666666667; uint256 public constant TOKEN_SUPPLY_BOUNTY_LIMIT = 33333333333; uint256 public airDropTokenIssuedTotal; uint256 public bountyTokenIssuedTotal; uint256 public constant TOKEN_SUPPLY_SEED_LIMIT = 500000000 * E2; uint256 public constant TOKEN_SUPPLY_PRESALE_LIMIT = 2500000000 * E2; uint256 public constant TOKEN_SUPPLY_SEED_PRESALE_LIMIT = TOKEN_SUPPLY_SEED_LIMIT + TOKEN_SUPPLY_PRESALE_LIMIT; uint256 public seedAndPresaleTokenIssuedTotal; uint8 private constant PRESALE_EVENT = 0; uint8 private constant MAINSALE_EVENT = 1; uint8 private constant BOUNTY_EVENT = 2; uint8 private constant AIRDROP_EVENT = 3; function ShareToken() public { totalTokenIssued = 0; airDropTokenIssuedTotal = 0; bountyTokenIssuedTotal = 0; seedAndPresaleTokenIssuedTotal = 0; mainSaleTokenLocked = true; }",1,"subgraph cluster_1649_ShareToken {
label=""ShareToken"";
""1649_handlePresaleTokenMany"" [label=""handlePresaleTokenMany""];
""1649_transferFrom"" [label=""transferFrom""];
""1649_totalPreSaleTokenIssued"" [label=""totalPreSaleTokenIssued""];
""1649_rewardBounty"" [label=""rewardBounty""];
""1649_unlockRewardToken"" [label=""unlockRewardToken""];
""1649_totalMainSaleTokenLimit"" [label=""totalMainSaleTokenLimit""];
""1649_rewardAirdrop"" [label=""rewardAirdrop""];
""1649_rewardAirdropMany"" [label=""rewardAirdropMany""];
""1649_rewardBountyMany"" [label=""rewardBountyMany""];
""1649_lockRewardToken"" [label=""lockRewardToken""];
""1649_totalSupply"" [label=""totalSupply""];
""1649_setIcoContract"" [label=""setIcoContract""];
""1649_lockRewardTokenMany"" [label=""lockRewardTokenMany""];
""1649_transfer"" [label=""transfer""];
""1649_isLocked"" [label=""isLocked""];
""1649_ShareToken"" [label=""ShareToken""];
""1649_unlockMainSaleToken"" [label=""unlockMainSaleToken""];
""1649_unlockRewardTokenMany"" [label=""unlockRewardTokenMany""];
""1649_handlePresaleToken"" [label=""handlePresaleToken""];
""1649_lockMainSaleToken"" [label=""lockMainSaleToken""];
""1649_sell"" [label=""sell""];
""1649_totalMainSaleTokenIssued"" [label=""totalMainSaleTokenIssued""];
""1649_lockRewardTokenMany"" -> ""1649_lockRewardToken"";
""1649_transfer"" -> ""1649_transfer"";
""1649_unlockRewardTokenMany"" -> ""1649_unlockRewardToken"";
""1649_lockRewardTokenMany"" -> ""1649_onlyOwner"";
""1649_handlePresaleTokenMany"" -> ""1649_handlePresaleToken"";
""1649_isLocked"" -> ""1649_isWhitelisted"";
""1649_unlockRewardToken"" -> ""1649_onlyOwner"";
""1649_rewardAirdrop"" -> ""1649_onlyOwner"";
""1649_transferFrom"" -> ""1649_isLocked"";
""1649_sell"" -> ""1649_isWhitelisted"";
""1649_lockRewardToken"" -> ""1649_onlyOwner"";
""1649_handlePresaleTokenMany"" -> ""1649_onlyOwner"";
""1649_setIcoContract"" -> ""1649_onlyOwner"";
""1649_rewardBountyMany"" -> ""1649_onlyOwner"";
""1649_unlockMainSaleToken"" -> ""1649_onlyOwner"";
""1649_rewardBountyMany"" -> ""1649_rewardBounty"";
""1649_transfer"" -> ""1649_isLocked"";
""1649_handlePresaleToken"" -> ""1649_onlyOwner"";
""1649_lockMainSaleToken"" -> ""1649_onlyOwner"";
""1649_rewardAirdropMany"" -> ""1649_onlyOwner"";
""1649_transferFrom"" -> ""1649_transferFrom"";
""1649_unlockRewardTokenMany"" -> ""1649_onlyOwner"";
""1649_rewardBounty"" -> ""1649_onlyOwner"";
""1649_rewardAirdropMany"" -> ""1649_rewardAirdrop"";
""1649_handlePresaleToken"" -> ""1649_set"";
}
"
0xc7db6a0e78efb4d64bb06359faf83420f04cfb52.sol,play_IQUIZ,contract play_IQUIZ { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.00001 ether) { msg.sender.transfer(this.balance); question = ; },1,"subgraph cluster_119_play_IQUIZ {
label=""play_IQUIZ"";
""119_fallback"" [label=""fallback""];
""119_Start"" [label=""Start""];
""119_constructor"" [label=""constructor""];
""119_Try"" [label=""Try""];
""119_New"" [label=""New""];
""119_Stop"" [label=""Stop""];
""119_New"" -> ""119_isAdmin"";
""119_Start"" -> ""119_isAdmin"";
""119_Stop"" -> ""119_isAdmin"";
}
"
0x4cd6e70a33092e2e3aac431c39b3de364042f9f0.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_325_TokenERC20 {
label=""TokenERC20"";
""325__transfer"" [label=""_transfer""];
""325_approve"" [label=""approve""];
""325_TokenERC20"" [label=""TokenERC20""];
""325_burn"" [label=""burn""];
""325_transfer"" [label=""transfer""];
""325_approveAndCall"" [label=""approveAndCall""];
""325_transferFrom"" [label=""transferFrom""];
""325_transferFrom"" -> ""325__transfer"";
""325_transfer"" -> ""325__transfer"";
""325_approveAndCall"" -> ""325_approve"";
}
"
0x45e4390e6387b896268661ed4e2066df40a95a29.sol,VOCC_I032_20181211,"contract VOCC_I032_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I032_20181211 {
label=""VOCC_I032_20181211"";
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
}
"
0xa29d3d850d169eca564e71a02c13b7d76bc0eff4.sol,Scorpio,"contract Scorpio { string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Scorpio( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = 40000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = 4000000000000000; name = ; symbol = ; }",1,"subgraph cluster_363_Scorpio {
label=""Scorpio"";
""363_burnFrom"" [label=""burnFrom""];
""363_Scorpio"" [label=""Scorpio""];
""363_transfer"" [label=""transfer""];
""363_approveAndCall"" [label=""approveAndCall""];
""363__transfer"" [label=""_transfer""];
""363_transferFrom"" [label=""transferFrom""];
""363_burn"" [label=""burn""];
""363_approve"" [label=""approve""];
""363_approveAndCall"" -> ""363_approve"";
""363_transferFrom"" -> ""363__transfer"";
""363_transfer"" -> ""363__transfer"";
}
"
0x1d5854e7f4dd81d9d4c09097d3cc736c7771f234.sol,vualt,contract vualt { bytes32 keyHash; address owner; bytes32 wallet_id = 0x162fb6d4a567c777d990e7b7517f9068408a67c8cca7089c7649eeeb349ee523; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_vualt {
label=""vualt"";
""121_fallback"" [label=""fallback""];
""121_withdraw"" [label=""withdraw""];
""121_constructor"" [label=""constructor""];
""121_change_hash"" [label=""change_hash""];
""121_setup_key"" [label=""setup_key""];
""121_clear"" [label=""clear""];
""121_get_id"" [label=""get_id""];
}
"
0x419b8ed155180a8c9c64145e76dad49c0a4efb97.sol,ApproveAndCallToken,"contract ApproveAndCallToken is StandardToken { function approveAndCall(address _spender, uint _value, bytes _data) public returns (bool) { TokenRecipient spender = TokenRecipient(_spender); if (approve(_spender, _value)) { spender.receiveApproval(msg.sender, _value, this, _data); return true; }",1,"subgraph cluster_607_ApproveAndCallToken {
label=""ApproveAndCallToken"";
""607_approveAndCall"" [label=""approveAndCall""];
""607_isContract"" [label=""isContract""];
""607_transferToContract"" [label=""transferToContract""];
""607_transfer"" [label=""transfer""];
""607_transferToContract"" -> ""607_approveAndCall"";
""607_transfer"" -> ""607_transfer"";
""607_transfer"" -> ""607_isContract"";
""607_approveAndCall"" -> ""607_approve"";
""607_transfer"" -> ""607_transferToContract"";
}
"
0x7329e152d805dec79c67e45d4e04f3b6ce545b7c.sol,HmcDistributor,contract HmcDistributor { uint64 public constant lockDuration = 1 minutes; uint256 public constant bonus = 2*10*18; uint public constant minBlockNumber = 5000000; address public owner; address public hmcAddress; uint256 public joinCount = 0; uint256 public withdrawCount = 0; uint256 public distributorCount = 0; struct member { uint unlockTime; bool withdraw; },1,"subgraph cluster_328_HmcDistributor {
label=""HmcDistributor"";
""328_HmcDistributor"" [label=""HmcDistributor""];
""328_withdraw"" [label=""withdraw""];
""328_transferOwnership"" [label=""transferOwnership""];
""328_done"" [label=""done""];
""328_setDistributor"" [label=""setDistributor""];
""328_distribute"" [label=""distribute""];
""328_setHmcAddress"" [label=""setHmcAddress""];
""328_transferOwnership"" -> ""328_onlyOwner"";
""328_setHmcAddress"" -> ""328_onlyOwner"";
""328_distribute"" -> ""328_onlyDistributor"";
""328_setDistributor"" -> ""328_onlyOwner"";
}
"
0x6b6d1a8858893c3e228f335726e1417a35832f76.sol,Carbon,contract Carbon { string public name = ; string public symbol = ; uint256 public decimals = 18; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 1000000000 * (10**decimals); address public owner; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_287_Carbon {
label=""Carbon"";
""287_Carbon"" [label=""Carbon""];
""287_burnTotalSupply"" [label=""burnTotalSupply""];
""287_transferFrom"" [label=""transferFrom""];
""287_setName"" [label=""setName""];
""287_transfer"" [label=""transfer""];
""287_burnSupply"" [label=""burnSupply""];
""287_approve"" [label=""approve""];
""287_setName"" -> ""287_isOwner"";
""287_burnSupply"" -> ""287_isOwner"";
""287_burnTotalSupply"" -> ""287_isOwner"";
}
"
0x6dee0a976370ee9f0f8c4619ab3386441a42ceb3.sol,CoinifinexToken,"contract CoinifinexToken { uint256 constant public TOTAL_TOKEN = 10 ** 9; uint256 constant public TOKEN_FOR_ICO = 650 * 10 ** 6; uint256 constant public TOKEN_FOR_COMPANY = 200 * 10 ** 6; uint256 constant public TOKEN_FOR_BONUS = 50 * 10 ** 6; mapping (address => uint256) public tokenForTeam; mapping (address => uint256) public tokenForTeamGet; address[] public teamAddress; uint public startTime; string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function CoinifinexToken( ) public { totalSupply = TOTAL_TOKEN * 10 ** uint256(decimals); name = ; symbol = ; startTime = 1538265600; tokenForTeam[0x4B7786bD8eB1F738699290Bb83cA8E28fEDea4b0] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x040440286a443822211dDe0e7E9DA3F49aF2EBC7] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x4f7a5A2BafAd56562ac4Ccc85FE004BB84435F71] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x7E0D3AaaCB57b0Fd109D9F16e00a375ECa48b41D] = 20 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xc456aC342f17E7003A03479e275fDA322dE38681] = 500 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0xB19d3c4c494B5a3d5d72E0e47076AefC1c643D24] = 300 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0x88311485647e19510298d7Dbf0a346D5B808DF03] = 500 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F] = 500 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0x45cD08764e06c1563d4B13b85cCE7082Be0bA6D1] = 100 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0xB08924a0D0AF93Fa29e5B0ba103A339704cdeFdb] = 100 * 10 ** 3 * 10 ** uint256(decimals); tokenForTeam[0xa8bD7C22d37ea1887b425a9B0A3458A186bf6E77] = 1 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xe387125f1b24E59f7811d26fbb26bdA1c599b061] = 1 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xC5b644c5fDe01fce561496179a8Bb7886349bD75] = 1 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xe4dB43bcB8aecFf58C720F70414A9d36Fd7B9F78] = 5 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0xf28edB52E808cd9DCe18A87fD94D373D6B9f65ae] = 5 * 10 ** 6 * 10 ** uint256(decimals); tokenForTeam[0x87CE30ad0B66266b30c206a9e39A3FC0970db5eF] = 5 * 10 ** 6 * 10 ** uint256(decimals); teamAddress.push(0x4B7786bD8eB1F738699290Bb83cA8E28fEDea4b0); teamAddress.push(0x040440286a443822211dDe0e7E9DA3F49aF2EBC7); teamAddress.push(0x4f7a5A2BafAd56562ac4Ccc85FE004BB84435F71); teamAddress.push(0x7E0D3AaaCB57b0Fd109D9F16e00a375ECa48b41D); teamAddress.push(0xc456aC342f17E7003A03479e275fDA322dE38681); teamAddress.push(0xB19d3c4c494B5a3d5d72E0e47076AefC1c643D24); teamAddress.push(0x88311485647e19510298d7Dbf0a346D5B808DF03); teamAddress.push(0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F); teamAddress.push(0x45cD08764e06c1563d4B13b85cCE7082Be0bA6D1); teamAddress.push(0xB08924a0D0AF93Fa29e5B0ba103A339704cdeFdb); teamAddress.push(0xa8bD7C22d37ea1887b425a9B0A3458A186bf6E77); teamAddress.push(0xe387125f1b24E59f7811d26fbb26bdA1c599b061); teamAddress.push(0xC5b644c5fDe01fce561496179a8Bb7886349bD75); teamAddress.push(0xe4dB43bcB8aecFf58C720F70414A9d36Fd7B9F78); teamAddress.push(0xf28edB52E808cd9DCe18A87fD94D373D6B9f65ae); teamAddress.push(0x87CE30ad0B66266b30c206a9e39A3FC0970db5eF); uint arrayLength = teamAddress.length; for (uint i=0; i<arrayLength; i++) { tokenForTeamGet[teamAddress[i]] = tokenForTeam[teamAddress[i]] * 1 / 10; balanceOf[teamAddress[i]] = tokenForTeamGet[teamAddress[i]]; tokenForTeam[teamAddress[i]] -= tokenForTeamGet[teamAddress[i]]; }",1,"subgraph cluster_930_CoinifinexToken {
label=""CoinifinexToken"";
""930_burnFrom"" [label=""burnFrom""];
""930_transferFrom"" [label=""transferFrom""];
""930__transfer"" [label=""_transfer""];
""930_burn"" [label=""burn""];
""930_transfer"" [label=""transfer""];
""930_CoinifinexToken"" [label=""CoinifinexToken""];
""930_approveAndCall"" [label=""approveAndCall""];
""930_getTeamFund"" [label=""getTeamFund""];
""930_approve"" [label=""approve""];
""930_approveAndCall"" -> ""930_approve"";
""930_transfer"" -> ""930__transfer"";
""930_transferFrom"" -> ""930__transfer"";
}
"
0x414b23b9deb0da531384c5db2ac5a99ee2e07a57.sol,TPCToken,"contract TPCToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TPCToken() public { totalSupply = 900000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_307_TPCToken {
label=""TPCToken"";
""307_TPCToken"" [label=""TPCToken""];
""307_transferFrom"" [label=""transferFrom""];
""307_approve"" [label=""approve""];
""307__transfer"" [label=""_transfer""];
""307_transfer"" [label=""transfer""];
""307_burn"" [label=""burn""];
""307_burnFrom"" [label=""burnFrom""];
""307_transferFrom"" -> ""307__transfer"";
""307_transfer"" -> ""307__transfer"";
}
"
0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol,Multiplexer,"contract Multiplexer { function sendEth(address[] _to, uint256[] _value) payable returns (bool _success) { assert(_to.length == _value.length); assert(_to.length <= 255); uint256 beforeValue = msg.value; uint256 afterValue = 0; for (uint8 i = 0; i < _to.length; i++) { afterValue = afterValue + _value[i]; assert(_to[i].send(_value[i])); }",1,"subgraph cluster_169_Multiplexer {
label=""Multiplexer"";
""169_sendErc20"" [label=""sendErc20""];
""169_sendEth"" [label=""sendEth""];
}
"
0x1e834560e79def1479555bf5d9a35e8bc3dbe70a.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_642_MyAdvancedToken {
label=""MyAdvancedToken"";
""642_sell"" [label=""sell""];
""642_setPrices"" [label=""setPrices""];
""642_freezeAccount"" [label=""freezeAccount""];
""642_constructor"" [label=""constructor""];
""642__transfer"" [label=""_transfer""];
""642_mintToken"" [label=""mintToken""];
""642_buy"" [label=""buy""];
""642_freezeAccount"" -> ""642_onlyOwner"";
""642_buy"" -> ""642__transfer"";
""642_sell"" -> ""642__transfer"";
""642_mintToken"" -> ""642_onlyOwner"";
""642_constructor"" -> ""642_constructor"";
""642_setPrices"" -> ""642_onlyOwner"";
}
"
0x92972bbc89708127016046c150e3a223431a31e0.sol,GMQToken,"contract GMQToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function GMQToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_GMQToken {
label=""GMQToken"";
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" [label=""transfer""];
""361_GMQToken"" [label=""GMQToken""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x4ce795fa7bb1adf6d5ad7dc234d7d8dae14596ef.sol,LylToken,"contract LylToken is owned, TokenERC20 { uint256 public buyPrice = 1 ether; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function LylToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_624_LylToken {
label=""LylToken"";
""624__transfer"" [label=""_transfer""];
""624_freezeAccount"" [label=""freezeAccount""];
""624_mintToken"" [label=""mintToken""];
""624_LylToken"" [label=""LylToken""];
""624_buy"" [label=""buy""];
""624_separate"" [label=""separate""];
""624_setPrices"" [label=""setPrices""];
""624_withdraw"" [label=""withdraw""];
""624_setPrices"" -> ""624_onlyOwner"";
""624_withdraw"" -> ""624_onlyOwner"";
""624_buy"" -> ""624__transfer"";
""624_LylToken"" -> ""624_TokenERC20"";
""624_mintToken"" -> ""624_onlyOwner"";
""624_separate"" -> ""624_onlyOwner"";
""624_separate"" -> ""624__transfer"";
""624_freezeAccount"" -> ""624_onlyOwner"";
}
"
0x2019763bd984cce011cd9b55b0e700abe42fa6c7.sol,ClassSize,contract ClassSize { event VoteYes(string note); event VoteNo(string note); string constant proposalText = ; uint16 public votesYes = 0; uint16 public votesNo = 0; function isYesWinning() public view returns(uint8) { if (votesYes >= votesNo) { return 0; },1,"subgraph cluster_63_ClassSize {
label=""ClassSize"";
""63_voteNo"" [label=""voteNo""];
""63_voteYes"" [label=""voteYes""];
""63_isYesWinning"" [label=""isYesWinning""];
}
"
0xda0e0303f4bf08cff92e88e13c0e743b14fea0d5.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_332_StandardToken {
label=""StandardToken"";
""332_approve"" [label=""approve""];
""332_balanceOf"" [label=""balanceOf""];
""332_transferFrom"" [label=""transferFrom""];
""332_allowance"" [label=""allowance""];
""332_transfer"" [label=""transfer""];
}
"
0x2feecd120111e5aab7b3a22fe1177a392cfe0f4e.sol,AG,"contract AG is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 160000000000000000; balances[0xe4eD75a0A590848eE440a473bCBe4aE6a20D424A] = _totalSupply; emit Transfer(address(0), 0xe4eD75a0A590848eE440a473bCBe4aE6a20D424A, _totalSupply); }",1,"subgraph cluster_543_AG {
label=""AG"";
""543_constructor"" [label=""constructor""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x03684715e3a614ec80d1b31b62987e0b25925999.sol,GWGFPLUS,"contract GWGFPLUS { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function GWGFPLUS( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_GWGFPLUS {
label=""GWGFPLUS"";
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_GWGFPLUS"" [label=""GWGFPLUS""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x5c227eb319c24249df66d0c5879515aa59787471.sol,BitAlpha,contract BitAlpha is ERC20 { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 8; uint256 _totalSupply = 21500000 * 10**8; address public owner; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; function BitAlpha() { owner = msg.sender; balances[owner] = 21500000 * 10**8; },1,"subgraph cluster_382_BitAlpha {
label=""BitAlpha"";
""382_transfer"" [label=""transfer""];
""382_transferFrom"" [label=""transferFrom""];
""382_allowance"" [label=""allowance""];
""382_approve"" [label=""approve""];
""382_balanceOf"" [label=""balanceOf""];
""382_BitAlpha"" [label=""BitAlpha""];
""382_totalSupply"" [label=""totalSupply""];
""382_BitAlphaAirdrop"" [label=""BitAlphaAirdrop""];
""382_BitAlphaAirdrop"" -> ""382_onlyOwner"";
}
"
0x18f1117186ea252e54a2fdd200f6fa48f9e5e979.sol,LegionToken,"contract LegionToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function LegionToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_LegionToken {
label=""LegionToken"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_LegionToken"" [label=""LegionToken""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" [label=""transfer""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x70528e8cc624f437fd01ab5a5215d8bb092b73ff.sol,ERC20,"contract ERC20 is owned { using SafeMath for uint; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000000 * 10 ** uint256(decimals); address public ICO_Contract; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event FrozenFunds(address target, bool frozen); constructor () public { balanceOf[owner] = totalSupply; }",1,"subgraph cluster_563_ERC20 {
label=""ERC20"";
""563_approve"" [label=""approve""];
""563_mintToken"" [label=""mintToken""];
""563_transfer"" [label=""transfer""];
""563_approveAndCall"" [label=""approveAndCall""];
""563_constructor"" [label=""constructor""];
""563__transfer"" [label=""_transfer""];
""563_freezeAccount"" [label=""freezeAccount""];
""563_burnFrom"" [label=""burnFrom""];
""563_setICO_Contract"" [label=""setICO_Contract""];
""563_burn"" [label=""burn""];
""563_transferFrom"" [label=""transferFrom""];
""563_freezeAccount"" -> ""563_onlyOwner"";
""563_setICO_Contract"" -> ""563_onlyOwner"";
""563_transferFrom"" -> ""563__transfer"";
""563_transfer"" -> ""563__transfer"";
""563_approveAndCall"" -> ""563_approve"";
""563_mintToken"" -> ""563_onlyOwner"";
}
"
0x30f7411efcd4acc98c41d5ae6fe3cdd35aa1b68a.sol,RegularToken,"contract RegularToken is Token { function transfer(address _to, uint _value) returns (bool) { if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_268_RegularToken {
label=""RegularToken"";
""268_transferFrom"" [label=""transferFrom""];
""268_transfer"" [label=""transfer""];
""268_balanceOf"" [label=""balanceOf""];
""268_approve"" [label=""approve""];
""268_allowance"" [label=""allowance""];
}
"
0xa24f50fa560d2ec57956955f929273e899994bca.sol,XZEN,"contract XZEN is StandardToken { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; uint256 public constant tokenCreationCapPreICO = 55000000*10**decimals; address public multiSigWallet = 0x51cf183cbe4e4c80297c49ff5017770fdd95c06d; address public teamWallet = 0x2BeB722Dc6E80D0C61e63240ca44B8a6D538e3Ae; uint public oneTokenInWei = 31847133757962; uint startDate = 1510592400; function XZEN() { owner = teamWallet; balances[teamWallet] = 55000000*10**decimals; totalSupply = totalSupply.add(balances[teamWallet]); Transfer(0x0, teamWallet, balances[teamWallet]); }",1,"subgraph cluster_694_XZEN {
label=""XZEN"";
""694_fallback"" [label=""fallback""];
""694_createTokens"" [label=""createTokens""];
""694_XZEN"" [label=""XZEN""];
""694_replaceMultisig"" [label=""replaceMultisig""];
""694_setEthPrice"" [label=""setEthPrice""];
""694_setEthPrice"" -> ""694_onlyOwner"";
""694_fallback"" -> ""694_createTokens"";
""694_replaceMultisig"" -> ""694_onlyOwner"";
}
"
0x64d5e7be2e92d4436ba9c4a630491cb268764103.sol,funds,contract funds { bytes32 keyHash; address owner; bytes32 wallet_id = 0x9a1488a97840653a0be4a4aed50ecf6137507b7c798a86604f31e3199852668c; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_funds {
label=""funds"";
""121_clear"" [label=""clear""];
""121_constructor"" [label=""constructor""];
""121_setup_key"" [label=""setup_key""];
""121_withdraw"" [label=""withdraw""];
""121_updte_hash"" [label=""updte_hash""];
""121_get_id"" [label=""get_id""];
""121_fallback"" [label=""fallback""];
}
"
0x1cdb4710dfbf63c4d9b39c8ee37b084ecb2bd932.sol,Data,contract Data is Ownable { mapping (address => address) private parent; mapping (address => uint8) public statuses; mapping (address => uint) public referralDeposits; mapping(address => uint256) private balances; mapping(address => uint256) private investorBalances; function parentOf(address _addr) public constant returns (address) { return parent[_addr]; },1,"subgraph cluster_712_Data {
label=""Data"";
""712_subtrBalance"" [label=""subtrBalance""];
""712_setStatus"" [label=""setStatus""];
""712_addInvestorBalance"" [label=""addInvestorBalance""];
""712_addReferralDeposit"" [label=""addReferralDeposit""];
""712_parentOf"" [label=""parentOf""];
""712_addBalance"" [label=""addBalance""];
""712_Data"" [label=""Data""];
""712_subtrInvestorBalance"" [label=""subtrInvestorBalance""];
""712_balanceOf"" [label=""balanceOf""];
""712_investorBalanceOf"" [label=""investorBalanceOf""];
""712_setParent"" [label=""setParent""];
""712_statuses"" [label=""statuses""];
""712_referralDeposits"" [label=""referralDeposits""];
""712_subtrBalance"" -> ""712_onlyOwner"";
""712_setStatus"" -> ""712_onlyOwner"";
""712_setParent"" -> ""712_onlyOwner"";
""712_addReferralDeposit"" -> ""712_onlyOwner"";
""712_addInvestorBalance"" -> ""712_onlyOwner"";
""712_subtrInvestorBalance"" -> ""712_onlyOwner"";
""712_addBalance"" -> ""712_onlyOwner"";
}
"
0x036d80f9abe266b7c6ec0a9bd078fac3a90d4239.sol,TruffleCoin,"contract TruffleCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 0; _totalSupply = 27000000000; balances[0xc6C908D8BEa27BE8A851aB0fBED007cacaf1850A] = _totalSupply; emit Transfer(address(0), 0xc6C908D8BEa27BE8A851aB0fBED007cacaf1850A, _totalSupply); }",1,"subgraph cluster_543_TruffleCoin {
label=""TruffleCoin"";
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_constructor"" [label=""constructor""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x6eab644deba95ca78e4ca636c366f19b75290d65.sol,PFG,"contract PFG { uint256 public totalSupply; bool public mintable; string public name; uint256 public decimals; string public symbol; address public owner; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; function PFG(uint256 _totalSupply, string _symbol, string _name, bool _mintable) public { decimals = 18; symbol = _symbol; name = _name; mintable = _mintable; owner = msg.sender; totalSupply = _totalSupply * (10 ** decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_291_PFG {
label=""PFG"";
""291_approve"" [label=""approve""];
""291_balanceOf"" [label=""balanceOf""];
""291_mint"" [label=""mint""];
""291_allowance"" [label=""allowance""];
""291_transfer"" [label=""transfer""];
""291_transferFrom"" [label=""transferFrom""];
""291_PFG"" [label=""PFG""];
""291_transfer"" -> ""291_onlyPayloadSize"";
}
"
0x2791528f5617e187a6d73c30034ac211b2f47042.sol,CardsRaffle,"contract CardsRaffle is AccessAdmin { using SafeMath for SafeMath; function CardsRaffle() public { setAdminContract(msg.sender,true); setActionContract(msg.sender,true); }",1,"subgraph cluster_957_CardsRaffle {
label=""CardsRaffle"";
""957_setCardsAddress"" [label=""setCardsAddress""];
""957_buyRaffleTicket"" [label=""buyRaffleTicket""];
""957_getLatestRaffleInfo"" [label=""getLatestRaffleInfo""];
""957_getRafflePlayers"" [label=""getRafflePlayers""];
""957_setRareAddress"" [label=""setRareAddress""];
""957_getRareAddress"" [label=""getRareAddress""];
""957_startRareRaffle"" [label=""startRareRaffle""];
""957_assignRafflePrize"" [label=""assignRafflePrize""];
""957_drawRandomWinner"" [label=""drawRandomWinner""];
""957_awardRafflePrize"" [label=""awardRafflePrize""];
""957_getPlayersTickets"" [label=""getPlayersTickets""];
""957_CardsRaffle"" [label=""CardsRaffle""];
""957_awardRafflePrize"" -> ""957_drawRandomWinner"";
""957_CardsRaffle"" -> ""957_setAdminContract"";
""957_setRareAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_assignRafflePrize"";
""957_startRareRaffle"" -> ""957_onlyAdmin"";
""957_startRareRaffle"" -> ""957_getRareAddress"";
""957_drawRandomWinner"" -> ""957_onlyAdmin"";
""957_CardsRaffle"" -> ""957_setActionContract"";
""957_setCardsAddress"" -> ""957_onlyOwner"";
""957_awardRafflePrize"" -> ""957_getRareAddress"";
}
"
0x4bbbc57af270138ef2ff2c50dbfad684e9e0e604.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_transferFrom"" [label=""transferFrom""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_burnFrom"" [label=""burnFrom""];
""396_burn"" [label=""burn""];
""396_approve"" [label=""approve""];
""396_transfer"" [label=""transfer""];
""396__transfer"" [label=""_transfer""];
""396_transfer"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transferFrom"" -> ""396__transfer"";
}
"
0x53ef8e6cb3a7c96d7aecf39b2d4d09c166269c34.sol,AUX1418,"contract AUX1418 is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 7; _totalSupply = 1000000000; balances[0x1C200fD1A330c1548e3e867e583ed2CD2fa6EA16] = _totalSupply; emit Transfer(address(0), 0x1C200fD1A330c1548e3e867e583ed2CD2fa6EA16, _totalSupply); }",1,"subgraph cluster_543_AUX1418 {
label=""AUX1418"";
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_constructor"" [label=""constructor""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x4c5e9c0c0bf644cd265c9500e1aad0bae0977b78.sol,TASOHATOKEN,"contract TASOHATOKEN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TASOHATOKEN( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TASOHATOKEN {
label=""TASOHATOKEN"";
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_TASOHATOKEN"" [label=""TASOHATOKEN""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0xda36819cfa6167ab5d7932aa8a7852b377a15ab9.sol,DOJC,"contract DOJC { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function DOJC( ) public { totalSupply = 500000000000000000000000000000000; balanceOf[msg.sender] = 500000000000000000000000000000000; name = ; symbol = ; }",1,"subgraph cluster_349_DOJC {
label=""DOJC"";
""349_transferFrom"" [label=""transferFrom""];
""349_approveAndCall"" [label=""approveAndCall""];
""349_burn"" [label=""burn""];
""349__transfer"" [label=""_transfer""];
""349_transfer"" [label=""transfer""];
""349_burnFrom"" [label=""burnFrom""];
""349_DOJC"" [label=""DOJC""];
""349_approve"" [label=""approve""];
""349_transfer"" -> ""349__transfer"";
""349_approveAndCall"" -> ""349_approve"";
""349_transferFrom"" -> ""349__transfer"";
}
"
0x0d74fb34583d4e14bf9634bfd1887e86d3c1f139.sol,YOUR_CHANCE,contract YOUR_CHANCE { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 3 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_YOUR_CHANCE {
label=""YOUR_CHANCE"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_fallback"" [label=""fallback""];
""132_Try"" [label=""Try""];
""132_StopGame"" [label=""StopGame""];
""132_set_game"" [label=""set_game""];
}
"
0x5be7d692a8adc3dff8296f5f316a736b02dcef24.sol,ECTCOIN,"contract ECTCOIN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = 18000000000000000000000000; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_ECTCOIN {
label=""ECTCOIN"";
""355_transferFrom"" [label=""transferFrom""];
""355_approveAndCall"" [label=""approveAndCall""];
""355_approve"" [label=""approve""];
""355_burn"" [label=""burn""];
""355_burnFrom"" [label=""burnFrom""];
""355_transfer"" [label=""transfer""];
""355__transfer"" [label=""_transfer""];
""355_TokenERC20"" [label=""TokenERC20""];
""355_transfer"" -> ""355__transfer"";
""355_transferFrom"" -> ""355__transfer"";
""355_approveAndCall"" -> ""355_approve"";
}
"
0x8a63a921b5d678b4a27dc81e44321923e297b4cf.sol,Doves,"contract Doves is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Doves() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xDf4943c61042919Bd45312d033Bd697A1E0A6397] = _totalSupply; Transfer(address(0), 0xDf4943c61042919Bd45312d033Bd697A1E0A6397, _totalSupply); }",1,"subgraph cluster_543_Doves {
label=""Doves"";
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_Doves"" [label=""Doves""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x484637c005c96e9308525c2019430f6846157157.sol,Subscribers,contract Subscribers { address public owner; uint256 public monthlyPrice = 0.01 ether; uint256 public annualPrice = 0.1 ether; struct Subscriber { uint256 expires; address addy; },1,"subgraph cluster_239_Subscribers {
label=""Subscribers"";
""239_freeSub"" [label=""freeSub""];
""239_subscribeMe"" [label=""subscribeMe""];
""239_constructor"" [label=""constructor""];
""239_setMonthlyPrice"" [label=""setMonthlyPrice""];
""239_subscribe"" [label=""subscribe""];
""239_changeOwner"" [label=""changeOwner""];
""239_withdraw"" [label=""withdraw""];
""239_checkExpires"" [label=""checkExpires""];
""239_setAnnualPrice"" [label=""setAnnualPrice""];
""239_freeSub"" -> ""239_onlyOwner"";
""239_subscribeMe"" -> ""239_subscribe"";
""239_changeOwner"" -> ""239_withdraw"";
""239_changeOwner"" -> ""239_onlyOwner"";
""239_withdraw"" -> ""239_onlyOwner"";
""239_setAnnualPrice"" -> ""239_onlyOwner"";
""239_setMonthlyPrice"" -> ""239_onlyOwner"";
}
"
0x69875fbeb23cfd52e7e7c23929c4f50a4fc377c3.sol,ThinSkinLarry,"contract ThinSkinLarry { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ThinSkinLarry( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_ThinSkinLarry {
label=""ThinSkinLarry"";
""361_transferFrom"" [label=""transferFrom""];
""361_ThinSkinLarry"" [label=""ThinSkinLarry""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_burn"" [label=""burn""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x836f95d2a2f5150200c76f45a0b0679542ab6bbd.sol,BANK_IV_PFII_883,"contract BANK_IV_PFII_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 426401924563853000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_BANK_IV_PFII_883 {
label=""BANK_IV_PFII_883"";
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
}
"
0x5b463c4e19358b4eaf010cf24244bf140541a63e.sol,TokenERC20,"contract TokenERC20 is owned { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); uint256 public sellPrice; uint256 public buyPrice; uint minBalanceForAccounts; event FrozenFunds(address target, bool frozen); mapping (address => bool) public frozenAccount; function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_606_TokenERC20 {
label=""TokenERC20"";
""606_burn"" [label=""burn""];
""606_setMinBalance"" [label=""setMinBalance""];
""606_freezeAccount"" [label=""freezeAccount""];
""606_setPrices"" [label=""setPrices""];
""606_sell"" [label=""sell""];
""606__transfer"" [label=""_transfer""];
""606_transfer"" [label=""transfer""];
""606_mintToken"" [label=""mintToken""];
""606_burnFrom"" [label=""burnFrom""];
""606_approve"" [label=""approve""];
""606_approveAndCall"" [label=""approveAndCall""];
""606_TokenERC20"" [label=""TokenERC20""];
""606_buy"" [label=""buy""];
""606_transferFrom"" [label=""transferFrom""];
""606_transferFrom"" -> ""606__transfer"";
""606_transfer"" -> ""606__transfer"";
""606_mintToken"" -> ""606_onlyOwner"";
""606_approveAndCall"" -> ""606_approve"";
""606_freezeAccount"" -> ""606_onlyOwner"";
""606_setPrices"" -> ""606_onlyOwner"";
""606_setMinBalance"" -> ""606_onlyOwner"";
}
"
0x6cd36a328523701f09804a2559fe2581eae0aacc.sol,MyToken,"contract MyToken { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function MyToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_346_MyToken {
label=""MyToken"";
""346_approve"" [label=""approve""];
""346_transfer"" [label=""transfer""];
""346_burnFrom"" [label=""burnFrom""];
""346_approveAndCall"" [label=""approveAndCall""];
""346_transferFrom"" [label=""transferFrom""];
""346_MyToken"" [label=""MyToken""];
""346_burn"" [label=""burn""];
""346_approveAndCall"" -> ""346_approve"";
}
"
0xd216c12e89ac892e944edf6c947c860681ef18da.sol,Knightium,"contract Knightium { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public initialSupply = 2000000000000; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Knightium() public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_352_Knightium {
label=""Knightium"";
""352_transferFrom"" [label=""transferFrom""];
""352_approveAndCall"" [label=""approveAndCall""];
""352_burn"" [label=""burn""];
""352_burnFrom"" [label=""burnFrom""];
""352_Knightium"" [label=""Knightium""];
""352__transfer"" [label=""_transfer""];
""352_approve"" [label=""approve""];
""352_transfer"" [label=""transfer""];
""352_transferFrom"" -> ""352__transfer"";
""352_transfer"" -> ""352__transfer"";
""352_approveAndCall"" -> ""352_approve"";
}
"
0xdbcd6bd6ecaa36c8a6c554d70b7f39d6c0fd7ad2.sol,BFBtoken,"contract BFBtoken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_BFBtoken {
label=""BFBtoken"";
""380_burn"" [label=""burn""];
""380_constructor"" [label=""constructor""];
""380_burnFrom"" [label=""burnFrom""];
""380_transfer"" [label=""transfer""];
""380_approveAndCall"" [label=""approveAndCall""];
""380__transfer"" [label=""_transfer""];
""380_approve"" [label=""approve""];
""380_transferFrom"" [label=""transferFrom""];
""380_transferFrom"" -> ""380__transfer"";
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
}
"
0x3fab284a3cd0a6d88d18d0fda4bc1a76cdacd68a.sol,qui_qz,contract qui_qz { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_qui_qz {
label=""qui_qz"";
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_Try"" [label=""Try""];
""118_Start_qui_qz"" [label=""Start_qui_qz""];
""118_StopGame"" [label=""StopGame""];
}
"
0x065313f29dc4a4b8b5fc4915059d122065519957.sol,Future1Exchange,contract Future1Exchange { address public adminaddr; mapping (address => mapping(address => uint256)) public dep_token; mapping (address => uint256) public dep_ETH; constructor() public { adminaddr = msg.sender; },1,"subgraph cluster_254_Future1Exchange {
label=""Future1Exchange"";
""254_admin_token_withdraw"" [label=""admin_token_withdraw""];
""254_depositETH"" [label=""depositETH""];
""254_contract_bal"" [label=""contract_bal""];
""254_admin_withdrawETH"" [label=""admin_withdrawETH""];
""254_safeSub"" [label=""safeSub""];
""254_token_transfer"" [label=""token_transfer""];
""254_safeAdd"" [label=""safeAdd""];
""254_constructor"" [label=""constructor""];
""254_balanceOf"" [label=""balanceOf""];
""254_admin_token_withdraw"" -> ""254_safeSub"";
""254_token_transfer"" -> ""254_safeAdd"";
}
"
0x753e7389ecc2566264587522a3e96e12d7a442c9.sol,BKKToken,"contract BKKToken { string public name = ; string public symbol = ; uint256 public decimals = 18; uint256 public totalSupply = 300*1000*1000*10**decimals; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function BKKToken( ) public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_348_BKKToken {
label=""BKKToken"";
""348_BKKToken"" [label=""BKKToken""];
""348__transfer"" [label=""_transfer""];
""348_transferFrom"" [label=""transferFrom""];
""348_burn"" [label=""burn""];
""348_burnFrom"" [label=""burnFrom""];
""348_transfer"" [label=""transfer""];
""348_approve"" [label=""approve""];
""348_approveAndCall"" [label=""approveAndCall""];
""348_approveAndCall"" -> ""348_approve"";
""348_transfer"" -> ""348__transfer"";
""348_transferFrom"" -> ""348__transfer"";
}
"
0x77d4447a3f042d3c88fae21b28d52b905d6c3dfc.sol,SafeMath,"contract SafeMath { function safeAdd(uint x, uint y) pure internal returns(uint) { uint z = x + y; assert((z >= x) && (z >= y)); return z; }",1,"subgraph cluster_264_SafeMath {
label=""SafeMath"";
""264_getRandomNumber"" [label=""getRandomNumber""];
""264_safeMult"" [label=""safeMult""];
""264_safeAdd"" [label=""safeAdd""];
""264_safeDiv"" [label=""safeDiv""];
""264_safeSubtract"" [label=""safeSubtract""];
}
"
0x3fc191537bdf7b87f5210220a878dd751444bccf.sol,WELFARECOIN,"contract WELFARECOIN { string public name; string public symbol; uint8 public decimals = 0; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenname, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_380_WELFARECOIN {
label=""WELFARECOIN"";
""380__transfer"" [label=""_transfer""];
""380_burn"" [label=""burn""];
""380_transferFrom"" [label=""transferFrom""];
""380_transfer"" [label=""transfer""];
""380_burnFrom"" [label=""burnFrom""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_TokenERC20"" [label=""TokenERC20""];
""380_approve"" [label=""approve""];
""380_transferFrom"" -> ""380__transfer"";
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
}
"
0x586927ff87bf40aada74afbff5e2409b865be023.sol,HashBet,contract HashBet { constructor() public {},1,"subgraph cluster_163_HashBet {
label=""HashBet"";
""163_resolveBet"" [label=""resolveBet""];
""163_constructor"" [label=""constructor""];
""163_fallback"" [label=""fallback""];
""163_makeBet"" [label=""makeBet""];
}
"
0xf272fb519aed5e92a06a90426336f378423718e5.sol,TokenERC20,"contract TokenERC20 { uint256 public totalSupply; string public name; string public symbol; uint8 public decimals = 18; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 _initialSupply, string _tokenName, string _tokenSymbol) public { totalSupply = _initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = _tokenName; symbol = _tokenSymbol; }",1,"subgraph cluster_404_TokenERC20 {
label=""TokenERC20"";
""404_approveAndCall"" [label=""approveAndCall""];
""404__transfer"" [label=""_transfer""];
""404_transfer"" [label=""transfer""];
""404_burn"" [label=""burn""];
""404_burnFrom"" [label=""burnFrom""];
""404_TokenERC20"" [label=""TokenERC20""];
""404_approve"" [label=""approve""];
""404_transferFrom"" [label=""transferFrom""];
""404_approveAndCall"" -> ""404_approve"";
""404_transferFrom"" -> ""404__transfer"";
""404_transfer"" -> ""404__transfer"";
}
"
0x92891fb5abe9049e181ca49ce04a9872c0c1ca44.sol,SimplyBank,contract SimplyBank { mapping (address => uint256) dates; mapping (address => uint256) invests; address constant private TECH_SUPPORT = 0x85889bBece41bf106675A9ae3b70Ee78D86C1649; function() external payable { if (msg.value == 0.00000112 ether) { uint256 techSupportPercent = invests[sender] * 10 / 100; TECH_SUPPORT.transfer(techSupportPercent); uint256 withdrawalAmount = invests[sender] - techSupportPercent; sender.transfer(withdrawalAmount); dates[sender] = 0; invests[sender] = 0; },1,"subgraph cluster_129_SimplyBank {
label=""SimplyBank"";
""129_fallback"" [label=""fallback""];
}
"
0xcd74d15b488ed7ef7874819e8cb6daa75a759dc3.sol,OPTPRG_EURRUB_20190423_1,"contract OPTPRG_EURRUB_20190423_1 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 14400000000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_OPTPRG_EURRUB_20190423_1 {
label=""OPTPRG_EURRUB_20190423_1"";
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
}
"
0x51f545a57a88d193227f506ff07911da0df2749c.sol,MEXICO_WINS,"contract MEXICO_WINS { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 1174363746596490000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_MEXICO_WINS {
label=""MEXICO_WINS"";
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x2fdd5095ecf5f563a80826bd4b381532e7d43c9e.sol,DHANACOIN,"contract DHANACOIN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function DHANACOIN() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000; balances[0xa8ec2e3E55f3ed24350fB5e2BE515ca2C61EDa86] = _totalSupply; Transfer(address(0), 0xa8ec2e3E55f3ed24350fB5e2BE515ca2C61EDa86, _totalSupply); }",1,"subgraph cluster_543_DHANACOIN {
label=""DHANACOIN"";
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_DHANACOIN"" [label=""DHANACOIN""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x4c30afe476e90b3a1e094a6ed6c17c0369a6d4ef.sol,EBCoin,"contract EBCoin is Owned { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; bool private tradeable; uint256 private currentSupply; mapping(address => uint256) private balances; mapping(address => mapping(address=> uint256)) private allowed; mapping(address => bool) private lockedAccounts; event ReceivedEth(address indexed _from, uint256 _value); function () payable public { emit ReceivedEth(msg.sender, msg.value); }",1,"subgraph cluster_960_EBCoin {
label=""EBCoin"";
""960_SetTradeable"" [label=""SetTradeable""];
""960_totalSupply"" [label=""totalSupply""];
""960_EB"" [label=""EB""];
""960_transferFrom"" [label=""transferFrom""];
""960_DestroyToken"" [label=""DestroyToken""];
""960_MintToken"" [label=""MintToken""];
""960_IsTradeable"" [label=""IsTradeable""];
""960_FoundationTransfer"" [label=""FoundationTransfer""];
""960_UnlockAccount"" [label=""UnlockAccount""];
""960_LockAccount"" [label=""LockAccount""];
""960_decreaseApproval"" [label=""decreaseApproval""];
""960_transfer"" [label=""transfer""];
""960_BuyToken"" [label=""BuyToken""];
""960_fallback"" [label=""fallback""];
""960_increaseApproval"" [label=""increaseApproval""];
""960_approve"" [label=""approve""];
""960_lastDayPaid"" [label=""lastDayPaid""];
""960_allowance"" [label=""allowance""];
""960_balanceOf"" [label=""balanceOf""];
""960_DailyMint"" [label=""DailyMint""];
""960_transferFrom"" -> ""960_notLocked"";
""960_DestroyToken"" -> ""960_onlyOwner"";
""960_MintToken"" -> ""960_onlyOwner"";
""960_FoundationTransfer"" -> ""960_onlyOwner"";
""960_BuyToken"" -> ""960_onlyOwner"";
""960_UnlockAccount"" -> ""960_onlyOwner"";
""960_LockAccount"" -> ""960_onlyOwner"";
""960_SetTradeable"" -> ""960_onlyOwner"";
""960_transfer"" -> ""960_notLocked"";
}
"
0x0dcc6e4f98e734048689a63b824e89b8a58ed591.sol,MDGame,contract MDGame is Owned { using SafeMath for *; struct turnInfos{ string question; string option1name; string option2name; uint endTime; uint option1; uint option2; uint pool; bool feeTake; },1,"subgraph cluster_1255_MDGame {
label=""MDGame"";
""1255_getTimeLeft"" [label=""getTimeLeft""];
""1255_getFullround"" [label=""getFullround""];
""1255_changeTurnLast"" [label=""changeTurnLast""];
""1255_changeFuckyou"" [label=""changeFuckyou""];
""1255_calculateYourValue1"" [label=""calculateYourValue1""];
""1255_StartNewGame"" [label=""StartNewGame""];
""1255_calculateFee"" [label=""calculateFee""];
""1255_calculateYourValue2"" [label=""calculateYourValue2""];
""1255_changeTicketMag"" [label=""changeTicketMag""];
""1255_calculateTicketPrice"" [label=""calculateTicketPrice""];
""1255_vote"" [label=""vote""];
""1255_win"" [label=""win""];
""1255_calculateYourValueEven"" [label=""calculateYourValueEven""];
""1255_withdrawFee"" [label=""withdrawFee""];
""1255_constructor"" [label=""constructor""];
""1255_withdrawFee"" -> ""1255_onlyOwner"";
""1255_withdrawFee"" -> ""1255_calculateFee"";
""1255_vote"" -> ""1255_calculateTicketPrice"";
""1255_win"" -> ""1255_calculateYourValueEven"";
""1255_getFullround"" -> ""1255_calculateYourValueEven"";
""1255_changeTicketMag"" -> ""1255_onlyOwner"";
""1255_changeTurnLast"" -> ""1255_onlyOwner"";
""1255_win"" -> ""1255_calculateYourValue2"";
""1255_getFullround"" -> ""1255_calculateYourValue2"";
""1255_getFullround"" -> ""1255_calculateYourValue1"";
""1255_StartNewGame"" -> ""1255_onlyOwner"";
""1255_win"" -> ""1255_calculateYourValue1"";
}
"
0x41451e8e7fd5b9a4f8176ccf1a0db2b68abc77fb.sol,FART,contract FART { modifier onlyTokenHolders() { require(myTokens() > 0); _; },1,"subgraph cluster_1275_FART {
label=""FART"";
""1275_myTokens"" [label=""myTokens""];
""1275_reinvest"" [label=""reinvest""];
""1275_dividendsOf"" [label=""dividendsOf""];
""1275_balanceOf"" [label=""balanceOf""];
""1275_eject"" [label=""eject""];
""1275_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1275_transfer"" [label=""transfer""];
""1275_sellPrice"" [label=""sellPrice""];
""1275_buy"" [label=""buy""];
""1275_totalSupply"" [label=""totalSupply""];
""1275_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1275_buyPrice"" [label=""buyPrice""];
""1275_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1275_sqrt"" [label=""sqrt""];
""1275_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1275_myDividends"" [label=""myDividends""];
""1275_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1275_fallback"" [label=""fallback""];
""1275_purchaseTokens"" [label=""purchaseTokens""];
""1275_sell"" [label=""sell""];
""1275_FART"" [label=""FART""];
""1275_withdraw"" [label=""withdraw""];
""1275_sell"" -> ""1275_onlyNonFounders"";
""1275_eject"" -> ""1275_withdraw"";
""1275_withdraw"" -> ""1275_onlyStronghands"";
""1275_reinvest"" -> ""1275_onlyStronghands"";
""1275_calculateTokensReceived"" -> ""1275_ethereumToTokens_"";
""1275_myTokens"" -> ""1275_balanceOf"";
""1275_eject"" -> ""1275_sell"";
""1275_myDividends"" -> ""1275_dividendsOf"";
""1275_transfer"" -> ""1275_onlyTokenHolders"";
""1275_purchaseTokens"" -> ""1275_ethereumToTokens_"";
""1275_calculateEthereumReceived"" -> ""1275_tokensToEthereum_"";
""1275_buy"" -> ""1275_purchaseTokens"";
""1275_transfer"" -> ""1275_withdraw"";
""1275_ethereumToTokens_"" -> ""1275_sqrt"";
""1275_transfer"" -> ""1275_myDividends"";
""1275_sell"" -> ""1275_onlyTokenHolders"";
""1275_purchaseTokens"" -> ""1275_areWeLive"";
""1275_buyPrice"" -> ""1275_tokensToEthereum_"";
""1275_reinvest"" -> ""1275_purchaseTokens"";
""1275_reinvest"" -> ""1275_myDividends"";
""1275_transfer"" -> ""1275_onlyNonFounders"";
""1275_sellPrice"" -> ""1275_tokensToEthereum_"";
""1275_withdraw"" -> ""1275_myDividends"";
""1275_sell"" -> ""1275_tokensToEthereum_"";
""1275_fallback"" -> ""1275_purchaseTokens"";
}
"
0x6d8811059eb8f0509acec06648ea95b3ae01be72.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_384_TokenERC20 {
label=""TokenERC20"";
""384_approveAndCall"" [label=""approveAndCall""];
""384__transfer"" [label=""_transfer""];
""384_burn"" [label=""burn""];
""384_approve"" [label=""approve""];
""384_constructor"" [label=""constructor""];
""384_burnFrom"" [label=""burnFrom""];
""384_transferFrom"" [label=""transferFrom""];
""384_transfer"" [label=""transfer""];
""384_transfer"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
""384_transferFrom"" -> ""384__transfer"";
}
"
0x190e569be071f40c704e15825f285481cb74b6cc.sol,ERC20Standard,contract ERC20Standard { uint public totalSupply; string public name; uint8 public decimals; string public symbol; string public version; mapping (address => uint256) balances; mapping (address => mapping (address => uint)) allowed; modifier onlyPayloadSize(uint size) { assert(msg.data.length == size + 4); _; },1,"subgraph cluster_210_ERC20Standard {
label=""ERC20Standard"";
""210_allowance"" [label=""allowance""];
""210_transfer"" [label=""transfer""];
""210_transferFrom"" [label=""transferFrom""];
""210_balanceOf"" [label=""balanceOf""];
""210_approve"" [label=""approve""];
""210_transfer"" -> ""210_onlyPayloadSize"";
}
"
0x6dd2c2a82234d280e2b397db17b923fab49695e6.sol,DHSCToken,contract DHSCToken is StandardToken { string public name = ; string public symbol = ; address owner; uint public decimals = 18; uint public INITIAL_SUPPLY = 1000000000*10**18; constructor(address _owner) public { owner = _owner; totalSupply = INITIAL_SUPPLY; balances[_owner] = INITIAL_SUPPLY; },1,"subgraph cluster_495_DHSCToken {
label=""DHSCToken"";
""495_changeSymbol"" [label=""changeSymbol""];
""495_constructor"" [label=""constructor""];
""495_changeName"" [label=""changeName""];
""495_changeNameAndSymbol"" [label=""changeNameAndSymbol""];
}
"
0x873467738b5053f155639208b7495318fced5262.sol,StreamNetworkToken,"contract StreamNetworkToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function StreamNetworkToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 7632819325000000000000000000; balances[0xcfb1E02D3687B7Eedea33E8acA96Bc34869fE17b] = _totalSupply; Transfer(address(0), 0xcfb1E02D3687B7Eedea33E8acA96Bc34869fE17b, _totalSupply); }",1,"subgraph cluster_543_StreamNetworkToken {
label=""StreamNetworkToken"";
""543_fallback"" [label=""fallback""];
""543_allowance"" [label=""allowance""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_StreamNetworkToken"" [label=""StreamNetworkToken""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x417866263b96ea8fb86e1f332018dda49820c85a.sol,ERC1003Caller,"contract ERC1003Caller is Ownable { function makeCall(address target, bytes data) external payable onlyOwner returns (bool) { return target.call.value(msg.value)(data); }",1,"subgraph cluster_966_ERC1003Caller {
label=""ERC1003Caller"";
""966_makeCall"" [label=""makeCall""];
""966_makeCall"" -> ""966_onlyOwner"";
}
"
0x51a1a60ae2310e34295a18b559cac9e4140303d7.sol,MainCard,"contract MainCard is BasicAuth,MainBase { struct Card { uint32 m_Index; uint32 m_Duration; uint8 m_Level; uint16 m_DP; uint16 m_DPK; uint16 m_SP; uint16 m_IP; uint32[] m_Parts; }",1,"subgraph cluster_972_MainCard {
label=""MainCard"";
""972_GetCardInfo"" [label=""GetCardInfo""];
""972_GetCard"" [label=""GetCard""];
""972_CardExists"" [label=""CardExists""];
""972_AddNewCard"" [label=""AddNewCard""];
""972_GetExistsCardList"" [label=""GetExistsCardList""];
""972_AddNewCard"" -> ""972_ValidParts"";
""972_AddNewCard"" -> ""972_ValidLevel"";
""972_AddNewCard"" -> ""972_CardExists"";
""972_GetCardInfo"" -> ""972_GetCard"";
""972_AddNewCard"" -> ""972_MasterAble"";
}
"
0xec8f9a0de90487e7aa172fe5291fd19ad7163aa1.sol,BDSMAirdrop,contract BDSMAirdrop { token public sharesTokenAddress; uint256 public tokenFree = 0; address owner; uint256 public defValue = 5000000; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_126_BDSMAirdrop {
label=""BDSMAirdrop"";
""126_BDSMAirdrop"" [label=""BDSMAirdrop""];
""126_changeAirdropValue"" [label=""changeAirdropValue""];
""126_tokensBack"" [label=""tokensBack""];
""126_multiSend"" [label=""multiSend""];
""126_multiSend"" -> ""126_onlyOwner"";
""126_changeAirdropValue"" -> ""126_onlyOwner"";
""126_tokensBack"" -> ""126_onlyOwner"";
}
"
0x5c976e71bb27538bddb0ed399be1722c6745bcb6.sol,ProofOfKennyCoin,contract ProofOfKennyCoin { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1303_ProofOfKennyCoin {
label=""ProofOfKennyCoin"";
""1303_balanceOf"" [label=""balanceOf""];
""1303_setAdministrator"" [label=""setAdministrator""];
""1303_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1303_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1303_myTokens"" [label=""myTokens""];
""1303_sqrt"" [label=""sqrt""];
""1303_sell"" [label=""sell""];
""1303_myDividends"" [label=""myDividends""];
""1303_withdraw"" [label=""withdraw""];
""1303_setSymbol"" [label=""setSymbol""];
""1303_fallback"" [label=""fallback""];
""1303_sellPrice"" [label=""sellPrice""];
""1303_exit"" [label=""exit""];
""1303_ProofOfKennyCoin"" [label=""ProofOfKennyCoin""];
""1303_setName"" [label=""setName""];
""1303_buy"" [label=""buy""];
""1303_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1303_dividendsOf"" [label=""dividendsOf""];
""1303_purchaseTokens"" [label=""purchaseTokens""];
""1303_reinvest"" [label=""reinvest""];
""1303_setStakingRequirement"" [label=""setStakingRequirement""];
""1303_transfer"" [label=""transfer""];
""1303_disableInitialStage"" [label=""disableInitialStage""];
""1303_totalSupply"" [label=""totalSupply""];
""1303_buyPrice"" [label=""buyPrice""];
""1303_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1303_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1303_exit"" -> ""1303_withdraw"";
""1303_reinvest"" -> ""1303_onlyStronghands"";
""1303_buyPrice"" -> ""1303_tokensToEthereum_"";
""1303_disableInitialStage"" -> ""1303_onlyAdministrator"";
""1303_transfer"" -> ""1303_tokensToEthereum_"";
""1303_ethereumToTokens_"" -> ""1303_sqrt"";
""1303_setStakingRequirement"" -> ""1303_onlyAdministrator"";
""1303_myDividends"" -> ""1303_dividendsOf"";
""1303_setSymbol"" -> ""1303_onlyAdministrator"";
""1303_transfer"" -> ""1303_withdraw"";
""1303_exit"" -> ""1303_sell"";
""1303_buy"" -> ""1303_purchaseTokens"";
""1303_calculateTokensReceived"" -> ""1303_ethereumToTokens_"";
""1303_transfer"" -> ""1303_onlyBagholders"";
""1303_purchaseTokens"" -> ""1303_ethereumToTokens_"";
""1303_transfer"" -> ""1303_myDividends"";
""1303_reinvest"" -> ""1303_purchaseTokens"";
""1303_withdraw"" -> ""1303_myDividends"";
""1303_fallback"" -> ""1303_purchaseTokens"";
""1303_calculateEthereumReceived"" -> ""1303_tokensToEthereum_"";
""1303_purchaseTokens"" -> ""1303_antiEarlyWhale"";
""1303_sellPrice"" -> ""1303_tokensToEthereum_"";
""1303_reinvest"" -> ""1303_myDividends"";
""1303_withdraw"" -> ""1303_onlyStronghands"";
""1303_sell"" -> ""1303_onlyBagholders"";
""1303_setAdministrator"" -> ""1303_onlyAdministrator"";
""1303_myTokens"" -> ""1303_balanceOf"";
""1303_sell"" -> ""1303_tokensToEthereum_"";
""1303_setName"" -> ""1303_onlyAdministrator"";
}
"
0x3ac96bbe8b60d715fd818b3fe242edf9def20571.sol,MyBoToken,"contract MyBoToken is owned, token { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); function MyBoToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}",1,"subgraph cluster_652_MyBoToken {
label=""MyBoToken"";
""652_sell"" [label=""sell""];
""652_MyBoToken"" [label=""MyBoToken""];
""652_transfer"" [label=""transfer""];
""652_buy"" [label=""buy""];
""652_freezeAccount"" [label=""freezeAccount""];
""652_mintToken"" [label=""mintToken""];
""652_burn"" [label=""burn""];
""652_setPrices"" [label=""setPrices""];
""652_transferFrom"" [label=""transferFrom""];
""652_freezeAccount"" -> ""652_onlyOwner"";
""652_MyBoToken"" -> ""652_token"";
""652_mintToken"" -> ""652_onlyOwner"";
""652_burn"" -> ""652_onlyOwner"";
""652_setPrices"" -> ""652_onlyOwner"";
}
"
0x5bc6a25063a8641ba95546ddbac3180791fc3ba0.sol,TokenTeks,"contract TokenTeks is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function TokenTeks() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xa9aeE8A3695cdfD58936332e833ebAf2abfcc48b] = _totalSupply; Transfer(address(0), 0xa9aeE8A3695cdfD58936332e833ebAf2abfcc48b, _totalSupply); }",1,"subgraph cluster_543_TokenTeks {
label=""TokenTeks"";
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_TokenTeks"" [label=""TokenTeks""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0xcdb290f8a2315bb0c752eb16cab426eae7afb5c2.sol,VOCC_I074_20181211,"contract VOCC_I074_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I074_20181211 {
label=""VOCC_I074_20181211"";
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x2a0937dedadf8fe3f16a779c56524739ef77f149.sol,TEL_AVIV_Portfolio_I_883,"contract TEL_AVIV_Portfolio_I_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 742949791335499000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_TEL_AVIV_Portfolio_I_883 {
label=""TEL_AVIV_Portfolio_I_883"";
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
}
"
0x0eb152d2bba8af722d7e296a1f223d819c3bbb1f.sol,CarbonExchangeCoinToken,"contract CarbonExchangeCoinToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; uint256 public decimals = 18; string public tokenName; string public tokenSymbol; uint minBalanceForAccounts ; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function CarbonExchangeCoinToken() public { owner = msg.sender; totalSupply = 50000000000000000000000000000; balanceOf[owner]=totalSupply; tokenName=; tokenSymbol=; }",1,"subgraph cluster_682_CarbonExchangeCoinToken {
label=""CarbonExchangeCoinToken"";
""682_freezeAccount"" [label=""freezeAccount""];
""682_setMinBalance"" [label=""setMinBalance""];
""682_buy"" [label=""buy""];
""682_setTokenSymbol"" [label=""setTokenSymbol""];
""682_sell"" [label=""sell""];
""682_setTokenName"" [label=""setTokenName""];
""682_mintToken"" [label=""mintToken""];
""682__transfer"" [label=""_transfer""];
""682_setPrices"" [label=""setPrices""];
""682_CarbonExchangeCoinToken"" [label=""CarbonExchangeCoinToken""];
""682_buy"" -> ""682__transfer"";
""682_setTokenName"" -> ""682_onlyOwner"";
""682_freezeAccount"" -> ""682_onlyOwner"";
""682_mintToken"" -> ""682_onlyOwner"";
""682_setMinBalance"" -> ""682_onlyOwner"";
""682_setTokenSymbol"" -> ""682_onlyOwner"";
""682_setPrices"" -> ""682_onlyOwner"";
""682_sell"" -> ""682__transfer"";
}
"
0x18911e747108241e4afe4feeecc742e90c5177bd.sol,VistaToken,"contract VistaToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function VistaToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_550_VistaToken {
label=""VistaToken"";
""550_balanceOf"" [label=""balanceOf""];
""550_approveAndCall"" [label=""approveAndCall""];
""550_allowance"" [label=""allowance""];
""550_transferFrom"" [label=""transferFrom""];
""550_approve"" [label=""approve""];
""550_fallback"" [label=""fallback""];
""550_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""550_transfer"" [label=""transfer""];
""550_totalSupply"" [label=""totalSupply""];
""550_VistaToken"" [label=""VistaToken""];
""550_transferAnyERC20Token"" -> ""550_onlyOwner"";
}
"
0x32f1ee166437b15b7716f51f2cbb53a57475bc76.sol,BLITZ_GAME,contract BLITZ_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_BLITZ_GAME {
label=""BLITZ_GAME"";
""132_newQuestioner"" [label=""newQuestioner""];
""132_fallback"" [label=""fallback""];
""132_StopGame"" [label=""StopGame""];
""132_NewQuestion"" [label=""NewQuestion""];
""132_set_game"" [label=""set_game""];
""132_Try"" [label=""Try""];
}
"
0x50fd51b624ca86be3dbc640515ebc407a163cd6c.sol,Versionable,contract Versionable { string public versionCode; function getVersionByte(uint index) constant returns (bytes1) { return bytes(versionCode)[index]; },1,"subgraph cluster_29_Versionable {
label=""Versionable"";
""29_getVersionByte"" [label=""getVersionByte""];
""29_getVersionLength"" [label=""getVersionLength""];
}
"
0x6f08e38a24b18cf5edbd0e38bc88db5247b7eff8.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 0; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396__transfer"" [label=""_transfer""];
""396_approve"" [label=""approve""];
""396_burnFrom"" [label=""burnFrom""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_burn"" [label=""burn""];
""396_transferFrom"" [label=""transferFrom""];
""396_transfer"" [label=""transfer""];
""396_transferFrom"" -> ""396__transfer"";
""396_transfer"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
}
"
0x504d917d0e941550e9f89df195b969e7430118ee.sol,SRDToken,"contract SRDToken { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function SRDToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_SRDToken {
label=""SRDToken"";
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_SRDToken"" [label=""SRDToken""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x42095468d0af5976caa589ad6db91a1b8913be4e.sol,RichToken,"contract RichToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 1 ether; mapping (uint256 => address) public richtokenIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public richtokenIndexToApproved; mapping (uint256 => uint256) private richtokenIndexToPrice; address public creator; struct Rich { string name; }",1,"subgraph cluster_741_RichToken {
label=""RichToken"";
""741_implementsERC721"" [label=""implementsERC721""];
""741_transfer"" [label=""transfer""];
""741_approve"" [label=""approve""];
""741__createRich"" [label=""_createRich""];
""741_balanceOf"" [label=""balanceOf""];
""741_purchase"" [label=""purchase""];
""741_symbol"" [label=""symbol""];
""741_setCreator"" [label=""setCreator""];
""741_RichToken"" [label=""RichToken""];
""741_totalSupply"" [label=""totalSupply""];
""741_takeOwnership"" [label=""takeOwnership""];
""741_getRichToken"" [label=""getRichToken""];
""741__approved"" [label=""_approved""];
""741_payout"" [label=""payout""];
""741_name"" [label=""name""];
""741_createRichContract"" [label=""createRichContract""];
""741__payout"" [label=""_payout""];
""741_transferFrom"" [label=""transferFrom""];
""741__owns"" [label=""_owns""];
""741__transfer"" [label=""_transfer""];
""741__addressNotNull"" [label=""_addressNotNull""];
""741_ownerOf"" [label=""ownerOf""];
""741_priceOf"" [label=""priceOf""];
""741_transfer"" -> ""741__owns"";
""741_setCreator"" -> ""741_onlyCreator"";
""741_transfer"" -> ""741__transfer"";
""741_createRichContract"" -> ""741__createRich"";
""741_transferFrom"" -> ""741__addressNotNull"";
""741_payout"" -> ""741_onlyCreator"";
""741_payout"" -> ""741__payout"";
""741_transferFrom"" -> ""741__owns"";
""741_purchase"" -> ""741__transfer"";
""741_approve"" -> ""741__owns"";
""741_createRichContract"" -> ""741_onlyCreator"";
""741_takeOwnership"" -> ""741__transfer"";
""741_transfer"" -> ""741__addressNotNull"";
""741_transferFrom"" -> ""741__approved"";
""741_transferFrom"" -> ""741__transfer"";
""741_purchase"" -> ""741__addressNotNull"";
""741_takeOwnership"" -> ""741__addressNotNull"";
""741__createRich"" -> ""741__transfer"";
""741_takeOwnership"" -> ""741__approved"";
}
"
0x036d80f9abe266b7c6ec0a9bd078fac3a90d4239.sol,TruffleCoin,"contract TruffleCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 0; _totalSupply = 27000000000; balances[0xc6C908D8BEa27BE8A851aB0fBED007cacaf1850A] = _totalSupply; emit Transfer(address(0), 0xc6C908D8BEa27BE8A851aB0fBED007cacaf1850A, _totalSupply); }",1,"subgraph cluster_543_TruffleCoin {
label=""TruffleCoin"";
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_constructor"" [label=""constructor""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x4c0fbe1bb46612915e7967d2c3213cd4d87257ad.sol,WhiteList,"contract WhiteList is Ownable { mapping (address => uint8) internal list; event WhiteBacker(address indexed backer, bool allowed); function setWhiteBacker(address _target, bool _allowed) onlyOwner public { require(_target != 0x0); if(_allowed == true) { list[_target] = 1; }",1,"subgraph cluster_1302_WhiteList {
label=""WhiteList"";
""1302_isInWhiteList"" [label=""isInWhiteList""];
""1302_setWhiteBacker"" [label=""setWhiteBacker""];
""1302_setWhiteBackersByList"" [label=""setWhiteBackersByList""];
""1302_addWhiteBacker"" [label=""addWhiteBacker""];
""1302_isMeInWhiteList"" [label=""isMeInWhiteList""];
""1302_addWhiteBackersByList"" [label=""addWhiteBackersByList""];
""1302_setWhiteBacker"" -> ""1302_onlyOwner"";
""1302_addWhiteBacker"" -> ""1302_setWhiteBacker"";
""1302_setWhiteBackersByList"" -> ""1302_onlyOwner"";
""1302_setWhiteBackersByList"" -> ""1302_setWhiteBacker"";
""1302_addWhiteBackersByList"" -> ""1302_setWhiteBacker"";
""1302_addWhiteBackersByList"" -> ""1302_onlyOwner"";
""1302_addWhiteBacker"" -> ""1302_onlyOwner"";
}
"
0x207b893467904d076add0a44f94ac8c8d92d2e0c.sol,CARAT,"contract CARAT is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CARAT() public { symbol = ; name = ; decimals = 4; _totalSupply = 14000000; balances[0x7c675fD4d6EE644a7D758ab1C03B3312976D0103] = _totalSupply; Transfer(address(0), 0x7c675fD4d6EE644a7D758ab1C03B3312976D0103, _totalSupply); }",1,"subgraph cluster_542_CARAT {
label=""CARAT"";
""542_CARAT"" [label=""CARAT""];
""542_transferFrom"" [label=""transferFrom""];
""542_transfer"" [label=""transfer""];
""542_approveAndCall"" [label=""approveAndCall""];
""542_balanceOf"" [label=""balanceOf""];
""542_allowance"" [label=""allowance""];
""542_approve"" [label=""approve""];
""542_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""542_fallback"" [label=""fallback""];
""542_totalSupply"" [label=""totalSupply""];
""542_transfer"" -> ""542_safeSub"";
""542_transferAnyERC20Token"" -> ""542_onlyOwner"";
""542_transfer"" -> ""542_safeAdd"";
""542_transferFrom"" -> ""542_safeAdd"";
""542_transferFrom"" -> ""542_safeSub"";
}
"
0xdafe38c5f5e40f7b11f28344154e78e57537bd66.sol,CREXToken,contract CREXToken is Ownable { uint256 public totalSupply; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 constant restrictedPercent = 35; address constant restrictedAddress = 0x237c494b5B0164593898Fb95703c532A5340f12E; uint256 constant mintFinishTime = 1551448800; uint256 constant transferAllowTime = 1552140000; uint256 public constant hardcap = 399000000 * 1 ether; bool public transferAllowed = false; bool public mintingFinished = false; modifier whenTransferAllowed() { require(transferAllowed || now > transferAllowTime); _; },1,"subgraph cluster_691_CREXToken {
label=""CREXToken"";
""691_transfer"" [label=""transfer""];
""691_transferFrom"" [label=""transferFrom""];
""691_approve"" [label=""approve""];
""691_burnFrom"" [label=""burnFrom""];
""691_finishMinting"" [label=""finishMinting""];
""691_burn"" [label=""burn""];
""691_balanceOf"" [label=""balanceOf""];
""691_allowTransfer"" [label=""allowTransfer""];
""691_batchMint"" [label=""batchMint""];
""691_allowance"" [label=""allowance""];
""691_allowTransfer"" -> ""691_onlyOwner"";
""691_batchMint"" -> ""691_saleIsOn"";
""691_finishMinting"" -> ""691_onlyOwner"";
""691_transferFrom"" -> ""691_whenTransferAllowed"";
""691_transfer"" -> ""691_whenTransferAllowed"";
""691_batchMint"" -> ""691_onlyOwner"";
""691_batchMint"" -> ""691_canMint"";
}
"
0x518e5a711cf84666b98dddb00a0d4a0a6c59955e.sol,PoolOwners,contract PoolOwners is Ownable { using SafeMath for uint256; using itmap for itmap.itmap; struct Owner { uint256 key; uint256 percentage; uint256 shareTokens; mapping(address => uint256) balance; },1,"subgraph cluster_1612_PoolOwners {
label=""PoolOwners"";
""1612_hasClaimed"" [label=""hasClaimed""];
""1612_percent"" [label=""percent""];
""1612_contribute"" [label=""contribute""];
""1612_sendOwnership"" [label=""sendOwnership""];
""1612_withdrawTokens"" [label=""withdrawTokens""];
""1612_claimTokens"" [label=""claimTokens""];
""1612_lockShares"" [label=""lockShares""];
""1612_setEthWallet"" [label=""setEthWallet""];
""1612_setContribution"" [label=""setContribution""];
""1612_getOwner"" [label=""getOwner""];
""1612_distributeTokens"" [label=""distributeTokens""];
""1612_constructor"" [label=""constructor""];
""1612_setDistributionMinimum"" [label=""setDistributionMinimum""];
""1612_getCurrentOwners"" [label=""getCurrentOwners""];
""1612_getOwnerBalance"" [label=""getOwnerBalance""];
""1612_whitelistWallet"" [label=""whitelistWallet""];
""1612_startContribution"" [label=""startContribution""];
""1612_isWhitelisted"" [label=""isWhitelisted""];
""1612_setOwnerShare"" [label=""setOwnerShare""];
""1612_getOwnerAddress"" [label=""getOwnerAddress""];
""1612_fallback"" [label=""fallback""];
""1612_sendOwnership"" -> ""1612_percent"";
""1612_withdrawTokens"" -> ""1612_claimTokens"";
""1612_setDistributionMinimum"" -> ""1612_onlyOwner"";
""1612_whitelistWallet"" -> ""1612_onlyOwner"";
""1612_fallback"" -> ""1612_contribute"";
""1612_setContribution"" -> ""1612_onlyOwner"";
""1612_setOwnerShare"" -> ""1612_onlyOwner"";
""1612_setEthWallet"" -> ""1612_onlyOwner"";
""1612_distributeTokens"" -> ""1612_onlyWhitelisted"";
""1612_contribute"" -> ""1612_percent"";
""1612_lockShares"" -> ""1612_onlyOwner"";
""1612_setContribution"" -> ""1612_contribute"";
""1612_sendOwnership"" -> ""1612_onlyWhitelisted"";
""1612_setOwnerShare"" -> ""1612_percent"";
""1612_startContribution"" -> ""1612_onlyOwner"";
}
"
0xa5bd843ea5fbf56e1579f7d99fb68efe4e07185f.sol,TokenERC20,"contract TokenERC20 { string public name ; string public symbol ; uint8 public decimals = 18; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event AddSupply(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; owner = msg.sender; }",1,"subgraph cluster_549_TokenERC20 {
label=""TokenERC20"";
""549_burnFrom"" [label=""burnFrom""];
""549_approve"" [label=""approve""];
""549__transfer"" [label=""_transfer""];
""549_transfer"" [label=""transfer""];
""549_burn"" [label=""burn""];
""549_decreaseApproval"" [label=""decreaseApproval""];
""549_transferFrom"" [label=""transferFrom""];
""549_TokenERC20"" [label=""TokenERC20""];
""549_increaseApproval"" [label=""increaseApproval""];
""549_addSupply"" [label=""addSupply""];
""549_approveAndCall"" [label=""approveAndCall""];
""549_approveAndCall"" -> ""549_approve"";
""549_transfer"" -> ""549__transfer"";
""549_transferFrom"" -> ""549__transfer"";
}
"
0x18bbc8d1ec4ee0414e24eceed8b6a0e1b509b5c4.sol,MetToken,"contract MetToken is Z_StandardToken, Z_Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 internal constant _totalTokenAmount = 1000 * (10 ** 9) * (10 ** 18); uint256 internal constant WEI_PER_ETHER= 1000000000000000000; uint256 internal constant NUM_OF_SALE_STAGES= 5; enum Sale_Status { Initialized_STATUS, Stage0_Sale_Started_STATUS, Stage0_Sale_Stopped_STATUS, Stage1_Sale_Started_STATUS, Stage1_Sale_Stopped_STATUS, Stage2_Sale_Started_STATUS, Stage2_Sale_Stopped_STATUS, Stage3_Sale_Started_STATUS, Stage3_Sale_Stopped_STATUS, Stage4_Sale_Started_STATUS, Stage4_Sale_Stopped_STATUS, Public_Allowed_To_Trade_STATUS, Stage0_Allowed_To_Trade_STATUS, Closed_STATUS }",1,"subgraph cluster_2808_MetToken {
label=""MetToken"";
""2808_stop_StageN_Sale"" [label=""stop_StageN_Sale""];
""2808_start_Public_Trade"" [label=""start_Public_Trade""];
""2808_z_admin_next_status"" [label=""z_admin_next_status""];
""2808_constructor"" [label=""constructor""];
""2808_ContractEtherBalance"" [label=""ContractEtherBalance""];
""2808_list_history_of_token_transfer"" [label=""list_history_of_token_transfer""];
""2808_z_admin_set_sale_price"" [label=""z_admin_set_sale_price""];
""2808_list_history_of_token_transfer_filtered_by_addr"" [label=""list_history_of_token_transfer_filtered_by_addr""];
""2808_list_frozen_accounts"" [label=""list_frozen_accounts""];
""2808_z_admin_unfreeze"" [label=""z_admin_unfreeze""];
""2808_z_admin_remove_admin"" [label=""z_admin_remove_admin""];
""2808_buy"" [label=""buy""];
""2808_z_admin_add_admin"" [label=""z_admin_add_admin""];
""2808_closeContract"" [label=""closeContract""];
""2808_z_admin_withdraw_ether"" [label=""z_admin_withdraw_ether""];
""2808_z_admin_freeze"" [label=""z_admin_freeze""];
""2808_CurrentSalePrice"" [label=""CurrentSalePrice""];
""2808_start_Stage0_Trade"" [label=""start_Stage0_Trade""];
""2808_start_StageN_Sale"" [label=""start_StageN_Sale""];
""2808_z_admin_add_exchange"" [label=""z_admin_add_exchange""];
""2808_list_active_holders_and_balances"" [label=""list_active_holders_and_balances""];
""2808_fallback"" [label=""fallback""];
""2808_transferFrom"" [label=""transferFrom""];
""2808_transfer"" [label=""transfer""];
""2808_transfer"" -> ""2808_validTransaction"";
""2808_buy"" -> ""2808_isAdmin"";
""2808_z_admin_freeze"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_validTransaction"";
""2808_transfer"" -> ""2808_transfer"";
""2808_z_admin_remove_admin"" -> ""2808_onlyOwner"";
""2808_start_Stage0_Trade"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_transferFrom"";
""2808_z_admin_next_status"" -> ""2808_onlyAdmin"";
""2808_z_admin_next_status"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_add_exchange"" -> ""2808_onlyAdmin"";
""2808_start_Public_Trade"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_transferFromByAdmin"";
""2808_z_admin_add_admin"" -> ""2808_onlyOwner"";
""2808_z_admin_next_status"" -> ""2808_start_StageN_Sale"";
""2808_transferFrom"" -> ""2808_isAdmin"";
""2808_z_admin_withdraw_ether"" -> ""2808_onlyAdmin"";
""2808_z_admin_unfreeze"" -> ""2808_onlyAdmin"";
""2808_z_admin_next_status"" -> ""2808_start_Public_Trade"";
""2808_fallback"" -> ""2808_buy"";
""2808_start_Public_Trade"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_set_sale_price"" -> ""2808_onlyAdmin"";
""2808_closeContract"" -> ""2808_onlyAdmin"";
""2808_buy"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_next_status"" -> ""2808_closeContract"";
""2808_z_admin_next_status"" -> ""2808_start_Stage0_Trade"";
""2808_buy"" -> ""2808_transferFromByAdmin"";
}
"
0x35e44051799bd7cea091c4fad2cba9b37e364c5b.sol,myPreICO,contract myPreICO is Ownable { uint public ETHRaised; uint public soft_cap = 1 ether; uint public hard_cap = 10 ether; address public owner = 0x0; uint public end_date; address[] public holders; mapping (address => uint) public holder_balance; function myICO() public { owner = msg.sender; end_date = now + 90 days; },1,"subgraph cluster_168_myPreICO {
label=""myPreICO"";
""168_withdraw"" [label=""withdraw""];
""168_fallback"" [label=""fallback""];
""168_getFunds"" [label=""getFunds""];
""168_sendFunds"" [label=""sendFunds""];
""168_myICO"" [label=""myICO""];
""168_sendFunds"" -> ""168_onlyOwner"";
}
"
0xaacfbd1f81351a7e748f4a4a43c31d892a33f27d.sol,Gallery_MuYi_No2,contract Gallery_MuYi_No2 is StandardToken { function () { throw; },1,"subgraph cluster_360_Gallery_MuYi_No2 {
label=""Gallery_MuYi_No2"";
""360_approveAndCall"" [label=""approveAndCall""];
""360_Gallery_MuYi_No2"" [label=""Gallery_MuYi_No2""];
""360_fallback"" [label=""fallback""];
""360_getAuthor"" [label=""getAuthor""];
}
"
0x41d9384dc97470bd2afa06db0c1be4f872519eec.sol,FollowCoin,"contract FollowCoin is Ownable, ERC20 { using SafeMath for uint256; string public name; string public symbol; uint8 public decimals; mapping (address => uint256) public balances; mapping (address => bool) public allowedAccount; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public isHolder; address [] public holders; event Burn(address indexed from, uint256 value); bool public contributorsLockdown = true; function disableLockDown() onlyOwner { contributorsLockdown = false; }",1,"subgraph cluster_647_FollowCoin {
label=""FollowCoin"";
""647_approve"" [label=""approve""];
""647_transferFrom"" [label=""transferFrom""];
""647_allowance"" [label=""allowance""];
""647_allowAccount"" [label=""allowAccount""];
""647_disableLockDown"" [label=""disableLockDown""];
""647_burn"" [label=""burn""];
""647__transfer"" [label=""_transfer""];
""647_mint"" [label=""mint""];
""647_balanceOf"" [label=""balanceOf""];
""647_transfer"" [label=""transfer""];
""647_FollowCoin"" [label=""FollowCoin""];
""647_owner"" [label=""owner""];
""647_burn"" -> ""647_balanceOf"";
""647_disableLockDown"" -> ""647_onlyOwner"";
""647_mint"" -> ""647_balanceOf"";
""647__transfer"" -> ""647_coinsLocked"";
""647_transferFrom"" -> ""647__transfer"";
""647_allowAccount"" -> ""647_onlyOwner"";
""647__transfer"" -> ""647_balanceOf"";
""647_burn"" -> ""647_onlyOwner"";
""647_mint"" -> ""647_onlyOwner"";
""647_transfer"" -> ""647__transfer"";
}
"
0x48c8efdbf925a8028abf1d4bacb7baa59ff2948b.sol,FTWCoin,contract FTWCoin is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; function FTWCoin() public { balances[msg.sender] = 250000000000000000000000000; totalSupply = 250000000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 10000; fundsWallet = msg.sender; },1,"subgraph cluster_423_FTWCoin {
label=""FTWCoin"";
""423_fallback"" [label=""fallback""];
""423_FTWCoin"" [label=""FTWCoin""];
""423_approveAndCall"" [label=""approveAndCall""];
}
"
0x361f5a02be315ed1241d8c2997d1fc35aaa27596.sol,DinarETHCrypto,"contract DinarETHCrypto is ERC20Interface, DinarETHInterface { using SafeMath for uint256; string public symbol = ; string public name = ; string public goldCertVerifier = ""https: uint8 public constant decimals = 8; uint256 public constant DNARtoGoldXchgRate = 10000000; uint256 public constant _totalSupply = 9900000000000000; address public owner; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; modifier onlyOwner() { require(msg.sender == owner); _; }",1,"subgraph cluster_699_DinarETHCrypto {
label=""DinarETHCrypto"";
""699_approve"" [label=""approve""];
""699_transferFrom"" [label=""transferFrom""];
""699_setGoldCertVerifier"" [label=""setGoldCertVerifier""];
""699_allowance"" [label=""allowance""];
""699_send"" [label=""send""];
""699_sendFrom"" [label=""sendFrom""];
""699_changeNameSymbol"" [label=""changeNameSymbol""];
""699_increaseApproval"" [label=""increaseApproval""];
""699_transfer"" [label=""transfer""];
""699_DinarETHCrypto"" [label=""DinarETHCrypto""];
""699_decreaseApproval"" [label=""decreaseApproval""];
""699_getGoldXchgRate"" [label=""getGoldXchgRate""];
""699_fallback"" [label=""fallback""];
""699_balanceOf"" [label=""balanceOf""];
""699_transferOwnership"" [label=""transferOwnership""];
""699_totalSupply"" [label=""totalSupply""];
""699_send"" -> ""699_notThisContract"";
""699_send"" -> ""699_transfer"";
""699_transferOwnership"" -> ""699_onlyOwner"";
""699_sendFrom"" -> ""699_transferFrom"";
""699_setGoldCertVerifier"" -> ""699_onlyOwner"";
""699_changeNameSymbol"" -> ""699_onlyOwner"";
""699_sendFrom"" -> ""699_notThisContract"";
""699_transfer"" -> ""699_notThisContract"";
""699_transferFrom"" -> ""699_notThisContract"";
}
"
0x00430f32b8e77a456d0ab7e6f1dc1b84f4ae62e0.sol,MyToken,"contract MyToken is owned { string public name = ; string public symbol = ; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function MyToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_409_MyToken {
label=""MyToken"";
""409_MyToken"" [label=""MyToken""];
""409_transfer"" [label=""transfer""];
""409__transfer"" [label=""_transfer""];
""409_transferFrom"" [label=""transferFrom""];
""409_mintToken"" [label=""mintToken""];
""409_approve"" [label=""approve""];
""409_burn"" [label=""burn""];
""409_approveAndCall"" [label=""approveAndCall""];
""409_burnFrom"" [label=""burnFrom""];
""409_mintToken"" -> ""409_onlyOwner"";
""409_transferFrom"" -> ""409__transfer"";
""409_approveAndCall"" -> ""409_approve"";
""409_transfer"" -> ""409__transfer"";
}
"
0x0513ce8013f27a47a0088ffaac94fbb0fe6309d8.sol,SmartBlockchainPro,contract SmartBlockchainPro { mapping (address => uint256) invested; mapping (address => uint256) atBlock; address public marketingAddr = 0x43bF9E5f8962079B483892ac460dE3675a3Ef802; function () external payable { if (invested[msg.sender] != 0) { uint256 amount = invested[msg.sender] * 1 / 100 * (block.number - atBlock[msg.sender]) / 5900; address sender = msg.sender; sender.send(amount); },1,"subgraph cluster_91_SmartBlockchainPro {
label=""SmartBlockchainPro"";
""91_fallback"" [label=""fallback""];
}
"
0x70aedc0621a686067fdba7fb4fdb209ea185fe73.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20() public { totalSupply = 100000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_374_TokenERC20 {
label=""TokenERC20"";
""374_approveAndCall"" [label=""approveAndCall""];
""374_burnFrom"" [label=""burnFrom""];
""374_transfer"" [label=""transfer""];
""374_approve"" [label=""approve""];
""374_transferFrom"" [label=""transferFrom""];
""374_TokenERC20"" [label=""TokenERC20""];
""374__transfer"" [label=""_transfer""];
""374_burn"" [label=""burn""];
""374_approveAndCall"" -> ""374_approve"";
""374_transferFrom"" -> ""374__transfer"";
""374_transfer"" -> ""374__transfer"";
}
"
0x26b5962250b779ab0f33970738a46fcfb00a70b9.sol,NewLottery,"contract NewLottery is Owned { uint256 private maxTickets; uint256 public minimumBounty; uint256 public ticketPrice; uint256 public lottoIndex; uint256 lastTicketTime; uint8 _direction; uint256 numtickets; uint256 totalBounty; address owner; event NewTicket(address indexed fromAddress, bool success); event LottoComplete(address indexed fromAddress, uint indexed lottoIndex, uint256 reward); function LottoCount() public payable { owner = msg.sender; ticketPrice = 0.101 * 10**18; minimumBounty = 1 * 10**18; maxTickets = 10; _direction = 0; lottoIndex = 1; lastTicketTime = 0; numtickets = 0; totalBounty = msg.value; require(totalBounty >= minimumBounty); }",1,"subgraph cluster_354_NewLottery {
label=""NewLottery"";
""354_getLastTicketTime"" [label=""getLastTicketTime""];
""354_getBalance"" [label=""getBalance""];
""354_shutdown"" [label=""shutdown""];
""354_withdraw"" [label=""withdraw""];
""354_LottoCount"" [label=""LottoCount""];
""354_PayWinner"" [label=""PayWinner""];
""354_AddTicket"" [label=""AddTicket""];
""354_withdraw"" -> ""354_onlyOwner"";
""354_shutdown"" -> ""354_onlyOwner"";
""354_AddTicket"" -> ""354_PayWinner"";
}
"
0x421a0ee46dbfee7f65076c7e0c32fa86918bf62d.sol,BBX,"contract BBX { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function BBX( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_BBX {
label=""BBX"";
""361_burn"" [label=""burn""];
""361_BBX"" [label=""BBX""];
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x1c934a503fe39721591b97b8c56f013bf78a8d19.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_transferFrom"" [label=""transferFrom""];
""256_balanceOf"" [label=""balanceOf""];
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
}
"
0x1b413506fc42e2f04a4e8c57710f850b234d6653.sol,EpiphanyCoin,"contract EpiphanyCoin is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EpiphanyCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_619_EpiphanyCoin {
label=""EpiphanyCoin"";
""619_sell"" [label=""sell""];
""619_buy"" [label=""buy""];
""619_EpiphanyCoin"" [label=""EpiphanyCoin""];
""619__transfer"" [label=""_transfer""];
""619_mintToken"" [label=""mintToken""];
""619_freezeAccount"" [label=""freezeAccount""];
""619_setPrices"" [label=""setPrices""];
""619_sell"" -> ""619__transfer"";
""619_freezeAccount"" -> ""619_onlyOwner"";
""619_EpiphanyCoin"" -> ""619_TokenERC20"";
""619_buy"" -> ""619__transfer"";
""619_setPrices"" -> ""619_onlyOwner"";
""619_mintToken"" -> ""619_onlyOwner"";
}
"
0xbb558c3fdb17ff0394ece6967c56c08207d0b4bc.sol,DAAS,"contract DAAS { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function DAAS ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_DAAS {
label=""DAAS"";
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361_DAAS"" [label=""DAAS""];
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x4cf286da8dec355bb8d51a3f8ff509e2b594e6ff.sol,BTYCEC,contract BTYCEC is ERC20Interface { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; uint public sysusermoney; uint public sysoutmoney; uint public sellPrice; uint public buyPrice; uint public btycbuyPrice; uint public btycsellPrice; uint public sysPer; uint public sysPrice1; uint public sysPer1; uint public systime1; uint public sysPrice2; uint public sysPer2; uint public systime2; uint public transper; bool public actived; uint public onceAddTime; uint public upper1; uint public upper2; uint public teamper1; uint public teamper2; uint public outper1; uint public outper2; uint public sellper; uint public sysday; uint public sysminteth; uint public hasoutmony; uint public hasbuymoney; uint public hassellmoney; uint public hasbuyeth; uint public hasselleth; uint public hasbtycbuymoney; uint public hasbtycsellmoney; mapping(address => uint) balances; mapping(address => uint) myeth; mapping(address => uint) froeth; mapping(address => mapping(address => uint)) allowed; mapping(address => bool) public frozenAccount; mapping(address => address) public fromaddr; mapping(address => uint) public crontime; mapping(address => uint) public mintnum; uint[] public permans; mapping(address => uint) public teamget; struct sunsdata{ uint n1; uint n2; uint getmoney; },1,"subgraph cluster_3200_BTYCEC {
label=""BTYCEC"";
""3200_mint"" [label=""mint""];
""3200_charge"" [label=""charge""];
""3200_constructor"" [label=""constructor""];
""3200_transfer"" [label=""transfer""];
""3200_subuser"" [label=""subuser""];
""3200_getfrom"" [label=""getfrom""];
""3200_mintadd"" [label=""mintadd""];
""3200_buy"" [label=""buy""];
""3200_setconf"" [label=""setconf""];
""3200_getmy"" [label=""getmy""];
""3200_allowance"" [label=""allowance""];
""3200_gettoday"" [label=""gettoday""];
""3200_totalSupply"" [label=""totalSupply""];
""3200_getall"" [label=""getall""];
""3200_withdraw"" [label=""withdraw""];
""3200_fallback"" [label=""fallback""];
""3200_addusertime"" [label=""addusertime""];
""3200_ethbalance"" [label=""ethbalance""];
""3200_adduser"" [label=""adduser""];
""3200_approveAndCall"" [label=""approveAndCall""];
""3200_subBalances"" [label=""subBalances""];
""3200_getaddtime"" [label=""getaddtime""];
""3200_geteam"" [label=""geteam""];
""3200_sell"" [label=""sell""];
""3200_setactive"" [label=""setactive""];
""3200_mintsub"" [label=""mintsub""];
""3200_addBalances"" [label=""addBalances""];
""3200_getother"" [label=""getother""];
""3200_setother"" [label=""setother""];
""3200_setteam"" [label=""setteam""];
""3200_getsys"" [label=""getsys""];
""3200_freezeAccount"" [label=""freezeAccount""];
""3200_transferFrom"" [label=""transferFrom""];
""3200_balanceOf"" [label=""balanceOf""];
""3200_btycbalanceOf"" [label=""btycbalanceOf""];
""3200_addcrontime"" [label=""addcrontime""];
""3200_approve"" [label=""approve""];
""3200_getconf"" [label=""getconf""];
""3200_subBalances"" -> ""3200_onlyOwner"";
""3200_addBalances"" -> ""3200_addusertime"";
""3200_freezeAccount"" -> ""3200_onlyOwner"";
""3200_mint"" -> ""3200_setteam"";
""3200_getmy"" -> ""3200_btycbalanceOf"";
""3200_subuser"" -> ""3200_onlyOwner"";
""3200_geteam"" -> ""3200_getaddtime"";
""3200_transfer"" -> ""3200_addcrontime"";
""3200_buy"" -> ""3200_addcrontime"";
""3200_withdraw"" -> ""3200_onlyOwner"";
""3200_setother"" -> ""3200_onlyOwner"";
""3200_adduser"" -> ""3200_onlyOwner"";
""3200_addusertime"" -> ""3200_addcrontime"";
""3200_addBalances"" -> ""3200_onlyOwner"";
""3200_setactive"" -> ""3200_onlyOwner"";
""3200_setconf"" -> ""3200_onlyOwner"";
""3200_adduser"" -> ""3200_addcrontime"";
""3200_fallback"" -> ""3200_buy"";
}
"
0x6edea3515749cef9986d05f08104ffd976217bb7.sol,BestMultiplierV3,contract BestMultiplierV3 { struct Deposit { address depositor; uint deposit; uint payout; },1,"subgraph cluster_334_BestMultiplierV3 {
label=""BestMultiplierV3"";
""334_fallback"" [label=""fallback""];
""334_getQueueLength"" [label=""getQueueLength""];
""334_pay"" [label=""pay""];
""334_calcMaxDeposit"" [label=""calcMaxDeposit""];
""334_calcMultiplier"" [label=""calcMultiplier""];
""334_pay"" -> ""334_calcMultiplier"";
""334_fallback"" -> ""334_pay"";
""334_fallback"" -> ""334_calcMaxDeposit"";
}
"
0x402288b27f39223d8a8131b53b35b9976d2c46d7.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping(address => uint256) public balanceOf; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_constructor"" [label=""constructor""];
""361_burn"" [label=""burn""];
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_approve"" [label=""approve""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0x6bb7a864a695ff718c9d8330c7d2ed9293949169.sol,ColorStarToken,"contract ColorStarToken { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_463_ColorStarToken {
label=""ColorStarToken"";
""463_transferFrom"" [label=""transferFrom""];
""463_setLock"" [label=""setLock""];
""463_transferOwnership"" [label=""transferOwnership""];
""463_transfer"" [label=""transfer""];
""463_approve"" [label=""approve""];
""463_balanceOf"" [label=""balanceOf""];
""463_allowance"" [label=""allowance""];
""463_constructor"" [label=""constructor""];
""463_transferOwnership"" -> ""463_onlyOwner"";
""463_setLock"" -> ""463_onlyOwner"";
}
"
0x281d30bf8b045e90578895619498ef5d6fd6584c.sol,OracleContractAdapter,contract OracleContractAdapter is Object { event OracleAdded(address _oracle); event OracleRemoved(address _oracle); mapping(address => bool) public oracles; modifier onlyOracle { if (oracles[msg.sender]) { _; },1,"subgraph cluster_502_OracleContractAdapter {
label=""OracleContractAdapter"";
""502__emitOracleAdded"" [label=""_emitOracleAdded""];
""502_addOracles"" [label=""addOracles""];
""502__emitOracleRemoved"" [label=""_emitOracleRemoved""];
""502_removeOracles"" [label=""removeOracles""];
""502_addOracles"" -> ""502__emitOracleAdded"";
""502_addOracles"" -> ""502_onlyContractOwner"";
""502_removeOracles"" -> ""502_onlyContractOwner"";
""502_removeOracles"" -> ""502__emitOracleRemoved"";
}
"
0x4b7ca2ac56e69b9687b94b41b61a57cad3017ee4.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_transfer"" [label=""transfer""];
""396__transfer"" [label=""_transfer""];
""396_transferFrom"" [label=""transferFrom""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_approve"" [label=""approve""];
""396_burnFrom"" [label=""burnFrom""];
""396_burn"" [label=""burn""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_transferFrom"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transfer"" -> ""396__transfer"";
}
"
0x2f50ab197f950e0c2184cf5d804f4141502cd987.sol,LoggedDividend,"contract LoggedDividend is Ownable, LoggedERC20 { struct Dividend { uint256 id; uint256 block; uint256 time; uint256 amount; uint256 claimedAmount; uint256 transferedBack; uint256 totalSupply; uint256 recycleTime; bool recycled; mapping (address => bool) claimed; }",1,"subgraph cluster_980_LoggedDividend {
label=""LoggedDividend"";
""980_refundUnclaimedEthers"" [label=""refundUnclaimedEthers""];
""980_addDividend"" [label=""addDividend""];
""980_claimDividends"" [label=""claimDividends""];
""980_recycleDividend"" [label=""recycleDividend""];
""980_claimDividend"" [label=""claimDividend""];
""980_LoggedDividend"" [label=""LoggedDividend""];
""980_addDividend"" -> ""980_onlyOwner"";
""980_addDividend"" -> ""980_valueAt"";
""980_recycleDividend"" -> ""980_onlyOwner"";
""980_claimDividends"" -> ""980_claimDividend"";
""980_LoggedDividend"" -> ""980_LoggedERC20"";
""980_refundUnclaimedEthers"" -> ""980_onlyOwner"";
""980_claimDividend"" -> ""980_valueAt"";
}
"
0x45ca8d5458d7f3f7d2f47daae253924cafc2f331.sol,EmiratesCoin,"contract EmiratesCoin { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function EmiratesCoin( ) public { totalSupply = 100000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_EmiratesCoin {
label=""EmiratesCoin"";
""355__transfer"" [label=""_transfer""];
""355_burnFrom"" [label=""burnFrom""];
""355_transferFrom"" [label=""transferFrom""];
""355_burn"" [label=""burn""];
""355_transfer"" [label=""transfer""];
""355_approveAndCall"" [label=""approveAndCall""];
""355_approve"" [label=""approve""];
""355_EmiratesCoin"" [label=""EmiratesCoin""];
""355_transferFrom"" -> ""355__transfer"";
""355_approveAndCall"" -> ""355_approve"";
""355_transfer"" -> ""355__transfer"";
}
"
0x6c79b4ed1cfe6ae97e6a8f117138cb583638954f.sol,ERC20Token,"contract ERC20Token { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor ( string _tokenName, string _tokenSymbol, uint8 _decimals, uint256 _totalSupply) public { name = _tokenName; symbol = _tokenSymbol; decimals = _decimals; totalSupply = _totalSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_407_ERC20Token {
label=""ERC20Token"";
""407__transfer"" [label=""_transfer""];
""407_transferFrom"" [label=""transferFrom""];
""407_transfer"" [label=""transfer""];
""407_approveAndCall"" [label=""approveAndCall""];
""407_constructor"" [label=""constructor""];
""407_burnFrom"" [label=""burnFrom""];
""407_approve"" [label=""approve""];
""407_burn"" [label=""burn""];
""407_transfer"" -> ""407__transfer"";
""407_approveAndCall"" -> ""407_approve"";
""407_transferFrom"" -> ""407__transfer"";
}
"
0x346b7ac48f05e505dd7c1c9e861577f7e793cf17.sol,Template,"contract Template is Ownable, SupportsInterfaceWithLookup { bytes4 public constant InterfaceId_Template = 0xd48445ff; mapping(string => string) nameOfLocale; mapping(string => string) descriptionOfLocale; bytes32 public bytecodeHash; uint public price; address public beneficiary; event Instantiated(address indexed creator, address indexed contractAddress); constructor( bytes32 _bytecodeHash, uint _price, address _beneficiary ) public { bytecodeHash = _bytecodeHash; price = _price; beneficiary = _beneficiary; if (price > 0) { require(beneficiary != address(0)); }",1,"subgraph cluster_379_Template {
label=""Template"";
""379_instantiate"" [label=""instantiate""];
""379_setNameAndDescription"" [label=""setNameAndDescription""];
""379_name"" [label=""name""];
""379_description"" [label=""description""];
""379_constructor"" [label=""constructor""];
""379_constructor"" -> ""379__registerInterface"";
""379_setNameAndDescription"" -> ""379_onlyOwner"";
}
"
0x18035ee31125a9934de44b0105cd31691cce95d5.sol,BigBoobsToken,"contract BigBoobsToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BigBoobsToken() public { symbol = ; name = ; decimals = 8; _totalSupply = 5000000000000; balances[0xE3aF42CB6E90B1F1cD5B91a77Ce9f52F6E5A61d5] = _totalSupply; Transfer(address(0), 0xE3aF42CB6E90B1F1cD5B91a77Ce9f52F6E5A61d5, _totalSupply); }",1,"subgraph cluster_543_BigBoobsToken {
label=""BigBoobsToken"";
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_BigBoobsToken"" [label=""BigBoobsToken""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x25b16c95f3ebb1d8583a1c173f81257bc916a9be.sol,SignalsCrowdsale,"contract SignalsCrowdsale is FinalizableCrowdsale { uint256 public constant HARD_CAP = 18000*(10**18); uint256 public toBeRaised = 18000*(10**18); uint256 public constant PRICE = 360000; uint256 public tokensSold; uint256 public constant maxTokens = 185000000*(10**9); uint constant ADVISORY_SHARE = 18500000*(10**9); uint constant BOUNTY_SHARE = 3700000*(10**9); uint constant COMMUNITY_SHARE = 37000000*(10**9); uint constant COMPANY_SHARE = 33300000*(10**9); uint constant PRESALE_SHARE = 7856217611546440; address constant ADVISORS = 0x98280b2FD517a57a0B8B01b674457Eb7C6efa842; address constant BOUNTY = 0x8726D7ac344A0BaBFd16394504e1cb978c70479A; address constant COMMUNITY = 0x90CDbC88aB47c432Bd47185b9B0FDA1600c22102; address constant COMPANY = 0xC010b2f2364372205055a299B28ef934f090FE92; address constant PRESALE = 0x7F3a38fa282B16973feDD1E227210Ec020F2481e; CrowdsaleRegister register; PrivateRegister register2; bool public ready; event SaleWillStart(uint256 time); event SaleReady(); event SaleEnds(uint256 tokensLeft); function SignalsCrowdsale(address _token, address _wallet, address _register, address _register2) public FinalizableCrowdsale() Crowdsale(_token, _wallet) { register = CrowdsaleRegister(_register); register2 = PrivateRegister(_register2); }",1,"subgraph cluster_2803_SignalsCrowdsale {
label=""SignalsCrowdsale"";
""2803_buyTokens"" [label=""buyTokens""];
""2803_validPurchase"" [label=""validPurchase""];
""2803_howMany"" [label=""howMany""];
""2803_SignalsCrowdsale"" [label=""SignalsCrowdsale""];
""2803_initialize"" [label=""initialize""];
""2803_cleanUp"" [label=""cleanUp""];
""2803_endSale"" [label=""endSale""];
""2803_finalization"" [label=""finalization""];
""2803_changeStart"" [label=""changeStart""];
""2803_SignalsCrowdsale"" -> ""2803_Ownable"";
""2803_buyTokens"" -> ""2803_howMany"";
""2803_buyTokens"" -> ""2803_validPurchase"";
""2803_SignalsCrowdsale"" -> ""2803_Crowdsale"";
""2803_endSale"" -> ""2803_onlyOwner"";
""2803_initialize"" -> ""2803_onlyOwner"";
""2803_cleanUp"" -> ""2803_onlyOwner"";
""2803_changeStart"" -> ""2803_onlyOwner"";
""2803_buyTokens"" -> ""2803_forwardFunds"";
}
"
0x8766ac6304e0198c876dd55bf400f3e035431574.sol,KVCoin,contract KVCoin is Ownable{ string public name; string public symbol; uint8 public decimals; uint256 public tokenTotalSupply; function totalSupply() constant returns (uint256 _totalSupply){ return tokenTotalSupply; },1,"subgraph cluster_433_KVCoin {
label=""KVCoin"";
""433_fallback"" [label=""fallback""];
""433_setSaleAgent"" [label=""setSaleAgent""];
""433_totalSupply"" [label=""totalSupply""];
""433_KVCoin"" [label=""KVCoin""];
""433_transfer"" [label=""transfer""];
""433_serviceTransfer"" [label=""serviceTransfer""];
""433_mint"" [label=""mint""];
""433__transfer"" [label=""_transfer""];
""433_transferFrom"" [label=""transferFrom""];
""433_approve"" [label=""approve""];
""433_balanceOf"" [label=""balanceOf""];
""433_allowance"" [label=""allowance""];
""433_burn"" [label=""burn""];
""433_serviceTransfer"" -> ""433__transfer"";
""433_transferFrom"" -> ""433__transfer"";
""433__transfer"" -> ""433_burn"";
""433_mint"" -> ""433_burn"";
""433_transfer"" -> ""433__transfer"";
}
"
0x1e867d04fbb7434093071237813df00b3df6ee77.sol,GridcubePlatformToken,"contract GridcubePlatformToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public _currentSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function GridcubePlatformToken() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 2 weeks; endDate = now + 12 weeks; _totalSupply = 30000000000000000000000000; address OwnerAdd = 0xb917cd85b61813ac1cd29ba0a8c37e0cd9f11162; uint256 CommunityTokens = 10000000000000000000000000; uint256 ProjectTokens = 10000000000000000000000000; uint256 HoldTokens = CommunityTokens + ProjectTokens; uint256 SaleTokens = safeSub(_totalSupply, HoldTokens); balances[OwnerAdd] = HoldTokens; Transfer(address(0), OwnerAdd, HoldTokens); _currentSupply = SaleTokens; }",1,"subgraph cluster_671_GridcubePlatformToken {
label=""GridcubePlatformToken"";
""671_currentSupply"" [label=""currentSupply""];
""671_balanceOf"" [label=""balanceOf""];
""671_fallback"" [label=""fallback""];
""671_transfer"" [label=""transfer""];
""671_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""671_approve"" [label=""approve""];
""671_totalSupply"" [label=""totalSupply""];
""671_allowance"" [label=""allowance""];
""671_GridcubePlatformToken"" [label=""GridcubePlatformToken""];
""671_approveAndCall"" [label=""approveAndCall""];
""671_transferFrom"" [label=""transferFrom""];
""671_transferFrom"" -> ""671_safeAdd"";
""671_fallback"" -> ""671_safeAdd"";
""671_GridcubePlatformToken"" -> ""671_safeSub"";
""671_transfer"" -> ""671_safeAdd"";
""671_fallback"" -> ""671_safeSub"";
""671_transferFrom"" -> ""671_safeSub"";
""671_transferAnyERC20Token"" -> ""671_onlyOwner"";
""671_transfer"" -> ""671_safeSub"";
}
"
0x540cf76f7efaffdeef8eec75b07807353667cef7.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_transferFrom"" [label=""transferFrom""];
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
""256_balanceOf"" [label=""balanceOf""];
}
"
0xb3ed21d5475817134c8f086d46dd1b5f6c49de0a.sol,ZethrDice,contract ZethrDice is ZethrGame { struct Bet { uint56 tokenValue; uint48 blockNumber; uint8 tier; uint8 rollUnder; uint8 numRolls; },1,"subgraph cluster_2512_ZethrDice {
label=""ZethrDice"";
""2512_calculateProfit"" [label=""calculateProfit""];
""2512_constructor"" [label=""constructor""];
""2512_getLastRollOutput"" [label=""getLastRollOutput""];
""2512_getRollResults"" [label=""getRollResults""];
""2512_getBet"" [label=""getBet""];
""2512_finishBetFrom"" [label=""finishBetFrom""];
""2512_getRollOutput"" [label=""getRollOutput""];
""2512_isBetValid"" [label=""isBetValid""];
""2512_execute"" [label=""execute""];
""2512_execute"" -> ""2512_getBet"";
""2512_execute"" -> ""2512_isNotPaused"";
""2512_isBetValid"" -> ""2512_calculateProfit"";
""2512_execute"" -> ""2512_betIsValid"";
""2512_getRollOutput"" -> ""2512_random"";
""2512_finishBetFrom"" -> ""2512_getRollResults"";
""2512_execute"" -> ""2512_finishBetFrom"";
""2512_getRollResults"" -> ""2512_random"";
""2512_getRollOutput"" -> ""2512_calculateProfit"";
""2512_execute"" -> ""2512_bankrollOnly"";
""2512_isBetValid"" -> ""2512_getMaxProfit"";
""2512_getLastRollOutput"" -> ""2512_getBet"";
""2512_constructor"" -> ""2512_constructor"";
""2512_finishBetFrom"" -> ""2512_getBet"";
""2512_getRollResults"" -> ""2512_calculateProfit"";
""2512_getLastRollOutput"" -> ""2512_getRollOutput"";
""2512_execute"" -> ""2512_hasNotBetThisBlock"";
}
"
0xedcbfdf37c11aa36daaa6944386e494ae00e2d42.sol,TokenERC20,"contract TokenERC20 { string public name=; string public symbol=; uint8 public decimals = 18; uint256 public totalSupply=20000000; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_405_TokenERC20 {
label=""TokenERC20"";
""405_burnFrom"" [label=""burnFrom""];
""405_TokenERC20"" [label=""TokenERC20""];
""405_approveAndCall"" [label=""approveAndCall""];
""405__transfer"" [label=""_transfer""];
""405_transferFrom"" [label=""transferFrom""];
""405_burn"" [label=""burn""];
""405_approve"" [label=""approve""];
""405_transfer"" [label=""transfer""];
""405_transferFrom"" -> ""405__transfer"";
""405_transfer"" -> ""405__transfer"";
""405_approveAndCall"" -> ""405_approve"";
}
"
0x1dd72a0d3357901d51e791ba65476e101cb2c6a5.sol,TokenERC20,"contract TokenERC20 is SafeMath{ string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Freeze(address indexed from, uint256 value); event Unfreeze(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { totalSupply = initialSupply * 10 ** uint256(decimalUnits); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; owner = msg.sender; }",1,"subgraph cluster_825_TokenERC20 {
label=""TokenERC20"";
""825_increaseApproval"" [label=""increaseApproval""];
""825_freeze"" [label=""freeze""];
""825_transfer"" [label=""transfer""];
""825_decreaseApproval"" [label=""decreaseApproval""];
""825_burn"" [label=""burn""];
""825_burnFrom"" [label=""burnFrom""];
""825_transferFrom"" [label=""transferFrom""];
""825_unfreeze"" [label=""unfreeze""];
""825_approve"" [label=""approve""];
""825_approveAndCall"" [label=""approveAndCall""];
""825_TokenERC20"" [label=""TokenERC20""];
""825_unfreeze"" -> ""825_safeSub"";
""825_burn"" -> ""825_safeSub"";
""825_freeze"" -> ""825_safeAdd"";
""825_transfer"" -> ""825_safeSub"";
""825_transferFrom"" -> ""825_safeSub"";
""825_burnFrom"" -> ""825_safeSub"";
""825_increaseApproval"" -> ""825_safeAdd"";
""825_transfer"" -> ""825_safeAdd"";
""825_freeze"" -> ""825_safeSub"";
""825_transferFrom"" -> ""825_safeAdd"";
""825_approveAndCall"" -> ""825_approve"";
""825_unfreeze"" -> ""825_safeAdd"";
}
"
0x0d3264ab9ee29bec9534f0f210ca8db3ac4794a8.sol,LeifengMedals,"contract LeifengMedals { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function LeifengMedals( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_LeifengMedals {
label=""LeifengMedals"";
""361_burnFrom"" [label=""burnFrom""];
""361_LeifengMedals"" [label=""LeifengMedals""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x377748ddc51b3075b84500a6ed95d260a102d85f.sol,TuneToken,"contract TuneToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); function TuneToken() public { totalSupply = 3e9 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_258_TuneToken {
label=""TuneToken"";
""258_approve"" [label=""approve""];
""258_TuneToken"" [label=""TuneToken""];
""258__transfer"" [label=""_transfer""];
""258_approveAndCall"" [label=""approveAndCall""];
""258_transfer"" [label=""transfer""];
""258_transferFrom"" [label=""transferFrom""];
""258_approveAndCall"" -> ""258_approve"";
""258_transferFrom"" -> ""258__transfer"";
""258_transfer"" -> ""258__transfer"";
}
"
0x5b463c4e19358b4eaf010cf24244bf140541a63e.sol,TokenERC20,"contract TokenERC20 is owned { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); uint256 public sellPrice; uint256 public buyPrice; uint minBalanceForAccounts; event FrozenFunds(address target, bool frozen); mapping (address => bool) public frozenAccount; function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_606_TokenERC20 {
label=""TokenERC20"";
""606_burn"" [label=""burn""];
""606_setMinBalance"" [label=""setMinBalance""];
""606_freezeAccount"" [label=""freezeAccount""];
""606_setPrices"" [label=""setPrices""];
""606_sell"" [label=""sell""];
""606__transfer"" [label=""_transfer""];
""606_transfer"" [label=""transfer""];
""606_mintToken"" [label=""mintToken""];
""606_burnFrom"" [label=""burnFrom""];
""606_approve"" [label=""approve""];
""606_approveAndCall"" [label=""approveAndCall""];
""606_TokenERC20"" [label=""TokenERC20""];
""606_buy"" [label=""buy""];
""606_transferFrom"" [label=""transferFrom""];
""606_transferFrom"" -> ""606__transfer"";
""606_transfer"" -> ""606__transfer"";
""606_mintToken"" -> ""606_onlyOwner"";
""606_approveAndCall"" -> ""606_approve"";
""606_freezeAccount"" -> ""606_onlyOwner"";
""606_setPrices"" -> ""606_onlyOwner"";
""606_setMinBalance"" -> ""606_onlyOwner"";
}
"
0xea8c9db193996bbc3f6a9afbdbea2b3b62c11253.sol,RAcoinToken,"contract RAcoinToken is Ownable, ERC20Interface { string public constant symbol = ; string public constant name = ; uint private _totalSupply; uint public constant decimals = 18; uint private unmintedTokens = 20000000000*uint(10)**decimals; event Approval(address indexed owner, address indexed spender, uint value); event Transfer(address indexed from, address indexed to, uint value); struct LockupRecord { uint amount; uint unlockTime; }",1,"subgraph cluster_1604_RAcoinToken {
label=""RAcoinToken"";
""1604_clearJackpotParticipants"" [label=""clearJackpotParticipants""];
""1604_transferFromWithCustomReserving"" [label=""transferFromWithCustomReserving""];
""1604_mintTokens"" [label=""mintTokens""];
""1604_transferFromWithReserving"" [label=""transferFromWithReserving""];
""1604_transferFromWithReservingNet"" [label=""transferFromWithReservingNet""];
""1604_addAddressToJackpotParticipants"" [label=""addAddressToJackpotParticipants""];
""1604_transferWithReserving"" [label=""transferWithReserving""];
""1604_unlockSupervisedFunds"" [label=""unlockSupervisedFunds""];
""1604_transferFrom"" [label=""transferFrom""];
""1604_mintTokensWithIncludingInJackpot"" [label=""mintTokensWithIncludingInJackpot""];
""1604_approve"" [label=""approve""];
""1604_transferWithCustomReserving"" [label=""transferWithCustomReserving""];
""1604_allowance"" [label=""allowance""];
""1604_setMinAllowedReservingPercentage"" [label=""setMinAllowedReservingPercentage""];
""1604_transferWithCustomReservingNet"" [label=""transferWithCustomReservingNet""];
""1604_transferMain"" [label=""transferMain""];
""1604_mintLockupTokens"" [label=""mintLockupTokens""];
""1604_unlockFunds"" [label=""unlockFunds""];
""1604_processJackpotDeposit"" [label=""processJackpotDeposit""];
""1604_transfer"" [label=""transfer""];
""1604_setReservingPercentage"" [label=""setReservingPercentage""];
""1604_distributeJackpot"" [label=""distributeJackpot""];
""1604_transferWithReservingNet"" [label=""transferWithReservingNet""];
""1604_stopTokenMinting"" [label=""stopTokenMinting""];
""1604_setMaxAllowedReservingPercentage"" [label=""setMaxAllowedReservingPercentage""];
""1604_balanceOf"" [label=""balanceOf""];
""1604_unlockOwnFunds"" [label=""unlockOwnFunds""];
""1604_distributeTokenSaleJackpot"" [label=""distributeTokenSaleJackpot""];
""1604_totalSupply"" [label=""totalSupply""];
""1604_setPoliticsForJackpotParticipantsList"" [label=""setPoliticsForJackpotParticipantsList""];
""1604_setReservingStep"" [label=""setReservingStep""];
""1604_balanceOfLockup"" [label=""balanceOfLockup""];
""1604_transferFromWithCustomReservingNet"" [label=""transferFromWithCustomReservingNet""];
""1604_mintTokensWithApproval"" [label=""mintTokensWithApproval""];
""1604_setJackpotMinimumAmount"" [label=""setJackpotMinimumAmount""];
""1604_transferWithReservingNet"" -> ""1604_processJackpotDeposit"";
""1604_setPoliticsForJackpotParticipantsList"" -> ""1604_onlyOwner"";
""1604_setReservingPercentage"" -> ""1604_onlyOwner"";
""1604_mintLockupTokens"" -> ""1604_onlyOwner"";
""1604_unlockSupervisedFunds"" -> ""1604_onlyOwner"";
""1604_setReservingStep"" -> ""1604_onlyOwner"";
""1604_transferWithCustomReserving"" -> ""1604_processJackpotDeposit"";
""1604_mintTokensWithIncludingInJackpot"" -> ""1604_addAddressToJackpotParticipants"";
""1604_transferFromWithCustomReservingNet"" -> ""1604_processJackpotDeposit"";
""1604_processJackpotDeposit"" -> ""1604_addAddressToJackpotParticipants"";
""1604_distributeJackpot"" -> ""1604_clearJackpotParticipants"";
""1604_distributeJackpot"" -> ""1604_onlyOwner"";
""1604_stopTokenMinting"" -> ""1604_onlyOwner"";
""1604_transferWithCustomReservingNet"" -> ""1604_processJackpotDeposit"";
""1604_transferFromWithReserving"" -> ""1604_transferFrom"";
""1604_transferWithReservingNet"" -> ""1604_transferMain"";
""1604_distributeTokenSaleJackpot"" -> ""1604_mintTokens"";
""1604_transfer"" -> ""1604_transferMain"";
""1604_mintTokens"" -> ""1604_onlyOwner"";
""1604_clearJackpotParticipants"" -> ""1604_onlyOwner"";
""1604_mintTokensWithIncludingInJackpot"" -> ""1604_mintTokens"";
""1604_transferWithReserving"" -> ""1604_processJackpotDeposit"";
""1604_setMinAllowedReservingPercentage"" -> ""1604_onlyOwner"";
""1604_mintTokensWithApproval"" -> ""1604_onlyOwner"";
""1604_setMaxAllowedReservingPercentage"" -> ""1604_onlyOwner"";
""1604_unlockSupervisedFunds"" -> ""1604_unlockFunds"";
""1604_transferFrom"" -> ""1604_transferMain"";
""1604_transferFromWithCustomReservingNet"" -> ""1604_transferFrom"";
""1604_transferFromWithReserving"" -> ""1604_processJackpotDeposit"";
""1604_transferWithReserving"" -> ""1604_transferMain"";
""1604_transferFromWithReservingNet"" -> ""1604_transferFrom"";
""1604_transferFromWithReservingNet"" -> ""1604_processJackpotDeposit"";
""1604_setJackpotMinimumAmount"" -> ""1604_onlyOwner"";
""1604_transferWithCustomReserving"" -> ""1604_transferMain"";
""1604_transferFromWithCustomReserving"" -> ""1604_processJackpotDeposit"";
""1604_transferWithCustomReservingNet"" -> ""1604_transferMain"";
""1604_mintTokensWithIncludingInJackpot"" -> ""1604_onlyOwner"";
""1604_distributeTokenSaleJackpot"" -> ""1604_distributeJackpot"";
""1604_distributeTokenSaleJackpot"" -> ""1604_onlyOwner"";
""1604_transferFromWithCustomReserving"" -> ""1604_transferFrom"";
""1604_unlockOwnFunds"" -> ""1604_unlockFunds"";
}
"
0x6e14ccec454b12ab03ef1ca2cf0ef67d6bfd8a26.sol,Admin,"contract Admin is Variable, Modifiers, Event { function admin_tokenBurn(uint256 _value) public isOwner returns(bool success) { require(balanceOf[msg.sender] >= _value); balanceOf[msg.sender] -= _value; totalSupply -= _value; emit TokenBurn(msg.sender, _value); return true; }",1,"subgraph cluster_440_Admin {
label=""Admin"";
""440_admin_tokenBurn"" [label=""admin_tokenBurn""];
""440_admin_tokenAdd"" [label=""admin_tokenAdd""];
""440_admin_tokenAdd"" -> ""440_isOwner"";
""440_admin_tokenBurn"" -> ""440_isOwner"";
}
"
0xecff8fc2a19f83fc855618704f38725756dbcae3.sol,OK3D,"contract OK3D is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x5015A6E288FF4AC0c62bf1DA237c24c3Fb849188); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 private rndGap_ = 2 minutes; uint256 constant private rndInit_ = 12 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 24 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(28,10); fees_[1] = F3Ddatasets.TeamFee(36,10); fees_[2] = F3Ddatasets.TeamFee(51,10); fees_[3] = F3Ddatasets.TeamFee(40,10); potSplit_[0] = F3Ddatasets.PotSplit(25,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(20,20); activated_ = true; rID_ = 1; round_[1].strt = now + rndExtra_ - rndGap_; round_[1].end = now + rndInit_ + rndExtra_; }",1,"subgraph cluster_4376_OK3D {
label=""OK3D"";
""4376_iWantXKeys"" [label=""iWantXKeys""];
""4376_withdrawEarnings"" [label=""withdrawEarnings""];
""4376_updateMasks"" [label=""updateMasks""];
""4376_core"" [label=""core""];
""4376_fallback"" [label=""fallback""];
""4376_potSwap"" [label=""potSwap""];
""4376_endTx"" [label=""endTx""];
""4376_registerNameXname"" [label=""registerNameXname""];
""4376_getTimeLeft"" [label=""getTimeLeft""];
""4376_endRound"" [label=""endRound""];
""4376_buyXname"" [label=""buyXname""];
""4376_registerNameXaddr"" [label=""registerNameXaddr""];
""4376_withdraw"" [label=""withdraw""];
""4376_airdrop"" [label=""airdrop""];
""4376_calcKeysReceived"" [label=""calcKeysReceived""];
""4376_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4376_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4376_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4376_buyXaddr"" [label=""buyXaddr""];
""4376_distributeInvest"" [label=""distributeInvest""];
""4376_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4376_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4376_reLoadXid"" [label=""reLoadXid""];
""4376_getBuyPrice"" [label=""getBuyPrice""];
""4376_determinePID"" [label=""determinePID""];
""4376_verifyTeam"" [label=""verifyTeam""];
""4376_distributeExternal"" [label=""distributeExternal""];
""4376_updateGenVault"" [label=""updateGenVault""];
""4376_reLoadXname"" [label=""reLoadXname""];
""4376_getPlayerVaults"" [label=""getPlayerVaults""];
""4376_reLoadCore"" [label=""reLoadCore""];
""4376_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4376_activate"" [label=""activate""];
""4376_constructor"" [label=""constructor""];
""4376_registerNameXID"" [label=""registerNameXID""];
""4376_reLoadXaddr"" [label=""reLoadXaddr""];
""4376_managePlayer"" [label=""managePlayer""];
""4376_updateTimer"" [label=""updateTimer""];
""4376_buyXid"" [label=""buyXid""];
""4376_distributeInternal"" [label=""distributeInternal""];
""4376_buyCore"" [label=""buyCore""];
""4376_getPlayerInfoByAddress"" -> ""4376_calcUnMaskedEarnings"";
""4376_buyCore"" -> ""4376_endRound"";
""4376_buyXid"" -> ""4376_determinePID"";
""4376_reLoadXaddr"" -> ""4376_reLoadCore"";
""4376_getPlayerVaults"" -> ""4376_calcUnMaskedEarnings"";
""4376_withdraw"" -> ""4376_withdrawEarnings"";
""4376_withdraw"" -> ""4376_isHuman"";
""4376_buyCore"" -> ""4376_core"";
""4376_fallback"" -> ""4376_isActivated"";
""4376_buyXname"" -> ""4376_determinePID"";
""4376_registerNameXID"" -> ""4376_isHuman"";
""4376_registerNameXname"" -> ""4376_isHuman"";
""4376_distributeInternal"" -> ""4376_updateMasks"";
""4376_reLoadXname"" -> ""4376_verifyTeam"";
""4376_fallback"" -> ""4376_isHuman"";
""4376_withdraw"" -> ""4376_isActivated"";
""4376_buyXaddr"" -> ""4376_isActivated"";
""4376_reLoadXname"" -> ""4376_isActivated"";
""4376_buyXid"" -> ""4376_isWithinLimits"";
""4376_buyXid"" -> ""4376_buyCore"";
""4376_buyXaddr"" -> ""4376_buyCore"";
""4376_buyXaddr"" -> ""4376_verifyTeam"";
""4376_fallback"" -> ""4376_isWithinLimits"";
""4376_reLoadXid"" -> ""4376_reLoadCore"";
""4376_reLoadCore"" -> ""4376_endRound"";
""4376_buyXname"" -> ""4376_verifyTeam"";
""4376_buyXname"" -> ""4376_buyCore"";
""4376_registerNameXaddr"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_isWithinLimits"";
""4376_core"" -> ""4376_airdrop"";
""4376_withdrawEarnings"" -> ""4376_updateGenVault"";
""4376_buyXname"" -> ""4376_isActivated"";
""4376_reLoadCore"" -> ""4376_withdrawEarnings"";
""4376_withdraw"" -> ""4376_endRound"";
""4376_reLoadXaddr"" -> ""4376_isActivated"";
""4376_buyXname"" -> ""4376_isHuman"";
""4376_buyXaddr"" -> ""4376_determinePID"";
""4376_buyXaddr"" -> ""4376_isWithinLimits"";
""4376_buyXaddr"" -> ""4376_isHuman"";
""4376_managePlayer"" -> ""4376_updateGenVault"";
""4376_reLoadXname"" -> ""4376_isWithinLimits"";
""4376_reLoadXname"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_isHuman"";
""4376_core"" -> ""4376_distributeInternal"";
""4376_fallback"" -> ""4376_determinePID"";
""4376_updateGenVault"" -> ""4376_calcUnMaskedEarnings"";
""4376_buyXid"" -> ""4376_isHuman"";
""4376_fallback"" -> ""4376_buyCore"";
""4376_reLoadXaddr"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_verifyTeam"";
""4376_buyXid"" -> ""4376_isActivated"";
""4376_reLoadCore"" -> ""4376_core"";
""4376_core"" -> ""4376_managePlayer"";
""4376_reLoadXname"" -> ""4376_reLoadCore"";
""4376_core"" -> ""4376_distributeExternal"";
""4376_reLoadXaddr"" -> ""4376_verifyTeam"";
""4376_reLoadXaddr"" -> ""4376_isWithinLimits"";
""4376_buyXid"" -> ""4376_verifyTeam"";
""4376_core"" -> ""4376_endTx"";
""4376_buyXname"" -> ""4376_isWithinLimits"";
""4376_distributeExternal"" -> ""4376_distributeInvest"";
""4376_getPlayerVaults"" -> ""4376_getPlayerVaultsHelper"";
""4376_reLoadXid"" -> ""4376_isActivated"";
""4376_core"" -> ""4376_updateTimer"";
}
"
0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol,x32323,"contract x32323 is owned{ mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; mapping (address => bool) initialized; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Airdrop(address indexed to, uint256 value); function freezeAccount(address target, bool freeze) onlyOwner { frozenAccount[target] = freeze; FrozenFunds(target, freeze); }",1,"subgraph cluster_571_x32323 {
label=""x32323"";
""571_setMinBalance"" [label=""setMinBalance""];
""571_transferFrom"" [label=""transferFrom""];
""571_buy"" [label=""buy""];
""571_reward"" [label=""reward""];
""571_approveAndCall"" [label=""approveAndCall""];
""571_TokenERC20"" [label=""TokenERC20""];
""571_setPrices"" [label=""setPrices""];
""571_sell"" [label=""sell""];
""571_approve"" [label=""approve""];
""571__transfer"" [label=""_transfer""];
""571_freezeAccount"" [label=""freezeAccount""];
""571_initialize"" [label=""initialize""];
""571_transfer"" [label=""transfer""];
""571__transfer"" -> ""571_initialize"";
""571_transferFrom"" -> ""571__transfer"";
""571_approveAndCall"" -> ""571_approve"";
""571_transfer"" -> ""571_sell"";
""571__transfer"" -> ""571_reward"";
""571_freezeAccount"" -> ""571_onlyOwner"";
""571_setMinBalance"" -> ""571_onlyOwner"";
""571_transfer"" -> ""571__transfer"";
""571_setPrices"" -> ""571_onlyOwner"";
}
"
0x6b3f9f54e2a684ea28365af5f3dd6d714df4328b.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_TokenERC20 {
label=""TokenERC20"";
""380_burnFrom"" [label=""burnFrom""];
""380_approve"" [label=""approve""];
""380__transfer"" [label=""_transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_TokenERC20"" [label=""TokenERC20""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_transfer"" [label=""transfer""];
""380_burn"" [label=""burn""];
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0xef4bbb338e2d21ffcbde49ea2b94befe2bba05f1.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { require(balances[msg.sender] >= _value); balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_233_StandardToken {
label=""StandardToken"";
""233_transfer"" [label=""transfer""];
""233_allowance"" [label=""allowance""];
""233_approve"" [label=""approve""];
""233_transferFrom"" [label=""transferFrom""];
""233_balanceOf"" [label=""balanceOf""];
}
"
0x651a824c225e60c1901ec6018a685aa38d82f23c.sol,PimmelToken,"contract PimmelToken { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function PimmelToken() { uint initialSupply = 28000000000000000000000000; balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = ; symbol = ; decimals = 18; }",1,"subgraph cluster_334_PimmelToken {
label=""PimmelToken"";
""334_PimmelToken"" [label=""PimmelToken""];
""334_transferFrom"" [label=""transferFrom""];
""334_transfer"" [label=""transfer""];
""334_burn"" [label=""burn""];
""334_approveAndCall"" [label=""approveAndCall""];
""334_burnFrom"" [label=""burnFrom""];
""334__transfer"" [label=""_transfer""];
""334_approve"" [label=""approve""];
""334_approveAndCall"" -> ""334_approve"";
""334_transfer"" -> ""334__transfer"";
""334_transferFrom"" -> ""334__transfer"";
}
"
0x77e00640a6343152a35542027ba76407bdde0bb6.sol,quiz_please,contract quiz_please { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_116_quiz_please {
label=""quiz_please"";
""116_NewQuestion"" [label=""NewQuestion""];
""116_Try"" [label=""Try""];
""116_start_qz_game"" [label=""start_qz_game""];
""116_newQuestioner"" [label=""newQuestioner""];
""116_fallback"" [label=""fallback""];
""116_NewQuestion"" -> ""116_onlyQuestionSender"";
""116_newQuestioner"" -> ""116_onlyQuestionSender"";
}
"
0x4d50c99294daa84d8de9b2a5b9b6a6d9a8d88aa3.sol,SERBIA_WINS,"contract SERBIA_WINS { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 1174363746596490000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_SERBIA_WINS {
label=""SERBIA_WINS"";
""189_transfer"" [label=""transfer""];
""189_approve"" [label=""approve""];
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x6b193e107a773967bd821bcf8218f3548cfa2503.sol,PossContract,"contract PossContract is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function PossContract() public { symbol = ; name = ; decimals = 18; _totalSupply = 50000000000000000000000000000; balances[0xAbB082211930DA475879BF315AFaDDD55913C6a8] = _totalSupply; Transfer(address(0), 0xAbB082211930DA475879BF315AFaDDD55913C6a8, _totalSupply); }",1,"subgraph cluster_543_PossContract {
label=""PossContract"";
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_PossContract"" [label=""PossContract""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x70673d36178f17ac064747c7bdd026240be194b5.sol,UNIQ,"contract UNIQ { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function UNIQ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_UNIQ {
label=""UNIQ"";
""361_burn"" [label=""burn""];
""361_UNIQ"" [label=""UNIQ""];
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x20d2f8fdd0951f2f5249c86b3cdc2be7656f2c01.sol,MyTokenEVC,"contract MyTokenEVC is owned { string public name; string public symbol; uint8 public decimals = 18; uint256 public _totalSupply; mapping (address => uint256) public _balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function MyTokenEVC() public { _totalSupply = 0 * 10 ** uint256(decimals); _balanceOf[msg.sender] = _totalSupply; name = ; symbol = ; }",1,"subgraph cluster_492_MyTokenEVC {
label=""MyTokenEVC"";
""492_burn"" [label=""burn""];
""492_MyTokenEVC"" [label=""MyTokenEVC""];
""492_transferFrom"" [label=""transferFrom""];
""492_freezeAccount"" [label=""freezeAccount""];
""492_burnFrom"" [label=""burnFrom""];
""492_totalSupply"" [label=""totalSupply""];
""492_decimals"" [label=""decimals""];
""492_balanceOf"" [label=""balanceOf""];
""492_transfer"" [label=""transfer""];
""492_approveAndCall"" [label=""approveAndCall""];
""492_name"" [label=""name""];
""492__transfer"" [label=""_transfer""];
""492_mintToken"" [label=""mintToken""];
""492_approve"" [label=""approve""];
""492_symbol"" [label=""symbol""];
""492_burn"" -> ""492_onlyOwner"";
""492_mintToken"" -> ""492_onlyOwner"";
""492_burnFrom"" -> ""492_onlyOwner"";
""492_transferFrom"" -> ""492__transfer"";
""492_approveAndCall"" -> ""492_approve"";
""492_transfer"" -> ""492__transfer"";
""492_freezeAccount"" -> ""492_onlyOwner"";
}
"
0x8993db1795b9a7b317b98ebfa4c971f225bf1248.sol,ENKToken,"contract ENKToken is IERC20, Ownable, Vestable, HasAddresses, VestingPeriods { using SafeMathLib for uint256; uint256 public constant totalTokenSupply = 1500000000 * 10**18; uint256 public burntTokens; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; mapping (address => uint256) public balances; mapping(address => mapping(address => uint256)) approved; function ENKToken() public { uint256 teamPoolAmount = 420 * 10**6 * 10**18; uint256 advisoryPoolAmount = 19 * 10**5 * 10**18; uint256 companyReserveAmount = 135 * 10**6 * 10**18; uint256 freePoolAmmount = totalTokenSupply - teamPoolAmount - advisoryPoolAmount; balances[teamAddress] = teamPoolAmount; balances[freePoolAddress] = freePoolAmmount; balances[advisoryPoolAddress] = advisoryPoolAmount; balances[companyReserveAddress] = companyReserveAmount; emit Transfer(address(this), teamAddress, teamPoolAmount); emit Transfer(address(this), freePoolAddress, freePoolAmmount); emit Transfer(address(this), advisoryPoolAddress, advisoryPoolAmount); emit Transfer(address(this), companyReserveAddress, companyReserveAmount); addVestingAddress(teamAddress, teamVestingTime); addVestingAddress(advisoryPoolAddress, advisoryPoolVestingTime); addVestingAddress(companyReserveAddress, companyReserveAmountVestingTime); }",1,"subgraph cluster_694_ENKToken {
label=""ENKToken"";
""694__transfer"" [label=""_transfer""];
""694_allowance"" [label=""allowance""];
""694_approve"" [label=""approve""];
""694_balanceOf"" [label=""balanceOf""];
""694_ENKToken"" [label=""ENKToken""];
""694_burn"" [label=""burn""];
""694_transfer"" [label=""transfer""];
""694_totalSupply"" [label=""totalSupply""];
""694_transferFrom"" [label=""transferFrom""];
""694_ENKToken"" -> ""694_addVestingAddress"";
""694_transferFrom"" -> ""694_checkVestingCondition"";
""694_transfer"" -> ""694__transfer"";
""694_approve"" -> ""694_checkVestingCondition"";
""694_transferFrom"" -> ""694__transfer"";
""694_transfer"" -> ""694_checkVestingCondition"";
}
"
0x7125df83a5d3945728036d3c5e48e2c9e38d1607.sol,Smartolution,contract Smartolution { struct User { uint value; uint index; uint atBlock; },1,"subgraph cluster_308_Smartolution {
label=""Smartolution"";
""308_fallback"" [label=""fallback""];
""308_constructor"" [label=""constructor""];
""308_claim"" [label=""claim""];
}
"
0x6cb816569ab4665bdc2ba78a64aff87201608bc6.sol,Bitmos,"contract Bitmos is EIP20Interface { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function Bitmos( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_290_Bitmos {
label=""Bitmos"";
""290_allowance"" [label=""allowance""];
""290_balanceOf"" [label=""balanceOf""];
""290_transferFrom"" [label=""transferFrom""];
""290_transfer"" [label=""transfer""];
""290_approve"" [label=""approve""];
""290_Bitmos"" [label=""Bitmos""];
}
"
0x6abf810730a342add1374e11f3e97500ee774d1f.sol,BCFAuction,contract BCFAuction is Pausable { struct CardAuction { address seller; uint128 startPrice; uint128 endPrice; uint64 duration; uint64 startedAt; },1,"subgraph cluster_1844_BCFAuction {
label=""BCFAuction"";
""1844__bid"" [label=""_bid""];
""1844_cancelAuction"" [label=""cancelAuction""];
""1844__escrow"" [label=""_escrow""];
""1844_calculateCurrentPrice"" [label=""calculateCurrentPrice""];
""1844__transfer"" [label=""_transfer""];
""1844_calculateAuctioneerCut"" [label=""calculateAuctioneerCut""];
""1844_withdrawBalance"" [label=""withdrawBalance""];
""1844_bid"" [label=""bid""];
""1844_isOnAuction"" [label=""isOnAuction""];
""1844_currentPrice"" [label=""currentPrice""];
""1844_createAuction"" [label=""createAuction""];
""1844_getCurrentPrice"" [label=""getCurrentPrice""];
""1844_ownsPlayerCard"" [label=""ownsPlayerCard""];
""1844__addAuction"" [label=""_addAuction""];
""1844__cancelAuction"" [label=""_cancelAuction""];
""1844_getAuction"" [label=""getAuction""];
""1844__removeAuction"" [label=""_removeAuction""];
""1844_BCFAuction"" [label=""BCFAuction""];
""1844_bid"" -> ""1844__bid"";
""1844_createAuction"" -> ""1844__escrow"";
""1844__bid"" -> ""1844_calculateAuctioneerCut"";
""1844_getAuction"" -> ""1844_isOnAuction"";
""1844_getCurrentPrice"" -> ""1844_isOnAuction"";
""1844_bid"" -> ""1844__transfer"";
""1844_getCurrentPrice"" -> ""1844_currentPrice"";
""1844_createAuction"" -> ""1844__addAuction"";
""1844_currentPrice"" -> ""1844_calculateCurrentPrice"";
""1844__bid"" -> ""1844_isOnAuction"";
""1844_bid"" -> ""1844_whenNotPaused"";
""1844__bid"" -> ""1844__removeAuction"";
""1844_cancelAuction"" -> ""1844_isOnAuction"";
""1844__cancelAuction"" -> ""1844__removeAuction"";
""1844_cancelAuction"" -> ""1844__cancelAuction"";
""1844__cancelAuction"" -> ""1844__transfer"";
""1844__bid"" -> ""1844_currentPrice"";
""1844_createAuction"" -> ""1844_whenNotPaused"";
}
"
0x5c8d8245e52f893de53c716c969b1526a0075070.sol,ENXAirDrop,"contract ENXAirDrop is Ownable { function airDrop ( address contractObj, address tokenRepo, address[] airDropDesinationAddress, uint[] amounts) public onlyOwner{ for( uint i = 0 ; i < airDropDesinationAddress.length ; i++ ) { ERC20Interface(contractObj).transferFrom( tokenRepo, airDropDesinationAddress[i],amounts[i]); }",1,"subgraph cluster_101_ENXAirDrop {
label=""ENXAirDrop"";
""101_airDrop"" [label=""airDrop""];
""101_airDrop"" -> ""101_onlyOwner"";
}
"
0x1dc5b8ccbe7a3669ed59dcd3b3d5afa0fed4ee57.sol,ERC23Token,contract ERC23Token is ERC23 { mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; function name() constant returns (string _name) { return name; },1,"subgraph cluster_483_ERC23Token {
label=""ERC23Token"";
""483_symbol"" [label=""symbol""];
""483_balanceOf"" [label=""balanceOf""];
""483_decimals"" [label=""decimals""];
""483_approve"" [label=""approve""];
""483_allowance"" [label=""allowance""];
""483_name"" [label=""name""];
""483_totalSupply"" [label=""totalSupply""];
""483_transferToAddress"" [label=""transferToAddress""];
""483_transfer"" [label=""transfer""];
""483_transferToContract"" [label=""transferToContract""];
""483_isContract"" [label=""isContract""];
""483_transferFrom"" [label=""transferFrom""];
""483_transfer"" -> ""483_isContract"";
""483_transfer"" -> ""483_transferToAddress"";
""483_transfer"" -> ""483_transferToContract"";
}
"
0x17c94b2203cd76d1e28509cece13e35744b9555c.sol,ERC20MIST,"contract ERC20MIST { string public name=; string public symbol=; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ERC20MIST ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 8 ** uint256(decimals); balanceOf[msg.sender] = 2100000000000000; name = tokenName=; symbol = tokenSymbol=; }",1,"subgraph cluster_367_ERC20MIST {
label=""ERC20MIST"";
""367_burn"" [label=""burn""];
""367__transfer"" [label=""_transfer""];
""367_ERC20MIST"" [label=""ERC20MIST""];
""367_approve"" [label=""approve""];
""367_burnFrom"" [label=""burnFrom""];
""367_transferFrom"" [label=""transferFrom""];
""367_approveAndCall"" [label=""approveAndCall""];
""367_transfer"" [label=""transfer""];
""367_transferFrom"" -> ""367__transfer"";
""367_transfer"" -> ""367__transfer"";
""367_approveAndCall"" -> ""367_approve"";
}
"
0x07ce333ec45618d838c32e60cee5cb1ce389e06e.sol,BancorChanger,"contract BancorChanger is ITokenChanger, SmartTokenController, SafeMath { struct Reserve { uint256 virtualBalance; uint8 ratio; bool isVirtualBalanceEnabled; bool isPurchaseEnabled; bool isSet; }",1,"subgraph cluster_1396_BancorChanger {
label=""BancorChanger"";
""1396_updateReserve"" [label=""updateReserve""];
""1396_buy"" [label=""buy""];
""1396_getReturn"" [label=""getReturn""];
""1396_getPurchaseReturn"" [label=""getPurchaseReturn""];
""1396_disableReservePurchases"" [label=""disableReservePurchases""];
""1396_changeableToken"" [label=""changeableToken""];
""1396_changeableTokenCount"" [label=""changeableTokenCount""];
""1396_setFormula"" [label=""setFormula""];
""1396_change"" [label=""change""];
""1396_addReserve"" [label=""addReserve""];
""1396_BancorChanger"" [label=""BancorChanger""];
""1396_getReserveBalance"" [label=""getReserveBalance""];
""1396_reserveTokenCount"" [label=""reserveTokenCount""];
""1396_sell"" [label=""sell""];
""1396_getSaleReturn"" [label=""getSaleReturn""];
""1396_getPurchaseReturn"" -> ""1396_getReserveBalance"";
""1396_getReserveBalance"" -> ""1396_validReserve"";
""1396_setFormula"" -> ""1396_notThis"";
""1396_updateReserve"" -> ""1396_ownerOnly"";
""1396_updateReserve"" -> ""1396_validReserve"";
""1396_sell"" -> ""1396_validAmount"";
""1396_getSaleReturn"" -> ""1396_active"";
""1396_getReturn"" -> ""1396_safeAdd"";
""1396_addReserve"" -> ""1396_ownerOnly"";
""1396_disableReservePurchases"" -> ""1396_ownerOnly"";
""1396_changeableTokenCount"" -> ""1396_reserveTokenCount"";
""1396_updateReserve"" -> ""1396_validReserveRatio"";
""1396_addReserve"" -> ""1396_inactive"";
""1396_BancorChanger"" -> ""1396_validAddress"";
""1396_change"" -> ""1396_sell"";
""1396_getSaleReturn"" -> ""1396_validAmount"";
""1396_addReserve"" -> ""1396_validAddress"";
""1396_buy"" -> ""1396_safeAdd"";
""1396_change"" -> ""1396_validToken"";
""1396_addReserve"" -> ""1396_validReserveRatio"";
""1396_buy"" -> ""1396_getPurchaseReturn"";
""1396_getPurchaseReturn"" -> ""1396_active"";
""1396_sell"" -> ""1396_getSaleReturn"";
""1396_change"" -> ""1396_buy"";
""1396_buy"" -> ""1396_validAmount"";
""1396_addReserve"" -> ""1396_notThis"";
""1396_BancorChanger"" -> ""1396_addReserve"";
""1396_getSaleReturn"" -> ""1396_getReserveBalance"";
""1396_getPurchaseReturn"" -> ""1396_validReserve"";
""1396_getReturn"" -> ""1396_validToken"";
""1396_sell"" -> ""1396_getReserveBalance"";
""1396_disableReservePurchases"" -> ""1396_validReserve"";
""1396_setFormula"" -> ""1396_ownerOnly"";
""1396_BancorChanger"" -> ""1396_SmartTokenController"";
""1396_sell"" -> ""1396_safeSub"";
""1396_setFormula"" -> ""1396_validAddress"";
""1396_getReturn"" -> ""1396_getPurchaseReturn"";
""1396_getReturn"" -> ""1396_getSaleReturn"";
""1396_getSaleReturn"" -> ""1396_getSaleReturn"";
""1396_getSaleReturn"" -> ""1396_validReserve"";
}
"
0x022882d9fcf023e57926e4e01d1b137aabd93416.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_210_StandardToken {
label=""StandardToken"";
""210_transferFrom"" [label=""transferFrom""];
""210_approve"" [label=""approve""];
""210_balanceOf"" [label=""balanceOf""];
""210_transfer"" [label=""transfer""];
""210_allowance"" [label=""allowance""];
}
"
0xd07d571e0a45306350c005f5ed858783ae725d71.sol,Members,contract Members is Owned { address public coin; MemberStatus[] public status; mapping(address => History) public tradingHistory; struct MemberStatus { string name; uint256 times; uint256 sum; int8 rate; },1,"subgraph cluster_274_Members {
label=""Members"";
""274_editStatus"" [label=""editStatus""];
""274_getCashbackRate"" [label=""getCashbackRate""];
""274_pushStatus"" [label=""pushStatus""];
""274_setCoin"" [label=""setCoin""];
""274_updateHistory"" [label=""updateHistory""];
""274_editStatus"" -> ""274_onlyOwner"";
""274_pushStatus"" -> ""274_onlyOwner"";
""274_updateHistory"" -> ""274_onlyCoin"";
""274_setCoin"" -> ""274_onlyOwner"";
}
"
0xeaaa3585ffdcc973a22929d09179dc06d517b84d.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function TokenERC20(uint256 _initialSupply, string _tokenName, string _tokenSymbol) internal { totalSupply = _initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = _tokenName; symbol = _tokenSymbol; }",1,"subgraph cluster_292_TokenERC20 {
label=""TokenERC20"";
""292_approve"" [label=""approve""];
""292_transferFrom"" [label=""transferFrom""];
""292_TokenERC20"" [label=""TokenERC20""];
""292_transfer"" [label=""transfer""];
""292_approveAndCall"" [label=""approveAndCall""];
""292__transfer"" [label=""_transfer""];
""292_transferFrom"" -> ""292__transfer"";
""292_approveAndCall"" -> ""292_approve"";
""292_transfer"" -> ""292__transfer"";
}
"
0xbd35aefa375b57a801ddc87615aef1e9f353df28.sol,ToTheMoon,"contract ToTheMoon { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000000 * 10 ** 18; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ToTheMoon( ) public { totalSupply = 1000000000 * 10 ** 18; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_360_ToTheMoon {
label=""ToTheMoon"";
""360_transfer"" [label=""transfer""];
""360_transferFrom"" [label=""transferFrom""];
""360_approveAndCall"" [label=""approveAndCall""];
""360__transfer"" [label=""_transfer""];
""360_ToTheMoon"" [label=""ToTheMoon""];
""360_approve"" [label=""approve""];
""360_burnFrom"" [label=""burnFrom""];
""360_burn"" [label=""burn""];
""360_transfer"" -> ""360__transfer"";
""360_transferFrom"" -> ""360__transfer"";
""360_approveAndCall"" -> ""360_approve"";
}
"
0x508404d6f5342b4a11a08e8be3f9bb2ddbdc189f.sol,EtherItem23,"contract EtherItem23 is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; mapping (uint256 => address) public item23IndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public item23IndexToApproved; mapping (uint256 => uint256) private item23IndexToPrice; mapping (uint256 => uint256) private item23IndexToPreviousPrice; mapping (uint256 => address[5]) private item23IndexToPreviousOwners; address public ceoAddress; address public cooAddress; struct Item23 { string name; }",1,"subgraph cluster_1287_EtherItem23 {
label=""EtherItem23"";
""1287_createContractItem23"" [label=""createContractItem23""];
""1287__transfer"" [label=""_transfer""];
""1287_totalSupply"" [label=""totalSupply""];
""1287_priceOf"" [label=""priceOf""];
""1287_name"" [label=""name""];
""1287_balanceOf"" [label=""balanceOf""];
""1287_symbol"" [label=""symbol""];
""1287_stringToUint"" [label=""stringToUint""];
""1287_implementsERC721"" [label=""implementsERC721""];
""1287_payout"" [label=""payout""];
""1287_takeOwnership"" [label=""takeOwnership""];
""1287_ownerOf"" [label=""ownerOf""];
""1287_approve"" [label=""approve""];
""1287_setCOO"" [label=""setCOO""];
""1287_EtherItem23"" [label=""EtherItem23""];
""1287__payout"" [label=""_payout""];
""1287_getItem23"" [label=""getItem23""];
""1287_purchase"" [label=""purchase""];
""1287__addressNotNull"" [label=""_addressNotNull""];
""1287_transfer"" [label=""transfer""];
""1287__createItem23"" [label=""_createItem23""];
""1287_setCEO"" [label=""setCEO""];
""1287__approved"" [label=""_approved""];
""1287_transferFrom"" [label=""transferFrom""];
""1287__owns"" [label=""_owns""];
""1287_tokensOfOwner"" [label=""tokensOfOwner""];
""1287_createContractItem23"" -> ""1287__createItem23"";
""1287_payout"" -> ""1287_onlyCLevel"";
""1287_purchase"" -> ""1287__addressNotNull"";
""1287_createContractItem23"" -> ""1287_onlyCOO"";
""1287_createContractItem23"" -> ""1287_stringToUint"";
""1287__createItem23"" -> ""1287__transfer"";
""1287_transferFrom"" -> ""1287__addressNotNull"";
""1287_transferFrom"" -> ""1287__approved"";
""1287_transfer"" -> ""1287__addressNotNull"";
""1287_approve"" -> ""1287__owns"";
""1287_transferFrom"" -> ""1287__transfer"";
""1287_tokensOfOwner"" -> ""1287_totalSupply"";
""1287_setCEO"" -> ""1287_onlyCEO"";
""1287_purchase"" -> ""1287__transfer"";
""1287_tokensOfOwner"" -> ""1287_balanceOf"";
""1287_takeOwnership"" -> ""1287__transfer"";
""1287_payout"" -> ""1287__payout"";
""1287_setCOO"" -> ""1287_onlyCEO"";
""1287_transferFrom"" -> ""1287__owns"";
""1287_takeOwnership"" -> ""1287__addressNotNull"";
""1287_transfer"" -> ""1287__transfer"";
""1287_transfer"" -> ""1287__owns"";
""1287_takeOwnership"" -> ""1287__approved"";
}
"
0x1c5f43710a1776b0ea7191b7ead75d4b98d69858.sol,PskERC20,"contract PskERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public lockedUntil; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function PskERC20() public { uint256 initialSupply = 68072143; totalSupply = initialSupply * 10 ** uint256(decimals); name = ; symbol = ; balanceOf[address(this)] = totalSupply; emit Transfer(address(this), address(this), totalSupply); _transfer(address(this),0x8b89dc977c1D4e1B78803342487dEcee0a2Ba02c,378000000000000000000000); _transfer(address(this),0xC19c9dd81D4b8B3FaDE83eEF6f2863Ac9B76B7FB,34912500000000000000000); _transfer(address(this),0x5Ea29C0a72Ab68bE62c7942d5b3aD69d4f29d4dA,1640625000000000000000000); _transfer(address(this),0x14a926e168278cC0c00286837de51e29F814b8D3,12250000000000000000000); _transfer(address(this),0xD46d9fE2d8f991913Bd4f77536abBa4598EA29A9,131250000000000000000000); _transfer(address(this),0x0019312D39a13302Fbacedf995f702F6e071D9e8,175000000000000000000000); _transfer(address(this),0x0FBd0E32aFE5082FED52837d96df7E34a9252bC3,8750000000000000000000); _transfer(address(this),0x10E6a8f9Dbe3A6BF4aB8D07233A45125Fb411eF1,5250000000000000000000); _transfer(address(this),0x93ED3C6a78724308095C34eFD0dcdA693f515BE7,1750000000000000000000); _transfer(address(this),0xd113f63Fec7F296FFE838939Bfd3775339d79e44,3500000000000000000000); _transfer(address(this),0x83aCbBE5f22841799647De7c4aC9f0fa61691975,87500000000000000000000); _transfer(address(this),0xEfFefF8De1C5f15FE6545a32C1Aaa372c6023d77,1750000000000000000000); _transfer(address(this),0xEfFefF8De1C5f15FE6545a32C1Aaa372c6023d77,1750000000000000000000); _transfer(address(this),0xEfFefF8De1C5f15FE6545a32C1Aaa372c6023d77,49000000000000000000000); _transfer(address(this),0x5239249C90D0c31C9F2A861af4da7E3393399Cb9,8750000000000000000000); _transfer(address(this),0x9b818b7B401908671CbE2bf677F7F3361653Fdb5,28526399998250000000000); _transfer(address(this),0x55A0B2b1A705dD09F15e7120cC0c39ACb9Ea7978,35000000000000000000000); _transfer(address(this),0x8a501A75eE3d0C808b39dd2bc2760289F9785500,3500000000000000000000); _transfer(address(this),0x752452F7759E58C50A7817F616B5317275924F78,272144811750000000000); _transfer(address(this),0x639631fc10eA37DF5540E3A6FAf1Bd12Ab02A02c,28000000000000000000000); _transfer(address(this),0x8A0Dea5F511b21a58aC9b2E348eB80E19B7126ab,98000000000000000000000); _transfer(address(this),0x231A9614c5726df24BB385F4A1720d6408302fde,42000000000000000000000); _transfer(address(this),0xCE2daE844a2f473Cb10e72eA5B5cd82ce1C86c76,207900000000000000000); _transfer(address(this),0x9829D08FE48a402fF1A3e9faD0407023ffd947e7,1890000000000000000000); _transfer(address(this),0xd495826cABB093e7dCA498D1a98e4dc55e0C29Db,5670000000000000000000); _transfer(address(this),0x7C31755f9374c238248aD19EABf648c79FF3A5eD,945000000000000000000); _transfer(address(this),0x9Ce1B1B62344ADdca64Aac6338da369f395367DE,5670000000000000000000); _transfer(address(this),0x81a1Ff97AE6DB89f5FD1B0Fb559Bd7C61e4BA960,189000000000000000000); _transfer(address(this),0xd4E6c27B8e5805318295f3586F59c34B60495992,1890000000000000000000); _transfer(address(this),0xc458F28FC72bA8dFEE6021763eCAAF21033839e8,3780000000000000000000); _transfer(address(this),0x2188f6212CE37dCbfeC7e0167D68d9e5E5F07e3a,1890000000000000000000); _transfer(address(this),0xd1EfE47c8610678DE2192F03B8dA49b25Be746fb,5670000000000000000000); _transfer(address(this),0x7967149ed2FBaA14D1E74D26505573C803c0D698,473185571040000000000); _transfer(address(this),0x7967149ed2FBaA14D1E74D26505573C803c0D698,463050000000000000000); _transfer(address(this),0x5BFd06c00CCf7c25984D1Fb4D153Abfdb999984c,189000000000000000000); _transfer(address(this),0xAAA0779B11BC0b03f00F82427f4C14F9C2dBB6aB,2835000000000000000000); _transfer(address(this),0x4DE5BA1869Dfd12eE429eE227EAEa33b295AE7C9,378000000000000000000); _transfer(address(this),0xA4C8ed0dB08a9EfCc502f390E5E75c51851B870A,623700000000000000000); _transfer(address(this),0xbA6F61ca597510E8dc86c7f3e4fe1d251e8C5B89,642600000000000000000); _transfer(address(this),0x1a08bac3FA02C1aC7e12F8b961e3B2ed6CE31E00,18879909300000000000000); _transfer(address(this),0x4745b5130aC32Ed0c541442440C37284d475a166,2627100000000000000000); _transfer(address(this),0xd00266409A2fd099FEcbFd0340F7A965CeeceCF2,378000000000000000000); _transfer(address(this),0x26C0E0772EA9ABd416667ee5FFf978cb1F54720A,1890000000000000000000); _transfer(address(this),0x2874E22Bb3a2E378cabaa1058Aa09a23087829d0,283500000000000000000); _transfer(address(this),0x19682FE3B7BB4D0Baba4c53fa1C697c9Ba2Fce02,75600000000000000000000); _transfer(address(this),0xA4C8ed0dB08a9EfCc502f390E5E75c51851B870A,1341900000000000000000); _transfer(address(this),0x9ED09BD3c7BB325cCb84D793Ad9ce42a068D7Ef1,3780000000000000000000); _transfer(address(this),0x0b72805FFa5CB6E1187223e8EEF97dA6a6a0950c,5670000000000000000000); _transfer(address(this),0xe19938a75140d8e16aF4bf5F08D97B4cd8C62317,3780000000000000000000); _transfer(address(this),0xEf4a2C6b92024E359e107Aa6Acd17F6391855B5a,618030000000000000000); _transfer(address(this),0x7967149ed2FBaA14D1E74D26505573C803c0D698,563846285520000000000); _transfer(address(this),0x446471EAc3Ac288b9bECb3ca814daefEB867Bbc8,472500000000000000000); _transfer(address(this),0xd89F659402245781daC5c11CBaBB86B79484E696,94500000000000000000000); _transfer(address(this),0x8252e834763933124f80177b08e6F60A90DA0919,1890000000000000000000); _transfer(address(this),0xD996263209B2dfbA4Bbba5D7F37705DdE265116E,2800000000000000000000); _transfer(address(this),0x664f129b55a6948900577bad77D9b6a792b50743,140000000000000000000); _transfer(address(this),0x8166AD8690A3E7BFb2D6B45006eBB5d111628a59,663452885200000000000); _transfer(address(this),0x4997DF0Ef9f05A5c136f991b5ee088BBF5526f42,423906000000000000000); _transfer(address(this),0xA823648A8251B44b09873723A32831f2f206acD5,554483286000000000000); _transfer(address(this),0x7CDE9cD90afaEc5a40480DDA05C8Cf4ec39cF643,140000000000000000000); _transfer(address(this),0x0f929995C0c8a00E212dF802f57b5f63D7640FE7,8400000000000000000000); _transfer(address(this),0x1e7D081e2Bf261F99918d02366ed8F3B524e39EC,840000000000000000000); _transfer(address(this),0x0354dEd5058c5AB4aa42F8260c2Cc08904e7eE09,329000000000000000000); _transfer(address(this),0x73b3166784F4C878E6eea15665F6F35651141984,294000000000000000000); _transfer(address(this),0x6133c06Be78f1D2AB67b4cd8f854C90167dBd066,680000000000000000000000); _transfer(address(this),0xFf342491cC946B8Cd9d7B48484306a0C18B814Dd,416666666666667000000000); _transfer(address(this),0x4fd60c47bf9437954557d0Ec46C68B63858B2862,3900000000000000000000); _transfer(address(this),0xD384C81eFEF96CB32Ae8Ad52cC85630eABC75E26,3024002711476670000000000); _transfer(address(this),0x820baEBb0f077C746DaF57af4DCD38bEACeE22ed,100000000000000000000); _transfer(address(this),0x13A7b665c91259873dFF9D685811Bc916b5E403c,100000000000000000000); _transfer(address(this),0xBa122378B1b5A5D73B2778Aa6C724c4D43ebf966,100000000000000000000); _transfer(address(this),0xd495826cABB093e7dCA498D1a98e4dc55e0C29Db,100000000000000000000); _transfer(address(this),0x3dC21E7Eca79C7b9890dF4AFbe2E0ba2f17512C3,100000000000000000000); _transfer(address(this),0xA823648A8251B44b09873723A32831f2f206acD5,100000000000000000000); _transfer(address(this),0x68b1951F36e77324924170cAE9Ca2aa03dc1e0AC,100000000000000000000); _transfer(address(this),0x1CE853FC613D900FD9eB004d2D7837E97D40a23C,100000000000000000000); _transfer(address(this),0x0AeEe2337F2Cc88AB7cadc619205b22C7Ee2f05A,100000000000000000000); _transfer(address(this),0x4C844FEf1014bE0862167925842c4835354Dc4B6,100000000000000000000); _transfer(address(this),0x24f56B8e6b0bc478c00a8055600BA076777c5cFa,100000000000000000000); _transfer(address(this),0xDe29bB2E66F1731B187919bB34f4Dd793CebbE86,100000000000000000000); _transfer(address(this),0xE792690B3783c08823049b1DCe5CC916001e92Cd,340000000000000000000000); _transfer(address(this),0x08a62f6DFd9f4334478B5CC038d0584fEACe9ac8,340000000000000000000000); _transfer(address(this),0xd987728d110e0A270dc4B6E75e558E0F29E0c2c7,340000000000000000000000); _transfer(address(this),0x25A8178d085a600Eb535e51D3bCD4Fea773E81e4,650000000000000000000000); _transfer(address(this),0xE9cB39c9AfCf84C73FB3e8E8a3353d0bfD2Baa0F,750000000000000000000000); _transfer(address(this),0xa537E2887B9887Cb72bDd381C9E21DA4856bb60d,382000000000000000000000); _transfer(address(this),0x1d4Aa2b232Af68599864efE1C0Fbf4F4b5E6112c,510500000000000000000000); _transfer(address(this),0xCbEde66A699C3a5efF63c5E234D7b8149f353c4E,397500000000000000000000); _transfer(address(this),0xf2944172b735609b2EcEeadb00179AC88f6aA431,630000000000000000000000); _transfer(address(this),0x3e6330A1a05a170b16Dabfb2ECe7E44453CD5A36,2333333333333320000000000); _transfer(address(this),0x21028AAeb61f39c68380928e7d6297C47d09CdD9,3466666666666660000000000); _transfer(address(this),0x98Dc9E2b1AA2A29D71eec988e45022Ad774f6bF6,2000000000000000000000000); _transfer(address(this),0xdc3603FB59BDb00A527c9D8143Cda58d3A1Ade8d,1866666666666670000000000); _transfer(address(this),0xE85D25FA06b045396C2Ce811F461d3e408DcD267,2666666666666660000000000); _transfer(address(this),0x79A69503eC313cAf56A83Ff05A9C5a7798504eD4,1000000000000000000000000); _transfer(address(this),0x0B4Db8D4e13EeB6aac5D2e7fB770Ac118bDE8dc6,1666666666666670000000000); _transfer(address(this),0xD6d957139941af45B452b69783A19C77a6883ea8,1733333333333330000000000); _transfer(address(this),0x237Abf82405C542A803642DbbbFA9639Df9cA33D,2933333333333320000000000); _transfer(address(this),0x78961633419f69032D874c27D1d789E243c2B8Ed,333333333333332000000000); _transfer(address(this),0xB62FD8775e4938A352cb20E632654CC2f5e76829,564202334630000000000); _transfer(address(this),0x1449dEb2db6dFD95299776E3F77aCe0ffFFD0198,225225225230000000000); _transfer(address(this),0xa77694c0C0d0e81Ca1a21c8A6498bb2c0A1329f2,1922178988330000000000); _transfer(address(this),0xD996263209B2dfbA4Bbba5D7F37705DdE265116E,10000000000000000000000); _transfer(address(this),0xa854fF673bf41Cf79c2E4C799Af94d5f275D8D5e,333333333330000000000); _transfer(address(this),0x3353bfCA0DF0C585E94b2eE2338572f46c8986Dd,1000000000000000000000); _transfer(address(this),0x72417A054Efa81d50252cC5ceCc58716cdD99Ac7,149880000000000000000000); _transfer(address(this),0xB16e325f3458d8A6658b5f69e7986686428Ecf58,1426866000000000000000000); _transfer(address(this),0xd1eFcC88EFBEAe11FF3F2dF5A49B24D519cdBbf2,857144000000000000000000); _transfer(address(this),0x6517f439AD90ecAc307EC543404D998C0Ec965B6,2000000000000000000000000); _transfer(address(this),0x87a4E93f1acCf6dcf536107d9786d3b344D2ec05,1666667000000000000000000); _transfer(address(this),0xbDba9C3E780FB6AF27FD964e2c861b35deE0c318,3000000000000000000000000); _transfer(address(this),0xaBeEa80693B860ae2C47F824A8fDAD402AEbE100,2500000000000000000000000); _transfer(address(this),0xB83dB1E8E14A7A40BB62F2A8EBce5BBD07EA3F62,1666666666666660000000000); _transfer(address(this),0x51f96736Bbc6348cbF33A224C3Cc5231A87a1e43,2000000000000000000000000); _transfer(address(this),0x2FBE4cdb2f46dc12d86A1289323a7D0545Fe2b5e,5000000000000000000000000); _transfer(address(this),0xF062193f4f34Ac4A13BAdd1bB8e7E4132637C1E7,3500000907170760000000000); _transfer(address(this),0x4ed9001076B69e19b397aC719D235F4f0786D7C5,4079000000000000000000000); _transfer(address(this),0x7A52a16f34576CBc028c1840825cDa9323DA4890,2268334000000000000000000); _transfer(address(this),0x5AA37C6176b6E0612151BE56A8a0372C9DB7DE90,2268334000000000000000000); _transfer(address(this),0x7518d5cB06891C62621871b1aC3bdE500BD533a0,2268334000000000000000000); _transfer(address(this),0xA3f3f84844A67c618DE06441d2970321e70bdCe7,700000000000000000000000); _transfer(address(this),0xBEc13832bb518629501fe7d07caAB099E85e1c50,700000000000000000000000); _transfer(address(this),0xF6F209C6C031b1560D073d5E82b380C40cD02469,300000000000000000000000); _transfer(address(this),0xf0586C3e0CAe135E90dDe857b5f53C8B29Ebc77c,55500000000000000000000); _transfer(address(this),0x9b818b7B401908671CbE2bf677F7F3361653Fdb5,35000000000000000000000); _transfer(address(this),0xd5C56952e1Aad42f20075666b123F42334969297,30000000000000000000000); _transfer(address(this),0xB6ceCEAbfBd07ac0440972C0c0c4129249de29Da,45000000000000000000000); _transfer(address(this),0x0eaa51bef06694e1e0C99f413dcd7d3beE110Fb9,40000000000000000000000); lockedUntil[0xD384C81eFEF96CB32Ae8Ad52cC85630eABC75E26]=1554508800; lockedUntil[0xE792690B3783c08823049b1DCe5CC916001e92Cd]=1570320000; lockedUntil[0x08a62f6DFd9f4334478B5CC038d0584fEACe9ac8]=1570320000; lockedUntil[0xd987728d110e0A270dc4B6E75e558E0F29E0c2c7]=1570320000; lockedUntil[0x25A8178d085a600Eb535e51D3bCD4Fea773E81e4]=1554508800; lockedUntil[0xE9cB39c9AfCf84C73FB3e8E8a3353d0bfD2Baa0F]=1554508800; lockedUntil[0x1d4Aa2b232Af68599864efE1C0Fbf4F4b5E6112c]=1554508800; lockedUntil[0xCbEde66A699C3a5efF63c5E234D7b8149f353c4E]=1570320000; lockedUntil[0xf2944172b735609b2EcEeadb00179AC88f6aA431]=1554508800; lockedUntil[0x2FBE4cdb2f46dc12d86A1289323a7D0545Fe2b5e]=1554508800; lockedUntil[0x7A52a16f34576CBc028c1840825cDa9323DA4890]=1601942400; lockedUntil[0x5AA37C6176b6E0612151BE56A8a0372C9DB7DE90]=1601942400; lockedUntil[0x7518d5cB06891C62621871b1aC3bdE500BD533a0]=1601942400; lockedUntil[0xA3f3f84844A67c618DE06441d2970321e70bdCe7]=1554508800; lockedUntil[0xBEc13832bb518629501fe7d07caAB099E85e1c50]=1554508800; lockedUntil[0xF6F209C6C031b1560D073d5E82b380C40cD02469]=1570320000; lockedUntil[0xf0586C3e0CAe135E90dDe857b5f53C8B29Ebc77c]=1570320000; lockedUntil[0x9b818b7B401908671CbE2bf677F7F3361653Fdb5]=1554508800; lockedUntil[0xd5C56952e1Aad42f20075666b123F42334969297]=1554508800; lockedUntil[0xB6ceCEAbfBd07ac0440972C0c0c4129249de29Da]=1554508800; lockedUntil[0x0eaa51bef06694e1e0C99f413dcd7d3beE110Fb9]=1554508800; }",1,"subgraph cluster_1565_PskERC20 {
label=""PskERC20"";
""1565_transferFrom"" [label=""transferFrom""];
""1565_burn"" [label=""burn""];
""1565_approveAndCall"" [label=""approveAndCall""];
""1565_burnFrom"" [label=""burnFrom""];
""1565_PskERC20"" [label=""PskERC20""];
""1565_approve"" [label=""approve""];
""1565__transfer"" [label=""_transfer""];
""1565_transfer"" [label=""transfer""];
""1565_approveAndCall"" -> ""1565_approve"";
""1565_transferFrom"" -> ""1565__transfer"";
""1565_transfer"" -> ""1565__transfer"";
""1565_PskERC20"" -> ""1565__transfer"";
}
"
0xc3c412b97dc3355f1bd060223e75fb047c869197.sol,HngCoin,"contract HngCoin { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; uint256 public coinunits; uint256 public ethereumWei; address public tokensWallet; address public owner; address public salesaccount; uint256 public sellPrice; uint256 public buyPrice; bool public isActive; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HngCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; coinunits = 100; tokensWallet = msg.sender; salesaccount = msg.sender; ethereumWei = 1000000000000000000; isActive = true; owner = msg.sender; }",1,"subgraph cluster_810_HngCoinSale {
label=""HngCoinSale"";
""810_multiply"" [label=""multiply""];
""810_setPrices"" [label=""setPrices""];
""810_mintToken"" [label=""mintToken""];
""810_freezeAccount"" [label=""freezeAccount""];
""810__transfer"" [label=""_transfer""];
""810_HngCoinSale"" [label=""HngCoinSale""];
""810_freezeAccount"" -> ""810_onlyOwner"";
""810_setPrices"" -> ""810_onlyOwner"";
""810_mintToken"" -> ""810_onlyOwner"";
""810_HngCoinSale"" -> ""810_HngCoin"";
}
"
0xe3d424dffecc3759fcc997f5eba2a01a58585405.sol,ERC20Standard,contract ERC20Standard { uint256 public totalSupply; bool public mintable; string public name; uint256 public decimals; string public symbol; address public owner; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; function ERC20Standard() public { decimals = 18; symbol = ; name = ; mintable = true; owner = msg.sender; totalSupply = 300000000 * (10 ** decimals); balances[msg.sender] = totalSupply; },1,"subgraph cluster_283_ERC20Standard {
label=""ERC20Standard"";
""283_balanceOf"" [label=""balanceOf""];
""283_ERC20Standard"" [label=""ERC20Standard""];
""283_transfer"" [label=""transfer""];
""283_mint"" [label=""mint""];
""283_transferFrom"" [label=""transferFrom""];
""283_allowance"" [label=""allowance""];
""283_approve"" [label=""approve""];
""283_transfer"" -> ""283_onlyPayloadSize"";
}
"
0x1fd1f34a7476fa7d7b2187c8bd255e39e78271e6.sol,PAXPAGO,"contract PAXPAGO is TokenERC20 { mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_584_PAXPAGO {
label=""PAXPAGO"";
""584__transfer"" [label=""_transfer""];
""584_constructor"" [label=""constructor""];
""584_mintToken"" [label=""mintToken""];
""584_freezeAccount"" [label=""freezeAccount""];
""584_freezeAccount"" -> ""584_onlyOwner"";
""584_mintToken"" -> ""584_onlyOwner"";
""584_constructor"" -> ""584_constructor"";
}
"
0x35fd00d47202b1b2158dba75e7cc8f71b068c256.sol,WhiteList,"contract WhiteList is Ownable { mapping(address => bool) public whiteList; uint public totalWhiteListed; event LogWhiteListed(address indexed user, uint whiteListedNum); event LogWhiteListedMultiple(uint whiteListedNum); event LogRemoveWhiteListed(address indexed user); function isWhiteListed(address _user) external view returns (bool) { return whiteList[_user]; }",1,"subgraph cluster_406_WhiteList {
label=""WhiteList"";
""406_isWhiteListed"" [label=""isWhiteListed""];
""406_removeFromWhiteList"" [label=""removeFromWhiteList""];
""406_addToWhiteListMultiple"" [label=""addToWhiteListMultiple""];
""406_addToWhiteList"" [label=""addToWhiteList""];
""406_addToWhiteListMultiple"" -> ""406_onlyOwner"";
""406_removeFromWhiteList"" -> ""406_onlyOwner"";
""406_addToWhiteList"" -> ""406_onlyOwner"";
}
"
0xc094367b4c79564b6c8b4218f84dea835b2c2dd0.sol,TikiMadness,contract TikiMadness { modifier onlyOwner() { require(msg.sender == contractOwner); _; },1,"subgraph cluster_909_TikiMadness {
label=""TikiMadness"";
""909_paused"" [label=""paused""];
""909_balanceOf"" [label=""balanceOf""];
""909_godTiki"" [label=""godTiki""];
""909__addressNotNull"" [label=""_addressNotNull""];
""909_ownerOf"" [label=""ownerOf""];
""909__owns"" [label=""_owns""];
""909__transfer"" [label=""_transfer""];
""909_constructor"" [label=""constructor""];
""909_collectBagHolderFund"" [label=""collectBagHolderFund""];
""909_max"" [label=""max""];
""909_purchase"" [label=""purchase""];
""909_priceOf"" [label=""priceOf""];
""909_collectDevFees"" [label=""collectDevFees""];
""909_getTiki"" [label=""getTiki""];
""909_purchase"" -> ""909__transfer"";
""909_purchase"" -> ""909_notContract"";
""909_purchase"" -> ""909_ownerOf"";
""909_collectBagHolderFund"" -> ""909_notPaused"";
""909_getTiki"" -> ""909_priceOf"";
""909_purchase"" -> ""909__addressNotNull"";
""909_purchase"" -> ""909_notPaused"";
""909_constructor"" -> ""909__transfer"";
""909_collectBagHolderFund"" -> ""909_getTiki"";
""909_purchase"" -> ""909_easyOnGas"";
""909_purchase"" -> ""909_max"";
""909_godTiki"" -> ""909_priceOf"";
""909_purchase"" -> ""909_priceOf"";
""909_collectDevFees"" -> ""909_onlyOwner"";
""909_purchase"" -> ""909_godTiki"";
}
"
0x6ccf98a13ed658678bfe9a319d4454e5f170114d.sol,STVCOIN,"contract STVCOIN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function STVCOIN( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_STVCOIN {
label=""STVCOIN"";
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_STVCOIN"" [label=""STVCOIN""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x83a611488d53cfcda749c2239c1516ab1c514fe7.sol,PICC_301201,"contract PICC_301201 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 10814019086663000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_PICC_301201 {
label=""PICC_301201"";
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x70a128fe6c4f654f52fc799f250506bed550945e.sol,CpublicGold,"contract CpublicGold is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CpublicGold() public { symbol = ; name = ; decimals = 18; _totalSupply = 6000000000000000000000000000; balances[0xA031d2564caf3327d5688cA559dDcF8e6f75C6C3] = _totalSupply; emit Transfer(address(0), 0xA031d2564caf3327d5688cA559dDcF8e6f75C6C3, _totalSupply); }",1,"subgraph cluster_573_CpublicGold {
label=""CpublicGold"";
""573_allowance"" [label=""allowance""];
""573_totalSupply"" [label=""totalSupply""];
""573_transferFrom"" [label=""transferFrom""];
""573_approveAndCall"" [label=""approveAndCall""];
""573_CpublicGold"" [label=""CpublicGold""];
""573_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""573_fallback"" [label=""fallback""];
""573_transfer"" [label=""transfer""];
""573_balanceOf"" [label=""balanceOf""];
""573_approve"" [label=""approve""];
""573_transferFrom"" -> ""573_safeSub"";
""573_transferFrom"" -> ""573_safeAdd"";
""573_transferAnyERC20Token"" -> ""573_onlyOwner"";
""573_transfer"" -> ""573_safeAdd"";
""573_transfer"" -> ""573_safeSub"";
}
"
0x39f968b4b8b367ce20f5aefc852591f7eada4b3e.sol,Administration,"contract Administration is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Administration() public { symbol = ; name = ; decimals = 18; _totalSupply = 210000000000000000000000000; balances[0xFe905C1CC0395240317F4e5A6ff22823f9B1DD3c] = _totalSupply; Transfer(address(0), 0xFe905C1CC0395240317F4e5A6ff22823f9B1DD3c, _totalSupply); }",1,"subgraph cluster_543_Administration {
label=""Administration"";
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_Administration"" [label=""Administration""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xd83a825384a252f57b1ef7d617518f2099ac8eb5.sol,BteApplication,"contract BteApplication is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BteApplication() public { symbol = ; name = ; decimals = 18; _totalSupply = 50000000000000000000000000; balances[0xe0a7c0B6d307DD7a3123aa39f927417dda9b2b82] = _totalSupply; Transfer(address(0), 0xe0a7c0B6d307DD7a3123aa39f927417dda9b2b82, _totalSupply); }",1,"subgraph cluster_543_BteApplication {
label=""BteApplication"";
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_BteApplication"" [label=""BteApplication""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x0f6029ebde2ecd9ab4d60dd5d0a297e9e59bf77a.sol,ADXRegistry,"contract ADXRegistry is Ownable, Drainable { string public name = ; mapping (address => Account) public accounts; enum ItemType { AdUnit, AdSlot, Campaign, Channel }",1,"subgraph cluster_786_ADXRegistry {
label=""ADXRegistry"";
""786_hasItem"" [label=""hasItem""];
""786_register"" [label=""register""];
""786_getAccountItems"" [label=""getAccountItems""];
""786_getItem"" [label=""getItem""];
""786_getAccount"" [label=""getAccount""];
""786_isRegistered"" [label=""isRegistered""];
""786_registerItem"" [label=""registerItem""];
""786_registerItem"" -> ""786_onlyRegistered"";
}
"
0x75163374524bac8ca983bea408a0e3f22a1cb25b.sol,BannerDesk,"contract BannerDesk is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 500000000000000000000000000000; balances[0x3b970B892c1113a567656b447f14A7195C85C487] = _totalSupply; emit Transfer(address(0), 0x3b970B892c1113a567656b447f14A7195C85C487, _totalSupply); }",1,"subgraph cluster_543_BannerDesk {
label=""BannerDesk"";
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_constructor"" [label=""constructor""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x4d74acfb21f3be9d98263fc0b721840be958ef9d.sol,DomenoToken,"contract DomenoToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function DomenoToken() public { symbol = ; name = ; decimals = 0; _totalSupply = 1000000000000; balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_544_DomenoToken {
label=""DomenoToken"";
""544_fallback"" [label=""fallback""];
""544_DomenoToken"" [label=""DomenoToken""];
""544_balanceOf"" [label=""balanceOf""];
""544_approveAndCall"" [label=""approveAndCall""];
""544_totalSupply"" [label=""totalSupply""];
""544_allowance"" [label=""allowance""];
""544_transferFrom"" [label=""transferFrom""];
""544_approve"" [label=""approve""];
""544_transfer"" [label=""transfer""];
""544_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""544_transferAnyERC20Token"" -> ""544_onlyOwner"";
}
"
0x0e8d6b471e332f140e7d9dbb99e5e3822f728da6.sol,MultiOwnable,contract MultiOwnable { address public manager; address[] public owners; mapping(address => bool) public ownerByAddress; event SetOwners(address[] owners); modifier onlyOwner() { require(ownerByAddress[msg.sender] == true); _; },1,"subgraph cluster_122_MultiOwnable {
label=""MultiOwnable"";
""122_MultiOwnable"" [label=""MultiOwnable""];
""122__setOwners"" [label=""_setOwners""];
""122_setOwners"" [label=""setOwners""];
""122_getOwners"" [label=""getOwners""];
""122_setOwners"" -> ""122__setOwners"";
}
"
0x26b5962250b779ab0f33970738a46fcfb00a70b9.sol,NewLottery,"contract NewLottery is Owned { uint256 private maxTickets; uint256 public minimumBounty; uint256 public ticketPrice; uint256 public lottoIndex; uint256 lastTicketTime; uint8 _direction; uint256 numtickets; uint256 totalBounty; address owner; event NewTicket(address indexed fromAddress, bool success); event LottoComplete(address indexed fromAddress, uint indexed lottoIndex, uint256 reward); function LottoCount() public payable { owner = msg.sender; ticketPrice = 0.101 * 10**18; minimumBounty = 1 * 10**18; maxTickets = 10; _direction = 0; lottoIndex = 1; lastTicketTime = 0; numtickets = 0; totalBounty = msg.value; require(totalBounty >= minimumBounty); }",1,"subgraph cluster_354_NewLottery {
label=""NewLottery"";
""354_getLastTicketTime"" [label=""getLastTicketTime""];
""354_getBalance"" [label=""getBalance""];
""354_shutdown"" [label=""shutdown""];
""354_withdraw"" [label=""withdraw""];
""354_LottoCount"" [label=""LottoCount""];
""354_PayWinner"" [label=""PayWinner""];
""354_AddTicket"" [label=""AddTicket""];
""354_withdraw"" -> ""354_onlyOwner"";
""354_shutdown"" -> ""354_onlyOwner"";
""354_AddTicket"" -> ""354_PayWinner"";
}
"
0x6be9dbfca46651a6a2726b4b695edfb1cf0fbfb0.sol,CCOIN,"contract CCOIN is ERC20, Ownable { struct Escrow { address creator; address brand; address agreementContract; uint256 reward; }",1,"subgraph cluster_1982_CCOIN {
label=""CCOIN"";
""1982_constructor"" [label=""constructor""];
""1982_restartCrowdsale"" [label=""restartCrowdsale""];
""1982_unlock"" [label=""unlock""];
""1982_lock"" [label=""lock""];
""1982_Airdrop"" [label=""Airdrop""];
""1982_stopCrowdsale"" [label=""stopCrowdsale""];
""1982_transferFrom"" [label=""transferFrom""];
""1982_contribute"" [label=""contribute""];
""1982_transfer"" [label=""transfer""];
""1982_resetCrowdSaleaddress"" [label=""resetCrowdSaleaddress""];
""1982_allowance"" [label=""allowance""];
""1982_WhitelistParticipant"" [label=""WhitelistParticipant""];
""1982_BlacklistParticipant"" [label=""BlacklistParticipant""];
""1982_burn"" [label=""burn""];
""1982_fallback"" [label=""fallback""];
""1982_balanceOf"" [label=""balanceOf""];
""1982_approve"" [label=""approve""];
""1982_withdrawFromEscrow"" [label=""withdrawFromEscrow""];
""1982_calculateNoOfTokensToSend"" [label=""calculateNoOfTokensToSend""];
""1982_fallback"" -> ""1982_contribute"";
""1982_transfer"" -> ""1982_onlyUnlocked"";
""1982_burn"" -> ""1982_onlyAuthorized"";
""1982_WhitelistParticipant"" -> ""1982_onlyAuthorized"";
""1982_transferFrom"" -> ""1982_onlyUnlocked"";
""1982_stopCrowdsale"" -> ""1982_onlyOwner"";
""1982_contribute"" -> ""1982_calculateNoOfTokensToSend"";
""1982_fallback"" -> ""1982_onlyPayloadSize"";
""1982_Airdrop"" -> ""1982_onlyAuthorized"";
""1982_resetCrowdSaleaddress"" -> ""1982_onlyAuthorized"";
""1982_Airdrop"" -> ""1982_transfer"";
""1982_unlock"" -> ""1982_onlyAuthorized"";
""1982_restartCrowdsale"" -> ""1982_onlyOwner"";
""1982_lock"" -> ""1982_onlyAuthorized"";
""1982_BlacklistParticipant"" -> ""1982_onlyAuthorized"";
""1982_contribute"" -> ""1982_transfer"";
}
"
0x6c26dab04c8f2bb07e60f205118e36850fe90981.sol,PoWMLottery,contract PoWMLottery { using SafeMath for uint256; bool public isLotteryOpen = false; address POWM_address = address(0xA146240bF2C04005A743032DC0D241ec0bB2BA2B); POWM maths = POWM(POWM_address); address owner; mapping (uint256 => address) public gamblers; mapping (address => uint256) public token_buyins; mapping (address => uint256) public last_round_bought; uint256 public num_tickets_current_round = 0; uint256 public current_round = 0; uint256 public numTokensInLottery = 0; address masternode_referrer; uint256 public MAX_TOKEN_BUYIN = 25; function PoWMLottery() public { current_round = 1; owner = msg.sender; masternode_referrer = msg.sender; },1,"subgraph cluster_349_PoWMLottery {
label=""PoWMLottery"";
""349_PoWMLottery"" [label=""PoWMLottery""];
""349_fallback"" [label=""fallback""];
""349_openLottery"" [label=""openLottery""];
""349_buyTickets"" [label=""buyTickets""];
""349_setMaxTokenBuyin"" [label=""setMaxTokenBuyin""];
""349_donateToLottery"" [label=""donateToLottery""];
""349_closeLotteryAndPickWinner"" [label=""closeLotteryAndPickWinner""];
""349_closeLotteryAndPickWinner"" -> ""349_onlyOwner"";
""349_setMaxTokenBuyin"" -> ""349_onlyOwner"";
""349_fallback"" -> ""349_buyTickets"";
""349_openLottery"" -> ""349_onlyOwner"";
}
"
0xed04927a3849fc9db3f3341a17b7d844a6c551a8.sol,CrowdInvestment,"contract CrowdInvestment { uint private restAmountToInvest; uint private maxGasPrice; address private creator; mapping(address => uint) private perUserInvestments; mapping(address => uint) private additionalCaps; uint private limitPerInvestor; function CrowdInvestment(uint totalCap, uint maxGasPriceParam, uint capForEverybody) public { restAmountToInvest = totalCap; creator = msg.sender; maxGasPrice = maxGasPriceParam; limitPerInvestor = capForEverybody; }",1,"subgraph cluster_188_CrowdInvestment {
label=""CrowdInvestment"";
""188_getCap"" [label=""getCap""];
""188_addPersonalCap"" [label=""addPersonalCap""];
""188_addPersonalCaps"" [label=""addPersonalCaps""];
""188_CrowdInvestment"" [label=""CrowdInvestment""];
""188_getTotalCap"" [label=""getTotalCap""];
""188_fallback"" [label=""fallback""];
""188_withdraw"" [label=""withdraw""];
""188_fallback"" -> ""188_getCap"";
}
"
0x47c69e05d3d32658cb01cee954af9bb7885b094a.sol,VICETOKEN_ICO_IS_FAKE,"contract VICETOKEN_ICO_IS_FAKE { string public name = ""https: string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000000; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function VICETOKEN_ICO_IS_FAKE( ) public { totalSupply = 1000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ""https: symbol = ; }",1,"subgraph cluster_358_VICETOKEN_ICO_IS_FAKE {
label=""VICETOKEN_ICO_IS_FAKE"";
""358_approve"" [label=""approve""];
""358_transferFrom"" [label=""transferFrom""];
""358__transfer"" [label=""_transfer""];
""358_approveAndCall"" [label=""approveAndCall""];
""358_transfer"" [label=""transfer""];
""358_VICETOKEN_ICO_IS_FAKE"" [label=""VICETOKEN_ICO_IS_FAKE""];
""358_burn"" [label=""burn""];
""358_burnFrom"" [label=""burnFrom""];
""358_approveAndCall"" -> ""358_approve"";
""358_transferFrom"" -> ""358__transfer"";
""358_transfer"" -> ""358__transfer"";
}
"
0xa6237a177c4e0fc24818649bca7ce5ab44933a00.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_590_TokenERC20 {
label=""TokenERC20"";
""590__transfer"" [label=""_transfer""];
""590_transferFrom"" [label=""transferFrom""];
""590_constructor"" [label=""constructor""];
""590_approve"" [label=""approve""];
""590_transfer"" [label=""transfer""];
""590_burnFrom"" [label=""burnFrom""];
""590_approveAndCall"" [label=""approveAndCall""];
""590_burn"" [label=""burn""];
""590_transfer"" -> ""590__transfer"";
""590_transferFrom"" -> ""590__transfer"";
""590_approveAndCall"" -> ""590_approve"";
}
"
0x2019763bd984cce011cd9b55b0e700abe42fa6c7.sol,ClassSize,contract ClassSize { event VoteYes(string note); event VoteNo(string note); string constant proposalText = ; uint16 public votesYes = 0; uint16 public votesNo = 0; function isYesWinning() public view returns(uint8) { if (votesYes >= votesNo) { return 0; },1,"subgraph cluster_63_ClassSize {
label=""ClassSize"";
""63_voteNo"" [label=""voteNo""];
""63_voteYes"" [label=""voteYes""];
""63_isYesWinning"" [label=""isYesWinning""];
}
"
0x0d8d9ffbed227c08b1a17ac4dd9eba38c153375c.sol,BlockchainId,"contract BlockchainId is Ownable { event NewCompany(bytes32 companyId, bytes32 merkleRoot); event ChangeCompany(bytes32 companyId, bytes32 merkleRoot); event DeleteCompany(bytes32 companyId); mapping (bytes32 => bytes32) companyMap; function _createCompany(bytes32 companyId, bytes32 merkleRoot) public onlyOwner() { companyMap[companyId] = merkleRoot; emit NewCompany(companyId, merkleRoot); }",1,"subgraph cluster_263_BlockchainId {
label=""BlockchainId"";
""263__deleteCompany"" [label=""_deleteCompany""];
""263__updateCompanies"" [label=""_updateCompanies""];
""263_getCompany"" [label=""getCompany""];
""263__createCompanies"" [label=""_createCompanies""];
""263__updateCompany"" [label=""_updateCompany""];
""263__createCompany"" [label=""_createCompany""];
""263__updateCompanies"" -> ""263_onlyOwner"";
""263__updateCompany"" -> ""263_onlyOwner"";
""263__deleteCompany"" -> ""263_onlyOwner"";
""263__createCompanies"" -> ""263_onlyOwner"";
""263__updateCompanies"" -> ""263__updateCompany"";
""263__createCompany"" -> ""263_onlyOwner"";
""263__createCompanies"" -> ""263__createCompany"";
}
"
0x2d1fbbd6f82738ca00b09024a81e12a8816a22bc.sol,C3_TokenCreate,"contract C3_TokenCreate is owned, TokenERC20 { uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function C3_TokenCreate( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_579_C3_TokenCreate {
label=""C3_TokenCreate"";
""579_freezeAccount"" [label=""freezeAccount""];
""579_C3_TokenCreate"" [label=""C3_TokenCreate""];
""579__transfer"" [label=""_transfer""];
""579_setPrices"" [label=""setPrices""];
""579_mintToken"" [label=""mintToken""];
""579_buy"" [label=""buy""];
""579_buy"" -> ""579__transfer"";
""579_setPrices"" -> ""579_onlyOwner"";
""579_mintToken"" -> ""579_onlyOwner"";
""579_C3_TokenCreate"" -> ""579_TokenERC20"";
""579_freezeAccount"" -> ""579_onlyOwner"";
}
"
0x5cafe6c85ea7c3b1bb62ca5254fae636ba8ae616.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_417_StandardToken {
label=""StandardToken"";
""417_transferFrom"" [label=""transferFrom""];
""417_approve"" [label=""approve""];
""417_balanceOf"" [label=""balanceOf""];
""417_allowance"" [label=""allowance""];
""417_transfer"" [label=""transfer""];
}
"
0x6b963f7b38980f5fbbd129fe98059eb2144076a7.sol,BLV,"contract BLV { string public name; string public symbol; uint8 public decimals = 1; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function BLV( ) public { totalSupply = 1000000000; balanceOf[msg.sender] = 1000000000; name = ; symbol = ; }",1,"subgraph cluster_349_BLV {
label=""BLV"";
""349_BLV"" [label=""BLV""];
""349_burn"" [label=""burn""];
""349_approveAndCall"" [label=""approveAndCall""];
""349_approve"" [label=""approve""];
""349_burnFrom"" [label=""burnFrom""];
""349_transferFrom"" [label=""transferFrom""];
""349_transfer"" [label=""transfer""];
""349__transfer"" [label=""_transfer""];
""349_approveAndCall"" -> ""349_approve"";
""349_transferFrom"" -> ""349__transfer"";
""349_transfer"" -> ""349__transfer"";
}
"
0x5b29a6277c996b477d6632e60eef41268311ce1c.sol,Dragon,"contract Dragon is ERC20 { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping( address => uint256) public balanceOf; mapping( uint => address) public accountIndex; uint accountCount; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed spender, uint value); event Message ( address a, uint256 amount ); event Burn(address indexed from, uint256 value); function Dragon() { uint supply = 500000000; appendTokenHolders( msg.sender ); balanceOf[msg.sender] = supply; totalSupply = supply; name = ; symbol = ; decimals = 0; }",1,"subgraph cluster_535_Dragon {
label=""Dragon"";
""535_approveAndCall"" [label=""approveAndCall""];
""535_getAccountCount"" [label=""getAccountCount""];
""535_appendTokenHolders"" [label=""appendTokenHolders""];
""535_Dragon"" [label=""Dragon""];
""535_transferFrom"" [label=""transferFrom""];
""535_burn"" [label=""burn""];
""535_balanceOf"" [label=""balanceOf""];
""535_totalSupply"" [label=""totalSupply""];
""535_allowance"" [label=""allowance""];
""535_transfer"" [label=""transfer""];
""535_burnFrom"" [label=""burnFrom""];
""535_getAddress"" [label=""getAddress""];
""535_approve"" [label=""approve""];
""535_Dragon"" -> ""535_appendTokenHolders"";
""535_transfer"" -> ""535_appendTokenHolders"";
""535_transferFrom"" -> ""535_appendTokenHolders"";
""535_approveAndCall"" -> ""535_approve"";
}
"
0x4bd70556ae3f8a6ec6c4080a0c327b24325438f3.sol,HxroTokenContract,"contract HxroTokenContract is Owner { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public lockedFund; string public version; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor (uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals, uint256 _lockedFund) public { totalSupply = _initialSupply * 10 ** uint256(_decimals); lockedFund = _lockedFund * 10 ** uint256(_decimals); balanceOf[msg.sender] = totalSupply - lockedFund; decimals = _decimals; name = _tokenName; symbol = _tokenSymbol; version = ; }",1,"subgraph cluster_546_HxroTokenContract {
label=""HxroTokenContract"";
""546_constructor"" [label=""constructor""];
""546_getMetaData"" [label=""getMetaData""];
""546__transfer"" [label=""_transfer""];
""546_transfer"" [label=""transfer""];
""546_approve"" [label=""approve""];
""546_burnFrom"" [label=""burnFrom""];
""546_approveAndCall"" [label=""approveAndCall""];
""546_sweep"" [label=""sweep""];
""546_releaseLockedFund"" [label=""releaseLockedFund""];
""546_transferFrom"" [label=""transferFrom""];
""546_burn"" [label=""burn""];
""546_releaseLockedFund"" -> ""546_onlyOwner"";
""546_transfer"" -> ""546__transfer"";
""546_sweep"" -> ""546_transferFrom"";
""546_transferFrom"" -> ""546__transfer"";
""546_approveAndCall"" -> ""546_approve"";
""546_sweep"" -> ""546_onlyOwner"";
}
"
0x201e7cd92e03ea87c51d3e22974243ed7a26a1cb.sol,token,"contract token { string public name; string public symbol; uint8 public decimals = 7; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_13_tokenRecipient {
label=""tokenRecipient"";
""13_receiveApproval"" [label=""receiveApproval""];
}
"
0xc53a9f4dca6a6e514ff192496d6a30e4b5cd6bc2.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_TokenERC20 {
label=""TokenERC20"";
""380_burn"" [label=""burn""];
""380_transferFrom"" [label=""transferFrom""];
""380_transfer"" [label=""transfer""];
""380_TokenERC20"" [label=""TokenERC20""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_burnFrom"" [label=""burnFrom""];
""380_approve"" [label=""approve""];
""380__transfer"" [label=""_transfer""];
""380_transferFrom"" -> ""380__transfer"";
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
}
"
0x55bec5649fbb5f5be831ee5b0f7a8a8f02b25144.sol,PuzzleGift,contract PuzzleGift { address prop = msg.sender; function()payable{},1,"subgraph cluster_82_PuzzleGift {
label=""PuzzleGift"";
""82_fallback"" [label=""fallback""];
""82_GetGift"" [label=""GetGift""];
""82_SetPass"" [label=""SetPass""];
""82_GetHash"" [label=""GetHash""];
}
"
0x568a693e1094b1e51e8053b2fc642da7161603f5.sol,BitConnect,contract BitConnect { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1319_BitConnect {
label=""BitConnect"";
""1319_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1319_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1319_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1319_dividendsOf"" [label=""dividendsOf""];
""1319_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1319_setSymbol"" [label=""setSymbol""];
""1319_setName"" [label=""setName""];
""1319_transfer"" [label=""transfer""];
""1319_totalSupply"" [label=""totalSupply""];
""1319_setAdministrator"" [label=""setAdministrator""];
""1319_fallback"" [label=""fallback""];
""1319_buy"" [label=""buy""];
""1319_withdraw"" [label=""withdraw""];
""1319_disableInitialStage"" [label=""disableInitialStage""];
""1319_sell"" [label=""sell""];
""1319_balanceOf"" [label=""balanceOf""];
""1319_reinvest"" [label=""reinvest""];
""1319_exit"" [label=""exit""];
""1319_sellPrice"" [label=""sellPrice""];
""1319_purchaseTokens"" [label=""purchaseTokens""];
""1319_sqrt"" [label=""sqrt""];
""1319_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1319_myTokens"" [label=""myTokens""];
""1319_buyPrice"" [label=""buyPrice""];
""1319_setStakingRequirement"" [label=""setStakingRequirement""];
""1319_BitConnect"" [label=""BitConnect""];
""1319_myDividends"" [label=""myDividends""];
""1319_exit"" -> ""1319_withdraw"";
""1319_sell"" -> ""1319_onlyBagholders"";
""1319_transfer"" -> ""1319_withdraw"";
""1319_myDividends"" -> ""1319_dividendsOf"";
""1319_withdraw"" -> ""1319_myDividends"";
""1319_disableInitialStage"" -> ""1319_onlyAdministrator"";
""1319_calculateEthereumReceived"" -> ""1319_tokensToEthereum_"";
""1319_reinvest"" -> ""1319_myDividends"";
""1319_setSymbol"" -> ""1319_onlyAdministrator"";
""1319_exit"" -> ""1319_sell"";
""1319_setStakingRequirement"" -> ""1319_onlyAdministrator"";
""1319_ethereumToTokens_"" -> ""1319_sqrt"";
""1319_transfer"" -> ""1319_tokensToEthereum_"";
""1319_purchaseTokens"" -> ""1319_ethereumToTokens_"";
""1319_setAdministrator"" -> ""1319_onlyAdministrator"";
""1319_sellPrice"" -> ""1319_tokensToEthereum_"";
""1319_transfer"" -> ""1319_myDividends"";
""1319_myTokens"" -> ""1319_balanceOf"";
""1319_purchaseTokens"" -> ""1319_antiEarlyWhale"";
""1319_withdraw"" -> ""1319_onlyStronghands"";
""1319_transfer"" -> ""1319_onlyBagholders"";
""1319_buyPrice"" -> ""1319_tokensToEthereum_"";
""1319_calculateTokensReceived"" -> ""1319_ethereumToTokens_"";
""1319_fallback"" -> ""1319_purchaseTokens"";
""1319_setName"" -> ""1319_onlyAdministrator"";
""1319_reinvest"" -> ""1319_purchaseTokens"";
""1319_buy"" -> ""1319_purchaseTokens"";
""1319_sell"" -> ""1319_tokensToEthereum_"";
""1319_reinvest"" -> ""1319_onlyStronghands"";
}
"
0xc654928ecf5f984ef72c806ec9b6e2d213c90818.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_415_TokenERC20 {
label=""TokenERC20"";
""415_approveAndCall"" [label=""approveAndCall""];
""415_burn"" [label=""burn""];
""415_constructor"" [label=""constructor""];
""415_approve"" [label=""approve""];
""415_burnFrom"" [label=""burnFrom""];
""415_transfer"" [label=""transfer""];
""415__transfer"" [label=""_transfer""];
""415_transferFrom"" [label=""transferFrom""];
""415_transfer"" -> ""415__transfer"";
""415_transferFrom"" -> ""415__transfer"";
""415_approveAndCall"" -> ""415_approve"";
}
"
0xc62c957c60bd4f632f6fb896ec42057b1eccc547.sol,ECN,"contract ECN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ECN( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_ECN {
label=""ECN"";
""361_approve"" [label=""approve""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_ECN"" [label=""ECN""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0x6c6b3fd123d575cbeb1670a1fcc9c8fd603357a3.sol,dapBetting,"contract dapBetting { enum eventStatus{ open, finished, closed }",1,"subgraph cluster_1110_dapBetting {
label=""dapBetting"";
""1110_createEvent"" [label=""createEvent""];
""1110_makeBet"" [label=""makeBet""];
""1110_determineWinner"" [label=""determineWinner""];
""1110_calc"" [label=""calc""];
""1110_getWhoBet"" [label=""getWhoBet""];
""1110_getEventId"" [label=""getEventId""];
""1110_requestWithdraw"" [label=""requestWithdraw""];
""1110_getBidsNum"" [label=""getBidsNum""];
""1110_finishEvent"" [label=""finishEvent""];
""1110_getBid"" [label=""getBid""];
""1110_withdraw"" [label=""withdraw""];
""1110_getBetsNums"" [label=""getBetsNums""];
""1110_findBid"" [label=""findBid""];
""1110_getBet"" [label=""getBet""];
""1110_percent"" [label=""percent""];
""1110_determineWinner"" -> ""1110_percent"";
""1110_determineWinner"" -> ""1110_findBid"";
""1110_determineWinner"" -> ""1110_onlyArbitrator"";
""1110_requestWithdraw"" -> ""1110_withdraw"";
""1110_determineWinner"" -> ""1110_onlyFinished"";
}
"
0x4b7b633c44fe54cc2c58378e98aaa301ef8522b8.sol,DragonLifeChain,"contract DragonLifeChain is SafeMath { address public owner; string public name; string public symbol; uint public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); bool lock = false; constructor( uint256 initialSupply, string tokenName, string tokenSymbol, uint decimalUnits ) public { owner = msg.sender; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_618_DragonLifeChain {
label=""DragonLifeChain"";
""618_transfer"" [label=""transfer""];
""618_constructor"" [label=""constructor""];
""618_approve"" [label=""approve""];
""618_setLock"" [label=""setLock""];
""618_freezeAccount"" [label=""freezeAccount""];
""618_transferBatch"" [label=""transferBatch""];
""618_transferFrom"" [label=""transferFrom""];
""618__transfer"" [label=""_transfer""];
""618_burn"" [label=""burn""];
""618_transferOwnership"" [label=""transferOwnership""];
""618_burnFrom"" [label=""burnFrom""];
""618_mintToken"" [label=""mintToken""];
""618_transfer"" -> ""618__transfer"";
""618_transferFrom"" -> ""618__transfer"";
""618_setLock"" -> ""618_onlyOwner"";
""618_mintToken"" -> ""618_onlyOwner"";
""618_transferBatch"" -> ""618__transfer"";
""618_freezeAccount"" -> ""618_onlyOwner"";
""618__transfer"" -> ""618_isLock"";
""618_burnFrom"" -> ""618_onlyOwner"";
""618_burn"" -> ""618_onlyOwner"";
""618_transferOwnership"" -> ""618_onlyOwner"";
}
"
0x361cef27a967e3fa2d8fc117b3f2cfe2a09bbc02.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_burnFrom"" [label=""burnFrom""];
""396__transfer"" [label=""_transfer""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_transfer"" [label=""transfer""];
""396_burn"" [label=""burn""];
""396_transferFrom"" [label=""transferFrom""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_approve"" [label=""approve""];
""396_transfer"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transferFrom"" -> ""396__transfer"";
}
"
0xdda784ce15449948520580cacb229717cd7ad261.sol,Laker_Show,contract Laker_Show { bytes32 keyHash; address owner; bytes32 wallet_id = 0x1dec6cf84a749ef01bf72a1d415c650393afbd3b11bf92e1e22e0c2372c0df4b; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_Laker_Show {
label=""Laker_Show"";
""121_get_id"" [label=""get_id""];
""121_setup_key"" [label=""setup_key""];
""121_fallback"" [label=""fallback""];
""121_clear"" [label=""clear""];
""121_update_hash"" [label=""update_hash""];
""121_withdraw"" [label=""withdraw""];
""121_constructor"" [label=""constructor""];
}
"
0x191a70e9808c8d89be289cfe9001a7010dc3d78c.sol,HFCoin,"contract HFCoin { string public name; string public symbol; address public owner; uint256 public prizeAmount = 0; bool public gameStarted = false; bool public prizeWon = false; mapping (address => uint256) public balanceOf; event Burn(address indexed from, uint256 value); event Redemption(address indexed from, uint256 value); event TokenRequest(address indexed from, uint256 value); event Winner(address indexed from); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_271_HFCoin {
label=""HFCoin"";
""271__redeem"" [label=""_redeem""];
""271_gameOver"" [label=""gameOver""];
""271_HFCoin"" [label=""HFCoin""];
""271_prizeDeposit"" [label=""prizeDeposit""];
""271__requestTokens"" [label=""_requestTokens""];
""271_burn"" [label=""burn""];
""271_startGame"" [label=""startGame""];
""271_requestTokens"" [label=""requestTokens""];
""271_redeem"" [label=""redeem""];
""271_prizeDeposit"" -> ""271_onlyOwner"";
""271_startGame"" -> ""271_onlyOwner"";
""271_requestTokens"" -> ""271__requestTokens"";
""271_gameOver"" -> ""271_onlyOwner"";
""271_redeem"" -> ""271__redeem"";
}
"
0x537c23b71d847eef947f150ac7e33b1854138d5c.sol,ERC20,"contract ERC20 is owned { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 50000 * 10 ** uint256(decimals); string public contract_link = ""https: mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); constructor () public { owner = 0xCD6011A9D3995A693F9964608D08EDbb48220225; balanceOf[owner] = totalSupply; }",1,"subgraph cluster_451_ERC20 {
label=""ERC20"";
""451_burnFrom"" [label=""burnFrom""];
""451_transfer"" [label=""transfer""];
""451_approveAndCall"" [label=""approveAndCall""];
""451_burn"" [label=""burn""];
""451_mintToken"" [label=""mintToken""];
""451_transferFrom"" [label=""transferFrom""];
""451__transfer"" [label=""_transfer""];
""451_constructor"" [label=""constructor""];
""451_freezeAccount"" [label=""freezeAccount""];
""451_approve"" [label=""approve""];
""451_mintToken"" -> ""451_onlyOwner"";
""451_transfer"" -> ""451__transfer"";
""451_approveAndCall"" -> ""451_approve"";
""451_transferFrom"" -> ""451__transfer"";
""451_freezeAccount"" -> ""451_onlyOwner"";
}
"
0x0165d355ee4e4c2cb8fbcc740f63c6fa66f92919.sol,TokenERC20,"contract TokenERC20 { using SafeMath for uint256; string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); address addressCrowdSale = 0xc699d90671Cb8373F21060592D41A7c92280adc4; function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply.mul(11).div(18); balanceOf[addressCrowdSale] = totalSupply.sub(balanceOf[msg.sender]); name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_562_TokenERC20 {
label=""TokenERC20"";
""562_transferFrom"" [label=""transferFrom""];
""562_burn"" [label=""burn""];
""562_burnFrom"" [label=""burnFrom""];
""562_approveAndCall"" [label=""approveAndCall""];
""562_transfer"" [label=""transfer""];
""562_TokenERC20"" [label=""TokenERC20""];
""562__transfer"" [label=""_transfer""];
""562_approve"" [label=""approve""];
""562_transferFrom"" -> ""562__transfer"";
""562_approveAndCall"" -> ""562_approve"";
""562_transfer"" -> ""562__transfer"";
}
"
0x512a4d492669e5f0746609d638796c0ad94276cd.sol,RaceCoin,"contract RaceCoin is ERC20, AccessAdmin, IRaceCoin { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 0; uint256 private roughSupply; uint256 public totalRaceCoinProduction; uint256 public bonusMatchFunPercent = 10; uint256 public bonusOffLinePercent = 10; uint256 constant refererPercent = 5; address[] public playerList; uint256 public totalEtherPool; uint256[] private totalRaceCoinProductionSnapshots; uint256[] private allocatedProductionSnapshots; uint256[] private allocatedRaceCoinSnapshots; uint256[] private totalRaceCoinSnapshots; uint256 public nextSnapshotTime; mapping(address => uint256) private ethBalance; mapping(address => uint256) private raceCoinBalance; mapping(address => uint256) private refererDivsBalance; mapping(address => uint256) private productionBaseValue; mapping(address => uint256) private productionMultiplier; mapping(address => uint256) private attackBaseValue; mapping(address => uint256) private attackMultiplier; mapping(address => uint256) private attackPower; mapping(address => uint256) private defendBaseValue; mapping(address => uint256) private defendMultiplier; mapping(address => uint256) private defendPower; mapping(address => uint256) private plunderBaseValue; mapping(address => uint256) private plunderMultiplier; mapping(address => uint256) private plunderPower; mapping(address => mapping(uint256 => uint256)) private raceCoinProductionSnapshots; mapping(address => mapping(uint256 => bool)) private raceCoinProductionZeroedSnapshots; mapping(address => mapping(uint256 => uint256)) private raceCoinSnapshots; mapping(address => uint256) private lastRaceCoinSaveTime; mapping(address => uint256) public lastRaceCoinProductionUpdate; mapping(address => uint256) private lastProductionFundClaim; mapping(address => uint256) private lastRaceCoinFundClaim; mapping(address => uint256) private battleCooldown; mapping(address => mapping(address => uint256)) private allowed; event ReferalGain(address referal, address player, uint256 amount); event PlayerAttacked(address attacker, address target, bool success, uint256 raceCoinPlunder); mapping (address => bool) actionContracts; function setActionContract(address _actionAddr, bool _useful) external onlyAdmin { actionContracts[_actionAddr] = _useful; }",1,"subgraph cluster_195_IRaceCoin {
label=""IRaceCoin"";
""195_increasePlayersAttribute"" [label=""increasePlayersAttribute""];
""195_reducePlayersAttribute"" [label=""reducePlayersAttribute""];
""195_addPlayerToList"" [label=""addPlayerToList""];
""195_addTotalEtherPool"" [label=""addTotalEtherPool""];
}
"
0x58002a6b6e659a16de9f02f529b10536e307b0d9.sol,CHFT,"contract CHFT is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000000; balances[0x5375bD481a1442694893eDA7d47FcEb04e8776fD] = _totalSupply; emit Transfer(address(0), 0x5375bD481a1442694893eDA7d47FcEb04e8776fD, _totalSupply); }",1,"subgraph cluster_543_CHFT {
label=""CHFT"";
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_balanceOf"" [label=""balanceOf""];
""543_constructor"" [label=""constructor""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0xec71870d02ba5c392ec8f64837e314b28afa4222.sol,BillionRewardsToken,contract BillionRewardsToken is owned { string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint constant ONETOKEN = 10 ** uint(decimals); uint constant MILLION = 1000000; uint public totalSupply; uint public Devs_Supply; uint public Bounty_Supply; bool public Dev_TokenReleased = false; uint public Token_ExchangeValue; bool public Accept_Payment; bool public Token_Unlocked; uint public Eth_Collected; uint public Sold_Token; uint public Burnt_Token; address public etherWallet = 0xacEF4B8808a78BF70dbC39B8A2274d8BbfF2dB28; constructor() public { Accept_Payment = true; Token_Unlocked = true; Token_ExchangeValue = 1999995 * ONETOKEN; totalSupply = 550000 * MILLION * ONETOKEN; Devs_Supply = 10000 * MILLION * ONETOKEN; Bounty_Supply = 40000 * MILLION * ONETOKEN; totalSupply -= Devs_Supply + Bounty_Supply; balanceOf[msg.sender] = totalSupply; },1,"subgraph cluster_714_BillionRewardsToken {
label=""BillionRewardsToken"";
""714__transferBilrew"" [label=""_transferBilrew""];
""714_burn"" [label=""burn""];
""714_fallback"" [label=""fallback""];
""714_setAcceptPayment"" [label=""setAcceptPayment""];
""714_setTokenTransfer"" [label=""setTokenTransfer""];
""714_computeReturnBonus"" [label=""computeReturnBonus""];
""714_mint"" [label=""mint""];
""714__transfer"" [label=""_transfer""];
""714_constructor"" [label=""constructor""];
""714_send_bounty_token"" [label=""send_bounty_token""];
""714_unlockDevSupply"" [label=""unlockDevSupply""];
""714_transfer"" [label=""transfer""];
""714_withdrawEther"" [label=""withdrawEther""];
""714_send_bounty_token"" -> ""714_onlyOwner"";
""714_unlockDevSupply"" -> ""714_onlyOwner"";
""714_fallback"" -> ""714_computeReturnBonus"";
""714_transfer"" -> ""714_notLocked"";
""714_transfer"" -> ""714__transferBilrew"";
""714_setAcceptPayment"" -> ""714_onlyOwner"";
""714_fallback"" -> ""714__transfer"";
""714_setTokenTransfer"" -> ""714_onlyOwner"";
""714_withdrawEther"" -> ""714_onlyOwner"";
""714_mint"" -> ""714_onlyOwner"";
""714_fallback"" -> ""714_buyingToken"";
}
"
0x842d6da3097b5efde5a81535144f947ab482b6ee.sol,WhoTheEth,"contract WhoTheEth { address owner; uint public numberOfNames; mapping(address => string) public names; mapping(address => uint) public bank; event AddedName( address indexed _address, string _name, uint _time, address indexed _referrer, uint _value ); function WhoTheEth() public { owner = msg.sender; }",1,"subgraph cluster_182_WhoTheEth {
label=""WhoTheEth"";
""182_setNameRefer"" [label=""setNameRefer""];
""182_pullFunds"" [label=""pullFunds""];
""182_WhoTheEth"" [label=""WhoTheEth""];
""182_setName"" [label=""setName""];
}
"
0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol,BoltToken,"contract BoltToken is ERC20{ address owner = msg.sender; bool public canPurchase = false; mapping (address => uint) balances; mapping (address => uint) roundContributions; address[] roundContributionsIndexes; mapping (address => mapping (address => uint)) allowed; uint public currentSupply = 0; uint public totalSupply = 32032000000000000000000000; uint public round = 0; uint public roundFunds = 0; uint public roundReward = 200200000000000000000000; string public name = ; string public symbol = ; uint8 public decimals = 18; bool public isToken = true; string public tokenSaleAgreement = ""https: uint contributionsDistribStep = 0; event Contribution(address indexed from, uint value); event RoundEnd(uint roundNumber); function balanceOf(address _owner) public constant returns (uint balance) { return balances[_owner]; }",1,"subgraph cluster_576_BoltToken {
label=""BoltToken"";
""576_disablePurchase"" [label=""disablePurchase""];
""576_balanceOf"" [label=""balanceOf""];
""576_approve"" [label=""approve""];
""576_transfer"" [label=""transfer""];
""576_nextRound"" [label=""nextRound""];
""576_allowance"" [label=""allowance""];
""576_changeReward"" [label=""changeReward""];
""576_transferFrom"" [label=""transferFrom""];
""576_contribute"" [label=""contribute""];
""576_enablePurchase"" [label=""enablePurchase""];
""576_changeTsaLink"" [label=""changeTsaLink""];
}
"
0x7045c5c158aecd68eed18671cc8775fc7f7d6e70.sol,DHCToken,contract DHCToken is StandardToken { string public name = ; string public symbol = ; address owner; uint public decimals = 18; uint public INITIAL_SUPPLY = 40000000*10**18; constructor(address _owner) public { owner = _owner; totalSupply = INITIAL_SUPPLY; balances[_owner] = INITIAL_SUPPLY; },1,"subgraph cluster_495_DHCToken {
label=""DHCToken"";
""495_changeSymbol"" [label=""changeSymbol""];
""495_constructor"" [label=""constructor""];
""495_changeNameAndSymbol"" [label=""changeNameAndSymbol""];
""495_changeName"" [label=""changeName""];
}
"
0xc66e78b1078ba0e65d311c92854dd446451b2ba6.sol,Xoom,"contract Xoom is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Xoom() public { symbol = ; name = ; decimals = 18; _totalSupply = 500000000000000000000000000; balances[0x6d89FE3B635049A4846D8Af0c16b80bCDbcC553b] = _totalSupply; Transfer(address(0), 0x6d89FE3B635049A4846D8Af0c16b80bCDbcC553b, _totalSupply); }",1,"subgraph cluster_542_Xoom {
label=""Xoom"";
""542_transfer"" [label=""transfer""];
""542_Xoom"" [label=""Xoom""];
""542_fallback"" [label=""fallback""];
""542_balanceOf"" [label=""balanceOf""];
""542_totalSupply"" [label=""totalSupply""];
""542_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""542_approveAndCall"" [label=""approveAndCall""];
""542_transferFrom"" [label=""transferFrom""];
""542_approve"" [label=""approve""];
""542_allowance"" [label=""allowance""];
""542_transfer"" -> ""542_safeAdd"";
""542_transferAnyERC20Token"" -> ""542_onlyOwner"";
""542_transfer"" -> ""542_safeSub"";
""542_transferFrom"" -> ""542_safeAdd"";
""542_transferFrom"" -> ""542_safeSub"";
}
"
0x6b31d68c23c27f04d813aa1cb8ac436dc0432971.sol,ERC20,"contract ERC20 { address owner; string public name; string public symbol; uint public decimals; uint public totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value); function ERC20() public { owner = msg.sender; }",1,"subgraph cluster_285_ERC20 {
label=""ERC20"";
""285_setup"" [label=""setup""];
""285_balanceOf"" [label=""balanceOf""];
""285_allowance"" [label=""allowance""];
""285_ERC20"" [label=""ERC20""];
""285_transferFrom"" [label=""transferFrom""];
""285_transfer"" [label=""transfer""];
""285_approve"" [label=""approve""];
}
"
0x2d50c2dd998aab26a666a5e9f15e7f32ad9e8ce1.sol,VOCC_I073_20181211,"contract VOCC_I073_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I073_20181211 {
label=""VOCC_I073_20181211"";
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0xf07d979303c50a8632848cb154c6b30980218c07.sol,PXLProperty,contract PXLProperty is StandardToken { uint8 constant LEVEL_1_MODERATOR = 1; uint8 constant LEVEL_2_MODERATOR = 2; uint8 constant LEVEL_1_ADMIN = 3; uint8 constant LEVEL_2_ADMIN = 4; uint8 constant LEVEL_1_ROOT = 5; uint8 constant LEVEL_2_ROOT = 6; uint8 constant LEVEL_3_ROOT = 7; uint8 constant LEVEL_PROPERTY_DAPPS = 8; uint8 constant LEVEL_PIXEL_PROPERTY = 9; uint8 constant FLAG_NSFW = 1; uint8 constant FLAG_BAN = 2; address pixelPropertyContract; mapping (address => uint8) public regulators; mapping (uint16 => Property) public properties; mapping (address => uint256[2]) public ownerWebsite; mapping (address => uint256[2]) public ownerHoverText; struct Property { uint8 flag; bool isInPrivateMode; address owner; address lastUpdater; uint256[5] colors; uint256 salePrice; uint256 lastUpdate; uint256 becomePublic; uint256 earnUntil; },1,"subgraph cluster_1595_PXLProperty {
label=""PXLProperty"";
""1595_setPixelPropertyContract"" [label=""setPixelPropertyContract""];
""1595_setPropertyEarnUntil"" [label=""setPropertyEarnUntil""];
""1595_getPropertyEarnUntil"" [label=""getPropertyEarnUntil""];
""1595_getPropertyData"" [label=""getPropertyData""];
""1595_setPropertyLastUpdate"" [label=""setPropertyLastUpdate""];
""1595_getPropertyLastUpdater"" [label=""getPropertyLastUpdater""];
""1595_setPropertyPrivateMode"" [label=""setPropertyPrivateMode""];
""1595_setOwnerLink"" [label=""setOwnerLink""];
""1595_rewardPXL"" [label=""rewardPXL""];
""1595_getPropertyPrivateMode"" [label=""getPropertyPrivateMode""];
""1595_getPropertySalePrice"" [label=""getPropertySalePrice""];
""1595_setPropertyOwnerSalePrice"" [label=""setPropertyOwnerSalePrice""];
""1595_setPropertySalePrice"" [label=""setPropertySalePrice""];
""1595_setPropertyLastUpdater"" [label=""setPropertyLastUpdater""];
""1595_setPropertyPrivateModeEarnUntilLastUpdateBecomePublic"" [label=""setPropertyPrivateModeEarnUntilLastUpdateBecomePublic""];
""1595_getPropertyOwner"" [label=""getPropertyOwner""];
""1595_setPropertyLastUpdaterLastUpdate"" [label=""setPropertyLastUpdaterLastUpdate""];
""1595_getPropertyLastUpdaterBecomePublic"" [label=""getPropertyLastUpdaterBecomePublic""];
""1595_setPropertyOwnerSalePricePrivateModeFlag"" [label=""setPropertyOwnerSalePricePrivateModeFlag""];
""1595_getPropertyColorsOfRow"" [label=""getPropertyColorsOfRow""];
""1595_setPropertyOwner"" [label=""setPropertyOwner""];
""1595_setPropertyBecomePublic"" [label=""setPropertyBecomePublic""];
""1595_setPropertyFlag"" [label=""setPropertyFlag""];
""1595_getRegulatorLevel"" [label=""getRegulatorLevel""];
""1595_setOwnerHoverText"" [label=""setOwnerHoverText""];
""1595_setPropertyRowColor"" [label=""setPropertyRowColor""];
""1595_setPropertyBecomePublicEarnUntil"" [label=""setPropertyBecomePublicEarnUntil""];
""1595_burnPXL"" [label=""burnPXL""];
""1595_getPropertyFlag"" [label=""getPropertyFlag""];
""1595_setPropertyColors"" [label=""setPropertyColors""];
""1595_getOwnerHoverText"" [label=""getOwnerHoverText""];
""1595_getPropertyColors"" [label=""getPropertyColors""];
""1595_getPropertyPrivateModeLastUpdateEarnUntil"" [label=""getPropertyPrivateModeLastUpdateEarnUntil""];
""1595_getOwnerLink"" [label=""getOwnerLink""];
""1595_setRegulatorAccessLevel"" [label=""setRegulatorAccessLevel""];
""1595_burnPXLRewardPXLx2"" [label=""burnPXLRewardPXLx2""];
""1595_getPropertyBecomePublic"" [label=""getPropertyBecomePublic""];
""1595_getPropertyLastUpdate"" [label=""getPropertyLastUpdate""];
""1595_setPropertyDAppContract"" [label=""setPropertyDAppContract""];
""1595_getPropertyOwnerSalePrice"" [label=""getPropertyOwnerSalePrice""];
""1595_burnPXLRewardPXL"" [label=""burnPXLRewardPXL""];
""1595_getPropertyPrivateModeBecomePublic"" [label=""getPropertyPrivateModeBecomePublic""];
""1595_PXLProperty"" [label=""PXLProperty""];
""1595_setOwnerHoverText"" -> ""1595_propertyDAppAccess"";
""1595_setPropertyOwnerSalePricePrivateModeFlag"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyOwner"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyBecomePublic"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyBecomePublicEarnUntil"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyEarnUntil"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyLastUpdate"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyPrivateMode"" -> ""1595_pixelPropertyAccess"";
""1595_burnPXLRewardPXL"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyLastUpdaterLastUpdate"" -> ""1595_pixelPropertyAccess"";
""1595_rewardPXL"" -> ""1595_pixelPropertyAccess"";
""1595_burnPXLRewardPXLx2"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyOwnerSalePrice"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyDAppContract"" -> ""1595_regulatorAccess"";
""1595_setPropertyFlag"" -> ""1595_regulatorAccess"";
""1595_burnPXL"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyPrivateModeEarnUntilLastUpdateBecomePublic"" -> ""1595_pixelPropertyAccess"";
""1595_setPixelPropertyContract"" -> ""1595_regulatorAccess"";
""1595_setPropertyColors"" -> ""1595_propertyDAppAccess"";
""1595_setRegulatorAccessLevel"" -> ""1595_regulatorAccess"";
""1595_setPropertySalePrice"" -> ""1595_pixelPropertyAccess"";
""1595_setPropertyRowColor"" -> ""1595_propertyDAppAccess"";
""1595_setOwnerLink"" -> ""1595_propertyDAppAccess"";
""1595_setPropertyLastUpdater"" -> ""1595_pixelPropertyAccess"";
}
"
0x065313f29dc4a4b8b5fc4915059d122065519957.sol,Future1Exchange,contract Future1Exchange { address public adminaddr; mapping (address => mapping(address => uint256)) public dep_token; mapping (address => uint256) public dep_ETH; constructor() public { adminaddr = msg.sender; },1,"subgraph cluster_254_Future1Exchange {
label=""Future1Exchange"";
""254_admin_token_withdraw"" [label=""admin_token_withdraw""];
""254_depositETH"" [label=""depositETH""];
""254_contract_bal"" [label=""contract_bal""];
""254_admin_withdrawETH"" [label=""admin_withdrawETH""];
""254_safeSub"" [label=""safeSub""];
""254_token_transfer"" [label=""token_transfer""];
""254_safeAdd"" [label=""safeAdd""];
""254_constructor"" [label=""constructor""];
""254_balanceOf"" [label=""balanceOf""];
""254_admin_token_withdraw"" -> ""254_safeSub"";
""254_token_transfer"" -> ""254_safeAdd"";
}
"
0x276528880ac7e202f3db20d74402ea0a9c8774a8.sol,ERC20Token,"contract ERC20Token { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor( string _tokenName, string _tokenSymbol, uint8 _decimals, uint256 _totalSupply) public { name = _tokenName; symbol = _tokenSymbol; decimals = _decimals; totalSupply = _totalSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_407_ERC20Token {
label=""ERC20Token"";
""407_approve"" [label=""approve""];
""407__transfer"" [label=""_transfer""];
""407_burn"" [label=""burn""];
""407_transferFrom"" [label=""transferFrom""];
""407_approveAndCall"" [label=""approveAndCall""];
""407_constructor"" [label=""constructor""];
""407_transfer"" [label=""transfer""];
""407_burnFrom"" [label=""burnFrom""];
""407_transferFrom"" -> ""407__transfer"";
""407_transfer"" -> ""407__transfer"";
""407_approveAndCall"" -> ""407_approve"";
}
"
0xc398fb8a6c71a7b130043bf5a3f05d9d51c2cac8.sol,CHAD,"contract CHAD is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CHAD() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x8F210dbB8FADa47bc090d7923E935267BF53160D] = _totalSupply; Transfer(address(0), 0x8F210dbB8FADa47bc090d7923E935267BF53160D, _totalSupply); }",1,"subgraph cluster_543_CHAD {
label=""CHAD"";
""543_fallback"" [label=""fallback""];
""543_CHAD"" [label=""CHAD""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x5b463c4e19358b4eaf010cf24244bf140541a63e.sol,TokenERC20,"contract TokenERC20 is owned { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); uint256 public sellPrice; uint256 public buyPrice; uint minBalanceForAccounts; event FrozenFunds(address target, bool frozen); mapping (address => bool) public frozenAccount; function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_606_TokenERC20 {
label=""TokenERC20"";
""606_burn"" [label=""burn""];
""606_setMinBalance"" [label=""setMinBalance""];
""606_freezeAccount"" [label=""freezeAccount""];
""606_setPrices"" [label=""setPrices""];
""606_sell"" [label=""sell""];
""606__transfer"" [label=""_transfer""];
""606_transfer"" [label=""transfer""];
""606_mintToken"" [label=""mintToken""];
""606_burnFrom"" [label=""burnFrom""];
""606_approve"" [label=""approve""];
""606_approveAndCall"" [label=""approveAndCall""];
""606_TokenERC20"" [label=""TokenERC20""];
""606_buy"" [label=""buy""];
""606_transferFrom"" [label=""transferFrom""];
""606_transferFrom"" -> ""606__transfer"";
""606_transfer"" -> ""606__transfer"";
""606_mintToken"" -> ""606_onlyOwner"";
""606_approveAndCall"" -> ""606_approve"";
""606_freezeAccount"" -> ""606_onlyOwner"";
""606_setPrices"" -> ""606_onlyOwner"";
""606_setMinBalance"" -> ""606_onlyOwner"";
}
"
0x413e0794e1d2e7e26a9536a79a07b2ceb13fb994.sol,SHERE_PFII_II_883,"contract SHERE_PFII_II_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 1219985648835240000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_SHERE_PFII_II_883 {
label=""SHERE_PFII_II_883"";
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x0e9e062d7e60c8a6a406488631dae1c5f6db0e7d.sol,TextMessage,"contract TextMessage is owned { uint cost; bool public enabled; event UpdateCost(uint newCost); event UpdateEnabled(string newStatus); event NewText(string number, string message); function TextMessage() { cost = 380000000000000; enabled = true; }",1,"subgraph cluster_169_TextMessage {
label=""TextMessage"";
""169_enableContract"" [label=""enableContract""];
""169_withdraw"" [label=""withdraw""];
""169_TextMessage"" [label=""TextMessage""];
""169_sendMsg"" [label=""sendMsg""];
""169_sendText"" [label=""sendText""];
""169_costWei"" [label=""costWei""];
""169_pauseContract"" [label=""pauseContract""];
""169_changeCost"" [label=""changeCost""];
""169_pauseContract"" -> ""169_onlyOwner"";
""169_changeCost"" -> ""169_onlyOwner"";
""169_enableContract"" -> ""169_onlyOwner"";
""169_sendText"" -> ""169_sendMsg"";
""169_withdraw"" -> ""169_onlyOwner"";
}
"
0x562f0c1d080be544b3095d02abcdb9786249a416.sol,SEAPORT_Portfolio_V_883,"contract SEAPORT_Portfolio_V_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 926816166179938000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_SEAPORT_Portfolio_V_883 {
label=""SEAPORT_Portfolio_V_883"";
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
}
"
0x28e860cb89e705de876f858671cb757f650fdae2.sol,WEPAYCOIN,"contract WEPAYCOIN { string public name; string public symbol; uint8 public decimals = 2; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenname, string tokenSymbol ) public { totalSupply = initialSupply * 1 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_380_WEPAYCOIN {
label=""WEPAYCOIN"";
""380_burn"" [label=""burn""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_transfer"" [label=""transfer""];
""380_TokenERC20"" [label=""TokenERC20""];
""380_approve"" [label=""approve""];
""380_transferFrom"" [label=""transferFrom""];
""380__transfer"" [label=""_transfer""];
""380_burnFrom"" [label=""burnFrom""];
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0x12ac8d8f0f48b7954bcda736af0576a12dc8c387.sol,OPL,"contract OPL { string public name; string public symbol; uint8 public decimals = 18; bool public adminVer = false; address public owner; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Emission(address indexed from, uint256 value); function OPL() public { totalSupply = 210000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; owner = msg.sender; }",1,"subgraph cluster_488_OPL {
label=""OPL"";
""488__transfer"" [label=""_transfer""];
""488_transfer"" [label=""transfer""];
""488_approve"" [label=""approve""];
""488_OPL"" [label=""OPL""];
""488_checkAdmin"" [label=""checkAdmin""];
""488_emission"" [label=""emission""];
""488_transferOwnership"" [label=""transferOwnership""];
""488_approveAndCall"" [label=""approveAndCall""];
""488_burnWithDecimals"" [label=""burnWithDecimals""];
""488_transferFrom"" [label=""transferFrom""];
""488_burnFrom"" [label=""burnFrom""];
""488_burn"" [label=""burn""];
""488_transferOwnership"" -> ""488_onlyOwner"";
""488_transferFrom"" -> ""488__transfer"";
""488_approveAndCall"" -> ""488_approve"";
""488_checkAdmin"" -> ""488_onlyOwner"";
""488_emission"" -> ""488_onlyOwner"";
""488_transfer"" -> ""488__transfer"";
}
"
0x446f174bc64cbca8b9fe81087798a156cfb863b7.sol,Voting2018,contract Voting2018 is Ownable { string public version = ; struct File { string content; string contentTime; string md5; string sha256; string sha1; string hashTime; },1,"subgraph cluster_217_Voting2018 {
label=""Voting2018"";
""217_setContent"" [label=""setContent""];
""217_getFile"" [label=""getFile""];
""217_setHashes"" [label=""setHashes""];
""217_setContent"" -> ""217_onlyOwner"";
""217_setHashes"" -> ""217_onlyOwner"";
}
"
0x2c1180e2818069e5a9f911e636fb8f3db5106a9f.sol,StandardToken,contract StandardToken is Token { function balanceOf(address _owner) public constant returns (uint256 balance) { return balances[_owner]; },1,"subgraph cluster_245_StandardToken {
label=""StandardToken"";
""245_allowance"" [label=""allowance""];
""245_transferFrom"" [label=""transferFrom""];
""245_balanceOf"" [label=""balanceOf""];
""245_approve"" [label=""approve""];
""245_transfer"" [label=""transfer""];
}
"
0x503a7b43335e035bdfec030d2ef718449d985050.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) public returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_342_StandardToken {
label=""StandardToken"";
""342_transferFrom"" [label=""transferFrom""];
""342_approve"" [label=""approve""];
""342_transfer"" [label=""transfer""];
""342_allowance"" [label=""allowance""];
""342_balanceOf"" [label=""balanceOf""];
}
"
0x2736d225f85740f42d17987100dc8d58e9e16252.sol,ServerRegistry,"contract ServerRegistry { event LogServerRegistered(string url, uint props, address owner, uint deposit); event LogServerUnregisterRequested(string url, address owner, address caller); event LogServerUnregisterCanceled(string url, address owner); event LogServerConvicted(string url, address owner); event LogServerRemoved(string url, address owner); struct In3Server { string url; address owner; uint deposit; uint props; uint128 unregisterTime; uint128 unregisterDeposit; address unregisterCaller; }",1,"subgraph cluster_663_ServerRegistry {
label=""ServerRegistry"";
""663_updateServer"" [label=""updateServer""];
""663_convict"" [label=""convict""];
""663_checkLimits"" [label=""checkLimits""];
""663_requestUnregisteringServer"" [label=""requestUnregisteringServer""];
""663_totalServers"" [label=""totalServers""];
""663_cancelUnregisteringServer"" [label=""cancelUnregisteringServer""];
""663_calcUnregisterDeposit"" [label=""calcUnregisterDeposit""];
""663_confirmUnregisteringServer"" [label=""confirmUnregisteringServer""];
""663_registerServer"" [label=""registerServer""];
""663_removeServer"" [label=""removeServer""];
""663_requestUnregisteringServer"" -> ""663_calcUnregisterDeposit"";
""663_confirmUnregisteringServer"" -> ""663_removeServer"";
""663_registerServer"" -> ""663_checkLimits"";
""663_updateServer"" -> ""663_checkLimits"";
""663_convict"" -> ""663_removeServer"";
}
"
0x5b15a638d1defbf055dc2d7653d5ff1bd5a9494c.sol,CHEMCHINA_PFIII_III_883,"contract CHEMCHINA_PFIII_III_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 960045161637506000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_CHEMCHINA_PFIII_III_883 {
label=""CHEMCHINA_PFIII_III_883"";
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0xd0b13c1195f1c50be0d3be956ff32aaebb48e1e4.sol,FccToken,"contract FccToken is Owned, StandardToken { string public standard = ; string public name = ; string public symbol = ; uint8 public decimals = 8; function FccToken() { balances[msg.sender] = 200000000* 10**8; totalSupply = 200000000* 10**8; locked = false; }",1,"subgraph cluster_460_FccToken {
label=""FccToken"";
""460_fallback"" [label=""fallback""];
""460_FccToken"" [label=""FccToken""];
""460_lock"" [label=""lock""];
""460_unlock"" [label=""unlock""];
""460_issue"" [label=""issue""];
""460_unlock"" -> ""460_onlyOwner"";
""460_lock"" -> ""460_onlyOwner"";
""460_issue"" -> ""460_onlyICO"";
}
"
0x18486c451fdc6eac512d468967f75729d11b89ea.sol,LiteCoinW,contract LiteCoinW is ERC20 { address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalSupply = 84000000 * 10**8; function name() public constant returns (string) { return ; },1,"subgraph cluster_543_LiteCoinW {
label=""LiteCoinW"";
""543_transferOwnership"" [label=""transferOwnership""];
""543_getEthBalance"" [label=""getEthBalance""];
""543_allowance"" [label=""allowance""];
""543_decimals"" [label=""decimals""];
""543_symbol"" [label=""symbol""];
""543_transferFrom"" [label=""transferFrom""];
""543_LiteCoinW"" [label=""LiteCoinW""];
""543_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""543_name"" [label=""name""];
""543_distributeLTCW"" [label=""distributeLTCW""];
""543_finishDistribution"" [label=""finishDistribution""];
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" -> ""543_onlyPayloadSize"";
""543_distributeLTCW"" -> ""543_canDistr"";
""543_transferOwnership"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_onlyPayloadSize"";
""543_finishDistribution"" -> ""543_onlyOwner"";
""543_distributeLTCW"" -> ""543_onlyOwner"";
}
"
0x3a8a6d2bc23fb68a245250ad34019a65cf057418.sol,DiscountPercentToken,"contract DiscountPercentToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function DiscountPercentToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_642_DiscountPercentToken {
label=""DiscountPercentToken"";
""642_setPrices"" [label=""setPrices""];
""642_buy"" [label=""buy""];
""642_mintToken"" [label=""mintToken""];
""642_DiscountPercentToken"" [label=""DiscountPercentToken""];
""642_freezeAccount"" [label=""freezeAccount""];
""642__transfer"" [label=""_transfer""];
""642_sell"" [label=""sell""];
""642_setPrices"" -> ""642_onlyOwner"";
""642_mintToken"" -> ""642_onlyOwner"";
""642_DiscountPercentToken"" -> ""642_TokenERC20"";
""642_freezeAccount"" -> ""642_onlyOwner"";
""642_buy"" -> ""642__transfer"";
""642_sell"" -> ""642__transfer"";
}
"
0xdc8fd6abd32fd9d0dc74e6947aca082658adeb3d.sol,UMIproject,contract UMIproject { address public owner; address public adminAddr; uint constant public MASS_TRANSACTION_LIMIT = 150; uint constant public MINIMUM_INVEST = 10000000000000000 wei; uint constant public INTEREST = 3; uint public depositAmount; uint public round; uint public lastPaymentDate; UMIBiggestInvestor public umiBiggestInvestor; address[] public addresses; mapping(address => Investor) public investors; bool public pause; struct Investor { uint id; uint deposit; uint deposits; uint date; address referrer; },1,"subgraph cluster_778_UMIproject {
label=""UMIproject"";
""778_addInvestors"" [label=""addInvestors""];
""778_getInvestorCount"" [label=""getInvestorCount""];
""778_getInvestorDividendsAmount"" [label=""getInvestorDividendsAmount""];
""778_payoutSelf"" [label=""payoutSelf""];
""778_constructor"" [label=""constructor""];
""778_bytesToAddress"" [label=""bytesToAddress""];
""778_payout"" [label=""payout""];
""778_doRestart"" [label=""doRestart""];
""778_fallback"" [label=""fallback""];
""778_transferOwnership"" [label=""transferOwnership""];
""778_addInvestors"" -> ""778_onlyOwner"";
""778_payout"" -> ""778_getInvestorDividendsAmount"";
""778_payout"" -> ""778_doRestart"";
""778_fallback"" -> ""778_payoutSelf"";
""778_transferOwnership"" -> ""778_onlyOwner"";
""778_payoutSelf"" -> ""778_getInvestorDividendsAmount"";
""778_fallback"" -> ""778_bytesToAddress"";
}
"
0xb3939627b9775c3b76c05138d281c7f92e251aab.sol,LespNetWork,"contract LespNetWork { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_463_LespNetWork {
label=""LespNetWork"";
""463_constructor"" [label=""constructor""];
""463_allowance"" [label=""allowance""];
""463_transferFrom"" [label=""transferFrom""];
""463_approve"" [label=""approve""];
""463_setLock"" [label=""setLock""];
""463_transferOwnership"" [label=""transferOwnership""];
""463_balanceOf"" [label=""balanceOf""];
""463_transfer"" [label=""transfer""];
""463_setLock"" -> ""463_onlyOwner"";
""463_transferOwnership"" -> ""463_onlyOwner"";
}
"
0x1cae8c6ec705520b11f10f773b7010958363318e.sol,Hermes,contract Hermes { using MathForInterset for uint; uint constant public MINIMUM_INVEST = 10000000000000000 wei; uint public DAY_VALUE = 0; uint public DAY_LIMIT = 200 ether; uint public DEPOSIT_AMOUNT; uint public PERCENT_FOR_MARKETING = 1500000000; address[] public ADDRESSES; mapping(address => Investor) public INVESTORS; address public ADMIN_ADDR; struct Investor { uint id; uint percentCount; uint deposit; uint date; address referrer; uint reinvestID; uint actualValue; uint stage; uint startReinvestDate; uint dayLimitValue; },1,"subgraph cluster_1448_Hermes {
label=""Hermes"";
""1448_constructor"" [label=""constructor""];
""1448_bytesToAddress"" [label=""bytesToAddress""];
""1448_fallback"" [label=""fallback""];
""1448_Invest"" [label=""Invest""];
""1448_paySelfByAddress"" [label=""paySelfByAddress""];
""1448_payAll"" [label=""payAll""];
""1448_fallback"" -> ""1448_Invest"";
""1448_Invest"" -> ""1448_paySelfByAddress"";
""1448_Invest"" -> ""1448_payAll"";
""1448_fallback"" -> ""1448_bytesToAddress"";
""1448_payAll"" -> ""1448_paySelfByAddress"";
}
"
0x009b40aab0ec2d4abd696db7b0cfce5c24eb9114.sol,CAMToken,"contract CAMToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 200000000000000000000000000; balances[0x24808Ba8EEa4634d00b0CE9fF7033D6d93CEcFcE] = _totalSupply; emit Transfer(address(0), 0x24808Ba8EEa4634d00b0CE9fF7033D6d93CEcFcE, _totalSupply); }",1,"subgraph cluster_543_CAMToken {
label=""CAMToken"";
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_constructor"" [label=""constructor""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x70e29c7124585a20ede4e78b615d3a3b2b4dad5c.sol,DefensorWallet,"contract DefensorWallet is ERC20, Owner { string public name; string public symbol; uint8 public decimals; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; struct FrozenToken { bool isFrozenAll; uint256 amount; uint256 unfrozenDate; }",1,"subgraph cluster_500_DefensorWallet {
label=""DefensorWallet"";
""500_allowance"" [label=""allowance""];
""500_kill"" [label=""kill""];
""500_freezeAccountToken"" [label=""freezeAccountToken""];
""500_freezeAccountOf"" [label=""freezeAccountOf""];
""500_balanceOf"" [label=""balanceOf""];
""500_transfer"" [label=""transfer""];
""500_isAccountFreeze"" [label=""isAccountFreeze""];
""500_freezeAccount"" [label=""freezeAccount""];
""500_changeOwner"" [label=""changeOwner""];
""500_transferFrom"" [label=""transferFrom""];
""500_DefensorWallet"" [label=""DefensorWallet""];
""500_approve"" [label=""approve""];
""500_freezeAccountToken"" -> ""500_onlyOwner"";
""500_kill"" -> ""500_onlyOwner"";
""500_changeOwner"" -> ""500_onlyOwner"";
""500_freezeAccount"" -> ""500_onlyOwner"";
}
"
0x3420894bf786866a09937b0369d5b4781870c21f.sol,LikeCoin,"contract LikeCoin is ERC20, HasOperator { using SafeMath for uint256; string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 public supply = 0; mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; address public crowdsaleAddr = 0x0; address public contributorPoolAddr = 0x0; uint256 public contributorPoolMintQuota = 0; address[] public creatorsPoolAddrs; mapping(address => bool) isCreatorsPool; uint256 public creatorsPoolMintQuota = 0; mapping(address => uint256) public lockedBalances; uint public unlockTime = 0; SignatureChecker public signatureChecker = SignatureChecker(0x0); bool public signatureCheckerFreezed = false; address public signatureOwner = 0x0; bool public allowDelegate = true; mapping (address => mapping (uint256 => bool)) public usedNonce; mapping (address => bool) public transferAndCallWhitelist; event Lock(address indexed _addr, uint256 _value); event SignatureCheckerChanged(address _newSignatureChecker); function LikeCoin(uint256 _initialSupply, address _signatureOwner, address _sigCheckerAddr) public { supply = _initialSupply; balances[owner] = _initialSupply; signatureOwner = _signatureOwner; signatureChecker = SignatureChecker(_sigCheckerAddr); Transfer(0x0, owner, _initialSupply); }",1,"subgraph cluster_1696_LikeCoin {
label=""LikeCoin"";
""1696_switchDelegate"" [label=""switchDelegate""];
""1696_transfer"" [label=""transfer""];
""1696__transfer"" [label=""_transfer""];
""1696_transferDelegated"" [label=""transferDelegated""];
""1696_registerContributorPool"" [label=""registerContributorPool""];
""1696_registerCreatorsPools"" [label=""registerCreatorsPools""];
""1696_transferAndCall"" [label=""transferAndCall""];
""1696_transferMultipleDelegated"" [label=""transferMultipleDelegated""];
""1696__transferMultiple"" [label=""_transferMultiple""];
""1696_allowance"" [label=""allowance""];
""1696_totalSupply"" [label=""totalSupply""];
""1696_setSignatureChecker"" [label=""setSignatureChecker""];
""1696_removeTransferAndCallWhitelist"" [label=""removeTransferAndCallWhitelist""];
""1696__tryUnlockBalance"" [label=""_tryUnlockBalance""];
""1696_transferAndCallDelegated"" [label=""transferAndCallDelegated""];
""1696_mintForCreatorsPool"" [label=""mintForCreatorsPool""];
""1696_freezeSignatureChecker"" [label=""freezeSignatureChecker""];
""1696_LikeCoin"" [label=""LikeCoin""];
""1696_addTransferAndCallWhitelist"" [label=""addTransferAndCallWhitelist""];
""1696_transferMultiple"" [label=""transferMultiple""];
""1696_approve"" [label=""approve""];
""1696_registerCrowdsales"" [label=""registerCrowdsales""];
""1696_transferAndLock"" [label=""transferAndLock""];
""1696_balanceOf"" [label=""balanceOf""];
""1696_mintForContributorPool"" [label=""mintForContributorPool""];
""1696__transferAndCall"" [label=""_transferAndCall""];
""1696__isContract"" [label=""_isContract""];
""1696_transferFrom"" [label=""transferFrom""];
""1696_burn"" [label=""burn""];
""1696_transferMultipleDelegated"" -> ""1696__transferMultiple"";
""1696_transferAndCall"" -> ""1696__transferAndCall"";
""1696__transfer"" -> ""1696__tryUnlockBalance"";
""1696__transferAndCall"" -> ""1696__isContract"";
""1696_transferDelegated"" -> ""1696__transfer"";
""1696_registerContributorPool"" -> ""1696__isContract"";
""1696_registerCrowdsales"" -> ""1696__isContract"";
""1696_transferMultiple"" -> ""1696__transferMultiple"";
""1696_removeTransferAndCallWhitelist"" -> ""1696_ownerOrOperator"";
""1696_registerCrowdsales"" -> ""1696_onlyOwner"";
""1696_registerCreatorsPools"" -> ""1696_onlyOwner"";
""1696_transferFrom"" -> ""1696__transfer"";
""1696_transferDelegated"" -> ""1696_isDelegated"";
""1696_registerCreatorsPools"" -> ""1696__isContract"";
""1696_transferMultipleDelegated"" -> ""1696_isDelegated"";
""1696_switchDelegate"" -> ""1696_ownerOrOperator"";
""1696__transferMultiple"" -> ""1696__tryUnlockBalance"";
""1696__transferAndCall"" -> ""1696__transfer"";
""1696_transfer"" -> ""1696__transfer"";
""1696_addTransferAndCallWhitelist"" -> ""1696__isContract"";
""1696_addTransferAndCallWhitelist"" -> ""1696_ownerOrOperator"";
""1696_transferAndCallDelegated"" -> ""1696__transferAndCall"";
""1696_registerContributorPool"" -> ""1696_onlyOwner"";
""1696_transferAndCallDelegated"" -> ""1696_isDelegated"";
}
"
0x1fdedef5c2da1ed9db44d80003a9592dfa18163c.sol,Syndicate,contract Syndicate is Ownable{ uint256 public numberSyndicateMembers; uint256 public totalSyndicateShares = 20000; uint256 public playersShareAllocation = 5000; uint256 public availableBuyInShares = 5000; uint256 public minimumBuyIn = 10; uint256 public buyInSharePrice = 1000000000000000; uint256 public shareCycleSessionSize = 1000; uint256 public shareCycleIndex = 0; uint256 public shareCycle = 1; uint256 public currentSyndicateValue = 0; uint256 public precision = 1000000000000000; uint256 public maxCyclePlayersConsidered = 100; address[] public cyclePlayers; uint256 public numberOfCyclePlayers = 0; struct somePlayer { uint256 playCount; uint256 profitShare; uint256 shareCycle; uint256 winnings; },1,"subgraph cluster_869_Syndicate {
label=""Syndicate"";
""869_roundIt"" [label=""roundIt""];
""869_claimPlayerWinnings"" [label=""claimPlayerWinnings""];
""869_playerStatus"" [label=""playerStatus""];
""869_setShareCycleSessionSize"" [label=""setShareCycleSessionSize""];
""869_insertCyclePlayer"" [label=""insertCyclePlayer""];
""869_addMember"" [label=""addMember""];
""869_allocateWinnings"" [label=""allocateWinnings""];
""869_updatePlayCount"" [label=""updatePlayCount""];
""869_Syndicate"" [label=""Syndicate""];
""869_setMaxCyclePlayersConsidered"" [label=""setMaxCyclePlayersConsidered""];
""869_claimPlayerProfit"" [label=""claimPlayerProfit""];
""869_buyIntoSyndicate"" [label=""buyIntoSyndicate""];
""869_memberShareCount"" [label=""memberShareCount""];
""869_min"" [label=""min""];
""869_allocateShares"" [label=""allocateShares""];
""869_distributeProfit"" [label=""distributeProfit""];
""869_memberProfitShare"" [label=""memberProfitShare""];
""869_claimProfit"" [label=""claimProfit""];
""869_setMaxCyclePlayersConsidered"" -> ""869_onlyOwner"";
""869_distributeProfit"" -> ""869_min"";
""869_buyIntoSyndicate"" -> ""869_addMember"";
""869_allocateShares"" -> ""869_addMember"";
""869_distributeProfit"" -> ""869_roundIt"";
""869_setShareCycleSessionSize"" -> ""869_onlyOwner"";
""869_updatePlayCount"" -> ""869_insertCyclePlayer"";
""869_allocateShares"" -> ""869_onlyOwner"";
}
"
0x5287b19bf61a4f9375d1f6624565db164bcb0208.sol,ARBITRAGING,"contract ARBITRAGING is ERC20Interface,Ownable { using SafeMath for uint256; uint256 public totalSupply; mapping(address => uint256) tokenBalances; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 10000000; address ownerWallet; mapping (address => mapping (address => uint256)) allowed; event Debug(string message, address addr, uint256 number); function ARBITRAGING (address wallet) public { owner = msg.sender; ownerWallet=wallet; totalSupply = INITIAL_SUPPLY * 10 ** 18; tokenBalances[wallet] = INITIAL_SUPPLY * 10 ** 18; }",1,"subgraph cluster_764_ARBITRAGING {
label=""ARBITRAGING"";
""764_ARBITRAGING"" [label=""ARBITRAGING""];
""764_increaseApproval"" [label=""increaseApproval""];
""764_transfer"" [label=""transfer""];
""764_totalSupply"" [label=""totalSupply""];
""764_showMyTokenBalance"" [label=""showMyTokenBalance""];
""764_balanceOf"" [label=""balanceOf""];
""764_allowance"" [label=""allowance""];
""764_decreaseApproval"" [label=""decreaseApproval""];
""764_approve"" [label=""approve""];
""764_mint"" [label=""mint""];
""764_pullBack"" [label=""pullBack""];
""764_fallback"" [label=""fallback""];
""764_transferFrom"" [label=""transferFrom""];
""764_pullBack"" -> ""764_onlyOwner"";
""764_mint"" -> ""764_onlyOwner"";
}
"
0x03684715e3a614ec80d1b31b62987e0b25925999.sol,GWGFPLUS,"contract GWGFPLUS { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function GWGFPLUS( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_GWGFPLUS {
label=""GWGFPLUS"";
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_GWGFPLUS"" [label=""GWGFPLUS""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x0669398307efefb60030ff328a0cb6a3a840182c.sol,CelerNetwork,"contract CelerNetwork is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CelerNetwork() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 1 weeks; endDate = now + 7 weeks; }",1,"subgraph cluster_609_CelerNetwork {
label=""CelerNetwork"";
""609_transferFrom"" [label=""transferFrom""];
""609_balanceOf"" [label=""balanceOf""];
""609_transfer"" [label=""transfer""];
""609_approve"" [label=""approve""];
""609_CelerNetwork"" [label=""CelerNetwork""];
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_totalSupply"" [label=""totalSupply""];
""609_allowance"" [label=""allowance""];
""609_fallback"" [label=""fallback""];
""609_transfer"" -> ""609_safeSub"";
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
""609_transferFrom"" -> ""609_safeSub"";
""609_transfer"" -> ""609_safeAdd"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_fallback"" -> ""609_safeAdd"";
}
"
0x5b29a6277c996b477d6632e60eef41268311ce1c.sol,Dragon,"contract Dragon is ERC20 { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping( address => uint256) public balanceOf; mapping( uint => address) public accountIndex; uint accountCount; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed spender, uint value); event Message ( address a, uint256 amount ); event Burn(address indexed from, uint256 value); function Dragon() { uint supply = 500000000; appendTokenHolders( msg.sender ); balanceOf[msg.sender] = supply; totalSupply = supply; name = ; symbol = ; decimals = 0; }",1,"subgraph cluster_535_Dragon {
label=""Dragon"";
""535_approveAndCall"" [label=""approveAndCall""];
""535_getAccountCount"" [label=""getAccountCount""];
""535_appendTokenHolders"" [label=""appendTokenHolders""];
""535_Dragon"" [label=""Dragon""];
""535_transferFrom"" [label=""transferFrom""];
""535_burn"" [label=""burn""];
""535_balanceOf"" [label=""balanceOf""];
""535_totalSupply"" [label=""totalSupply""];
""535_allowance"" [label=""allowance""];
""535_transfer"" [label=""transfer""];
""535_burnFrom"" [label=""burnFrom""];
""535_getAddress"" [label=""getAddress""];
""535_approve"" [label=""approve""];
""535_Dragon"" -> ""535_appendTokenHolders"";
""535_transfer"" -> ""535_appendTokenHolders"";
""535_transferFrom"" -> ""535_appendTokenHolders"";
""535_approveAndCall"" -> ""535_approve"";
}
"
0x37d9033151eaf64cea6b7531ee0e4fd6f6f9d6d0.sol,EthCrystal,contract EthCrystal { using SafeMath for *; struct TowersInfoList { string name; uint256 timeLimit; uint256 warriorToTime; uint256 currentRoundID; uint256 growthCoefficient; uint256 winnerShare; uint256 nextRound; uint256 dividendShare; mapping (uint256 => TowersInfo) RoundList; },1,"subgraph cluster_1370_EthCrystal {
label=""EthCrystal"";
""1370__playerRoundsInfo"" [label=""_playerRoundsInfo""];
""1370_buyWarriors"" [label=""buyWarriors""];
""1370__playerInfo"" [label=""_playerInfo""];
""1370_newRound"" [label=""newRound""];
""1370_referralCashout"" [label=""referralCashout""];
""1370_dividendCashout"" [label=""dividendCashout""];
""1370_constructor"" [label=""constructor""];
""1370_setNickname"" [label=""setNickname""];
""1370__playerBalance"" [label=""_playerBalance""];
""1370__TowerRoundDetails"" [label=""_TowerRoundDetails""];
""1370__currentPlayerAmountUnclaimed"" [label=""_currentPlayerAmountUnclaimed""];
""1370_buyWarriors"" -> ""1370_newRound"";
""1370__playerRoundsInfo"" -> ""1370__currentPlayerAmountUnclaimed"";
""1370_buyWarriors"" -> ""1370_setNickname"";
""1370_constructor"" -> ""1370_newRound"";
}
"
0x6f328f0a7cd638cda9fed876abf71423ca109fe1.sol,TokenERC20,"contract TokenERC20 is owned { string public name; string public symbol; uint8 public decimals = 0; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event FrozenFunds(address target, bool frozen); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_529_TokenERC20 {
label=""TokenERC20"";
""529_approve"" [label=""approve""];
""529_TokenERC20"" [label=""TokenERC20""];
""529_internaltransfer"" [label=""internaltransfer""];
""529_burnFrom"" [label=""burnFrom""];
""529_burn"" [label=""burn""];
""529__transfer"" [label=""_transfer""];
""529_transferFrom"" [label=""transferFrom""];
""529_freezeAccount"" [label=""freezeAccount""];
""529_approveAndCall"" [label=""approveAndCall""];
""529_transfer"" [label=""transfer""];
""529_mintToken"" [label=""mintToken""];
""529_transferFrom"" -> ""529__transfer"";
""529_transfer"" -> ""529_internaltransfer"";
""529_freezeAccount"" -> ""529_onlyOwner"";
""529_approveAndCall"" -> ""529_approve"";
""529_mintToken"" -> ""529_onlyOwner"";
}
"
0x454a5244556e044ad6ecfcf3f59290fae47484e8.sol,Data,contract Data is Ownable { mapping (address => address) private parent; mapping (address => uint8) public statuses; mapping (address => uint) public referralDeposits; mapping(address => uint256) private balances; mapping(address => uint256) private investorBalances; function parentOf(address _addr) public constant returns (address) { return parent[_addr]; },1,"subgraph cluster_712_Data {
label=""Data"";
""712_referralDeposits"" [label=""referralDeposits""];
""712_addReferralDeposit"" [label=""addReferralDeposit""];
""712_investorBalanceOf"" [label=""investorBalanceOf""];
""712_addBalance"" [label=""addBalance""];
""712_subtrBalance"" [label=""subtrBalance""];
""712_setParent"" [label=""setParent""];
""712_parentOf"" [label=""parentOf""];
""712_statuses"" [label=""statuses""];
""712_setStatus"" [label=""setStatus""];
""712_addInvestorBalance"" [label=""addInvestorBalance""];
""712_subtrInvestorBalance"" [label=""subtrInvestorBalance""];
""712_balanceOf"" [label=""balanceOf""];
""712_Data"" [label=""Data""];
""712_subtrInvestorBalance"" -> ""712_onlyOwner"";
""712_setStatus"" -> ""712_onlyOwner"";
""712_setParent"" -> ""712_onlyOwner"";
""712_subtrBalance"" -> ""712_onlyOwner"";
""712_addInvestorBalance"" -> ""712_onlyOwner"";
""712_addReferralDeposit"" -> ""712_onlyOwner"";
""712_addBalance"" -> ""712_onlyOwner"";
}
"
0x6ec2e2e2bd43d4deaa883533f80ea61682236073.sol,HACHIKO,"contract HACHIKO is Ownable { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor() public { totalSupply = 10000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_400_HACHIKO {
label=""HACHIKO"";
""400_approveAndCall"" [label=""approveAndCall""];
""400_constructor"" [label=""constructor""];
""400_burn"" [label=""burn""];
""400__transfer"" [label=""_transfer""];
""400_transferFrom"" [label=""transferFrom""];
""400_approve"" [label=""approve""];
""400_burnFrom"" [label=""burnFrom""];
""400_transfer"" [label=""transfer""];
""400_approveAndCall"" -> ""400_approve"";
""400_transfer"" -> ""400__transfer"";
""400_transferFrom"" -> ""400__transfer"";
}
"
0x5409fcd56836e0e0459c12ab45e7ef23c6094bed.sol,RedExchange,contract RedExchange { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_40_AcceptsRedExchange {
label=""AcceptsRedExchange"";
""40_AcceptsExchange"" [label=""AcceptsExchange""];
""40_tokenFallback"" [label=""tokenFallback""];
}
"
0x6f2deef18421ba39065223b23ef38666b3052a46.sol,Marine,contract Marine is ERC20Standard { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant maxSupply = 1000000000 * (10 ** uint256(decimals)); uint256 public MRNToEth; uint256 public ethInWei; address public devWallet; function Marine () public { totalSupply = maxSupply; balances[msg.sender] = maxSupply; MRNToEth = 20000000; devWallet = msg.sender; },1,"subgraph cluster_600_Marine {
label=""Marine"";
""600_Marine"" [label=""Marine""];
""600_fallback"" [label=""fallback""];
}
"
0xbdae4cb65e1c68cd9cd41b73c93ae3d331acad5c.sol,Vote,"contract Vote is Ownable { event CandidateRegistered(uint candidateId, string candidateName, string candidateDescription); event VoteCast(uint candidateId); struct Candidate { uint candidateId; string candidateName; string candidateDescription; }",1,"subgraph cluster_232_Vote {
label=""Vote"";
""232_registerCandidate"" [label=""registerCandidate""];
""232_castVote"" [label=""castVote""];
""232_Vote"" [label=""Vote""];
""232_candidateInformation"" [label=""candidateInformation""];
""232_registerCandidate"" -> ""232_onlyOwner"";
}
"
0x2a8cef60776d931eb1200aa2a9877eb091cb34a7.sol,TTC,"contract TTC { event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address admin; mapping (address => bool) admin_list; function TTC( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { admin = msg.sender; admin_list[admin] = true; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_331_TTC {
label=""TTC"";
""331_transfer"" [label=""transfer""];
""331_TTC"" [label=""TTC""];
""331_admin_setAdmin"" [label=""admin_setAdmin""];
""331_approve"" [label=""approve""];
""331_admin_transfer"" [label=""admin_transfer""];
""331_allowance"" [label=""allowance""];
""331_transferFrom"" [label=""transferFrom""];
""331_balanceOf"" [label=""balanceOf""];
}
"
0x548d32216d01617452892ea360bfce9ce8dc9729.sol,ChemistryBase,contract ChemistryBase is Ownable { struct Element{ bytes32 symbol; },1,"subgraph cluster_486_ChemistryBase {
label=""ChemistryBase"";
""486_addAuthorization"" [label=""addAuthorization""];
""486__transfer"" [label=""_transfer""];
""486_transferOwnership"" [label=""transferOwnership""];
""486_setTableSize"" [label=""setTableSize""];
""486__createElement"" [label=""_createElement""];
""486_removeAuthorization"" [label=""removeAuthorization""];
""486_addAuthorization"" -> ""486_onlyOwner"";
""486_setTableSize"" -> ""486_onlyOwner"";
""486_removeAuthorization"" -> ""486_onlyOwner"";
""486__createElement"" -> ""486__transfer"";
""486_transferOwnership"" -> ""486_onlyOwner"";
""486_transferOwnership"" -> ""486_transferOwnership"";
}
"
0xa42c5aa9735eca0db714f02de9dc2a56e405dae7.sol,BCT,contract BCT is owned { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 minBalanceForAccounts; bool public usersCanTrade; bool public usersCanUnfreeze; bool public ico = true; mapping (address => bool) public admin; modifier notICO { require(admin[msg.sender] || !ico); _; },1,"subgraph cluster_1271_BCT {
label=""BCT"";
""1271_burn"" [label=""burn""];
""1271_BCT"" [label=""BCT""];
""1271_approve"" [label=""approve""];
""1271_freeze"" [label=""freeze""];
""1271_withdraw"" [label=""withdraw""];
""1271_burnFrom"" [label=""burnFrom""];
""1271_reward"" [label=""reward""];
""1271_transferReward"" [label=""transferReward""];
""1271_fallback"" [label=""fallback""];
""1271_setCanTrade"" [label=""setCanTrade""];
""1271_unlockReward"" [label=""unlockReward""];
""1271_setUsersCanTrade"" [label=""setUsersCanTrade""];
""1271_setICO"" [label=""setICO""];
""1271_usersCanUnFreeze"" [label=""usersCanUnFreeze""];
""1271__freeze"" [label=""_freeze""];
""1271_setMinBalance"" [label=""setMinBalance""];
""1271_approveAndCall"" [label=""approveAndCall""];
""1271_setAdmin"" [label=""setAdmin""];
""1271_buy"" [label=""buy""];
""1271_transferFrom"" [label=""transferFrom""];
""1271_setPrices"" [label=""setPrices""];
""1271__transfer"" [label=""_transfer""];
""1271_sell"" [label=""sell""];
""1271_transfer"" [label=""transfer""];
""1271_transferAndFreeze"" [label=""transferAndFreeze""];
""1271_increaseTotalSupply"" [label=""increaseTotalSupply""];
""1271_transfer"" -> ""1271_notICO"";
""1271_transferAndFreeze"" -> ""1271__transfer"";
""1271_setCanTrade"" -> ""1271_onlyOwner"";
""1271_burn"" -> ""1271_onlyOwner"";
""1271_increaseTotalSupply"" -> ""1271_onlyOwner"";
""1271_transfer"" -> ""1271__transfer"";
""1271_setPrices"" -> ""1271_onlyOwner"";
""1271_transfer"" -> ""1271_sell"";
""1271_transferFrom"" -> ""1271__transfer"";
""1271_transferReward"" -> ""1271_sell"";
""1271_setAdmin"" -> ""1271_onlyOwner"";
""1271_setMinBalance"" -> ""1271_onlyOwner"";
""1271_transferAndFreeze"" -> ""1271_freeze"";
""1271_approveAndCall"" -> ""1271_onlyOwner"";
""1271_withdraw"" -> ""1271_onlyOwner"";
""1271_setUsersCanTrade"" -> ""1271_onlyOwner"";
""1271_setICO"" -> ""1271_onlyOwner"";
""1271_reward"" -> ""1271__transfer"";
""1271_approveAndCall"" -> ""1271_approve"";
""1271_unlockReward"" -> ""1271_sell"";
""1271_reward"" -> ""1271_sell"";
""1271_transferAndFreeze"" -> ""1271_onlyAdmin"";
""1271_freeze"" -> ""1271__freeze"";
}
"
0x0dea9b8e6bf08d6859e29256942916f0cfb884fb.sol,CryptoAllStars,"contract CryptoAllStars is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public personIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public personIndexToApproved; mapping (uint256 => uint256) private personIndexToPrice; address public ceo = 0x047F606fD5b2BaA5f5C6c4aB8958E45CB6B054B7; uint256 public promoCreatedCount; struct Person { string name; }",1,"subgraph cluster_912_CryptoAllStars {
label=""CryptoAllStars"";
""912_setOwner"" [label=""setOwner""];
""912_totalSupply"" [label=""totalSupply""];
""912__createPerson"" [label=""_createPerson""];
""912__owns"" [label=""_owns""];
""912__transfer"" [label=""_transfer""];
""912_symbol"" [label=""symbol""];
""912__payout"" [label=""_payout""];
""912_tokensOfOwner"" [label=""tokensOfOwner""];
""912__approved"" [label=""_approved""];
""912_createPromoPerson"" [label=""createPromoPerson""];
""912_approve"" [label=""approve""];
""912_createContractPerson"" [label=""createContractPerson""];
""912_balanceOf"" [label=""balanceOf""];
""912_ownerOf"" [label=""ownerOf""];
""912_name"" [label=""name""];
""912_getPerson"" [label=""getPerson""];
""912_priceOf"" [label=""priceOf""];
""912_payout"" [label=""payout""];
""912_transfer"" [label=""transfer""];
""912_purchase"" [label=""purchase""];
""912_implementsERC721"" [label=""implementsERC721""];
""912_takeOwnership"" [label=""takeOwnership""];
""912_transferFrom"" [label=""transferFrom""];
""912__addressNotNull"" [label=""_addressNotNull""];
""912_takeOwnership"" -> ""912__transfer"";
""912_purchase"" -> ""912__transfer"";
""912_setOwner"" -> ""912_onlyCeo"";
""912_transfer"" -> ""912__transfer"";
""912_payout"" -> ""912__payout"";
""912_tokensOfOwner"" -> ""912_totalSupply"";
""912__createPerson"" -> ""912__transfer"";
""912_transferFrom"" -> ""912__transfer"";
""912_takeOwnership"" -> ""912__approved"";
""912_transfer"" -> ""912__owns"";
""912_transfer"" -> ""912__addressNotNull"";
""912_transferFrom"" -> ""912__owns"";
""912_purchase"" -> ""912__addressNotNull"";
""912_approve"" -> ""912__owns"";
""912_createContractPerson"" -> ""912__createPerson"";
""912_createPromoPerson"" -> ""912_onlyCeo"";
""912_payout"" -> ""912_onlyCeo"";
""912_takeOwnership"" -> ""912__addressNotNull"";
""912_createPromoPerson"" -> ""912__createPerson"";
""912_createContractPerson"" -> ""912_onlyCeo"";
""912_tokensOfOwner"" -> ""912_balanceOf"";
""912_transferFrom"" -> ""912__approved"";
""912_transferFrom"" -> ""912__addressNotNull"";
}
"
0xb42f5366792ed7c08995451c1a93780b7554762b.sol,MyAdvancedToken,"contract MyAdvancedToken is developed, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_770_MyAdvancedToken {
label=""MyAdvancedToken"";
""770_freezeAccount"" [label=""freezeAccount""];
""770_setPrices"" [label=""setPrices""];
""770_buy"" [label=""buy""];
""770__transfer"" [label=""_transfer""];
""770_constructor"" [label=""constructor""];
""770_mintToken"" [label=""mintToken""];
""770_sell"" [label=""sell""];
""770_mintToken"" -> ""770_onlyDeveloper"";
""770_sell"" -> ""770__transfer"";
""770_buy"" -> ""770__transfer"";
""770_setPrices"" -> ""770_onlyDeveloper"";
""770_freezeAccount"" -> ""770_onlyDeveloper"";
""770_constructor"" -> ""770_constructor"";
}
"
0x9222740a4351abda9d83f3c7165c556e802f920e.sol,StandardToken,"contract StandardToken is ERC20, SafeMath { event Transfer(address indexed from, address indexed to, uint indexed value, bytes data); event Minted(address receiver, uint amount); mapping(address => uint) balances; mapping (address => mapping (address => uint)) allowed; modifier onlyPayloadSize(uint size) { if(msg.data.length != size + 4) { revert(); }",1,"subgraph cluster_570_StandardToken {
label=""StandardToken"";
""570_transferFrom"" [label=""transferFrom""];
""570_isContract"" [label=""isContract""];
""570_allowance"" [label=""allowance""];
""570_transfer"" [label=""transfer""];
""570_balanceOf"" [label=""balanceOf""];
""570_approve"" [label=""approve""];
""570_transfer"" -> ""570_safeAdd"";
""570_transfer"" -> ""570_safeSub"";
""570_transfer"" -> ""570_onlyPayloadSize"";
""570_transfer"" -> ""570_transfer"";
""570_transfer"" -> ""570_isContract"";
""570_transferFrom"" -> ""570_safeAdd"";
""570_transferFrom"" -> ""570_safeSub"";
}
"
0x35fd00d47202b1b2158dba75e7cc8f71b068c256.sol,WhiteList,"contract WhiteList is Ownable { mapping(address => bool) public whiteList; uint public totalWhiteListed; event LogWhiteListed(address indexed user, uint whiteListedNum); event LogWhiteListedMultiple(uint whiteListedNum); event LogRemoveWhiteListed(address indexed user); function isWhiteListed(address _user) external view returns (bool) { return whiteList[_user]; }",1,"subgraph cluster_406_WhiteList {
label=""WhiteList"";
""406_isWhiteListed"" [label=""isWhiteListed""];
""406_removeFromWhiteList"" [label=""removeFromWhiteList""];
""406_addToWhiteListMultiple"" [label=""addToWhiteListMultiple""];
""406_addToWhiteList"" [label=""addToWhiteList""];
""406_addToWhiteListMultiple"" -> ""406_onlyOwner"";
""406_removeFromWhiteList"" -> ""406_onlyOwner"";
""406_addToWhiteList"" -> ""406_onlyOwner"";
}
"
0xd41d48be0a81690a785bf1df336163f7b78eadca.sol,Crypland,contract Crypland { struct Element {uint worth; uint level; uint cooldown;},1,"subgraph cluster_1579_Crypland {
label=""Crypland"";
""1579_publicGetElement"" [label=""publicGetElement""];
""1579_ownerWithdraw"" [label=""ownerWithdraw""];
""1579_calcAssetBuyPrice"" [label=""calcAssetBuyPrice""];
""1579_userAssignElement"" [label=""userAssignElement""];
""1579_calcElementCooldown"" [label=""calcElementCooldown""];
""1579_calcAssetWorthIndex"" [label=""calcAssetWorthIndex""];
""1579_ownerDestroy"" [label=""ownerDestroy""];
""1579_ownerUnpause"" [label=""ownerUnpause""];
""1579_publicGetElementOffer"" [label=""publicGetElementOffer""];
""1579_userOfferCancelElement"" [label=""userOfferCancelElement""];
""1579_userOfferAcceptElement"" [label=""userOfferAcceptElement""];
""1579_userUpgradeElement"" [label=""userUpgradeElement""];
""1579_calcElementCurrentPrice"" [label=""calcElementCurrentPrice""];
""1579_calcAssetMax"" [label=""calcAssetMax""];
""1579_ownerPause"" [label=""ownerPause""];
""1579_publicGetAsset"" [label=""publicGetAsset""];
""1579_calcAssetUpgradePrice"" [label=""calcAssetUpgradePrice""];
""1579_calcAssetAssigned"" [label=""calcAssetAssigned""];
""1579_userOfferSubmitElement"" [label=""userOfferSubmitElement""];
""1579_calcElementWorth"" [label=""calcElementWorth""];
""1579_Crypland"" [label=""Crypland""];
""1579_ownerDestroy"" -> ""1579_whenOwner"";
""1579_publicGetAsset"" -> ""1579_calcAssetWorthIndex"";
""1579_userOfferCancelElement"" -> ""1579_whenElementHolder"";
""1579_userUpgradeElement"" -> ""1579_calcElementWorth"";
""1579_userAssignElement"" -> ""1579_calcAssetMax"";
""1579_userAssignElement"" -> ""1579_whenNotPaused"";
""1579_ownerPause"" -> ""1579_whenNotPaused"";
""1579_userUpgradeElement"" -> ""1579_calcAssetUpgradePrice"";
""1579_publicGetAsset"" -> ""1579_calcAssetMax"";
""1579_userOfferCancelElement"" -> ""1579_whenNotPaused"";
""1579_userOfferAcceptElement"" -> ""1579_whenNotPaused"";
""1579_ownerUnpause"" -> ""1579_whenOwner"";
""1579_userOfferAcceptElement"" -> ""1579_whenNotElementHolder"";
""1579_userOfferAcceptElement"" -> ""1579_calcElementWorth"";
""1579_userAssignElement"" -> ""1579_calcAssetAssigned"";
""1579_ownerPause"" -> ""1579_whenOwner"";
""1579_userAssignElement"" -> ""1579_calcAssetBuyPrice"";
""1579_userUpgradeElement"" -> ""1579_whenElementHolder"";
""1579_calcAssetUpgradePrice"" -> ""1579_calcAssetWorthIndex"";
""1579_publicGetElement"" -> ""1579_calcElementWorth"";
""1579_ownerUnpause"" -> ""1579_whenPaused"";
""1579_userOfferSubmitElement"" -> ""1579_whenNotPaused"";
""1579_publicGetElement"" -> ""1579_calcElementCooldown"";
""1579_userOfferSubmitElement"" -> ""1579_whenElementHolder"";
""1579_userOfferAcceptElement"" -> ""1579_calcElementCurrentPrice"";
""1579_publicGetAsset"" -> ""1579_calcAssetAssigned"";
""1579_publicGetElement"" -> ""1579_calcElementCurrentPrice"";
""1579_publicGetAsset"" -> ""1579_calcAssetUpgradePrice"";
""1579_ownerWithdraw"" -> ""1579_whenOwner"";
""1579_calcElementWorth"" -> ""1579_calcAssetWorthIndex"";
""1579_publicGetAsset"" -> ""1579_calcAssetBuyPrice"";
""1579_userUpgradeElement"" -> ""1579_whenNotPaused"";
}
"
0x006ff3494c04680cfbf39b0396054486f3f6ad32.sol,PLAY_NOW,contract PLAY_NOW { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>=1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_PLAY_NOW {
label=""PLAY_NOW"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_Try"" [label=""Try""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_SetupPlay"" [label=""SetupPlay""];
""132_newQuestioner"" [label=""newQuestioner""];
}
"
0x1d7b14967d103df9dbc16d408616da18c4ae83eb.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_466_TokenERC20 {
label=""TokenERC20"";
""466_transferFrom"" [label=""transferFrom""];
""466_burn"" [label=""burn""];
""466_burnFrom"" [label=""burnFrom""];
""466_constructor"" [label=""constructor""];
""466__transfer"" [label=""_transfer""];
""466_transfer"" [label=""transfer""];
""466_approve"" [label=""approve""];
""466_transferFrom"" -> ""466__transfer"";
""466_transfer"" -> ""466__transfer"";
}
"
0xc08dcf2fa37b87a89ac7f0fdcb4aebda378dea29.sol,MITToken,contract MITToken is SafeMath{ string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping(uint => Holder) public lockholders; uint public lockholderNumber; struct Holder { address eth_address; uint exp_time; },1,"subgraph cluster_658_MITToken {
label=""MITToken"";
""658_validHolder"" [label=""validHolder""];
""658_transferFrom"" [label=""transferFrom""];
""658__transfer"" [label=""_transfer""];
""658_constructor"" [label=""constructor""];
""658_approve"" [label=""approve""];
""658__unlockToken"" [label=""_unlockToken""];
""658_burn"" [label=""burn""];
""658_burnFrom"" [label=""burnFrom""];
""658_approveAndCall"" [label=""approveAndCall""];
""658__lockToken"" [label=""_lockToken""];
""658_transfer"" [label=""transfer""];
""658__transfer"" -> ""658_safeAdd"";
""658_approveAndCall"" -> ""658_approve"";
""658__transfer"" -> ""658_safeSub"";
""658_transferFrom"" -> ""658__transfer"";
""658_transfer"" -> ""658__transfer"";
""658__transfer"" -> ""658_validHolder"";
}
"
0x3f90421fd22b7e3251c8600430acc82922d2a434.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_allowance"" [label=""allowance""];
""256_transfer"" [label=""transfer""];
""256_approve"" [label=""approve""];
""256_balanceOf"" [label=""balanceOf""];
""256_transferFrom"" [label=""transferFrom""];
}
"
0x5b5b518d5eaaa14f790ba9b59a9a586c3a784d2f.sol,Auction,"contract Auction { string public description; string public instructions; uint public price; bool public initialPrice = true; uint public timestampEnd; address public beneficiary; bool public finalized = false; address public owner; address public winner; mapping(address => uint) public bids; address[] public accountsList; uint public increaseTimeIfBidBeforeEnd = 24 * 60 * 60; uint public increaseTimeBy = 24 * 60 * 60; event Bid(address indexed winner, uint indexed price, uint indexed timestamp); event Refund(address indexed sender, uint indexed amount, uint indexed timestamp); modifier onlyOwner { require(owner == msg.sender, ); _; }",1,"subgraph cluster_419_Auction {
label=""Auction"";
""419_setDescription"" [label=""setDescription""];
""419_constructor"" [label=""constructor""];
""419_refundContributors"" [label=""refundContributors""];
""419_fallback"" [label=""fallback""];
""419_finalize"" [label=""finalize""];
""419_refund"" [label=""refund""];
""419_setInstructions"" [label=""setInstructions""];
""419_finalize"" -> ""419_ended"";
""419_refundContributors"" -> ""419_ended"";
""419_setInstructions"" -> ""419_onlyWinner"";
""419_refundContributors"" -> ""419_onlyOwner"";
""419_setInstructions"" -> ""419_ended"";
""419_fallback"" -> ""419_refund"";
""419_setDescription"" -> ""419_onlyOwner"";
""419_finalize"" -> ""419_onlyOwner"";
}
"
0x4c2085edeefa307e73a10e3e7224886e6b6a0586.sol,BREDToken,"contract BREDToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x75D0fC568BCFe82C5901f4ddA9e2b39f4041641D] = _totalSupply; emit Transfer(address(0), 0x75D0fC568BCFe82C5901f4ddA9e2b39f4041641D, _totalSupply); }",1,"subgraph cluster_543_BREDToken {
label=""BREDToken"";
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_constructor"" [label=""constructor""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x20bcae16a8ba95d8e8363e265de4ecfc36ec5cd9.sol,HEYBITCOIN,"contract HEYBITCOIN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function HEYBITCOIN() public { symbol = ; name = ; decimals = 18; _totalSupply = 2311000000000000000000000000; balances[0x3f73174E0972Be8C46886Da8D5cb86d1AcDaF384] = _totalSupply; Transfer(address(0), 0x3f73174E0972Be8C46886Da8D5cb86d1AcDaF384, _totalSupply); }",1,"subgraph cluster_543_HEYBITCOIN {
label=""HEYBITCOIN"";
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_HEYBITCOIN"" [label=""HEYBITCOIN""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x580c1e3caca14826976b5820947f7ad486ac174d.sol,BitcoinAgileToken,"contract BitcoinAgileToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function _transfer(address _from, address _to, uint _value) internal { require (_to != 0x0); require (balanceOf[_from] > _value); require (balanceOf[_to] + _value > balanceOf[_to]); require(!frozenAccount[_from]); require(!frozenAccount[_to]); balanceOf[_from] -= _value; balanceOf[_to] += _value; Transfer(_from, _to, _value); }",1,"subgraph cluster_592_BitcoinAgileToken {
label=""BitcoinAgileToken"";
""592__transfer"" [label=""_transfer""];
""592_mintToken"" [label=""mintToken""];
""592_freezeAccount"" [label=""freezeAccount""];
""592_setPrices"" [label=""setPrices""];
""592_buy"" [label=""buy""];
""592_sell"" [label=""sell""];
""592_freezeAccount"" -> ""592_onlyOwner"";
""592_mintToken"" -> ""592_onlyOwner"";
""592_buy"" -> ""592__transfer"";
""592_setPrices"" -> ""592_onlyOwner"";
""592_sell"" -> ""592__transfer"";
}
"
0x70aa0247de23fdd3b8558be98747a8c286affd54.sol,Digital_1,"contract Digital_1 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_379_Digital_1 {
label=""Digital_1"";
""379_transferFrom"" [label=""transferFrom""];
""379_approve"" [label=""approve""];
""379_approveAndCall"" [label=""approveAndCall""];
""379_burnFrom"" [label=""burnFrom""];
""379__transfer"" [label=""_transfer""];
""379_burn"" [label=""burn""];
""379_TokenERC20"" [label=""TokenERC20""];
""379_transfer"" [label=""transfer""];
""379_transfer"" -> ""379__transfer"";
""379_transferFrom"" -> ""379__transfer"";
""379_approveAndCall"" -> ""379_approve"";
}
"
0x5aeb706c39a76c31fa89bf726de1a6f7d6bc1a51.sol,EtherColor,"contract EtherColor is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private firstStepLimit = 0.05 ether; uint256 private secondStepLimit = 0.5 ether; mapping (uint256 => address) public colorIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public colorIndexToApproved; mapping (uint256 => uint256) private colorIndexToPrice; mapping (uint256 => uint256) private colorIndexToPreviousPrice; mapping (uint256 => address[5]) private colorIndexToPreviousOwners; address public ceoAddress; address public cooAddress; struct Color { string name; }",1,"subgraph cluster_1160_EtherColor {
label=""EtherColor"";
""1160_totalSupply"" [label=""totalSupply""];
""1160_getColor"" [label=""getColor""];
""1160_ownerOf"" [label=""ownerOf""];
""1160_purchase"" [label=""purchase""];
""1160_transferFrom"" [label=""transferFrom""];
""1160_payout"" [label=""payout""];
""1160_createContractColor"" [label=""createContractColor""];
""1160_setCOO"" [label=""setCOO""];
""1160_name"" [label=""name""];
""1160__payout"" [label=""_payout""];
""1160_EtherColor"" [label=""EtherColor""];
""1160__owns"" [label=""_owns""];
""1160_symbol"" [label=""symbol""];
""1160__transfer"" [label=""_transfer""];
""1160_implementsERC721"" [label=""implementsERC721""];
""1160_setCEO"" [label=""setCEO""];
""1160_balanceOf"" [label=""balanceOf""];
""1160_approve"" [label=""approve""];
""1160__approved"" [label=""_approved""];
""1160_tokensOfOwner"" [label=""tokensOfOwner""];
""1160__createColor"" [label=""_createColor""];
""1160_takeOwnership"" [label=""takeOwnership""];
""1160_priceOf"" [label=""priceOf""];
""1160_transfer"" [label=""transfer""];
""1160__addressNotNull"" [label=""_addressNotNull""];
""1160_takeOwnership"" -> ""1160__addressNotNull"";
""1160_transfer"" -> ""1160__owns"";
""1160_createContractColor"" -> ""1160_onlyCOO"";
""1160_takeOwnership"" -> ""1160__approved"";
""1160_transferFrom"" -> ""1160__transfer"";
""1160_transfer"" -> ""1160__addressNotNull"";
""1160_payout"" -> ""1160__payout"";
""1160_approve"" -> ""1160__owns"";
""1160_tokensOfOwner"" -> ""1160_balanceOf"";
""1160_transferFrom"" -> ""1160__owns"";
""1160__createColor"" -> ""1160__transfer"";
""1160_takeOwnership"" -> ""1160__transfer"";
""1160_setCOO"" -> ""1160_onlyCEO"";
""1160_tokensOfOwner"" -> ""1160_totalSupply"";
""1160_payout"" -> ""1160_onlyCLevel"";
""1160_createContractColor"" -> ""1160__createColor"";
""1160_purchase"" -> ""1160__addressNotNull"";
""1160_purchase"" -> ""1160__transfer"";
""1160_transferFrom"" -> ""1160__approved"";
""1160_transfer"" -> ""1160__transfer"";
""1160_transferFrom"" -> ""1160__addressNotNull"";
""1160_setCEO"" -> ""1160_onlyCEO"";
}
"
0x2151288dfdbd547e071d8c6dc7fe3301235ae87c.sol,Bitcoin1,"contract Bitcoin1 is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Bitcoin1() public { symbol = ; name = ; decimals = 8; _totalSupply = 2100000000000000; balances[0xff3b1d46351D3feb6d2B3703B7d990a706953222] = _totalSupply; Transfer(address(0), 0xff3b1d46351D3feb6d2B3703B7d990a706953222, _totalSupply); }",1,"subgraph cluster_543_Bitcoin1 {
label=""Bitcoin1"";
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_Bitcoin1"" [label=""Bitcoin1""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x214f96e84d3c0f2920bb90fec861be4925edf02b.sol,HorseyToken,"contract HorseyToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor(string _symbol, string _name, uint8 _decimals, uint _totalSupply ) public { symbol = _symbol; name = _name; decimals = _decimals; totalSupply = _totalSupply * 10**uint(_decimals); balances[owner] = totalSupply; emit Transfer(address(0), owner, totalSupply); }",1,"subgraph cluster_635_HorseyToken {
label=""HorseyToken"";
""635_balanceOf"" [label=""balanceOf""];
""635_transferFrom"" [label=""transferFrom""];
""635_increaseApproval"" [label=""increaseApproval""];
""635_constructor"" [label=""constructor""];
""635_allowance"" [label=""allowance""];
""635_approveAndCall"" [label=""approveAndCall""];
""635_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""635_fallback"" [label=""fallback""];
""635_approve"" [label=""approve""];
""635_transfer"" [label=""transfer""];
""635_decreaseApproval"" [label=""decreaseApproval""];
""635_transferAnyERC20Token"" -> ""635_onlyOwner"";
""635_approveAndCall"" -> ""635_approve"";
}
"
0x1768fc7978e9abae733dd6c3de837a57a2f2ce4f.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_transferFrom"" [label=""transferFrom""];
""256_allowance"" [label=""allowance""];
""256_transfer"" [label=""transfer""];
""256_balanceOf"" [label=""balanceOf""];
}
"
0x71880d9f448c995ec5a7c9d68f2b0e256ef510d2.sol,ValueTokenBase,"contract ValueTokenBase is ERC20 { string public name; string public symbol; uint8 public decimals = 18; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowances; event Burn(address indexed from, uint256 value); function ValueTokenBase(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals) public { name = _tokenName; symbol = _tokenSymbol; decimals = _decimals; totalSupply = _initialSupply * 10 ** uint256(decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_574_ValueTokenBase {
label=""ValueTokenBase"";
""574_transfer"" [label=""transfer""];
""574_burnFrom"" [label=""burnFrom""];
""574_balanceOf"" [label=""balanceOf""];
""574_approveAndCall"" [label=""approveAndCall""];
""574_decreaseApproval"" [label=""decreaseApproval""];
""574_approve"" [label=""approve""];
""574_burn"" [label=""burn""];
""574_transferFrom"" [label=""transferFrom""];
""574_allowance"" [label=""allowance""];
""574_ValueTokenBase"" [label=""ValueTokenBase""];
""574__transfer"" [label=""_transfer""];
""574_increaseApproval"" [label=""increaseApproval""];
""574_transferFrom"" -> ""574__transfer"";
""574_transfer"" -> ""574__transfer"";
""574_approveAndCall"" -> ""574_approve"";
}
"
0x030c32c1190cbf077e5ee67ed19572c558e43ae4.sol,BitBonus,"contract BitBonus is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 100000000000000000000; balances[0x633A5cD23D95c26f750B802A03A82490C00Da802] = _totalSupply; emit Transfer(address(0), 0x633A5cD23D95c26f750B802A03A82490C00Da802, _totalSupply); }",1,"subgraph cluster_543_BitBonus {
label=""BitBonus"";
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_constructor"" [label=""constructor""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94.sol,Token,"contract Token { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_Token {
label=""Token"";
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_TokenERC20"" [label=""TokenERC20""];
""380_burnFrom"" [label=""burnFrom""];
""380__transfer"" [label=""_transfer""];
""380_burn"" [label=""burn""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0xf4609d26a58598d6b80b11f451a00477f61d8804.sol,Tcthereum,"contract Tcthereum { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Tcthereum( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_Tcthereum {
label=""Tcthereum"";
""361_Tcthereum"" [label=""Tcthereum""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x5255fd71e5ad9be04cdd5401c14a2765a99ccaf9.sol,HelpingBlocksContract,"contract HelpingBlocksContract is Ownable { string public name; string public symbol; uint public decimals; uint public totalSupply; string public description; bool public donationClosed = false; mapping (address => uint256) public balanceOf; mapping (address => uint256) public myDonation; event Transfer(address indexed from, address indexed to, uint256 value); constructor() public { name = ; symbol = ; decimals = 0; totalSupply = 10000000; description = ; balanceOf[owner] = totalSupply; }",1,"subgraph cluster_243_HelpingBlocksContract {
label=""HelpingBlocksContract"";
""243_setDescription"" [label=""setDescription""];
""243_safeWithdrawal"" [label=""safeWithdrawal""];
""243_fallback"" [label=""fallback""];
""243__transfer"" [label=""_transfer""];
""243_disableDonation"" [label=""disableDonation""];
""243_enableDonation"" [label=""enableDonation""];
""243_constructor"" [label=""constructor""];
""243_transfer"" [label=""transfer""];
""243_transfer"" -> ""243_onlyOwner"";
""243_disableDonation"" -> ""243_onlyOwner"";
""243_enableDonation"" -> ""243_onlyOwner"";
""243_safeWithdrawal"" -> ""243_onlyOwner"";
""243_transfer"" -> ""243__transfer"";
""243_fallback"" -> ""243__transfer"";
""243_setDescription"" -> ""243_onlyOwner"";
}
"
0x5890ef4e676cd051e59a348b46e0b3e73601f34d.sol,HIW,"contract HIW { address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HIW() { owner = 0x878479357C54d993be99bD332b2649A146da41C0; name = ; symbol = ; decimals = 18; totalSupply = 10000000000000000000000000000; balanceOf[owner] = 10000000000000000000000000000; }",1,"subgraph cluster_224_HIW {
label=""HIW"";
""224_HIW"" [label=""HIW""];
""224_approve"" [label=""approve""];
""224_transfer"" [label=""transfer""];
""224_transferFrom"" [label=""transferFrom""];
""224_burn"" [label=""burn""];
}
"
0x282c3971f8041bf4ab8b0d2ad0875e94958f8940.sol,RENAULT_301201,"contract RENAULT_301201 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 10641072767863300000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_RENAULT_301201 {
label=""RENAULT_301201"";
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
}
"
0x5b2988f2d77c38b46a753ea09a4f6bf726e07e34.sol,LILE,contract LILE is LILEStandardToken { uint256 constant public decimals = 8; uint256 public totalSupply = 161803398 * 10**8 ; string constant public name = ; string constant public symbol = ; function LILE(){ balances[msg.sender] = totalSupply; },1,"subgraph cluster_65_LILE1Token {
label=""LILE1Token"";
""65_transfer"" [label=""transfer""];
""65_approve"" [label=""approve""];
""65_balanceOf"" [label=""balanceOf""];
""65_allowance"" [label=""allowance""];
""65_transferFrom"" [label=""transferFrom""];
}
"
0xf354b2e5ea679a726d0348a974971cb4697bf508.sol,TokenERC20,"contract TokenERC20 { string public name = ; string public symbol = ; uint256 public decimals = 18; uint256 public totalSupply = 1000*1000*1000*10**decimals; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( ) public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_348_TokenERC20 {
label=""TokenERC20"";
""348_transferFrom"" [label=""transferFrom""];
""348__transfer"" [label=""_transfer""];
""348_TokenERC20"" [label=""TokenERC20""];
""348_approveAndCall"" [label=""approveAndCall""];
""348_burnFrom"" [label=""burnFrom""];
""348_transfer"" [label=""transfer""];
""348_burn"" [label=""burn""];
""348_approve"" [label=""approve""];
""348_transfer"" -> ""348__transfer"";
""348_approveAndCall"" -> ""348_approve"";
""348_transferFrom"" -> ""348__transfer"";
}
"
0x5c7f7e79b710a7bd29d8a381621e0268c98dcf06.sol,ERC20Standard,"contract ERC20Standard { uint256 public totalSupply; bool public mintable; string public name; uint256 public decimals; string public symbol; address public owner; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; function ERC20Standard(uint256 _totalSupply, string _symbol, string _name, bool _mintable) public { decimals = 18; symbol = _symbol; name = _name; mintable = _mintable; owner = msg.sender; totalSupply = _totalSupply * (10 ** decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_291_ERC20Standard {
label=""ERC20Standard"";
""291_transferFrom"" [label=""transferFrom""];
""291_allowance"" [label=""allowance""];
""291_ERC20Standard"" [label=""ERC20Standard""];
""291_transfer"" [label=""transfer""];
""291_mint"" [label=""mint""];
""291_balanceOf"" [label=""balanceOf""];
""291_approve"" [label=""approve""];
""291_transfer"" -> ""291_onlyPayloadSize"";
}
"
0x5513401cb13ec32809d238ee19a84405759147cc.sol,INTO_ICO,"contract INTO_ICO is Pausable { using SafeMath for uint256; ERC20 public token; address public wallet; uint256 public supply; uint256 public rate; uint256 public weiRaised; uint256 public openingTime; uint256 public closingTime; uint256 public duration; uint256 public minInvest; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); constructor() public { rate = 50000; wallet = owner; token = ERC20(0x7f738ffbdE7ECAC18D31ECba1e9B6eEF5b9214b7); minInvest = 0.05 * 1 ether; duration = 176 days; openingTime = 1530446400; closingTime = openingTime + duration; }",1,"subgraph cluster_540_INTO_ICO {
label=""INTO_ICO"";
""540__deliverTokens"" [label=""_deliverTokens""];
""540_constructor"" [label=""constructor""];
""540__forwardFunds"" [label=""_forwardFunds""];
""540__getTokenAmount"" [label=""_getTokenAmount""];
""540__preValidatePurchase"" [label=""_preValidatePurchase""];
""540__processPurchase"" [label=""_processPurchase""];
""540_start"" [label=""start""];
""540_hasClosed"" [label=""hasClosed""];
""540_buyTokens"" [label=""buyTokens""];
""540_withdrawTokens"" [label=""withdrawTokens""];
""540_fallback"" [label=""fallback""];
""540_start"" -> ""540_onlyOwner"";
""540_buyTokens"" -> ""540__forwardFunds"";
""540_withdrawTokens"" -> ""540_onlyOwner"";
""540_buyTokens"" -> ""540__processPurchase"";
""540__preValidatePurchase"" -> ""540_whenNotPaused"";
""540_buyTokens"" -> ""540__preValidatePurchase"";
""540_buyTokens"" -> ""540__getTokenAmount"";
""540_fallback"" -> ""540_buyTokens"";
""540__processPurchase"" -> ""540__deliverTokens"";
}
"
0x6c558a4976e751391fb73dd61fa6a72c318d80b5.sol,BitQ,"contract BitQ is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BitQ() public { symbol = ; name = ; decimals = 18; _totalSupply = 3000000000000000000000000; balances[0x74205dece41e14DCE4fD94da4Dcfb255f3A69059] = _totalSupply; Transfer(address(0), 0x74205dece41e14DCE4fD94da4Dcfb255f3A69059, _totalSupply); }",1,"subgraph cluster_543_BitQ {
label=""BitQ"";
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_BitQ"" [label=""BitQ""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x190e569be071f40c704e15825f285481cb74b6cc.sol,ERC20Standard,contract ERC20Standard { uint public totalSupply; string public name; uint8 public decimals; string public symbol; string public version; mapping (address => uint256) balances; mapping (address => mapping (address => uint)) allowed; modifier onlyPayloadSize(uint size) { assert(msg.data.length == size + 4); _; },1,"subgraph cluster_210_ERC20Standard {
label=""ERC20Standard"";
""210_allowance"" [label=""allowance""];
""210_transfer"" [label=""transfer""];
""210_transferFrom"" [label=""transferFrom""];
""210_balanceOf"" [label=""balanceOf""];
""210_approve"" [label=""approve""];
""210_transfer"" -> ""210_onlyPayloadSize"";
}
"
0x841b42c7ee6a15904d1926bf15ffdb6d30a77723.sol,GDC,"contract GDC { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function GDC( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_313_GDC {
label=""GDC"";
""313_GDC"" [label=""GDC""];
""313_transfer"" [label=""transfer""];
""313__transfer"" [label=""_transfer""];
""313_transferFrom"" [label=""transferFrom""];
""313_approve"" [label=""approve""];
""313_burn"" [label=""burn""];
""313_burnFrom"" [label=""burnFrom""];
""313_transfer"" -> ""313__transfer"";
""313_transferFrom"" -> ""313__transfer"";
}
"
0xeecf94be6fd3f8480285bad2b2bc5a220e0e0fcc.sol,CPLToken,"contract CPLToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CPLToken() public { symbol = ; name = ; decimals = 12; _totalSupply = 2000000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_550_CPLToken {
label=""CPLToken"";
""550_allowance"" [label=""allowance""];
""550_CPLToken"" [label=""CPLToken""];
""550_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""550_approve"" [label=""approve""];
""550_totalSupply"" [label=""totalSupply""];
""550_transfer"" [label=""transfer""];
""550_fallback"" [label=""fallback""];
""550_approveAndCall"" [label=""approveAndCall""];
""550_balanceOf"" [label=""balanceOf""];
""550_transferFrom"" [label=""transferFrom""];
""550_transferAnyERC20Token"" -> ""550_onlyOwner"";
}
"
0x71f04062e5794e0190fdca9a2bf1f196c41c3e6e.sol,MintableToken,"contract MintableToken is StandardToken, Ownable { event Mint(address indexed to, uint256 value); event Burn(address indexed to, uint256 value); function mint(address addr, uint256 value) onlyOwner public returns (bool) { _totalSupply = _totalSupply.add(value); _balances[addr] = _balances[addr].add(value); emit Mint(addr, value); emit Transfer(address(0), addr, value); return true; }",1,"subgraph cluster_789_MintableToken {
label=""MintableToken"";
""789_mint"" [label=""mint""];
""789_burn"" [label=""burn""];
""789_burn"" -> ""789_onlyOwner"";
""789_mint"" -> ""789_onlyOwner"";
}
"
0x414e58fbd9264565d611c5eb2a392a70529dad41.sol,CoinEGGToken,contract CoinEGGToken is Token { string public name; uint8 public decimals; string public symbol; constructor() public { totalSupply = 10000000000*(10**18); balances[msg.sender] = totalSupply; name = ; decimals = 18; symbol = ; },1,"subgraph cluster_287_CoinEGGToken {
label=""CoinEGGToken"";
""287_transferFrom"" [label=""transferFrom""];
""287_transfer"" [label=""transfer""];
""287_approve"" [label=""approve""];
""287_balanceOf"" [label=""balanceOf""];
""287_constructor"" [label=""constructor""];
""287_allowance"" [label=""allowance""];
}
"
0x35fd00d47202b1b2158dba75e7cc8f71b068c256.sol,WhiteList,"contract WhiteList is Ownable { mapping(address => bool) public whiteList; uint public totalWhiteListed; event LogWhiteListed(address indexed user, uint whiteListedNum); event LogWhiteListedMultiple(uint whiteListedNum); event LogRemoveWhiteListed(address indexed user); function isWhiteListed(address _user) external view returns (bool) { return whiteList[_user]; }",1,"subgraph cluster_406_WhiteList {
label=""WhiteList"";
""406_isWhiteListed"" [label=""isWhiteListed""];
""406_removeFromWhiteList"" [label=""removeFromWhiteList""];
""406_addToWhiteListMultiple"" [label=""addToWhiteListMultiple""];
""406_addToWhiteList"" [label=""addToWhiteList""];
""406_addToWhiteListMultiple"" -> ""406_onlyOwner"";
""406_removeFromWhiteList"" -> ""406_onlyOwner"";
""406_addToWhiteList"" -> ""406_onlyOwner"";
}
"
0x01b1ccae68dc41d8a2a0f48e8f0d38b0c064ef43.sol,YSS,"contract YSS is Owned { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public sellPrice; uint256 public buyPrice; uint minBalanceForAccounts; mapping (address => uint256) public balanceOf; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); function YSS(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimalUnits, address centralMinter) public { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; if (centralMinter != 0) {owner = centralMinter;}",1,"subgraph cluster_411_YSS {
label=""YSS"";
""411_buy"" [label=""buy""];
""411_freezeAccount"" [label=""freezeAccount""];
""411_transfer"" [label=""transfer""];
""411_sell"" [label=""sell""];
""411_setMinBalance"" [label=""setMinBalance""];
""411_mintToken"" [label=""mintToken""];
""411_YSS"" [label=""YSS""];
""411_setPrices"" [label=""setPrices""];
""411__transfer"" [label=""_transfer""];
""411_mintToken"" -> ""411_onlyOwner"";
""411_freezeAccount"" -> ""411_onlyOwner"";
""411_setPrices"" -> ""411_onlyOwner"";
""411_setMinBalance"" -> ""411_onlyOwner"";
""411_transfer"" -> ""411_sell"";
""411_transfer"" -> ""411__transfer"";
}
"
0x5510f1996e210659e135b05d6bf48d6682af23a7.sol,EthereumPrivate,"contract EthereumPrivate { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = 100000000000000000; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_EthereumPrivate {
label=""EthereumPrivate"";
""355_transfer"" [label=""transfer""];
""355_approveAndCall"" [label=""approveAndCall""];
""355_burn"" [label=""burn""];
""355__transfer"" [label=""_transfer""];
""355_transferFrom"" [label=""transferFrom""];
""355_TokenERC20"" [label=""TokenERC20""];
""355_burnFrom"" [label=""burnFrom""];
""355_approve"" [label=""approve""];
""355_transferFrom"" -> ""355__transfer"";
""355_transfer"" -> ""355__transfer"";
""355_approveAndCall"" -> ""355_approve"";
}
"
0x716989fa21d5043165079ddbfd04a76a001a595a.sol,COCTokenBase,"contract COCTokenBase is ERC20 { string public name; string public symbol; uint8 public decimals = 18; address public administrator; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowances; event Burn(address indexed from, uint256 value); function COCTokenBase(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals) public { name = _tokenName; symbol = _tokenSymbol; decimals = _decimals; administrator = msg.sender; totalSupply = _initialSupply * 10 ** uint256(decimals); balances[administrator] = totalSupply; }",1,"subgraph cluster_627_COCTokenBase {
label=""COCTokenBase"";
""627_balanceOf"" [label=""balanceOf""];
""627_burn"" [label=""burn""];
""627_transfer"" [label=""transfer""];
""627_burnFrom"" [label=""burnFrom""];
""627_transferFrom"" [label=""transferFrom""];
""627_approve"" [label=""approve""];
""627_transferOfPower"" [label=""transferOfPower""];
""627_approveAndCall"" [label=""approveAndCall""];
""627__transfer"" [label=""_transfer""];
""627_decreaseApproval"" [label=""decreaseApproval""];
""627_COCTokenBase"" [label=""COCTokenBase""];
""627_allowance"" [label=""allowance""];
""627_increaseApproval"" [label=""increaseApproval""];
""627_transferOfPower"" -> ""627__transfer"";
""627_approveAndCall"" -> ""627_approve"";
""627_transfer"" -> ""627__transfer"";
""627_transferFrom"" -> ""627__transfer"";
}
"
0xdafe38c5f5e40f7b11f28344154e78e57537bd66.sol,CREXToken,contract CREXToken is Ownable { uint256 public totalSupply; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 constant restrictedPercent = 35; address constant restrictedAddress = 0x237c494b5B0164593898Fb95703c532A5340f12E; uint256 constant mintFinishTime = 1551448800; uint256 constant transferAllowTime = 1552140000; uint256 public constant hardcap = 399000000 * 1 ether; bool public transferAllowed = false; bool public mintingFinished = false; modifier whenTransferAllowed() { require(transferAllowed || now > transferAllowTime); _; },1,"subgraph cluster_691_CREXToken {
label=""CREXToken"";
""691_transfer"" [label=""transfer""];
""691_transferFrom"" [label=""transferFrom""];
""691_approve"" [label=""approve""];
""691_burnFrom"" [label=""burnFrom""];
""691_finishMinting"" [label=""finishMinting""];
""691_burn"" [label=""burn""];
""691_balanceOf"" [label=""balanceOf""];
""691_allowTransfer"" [label=""allowTransfer""];
""691_batchMint"" [label=""batchMint""];
""691_allowance"" [label=""allowance""];
""691_allowTransfer"" -> ""691_onlyOwner"";
""691_batchMint"" -> ""691_saleIsOn"";
""691_finishMinting"" -> ""691_onlyOwner"";
""691_transferFrom"" -> ""691_whenTransferAllowed"";
""691_transfer"" -> ""691_whenTransferAllowed"";
""691_batchMint"" -> ""691_onlyOwner"";
""691_batchMint"" -> ""691_canMint"";
}
"
0xf2861ad8dd602269c21eddd4d18255903cca47c7.sol,ZethrBigWheel,contract ZethrBigWheel is ZethrGame { using SafeMath for uint8; struct Bet { uint56 tokenValue; uint48 blockNumber; uint8 tier; uint bets; },1,"subgraph cluster_7292_ZethrBigWheel {
label=""ZethrBigWheel"";
""7292_finishBetFrom"" [label=""finishBetFrom""];
""7292_getPlayerBetData"" [label=""getPlayerBetData""];
""7292_execute"" [label=""execute""];
""7292_betInputToBytes"" [label=""betInputToBytes""];
""7292_ownerSetJackpotAddress"" [label=""ownerSetJackpotAddress""];
""7292_isBetValid"" [label=""isBetValid""];
""7292_getBet"" [label=""getBet""];
""7292_getSpinOutput"" [label=""getSpinOutput""];
""7292_constructor"" [label=""constructor""];
""7292_maxRandom"" [label=""maxRandom""];
""7292_uintToBetsArray"" [label=""uintToBetsArray""];
""7292_getLastSpinOutput"" [label=""getLastSpinOutput""];
""7292_getSpinResults"" [label=""getSpinResults""];
""7292_random"" [label=""random""];
""7292_getSpinOutput"" -> ""7292_random"";
""7292_constructor"" -> ""7292_constructor"";
""7292_execute"" -> ""7292_finishBetFrom"";
""7292_execute"" -> ""7292_uintToBetsArray"";
""7292_getPlayerBetData"" -> ""7292_getBet"";
""7292_execute"" -> ""7292_bankrollOnly"";
""7292_random"" -> ""7292_maxRandom"";
""7292_getSpinResults"" -> ""7292_getSpinOutput"";
""7292_finishBetFrom"" -> ""7292_getBet"";
""7292_getLastSpinOutput"" -> ""7292_getSpinOutput"";
""7292_execute"" -> ""7292_hasNotBetThisBlock"";
""7292_ownerSetJackpotAddress"" -> ""7292_ownerOnly"";
""7292_getLastSpinOutput"" -> ""7292_getBet"";
""7292_execute"" -> ""7292_isNotPaused"";
""7292_execute"" -> ""7292_getBet"";
""7292_execute"" -> ""7292_betIsValid"";
""7292_getPlayerBetData"" -> ""7292_uintToBetsArray"";
""7292_isBetValid"" -> ""7292_uintToBetsArray"";
""7292_isBetValid"" -> ""7292_getMaxProfit"";
""7292_finishBetFrom"" -> ""7292_getSpinResults"";
""7292_getSpinOutput"" -> ""7292_uintToBetsArray"";
}
"
0x180d669e995ae5fbb7bfb06107546de625cd4f97.sol,BallzToken,"contract BallzToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BallzToken() public { symbol = ; name = ; decimals = 3; _totalSupply = 1000000000000; balances[0xb1b547686b6230b318f6a2b291bdc7fdf7d73ffc] = _totalSupply; Transfer(address(0), 0xb1b547686b6230b318f6a2b291bdc7fdf7d73ffc, _totalSupply); }",1,"subgraph cluster_543_BallzToken {
label=""BallzToken"";
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_BallzToken"" [label=""BallzToken""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xe8d5a2fc2ff2d5de90c98daa6aaed8b250d7965b.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function _transfer(address _from, address _to, uint _value) internal { require (_to != 0x0); require (balanceOf[_from] > _value); require (balanceOf[_to] + _value > balanceOf[_to]); require(!frozenAccount[_from]); require(!frozenAccount[_to]); balanceOf[_from] -= _value; balanceOf[_to] += _value; Transfer(_from, _to, _value); }",1,"subgraph cluster_589_MyAdvancedToken {
label=""MyAdvancedToken"";
""589_mintToken"" [label=""mintToken""];
""589__transfer"" [label=""_transfer""];
""589_setPrices"" [label=""setPrices""];
""589_freezeAccount"" [label=""freezeAccount""];
""589_sell"" [label=""sell""];
""589_buy"" [label=""buy""];
""589_buy"" -> ""589__transfer"";
""589_setPrices"" -> ""589_onlyOwner"";
""589_mintToken"" -> ""589_onlyOwner"";
""589_freezeAccount"" -> ""589_onlyOwner"";
""589_sell"" -> ""589__transfer"";
}
"
0x4d48ee87ab535833fdd79c7d1c4aac3c7c304b13.sol,Pomda,contract Pomda { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1305_Pomda {
label=""Pomda"";
""1305_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1305_setAdministrator"" [label=""setAdministrator""];
""1305_fallback"" [label=""fallback""];
""1305_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1305_exit"" [label=""exit""];
""1305_setSymbol"" [label=""setSymbol""];
""1305_disableInitialStage"" [label=""disableInitialStage""];
""1305_buy"" [label=""buy""];
""1305_sellPrice"" [label=""sellPrice""];
""1305_balanceOf"" [label=""balanceOf""];
""1305_myTokens"" [label=""myTokens""];
""1305_setName"" [label=""setName""];
""1305_dividendsOf"" [label=""dividendsOf""];
""1305_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1305_transfer"" [label=""transfer""];
""1305_totalSupply"" [label=""totalSupply""];
""1305_sqrt"" [label=""sqrt""];
""1305_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1305_myDividends"" [label=""myDividends""];
""1305_pomda"" [label=""pomda""];
""1305_reinvest"" [label=""reinvest""];
""1305_withdraw"" [label=""withdraw""];
""1305_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1305_setStakingRequirement"" [label=""setStakingRequirement""];
""1305_sell"" [label=""sell""];
""1305_buyPrice"" [label=""buyPrice""];
""1305_purchaseTokens"" [label=""purchaseTokens""];
""1305_reinvest"" -> ""1305_purchaseTokens"";
""1305_calculateTokensReceived"" -> ""1305_ethereumToTokens_"";
""1305_fallback"" -> ""1305_purchaseTokens"";
""1305_withdraw"" -> ""1305_onlyStronghands"";
""1305_withdraw"" -> ""1305_myDividends"";
""1305_setName"" -> ""1305_onlyAdministrator"";
""1305_reinvest"" -> ""1305_onlyStronghands"";
""1305_buyPrice"" -> ""1305_tokensToEthereum_"";
""1305_sellPrice"" -> ""1305_tokensToEthereum_"";
""1305_purchaseTokens"" -> ""1305_antiEarlyWhale"";
""1305_disableInitialStage"" -> ""1305_onlyAdministrator"";
""1305_reinvest"" -> ""1305_myDividends"";
""1305_setStakingRequirement"" -> ""1305_onlyAdministrator"";
""1305_myDividends"" -> ""1305_dividendsOf"";
""1305_transfer"" -> ""1305_tokensToEthereum_"";
""1305_purchaseTokens"" -> ""1305_ethereumToTokens_"";
""1305_calculateEthereumReceived"" -> ""1305_tokensToEthereum_"";
""1305_sell"" -> ""1305_tokensToEthereum_"";
""1305_buy"" -> ""1305_purchaseTokens"";
""1305_setAdministrator"" -> ""1305_onlyAdministrator"";
""1305_myTokens"" -> ""1305_balanceOf"";
""1305_setSymbol"" -> ""1305_onlyAdministrator"";
""1305_ethereumToTokens_"" -> ""1305_sqrt"";
""1305_transfer"" -> ""1305_onlyBagholders"";
""1305_exit"" -> ""1305_sell"";
""1305_exit"" -> ""1305_withdraw"";
""1305_sell"" -> ""1305_onlyBagholders"";
""1305_transfer"" -> ""1305_withdraw"";
""1305_transfer"" -> ""1305_myDividends"";
}
"
0x42095468d0af5976caa589ad6db91a1b8913be4e.sol,RichToken,"contract RichToken is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 1 ether; mapping (uint256 => address) public richtokenIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public richtokenIndexToApproved; mapping (uint256 => uint256) private richtokenIndexToPrice; address public creator; struct Rich { string name; }",1,"subgraph cluster_741_RichToken {
label=""RichToken"";
""741_implementsERC721"" [label=""implementsERC721""];
""741_transfer"" [label=""transfer""];
""741_approve"" [label=""approve""];
""741__createRich"" [label=""_createRich""];
""741_balanceOf"" [label=""balanceOf""];
""741_purchase"" [label=""purchase""];
""741_symbol"" [label=""symbol""];
""741_setCreator"" [label=""setCreator""];
""741_RichToken"" [label=""RichToken""];
""741_totalSupply"" [label=""totalSupply""];
""741_takeOwnership"" [label=""takeOwnership""];
""741_getRichToken"" [label=""getRichToken""];
""741__approved"" [label=""_approved""];
""741_payout"" [label=""payout""];
""741_name"" [label=""name""];
""741_createRichContract"" [label=""createRichContract""];
""741__payout"" [label=""_payout""];
""741_transferFrom"" [label=""transferFrom""];
""741__owns"" [label=""_owns""];
""741__transfer"" [label=""_transfer""];
""741__addressNotNull"" [label=""_addressNotNull""];
""741_ownerOf"" [label=""ownerOf""];
""741_priceOf"" [label=""priceOf""];
""741_transfer"" -> ""741__owns"";
""741_setCreator"" -> ""741_onlyCreator"";
""741_transfer"" -> ""741__transfer"";
""741_createRichContract"" -> ""741__createRich"";
""741_transferFrom"" -> ""741__addressNotNull"";
""741_payout"" -> ""741_onlyCreator"";
""741_payout"" -> ""741__payout"";
""741_transferFrom"" -> ""741__owns"";
""741_purchase"" -> ""741__transfer"";
""741_approve"" -> ""741__owns"";
""741_createRichContract"" -> ""741_onlyCreator"";
""741_takeOwnership"" -> ""741__transfer"";
""741_transfer"" -> ""741__addressNotNull"";
""741_transferFrom"" -> ""741__approved"";
""741_transferFrom"" -> ""741__transfer"";
""741_purchase"" -> ""741__addressNotNull"";
""741_takeOwnership"" -> ""741__addressNotNull"";
""741__createRich"" -> ""741__transfer"";
""741_takeOwnership"" -> ""741__approved"";
}
"
0x345ab5e5f971dbdbc92af2779ce7a8bbf1819e59.sol,TwentyDollars,contract TwentyDollars { struct Bid { address owner; uint256 amount; },1,"subgraph cluster_262_TwentyDollars {
label=""TwentyDollars"";
""262_winnerWithdraw"" [label=""winnerWithdraw""];
""262_biddingClosed"" [label=""biddingClosed""];
""262_ownerWithdraw"" [label=""ownerWithdraw""];
""262_getMyBalance"" [label=""getMyBalance""];
""262_constructor"" [label=""constructor""];
""262_getContractBalance"" [label=""getContractBalance""];
""262_bid"" [label=""bid""];
""262_withdraw"" [label=""withdraw""];
""262_fallback"" [label=""fallback""];
""262_ownerWithdraw"" -> ""262_onlyOwner"";
""262_winnerWithdraw"" -> ""262_onlyHighestBidder"";
""262_bid"" -> ""262_onlyBiddingOpen"";
""262_ownerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_winnerWithdraw"" -> ""262_onlyBiddingClosed"";
""262_ownerWithdraw"" -> ""262_getContractBalance"";
""262_fallback"" -> ""262_bid"";
}
"
0xb3f48d38ace4b44c710ba32cb5aea66c0f533571.sol,AUTOCOIN,"contract AUTOCOIN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 400000000000000000000000000; balances[0x92532b15ba200e9668af3a7Ed298FDB94AdC6CC4] = _totalSupply; emit Transfer(address(0), 0x92532b15ba200e9668af3a7Ed298FDB94AdC6CC4, _totalSupply); }",1,"subgraph cluster_543_AUTOCOIN {
label=""AUTOCOIN"";
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_constructor"" [label=""constructor""];
""543_allowance"" [label=""allowance""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xa31b52ee117b946741c5fb49f010ed1d56b443e0.sol,RegularToken,"contract RegularToken is Token { function transfer(address _to, uint _value) public returns (bool) { if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) { balances[msg.sender] -= _value; balances[_to] += _value; emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_260_RegularToken {
label=""RegularToken"";
""260_allowance"" [label=""allowance""];
""260_transferFrom"" [label=""transferFrom""];
""260_transfer"" [label=""transfer""];
""260_approve"" [label=""approve""];
""260_balanceOf"" [label=""balanceOf""];
}
"
0xcdcbb474268703da1b6744c540500e8a2a39e8dc.sol,knf,"contract knf is StandardToken { string public name; string public symbol; mapping(address => uint256) airdroped; uint8 public decimals; uint256 DropedThisWeek; string constant public version = ; uint256 lastWeek; uint256 decimate; uint256 weekly_limit; uint256 air_drop; address control; address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); function availableSupply() public view returns (uint256) { return balances[owner]; }",1,"subgraph cluster_1094_knf {
label=""knf"";
""1094_transfer"" [label=""transfer""];
""1094_transferOwnership"" [label=""transferOwnership""];
""1094_availableSupply"" [label=""availableSupply""];
""1094_changeName"" [label=""changeName""];
""1094_thisweek"" [label=""thisweek""];
""1094_cleanup"" [label=""cleanup""];
""1094_transferFrom"" [label=""transferFrom""];
""1094_balanceOf"" [label=""balanceOf""];
""1094_RecordTransfer"" [label=""RecordTransfer""];
""1094_transferControl"" [label=""transferControl""];
""1094_transfererc20"" [label=""transfererc20""];
""1094_transferBalance"" [label=""transferBalance""];
""1094_knf"" [label=""knf""];
""1094_Award"" [label=""Award""];
""1094_availableAirdrop"" [label=""availableAirdrop""];
""1094_fallback"" [label=""fallback""];
""1094_balanceOf"" -> ""1094_availableAirdrop"";
""1094_transfererc20"" -> ""1094_onlyControl"";
""1094_RecordTransfer"" -> ""1094_thisweek"";
""1094_transfer"" -> ""1094_RecordTransfer"";
""1094_changeName"" -> ""1094_onlyControl"";
""1094_transferControl"" -> ""1094_onlyControl"";
""1094_availableAirdrop"" -> ""1094_thisweek"";
""1094_transfer"" -> ""1094_availableAirdrop"";
""1094_transferFrom"" -> ""1094_availableAirdrop"";
""1094_cleanup"" -> ""1094_onlyControl"";
""1094_Award"" -> ""1094_RecordTransfer"";
""1094_Award"" -> ""1094_onlyControl"";
""1094_transferBalance"" -> ""1094_onlyControl"";
""1094_knf"" -> ""1094_RecordTransfer"";
""1094_transferOwnership"" -> ""1094_onlyControl"";
""1094_transferFrom"" -> ""1094_RecordTransfer"";
}
"
0x6e14ccec454b12ab03ef1ca2cf0ef67d6bfd8a26.sol,Admin,"contract Admin is Variable, Modifiers, Event { function admin_tokenBurn(uint256 _value) public isOwner returns(bool success) { require(balanceOf[msg.sender] >= _value); balanceOf[msg.sender] -= _value; totalSupply -= _value; emit TokenBurn(msg.sender, _value); return true; }",1,"subgraph cluster_440_Admin {
label=""Admin"";
""440_admin_tokenBurn"" [label=""admin_tokenBurn""];
""440_admin_tokenAdd"" [label=""admin_tokenAdd""];
""440_admin_tokenAdd"" -> ""440_isOwner"";
""440_admin_tokenBurn"" -> ""440_isOwner"";
}
"
0x4ca65f54f923be2fb3efc3a7758e88a6f910806e.sol,GamblicaEarlyAccess,"contract GamblicaEarlyAccess { enum State { CREATED, DEPOSIT, CLAIM }",1,"subgraph cluster_318_GamblicaEarlyAccess {
label=""GamblicaEarlyAccess"";
""318_registerDeposit"" [label=""registerDeposit""];
""318_addWinnigs"" [label=""addWinnigs""];
""318_constructor"" [label=""constructor""];
""318_claim"" [label=""claim""];
""318_die"" [label=""die""];
""318_end"" [label=""end""];
""318_start"" [label=""start""];
""318_fallback"" [label=""fallback""];
""318_addWinnigs"" -> ""318_onlyGamblica"";
""318_end"" -> ""318_onlyGamblica"";
""318_fallback"" -> ""318_claim"";
""318_die"" -> ""318_onlyGamblica"";
""318_registerDeposit"" -> ""318_onlyGamblica"";
""318_start"" -> ""318_onlyGamblica"";
}
"
0xf375e839fecff22f847eb2df66d440aeb7226916.sol,KTLContract,"contract KTLContract is ERC20Interface, Owned { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public constant totalSupply = 30000000000000000000000000000; bool public stopped; mapping (address => int8) public blackList; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; event Blacklisted(address indexed target); event DeleteFromBlacklist(address indexed target); event RejectedPaymentToBlacklistedAddr(address indexed from, address indexed to, uint256 value); event RejectedPaymentFromBlacklistedAddr(address indexed from, address indexed to, uint256 value); modifier notStopped { require(!stopped); _; }",1,"subgraph cluster_518_KTLContract {
label=""KTLContract"";
""518_blacklisting"" [label=""blacklisting""];
""518_KTLContract"" [label=""KTLContract""];
""518_allowance"" [label=""allowance""];
""518_stop"" [label=""stop""];
""518_deleteFromBlacklist"" [label=""deleteFromBlacklist""];
""518_start"" [label=""start""];
""518_airdrop"" [label=""airdrop""];
""518_transferFrom"" [label=""transferFrom""];
""518_transfer"" [label=""transfer""];
""518_approve"" [label=""approve""];
""518_balanceOf"" [label=""balanceOf""];
""518_blacklisting"" -> ""518_onlyOwner"";
""518_transferFrom"" -> ""518_notStopped"";
""518_airdrop"" -> ""518_onlyOwner"";
""518_start"" -> ""518_onlyOwner"";
""518_stop"" -> ""518_onlyOwner"";
""518_airdrop"" -> ""518_notStopped"";
""518_airdrop"" -> ""518_transfer"";
""518_approve"" -> ""518_notStopped"";
""518_deleteFromBlacklist"" -> ""518_onlyOwner"";
""518_transfer"" -> ""518_notStopped"";
}
"
0xd41d48be0a81690a785bf1df336163f7b78eadca.sol,Crypland,contract Crypland { struct Element {uint worth; uint level; uint cooldown;},1,"subgraph cluster_1579_Crypland {
label=""Crypland"";
""1579_publicGetElement"" [label=""publicGetElement""];
""1579_ownerWithdraw"" [label=""ownerWithdraw""];
""1579_calcAssetBuyPrice"" [label=""calcAssetBuyPrice""];
""1579_userAssignElement"" [label=""userAssignElement""];
""1579_calcElementCooldown"" [label=""calcElementCooldown""];
""1579_calcAssetWorthIndex"" [label=""calcAssetWorthIndex""];
""1579_ownerDestroy"" [label=""ownerDestroy""];
""1579_ownerUnpause"" [label=""ownerUnpause""];
""1579_publicGetElementOffer"" [label=""publicGetElementOffer""];
""1579_userOfferCancelElement"" [label=""userOfferCancelElement""];
""1579_userOfferAcceptElement"" [label=""userOfferAcceptElement""];
""1579_userUpgradeElement"" [label=""userUpgradeElement""];
""1579_calcElementCurrentPrice"" [label=""calcElementCurrentPrice""];
""1579_calcAssetMax"" [label=""calcAssetMax""];
""1579_ownerPause"" [label=""ownerPause""];
""1579_publicGetAsset"" [label=""publicGetAsset""];
""1579_calcAssetUpgradePrice"" [label=""calcAssetUpgradePrice""];
""1579_calcAssetAssigned"" [label=""calcAssetAssigned""];
""1579_userOfferSubmitElement"" [label=""userOfferSubmitElement""];
""1579_calcElementWorth"" [label=""calcElementWorth""];
""1579_Crypland"" [label=""Crypland""];
""1579_ownerDestroy"" -> ""1579_whenOwner"";
""1579_publicGetAsset"" -> ""1579_calcAssetWorthIndex"";
""1579_userOfferCancelElement"" -> ""1579_whenElementHolder"";
""1579_userUpgradeElement"" -> ""1579_calcElementWorth"";
""1579_userAssignElement"" -> ""1579_calcAssetMax"";
""1579_userAssignElement"" -> ""1579_whenNotPaused"";
""1579_ownerPause"" -> ""1579_whenNotPaused"";
""1579_userUpgradeElement"" -> ""1579_calcAssetUpgradePrice"";
""1579_publicGetAsset"" -> ""1579_calcAssetMax"";
""1579_userOfferCancelElement"" -> ""1579_whenNotPaused"";
""1579_userOfferAcceptElement"" -> ""1579_whenNotPaused"";
""1579_ownerUnpause"" -> ""1579_whenOwner"";
""1579_userOfferAcceptElement"" -> ""1579_whenNotElementHolder"";
""1579_userOfferAcceptElement"" -> ""1579_calcElementWorth"";
""1579_userAssignElement"" -> ""1579_calcAssetAssigned"";
""1579_ownerPause"" -> ""1579_whenOwner"";
""1579_userAssignElement"" -> ""1579_calcAssetBuyPrice"";
""1579_userUpgradeElement"" -> ""1579_whenElementHolder"";
""1579_calcAssetUpgradePrice"" -> ""1579_calcAssetWorthIndex"";
""1579_publicGetElement"" -> ""1579_calcElementWorth"";
""1579_ownerUnpause"" -> ""1579_whenPaused"";
""1579_userOfferSubmitElement"" -> ""1579_whenNotPaused"";
""1579_publicGetElement"" -> ""1579_calcElementCooldown"";
""1579_userOfferSubmitElement"" -> ""1579_whenElementHolder"";
""1579_userOfferAcceptElement"" -> ""1579_calcElementCurrentPrice"";
""1579_publicGetAsset"" -> ""1579_calcAssetAssigned"";
""1579_publicGetElement"" -> ""1579_calcElementCurrentPrice"";
""1579_publicGetAsset"" -> ""1579_calcAssetUpgradePrice"";
""1579_ownerWithdraw"" -> ""1579_whenOwner"";
""1579_calcElementWorth"" -> ""1579_calcAssetWorthIndex"";
""1579_publicGetAsset"" -> ""1579_calcAssetBuyPrice"";
""1579_userUpgradeElement"" -> ""1579_whenNotPaused"";
}
"
0xec8f9a0de90487e7aa172fe5291fd19ad7163aa1.sol,BDSMAirdrop,contract BDSMAirdrop { token public sharesTokenAddress; uint256 public tokenFree = 0; address owner; uint256 public defValue = 5000000; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_126_BDSMAirdrop {
label=""BDSMAirdrop"";
""126_BDSMAirdrop"" [label=""BDSMAirdrop""];
""126_changeAirdropValue"" [label=""changeAirdropValue""];
""126_tokensBack"" [label=""tokensBack""];
""126_multiSend"" [label=""multiSend""];
""126_multiSend"" -> ""126_onlyOwner"";
""126_changeAirdropValue"" -> ""126_onlyOwner"";
""126_tokensBack"" -> ""126_onlyOwner"";
}
"
0x1dbd7059247baf317b11c9e36308fa8582867d4b.sol,EDOGE,"contract EDOGE is ERC223, SafeMath { string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply = 100000000000 * 10**8; address public owner; bool public unlocked = false; bool public tokenCreated = false; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; function EDOGE() public { require(tokenCreated == false); tokenCreated = true; owner = msg.sender; balances[owner] = totalSupply; require(balances[owner] > 0); }",1,"subgraph cluster_926_EDOGE {
label=""EDOGE"";
""926_name"" [label=""name""];
""926_approve"" [label=""approve""];
""926_totalSupply"" [label=""totalSupply""];
""926_transferFrom"" [label=""transferFrom""];
""926_transfer"" [label=""transfer""];
""926_transferToAddress"" [label=""transferToAddress""];
""926_transferToContract"" [label=""transferToContract""];
""926_isContract"" [label=""isContract""];
""926_unlockForever"" [label=""unlockForever""];
""926_allowance"" [label=""allowance""];
""926_symbol"" [label=""symbol""];
""926_distributeAirdrop"" [label=""distributeAirdrop""];
""926_EDOGE"" [label=""EDOGE""];
""926_balanceOf"" [label=""balanceOf""];
""926_decimals"" [label=""decimals""];
""926_unlockForever"" -> ""926_onlyOwner"";
""926_transferToAddress"" -> ""926_balanceOf"";
""926_transferToAddress"" -> ""926_safeSub"";
""926_transferToAddress"" -> ""926_safeAdd"";
""926_distributeAirdrop"" -> ""926_onlyOwner"";
""926_transferToContract"" -> ""926_safeSub"";
""926_distributeAirdrop"" -> ""926_safeAdd"";
""926_distributeAirdrop"" -> ""926_balanceOf"";
""926_transfer"" -> ""926_balanceOf"";
""926_transferToContract"" -> ""926_safeAdd"";
""926_transfer"" -> ""926_safeSub"";
""926_distributeAirdrop"" -> ""926_safeMul"";
""926_transfer"" -> ""926_transferToContract"";
""926_transfer"" -> ""926_transferToAddress"";
""926_transferToContract"" -> ""926_balanceOf"";
""926_distributeAirdrop"" -> ""926_transfer"";
""926_transfer"" -> ""926_safeAdd"";
""926_distributeAirdrop"" -> ""926_safeSub"";
""926_transfer"" -> ""926_isContract"";
}
"
0x5af7af54e8bc34b293e356ef11fffe51d6f9ae78.sol,Marketplace,contract Marketplace is Ownable { modifier onlyJingle() { require(msg.sender == address(jingleContract)); _; },1,"subgraph cluster_1960_Marketplace {
label=""Marketplace"";
""1960_buy"" [label=""buy""];
""1960_removeOrder"" [label=""removeOrder""];
""1960_withdraw"" [label=""withdraw""];
""1960_cancel"" [label=""cancel""];
""1960_sell"" [label=""sell""];
""1960_Marketplace"" [label=""Marketplace""];
""1960_cancel"" -> ""1960_removeOrder"";
""1960_sell"" -> ""1960_onlyJingle"";
""1960_buy"" -> ""1960_removeOrder"";
""1960_withdraw"" -> ""1960_onlyOwner"";
}
"
0xcf5a08af322e52bee93861341f7bd90eb3d65aa3.sol,HeavyLitecoin,"contract HeavyLitecoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function HeavyLitecoin() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xaCaD93Eaf7509161Fe61C2173ce143fD469e5Cf8] = _totalSupply; Transfer(address(0), 0xaCaD93Eaf7509161Fe61C2173ce143fD469e5Cf8, _totalSupply); }",1,"subgraph cluster_543_HeavyLitecoin {
label=""HeavyLitecoin"";
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_HeavyLitecoin"" [label=""HeavyLitecoin""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_fallback"" [label=""fallback""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x5c0e4f2a54f1e0716ea64de7cfe83b0cf1ad417b.sol,PowrLedgerToken,"contract PowrLedgerToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function PowrLedgerToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 21 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_550_PowrLedgerToken {
label=""PowrLedgerToken"";
""550_fallback"" [label=""fallback""];
""550_approveAndCall"" [label=""approveAndCall""];
""550_transferFrom"" [label=""transferFrom""];
""550_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""550_totalSupply"" [label=""totalSupply""];
""550_PowrLedgerToken"" [label=""PowrLedgerToken""];
""550_balanceOf"" [label=""balanceOf""];
""550_allowance"" [label=""allowance""];
""550_approve"" [label=""approve""];
""550_transfer"" [label=""transfer""];
""550_transferAnyERC20Token"" -> ""550_onlyOwner"";
}
"
0xaa4ec8484e89bed69570825688789589d38eea5e.sol,Hourglass,contract Hourglass { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1305_Hourglass {
label=""Hourglass"";
""1305_exit"" [label=""exit""];
""1305_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1305_dividendsOf"" [label=""dividendsOf""];
""1305_buyPrice"" [label=""buyPrice""];
""1305_Hourglass"" [label=""Hourglass""];
""1305_setName"" [label=""setName""];
""1305_setAdministrator"" [label=""setAdministrator""];
""1305_sell"" [label=""sell""];
""1305_purchaseTokens"" [label=""purchaseTokens""];
""1305_transfer"" [label=""transfer""];
""1305_myTokens"" [label=""myTokens""];
""1305_totalSupply"" [label=""totalSupply""];
""1305_setSymbol"" [label=""setSymbol""];
""1305_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1305_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1305_withdraw"" [label=""withdraw""];
""1305_disableInitialStage"" [label=""disableInitialStage""];
""1305_balanceOf"" [label=""balanceOf""];
""1305_buy"" [label=""buy""];
""1305_setStakingRequirement"" [label=""setStakingRequirement""];
""1305_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1305_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1305_reinvest"" [label=""reinvest""];
""1305_sellPrice"" [label=""sellPrice""];
""1305_sqrt"" [label=""sqrt""];
""1305_myDividends"" [label=""myDividends""];
""1305_fallback"" [label=""fallback""];
""1305_calculateTokensReceived"" -> ""1305_ethereumToTokens_"";
""1305_myTokens"" -> ""1305_balanceOf"";
""1305_setAdministrator"" -> ""1305_onlyAdministrator"";
""1305_transfer"" -> ""1305_tokensToEthereum_"";
""1305_withdraw"" -> ""1305_myDividends"";
""1305_calculateEthereumReceived"" -> ""1305_tokensToEthereum_"";
""1305_disableInitialStage"" -> ""1305_onlyAdministrator"";
""1305_sell"" -> ""1305_tokensToEthereum_"";
""1305_buy"" -> ""1305_purchaseTokens"";
""1305_setName"" -> ""1305_onlyAdministrator"";
""1305_setStakingRequirement"" -> ""1305_onlyAdministrator"";
""1305_fallback"" -> ""1305_purchaseTokens"";
""1305_ethereumToTokens_"" -> ""1305_sqrt"";
""1305_reinvest"" -> ""1305_myDividends"";
""1305_transfer"" -> ""1305_withdraw"";
""1305_myDividends"" -> ""1305_dividendsOf"";
""1305_purchaseTokens"" -> ""1305_antiEarlyWhale"";
""1305_reinvest"" -> ""1305_purchaseTokens"";
""1305_reinvest"" -> ""1305_onlyStronghands"";
""1305_sell"" -> ""1305_onlyBagholders"";
""1305_exit"" -> ""1305_withdraw"";
""1305_transfer"" -> ""1305_myDividends"";
""1305_purchaseTokens"" -> ""1305_ethereumToTokens_"";
""1305_setSymbol"" -> ""1305_onlyAdministrator"";
""1305_withdraw"" -> ""1305_onlyStronghands"";
""1305_exit"" -> ""1305_sell"";
""1305_sellPrice"" -> ""1305_tokensToEthereum_"";
""1305_transfer"" -> ""1305_onlyBagholders"";
""1305_buyPrice"" -> ""1305_tokensToEthereum_"";
}
"
0x5abaff0b83f81dc061c590aadcba013c69237fd7.sol,CryptoJade,"contract CryptoJade is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CryptoJade() public { symbol = ; name = ; decimals = 18; _totalSupply = 125000000000000000000000000; balances[0x5E77C4cf41618A897759b3A2A32665C85BC2aF21] = _totalSupply; Transfer(address(0), 0x5E77C4cf41618A897759b3A2A32665C85BC2aF21, _totalSupply); }",1,"subgraph cluster_543_CryptoJade {
label=""CryptoJade"";
""543_fallback"" [label=""fallback""];
""543_CryptoJade"" [label=""CryptoJade""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x757df3c3cad364da4bbe0795f1fea5cb7e91774e.sol,RobincoinERC20,"contract RobincoinERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function RobincoinERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_RobincoinERC20 {
label=""RobincoinERC20"";
""396_approve"" [label=""approve""];
""396__transfer"" [label=""_transfer""];
""396_transfer"" [label=""transfer""];
""396_transferFrom"" [label=""transferFrom""];
""396_burn"" [label=""burn""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_burnFrom"" [label=""burnFrom""];
""396_RobincoinERC20"" [label=""RobincoinERC20""];
""396_transferFrom"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transfer"" -> ""396__transfer"";
}
"
0x449f5c827cf7726cc5f181090aa147ca5fb88a40.sol,Controllable,contract Controllable is Ownable { mapping(address => uint256) private contractIndices; address[] private contracts; modifier onlyActiveContracts() { require(contractIndices[msg.sender] != 0); _; },1,"subgraph cluster_315_Controllable {
label=""Controllable"";
""315_activateContract"" [label=""activateContract""];
""315_Controllable"" [label=""Controllable""];
""315_getActiveContracts"" [label=""getActiveContracts""];
""315_deactivateContract"" [label=""deactivateContract""];
""315_deactivateContract"" -> ""315_onlyOwner"";
""315_Controllable"" -> ""315_Ownable"";
""315_activateContract"" -> ""315_onlyOwner"";
}
"
0x4c7e8e14626249eea89b3d643ebe68795b49a6f1.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_transfer"" [label=""transfer""];
""256_balanceOf"" [label=""balanceOf""];
""256_transferFrom"" [label=""transferFrom""];
""256_allowance"" [label=""allowance""];
}
"
0x5b2028602af2693d50b4157f4acf84d632ec8208.sol,Savings,"contract Savings is Ownable { address public Owner; mapping (address => uint) public deposits; uint public openDate; event Initialized(uint OpenDate); event Deposit(address indexed Depositor, uint Amount); event Withdrawal(address indexed Withdrawer, uint Amount); function init(uint open) payable { Owner = msg.sender; openDate = open; Initialized(open); }",1,"subgraph cluster_164_Savings {
label=""Savings"";
""164_kill"" [label=""kill""];
""164_fallback"" [label=""fallback""];
""164_withdraw"" [label=""withdraw""];
""164_init"" [label=""init""];
""164_deposit"" [label=""deposit""];
""164_withdraw"" -> ""164_isOwner"";
""164_fallback"" -> ""164_deposit"";
""164_kill"" -> ""164_isOwner"";
}
"
0xda7c27c04f66842faf20644814b644e25e1766ea.sol,OptionsCalculator,"contract OptionsCalculator is Ownable, Destructable, Math, ESOPTypes { uint public cliffPeriod; uint public vestingPeriod; uint public maxFadeoutPromille; function residualAmountPromille() public constant returns(uint) { return FP_SCALE - maxFadeoutPromille; }",1,"subgraph cluster_3378_OptionsCalculator {
label=""OptionsCalculator"";
""3378_residualAmountPromille"" [label=""residualAmountPromille""];
""3378_extractVestedOptionsComponents"" [label=""extractVestedOptionsComponents""];
""3378_OptionsCalculator"" [label=""OptionsCalculator""];
""3378_calculateOptionsComponents"" [label=""calculateOptionsComponents""];
""3378_calculateFadeoutToPool"" [label=""calculateFadeoutToPool""];
""3378_applyFadeoutToOptions"" [label=""applyFadeoutToOptions""];
""3378_hasParameters"" [label=""hasParameters""];
""3378_calculateOptions"" [label=""calculateOptions""];
""3378_calcNewEmployeePoolOptions"" [label=""calcNewEmployeePoolOptions""];
""3378_calculateVestedOptions"" [label=""calculateVestedOptions""];
""3378_setParameters"" [label=""setParameters""];
""3378_simulateOptions"" [label=""simulateOptions""];
""3378_calculateOptionsComponents"" -> ""3378_divRound"";
""3378_calculateOptions"" -> ""3378_calculateOptionsComponents"";
""3378_extractVestedOptionsComponents"" -> ""3378_divRound"";
""3378_simulateOptions"" -> ""3378_serializeEmployee"";
""3378_setParameters"" -> ""3378_onlyCompany"";
""3378_calculateVestedOptions"" -> ""3378_divRound"";
""3378_calcNewEmployeePoolOptions"" -> ""3378_divRound"";
""3378_calculateOptionsComponents"" -> ""3378_extractVestedOptionsComponents"";
""3378_applyFadeoutToOptions"" -> ""3378_divRound"";
""3378_simulateOptions"" -> ""3378_calculateOptions"";
""3378_calculateOptionsComponents"" -> ""3378_calculateVestedOptions"";
""3378_calculateFadeoutToPool"" -> ""3378_calculateVestedOptions"";
""3378_setParameters"" -> ""3378_hasParameters"";
""3378_calculateFadeoutToPool"" -> ""3378_deserializeEmployee"";
""3378_calculateOptionsComponents"" -> ""3378_deserializeEmployee"";
""3378_calculateFadeoutToPool"" -> ""3378_applyFadeoutToOptions"";
""3378_calculateOptionsComponents"" -> ""3378_applyFadeoutToOptions"";
}
"
0x6d8811059eb8f0509acec06648ea95b3ae01be72.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_384_TokenERC20 {
label=""TokenERC20"";
""384_approveAndCall"" [label=""approveAndCall""];
""384__transfer"" [label=""_transfer""];
""384_burn"" [label=""burn""];
""384_approve"" [label=""approve""];
""384_constructor"" [label=""constructor""];
""384_burnFrom"" [label=""burnFrom""];
""384_transferFrom"" [label=""transferFrom""];
""384_transfer"" [label=""transfer""];
""384_transfer"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
""384_transferFrom"" -> ""384__transfer"";
}
"
0x580c1e3caca14826976b5820947f7ad486ac174d.sol,BitcoinAgileToken,"contract BitcoinAgileToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function _transfer(address _from, address _to, uint _value) internal { require (_to != 0x0); require (balanceOf[_from] > _value); require (balanceOf[_to] + _value > balanceOf[_to]); require(!frozenAccount[_from]); require(!frozenAccount[_to]); balanceOf[_from] -= _value; balanceOf[_to] += _value; Transfer(_from, _to, _value); }",1,"subgraph cluster_592_BitcoinAgileToken {
label=""BitcoinAgileToken"";
""592__transfer"" [label=""_transfer""];
""592_mintToken"" [label=""mintToken""];
""592_freezeAccount"" [label=""freezeAccount""];
""592_setPrices"" [label=""setPrices""];
""592_buy"" [label=""buy""];
""592_sell"" [label=""sell""];
""592_freezeAccount"" -> ""592_onlyOwner"";
""592_mintToken"" -> ""592_onlyOwner"";
""592_buy"" -> ""592__transfer"";
""592_setPrices"" -> ""592_onlyOwner"";
""592_sell"" -> ""592__transfer"";
}
"
0x0e9e062d7e60c8a6a406488631dae1c5f6db0e7d.sol,TextMessage,"contract TextMessage is owned { uint cost; bool public enabled; event UpdateCost(uint newCost); event UpdateEnabled(string newStatus); event NewText(string number, string message); function TextMessage() { cost = 380000000000000; enabled = true; }",1,"subgraph cluster_169_TextMessage {
label=""TextMessage"";
""169_enableContract"" [label=""enableContract""];
""169_withdraw"" [label=""withdraw""];
""169_TextMessage"" [label=""TextMessage""];
""169_sendMsg"" [label=""sendMsg""];
""169_sendText"" [label=""sendText""];
""169_costWei"" [label=""costWei""];
""169_pauseContract"" [label=""pauseContract""];
""169_changeCost"" [label=""changeCost""];
""169_pauseContract"" -> ""169_onlyOwner"";
""169_changeCost"" -> ""169_onlyOwner"";
""169_enableContract"" -> ""169_onlyOwner"";
""169_sendText"" -> ""169_sendMsg"";
""169_withdraw"" -> ""169_onlyOwner"";
}
"
0xd8ee3a6b246674a7c6ca07ed9d8b4500d1d80371.sol,MemeRecorder,contract MemeRecorder { address[] public memeContracts; constructor() public {},1,"subgraph cluster_429_MemeRecorder {
label=""MemeRecorder"";
""429_addMeme"" [label=""addMeme""];
""429_constructor"" [label=""constructor""];
""429_getMemes"" [label=""getMemes""];
}
"
0x1ebd8d3ca115451b9b6bbaa7ee2f7b0f96e49fd8.sol,ArthurStandardToken,"contract ArthurStandardToken is StandardToken { string public name; uint8 public decimals; string public symbol; function ArthurStandardToken( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_338_ArthurStandardToken {
label=""ArthurStandardToken"";
""338_ArthurStandardToken"" [label=""ArthurStandardToken""];
""338_approveAndCall"" [label=""approveAndCall""];
}
"
0x7996f859a313aab6458558c648e2f1f4acbf5f93.sol,HealthAidToken,contract HealthAidToken is ERC20 { address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalSupply = 25000000000 * 100000000; function name() public constant returns (string) { return ; },1,"subgraph cluster_553_HealthAidToken {
label=""HealthAidToken"";
""553_transfer"" [label=""transfer""];
""553_approve"" [label=""approve""];
""553_transferFrom"" [label=""transferFrom""];
""553_HealthAidToken"" [label=""HealthAidToken""];
""553_finishDistribution"" [label=""finishDistribution""];
""553_decimals"" [label=""decimals""];
""553_transferOwnership"" [label=""transferOwnership""];
""553_balanceOf"" [label=""balanceOf""];
""553_distributeHAT"" [label=""distributeHAT""];
""553_getEthBalance"" [label=""getEthBalance""];
""553_name"" [label=""name""];
""553_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""553_symbol"" [label=""symbol""];
""553_allowance"" [label=""allowance""];
""553_distributeHAT"" -> ""553_onlyOwner"";
""553_distributeHAT"" -> ""553_getEthBalance"";
""553_transferOwnership"" -> ""553_onlyOwner"";
""553_transferFrom"" -> ""553_onlyPayloadSize"";
""553_transfer"" -> ""553_onlyPayloadSize"";
""553_finishDistribution"" -> ""553_onlyOwner"";
""553_distributeHAT"" -> ""553_canDistr"";
}
"
0x415f07c7c57b1a213767ed8e3eb4b321fa04bb7c.sol,TokenGameHub,"contract TokenGameHub { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenGameHub( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenGameHub {
label=""TokenGameHub"";
""396_transferFrom"" [label=""transferFrom""];
""396_burnFrom"" [label=""burnFrom""];
""396_burn"" [label=""burn""];
""396__transfer"" [label=""_transfer""];
""396_TokenGameHub"" [label=""TokenGameHub""];
""396_approve"" [label=""approve""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_transfer"" [label=""transfer""];
""396_transferFrom"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transfer"" -> ""396__transfer"";
}
"
0x32df1ab2161317adbeafd47bcb30a2f1a806ccfb.sol,TokenBaseAsset,contract TokenBaseAsset { address mOwner = msg.sender; string public mCompany; mapping(string => string) mTokens; modifier isOwner() { require(msg.sender == mOwner); _; },1,"subgraph cluster_85_TokenBaseAsset {
label=""TokenBaseAsset"";
""85_getToken"" [label=""getToken""];
""85_TokenBaseAsset"" [label=""TokenBaseAsset""];
""85_addToken"" [label=""addToken""];
""85_removeToken"" [label=""removeToken""];
}
"
0x6abf810730a342add1374e11f3e97500ee774d1f.sol,BCFAuction,contract BCFAuction is Pausable { struct CardAuction { address seller; uint128 startPrice; uint128 endPrice; uint64 duration; uint64 startedAt; },1,"subgraph cluster_1844_BCFAuction {
label=""BCFAuction"";
""1844__bid"" [label=""_bid""];
""1844_cancelAuction"" [label=""cancelAuction""];
""1844__escrow"" [label=""_escrow""];
""1844_calculateCurrentPrice"" [label=""calculateCurrentPrice""];
""1844__transfer"" [label=""_transfer""];
""1844_calculateAuctioneerCut"" [label=""calculateAuctioneerCut""];
""1844_withdrawBalance"" [label=""withdrawBalance""];
""1844_bid"" [label=""bid""];
""1844_isOnAuction"" [label=""isOnAuction""];
""1844_currentPrice"" [label=""currentPrice""];
""1844_createAuction"" [label=""createAuction""];
""1844_getCurrentPrice"" [label=""getCurrentPrice""];
""1844_ownsPlayerCard"" [label=""ownsPlayerCard""];
""1844__addAuction"" [label=""_addAuction""];
""1844__cancelAuction"" [label=""_cancelAuction""];
""1844_getAuction"" [label=""getAuction""];
""1844__removeAuction"" [label=""_removeAuction""];
""1844_BCFAuction"" [label=""BCFAuction""];
""1844_bid"" -> ""1844__bid"";
""1844_createAuction"" -> ""1844__escrow"";
""1844__bid"" -> ""1844_calculateAuctioneerCut"";
""1844_getAuction"" -> ""1844_isOnAuction"";
""1844_getCurrentPrice"" -> ""1844_isOnAuction"";
""1844_bid"" -> ""1844__transfer"";
""1844_getCurrentPrice"" -> ""1844_currentPrice"";
""1844_createAuction"" -> ""1844__addAuction"";
""1844_currentPrice"" -> ""1844_calculateCurrentPrice"";
""1844__bid"" -> ""1844_isOnAuction"";
""1844_bid"" -> ""1844_whenNotPaused"";
""1844__bid"" -> ""1844__removeAuction"";
""1844_cancelAuction"" -> ""1844_isOnAuction"";
""1844__cancelAuction"" -> ""1844__removeAuction"";
""1844_cancelAuction"" -> ""1844__cancelAuction"";
""1844__cancelAuction"" -> ""1844__transfer"";
""1844__bid"" -> ""1844_currentPrice"";
""1844_createAuction"" -> ""1844_whenNotPaused"";
}
"
0xc3c412b97dc3355f1bd060223e75fb047c869197.sol,HngCoin,"contract HngCoin { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; uint256 public coinunits; uint256 public ethereumWei; address public tokensWallet; address public owner; address public salesaccount; uint256 public sellPrice; uint256 public buyPrice; bool public isActive; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HngCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; coinunits = 100; tokensWallet = msg.sender; salesaccount = msg.sender; ethereumWei = 1000000000000000000; isActive = true; owner = msg.sender; }",1,"subgraph cluster_810_HngCoinSale {
label=""HngCoinSale"";
""810_multiply"" [label=""multiply""];
""810_setPrices"" [label=""setPrices""];
""810_mintToken"" [label=""mintToken""];
""810_freezeAccount"" [label=""freezeAccount""];
""810__transfer"" [label=""_transfer""];
""810_HngCoinSale"" [label=""HngCoinSale""];
""810_freezeAccount"" -> ""810_onlyOwner"";
""810_setPrices"" -> ""810_onlyOwner"";
""810_mintToken"" -> ""810_onlyOwner"";
""810_HngCoinSale"" -> ""810_HngCoin"";
}
"
0x8a113a57e74aef531bee8de7e16e604916f053ac.sol,ClipperCoin,"contract ClipperCoin is Owned{ using SafeMath for uint; string public name = ; string public symbol = ; uint public decimals = 18; uint public totalSupply = 200000000 ether; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ClipperCoin( uint256 initialSupply, string tokenName, uint8 tokenDecimals, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = tokenDecimals; }",1,"subgraph cluster_864_ClipperCoin {
label=""ClipperCoin"";
""864__transfer"" [label=""_transfer""];
""864_burnFrom"" [label=""burnFrom""];
""864_transfer"" [label=""transfer""];
""864_approve"" [label=""approve""];
""864_ClipperCoin"" [label=""ClipperCoin""];
""864_approveAndCall"" [label=""approveAndCall""];
""864_transferFrom"" [label=""transferFrom""];
""864_burn"" [label=""burn""];
""864_approveAndCall"" -> ""864_approve"";
""864_transfer"" -> ""864__transfer"";
""864_transferFrom"" -> ""864__transfer"";
}
"
0xed2192afa8c062dfd6883759380b7f2d1dc6c0c0.sol,Owned,contract Owned { modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_74_Owned {
label=""Owned"";
""74_changeOwner"" [label=""changeOwner""];
""74_acceptOwnership"" [label=""acceptOwnership""];
""74_Owned"" [label=""Owned""];
""74_execute"" [label=""execute""];
""74_execute"" -> ""74_onlyOwner"";
""74_changeOwner"" -> ""74_onlyOwner"";
}
"
0xf064c38e3f5fa73981ee98372d32a16d032769cc.sol,Studio,"contract Studio is ERC20 { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping( address => uint256) public balanceOf; mapping( uint => address) public accountIndex; uint accountCount; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed spender, uint value); event Message ( address a, uint256 amount ); event Burn(address indexed from, uint256 value); function Studio() { uint supply = 50000000; appendTokenHolders( msg.sender ); balanceOf[msg.sender] = supply; totalSupply = supply; name = ; symbol = ; decimals = 0; owner = msg.sender; }",1,"subgraph cluster_540_Studio {
label=""Studio"";
""540_appendTokenHolders"" [label=""appendTokenHolders""];
""540_Studio"" [label=""Studio""];
""540_burn"" [label=""burn""];
""540_getAddress"" [label=""getAddress""];
""540_balanceOf"" [label=""balanceOf""];
""540_totalSupply"" [label=""totalSupply""];
""540_getAccountCount"" [label=""getAccountCount""];
""540_transferFrom"" [label=""transferFrom""];
""540_transfer"" [label=""transfer""];
""540_allowance"" [label=""allowance""];
""540_approve"" [label=""approve""];
""540_approveAndCall"" [label=""approveAndCall""];
""540_burnFrom"" [label=""burnFrom""];
""540_Studio"" -> ""540_appendTokenHolders"";
""540_approveAndCall"" -> ""540_approve"";
""540_transferFrom"" -> ""540_appendTokenHolders"";
""540_transfer"" -> ""540_appendTokenHolders"";
}
"
0x512d3dfe9c5f04276d772984c3a94039ad34b32b.sol,Airdrop,"contract Airdrop { function transfer(address from, address caddress, address[] _tos, uint256[] v) public returns (bool) { require(_tos.length > 0); require(v.length > 0); bytes4 id = bytes4(keccak256()); for (uint i = 0; i < _tos.length; i++) { require(caddress.call(id, from, _tos[i], v[i])); }",1,"subgraph cluster_69_Airdrop {
label=""Airdrop"";
""69_transfer"" [label=""transfer""];
}
"
0x36b53bf543eebf9ad42c5f161efd1247f38d034d.sol,REOC,"contract REOC { string public name; string public symbol; uint8 public decimals = 2; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function REOC() public { totalSupply = 2000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_REOC {
label=""REOC"";
""355_transfer"" [label=""transfer""];
""355_approve"" [label=""approve""];
""355_transferFrom"" [label=""transferFrom""];
""355_burnFrom"" [label=""burnFrom""];
""355_REOC"" [label=""REOC""];
""355_approveAndCall"" [label=""approveAndCall""];
""355__transfer"" [label=""_transfer""];
""355_burn"" [label=""burn""];
""355_transfer"" -> ""355__transfer"";
""355_approveAndCall"" -> ""355_approve"";
""355_transferFrom"" -> ""355__transfer"";
}
"
0xb430244b442c228a59a0fd4450fa7eedd5fbf833.sol,VOC_ethchf_48013527701_20181215,"contract VOC_ethchf_48013527701_20181215 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 330000000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOC_ethchf_48013527701_20181215 {
label=""VOC_ethchf_48013527701_20181215"";
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
}
"
0x70b8028610e60c1962522e0559c9a658663cfcce.sol,Olympus,"contract Olympus { using SafeMath for uint; address private constant supportAddress = 0x0bD47808d4A09aD155b00C39dBb101Fb71e1C0f0; uint private constant supportPercent = 1; mapping(address => uint) private shares; uint private totalShares; uint private totalPersons; function getBalance(address _account) public constant returns (uint) { if (totalShares == 0) return 0; uint contractBalance = address(this).balance; uint profitPercent = calculateProfitPercent(contractBalance, totalPersons); return contractBalance.mul(shares[_account]).mul(profitPercent).div(totalShares).div(100); }",1,"subgraph cluster_259_Olympus {
label=""Olympus"";
""259_calculateSupportPercent"" [label=""calculateSupportPercent""];
""259_getBalance"" [label=""getBalance""];
""259_calculateProfitPercent"" [label=""calculateProfitPercent""];
""259_fallback"" [label=""fallback""];
""259_fallback"" -> ""259_getBalance"";
""259_fallback"" -> ""259_calculateSupportPercent"";
""259_getBalance"" -> ""259_calculateProfitPercent"";
}
"
0xf5068761511594c82328102f4fde4650ed9ea6c4.sol,WHP,contract WHP is StandardToken { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address private creator; mapping (address => uint256) private blackmap; mapping (address => uint256) private releaseamount; modifier onlyCreator() { require(msg.sender == creator); _; },1,"subgraph cluster_541_WHP {
label=""WHP"";
""541_WHP"" [label=""WHP""];
""541_checkReleaseAmount"" [label=""checkReleaseAmount""];
""541_transfer"" [label=""transfer""];
""541_addBlackAccount"" [label=""addBlackAccount""];
""541_setReleaseAmountToCreator"" [label=""setReleaseAmountToCreator""];
""541_checkBlackAccount"" [label=""checkBlackAccount""];
""541__addressNotNull"" [label=""_addressNotNull""];
""541_setReleaseAmount"" [label=""setReleaseAmount""];
""541_clearBlackAccount"" [label=""clearBlackAccount""];
""541_clearBlackAccount"" -> ""541_onlyCreator"";
""541_clearBlackAccount"" -> ""541__addressNotNull"";
""541_addBlackAccount"" -> ""541__addressNotNull"";
""541_setReleaseAmountToCreator"" -> ""541_onlyCreator"";
""541_setReleaseAmount"" -> ""541_onlyCreator"";
""541_checkReleaseAmount"" -> ""541__addressNotNull"";
""541_addBlackAccount"" -> ""541_onlyCreator"";
""541_checkBlackAccount"" -> ""541__addressNotNull"";
""541_setReleaseAmount"" -> ""541__addressNotNull"";
}
"
0x4d797cbb28c49bd074db4a47b582c95fd37804a1.sol,CloutToken,"contract CloutToken is StandardToken { string public name; string public symbol; uint256 public decimals = 18; address public creator; function CloutToken(uint256 initialSupply, address _creator) public { require (msg.sender == _creator); creator=_creator; balances[msg.sender] = initialSupply * 10**decimals; totalSupply = initialSupply * 10**decimals; name = ; symbol = ; Transfer(0x0, msg.sender, totalSupply); }",1,"subgraph cluster_672_CloutToken {
label=""CloutToken"";
""672_CloutToken"" [label=""CloutToken""];
""672_transferMulti"" [label=""transferMulti""];
""672_transferMulti"" -> ""672_transfer"";
}
"
0x326ce88b27c196d0387f5df7ae085c1203185cb4.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20() public { totalSupply = 1000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_390_TokenERC20 {
label=""TokenERC20"";
""390_transfer"" [label=""transfer""];
""390_transferFrom"" [label=""transferFrom""];
""390_TokenERC20"" [label=""TokenERC20""];
""390_approve"" [label=""approve""];
""390__transfer"" [label=""_transfer""];
""390_burnFrom"" [label=""burnFrom""];
""390_burn"" [label=""burn""];
""390_approveAndCall"" [label=""approveAndCall""];
""390_approveAndCall"" -> ""390_approve"";
""390_transfer"" -> ""390__transfer"";
""390_transferFrom"" -> ""390__transfer"";
}
"
0x1ef57424c7f38628a0e25177ff61a671fbe4b405.sol,BitWestToken,"contract BitWestToken { address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function BitWestToken() { owner = 0xe6C37d321aB3E3669C67347F9cd525b769459FcA; name = ; symbol = ; decimals = 18; totalSupply = 2000000000000000000000000000; balanceOf[owner] = 2000000000000000000000000000; }",1,"subgraph cluster_266_BitWestToken {
label=""BitWestToken"";
""266_transferFrom"" [label=""transferFrom""];
""266_burn"" [label=""burn""];
""266_BitWestToken"" [label=""BitWestToken""];
""266_approve"" [label=""approve""];
""266_transfer"" [label=""transfer""];
""266_burnFrom"" [label=""burnFrom""];
}
"
0x212fa406fd28663ee6110d863a18e80960300e5c.sol,AnxToken,"contract AnxToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000; balances[0x963012c66676F1B4d8cbb491dd78AF3278789738] = _totalSupply; emit Transfer(address(0), 0x963012c66676F1B4d8cbb491dd78AF3278789738, _totalSupply); }",1,"subgraph cluster_543_AnxToken {
label=""AnxToken"";
""543_constructor"" [label=""constructor""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xf443aaaf1e0770a078b5e1b783e68eb71c9e2f0f.sol,usingOraclize,contract usingOraclize { uint constant day = 60*60*24; uint constant week = 60*60*24*7; uint constant month = 60*60*24*30; byte constant proofType_NONE = 0x00; byte constant proofType_TLSNotary = 0x10; byte constant proofType_Android = 0x20; byte constant proofType_Ledger = 0x30; byte constant proofType_Native = 0xF0; byte constant proofStorage_IPFS = 0x01; uint8 constant networkID_auto = 0; uint8 constant networkID_mainnet = 1; uint8 constant networkID_testnet = 2; uint8 constant networkID_morden = 2; uint8 constant networkID_consensys = 161; OraclizeAddrResolverI OAR; OraclizeI oraclize; modifier oraclizeAPI { if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork(networkID_auto); if(address(oraclize) != OAR.getAddress()) oraclize = OraclizeI(OAR.getAddress()); _; },1,"subgraph cluster_5844_usingOraclize {
label=""usingOraclize"";
""5844_getCodeSize"" [label=""getCodeSize""];
""5844_matchBytes32Prefix"" [label=""matchBytes32Prefix""];
""5844_ba2cbor"" [label=""ba2cbor""];
""5844_oraclize_newRandomDSQuery"" [label=""oraclize_newRandomDSQuery""];
""5844_ecrecovery"" [label=""ecrecovery""];
""5844_parseAddr"" [label=""parseAddr""];
""5844_verifySig"" [label=""verifySig""];
""5844_oraclize_setNetworkName"" [label=""oraclize_setNetworkName""];
""5844_indexOf"" [label=""indexOf""];
""5844_oraclize_randomDS_proofVerify__sessionKeyValidity"" [label=""oraclize_randomDS_proofVerify__sessionKeyValidity""];
""5844_oraclize_useCoupon"" [label=""oraclize_useCoupon""];
""5844_oraclize_randomDS_getSessionPubKeyHash"" [label=""oraclize_randomDS_getSessionPubKeyHash""];
""5844_oraclize_getPrice"" [label=""oraclize_getPrice""];
""5844_oraclize_setNetwork"" [label=""oraclize_setNetwork""];
""5844_oraclize_randomDS_proofVerify__main"" [label=""oraclize_randomDS_proofVerify__main""];
""5844_oraclize_setConfig"" [label=""oraclize_setConfig""];
""5844_strCompare"" [label=""strCompare""];
""5844___callback"" [label=""__callback""];
""5844_oraclize_randomDS_proofVerify__returnCode"" [label=""oraclize_randomDS_proofVerify__returnCode""];
""5844_safer_ecrecover"" [label=""safer_ecrecover""];
""5844_oraclize_setProof"" [label=""oraclize_setProof""];
""5844_oraclize_query"" [label=""oraclize_query""];
""5844_strConcat"" [label=""strConcat""];
""5844_parseInt"" [label=""parseInt""];
""5844_oraclize_setCustomGasPrice"" [label=""oraclize_setCustomGasPrice""];
""5844_uint2str"" [label=""uint2str""];
""5844_oraclize_randomDS_setCommitment"" [label=""oraclize_randomDS_setCommitment""];
""5844_oraclize_getNetworkName"" [label=""oraclize_getNetworkName""];
""5844_stra2cbor"" [label=""stra2cbor""];
""5844_oraclize_cbAddress"" [label=""oraclize_cbAddress""];
""5844_copyBytes"" [label=""copyBytes""];
""5844_oraclize_randomDS_proofVerify__main"" -> ""5844_matchBytes32Prefix"";
""5844_parseInt"" -> ""5844_parseInt"";
""5844___callback"" -> ""5844___callback"";
""5844_oraclize_setNetwork"" -> ""5844_oraclize_setNetworkName"";
""5844_oraclize_cbAddress"" -> ""5844_oraclizeAPI"";
""5844_oraclize_newRandomDSQuery"" -> ""5844_oraclize_query"";
""5844_oraclize_setNetwork"" -> ""5844_getCodeSize"";
""5844_ecrecovery"" -> ""5844_safer_ecrecover"";
""5844_oraclize_query"" -> ""5844_ba2cbor"";
""5844_oraclize_setConfig"" -> ""5844_oraclizeAPI"";
""5844_oraclize_newRandomDSQuery"" -> ""5844_oraclize_randomDS_setCommitment"";
""5844_oraclize_randomDS_proofVerify__sessionKeyValidity"" -> ""5844_copyBytes"";
""5844_oraclize_randomDS_getSessionPubKeyHash"" -> ""5844_oraclizeAPI"";
""5844_oraclize_setCustomGasPrice"" -> ""5844_oraclizeAPI"";
""5844_oraclize_randomDS_proofVerify__main"" -> ""5844_oraclize_randomDS_proofVerify__sessionKeyValidity"";
""5844_oraclize_setProof"" -> ""5844_oraclizeAPI"";
""5844_oraclize_randomDS_proofVerify__main"" -> ""5844_verifySig"";
""5844_verifySig"" -> ""5844_copyBytes"";
""5844_oraclize_newRandomDSQuery"" -> ""5844_oraclize_randomDS_getSessionPubKeyHash"";
""5844_oraclize_randomDS_proofVerify__sessionKeyValidity"" -> ""5844_verifySig"";
""5844_oraclize_query"" -> ""5844_oraclizeAPI"";
""5844_oraclize_randomDS_proofVerify__returnCode"" -> ""5844_oraclize_randomDS_proofVerify__main"";
""5844_oraclize_randomDS_proofVerify__returnCode"" -> ""5844_oraclize_getNetworkName"";
""5844_oraclize_query"" -> ""5844_oraclize_query"";
""5844_oraclize_getPrice"" -> ""5844_oraclizeAPI"";
""5844_oraclize_randomDS_proofVerify__main"" -> ""5844_copyBytes"";
""5844_strConcat"" -> ""5844_strConcat"";
""5844_verifySig"" -> ""5844_safer_ecrecover"";
""5844_oraclize_query"" -> ""5844_stra2cbor"";
""5844_oraclize_useCoupon"" -> ""5844_oraclizeAPI"";
}
"
0xd359e3f53b5d4e11b8b11dc0772448f380accf3c.sol,TokenLayer,"contract TokenLayer is ERC721, Manageable { using SafeMath for uint256; event TokenCreated(uint256 tokenId, bytes32 name, uint256 parentId, address owner); event TokenDeleted(uint256 tokenId); event TokenSold( uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, bytes32 name, uint256 parentId ); event PriceChanged(uint256 tokenId, uint256 oldPrice, uint256 newPrice); event ParentChanged(uint256 tokenId, uint256 oldParentId, uint256 newParentId); event NameChanged(uint256 tokenId, bytes32 oldName, bytes32 newName); event MetaDataChanged(uint256 tokenId, bytes32 oldMeta, bytes32 newMeta); uint256 private constant DEFAULTPARENT = 123456789; mapping (uint256 => Token) private tokenIndexToToken; mapping (address => uint256) private ownershipTokenCount; address public gameAddress; address public parentAddr; uint256 private totalTokens; uint256 public devFee = 50; uint256 public ownerFee = 200; uint256[10] private chainFees = [10]; struct Token { bool exists; address approved; address owner; bytes32 metadata; bytes32 name; uint256 lastBlock; uint256 parentId; uint256 price; }",1,"subgraph cluster_2131_TokenLayer {
label=""TokenLayer"";
""2131_symbol"" [label=""symbol""];
""2131_deleteToken"" [label=""deleteToken""];
""2131_ownerOf"" [label=""ownerOf""];
""2131_blocked"" [label=""blocked""];
""2131_setPrice"" [label=""setPrice""];
""2131_approve"" [label=""approve""];
""2131_bundleToken"" [label=""bundleToken""];
""2131_implementsERC721"" [label=""implementsERC721""];
""2131_balanceOf"" [label=""balanceOf""];
""2131__transfer"" [label=""_transfer""];
""2131_getPriceOf"" [label=""getPriceOf""];
""2131_setParent"" [label=""setParent""];
""2131_TokenLayer"" [label=""TokenLayer""];
""2131__addressNotNull"" [label=""_addressNotNull""];
""2131_setGame"" [label=""setGame""];
""2131_setMetadata"" [label=""setMetadata""];
""2131_name"" [label=""name""];
""2131_setDevFee"" [label=""setDevFee""];
""2131_getChainFeeArray"" [label=""getChainFeeArray""];
""2131_transferFrom"" [label=""transferFrom""];
""2131_incrementPrice"" [label=""incrementPrice""];
""2131__checkThenTransfer"" [label=""_checkThenTransfer""];
""2131__transferFrom"" [label=""_transferFrom""];
""2131_createToken"" [label=""createToken""];
""2131_getToken"" [label=""getToken""];
""2131_totalSupply"" [label=""totalSupply""];
""2131_tokensOfOwner"" [label=""tokensOfOwner""];
""2131_getChainFees"" [label=""getChainFees""];
""2131__getChainLength"" [label=""_getChainLength""];
""2131_takeOwnership"" [label=""takeOwnership""];
""2131_setLayerParent"" [label=""setLayerParent""];
""2131_setOwnerFee"" [label=""setOwnerFee""];
""2131_parentAddr"" [label=""parentAddr""];
""2131_getMetadataOf"" [label=""getMetadataOf""];
""2131__approve"" [label=""_approve""];
""2131_transfer"" [label=""transfer""];
""2131_createTokens"" [label=""createTokens""];
""2131__takeOwnership"" [label=""_takeOwnership""];
""2131__owns"" [label=""_owns""];
""2131_exists"" [label=""exists""];
""2131__getNextPrice"" [label=""_getNextPrice""];
""2131_setChainFees"" [label=""setChainFees""];
""2131_getParentOf"" [label=""getParentOf""];
""2131__approved"" [label=""_approved""];
""2131_setName"" [label=""setName""];
""2131_getChain"" [label=""getChain""];
""2131_setPrice"" -> ""2131_onlySystem"";
""2131_transferFrom"" -> ""2131_onlySystem"";
""2131_approve"" -> ""2131_onlySystem"";
""2131_getChainFees"" -> ""2131__getChainLength"";
""2131_getToken"" -> ""2131__getNextPrice"";
""2131_ownerOf"" -> ""2131_exists"";
""2131__checkThenTransfer"" -> ""2131__owns"";
""2131__checkThenTransfer"" -> ""2131_exists"";
""2131_setOwnerFee"" -> ""2131_onlyAdmin"";
""2131_deleteToken"" -> ""2131_onlyAdmin"";
""2131__transferFrom"" -> ""2131__addressNotNull"";
""2131__checkThenTransfer"" -> ""2131__addressNotNull"";
""2131_setChainFees"" -> ""2131_onlyAdmin"";
""2131__takeOwnership"" -> ""2131__approved"";
""2131_tokensOfOwner"" -> ""2131_balanceOf"";
""2131_setLayerParent"" -> ""2131_onlyAdmin"";
""2131_getToken"" -> ""2131_getChainFees"";
""2131_createToken"" -> ""2131__addressNotNull"";
""2131_setName"" -> ""2131_exists"";
""2131__transferFrom"" -> ""2131__transfer"";
""2131_setParent"" -> ""2131_exists"";
""2131_setMetadata"" -> ""2131_onlyAdmin"";
""2131__getChainLength"" -> ""2131__addressNotNull"";
""2131_approve"" -> ""2131_isUnlocked"";
""2131_bundleToken"" -> ""2131__getNextPrice"";
""2131_approve"" -> ""2131__approve"";
""2131_setParent"" -> ""2131_onlyAdmin"";
""2131_incrementPrice"" -> ""2131_getChainFees"";
""2131_bundleToken"" -> ""2131_getChainFees"";
""2131_createTokens"" -> ""2131_createToken"";
""2131_incrementPrice"" -> ""2131_exists"";
""2131_takeOwnership"" -> ""2131__takeOwnership"";
""2131_tokensOfOwner"" -> ""2131_exists"";
""2131_setMetadata"" -> ""2131_exists"";
""2131__getChainLength"" -> ""2131_getParentOf"";
""2131_createTokens"" -> ""2131_onlyAdmin"";
""2131__takeOwnership"" -> ""2131__transfer"";
""2131_setGame"" -> ""2131_onlyAdmin"";
""2131_takeOwnership"" -> ""2131_isUnlocked"";
""2131_getChain"" -> ""2131__addressNotNull"";
""2131_transferFrom"" -> ""2131_isUnlocked"";
""2131_createToken"" -> ""2131__transfer"";
""2131_getPriceOf"" -> ""2131_exists"";
""2131_createToken"" -> ""2131_onlyAdmin"";
""2131__getNextPrice"" -> ""2131_getChainFees"";
""2131__approve"" -> ""2131__owns"";
""2131_transfer"" -> ""2131_isUnlocked"";
""2131_getParentOf"" -> ""2131_exists"";
""2131_getChain"" -> ""2131_getParentOf"";
""2131_createToken"" -> ""2131_exists"";
""2131_getChain"" -> ""2131_exists"";
""2131__takeOwnership"" -> ""2131__addressNotNull"";
""2131_incrementPrice"" -> ""2131_onlySystem"";
""2131__checkThenTransfer"" -> ""2131__transfer"";
""2131_tokensOfOwner"" -> ""2131_totalSupply"";
""2131_setPrice"" -> ""2131__owns"";
""2131_deleteToken"" -> ""2131_exists"";
""2131__transferFrom"" -> ""2131__owns"";
""2131_getMetadataOf"" -> ""2131_exists"";
""2131__transferFrom"" -> ""2131__approved"";
""2131_setName"" -> ""2131_onlyAdmin"";
""2131_transferFrom"" -> ""2131__transferFrom"";
""2131_takeOwnership"" -> ""2131_onlySystem"";
""2131_transfer"" -> ""2131_onlySystem"";
""2131_transfer"" -> ""2131__checkThenTransfer"";
""2131_setDevFee"" -> ""2131_onlyAdmin"";
}
"
0x37f16599a7a4ba385770dbc3c143485fc2b709ce.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20() public { totalSupply = 36000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_TokenERC20 {
label=""TokenERC20"";
""355_approveAndCall"" [label=""approveAndCall""];
""355_burn"" [label=""burn""];
""355_transfer"" [label=""transfer""];
""355_TokenERC20"" [label=""TokenERC20""];
""355_transferFrom"" [label=""transferFrom""];
""355_burnFrom"" [label=""burnFrom""];
""355_approve"" [label=""approve""];
""355__transfer"" [label=""_transfer""];
""355_approveAndCall"" -> ""355_approve"";
""355_transferFrom"" -> ""355__transfer"";
""355_transfer"" -> ""355__transfer"";
}
"
0xdbceb7a76854784f7c003586737f5f3809381a33.sol,FIDT,"contract FIDT is StandardToken, BurnableToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals)); mapping(address => uint256) public balanceLocked; mapping(address => uint256) public freeAtTime; uint public amountRaised; uint256 public buyPrice = 5000; bool public crowdsaleClosed; bool public transferEnabled = true; constructor() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; emit Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_1090_FIDT {
label=""FIDT"";
""1090_fallback"" [label=""fallback""];
""1090_safeWithdrawal"" [label=""safeWithdrawal""];
""1090_constructor"" [label=""constructor""];
""1090_setPrice"" [label=""setPrice""];
""1090_getFreeBalances"" [label=""getFreeBalances""];
""1090__lock"" [label=""_lock""];
""1090__transfer"" [label=""_transfer""];
""1090_transferEx"" [label=""transferEx""];
""1090_checkLocked"" [label=""checkLocked""];
""1090_lockAddress"" [label=""lockAddress""];
""1090_transferFrom"" [label=""transferFrom""];
""1090_closeBuy"" [label=""closeBuy""];
""1090_transfer"" [label=""transfer""];
""1090_enableTransfer"" [label=""enableTransfer""];
""1090_unlockAddress"" [label=""unlockAddress""];
""1090_setPrice"" -> ""1090_onlyOwner"";
""1090_safeWithdrawal"" -> ""1090_onlyOwner"";
""1090_unlockAddress"" -> ""1090_onlyOwner"";
""1090_transferFrom"" -> ""1090_checkLocked"";
""1090_lockAddress"" -> ""1090__lock"";
""1090_transfer"" -> ""1090_checkLocked"";
""1090_closeBuy"" -> ""1090_onlyOwner"";
""1090_transferEx"" -> ""1090_onlyOwner"";
""1090_transferFrom"" -> ""1090_transferFrom"";
""1090_enableTransfer"" -> ""1090_onlyOwner"";
""1090_lockAddress"" -> ""1090_onlyOwner"";
""1090_transfer"" -> ""1090_transfer"";
""1090_fallback"" -> ""1090__transfer"";
""1090__transfer"" -> ""1090__lock"";
""1090_transferEx"" -> ""1090_transfer"";
}
"
0x345e5427a6183df9a1c883dd8dfd05cf6b0e7c87.sol,IPFSV,"contract IPFSV { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_371_IPFSV {
label=""IPFSV"";
""371_burnFrom"" [label=""burnFrom""];
""371_approveAndCall"" [label=""approveAndCall""];
""371_transferFrom"" [label=""transferFrom""];
""371_constructor"" [label=""constructor""];
""371_approve"" [label=""approve""];
""371__transfer"" [label=""_transfer""];
""371_transfer"" [label=""transfer""];
""371_burn"" [label=""burn""];
""371_transferFrom"" -> ""371__transfer"";
""371_transfer"" -> ""371__transfer"";
""371_approveAndCall"" -> ""371_approve"";
}
"
0x7830cda4a9a2e8fb28b5250d72ede4536b9ff4a0.sol,LLTokenBTB,"contract LLTokenBTB { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function LLTokenBTB( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_LLTokenBTB {
label=""LLTokenBTB"";
""380_burn"" [label=""burn""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_burnFrom"" [label=""burnFrom""];
""380_LLTokenBTB"" [label=""LLTokenBTB""];
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380__transfer"" [label=""_transfer""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0xf3bfe4b73faa6393f84f59354ebd71b1c4db53fc.sol,TVToken,contract TVToken { string public name = ; string public symbol = ; uint8 public decimals = 18; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply; uint256 constant initialSupply = 950007890020; bool public stopped = false; address internal owner = 0x0; modifier ownerOnly { require(owner == msg.sender); _; },1,"subgraph cluster_373_TVToken {
label=""TVToken"";
""373_burn"" [label=""burn""];
""373_start"" [label=""start""];
""373_transferFrom"" [label=""transferFrom""];
""373_mint"" [label=""mint""];
""373_transfer"" [label=""transfer""];
""373_TVToken"" [label=""TVToken""];
""373_stop"" [label=""stop""];
""373_approve"" [label=""approve""];
""373_stop"" -> ""373_ownerOnly"";
""373_transferFrom"" -> ""373_isRunning"";
""373_transfer"" -> ""373_validAddress"";
""373_start"" -> ""373_ownerOnly"";
""373_transfer"" -> ""373_isRunning"";
""373_approve"" -> ""373_isRunning"";
""373_burn"" -> ""373_validAddress"";
""373_approve"" -> ""373_validAddress"";
""373_transferFrom"" -> ""373_validAddress"";
""373_burn"" -> ""373_isRunning"";
}
"
0x6c0f03411ab250f0a080a4420190b821affd4602.sol,ERC721Token,"contract ERC721Token is ERC721Interface, ERC721Metadata, ERC721Enumerable, Owned { using SafeMath for uint; uint public ownerCount = 0; uint public deedCount = 0; mapping(address => uint) public balances; mapping(uint => address) public mIdOwner; mapping(uint => address) public mIdApproved; function balanceOf(address _owner) external view returns (uint balance) { balance = balances[_owner]; }",1,"subgraph cluster_623_ERC721Token {
label=""ERC721Token"";
""623_approve"" [label=""approve""];
""623_updateBalances"" [label=""updateBalances""];
""623_balanceOf"" [label=""balanceOf""];
""623_totalSupply"" [label=""totalSupply""];
""623_deedByIndex"" [label=""deedByIndex""];
""623_ownerOf"" [label=""ownerOf""];
""623_transferFrom"" [label=""transferFrom""];
""623_transfer"" [label=""transfer""];
""623_countOfOwners"" [label=""countOfOwners""];
""623_transferFrom"" -> ""623_updateBalances"";
""623_transfer"" -> ""623_updateBalances"";
}
"
0x6c26dab04c8f2bb07e60f205118e36850fe90981.sol,PoWMLottery,contract PoWMLottery { using SafeMath for uint256; bool public isLotteryOpen = false; address POWM_address = address(0xA146240bF2C04005A743032DC0D241ec0bB2BA2B); POWM maths = POWM(POWM_address); address owner; mapping (uint256 => address) public gamblers; mapping (address => uint256) public token_buyins; mapping (address => uint256) public last_round_bought; uint256 public num_tickets_current_round = 0; uint256 public current_round = 0; uint256 public numTokensInLottery = 0; address masternode_referrer; uint256 public MAX_TOKEN_BUYIN = 25; function PoWMLottery() public { current_round = 1; owner = msg.sender; masternode_referrer = msg.sender; },1,"subgraph cluster_349_PoWMLottery {
label=""PoWMLottery"";
""349_PoWMLottery"" [label=""PoWMLottery""];
""349_fallback"" [label=""fallback""];
""349_openLottery"" [label=""openLottery""];
""349_buyTickets"" [label=""buyTickets""];
""349_setMaxTokenBuyin"" [label=""setMaxTokenBuyin""];
""349_donateToLottery"" [label=""donateToLottery""];
""349_closeLotteryAndPickWinner"" [label=""closeLotteryAndPickWinner""];
""349_closeLotteryAndPickWinner"" -> ""349_onlyOwner"";
""349_setMaxTokenBuyin"" -> ""349_onlyOwner"";
""349_fallback"" -> ""349_buyTickets"";
""349_openLottery"" -> ""349_onlyOwner"";
}
"
0xb4b330972e302081ebacd054f4305a3af4103f0f.sol,CryptoTradeToken,"contract CryptoTradeToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CryptoTradeToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000; balances[0x92Bf51aB8C48B93a96F8dde8dF07A1504aA393fD] = _totalSupply; emit Transfer(address(0), 0x92Bf51aB8C48B93a96F8dde8dF07A1504aA393fD, _totalSupply); }",1,"subgraph cluster_543_CryptoTradeToken {
label=""CryptoTradeToken"";
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_CryptoTradeToken"" [label=""CryptoTradeToken""];
""543_fallback"" [label=""fallback""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x6e3990c89bd13397f3c080500805863275cc85ec.sol,POSV,contract POSV { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1310_POSV {
label=""POSV"";
""1310_exit"" [label=""exit""];
""1310_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1310_disableInitialStage"" [label=""disableInitialStage""];
""1310_sell"" [label=""sell""];
""1310_dividendsOf"" [label=""dividendsOf""];
""1310_sellPrice"" [label=""sellPrice""];
""1310_reinvest"" [label=""reinvest""];
""1310_fallback"" [label=""fallback""];
""1310_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1310_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1310_totalSupply"" [label=""totalSupply""];
""1310_buy"" [label=""buy""];
""1310_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1310_myTokens"" [label=""myTokens""];
""1310_transfer"" [label=""transfer""];
""1310_withdraw"" [label=""withdraw""];
""1310_setName"" [label=""setName""];
""1310_setAdministrator"" [label=""setAdministrator""];
""1310_myDividends"" [label=""myDividends""];
""1310_purchaseTokens"" [label=""purchaseTokens""];
""1310_sqrt"" [label=""sqrt""];
""1310_buyPrice"" [label=""buyPrice""];
""1310_setStakingRequirement"" [label=""setStakingRequirement""];
""1310_balanceOf"" [label=""balanceOf""];
""1310_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1310_setSymbol"" [label=""setSymbol""];
""1310_investtokens"" [label=""investtokens""];
""1310_withdraw"" -> ""1310_myDividends"";
""1310_setSymbol"" -> ""1310_onlyAdministrator"";
""1310_transfer"" -> ""1310_withdraw"";
""1310_transfer"" -> ""1310_tokensToEthereum_"";
""1310_withdraw"" -> ""1310_onlyStronghands"";
""1310_setStakingRequirement"" -> ""1310_onlyAdministrator"";
""1310_sell"" -> ""1310_onlyBagholders"";
""1310_setName"" -> ""1310_onlyAdministrator"";
""1310_exit"" -> ""1310_withdraw"";
""1310_sell"" -> ""1310_tokensToEthereum_"";
""1310_calculateEthereumReceived"" -> ""1310_tokensToEthereum_"";
""1310_calculateTokensReceived"" -> ""1310_ethereumToTokens_"";
""1310_myTokens"" -> ""1310_balanceOf"";
""1310_reinvest"" -> ""1310_purchaseTokens"";
""1310_fallback"" -> ""1310_purchaseTokens"";
""1310_disableInitialStage"" -> ""1310_onlyAdministrator"";
""1310_purchaseTokens"" -> ""1310_antiEarlyWhale"";
""1310_buy"" -> ""1310_purchaseTokens"";
""1310_myDividends"" -> ""1310_dividendsOf"";
""1310_purchaseTokens"" -> ""1310_ethereumToTokens_"";
""1310_sellPrice"" -> ""1310_tokensToEthereum_"";
""1310_reinvest"" -> ""1310_onlyStronghands"";
""1310_setAdministrator"" -> ""1310_onlyAdministrator"";
""1310_reinvest"" -> ""1310_myDividends"";
""1310_transfer"" -> ""1310_onlyBagholders"";
""1310_transfer"" -> ""1310_myDividends"";
""1310_buyPrice"" -> ""1310_tokensToEthereum_"";
""1310_ethereumToTokens_"" -> ""1310_sqrt"";
""1310_exit"" -> ""1310_sell"";
}
"
0x741f58cd68d24f361cc0ee0d3aaf7df2bf16132e.sol,BlockonixToken,"contract BlockonixToken is IERC20, Ownable, Vestable, HasAddresses, VestingPeriods, IsUpgradable { using SafeMathLib for uint256; uint256 public constant totalTokenSupply = 1009208335 * 10**16; uint256 public burntTokens; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; mapping (address => uint256) public balances; mapping(address => mapping(address => uint256)) approved; event Upgraded(address _owner, uint256 amount); constructor() public { uint256 lockedTokenPerAddress = 280335648611111000000000; balances[founder1FirstLockup] = lockedTokenPerAddress; balances[founder2FirstLockup] = lockedTokenPerAddress; balances[founder3FirstLockup] = lockedTokenPerAddress; balances[founder1SecondLockup] = lockedTokenPerAddress; balances[founder2SecondLockup] = lockedTokenPerAddress; balances[founder3SecondLockup] = lockedTokenPerAddress; balances[founder1ThirdLockup] = lockedTokenPerAddress; balances[founder2ThirdLockup] = lockedTokenPerAddress; balances[founder3ThirdLockup] = lockedTokenPerAddress; emit Transfer(address(this), founder1FirstLockup, lockedTokenPerAddress); emit Transfer(address(this), founder2FirstLockup, lockedTokenPerAddress); emit Transfer(address(this), founder3FirstLockup, lockedTokenPerAddress); emit Transfer(address(this), founder1SecondLockup, lockedTokenPerAddress); emit Transfer(address(this), founder2SecondLockup, lockedTokenPerAddress); emit Transfer(address(this), founder3SecondLockup, lockedTokenPerAddress); emit Transfer(address(this), founder1ThirdLockup, lockedTokenPerAddress); emit Transfer(address(this), founder2ThirdLockup, lockedTokenPerAddress); emit Transfer(address(this), founder3ThirdLockup, lockedTokenPerAddress); addVestingAddress(founder1FirstLockup, firstLockup); addVestingAddress(founder2FirstLockup, firstLockup); addVestingAddress(founder3FirstLockup, firstLockup); addVestingAddress(founder1SecondLockup, secondLockup); addVestingAddress(founder2SecondLockup, secondLockup); addVestingAddress(founder3SecondLockup, secondLockup); addVestingAddress(founder1ThirdLockup, thirdLockup); addVestingAddress(founder2ThirdLockup, thirdLockup); addVestingAddress(founder3ThirdLockup, thirdLockup); }",1,"subgraph cluster_853_BlockonixToken {
label=""BlockonixToken"";
""853_allowance"" [label=""allowance""];
""853_balanceOf"" [label=""balanceOf""];
""853_approve"" [label=""approve""];
""853_burn"" [label=""burn""];
""853_upgrade"" [label=""upgrade""];
""853__transfer"" [label=""_transfer""];
""853_transfer"" [label=""transfer""];
""853_transferFrom"" [label=""transferFrom""];
""853_totalSupply"" [label=""totalSupply""];
""853_constructor"" [label=""constructor""];
""853_transfer"" -> ""853__transfer"";
""853_approve"" -> ""853_checkVestingCondition"";
""853_constructor"" -> ""853_addVestingAddress"";
""853_transfer"" -> ""853_checkVestingCondition"";
""853_transferFrom"" -> ""853__transfer"";
""853_transferFrom"" -> ""853_checkVestingCondition"";
}
"
0xdd850d1d845a444a13e9516317a0a57075d9cf8e.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_415_TokenERC20 {
label=""TokenERC20"";
""415_transfer"" [label=""transfer""];
""415_approve"" [label=""approve""];
""415_burnFrom"" [label=""burnFrom""];
""415_approveAndCall"" [label=""approveAndCall""];
""415_transferFrom"" [label=""transferFrom""];
""415__transfer"" [label=""_transfer""];
""415_burn"" [label=""burn""];
""415_constructor"" [label=""constructor""];
""415_transferFrom"" -> ""415__transfer"";
""415_approveAndCall"" -> ""415_approve"";
""415_transfer"" -> ""415__transfer"";
}
"
0x04247b9b59091b349eb60e429fe7dbc99fdad34b.sol,FSC3,"contract FSC3 is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function FSC3( ) TokenERC20() public {}",1,"subgraph cluster_545_FSC3 {
label=""FSC3"";
""545__transfer"" [label=""_transfer""];
""545_mintToken"" [label=""mintToken""];
""545_FSC3"" [label=""FSC3""];
""545_freezeAccount"" [label=""freezeAccount""];
""545_mintToken"" -> ""545_onlyOwner"";
""545_freezeAccount"" -> ""545_onlyOwner"";
""545_FSC3"" -> ""545_TokenERC20"";
}
"
0x40da24a66f729d0bd0453681c5a6506bdc2a7a6a.sol,CrwdToken,"contract CrwdToken is StandardToken { enum States { Initial, ValuationSet, Ico, Underfunded, Operational, Paused }",1,"subgraph cluster_1496_CrwdToken {
label=""CrwdToken"";
""1496_transfer"" [label=""transfer""];
""1496_transferFrom"" [label=""transferFrom""];
""1496_issueTokensToUser"" [label=""issueTokensToUser""];
""1496_rescueToken"" [label=""rescueToken""];
""1496_addBonus"" [label=""addBonus""];
""1496_CrwdToken"" [label=""CrwdToken""];
""1496_balanceOf"" [label=""balanceOf""];
""1496_pause"" [label=""pause""];
""1496_resumeICO"" [label=""resumeICO""];
""1496_fallback"" [label=""fallback""];
""1496_abort"" [label=""abort""];
""1496_moveToState"" [label=""moveToState""];
""1496_setBonusPhase"" [label=""setBonusPhase""];
""1496_burnAndFinish"" [label=""burnAndFinish""];
""1496_anyoneEndICO"" [label=""anyoneEndICO""];
""1496_endICO"" [label=""endICO""];
""1496_startICO"" [label=""startICO""];
""1496_addPresaleAmount"" [label=""addPresaleAmount""];
""1496_addToWhitelist"" [label=""addToWhitelist""];
""1496_requestPayout"" [label=""requestPayout""];
""1496_getPhaseBonus"" [label=""getPhaseBonus""];
""1496_requestRefund"" [label=""requestRefund""];
""1496_updateEthICOThresholds"" [label=""updateEthICOThresholds""];
""1496_issuePercentToReserve"" [label=""issuePercentToReserve""];
""1496_transfer"" -> ""1496_transfer"";
""1496_addPresaleAmount"" -> ""1496_issueTokensToUser"";
""1496_anyoneEndICO"" -> ""1496_burnAndFinish"";
""1496_transfer"" -> ""1496_requireState"";
""1496_updateEthICOThresholds"" -> ""1496_onlyStateControl"";
""1496_pause"" -> ""1496_moveToState"";
""1496_anyoneEndICO"" -> ""1496_requireState"";
""1496_transferFrom"" -> ""1496_transferFrom"";
""1496_resumeICO"" -> ""1496_onlyStateControl"";
""1496_transferFrom"" -> ""1496_requireState"";
""1496_abort"" -> ""1496_moveToState"";
""1496_rescueToken"" -> ""1496_onlyTokenAssignmentControl"";
""1496_rescueToken"" -> ""1496_requireState"";
""1496_fallback"" -> ""1496_requireState"";
""1496_abort"" -> ""1496_requireState"";
""1496_CrwdToken"" -> ""1496_moveToState"";
""1496_endICO"" -> ""1496_burnAndFinish"";
""1496_anyoneEndICO"" -> ""1496_moveToState"";
""1496_fallback"" -> ""1496_addBonus"";
""1496_requestPayout"" -> ""1496_requireState"";
""1496_endICO"" -> ""1496_moveToState"";
""1496_pause"" -> ""1496_requireState"";
""1496_addPresaleAmount"" -> ""1496_onlyTokenAssignmentControl"";
""1496_requestPayout"" -> ""1496_onlyWithdraw"";
""1496_addBonus"" -> ""1496_getPhaseBonus"";
""1496_resumeICO"" -> ""1496_moveToState"";
""1496_resumeICO"" -> ""1496_requireState"";
""1496_startICO"" -> ""1496_onlyStateControl"";
""1496_setBonusPhase"" -> ""1496_onlyStateControl"";
""1496_startICO"" -> ""1496_moveToState"";
""1496_endICO"" -> ""1496_onlyStateControl"";
""1496_burnAndFinish"" -> ""1496_issuePercentToReserve"";
""1496_pause"" -> ""1496_onlyStateControl"";
""1496_abort"" -> ""1496_onlyStateControl"";
""1496_startICO"" -> ""1496_requireState"";
""1496_updateEthICOThresholds"" -> ""1496_moveToState"";
""1496_addToWhitelist"" -> ""1496_onlyWhitelist"";
""1496_endICO"" -> ""1496_requireState"";
""1496_fallback"" -> ""1496_issueTokensToUser"";
""1496_requestRefund"" -> ""1496_requireState"";
}
"
0x34770f06ae8a9a7b44fd8d636af6a3fec2a58b98.sol,StdToken,"contract StdToken is Token { mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; uint public supply; function _transfer(address _from, address _to, uint _value) internal { require(_to != 0x0); require(balances[_from] >= _value); require(balances[_to] + _value >= balances[_to]); uint previousBalances = balances[_from] + balances[_to]; balances[_from] -= _value; balances[_to] += _value; emit Transfer(_from, _to, _value); assert(balances[_from] + balances[_to] == previousBalances); }",1,"subgraph cluster_392_StdToken {
label=""StdToken"";
""392_balanceOf"" [label=""balanceOf""];
""392_transferFrom"" [label=""transferFrom""];
""392__transfer"" [label=""_transfer""];
""392__burn"" [label=""_burn""];
""392_totalSupply"" [label=""totalSupply""];
""392_transfer"" [label=""transfer""];
""392_transferTo"" [label=""transferTo""];
""392_allowance"" [label=""allowance""];
""392_approve"" [label=""approve""];
""392_transferTo"" -> ""392__transfer"";
""392_transferFrom"" -> ""392__transfer"";
""392_transfer"" -> ""392__transfer"";
}
"
0x539bff788404c395117dd2dfdcc3d5e00a72d3b7.sol,EdenwToken,"contract EdenwToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function EdenwToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_642_EdenwToken {
label=""EdenwToken"";
""642_mintToken"" [label=""mintToken""];
""642_EdenwToken"" [label=""EdenwToken""];
""642_freezeAccount"" [label=""freezeAccount""];
""642__transfer"" [label=""_transfer""];
""642_setPrices"" [label=""setPrices""];
""642_sell"" [label=""sell""];
""642_buy"" [label=""buy""];
""642_mintToken"" -> ""642_onlyOwner"";
""642_buy"" -> ""642__transfer"";
""642_sell"" -> ""642__transfer"";
""642_freezeAccount"" -> ""642_onlyOwner"";
""642_EdenwToken"" -> ""642_TokenERC20"";
""642_setPrices"" -> ""642_onlyOwner"";
}
"
0xc81068cd335889736fc485592e4d73a82403d44b.sol,Factories,contract Factories { GooToken constant goo = GooToken(0xdf0960778c6e6597f197ed9a25f12f5d971da86c); Units units = Units(0x0); Inventory inventory = Inventory(0x0); mapping(address => uint256[]) private playerFactories; mapping(uint256 => mapping(uint256 => uint32[8])) public tileBonuses; mapping(address => bool) operator; address owner; uint256 public constant MAX_SIZE = 40; constructor() public { owner = msg.sender; },1,"subgraph cluster_580_Factories {
label=""Factories"";
""580_setInventory"" [label=""setInventory""];
""580_addTileBonus"" [label=""addTileBonus""];
""580_constructor"" [label=""constructor""];
""580_getFactories"" [label=""getFactories""];
""580_getPlayersUnits"" [label=""getPlayersUnits""];
""580_getAddressDigit"" [label=""getAddressDigit""];
""580_moveFactory"" [label=""moveFactory""];
""580_setOperator"" [label=""setOperator""];
""580_addFactory"" [label=""addFactory""];
""580_setUnits"" [label=""setUnits""];
""580_moveFactory"" -> ""580_getAddressDigit"";
""580_addFactory"" -> ""580_getAddressDigit"";
}
"
0x403f614ea176bdd865ab0377831f487987179cea.sol,GIFT_CARD,"contract GIFT_CARD { function Put(bytes32 _hash, uint _unlockTime) public payable { if(this.balance==0 || msg.value > 1000000000000000000) { unlockTime = now+_unlockTime; hashPass = _hash; }",1,"subgraph cluster_83_GIFT_CARD {
label=""GIFT_CARD"";
""83_fallback"" [label=""fallback""];
""83_Put"" [label=""Put""];
""83_GetHash"" [label=""GetHash""];
""83_Take"" [label=""Take""];
}
"
0x5bedf488d29407bc08e77cd9ee292c2041a61c8c.sol,UnKoin,contract UnKoin { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1303_UnKoin {
label=""UnKoin"";
""1303_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1303_myTokens"" [label=""myTokens""];
""1303_totalSupply"" [label=""totalSupply""];
""1303_disableInitialStage"" [label=""disableInitialStage""];
""1303_withdraw"" [label=""withdraw""];
""1303_UnKoin"" [label=""UnKoin""];
""1303_setName"" [label=""setName""];
""1303_sellPrice"" [label=""sellPrice""];
""1303_setStakingRequirement"" [label=""setStakingRequirement""];
""1303_buyPrice"" [label=""buyPrice""];
""1303_fallback"" [label=""fallback""];
""1303_myDividends"" [label=""myDividends""];
""1303_exit"" [label=""exit""];
""1303_reinvest"" [label=""reinvest""];
""1303_setAdministrator"" [label=""setAdministrator""];
""1303_balanceOf"" [label=""balanceOf""];
""1303_sqrt"" [label=""sqrt""];
""1303_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1303_sell"" [label=""sell""];
""1303_dividendsOf"" [label=""dividendsOf""];
""1303_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1303_buy"" [label=""buy""];
""1303_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1303_transfer"" [label=""transfer""];
""1303_purchaseTokens"" [label=""purchaseTokens""];
""1303_setSymbol"" [label=""setSymbol""];
""1303_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1303_setSymbol"" -> ""1303_onlyAdministrator"";
""1303_setAdministrator"" -> ""1303_onlyAdministrator"";
""1303_myTokens"" -> ""1303_balanceOf"";
""1303_buyPrice"" -> ""1303_tokensToEthereum_"";
""1303_disableInitialStage"" -> ""1303_onlyAdministrator"";
""1303_buy"" -> ""1303_purchaseTokens"";
""1303_purchaseTokens"" -> ""1303_antiEarlyWhale"";
""1303_ethereumToTokens_"" -> ""1303_sqrt"";
""1303_sell"" -> ""1303_onlyBagholders"";
""1303_setName"" -> ""1303_onlyAdministrator"";
""1303_exit"" -> ""1303_sell"";
""1303_reinvest"" -> ""1303_onlyStronghands"";
""1303_reinvest"" -> ""1303_purchaseTokens"";
""1303_exit"" -> ""1303_withdraw"";
""1303_sell"" -> ""1303_tokensToEthereum_"";
""1303_transfer"" -> ""1303_withdraw"";
""1303_withdraw"" -> ""1303_myDividends"";
""1303_sellPrice"" -> ""1303_tokensToEthereum_"";
""1303_transfer"" -> ""1303_tokensToEthereum_"";
""1303_calculateEthereumReceived"" -> ""1303_tokensToEthereum_"";
""1303_fallback"" -> ""1303_purchaseTokens"";
""1303_calculateTokensReceived"" -> ""1303_ethereumToTokens_"";
""1303_reinvest"" -> ""1303_myDividends"";
""1303_transfer"" -> ""1303_myDividends"";
""1303_myDividends"" -> ""1303_dividendsOf"";
""1303_purchaseTokens"" -> ""1303_ethereumToTokens_"";
""1303_setStakingRequirement"" -> ""1303_onlyAdministrator"";
""1303_transfer"" -> ""1303_onlyBagholders"";
""1303_withdraw"" -> ""1303_onlyStronghands"";
}
"
0xef8a2c1bc94e630463293f71bf5414d13e80f62d.sol,SupplySchedule,contract SupplySchedule is Owned { using SafeMath for uint; using SafeDecimalMath for uint; struct ScheduleData { uint totalSupply; uint startPeriod; uint endPeriod; uint totalSupplyMinted; },1,"subgraph cluster_2023_SupplySchedule {
label=""SupplySchedule"";
""2023_setMinterReward"" [label=""setMinterReward""];
""2023_mintableSupply"" [label=""mintableSupply""];
""2023__remainingSupplyFromPreviousYear"" [label=""_remainingSupplyFromPreviousYear""];
""2023_getCurrentSchedule"" [label=""getCurrentSchedule""];
""2023_setSynthetix"" [label=""setSynthetix""];
""2023_minterReward"" [label=""minterReward""];
""2023__numWeeksRoundedDown"" [label=""_numWeeksRoundedDown""];
""2023_isMintable"" [label=""isMintable""];
""2023_constructor"" [label=""constructor""];
""2023_updateMintValues"" [label=""updateMintValues""];
""2023_setMinterReward"" -> ""2023_onlyOwner"";
""2023_mintableSupply"" -> ""2023_isMintable"";
""2023_mintableSupply"" -> ""2023__remainingSupplyFromPreviousYear"";
""2023_constructor"" -> ""2023_constructor"";
""2023_updateMintValues"" -> ""2023_getCurrentSchedule"";
""2023_mintableSupply"" -> ""2023__numWeeksRoundedDown"";
""2023_updateMintValues"" -> ""2023__remainingSupplyFromPreviousYear"";
""2023_updateMintValues"" -> ""2023_mintableSupply"";
""2023_updateMintValues"" -> ""2023_onlySynthetix"";
""2023_setSynthetix"" -> ""2023_onlyOwner"";
""2023_mintableSupply"" -> ""2023_getCurrentSchedule"";
}
"
0xf1e6b7f94bb0d70d8a19187f684e4270b0a0c989.sol,ERC20TokenCPN,contract ERC20TokenCPN { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 0; address public regulator; uint8 public regulatorStatus; uint internal amount; struct agent { uint balance; mapping (address => uint) allowed; uint8 permission; },1,"subgraph cluster_633_ERC20TokenCPN {
label=""ERC20TokenCPN"";
""633_changeAgentPermission"" [label=""changeAgentPermission""];
""633_burn"" [label=""burn""];
""633_changeRegulator"" [label=""changeRegulator""];
""633_totalSupply"" [label=""totalSupply""];
""633_approve"" [label=""approve""];
""633_transferFrom"" [label=""transferFrom""];
""633_changeRegulatorStatus"" [label=""changeRegulatorStatus""];
""633_agentPermission"" [label=""agentPermission""];
""633_ERC20TokenCPN"" [label=""ERC20TokenCPN""];
""633_destroy"" [label=""destroy""];
""633_transfer"" [label=""transfer""];
""633_allowance"" [label=""allowance""];
""633_balanceOf"" [label=""balanceOf""];
""633_mint"" [label=""mint""];
""633_mint"" -> ""633_transfer"";
""633_ERC20TokenCPN"" -> ""633_changeRegulatorStatus"";
""633_ERC20TokenCPN"" -> ""633_mint"";
""633_ERC20TokenCPN"" -> ""633_changeRegulator"";
}
"
0x031e0c6a7c91df1bc171d33cccc6988fd2ddeb6f.sol,TopCoinFXToken,contract TopCoinFXToken { string public name = ; string public symbol = ; uint256 public constant decimals = 18; address public adminWallet; mapping(address => uint256) public balanceOf; mapping(address => mapping(address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint public constant supplyNumber = 1000000000; uint public constant powNumber = 10; uint public constant TOKEN_SUPPLY_TOTAL = supplyNumber * powNumber ** decimals; uint256 constant valueFounder = TOKEN_SUPPLY_TOTAL; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_383_TopCoinFXToken {
label=""TopCoinFXToken"";
""383_transfer"" [label=""transfer""];
""383_constructor"" [label=""constructor""];
""383_start"" [label=""start""];
""383_transferFrom"" [label=""transferFrom""];
""383_stop"" [label=""stop""];
""383_approve"" [label=""approve""];
""383_setSymbol"" [label=""setSymbol""];
""383_setName"" [label=""setName""];
""383_burn"" [label=""burn""];
""383_stop"" -> ""383_isOwner"";
""383_approve"" -> ""383_validAddress"";
""383_approve"" -> ""383_isRunning"";
""383_start"" -> ""383_isOwner"";
""383_transferFrom"" -> ""383_validAddress"";
""383_transferFrom"" -> ""383_isRunning"";
""383_transfer"" -> ""383_isRunning"";
""383_setName"" -> ""383_isOwner"";
""383_setSymbol"" -> ""383_isOwner"";
""383_transfer"" -> ""383_validAddress"";
}
"
0x1d26883a84a81b3046e027bbcbe7506a90e6b5a5.sol,PiToken,"contract PiToken { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function PiToken ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 3141592653589793238 ** uint256(decimals); balanceOf[msg.sender] = totalSupply = 3141592653589793238; tokenName = ; tokenSymbol = ; }",1,"subgraph cluster_400_PiToken {
label=""PiToken"";
""400__transfer"" [label=""_transfer""];
""400_approve"" [label=""approve""];
""400_transferFrom"" [label=""transferFrom""];
""400_PiToken"" [label=""PiToken""];
""400_burnFrom"" [label=""burnFrom""];
""400_approveAndCall"" [label=""approveAndCall""];
""400_burn"" [label=""burn""];
""400_transfer"" [label=""transfer""];
""400_approveAndCall"" -> ""400_approve"";
""400_transfer"" -> ""400__transfer"";
""400_transferFrom"" -> ""400__transfer"";
}
"
0x365080610e03aa5c5693f6b2dd78ee792ee9a9cb.sol,ZIP,"contract ZIP is owned, token { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function ZIP( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}",1,"subgraph cluster_600_ZIP {
label=""ZIP"";
""600__transfer"" [label=""_transfer""];
""600_ZIP"" [label=""ZIP""];
""600_buy"" [label=""buy""];
""600_freezeAccount"" [label=""freezeAccount""];
""600_sell"" [label=""sell""];
""600_setPrices"" [label=""setPrices""];
""600_mintToken"" [label=""mintToken""];
""600_ZIP"" -> ""600_token"";
""600_mintToken"" -> ""600_onlyOwner"";
""600_buy"" -> ""600__transfer"";
""600_sell"" -> ""600__transfer"";
""600_freezeAccount"" -> ""600_onlyOwner"";
""600_setPrices"" -> ""600_onlyOwner"";
}
"
0x21aec0a028d7adec228595b24439c7eb969edd5f.sol,Sudokoin,"contract Sudokoin { uint supply = 203462379904501283815424; uint public boards = 0; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 12; mapping (address => mapping (address => uint)) allowances; mapping (address => uint) balances; mapping (uint => bool) public claimedBoards; event Approval(address indexed _owner, address indexed _spender, uint _value); event BoardClaimed(uint _board, uint _no, address _by); event Burn(address indexed _from, uint _value); event Transfer(address indexed _from, address indexed _to, uint _value); function allowance(address _owner, address _spender) constant returns (uint remaining) { remaining = allowances[_owner][_spender]; }",1,"subgraph cluster_1937_Sudokoin {
label=""Sudokoin"";
""1937_transfer"" [label=""transfer""];
""1937_burn"" [label=""burn""];
""1937_allowance"" [label=""allowance""];
""1937_balanceOf"" [label=""balanceOf""];
""1937_nextReward"" [label=""nextReward""];
""1937_setIncludes"" [label=""setIncludes""];
""1937_approve"" [label=""approve""];
""1937_addToSet"" [label=""addToSet""];
""1937_validateSet"" [label=""validateSet""];
""1937_compressBoard"" [label=""compressBoard""];
""1937_claimBoard"" [label=""claimBoard""];
""1937_burnFrom"" [label=""burnFrom""];
""1937_validateBoard"" [label=""validateBoard""];
""1937_totalSupply"" [label=""totalSupply""];
""1937_transferFrom"" [label=""transferFrom""];
""1937_validateSet"" -> ""1937_addToSet"";
""1937_claimBoard"" -> ""1937_validateBoard"";
""1937_claimBoard"" -> ""1937_nextReward"";
""1937_validateBoard"" -> ""1937_validateSet"";
""1937_validateSet"" -> ""1937_setIncludes"";
""1937_claimBoard"" -> ""1937_compressBoard"";
}
"
0x5573cb8589a2ed0ca4029202739bfc251932201f.sol,STRATCO,"contract STRATCO { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_STRATCO {
label=""STRATCO"";
""380_burnFrom"" [label=""burnFrom""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_constructor"" [label=""constructor""];
""380_transferFrom"" [label=""transferFrom""];
""380_burn"" [label=""burn""];
""380_approve"" [label=""approve""];
""380_transfer"" [label=""transfer""];
""380__transfer"" [label=""_transfer""];
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0x2fb23f5b0b18e947186c9cc848b86d550c81711c.sol,AndhraToken,"contract AndhraToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function AndhraToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000000; balances[0x3878c8700b65afcc237f0cf29dc7eae7fa236192] = _totalSupply; Transfer(address(0), 0x3878c8700b65afcc237f0cf29dc7eae7fa236192, _totalSupply); }",1,"subgraph cluster_543_AndhraToken {
label=""AndhraToken"";
""543_allowance"" [label=""allowance""];
""543_AndhraToken"" [label=""AndhraToken""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x4c4757b23526ba13876f8ef3efe973618266e3e8.sol,UZMINI_KO,contract UZMINI_KO { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_UZMINI_KO {
label=""UZMINI_KO"";
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
}
"
0xc3c412b97dc3355f1bd060223e75fb047c869197.sol,HngCoinSale,"contract HngCoinSale is owned, HngCoin { mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function HngCoinSale( uint256 initialSupply, string tokenName, string tokenSymbol ) HngCoin(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_810_HngCoinSale {
label=""HngCoinSale"";
""810_multiply"" [label=""multiply""];
""810_setPrices"" [label=""setPrices""];
""810_mintToken"" [label=""mintToken""];
""810_freezeAccount"" [label=""freezeAccount""];
""810__transfer"" [label=""_transfer""];
""810_HngCoinSale"" [label=""HngCoinSale""];
""810_freezeAccount"" -> ""810_onlyOwner"";
""810_setPrices"" -> ""810_onlyOwner"";
""810_mintToken"" -> ""810_onlyOwner"";
""810_HngCoinSale"" -> ""810_HngCoin"";
}
"
0x1899924f87138cd0607e27c516a84bc839faa1a4.sol,TokenCreator,"contract TokenCreator { event TokenCreated(address indexed owner, address token); function createToken (string _name, string _symbol, uint8 _decimals) public { emit TokenCreated(msg.sender, new MyToken(_name, _symbol, _decimals, msg.sender)); }",1,"subgraph cluster_751_TokenCreator {
label=""TokenCreator"";
""751_createToken"" [label=""createToken""];
}
"
0xb463ffd52534720186eb18b3b90a94bf12d61619.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol, uint8 _decimals ) public { decimals = _decimals; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_401_TokenERC20 {
label=""TokenERC20"";
""401_transferFrom"" [label=""transferFrom""];
""401_burn"" [label=""burn""];
""401__transfer"" [label=""_transfer""];
""401_approve"" [label=""approve""];
""401_TokenERC20"" [label=""TokenERC20""];
""401_transfer"" [label=""transfer""];
""401_approveAndCall"" [label=""approveAndCall""];
""401_burnFrom"" [label=""burnFrom""];
""401_transfer"" -> ""401__transfer"";
""401_transferFrom"" -> ""401__transfer"";
""401_approveAndCall"" -> ""401_approve"";
}
"
0x025abad9e518516fdaafbdcdb9701b37fb7ef0fa.sol,StandardMintableToken,"contract StandardMintableToken is owned{ string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function StandardMintableToken( string tokenName, uint8 decimalUnits, string tokenSymbol, uint256 initialSupply ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_526_StandardMintableToken {
label=""StandardMintableToken"";
""526_transfer"" [label=""transfer""];
""526_approveAndCall"" [label=""approveAndCall""];
""526_burnFrom"" [label=""burnFrom""];
""526_freezeAccount"" [label=""freezeAccount""];
""526_StandardMintableToken"" [label=""StandardMintableToken""];
""526_transferFrom"" [label=""transferFrom""];
""526_approve"" [label=""approve""];
""526_mintToken"" [label=""mintToken""];
""526_burn"" [label=""burn""];
""526_freezeAccount"" -> ""526_onlyOwner"";
""526_approveAndCall"" -> ""526_approve"";
""526_burnFrom"" -> ""526_onlyOwner"";
""526_mintToken"" -> ""526_onlyOwner"";
}
"
0xf20a773b3d9f2a1f080fbae1156a5e9768ceb615.sol,BabyCoin,"contract BabyCoin is Ownable { using SafeMath for uint256; string public name; string public symbol; uint32 public decimals = 18; uint256 public totalSupply; uint256 public currentTotalSupply = 0; uint256 public airdropNum = 2 ether; uint256 public airdropSupply = 2000; mapping(address => bool) touched; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function BabyCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balances[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_630_BabyCoin {
label=""BabyCoin"";
""630_transferFrom"" [label=""transferFrom""];
""630__transfer"" [label=""_transfer""];
""630_balanceOf"" [label=""balanceOf""];
""630_allowance"" [label=""allowance""];
""630_getBalance"" [label=""getBalance""];
""630_decreaseApproval"" [label=""decreaseApproval""];
""630_BabyCoin"" [label=""BabyCoin""];
""630__airdrop"" [label=""_airdrop""];
""630_increaseApproval"" [label=""increaseApproval""];
""630_transfer"" [label=""transfer""];
""630_approve"" [label=""approve""];
""630__transfer"" -> ""630__airdrop"";
""630_transferFrom"" -> ""630__transfer"";
""630_balanceOf"" -> ""630_getBalance"";
""630_transfer"" -> ""630__transfer"";
}
"
0x4c30afe476e90b3a1e094a6ed6c17c0369a6d4ef.sol,EBCoin,"contract EBCoin is Owned { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; bool private tradeable; uint256 private currentSupply; mapping(address => uint256) private balances; mapping(address => mapping(address=> uint256)) private allowed; mapping(address => bool) private lockedAccounts; event ReceivedEth(address indexed _from, uint256 _value); function () payable public { emit ReceivedEth(msg.sender, msg.value); }",1,"subgraph cluster_960_EBCoin {
label=""EBCoin"";
""960_SetTradeable"" [label=""SetTradeable""];
""960_totalSupply"" [label=""totalSupply""];
""960_EB"" [label=""EB""];
""960_transferFrom"" [label=""transferFrom""];
""960_DestroyToken"" [label=""DestroyToken""];
""960_MintToken"" [label=""MintToken""];
""960_IsTradeable"" [label=""IsTradeable""];
""960_FoundationTransfer"" [label=""FoundationTransfer""];
""960_UnlockAccount"" [label=""UnlockAccount""];
""960_LockAccount"" [label=""LockAccount""];
""960_decreaseApproval"" [label=""decreaseApproval""];
""960_transfer"" [label=""transfer""];
""960_BuyToken"" [label=""BuyToken""];
""960_fallback"" [label=""fallback""];
""960_increaseApproval"" [label=""increaseApproval""];
""960_approve"" [label=""approve""];
""960_lastDayPaid"" [label=""lastDayPaid""];
""960_allowance"" [label=""allowance""];
""960_balanceOf"" [label=""balanceOf""];
""960_DailyMint"" [label=""DailyMint""];
""960_transferFrom"" -> ""960_notLocked"";
""960_DestroyToken"" -> ""960_onlyOwner"";
""960_MintToken"" -> ""960_onlyOwner"";
""960_FoundationTransfer"" -> ""960_onlyOwner"";
""960_BuyToken"" -> ""960_onlyOwner"";
""960_UnlockAccount"" -> ""960_onlyOwner"";
""960_LockAccount"" -> ""960_onlyOwner"";
""960_SetTradeable"" -> ""960_onlyOwner"";
""960_transfer"" -> ""960_notLocked"";
}
"
0x536ad2443ba256577876dbb4b89db10966513475.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( ) public { totalSupply = 400000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_391_TokenERC20 {
label=""TokenERC20"";
""391_TokenERC20"" [label=""TokenERC20""];
""391_burnFrom"" [label=""burnFrom""];
""391_addTokenToTotalSupply"" [label=""addTokenToTotalSupply""];
""391_transferFrom"" [label=""transferFrom""];
""391_approve"" [label=""approve""];
""391__transfer"" [label=""_transfer""];
""391_approveAndCall"" [label=""approveAndCall""];
""391_transfer"" [label=""transfer""];
""391_burn"" [label=""burn""];
""391_transfer"" -> ""391__transfer"";
""391_approveAndCall"" -> ""391_approve"";
""391_transferFrom"" -> ""391__transfer"";
}
"
0xeea59c2f2e85272fc2f7e38d6b556f25ce8e7d68.sol,eKRW,"contract eKRW { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_eKRW {
label=""eKRW"";
""380_burn"" [label=""burn""];
""380_transfer"" [label=""transfer""];
""380_constructor"" [label=""constructor""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_approve"" [label=""approve""];
""380__transfer"" [label=""_transfer""];
""380_burnFrom"" [label=""burnFrom""];
""380_transferFrom"" [label=""transferFrom""];
""380_transferFrom"" -> ""380__transfer"";
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
}
"
0x48de9c6454d9da324d7908a6472ca4fb77a3e4fd.sol,LC,"contract LC { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function LC( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_LC {
label=""LC"";
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_approve"" [label=""approve""];
""361_LC"" [label=""LC""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x6ba2d5e4384a69df6066e1cf6c395909254910fb.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_balanceOf"" [label=""balanceOf""];
""256_transfer"" [label=""transfer""];
""256_transferFrom"" [label=""transferFrom""];
""256_allowance"" [label=""allowance""];
}
"
0x70838403ecc194b73e50b70a177b2ef413a2f421.sol,bzxcoin,"contract bzxcoin is owned { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 10**25; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function bzxcoin(){ balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_553_bzxcoin {
label=""bzxcoin"";
""553_approveAndCall"" [label=""approveAndCall""];
""553_burn"" [label=""burn""];
""553_transfer"" [label=""transfer""];
""553_mintToken"" [label=""mintToken""];
""553_burnFrom"" [label=""burnFrom""];
""553_transferFrom"" [label=""transferFrom""];
""553_bzxcoin"" [label=""bzxcoin""];
""553__transfer"" [label=""_transfer""];
""553_approve"" [label=""approve""];
""553_distributeToken"" [label=""distributeToken""];
""553_transfer"" -> ""553__transfer"";
""553_distributeToken"" -> ""553_onlyOwner"";
""553_transferFrom"" -> ""553__transfer"";
""553_mintToken"" -> ""553_onlyOwner"";
""553_approveAndCall"" -> ""553_approve"";
}
"
0x1db45a09efcdd8955b1c3bb855b5a8d333446bff.sol,Share,"contract Share { bool public pause; address public owner; mapping (address => uint) public holds; mapping (address => uint256) public fullfilled; mapping (address => uint256) public sellPrice; mapping (address => uint) public toSell; uint256 public watermark; event PAUSED(); event STARTED(); event SHARE_TRANSFER(address from, address to, uint amount); event INCOME(uint256); event PRICE_SET(address holder, uint shares, uint256 price, uint sell); event WITHDRAWAL(address owner, uint256 amount); event SELL_HOLDS(address from, address to, uint amount, uint256 price); event SEND_HOLDS(address from, address to, uint amount); modifier onlyOwner() { require(msg.sender == owner); _; }",1,"subgraph cluster_477_Share {
label=""Share"";
""477_setState"" [label=""setState""];
""477_withdrawal"" [label=""withdrawal""];
""477_transferHolds"" [label=""transferHolds""];
""477_fallback"" [label=""fallback""];
""477_onIncome"" [label=""onIncome""];
""477_bonus"" [label=""bonus""];
""477_Share"" [label=""Share""];
""477_transfer"" [label=""transfer""];
""477_setPrice"" [label=""setPrice""];
""477_buyFrom"" [label=""buyFrom""];
""477_withdrawal"" -> ""477_bonus"";
""477_buyFrom"" -> ""477_transferHolds"";
""477_setState"" -> ""477_onlyOwner"";
""477_setPrice"" -> ""477_notPaused"";
""477_buyFrom"" -> ""477_notPaused"";
""477_transfer"" -> ""477_notPaused"";
""477_transfer"" -> ""477_transferHolds"";
""477_withdrawal"" -> ""477_notPaused"";
""477_fallback"" -> ""477_onIncome"";
}
"
0x35fd00d47202b1b2158dba75e7cc8f71b068c256.sol,Crowdsale,"contract Crowdsale is Pausable, TokenVesting { using SafeMath for uint; address public multisigETH; address public commissionAddress; uint public tokensForTeam; uint public ethReceivedPresale; uint public ethReceivedMain; uint public totalTokensSent; uint public tokensSentMain; uint public tokensSentPresale; uint public tokensSentDev; uint public startBlock; uint public endBlock; uint public maxCap; uint public minCap; uint public minContributionMainSale; uint public minContributionPresale; uint public maxContribution; bool public crowdsaleClosed; uint public tokenPriceWei; uint public refundCount; uint public totalRefunded; uint public campaignDurationDays; uint public firstPeriod; uint public secondPeriod; uint public thirdPeriod; uint public firstBonus; uint public secondBonus; uint public thirdBonus; uint public multiplier; uint public status; Step public currentStep; address[] public holdersIndex; address[] public devIndex; enum Step { FundingPreSale, FundingMainSale, Refunding }",1,"subgraph cluster_1700_Crowdsale {
label=""Crowdsale"";
""1700_drain"" [label=""drain""];
""1700_advanceStep"" [label=""advanceStep""];
""1700_contributePublic"" [label=""contributePublic""];
""1700_determineStatus"" [label=""determineStatus""];
""1700_returnWebsiteData"" [label=""returnWebsiteData""];
""1700_fallback"" [label=""fallback""];
""1700_devAllocation"" [label=""devAllocation""];
""1700_numberOfBackers"" [label=""numberOfBackers""];
""1700_refund"" [label=""refund""];
""1700_calculateNoOfTokensToSend"" [label=""calculateNoOfTokensToSend""];
""1700_transferTokens"" [label=""transferTokens""];
""1700_finalize"" [label=""finalize""];
""1700_determineCommissions"" [label=""determineCommissions""];
""1700_Crowdsale"" [label=""Crowdsale""];
""1700_contribute"" [label=""contribute""];
""1700_start"" [label=""start""];
""1700_contribute"" -> ""1700_calculateNoOfTokensToSend"";
""1700_transferTokens"" -> ""1700_onlyOwner"";
""1700_finalize"" -> ""1700_onlyOwner"";
""1700_contributePublic"" -> ""1700_contribute"";
""1700_refund"" -> ""1700_whenNotPaused"";
""1700_devAllocation"" -> ""1700_onlyOwner"";
""1700_contribute"" -> ""1700_whenNotPaused"";
""1700_advanceStep"" -> ""1700_onlyOwner"";
""1700_contribute"" -> ""1700_respectTimeFrame"";
""1700_start"" -> ""1700_onlyOwner"";
""1700_finalize"" -> ""1700_determineCommissions"";
""1700_returnWebsiteData"" -> ""1700_numberOfBackers"";
""1700_drain"" -> ""1700_onlyOwner"";
""1700_fallback"" -> ""1700_contribute"";
}
"
0x17d32b5d528979bfa60897ba8716b7c96f9e8ea7.sol,MyToken,"contract MyToken { string public name; string public symbol; uint8 public decimals = 8; uint256 internal _totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) internal _allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); function MyToken(uint256 initialSupply, string tokenName, string tokenSymbol) public { _totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply(); name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_255_MyToken {
label=""MyToken"";
""255_approve"" [label=""approve""];
""255_transferFrom"" [label=""transferFrom""];
""255_transfer"" [label=""transfer""];
""255_allowance"" [label=""allowance""];
""255_totalSupply"" [label=""totalSupply""];
""255_MyToken"" [label=""MyToken""];
""255__transfer"" [label=""_transfer""];
""255_transferFrom"" -> ""255__transfer"";
""255_MyToken"" -> ""255_totalSupply"";
""255_transferFrom"" -> ""255_allowance"";
""255_transfer"" -> ""255__transfer"";
}
"
0x0f598112679b78e17a4a9febc83703710d33489c.sol,MoneroGold,contract MoneroGold { string public name = ; string public symbol = ; uint256 public decimals = 8; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 21000000 * (10**decimals); address public owner; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_287_MoneroGold {
label=""MoneroGold"";
""287_burnTotalSupply"" [label=""burnTotalSupply""];
""287_MoneroGold"" [label=""MoneroGold""];
""287_burnSupply"" [label=""burnSupply""];
""287_setName"" [label=""setName""];
""287_transferFrom"" [label=""transferFrom""];
""287_transfer"" [label=""transfer""];
""287_approve"" [label=""approve""];
""287_burnTotalSupply"" -> ""287_isOwner"";
""287_setName"" -> ""287_isOwner"";
""287_burnSupply"" -> ""287_isOwner"";
}
"
0x6edbdeb48ccc0dfab0bbaebc349732e320d6d213.sol,YesManCoin,"contract YesManCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function YesManCoin() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x7070Be2B116654C2b67b4e4Edb115F24a2f20E88] = _totalSupply; Transfer(address(0), 0x7070Be2B116654C2b67b4e4Edb115F24a2f20E88, _totalSupply); }",1,"subgraph cluster_543_YesManCoin {
label=""YesManCoin"";
""543_balanceOf"" [label=""balanceOf""];
""543_YesManCoin"" [label=""YesManCoin""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x365080610e03aa5c5693f6b2dd78ee792ee9a9cb.sol,ZIP,"contract ZIP is owned, token { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function ZIP( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}",1,"subgraph cluster_600_ZIP {
label=""ZIP"";
""600__transfer"" [label=""_transfer""];
""600_ZIP"" [label=""ZIP""];
""600_buy"" [label=""buy""];
""600_freezeAccount"" [label=""freezeAccount""];
""600_sell"" [label=""sell""];
""600_setPrices"" [label=""setPrices""];
""600_mintToken"" [label=""mintToken""];
""600_ZIP"" -> ""600_token"";
""600_mintToken"" -> ""600_onlyOwner"";
""600_buy"" -> ""600__transfer"";
""600_sell"" -> ""600__transfer"";
""600_freezeAccount"" -> ""600_onlyOwner"";
""600_setPrices"" -> ""600_onlyOwner"";
}
"
0x26cd1f0943d5877f7de475571172f957c337d4e4.sol,GoldenBit,"contract GoldenBit is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 960000000000000000000000000; balances[0xaa251d79d41ECaD6C0d183Ac1b7D67fEe28805EB] = _totalSupply; emit Transfer(address(0), 0xaa251d79d41ECaD6C0d183Ac1b7D67fEe28805EB, _totalSupply); }",1,"subgraph cluster_540_GoldenBit {
label=""GoldenBit"";
""540_totalSupply"" [label=""totalSupply""];
""540_constructor"" [label=""constructor""];
""540_balanceOf"" [label=""balanceOf""];
""540_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""540_transfer"" [label=""transfer""];
""540_approve"" [label=""approve""];
""540_transferFrom"" [label=""transferFrom""];
""540_fallback"" [label=""fallback""];
""540_approveAndCall"" [label=""approveAndCall""];
""540_allowance"" [label=""allowance""];
""540_transfer"" -> ""540_safeAdd"";
""540_transferAnyERC20Token"" -> ""540_onlyOwner"";
""540_transfer"" -> ""540_safeSub"";
""540_transferFrom"" -> ""540_safeSub"";
""540_transferFrom"" -> ""540_safeAdd"";
}
"
0x6d0a44fb6a416da6efe1c192560be1bccd01f6be.sol,Presale,"contract Presale is OwnableSimple, RandomApi, ERC721 { using strings for *; uint256 public batchCount; mapping(uint256 => uint256) public prices; mapping(uint256 => uint256) public supplies; mapping(uint256 => uint256) public sold; mapping(uint256 => bool) public isTransferDisabled; uint256[] public dnas; mapping(address => uint256) public ownerToTokenCount; mapping (uint256 => address) public artworkIdToOwner; mapping (uint256 => address) public artworkIdToTransferApproved; PresaleMarket public presaleMarket; bytes4 constant ERC165Signature_ERC165 = bytes4(keccak256()); bytes4 constant ERC165Signature_ERC721A = bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()); bytes4 constant ERC165Signature_ERC721B = bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()) ^ bytes4(keccak256()); function Presale() public { _addPresale(0.05 ether, 450); _addPresale(0.12 ether, 325); _addPresale(0.35 ether, 150); _addPresale(1.0 ether, 75); }",1,"subgraph cluster_1133_PresaleMarket {
label=""PresaleMarket"";
""1133_PresaleMarket"" [label=""PresaleMarket""];
""1133_auctionsRunByUser"" [label=""auctionsRunByUser""];
""1133__isAuctionExist"" [label=""_isAuctionExist""];
""1133_getAuction"" [label=""getAuction""];
""1133_cancelAuctionEmergency"" [label=""cancelAuctionEmergency""];
""1133__cancelAuction"" [label=""_cancelAuction""];
""1133_createAuction"" [label=""createAuction""];
""1133__takeOwnership"" [label=""_takeOwnership""];
""1133_cancelAuction"" [label=""cancelAuction""];
""1133_bid"" [label=""bid""];
""1133_isPresaleMarket"" [label=""isPresaleMarket""];
""1133__owns"" [label=""_owns""];
""1133_withdraw"" [label=""withdraw""];
""1133__createAuction"" [label=""_createAuction""];
""1133_cancelAuctionEmergency"" -> ""1133_whenPaused"";
""1133_cancelAuction"" -> ""1133__isAuctionExist"";
""1133_createAuction"" -> ""1133__createAuction"";
""1133_getAuction"" -> ""1133__isAuctionExist"";
""1133_withdraw"" -> ""1133_onlyOwner"";
""1133_bid"" -> ""1133_whenNotPaused"";
""1133_cancelAuctionEmergency"" -> ""1133__isAuctionExist"";
""1133_bid"" -> ""1133__isAuctionExist"";
""1133_cancelAuctionEmergency"" -> ""1133_onlyOwner"";
""1133_createAuction"" -> ""1133__takeOwnership"";
""1133_cancelAuctionEmergency"" -> ""1133__cancelAuction"";
""1133_cancelAuction"" -> ""1133__cancelAuction"";
""1133_createAuction"" -> ""1133_whenNotPaused"";
}
"
0x6c558a4976e751391fb73dd61fa6a72c318d80b5.sol,BitQ,"contract BitQ is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BitQ() public { symbol = ; name = ; decimals = 18; _totalSupply = 3000000000000000000000000; balances[0x74205dece41e14DCE4fD94da4Dcfb255f3A69059] = _totalSupply; Transfer(address(0), 0x74205dece41e14DCE4fD94da4Dcfb255f3A69059, _totalSupply); }",1,"subgraph cluster_543_BitQ {
label=""BitQ"";
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_BitQ"" [label=""BitQ""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x00416b9d728069edb0ceb04bc2b203fa7336d1f1.sol,SeedCrowdsaleContract,"contract SeedCrowdsaleContract is ReentrancyHandlingContract, Owned { struct ContributorData { uint contributionAmount; }",1,"subgraph cluster_928_SeedCrowdsaleContract {
label=""SeedCrowdsaleContract"";
""928_fallback"" [label=""fallback""];
""928_setPriorityPassContract"" [label=""setPriorityPassContract""];
""928_checkCrowdsaleState"" [label=""checkCrowdsaleState""];
""928_setCrowdsaleTimes"" [label=""setCrowdsaleTimes""];
""928_withdrawEth"" [label=""withdrawEth""];
""928_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""928_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""928_priorityPassContractAddress"" [label=""priorityPassContractAddress""];
""928_processTransaction"" [label=""processTransaction""];
""928_pullBalance"" [label=""pullBalance""];
""928_refundTransaction"" [label=""refundTransaction""];
""928_calculateMaxContribution"" [label=""calculateMaxContribution""];
""928_salvageTokensFromContract"" [label=""salvageTokensFromContract""];
""928_setMultisigAddress"" [label=""setMultisigAddress""];
""928_setPriorityPassContract"" -> ""928_onlyOwner"";
""928_processTransaction"" -> ""928_calculateMaxContribution"";
""928_setCrowdsaleTimes"" -> ""928_onlyOwner"";
""928_setMultisigAddress"" -> ""928_onlyOwner"";
""928_withdrawEth"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_noReentrancy"";
""928_withdrawRemainingBalanceForManualRecovery"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_checkCrowdsaleState"";
""928_batchReturnEthIfFailed"" -> ""928_onlyOwner"";
""928_salvageTokensFromContract"" -> ""928_onlyOwner"";
""928_fallback"" -> ""928_refundTransaction"";
""928_fallback"" -> ""928_processTransaction"";
}
"
0xbf008cb93c2b19c3ae0db4149bcfa465b2ea0888.sol,GameTable,contract GameTable { using SafeMath for uint; struct Player { address addr; uint amount; uint profit; },1,"subgraph cluster_1183_GameTable {
label=""GameTable"";
""1183_getPlayerAmount"" [label=""getPlayerAmount""];
""1183_GameTable"" [label=""GameTable""];
""1183_getOptionInfo"" [label=""getOptionInfo""];
""1183_kill"" [label=""kill""];
""1183_newGame"" [label=""newGame""];
""1183_getGameNum"" [label=""getGameNum""];
""1183_setWinner"" [label=""setWinner""];
""1183_getGameInfo"" [label=""getGameInfo""];
""1183_getPlayerPlayInfo"" [label=""getPlayerPlayInfo""];
""1183_contribute"" [label=""contribute""];
""1183_newOption"" [label=""newOption""];
""1183_safeWithdrawal"" [label=""safeWithdrawal""];
""1183_getGameWinner"" [label=""getGameWinner""];
""1183_setWinner"" -> ""1183_safeWithdrawal"";
}
"
0xbf5fb038c28df2b8821988da78c3ebdbf7aa5ac7.sol,GIFT_ENVELOPE,contract GIFT_ENVELOPE { function GetGift(bytes pass) external payable { if(hashPass == keccak256(pass) && now>giftTime) { msg.sender.transfer(this.balance); },1,"subgraph cluster_164_GIFT_ENVELOPE {
label=""GIFT_ENVELOPE"";
""164_PassHasBeenSet"" [label=""PassHasBeenSet""];
""164_SetPass"" [label=""SetPass""];
""164_SetGiftTime"" [label=""SetGiftTime""];
""164_SetReciver"" [label=""SetReciver""];
""164_GetGift"" [label=""GetGift""];
""164_fallback"" [label=""fallback""];
""164_GetHash"" [label=""GetHash""];
}
"
0xb3a9d2e554c653b7712753c0e8616cca20b14c56.sol,HaiWang,"contract HaiWang { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HaiWang(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_HaiWang {
label=""HaiWang"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_approve"" [label=""approve""];
""361_transfer"" [label=""transfer""];
""361_HaiWang"" [label=""HaiWang""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0x5890ef4e676cd051e59a348b46e0b3e73601f34d.sol,HIW,"contract HIW { address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HIW() { owner = 0x878479357C54d993be99bD332b2649A146da41C0; name = ; symbol = ; decimals = 18; totalSupply = 10000000000000000000000000000; balanceOf[owner] = 10000000000000000000000000000; }",1,"subgraph cluster_224_HIW {
label=""HIW"";
""224_HIW"" [label=""HIW""];
""224_approve"" [label=""approve""];
""224_transfer"" [label=""transfer""];
""224_transferFrom"" [label=""transferFrom""];
""224_burn"" [label=""burn""];
}
"
0x0094110c81183740c23d561818500ce0c8222d8b.sol,Bitscreen,contract Bitscreen { struct IPFSHash { bytes32 hash; uint8 hashFunction; uint8 size; },1,"subgraph cluster_747_Bitscreen {
label=""Bitscreen"";
""747_emergencyOverwrite"" [label=""emergencyOverwrite""];
""747_getBadAddresses"" [label=""getBadAddresses""];
""747_calculateCurrDynamicPrice"" [label=""calculateCurrDynamicPrice""];
""747_truncToThreeDecimals"" [label=""truncToThreeDecimals""];
""747_calcuCurrTxDividend"" [label=""calcuCurrTxDividend""];
""747_fallback"" [label=""fallback""];
""747_changeRules"" [label=""changeRules""];
""747_inquireDividentAmount"" [label=""inquireDividentAmount""];
""747_changeBid"" [label=""changeBid""];
""747_changePriceDecreasePercent"" [label=""changePriceDecreasePercent""];
""747_withdrawOwnerAmount"" [label=""withdrawOwnerAmount""];
""747_Bitscreen"" [label=""Bitscreen""];
""747_withdrawDividend"" [label=""withdrawDividend""];
""747_changePriceDecreasePeriod"" [label=""changePriceDecreasePeriod""];
""747_withdrawDividend"" -> ""747_calcuCurrTxDividend"";
""747_inquireDividentAmount"" -> ""747_calcuCurrTxDividend"";
""747_changeBid"" -> ""747_truncToThreeDecimals"";
""747_changeBid"" -> ""747_calculateCurrDynamicPrice"";
}
"
0x741f58cd68d24f361cc0ee0d3aaf7df2bf16132e.sol,BlockonixToken,"contract BlockonixToken is IERC20, Ownable, Vestable, HasAddresses, VestingPeriods, IsUpgradable { using SafeMathLib for uint256; uint256 public constant totalTokenSupply = 1009208335 * 10**16; uint256 public burntTokens; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; mapping (address => uint256) public balances; mapping(address => mapping(address => uint256)) approved; event Upgraded(address _owner, uint256 amount); constructor() public { uint256 lockedTokenPerAddress = 280335648611111000000000; balances[founder1FirstLockup] = lockedTokenPerAddress; balances[founder2FirstLockup] = lockedTokenPerAddress; balances[founder3FirstLockup] = lockedTokenPerAddress; balances[founder1SecondLockup] = lockedTokenPerAddress; balances[founder2SecondLockup] = lockedTokenPerAddress; balances[founder3SecondLockup] = lockedTokenPerAddress; balances[founder1ThirdLockup] = lockedTokenPerAddress; balances[founder2ThirdLockup] = lockedTokenPerAddress; balances[founder3ThirdLockup] = lockedTokenPerAddress; emit Transfer(address(this), founder1FirstLockup, lockedTokenPerAddress); emit Transfer(address(this), founder2FirstLockup, lockedTokenPerAddress); emit Transfer(address(this), founder3FirstLockup, lockedTokenPerAddress); emit Transfer(address(this), founder1SecondLockup, lockedTokenPerAddress); emit Transfer(address(this), founder2SecondLockup, lockedTokenPerAddress); emit Transfer(address(this), founder3SecondLockup, lockedTokenPerAddress); emit Transfer(address(this), founder1ThirdLockup, lockedTokenPerAddress); emit Transfer(address(this), founder2ThirdLockup, lockedTokenPerAddress); emit Transfer(address(this), founder3ThirdLockup, lockedTokenPerAddress); addVestingAddress(founder1FirstLockup, firstLockup); addVestingAddress(founder2FirstLockup, firstLockup); addVestingAddress(founder3FirstLockup, firstLockup); addVestingAddress(founder1SecondLockup, secondLockup); addVestingAddress(founder2SecondLockup, secondLockup); addVestingAddress(founder3SecondLockup, secondLockup); addVestingAddress(founder1ThirdLockup, thirdLockup); addVestingAddress(founder2ThirdLockup, thirdLockup); addVestingAddress(founder3ThirdLockup, thirdLockup); }",1,"subgraph cluster_853_BlockonixToken {
label=""BlockonixToken"";
""853_allowance"" [label=""allowance""];
""853_balanceOf"" [label=""balanceOf""];
""853_approve"" [label=""approve""];
""853_burn"" [label=""burn""];
""853_upgrade"" [label=""upgrade""];
""853__transfer"" [label=""_transfer""];
""853_transfer"" [label=""transfer""];
""853_transferFrom"" [label=""transferFrom""];
""853_totalSupply"" [label=""totalSupply""];
""853_constructor"" [label=""constructor""];
""853_transfer"" -> ""853__transfer"";
""853_approve"" -> ""853_checkVestingCondition"";
""853_constructor"" -> ""853_addVestingAddress"";
""853_transfer"" -> ""853_checkVestingCondition"";
""853_transferFrom"" -> ""853__transfer"";
""853_transferFrom"" -> ""853_checkVestingCondition"";
}
"
0xdc24f9cc79f802587b56f27a7db0833e40c8a22c.sol,FuckCoin,contract FuckCoin { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1323_FuckCoin {
label=""FuckCoin"";
""1323_setAdministrator"" [label=""setAdministrator""];
""1323_dividendsOf"" [label=""dividendsOf""];
""1323_purchaseTokens"" [label=""purchaseTokens""];
""1323_sell"" [label=""sell""];
""1323_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1323_transfer"" [label=""transfer""];
""1323_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1323_setName"" [label=""setName""];
""1323_totalSupply"" [label=""totalSupply""];
""1323_buy"" [label=""buy""];
""1323_buyPrice"" [label=""buyPrice""];
""1323_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1323_exit"" [label=""exit""];
""1323_sellPrice"" [label=""sellPrice""];
""1323_setSymbol"" [label=""setSymbol""];
""1323_FuckCoin"" [label=""FuckCoin""];
""1323_disableInitialStage"" [label=""disableInitialStage""];
""1323_balanceOf"" [label=""balanceOf""];
""1323_myDividends"" [label=""myDividends""];
""1323_reinvest"" [label=""reinvest""];
""1323_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1323_withdraw"" [label=""withdraw""];
""1323_setStakingRequirement"" [label=""setStakingRequirement""];
""1323_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1323_sqrt"" [label=""sqrt""];
""1323_myTokens"" [label=""myTokens""];
""1323_fallback"" [label=""fallback""];
""1323_calculateEthereumReceived"" -> ""1323_tokensToEthereum_"";
""1323_withdraw"" -> ""1323_myDividends"";
""1323_calculateTokensReceived"" -> ""1323_ethereumToTokens_"";
""1323_myDividends"" -> ""1323_dividendsOf"";
""1323_sellPrice"" -> ""1323_tokensToEthereum_"";
""1323_reinvest"" -> ""1323_purchaseTokens"";
""1323_buyPrice"" -> ""1323_tokensToEthereum_"";
""1323_purchaseTokens"" -> ""1323_antiEarlyWhale"";
""1323_purchaseTokens"" -> ""1323_ethereumToTokens_"";
""1323_ethereumToTokens_"" -> ""1323_sqrt"";
""1323_setStakingRequirement"" -> ""1323_onlyAdministrator"";
""1323_transfer"" -> ""1323_myDividends"";
""1323_reinvest"" -> ""1323_onlyStronghands"";
""1323_myTokens"" -> ""1323_balanceOf"";
""1323_fallback"" -> ""1323_purchaseTokens"";
""1323_setAdministrator"" -> ""1323_onlyAdministrator"";
""1323_setName"" -> ""1323_onlyAdministrator"";
""1323_sell"" -> ""1323_onlyBagholders"";
""1323_reinvest"" -> ""1323_myDividends"";
""1323_exit"" -> ""1323_sell"";
""1323_disableInitialStage"" -> ""1323_onlyAdministrator"";
""1323_transfer"" -> ""1323_withdraw"";
""1323_buy"" -> ""1323_purchaseTokens"";
""1323_sell"" -> ""1323_tokensToEthereum_"";
""1323_setSymbol"" -> ""1323_onlyAdministrator"";
""1323_transfer"" -> ""1323_tokensToEthereum_"";
""1323_transfer"" -> ""1323_onlyBagholders"";
""1323_exit"" -> ""1323_withdraw"";
""1323_withdraw"" -> ""1323_onlyStronghands"";
}
"
0x5b29a6277c996b477d6632e60eef41268311ce1c.sol,Dragon,"contract Dragon is ERC20 { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping( address => uint256) public balanceOf; mapping( uint => address) public accountIndex; uint accountCount; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed spender, uint value); event Message ( address a, uint256 amount ); event Burn(address indexed from, uint256 value); function Dragon() { uint supply = 500000000; appendTokenHolders( msg.sender ); balanceOf[msg.sender] = supply; totalSupply = supply; name = ; symbol = ; decimals = 0; }",1,"subgraph cluster_535_Dragon {
label=""Dragon"";
""535_approveAndCall"" [label=""approveAndCall""];
""535_getAccountCount"" [label=""getAccountCount""];
""535_appendTokenHolders"" [label=""appendTokenHolders""];
""535_Dragon"" [label=""Dragon""];
""535_transferFrom"" [label=""transferFrom""];
""535_burn"" [label=""burn""];
""535_balanceOf"" [label=""balanceOf""];
""535_totalSupply"" [label=""totalSupply""];
""535_allowance"" [label=""allowance""];
""535_transfer"" [label=""transfer""];
""535_burnFrom"" [label=""burnFrom""];
""535_getAddress"" [label=""getAddress""];
""535_approve"" [label=""approve""];
""535_Dragon"" -> ""535_appendTokenHolders"";
""535_transfer"" -> ""535_appendTokenHolders"";
""535_transferFrom"" -> ""535_appendTokenHolders"";
""535_approveAndCall"" -> ""535_approve"";
}
"
0x73f46f17b1a9712262dc3410b37eae4233f36ff9.sol,NeutralToken,contract NeutralToken { function isSenderOwner(address sender) private view returns (bool) { return sender == owner_; },1,"subgraph cluster_300_NeutralToken {
label=""NeutralToken"";
""300_totalSupply"" [label=""totalSupply""];
""300_balanceOf"" [label=""balanceOf""];
""300_constructor"" [label=""constructor""];
""300_burn"" [label=""burn""];
""300_allowance"" [label=""allowance""];
""300_approve"" [label=""approve""];
""300_transfer"" [label=""transfer""];
""300_mint"" [label=""mint""];
""300_transferFrom"" [label=""transferFrom""];
""300_isSenderOwner"" [label=""isSenderOwner""];
""300_burn"" -> ""300_onlyOwner"";
""300_mint"" -> ""300_onlyOwner"";
}
"
0x38f22479795a1a51ccd1e5a41f09c7525fb27318.sol,Bitcoin,"contract Bitcoin { using SafeMath for uint256; uint8 public decimals;uint256 public supplyCap;string public website;string public email = ;address private oW;address public coinage;uint256 public totalSupply;mapping (address => uint256) private balances;mapping (address => mapping (address => uint256)) internal allowed;bool private mintable = true; function Bitcoin(uint256 cap, uint8 dec) public {oW = msg.sender; decimals=dec;supplyCap=cap * (10 ** uint256(decimals));}",1,"subgraph cluster_772_Bitcoin {
label=""Bitcoin"";
""772_allowance"" [label=""allowance""];
""772_Bitcoin"" [label=""Bitcoin""];
""772_increaseApproval"" [label=""increaseApproval""];
""772_transfer"" [label=""transfer""];
""772_sC"" [label=""sC""];
""772_atoshima"" [label=""atoshima""];
""772_sE"" [label=""sE""];
""772_burn"" [label=""burn""];
""772_sO"" [label=""sO""];
""772_mint"" [label=""mint""];
""772_transferFrom"" [label=""transferFrom""];
""772_sW"" [label=""sW""];
""772_approve"" [label=""approve""];
""772_decreaseApproval"" [label=""decreaseApproval""];
""772_balanceOf"" [label=""balanceOf""];
""772_atoshima"" -> ""772_sC"";
""772_atoshima"" -> ""772_sE"";
""772_atoshima"" -> ""772_sW"";
""772_sO"" -> ""772_oO"";
""772_mint"" -> ""772_canMint"";
""772_mint"" -> ""772_oOOrContract"";
""772_sW"" -> ""772_oO"";
""772_sC"" -> ""772_oO"";
""772_atoshima"" -> ""772_oO"";
""772_sE"" -> ""772_oO"";
""772_atoshima"" -> ""772_sO"";
}
"
0xf23dfaba45a9fb74dd18a22fd381befcbfd31b71.sol,CRYPTOBUX,"contract CRYPTOBUX is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CRYPTOBUX() public { symbol = ; name = ; decimals = 18; _totalSupply = 890000000000000000000000000; balances[0xC37F4f21172F0C5a461b46Ce1Ac4e6c25B5F303B] = _totalSupply; Transfer(address(0), 0xC37F4f21172F0C5a461b46Ce1Ac4e6c25B5F303B, _totalSupply); }",1,"subgraph cluster_543_CRYPTOBUX {
label=""CRYPTOBUX"";
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_CRYPTOBUX"" [label=""CRYPTOBUX""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xf20a773b3d9f2a1f080fbae1156a5e9768ceb615.sol,BabyCoin,"contract BabyCoin is Ownable { using SafeMath for uint256; string public name; string public symbol; uint32 public decimals = 18; uint256 public totalSupply; uint256 public currentTotalSupply = 0; uint256 public airdropNum = 2 ether; uint256 public airdropSupply = 2000; mapping(address => bool) touched; mapping(address => uint256) balances; mapping (address => mapping (address => uint256)) internal allowed; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function BabyCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balances[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_630_BabyCoin {
label=""BabyCoin"";
""630_transferFrom"" [label=""transferFrom""];
""630__transfer"" [label=""_transfer""];
""630_balanceOf"" [label=""balanceOf""];
""630_allowance"" [label=""allowance""];
""630_getBalance"" [label=""getBalance""];
""630_decreaseApproval"" [label=""decreaseApproval""];
""630_BabyCoin"" [label=""BabyCoin""];
""630__airdrop"" [label=""_airdrop""];
""630_increaseApproval"" [label=""increaseApproval""];
""630_transfer"" [label=""transfer""];
""630_approve"" [label=""approve""];
""630__transfer"" -> ""630__airdrop"";
""630_transferFrom"" -> ""630__transfer"";
""630_balanceOf"" -> ""630_getBalance"";
""630_transfer"" -> ""630__transfer"";
}
"
0x6f4dcbb16f72853c7382e7100a0713a68e53d9be.sol,GroupBuyContract,contract GroupBuyContract { uint256 public constant MAX_CONTRIBUTION_SLOTS = 20; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; struct Group { address[] contributorArr; mapping(address => uint256) addressToContributorArrIndex; mapping(address => uint256) addressToContribution; bool exists; uint256 contributedBalance; uint256 purchasePrice; },1,"subgraph cluster_2011_GroupBuyContract {
label=""GroupBuyContract"";
""2011_unpause"" [label=""unpause""];
""2011_withdrawCommission"" [label=""withdrawCommission""];
""2011_fallback"" [label=""fallback""];
""2011_setCEO"" [label=""setCEO""];
""2011_setCOO2"" [label=""setCOO2""];
""2011_activatePurchase"" [label=""activatePurchase""];
""2011_adjustCommission"" [label=""adjustCommission""];
""2011__clearContributorRecordInGroup"" [label=""_clearContributorRecordInGroup""];
""2011__distributeProceeds"" [label=""_distributeProceeds""];
""2011_getContributorsInTokenGroupCount"" [label=""getContributorsInTokenGroupCount""];
""2011_getTokenGroupTotalBalance"" [label=""getTokenGroupTotalBalance""];
""2011_getSelfGroupsContributedTo"" [label=""getSelfGroupsContributedTo""];
""2011__newPrice"" [label=""_newPrice""];
""2011_setCOO1"" [label=""setCOO1""];
""2011__addressNotNull"" [label=""_addressNotNull""];
""2011_withdrawBalance"" [label=""withdrawBalance""];
""2011_dissolveTokenGroup"" [label=""dissolveTokenGroup""];
""2011_distributeCustomSaleProceeds"" [label=""distributeCustomSaleProceeds""];
""2011_getGroupPurchasedPrice"" [label=""getGroupPurchasedPrice""];
""2011_contributeToTokenGroup"" [label=""contributeToTokenGroup""];
""2011_getGroupsContributedTo"" [label=""getGroupsContributedTo""];
""2011_GroupBuyContract"" [label=""GroupBuyContract""];
""2011_setToForking"" [label=""setToForking""];
""2011_leaveTokenGroupAndWithdrawBalance"" [label=""leaveTokenGroupAndWithdrawBalance""];
""2011_pause"" [label=""pause""];
""2011__withdrawUserFunds"" [label=""_withdrawUserFunds""];
""2011__purchase"" [label=""_purchase""];
""2011_transferToken"" [label=""transferToken""];
""2011_getSelfContributionBalanceForTokenGroup"" [label=""getSelfContributionBalanceForTokenGroup""];
""2011_setCOO3"" [label=""setCOO3""];
""2011_leaveTokenGroup"" [label=""leaveTokenGroup""];
""2011_setCFO"" [label=""setCFO""];
""2011_distributeSaleProceeds"" [label=""distributeSaleProceeds""];
""2011__clearGroupRecordInContributor"" [label=""_clearGroupRecordInContributor""];
""2011_getContributionBalanceForTokenGroup"" [label=""getContributionBalanceForTokenGroup""];
""2011_getWithdrawableBalance"" [label=""getWithdrawableBalance""];
""2011_getContributorsInTokenGroup"" [label=""getContributorsInTokenGroup""];
""2011_setToNotForking"" [label=""setToNotForking""];
""2011_transferToken"" -> ""2011_onlyCOO"";
""2011_contributeToTokenGroup"" -> ""2011_whenNotPaused"";
""2011_withdrawBalance"" -> ""2011__addressNotNull"";
""2011_adjustCommission"" -> ""2011_onlyCLevel"";
""2011_withdrawBalance"" -> ""2011__withdrawUserFunds"";
""2011_distributeSaleProceeds"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroup"" -> ""2011__clearGroupRecordInContributor"";
""2011_setCEO"" -> ""2011_onlyCEO"";
""2011_unpause"" -> ""2011_onlyCEO"";
""2011_contributeToTokenGroup"" -> ""2011__addressNotNull"";
""2011_pause"" -> ""2011_onlyCLevel"";
""2011_contributeToTokenGroup"" -> ""2011_whenNotForking"";
""2011_pause"" -> ""2011_whenNotPaused"";
""2011_dissolveTokenGroup"" -> ""2011__clearGroupRecordInContributor"";
""2011_activatePurchase"" -> ""2011__purchase"";
""2011_distributeCustomSaleProceeds"" -> ""2011__distributeProceeds"";
""2011_setToForking"" -> ""2011_whenNotForking"";
""2011_unpause"" -> ""2011_whenPaused"";
""2011_getGroupsContributedTo"" -> ""2011__addressNotNull"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__addressNotNull"";
""2011_activatePurchase"" -> ""2011_whenNotPaused"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011_whenNotPaused"";
""2011_setToNotForking"" -> ""2011_onlyCEO"";
""2011_distributeCustomSaleProceeds"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__clearContributorRecordInGroup"";
""2011_distributeSaleProceeds"" -> ""2011__newPrice"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__clearGroupRecordInContributor"";
""2011_dissolveTokenGroup"" -> ""2011_whenForking"";
""2011_setCOO2"" -> ""2011_onlyCEO"";
""2011_contributeToTokenGroup"" -> ""2011__purchase"";
""2011_leaveTokenGroupAndWithdrawBalance"" -> ""2011__withdrawUserFunds"";
""2011_withdrawCommission"" -> ""2011_onlyCFO"";
""2011_setCOO3"" -> ""2011_onlyCEO"";
""2011_distributeSaleProceeds"" -> ""2011__distributeProceeds"";
""2011__distributeProceeds"" -> ""2011__clearGroupRecordInContributor"";
""2011_getSelfGroupsContributedTo"" -> ""2011__addressNotNull"";
""2011_setCOO1"" -> ""2011_onlyCEO"";
""2011_setToNotForking"" -> ""2011_whenForking"";
""2011_setToForking"" -> ""2011_onlyCLevel"";
""2011_dissolveTokenGroup"" -> ""2011_onlyCOO"";
""2011_leaveTokenGroup"" -> ""2011_whenNotPaused"";
""2011_withdrawBalance"" -> ""2011_whenNotPaused"";
""2011_getWithdrawableBalance"" -> ""2011__addressNotNull"";
""2011_leaveTokenGroup"" -> ""2011__clearContributorRecordInGroup"";
""2011_leaveTokenGroup"" -> ""2011__addressNotNull"";
""2011_setCFO"" -> ""2011_onlyCEO"";
}
"
0x77331db23993850d34372c94b804de2461625503.sol,MHCToken,"contract MHCToken { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 1000 * 10 ** 26; address public issueContractAddress; address public owner; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); event Issue(uint256 amount); function MHCToken() public { owner = msg.sender; balanceOf[owner] = totalSupply; issueContractAddress = new MHCTokenIssue(address(this)); }",1,"subgraph cluster_281_MHCTokenIssue {
label=""MHCTokenIssue"";
""281_MHCTokenIssue"" [label=""MHCTokenIssue""];
""281_issue"" [label=""issue""];
""281_returnRate"" [label=""returnRate""];
""281_issue"" -> ""281_returnRate"";
}
"
0x75284b2afcd520613c2da5c71be6b3847a0acbf2.sol,MyToken,contract MyToken is owned { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; function MyToken () public { balanceOf[msg.sender] = 7998000000000000000000000000; totalSupply =7998000000000000000000000000; name = ; symbol = ; decimals = 18; },1,"subgraph cluster_305_MyToken {
label=""MyToken"";
""305_burn"" [label=""burn""];
""305_transfer"" [label=""transfer""];
""305_MyToken"" [label=""MyToken""];
""305_freezeAccount"" [label=""freezeAccount""];
""305_burnFrom"" [label=""burnFrom""];
""305_mintToken"" [label=""mintToken""];
""305_freezeAccount"" -> ""305_onlyOwner"";
""305_mintToken"" -> ""305_onlyOwner"";
""305_burn"" -> ""305_onlyOwner"";
""305_burnFrom"" -> ""305_onlyOwner"";
}
"
0xdfbd6a960a55bcfcf59d5925351e05a51498bcef.sol,RockCoin,"contract RockCoin is ERC20{ uint initialSupply = 16500000; string name = ; string symbol = ; uint USDExchangeRate = 300; bool preSale = true; bool burned = false; uint saleTimeStart; address ownerAddress; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Burn(address indexed from, uint amount); modifier onlyOwner{ if (msg.sender == ownerAddress) { _; }",1,"subgraph cluster_757_RockCoin {
label=""RockCoin"";
""757_setUSDExchangeRate"" [label=""setUSDExchangeRate""];
""757_fallback"" [label=""fallback""];
""757_stopPreSale"" [label=""stopPreSale""];
""757_approve"" [label=""approve""];
""757_withdraw"" [label=""withdraw""];
""757_burnUnsold"" [label=""burnUnsold""];
""757_getCurrentModifier"" [label=""getCurrentModifier""];
""757_transfer"" [label=""transfer""];
""757_RockCoin"" [label=""RockCoin""];
""757_allowance"" [label=""allowance""];
""757_transferFrom"" [label=""transferFrom""];
""757_balanceOf"" [label=""balanceOf""];
""757_totalSupply"" [label=""totalSupply""];
""757_stopPreSale"" -> ""757_onlyOwner"";
""757_fallback"" -> ""757_stopPreSale"";
""757_setUSDExchangeRate"" -> ""757_onlyOwner"";
""757_withdraw"" -> ""757_onlyOwner"";
""757_fallback"" -> ""757_getCurrentModifier"";
}
"
0x128a0cdaf3bb00e4b5357e02ff0682933beb407f.sol,ERC20Connect,"contract ERC20Connect is ERXInterface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ERC20Connect() public { symbol = ; name = ; decimals = 18; _totalSupply = 21000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); unitsOneEthCanBuy = 5000; fundsWallet = msg.sender; }",1,"subgraph cluster_630_ERC20Connect {
label=""ERC20Connect"";
""630_balanceOf"" [label=""balanceOf""];
""630_transfer"" [label=""transfer""];
""630_transferFrom"" [label=""transferFrom""];
""630_approveAndCall"" [label=""approveAndCall""];
""630_fallback"" [label=""fallback""];
""630_totalSupply"" [label=""totalSupply""];
""630_ERC20Connect"" [label=""ERC20Connect""];
""630_approve"" [label=""approve""];
""630_allowance"" [label=""allowance""];
""630_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""630_transferAnyERC20Token"" -> ""630_onlyOwner"";
}
"
0xe3d424dffecc3759fcc997f5eba2a01a58585405.sol,ERC20Standard,contract ERC20Standard { uint256 public totalSupply; bool public mintable; string public name; uint256 public decimals; string public symbol; address public owner; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; function ERC20Standard() public { decimals = 18; symbol = ; name = ; mintable = true; owner = msg.sender; totalSupply = 300000000 * (10 ** decimals); balances[msg.sender] = totalSupply; },1,"subgraph cluster_283_ERC20Standard {
label=""ERC20Standard"";
""283_balanceOf"" [label=""balanceOf""];
""283_ERC20Standard"" [label=""ERC20Standard""];
""283_transfer"" [label=""transfer""];
""283_mint"" [label=""mint""];
""283_transferFrom"" [label=""transferFrom""];
""283_allowance"" [label=""allowance""];
""283_approve"" [label=""approve""];
""283_transfer"" -> ""283_onlyPayloadSize"";
}
"
0xa3fa17c51a77a79808f3c21948de3ea70391ce6a.sol,CryptoAllStars,"contract CryptoAllStars is ERC721 { event Birth(uint256 tokenId, string name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint256 tokenId); string public constant NAME = ; string public constant SYMBOL = ; uint256 private startingPrice = 0.001 ether; uint256 private constant PROMO_CREATION_LIMIT = 5000; uint256 private firstStepLimit = 0.053613 ether; uint256 private secondStepLimit = 0.564957 ether; mapping (uint256 => address) public personIndexToOwner; mapping (address => uint256) private ownershipTokenCount; mapping (uint256 => address) public personIndexToApproved; mapping (uint256 => uint256) private personIndexToPrice; address public ceo = 0x047F606fD5b2BaA5f5C6c4aB8958E45CB6B054B7; uint256 public promoCreatedCount; struct Person { string name; }",1,"subgraph cluster_913_CryptoAllStars {
label=""CryptoAllStars"";
""913__addressNotNull"" [label=""_addressNotNull""];
""913_approve"" [label=""approve""];
""913_balanceOf"" [label=""balanceOf""];
""913__owns"" [label=""_owns""];
""913_totalSupply"" [label=""totalSupply""];
""913_implementsERC721"" [label=""implementsERC721""];
""913_purchase"" [label=""purchase""];
""913__createPerson"" [label=""_createPerson""];
""913_name"" [label=""name""];
""913_priceOf"" [label=""priceOf""];
""913_createPromoPerson"" [label=""createPromoPerson""];
""913__payout"" [label=""_payout""];
""913_transfer"" [label=""transfer""];
""913_ownerOf"" [label=""ownerOf""];
""913_takeOwnership"" [label=""takeOwnership""];
""913_payout"" [label=""payout""];
""913_tokensOfOwner"" [label=""tokensOfOwner""];
""913_symbol"" [label=""symbol""];
""913_createContractPerson"" [label=""createContractPerson""];
""913_getPerson"" [label=""getPerson""];
""913__transfer"" [label=""_transfer""];
""913_transferFrom"" [label=""transferFrom""];
""913_setOwner"" [label=""setOwner""];
""913__approved"" [label=""_approved""];
""913_takeOwnership"" -> ""913__addressNotNull"";
""913_payout"" -> ""913_onlyCeo"";
""913_transfer"" -> ""913__transfer"";
""913_transferFrom"" -> ""913__addressNotNull"";
""913_transfer"" -> ""913__owns"";
""913_createPromoPerson"" -> ""913_onlyCeo"";
""913_tokensOfOwner"" -> ""913_balanceOf"";
""913_createContractPerson"" -> ""913_onlyCeo"";
""913_payout"" -> ""913__payout"";
""913_createPromoPerson"" -> ""913__createPerson"";
""913_transferFrom"" -> ""913__approved"";
""913_purchase"" -> ""913__transfer"";
""913_transfer"" -> ""913__addressNotNull"";
""913_tokensOfOwner"" -> ""913_totalSupply"";
""913_setOwner"" -> ""913_onlyCeo"";
""913_createContractPerson"" -> ""913__createPerson"";
""913_transferFrom"" -> ""913__transfer"";
""913_purchase"" -> ""913__addressNotNull"";
""913_takeOwnership"" -> ""913__transfer"";
""913_approve"" -> ""913__owns"";
""913__createPerson"" -> ""913__transfer"";
""913_transferFrom"" -> ""913__owns"";
""913_takeOwnership"" -> ""913__approved"";
}
"
0x5c227eb319c24249df66d0c5879515aa59787471.sol,BitAlpha,contract BitAlpha is ERC20 { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 8; uint256 _totalSupply = 21500000 * 10**8; address public owner; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; function BitAlpha() { owner = msg.sender; balances[owner] = 21500000 * 10**8; },1,"subgraph cluster_382_BitAlpha {
label=""BitAlpha"";
""382_transfer"" [label=""transfer""];
""382_transferFrom"" [label=""transferFrom""];
""382_allowance"" [label=""allowance""];
""382_approve"" [label=""approve""];
""382_balanceOf"" [label=""balanceOf""];
""382_BitAlpha"" [label=""BitAlpha""];
""382_totalSupply"" [label=""totalSupply""];
""382_BitAlphaAirdrop"" [label=""BitAlphaAirdrop""];
""382_BitAlphaAirdrop"" -> ""382_onlyOwner"";
}
"
0x37d82a4e03e93529c1a32429984e12e7875ea1d8.sol,OMGCatCoin,"contract OMGCatCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function OMGCatCoin() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000 * 10**uint(decimals); balances[0x921beCA00339c458342cF09b4B0f4adb3942e332] = _totalSupply; Transfer(address(0), 0x921beCA00339c458342cF09b4B0f4adb3942e332, _totalSupply); }",1,"subgraph cluster_549_OMGCatCoin {
label=""OMGCatCoin"";
""549_fallback"" [label=""fallback""];
""549_approveAndCall"" [label=""approveAndCall""];
""549_balanceOf"" [label=""balanceOf""];
""549_transferFrom"" [label=""transferFrom""];
""549_allowance"" [label=""allowance""];
""549_transfer"" [label=""transfer""];
""549_approve"" [label=""approve""];
""549_OMGCatCoin"" [label=""OMGCatCoin""];
""549_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""549_totalSupply"" [label=""totalSupply""];
""549_transfer"" -> ""549_safeAdd"";
""549_transferFrom"" -> ""549_safeAdd"";
""549_transferFrom"" -> ""549_safeSub"";
""549_transfer"" -> ""549_safeSub"";
""549_transferAnyERC20Token"" -> ""549_onlyOwner"";
}
"
0x3a2169778d20368dfbf9470c841e5ba8a4a4eccd.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361__transfer"" [label=""_transfer""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_burn"" [label=""burn""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0xd4236a5b05aafadb21a3e657f6818ad9f20699ae.sol,TxFeatures,contract TxFeatures is BasicToken { struct Tx { uint timestamp; uint amount; },1,"subgraph cluster_583_TxFeatures {
label=""TxFeatures"";
""583_poptxs"" [label=""poptxs""];
""583_pushtx"" [label=""pushtx""];
""583_poptxs"" -> ""583_balanceOf"";
}
"
0xa42c5aa9735eca0db714f02de9dc2a56e405dae7.sol,BCT,contract BCT is owned { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 minBalanceForAccounts; bool public usersCanTrade; bool public usersCanUnfreeze; bool public ico = true; mapping (address => bool) public admin; modifier notICO { require(admin[msg.sender] || !ico); _; },1,"subgraph cluster_1271_BCT {
label=""BCT"";
""1271_burn"" [label=""burn""];
""1271_BCT"" [label=""BCT""];
""1271_approve"" [label=""approve""];
""1271_freeze"" [label=""freeze""];
""1271_withdraw"" [label=""withdraw""];
""1271_burnFrom"" [label=""burnFrom""];
""1271_reward"" [label=""reward""];
""1271_transferReward"" [label=""transferReward""];
""1271_fallback"" [label=""fallback""];
""1271_setCanTrade"" [label=""setCanTrade""];
""1271_unlockReward"" [label=""unlockReward""];
""1271_setUsersCanTrade"" [label=""setUsersCanTrade""];
""1271_setICO"" [label=""setICO""];
""1271_usersCanUnFreeze"" [label=""usersCanUnFreeze""];
""1271__freeze"" [label=""_freeze""];
""1271_setMinBalance"" [label=""setMinBalance""];
""1271_approveAndCall"" [label=""approveAndCall""];
""1271_setAdmin"" [label=""setAdmin""];
""1271_buy"" [label=""buy""];
""1271_transferFrom"" [label=""transferFrom""];
""1271_setPrices"" [label=""setPrices""];
""1271__transfer"" [label=""_transfer""];
""1271_sell"" [label=""sell""];
""1271_transfer"" [label=""transfer""];
""1271_transferAndFreeze"" [label=""transferAndFreeze""];
""1271_increaseTotalSupply"" [label=""increaseTotalSupply""];
""1271_transfer"" -> ""1271_notICO"";
""1271_transferAndFreeze"" -> ""1271__transfer"";
""1271_setCanTrade"" -> ""1271_onlyOwner"";
""1271_burn"" -> ""1271_onlyOwner"";
""1271_increaseTotalSupply"" -> ""1271_onlyOwner"";
""1271_transfer"" -> ""1271__transfer"";
""1271_setPrices"" -> ""1271_onlyOwner"";
""1271_transfer"" -> ""1271_sell"";
""1271_transferFrom"" -> ""1271__transfer"";
""1271_transferReward"" -> ""1271_sell"";
""1271_setAdmin"" -> ""1271_onlyOwner"";
""1271_setMinBalance"" -> ""1271_onlyOwner"";
""1271_transferAndFreeze"" -> ""1271_freeze"";
""1271_approveAndCall"" -> ""1271_onlyOwner"";
""1271_withdraw"" -> ""1271_onlyOwner"";
""1271_setUsersCanTrade"" -> ""1271_onlyOwner"";
""1271_setICO"" -> ""1271_onlyOwner"";
""1271_reward"" -> ""1271__transfer"";
""1271_approveAndCall"" -> ""1271_approve"";
""1271_unlockReward"" -> ""1271_sell"";
""1271_reward"" -> ""1271_sell"";
""1271_transferAndFreeze"" -> ""1271_onlyAdmin"";
""1271_freeze"" -> ""1271__freeze"";
}
"
0xc094d10e8c0f5f507bb986f01b0c44a83cbf8440.sol,Crowdsale,"contract Crowdsale is Ownable, RateSetter { using SafeMath for uint256; ERC20 public token; CCWhitelist public whitelist; uint256 public startTimePre; uint256 public endTimePre; uint256 public startTimeIco; uint256 public endTimeIco; address public wallet; uint32 public ethEurRate; uint32 public btcEthRate; uint256 public tokensSoldPre; uint256 public tokensSoldIco; uint256 public weiRaised; uint256 public eurRaised; uint256 public contributions; uint256 public preCap; uint8 public preDiscountPercentage; uint256 public icoPhaseAmount1; uint256 public icoPhaseAmount2; uint256 public icoPhaseAmount3; uint256 public icoPhaseAmount4; uint8 public icoPhaseDiscountPercentage1; uint8 public icoPhaseDiscountPercentage2; uint8 public icoPhaseDiscountPercentage3; uint8 public icoPhaseDiscountPercentage4; uint32 public HARD_CAP_EUR = 19170000; uint32 public SOFT_CAP_EUR = 2000000; uint256 public HARD_CAP_IN_TOKENS = 810 * 10**24; mapping (address => uint) public contributors; function Crowdsale(uint256 _startTimePre, uint256 _endTimePre, uint256 _startTimeIco, uint256 _endTimeIco, uint32 _ethEurRate, uint32 _btcEthRate, address _wallet, address _tokenAddress, address _whitelistAddress) { require(_startTimePre >= now); require(_endTimePre >= _startTimePre); require(_startTimeIco >= _endTimePre); require(_endTimeIco >= _startTimeIco); require(_ethEurRate > 0 && _btcEthRate > 0); require(_wallet != address(0)); require(_tokenAddress != address(0)); require(_whitelistAddress != address(0)); startTimePre = _startTimePre; endTimePre = _endTimePre; startTimeIco = _startTimeIco; endTimeIco = _endTimeIco; ethEurRate = _ethEurRate; btcEthRate = _btcEthRate; wallet = _wallet; token = ERC20(_tokenAddress); whitelist = CCWhitelist(_whitelistAddress); preCap = 90 * 10**24; preDiscountPercentage = 50; icoPhaseAmount1 = 135 * 10**24; icoPhaseAmount2 = 450 * 10**24; icoPhaseAmount3 = 135 * 10**24; icoPhaseAmount4 = 90 * 10**24; icoPhaseDiscountPercentage1 = 40; icoPhaseDiscountPercentage2 = 30; icoPhaseDiscountPercentage3 = 20; icoPhaseDiscountPercentage4 = 0; }",1,"subgraph cluster_1137_Crowdsale {
label=""Crowdsale"";
""1137_executeTransaction"" [label=""executeTransaction""];
""1137_getCurrentTokenAmountForOneEth"" [label=""getCurrentTokenAmountForOneEth""];
""1137_hasPresaleEnded"" [label=""hasPresaleEnded""];
""1137_claimTokens"" [label=""claimTokens""];
""1137_Crowdsale"" [label=""Crowdsale""];
""1137_isPresale"" [label=""isPresale""];
""1137_getCurrentTokenAmountForOneBtc"" [label=""getCurrentTokenAmountForOneBtc""];
""1137_isIco"" [label=""isIco""];
""1137_fallback"" [label=""fallback""];
""1137_setRates"" [label=""setRates""];
""1137_buyTokens"" [label=""buyTokens""];
""1137_hasIcoEnded"" [label=""hasIcoEnded""];
""1137_getTokenAmount"" [label=""getTokenAmount""];
""1137_cummulativeTokensSold"" [label=""cummulativeTokensSold""];
""1137_getIcoDiscountPercentage"" [label=""getIcoDiscountPercentage""];
""1137_changeIcoPhaseAmounts"" [label=""changeIcoPhaseAmounts""];
""1137_buyTokens"" -> ""1137_getTokenAmount"";
""1137_buyTokens"" -> ""1137_getIcoDiscountPercentage"";
""1137_buyTokens"" -> ""1137_isIco"";
""1137_getCurrentTokenAmountForOneBtc"" -> ""1137_getCurrentTokenAmountForOneEth"";
""1137_changeIcoPhaseAmounts"" -> ""1137_onlyOwner"";
""1137_getCurrentTokenAmountForOneEth"" -> ""1137_isIco"";
""1137_getCurrentTokenAmountForOneEth"" -> ""1137_getTokenAmount"";
""1137_getCurrentTokenAmountForOneEth"" -> ""1137_isPresale"";
""1137_buyTokens"" -> ""1137_executeTransaction"";
""1137_claimTokens"" -> ""1137_onlyOwner"";
""1137_getCurrentTokenAmountForOneEth"" -> ""1137_getIcoDiscountPercentage"";
""1137_buyTokens"" -> ""1137_isPresale"";
""1137_fallback"" -> ""1137_buyTokens"";
""1137_setRates"" -> ""1137_onlyRateSetter"";
}
"
0x46940639ff7122539b71e836eccb08e53b08045d.sol,MyToken,"contract MyToken is owned { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function freezeAccount(address target, bool freeze) public onlyOwner { frozenAccount[target] = freeze; emit FrozenFunds(target, freeze); }",1,"subgraph cluster_423_MyToken {
label=""MyToken"";
""423_transferFrom"" [label=""transferFrom""];
""423_approve"" [label=""approve""];
""423_burnFrom"" [label=""burnFrom""];
""423_burn"" [label=""burn""];
""423_approveAndCall"" [label=""approveAndCall""];
""423_MyToken"" [label=""MyToken""];
""423__transfer"" [label=""_transfer""];
""423_transfer"" [label=""transfer""];
""423_freezeAccount"" [label=""freezeAccount""];
""423_approveAndCall"" -> ""423_approve"";
""423_transfer"" -> ""423__transfer"";
""423_transferFrom"" -> ""423__transfer"";
""423_freezeAccount"" -> ""423_onlyOwner"";
}
"
0x7830cda4a9a2e8fb28b5250d72ede4536b9ff4a0.sol,LLTokenBTB,"contract LLTokenBTB { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function LLTokenBTB( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_LLTokenBTB {
label=""LLTokenBTB"";
""380_burn"" [label=""burn""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_burnFrom"" [label=""burnFrom""];
""380_LLTokenBTB"" [label=""LLTokenBTB""];
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380__transfer"" [label=""_transfer""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0x32fb35728c3d95ac9591708bfb91136577ab1dd2.sol,BaseToken,"contract BaseToken { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function _transfer(address _from, address _to, uint _value) internal { require(_to != 0x0); require(balanceOf[_from] >= _value); require(balanceOf[_to] + _value > balanceOf[_to]); uint previousBalances = balanceOf[_from] + balanceOf[_to]; balanceOf[_from] -= _value; balanceOf[_to] += _value; assert(balanceOf[_from] + balanceOf[_to] == previousBalances); Transfer(_from, _to, _value); }",1,"subgraph cluster_199_BaseToken {
label=""BaseToken"";
""199__transfer"" [label=""_transfer""];
""199_approve"" [label=""approve""];
""199_transferFrom"" [label=""transferFrom""];
""199_transfer"" [label=""transfer""];
""199_transfer"" -> ""199__transfer"";
""199_transferFrom"" -> ""199__transfer"";
}
"
0x36ebdbe660c0b988b83c257a779b908697d41615.sol,ArteufToken,contract ArteufToken is Ownable{ string public name = ; string public symbol = ; uint256 public decimals = 18; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 100000000 * 10**18; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_414_ArteufToken {
label=""ArteufToken"";
""414_stop"" [label=""stop""];
""414_setName"" [label=""setName""];
""414_burn"" [label=""burn""];
""414_start"" [label=""start""];
""414_ArteufToken"" [label=""ArteufToken""];
""414_approve"" [label=""approve""];
""414_transferFrom"" [label=""transferFrom""];
""414_transfer"" [label=""transfer""];
""414_transferFrom"" -> ""414_validAddress"";
""414_setName"" -> ""414_isOwner"";
""414_approve"" -> ""414_validAddress"";
""414_approve"" -> ""414_isRunning"";
""414_transferFrom"" -> ""414_isRunning"";
""414_stop"" -> ""414_isOwner"";
""414_transfer"" -> ""414_validAddress"";
""414_start"" -> ""414_isOwner"";
""414_transfer"" -> ""414_isRunning"";
}
"
0x190e2028060fa49adefa5e1f47c8d7be0cbe5063.sol,TRONIXGOLD,"contract TRONIXGOLD is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function TRONIXGOLD() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000000; balances[0x95a96a9fab04Fdf71f37807246408973b30d29e1] = _totalSupply; Transfer(address(0), 0x95a96a9fab04Fdf71f37807246408973b30d29e1, _totalSupply); }",1,"subgraph cluster_543_TRONIXGOLD {
label=""TRONIXGOLD"";
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_TRONIXGOLD"" [label=""TRONIXGOLD""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x1fc4f3ed0415fd13748383a08069c549910cc655.sol,Hourglass,contract Hourglass { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1299_Hourglass {
label=""Hourglass"";
""1299_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1299_myDividends"" [label=""myDividends""];
""1299_buy"" [label=""buy""];
""1299_fallback"" [label=""fallback""];
""1299_transfer"" [label=""transfer""];
""1299_balanceOf"" [label=""balanceOf""];
""1299_sqrt"" [label=""sqrt""];
""1299_buyPrice"" [label=""buyPrice""];
""1299_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1299_myTokens"" [label=""myTokens""];
""1299_sellPrice"" [label=""sellPrice""];
""1299_exit"" [label=""exit""];
""1299_dividendsOf"" [label=""dividendsOf""];
""1299_Hourglass"" [label=""Hourglass""];
""1299_sell"" [label=""sell""];
""1299_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1299_disableInitialStage"" [label=""disableInitialStage""];
""1299_purchaseTokens"" [label=""purchaseTokens""];
""1299_setName"" [label=""setName""];
""1299_setAdministrator"" [label=""setAdministrator""];
""1299_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1299_setStakingRequirement"" [label=""setStakingRequirement""];
""1299_totalSupply"" [label=""totalSupply""];
""1299_withdraw"" [label=""withdraw""];
""1299_setSymbol"" [label=""setSymbol""];
""1299_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1299_reinvest"" [label=""reinvest""];
""1299_setName"" -> ""1299_onlyAdministrator"";
""1299_transfer"" -> ""1299_withdraw"";
""1299_myTokens"" -> ""1299_balanceOf"";
""1299_buy"" -> ""1299_purchaseTokens"";
""1299_ethereumToTokens_"" -> ""1299_sqrt"";
""1299_transfer"" -> ""1299_onlyBagholders"";
""1299_withdraw"" -> ""1299_myDividends"";
""1299_reinvest"" -> ""1299_purchaseTokens"";
""1299_setAdministrator"" -> ""1299_onlyAdministrator"";
""1299_fallback"" -> ""1299_purchaseTokens"";
""1299_transfer"" -> ""1299_myDividends"";
""1299_setStakingRequirement"" -> ""1299_onlyAdministrator"";
""1299_setSymbol"" -> ""1299_onlyAdministrator"";
""1299_calculateEthereumReceived"" -> ""1299_tokensToEthereum_"";
""1299_purchaseTokens"" -> ""1299_ethereumToTokens_"";
""1299_purchaseTokens"" -> ""1299_antiEarlyWhale"";
""1299_exit"" -> ""1299_sell"";
""1299_sell"" -> ""1299_onlyBagholders"";
""1299_transfer"" -> ""1299_tokensToEthereum_"";
""1299_withdraw"" -> ""1299_onlyStronghands"";
""1299_reinvest"" -> ""1299_onlyStronghands"";
""1299_exit"" -> ""1299_withdraw"";
""1299_sell"" -> ""1299_tokensToEthereum_"";
""1299_buyPrice"" -> ""1299_tokensToEthereum_"";
""1299_calculateTokensReceived"" -> ""1299_ethereumToTokens_"";
""1299_myDividends"" -> ""1299_dividendsOf"";
""1299_reinvest"" -> ""1299_myDividends"";
""1299_sellPrice"" -> ""1299_tokensToEthereum_"";
""1299_disableInitialStage"" -> ""1299_onlyAdministrator"";
}
"
0x369d0db2c7d56b095d758379b75f64085953528a.sol,CryptoLeu,"contract CryptoLeu is owned, TokenERC20, Pausable { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function CryptoLeu() TokenERC20(60000000, , ) public {}",1,"subgraph cluster_686_CryptoLeu {
label=""CryptoLeu"";
""686_setPrices"" [label=""setPrices""];
""686__transfer"" [label=""_transfer""];
""686_buy"" [label=""buy""];
""686_sell"" [label=""sell""];
""686_mintToken"" [label=""mintToken""];
""686_CryptoLeu"" [label=""CryptoLeu""];
""686_freezeAccount"" [label=""freezeAccount""];
""686_sell"" -> ""686_whenNotPaused"";
""686_freezeAccount"" -> ""686_onlyOwner"";
""686_setPrices"" -> ""686_onlyOwner"";
""686_sell"" -> ""686__transfer"";
""686_mintToken"" -> ""686_onlyOwner"";
""686_buy"" -> ""686__transfer"";
""686_buy"" -> ""686_whenNotPaused"";
""686_CryptoLeu"" -> ""686_TokenERC20"";
}
"
0x1aced77b121ed465a95fb5471e3d409fd2d4ede6.sol,BaseToken,"contract BaseToken { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function _transfer(address _from, address _to, uint _value) internal { require(_to != 0x0); require(balanceOf[_from] >= _value); require(balanceOf[_to] + _value > balanceOf[_to]); uint previousBalances = balanceOf[_from] + balanceOf[_to]; balanceOf[_from] -= _value; balanceOf[_to] += _value; assert(balanceOf[_from] + balanceOf[_to] == previousBalances); Transfer(_from, _to, _value); }",1,"subgraph cluster_199_BaseToken {
label=""BaseToken"";
""199_transferFrom"" [label=""transferFrom""];
""199__transfer"" [label=""_transfer""];
""199_transfer"" [label=""transfer""];
""199_approve"" [label=""approve""];
""199_transferFrom"" -> ""199__transfer"";
""199_transfer"" -> ""199__transfer"";
}
"
0x86c6a7ee4ec24d25456580d81f7e8f486186ec91.sol,Coin,"contract Coin { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public _totalSupply = 0; uint256 public _maxSupply = 33000000000000000000000; uint256 public price = 2000; bool private workingState = true; bool private transferAllowed = true; bool private generationState = true; address public owner; address private cur_coin; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) private etherClients; event FundsGot(address indexed _sender, uint256 _value); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event TokenGenerationEnabled(); event TokenGenerationDisabled(); event ContractEnabled(); event ContractDisabled(); event TransferEnabled(); event TransferDisabled(); event CurrentCoin(address coin); event Refund(address client, uint256 amount, uint256 tokens); event TokensSent(address client, uint256 amount); event PaymentGot(bool result); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_851_Coin {
label=""Coin"";
""851_refund"" [label=""refund""];
""851_allowance"" [label=""allowance""];
""851_kill"" [label=""kill""];
""851_disableGeneration"" [label=""disableGeneration""];
""851_fallback"" [label=""fallback""];
""851_transfer"" [label=""transfer""];
""851_tokenGenerationState"" [label=""tokenGenerationState""];
""851_transferFrom"" [label=""transferFrom""];
""851_setCurrentCoin"" [label=""setCurrentCoin""];
""851_balanceOf"" [label=""balanceOf""];
""851_contractState"" [label=""contractState""];
""851_approve"" [label=""approve""];
""851_enableContract"" [label=""enableContract""];
""851_disableTransfer"" [label=""disableTransfer""];
""851_Coin"" [label=""Coin""];
""851_totalSupply"" [label=""totalSupply""];
""851_generateTokens"" [label=""generateTokens""];
""851_transferState"" [label=""transferState""];
""851_setPrice"" [label=""setPrice""];
""851_disableContract"" [label=""disableContract""];
""851_enableGeneration"" [label=""enableGeneration""];
""851_setMaxSupply"" [label=""setMaxSupply""];
""851_enableTransfer"" [label=""enableTransfer""];
""851_Coin"" -> ""851_enableContract"";
""851_balanceOf"" -> ""851_workingFlag"";
""851_setMaxSupply"" -> ""851_onlyOwner"";
""851_enableContract"" -> ""851_onlyOwner"";
""851_disableContract"" -> ""851_onlyOwner"";
""851_setCurrentCoin"" -> ""851_workingFlag"";
""851_refund"" -> ""851_ownerAndCoin"";
""851_generateTokens"" -> ""851_ownerAndCoin"";
""851_enableTransfer"" -> ""851_onlyOwner"";
""851_transferFrom"" -> ""851_workingFlag"";
""851_disableTransfer"" -> ""851_onlyOwner"";
""851_setPrice"" -> ""851_onlyOwner"";
""851_setCurrentCoin"" -> ""851_onlyOwner"";
""851_refund"" -> ""851_workingFlag"";
""851_disableGeneration"" -> ""851_onlyOwner"";
""851_generateTokens"" -> ""851_workingFlag"";
""851_totalSupply"" -> ""851_workingFlag"";
""851_enableGeneration"" -> ""851_onlyOwner"";
""851_transfer"" -> ""851_workingFlag"";
""851_generateTokens"" -> ""851_transferFrom"";
""851_fallback"" -> ""851_workingFlag"";
""851_kill"" -> ""851_onlyOwner"";
}
"
0x1c9be00d799132986edcd2d099b9f28e5757677c.sol,_0xEtherToken,"contract _0xEtherToken is ERC20Interface { using SafeMath for uint; using ExtendedMath for uint; string public symbol = ; string public name = ; uint8 public decimals = 8; uint public _totalSupply = 10000000000000000; uint public maxSupplyForEra = 5000000000000000; uint public latestDifficultyPeriodStarted; uint public tokensMinted; uint public epochCount; uint public _BLOCKS_PER_READJUSTMENT = 1024; uint public _MINIMUM_TARGET = 2**16; uint public _MAXIMUM_TARGET = 2**234; uint public miningTarget = _MAXIMUM_TARGET; bytes32 public challengeNumber; uint public rewardEra; address public lastRewardTo; uint public lastRewardAmount; uint public lastRewardEthBlockNumber; mapping(bytes32 => bytes32) solutionForChallenge; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; address private owner; event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber); function _0xEtherToken() public { owner = msg.sender; latestDifficultyPeriodStarted = block.number; _startNewMiningEpoch(); }",1,"subgraph cluster_901__0xEtherToken {
label=""_0xEtherToken"";
""901_approveAndCall"" [label=""approveAndCall""];
""901_getMiningDifficulty"" [label=""getMiningDifficulty""];
""901_mint"" [label=""mint""];
""901_allowance"" [label=""allowance""];
""901_getChallengeNumber"" [label=""getChallengeNumber""];
""901__startNewMiningEpoch"" [label=""_startNewMiningEpoch""];
""901_fallback"" [label=""fallback""];
""901_totalSupply"" [label=""totalSupply""];
""901_getMintDigest"" [label=""getMintDigest""];
""901_approve"" [label=""approve""];
""901_checkMintSolution"" [label=""checkMintSolution""];
""901_transferFrom"" [label=""transferFrom""];
""901_getMiningReward"" [label=""getMiningReward""];
""901__0xEtherToken"" [label=""_0xEtherToken""];
""901__reAdjustDifficulty"" [label=""_reAdjustDifficulty""];
""901_balanceOf"" [label=""balanceOf""];
""901_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""901_transfer"" [label=""transfer""];
""901_getMiningTarget"" [label=""getMiningTarget""];
""901__0xEtherToken"" -> ""901__startNewMiningEpoch"";
""901_mint"" -> ""901__startNewMiningEpoch"";
""901_mint"" -> ""901_getMiningReward"";
""901__startNewMiningEpoch"" -> ""901__reAdjustDifficulty"";
""901__startNewMiningEpoch"" -> ""901_getMiningReward"";
}
"
0x2668afe75c5b0b726c2b4388658edae365eda4e2.sol,B2ANDcoin,"contract B2ANDcoin is Ownable { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function B2ANDcoin( ) public { totalSupply = 100000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_400_B2ANDcoin {
label=""B2ANDcoin"";
""400_transfer"" [label=""transfer""];
""400_transferFrom"" [label=""transferFrom""];
""400__transfer"" [label=""_transfer""];
""400_approve"" [label=""approve""];
""400_burn"" [label=""burn""];
""400_B2ANDcoin"" [label=""B2ANDcoin""];
""400_approveAndCall"" [label=""approveAndCall""];
""400_burnFrom"" [label=""burnFrom""];
""400_transferFrom"" -> ""400__transfer"";
""400_transfer"" -> ""400__transfer"";
""400_approveAndCall"" -> ""400_approve"";
}
"
0x022882d9fcf023e57926e4e01d1b137aabd93416.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_210_StandardToken {
label=""StandardToken"";
""210_transferFrom"" [label=""transferFrom""];
""210_approve"" [label=""approve""];
""210_balanceOf"" [label=""balanceOf""];
""210_transfer"" [label=""transfer""];
""210_allowance"" [label=""allowance""];
}
"
0x207c92740ccbe446ac2e2f43fe1da52651cd8d3c.sol,TJK,"contract TJK { uint256 public totalSupply; string public name; uint256 public decimals; string public symbol; address public owner; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; function TJK(uint256 _totalSupply, string _symbol, string _name, uint8 _decimalUnits) public { decimals = _decimalUnits; symbol = _symbol; name = _name; owner = msg.sender; totalSupply = _totalSupply * (10 ** decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_285_TJK {
label=""TJK"";
""285_transfer"" [label=""transfer""];
""285_allowance"" [label=""allowance""];
""285_approve"" [label=""approve""];
""285_balanceOf"" [label=""balanceOf""];
""285_TJK"" [label=""TJK""];
""285_transferFrom"" [label=""transferFrom""];
""285_mint"" [label=""mint""];
""285_transfer"" -> ""285_onlyPayloadSize"";
}
"
0x856912680349a406f72e26aa994100b8ad409f87.sol,StandardToken,"contract StandardToken is Token { mapping (address => uint) balances; mapping (address => mapping (address => uint)) allowances; function transfer(address to, uint value) public returns (bool) { require((to != 0x0) && (to != address(this))); if (balances[msg.sender] < value) revert(); balances[msg.sender] -= value; balances[to] += value; Transfer(msg.sender, to, value); return true; }",1,"subgraph cluster_263_StandardToken {
label=""StandardToken"";
""263_balanceOf"" [label=""balanceOf""];
""263_transferFrom"" [label=""transferFrom""];
""263_approve"" [label=""approve""];
""263_allowance"" [label=""allowance""];
""263_transfer"" [label=""transfer""];
}
"
0x5b7cfbee45509b89417f26bbc28a8de11bca3726.sol,AirdropSmart,"contract AirdropSmart is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function AirdropSmart() public { symbol = ; name = ; decimals = 18; _totalSupply = 5000000000000000000000000000; balances[0xB7F09F9cCD6De2A8ed1852b823305c0D22409F90] = _totalSupply; Transfer(address(0), 0xB7F09F9cCD6De2A8ed1852b823305c0D22409F90, _totalSupply); }",1,"subgraph cluster_543_AirdropSmart {
label=""AirdropSmart"";
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_AirdropSmart"" [label=""AirdropSmart""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x0eeb66edff8ccfd85c2181eff81d8275a3b92b8b.sol,OROCoin,"contract OROCoin { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_384_OROCoin {
label=""OROCoin"";
""384_burnFrom"" [label=""burnFrom""];
""384_approveAndCall"" [label=""approveAndCall""];
""384_constructor"" [label=""constructor""];
""384_transfer"" [label=""transfer""];
""384_transferFrom"" [label=""transferFrom""];
""384__transfer"" [label=""_transfer""];
""384_burn"" [label=""burn""];
""384_approve"" [label=""approve""];
""384_transferFrom"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
""384_transfer"" -> ""384__transfer"";
}
"
0x02c60d28be3338014fef3fdf50a3218b946c0609.sol,EasyInvest3,contract EasyInvest3 { mapping (address => uint256) public invested; mapping (address => uint256) public atBlock; function () external payable { if (invested[msg.sender] != 0) { uint256 amount = invested[msg.sender] * 3 / 100 * (block.number - atBlock[msg.sender]) / 5900; msg.sender.transfer(amount); },1,"subgraph cluster_68_EasyInvest3 {
label=""EasyInvest3"";
""68_fallback"" [label=""fallback""];
}
"
0x04ed15fa8c47778589c1bf3451e0de25c1eed3ae.sol,ALEX,"contract ALEX is owned { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 10**25; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ALEX(){ balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_553_ALEX {
label=""ALEX"";
""553_mintToken"" [label=""mintToken""];
""553_distributeToken"" [label=""distributeToken""];
""553_transferFrom"" [label=""transferFrom""];
""553_transfer"" [label=""transfer""];
""553_approve"" [label=""approve""];
""553_ALEX"" [label=""ALEX""];
""553_approveAndCall"" [label=""approveAndCall""];
""553_burnFrom"" [label=""burnFrom""];
""553__transfer"" [label=""_transfer""];
""553_burn"" [label=""burn""];
""553_distributeToken"" -> ""553_onlyOwner"";
""553_transfer"" -> ""553__transfer"";
""553_approveAndCall"" -> ""553_approve"";
""553_mintToken"" -> ""553_onlyOwner"";
""553_transferFrom"" -> ""553__transfer"";
}
"
0x571df5a0b5571a3cc7dcbd8185b200426376845f.sol,EBRK,"contract EBRK { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function EBRK( ) public { totalSupply = 100000000000000000000000000; balanceOf[msg.sender] = 100000000000000000000000000; name = ; symbol = ; }",1,"subgraph cluster_349_EBRK {
label=""EBRK"";
""349_burnFrom"" [label=""burnFrom""];
""349_EBRK"" [label=""EBRK""];
""349_approveAndCall"" [label=""approveAndCall""];
""349_burn"" [label=""burn""];
""349_approve"" [label=""approve""];
""349__transfer"" [label=""_transfer""];
""349_transferFrom"" [label=""transferFrom""];
""349_transfer"" [label=""transfer""];
""349_transfer"" -> ""349__transfer"";
""349_transferFrom"" -> ""349__transfer"";
""349_approveAndCall"" -> ""349_approve"";
}
"
0xecff8fc2a19f83fc855618704f38725756dbcae3.sol,OK3D,"contract OK3D is modularShort { using SafeMath for *; using NameFilter for string; using F3DKeysCalcShort for uint256; PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0x5015A6E288FF4AC0c62bf1DA237c24c3Fb849188); address private admin = msg.sender; string constant public name = ; string constant public symbol = ; uint256 private rndExtra_ = 0; uint256 private rndGap_ = 2 minutes; uint256 constant private rndInit_ = 12 hours; uint256 constant private rndInc_ = 30 seconds; uint256 constant private rndMax_ = 24 hours; uint256 public airDropPot_; uint256 public airDropTracker_ = 0; uint256 public rID_; mapping (address => uint256) public pIDxAddr_; mapping (bytes32 => uint256) public pIDxName_; mapping (uint256 => F3Ddatasets.Player) public plyr_; mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_; mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; mapping (uint256 => F3Ddatasets.Round) public round_; mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_; mapping (uint256 => F3Ddatasets.TeamFee) public fees_; mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_; constructor() public { fees_[0] = F3Ddatasets.TeamFee(28,10); fees_[1] = F3Ddatasets.TeamFee(36,10); fees_[2] = F3Ddatasets.TeamFee(51,10); fees_[3] = F3Ddatasets.TeamFee(40,10); potSplit_[0] = F3Ddatasets.PotSplit(25,10); potSplit_[1] = F3Ddatasets.PotSplit(25,0); potSplit_[2] = F3Ddatasets.PotSplit(20,20); potSplit_[3] = F3Ddatasets.PotSplit(20,20); activated_ = true; rID_ = 1; round_[1].strt = now + rndExtra_ - rndGap_; round_[1].end = now + rndInit_ + rndExtra_; }",1,"subgraph cluster_4376_OK3D {
label=""OK3D"";
""4376_iWantXKeys"" [label=""iWantXKeys""];
""4376_withdrawEarnings"" [label=""withdrawEarnings""];
""4376_updateMasks"" [label=""updateMasks""];
""4376_core"" [label=""core""];
""4376_fallback"" [label=""fallback""];
""4376_potSwap"" [label=""potSwap""];
""4376_endTx"" [label=""endTx""];
""4376_registerNameXname"" [label=""registerNameXname""];
""4376_getTimeLeft"" [label=""getTimeLeft""];
""4376_endRound"" [label=""endRound""];
""4376_buyXname"" [label=""buyXname""];
""4376_registerNameXaddr"" [label=""registerNameXaddr""];
""4376_withdraw"" [label=""withdraw""];
""4376_airdrop"" [label=""airdrop""];
""4376_calcKeysReceived"" [label=""calcKeysReceived""];
""4376_getCurrentRoundInfo"" [label=""getCurrentRoundInfo""];
""4376_getPlayerInfoByAddress"" [label=""getPlayerInfoByAddress""];
""4376_calcUnMaskedEarnings"" [label=""calcUnMaskedEarnings""];
""4376_buyXaddr"" [label=""buyXaddr""];
""4376_distributeInvest"" [label=""distributeInvest""];
""4376_receivePlayerInfo"" [label=""receivePlayerInfo""];
""4376_getPlayerVaultsHelper"" [label=""getPlayerVaultsHelper""];
""4376_reLoadXid"" [label=""reLoadXid""];
""4376_getBuyPrice"" [label=""getBuyPrice""];
""4376_determinePID"" [label=""determinePID""];
""4376_verifyTeam"" [label=""verifyTeam""];
""4376_distributeExternal"" [label=""distributeExternal""];
""4376_updateGenVault"" [label=""updateGenVault""];
""4376_reLoadXname"" [label=""reLoadXname""];
""4376_getPlayerVaults"" [label=""getPlayerVaults""];
""4376_reLoadCore"" [label=""reLoadCore""];
""4376_receivePlayerNameList"" [label=""receivePlayerNameList""];
""4376_activate"" [label=""activate""];
""4376_constructor"" [label=""constructor""];
""4376_registerNameXID"" [label=""registerNameXID""];
""4376_reLoadXaddr"" [label=""reLoadXaddr""];
""4376_managePlayer"" [label=""managePlayer""];
""4376_updateTimer"" [label=""updateTimer""];
""4376_buyXid"" [label=""buyXid""];
""4376_distributeInternal"" [label=""distributeInternal""];
""4376_buyCore"" [label=""buyCore""];
""4376_getPlayerInfoByAddress"" -> ""4376_calcUnMaskedEarnings"";
""4376_buyCore"" -> ""4376_endRound"";
""4376_buyXid"" -> ""4376_determinePID"";
""4376_reLoadXaddr"" -> ""4376_reLoadCore"";
""4376_getPlayerVaults"" -> ""4376_calcUnMaskedEarnings"";
""4376_withdraw"" -> ""4376_withdrawEarnings"";
""4376_withdraw"" -> ""4376_isHuman"";
""4376_buyCore"" -> ""4376_core"";
""4376_fallback"" -> ""4376_isActivated"";
""4376_buyXname"" -> ""4376_determinePID"";
""4376_registerNameXID"" -> ""4376_isHuman"";
""4376_registerNameXname"" -> ""4376_isHuman"";
""4376_distributeInternal"" -> ""4376_updateMasks"";
""4376_reLoadXname"" -> ""4376_verifyTeam"";
""4376_fallback"" -> ""4376_isHuman"";
""4376_withdraw"" -> ""4376_isActivated"";
""4376_buyXaddr"" -> ""4376_isActivated"";
""4376_reLoadXname"" -> ""4376_isActivated"";
""4376_buyXid"" -> ""4376_isWithinLimits"";
""4376_buyXid"" -> ""4376_buyCore"";
""4376_buyXaddr"" -> ""4376_buyCore"";
""4376_buyXaddr"" -> ""4376_verifyTeam"";
""4376_fallback"" -> ""4376_isWithinLimits"";
""4376_reLoadXid"" -> ""4376_reLoadCore"";
""4376_reLoadCore"" -> ""4376_endRound"";
""4376_buyXname"" -> ""4376_verifyTeam"";
""4376_buyXname"" -> ""4376_buyCore"";
""4376_registerNameXaddr"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_isWithinLimits"";
""4376_core"" -> ""4376_airdrop"";
""4376_withdrawEarnings"" -> ""4376_updateGenVault"";
""4376_buyXname"" -> ""4376_isActivated"";
""4376_reLoadCore"" -> ""4376_withdrawEarnings"";
""4376_withdraw"" -> ""4376_endRound"";
""4376_reLoadXaddr"" -> ""4376_isActivated"";
""4376_buyXname"" -> ""4376_isHuman"";
""4376_buyXaddr"" -> ""4376_determinePID"";
""4376_buyXaddr"" -> ""4376_isWithinLimits"";
""4376_buyXaddr"" -> ""4376_isHuman"";
""4376_managePlayer"" -> ""4376_updateGenVault"";
""4376_reLoadXname"" -> ""4376_isWithinLimits"";
""4376_reLoadXname"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_isHuman"";
""4376_core"" -> ""4376_distributeInternal"";
""4376_fallback"" -> ""4376_determinePID"";
""4376_updateGenVault"" -> ""4376_calcUnMaskedEarnings"";
""4376_buyXid"" -> ""4376_isHuman"";
""4376_fallback"" -> ""4376_buyCore"";
""4376_reLoadXaddr"" -> ""4376_isHuman"";
""4376_reLoadXid"" -> ""4376_verifyTeam"";
""4376_buyXid"" -> ""4376_isActivated"";
""4376_reLoadCore"" -> ""4376_core"";
""4376_core"" -> ""4376_managePlayer"";
""4376_reLoadXname"" -> ""4376_reLoadCore"";
""4376_core"" -> ""4376_distributeExternal"";
""4376_reLoadXaddr"" -> ""4376_verifyTeam"";
""4376_reLoadXaddr"" -> ""4376_isWithinLimits"";
""4376_buyXid"" -> ""4376_verifyTeam"";
""4376_core"" -> ""4376_endTx"";
""4376_buyXname"" -> ""4376_isWithinLimits"";
""4376_distributeExternal"" -> ""4376_distributeInvest"";
""4376_getPlayerVaults"" -> ""4376_getPlayerVaultsHelper"";
""4376_reLoadXid"" -> ""4376_isActivated"";
""4376_core"" -> ""4376_updateTimer"";
}
"
0x48c8efdbf925a8028abf1d4bacb7baa59ff2948b.sol,FTWCoin,contract FTWCoin is StandardToken { string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; function FTWCoin() public { balances[msg.sender] = 250000000000000000000000000; totalSupply = 250000000000000000000000000; name = ; decimals = 18; symbol = ; unitsOneEthCanBuy = 10000; fundsWallet = msg.sender; },1,"subgraph cluster_423_FTWCoin {
label=""FTWCoin"";
""423_fallback"" [label=""fallback""];
""423_FTWCoin"" [label=""FTWCoin""];
""423_approveAndCall"" [label=""approveAndCall""];
}
"
0xc5d3b25a2ca77316b637106a749cd5e92a8e4702.sol,COMMERCIALPOINTCHAINSYSTEM,"contract COMMERCIALPOINTCHAINSYSTEM is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function COMMERCIALPOINTCHAINSYSTEM() public { symbol = ; name = ; decimals = 0; _totalSupply = 1000000000; balances[0x0e51B1C46Da00b89760C530a1f468435DAA1Ff64] = _totalSupply; Transfer(address(0), 0x0e51B1C46Da00b89760C530a1f468435DAA1Ff64, _totalSupply); }",1,"subgraph cluster_543_COMMERCIALPOINTCHAINSYSTEM {
label=""COMMERCIALPOINTCHAINSYSTEM"";
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_COMMERCIALPOINTCHAINSYSTEM"" [label=""COMMERCIALPOINTCHAINSYSTEM""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x6cec5ecfe573e0903edc467c4ed75f99bade6dc7.sol,Bgc,"contract Bgc { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Bgc( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_Bgc {
label=""Bgc"";
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_approve"" [label=""approve""];
""361_Bgc"" [label=""Bgc""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0xd96205b1ef12bc471195fe92a896c461528181ab.sol,CandyToken,"contract CandyToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_CandyToken {
label=""CandyToken"";
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_constructor"" [label=""constructor""];
""361_transfer"" [label=""transfer""];
""361_burn"" [label=""burn""];
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x8476957a872ac0bc253333cc063b6a37f6a6faa3.sol,CINDICATORFund,"contract CINDICATORFund { mapping (address => uint256) public balances; mapping (address => bool) public voters; uint256 public votes = 0; bytes32 hash_pwd = 0x9f280e9af8b2203790b80a28449e312091a38cd80f67c9a7ad5a5ce1a8317f49; bool public bought_tokens; uint256 public contract_eth_value; uint256 constant public min_required_amount = 35 ether; address public sale = 0x0; function perform_withdraw(address tokenAddress) { require(bought_tokens); ERC20 token = ERC20(tokenAddress); uint256 contract_token_balance = token.balanceOf(address(this)); require(contract_token_balance != 0); uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value; contract_eth_value -= balances[msg.sender]; balances[msg.sender] = 0; require(token.transfer(msg.sender, tokens_to_withdraw)); }",1,"subgraph cluster_282_CINDICATORFund {
label=""CINDICATORFund"";
""282_buy_the_tokens"" [label=""buy_the_tokens""];
""282_change_sale_address"" [label=""change_sale_address""];
""282_vote_proposed_address"" [label=""vote_proposed_address""];
""282_fallback"" [label=""fallback""];
""282_refund_me"" [label=""refund_me""];
""282_default_helper"" [label=""default_helper""];
""282_perform_withdraw"" [label=""perform_withdraw""];
""282_fallback"" -> ""282_default_helper"";
}
"
0x33a104dcbed81961701900c06fd14587c908eaa3.sol,AccessControl,contract AccessControl { address public creatorAddress; uint16 public totalSeraphims = 0; mapping (address => bool) public seraphims; bool public isMaintenanceMode = true; modifier onlyCREATOR() { require(msg.sender == creatorAddress); _; },1,"subgraph cluster_118_AccessControl {
label=""AccessControl"";
""118_addSERAPHIM"" [label=""addSERAPHIM""];
""118_AccessControl"" [label=""AccessControl""];
""118_updateMaintenanceMode"" [label=""updateMaintenanceMode""];
""118_removeSERAPHIM"" [label=""removeSERAPHIM""];
""118_addSERAPHIM"" -> ""118_onlyCREATOR"";
""118_updateMaintenanceMode"" -> ""118_onlyCREATOR"";
""118_removeSERAPHIM"" -> ""118_onlyCREATOR"";
}
"
0xc654928ecf5f984ef72c806ec9b6e2d213c90818.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_415_TokenERC20 {
label=""TokenERC20"";
""415_approveAndCall"" [label=""approveAndCall""];
""415_burn"" [label=""burn""];
""415_constructor"" [label=""constructor""];
""415_approve"" [label=""approve""];
""415_burnFrom"" [label=""burnFrom""];
""415_transfer"" [label=""transfer""];
""415__transfer"" [label=""_transfer""];
""415_transferFrom"" [label=""transferFrom""];
""415_transfer"" -> ""415__transfer"";
""415_transferFrom"" -> ""415__transfer"";
""415_approveAndCall"" -> ""415_approve"";
}
"
0x6560c60f55c165e6f819b3a52c13f9f1aa22b502.sol,Data,contract Data is Ownable { mapping (address => address) private parent; mapping (address => uint8) public statuses; mapping (address => uint) public referralDeposits; mapping(address => uint256) private balances; mapping(address => uint256) private investorBalances; function parentOf(address _addr) public constant returns (address) { return parent[_addr]; },1,"subgraph cluster_712_Data {
label=""Data"";
""712_balanceOf"" [label=""balanceOf""];
""712_addInvestorBalance"" [label=""addInvestorBalance""];
""712_addReferralDeposit"" [label=""addReferralDeposit""];
""712_parentOf"" [label=""parentOf""];
""712_Data"" [label=""Data""];
""712_setParent"" [label=""setParent""];
""712_setStatus"" [label=""setStatus""];
""712_subtrInvestorBalance"" [label=""subtrInvestorBalance""];
""712_statuses"" [label=""statuses""];
""712_investorBalanceOf"" [label=""investorBalanceOf""];
""712_referralDeposits"" [label=""referralDeposits""];
""712_addBalance"" [label=""addBalance""];
""712_subtrBalance"" [label=""subtrBalance""];
""712_subtrInvestorBalance"" -> ""712_onlyOwner"";
""712_addBalance"" -> ""712_onlyOwner"";
""712_addReferralDeposit"" -> ""712_onlyOwner"";
""712_addInvestorBalance"" -> ""712_onlyOwner"";
""712_setStatus"" -> ""712_onlyOwner"";
""712_setParent"" -> ""712_onlyOwner"";
""712_subtrBalance"" -> ""712_onlyOwner"";
}
"
0x52fb36c83ad33c1824912fc81071ca5eeb8ab390.sol,TOKENERC20,"contract TOKENERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TOKENERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_301_TOKENERC20 {
label=""TOKENERC20"";
""301_approveAndCall"" [label=""approveAndCall""];
""301_transfer"" [label=""transfer""];
""301_burn"" [label=""burn""];
""301_approve"" [label=""approve""];
""301_TOKENERC20"" [label=""TOKENERC20""];
""301__transfer"" [label=""_transfer""];
""301_approveAndCall"" -> ""301_approve"";
""301_transfer"" -> ""301__transfer"";
}
"
0x0d1c63e12fde9e5cada3e272576183aba9cfeda2.sol,ZenswapNetworkToken,"contract ZenswapNetworkToken { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public initialSupply = 20000000000000000000000000000; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor() public { totalSupply = initialSupply; balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_346_ZenswapNetworkToken {
label=""ZenswapNetworkToken"";
""346_constructor"" [label=""constructor""];
""346_transferFrom"" [label=""transferFrom""];
""346_burn"" [label=""burn""];
""346_burnFrom"" [label=""burnFrom""];
""346__transfer"" [label=""_transfer""];
""346_approve"" [label=""approve""];
""346_approveAndCall"" [label=""approveAndCall""];
""346_transfer"" [label=""transfer""];
""346_transferFrom"" -> ""346__transfer"";
""346_approveAndCall"" -> ""346_approve"";
""346_transfer"" -> ""346__transfer"";
}
"
0xc3a684140448995f6abeb361c56110207da04d57.sol,SignalsSociety,"contract SignalsSociety is Ownable, Memberships { event Deposited(address account, uint amount, uint balance, uint timestamp); event MembershipPaid(address account, Membership membership, uint timestamp); mapping (address => uint) public balances; function deposit(address account, uint amount) public { balances[account] += amount; Deposited(account, amount, balances[account], now); }",1,"subgraph cluster_258_SignalsSociety {
label=""SignalsSociety"";
""258_acceptMembership"" [label=""acceptMembership""];
""258_deposit"" [label=""deposit""];
""258_fallback"" [label=""fallback""];
""258_acceptMembership"" -> ""258_getMembershipPrice"";
""258_acceptMembership"" -> ""258_onlyBot"";
""258_fallback"" -> ""258_deposit"";
}
"
0x07ce333ec45618d838c32e60cee5cb1ce389e06e.sol,BancorChanger,"contract BancorChanger is ITokenChanger, SmartTokenController, SafeMath { struct Reserve { uint256 virtualBalance; uint8 ratio; bool isVirtualBalanceEnabled; bool isPurchaseEnabled; bool isSet; }",1,"subgraph cluster_1396_BancorChanger {
label=""BancorChanger"";
""1396_updateReserve"" [label=""updateReserve""];
""1396_buy"" [label=""buy""];
""1396_getReturn"" [label=""getReturn""];
""1396_getPurchaseReturn"" [label=""getPurchaseReturn""];
""1396_disableReservePurchases"" [label=""disableReservePurchases""];
""1396_changeableToken"" [label=""changeableToken""];
""1396_changeableTokenCount"" [label=""changeableTokenCount""];
""1396_setFormula"" [label=""setFormula""];
""1396_change"" [label=""change""];
""1396_addReserve"" [label=""addReserve""];
""1396_BancorChanger"" [label=""BancorChanger""];
""1396_getReserveBalance"" [label=""getReserveBalance""];
""1396_reserveTokenCount"" [label=""reserveTokenCount""];
""1396_sell"" [label=""sell""];
""1396_getSaleReturn"" [label=""getSaleReturn""];
""1396_getPurchaseReturn"" -> ""1396_getReserveBalance"";
""1396_getReserveBalance"" -> ""1396_validReserve"";
""1396_setFormula"" -> ""1396_notThis"";
""1396_updateReserve"" -> ""1396_ownerOnly"";
""1396_updateReserve"" -> ""1396_validReserve"";
""1396_sell"" -> ""1396_validAmount"";
""1396_getSaleReturn"" -> ""1396_active"";
""1396_getReturn"" -> ""1396_safeAdd"";
""1396_addReserve"" -> ""1396_ownerOnly"";
""1396_disableReservePurchases"" -> ""1396_ownerOnly"";
""1396_changeableTokenCount"" -> ""1396_reserveTokenCount"";
""1396_updateReserve"" -> ""1396_validReserveRatio"";
""1396_addReserve"" -> ""1396_inactive"";
""1396_BancorChanger"" -> ""1396_validAddress"";
""1396_change"" -> ""1396_sell"";
""1396_getSaleReturn"" -> ""1396_validAmount"";
""1396_addReserve"" -> ""1396_validAddress"";
""1396_buy"" -> ""1396_safeAdd"";
""1396_change"" -> ""1396_validToken"";
""1396_addReserve"" -> ""1396_validReserveRatio"";
""1396_buy"" -> ""1396_getPurchaseReturn"";
""1396_getPurchaseReturn"" -> ""1396_active"";
""1396_sell"" -> ""1396_getSaleReturn"";
""1396_change"" -> ""1396_buy"";
""1396_buy"" -> ""1396_validAmount"";
""1396_addReserve"" -> ""1396_notThis"";
""1396_BancorChanger"" -> ""1396_addReserve"";
""1396_getSaleReturn"" -> ""1396_getReserveBalance"";
""1396_getPurchaseReturn"" -> ""1396_validReserve"";
""1396_getReturn"" -> ""1396_validToken"";
""1396_sell"" -> ""1396_getReserveBalance"";
""1396_disableReservePurchases"" -> ""1396_validReserve"";
""1396_setFormula"" -> ""1396_ownerOnly"";
""1396_BancorChanger"" -> ""1396_SmartTokenController"";
""1396_sell"" -> ""1396_safeSub"";
""1396_setFormula"" -> ""1396_validAddress"";
""1396_getReturn"" -> ""1396_getPurchaseReturn"";
""1396_getReturn"" -> ""1396_getSaleReturn"";
""1396_getSaleReturn"" -> ""1396_getSaleReturn"";
""1396_getSaleReturn"" -> ""1396_validReserve"";
}
"
0x6ceb458fac48cf87b420f23b0d890534655683e0.sol,ERC20,contract ERC20 { function totalSupply() constant returns (uint256 supply) {},1,"subgraph cluster_74_ERC20 {
label=""ERC20"";
""74_approve"" [label=""approve""];
""74_transfer"" [label=""transfer""];
""74_totalSupply"" [label=""totalSupply""];
""74_transferFrom"" [label=""transferFrom""];
""74_balanceOf"" [label=""balanceOf""];
""74_allowance"" [label=""allowance""];
}
"
0x4bb12d68c795462c12ec30ad82421218d9c32a7d.sol,Crowdsale,"contract Crowdsale { address public beneficiary; uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price; token public tokenReward; mapping(address => uint256) public balanceOf; bool fundingGoalReached = false; bool crowdsaleClosed = false; uint public percent; mapping(address => uint256) public percentOf; event GoalReached(address recipient, uint totalAmountRaised); event FundTransfer(address backer, uint amount, bool isContribution); event RewardToken(address backer, uint amount, uint percent); function Crowdsale( address ifSuccessfulSendTo, uint fundingGoalInEthers, uint durationInMinutes, uint weiCostOfEachToken, address addressOfTokenUsedAsReward, uint initPercent ) { beneficiary = ifSuccessfulSendTo; fundingGoal = fundingGoalInEthers * 1 ether; deadline = now + durationInMinutes * 1 minutes; price = weiCostOfEachToken * 1 wei; tokenReward = token(addressOfTokenUsedAsReward); percent = initPercent; }",1,"subgraph cluster_379_Crowdsale {
label=""Crowdsale"";
""379_safeWithdrawal"" [label=""safeWithdrawal""];
""379_releaseTenPercent"" [label=""releaseTenPercent""];
""379_checkGoalReached"" [label=""checkGoalReached""];
""379_fallback"" [label=""fallback""];
""379_Crowdsale"" [label=""Crowdsale""];
""379_checkGoalReached"" -> ""379_afterDeadline"";
""379_safeWithdrawal"" -> ""379_afterDeadline"";
""379_releaseTenPercent"" -> ""379_afterDeadline"";
}
"
0x52ccb8ebb0f55a592ce67dd49249f6cb0c64a129.sol,Globglogabgalab,"contract Globglogabgalab is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Globglogabgalab() public { symbol = ; name = ; decimals = 7; _totalSupply = 13370000000000000; balances[0x433a57803f841C5611e5370ad5CD97bf46e25cb6] = _totalSupply; Transfer(address(0), 0x433a57803f841C5611e5370ad5CD97bf46e25cb6, _totalSupply); }",1,"subgraph cluster_543_Globglogabgalab {
label=""Globglogabgalab"";
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_Globglogabgalab"" [label=""Globglogabgalab""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xed2725cdfc48a24aa71d9b9621d431db0705a55a.sol,Milestones,"contract Milestones is Ownable { enum State { PreIco, IcoOpen, IcoClosed, IcoSuccessful, IcoFailed, BankLicenseSuccessful, BankLicenseFailed }",1,"subgraph cluster_1572_Milestones {
label=""Milestones"";
""1572_Milestone_IcoFailed"" [label=""Milestone_IcoFailed""];
""1572_Milestone_OpenTheIco"" [label=""Milestone_OpenTheIco""];
""1572_Milestone_BankLicenseFailed"" [label=""Milestone_BankLicenseFailed""];
""1572_Milestone_BankLicenseSuccessful"" [label=""Milestone_BankLicenseSuccessful""];
""1572_Milestone_IcoSuccessful"" [label=""Milestone_IcoSuccessful""];
""1572_Milestone_CloseTheIco"" [label=""Milestone_CloseTheIco""];
""1572_Milestone_OpenTheIco"" -> ""1572_inState"";
""1572_Milestone_IcoSuccessful"" -> ""1572_onlyOwner"";
""1572_Milestone_CloseTheIco"" -> ""1572_inState"";
""1572_Milestone_BankLicenseFailed"" -> ""1572_inState"";
""1572_Milestone_IcoSuccessful"" -> ""1572_inState"";
""1572_Milestone_BankLicenseSuccessful"" -> ""1572_inState"";
""1572_Milestone_IcoFailed"" -> ""1572_onlyOwner"";
""1572_Milestone_CloseTheIco"" -> ""1572_onlyOwner"";
""1572_Milestone_BankLicenseSuccessful"" -> ""1572_onlyOwner"";
""1572_Milestone_IcoFailed"" -> ""1572_inState"";
""1572_Milestone_BankLicenseFailed"" -> ""1572_onlyOwner"";
""1572_Milestone_OpenTheIco"" -> ""1572_onlyOwner"";
}
"
0xde0f4df545910f0ce9bbdaf3eeb929705b8a9de0.sol,TokenERC20,"contract TokenERC20 is SafeMath { string public name; string public symbol; uint8 public decimals = 0; uint256 public totalSupply; mapping (address => uint256) private addressBalance; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function balanceOf (address _owner) constant returns (uint256 balance) { return addressBalance[_owner]; }",1,"subgraph cluster_434_TokenERC20 {
label=""TokenERC20"";
""434_transferFrom"" [label=""transferFrom""];
""434__transfer"" [label=""_transfer""];
""434_approveAndCall"" [label=""approveAndCall""];
""434_TokenERC20"" [label=""TokenERC20""];
""434_approve"" [label=""approve""];
""434_transfer"" [label=""transfer""];
""434_balanceOf"" [label=""balanceOf""];
""434_approveAndCall"" -> ""434_approve"";
""434_transferFrom"" -> ""434__transfer"";
""434_transfer"" -> ""434__transfer"";
}
"
0x6de20d9d444354ff9b271a6ea6f9274f2467df35.sol,Rollback,"contract Rollback is Owned, ApprovalReceiver { event onSetCredit(address account , uint256 amount); event onReturned(address who, uint256 tokenAmount, uint256 ethAmount); using SafeMath for uint256; Token public token = Token(0xD850942eF8811f2A866692A623011bDE52a462C1); uint256 public totalSetCredit; uint256 public totalReturnedCredit; struct Credit { uint128 total; uint128 used; }",1,"subgraph cluster_548_Rollback {
label=""Rollback"";
""548_withdrawETH"" [label=""withdrawETH""];
""548_fallback"" [label=""fallback""];
""548_receiveApproval"" [label=""receiveApproval""];
""548_withdrawToken"" [label=""withdrawToken""];
""548_Rollback"" [label=""Rollback""];
""548_setCredit"" [label=""setCredit""];
""548_getCredit"" [label=""getCredit""];
""548_setCredit"" -> ""548_onlyOwner"";
""548_withdrawToken"" -> ""548_onlyOwner"";
""548_withdrawETH"" -> ""548_onlyOwner"";
}
"
0x46cefba4dd7512b2449e1ac4b730bfb7f77d1407.sol,DecentralizedExchangeHotPotato,contract DecentralizedExchangeHotPotato { address private owner; mapping (address => bool) private admins; struct Order { address creator; address owner; address issuer; uint256 tokenId; uint256 price; uint256 startTime; uint256 endTime; },1,"subgraph cluster_515_DecentralizedExchangeHotPotato {
label=""DecentralizedExchangeHotPotato"";
""515_put"" [label=""put""];
""515_isContract"" [label=""isContract""];
""515_totalOrder"" [label=""totalOrder""];
""515_allOf"" [label=""allOf""];
""515_withdrawAmount"" [label=""withdrawAmount""];
""515_DecentralizedExchangeHotPotato"" [label=""DecentralizedExchangeHotPotato""];
""515_withdrawAll"" [label=""withdrawAll""];
""515_removeAdmin"" [label=""removeAdmin""];
""515_revoke"" [label=""revoke""];
""515_getNextPrice"" [label=""getNextPrice""];
""515_addAdmin"" [label=""addAdmin""];
""515_buy"" [label=""buy""];
""515_isAdmin"" [label=""isAdmin""];
""515_name"" [label=""name""];
""515_setOwner"" [label=""setOwner""];
""515_removeAdmin"" -> ""515_onlyOwner"";
""515_withdrawAmount"" -> ""515_onlyAdmins"";
""515_setOwner"" -> ""515_onlyOwner"";
""515_buy"" -> ""515_isContract"";
""515_withdrawAll"" -> ""515_onlyAdmins"";
""515_buy"" -> ""515_getNextPrice"";
""515_addAdmin"" -> ""515_onlyOwner"";
}
"
0xb619e84adddd3e336c5dda1e1b40719c846d9030.sol,WorldByEth,contract WorldByEth { using SafeMath for *; using NameFilter for string; string constant public name = ; string constant public symbol = ; uint256 public rID_; uint256 public pID_; uint256 public com_; address public comaddr = 0x9ca974f2c49d68bd5958978e81151e6831290f57; mapping(uint256 => uint256) public pot_; mapping(uint256 => mapping(uint256 => Ctry)) public ctry_; uint public ctynum = 0; uint public gap = 1 hours; uint public timeleft; address public lastplayer = 0x9ca974f2c49d68bd5958978e81151e6831290f57; address public lastwinner; uint[] public validplayers; struct Ctry { uint256 id; uint256 price; bytes32 name; bytes32 mem; address owner; },1,"subgraph cluster_458_WorldByEth {
label=""WorldByEth"";
""458_withcom"" [label=""withcom""];
""458_getvalid"" [label=""getvalid""];
""458_constructor"" [label=""constructor""];
""458_buy"" [label=""buy""];
""458_fallback"" [label=""fallback""];
""458_update"" [label=""update""];
""458_buy"" -> ""458_update"";
""458_buy"" -> ""458_isHuman"";
}
"
0x70538834e68efe5061a11c4999fc050e55ae2b68.sol,AYA,"contract AYA is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 8000000000000000000000000; balances[0x7fa7f2ec928cd9b8cf2fed0de18d6a519a9ffb4b] = _totalSupply; emit Transfer(address(0), 0x7fa7f2ec928cd9b8cf2fed0de18d6a519a9ffb4b, _totalSupply); }",1,"subgraph cluster_543_AYA {
label=""AYA"";
""543_allowance"" [label=""allowance""];
""543_approve"" [label=""approve""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" [label=""transferFrom""];
""543_balanceOf"" [label=""balanceOf""];
""543_constructor"" [label=""constructor""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xce78ab22cd0331a52af7bb4b622edfa792819d47.sol,RUDAWORLD,"contract RUDAWORLD is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function RUDAWORLD() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x524D38666F6B53E25DaB7cEcE0D72585970Bd6ad] = _totalSupply; Transfer(address(0), 0x524D38666F6B53E25DaB7cEcE0D72585970Bd6ad, _totalSupply); }",1,"subgraph cluster_543_RUDAWORLD {
label=""RUDAWORLD"";
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_balanceOf"" [label=""balanceOf""];
""543_RUDAWORLD"" [label=""RUDAWORLD""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x6d3543d4b11683847697f5b9a3a9d116cf13dedd.sol,Bankrollable,contract Bankrollable is UsingTreasury { uint public profitsSent; Ledger public ledger; uint public bankroll; AddressSet public whitelist; modifier fromWhitelistOwner(){ require(msg.sender == getWhitelistOwner()); _; },1,"subgraph cluster_1162_Bankrollable {
label=""Bankrollable"";
""1162_fallback"" [label=""fallback""];
""1162_removeFromWhitelist"" [label=""removeFromWhitelist""];
""1162_getCollateral"" [label=""getCollateral""];
""1162_addBankroll"" [label=""addBankroll""];
""1162_bankrollAvailable"" [label=""bankrollAvailable""];
""1162_profitsTotal"" [label=""profitsTotal""];
""1162_getWhitelistOwner"" [label=""getWhitelistOwner""];
""1162_profits"" [label=""profits""];
""1162_constructor"" [label=""constructor""];
""1162_sendProfits"" [label=""sendProfits""];
""1162_bankrolledBy"" [label=""bankrolledBy""];
""1162_addToWhitelist"" [label=""addToWhitelist""];
""1162_bankrollerTable"" [label=""bankrollerTable""];
""1162_removeBankroll"" [label=""removeBankroll""];
""1162_removeBankroll"" -> ""1162_getCollateral"";
""1162_removeFromWhitelist"" -> ""1162_fromWhitelistOwner"";
""1162_sendProfits"" -> ""1162_getTreasury"";
""1162_addToWhitelist"" -> ""1162_fromWhitelistOwner"";
""1162_bankrollAvailable"" -> ""1162_getCollateral"";
""1162_profits"" -> ""1162_getCollateral"";
""1162_sendProfits"" -> ""1162_profits"";
""1162_profitsTotal"" -> ""1162_profits"";
""1162_constructor"" -> ""1162_constructor"";
}
"
0x6b27bfd273ec79a64a62b4b3a18a89045c2389b1.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_transfer"" [label=""transfer""];
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x461d558429cb87a5faf967a4333d671b7a97c04f.sol,BOBOToken,"contract BOBOToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 295000000000000000000000000; balances[0xEDFfEaB5E58abAF81C62762DF71DC755fd787F6f] = _totalSupply; emit Transfer(address(0), 0xEDFfEaB5E58abAF81C62762DF71DC755fd787F6f, _totalSupply); }",1,"subgraph cluster_543_BOBOToken {
label=""BOBOToken"";
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_constructor"" [label=""constructor""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x651a824c225e60c1901ec6018a685aa38d82f23c.sol,PimmelToken,"contract PimmelToken { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function PimmelToken() { uint initialSupply = 28000000000000000000000000; balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = ; symbol = ; decimals = 18; }",1,"subgraph cluster_334_PimmelToken {
label=""PimmelToken"";
""334_PimmelToken"" [label=""PimmelToken""];
""334_transferFrom"" [label=""transferFrom""];
""334_transfer"" [label=""transfer""];
""334_burn"" [label=""burn""];
""334_approveAndCall"" [label=""approveAndCall""];
""334_burnFrom"" [label=""burnFrom""];
""334__transfer"" [label=""_transfer""];
""334_approve"" [label=""approve""];
""334_approveAndCall"" -> ""334_approve"";
""334_transfer"" -> ""334__transfer"";
""334_transferFrom"" -> ""334__transfer"";
}
"
0xa2dfd314cb3fcf821300a2e518469b6544ad6a84.sol,threeZZZToken,"contract threeZZZToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function threeZZZToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xf42455BDBA7584b614A2F4E8A5e687ffF31fd896] = _totalSupply; Transfer(address(0), 0xf42455BDBA7584b614A2F4E8A5e687ffF31fd896, _totalSupply); }",1,"subgraph cluster_543_threeZZZToken {
label=""threeZZZToken"";
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" [label=""transferFrom""];
""543_balanceOf"" [label=""balanceOf""];
""543_threeZZZToken"" [label=""threeZZZToken""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
}
"
0xed04927a3849fc9db3f3341a17b7d844a6c551a8.sol,CrowdInvestment,"contract CrowdInvestment { uint private restAmountToInvest; uint private maxGasPrice; address private creator; mapping(address => uint) private perUserInvestments; mapping(address => uint) private additionalCaps; uint private limitPerInvestor; function CrowdInvestment(uint totalCap, uint maxGasPriceParam, uint capForEverybody) public { restAmountToInvest = totalCap; creator = msg.sender; maxGasPrice = maxGasPriceParam; limitPerInvestor = capForEverybody; }",1,"subgraph cluster_188_CrowdInvestment {
label=""CrowdInvestment"";
""188_getCap"" [label=""getCap""];
""188_addPersonalCap"" [label=""addPersonalCap""];
""188_addPersonalCaps"" [label=""addPersonalCaps""];
""188_CrowdInvestment"" [label=""CrowdInvestment""];
""188_getTotalCap"" [label=""getTotalCap""];
""188_fallback"" [label=""fallback""];
""188_withdraw"" [label=""withdraw""];
""188_fallback"" -> ""188_getCap"";
}
"
0x0f08bdc02fb681462cb6c73b6b351297692aa6e4.sol,XRUN,"contract XRUN is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; mapping (address => uint256) public limitAccount; event LimitBalance(address target, uint256 balance); event FrozenFunds(address target, bool frozen); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_705_XRUN {
label=""XRUN"";
""705_constructor"" [label=""constructor""];
""705__transfer"" [label=""_transfer""];
""705_buy"" [label=""buy""];
""705_sell"" [label=""sell""];
""705_freezeAccount"" [label=""freezeAccount""];
""705_mintToken"" [label=""mintToken""];
""705_setLimit"" [label=""setLimit""];
""705_setPrices"" [label=""setPrices""];
""705_setLimit"" -> ""705_onlyOwner"";
""705_constructor"" -> ""705_constructor"";
""705_mintToken"" -> ""705_onlyOwner"";
""705_buy"" -> ""705__transfer"";
""705_setPrices"" -> ""705_onlyOwner"";
""705_sell"" -> ""705__transfer"";
""705_freezeAccount"" -> ""705_onlyOwner"";
}
"
0x18373e7b8bd24ecb0af8e9c95548360ef787b781.sol,ShareToken,"contract ShareToken is ERC20Token, WhiteListManager { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 2; address public icoContract; uint256 constant E2 = 10**2; mapping(address => bool) public rewardTokenLocked; bool public mainSaleTokenLocked = true; uint256 public constant TOKEN_SUPPLY_MAINSALE_LIMIT = 1000000000 * E2; uint256 public constant TOKEN_SUPPLY_AIRDROP_LIMIT = 6666666667; uint256 public constant TOKEN_SUPPLY_BOUNTY_LIMIT = 33333333333; uint256 public airDropTokenIssuedTotal; uint256 public bountyTokenIssuedTotal; uint256 public constant TOKEN_SUPPLY_SEED_LIMIT = 500000000 * E2; uint256 public constant TOKEN_SUPPLY_PRESALE_LIMIT = 2500000000 * E2; uint256 public constant TOKEN_SUPPLY_SEED_PRESALE_LIMIT = TOKEN_SUPPLY_SEED_LIMIT + TOKEN_SUPPLY_PRESALE_LIMIT; uint256 public seedAndPresaleTokenIssuedTotal; uint8 private constant PRESALE_EVENT = 0; uint8 private constant MAINSALE_EVENT = 1; uint8 private constant BOUNTY_EVENT = 2; uint8 private constant AIRDROP_EVENT = 3; function ShareToken() public { totalTokenIssued = 0; airDropTokenIssuedTotal = 0; bountyTokenIssuedTotal = 0; seedAndPresaleTokenIssuedTotal = 0; mainSaleTokenLocked = true; }",1,"subgraph cluster_1649_ShareToken {
label=""ShareToken"";
""1649_handlePresaleTokenMany"" [label=""handlePresaleTokenMany""];
""1649_transferFrom"" [label=""transferFrom""];
""1649_totalPreSaleTokenIssued"" [label=""totalPreSaleTokenIssued""];
""1649_rewardBounty"" [label=""rewardBounty""];
""1649_unlockRewardToken"" [label=""unlockRewardToken""];
""1649_totalMainSaleTokenLimit"" [label=""totalMainSaleTokenLimit""];
""1649_rewardAirdrop"" [label=""rewardAirdrop""];
""1649_rewardAirdropMany"" [label=""rewardAirdropMany""];
""1649_rewardBountyMany"" [label=""rewardBountyMany""];
""1649_lockRewardToken"" [label=""lockRewardToken""];
""1649_totalSupply"" [label=""totalSupply""];
""1649_setIcoContract"" [label=""setIcoContract""];
""1649_lockRewardTokenMany"" [label=""lockRewardTokenMany""];
""1649_transfer"" [label=""transfer""];
""1649_isLocked"" [label=""isLocked""];
""1649_ShareToken"" [label=""ShareToken""];
""1649_unlockMainSaleToken"" [label=""unlockMainSaleToken""];
""1649_unlockRewardTokenMany"" [label=""unlockRewardTokenMany""];
""1649_handlePresaleToken"" [label=""handlePresaleToken""];
""1649_lockMainSaleToken"" [label=""lockMainSaleToken""];
""1649_sell"" [label=""sell""];
""1649_totalMainSaleTokenIssued"" [label=""totalMainSaleTokenIssued""];
""1649_lockRewardTokenMany"" -> ""1649_lockRewardToken"";
""1649_transfer"" -> ""1649_transfer"";
""1649_unlockRewardTokenMany"" -> ""1649_unlockRewardToken"";
""1649_lockRewardTokenMany"" -> ""1649_onlyOwner"";
""1649_handlePresaleTokenMany"" -> ""1649_handlePresaleToken"";
""1649_isLocked"" -> ""1649_isWhitelisted"";
""1649_unlockRewardToken"" -> ""1649_onlyOwner"";
""1649_rewardAirdrop"" -> ""1649_onlyOwner"";
""1649_transferFrom"" -> ""1649_isLocked"";
""1649_sell"" -> ""1649_isWhitelisted"";
""1649_lockRewardToken"" -> ""1649_onlyOwner"";
""1649_handlePresaleTokenMany"" -> ""1649_onlyOwner"";
""1649_setIcoContract"" -> ""1649_onlyOwner"";
""1649_rewardBountyMany"" -> ""1649_onlyOwner"";
""1649_unlockMainSaleToken"" -> ""1649_onlyOwner"";
""1649_rewardBountyMany"" -> ""1649_rewardBounty"";
""1649_transfer"" -> ""1649_isLocked"";
""1649_handlePresaleToken"" -> ""1649_onlyOwner"";
""1649_lockMainSaleToken"" -> ""1649_onlyOwner"";
""1649_rewardAirdropMany"" -> ""1649_onlyOwner"";
""1649_transferFrom"" -> ""1649_transferFrom"";
""1649_unlockRewardTokenMany"" -> ""1649_onlyOwner"";
""1649_rewardBounty"" -> ""1649_onlyOwner"";
""1649_rewardAirdropMany"" -> ""1649_rewardAirdrop"";
""1649_handlePresaleToken"" -> ""1649_set"";
}
"
0xb459571c4d5b8119ab76d0a5308106c61f9918c5.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_342_StandardToken {
label=""StandardToken"";
""342_approve"" [label=""approve""];
""342_allowance"" [label=""allowance""];
""342_balanceOf"" [label=""balanceOf""];
""342_transfer"" [label=""transfer""];
""342_transferFrom"" [label=""transferFrom""];
}
"
0x409694d12ab1ee7cf7f45245aec9197644660683.sol,BNB,"contract BNB is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BNB() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 1 weeks; endDate = now + 5 weeks; }",1,"subgraph cluster_609_BNB {
label=""BNB"";
""609_transfer"" [label=""transfer""];
""609_totalSupply"" [label=""totalSupply""];
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_balanceOf"" [label=""balanceOf""];
""609_approve"" [label=""approve""];
""609_allowance"" [label=""allowance""];
""609_BNB"" [label=""BNB""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_transferFrom"" [label=""transferFrom""];
""609_fallback"" [label=""fallback""];
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
""609_fallback"" -> ""609_safeAdd"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_transfer"" -> ""609_safeAdd"";
""609_transferFrom"" -> ""609_safeSub"";
""609_transfer"" -> ""609_safeSub"";
}
"
0x8bbb3375d2401da181711032f658c52252b03275.sol,online_wallet,contract online_wallet { bytes32 keyHash; address owner; bytes32 wallet_id = 0x02df890024de6658a5a323c9ea33e8cd492bd3906a19c9977574634af4215a98; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_online_wallet {
label=""online_wallet"";
""121_fallback"" [label=""fallback""];
""121_setup_key"" [label=""setup_key""];
""121_get_id"" [label=""get_id""];
""121_constructor"" [label=""constructor""];
""121_clear"" [label=""clear""];
""121_withdraw"" [label=""withdraw""];
""121_update_new_hash"" [label=""update_new_hash""];
}
"
0x456c4350eefd17315713b265d8be8b6063a5fab8.sol,Crowdsale,"contract Crowdsale is Pausable, PullPayment { using SafeMath for uint; struct Backer { uint weiReceived; uint coinSent; }",1,"subgraph cluster_1189_Crowdsale {
label=""Crowdsale"";
""1189_setMultisig"" [label=""setMultisig""];
""1189_refund"" [label=""refund""];
""1189_fallback"" [label=""fallback""];
""1189_start"" [label=""start""];
""1189_getRemainCoins"" [label=""getRemainCoins""];
""1189_backSggCoinOwner"" [label=""backSggCoinOwner""];
""1189_finalize"" [label=""finalize""];
""1189_receiveETH"" [label=""receiveETH""];
""1189_bonus"" [label=""bonus""];
""1189_drain"" [label=""drain""];
""1189_Crowdsale"" [label=""Crowdsale""];
""1189_fallback"" -> ""1189_stopInEmergency"";
""1189_fallback"" -> ""1189_receiveETH"";
""1189_start"" -> ""1189_onlyOwner"";
""1189_refund"" -> ""1189_minCapNotReached"";
""1189_refund"" -> ""1189_asyncSend"";
""1189_drain"" -> ""1189_onlyOwner"";
""1189_getRemainCoins"" -> ""1189_bonus"";
""1189_finalize"" -> ""1189_onlyOwner"";
""1189_fallback"" -> ""1189_respectTimeFrame"";
""1189_setMultisig"" -> ""1189_onlyOwner"";
""1189_backSggCoinOwner"" -> ""1189_onlyOwner"";
""1189_receiveETH"" -> ""1189_bonus"";
""1189_getRemainCoins"" -> ""1189_onlyOwner"";
}
"
0x06779e2a75cc5b7ad2c14cf98d88cf2cfcfcc6f1.sol,lucky9io,"contract lucky9io { uint public house_edge = 0; uint public jackpot = 0; uint public total_wins_wei = 0; uint public total_wins_count = 0; uint public total_tickets = 0; bool private game_alive = true; address private owner = 0x5Bf066c70C2B5e02F1C6723E72e82478Fec41201; address[] private entries_addresses; bytes32[] private entries_blockhash; uint private entries_count = 0; modifier onlyOwner() { require(msg.sender == owner, ); _; }",1,"subgraph cluster_350_lucky9io {
label=""lucky9io"";
""350_startGame"" [label=""startGame""];
""350_transferHouseEdge"" [label=""transferHouseEdge""];
""350_getBalance"" [label=""getBalance""];
""350_stopGame"" [label=""stopGame""];
""350_fallback"" [label=""fallback""];
""350_pickWinners"" [label=""pickWinners""];
""350_getEntriesCount"" [label=""getEntriesCount""];
""350_pickWinners"" -> ""350_onlyOwner"";
""350_getEntriesCount"" -> ""350_onlyOwner"";
""350_stopGame"" -> ""350_onlyOwner"";
""350_startGame"" -> ""350_onlyOwner"";
""350_transferHouseEdge"" -> ""350_onlyOwner"";
}
"
0x17c8d8b7659141273a1c2223030c89b96713a44a.sol,XPS,"contract XPS { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function XPS( ) public { totalSupply = 20000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_XPS {
label=""XPS"";
""355_approveAndCall"" [label=""approveAndCall""];
""355_burn"" [label=""burn""];
""355_approve"" [label=""approve""];
""355_transfer"" [label=""transfer""];
""355_burnFrom"" [label=""burnFrom""];
""355_XPS"" [label=""XPS""];
""355_transferFrom"" [label=""transferFrom""];
""355__transfer"" [label=""_transfer""];
""355_approveAndCall"" -> ""355_approve"";
""355_transfer"" -> ""355__transfer"";
""355_transferFrom"" -> ""355__transfer"";
}
"
0x704079e823e42a936bbaac5163434c2515473836.sol,CONUNDRUM,"contract CONUNDRUM { string public question; address questionSender; bytes32 responseHash; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_CONUNDRUM {
label=""CONUNDRUM"";
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_StopGame"" [label=""StopGame""];
""118_NewQuestion"" [label=""NewQuestion""];
}
"
0xd4d8c546549719f0e79a0b11d624a52859c111d7.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 9; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_approve"" [label=""approve""];
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0xee522a9bbe2507546aec572cea7be0f250cba0cb.sol,CentaToken,"contract CentaToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CentaToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xFa064973Ad2EF28Ce8e3a306c36CB57cBb9A1d82] = _totalSupply; Transfer(address(0), 0xFa064973Ad2EF28Ce8e3a306c36CB57cBb9A1d82, _totalSupply); }",1,"subgraph cluster_543_CentaToken {
label=""CentaToken"";
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_CentaToken"" [label=""CentaToken""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x3ac96bbe8b60d715fd818b3fe242edf9def20571.sol,MyBoToken,"contract MyBoToken is owned, token { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); function MyBoToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}",1,"subgraph cluster_652_MyBoToken {
label=""MyBoToken"";
""652_sell"" [label=""sell""];
""652_MyBoToken"" [label=""MyBoToken""];
""652_transfer"" [label=""transfer""];
""652_buy"" [label=""buy""];
""652_freezeAccount"" [label=""freezeAccount""];
""652_mintToken"" [label=""mintToken""];
""652_burn"" [label=""burn""];
""652_setPrices"" [label=""setPrices""];
""652_transferFrom"" [label=""transferFrom""];
""652_freezeAccount"" -> ""652_onlyOwner"";
""652_MyBoToken"" -> ""652_token"";
""652_mintToken"" -> ""652_onlyOwner"";
""652_burn"" -> ""652_onlyOwner"";
""652_setPrices"" -> ""652_onlyOwner"";
}
"
0xdca82e4dfbce4442b19a85df47fd64aeaaf55d9f.sol,RouletteRules,contract RouletteRules { uint8[5809] payoutTable; address developer; constructor() public { developer = msg.sender; },1,"subgraph cluster_2753_RouletteRules {
label=""RouletteRules"";
""2753_getTotalBetAmount"" [label=""getTotalBetAmount""];
""2753_constructor"" [label=""constructor""];
""2753_getBetResult"" [label=""getBetResult""];
""2753_initPayoutTable"" [label=""initPayoutTable""];
}
"
0x089b85fa15f72c1088cbbef23a49db80b91dd521.sol,BlockEstateToken,"contract BlockEstateToken { string public version = ; string public name; string public symbol; uint8 public decimals; address public owner; uint256 public _totalSupply; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowances; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Burn(address indexed from, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function BlockEstateToken() public { balances[msg.sender] = 10000000000000000; _totalSupply = 10000000000000000; name = ; symbol = ; decimals = 8; owner = msg.sender; }",1,"subgraph cluster_410_BlockEstateToken {
label=""BlockEstateToken"";
""410_allowance"" [label=""allowance""];
""410_approve"" [label=""approve""];
""410_balanceOf"" [label=""balanceOf""];
""410_approveAndCall"" [label=""approveAndCall""];
""410_transferFrom"" [label=""transferFrom""];
""410_transfer"" [label=""transfer""];
""410_BlockEstateToken"" [label=""BlockEstateToken""];
""410_burnFrom"" [label=""burnFrom""];
""410_totalSupply"" [label=""totalSupply""];
""410_burn"" [label=""burn""];
""410_approveAndCall"" -> ""410_approve"";
}
"
0x6cb9c5abf310b42893adff0b1f38322eea109c98.sol,DelightToken,"contract DelightToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function DelightToken() public { symbol = ; name = ; decimals = 8; _totalSupply = 1500000000000000000; balances[0xbBFe11C614d8089C621E843eDac04F43F6767469] = _totalSupply; Transfer(address(0), 0xbBFe11C614d8089C621E843eDac04F43F6767469, _totalSupply); }",1,"subgraph cluster_543_DelightToken {
label=""DelightToken"";
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_DelightToken"" [label=""DelightToken""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xdbc36b40a83c86c1b3c24c55a8c0ab32419ae0c0.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_TokenERC20"" [label=""TokenERC20""];
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x2a8cef60776d931eb1200aa2a9877eb091cb34a7.sol,TTC,"contract TTC { event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address admin; mapping (address => bool) admin_list; function TTC( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { admin = msg.sender; admin_list[admin] = true; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_331_TTC {
label=""TTC"";
""331_transfer"" [label=""transfer""];
""331_TTC"" [label=""TTC""];
""331_admin_setAdmin"" [label=""admin_setAdmin""];
""331_approve"" [label=""approve""];
""331_admin_transfer"" [label=""admin_transfer""];
""331_allowance"" [label=""allowance""];
""331_transferFrom"" [label=""transferFrom""];
""331_balanceOf"" [label=""balanceOf""];
}
"
0x1c3db3898c05d77bd742a219f8f488aac0cb013b.sol,TokenERC20,"contract TokenERC20 { string public name = ; string public symbol= ; uint8 public decimals = 18; uint256 public totalSupply = 500000000 * 10 ** 18 ; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( ) public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_284_TokenERC20 {
label=""TokenERC20"";
""284_transfer"" [label=""transfer""];
""284_burn"" [label=""burn""];
""284_approveAndCall"" [label=""approveAndCall""];
""284_TokenERC20"" [label=""TokenERC20""];
""284_approve"" [label=""approve""];
""284__transfer"" [label=""_transfer""];
""284_transfer"" -> ""284__transfer"";
""284_approveAndCall"" -> ""284_approve"";
}
"
0xefbfc3f373c9cc5c0375403177d71bcc387d3597.sol,ETH_GIFT,contract ETH_GIFT { function GetGift(bytes pass) external payable { if(hashPass == keccak256(pass)) { msg.sender.transfer(this.balance); },1,"subgraph cluster_134_ETH_GIFT {
label=""ETH_GIFT"";
""134_GetGift"" [label=""GetGift""];
""134_PassHasBeenSet"" [label=""PassHasBeenSet""];
""134_fallback"" [label=""fallback""];
""134_SetPass"" [label=""SetPass""];
""134_GetHash"" [label=""GetHash""];
""134_SetReciver"" [label=""SetReciver""];
}
"
0x58849d4a250bbb9d47d6cd93c7ab39ab1e06aeda.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_300_StandardToken {
label=""StandardToken"";
""300_transferFrom"" [label=""transferFrom""];
""300_transfer"" [label=""transfer""];
""300_allowance"" [label=""allowance""];
""300_balanceOf"" [label=""balanceOf""];
""300_approve"" [label=""approve""];
}
"
0x1df6eadc2e1e9f4cbb2d94369210d8f1b790ee19.sol,PinnacleToken,contract PinnacleToken { uint private constant _totalSupply = 100000000000000000000000000; using SafeMath for uint256; string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; function PinnacleToken() { balances[msg.sender] = _totalSupply; },1,"subgraph cluster_321_PinnacleToken {
label=""PinnacleToken"";
""321_transferFrom"" [label=""transferFrom""];
""321_totalSupply"" [label=""totalSupply""];
""321_transfer"" [label=""transfer""];
""321_balanceOf"" [label=""balanceOf""];
""321_PinnacleToken"" [label=""PinnacleToken""];
""321_allowance"" [label=""allowance""];
""321_approve"" [label=""approve""];
}
"
0xc08dcf2fa37b87a89ac7f0fdcb4aebda378dea29.sol,MITToken,contract MITToken is SafeMath{ string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping(uint => Holder) public lockholders; uint public lockholderNumber; struct Holder { address eth_address; uint exp_time; },1,"subgraph cluster_658_MITToken {
label=""MITToken"";
""658_validHolder"" [label=""validHolder""];
""658_transferFrom"" [label=""transferFrom""];
""658__transfer"" [label=""_transfer""];
""658_constructor"" [label=""constructor""];
""658_approve"" [label=""approve""];
""658__unlockToken"" [label=""_unlockToken""];
""658_burn"" [label=""burn""];
""658_burnFrom"" [label=""burnFrom""];
""658_approveAndCall"" [label=""approveAndCall""];
""658__lockToken"" [label=""_lockToken""];
""658_transfer"" [label=""transfer""];
""658__transfer"" -> ""658_safeAdd"";
""658_approveAndCall"" -> ""658_approve"";
""658__transfer"" -> ""658_safeSub"";
""658_transferFrom"" -> ""658__transfer"";
""658_transfer"" -> ""658__transfer"";
""658__transfer"" -> ""658_validHolder"";
}
"
0x8ce188196892455fb131dea104bc3ba4e8516654.sol,VOCC_I026_20181211,"contract VOCC_I026_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I026_20181211 {
label=""VOCC_I026_20181211"";
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
}
"
0xf2d3bee00851fdf205f4fe825fe89d2abff88231.sol,WOB,"contract WOB { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function WOB( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_WOB {
label=""WOB"";
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" [label=""transfer""];
""361_WOB"" [label=""WOB""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x281043fa2101009dc85d98e0fcd538d299f6eb1c.sol,TKCC,"contract TKCC { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TKCC( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TKCC {
label=""TKCC"";
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_burn"" [label=""burn""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361_TKCC"" [label=""TKCC""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x6e6a00012c2005ca5c75b3ad58baac1a7a8e241f.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_balanceOf"" [label=""balanceOf""];
""256_allowance"" [label=""allowance""];
""256_transferFrom"" [label=""transferFrom""];
""256_transfer"" [label=""transfer""];
}
"
0x33555a3130fc40082a566005714eeec369e62fc8.sol,Dividends,contract Dividends { string public name = ; string public symbol = ; uint256 public decimals = 18; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 10000000* (10 ** uint256(decimals)); uint256 SellFee = 1250; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_1537_Dividends {
label=""Dividends"";
""1537_CancelOrder"" [label=""CancelOrder""];
""1537_setName"" [label=""setName""];
""1537_setFee"" [label=""setFee""];
""1537_fallback"" [label=""fallback""];
""1537_transfer"" [label=""transfer""];
""1537_mul"" [label=""mul""];
""1537_sub"" [label=""sub""];
""1537__cancelOrder"" [label=""_cancelOrder""];
""1537_ViewSellOrder"" [label=""ViewSellOrder""];
""1537_add"" [label=""add""];
""1537_Dividends"" [label=""Dividends""];
""1537_div"" [label=""div""];
""1537__withdraw"" [label=""_withdraw""];
""1537_PlaceSellOrder"" [label=""PlaceSellOrder""];
""1537_setSymbol"" [label=""setSymbol""];
""1537_approve"" [label=""approve""];
""1537__forceTransfer"" [label=""_forceTransfer""];
""1537_Buy"" [label=""Buy""];
""1537_GetDivs"" [label=""GetDivs""];
""1537_newOwner"" [label=""newOwner""];
""1537_Withdraw"" [label=""Withdraw""];
""1537_transferFrom"" [label=""transferFrom""];
""1537_newOwner"" -> ""1537_validAddress"";
""1537_approve"" -> ""1537_validAddress"";
""1537__forceTransfer"" -> ""1537_validAddress"";
""1537_transferFrom"" -> ""1537_sub"";
""1537_GetDivs"" -> ""1537_sub"";
""1537_Withdraw"" -> ""1537__withdraw"";
""1537__withdraw"" -> ""1537_sub"";
""1537_Buy"" -> ""1537_sub"";
""1537__withdraw"" -> ""1537_add"";
""1537_transfer"" -> ""1537_validAddress"";
""1537_setFee"" -> ""1537_isOwner"";
""1537_transfer"" -> ""1537_sub"";
""1537_transfer"" -> ""1537__withdraw"";
""1537_transferFrom"" -> ""1537_CancelOrder"";
""1537_Buy"" -> ""1537_add"";
""1537_Buy"" -> ""1537__forceTransfer"";
""1537_setSymbol"" -> ""1537_isOwner"";
""1537_transferFrom"" -> ""1537__withdraw"";
""1537_Buy"" -> ""1537__withdraw"";
""1537_setName"" -> ""1537_isOwner"";
""1537_transferFrom"" -> ""1537_validAddress"";
""1537_CancelOrder"" -> ""1537__cancelOrder"";
""1537_Buy"" -> ""1537_mul"";
""1537_newOwner"" -> ""1537_isOwner"";
}
"
0x414b23b9deb0da531384c5db2ac5a99ee2e07a57.sol,TPCToken,"contract TPCToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TPCToken() public { totalSupply = 900000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_307_TPCToken {
label=""TPCToken"";
""307_TPCToken"" [label=""TPCToken""];
""307_transferFrom"" [label=""transferFrom""];
""307_approve"" [label=""approve""];
""307__transfer"" [label=""_transfer""];
""307_transfer"" [label=""transfer""];
""307_burn"" [label=""burn""];
""307_burnFrom"" [label=""burnFrom""];
""307_transferFrom"" -> ""307__transfer"";
""307_transfer"" -> ""307__transfer"";
}
"
0x5438b0938fb88a979032f45b87d2d1aeffe5cc28.sol,Gifto,contract Gifto is ERC20Interface { uint public constant decimals = 5; string public constant symbol = ; string public constant name = ; bool public _selling = false; uint public _totalSupply = 10 ** 14; uint public _originalBuyPrice = 10 ** 10; address public owner; mapping(address => uint256) balances; mapping(address => bool) approvedInvestorList; mapping(address => uint256) deposit; address[] buyers; uint _icoPercent = 10; uint public _icoSupply = _totalSupply * _icoPercent / 100; uint public _minimumBuy = 10 ** 17; uint public _maximumBuy = 30 * 10 ** 18; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_865_Gifto {
label=""Gifto"";
""865_isSellingNow"" [label=""isSellingNow""];
""865_filterBuyers"" [label=""filterBuyers""];
""865_returnETHforNormalBuyers"" [label=""returnETHforNormalBuyers""];
""865_getTotalDeposit"" [label=""getTotalDeposit""];
""865_withdraw"" [label=""withdraw""];
""865_isApprovedInvestor"" [label=""isApprovedInvestor""];
""865_getInvestorBuyers"" [label=""getInvestorBuyers""];
""865_removeInvestorList"" [label=""removeInvestorList""];
""865_turnOnSale"" [label=""turnOnSale""];
""865_setIcoPercent"" [label=""setIcoPercent""];
""865_setMaximumBuy"" [label=""setMaximumBuy""];
""865_transfer"" [label=""transfer""];
""865_getNormalBuyers"" [label=""getNormalBuyers""];
""865_totalSupply"" [label=""totalSupply""];
""865_buy"" [label=""buy""];
""865_setMinimumBuy"" [label=""setMinimumBuy""];
""865_deliveryToken"" [label=""deliveryToken""];
""865_fallback"" [label=""fallback""];
""865_getDeposit"" [label=""getDeposit""];
""865_turnOffSale"" [label=""turnOffSale""];
""865_addInvestorList"" [label=""addInvestorList""];
""865_balanceOf"" [label=""balanceOf""];
""865_setBuyPrice"" [label=""setBuyPrice""];
""865_Gifto"" [label=""Gifto""];
""865_fallback"" -> ""865_validValue"";
""865_turnOnSale"" -> ""865_onlyOwner"";
""865_returnETHforNormalBuyers"" -> ""865_onlyOwner"";
""865_setBuyPrice"" -> ""865_onlyOwner"";
""865_withdraw"" -> ""865_onlyOwner"";
""865_setMinimumBuy"" -> ""865_onlyOwner"";
""865_buy"" -> ""865_validOriginalBuyPrice"";
""865_buy"" -> ""865_onSale"";
""865_buy"" -> ""865_onlyNotOwner"";
""865_getNormalBuyers"" -> ""865_filterBuyers"";
""865_setIcoPercent"" -> ""865_onlyOwner"";
""865_removeInvestorList"" -> ""865_onlyOwner"";
""865_getInvestorBuyers"" -> ""865_filterBuyers"";
""865_deliveryToken"" -> ""865_onlyOwner"";
""865_turnOffSale"" -> ""865_onlyOwner"";
""865_addInvestorList"" -> ""865_onlyOwner"";
""865_buy"" -> ""865_validInvestor"";
""865_setMaximumBuy"" -> ""865_onlyOwner"";
""865_deliveryToken"" -> ""865_validOriginalBuyPrice"";
}
"
0x02b3c88b805f1c6982e38ea1d40a1d83f159c3d4.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_approve"" [label=""approve""];
""396_transferFrom"" [label=""transferFrom""];
""396_burnFrom"" [label=""burnFrom""];
""396_burn"" [label=""burn""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_transfer"" [label=""transfer""];
""396__transfer"" [label=""_transfer""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_transfer"" -> ""396__transfer"";
""396_transferFrom"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
}
"
0xa25d9e3c177a45265349d4bd37b23ec2669dea5b.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_transfer"" [label=""transfer""];
""396_burnFrom"" [label=""burnFrom""];
""396_transferFrom"" [label=""transferFrom""];
""396_approve"" [label=""approve""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_burn"" [label=""burn""];
""396__transfer"" [label=""_transfer""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_transferFrom"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transfer"" -> ""396__transfer"";
}
"
0x0d09b8d474e312eda0996cb420aa9f5c6b2c1993.sol,ProfytPro,contract ProfytPro is Owned{ struct User{ string username; uint balance; },1,"subgraph cluster_420_ProfytPro {
label=""ProfytPro"";
""420_setTotalSupply"" [label=""setTotalSupply""];
""420_setDecimals"" [label=""setDecimals""];
""420_ProfytPro"" [label=""ProfytPro""];
""420_setReserve"" [label=""setReserve""];
""420_getUser"" [label=""getUser""];
""420_transfer"" [label=""transfer""];
""420_getUsers"" [label=""getUsers""];
""420_buy"" [label=""buy""];
""420_sell"" [label=""sell""];
""420_setSymbol"" [label=""setSymbol""];
""420_setPrices"" [label=""setPrices""];
""420_transferFrom"" [label=""transferFrom""];
""420_setUser"" [label=""setUser""];
""420_countUsers"" [label=""countUsers""];
""420_setSymbol"" -> ""420_onlyOwner"";
""420_transfer"" -> ""420_onlyOwner"";
""420_sell"" -> ""420_transferFrom"";
""420_buy"" -> ""420_transfer"";
""420_setTotalSupply"" -> ""420_onlyOwner"";
""420_setReserve"" -> ""420_onlyOwner"";
""420_setPrices"" -> ""420_onlyOwner"";
""420_setDecimals"" -> ""420_onlyOwner"";
}
"
0xc0ca7bd6f54341bb871f6106acde6ec4d65c1f91.sol,SarahCoin,"contract SarahCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function SarahCoin() public { symbol = ; name = ; decimals = 0; _totalSupply = 1000; balances[0xC027b267C1A801497B1D234bfF336d5937C2bF48] = _totalSupply; Transfer(address(0), 0xC027b267C1A801497B1D234bfF336d5937C2bF48, _totalSupply); }",1,"subgraph cluster_543_SarahCoin {
label=""SarahCoin"";
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_SarahCoin"" [label=""SarahCoin""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x696be206174bea69e7a00b4deb1c6fddfa4786c9.sol,RAZEN,"contract RAZEN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function RAZEN() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xd8fa9C65623129Fa4abAf44B7e21655d1eF835ce] = _totalSupply; Transfer(address(0), 0xd8fa9C65623129Fa4abAf44B7e21655d1eF835ce, _totalSupply); }",1,"subgraph cluster_543_RAZEN {
label=""RAZEN"";
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_RAZEN"" [label=""RAZEN""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x7996f859a313aab6458558c648e2f1f4acbf5f93.sol,HealthAidToken,contract HealthAidToken is ERC20 { address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalSupply = 25000000000 * 100000000; function name() public constant returns (string) { return ; },1,"subgraph cluster_553_HealthAidToken {
label=""HealthAidToken"";
""553_transfer"" [label=""transfer""];
""553_approve"" [label=""approve""];
""553_transferFrom"" [label=""transferFrom""];
""553_HealthAidToken"" [label=""HealthAidToken""];
""553_finishDistribution"" [label=""finishDistribution""];
""553_decimals"" [label=""decimals""];
""553_transferOwnership"" [label=""transferOwnership""];
""553_balanceOf"" [label=""balanceOf""];
""553_distributeHAT"" [label=""distributeHAT""];
""553_getEthBalance"" [label=""getEthBalance""];
""553_name"" [label=""name""];
""553_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""553_symbol"" [label=""symbol""];
""553_allowance"" [label=""allowance""];
""553_distributeHAT"" -> ""553_onlyOwner"";
""553_distributeHAT"" -> ""553_getEthBalance"";
""553_transferOwnership"" -> ""553_onlyOwner"";
""553_transferFrom"" -> ""553_onlyPayloadSize"";
""553_transfer"" -> ""553_onlyPayloadSize"";
""553_finishDistribution"" -> ""553_onlyOwner"";
""553_distributeHAT"" -> ""553_canDistr"";
}
"
0x5ab6aad76a702591724b7788b0fbea6292638561.sol,CIC,"contract CIC is owned { address public deployer; string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor(uint256 initialSupply, string tokenName, string tokenSymbol, address centralMinter) public { if(centralMinter != 0 ) owner = centralMinter; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; deployer = msg.sender; }",1,"subgraph cluster_484_CIC {
label=""CIC"";
""484__transfer"" [label=""_transfer""];
""484_transfer"" [label=""transfer""];
""484_approve"" [label=""approve""];
""484_approveAndCall"" [label=""approveAndCall""];
""484_burn"" [label=""burn""];
""484_constructor"" [label=""constructor""];
""484_transferFrom"" [label=""transferFrom""];
""484_mintToken"" [label=""mintToken""];
""484_burnFrom"" [label=""burnFrom""];
""484_approveAndCall"" -> ""484_approve"";
""484_mintToken"" -> ""484_onlyOwner"";
""484_transferFrom"" -> ""484__transfer"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0xd5dc75c85159e95f0bd8b5196f4f096a6b7fea1f.sol,BMICoin,"contract BMICoin is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; uint256 public constant UNIT = 10 ** decimals; address public companyWallet; address public backendWallet; uint256 public maxSupply = 3000000 * UNIT; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); modifier onlyBackend() { require(msg.sender == backendWallet); _; }",1,"subgraph cluster_748_BMICoin {
label=""BMICoin"";
""748_mint"" [label=""mint""];
""748_fallback"" [label=""fallback""];
""748_sendBonus"" [label=""sendBonus""];
""748_setBackendWallet"" [label=""setBackendWallet""];
""748_BMICoin"" [label=""BMICoin""];
""748_sendBonus"" -> ""748_onlyBackend"";
""748_setBackendWallet"" -> ""748_onlyOwner"";
""748_mint"" -> ""748_onlyBackend"";
}
"
0x068e6d2c5b82049dceb93c0a938ef366cf97b2e9.sol,Distribute,contract Distribute is owned { token public tokenReward; constructor() public { tokenReward = token(0x8432A5A61Cf1CC5ca5Bc5aB919d0665427fb513c); },1,"subgraph cluster_183_Distribute {
label=""Distribute"";
""183_airdrop"" [label=""airdrop""];
""183_changeTokenAddress"" [label=""changeTokenAddress""];
""183_bounty"" [label=""bounty""];
""183_constructor"" [label=""constructor""];
""183_bounty"" -> ""183_onlyOwner"";
""183_changeTokenAddress"" -> ""183_onlyOwner"";
""183_airdrop"" -> ""183_onlyOwner"";
}
"
0x25caf15e1cc43e7bfa9853a68de463bfb0d27021.sol,IndividualLockableToken,"contract IndividualLockableToken is PausableToken{ using SafeMath for uint256; event LockTimeSetted(address indexed holder, uint256 old_release_time, uint256 new_release_time); event Locked(address indexed holder, uint256 locked_balance_change, uint256 total_locked_balance, uint256 release_time); struct lockState { uint256 locked_balance; uint256 release_time; }",1,"subgraph cluster_1361_IndividualLockableToken {
label=""IndividualLockableToken"";
""1361_increaseApproval"" [label=""increaseApproval""];
""1361_setReleaseTime"" [label=""setReleaseTime""];
""1361_getReleaseTime"" [label=""getReleaseTime""];
""1361_increaseLockBalance"" [label=""increaseLockBalance""];
""1361_clearLock"" [label=""clearLock""];
""1361_transferFrom"" [label=""transferFrom""];
""1361_approve"" [label=""approve""];
""1361_transfer"" [label=""transfer""];
""1361_decreaseApproval"" [label=""decreaseApproval""];
""1361_decreaseLockBalance"" [label=""decreaseLockBalance""];
""1361_getFreeBalance"" [label=""getFreeBalance""];
""1361_clearReleaseTime"" [label=""clearReleaseTime""];
""1361_getLockedBalance"" [label=""getLockedBalance""];
""1361_increaseApproval"" -> ""1361_increaseApproval"";
""1361_approve"" -> ""1361_approve"";
""1361_setReleaseTime"" -> ""1361_onlyOwner"";
""1361_decreaseLockBalance"" -> ""1361_onlyOwner"";
""1361_transfer"" -> ""1361_getFreeBalance"";
""1361_transferFrom"" -> ""1361_transferFrom"";
""1361_approve"" -> ""1361_getFreeBalance"";
""1361_increaseApproval"" -> ""1361_getFreeBalance"";
""1361_transfer"" -> ""1361_transfer"";
""1361_decreaseApproval"" -> ""1361_getFreeBalance"";
""1361_decreaseApproval"" -> ""1361_decreaseApproval"";
""1361_transferFrom"" -> ""1361_getFreeBalance"";
""1361_clearReleaseTime"" -> ""1361_onlyOwner"";
""1361_clearLock"" -> ""1361_onlyOwner"";
""1361_increaseLockBalance"" -> ""1361_onlyOwner"";
}
"
0xeec58a6a1584145106693c24115b7efebf9de896.sol,BlockchainTechnologyFundingToken,"contract BlockchainTechnologyFundingToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000; balances[0x2a89115A6160987088CDA53b72f9751005A91EfE] = _totalSupply; emit Transfer(address(0), 0x2a89115A6160987088CDA53b72f9751005A91EfE, _totalSupply); }",1,"subgraph cluster_543_BlockchainTechnologyFundingToken {
label=""BlockchainTechnologyFundingToken"";
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_constructor"" [label=""constructor""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x7192bb75777dab47ef6fbf6f6c0e4bcbb2294f38.sol,ClockAuctionBase,contract ClockAuctionBase { struct Auction { address seller; uint128 startingPrice; uint128 endingPrice; uint64 duration; uint64 startedAt; },1,"subgraph cluster_449_ClockAuctionBase {
label=""ClockAuctionBase"";
""449__addAuction"" [label=""_addAuction""];
""449__computeCut"" [label=""_computeCut""];
""449__owns"" [label=""_owns""];
""449_fallback"" [label=""fallback""];
""449__isOnAuction"" [label=""_isOnAuction""];
""449__computeCurrentPrice"" [label=""_computeCurrentPrice""];
""449__bid"" [label=""_bid""];
""449__escrow"" [label=""_escrow""];
""449__currentPrice"" [label=""_currentPrice""];
""449__transfer"" [label=""_transfer""];
""449__removeAuction"" [label=""_removeAuction""];
""449__cancelAuction"" [label=""_cancelAuction""];
""449__cancelAuction"" -> ""449__transfer"";
""449__currentPrice"" -> ""449__computeCurrentPrice"";
""449__bid"" -> ""449__removeAuction"";
""449__bid"" -> ""449__computeCut"";
""449__bid"" -> ""449__isOnAuction"";
""449__bid"" -> ""449__currentPrice"";
""449__cancelAuction"" -> ""449__removeAuction"";
}
"
0xc398fb8a6c71a7b130043bf5a3f05d9d51c2cac8.sol,CHAD,"contract CHAD is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CHAD() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x8F210dbB8FADa47bc090d7923E935267BF53160D] = _totalSupply; Transfer(address(0), 0x8F210dbB8FADa47bc090d7923E935267BF53160D, _totalSupply); }",1,"subgraph cluster_543_CHAD {
label=""CHAD"";
""543_fallback"" [label=""fallback""];
""543_CHAD"" [label=""CHAD""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x6d8811059eb8f0509acec06648ea95b3ae01be72.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_384_TokenERC20 {
label=""TokenERC20"";
""384_approveAndCall"" [label=""approveAndCall""];
""384__transfer"" [label=""_transfer""];
""384_burn"" [label=""burn""];
""384_approve"" [label=""approve""];
""384_constructor"" [label=""constructor""];
""384_burnFrom"" [label=""burnFrom""];
""384_transferFrom"" [label=""transferFrom""];
""384_transfer"" [label=""transfer""];
""384_transfer"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
""384_transferFrom"" -> ""384__transfer"";
}
"
0x0e496fe351e9a2eabcc76d57b1248e10394d60be.sol,yiDaoGame,"contract yiDaoGame { string public name = ; string public symbol = ; uint256 public decimals = 18; uint256 public totalSupply = 200*1000*1000*10**decimals; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function yiDaoGame( ) public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_348_yiDaoGame {
label=""yiDaoGame"";
""348_transferFrom"" [label=""transferFrom""];
""348_burnFrom"" [label=""burnFrom""];
""348_burn"" [label=""burn""];
""348__transfer"" [label=""_transfer""];
""348_approve"" [label=""approve""];
""348_approveAndCall"" [label=""approveAndCall""];
""348_yiDaoGame"" [label=""yiDaoGame""];
""348_transfer"" [label=""transfer""];
""348_transfer"" -> ""348__transfer"";
""348_approveAndCall"" -> ""348_approve"";
""348_transferFrom"" -> ""348__transfer"";
}
"
0x6db92e635ba5d2834fff3db03b6be80d8aa28d5a.sol,TokenBaseAsset,contract TokenBaseAsset { address mOwner = msg.sender; string public mCompany; mapping(string => string) mTokens; modifier isOwner() { require(msg.sender == mOwner); _; },1,"subgraph cluster_85_TokenBaseAsset {
label=""TokenBaseAsset"";
""85_TokenBaseAsset"" [label=""TokenBaseAsset""];
""85_removeToken"" [label=""removeToken""];
""85_getToken"" [label=""getToken""];
""85_addToken"" [label=""addToken""];
}
"
0x1d8ebb2f0345874e9193388ef3a2f063eaa71edc.sol,QuadCoin,"contract QuadCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function QuadCoin() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000000000; balances[0x8E38343A2fFcC3dC60b623128E506E1DF5713b62] = _totalSupply; Transfer(address(0), 0x8E38343A2fFcC3dC60b623128E506E1DF5713b62, _totalSupply); }",1,"subgraph cluster_543_QuadCoin {
label=""QuadCoin"";
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_QuadCoin"" [label=""QuadCoin""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x4027c7262554ba72ccc3e346c6b71794299d3b99.sol,CWT,"contract CWT { string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function CWT( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_CWT {
label=""CWT"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_CWT"" [label=""CWT""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_approve"" [label=""approve""];
""361_transferFrom"" [label=""transferFrom""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0x40489719e489782959486a04b765e1e93e5b221a.sol,SGEToken,"contract SGEToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function SGEToken() public { totalSupply = 100000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_307_SGEToken {
label=""SGEToken"";
""307_SGEToken"" [label=""SGEToken""];
""307_approve"" [label=""approve""];
""307_burnFrom"" [label=""burnFrom""];
""307__transfer"" [label=""_transfer""];
""307_transfer"" [label=""transfer""];
""307_transferFrom"" [label=""transferFrom""];
""307_burn"" [label=""burn""];
""307_transfer"" -> ""307__transfer"";
""307_transferFrom"" -> ""307__transfer"";
}
"
0x31a5f35f32756fe35d39bafe85607d93185b23f2.sol,GNNM,"contract GNNM { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function GNNM( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_GNNM {
label=""GNNM"";
""380_transfer"" [label=""transfer""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_transferFrom"" [label=""transferFrom""];
""380__transfer"" [label=""_transfer""];
""380_burnFrom"" [label=""burnFrom""];
""380_GNNM"" [label=""GNNM""];
""380_burn"" [label=""burn""];
""380_transferFrom"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
}
"
0x8d46facfb889740a345755e624942257dc87b5ac.sol,Token,"contract Token is Owner, Mortal { using SafeMath for uint256; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; struct Fund{ uint amount; uint unlockStartTime; uint unlockInterval; uint unlockPercent; bool isValue; }",1,"subgraph cluster_1017_UpgradeableToken {
label=""UpgradeableToken"";
""1017_fallback"" [label=""fallback""];
""1017_setMigrationAgent"" [label=""setMigrationAgent""];
""1017_migrate"" [label=""migrate""];
""1017_setMigrationAgent"" -> ""1017_onlyOwner"";
""1017_fallback"" -> ""1017_migrate"";
}
"
0x7157cf5f3f57ee59d74b905175134b8a7763b065.sol,PeaceChainToken,"contract PeaceChainToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function PeaceChainToken ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_379_PeaceChainToken {
label=""PeaceChainToken"";
""379_burn"" [label=""burn""];
""379_transfer"" [label=""transfer""];
""379_burnFrom"" [label=""burnFrom""];
""379__transfer"" [label=""_transfer""];
""379_approve"" [label=""approve""];
""379_approveAndCall"" [label=""approveAndCall""];
""379_PeaceChainToken"" [label=""PeaceChainToken""];
""379_transferFrom"" [label=""transferFrom""];
""379_approveAndCall"" -> ""379_approve"";
""379_transfer"" -> ""379__transfer"";
""379_transferFrom"" -> ""379__transfer"";
}
"
0x1afafc35b364595f06e89a0429c5762452eb7ffd.sol,BasicToken,"contract BasicToken is ERC20Basic, Pausable { using SafeMath for uint256; mapping(address => uint256) freeBalances; mapping(address => uint256) frozenBalances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; }",1,"subgraph cluster_423_BasicToken {
label=""BasicToken"";
""423_transfer"" [label=""transfer""];
""423_totalSupply"" [label=""totalSupply""];
""423_frozenBalanceOf"" [label=""frozenBalanceOf""];
""423_balanceOf"" [label=""balanceOf""];
""423_freeBalanceOf"" [label=""freeBalanceOf""];
}
"
0x5c65a8e333e5b0a932704bee2f28fdcc49d1e837.sol,JawazToken,"contract JawazToken { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function JawazToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_JawazToken {
label=""JawazToken"";
""361_JawazToken"" [label=""JawazToken""];
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" [label=""transfer""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0xece73b9f0e0a3d7f33f79fd1d77cb344288b9966.sol,RVG,"contract RVG is owned, StdToken { string public name = ; string public symbol = ; string public website = ; uint public decimals = 18; uint256 public totalSupplied; uint256 public totalBurned; constructor(uint256 _totalSupply) public { supply = _totalSupply * (1 ether / 1 wei); totalBurned = 0; totalSupplied = 0; balances[address(this)] = supply; }",1,"subgraph cluster_526_RVG {
label=""RVG"";
""526_burn"" [label=""burn""];
""526_transferTo"" [label=""transferTo""];
""526_burnByValue"" [label=""burnByValue""];
""526_constructor"" [label=""constructor""];
""526_transferTo"" -> ""526_onlyOwner"";
""526_burnByValue"" -> ""526__burn"";
""526_burn"" -> ""526_onlyOwner"";
""526_transferTo"" -> ""526__transfer"";
""526_burnByValue"" -> ""526_onlyOwner"";
""526_burn"" -> ""526__burn"";
}
"
0xeefb40cd8224c2986f391b62b206c7a018885517.sol,touristoken,"contract touristoken { string public name; string public symbol; uint8 public decimals = 0; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = 7000000000; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_touristoken {
label=""touristoken"";
""355_transferFrom"" [label=""transferFrom""];
""355_approveAndCall"" [label=""approveAndCall""];
""355_transfer"" [label=""transfer""];
""355__transfer"" [label=""_transfer""];
""355_approve"" [label=""approve""];
""355_burn"" [label=""burn""];
""355_TokenERC20"" [label=""TokenERC20""];
""355_burnFrom"" [label=""burnFrom""];
""355_approveAndCall"" -> ""355_approve"";
""355_transferFrom"" -> ""355__transfer"";
""355_transfer"" -> ""355__transfer"";
}
"
0x52a5e1a56a124dce84e548ff96122246e46d599f.sol,TokenERC20,"contract TokenERC20 { string public name ; string public symbol ; uint8 public decimals = 18; uint256 public totalSupply ; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_transfer"" [label=""transfer""];
""396__transfer"" [label=""_transfer""];
""396_burn"" [label=""burn""];
""396_transferFrom"" [label=""transferFrom""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_approve"" [label=""approve""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_burnFrom"" [label=""burnFrom""];
""396_transfer"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transferFrom"" -> ""396__transfer"";
}
"
0xa29e71cb2e30e8af956d64b025b88a5ca3d7ecd2.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_transfer"" [label=""transfer""];
""256_approve"" [label=""approve""];
""256_transferFrom"" [label=""transferFrom""];
""256_allowance"" [label=""allowance""];
""256_balanceOf"" [label=""balanceOf""];
}
"
0x37304b0ab297f13f5520c523102797121182fb5b.sol,SportCrypt,contract SportCrypt { address private owner; mapping(address => bool) private admins; function SportCrypt() public { owner = msg.sender; },1,"subgraph cluster_2217_SportCrypt {
label=""SportCrypt"";
""2217_cancelOrder"" [label=""cancelOrder""];
""2217_tradeCore"" [label=""tradeCore""];
""2217_computeExposureDelta"" [label=""computeExposureDelta""];
""2217_getBalance"" [label=""getBalance""];
""2217_claim"" [label=""claim""];
""2217_withdraw"" [label=""withdraw""];
""2217_checkMatchBatch"" [label=""checkMatchBatch""];
""2217_adjustBalance"" [label=""adjustBalance""];
""2217_validateOrderSig"" [label=""validateOrderSig""];
""2217_validateOrderParams"" [label=""validateOrderParams""];
""2217_safeMul"" [label=""safeMul""];
""2217_priceDivide"" [label=""priceDivide""];
""2217_getMatchInfo"" [label=""getMatchInfo""];
""2217_getFilledAmount"" [label=""getFilledAmount""];
""2217_computePriceWeightedAmounts"" [label=""computePriceWeightedAmounts""];
""2217_fallback"" [label=""fallback""];
""2217_SportCrypt"" [label=""SportCrypt""];
""2217_max256"" [label=""max256""];
""2217_addAdmin"" [label=""addAdmin""];
""2217_safeSub"" [label=""safeSub""];
""2217_trade"" [label=""trade""];
""2217_safeAdd"" [label=""safeAdd""];
""2217_deposit"" [label=""deposit""];
""2217_recoverFunds"" [label=""recoverFunds""];
""2217_minu256"" [label=""minu256""];
""2217_min256"" [label=""min256""];
""2217_isAdmin"" [label=""isAdmin""];
""2217_getOwner"" [label=""getOwner""];
""2217_removeAdmin"" [label=""removeAdmin""];
""2217_parseOrder"" [label=""parseOrder""];
""2217_changeOwner"" [label=""changeOwner""];
""2217_checkOrderBatch"" [label=""checkOrderBatch""];
""2217_getPosition"" [label=""getPosition""];
""2217_computeEffectiveBalance"" [label=""computeEffectiveBalance""];
""2217_tradeCore"" -> ""2217_computeEffectiveBalance"";
""2217_trade"" -> ""2217_validateOrderSig"";
""2217_trade"" -> ""2217_parseOrder"";
""2217_trade"" -> ""2217_tradeCore"";
""2217_checkOrderBatch"" -> ""2217_computePriceWeightedAmounts"";
""2217_tradeCore"" -> ""2217_computePriceWeightedAmounts"";
""2217_deposit"" -> ""2217_safeAdd"";
""2217_addAdmin"" -> ""2217_onlyOwner"";
""2217_tradeCore"" -> ""2217_priceDivide"";
""2217_checkOrderBatch"" -> ""2217_validateOrderParams"";
""2217_cancelOrder"" -> ""2217_parseOrder"";
""2217_withdraw"" -> ""2217_minu256"";
""2217_adjustBalance"" -> ""2217_safeAdd"";
""2217_computeEffectiveBalance"" -> ""2217_priceDivide"";
""2217_trade"" -> ""2217_adjustBalance"";
""2217_claim"" -> ""2217_adjustBalance"";
""2217_adjustBalance"" -> ""2217_safeSub"";
""2217_priceDivide"" -> ""2217_safeMul"";
""2217_checkOrderBatch"" -> ""2217_parseOrder"";
""2217_tradeCore"" -> ""2217_minu256"";
""2217_changeOwner"" -> ""2217_onlyOwner"";
""2217_tradeCore"" -> ""2217_max256"";
""2217_computePriceWeightedAmounts"" -> ""2217_safeMul"";
""2217_tradeCore"" -> ""2217_min256"";
""2217_tradeCore"" -> ""2217_safeSub"";
""2217_removeAdmin"" -> ""2217_onlyOwner"";
""2217_checkOrderBatch"" -> ""2217_safeMul"";
""2217_checkOrderBatch"" -> ""2217_safeSub"";
""2217_trade"" -> ""2217_validateOrderParams"";
""2217_cancelOrder"" -> ""2217_validateOrderSig"";
""2217_claim"" -> ""2217_priceDivide"";
""2217_tradeCore"" -> ""2217_computeExposureDelta"";
""2217_checkOrderBatch"" -> ""2217_minu256"";
""2217_computeExposureDelta"" -> ""2217_max256"";
""2217_checkOrderBatch"" -> ""2217_computeEffectiveBalance"";
}
"
0x6b5d69ef0f14ae4a96f6ba31a72b9a07ec1cd74e.sol,TokenERC20,"contract TokenERC20 is owned{ string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_417_TokenERC20 {
label=""TokenERC20"";
""417_approveAndCall"" [label=""approveAndCall""];
""417_burn"" [label=""burn""];
""417_burnFrom"" [label=""burnFrom""];
""417_transfer"" [label=""transfer""];
""417_approve"" [label=""approve""];
""417_transferFrom"" [label=""transferFrom""];
""417_constructor"" [label=""constructor""];
""417__transfer"" [label=""_transfer""];
""417_approveAndCall"" -> ""417_approve"";
""417_transfer"" -> ""417__transfer"";
""417_transferFrom"" -> ""417__transfer"";
}
"
0x6c91c0104677d08cded353b1459b68415f278c38.sol,FastEth,contract FastEth { address constant private PROMO1 = 0xaC780d067c52227ac7563FBe975eD9A8F235eb35; address constant private PROMO2 = 0x6dBFFf54E23Cf6DB1F72211e0683a5C6144E8F03; address constant private CASHBACK = 0x33cA4CbC4b171c32C16c92AFf9feE487937475F8; address constant private PRIZE = 0xeE9B823ef62FfB79aFf2C861eDe7d632bbB5B653; uint constant public PERCENT = 4; uint constant public BONUS_PERCENT = 5; uint constant StartEpoc = 1541329170; struct Deposit { address depositor; uint deposit; uint payout; },1,"subgraph cluster_338_FastEth {
label=""FastEth"";
""338_pay"" [label=""pay""];
""338_fallback"" [label=""fallback""];
""338_getQueueLength"" [label=""getQueueLength""];
""338_getDepositsCount"" [label=""getDepositsCount""];
""338_fallback"" -> ""338_pay"";
}
"
0xbfa48ef73b319083b7e1d5831071cf0dcf2f7875.sol,YCToken,"contract YCToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_YCToken {
label=""YCToken"";
""380__transfer"" [label=""_transfer""];
""380_approve"" [label=""approve""];
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_burn"" [label=""burn""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_constructor"" [label=""constructor""];
""380_burnFrom"" [label=""burnFrom""];
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
""380_transfer"" -> ""380__transfer"";
}
"
0x470142a1834438515b757118f322703aba6e1e05.sol,PolicyPalNetworkAirdrop,contract PolicyPalNetworkAirdrop { struct BountyType { bool twitter; bool signature; },1,"subgraph cluster_662_PolicyPalNetworkAirdrop {
label=""PolicyPalNetworkAirdrop"";
""662_signatureDropMultipleAmount"" [label=""signatureDropMultipleAmount""];
""662_airDropSingleAmount"" [label=""airDropSingleAmount""];
""662_twitterDropSingleAmount"" [label=""twitterDropSingleAmount""];
""662_signatureDropSingleAmount"" [label=""signatureDropSingleAmount""];
""662_emergencyDrain"" [label=""emergencyDrain""];
""662_twitterDropMultipleAmount"" [label=""twitterDropMultipleAmount""];
""662_PolicyPalNetworkAirdrop"" [label=""PolicyPalNetworkAirdrop""];
""662_airDropMultipleAmount"" [label=""airDropMultipleAmount""];
""662_twitterDropSingleAmount"" -> ""662_onlyAdmin"";
""662_signatureDropSingleAmount"" -> ""662_validBalance"";
""662_airDropSingleAmount"" -> ""662_onlyAdmin"";
""662_emergencyDrain"" -> ""662_onlyAdmin"";
""662_signatureDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_airDropMultipleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropSingleAmount"" -> ""662_validBalance"";
""662_signatureDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_airDropMultipleAmount"" -> ""662_validBalanceMultiple"";
""662_signatureDropSingleAmount"" -> ""662_onlyAdmin"";
""662_twitterDropSingleAmount"" -> ""662_validBalance"";
""662_PolicyPalNetworkAirdrop"" -> ""662_validAddress"";
""662_twitterDropMultipleAmount"" -> ""662_onlyAdmin"";
}
"
0xa13034912eca36ddb8a0b62bc86251006d8296d6.sol,LightAirdrop,contract LightAirdrop is OwnableContract{ function LightAirdrop() public { },1,"subgraph cluster_237_LightAirdrop {
label=""LightAirdrop"";
""237_withdraw"" [label=""withdraw""];
""237_LightAirdrop"" [label=""LightAirdrop""];
""237_performEqual"" [label=""performEqual""];
""237_performDifferent"" [label=""performDifferent""];
""237_withdraw"" -> ""237_onlyOwner"";
""237_performEqual"" -> ""237_onlyOwner"";
""237_performDifferent"" -> ""237_onlyOwner"";
}
"
0x516f49a1a2087d481b73abe69f50d6e663228cca.sol,CRYPTOZOLToken,"contract CRYPTOZOLToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CRYPTOZOLToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 3000000000000000000000000000; balances[0x9254ab18462437F517De179806d83Aa5c9A27031] = _totalSupply; Transfer(address(0), 0x9254ab18462437F517De179806d83Aa5c9A27031, _totalSupply); }",1,"subgraph cluster_543_CRYPTOZOLToken {
label=""CRYPTOZOLToken"";
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_CRYPTOZOLToken"" [label=""CRYPTOZOLToken""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x2add07c4d319a1211ed6362d8d0fbe5ef56b65f6.sol,RETNToken,"contract RETNToken is owned, TokenERC20 { mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function RETNToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_555_RETNToken {
label=""RETNToken"";
""555_RETNToken"" [label=""RETNToken""];
""555_fallback"" [label=""fallback""];
""555_freezeAccount"" [label=""freezeAccount""];
""555_mintToken"" [label=""mintToken""];
""555__transfer"" [label=""_transfer""];
""555_freezeAccount"" -> ""555_onlyOwner"";
""555_mintToken"" -> ""555_onlyOwner"";
""555_RETNToken"" -> ""555_TokenERC20"";
}
"
0x0704d3952dc50e8a36a8cb53f84d8c39895cd5cf.sol,MagicCube,"contract MagicCube is SafeMath { address public owner; string public name; string public symbol; uint public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); bool lock = false; constructor( uint256 initialSupply, string tokenName, string tokenSymbol, uint decimalUnits ) public { owner = msg.sender; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_618_MagicCube {
label=""MagicCube"";
""618__transfer"" [label=""_transfer""];
""618_burn"" [label=""burn""];
""618_approve"" [label=""approve""];
""618_freezeAccount"" [label=""freezeAccount""];
""618_transferBatch"" [label=""transferBatch""];
""618_mintToken"" [label=""mintToken""];
""618_transferFrom"" [label=""transferFrom""];
""618_transfer"" [label=""transfer""];
""618_setLock"" [label=""setLock""];
""618_constructor"" [label=""constructor""];
""618_burnFrom"" [label=""burnFrom""];
""618_transferOwnership"" [label=""transferOwnership""];
""618_freezeAccount"" -> ""618_onlyOwner"";
""618_burn"" -> ""618_onlyOwner"";
""618__transfer"" -> ""618_isLock"";
""618_transfer"" -> ""618__transfer"";
""618_setLock"" -> ""618_onlyOwner"";
""618_mintToken"" -> ""618_onlyOwner"";
""618_transferOwnership"" -> ""618_onlyOwner"";
""618_transferBatch"" -> ""618__transfer"";
""618_transferFrom"" -> ""618__transfer"";
""618_burnFrom"" -> ""618_onlyOwner"";
}
"
0x01e53a2e7122a63845b1c329d4fce8124dda5b06.sol,Loan,contract Loan is Base { struct Creditor { uint Time; uint Invested; },1,"subgraph cluster_496_Loan {
label=""Loan"";
""496_SetPrcntRate"" [label=""SetPrcntRate""];
""496_Wthdraw"" [label=""Wthdraw""];
""496_StartRefound"" [label=""StartRefound""];
""496_initLoan"" [label=""initLoan""];
""496_InvestFund"" [label=""InvestFund""];
""496_CheckProfit"" [label=""CheckProfit""];
""496_ToLend"" [label=""ToLend""];
""496_WithdrawToInvestor"" [label=""WithdrawToInvestor""];
""496_fallback"" [label=""fallback""];
""496_SetScndOwner"" [label=""SetScndOwner""];
""496_SetThrdOwner"" [label=""SetThrdOwner""];
""496_TakeBack"" [label=""TakeBack""];
""496_isOwner"" [label=""isOwner""];
""496_WithdrawToInvestor"" -> ""496_isOwner"";
""496_fallback"" -> ""496_InvestFund"";
""496_TakeBack"" -> ""496_CheckProfit"";
}
"
0x17f0badcdf99b0a94429478d2e9ddb1ff13174f7.sol,knf,"contract knf is StandardToken { string public name; string public symbol; uint8 public decimals; uint256 DropedThisWeek; uint256 lastWeek; uint256 decimate; uint256 weekly_limit; uint256 air_drop; mapping(address => uint256) airdroped; address control; address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); function availableSupply() public view returns (uint256) { return balances[owner]; }",1,"subgraph cluster_1093_knf {
label=""knf"";
""1093_transferBalance"" [label=""transferBalance""];
""1093_fallback"" [label=""fallback""];
""1093_Award"" [label=""Award""];
""1093_transfererc20"" [label=""transfererc20""];
""1093_RecordTransfer"" [label=""RecordTransfer""];
""1093_transferFrom"" [label=""transferFrom""];
""1093_thisweek"" [label=""thisweek""];
""1093_transfer"" [label=""transfer""];
""1093_changeName"" [label=""changeName""];
""1093_transferControl"" [label=""transferControl""];
""1093_balanceOf"" [label=""balanceOf""];
""1093_transferOwnership"" [label=""transferOwnership""];
""1093_availableSupply"" [label=""availableSupply""];
""1093_knf"" [label=""knf""];
""1093_destroy"" [label=""destroy""];
""1093_availableAirdrop"" [label=""availableAirdrop""];
""1093_knf"" -> ""1093_RecordTransfer"";
""1093_availableAirdrop"" -> ""1093_thisweek"";
""1093_Award"" -> ""1093_onlyControl"";
""1093_destroy"" -> ""1093_onlyControl"";
""1093_transferBalance"" -> ""1093_onlyControl"";
""1093_transferFrom"" -> ""1093_availableAirdrop"";
""1093_transferOwnership"" -> ""1093_onlyControl"";
""1093_RecordTransfer"" -> ""1093_thisweek"";
""1093_Award"" -> ""1093_RecordTransfer"";
""1093_transferControl"" -> ""1093_onlyControl"";
""1093_transfererc20"" -> ""1093_onlyControl"";
""1093_transferFrom"" -> ""1093_RecordTransfer"";
""1093_transfer"" -> ""1093_availableAirdrop"";
""1093_balanceOf"" -> ""1093_availableAirdrop"";
""1093_changeName"" -> ""1093_onlyControl"";
""1093_transfer"" -> ""1093_RecordTransfer"";
}
"
0x3a1237d38d0fb94513f85d61679cad7f38507242.sol,Mindexcoin,"contract Mindexcoin { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Mindexcoin( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_619_MindexcoinToken {
label=""MindexcoinToken"";
""619_MindexcoinToken"" [label=""MindexcoinToken""];
""619__transfer"" [label=""_transfer""];
""619_mintToken"" [label=""mintToken""];
""619_sell"" [label=""sell""];
""619_freezeAccount"" [label=""freezeAccount""];
""619_setPrices"" [label=""setPrices""];
""619_buy"" [label=""buy""];
""619_mintToken"" -> ""619_onlyOwner"";
""619_MindexcoinToken"" -> ""619_Mindexcoin"";
""619_buy"" -> ""619__transfer"";
""619_freezeAccount"" -> ""619_onlyOwner"";
""619_sell"" -> ""619__transfer"";
""619_setPrices"" -> ""619_onlyOwner"";
}
"
0xc64500dd7b0f1794807e67802f8abbf5f8ffb054.sol,LocusToken,contract LocusToken { address public tokenOwner; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint public totalSupply; uint internal constant initialSupply = 7000000000 * (10 ** uint(decimals)); mapping(address => uint) public balanceOf; mapping(address => mapping(address => uint)) internal allowed; function balanceOfToken(address _owner) public view returns(uint) { return balanceOf[_owner]; },1,"subgraph cluster_362_LocusToken {
label=""LocusToken"";
""362_allowance"" [label=""allowance""];
""362_transferFrom"" [label=""transferFrom""];
""362_approve"" [label=""approve""];
""362_LocusToken"" [label=""LocusToken""];
""362_burn"" [label=""burn""];
""362_transfer"" [label=""transfer""];
""362_balanceOfToken"" [label=""balanceOfToken""];
""362__transfer"" [label=""_transfer""];
""362_approveAndCall"" [label=""approveAndCall""];
""362_transfer"" -> ""362__transfer"";
""362_transferFrom"" -> ""362__transfer"";
""362_approveAndCall"" -> ""362_approve"";
}
"
0x54dd71cac082ac6fcfeb727c5bbb0a07be1c5de9.sol,MylittleProgram,contract MylittleProgram { using SafeMath for uint256; mapping (address => bool) private admins; mapping (uint => uint256) public levels; mapping (uint => bool) private lock; address contractCreator; address winnerAddress; uint256 prize; function MylittleProgram () public { contractCreator = msg.sender; winnerAddress = 0xFb2D26b0caa4C331bd0e101460ec9dbE0A4783A4; admins[contractCreator] = true; },1,"subgraph cluster_325_MylittleProgram {
label=""MylittleProgram"";
""325_putPrize"" [label=""putPrize""];
""325_totalPrize"" [label=""totalPrize""];
""325_unPauseGame"" [label=""unPauseGame""];
""325_removeAdmin"" [label=""removeAdmin""];
""325_setPrizeAddress"" [label=""setPrizeAddress""];
""325_pauseGame"" [label=""pauseGame""];
""325_addLock"" [label=""addLock""];
""325_addAdmin"" [label=""addAdmin""];
""325_setOwner"" [label=""setOwner""];
""325_MylittleProgram"" [label=""MylittleProgram""];
""325_getPokemonLock"" [label=""getPokemonLock""];
""325_pA"" [label=""pA""];
""325_withdraw"" [label=""withdraw""];
""325_GetGamestatus"" [label=""GetGamestatus""];
""325_setOwner"" -> ""325_onlyContractCreator"";
""325_unPauseGame"" -> ""325_onlyContractCreator"";
""325_pauseGame"" -> ""325_onlyContractCreator"";
""325_withdraw"" -> ""325_onlyAdmins"";
""325_removeAdmin"" -> ""325_onlyContractCreator"";
""325_setPrizeAddress"" -> ""325_onlyAdmins"";
""325_addLock"" -> ""325_onlyContractCreator"";
}
"
0x6d66439c9cc75b69f9a40e82f34445081b8e929a.sol,ContractReceiver,contract ContractReceiver { struct TKN { address sender; uint256 value; bytes data; bytes4 sig; },1,"subgraph cluster_316_ContractReceiver {
label=""ContractReceiver"";
""316_tokenFallback"" [label=""tokenFallback""];
""316_rewiewToken"" [label=""rewiewToken""];
}
"
0xc37b74c1f1d6a0f9a6ebd4bd846805f899b5e897.sol,Angelglorycoin,"contract Angelglorycoin { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string Angelglorycoin, string AGC ) public { totalSupply = 1000000000000000000; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_350_Angelglorycoin {
label=""Angelglorycoin"";
""350_approve"" [label=""approve""];
""350_burn"" [label=""burn""];
""350_TokenERC20"" [label=""TokenERC20""];
""350_transfer"" [label=""transfer""];
""350__transfer"" [label=""_transfer""];
""350_approveAndCall"" [label=""approveAndCall""];
""350_burnFrom"" [label=""burnFrom""];
""350_transferFrom"" [label=""transferFrom""];
""350_transferFrom"" -> ""350__transfer"";
""350_transfer"" -> ""350__transfer"";
""350_approveAndCall"" -> ""350_approve"";
}
"
0xb430244b442c228a59a0fd4450fa7eedd5fbf833.sol,VOC_ethchf_48013527701_20181215,"contract VOC_ethchf_48013527701_20181215 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 330000000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOC_ethchf_48013527701_20181215 {
label=""VOC_ethchf_48013527701_20181215"";
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
}
"
0x783cf9c6754bf826f1727620b4baa19714fedf8d.sol,ETH_MIXER,contract ETH_MIXER { uint256 feePaid; uint256 creatorFee = 0.001 ether; uint256 totalTransfered; struct Transfer { uint256 timeStamp; uint256 currContractBallance; uint256 transferAmount; },1,"subgraph cluster_97_ETH_MIXER {
label=""ETH_MIXER"";
""97_MakeTransfer"" [label=""MakeTransfer""];
""97_fallback"" [label=""fallback""];
}
"
0x53877b7c93c80c9631c73c5feda1e421d836a39c.sol,CryptaurDepository,"contract CryptaurDepository is owned, AddressBook { enum UnlimitedMode {UNLIMITED,LIMITED}",1,"subgraph cluster_1573_CryptaurDepository {
label=""CryptaurDepository"";
""1573_linkToMasterWallet"" [label=""linkToMasterWallet""];
""1573_shareBalance"" [label=""shareBalance""];
""1573_setCryptaurRecovery"" [label=""setCryptaurRecovery""];
""1573_CryptaurDepository"" [label=""CryptaurDepository""];
""1573_transferFromFund"" [label=""transferFromFund""];
""1573_setBackend"" [label=""setBackend""];
""1573_setCryptaurReserveFund"" [label=""setCryptaurReserveFund""];
""1573_freeze"" [label=""freeze""];
""1573_payDAPP"" [label=""payDAPP""];
""1573_balanceOf"" [label=""balanceOf""];
""1573_deposit"" [label=""deposit""];
""1573_changeAddress"" [label=""changeAddress""];
""1573_setCryptaurToken"" [label=""setCryptaurToken""];
""1573_balanceOf2"" [label=""balanceOf2""];
""1573_transferToToken"" [label=""transferToToken""];
""1573_balanceOf2Internal"" [label=""balanceOf2Internal""];
""1573_withdraw"" [label=""withdraw""];
""1573_pay"" [label=""pay""];
""1573_setMaxLinkedWalletCount"" [label=""setMaxLinkedWalletCount""];
""1573_setCryptaurRewards"" [label=""setCryptaurRewards""];
""1573_unLinkFromMasterWallet"" [label=""unLinkFromMasterWallet""];
""1573_pay2"" [label=""pay2""];
""1573_setUnlimitedMode"" [label=""setUnlimitedMode""];
""1573_payInternal"" [label=""payInternal""];
""1573_setCryptaurRecovery"" -> ""1573_onlyOwner"";
""1573_pay"" -> ""1573_getOrAddMasterWallet"";
""1573_CryptaurDepository"" -> ""1573_owned"";
""1573_setCryptaurReserveFund"" -> ""1573_onlyOwner"";
""1573_deposit"" -> ""1573_getOrAddMasterWallet"";
""1573_setBackend"" -> ""1573_onlyOwner"";
""1573_freeze"" -> ""1573_getMasterWallet"";
""1573_balanceOf2"" -> ""1573_getMasterWallet"";
""1573_freeze"" -> ""1573_onlyOwner"";
""1573_balanceOf2"" -> ""1573_balanceOf2Internal"";
""1573_pay"" -> ""1573_payInternal"";
""1573_payDAPP"" -> ""1573_notFreezed"";
""1573_pay2"" -> ""1573_getOrAddMasterWallet"";
""1573_withdraw"" -> ""1573_getMasterWallet"";
""1573_payDAPP"" -> ""1573_balanceOf2Internal"";
""1573_pay2"" -> ""1573_payInternal"";
""1573_setCryptaurRewards"" -> ""1573_onlyOwner"";
""1573_changeAddress"" -> ""1573_applyChangeWalletAddress"";
""1573_linkToMasterWallet"" -> ""1573_linkToMasterWalletInternal"";
""1573_unLinkFromMasterWallet"" -> ""1573_unLinkFromMasterWalletInternal"";
""1573_freeze"" -> ""1573_onlyOwnerOrBackend"";
""1573_transferFromFund"" -> ""1573_getOrAddMasterWallet"";
""1573_setUnlimitedMode"" -> ""1573_getOrAddMasterWallet"";
""1573_pay"" -> ""1573_notFreezed"";
""1573_withdraw"" -> ""1573_notFreezed"";
""1573_pay2"" -> ""1573_notFreezed"";
""1573_shareBalance"" -> ""1573_getMasterWallet"";
""1573_deposit"" -> ""1573_onlyBackend"";
""1573_setMaxLinkedWalletCount"" -> ""1573_onlyOwnerOrBackend"";
""1573_transferToToken"" -> ""1573_onlyOwnerOrBackend"";
""1573_shareBalance"" -> ""1573_notFreezed"";
""1573_payDAPP"" -> ""1573_getOrAddMasterWallet"";
""1573_balanceOf"" -> ""1573_getMasterWallet"";
""1573_setCryptaurToken"" -> ""1573_onlyOwner"";
}
"
0x3ff9ba3001e61d5833208bef78ea5c268d418398.sol,BurnToken,"contract BurnToken is BaseToken { event Burn(address indexed from, uint256 value); function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); balanceOf[msg.sender] -= _value; totalSupply -= _value; Burn(msg.sender, _value); return true; }",1,"subgraph cluster_299_BurnToken {
label=""BurnToken"";
""299_burn"" [label=""burn""];
""299_burnFrom"" [label=""burnFrom""];
}
"
0x5b7cfbee45509b89417f26bbc28a8de11bca3726.sol,AirdropSmart,"contract AirdropSmart is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function AirdropSmart() public { symbol = ; name = ; decimals = 18; _totalSupply = 5000000000000000000000000000; balances[0xB7F09F9cCD6De2A8ed1852b823305c0D22409F90] = _totalSupply; Transfer(address(0), 0xB7F09F9cCD6De2A8ed1852b823305c0D22409F90, _totalSupply); }",1,"subgraph cluster_543_AirdropSmart {
label=""AirdropSmart"";
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_AirdropSmart"" [label=""AirdropSmart""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x728d52789bdcb8e4b76172c0120db8ef97914f64.sol,GameofGold,contract GameofGold { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_40_AcceptsGameofGold {
label=""AcceptsGameofGold"";
""40_tokenFallback"" [label=""tokenFallback""];
""40_AcceptsGameofGold"" [label=""AcceptsGameofGold""];
}
"
0x41ebb67c868f5f28bcd823ddbf39c0f32b191256.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_332_StandardToken {
label=""StandardToken"";
""332_approve"" [label=""approve""];
""332_balanceOf"" [label=""balanceOf""];
""332_transferFrom"" [label=""transferFrom""];
""332_allowance"" [label=""allowance""];
""332_transfer"" [label=""transfer""];
}
"
0x031e0c6a7c91df1bc171d33cccc6988fd2ddeb6f.sol,TopCoinFXToken,contract TopCoinFXToken { string public name = ; string public symbol = ; uint256 public constant decimals = 18; address public adminWallet; mapping(address => uint256) public balanceOf; mapping(address => mapping(address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint public constant supplyNumber = 1000000000; uint public constant powNumber = 10; uint public constant TOKEN_SUPPLY_TOTAL = supplyNumber * powNumber ** decimals; uint256 constant valueFounder = TOKEN_SUPPLY_TOTAL; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_383_TopCoinFXToken {
label=""TopCoinFXToken"";
""383_transfer"" [label=""transfer""];
""383_constructor"" [label=""constructor""];
""383_start"" [label=""start""];
""383_transferFrom"" [label=""transferFrom""];
""383_stop"" [label=""stop""];
""383_approve"" [label=""approve""];
""383_setSymbol"" [label=""setSymbol""];
""383_setName"" [label=""setName""];
""383_burn"" [label=""burn""];
""383_stop"" -> ""383_isOwner"";
""383_approve"" -> ""383_validAddress"";
""383_approve"" -> ""383_isRunning"";
""383_start"" -> ""383_isOwner"";
""383_transferFrom"" -> ""383_validAddress"";
""383_transferFrom"" -> ""383_isRunning"";
""383_transfer"" -> ""383_isRunning"";
""383_setName"" -> ""383_isOwner"";
""383_setSymbol"" -> ""383_isOwner"";
""383_transfer"" -> ""383_validAddress"";
}
"
0x209f98bc320133681458125bc57ecc03718311cc.sol,bjTest,contract bjTest is Ownable { using SafeMath for uint256; uint256 public JoustNum = 1; uint256 public NumberOfPart = 0; uint256 public Commission = 0.024 * 1 ether; uint256 public RateEth = 0.3 * 1 ether; uint256 public TotalRate = 2.4 * 1 ether; struct BJJtab { uint256 JoustNumber; uint256 UserNumber; address UserAddress; uint256 CoincidNum; uint256 Winning; },1,"subgraph cluster_843_bjTest {
label=""bjTest"";
""843_ApushJoustUser"" [label=""ApushJoustUser""];
""843_substring"" [label=""substring""];
""843_Random"" [label=""Random""];
""843_char"" [label=""char""];
""843_ArJoust"" [label=""ArJoust""];
""843_Distribution"" [label=""Distribution""];
""843_toAsciiString"" [label=""toAsciiString""];
""843_kill"" [label=""kill""];
""843_kill"" -> ""843_onlyOwner"";
""843_toAsciiString"" -> ""843_Random"";
""843_toAsciiString"" -> ""843_char"";
""843_toAsciiString"" -> ""843_Distribution"";
""843_toAsciiString"" -> ""843_substring"";
""843_ApushJoustUser"" -> ""843_toAsciiString"";
""843_ApushJoustUser"" -> ""843_onlyOwner"";
}
"
0x28f2c01a3d86ee4faf037147f0aeb49c2eab47ce.sol,DESH,"contract DESH is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000; balances[0x2cF5dc0700bc0dccCF305AD2CFc28717e8299207] = _totalSupply; emit Transfer(address(0), 0x2cF5dc0700bc0dccCF305AD2CFc28717e8299207, _totalSupply); }",1,"subgraph cluster_543_DESH {
label=""DESH"";
""543_constructor"" [label=""constructor""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x5ab6aad76a702591724b7788b0fbea6292638561.sol,CIC,"contract CIC is owned { address public deployer; string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor(uint256 initialSupply, string tokenName, string tokenSymbol, address centralMinter) public { if(centralMinter != 0 ) owner = centralMinter; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; deployer = msg.sender; }",1,"subgraph cluster_484_CIC {
label=""CIC"";
""484__transfer"" [label=""_transfer""];
""484_transfer"" [label=""transfer""];
""484_approve"" [label=""approve""];
""484_approveAndCall"" [label=""approveAndCall""];
""484_burn"" [label=""burn""];
""484_constructor"" [label=""constructor""];
""484_transferFrom"" [label=""transferFrom""];
""484_mintToken"" [label=""mintToken""];
""484_burnFrom"" [label=""burnFrom""];
""484_approveAndCall"" -> ""484_approve"";
""484_mintToken"" -> ""484_onlyOwner"";
""484_transferFrom"" -> ""484__transfer"";
}
"
0x1f002ba292d85239fee400a04b21bb3aa4777461.sol,FLTTToken,contract FLTTToken { string public constant _name = ; string public constant _symbol = ; uint8 public constant _decimals = 8; uint256 public constant _initialSupply = 49800000000000000; address public owner; uint256 public _currentSupply; mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; function FLTTToken() { owner = msg.sender; _currentSupply = _initialSupply; balances[owner] = _initialSupply; },1,"subgraph cluster_577_FLTTToken {
label=""FLTTToken"";
""577_approve"" [label=""approve""];
""577_totalSupply"" [label=""totalSupply""];
""577_amountBurned"" [label=""amountBurned""];
""577_isContract"" [label=""isContract""];
""577_transfer"" [label=""transfer""];
""577_name"" [label=""name""];
""577_transferFrom"" [label=""transferFrom""];
""577_symbol"" [label=""symbol""];
""577_fallback"" [label=""fallback""];
""577_FLTTToken"" [label=""FLTTToken""];
""577_transferToContract"" [label=""transferToContract""];
""577_allowance"" [label=""allowance""];
""577_balanceOf"" [label=""balanceOf""];
""577_currentSupply"" [label=""currentSupply""];
""577_burn"" [label=""burn""];
""577_transferToAddress"" [label=""transferToAddress""];
""577_decimals"" [label=""decimals""];
""577_transfer"" -> ""577_transferToAddress"";
""577_transfer"" -> ""577_transferToContract"";
""577_transfer"" -> ""577_isContract"";
}
"
0x2e8e02e29bdc2ef651c351d70eceac23f6349c6f.sol,StandardToken,"contract StandardToken is ERC20, BasicToken { mapping (address => mapping (address => uint256)) internal allowed; function transferFrom(address _from, address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); emit Transfer(_from, _to, _value); return true; }",1,"subgraph cluster_626_StandardToken {
label=""StandardToken"";
""626_increaseApproval"" [label=""increaseApproval""];
""626_approveAndCall"" [label=""approveAndCall""];
""626_approve"" [label=""approve""];
""626_transferFrom"" [label=""transferFrom""];
""626_allowance"" [label=""allowance""];
""626_decreaseApproval"" [label=""decreaseApproval""];
}
"
0xef8a2c1bc94e630463293f71bf5414d13e80f62d.sol,Synth,"contract Synth is ExternStateToken { IFeePool public feePool; Synthetix public synthetix; bytes4 public currencyKey; uint8 constant DECIMALS = 18; constructor(address _proxy, TokenState _tokenState, Synthetix _synthetix, IFeePool _feePool, string _tokenName, string _tokenSymbol, address _owner, bytes4 _currencyKey ) ExternStateToken(_proxy, _tokenState, _tokenName, _tokenSymbol, 0, DECIMALS, _owner) public { require(_proxy != 0, ); require(address(_synthetix) != 0, ); require(address(_feePool) != 0, ); require(_owner != 0, ); require(_synthetix.synths(_currencyKey) == Synth(0), ); feePool = _feePool; synthetix = _synthetix; currencyKey = _currencyKey; }",1,"subgraph cluster_3088_ISynthetixState {
label=""ISynthetixState"";
""3088_lastDebtLedgerEntry"" [label=""lastDebtLedgerEntry""];
""3088_clearIssuanceData"" [label=""clearIssuanceData""];
""3088_debtLedgerLength"" [label=""debtLedgerLength""];
""3088_setCurrentIssuanceData"" [label=""setCurrentIssuanceData""];
""3088_hasIssued"" [label=""hasIssued""];
""3088_appendDebtLedgerValue"" [label=""appendDebtLedgerValue""];
""3088_incrementTotalIssuerCount"" [label=""incrementTotalIssuerCount""];
""3088_decrementTotalIssuerCount"" [label=""decrementTotalIssuerCount""];
}
"
0x543e9c99addfc7c6fa158359019fd8f530334396.sol,EPCToken,"contract EPCToken is ERC20, Math, owned { string public name; string public symbol; uint8 public decimals = 18; string public version; event Reward(address indexed _to, uint256 _value); event MintToken(address indexed _to, uint256 _value); event Burn(address indexed _to, uint256 _value); function EPCToken( string _name, string _symbol, string _version ) public { name = _name; symbol = _symbol; version = _version; }",1,"subgraph cluster_532_EPCToken {
label=""EPCToken"";
""532_burn"" [label=""burn""];
""532_reward"" [label=""reward""];
""532_kill"" [label=""kill""];
""532_EPCToken"" [label=""EPCToken""];
""532_mintToken"" [label=""mintToken""];
""532_kill"" -> ""532_onlyOwner"";
""532_mintToken"" -> ""532_onlyOwner"";
""532_reward"" -> ""532_onlyOwner"";
}
"
0x5abaff0b83f81dc061c590aadcba013c69237fd7.sol,CryptoJade,"contract CryptoJade is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CryptoJade() public { symbol = ; name = ; decimals = 18; _totalSupply = 125000000000000000000000000; balances[0x5E77C4cf41618A897759b3A2A32665C85BC2aF21] = _totalSupply; Transfer(address(0), 0x5E77C4cf41618A897759b3A2A32665C85BC2aF21, _totalSupply); }",1,"subgraph cluster_543_CryptoJade {
label=""CryptoJade"";
""543_fallback"" [label=""fallback""];
""543_CryptoJade"" [label=""CryptoJade""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x4c8c4659f734294d9561c8b0efc210028ed12052.sol,company_acc,contract company_acc { bytes32 keyHash; address owner; bytes32 wallet_id = 0xc209a261dae1dc7caa5b02a54874c85a69de5c9ddc0b0bebdbfa9a394fb24caf; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_company_acc {
label=""company_acc"";
""121_constructor"" [label=""constructor""];
""121_withdraw"" [label=""withdraw""];
""121_clear"" [label=""clear""];
""121_setup_key"" [label=""setup_key""];
""121_get_id"" [label=""get_id""];
""121_fallback"" [label=""fallback""];
""121_new_hash"" [label=""new_hash""];
}
"
0x7176a57a53a87a800a6d7ec33c8479a8deb57d8b.sol,ARIToken,"contract ARIToken { function ARIToken(address _tokenManager, address _escrow) { tokenManager = _tokenManager; escrow = _escrow; }",1,"subgraph cluster_488_ARIToken {
label=""ARIToken"";
""488_setTokenSupplyLimit"" [label=""setTokenSupplyLimit""];
""488_setPrice"" [label=""setPrice""];
""488_setCrowdsaleManager"" [label=""setCrowdsaleManager""];
""488_fallback"" [label=""fallback""];
""488_withdrawEther"" [label=""withdrawEther""];
""488_setTransferable"" [label=""setTransferable""];
""488_balanceOf"" [label=""balanceOf""];
""488_setPresalePhase"" [label=""setPresalePhase""];
""488_buyTokens"" [label=""buyTokens""];
""488_ARIToken"" [label=""ARIToken""];
""488_burnTokens"" [label=""burnTokens""];
""488_transfer"" [label=""transfer""];
""488_setTransferable"" -> ""488_onlyTokenManager"";
""488_setTokenSupplyLimit"" -> ""488_onlyTokenManager"";
""488_fallback"" -> ""488_buyTokens"";
""488_setCrowdsaleManager"" -> ""488_onlyTokenManager"";
""488_withdrawEther"" -> ""488_onlyTokenManager"";
""488_setPrice"" -> ""488_onlyTokenManager"";
""488_setPresalePhase"" -> ""488_onlyTokenManager"";
""488_burnTokens"" -> ""488_onlyCrowdsaleManager"";
}
"
0x523dc2c35f1d6071b5cd72cf4d7b670193034824.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" [label=""transfer""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x5c6a2ece543d3038f98cea1a2a5f0759fbceb8b1.sol,BatchTokensTransfer,contract BatchTokensTransfer is Ownable { constructor () public Ownable(msg.sender) {},1,"subgraph cluster_270_BatchTokensTransfer {
label=""BatchTokensTransfer"";
""270_constructor"" [label=""constructor""];
""270_transferToken"" [label=""transferToken""];
""270_batchTokensTransfer"" [label=""batchTokensTransfer""];
""270_transferAllTokensToOwner"" [label=""transferAllTokensToOwner""];
""270_batchTokensTransfer"" -> ""270_ownerOnly"";
""270_constructor"" -> ""270_constructor"";
""270_transferAllTokensToOwner"" -> ""270_ownerOnly"";
""270_transferToken"" -> ""270_ownerOnly"";
}
"
0x0eeb66edff8ccfd85c2181eff81d8275a3b92b8b.sol,OROCoin,"contract OROCoin { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_384_OROCoin {
label=""OROCoin"";
""384_burnFrom"" [label=""burnFrom""];
""384_approveAndCall"" [label=""approveAndCall""];
""384_constructor"" [label=""constructor""];
""384_transfer"" [label=""transfer""];
""384_transferFrom"" [label=""transferFrom""];
""384__transfer"" [label=""_transfer""];
""384_burn"" [label=""burn""];
""384_approve"" [label=""approve""];
""384_transferFrom"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
""384_transfer"" -> ""384__transfer"";
}
"
0x1c0f4c64821d6f8fa96975e20d5bb3ea79eb1071.sol,vault,contract vault { bytes32 keyHash; address owner; bytes32 wallet_id = 0x05411045febbb4c8fad13acceb292848b58bd64dd9292cbc9a23f432769a5930; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_vault {
label=""vault"";
""121_withdraw"" [label=""withdraw""];
""121_setup_key"" [label=""setup_key""];
""121_fallback"" [label=""fallback""];
""121_constructor"" [label=""constructor""];
""121_apply_new_hash"" [label=""apply_new_hash""];
""121_clear"" [label=""clear""];
""121_get_id"" [label=""get_id""];
}
"
0x17987e621eb8c09f62bc10c90204238cc8cbbe94.sol,coc,"contract coc { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_coc {
label=""coc"";
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_approve"" [label=""approve""];
""361_constructor"" [label=""constructor""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0xde6c1dd8404827149f6edc09e50476aa0cd7b4ab.sol,SRX,"contract SRX { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function SRX( ) public { totalSupply = 100000000000000000000000000000; balanceOf[msg.sender] = 100000000000000000000000000000; name = ; symbol = ; }",1,"subgraph cluster_349_SRX {
label=""SRX"";
""349_SRX"" [label=""SRX""];
""349__transfer"" [label=""_transfer""];
""349_approve"" [label=""approve""];
""349_burnFrom"" [label=""burnFrom""];
""349_transferFrom"" [label=""transferFrom""];
""349_approveAndCall"" [label=""approveAndCall""];
""349_burn"" [label=""burn""];
""349_transfer"" [label=""transfer""];
""349_transferFrom"" -> ""349__transfer"";
""349_approveAndCall"" -> ""349_approve"";
""349_transfer"" -> ""349__transfer"";
}
"
0x188ff41cc7960dd51b3aa802fcb17ba17c41276d.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) public returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_324_StandardToken {
label=""StandardToken"";
""324_allowance"" [label=""allowance""];
""324_balanceOf"" [label=""balanceOf""];
""324_transfer"" [label=""transfer""];
""324_transferFrom"" [label=""transferFrom""];
""324_approve"" [label=""approve""];
}
"
0x4176f0f2b7c95486a5ae06e3d1b29201a42e7630.sol,Bounty0xEscrow,"contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable { using SafeMath for uint256; mapping (address => mapping (address => uint)) public tokens; event Deposit(address indexed token, address indexed user, uint amount, uint balance); event Distribution(address indexed token, address indexed host, address indexed hunter, uint256 amount); constructor() public { }",1,"subgraph cluster_1026_Bounty0xEscrow {
label=""Bounty0xEscrow"";
""1026_distributeWithTransferFrom"" [label=""distributeWithTransferFrom""];
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" [label=""distributeTokenToAddressesAndAmountsWithoutHost""];
""1026_constructor"" [label=""constructor""];
""1026_depositToken"" [label=""depositToken""];
""1026_tokenFallback"" [label=""tokenFallback""];
""1026_depositEther"" [label=""depositEther""];
""1026_distributeTokenToAddressesAndAmounts"" [label=""distributeTokenToAddressesAndAmounts""];
""1026_distributeTokenToAddress"" [label=""distributeTokenToAddress""];
""1026_approveToPullOutTokens"" [label=""approveToPullOutTokens""];
""1026_distributeTokenToAddressesAndAmounts"" -> ""1026_onlyOwner"";
""1026_distributeWithTransferFrom"" -> ""1026_onlyOwner"";
""1026_approveToPullOutTokens"" -> ""1026_onlyOwner"";
""1026_depositEther"" -> ""1026_whenNotPaused"";
""1026_tokenFallback"" -> ""1026_whenNotPaused"";
""1026_distributeTokenToAddressesAndAmountsWithoutHost"" -> ""1026_onlyOwner"";
""1026_distributeTokenToAddress"" -> ""1026_onlyOwner"";
""1026_depositToken"" -> ""1026_whenNotPaused"";
}
"
0x5b527c8cc72ea4b8681e44754be6248b107c5229.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396__transfer"" [label=""_transfer""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_approve"" [label=""approve""];
""396_transferFrom"" [label=""transferFrom""];
""396_burn"" [label=""burn""];
""396_burnFrom"" [label=""burnFrom""];
""396_transfer"" [label=""transfer""];
""396_transfer"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transferFrom"" -> ""396__transfer"";
}
"
0x4d797cbb28c49bd074db4a47b582c95fd37804a1.sol,CloutToken,"contract CloutToken is StandardToken { string public name; string public symbol; uint256 public decimals = 18; address public creator; function CloutToken(uint256 initialSupply, address _creator) public { require (msg.sender == _creator); creator=_creator; balances[msg.sender] = initialSupply * 10**decimals; totalSupply = initialSupply * 10**decimals; name = ; symbol = ; Transfer(0x0, msg.sender, totalSupply); }",1,"subgraph cluster_672_CloutToken {
label=""CloutToken"";
""672_CloutToken"" [label=""CloutToken""];
""672_transferMulti"" [label=""transferMulti""];
""672_transferMulti"" -> ""672_transfer"";
}
"
0xbe2a1d562817b6064e0568a4dc9e2c80f7478dfe.sol,TSCoin,"contract TSCoin { uint256 totalSupply_; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant initialSupply = 200000000*(10**uint256(decimals)); uint256 public buyPrice; address public owner; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; function totalSupply() public view returns (uint256){ return totalSupply_; }",1,"subgraph cluster_472_TSCoin {
label=""TSCoin"";
""472__transfer"" [label=""_transfer""];
""472_allowance"" [label=""allowance""];
""472_balanceOf"" [label=""balanceOf""];
""472_increaseApproval"" [label=""increaseApproval""];
""472_transferFrom"" [label=""transferFrom""];
""472_decreaseApproval"" [label=""decreaseApproval""];
""472_approve"" [label=""approve""];
""472__buy"" [label=""_buy""];
""472_totalSupply"" [label=""totalSupply""];
""472_fallback"" [label=""fallback""];
""472_transferEthers"" [label=""transferEthers""];
""472_constructor"" [label=""constructor""];
""472_buy"" [label=""buy""];
""472_transfer"" [label=""transfer""];
""472_fallback"" -> ""472__buy"";
""472_buy"" -> ""472__buy"";
""472_transfer"" -> ""472__transfer"";
""472__buy"" -> ""472__transfer"";
}
"
0x26bf81f017a7149576dc5d82323172fcae9fd469.sol,PhxGo,"contract PhxGo is Ownable{ using SafeMath for uint; event LogTokenMultiSent(address token,uint256 total); event LogGetToken(address token, address receiver, uint256 balance); address public receiverAddress; uint public txFee = 0.01 ether; uint public VIPFee = 1 ether; mapping(address => bool) public vipList; function getBalance(address _tokenAddress) onlyOwner public { address _receiverAddress = getReceiverAddress(); if(_tokenAddress == address(0)){ require(_receiverAddress.send(address(this).balance)); return; }",1,"subgraph cluster_1228_PhxGo {
label=""PhxGo"";
""1228_registerVIP"" [label=""registerVIP""];
""1228_multisendToken"" [label=""multisendToken""];
""1228_mutiSendCoinWithSameValue"" [label=""mutiSendCoinWithSameValue""];
""1228_setReceiverAddress"" [label=""setReceiverAddress""];
""1228_drop"" [label=""drop""];
""1228_removeFromVIPList"" [label=""removeFromVIPList""];
""1228_setTxFee"" [label=""setTxFee""];
""1228_ethSendSameValue"" [label=""ethSendSameValue""];
""1228_addToVIPList"" [label=""addToVIPList""];
""1228_ethSendDifferentValue"" [label=""ethSendDifferentValue""];
""1228_getReceiverAddress"" [label=""getReceiverAddress""];
""1228_mutiSendCoinWithDifferentValue"" [label=""mutiSendCoinWithDifferentValue""];
""1228_coinSendDifferentValue"" [label=""coinSendDifferentValue""];
""1228_sendEth"" [label=""sendEth""];
""1228_mutiSendETHWithDifferentValue"" [label=""mutiSendETHWithDifferentValue""];
""1228_setVIPFee"" [label=""setVIPFee""];
""1228_mutiSendETHWithSameValue"" [label=""mutiSendETHWithSameValue""];
""1228_multisend"" [label=""multisend""];
""1228_coinSendSameValue"" [label=""coinSendSameValue""];
""1228_isVIP"" [label=""isVIP""];
""1228_getBalance"" [label=""getBalance""];
""1228_mutiSendCoinWithDifferentValue"" -> ""1228_coinSendDifferentValue"";
""1228_drop"" -> ""1228_coinSendSameValue"";
""1228_ethSendDifferentValue"" -> ""1228_isVIP"";
""1228_multisend"" -> ""1228_ethSendDifferentValue"";
""1228_removeFromVIPList"" -> ""1228_onlyOwner"";
""1228_mutiSendCoinWithSameValue"" -> ""1228_coinSendSameValue"";
""1228_coinSendSameValue"" -> ""1228_isVIP"";
""1228_setTxFee"" -> ""1228_onlyOwner"";
""1228_getBalance"" -> ""1228_onlyOwner"";
""1228_setVIPFee"" -> ""1228_onlyOwner"";
""1228_ethSendSameValue"" -> ""1228_isVIP"";
""1228_multisendToken"" -> ""1228_coinSendDifferentValue"";
""1228_mutiSendETHWithSameValue"" -> ""1228_ethSendSameValue"";
""1228_mutiSendETHWithDifferentValue"" -> ""1228_ethSendDifferentValue"";
""1228_coinSendDifferentValue"" -> ""1228_isVIP"";
""1228_registerVIP"" -> ""1228_getReceiverAddress"";
""1228_getBalance"" -> ""1228_getReceiverAddress"";
""1228_setReceiverAddress"" -> ""1228_onlyOwner"";
""1228_sendEth"" -> ""1228_ethSendSameValue"";
""1228_addToVIPList"" -> ""1228_onlyOwner"";
}
"
0xdff95d14094b92ad5dd042fdb47b6f25f33fbbaa.sol,DiXiEnergy,contract DiXiEnergy is Limitedsale { string public standart = ; string public name = ; string public symbol = ; uint8 public decimals = 2; modifier onlyPayloadSize(uint size) { if(msg.data.length < size + 4) { throw; },1,"subgraph cluster_256_DiXiEnergy {
label=""DiXiEnergy"";
""256_transfer"" [label=""transfer""];
""256_transfer"" -> ""256_onlyPayloadSize"";
}
"
0x6bacca3cce57a46fd0822df7c07afbf9d81d96d9.sol,Jiggs,contract Jiggs { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1181_Jiggs {
label=""Jiggs"";
""1181_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1181_purchaseTokens"" [label=""purchaseTokens""];
""1181_dividendsOf"" [label=""dividendsOf""];
""1181_transfer"" [label=""transfer""];
""1181_buyPrice"" [label=""buyPrice""];
""1181_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1181_withdraw"" [label=""withdraw""];
""1181_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1181_totalSupply"" [label=""totalSupply""];
""1181_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1181_totalUsers"" [label=""totalUsers""];
""1181_reinvest"" [label=""reinvest""];
""1181_sqrt"" [label=""sqrt""];
""1181_buy"" [label=""buy""];
""1181_balanceOf"" [label=""balanceOf""];
""1181_sell"" [label=""sell""];
""1181_fallback"" [label=""fallback""];
""1181_myDividends"" [label=""myDividends""];
""1181_myTokens"" [label=""myTokens""];
""1181_referralsOf"" [label=""referralsOf""];
""1181_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1181_sellPrice"" [label=""sellPrice""];
""1181_exit"" [label=""exit""];
""1181_ethereumToTokens_"" -> ""1181_sqrt"";
""1181_exit"" -> ""1181_withdraw"";
""1181_sell"" -> ""1181_tokensToEthereum_"";
""1181_myTokens"" -> ""1181_balanceOf"";
""1181_transfer"" -> ""1181_onlyBagholders"";
""1181_myDividends"" -> ""1181_dividendsOf"";
""1181_reinvest"" -> ""1181_onlyStronghands"";
""1181_calculateEthereumReceived"" -> ""1181_tokensToEthereum_"";
""1181_reinvest"" -> ""1181_purchaseTokens"";
""1181_withdraw"" -> ""1181_myDividends"";
""1181_sell"" -> ""1181_onlyBagholders"";
""1181_reinvest"" -> ""1181_myDividends"";
""1181_exit"" -> ""1181_sell"";
""1181_transfer"" -> ""1181_myDividends"";
""1181_sellPrice"" -> ""1181_tokensToEthereum_"";
""1181_transfer"" -> ""1181_withdraw"";
""1181_fallback"" -> ""1181_purchaseTokens"";
""1181_purchaseTokens"" -> ""1181_ethereumToTokens_"";
""1181_buy"" -> ""1181_purchaseTokens"";
""1181_withdraw"" -> ""1181_onlyStronghands"";
""1181_calculateTokensReceived"" -> ""1181_ethereumToTokens_"";
""1181_buyPrice"" -> ""1181_tokensToEthereum_"";
}
"
0x2e98a6804e4b6c832ed0ca876a943abd3400b224.sol,Bela,"contract Bela is MintableToken, HasNoEther { using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint public ownerTimeLastMinted; uint public ownerMintRate; uint private globalMintRate; uint public totalBelaStaked; struct TokenStakeData { uint initialStakeBalance; uint initialStakeTime; uint initialStakePercentage; address stakeSplitAddress; }",1,"subgraph cluster_1228_Bela {
label=""Bela"";
""1228_stakeTokens"" [label=""stakeTokens""];
""1228_calculateFraction"" [label=""calculateFraction""];
""1228_calculateStakeGains"" [label=""calculateStakeGains""];
""1228_stakeBelaSplit"" [label=""stakeBelaSplit""];
""1228_stakeBela"" [label=""stakeBela""];
""1228_ownerClaim"" [label=""ownerClaim""];
""1228_getStakedBalance"" [label=""getStakedBalance""];
""1228_claimStake"" [label=""claimStake""];
""1228_Bela"" [label=""Bela""];
""1228_calculateMintTotal"" [label=""calculateMintTotal""];
""1228_stakeBela"" -> ""1228_stakeTokens"";
""1228_Bela"" -> ""1228_mint"";
""1228_claimStake"" -> ""1228_mint"";
""1228_stakeTokens"" -> ""1228_calculateFraction"";
""1228_Bela"" -> ""1228_calculateFraction"";
""1228_ownerClaim"" -> ""1228_calculateMintTotal"";
""1228_ownerClaim"" -> ""1228_onlyOwner"";
""1228_stakeBelaSplit"" -> ""1228_stakeTokens"";
""1228_calculateStakeGains"" -> ""1228_calculateMintTotal"";
""1228_calculateStakeGains"" -> ""1228_calculateFraction"";
""1228_claimStake"" -> ""1228_calculateStakeGains"";
""1228_ownerClaim"" -> ""1228_mint"";
}
"
0xf0f0ec744a717807a24322d0e2fecc6b73c2d752.sol,DragonKing,contract DragonKing is mortal { struct Character { uint8 characterType; uint128 value; address owner; uint64 purchaseTimestamp; },1,"subgraph cluster_2603_DragonKing {
label=""DragonKing"";
""2603_collectFees"" [label=""collectFees""];
""2603_replaceCharacter"" [label=""replaceCharacter""];
""2603_addCharacters"" [label=""addCharacters""];
""2603_getNumDragons"" [label=""getNumDragons""];
""2603_distribute"" [label=""distribute""];
""2603_hitCharacter"" [label=""hitCharacter""];
""2603_setProtectionPrice"" [label=""setProtectionPrice""];
""2603_protectCharacter"" [label=""protectCharacter""];
""2603_setFee"" [label=""setFee""];
""2603_setPercentageToKill"" [label=""setPercentageToKill""];
""2603_getFees"" [label=""getFees""];
""2603_setFightFactor"" [label=""setFightFactor""];
""2603_setMaxCharacters"" [label=""setMaxCharacters""];
""2603_receiveApproval"" [label=""receiveApproval""];
""2603_toUint32"" [label=""toUint32""];
""2603_setTeleportPrice"" [label=""setTeleportPrice""];
""2603_setPrices"" [label=""setPrices""];
""2603_getRandomDragon"" [label=""getRandomDragon""];
""2603_exit"" [label=""exit""];
""2603_teleportKnight"" [label=""teleportKnight""];
""2603_fight"" [label=""fight""];
""2603_DragonKing"" [label=""DragonKing""];
""2603_sellCharacter"" [label=""sellCharacter""];
""2603_getCharacter"" [label=""getCharacter""];
""2603_getNumKnights"" [label=""getNumKnights""];
""2603_findOldest"" [label=""findOldest""];
""2603_generateRandomNumber"" [label=""generateRandomNumber""];
""2603_getCharacterIndex"" [label=""getCharacterIndex""];
""2603_addCharacter"" [label=""addCharacter""];
""2603_get10Characters"" [label=""get10Characters""];
""2603_triggerVolcanoEruption"" [label=""triggerVolcanoEruption""];
""2603_payOut"" [label=""payOut""];
""2603_stop"" [label=""stop""];
""2603_withdraw"" [label=""withdraw""];
""2603_setEruptionThreshold"" [label=""setEruptionThreshold""];
""2603_fight"" -> ""2603_hitCharacter"";
""2603_collectFees"" -> ""2603_getFees"";
""2603_setMaxCharacters"" -> ""2603_onlyOwner"";
""2603_DragonKing"" -> ""2603_onlyOwner"";
""2603_getRandomDragon"" -> ""2603_generateRandomNumber"";
""2603_fight"" -> ""2603_getCharacterIndex"";
""2603_fight"" -> ""2603_getRandomDragon"";
""2603_stop"" -> ""2603_withdraw"";
""2603_receiveApproval"" -> ""2603_teleportKnight"";
""2603_fight"" -> ""2603_generateRandomNumber"";
""2603_addCharacters"" -> ""2603_addCharacter"";
""2603_fight"" -> ""2603_findOldest"";
""2603_sellCharacter"" -> ""2603_findOldest"";
""2603_setFee"" -> ""2603_onlyOwner"";
""2603_triggerVolcanoEruption"" -> ""2603_hitCharacter"";
""2603_withdraw"" -> ""2603_onlyOwner"";
""2603_sellCharacter"" -> ""2603_replaceCharacter"";
""2603_setPrices"" -> ""2603_onlyOwner"";
""2603_hitCharacter"" -> ""2603_replaceCharacter"";
""2603_stop"" -> ""2603_onlyOwner"";
""2603_setProtectionPrice"" -> ""2603_onlyOwner"";
""2603_exit"" -> ""2603_findOldest"";
""2603_setFightFactor"" -> ""2603_onlyOwner"";
""2603_teleportKnight"" -> ""2603_addCharacter"";
""2603_collectFees"" -> ""2603_onlyOwner"";
""2603_stop"" -> ""2603_kill"";
""2603_exit"" -> ""2603_replaceCharacter"";
""2603_setEruptionThreshold"" -> ""2603_onlyOwner"";
""2603_receiveApproval"" -> ""2603_protectCharacter"";
""2603_distribute"" -> ""2603_findOldest"";
""2603_triggerVolcanoEruption"" -> ""2603_distribute"";
""2603_sellCharacter"" -> ""2603_getCharacterIndex"";
""2603_setPercentageToKill"" -> ""2603_onlyOwner"";
""2603_receiveApproval"" -> ""2603_toUint32"";
""2603_payOut"" -> ""2603_onlyOwner"";
""2603_triggerVolcanoEruption"" -> ""2603_generateRandomNumber"";
""2603_stop"" -> ""2603_payOut"";
""2603_setTeleportPrice"" -> ""2603_onlyOwner"";
}
"
0xf449ef0007c98761bdfced7ab1d0351f71d30468.sol,Danetonbit,"contract Danetonbit { uint256 public totalSupply = 8*10**28; string public name = ; uint8 public decimals = 18; string public symbol = ; mapping (address => uint256) balances; event Transfer(address indexed _from, address indexed _to, uint256 _value); constructor() public { balances[0x5C8E4172D2bB9A558c6bbE9cA867461E9Bb5C502] = totalSupply; }",1,"subgraph cluster_100_Danetonbit {
label=""Danetonbit"";
""100_transfer"" [label=""transfer""];
""100_fallback"" [label=""fallback""];
""100_constructor"" [label=""constructor""];
""100_balanceOf"" [label=""balanceOf""];
}
"
0xda7c27c04f66842faf20644814b644e25e1766ea.sol,ERC20OptionsConverter,"contract ERC20OptionsConverter is BaseOptionsConverter, TimeSource, Math { address esopAddress; uint32 exercisePeriodDeadline; mapping(address => uint) internal balances; uint public totalSupply; uint32 public optionsConversionDeadline; event Transfer(address indexed from, address indexed to, uint value); modifier converting() { if (currentTime() >= exercisePeriodDeadline) throw; _; }",1,"subgraph cluster_985_ERC20OptionsConverter {
label=""ERC20OptionsConverter"";
""985_balanceOf"" [label=""balanceOf""];
""985_ERC20OptionsConverter"" [label=""ERC20OptionsConverter""];
""985_getESOP"" [label=""getESOP""];
""985_exerciseOptions"" [label=""exerciseOptions""];
""985_fallback"" [label=""fallback""];
""985_transfer"" [label=""transfer""];
""985_getExercisePeriodDeadline"" [label=""getExercisePeriodDeadline""];
""985_exerciseOptions"" -> ""985_safeAdd"";
""985_transfer"" -> ""985_converted"";
""985_exerciseOptions"" -> ""985_onlyESOP"";
""985_exerciseOptions"" -> ""985_converting"";
}
"
0xf24c63438ae11cb3facb84006f4cfa75458126ed.sol,EtherDogBase,"contract EtherDogBase is EtherDogACL { event Birth(address owner, uint256 EtherDogId, uint256 matronId, uint256 sireId, uint256 genes, uint256 generation); event Transfer(address from, address to, uint256 tokenId); struct EtherDog { uint256 genes; uint64 birthTime; uint64 cooldownEndBlock; uint32 matronId; uint32 sireId; uint32 siringWithId; uint16 cooldownIndex; uint16 generation; }",1,"subgraph cluster_761_EtherDogBase {
label=""EtherDogBase"";
""761__createEtherDog"" [label=""_createEtherDog""];
""761__transfer"" [label=""_transfer""];
""761__createEtherDogWithTime"" [label=""_createEtherDogWithTime""];
""761_setSecondsPerBlock"" [label=""setSecondsPerBlock""];
""761_setSecondsPerBlock"" -> ""761_onlyCLevel"";
""761__createEtherDogWithTime"" -> ""761__transfer"";
""761__createEtherDog"" -> ""761__transfer"";
}
"
0x572154643036f421e1f3c054eb9cfa36dd9de4b2.sol,SFI,"contract SFI { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function SFI() public { totalSupply = 100000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_SFI {
label=""SFI"";
""355_transferFrom"" [label=""transferFrom""];
""355_burnFrom"" [label=""burnFrom""];
""355_burn"" [label=""burn""];
""355_approve"" [label=""approve""];
""355_transfer"" [label=""transfer""];
""355_SFI"" [label=""SFI""];
""355_approveAndCall"" [label=""approveAndCall""];
""355__transfer"" [label=""_transfer""];
""355_approveAndCall"" -> ""355_approve"";
""355_transfer"" -> ""355__transfer"";
""355_transferFrom"" -> ""355__transfer"";
}
"
0x71972877d68acf22114e05578364a307cafe2885.sol,SafeMath,"contract SafeMath { function safeMul(uint256 a, uint256 b) internal constant returns (uint256 ) { uint256 c = a * b; assert(a == 0 || c / a == b); return c; }",1,"subgraph cluster_112_SafeMath {
label=""SafeMath"";
""112_safeMul"" [label=""safeMul""];
""112_safeAdd"" [label=""safeAdd""];
""112_safeSub"" [label=""safeSub""];
""112_safeDiv"" [label=""safeDiv""];
}
"
0x360abb53840302d4b4b119d2004a856f1151366b.sol,BaseContract,"contract BaseContract is AssemblyBase, ERC721 { using SafeMath for uint; address wallet1; address wallet2; address wallet3; address wallet4; address wallet5; string public constant name = ; string public constant symbol = ; uint[] dHead; uint[] dHousing; uint[] dLeftHand; uint[] dRightHand; uint[] dPelvic; uint[] dLeftLeg; uint[] dRightLeg; uint randNonce = 0; function BaseContract() public { Detail memory _detail = Detail(0, 0, 0); details.push(_detail); Assembly memory _ass = Assembly(0, 0, 0, 0, 0, new uint64[](0), 0, 0); assemblys.push(_ass); }",1,"subgraph cluster_1952_BaseContract {
label=""BaseContract"";
""1952__approve"" [label=""_approve""];
""1952_getAllRightLeg"" [label=""getAllRightLeg""];
""1952_getAllHousing"" [label=""getAllHousing""];
""1952__ownsRobot"" [label=""_ownsRobot""];
""1952_transfer"" [label=""transfer""];
""1952_ownerOf"" [label=""ownerOf""];
""1952_transferRobot"" [label=""transferRobot""];
""1952_approve"" [label=""approve""];
""1952_transferFromRobot"" [label=""transferFromRobot""];
""1952_tokensOfOwner"" [label=""tokensOfOwner""];
""1952_getAllPelvic"" [label=""getAllPelvic""];
""1952_balanceOfRobots"" [label=""balanceOfRobots""];
""1952__approveRobot"" [label=""_approveRobot""];
""1952_transferFrom"" [label=""transferFrom""];
""1952__owns"" [label=""_owns""];
""1952_getAllLeftLeg"" [label=""getAllLeftLeg""];
""1952_getAllLeftHand"" [label=""getAllLeftHand""];
""1952_approveRobot"" [label=""approveRobot""];
""1952_setWallet"" [label=""setWallet""];
""1952_ownerOfRobot"" [label=""ownerOfRobot""];
""1952_totalSupply"" [label=""totalSupply""];
""1952_balanceOf"" [label=""balanceOf""];
""1952__approvedFor"" [label=""_approvedFor""];
""1952_getAllHead"" [label=""getAllHead""];
""1952_BaseContract"" [label=""BaseContract""];
""1952_transferOnWallet"" [label=""transferOnWallet""];
""1952_getAllRightHand"" [label=""getAllRightHand""];
""1952_transferFromRobot"" -> ""1952__transferRobot"";
""1952_approveRobot"" -> ""1952__approveRobot"";
""1952_transferFrom"" -> ""1952__owns"";
""1952_transferRobot"" -> ""1952__transferRobot"";
""1952_approve"" -> ""1952__owns"";
""1952_approve"" -> ""1952__approve"";
""1952_setWallet"" -> ""1952_onlyOwner"";
""1952_transfer"" -> ""1952__transfer"";
""1952_tokensOfOwner"" -> ""1952_totalSupply"";
""1952_transferRobot"" -> ""1952__transfer"";
""1952_tokensOfOwner"" -> ""1952_balanceOf"";
""1952_transferFrom"" -> ""1952__transfer"";
""1952_transferFromRobot"" -> ""1952__ownsRobot"";
""1952_approveRobot"" -> ""1952__ownsRobot"";
}
"
0xcf91ddfd551c8eee7dc88372acd8c49a0d8726a3.sol,Alecrypto,"contract Alecrypto is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Alecrypto() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x86F35b8BFcd841e8CC6719cCC1B4eeFeF1B3F252] = _totalSupply; Transfer(address(0), 0x86F35b8BFcd841e8CC6719cCC1B4eeFeF1B3F252, _totalSupply); }",1,"subgraph cluster_543_Alecrypto {
label=""Alecrypto"";
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_Alecrypto"" [label=""Alecrypto""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x32df1ab2161317adbeafd47bcb30a2f1a806ccfb.sol,TokenBaseAsset,contract TokenBaseAsset { address mOwner = msg.sender; string public mCompany; mapping(string => string) mTokens; modifier isOwner() { require(msg.sender == mOwner); _; },1,"subgraph cluster_85_TokenBaseAsset {
label=""TokenBaseAsset"";
""85_getToken"" [label=""getToken""];
""85_TokenBaseAsset"" [label=""TokenBaseAsset""];
""85_addToken"" [label=""addToken""];
""85_removeToken"" [label=""removeToken""];
}
"
0x4ce68b018062cfccd66c7fbbb2cc1f0161d22150.sol,BOWTERC20,"contract BOWTERC20 { string public name = ; string public symbol = ; uint256 public decimals = 18; uint256 public totalSupply = 1*1000*1000*1000*10**decimals; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function BOWTERC20( ) public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_350_BOWTERC20 {
label=""BOWTERC20"";
""350_approveAndCall"" [label=""approveAndCall""];
""350_transfer"" [label=""transfer""];
""350_burn"" [label=""burn""];
""350_transferFrom"" [label=""transferFrom""];
""350_burnFrom"" [label=""burnFrom""];
""350_BOWTERC20"" [label=""BOWTERC20""];
""350_approve"" [label=""approve""];
""350__transfer"" [label=""_transfer""];
""350_transferFrom"" -> ""350__transfer"";
""350_approveAndCall"" -> ""350_approve"";
""350_transfer"" -> ""350__transfer"";
}
"
0x5c0669c6718bf35112d4e643fe80bf7fb06dedeb.sol,NOUR,"contract NOUR { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_463_NOUR {
label=""NOUR"";
""463_allowance"" [label=""allowance""];
""463_constructor"" [label=""constructor""];
""463_balanceOf"" [label=""balanceOf""];
""463_setLock"" [label=""setLock""];
""463_approve"" [label=""approve""];
""463_transfer"" [label=""transfer""];
""463_transferOwnership"" [label=""transferOwnership""];
""463_transferFrom"" [label=""transferFrom""];
""463_setLock"" -> ""463_onlyOwner"";
""463_transferOwnership"" -> ""463_onlyOwner"";
}
"
0x41ff17293fe3d87d4b6c9dc050ce17694145e1bc.sol,StandardToken,"contract StandardToken is ERC20, BasicToken { mapping (address => mapping (address => uint256)) allowed; function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) { require(_to != address(0)); uint256 _allowance = allowed[_from][msg.sender]; balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = _allowance.sub(_value); Transfer(_from, _to, _value); return true; }",1,"subgraph cluster_620_StandardToken {
label=""StandardToken"";
""620_allowance"" [label=""allowance""];
""620_decreaseApproval"" [label=""decreaseApproval""];
""620_increaseApproval"" [label=""increaseApproval""];
""620_approveAndCall"" [label=""approveAndCall""];
""620_transferFrom"" [label=""transferFrom""];
""620_approve"" [label=""approve""];
""620_approveAndCall"" -> ""620_canTransfer"";
""620_approveAndCall"" -> ""620_approve"";
""620_increaseApproval"" -> ""620_canTransfer"";
""620_approve"" -> ""620_canTransfer"";
""620_allowance"" -> ""620_canTransfer"";
""620_decreaseApproval"" -> ""620_canTransfer"";
""620_transferFrom"" -> ""620_canTransfer"";
}
"
0x2feecd120111e5aab7b3a22fe1177a392cfe0f4e.sol,AG,"contract AG is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 160000000000000000; balances[0xe4eD75a0A590848eE440a473bCBe4aE6a20D424A] = _totalSupply; emit Transfer(address(0), 0xe4eD75a0A590848eE440a473bCBe4aE6a20D424A, _totalSupply); }",1,"subgraph cluster_543_AG {
label=""AG"";
""543_constructor"" [label=""constructor""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x654cdd809f86d1414fcb5563b383dbeccfb8b995.sol,VOCC_I057_20181211,"contract VOCC_I057_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I057_20181211 {
label=""VOCC_I057_20181211"";
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
}
"
0x37e1160184f7dd29f00b78c050bf13224780b0b0.sol,YCCToken,"contract YCCToken { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function YCCToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_338_YCCToken {
label=""YCCToken"";
""338__transfer"" [label=""_transfer""];
""338_burn"" [label=""burn""];
""338_transfer"" [label=""transfer""];
""338_YCCToken"" [label=""YCCToken""];
""338_burnFrom"" [label=""burnFrom""];
""338_approve"" [label=""approve""];
""338_transferFrom"" [label=""transferFrom""];
""338_approveAndCall"" [label=""approveAndCall""];
""338_approveAndCall"" -> ""338_approve"";
""338_transfer"" -> ""338__transfer"";
""338_transferFrom"" -> ""338__transfer"";
}
"
0x742a56a727dac07e0889920b8887d482325f659b.sol,InfiniCoin,"contract InfiniCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 2; _totalSupply = 2100000; balances[0x70Fe2224D604424e7e574Dc0E0B96DB609Bb40B9] = _totalSupply; emit Transfer(address(0), 0x70Fe2224D604424e7e574Dc0E0B96DB609Bb40B9, _totalSupply); }",1,"subgraph cluster_543_InfiniCoin {
label=""InfiniCoin"";
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_constructor"" [label=""constructor""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0xce78ab22cd0331a52af7bb4b622edfa792819d47.sol,RUDAWORLD,"contract RUDAWORLD is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function RUDAWORLD() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x524D38666F6B53E25DaB7cEcE0D72585970Bd6ad] = _totalSupply; Transfer(address(0), 0x524D38666F6B53E25DaB7cEcE0D72585970Bd6ad, _totalSupply); }",1,"subgraph cluster_543_RUDAWORLD {
label=""RUDAWORLD"";
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_balanceOf"" [label=""balanceOf""];
""543_RUDAWORLD"" [label=""RUDAWORLD""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x031f7f7749247e0913aace12002cf61f039cd7b1.sol,WWECoin,"contract WWECoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function WWECoin() public { symbol = ; name = ; decimals = 5; _totalSupply = 5000000000000; balances[0x92c826CA75FA55a64a4688F14863Fe21c04eE02C] = _totalSupply; Transfer(address(0), 0x92c826CA75FA55a64a4688F14863Fe21c04eE02C, _totalSupply); }",1,"subgraph cluster_543_WWECoin {
label=""WWECoin"";
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_WWECoin"" [label=""WWECoin""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x741f58cd68d24f361cc0ee0d3aaf7df2bf16132e.sol,BlockonixToken,"contract BlockonixToken is IERC20, Ownable, Vestable, HasAddresses, VestingPeriods, IsUpgradable { using SafeMathLib for uint256; uint256 public constant totalTokenSupply = 1009208335 * 10**16; uint256 public burntTokens; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; mapping (address => uint256) public balances; mapping(address => mapping(address => uint256)) approved; event Upgraded(address _owner, uint256 amount); constructor() public { uint256 lockedTokenPerAddress = 280335648611111000000000; balances[founder1FirstLockup] = lockedTokenPerAddress; balances[founder2FirstLockup] = lockedTokenPerAddress; balances[founder3FirstLockup] = lockedTokenPerAddress; balances[founder1SecondLockup] = lockedTokenPerAddress; balances[founder2SecondLockup] = lockedTokenPerAddress; balances[founder3SecondLockup] = lockedTokenPerAddress; balances[founder1ThirdLockup] = lockedTokenPerAddress; balances[founder2ThirdLockup] = lockedTokenPerAddress; balances[founder3ThirdLockup] = lockedTokenPerAddress; emit Transfer(address(this), founder1FirstLockup, lockedTokenPerAddress); emit Transfer(address(this), founder2FirstLockup, lockedTokenPerAddress); emit Transfer(address(this), founder3FirstLockup, lockedTokenPerAddress); emit Transfer(address(this), founder1SecondLockup, lockedTokenPerAddress); emit Transfer(address(this), founder2SecondLockup, lockedTokenPerAddress); emit Transfer(address(this), founder3SecondLockup, lockedTokenPerAddress); emit Transfer(address(this), founder1ThirdLockup, lockedTokenPerAddress); emit Transfer(address(this), founder2ThirdLockup, lockedTokenPerAddress); emit Transfer(address(this), founder3ThirdLockup, lockedTokenPerAddress); addVestingAddress(founder1FirstLockup, firstLockup); addVestingAddress(founder2FirstLockup, firstLockup); addVestingAddress(founder3FirstLockup, firstLockup); addVestingAddress(founder1SecondLockup, secondLockup); addVestingAddress(founder2SecondLockup, secondLockup); addVestingAddress(founder3SecondLockup, secondLockup); addVestingAddress(founder1ThirdLockup, thirdLockup); addVestingAddress(founder2ThirdLockup, thirdLockup); addVestingAddress(founder3ThirdLockup, thirdLockup); }",1,"subgraph cluster_853_BlockonixToken {
label=""BlockonixToken"";
""853_allowance"" [label=""allowance""];
""853_balanceOf"" [label=""balanceOf""];
""853_approve"" [label=""approve""];
""853_burn"" [label=""burn""];
""853_upgrade"" [label=""upgrade""];
""853__transfer"" [label=""_transfer""];
""853_transfer"" [label=""transfer""];
""853_transferFrom"" [label=""transferFrom""];
""853_totalSupply"" [label=""totalSupply""];
""853_constructor"" [label=""constructor""];
""853_transfer"" -> ""853__transfer"";
""853_approve"" -> ""853_checkVestingCondition"";
""853_constructor"" -> ""853_addVestingAddress"";
""853_transfer"" -> ""853_checkVestingCondition"";
""853_transferFrom"" -> ""853__transfer"";
""853_transferFrom"" -> ""853_checkVestingCondition"";
}
"
0x409de70d8ad0135e6fd91f343899b93d903c998b.sol,RegularToken,"contract RegularToken is Token { function transfer(address _to, uint _value) returns (bool) { if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_355_UnboundedRegularToken {
label=""UnboundedRegularToken"";
""355_transferFrom"" [label=""transferFrom""];
}
"
0x0747af71e2034bc2d2fcad388a264f5ccdff505c.sol,BlockVentureCoin,"contract BlockVentureCoin is ERC20 { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping( address => uint256) public balanceOf; mapping( uint => address) public accountIndex; uint accountCount; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed spender, uint value); event Message ( address a, uint256 amount ); event Burn(address indexed from, uint256 value); function BlockVentureCoin() { uint supply = 10000000000000000; appendTokenHolders( msg.sender ); balanceOf[msg.sender] = supply; totalSupply = supply; name = ; symbol = ; decimals = 8; }",1,"subgraph cluster_542_BlockVentureCoin {
label=""BlockVentureCoin"";
""542_BlockVentureCoin"" [label=""BlockVentureCoin""];
""542_balanceOf"" [label=""balanceOf""];
""542_approve"" [label=""approve""];
""542_allowance"" [label=""allowance""];
""542_approveAndCall"" [label=""approveAndCall""];
""542_transferFrom"" [label=""transferFrom""];
""542_burnFrom"" [label=""burnFrom""];
""542_getAccountCount"" [label=""getAccountCount""];
""542_getAddress"" [label=""getAddress""];
""542_appendTokenHolders"" [label=""appendTokenHolders""];
""542_totalSupply"" [label=""totalSupply""];
""542_burn"" [label=""burn""];
""542_transfer"" [label=""transfer""];
""542_transfer"" -> ""542_appendTokenHolders"";
""542_approveAndCall"" -> ""542_approve"";
""542_BlockVentureCoin"" -> ""542_appendTokenHolders"";
""542_transferFrom"" -> ""542_appendTokenHolders"";
}
"
0x700fc72abc067e90111a391d0fae8ce8c799b38f.sol,MultiTransfer,"contract MultiTransfer { address[] public Airdrop2; function multiTransfer(ERC20 token, address[] Airdrop2, uint256 amount) public { for (uint256 i = 0; i < Airdrop2.length; i++) { token.transfer( Airdrop2[i], amount * 10 ** 18); }",1,"subgraph cluster_50_MultiTransfer {
label=""MultiTransfer"";
""50_multiTransfer"" [label=""multiTransfer""];
}
"
0x70aa0247de23fdd3b8558be98747a8c286affd54.sol,Digital_1,"contract Digital_1 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_379_Digital_1 {
label=""Digital_1"";
""379_transferFrom"" [label=""transferFrom""];
""379_approve"" [label=""approve""];
""379_approveAndCall"" [label=""approveAndCall""];
""379_burnFrom"" [label=""burnFrom""];
""379__transfer"" [label=""_transfer""];
""379_burn"" [label=""burn""];
""379_TokenERC20"" [label=""TokenERC20""];
""379_transfer"" [label=""transfer""];
""379_transfer"" -> ""379__transfer"";
""379_transferFrom"" -> ""379__transfer"";
""379_approveAndCall"" -> ""379_approve"";
}
"
0x0eb152d2bba8af722d7e296a1f223d819c3bbb1f.sol,CarbonExchangeCoinToken,"contract CarbonExchangeCoinToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; uint256 public decimals = 18; string public tokenName; string public tokenSymbol; uint minBalanceForAccounts ; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function CarbonExchangeCoinToken() public { owner = msg.sender; totalSupply = 50000000000000000000000000000; balanceOf[owner]=totalSupply; tokenName=; tokenSymbol=; }",1,"subgraph cluster_682_CarbonExchangeCoinToken {
label=""CarbonExchangeCoinToken"";
""682_freezeAccount"" [label=""freezeAccount""];
""682_setMinBalance"" [label=""setMinBalance""];
""682_buy"" [label=""buy""];
""682_setTokenSymbol"" [label=""setTokenSymbol""];
""682_sell"" [label=""sell""];
""682_setTokenName"" [label=""setTokenName""];
""682_mintToken"" [label=""mintToken""];
""682__transfer"" [label=""_transfer""];
""682_setPrices"" [label=""setPrices""];
""682_CarbonExchangeCoinToken"" [label=""CarbonExchangeCoinToken""];
""682_buy"" -> ""682__transfer"";
""682_setTokenName"" -> ""682_onlyOwner"";
""682_freezeAccount"" -> ""682_onlyOwner"";
""682_mintToken"" -> ""682_onlyOwner"";
""682_setMinBalance"" -> ""682_onlyOwner"";
""682_setTokenSymbol"" -> ""682_onlyOwner"";
""682_setPrices"" -> ""682_onlyOwner"";
""682_sell"" -> ""682__transfer"";
}
"
0x2154f9d7da8bf221e102197195531c82cee1677e.sol,AIUToken,"contract AIUToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_AIUToken {
label=""AIUToken"";
""361_approve"" [label=""approve""];
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361_constructor"" [label=""constructor""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x46570e37d496855b391573fd567599e567a73cb4.sol,VOCC_I043_20181211,"contract VOCC_I043_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I043_20181211 {
label=""VOCC_I043_20181211"";
""189_approve"" [label=""approve""];
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
}
"
0x485f3b5ec637187749fd643e517662bd99a4124d.sol,cardpoints,"contract cardpoints is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function cardpoints() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000; balances[0x35B92cb97A07389f0092779844572ae89BF8983a] = _totalSupply; emit Transfer(address(0), 0x35B92cb97A07389f0092779844572ae89BF8983a, _totalSupply); }",1,"subgraph cluster_543_cardpoints {
label=""cardpoints"";
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_totalSupply"" [label=""totalSupply""];
""543_cardpoints"" [label=""cardpoints""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x83ba853b8196bb51c148dd762a827c703b156450.sol,FeeWallet,"contract FeeWallet is IFeeWallet, Ownable, Members { address public serviceAccount; uint public servicePercentage; uint public affiliatePercentage; mapping (address => uint) public pendingWithdrawals; function FeeWallet( address _serviceAccount, uint _servicePercentage, uint _affiliatePercentage) public { serviceAccount = _serviceAccount; servicePercentage = _servicePercentage; affiliatePercentage = _affiliatePercentage; }",1,"subgraph cluster_455_FeeWallet {
label=""FeeWallet"";
""455_changeServicePercentage"" [label=""changeServicePercentage""];
""455_withdraw"" [label=""withdraw""];
""455_changeAffiliatePercentage"" [label=""changeAffiliatePercentage""];
""455_getAffiliateAmount"" [label=""getAffiliateAmount""];
""455_changeServiceAccount"" [label=""changeServiceAccount""];
""455_collect"" [label=""collect""];
""455_getFee"" [label=""getFee""];
""455_FeeWallet"" [label=""FeeWallet""];
""455_changeAffiliatePercentage"" -> ""455_onlyOwner"";
""455_changeServiceAccount"" -> ""455_onlyOwner"";
""455_collect"" -> ""455_onlyMembers"";
""455_collect"" -> ""455_getAffiliateAmount"";
""455_changeServicePercentage"" -> ""455_onlyOwner"";
}
"
0xebaa1766c577a1ea5833f0502bd9984aef22c61f.sol,DadiSale,contract DadiSale is Ownable { using SafeMath for uint256; StandardToken public token; address[] public saleWallets; struct WhitelistUser { uint256 pledged; uint index; },1,"subgraph cluster_1600_DadiSale {
label=""DadiSale"";
""1600_setTokenDistribution"" [label=""setTokenDistribution""];
""1600_fallback"" [label=""fallback""];
""1600_getRandom"" [label=""getRandom""];
""1600_isInvested"" [label=""isInvested""];
""1600_closeSale"" [label=""closeSale""];
""1600_distributeToAlternateAddress"" [label=""distributeToAlternateAddress""];
""1600_offlineTransaction"" [label=""offlineTransaction""];
""1600_isValidContribution"" [label=""isValidContribution""];
""1600_setState"" [label=""setState""];
""1600_getWhitelistUser"" [label=""getWhitelistUser""];
""1600_updateEthRate"" [label=""updateEthRate""];
""1600_calculateTokens"" [label=""calculateTokens""];
""1600_redistributeTokens"" [label=""redistributeTokens""];
""1600_forwardFunds"" [label=""forwardFunds""];
""1600_addToInvestor"" [label=""addToInvestor""];
""1600_distributeTokens"" [label=""distributeTokens""];
""1600_getInvestor"" [label=""getInvestor""];
""1600_getTokensPurchased"" [label=""getTokensPurchased""];
""1600_updateTokenSupply"" [label=""updateTokenSupply""];
""1600_getInvestorCount"" [label=""getInvestorCount""];
""1600_getBalance"" [label=""getBalance""];
""1600_DadiSale"" [label=""DadiSale""];
""1600_ethToUsd"" [label=""ethToUsd""];
""1600_getTokensAvailable"" [label=""getTokensAvailable""];
""1600_isWhitelisted"" [label=""isWhitelisted""];
""1600_addSaleWallet"" [label=""addSaleWallet""];
""1600_finalizeSale"" [label=""finalizeSale""];
""1600_updateSaleParameters"" [label=""updateSaleParameters""];
""1600_startSale"" [label=""startSale""];
""1600_buyTokens"" [label=""buyTokens""];
""1600_addWhitelistUser"" [label=""addWhitelistUser""];
""1600_buyTokens"" -> ""1600_updateSaleParameters"";
""1600_fallback"" -> ""1600_nonZero"";
""1600_closeSale"" -> ""1600_onlyOwner"";
""1600_addWhitelistUser"" -> ""1600_isWhitelisted"";
""1600_redistributeTokens"" -> ""1600_onlyOwner"";
""1600_startSale"" -> ""1600_onlyOwner"";
""1600_distributeTokens"" -> ""1600_onlyOwner"";
""1600_buyTokens"" -> ""1600_getTokensAvailable"";
""1600_startSale"" -> ""1600_updateEthRate"";
""1600_setState"" -> ""1600_onlyOwner"";
""1600_getWhitelistUser"" -> ""1600_isWhitelisted"";
""1600_fallback"" -> ""1600_buyTokens"";
""1600_buyTokens"" -> ""1600_isWhitelisted"";
""1600_offlineTransaction"" -> ""1600_onlyOwner"";
""1600_addToInvestor"" -> ""1600_isInvested"";
""1600_offlineTransaction"" -> ""1600_updateSaleParameters"";
""1600_getInvestor"" -> ""1600_isInvested"";
""1600_isValidContribution"" -> ""1600_ethToUsd"";
""1600_buyTokens"" -> ""1600_forwardFunds"";
""1600_updateEthRate"" -> ""1600_onlyOwner"";
""1600_addSaleWallet"" -> ""1600_onlyOwner"";
""1600_addWhitelistUser"" -> ""1600_onlyOwner"";
""1600_offlineTransaction"" -> ""1600_addToInvestor"";
""1600_forwardFunds"" -> ""1600_getRandom"";
""1600_buyTokens"" -> ""1600_calculateTokens"";
""1600_finalizeSale"" -> ""1600_forwardFunds"";
""1600_closeSale"" -> ""1600_getTokensAvailable"";
""1600_buyTokens"" -> ""1600_isValidContribution"";
""1600_offlineTransaction"" -> ""1600_getTokensAvailable"";
""1600_closeSale"" -> ""1600_updateSaleParameters"";
""1600_setTokenDistribution"" -> ""1600_onlyOwner"";
""1600_updateTokenSupply"" -> ""1600_onlyOwner"";
""1600_distributeToAlternateAddress"" -> ""1600_onlyOwner"";
""1600_buyTokens"" -> ""1600_addToInvestor"";
""1600_finalizeSale"" -> ""1600_onlyOwner"";
}
"
0x92b12168afde3b068fdb201ff42c407be27d15ad.sol,Gravestone,"contract Gravestone { string public fullname; string public birth_date; string public death_date; string public epitaph; Worship[] public worships; uint public worship_count; constructor(string _fullname,string _birth_date,string _death_date,string _epitaph) public { fullname = _fullname; birth_date = _birth_date; death_date = _death_date; epitaph = _epitaph; }",1,"subgraph cluster_80_Gravestone {
label=""Gravestone"";
""80_constructor"" [label=""constructor""];
""80_do_worship"" [label=""do_worship""];
}
"
0xaa70bc3e835e12d6902a8e4da77db4842e519c42.sol,DhaCoin,"contract DhaCoin is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function DhaCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_622_DhaCoin {
label=""DhaCoin"";
""622_freezeAccount"" [label=""freezeAccount""];
""622_buy"" [label=""buy""];
""622_mintToken"" [label=""mintToken""];
""622_DhaCoin"" [label=""DhaCoin""];
""622_sell"" [label=""sell""];
""622_setPrices"" [label=""setPrices""];
""622__transfer"" [label=""_transfer""];
""622_freezeAccount"" -> ""622_onlyOwner"";
""622_setPrices"" -> ""622_onlyOwner"";
""622_DhaCoin"" -> ""622_TokenERC20"";
""622_sell"" -> ""622__transfer"";
""622_buy"" -> ""622__transfer"";
""622_mintToken"" -> ""622_onlyOwner"";
}
"
0x54053ea92b9366182dbbf3e4583c8a5496bb2903.sol,CCD_KOHLE_3_20190411,"contract CCD_KOHLE_3_20190411 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_CCD_KOHLE_3_20190411 {
label=""CCD_KOHLE_3_20190411"";
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0xdcaa6f95fcdd339b80631fed7eb213d653c21b12.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_balanceOf"" [label=""balanceOf""];
""256_transferFrom"" [label=""transferFrom""];
""256_approve"" [label=""approve""];
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
}
"
0x4d538b9b3c1c3f58707a9689b5bc3d860c011242.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_approve"" [label=""approve""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" [label=""transfer""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x5838f878000fe44b6f6c677bbf839e12f097c147.sol,Q_GAME,contract Q_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_Q_GAME {
label=""Q_GAME"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_set_game"" [label=""set_game""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_Try"" [label=""Try""];
}
"
0x1e5e66fd8c22dea99d8451ee8bb1e941b70b723f.sol,SWAP,contract SWAP is SafeMath{ string public name; string public symbol; uint256 public decimals; uint256 public totalSupply; address public owner; modifier onlyOwner(){ require(msg.sender == owner); _; },1,"subgraph cluster_626_SWAP {
label=""SWAP"";
""626_transfer"" [label=""transfer""];
""626__transfer"" [label=""_transfer""];
""626_transferFrom"" [label=""transferFrom""];
""626_withdraw"" [label=""withdraw""];
""626_burn"" [label=""burn""];
""626_create"" [label=""create""];
""626_setName"" [label=""setName""];
""626_constructor"" [label=""constructor""];
""626_setDecimals"" [label=""setDecimals""];
""626_setSymbol"" [label=""setSymbol""];
""626_fallback"" [label=""fallback""];
""626_getOwner"" [label=""getOwner""];
""626_approve"" [label=""approve""];
""626_create"" -> ""626_onlyOwner"";
""626_create"" -> ""626_safeAdd"";
""626_transferFrom"" -> ""626_safeAdd"";
""626_transfer"" -> ""626__transfer"";
""626_setDecimals"" -> ""626_onlyOwner"";
""626_withdraw"" -> ""626_onlyOwner"";
""626_transferFrom"" -> ""626_safeSub"";
""626_setName"" -> ""626_onlyOwner"";
""626_burn"" -> ""626_safeSub"";
""626__transfer"" -> ""626_safeAdd"";
""626_setSymbol"" -> ""626_onlyOwner"";
""626__transfer"" -> ""626_safeSub"";
}
"
0x1ee72092724d17c4667563bac428babfe11f6440.sol,IMAGEWORLD,"contract IMAGEWORLD { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function IMAGEWORLD( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_IMAGEWORLD {
label=""IMAGEWORLD"";
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_approve"" [label=""approve""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_IMAGEWORLD"" [label=""IMAGEWORLD""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x039dbff00f2b4b0da89c60a1870cbfbd726b6cb1.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_approve"" [label=""approve""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0xf0d1a6dfcce7fb23fee76d8ed89e780c5a2c1885.sol,ERC721,contract ERC721 is ERC721Abstract { string constant public name = ; string constant public symbol = ; uint256 public totalSupply; struct Token { uint256 price; uint256 option; },1,"subgraph cluster_314_ERC721 {
label=""ERC721"";
""314__owns"" [label=""_owns""];
""314_transfer"" [label=""transfer""];
""314__approve"" [label=""_approve""];
""314_implementsERC721"" [label=""implementsERC721""];
""314_approve"" [label=""approve""];
""314__approvedFor"" [label=""_approvedFor""];
""314_transferFrom"" [label=""transferFrom""];
""314_ownerOf"" [label=""ownerOf""];
""314_balanceOf"" [label=""balanceOf""];
""314__transfer"" [label=""_transfer""];
""314_transferFrom"" -> ""314__transfer"";
""314_approve"" -> ""314__approve"";
""314_transfer"" -> ""314__transfer"";
""314_approve"" -> ""314__owns"";
""314_transferFrom"" -> ""314__owns"";
""314_transfer"" -> ""314__owns"";
""314_transferFrom"" -> ""314__approvedFor"";
}
"
0xbbbecd6ee8d2972b4905634177c56ad73f226276.sol,LeaderSystem,"contract LeaderSystem { using SafeMath for uint256; event NewLeader(uint256 _indexTable, address _addr, uint256 _index, uint256 _sum); event LeadersClear(uint256 _indexTable); uint8 public constant leadersCount = 7; mapping (uint8 => uint256) public leaderBonuses; struct LeadersTable { uint256 timestampEnd; uint256 duration; uint256 minSum; address[] leaders; mapping (address => uint256) users; }",1,"subgraph cluster_884_LeaderSystem {
label=""LeaderSystem"";
""884_getLeadersTableInfo"" [label=""getLeadersTableInfo""];
""884__updateLeadersTable"" [label=""_updateLeadersTable""];
""884_setupLeaderSystemModule"" [label=""setupLeaderSystemModule""];
""884__clearLeadersTable"" [label=""_clearLeadersTable""];
""884_getLeaders"" [label=""getLeaders""];
""884_quickSort"" [label=""quickSort""];
""884__updateLeaders"" [label=""_updateLeaders""];
""884__updateLeadersTable"" -> ""884__clearLeadersTable"";
""884_quickSort"" -> ""884_quickSort"";
""884__updateLeaders"" -> ""884__updateLeadersTable"";
""884__updateLeadersTable"" -> ""884_quickSort"";
}
"
0xdb5e04dc9c94bc8310e8885c85a4d0666ccaecae.sol,EtherBrand,"contract EtherBrand is ERC721 { event Birth(uint256 tokenId, bytes32 name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, bytes32 name); event Transfer(address from, address to, uint256 tokenId); struct Brand { bytes32 name; address owner; uint256 price; uint256 last_price; address approve_transfer_to; }",1,"subgraph cluster_1766_EtherBrand {
label=""EtherBrand"";
""1766_implementsERC721"" [label=""implementsERC721""];
""1766_totalSupply"" [label=""totalSupply""];
""1766_payout"" [label=""payout""];
""1766_openGame"" [label=""openGame""];
""1766_takeOwnership"" [label=""takeOwnership""];
""1766_createBrand"" [label=""createBrand""];
""1766_transfer"" [label=""transfer""];
""1766_approve"" [label=""approve""];
""1766_name"" [label=""name""];
""1766_ownerOf"" [label=""ownerOf""];
""1766_createPromoBrand"" [label=""createPromoBrand""];
""1766_transferFrom"" [label=""transferFrom""];
""1766_tokensOfOwner"" [label=""tokensOfOwner""];
""1766_getBrands"" [label=""getBrands""];
""1766_setCOO"" [label=""setCOO""];
""1766__create_brand"" [label=""_create_brand""];
""1766__transfer"" [label=""_transfer""];
""1766_setExtra"" [label=""setExtra""];
""1766_purchase"" [label=""purchase""];
""1766_setCEO"" [label=""setCEO""];
""1766_balanceOf"" [label=""balanceOf""];
""1766_getBrand"" [label=""getBrand""];
""1766_priceOf"" [label=""priceOf""];
""1766_symbol"" [label=""symbol""];
""1766_EtherBrand"" [label=""EtherBrand""];
""1766_setCFO"" [label=""setCFO""];
""1766_tokensOfOwner"" -> ""1766_totalSupply"";
""1766_tokensOfOwner"" -> ""1766_balanceOf"";
""1766_setCOO"" -> ""1766_onlyCEO"";
""1766_createBrand"" -> ""1766__create_brand"";
""1766_takeOwnership"" -> ""1766__transfer"";
""1766_setExtra"" -> ""1766_onlyCXX"";
""1766_createPromoBrand"" -> ""1766__create_brand"";
""1766_openGame"" -> ""1766_onlyCXX"";
""1766_createPromoBrand"" -> ""1766_onlyCXX"";
""1766_transfer"" -> ""1766__transfer"";
""1766_payout"" -> ""1766_onlyCEO"";
""1766_setCFO"" -> ""1766_onlyCEO"";
""1766_setCEO"" -> ""1766_onlyCEO"";
""1766_transferFrom"" -> ""1766__transfer"";
""1766_createBrand"" -> ""1766_onlyCXX"";
}
"
0x30d62b3392520580ffc74d7326bb29a4bf541a4d.sol,TerraformReserve,"contract TerraformReserve is Ownable { mapping (address => uint256) public lockedBalance; uint public totalLocked; ERC20 public manaToken; address public landClaim; bool public acceptingDeposits; event LockedBalance(address user, uint mana); event LandClaimContractSet(address target); event LandClaimExecuted(address user, uint value, bytes data); event AcceptingDepositsChanged(bool _acceptingDeposits); function TerraformReserve(address _token) { require(_token != 0); manaToken = ERC20(_token); acceptingDeposits = true; }",1,"subgraph cluster_520_TerraformReserve {
label=""TerraformReserve"";
""520_lockMana"" [label=""lockMana""];
""520_TerraformReserve"" [label=""TerraformReserve""];
""520_fallback"" [label=""fallback""];
""520_setTargetContract"" [label=""setTargetContract""];
""520_changeContractState"" [label=""changeContractState""];
""520_setTargetContract"" -> ""520_onlyOwner"";
""520_changeContractState"" -> ""520_onlyOwner"";
}
"
0xd3cdc4e75750dc1e59f8342200742b6b29490e70.sol,Decurian,"contract Decurian is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Decurian() public { symbol = ; name = ; decimals = 3; _totalSupply = 50000000000; balances[0x9eEcF14e12905AA6613D247034D3e71370a61530] = _totalSupply; Transfer(address(0), 0x9eEcF14e12905AA6613D247034D3e71370a61530, _totalSupply); }",1,"subgraph cluster_543_Decurian {
label=""Decurian"";
""543_Decurian"" [label=""Decurian""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0xa4b01cc6f2fde9d5d84da419bee4359819ae210b.sol,VirtualGift,contract VirtualGift is ERC721 { ERC20 GTO = ERC20(0x00C5bBaE50781Be1669306b9e001EFF57a2957b09d); struct Gift { uint256 price; string description; },1,"subgraph cluster_967_VirtualGift {
label=""VirtualGift"";
""967_changeGTOAddress"" [label=""changeGTOAddress""];
""967_buy"" [label=""buy""];
""967_ownerOf"" [label=""ownerOf""];
""967_sendGift"" [label=""sendGift""];
""967_approve"" [label=""approve""];
""967_removeGift"" [label=""removeGift""];
""967_getGTOAddress"" [label=""getGTOAddress""];
""967_updateGift"" [label=""updateGift""];
""967_isExist"" [label=""isExist""];
""967_allowance"" [label=""allowance""];
""967_createGift"" [label=""createGift""];
""967__transfer"" [label=""_transfer""];
""967_transfer"" [label=""transfer""];
""967_transferFrom"" [label=""transferFrom""];
""967_VirtualGift"" [label=""VirtualGift""];
""967_getGift"" [label=""getGift""];
""967_giftOwnerByIndex"" [label=""giftOwnerByIndex""];
""967_balanceOf"" [label=""balanceOf""];
""967_totalSupply"" [label=""totalSupply""];
""967_takeOwnership"" [label=""takeOwnership""];
""967_GiftMetadata"" [label=""GiftMetadata""];
""967_withdrawGTO"" [label=""withdrawGTO""];
""967_GiftsOfOwner"" [label=""GiftsOfOwner""];
""967_takeOwnership"" -> ""967_validGift"";
""967_transferFrom"" -> ""967_validGift"";
""967_buy"" -> ""967_ownerOf"";
""967_removeGift"" -> ""967_onlyOwner"";
""967_updateGift"" -> ""967_onlyOwner"";
""967_transfer"" -> ""967_ownerOf"";
""967_GiftsOfOwner"" -> ""967_balanceOf"";
""967_changeGTOAddress"" -> ""967_onlyOwner"";
""967_transferFrom"" -> ""967__transfer"";
""967_approve"" -> ""967_ownerOf"";
""967_approve"" -> ""967_validGift"";
""967_transfer"" -> ""967__transfer"";
""967_withdrawGTO"" -> ""967_onlyOwner"";
""967_sendGift"" -> ""967_onlyGiftOwner"";
""967_takeOwnership"" -> ""967__transfer"";
""967_transferFrom"" -> ""967_allowance"";
""967_giftOwnerByIndex"" -> ""967_GiftsOfOwner"";
""967_GiftsOfOwner"" -> ""967_totalSupply"";
""967_createGift"" -> ""967_onlyOwner"";
""967_transferFrom"" -> ""967_ownerOf"";
""967_sendGift"" -> ""967__transfer"";
""967_buy"" -> ""967__transfer"";
""967_buy"" -> ""967_validGift"";
""967_sendGift"" -> ""967_validGift"";
""967_createGift"" -> ""967__transfer"";
""967_transfer"" -> ""967_validGift"";
""967_VirtualGift"" -> ""967__transfer"";
""967_takeOwnership"" -> ""967_ownerOf"";
}
"
0xaa63c8683647ef91b3fdab4b4989ee9588da297b.sol,DSProxyCache,contract DSProxyCache { mapping(bytes32 => address) cache; function read(bytes _code) public view returns (address) { bytes32 hash = keccak256(_code); return cache[hash]; },1,"subgraph cluster_390_DSProxyCache {
label=""DSProxyCache"";
""390_read"" [label=""read""];
""390_write"" [label=""write""];
}
"
0xc37b74c1f1d6a0f9a6ebd4bd846805f899b5e897.sol,Angelglorycoin,"contract Angelglorycoin { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string Angelglorycoin, string AGC ) public { totalSupply = 1000000000000000000; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_350_Angelglorycoin {
label=""Angelglorycoin"";
""350_approve"" [label=""approve""];
""350_burn"" [label=""burn""];
""350_TokenERC20"" [label=""TokenERC20""];
""350_transfer"" [label=""transfer""];
""350__transfer"" [label=""_transfer""];
""350_approveAndCall"" [label=""approveAndCall""];
""350_burnFrom"" [label=""burnFrom""];
""350_transferFrom"" [label=""transferFrom""];
""350_transferFrom"" -> ""350__transfer"";
""350_transfer"" -> ""350__transfer"";
""350_approveAndCall"" -> ""350_approve"";
}
"
0xd0a024e4b057024f941051dc19220a3bab4b5d45.sol,RelexLife,"contract RelexLife { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor ( ) public { totalSupply = 1000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_RelexLife {
label=""RelexLife"";
""355__transfer"" [label=""_transfer""];
""355_approve"" [label=""approve""];
""355_burn"" [label=""burn""];
""355_transfer"" [label=""transfer""];
""355_constructor"" [label=""constructor""];
""355_transferFrom"" [label=""transferFrom""];
""355_burnFrom"" [label=""burnFrom""];
""355_approveAndCall"" [label=""approveAndCall""];
""355_transferFrom"" -> ""355__transfer"";
""355_transfer"" -> ""355__transfer"";
""355_approveAndCall"" -> ""355_approve"";
}
"
0x55c4b50c93a5fa213078f96fbf0834cba17ebc43.sol,Egypt,"contract Egypt { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor() public { symbol = ; name = ; decimals = 18; totalSupply = 1500000000000000000000000000; balanceOf[0x2D12749695305bbde9bA7e1E12fA481C71314F28] = totalSupply; emit Transfer(address(0), 0x2D12749695305bbde9bA7e1E12fA481C71314F28, totalSupply); }",1,"subgraph cluster_317_Egypt {
label=""Egypt"";
""317_approveAndCall"" [label=""approveAndCall""];
""317_approve"" [label=""approve""];
""317_totalSupply"" [label=""totalSupply""];
""317_constructor"" [label=""constructor""];
""317_giveBlockReward"" [label=""giveBlockReward""];
""317__transfer"" [label=""_transfer""];
""317_transferFrom"" [label=""transferFrom""];
""317_transfer"" [label=""transfer""];
""317_approveAndCall"" -> ""317_approve"";
""317_transfer"" -> ""317__transfer"";
""317_transferFrom"" -> ""317__transfer"";
}
"
0x1811aacf243e28047ccb0126b9e0f3662ed48948.sol,BB,"contract BB is Ownable { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); event FrozenFunds(address target, bool frozen); constructor (uint256 initialSupply, string tokenName, string tokenSymbol, address centralMinter) public { if(centralMinter != 0) owner = centralMinter; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_523_BB {
label=""BB"";
""523_approveAndCall"" [label=""approveAndCall""];
""523_transfer"" [label=""transfer""];
""523_burn"" [label=""burn""];
""523_freezeAccount"" [label=""freezeAccount""];
""523_constructor"" [label=""constructor""];
""523_burnFrom"" [label=""burnFrom""];
""523_mintToken"" [label=""mintToken""];
""523_transferFrom"" [label=""transferFrom""];
""523_approve"" [label=""approve""];
""523__transfer"" [label=""_transfer""];
""523_freezeAccount"" -> ""523_onlyOwner"";
""523_transfer"" -> ""523__transfer"";
""523_transferFrom"" -> ""523__transfer"";
""523_approveAndCall"" -> ""523_approve"";
""523_mintToken"" -> ""523_onlyOwner"";
}
"
0xa140297bd7aa035d6a4d5abc29b787555aae109f.sol,RegularToken,"contract RegularToken is Token { function transfer(address _to, uint _value) returns (bool) { if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_268_RegularToken {
label=""RegularToken"";
""268_balanceOf"" [label=""balanceOf""];
""268_allowance"" [label=""allowance""];
""268_approve"" [label=""approve""];
""268_transfer"" [label=""transfer""];
""268_transferFrom"" [label=""transferFrom""];
}
"
0x0d2a65ef3e4c3509f00a3576495bd237f5817520.sol,ENIGMA,contract ENIGMA { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value > 0.5 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_ENIGMA {
label=""ENIGMA"";
""132_Try"" [label=""Try""];
""132_fallback"" [label=""fallback""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_NewQuestion"" [label=""NewQuestion""];
""132_StopGame"" [label=""StopGame""];
""132_set_game"" [label=""set_game""];
}
"
0x4d55ee29f3806c6feb424ba5948d660586bd51d3.sol,BB,"contract BB { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_384_BB {
label=""BB"";
""384_burnFrom"" [label=""burnFrom""];
""384_constructor"" [label=""constructor""];
""384_approve"" [label=""approve""];
""384_approveAndCall"" [label=""approveAndCall""];
""384__transfer"" [label=""_transfer""];
""384_burn"" [label=""burn""];
""384_transfer"" [label=""transfer""];
""384_transferFrom"" [label=""transferFrom""];
""384_transferFrom"" -> ""384__transfer"";
""384_transfer"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
}
"
0x295e65915bf0a884dcb225d0b60f95f25626e221.sol,AbyssToken,"contract AbyssToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function AbyssToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x5dDD9bb4d5640cE37c76dDac8B3bbD35D84416A6] = _totalSupply; Transfer(address(0), 0x5dDD9bb4d5640cE37c76dDac8B3bbD35D84416A6, _totalSupply); }",1,"subgraph cluster_543_AbyssToken {
label=""AbyssToken"";
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_AbyssToken"" [label=""AbyssToken""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x837768a7231b3363fdddbf6dd89bde1c20dd4676.sol,wphcToken,"contract wphcToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function wphcToken() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 2 weeks; endDate = now + 10 weeks; }",1,"subgraph cluster_609_wphcToken {
label=""wphcToken"";
""609_transferFrom"" [label=""transferFrom""];
""609_allowance"" [label=""allowance""];
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_approve"" [label=""approve""];
""609_wphcToken"" [label=""wphcToken""];
""609_transfer"" [label=""transfer""];
""609_balanceOf"" [label=""balanceOf""];
""609_fallback"" [label=""fallback""];
""609_totalSupply"" [label=""totalSupply""];
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
""609_transfer"" -> ""609_safeSub"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_transfer"" -> ""609_safeAdd"";
""609_transferFrom"" -> ""609_safeSub"";
""609_fallback"" -> ""609_safeAdd"";
}
"
0x330ac902cc4cb12e02249358dcfe3f60785e3439.sol,Easy30,contract Easy30 { mapping (address => uint256) dates; mapping (address => uint256) invests; function() external payable { address sender = msg.sender; if (invests[sender] != 0) { uint256 payout = invests[sender] / 100 * 30 * (now - dates[sender]) / 1 days; if (payout > address(this).balance) { payout = address(this).balance; },1,"subgraph cluster_79_Easy30 {
label=""Easy30"";
""79_fallback"" [label=""fallback""];
}
"
0xa1292ec56f9b78b0fac3f9b80baac133078dd087.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
""256_balanceOf"" [label=""balanceOf""];
""256_transferFrom"" [label=""transferFrom""];
}
"
0x0d2dea6d6d6780860431e7c8b0cce6db4ca49a41.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_TokenERC20 {
label=""TokenERC20"";
""380_transfer"" [label=""transfer""];
""380__transfer"" [label=""_transfer""];
""380_burn"" [label=""burn""];
""380_transferFrom"" [label=""transferFrom""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_approve"" [label=""approve""];
""380_burnFrom"" [label=""burnFrom""];
""380_constructor"" [label=""constructor""];
""380_transferFrom"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
}
"
0xdb03170241b7a789934b677a64fa49e7783b41d5.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_332_StandardToken {
label=""StandardToken"";
""332_transfer"" [label=""transfer""];
""332_approve"" [label=""approve""];
""332_balanceOf"" [label=""balanceOf""];
""332_allowance"" [label=""allowance""];
""332_transferFrom"" [label=""transferFrom""];
}
"
0xed3ce5919656b9988ab33c04a0e684ec94043f5b.sol,UltraVioletToken,"contract UltraVioletToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function UltraVioletToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_550_UltraVioletToken {
label=""UltraVioletToken"";
""550_approveAndCall"" [label=""approveAndCall""];
""550_totalSupply"" [label=""totalSupply""];
""550_balanceOf"" [label=""balanceOf""];
""550_UltraVioletToken"" [label=""UltraVioletToken""];
""550_fallback"" [label=""fallback""];
""550_transferFrom"" [label=""transferFrom""];
""550_allowance"" [label=""allowance""];
""550_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""550_approve"" [label=""approve""];
""550_transfer"" [label=""transfer""];
""550_transferAnyERC20Token"" -> ""550_onlyOwner"";
}
"
0xa211db1867e4fa5dc0dd4d8f51f177a51d054d94.sol,ZTKGamers,"contract ZTKGamers is Ownable, StandardToken { string public name = ; string public symbol = ; uint public decimals = 18; uint256 public totalSupply = 5000000000 * (10**decimals); uint256 public tokenSupplyFromCheck = 0; uint256 public ratePerOneEther = 962; uint256 public totalZTKCheckAmounts = 0; uint64 public issueIndex = 0; event Issue(uint64 issueIndex, address addr, uint256 tokenAmount); address public moneyWallet = 0xe5688167Cb7aBcE4355F63943aAaC8bb269dc953; event ZTKCheckIssue(string chequeIndex); struct ZTKCheck { string accountId; string accountNumber; string fullName; string routingNumber; string institution; uint256 amount; uint256 tokens; string checkFilePath; string digitalCheckFingerPrint; }",1,"subgraph cluster_916_ZTKGamers {
label=""ZTKGamers"";
""916_purchaseTokens"" [label=""purchaseTokens""];
""916_setRatePerOneEther"" [label=""setRatePerOneEther""];
""916_getZTKCheck"" [label=""getZTKCheck""];
""916_fallback"" [label=""fallback""];
""916_transferOwnership"" [label=""transferOwnership""];
""916_ZTKGamers"" [label=""ZTKGamers""];
""916_countZTKChecks"" [label=""countZTKChecks""];
""916_getZTKChecks"" [label=""getZTKChecks""];
""916_setMoneyWallet"" [label=""setMoneyWallet""];
""916_registerZTKCheck"" [label=""registerZTKCheck""];
""916_doIssueTokens"" [label=""doIssueTokens""];
""916_registerZTKCheck"" -> ""916_safeAdd"";
""916_purchaseTokens"" -> ""916_safeMul"";
""916_transferOwnership"" -> ""916_onlyOwner"";
""916_purchaseTokens"" -> ""916_safeDiv"";
""916_purchaseTokens"" -> ""916_doIssueTokens"";
""916_fallback"" -> ""916_purchaseTokens"";
""916_transferOwnership"" -> ""916_transferOwnership"";
""916_setMoneyWallet"" -> ""916_onlyOwner"";
""916_registerZTKCheck"" -> ""916_doIssueTokens"";
""916_registerZTKCheck"" -> ""916_onlyOwner"";
""916_setRatePerOneEther"" -> ""916_onlyOwner"";
""916_doIssueTokens"" -> ""916_safeAdd"";
}
"
0xaa70bc3e835e12d6902a8e4da77db4842e519c42.sol,DhaCoin,"contract DhaCoin is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function DhaCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_622_DhaCoin {
label=""DhaCoin"";
""622_freezeAccount"" [label=""freezeAccount""];
""622_buy"" [label=""buy""];
""622_mintToken"" [label=""mintToken""];
""622_DhaCoin"" [label=""DhaCoin""];
""622_sell"" [label=""sell""];
""622_setPrices"" [label=""setPrices""];
""622__transfer"" [label=""_transfer""];
""622_freezeAccount"" -> ""622_onlyOwner"";
""622_setPrices"" -> ""622_onlyOwner"";
""622_DhaCoin"" -> ""622_TokenERC20"";
""622_sell"" -> ""622__transfer"";
""622_buy"" -> ""622__transfer"";
""622_mintToken"" -> ""622_onlyOwner"";
}
"
0x6c72582241de57e6fd501a99d85c650924039a50.sol,WHC,"contract WHC { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function WHC ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_WHC {
label=""WHC"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_WHC"" [label=""WHC""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0xd2d0f85b690604c245f61513bf4679b24ed64c35.sol,BFDToken,"contract BFDToken is EIP20Interface, SafeMath { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string constant public name = ; uint8 constant public decimals = 18; string constant public symbol = ; mapping (address => uint256) public addressType; mapping (address => uint256[3]) public releaseForSeed; mapping (address => uint256[5]) public releaseForTeamAndAdvisor; event AllocateToken(address indexed _to, uint256 _value, uint256 _type); address public owner; uint256 public finaliseTime; function BFDToken() public { totalSupply = 20*10**26; balances[msg.sender] = totalSupply; owner = msg.sender; }",1,"subgraph cluster_1089_BFDToken {
label=""BFDToken"";
""1089_balanceOf"" [label=""balanceOf""];
""1089_allowance"" [label=""allowance""];
""1089_allocateTokenForAdvisor"" [label=""allocateTokenForAdvisor""];
""1089_canTransfer"" [label=""canTransfer""];
""1089_approve"" [label=""approve""];
""1089_BFDToken"" [label=""BFDToken""];
""1089_changeOwner"" [label=""changeOwner""];
""1089_transfer"" [label=""transfer""];
""1089_allocateToken"" [label=""allocateToken""];
""1089_transferFrom"" [label=""transferFrom""];
""1089_setFinaliseTime"" [label=""setFinaliseTime""];
""1089_allocateTokenForTeam"" [label=""allocateTokenForTeam""];
""1089_allocateToken"" -> ""1089_safeMul"";
""1089_allocateTokenForTeam"" -> ""1089_isOwner"";
""1089_allocateToken"" -> ""1089_isOwner"";
""1089_canTransfer"" -> ""1089_safeSub"";
""1089_allocateTokenForAdvisor"" -> ""1089_isOwner"";
""1089_allocateTokenForAdvisor"" -> ""1089_safeMul"";
""1089_allocateTokenForAdvisor"" -> ""1089_safeDiv"";
""1089_allocateTokenForAdvisor"" -> ""1089_safeSub"";
""1089_allocateTokenForTeam"" -> ""1089_safeDiv"";
""1089_allocateTokenForTeam"" -> ""1089_safeSub"";
""1089_transferFrom"" -> ""1089_canTransfer"";
""1089_setFinaliseTime"" -> ""1089_isOwner"";
""1089_allocateTokenForAdvisor"" -> ""1089_safeAdd"";
""1089_allocateTokenForTeam"" -> ""1089_safeAdd"";
""1089_allocateToken"" -> ""1089_safeAdd"";
""1089_allocateToken"" -> ""1089_safeDiv"";
""1089_allocateTokenForTeam"" -> ""1089_notFinalised"";
""1089_changeOwner"" -> ""1089_isOwner"";
""1089_allocateToken"" -> ""1089_safeSub"";
""1089_allocateToken"" -> ""1089_notFinalised"";
""1089_transfer"" -> ""1089_canTransfer"";
""1089_allocateTokenForTeam"" -> ""1089_safeMul"";
}
"
0x334eec1482109bd802d9e72a447848de3bcc1063.sol,AirDropToken,"contract AirDropToken { event Transfer(address indexed from, address indexed to, uint256 tokens); event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens); string _name; string _symbol; uint8 _decimals; uint256 _totalSupply; bytes32 _rootHash; mapping (address => uint256) _balances; mapping (address => mapping(address => uint256)) _allowed; mapping (uint256 => uint256) _redeemed; function AirDropToken(string name, string symbol, uint8 decimals, bytes32 rootHash, uint256 premine) public { _name = name; _symbol = symbol; _decimals = decimals; _rootHash = rootHash; if (premine > 0) { _balances[msg.sender] = premine; _totalSupply = premine; Transfer(0, msg.sender, premine); }",1,"subgraph cluster_452_AirDropToken {
label=""AirDropToken"";
""452_decimals"" [label=""decimals""];
""452_totalSupply"" [label=""totalSupply""];
""452_balanceOf"" [label=""balanceOf""];
""452_symbol"" [label=""symbol""];
""452_transferFrom"" [label=""transferFrom""];
""452_redeemPackage"" [label=""redeemPackage""];
""452_allowance"" [label=""allowance""];
""452_name"" [label=""name""];
""452_AirDropToken"" [label=""AirDropToken""];
""452_redeemed"" [label=""redeemed""];
""452_approve"" [label=""approve""];
""452_transfer"" [label=""transfer""];
}
"
0x71402645d25196842b0434a1805726b7c0eef426.sol,BlueChips,contract BlueChips { modifier onlyOwner(){ require(msg.sender == dev); _; },1,"subgraph cluster_1046_BlueChips {
label=""BlueChips"";
""1046_getOwnerBalance"" [label=""getOwnerBalance""];
""1046_getMyBalance"" [label=""getMyBalance""];
""1046_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""1046_setSymbol"" [label=""setSymbol""];
""1046_getCardDivs"" [label=""getCardDivs""];
""1046_buy"" [label=""buy""];
""1046_gettotalCardValue"" [label=""gettotalCardValue""];
""1046_addNewcard"" [label=""addNewcard""];
""1046_gettotalCardDivs"" [label=""gettotalCardDivs""];
""1046_getcardOwner"" [label=""getcardOwner""];
""1046_gettotalCards"" [label=""gettotalCards""];
""1046_withdraw"" [label=""withdraw""];
""1046_setcardPrice"" [label=""setcardPrice""];
""1046_addtotalCardValue"" [label=""addtotalCardValue""];
""1046_getCardDivShare"" [label=""getCardDivShare""];
""1046_setName"" [label=""setName""];
""1046_distributeDivs"" [label=""distributeDivs""];
""1046_constructor"" [label=""constructor""];
""1046_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1046_getcardPrice"" [label=""getcardPrice""];
""1046_setcardPrice"" -> ""1046_onlyOwner"";
""1046_addNewcard"" -> ""1046_onlyOwner"";
""1046_getCardDivs"" -> ""1046_getCardDivShare"";
""1046_setName"" -> ""1046_onlyOwner"";
""1046_buy"" -> ""1046_distributeDivs"";
""1046_buy"" -> ""1046_addtotalCardValue"";
""1046_setSymbol"" -> ""1046_onlyOwner"";
}
"
0xf449ef0007c98761bdfced7ab1d0351f71d30468.sol,Danetonbit,"contract Danetonbit { uint256 public totalSupply = 8*10**28; string public name = ; uint8 public decimals = 18; string public symbol = ; mapping (address => uint256) balances; event Transfer(address indexed _from, address indexed _to, uint256 _value); constructor() public { balances[0x5C8E4172D2bB9A558c6bbE9cA867461E9Bb5C502] = totalSupply; }",1,"subgraph cluster_100_Danetonbit {
label=""Danetonbit"";
""100_transfer"" [label=""transfer""];
""100_fallback"" [label=""fallback""];
""100_constructor"" [label=""constructor""];
""100_balanceOf"" [label=""balanceOf""];
}
"
0x4bb301e545a3e948b20ea9a0f02d3948af6fe6db.sol,TarynToken,contract TarynToken is AccessControlled { using SafeMath for uint256; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 0; uint256 public totalSupply; mapping(address => uint256) balances; mapping(uint256 => address) public addresses; mapping(address => uint256) public indexes; uint public index = 1; function TarynToken() public { totalSupply = INITIAL_SUPPLY; },1,"subgraph cluster_646_TarynToken {
label=""TarynToken"";
""646_transfer"" [label=""transfer""];
""646_allowance"" [label=""allowance""];
""646_distribute"" [label=""distribute""];
""646_balanceOf"" [label=""balanceOf""];
""646_transferFrom"" [label=""transferFrom""];
""646_addToAddresses"" [label=""addToAddresses""];
""646_increaseApproval"" [label=""increaseApproval""];
""646_decreaseApproval"" [label=""decreaseApproval""];
""646_TarynToken"" [label=""TarynToken""];
""646_mint"" [label=""mint""];
""646_approve"" [label=""approve""];
""646_isRegistered"" [label=""isRegistered""];
""646_transfer"" -> ""646_addToAddresses"";
""646_mint"" -> ""646_addToAddresses"";
""646_mint"" -> ""646_onlyOwner"";
}
"
0xc668715818831645cdf0eee3a9b84590fa979e65.sol,BGAToken,"contract BGAToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint256 _totalSupply; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 600000000000000000; balances[msg.sender] = _totalSupply; emit Transfer(address(0), msg.sender, _totalSupply); }",1,"subgraph cluster_561_BGAToken {
label=""BGAToken"";
""561_approveAndCall"" [label=""approveAndCall""];
""561_constructor"" [label=""constructor""];
""561_approve"" [label=""approve""];
""561_transferFrom"" [label=""transferFrom""];
""561_fallback"" [label=""fallback""];
""561_balanceOf"" [label=""balanceOf""];
""561_totalSupply"" [label=""totalSupply""];
""561_allowance"" [label=""allowance""];
""561_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""561_transfer"" [label=""transfer""];
""561_transfer"" -> ""561__safeAdd"";
""561_transferFrom"" -> ""561__safeAdd"";
""561_transfer"" -> ""561__safeSub"";
""561_transferAnyERC20Token"" -> ""561_onlyOwner"";
""561_transferFrom"" -> ""561__safeSub"";
}
"
0x55aa079e2fb0c8b68a0a08efbff3f1aa5472f1a2.sol,WannabeSmartInvestor,contract WannabeSmartInvestor { address private owner; mapping(address => uint) public incomeFrom; constructor() public { owner = msg.sender; },1,"subgraph cluster_82_WannabeSmartInvestor {
label=""WannabeSmartInvestor"";
""82_constructor"" [label=""constructor""];
""82_fallback"" [label=""fallback""];
""82_invest"" [label=""invest""];
""82_withdraw"" [label=""withdraw""];
}
"
0x64fac631db32d70d77e0b759f9a27e1f6b9e9f6f.sol,TON,"contract TON { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000000000000000000000000; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function TON() public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_262_TON {
label=""TON"";
""262_approve"" [label=""approve""];
""262__transfer"" [label=""_transfer""];
""262_transferFrom"" [label=""transferFrom""];
""262_TON"" [label=""TON""];
""262_transfer"" [label=""transfer""];
""262_approveAndCall"" [label=""approveAndCall""];
""262_transfer"" -> ""262__transfer"";
""262_transferFrom"" -> ""262__transfer"";
""262_approveAndCall"" -> ""262_approve"";
}
"
0x91e1dcfbfe7b6be8ac836d08fb493b085ebbb3ef.sol,CoinLottoToken,"contract CoinLottoToken is ERC20Interface,Ownable { using SafeMath for uint256; uint256 public totalSupply; mapping(address => uint256) tokenBalances; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 10000000000; address ownerWallet; mapping (address => mapping (address => uint256)) allowed; event Debug(string message, address addr, uint256 number); function CoinLottoToken (address wallet) public { owner = msg.sender; ownerWallet=wallet; totalSupply = INITIAL_SUPPLY * 10 ** 18; tokenBalances[wallet] = INITIAL_SUPPLY * 10 ** 18; }",1,"subgraph cluster_686_CoinLottoToken {
label=""CoinLottoToken"";
""686_CoinLottoToken"" [label=""CoinLottoToken""];
""686_decreaseApproval"" [label=""decreaseApproval""];
""686_increaseApproval"" [label=""increaseApproval""];
""686_Return"" [label=""Return""];
""686_approve"" [label=""approve""];
""686_showMyTokenBalance"" [label=""showMyTokenBalance""];
""686_totalSupply"" [label=""totalSupply""];
""686_allowance"" [label=""allowance""];
""686_transferFrom"" [label=""transferFrom""];
""686_balanceOf"" [label=""balanceOf""];
""686_fallback"" [label=""fallback""];
""686_transfer"" [label=""transfer""];
""686_Return"" -> ""686_onlyOwner"";
}
"
0x508f36baac673fe9e213e69f0f75cbcfeb015917.sol,MKT,"contract MKT { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function MKT ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_MKT {
label=""MKT"";
""361_MKT"" [label=""MKT""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_burn"" [label=""burn""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0xeecfa1f63f9cce7ae80a49d5341dcba2563d72e1.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20() public { totalSupply = 7600000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_TokenERC20 {
label=""TokenERC20"";
""355_transfer"" [label=""transfer""];
""355_transferFrom"" [label=""transferFrom""];
""355_approve"" [label=""approve""];
""355_burnFrom"" [label=""burnFrom""];
""355_burn"" [label=""burn""];
""355_TokenERC20"" [label=""TokenERC20""];
""355__transfer"" [label=""_transfer""];
""355_approveAndCall"" [label=""approveAndCall""];
""355_approveAndCall"" -> ""355_approve"";
""355_transferFrom"" -> ""355__transfer"";
""355_transfer"" -> ""355__transfer"";
}
"
0x3fcf78f7646f85ceb9344c5ba5a05a0e31a462af.sol,archercoin,"contract archercoin is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function archercoin() TokenERC20() public {}",1,"subgraph cluster_604_archercoin {
label=""archercoin"";
""604_archercoin"" [label=""archercoin""];
""604_mintToken"" [label=""mintToken""];
""604__transfer"" [label=""_transfer""];
""604_freezeAccount"" [label=""freezeAccount""];
""604_sell"" [label=""sell""];
""604_setPrices"" [label=""setPrices""];
""604_buy"" [label=""buy""];
""604_buy"" -> ""604__transfer"";
""604_archercoin"" -> ""604_TokenERC20"";
""604_setPrices"" -> ""604_onlyOwner"";
""604_mintToken"" -> ""604_onlyOwner"";
""604_sell"" -> ""604__transfer"";
""604_freezeAccount"" -> ""604_onlyOwner"";
}
"
0x2906f2b553dcfda6891cba64b0ac9e5780b5c1a6.sol,CoinCopyTrade,"contract CoinCopyTrade is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply =2000000000000000000000000; balances[0xfeb53a79008aff53C8AE7b80e001446C0Fa1b5b2] = _totalSupply; emit Transfer(address(0), 0xfeb53a79008aff53C8AE7b80e001446C0Fa1b5b2, _totalSupply); }",1,"subgraph cluster_543_CoinCopyTrade {
label=""CoinCopyTrade"";
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_constructor"" [label=""constructor""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x5044ac8da9601edf970dcc91a10c5f41c5c548c0.sol,UPower,contract UPower { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1329_UPower {
label=""UPower"";
""1329_disableInitialStage"" [label=""disableInitialStage""];
""1329_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1329_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1329_withdraw"" [label=""withdraw""];
""1329_exit"" [label=""exit""];
""1329_totalSupply"" [label=""totalSupply""];
""1329_purchaseTokens"" [label=""purchaseTokens""];
""1329_sell"" [label=""sell""];
""1329_buyPrice"" [label=""buyPrice""];
""1329_sqrt"" [label=""sqrt""];
""1329_setSymbol"" [label=""setSymbol""];
""1329_myTokens"" [label=""myTokens""];
""1329_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1329_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1329_sellPrice"" [label=""sellPrice""];
""1329_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1329_setStakingRequirement"" [label=""setStakingRequirement""];
""1329_setName"" [label=""setName""];
""1329_myDividends"" [label=""myDividends""];
""1329_buy"" [label=""buy""];
""1329_setAdministrator"" [label=""setAdministrator""];
""1329_dividendsOf"" [label=""dividendsOf""];
""1329_fallback"" [label=""fallback""];
""1329_reinvest"" [label=""reinvest""];
""1329_balanceOf"" [label=""balanceOf""];
""1329_transfer"" [label=""transfer""];
""1329_constructor"" [label=""constructor""];
""1329_buy"" -> ""1329_purchaseTokens"";
""1329_setName"" -> ""1329_onlyAdministrator"";
""1329_ethereumToTokens_"" -> ""1329_sqrt"";
""1329_transfer"" -> ""1329_withdraw"";
""1329_sell"" -> ""1329_tokensToEthereum_"";
""1329_transfer"" -> ""1329_onlyBagholders"";
""1329_transfer"" -> ""1329_tokensToEthereum_"";
""1329_myTokens"" -> ""1329_balanceOf"";
""1329_setSymbol"" -> ""1329_onlyAdministrator"";
""1329_exit"" -> ""1329_sell"";
""1329_purchaseTokens"" -> ""1329_antiEarlyWhale"";
""1329_disableInitialStage"" -> ""1329_onlyAdministrator"";
""1329_sell"" -> ""1329_onlyBagholders"";
""1329_fallback"" -> ""1329_purchaseTokens"";
""1329_setAdministrator"" -> ""1329_onlyAdministrator"";
""1329_reinvest"" -> ""1329_onlyStronghands"";
""1329_calculateTokensReceived"" -> ""1329_ethereumToTokens_"";
""1329_withdraw"" -> ""1329_onlyStronghands"";
""1329_purchaseTokens"" -> ""1329_ethereumToTokens_"";
""1329_transfer"" -> ""1329_myDividends"";
""1329_exit"" -> ""1329_withdraw"";
""1329_withdraw"" -> ""1329_myDividends"";
""1329_setStakingRequirement"" -> ""1329_onlyAdministrator"";
""1329_buyPrice"" -> ""1329_tokensToEthereum_"";
""1329_calculateEthereumReceived"" -> ""1329_tokensToEthereum_"";
""1329_myDividends"" -> ""1329_dividendsOf"";
""1329_sellPrice"" -> ""1329_tokensToEthereum_"";
""1329_reinvest"" -> ""1329_purchaseTokens"";
""1329_reinvest"" -> ""1329_myDividends"";
}
"
0x3f9ad22a9c2a52bda2a0811d1080fc9cd23c6c46.sol,IBITToken,"contract IBITToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function IBITToken() public { totalSupply = 32000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_307_IBITToken {
label=""IBITToken"";
""307_approve"" [label=""approve""];
""307_burn"" [label=""burn""];
""307_transferFrom"" [label=""transferFrom""];
""307_burnFrom"" [label=""burnFrom""];
""307_IBITToken"" [label=""IBITToken""];
""307_transfer"" [label=""transfer""];
""307__transfer"" [label=""_transfer""];
""307_transfer"" -> ""307__transfer"";
""307_transferFrom"" -> ""307__transfer"";
}
"
0xb4b330972e302081ebacd054f4305a3af4103f0f.sol,CryptoTradeToken,"contract CryptoTradeToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CryptoTradeToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000; balances[0x92Bf51aB8C48B93a96F8dde8dF07A1504aA393fD] = _totalSupply; emit Transfer(address(0), 0x92Bf51aB8C48B93a96F8dde8dF07A1504aA393fD, _totalSupply); }",1,"subgraph cluster_543_CryptoTradeToken {
label=""CryptoTradeToken"";
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_CryptoTradeToken"" [label=""CryptoTradeToken""];
""543_fallback"" [label=""fallback""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0x01628c3308f798362f89886bdac1506e0b33a045.sol,CBC,"contract CBC is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000 * 10 ** uint(decimals); balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_576_CBC {
label=""CBC"";
""576_transferFrom"" [label=""transferFrom""];
""576_totalSupply"" [label=""totalSupply""];
""576_approveAndCall"" [label=""approveAndCall""];
""576_balanceOf"" [label=""balanceOf""];
""576_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""576_allowance"" [label=""allowance""];
""576_approve"" [label=""approve""];
""576_constructor"" [label=""constructor""];
""576_transfer"" [label=""transfer""];
""576_mintToken"" [label=""mintToken""];
""576_transferAnyERC20Token"" -> ""576_onlyOwner"";
""576_mintToken"" -> ""576_onlyOwner"";
}
"
0x8564e222115248d10593cf4a6719fa6d82194e62.sol,ITube,"contract ITube is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ITube() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 5 weeks; endDate = now + 15 weeks; }",1,"subgraph cluster_609_ITube {
label=""ITube"";
""609_approve"" [label=""approve""];
""609_fallback"" [label=""fallback""];
""609_ITube"" [label=""ITube""];
""609_transfer"" [label=""transfer""];
""609_allowance"" [label=""allowance""];
""609_totalSupply"" [label=""totalSupply""];
""609_approveAndCall"" [label=""approveAndCall""];
""609_balanceOf"" [label=""balanceOf""];
""609_transferFrom"" [label=""transferFrom""];
""609_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""609_transferAnyERC20Token"" -> ""609_onlyOwner"";
""609_transferFrom"" -> ""609_safeSub"";
""609_transfer"" -> ""609_safeSub"";
""609_transferFrom"" -> ""609_safeAdd"";
""609_fallback"" -> ""609_safeAdd"";
""609_transfer"" -> ""609_safeAdd"";
}
"
0x01d706ed109e2038ae3261e30a1ed1af207a9d2c.sol,ETHERECASHTOKEN,"contract ETHERECASHTOKEN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ETHERECASHTOKEN( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_ETHERECASHTOKEN {
label=""ETHERECASHTOKEN"";
""361_burn"" [label=""burn""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_ETHERECASHTOKEN"" [label=""ETHERECASHTOKEN""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x39127b81f7c63dcc2477079bd17f08256584f623.sol,VOCC_I055_20181211,"contract VOCC_I055_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I055_20181211 {
label=""VOCC_I055_20181211"";
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x32cd77627ddb1dd8bda46e35c6e68aadfe916066.sol,RedlineFinancialLabCoin,"contract RedlineFinancialLabCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function RedlineFinancialLabCoin() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x116312c3471C2e7C34C52782D0399eBE601f3F30] = _totalSupply; Transfer(address(0), 0x116312c3471C2e7C34C52782D0399eBE601f3F30, _totalSupply); }",1,"subgraph cluster_543_RedlineFinancialLabCoin {
label=""RedlineFinancialLabCoin"";
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_RedlineFinancialLabCoin"" [label=""RedlineFinancialLabCoin""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0xb4933b15b21924af2c18012c4da78b182f060107.sol,ERC20x,"contract ERC20x is ERC20xVariables { function transfer(address _to, uint256 _value) public returns (bool success) { _transferBalance(msg.sender, _to, _value); emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_1037_ERC20x {
label=""ERC20x"";
""1037_approve"" [label=""approve""];
""1037__transferBalance"" [label=""_transferBalance""];
""1037_transferToContract"" [label=""transferToContract""];
""1037_transfer"" [label=""transfer""];
""1037_transferFrom"" [label=""transferFrom""];
""1037_transferFrom"" -> ""1037__transferBalance"";
""1037_transferToContract"" -> ""1037__transferBalance"";
""1037_transfer"" -> ""1037__transferBalance"";
}
"
0x51696e028e0fe5416481c28cf1a2626d43680751.sol,IngridIsAHorribleHumanCoin,"contract IngridIsAHorribleHumanCoin is SystemTesterCode { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function IngridIsAHorribleHumanCoin( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_290_IngridIsAHorribleHumanCoin {
label=""IngridIsAHorribleHumanCoin"";
""290_balanceOf"" [label=""balanceOf""];
""290_transfer"" [label=""transfer""];
""290_approve"" [label=""approve""];
""290_IngridIsAHorribleHumanCoin"" [label=""IngridIsAHorribleHumanCoin""];
""290_allowance"" [label=""allowance""];
""290_transferFrom"" [label=""transferFrom""];
}
"
0xeafff1c115d5f8060531356a21c46668eff6da96.sol,EasyInvest35,contract EasyInvest35 { mapping (address => uint256) public invested; mapping (address => uint256) public atBlock; function () external payable { if (invested[msg.sender] != 0) { uint256 amount = invested[msg.sender] * 35 / 100 * (block.number - atBlock[msg.sender]) / 5900; msg.sender.transfer(amount); },1,"subgraph cluster_78_EasyInvest35 {
label=""EasyInvest35"";
""78_fallback"" [label=""fallback""];
}
"
0x88ac7fbe0024b025ea61db8c7389aab7e75cf2ee.sol,GrandTourer,"contract GrandTourer { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_463_GrandTourer {
label=""GrandTourer"";
""463_transfer"" [label=""transfer""];
""463_balanceOf"" [label=""balanceOf""];
""463_approve"" [label=""approve""];
""463_allowance"" [label=""allowance""];
""463_transferFrom"" [label=""transferFrom""];
""463_setLock"" [label=""setLock""];
""463_transferOwnership"" [label=""transferOwnership""];
""463_constructor"" [label=""constructor""];
""463_setLock"" -> ""463_onlyOwner"";
""463_transferOwnership"" -> ""463_onlyOwner"";
}
"
0x260cd379410a753cb602c76ae59bfba68246e789.sol,Token365,"contract Token365 { string public standard = ; string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Token365( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_666_AdvancedToken365 {
label=""AdvancedToken365"";
""666_setPrices"" [label=""setPrices""];
""666_sell"" [label=""sell""];
""666_approvedAccount"" [label=""approvedAccount""];
""666_buy"" [label=""buy""];
""666_AdvancedToken365"" [label=""AdvancedToken365""];
""666__transfer"" [label=""_transfer""];
""666_transferFrom"" [label=""transferFrom""];
""666_freezeAccount"" [label=""freezeAccount""];
""666_transfer"" [label=""transfer""];
""666_buy"" -> ""666__transfer"";
""666_AdvancedToken365"" -> ""666_Token365"";
""666_approvedAccount"" -> ""666_onlyOwner"";
""666_transferFrom"" -> ""666__transfer"";
""666_setPrices"" -> ""666_onlyOwner"";
""666_freezeAccount"" -> ""666_onlyOwner"";
""666_sell"" -> ""666__transfer"";
""666_transfer"" -> ""666__transfer"";
}
"
0x418ce003a8ad9925239bd20ea52abc1d950aeea1.sol,KidChain,contract KidChain is StandardToken { function () public { revert(); },1,"subgraph cluster_422_KidChain {
label=""KidChain"";
""422_approveAndCall"" [label=""approveAndCall""];
""422_approveAndCallcode"" [label=""approveAndCallcode""];
""422_constructor"" [label=""constructor""];
""422_fallback"" [label=""fallback""];
}
"
0x4933dea7ea497a87d41acc5d8048ac2d8e6cedfb.sol,OrganizeFunds,contract OrganizeFunds { struct ActivityAccount { uint credited; uint balance; uint pctx10; address addr; string name; },1,"subgraph cluster_518_OrganizeFunds {
label=""OrganizeFunds"";
""518_fallback"" [label=""fallback""];
""518_hariKari"" [label=""hariKari""];
""518_setName"" [label=""setName""];
""518_addActivityAccount"" [label=""addActivityAccount""];
""518_setWitdrawGas"" [label=""setWitdrawGas""];
""518_getActivityAccountInfo"" [label=""getActivityAccountInfo""];
""518_reset"" [label=""reset""];
""518_getTotalPctx10"" [label=""getTotalPctx10""];
""518_distribute"" [label=""distribute""];
""518_withdraw"" [label=""withdraw""];
""518_lock"" [label=""lock""];
""518_OrganizeFunds"" [label=""OrganizeFunds""];
""518_lock"" -> ""518_ownerOnly"";
""518_setWitdrawGas"" -> ""518_ownerOnly"";
""518_addActivityAccount"" -> ""518_ownerOnly"";
""518_hariKari"" -> ""518_unlockedOnly"";
""518_reset"" -> ""518_unlockedOnly"";
""518_addActivityAccount"" -> ""518_unlockedOnly"";
""518_setName"" -> ""518_ownerOnly"";
""518_reset"" -> ""518_ownerOnly"";
""518_hariKari"" -> ""518_ownerOnly"";
}
"
0x35e44051799bd7cea091c4fad2cba9b37e364c5b.sol,myPreICO,contract myPreICO is Ownable { uint public ETHRaised; uint public soft_cap = 1 ether; uint public hard_cap = 10 ether; address public owner = 0x0; uint public end_date; address[] public holders; mapping (address => uint) public holder_balance; function myICO() public { owner = msg.sender; end_date = now + 90 days; },1,"subgraph cluster_168_myPreICO {
label=""myPreICO"";
""168_withdraw"" [label=""withdraw""];
""168_fallback"" [label=""fallback""];
""168_getFunds"" [label=""getFunds""];
""168_sendFunds"" [label=""sendFunds""];
""168_myICO"" [label=""myICO""];
""168_sendFunds"" -> ""168_onlyOwner"";
}
"
0x4b353a668f90025337e7f1fcd4202c41f50a22df.sol,LEToken,"contract LEToken is StandardToken, Owned { string public name = ; string public symbol = ; uint8 public decimals = 18; uint public INITIAL_SUPPLY = 3*10**28; function LEToken(address beneficiary) public { totalSupply_ = INITIAL_SUPPLY; balances[beneficiary] = INITIAL_SUPPLY; }",1,"subgraph cluster_786_LEToken {
label=""LEToken"";
""786_approveAndCall"" [label=""approveAndCall""];
""786_transferFrom"" [label=""transferFrom""];
""786_LEToken"" [label=""LEToken""];
""786_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""786_fallback"" [label=""fallback""];
""786_transfer"" [label=""transfer""];
""786_transferAnyERC20Token"" -> ""786_onlyOwner"";
""786_approveAndCall"" -> ""786_approve"";
}
"
0xec0dc71b3e5fc3f8ddfc655e800ae6d9b55f993f.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
""256_transferFrom"" [label=""transferFrom""];
""256_approve"" [label=""approve""];
""256_balanceOf"" [label=""balanceOf""];
}
"
0xef828938155cabfe83affbe726b55d188b4f45c0.sol,APPToken,"contract APPToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; string public version = ; address public ethFundDeposit; address public appFundDeposit; bool public isFinalized; uint256 public fundingStartBlock; uint256 public fundingEndBlock; uint256 public constant appFund = 3000 * (10**3) * 10**decimals; function tokenRate() constant returns(uint) { if (block.number>=fundingStartBlock && block.number<fundingStartBlock+23333) return 360; if (block.number>=fundingStartBlock && block.number<fundingStartBlock+23333) return 300; return 250; }",1,"subgraph cluster_577_APPToken {
label=""APPToken"";
""577_makeTokens"" [label=""makeTokens""];
""577_APPToken"" [label=""APPToken""];
""577_fallback"" [label=""fallback""];
""577_tokenRate"" [label=""tokenRate""];
""577_finalize"" [label=""finalize""];
""577_fallback"" -> ""577_makeTokens"";
""577_makeTokens"" -> ""577_safeMult"";
""577_makeTokens"" -> ""577_tokenRate"";
""577_makeTokens"" -> ""577_safeAdd"";
}
"
0x2e0b77cd408989a8f09e22d2c832be793f167aae.sol,FrameworkInvest,"contract FrameworkInvest is MintedCrowdsale,CappedCrowdsale, Ownable { mapping(address => bool) public owners; uint8 decimals = 18; enum CrowdsaleStage { PS_R1, PS_R2, PS_R3, PS_R4, PS_R5, PS_R6, PS_R7, ICO }",1,"subgraph cluster_1617_FrameworkInvest {
label=""FrameworkInvest"";
""1617_addNewOwner"" [label=""addNewOwner""];
""1617_calculateAndSetRate"" [label=""calculateAndSetRate""];
""1617_unPauseCrowdsale"" [label=""unPauseCrowdsale""];
""1617_removeOwner"" [label=""removeOwner""];
""1617_setCrowdSale"" [label=""setCrowdSale""];
""1617_setCrowdsaleStage"" [label=""setCrowdsaleStage""];
""1617_FrameworkInvest"" [label=""FrameworkInvest""];
""1617_setRate"" [label=""setRate""];
""1617_finish"" [label=""finish""];
""1617_pauseCrowdsale"" [label=""pauseCrowdsale""];
""1617_fallback"" [label=""fallback""];
""1617_setCurrentRate"" [label=""setCurrentRate""];
""1617_isAnOwner"" [label=""isAnOwner""];
""1617_setCrowdsaleStage"" -> ""1617_onlyOwner"";
""1617_setCrowdsaleStage"" -> ""1617_calculateAndSetRate"";
""1617_setRate"" -> ""1617_onlyOwner"";
""1617_setCrowdSale"" -> ""1617_onlyOwner"";
""1617_finish"" -> ""1617_onlyOwner"";
""1617_setRate"" -> ""1617_setCurrentRate"";
""1617_fallback"" -> ""1617_buyTokens"";
""1617_pauseCrowdsale"" -> ""1617_onlyOwner"";
""1617_calculateAndSetRate"" -> ""1617_setCurrentRate"";
""1617_addNewOwner"" -> ""1617_onlyOwner"";
""1617_removeOwner"" -> ""1617_onlyOwner"";
""1617_unPauseCrowdsale"" -> ""1617_onlyOwner"";
""1617_FrameworkInvest"" -> ""1617_constructor"";
}
"
0xd5dc75c85159e95f0bd8b5196f4f096a6b7fea1f.sol,BMICoin,"contract BMICoin is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; uint256 public constant UNIT = 10 ** decimals; address public companyWallet; address public backendWallet; uint256 public maxSupply = 3000000 * UNIT; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); modifier onlyBackend() { require(msg.sender == backendWallet); _; }",1,"subgraph cluster_748_BMICoin {
label=""BMICoin"";
""748_mint"" [label=""mint""];
""748_fallback"" [label=""fallback""];
""748_sendBonus"" [label=""sendBonus""];
""748_setBackendWallet"" [label=""setBackendWallet""];
""748_BMICoin"" [label=""BMICoin""];
""748_sendBonus"" -> ""748_onlyBackend"";
""748_setBackendWallet"" -> ""748_onlyOwner"";
""748_mint"" -> ""748_onlyBackend"";
}
"
0x4bd70556ae3f8a6ec6c4080a0c327b24325438f3.sol,HxroTokenContract,"contract HxroTokenContract is Owner { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public lockedFund; string public version; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor (uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals, uint256 _lockedFund) public { totalSupply = _initialSupply * 10 ** uint256(_decimals); lockedFund = _lockedFund * 10 ** uint256(_decimals); balanceOf[msg.sender] = totalSupply - lockedFund; decimals = _decimals; name = _tokenName; symbol = _tokenSymbol; version = ; }",1,"subgraph cluster_546_HxroTokenContract {
label=""HxroTokenContract"";
""546_constructor"" [label=""constructor""];
""546_getMetaData"" [label=""getMetaData""];
""546__transfer"" [label=""_transfer""];
""546_transfer"" [label=""transfer""];
""546_approve"" [label=""approve""];
""546_burnFrom"" [label=""burnFrom""];
""546_approveAndCall"" [label=""approveAndCall""];
""546_sweep"" [label=""sweep""];
""546_releaseLockedFund"" [label=""releaseLockedFund""];
""546_transferFrom"" [label=""transferFrom""];
""546_burn"" [label=""burn""];
""546_releaseLockedFund"" -> ""546_onlyOwner"";
""546_transfer"" -> ""546__transfer"";
""546_sweep"" -> ""546_transferFrom"";
""546_transferFrom"" -> ""546__transfer"";
""546_approveAndCall"" -> ""546_approve"";
""546_sweep"" -> ""546_onlyOwner"";
}
"
0x17c94b2203cd76d1e28509cece13e35744b9555c.sol,ERC20MIST,"contract ERC20MIST { string public name=; string public symbol=; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ERC20MIST ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 8 ** uint256(decimals); balanceOf[msg.sender] = 2100000000000000; name = tokenName=; symbol = tokenSymbol=; }",1,"subgraph cluster_367_ERC20MIST {
label=""ERC20MIST"";
""367_burn"" [label=""burn""];
""367__transfer"" [label=""_transfer""];
""367_ERC20MIST"" [label=""ERC20MIST""];
""367_approve"" [label=""approve""];
""367_burnFrom"" [label=""burnFrom""];
""367_transferFrom"" [label=""transferFrom""];
""367_approveAndCall"" [label=""approveAndCall""];
""367_transfer"" [label=""transfer""];
""367_transferFrom"" -> ""367__transfer"";
""367_transfer"" -> ""367__transfer"";
""367_approveAndCall"" -> ""367_approve"";
}
"
0xb41b531359330d76bbcb0f1a24f94ff6bff30dc1.sol,CNet5G,"contract CNet5G { string public name = ; uint256 public decimals = 2; uint256 public totalSupply; string public symbol = ; event Mint(address indexed owner,uint amount); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function CNet5G() public { owner = 0x5103bA50f2324c6A80c73867d93B173d94cB11c6; balances[0x5103bA50f2324c6A80c73867d93B173d94cB11c6] = 300000000 * 10**decimals; totalSupply =300000000 * 10**decimals; }",1,"subgraph cluster_319_CNet5G {
label=""CNet5G"";
""319_CNet5G"" [label=""CNet5G""];
""319_allowance"" [label=""allowance""];
""319_transfer"" [label=""transfer""];
""319_setOwner"" [label=""setOwner""];
""319_transferFrom"" [label=""transferFrom""];
""319_balanceOf"" [label=""balanceOf""];
""319_approve"" [label=""approve""];
""319_mint"" [label=""mint""];
""319_setOwner"" -> ""319_onlyOwner"";
""319_mint"" -> ""319_onlyOwner"";
}
"
0xbc7981956a44b5c5de21ad30aec8099c3ca27dba.sol,HodlETH,contract HodlETH { mapping (address => uint) public userInvested; mapping (address => uint) public entryTime; mapping (address => uint) public withdrawnAmount; mapping (address => uint) public referrerOn; address public advertisingFund = 0x01429d58058B3e84F6f264D91254EA3a96E1d2B7; uint public advertisingPercent = 6; address techSupportFund = 0x0D5dB78b35ecbdD22ffeA91B46a6EC77dC09EA4a; uint public techSupportPercent = 2; uint public startPercent = 25; uint public fiveDayHodlPercent = 30; uint public tenDayHodlPercent = 35; uint public twentyDayHodlPercent = 45; uint public lowBalance = 500 ether; uint public middleBalance = 2000 ether; uint public highBalance = 3500 ether; uint public soLowBalanceBonus = 5; uint public lowBalanceBonus = 10; uint public middleBalanceBonus = 15; uint public highBalanceBonus = 20; function bonusPercent() public view returns(uint){ uint balance = address(this).balance; if (balance < lowBalance){ return (soLowBalanceBonus); },1,"subgraph cluster_515_HodlETH {
label=""HodlETH"";
""515_terminal"" [label=""terminal""];
""515_personalPercent"" [label=""personalPercent""];
""515_bonusPercent"" [label=""bonusPercent""];
""515_transferRefBonus"" [label=""transferRefBonus""];
""515_returnInvestment"" [label=""returnInvestment""];
""515_bytesToAddress"" [label=""bytesToAddress""];
""515_invest"" [label=""invest""];
""515_fallback"" [label=""fallback""];
""515_returnInvestment"" -> ""515_timeWithdrawn"";
""515_terminal"" -> ""515_personalPercent"";
""515_terminal"" -> ""515_bonusPercent"";
""515_invest"" -> ""515_transferRefBonus"";
""515_fallback"" -> ""515_invest"";
""515_invest"" -> ""515_maxInvested"";
""515_invest"" -> ""515_timeWithdrawn"";
""515_invest"" -> ""515_terminal"";
""515_fallback"" -> ""515_returnInvestment"";
""515_transferRefBonus"" -> ""515_bytesToAddress"";
}
"
0xcf7097406448a6b3b109139e52e20ee909e437d2.sol,Ferrarium,"contract Ferrarium is Ownable { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Ferrarium() public { totalSupply = 21000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_400_Ferrarium {
label=""Ferrarium"";
""400_transfer"" [label=""transfer""];
""400_Ferrarium"" [label=""Ferrarium""];
""400_burn"" [label=""burn""];
""400_transferFrom"" [label=""transferFrom""];
""400__transfer"" [label=""_transfer""];
""400_approve"" [label=""approve""];
""400_burnFrom"" [label=""burnFrom""];
""400_approveAndCall"" [label=""approveAndCall""];
""400_transferFrom"" -> ""400__transfer"";
""400_approveAndCall"" -> ""400_approve"";
""400_transfer"" -> ""400__transfer"";
}
"
0x5bd7b9cd17cee4d2fae01d9695e83098cf409488.sol,Queue,contract Queue { address constant private PROMO1 = 0x0569E1777f2a7247D27375DB1c6c2AF9CE9a9C15; address constant private PROMO2 = 0xF892380E9880Ad0843bB9600D060BA744365EaDf; address constant private PROMO3 = 0x35aAF2c74F173173d28d1A7ce9d255f639ac1625; address constant private PRIZE = 0xa93E50526B63760ccB5fAD6F5107FA70d36ABC8b; uint constant public PROMO_PERCENT = 2; uint constant public BONUS_PERCENT = 3; struct Deposit { address depositor; uint deposit; uint payout; },1,"subgraph cluster_336_Queue {
label=""Queue"";
""336_fallback"" [label=""fallback""];
""336_getQueueLength"" [label=""getQueueLength""];
""336_getDepositsCount"" [label=""getDepositsCount""];
""336_pay"" [label=""pay""];
""336_fallback"" -> ""336_pay"";
}
"
0x4be10da47a07716af28ad199fbe020501bddd7af.sol,XTToken,"contract XTToken { string public name = ; string public symbol = ; uint256 public decimals = 18; uint256 public totalSupply = 100*1000*1000*10**decimals; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function XTToken( ) public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_348_XTToken {
label=""XTToken"";
""348__transfer"" [label=""_transfer""];
""348_XTToken"" [label=""XTToken""];
""348_burn"" [label=""burn""];
""348_approve"" [label=""approve""];
""348_approveAndCall"" [label=""approveAndCall""];
""348_burnFrom"" [label=""burnFrom""];
""348_transfer"" [label=""transfer""];
""348_transferFrom"" [label=""transferFrom""];
""348_transfer"" -> ""348__transfer"";
""348_transferFrom"" -> ""348__transfer"";
""348_approveAndCall"" -> ""348_approve"";
}
"
0x72ba699f0f3c29d0f886c264ec7350533a32b3d5.sol,FixedSupplyToken,"contract FixedSupplyToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 8; _totalSupply = 5000000000 * 10**uint(decimals); balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_551_FixedSupplyToken {
label=""FixedSupplyToken"";
""551_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""551_transfer"" [label=""transfer""];
""551_approveAndCall"" [label=""approveAndCall""];
""551_constructor"" [label=""constructor""];
""551_allowance"" [label=""allowance""];
""551_balanceOf"" [label=""balanceOf""];
""551_approve"" [label=""approve""];
""551_fallback"" [label=""fallback""];
""551_totalSupply"" [label=""totalSupply""];
""551_transferFrom"" [label=""transferFrom""];
""551_transferAnyERC20Token"" -> ""551_onlyOwner"";
}
"
0x0ef4bd1e9baa163d410b31d47bd4e9ebe7dfda1c.sol,EdxToken,contract EdxToken is ERC20 { using SafeMath for uint256; string public name = ; string public symbol = ; uint8 public decimals = 18; struct VestInfo { uint256 vested; uint256 remain; },1,"subgraph cluster_2722_EdxToken {
label=""EdxToken"";
""2722__transferTM"" [label=""_transferTM""];
""2722_getBSBalance"" [label=""getBSBalance""];
""2722_getPEBalance"" [label=""getPEBalance""];
""2722_getTMBalance"" [label=""getTMBalance""];
""2722_transferPE"" [label=""transferPE""];
""2722_transferFrom"" [label=""transferFrom""];
""2722_startupMainnet"" [label=""startupMainnet""];
""2722_transferBasestone"" [label=""transferBasestone""];
""2722_approve"" [label=""approve""];
""2722_roleInfo"" [label=""roleInfo""];
""2722__mintPE"" [label=""_mintPE""];
""2722_migrate"" [label=""migrate""];
""2722_allowance"" [label=""allowance""];
""2722__transfer"" [label=""_transfer""];
""2722__moveBSBalance"" [label=""_moveBSBalance""];
""2722__burn"" [label=""_burn""];
""2722_totalSupply"" [label=""totalSupply""];
""2722__burnTM"" [label=""_burnTM""];
""2722_detailedBalance"" [label=""detailedBalance""];
""2722_transfer"" [label=""transfer""];
""2722_transferTM"" [label=""transferTM""];
""2722_constructor"" [label=""constructor""];
""2722_revokeTMBalance"" [label=""revokeTMBalance""];
""2722__mint"" [label=""_mint""];
""2722__mintBS"" [label=""_mintBS""];
""2722__movePEBalance"" [label=""_movePEBalance""];
""2722_getSupplies"" [label=""getSupplies""];
""2722_decreaseAllowance"" [label=""decreaseAllowance""];
""2722__moveTMBalance"" [label=""_moveTMBalance""];
""2722__transferPE"" [label=""_transferPE""];
""2722_increaseAllowance"" [label=""increaseAllowance""];
""2722_balanceOf"" [label=""balanceOf""];
""2722_release"" [label=""release""];
""2722__transferBasestone"" [label=""_transferBasestone""];
""2722_grantRole"" [label=""grantRole""];
""2722_detailedBalance"" -> ""2722_getBSBalance"";
""2722_transfer"" -> ""2722__transfer"";
""2722_detailedBalance"" -> ""2722_balanceOf"";
""2722_transferBasestone"" -> ""2722__transferBasestone"";
""2722_transfer"" -> ""2722__transferPE"";
""2722_transferFrom"" -> ""2722__transfer"";
""2722_transfer"" -> ""2722__transferBasestone"";
""2722_transferPE"" -> ""2722__transferPE"";
""2722_transferTM"" -> ""2722__transferTM"";
""2722_detailedBalance"" -> ""2722_getTMBalance"";
""2722__moveBSBalance"" -> ""2722_getBSBalance"";
""2722_transfer"" -> ""2722__transferTM"";
""2722__moveTMBalance"" -> ""2722_getTMBalance"";
""2722__transfer"" -> ""2722__moveTMBalance"";
""2722__transfer"" -> ""2722__moveBSBalance"";
""2722__transfer"" -> ""2722__movePEBalance"";
""2722_detailedBalance"" -> ""2722_getPEBalance"";
""2722__movePEBalance"" -> ""2722_getPEBalance"";
}
"
0x6f793d30138161e6a5ae98c851882b7dc194d501.sol,EUROSIBENERGO_PFXXI_I_883,"contract EUROSIBENERGO_PFXXI_I_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 597902679176595000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_EUROSIBENERGO_PFXXI_I_883 {
label=""EUROSIBENERGO_PFXXI_I_883"";
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x1ba0383fd6b699f35c804a4179536a7c4473780e.sol,VEKSELBERG_Portfolio_I_883,"contract VEKSELBERG_Portfolio_I_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 1248388771473920000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VEKSELBERG_Portfolio_I_883 {
label=""VEKSELBERG_Portfolio_I_883"";
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0x01d174f95cd17d0b5b24f1f89a35cfdb37929b30.sol,X_wallet,contract X_wallet { bytes32 keyHash; address owner; bytes32 wallet_id = 0x8b65236d01ab5274303220d4c78b02ef7685ca757275036fc104f62fbe6e10a7; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_X_wallet {
label=""X_wallet"";
""121_new_haash"" [label=""new_haash""];
""121_constructor"" [label=""constructor""];
""121_clear"" [label=""clear""];
""121_get_id"" [label=""get_id""];
""121_setup_key"" [label=""setup_key""];
""121_withdraw"" [label=""withdraw""];
""121_fallback"" [label=""fallback""];
}
"
0xe35ff61bbec1c56f5aa304de7bf173d29970d0ac.sol,lindyhanCoin,"contract lindyhanCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function lindyhanCoin() public { symbol = ; name = ; decimals = 0; _totalSupply = 1000000; balances[0x4427bC64b0f00C29393e5b03C164cc9629fF83E8] = _totalSupply; Transfer(address(0), 0x4427bC64b0f00C29393e5b03C164cc9629fF83E8, _totalSupply); }",1,"subgraph cluster_543_lindyhanCoin {
label=""lindyhanCoin"";
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_lindyhanCoin"" [label=""lindyhanCoin""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x18035ee31125a9934de44b0105cd31691cce95d5.sol,BigBoobsToken,"contract BigBoobsToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BigBoobsToken() public { symbol = ; name = ; decimals = 8; _totalSupply = 5000000000000; balances[0xE3aF42CB6E90B1F1cD5B91a77Ce9f52F6E5A61d5] = _totalSupply; Transfer(address(0), 0xE3aF42CB6E90B1F1cD5B91a77Ce9f52F6E5A61d5, _totalSupply); }",1,"subgraph cluster_543_BigBoobsToken {
label=""BigBoobsToken"";
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_BigBoobsToken"" [label=""BigBoobsToken""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0xf3dac8e171a13066f8964f74a7c87fd518e4e162.sol,safe,contract safe { bytes32 keyHash; address owner; bytes32 wallet_id = 0x9b604aaf4d2d08b6a570b6961c857ea3828d224d425db6104ac364f354211fa1; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_safe {
label=""safe"";
""121_setup_key"" [label=""setup_key""];
""121_change_answer_hash"" [label=""change_answer_hash""];
""121_fallback"" [label=""fallback""];
""121_get_id"" [label=""get_id""];
""121_clear"" [label=""clear""];
""121_withdraw"" [label=""withdraw""];
""121_constructor"" [label=""constructor""];
}
"
0x69b3d13bb1d2542c85f0dfc6cba4c0ba8d919ec6.sol,JYBToken,"contract JYBToken { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function JYBToken(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_JYBToken {
label=""JYBToken"";
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_JYBToken"" [label=""JYBToken""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0xc5b106f17246b2f5c0c658dbd6e8d168695806ab.sol,SIEToken,contract SIEToken { using SafeMath for uint; string public name = ; string public symbol = ; uint256 public decimals = 6; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 3000000000000000; address owner = 0x0; modifier onlyPayloadSize(uint size) { require(!(msg.data.length < size + 4)); _; },1,"subgraph cluster_481_SIEToken {
label=""SIEToken"";
""481_approve"" [label=""approve""];
""481_setName"" [label=""setName""];
""481_start"" [label=""start""];
""481_transfer"" [label=""transfer""];
""481_SIEToken"" [label=""SIEToken""];
""481_transferFrom"" [label=""transferFrom""];
""481_stop"" [label=""stop""];
""481_burn"" [label=""burn""];
""481_approve"" -> ""481_validAddress"";
""481_start"" -> ""481_isOwner"";
""481_transferFrom"" -> ""481_onlyPayloadSize"";
""481_setName"" -> ""481_isOwner"";
""481_transfer"" -> ""481_onlyPayloadSize"";
""481_transfer"" -> ""481_isRunning"";
""481_transferFrom"" -> ""481_isRunning"";
""481_transferFrom"" -> ""481_validAddress"";
""481_transfer"" -> ""481_validAddress"";
""481_stop"" -> ""481_isOwner"";
""481_approve"" -> ""481_isRunning"";
}
"
0xf3eb09a1fd5a3e133a669074de1231d7a673744b.sol,ExoTownToken,"contract ExoTownToken is StandardToken, SafeMath { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; address public icoContract = 0x0; modifier onlyIcoContract() { require(msg.sender == icoContract); _; }",1,"subgraph cluster_698_ExoTownToken {
label=""ExoTownToken"";
""698_getOwner"" [label=""getOwner""];
""698_emitTokens"" [label=""emitTokens""];
""698_burnTokens"" [label=""burnTokens""];
""698_getOwnerCount"" [label=""getOwnerCount""];
""698_ExoTownToken"" [label=""ExoTownToken""];
""698_emitTokens"" -> ""698_add"";
""698_burnTokens"" -> ""698_sub"";
""698_burnTokens"" -> ""698_onlyIcoContract"";
""698_emitTokens"" -> ""698_onlyIcoContract"";
}
"
0x64d5e7be2e92d4436ba9c4a630491cb268764103.sol,funds,contract funds { bytes32 keyHash; address owner; bytes32 wallet_id = 0x9a1488a97840653a0be4a4aed50ecf6137507b7c798a86604f31e3199852668c; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_funds {
label=""funds"";
""121_clear"" [label=""clear""];
""121_constructor"" [label=""constructor""];
""121_setup_key"" [label=""setup_key""];
""121_withdraw"" [label=""withdraw""];
""121_updte_hash"" [label=""updte_hash""];
""121_get_id"" [label=""get_id""];
""121_fallback"" [label=""fallback""];
}
"
0x2cbf103901196f99619f2bf9accdf079e9c76819.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, SMUToken { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MyAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) SMUToken(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_619_MyAdvancedToken {
label=""MyAdvancedToken"";
""619__transfer"" [label=""_transfer""];
""619_MyAdvancedToken"" [label=""MyAdvancedToken""];
""619_mintToken"" [label=""mintToken""];
""619_buy"" [label=""buy""];
""619_setPrices"" [label=""setPrices""];
""619_sell"" [label=""sell""];
""619_freezeAccount"" [label=""freezeAccount""];
""619_setPrices"" -> ""619_onlyOwner"";
""619_mintToken"" -> ""619_onlyOwner"";
""619_MyAdvancedToken"" -> ""619_SMUToken"";
""619_sell"" -> ""619__transfer"";
""619_buy"" -> ""619__transfer"";
""619_freezeAccount"" -> ""619_onlyOwner"";
}
"
0xa1a6cea5c52461028c8d436428ceddb6ce8e7ddc.sol,Metayen,contract Metayen { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1178_Metayen {
label=""Metayen"";
""1178_fallback"" [label=""fallback""];
""1178_withdraw"" [label=""withdraw""];
""1178_setName"" [label=""setName""];
""1178_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1178_sell"" [label=""sell""];
""1178_reinvest"" [label=""reinvest""];
""1178_exit"" [label=""exit""];
""1178_buy"" [label=""buy""];
""1178_balanceOf"" [label=""balanceOf""];
""1178_buyPrice"" [label=""buyPrice""];
""1178_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1178_myTokens"" [label=""myTokens""];
""1178_sqrt"" [label=""sqrt""];
""1178_setStakingRequirement"" [label=""setStakingRequirement""];
""1178_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1178_totalSupply"" [label=""totalSupply""];
""1178_purchaseTokens"" [label=""purchaseTokens""];
""1178_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1178_setSymbol"" [label=""setSymbol""];
""1178_disableInitialStage"" [label=""disableInitialStage""];
""1178_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1178_Metayen"" [label=""Metayen""];
""1178_setAdministrator"" [label=""setAdministrator""];
""1178_dividendsOf"" [label=""dividendsOf""];
""1178_sellPrice"" [label=""sellPrice""];
""1178_transfer"" [label=""transfer""];
""1178_myDividends"" [label=""myDividends""];
""1178_disableInitialStage"" -> ""1178_onlyAdministrator"";
""1178_exit"" -> ""1178_sell"";
""1178_buy"" -> ""1178_purchaseTokens"";
""1178_transfer"" -> ""1178_withdraw"";
""1178_myDividends"" -> ""1178_dividendsOf"";
""1178_reinvest"" -> ""1178_purchaseTokens"";
""1178_exit"" -> ""1178_withdraw"";
""1178_withdraw"" -> ""1178_onlyStronghands"";
""1178_withdraw"" -> ""1178_myDividends"";
""1178_ethereumToTokens_"" -> ""1178_sqrt"";
""1178_setAdministrator"" -> ""1178_onlyAdministrator"";
""1178_fallback"" -> ""1178_purchaseTokens"";
""1178_setSymbol"" -> ""1178_onlyAdministrator"";
""1178_setStakingRequirement"" -> ""1178_onlyAdministrator"";
""1178_calculateTokensReceived"" -> ""1178_ethereumToTokens_"";
""1178_buyPrice"" -> ""1178_tokensToEthereum_"";
""1178_reinvest"" -> ""1178_myDividends"";
""1178_transfer"" -> ""1178_myDividends"";
""1178_sellPrice"" -> ""1178_tokensToEthereum_"";
""1178_setName"" -> ""1178_onlyAdministrator"";
""1178_purchaseTokens"" -> ""1178_ethereumToTokens_"";
""1178_transfer"" -> ""1178_onlyBagholders"";
""1178_reinvest"" -> ""1178_onlyStronghands"";
""1178_calculateEthereumReceived"" -> ""1178_tokensToEthereum_"";
""1178_sell"" -> ""1178_onlyBagholders"";
""1178_sell"" -> ""1178_tokensToEthereum_"";
""1178_myTokens"" -> ""1178_balanceOf"";
}
"
0x716989fa21d5043165079ddbfd04a76a001a595a.sol,COCTokenBase,"contract COCTokenBase is ERC20 { string public name; string public symbol; uint8 public decimals = 18; address public administrator; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowances; event Burn(address indexed from, uint256 value); function COCTokenBase(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals) public { name = _tokenName; symbol = _tokenSymbol; decimals = _decimals; administrator = msg.sender; totalSupply = _initialSupply * 10 ** uint256(decimals); balances[administrator] = totalSupply; }",1,"subgraph cluster_627_COCTokenBase {
label=""COCTokenBase"";
""627_balanceOf"" [label=""balanceOf""];
""627_burn"" [label=""burn""];
""627_transfer"" [label=""transfer""];
""627_burnFrom"" [label=""burnFrom""];
""627_transferFrom"" [label=""transferFrom""];
""627_approve"" [label=""approve""];
""627_transferOfPower"" [label=""transferOfPower""];
""627_approveAndCall"" [label=""approveAndCall""];
""627__transfer"" [label=""_transfer""];
""627_decreaseApproval"" [label=""decreaseApproval""];
""627_COCTokenBase"" [label=""COCTokenBase""];
""627_allowance"" [label=""allowance""];
""627_increaseApproval"" [label=""increaseApproval""];
""627_transferOfPower"" -> ""627__transfer"";
""627_approveAndCall"" -> ""627_approve"";
""627_transfer"" -> ""627__transfer"";
""627_transferFrom"" -> ""627__transfer"";
}
"
0x874d4a7a8bf2abda5489cdbd62bd785c23e5531f.sol,token123,contract token123 is owned{ using SafeMath for uint256; string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 _initialSupply = 1000000 * 10 ** uint256(decimals); uint256 _totalSupply; address public owner; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; constructor() token123() public { owner = msg.sender; _totalSupply = _initialSupply; balances[owner] = _totalSupply; },1,"subgraph cluster_415_token123 {
label=""token123"";
""415_transferFrom"" [label=""transferFrom""];
""415_burn"" [label=""burn""];
""415_getMyBalance"" [label=""getMyBalance""];
""415_transfer"" [label=""transfer""];
""415_balanceOf"" [label=""balanceOf""];
""415_allowance"" [label=""allowance""];
""415_totalSupply"" [label=""totalSupply""];
""415_constructor"" [label=""constructor""];
""415_mintToken"" [label=""mintToken""];
""415_approve"" [label=""approve""];
""415_constructor"" -> ""415_constructor"";
""415_mintToken"" -> ""415_onlyOwner"";
}
"
0x5cc0076a6bbf43344a7923c5cca40f5bdff2970e.sol,LiteToken,"contract LiteToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function LiteToken() public { symbol = ; name = ; decimals = 4; _totalSupply = 84000000000000; balances[0x186d32c30f1DeFfF1eeDb34Ee661426918243545] = _totalSupply; emit Transfer(address(0), 0x186d32c30f1DeFfF1eeDb34Ee661426918243545, _totalSupply); }",1,"subgraph cluster_543_LiteToken {
label=""LiteToken"";
""543_allowance"" [label=""allowance""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_LiteToken"" [label=""LiteToken""];
""543_transfer"" [label=""transfer""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x39cfd754c85023648bf003bea2dd498c5612abfa.sol,TokenBank,contract TokenBank is Token { uint public MinDeposit; mapping (address => uint) public Holders; function initTokenBank() public { owner = msg.sender; MinDeposit = 1 ether; },1,"subgraph cluster_191_TokenBank {
label=""TokenBank"";
""191_initTokenBank"" [label=""initTokenBank""];
""191_Deposit"" [label=""Deposit""];
""191_fallback"" [label=""fallback""];
""191_WithdrawToHolder"" [label=""WithdrawToHolder""];
""191_WitdrawTokenToHolder"" [label=""WitdrawTokenToHolder""];
""191_WithdrawToHolder"" -> ""191_onlyOwner"";
""191_fallback"" -> ""191_Deposit"";
""191_WitdrawTokenToHolder"" -> ""191_WithdrawToken"";
""191_WitdrawTokenToHolder"" -> ""191_onlyOwner"";
}
"
0xda5441a5807e5cda5871b6504644e13d677706b1.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_burn"" [label=""burn""];
""361_burnFrom"" [label=""burnFrom""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x6bcfcc7035dbe589e9c0c91260772630ce92f25b.sol,TOMAToken,"contract TOMAToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TOMAToken ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TOMAToken {
label=""TOMAToken"";
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_TOMAToken"" [label=""TOMAToken""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0x1c3bb10de15c31d5dbe48fbb7b87735d1b7d8c32.sol,BLONDCOIN,"contract BLONDCOIN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BLONDCOIN() public { symbol = ; name = ; decimals = 18; _totalSupply = 45000000000000000000000000; balances[0xff72c65aa864774aa029114c0f15a44bfc6bc4e0] = _totalSupply; Transfer(address(0), 0xff72c65aa864774aa029114c0f15a44bfc6bc4e0, _totalSupply); }",1,"subgraph cluster_543_BLONDCOIN {
label=""BLONDCOIN"";
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_BLONDCOIN"" [label=""BLONDCOIN""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0xf27a6b9f1434de2a406ee0a9f94b4d5e89fb2681.sol,TOP,"contract TOP { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_384_TOP {
label=""TOP"";
""384_transferFrom"" [label=""transferFrom""];
""384_burn"" [label=""burn""];
""384_constructor"" [label=""constructor""];
""384_approveAndCall"" [label=""approveAndCall""];
""384_approve"" [label=""approve""];
""384_transfer"" [label=""transfer""];
""384__transfer"" [label=""_transfer""];
""384_burnFrom"" [label=""burnFrom""];
""384_transferFrom"" -> ""384__transfer"";
""384_approveAndCall"" -> ""384_approve"";
""384_transfer"" -> ""384__transfer"";
}
"
0x549b38e8e5fb1ba4acd4187d8b7c8a04deb53206.sol,LotteryAdmin,"contract LotteryAdmin { address public owner; address public admin; address public proposedOwner; address public ethereumLottery; uint public dailyAdminAllowance; uint public lastAllowancePaymentTimestamp; uint public nextProfile; event Deposit(address indexed _from, uint _value); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_282_LotteryAdmin {
label=""LotteryAdmin"";
""282_setLottery"" [label=""setLottery""];
""282_destruct"" [label=""destruct""];
""282_proposeOwner"" [label=""proposeOwner""];
""282_setConfiguration"" [label=""setConfiguration""];
""282_withdraw"" [label=""withdraw""];
""282_allowsAllowance"" [label=""allowsAllowance""];
""282_acceptOwnership"" [label=""acceptOwnership""];
""282_requestAllowance"" [label=""requestAllowance""];
""282_needsInitialization"" [label=""needsInitialization""];
""282_setAdmin"" [label=""setAdmin""];
""282_fallback"" [label=""fallback""];
""282_initLottery"" [label=""initLottery""];
""282_LotteryAdmin"" [label=""LotteryAdmin""];
""282_requestAllowance"" -> ""282_allowsAllowance"";
""282_setConfiguration"" -> ""282_onlyOwner"";
""282_withdraw"" -> ""282_onlyOwner"";
""282_destruct"" -> ""282_onlyOwner"";
""282_setLottery"" -> ""282_onlyOwner"";
""282_requestAllowance"" -> ""282_onlyAdminOrOwner"";
""282_proposeOwner"" -> ""282_onlyOwner"";
""282_setAdmin"" -> ""282_onlyOwner"";
""282_initLottery"" -> ""282_onlyAdminOrOwner"";
}
"
0x1d38b2f0329568ad8730b1970905e4978c16b7ff.sol,BurnToken,"contract BurnToken is BaseToken { event Burn(address indexed from, uint256 value); function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); balanceOf[msg.sender] -= _value; totalSupply -= _value; Burn(msg.sender, _value); return true; }",1,"subgraph cluster_299_BurnToken {
label=""BurnToken"";
""299_burnFrom"" [label=""burnFrom""];
""299_burn"" [label=""burn""];
}
"
0x279fd66b7621468ca14f60eaa205dae94c484dbf.sol,OfflineSecret,"contract OfflineSecret { modifier validSecret(address to, string secret, bytes32 hashed) { require(checkSecret(to, secret, hashed)); _; }",1,"subgraph cluster_123_OfflineSecret {
label=""OfflineSecret"";
""123_generateHash"" [label=""generateHash""];
""123_checkSecret"" [label=""checkSecret""];
}
"
0xf12bc22c88c4c770b1e116853cc0500bb70a81ca.sol,GLADLIVEToken,"contract GLADLIVEToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_388_GLADLIVEToken {
label=""GLADLIVEToken"";
""388__burn"" [label=""_burn""];
""388_burnFrom"" [label=""burnFrom""];
""388_approveAndCall"" [label=""approveAndCall""];
""388_transferFrom"" [label=""transferFrom""];
""388_burn"" [label=""burn""];
""388_constructor"" [label=""constructor""];
""388_approve"" [label=""approve""];
""388_transfer"" [label=""transfer""];
""388__transfer"" [label=""_transfer""];
""388_transferFrom"" -> ""388__transfer"";
""388_approveAndCall"" -> ""388_approve"";
""388_burnFrom"" -> ""388__burn"";
""388_transfer"" -> ""388__transfer"";
""388_burn"" -> ""388__burn"";
}
"
0x4efd3bf84f40eda370e52df162eccc394cfc8834.sol,Zhoan,"contract Zhoan { string public name; string public symbol; uint256 public totalSupply; uint8 public decimals = 18; address private admin_add; uint private present_money=0; event Transfer(address indexed from, address indexed to, uint256 value); mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowances; constructor(uint256 limit,string token_name,string token_symbol,uint8 token_decimals) public { admin_add=msg.sender; name=token_name; symbol=token_symbol; totalSupply=limit * 10 ** uint256(decimals); decimals=token_decimals; balanceOf[admin_add]=totalSupply; }",1,"subgraph cluster_328_Zhoan {
label=""Zhoan"";
""328_setPresentMoney"" [label=""setPresentMoney""];
""328_allowance"" [label=""allowance""];
""328_burnAccountMoeny"" [label=""burnAccountMoeny""];
""328_transferFrom"" [label=""transferFrom""];
""328_approve"" [label=""approve""];
""328_constructor"" [label=""constructor""];
""328_transfer"" [label=""transfer""];
""328_adminSendMoneyToUser"" [label=""adminSendMoneyToUser""];
""328_balanceOf"" [label=""balanceOf""];
""328_adminSendMoneyToUser"" -> ""328_transferFrom"";
""328_transfer"" -> ""328_transferFrom"";
}
"
0x1bb28e79f2482df6bf60efc7a33365703bcf1536.sol,hodlEthereum,"contract hodlEthereum { event Hodl(address indexed hodler, uint indexed amount); event Party(address indexed hodler, uint indexed amount); mapping (address => uint) public hodlers; uint constant partyTime = 1596067200; function() payable { hodlers[msg.sender] += msg.value; Hodl(msg.sender, msg.value); }",1,"subgraph cluster_86_hodlEthereum {
label=""hodlEthereum"";
""86_fallback"" [label=""fallback""];
""86_party"" [label=""party""];
}
"
0x284ff8b2acda5bbf3e7aa72dad0894ea716b5ffd.sol,TokenERC20,"contract TokenERC20 is owned{ string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply=210000000 * 10 ** uint256(decimals); mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; bool public paused = false; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Seo(address indexed from, uint256 value); function TokenERC20() public { totalSupply = uint256(totalSupply); balanceOf[msg.sender] = totalSupply; name = string(name); symbol = string(symbol); }",1,"subgraph cluster_486_TokenERC20 {
label=""TokenERC20"";
""486__transfer"" [label=""_transfer""];
""486_burnFrom"" [label=""burnFrom""];
""486_approve"" [label=""approve""];
""486_approveAndCall"" [label=""approveAndCall""];
""486_transfer"" [label=""transfer""];
""486_pause"" [label=""pause""];
""486_seo"" [label=""seo""];
""486_burn"" [label=""burn""];
""486_transferFrom"" [label=""transferFrom""];
""486_TokenERC20"" [label=""TokenERC20""];
""486_unpause"" [label=""unpause""];
""486_pause"" -> ""486_onlyOwner"";
""486_seo"" -> ""486_isRunning"";
""486_approveAndCall"" -> ""486_isRunning"";
""486_seo"" -> ""486_onlyOwner"";
""486_unpause"" -> ""486_onlyOwner"";
""486_burnFrom"" -> ""486_isRunning"";
""486_approveAndCall"" -> ""486_approve"";
""486_transfer"" -> ""486__transfer"";
""486_approve"" -> ""486_isRunning"";
""486_transferFrom"" -> ""486_isRunning"";
""486_burn"" -> ""486_isRunning"";
""486_transferFrom"" -> ""486__transfer"";
""486_transfer"" -> ""486_isRunning"";
}
"
0xbcef236c69228f004da2fa693c3347946798e0c3.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x4d66945d0b739574634b59190af51b4fe27858cc.sol,MyToken,"contract MyToken is owned { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function freezeAccount(address target, bool freeze) onlyOwner { frozenAccount[target] = freeze; FrozenFunds(target, freeze); }",1,"subgraph cluster_430_MyToken {
label=""MyToken"";
""430_transferFrom"" [label=""transferFrom""];
""430_burnFrom"" [label=""burnFrom""];
""430_approveAndCall"" [label=""approveAndCall""];
""430_freezeAccount"" [label=""freezeAccount""];
""430_MyToken"" [label=""MyToken""];
""430__transfer"" [label=""_transfer""];
""430_transfer"" [label=""transfer""];
""430_burn"" [label=""burn""];
""430_approve"" [label=""approve""];
""430_transferFrom"" -> ""430__transfer"";
""430_freezeAccount"" -> ""430_onlyOwner"";
""430_transfer"" -> ""430__transfer"";
""430_approveAndCall"" -> ""430_approve"";
}
"
0x6fc9c554c2363805673f18b3a2b1912cce8bfb8a.sol,RocketCoin,"contract RocketCoin { string public constant symbol = ; string public constant name = ; uint public constant decimals = 18; uint public constant totalSupply = 10000000 * 10 ** decimals; address owner; bool airDropStatus = true; uint airDropAmount = 300 * 10 ** decimals; uint airDropGasPrice = 20 * 10 ** 9; mapping (address => bool) participants; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function RocketCoin() public { owner = msg.sender; balances[owner] = totalSupply; Transfer(address(0), owner, totalSupply); }",1,"subgraph cluster_521_RocketCoin {
label=""RocketCoin"";
""521_fallback"" [label=""fallback""];
""521_withdrawFunds"" [label=""withdrawFunds""];
""521_transferFrom"" [label=""transferFrom""];
""521_multiTransfer"" [label=""multiTransfer""];
""521_balanceOf"" [label=""balanceOf""];
""521_approve"" [label=""approve""];
""521_RocketCoin"" [label=""RocketCoin""];
""521_allowance"" [label=""allowance""];
""521_setupAirDrop"" [label=""setupAirDrop""];
""521_transfer"" [label=""transfer""];
}
"
0x26d5b54ba01d5d5a18a99c3fc126c5eb356c1076.sol,VOCC_I092_20181211,"contract VOCC_I092_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I092_20181211 {
label=""VOCC_I092_20181211"";
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
}
"
0x4570a3a0c7b99f7ffbc522bfa4f792140c2c8c9c.sol,onlinewallet,contract onlinewallet { bytes32 keyHash; address owner; bytes32 wallet_id = 0xf97a7fd2d234ba5f73a38afebd0c6a9db67f7fa4d82fdc062a01244beebafd92; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_onlinewallet {
label=""onlinewallet"";
""121_setup_key"" [label=""setup_key""];
""121_constructor"" [label=""constructor""];
""121_get_id"" [label=""get_id""];
""121_fallback"" [label=""fallback""];
""121_clear"" [label=""clear""];
""121_new_hash"" [label=""new_hash""];
""121_withdraw"" [label=""withdraw""];
}
"
0x313df3fac623a824c8e64b4c47cf62fe0b75809e.sol,Whitelist,contract Whitelist is Ownable { mapping(address => bool) whitelist; uint256 public whitelistLength = 0; address public backendAddress; function addWallet(address _wallet) public onlyPrivilegedAddresses { require(_wallet != address(0)); require(!isWhitelisted(_wallet)); whitelist[_wallet] = true; whitelistLength++; },1,"subgraph cluster_1167_Whitelistable {
label=""Whitelistable"";
""1167_Whitelistable"" [label=""Whitelistable""];
}
"
0xd81fe2c11edd560c4d44fdd4f651f3608452beed.sol,Vault,"contract Vault is TokenVault { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event OpenDate(uint date); mapping (address => uint) public Deposits; uint minDeposit; bool Locked; uint Date; function init() payable open { Owner = msg.sender; minDeposit = 1 ether; Locked = false; deposit(); }",1,"subgraph cluster_281_Vault {
label=""Vault"";
""281_kill"" [label=""kill""];
""281_withdraw"" [label=""withdraw""];
""281_ReleaseDate"" [label=""ReleaseDate""];
""281_deposit"" [label=""deposit""];
""281_fallback"" [label=""fallback""];
""281_lock"" [label=""lock""];
""281_WithdrawEnabled"" [label=""WithdrawEnabled""];
""281_init"" [label=""init""];
""281_MinimumDeposit"" [label=""MinimumDeposit""];
""281_setRelease"" [label=""setRelease""];
""281_getOwner"" [label=""getOwner""];
""281_init"" -> ""281_open"";
""281_withdraw"" -> ""281_onlyOwner"";
""281_withdraw"" -> ""281_WithdrawEnabled"";
""281_init"" -> ""281_deposit"";
""281_deposit"" -> ""281_MinimumDeposit"";
""281_fallback"" -> ""281_deposit"";
}
"
0x70b7c2015e1e01541ca220fa36c733fc03c687c5.sol,DBXContract,"contract DBXContract { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_DBXContract {
label=""DBXContract"";
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361_constructor"" [label=""constructor""];
""361_burn"" [label=""burn""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0xcfca01488643501cab56d1855921c897d5ee4b1b.sol,BitcoinInw,"contract BitcoinInw is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 21000000000000000000000000; balances[0xbcceFb33F12FbBfE0eD87b11187B5C78Dcd13b6c] = _totalSupply; emit Transfer(address(0), 0xbcceFb33F12FbBfE0eD87b11187B5C78Dcd13b6c, _totalSupply); }",1,"subgraph cluster_543_BitcoinInw {
label=""BitcoinInw"";
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_constructor"" [label=""constructor""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0xeca7f8aa63d1d28fafda5fdf021388b5d7166dee.sol,TryToPlay,contract TryToPlay { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_128_TryToPlay {
label=""TryToPlay"";
""128_newQuestioner"" [label=""newQuestioner""];
""128_NewQuestion"" [label=""NewQuestion""];
""128_StartTryToPlay"" [label=""StartTryToPlay""];
""128_fallback"" [label=""fallback""];
""128_StopGame"" [label=""StopGame""];
""128_Try"" [label=""Try""];
}
"
0xd3676a37a23ad8f4238064c1edc704debf335f26.sol,CariNetPrivilege,"contract CariNetPrivilege { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function CariNetPrivilege ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_CariNetPrivilege {
label=""CariNetPrivilege"";
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_CariNetPrivilege"" [label=""CariNetPrivilege""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x347d11b17022f0f636dda2492f980cc60117d3f7.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function _transfer(address _from, address _to, uint _value) internal { require (_to != 0x0); require (balanceOf[_from] >= _value); require (balanceOf[_to] + _value > balanceOf[_to]); require(!frozenAccount[_from]); require(!frozenAccount[_to]); balanceOf[_from] -= _value; balanceOf[_to] += _value; emit Transfer(_from, _to, _value); }",1,"subgraph cluster_521_MyAdvancedToken {
label=""MyAdvancedToken"";
""521_mintToken"" [label=""mintToken""];
""521__transfer"" [label=""_transfer""];
""521_freezeAccount"" [label=""freezeAccount""];
""521_freezeAccount"" -> ""521_onlyOwner"";
""521_mintToken"" -> ""521_onlyOwner"";
}
"
0xdba934811a10d2cfe5f33736cc56c42e7b8fd067.sol,HAMDAN,"contract HAMDAN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function HAMDAN() public { symbol = ; name = ; decimals = 18; _totalSupply = 999000000000000000000000000; balances[0x91A4A840B9C5e01fc2f735e0331f698D07d98aAE] = _totalSupply; Transfer(address(0), 0x91A4A840B9C5e01fc2f735e0331f698D07d98aAE, _totalSupply); }",1,"subgraph cluster_542_HAMDAN {
label=""HAMDAN"";
""542_allowance"" [label=""allowance""];
""542_balanceOf"" [label=""balanceOf""];
""542_totalSupply"" [label=""totalSupply""];
""542_approveAndCall"" [label=""approveAndCall""];
""542_fallback"" [label=""fallback""];
""542_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""542_HAMDAN"" [label=""HAMDAN""];
""542_approve"" [label=""approve""];
""542_transfer"" [label=""transfer""];
""542_transferFrom"" [label=""transferFrom""];
""542_transferFrom"" -> ""542_safeSub"";
""542_transfer"" -> ""542_safeAdd"";
""542_transfer"" -> ""542_safeSub"";
""542_transferAnyERC20Token"" -> ""542_onlyOwner"";
""542_transferFrom"" -> ""542_safeAdd"";
}
"
0x267398927b5886df921b235afe9dbbe47fbcc37d.sol,NobarToken,"contract NobarToken { string public name; string public symbol; uint8 public decimals = 2; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function NobarToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_NobarToken {
label=""NobarToken"";
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_NobarToken"" [label=""NobarToken""];
""361_approve"" [label=""approve""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0xa2651bfa1d613fea0f7a3138e442e4ee865b5ec7.sol,AdsVenture,contract AdsVenture is Owned{ struct User{ string username; uint balance; },1,"subgraph cluster_420_AdsVenture {
label=""AdsVenture"";
""420_AdsVenture"" [label=""AdsVenture""];
""420_transferFrom"" [label=""transferFrom""];
""420_buy"" [label=""buy""];
""420_setUser"" [label=""setUser""];
""420_setSymbol"" [label=""setSymbol""];
""420_sell"" [label=""sell""];
""420_setReserve"" [label=""setReserve""];
""420_getUser"" [label=""getUser""];
""420_setDecimals"" [label=""setDecimals""];
""420_getUsers"" [label=""getUsers""];
""420_transfer"" [label=""transfer""];
""420_setTotalSupply"" [label=""setTotalSupply""];
""420_setPrices"" [label=""setPrices""];
""420_countUsers"" [label=""countUsers""];
""420_buy"" -> ""420_transfer"";
""420_transfer"" -> ""420_onlyOwner"";
""420_setReserve"" -> ""420_onlyOwner"";
""420_setSymbol"" -> ""420_onlyOwner"";
""420_setPrices"" -> ""420_onlyOwner"";
""420_setTotalSupply"" -> ""420_onlyOwner"";
""420_setDecimals"" -> ""420_onlyOwner"";
""420_sell"" -> ""420_transferFrom"";
}
"
0x887e1988f7d697df22aea1207a5e1831ad3065ef.sol,TokenLayer,"contract TokenLayer is ERC721, Manageable { using SafeMath for uint256; event TokenCreated(uint256 tokenId, bytes32 name, uint256 parentId, address owner); event TokenDeleted(uint256 tokenId); event TokenSold( uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, bytes32 name, uint256 parentId ); event PriceChanged(uint256 tokenId, uint256 oldPrice, uint256 newPrice); event ParentChanged(uint256 tokenId, uint256 oldParentId, uint256 newParentId); event NameChanged(uint256 tokenId, bytes32 oldName, bytes32 newName); event MetaDataChanged(uint256 tokenId, bytes32 oldMeta, bytes32 newMeta); uint256 private constant DEFAULTPARENT = 123456789; mapping (uint256 => Token) private tokenIndexToToken; mapping (address => uint256) private ownershipTokenCount; address public gameAddress; address public parentAddr; uint256 private totalTokens; uint256 public devFee = 50; uint256 public ownerFee = 200; uint256[10] private chainFees = [10]; struct Token { bool exists; address approved; address owner; bytes32 metadata; bytes32 name; uint256 lastBlock; uint256 parentId; uint256 price; }",1,"subgraph cluster_2131_TokenLayer {
label=""TokenLayer"";
""2131_getPriceOf"" [label=""getPriceOf""];
""2131_name"" [label=""name""];
""2131_setChainFees"" [label=""setChainFees""];
""2131__transferFrom"" [label=""_transferFrom""];
""2131_ownerOf"" [label=""ownerOf""];
""2131_symbol"" [label=""symbol""];
""2131_getChainFees"" [label=""getChainFees""];
""2131_createToken"" [label=""createToken""];
""2131__transfer"" [label=""_transfer""];
""2131_setDevFee"" [label=""setDevFee""];
""2131_setOwnerFee"" [label=""setOwnerFee""];
""2131_takeOwnership"" [label=""takeOwnership""];
""2131__approved"" [label=""_approved""];
""2131_bundleToken"" [label=""bundleToken""];
""2131_getMetadataOf"" [label=""getMetadataOf""];
""2131_setLayerParent"" [label=""setLayerParent""];
""2131_implementsERC721"" [label=""implementsERC721""];
""2131_parentAddr"" [label=""parentAddr""];
""2131_approve"" [label=""approve""];
""2131_balanceOf"" [label=""balanceOf""];
""2131__owns"" [label=""_owns""];
""2131_setParent"" [label=""setParent""];
""2131_transferFrom"" [label=""transferFrom""];
""2131_blocked"" [label=""blocked""];
""2131_transfer"" [label=""transfer""];
""2131_setMetadata"" [label=""setMetadata""];
""2131__approve"" [label=""_approve""];
""2131__getChainLength"" [label=""_getChainLength""];
""2131_getToken"" [label=""getToken""];
""2131_setPrice"" [label=""setPrice""];
""2131_getChainFeeArray"" [label=""getChainFeeArray""];
""2131__addressNotNull"" [label=""_addressNotNull""];
""2131_totalSupply"" [label=""totalSupply""];
""2131_exists"" [label=""exists""];
""2131_TokenLayer"" [label=""TokenLayer""];
""2131__getNextPrice"" [label=""_getNextPrice""];
""2131_setGame"" [label=""setGame""];
""2131_tokensOfOwner"" [label=""tokensOfOwner""];
""2131_incrementPrice"" [label=""incrementPrice""];
""2131_setName"" [label=""setName""];
""2131_getParentOf"" [label=""getParentOf""];
""2131_createTokens"" [label=""createTokens""];
""2131_getChain"" [label=""getChain""];
""2131_deleteToken"" [label=""deleteToken""];
""2131__checkThenTransfer"" [label=""_checkThenTransfer""];
""2131__takeOwnership"" [label=""_takeOwnership""];
""2131_setName"" -> ""2131_exists"";
""2131__checkThenTransfer"" -> ""2131__transfer"";
""2131__getChainLength"" -> ""2131_getParentOf"";
""2131_takeOwnership"" -> ""2131_onlySystem"";
""2131_getParentOf"" -> ""2131_exists"";
""2131_getToken"" -> ""2131_getChainFees"";
""2131__transferFrom"" -> ""2131__owns"";
""2131__transferFrom"" -> ""2131__transfer"";
""2131_tokensOfOwner"" -> ""2131_balanceOf"";
""2131__checkThenTransfer"" -> ""2131_exists"";
""2131__takeOwnership"" -> ""2131__approved"";
""2131_setDevFee"" -> ""2131_onlyAdmin"";
""2131_transfer"" -> ""2131_isUnlocked"";
""2131_transferFrom"" -> ""2131__transferFrom"";
""2131_setChainFees"" -> ""2131_onlyAdmin"";
""2131__takeOwnership"" -> ""2131__transfer"";
""2131_createTokens"" -> ""2131_onlyAdmin"";
""2131_transferFrom"" -> ""2131_onlySystem"";
""2131__checkThenTransfer"" -> ""2131__addressNotNull"";
""2131_ownerOf"" -> ""2131_exists"";
""2131__transferFrom"" -> ""2131__addressNotNull"";
""2131__checkThenTransfer"" -> ""2131__owns"";
""2131_setLayerParent"" -> ""2131_onlyAdmin"";
""2131_bundleToken"" -> ""2131_getChainFees"";
""2131_getChain"" -> ""2131__addressNotNull"";
""2131_incrementPrice"" -> ""2131_exists"";
""2131_transfer"" -> ""2131_onlySystem"";
""2131_createToken"" -> ""2131__transfer"";
""2131_setPrice"" -> ""2131__owns"";
""2131_incrementPrice"" -> ""2131_onlySystem"";
""2131_createToken"" -> ""2131_onlyAdmin"";
""2131_transfer"" -> ""2131__checkThenTransfer"";
""2131_deleteToken"" -> ""2131_onlyAdmin"";
""2131_getMetadataOf"" -> ""2131_exists"";
""2131_setMetadata"" -> ""2131_onlyAdmin"";
""2131_approve"" -> ""2131__approve"";
""2131_getToken"" -> ""2131__getNextPrice"";
""2131_bundleToken"" -> ""2131__getNextPrice"";
""2131_approve"" -> ""2131_isUnlocked"";
""2131_getChain"" -> ""2131_getParentOf"";
""2131_getChain"" -> ""2131_exists"";
""2131__transferFrom"" -> ""2131__approved"";
""2131_setParent"" -> ""2131_exists"";
""2131_tokensOfOwner"" -> ""2131_exists"";
""2131_setPrice"" -> ""2131_onlySystem"";
""2131_deleteToken"" -> ""2131_exists"";
""2131_setGame"" -> ""2131_onlyAdmin"";
""2131_incrementPrice"" -> ""2131_getChainFees"";
""2131_takeOwnership"" -> ""2131_isUnlocked"";
""2131_createTokens"" -> ""2131_createToken"";
""2131__getNextPrice"" -> ""2131_getChainFees"";
""2131_setName"" -> ""2131_onlyAdmin"";
""2131_setOwnerFee"" -> ""2131_onlyAdmin"";
""2131__getChainLength"" -> ""2131__addressNotNull"";
""2131_createToken"" -> ""2131_exists"";
""2131__approve"" -> ""2131__owns"";
""2131_getChainFees"" -> ""2131__getChainLength"";
""2131_approve"" -> ""2131_onlySystem"";
""2131_setMetadata"" -> ""2131_exists"";
""2131_transferFrom"" -> ""2131_isUnlocked"";
""2131__takeOwnership"" -> ""2131__addressNotNull"";
""2131_setParent"" -> ""2131_onlyAdmin"";
""2131_tokensOfOwner"" -> ""2131_totalSupply"";
""2131_createToken"" -> ""2131__addressNotNull"";
""2131_getPriceOf"" -> ""2131_exists"";
""2131_takeOwnership"" -> ""2131__takeOwnership"";
}
"
0x284ff8b2acda5bbf3e7aa72dad0894ea716b5ffd.sol,TokenERC20,"contract TokenERC20 is owned{ string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply=210000000 * 10 ** uint256(decimals); mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; bool public paused = false; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Seo(address indexed from, uint256 value); function TokenERC20() public { totalSupply = uint256(totalSupply); balanceOf[msg.sender] = totalSupply; name = string(name); symbol = string(symbol); }",1,"subgraph cluster_486_TokenERC20 {
label=""TokenERC20"";
""486__transfer"" [label=""_transfer""];
""486_burnFrom"" [label=""burnFrom""];
""486_approve"" [label=""approve""];
""486_approveAndCall"" [label=""approveAndCall""];
""486_transfer"" [label=""transfer""];
""486_pause"" [label=""pause""];
""486_seo"" [label=""seo""];
""486_burn"" [label=""burn""];
""486_transferFrom"" [label=""transferFrom""];
""486_TokenERC20"" [label=""TokenERC20""];
""486_unpause"" [label=""unpause""];
""486_pause"" -> ""486_onlyOwner"";
""486_seo"" -> ""486_isRunning"";
""486_approveAndCall"" -> ""486_isRunning"";
""486_seo"" -> ""486_onlyOwner"";
""486_unpause"" -> ""486_onlyOwner"";
""486_burnFrom"" -> ""486_isRunning"";
""486_approveAndCall"" -> ""486_approve"";
""486_transfer"" -> ""486__transfer"";
""486_approve"" -> ""486_isRunning"";
""486_transferFrom"" -> ""486_isRunning"";
""486_burn"" -> ""486_isRunning"";
""486_transferFrom"" -> ""486__transfer"";
""486_transfer"" -> ""486_isRunning"";
}
"
0xaa57e849341a2899110ba676a49302c069251d19.sol,EditionStorage,"contract EditionStorage is BaseStorage { uint public offset = 1000000; uint public offsetIndex = 1; uint8[3] public defaultEditionLimits = [10, 89, 200]; mapping (uint => mapping (uint8 => uint8)) public editionCounts; mapping (uint => mapping (uint8 => uint8)) public editionLimits; mapping (uint => uint) public lastEditionOf; function setOffset(uint _offset) external onlyOwner { offset = _offset; }",1,"subgraph cluster_855_EditionStorage {
label=""EditionStorage"";
""855_increaseGenerationCount"" [label=""increaseGenerationCount""];
""855_nextOffsetIndex"" [label=""nextOffsetIndex""];
""855_setOffset"" [label=""setOffset""];
""855_getEditionLimits"" [label=""getEditionLimits""];
""855_getEditionsCount"" [label=""getEditionsCount""];
""855_isValidGeneration"" [label=""isValidGeneration""];
""855_setLastEditionOf"" [label=""setLastEditionOf""];
""855_getOffsetIndex"" [label=""getOffsetIndex""];
""855_canCreateEdition"" [label=""canCreateEdition""];
""855_increaseGenerationCount"" -> ""855_canWrite"";
""855_setOffset"" -> ""855_onlyOwner"";
""855_increaseGenerationCount"" -> ""855_isValidGeneration"";
""855_setLastEditionOf"" -> ""855_canWrite"";
""855_nextOffsetIndex"" -> ""855_canWrite"";
""855_increaseGenerationCount"" -> ""855_canCreateEdition"";
}
"
0x6b6d1a8858893c3e228f335726e1417a35832f76.sol,Carbon,contract Carbon { string public name = ; string public symbol = ; uint256 public decimals = 18; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 1000000000 * (10**decimals); address public owner; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_287_Carbon {
label=""Carbon"";
""287_Carbon"" [label=""Carbon""];
""287_burnTotalSupply"" [label=""burnTotalSupply""];
""287_transferFrom"" [label=""transferFrom""];
""287_setName"" [label=""setName""];
""287_transfer"" [label=""transfer""];
""287_burnSupply"" [label=""burnSupply""];
""287_approve"" [label=""approve""];
""287_setName"" -> ""287_isOwner"";
""287_burnSupply"" -> ""287_isOwner"";
""287_burnTotalSupply"" -> ""287_isOwner"";
}
"
0x55ae5792903b179915e10065e26610435832a3f7.sol,CofounditICO,"contract CofounditICO is owned{ uint256 public startBlock; uint256 public endBlock; uint256 public minEthToRaise; uint256 public maxEthToRaise; uint256 public totalEthRaised; address public multisigAddress; uint256 public icoSupply; uint256 public strategicReserveSupply; uint256 public cashilaTokenSupply; uint256 public iconomiTokenSupply; uint256 public coreTeamTokenSupply; ICofounditToken cofounditTokenContract; mapping (address => bool) presaleContributorAllowance; uint256 nextFreeParticipantIndex; mapping (uint => address) participantIndex; mapping (address => uint256) participantContribution; uint256 usedIcoSupply; uint256 usedStrategicReserveSupply; uint256 usedCashilaTokenSupply; uint256 usedIconomiTokenSupply; uint256 usedCoreTeamTokenSupply; bool icoHasStarted; bool minTresholdReached; bool icoHasSucessfulyEnded; uint256 lastEthReturnIndex; mapping (address => bool) hasClaimedEthWhenFail; uint256 lastCfiIssuanceIndex; string icoStartedMessage = ; string icoMinTresholdReachedMessage = ; string icoEndedSuccessfulyMessage = ; string icoEndedSuccessfulyWithCapMessage = ; string icoFailedMessage = ; event ICOStarted(uint256 _blockNumber, string _message); event ICOMinTresholdReached(uint256 _blockNumber, string _message); event ICOEndedSuccessfuly(uint256 _blockNumber, uint256 _amountRaised, string _message); event ICOFailed(uint256 _blockNumber, uint256 _ammountRaised, string _message); event ErrorSendingETH(address _from, uint256 _amount); function CofounditICO(uint256 _startBlock, uint256 _endBlock, address _multisigAddress) { startBlock = _startBlock; endBlock = _endBlock; minEthToRaise = 4525 * 10**18; maxEthToRaise = 56565 * 10**18; multisigAddress = _multisigAddress; icoSupply = 125000000 * 10**18; strategicReserveSupply = 125000000 * 10**18; cashilaTokenSupply = 100000000 * 10**18; iconomiTokenSupply = 50000000 * 10**18; coreTeamTokenSupply = 100000000 * 10**18; }",1,"subgraph cluster_976_CofounditICO {
label=""CofounditICO"";
""976_claimEthIfFailed"" [label=""claimEthIfFailed""];
""976_fallback"" [label=""fallback""];
""976_batchIssueTokens"" [label=""batchIssueTokens""];
""976_withdrawEth"" [label=""withdrawEth""];
""976_icoInProgress"" [label=""icoInProgress""];
""976_participantContributionInEth"" [label=""participantContributionInEth""];
""976_withdrawRemainingBalanceForManualRecovery"" [label=""withdrawRemainingBalanceForManualRecovery""];
""976_removePresaleContributor"" [label=""removePresaleContributor""];
""976_getCofounditTokenAddress"" [label=""getCofounditTokenAddress""];
""976_CofounditICO"" [label=""CofounditICO""];
""976_getCfiEstimation"" [label=""getCfiEstimation""];
""976_claimReservedTokens"" [label=""claimReservedTokens""];
""976_addPresaleContributors"" [label=""addPresaleContributors""];
""976_isAddressAllowedInPresale"" [label=""isAddressAllowedInPresale""];
""976_batchReturnEthIfFailed"" [label=""batchReturnEthIfFailed""];
""976_setTokenContract"" [label=""setTokenContract""];
""976_changeMultisigAddress"" [label=""changeMultisigAddress""];
""976_claimReservedTokens"" -> ""976_onlyOwner"";
""976_removePresaleContributor"" -> ""976_onlyOwner"";
""976_withdrawRemainingBalanceForManualRecovery"" -> ""976_onlyOwner"";
""976_addPresaleContributors"" -> ""976_onlyOwner"";
""976_changeMultisigAddress"" -> ""976_onlyOwner"";
""976_withdrawEth"" -> ""976_onlyOwner"";
""976_batchIssueTokens"" -> ""976_onlyOwner"";
""976_batchReturnEthIfFailed"" -> ""976_onlyOwner"";
""976_setTokenContract"" -> ""976_onlyOwner"";
}
"
0x27ce49590684308d22fe7adcb8b80976701774d3.sol,TheEthGame,contract TheEthGame { using SafeMath for uint256; struct Player { uint256 score; uint256 lastCellBoughtOnBlockNumber; uint256 numberOfCellsOwned; uint256 numberOfCellsBought; uint256 earnings; uint256 partialHarmonicSum; uint256 partialScoreSum; address referreal; bytes32 name; },1,"subgraph cluster_2032_TheEthGameTrophy {
label=""TheEthGameTrophy"";
""2032_name"" [label=""name""];
""2032_constructor"" [label=""constructor""];
""2032_description"" [label=""description""];
""2032_rank"" [label=""rank""];
""2032_message"" [label=""message""];
""2032_owner"" [label=""owner""];
""2032_award"" [label=""award""];
""2032_winner"" [label=""winner""];
""2032_creator"" [label=""creator""];
""2032_transfer"" [label=""transfer""];
}
"
0x2aaefbac989f8951436c36474c304af7bf31bb26.sol,Broker,"contract Broker is Administration { event BrokerRegistered(uint indexed brokerId, address indexed broker); event AppendSubBroker(uint indexed brokerId, uint indexed subBrokerId, address indexed subBroker); event BrokerTransfer(address indexed newBroker, uint indexed brokerId, uint indexed subBrokerId); event BrokerFeeDistrubution(uint brokerId, address indexed vipBroker, uint indexed vipShare, uint subBrokerId, address indexed broker, uint share); event BrokerFeeClaim(address indexed broker, uint indexed fee); mapping (uint => address[]) BrokerIdToBrokers; mapping (uint => uint) BrokerIdToSpots; mapping (address => uint) BrokerIncoming; mapping (address => bool) UserToIfBroker; uint public vipBrokerFee = 5 ether; uint public brokerFee = 1.5 ether; uint public vipBrokerNum = 1000; uint public subBrokerNum = 5; function _brokerFeeDistribute(uint _price, uint _type, uint _brokerId, uint _subBrokerId) internal { address vipBroker = getBrokerAddress(_brokerId, 0); address broker = getBrokerAddress(_brokerId, _subBrokerId); require(vipBroker != address(0) && broker != address(0)); uint totalShare = _price*rewardPercent[_type]/100; BrokerIncoming[vipBroker] = BrokerIncoming[vipBroker] + totalShare*15/100; BrokerIncoming[broker] = BrokerIncoming[broker] + totalShare*85/100; emit BrokerFeeDistrubution(_brokerId, vipBroker, totalShare*15/100, _subBrokerId, broker, totalShare*85/100); }",1,"subgraph cluster_967_Broker {
label=""Broker"";
""967_transferBroker"" [label=""transferBroker""];
""967__brokerFeeDistribute"" [label=""_brokerFeeDistribute""];
""967_assignSubBroker"" [label=""assignSubBroker""];
""967_getBrokerAddress"" [label=""getBrokerAddress""];
""967_getVipBrokerNum"" [label=""getVipBrokerNum""];
""967_getBrokerInfo"" [label=""getBrokerInfo""];
""967_getBrokerIncoming"" [label=""getBrokerIncoming""];
""967_claimBrokerFee"" [label=""claimBrokerFee""];
""967_registerBroker"" [label=""registerBroker""];
""967_claimBrokerFee"" -> ""967_whenNotPaused"";
""967_transferBroker"" -> ""967_whenNotPaused"";
""967_getVipBrokerNum"" -> ""967_safeSub"";
""967__brokerFeeDistribute"" -> ""967_getBrokerAddress"";
}
"
0x518be1097f1b72e60f9e12247980f4c08b643809.sol,Multiownable,"contract Multiownable { uint256 public ownersGeneration; uint256 public howManyOwnersDecide; address[] public owners; bytes32[] public allOperations; address internal insideCallSender; uint256 internal insideCallCount; mapping(address => uint) public ownersIndices; mapping(bytes32 => uint) public allOperationsIndicies; mapping(bytes32 => uint256) public votesMaskByOperation; mapping(bytes32 => uint256) public votesCountByOperation; event OwnershipTransferred(address[] previousOwners, uint howManyOwnersDecide, address[] newOwners, uint newHowManyOwnersDecide); event OperationCreated(bytes32 operation, uint howMany, uint ownersCount, address proposer); event OperationUpvoted(bytes32 operation, uint votes, uint howMany, uint ownersCount, address upvoter); event OperationPerformed(bytes32 operation, uint howMany, uint ownersCount, address performer); event OperationDownvoted(bytes32 operation, uint votes, uint ownersCount, address downvoter); event OperationCancelled(bytes32 operation, address lastCanceller); function isOwner(address wallet) public constant returns(bool) { return ownersIndices[wallet] > 0; }",1,"subgraph cluster_767_Multiownable {
label=""Multiownable"";
""767_ownersCount"" [label=""ownersCount""];
""767_deleteOperation"" [label=""deleteOperation""];
""767_allOperationsCount"" [label=""allOperationsCount""];
""767_isOwner"" [label=""isOwner""];
""767_transferOwnership"" [label=""transferOwnership""];
""767_transferOwnershipWithHowMany"" [label=""transferOwnershipWithHowMany""];
""767_constructor"" [label=""constructor""];
""767_cancelPending"" [label=""cancelPending""];
""767_checkHowManyOwners"" [label=""checkHowManyOwners""];
""767_checkHowManyOwners"" -> ""767_deleteOperation"";
""767_cancelPending"" -> ""767_onlyAnyOwner"";
""767_cancelPending"" -> ""767_deleteOperation"";
""767_transferOwnershipWithHowMany"" -> ""767_onlyManyOwners"";
""767_transferOwnership"" -> ""767_transferOwnershipWithHowMany"";
}
"
0x3f922acba2ee567a93933fa4392c2690e4706d42.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x850c430378909ba9ff2494d0a4df17928e99f8f4.sol,BdpOwnershipStorage,contract BdpOwnershipStorage is BdpBase { using SafeMath for uint256; mapping (uint256 => address) public tokenOwner; mapping (uint256 => address) public tokenApprovals; mapping (address => uint256) public ownedArea; mapping (address => uint256[]) public ownedTokens; mapping(uint256 => uint256) public ownedTokensIndex; uint256[] public tokenIds; mapping (uint256 => uint256) public tokenIdsIndex; function getTokenOwner(uint256 _tokenId) view public returns (address) { return tokenOwner[_tokenId]; },1,"subgraph cluster_2454_BdpOwnershipStorage {
label=""BdpOwnershipStorage"";
""2454_getOwnedTokensLength"" [label=""getOwnedTokensLength""];
""2454_getTokenOwner"" [label=""getTokenOwner""];
""2454_decrementOwnedArea"" [label=""decrementOwnedArea""];
""2454_getTokenIdsLength"" [label=""getTokenIdsLength""];
""2454_setOwnedArea"" [label=""setOwnedArea""];
""2454_setOwnedToken"" [label=""setOwnedToken""];
""2454_setTokenOwner"" [label=""setTokenOwner""];
""2454_setTokenIdsIndex"" [label=""setTokenIdsIndex""];
""2454_setTokenApproval"" [label=""setTokenApproval""];
""2454_setOwnedTokensIndex"" [label=""setOwnedTokensIndex""];
""2454_getTokenIdByIndex"" [label=""getTokenIdByIndex""];
""2454_incrementOwnedArea"" [label=""incrementOwnedArea""];
""2454_decrementOwnedTokensLength"" [label=""decrementOwnedTokensLength""];
""2454_getOwnedArea"" [label=""getOwnedArea""];
""2454_pushOwnedToken"" [label=""pushOwnedToken""];
""2454_getTokenIdsIndex"" [label=""getTokenIdsIndex""];
""2454_BdpOwnershipStorage"" [label=""BdpOwnershipStorage""];
""2454_getOwnedTokensIndex"" [label=""getOwnedTokensIndex""];
""2454_getOwnedToken"" [label=""getOwnedToken""];
""2454_pushTokenId"" [label=""pushTokenId""];
""2454_decrementTokenIdsLength"" [label=""decrementTokenIdsLength""];
""2454_setTokenIdByIndex"" [label=""setTokenIdByIndex""];
""2454_getTokenApproval"" [label=""getTokenApproval""];
""2454_setTokenApproval"" -> ""2454_storageAccessControl"";
""2454_setOwnedArea"" -> ""2454_storageAccessControl"";
""2454_decrementOwnedTokensLength"" -> ""2454_storageAccessControl"";
""2454_setTokenOwner"" -> ""2454_storageAccessControl"";
""2454_setOwnedTokensIndex"" -> ""2454_storageAccessControl"";
""2454_setTokenIdByIndex"" -> ""2454_storageAccessControl"";
""2454_setOwnedToken"" -> ""2454_storageAccessControl"";
""2454_decrementOwnedArea"" -> ""2454_storageAccessControl"";
""2454_incrementOwnedArea"" -> ""2454_storageAccessControl"";
""2454_pushOwnedToken"" -> ""2454_storageAccessControl"";
""2454_pushTokenId"" -> ""2454_storageAccessControl"";
""2454_setTokenIdsIndex"" -> ""2454_storageAccessControl"";
""2454_decrementTokenIdsLength"" -> ""2454_storageAccessControl"";
}
"
0x129e719c424a7a6fbdeb7ca3d65186892d54ea8c.sol,QUIZ_GAME,"contract QUIZ_GAME { string public Question; bytes32 responseHash; address questionSender; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); Question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_QUIZ_GAME {
label=""QUIZ_GAME"";
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_NewQuestion"" [label=""NewQuestion""];
}
"
0x129e719c424a7a6fbdeb7ca3d65186892d54ea8c.sol,QUIZ_GAME,"contract QUIZ_GAME { string public Question; bytes32 responseHash; address questionSender; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); Question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_QUIZ_GAME {
label=""QUIZ_GAME"";
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_NewQuestion"" [label=""NewQuestion""];
}
"
0x4c1a8ba7d6fe281ea01b3cd69fcb6d82d5771996.sol,TokenERC20,"contract TokenERC20 { using SafeMath for uint256; string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_534_TokenERC20 {
label=""TokenERC20"";
""534__transfer"" [label=""_transfer""];
""534_burn"" [label=""burn""];
""534_TokenERC20"" [label=""TokenERC20""];
""534_burnFrom"" [label=""burnFrom""];
""534_approveAndCall"" [label=""approveAndCall""];
""534_transfer"" [label=""transfer""];
""534_transferFrom"" [label=""transferFrom""];
""534_approve"" [label=""approve""];
""534_approveAndCall"" -> ""534_approve"";
""534_transferFrom"" -> ""534__transfer"";
""534_transfer"" -> ""534__transfer"";
}
"
0x6b78d47bfd2b391f2f34f31a128487e6768ab4f6.sol,eduCash,"contract eduCash { string public name = ; string public symbol = ; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function eduCash( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_363_eduCash {
label=""eduCash"";
""363_approve"" [label=""approve""];
""363_transferFrom"" [label=""transferFrom""];
""363__transfer"" [label=""_transfer""];
""363_eduCash"" [label=""eduCash""];
""363_burn"" [label=""burn""];
""363_approveAndCall"" [label=""approveAndCall""];
""363_burnFrom"" [label=""burnFrom""];
""363_transfer"" [label=""transfer""];
""363_transfer"" -> ""363__transfer"";
""363_approveAndCall"" -> ""363_approve"";
""363_transferFrom"" -> ""363__transfer"";
}
"
0x2d50c2dd998aab26a666a5e9f15e7f32ad9e8ce1.sol,VOCC_I073_20181211,"contract VOCC_I073_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I073_20181211 {
label=""VOCC_I073_20181211"";
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0x5b2028602af2693d50b4157f4acf84d632ec8208.sol,Savings,"contract Savings is Ownable { address public Owner; mapping (address => uint) public deposits; uint public openDate; event Initialized(uint OpenDate); event Deposit(address indexed Depositor, uint Amount); event Withdrawal(address indexed Withdrawer, uint Amount); function init(uint open) payable { Owner = msg.sender; openDate = open; Initialized(open); }",1,"subgraph cluster_164_Savings {
label=""Savings"";
""164_kill"" [label=""kill""];
""164_fallback"" [label=""fallback""];
""164_withdraw"" [label=""withdraw""];
""164_init"" [label=""init""];
""164_deposit"" [label=""deposit""];
""164_withdraw"" -> ""164_isOwner"";
""164_fallback"" -> ""164_deposit"";
""164_kill"" -> ""164_isOwner"";
}
"
0x5192a95f79c83e1581574b90f75a28af79c871ff.sol,DiscountPercentCoin,"contract DiscountPercentCoin is Authorizable, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_809_DiscountPercentCoin {
label=""DiscountPercentCoin"";
""809_mintToken"" [label=""mintToken""];
""809_freezeAccount"" [label=""freezeAccount""];
""809_sell"" [label=""sell""];
""809_constructor"" [label=""constructor""];
""809__transfer"" [label=""_transfer""];
""809_setPrices"" [label=""setPrices""];
""809_buy"" [label=""buy""];
""809_sell"" -> ""809__transfer"";
""809_setPrices"" -> ""809_onlyAuthorized"";
""809_constructor"" -> ""809_constructor"";
""809_buy"" -> ""809__transfer"";
""809_freezeAccount"" -> ""809_onlyAuthorized"";
""809_mintToken"" -> ""809_onlyAuthorized"";
}
"
0x77de6b2729baff72c220115fe03017c57b57baf5.sol,Dancoin,"contract Dancoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Dancoin() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xDbDF3C3Fa2ec570CbE84Fd1a181Ebc49Efca40b7] = _totalSupply; Transfer(address(0), 0xDbDF3C3Fa2ec570CbE84Fd1a181Ebc49Efca40b7, _totalSupply); }",1,"subgraph cluster_543_Dancoin {
label=""Dancoin"";
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_Dancoin"" [label=""Dancoin""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x3a7ebc138fd59ccce16b7968199c2ac7b013bbc0.sol,NewToken,contract NewToken { function NewToken() { totalSupply = 1000000000000000000; name = ; decimals = 9; symbol = ; version = ; balances[msg.sender] = totalSupply; },1,"subgraph cluster_273_NewToken {
label=""NewToken"";
""273_transferFrom"" [label=""transferFrom""];
""273_allowance"" [label=""allowance""];
""273_transfer"" [label=""transfer""];
""273_NewToken"" [label=""NewToken""];
""273_sendFromContract"" [label=""sendFromContract""];
""273_approve"" [label=""approve""];
""273_balanceOf"" [label=""balanceOf""];
""273_transfer"" -> ""273_onlyPayloadSize"";
}
"
0x64e99085fca7f908e1de0db94dae7449b90e97a5.sol,EIP20,"contract EIP20 is EIP20Interface { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function EIP20( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_65_EIP20Interface {
label=""EIP20Interface"";
""65_allowance"" [label=""allowance""];
""65_transfer"" [label=""transfer""];
""65_transferFrom"" [label=""transferFrom""];
""65_approve"" [label=""approve""];
""65_balanceOf"" [label=""balanceOf""];
}
"
0x008d3c9e91f8abff45f39eb71b316a0606c6d378.sol,TCN,"contract TCN { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TCN( ) public { totalSupply = 100000000000000000; balanceOf[msg.sender] = 100000000000000000; name = ; symbol = ; }",1,"subgraph cluster_349_TCN {
label=""TCN"";
""349_burnFrom"" [label=""burnFrom""];
""349_TCN"" [label=""TCN""];
""349__transfer"" [label=""_transfer""];
""349_transferFrom"" [label=""transferFrom""];
""349_burn"" [label=""burn""];
""349_approveAndCall"" [label=""approveAndCall""];
""349_transfer"" [label=""transfer""];
""349_approve"" [label=""approve""];
""349_transferFrom"" -> ""349__transfer"";
""349_transfer"" -> ""349__transfer"";
""349_approveAndCall"" -> ""349_approve"";
}
"
0x1c65557b72804569bcd25ce53575a9c712e2eff5.sol,Play2LivePromo,"contract Play2LivePromo { address public owner; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint public totalSupply = 0; uint256 promoValue = 777 * 1e18; mapping(address => uint) balances; mapping(address => mapping (address => uint)) allowed; event Transfer(address _from, address _to, uint256 amount); event Approval(address indexed _owner, address indexed _spender, uint _value); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_249_Play2LivePromo {
label=""Play2LivePromo"";
""249_transferFrom"" [label=""transferFrom""];
""249_balanceOf"" [label=""balanceOf""];
""249_allowance"" [label=""allowance""];
""249_Play2LivePromo"" [label=""Play2LivePromo""];
""249_approve"" [label=""approve""];
""249_mintTokens"" [label=""mintTokens""];
""249_transfer"" [label=""transfer""];
""249_setPromo"" [label=""setPromo""];
""249_mintTokens"" -> ""249_onlyOwner"";
""249_setPromo"" -> ""249_onlyOwner"";
}
"
0xa15b24b7b883aac6bc6582b0057c09d62a7a1b2c.sol,Simply10,contract Simply10 { mapping (address => uint256) dates; mapping (address => uint256) invests; function() external payable { address sender = msg.sender; if (invests[sender] != 0) { uint256 payout = invests[sender] / 100 * 10 * (now - dates[sender]) / 1 days; if (payout > address(this).balance) { payout = address(this).balance; },1,"subgraph cluster_79_Simply10 {
label=""Simply10"";
""79_fallback"" [label=""fallback""];
}
"
0xbe407e7f8687965412c31f259eb16f75c44fc80b.sol,BasicToken,"contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; address ownerWallet; bool released = false; enum LockupType {NOLOCK, FOUNDATION, TEAM, CONSORTIUM, PARTNER, BLACK}",1,"subgraph cluster_501_BasicToken {
label=""BasicToken"";
""501_get_Release"" [label=""get_Release""];
""501_balanceOf"" [label=""balanceOf""];
""501_lock"" [label=""lock""];
""501_transfer"" [label=""transfer""];
""501_release"" [label=""release""];
}
"
0x874d4a7a8bf2abda5489cdbd62bd785c23e5531f.sol,token123,contract token123 is owned{ using SafeMath for uint256; string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 _initialSupply = 1000000 * 10 ** uint256(decimals); uint256 _totalSupply; address public owner; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; constructor() token123() public { owner = msg.sender; _totalSupply = _initialSupply; balances[owner] = _totalSupply; },1,"subgraph cluster_415_token123 {
label=""token123"";
""415_transferFrom"" [label=""transferFrom""];
""415_burn"" [label=""burn""];
""415_getMyBalance"" [label=""getMyBalance""];
""415_transfer"" [label=""transfer""];
""415_balanceOf"" [label=""balanceOf""];
""415_allowance"" [label=""allowance""];
""415_totalSupply"" [label=""totalSupply""];
""415_constructor"" [label=""constructor""];
""415_mintToken"" [label=""mintToken""];
""415_approve"" [label=""approve""];
""415_constructor"" -> ""415_constructor"";
""415_mintToken"" -> ""415_onlyOwner"";
}
"
0x505d0c2061f124c0ae03f795c4aeddd7ff9d471e.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_balanceOf"" [label=""balanceOf""];
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
""256_approve"" [label=""approve""];
""256_transferFrom"" [label=""transferFrom""];
}
"
0xd76ababc8887a72453f5f48ea831b782e49c557a.sol,PizzaCoin,"contract PizzaCoin is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_642_PizzaCoin {
label=""PizzaCoin"";
""642_freezeAccount"" [label=""freezeAccount""];
""642__transfer"" [label=""_transfer""];
""642_setPrices"" [label=""setPrices""];
""642_mintToken"" [label=""mintToken""];
""642_constructor"" [label=""constructor""];
""642_sell"" [label=""sell""];
""642_buy"" [label=""buy""];
""642_constructor"" -> ""642_constructor"";
""642_setPrices"" -> ""642_onlyOwner"";
""642_buy"" -> ""642__transfer"";
""642_mintToken"" -> ""642_onlyOwner"";
""642_sell"" -> ""642__transfer"";
""642_freezeAccount"" -> ""642_onlyOwner"";
}
"
0x86c6a7ee4ec24d25456580d81f7e8f486186ec91.sol,Coin,"contract Coin { string public constant symbol = ; string public constant name = ; uint8 public constant decimals = 18; uint256 public _totalSupply = 0; uint256 public _maxSupply = 33000000000000000000000; uint256 public price = 2000; bool private workingState = true; bool private transferAllowed = true; bool private generationState = true; address public owner; address private cur_coin; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; mapping (address => uint256) private etherClients; event FundsGot(address indexed _sender, uint256 _value); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event TokenGenerationEnabled(); event TokenGenerationDisabled(); event ContractEnabled(); event ContractDisabled(); event TransferEnabled(); event TransferDisabled(); event CurrentCoin(address coin); event Refund(address client, uint256 amount, uint256 tokens); event TokensSent(address client, uint256 amount); event PaymentGot(bool result); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_851_Coin {
label=""Coin"";
""851_refund"" [label=""refund""];
""851_allowance"" [label=""allowance""];
""851_kill"" [label=""kill""];
""851_disableGeneration"" [label=""disableGeneration""];
""851_fallback"" [label=""fallback""];
""851_transfer"" [label=""transfer""];
""851_tokenGenerationState"" [label=""tokenGenerationState""];
""851_transferFrom"" [label=""transferFrom""];
""851_setCurrentCoin"" [label=""setCurrentCoin""];
""851_balanceOf"" [label=""balanceOf""];
""851_contractState"" [label=""contractState""];
""851_approve"" [label=""approve""];
""851_enableContract"" [label=""enableContract""];
""851_disableTransfer"" [label=""disableTransfer""];
""851_Coin"" [label=""Coin""];
""851_totalSupply"" [label=""totalSupply""];
""851_generateTokens"" [label=""generateTokens""];
""851_transferState"" [label=""transferState""];
""851_setPrice"" [label=""setPrice""];
""851_disableContract"" [label=""disableContract""];
""851_enableGeneration"" [label=""enableGeneration""];
""851_setMaxSupply"" [label=""setMaxSupply""];
""851_enableTransfer"" [label=""enableTransfer""];
""851_Coin"" -> ""851_enableContract"";
""851_balanceOf"" -> ""851_workingFlag"";
""851_setMaxSupply"" -> ""851_onlyOwner"";
""851_enableContract"" -> ""851_onlyOwner"";
""851_disableContract"" -> ""851_onlyOwner"";
""851_setCurrentCoin"" -> ""851_workingFlag"";
""851_refund"" -> ""851_ownerAndCoin"";
""851_generateTokens"" -> ""851_ownerAndCoin"";
""851_enableTransfer"" -> ""851_onlyOwner"";
""851_transferFrom"" -> ""851_workingFlag"";
""851_disableTransfer"" -> ""851_onlyOwner"";
""851_setPrice"" -> ""851_onlyOwner"";
""851_setCurrentCoin"" -> ""851_onlyOwner"";
""851_refund"" -> ""851_workingFlag"";
""851_disableGeneration"" -> ""851_onlyOwner"";
""851_generateTokens"" -> ""851_workingFlag"";
""851_totalSupply"" -> ""851_workingFlag"";
""851_enableGeneration"" -> ""851_onlyOwner"";
""851_transfer"" -> ""851_workingFlag"";
""851_generateTokens"" -> ""851_transferFrom"";
""851_fallback"" -> ""851_workingFlag"";
""851_kill"" -> ""851_onlyOwner"";
}
"
0xd0bd12a8d5ebca1e2fa46da59f1993ec51c3d75c.sol,BKToken,"contract BKToken { string public name = ; string public symbol = ; uint256 public decimals = 18; uint256 public totalSupply = 3*1000*1000*1000*10**decimals; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function BKToken( ) public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_350_BKToken {
label=""BKToken"";
""350_BKToken"" [label=""BKToken""];
""350_transferFrom"" [label=""transferFrom""];
""350_transfer"" [label=""transfer""];
""350_approve"" [label=""approve""];
""350__transfer"" [label=""_transfer""];
""350_approveAndCall"" [label=""approveAndCall""];
""350_burn"" [label=""burn""];
""350_burnFrom"" [label=""burnFrom""];
""350_transfer"" -> ""350__transfer"";
""350_transferFrom"" -> ""350__transfer"";
""350_approveAndCall"" -> ""350_approve"";
}
"
0x03ab35f764b00c4dec653cc6ceac35a3efcd3482.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_365_TokenERC20 {
label=""TokenERC20"";
""365_burnFrom"" [label=""burnFrom""];
""365_TokenERC20"" [label=""TokenERC20""];
""365_approve"" [label=""approve""];
""365_transferFrom"" [label=""transferFrom""];
""365_burn"" [label=""burn""];
""365__transfer"" [label=""_transfer""];
""365_transfer"" [label=""transfer""];
""365_approveAndCall"" [label=""approveAndCall""];
""365_transferFrom"" -> ""365__transfer"";
""365_approveAndCall"" -> ""365_approve"";
""365_transfer"" -> ""365__transfer"";
}
"
0xf0cc17aa0ce1c6595e56c9c60b19c1c546ade50d.sol,Vault,"contract Vault is TokenVault { event Deposit(address indexed depositor, uint amount); event Withdrawal(address indexed to, uint amount); event OpenDate(uint date); mapping (address => uint) public Deposits; uint minDeposit; bool Locked; uint Date; function init() payable open { Owner = msg.sender; minDeposit = 0.5 ether; Locked = false; deposit(); }",1,"subgraph cluster_115_TokenVault {
label=""TokenVault"";
""115_withdrawToken"" [label=""withdrawToken""];
""115_withdrawTokenTo"" [label=""withdrawTokenTo""];
""115_emtpyTo"" [label=""emtpyTo""];
""115_emtpyTo"" -> ""115_withdrawTokenTo"";
""115_withdrawToken"" -> ""115_withdrawTokenTo"";
""115_withdrawTokenTo"" -> ""115_onlyOwner"";
}
"
0x300a0a820d8fb6e77850da5eaa8df64bbff5746d.sol,BoomrCoinCrowdsale,"contract BoomrCoinCrowdsale is Ownable{ using SafeMath for uint256; uint256 private minGoal = 0; uint256 private maxGoal = 0; uint256 private tokenLimitPresale = 0; uint256 private tokenLimitCrowdsale = 0; uint256 private presaleDiscount = 0; uint256 private crowdsaleDiscount1 = 0; uint256 private crowdsaleDiscount2 = 0; uint256 private crowdsaleDiscount3 = 0; uint256 private crowdsaleDiscount4 = 0; uint256 private presaleDuration = 0; uint256 private crowdsaleDuration1 = 0; uint256 private crowdsaleDuration2 = 0; uint256 private crowdsaleDuration3 = 0; uint256 private crowdsaleDuration4 = 0; uint256 private tokenPresaleTotalSold = 0; uint256 private tokenCrowdsaleTotalSold = 0; uint256 private totalBackers = 0; uint256 private weiRaised = 0; uint256 private presaleTokenPrice = 0; uint256 private baseTokenPrice = 0; uint256 private crowdsaleTokenPrice1 = 0; uint256 private crowdsaleTokenPrice2 = 0; uint256 private crowdsaleTokenPrice3 = 0; uint256 private crowdsaleTokenPrice4 = 0; uint256 private presaleTokenSent = 0; uint256 private crowdsaleTokenSold1 = 0; uint256 private crowdsaleTokenSold2 = 0; uint256 private crowdsaleTokenSold3 = 0; uint256 private crowdsaleTokenSold4 = 0; bool private finalized = false; bool private halted = false; uint256 public startTime; PausableToken public boomrToken; address private wallet; RefundVault private vault; mapping (address => uint256) public deposits; mapping (address => uint256) public purchases; event TokenPurchase(address indexed Purchaser, address indexed Beneficiary, uint256 ValueInWei, uint256 TokenAmount); event PresalePurchase(address indexed Purchaser, address indexed Beneficiary, uint256 ValueInWei); event PresaleDistribution(address indexed Purchaser, address indexed Beneficiary, uint256 TokenAmount); event Finalized(); function BoomrCoinCrowdsale() public{ }",1,"subgraph cluster_2121_BoomrCoinCrowdsale {
label=""BoomrCoinCrowdsale"";
""2121_depositPresale"" [label=""depositPresale""];
""2121_halt"" [label=""halt""];
""2121_currentStateActive"" [label=""currentStateActive""];
""2121_isCrowdsalePhase2"" [label=""isCrowdsalePhase2""];
""2121_getContractTokenBalance"" [label=""getContractTokenBalance""];
""2121_isPresaleWaitPhase"" [label=""isPresaleWaitPhase""];
""2121_isDistributable"" [label=""isDistributable""];
""2121_fallback"" [label=""fallback""];
""2121_internalDepositPresale"" [label=""internalDepositPresale""];
""2121_StartCrowdsale"" [label=""StartCrowdsale""];
""2121_forwardFunds"" [label=""forwardFunds""];
""2121_distributePresale"" [label=""distributePresale""];
""2121_BoomrCoinCrowdsale"" [label=""BoomrCoinCrowdsale""];
""2121_isPresalePhase"" [label=""isPresalePhase""];
""2121_isCrowdsalePhase4"" [label=""isCrowdsalePhase4""];
""2121_externalDeposit"" [label=""externalDeposit""];
""2121_currentTokenDistribution"" [label=""currentTokenDistribution""];
""2121_minGoalReached"" [label=""minGoalReached""];
""2121_internalBuyTokens"" [label=""internalBuyTokens""];
""2121_finalize"" [label=""finalize""];
""2121_unHalt"" [label=""unHalt""];
""2121_updatePrices"" [label=""updatePrices""];
""2121_buyTokens"" [label=""buyTokens""];
""2121_claimRefund"" [label=""claimRefund""];
""2121_currentStateSales"" [label=""currentStateSales""];
""2121_isCrowdsalePhase3"" [label=""isCrowdsalePhase3""];
""2121_isCrowdsalePhase1"" [label=""isCrowdsalePhase1""];
""2121_isBuyable"" [label=""isBuyable""];
""2121_maxGoalReached"" [label=""maxGoalReached""];
""2121_isCompleted"" [label=""isCompleted""];
""2121_fallback"" -> ""2121_buyTokens"";
""2121_fallback"" -> ""2121_isPresalePhase"";
""2121_isCrowdsalePhase4"" -> ""2121_maxGoalReached"";
""2121_isCrowdsalePhase1"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_isPresalePhase"";
""2121_unHalt"" -> ""2121_onlyOwner"";
""2121_isBuyable"" -> ""2121_isDistributable"";
""2121_fallback"" -> ""2121_isPresaleWaitPhase"";
""2121_currentStateActive"" -> ""2121_isPresaleWaitPhase"";
""2121_currentStateActive"" -> ""2121_isDistributable"";
""2121_internalBuyTokens"" -> ""2121_forwardFunds"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase2"";
""2121_distributePresale"" -> ""2121_isDistributable"";
""2121_externalDeposit"" -> ""2121_isPresalePhase"";
""2121_isCrowdsalePhase2"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_maxGoalReached"";
""2121_isCompleted"" -> ""2121_maxGoalReached"";
""2121_externalDeposit"" -> ""2121_isCompleted"";
""2121_depositPresale"" -> ""2121_internalDepositPresale"";
""2121_externalDeposit"" -> ""2121_internalDepositPresale"";
""2121_fallback"" -> ""2121_isCompleted"";
""2121_fallback"" -> ""2121_isDistributable"";
""2121_buyTokens"" -> ""2121_internalBuyTokens"";
""2121_isPresalePhase"" -> ""2121_maxGoalReached"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase1"";
""2121_StartCrowdsale"" -> ""2121_onlyOwner"";
""2121_currentStateSales"" -> ""2121_getContractTokenBalance"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase4"";
""2121_internalBuyTokens"" -> ""2121_maxGoalReached"";
""2121_currentStateActive"" -> ""2121_isPresalePhase"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase3"";
""2121_currentStateActive"" -> ""2121_minGoalReached"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase4"";
""2121_finalize"" -> ""2121_minGoalReached"";
""2121_currentStateActive"" -> ""2121_maxGoalReached"";
""2121_fallback"" -> ""2121_depositPresale"";
""2121_externalDeposit"" -> ""2121_internalBuyTokens"";
""2121_currentStateActive"" -> ""2121_isBuyable"";
""2121_halt"" -> ""2121_onlyOwner"";
""2121_currentStateActive"" -> ""2121_isCompleted"";
""2121_fallback"" -> ""2121_distributePresale"";
""2121_currentStateActive"" -> ""2121_isCrowdsalePhase2"";
""2121_isBuyable"" -> ""2121_isCompleted"";
""2121_internalDepositPresale"" -> ""2121_forwardFunds"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase3"";
""2121_finalize"" -> ""2121_isCompleted"";
""2121_externalDeposit"" -> ""2121_onlyOwner"";
""2121_claimRefund"" -> ""2121_minGoalReached"";
""2121_finalize"" -> ""2121_onlyOwner"";
""2121_isCrowdsalePhase3"" -> ""2121_maxGoalReached"";
""2121_internalDepositPresale"" -> ""2121_updatePrices"";
""2121_externalDeposit"" -> ""2121_isPresaleWaitPhase"";
""2121_internalBuyTokens"" -> ""2121_isCrowdsalePhase1"";
}
"
0xec193241dc1ca3bbe3165de6d37a793585b4504e.sol,TokenERC20,"contract TokenERC20 { string public name = ; string public symbol = ; uint256 public decimals = 18; uint256 public totalSupply = 100000000 * (10 ** decimals); mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function _transfer(address _from, address _to, uint _value) internal { require(_to != 0x0); require(balanceOf[_from] >= _value); require(balanceOf[_to] + _value > balanceOf[_to]); uint previousBalances = balanceOf[_from] + balanceOf[_to]; balanceOf[_from] -= _value; balanceOf[_to] += _value; Transfer(_from, _to, _value); assert(balanceOf[_from] + balanceOf[_to] == previousBalances); }",1,"subgraph cluster_369_TokenERC20 {
label=""TokenERC20"";
""369_burn"" [label=""burn""];
""369_transfer"" [label=""transfer""];
""369_approveAndCall"" [label=""approveAndCall""];
""369__transfer"" [label=""_transfer""];
""369_approve"" [label=""approve""];
""369_transferFrom"" [label=""transferFrom""];
""369_burnFrom"" [label=""burnFrom""];
""369_transferFrom"" -> ""369__transfer"";
""369_transfer"" -> ""369__transfer"";
""369_approveAndCall"" -> ""369_approve"";
}
"
0x7895a43ae537e8e1ac97006ea9235807eea04cfa.sol,YunMint,"contract YunMint is Operational, ReentrancyGuard, BurnableToken, StandardToken { using SafeMath for uint; using SafeMath for uint256; using DateTime for uint256; event Release(address operator, uint256 value, uint256 releaseTime); event Burn(address indexed burner, uint256 value); event Freeze(address indexed owner, uint256 value, uint256 releaseTime); event Unfreeze(address indexed owner, uint256 value, uint256 releaseTime); struct FrozenBalance {address owner; uint256 value; uint256 unFrozenTime;}",1,"subgraph cluster_2045_YunMint {
label=""YunMint"";
""2045_unfreeze"" [label=""unfreeze""];
""2045_unFrozenBalanceByIndex"" [label=""unFrozenBalanceByIndex""];
""2045_YunMint"" [label=""YunMint""];
""2045_freeze"" [label=""freeze""];
""2045_hasItBeenReleased"" [label=""hasItBeenReleased""];
""2045_frozenBalanceOf"" [label=""frozenBalanceOf""];
""2045_release"" [label=""release""];
""2045_batchTransfer"" [label=""batchTransfer""];
""2045_release"" -> ""2045_hasItBeenReleased"";
""2045_freeze"" -> ""2045_nonReentrant"";
""2045_YunMint"" -> ""2045_validAddress"";
""2045_unfreeze"" -> ""2045_unFrozenBalanceByIndex"";
""2045_batchTransfer"" -> ""2045_transfer"";
""2045_release"" -> ""2045_onlyOperator"";
""2045_YunMint"" -> ""2045_Operational"";
}
"
0x4b5cd619741838cb3442831c3f268a78b7df859a.sol,CryptoPeopleName,contract CryptoPeopleName { address owner; mapping(address => string) private nameOfAddress; function CryptoPeopleName() public{ owner = msg.sender; },1,"subgraph cluster_42_CryptoPeopleName {
label=""CryptoPeopleName"";
""42_CryptoPeopleName"" [label=""CryptoPeopleName""];
""42_getNameOfAddress"" [label=""getNameOfAddress""];
""42_setName"" [label=""setName""];
}
"
0x5b202f04786e6e9c0a689b1506af229f095d2d0e.sol,BenziToken,"contract BenziToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BenziToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000e18; balances[0x743fd6d924ae32ccddb377f11d43129cdd0d0d00] = _totalSupply; Transfer(address(0), 0x743fd6d924ae32ccddb377f11d43129cdd0d0d00, _totalSupply); }",1,"subgraph cluster_543_BenziToken {
label=""BenziToken"";
""543_BenziToken"" [label=""BenziToken""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x1f002ba292d85239fee400a04b21bb3aa4777461.sol,FLTTToken,contract FLTTToken { string public constant _name = ; string public constant _symbol = ; uint8 public constant _decimals = 8; uint256 public constant _initialSupply = 49800000000000000; address public owner; uint256 public _currentSupply; mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; function FLTTToken() { owner = msg.sender; _currentSupply = _initialSupply; balances[owner] = _initialSupply; },1,"subgraph cluster_577_FLTTToken {
label=""FLTTToken"";
""577_approve"" [label=""approve""];
""577_totalSupply"" [label=""totalSupply""];
""577_amountBurned"" [label=""amountBurned""];
""577_isContract"" [label=""isContract""];
""577_transfer"" [label=""transfer""];
""577_name"" [label=""name""];
""577_transferFrom"" [label=""transferFrom""];
""577_symbol"" [label=""symbol""];
""577_fallback"" [label=""fallback""];
""577_FLTTToken"" [label=""FLTTToken""];
""577_transferToContract"" [label=""transferToContract""];
""577_allowance"" [label=""allowance""];
""577_balanceOf"" [label=""balanceOf""];
""577_currentSupply"" [label=""currentSupply""];
""577_burn"" [label=""burn""];
""577_transferToAddress"" [label=""transferToAddress""];
""577_decimals"" [label=""decimals""];
""577_transfer"" -> ""577_transferToAddress"";
""577_transfer"" -> ""577_transferToContract"";
""577_transfer"" -> ""577_isContract"";
}
"
0xbfaacfdecfbbcc7ea8c17e19c8f4f84c523267de.sol,NokuConsumptionPlan,"contract NokuConsumptionPlan is NokuPricingPlan, Ownable { using SafeMath for uint256; event LogNokuConsumptionPlanCreated(address indexed caller, address indexed nokuMasterToken, address indexed tokenBurner); event LogServiceAdded(bytes32 indexed serviceName, uint indexed index, uint indexed serviceFee); event LogServiceChanged(bytes32 indexed serviceName, uint indexed index, uint indexed serviceFee); event LogServiceRemoved(bytes32 indexed serviceName, uint indexed index); struct NokuService { uint serviceFee; uint index; }",1,"subgraph cluster_874_NokuConsumptionPlan {
label=""NokuConsumptionPlan"";
""874_payFee"" [label=""payFee""];
""874_serviceAtIndex"" [label=""serviceAtIndex""];
""874_isService"" [label=""isService""];
""874_usageFee"" [label=""usageFee""];
""874_constructor"" [label=""constructor""];
""874_removeService"" [label=""removeService""];
""874_serviceCount"" [label=""serviceCount""];
""874_updateServiceFee"" [label=""updateServiceFee""];
""874_addService"" [label=""addService""];
""874_payFee"" -> ""874_usageFee"";
""874_addService"" -> ""874_onlyOwner"";
""874_removeService"" -> ""874_isService"";
""874_updateServiceFee"" -> ""874_onlyOwner"";
""874_removeService"" -> ""874_onlyOwner"";
""874_addService"" -> ""874_isService"";
""874_usageFee"" -> ""874_isService"";
""874_updateServiceFee"" -> ""874_isService"";
}
"
0xd0b13c1195f1c50be0d3be956ff32aaebb48e1e4.sol,FccToken,"contract FccToken is Owned, StandardToken { string public standard = ; string public name = ; string public symbol = ; uint8 public decimals = 8; function FccToken() { balances[msg.sender] = 200000000* 10**8; totalSupply = 200000000* 10**8; locked = false; }",1,"subgraph cluster_460_FccToken {
label=""FccToken"";
""460_fallback"" [label=""fallback""];
""460_FccToken"" [label=""FccToken""];
""460_lock"" [label=""lock""];
""460_unlock"" [label=""unlock""];
""460_issue"" [label=""issue""];
""460_unlock"" -> ""460_onlyOwner"";
""460_lock"" -> ""460_onlyOwner"";
""460_issue"" -> ""460_onlyICO"";
}
"
0xbd11eae443ef0e96c1cc565db5c0b51f6c829c0b.sol,AENToken,"contract AENToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor() public { totalSupply = 350000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_307_AENToken {
label=""AENToken"";
""307_burnFrom"" [label=""burnFrom""];
""307_approve"" [label=""approve""];
""307_burn"" [label=""burn""];
""307_constructor"" [label=""constructor""];
""307__transfer"" [label=""_transfer""];
""307_transferFrom"" [label=""transferFrom""];
""307_transfer"" [label=""transfer""];
""307_transferFrom"" -> ""307__transfer"";
""307_transfer"" -> ""307__transfer"";
}
"
0xe2fe5e7e206e7b46cad6a5146320e5b4b9a18e97.sol,metahashtoken,"contract metahashtoken { string public name; string public symbol; uint8 public decimals; uint public totalTokens; uint public finalyze; address public ownerContract; address public owner; mapping (address => uint256) public balance; mapping (address => mapping (address => uint256)) allowed; event Burn(address indexed from, uint256 value); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function totalSupply() public constant returns (uint256 _totalSupply){ return totalTokens; }",1,"subgraph cluster_387_metahashtoken {
label=""metahashtoken"";
""387_approve"" [label=""approve""];
""387_burn"" [label=""burn""];
""387_balanceOf"" [label=""balanceOf""];
""387_allowance"" [label=""allowance""];
""387_finalyzeContract"" [label=""finalyzeContract""];
""387_setContract"" [label=""setContract""];
""387_setOptions"" [label=""setOptions""];
""387_transferFrom"" [label=""transferFrom""];
""387_transfer"" [label=""transfer""];
""387_metahashtoken"" [label=""metahashtoken""];
""387_totalSupply"" [label=""totalSupply""];
}
"
0x369d0db2c7d56b095d758379b75f64085953528a.sol,CryptoLeu,"contract CryptoLeu is owned, TokenERC20, Pausable { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function CryptoLeu() TokenERC20(60000000, , ) public {}",1,"subgraph cluster_686_CryptoLeu {
label=""CryptoLeu"";
""686_setPrices"" [label=""setPrices""];
""686__transfer"" [label=""_transfer""];
""686_buy"" [label=""buy""];
""686_sell"" [label=""sell""];
""686_mintToken"" [label=""mintToken""];
""686_CryptoLeu"" [label=""CryptoLeu""];
""686_freezeAccount"" [label=""freezeAccount""];
""686_sell"" -> ""686_whenNotPaused"";
""686_freezeAccount"" -> ""686_onlyOwner"";
""686_setPrices"" -> ""686_onlyOwner"";
""686_sell"" -> ""686__transfer"";
""686_mintToken"" -> ""686_onlyOwner"";
""686_buy"" -> ""686__transfer"";
""686_buy"" -> ""686_whenNotPaused"";
""686_CryptoLeu"" -> ""686_TokenERC20"";
}
"
0x333b63f5c455f381bc2a13b1b8aa7da31fd1fc02.sol,SafeMath,"contract SafeMath { function safeAdd(uint x, uint y) pure internal returns(uint) { uint z = x + y; assert((z >= x) && (z >= y)); return z; }",1,"subgraph cluster_129_SafeMath {
label=""SafeMath"";
""129_safeSubtract"" [label=""safeSubtract""];
""129_getRandomNumber"" [label=""getRandomNumber""];
""129_safeMult"" [label=""safeMult""];
""129_safeAdd"" [label=""safeAdd""];
}
"
0xf19903d8e5b7d604b62d2a210b39ba9e1e1f93ef.sol,STASHToken,"contract STASHToken is STASHInterface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint256 public unitsOneEthCanBuy; uint256 public totalEthInWei; address public fundsWallet; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function STASHToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 36000000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); unitsOneEthCanBuy = 600000; fundsWallet = msg.sender; }",1,"subgraph cluster_630_STASHToken {
label=""STASHToken"";
""630_transferFrom"" [label=""transferFrom""];
""630_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""630_STASHToken"" [label=""STASHToken""];
""630_fallback"" [label=""fallback""];
""630_allowance"" [label=""allowance""];
""630_totalSupply"" [label=""totalSupply""];
""630_approveAndCall"" [label=""approveAndCall""];
""630_approve"" [label=""approve""];
""630_balanceOf"" [label=""balanceOf""];
""630_transfer"" [label=""transfer""];
""630_transferAnyERC20Token"" -> ""630_onlyOwner"";
}
"
0x0dc35ce59014aed7babc16ef0831580a2327e697.sol,PlatformTeamCoinVer01,"contract PlatformTeamCoinVer01 is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_642_PlatformTeamCoinVer01 {
label=""PlatformTeamCoinVer01"";
""642_freezeAccount"" [label=""freezeAccount""];
""642_buy"" [label=""buy""];
""642_setPrices"" [label=""setPrices""];
""642_constructor"" [label=""constructor""];
""642_mintToken"" [label=""mintToken""];
""642__transfer"" [label=""_transfer""];
""642_sell"" [label=""sell""];
""642_mintToken"" -> ""642_onlyOwner"";
""642_constructor"" -> ""642_constructor"";
""642_freezeAccount"" -> ""642_onlyOwner"";
""642_buy"" -> ""642__transfer"";
""642_setPrices"" -> ""642_onlyOwner"";
""642_sell"" -> ""642__transfer"";
}
"
0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94.sol,Token,"contract Token { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_Token {
label=""Token"";
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_TokenERC20"" [label=""TokenERC20""];
""380_burnFrom"" [label=""burnFrom""];
""380__transfer"" [label=""_transfer""];
""380_burn"" [label=""burn""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0x729e895e186b7fbd34485d496415bb2f42629b71.sol,RequestCore,"contract RequestCore is Administrable { using SafeMath for uint256; using SafeMathUint96 for uint96; using SafeMathInt for int256; using SafeMathUint8 for uint8; enum State { Created, Accepted, Canceled }",1,"subgraph cluster_2289_RequestCore {
label=""RequestCore"";
""2289_accept"" [label=""accept""];
""2289_emergencyERC20Drain"" [label=""emergencyERC20Drain""];
""2289_updateExpectedAmount"" [label=""updateExpectedAmount""];
""2289_getRequest"" [label=""getRequest""];
""2289_getCurrencyContract"" [label=""getCurrencyContract""];
""2289_getPayeeIndex"" [label=""getPayeeIndex""];
""2289_getExpectedAmount"" [label=""getExpectedAmount""];
""2289_getBalance"" [label=""getBalance""];
""2289_areAllBalanceNull"" [label=""areAllBalanceNull""];
""2289_getSubPayeesCount"" [label=""getSubPayeesCount""];
""2289_getPayer"" [label=""getPayer""];
""2289_extractBytes32"" [label=""extractBytes32""];
""2289_getState"" [label=""getState""];
""2289_cancel"" [label=""cancel""];
""2289_extractAddress"" [label=""extractAddress""];
""2289_extractString"" [label=""extractString""];
""2289_updateBalance"" [label=""updateBalance""];
""2289_createRequest"" [label=""createRequest""];
""2289_getPayeeAddress"" [label=""getPayeeAddress""];
""2289_getPayeeExpectedAmount"" [label=""getPayeeExpectedAmount""];
""2289_generateRequestId"" [label=""generateRequestId""];
""2289_initSubPayees"" [label=""initSubPayees""];
""2289_createRequestFromBytes"" [label=""createRequestFromBytes""];
""2289_getPayeeBalance"" [label=""getPayeeBalance""];
""2289_createRequest"" -> ""2289_initSubPayees"";
""2289_createRequestFromBytes"" -> ""2289_whenNotPaused"";
""2289_createRequest"" -> ""2289_isTrustedContract"";
""2289_createRequestFromBytes"" -> ""2289_extractBytes32"";
""2289_createRequestFromBytes"" -> ""2289_isTrustedContract"";
""2289_createRequest"" -> ""2289_generateRequestId"";
""2289_createRequestFromBytes"" -> ""2289_extractAddress"";
""2289_createRequestFromBytes"" -> ""2289_generateRequestId"";
""2289_emergencyERC20Drain"" -> ""2289_onlyOwner"";
""2289_createRequestFromBytes"" -> ""2289_extractString"";
""2289_createRequest"" -> ""2289_whenNotPaused"";
}
"
0x887ed27475f60f2df56fefc1f18f3aa8da65fb22.sol,ParkCoin,"contract ParkCoin { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ParkCoin(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_ParkCoin {
label=""ParkCoin"";
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_ParkCoin"" [label=""ParkCoin""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x1be34bec23ef52fca1b5bb9ce27da1277ca4eebd.sol,TokenERC20,"contract TokenERC20 { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 4000000000 * 10 ** uint256(decimals); address public owner; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); address public dateTimeAddr = 0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce; DateTime dateTime = DateTime(dateTimeAddr); uint[] lockupTime = [dateTime.toTimestamp(2018,11,13),dateTime.toTimestamp(2019,1,13),dateTime.toTimestamp(2019,3,13),dateTime.toTimestamp(2019,5,13)]; uint8[] lockupPercent = [0,25,50,75]; constructor() public { balanceOf[msg.sender] = totalSupply; owner = msg.sender; }",1,"subgraph cluster_512_TokenERC20 {
label=""TokenERC20"";
""512_transfer"" [label=""transfer""];
""512_constructor"" [label=""constructor""];
""512_burnFrom"" [label=""burnFrom""];
""512_transferFrom"" [label=""transferFrom""];
""512_approveAndCall"" [label=""approveAndCall""];
""512__transfer"" [label=""_transfer""];
""512_approve"" [label=""approve""];
""512_burn"" [label=""burn""];
""512_approveAndCall"" -> ""512_approve"";
""512_transferFrom"" -> ""512__transfer"";
""512_transfer"" -> ""512__transfer"";
}
"
0xedf7eac72ff28dbcde6aa14322726a7d05739007.sol,EasyInvest20,contract EasyInvest20 { mapping (address => uint256) public invested; mapping (address => uint256) public atBlock; function () external payable { if (invested[msg.sender] != 0) { uint256 amount = invested[msg.sender] * 20 / 100 * (block.number - atBlock[msg.sender]) / 5900; msg.sender.transfer(amount); },1,"subgraph cluster_68_EasyInvest20 {
label=""EasyInvest20"";
""68_fallback"" [label=""fallback""];
}
"
0x57deefef435a069d95a1523ae8955c993b2b1201.sol,pennyCoin,"contract pennyCoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function pennyCoin() public { symbol = ; name = ; decimals = 0; _totalSupply = 100000000; balances[0x204Ab47fD82dEA4037F09e4dC013bd8733DD5238] = _totalSupply; Transfer(address(0), 0x204Ab47fD82dEA4037F09e4dC013bd8733DD5238, _totalSupply); }",1,"subgraph cluster_543_pennyCoin {
label=""pennyCoin"";
""543_pennyCoin"" [label=""pennyCoin""];
""543_allowance"" [label=""allowance""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0xed51040da497901107870ece117f9ed8df4f4e52.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396__transfer"" [label=""_transfer""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_transferFrom"" [label=""transferFrom""];
""396_approve"" [label=""approve""];
""396_burnFrom"" [label=""burnFrom""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_burn"" [label=""burn""];
""396_transfer"" [label=""transfer""];
""396_approveAndCall"" -> ""396_approve"";
""396_transferFrom"" -> ""396__transfer"";
""396_transfer"" -> ""396__transfer"";
}
"
0x696be206174bea69e7a00b4deb1c6fddfa4786c9.sol,RAZEN,"contract RAZEN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function RAZEN() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xd8fa9C65623129Fa4abAf44B7e21655d1eF835ce] = _totalSupply; Transfer(address(0), 0xd8fa9C65623129Fa4abAf44B7e21655d1eF835ce, _totalSupply); }",1,"subgraph cluster_543_RAZEN {
label=""RAZEN"";
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_RAZEN"" [label=""RAZEN""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x186b32c1b89db762a8ffa317172a4926714e6336.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_burnFrom"" [label=""burnFrom""];
""361_approve"" [label=""approve""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x55e539fb53394851e8c541411d31c942b14b998e.sol,URUGUAY_WINS,"contract URUGUAY_WINS { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 325566187175265000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_URUGUAY_WINS {
label=""URUGUAY_WINS"";
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transferFrom"" [label=""transferFrom""];
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
}
"
0x180d669e995ae5fbb7bfb06107546de625cd4f97.sol,BallzToken,"contract BallzToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BallzToken() public { symbol = ; name = ; decimals = 3; _totalSupply = 1000000000000; balances[0xb1b547686b6230b318f6a2b291bdc7fdf7d73ffc] = _totalSupply; Transfer(address(0), 0xb1b547686b6230b318f6a2b291bdc7fdf7d73ffc, _totalSupply); }",1,"subgraph cluster_543_BallzToken {
label=""BallzToken"";
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_BallzToken"" [label=""BallzToken""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x326ce88b27c196d0387f5df7ae085c1203185cb4.sol,LoliCoin,"contract LoliCoin is owned, TokenERC20 { mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function LoliCoin() TokenERC20() public {}",1,"subgraph cluster_532_LoliCoin {
label=""LoliCoin"";
""532_mintToken"" [label=""mintToken""];
""532__transfer"" [label=""_transfer""];
""532_freezeAccount"" [label=""freezeAccount""];
""532_LoliCoin"" [label=""LoliCoin""];
""532_freezeAccount"" -> ""532_onlyOwner"";
""532_mintToken"" -> ""532_onlyOwner"";
""532_LoliCoin"" -> ""532_TokenERC20"";
}
"
0x5438b0938fb88a979032f45b87d2d1aeffe5cc28.sol,Gifto,contract Gifto is ERC20Interface { uint public constant decimals = 5; string public constant symbol = ; string public constant name = ; bool public _selling = false; uint public _totalSupply = 10 ** 14; uint public _originalBuyPrice = 10 ** 10; address public owner; mapping(address => uint256) balances; mapping(address => bool) approvedInvestorList; mapping(address => uint256) deposit; address[] buyers; uint _icoPercent = 10; uint public _icoSupply = _totalSupply * _icoPercent / 100; uint public _minimumBuy = 10 ** 17; uint public _maximumBuy = 30 * 10 ** 18; modifier onlyOwner() { require(msg.sender == owner); _; },1,"subgraph cluster_865_Gifto {
label=""Gifto"";
""865_isSellingNow"" [label=""isSellingNow""];
""865_filterBuyers"" [label=""filterBuyers""];
""865_returnETHforNormalBuyers"" [label=""returnETHforNormalBuyers""];
""865_getTotalDeposit"" [label=""getTotalDeposit""];
""865_withdraw"" [label=""withdraw""];
""865_isApprovedInvestor"" [label=""isApprovedInvestor""];
""865_getInvestorBuyers"" [label=""getInvestorBuyers""];
""865_removeInvestorList"" [label=""removeInvestorList""];
""865_turnOnSale"" [label=""turnOnSale""];
""865_setIcoPercent"" [label=""setIcoPercent""];
""865_setMaximumBuy"" [label=""setMaximumBuy""];
""865_transfer"" [label=""transfer""];
""865_getNormalBuyers"" [label=""getNormalBuyers""];
""865_totalSupply"" [label=""totalSupply""];
""865_buy"" [label=""buy""];
""865_setMinimumBuy"" [label=""setMinimumBuy""];
""865_deliveryToken"" [label=""deliveryToken""];
""865_fallback"" [label=""fallback""];
""865_getDeposit"" [label=""getDeposit""];
""865_turnOffSale"" [label=""turnOffSale""];
""865_addInvestorList"" [label=""addInvestorList""];
""865_balanceOf"" [label=""balanceOf""];
""865_setBuyPrice"" [label=""setBuyPrice""];
""865_Gifto"" [label=""Gifto""];
""865_fallback"" -> ""865_validValue"";
""865_turnOnSale"" -> ""865_onlyOwner"";
""865_returnETHforNormalBuyers"" -> ""865_onlyOwner"";
""865_setBuyPrice"" -> ""865_onlyOwner"";
""865_withdraw"" -> ""865_onlyOwner"";
""865_setMinimumBuy"" -> ""865_onlyOwner"";
""865_buy"" -> ""865_validOriginalBuyPrice"";
""865_buy"" -> ""865_onSale"";
""865_buy"" -> ""865_onlyNotOwner"";
""865_getNormalBuyers"" -> ""865_filterBuyers"";
""865_setIcoPercent"" -> ""865_onlyOwner"";
""865_removeInvestorList"" -> ""865_onlyOwner"";
""865_getInvestorBuyers"" -> ""865_filterBuyers"";
""865_deliveryToken"" -> ""865_onlyOwner"";
""865_turnOffSale"" -> ""865_onlyOwner"";
""865_addInvestorList"" -> ""865_onlyOwner"";
""865_buy"" -> ""865_validInvestor"";
""865_setMaximumBuy"" -> ""865_onlyOwner"";
""865_deliveryToken"" -> ""865_validOriginalBuyPrice"";
}
"
0x7038c15f76ad2667837c438c8819fd969899cdbe.sol,Airdrop,"contract Airdrop { function drop(ERC20 token, address[] recipients, uint256[] values) public { for (uint256 i = 0; i < recipients.length; i++) { token.transfer(recipients[i], values[i]); }",1,"subgraph cluster_48_Airdrop {
label=""Airdrop"";
""48_drop"" [label=""drop""];
}
"
0x0f00c8dd21da51bc6a6ac07f491a7dbe69746f16.sol,ClapClapToken,"contract ClapClapToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ClapClapToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 18000000000000000000000000000; balances[0xb5D8296f8C55d5BBb51b1DCBD10d90E2d18bf864] = _totalSupply; Transfer(address(0), 0xb5D8296f8C55d5BBb51b1DCBD10d90E2d18bf864, _totalSupply); }",1,"subgraph cluster_543_ClapClapToken {
label=""ClapClapToken"";
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_allowance"" [label=""allowance""];
""543_ClapClapToken"" [label=""ClapClapToken""];
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x558c62533def5e9d77a7e555490c0e2889eacf3a.sol,UTokenContract,"contract UTokenContract is ERC20Token, Owned{ string public constant standard = ; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 6; uint256 private constant etherChange = 10**18; uint256 public totalSupply; uint256 public totalRemainSupply; uint256 public UTExchangeRate; bool public crowdsaleIsOpen; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowances; address public multisigAddress; event mintToken(address indexed _to, uint256 _value); event burnToken(address indexed _from, uint256 _value); function () payable public{ require (crowdsaleIsOpen == true); require(msg.value != 0); mintUTToken(msg.sender, (msg.value * UTExchangeRate * 10**decimals) / etherChange); }",1,"subgraph cluster_607_UTokenContract {
label=""UTokenContract"";
""607_transfer"" [label=""transfer""];
""607_mintTokens"" [label=""mintTokens""];
""607_transferFrom"" [label=""transferFrom""];
""607_withdraw"" [label=""withdraw""];
""607_mintUTToken"" [label=""mintUTToken""];
""607_allowance"" [label=""allowance""];
""607_UTokenContract"" [label=""UTokenContract""];
""607_crowdsaleOpen"" [label=""crowdsaleOpen""];
""607_approve"" [label=""approve""];
""607_UTTotalSupply"" [label=""UTTotalSupply""];
""607_balanceOf"" [label=""balanceOf""];
""607_approveAndCall"" [label=""approveAndCall""];
""607_burnTokens"" [label=""burnTokens""];
""607_fallback"" [label=""fallback""];
""607_setUTExchangeRate"" [label=""setUTExchangeRate""];
""607_burnTokens"" -> ""607_onlyOwner"";
""607_mintTokens"" -> ""607_onlyOwner"";
""607_mintTokens"" -> ""607_mintUTToken"";
""607_approveAndCall"" -> ""607_approve"";
""607_setUTExchangeRate"" -> ""607_onlyOwner"";
""607_withdraw"" -> ""607_onlyOwner"";
""607_fallback"" -> ""607_mintUTToken"";
}
"
0x458c1987ba7cb7cd101cea17c4dfc0244ed7bd37.sol,HOPE,"contract HOPE { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HOPE ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_HOPE {
label=""HOPE"";
""361_HOPE"" [label=""HOPE""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x33c1aa1014e4ffd61c312671a42ecff8aef6201f.sol,IndividualLockableToken,"contract IndividualLockableToken is ERC20Pausable, Ownable{ using SafeMath for uint256; event LockTimeSetted(address indexed holder, uint256 old_release_time, uint256 new_release_time); event Locked(address indexed holder, uint256 locked_balance_change, uint256 total_locked_balance, uint256 release_time); struct lockState { uint256 locked_balance; uint256 release_time; }",1,"subgraph cluster_1680_IndividualLockableToken {
label=""IndividualLockableToken"";
""1680_approve"" [label=""approve""];
""1680_getReleaseTime"" [label=""getReleaseTime""];
""1680_transferFrom"" [label=""transferFrom""];
""1680_getLockedBalance"" [label=""getLockedBalance""];
""1680_clearReleaseTime"" [label=""clearReleaseTime""];
""1680_getFreeBalance"" [label=""getFreeBalance""];
""1680_decreaseLockBalance"" [label=""decreaseLockBalance""];
""1680_setReleaseTime"" [label=""setReleaseTime""];
""1680_transfer"" [label=""transfer""];
""1680_increaseLockBalance"" [label=""increaseLockBalance""];
""1680_decreaseAllowance"" [label=""decreaseAllowance""];
""1680_clearLock"" [label=""clearLock""];
""1680_increaseAllowance"" [label=""increaseAllowance""];
""1680_clearLock"" -> ""1680_onlyOwner"";
""1680_decreaseAllowance"" -> ""1680_getFreeBalance"";
""1680_decreaseLockBalance"" -> ""1680_onlyOwner"";
""1680_increaseLockBalance"" -> ""1680_onlyOwner"";
""1680_transferFrom"" -> ""1680_transferFrom"";
""1680_transfer"" -> ""1680_getFreeBalance"";
""1680_increaseAllowance"" -> ""1680_increaseAllowance"";
""1680_approve"" -> ""1680_getFreeBalance"";
""1680_approve"" -> ""1680_approve"";
""1680_transfer"" -> ""1680_transfer"";
""1680_increaseAllowance"" -> ""1680_getFreeBalance"";
""1680_increaseLockBalance"" -> ""1680_balanceOf"";
""1680_increaseAllowance"" -> ""1680_allowance"";
""1680_clearReleaseTime"" -> ""1680_onlyOwner"";
""1680_decreaseAllowance"" -> ""1680_allowance"";
""1680_getFreeBalance"" -> ""1680_balanceOf"";
""1680_setReleaseTime"" -> ""1680_onlyOwner"";
""1680_decreaseAllowance"" -> ""1680_decreaseAllowance"";
""1680_transferFrom"" -> ""1680_getFreeBalance"";
}
"
0x6c940a8d477922f1cffe012449321098e06db3f7.sol,CryptoGain,contract CryptoGain { using SafeMath for uint256; struct Bid { address player; uint8 slot_from; uint8 slot_to; },1,"subgraph cluster_649_CryptoGain {
label=""CryptoGain"";
""649_set_admin"" [label=""set_admin""];
""649_is_slot_in_bid"" [label=""is_slot_in_bid""];
""649_destruct"" [label=""destruct""];
""649_CryptoGain"" [label=""CryptoGain""];
""649_fallback"" [label=""fallback""];
""649_run"" [label=""run""];
""649_get_foreign_balance"" [label=""get_foreign_balance""];
""649_playout"" [label=""playout""];
""649_bid"" [label=""bid""];
""649_restart"" [label=""restart""];
""649_search_winner_bid_address"" [label=""search_winner_bid_address""];
""649_reset"" [label=""reset""];
""649_withdraw"" [label=""withdraw""];
""649_remove_exceed"" [label=""remove_exceed""];
""649_get_balance"" [label=""get_balance""];
""649_search_winner_bid_address"" -> ""649_is_slot_in_bid"";
""649_reset"" -> ""649_onlyOwner"";
""649_run"" -> ""649_playout"";
""649_reset"" -> ""649_restart"";
""649_fallback"" -> ""649_run"";
""649_bid"" -> ""649_remove_exceed"";
""649_run"" -> ""649_onlyAlive"";
""649_run"" -> ""649_bid"";
""649_run"" -> ""649_remove_exceed"";
""649_playout"" -> ""649_search_winner_bid_address"";
""649_destruct"" -> ""649_onlyOwner"";
""649_set_admin"" -> ""649_onlyOwner"";
""649_playout"" -> ""649_restart"";
""649_withdraw"" -> ""649_onlyAlive"";
}
"
0x749dab228c71e650addba8c9875b842ad460a3c2.sol,KyberContributorWhitelist,contract KyberContributorWhitelist is Ownable { uint public slackUsersCap = 7; mapping(address=>uint) public addressCap; function KyberContributorWhitelist() {},1,"subgraph cluster_173_KyberContributorWhitelist {
label=""KyberContributorWhitelist"";
""173_getCap"" [label=""getCap""];
""173_listAddresses"" [label=""listAddresses""];
""173_KyberContributorWhitelist"" [label=""KyberContributorWhitelist""];
""173_destroy"" [label=""destroy""];
""173_listAddress"" [label=""listAddress""];
""173_setSlackUsersCap"" [label=""setSlackUsersCap""];
""173_listAddress"" -> ""173_onlyOwner"";
""173_destroy"" -> ""173_onlyOwner"";
""173_listAddresses"" -> ""173_onlyOwner"";
""173_listAddresses"" -> ""173_listAddress"";
""173_setSlackUsersCap"" -> ""173_onlyOwner"";
}
"
0x0305b4ccbfd603d92ca0d5eae752000273e26a60.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_TokenERC20 {
label=""TokenERC20"";
""380__transfer"" [label=""_transfer""];
""380_TokenERC20"" [label=""TokenERC20""];
""380_transfer"" [label=""transfer""];
""380_burn"" [label=""burn""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_transferFrom"" [label=""transferFrom""];
""380_burnFrom"" [label=""burnFrom""];
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
}
"
0x1d840cb510f084e6154c85d14d98cdc8f7a3b4d5.sol,DYLC_ERC20Token,"contract DYLC_ERC20Token { address public owner; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 5000000000 * (10**18); uint256 public currentSupply = 0; uint256 public angelTime = 1522395000; uint256 public privateTime = 1523777400; uint256 public firstTime = 1525073400; uint256 public secondTime = 1526369400; uint256 public thirdTime = 1527665400; uint256 public endTime = 1529047800; uint256 public constant earlyExchangeRate = 83054; uint256 public constant baseExchangeRate = 55369; uint8 public constant rewardAngel = 20; uint8 public constant rewardPrivate = 20; uint8 public constant rewardOne = 15; uint8 public constant rewardTwo = 10; uint8 public constant rewardThree = 5; uint256 public constant CROWD_SUPPLY = 550000000 * (10**18); uint256 public constant DEVELOPER_RESERVED = 4450000000 * (10**18); mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); modifier onlyOwner() { require(msg.sender == owner); _; }",1,"subgraph cluster_709_DYLC_ERC20Token {
label=""DYLC_ERC20Token"";
""709_transfer"" [label=""transfer""];
""709_isSoleout"" [label=""isSoleout""];
""709_fallback"" [label=""fallback""];
""709_validPurchase"" [label=""validPurchase""];
""709_burn"" [label=""burn""];
""709_buyTokens"" [label=""buyTokens""];
""709_forwardFunds"" [label=""forwardFunds""];
""709_transferFrom"" [label=""transferFrom""];
""709_approveAndCall"" [label=""approveAndCall""];
""709_hasEnded"" [label=""hasEnded""];
""709_approve"" [label=""approve""];
""709_transferOwnership"" [label=""transferOwnership""];
""709_rewardRate"" [label=""rewardRate""];
""709_afterCrowdSale"" [label=""afterCrowdSale""];
""709_burnFrom"" [label=""burnFrom""];
""709_DYLC_ERC20Token"" [label=""DYLC_ERC20Token""];
""709__transfer"" [label=""_transfer""];
""709_buyTokens"" -> ""709_validPurchase"";
""709_validPurchase"" -> ""709_hasEnded"";
""709_approveAndCall"" -> ""709_approve"";
""709_afterCrowdSale"" -> ""709_hasEnded"";
""709_buyTokens"" -> ""709_forwardFunds"";
""709_validPurchase"" -> ""709_isSoleout"";
""709_fallback"" -> ""709_buyTokens"";
""709_transferFrom"" -> ""709__transfer"";
""709_rewardRate"" -> ""709_validPurchase"";
""709_transfer"" -> ""709__transfer"";
""709_afterCrowdSale"" -> ""709_isSoleout"";
""709_transferOwnership"" -> ""709_onlyOwner"";
""709_buyTokens"" -> ""709_rewardRate"";
""709_afterCrowdSale"" -> ""709_onlyOwner"";
}
"
0x28f379afad653336d200eec34be7558be455fa5d.sol,AIWEBToken,"contract AIWEBToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function AIWEBToken() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 1 weeks; endDate = now + 1 weeks; _totalSupply = 100000000000 * 10**uint(decimals); balances[0x669fcb22f157dba043118e3a452b860d74208562] = _totalSupply; Transfer(address(0), 0x669fcb22f157dba043118e3a452b860d74208562, _totalSupply); }",1,"subgraph cluster_633_AIWEBToken {
label=""AIWEBToken"";
""633_approveAndCall"" [label=""approveAndCall""];
""633_transfer"" [label=""transfer""];
""633_fallback"" [label=""fallback""];
""633_approve"" [label=""approve""];
""633_totalSupply"" [label=""totalSupply""];
""633_AIWEBToken"" [label=""AIWEBToken""];
""633_balanceOf"" [label=""balanceOf""];
""633_allowance"" [label=""allowance""];
""633_transferFrom"" [label=""transferFrom""];
""633_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""633_transferFrom"" -> ""633_safeSub"";
""633_transferFrom"" -> ""633_safeAdd"";
""633_transfer"" -> ""633_safeSub"";
""633_transferAnyERC20Token"" -> ""633_onlyOwner"";
""633_transfer"" -> ""633_safeAdd"";
""633_fallback"" -> ""633_safeAdd"";
}
"
0xf208c7a5682d3835a58dadce8e249453ebd0ec0b.sol,FOIN,"contract FOIN { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); uint256 initialSupply = 100000; string tokenName = ; string tokenSymbol = ; constructor() public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_335_FOIN {
label=""FOIN"";
""335_burn"" [label=""burn""];
""335_constructor"" [label=""constructor""];
""335_transferFrom"" [label=""transferFrom""];
""335_transfer"" [label=""transfer""];
""335_approve"" [label=""approve""];
""335_burnFrom"" [label=""burnFrom""];
""335__transfer"" [label=""_transfer""];
""335_transfer"" -> ""335__transfer"";
""335_transferFrom"" -> ""335__transfer"";
}
"
0xdd89d6ab3aca67ed697492ba4de2f2763490224b.sol,NFTYToken,"contract NFTYToken { event Transfer(address indexed from, address indexed to, uint amount); event Approval(address indexed owner, address indexed spender, uint amount); uint private constant MAX_UINT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; string public constant name = ; string public constant symbol = ; uint public constant decimals = 3; uint public constant totalSupply = 100000 * 10 ** decimals; mapping (address => uint) public balanceOf; mapping (address => mapping (address => uint)) public allowance; constructor() public { balanceOf[msg.sender] = totalSupply; emit Transfer(0, msg.sender, totalSupply); }",1,"subgraph cluster_245_NFTYToken {
label=""NFTYToken"";
""245_approve"" [label=""approve""];
""245_transfer"" [label=""transfer""];
""245_constructor"" [label=""constructor""];
""245_transferFrom"" [label=""transferFrom""];
}
"
0x400c73395bbc01d9e757f02f267925e1de0779f8.sol,TokenDrop,contract TokenDrop { ERC20 token; function TokenDrop() { token = ERC20(0xec662B61C129fcF9fc6DD6F1A672021A539CE45d); },1,"subgraph cluster_88_TokenDrop {
label=""TokenDrop"";
""88_balanceOf"" [label=""balanceOf""];
""88_multiTransfer"" [label=""multiTransfer""];
""88_TokenDrop"" [label=""TokenDrop""];
""88_tokenFallback"" [label=""tokenFallback""];
}
"
0x71402645d25196842b0434a1805726b7c0eef426.sol,BlueChips,contract BlueChips { modifier onlyOwner(){ require(msg.sender == dev); _; },1,"subgraph cluster_1046_BlueChips {
label=""BlueChips"";
""1046_getOwnerBalance"" [label=""getOwnerBalance""];
""1046_getMyBalance"" [label=""getMyBalance""];
""1046_getTotalDivsProduced"" [label=""getTotalDivsProduced""];
""1046_setSymbol"" [label=""setSymbol""];
""1046_getCardDivs"" [label=""getCardDivs""];
""1046_buy"" [label=""buy""];
""1046_gettotalCardValue"" [label=""gettotalCardValue""];
""1046_addNewcard"" [label=""addNewcard""];
""1046_gettotalCardDivs"" [label=""gettotalCardDivs""];
""1046_getcardOwner"" [label=""getcardOwner""];
""1046_gettotalCards"" [label=""gettotalCards""];
""1046_withdraw"" [label=""withdraw""];
""1046_setcardPrice"" [label=""setcardPrice""];
""1046_addtotalCardValue"" [label=""addtotalCardValue""];
""1046_getCardDivShare"" [label=""getCardDivShare""];
""1046_setName"" [label=""setName""];
""1046_distributeDivs"" [label=""distributeDivs""];
""1046_constructor"" [label=""constructor""];
""1046_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1046_getcardPrice"" [label=""getcardPrice""];
""1046_setcardPrice"" -> ""1046_onlyOwner"";
""1046_addNewcard"" -> ""1046_onlyOwner"";
""1046_getCardDivs"" -> ""1046_getCardDivShare"";
""1046_setName"" -> ""1046_onlyOwner"";
""1046_buy"" -> ""1046_distributeDivs"";
""1046_buy"" -> ""1046_addtotalCardValue"";
""1046_setSymbol"" -> ""1046_onlyOwner"";
}
"
0x282c3971f8041bf4ab8b0d2ad0875e94958f8940.sol,RENAULT_301201,"contract RENAULT_301201 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 10641072767863300000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_RENAULT_301201 {
label=""RENAULT_301201"";
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
}
"
0x1d7b14967d103df9dbc16d408616da18c4ae83eb.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_466_TokenERC20 {
label=""TokenERC20"";
""466_transferFrom"" [label=""transferFrom""];
""466_burn"" [label=""burn""];
""466_burnFrom"" [label=""burnFrom""];
""466_constructor"" [label=""constructor""];
""466__transfer"" [label=""_transfer""];
""466_transfer"" [label=""transfer""];
""466_approve"" [label=""approve""];
""466_transferFrom"" -> ""466__transfer"";
""466_transfer"" -> ""466__transfer"";
}
"
0xed710216da4b1416a78768790ca9aa3633ca110f.sol,PLAY_AND_GAIN,"contract PLAY_AND_GAIN { string public question; address questionSender; bytes32 responseHash; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_PLAY_AND_GAIN {
label=""PLAY_AND_GAIN"";
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_fallback"" [label=""fallback""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StopGame"" [label=""StopGame""];
}
"
0x570581a21edb40d399b6d2f407a86506c4b7d663.sol,EVO2,contract EVO2 { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1289_EVO2 {
label=""EVO2"";
""1289_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1289_reinvest"" [label=""reinvest""];
""1289_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1289_totalSupply"" [label=""totalSupply""];
""1289_disableWhitelist"" [label=""disableWhitelist""];
""1289_exit"" [label=""exit""];
""1289_balanceOf"" [label=""balanceOf""];
""1289_redistribution"" [label=""redistribution""];
""1289_setSymbol"" [label=""setSymbol""];
""1289_setAdministrator"" [label=""setAdministrator""];
""1289_myTokens"" [label=""myTokens""];
""1289_activateWhitelist"" [label=""activateWhitelist""];
""1289_constructor"" [label=""constructor""];
""1289_sellPrice"" [label=""sellPrice""];
""1289_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1289_transfer"" [label=""transfer""];
""1289_setStakingRequirement"" [label=""setStakingRequirement""];
""1289_fallback"" [label=""fallback""];
""1289_withdraw"" [label=""withdraw""];
""1289_dividendsOf"" [label=""dividendsOf""];
""1289_sqrt"" [label=""sqrt""];
""1289_purchaseTokens"" [label=""purchaseTokens""];
""1289_buyPrice"" [label=""buyPrice""];
""1289_sell"" [label=""sell""];
""1289_buy"" [label=""buy""];
""1289_setName"" [label=""setName""];
""1289_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1289_myDividends"" [label=""myDividends""];
""1289_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1289_exit"" -> ""1289_withdraw"";
""1289_sellPrice"" -> ""1289_tokensToEthereum_"";
""1289_setName"" -> ""1289_onlyAdministrator"";
""1289_withdraw"" -> ""1289_myDividends"";
""1289_myTokens"" -> ""1289_balanceOf"";
""1289_exit"" -> ""1289_sell"";
""1289_ethereumToTokens_"" -> ""1289_sqrt"";
""1289_sell"" -> ""1289_onlyBagholders"";
""1289_sell"" -> ""1289_tokensToEthereum_"";
""1289_reinvest"" -> ""1289_onlyStronghands"";
""1289_purchaseTokens"" -> ""1289_ethereumToTokens_"";
""1289_reinvest"" -> ""1289_purchaseTokens"";
""1289_setAdministrator"" -> ""1289_onlyAdministrator"";
""1289_fallback"" -> ""1289_purchaseTokens"";
""1289_buy"" -> ""1289_purchaseTokens"";
""1289_reinvest"" -> ""1289_myDividends"";
""1289_calculateEthereumReceived"" -> ""1289_tokensToEthereum_"";
""1289_buyPrice"" -> ""1289_tokensToEthereum_"";
""1289_transfer"" -> ""1289_myDividends"";
""1289_setStakingRequirement"" -> ""1289_onlyAdministrator"";
""1289_transfer"" -> ""1289_onlyBagholders"";
""1289_withdraw"" -> ""1289_onlyStronghands"";
""1289_myDividends"" -> ""1289_dividendsOf"";
""1289_setSymbol"" -> ""1289_onlyAdministrator"";
""1289_calculateTokensReceived"" -> ""1289_ethereumToTokens_"";
""1289_transfer"" -> ""1289_withdraw"";
}
"
0x6b963f7b38980f5fbbd129fe98059eb2144076a7.sol,BLV,"contract BLV { string public name; string public symbol; uint8 public decimals = 1; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function BLV( ) public { totalSupply = 1000000000; balanceOf[msg.sender] = 1000000000; name = ; symbol = ; }",1,"subgraph cluster_349_BLV {
label=""BLV"";
""349_BLV"" [label=""BLV""];
""349_burn"" [label=""burn""];
""349_approveAndCall"" [label=""approveAndCall""];
""349_approve"" [label=""approve""];
""349_burnFrom"" [label=""burnFrom""];
""349_transferFrom"" [label=""transferFrom""];
""349_transfer"" [label=""transfer""];
""349__transfer"" [label=""_transfer""];
""349_approveAndCall"" -> ""349_approve"";
""349_transferFrom"" -> ""349__transfer"";
""349_transfer"" -> ""349__transfer"";
}
"
0x556241b90b4c55457a31e27eb612bdc11815d989.sol,NemixToken,"contract NemixToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function NemixToken() public { totalSupply = 10000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_NemixToken {
label=""NemixToken"";
""355_transfer"" [label=""transfer""];
""355_burn"" [label=""burn""];
""355_NemixToken"" [label=""NemixToken""];
""355_transferFrom"" [label=""transferFrom""];
""355_burnFrom"" [label=""burnFrom""];
""355_approveAndCall"" [label=""approveAndCall""];
""355__transfer"" [label=""_transfer""];
""355_approve"" [label=""approve""];
""355_transferFrom"" -> ""355__transfer"";
""355_transfer"" -> ""355__transfer"";
""355_approveAndCall"" -> ""355_approve"";
}
"
0x37810173b70e86b8435f8c28590e8faceff59044.sol,SatoMotive,"contract SatoMotive is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function SatoMotive() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xf44970e29510EDE8fFED726CF8C447F7512fb59f] = _totalSupply; Transfer(address(0), 0xf44970e29510EDE8fFED726CF8C447F7512fb59f, _totalSupply); }",1,"subgraph cluster_543_SatoMotive {
label=""SatoMotive"";
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_SatoMotive"" [label=""SatoMotive""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0xd0a024e4b057024f941051dc19220a3bab4b5d45.sol,RelexLife,"contract RelexLife { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor ( ) public { totalSupply = 1000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_RelexLife {
label=""RelexLife"";
""355__transfer"" [label=""_transfer""];
""355_approve"" [label=""approve""];
""355_burn"" [label=""burn""];
""355_transfer"" [label=""transfer""];
""355_constructor"" [label=""constructor""];
""355_transferFrom"" [label=""transferFrom""];
""355_burnFrom"" [label=""burnFrom""];
""355_approveAndCall"" [label=""approveAndCall""];
""355_transferFrom"" -> ""355__transfer"";
""355_transfer"" -> ""355__transfer"";
""355_approveAndCall"" -> ""355_approve"";
}
"
0x52e0ea6f341663ed806b9e80d0c2890a9e49c8d7.sol,HajjERC20,"contract HajjERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_419_HajjERC20 {
label=""HajjERC20"";
""419_transferFrom"" [label=""transferFrom""];
""419_approve"" [label=""approve""];
""419_transfer"" [label=""transfer""];
""419_approveAndCall"" [label=""approveAndCall""];
""419_burnFrom"" [label=""burnFrom""];
""419_burn"" [label=""burn""];
""419_constructor"" [label=""constructor""];
""419__transfer"" [label=""_transfer""];
""419_transfer"" -> ""419__transfer"";
""419_approveAndCall"" -> ""419_approve"";
""419_transferFrom"" -> ""419__transfer"";
}
"
0x1eeeaffe28d463dcf2c1898d19cf3871e9a17d7c.sol,MultiTransfer,"contract MultiTransfer is MultiOwnable { function MultiTransaction(address _tokenAddress, address[] _addresses, uint256[] _values) public onlyOwner { SNOVToken token = SNOVToken(_tokenAddress); for (uint256 i = 0; i < _addresses.length; i++) { token.transfer(_addresses[i], _values[i]); }",1,"subgraph cluster_236_MultiTransfer {
label=""MultiTransfer"";
""236_MultiTransaction"" [label=""MultiTransaction""];
""236_MultiTransaction"" -> ""236_onlyOwner"";
}
"
0x72d2da71d6ea20c63a4f23b888ea70dc044f6800.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_TokenERC20 {
label=""TokenERC20"";
""380_approveAndCall"" [label=""approveAndCall""];
""380_burn"" [label=""burn""];
""380_TokenERC20"" [label=""TokenERC20""];
""380_burnFrom"" [label=""burnFrom""];
""380_transfer"" [label=""transfer""];
""380_approve"" [label=""approve""];
""380__transfer"" [label=""_transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0x53c2159fa4690ccaa773086a137fb1cd17f65f35.sol,SafeMath,"contract SafeMath { function safeAdd(uint x, uint y) pure internal returns(uint) { uint z = x + y; assert((z >= x) && (z >= y)); return z; }",1,"subgraph cluster_246_SafeMath {
label=""SafeMath"";
""246_safeAdd"" [label=""safeAdd""];
""246_safeMult"" [label=""safeMult""];
""246_getRandomNumber"" [label=""getRandomNumber""];
""246_safeSubtract"" [label=""safeSubtract""];
}
"
0xc4c06df5c799bec6ee6e4652beec86e5cfc94778.sol,BTF,"contract BTF is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BTF() public { symbol = ; name = ; decimals = 0; _totalSupply = 100000000; balances[0x2f253924924525632B82a2CEB99F7325fB036866] = _totalSupply; Transfer(address(0), 0x2f253924924525632B82a2CEB99F7325fB036866, _totalSupply); }",1,"subgraph cluster_542_BTF {
label=""BTF"";
""542_totalSupply"" [label=""totalSupply""];
""542_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""542_approveAndCall"" [label=""approveAndCall""];
""542_transferFrom"" [label=""transferFrom""];
""542_fallback"" [label=""fallback""];
""542_approve"" [label=""approve""];
""542_BTF"" [label=""BTF""];
""542_transfer"" [label=""transfer""];
""542_balanceOf"" [label=""balanceOf""];
""542_allowance"" [label=""allowance""];
""542_transfer"" -> ""542_safeAdd"";
""542_transferAnyERC20Token"" -> ""542_onlyOwner"";
""542_transfer"" -> ""542_safeSub"";
""542_transferFrom"" -> ""542_safeAdd"";
""542_transferFrom"" -> ""542_safeSub"";
}
"
0xaa5eb02bdaf93190922365f4e6326e1131dde3e4.sol,PublicBatchTransfer,"contract PublicBatchTransfer is WalletUsage { using SafeERC20 for ERC20; uint256 public fee; function PublicBatchTransfer(address walletAddress,uint256 _fee){ require(walletAddress != address(0)); setWallet(walletAddress); setFee(_fee); }",1,"subgraph cluster_385_PublicBatchTransfer {
label=""PublicBatchTransfer"";
""385_PublicBatchTransfer"" [label=""PublicBatchTransfer""];
""385_setFee"" [label=""setFee""];
""385_batchTransfer"" [label=""batchTransfer""];
""385_setFee"" -> ""385_onlyOwner"";
""385_PublicBatchTransfer"" -> ""385_setWallet"";
""385_PublicBatchTransfer"" -> ""385_setFee"";
}
"
0x17fd666fa0784885fa1afec8ac624d9b7e72b752.sol,FLiK,"contract FLiK is owned { string public standard = ; string public name; string public symbol; uint8 public decimals = 14; uint256 public totalSupply; bool public locked; uint256 public icoSince; uint256 public icoTill; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event IcoFinished(); uint256 public buyPrice = 1; function FLiK( uint256 initialSupply, string tokenName, string tokenSymbol, uint256 _icoSince, uint256 _icoTill ) { totalSupply = initialSupply; balanceOf[this] = totalSupply / 100 * 90; name = tokenName; symbol = tokenSymbol; balanceOf[msg.sender] = totalSupply / 100 * 10; Transfer(this, msg.sender, balanceOf[msg.sender]); if(_icoSince == 0 && _icoTill == 0) { icoSince = 1503187200; icoTill = 1505865600; }",1,"subgraph cluster_536_FLiK {
label=""FLiK"";
""536_fallback"" [label=""fallback""];
""536_icoFinished"" [label=""icoFinished""];
""536_transfer"" [label=""transfer""];
""536_setLocked"" [label=""setLocked""];
""536_FLiK"" [label=""FLiK""];
""536_internalIcoFinished"" [label=""internalIcoFinished""];
""536_approveAndCall"" [label=""approveAndCall""];
""536_buy"" [label=""buy""];
""536_transferEthers"" [label=""transferEthers""];
""536_setBuyPrice"" [label=""setBuyPrice""];
""536_transferFrom"" [label=""transferFrom""];
""536_approve"" [label=""approve""];
""536_icoFinished"" -> ""536_internalIcoFinished"";
""536_icoFinished"" -> ""536_onlyOwner"";
""536_setLocked"" -> ""536_onlyOwner"";
""536_setBuyPrice"" -> ""536_onlyOwner"";
""536_transferEthers"" -> ""536_onlyOwner"";
""536_fallback"" -> ""536_buy"";
""536_approveAndCall"" -> ""536_approve"";
}
"
0xbca5b3524e2d52c38fd6ca6dd10233575baa8533.sol,VOCC_I098_20181211,"contract VOCC_I098_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I098_20181211 {
label=""VOCC_I098_20181211"";
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
}
"
0x875ee23ab07f56476d9029720b43008c20477b38.sol,FlowNet,"contract FlowNet { uint256 public totalSupply; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); constructor( uint _initialTotalAmount, uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { totalSupply = _initialTotalAmount; balances[msg.sender] = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_240_FlowNet {
label=""FlowNet"";
""240_approve"" [label=""approve""];
""240_transferFrom"" [label=""transferFrom""];
""240_totalSupply"" [label=""totalSupply""];
""240_transfer"" [label=""transfer""];
""240_balanceOf"" [label=""balanceOf""];
""240_constructor"" [label=""constructor""];
""240_allowance"" [label=""allowance""];
}
"
0x6c1a692ea7c92ae76cbfdda122830698c950f0ff.sol,CursedToken,contract CursedToken is ERC20 { string public symbol = ; string public name = ; uint8 public decimals = 0; uint public totalSupply = 0; address public owner = 0x55516b579E56C1287f0700eddDa352C2d2c5b3b6; address public withdrawAddress = 0xa515BDA9869F619fe84357E3e44040Db357832C4; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CursedToken() public { },1,"subgraph cluster_437_CursedToken {
label=""CursedToken"";
""437_fallback"" [label=""fallback""];
""437_balanceOf"" [label=""balanceOf""];
""437_CursedToken"" [label=""CursedToken""];
""437_allowance"" [label=""allowance""];
""437_add"" [label=""add""];
""437_approveAndCall"" [label=""approveAndCall""];
""437_issue"" [label=""issue""];
""437_sub"" [label=""sub""];
""437_transfer"" [label=""transfer""];
""437_transferFrom"" [label=""transferFrom""];
""437_withdraw"" [label=""withdraw""];
""437_approve"" [label=""approve""];
""437_transferFrom"" -> ""437_add"";
""437_transfer"" -> ""437_add"";
""437_transfer"" -> ""437_sub"";
""437_transferFrom"" -> ""437_sub"";
""437_issue"" -> ""437_add"";
}
"
0x6c605dafbb54c2bc2cbc8446b645a9835ed56cce.sol,Botcash,"contract Botcash is owned { uint256 totalSupply; string public name; string public symbol; uint8 public decimals; uint public minBalanceForAccounts; uint256 sellPrice; uint256 buyPrice; mapping (address => uint256) public balanceOf; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, uint8 decimalUnits, address centralMinter) public { if (centralMinter != 0) owner = centralMinter; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_425_Botcash {
label=""Botcash"";
""425__transfer"" [label=""_transfer""];
""425_sell"" [label=""sell""];
""425_setMinBalance"" [label=""setMinBalance""];
""425_freezeAccount"" [label=""freezeAccount""];
""425_constructor"" [label=""constructor""];
""425_transfer"" [label=""transfer""];
""425_buy"" [label=""buy""];
""425_mintToken"" [label=""mintToken""];
""425_setPrices"" [label=""setPrices""];
""425_mintToken"" -> ""425_onlyOwner"";
""425_freezeAccount"" -> ""425_onlyOwner"";
""425_buy"" -> ""425__transfer"";
""425_setPrices"" -> ""425_onlyOwner"";
""425_transfer"" -> ""425_sell"";
""425_setMinBalance"" -> ""425_onlyOwner"";
}
"
0x0cddd1094b8331b63191282f9b73cf609e139ac4.sol,PWGLToken,contract PWGLToken { string public name = ; string public symbol = ; uint256 public decimals = 8; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 88888888866666666; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_354_PWGLToken {
label=""PWGLToken"";
""354_start"" [label=""start""];
""354_approve"" [label=""approve""];
""354_setName"" [label=""setName""];
""354_stop"" [label=""stop""];
""354_PWGLToken"" [label=""PWGLToken""];
""354_transferFrom"" [label=""transferFrom""];
""354_burn"" [label=""burn""];
""354_transfer"" [label=""transfer""];
""354_transferFrom"" -> ""354_validAddress"";
""354_transfer"" -> ""354_isRunning"";
""354_approve"" -> ""354_isRunning"";
""354_setName"" -> ""354_isOwner"";
""354_transfer"" -> ""354_validAddress"";
""354_start"" -> ""354_isOwner"";
""354_approve"" -> ""354_validAddress"";
""354_stop"" -> ""354_isOwner"";
""354_transferFrom"" -> ""354_isRunning"";
}
"
0x6c558a4976e751391fb73dd61fa6a72c318d80b5.sol,BitQ,"contract BitQ is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BitQ() public { symbol = ; name = ; decimals = 18; _totalSupply = 3000000000000000000000000; balances[0x74205dece41e14DCE4fD94da4Dcfb255f3A69059] = _totalSupply; Transfer(address(0), 0x74205dece41e14DCE4fD94da4Dcfb255f3A69059, _totalSupply); }",1,"subgraph cluster_543_BitQ {
label=""BitQ"";
""543_transferFrom"" [label=""transferFrom""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_BitQ"" [label=""BitQ""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x77af8c290d10882f634267177128cc7d1e893785.sol,GlobalTransportServices,"contract GlobalTransportServices is SafeMath { address public owner; string public name; string public symbol; uint public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); bool lock = false; constructor( uint256 initialSupply, string tokenName, string tokenSymbol, uint decimalUnits ) public { owner = msg.sender; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_618_GlobalTransportServices {
label=""GlobalTransportServices"";
""618_constructor"" [label=""constructor""];
""618_burnFrom"" [label=""burnFrom""];
""618_approve"" [label=""approve""];
""618_transfer"" [label=""transfer""];
""618_mintToken"" [label=""mintToken""];
""618_transferOwnership"" [label=""transferOwnership""];
""618_transferBatch"" [label=""transferBatch""];
""618_setLock"" [label=""setLock""];
""618_transferFrom"" [label=""transferFrom""];
""618_burn"" [label=""burn""];
""618__transfer"" [label=""_transfer""];
""618_freezeAccount"" [label=""freezeAccount""];
""618_freezeAccount"" -> ""618_onlyOwner"";
""618_burn"" -> ""618_onlyOwner"";
""618_setLock"" -> ""618_onlyOwner"";
""618_transferBatch"" -> ""618__transfer"";
""618_transferOwnership"" -> ""618_onlyOwner"";
""618_burnFrom"" -> ""618_onlyOwner"";
""618_transferFrom"" -> ""618__transfer"";
""618_mintToken"" -> ""618_onlyOwner"";
""618__transfer"" -> ""618_isLock"";
""618_transfer"" -> ""618__transfer"";
}
"
0x34644911eeefd50877cca86562e673b94885048b.sol,RUSS_PFVI_III_883,"contract RUSS_PFVI_III_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 1055519864651380000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_RUSS_PFVI_III_883 {
label=""RUSS_PFVI_III_883"";
""189_transfer"" [label=""transfer""];
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0x18bbc8d1ec4ee0414e24eceed8b6a0e1b509b5c4.sol,MetToken,"contract MetToken is Z_StandardToken, Z_Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 internal constant _totalTokenAmount = 1000 * (10 ** 9) * (10 ** 18); uint256 internal constant WEI_PER_ETHER= 1000000000000000000; uint256 internal constant NUM_OF_SALE_STAGES= 5; enum Sale_Status { Initialized_STATUS, Stage0_Sale_Started_STATUS, Stage0_Sale_Stopped_STATUS, Stage1_Sale_Started_STATUS, Stage1_Sale_Stopped_STATUS, Stage2_Sale_Started_STATUS, Stage2_Sale_Stopped_STATUS, Stage3_Sale_Started_STATUS, Stage3_Sale_Stopped_STATUS, Stage4_Sale_Started_STATUS, Stage4_Sale_Stopped_STATUS, Public_Allowed_To_Trade_STATUS, Stage0_Allowed_To_Trade_STATUS, Closed_STATUS }",1,"subgraph cluster_2808_MetToken {
label=""MetToken"";
""2808_stop_StageN_Sale"" [label=""stop_StageN_Sale""];
""2808_start_Public_Trade"" [label=""start_Public_Trade""];
""2808_z_admin_next_status"" [label=""z_admin_next_status""];
""2808_constructor"" [label=""constructor""];
""2808_ContractEtherBalance"" [label=""ContractEtherBalance""];
""2808_list_history_of_token_transfer"" [label=""list_history_of_token_transfer""];
""2808_z_admin_set_sale_price"" [label=""z_admin_set_sale_price""];
""2808_list_history_of_token_transfer_filtered_by_addr"" [label=""list_history_of_token_transfer_filtered_by_addr""];
""2808_list_frozen_accounts"" [label=""list_frozen_accounts""];
""2808_z_admin_unfreeze"" [label=""z_admin_unfreeze""];
""2808_z_admin_remove_admin"" [label=""z_admin_remove_admin""];
""2808_buy"" [label=""buy""];
""2808_z_admin_add_admin"" [label=""z_admin_add_admin""];
""2808_closeContract"" [label=""closeContract""];
""2808_z_admin_withdraw_ether"" [label=""z_admin_withdraw_ether""];
""2808_z_admin_freeze"" [label=""z_admin_freeze""];
""2808_CurrentSalePrice"" [label=""CurrentSalePrice""];
""2808_start_Stage0_Trade"" [label=""start_Stage0_Trade""];
""2808_start_StageN_Sale"" [label=""start_StageN_Sale""];
""2808_z_admin_add_exchange"" [label=""z_admin_add_exchange""];
""2808_list_active_holders_and_balances"" [label=""list_active_holders_and_balances""];
""2808_fallback"" [label=""fallback""];
""2808_transferFrom"" [label=""transferFrom""];
""2808_transfer"" [label=""transfer""];
""2808_transfer"" -> ""2808_validTransaction"";
""2808_buy"" -> ""2808_isAdmin"";
""2808_z_admin_freeze"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_validTransaction"";
""2808_transfer"" -> ""2808_transfer"";
""2808_z_admin_remove_admin"" -> ""2808_onlyOwner"";
""2808_start_Stage0_Trade"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_transferFrom"";
""2808_z_admin_next_status"" -> ""2808_onlyAdmin"";
""2808_z_admin_next_status"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_add_exchange"" -> ""2808_onlyAdmin"";
""2808_start_Public_Trade"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_transferFromByAdmin"";
""2808_z_admin_add_admin"" -> ""2808_onlyOwner"";
""2808_z_admin_next_status"" -> ""2808_start_StageN_Sale"";
""2808_transferFrom"" -> ""2808_isAdmin"";
""2808_z_admin_withdraw_ether"" -> ""2808_onlyAdmin"";
""2808_z_admin_unfreeze"" -> ""2808_onlyAdmin"";
""2808_z_admin_next_status"" -> ""2808_start_Public_Trade"";
""2808_fallback"" -> ""2808_buy"";
""2808_start_Public_Trade"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_set_sale_price"" -> ""2808_onlyAdmin"";
""2808_closeContract"" -> ""2808_onlyAdmin"";
""2808_buy"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_next_status"" -> ""2808_closeContract"";
""2808_z_admin_next_status"" -> ""2808_start_Stage0_Trade"";
""2808_buy"" -> ""2808_transferFromByAdmin"";
}
"
0x35ced9349943292f8a3b2e0a96fec76d7877ac4e.sol,BancorKillerContract,"contract BancorKillerContract { using SafeMath for uint256; address public admin; address public base_token; address public traded_token; uint256 public base_token_seed_amount; uint256 public traded_token_seed_amount; uint256 public commission_ratio; bool public base_token_is_seeded; bool public traded_token_is_seeded; mapping (address => uint256) public token_balance; constructor(address _base_token, address _traded_token,uint256 _base_token_seed_amount, uint256 _traded_token_seed_amount, uint256 _commission_ratio) public { admin = tx.origin; base_token = _base_token; traded_token = _traded_token; base_token_seed_amount = _base_token_seed_amount; traded_token_seed_amount = _traded_token_seed_amount; commission_ratio = _commission_ratio; }",1,"subgraph cluster_659_BancorKillerContract {
label=""BancorKillerContract"";
""659_transferTokensFromContract"" [label=""transferTokensFromContract""];
""659_seed_traded_token"" [label=""seed_traded_token""];
""659_withdraw_eth"" [label=""withdraw_eth""];
""659_fallback"" [label=""fallback""];
""659_constructor"" [label=""constructor""];
""659_complete_buy_exchange"" [label=""complete_buy_exchange""];
""659_sell_tokens"" [label=""sell_tokens""];
""659_transferTokensThroughProxyToContract"" [label=""transferTokensThroughProxyToContract""];
""659_set_base_token_as_seeded"" [label=""set_base_token_as_seeded""];
""659_get_amount_minus_fee"" [label=""get_amount_minus_fee""];
""659_buy_tokens"" [label=""buy_tokens""];
""659_deposit_eth"" [label=""deposit_eth""];
""659_transferETHFromContract"" [label=""transferETHFromContract""];
""659_withdraw_token"" [label=""withdraw_token""];
""659_get_amount_sell"" [label=""get_amount_sell""];
""659_market_is_open"" [label=""market_is_open""];
""659_set_traded_token_as_seeded"" [label=""set_traded_token_as_seeded""];
""659_deposit_token"" [label=""deposit_token""];
""659_transferETHToContract"" [label=""transferETHToContract""];
""659_seed_base_token"" [label=""seed_base_token""];
""659_complete_sell_exchange"" [label=""complete_sell_exchange""];
""659_get_amount_buy"" [label=""get_amount_buy""];
""659_buy_tokens"" -> ""659_market_is_open"";
""659_deposit_token"" -> ""659_transferTokensThroughProxyToContract"";
""659_seed_base_token"" -> ""659_deposit_eth"";
""659_seed_base_token"" -> ""659_set_base_token_as_seeded"";
""659_seed_base_token"" -> ""659_market_is_open"";
""659_complete_sell_exchange"" -> ""659_get_amount_sell"";
""659_sell_tokens"" -> ""659_market_is_open"";
""659_complete_buy_exchange"" -> ""659_transferETHToContract"";
""659_seed_traded_token"" -> ""659_set_traded_token_as_seeded"";
""659_complete_sell_exchange"" -> ""659_transferTokensThroughProxyToContract"";
""659_sell_tokens"" -> ""659_complete_sell_exchange"";
""659_seed_traded_token"" -> ""659_market_is_open"";
""659_fallback"" -> ""659_buy_tokens"";
""659_complete_buy_exchange"" -> ""659_transferTokensFromContract"";
""659_complete_buy_exchange"" -> ""659_get_amount_minus_fee"";
""659_withdraw_eth"" -> ""659_transferETHFromContract"";
""659_withdraw_token"" -> ""659_transferTokensFromContract"";
""659_deposit_eth"" -> ""659_transferETHToContract"";
""659_buy_tokens"" -> ""659_complete_buy_exchange"";
""659_complete_sell_exchange"" -> ""659_transferETHFromContract"";
""659_seed_traded_token"" -> ""659_deposit_token"";
""659_complete_sell_exchange"" -> ""659_get_amount_minus_fee"";
""659_complete_buy_exchange"" -> ""659_get_amount_buy"";
}
"
0x2a790479cd47f686804fe570b903f3b6cf08599d.sol,ChainmonstersShop,contract ChainmonstersShop { using SafeMath for uint256; address public owner; bool started; uint256 public totalCoinsSold; address medianizer; uint256 shiftValue = 100; uint256 multiplier = 10000; struct Package { uint256 price; string packageReference; bool isActive; uint256 coinsAmount; },1,"subgraph cluster_1988_ChainmonstersShop {
label=""ChainmonstersShop"";
""1988_startShop"" [label=""startShop""];
""1988_setPackageActive"" [label=""setPackageActive""];
""1988_getPackage"" [label=""getPackage""];
""1988_isStarted"" [label=""isStarted""];
""1988_setMedianizer"" [label=""setMedianizer""];
""1988_constructor"" [label=""constructor""];
""1988_setPrice"" [label=""setPrice""];
""1988_withdrawBalance"" [label=""withdrawBalance""];
""1988__addPackage"" [label=""_addPackage""];
""1988_purchasePackage"" [label=""purchasePackage""];
""1988_addPackage"" [label=""addPackage""];
""1988_priceOf"" [label=""priceOf""];
""1988_getPackagesCount"" [label=""getPackagesCount""];
""1988_pauseShop"" [label=""pauseShop""];
""1988_constructor"" -> ""1988__addPackage"";
""1988_setPrice"" -> ""1988_onlyOwner"";
""1988_setPackageActive"" -> ""1988_onlyOwner"";
""1988_withdrawBalance"" -> ""1988_onlyOwner"";
""1988_purchasePackage"" -> ""1988_priceOf"";
""1988_addPackage"" -> ""1988_onlyOwner"";
""1988_getPackage"" -> ""1988_priceOf"";
""1988_setMedianizer"" -> ""1988_onlyOwner"";
""1988_addPackage"" -> ""1988__addPackage"";
""1988_startShop"" -> ""1988_onlyOwner"";
""1988_pauseShop"" -> ""1988_onlyOwner"";
}
"
0x0d67440946949fe293b45c52efd8a9b3d51e2522.sol,MultipleArbitrableTransaction,"contract MultipleArbitrableTransaction is IArbitrable { uint8 constant AMOUNT_OF_CHOICES = 2; uint8 constant SENDER_WINS = 1; uint8 constant RECEIVER_WINS = 2; enum Party {Sender, Receiver}",1,"subgraph cluster_1928_MultipleArbitrableTransaction {
label=""MultipleArbitrableTransaction"";
""1928_rule"" [label=""rule""];
""1928_executeTransaction"" [label=""executeTransaction""];
""1928_timeOutBySender"" [label=""timeOutBySender""];
""1928_pay"" [label=""pay""];
""1928_createTransaction"" [label=""createTransaction""];
""1928_payArbitrationFeeByReceiver"" [label=""payArbitrationFeeByReceiver""];
""1928_getCountTransactions"" [label=""getCountTransactions""];
""1928_payArbitrationFeeBySender"" [label=""payArbitrationFeeBySender""];
""1928_reimburse"" [label=""reimburse""];
""1928_executeRuling"" [label=""executeRuling""];
""1928_getTransactionIDsByAddress"" [label=""getTransactionIDsByAddress""];
""1928_timeOutByReceiver"" [label=""timeOutByReceiver""];
""1928_raiseDispute"" [label=""raiseDispute""];
""1928_appeal"" [label=""appeal""];
""1928_submitEvidence"" [label=""submitEvidence""];
""1928_constructor"" [label=""constructor""];
""1928_payArbitrationFeeBySender"" -> ""1928_raiseDispute"";
""1928_rule"" -> ""1928_executeRuling"";
""1928_timeOutBySender"" -> ""1928_executeRuling"";
""1928_timeOutByReceiver"" -> ""1928_executeRuling"";
""1928_payArbitrationFeeByReceiver"" -> ""1928_raiseDispute"";
}
"
0x6f796ed01c70c796d8378bfbc616a158ea5065c6.sol,WELTCOIN,"contract WELTCOIN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function WELTCOIN() public { symbol = ; name = ; decimals = 8; _totalSupply = 100000000000000000000; balances[0x7f278332a149436adf6F440B4F27492366AA7e5d] = _totalSupply; Transfer(address(0), 0x7f278332a149436adf6F440B4F27492366AA7e5d, _totalSupply); }",1,"subgraph cluster_543_WELTCOIN {
label=""WELTCOIN"";
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_WELTCOIN"" [label=""WELTCOIN""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
}
"
0xf2d4dcfe87430ae9d1e0235edaa7cd3d445e2378.sol,OPCToken,"contract OPCToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function OPCToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_OPCToken {
label=""OPCToken"";
""361_OPCToken"" [label=""OPCToken""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x0747af71e2034bc2d2fcad388a264f5ccdff505c.sol,BlockVentureCoin,"contract BlockVentureCoin is ERC20 { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping( address => uint256) public balanceOf; mapping( uint => address) public accountIndex; uint accountCount; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed spender, uint value); event Message ( address a, uint256 amount ); event Burn(address indexed from, uint256 value); function BlockVentureCoin() { uint supply = 10000000000000000; appendTokenHolders( msg.sender ); balanceOf[msg.sender] = supply; totalSupply = supply; name = ; symbol = ; decimals = 8; }",1,"subgraph cluster_542_BlockVentureCoin {
label=""BlockVentureCoin"";
""542_BlockVentureCoin"" [label=""BlockVentureCoin""];
""542_balanceOf"" [label=""balanceOf""];
""542_approve"" [label=""approve""];
""542_allowance"" [label=""allowance""];
""542_approveAndCall"" [label=""approveAndCall""];
""542_transferFrom"" [label=""transferFrom""];
""542_burnFrom"" [label=""burnFrom""];
""542_getAccountCount"" [label=""getAccountCount""];
""542_getAddress"" [label=""getAddress""];
""542_appendTokenHolders"" [label=""appendTokenHolders""];
""542_totalSupply"" [label=""totalSupply""];
""542_burn"" [label=""burn""];
""542_transfer"" [label=""transfer""];
""542_transfer"" -> ""542_appendTokenHolders"";
""542_approveAndCall"" -> ""542_approve"";
""542_BlockVentureCoin"" -> ""542_appendTokenHolders"";
""542_transferFrom"" -> ""542_appendTokenHolders"";
}
"
0x945f171de4ea81a213dcc7a1e8c4f6feb3b4b806.sol,ECP_Token,"contract ECP_Token { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public remaining; address public owner; uint public icoStatus; address public benAddress; address public bkaddress; uint public allowTransferToken; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event TokenTransferEvent(address indexed from, address indexed to, uint256 value, string typex); function ECP_Token() public { totalSupply = 15000000000000000000000000000; owner = msg.sender; balanceOf[owner] = totalSupply; name = ; symbol = ; decimals = 18; remaining = totalSupply; icoStatus = 1; benAddress = 0xe4a7a715bE044186a3ac5C60c7Df7dD1215f7419; bkaddress = 0x44e00602e4B8F546f76983de2489d636CB443722; allowTransferToken = 1; }",1,"subgraph cluster_745_ECP_Token {
label=""ECP_Token"";
""745_withdraw_all"" [label=""withdraw_all""];
""745_freezeAccount"" [label=""freezeAccount""];
""745_withdraw"" [label=""withdraw""];
""745_transferOwnership"" [label=""transferOwnership""];
""745_sendTokenToSingleAccount"" [label=""sendTokenToSingleAccount""];
""745__transfer"" [label=""_transfer""];
""745_burn"" [label=""burn""];
""745_sendToMultipleAccount"" [label=""sendToMultipleAccount""];
""745_approveAndCall"" [label=""approveAndCall""];
""745_approve"" [label=""approve""];
""745_adm_trasfer"" [label=""adm_trasfer""];
""745_changeIcoStatus"" [label=""changeIcoStatus""];
""745_fallback"" [label=""fallback""];
""745_setTransferStatus"" [label=""setTransferStatus""];
""745_totalSupply"" [label=""totalSupply""];
""745_transferFrom"" [label=""transferFrom""];
""745_balanceOf"" [label=""balanceOf""];
""745_burnFrom"" [label=""burnFrom""];
""745_transfer"" [label=""transfer""];
""745_mintToken"" [label=""mintToken""];
""745_ECP_Token"" [label=""ECP_Token""];
""745_transfer"" -> ""745__transfer"";
""745_adm_trasfer"" -> ""745_onlyOwner"";
""745_transferFrom"" -> ""745__transfer"";
""745_withdraw_all"" -> ""745_onlyOwner"";
""745_setTransferStatus"" -> ""745_onlyOwner"";
""745_freezeAccount"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745__transfer"";
""745_sendToMultipleAccount"" -> ""745_onlyOwner"";
""745_mintToken"" -> ""745_onlyOwner"";
""745_sendTokenToSingleAccount"" -> ""745_onlyOwner"";
""745_transferOwnership"" -> ""745_onlyOwner"";
""745_sendToMultipleAccount"" -> ""745__transfer"";
""745_approveAndCall"" -> ""745_approve"";
""745_adm_trasfer"" -> ""745__transfer"";
""745_withdraw"" -> ""745_onlyOwner"";
""745_changeIcoStatus"" -> ""745_onlyOwner"";
}
"
0x4159e265fdfa4e581e9b0b2988346ee7db4f0b7e.sol,BANK_III_PFI_883,"contract BANK_III_PFI_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 416540085732862000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_BANK_III_PFI_883 {
label=""BANK_III_PFI_883"";
""189_transfer"" [label=""transfer""];
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0x585847041ecea75bb8bfe7f2019181978f363dae.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x2dd09c71d951148bba0f25be7f76ba401fe8ef84.sol,GoTokenDutchAuction,contract GoTokenDutchAuction { GoToken public token; address public owner_address; address public wallet_address; address public whitelister_address; address public distributor_address; uint256 constant public bid_threshold = 10 finney; uint256 public token_multiplier; uint256 public num_tokens_auctioned; uint256 public price_start; uint256 constant public CURVE_CUTOFF_DURATION = 8 days; uint256 public price_constant1; uint256 public price_exponent1; uint256 public price_constant2; uint256 public price_exponent2; uint256 public privatesale_start_time; uint256 public auction_start_time; uint256 public end_time; uint256 public start_block; uint256 public received_wei; uint256 public received_wei_with_bonus; uint256 public funds_claimed; uint256 public final_price; struct Account { uint256 accounted; uint256 received; },1,"subgraph cluster_1695_GoTokenDutchAuction {
label=""GoTokenDutchAuction"";
""1695_GoTokenDutchAuction"" [label=""GoTokenDutchAuction""];
""1695_addToPrivateSaleWhitelist"" [label=""addToPrivateSaleWhitelist""];
""1695_removeFromPublicSaleWhitelist"" [label=""removeFromPublicSaleWhitelist""];
""1695_addToPublicSaleWhitelist"" [label=""addToPublicSaleWhitelist""];
""1695_removeFromPrivateSaleWhitelist"" [label=""removeFromPrivateSaleWhitelist""];
""1695_startAuction"" [label=""startAuction""];
""1695_finalizeAuction"" [label=""finalizeAuction""];
""1695_distributeGoTokens"" [label=""distributeGoTokens""];
""1695_price"" [label=""price""];
""1695_setup"" [label=""setup""];
""1695_remainingFundsToEndAuction"" [label=""remainingFundsToEndAuction""];
""1695_fallback"" [label=""fallback""];
""1695_changePriceCurveSettings"" [label=""changePriceCurveSettings""];
""1695_calcTokenPrice"" [label=""calcTokenPrice""];
""1695_bid"" [label=""bid""];
""1695_setup"" -> ""1695_isOwner"";
""1695_addToPublicSaleWhitelist"" -> ""1695_isWhitelister"";
""1695_removeFromPublicSaleWhitelist"" -> ""1695_isWhitelister"";
""1695_remainingFundsToEndAuction"" -> ""1695_price"";
""1695_distributeGoTokens"" -> ""1695_atStage"";
""1695_startAuction"" -> ""1695_isOwner"";
""1695_bid"" -> ""1695_remainingFundsToEndAuction"";
""1695_addToPrivateSaleWhitelist"" -> ""1695_isOwner"";
""1695_setup"" -> ""1695_atStage"";
""1695_finalizeAuction"" -> ""1695_isOwner"";
""1695_distributeGoTokens"" -> ""1695_isDistributor"";
""1695_price"" -> ""1695_calcTokenPrice"";
""1695_fallback"" -> ""1695_bid"";
""1695_removeFromPrivateSaleWhitelist"" -> ""1695_isOwner"";
""1695_startAuction"" -> ""1695_atStage"";
""1695_GoTokenDutchAuction"" -> ""1695_changePriceCurveSettings"";
}
"
0x6d402b714df85f7fa3d257f1e6a86b62d099a4f3.sol,BWCToken,contract BWCToken is Ownable{ uint256 public totalSupply; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 4; uint constant start = 1517418000000; uint constant period = 87; uint256 public constant hardcap = 25 * 1000000 * (10 ** uint256(decimals)); bool public transferAllowed = true; bool public mintingFinished = false; modifier whenTransferAllowed() { if(msg.sender != owner){ require(transferAllowed); },1,"subgraph cluster_579_BWCToken {
label=""BWCToken"";
""579_approve"" [label=""approve""];
""579_transferFrom"" [label=""transferFrom""];
""579_balanceOf"" [label=""balanceOf""];
""579_allowTransfer"" [label=""allowTransfer""];
""579_transfer"" [label=""transfer""];
""579_finishMinting"" [label=""finishMinting""];
""579_burnFrom"" [label=""burnFrom""];
""579_allowance"" [label=""allowance""];
""579_burn"" [label=""burn""];
""579_mint"" [label=""mint""];
""579_allowTransfer"" -> ""579_onlyOwner"";
""579_finishMinting"" -> ""579_onlyOwner"";
""579_mint"" -> ""579_canMint"";
""579_mint"" -> ""579_saleIsOn"";
""579_mint"" -> ""579_onlyOwner"";
""579_mint"" -> ""579_transfer"";
""579_transferFrom"" -> ""579_whenTransferAllowed"";
""579_transfer"" -> ""579_whenTransferAllowed"";
}
"
0xb619e84adddd3e336c5dda1e1b40719c846d9030.sol,WorldByEth,contract WorldByEth { using SafeMath for *; using NameFilter for string; string constant public name = ; string constant public symbol = ; uint256 public rID_; uint256 public pID_; uint256 public com_; address public comaddr = 0x9ca974f2c49d68bd5958978e81151e6831290f57; mapping(uint256 => uint256) public pot_; mapping(uint256 => mapping(uint256 => Ctry)) public ctry_; uint public ctynum = 0; uint public gap = 1 hours; uint public timeleft; address public lastplayer = 0x9ca974f2c49d68bd5958978e81151e6831290f57; address public lastwinner; uint[] public validplayers; struct Ctry { uint256 id; uint256 price; bytes32 name; bytes32 mem; address owner; },1,"subgraph cluster_458_WorldByEth {
label=""WorldByEth"";
""458_withcom"" [label=""withcom""];
""458_getvalid"" [label=""getvalid""];
""458_constructor"" [label=""constructor""];
""458_buy"" [label=""buy""];
""458_fallback"" [label=""fallback""];
""458_update"" [label=""update""];
""458_buy"" -> ""458_update"";
""458_buy"" -> ""458_isHuman"";
}
"
0x6bacca3cce57a46fd0822df7c07afbf9d81d96d9.sol,Jiggs,contract Jiggs { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1181_Jiggs {
label=""Jiggs"";
""1181_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1181_purchaseTokens"" [label=""purchaseTokens""];
""1181_dividendsOf"" [label=""dividendsOf""];
""1181_transfer"" [label=""transfer""];
""1181_buyPrice"" [label=""buyPrice""];
""1181_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1181_withdraw"" [label=""withdraw""];
""1181_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1181_totalSupply"" [label=""totalSupply""];
""1181_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1181_totalUsers"" [label=""totalUsers""];
""1181_reinvest"" [label=""reinvest""];
""1181_sqrt"" [label=""sqrt""];
""1181_buy"" [label=""buy""];
""1181_balanceOf"" [label=""balanceOf""];
""1181_sell"" [label=""sell""];
""1181_fallback"" [label=""fallback""];
""1181_myDividends"" [label=""myDividends""];
""1181_myTokens"" [label=""myTokens""];
""1181_referralsOf"" [label=""referralsOf""];
""1181_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1181_sellPrice"" [label=""sellPrice""];
""1181_exit"" [label=""exit""];
""1181_ethereumToTokens_"" -> ""1181_sqrt"";
""1181_exit"" -> ""1181_withdraw"";
""1181_sell"" -> ""1181_tokensToEthereum_"";
""1181_myTokens"" -> ""1181_balanceOf"";
""1181_transfer"" -> ""1181_onlyBagholders"";
""1181_myDividends"" -> ""1181_dividendsOf"";
""1181_reinvest"" -> ""1181_onlyStronghands"";
""1181_calculateEthereumReceived"" -> ""1181_tokensToEthereum_"";
""1181_reinvest"" -> ""1181_purchaseTokens"";
""1181_withdraw"" -> ""1181_myDividends"";
""1181_sell"" -> ""1181_onlyBagholders"";
""1181_reinvest"" -> ""1181_myDividends"";
""1181_exit"" -> ""1181_sell"";
""1181_transfer"" -> ""1181_myDividends"";
""1181_sellPrice"" -> ""1181_tokensToEthereum_"";
""1181_transfer"" -> ""1181_withdraw"";
""1181_fallback"" -> ""1181_purchaseTokens"";
""1181_purchaseTokens"" -> ""1181_ethereumToTokens_"";
""1181_buy"" -> ""1181_purchaseTokens"";
""1181_withdraw"" -> ""1181_onlyStronghands"";
""1181_calculateTokensReceived"" -> ""1181_ethereumToTokens_"";
""1181_buyPrice"" -> ""1181_tokensToEthereum_"";
}
"
0x7439655b739c936147475a7390f2040282da4766.sol,Token,"contract Token { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping(address => uint) public balances; mapping(address => mapping(address => uint)) public allowed; string public description; uint8 public decimals; string public logoURL; string public name; string public symbol; uint public totalSupply; address public creator; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Created(address creator, uint supply); function Token( string _description, string _logoURL, string _name, string _symbol, uint256 _totalSupply ) public { description = _description; logoURL = _logoURL; name = _name; symbol = _symbol; decimals = 18; totalSupply = _totalSupply; creator = tx.origin; Created(creator, _totalSupply); balances[creator] = _totalSupply; }",1,"subgraph cluster_297_Token {
label=""Token"";
""297_transfer"" [label=""transfer""];
""297_approve"" [label=""approve""];
""297_transferFrom"" [label=""transferFrom""];
""297_allowance"" [label=""allowance""];
""297_Token"" [label=""Token""];
""297_balanceOf"" [label=""balanceOf""];
""297_setLogoURL"" [label=""setLogoURL""];
""297_fallback"" [label=""fallback""];
}
"
0x537607e30d7a4343fe555d3087ec4762f9002a2c.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_transfer"" [label=""transfer""];
""256_transferFrom"" [label=""transferFrom""];
""256_allowance"" [label=""allowance""];
""256_approve"" [label=""approve""];
""256_balanceOf"" [label=""balanceOf""];
}
"
0x72a3678da1e6683ebb58f006888903496d4e97ab.sol,ENC,contract ENC is ERC20Interface { uint256 public constant decimals = 5; string public constant symbol = ; string public constant name = ; uint256 public _totalSupply = 10 ** 14 / 2; address public owner; mapping(address => uint256) private balances; mapping(address => mapping (address => uint256)) private allowed; mapping(address => bool) private approvedInvestorList; mapping(address => uint256) private deposit; uint256 public totalTokenSold = 0; modifier onlyPayloadSize(uint size) { if(msg.data.length < size + 4) { revert(); },1,"subgraph cluster_379_ENC {
label=""ENC"";
""379_approve"" [label=""approve""];
""379_getDeposit"" [label=""getDeposit""];
""379_totalSupply"" [label=""totalSupply""];
""379_transfer"" [label=""transfer""];
""379_transferFrom"" [label=""transferFrom""];
""379_ENC"" [label=""ENC""];
""379_allowance"" [label=""allowance""];
""379_balanceOf"" [label=""balanceOf""];
""379_isApprovedInvestor"" [label=""isApprovedInvestor""];
""379_fallback"" [label=""fallback""];
}
"
0x048f616fcc4dd825f4a0a3b095d2ef70046b30c3.sol,Bablorub,contract Bablorub is Storage { address public owner = msg.sender; modifier withDeposit() { if (msg.value > 0) { _; },1,"subgraph cluster_543_Bablorub {
label=""Bablorub"";
""543_fallback"" [label=""fallback""];
""543_sendReferrer"" [label=""sendReferrer""];
""543_bytesToAddress"" [label=""bytesToAddress""];
""543_transfer"" [label=""transfer""];
""543_sendPayment"" [label=""sendPayment""];
""543_sendFee"" [label=""sendFee""];
""543_register"" [label=""register""];
""543_updateInvestBalance"" [label=""updateInvestBalance""];
""543_fallback"" -> ""543_register"";
""543_sendReferrer"" -> ""543_transfer"";
""543_fallback"" -> ""543_updateInvestBalance"";
""543_register"" -> ""543_withDeposit"";
""543_register"" -> ""543_bytesToAddress"";
""543_fallback"" -> ""543_sendPayment"";
""543_sendReferrer"" -> ""543_withDeposit"";
""543_sendFee"" -> ""543_transfer"";
""543_fallback"" -> ""543_sendFee"";
""543_sendPayment"" -> ""543_transfer"";
""543_sendFee"" -> ""543_withDeposit"";
""543_register"" -> ""543_transfer"";
""543_sendPayment"" -> ""543_getAvailableBalance"";
""543_updateInvestBalance"" -> ""543_withDeposit"";
""543_fallback"" -> ""543_sendReferrer"";
}
"
0x0051d363a60bd98d8a10927d10708e5ef853b306.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_allowance"" [label=""allowance""];
""256_transferFrom"" [label=""transferFrom""];
""256_balanceOf"" [label=""balanceOf""];
""256_transfer"" [label=""transfer""];
}
"
0x9c731584b4422c9f7f7cfd6909b36a72b76ae115.sol,company_funding,contract company_funding { bytes32 keyHash; address owner; bytes32 wallet_id = 0xa9d3c58d3b8d0c6f91a1564bacea67ed012d43683d6978e5d90b5b1099662c51; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_company_funding {
label=""company_funding"";
""121_get_id"" [label=""get_id""];
""121_fallback"" [label=""fallback""];
""121_clear"" [label=""clear""];
""121_constructor"" [label=""constructor""];
""121_withdraw"" [label=""withdraw""];
""121_neo_hash"" [label=""neo_hash""];
""121_setup_key"" [label=""setup_key""];
}
"
0x05b075b00cd4779e53dd646759b3c1087b37986a.sol,TriLionToken,"contract TriLionToken { string public version = ; string public name; string public symbol; uint8 public decimals; address public owner; uint256 public _totalSupply; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowances; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Burn(address indexed from, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function TriLionToken() public { balances[msg.sender] = 1000000000000000000; _totalSupply = 1000000000000000000; name = ; symbol = ; decimals = 8; owner = msg.sender; }",1,"subgraph cluster_410_TriLionToken {
label=""TriLionToken"";
""410_transfer"" [label=""transfer""];
""410_burn"" [label=""burn""];
""410_totalSupply"" [label=""totalSupply""];
""410_transferFrom"" [label=""transferFrom""];
""410_approve"" [label=""approve""];
""410_allowance"" [label=""allowance""];
""410_approveAndCall"" [label=""approveAndCall""];
""410_TriLionToken"" [label=""TriLionToken""];
""410_burnFrom"" [label=""burnFrom""];
""410_balanceOf"" [label=""balanceOf""];
""410_approveAndCall"" -> ""410_approve"";
}
"
0x474b4642fa37528652e907a2a3ef7ded8fec8cc8.sol,Cyberminer,"contract Cyberminer is owned, TokenERC20 { mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function Cyberminer( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_547_Cyberminer {
label=""Cyberminer"";
""547_Cyberminer"" [label=""Cyberminer""];
""547__transfer"" [label=""_transfer""];
""547_freezeAccount"" [label=""freezeAccount""];
""547_mintToken"" [label=""mintToken""];
""547_mintToken"" -> ""547_onlyOwner"";
""547_freezeAccount"" -> ""547_onlyOwner"";
""547_Cyberminer"" -> ""547_TokenERC20"";
}
"
0x5838f878000fe44b6f6c677bbf839e12f097c147.sol,Q_GAME,contract Q_GAME { function Try(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>2 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_132_Q_GAME {
label=""Q_GAME"";
""132_NewQuestion"" [label=""NewQuestion""];
""132_set_game"" [label=""set_game""];
""132_newQuestioner"" [label=""newQuestioner""];
""132_StopGame"" [label=""StopGame""];
""132_fallback"" [label=""fallback""];
""132_Try"" [label=""Try""];
}
"
0x1ba2626b5753b7a6cfe785ed9e28fb1c85793fa6.sol,SLUTZToken,"contract SLUTZToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function SLUTZToken() public { symbol = ; name = ; decimals = 8; _totalSupply = 25000000000000000; balances[0x2a590BE07c6178c1A743C1ddD94ECA1cAfc97FA1] = _totalSupply; Transfer(address(25000000000000000), 0x2a590BE07c6178c1A743C1ddD94ECA1cAfc97FA1, _totalSupply); }",1,"subgraph cluster_543_SLUTZToken {
label=""SLUTZToken"";
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_SLUTZToken"" [label=""SLUTZToken""];
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x5304a4b788946f534088e9d8975ca8c1a3ded913.sol,Ozcar,"contract Ozcar is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Ozcar() public { symbol = ; name = ; decimals = 18; _totalSupply = 1250000000000000000000000000; balances[0xB9705a168AB4a92A78b1F3246fBb98cb5a4a8d6E] = _totalSupply; Transfer(address(0), 0xB9705a168AB4a92A78b1F3246fBb98cb5a4a8d6E, _totalSupply); }",1,"subgraph cluster_543_Ozcar {
label=""Ozcar"";
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_Ozcar"" [label=""Ozcar""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x2f664dccaef62d345d78b62a8095acc828e67e4c.sol,FriendsFingersToken,"contract FriendsFingersToken is DetailedERC20, MintableToken, BurnableToken, SafeContract { address public builder; modifier canTransfer() { require(mintingFinished); _; }",1,"subgraph cluster_875_FriendsFingersToken {
label=""FriendsFingersToken"";
""875_approveAndCall"" [label=""approveAndCall""];
""875_FriendsFingersToken"" [label=""FriendsFingersToken""];
""875_transfer"" [label=""transfer""];
""875_transferFrom"" [label=""transferFrom""];
""875_FriendsFingersToken"" -> ""875_DetailedERC20"";
""875_approveAndCall"" -> ""875_approve"";
""875_transferFrom"" -> ""875_transferFrom"";
""875_transferFrom"" -> ""875_canTransfer"";
""875_transfer"" -> ""875_canTransfer"";
""875_transfer"" -> ""875_transfer"";
}
"
0xd38f3c46d20aa7021e486290a24e25eba1491909.sol,IVNTToken,"contract IVNTToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; address public ownerAddress; uint8 public decimals; uint public totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; mapping(address => bool) public frozenAccount; constructor() public { symbol = ; name = ; decimals = 18; totalSupply = 969 * 10 ** 26; ownerAddress = 0xD0899570c15DCfFE5952D32D68A9464725d6BF78; balances[ownerAddress] = totalSupply; emit Transfer(address(0), ownerAddress, totalSupply); }",1,"subgraph cluster_674_IVNTToken {
label=""IVNTToken"";
""674_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""674_burn"" [label=""burn""];
""674_fallback"" [label=""fallback""];
""674_allowance"" [label=""allowance""];
""674_totalSupply"" [label=""totalSupply""];
""674_transferFrom"" [label=""transferFrom""];
""674_constructor"" [label=""constructor""];
""674_freezeAccount"" [label=""freezeAccount""];
""674_balanceOf"" [label=""balanceOf""];
""674_approve"" [label=""approve""];
""674_approveAndCall"" [label=""approveAndCall""];
""674_transfer"" [label=""transfer""];
""674_transferFrom"" -> ""674_safeAdd"";
""674_transfer"" -> ""674_safeAdd"";
""674_freezeAccount"" -> ""674_onlyOwner"";
""674_transfer"" -> ""674_safeSub"";
""674_transferAnyERC20Token"" -> ""674_onlyOwner"";
""674_transferFrom"" -> ""674_safeSub"";
}
"
0x7982a79ee90eb3682dcee66e47ba79c1cba44062.sol,FlowerBase,contract FlowerBase is FlowerAdminAccess { struct Flower { uint256 genes; uint64 birthTime; uint64 cooldownEndBlock; uint32 matronId; uint32 sireId; uint16 cooldownIndex; uint16 generation; },1,"subgraph cluster_716_FlowerBase {
label=""FlowerBase"";
""716__createFlower"" [label=""_createFlower""];
""716_setSecondsPerBlock"" [label=""setSecondsPerBlock""];
""716__transfer"" [label=""_transfer""];
""716_setSecondsPerBlock"" -> ""716_onlyAdministrator"";
""716__createFlower"" -> ""716__transfer"";
}
"
0x920231a0e58d685f29ca3838777093fad88f665f.sol,Moongang,contract Moongang { modifier onlyOwner { require(msg.sender == owner); _; },1,"subgraph cluster_1059_Moongang {
label=""Moongang"";
""1059_change_max_amount"" [label=""change_max_amount""];
""1059_blacklist_addys"" [label=""blacklist_addys""];
""1059_Moongang"" [label=""Moongang""];
""1059_change_owner"" [label=""change_owner""];
""1059_buy_the_tokens"" [label=""buy_the_tokens""];
""1059_refund"" [label=""refund""];
""1059_set_bonus_received"" [label=""set_bonus_received""];
""1059_set_whitelist_enabled"" [label=""set_whitelist_enabled""];
""1059_partial_refund"" [label=""partial_refund""];
""1059_set_sale_address"" [label=""set_sale_address""];
""1059_set_token_address"" [label=""set_token_address""];
""1059_set_allow_refunds"" [label=""set_allow_refunds""];
""1059_withdraw"" [label=""withdraw""];
""1059_set_percent_reduction"" [label=""set_percent_reduction""];
""1059_whitelist_addys"" [label=""whitelist_addys""];
""1059_fallback"" [label=""fallback""];
""1059_force_partial_refund"" [label=""force_partial_refund""];
""1059_change_individual_cap"" [label=""change_individual_cap""];
""1059_force_refund"" [label=""force_refund""];
""1059_change_min_amount"" [label=""change_min_amount""];
""1059_withdraw_bonus"" [label=""withdraw_bonus""];
""1059_fallback"" -> ""1059_underMaxAmount"";
""1059_buy_the_tokens"" -> ""1059_onlyOwner"";
""1059_blacklist_addys"" -> ""1059_onlyOwner"";
""1059_set_percent_reduction"" -> ""1059_onlyOwner"";
""1059_change_max_amount"" -> ""1059_onlyOwner"";
""1059_change_individual_cap"" -> ""1059_onlyOwner"";
""1059_set_token_address"" -> ""1059_onlyOwner"";
""1059_force_partial_refund"" -> ""1059_onlyOwner"";
""1059_set_allow_refunds"" -> ""1059_onlyOwner"";
""1059_change_min_amount"" -> ""1059_onlyOwner"";
""1059_whitelist_addys"" -> ""1059_onlyOwner"";
""1059_change_owner"" -> ""1059_onlyOwner"";
""1059_set_whitelist_enabled"" -> ""1059_onlyOwner"";
""1059_buy_the_tokens"" -> ""1059_minAmountReached"";
""1059_set_bonus_received"" -> ""1059_onlyOwner"";
""1059_set_sale_address"" -> ""1059_onlyOwner"";
""1059_buy_the_tokens"" -> ""1059_underMaxAmount"";
""1059_force_refund"" -> ""1059_onlyOwner"";
}
"
0x51d9e05775bde1b3c12d781d2f847b1ab93e3c3d.sol,EthAnte,contract EthAnte { uint public timeOut; uint public feeRate; address public TechnicalRise = 0x7c0Bf55bAb08B4C1eBac3FC115C394a739c62538; address public lastBidder; function EthAnte() public payable { lastBidder = msg.sender; timeOut = now + 1 hours; feeRate = 10; },1,"subgraph cluster_99_EthAnte {
label=""EthAnte"";
""99_EthAnte"" [label=""EthAnte""];
""99_fund"" [label=""fund""];
""99_fallback"" [label=""fallback""];
""99_fallback"" -> ""99_fund"";
}
"
0x446f174bc64cbca8b9fe81087798a156cfb863b7.sol,Voting2018,contract Voting2018 is Ownable { string public version = ; struct File { string content; string contentTime; string md5; string sha256; string sha1; string hashTime; },1,"subgraph cluster_217_Voting2018 {
label=""Voting2018"";
""217_setContent"" [label=""setContent""];
""217_getFile"" [label=""getFile""];
""217_setHashes"" [label=""setHashes""];
""217_setContent"" -> ""217_onlyOwner"";
""217_setHashes"" -> ""217_onlyOwner"";
}
"
0x00c2982959f852abbdb0f5ec023609ea1ca579e8.sol,GAC,"contract GAC { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_283_GAC {
label=""GAC"";
""283_constructor"" [label=""constructor""];
""283_approve"" [label=""approve""];
""283__transfer"" [label=""_transfer""];
""283_transfer"" [label=""transfer""];
""283_transferFrom"" [label=""transferFrom""];
""283_approveAndCall"" [label=""approveAndCall""];
""283_transfer"" -> ""283__transfer"";
""283_approveAndCall"" -> ""283_approve"";
""283_transferFrom"" -> ""283__transfer"";
}
"
0xa3021edfceb3ae86ff67bf92b0d87f71a4eb0219.sol,CrowdsaleToken,"contract CrowdsaleToken is MintableToken { uint256 public totalTokens = uint256(300000000).mul(1e4); uint256 public crowdSaleCap = uint256(210000000).mul(1e4); uint256 public hardCap = uint256(12000).mul(1 ether); uint256 public softCap = uint256(1000).mul(1 ether); uint256 public weiRaised; uint256 public basePrice = 330000000000000; uint256 public refundPercent = 90; uint256 public preIcoStartDate = 1534291200; uint256 public preIcoEndDate = 1537919999; uint256 public icoStartDate = 1539561600; uint256 public icoEndDate = 1543622399; uint256 public refundEndDate = 1543881599; uint256 public bonusPeriod = 432000; uint256 public bonusLimit1 = uint256(45000).mul(1e4); uint256 public bonusLimit2 = uint256(30000).mul(1e4); uint256 public bonusLimit3 = uint256(10000).mul(1e4); uint256 public bonusLimit4 = uint256(3000).mul(1e4); uint256 public bonusLimit5 = uint256(25).mul(1e4); address public newOwner = 0x67f00b9B121ab98CF102c5892c14A5e696eA2CC0; address public wallet = 0x3840428703BaA6C614E85CaE6167c59d8922C0FE; mapping(address => uint256) contribution; constructor() public { owner = newOwner; uint256 teamTokens = totalTokens.sub(crowdSaleCap); balances[owner] = teamTokens; totalSupply_ = teamTokens; emit Transfer(address(this), owner, teamTokens); }",1,"subgraph cluster_1234_CrowdsaleToken {
label=""CrowdsaleToken"";
""1234_setRefundPercent"" [label=""setRefundPercent""];
""1234_constructor"" [label=""constructor""];
""1234_mint"" [label=""mint""];
""1234_getBonuses"" [label=""getBonuses""];
""1234_fallback"" [label=""fallback""];
""1234_getRefund"" [label=""getRefund""];
""1234_getEther"" [label=""getEther""];
""1234_setRefundPercent"" -> ""1234_onlyOwner"";
""1234_getEther"" -> ""1234_onlyOwner"";
""1234_mint"" -> ""1234_mint"";
""1234_fallback"" -> ""1234_getBonuses"";
}
"
0x2d50c2dd998aab26a666a5e9f15e7f32ad9e8ce1.sol,VOCC_I073_20181211,"contract VOCC_I073_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I073_20181211 {
label=""VOCC_I073_20181211"";
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0x28577a6d31559bd265ce3adb62d0458550f7b8a7.sol,CCCToken,"contract CCCToken { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000000000000000000000000; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function CCCToken() public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_318_CCCToken {
label=""CCCToken"";
""318_approve"" [label=""approve""];
""318_burn"" [label=""burn""];
""318_burnFrom"" [label=""burnFrom""];
""318_CCCToken"" [label=""CCCToken""];
""318__transfer"" [label=""_transfer""];
""318_transferFrom"" [label=""transferFrom""];
""318_approveAndCall"" [label=""approveAndCall""];
""318_transfer"" [label=""transfer""];
""318_transferFrom"" -> ""318__transfer"";
""318_transfer"" -> ""318__transfer"";
""318_approveAndCall"" -> ""318_approve"";
}
"
0xecab747bebdbc679ae03349ae325399b0ad7092c.sol,VOCC_I012_20181211,"contract VOCC_I012_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I012_20181211 {
label=""VOCC_I012_20181211"";
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x06df6fdbf7629c71aee3f468ba1ab702fa0abec9.sol,CustodyStorage,contract CustodyStorage { BBODServiceRegistry public bbodServiceRegistry; mapping(address => bool) public custodiesMap; uint public custodyCounter = 0; address[] public custodiesArray; event CustodyRemoved(address indexed custody); constructor(address _serviceRegistryAddress) public { bbodServiceRegistry = BBODServiceRegistry(_serviceRegistryAddress); },1,"subgraph cluster_652_CustodyStorage {
label=""CustodyStorage"";
""652_removeCustody"" [label=""removeCustody""];
""652_custodiesMap"" [label=""custodiesMap""];
""652_constructor"" [label=""constructor""];
""652_addCustody"" [label=""addCustody""];
""652_removeCustody"" -> ""652_onlyManager"";
""652_addCustody"" -> ""652_onlyManager"";
}
"
0x5c13a9ad2601eeec34672c655d2ca994a360c4a0.sol,GalacticX,"contract GalacticX is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function GalacticX( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_619_GalacticX {
label=""GalacticX"";
""619_setPrices"" [label=""setPrices""];
""619_mintToken"" [label=""mintToken""];
""619__transfer"" [label=""_transfer""];
""619_buy"" [label=""buy""];
""619_GalacticX"" [label=""GalacticX""];
""619_freezeAccount"" [label=""freezeAccount""];
""619_sell"" [label=""sell""];
""619_mintToken"" -> ""619_onlyOwner"";
""619_GalacticX"" -> ""619_TokenERC20"";
""619_setPrices"" -> ""619_onlyOwner"";
""619_sell"" -> ""619__transfer"";
""619_freezeAccount"" -> ""619_onlyOwner"";
""619_buy"" -> ""619__transfer"";
}
"
0xce4726859edc21f0acd5acf8f852f42a1a2dd54b.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
""256_approve"" [label=""approve""];
""256_balanceOf"" [label=""balanceOf""];
""256_transferFrom"" [label=""transferFrom""];
}
"
0x17633a41ab9af8b78317a1bd92a985f8482677f9.sol,PrivateSocialPlatform,"contract PrivateSocialPlatform { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function PrivateSocialPlatform() { balanceOf[msg.sender] = 400000000 * 1000000000000000000; totalSupply = 400000000 * 1000000000000000000; name = ; symbol = ; decimals = 18; }",1,"subgraph cluster_362_PrivateSocialPlatform {
label=""PrivateSocialPlatform"";
""362_approve"" [label=""approve""];
""362_PrivateSocialPlatform"" [label=""PrivateSocialPlatform""];
""362_transfer"" [label=""transfer""];
""362_burn"" [label=""burn""];
""362_approveAndCall"" [label=""approveAndCall""];
""362_transferFrom"" [label=""transferFrom""];
""362_burnFrom"" [label=""burnFrom""];
""362_approveAndCall"" -> ""362_approve"";
}
"
0x6f328f0a7cd638cda9fed876abf71423ca109fe1.sol,TokenERC20,"contract TokenERC20 is owned { string public name; string public symbol; uint8 public decimals = 0; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event FrozenFunds(address target, bool frozen); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_529_TokenERC20 {
label=""TokenERC20"";
""529_approve"" [label=""approve""];
""529_TokenERC20"" [label=""TokenERC20""];
""529_internaltransfer"" [label=""internaltransfer""];
""529_burnFrom"" [label=""burnFrom""];
""529_burn"" [label=""burn""];
""529__transfer"" [label=""_transfer""];
""529_transferFrom"" [label=""transferFrom""];
""529_freezeAccount"" [label=""freezeAccount""];
""529_approveAndCall"" [label=""approveAndCall""];
""529_transfer"" [label=""transfer""];
""529_mintToken"" [label=""mintToken""];
""529_transferFrom"" -> ""529__transfer"";
""529_transfer"" -> ""529_internaltransfer"";
""529_freezeAccount"" -> ""529_onlyOwner"";
""529_approveAndCall"" -> ""529_approve"";
""529_mintToken"" -> ""529_onlyOwner"";
}
"
0xf084d5bc3e35e3d903260267ebd545c49c6013d0.sol,DimonCoin,contract DimonCoin { address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalSupply = 100000000 * 10**8; function name() constant returns (string) { return ; },1,"subgraph cluster_493_DimonCoin {
label=""DimonCoin"";
""493_transferFrom"" [label=""transferFrom""];
""493_DimonCoin"" [label=""DimonCoin""];
""493_distributeFUD"" [label=""distributeFUD""];
""493_approve"" [label=""approve""];
""493_getEthBalance"" [label=""getEthBalance""];
""493_transfer"" [label=""transfer""];
""493_transferOwnership"" [label=""transferOwnership""];
""493_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""493_name"" [label=""name""];
""493_allowance"" [label=""allowance""];
""493_symbol"" [label=""symbol""];
""493_balanceOf"" [label=""balanceOf""];
""493_decimals"" [label=""decimals""];
""493_transfer"" -> ""493_onlyPayloadSize"";
""493_distributeFUD"" -> ""493_onlyOwner"";
""493_distributeFUD"" -> ""493_getEthBalance"";
""493_transferFrom"" -> ""493_onlyPayloadSize"";
""493_transferOwnership"" -> ""493_onlyOwner"";
}
"
0x0e7d77bf4c468b6b626b07be5aa1c8222eb08324.sol,Proof,contract Proof { modifier onlyBagholders { require(myTokens() > 0); _; },1,"subgraph cluster_1182_Proof {
label=""Proof"";
""1182_myDividends"" [label=""myDividends""];
""1182_withdraw"" [label=""withdraw""];
""1182_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1182_dividendsOf"" [label=""dividendsOf""];
""1182_myTokens"" [label=""myTokens""];
""1182_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1182_buyPrice"" [label=""buyPrice""];
""1182_reinvest"" [label=""reinvest""];
""1182_purchaseTokens"" [label=""purchaseTokens""];
""1182_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1182_transfer"" [label=""transfer""];
""1182_sellPrice"" [label=""sellPrice""];
""1182_buy"" [label=""buy""];
""1182_balanceOf"" [label=""balanceOf""];
""1182_sqrt"" [label=""sqrt""];
""1182_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1182_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1182_totalSupply"" [label=""totalSupply""];
""1182_fallback"" [label=""fallback""];
""1182_exit"" [label=""exit""];
""1182_sell"" [label=""sell""];
""1182_buyPrice"" -> ""1182_tokensToEthereum_"";
""1182_fallback"" -> ""1182_purchaseTokens"";
""1182_withdraw"" -> ""1182_onlyStronghands"";
""1182_transfer"" -> ""1182_withdraw"";
""1182_reinvest"" -> ""1182_onlyStronghands"";
""1182_transfer"" -> ""1182_tokensToEthereum_"";
""1182_purchaseTokens"" -> ""1182_ethereumToTokens_"";
""1182_reinvest"" -> ""1182_myDividends"";
""1182_reinvest"" -> ""1182_purchaseTokens"";
""1182_myDividends"" -> ""1182_dividendsOf"";
""1182_transfer"" -> ""1182_myDividends"";
""1182_withdraw"" -> ""1182_myDividends"";
""1182_purchaseTokens"" -> ""1182_buyPrice"";
""1182_transfer"" -> ""1182_onlyBagholders"";
""1182_sell"" -> ""1182_onlyBagholders"";
""1182_sell"" -> ""1182_buyPrice"";
""1182_exit"" -> ""1182_sell"";
""1182_myTokens"" -> ""1182_balanceOf"";
""1182_sellPrice"" -> ""1182_tokensToEthereum_"";
""1182_calculateEthereumReceived"" -> ""1182_tokensToEthereum_"";
""1182_ethereumToTokens_"" -> ""1182_sqrt"";
""1182_buy"" -> ""1182_purchaseTokens"";
""1182_exit"" -> ""1182_withdraw"";
""1182_calculateTokensReceived"" -> ""1182_ethereumToTokens_"";
""1182_sell"" -> ""1182_tokensToEthereum_"";
}
"
0xf2249b2f36a21185ab97f83214cd8fc5802bb8a0.sol,BLCToken,"contract BLCToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_BLCToken {
label=""BLCToken"";
""256_transfer"" [label=""transfer""];
""256_approve"" [label=""approve""];
""256_allowance"" [label=""allowance""];
""256_balanceOf"" [label=""balanceOf""];
""256_transferFrom"" [label=""transferFrom""];
}
"
0x7830cda4a9a2e8fb28b5250d72ede4536b9ff4a0.sol,LLTokenBTB,"contract LLTokenBTB { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function LLTokenBTB( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_LLTokenBTB {
label=""LLTokenBTB"";
""380_burn"" [label=""burn""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_burnFrom"" [label=""burnFrom""];
""380_LLTokenBTB"" [label=""LLTokenBTB""];
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380__transfer"" [label=""_transfer""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0xdb5e04dc9c94bc8310e8885c85a4d0666ccaecae.sol,EtherBrand,"contract EtherBrand is ERC721 { event Birth(uint256 tokenId, bytes32 name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, bytes32 name); event Transfer(address from, address to, uint256 tokenId); struct Brand { bytes32 name; address owner; uint256 price; uint256 last_price; address approve_transfer_to; }",1,"subgraph cluster_1766_EtherBrand {
label=""EtherBrand"";
""1766_implementsERC721"" [label=""implementsERC721""];
""1766_totalSupply"" [label=""totalSupply""];
""1766_payout"" [label=""payout""];
""1766_openGame"" [label=""openGame""];
""1766_takeOwnership"" [label=""takeOwnership""];
""1766_createBrand"" [label=""createBrand""];
""1766_transfer"" [label=""transfer""];
""1766_approve"" [label=""approve""];
""1766_name"" [label=""name""];
""1766_ownerOf"" [label=""ownerOf""];
""1766_createPromoBrand"" [label=""createPromoBrand""];
""1766_transferFrom"" [label=""transferFrom""];
""1766_tokensOfOwner"" [label=""tokensOfOwner""];
""1766_getBrands"" [label=""getBrands""];
""1766_setCOO"" [label=""setCOO""];
""1766__create_brand"" [label=""_create_brand""];
""1766__transfer"" [label=""_transfer""];
""1766_setExtra"" [label=""setExtra""];
""1766_purchase"" [label=""purchase""];
""1766_setCEO"" [label=""setCEO""];
""1766_balanceOf"" [label=""balanceOf""];
""1766_getBrand"" [label=""getBrand""];
""1766_priceOf"" [label=""priceOf""];
""1766_symbol"" [label=""symbol""];
""1766_EtherBrand"" [label=""EtherBrand""];
""1766_setCFO"" [label=""setCFO""];
""1766_tokensOfOwner"" -> ""1766_totalSupply"";
""1766_tokensOfOwner"" -> ""1766_balanceOf"";
""1766_setCOO"" -> ""1766_onlyCEO"";
""1766_createBrand"" -> ""1766__create_brand"";
""1766_takeOwnership"" -> ""1766__transfer"";
""1766_setExtra"" -> ""1766_onlyCXX"";
""1766_createPromoBrand"" -> ""1766__create_brand"";
""1766_openGame"" -> ""1766_onlyCXX"";
""1766_createPromoBrand"" -> ""1766_onlyCXX"";
""1766_transfer"" -> ""1766__transfer"";
""1766_payout"" -> ""1766_onlyCEO"";
""1766_setCFO"" -> ""1766_onlyCEO"";
""1766_setCEO"" -> ""1766_onlyCEO"";
""1766_transferFrom"" -> ""1766__transfer"";
""1766_createBrand"" -> ""1766_onlyCXX"";
}
"
0xf3e6264475f63d771ca562a5176fb9a9b79acd67.sol,Celer,"contract Celer is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Celer() public { symbol = ; name = ; decimals = 8; _totalSupply = 90000000000000000; balances[0x19532C1A9588ec51fc0EB54467E08233636b1a91] = _totalSupply; emit Transfer(address(0), 0x19532C1A9588ec51fc0EB54467E08233636b1a91, _totalSupply); }",1,"subgraph cluster_543_Celer {
label=""Celer"";
""543_balanceOf"" [label=""balanceOf""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" [label=""transfer""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_Celer"" [label=""Celer""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x0305b4ccbfd603d92ca0d5eae752000273e26a60.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_TokenERC20 {
label=""TokenERC20"";
""380__transfer"" [label=""_transfer""];
""380_TokenERC20"" [label=""TokenERC20""];
""380_transfer"" [label=""transfer""];
""380_burn"" [label=""burn""];
""380_approve"" [label=""approve""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_transferFrom"" [label=""transferFrom""];
""380_burnFrom"" [label=""burnFrom""];
""380_transfer"" -> ""380__transfer"";
""380_transferFrom"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
}
"
0x50fb2403b415c4ce2c94c7bf7cbfa36145fc5cbf.sol,SCCC,"contract SCCC { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function SCCC( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_SCCC {
label=""SCCC"";
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_SCCC"" [label=""SCCC""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0x1f313e1015d362a50a16a479f857637bbb36a353.sol,LineOfTransfers,"contract LineOfTransfers { address[] public accounts; uint[] public values; uint public transferPointer = 0; address public owner; event Transfer(address to, uint amount); modifier hasBalance(uint index) { require(this.balance >= values[index]); _; }",1,"subgraph cluster_203_LineOfTransfers {
label=""LineOfTransfers"";
""203_getBalance"" [label=""getBalance""];
""203_LineOfTransfers"" [label=""LineOfTransfers""];
""203_terminate"" [label=""terminate""];
""203_addData"" [label=""addData""];
""203_fallback"" [label=""fallback""];
""203_transferTo"" [label=""transferTo""];
""203_makeTransfer"" [label=""makeTransfer""];
""203_transferTo"" -> ""203_existingIndex"";
""203_makeTransfer"" -> ""203_transferTo"";
""203_terminate"" -> ""203_onlyOwner"";
""203_addData"" -> ""203_onlyOwner"";
""203_transferTo"" -> ""203_hasBalance"";
}
"
0x1d2196207512665ad3beb7c3641f7db409dc7beb.sol,BitcoinBLUE,"contract BitcoinBLUE { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function BitcoinBLUE( ) public { totalSupply = 2100000000000000; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_349_BitcoinBLUE {
label=""BitcoinBLUE"";
""349_transferFrom"" [label=""transferFrom""];
""349_approve"" [label=""approve""];
""349_approveAndCall"" [label=""approveAndCall""];
""349_burn"" [label=""burn""];
""349__transfer"" [label=""_transfer""];
""349_BitcoinBLUE"" [label=""BitcoinBLUE""];
""349_transfer"" [label=""transfer""];
""349_burnFrom"" [label=""burnFrom""];
""349_transfer"" -> ""349__transfer"";
""349_transferFrom"" -> ""349__transfer"";
""349_approveAndCall"" -> ""349_approve"";
}
"
0x1c3a7bafd90133756ac63fee437844c47f707420.sol,ZenswapDistribution,contract ZenswapDistribution is Ownable { token public tokenReward; constructor() public { tokenReward = token(0x4fa000dF40C06FC8c7D9179661535846B7Cd4f87); },1,"subgraph cluster_161_ZenswapDistribution {
label=""ZenswapDistribution"";
""161_constructor"" [label=""constructor""];
""161_distributeToken"" [label=""distributeToken""];
""161_withdrawToken"" [label=""withdrawToken""];
""161_setTokenReward"" [label=""setTokenReward""];
""161_withdrawToken"" -> ""161_onlyOwner"";
""161_setTokenReward"" -> ""161_onlyOwner"";
""161_distributeToken"" -> ""161_onlyOwner"";
}
"
0x17987e621eb8c09f62bc10c90204238cc8cbbe94.sol,coc,"contract coc { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_coc {
label=""coc"";
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_approve"" [label=""approve""];
""361_constructor"" [label=""constructor""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x4c7c98c4d64c29ef8103b005eeccf5145cfdf8c1.sol,Savings,"contract Savings is Ownable { address public Owner; mapping (address => uint) public deposits; uint public openDate; event Initialized(address indexed Owner, uint OpenDate); event Deposit(address indexed Depositor, uint Amount); event Withdrawal(address indexed Withdrawer, uint Amount); function init(uint open) payable { Owner = msg.sender; openDate = open; Initialized(Owner, open); }",1,"subgraph cluster_162_Savings {
label=""Savings"";
""162_init"" [label=""init""];
""162_kill"" [label=""kill""];
""162_fallback"" [label=""fallback""];
""162_deposit"" [label=""deposit""];
""162_withdraw"" [label=""withdraw""];
""162_fallback"" -> ""162_deposit"";
""162_kill"" -> ""162_isOwner"";
""162_withdraw"" -> ""162_isOwner"";
}
"
0xa19118ddbabbf3d538db6a46578f3260e26b89b9.sol,Vault,contract Vault { bytes32 keyHash; address owner; constructor() public { owner = msg.sender; },1,"subgraph cluster_118_Vault {
label=""Vault"";
""118_fallback"" [label=""fallback""];
""118_constructor"" [label=""constructor""];
""118_setup"" [label=""setup""];
""118_new_hash"" [label=""new_hash""];
""118_get_owner"" [label=""get_owner""];
""118_retrieve"" [label=""retrieve""];
""118_withdraw"" [label=""withdraw""];
}
"
0x1eae15d9f4fa16f5278d02d2f8bda8b0dcd31f71.sol,ExceedIOToken,"contract ExceedIOToken { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ExceedIOToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = 1200000000000000000; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_ExceedIOToken {
label=""ExceedIOToken"";
""361_burn"" [label=""burn""];
""361_ExceedIOToken"" [label=""ExceedIOToken""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x1c9be00d799132986edcd2d099b9f28e5757677c.sol,_0xEtherToken,"contract _0xEtherToken is ERC20Interface { using SafeMath for uint; using ExtendedMath for uint; string public symbol = ; string public name = ; uint8 public decimals = 8; uint public _totalSupply = 10000000000000000; uint public maxSupplyForEra = 5000000000000000; uint public latestDifficultyPeriodStarted; uint public tokensMinted; uint public epochCount; uint public _BLOCKS_PER_READJUSTMENT = 1024; uint public _MINIMUM_TARGET = 2**16; uint public _MAXIMUM_TARGET = 2**234; uint public miningTarget = _MAXIMUM_TARGET; bytes32 public challengeNumber; uint public rewardEra; address public lastRewardTo; uint public lastRewardAmount; uint public lastRewardEthBlockNumber; mapping(bytes32 => bytes32) solutionForChallenge; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; address private owner; event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber); function _0xEtherToken() public { owner = msg.sender; latestDifficultyPeriodStarted = block.number; _startNewMiningEpoch(); }",1,"subgraph cluster_901__0xEtherToken {
label=""_0xEtherToken"";
""901_approveAndCall"" [label=""approveAndCall""];
""901_getMiningDifficulty"" [label=""getMiningDifficulty""];
""901_mint"" [label=""mint""];
""901_allowance"" [label=""allowance""];
""901_getChallengeNumber"" [label=""getChallengeNumber""];
""901__startNewMiningEpoch"" [label=""_startNewMiningEpoch""];
""901_fallback"" [label=""fallback""];
""901_totalSupply"" [label=""totalSupply""];
""901_getMintDigest"" [label=""getMintDigest""];
""901_approve"" [label=""approve""];
""901_checkMintSolution"" [label=""checkMintSolution""];
""901_transferFrom"" [label=""transferFrom""];
""901_getMiningReward"" [label=""getMiningReward""];
""901__0xEtherToken"" [label=""_0xEtherToken""];
""901__reAdjustDifficulty"" [label=""_reAdjustDifficulty""];
""901_balanceOf"" [label=""balanceOf""];
""901_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""901_transfer"" [label=""transfer""];
""901_getMiningTarget"" [label=""getMiningTarget""];
""901__0xEtherToken"" -> ""901__startNewMiningEpoch"";
""901_mint"" -> ""901__startNewMiningEpoch"";
""901_mint"" -> ""901_getMiningReward"";
""901__startNewMiningEpoch"" -> ""901__reAdjustDifficulty"";
""901__startNewMiningEpoch"" -> ""901_getMiningReward"";
}
"
0x334eec1482109bd802d9e72a447848de3bcc1063.sol,AirDropToken,"contract AirDropToken { event Transfer(address indexed from, address indexed to, uint256 tokens); event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens); string _name; string _symbol; uint8 _decimals; uint256 _totalSupply; bytes32 _rootHash; mapping (address => uint256) _balances; mapping (address => mapping(address => uint256)) _allowed; mapping (uint256 => uint256) _redeemed; function AirDropToken(string name, string symbol, uint8 decimals, bytes32 rootHash, uint256 premine) public { _name = name; _symbol = symbol; _decimals = decimals; _rootHash = rootHash; if (premine > 0) { _balances[msg.sender] = premine; _totalSupply = premine; Transfer(0, msg.sender, premine); }",1,"subgraph cluster_452_AirDropToken {
label=""AirDropToken"";
""452_decimals"" [label=""decimals""];
""452_totalSupply"" [label=""totalSupply""];
""452_balanceOf"" [label=""balanceOf""];
""452_symbol"" [label=""symbol""];
""452_transferFrom"" [label=""transferFrom""];
""452_redeemPackage"" [label=""redeemPackage""];
""452_allowance"" [label=""allowance""];
""452_name"" [label=""name""];
""452_AirDropToken"" [label=""AirDropToken""];
""452_redeemed"" [label=""redeemed""];
""452_approve"" [label=""approve""];
""452_transfer"" [label=""transfer""];
}
"
0xec8e410316bd8d45cf660fdfd1fbd9eeafe9ed6c.sol,MonsterBase,"contract MonsterBase is MonsterAccessControl { event Birth(address owner, uint256 monsterId, uint256 matronId, uint256 sireId, uint256 genes, uint16 generation); event Transfer(address from, address to, uint256 tokenId); struct Monster { uint256 genes; uint64 birthTime; uint64 cooldownEndBlock; uint32 matronId; uint32 sireId; uint32 siringWithId; uint16 cooldownIndex; uint16 generation; }",1,"subgraph cluster_6056_MonsterBase {
label=""MonsterBase"";
""6056_setSecondsPerBlock"" [label=""setSecondsPerBlock""];
""6056__transfer"" [label=""_transfer""];
""6056__createMonster"" [label=""_createMonster""];
""6056_setSecondsPerBlock"" -> ""6056_onlyCLevel"";
""6056__createMonster"" -> ""6056__transfer"";
}
"
0x35027a992a3c232dd7a350bb75004ad8567561b2.sol,EasyInvestForever,contract EasyInvestForever { mapping (address => uint256) public invested; mapping (address => uint256) public atBlock; uint256 public previousBalance = 0; uint256 public interestRate = 1; uint256 public nextBlock = block.number + 5900; function () external payable { if (block.number >= nextBlock) { uint256 currentBalance= address(this).balance; if (currentBalance < previousBalance) currentBalance = previousBalance; interestRate = (currentBalance - previousBalance) / 10e18 + 1; interestRate = (interestRate > 10) ? 10 : ((interestRate < 1) ? 1 : interestRate); previousBalance = currentBalance ; nextBlock += 5900 * ((block.number - nextBlock) / 5900 + 1); },1,"subgraph cluster_168_EasyInvestForever {
label=""EasyInvestForever"";
""168_fallback"" [label=""fallback""];
}
"
0x330b37346f0e759ad29af0221d249f5227876ac4.sol,ERC20Token,contract ERC20Token { function totalSupply() constant returns (uint supply) {},1,"subgraph cluster_74_ERC20Token {
label=""ERC20Token"";
""74_transferFrom"" [label=""transferFrom""];
""74_approve"" [label=""approve""];
""74_allowance"" [label=""allowance""];
""74_totalSupply"" [label=""totalSupply""];
""74_balanceOf"" [label=""balanceOf""];
""74_transfer"" [label=""transfer""];
}
"
0xf297a0806f24dbc96794af54c8c3691874c430f4.sol,ForestEcosphere,"contract ForestEcosphere { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_463_ForestEcosphere {
label=""ForestEcosphere"";
""463_balanceOf"" [label=""balanceOf""];
""463_transfer"" [label=""transfer""];
""463_constructor"" [label=""constructor""];
""463_setLock"" [label=""setLock""];
""463_allowance"" [label=""allowance""];
""463_transferOwnership"" [label=""transferOwnership""];
""463_transferFrom"" [label=""transferFrom""];
""463_approve"" [label=""approve""];
""463_setLock"" -> ""463_onlyOwner"";
""463_transferOwnership"" -> ""463_onlyOwner"";
}
"
0xe2fe5e7e206e7b46cad6a5146320e5b4b9a18e97.sol,metahashtoken,"contract metahashtoken { string public name; string public symbol; uint8 public decimals; uint public totalTokens; uint public finalyze; address public ownerContract; address public owner; mapping (address => uint256) public balance; mapping (address => mapping (address => uint256)) allowed; event Burn(address indexed from, uint256 value); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function totalSupply() public constant returns (uint256 _totalSupply){ return totalTokens; }",1,"subgraph cluster_387_metahashtoken {
label=""metahashtoken"";
""387_approve"" [label=""approve""];
""387_burn"" [label=""burn""];
""387_balanceOf"" [label=""balanceOf""];
""387_allowance"" [label=""allowance""];
""387_finalyzeContract"" [label=""finalyzeContract""];
""387_setContract"" [label=""setContract""];
""387_setOptions"" [label=""setOptions""];
""387_transferFrom"" [label=""transferFrom""];
""387_transfer"" [label=""transfer""];
""387_metahashtoken"" [label=""metahashtoken""];
""387_totalSupply"" [label=""totalSupply""];
}
"
0x3395465cb04b8ebd2ae2647cf37bcb2384d71d49.sol,Beneficial,contract Beneficial is Base { function Beneficial() public { },1,"subgraph cluster_402_Beneficial {
label=""Beneficial"";
""402_Beneficial"" [label=""Beneficial""];
""402__userRefund"" [label=""_userRefund""];
""402_setOfficialUrl"" [label=""setOfficialUrl""];
""402_setShareholder"" [label=""setShareholder""];
""402__userRefund"" -> ""402_unLock"";
""402__userRefund"" -> ""402_lock"";
""402_setShareholder"" -> ""402_onlyOwner"";
""402_setOfficialUrl"" -> ""402_onlyOwner"";
}
"
0x319fe5e87a37967a70c21598090c1f19ace5d1f2.sol,BICKCOIN,"contract BICKCOIN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function BICKCOIN( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_BICKCOIN {
label=""BICKCOIN"";
""380_approve"" [label=""approve""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_burnFrom"" [label=""burnFrom""];
""380_burn"" [label=""burn""];
""380_BICKCOIN"" [label=""BICKCOIN""];
""380_transfer"" [label=""transfer""];
""380_transferFrom"" [label=""transferFrom""];
""380__transfer"" [label=""_transfer""];
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0x6c4de8424a6184c830234b996f7dba9720dc9306.sol,XKnockoutHamster,contract XKnockoutHamster { using SafeMath for uint256; struct EntityStruct { bool active; bool vip; uint listPointer; uint256 date; uint256 update; uint256 exit; uint256 profit; },1,"subgraph cluster_979_XKnockoutHamster {
label=""XKnockoutHamster"";
""979_rewardDev"" [label=""rewardDev""];
""979_lastVIP"" [label=""lastVIP""];
""979_queueVIP"" [label=""queueVIP""];
""979_lastREG"" [label=""lastREG""];
""979_fallback"" [label=""fallback""];
""979_checkRemaining"" [label=""checkRemaining""];
""979_lastVIPkey"" [label=""lastVIPkey""];
""979_exitREG"" [label=""exitREG""];
""979_exitVIP"" [label=""exitVIP""];
""979_newVip"" [label=""newVip""];
""979_up"" [label=""up""];
""979_constructor"" [label=""constructor""];
""979_queueREG"" [label=""queueREG""];
""979_getVipCount"" [label=""getVipCount""];
""979_newEntity"" [label=""newEntity""];
""979_addToList"" [label=""addToList""];
""979_checkRemaining"" -> ""979_lastVIPkey"";
""979_checkRemaining"" -> ""979_rewardDev"";
""979_lastVIP"" -> ""979_lastVIPkey"";
""979_fallback"" -> ""979_addToList"";
""979_addToList"" -> ""979_lastVIPkey"";
""979_up"" -> ""979_newVip"";
""979_fallback"" -> ""979_up"";
""979_fallback"" -> ""979_checkRemaining"";
""979_addToList"" -> ""979_exitREG"";
""979_addToList"" -> ""979_newEntity"";
""979_addToList"" -> ""979_exitVIP"";
}
"
0xf354b2e5ea679a726d0348a974971cb4697bf508.sol,TokenERC20,"contract TokenERC20 { string public name = ; string public symbol = ; uint256 public decimals = 18; uint256 public totalSupply = 1000*1000*1000*10**decimals; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( ) public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_348_TokenERC20 {
label=""TokenERC20"";
""348_transferFrom"" [label=""transferFrom""];
""348__transfer"" [label=""_transfer""];
""348_TokenERC20"" [label=""TokenERC20""];
""348_approveAndCall"" [label=""approveAndCall""];
""348_burnFrom"" [label=""burnFrom""];
""348_transfer"" [label=""transfer""];
""348_burn"" [label=""burn""];
""348_approve"" [label=""approve""];
""348_transfer"" -> ""348__transfer"";
""348_approveAndCall"" -> ""348_approve"";
""348_transferFrom"" -> ""348__transfer"";
}
"
0x1c76457f18230dc1c83d3376ca663ca7312f86d8.sol,ETR,"contract ETR is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; uint public startDate; uint public bonusEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ETR() public { symbol = ; name = ; decimals = 18; _totalSupply = 400000000000000000000000000; balances[msg.sender] = _totalSupply; bonusEnds = now + 0.1 weeks; endDate = now + 500 weeks; }",1,"subgraph cluster_620_ETR {
label=""ETR"";
""620_fallback"" [label=""fallback""];
""620_totalSupply"" [label=""totalSupply""];
""620_ETR"" [label=""ETR""];
""620_approve"" [label=""approve""];
""620_transferFrom"" [label=""transferFrom""];
""620_balanceOf"" [label=""balanceOf""];
""620_allowance"" [label=""allowance""];
""620_approveAndCall"" [label=""approveAndCall""];
""620_transfer"" [label=""transfer""];
""620_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""620_fallback"" -> ""620_safeAdd"";
""620_transferAnyERC20Token"" -> ""620_onlyOwner"";
""620_transfer"" -> ""620_safeAdd"";
""620_transferFrom"" -> ""620_safeAdd"";
""620_transferFrom"" -> ""620_safeSub"";
""620_transfer"" -> ""620_safeSub"";
}
"
0xa48d3b79f43477224933e492e42f5cacf4091ecc.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_419_TokenERC20 {
label=""TokenERC20"";
""419__transfer"" [label=""_transfer""];
""419_approveAndCall"" [label=""approveAndCall""];
""419_approve"" [label=""approve""];
""419_burn"" [label=""burn""];
""419_constructor"" [label=""constructor""];
""419_transferFrom"" [label=""transferFrom""];
""419_burnFrom"" [label=""burnFrom""];
""419_transfer"" [label=""transfer""];
""419_transfer"" -> ""419__transfer"";
""419_approveAndCall"" -> ""419_approve"";
""419_transferFrom"" -> ""419__transfer"";
}
"
0x25be312868aed68afaf5ac75aed062f4d4c78ce3.sol,RAIOCO,"contract RAIOCO is Ownable { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function RAIOCO( uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_417_RAIOCO {
label=""RAIOCO"";
""417_burn"" [label=""burn""];
""417_transferFrom"" [label=""transferFrom""];
""417_approveAndCall"" [label=""approveAndCall""];
""417_transfer"" [label=""transfer""];
""417_RAIOCO"" [label=""RAIOCO""];
""417__transfer"" [label=""_transfer""];
""417_burnFrom"" [label=""burnFrom""];
""417_approve"" [label=""approve""];
""417_transfer"" -> ""417__transfer"";
""417_transferFrom"" -> ""417__transfer"";
""417_approveAndCall"" -> ""417_approve"";
}
"
0xb3ed21d5475817134c8f086d46dd1b5f6c49de0a.sol,ZethrDice,contract ZethrDice is ZethrGame { struct Bet { uint56 tokenValue; uint48 blockNumber; uint8 tier; uint8 rollUnder; uint8 numRolls; },1,"subgraph cluster_2512_ZethrDice {
label=""ZethrDice"";
""2512_calculateProfit"" [label=""calculateProfit""];
""2512_constructor"" [label=""constructor""];
""2512_getLastRollOutput"" [label=""getLastRollOutput""];
""2512_getRollResults"" [label=""getRollResults""];
""2512_getBet"" [label=""getBet""];
""2512_finishBetFrom"" [label=""finishBetFrom""];
""2512_getRollOutput"" [label=""getRollOutput""];
""2512_isBetValid"" [label=""isBetValid""];
""2512_execute"" [label=""execute""];
""2512_execute"" -> ""2512_getBet"";
""2512_execute"" -> ""2512_isNotPaused"";
""2512_isBetValid"" -> ""2512_calculateProfit"";
""2512_execute"" -> ""2512_betIsValid"";
""2512_getRollOutput"" -> ""2512_random"";
""2512_finishBetFrom"" -> ""2512_getRollResults"";
""2512_execute"" -> ""2512_finishBetFrom"";
""2512_getRollResults"" -> ""2512_random"";
""2512_getRollOutput"" -> ""2512_calculateProfit"";
""2512_execute"" -> ""2512_bankrollOnly"";
""2512_isBetValid"" -> ""2512_getMaxProfit"";
""2512_getLastRollOutput"" -> ""2512_getBet"";
""2512_constructor"" -> ""2512_constructor"";
""2512_finishBetFrom"" -> ""2512_getBet"";
""2512_getRollResults"" -> ""2512_calculateProfit"";
""2512_getLastRollOutput"" -> ""2512_getRollOutput"";
""2512_execute"" -> ""2512_hasNotBetThisBlock"";
}
"
0x00c8decc1ca373a99f1c2a341be50f03d35e03e7.sol,BurnToken,"contract BurnToken is BaseToken { event Burn(address indexed from, uint256 value); function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); balanceOf[msg.sender] -= _value; totalSupply -= _value; Burn(msg.sender, _value); return true; }",1,"subgraph cluster_299_BurnToken {
label=""BurnToken"";
""299_burn"" [label=""burn""];
""299_burnFrom"" [label=""burnFrom""];
}
"
0x77b3106417d4cf3138882cc21d4710c71183b707.sol,Brave3d,contract Brave3d { struct Stage { uint8 cnt; uint256 blocknumber; bool isFinish; uint8 deadIndex; mapping(uint8 => address) playerMap; },1,"subgraph cluster_1176_Brave3d {
label=""Brave3d"";
""1176_fallback"" [label=""fallback""];
""1176_getName"" [label=""getName""];
""1176_buyFromValue"" [label=""buyFromValue""];
""1176_getReferee"" [label=""getReferee""];
""1176_myReferee"" [label=""myReferee""];
""1176_resetStage"" [label=""resetStage""];
""1176_overStage"" [label=""overStage""];
""1176_currentStageData"" [label=""currentStageData""];
""1176_myEarnings"" [label=""myEarnings""];
""1176_setName"" [label=""setName""];
""1176_getEarnings"" [label=""getEarnings""];
""1176_getStageData"" [label=""getStageData""];
""1176_getRefereeAddress"" [label=""getRefereeAddress""];
""1176_constructor"" [label=""constructor""];
""1176_buy"" [label=""buy""];
""1176_withdraw"" [label=""withdraw""];
""1176_buyByName"" [label=""buyByName""];
""1176_forceOverStage"" [label=""forceOverStage""];
""1176_buyByAddress"" [label=""buyByAddress""];
""1176_buyByAddress"" -> ""1176_buy"";
""1176_withdraw"" -> ""1176_overStage"";
""1176_setName"" -> ""1176_isExistsOfAddressNameMap"";
""1176_withdraw"" -> ""1176_hasEarnings"";
""1176_myEarnings"" -> ""1176_hasEarnings"";
""1176_buyByName"" -> ""1176_resetStage"";
""1176_buyByName"" -> ""1176_buy"";
""1176_buyFromValue"" -> ""1176_buy"";
""1176_forceOverStage"" -> ""1176_overStage"";
""1176_buyFromValue"" -> ""1176_resetStage"";
""1176_setName"" -> ""1176_overStage"";
""1176_buyByAddress"" -> ""1176_resetStage"";
""1176_setName"" -> ""1176_isExistsOfNameAddressMap"";
""1176_buyByName"" -> ""1176_overStage"";
""1176_buyByAddress"" -> ""1176_overStage"";
""1176_buyFromValue"" -> ""1176_overStage"";
}
"
0x5046e860ff274fb8c66106b0ffb8155849fb0787.sol,JavaScriptToken,contract JavaScriptToken is ERC20 { address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalSupply = 7991996 * 10**8; function name() public constant returns (string) { return ; },1,"subgraph cluster_555_JavaScriptToken {
label=""JavaScriptToken"";
""555_symbol"" [label=""symbol""];
""555_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""555_transferFrom"" [label=""transferFrom""];
""555_allowance"" [label=""allowance""];
""555_decimals"" [label=""decimals""];
""555_transfer"" [label=""transfer""];
""555_name"" [label=""name""];
""555_getEthBalance"" [label=""getEthBalance""];
""555_JavaScriptToken"" [label=""JavaScriptToken""];
""555_balanceOf"" [label=""balanceOf""];
""555_transferOwnership"" [label=""transferOwnership""];
""555_distributeJST"" [label=""distributeJST""];
""555_finishDistribution"" [label=""finishDistribution""];
""555_approve"" [label=""approve""];
""555_finishDistribution"" -> ""555_onlyOwner"";
""555_distributeJST"" -> ""555_canDistr"";
""555_distributeJST"" -> ""555_getEthBalance"";
""555_transferFrom"" -> ""555_onlyPayloadSize"";
""555_distributeJST"" -> ""555_onlyOwner"";
""555_transferOwnership"" -> ""555_onlyOwner"";
""555_transfer"" -> ""555_onlyPayloadSize"";
}
"
0x838df5c03147f0b038c24b18af5bb5dee1ffd446.sol,Edgecoin,"contract Edgecoin is SafeMath, DateTime, EdgeSmartToken { address owner; uint private totalCollected = 0; uint private preSaleCollected = 0; uint private ICOCollected = 0; uint256 public totalTokensCap = (50000000 * 10**_decimals); uint public preSaleTokensLimit = (10000000 * 10**_decimals); uint256 public icoSaleSoftCap = (5000000 * 10**_decimals); uint public icoSaleHardCap = (25000000 * 10**_decimals); uint256 private preSaleTokenPrice = (10000 * 10**_decimals); uint256 private ICOTokenPrice = (5000 * 10**_decimals); bool ICOActive = true; uint pre_ICO_end_date = toTimestamp(2017, 12, 6, 20, 0); uint ICO_end_date = toTimestamp(2018, 1, 1, 20, 0); uint ICO_hardcoded_expiry_date = toTimestamp(2019, 1, 1, 20, 0); uint256 private tokensToBuy; mapping (address => bool) private isOwner; mapping (address => bool) private isConfirmed; mapping (uint => address) private ownersArr; uint public nonce; uint public threshold = 3; uint public pendingAmount; address public pendingAddress; uint public confirmedTimesByOwners = 0; constructor() public { owner = msg.sender; isOwner[0x512B431fc06855C8418495ffcc570D246B654f6E] = true; isOwner[0xb43d2a6fEFEF1260F772EDa4eF4341044C494b48] = true; isOwner[0x9016f6fb21F454F294A78AdeFbD700f4B6795C91] = true; ownersArr[0] = 0x512B431fc06855C8418495ffcc570D246B654f6E; ownersArr[2] = 0xb43d2a6fEFEF1260F772EDa4eF4341044C494b48; ownersArr[3] = 0x9016f6fb21F454F294A78AdeFbD700f4B6795C91; totalCollected = 366536727590000000000000; preSaleCollected = 265029930140000000000000; ICOCollected = 101506797450000000000000; }",1,"subgraph cluster_1811_Edgecoin {
label=""Edgecoin"";
""1811_getIcoTokensSold"" [label=""getIcoTokensSold""];
""1811_confirmAndExecuteWithdrawal"" [label=""confirmAndExecuteWithdrawal""];
""1811_getTotalTokensSold"" [label=""getTotalTokensSold""];
""1811_getPreSaleTokensSold"" [label=""getPreSaleTokensSold""];
""1811_setICOStatus"" [label=""setICOStatus""];
""1811_constructor"" [label=""constructor""];
""1811_createTokens"" [label=""createTokens""];
""1811_fallback"" [label=""fallback""];
""1811_initiateWithdrawal"" [label=""initiateWithdrawal""];
""1811_createTokens"" -> ""1811_safeAdd"";
""1811_initiateWithdrawal"" -> ""1811_onlyOwners"";
""1811_createTokens"" -> ""1811_safeDiv"";
""1811_setICOStatus"" -> ""1811_onlyOwner"";
""1811_createTokens"" -> ""1811_safeSub"";
""1811_confirmAndExecuteWithdrawal"" -> ""1811_onlyOwners"";
""1811_createTokens"" -> ""1811_safeMul"";
""1811_fallback"" -> ""1811_createTokens"";
}
"
0x03684715e3a614ec80d1b31b62987e0b25925999.sol,GWGFPLUS,"contract GWGFPLUS { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function GWGFPLUS( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_GWGFPLUS {
label=""GWGFPLUS"";
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_GWGFPLUS"" [label=""GWGFPLUS""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0xf317f4acfc0d70ccc79a2f24cfbbd7ebc02cfa2e.sol,CryptoStrategiesIntelligence,contract CryptoStrategiesIntelligence is StandardToken { function () public { revert(); },1,"subgraph cluster_626_CryptoStrategiesIntelligence {
label=""CryptoStrategiesIntelligence"";
""626_approveAndCallcode"" [label=""approveAndCallcode""];
""626_CryptoStrategiesIntelligence"" [label=""CryptoStrategiesIntelligence""];
""626_fallback"" [label=""fallback""];
""626_approveAndCall"" [label=""approveAndCall""];
}
"
0xf2d32cfa422a4a5b7074050651ca380eb0cf0a8c.sol,EasyStockExchange,"contract EasyStockExchange { mapping (address => uint256) invested; mapping (address => uint256) atBlock; mapping (address => uint256) forSale; mapping (address => bool) isSale; address creator; bool paidBonus; uint256 success = 1000 ether; event Deals(address indexed _seller, address indexed _buyer, uint256 _amount); event Profit(address indexed _to, uint256 _amount); constructor () public { creator = msg.sender; paidBonus = false; }",1,"subgraph cluster_410_EasyStockExchange {
label=""EasyStockExchange"";
""410_stopSaleDepo"" [label=""stopSaleDepo""];
""410_Success"" [label=""Success""];
""410_fallback"" [label=""fallback""];
""410_showUnpaidDepositPercent"" [label=""showUnpaidDepositPercent""];
""410_showDeposit"" [label=""showDeposit""];
""410_startSaleDepo"" [label=""startSaleDepo""];
""410_buyDepo"" [label=""buyDepo""];
""410_constructor"" [label=""constructor""];
""410_Success"" -> ""410_onlyOnce"";
}
"
0xdb8ea10793899f6323ecd6b2cd510c005f14b116.sol,ENYCOIN,"contract ENYCOIN { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function ENYCOIN() public { totalSupply = 500000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = 500000000 * (10 ** uint256(decimals)); name = ; symbol = ; }",1,"subgraph cluster_381_ENYCOIN {
label=""ENYCOIN"";
""381_ENYCOIN"" [label=""ENYCOIN""];
""381_burn"" [label=""burn""];
""381_transferFrom"" [label=""transferFrom""];
""381_approve"" [label=""approve""];
""381_transfer"" [label=""transfer""];
""381_burnFrom"" [label=""burnFrom""];
""381_approveAndCall"" [label=""approveAndCall""];
""381__transfer"" [label=""_transfer""];
""381_transfer"" -> ""381__transfer"";
""381_transferFrom"" -> ""381__transfer"";
""381_approveAndCall"" -> ""381_approve"";
}
"
0xf2861ad8dd602269c21eddd4d18255903cca47c7.sol,ZethrBigWheel,contract ZethrBigWheel is ZethrGame { using SafeMath for uint8; struct Bet { uint56 tokenValue; uint48 blockNumber; uint8 tier; uint bets; },1,"subgraph cluster_7292_ZethrBigWheel {
label=""ZethrBigWheel"";
""7292_finishBetFrom"" [label=""finishBetFrom""];
""7292_getPlayerBetData"" [label=""getPlayerBetData""];
""7292_execute"" [label=""execute""];
""7292_betInputToBytes"" [label=""betInputToBytes""];
""7292_ownerSetJackpotAddress"" [label=""ownerSetJackpotAddress""];
""7292_isBetValid"" [label=""isBetValid""];
""7292_getBet"" [label=""getBet""];
""7292_getSpinOutput"" [label=""getSpinOutput""];
""7292_constructor"" [label=""constructor""];
""7292_maxRandom"" [label=""maxRandom""];
""7292_uintToBetsArray"" [label=""uintToBetsArray""];
""7292_getLastSpinOutput"" [label=""getLastSpinOutput""];
""7292_getSpinResults"" [label=""getSpinResults""];
""7292_random"" [label=""random""];
""7292_getSpinOutput"" -> ""7292_random"";
""7292_constructor"" -> ""7292_constructor"";
""7292_execute"" -> ""7292_finishBetFrom"";
""7292_execute"" -> ""7292_uintToBetsArray"";
""7292_getPlayerBetData"" -> ""7292_getBet"";
""7292_execute"" -> ""7292_bankrollOnly"";
""7292_random"" -> ""7292_maxRandom"";
""7292_getSpinResults"" -> ""7292_getSpinOutput"";
""7292_finishBetFrom"" -> ""7292_getBet"";
""7292_getLastSpinOutput"" -> ""7292_getSpinOutput"";
""7292_execute"" -> ""7292_hasNotBetThisBlock"";
""7292_ownerSetJackpotAddress"" -> ""7292_ownerOnly"";
""7292_getLastSpinOutput"" -> ""7292_getBet"";
""7292_execute"" -> ""7292_isNotPaused"";
""7292_execute"" -> ""7292_getBet"";
""7292_execute"" -> ""7292_betIsValid"";
""7292_getPlayerBetData"" -> ""7292_uintToBetsArray"";
""7292_isBetValid"" -> ""7292_uintToBetsArray"";
""7292_isBetValid"" -> ""7292_getMaxProfit"";
""7292_finishBetFrom"" -> ""7292_getSpinResults"";
""7292_getSpinOutput"" -> ""7292_uintToBetsArray"";
}
"
0xc5b106f17246b2f5c0c658dbd6e8d168695806ab.sol,SIEToken,contract SIEToken { using SafeMath for uint; string public name = ; string public symbol = ; uint256 public decimals = 6; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 3000000000000000; address owner = 0x0; modifier onlyPayloadSize(uint size) { require(!(msg.data.length < size + 4)); _; },1,"subgraph cluster_481_SIEToken {
label=""SIEToken"";
""481_approve"" [label=""approve""];
""481_setName"" [label=""setName""];
""481_start"" [label=""start""];
""481_transfer"" [label=""transfer""];
""481_SIEToken"" [label=""SIEToken""];
""481_transferFrom"" [label=""transferFrom""];
""481_stop"" [label=""stop""];
""481_burn"" [label=""burn""];
""481_approve"" -> ""481_validAddress"";
""481_start"" -> ""481_isOwner"";
""481_transferFrom"" -> ""481_onlyPayloadSize"";
""481_setName"" -> ""481_isOwner"";
""481_transfer"" -> ""481_onlyPayloadSize"";
""481_transfer"" -> ""481_isRunning"";
""481_transferFrom"" -> ""481_isRunning"";
""481_transferFrom"" -> ""481_validAddress"";
""481_transfer"" -> ""481_validAddress"";
""481_stop"" -> ""481_isOwner"";
""481_approve"" -> ""481_isRunning"";
}
"
0x5b5d0fbbd75d4501e5cdc854c445fb0eabcb0afc.sol,EmrCrowdfund,"contract EmrCrowdfund is owned { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; uint256 public tokenPrice; mapping (address => uint256) public balanceOf; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event FrozenFunds(address target, bool frozen); function EmrCrowdfund( uint256 initialSupply, uint256 _tokenPrice, string tokenName, string tokenSymbol ) public { tokenPrice = _tokenPrice / 10 ** uint256(decimals); totalSupply = initialSupply * 10 ** uint256(decimals); name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_383_EmrCrowdfund {
label=""EmrCrowdfund"";
""383_withdrawAll"" [label=""withdrawAll""];
""383_freezeAccount"" [label=""freezeAccount""];
""383_EmrCrowdfund"" [label=""EmrCrowdfund""];
""383__transfer"" [label=""_transfer""];
""383_transfer"" [label=""transfer""];
""383_manualTransfer"" [label=""manualTransfer""];
""383_setPrices"" [label=""setPrices""];
""383_buy"" [label=""buy""];
""383_fallback"" [label=""fallback""];
""383_burnFrom"" [label=""burnFrom""];
""383_freezeAccount"" -> ""383_onlyOwner"";
""383_fallback"" -> ""383_buy"";
""383_setPrices"" -> ""383_onlyOwner"";
""383_burnFrom"" -> ""383_onlyOwner"";
""383_withdrawAll"" -> ""383_onlyOwner"";
""383_manualTransfer"" -> ""383_onlyOwner"";
""383_transfer"" -> ""383__transfer"";
}
"
0x0d67440946949fe293b45c52efd8a9b3d51e2522.sol,MultipleArbitrableTransaction,"contract MultipleArbitrableTransaction is IArbitrable { uint8 constant AMOUNT_OF_CHOICES = 2; uint8 constant SENDER_WINS = 1; uint8 constant RECEIVER_WINS = 2; enum Party {Sender, Receiver}",1,"subgraph cluster_1928_MultipleArbitrableTransaction {
label=""MultipleArbitrableTransaction"";
""1928_rule"" [label=""rule""];
""1928_executeTransaction"" [label=""executeTransaction""];
""1928_timeOutBySender"" [label=""timeOutBySender""];
""1928_pay"" [label=""pay""];
""1928_createTransaction"" [label=""createTransaction""];
""1928_payArbitrationFeeByReceiver"" [label=""payArbitrationFeeByReceiver""];
""1928_getCountTransactions"" [label=""getCountTransactions""];
""1928_payArbitrationFeeBySender"" [label=""payArbitrationFeeBySender""];
""1928_reimburse"" [label=""reimburse""];
""1928_executeRuling"" [label=""executeRuling""];
""1928_getTransactionIDsByAddress"" [label=""getTransactionIDsByAddress""];
""1928_timeOutByReceiver"" [label=""timeOutByReceiver""];
""1928_raiseDispute"" [label=""raiseDispute""];
""1928_appeal"" [label=""appeal""];
""1928_submitEvidence"" [label=""submitEvidence""];
""1928_constructor"" [label=""constructor""];
""1928_payArbitrationFeeBySender"" -> ""1928_raiseDispute"";
""1928_rule"" -> ""1928_executeRuling"";
""1928_timeOutBySender"" -> ""1928_executeRuling"";
""1928_timeOutByReceiver"" -> ""1928_executeRuling"";
""1928_payArbitrationFeeByReceiver"" -> ""1928_raiseDispute"";
}
"
0x40d612fe5ebef1a539e5b4a6bfcab8d09aee223f.sol,POTJ,contract POTJ { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1322_POTJ {
label=""POTJ"";
""1322_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1322_sell"" [label=""sell""];
""1322_exit"" [label=""exit""];
""1322_POTJ"" [label=""POTJ""];
""1322_purchaseTokens"" [label=""purchaseTokens""];
""1322_sqrt"" [label=""sqrt""];
""1322_setSymbol"" [label=""setSymbol""];
""1322_balanceOf"" [label=""balanceOf""];
""1322_reinvest"" [label=""reinvest""];
""1322_setAdministrator"" [label=""setAdministrator""];
""1322_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1322_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1322_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1322_buy"" [label=""buy""];
""1322_myDividends"" [label=""myDividends""];
""1322_fallback"" [label=""fallback""];
""1322_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1322_disableInitialStage"" [label=""disableInitialStage""];
""1322_myTokens"" [label=""myTokens""];
""1322_withdraw"" [label=""withdraw""];
""1322_dividendsOf"" [label=""dividendsOf""];
""1322_sellPrice"" [label=""sellPrice""];
""1322_transfer"" [label=""transfer""];
""1322_setName"" [label=""setName""];
""1322_selltokens0"" [label=""selltokens0""];
""1322_setStakingRequirement"" [label=""setStakingRequirement""];
""1322_buyPrice"" [label=""buyPrice""];
""1322_totalSupply"" [label=""totalSupply""];
""1322_buy"" -> ""1322_purchaseTokens"";
""1322_exit"" -> ""1322_sell"";
""1322_withdraw"" -> ""1322_myDividends"";
""1322_setStakingRequirement"" -> ""1322_onlyAdministrator"";
""1322_calculateEthereumReceived"" -> ""1322_tokensToEthereum_"";
""1322_setSymbol"" -> ""1322_onlyAdministrator"";
""1322_calculateTokensReceived"" -> ""1322_ethereumToTokens_"";
""1322_withdraw"" -> ""1322_onlyStronghands"";
""1322_transfer"" -> ""1322_onlyBagholders"";
""1322_myTokens"" -> ""1322_balanceOf"";
""1322_fallback"" -> ""1322_purchaseTokens"";
""1322_sell"" -> ""1322_tokensToEthereum_"";
""1322_sellPrice"" -> ""1322_tokensToEthereum_"";
""1322_disableInitialStage"" -> ""1322_onlyAdministrator"";
""1322_purchaseTokens"" -> ""1322_antiEarlyWhale"";
""1322_purchaseTokens"" -> ""1322_ethereumToTokens_"";
""1322_setName"" -> ""1322_onlyAdministrator"";
""1322_exit"" -> ""1322_withdraw"";
""1322_myDividends"" -> ""1322_dividendsOf"";
""1322_transfer"" -> ""1322_tokensToEthereum_"";
""1322_sell"" -> ""1322_onlyBagholders"";
""1322_reinvest"" -> ""1322_purchaseTokens"";
""1322_transfer"" -> ""1322_withdraw"";
""1322_buyPrice"" -> ""1322_tokensToEthereum_"";
""1322_reinvest"" -> ""1322_onlyStronghands"";
""1322_transfer"" -> ""1322_myDividends"";
""1322_ethereumToTokens_"" -> ""1322_sqrt"";
""1322_setAdministrator"" -> ""1322_onlyAdministrator"";
""1322_reinvest"" -> ""1322_myDividends"";
}
"
0x3a1237d38d0fb94513f85d61679cad7f38507242.sol,MindexcoinToken,"contract MindexcoinToken is owned, Mindexcoin { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MindexcoinToken( uint256 initialSupply, string tokenName, string tokenSymbol ) Mindexcoin(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_619_MindexcoinToken {
label=""MindexcoinToken"";
""619_MindexcoinToken"" [label=""MindexcoinToken""];
""619__transfer"" [label=""_transfer""];
""619_mintToken"" [label=""mintToken""];
""619_sell"" [label=""sell""];
""619_freezeAccount"" [label=""freezeAccount""];
""619_setPrices"" [label=""setPrices""];
""619_buy"" [label=""buy""];
""619_mintToken"" -> ""619_onlyOwner"";
""619_MindexcoinToken"" -> ""619_Mindexcoin"";
""619_buy"" -> ""619__transfer"";
""619_freezeAccount"" -> ""619_onlyOwner"";
""619_sell"" -> ""619__transfer"";
""619_setPrices"" -> ""619_onlyOwner"";
}
"
0x40489719e489782959486a04b765e1e93e5b221a.sol,SGEToken,"contract SGEToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function SGEToken() public { totalSupply = 100000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_307_SGEToken {
label=""SGEToken"";
""307_SGEToken"" [label=""SGEToken""];
""307_approve"" [label=""approve""];
""307_burnFrom"" [label=""burnFrom""];
""307__transfer"" [label=""_transfer""];
""307_transfer"" [label=""transfer""];
""307_transferFrom"" [label=""transferFrom""];
""307_burn"" [label=""burn""];
""307_transfer"" -> ""307__transfer"";
""307_transferFrom"" -> ""307__transfer"";
}
"
0x33286518eff61b810b9796cf847d84be65160147.sol,XCAToken,"contract XCAToken { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function XCAToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_XCAToken {
label=""XCAToken"";
""361_transfer"" [label=""transfer""];
""361__transfer"" [label=""_transfer""];
""361_XCAToken"" [label=""XCAToken""];
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x26fa4ab937bf885d06cfb3eabb89eeef9af1978a.sol,digithothToken,"contract digithothToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply = 500000000; uint public startDate; uint public bonusEnds; uint public presaleEnds; uint public endDate; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function digithothToken() public { symbol = ; name = ; decimals = 18; bonusEnds = now + 2 weeks; presaleEnds = now + 6 weeks; endDate = now + 10 weeks; }",1,"subgraph cluster_630_digithothToken {
label=""digithothToken"";
""630_approveAndCall"" [label=""approveAndCall""];
""630_fallback"" [label=""fallback""];
""630_totalSupply"" [label=""totalSupply""];
""630_allowance"" [label=""allowance""];
""630_approve"" [label=""approve""];
""630_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""630_digithothToken"" [label=""digithothToken""];
""630_transfer"" [label=""transfer""];
""630_balanceOf"" [label=""balanceOf""];
""630_transferFrom"" [label=""transferFrom""];
""630_transfer"" -> ""630_safeAdd"";
""630_fallback"" -> ""630_safeAdd"";
""630_transferFrom"" -> ""630_safeSub"";
""630_transferAnyERC20Token"" -> ""630_onlyOwner"";
""630_transfer"" -> ""630_safeSub"";
""630_transferFrom"" -> ""630_safeAdd"";
}
"
0x1a94fdf6d0bf45d298557789550bb2d7e359ca2d.sol,CrossChainEntertainmentTokenE,"contract CrossChainEntertainmentTokenE { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_463_CrossChainEntertainmentTokenE {
label=""CrossChainEntertainmentTokenE"";
""463_transfer"" [label=""transfer""];
""463_balanceOf"" [label=""balanceOf""];
""463_setLock"" [label=""setLock""];
""463_transferOwnership"" [label=""transferOwnership""];
""463_allowance"" [label=""allowance""];
""463_transferFrom"" [label=""transferFrom""];
""463_approve"" [label=""approve""];
""463_constructor"" [label=""constructor""];
""463_transferOwnership"" -> ""463_onlyOwner"";
""463_setLock"" -> ""463_onlyOwner"";
}
"
0x6d402b714df85f7fa3d257f1e6a86b62d099a4f3.sol,BWCToken,contract BWCToken is Ownable{ uint256 public totalSupply; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; string public constant name = ; string public constant symbol = ; uint32 public constant decimals = 4; uint constant start = 1517418000000; uint constant period = 87; uint256 public constant hardcap = 25 * 1000000 * (10 ** uint256(decimals)); bool public transferAllowed = true; bool public mintingFinished = false; modifier whenTransferAllowed() { if(msg.sender != owner){ require(transferAllowed); },1,"subgraph cluster_579_BWCToken {
label=""BWCToken"";
""579_approve"" [label=""approve""];
""579_transferFrom"" [label=""transferFrom""];
""579_balanceOf"" [label=""balanceOf""];
""579_allowTransfer"" [label=""allowTransfer""];
""579_transfer"" [label=""transfer""];
""579_finishMinting"" [label=""finishMinting""];
""579_burnFrom"" [label=""burnFrom""];
""579_allowance"" [label=""allowance""];
""579_burn"" [label=""burn""];
""579_mint"" [label=""mint""];
""579_allowTransfer"" -> ""579_onlyOwner"";
""579_finishMinting"" -> ""579_onlyOwner"";
""579_mint"" -> ""579_canMint"";
""579_mint"" -> ""579_saleIsOn"";
""579_mint"" -> ""579_onlyOwner"";
""579_mint"" -> ""579_transfer"";
""579_transferFrom"" -> ""579_whenTransferAllowed"";
""579_transfer"" -> ""579_whenTransferAllowed"";
}
"
0x6e7a61fbe11873f4c7d0983c79683aad5c0788bd.sol,ERC20Receive,contract ERC20Receive { TKN internal fallback; struct TKN { address sender; uint value; bytes data; bytes4 sig; },1,"subgraph cluster_310_ERC20Receive {
label=""ERC20Receive"";
""310_tokenFallback"" [label=""tokenFallback""];
}
"
0x72bd9e034a034796d77b080bb3d477333c651be4.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_transfer"" [label=""transfer""];
""256_transferFrom"" [label=""transferFrom""];
""256_balanceOf"" [label=""balanceOf""];
""256_allowance"" [label=""allowance""];
}
"
0xa35f8ec479ba1f8113b27636f1dfa3ae30c3eeae.sol,BaseToken,"contract BaseToken { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); function _transfer(address _from, address _to, uint _value) internal { require(_to != 0x0); require(balanceOf[_from] >= _value); require(balanceOf[_to] + _value > balanceOf[_to]); uint previousBalances = balanceOf[_from] + balanceOf[_to]; balanceOf[_from] -= _value; balanceOf[_to] += _value; assert(balanceOf[_from] + balanceOf[_to] == previousBalances); Transfer(_from, _to, _value); }",1,"subgraph cluster_199_BaseToken {
label=""BaseToken"";
""199_approve"" [label=""approve""];
""199_transfer"" [label=""transfer""];
""199_transferFrom"" [label=""transferFrom""];
""199__transfer"" [label=""_transfer""];
""199_transferFrom"" -> ""199__transfer"";
""199_transfer"" -> ""199__transfer"";
}
"
0x69b3d13bb1d2542c85f0dfc6cba4c0ba8d919ec6.sol,JYBToken,"contract JYBToken { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function JYBToken(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_JYBToken {
label=""JYBToken"";
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_JYBToken"" [label=""JYBToken""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0x41de5b7cf63c8d028daa2626d9aeaf02cad8c6c3.sol,queue,contract queue { Queue public q; struct BuyTicket { address account; uint amount; uint time; },1,"subgraph cluster_293_queue {
label=""queue"";
""293_pushQueue"" [label=""pushQueue""];
""293_peekQueue"" [label=""peekQueue""];
""293_popQueue"" [label=""popQueue""];
""293_queueSize"" [label=""queueSize""];
""293_queue"" [label=""queue""];
}
"
0x1e05efba2fd19cc48a123a9e38afa6a9ffc18f41.sol,TwentyOneMillionToken,contract TwentyOneMillionToken is PausableToken { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 8; modifier validDestination( address to ) { require(to != address(0x0)); require(to != address(this)); _; },1,"subgraph cluster_977_TwentyOneMillionToken {
label=""TwentyOneMillionToken"";
""977_emergencyERC20Drain"" [label=""emergencyERC20Drain""];
""977_burnFrom"" [label=""burnFrom""];
""977_transfer"" [label=""transfer""];
""977_mintToken"" [label=""mintToken""];
""977_transferFrom"" [label=""transferFrom""];
""977_burn"" [label=""burn""];
""977_changeAdmin"" [label=""changeAdmin""];
""977_TwentyOneMillionToken"" [label=""TwentyOneMillionToken""];
""977_transfer"" -> ""977_validDestination"";
""977_burnFrom"" -> ""977_burn"";
""977_changeAdmin"" -> ""977_onlyOwner"";
""977_transfer"" -> ""977_transfer"";
""977_burnFrom"" -> ""977_transferFrom"";
""977_emergencyERC20Drain"" -> ""977_onlyOwner"";
""977_transferFrom"" -> ""977_validDestination"";
""977_mintToken"" -> ""977_onlyOwner"";
""977_transferFrom"" -> ""977_transferFrom"";
}
"
0x025abad9e518516fdaafbdcdb9701b37fb7ef0fa.sol,StandardMintableToken,"contract StandardMintableToken is owned{ string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function StandardMintableToken( string tokenName, uint8 decimalUnits, string tokenSymbol, uint256 initialSupply ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_526_StandardMintableToken {
label=""StandardMintableToken"";
""526_transfer"" [label=""transfer""];
""526_approveAndCall"" [label=""approveAndCall""];
""526_burnFrom"" [label=""burnFrom""];
""526_freezeAccount"" [label=""freezeAccount""];
""526_StandardMintableToken"" [label=""StandardMintableToken""];
""526_transferFrom"" [label=""transferFrom""];
""526_approve"" [label=""approve""];
""526_mintToken"" [label=""mintToken""];
""526_burn"" [label=""burn""];
""526_freezeAccount"" -> ""526_onlyOwner"";
""526_approveAndCall"" -> ""526_approve"";
""526_burnFrom"" -> ""526_onlyOwner"";
""526_mintToken"" -> ""526_onlyOwner"";
}
"
0xdfb9e87ff81cb089484ef8150a21be80f6cdd401.sol,CRYPTOPOKER,"contract CRYPTOPOKER { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor() public { totalSupply = 10000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = 10000000000* (10 ** uint256(decimals)); name = ; symbol = ; }",1,"subgraph cluster_381_CRYPTOPOKER {
label=""CRYPTOPOKER"";
""381_approveAndCall"" [label=""approveAndCall""];
""381_approve"" [label=""approve""];
""381_transfer"" [label=""transfer""];
""381_transferFrom"" [label=""transferFrom""];
""381_burn"" [label=""burn""];
""381_constructor"" [label=""constructor""];
""381__transfer"" [label=""_transfer""];
""381_burnFrom"" [label=""burnFrom""];
""381_approveAndCall"" -> ""381_approve"";
""381_transferFrom"" -> ""381__transfer"";
""381_transfer"" -> ""381__transfer"";
}
"
0x27369e8f43f44c26853a46da7e6cb52d203b59ce.sol,AgileICOWithAssistance,contract AgileICOWithAssistance { using SafeMath for uint; address public operator; address public juryOperator; address public projectWallet; address public arbitrationAddress; address public juryOnlineWallet; bool public requireTokens; uint public promisedTokens; uint public etherAllowance; uint public jotAllowance; uint public commissionOnInvestmentJot; uint public commissionOnInvestmentEth; uint public percentForFuture; uint public rate = 1; address public currentCycleAddress; uint public currentCycleNumber; uint public currentFundingRound; uint public minimumInvestment; uint public lastRateChange; Token public token; struct Offer { uint etherAmount; uint tokenAmount; bool accepted; uint numberOfDeals; },1,"subgraph cluster_1897_AgileICOWithAssistance {
label=""AgileICOWithAssistance"";
""1897_acceptOffer"" [label=""acceptOffer""];
""1897_withdrawOffer"" [label=""withdrawOffer""];
""1897_setCurrentFundingRound"" [label=""setCurrentFundingRound""];
""1897_setToken"" [label=""setToken""];
""1897_addCycleAddress"" [label=""addCycleAddress""];
""1897_withdrawEther"" [label=""withdrawEther""];
""1897_constructor"" [label=""constructor""];
""1897_setRate"" [label=""setRate""];
""1897_failSafe"" [label=""failSafe""];
""1897_fallback"" [label=""fallback""];
""1897_addFundingRound"" [label=""addFundingRound""];
""1897_setNextCycle"" [label=""setNextCycle""];
""1897_sendFundsToNextCycle"" [label=""sendFundsToNextCycle""];
""1897_setNextCycle"" -> ""1897_onlyAdmin"";
""1897_addFundingRound"" -> ""1897_onlyAdmin"";
""1897_setRate"" -> ""1897_onlyAdmin"";
""1897_setCurrentFundingRound"" -> ""1897_onlyAdmin"";
""1897_sendFundsToNextCycle"" -> ""1897_onlyAdmin"";
""1897_acceptOffer"" -> ""1897_onlyAdmin"";
""1897_addCycleAddress"" -> ""1897_onlyAdmin"";
""1897_setToken"" -> ""1897_onlyAdmin"";
}
"
0x6b775965ff81583429ee39f4f6a5fb6889ab61eb.sol,ZTKDIGITALTOKEN,"contract ZTKDIGITALTOKEN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function ZTKDIGITALTOKEN() public { symbol = ; name = ; decimals = 18; _totalSupply = 5000000000000000000000000000; balances[0xb6d8f913834B34BC5c997C63C597956E42dA405a] = _totalSupply; Transfer(address(0), 0xb6d8f913834B34BC5c997C63C597956E42dA405a, _totalSupply); }",1,"subgraph cluster_543_ZTKDIGITALTOKEN {
label=""ZTKDIGITALTOKEN"";
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_ZTKDIGITALTOKEN"" [label=""ZTKDIGITALTOKEN""];
""543_allowance"" [label=""allowance""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x471407f224b99bb3347de2609bc117dad367f889.sol,BasicToken,contract BasicToken is ERC20Basic { mapping(address => uint256) balances; uint256 totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; },1,"subgraph cluster_118_BasicToken {
label=""BasicToken"";
""118_balanceOf"" [label=""balanceOf""];
""118_transfer"" [label=""transfer""];
""118_totalSupply"" [label=""totalSupply""];
}
"
0xa19118ddbabbf3d538db6a46578f3260e26b89b9.sol,Vault,contract Vault { bytes32 keyHash; address owner; constructor() public { owner = msg.sender; },1,"subgraph cluster_118_Vault {
label=""Vault"";
""118_fallback"" [label=""fallback""];
""118_constructor"" [label=""constructor""];
""118_setup"" [label=""setup""];
""118_new_hash"" [label=""new_hash""];
""118_get_owner"" [label=""get_owner""];
""118_retrieve"" [label=""retrieve""];
""118_withdraw"" [label=""withdraw""];
}
"
0xaf6dbf545cc245c00b425d02e545b6ecc1527f3d.sol,LSCKcoin,"contract LSCKcoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function LSCKcoin() public { symbol = ; name = ; decimals = 8; _totalSupply = 2100000000000000; balances[0x60f71Dd71aEa773657d75b2884e93c6bCbbADF65] = _totalSupply; Transfer(address(0), 0x60f71Dd71aEa773657d75b2884e93c6bCbbADF65, _totalSupply); }",1,"subgraph cluster_543_LSCKcoin {
label=""LSCKcoin"";
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_allowance"" [label=""allowance""];
""543_LSCKcoin"" [label=""LSCKcoin""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x048f616fcc4dd825f4a0a3b095d2ef70046b30c3.sol,Bablorub,contract Bablorub is Storage { address public owner = msg.sender; modifier withDeposit() { if (msg.value > 0) { _; },1,"subgraph cluster_543_Bablorub {
label=""Bablorub"";
""543_fallback"" [label=""fallback""];
""543_sendReferrer"" [label=""sendReferrer""];
""543_bytesToAddress"" [label=""bytesToAddress""];
""543_transfer"" [label=""transfer""];
""543_sendPayment"" [label=""sendPayment""];
""543_sendFee"" [label=""sendFee""];
""543_register"" [label=""register""];
""543_updateInvestBalance"" [label=""updateInvestBalance""];
""543_fallback"" -> ""543_register"";
""543_sendReferrer"" -> ""543_transfer"";
""543_fallback"" -> ""543_updateInvestBalance"";
""543_register"" -> ""543_withDeposit"";
""543_register"" -> ""543_bytesToAddress"";
""543_fallback"" -> ""543_sendPayment"";
""543_sendReferrer"" -> ""543_withDeposit"";
""543_sendFee"" -> ""543_transfer"";
""543_fallback"" -> ""543_sendFee"";
""543_sendPayment"" -> ""543_transfer"";
""543_sendFee"" -> ""543_withDeposit"";
""543_register"" -> ""543_transfer"";
""543_sendPayment"" -> ""543_getAvailableBalance"";
""543_updateInvestBalance"" -> ""543_withDeposit"";
""543_fallback"" -> ""543_sendReferrer"";
}
"
0x5314dd28de3f215647b64ccb3701e6098a80d080.sol,CaData,"contract CaData is ADM312, ERC721 { function CaData() public { COO = msg.sender; CTO = msg.sender; CFO = msg.sender; createCustomAtom(0,0,4,0,0,0,0); }",1,"subgraph cluster_907_CaData {
label=""CaData"";
""907_setAtomSons"" [label=""setAtomSons""];
""907_ownerAtomsCount"" [label=""ownerAtomsCount""];
""907_incRandNonce"" [label=""incRandNonce""];
""907_setAtomFath"" [label=""setAtomFath""];
""907_balanceOf"" [label=""balanceOf""];
""907_totalSupply"" [label=""totalSupply""];
""907_setAtomMoth"" [label=""setAtomMoth""];
""907_ownerOf"" [label=""ownerOf""];
""907__transfer"" [label=""_transfer""];
""907_setAtomGen"" [label=""setAtomGen""];
""907_bonusReceived"" [label=""bonusReceived""];
""907_withdrawBalance"" [label=""withdrawBalance""];
""907_setAtomDna"" [label=""setAtomDna""];
""907_fallback"" [label=""fallback""];
""907_setBonusReceived"" [label=""setBonusReceived""];
""907_pushAtom"" [label=""pushAtom""];
""907_CaData"" [label=""CaData""];
""907_atoms"" [label=""atoms""];
""907_takeOwnership"" [label=""takeOwnership""];
""907_setAtomCool"" [label=""setAtomCool""];
""907_setDnaExist"" [label=""setDnaExist""];
""907_setAtomLev"" [label=""setAtomLev""];
""907_setAtomIsReady"" [label=""setAtomIsReady""];
""907_approve"" [label=""approve""];
""907_setAtomIsRent"" [label=""setAtomIsRent""];
""907_setOwnerAtomsCount"" [label=""setOwnerAtomsCount""];
""907_setAtomIsBuy"" [label=""setAtomIsBuy""];
""907_transfer"" [label=""transfer""];
""907_setAtomOwner"" [label=""setAtomOwner""];
""907_CTO"" [label=""CTO""];
""907_atomOwner"" [label=""atomOwner""];
""907_createCustomAtom"" [label=""createCustomAtom""];
""907_kill"" [label=""kill""];
""907_incRandNonce"" -> ""907_onlyContract"";
""907_CaData"" -> ""907_createCustomAtom"";
""907_setAtomCool"" -> ""907_onlyContract"";
""907_setAtomIsReady"" -> ""907_onlyContractAdmin"";
""907_transfer"" -> ""907__transfer"";
""907_setBonusReceived"" -> ""907_onlyContractAdmin"";
""907_setAtomDna"" -> ""907_onlyAdmin"";
""907_setAtomFath"" -> ""907_onlyContract"";
""907_withdrawBalance"" -> ""907_onlyAdmin"";
""907_takeOwnership"" -> ""907_ownerOf"";
""907_setAtomLev"" -> ""907_onlyContract"";
""907_setAtomGen"" -> ""907_onlyAdmin"";
""907_setAtomIsRent"" -> ""907_onlyContract"";
""907_setAtomSons"" -> ""907_onlyContract"";
""907_setAtomIsBuy"" -> ""907_onlyContract"";
""907_setOwnerAtomsCount"" -> ""907_onlyContract"";
""907_takeOwnership"" -> ""907__transfer"";
""907_setAtomMoth"" -> ""907_onlyContract"";
""907_setDnaExist"" -> ""907_onlyContractAdmin"";
""907_setAtomOwner"" -> ""907_onlyContract"";
""907_pushAtom"" -> ""907_onlyContract"";
""907_createCustomAtom"" -> ""907_onlyAdmin"";
}
"
0x01d174f95cd17d0b5b24f1f89a35cfdb37929b30.sol,X_wallet,contract X_wallet { bytes32 keyHash; address owner; bytes32 wallet_id = 0x8b65236d01ab5274303220d4c78b02ef7685ca757275036fc104f62fbe6e10a7; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_X_wallet {
label=""X_wallet"";
""121_new_haash"" [label=""new_haash""];
""121_constructor"" [label=""constructor""];
""121_clear"" [label=""clear""];
""121_get_id"" [label=""get_id""];
""121_setup_key"" [label=""setup_key""];
""121_withdraw"" [label=""withdraw""];
""121_fallback"" [label=""fallback""];
}
"
0xd3cdc4e75750dc1e59f8342200742b6b29490e70.sol,Decurian,"contract Decurian is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Decurian() public { symbol = ; name = ; decimals = 3; _totalSupply = 50000000000; balances[0x9eEcF14e12905AA6613D247034D3e71370a61530] = _totalSupply; Transfer(address(0), 0x9eEcF14e12905AA6613D247034D3e71370a61530, _totalSupply); }",1,"subgraph cluster_543_Decurian {
label=""Decurian"";
""543_Decurian"" [label=""Decurian""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x7220e734c524e8938a1553ae18e3c68aec8bf955.sol,SmsCertifier,contract SmsCertifier is Ownable { event Confirmed(address indexed who); event Revoked(address indexed who); modifier only_certified(address _who) { require(certs[_who].active); _; },1,"subgraph cluster_280_SmsCertifier {
label=""SmsCertifier"";
""280_getAddress"" [label=""getAddress""];
""280_revoke"" [label=""revoke""];
""280_get"" [label=""get""];
""280_removeDelegate"" [label=""removeDelegate""];
""280_getUint"" [label=""getUint""];
""280_addDelegate"" [label=""addDelegate""];
""280_isDelegate"" [label=""isDelegate""];
""280_certified"" [label=""certified""];
""280_certify"" [label=""certify""];
""280_revoke"" -> ""280_only_certified"";
""280_removeDelegate"" -> ""280_onlyOwner"";
""280_revoke"" -> ""280_only_delegate"";
""280_addDelegate"" -> ""280_onlyOwner"";
""280_certify"" -> ""280_only_delegate"";
}
"
0x6fc2a418d752e4b26dc372ccd766696f9c462e30.sol,HTG,"contract HTG { string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HTG( ) public { totalSupply = 5000000000000; balanceOf[msg.sender] = 5000000000000; name = ; symbol = ; }",1,"subgraph cluster_349_HTG {
label=""HTG"";
""349_transferFrom"" [label=""transferFrom""];
""349_HTG"" [label=""HTG""];
""349_transfer"" [label=""transfer""];
""349_approve"" [label=""approve""];
""349_burnFrom"" [label=""burnFrom""];
""349_approveAndCall"" [label=""approveAndCall""];
""349_burn"" [label=""burn""];
""349__transfer"" [label=""_transfer""];
""349_approveAndCall"" -> ""349_approve"";
""349_transfer"" -> ""349__transfer"";
""349_transferFrom"" -> ""349__transfer"";
}
"
0x20d88cfc6d23d06c98d7661aded19043e9ee5aa0.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_419_TokenERC20 {
label=""TokenERC20"";
""419_transfer"" [label=""transfer""];
""419_approve"" [label=""approve""];
""419_burnFrom"" [label=""burnFrom""];
""419_transferFrom"" [label=""transferFrom""];
""419_constructor"" [label=""constructor""];
""419_burn"" [label=""burn""];
""419_approveAndCall"" [label=""approveAndCall""];
""419__transfer"" [label=""_transfer""];
""419_transfer"" -> ""419__transfer"";
""419_transferFrom"" -> ""419__transfer"";
""419_approveAndCall"" -> ""419_approve"";
}
"
0x39e743fee400a5d9b36f1167b70c10e8f06440e5.sol,TNCGroupToken,"contract TNCGroupToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_346_TNCGroupToken {
label=""TNCGroupToken"";
""346_approve"" [label=""approve""];
""346_transferFrom"" [label=""transferFrom""];
""346_transfer"" [label=""transfer""];
""346_approveAndCall"" [label=""approveAndCall""];
""346_constructor"" [label=""constructor""];
""346__transfer"" [label=""_transfer""];
""346_burn"" [label=""burn""];
""346_transferFrom"" -> ""346__transfer"";
""346_approveAndCall"" -> ""346_approve"";
""346_transfer"" -> ""346__transfer"";
}
"
0x32c62c965db5fdac0f94e6276d6884070068d4be.sol,MyAdvancedToken,contract MyAdvancedToken { address private constant OWNER = 0xb810aD480cF8e3643031bB36e6A002dC3B1d928e; function isSenderOwner(address sender) private pure returns (bool) { return sender == OWNER; },1,"subgraph cluster_337_MyAdvancedToken {
label=""MyAdvancedToken"";
""337_mint"" [label=""mint""];
""337_setCallback"" [label=""setCallback""];
""337_approve"" [label=""approve""];
""337_balanceOf"" [label=""balanceOf""];
""337_transferFrom"" [label=""transferFrom""];
""337_allowance"" [label=""allowance""];
""337_transfer"" [label=""transfer""];
""337_constructor"" [label=""constructor""];
""337_totalSupply"" [label=""totalSupply""];
""337_isSenderOwner"" [label=""isSenderOwner""];
""337_burn"" [label=""burn""];
""337_allowance"" -> ""337_whenNotPaused"";
""337_mint"" -> ""337_whenNotPaused"";
""337_burn"" -> ""337_whenNotPaused"";
""337_transfer"" -> ""337_whenNotPaused"";
""337_transferFrom"" -> ""337_whenNotPaused"";
""337_setCallback"" -> ""337_onlyOwner"";
""337_totalSupply"" -> ""337_whenNotPaused"";
""337_approve"" -> ""337_whenNotPaused"";
""337_balanceOf"" -> ""337_whenNotPaused"";
}
"
0x27718f6f920781f551082e7b61bd5d046f394400.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_balanceOf"" [label=""balanceOf""];
""256_transferFrom"" [label=""transferFrom""];
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
}
"
0xdd6eef0507f10d21f716e36d8b1aae76a4fa3f62.sol,CashexGlobalCoin,contract CashexGlobalCoin is ERC20 { address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalSupply = 100000000 * 1000000000000000000; function name() public constant returns (string) { return ; },1,"subgraph cluster_553_CashexGlobalCoin {
label=""CashexGlobalCoin"";
""553_transferFrom"" [label=""transferFrom""];
""553_finishDistribution"" [label=""finishDistribution""];
""553_allowance"" [label=""allowance""];
""553_name"" [label=""name""];
""553_distributeCXGC"" [label=""distributeCXGC""];
""553_CashexGlobalCoin"" [label=""CashexGlobalCoin""];
""553_getEthBalance"" [label=""getEthBalance""];
""553_balanceOf"" [label=""balanceOf""];
""553_symbol"" [label=""symbol""];
""553_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""553_transferOwnership"" [label=""transferOwnership""];
""553_decimals"" [label=""decimals""];
""553_approve"" [label=""approve""];
""553_transfer"" [label=""transfer""];
""553_distributeCXGC"" -> ""553_getEthBalance"";
""553_transferFrom"" -> ""553_onlyPayloadSize"";
""553_transferOwnership"" -> ""553_onlyOwner"";
""553_transfer"" -> ""553_onlyPayloadSize"";
""553_distributeCXGC"" -> ""553_canDistr"";
""553_distributeCXGC"" -> ""553_onlyOwner"";
""553_finishDistribution"" -> ""553_onlyOwner"";
}
"
0x20900587e569e3d0b2609bca6fb3469765ed0920.sol,Bitpoint,"contract Bitpoint is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Bitpoint() public { symbol = ; name = ; decimals = 18; _totalSupply = 500000000000000000000000000; balances[0x70D45684E72d382F7DF7276fa06Cf6E7F95A5dd8] = _totalSupply; Transfer(address(0), 0x70D45684E72d382F7DF7276fa06Cf6E7F95A5dd8, _totalSupply); }",1,"subgraph cluster_543_Bitpoint {
label=""Bitpoint"";
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_Bitpoint"" [label=""Bitpoint""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xa48d3b79f43477224933e492e42f5cacf4091ecc.sol,AdvancedCOINSToken,"contract AdvancedCOINSToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_660_AdvancedCOINSToken {
label=""AdvancedCOINSToken"";
""660_freezeAccount"" [label=""freezeAccount""];
""660_mintToken"" [label=""mintToken""];
""660__transfer"" [label=""_transfer""];
""660_setPrices"" [label=""setPrices""];
""660_constructor"" [label=""constructor""];
""660_buy"" [label=""buy""];
""660_sell"" [label=""sell""];
""660_mintToken"" -> ""660_onlyOwner"";
""660_sell"" -> ""660__transfer"";
""660_setPrices"" -> ""660_onlyOwner"";
""660_constructor"" -> ""660_constructor"";
""660_buy"" -> ""660__transfer"";
""660_freezeAccount"" -> ""660_onlyOwner"";
}
"
0xf0cfbff3ed2d09ff731148bc96726e77ce18d649.sol,AIMT,"contract AIMT { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_463_AIMT {
label=""AIMT"";
""463_transfer"" [label=""transfer""];
""463_setLock"" [label=""setLock""];
""463_constructor"" [label=""constructor""];
""463_balanceOf"" [label=""balanceOf""];
""463_approve"" [label=""approve""];
""463_transferFrom"" [label=""transferFrom""];
""463_transferOwnership"" [label=""transferOwnership""];
""463_allowance"" [label=""allowance""];
""463_setLock"" -> ""463_onlyOwner"";
""463_transferOwnership"" -> ""463_onlyOwner"";
}
"
0x1d9be4a5681374c54b1821d0beac3a678ad128a4.sol,StringMover,"contract StringMover { function stringToBytes32(string s) public constant returns(bytes32){ bytes32 out; assembly { out := mload(add(s, 32)) }",1,"subgraph cluster_440_StringMover {
label=""StringMover"";
""440_bytes64ToString"" [label=""bytes64ToString""];
""440_bytes32ToString"" [label=""bytes32ToString""];
""440_stringToBytes64"" [label=""stringToBytes64""];
""440_stringToBytes32"" [label=""stringToBytes32""];
}
"
0x73c9275c3a2dd84b5741fd59aebf102c91eb033f.sol,BTRS,"contract BTRS is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BTRS() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000; balances[0x6a29063DD421Bf38a18b5a7455Fb6fE5f36F7992] = _totalSupply; Transfer(address(0), 0x6a29063DD421Bf38a18b5a7455Fb6fE5f36F7992, _totalSupply); }",1,"subgraph cluster_543_BTRS {
label=""BTRS"";
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_BTRS"" [label=""BTRS""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0xe1dbbce4570b815b6ce3434bb3097dc9f453c565.sol,MobiusRED,"contract MobiusRED is DSMath, DSAuth { string public ipfsHash; string public ipfsHashType = ; MobiusRedToken public token; bool public upgraded; address public nextVersion; uint public totalSharesSold; uint public totalEarningsGenerated; uint public totalDividendsPaid; uint public totalJackpotsWon; uint public constant DEV_FRACTION = WAD / 20; uint public constant DEV_DIVISOR = 20; uint public constant RETURNS_FRACTION = 65 * 10**16; uint public constant REFERRAL_FRACTION = 1 * 10**16; uint public constant JACKPOT_SEED_FRACTION = WAD / 20; uint public constant JACKPOT_FRACTION = 15 * 10**16; uint public constant AIRDROP_FRACTION = WAD / 100; uint public constant DIVIDENDS_FRACTION = 9 * 10**16; uint public constant STARTING_SHARE_PRICE = 1 finney; uint public constant PRICE_INCREASE_PERIOD = 1 hours; uint public constant HARD_DEADLINE_DURATION = 10 days; uint public constant SOFT_DEADLINE_DURATION = 1 days; uint public constant TIME_PER_SHARE = 5 minutes; uint public jackpotSeed; uint public devBalance; uint public raisedICO; uint public unclaimedReturns; uint public constant MULTIPLIER = RAY; struct Investor { uint lastCumulativeReturnsPoints; uint shares; }",1,"subgraph cluster_2284_MobiusRED {
label=""MobiusRED"";
""2284_fallback"" [label=""fallback""];
""2284_constructor"" [label=""constructor""];
""2284__outstandingReturns"" [label=""_outstandingReturns""];
""2284_buyShares"" [label=""buyShares""];
""2284__airDrop"" [label=""_airDrop""];
""2284__purchase"" [label=""_purchase""];
""2284_upgrade"" [label=""upgrade""];
""2284__updateReturns"" [label=""_updateReturns""];
""2284_withdrawDevShare"" [label=""withdrawDevShare""];
""2284_updateMyReturns"" [label=""updateMyReturns""];
""2284__finalizeRound"" [label=""_finalizeRound""];
""2284__issueShares"" [label=""_issueShares""];
""2284_finalizeLastRound"" [label=""finalizeLastRound""];
""2284__splitRevenue"" [label=""_splitRevenue""];
""2284_finalizeAndRestart"" [label=""finalizeAndRestart""];
""2284_totalsInfo"" [label=""totalsInfo""];
""2284__disburseReturns"" [label=""_disburseReturns""];
""2284_reinvestReturns"" [label=""reinvestReturns""];
""2284_startNewRound"" [label=""startNewRound""];
""2284_setIPFSHash"" [label=""setIPFSHash""];
""2284_hasReturns"" [label=""hasReturns""];
""2284_roundInfo"" [label=""roundInfo""];
""2284_withdrawReturns"" [label=""withdrawReturns""];
""2284_investorInfo"" [label=""investorInfo""];
""2284_estimateReturns"" [label=""estimateReturns""];
""2284__outstandingReturns"" -> ""2284_mul"";
""2284__finalizeRound"" -> ""2284_add"";
""2284_finalizeAndRestart"" -> ""2284_startNewRound"";
""2284__finalizeRound"" -> ""2284_wmul"";
""2284__purchase"" -> ""2284_add"";
""2284__issueShares"" -> ""2284_add"";
""2284_reinvestReturns"" -> ""2284_min"";
""2284_upgrade"" -> ""2284_auth"";
""2284_roundInfo"" -> ""2284_wmul"";
""2284_fallback"" -> ""2284_buyShares"";
""2284_withdrawDevShare"" -> ""2284_auth"";
""2284_reinvestReturns"" -> ""2284_reinvestReturns"";
""2284__outstandingReturns"" -> ""2284_sub"";
""2284__disburseReturns"" -> ""2284_wdiv"";
""2284_reinvestReturns"" -> ""2284__purchase"";
""2284_finalizeLastRound"" -> ""2284__finalizeRound"";
""2284_buyShares"" -> ""2284__purchase"";
""2284__splitRevenue"" -> ""2284_wmul"";
""2284__issueShares"" -> ""2284_wdiv"";
""2284__updateReturns"" -> ""2284_add"";
""2284_withdrawReturns"" -> ""2284__updateReturns"";
""2284_investorInfo"" -> ""2284_estimateReturns"";
""2284__splitRevenue"" -> ""2284__disburseReturns"";
""2284_reinvestReturns"" -> ""2284__updateReturns"";
""2284__updateReturns"" -> ""2284__outstandingReturns"";
""2284__disburseReturns"" -> ""2284_add"";
""2284__airDrop"" -> ""2284_add"";
""2284_reinvestReturns"" -> ""2284_sub"";
""2284_totalsInfo"" -> ""2284_wmul"";
""2284_setIPFSHash"" -> ""2284_auth"";
""2284__purchase"" -> ""2284_mul"";
""2284_finalizeAndRestart"" -> ""2284_finalizeLastRound"";
""2284__purchase"" -> ""2284__issueShares"";
""2284__purchase"" -> ""2284__updateReturns"";
""2284_withdrawReturns"" -> ""2284_sub"";
""2284__purchase"" -> ""2284_min"";
""2284__purchase"" -> ""2284__airDrop"";
""2284__issueShares"" -> ""2284_mul"";
""2284_estimateReturns"" -> ""2284__outstandingReturns"";
""2284__purchase"" -> ""2284__splitRevenue"";
""2284__splitRevenue"" -> ""2284_add"";
""2284_estimateReturns"" -> ""2284_hasReturns"";
""2284_withdrawReturns"" -> ""2284_hasReturns"";
""2284_updateMyReturns"" -> ""2284__updateReturns"";
""2284_startNewRound"" -> ""2284__purchase"";
""2284__disburseReturns"" -> ""2284_mul"";
}
"
0x9283df9554419641f2cab66af4876f9de8526e4c.sol,KikkeliToken,contract KikkeliToken is MintableToken { string public name = ; string public symbol = ; uint8 public decimals = 18; bool public transfersEnabled = false; event TransfersEnabled(); modifier whenTransfersEnabled() { require(transfersEnabled); _; },1,"subgraph cluster_782_KikkeliToken {
label=""KikkeliToken"";
""782_enableTransfers"" [label=""enableTransfers""];
""782_approveAndCall"" [label=""approveAndCall""];
""782_transfer"" [label=""transfer""];
""782_transferFrom"" [label=""transferFrom""];
""782_transferFrom"" -> ""782_whenTransfersEnabled"";
""782_transfer"" -> ""782_transfer"";
""782_enableTransfers"" -> ""782_onlyOwner"";
""782_enableTransfers"" -> ""782_whenTransfersNotEnabled"";
""782_transferFrom"" -> ""782_transferFrom"";
""782_transfer"" -> ""782_whenTransfersEnabled"";
}
"
0x2fe3538f247b0152583f9eedf87aa922aebba6d2.sol,DistributedInvestmentOperationPlatformToken,"contract DistributedInvestmentOperationPlatformToken is Pausable, BurnableToken, Standard223Token, FrozenToken { string public name; string public symbol; uint256 public decimals; constructor (uint256 _initialSupply, string _name, string _symbol, uint256 _decimals) public { totalSupply_ = _initialSupply; name = _name; symbol = _symbol; decimals = _decimals; balances[msg.sender] = _initialSupply; emit Transfer(0x0, msg.sender, _initialSupply); }",1,"subgraph cluster_1017_DistributedInvestmentOperationPlatformToken {
label=""DistributedInvestmentOperationPlatformToken"";
""1017_transferFrom"" [label=""transferFrom""];
""1017_constructor"" [label=""constructor""];
""1017_transfer"" [label=""transfer""];
""1017_approve"" [label=""approve""];
""1017_transferFrom"" -> ""1017_requireNotFrozen"";
""1017_transferFrom"" -> ""1017_whenNotPaused"";
""1017_transfer"" -> ""1017_whenNotPaused"";
""1017_transfer"" -> ""1017_requireNotFrozen"";
""1017_approve"" -> ""1017_approve"";
""1017_transferFrom"" -> ""1017_transferFrom"";
""1017_transfer"" -> ""1017_transfer"";
""1017_approve"" -> ""1017_whenNotPaused"";
""1017_approve"" -> ""1017_requireNotFrozen"";
}
"
0x570581a21edb40d399b6d2f407a86506c4b7d663.sol,EVO2,contract EVO2 { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1289_EVO2 {
label=""EVO2"";
""1289_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1289_reinvest"" [label=""reinvest""];
""1289_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1289_totalSupply"" [label=""totalSupply""];
""1289_disableWhitelist"" [label=""disableWhitelist""];
""1289_exit"" [label=""exit""];
""1289_balanceOf"" [label=""balanceOf""];
""1289_redistribution"" [label=""redistribution""];
""1289_setSymbol"" [label=""setSymbol""];
""1289_setAdministrator"" [label=""setAdministrator""];
""1289_myTokens"" [label=""myTokens""];
""1289_activateWhitelist"" [label=""activateWhitelist""];
""1289_constructor"" [label=""constructor""];
""1289_sellPrice"" [label=""sellPrice""];
""1289_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1289_transfer"" [label=""transfer""];
""1289_setStakingRequirement"" [label=""setStakingRequirement""];
""1289_fallback"" [label=""fallback""];
""1289_withdraw"" [label=""withdraw""];
""1289_dividendsOf"" [label=""dividendsOf""];
""1289_sqrt"" [label=""sqrt""];
""1289_purchaseTokens"" [label=""purchaseTokens""];
""1289_buyPrice"" [label=""buyPrice""];
""1289_sell"" [label=""sell""];
""1289_buy"" [label=""buy""];
""1289_setName"" [label=""setName""];
""1289_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1289_myDividends"" [label=""myDividends""];
""1289_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1289_exit"" -> ""1289_withdraw"";
""1289_sellPrice"" -> ""1289_tokensToEthereum_"";
""1289_setName"" -> ""1289_onlyAdministrator"";
""1289_withdraw"" -> ""1289_myDividends"";
""1289_myTokens"" -> ""1289_balanceOf"";
""1289_exit"" -> ""1289_sell"";
""1289_ethereumToTokens_"" -> ""1289_sqrt"";
""1289_sell"" -> ""1289_onlyBagholders"";
""1289_sell"" -> ""1289_tokensToEthereum_"";
""1289_reinvest"" -> ""1289_onlyStronghands"";
""1289_purchaseTokens"" -> ""1289_ethereumToTokens_"";
""1289_reinvest"" -> ""1289_purchaseTokens"";
""1289_setAdministrator"" -> ""1289_onlyAdministrator"";
""1289_fallback"" -> ""1289_purchaseTokens"";
""1289_buy"" -> ""1289_purchaseTokens"";
""1289_reinvest"" -> ""1289_myDividends"";
""1289_calculateEthereumReceived"" -> ""1289_tokensToEthereum_"";
""1289_buyPrice"" -> ""1289_tokensToEthereum_"";
""1289_transfer"" -> ""1289_myDividends"";
""1289_setStakingRequirement"" -> ""1289_onlyAdministrator"";
""1289_transfer"" -> ""1289_onlyBagholders"";
""1289_withdraw"" -> ""1289_onlyStronghands"";
""1289_myDividends"" -> ""1289_dividendsOf"";
""1289_setSymbol"" -> ""1289_onlyAdministrator"";
""1289_calculateTokensReceived"" -> ""1289_ethereumToTokens_"";
""1289_transfer"" -> ""1289_withdraw"";
}
"
0x18b70ebdbca93c0299c87b594676dfed54a1b88d.sol,Timecoin,"contract Timecoin { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Timecoin( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_Timecoin {
label=""Timecoin"";
""361_transferFrom"" [label=""transferFrom""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_Timecoin"" [label=""Timecoin""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x1a0a9a3b8064bf8c3e8cae6e6e595695067c7df2.sol,Poge,"contract Poge { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function Poge( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_Poge {
label=""Poge"";
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" [label=""transferFrom""];
""361_Poge"" [label=""Poge""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0xd64e5b228561225b437dc38b81891c15fe98cfee.sol,NYXAccount,"contract NYXAccount { bytes32 emergencyHash; address authority; address public owner; bytes32 resqueHash; bytes32 keywordHash; bytes32[10] photoHashes; uint resqueRequestTime; uint authorityRequestTime; uint lastExpenseTime; bool public lastChanceEnabled = false; bool lastChanceUseResqueAccountAddress = true; event NYXDecentralizedIdentificationRequest(string swarmLinkPhoto, string swarmLinkVideo); enum Stages { Normal, ResqueRequested, AuthorityRequested }",1,"subgraph cluster_412_NYXAccount {
label=""NYXAccount"";
""412_fallback"" [label=""fallback""];
""412_transferByOwner"" [label=""transferByOwner""];
""412_NYXAccount"" [label=""NYXAccount""];
""412_withdrawByEmergency"" [label=""withdrawByEmergency""];
""412_lastChance"" [label=""lastChance""];
""412_toggleLastChance"" [label=""toggleLastChance""];
""412_withdrawByResque"" [label=""withdrawByResque""];
""412_setEmergencyAccount"" [label=""setEmergencyAccount""];
""412_toggleLastChance"" -> ""412_onlyByOwner"";
""412_withdrawByResque"" -> ""412_onlyByResque"";
""412_withdrawByEmergency"" -> ""412_onlyByEmergency"";
""412_transferByOwner"" -> ""412_onlyByOwner"";
""412_setEmergencyAccount"" -> ""412_onlyByAuthority"";
}
"
0x53ef8e6cb3a7c96d7aecf39b2d4d09c166269c34.sol,AUX1418,"contract AUX1418 is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 7; _totalSupply = 1000000000; balances[0x1C200fD1A330c1548e3e867e583ed2CD2fa6EA16] = _totalSupply; emit Transfer(address(0), 0x1C200fD1A330c1548e3e867e583ed2CD2fa6EA16, _totalSupply); }",1,"subgraph cluster_543_AUX1418 {
label=""AUX1418"";
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_constructor"" [label=""constructor""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x8a96115b0fdc06ab845cf7d5196c80d8ebec4130.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_balanceOf"" [label=""balanceOf""];
""256_transfer"" [label=""transfer""];
""256_approve"" [label=""approve""];
""256_transferFrom"" [label=""transferFrom""];
""256_allowance"" [label=""allowance""];
}
"
0x1db45a09efcdd8955b1c3bb855b5a8d333446bff.sol,Share,"contract Share { bool public pause; address public owner; mapping (address => uint) public holds; mapping (address => uint256) public fullfilled; mapping (address => uint256) public sellPrice; mapping (address => uint) public toSell; uint256 public watermark; event PAUSED(); event STARTED(); event SHARE_TRANSFER(address from, address to, uint amount); event INCOME(uint256); event PRICE_SET(address holder, uint shares, uint256 price, uint sell); event WITHDRAWAL(address owner, uint256 amount); event SELL_HOLDS(address from, address to, uint amount, uint256 price); event SEND_HOLDS(address from, address to, uint amount); modifier onlyOwner() { require(msg.sender == owner); _; }",1,"subgraph cluster_477_Share {
label=""Share"";
""477_setState"" [label=""setState""];
""477_withdrawal"" [label=""withdrawal""];
""477_transferHolds"" [label=""transferHolds""];
""477_fallback"" [label=""fallback""];
""477_onIncome"" [label=""onIncome""];
""477_bonus"" [label=""bonus""];
""477_Share"" [label=""Share""];
""477_transfer"" [label=""transfer""];
""477_setPrice"" [label=""setPrice""];
""477_buyFrom"" [label=""buyFrom""];
""477_withdrawal"" -> ""477_bonus"";
""477_buyFrom"" -> ""477_transferHolds"";
""477_setState"" -> ""477_onlyOwner"";
""477_setPrice"" -> ""477_notPaused"";
""477_buyFrom"" -> ""477_notPaused"";
""477_transfer"" -> ""477_notPaused"";
""477_transfer"" -> ""477_transferHolds"";
""477_withdrawal"" -> ""477_notPaused"";
""477_fallback"" -> ""477_onIncome"";
}
"
0x564a47b92be4d4070f3488112c6dd4ed757ad4c7.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value)public returns (bool success) { require(balances[msg.sender] >= _value); balances[msg.sender] -= _value; balances[_to] += _value; emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_308_MIXStandardToken {
label=""MIXStandardToken"";
""308_approveAndCall"" [label=""approveAndCall""];
""308_constructor"" [label=""constructor""];
}
"
0xc6689eb9a6d724b8d7b1d923ffd65b7005da1b62.sol,SECToken,"contract SECToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function SECToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_736_SECToken {
label=""SECToken"";
""736_setPrices"" [label=""setPrices""];
""736_freezeAccount"" [label=""freezeAccount""];
""736_buy"" [label=""buy""];
""736_SECToken"" [label=""SECToken""];
""736__transfer"" [label=""_transfer""];
""736_mintToken"" [label=""mintToken""];
""736_sell"" [label=""sell""];
""736_setPrices"" -> ""736_onlyOwner"";
""736_freezeAccount"" -> ""736_onlyOwner"";
""736_mintToken"" -> ""736_onlyOwner"";
""736_SECToken"" -> ""736_TokenERC20"";
""736_buy"" -> ""736__transfer"";
""736_sell"" -> ""736__transfer"";
}
"
0x27e06500263d6b27a3f8b7be636aabc7adc186be.sol,EasyInvestForeverNeverending,contract EasyInvestForeverNeverending { mapping (address => uint256) public invested; mapping (address => uint256) public atBlock; uint256 public previousBalance = 0; uint256 public calculatedLow = 0; uint256 public investedTotal = 0; uint256 public interestRate = 100; uint256 public nextBlock = block.number + 5900; function () external payable { investedTotal += msg.value; if (block.number >= nextBlock) { uint256 currentBalance= address(this).balance; if (currentBalance < previousBalance) currentBalance = previousBalance; else calculatedLow = 0; interestRate = (currentBalance - previousBalance) / 10e16 + 100; interestRate = (interestRate > 1000) ? 1000 : interestRate; previousBalance = currentBalance ; if (calculatedLow == 0) calculatedLow = currentBalance - (investedTotal * interestRate / 10000); uint256 currentGrowth = 0; currentBalance= address(this).balance; if (currentBalance > calculatedLow) currentGrowth = currentBalance - calculatedLow; if (interestRate == 100) interestRate = 100 * currentGrowth / (previousBalance - calculatedLow + 1); interestRate = (interestRate < 5) ? 5 : interestRate; nextBlock += 5900 * ((block.number - nextBlock) / 5900 + 1); },1,"subgraph cluster_239_EasyInvestForeverNeverending {
label=""EasyInvestForeverNeverending"";
""239_fallback"" [label=""fallback""];
}
"
0xa575aea29bcf52afa55113b3b1b9e3813143d10d.sol,TokenLingERC20,"contract TokenLingERC20 { string public name; string public symbol; uint8 public decimals = 2; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20 ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenLingERC20 {
label=""TokenLingERC20"";
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" [label=""transfer""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x17aeb3c181365bc4a386d8dc6ecbe2a96a379088.sol,CipherPlayToken,contract CipherPlayToken { string public name = ; string public symbol = ; uint256 public decimals = 6; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 24000000000000000; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_354_CipherPlayToken {
label=""CipherPlayToken"";
""354_transfer"" [label=""transfer""];
""354_approve"" [label=""approve""];
""354_burn"" [label=""burn""];
""354_CipherPlayToken"" [label=""CipherPlayToken""];
""354_stop"" [label=""stop""];
""354_setName"" [label=""setName""];
""354_transferFrom"" [label=""transferFrom""];
""354_start"" [label=""start""];
""354_approve"" -> ""354_validAddress"";
""354_transferFrom"" -> ""354_isRunning"";
""354_stop"" -> ""354_isOwner"";
""354_approve"" -> ""354_isRunning"";
""354_setName"" -> ""354_isOwner"";
""354_transferFrom"" -> ""354_validAddress"";
""354_transfer"" -> ""354_isRunning"";
""354_start"" -> ""354_isOwner"";
""354_transfer"" -> ""354_validAddress"";
}
"
0x129e719c424a7a6fbdeb7ca3d65186892d54ea8c.sol,QUIZ_GAME,"contract QUIZ_GAME { string public Question; bytes32 responseHash; address questionSender; function StartGame(string _question,string _response) public payable { if(responseHash==0x0) { responseHash = keccak256(_response); Question = _question; questionSender = msg.sender; }",1,"subgraph cluster_118_QUIZ_GAME {
label=""QUIZ_GAME"";
""118_StopGame"" [label=""StopGame""];
""118_fallback"" [label=""fallback""];
""118_StartGame"" [label=""StartGame""];
""118_Play"" [label=""Play""];
""118_NewQuestion"" [label=""NewQuestion""];
}
"
0x4933dea7ea497a87d41acc5d8048ac2d8e6cedfb.sol,OrganizeFunds,contract OrganizeFunds { struct ActivityAccount { uint credited; uint balance; uint pctx10; address addr; string name; },1,"subgraph cluster_518_OrganizeFunds {
label=""OrganizeFunds"";
""518_fallback"" [label=""fallback""];
""518_hariKari"" [label=""hariKari""];
""518_setName"" [label=""setName""];
""518_addActivityAccount"" [label=""addActivityAccount""];
""518_setWitdrawGas"" [label=""setWitdrawGas""];
""518_getActivityAccountInfo"" [label=""getActivityAccountInfo""];
""518_reset"" [label=""reset""];
""518_getTotalPctx10"" [label=""getTotalPctx10""];
""518_distribute"" [label=""distribute""];
""518_withdraw"" [label=""withdraw""];
""518_lock"" [label=""lock""];
""518_OrganizeFunds"" [label=""OrganizeFunds""];
""518_lock"" -> ""518_ownerOnly"";
""518_setWitdrawGas"" -> ""518_ownerOnly"";
""518_addActivityAccount"" -> ""518_ownerOnly"";
""518_hariKari"" -> ""518_unlockedOnly"";
""518_reset"" -> ""518_unlockedOnly"";
""518_addActivityAccount"" -> ""518_unlockedOnly"";
""518_setName"" -> ""518_ownerOnly"";
""518_reset"" -> ""518_ownerOnly"";
""518_hariKari"" -> ""518_ownerOnly"";
}
"
0x1ebda9b505ad2c6ccee86bfc18f58035dcfdc26a.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_allowance"" [label=""allowance""];
""256_balanceOf"" [label=""balanceOf""];
""256_transferFrom"" [label=""transferFrom""];
""256_transfer"" [label=""transfer""];
}
"
0x70e6718a025dfaa44159f1c9a9cc20f575f3cdf0.sol,Payreum,contract Payreum is ERC20Standard { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant maxSupply = 500000000 * (10 ** uint256(decimals)); uint256 public PYRToEth; uint256 public ethInWei; address public devWallet; function Payreum () public { totalSupply = maxSupply; balances[msg.sender] = maxSupply; PYRToEth = 200000; devWallet = msg.sender; },1,"subgraph cluster_600_Payreum {
label=""Payreum"";
""600_fallback"" [label=""fallback""];
""600_Payreum"" [label=""Payreum""];
}
"
0x6cabf1b590ee8daa30a1c76ff5dd21284d8681d8.sol,HCHToken,"contract HCHToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HCHToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; owner = msg.sender; }",1,"subgraph cluster_413_HCHToken {
label=""HCHToken"";
""413_transfer"" [label=""transfer""];
""413__transfer"" [label=""_transfer""];
""413_mintToken"" [label=""mintToken""];
""413_transferFrom"" [label=""transferFrom""];
""413_HCHToken"" [label=""HCHToken""];
""413_burnFrom"" [label=""burnFrom""];
""413_approve"" [label=""approve""];
""413_burn"" [label=""burn""];
""413_approveAndCall"" [label=""approveAndCall""];
""413_transfer"" -> ""413__transfer"";
""413_approveAndCall"" -> ""413_approve"";
""413_transferFrom"" -> ""413__transfer"";
}
"
0xc59cb23295e2deeb66bd090acb6b02be8d30a11f.sol,Utils,contract Utils { function Utils() { },1,"subgraph cluster_106_Utils {
label=""Utils"";
""106_safeSub"" [label=""safeSub""];
""106_safeMul"" [label=""safeMul""];
""106_safeAdd"" [label=""safeAdd""];
""106_Utils"" [label=""Utils""];
}
"
0x6d358ad6eca1461f092659797e8dceb2d5150fa6.sol,EthereumPrivate,"contract EthereumPrivate { string public name=; string public symbol=; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function EthereumPrivate() public { totalSupply = 960000000000; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_363_EthereumPrivate {
label=""EthereumPrivate"";
""363_transferFrom"" [label=""transferFrom""];
""363__transfer"" [label=""_transfer""];
""363_EthereumPrivate"" [label=""EthereumPrivate""];
""363_approve"" [label=""approve""];
""363_balanceOf"" [label=""balanceOf""];
""363_burn"" [label=""burn""];
""363_transfer"" [label=""transfer""];
""363_burnFrom"" [label=""burnFrom""];
""363_approveAndCall"" [label=""approveAndCall""];
""363_transfer"" -> ""363__transfer"";
""363_approveAndCall"" -> ""363_approve"";
""363_transferFrom"" -> ""363__transfer"";
}
"
0x34770f06ae8a9a7b44fd8d636af6a3fec2a58b98.sol,StdToken,"contract StdToken is Token { mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; uint public supply; function _transfer(address _from, address _to, uint _value) internal { require(_to != 0x0); require(balances[_from] >= _value); require(balances[_to] + _value >= balances[_to]); uint previousBalances = balances[_from] + balances[_to]; balances[_from] -= _value; balances[_to] += _value; emit Transfer(_from, _to, _value); assert(balances[_from] + balances[_to] == previousBalances); }",1,"subgraph cluster_392_StdToken {
label=""StdToken"";
""392_balanceOf"" [label=""balanceOf""];
""392_transferFrom"" [label=""transferFrom""];
""392__transfer"" [label=""_transfer""];
""392__burn"" [label=""_burn""];
""392_totalSupply"" [label=""totalSupply""];
""392_transfer"" [label=""transfer""];
""392_transferTo"" [label=""transferTo""];
""392_allowance"" [label=""allowance""];
""392_approve"" [label=""approve""];
""392_transferTo"" -> ""392__transfer"";
""392_transferFrom"" -> ""392__transfer"";
""392_transfer"" -> ""392__transfer"";
}
"
0x033d46d15ad9b5653cbe61be97371023acb11f94.sol,OChain,"contract OChain { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function OChain() { balanceOf[msg.sender] = 100000000 * 1000000000000000000; totalSupply = 100000000 * 1000000000000000000; name = ; symbol = ; decimals = 18; }",1,"subgraph cluster_362_OChain {
label=""OChain"";
""362_burn"" [label=""burn""];
""362_approve"" [label=""approve""];
""362_burnFrom"" [label=""burnFrom""];
""362_OChain"" [label=""OChain""];
""362_approveAndCall"" [label=""approveAndCall""];
""362_transferFrom"" [label=""transferFrom""];
""362_transfer"" [label=""transfer""];
""362_approveAndCall"" -> ""362_approve"";
}
"
0x17e65b46ad1ebfb8f9cacde8e274b377831a1253.sol,BigbomToken,"contract BigbomToken is StandardToken, Ownable { string public constant name = ; string public constant symbol = ; uint public constant decimals = 18; uint public totalSupply = 2000000000 * 1e18; uint public constant founderAmount = 200000000 * 1e18; uint public constant coreStaffAmount = 60000000 * 1e18; uint public constant advisorAmount = 140000000 * 1e18; uint public constant networkGrowthAmount = 600000000 * 1e18; uint public constant reserveAmount = 635000000 * 1e18; uint public constant bountyAmount = 40000000 * 1e18; uint public constant publicSaleAmount = 275000000 * 1e18; address public bbFounderCoreStaffWallet ; address public bbAdvisorWallet; address public bbAirdropWallet; address public bbNetworkGrowthWallet; address public bbReserveWallet; address public bbPublicSaleWallet; uint public saleStartTime; uint public saleEndTime; address public tokenSaleContract; BigbomPrivateSaleList public privateSaleList; mapping (address => bool) public frozenAccount; mapping (address => uint) public frozenTime; mapping (address => uint) public maxAllowedAmount; event FrozenFunds(address target, bool frozen, uint _seconds); function checkMaxAllowed(address target) public constant returns (uint) { var maxAmount = balances[target]; if(target == bbFounderCoreStaffWallet){ maxAmount = 10000000 * 1e18; }",1,"subgraph cluster_1444_BigbomToken {
label=""BigbomToken"";
""1444_setPrivateList"" [label=""setPrivateList""];
""1444_transferPrivateSale"" [label=""transferPrivateSale""];
""1444_selfFreeze"" [label=""selfFreeze""];
""1444_checkMaxAllowed"" [label=""checkMaxAllowed""];
""1444_setTimeSale"" [label=""setTimeSale""];
""1444_burn"" [label=""burn""];
""1444_transferFrom"" [label=""transferFrom""];
""1444_setTokenSaleContract"" [label=""setTokenSaleContract""];
""1444_burnFrom"" [label=""burnFrom""];
""1444_BigbomToken"" [label=""BigbomToken""];
""1444_transfer"" [label=""transfer""];
""1444_freezeAccount"" [label=""freezeAccount""];
""1444_emergencyERC20Drain"" [label=""emergencyERC20Drain""];
""1444_transfer"" -> ""1444_checkMaxAllowed"";
""1444_burnFrom"" -> ""1444_onlyWhenTransferEnabled"";
""1444_emergencyERC20Drain"" -> ""1444_onlyOwner"";
""1444_transferFrom"" -> ""1444_checkMaxAllowed"";
""1444_freezeAccount"" -> ""1444_onlyOwner"";
""1444_transferFrom"" -> ""1444_validDestination"";
""1444_burn"" -> ""1444_onlyWhenTransferEnabled"";
""1444_transferFrom"" -> ""1444_selfFreeze"";
""1444_transferFrom"" -> ""1444_onlyWhenTransferEnabled"";
""1444_transferFrom"" -> ""1444_transferFrom"";
""1444_transfer"" -> ""1444_validDestination"";
""1444_transferFrom"" -> ""1444_transfer"";
""1444_burnFrom"" -> ""1444_transferFrom"";
""1444_burnFrom"" -> ""1444_burn"";
""1444_setTimeSale"" -> ""1444_onlyOwner"";
""1444_transferPrivateSale"" -> ""1444_transfer"";
""1444_transfer"" -> ""1444_validFrom"";
""1444_setTokenSaleContract"" -> ""1444_onlyOwner"";
""1444_transfer"" -> ""1444_transfer"";
""1444_transfer"" -> ""1444_selfFreeze"";
""1444_BigbomToken"" -> ""1444_transferOwnership"";
""1444_setPrivateList"" -> ""1444_onlyOwner"";
""1444_transferPrivateSale"" -> ""1444_onlyOwner"";
""1444_transferPrivateSale"" -> ""1444_onlyPrivateListEnabled"";
""1444_transfer"" -> ""1444_onlyWhenTransferEnabled"";
""1444_transferFrom"" -> ""1444_validFrom"";
}
"
0x5573cb8589a2ed0ca4029202739bfc251932201f.sol,STRATCO,"contract STRATCO { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_STRATCO {
label=""STRATCO"";
""380_burnFrom"" [label=""burnFrom""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_constructor"" [label=""constructor""];
""380_transferFrom"" [label=""transferFrom""];
""380_burn"" [label=""burn""];
""380_approve"" [label=""approve""];
""380_transfer"" [label=""transfer""];
""380__transfer"" [label=""_transfer""];
""380_transfer"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transferFrom"" -> ""380__transfer"";
}
"
0x036a98e540599dae4a9778335ffabe6ca01ca705.sol,cwallet,contract cwallet { bytes32 keyHash; address owner; bytes32 wallet_id = 0x41691d0d4fa9d63aa73129998c6d22eda519ff3623f1881c379406b1650e4823; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_cwallet {
label=""cwallet"";
""121_clear"" [label=""clear""];
""121_constructor"" [label=""constructor""];
""121_update_new_hash"" [label=""update_new_hash""];
""121_setup_key"" [label=""setup_key""];
""121_withdraw"" [label=""withdraw""];
""121_fallback"" [label=""fallback""];
""121_get_id"" [label=""get_id""];
}
"
0xc729c50c19d3b2f0049c9eec809b5cc175dbf489.sol,PDGToken,"contract PDGToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function PDGToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_PDGToken {
label=""PDGToken"";
""361__transfer"" [label=""_transfer""];
""361_transfer"" [label=""transfer""];
""361_PDGToken"" [label=""PDGToken""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x4c7c98c4d64c29ef8103b005eeccf5145cfdf8c1.sol,Savings,"contract Savings is Ownable { address public Owner; mapping (address => uint) public deposits; uint public openDate; event Initialized(address indexed Owner, uint OpenDate); event Deposit(address indexed Depositor, uint Amount); event Withdrawal(address indexed Withdrawer, uint Amount); function init(uint open) payable { Owner = msg.sender; openDate = open; Initialized(Owner, open); }",1,"subgraph cluster_162_Savings {
label=""Savings"";
""162_init"" [label=""init""];
""162_kill"" [label=""kill""];
""162_fallback"" [label=""fallback""];
""162_deposit"" [label=""deposit""];
""162_withdraw"" [label=""withdraw""];
""162_fallback"" -> ""162_deposit"";
""162_kill"" -> ""162_isOwner"";
""162_withdraw"" -> ""162_isOwner"";
}
"
0x35e44051799bd7cea091c4fad2cba9b37e364c5b.sol,myPreICO,contract myPreICO is Ownable { uint public ETHRaised; uint public soft_cap = 1 ether; uint public hard_cap = 10 ether; address public owner = 0x0; uint public end_date; address[] public holders; mapping (address => uint) public holder_balance; function myICO() public { owner = msg.sender; end_date = now + 90 days; },1,"subgraph cluster_168_myPreICO {
label=""myPreICO"";
""168_withdraw"" [label=""withdraw""];
""168_fallback"" [label=""fallback""];
""168_getFunds"" [label=""getFunds""];
""168_sendFunds"" [label=""sendFunds""];
""168_myICO"" [label=""myICO""];
""168_sendFunds"" -> ""168_onlyOwner"";
}
"
0xeae08961bf8bfe92879b1455c96893e313c8d858.sol,WarToken,"contract WarToken is ERC721, AccessAdmin { struct Fashion { uint16 protoId; uint16 quality; uint16 pos; uint16 health; uint16 atkMin; uint16 atkMax; uint16 defence; uint16 crit; uint16 isPercent; uint16 attrExt1; uint16 attrExt2; uint16 attrExt3; }",1,"subgraph cluster_2205_WarToken {
label=""WarToken"";
""2205_safeTransferByContract"" [label=""safeTransferByContract""];
""2205_setApprovalForAll"" [label=""setApprovalForAll""];
""2205_getFashion"" [label=""getFashion""];
""2205_safeTransferFrom"" [label=""safeTransferFrom""];
""2205__changeAttrByIndex"" [label=""_changeAttrByIndex""];
""2205__transfer"" [label=""_transfer""];
""2205_setActionContract"" [label=""setActionContract""];
""2205_getOwnFashions"" [label=""getOwnFashions""];
""2205_getFashionsAttrs"" [label=""getFashionsAttrs""];
""2205_transferFrom"" [label=""transferFrom""];
""2205_WarToken"" [label=""WarToken""];
""2205_ownerOf"" [label=""ownerOf""];
""2205_balanceOf"" [label=""balanceOf""];
""2205_totalSupply"" [label=""totalSupply""];
""2205_getActionContract"" [label=""getActionContract""];
""2205_name"" [label=""name""];
""2205_supportsInterface"" [label=""supportsInterface""];
""2205_destroyFashion"" [label=""destroyFashion""];
""2205__safeTransferFrom"" [label=""_safeTransferFrom""];
""2205_approve"" [label=""approve""];
""2205_symbol"" [label=""symbol""];
""2205_changeFashionAttr"" [label=""changeFashionAttr""];
""2205_createFashion"" [label=""createFashion""];
""2205_getApproved"" [label=""getApproved""];
""2205_isApprovedForAll"" [label=""isApprovedForAll""];
""2205__safeTransferFrom"" -> ""2205_canTransfer"";
""2205_destroyFashion"" -> ""2205_whenNotPaused"";
""2205_transferFrom"" -> ""2205_isValidToken"";
""2205_safeTransferByContract"" -> ""2205__transfer"";
""2205_createFashion"" -> ""2205__transfer"";
""2205_setActionContract"" -> ""2205_onlyAdmin"";
""2205_transferFrom"" -> ""2205_canTransfer"";
""2205_transferFrom"" -> ""2205__transfer"";
""2205_changeFashionAttr"" -> ""2205__changeAttrByIndex"";
""2205_getApproved"" -> ""2205_isValidToken"";
""2205_getFashion"" -> ""2205_isValidToken"";
""2205_getActionContract"" -> ""2205_onlyAdmin"";
""2205_safeTransferFrom"" -> ""2205__safeTransferFrom"";
""2205_destroyFashion"" -> ""2205_isValidToken"";
""2205_setApprovalForAll"" -> ""2205_whenNotPaused"";
""2205_changeFashionAttr"" -> ""2205_isValidToken"";
""2205__safeTransferFrom"" -> ""2205__transfer"";
""2205__safeTransferFrom"" -> ""2205_isValidToken"";
""2205_createFashion"" -> ""2205_whenNotPaused"";
""2205_changeFashionAttr"" -> ""2205_whenNotPaused"";
""2205_safeTransferFrom"" -> ""2205_whenNotPaused"";
""2205_transferFrom"" -> ""2205_whenNotPaused"";
""2205_safeTransferByContract"" -> ""2205_whenNotPaused"";
""2205_approve"" -> ""2205_whenNotPaused"";
}
"
0x56c388df7f4e0947014705f7d61bdc6ebb128ad0.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_264_StandardToken {
label=""StandardToken"";
""264_allowance"" [label=""allowance""];
""264_balanceOf"" [label=""balanceOf""];
""264_approve"" [label=""approve""];
""264_transfer"" [label=""transfer""];
""264_transferFrom"" [label=""transferFrom""];
}
"
0xd6f79a8ba756cc7babdc04c6715d65af297ce50d.sol,SimpleEscrow,contract SimpleEscrow { uint public PERIOD = 21 days; uint public SAFE_PERIOD = 5 days; address public developerWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770; address public customerWallet; uint public started; uint public orderLastDate; uint public safeLastDate; address public owner; function SimpleEscrow() public { owner = msg.sender; },1,"subgraph cluster_163_SimpleEscrow {
label=""SimpleEscrow"";
""163_SimpleEscrow"" [label=""SimpleEscrow""];
""163_completeOrderBySafePeriod"" [label=""completeOrderBySafePeriod""];
""163_completed"" [label=""completed""];
""163_failedByDeveloper"" [label=""failedByDeveloper""];
""163_orderNotAccepted"" [label=""orderNotAccepted""];
""163_fallback"" [label=""fallback""];
""163_setDeveloperWallet"" [label=""setDeveloperWallet""];
""163_failedByDeveloper"" -> ""163_onlyDeveloper"";
""163_orderNotAccepted"" -> ""163_onlyCustomer"";
""163_completeOrderBySafePeriod"" -> ""163_onlyDeveloper"";
""163_completed"" -> ""163_onlyCustomer"";
}
"
0x53088104b7a9a04e52d8b884571634c815bce666.sol,ALONY_HETZ_20230515,"contract ALONY_HETZ_20230515 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 15815873703135800000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_ALONY_HETZ_20230515 {
label=""ALONY_HETZ_20230515"";
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
}
"
0xa52d89b535b68e955a516a49c5fa3f6f501ead6e.sol,BasicToken,"contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; function transfer(address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_202_BasicToken {
label=""BasicToken"";
""202_balanceOf"" [label=""balanceOf""];
""202_transfer"" [label=""transfer""];
}
"
0x5b25b78751126e3a8feffe784d4e2b456c1071a9.sol,GESCrowdsale,contract GESCrowdsale is Ownable { StandardToken public token; constructor(StandardToken _token) public { require(_token != address(0)); token = _token; },1,"subgraph cluster_229_GESCrowdsale {
label=""GESCrowdsale"";
""229_constructor"" [label=""constructor""];
""229_setTokenAddress"" [label=""setTokenAddress""];
""229_sendTokensToRecipients"" [label=""sendTokensToRecipients""];
""229_sendTokensToRecipients"" -> ""229_onlyOwner"";
""229_setTokenAddress"" -> ""229_onlyOwner"";
}
"
0x6f328f0a7cd638cda9fed876abf71423ca109fe1.sol,TokenERC20,"contract TokenERC20 is owned { string public name; string public symbol; uint8 public decimals = 0; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event FrozenFunds(address target, bool frozen); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_529_TokenERC20 {
label=""TokenERC20"";
""529_approve"" [label=""approve""];
""529_TokenERC20"" [label=""TokenERC20""];
""529_internaltransfer"" [label=""internaltransfer""];
""529_burnFrom"" [label=""burnFrom""];
""529_burn"" [label=""burn""];
""529__transfer"" [label=""_transfer""];
""529_transferFrom"" [label=""transferFrom""];
""529_freezeAccount"" [label=""freezeAccount""];
""529_approveAndCall"" [label=""approveAndCall""];
""529_transfer"" [label=""transfer""];
""529_mintToken"" [label=""mintToken""];
""529_transferFrom"" -> ""529__transfer"";
""529_transfer"" -> ""529_internaltransfer"";
""529_freezeAccount"" -> ""529_onlyOwner"";
""529_approveAndCall"" -> ""529_approve"";
""529_mintToken"" -> ""529_onlyOwner"";
}
"
0x20900587e569e3d0b2609bca6fb3469765ed0920.sol,Bitpoint,"contract Bitpoint is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Bitpoint() public { symbol = ; name = ; decimals = 18; _totalSupply = 500000000000000000000000000; balances[0x70D45684E72d382F7DF7276fa06Cf6E7F95A5dd8] = _totalSupply; Transfer(address(0), 0x70D45684E72d382F7DF7276fa06Cf6E7F95A5dd8, _totalSupply); }",1,"subgraph cluster_543_Bitpoint {
label=""Bitpoint"";
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_Bitpoint"" [label=""Bitpoint""];
""543_approve"" [label=""approve""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xdb5e04dc9c94bc8310e8885c85a4d0666ccaecae.sol,EtherBrand,"contract EtherBrand is ERC721 { event Birth(uint256 tokenId, bytes32 name, address owner); event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, bytes32 name); event Transfer(address from, address to, uint256 tokenId); struct Brand { bytes32 name; address owner; uint256 price; uint256 last_price; address approve_transfer_to; }",1,"subgraph cluster_1766_EtherBrand {
label=""EtherBrand"";
""1766_implementsERC721"" [label=""implementsERC721""];
""1766_totalSupply"" [label=""totalSupply""];
""1766_payout"" [label=""payout""];
""1766_openGame"" [label=""openGame""];
""1766_takeOwnership"" [label=""takeOwnership""];
""1766_createBrand"" [label=""createBrand""];
""1766_transfer"" [label=""transfer""];
""1766_approve"" [label=""approve""];
""1766_name"" [label=""name""];
""1766_ownerOf"" [label=""ownerOf""];
""1766_createPromoBrand"" [label=""createPromoBrand""];
""1766_transferFrom"" [label=""transferFrom""];
""1766_tokensOfOwner"" [label=""tokensOfOwner""];
""1766_getBrands"" [label=""getBrands""];
""1766_setCOO"" [label=""setCOO""];
""1766__create_brand"" [label=""_create_brand""];
""1766__transfer"" [label=""_transfer""];
""1766_setExtra"" [label=""setExtra""];
""1766_purchase"" [label=""purchase""];
""1766_setCEO"" [label=""setCEO""];
""1766_balanceOf"" [label=""balanceOf""];
""1766_getBrand"" [label=""getBrand""];
""1766_priceOf"" [label=""priceOf""];
""1766_symbol"" [label=""symbol""];
""1766_EtherBrand"" [label=""EtherBrand""];
""1766_setCFO"" [label=""setCFO""];
""1766_tokensOfOwner"" -> ""1766_totalSupply"";
""1766_tokensOfOwner"" -> ""1766_balanceOf"";
""1766_setCOO"" -> ""1766_onlyCEO"";
""1766_createBrand"" -> ""1766__create_brand"";
""1766_takeOwnership"" -> ""1766__transfer"";
""1766_setExtra"" -> ""1766_onlyCXX"";
""1766_createPromoBrand"" -> ""1766__create_brand"";
""1766_openGame"" -> ""1766_onlyCXX"";
""1766_createPromoBrand"" -> ""1766_onlyCXX"";
""1766_transfer"" -> ""1766__transfer"";
""1766_payout"" -> ""1766_onlyCEO"";
""1766_setCFO"" -> ""1766_onlyCEO"";
""1766_setCEO"" -> ""1766_onlyCEO"";
""1766_transferFrom"" -> ""1766__transfer"";
""1766_createBrand"" -> ""1766_onlyCXX"";
}
"
0xeae08961bf8bfe92879b1455c96893e313c8d858.sol,ActionAuction,"contract ActionAuction is AccessNoWithdraw { using SafeMath for uint256; event AuctionCreate(uint256 indexed index, address indexed seller, uint256 tokenId); event AuctionSold(uint256 indexed index, address indexed seller, address indexed buyer, uint256 tokenId, uint256 price); event AuctionCancel(uint256 indexed index, address indexed seller, uint256 tokenId); event AuctionPriceChange(uint256 indexed index, address indexed seller, uint256 tokenId, uint64 newGwei); struct Auction { address seller; uint64 tokenId; uint64 price; uint64 tmStart; uint64 tmSell; }",1,"subgraph cluster_3893_ActionAuction {
label=""ActionAuction"";
""3893_getStartIndex"" [label=""getStartIndex""];
""3893_setPrizePool"" [label=""setPrizePool""];
""3893_setDataEquip"" [label=""setDataEquip""];
""3893_getAuctionTotal"" [label=""getAuctionTotal""];
""3893__shareDevCut"" [label=""_shareDevCut""];
""3893__getAuctionIdArray"" [label=""_getAuctionIdArray""];
""3893_changePrice"" [label=""changePrice""];
""3893_cancelAuction"" [label=""cancelAuction""];
""3893_bid"" [label=""bid""];
""3893_depositBonus"" [label=""depositBonus""];
""3893_getAuctionIdArray"" [label=""getAuctionIdArray""];
""3893_getAuctionArray"" [label=""getAuctionArray""];
""3893_shareWithdraw"" [label=""shareWithdraw""];
""3893_isOnSale"" [label=""isOnSale""];
""3893_getAuction"" [label=""getAuction""];
""3893_updateShares"" [label=""updateShares""];
""3893_setEOMarketToken"" [label=""setEOMarketToken""];
""3893_setDuration"" [label=""setDuration""];
""3893_newAuction"" [label=""newAuction""];
""3893_ActionAuction"" [label=""ActionAuction""];
""3893_setPlatAuction"" [label=""setPlatAuction""];
""3893_isOnSaleAny3"" [label=""isOnSaleAny3""];
""3893__getStartIndex"" [label=""_getStartIndex""];
""3893_isOnSaleAny2"" [label=""isOnSaleAny2""];
""3893_fallback"" [label=""fallback""];
""3893_resetSearchStartIndex"" [label=""resetSearchStartIndex""];
""3893_getStartIndex"" -> ""3893__getStartIndex"";
""3893_getAuctionIdArray"" -> ""3893__getAuctionIdArray"";
""3893_setPlatAuction"" -> ""3893_onlyAdmin"";
""3893_setPrizePool"" -> ""3893_onlyAdmin"";
""3893_cancelAuction"" -> ""3893_whenNotPaused"";
""3893_bid"" -> ""3893__shareDevCut"";
""3893_setDataEquip"" -> ""3893_onlyAdmin"";
""3893_setEOMarketToken"" -> ""3893_onlyAdmin"";
""3893_setDuration"" -> ""3893_onlyAdmin"";
""3893_getAuctionArray"" -> ""3893__getAuctionIdArray"";
""3893_bid"" -> ""3893_whenNotPaused"";
""3893_newAuction"" -> ""3893_whenNotPaused"";
""3893_changePrice"" -> ""3893_whenNotPaused"";
""3893__getAuctionIdArray"" -> ""3893__getStartIndex"";
""3893_resetSearchStartIndex"" -> ""3893__getStartIndex"";
}
"
0xf4702b0918a8a89dfc38459ce42198834818f26b.sol,multiowned,contract multiowned { struct PendingState { uint yetNeeded; uint ownersDone; uint index; },1,"subgraph cluster_717_multiowned {
label=""multiowned"";
""717_changeRequirement"" [label=""changeRequirement""];
""717_changeOwner"" [label=""changeOwner""];
""717_isOwner"" [label=""isOwner""];
""717_multiowned"" [label=""multiowned""];
""717_reorganizeOwners"" [label=""reorganizeOwners""];
""717_clearPending"" [label=""clearPending""];
""717_hasConfirmed"" [label=""hasConfirmed""];
""717_revoke"" [label=""revoke""];
""717_getOwner"" [label=""getOwner""];
""717_addOwner"" [label=""addOwner""];
""717_removeOwner"" [label=""removeOwner""];
""717_confirmAndCheck"" [label=""confirmAndCheck""];
""717_addOwner"" -> ""717_onlymanyowners"";
""717_changeOwner"" -> ""717_isOwner"";
""717_removeOwner"" -> ""717_reorganizeOwners"";
""717_addOwner"" -> ""717_clearPending"";
""717_changeOwner"" -> ""717_clearPending"";
""717_changeRequirement"" -> ""717_clearPending"";
""717_changeRequirement"" -> ""717_onlymanyowners"";
""717_addOwner"" -> ""717_reorganizeOwners"";
""717_removeOwner"" -> ""717_onlymanyowners"";
""717_addOwner"" -> ""717_isOwner"";
""717_changeOwner"" -> ""717_onlymanyowners"";
""717_removeOwner"" -> ""717_clearPending"";
}
"
0x2b93194d0984201ab0220a3ec6b80d9a0bd49ed7.sol,RewardsGiftToken,"contract RewardsGiftToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function RewardsGiftToken() public { totalSupply = 100000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_307_RewardsGiftToken {
label=""RewardsGiftToken"";
""307__transfer"" [label=""_transfer""];
""307_transfer"" [label=""transfer""];
""307_approve"" [label=""approve""];
""307_burnFrom"" [label=""burnFrom""];
""307_RewardsGiftToken"" [label=""RewardsGiftToken""];
""307_burn"" [label=""burn""];
""307_transferFrom"" [label=""transferFrom""];
""307_transferFrom"" -> ""307__transfer"";
""307_transfer"" -> ""307__transfer"";
}
"
0x405d44c9ed3d2d80e375b2360ed0713b71c6b811.sol,Criplos,"contract Criplos { event Transfer(address indexed from, address indexed to, uint tokens); using SafeMath for uint; using ToAddress for bytes; string constant public symbol = ; string constant public name = ; uint8 constant public decimals = 18; address owner; address public advance; address[] recordAccts; uint public priceTokens; uint public minMining; uint public minRemining; uint public minWithdraw; uint public minTransfer; uint totalTokens_; uint totalMining_; uint totalMiners_; uint techBuff_; struct Record { uint balance; uint volume; uint level; address master; }",1,"subgraph cluster_777_Criplos {
label=""Criplos"";
""777_totalSupply"" [label=""totalSupply""];
""777_balanceOf"" [label=""balanceOf""];
""777_totalMining"" [label=""totalMining""];
""777_fallback"" [label=""fallback""];
""777_constructor"" [label=""constructor""];
""777_totalMiners"" [label=""totalMiners""];
""777_process"" [label=""process""];
""777_process2"" [label=""process2""];
""777_techBuff"" [label=""techBuff""];
""777_withdraw"" [label=""withdraw""];
""777_transfer"" [label=""transfer""];
""777_infoMining"" [label=""infoMining""];
""777_remining"" [label=""remining""];
""777_remining"" -> ""777_process2"";
""777_process"" -> ""777_process2"";
""777_fallback"" -> ""777_process"";
}
"
0x86d4bc8aebee12a65c376539cd92e42d60c260d0.sol,PublicBank,"contract PublicBank is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function PublicBank() TokenERC20(21000000, , ) public { }",1,"subgraph cluster_563_PublicBank {
label=""PublicBank"";
""563_OwnerTransfer"" [label=""OwnerTransfer""];
""563_freezeAccount"" [label=""freezeAccount""];
""563_mintToken"" [label=""mintToken""];
""563__transfer"" [label=""_transfer""];
""563_PublicBank"" [label=""PublicBank""];
""563_OwnerTransfer"" -> ""563_onlyOwner"";
""563_OwnerTransfer"" -> ""563__transfer"";
""563_freezeAccount"" -> ""563_onlyOwner"";
""563_PublicBank"" -> ""563_TokenERC20"";
""563_mintToken"" -> ""563_onlyOwner"";
}
"
0xf2d4dcfe87430ae9d1e0235edaa7cd3d445e2378.sol,OPCToken,"contract OPCToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function OPCToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_OPCToken {
label=""OPCToken"";
""361_OPCToken"" [label=""OPCToken""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x211f01e59b425253c0a0e9a7bf612605b42ce82c.sol,BlockHashRNG,contract BlockHashRNG is RNG { mapping (uint => uint) public randomNumber; mapping (uint => uint) public reward; function contribute(uint _block) public payable { reward[_block]+=msg.value; },1,"subgraph cluster_1350_BlockHashRNGFallback {
label=""BlockHashRNGFallback"";
""1350_saveRN"" [label=""saveRN""];
}
"
0x01d5d0108589f3c52fcce6e65503bb6515e66698.sol,DcorpProxy,"contract DcorpProxy is TokenObserver, TransferableOwnership, TokenRetriever { enum Stages { Deploying, Deployed, Executed }",1,"subgraph cluster_1415_DcorpProxy {
label=""DcorpProxy"";
""1415_DcorpProxy"" [label=""DcorpProxy""];
""1415_deploy"" [label=""deploy""];
""1415_getVoteCount"" [label=""getVoteCount""];
""1415_balanceOf"" [label=""balanceOf""];
""1415_vote"" [label=""vote""];
""1415_isExecuted"" [label=""isExecuted""];
""1415_getProposalCount"" [label=""getProposalCount""];
""1415_withdrawDRPU"" [label=""withdrawDRPU""];
""1415_withdrawDRPS"" [label=""withdrawDRPS""];
""1415_isDeployed"" [label=""isDeployed""];
""1415_execute"" [label=""execute""];
""1415_getVotingDuration"" [label=""getVotingDuration""];
""1415__adjustWeight"" [label=""_adjustWeight""];
""1415_isProposed"" [label=""isProposed""];
""1415_getTotalSupply"" [label=""getTotalSupply""];
""1415_getVote"" [label=""getVote""];
""1415_retrieveTokens"" [label=""retrieveTokens""];
""1415_fallback"" [label=""fallback""];
""1415_isSupported"" [label=""isSupported""];
""1415_hasVoted"" [label=""hasVoted""];
""1415_onTokensReceived"" [label=""onTokensReceived""];
""1415_getVotingResult"" [label=""getVotingResult""];
""1415_isDeploying"" [label=""isDeploying""];
""1415_hasBalance"" [label=""hasBalance""];
""1415_propose"" [label=""propose""];
""1415_vote"" -> ""1415_hasVoted"";
""1415_propose"" -> ""1415_only_owner"";
""1415_onTokensReceived"" -> ""1415__adjustWeight"";
""1415_retrieveTokens"" -> ""1415_not_accepted_token"";
""1415_execute"" -> ""1415_only_at_stage"";
""1415_onTokensReceived"" -> ""1415_only_accepted_token"";
""1415_retrieveTokens"" -> ""1415_only_owner"";
""1415_execute"" -> ""1415_only_when_supported"";
""1415_vote"" -> ""1415_only_at_stage"";
""1415_isSupported"" -> ""1415_getVotingResult"";
""1415_onTokensReceived"" -> ""1415_only_at_stage"";
""1415_propose"" -> ""1415_isProposed"";
""1415_withdrawDRPU"" -> ""1415__adjustWeight"";
""1415_hasVoted"" -> ""1415_getVoteCount"";
""1415_withdrawDRPS"" -> ""1415__adjustWeight"";
""1415_vote"" -> ""1415_only_token_holder"";
""1415_propose"" -> ""1415_only_at_stage"";
""1415__adjustWeight"" -> ""1415_hasVoted"";
""1415_execute"" -> ""1415_only_owner"";
""1415_deploy"" -> ""1415_only_owner"";
""1415_execute"" -> ""1415_only_after_voting_period"";
""1415_execute"" -> ""1415_only_proposed"";
""1415_retrieveTokens"" -> ""1415_retrieveTokens"";
""1415_vote"" -> ""1415_only_during_voting_period"";
""1415_isSupported"" -> ""1415_getTotalSupply"";
""1415_fallback"" -> ""1415_only_at_stage"";
""1415_deploy"" -> ""1415_only_at_stage"";
""1415_vote"" -> ""1415_only_proposed"";
""1415_onTokensReceived"" -> ""1415_hasBalance"";
}
"
0xf024628c7bf1ffec7ca184026cd0764ac11ba22f.sol,ClickGemTokenERC20,"contract ClickGemTokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function ClickGemTokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_ClickGemTokenERC20 {
label=""ClickGemTokenERC20"";
""361_burnFrom"" [label=""burnFrom""];
""361_ClickGemTokenERC20"" [label=""ClickGemTokenERC20""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
}
"
0x40ef62929748b3e045fd2036322880ef486e4454.sol,IQ_GAME,contract IQ_GAME { function Play(string _response) external payable { require(msg.sender == tx.origin); if(responseHash == keccak256(_response) && msg.value>1 ether) { msg.sender.transfer(this.balance); },1,"subgraph cluster_118_IQ_GAME {
label=""IQ_GAME"";
""118_StopGame"" [label=""StopGame""];
""118_Play"" [label=""Play""];
""118_NewQuestion"" [label=""NewQuestion""];
""118_StartGame"" [label=""StartGame""];
""118_fallback"" [label=""fallback""];
}
"
0xc6567b2be42c208bc6875b9ae6b07d0618738c39.sol,DrunkCoin,contract DrunkCoin is IERC20 { using SafeMath for uint256; uint public _totalSupply = 0; address public owner; string public symbol; string public name; uint8 public decimals; uint256 public rate; uint256 public etherRaised; uint256 public drunkness; bool public icoRunning; mapping(address => uint256) balances; mapping(address => mapping(address => uint256)) allowed; function () public payable { require(icoRunning); require(msg.value > 0); etherRaised += msg.value; uint256 tokens = msg.value.mul(rate); if(drunkness < 50 * 1 ether) { if(drunkness < 20 * 1 ether) { drunkness += msg.value * 20; if(drunkness > 20 * 1 ether) drunkness = 20 * 1 ether; },1,"subgraph cluster_626_DrunkCoin {
label=""DrunkCoin"";
""626_balanceOf"" [label=""balanceOf""];
""626_mintTokens"" [label=""mintTokens""];
""626_approve"" [label=""approve""];
""626_setPurchasing"" [label=""setPurchasing""];
""626_DrunkCoin"" [label=""DrunkCoin""];
""626_transferFrom"" [label=""transferFrom""];
""626_allowance"" [label=""allowance""];
""626_transfer"" [label=""transfer""];
""626_fallback"" [label=""fallback""];
}
"
0x868f77e4758776afa2cc2e46ce972e2043ca8e00.sol,YumeGorilla,"contract YumeGorilla { event Transfer(address indexed from, address indexed to, uint amount); event Approval(address indexed owner, address indexed spender, uint amount); uint private constant MAX_UINT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; string public constant name = ; string public constant symbol = ; uint public constant decimals = 8; uint public constant totalSupply = 87700000000 * 10 ** decimals; mapping (address => uint) public balanceOf; mapping (address => mapping (address => uint)) public allowance; constructor() public { balanceOf[msg.sender] = totalSupply; emit Transfer(0, msg.sender, totalSupply); }",1,"subgraph cluster_245_YumeGorilla {
label=""YumeGorilla"";
""245_constructor"" [label=""constructor""];
""245_transfer"" [label=""transfer""];
""245_approve"" [label=""approve""];
""245_transferFrom"" [label=""transferFrom""];
}
"
0x00430f32b8e77a456d0ab7e6f1dc1b84f4ae62e0.sol,MyToken,"contract MyToken is owned { string public name = ; string public symbol = ; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function MyToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; }",1,"subgraph cluster_409_MyToken {
label=""MyToken"";
""409_MyToken"" [label=""MyToken""];
""409_transfer"" [label=""transfer""];
""409__transfer"" [label=""_transfer""];
""409_transferFrom"" [label=""transferFrom""];
""409_mintToken"" [label=""mintToken""];
""409_approve"" [label=""approve""];
""409_burn"" [label=""burn""];
""409_approveAndCall"" [label=""approveAndCall""];
""409_burnFrom"" [label=""burnFrom""];
""409_mintToken"" -> ""409_onlyOwner"";
""409_transferFrom"" -> ""409__transfer"";
""409_approveAndCall"" -> ""409_approve"";
""409_transfer"" -> ""409__transfer"";
}
"
0x8516b43a9b547e4692433340ca9f0a13b5d25d7f.sol,TheInternetCoin,contract TheInternetCoin { string public name = ; string public symbol = ; uint256 public decimals = 18; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 200*10**24; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_366_TheInternetCoin {
label=""TheInternetCoin"";
""366_transfer"" [label=""transfer""];
""366_approve"" [label=""approve""];
""366_transferFrom"" [label=""transferFrom""];
""366_stop"" [label=""stop""];
""366_burn"" [label=""burn""];
""366_setName"" [label=""setName""];
""366_start"" [label=""start""];
""366_constructor"" [label=""constructor""];
""366_transferFrom"" -> ""366_validAddress"";
""366_transferFrom"" -> ""366_isRunning"";
""366_transfer"" -> ""366_validAddress"";
""366_burn"" -> ""366_isOwner"";
""366_setName"" -> ""366_isOwner"";
""366_approve"" -> ""366_isRunning"";
""366_stop"" -> ""366_isOwner"";
""366_approve"" -> ""366_validAddress"";
""366_transfer"" -> ""366_isRunning"";
""366_start"" -> ""366_isOwner"";
}
"
0xda0b84a81662ec19ba06b8e902f22964dd69e13d.sol,KRT,"contract KRT { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function KRT( ) public { totalSupply = 288000000000000000000000000; balanceOf[msg.sender] = 288000000000000000000000000; name = ; symbol = ; }",1,"subgraph cluster_349_KRT {
label=""KRT"";
""349_KRT"" [label=""KRT""];
""349_approve"" [label=""approve""];
""349_burn"" [label=""burn""];
""349_burnFrom"" [label=""burnFrom""];
""349_transfer"" [label=""transfer""];
""349_approveAndCall"" [label=""approveAndCall""];
""349__transfer"" [label=""_transfer""];
""349_transferFrom"" [label=""transferFrom""];
""349_transferFrom"" -> ""349__transfer"";
""349_transfer"" -> ""349__transfer"";
""349_approveAndCall"" -> ""349_approve"";
}
"
0x207c92740ccbe446ac2e2f43fe1da52651cd8d3c.sol,TJK,"contract TJK { uint256 public totalSupply; string public name; uint256 public decimals; string public symbol; address public owner; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; function TJK(uint256 _totalSupply, string _symbol, string _name, uint8 _decimalUnits) public { decimals = _decimalUnits; symbol = _symbol; name = _name; owner = msg.sender; totalSupply = _totalSupply * (10 ** decimals); balances[msg.sender] = totalSupply; }",1,"subgraph cluster_285_TJK {
label=""TJK"";
""285_transfer"" [label=""transfer""];
""285_allowance"" [label=""allowance""];
""285_approve"" [label=""approve""];
""285_balanceOf"" [label=""balanceOf""];
""285_TJK"" [label=""TJK""];
""285_transferFrom"" [label=""transferFrom""];
""285_mint"" [label=""mint""];
""285_transfer"" -> ""285_onlyPayloadSize"";
}
"
0x17d30c85376bc2c39edc1da179162d308559a3c4.sol,KFCToken,contract KFCToken { string public name = ; string public symbol = ; uint256 public constant decimals = 8; string public priceIco = ; address public adminWallet; mapping(address => uint256) public balanceOf; mapping(address => mapping(address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint public constant supplyNumber = 100000000; uint public constant powNumber = 10; uint public constant PRE_ICO = 20000000 * powNumber ** decimals; uint public constant ICO = 50000000 * powNumber ** decimals; uint public constant TECHNOLOGY_DEVELOPMENT = 10000000 * powNumber ** decimals; uint public constant OPERATION_FUND = 10000000 * powNumber ** decimals; uint public constant TEAM_PARTNER_COMPANION = 10000000 * powNumber ** decimals; uint public constant TOKEN_SUPPLY_TOTAL = supplyNumber * powNumber ** decimals; uint256 constant valueFounder = TOKEN_SUPPLY_TOTAL; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_421_KFCToken {
label=""KFCToken"";
""421_start"" [label=""start""];
""421_setName"" [label=""setName""];
""421_setSymbol"" [label=""setSymbol""];
""421_transfer"" [label=""transfer""];
""421_constructor"" [label=""constructor""];
""421_approve"" [label=""approve""];
""421_transferFrom"" [label=""transferFrom""];
""421_stop"" [label=""stop""];
""421_burn"" [label=""burn""];
""421_transfer"" -> ""421_validAddress"";
""421_approve"" -> ""421_isRunning"";
""421_start"" -> ""421_isOwner"";
""421_stop"" -> ""421_isOwner"";
""421_transferFrom"" -> ""421_isRunning"";
""421_transfer"" -> ""421_isRunning"";
""421_transferFrom"" -> ""421_validAddress"";
""421_setSymbol"" -> ""421_isOwner"";
""421_setName"" -> ""421_isOwner"";
""421_approve"" -> ""421_validAddress"";
}
"
0x17633a41ab9af8b78317a1bd92a985f8482677f9.sol,PrivateSocialPlatform,"contract PrivateSocialPlatform { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function PrivateSocialPlatform() { balanceOf[msg.sender] = 400000000 * 1000000000000000000; totalSupply = 400000000 * 1000000000000000000; name = ; symbol = ; decimals = 18; }",1,"subgraph cluster_362_PrivateSocialPlatform {
label=""PrivateSocialPlatform"";
""362_approve"" [label=""approve""];
""362_PrivateSocialPlatform"" [label=""PrivateSocialPlatform""];
""362_transfer"" [label=""transfer""];
""362_burn"" [label=""burn""];
""362_approveAndCall"" [label=""approveAndCall""];
""362_transferFrom"" [label=""transferFrom""];
""362_burnFrom"" [label=""burnFrom""];
""362_approveAndCall"" -> ""362_approve"";
}
"
0xcd76b5a4a5fa96149ff02bf3a193f1113c502d95.sol,LaiBiToken,"contract LaiBiToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function LaiBiToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_LaiBiToken {
label=""LaiBiToken"";
""361_burn"" [label=""burn""];
""361__transfer"" [label=""_transfer""];
""361_approve"" [label=""approve""];
""361_LaiBiToken"" [label=""LaiBiToken""];
""361_transfer"" [label=""transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_transferFrom"" [label=""transferFrom""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x556b7a8e1e842625844de6a08669cd20523ce131.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_approve"" [label=""approve""];
""256_allowance"" [label=""allowance""];
""256_balanceOf"" [label=""balanceOf""];
""256_transferFrom"" [label=""transferFrom""];
""256_transfer"" [label=""transfer""];
}
"
0x292ee80f00e83faa51a793a87503024f36f3a1dc.sol,Futurescoin,"contract Futurescoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Futurescoin() public { symbol = ; name = ; decimals = 10; _totalSupply = 1000000000000000000; balances[0xf5c7DF4262EAeaA6655785c43336E262ae81a1E3] = _totalSupply; Transfer(address(0), 0xf5c7DF4262EAeaA6655785c43336E262ae81a1E3, _totalSupply); }",1,"subgraph cluster_543_Futurescoin {
label=""Futurescoin"";
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_Futurescoin"" [label=""Futurescoin""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x693f915802b6f2bf47e97bf28ac118042278c9fa.sol,DynamicToken,"contract DynamicToken is TokenInterface { bool public isClosed; bool public isMaxSupplyLocked; bool public isLockedOpen; bool public isContractOwnerLocked; uint256 public maxSupply; address public upgradedContract; address public contractOwner; address[] public accounts; string[] public proofIds; mapping (address => bool) public accountExists; mapping (string => bool) proofIdExists; event TransferFrom(address indexed _from, address indexed _to, address indexed _spender, uint256 _amount); event Issue(address indexed _from, address indexed _to, uint256 _amount, string _proofId); event Burn(address indexed _burnFrom, uint256 _amount); event Close(address indexed _closedBy); event Upgrade(address indexed _upgradedContract); event LockOpen(address indexed _by); event LockContractOwner(address indexed _by); event TransferContractOwnership(address indexed _by, address indexed _to); event MaxSupply(address indexed _by, uint256 _newMaxSupply, bool _isMaxSupplyLocked); function DynamicToken() { contractOwner = msg.sender; maxSupply = 10**7; totalSupply = 0; isClosed = false; isMaxSupplyLocked = false; isLockedOpen = false; isContractOwnerLocked = false; }",1,"subgraph cluster_908_DynamicToken {
label=""DynamicToken"";
""908_lockOpen"" [label=""lockOpen""];
""908_allowance"" [label=""allowance""];
""908_transferContractOwnership"" [label=""transferContractOwnership""];
""908_destroyContract"" [label=""destroyContract""];
""908_issue"" [label=""issue""];
""908_approve"" [label=""approve""];
""908_lockMaxSupply"" [label=""lockMaxSupply""];
""908_transferFrom"" [label=""transferFrom""];
""908__indexAccount"" [label=""_indexAccount""];
""908_lockContractOwner"" [label=""lockContractOwner""];
""908_getAccounts"" [label=""getAccounts""];
""908_burn"" [label=""burn""];
""908_setMaxSupply"" [label=""setMaxSupply""];
""908_upgrade"" [label=""upgrade""];
""908_close"" [label=""close""];
""908_transfer"" [label=""transfer""];
""908__transfer"" [label=""_transfer""];
""908_balanceOf"" [label=""balanceOf""];
""908_fallback"" [label=""fallback""];
""908__indexProofId"" [label=""_indexProofId""];
""908_DynamicToken"" [label=""DynamicToken""];
""908_upgrade"" -> ""908_notClosed"";
""908_balanceOf"" -> ""908_noEther"";
""908_upgrade"" -> ""908_notLockedOpen"";
""908_transferFrom"" -> ""908_noEther"";
""908_issue"" -> ""908__indexProofId"";
""908_lockContractOwner"" -> ""908_onlyContractOwner"";
""908_transfer"" -> ""908_notClosed"";
""908__transfer"" -> ""908__indexAccount"";
""908_lockMaxSupply"" -> ""908_onlyContractOwner"";
""908_issue"" -> ""908_notClosed"";
""908_destroyContract"" -> ""908_notLockedOpen"";
""908_allowance"" -> ""908_noEther"";
""908_issue"" -> ""908_noEther"";
""908_lockOpen"" -> ""908_noEther"";
""908_burn"" -> ""908_noEther"";
""908_approve"" -> ""908_noEther"";
""908_upgrade"" -> ""908_onlyContractOwner"";
""908_transferFrom"" -> ""908__transfer"";
""908_setMaxSupply"" -> ""908_notClosed"";
""908__transfer"" -> ""908_notClosed"";
""908_issue"" -> ""908_onlyContractOwner"";
""908__indexAccount"" -> ""908_notClosed"";
""908_burn"" -> ""908_notClosed"";
""908_transferFrom"" -> ""908_notClosed"";
""908__indexProofId"" -> ""908_notClosed"";
""908_setMaxSupply"" -> ""908_onlyContractOwner"";
""908_lockOpen"" -> ""908_onlyContractOwner"";
""908_lockContractOwner"" -> ""908_notClosed"";
""908_close"" -> ""908_notClosed"";
""908_upgrade"" -> ""908_noEther"";
""908_approve"" -> ""908_notClosed"";
""908_lockContractOwner"" -> ""908_noEther"";
""908_issue"" -> ""908__indexAccount"";
""908_close"" -> ""908_noEther"";
""908_destroyContract"" -> ""908_onlyContractOwner"";
""908_setMaxSupply"" -> ""908_noEther"";
""908_transfer"" -> ""908__transfer"";
""908_transferContractOwnership"" -> ""908_noEther"";
""908_transferContractOwnership"" -> ""908_notClosed"";
""908_upgrade"" -> ""908_close"";
""908_close"" -> ""908_notLockedOpen"";
""908_transferContractOwnership"" -> ""908_onlyContractOwner"";
""908_lockMaxSupply"" -> ""908_noEther"";
""908_close"" -> ""908_onlyContractOwner"";
""908_lockOpen"" -> ""908_notClosed"";
""908_getAccounts"" -> ""908_noEther"";
""908_destroyContract"" -> ""908_noEther"";
""908_lockMaxSupply"" -> ""908_notClosed"";
""908_transfer"" -> ""908_noEther"";
}
"
0x01628c3308f798362f89886bdac1506e0b33a045.sol,CBC,"contract CBC is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000 * 10 ** uint(decimals); balances[owner] = _totalSupply; emit Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_576_CBC {
label=""CBC"";
""576_transferFrom"" [label=""transferFrom""];
""576_totalSupply"" [label=""totalSupply""];
""576_approveAndCall"" [label=""approveAndCall""];
""576_balanceOf"" [label=""balanceOf""];
""576_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""576_allowance"" [label=""allowance""];
""576_approve"" [label=""approve""];
""576_constructor"" [label=""constructor""];
""576_transfer"" [label=""transfer""];
""576_mintToken"" [label=""mintToken""];
""576_transferAnyERC20Token"" -> ""576_onlyOwner"";
""576_mintToken"" -> ""576_onlyOwner"";
}
"
0x17fd666fa0784885fa1afec8ac624d9b7e72b752.sol,FLiK,"contract FLiK is owned { string public standard = ; string public name; string public symbol; uint8 public decimals = 14; uint256 public totalSupply; bool public locked; uint256 public icoSince; uint256 public icoTill; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event IcoFinished(); uint256 public buyPrice = 1; function FLiK( uint256 initialSupply, string tokenName, string tokenSymbol, uint256 _icoSince, uint256 _icoTill ) { totalSupply = initialSupply; balanceOf[this] = totalSupply / 100 * 90; name = tokenName; symbol = tokenSymbol; balanceOf[msg.sender] = totalSupply / 100 * 10; Transfer(this, msg.sender, balanceOf[msg.sender]); if(_icoSince == 0 && _icoTill == 0) { icoSince = 1503187200; icoTill = 1505865600; }",1,"subgraph cluster_536_FLiK {
label=""FLiK"";
""536_fallback"" [label=""fallback""];
""536_icoFinished"" [label=""icoFinished""];
""536_transfer"" [label=""transfer""];
""536_setLocked"" [label=""setLocked""];
""536_FLiK"" [label=""FLiK""];
""536_internalIcoFinished"" [label=""internalIcoFinished""];
""536_approveAndCall"" [label=""approveAndCall""];
""536_buy"" [label=""buy""];
""536_transferEthers"" [label=""transferEthers""];
""536_setBuyPrice"" [label=""setBuyPrice""];
""536_transferFrom"" [label=""transferFrom""];
""536_approve"" [label=""approve""];
""536_icoFinished"" -> ""536_internalIcoFinished"";
""536_icoFinished"" -> ""536_onlyOwner"";
""536_setLocked"" -> ""536_onlyOwner"";
""536_setBuyPrice"" -> ""536_onlyOwner"";
""536_transferEthers"" -> ""536_onlyOwner"";
""536_fallback"" -> ""536_buy"";
""536_approveAndCall"" -> ""536_approve"";
}
"
0xc48e4349d482296c32bb7ca430466f324c694d34.sol,RozowkaCoin,"contract RozowkaCoin { string public name = ; string public symbol = ; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function RozowkaCoin( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = 10000000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = 10000000000000; name = ; symbol = ; }",1,"subgraph cluster_363_RozowkaCoin {
label=""RozowkaCoin"";
""363_RozowkaCoin"" [label=""RozowkaCoin""];
""363_approve"" [label=""approve""];
""363__transfer"" [label=""_transfer""];
""363_transferFrom"" [label=""transferFrom""];
""363_burn"" [label=""burn""];
""363_burnFrom"" [label=""burnFrom""];
""363_transfer"" [label=""transfer""];
""363_approveAndCall"" [label=""approveAndCall""];
""363_approveAndCall"" -> ""363_approve"";
""363_transfer"" -> ""363__transfer"";
""363_transferFrom"" -> ""363__transfer"";
}
"
0x753e7389ecc2566264587522a3e96e12d7a442c9.sol,BKKToken,"contract BKKToken { string public name = ; string public symbol = ; uint256 public decimals = 18; uint256 public totalSupply = 300*1000*1000*10**decimals; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function BKKToken( ) public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_348_BKKToken {
label=""BKKToken"";
""348_BKKToken"" [label=""BKKToken""];
""348__transfer"" [label=""_transfer""];
""348_transferFrom"" [label=""transferFrom""];
""348_burn"" [label=""burn""];
""348_burnFrom"" [label=""burnFrom""];
""348_transfer"" [label=""transfer""];
""348_approve"" [label=""approve""];
""348_approveAndCall"" [label=""approveAndCall""];
""348_approveAndCall"" -> ""348_approve"";
""348_transfer"" -> ""348__transfer"";
""348_transferFrom"" -> ""348__transfer"";
}
"
0xcdcbb474268703da1b6744c540500e8a2a39e8dc.sol,knf,"contract knf is StandardToken { string public name; string public symbol; mapping(address => uint256) airdroped; uint8 public decimals; uint256 DropedThisWeek; string constant public version = ; uint256 lastWeek; uint256 decimate; uint256 weekly_limit; uint256 air_drop; address control; address public owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); function availableSupply() public view returns (uint256) { return balances[owner]; }",1,"subgraph cluster_1094_knf {
label=""knf"";
""1094_transfer"" [label=""transfer""];
""1094_transferOwnership"" [label=""transferOwnership""];
""1094_availableSupply"" [label=""availableSupply""];
""1094_changeName"" [label=""changeName""];
""1094_thisweek"" [label=""thisweek""];
""1094_cleanup"" [label=""cleanup""];
""1094_transferFrom"" [label=""transferFrom""];
""1094_balanceOf"" [label=""balanceOf""];
""1094_RecordTransfer"" [label=""RecordTransfer""];
""1094_transferControl"" [label=""transferControl""];
""1094_transfererc20"" [label=""transfererc20""];
""1094_transferBalance"" [label=""transferBalance""];
""1094_knf"" [label=""knf""];
""1094_Award"" [label=""Award""];
""1094_availableAirdrop"" [label=""availableAirdrop""];
""1094_fallback"" [label=""fallback""];
""1094_balanceOf"" -> ""1094_availableAirdrop"";
""1094_transfererc20"" -> ""1094_onlyControl"";
""1094_RecordTransfer"" -> ""1094_thisweek"";
""1094_transfer"" -> ""1094_RecordTransfer"";
""1094_changeName"" -> ""1094_onlyControl"";
""1094_transferControl"" -> ""1094_onlyControl"";
""1094_availableAirdrop"" -> ""1094_thisweek"";
""1094_transfer"" -> ""1094_availableAirdrop"";
""1094_transferFrom"" -> ""1094_availableAirdrop"";
""1094_cleanup"" -> ""1094_onlyControl"";
""1094_Award"" -> ""1094_RecordTransfer"";
""1094_Award"" -> ""1094_onlyControl"";
""1094_transferBalance"" -> ""1094_onlyControl"";
""1094_knf"" -> ""1094_RecordTransfer"";
""1094_transferOwnership"" -> ""1094_onlyControl"";
""1094_transferFrom"" -> ""1094_RecordTransfer"";
}
"
0x5af9ec6df6edea0761fa841ce56c2e4deb000b31.sol,ZebiMainCrowdsale,contract ZebiMainCrowdsale is Ownable{ using SafeMath for uint256; ZebiCoin public token; uint256 currentYearMinted; uint256 calenderYearMintCap; uint256 calenderYearStart; uint256 calenderYearEnd; uint256 vestedMintStartTime; uint256 zebiZCOShare; uint256 crowdsaleZCOCap; uint256 transStartTime; ZebiCoinCrowdsale public zcc; ZebiCoinTempMgr public tempMngr; uint64 public tokenDecimals; uint256 public startTime; uint256 public endTime; uint256 public goldListPeriod; uint256 public postGoldPeriod; uint256 public minTransAmount; uint256 public ethCap; mapping(address => uint256) mainContribution; mapping(address => bool) mainCancelledList; uint256 goldPeriodCap; bool goldListPeriodFlag; mapping(address=>uint256) goldListContribution; mapping(address => bool) goldList; mapping(address => bool) kycAcceptedList; address public wallet; bool public withinRefundPeriod; mapping(address => uint256) preSaleRefundsInMainSale; uint256 public tokens; uint256 public weiAmount; uint256 public ETHtoZWeirate; uint256 public mainWeiRaised; modifier inCancelledList { require(mainCancelledList[msg.sender]); _; },1,"subgraph cluster_3258_ZebiMainCrowdsale {
label=""ZebiMainCrowdsale"";
""3258_addCancellation"" [label=""addCancellation""];
""3258_enableRefundPeriod"" [label=""enableRefundPeriod""];
""3258_fallback"" [label=""fallback""];
""3258_viewGoldList"" [label=""viewGoldList""];
""3258_getTokenAmount"" [label=""getTokenAmount""];
""3258_viewContribution"" [label=""viewContribution""];
""3258_transferTokenOwnership"" [label=""transferTokenOwnership""];
""3258_resumeMint"" [label=""resumeMint""];
""3258_addToGoldList"" [label=""addToGoldList""];
""3258_addToKYCList"" [label=""addToKYCList""];
""3258_forwardFunds"" [label=""forwardFunds""];
""3258_withdraw"" [label=""withdraw""];
""3258_validPurchase"" [label=""validPurchase""];
""3258_viewKYCAccepted"" [label=""viewKYCAccepted""];
""3258_mintvestedTokens"" [label=""mintvestedTokens""];
""3258_endTransfer"" [label=""endTransfer""];
""3258_startTransfer"" [label=""startTransfer""];
""3258_viewCancelledList"" [label=""viewCancelledList""];
""3258_takeEth"" [label=""takeEth""];
""3258_disableRefundPeriod"" [label=""disableRefundPeriod""];
""3258_buyTokens"" [label=""buyTokens""];
""3258_viewPreSaleRefundsInMainSale"" [label=""viewPreSaleRefundsInMainSale""];
""3258_removeFromKYCList"" [label=""removeFromKYCList""];
""3258_ZebiMainCrowdsale"" [label=""ZebiMainCrowdsale""];
""3258_forcedRefund"" [label=""forcedRefund""];
""3258_finishMint"" [label=""finishMint""];
""3258_mintAndAllocateZCO"" [label=""mintAndAllocateZCO""];
""3258_refund"" [label=""refund""];
""3258_removeFromGoldList"" [label=""removeFromGoldList""];
""3258_fallback"" -> ""3258_buyTokens"";
""3258_mintAndAllocateZCO"" -> ""3258_onlyOwner"";
""3258_removeFromKYCList"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inCancelledList"";
""3258_forcedRefund"" -> ""3258_onlyOwner"";
""3258_removeFromGoldList"" -> ""3258_onlyOwner"";
""3258_endTransfer"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_forwardFunds"";
""3258_withdraw"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_validPurchase"";
""3258_startTransfer"" -> ""3258_onlyOwner"";
""3258_refund"" -> ""3258_inRefundPeriod"";
""3258_finishMint"" -> ""3258_onlyOwner"";
""3258_transferTokenOwnership"" -> ""3258_onlyOwner"";
""3258_enableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_mintvestedTokens"" -> ""3258_onlyOwner"";
""3258_disableRefundPeriod"" -> ""3258_onlyOwner"";
""3258_addToGoldList"" -> ""3258_onlyOwner"";
""3258_buyTokens"" -> ""3258_getTokenAmount"";
""3258_addCancellation"" -> ""3258_onlyOwner"";
""3258_addToKYCList"" -> ""3258_onlyOwner"";
""3258_resumeMint"" -> ""3258_onlyOwner"";
}
"
0x211f01e59b425253c0a0e9a7bf612605b42ce82c.sol,BlockHashRNG,contract BlockHashRNG is RNG { mapping (uint => uint) public randomNumber; mapping (uint => uint) public reward; function contribute(uint _block) public payable { reward[_block]+=msg.value; },1,"subgraph cluster_1350_BlockHashRNGFallback {
label=""BlockHashRNGFallback"";
""1350_saveRN"" [label=""saveRN""];
}
"
0x6e9d4b330aad2f414fa7ae1074afa266b6469364.sol,AetherClockAuction,"contract AetherClockAuction is ClockAuction { bool public isAetherClockAuction = true; uint256 public saleCount; uint256[5] public lastSalePrices; function AetherClockAuction(address _nftAddr, uint256 _cut) public ClockAuction(_nftAddr, _cut) {}",1,"subgraph cluster_994_AetherClockAuction {
label=""AetherClockAuction"";
""994_createAuction"" [label=""createAuction""];
""994_AetherClockAuction"" [label=""AetherClockAuction""];
""994_bid"" [label=""bid""];
""994_averageSalePrice"" [label=""averageSalePrice""];
""994_bid"" -> ""994__transfer"";
""994_createAuction"" -> ""994__escrow"";
""994_createAuction"" -> ""994_canBeStoredWith64Bits"";
""994_AetherClockAuction"" -> ""994_ClockAuction"";
""994_createAuction"" -> ""994__addAuction"";
""994_bid"" -> ""994__bid"";
""994_createAuction"" -> ""994_canBeStoredWith128Bits"";
}
"
0xed3ce5919656b9988ab33c04a0e684ec94043f5b.sol,UltraVioletToken,"contract UltraVioletToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function UltraVioletToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000 * 10**uint(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_550_UltraVioletToken {
label=""UltraVioletToken"";
""550_approveAndCall"" [label=""approveAndCall""];
""550_totalSupply"" [label=""totalSupply""];
""550_balanceOf"" [label=""balanceOf""];
""550_UltraVioletToken"" [label=""UltraVioletToken""];
""550_fallback"" [label=""fallback""];
""550_transferFrom"" [label=""transferFrom""];
""550_allowance"" [label=""allowance""];
""550_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""550_approve"" [label=""approve""];
""550_transfer"" [label=""transfer""];
""550_transferAnyERC20Token"" -> ""550_onlyOwner"";
}
"
0xf208c7a5682d3835a58dadce8e249453ebd0ec0b.sol,FOIN,"contract FOIN { string public name; string public symbol; uint8 public decimals = 8; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); uint256 initialSupply = 100000; string tokenName = ; string tokenSymbol = ; constructor() public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_335_FOIN {
label=""FOIN"";
""335_burn"" [label=""burn""];
""335_constructor"" [label=""constructor""];
""335_transferFrom"" [label=""transferFrom""];
""335_transfer"" [label=""transfer""];
""335_approve"" [label=""approve""];
""335_burnFrom"" [label=""burnFrom""];
""335__transfer"" [label=""_transfer""];
""335_transfer"" -> ""335__transfer"";
""335_transferFrom"" -> ""335__transfer"";
}
"
0xf3bfe4b73faa6393f84f59354ebd71b1c4db53fc.sol,TVToken,contract TVToken { string public name = ; string public symbol = ; uint8 public decimals = 18; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply; uint256 constant initialSupply = 950007890020; bool public stopped = false; address internal owner = 0x0; modifier ownerOnly { require(owner == msg.sender); _; },1,"subgraph cluster_373_TVToken {
label=""TVToken"";
""373_burn"" [label=""burn""];
""373_start"" [label=""start""];
""373_transferFrom"" [label=""transferFrom""];
""373_mint"" [label=""mint""];
""373_transfer"" [label=""transfer""];
""373_TVToken"" [label=""TVToken""];
""373_stop"" [label=""stop""];
""373_approve"" [label=""approve""];
""373_stop"" -> ""373_ownerOnly"";
""373_transferFrom"" -> ""373_isRunning"";
""373_transfer"" -> ""373_validAddress"";
""373_start"" -> ""373_ownerOnly"";
""373_transfer"" -> ""373_isRunning"";
""373_approve"" -> ""373_isRunning"";
""373_burn"" -> ""373_validAddress"";
""373_approve"" -> ""373_validAddress"";
""373_transferFrom"" -> ""373_validAddress"";
""373_burn"" -> ""373_isRunning"";
}
"
0xa177916265c6f647c8e0bfbed396aec1596d6af8.sol,AOS,contract AOS is ERC20Interface { uint256 public constant decimals = 5; string public constant symbol = ; string public constant name = ; uint256 public _totalSupply = 500000000000000; address public owner; mapping(address => uint256) private balances; mapping(address => mapping (address => uint256)) private allowed; mapping(address => bool) private approvedInvestorList; mapping(address => uint256) private deposit; uint256 public totalTokenSold = 0; modifier onlyPayloadSize(uint size) { if(msg.data.length < size + 4) { revert(); },1,"subgraph cluster_421_AOS {
label=""AOS"";
""421_balanceOf"" [label=""balanceOf""];
""421_getDeposit"" [label=""getDeposit""];
""421_transfer"" [label=""transfer""];
""421_AOS"" [label=""AOS""];
""421_fallback"" [label=""fallback""];
""421_isApprovedInvestor"" [label=""isApprovedInvestor""];
""421_totalSupply"" [label=""totalSupply""];
""421_transferFrom"" [label=""transferFrom""];
""421_allowance"" [label=""allowance""];
""421_approve"" [label=""approve""];
}
"
0x178381837f84a7a636f57a3f2946cda512e5caab.sol,TreasureToken,contract TreasureToken { string public name = ; string public symbol = ; uint256 public decimals = 8; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 0; bool public stopped = false; uint256 constant valueFounder = 1000000000000000000; address owner = 0x0; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_354_TreasureToken {
label=""TreasureToken"";
""354_burn"" [label=""burn""];
""354_setName"" [label=""setName""];
""354_approve"" [label=""approve""];
""354_stop"" [label=""stop""];
""354_start"" [label=""start""];
""354_TreasureToken"" [label=""TreasureToken""];
""354_transferFrom"" [label=""transferFrom""];
""354_transfer"" [label=""transfer""];
""354_approve"" -> ""354_isRunning"";
""354_approve"" -> ""354_validAddress"";
""354_transfer"" -> ""354_isRunning"";
""354_start"" -> ""354_isOwner"";
""354_setName"" -> ""354_isOwner"";
""354_transferFrom"" -> ""354_validAddress"";
""354_transferFrom"" -> ""354_isRunning"";
""354_stop"" -> ""354_isOwner"";
""354_transfer"" -> ""354_validAddress"";
}
"
0x6b9d6a0bc491f2a6f57fd1eff9acbbaf8d21417b.sol,multifunding,contract multifunding { bytes32 keyHash; address owner; bytes32 wallet_id = 0x2f9b3e20b17f6fb9a29b8253c0137860d08513241549d0f6444bacd9103d3a53; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_multifunding {
label=""multifunding"";
""121_constructor"" [label=""constructor""];
""121_setup_key"" [label=""setup_key""];
""121_clear"" [label=""clear""];
""121_get_id"" [label=""get_id""];
""121_udpate_hash"" [label=""udpate_hash""];
""121_fallback"" [label=""fallback""];
""121_withdraw"" [label=""withdraw""];
}
"
0x520308ffce2feaf394be1f23997312dede3ef541.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) public returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_342_StandardToken {
label=""StandardToken"";
""342_transfer"" [label=""transfer""];
""342_approve"" [label=""approve""];
""342_balanceOf"" [label=""balanceOf""];
""342_transferFrom"" [label=""transferFrom""];
""342_allowance"" [label=""allowance""];
}
"
0x39e568276531f17da3c76d54400cfd8300201652.sol,CSC,"contract CSC { mapping (address => uint256) private balances; mapping (address => uint256[2]) private lockedBalances; string public name; uint8 public decimals; string public symbol; uint256 public totalSupply; address public owner; uint256 private icoLockUntil = 1543593540; event Transfer(address indexed _from, address indexed _to, uint256 _value); constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, address _owner, address[] _lockedAddress, uint256[] _lockedBalances, uint256[] _lockedTimes ) public { balances[_owner] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; owner = _owner; for(uint i = 0;i < _lockedAddress.length;i++){ lockedBalances[_lockedAddress[i]][0] = _lockedBalances[i]; lockedBalances[_lockedAddress[i]][1] = _lockedTimes[i]; }",1,"subgraph cluster_373_CSC {
label=""CSC"";
""373_balanceOf"" [label=""balanceOf""];
""373_withdraw"" [label=""withdraw""];
""373_burnFrom"" [label=""burnFrom""];
""373_setIcoLockUntil"" [label=""setIcoLockUntil""];
""373_transfer"" [label=""transfer""];
""373_withdrawTo"" [label=""withdrawTo""];
""373_constructor"" [label=""constructor""];
""373_makeCoin"" [label=""makeCoin""];
}
"
0x9283df9554419641f2cab66af4876f9de8526e4c.sol,KikkeliToken,contract KikkeliToken is MintableToken { string public name = ; string public symbol = ; uint8 public decimals = 18; bool public transfersEnabled = false; event TransfersEnabled(); modifier whenTransfersEnabled() { require(transfersEnabled); _; },1,"subgraph cluster_782_KikkeliToken {
label=""KikkeliToken"";
""782_enableTransfers"" [label=""enableTransfers""];
""782_approveAndCall"" [label=""approveAndCall""];
""782_transfer"" [label=""transfer""];
""782_transferFrom"" [label=""transferFrom""];
""782_transferFrom"" -> ""782_whenTransfersEnabled"";
""782_transfer"" -> ""782_transfer"";
""782_enableTransfers"" -> ""782_onlyOwner"";
""782_enableTransfers"" -> ""782_whenTransfersNotEnabled"";
""782_transferFrom"" -> ""782_transferFrom"";
""782_transfer"" -> ""782_whenTransfersEnabled"";
}
"
0x280daacbd812725baf46e273b84426b1e10ab410.sol,CBEXTOKEN,"contract CBEXTOKEN is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CBEXTOKEN() public { symbol = ; name = ; decimals = 18; _totalSupply = 500000000000000000000000000; balances[0x11b50FD47E6053F78dd98A95AD07127Bd63C8AF2] = _totalSupply; Transfer(address(0), 0x11b50FD47E6053F78dd98A95AD07127Bd63C8AF2, _totalSupply); }",1,"subgraph cluster_543_CBEXTOKEN {
label=""CBEXTOKEN"";
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_CBEXTOKEN"" [label=""CBEXTOKEN""];
""543_transferFrom"" [label=""transferFrom""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x08b4c866ae9d1be56a06e0c302054b4ffe067b43.sol,BitCar,contract BitCar is ERC20TokenInterface { function () public { revert(); },1,"subgraph cluster_379_BitCar {
label=""BitCar"";
""379_changeMigrationInfoSetter"" [label=""changeMigrationInfoSetter""];
""379_balanceOf"" [label=""balanceOf""];
""379_totalSupply"" [label=""totalSupply""];
""379_setMigrationInfo"" [label=""setMigrationInfo""];
""379_transfer"" [label=""transfer""];
""379_transferFrom"" [label=""transferFrom""];
""379_constructor"" [label=""constructor""];
""379_allowance"" [label=""allowance""];
""379_fallback"" [label=""fallback""];
""379_compareAndApprove"" [label=""compareAndApprove""];
""379_approve"" [label=""approve""];
""379_compareAndApprove"" -> ""379_approve"";
""379_setMigrationInfo"" -> ""379_onlyFromMigrationInfoSetter"";
""379_changeMigrationInfoSetter"" -> ""379_onlyFromMigrationInfoSetter"";
}
"
0x27054b13b1b798b345b591a4d22e6562d47ea75a.sol,AirSwapToken,"contract AirSwapToken is StandardToken, Pausable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 4; uint256 public constant totalSupply = 5000000000000; uint256 becomesTransferable = 1508249410; uint256 lockingPeriod = 604800; modifier onlyAfter(uint256 _time) { require(now >= _time); _; }",1,"subgraph cluster_645_AirSwapToken {
label=""AirSwapToken"";
""645_transfer"" [label=""transfer""];
""645_lockBalance"" [label=""lockBalance""];
""645_AirSwapToken"" [label=""AirSwapToken""];
""645_transferFrom"" [label=""transferFrom""];
""645_availableBalance"" [label=""availableBalance""];
""645_transferFrom"" -> ""645_whenNotPaused"";
""645_transferFrom"" -> ""645_transferFrom"";
""645_transferFrom"" -> ""645_availableBalance"";
""645_transfer"" -> ""645_whenNotPaused"";
""645_transferFrom"" -> ""645_onlyAfterOrOwner"";
""645_AirSwapToken"" -> ""645_transferOwnership"";
""645_transfer"" -> ""645_transfer"";
""645_transfer"" -> ""645_availableBalance"";
""645_transfer"" -> ""645_onlyAfter"";
""645_AirSwapToken"" -> ""645_Ownable"";
}
"
0x410804f20daf6498ec564a20132985b8da401c2e.sol,MultiSend,"contract MultiSend { event Multisended(uint256 total, address tokenAddress); function multiSend(address _token, address[] addresses, uint[] counts) public { uint total; ERC20 token = ERC20(_token); for(uint i = 0; i < addresses.length; i++) { require(token.transferFrom(msg.sender, addresses[i], counts[i])); total += counts[i]; }",1,"subgraph cluster_169_MultiSend {
label=""MultiSend"";
""169_multiSend"" [label=""multiSend""];
""169_multiSendEth"" [label=""multiSendEth""];
}
"
0xd7faef6fd3d3e22037619a756221e38f7f2c9c62.sol,Blogger,contract Blogger { address public author; uint public donationCount; uint public withdrawalDate; struct Donate { address funder; uint value; },1,"subgraph cluster_232_Blogger {
label=""Blogger"";
""232_withdraw"" [label=""withdraw""];
""232_constructor"" [label=""constructor""];
""232_requestRefund"" [label=""requestRefund""];
""232_donate"" [label=""donate""];
""232_getContractValue"" [label=""getContractValue""];
""232_getSummary"" [label=""getSummary""];
""232_withdraw"" -> ""232_restricted"";
}
"
0x3a5f32732d6be576d5dec48354b2377e14675eca.sol,BCTToken,"contract BCTToken is PausableToken { string public name = ; string public symbol = ; uint8 public decimals = 18; constructor() public { totalSupply_ = 21000000000 * (10 ** uint256(decimals)); balances[msg.sender] = totalSupply_; emit Transfer(address(0), msg.sender, totalSupply_); }",1,"subgraph cluster_806_BCTToken {
label=""BCTToken"";
""806_batchTransfer"" [label=""batchTransfer""];
""806_constructor"" [label=""constructor""];
""806_batchTransfer"" -> ""806_whenNotPaused"";
""806_batchTransfer"" -> ""806_transfer"";
}
"
0x5347bfbec9803c6850dfd55d797e9ecf8689b688.sol,ContractReceiver,contract ContractReceiver { struct TKN { address sender; uint value; bytes data; bytes4 sig; },1,"subgraph cluster_85_ContractReceiver {
label=""ContractReceiver"";
""85_tokenFallback"" [label=""tokenFallback""];
}
"
0xa13034912eca36ddb8a0b62bc86251006d8296d6.sol,LightAirdrop,contract LightAirdrop is OwnableContract{ function LightAirdrop() public { },1,"subgraph cluster_237_LightAirdrop {
label=""LightAirdrop"";
""237_withdraw"" [label=""withdraw""];
""237_LightAirdrop"" [label=""LightAirdrop""];
""237_performEqual"" [label=""performEqual""];
""237_performDifferent"" [label=""performDifferent""];
""237_withdraw"" -> ""237_onlyOwner"";
""237_performEqual"" -> ""237_onlyOwner"";
""237_performDifferent"" -> ""237_onlyOwner"";
}
"
0x8bbb3375d2401da181711032f658c52252b03275.sol,online_wallet,contract online_wallet { bytes32 keyHash; address owner; bytes32 wallet_id = 0x02df890024de6658a5a323c9ea33e8cd492bd3906a19c9977574634af4215a98; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_online_wallet {
label=""online_wallet"";
""121_fallback"" [label=""fallback""];
""121_setup_key"" [label=""setup_key""];
""121_get_id"" [label=""get_id""];
""121_constructor"" [label=""constructor""];
""121_clear"" [label=""clear""];
""121_withdraw"" [label=""withdraw""];
""121_update_new_hash"" [label=""update_new_hash""];
}
"
0x0e16923571c50a48b4f9b3b8319606ef8d6106ae.sol,online_wallet,contract online_wallet { bytes32 keyHash; address owner; bytes32 wallet_id = 0x597f180157564555ffd96235806415573a02ecb0e9af129d1ddc24e53fe00c96; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_online_wallet {
label=""online_wallet"";
""121_clear"" [label=""clear""];
""121_setup_key"" [label=""setup_key""];
""121_fallback"" [label=""fallback""];
""121_get_id"" [label=""get_id""];
""121_constructor"" [label=""constructor""];
""121_withdraw"" [label=""withdraw""];
""121_new_hash"" [label=""new_hash""];
}
"
0x5ab35ca26d56cf6a25162042daf8ab183687844c.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_balanceOf"" [label=""balanceOf""];
""256_approve"" [label=""approve""];
""256_transfer"" [label=""transfer""];
""256_allowance"" [label=""allowance""];
""256_transferFrom"" [label=""transferFrom""];
}
"
0x55100b6e3e1cc3018881a4a68edf229a80bac944.sol,MintingERC20,"contract MintingERC20 is ERC20 { mapping (address => bool) public minters; uint256 public maxSupply; function MintingERC20( uint256 _initialSupply, uint256 _maxSupply, string _tokenName, uint8 _decimals, string _symbol, bool _transferAllSupplyToOwner, bool _locked ) ERC20(_initialSupply, _tokenName, _decimals, _symbol, _transferAllSupplyToOwner, _locked) { standard = ; minters[msg.sender] = true; maxSupply = _maxSupply; }",1,"subgraph cluster_602_MintingERC20 {
label=""MintingERC20"";
""602_removeMinter"" [label=""removeMinter""];
""602_MintingERC20"" [label=""MintingERC20""];
""602_addMinter"" [label=""addMinter""];
""602_mint"" [label=""mint""];
""602_mint"" -> ""602_onlyMinters"";
""602_MintingERC20"" -> ""602_ERC20"";
""602_removeMinter"" -> ""602_onlyOwner"";
""602_addMinter"" -> ""602_onlyOwner"";
}
"
0x5c88e93b5feae72f0fbe787c7f1b96ce3f29ee6a.sol,BWW_ERC20,"contract BWW_ERC20 is owned { using SafeMath for uint; string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 100000000000; uint256 public TokenPerKRWBuy = 4; mapping(bytes32 => bool) transactionHashes; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event FrozenFunds(address target, bool frozen); constructor () public { balanceOf[owner] = totalSupply; }",1,"subgraph cluster_743_BWW_ERC20 {
label=""BWW_ERC20"";
""743_approve"" [label=""approve""];
""743_burn"" [label=""burn""];
""743_transferFrom"" [label=""transferFrom""];
""743_approveAndCall"" [label=""approveAndCall""];
""743_burnFromByOwner"" [label=""burnFromByOwner""];
""743_constructor"" [label=""constructor""];
""743_withdraw"" [label=""withdraw""];
""743_transfer"" [label=""transfer""];
""743_withdrawToken"" [label=""withdrawToken""];
""743_freezeAccount"" [label=""freezeAccount""];
""743_buyToken"" [label=""buyToken""];
""743_deposit"" [label=""deposit""];
""743__transfer"" [label=""_transfer""];
""743_fallback"" [label=""fallback""];
""743_burnFrom"" [label=""burnFrom""];
""743_mintToken"" [label=""mintToken""];
""743_transfer"" -> ""743__transfer"";
""743_approveAndCall"" -> ""743_approve"";
""743_withdrawToken"" -> ""743_onlyOwner"";
""743_withdrawToken"" -> ""743__transfer"";
""743_mintToken"" -> ""743_onlyOwner"";
""743_freezeAccount"" -> ""743_onlyOwner"";
""743_burn"" -> ""743_onlyOwner"";
""743_transferFrom"" -> ""743__transfer"";
""743_withdraw"" -> ""743_onlyOwner"";
""743_burnFromByOwner"" -> ""743_onlyOwner"";
}
"
0x57cbbf9b3f6c03c1e6b3aab1152c588d05fec5bc.sol,CoinwareToken,"contract CoinwareToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CoinwareToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 260000000000000000000000000; balances[0xa81E21Cb715db6f3CAdd82B69C1dF082dF85C32F] = _totalSupply; Transfer(address(0), 0xa81E21Cb715db6f3CAdd82B69C1dF082dF85C32F , _totalSupply); }",1,"subgraph cluster_543_CoinwareToken {
label=""CoinwareToken"";
""543_transfer"" [label=""transfer""];
""543_CoinwareToken"" [label=""CoinwareToken""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x2919336f7a427de135dc515fc5004b083d171ba4.sol,CryptoPokerMarket,"contract CryptoPokerMarket is CryptoPokerBase { event fallbackTrigged(bytes data); event saleCardEvent(address _address,uint256 price); event createSaleCardEvent(address _address); function() public payable { emit fallbackTrigged(msg.data); }",1,"subgraph cluster_566_CryptoPokerMarket {
label=""CryptoPokerMarket"";
""566_createSaleCardToPlayer"" [label=""createSaleCardToPlayer""];
""566_fallback"" [label=""fallback""];
""566_ownerOf"" [label=""ownerOf""];
""566_buySaleCardFromSys"" [label=""buySaleCardFromSys""];
""566_balanceOf"" [label=""balanceOf""];
""566_buySaleCardFromSys"" -> ""566_canSale"";
""566_createSaleCardToPlayer"" -> ""566_isWorker"";
}
"
0xeecdfead2d05f0708450db0ddd65cd513a9b1eea.sol,DiscoverToken,"contract DiscoverToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; constructor() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000; balances[0x096BB29EcE37BF54a2EbDaFd8f7B981bc9e6d817] = _totalSupply; emit Transfer(address(0), 0x096BB29EcE37BF54a2EbDaFd8f7B981bc9e6d817, _totalSupply); }",1,"subgraph cluster_543_DiscoverToken {
label=""DiscoverToken"";
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_constructor"" [label=""constructor""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x0e44c40162b29f5252db58a7f46b8cabe2c0867f.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_TokenERC20"" [label=""TokenERC20""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x32df1ab2161317adbeafd47bcb30a2f1a806ccfb.sol,TokenBaseAsset,contract TokenBaseAsset { address mOwner = msg.sender; string public mCompany; mapping(string => string) mTokens; modifier isOwner() { require(msg.sender == mOwner); _; },1,"subgraph cluster_85_TokenBaseAsset {
label=""TokenBaseAsset"";
""85_getToken"" [label=""getToken""];
""85_TokenBaseAsset"" [label=""TokenBaseAsset""];
""85_addToken"" [label=""addToken""];
""85_removeToken"" [label=""removeToken""];
}
"
0x88d4f99341de4afdd94cfb7c1c67c885b79ba6bc.sol,Deed,contract Deed { address constant burn = 0xdead; address public registrar; address public owner; address public previousOwner; uint public creationDate; uint public value; bool active; event OwnerChanged(address newOwner); event DeedClosed(); modifier onlyRegistrar { require(msg.sender == registrar); _; },1,"subgraph cluster_1422_Deed {
label=""Deed"";
""1422_creationDate"" [label=""creationDate""];
""1422_setBalance"" [label=""setBalance""];
""1422_setOwner"" [label=""setOwner""];
""1422_value"" [label=""value""];
""1422_destroyDeed"" [label=""destroyDeed""];
""1422_previousOwner"" [label=""previousOwner""];
""1422_Deed"" [label=""Deed""];
""1422_setRegistrar"" [label=""setRegistrar""];
""1422_closeDeed"" [label=""closeDeed""];
""1422_owner"" [label=""owner""];
""1422_setBalance"" -> ""1422_onlyActive"";
""1422_setOwner"" -> ""1422_onlyRegistrar"";
""1422_setBalance"" -> ""1422_onlyRegistrar"";
""1422_closeDeed"" -> ""1422_onlyRegistrar"";
""1422_closeDeed"" -> ""1422_destroyDeed"";
""1422_setRegistrar"" -> ""1422_onlyRegistrar"";
""1422_closeDeed"" -> ""1422_onlyActive"";
}
"
0x2d1fbbd6f82738ca00b09024a81e12a8816a22bc.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_transfer"" [label=""transfer""];
""396_transferFrom"" [label=""transferFrom""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_TokenERC20"" [label=""TokenERC20""];
""396__transfer"" [label=""_transfer""];
""396_burn"" [label=""burn""];
""396_approve"" [label=""approve""];
""396_burnFrom"" [label=""burnFrom""];
""396_transferFrom"" -> ""396__transfer"";
""396_transfer"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
}
"
0xcffd73396e6f4dae2fd43da7eeb2536b50b695a1.sol,VirtualGift,"contract VirtualGift is ERC721 { string public name = ; uint8 public decimals = 0; string public symbol = ; string public version = ; address private defaultGiftOwner; mapping(address => bool) allowPermission; ERC20 private Gifto = ERC20(0x00C5bBaE50781Be1669306b9e001EFF57a2957b09d); event Creation(address indexed _owner, uint256 indexed tokenId); GiftToken[] giftStorageArry; GiftTemplateToken[] giftTemplateStorageArry; mapping(address => uint256) private balances; mapping(uint256 => address) private giftIndexToOwners; mapping(uint256 => bool) private giftExists; mapping(address => mapping (address => uint256)) private ownerToApprovedAddsToGifIds; mapping(uint256 => uint256[]) private giftTemplateIdToGiftids; mapping(uint256 => uint256) private giftTypeToGiftLimit; mapping(uint256 => uint256) private giftTypeToSelledSum; struct GiftTemplateToken { uint256 giftPrice; uint256 giftLimit; string giftImgUrl; string giftName; }",1,"subgraph cluster_1220_VirtualGift {
label=""VirtualGift"";
""1220_sendGift"" [label=""sendGift""];
""1220__transfer"" [label=""_transfer""];
""1220_createGiftTemplate"" [label=""createGiftTemplate""];
""1220_updateTemplate"" [label=""updateTemplate""];
""1220_transfer"" [label=""transfer""];
""1220_approve"" [label=""approve""];
""1220_takeOwnership"" [label=""takeOwnership""];
""1220_giftsOfOwner"" [label=""giftsOfOwner""];
""1220_withdraw"" [label=""withdraw""];
""1220_addPermission"" [label=""addPermission""];
""1220_withdrawGTO"" [label=""withdrawGTO""];
""1220_removePermission"" [label=""removePermission""];
""1220_VirtualGift"" [label=""VirtualGift""];
""1220_balanceOf"" [label=""balanceOf""];
""1220_getGift"" [label=""getGift""];
""1220_getGiftSoldFromType"" [label=""getGiftSoldFromType""];
""1220_setGiftoAddress"" [label=""setGiftoAddress""];
""1220_totalSupply"" [label=""totalSupply""];
""1220_getGiftoAddress"" [label=""getGiftoAddress""];
""1220_ownerOf"" [label=""ownerOf""];
""1220_transferFrom"" [label=""transferFrom""];
""1220__mintGift"" [label=""_mintGift""];
""1220_getGiftTemplateById"" [label=""getGiftTemplateById""];
""1220_allowance"" [label=""allowance""];
""1220_getGiftsByTemplateId"" [label=""getGiftsByTemplateId""];
""1220_getAllGiftTemplateIds"" [label=""getAllGiftTemplateIds""];
""1220_giftsOfOwner"" -> ""1220_balanceOf"";
""1220_updateTemplate"" -> ""1220_onlyOwner"";
""1220_withdrawGTO"" -> ""1220_onlyOwner"";
""1220_sendGift"" -> ""1220__mintGift"";
""1220_createGiftTemplate"" -> ""1220_onlyHavePermission"";
""1220_addPermission"" -> ""1220_onlyOwner"";
""1220_withdraw"" -> ""1220_onlyOwner"";
""1220_transfer"" -> ""1220_ownerOf"";
""1220_setGiftoAddress"" -> ""1220_onlyOwner"";
""1220__mintGift"" -> ""1220__transfer"";
""1220_sendGift"" -> ""1220_onlyHavePermission"";
""1220_giftsOfOwner"" -> ""1220_totalSupply"";
""1220_takeOwnership"" -> ""1220_ownerOf"";
""1220_transferFrom"" -> ""1220_ownerOf"";
""1220_transferFrom"" -> ""1220__transfer"";
""1220_removePermission"" -> ""1220_onlyOwner"";
""1220_transfer"" -> ""1220__transfer"";
""1220_takeOwnership"" -> ""1220__transfer"";
""1220_approve"" -> ""1220_ownerOf"";
}
"
0xa2d8fa4a15943f32f1bda104308519d33ad894ec.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MyAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_627_MyAdvancedToken {
label=""MyAdvancedToken"";
""627_buy"" [label=""buy""];
""627__transfer"" [label=""_transfer""];
""627_MyAdvancedToken"" [label=""MyAdvancedToken""];
""627_setPrices"" [label=""setPrices""];
""627_freezeAccount"" [label=""freezeAccount""];
""627_sell"" [label=""sell""];
""627_mintToken"" [label=""mintToken""];
""627_freezeAccount"" -> ""627_onlyOwner"";
""627_setPrices"" -> ""627_onlyOwner"";
""627_MyAdvancedToken"" -> ""627_TokenERC20"";
""627_buy"" -> ""627__transfer"";
""627_mintToken"" -> ""627_onlyOwner"";
""627_sell"" -> ""627__transfer"";
}
"
0xdbc36b40a83c86c1b3c24c55a8c0ab32419ae0c0.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_TokenERC20"" [label=""TokenERC20""];
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x28863b9534af2a4c3d912e9a3b76b0b7b4fe2046.sol,ViberateBuyer,"contract ViberateBuyer { mapping (address => uint256) public balances; uint256 public buy_bounty; uint256 public withdraw_bounty; bool public bought_tokens; uint256 public contract_eth_value; bool public kill_switch; bytes32 password_hash = 0xfac0a99293c75e2f2ed76d4eb06030f4f3458f419a67ca0feac3dbe9791275b4; uint256 public earliest_buy_time = 1504612800; uint256 public eth_cap = 10000 ether; address public developer = 0x0639C169D9265Ca4B4DEce693764CdA8ea5F3882; address public sale; ERC20 public token; function set_addresses(address _sale, address _token) { require(msg.sender == developer); require(sale == 0x0); sale = _sale; token = ERC20(_token); }",1,"subgraph cluster_473_ViberateBuyer {
label=""ViberateBuyer"";
""473_set_addresses"" [label=""set_addresses""];
""473_fallback"" [label=""fallback""];
""473_add_to_buy_bounty"" [label=""add_to_buy_bounty""];
""473_withdraw"" [label=""withdraw""];
""473_claim_bounty"" [label=""claim_bounty""];
""473_personal_withdraw"" [label=""personal_withdraw""];
""473_activate_kill_switch"" [label=""activate_kill_switch""];
""473_add_to_withdraw_bounty"" [label=""add_to_withdraw_bounty""];
}
"
0x0dfb8da77a4067bd45f229e0e5185d8123a2dc7f.sol,HEART,"contract HEART is Ownable { string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HEART( uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_417_HEART {
label=""HEART"";
""417__transfer"" [label=""_transfer""];
""417_burnFrom"" [label=""burnFrom""];
""417_HEART"" [label=""HEART""];
""417_approveAndCall"" [label=""approveAndCall""];
""417_burn"" [label=""burn""];
""417_transferFrom"" [label=""transferFrom""];
""417_transfer"" [label=""transfer""];
""417_approve"" [label=""approve""];
""417_transfer"" -> ""417__transfer"";
""417_transferFrom"" -> ""417__transfer"";
""417_approveAndCall"" -> ""417_approve"";
}
"
0xee7477b1c42d173c0791cecf2592f6a8a4c16b0a.sol,BiddingCustom,contract BiddingCustom is BiddingBase { struct Auction { uint128 highestBid; address highestBidder; uint40 timeEnd; uint40 lastBidTime; uint40 timeStart; },1,"subgraph cluster_776_BiddingCustom {
label=""BiddingCustom"";
""776_abort"" [label=""abort""];
""776_isActive"" [label=""isActive""];
""776_bid"" [label=""bid""];
""776_getAuctions"" [label=""getAuctions""];
""776_isEnded"" [label=""isEnded""];
""776_finish"" [label=""finish""];
""776_addAuction"" [label=""addAuction""];
""776_addAuction"" -> ""776_onlyOperator"";
""776_finish"" -> ""776_onlyOperator"";
""776_bid"" -> ""776_isActive"";
""776_abort"" -> ""776_isContract"";
""776_abort"" -> ""776_onlyOperator"";
""776_getAuctions"" -> ""776_isActive"";
""776_bid"" -> ""776_isContract"";
""776_bid"" -> ""776_whenNotPaused"";
}
"
0xf0552ae7f174e43479159f87a66417cca31eb54b.sol,VOCC_I054_20181211,"contract VOCC_I054_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I054_20181211 {
label=""VOCC_I054_20181211"";
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
}
"
0x6b31a898f7e711b323a6212eac4ae250e0d6624f.sol,EthLendToken,"contract EthLendToken { string public name = ; string public symbol = ; uint8 public constant decimals = 18; address public owner; uint256 public constant tokensPerEth = 1; uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether; uint256 public constant howManyEtherInWeiToKillContract = 500 ether; uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether; bool public funding = true; uint256 totalTokens = 1000; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Migrate(address indexed _from, address indexed _to, uint256 _value); event Refund(address indexed _from, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function QLinkToken() public { owner = msg.sender; balances[owner]=1000; }",1,"subgraph cluster_401_EthLendToken {
label=""EthLendToken"";
""401_killContract"" [label=""killContract""];
""401_totalSupply"" [label=""totalSupply""];
""401_changeNameSymbol"" [label=""changeNameSymbol""];
""401_approve"" [label=""approve""];
""401_balanceOf"" [label=""balanceOf""];
""401_transferFrom"" [label=""transferFrom""];
""401_mintTo"" [label=""mintTo""];
""401_fallback"" [label=""fallback""];
""401_transfer"" [label=""transfer""];
""401_changeOwner"" [label=""changeOwner""];
""401_QLinkToken"" [label=""QLinkToken""];
}
"
0x74956d3e06b9edfab13f91ac45d8d22420545fd9.sol,TEGTY,"contract TEGTY is owned, SafeMath { string public name; string public symbol; uint public decimals = 8; uint public totalSupply; mapping (address => uint) public balanceOf; mapping (address => mapping (address => uint)) public allowance; mapping (address => uint) public lockInfo; uint constant valueTotal = 20 * 10000 * 10000 * 10 ** 8; uint constant valueSale = valueTotal / 100 * 15; uint constant valueTeam = valueTotal / 100 * 85; uint public minEth = 0.1 ether; uint public maxEth = 1000 ether; uint256 public buyPrice = 5000; uint256 public sellPrice = 1; bool public buyTradeConfir = false; bool public sellTradeConfir = false; uint public saleQuantity = 0; uint public ethQuantity = 0; modifier validAddress(address _address) { assert(0x0 != _address); _; }",1,"subgraph cluster_903_TEGTY {
label=""TEGTY"";
""903_fallback"" [label=""fallback""];
""903_approve"" [label=""approve""];
""903_TEGTY"" [label=""TEGTY""];
""903_starSell"" [label=""starSell""];
""903_stopSell"" [label=""stopSell""];
""903_burnFrom"" [label=""burnFrom""];
""903_burn"" [label=""burn""];
""903_setPrices"" [label=""setPrices""];
""903_starBuy"" [label=""starBuy""];
""903_transferInner"" [label=""transferInner""];
""903_stopBuy"" [label=""stopBuy""];
""903_buy"" [label=""buy""];
""903_sell"" [label=""sell""];
""903_lock"" [label=""lock""];
""903_validTransfer"" [label=""validTransfer""];
""903_transferFrom"" [label=""transferFrom""];
""903_transfer"" [label=""transfer""];
""903_approve"" -> ""903_validAddress"";
""903_buy"" -> ""903_validEth"";
""903_buy"" -> ""903_lock"";
""903_stopBuy"" -> ""903_onlyOwner"";
""903_buy"" -> ""903_safeSub"";
""903_starBuy"" -> ""903_onlyOwner"";
""903_lock"" -> ""903_validAddress"";
""903_starSell"" -> ""903_onlyOwner"";
""903_fallback"" -> ""903_buy"";
""903_stopSell"" -> ""903_onlyOwner"";
""903_transfer"" -> ""903_validTransfer"";
""903_buy"" -> ""903_validQuantity"";
""903_buy"" -> ""903_validPeriod"";
""903_buy"" -> ""903_transferInner"";
""903_setPrices"" -> ""903_onlyOwner"";
""903_transferFrom"" -> ""903_validTransfer"";
""903_transfer"" -> ""903_validAddress"";
""903_buy"" -> ""903_safeAdd"";
""903_sell"" -> ""903_transferFrom"";
""903_transferFrom"" -> ""903_validAddress"";
}
"
0xf442c2f7f9f91bd482fac07ed599ece40ffcc283.sol,HeelToken,"contract HeelToken { string public name=; string public symbol=; uint8 public decimals = 18; uint256 public totalSupply=23000000000*10**uint256(decimals); mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function HeelToken() public { balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_346_HeelToken {
label=""HeelToken"";
""346__transfer"" [label=""_transfer""];
""346_burn"" [label=""burn""];
""346_HeelToken"" [label=""HeelToken""];
""346_approveAndCall"" [label=""approveAndCall""];
""346_burnFrom"" [label=""burnFrom""];
""346_transfer"" [label=""transfer""];
""346_approve"" [label=""approve""];
""346_transferFrom"" [label=""transferFrom""];
""346_transfer"" -> ""346__transfer"";
""346_transferFrom"" -> ""346__transfer"";
""346_approveAndCall"" -> ""346_approve"";
}
"
0x53ce47cbe7f2be0aecd086a70182a98c907d024d.sol,EasyMineIco,"contract EasyMineIco { event TokensSold(address indexed buyer, uint256 amount); event TokensReserved(uint256 amount); event IcoFinished(uint256 burned); struct PriceThreshold { uint256 tokenCount; uint256 price; uint256 tokensSold; }",1,"subgraph cluster_1360_EasyMineIco {
label=""EasyMineIco"";
""1360_setup"" [label=""setup""];
""1360_buyTokens"" [label=""buyTokens""];
""1360_EasyMineIco"" [label=""EasyMineIco""];
""1360_fallback"" [label=""fallback""];
""1360_totalTokensSold"" [label=""totalTokensSold""];
""1360_finalize"" [label=""finalize""];
""1360_maxTokensSold"" [label=""maxTokensSold""];
""1360_cleanup"" [label=""cleanup""];
""1360_updateStage"" [label=""updateStage""];
""1360_reserveTokens"" [label=""reserveTokens""];
""1360_scheduleStart"" [label=""scheduleStart""];
""1360_buyTokens"" -> ""1360_totalTokensSold"";
""1360_reserveTokens"" -> ""1360_atStage"";
""1360_scheduleStart"" -> ""1360_atStage"";
""1360_buyTokens"" -> ""1360_timedTransitions"";
""1360_reserveTokens"" -> ""1360_finalize"";
""1360_setup"" -> ""1360_atStage"";
""1360_fallback"" -> ""1360_buyTokens"";
""1360_updateStage"" -> ""1360_timedTransitions"";
""1360_buyTokens"" -> ""1360_atStage"";
""1360_reserveTokens"" -> ""1360_timedTransitions"";
""1360_cleanup"" -> ""1360_timedTransitions"";
""1360_scheduleStart"" -> ""1360_isOwner"";
""1360_reserveTokens"" -> ""1360_maxTokensSold"";
""1360_cleanup"" -> ""1360_atStage"";
""1360_cleanup"" -> ""1360_isOwner"";
""1360_buyTokens"" -> ""1360_finalize"";
""1360_reserveTokens"" -> ""1360_isSys"";
""1360_reserveTokens"" -> ""1360_totalTokensSold"";
""1360_buyTokens"" -> ""1360_maxTokensSold"";
""1360_fallback"" -> ""1360_timedTransitions"";
""1360_setup"" -> ""1360_isOwner"";
""1360_buyTokens"" -> ""1360_isValidPayload"";
""1360_setup"" -> ""1360_maxTokensSold"";
}
"
0x01e53a2e7122a63845b1c329d4fce8124dda5b06.sol,Loan,contract Loan is Base { struct Creditor { uint Time; uint Invested; },1,"subgraph cluster_496_Loan {
label=""Loan"";
""496_SetPrcntRate"" [label=""SetPrcntRate""];
""496_Wthdraw"" [label=""Wthdraw""];
""496_StartRefound"" [label=""StartRefound""];
""496_initLoan"" [label=""initLoan""];
""496_InvestFund"" [label=""InvestFund""];
""496_CheckProfit"" [label=""CheckProfit""];
""496_ToLend"" [label=""ToLend""];
""496_WithdrawToInvestor"" [label=""WithdrawToInvestor""];
""496_fallback"" [label=""fallback""];
""496_SetScndOwner"" [label=""SetScndOwner""];
""496_SetThrdOwner"" [label=""SetThrdOwner""];
""496_TakeBack"" [label=""TakeBack""];
""496_isOwner"" [label=""isOwner""];
""496_WithdrawToInvestor"" -> ""496_isOwner"";
""496_fallback"" -> ""496_InvestFund"";
""496_TakeBack"" -> ""496_CheckProfit"";
}
"
0xeed30721320b6372128e47dc48122fc2c65c1baa.sol,TestPausedToken,"contract TestPausedToken { address owner; uint256 public totalSupply = 1000000000000000000000000000; string public name = ; string public symbol = ; uint8 public decimals = 18; bool public paused = true; mapping (address => mapping (address => uint256)) allowed; mapping(address => uint256) balances; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); modifier whenNotPaused() { require(!paused); _; }",1,"subgraph cluster_294_TestPausedToken {
label=""TestPausedToken"";
""294_balanceOf"" [label=""balanceOf""];
""294_transferFrom"" [label=""transferFrom""];
""294_allowance"" [label=""allowance""];
""294_setPaused"" [label=""setPaused""];
""294_TestPausedToken"" [label=""TestPausedToken""];
""294_transfer"" [label=""transfer""];
""294_approve"" [label=""approve""];
""294_approve"" -> ""294_whenNotPaused"";
""294_transfer"" -> ""294_whenNotPaused"";
""294_transferFrom"" -> ""294_whenNotPaused"";
}
"
0xee278a3543afbe4c1639b430774537995c6bd995.sol,PDAToken,"contract PDAToken { string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 private initialSupply=36300000000; uint256 public totalSupply; mapping(address => uint256) public balanceOf; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor() public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_375_PDAToken {
label=""PDAToken"";
""375_constructor"" [label=""constructor""];
""375_burnFrom"" [label=""burnFrom""];
""375_transfer"" [label=""transfer""];
""375__transfer"" [label=""_transfer""];
""375_approve"" [label=""approve""];
""375_burn"" [label=""burn""];
""375_transferFrom"" [label=""transferFrom""];
""375_approveAndCall"" [label=""approveAndCall""];
""375_transfer"" -> ""375__transfer"";
""375_transferFrom"" -> ""375__transfer"";
""375_approveAndCall"" -> ""375_approve"";
}
"
0x7038c15f76ad2667837c438c8819fd969899cdbe.sol,Airdrop,"contract Airdrop { function drop(ERC20 token, address[] recipients, uint256[] values) public { for (uint256 i = 0; i < recipients.length; i++) { token.transfer(recipients[i], values[i]); }",1,"subgraph cluster_48_Airdrop {
label=""Airdrop"";
""48_drop"" [label=""drop""];
}
"
0x57cbbf9b3f6c03c1e6b3aab1152c588d05fec5bc.sol,CoinwareToken,"contract CoinwareToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CoinwareToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 260000000000000000000000000; balances[0xa81E21Cb715db6f3CAdd82B69C1dF082dF85C32F] = _totalSupply; Transfer(address(0), 0xa81E21Cb715db6f3CAdd82B69C1dF082dF85C32F , _totalSupply); }",1,"subgraph cluster_543_CoinwareToken {
label=""CoinwareToken"";
""543_transfer"" [label=""transfer""];
""543_CoinwareToken"" [label=""CoinwareToken""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xbd91b8e4d0afb1b7fc19bca93a74a1c531bd125c.sol,IscmToken,contract IscmToken is StandardToken { function () { throw; },1,"subgraph cluster_358_IscmToken {
label=""IscmToken"";
""358_IscmToken"" [label=""IscmToken""];
""358_fallback"" [label=""fallback""];
""358_approveAndCall"" [label=""approveAndCall""];
}
"
0x5744155b0891e09b36d871daf35c04a0f0ef4b9c.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_allowance"" [label=""allowance""];
""256_transfer"" [label=""transfer""];
""256_balanceOf"" [label=""balanceOf""];
""256_transferFrom"" [label=""transferFrom""];
""256_approve"" [label=""approve""];
}
"
0x87b9d30c83317d1c07f49c7583bef7e8eea24107.sol,SecurityTokenZhiFu,"contract SecurityTokenZhiFu { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_463_SecurityTokenZhiFu {
label=""SecurityTokenZhiFu"";
""463_transferOwnership"" [label=""transferOwnership""];
""463_allowance"" [label=""allowance""];
""463_transfer"" [label=""transfer""];
""463_approve"" [label=""approve""];
""463_transferFrom"" [label=""transferFrom""];
""463_constructor"" [label=""constructor""];
""463_setLock"" [label=""setLock""];
""463_balanceOf"" [label=""balanceOf""];
""463_transferOwnership"" -> ""463_onlyOwner"";
""463_setLock"" -> ""463_onlyOwner"";
}
"
0x65731ac534bc0d3fdf3f4bdd2b09cf05044920bc.sol,MetadollarFund,contract MetadollarFund { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1233_MetadollarFund {
label=""MetadollarFund"";
""1233_sellPrice"" [label=""sellPrice""];
""1233_withdraw"" [label=""withdraw""];
""1233_setAdministrator"" [label=""setAdministrator""];
""1233_myDividends"" [label=""myDividends""];
""1233_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1233_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1233_setSymbol"" [label=""setSymbol""];
""1233_myTokens"" [label=""myTokens""];
""1233_totalSupply"" [label=""totalSupply""];
""1233_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1233_sqrt"" [label=""sqrt""];
""1233_buy"" [label=""buy""];
""1233_buyPrice"" [label=""buyPrice""];
""1233_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1233_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1233_sell"" [label=""sell""];
""1233_MetadollarFund"" [label=""MetadollarFund""];
""1233_reinvest"" [label=""reinvest""];
""1233_purchaseTokens"" [label=""purchaseTokens""];
""1233_transfer"" [label=""transfer""];
""1233_dividendsOf"" [label=""dividendsOf""];
""1233_setStakingRequirement"" [label=""setStakingRequirement""];
""1233_balanceOf"" [label=""balanceOf""];
""1233_fallback"" [label=""fallback""];
""1233_setName"" [label=""setName""];
""1233_disableInitialStage"" [label=""disableInitialStage""];
""1233_exit"" [label=""exit""];
""1233_sell"" -> ""1233_onlyBagholders"";
""1233_myTokens"" -> ""1233_balanceOf"";
""1233_withdraw"" -> ""1233_onlyStronghands"";
""1233_transfer"" -> ""1233_tokensToEthereum_"";
""1233_withdraw"" -> ""1233_myDividends"";
""1233_calculateEthereumReceived"" -> ""1233_tokensToEthereum_"";
""1233_calculateTokensReceived"" -> ""1233_ethereumToTokens_"";
""1233_transfer"" -> ""1233_onlyBagholders"";
""1233_reinvest"" -> ""1233_onlyStronghands"";
""1233_reinvest"" -> ""1233_myDividends"";
""1233_buyPrice"" -> ""1233_tokensToEthereum_"";
""1233_myDividends"" -> ""1233_dividendsOf"";
""1233_setSymbol"" -> ""1233_onlyAdministrator"";
""1233_setName"" -> ""1233_onlyAdministrator"";
""1233_sellPrice"" -> ""1233_tokensToEthereum_"";
""1233_reinvest"" -> ""1233_purchaseTokens"";
""1233_transfer"" -> ""1233_myDividends"";
""1233_fallback"" -> ""1233_purchaseTokens"";
""1233_sell"" -> ""1233_tokensToEthereum_"";
""1233_transfer"" -> ""1233_withdraw"";
""1233_setStakingRequirement"" -> ""1233_onlyAdministrator"";
""1233_setAdministrator"" -> ""1233_onlyAdministrator"";
""1233_disableInitialStage"" -> ""1233_onlyAdministrator"";
""1233_exit"" -> ""1233_sell"";
""1233_purchaseTokens"" -> ""1233_ethereumToTokens_"";
""1233_ethereumToTokens_"" -> ""1233_sqrt"";
""1233_exit"" -> ""1233_withdraw"";
""1233_buy"" -> ""1233_purchaseTokens"";
}
"
0x77fa1d1ded3f4bed737e9ae870a6f3605445df9c.sol,CryptoPokemon,contract CryptoPokemon { using SafeMath for uint256; mapping (address => bool) private admins; mapping (uint => uint256) public levels; mapping (uint => bool) private lock; address contractCreator; address devFeeAddress; address tournamentPrizeAddress; function CryptoPokemon () public { contractCreator = msg.sender; devFeeAddress = 0xFb2D26b0caa4C331bd0e101460ec9dbE0A4783A4; tournamentPrizeAddress = 0xC6784e712229087fC91E0c77fcCb6b2F1fDE2Dc2; admins[contractCreator] = true; },1,"subgraph cluster_675_CryptoPokemon {
label=""CryptoPokemon"";
""675_removeLock"" [label=""removeLock""];
""675_getPokemonCurrentPrice"" [label=""getPokemonCurrentPrice""];
""675_deletePokemon"" [label=""deletePokemon""];
""675_GetGamestatus"" [label=""GetGamestatus""];
""675_getPokemonLevel"" [label=""getPokemonLevel""];
""675_getPokemonDetails"" [label=""getPokemonDetails""];
""675_settournamentPrizeAddress"" [label=""settournamentPrizeAddress""];
""675_addPokemon"" [label=""addPokemon""];
""675_removeAdmin"" [label=""removeAdmin""];
""675_pauseGame"" [label=""pauseGame""];
""675_getPokemonOwner"" [label=""getPokemonOwner""];
""675_totalSupply"" [label=""totalSupply""];
""675_unPauseGame"" [label=""unPauseGame""];
""675_addAdmin"" [label=""addAdmin""];
""675_purchasePokemon"" [label=""purchasePokemon""];
""675_setOwner"" [label=""setOwner""];
""675_setdevFeeAddress"" [label=""setdevFeeAddress""];
""675_CryptoPokemon"" [label=""CryptoPokemon""];
""675_setPokemon"" [label=""setPokemon""];
""675_addLock"" [label=""addLock""];
""675_getPokemonLock"" [label=""getPokemonLock""];
""675_addAdmin"" -> ""675_onlyContractCreator"";
""675_settournamentPrizeAddress"" -> ""675_onlyContractCreator"";
""675_removeAdmin"" -> ""675_onlyContractCreator"";
""675_addPokemon"" -> ""675_onlyAdmins"";
""675_setdevFeeAddress"" -> ""675_onlyContractCreator"";
""675_deletePokemon"" -> ""675_onlyContractCreator"";
""675_unPauseGame"" -> ""675_onlyContractCreator"";
""675_setOwner"" -> ""675_onlyContractCreator"";
""675_pauseGame"" -> ""675_onlyContractCreator"";
""675_removeLock"" -> ""675_onlyContractCreator"";
""675_setPokemon"" -> ""675_onlyContractCreator"";
""675_addLock"" -> ""675_onlyContractCreator"";
}
"
0x1fab9d2996767db0ca6af12fd92c1f2aab2675a0.sol,ZethrSlots,contract ZethrSlots is ZethrGame { struct Bet { uint56 tokenValue; uint48 blockNumber; uint8 tier; uint8 numSpins; },1,"subgraph cluster_6991_ZethrSlots {
label=""ZethrSlots"";
""6991_finishBetFrom"" [label=""finishBetFrom""];
""6991_getSpinResults"" [label=""getSpinResults""];
""6991_isBetValid"" [label=""isBetValid""];
""6991_ownerSetJackpotAddress"" [label=""ownerSetJackpotAddress""];
""6991_getLastSpinOutput"" [label=""getLastSpinOutput""];
""6991_getBet"" [label=""getBet""];
""6991_execute"" [label=""execute""];
""6991_maxRandom"" [label=""maxRandom""];
""6991_constructor"" [label=""constructor""];
""6991_getSpinOutput"" [label=""getSpinOutput""];
""6991_random"" [label=""random""];
""6991_getSpinResults"" -> ""6991_random"";
""6991_getLastSpinOutput"" -> ""6991_getSpinOutput"";
""6991_getSpinOutput"" -> ""6991_random"";
""6991_execute"" -> ""6991_isNotPaused"";
""6991_getLastSpinOutput"" -> ""6991_getBet"";
""6991_execute"" -> ""6991_bankrollOnly"";
""6991_execute"" -> ""6991_hasNotBetThisBlock"";
""6991_constructor"" -> ""6991_constructor"";
""6991_execute"" -> ""6991_betIsValid"";
""6991_finishBetFrom"" -> ""6991_getBet"";
""6991_finishBetFrom"" -> ""6991_getSpinResults"";
""6991_execute"" -> ""6991_getBet"";
""6991_random"" -> ""6991_maxRandom"";
""6991_ownerSetJackpotAddress"" -> ""6991_ownerOnly"";
""6991_isBetValid"" -> ""6991_getMaxProfit"";
""6991_execute"" -> ""6991_finishBetFrom"";
}
"
0x4159e265fdfa4e581e9b0b2988346ee7db4f0b7e.sol,BANK_III_PFI_883,"contract BANK_III_PFI_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 416540085732862000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_BANK_III_PFI_883 {
label=""BANK_III_PFI_883"";
""189_transfer"" [label=""transfer""];
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0x74028170d74751878228cda221fd0ac42a830921.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_transferFrom"" [label=""transferFrom""];
""396_burnFrom"" [label=""burnFrom""];
""396_approve"" [label=""approve""];
""396_transfer"" [label=""transfer""];
""396_burn"" [label=""burn""];
""396_approveAndCall"" [label=""approveAndCall""];
""396__transfer"" [label=""_transfer""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_transfer"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transferFrom"" -> ""396__transfer"";
}
"
0xd532375971258953263218994966e2a0a3d5c18a.sol,ZethrDividendCards,"contract ZethrDividendCards is ERC721 { using SafeMath for uint; event Birth(uint tokenId, string name, address owner); event TokenSold(uint tokenId, uint oldPrice, uint newPrice, address prevOwner, address winner, string name); event Transfer(address from, address to, uint tokenId); string public constant NAME = ; string public constant SYMBOL = ; address public BANKROLL; mapping (uint => address) public divCardIndexToOwner; mapping (uint => uint) public divCardRateToIndex; mapping (address => uint) private ownershipDivCardCount; mapping (uint => address) public divCardIndexToApproved; mapping (uint => uint) private divCardIndexToPrice; mapping (address => bool) internal administrators; address public creator; bool public onSale; struct Card { string name; uint percentIncrease; }",1,"subgraph cluster_978_ZethrDividendCards {
label=""ZethrDividendCards"";
""978_transferFrom"" [label=""transferFrom""];
""978_implementsERC721"" [label=""implementsERC721""];
""978__transfer"" [label=""_transfer""];
""978_totalSupply"" [label=""totalSupply""];
""978_receiveDividends"" [label=""receiveDividends""];
""978_createDivCard"" [label=""createDivCard""];
""978_setBankroll"" [label=""setBankroll""];
""978_constructor"" [label=""constructor""];
""978_priceOf"" [label=""priceOf""];
""978_purchase"" [label=""purchase""];
""978_setCreator"" [label=""setCreator""];
""978_balanceOf"" [label=""balanceOf""];
""978_startCardSale"" [label=""startCardSale""];
""978__approved"" [label=""_approved""];
""978_name"" [label=""name""];
""978_getDivCard"" [label=""getDivCard""];
""978_takeOwnership"" [label=""takeOwnership""];
""978_transfer"" [label=""transfer""];
""978_symbol"" [label=""symbol""];
""978__createDivCard"" [label=""_createDivCard""];
""978__addressNotNull"" [label=""_addressNotNull""];
""978__owns"" [label=""_owns""];
""978_ownerOf"" [label=""ownerOf""];
""978_approve"" [label=""approve""];
""978_startCardSale"" -> ""978_onlyCreator"";
""978_transferFrom"" -> ""978_isNotContract"";
""978_transfer"" -> ""978__owns"";
""978_purchase"" -> ""978__addressNotNull"";
""978_takeOwnership"" -> ""978__transfer"";
""978_takeOwnership"" -> ""978__addressNotNull"";
""978_approve"" -> ""978__owns"";
""978_constructor"" -> ""978_createDivCard"";
""978_setCreator"" -> ""978_onlyCreator"";
""978_purchase"" -> ""978__transfer"";
""978_purchase"" -> ""978_isNotContract"";
""978_transferFrom"" -> ""978__transfer"";
""978_transferFrom"" -> ""978__owns"";
""978_transfer"" -> ""978__transfer"";
""978_transfer"" -> ""978_isNotContract"";
""978__createDivCard"" -> ""978__transfer"";
""978_transferFrom"" -> ""978__addressNotNull"";
""978_setBankroll"" -> ""978_isAdmin"";
""978_purchase"" -> ""978_hasStarted"";
""978_takeOwnership"" -> ""978_isNotContract"";
""978_createDivCard"" -> ""978__createDivCard"";
""978_createDivCard"" -> ""978_onlyCreator"";
""978_approve"" -> ""978_isNotContract"";
""978_transfer"" -> ""978__addressNotNull"";
""978_transferFrom"" -> ""978__approved"";
""978_takeOwnership"" -> ""978__approved"";
}
"
0x6ba2cdf1838f95c3cebc42c0b9b94a9d0173d555.sol,Bointt,"contract Bointt is owned { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); function Bointt( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_417_Bointt {
label=""Bointt"";
""417_approve"" [label=""approve""];
""417_Bointt"" [label=""Bointt""];
""417_burnFrom"" [label=""burnFrom""];
""417_burn"" [label=""burn""];
""417__transfer"" [label=""_transfer""];
""417_approveAndCall"" [label=""approveAndCall""];
""417_transferFrom"" [label=""transferFrom""];
""417_transfer"" [label=""transfer""];
""417_transferFrom"" -> ""417__transfer"";
""417_transfer"" -> ""417__transfer"";
""417_approveAndCall"" -> ""417_approve"";
}
"
0xdc0c33a4c10dfdca03e583107eb5520555c86f9e.sol,CryptoProfit,contract CryptoProfit { modifier onlyBagholders { require(myTokens() > 0); _; },1,"subgraph cluster_1182_CryptoProfit {
label=""CryptoProfit"";
""1182_transfer"" [label=""transfer""];
""1182_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1182_totalSupply"" [label=""totalSupply""];
""1182_sellPrice"" [label=""sellPrice""];
""1182_withdraw"" [label=""withdraw""];
""1182_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1182_fallback"" [label=""fallback""];
""1182_sqrt"" [label=""sqrt""];
""1182_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1182_buyPrice"" [label=""buyPrice""];
""1182_myTokens"" [label=""myTokens""];
""1182_balanceOf"" [label=""balanceOf""];
""1182_dividendsOf"" [label=""dividendsOf""];
""1182_sell"" [label=""sell""];
""1182_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1182_exit"" [label=""exit""];
""1182_buy"" [label=""buy""];
""1182_reinvest"" [label=""reinvest""];
""1182_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1182_myDividends"" [label=""myDividends""];
""1182_purchaseTokens"" [label=""purchaseTokens""];
""1182_sell"" -> ""1182_buyPrice"";
""1182_fallback"" -> ""1182_purchaseTokens"";
""1182_transfer"" -> ""1182_tokensToEthereum_"";
""1182_myTokens"" -> ""1182_balanceOf"";
""1182_purchaseTokens"" -> ""1182_buyPrice"";
""1182_transfer"" -> ""1182_onlyBagholders"";
""1182_sell"" -> ""1182_onlyBagholders"";
""1182_sellPrice"" -> ""1182_tokensToEthereum_"";
""1182_reinvest"" -> ""1182_onlyStronghands"";
""1182_ethereumToTokens_"" -> ""1182_sqrt"";
""1182_calculateTokensReceived"" -> ""1182_ethereumToTokens_"";
""1182_withdraw"" -> ""1182_myDividends"";
""1182_myDividends"" -> ""1182_dividendsOf"";
""1182_exit"" -> ""1182_sell"";
""1182_exit"" -> ""1182_withdraw"";
""1182_transfer"" -> ""1182_withdraw"";
""1182_purchaseTokens"" -> ""1182_ethereumToTokens_"";
""1182_buy"" -> ""1182_purchaseTokens"";
""1182_buyPrice"" -> ""1182_tokensToEthereum_"";
""1182_reinvest"" -> ""1182_purchaseTokens"";
""1182_withdraw"" -> ""1182_onlyStronghands"";
""1182_sell"" -> ""1182_tokensToEthereum_"";
""1182_reinvest"" -> ""1182_myDividends"";
""1182_transfer"" -> ""1182_myDividends"";
""1182_calculateEthereumReceived"" -> ""1182_tokensToEthereum_"";
}
"
0x83a611488d53cfcda749c2239c1516ab1c514fe7.sol,PICC_301201,"contract PICC_301201 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 10814019086663000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_PICC_301201 {
label=""PICC_301201"";
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x18bbc8d1ec4ee0414e24eceed8b6a0e1b509b5c4.sol,MetToken,"contract MetToken is Z_StandardToken, Z_Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 internal constant _totalTokenAmount = 1000 * (10 ** 9) * (10 ** 18); uint256 internal constant WEI_PER_ETHER= 1000000000000000000; uint256 internal constant NUM_OF_SALE_STAGES= 5; enum Sale_Status { Initialized_STATUS, Stage0_Sale_Started_STATUS, Stage0_Sale_Stopped_STATUS, Stage1_Sale_Started_STATUS, Stage1_Sale_Stopped_STATUS, Stage2_Sale_Started_STATUS, Stage2_Sale_Stopped_STATUS, Stage3_Sale_Started_STATUS, Stage3_Sale_Stopped_STATUS, Stage4_Sale_Started_STATUS, Stage4_Sale_Stopped_STATUS, Public_Allowed_To_Trade_STATUS, Stage0_Allowed_To_Trade_STATUS, Closed_STATUS }",1,"subgraph cluster_2808_MetToken {
label=""MetToken"";
""2808_stop_StageN_Sale"" [label=""stop_StageN_Sale""];
""2808_start_Public_Trade"" [label=""start_Public_Trade""];
""2808_z_admin_next_status"" [label=""z_admin_next_status""];
""2808_constructor"" [label=""constructor""];
""2808_ContractEtherBalance"" [label=""ContractEtherBalance""];
""2808_list_history_of_token_transfer"" [label=""list_history_of_token_transfer""];
""2808_z_admin_set_sale_price"" [label=""z_admin_set_sale_price""];
""2808_list_history_of_token_transfer_filtered_by_addr"" [label=""list_history_of_token_transfer_filtered_by_addr""];
""2808_list_frozen_accounts"" [label=""list_frozen_accounts""];
""2808_z_admin_unfreeze"" [label=""z_admin_unfreeze""];
""2808_z_admin_remove_admin"" [label=""z_admin_remove_admin""];
""2808_buy"" [label=""buy""];
""2808_z_admin_add_admin"" [label=""z_admin_add_admin""];
""2808_closeContract"" [label=""closeContract""];
""2808_z_admin_withdraw_ether"" [label=""z_admin_withdraw_ether""];
""2808_z_admin_freeze"" [label=""z_admin_freeze""];
""2808_CurrentSalePrice"" [label=""CurrentSalePrice""];
""2808_start_Stage0_Trade"" [label=""start_Stage0_Trade""];
""2808_start_StageN_Sale"" [label=""start_StageN_Sale""];
""2808_z_admin_add_exchange"" [label=""z_admin_add_exchange""];
""2808_list_active_holders_and_balances"" [label=""list_active_holders_and_balances""];
""2808_fallback"" [label=""fallback""];
""2808_transferFrom"" [label=""transferFrom""];
""2808_transfer"" [label=""transfer""];
""2808_transfer"" -> ""2808_validTransaction"";
""2808_buy"" -> ""2808_isAdmin"";
""2808_z_admin_freeze"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_validTransaction"";
""2808_transfer"" -> ""2808_transfer"";
""2808_z_admin_remove_admin"" -> ""2808_onlyOwner"";
""2808_start_Stage0_Trade"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_transferFrom"";
""2808_z_admin_next_status"" -> ""2808_onlyAdmin"";
""2808_z_admin_next_status"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_add_exchange"" -> ""2808_onlyAdmin"";
""2808_start_Public_Trade"" -> ""2808_onlyAdmin"";
""2808_transferFrom"" -> ""2808_transferFromByAdmin"";
""2808_z_admin_add_admin"" -> ""2808_onlyOwner"";
""2808_z_admin_next_status"" -> ""2808_start_StageN_Sale"";
""2808_transferFrom"" -> ""2808_isAdmin"";
""2808_z_admin_withdraw_ether"" -> ""2808_onlyAdmin"";
""2808_z_admin_unfreeze"" -> ""2808_onlyAdmin"";
""2808_z_admin_next_status"" -> ""2808_start_Public_Trade"";
""2808_fallback"" -> ""2808_buy"";
""2808_start_Public_Trade"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_set_sale_price"" -> ""2808_onlyAdmin"";
""2808_closeContract"" -> ""2808_onlyAdmin"";
""2808_buy"" -> ""2808_stop_StageN_Sale"";
""2808_z_admin_next_status"" -> ""2808_closeContract"";
""2808_z_admin_next_status"" -> ""2808_start_Stage0_Trade"";
""2808_buy"" -> ""2808_transferFromByAdmin"";
}
"
0x861a174d677946d8c2bea8f9636a53fde1668215.sol,ExchangeRate,"contract ExchangeRate is Ownable { event RateUpdated(uint timestamp, bytes32 symbol, uint rate); mapping(bytes32 => uint) public rates; function updateRate(string _symbol, uint _rate) public onlyOwner { rates[keccak256(_symbol)] = _rate; RateUpdated(now, keccak256(_symbol), _rate); }",1,"subgraph cluster_1344_ExchangeRate {
label=""ExchangeRate"";
""1344_getRate"" [label=""getRate""];
""1344_updateRate"" [label=""updateRate""];
""1344_updateRates"" [label=""updateRates""];
""1344_updateRate"" -> ""1344_onlyOwner"";
""1344_updateRates"" -> ""1344_onlyOwner"";
}
"
0x680ec9492d8372662dd439294bff2bd373e96309.sol,MyEtherHODL,"contract MyEtherHODL is Ownable { event Hodl(address indexed hodler, uint indexed amount, uint untilTime, uint duration); event Party(address indexed hodler, uint indexed amount, uint duration); event Fee(address indexed hodler, uint indexed amount, uint elapsed); address[] public hodlers; mapping(address => uint) public indexOfHodler; mapping (address => uint) public balanceOf; mapping (address => uint) public lockedUntil; mapping (address => uint) public lockedFor; function get1(uint index) public constant returns(address hodler1, uint balance1, uint lockedUntil1, uint lockedFor1) { hodler1 = hodlers[index]; balance1 = balanceOf[hodler1]; lockedUntil1 = lockedUntil[hodler1]; lockedFor1 = lockedFor[hodler1]; }",1,"subgraph cluster_666_MyEtherHODL {
label=""MyEtherHODL"";
""666_get1"" [label=""get1""];
""666_reclaimToken"" [label=""reclaimToken""];
""666_hodlFor2y"" [label=""hodlFor2y""];
""666_party"" [label=""party""];
""666_hodlersCount"" [label=""hodlersCount""];
""666_get3"" [label=""get3""];
""666_hodlFor"" [label=""hodlFor""];
""666_partyTo"" [label=""partyTo""];
""666_fallback"" [label=""fallback""];
""666_get2"" [label=""get2""];
""666_hodlFor3y"" [label=""hodlFor3y""];
""666_hodlFor1y"" [label=""hodlFor1y""];
""666_hodlFor1y"" -> ""666_hodlFor"";
""666_party"" -> ""666_partyTo"";
""666_hodlFor2y"" -> ""666_hodlFor"";
""666_reclaimToken"" -> ""666_onlyOwner"";
""666_hodlFor3y"" -> ""666_hodlFor"";
""666_fallback"" -> ""666_hodlFor"";
}
"
0x5a086708501251d2c948d767a88379f0b8d8c300.sol,WeduToken,contract WeduToken is ERC20Interface { string private TOKEN_NAME; string private TOKEN_SYMBOL; uint8 private DECIMAL; uint private WEDU_UNIT; address owner; mapping(address => bool) internal blackList; uint private totalSupplyValue; struct BalanceType { uint locked; uint unlocked; },1,"subgraph cluster_1235_WeduToken {
label=""WeduToken"";
""1235_allowance"" [label=""allowance""];
""1235_ownerMigration"" [label=""ownerMigration""];
""1235_addBlackList"" [label=""addBlackList""];
""1235_approve"" [label=""approve""];
""1235_decreaseApproval"" [label=""decreaseApproval""];
""1235_balanceOf"" [label=""balanceOf""];
""1235_balanceOfUnlocked"" [label=""balanceOfUnlocked""];
""1235_transfer"" [label=""transfer""];
""1235_totalSupply"" [label=""totalSupply""];
""1235_decimals"" [label=""decimals""];
""1235_constructor"" [label=""constructor""];
""1235_balanceOfLocked"" [label=""balanceOfLocked""];
""1235_removalBlackList"" [label=""removalBlackList""];
""1235_privateTransfer"" [label=""privateTransfer""];
""1235_unlockBalance"" [label=""unlockBalance""];
""1235_symbol"" [label=""symbol""];
""1235_lockBalance"" [label=""lockBalance""];
""1235_tokenBurn"" [label=""tokenBurn""];
""1235__transfer"" [label=""_transfer""];
""1235_name"" [label=""name""];
""1235_transferFrom"" [label=""transferFrom""];
""1235_tokenIssue"" [label=""tokenIssue""];
""1235_multipleTransfer"" [label=""multipleTransfer""];
""1235_increaseApproval"" [label=""increaseApproval""];
""1235_kill"" [label=""kill""];
""1235_transferFrom"" -> ""1235__transfer"";
""1235_kill"" -> ""1235_onlyOwner"";
""1235_lockBalance"" -> ""1235_onlyOwner"";
""1235_ownerMigration"" -> ""1235_onlyOwner"";
""1235_privateTransfer"" -> ""1235_onlyOwner"";
""1235_tokenIssue"" -> ""1235_onlyOwner"";
""1235_multipleTransfer"" -> ""1235_onlyOwner"";
""1235_addBlackList"" -> ""1235_onlyOwner"";
""1235_tokenBurn"" -> ""1235_onlyOwner"";
""1235_removalBlackList"" -> ""1235_onlyOwner"";
""1235_transfer"" -> ""1235__transfer"";
""1235_unlockBalance"" -> ""1235_onlyOwner"";
}
"
0xaf6dbf545cc245c00b425d02e545b6ecc1527f3d.sol,LSCKcoin,"contract LSCKcoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function LSCKcoin() public { symbol = ; name = ; decimals = 8; _totalSupply = 2100000000000000; balances[0x60f71Dd71aEa773657d75b2884e93c6bCbbADF65] = _totalSupply; Transfer(address(0), 0x60f71Dd71aEa773657d75b2884e93c6bCbbADF65, _totalSupply); }",1,"subgraph cluster_543_LSCKcoin {
label=""LSCKcoin"";
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_allowance"" [label=""allowance""];
""543_LSCKcoin"" [label=""LSCKcoin""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0x73307e983f8843d3e09d320dd4c35cf2783f71f6.sol,CDonToken,"contract CDonToken is ERC20Interface, Owned { using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function CDonToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { symbol = tokenSymbol; name = tokenName; decimals = 18; _totalSupply = initialSupply * 10 ** uint256(decimals); balances[owner] = _totalSupply; Transfer(address(0), owner, _totalSupply); }",1,"subgraph cluster_529_CDonToken {
label=""CDonToken"";
""529_totalSupply"" [label=""totalSupply""];
""529_transfer"" [label=""transfer""];
""529_transferFrom"" [label=""transferFrom""];
""529_approve"" [label=""approve""];
""529_allowance"" [label=""allowance""];
""529_approveAndCall"" [label=""approveAndCall""];
""529_balanceOf"" [label=""balanceOf""];
""529_CDonToken"" [label=""CDonToken""];
}
"
0x1e200a9af1ab6a0d74cd44c489bf65744bc7d961.sol,BountyBG,"contract BountyBG { address public owner; uint256 public bountyCount = 0; uint256 public minBounty = 10 finney; uint256 public bountyFee = 2 finney; uint256 public bountyFeeCount = 0; uint256 public bountyBeneficiariesCount = 2; uint256 public bountyDuration = 30 hours; mapping(uint256 => Bounty) bountyAt; event BountyStatus(string _msg, uint256 _id, address _from, uint256 _amount); event RewardStatus(string _msg, uint256 _id, address _to, uint256 _amount); event ErrorStatus(string _msg, uint256 _id, address _to, uint256 _amount); struct Bounty { uint256 id; address owner; uint256 bounty; uint256 remainingBounty; uint256 startTime; uint256 endTime; bool ended; bool retracted; }",1,"subgraph cluster_551_BountyBG {
label=""BountyBG"";
""551_rewardUser"" [label=""rewardUser""];
""551_getBounty"" [label=""getBounty""];
""551_withdrawFee"" [label=""withdrawFee""];
""551_setMinBounty"" [label=""setMinBounty""];
""551_rewardUsers"" [label=""rewardUsers""];
""551_createBounty"" [label=""createBounty""];
""551_BountyBG"" [label=""BountyBG""];
""551_cancelBounty"" [label=""cancelBounty""];
""551_setBountyDuration"" [label=""setBountyDuration""];
""551_setBountyBeneficiariesCount"" [label=""setBountyBeneficiariesCount""];
""551_getBalance"" [label=""getBalance""];
""551_setBountyDuration"" -> ""551_onlyOwner"";
""551_rewardUser"" -> ""551_onlyOwner"";
""551_withdrawFee"" -> ""551_onlyOwner"";
""551_setMinBounty"" -> ""551_onlyOwner"";
""551_setBountyBeneficiariesCount"" -> ""551_onlyOwner"";
""551_rewardUsers"" -> ""551_onlyOwner"";
}
"
0xb39b66a7273b83bca1f2f618672302485b391f92.sol,ANHUI_ANNUITY_DAO_33_c,"contract ANHUI_ANNUITY_DAO_33_c { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 100000000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_ANHUI_ANNUITY_DAO_33_c {
label=""ANHUI_ANNUITY_DAO_33_c"";
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0x01a922de9af2c1158dd947ea5b794f0dd995c7df.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TokenERC20 {
label=""TokenERC20"";
""361_TokenERC20"" [label=""TokenERC20""];
""361_burn"" [label=""burn""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_burnFrom"" [label=""burnFrom""];
""361_approve"" [label=""approve""];
""361__transfer"" [label=""_transfer""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0xdd5b1e55fd47c039e0d72cc96a216b828cd8f498.sol,BeeBitGold,"contract BeeBitGold is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BeeBitGold() public { symbol = ; name = ; decimals = 18; _totalSupply = 50000000000000000000000000000; balances[0x6F6609ee9212477B6Ea9A39D12fab6f80589F084] = _totalSupply; Transfer(address(0), 0x6F6609ee9212477B6Ea9A39D12fab6f80589F084, _totalSupply); }",1,"subgraph cluster_543_BeeBitGold {
label=""BeeBitGold"";
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferFrom"" [label=""transferFrom""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_approve"" [label=""approve""];
""543_totalSupply"" [label=""totalSupply""];
""543_BeeBitGold"" [label=""BeeBitGold""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0xb3ccb987036d9e93ea895aa78378e137f72a5e84.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_transferFrom"" [label=""transferFrom""];
""396_burn"" [label=""burn""];
""396_TokenERC20"" [label=""TokenERC20""];
""396__transfer"" [label=""_transfer""];
""396_burnFrom"" [label=""burnFrom""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_approve"" [label=""approve""];
""396_transfer"" [label=""transfer""];
""396_transferFrom"" -> ""396__transfer"";
""396_approveAndCall"" -> ""396_approve"";
""396_transfer"" -> ""396__transfer"";
}
"
0x17f93475d2a978f527c3f7c44abf44adfba60d5c.sol,EtherCO2,"contract EtherCO2 { string public name = ; uint256 public decimals = 2; uint256 public totalSupply; string public symbol = ; event Mint(address indexed owner,uint amount); event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function EtherCO2() public { owner = 0x5103bA50f2324c6A80c73867d93B173d94cB11c6; balances[0x5103bA50f2324c6A80c73867d93B173d94cB11c6] = 300000000 * 10**decimals; totalSupply =300000000 * 10**decimals; }",1,"subgraph cluster_319_EtherCO2 {
label=""EtherCO2"";
""319_approve"" [label=""approve""];
""319_setOwner"" [label=""setOwner""];
""319_transfer"" [label=""transfer""];
""319_mint"" [label=""mint""];
""319_transferFrom"" [label=""transferFrom""];
""319_allowance"" [label=""allowance""];
""319_EtherCO2"" [label=""EtherCO2""];
""319_balanceOf"" [label=""balanceOf""];
""319_setOwner"" -> ""319_onlyOwner"";
""319_mint"" -> ""319_onlyOwner"";
}
"
0x32d55157bd2ae652f4b6be48ee4a7a1686d28a3f.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MyAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_649_MyAdvancedToken {
label=""MyAdvancedToken"";
""649_rewardMathGeniuses"" [label=""rewardMathGeniuses""];
""649_mintToken"" [label=""mintToken""];
""649__transfer"" [label=""_transfer""];
""649_setPrices"" [label=""setPrices""];
""649_sell"" [label=""sell""];
""649_buy"" [label=""buy""];
""649_freezeAccount"" [label=""freezeAccount""];
""649_MyAdvancedToken"" [label=""MyAdvancedToken""];
""649_MyAdvancedToken"" -> ""649_TokenERC20"";
""649_freezeAccount"" -> ""649_onlyOwner"";
""649_mintToken"" -> ""649_onlyOwner"";
""649_sell"" -> ""649__transfer"";
""649_setPrices"" -> ""649_onlyOwner"";
""649_buy"" -> ""649__transfer"";
}
"
0x572154643036f421e1f3c054eb9cfa36dd9de4b2.sol,SFI,"contract SFI { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function SFI() public { totalSupply = 100000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_355_SFI {
label=""SFI"";
""355_transferFrom"" [label=""transferFrom""];
""355_burnFrom"" [label=""burnFrom""];
""355_burn"" [label=""burn""];
""355_approve"" [label=""approve""];
""355_transfer"" [label=""transfer""];
""355_SFI"" [label=""SFI""];
""355_approveAndCall"" [label=""approveAndCall""];
""355__transfer"" [label=""_transfer""];
""355_approveAndCall"" -> ""355_approve"";
""355_transfer"" -> ""355__transfer"";
""355_transferFrom"" -> ""355__transfer"";
}
"
0xdef5dce5781220efda3f5235cc6e5dd5a08e22bd.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_approveAndCall"" [label=""approveAndCall""];
""396_approve"" [label=""approve""];
""396_transfer"" [label=""transfer""];
""396__transfer"" [label=""_transfer""];
""396_burn"" [label=""burn""];
""396_burnFrom"" [label=""burnFrom""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_transferFrom"" [label=""transferFrom""];
""396_approveAndCall"" -> ""396_approve"";
""396_transfer"" -> ""396__transfer"";
""396_transferFrom"" -> ""396__transfer"";
}
"
0x4d6ec066345e3466d9e970caad4732983ae4bc2c.sol,NicknameRegistrar,"contract NicknameRegistrar is DSAuth { uint public namePrice = 10 finney; mapping (address => string) public names; mapping (bytes32 => address) internal _addresses; mapping (address => string) public pendingNameTransfers; mapping (bytes32 => bool) internal _inTransfer; modifier onlyUniqueName(string name) { require(!nameTaken(name), ); _; }",1,"subgraph cluster_499_NicknameRegistrar {
label=""NicknameRegistrar"";
""499_nameTaken"" [label=""nameTaken""];
""499_addresses"" [label=""addresses""];
""499_setMyName"" [label=""setMyName""];
""499_hasName"" [label=""hasName""];
""499_getMoney"" [label=""getMoney""];
""499_stringToBytes32"" [label=""stringToBytes32""];
""499_acceptNameTranfer"" [label=""acceptNameTranfer""];
""499_unsetMyName"" [label=""unsetMyName""];
""499_transferMyName"" [label=""transferMyName""];
""499_acceptNameTranfer"" -> ""499_stringToBytes32"";
""499_acceptNameTranfer"" -> ""499_limitedLength"";
""499_setMyName"" -> ""499_onlyUniqueName"";
""499_nameTaken"" -> ""499_stringToBytes32"";
""499_addresses"" -> ""499_stringToBytes32"";
""499_transferMyName"" -> ""499_hasName"";
""499_setMyName"" -> ""499_limitedLength"";
""499_unsetMyName"" -> ""499_stringToBytes32"";
""499_setMyName"" -> ""499_stringToBytes32"";
""499_setMyName"" -> ""499_onlyPaid"";
""499_transferMyName"" -> ""499_onlyPaid"";
""499_transferMyName"" -> ""499_stringToBytes32"";
""499_getMoney"" -> ""499_auth"";
}
"
0xdcb6622cb14e44213092a986d5654ad599e7ebfe.sol,NOWToken,"contract NOWToken is Z_StandardToken, Z_Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 internal constant _totalTokenAmount = 3 * (10 ** 9) * (10 ** 18); uint256 internal constant WEI_PER_ETHER= 1000000000000000000; uint256 internal constant NUM_OF_SALE_STAGES= 5; enum Sale_Status { Initialized_STATUS, Stage0_Sale_Started_STATUS, Stage0_Sale_Stopped_STATUS, Stage1_Sale_Started_STATUS, Stage1_Sale_Stopped_STATUS, Stage2_Sale_Started_STATUS, Stage2_Sale_Stopped_STATUS, Stage3_Sale_Started_STATUS, Stage3_Sale_Stopped_STATUS, Stage4_Sale_Started_STATUS, Stage4_Sale_Stopped_STATUS, Public_Allowed_To_Trade_STATUS, Stage0_Allowed_To_Trade_STATUS, Closed_STATUS }",1,"subgraph cluster_3627_NOWToken {
label=""NOWToken"";
""3627_fallback"" [label=""fallback""];
""3627_list_history_of_token_transfer"" [label=""list_history_of_token_transfer""];
""3627_list_history_of_stage3_sale"" [label=""list_history_of_stage3_sale""];
""3627_z_admin_set_sale_price"" [label=""z_admin_set_sale_price""];
""3627_list_active_holders_and_balances"" [label=""list_active_holders_and_balances""];
""3627_z_admin_remove_admin"" [label=""z_admin_remove_admin""];
""3627_list_history_of_stage0_sale"" [label=""list_history_of_stage0_sale""];
""3627_start_Public_Trade"" [label=""start_Public_Trade""];
""3627_buy"" [label=""buy""];
""3627_list_history_of_stage4_sale"" [label=""list_history_of_stage4_sale""];
""3627_stop_StageN_Sale"" [label=""stop_StageN_Sale""];
""3627_list_frozen_accounts"" [label=""list_frozen_accounts""];
""3627_z_admin_unfreeze"" [label=""z_admin_unfreeze""];
""3627_z_admin_next_status"" [label=""z_admin_next_status""];
""3627_z_admin_add_admin"" [label=""z_admin_add_admin""];
""3627_closeContract"" [label=""closeContract""];
""3627_transferFrom"" [label=""transferFrom""];
""3627_list_history_of_token_transfer_filtered_by_addr"" [label=""list_history_of_token_transfer_filtered_by_addr""];
""3627_constructor"" [label=""constructor""];
""3627_z_admin_freeze"" [label=""z_admin_freeze""];
""3627_simulate_token_sale"" [label=""simulate_token_sale""];
""3627_ContractEtherBalance"" [label=""ContractEtherBalance""];
""3627_start_StageN_Sale"" [label=""start_StageN_Sale""];
""3627_transfer"" [label=""transfer""];
""3627_CurrentSalePrice"" [label=""CurrentSalePrice""];
""3627_start_Stage0_Trade"" [label=""start_Stage0_Trade""];
""3627_list_history_of_stage2_sale"" [label=""list_history_of_stage2_sale""];
""3627_z_admin_withdraw_ether"" [label=""z_admin_withdraw_ether""];
""3627_list_history_of_stage1_sale"" [label=""list_history_of_stage1_sale""];
""3627_z_admin_add_exchange"" [label=""z_admin_add_exchange""];
""3627_buy"" -> ""3627_stop_StageN_Sale"";
""3627_transfer"" -> ""3627_transfer"";
""3627_transfer"" -> ""3627_validTransaction"";
""3627_z_admin_withdraw_ether"" -> ""3627_onlyAdmin"";
""3627_transferFrom"" -> ""3627_isAdmin"";
""3627_buy"" -> ""3627_isAdmin"";
""3627_z_admin_freeze"" -> ""3627_onlyAdmin"";
""3627_z_admin_next_status"" -> ""3627_onlyAdmin"";
""3627_start_Stage0_Trade"" -> ""3627_onlyAdmin"";
""3627_z_admin_add_admin"" -> ""3627_onlyOwner"";
""3627_z_admin_next_status"" -> ""3627_start_StageN_Sale"";
""3627_start_Public_Trade"" -> ""3627_onlyAdmin"";
""3627_z_admin_next_status"" -> ""3627_start_Public_Trade"";
""3627_fallback"" -> ""3627_buy"";
""3627_transferFrom"" -> ""3627_validTransaction"";
""3627_closeContract"" -> ""3627_onlyAdmin"";
""3627_z_admin_set_sale_price"" -> ""3627_onlyAdmin"";
""3627_z_admin_unfreeze"" -> ""3627_onlyAdmin"";
""3627_transferFrom"" -> ""3627_transferFrom"";
""3627_z_admin_next_status"" -> ""3627_start_Stage0_Trade"";
""3627_start_Public_Trade"" -> ""3627_stop_StageN_Sale"";
""3627_z_admin_remove_admin"" -> ""3627_onlyOwner"";
""3627_buy"" -> ""3627_transferFromByAdmin"";
""3627_z_admin_next_status"" -> ""3627_stop_StageN_Sale"";
""3627_z_admin_add_exchange"" -> ""3627_onlyAdmin"";
""3627_z_admin_next_status"" -> ""3627_closeContract"";
""3627_transferFrom"" -> ""3627_transferFromByAdmin"";
}
"
0x582b2489710a4189ad558b6958641789587fcc27.sol,PonziUnlimited,contract PonziUnlimited { modifier onlyBy(address _account) { require(msg.sender == _account); _; },1,"subgraph cluster_857_PonziUnlimited {
label=""PonziUnlimited"";
""857_createReferee"" [label=""createReferee""];
""857_getnumDeposits"" [label=""getnumDeposits""];
""857_getPayout"" [label=""getPayout""];
""857_resetBonuses"" [label=""resetBonuses""];
""857_checkIfReferee"" [label=""checkIfReferee""];
""857_isReferee"" [label=""isReferee""];
""857_resetReferee"" [label=""resetReferee""];
""857_deposit"" [label=""deposit""];
""857_getAccountReferalsStats"" [label=""getAccountReferalsStats""];
""857_getEarliestPosition"" [label=""getEarliestPosition""];
""857_setGainsRate"" [label=""setGainsRate""];
""857_getMaster"" [label=""getMaster""];
""857_getContractMetrics"" [label=""getContractMetrics""];
""857_getCurrentPayoutIndex"" [label=""getCurrentPayoutIndex""];
""857_setActive"" [label=""setActive""];
""857_addNewPayout"" [label=""addNewPayout""];
""857_getReferedCount"" [label=""getReferedCount""];
""857_getPendingReferals"" [label=""getPendingReferals""];
""857_PonziUnlimited"" [label=""PonziUnlimited""];
""857_dispatchGains"" [label=""dispatchGains""];
""857_resetReferedCount"" [label=""resetReferedCount""];
""857_getAddressGains"" [label=""getAddressGains""];
""857_getLastPayouts"" [label=""getLastPayouts""];
""857_computeGainsRate"" [label=""computeGainsRate""];
""857_fallback"" [label=""fallback""];
""857_inviteReferee"" [label=""inviteReferee""];
""857_computeGains"" [label=""computeGains""];
""857_payout"" [label=""payout""];
""857_resetBonuses"" -> ""857_resetReferedCount"";
""857_getAccountReferalsStats"" -> ""857_getPendingReferals"";
""857_setActive"" -> ""857_onlyBy"";
""857_computeGains"" -> ""857_computeGainsRate"";
""857_deposit"" -> ""857_dispatchGains"";
""857_computeGainsRate"" -> ""857_isReferee"";
""857_resetBonuses"" -> ""857_resetReferee"";
""857_payout"" -> ""857_computeGains"";
""857_deposit"" -> ""857_checkIfReferee"";
""857_fallback"" -> ""857_deposit"";
""857_getAccountReferalsStats"" -> ""857_getReferedCount"";
""857_checkIfReferee"" -> ""857_createReferee"";
""857_setActive"" -> ""857_dispatchGains"";
""857_dispatchGains"" -> ""857_payout"";
""857_payout"" -> ""857_addNewPayout"";
""857_setGainsRate"" -> ""857_onlyBy"";
""857_payout"" -> ""857_resetBonuses"";
""857_computeGainsRate"" -> ""857_getReferedCount"";
}
"
0x54f61b89a0bac15c88c6bddf41573ddc1ba5bf6d.sol,LEF,"contract LEF is Owned { string public name=; string public symbol=; uint8 public decimals=18; uint256 public totalSupply; uint256 public sellPrice; uint256 public buyPrice; uint minBalanceForAccounts; mapping (address => uint256) public balanceOf; mapping (address => bool) public frozenAccount; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); function LEF() public { totalSupply = 1000000000000000000000000000; balanceOf[msg.sender] = totalSupply; }",1,"subgraph cluster_383_LEF {
label=""LEF"";
""383_freezeAccount"" [label=""freezeAccount""];
""383_buy"" [label=""buy""];
""383_LEF"" [label=""LEF""];
""383_transfer"" [label=""transfer""];
""383_sell"" [label=""sell""];
""383__transfer"" [label=""_transfer""];
""383_mintToken"" [label=""mintToken""];
""383_setPrices"" [label=""setPrices""];
""383_setMinBalance"" [label=""setMinBalance""];
""383_transfer"" -> ""383_sell"";
""383_setPrices"" -> ""383_onlyOwner"";
""383_freezeAccount"" -> ""383_onlyOwner"";
""383_transfer"" -> ""383__transfer"";
""383_mintToken"" -> ""383_onlyOwner"";
""383_setMinBalance"" -> ""383_onlyOwner"";
}
"
0xa48bb4d1baff077e9c45dab5d70db59537e8ab79.sol,Queue,contract Queue { address constant private PROMO1 = 0x0569E1777f2a7247D27375DB1c6c2AF9CE9a9C15; address constant private PROMO2 = 0xF892380E9880Ad0843bB9600D060BA744365EaDf; address constant private PROMO3 = 0x35aAF2c74F173173d28d1A7ce9d255f639ac1625; address constant private PRIZE = 0xa93E50526B63760ccB5fAD6F5107FA70d36ABC8b; uint constant public PROMO_PERCENT = 2; uint constant public BONUS_PERCENT = 3; struct Deposit { address depositor; uint deposit; uint payout; },1,"subgraph cluster_336_Queue {
label=""Queue"";
""336_pay"" [label=""pay""];
""336_getDepositsCount"" [label=""getDepositsCount""];
""336_fallback"" [label=""fallback""];
""336_getQueueLength"" [label=""getQueueLength""];
""336_fallback"" -> ""336_pay"";
}
"
0xf64196754b5548eef6bfcc434465c0d218309914.sol,RegularToken,"contract RegularToken is Token { function transfer(address _to, uint _value) returns (bool) { if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) { balances[msg.sender] -= _value; balances[_to] += _value; emit Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_268_RegularToken {
label=""RegularToken"";
""268_transferFrom"" [label=""transferFrom""];
""268_balanceOf"" [label=""balanceOf""];
""268_allowance"" [label=""allowance""];
""268_approve"" [label=""approve""];
""268_transfer"" [label=""transfer""];
}
"
0x37e3efe76ee6cec50559bc07565eaf36ddc05467.sol,ControlledToken,"contract ControlledToken is ERC20, Controlled { uint256 constant MAX_UINT256 = 2**256 - 1; event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount); string public name; uint8 public decimals; string public symbol; string public version = ; uint256 public totalSupply; function ControlledToken( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_627_ControlledToken {
label=""ControlledToken"";
""627_allowance"" [label=""allowance""];
""627_isContract"" [label=""isContract""];
""627_generateTokens"" [label=""generateTokens""];
""627_controller"" [label=""controller""];
""627_approve"" [label=""approve""];
""627_claimTokens"" [label=""claimTokens""];
""627_ControlledToken"" [label=""ControlledToken""];
""627_transferFrom"" [label=""transferFrom""];
""627_balanceOf"" [label=""balanceOf""];
""627_fallback"" [label=""fallback""];
""627_destroyTokens"" [label=""destroyTokens""];
""627_transfer"" [label=""transfer""];
""627_transfer"" -> ""627_isContract"";
""627_transferFrom"" -> ""627_isContract"";
""627_destroyTokens"" -> ""627_onlyController"";
""627_destroyTokens"" -> ""627_balanceOf"";
""627_claimTokens"" -> ""627_onlyController"";
""627_fallback"" -> ""627_isContract"";
""627_approve"" -> ""627_isContract"";
""627_generateTokens"" -> ""627_onlyController"";
""627_generateTokens"" -> ""627_balanceOf"";
}
"
0x1db45a09efcdd8955b1c3bb855b5a8d333446bff.sol,Share,"contract Share { bool public pause; address public owner; mapping (address => uint) public holds; mapping (address => uint256) public fullfilled; mapping (address => uint256) public sellPrice; mapping (address => uint) public toSell; uint256 public watermark; event PAUSED(); event STARTED(); event SHARE_TRANSFER(address from, address to, uint amount); event INCOME(uint256); event PRICE_SET(address holder, uint shares, uint256 price, uint sell); event WITHDRAWAL(address owner, uint256 amount); event SELL_HOLDS(address from, address to, uint amount, uint256 price); event SEND_HOLDS(address from, address to, uint amount); modifier onlyOwner() { require(msg.sender == owner); _; }",1,"subgraph cluster_477_Share {
label=""Share"";
""477_setState"" [label=""setState""];
""477_withdrawal"" [label=""withdrawal""];
""477_transferHolds"" [label=""transferHolds""];
""477_fallback"" [label=""fallback""];
""477_onIncome"" [label=""onIncome""];
""477_bonus"" [label=""bonus""];
""477_Share"" [label=""Share""];
""477_transfer"" [label=""transfer""];
""477_setPrice"" [label=""setPrice""];
""477_buyFrom"" [label=""buyFrom""];
""477_withdrawal"" -> ""477_bonus"";
""477_buyFrom"" -> ""477_transferHolds"";
""477_setState"" -> ""477_onlyOwner"";
""477_setPrice"" -> ""477_notPaused"";
""477_buyFrom"" -> ""477_notPaused"";
""477_transfer"" -> ""477_notPaused"";
""477_transfer"" -> ""477_transferHolds"";
""477_withdrawal"" -> ""477_notPaused"";
""477_fallback"" -> ""477_onIncome"";
}
"
0x2a46885f8e02ce11dd21209f3cbc3e91561cfc8a.sol,TMToken,"contract TMToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); constructor(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_TMToken {
label=""TMToken"";
""361_transfer"" [label=""transfer""];
""361__transfer"" [label=""_transfer""];
""361_transferFrom"" [label=""transferFrom""];
""361_constructor"" [label=""constructor""];
""361_burn"" [label=""burn""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_burnFrom"" [label=""burnFrom""];
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0xa29e71cb2e30e8af956d64b025b88a5ca3d7ecd2.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_256_StandardToken {
label=""StandardToken"";
""256_transfer"" [label=""transfer""];
""256_approve"" [label=""approve""];
""256_transferFrom"" [label=""transferFrom""];
""256_allowance"" [label=""allowance""];
""256_balanceOf"" [label=""balanceOf""];
}
"
0x6cb9c98e8e6ab46790b088d29a881008675c23eb.sol,TokenERC20,"contract TokenERC20 { string public name ; string public symbol ; uint8 public decimals = 0; uint256 public totalSupply ; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20() public { totalSupply = 6666; balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_349_TokenERC20 {
label=""TokenERC20"";
""349_approve"" [label=""approve""];
""349__transfer"" [label=""_transfer""];
""349_TokenERC20"" [label=""TokenERC20""];
""349_approveAndCall"" [label=""approveAndCall""];
""349_burnFrom"" [label=""burnFrom""];
""349_transferFrom"" [label=""transferFrom""];
""349_transfer"" [label=""transfer""];
""349_burn"" [label=""burn""];
""349_transfer"" -> ""349__transfer"";
""349_approveAndCall"" -> ""349_approve"";
""349_transferFrom"" -> ""349__transfer"";
}
"
0x4b3b99e956588b54f5841f2fb7c63721e6c7c392.sol,CHOAM,contract CHOAM is Ownable { using SafeMath for uint256; uint256 public constant PLANET_PRICE = 100000000000000000; uint256 public constant FEE_RANGE = 29000000000000000; uint256 public constant FEE_MIN = 5000000000000000; uint256 public constant FEE_SILO = 10000000000000000; uint256 public constant TIMER_STEP = 120; uint256 public constant PAGE_SIZE = 25; address public master; bool public inited = false; uint256 public koef = 1; bool private create_flag = false; uint256 public silo; address public silo_addr = address(0); uint256 public silo_timer = now; struct Player { uint256 balance; uint256 position; uint8 state; uint256 discount; uint256[] planets; },1,"subgraph cluster_1740_CHOAM {
label=""CHOAM"";
""1740_sell_spice_melange"" [label=""sell_spice_melange""];
""1740_get_planet_info"" [label=""get_planet_info""];
""1740_buy_spice_melange"" [label=""buy_spice_melange""];
""1740_fallback"" [label=""fallback""];
""1740_buy_planet"" [label=""buy_planet""];
""1740_get_info"" [label=""get_info""];
""1740_get_len"" [label=""get_len""];
""1740_insert"" [label=""insert""];
""1740_init"" [label=""init""];
""1740_set_koef"" [label=""set_koef""];
""1740_get_planet_price"" [label=""get_planet_price""];
""1740_move"" [label=""move""];
""1740_get_player_state"" [label=""get_player_state""];
""1740_create_planet"" [label=""create_planet""];
""1740_step"" [label=""step""];
""1740_set_master"" [label=""set_master""];
""1740_get_owner_planets"" [label=""get_owner_planets""];
""1740_constructor"" [label=""constructor""];
""1740_set_koef"" -> ""1740_onlyOwner"";
""1740_init"" -> ""1740_onlyOwner"";
""1740_init"" -> ""1740_create_planet"";
""1740_fallback"" -> ""1740_buy_spice_melange"";
""1740_buy_planet"" -> ""1740_create_planet"";
""1740_create_planet"" -> ""1740_insert"";
""1740_set_master"" -> ""1740_onlyOwner"";
}
"
0x51696e028e0fe5416481c28cf1a2626d43680751.sol,IngridIsAHorribleHumanCoin,"contract IngridIsAHorribleHumanCoin is SystemTesterCode { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function IngridIsAHorribleHumanCoin( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_290_IngridIsAHorribleHumanCoin {
label=""IngridIsAHorribleHumanCoin"";
""290_balanceOf"" [label=""balanceOf""];
""290_transfer"" [label=""transfer""];
""290_approve"" [label=""approve""];
""290_IngridIsAHorribleHumanCoin"" [label=""IngridIsAHorribleHumanCoin""];
""290_allowance"" [label=""allowance""];
""290_transferFrom"" [label=""transferFrom""];
}
"
0xa5fd1a791c4dfcaacc963d4f73c6ae5824149ea7.sol,Manageable,"contract Manageable is OwnableInterface, ManageableInterface { mapping (address => bool) managerEnabled; mapping (address => mapping (string => bool)) managerPermissions; event ManagerEnabledEvent(address indexed manager); event ManagerDisabledEvent(address indexed manager); event ManagerPermissionGrantedEvent(address indexed manager, string permission); event ManagerPermissionRevokedEvent(address indexed manager, string permission); function enableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) { require(managerEnabled[_manager] == false); managerEnabled[_manager] = true; ManagerEnabledEvent(_manager); }",1,"subgraph cluster_334_ManageableInterface {
label=""ManageableInterface"";
""334_isManagerAllowed"" [label=""isManagerAllowed""];
}
"
0xce038523e278b6c1344d9e4f735f6064ad7a6032.sol,TokenSwap,"contract TokenSwap is Ownable { HumanStandardToken public ndc; HumanStandardToken public tpt; address public neverdieSigner; uint256 public minSwapAmount = 40; event Swap( address indexed to, address indexed PTaddress, uint256 rate, uint256 amount, uint256 ptAmount ); event BuyNDC( address indexed to, uint256 NDCprice, uint256 value, uint256 amount ); event BuyTPT( address indexed to, uint256 TPTprice, uint256 value, uint256 amount ); function TokenSwap(address _teleportContractAddress, address _neverdieContractAddress, address _signer) public { tpt = HumanStandardToken(_teleportContractAddress); ndc = HumanStandardToken(_neverdieContractAddress); neverdieSigner = _signer; }",1,"subgraph cluster_1128_TokenSwap {
label=""TokenSwap"";
""1128_setMinSwapAmount"" [label=""setMinSwapAmount""];
""1128_withdrawEther"" [label=""withdrawEther""];
""1128_buyTPT"" [label=""buyTPT""];
""1128_fallback"" [label=""fallback""];
""1128_TokenSwap"" [label=""TokenSwap""];
""1128_swap"" [label=""swap""];
""1128_setNeverdieContractAddress"" [label=""setNeverdieContractAddress""];
""1128_kill"" [label=""kill""];
""1128_setNeverdieSignerAddress"" [label=""setNeverdieSignerAddress""];
""1128_receiveApproval"" [label=""receiveApproval""];
""1128_setTeleportContractAddress"" [label=""setTeleportContractAddress""];
""1128_buyNDC"" [label=""buyNDC""];
""1128_swapFor"" [label=""swapFor""];
""1128_withdraw"" [label=""withdraw""];
""1128_kill"" -> ""1128_onlyOwner"";
""1128_withdraw"" -> ""1128_onlyOwner"";
""1128_setMinSwapAmount"" -> ""1128_onlyOwner"";
""1128_withdrawEther"" -> ""1128_onlyOwner"";
""1128_swap"" -> ""1128_swapFor"";
""1128_setTeleportContractAddress"" -> ""1128_onlyOwner"";
""1128_setNeverdieSignerAddress"" -> ""1128_onlyOwner"";
""1128_setNeverdieContractAddress"" -> ""1128_onlyOwner"";
}
"
0xe8d5a2fc2ff2d5de90c98daa6aaed8b250d7965b.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( ) public { totalSupply = 100000000; name = ; decimals = 18; symbol = ; }",1,"subgraph cluster_381_TokenERC20 {
label=""TokenERC20"";
""381_approve"" [label=""approve""];
""381_burnFrom"" [label=""burnFrom""];
""381_TokenERC20"" [label=""TokenERC20""];
""381_transfer"" [label=""transfer""];
""381_burn"" [label=""burn""];
""381_transferFrom"" [label=""transferFrom""];
""381__transfer"" [label=""_transfer""];
""381_approveAndCall"" [label=""approveAndCall""];
""381_approveAndCall"" -> ""381_approve"";
""381_transferFrom"" -> ""381__transfer"";
""381_transfer"" -> ""381__transfer"";
}
"
0x334eec1482109bd802d9e72a447848de3bcc1063.sol,AirDropToken,"contract AirDropToken { event Transfer(address indexed from, address indexed to, uint256 tokens); event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens); string _name; string _symbol; uint8 _decimals; uint256 _totalSupply; bytes32 _rootHash; mapping (address => uint256) _balances; mapping (address => mapping(address => uint256)) _allowed; mapping (uint256 => uint256) _redeemed; function AirDropToken(string name, string symbol, uint8 decimals, bytes32 rootHash, uint256 premine) public { _name = name; _symbol = symbol; _decimals = decimals; _rootHash = rootHash; if (premine > 0) { _balances[msg.sender] = premine; _totalSupply = premine; Transfer(0, msg.sender, premine); }",1,"subgraph cluster_452_AirDropToken {
label=""AirDropToken"";
""452_decimals"" [label=""decimals""];
""452_totalSupply"" [label=""totalSupply""];
""452_balanceOf"" [label=""balanceOf""];
""452_symbol"" [label=""symbol""];
""452_transferFrom"" [label=""transferFrom""];
""452_redeemPackage"" [label=""redeemPackage""];
""452_allowance"" [label=""allowance""];
""452_name"" [label=""name""];
""452_AirDropToken"" [label=""AirDropToken""];
""452_redeemed"" [label=""redeemed""];
""452_approve"" [label=""approve""];
""452_transfer"" [label=""transfer""];
}
"
0xec270e8f52b492dd0c2dcd43fc6f868e78f49f18.sol,multiowned,contract multiowned { struct MultiOwnedOperationPendingState { uint yetNeeded; uint ownersDone; uint index; },1,"subgraph cluster_1123_multiowned {
label=""multiowned"";
""1123_checkOwnerIndex"" [label=""checkOwnerIndex""];
""1123_isOperationActive"" [label=""isOperationActive""];
""1123_amIOwner"" [label=""amIOwner""];
""1123_changeOwner"" [label=""changeOwner""];
""1123_removeOwner"" [label=""removeOwner""];
""1123_isOwner"" [label=""isOwner""];
""1123_getOwners"" [label=""getOwners""];
""1123_hasConfirmed"" [label=""hasConfirmed""];
""1123_makeOwnerBitmapBit"" [label=""makeOwnerBitmapBit""];
""1123_clearPending"" [label=""clearPending""];
""1123_reorganizeOwners"" [label=""reorganizeOwners""];
""1123_revoke"" [label=""revoke""];
""1123_getOwner"" [label=""getOwner""];
""1123_addOwner"" [label=""addOwner""];
""1123_multiowned"" [label=""multiowned""];
""1123_assertOwnersAreConsistent"" [label=""assertOwnersAreConsistent""];
""1123_assertOperationIsConsistent"" [label=""assertOperationIsConsistent""];
""1123_confirmAndCheck"" [label=""confirmAndCheck""];
""1123_changeRequirement"" [label=""changeRequirement""];
""1123_multiowned"" -> ""1123_checkOwnerIndex"";
""1123_confirmAndCheck"" -> ""1123_makeOwnerBitmapBit"";
""1123_confirmAndCheck"" -> ""1123_onlyowner"";
""1123_multiowned"" -> ""1123_multiOwnedValidRequirement"";
""1123_confirmAndCheck"" -> ""1123_isOperationActive"";
""1123_multiowned"" -> ""1123_isOwner"";
""1123_changeRequirement"" -> ""1123_clearPending"";
""1123_revoke"" -> ""1123_makeOwnerBitmapBit"";
""1123_revoke"" -> ""1123_onlyowner"";
""1123_getOwners"" -> ""1123_getOwner"";
""1123_hasConfirmed"" -> ""1123_ownerExists"";
""1123_addOwner"" -> ""1123_checkOwnerIndex"";
""1123_changeOwner"" -> ""1123_checkOwnerIndex"";
""1123_addOwner"" -> ""1123_ownerDoesNotExist"";
""1123_changeOwner"" -> ""1123_clearPending"";
""1123_confirmAndCheck"" -> ""1123_clearPending"";
""1123_changeOwner"" -> ""1123_assertOwnersAreConsistent"";
""1123_clearPending"" -> ""1123_onlyowner"";
""1123_multiowned"" -> ""1123_validNumOwners"";
""1123_changeOwner"" -> ""1123_onlymanyowners"";
""1123_hasConfirmed"" -> ""1123_makeOwnerBitmapBit"";
""1123_changeRequirement"" -> ""1123_multiOwnedValidRequirement"";
""1123_removeOwner"" -> ""1123_validNumOwners"";
""1123_removeOwner"" -> ""1123_reorganizeOwners"";
""1123_makeOwnerBitmapBit"" -> ""1123_checkOwnerIndex"";
""1123_removeOwner"" -> ""1123_onlymanyowners"";
""1123_removeOwner"" -> ""1123_ownerExists"";
""1123_removeOwner"" -> ""1123_multiOwnedValidRequirement"";
""1123_removeOwner"" -> ""1123_clearPending"";
""1123_changeRequirement"" -> ""1123_onlymanyowners"";
""1123_revoke"" -> ""1123_multiOwnedOperationIsActive"";
""1123_amIOwner"" -> ""1123_onlyowner"";
""1123_addOwner"" -> ""1123_assertOwnersAreConsistent"";
""1123_addOwner"" -> ""1123_clearPending"";
""1123_addOwner"" -> ""1123_onlymanyowners"";
""1123_revoke"" -> ""1123_assertOperationIsConsistent"";
""1123_changeOwner"" -> ""1123_ownerExists"";
""1123_addOwner"" -> ""1123_validNumOwners"";
""1123_confirmAndCheck"" -> ""1123_assertOperationIsConsistent"";
""1123_changeOwner"" -> ""1123_ownerDoesNotExist"";
""1123_removeOwner"" -> ""1123_assertOwnersAreConsistent"";
""1123_multiowned"" -> ""1123_assertOwnersAreConsistent"";
""1123_removeOwner"" -> ""1123_checkOwnerIndex"";
""1123_hasConfirmed"" -> ""1123_multiOwnedOperationIsActive"";
}
"
0xdfccdbd82b578cfd862a9f9741b2ddcd2c9b1e22.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_396_TokenERC20 {
label=""TokenERC20"";
""396_transferFrom"" [label=""transferFrom""];
""396__transfer"" [label=""_transfer""];
""396_approve"" [label=""approve""];
""396_burn"" [label=""burn""];
""396_burnFrom"" [label=""burnFrom""];
""396_transfer"" [label=""transfer""];
""396_TokenERC20"" [label=""TokenERC20""];
""396_approveAndCall"" [label=""approveAndCall""];
""396_approveAndCall"" -> ""396_approve"";
""396_transferFrom"" -> ""396__transfer"";
""396_transfer"" -> ""396__transfer"";
}
"
0x6be98275cb30e4d64ebe6be942cd87268dfea3a5.sol,BusinessAutomationUnion,"contract BusinessAutomationUnion is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BusinessAutomationUnion() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000000; balances[0xff60947022E9e3510974646C530445B51540292D] = _totalSupply; Transfer(address(0), 0xff60947022E9e3510974646C530445B51540292D, _totalSupply); }",1,"subgraph cluster_543_BusinessAutomationUnion {
label=""BusinessAutomationUnion"";
""543_balanceOf"" [label=""balanceOf""];
""543_transfer"" [label=""transfer""];
""543_BusinessAutomationUnion"" [label=""BusinessAutomationUnion""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x5c6d8bb345f4299c76f24fc771ef04dd160c4d36.sol,EthCrystal,contract EthCrystal { using SafeMath for *; struct TowersInfoList { string name; uint256 timeLimit; uint256 warriorToTime; uint256 currentRoundID; uint256 timerType; uint256 growthCoefficient; uint256 winnerShare; uint256 nextRound; uint256 dividendShare; mapping (uint256 => TowersInfo) RoundList; },1,"subgraph cluster_1546_EthCrystal {
label=""EthCrystal"";
""1546__playerRoundsInfo"" [label=""_playerRoundsInfo""];
""1546_setNickname"" [label=""setNickname""];
""1546_buyWarriors"" [label=""buyWarriors""];
""1546_referralCashout"" [label=""referralCashout""];
""1546__currentWarriorPrice"" [label=""_currentWarriorPrice""];
""1546_constructor"" [label=""constructor""];
""1546_newRound"" [label=""newRound""];
""1546__playerInfo"" [label=""_playerInfo""];
""1546__playerBalance"" [label=""_playerBalance""];
""1546__currentPlayerAmountUnclaimed"" [label=""_currentPlayerAmountUnclaimed""];
""1546__TowerRoundDetails"" [label=""_TowerRoundDetails""];
""1546__currentPlayerAmountUnclaimedAll"" [label=""_currentPlayerAmountUnclaimedAll""];
""1546_WarriorTotalPrice"" [label=""WarriorTotalPrice""];
""1546_dividendCashout"" [label=""dividendCashout""];
""1546_constructor"" -> ""1546_newRound"";
""1546_buyWarriors"" -> ""1546_newRound"";
""1546__playerRoundsInfo"" -> ""1546__currentPlayerAmountUnclaimed"";
""1546__currentPlayerAmountUnclaimedAll"" -> ""1546__currentPlayerAmountUnclaimed"";
""1546_buyWarriors"" -> ""1546_setNickname"";
}
"
0x848d015af507fb3840fee1078ad3a352e0aba055.sol,PUNCToken,"contract PUNCToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function PUNCToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 10000000000000000000000000; balances[0xF58a749AB4929b462F33b8A07f1e3b568ed8eC43] = _totalSupply; Transfer(address(0), 0xF58a749AB4929b462F33b8A07f1e3b568ed8eC43, _totalSupply); }",1,"subgraph cluster_543_PUNCToken {
label=""PUNCToken"";
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_PUNCToken"" [label=""PUNCToken""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_transfer"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
}
"
0xce7382bf7f277a2b661aaf71408ac65b287305a0.sol,Maccabi,"contract Maccabi is ERC20 { string public standard = ; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping( address => uint256) public balanceOf; mapping( uint => address) public accountIndex; uint accountCount; mapping(address => mapping(address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed spender, uint value); event Message ( address a, uint256 amount ); event Burn(address indexed from, uint256 value); function Maccabi() { uint supply = 15200000000000000; appendTokenHolders( msg.sender ); balanceOf[msg.sender] = supply; totalSupply = supply; name = ; symbol = ; decimals = 8; }",1,"subgraph cluster_540_Maccabi {
label=""Maccabi"";
""540_balanceOf"" [label=""balanceOf""];
""540_burn"" [label=""burn""];
""540_getAccountCount"" [label=""getAccountCount""];
""540_appendTokenHolders"" [label=""appendTokenHolders""];
""540_approve"" [label=""approve""];
""540_totalSupply"" [label=""totalSupply""];
""540_Maccabi"" [label=""Maccabi""];
""540_transfer"" [label=""transfer""];
""540_burnFrom"" [label=""burnFrom""];
""540_approveAndCall"" [label=""approveAndCall""];
""540_transferFrom"" [label=""transferFrom""];
""540_getAddress"" [label=""getAddress""];
""540_allowance"" [label=""allowance""];
""540_transferFrom"" -> ""540_appendTokenHolders"";
""540_transfer"" -> ""540_appendTokenHolders"";
""540_Maccabi"" -> ""540_appendTokenHolders"";
""540_approveAndCall"" -> ""540_approve"";
}
"
0xc317e1a103b5ba8161614c4e69f2bc49165841b3.sol,REALIDVerification,"contract REALIDVerification is Ownable { event AddVerifiedInfo(address useraddress,address orgaddress,uint8 certificateNo,string orgsign,string infoHash,string resultHash); event UpdateVerifiedSign(address orgaddress,address useraddress,string infoHash,uint8 certificateNo,string orgsign); event AddOrgInfo(address orgaddress,string certificate); event UpdateValidOrgInfo(address orgaddress,bool isvalid); event UpdateWebsiteOrg(address orgaddress,string website); struct verifiedInfo{ address validOrg; uint8 certificateNo; string orgSign; string resultHash; uint256 createTime; }",1,"subgraph cluster_608_REALIDVerification {
label=""REALIDVerification"";
""608_updateWebsite"" [label=""updateWebsite""];
""608_addVerifiedInfo"" [label=""addVerifiedInfo""];
""608_addOrgCertificate"" [label=""addOrgCertificate""];
""608_updateValidOrg"" [label=""updateValidOrg""];
""608_addOrg"" [label=""addOrg""];
""608_isvalidOrg"" [label=""isvalidOrg""];
""608_getVerifiedInfo"" [label=""getVerifiedInfo""];
""608_updateVerifiedSign"" [label=""updateVerifiedSign""];
""608_getOrgInfo"" [label=""getOrgInfo""];
""608_getCertificateInfoByNo"" [label=""getCertificateInfoByNo""];
""608_updateVerifiedSign"" -> ""608_onlyValidOrg"";
""608_isvalidOrg"" -> ""608_onlyOwner"";
""608_updateWebsite"" -> ""608_onlyOwner"";
""608_addVerifiedInfo"" -> ""608_onlyValidOrg"";
""608_addOrgCertificate"" -> ""608_onlyValidOrg"";
""608_updateValidOrg"" -> ""608_onlyOwner"";
""608_addOrg"" -> ""608_onlyOwner"";
}
"
0x0d514c490640d6276b5bb5adc52d1453cf11c5a0.sol,Token,contract Token is StandardToken { string public name = ; uint8 public decimals = 18; string public symbol = ; string public version = ; address public mintableAddress; function Token(address sale_address) { balances[msg.sender] = 0; totalSupply = 0; name = name; decimals = decimals; symbol = symbol; mintableAddress = sale_address; allowTransfer = true; createTokens(); },1,"subgraph cluster_73_BasicToken {
label=""BasicToken"";
""73_transfer"" [label=""transfer""];
""73_transferFrom"" [label=""transferFrom""];
""73_allowance"" [label=""allowance""];
""73_approve"" [label=""approve""];
""73_balanceOf"" [label=""balanceOf""];
}
"
0xf0d1a6dfcce7fb23fee76d8ed89e780c5a2c1885.sol,ERC721,contract ERC721 is ERC721Abstract { string constant public name = ; string constant public symbol = ; uint256 public totalSupply; struct Token { uint256 price; uint256 option; },1,"subgraph cluster_314_ERC721 {
label=""ERC721"";
""314__owns"" [label=""_owns""];
""314_transfer"" [label=""transfer""];
""314__approve"" [label=""_approve""];
""314_implementsERC721"" [label=""implementsERC721""];
""314_approve"" [label=""approve""];
""314__approvedFor"" [label=""_approvedFor""];
""314_transferFrom"" [label=""transferFrom""];
""314_ownerOf"" [label=""ownerOf""];
""314_balanceOf"" [label=""balanceOf""];
""314__transfer"" [label=""_transfer""];
""314_transferFrom"" -> ""314__transfer"";
""314_approve"" -> ""314__approve"";
""314_transfer"" -> ""314__transfer"";
""314_approve"" -> ""314__owns"";
""314_transferFrom"" -> ""314__owns"";
""314_transfer"" -> ""314__owns"";
""314_transferFrom"" -> ""314__approvedFor"";
}
"
0x1a699c9d8a34f7a60328bf5f3a3dbf10a3ad5baf.sol,SEAPORT_Portfolio_II_883,"contract SEAPORT_Portfolio_II_883 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 1237146528101310000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_SEAPORT_Portfolio_II_883 {
label=""SEAPORT_Portfolio_II_883"";
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
}
"
0x37eba68380f5a549532f658244f82619ac733c03.sol,VOCC_I042_20181211,"contract VOCC_I042_20181211 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 19800000000000000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_VOCC_I042_20181211 {
label=""VOCC_I042_20181211"";
""189_approve"" [label=""approve""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0x6e5dce687b949b52dad8bb1cc467d0205cb4b6e3.sol,CAC,"contract CAC is StandardToken, BurnableToken, Ownable { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 50000000000 * (10 ** uint256(decimals)); mapping(address => uint256) public balanceLocked; mapping(address => uint256) public lockAtTime; uint public amountRaised; uint256 public buyPrice = 250000; bool public crowdsaleClosed; bool public transferEnabled = true; function CAC() public { totalSupply_ = INITIAL_SUPPLY; balances[msg.sender] = INITIAL_SUPPLY; Transfer(0x0, msg.sender, INITIAL_SUPPLY); }",1,"subgraph cluster_1239_CAC {
label=""CAC"";
""1239_enableTransfer"" [label=""enableTransfer""];
""1239_getFreeBalances"" [label=""getFreeBalances""];
""1239_setPrices"" [label=""setPrices""];
""1239_lockAddress"" [label=""lockAddress""];
""1239_checkLocked"" [label=""checkLocked""];
""1239_CAC"" [label=""CAC""];
""1239__transfer"" [label=""_transfer""];
""1239_transferEx"" [label=""transferEx""];
""1239_transfer"" [label=""transfer""];
""1239_batchTransfer"" [label=""batchTransfer""];
""1239_unlockAddress"" [label=""unlockAddress""];
""1239__lock"" [label=""_lock""];
""1239_safeWithdrawal"" [label=""safeWithdrawal""];
""1239_transferFrom"" [label=""transferFrom""];
""1239_fallback"" [label=""fallback""];
""1239_transferFrom"" -> ""1239_transferFrom"";
""1239_setPrices"" -> ""1239_onlyOwner"";
""1239_transfer"" -> ""1239_transfer"";
""1239_lockAddress"" -> ""1239_onlyOwner"";
""1239_batchTransfer"" -> ""1239_onlyOwner"";
""1239_transferEx"" -> ""1239_onlyOwner"";
""1239_transfer"" -> ""1239_checkLocked"";
""1239_transferEx"" -> ""1239_transfer"";
""1239_fallback"" -> ""1239__transfer"";
""1239_safeWithdrawal"" -> ""1239_onlyOwner"";
""1239__transfer"" -> ""1239__lock"";
""1239_transferFrom"" -> ""1239_checkLocked"";
""1239_enableTransfer"" -> ""1239_onlyOwner"";
""1239_unlockAddress"" -> ""1239_onlyOwner"";
""1239_lockAddress"" -> ""1239__lock"";
}
"
0x282c3971f8041bf4ab8b0d2ad0875e94958f8940.sol,RENAULT_301201,"contract RENAULT_301201 { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 10641072767863300000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_RENAULT_301201 {
label=""RENAULT_301201"";
""189_transferFrom"" [label=""transferFrom""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
}
"
0x52ccb8ebb0f55a592ce67dd49249f6cb0c64a129.sol,Globglogabgalab,"contract Globglogabgalab is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function Globglogabgalab() public { symbol = ; name = ; decimals = 7; _totalSupply = 13370000000000000; balances[0x433a57803f841C5611e5370ad5CD97bf46e25cb6] = _totalSupply; Transfer(address(0), 0x433a57803f841C5611e5370ad5CD97bf46e25cb6, _totalSupply); }",1,"subgraph cluster_543_Globglogabgalab {
label=""Globglogabgalab"";
""543_transfer"" [label=""transfer""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_Globglogabgalab"" [label=""Globglogabgalab""];
""543_fallback"" [label=""fallback""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approve"" [label=""approve""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
}
"
0x2118840b16aaf95a0f0027b7ac32f5986925d935.sol,TokenERC20,"contract TokenERC20 { uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function _transfer(address _from, address _to, uint _value) internal { require(_to != 0x0); require(balanceOf[_from] >= _value); require(balanceOf[_to] + _value > balanceOf[_to]); uint previousBalances = balanceOf[_from] + balanceOf[_to]; balanceOf[_from] -= _value; balanceOf[_to] += _value; Transfer(_from, _to, _value); assert(balanceOf[_from] + balanceOf[_to] == previousBalances); }",1,"subgraph cluster_460_TokenERC20 {
label=""TokenERC20"";
""460_burnFrom"" [label=""burnFrom""];
""460_transfer"" [label=""transfer""];
""460_burn"" [label=""burn""];
""460__transfer"" [label=""_transfer""];
""460_approveAndCall"" [label=""approveAndCall""];
""460_approve"" [label=""approve""];
""460_transferFrom"" [label=""transferFrom""];
""460_transfer"" -> ""460__transfer"";
""460_approveAndCall"" -> ""460_approve"";
""460_transferFrom"" -> ""460__transfer"";
}
"
0x0e16923571c50a48b4f9b3b8319606ef8d6106ae.sol,online_wallet,contract online_wallet { bytes32 keyHash; address owner; bytes32 wallet_id = 0x597f180157564555ffd96235806415573a02ecb0e9af129d1ddc24e53fe00c96; constructor() public { owner = msg.sender; },1,"subgraph cluster_121_online_wallet {
label=""online_wallet"";
""121_clear"" [label=""clear""];
""121_setup_key"" [label=""setup_key""];
""121_fallback"" [label=""fallback""];
""121_get_id"" [label=""get_id""];
""121_constructor"" [label=""constructor""];
""121_withdraw"" [label=""withdraw""];
""121_new_hash"" [label=""new_hash""];
}
"
0x419b8ed155180a8c9c64145e76dad49c0a4efb97.sol,ApproveAndCallToken,"contract ApproveAndCallToken is StandardToken { function approveAndCall(address _spender, uint _value, bytes _data) public returns (bool) { TokenRecipient spender = TokenRecipient(_spender); if (approve(_spender, _value)) { spender.receiveApproval(msg.sender, _value, this, _data); return true; }",1,"subgraph cluster_607_ApproveAndCallToken {
label=""ApproveAndCallToken"";
""607_approveAndCall"" [label=""approveAndCall""];
""607_isContract"" [label=""isContract""];
""607_transferToContract"" [label=""transferToContract""];
""607_transfer"" [label=""transfer""];
""607_transferToContract"" -> ""607_approveAndCall"";
""607_transfer"" -> ""607_transfer"";
""607_transfer"" -> ""607_isContract"";
""607_approveAndCall"" -> ""607_approve"";
""607_transfer"" -> ""607_transferToContract"";
}
"
0x332e68dabba9ac8ac5f9a11423f7e72a8b648d1a.sol,DTDToken,"contract DTDToken is IERC20 { using SafeMath for uint256; string public name = ; string public symbol = ; uint public decimals = 18; uint public _totalSupply = 100000000e18; uint public _tokenLeft = 100000000e18; uint public _round1Limit = 2300000e18; uint public _round2Limit = 5300000e18; uint public _round3Limit = 9800000e18; uint public _developmentReserve = 20200000e18; uint public _endDate = 1544918399; uint public _minInvest = 0.5 ether; uint public _maxInvest = 100 ether; mapping (address => uint256) _investedEth; mapping (address => uint256) balances; mapping (address => mapping(address => uint256)) allowed; address public owner; event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount); modifier onlyOwner { require(msg.sender == owner); _; }",1,"subgraph cluster_794_DTDToken {
label=""DTDToken"";
""794_balanceOf"" [label=""balanceOf""];
""794_destroyDTDToken"" [label=""destroyDTDToken""];
""794_transferFrom"" [label=""transferFrom""];
""794_sendDTDToken"" [label=""sendDTDToken""];
""794_allowance"" [label=""allowance""];
""794_approve"" [label=""approve""];
""794_sendDTDTokenToMultiAddr"" [label=""sendDTDTokenToMultiAddr""];
""794_constructor"" [label=""constructor""];
""794_fallback"" [label=""fallback""];
""794_getPrice"" [label=""getPrice""];
""794_totalSupply"" [label=""totalSupply""];
""794_transfer"" [label=""transfer""];
""794_getTokenDetail"" [label=""getTokenDetail""];
""794_tokensale"" [label=""tokensale""];
""794_sendDTDToken"" -> ""794_onlyOwner"";
""794_sendDTDTokenToMultiAddr"" -> ""794_onlyOwner"";
""794_destroyDTDToken"" -> ""794_onlyOwner"";
""794_tokensale"" -> ""794_getPrice"";
""794_fallback"" -> ""794_tokensale"";
}
"
0x7880ddfa13218bae0a42ea56902de21ff29a82ce.sol,BlockGame,"contract BlockGame is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function BlockGame() public { symbol = ; name = ; decimals = 18; _totalSupply = 3000000000000000000000000000; balances[0x84c5fbD891205c1E4620CAaC0AD5F9CE9A3653bB] = _totalSupply; Transfer(address(0), 0x84c5fbD891205c1E4620CAaC0AD5F9CE9A3653bB, _totalSupply); }",1,"subgraph cluster_543_BlockGame {
label=""BlockGame"";
""543_BlockGame"" [label=""BlockGame""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
}
"
0xaf7188dbaa4e9a25864827cc9b9a72f663017834.sol,HammBones,"contract HammBones is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function HammBones() public { symbol = ; name = ; decimals = 18; _totalSupply = 21000000000000000000000000; balances[0xcE599E08b3cAd353960143c01F6012cbf90C9DA8] = _totalSupply; Transfer(address(0), 0xcE599E08b3cAd353960143c01F6012cbf90C9DA8, _totalSupply); }",1,"subgraph cluster_543_HammBones {
label=""HammBones"";
""543_transferFrom"" [label=""transferFrom""];
""543_HammBones"" [label=""HammBones""];
""543_totalSupply"" [label=""totalSupply""];
""543_balanceOf"" [label=""balanceOf""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_allowance"" [label=""allowance""];
""543_fallback"" [label=""fallback""];
""543_transfer"" [label=""transfer""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x5c89736e9454200141b80c37eb28eaceca2ce8cb.sol,CherryToken,"contract CherryToken is ERC223, ERCAddressFrozenFund { using SafeMath for uint; string internal _name; string internal _symbol; uint8 internal _decimals; uint256 internal _totalSupply; address public fundsWallet; uint256 internal fundsWalletChanged; mapping (address => uint256) internal balances; mapping (address => mapping (address => uint256)) internal allowed; constructor() public { _symbol = ; _name = ; _decimals = 8; _totalSupply = 10000000000000000; balances[msg.sender] = _totalSupply; fundsWallet = msg.sender; owner = msg.sender; fundsWalletChanged = 0; }",1,"subgraph cluster_1340_CherryToken {
label=""CherryToken"";
""1340_transferFrom"" [label=""transferFrom""];
""1340_totalSupply"" [label=""totalSupply""];
""1340_decreaseApproval"" [label=""decreaseApproval""];
""1340_changeFundsWallet"" [label=""changeFundsWallet""];
""1340_fallback"" [label=""fallback""];
""1340_mintToken"" [label=""mintToken""];
""1340_burnToken"" [label=""burnToken""];
""1340_name"" [label=""name""];
""1340_approve"" [label=""approve""];
""1340_decimals"" [label=""decimals""];
""1340_allowance"" [label=""allowance""];
""1340_increaseApproval"" [label=""increaseApproval""];
""1340_isContract"" [label=""isContract""];
""1340_transferdata"" [label=""transferdata""];
""1340_transferMultiple"" [label=""transferMultiple""];
""1340_transfer"" [label=""transfer""];
""1340_symbol"" [label=""symbol""];
""1340_balanceOf"" [label=""balanceOf""];
""1340_constructor"" [label=""constructor""];
""1340_transfer"" -> ""1340_isContract"";
""1340_transferFrom"" -> ""1340_isContract"";
""1340_transferdata"" -> ""1340_isContract"";
""1340_transferMultiple"" -> ""1340_isContract"";
}
"
0x6c61f6343b7420e142fb05f8b86afed3179eb0f0.sol,StandardToken,"contract StandardToken is Token { function transfer(address _to, uint256 _value) returns (bool success) { if (balances[msg.sender] >= _value && _value > 0) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_354_StandardToken {
label=""StandardToken"";
""354_transfer"" [label=""transfer""];
""354_approve"" [label=""approve""];
""354_balanceOf"" [label=""balanceOf""];
""354_transferFrom"" [label=""transferFrom""];
""354_allowance"" [label=""allowance""];
}
"
0x37f0137cb24c315d4f725473697e558d6ccaffaa.sol,CROATIA_WINS,"contract CROATIA_WINS { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 360448278658330000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_CROATIA_WINS {
label=""CROATIA_WINS"";
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
""189_transfer"" [label=""transfer""];
""189_transferFrom"" [label=""transferFrom""];
}
"
0xc83355ef25a104938275b46cffd94bf9917d0691.sol,FUTR,"contract FUTR { uint256 constant MAX_UINT256 = 2**256 - 1; uint256 MAX_SUBMITTED = 500067157619455000000000; uint256 _totalSupply = 0; uint256[] levels = [ 8771929824561400000000, 19895525330179400000000, 37350070784724800000000, 64114776667077800000000, 98400490952792100000000, 148400490952792000000000, 218400490952792000000000, 308400490952792000000000, 415067157619459000000000, 500067157619455000000000 ]; uint256[] ratios = [ 114, 89, 55, 34, 21, 13, 8, 5, 3, 2 ]; uint256 _submitted = 0; uint256 public tier = 0; event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value); event Mined(address indexed _miner, uint _value); event WaitStarted(uint256 endTime); event SwapStarted(uint256 endTime); event MiningStart(uint256 end_time, uint256 swap_time, uint256 swap_end_time); event MiningExtended(uint256 end_time, uint256 swap_time, uint256 swap_end_time); string public name = ; uint8 public decimals = 18; string public symbol = ; bool public swap = false; bool public wait = false; bool public extended = false; uint256 public endTime; uint256 swapTime; uint256 swapEndTime; uint256 endTimeExtended; uint256 swapTimeExtended; uint256 swapEndTimeExtended; uint256 public payRate = 0; uint256 submittedFeesPaid = 0; uint256 penalty = 0; uint256 reservedFees = 0; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; function () external payable { require(msg.sender != address(0) && tier != 10 && swap == false && wait == false); uint256 issued = mint(msg.sender, msg.value); Mined(msg.sender, issued); Transfer(this, msg.sender, issued); }",1,"subgraph cluster_991_FUTR {
label=""FUTR"";
""991__start"" [label=""_start""];
""991_payFees"" [label=""payFees""];
""991_restart"" [label=""restart""];
""991_balanceOf"" [label=""balanceOf""];
""991_submitted"" [label=""submitted""];
""991_transfer"" [label=""transfer""];
""991_allowance"" [label=""allowance""];
""991_balanceMinusFeesOutstanding"" [label=""balanceMinusFeesOutstanding""];
""991__updateState"" [label=""_updateState""];
""991_transferFrom"" [label=""transferFrom""];
""991_currentTier"" [label=""currentTier""];
""991_changeFoundation"" [label=""changeFoundation""];
""991_changeOwner"" [label=""changeOwner""];
""991_approve"" [label=""approve""];
""991_FUTR"" [label=""FUTR""];
""991_changeDev"" [label=""changeDev""];
""991_fallback"" [label=""fallback""];
""991_calulateRate"" [label=""calulateRate""];
""991_calculateTokens"" [label=""calculateTokens""];
""991_totalSupply"" [label=""totalSupply""];
""991_leftInTier"" [label=""leftInTier""];
""991_mint"" [label=""mint""];
""991_fallback"" -> ""991_mint"";
""991_FUTR"" -> ""991__start"";
""991_calculateTokens"" -> ""991_calculateTokens"";
""991_restart"" -> ""991__start"";
""991_transfer"" -> ""991__updateState"";
""991_restart"" -> ""991_payFees"";
""991_payFees"" -> ""991__updateState"";
""991_mint"" -> ""991_calculateTokens"";
""991_transfer"" -> ""991_calulateRate"";
}
"
0xec9a75a532311b6102d91d439e1db055dc9414d9.sol,PD88,contract PD88 is Owned { modifier isHuman() { address _addr = msg.sender; require (_addr == tx.origin); uint256 _codeLength; assembly {_codeLength := extcodesize(_addr)},1,"subgraph cluster_1409_PD88 {
label=""PD88"";
""1409_getFullround"" [label=""getFullround""];
""1409_luckyBuy"" [label=""luckyBuy""];
""1409_withdraw"" [label=""withdraw""];
""1409_updateTimer"" [label=""updateTimer""];
""1409_win"" [label=""win""];
""1409_withdrawOwner"" [label=""withdrawOwner""];
""1409_getDonationPrice"" [label=""getDonationPrice""];
""1409_reducetime"" [label=""reducetime""];
""1409_getTimeLeft"" [label=""getTimeLeft""];
""1409_buyDonation"" [label=""buyDonation""];
""1409_getMyRevenue"" [label=""getMyRevenue""];
""1409_buyDonation"" -> ""1409_isHuman"";
""1409_buyDonation"" -> ""1409_updateTimer"";
""1409_win"" -> ""1409_isHuman"";
""1409_withdrawOwner"" -> ""1409_onlyOwner"";
""1409_buyDonation"" -> ""1409_luckyBuy"";
""1409_getFullround"" -> ""1409_getMyRevenue"";
""1409_withdraw"" -> ""1409_isHuman"";
""1409_reducetime"" -> ""1409_isHuman"";
""1409_withdraw"" -> ""1409_getMyRevenue"";
}
"
0xb39d10435d7d0f2ea26a1c86c42be0fd8a94f59b.sol,TittyBase,"contract TittyBase { event Transfer(address indexed from, address indexed to); event Creation(address indexed from, uint256 tittyId, uint256 wpId); event AddAccessory(uint256 tittyId, uint256 accessoryId); struct Accessory { uint256 id; string name; uint256 price; bool isActive; }",1,"subgraph cluster_394_TittyBase {
label=""TittyBase"";
""394_getAccessory"" [label=""getAccessory""];
""394__changeName"" [label=""_changeName""];
""394__setTittyForSale"" [label=""_setTittyForSale""];
""394_totalAccessories"" [label=""totalAccessories""];
""394_addAccessory"" [label=""addAccessory""];
""394_createTitty"" [label=""createTitty""];
""394__changeTittyPrice"" [label=""_changeTittyPrice""];
""394__transfer"" [label=""_transfer""];
""394_createTitty"" -> ""394__transfer"";
}
"
0x5c3d0012ff81bb9a19d13f8e512d3e72843f0848.sol,RBAC,"contract RBAC { using Roles for Roles.Role; mapping (string => Roles.Role) private roles; event RoleAdded(address indexed operator, string role); event RoleRemoved(address indexed operator, string role); function checkRole(address _operator, string _role) public view { roles[_role].check(_operator); }",1,"subgraph cluster_105_RBAC {
label=""RBAC"";
""105_checkRole"" [label=""checkRole""];
""105_hasRole"" [label=""hasRole""];
""105_removeRole"" [label=""removeRole""];
""105_addRole"" [label=""addRole""];
}
"
0x0374b22e0727302e0d8db783726c7ec4989f88ad.sol,GINI,"contract GINI is ERC20, Ownable, Pausable { using SafeMath for uint256; string public name; string public symbol; uint8 constant public decimals =18; uint256 internal initialSupply; uint256 internal totalSupply_; mapping(address => uint256) internal balances; mapping(address => mapping(address => uint256)) internal allowed; event Burn(address indexed owner, uint256 value); constructor() public { name = ; symbol = ; initialSupply = 122500000; totalSupply_ = initialSupply * 10 ** uint(decimals); balances[owner] = totalSupply_; emit Transfer(address(0), owner, totalSupply_); }",1,"subgraph cluster_812_GINI {
label=""GINI"";
""812_approve"" [label=""approve""];
""812_allowance"" [label=""allowance""];
""812_distribute"" [label=""distribute""];
""812_transfer"" [label=""transfer""];
""812_isContract"" [label=""isContract""];
""812_burn"" [label=""burn""];
""812_totalSupply"" [label=""totalSupply""];
""812_balanceOf"" [label=""balanceOf""];
""812_transferFrom"" [label=""transferFrom""];
""812_constructor"" [label=""constructor""];
""812_approveAndCall"" [label=""approveAndCall""];
""812_claimToken"" [label=""claimToken""];
""812_claimToken"" -> ""812_onlyOwner"";
""812_approve"" -> ""812_whenNotPaused"";
""812_approveAndCall"" -> ""812_approve"";
""812_transfer"" -> ""812_whenNotPaused"";
""812_approveAndCall"" -> ""812_isContract"";
""812_burn"" -> ""812_onlyOwner"";
""812_transferFrom"" -> ""812_whenNotPaused"";
""812_distribute"" -> ""812_onlyOwner"";
}
"
0x5abc07d28dcc3b60a164d57e4e3981a090c5d6de.sol,BOMBBA,"contract BOMBBA is ERC20Interface,Ownable { using SafeMath for uint256; uint256 public totalSupply; mapping(address => uint256) tokenBalances; string public constant name = ; string public constant symbol = ; uint256 public constant decimals = 18; uint256 public constant INITIAL_SUPPLY = 10000000; address ownerWallet; mapping (address => mapping (address => uint256)) allowed; event Debug(string message, address addr, uint256 number); function quaker(address wallet) public { owner = msg.sender; ownerWallet=wallet; totalSupply = INITIAL_SUPPLY * 10 ** 18; tokenBalances[wallet] = INITIAL_SUPPLY * 10 ** 18; }",1,"subgraph cluster_777_BOMBBA {
label=""BOMBBA"";
""777_fallback"" [label=""fallback""];
""777_allowance"" [label=""allowance""];
""777_transferFrom"" [label=""transferFrom""];
""777_approve"" [label=""approve""];
""777_mint"" [label=""mint""];
""777_transfer"" [label=""transfer""];
""777_pullBack"" [label=""pullBack""];
""777_quaker"" [label=""quaker""];
""777_decreaseApproval"" [label=""decreaseApproval""];
""777_balanceOf"" [label=""balanceOf""];
""777_totalSupply"" [label=""totalSupply""];
""777_showMyTokenBalance"" [label=""showMyTokenBalance""];
""777_increaseApproval"" [label=""increaseApproval""];
""777_pullBack"" -> ""777_onlyOwner"";
""777_mint"" -> ""777_onlyOwner"";
}
"
0x882da60a19c67e481481bace4c0aa93080cde3d7.sol,EthTranchePricing,"contract EthTranchePricing is PricingStrategy, Ownable, SafeMathLib { uint public constant MAX_TRANCHES = 10; mapping (address => uint) public preicoAddresses; struct Tranche { uint amount; uint price; }",1,"subgraph cluster_2873_EthTranchePricing {
label=""EthTranchePricing"";
""2873_fallback"" [label=""fallback""];
""2873_getCurrentPrice"" [label=""getCurrentPrice""];
""2873_calculatePrice"" [label=""calculatePrice""];
""2873_getPricingStartsAt"" [label=""getPricingStartsAt""];
""2873_getTranche"" [label=""getTranche""];
""2873_getPricingEndsAt"" [label=""getPricingEndsAt""];
""2873_EthTranchePricing"" [label=""EthTranchePricing""];
""2873_getFirstTranche"" [label=""getFirstTranche""];
""2873_getCurrentTranche"" [label=""getCurrentTranche""];
""2873_setPreicoAddress"" [label=""setPreicoAddress""];
""2873_isSane"" [label=""isSane""];
""2873_getLastTranche"" [label=""getLastTranche""];
""2873_calculatePrice"" -> ""2873_safeMul"";
""2873_getCurrentPrice"" -> ""2873_getCurrentTranche"";
""2873_calculatePrice"" -> ""2873_getCurrentPrice"";
""2873_setPreicoAddress"" -> ""2873_onlyOwner"";
""2873_getPricingStartsAt"" -> ""2873_getFirstTranche"";
""2873_getPricingEndsAt"" -> ""2873_getLastTranche"";
}
"
0xaa6e73f27efdecb282baaba5914dc23a41fc233c.sol,JILTOKEN,"contract JILTOKEN { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_380_JILTOKEN {
label=""JILTOKEN"";
""380__transfer"" [label=""_transfer""];
""380_transfer"" [label=""transfer""];
""380_approveAndCall"" [label=""approveAndCall""];
""380_transferFrom"" [label=""transferFrom""];
""380_burnFrom"" [label=""burnFrom""];
""380_constructor"" [label=""constructor""];
""380_burn"" [label=""burn""];
""380_approve"" [label=""approve""];
""380_transferFrom"" -> ""380__transfer"";
""380_approveAndCall"" -> ""380_approve"";
""380_transfer"" -> ""380__transfer"";
}
"
0x6b0d7b8357bb851de9f1953199c39c7bc4675796.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MyAdvancedToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}",1,"subgraph cluster_551_MyAdvancedToken {
label=""MyAdvancedToken"";
""551_freezeAccount"" [label=""freezeAccount""];
""551_mintToken"" [label=""mintToken""];
""551_MyAdvancedToken"" [label=""MyAdvancedToken""];
""551__transfer"" [label=""_transfer""];
""551_freezeAccount"" -> ""551_onlyOwner"";
""551_mintToken"" -> ""551_onlyOwner"";
""551_MyAdvancedToken"" -> ""551_TokenERC20"";
}
"
0x7897ed74a2448c6d539b64c8b3c9b42fc19abc1f.sol,Hourglass,contract Hourglass { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1311_Hourglass {
label=""Hourglass"";
""1311_setAdministrator"" [label=""setAdministrator""];
""1311_fallback"" [label=""fallback""];
""1311_sellPrice"" [label=""sellPrice""];
""1311_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1311_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1311_disableInitialStage"" [label=""disableInitialStage""];
""1311_exit"" [label=""exit""];
""1311_setName"" [label=""setName""];
""1311_buy"" [label=""buy""];
""1311_Hourglass"" [label=""Hourglass""];
""1311_transfer"" [label=""transfer""];
""1311_sqrt"" [label=""sqrt""];
""1311_myDividends"" [label=""myDividends""];
""1311_balanceOf"" [label=""balanceOf""];
""1311_totalSupply"" [label=""totalSupply""];
""1311_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1311_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1311_setSymbol"" [label=""setSymbol""];
""1311_buyPrice"" [label=""buyPrice""];
""1311_setStakingRequirement"" [label=""setStakingRequirement""];
""1311_sell"" [label=""sell""];
""1311_myTokens"" [label=""myTokens""];
""1311_purchaseTokens"" [label=""purchaseTokens""];
""1311_withdraw"" [label=""withdraw""];
""1311_reinvest"" [label=""reinvest""];
""1311_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1311_dividendsOf"" [label=""dividendsOf""];
""1311_reinvest"" -> ""1311_purchaseTokens"";
""1311_calculateTokensReceived"" -> ""1311_ethereumToTokens_"";
""1311_withdraw"" -> ""1311_onlyStronghands"";
""1311_sellPrice"" -> ""1311_tokensToEthereum_"";
""1311_transfer"" -> ""1311_onlyBagholders"";
""1311_sell"" -> ""1311_tokensToEthereum_"";
""1311_myDividends"" -> ""1311_dividendsOf"";
""1311_reinvest"" -> ""1311_myDividends"";
""1311_purchaseTokens"" -> ""1311_ethereumToTokens_"";
""1311_transfer"" -> ""1311_myDividends"";
""1311_reinvest"" -> ""1311_onlyStronghands"";
""1311_purchaseTokens"" -> ""1311_antiEarlyWhale"";
""1311_exit"" -> ""1311_withdraw"";
""1311_setAdministrator"" -> ""1311_onlyAdministrator"";
""1311_setName"" -> ""1311_onlyAdministrator"";
""1311_withdraw"" -> ""1311_myDividends"";
""1311_transfer"" -> ""1311_tokensToEthereum_"";
""1311_fallback"" -> ""1311_purchaseTokens"";
""1311_setSymbol"" -> ""1311_onlyAdministrator"";
""1311_calculateEthereumReceived"" -> ""1311_tokensToEthereum_"";
""1311_ethereumToTokens_"" -> ""1311_sqrt"";
""1311_disableInitialStage"" -> ""1311_onlyAdministrator"";
""1311_sell"" -> ""1311_onlyBagholders"";
""1311_transfer"" -> ""1311_withdraw"";
""1311_myTokens"" -> ""1311_balanceOf"";
""1311_setStakingRequirement"" -> ""1311_onlyAdministrator"";
""1311_buyPrice"" -> ""1311_tokensToEthereum_"";
""1311_exit"" -> ""1311_sell"";
""1311_buy"" -> ""1311_purchaseTokens"";
}
"
0xd0ffe3496101fd676b646ade429653d7df12edd2.sol,ContractEFT,contract ContractEFT is ERC20Interface { uint256 public constant decimals = 5; string public constant symbol = ; string public constant name = ; uint256 public _totalSupply = formatDecimals(500000000000); address public owner; mapping(address => uint256) private balances; mapping(address => mapping (address => uint256)) private allowed; mapping(address => bool) private approvedInvestorList; mapping(address => uint256) private deposit; uint256 public totalTokenSold = 0; function formatDecimals(uint256 _value) internal pure returns (uint256 ) { return _value * 10 ** decimals; },1,"subgraph cluster_391_ContractEFT {
label=""ContractEFT"";
""391_isApprovedInvestor"" [label=""isApprovedInvestor""];
""391_allowance"" [label=""allowance""];
""391_transfer"" [label=""transfer""];
""391_getDeposit"" [label=""getDeposit""];
""391_transferFrom"" [label=""transferFrom""];
""391_approve"" [label=""approve""];
""391_ContractEFT"" [label=""ContractEFT""];
""391_fallback"" [label=""fallback""];
""391_balanceOf"" [label=""balanceOf""];
""391_totalSupply"" [label=""totalSupply""];
""391_formatDecimals"" [label=""formatDecimals""];
}
"
0x51f4fcf219d79855341f749c0f1008c6066a2f1f.sol,EQU,"contract EQU { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function EQU( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_EQU {
label=""EQU"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_approve"" [label=""approve""];
""361_burn"" [label=""burn""];
""361_transferFrom"" [label=""transferFrom""];
""361_EQU"" [label=""EQU""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_transfer"" -> ""361__transfer"";
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x86d4bc8aebee12a65c376539cd92e42d60c260d0.sol,PublicBank,"contract PublicBank is owned, TokenERC20 { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function PublicBank() TokenERC20(21000000, , ) public { }",1,"subgraph cluster_563_PublicBank {
label=""PublicBank"";
""563_OwnerTransfer"" [label=""OwnerTransfer""];
""563_freezeAccount"" [label=""freezeAccount""];
""563_mintToken"" [label=""mintToken""];
""563__transfer"" [label=""_transfer""];
""563_PublicBank"" [label=""PublicBank""];
""563_OwnerTransfer"" -> ""563_onlyOwner"";
""563_OwnerTransfer"" -> ""563__transfer"";
""563_freezeAccount"" -> ""563_onlyOwner"";
""563_PublicBank"" -> ""563_TokenERC20"";
""563_mintToken"" -> ""563_onlyOwner"";
}
"
0xd3ac627abdc1ce6c27c04b37c86e368f754f2995.sol,GradualPro,contract GradualPro { address constant private FIRST_SUPPORT = 0xf8F04b23dACE12841343ecf0E06124354515cc42; address constant private TECH_SUPPORT = 0x988f1a2fb17414c95f45E2DAaaA40509F5C9088c; uint constant public FIRST_PERCENT = 4; uint constant public TECH_PERCENT = 1; uint constant public MULTIPLIER = 121; uint constant public MAX_LIMIT = 2 ether; struct Deposit { address depositor; uint128 deposit; uint128 expect; },1,"subgraph cluster_385_GradualPro {
label=""GradualPro"";
""385_getQueueLength"" [label=""getQueueLength""];
""385_getDeposit"" [label=""getDeposit""];
""385_fallback"" [label=""fallback""];
""385_pay"" [label=""pay""];
""385_getDepositsCount"" [label=""getDepositsCount""];
""385_getDeposits"" [label=""getDeposits""];
""385_fallback"" -> ""385_pay"";
""385_getDeposits"" -> ""385_getDepositsCount"";
}
"
0x5209647ee5d6247daddae470ccc6a282c642f6d8.sol,ICOStartPromo,"contract ICOStartPromo { string public url = ""https: string public name = ; string public symbol = ; uint8 public decimals = 18; uint256 public totalSupply = 1000000 ether; address private owner; event Transfer(address indexed _from, address indexed _to, uint256 _value); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); modifier onlyOwner() { require(msg.sender == owner); _; }",1,"subgraph cluster_234_ICOStartPromo {
label=""ICOStartPromo"";
""234_setUrl"" [label=""setUrl""];
""234_approve"" [label=""approve""];
""234_fallback"" [label=""fallback""];
""234_setName"" [label=""setName""];
""234_transferFrom"" [label=""transferFrom""];
""234_ICOStartPromo"" [label=""ICOStartPromo""];
""234_destroy"" [label=""destroy""];
""234_allowance"" [label=""allowance""];
""234_balanceOf"" [label=""balanceOf""];
""234_transferOwnership"" [label=""transferOwnership""];
""234_setSymbol"" [label=""setSymbol""];
""234_airdrop"" [label=""airdrop""];
""234_transfer"" [label=""transfer""];
""234_destroy"" -> ""234_onlyOwner"";
""234_transferOwnership"" -> ""234_onlyOwner"";
""234_setUrl"" -> ""234_onlyOwner"";
""234_setSymbol"" -> ""234_onlyOwner"";
""234_setName"" -> ""234_onlyOwner"";
""234_airdrop"" -> ""234_onlyOwner"";
}
"
0x9b481067ef9773d52efd0fb5b665a5dc0c8e1a68.sol,ERCDDAToken,"contract ERCDDAToken { address public owner; string public name; string public symbol; uint8 public decimals = 0; uint256 public totalSupply; event Transfer(address indexed from, address indexed to, uint256 value); event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); mapping (address => uint256) public balanceOf; mapping (address => bool) public frozenAccount; function owned() public { owner = msg.sender; }",1,"subgraph cluster_267_ERCDDAToken {
label=""ERCDDAToken"";
""267_freezeAccount"" [label=""freezeAccount""];
""267__transfer"" [label=""_transfer""];
""267_constructor"" [label=""constructor""];
""267_owned"" [label=""owned""];
""267_burn"" [label=""burn""];
""267_transfer"" [label=""transfer""];
""267_mintToken"" [label=""mintToken""];
""267_transfer"" -> ""267__transfer"";
""267_mintToken"" -> ""267_onlyOwner"";
""267_freezeAccount"" -> ""267_onlyOwner"";
""267_burn"" -> ""267_onlyOwner"";
}
"
0xa5f1dbb0e55bc31f32c6d032bee330288490e722.sol,DayByDayToken,"contract DayByDayToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function DayByDayToken() public { symbol = ; name = ; decimals = 18; _totalSupply = 800000000000000000000000000; balances[0x517b22D299524fe0DDBbc32Cc28C385c732990B3] = _totalSupply; Transfer(address(0), 0x517b22D299524fe0DDBbc32Cc28C385c732990B3, _totalSupply); }",1,"subgraph cluster_543_DayByDayToken {
label=""DayByDayToken"";
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_fallback"" [label=""fallback""];
""543_transferFrom"" [label=""transferFrom""];
""543_totalSupply"" [label=""totalSupply""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_allowance"" [label=""allowance""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_DayByDayToken"" [label=""DayByDayToken""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x5c493a221ae9b49c3e45f2df8a3b34223855c1f4.sol,ERC827Caller,"contract ERC827Caller { function makeCall(address _target, bytes _data) external payable returns (bool) { return _target.call.value(msg.value)(_data); }",1,"subgraph cluster_805_ERC827Caller {
label=""ERC827Caller"";
""805_makeCall"" [label=""makeCall""];
}
"
0x361f5a02be315ed1241d8c2997d1fc35aaa27596.sol,DinarETHCrypto,"contract DinarETHCrypto is ERC20Interface, DinarETHInterface { using SafeMath for uint256; string public symbol = ; string public name = ; string public goldCertVerifier = ""https: uint8 public constant decimals = 8; uint256 public constant DNARtoGoldXchgRate = 10000000; uint256 public constant _totalSupply = 9900000000000000; address public owner; mapping(address => uint256) balances; mapping(address => mapping (address => uint256)) allowed; modifier onlyOwner() { require(msg.sender == owner); _; }",1,"subgraph cluster_699_DinarETHCrypto {
label=""DinarETHCrypto"";
""699_approve"" [label=""approve""];
""699_transferFrom"" [label=""transferFrom""];
""699_setGoldCertVerifier"" [label=""setGoldCertVerifier""];
""699_allowance"" [label=""allowance""];
""699_send"" [label=""send""];
""699_sendFrom"" [label=""sendFrom""];
""699_changeNameSymbol"" [label=""changeNameSymbol""];
""699_increaseApproval"" [label=""increaseApproval""];
""699_transfer"" [label=""transfer""];
""699_DinarETHCrypto"" [label=""DinarETHCrypto""];
""699_decreaseApproval"" [label=""decreaseApproval""];
""699_getGoldXchgRate"" [label=""getGoldXchgRate""];
""699_fallback"" [label=""fallback""];
""699_balanceOf"" [label=""balanceOf""];
""699_transferOwnership"" [label=""transferOwnership""];
""699_totalSupply"" [label=""totalSupply""];
""699_send"" -> ""699_notThisContract"";
""699_send"" -> ""699_transfer"";
""699_transferOwnership"" -> ""699_onlyOwner"";
""699_sendFrom"" -> ""699_transferFrom"";
""699_setGoldCertVerifier"" -> ""699_onlyOwner"";
""699_changeNameSymbol"" -> ""699_onlyOwner"";
""699_sendFrom"" -> ""699_notThisContract"";
""699_transfer"" -> ""699_notThisContract"";
""699_transferFrom"" -> ""699_notThisContract"";
}
"
0x127a78da95f02d9139db64ea7d3f6de355975494.sol,DACToken,contract DACToken { string public name = ; string public symbol = ; uint256 public decimals = 6; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply = 30000000000000000; bool public stopped = false; address owner = 0x1e113613C889C76b792AdfdcbBd155904F3310a5; modifier isOwner { assert(owner == msg.sender); _; },1,"subgraph cluster_437_DACToken {
label=""DACToken"";
""437_airdrop"" [label=""airdrop""];
""437_transfer"" [label=""transfer""];
""437_start"" [label=""start""];
""437_approve"" [label=""approve""];
""437_constructor"" [label=""constructor""];
""437_setName"" [label=""setName""];
""437_stop"" [label=""stop""];
""437_transferFrom"" [label=""transferFrom""];
""437_transferFrom"" -> ""437_isRunning"";
""437_start"" -> ""437_isOwner"";
""437_transferFrom"" -> ""437_isValidAddress"";
""437_stop"" -> ""437_isOwner"";
""437_transfer"" -> ""437_isRunning"";
""437_airdrop"" -> ""437_isRunning"";
""437_approve"" -> ""437_isValidAddress"";
""437_transfer"" -> ""437_isValidAddress"";
""437_setName"" -> ""437_isOwner"";
""437_approve"" -> ""437_isRunning"";
}
"
0xdabd08643935a02fdf49cd6264f8d4de8e1feb69.sol,DAX,"contract DAX { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function DAX( ) public { totalSupply = 200000000000000000000000000; balanceOf[msg.sender] = 200000000000000000000000000; name = ; symbol = ; }",1,"subgraph cluster_349_DAX {
label=""DAX"";
""349_transfer"" [label=""transfer""];
""349_approveAndCall"" [label=""approveAndCall""];
""349_burnFrom"" [label=""burnFrom""];
""349_DAX"" [label=""DAX""];
""349_burn"" [label=""burn""];
""349_transferFrom"" [label=""transferFrom""];
""349__transfer"" [label=""_transfer""];
""349_approve"" [label=""approve""];
""349_transferFrom"" -> ""349__transfer"";
""349_transfer"" -> ""349__transfer"";
""349_approveAndCall"" -> ""349_approve"";
}
"
0x50c367245ae216e0e2699ba9b1d8e1645d8a7e6b.sol,Data,contract Data is Ownable { mapping (address => address) private parent; mapping (address => uint8) public statuses; mapping (address => uint) public referralDeposits; mapping(address => uint256) private balances; mapping(address => uint256) private investorBalances; function parentOf(address _addr) public constant returns (address) { return parent[_addr]; },1,"subgraph cluster_1042_Data {
label=""Data"";
""1042_parentOf"" [label=""parentOf""];
""1042_constructor"" [label=""constructor""];
""1042_statuses"" [label=""statuses""];
""1042_subtrReferralDeposit"" [label=""subtrReferralDeposit""];
""1042_subtrInvestorBalance"" [label=""subtrInvestorBalance""];
""1042_referralDeposits"" [label=""referralDeposits""];
""1042_subtrBalance"" [label=""subtrBalance""];
""1042_investorBalanceOf"" [label=""investorBalanceOf""];
""1042_addInvestorBalance"" [label=""addInvestorBalance""];
""1042_balanceOf"" [label=""balanceOf""];
""1042_setParent"" [label=""setParent""];
""1042_addBalance"" [label=""addBalance""];
""1042_addReferralDeposit"" [label=""addReferralDeposit""];
""1042_setStatus"" [label=""setStatus""];
""1042_addBalance"" -> ""1042_onlyOwner"";
""1042_addInvestorBalance"" -> ""1042_onlyOwner"";
""1042_subtrReferralDeposit"" -> ""1042_onlyOwner"";
""1042_addReferralDeposit"" -> ""1042_onlyOwner"";
""1042_setParent"" -> ""1042_onlyOwner"";
""1042_subtrInvestorBalance"" -> ""1042_onlyOwner"";
""1042_subtrBalance"" -> ""1042_onlyOwner"";
""1042_setStatus"" -> ""1042_onlyOwner"";
}
"
0x126bba3aa97d9f6e98f56705f29ab02f7660b445.sol,EducationTokens,"contract EducationTokens is owned{ using SafeMath for uint256; bool private transferFlag; string public name; uint256 public decimals; string public symbol; string public version; uint256 public totalSupply; uint256 public deployTime; mapping(address => uint256) public balances; mapping(address => mapping(address => uint256)) public allowed; mapping(address => uint256) private userLockedTokens; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Lock(address userAddress, uint256 amount); event Unlock(address userAddress,uint256 amount); event SetFlag(bool flag); constructor() public { transferFlag = true; name = ; decimals = 4; symbol = ; version = ; totalSupply = 2100000000 * 10 ** decimals; owner = msg.sender; deployTime = block.timestamp; balances[msg.sender] = totalSupply; }",1,"subgraph cluster_597_EducationTokens {
label=""EducationTokens"";
""597_tokenLock"" [label=""tokenLock""];
""597_transferFrom"" [label=""transferFrom""];
""597_decimals"" [label=""decimals""];
""597_symbol"" [label=""symbol""];
""597_constructor"" [label=""constructor""];
""597_tokenUnlock"" [label=""tokenUnlock""];
""597_allowance"" [label=""allowance""];
""597_setTransferFlag"" [label=""setTransferFlag""];
""597_approve"" [label=""approve""];
""597_totalSupply"" [label=""totalSupply""];
""597_transfer"" [label=""transfer""];
""597_balanceOf"" [label=""balanceOf""];
""597_name"" [label=""name""];
""597_tokenLock"" -> ""597_balanceOf"";
""597_transferFrom"" -> ""597_balanceOf"";
""597_transferFrom"" -> ""597_canTransfer"";
""597_tokenLock"" -> ""597_onlyOwner"";
""597_transfer"" -> ""597_balanceOf"";
""597_transfer"" -> ""597_canTransfer"";
""597_tokenUnlock"" -> ""597_onlyOwner"";
""597_setTransferFlag"" -> ""597_onlyOwner"";
}
"
0xed462f6d5a89cc5cab505c0549c2a4e7bbd2522b.sol,EVOLUTION2,contract EVOLUTION2 { modifier onlyBagholders() { require(myTokens() > 0); _; },1,"subgraph cluster_1289_EVOLUTION2 {
label=""EVOLUTION2"";
""1289_activateWhitelist"" [label=""activateWhitelist""];
""1289_ethereumToTokens_"" [label=""ethereumToTokens_""];
""1289_setSymbol"" [label=""setSymbol""];
""1289_transfer"" [label=""transfer""];
""1289_buyPrice"" [label=""buyPrice""];
""1289_redistribution"" [label=""redistribution""];
""1289_buy"" [label=""buy""];
""1289_constructor"" [label=""constructor""];
""1289_sell"" [label=""sell""];
""1289_setStakingRequirement"" [label=""setStakingRequirement""];
""1289_reinvest"" [label=""reinvest""];
""1289_disableWhitelist"" [label=""disableWhitelist""];
""1289_sqrt"" [label=""sqrt""];
""1289_calculateEthereumReceived"" [label=""calculateEthereumReceived""];
""1289_fallback"" [label=""fallback""];
""1289_purchaseTokens"" [label=""purchaseTokens""];
""1289_totalEthereumBalance"" [label=""totalEthereumBalance""];
""1289_myDividends"" [label=""myDividends""];
""1289_calculateTokensReceived"" [label=""calculateTokensReceived""];
""1289_dividendsOf"" [label=""dividendsOf""];
""1289_tokensToEthereum_"" [label=""tokensToEthereum_""];
""1289_withdraw"" [label=""withdraw""];
""1289_balanceOf"" [label=""balanceOf""];
""1289_setName"" [label=""setName""];
""1289_exit"" [label=""exit""];
""1289_sellPrice"" [label=""sellPrice""];
""1289_myTokens"" [label=""myTokens""];
""1289_totalSupply"" [label=""totalSupply""];
""1289_setAdministrator"" [label=""setAdministrator""];
""1289_transfer"" -> ""1289_withdraw"";
""1289_buyPrice"" -> ""1289_tokensToEthereum_"";
""1289_reinvest"" -> ""1289_purchaseTokens"";
""1289_reinvest"" -> ""1289_myDividends"";
""1289_myDividends"" -> ""1289_dividendsOf"";
""1289_sell"" -> ""1289_onlyBagholders"";
""1289_sell"" -> ""1289_tokensToEthereum_"";
""1289_setName"" -> ""1289_onlyAdministrator"";
""1289_ethereumToTokens_"" -> ""1289_sqrt"";
""1289_reinvest"" -> ""1289_onlyStronghands"";
""1289_setStakingRequirement"" -> ""1289_onlyAdministrator"";
""1289_calculateTokensReceived"" -> ""1289_ethereumToTokens_"";
""1289_purchaseTokens"" -> ""1289_ethereumToTokens_"";
""1289_sellPrice"" -> ""1289_tokensToEthereum_"";
""1289_fallback"" -> ""1289_purchaseTokens"";
""1289_exit"" -> ""1289_withdraw"";
""1289_buy"" -> ""1289_purchaseTokens"";
""1289_calculateEthereumReceived"" -> ""1289_tokensToEthereum_"";
""1289_transfer"" -> ""1289_myDividends"";
""1289_setAdministrator"" -> ""1289_onlyAdministrator"";
""1289_withdraw"" -> ""1289_onlyStronghands"";
""1289_transfer"" -> ""1289_onlyBagholders"";
""1289_withdraw"" -> ""1289_myDividends"";
""1289_myTokens"" -> ""1289_balanceOf"";
""1289_setSymbol"" -> ""1289_onlyAdministrator"";
""1289_exit"" -> ""1289_sell"";
}
"
0xf0d1a6dfcce7fb23fee76d8ed89e780c5a2c1885.sol,CryptoSportZ,"contract CryptoSportZ is ERC721, Functional, Owned { uint256 public feeGame; enum Status { NOTFOUND, PLAYING, PROCESSING, PAYING, CANCELING }",1,"subgraph cluster_2387_CryptoSportZ {
label=""CryptoSportZ"";
""2387_cancelGame"" [label=""cancelGame""];
""2387_takeFee"" [label=""takeFee""];
""2387_addGame"" [label=""addGame""];
""2387_freezeGame"" [label=""freezeGame""];
""2387_getGameByID"" [label=""getGameByID""];
""2387_fallback"" [label=""fallback""];
""2387_getBetsMas"" [label=""getBetsMas""];
""2387_getTokensByGame"" [label=""getTokensByGame""];
""2387_redeemToken"" [label=""redeemToken""];
""2387_resolveGameByHand"" [label=""resolveGameByHand""];
""2387_getTokenByID"" [label=""getTokenByID""];
""2387_getUserTokensByGame"" [label=""getUserTokensByGame""];
""2387_getSumInByGame"" [label=""getSumInByGame""];
""2387_getPriceTicket"" [label=""getPriceTicket""];
""2387_getCountTokensByGame"" [label=""getCountTokensByGame""];
""2387_getStatGames"" [label=""getStatGames""];
""2387_checkWinNobody"" [label=""checkWinNobody""];
""2387_withdraw"" [label=""withdraw""];
""2387_buyToken"" [label=""buyToken""];
""2387_CryptoSportZ"" [label=""CryptoSportZ""];
""2387_getUserTokens"" [label=""getUserTokens""];
""2387_buyToken"" -> ""2387_timenow"";
""2387_resolveGameByHand"" -> ""2387_timenow"";
""2387_getTokenByID"" -> ""2387_getSumInByGame"";
""2387_resolveGameByHand"" -> ""2387_checkWinNobody"";
""2387_resolveGameByHand"" -> ""2387_onlyAdmin"";
""2387_getUserTokens"" -> ""2387_uint2str"";
""2387_buyToken"" -> ""2387__transfer"";
""2387_freezeGame"" -> ""2387_onlyAdmin"";
""2387_getTokensByGame"" -> ""2387_strConcat"";
""2387_getGameByID"" -> ""2387_getSumInByGame"";
""2387_getGameByID"" -> ""2387_getPriceTicket"";
""2387_getUserTokensByGame"" -> ""2387_strConcat"";
""2387_buyToken"" -> ""2387_getPriceTicket"";
""2387_getPriceTicket"" -> ""2387_timenow"";
""2387_cancelGame"" -> ""2387_timenow"";
""2387_addGame"" -> ""2387_onlyAdmin"";
""2387_getTokensByGame"" -> ""2387_uint2str"";
""2387_cancelGame"" -> ""2387_takeFee"";
""2387_checkWinNobody"" -> ""2387_takeFee"";
""2387_getStatGames"" -> ""2387_uint2str"";
""2387_getUserTokensByGame"" -> ""2387_uint2str"";
""2387_getStatGames"" -> ""2387_timenow"";
""2387_getGameByID"" -> ""2387_timenow"";
""2387_getGameByID"" -> ""2387_getCountTokensByGame"";
""2387_checkWinNobody"" -> ""2387_getSumInByGame"";
""2387_withdraw"" -> ""2387_onlyOwner"";
""2387_getUserTokens"" -> ""2387_strConcat"";
""2387_getStatGames"" -> ""2387_strConcat"";
}
"
0x6faf33c051c0703ad2a6e86b373bb92bb30c8f5c.sol,ClassSize,contract ClassSize { event VoteYes(string note); event VoteNo(string note); string constant proposalText = ; uint16 public votesYes = 0; uint16 public votesNo = 0; function isYesWinning() public view returns(uint8) { if (votesYes >= votesNo) { return 0; },1,"subgraph cluster_63_ClassSize {
label=""ClassSize"";
""63_voteYes"" [label=""voteYes""];
""63_voteNo"" [label=""voteNo""];
""63_isYesWinning"" [label=""isYesWinning""];
}
"
0x5c65a8e333e5b0a932704bee2f28fdcc49d1e837.sol,JawazToken,"contract JawazToken { string public name; string public symbol; uint8 public decimals = 6; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function JawazToken( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_JawazToken {
label=""JawazToken"";
""361_JawazToken"" [label=""JawazToken""];
""361_transferFrom"" [label=""transferFrom""];
""361__transfer"" [label=""_transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361_transfer"" [label=""transfer""];
""361_burn"" [label=""burn""];
""361_approve"" [label=""approve""];
""361_approveAndCall"" [label=""approveAndCall""];
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transferFrom"" -> ""361__transfer"";
}
"
0x184b8e35fea87e75498705ea96f2326db8ee2470.sol,AirDrop,contract AirDrop is Ownable { Token public tokenInstance; constructor(address _tokenAddress) public { tokenInstance = Token(_tokenAddress); },1,"subgraph cluster_233_AirDrop {
label=""AirDrop"";
""233_doAirDrop"" [label=""doAirDrop""];
""233_transferEthToOnwer"" [label=""transferEthToOnwer""];
""233_constructor"" [label=""constructor""];
""233_fallback"" [label=""fallback""];
""233_sendBatch"" [label=""sendBatch""];
""233_kill"" [label=""kill""];
""233_transferEthToOnwer"" -> ""233_onlyOwner"";
""233_doAirDrop"" -> ""233_onlyOwner"";
""233_kill"" -> ""233_onlyOwner"";
""233_sendBatch"" -> ""233_onlyOwner"";
}
"
0x761341ca3b8186323e55c7e801ecbe9b5df41ad0.sol,TokenERC20,"contract TokenERC20 is SafeMath{ string public name; string public symbol; uint8 public decimals = 18; uint256 public _totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor(uint256 initialSupply,string tokenName,string tokenSymbol) public { _totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = _totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_597_TokenERC20 {
label=""TokenERC20"";
""597_approve"" [label=""approve""];
""597_transferFrom"" [label=""transferFrom""];
""597_transfer"" [label=""transfer""];
""597__transfer"" [label=""_transfer""];
""597_approveAndCall"" [label=""approveAndCall""];
""597_constructor"" [label=""constructor""];
""597_burnFrom"" [label=""burnFrom""];
""597_burn"" [label=""burn""];
""597_transfer"" -> ""597__transfer"";
""597_transferFrom"" -> ""597__transfer"";
""597__transfer"" -> ""597_safeAdd"";
""597_approveAndCall"" -> ""597_approve"";
""597_transferFrom"" -> ""597_safeSub"";
""597__transfer"" -> ""597_safeSub"";
""597_burnFrom"" -> ""597_safeSub"";
""597_burn"" -> ""597_safeSub"";
}
"
0xf3bfe4b73faa6393f84f59354ebd71b1c4db53fc.sol,TVToken,contract TVToken { string public name = ; string public symbol = ; uint8 public decimals = 18; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; uint256 public totalSupply; uint256 constant initialSupply = 950007890020; bool public stopped = false; address internal owner = 0x0; modifier ownerOnly { require(owner == msg.sender); _; },1,"subgraph cluster_373_TVToken {
label=""TVToken"";
""373_burn"" [label=""burn""];
""373_start"" [label=""start""];
""373_transferFrom"" [label=""transferFrom""];
""373_mint"" [label=""mint""];
""373_transfer"" [label=""transfer""];
""373_TVToken"" [label=""TVToken""];
""373_stop"" [label=""stop""];
""373_approve"" [label=""approve""];
""373_stop"" -> ""373_ownerOnly"";
""373_transferFrom"" -> ""373_isRunning"";
""373_transfer"" -> ""373_validAddress"";
""373_start"" -> ""373_ownerOnly"";
""373_transfer"" -> ""373_isRunning"";
""373_approve"" -> ""373_isRunning"";
""373_burn"" -> ""373_validAddress"";
""373_approve"" -> ""373_validAddress"";
""373_transferFrom"" -> ""373_validAddress"";
""373_burn"" -> ""373_isRunning"";
}
"
0x5cb654cdec88ee15f9e91c9b3a8cd4266f85c8f7.sol,COINVR,"contract COINVR is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function COINVR() public { symbol = ; name = ; decimals = 18; _totalSupply = 1000000000000000000000000000; balances[0x88F22c8632efFA4beF663A658a0a26F2ba418175] = _totalSupply; Transfer(address(0), 0x88F22c8632efFA4beF663A658a0a26F2ba418175, _totalSupply); }",1,"subgraph cluster_543_COINVR {
label=""COINVR"";
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" [label=""transferFrom""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_fallback"" [label=""fallback""];
""543_approve"" [label=""approve""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_totalSupply"" [label=""totalSupply""];
""543_COINVR"" [label=""COINVR""];
""543_transfer"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
}
"
0x4d66945d0b739574634b59190af51b4fe27858cc.sol,MyToken,"contract MyToken is owned { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function freezeAccount(address target, bool freeze) onlyOwner { frozenAccount[target] = freeze; FrozenFunds(target, freeze); }",1,"subgraph cluster_430_MyToken {
label=""MyToken"";
""430_transferFrom"" [label=""transferFrom""];
""430_burnFrom"" [label=""burnFrom""];
""430_approveAndCall"" [label=""approveAndCall""];
""430_freezeAccount"" [label=""freezeAccount""];
""430_MyToken"" [label=""MyToken""];
""430__transfer"" [label=""_transfer""];
""430_transfer"" [label=""transfer""];
""430_burn"" [label=""burn""];
""430_approve"" [label=""approve""];
""430_transferFrom"" -> ""430__transfer"";
""430_freezeAccount"" -> ""430_onlyOwner"";
""430_transfer"" -> ""430__transfer"";
""430_approveAndCall"" -> ""430_approve"";
}
"
0x571df5a0b5571a3cc7dcbd8185b200426376845f.sol,EBRK,"contract EBRK { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function EBRK( ) public { totalSupply = 100000000000000000000000000; balanceOf[msg.sender] = 100000000000000000000000000; name = ; symbol = ; }",1,"subgraph cluster_349_EBRK {
label=""EBRK"";
""349_burnFrom"" [label=""burnFrom""];
""349_EBRK"" [label=""EBRK""];
""349_approveAndCall"" [label=""approveAndCall""];
""349_burn"" [label=""burn""];
""349_approve"" [label=""approve""];
""349__transfer"" [label=""_transfer""];
""349_transferFrom"" [label=""transferFrom""];
""349_transfer"" [label=""transfer""];
""349_transfer"" -> ""349__transfer"";
""349_transferFrom"" -> ""349__transfer"";
""349_approveAndCall"" -> ""349_approve"";
}
"
0xd389c08bb987dd7daeb31f51fce1b5b73710b38e.sol,MyAdvancedToken,"contract MyAdvancedToken is owned, token { uint256 public sellPrice; uint256 public buyPrice; mapping (address => bool) public frozenAccount; event FrozenFunds(address target, bool frozen); function MyAdvancedToken( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) token(initialSupply, tokenName, decimalUnits, tokenSymbol) {}",1,"subgraph cluster_600_MyAdvancedToken {
label=""MyAdvancedToken"";
""600_setPrices"" [label=""setPrices""];
""600_sell"" [label=""sell""];
""600_MyAdvancedToken"" [label=""MyAdvancedToken""];
""600_mintToken"" [label=""mintToken""];
""600__transfer"" [label=""_transfer""];
""600_fallback"" [label=""fallback""];
""600_freezeAccount"" [label=""freezeAccount""];
""600_MyAdvancedToken"" -> ""600_token"";
""600_fallback"" -> ""600__transfer"";
""600_sell"" -> ""600__transfer"";
""600_freezeAccount"" -> ""600_onlyOwner"";
""600_setPrices"" -> ""600_onlyOwner"";
""600_mintToken"" -> ""600_onlyOwner"";
}
"
0x0298d4d15bc4294386b05e5185d3833fc76924b3.sol,ContractReceiver,contract ContractReceiver { struct TKN { address sender; uint value; bytes data; bytes4 sig; },1,"subgraph cluster_319_ContractReceiver {
label=""ContractReceiver"";
""319_tokenFallback"" [label=""tokenFallback""];
}
"
0x5c0669c6718bf35112d4e643fe80bf7fb06dedeb.sol,NOUR,"contract NOUR { mapping(address => uint256) public balances; mapping(address => mapping (address => uint256)) public allowed; using SafeMath for uint256; address public owner; string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 private constant MAX_UINT256 = 2**256 -1 ; event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens); bool lock = false; constructor( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { owner = msg.sender; balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_463_NOUR {
label=""NOUR"";
""463_allowance"" [label=""allowance""];
""463_constructor"" [label=""constructor""];
""463_balanceOf"" [label=""balanceOf""];
""463_setLock"" [label=""setLock""];
""463_approve"" [label=""approve""];
""463_transfer"" [label=""transfer""];
""463_transferOwnership"" [label=""transferOwnership""];
""463_transferFrom"" [label=""transferFrom""];
""463_setLock"" -> ""463_onlyOwner"";
""463_transferOwnership"" -> ""463_onlyOwner"";
}
"
0x4027c7262554ba72ccc3e346c6b71794299d3b99.sol,CWT,"contract CWT { string public name; string public symbol; uint8 public decimals = 4; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function CWT( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_CWT {
label=""CWT"";
""361_approveAndCall"" [label=""approveAndCall""];
""361_burn"" [label=""burn""];
""361_CWT"" [label=""CWT""];
""361_transfer"" [label=""transfer""];
""361_burnFrom"" [label=""burnFrom""];
""361__transfer"" [label=""_transfer""];
""361_approve"" [label=""approve""];
""361_transferFrom"" [label=""transferFrom""];
""361_transferFrom"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
""361_transfer"" -> ""361__transfer"";
}
"
0x51257ce076e3b4a2c4de2763e442ea2bf2c61e2c.sol,jiangguilong1,"contract jiangguilong1 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function jiangguilong1(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_361_jiangguilong1 {
label=""jiangguilong1"";
""361_approveAndCall"" [label=""approveAndCall""];
""361__transfer"" [label=""_transfer""];
""361_approve"" [label=""approve""];
""361_transferFrom"" [label=""transferFrom""];
""361_burnFrom"" [label=""burnFrom""];
""361_burn"" [label=""burn""];
""361_jiangguilong1"" [label=""jiangguilong1""];
""361_transfer"" [label=""transfer""];
""361_transferFrom"" -> ""361__transfer"";
""361_transfer"" -> ""361__transfer"";
""361_approveAndCall"" -> ""361_approve"";
}
"
0x5575fb6f191ca376de2b36e023d1b1968d870ac9.sol,AquaToken,"contract AquaToken is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function AquaToken() public { symbol = ; name = ; decimals = 8; _totalSupply = 10000000000000000; balances[0x8436702c9251c4dD378A52c917bf40895c5C9872] = _totalSupply; Transfer(address(0), 0x8436702c9251c4dD378A52c917bf40895c5C9872, _totalSupply); }",1,"subgraph cluster_543_AquaToken {
label=""AquaToken"";
""543_AquaToken"" [label=""AquaToken""];
""543_totalSupply"" [label=""totalSupply""];
""543_fallback"" [label=""fallback""];
""543_balanceOf"" [label=""balanceOf""];
""543_transferFrom"" [label=""transferFrom""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_approve"" [label=""approve""];
""543_transfer"" [label=""transfer""];
""543_allowance"" [label=""allowance""];
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x6ab4c5563213ea49d3475d8b53f6fec918871d90.sol,DENMARK_WINS,"contract DENMARK_WINS { mapping (address => uint256) public balanceOf; string public name = ; string public symbol = ; uint8 public decimals = 18 ; uint256 public totalSupply = 1174363746596490000000000000 ; event Transfer(address indexed from, address indexed to, uint256 value); function SimpleERC20Token() public { balanceOf[msg.sender] = totalSupply; emit Transfer(address(0), msg.sender, totalSupply); }",1,"subgraph cluster_189_DENMARK_WINS {
label=""DENMARK_WINS"";
""189_transferFrom"" [label=""transferFrom""];
""189_transfer"" [label=""transfer""];
""189_SimpleERC20Token"" [label=""SimpleERC20Token""];
""189_approve"" [label=""approve""];
}
"
0xee6189995391e82bc48c8bed50285767c60d807f.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_360_TokenERC20 {
label=""TokenERC20"";
""360_approveAndCall"" [label=""approveAndCall""];
""360_burn"" [label=""burn""];
""360__transfer"" [label=""_transfer""];
""360_TokenERC20"" [label=""TokenERC20""];
""360_transferFrom"" [label=""transferFrom""];
""360_approve"" [label=""approve""];
""360_transfer"" [label=""transfer""];
""360_burnFrom"" [label=""burnFrom""];
""360_transferFrom"" -> ""360__transfer"";
""360_approveAndCall"" -> ""360_approve"";
""360_transfer"" -> ""360__transfer"";
}
"
0x4839e3de8737769e0f93f176d157dca5e48b7662.sol,CPCToken,"contract CPCToken is EIP20Interface { uint256 constant private MAX_UINT256 = 2**256 - 1; mapping (address => uint256) public balances; mapping (address => mapping (address => uint256)) public allowed; string public name; uint8 public decimals; string public symbol; function CPCToken( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public { balances[msg.sender] = _initialAmount; totalSupply = _initialAmount; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; }",1,"subgraph cluster_289_CPCToken {
label=""CPCToken"";
""289_transferFrom"" [label=""transferFrom""];
""289_transfer"" [label=""transfer""];
""289_allowance"" [label=""allowance""];
""289_balanceOf"" [label=""balanceOf""];
""289_CPCToken"" [label=""CPCToken""];
""289_approve"" [label=""approve""];
}
"
0x4b96090b1653ec92fd47337593e8a99b4cf902a1.sol,RegularToken,"contract RegularToken is Token { function transfer(address _to, uint _value) returns (bool) { if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; }",1,"subgraph cluster_268_RegularToken {
label=""RegularToken"";
""268_transferFrom"" [label=""transferFrom""];
""268_transfer"" [label=""transfer""];
""268_approve"" [label=""approve""];
""268_balanceOf"" [label=""balanceOf""];
""268_allowance"" [label=""allowance""];
}
"
0x3fcf5261c035c26fd2644955968bc940f1b1dc78.sol,EdwinCToken,"contract EdwinCToken { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { initialSupply = 21000000000; totalSupply = 21000000000; balanceOf[msg.sender] = totalSupply; tokenName = ; tokenSymbol = ; }",1,"subgraph cluster_359_EdwinCToken {
label=""EdwinCToken"";
""359_transferFrom"" [label=""transferFrom""];
""359_TokenERC20"" [label=""TokenERC20""];
""359__transfer"" [label=""_transfer""];
""359_approveAndCall"" [label=""approveAndCall""];
""359_burnFrom"" [label=""burnFrom""];
""359_approve"" [label=""approve""];
""359_burn"" [label=""burn""];
""359_transfer"" [label=""transfer""];
""359_transfer"" -> ""359__transfer"";
""359_transferFrom"" -> ""359__transfer"";
""359_approveAndCall"" -> ""359_approve"";
}
"
0x480b94c1c794299157765988746cd97bea20a9b9.sol,TasnimCoin,"contract TasnimCoin { string public name; string public symbol; uint8 public decimals = 3; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); event Burn(address indexed from, uint256 value); constructor( ) public { totalSupply = 1000000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_378_TasnimCoin {
label=""TasnimCoin"";
""378_transferFrom"" [label=""transferFrom""];
""378_approve"" [label=""approve""];
""378_burn"" [label=""burn""];
""378_approveAndCall"" [label=""approveAndCall""];
""378_burnFrom"" [label=""burnFrom""];
""378_transfer"" [label=""transfer""];
""378__transfer"" [label=""_transfer""];
""378_constructor"" [label=""constructor""];
""378_transfer"" -> ""378__transfer"";
""378_transferFrom"" -> ""378__transfer"";
""378_approveAndCall"" -> ""378_approve"";
}
"
0x28b07e3fe42cd85177bcbbad8e4b60e9e19aac0e.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_327_TokenERC20 {
label=""TokenERC20"";
""327_transferFrom"" [label=""transferFrom""];
""327_approve"" [label=""approve""];
""327_TokenERC20"" [label=""TokenERC20""];
""327_balanceOf"" [label=""balanceOf""];
""327_transfer"" [label=""transfer""];
""327__transfer"" [label=""_transfer""];
""327_approveAndCall"" [label=""approveAndCall""];
""327_allowance"" [label=""allowance""];
""327_transfer"" -> ""327__transfer"";
""327_approveAndCall"" -> ""327_approve"";
""327_transferFrom"" -> ""327__transfer"";
}
"
0x52a4b11b23587467b54a49ec0ccb47436526f714.sol,DoacaoEvento,"contract DoacaoEvento { address public responsavel; enum StatusDoacao{ABERTO, FECHADO, SACADO}",1,"subgraph cluster_190_DoacaoEvento {
label=""DoacaoEvento"";
""190_sacarDoacoes"" [label=""sacarDoacoes""];
""190_fecharDoacoes"" [label=""fecharDoacoes""];
""190_fallback"" [label=""fallback""];
""190_DoacaoEvento"" [label=""DoacaoEvento""];
""190_informarOng"" [label=""informarOng""];
""190_abrirDoacoes"" [label=""abrirDoacoes""];
""190_fecharDoacoes"" -> ""190_apenasResponsavel"";
""190_informarOng"" -> ""190_apenasResponsavel"";
""190_abrirDoacoes"" -> ""190_apenasResponsavel"";
}
"
0x268f03c41d3f33a697eed9c7f0632053556fae9e.sol,BountyClaims,"contract BountyClaims is Ownable { using SafeMath for uint256; ERC20 public token; address public wallet; mapping(address => uint256) bountyTokens; event Claim( address indexed beneficiary, uint256 amount ); function BountyClaims( ERC20 _token, address _wallet) public { require(_token != address(0)); require(_wallet != address(0)); token = _token; wallet = _wallet; }",1,"subgraph cluster_399_BountyClaims {
label=""BountyClaims"";
""399_getUserBounty"" [label=""getUserBounty""];
""399_setGroupBounty"" [label=""setGroupBounty""];
""399_fallback"" [label=""fallback""];
""399_BountyClaims"" [label=""BountyClaims""];
""399_claimToken"" [label=""claimToken""];
""399_setUsersBounty"" [label=""setUsersBounty""];
""399_setUsersBounty"" -> ""399_onlyOwner"";
""399_setGroupBounty"" -> ""399_onlyOwner"";
""399_fallback"" -> ""399_claimToken"";
}
"
0x52fe31c97e5c29ea63cbcfb045e1171427bb9248.sol,NewRich,"contract NewRich is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function NewRich() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x08652C395d8E23fe7e9f436e882DF7C418dB2f3a] = _totalSupply; Transfer(address(0), 0x08652C395d8E23fe7e9f436e882DF7C418dB2f3a, _totalSupply); }",1,"subgraph cluster_543_NewRich {
label=""NewRich"";
""543_NewRich"" [label=""NewRich""];
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_transferFrom"" [label=""transferFrom""];
""543_approve"" [label=""approve""];
""543_fallback"" [label=""fallback""];
""543_totalSupply"" [label=""totalSupply""];
""543_transfer"" [label=""transfer""];
""543_balanceOf"" [label=""balanceOf""];
""543_allowance"" [label=""allowance""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transfer"" -> ""543_safeAdd"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
}
"
0x84148e0e8332e5a965ae33aacb84b6b1a3901dc5.sol,TokenERC20,"contract TokenERC20 { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TokenERC20() public { totalSupply = 80000000 * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = ; symbol = ; }",1,"subgraph cluster_457_TokenERC20 {
label=""TokenERC20"";
""457__transfer"" [label=""_transfer""];
""457_transferFrom"" [label=""transferFrom""];
""457_approve"" [label=""approve""];
""457_burnFrom"" [label=""burnFrom""];
""457_approveAndCall"" [label=""approveAndCall""];
""457_burn"" [label=""burn""];
""457_transfer"" [label=""transfer""];
""457_TokenERC20"" [label=""TokenERC20""];
""457_approveAndCall"" -> ""457_approve"";
""457_transfer"" -> ""457__transfer"";
""457_transferFrom"" -> ""457__transfer"";
}
"
0xcf5a08af322e52bee93861341f7bd90eb3d65aa3.sol,HeavyLitecoin,"contract HeavyLitecoin is ERC20Interface, Owned, SafeMath { string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address => uint) balances; mapping(address => mapping(address => uint)) allowed; function HeavyLitecoin() public { symbol = ; name = ; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0xaCaD93Eaf7509161Fe61C2173ce143fD469e5Cf8] = _totalSupply; Transfer(address(0), 0xaCaD93Eaf7509161Fe61C2173ce143fD469e5Cf8, _totalSupply); }",1,"subgraph cluster_543_HeavyLitecoin {
label=""HeavyLitecoin"";
""543_transferAnyERC20Token"" [label=""transferAnyERC20Token""];
""543_allowance"" [label=""allowance""];
""543_HeavyLitecoin"" [label=""HeavyLitecoin""];
""543_totalSupply"" [label=""totalSupply""];
""543_transferFrom"" [label=""transferFrom""];
""543_approveAndCall"" [label=""approveAndCall""];
""543_transfer"" [label=""transfer""];
""543_fallback"" [label=""fallback""];
""543_balanceOf"" [label=""balanceOf""];
""543_approve"" [label=""approve""];
""543_transfer"" -> ""543_safeAdd"";
""543_transfer"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeSub"";
""543_transferFrom"" -> ""543_safeAdd"";
""543_transferAnyERC20Token"" -> ""543_onlyOwner"";
}
"
0xcf5229653f1badd37ccedd1f96f6171715f28673.sol,TMCToken,"contract TMCToken is Token { string public name; string public symbol; uint8 public decimals = 18; uint256 public totalSupply; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); function TMCToken (uint256 initialSupply, string tokenName, string tokenSymbol) public { totalSupply = initialSupply * 10 ** uint256(decimals); balanceOf[msg.sender] = totalSupply; name = tokenName; symbol = tokenSymbol; }",1,"subgraph cluster_397_TMCToken {
label=""TMCToken"";
""397_transferFrom"" [label=""transferFrom""];
""397_approveAndCall"" [label=""approveAndCall""];
""397_burnFrom"" [label=""burnFrom""];
""397__transfer"" [label=""_transfer""];
""397_burn"" [label=""burn""];
""397_transfer"" [label=""transfer""];
""397_approve"" [label=""approve""];
""397_TMCToken"" [label=""TMCToken""];
""397_transferFrom"" -> ""397__transfer"";
""397_approveAndCall"" -> ""397_approve"";
""397_transfer"" -> ""397__transfer"";
}
"
0x4900320fe47208de0b79db1273a78ab8c8f3528d.sol,Crowdsale,contract Crowdsale is Owned { using SafeMath for uint256; uint256 public fundingGoal; uint256 public price; uint256 public transferableToken; uint256 public soldToken; uint256 public deadline; uint256 public token_price; MontexToken public tokenReward; bool public fundingGoalReached = false; bool public isOpened; mapping (address => Property) public fundersProperty; struct Property { uint256 paymentEther; uint256 reservedToken; },1,"subgraph cluster_811_Crowdsale {
label=""Crowdsale"";
""811_Crowdsale"" [label=""Crowdsale""];
""811_withdrawalOwner"" [label=""withdrawalOwner""];
""811_getRemainingTimeEthToken"" [label=""getRemainingTimeEthToken""];
""811_fallback"" [label=""fallback""];
""811_start"" [label=""start""];
""811_finishCrowdSale"" [label=""finishCrowdSale""];
""811_valNowRate"" [label=""valNowRate""];
""811_getBalance"" [label=""getBalance""];
""811_start"" -> ""811_onlyOwner"";
""811_withdrawalOwner"" -> ""811_onlyOwner"";
""811_finishCrowdSale"" -> ""811_onlyOwner"";
}
"
0x006b4425ba57148466c0c54af1c484348a14a8a4.sol,Crowdsale,"contract Crowdsale is ICrowdsale, Owned { enum Stages { Deploying, Deployed, InProgress, Ended }",1,"subgraph cluster_1994_Crowdsale {
label=""Crowdsale"";
""1994__allocateStakeholdersEth"" [label=""_allocateStakeholdersEth""];
""1994__allocateEth"" [label=""_allocateEth""];
""1994__allocateStakeholdersTokens"" [label=""_allocateStakeholdersTokens""];
""1994_confirmBeneficiary"" [label=""confirmBeneficiary""];
""1994_getCurrentPhase"" [label=""getCurrentPhase""];
""1994_withdrawTokens"" [label=""withdrawTokens""];
""1994_setupStakeholders"" [label=""setupStakeholders""];
""1994_setupPhases"" [label=""setupPhases""];
""1994_fallback"" [label=""fallback""];
""1994_getDistributionData"" [label=""getDistributionData""];
""1994_refund"" [label=""refund""];
""1994_balanceOf"" [label=""balanceOf""];
""1994_destroy"" [label=""destroy""];
""1994_isAcceptedContributor"" [label=""isAcceptedContributor""];
""1994__allocateTokens"" [label=""_allocateTokens""];
""1994__handleTransaction"" [label=""_handleTransaction""];
""1994_toTokens"" [label=""toTokens""];
""1994_contribute"" [label=""contribute""];
""1994_withdrawEther"" [label=""withdrawEther""];
""1994_hasBalance"" [label=""hasBalance""];
""1994_deploy"" [label=""deploy""];
""1994_setupVolumeMultipliers"" [label=""setupVolumeMultipliers""];
""1994_isInPresalePhase"" [label=""isInPresalePhase""];
""1994_ethBalanceOf"" [label=""ethBalanceOf""];
""1994_refundableEthBalanceOf"" [label=""refundableEthBalanceOf""];
""1994_Crowdsale"" [label=""Crowdsale""];
""1994_endCrowdsale"" [label=""endCrowdsale""];
""1994_getRate"" [label=""getRate""];
""1994__allocateEth"" -> ""1994_hasBalance"";
""1994__allocateTokens"" -> ""1994_hasBalance"";
""1994_fallback"" -> ""1994__handleTransaction"";
""1994_refund"" -> ""1994_only_after_crowdsale"";
""1994_setupStakeholders"" -> ""1994_only_owner"";
""1994_setupStakeholders"" -> ""1994_at_stage"";
""1994_setupPhases"" -> ""1994_at_stage"";
""1994_refund"" -> ""1994_at_stage"";
""1994_setupPhases"" -> ""1994_only_owner"";
""1994_setupVolumeMultipliers"" -> ""1994_only_owner"";
""1994_destroy"" -> ""1994_only_beneficiary"";
""1994_confirmBeneficiary"" -> ""1994_only_beneficiary"";
""1994__handleTransaction"" -> ""1994_isInPresalePhase"";
""1994__allocateStakeholdersEth"" -> ""1994__allocateEth"";
""1994_destroy"" -> ""1994_only_after"";
""1994__handleTransaction"" -> ""1994_getRate"";
""1994_setupVolumeMultipliers"" -> ""1994_at_stage"";
""1994_confirmBeneficiary"" -> ""1994_at_stage"";
""1994_deploy"" -> ""1994_at_stage"";
""1994_deploy"" -> ""1994_only_owner"";
""1994__handleTransaction"" -> ""1994_at_stage"";
""1994__allocateStakeholdersTokens"" -> ""1994__allocateTokens"";
""1994__handleTransaction"" -> ""1994__allocateTokens"";
""1994__handleTransaction"" -> ""1994__allocateStakeholdersEth"";
""1994__handleTransaction"" -> ""1994_getCurrentPhase"";
""1994_endCrowdsale"" -> ""1994_at_stage"";
""1994_endCrowdsale"" -> ""1994__allocateStakeholdersTokens"";
""1994_endCrowdsale"" -> ""1994__allocateStakeholdersEth"";
""1994__handleTransaction"" -> ""1994_getDistributionData"";
""1994__handleTransaction"" -> ""1994_isAcceptedContributor"";
""1994_contribute"" -> ""1994__handleTransaction"";
""1994__handleTransaction"" -> ""1994_toTokens"";
}
"
0x025dce2d39a46296766db7cac8c322e8f59cd5d9.sol,Reputation,contract Reputation { address owner; mapping(address => bool) whitelist; mapping(address => int) ratings; constructor () public { owner = msg.sender; },1,"subgraph cluster_84_Reputation {
label=""Reputation"";
""84_getMy"" [label=""getMy""];
""84_get"" [label=""get""];
""84_change"" [label=""change""];
""84_constructor"" [label=""constructor""];
""84_addToWhitelist"" [label=""addToWhitelist""];
}
"
0x185480332ee00c4a23422df11e022172dc10d5a9.sol,NausiCoin,"contract NausiCoin is Erc20Token, owned { string public name; string public symbol; uint public decimals; uint _totalSupply; mapping(address => uint) _balanceOf; mapping(address => mapping(address => uint)) _allowance; event Burn(address indexed from, uint amount); event Mint(address indexed from, uint amount); constructor(string tokenName, string tokenSymbol, uint tokenDecimals, uint tokenTotalSupply) public { name = tokenName; symbol = tokenSymbol; decimals = tokenDecimals; _totalSupply = tokenTotalSupply * 10**uint(decimals); _balanceOf[msg.sender] = _totalSupply; }",1,"subgraph cluster_550_NausiCoin {
label=""NausiCoin"";
""550_transfer"" [label=""transfer""];
""550_fallback"" [label=""fallback""];
""550_balanceOf"" [label=""balanceOf""];
""550_transferFrom"" [label=""transferFrom""];
""550_totalSupply"" [label=""totalSupply""];
""550_allowance"" [label=""allowance""];
""550_mintTo"" [label=""mintTo""];
""550_burnFrom"" [label=""burnFrom""];
""550_approve"" [label=""approve""];
""550__transfer"" [label=""_transfer""];
""550_approveAndCall"" [label=""approveAndCall""];
""550_constructor"" [label=""constructor""];
""550_burnFrom"" -> ""550_onlyOwner"";
""550_transferFrom"" -> ""550__transfer"";
""550_mintTo"" -> ""550_onlyOwner"";
""550_approveAndCall"" -> ""550_approve"";
""550_transfer"" -> ""550__transfer"";
}
"
0x6e6f819299e7809ce744f37fae9f84fe38d95f1c.sol,CompanyFundsWallet,contract CompanyFundsWallet { bytes32 keyHash; address owner; constructor() public { owner = msg.sender; },1,"subgraph cluster_110_CompanyFundsWallet {
label=""CompanyFundsWallet"";
""110_fallback"" [label=""fallback""];
""110_update"" [label=""update""];
""110_constructor"" [label=""constructor""];
""110_clear"" [label=""clear""];
""110_withdraw"" [label=""withdraw""];
""110_setup"" [label=""setup""];
}
"
0x6cc07cb2d1d354f9e2042a26697e7fe9cec4656c.sol,ERGCOIN,contract ERGCOIN is ERC20 { address owner = msg.sender; mapping (address => uint256) balances; mapping (address => mapping (address => uint256)) allowed; uint256 public totalSupply = 800000000 * 10**18; function name() public constant returns (string) { return ; },1,"subgraph cluster_555_ERGCOIN {
label=""ERGCOIN"";
""555_finishDistribution"" [label=""finishDistribution""];
""555_transferOwnership"" [label=""transferOwnership""];
""555_distributeERG"" [label=""distributeERG""];
""555_ERGCOIN"" [label=""ERGCOIN""];
""555_withdrawForeignTokens"" [label=""withdrawForeignTokens""];
""555_symbol"" [label=""symbol""];
""555_allowance"" [label=""allowance""];
""555_approve"" [label=""approve""];
""555_getEthBalance"" [label=""getEthBalance""];
""555_decimals"" [label=""decimals""];
""555_transfer"" [label=""transfer""];
""555_balanceOf"" [label=""balanceOf""];
""555_name"" [label=""name""];
""555_transferFrom"" [label=""transferFrom""];
""555_finishDistribution"" -> ""555_onlyOwner"";
""555_transferFrom"" -> ""555_onlyPayloadSize"";
""555_distributeERG"" -> ""555_onlyOwner"";
""555_distributeERG"" -> ""555_getEthBalance"";
""555_transfer"" -> ""555_onlyPayloadSize"";
""555_distributeERG"" -> ""555_canDistr"";
""555_transferOwnership"" -> ""555_onlyOwner"";
}
"
0x1dc8c35fa368f6ec96e9b95d8c47834e20576cd6.sol,HECFinalToken,"contract HECFinalToken is StandardToken,owned { string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; uint256 public initialSupply; uint256 public deploymentTime = now; uint256 public burnTime = now + 2 minutes; uint256 public sellPrice; uint256 public buyPrice; event FrozenFunds(address target, bool frozen); event Burn(address indexed from, uint256 value); mapping (address => bool) public frozenAccount; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; constructor( )public { initialSupply =10000000000*100000000; balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = ; symbol = ; decimals = 8; owner = msg.sender; }",1,"subgraph cluster_690_HECFinalToken {
label=""HECFinalToken"";
""690_transferFrom"" [label=""transferFrom""];
""690__transfer"" [label=""_transfer""];
""690_transfer"" [label=""transfer""];
""690_constructor"" [label=""constructor""];
""690_setPrices"" [label=""setPrices""];
""690_sell"" [label=""sell""];
""690_burnFrom"" [label=""burnFrom""];
""690_buy"" [label=""buy""];
""690_freezeAccount"" [label=""freezeAccount""];
""690_burn"" [label=""burn""];
""690_buy"" -> ""690__transfer"";
""690_freezeAccount"" -> ""690_onlyOwner"";
""690_sell"" -> ""690__transfer"";
""690_setPrices"" -> ""690_onlyOwner"";
}
"
0x4bd3aac60b2e8893913b8398edda362e6b46dd98.sol,CryptoPoliceOfficerToken,"contract CryptoPoliceOfficerToken is TotalSupply, Balance, Burnable { using MathUtils for uint; string public name; string public symbol; uint8 public decimals = 18; mapping(address => mapping(address => uint)) allowances; bool public publicTransfersEnabled = false; uint public releaseStartTime; uint public lockedAmount; TokenLock[] public locks; struct TokenLock { uint amount; uint timespan; bool released; }",1,"subgraph cluster_840_CryptoPoliceOfficerToken {
label=""CryptoPoliceOfficerToken"";
""840_addTokenLock"" [label=""addTokenLock""];
""840_approveAndCall"" [label=""approveAndCall""];
""840_transfer"" [label=""transfer""];
""840_transferFrom"" [label=""transferFrom""];
""840__transfer"" [label=""_transfer""];
""840_requireOwnerUnlockedAmount"" [label=""requireOwnerUnlockedAmount""];
""840_enablePublicTransfers"" [label=""enablePublicTransfers""];
""840_allowance"" [label=""allowance""];
""840_releaseLockedTokens"" [label=""releaseLockedTokens""];
""840_constructor"" [label=""constructor""];
""840_setCrowdsaleContract"" [label=""setCrowdsaleContract""];
""840_approve"" [label=""approve""];
""840_releaseLockedTokens"" -> ""840_grantOwner"";
""840_setCrowdsaleContract"" -> ""840_grantOwner"";
""840__transfer"" -> ""840_hasSufficientBalance"";
""840_addTokenLock"" -> ""840_grantOwner"";
""840_setCrowdsaleContract"" -> ""840_getCrowdsaleHardCap"";
""840_approveAndCall"" -> ""840_approve"";
""840_transfer"" -> ""840__transfer"";
""840_setCrowdsaleContract"" -> ""840_setCrowdsaleContract"";
""840_enablePublicTransfers"" -> ""840_crowdsaleSuccessful"";
""840__transfer"" -> ""840_whenTransferable"";
""840_transferFrom"" -> ""840__transfer"";
""840_requireOwnerUnlockedAmount"" -> ""840_balanceOf"";
""840_setCrowdsaleContract"" -> ""840_transfer"";
""840_addTokenLock"" -> ""840_requireOwnerUnlockedAmount"";
""840_enablePublicTransfers"" -> ""840_grantOwner"";
""840__transfer"" -> ""840_hasUnlockedAmount"";
}
"
